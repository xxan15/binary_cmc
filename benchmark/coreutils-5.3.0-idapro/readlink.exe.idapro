.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 95626D068EBDC228887E645D3158A62FEF2DF788D01A1E80FFD8CCE60709BC9E
.text:00401000 ; Input MD5    : DA5899D81E5F24CCD83CE554F8B92EED
.text:00401000 ; Input CRC32  : 9F543567
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/readlink.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24C (Wed Apr 20 18:41:16 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000C6D0 (  50896.)
.text:00401000 ; Section size in file          : 0000C800 (  51200.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401910+68↓p
.text:00401040                                         ; .text:0040C960↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40C900
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40E000
.text:004010A2                 mov     edx, dword_40E090
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40E004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40E0B0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40E0B0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40C8D0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40E000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40E004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401910
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
.text:00401174                 call    ExitProcess
.text:00401174 sub_401080      endp
.text:00401174
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40C900
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aCanonicalize   db 'canonicalize',0     ; DATA XREF: .text:off_401300↓o
.text:0040128D aCanonicalizeEx db 'canonicalize-existing',0
.text:0040128D                                         ; DATA XREF: .text:00401310↓o
.text:004012A3 aCanonicalizeMi db 'canonicalize-missing',0
.text:004012A3                                         ; DATA XREF: .text:00401320↓o
.text:004012B8 aNoNewline      db 'no-newline',0       ; DATA XREF: .text:00401330↓o
.text:004012C3 aQuiet          db 'quiet',0
.text:004012C9 aSilent         db 'silent',0           ; DATA XREF: .text:00401350↓o
.text:004012D0 aVerbose        db 'verbose',0          ; DATA XREF: .text:00401360↓o
.text:004012D8 aHelp           db 'help',0             ; DATA XREF: .text:00401370↓o
.text:004012DD aVersion        db 'version',0          ; DATA XREF: .text:00401380↓o
.text:004012E5                 align 20h
.text:00401300 off_401300      dd offset aCanonicalize ; DATA XREF: sub_401910+78↓o
.text:00401300                                         ; "canonicalize"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 66h
.text:00401310                 dd offset aCanonicalizeEx ; "canonicalize-existing"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 65h
.text:00401320                 dd offset aCanonicalizeMi ; "canonicalize-missing"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 6Dh
.text:00401330                 dd offset aNoNewline    ; "no-newline"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 6Eh
.text:00401340 ; ---------------------------------------------------------------------------
.text:00401340                 retn
.text:00401340 ; ---------------------------------------------------------------------------
.text:00401341                 db 12h, 40h, 0
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 71h
.text:00401350                 dd offset aSilent       ; "silent"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 73h
.text:00401360                 dd offset aVerbose      ; "verbose"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 76h
.text:00401370                 dd offset aHelp         ; "help"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 0FFFFFF7Eh
.text:00401380                 dd offset aVersion      ; "version"
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004013A0 ; const char Locale
.text:004013A0 Locale          db 0                    ; DATA XREF: sub_401910+25↓o
.text:004013A0                                         ; sub_401910+2C2↓o
.text:004013A1                 align 20h
.text:004013C0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013C0                                         ; DATA XREF: sub_401910+3F↓o
.text:004013E3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401910+47↓o
.text:004013E3                                         ; sub_401910+54↓o
.text:004013ED aEfmnqsv        db 'efmnqsv',0          ; DATA XREF: sub_401910+80↓o
.text:004013F5                 align 10h
.text:00401400 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401400                                         ; DATA XREF: sub_401910:loc_4019E2↓o
.text:00401400                                         ; .text:00401CCF↓o
.text:00401427 aDmitryVLevin   db 'Dmitry V. Levin',0  ; DATA XREF: sub_401910+11F↓o
.text:00401437 a530            db '5.3.0',0            ; DATA XREF: sub_401910+127↓o
.text:0040143D aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401910+132↓o
.text:0040144B ; const FILE stru_40144B
.text:0040144B stru_40144B     FILE <64616572h, 6B6E696Ch, 61735500h, 203A6567h, 5B207325h, \
.text:0040144B                                         ; DATA XREF: sub_401910+13A↓o
.text:0040144B                                         ; sub_401910:loc_401A63↓o ...
.text:0040144B                       4954504Fh, 2E5D4E4Fh, 46202E2Eh>
.text:0040146B                 db  49h ; I
.text:0040146C                 db  4Ch ; L
.text:0040146D                 db  45h ; E
.text:0040146E                 db  0Ah
.text:0040146F                 db    0
.text:00401470                 align 20h
.text:00401480 aDisplayValueOf db 'Display value of a symbolic link on standard output.',0Ah
.text:00401480                                         ; DATA XREF: sub_401910+172↓o
.text:00401480                                         ; .text:00401D22↓o
.text:00401480                 db 0Ah,0
.text:004014B7                 align 10h
.text:004014C0 aFCanonicalizeC db '  -f, --canonicalize            canonicalize by following every s'
.text:004014C0                                         ; DATA XREF: sub_401910+194↓o
.text:004014C0                                         ; .text:00401D44↓o
.text:004014C0                 db 'ymlink in',0Ah
.text:004014C0                 db '                                every component of the given path'
.text:004014C0                 db ' recursively;',0Ah
.text:004014C0                 db '                                all but the last path component m'
.text:004014C0                 db 'ust exist',0Ah
.text:004014C0                 db '  -e, --canonicalize-existing   canonicalize by following every s'
.text:004014C0                 db 'ymlink in',0Ah
.text:004014C0                 db '                                every component of the given path'
.text:004014C0                 db ' recursively,',0Ah
.text:004014C0                 db '                                all path components must exist',0Ah
.text:004014C0                 db '  -m, --canonicalize-missing    canonicalize by following every s'
.text:004014C0                 db 'ymlink in',0Ah
.text:004014C0                 db '                                every component of the given path'
.text:004014C0                 db ' recursively,',0Ah
.text:004014C0                 db '                                without requirements on component'
.text:004014C0                 db 's existence',0Ah
.text:004014C0                 db '  -n, --no-newline              do not output the trailing newlin'
.text:004014C0                 db 'e',0Ah
.text:004014C0                 db '  -q, --quiet,',0Ah
.text:004014C0                 db '  -s, --silent                  suppress most error messages',0Ah
.text:004014C0                 db '  -v, --verbose                 report error messages',0Ah,0
.text:0040182B                 align 20h
.text:00401840 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401840                                         ; DATA XREF: sub_401910+1B6↓o
.text:00401840                                         ; .text:00401D66↓o
.text:0040186D                 align 20h
.text:00401880 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401880                                         ; DATA XREF: sub_401910+1D8↓o
.text:00401880                                         ; .text:00401D88↓o
.text:004018B6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401910+1FA↓o
.text:004018B6                                         ; .text:00401DAA↓o
.text:004018B6                 db 'Report bugs to <%s>.',0Ah,0
.text:004018CD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004018CD                                         ; DATA XREF: sub_401910+207↓o
.text:004018CD                                         ; .text:00401DB7↓o
.text:004018E3 ; const char Format[]
.text:004018E3 Format          db '%s%s',0             ; DATA XREF: sub_401910+2CF↓o
.text:004018E8 asc_4018E8      db 0Ah,0                ; DATA XREF: sub_401910:loc_401BFD↓o
.text:004018EA ; const char aS[]
.text:004018EA aS              db '%s',0               ; DATA XREF: sub_401910+309↓o
.text:004018ED aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401910+34F↓o
.text:004018FE aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401910:loc_401C8F↓o
.text:0040190E                 align 10h
.text:00401910
.text:00401910 ; =============== S U B R O U T I N E =======================================
.text:00401910
.text:00401910 ; Attributes: bp-based frame fuzzy-sp
.text:00401910
.text:00401910 sub_401910      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401910
.text:00401910 Category        = dword ptr -28h
.text:00401910 Locale          = dword ptr -24h
.text:00401910 var_20          = dword ptr -20h
.text:00401910 var_1C          = byte ptr -1Ch
.text:00401910 var_18          = byte ptr -18h
.text:00401910 var_14          = dword ptr -14h
.text:00401910 var_10          = dword ptr -10h
.text:00401910 arg_0           = dword ptr  8
.text:00401910 arg_4           = dword ptr  0Ch
.text:00401910
.text:00401910                 push    ebp
.text:00401911                 xor     eax, eax
.text:00401913                 mov     ebp, esp
.text:00401915                 push    edi
.text:00401916                 mov     edi, 0FFFFFFFFh
.text:0040191B                 push    esi
.text:0040191C                 push    ebx
.text:0040191D                 sub     esp, 1Ch
.text:00401920                 mov     esi, [ebp+arg_4]
.text:00401923                 and     esp, 0FFFFFFF0h
.text:00401926                 mov     ebx, [ebp+arg_0]
.text:00401929                 call    __alloca
.text:0040192E                 call    sub_40C9A0
.text:00401933                 mov     edx, [esi]
.text:00401935                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:0040193D                 mov     [esp+28h+Category], 0 ; Category
.text:00401944                 mov     ds:dword_40F4D0, edx
.text:0040194A                 call    setlocale
.text:0040194F                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401957                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:0040195E                 call    ds:__imp_libintl_bindtextdomain
.text:00401964                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:0040196B                 call    ds:libintl_textdomain
.text:00401971                 mov     [esp+28h+Category], offset sub_403B00 ; void (__cdecl *)()
.text:00401978                 call    sub_401040
.text:0040197D                 lea     esi, [esi+0]
.text:00401980
.text:00401980 loc_401980:                             ; CODE XREF: sub_401910+C6↓j
.text:00401980                                         ; sub_401910+D0↓j ...
.text:00401980                 mov     dword ptr [esp+28h+var_18], 0
.text:00401988                 mov     dword ptr [esp+28h+var_1C], offset off_401300 ; char
.text:00401990                 mov     [esp+28h+var_20], offset aEfmnqsv ; "efmnqsv"
.text:00401998                 mov     [esp+28h+Locale], esi
.text:0040199C                 mov     [esp+28h+Category], ebx
.text:0040199F                 call    sub_403990
.text:004019A4                 cmp     eax, 0FFFFFFFFh
.text:004019A7                 jz      loc_401B8A
.text:004019AD                 cmp     eax, 6Dh ; 'm'
.text:004019B0                 jz      loc_401B80
.text:004019B6                 cmp     eax, 6Dh ; 'm'
.text:004019B9                 jg      loc_401B30
.text:004019BF                 cmp     eax, 0FFFFFF7Eh
.text:004019C4                 jz      loc_401A63
.text:004019CA                 cmp     eax, 0FFFFFF7Eh
.text:004019CF                 jle     short loc_401A1A
.text:004019D1                 xor     edi, edi
.text:004019D3                 cmp     eax, 65h ; 'e'
.text:004019D6                 jz      short loc_401980
.text:004019D8                 cmp     eax, 66h ; 'f'
.text:004019DB                 mov     edi, 1
.text:004019E0                 jz      short loc_401980
.text:004019E2
.text:004019E2 loc_4019E2:                             ; CODE XREF: sub_401910+10F↓j
.text:004019E2                                         ; sub_401910+22D↓j ...
.text:004019E2                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004019E9                 call    ds:libintl_gettext
.text:004019EF                 mov     edi, ds:_iob
.text:004019F5                 mov     ecx, ds:dword_40F4D0
.text:004019FB                 add     edi, 40h ; '@'
.text:004019FE                 mov     [esp+28h+var_20], ecx
.text:00401A02                 mov     [esp+28h+Locale], eax ; Format
.text:00401A06                 mov     [esp+28h+Category], edi ; Stream
.text:00401A09                 call    fprintf
.text:00401A0E                 mov     [esp+28h+Category], 1 ; Code
.text:00401A15
.text:00401A15 loc_401A15:                             ; CODE XREF: sub_401910+151↓j
.text:00401A15                 call    exit
.text:00401A1A ; ---------------------------------------------------------------------------
.text:00401A1A
.text:00401A1A loc_401A1A:                             ; CODE XREF: sub_401910+BF↑j
.text:00401A1A                 cmp     eax, 0FFFFFF7Dh
.text:00401A1F                 jnz     short loc_4019E2
.text:00401A21                 mov     [esp+28h+var_14], 0
.text:00401A29                 mov     edx, ds:_iob
.text:00401A2F                 mov     dword ptr [esp+28h+var_18], offset aDmitryVLevin ; "Dmitry V. Levin"
.text:00401A37                 mov     dword ptr [esp+28h+var_1C], offset a530 ; "5.3.0"
.text:00401A3F                 add     edx, 20h ; ' '
.text:00401A42                 mov     [esp+28h+var_20], offset aGnuCoreutils ; "GNU coreutils"
.text:00401A4A                 mov     [esp+28h+Locale], offset stru_40144B ; FILE *
.text:00401A52                 mov     [esp+28h+Category], edx ; FILE *
.text:00401A55                 call    sub_403950
.text:00401A5A
.text:00401A5A loc_401A5A:                             ; CODE XREF: sub_401910+217↓j
.text:00401A5A                 mov     [esp+28h+Category], 0
.text:00401A61                 jmp     short loc_401A15
.text:00401A63 ; ---------------------------------------------------------------------------
.text:00401A63
.text:00401A63 loc_401A63:                             ; CODE XREF: sub_401910+B4↑j
.text:00401A63                 mov     [esp+28h+Category], (offset stru_40144B._base+1)
.text:00401A6A                 call    ds:libintl_gettext
.text:00401A70                 mov     ecx, ds:dword_40F4D0
.text:00401A76                 mov     [esp+28h+Category], eax ; Format
.text:00401A79                 mov     [esp+28h+Locale], ecx
.text:00401A7D                 call    printf
.text:00401A82                 mov     [esp+28h+Category], offset aDisplayValueOf ; "Display value of a symbolic link on sta"...
.text:00401A89                 call    ds:libintl_gettext
.text:00401A8F                 mov     edi, ds:_iob
.text:00401A95                 add     edi, 20h ; ' '
.text:00401A98                 mov     [esp+28h+Locale], edi ; Stream
.text:00401A9C                 mov     [esp+28h+Category], eax ; Buffer
.text:00401A9F                 call    fputs
.text:00401AA4                 mov     [esp+28h+Category], offset aFCanonicalizeC ; "  -f, --canonicalize            canonic"...
.text:00401AAB                 call    ds:libintl_gettext
.text:00401AB1                 mov     esi, ds:_iob
.text:00401AB7                 add     esi, 20h ; ' '
.text:00401ABA                 mov     [esp+28h+Locale], esi ; Stream
.text:00401ABE                 mov     [esp+28h+Category], eax ; Buffer
.text:00401AC1                 call    fputs
.text:00401AC6                 mov     [esp+28h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401ACD                 call    ds:libintl_gettext
.text:00401AD3                 mov     ebx, ds:_iob
.text:00401AD9                 add     ebx, 20h ; ' '
.text:00401ADC                 mov     [esp+28h+Locale], ebx ; Stream
.text:00401AE0                 mov     [esp+28h+Category], eax ; Buffer
.text:00401AE3                 call    fputs
.text:00401AE8                 mov     [esp+28h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401AEF                 call    ds:libintl_gettext
.text:00401AF5                 mov     ecx, ds:_iob
.text:00401AFB                 add     ecx, 20h ; ' '
.text:00401AFE                 mov     [esp+28h+Locale], ecx ; Stream
.text:00401B02                 mov     [esp+28h+Category], eax ; Buffer
.text:00401B05                 call    fputs
.text:00401B0A                 mov     [esp+28h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401B11                 call    ds:libintl_gettext
.text:00401B17                 mov     [esp+28h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401B1F                 mov     [esp+28h+Category], eax ; Format
.text:00401B22                 call    printf
.text:00401B27                 jmp     loc_401A5A
.text:00401B27 ; ---------------------------------------------------------------------------
.text:00401B2C                 align 10h
.text:00401B30
.text:00401B30 loc_401B30:                             ; CODE XREF: sub_401910+A9↑j
.text:00401B30                 cmp     eax, 71h ; 'q'
.text:00401B33                 jz      short loc_401B70
.text:00401B35                 cmp     eax, 71h ; 'q'
.text:00401B38                 jg      short loc_401B50
.text:00401B3A                 cmp     eax, 6Eh ; 'n'
.text:00401B3D                 jnz     loc_4019E2
.text:00401B43                 mov     ds:byte_40F000, 1
.text:00401B4A                 jmp     loc_401980
.text:00401B4A ; ---------------------------------------------------------------------------
.text:00401B4F                 align 10h
.text:00401B50
.text:00401B50 loc_401B50:                             ; CODE XREF: sub_401910+228↑j
.text:00401B50                 cmp     eax, 73h ; 's'
.text:00401B53                 jz      short loc_401B70
.text:00401B55                 cmp     eax, 76h ; 'v'
.text:00401B58                 jnz     loc_4019E2
.text:00401B5E                 mov     ds:byte_40F010, 1
.text:00401B65                 jmp     loc_401980
.text:00401B65 ; ---------------------------------------------------------------------------
.text:00401B6A                 align 10h
.text:00401B70
.text:00401B70 loc_401B70:                             ; CODE XREF: sub_401910+223↑j
.text:00401B70                                         ; sub_401910+243↑j
.text:00401B70                 mov     ds:byte_40F010, 0
.text:00401B77                 jmp     loc_401980
.text:00401B77 ; ---------------------------------------------------------------------------
.text:00401B7C                 align 10h
.text:00401B80
.text:00401B80 loc_401B80:                             ; CODE XREF: sub_401910+A0↑j
.text:00401B80                 mov     edi, 2
.text:00401B85                 jmp     loc_401980
.text:00401B8A ; ---------------------------------------------------------------------------
.text:00401B8A
.text:00401B8A loc_401B8A:                             ; CODE XREF: sub_401910+97↑j
.text:00401B8A                 mov     eax, dword_40E010
.text:00401B8F                 cmp     eax, ebx
.text:00401B91                 jge     loc_401C8F
.text:00401B97                 mov     ecx, [esi+eax*4]
.text:00401B9A                 inc     eax
.text:00401B9B                 cmp     eax, ebx
.text:00401B9D                 mov     [ebp+var_10], ecx
.text:00401BA0                 mov     dword_40E010, eax
.text:00401BA5                 jl      loc_401C54
.text:00401BAB                 cmp     edi, 0FFFFFFFFh
.text:00401BAE                 jz      loc_401C3C
.text:00401BB4                 mov     [esp+28h+Locale], edi
.text:00401BB8                 mov     edx, [ebp+var_10]
.text:00401BBB                 mov     [esp+28h+Category], edx
.text:00401BBE                 call    sub_401DE0
.text:00401BC3
.text:00401BC3 loc_401BC3:                             ; CODE XREF: sub_401910+33F↓j
.text:00401BC3                 test    eax, eax
.text:00401BC5                 mov     ebx, eax
.text:00401BC7                 jz      short loc_401C04
.text:00401BC9                 cmp     ds:byte_40F000, 0
.text:00401BD0                 jz      short loc_401BFD
.text:00401BD2                 mov     eax, offset Locale
.text:00401BD7
.text:00401BD7 loc_401BD7:                             ; CODE XREF: sub_401910+2F2↓j
.text:00401BD7                 mov     [esp+28h+var_20], eax
.text:00401BDB                 mov     [esp+28h+Locale], ebx
.text:00401BDF                 mov     [esp+28h+Category], offset Format ; "%s%s"
.text:00401BE6                 call    printf
.text:00401BEB                 mov     [esp+28h+Category], ebx ; Block
.text:00401BEE                 call    free
.text:00401BF3                 xor     eax, eax
.text:00401BF5
.text:00401BF5 loc_401BF5:                             ; CODE XREF: sub_401910+302↓j
.text:00401BF5                 lea     esp, [ebp-0Ch]
.text:00401BF8                 pop     ebx
.text:00401BF9                 pop     esi
.text:00401BFA                 pop     edi
.text:00401BFB                 pop     ebp
.text:00401BFC                 retn
.text:00401BFD ; ---------------------------------------------------------------------------
.text:00401BFD
.text:00401BFD loc_401BFD:                             ; CODE XREF: sub_401910+2C0↑j
.text:00401BFD                 mov     eax, offset asc_4018E8 ; "\n"
.text:00401C02                 jmp     short loc_401BD7
.text:00401C04 ; ---------------------------------------------------------------------------
.text:00401C04
.text:00401C04 loc_401C04:                             ; CODE XREF: sub_401910+2B7↑j
.text:00401C04                 cmp     ds:byte_40F010, 0
.text:00401C0B                 jnz     short loc_401C14
.text:00401C0D
.text:00401C0D loc_401C0D:                             ; CODE XREF: sub_401910+32A↓j
.text:00401C0D                 mov     eax, 1
.text:00401C12                 jmp     short loc_401BF5
.text:00401C14 ; ---------------------------------------------------------------------------
.text:00401C14
.text:00401C14 loc_401C14:                             ; CODE XREF: sub_401910+2FB↑j
.text:00401C14                 call    _errno
.text:00401C19                 mov     [esp+28h+var_20], offset aS ; "%s"
.text:00401C21                 mov     ebx, [ebp+var_10]
.text:00401C24                 mov     dword ptr [esp+28h+var_1C], ebx ; char
.text:00401C28                 mov     esi, [eax]
.text:00401C2A                 mov     [esp+28h+Category], 1 ; Code
.text:00401C31                 mov     [esp+28h+Locale], esi ; ErrorMessage
.text:00401C35                 call    sub_405340
.text:00401C3A                 jmp     short loc_401C0D
.text:00401C3C ; ---------------------------------------------------------------------------
.text:00401C3C
.text:00401C3C loc_401C3C:                             ; CODE XREF: sub_401910+29E↑j
.text:00401C3C                 mov     [esp+28h+Locale], 400h ; int
.text:00401C44                 mov     eax, [ebp+var_10]
.text:00401C47                 mov     [esp+28h+Category], eax ; char *
.text:00401C4A                 call    sub_403390
.text:00401C4F                 jmp     loc_401BC3
.text:00401C54 ; ---------------------------------------------------------------------------
.text:00401C54
.text:00401C54 loc_401C54:                             ; CODE XREF: sub_401910+295↑j
.text:00401C54                 mov     ebx, [esi+eax*4]
.text:00401C57                 mov     [esp+28h+Category], ebx ; char *
.text:00401C5A                 call    sub_403460
.text:00401C5F                 mov     [esp+28h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00401C66                 mov     esi, eax
.text:00401C68                 call    ds:libintl_gettext
.text:00401C6E                 mov     dword ptr [esp+28h+var_1C], esi ; char
.text:00401C72                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401C7A                 mov     [esp+28h+Category], 0 ; Code
.text:00401C81                 mov     [esp+28h+var_20], eax ; char *
.text:00401C85                 call    sub_405340
.text:00401C8A                 jmp     loc_4019E2
.text:00401C8F ; ---------------------------------------------------------------------------
.text:00401C8F
.text:00401C8F loc_401C8F:                             ; CODE XREF: sub_401910+281↑j
.text:00401C8F                 mov     [esp+28h+Category], offset aMissingOperand ; "missing operand"
.text:00401C96                 call    ds:libintl_gettext
.text:00401C9C                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401CA4                 mov     [esp+28h+Category], 0 ; Code
.text:00401CAB                 mov     [esp+28h+var_20], eax ; char *
.text:00401CAF                 call    sub_405340
.text:00401CB4                 jmp     loc_4019E2
.text:00401CB4 sub_401910      endp
.text:00401CB4
.text:00401CB4 ; ---------------------------------------------------------------------------
.text:00401CB9                 align 10h
.text:00401CC0                 sub     esp, 1Ch
.text:00401CC3                 mov     [esp+18h], ebx
.text:00401CC7                 mov     ebx, [esp+20h]
.text:00401CCB                 test    ebx, ebx
.text:00401CCD                 jz      short loc_401D03
.text:00401CCF                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401CD6                 call    ds:libintl_gettext
.text:00401CDC                 mov     edx, ds:_iob
.text:00401CE2                 mov     ecx, ds:dword_40F4D0
.text:00401CE8                 add     edx, 40h ; '@'
.text:00401CEB                 mov     [esp+8], ecx
.text:00401CEF                 mov     [esp+4], eax
.text:00401CF3                 mov     [esp], edx
.text:00401CF6                 call    fprintf
.text:00401CFB
.text:00401CFB loc_401CFB:                             ; CODE XREF: .text:00401DC7↓j
.text:00401CFB                 mov     [esp], ebx
.text:00401CFE                 call    exit
.text:00401D03 ; ---------------------------------------------------------------------------
.text:00401D03
.text:00401D03 loc_401D03:                             ; CODE XREF: .text:00401CCD↑j
.text:00401D03                 mov     dword ptr [esp], (offset stru_40144B._base+1)
.text:00401D0A                 call    ds:libintl_gettext
.text:00401D10                 mov     ecx, ds:dword_40F4D0
.text:00401D16                 mov     [esp], eax
.text:00401D19                 mov     [esp+4], ecx
.text:00401D1D                 call    printf
.text:00401D22                 mov     dword ptr [esp], offset aDisplayValueOf ; "Display value of a symbolic link on sta"...
.text:00401D29                 call    ds:libintl_gettext
.text:00401D2F                 mov     ecx, ds:_iob
.text:00401D35                 add     ecx, 20h ; ' '
.text:00401D38                 mov     [esp+4], ecx
.text:00401D3C                 mov     [esp], eax
.text:00401D3F                 call    fputs
.text:00401D44                 mov     dword ptr [esp], offset aFCanonicalizeC ; "  -f, --canonicalize            canonic"...
.text:00401D4B                 call    ds:libintl_gettext
.text:00401D51                 mov     ecx, ds:_iob
.text:00401D57                 add     ecx, 20h ; ' '
.text:00401D5A                 mov     [esp+4], ecx
.text:00401D5E                 mov     [esp], eax
.text:00401D61                 call    fputs
.text:00401D66                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401D6D                 call    ds:libintl_gettext
.text:00401D73                 mov     ecx, ds:_iob
.text:00401D79                 add     ecx, 20h ; ' '
.text:00401D7C                 mov     [esp+4], ecx
.text:00401D80                 mov     [esp], eax
.text:00401D83                 call    fputs
.text:00401D88                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401D8F                 call    ds:libintl_gettext
.text:00401D95                 mov     ecx, ds:_iob
.text:00401D9B                 add     ecx, 20h ; ' '
.text:00401D9E                 mov     [esp+4], ecx
.text:00401DA2                 mov     [esp], eax
.text:00401DA5                 call    fputs
.text:00401DAA                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401DB1                 call    ds:libintl_gettext
.text:00401DB7                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401DBF                 mov     [esp], eax
.text:00401DC2                 call    printf
.text:00401DC7                 jmp     loc_401CFB
.text:00401DC7 ; ---------------------------------------------------------------------------
.text:00401DCC                 align 20h
.text:00401DE0
.text:00401DE0 ; =============== S U B R O U T I N E =======================================
.text:00401DE0
.text:00401DE0
.text:00401DE0 sub_401DE0      proc near               ; CODE XREF: sub_401910+2AE↑p
.text:00401DE0
.text:00401DE0 Str             = dword ptr -0DCh
.text:00401DE0 Val             = dword ptr -0D8h
.text:00401DE0 Size            = dword ptr -0D4h
.text:00401DE0 var_C0          = dword ptr -0C0h
.text:00401DE0 var_BC          = dword ptr -0BCh
.text:00401DE0 var_B8          = dword ptr -0B8h
.text:00401DE0 Block           = dword ptr -0B4h
.text:00401DE0 var_B0          = dword ptr -0B0h
.text:00401DE0 var_AC          = dword ptr -0ACh
.text:00401DE0 var_7C          = dword ptr -7Ch
.text:00401DE0 var_3C          = byte ptr -3Ch
.text:00401DE0 arg_0           = dword ptr  4
.text:00401DE0 arg_4           = dword ptr  8
.text:00401DE0
.text:00401DE0                 push    ebp
.text:00401DE1                 push    edi
.text:00401DE2                 push    esi
.text:00401DE3                 push    ebx
.text:00401DE4                 sub     esp, 0CCh
.text:00401DEA                 mov     esi, [esp+0DCh+arg_0]
.text:00401DF1                 mov     [esp+0DCh+Block], 0
.text:00401DF9                 mov     [esp+0DCh+var_BC], 0
.text:00401E01                 test    esi, esi
.text:00401E03                 jz      loc_402200
.text:00401E09                 movzx   eax, byte ptr [esi]
.text:00401E0C                 test    al, al
.text:00401E0E                 jz      loc_4021F0
.text:00401E14                 cmp     al, 2Fh ; '/'
.text:00401E16                 jz      loc_4021C7
.text:00401E1C                 call    loc_403EB0
.text:00401E21                 mov     [esp+0DCh+var_B0], eax
.text:00401E25                 mov     ecx, [esp+0DCh+var_B0]
.text:00401E29                 xor     eax, eax
.text:00401E2B                 test    ecx, ecx
.text:00401E2D                 jz      loc_401FBD
.text:00401E33                 mov     [esp+0DCh+Val], 0 ; Val
.text:00401E3B                 mov     ecx, [esp+0DCh+var_B0]
.text:00401E3F                 mov     [esp+0DCh+Str], ecx ; Str
.text:00401E42                 call    strchr
.text:00401E47                 mov     [esp+0DCh+var_B8], eax
.text:00401E4B                 mov     edx, [esp+0DCh+var_B0]
.text:00401E4F                 mov     ebx, eax
.text:00401E51                 mov     ebp, eax
.text:00401E53                 sub     ebx, edx
.text:00401E55                 cmp     ebx, 3FFh
.text:00401E5B                 jle     loc_40219E
.text:00401E61
.text:00401E61 loc_401E61:                             ; CODE XREF: sub_401DE0+3E2↓j
.text:00401E61                                         ; sub_401DE0+40B↓j
.text:00401E61                 lea     edi, [esp+0DCh+var_3C]
.text:00401E68                 mov     [esp+0DCh+Str], edi
.text:00401E6B                 call    sub_402210
.text:00401E70                 cmp     byte ptr [esi], 0
.text:00401E73                 jz      loc_401F9A
.text:00401E79                 lea     esi, [esi+0]
.text:00401E80
.text:00401E80 loc_401E80:                             ; CODE XREF: sub_401DE0+1B4↓j
.text:00401E80                 movzx   edx, byte ptr [esi]
.text:00401E83                 cmp     dl, 2Fh ; '/'
.text:00401E86                 jz      loc_402190
.text:00401E8C
.text:00401E8C loc_401E8C:                             ; CODE XREF: sub_401DE0+3B9↓j
.text:00401E8C                 test    dl, dl
.text:00401E8E                 mov     edi, esi
.text:00401E90                 jz      short loc_401EAC
.text:00401E92                 cmp     dl, 2Fh ; '/'
.text:00401E95                 jz      short loc_401EAC
.text:00401E97                 mov     esi, esi
.text:00401E99                 lea     edi, [edi+0]
.text:00401EA0
.text:00401EA0 loc_401EA0:                             ; CODE XREF: sub_401DE0+CA↓j
.text:00401EA0                 inc     edi
.text:00401EA1                 movzx   eax, byte ptr [edi]
.text:00401EA4                 test    al, al
.text:00401EA6                 jz      short loc_401EAC
.text:00401EA8                 cmp     al, 2Fh ; '/'
.text:00401EAA                 jnz     short loc_401EA0
.text:00401EAC
.text:00401EAC loc_401EAC:                             ; CODE XREF: sub_401DE0+B0↑j
.text:00401EAC                                         ; sub_401DE0+B5↑j ...
.text:00401EAC                 cmp     edi, esi
.text:00401EAE                 jz      loc_401F9A
.text:00401EB4                 mov     eax, edi
.text:00401EB6                 sub     eax, esi
.text:00401EB8                 cmp     eax, 1
.text:00401EBB                 jz      loc_402180
.text:00401EC1
.text:00401EC1 loc_401EC1:                             ; CODE XREF: sub_401DE0+3A3↓j
.text:00401EC1                 cmp     eax, 2
.text:00401EC4                 jz      loc_40214F
.text:00401ECA
.text:00401ECA loc_401ECA:                             ; CODE XREF: sub_401DE0+372↓j
.text:00401ECA                                         ; sub_401DE0+37C↓j
.text:00401ECA                 cmp     byte ptr [ebp-1], 2Fh ; '/'
.text:00401ECE                 jz      short loc_401ED5
.text:00401ED0                 mov     byte ptr [ebp+0], 2Fh ; '/'
.text:00401ED4                 inc     ebp
.text:00401ED5
.text:00401ED5 loc_401ED5:                             ; CODE XREF: sub_401DE0+EE↑j
.text:00401ED5                 mov     edx, edi
.text:00401ED7                 sub     edx, esi
.text:00401ED9                 lea     ecx, [edx+ebp]
.text:00401EDC                 cmp     ecx, [esp+0DCh+var_B8]
.text:00401EE0                 jb      short loc_401F21
.text:00401EE2                 mov     ebx, [esp+0DCh+var_B0]
.text:00401EE6                 mov     ecx, [esp+0DCh+var_B0]
.text:00401EEA                 sub     ebp, ebx
.text:00401EEC                 mov     ebx, [esp+0DCh+var_B8]
.text:00401EF0                 sub     ebx, ecx
.text:00401EF2                 lea     ecx, [edx+1]
.text:00401EF5                 cmp     ecx, 400h
.text:00401EFB                 jle     loc_402144
.text:00401F01                 lea     ebx, [edx+ebx+1]
.text:00401F05
.text:00401F05 loc_401F05:                             ; CODE XREF: sub_401DE0+36A↓j
.text:00401F05                 mov     [esp+0DCh+Val], ebx ; size_t
.text:00401F09                 mov     eax, [esp+0DCh+var_B0]
.text:00401F0D                 mov     [esp+0DCh+Str], eax ; void *
.text:00401F10                 call    sub_403CB0
.text:00401F15                 mov     [esp+0DCh+var_B0], eax
.text:00401F19                 add     ebx, eax
.text:00401F1B                 add     ebp, eax
.text:00401F1D                 mov     [esp+0DCh+var_B8], ebx
.text:00401F21
.text:00401F21 loc_401F21:                             ; CODE XREF: sub_401DE0+100↑j
.text:00401F21                 mov     [esp+0DCh+Str], ebp ; void *
.text:00401F24                 mov     ebx, edi
.text:00401F26                 sub     ebx, esi
.text:00401F28                 mov     [esp+0DCh+Size], ebx ; Size
.text:00401F2C                 mov     [esp+0DCh+Val], esi ; Src
.text:00401F30                 call    memcpy
.text:00401F35                 mov     ebp, eax
.text:00401F37                 add     ebp, ebx
.text:00401F39                 lea     ebx, [esp+0DCh+var_AC]
.text:00401F3D                 mov     byte ptr [ebp+0], 0
.text:00401F41                 mov     edx, [esp+0DCh+var_B0]
.text:00401F45                 mov     [esp+0DCh+Val], ebx
.text:00401F49                 mov     [esp+0DCh+Str], edx
.text:00401F4C                 call    sub_4055E0
.text:00401F51                 test    eax, eax
.text:00401F53                 js      loc_402114
.text:00401F59
.text:00401F59 loc_401F59:                             ; CODE XREF: sub_401DE0+355↓j
.text:00401F59                 mov     eax, [esp+0DCh+var_AC]
.text:00401F5D                 and     eax, 0F000h
.text:00401F62                 cmp     eax, 0A000h
.text:00401F67                 jz      loc_401FF7
.text:00401F6D                 cmp     eax, 4000h
.text:00401F72                 jz      short loc_401FF2
.text:00401F74                 movzx   eax, byte ptr [edi]
.text:00401F77                 test    al, al
.text:00401F79                 jz      short loc_401F90
.text:00401F7B                 cmp     [esp+0DCh+arg_4], 2
.text:00401F83                 jnz     short loc_401FCB
.text:00401F85                 lea     esi, [esi+0]
.text:00401F89                 lea     edi, [edi+0]
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_401DE0+199↑j
.text:00401F90                                         ; sub_401DE0+215↓j
.text:00401F90                 test    al, al
.text:00401F92                 mov     esi, edi
.text:00401F94                 jnz     loc_401E80
.text:00401F9A
.text:00401F9A loc_401F9A:                             ; CODE XREF: sub_401DE0+93↑j
.text:00401F9A                                         ; sub_401DE0+CE↑j
.text:00401F9A                 mov     esi, [esp+0DCh+var_B0]
.text:00401F9E                 inc     esi
.text:00401F9F                 cmp     ebp, esi
.text:00401FA1                 jbe     short loc_401FA9
.text:00401FA3                 cmp     byte ptr [ebp-1], 2Fh ; '/'
.text:00401FA7                 jz      short loc_401FC8
.text:00401FA9
.text:00401FA9 loc_401FA9:                             ; CODE XREF: sub_401DE0+1C1↑j
.text:00401FA9                                         ; sub_401DE0+1E9↓j
.text:00401FA9                 mov     byte ptr [ebp+0], 0
.text:00401FAD                 mov     ebp, [esp+0DCh+Block]
.text:00401FB1                 mov     [esp+0DCh+Str], ebp ; Block
.text:00401FB4                 call    free
.text:00401FB9                 mov     eax, [esp+0DCh+var_B0]
.text:00401FBD
.text:00401FBD loc_401FBD:                             ; CODE XREF: sub_401DE0+4D↑j
.text:00401FBD                                         ; sub_401DE0+210↓j
.text:00401FBD                 add     esp, 0CCh
.text:00401FC3                 pop     ebx
.text:00401FC4                 pop     esi
.text:00401FC5                 pop     edi
.text:00401FC6                 pop     ebp
.text:00401FC7                 retn
.text:00401FC8 ; ---------------------------------------------------------------------------
.text:00401FC8
.text:00401FC8 loc_401FC8:                             ; CODE XREF: sub_401DE0+1C7↑j
.text:00401FC8                 dec     ebp
.text:00401FC9                 jmp     short loc_401FA9
.text:00401FCB ; ---------------------------------------------------------------------------
.text:00401FCB
.text:00401FCB loc_401FCB:                             ; CODE XREF: sub_401DE0+1A3↑j
.text:00401FCB                 call    _errno
.text:00401FD0                 mov     dword ptr [eax], 14h
.text:00401FD6
.text:00401FD6 loc_401FD6:                             ; CODE XREF: sub_401DE0+243↓j
.text:00401FD6                                         ; sub_401DE0+33D↓j ...
.text:00401FD6                 mov     ecx, [esp+0DCh+Block]
.text:00401FDA                 mov     [esp+0DCh+Str], ecx ; Block
.text:00401FDD                 call    free
.text:00401FE2                 mov     edi, [esp+0DCh+var_B0]
.text:00401FE6                 mov     [esp+0DCh+Str], edi ; Block
.text:00401FE9                 call    free
.text:00401FEE
.text:00401FEE loc_401FEE:                             ; CODE XREF: sub_401DE0+41B↓j
.text:00401FEE                                         ; sub_401DE0+42B↓j
.text:00401FEE                 xor     eax, eax
.text:00401FF0                 jmp     short loc_401FBD
.text:00401FF2 ; ---------------------------------------------------------------------------
.text:00401FF2
.text:00401FF2 loc_401FF2:                             ; CODE XREF: sub_401DE0+192↑j
.text:00401FF2                                         ; sub_401DE0+241↓j ...
.text:00401FF2                 movzx   eax, byte ptr [edi]
.text:00401FF5                 jmp     short loc_401F90
.text:00401FF7 ; ---------------------------------------------------------------------------
.text:00401FF7
.text:00401FF7 loc_401FF7:                             ; CODE XREF: sub_401DE0+187↑j
.text:00401FF7                 mov     [esp+0DCh+Val], ebx
.text:00401FFB                 lea     esi, [esp+0DCh+var_3C]
.text:00402002                 mov     [esp+0DCh+Str], esi
.text:00402005                 call    sub_402280
.text:0040200A                 test    al, al
.text:0040200C                 jz      short loc_402025
.text:0040200E                 call    _errno
.text:00402013                 mov     dword ptr [eax], 3Eh ; '>'
.text:00402019
.text:00402019 loc_402019:                             ; CODE XREF: sub_401DE0+25D↓j
.text:00402019                 cmp     [esp+0DCh+arg_4], 2
.text:00402021                 jz      short loc_401FF2
.text:00402023                 jmp     short loc_401FD6
.text:00402025 ; ---------------------------------------------------------------------------
.text:00402025
.text:00402025 loc_402025:                             ; CODE XREF: sub_401DE0+22C↑j
.text:00402025                 mov     edx, [esp+0DCh+var_7C]
.text:00402029                 mov     ebx, [esp+0DCh+var_B0]
.text:0040202D                 mov     [esp+0DCh+Val], edx ; int
.text:00402031                 mov     [esp+0DCh+Str], ebx ; char *
.text:00402034                 call    sub_403390
.text:00402039                 test    eax, eax
.text:0040203B                 mov     esi, eax
.text:0040203D                 jz      short loc_402019
.text:0040203F                 mov     [esp+0DCh+Str], eax ; Str
.text:00402042                 call    strlen
.text:00402047                 mov     [esp+0DCh+var_C0], eax
.text:0040204B                 mov     [esp+0DCh+Str], edi ; Str
.text:0040204E                 call    strlen
.text:00402053                 mov     ebx, eax
.text:00402055                 mov     eax, [esp+0DCh+var_BC]
.text:00402059                 test    eax, eax
.text:0040205B                 jnz     loc_4020ED
.text:00402061                 mov     eax, [esp+0DCh+var_C0]
.text:00402065                 lea     ecx, [ebx+eax+1]
.text:00402069                 cmp     ecx, 400h
.text:0040206F                 mov     [esp+0DCh+var_BC], ecx
.text:00402073                 jnb     short loc_40207D
.text:00402075                 mov     [esp+0DCh+var_BC], 400h
.text:0040207D
.text:0040207D loc_40207D:                             ; CODE XREF: sub_401DE0+293↑j
.text:0040207D                 mov     edx, [esp+0DCh+var_BC]
.text:00402081                 mov     [esp+0DCh+Str], edx ; size_t
.text:00402084                 call    sub_403C20
.text:00402089
.text:00402089 loc_402089:                             ; CODE XREF: sub_401DE0+32F↓j
.text:00402089                 mov     [esp+0DCh+Block], eax
.text:0040208D
.text:0040208D loc_40208D:                             ; CODE XREF: sub_401DE0+319↓j
.text:0040208D                 mov     [esp+0DCh+Val], edi ; Src
.text:00402091                 mov     ecx, [esp+0DCh+Block]
.text:00402095                 lea     edx, [ebx+1]
.text:00402098                 mov     [esp+0DCh+Size], edx ; Size
.text:0040209C                 mov     eax, [esp+0DCh+var_C0]
.text:004020A0                 add     ecx, eax
.text:004020A2                 mov     [esp+0DCh+Str], ecx ; void *
.text:004020A5                 call    memmove
.text:004020AA                 mov     [esp+0DCh+Val], esi ; Src
.text:004020AE                 mov     edi, [esp+0DCh+Block]
.text:004020B2                 mov     ebx, [esp+0DCh+var_C0]
.text:004020B6                 mov     [esp+0DCh+Str], edi ; void *
.text:004020B9                 mov     [esp+0DCh+Size], ebx ; Size
.text:004020BD                 call    memcpy
.text:004020C2                 cmp     byte ptr [esi], 2Fh ; '/'
.text:004020C5                 mov     edi, eax
.text:004020C7                 jz      short loc_4020E6
.text:004020C9                 mov     ebx, [esp+0DCh+var_B0]
.text:004020CD                 inc     ebx
.text:004020CE                 cmp     ebp, ebx
.text:004020D0                 jbe     short loc_4020D9
.text:004020D2
.text:004020D2 loc_4020D2:                             ; CODE XREF: sub_401DE0+2F7↓j
.text:004020D2                 dec     ebp
.text:004020D3                 cmp     byte ptr [ebp-1], 2Fh ; '/'
.text:004020D7                 jnz     short loc_4020D2
.text:004020D9
.text:004020D9 loc_4020D9:                             ; CODE XREF: sub_401DE0+2F0↑j
.text:004020D9                                         ; sub_401DE0+30B↓j
.text:004020D9                 mov     [esp+0DCh+Str], esi ; Block
.text:004020DC                 call    free
.text:004020E1                 jmp     loc_401FF2
.text:004020E6 ; ---------------------------------------------------------------------------
.text:004020E6
.text:004020E6 loc_4020E6:                             ; CODE XREF: sub_401DE0+2E7↑j
.text:004020E6                 mov     ebp, [esp+0DCh+var_B0]
.text:004020EA                 inc     ebp
.text:004020EB                 jmp     short loc_4020D9
.text:004020ED ; ---------------------------------------------------------------------------
.text:004020ED
.text:004020ED loc_4020ED:                             ; CODE XREF: sub_401DE0+27B↑j
.text:004020ED                 mov     ecx, [esp+0DCh+var_C0]
.text:004020F1                 lea     eax, [ebx+ecx+1]
.text:004020F5                 cmp     eax, [esp+0DCh+var_BC]
.text:004020F9                 jbe     short loc_40208D
.text:004020FB                 mov     [esp+0DCh+var_BC], eax
.text:004020FF                 mov     edx, [esp+0DCh+Block]
.text:00402103                 mov     [esp+0DCh+Val], eax ; size_t
.text:00402107                 mov     [esp+0DCh+Str], edx ; void *
.text:0040210A                 call    sub_403CB0
.text:0040210F                 jmp     loc_402089
.text:00402114 ; ---------------------------------------------------------------------------
.text:00402114
.text:00402114 loc_402114:                             ; CODE XREF: sub_401DE0+173↑j
.text:00402114                 mov     ecx, [esp+0DCh+arg_4]
.text:0040211B                 test    ecx, ecx
.text:0040211D                 jz      loc_401FD6
.text:00402123                 cmp     [esp+0DCh+arg_4], 1
.text:0040212B                 jz      short loc_40213A
.text:0040212D
.text:0040212D loc_40212D:                             ; CODE XREF: sub_401DE0+35D↓j
.text:0040212D                 mov     [esp+0DCh+var_AC], 0
.text:00402135                 jmp     loc_401F59
.text:0040213A ; ---------------------------------------------------------------------------
.text:0040213A
.text:0040213A loc_40213A:                             ; CODE XREF: sub_401DE0+34B↑j
.text:0040213A                 cmp     byte ptr [edi], 0
.text:0040213D                 jz      short loc_40212D
.text:0040213F                 jmp     loc_401FD6
.text:00402144 ; ---------------------------------------------------------------------------
.text:00402144
.text:00402144 loc_402144:                             ; CODE XREF: sub_401DE0+11B↑j
.text:00402144                 add     ebx, 400h
.text:0040214A                 jmp     loc_401F05
.text:0040214F ; ---------------------------------------------------------------------------
.text:0040214F
.text:0040214F loc_40214F:                             ; CODE XREF: sub_401DE0+E4↑j
.text:0040214F                 cmp     dl, 2Eh ; '.'
.text:00402152                 jnz     loc_401ECA
.text:00402158                 cmp     byte ptr [esi+1], 2Eh ; '.'
.text:0040215C                 jnz     loc_401ECA
.text:00402162                 mov     esi, [esp+0DCh+var_B0]
.text:00402166                 inc     esi
.text:00402167                 cmp     ebp, esi
.text:00402169                 jbe     loc_401FF2
.text:0040216F
.text:0040216F loc_40216F:                             ; CODE XREF: sub_401DE0+394↓j
.text:0040216F                 dec     ebp
.text:00402170                 cmp     byte ptr [ebp-1], 2Fh ; '/'
.text:00402174                 jnz     short loc_40216F
.text:00402176                 jmp     loc_401FF2
.text:00402176 ; ---------------------------------------------------------------------------
.text:0040217B                 align 10h
.text:00402180
.text:00402180 loc_402180:                             ; CODE XREF: sub_401DE0+DB↑j
.text:00402180                 cmp     dl, 2Eh ; '.'
.text:00402183                 jnz     loc_401EC1
.text:00402189                 jmp     loc_401FF2
.text:00402189 ; ---------------------------------------------------------------------------
.text:0040218E                 align 10h
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401DE0+A6↑j
.text:00402190                                         ; sub_401DE0+3B7↓j
.text:00402190                 inc     esi
.text:00402191                 movzx   edx, byte ptr [esi]
.text:00402194                 cmp     dl, 2Fh ; '/'
.text:00402197                 jz      short loc_402190
.text:00402199                 jmp     loc_401E8C
.text:0040219E ; ---------------------------------------------------------------------------
.text:0040219E
.text:0040219E loc_40219E:                             ; CODE XREF: sub_401DE0+7B↑j
.text:0040219E                 mov     [esp+0DCh+Val], 400h ; size_t
.text:004021A6                 mov     eax, [esp+0DCh+var_B0]
.text:004021AA                 mov     [esp+0DCh+Str], eax ; void *
.text:004021AD                 call    sub_403CB0
.text:004021B2                 mov     [esp+0DCh+var_B0], eax
.text:004021B6                 lea     ebp, [ebx+eax]
.text:004021B9                 add     eax, 400h
.text:004021BE                 mov     [esp+0DCh+var_B8], eax
.text:004021C2                 jmp     loc_401E61
.text:004021C7 ; ---------------------------------------------------------------------------
.text:004021C7
.text:004021C7 loc_4021C7:                             ; CODE XREF: sub_401DE0+36↑j
.text:004021C7                 mov     [esp+0DCh+Str], 400h ; size_t
.text:004021CE                 call    sub_403C20
.text:004021D3                 mov     [esp+0DCh+var_B0], eax
.text:004021D7                 mov     ebx, eax
.text:004021D9                 add     ebx, 400h
.text:004021DF                 mov     [esp+0DCh+var_B8], ebx
.text:004021E3                 mov     byte ptr [eax], 2Fh ; '/'
.text:004021E6                 mov     ebp, [esp+0DCh+var_B0]
.text:004021EA                 inc     ebp
.text:004021EB                 jmp     loc_401E61
.text:004021F0 ; ---------------------------------------------------------------------------
.text:004021F0
.text:004021F0 loc_4021F0:                             ; CODE XREF: sub_401DE0+2E↑j
.text:004021F0                 call    _errno
.text:004021F5                 mov     dword ptr [eax], 2
.text:004021FB                 jmp     loc_401FEE
.text:00402200 ; ---------------------------------------------------------------------------
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_401DE0+23↑j
.text:00402200                 call    _errno
.text:00402205                 mov     dword ptr [eax], 16h
.text:0040220B                 jmp     loc_401FEE
.text:0040220B sub_401DE0      endp
.text:0040220B
.text:00402210
.text:00402210 ; =============== S U B R O U T I N E =======================================
.text:00402210
.text:00402210
.text:00402210 sub_402210      proc near               ; CODE XREF: sub_401DE0+8B↑p
.text:00402210
.text:00402210 arg_0           = dword ptr  4
.text:00402210
.text:00402210                 mov     edx, [esp+arg_0]
.text:00402214                 mov     dword ptr [edx+10h], 0
.text:0040221B                 mov     dword ptr [edx+14h], 0
.text:00402222                 mov     dword ptr [edx+18h], 95F616h
.text:00402229                 retn
.text:00402229 sub_402210      endp
.text:00402229
.text:00402229 ; ---------------------------------------------------------------------------
.text:0040222A                 align 10h
.text:00402230 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/cycle-check.c',0
.text:00402230                                         ; DATA XREF: sub_402280+CE↓o
.text:0040225C aStateMagicCcMa db 'state->magic == CC_MAGIC',0
.text:0040225C                                         ; DATA XREF: sub_402280+D6↓o
.text:00402275                 align 10h
.text:00402280
.text:00402280 ; =============== S U B R O U T I N E =======================================
.text:00402280
.text:00402280
.text:00402280 sub_402280      proc near               ; CODE XREF: sub_401DE0+225↑p
.text:00402280
.text:00402280 var_1C          = dword ptr -1Ch
.text:00402280 var_18          = dword ptr -18h
.text:00402280 var_14          = dword ptr -14h
.text:00402280 arg_0           = dword ptr  4
.text:00402280 arg_4           = dword ptr  8
.text:00402280
.text:00402280                 push    ebp
.text:00402281                 push    edi
.text:00402282                 push    esi
.text:00402283                 push    ebx
.text:00402284                 sub     esp, 0Ch
.text:00402287                 mov     edx, [esp+1Ch+arg_0]
.text:0040228B                 cmp     dword ptr [edx+18h], 95F616h
.text:00402292                 jnz     loc_402346
.text:00402298                 mov     edx, [esp+1Ch+arg_0]
.text:0040229C                 mov     ebp, [edx+14h]
.text:0040229F                 mov     edi, [edx+10h]
.text:004022A2                 mov     eax, ebp
.text:004022A4                 or      eax, edi
.text:004022A6                 jz      short loc_4022F0
.text:004022A8                 mov     esi, [esp+1Ch+arg_4]
.text:004022AC                 mov     ecx, [esi+8]
.text:004022AF                 mov     ebx, [esi+0Ch]
.text:004022B2                 mov     esi, [esp+1Ch+arg_0]
.text:004022B6                 mov     eax, [esi]
.text:004022B8                 mov     edx, [esi+4]
.text:004022BB                 mov     esi, ebx
.text:004022BD                 xor     eax, ecx
.text:004022BF                 xor     esi, edx
.text:004022C1                 or      esi, eax
.text:004022C3                 jnz     short loc_4022F0
.text:004022C5                 mov     edx, [esp+1Ch+arg_4]
.text:004022C9                 mov     esi, [esp+1Ch+arg_0]
.text:004022CD                 mov     ebx, [edx+14h]
.text:004022D0                 mov     ecx, [edx+10h]
.text:004022D3                 mov     eax, [esi+8]
.text:004022D6                 mov     edx, [esi+0Ch]
.text:004022D9                 mov     esi, ebx
.text:004022DB                 xor     eax, ecx
.text:004022DD                 xor     esi, edx
.text:004022DF                 or      esi, eax
.text:004022E1                 mov     edx, 1
.text:004022E6                 jz      short loc_40233C
.text:004022E8                 nop
.text:004022E9                 lea     esi, [esi+0]
.text:004022F0
.text:004022F0 loc_4022F0:                             ; CODE XREF: sub_402280+26↑j
.text:004022F0                                         ; sub_402280+43↑j
.text:004022F0                 mov     ecx, edi
.text:004022F2                 mov     ebx, ebp
.text:004022F4                 mov     edx, [esp+1Ch+arg_0]
.text:004022F8                 add     ecx, 1
.text:004022FB                 mov     esi, ecx
.text:004022FD                 adc     ebx, 0
.text:00402300                 and     esi, edi
.text:00402302                 mov     edi, ebx
.text:00402304                 mov     [edx+10h], ecx
.text:00402307                 and     edi, ebp
.text:00402309                 or      esi, edi
.text:0040230B                 mov     [edx+14h], ebx
.text:0040230E                 jnz     short loc_40233A
.text:00402310                 mov     ebp, ebx
.text:00402312                 mov     edx, 1
.text:00402317                 or      ebp, ecx
.text:00402319                 jz      short loc_40233C
.text:0040231B                 mov     ebp, [esp+1Ch+arg_4]
.text:0040231F                 mov     ebx, [esp+1Ch+arg_0]
.text:00402323                 mov     edx, [ebp+10h]
.text:00402326                 mov     ecx, [ebp+14h]
.text:00402329                 mov     [ebx+8], edx
.text:0040232C                 mov     [ebx+0Ch], ecx
.text:0040232F                 mov     esi, [ebp+8]
.text:00402332                 mov     edi, [ebp+0Ch]
.text:00402335                 mov     [ebx], esi
.text:00402337                 mov     [ebx+4], edi
.text:0040233A
.text:0040233A loc_40233A:                             ; CODE XREF: sub_402280+8E↑j
.text:0040233A                 xor     edx, edx
.text:0040233C
.text:0040233C loc_40233C:                             ; CODE XREF: sub_402280+66↑j
.text:0040233C                                         ; sub_402280+99↑j
.text:0040233C                 add     esp, 0Ch
.text:0040233F                 mov     eax, edx
.text:00402341                 pop     ebx
.text:00402342                 pop     esi
.text:00402343                 pop     edi
.text:00402344                 pop     ebp
.text:00402345                 retn
.text:00402346 ; ---------------------------------------------------------------------------
.text:00402346
.text:00402346 loc_402346:                             ; CODE XREF: sub_402280+12↑j
.text:00402346                 mov     [esp+1Ch+var_14], 45h ; 'E'
.text:0040234E                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/cycle-che"...
.text:00402356                 mov     [esp+1Ch+var_1C], offset aStateMagicCcMa ; "state->magic == CC_MAGIC"
.text:0040235D                 call    _assert
.text:0040235D sub_402280      endp
.text:0040235D
.text:0040235D ; ---------------------------------------------------------------------------
.text:00402362                 align 10h
.text:00402370
.text:00402370 ; =============== S U B R O U T I N E =======================================
.text:00402370
.text:00402370
.text:00402370 sub_402370      proc near               ; DATA XREF: sub_4024F0+1B4↓o
.text:00402370                 sub     eax, 9090002Dh
.text:00402375                 nop
.text:00402376                 nop
.text:00402377                 nop
.text:00402378                 nop
.text:00402379                 nop
.text:0040237A                 nop
.text:0040237B                 nop
.text:0040237C                 nop
.text:0040237D                 nop
.text:0040237E                 nop
.text:0040237F                 nop
.text:00402380                 nop
.text:00402381                 nop
.text:00402382                 nop
.text:00402383                 nop
.text:00402384                 nop
.text:00402385                 nop
.text:00402386                 nop
.text:00402387                 nop
.text:00402388                 nop
.text:00402389                 nop
.text:0040238A                 nop
.text:0040238B                 nop
.text:0040238C                 nop
.text:0040238D                 nop
.text:0040238E                 nop
.text:0040238F                 nop
.text:0040238F sub_402370      endp
.text:0040238F
.text:00402390
.text:00402390 ; =============== S U B R O U T I N E =======================================
.text:00402390
.text:00402390
.text:00402390 sub_402390      proc near               ; DATA XREF: sub_4024F0+3CC↓o
.text:00402390                 and     eax, 6F203A73h
.text:00402395                 jo      short loc_40240B
.text:00402397                 imul    ebp, [edi+6Eh], 63256020h
.text:0040239E                 and     eax, 64202773h
.text:004023A3                 outsd
.text:004023A4                 db      65h
.text:004023A4                 jnb     short loc_402415
.text:004023A7                 daa
.text:004023A8                 jz      short loc_4023CA
.text:004023AA                 popa
.text:004023AB                 insb
.text:004023AC                 insb
.text:004023AD                 outsd
.text:004023AE                 ja      short sub_4023D0
.text:004023B0                 popa
.text:004023B1                 outsb
.text:004023B2                 and     [ecx+72h], ah
.text:004023B5                 db      67h
.text:004023B5                 jnz     near ptr loc_402424+1
.text:004023B8                 outs    dx, byte ptr gs:[esi]
.text:004023BA                 jz      short loc_4023C6
.text:004023BC                 add     [eax-6F6F6F70h], dl
.text:004023C2                 nop
.text:004023C3                 nop
.text:004023C4                 nop
.text:004023C5                 nop
.text:004023C6
.text:004023C6 loc_4023C6:                             ; CODE XREF: sub_402390+2A↑j
.text:004023C6                 nop
.text:004023C7                 nop
.text:004023C8                 nop
.text:004023C9                 nop
.text:004023CA
.text:004023CA loc_4023CA:                             ; CODE XREF: sub_402390+18↑j
.text:004023CA                 nop
.text:004023CB                 nop
.text:004023CC                 nop
.text:004023CD                 nop
.text:004023CE                 nop
.text:004023CF                 nop
.text:004023CF sub_402390      endp ; sp-analysis failed
.text:004023CF
.text:004023D0
.text:004023D0 ; =============== S U B R O U T I N E =======================================
.text:004023D0
.text:004023D0
.text:004023D0 sub_4023D0      proc near               ; CODE XREF: sub_402390+1E↑j
.text:004023D0                                         ; DATA XREF: sub_4024F0:loc_402922↓o
.text:004023D0                 and     eax, 6F203A73h
.text:004023D5                 jo      short loc_40244B
.text:004023D7                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:004023DE                 and     eax, 64202773h
.text:004023E3                 outsd
.text:004023E4                 db      65h
.text:004023E4                 jnb     short loc_402455
.text:004023E7                 daa
.text:004023E8                 jz      short loc_40240A
.text:004023EA                 popa
.text:004023EB                 insb
.text:004023EC                 insb
.text:004023ED                 outsd
.text:004023EE                 ja      short sub_402410
.text:004023F0                 popa
.text:004023F1                 outsb
.text:004023F2                 and     [ecx+72h], ah
.text:004023F5                 db      67h
.text:004023F5                 jnz     loc_402465
.text:004023F8                 outs    dx, byte ptr gs:[esi]
.text:004023FA                 jz      short loc_402406
.text:004023FC                 add     [eax-6F6F6F70h], dl
.text:00402402                 nop
.text:00402403                 nop
.text:00402404                 nop
.text:00402405                 nop
.text:00402406
.text:00402406 loc_402406:                             ; CODE XREF: sub_4023D0+2A↑j
.text:00402406                 nop
.text:00402407                 nop
.text:00402408                 nop
.text:00402409                 nop
.text:0040240A
.text:0040240A loc_40240A:                             ; CODE XREF: sub_4023D0+18↑j
.text:0040240A                 nop
.text:0040240B
.text:0040240B loc_40240B:                             ; CODE XREF: sub_402390+5↑j
.text:0040240B                 nop
.text:0040240C                 nop
.text:0040240D                 nop
.text:0040240E                 nop
.text:0040240F                 nop
.text:0040240F sub_4023D0      endp ; sp-analysis failed
.text:0040240F
.text:00402410
.text:00402410 ; =============== S U B R O U T I N E =======================================
.text:00402410
.text:00402410
.text:00402410 sub_402410      proc near               ; CODE XREF: sub_4023D0+1E↑j
.text:00402410                                         ; DATA XREF: sub_4024F0:loc_4029C0↓o ...
.text:00402410                 and     eax, 6F203A73h
.text:00402415
.text:00402415 loc_402415:                             ; CODE XREF: sub_402390+14↑j
.text:00402415                 jo      short loc_40248B
.text:00402417                 imul    ebp, [edi+6Eh], 73256020h
.text:0040241E                 daa
.text:0040241F                 and     [edx+65h], dh
.text:00402422                 jno     short near ptr loc_402498+1
.text:00402424
.text:00402424 loc_402424:                             ; CODE XREF: sub_402390+25↑j
.text:00402424                 imul    esi, [edx+65h], 6E612073h
.text:0040242B                 and     [ecx+72h], ah
.text:0040242E                 db      67h
.text:0040242E                 jnz     near ptr loc_40249C+2
.text:00402431                 outs    dx, byte ptr gs:[esi]
.text:00402433                 jz      short loc_40243F
.text:00402435                 add     [eax-6F6F6F70h], dl
.text:0040243B                 nop
.text:0040243C                 nop
.text:0040243D                 nop
.text:0040243E                 nop
.text:0040243F
.text:0040243F loc_40243F:                             ; CODE XREF: sub_402410+23↑j
.text:0040243F                 nop
.text:00402440                 nop
.text:00402441                 nop
.text:00402442                 nop
.text:00402443                 nop
.text:00402444                 nop
.text:00402445                 nop
.text:00402446                 nop
.text:00402447                 nop
.text:00402448                 nop
.text:00402449                 nop
.text:0040244A                 nop
.text:0040244B
.text:0040244B loc_40244B:                             ; CODE XREF: sub_4023D0+5↑j
.text:0040244B                 nop
.text:0040244C                 nop
.text:0040244D                 nop
.text:0040244E                 nop
.text:0040244F                 nop
.text:0040244F sub_402410      endp
.text:0040244F
.text:00402450
.text:00402450 ; =============== S U B R O U T I N E =======================================
.text:00402450
.text:00402450
.text:00402450 sub_402450      proc near               ; DATA XREF: sub_4024F0+55E↓o
.text:00402450                 and     eax, 75203A73h
.text:00402455
.text:00402455 loc_402455:                             ; CODE XREF: sub_4023D0+14↑j
.text:00402455                 outsb
.text:00402456                 jb      short near ptr loc_4024B7+6
.text:00402458                 arpl    [edi+67h], bp
.text:0040245B                 outsb
.text:0040245C                 imul    edi, [edx+65h], 706F2064h
.text:00402463                 jz      short loc_4024CE
.text:00402465
.text:00402465 loc_402465:                             ; CODE XREF: sub_4023D0+25↑j
.text:00402465                 outsd
.text:00402466                 outsb
.text:00402467                 and     [eax+25h], ah
.text:0040246A                 arpl    ds:0A2773h, sp
.text:00402470
.text:00402470 loc_402470:                             ; DATA XREF: sub_4024F0:loc_402A91↓o
.text:00402470                 add     [eax-6F6F6F70h], dl
.text:00402476                 nop
.text:00402477                 nop
.text:00402478                 nop
.text:00402479                 nop
.text:0040247A                 nop
.text:0040247B                 nop
.text:0040247C                 nop
.text:0040247D                 nop
.text:0040247E                 nop
.text:0040247F                 nop
.text:00402480                 nop
.text:00402481                 nop
.text:00402482                 nop
.text:00402483                 nop
.text:00402484                 nop
.text:00402485                 nop
.text:00402486                 nop
.text:00402487                 nop
.text:00402488                 nop
.text:00402489                 nop
.text:0040248A                 nop
.text:0040248B
.text:0040248B loc_40248B:                             ; CODE XREF: sub_402410:loc_402415↑j
.text:0040248B                 nop
.text:0040248C                 nop
.text:0040248D                 nop
.text:0040248E                 nop
.text:0040248F                 nop
.text:0040248F sub_402450      endp
.text:0040248F
.text:00402490
.text:00402490 ; =============== S U B R O U T I N E =======================================
.text:00402490
.text:00402490
.text:00402490 sub_402490      proc near               ; DATA XREF: sub_4024F0:loc_402AAA↓o
.text:00402490                 and     eax, 75203A73h
.text:00402495                 outsb
.text:00402496                 jb      short near ptr loc_4024F7+6
.text:00402498
.text:00402498 loc_402498:                             ; CODE XREF: sub_402410+12↑j
.text:00402498                 arpl    [edi+67h], bp
.text:0040249B                 outsb
.text:0040249C
.text:0040249C loc_40249C:                             ; CODE XREF: sub_402410+1E↑j
.text:0040249C                 imul    edi, [edx+65h], 706F2064h
.text:004024A3                 jz      short loc_40250E
.text:004024A5                 outsd
.text:004024A6                 outsb
.text:004024A7                 and     [eax+2Dh], ah
.text:004024AA                 sub     eax, 0A277325h
.text:004024AF                 add     ds:6F203A73h, ah
.text:004024B5                 jo      short loc_40252B
.text:004024B7
.text:004024B7 loc_4024B7:                             ; CODE XREF: sub_402450+6↑j
.text:004024B7                 imul    ebp, [edi+6Eh], 71657220h
.text:004024BE                 jnz     short loc_402529
.text:004024C0                 jb      short loc_402527
.text:004024C2                 jnb     short loc_4024E4
.text:004024C4                 popa
.text:004024C5                 outsb
.text:004024C6                 and     [ecx+72h], ah
.text:004024C9                 db      67h
.text:004024C9                 jnz     near ptr loc_402537+2
.text:004024CC                 outs    dx, byte ptr gs:[esi]
.text:004024CE
.text:004024CE loc_4024CE:                             ; CODE XREF: sub_402450+13↑j
.text:004024CE                 jz      short sub_4024F0
.text:004024D0                 sub     eax, 6325202Dh
.text:004024D5                 or      al, [eax]
.text:004024D7                 nop
.text:004024D8                 nop
.text:004024D9                 nop
.text:004024DA                 nop
.text:004024DB                 nop
.text:004024DC                 nop
.text:004024DD                 nop
.text:004024DE                 nop
.text:004024DF                 nop
.text:004024E0                 nop
.text:004024E1                 nop
.text:004024E2                 nop
.text:004024E3                 nop
.text:004024E4
.text:004024E4 loc_4024E4:                             ; CODE XREF: sub_402490+32↑j
.text:004024E4                 nop
.text:004024E5                 nop
.text:004024E6                 nop
.text:004024E7                 nop
.text:004024E8                 nop
.text:004024E9                 nop
.text:004024EA                 nop
.text:004024EB                 nop
.text:004024EC                 nop
.text:004024ED                 nop
.text:004024EE                 nop
.text:004024EF                 nop
.text:004024EF sub_402490      endp ; sp-analysis failed
.text:004024EF
.text:004024F0
.text:004024F0 ; =============== S U B R O U T I N E =======================================
.text:004024F0
.text:004024F0
.text:004024F0 ; int __cdecl sub_4024F0(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:004024F0 sub_4024F0      proc near               ; CODE XREF: sub_402490:loc_4024CE↑j
.text:004024F0                                         ; DATA XREF: sub_4024F0:loc_402D03↓o
.text:004024F0
.text:004024F0 Str2            = dword ptr  4
.text:004024F0 MaxCount        = dword ptr  8
.text:004024F0 arg_8           = dword ptr  0Ch
.text:004024F0 arg_C           = dword ptr  10h
.text:004024F0 arg_1C          = dword ptr  20h
.text:004024F0 arg_20          = dword ptr  24h
.text:004024F0 arg_24          = dword ptr  28h
.text:004024F0 arg_28          = dword ptr  2Ch
.text:004024F0 arg_2C          = dword ptr  30h
.text:004024F0 arg_30          = dword ptr  34h
.text:004024F0 arg_34          = dword ptr  38h
.text:004024F0 arg_38          = dword ptr  3Ch
.text:004024F0 arg_3C          = dword ptr  40h
.text:004024F0 arg_40          = dword ptr  44h
.text:004024F0 arg_44          = dword ptr  48h
.text:004024F0 arg_5C          = dword ptr  60h
.text:004024F0 arg_60          = dword ptr  64h
.text:004024F0 Str             = dword ptr  68h
.text:004024F0 arg_68          = dword ptr  6Ch
.text:004024F0 arg_6C          = dword ptr  70h
.text:004024F0 arg_70          = dword ptr  74h
.text:004024F0 arg_74          = dword ptr  78h
.text:004024F0
.text:004024F0 ; FUNCTION CHUNK AT .text:0040256B SIZE 00000053 BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:004025D4 SIZE 0000014B BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00402720 SIZE 0000023A BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00402960 SIZE 00000099 BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00402A00 SIZE 000000DF BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00402AE0 SIZE 0000025B BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00402D40 SIZE 000001AE BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00402EF0 SIZE 000000F9 BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00402FF0 SIZE 000000CE BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:004030C0 SIZE 0000003A BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00403100 SIZE 0000000B BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00403110 SIZE 00000019 BYTES
.text:004024F0 ; FUNCTION CHUNK AT .text:00403130 SIZE 00000011 BYTES
.text:004024F0
.text:004024F0                 and     eax, 6F203A73h
.text:004024F5                 jo      short loc_40256B
.text:004024F7
.text:004024F7 loc_4024F7:                             ; CODE XREF: sub_402490+6↑j
.text:004024F7                 imul    ebp, [edi+6Eh], 572D6020h
.text:004024FE                 and     ds:64202773h, ah
.text:00402504                 outsd
.text:00402505                 db      65h
.text:00402505                 jnb     short near ptr loc_402574+2
.text:00402508                 daa
.text:00402509                 jz      short loc_40252B
.text:0040250B                 popa
.text:0040250C                 insb
.text:0040250D                 insb
.text:0040250E
.text:0040250E loc_40250E:                             ; CODE XREF: sub_402490+13↑j
.text:0040250E                 outsd
.text:0040250F                 ja      short near ptr sub_402530+1
.text:00402511                 popa
.text:00402512                 outsb
.text:00402513                 and     [ecx+72h], ah
.text:00402516                 db      67h
.text:00402516                 jnz     near ptr loc_402585+1
.text:00402519                 outs    dx, byte ptr gs:[esi]
.text:0040251B                 jz      short loc_402527
.text:0040251D                 add     [eax-6F6F6F70h], dl
.text:00402523                 nop
.text:00402524                 nop
.text:00402525                 nop
.text:00402526                 nop
.text:00402527
.text:00402527 loc_402527:                             ; CODE XREF: sub_402490+30↑j
.text:00402527                                         ; sub_4024F0+2B↑j
.text:00402527                 nop
.text:00402528                 nop
.text:00402529
.text:00402529 loc_402529:                             ; CODE XREF: sub_402490+2E↑j
.text:00402529                 nop
.text:0040252A                 nop
.text:0040252B
.text:0040252B loc_40252B:                             ; CODE XREF: sub_402490+25↑j
.text:0040252B                                         ; sub_4024F0+19↑j
.text:0040252B                 nop
.text:0040252C                 nop
.text:0040252D                 nop
.text:0040252E                 nop
.text:0040252F                 nop
.text:0040252F sub_4024F0      endp ; sp-analysis failed
.text:0040252F
.text:00402530
.text:00402530 ; =============== S U B R O U T I N E =======================================
.text:00402530
.text:00402530
.text:00402530 sub_402530      proc near               ; CODE XREF: sub_4024F0+1F↑j
.text:00402530                                         ; DATA XREF: sub_4024F0:loc_402DEF↓o
.text:00402530
.text:00402530 arg_A4          = dword ptr  0A8h
.text:00402530 arg_B8          = dword ptr  0BCh
.text:00402530
.text:00402530 ; FUNCTION CHUNK AT .text:004025CA SIZE 0000000A BYTES
.text:00402530
.text:00402530                 and     eax, 6F203A73h
.text:00402535                 jo      short loc_4025AB
.text:00402537
.text:00402537 loc_402537:                             ; CODE XREF: sub_402490+39↑j
.text:00402537                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040253E                 and     ds:69202773h, ah
.text:00402544                 jnb     short near ptr loc_402563+3
.text:00402546                 popa
.text:00402547                 insd
.text:00402548                 bound   ebp, [ecx+67h]
.text:0040254B                 jnz     short near ptr loc_4025B8+4
.text:0040254D                 jnz     short near ptr loc_4025C1+1
.text:0040254F                 or      al, [eax]
.text:00402551
.text:00402551 loc_402551:                             ; DATA XREF: sub_4024F0+A0F↓o
.text:00402551                 and     eax, 69203A73h
.text:00402556                 insb
.text:00402557                 insb
.text:00402558                 db      65h, 67h
.text:00402558                 popa
.text:0040255B                 insb
.text:0040255C                 and     [edi+70h], ch
.text:0040255F                 jz      short loc_4025CA
.text:00402561                 outsd
.text:00402562                 outsb
.text:00402563
.text:00402563 loc_402563:                             ; CODE XREF: sub_402530+14↑j
.text:00402563                 and     ds:6325202Dh, ch
.text:00402569                 or      al, [eax]
.text:00402569 sub_402530      endp ; sp-analysis failed
.text:00402569
.text:0040256B ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:0040256B
.text:0040256B loc_40256B:                             ; CODE XREF: sub_4024F0+5↑j
.text:0040256B                                         ; DATA XREF: sub_4024F0:loc_402F37↓o
.text:0040256B                 and     eax, 69203A73h
.text:00402570                 outsb
.text:00402571                 jbe     short loc_4025D4
.text:00402573                 insb
.text:00402574
.text:00402574 loc_402574:                             ; CODE XREF: sub_4024F0+15↑j
.text:00402574                 imul    esp, [eax+6Fh], 6F697470h
.text:0040257C                 outsb
.text:0040257D                 and     ds:6325202Dh, ch
.text:00402583                 or      al, [eax]
.text:00402585
.text:00402585 loc_402585:                             ; CODE XREF: sub_4024F0+26↑j
.text:00402585                                         ; DATA XREF: sub_4024F0:loc_402F5E↓o
.text:00402585                 and     eax, 6F203A73h
.text:0040258A                 jo      short near ptr loc_4025FF+1
.text:0040258C                 imul    ebp, [edi+6Eh], 73256020h
.text:00402593                 daa
.text:00402594                 and     [ecx+73h], ch
.text:00402597                 and     [ecx+6Dh], ah
.text:0040259A                 bound   ebp, [ecx+67h]
.text:0040259D                 jnz     short near ptr loc_40260C+2
.text:0040259F                 jnz     short near ptr loc_402613+1
.text:004025A1                 or      al, [eax]
.text:004025A3
.text:004025A3 loc_4025A3:                             ; DATA XREF: sub_4024F0:loc_403110↓o
.text:004025A3                 push    eax
.text:004025A4                 dec     edi
.text:004025A5                 push    ebx
.text:004025A6                 dec     ecx
.text:004025A7                 pop     eax
.text:004025A8                 dec     esp
.text:004025A9                 pop     ecx
.text:004025AA                 pop     edi
.text:004025AB
.text:004025AB loc_4025AB:                             ; CODE XREF: sub_402530+5↑j
.text:004025AB                 inc     ebx
.text:004025AC                 dec     edi
.text:004025AD                 push    edx
.text:004025AE                 push    edx
.text:004025AF                 inc     ebp
.text:004025B0                 inc     ebx
.text:004025B1                 push    esp
.text:004025B2                 add     [ebp+0B6h], cl
.text:004025B8
.text:004025B8 loc_4025B8:                             ; CODE XREF: sub_402530+1B↑j
.text:004025B8                 add     [ebp+27BCh], cl
.text:004025B8 ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:004025B8 ; ---------------------------------------------------------------------------
.text:004025BE                 dw 0
.text:004025C0 ; ---------------------------------------------------------------------------
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_403150+5A↓p
.text:004025C0                                         ; .text:0040323A↓p ...
.text:004025C0                 push    ebp
.text:004025C1
.text:004025C1 loc_4025C1:                             ; CODE XREF: sub_402530+1D↑j
.text:004025C1                 mov     eax, 0FFFFFFFFh
.text:004025C6                 push    edi
.text:004025C7                 push    esi
.text:004025C8                 push    ebx
.text:004025C8 ; ---------------------------------------------------------------------------
.text:004025C9                 db 83h
.text:004025CA ; ---------------------------------------------------------------------------
.text:004025CA ; START OF FUNCTION CHUNK FOR sub_402530
.text:004025CA
.text:004025CA loc_4025CA:                             ; CODE XREF: sub_402530+2F↑j
.text:004025CA                 in      al, dx
.text:004025CB                 dec     esp
.text:004025CC                 mov     esi, [esp-40h+arg_A4]
.text:004025D0                 mov     ebp, [esp-40h+arg_B8]
.text:004025D0 ; END OF FUNCTION CHUNK FOR sub_402530
.text:004025D4 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:004025D4
.text:004025D4 loc_4025D4:                             ; CODE XREF: sub_4024F0+81↑j
.text:004025D4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004025D7                 mov     ebx, [ebp+4]
.text:004025DA                 setz    dl
.text:004025DD                 movzx   ecx, dl
.text:004025E0                 dec     ecx
.text:004025E1                 and     ecx, ebx
.text:004025E3                 mov     [esp+arg_44], ecx
.text:004025E7                 mov     ecx, [esp+arg_5C]
.text:004025EB                 test    ecx, ecx
.text:004025ED                 jle     loc_402717
.text:004025F3                 mov     dword ptr [ebp+0Ch], 0
.text:004025FA                 mov     ebx, [ebp+0]
.text:004025FD                 test    ebx, ebx
.text:004025FF
.text:004025FF loc_4025FF:                             ; CODE XREF: sub_4024F0+9A↑j
.text:004025FF                 jz      loc_403130
.text:00402605                 mov     edi, [ebp+10h]
.text:00402608                 test    edi, edi
.text:0040260A                 jnz     short loc_402663
.text:0040260C
.text:0040260C loc_40260C:                             ; CODE XREF: sub_4024F0+AD↑j
.text:0040260C                 lea     esi, [esi+0]
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_4024F0+C4C↓j
.text:00402610                 mov     [ebp+24h], ebx
.text:00402613
.text:00402613 loc_402613:                             ; CODE XREF: sub_4024F0+AF↑j
.text:00402613                 mov     esi, [esp+Str]
.text:00402617                 mov     [ebp+20h], ebx
.text:0040261A                 mov     ecx, [esp+arg_74]
.text:0040261E                 xor     ebx, ebx
.text:00402620                 mov     dword ptr [ebp+14h], 0
.text:00402627                 test    ecx, ecx
.text:00402629                 jz      loc_403110
.text:0040262F
.text:0040262F loc_40262F:                             ; CODE XREF: sub_4024F0+C34↓j
.text:0040262F                 mov     ebx, 1
.text:00402634
.text:00402634 loc_402634:                             ; CODE XREF: sub_4024F0+C2E↓j
.text:00402634                 mov     [ebp+1Ch], ebx
.text:00402637                 mov     ecx, [esp+Str]
.text:0040263B                 movzx   eax, byte ptr [ecx]
.text:0040263E                 cmp     al, 2Dh ; '-'
.text:00402640                 jz      loc_403100
.text:00402646                 cmp     al, 2Bh ; '+'
.text:00402648                 jz      loc_4030E9
.text:0040264E                 xor     edx, edx
.text:00402650                 test    ebx, ebx
.text:00402652                 setz    dl
.text:00402655                 mov     [ebp+18h], edx
.text:00402658
.text:00402658 loc_402658:                             ; CODE XREF: sub_4024F0+C05↓j
.text:00402658                 mov     [esp+Str], esi
.text:0040265C                 mov     dword ptr [ebp+10h], 1
.text:00402663
.text:00402663 loc_402663:                             ; CODE XREF: sub_4024F0+11A↑j
.text:00402663                 mov     eax, [ebp+14h]
.text:00402666                 test    eax, eax
.text:00402668                 jz      short loc_402673
.text:0040266A                 cmp     byte ptr [eax], 0
.text:0040266D                 jnz     loc_402750
.text:00402673
.text:00402673 loc_402673:                             ; CODE XREF: sub_4024F0+178↑j
.text:00402673                 mov     ebx, [ebp+0]
.text:00402676                 cmp     [ebp+24h], ebx
.text:00402679                 jle     short loc_40267E
.text:0040267B                 mov     [ebp+24h], ebx
.text:0040267E
.text:0040267E loc_40267E:                             ; CODE XREF: sub_4024F0+189↑j
.text:0040267E                 cmp     [ebp+20h], ebx
.text:00402681                 jle     short loc_402686
.text:00402683                 mov     [ebp+20h], ebx
.text:00402686
.text:00402686 loc_402686:                             ; CODE XREF: sub_4024F0+191↑j
.text:00402686                 cmp     dword ptr [ebp+18h], 1
.text:0040268A                 jz      loc_403060
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_4024F0+BE3↓j
.text:00402690                 cmp     ebx, [esp+arg_5C]
.text:00402694                 jz      loc_403044
.text:0040269A                 cld
.text:0040269B                 mov     ecx, [esp+arg_60]
.text:0040269F                 mov     edx, 3
.text:004026A4                 mov     edi, offset sub_402370
.text:004026A9                 mov     esi, [ecx+ebx*4]
.text:004026AC                 mov     ecx, edx
.text:004026AE                 repe cmpsb
.text:004026B0                 jnz     short loc_4026EC
.text:004026B2                 mov     edx, [ebp+24h]
.text:004026B5                 lea     eax, [ebx+1]
.text:004026B8                 cmp     [ebp+20h], edx
.text:004026BB                 mov     [ebp+0], eax
.text:004026BE                 jz      loc_403058
.text:004026C4                 cmp     edx, eax
.text:004026C6                 jz      short loc_4026E0
.text:004026C8                 mov     [esp+Str2], ebp
.text:004026CC                 mov     ebx, [esp+arg_60]
.text:004026D0                 mov     [esp+0], ebx
.text:004026D3                 call    sub_403270
.text:004026D8                 nop
.text:004026D9                 lea     esi, [esi+0]
.text:004026E0
.text:004026E0 loc_4026E0:                             ; CODE XREF: sub_4024F0+1D6↑j
.text:004026E0                                         ; sub_4024F0+B6B↓j
.text:004026E0                 mov     eax, [esp+arg_5C]
.text:004026E4                 mov     ebx, eax
.text:004026E6                 mov     [ebp+24h], eax
.text:004026E9                 mov     [ebp+0], eax
.text:004026EC
.text:004026EC loc_4026EC:                             ; CODE XREF: sub_4024F0+1C0↑j
.text:004026EC                 cmp     ebx, [esp+arg_5C]
.text:004026F0                 jz      loc_403044
.text:004026F6                 mov     esi, [esp+arg_60]
.text:004026FA                 mov     eax, [esi+ebx*4]
.text:004026FD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402700                 jz      short loc_402727
.text:00402702
.text:00402702 loc_402702:                             ; CODE XREF: sub_4024F0+23D↓j
.text:00402702                 mov     edx, [ebp+18h]
.text:00402705                 test    edx, edx
.text:00402707                 jz      short loc_402720
.text:00402709                 mov     [ebp+0Ch], eax
.text:0040270C                 lea     edi, [ebx+1]
.text:0040270F                 mov     eax, 1
.text:00402714                 mov     [ebp+0], edi
.text:00402717
.text:00402717 loc_402717:                             ; CODE XREF: sub_4024F0+FD↑j
.text:00402717                                         ; sub_4024F0+235↓j ...
.text:00402717                 add     esp, 4Ch
.text:0040271A                 pop     ebx
.text:0040271B                 pop     esi
.text:0040271C                 pop     edi
.text:0040271D                 pop     ebp
.text:0040271E                 retn
.text:0040271E ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:0040271E ; ---------------------------------------------------------------------------
.text:0040271F                 align 10h
.text:00402720 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_4024F0+217↑j
.text:00402720                                         ; sub_4024F0+B5A↓j ...
.text:00402720                 mov     eax, 0FFFFFFFFh
.text:00402725                 jmp     short loc_402717
.text:00402727 ; ---------------------------------------------------------------------------
.text:00402727
.text:00402727 loc_402727:                             ; CODE XREF: sub_4024F0+210↑j
.text:00402727                 movzx   edx, byte ptr [eax+1]
.text:0040272B                 test    dl, dl
.text:0040272D                 jz      short loc_402702
.text:0040272F                 mov     ebx, [esp+arg_68]
.text:00402733                 xor     ecx, ecx
.text:00402735                 test    ebx, ebx
.text:00402737                 jz      short loc_402742
.text:00402739                 cmp     dl, 2Dh ; '-'
.text:0040273C                 jz      loc_40303A
.text:00402742
.text:00402742 loc_402742:                             ; CODE XREF: sub_4024F0+247↑j
.text:00402742                                         ; sub_4024F0+B4F↓j
.text:00402742                 lea     esi, [ecx+eax+1]
.text:00402746                 mov     [ebp+14h], esi
.text:00402749                 lea     esi, [esi+0]
.text:00402750
.text:00402750 loc_402750:                             ; CODE XREF: sub_4024F0+17D↑j
.text:00402750                 mov     ecx, [esp+arg_68]
.text:00402754                 test    ecx, ecx
.text:00402756                 jz      loc_402AE0
.text:0040275C                 mov     edx, [ebp+0]
.text:0040275F                 mov     edi, [esp+arg_60]
.text:00402763                 mov     eax, [edi+edx*4]
.text:00402766                 movzx   edx, byte ptr [eax+1]
.text:0040276A                 cmp     dl, 2Dh ; '-'
.text:0040276D                 jz      short loc_402785
.text:0040276F                 mov     ebx, [esp+arg_70]
.text:00402773                 test    ebx, ebx
.text:00402775                 jz      loc_402AE0
.text:0040277B                 cmp     byte ptr [eax+2], 0
.text:0040277F                 jz      loc_40301A
.text:00402785
.text:00402785 loc_402785:                             ; CODE XREF: sub_4024F0+27D↑j
.text:00402785                                         ; sub_4024F0+B45↓j
.text:00402785                 mov     [esp+arg_40], 0
.text:0040278D                 mov     ecx, [ebp+14h]
.text:00402790                 mov     [esp+arg_3C], 0
.text:00402798                 mov     [esp+arg_38], 0
.text:004027A0                 mov     edi, ecx
.text:004027A2                 mov     [esp+arg_34], 0FFFFFFFFh
.text:004027AA                 movzx   eax, byte ptr [ecx]
.text:004027AD                 test    al, al
.text:004027AF                 jz      short loc_4027CC
.text:004027B1                 cmp     al, 3Dh ; '='
.text:004027B3                 jz      short loc_4027CC
.text:004027B5                 lea     esi, [esi+0]
.text:004027B9                 lea     edi, [edi+0]
.text:004027C0
.text:004027C0 loc_4027C0:                             ; CODE XREF: sub_4024F0+2DA↓j
.text:004027C0                 inc     edi
.text:004027C1                 movzx   eax, byte ptr [edi]
.text:004027C4                 test    al, al
.text:004027C6                 jz      short loc_4027CC
.text:004027C8                 cmp     al, 3Dh ; '='
.text:004027CA                 jnz     short loc_4027C0
.text:004027CC
.text:004027CC loc_4027CC:                             ; CODE XREF: sub_4024F0+2BF↑j
.text:004027CC                                         ; sub_4024F0+2C3↑j ...
.text:004027CC                 mov     [esp+arg_30], 0
.text:004027D4                 mov     esi, [esp+arg_68]
.text:004027D8                 mov     ebx, [esi]
.text:004027DA                 test    ebx, ebx
.text:004027DC                 mov     edx, ebx
.text:004027DE                 jz      loc_402A00
.text:004027E4                 lea     esi, [esi+0]
.text:004027EA                 lea     edi, [edi+0]
.text:004027F0
.text:004027F0 loc_4027F0:                             ; CODE XREF: sub_4024F0+32E↓j
.text:004027F0                 mov     [esp+Str2], ecx ; Str2
.text:004027F4                 mov     ebx, edi
.text:004027F6                 sub     ebx, ecx
.text:004027F8                 mov     [esp+MaxCount], ebx ; MaxCount
.text:004027FC                 mov     [esp+0], edx    ; Str1
.text:004027FF                 call    strncmp
.text:00402804                 test    eax, eax
.text:00402806                 jz      loc_402F96
.text:0040280C
.text:0040280C loc_40280C:                             ; CODE XREF: sub_4024F0+ADF↓j
.text:0040280C                                         ; sub_4024F0+AF4↓j ...
.text:0040280C                 inc     [esp+arg_30]
.text:00402810                 add     esi, 10h
.text:00402813                 mov     ecx, [esi]
.text:00402815                 test    ecx, ecx
.text:00402817                 mov     edx, ecx
.text:00402819                 jz      short loc_402820
.text:0040281B                 mov     ecx, [ebp+14h]
.text:0040281E                 jmp     short loc_4027F0
.text:00402820 ; ---------------------------------------------------------------------------
.text:00402820
.text:00402820 loc_402820:                             ; CODE XREF: sub_4024F0+329↑j
.text:00402820                                         ; sub_4024F0+B25↓j
.text:00402820                 mov     esi, [esp+arg_38]
.text:00402824                 test    esi, esi
.text:00402826                 jz      short loc_402834
.text:00402828                 mov     edx, [esp+arg_3C]
.text:0040282C                 test    edx, edx
.text:0040282E                 jz      loc_402F40
.text:00402834
.text:00402834 loc_402834:                             ; CODE XREF: sub_4024F0+336↑j
.text:00402834                 mov     eax, [esp+arg_40]
.text:00402838                 test    eax, eax
.text:0040283A                 jz      loc_402A00
.text:00402840                 mov     ecx, [ebp+0]
.text:00402843                 lea     eax, [ecx+1]
.text:00402846                 mov     [ebp+0], eax
.text:00402849                 cmp     byte ptr [edi], 0
.text:0040284C                 jz      loc_402960
.text:00402852                 mov     ecx, [esp+arg_40]
.text:00402856                 mov     esi, [ecx+4]
.text:00402859                 test    esi, esi
.text:0040285B                 jz      short loc_4028A6
.text:0040285D                 lea     ebx, [edi+1]
.text:00402860                 mov     [ebp+0Ch], ebx
.text:00402863
.text:00402863 loc_402863:                             ; CODE XREF: sub_4024F0+478↓j
.text:00402863                                         ; sub_4024F0+494↓j
.text:00402863                 mov     ebx, [ebp+14h]
.text:00402866                 mov     [esp+0], ebx    ; Str
.text:00402869                 call    strlen
.text:0040286E                 add     [ebp+14h], eax
.text:00402871                 mov     esi, [esp+arg_6C]
.text:00402875                 test    esi, esi
.text:00402877                 jz      short loc_402883
.text:00402879                 mov     ebp, [esp+arg_34]
.text:0040287D                 mov     ecx, [esp+arg_6C]
.text:00402881                 mov     [ecx], ebp
.text:00402883
.text:00402883 loc_402883:                             ; CODE XREF: sub_4024F0+387↑j
.text:00402883                 mov     eax, [esp+arg_40]
.text:00402887                 mov     ecx, [eax+8]
.text:0040288A                 test    ecx, ecx
.text:0040288C                 jnz     short loc_40289A
.text:0040288E                 mov     ecx, [esp+arg_40]
.text:00402892
.text:00402892 loc_402892:                             ; CODE XREF: sub_4024F0+7F3↓j
.text:00402892                 mov     eax, [ecx+0Ch]
.text:00402895                 jmp     loc_402717
.text:0040289A ; ---------------------------------------------------------------------------
.text:0040289A
.text:0040289A loc_40289A:                             ; CODE XREF: sub_4024F0+39C↑j
.text:0040289A                                         ; sub_4024F0+7E9↓j
.text:0040289A                 mov     esi, [eax+0Ch]
.text:0040289D                 xor     eax, eax
.text:0040289F                 mov     [ecx], esi
.text:004028A1                 jmp     loc_402717
.text:004028A6 ; ---------------------------------------------------------------------------
.text:004028A6
.text:004028A6 loc_4028A6:                             ; CODE XREF: sub_4024F0+36B↑j
.text:004028A6                 mov     edi, [esp+arg_44]
.text:004028AA                 test    edi, edi
.text:004028AC                 jz      short loc_402900
.text:004028AE                 mov     esi, [esp+arg_60]
.text:004028B2                 mov     edx, [esi+eax*4-4]
.text:004028B6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004028BA                 jz      short loc_402922
.text:004028BC                 mov     dword ptr [esp+0], offset sub_402390
.text:004028C3                 call    ds:libintl_gettext
.text:004028C9                 mov     edx, [esp+arg_40]
.text:004028CD                 mov     edi, [edx]
.text:004028CF                 mov     [esp+arg_C], edi
.text:004028D3                 mov     ebx, [ebp+0]
.text:004028D6                 mov     edi, [esp+arg_60]
.text:004028DA                 mov     ecx, [edi+ebx*4-4]
.text:004028DE                 movsx   esi, byte ptr [ecx]
.text:004028E1                 mov     ecx, ds:_iob
.text:004028E7                 add     ecx, 40h ; '@'
.text:004028EA                 mov     [esp+arg_8], esi
.text:004028EE                 mov     ebx, [edi]
.text:004028F0                 mov     [esp+Str2], eax ; Format
.text:004028F4                 mov     [esp+0], ecx    ; Stream
.text:004028F7                 mov     [esp+MaxCount], ebx
.text:004028FB                 call    fprintf
.text:00402900
.text:00402900 loc_402900:                             ; CODE XREF: sub_4024F0+3BC↑j
.text:00402900                                         ; sub_4024F0+468↓j
.text:00402900                 mov     ecx, [ebp+14h]
.text:00402903                 mov     [esp+0], ecx    ; Str
.text:00402906                 call    strlen
.text:0040290B                 add     [ebp+14h], eax
.text:0040290E                 mov     eax, [esp+arg_40]
.text:00402912                 mov     esi, [eax+0Ch]
.text:00402915                 mov     [ebp+8], esi
.text:00402918
.text:00402918 loc_402918:                             ; CODE XREF: sub_4024F0+5B5↓j
.text:00402918                                         ; sub_4024F0+80E↓j ...
.text:00402918                 mov     eax, 3Fh ; '?'
.text:0040291D                 jmp     loc_402717
.text:00402922 ; ---------------------------------------------------------------------------
.text:00402922
.text:00402922 loc_402922:                             ; CODE XREF: sub_4024F0+3CA↑j
.text:00402922                 mov     dword ptr [esp+0], offset sub_4023D0
.text:00402929                 call    ds:libintl_gettext
.text:0040292F                 mov     edx, [esp+arg_40]
.text:00402933                 mov     edi, [esp+arg_60]
.text:00402937                 mov     ecx, ds:_iob
.text:0040293D                 mov     esi, [edx]
.text:0040293F                 add     ecx, 40h ; '@'
.text:00402942                 mov     [esp+arg_8], esi
.text:00402946                 mov     ebx, [edi]
.text:00402948                 mov     [esp+Str2], eax ; Format
.text:0040294C                 mov     [esp+0], ecx    ; Stream
.text:0040294F                 mov     [esp+MaxCount], ebx
.text:00402953                 call    fprintf
.text:00402958                 jmp     short loc_402900
.text:00402958 ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:00402958 ; ---------------------------------------------------------------------------
.text:0040295A                 align 10h
.text:00402960 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00402960
.text:00402960 loc_402960:                             ; CODE XREF: sub_4024F0+35C↑j
.text:00402960                 mov     ebx, [esp+arg_40]
.text:00402964                 cmp     dword ptr [ebx+4], 1
.text:00402968                 jnz     loc_402863
.text:0040296E                 cmp     eax, [esp+arg_5C]
.text:00402972                 jge     short loc_402989
.text:00402974                 mov     ebx, [esp+arg_60]
.text:00402978                 lea     edi, [ecx+2]
.text:0040297B                 mov     [ebp+0], edi
.text:0040297E                 mov     esi, [ebx+eax*4]
.text:00402981                 mov     [ebp+0Ch], esi
.text:00402984                 jmp     loc_402863
.text:00402989 ; ---------------------------------------------------------------------------
.text:00402989
.text:00402989 loc_402989:                             ; CODE XREF: sub_4024F0+482↑j
.text:00402989                 mov     edx, [esp+arg_44]
.text:0040298D                 test    edx, edx
.text:0040298F                 jnz     short loc_4029C0
.text:00402991
.text:00402991 loc_402991:                             ; CODE XREF: sub_4024F0+507↓j
.text:00402991                 mov     edx, [ebp+14h]
.text:00402994                 mov     [esp+0], edx    ; Str
.text:00402997                 call    strlen
.text:0040299C                 add     [ebp+14h], eax
.text:0040299F                 mov     eax, [esp+arg_40]
.text:004029A3                 mov     edi, [eax+0Ch]
.text:004029A6                 mov     [ebp+8], edi
.text:004029A9
.text:004029A9 loc_4029A9:                             ; CODE XREF: sub_4024F0+892↓j
.text:004029A9                 mov     ebp, [esp+Str]
.text:004029AD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004029B1                 setnz   bl
.text:004029B4                 movzx   esi, bl
.text:004029B7                 lea     eax, [esi+esi*4+3Ah]
.text:004029BB                 jmp     loc_402717
.text:004029C0 ; ---------------------------------------------------------------------------
.text:004029C0
.text:004029C0 loc_4029C0:                             ; CODE XREF: sub_4024F0+49F↑j
.text:004029C0                 mov     dword ptr [esp+0], offset sub_402410
.text:004029C7                 call    ds:libintl_gettext
.text:004029CD                 mov     ecx, [ebp+0]
.text:004029D0                 mov     esi, [esp+arg_60]
.text:004029D4                 mov     ebx, [esi+ecx*4-4]
.text:004029D8                 mov     ecx, ds:_iob
.text:004029DE                 mov     [esp+arg_8], ebx
.text:004029E2                 mov     edi, [esi]
.text:004029E4                 add     ecx, 40h ; '@'
.text:004029E7                 mov     [esp+Str2], eax ; Format
.text:004029EB                 mov     [esp+0], ecx    ; Stream
.text:004029EE                 mov     [esp+MaxCount], edi
.text:004029F2                 call    fprintf
.text:004029F7                 jmp     short loc_402991
.text:004029F7 ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:004029F7 ; ---------------------------------------------------------------------------
.text:004029F9                 align 10h
.text:00402A00 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00402A00
.text:00402A00 loc_402A00:                             ; CODE XREF: sub_4024F0+2EE↑j
.text:00402A00                                         ; sub_4024F0+34A↑j
.text:00402A00                 mov     eax, [esp+arg_70]
.text:00402A04                 test    eax, eax
.text:00402A06                 jz      short loc_402A36
.text:00402A08                 mov     ebx, [ebp+0]
.text:00402A0B                 mov     esi, [esp+arg_60]
.text:00402A0F                 mov     edi, [esi+ebx*4]
.text:00402A12                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402A16                 jz      short loc_402A39
.text:00402A18                 mov     ecx, [ebp+14h]
.text:00402A1B                 mov     edx, [esp+Str]
.text:00402A1F                 movsx   ebx, byte ptr [ecx]
.text:00402A22                 mov     [esp+0], edx    ; Str
.text:00402A25                 mov     [esp+Str2], ebx ; Val
.text:00402A29                 call    strchr
.text:00402A2E                 test    eax, eax
.text:00402A30                 jnz     loc_402AE0
.text:00402A36
.text:00402A36 loc_402A36:                             ; CODE XREF: sub_4024F0+516↑j
.text:00402A36                 mov     ebx, [ebp+0]
.text:00402A39
.text:00402A39 loc_402A39:                             ; CODE XREF: sub_4024F0+526↑j
.text:00402A39                 mov     eax, [esp+arg_44]
.text:00402A3D                 test    eax, eax
.text:00402A3F                 jz      short loc_402A91
.text:00402A41                 mov     esi, [esp+arg_60]
.text:00402A45                 mov     edi, [esi+ebx*4]
.text:00402A48                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402A4C                 jz      short loc_402AAA
.text:00402A4E                 mov     dword ptr [esp+0], offset sub_402450
.text:00402A55                 call    ds:libintl_gettext
.text:00402A5B                 mov     edi, [ebp+14h]
.text:00402A5E                 mov     [esp+arg_C], edi
.text:00402A62                 mov     ebx, [ebp+0]
.text:00402A65                 mov     edi, [esp+arg_60]
.text:00402A69                 mov     esi, [edi+ebx*4]
.text:00402A6C                 movsx   ecx, byte ptr [esi]
.text:00402A6F                 mov     esi, ds:_iob
.text:00402A75                 add     esi, 40h ; '@'
.text:00402A78                 mov     [esp+arg_8], ecx
.text:00402A7C                 mov     ebx, [edi]
.text:00402A7E                 mov     [esp+Str2], eax ; Format
.text:00402A82                 mov     [esp+0], esi    ; Stream
.text:00402A85                 mov     [esp+MaxCount], ebx
.text:00402A89                 call    fprintf
.text:00402A8E
.text:00402A8E loc_402A8E:                             ; CODE XREF: sub_4024F0+5ED↓j
.text:00402A8E                 mov     ebx, [ebp+0]
.text:00402A91
.text:00402A91 loc_402A91:                             ; CODE XREF: sub_4024F0+54F↑j
.text:00402A91                 mov     dword ptr [ebp+14h], offset loc_402470
.text:00402A98                 lea     edx, [ebx+1]
.text:00402A9B                 mov     [ebp+0], edx
.text:00402A9E
.text:00402A9E loc_402A9E:                             ; CODE XREF: sub_4024F0+A69↓j
.text:00402A9E                 mov     dword ptr [ebp+8], 0
.text:00402AA5                 jmp     loc_402918
.text:00402AAA ; ---------------------------------------------------------------------------
.text:00402AAA
.text:00402AAA loc_402AAA:                             ; CODE XREF: sub_4024F0+55C↑j
.text:00402AAA                 mov     dword ptr [esp+0], offset sub_402490
.text:00402AB1                 call    ds:libintl_gettext
.text:00402AB7                 mov     ecx, [ebp+14h]
.text:00402ABA                 mov     edi, [esp+arg_60]
.text:00402ABE                 mov     edx, ds:_iob
.text:00402AC4                 mov     [esp+arg_8], ecx
.text:00402AC8                 mov     ebx, [edi]
.text:00402ACA                 add     edx, 40h ; '@'
.text:00402ACD                 mov     [esp+Str2], eax ; Format
.text:00402AD1                 mov     [esp+MaxCount], ebx
.text:00402AD5                 mov     [esp+0], edx    ; Stream
.text:00402AD8                 call    fprintf
.text:00402ADD                 jmp     short loc_402A8E
.text:00402ADD ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:00402ADD ; ---------------------------------------------------------------------------
.text:00402ADF                 align 10h
.text:00402AE0 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: sub_4024F0+266↑j
.text:00402AE0                                         ; sub_4024F0+285↑j ...
.text:00402AE0                 mov     esi, [ebp+14h]
.text:00402AE3                 movzx   ebx, byte ptr [esi]
.text:00402AE6                 inc     esi
.text:00402AE7                 mov     [ebp+14h], esi
.text:00402AEA                 mov     ecx, [esp+Str]
.text:00402AEE                 movsx   esi, bl
.text:00402AF1                 mov     [esp+Str2], esi ; Val
.text:00402AF5                 mov     edi, esi
.text:00402AF7                 mov     [esp+0], ecx    ; Str
.text:00402AFA                 call    strchr
.text:00402AFF                 mov     ecx, [ebp+14h]
.text:00402B02                 cmp     byte ptr [ecx], 0
.text:00402B05                 jnz     short loc_402B0A
.text:00402B07                 inc     dword ptr [ebp+0]
.text:00402B0A
.text:00402B0A loc_402B0A:                             ; CODE XREF: sub_4024F0+615↑j
.text:00402B0A                 test    eax, eax
.text:00402B0C                 jz      loc_402EF0
.text:00402B12                 cmp     bl, 3Ah ; ':'
.text:00402B15                 jz      loc_402EF0
.text:00402B1B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00402B1E                 jz      loc_402BD6
.text:00402B24                 movzx   edx, byte ptr [eax+1]
.text:00402B28
.text:00402B28 loc_402B28:                             ; CODE XREF: sub_4024F0+6ED↓j
.text:00402B28                 cmp     dl, 3Ah ; ':'
.text:00402B2B                 jz      short loc_402B34
.text:00402B2D
.text:00402B2D loc_402B2D:                             ; CODE XREF: sub_4024F0+660↓j
.text:00402B2D                 mov     eax, esi
.text:00402B2F                 jmp     loc_402717
.text:00402B34 ; ---------------------------------------------------------------------------
.text:00402B34
.text:00402B34 loc_402B34:                             ; CODE XREF: sub_4024F0+63B↑j
.text:00402B34                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402B38                 jz      loc_402BC1
.text:00402B3E                 cmp     byte ptr [ecx], 0
.text:00402B41                 jz      short loc_402B52
.text:00402B43
.text:00402B43 loc_402B43:                             ; CODE XREF: sub_4024F0+6D4↓j
.text:00402B43                 inc     dword ptr [ebp+0]
.text:00402B46                 mov     [ebp+0Ch], ecx
.text:00402B49
.text:00402B49 loc_402B49:                             ; CODE XREF: sub_4024F0+67B↓j
.text:00402B49                                         ; sub_4024F0+696↓j ...
.text:00402B49                 mov     dword ptr [ebp+14h], 0
.text:00402B50                 jmp     short loc_402B2D
.text:00402B52 ; ---------------------------------------------------------------------------
.text:00402B52
.text:00402B52 loc_402B52:                             ; CODE XREF: sub_4024F0+651↑j
.text:00402B52                 mov     ecx, [ebp+0]
.text:00402B55                 cmp     ecx, [esp+arg_5C]
.text:00402B59                 jz      short loc_402B6D
.text:00402B5B                 mov     eax, [esp+arg_60]
.text:00402B5F                 lea     edx, [ecx+1]
.text:00402B62                 mov     [ebp+0], edx
.text:00402B65                 mov     ebx, [eax+ecx*4]
.text:00402B68                 mov     [ebp+0Ch], ebx
.text:00402B6B                 jmp     short loc_402B49
.text:00402B6D ; ---------------------------------------------------------------------------
.text:00402B6D
.text:00402B6D loc_402B6D:                             ; CODE XREF: sub_4024F0+669↑j
.text:00402B6D                 mov     ecx, [esp+arg_44]
.text:00402B71                 test    ecx, ecx
.text:00402B73                 jnz     short loc_402B8F
.text:00402B75
.text:00402B75 loc_402B75:                             ; CODE XREF: sub_4024F0+6CF↓j
.text:00402B75                 mov     [ebp+8], edi
.text:00402B78                 mov     edi, [esp+Str]
.text:00402B7C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00402B7F                 jz      short loc_402B88
.text:00402B81                 mov     esi, 3Fh ; '?'
.text:00402B86                 jmp     short loc_402B49
.text:00402B88 ; ---------------------------------------------------------------------------
.text:00402B88
.text:00402B88 loc_402B88:                             ; CODE XREF: sub_4024F0+68F↑j
.text:00402B88                 mov     esi, 3Ah ; ':'
.text:00402B8D                 jmp     short loc_402B49
.text:00402B8F ; ---------------------------------------------------------------------------
.text:00402B8F
.text:00402B8F loc_402B8F:                             ; CODE XREF: sub_4024F0+683↑j
.text:00402B8F                 mov     dword ptr [esp+0], 4024B0h
.text:00402B96                 call    ds:libintl_gettext
.text:00402B9C                 mov     [esp+arg_8], edi
.text:00402BA0                 mov     ebx, [esp+arg_60]
.text:00402BA4                 mov     edx, ds:_iob
.text:00402BAA                 mov     esi, [ebx]
.text:00402BAC                 add     edx, 40h ; '@'
.text:00402BAF                 mov     [esp+Str2], eax ; Format
.text:00402BB3                 mov     [esp+MaxCount], esi
.text:00402BB7                 mov     [esp+0], edx    ; Stream
.text:00402BBA                 call    fprintf
.text:00402BBF                 jmp     short loc_402B75
.text:00402BC1 ; ---------------------------------------------------------------------------
.text:00402BC1
.text:00402BC1 loc_402BC1:                             ; CODE XREF: sub_4024F0+648↑j
.text:00402BC1                 cmp     byte ptr [ecx], 0
.text:00402BC4                 jnz     loc_402B43
.text:00402BCA                 mov     dword ptr [ebp+0Ch], 0
.text:00402BD1                 jmp     loc_402B49
.text:00402BD6 ; ---------------------------------------------------------------------------
.text:00402BD6
.text:00402BD6 loc_402BD6:                             ; CODE XREF: sub_4024F0+62E↑j
.text:00402BD6                 movzx   edx, byte ptr [eax+1]
.text:00402BDA                 cmp     dl, 3Bh ; ';'
.text:00402BDD                 jnz     loc_402B28
.text:00402BE3                 mov     [esp+arg_2C], 0
.text:00402BEB                 mov     [esp+arg_28], 0
.text:00402BF3                 mov     [esp+arg_24], 0
.text:00402BFB                 mov     [esp+arg_20], 0
.text:00402C03                 cmp     byte ptr [ecx], 0
.text:00402C06                 jz      loc_402E7B
.text:00402C0C                 inc     dword ptr [ebp+0]
.text:00402C0F                 mov     [ebp+0Ch], ecx
.text:00402C12
.text:00402C12 loc_402C12:                             ; CODE XREF: sub_4024F0+9A4↓j
.text:00402C12                 mov     edi, [ebp+0Ch]
.text:00402C15                 mov     [ebp+14h], edi
.text:00402C18                 movzx   eax, byte ptr [edi]
.text:00402C1B                 test    al, al
.text:00402C1D                 jz      short loc_402C2F
.text:00402C1F                 cmp     al, 3Dh ; '='
.text:00402C21                 jz      short loc_402C2F
.text:00402C23
.text:00402C23 loc_402C23:                             ; CODE XREF: sub_4024F0+73D↓j
.text:00402C23                 inc     edi
.text:00402C24                 movzx   eax, byte ptr [edi]
.text:00402C27                 test    al, al
.text:00402C29                 jz      short loc_402C2F
.text:00402C2B                 cmp     al, 3Dh ; '='
.text:00402C2D                 jnz     short loc_402C23
.text:00402C2F
.text:00402C2F loc_402C2F:                             ; CODE XREF: sub_4024F0+72D↑j
.text:00402C2F                                         ; sub_4024F0+731↑j ...
.text:00402C2F                 mov     [esp+arg_1C], 0
.text:00402C37                 mov     esi, [esp+arg_68]
.text:00402C3B                 mov     eax, [esi]
.text:00402C3D                 test    eax, eax
.text:00402C3F                 jz      loc_402DC0
.text:00402C45                 mov     ecx, eax
.text:00402C47
.text:00402C47 loc_402C47:                             ; CODE XREF: sub_4024F0+783↓j
.text:00402C47                 mov     ebx, [ebp+14h]
.text:00402C4A                 mov     eax, edi
.text:00402C4C                 mov     [esp+0], ecx    ; Str1
.text:00402C4F                 sub     eax, ebx
.text:00402C51                 mov     [esp+MaxCount], eax ; MaxCount
.text:00402C55                 mov     [esp+Str2], ebx ; Str2
.text:00402C59                 call    strncmp
.text:00402C5E                 test    eax, eax
.text:00402C60                 jz      loc_402E27
.text:00402C66
.text:00402C66 loc_402C66:                             ; CODE XREF: sub_4024F0+95C↓j
.text:00402C66                                         ; sub_4024F0+96D↓j
.text:00402C66                 inc     [esp+arg_1C]
.text:00402C6A                 add     esi, 10h
.text:00402C6D                 mov     edx, [esi]
.text:00402C6F                 test    edx, edx
.text:00402C71                 mov     ecx, edx
.text:00402C73                 jnz     short loc_402C47
.text:00402C75
.text:00402C75 loc_402C75:                             ; CODE XREF: sub_4024F0+986↓j
.text:00402C75                 mov     esi, [esp+arg_24]
.text:00402C79                 test    esi, esi
.text:00402C7B                 jz      short loc_402C89
.text:00402C7D                 mov     ebx, [esp+arg_28]
.text:00402C81                 test    ebx, ebx
.text:00402C83                 jz      loc_402DD1
.text:00402C89
.text:00402C89 loc_402C89:                             ; CODE XREF: sub_4024F0+78B↑j
.text:00402C89                 mov     esi, [esp+arg_2C]
.text:00402C8D                 test    esi, esi
.text:00402C8F                 jz      loc_402DC0
.text:00402C95                 cmp     byte ptr [edi], 0
.text:00402C98                 jz      loc_402D40
.text:00402C9E                 mov     ecx, [esp+arg_2C]
.text:00402CA2                 mov     ebx, [ecx+4]
.text:00402CA5                 test    ebx, ebx
.text:00402CA7                 jz      short loc_402CE8
.text:00402CA9                 lea     edx, [edi+1]
.text:00402CAC                 mov     [ebp+0Ch], edx
.text:00402CAF
.text:00402CAF loc_402CAF:                             ; CODE XREF: sub_4024F0+858↓j
.text:00402CAF                                         ; sub_4024F0+877↓j
.text:00402CAF                 mov     edi, [ebp+14h]
.text:00402CB2                 mov     [esp+0], edi    ; Str
.text:00402CB5                 call    strlen
.text:00402CBA                 add     [ebp+14h], eax
.text:00402CBD                 mov     eax, [esp+arg_6C]
.text:00402CC1                 test    eax, eax
.text:00402CC3                 jz      short loc_402CD0
.text:00402CC5                 mov     edx, [esp+arg_20]
.text:00402CC9                 mov     ebp, [esp+arg_6C]
.text:00402CCD                 mov     [ebp+0], edx
.text:00402CD0
.text:00402CD0 loc_402CD0:                             ; CODE XREF: sub_4024F0+7D3↑j
.text:00402CD0                 mov     eax, [esp+arg_2C]
.text:00402CD4                 mov     ecx, [eax+8]
.text:00402CD7                 test    ecx, ecx
.text:00402CD9                 jnz     loc_40289A
.text:00402CDF                 mov     ecx, [esp+arg_2C]
.text:00402CE3                 jmp     loc_402892
.text:00402CE8 ; ---------------------------------------------------------------------------
.text:00402CE8
.text:00402CE8 loc_402CE8:                             ; CODE XREF: sub_4024F0+7B7↑j
.text:00402CE8                 mov     eax, [esp+arg_44]
.text:00402CEC                 test    eax, eax
.text:00402CEE                 jnz     short loc_402D03
.text:00402CF0
.text:00402CF0 loc_402CF0:                             ; CODE XREF: sub_4024F0+849↓j
.text:00402CF0                 mov     ecx, [ebp+14h]
.text:00402CF3                 mov     [esp+0], ecx    ; Str
.text:00402CF6                 call    strlen
.text:00402CFB                 add     [ebp+14h], eax
.text:00402CFE                 jmp     loc_402918
.text:00402D03 ; ---------------------------------------------------------------------------
.text:00402D03
.text:00402D03 loc_402D03:                             ; CODE XREF: sub_4024F0+7FE↑j
.text:00402D03                 mov     dword ptr [esp+0], offset sub_4024F0
.text:00402D0A                 call    ds:libintl_gettext
.text:00402D10                 mov     edx, [esp+arg_2C]
.text:00402D14                 mov     ebx, [esp+arg_60]
.text:00402D18                 mov     edi, [edx]
.text:00402D1A                 mov     [esp+arg_8], edi
.text:00402D1E                 mov     edi, ds:_iob
.text:00402D24                 mov     esi, [ebx]
.text:00402D26                 mov     [esp+Str2], eax ; Format
.text:00402D2A                 add     edi, 40h ; '@'
.text:00402D2D                 mov     [esp+MaxCount], esi
.text:00402D31                 mov     [esp+0], edi    ; Stream
.text:00402D34                 call    fprintf
.text:00402D39                 jmp     short loc_402CF0
.text:00402D39 ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:00402D39 ; ---------------------------------------------------------------------------
.text:00402D3B                 align 10h
.text:00402D40 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00402D40
.text:00402D40 loc_402D40:                             ; CODE XREF: sub_4024F0+7A8↑j
.text:00402D40                 mov     esi, [esp+arg_2C]
.text:00402D44                 cmp     dword ptr [esi+4], 1
.text:00402D48                 jnz     loc_402CAF
.text:00402D4E                 mov     ecx, [ebp+0]
.text:00402D51                 cmp     ecx, [esp+arg_5C]
.text:00402D55                 jge     short loc_402D6C
.text:00402D57                 mov     eax, [esp+arg_60]
.text:00402D5B                 lea     ebx, [ecx+1]
.text:00402D5E                 mov     [ebp+0], ebx
.text:00402D61                 mov     edi, [eax+ecx*4]
.text:00402D64                 mov     [ebp+0Ch], edi
.text:00402D67                 jmp     loc_402CAF
.text:00402D6C ; ---------------------------------------------------------------------------
.text:00402D6C
.text:00402D6C loc_402D6C:                             ; CODE XREF: sub_4024F0+865↑j
.text:00402D6C                 mov     edx, [esp+arg_44]
.text:00402D70                 test    edx, edx
.text:00402D72                 jnz     short loc_402D87
.text:00402D74
.text:00402D74 loc_402D74:                             ; CODE XREF: sub_4024F0+8CE↓j
.text:00402D74                 mov     edx, [ebp+14h]
.text:00402D77                 mov     [esp+0], edx    ; Str
.text:00402D7A                 call    strlen
.text:00402D7F                 add     [ebp+14h], eax
.text:00402D82                 jmp     loc_4029A9
.text:00402D87 ; ---------------------------------------------------------------------------
.text:00402D87
.text:00402D87 loc_402D87:                             ; CODE XREF: sub_4024F0+882↑j
.text:00402D87                 mov     dword ptr [esp+0], offset sub_402410
.text:00402D8E                 call    ds:libintl_gettext
.text:00402D94                 mov     ecx, [ebp+0]
.text:00402D97                 mov     ebx, [esp+arg_60]
.text:00402D9B                 mov     edi, [ebx+ecx*4-4]
.text:00402D9F                 mov     ecx, ds:_iob
.text:00402DA5                 mov     [esp+arg_8], edi
.text:00402DA9                 mov     esi, [ebx]
.text:00402DAB                 add     ecx, 40h ; '@'
.text:00402DAE                 mov     [esp+Str2], eax ; Format
.text:00402DB2                 mov     [esp+0], ecx    ; Stream
.text:00402DB5                 mov     [esp+MaxCount], esi
.text:00402DB9                 call    fprintf
.text:00402DBE                 jmp     short loc_402D74
.text:00402DC0 ; ---------------------------------------------------------------------------
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: sub_4024F0+74F↑j
.text:00402DC0                                         ; sub_4024F0+79F↑j
.text:00402DC0                 mov     dword ptr [ebp+14h], 0
.text:00402DC7                 mov     eax, 57h ; 'W'
.text:00402DCC                 jmp     loc_402717
.text:00402DD1 ; ---------------------------------------------------------------------------
.text:00402DD1
.text:00402DD1 loc_402DD1:                             ; CODE XREF: sub_4024F0+793↑j
.text:00402DD1                 mov     edi, [esp+arg_44]
.text:00402DD5                 test    edi, edi
.text:00402DD7                 jnz     short loc_402DEF
.text:00402DD9
.text:00402DD9 loc_402DD9:                             ; CODE XREF: sub_4024F0+935↓j
.text:00402DD9                 mov     edx, [ebp+14h]
.text:00402DDC                 mov     [esp+0], edx    ; Str
.text:00402DDF                 call    strlen
.text:00402DE4                 add     [ebp+14h], eax
.text:00402DE7                 inc     dword ptr [ebp+0]
.text:00402DEA                 jmp     loc_402918
.text:00402DEF ; ---------------------------------------------------------------------------
.text:00402DEF
.text:00402DEF loc_402DEF:                             ; CODE XREF: sub_4024F0+8E7↑j
.text:00402DEF                 mov     dword ptr [esp+0], offset sub_402530
.text:00402DF6                 call    ds:libintl_gettext
.text:00402DFC                 mov     ecx, [ebp+0]
.text:00402DFF                 mov     ebx, [esp+arg_60]
.text:00402E03                 mov     edi, [ebx+ecx*4]
.text:00402E06                 mov     ecx, ds:_iob
.text:00402E0C                 mov     [esp+arg_8], edi
.text:00402E10                 mov     esi, [ebx]
.text:00402E12                 add     ecx, 40h ; '@'
.text:00402E15                 mov     [esp+Str2], eax ; Format
.text:00402E19                 mov     [esp+0], ecx    ; Stream
.text:00402E1C                 mov     [esp+MaxCount], esi
.text:00402E20                 call    fprintf
.text:00402E25                 jmp     short loc_402DD9
.text:00402E27 ; ---------------------------------------------------------------------------
.text:00402E27
.text:00402E27 loc_402E27:                             ; CODE XREF: sub_4024F0+770↑j
.text:00402E27                 mov     edx, [ebp+14h]
.text:00402E2A                 mov     ebx, edi
.text:00402E2C                 mov     ecx, [esi]
.text:00402E2E                 sub     ebx, edx
.text:00402E30                 mov     [esp+0], ecx    ; Str
.text:00402E33                 call    strlen
.text:00402E38                 cmp     ebx, eax
.text:00402E3A                 jz      short loc_402E62
.text:00402E3C                 mov     ebx, [esp+arg_2C]
.text:00402E40                 test    ebx, ebx
.text:00402E42                 jz      short loc_402E51
.text:00402E44                 mov     [esp+arg_24], 1
.text:00402E4C                 jmp     loc_402C66
.text:00402E51 ; ---------------------------------------------------------------------------
.text:00402E51
.text:00402E51 loc_402E51:                             ; CODE XREF: sub_4024F0+952↑j
.text:00402E51                 mov     [esp+arg_2C], esi
.text:00402E55                 mov     ecx, [esp+arg_1C]
.text:00402E59                 mov     [esp+arg_20], ecx
.text:00402E5D                 jmp     loc_402C66
.text:00402E62 ; ---------------------------------------------------------------------------
.text:00402E62
.text:00402E62 loc_402E62:                             ; CODE XREF: sub_4024F0+94A↑j
.text:00402E62                 mov     [esp+arg_2C], esi
.text:00402E66                 mov     eax, [esp+arg_1C]
.text:00402E6A                 mov     [esp+arg_28], 1
.text:00402E72                 mov     [esp+arg_20], eax
.text:00402E76                 jmp     loc_402C75
.text:00402E7B ; ---------------------------------------------------------------------------
.text:00402E7B
.text:00402E7B loc_402E7B:                             ; CODE XREF: sub_4024F0+716↑j
.text:00402E7B                 mov     edx, [ebp+0]
.text:00402E7E                 cmp     edx, [esp+arg_5C]
.text:00402E82                 jz      short loc_402E99
.text:00402E84                 mov     ebx, [esp+arg_60]
.text:00402E88                 lea     esi, [edx+1]
.text:00402E8B                 mov     [ebp+0], esi
.text:00402E8E                 mov     edi, [ebx+edx*4]
.text:00402E91                 mov     [ebp+0Ch], edi
.text:00402E94                 jmp     loc_402C12
.text:00402E99 ; ---------------------------------------------------------------------------
.text:00402E99
.text:00402E99 loc_402E99:                             ; CODE XREF: sub_4024F0+992↑j
.text:00402E99                 mov     edi, [esp+arg_44]
.text:00402E9D                 test    edi, edi
.text:00402E9F                 jnz     short loc_402EBC
.text:00402EA1
.text:00402EA1 loc_402EA1:                             ; CODE XREF: sub_4024F0+9FC↓j
.text:00402EA1                 mov     [ebp+8], esi
.text:00402EA4                 mov     ebp, [esp+Str]
.text:00402EA8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402EAC                 jz      short loc_402EB8
.text:00402EAE                 mov     bl, 3Fh ; '?'
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_4024F0+9CA↓j
.text:00402EB0                 movsx   eax, bl
.text:00402EB3                 jmp     loc_402717
.text:00402EB8 ; ---------------------------------------------------------------------------
.text:00402EB8
.text:00402EB8 loc_402EB8:                             ; CODE XREF: sub_4024F0+9BC↑j
.text:00402EB8                 mov     bl, 3Ah ; ':'
.text:00402EBA                 jmp     short loc_402EB0
.text:00402EBC ; ---------------------------------------------------------------------------
.text:00402EBC
.text:00402EBC loc_402EBC:                             ; CODE XREF: sub_4024F0+9AF↑j
.text:00402EBC                 mov     dword ptr [esp+0], 4024B0h
.text:00402EC3                 call    ds:libintl_gettext
.text:00402EC9                 mov     [esp+arg_8], esi
.text:00402ECD                 mov     edx, [esp+arg_60]
.text:00402ED1                 mov     ecx, ds:_iob
.text:00402ED7                 mov     ebx, [edx]
.text:00402ED9                 add     ecx, 40h ; '@'
.text:00402EDC                 mov     [esp+Str2], eax ; Format
.text:00402EE0                 mov     [esp+MaxCount], ebx
.text:00402EE4                 mov     [esp+0], ecx    ; Stream
.text:00402EE7                 call    fprintf
.text:00402EEC                 jmp     short loc_402EA1
.text:00402EEC ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:00402EEC ; ---------------------------------------------------------------------------
.text:00402EEE                 align 10h
.text:00402EF0 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00402EF0
.text:00402EF0 loc_402EF0:                             ; CODE XREF: sub_4024F0+61C↑j
.text:00402EF0                                         ; sub_4024F0+625↑j
.text:00402EF0                 mov     eax, [esp+arg_44]
.text:00402EF4                 test    eax, eax
.text:00402EF6                 jz      short loc_402F2F
.text:00402EF8                 mov     ebx, [ebp+1Ch]
.text:00402EFB                 test    ebx, ebx
.text:00402EFD                 jz      short loc_402F37
.text:00402EFF                 mov     dword ptr [esp+0], offset loc_402551
.text:00402F06
.text:00402F06 loc_402F06:                             ; CODE XREF: sub_4024F0+A4E↓j
.text:00402F06                 call    ds:libintl_gettext
.text:00402F0C                 mov     [esp+arg_8], esi
.text:00402F10                 mov     ebx, [esp+arg_60]
.text:00402F14                 mov     edx, ds:_iob
.text:00402F1A                 mov     esi, [ebx]
.text:00402F1C                 add     edx, 40h ; '@'
.text:00402F1F                 mov     [esp+Str2], eax ; Format
.text:00402F23                 mov     [esp+MaxCount], esi
.text:00402F27                 mov     [esp+0], edx    ; Stream
.text:00402F2A                 call    fprintf
.text:00402F2F
.text:00402F2F loc_402F2F:                             ; CODE XREF: sub_4024F0+A06↑j
.text:00402F2F                 mov     [ebp+8], edi
.text:00402F32                 jmp     loc_402918
.text:00402F37 ; ---------------------------------------------------------------------------
.text:00402F37
.text:00402F37 loc_402F37:                             ; CODE XREF: sub_4024F0+A0D↑j
.text:00402F37                 mov     dword ptr [esp+0], offset loc_40256B
.text:00402F3E                 jmp     short loc_402F06
.text:00402F40 ; ---------------------------------------------------------------------------
.text:00402F40
.text:00402F40 loc_402F40:                             ; CODE XREF: sub_4024F0+33E↑j
.text:00402F40                 mov     edi, [esp+arg_44]
.text:00402F44                 test    edi, edi
.text:00402F46                 jnz     short loc_402F5E
.text:00402F48
.text:00402F48 loc_402F48:                             ; CODE XREF: sub_4024F0+AA4↓j
.text:00402F48                 mov     edx, [ebp+14h]
.text:00402F4B                 mov     [esp+0], edx    ; Str
.text:00402F4E                 call    strlen
.text:00402F53                 add     [ebp+14h], eax
.text:00402F56                 inc     dword ptr [ebp+0]
.text:00402F59                 jmp     loc_402A9E
.text:00402F5E ; ---------------------------------------------------------------------------
.text:00402F5E
.text:00402F5E loc_402F5E:                             ; CODE XREF: sub_4024F0+A56↑j
.text:00402F5E                 mov     dword ptr [esp+0], offset loc_402585
.text:00402F65                 call    ds:libintl_gettext
.text:00402F6B                 mov     ebx, [ebp+0]
.text:00402F6E                 mov     edi, [esp+arg_60]
.text:00402F72                 mov     ecx, [edi+ebx*4]
.text:00402F75                 mov     ebx, ds:_iob
.text:00402F7B                 mov     [esp+arg_8], ecx
.text:00402F7F                 mov     esi, [edi]
.text:00402F81                 add     ebx, 40h ; '@'
.text:00402F84                 mov     [esp+Str2], eax ; Format
.text:00402F88                 mov     [esp+0], ebx    ; Stream
.text:00402F8B                 mov     [esp+MaxCount], esi
.text:00402F8F                 call    fprintf
.text:00402F94                 jmp     short loc_402F48
.text:00402F96 ; ---------------------------------------------------------------------------
.text:00402F96
.text:00402F96 loc_402F96:                             ; CODE XREF: sub_4024F0+316↑j
.text:00402F96                 mov     ecx, [ebp+14h]
.text:00402F99                 mov     ebx, edi
.text:00402F9B                 mov     edx, [esi]
.text:00402F9D                 sub     ebx, ecx
.text:00402F9F                 mov     [esp+0], edx    ; Str
.text:00402FA2                 call    strlen
.text:00402FA7                 cmp     ebx, eax
.text:00402FA9                 jz      short loc_403001
.text:00402FAB                 mov     ebx, [esp+arg_40]
.text:00402FAF                 test    ebx, ebx
.text:00402FB1                 jz      short loc_402FF0
.text:00402FB3                 mov     edx, [esp+arg_70]
.text:00402FB7                 test    edx, edx
.text:00402FB9                 jnz     short loc_402FC7
.text:00402FBB                 mov     ecx, [esp+arg_40]
.text:00402FBF                 mov     ebx, [esi+4]
.text:00402FC2                 cmp     [ecx+4], ebx
.text:00402FC5                 jz      short loc_402FD4
.text:00402FC7
.text:00402FC7 loc_402FC7:                             ; CODE XREF: sub_4024F0+AC9↑j
.text:00402FC7                                         ; sub_4024F0+AEA↓j ...
.text:00402FC7                 mov     [esp+arg_38], 1
.text:00402FCF                 jmp     loc_40280C
.text:00402FD4 ; ---------------------------------------------------------------------------
.text:00402FD4
.text:00402FD4 loc_402FD4:                             ; CODE XREF: sub_4024F0+AD5↑j
.text:00402FD4                 mov     edx, [esi+8]
.text:00402FD7                 cmp     [ecx+8], edx
.text:00402FDA                 jnz     short loc_402FC7
.text:00402FDC                 mov     ebx, [esi+0Ch]
.text:00402FDF                 cmp     [ecx+0Ch], ebx
.text:00402FE2                 jnz     short loc_402FC7
.text:00402FE4                 jmp     loc_40280C
.text:00402FE4 ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:00402FE4 ; ---------------------------------------------------------------------------
.text:00402FE9                 align 10h
.text:00402FF0 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_4024F0+AC1↑j
.text:00402FF0                 mov     [esp+arg_40], esi
.text:00402FF4                 mov     eax, [esp+arg_30]
.text:00402FF8                 mov     [esp+arg_34], eax
.text:00402FFC                 jmp     loc_40280C
.text:00403001 ; ---------------------------------------------------------------------------
.text:00403001
.text:00403001 loc_403001:                             ; CODE XREF: sub_4024F0+AB9↑j
.text:00403001                 mov     [esp+arg_40], esi
.text:00403005                 mov     ecx, [esp+arg_30]
.text:00403009                 mov     [esp+arg_3C], 1
.text:00403011                 mov     [esp+arg_34], ecx
.text:00403015                 jmp     loc_402820
.text:0040301A ; ---------------------------------------------------------------------------
.text:0040301A
.text:0040301A loc_40301A:                             ; CODE XREF: sub_4024F0+28F↑j
.text:0040301A                 mov     eax, [esp+Str]
.text:0040301E                 movsx   esi, dl
.text:00403021                 mov     [esp+Str2], esi ; Val
.text:00403025                 mov     [esp+0], eax    ; Str
.text:00403028                 call    strchr
.text:0040302D                 test    eax, eax
.text:0040302F                 jnz     loc_402AE0
.text:00403035                 jmp     loc_402785
.text:0040303A ; ---------------------------------------------------------------------------
.text:0040303A
.text:0040303A loc_40303A:                             ; CODE XREF: sub_4024F0+24C↑j
.text:0040303A                 mov     ecx, 1
.text:0040303F                 jmp     loc_402742
.text:00403044 ; ---------------------------------------------------------------------------
.text:00403044
.text:00403044 loc_403044:                             ; CODE XREF: sub_4024F0+1A4↑j
.text:00403044                                         ; sub_4024F0+200↑j
.text:00403044                 mov     eax, [ebp+20h]
.text:00403047                 cmp     eax, [ebp+24h]
.text:0040304A                 jz      loc_402720
.text:00403050                 mov     [ebp+0], eax
.text:00403053                 jmp     loc_402720
.text:00403058 ; ---------------------------------------------------------------------------
.text:00403058
.text:00403058 loc_403058:                             ; CODE XREF: sub_4024F0+1CE↑j
.text:00403058                 mov     [ebp+20h], eax
.text:0040305B                 jmp     loc_4026E0
.text:00403060 ; ---------------------------------------------------------------------------
.text:00403060
.text:00403060 loc_403060:                             ; CODE XREF: sub_4024F0+19A↑j
.text:00403060                 mov     edx, [ebp+20h]
.text:00403063                 mov     eax, [ebp+24h]
.text:00403066                 cmp     edx, eax
.text:00403068                 jz      short loc_4030E0
.text:0040306A                 cmp     eax, ebx
.text:0040306C                 jz      short loc_403081
.text:0040306E                 mov     [esp+Str2], ebp
.text:00403072                 mov     ebx, [esp+arg_60]
.text:00403076                 mov     [esp+0], ebx
.text:00403079                 call    sub_403270
.text:0040307E                 mov     ebx, [ebp+0]
.text:00403081
.text:00403081 loc_403081:                             ; CODE XREF: sub_4024F0+B7C↑j
.text:00403081                                         ; sub_4024F0+BF2↓j ...
.text:00403081                 cmp     ebx, [esp+arg_5C]
.text:00403085                 jge     short loc_4030D0
.text:00403087                 mov     esi, [esp+arg_60]
.text:0040308B                 mov     eax, [esi+ebx*4]
.text:0040308E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403091                 jz      short loc_4030D8
.text:00403093                 lea     esi, [esi+0]
.text:00403099                 lea     edi, [edi+0]
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_4024F0+BCC↓j
.text:004030A0                                         ; sub_4024F0+BEC↓j
.text:004030A0                 lea     eax, [ebx+1]
.text:004030A3                 mov     ebx, eax
.text:004030A5                 mov     [ebp+0], eax
.text:004030A8                 cmp     eax, [esp+arg_5C]
.text:004030AC                 jge     short loc_4030D0
.text:004030AE                 mov     edi, [esp+arg_60]
.text:004030B2                 mov     edx, [edi+eax*4]
.text:004030B5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004030B8                 jz      short loc_4030C0
.text:004030BA
.text:004030BA loc_4030BA:                             ; CODE XREF: sub_4024F0+BD4↓j
.text:004030BA                 mov     ebx, eax
.text:004030BC                 jmp     short loc_4030A0
.text:004030BC ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:004030BC ; ---------------------------------------------------------------------------
.text:004030BE                 align 10h
.text:004030C0 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:004030C0
.text:004030C0 loc_4030C0:                             ; CODE XREF: sub_4024F0+BC8↑j
.text:004030C0                 cmp     byte ptr [edx+1], 0
.text:004030C4                 jz      short loc_4030BA
.text:004030C6                 lea     esi, [esi+0]
.text:004030C9                 lea     edi, [edi+0]
.text:004030D0
.text:004030D0 loc_4030D0:                             ; CODE XREF: sub_4024F0+B95↑j
.text:004030D0                                         ; sub_4024F0+BBC↑j ...
.text:004030D0                 mov     [ebp+24h], ebx
.text:004030D3                 jmp     loc_402690
.text:004030D8 ; ---------------------------------------------------------------------------
.text:004030D8
.text:004030D8 loc_4030D8:                             ; CODE XREF: sub_4024F0+BA1↑j
.text:004030D8                 cmp     byte ptr [eax+1], 0
.text:004030DC                 jz      short loc_4030A0
.text:004030DE                 jmp     short loc_4030D0
.text:004030E0 ; ---------------------------------------------------------------------------
.text:004030E0
.text:004030E0 loc_4030E0:                             ; CODE XREF: sub_4024F0+B78↑j
.text:004030E0                 cmp     edx, ebx
.text:004030E2                 jz      short loc_403081
.text:004030E4                 mov     [ebp+20h], ebx
.text:004030E7                 jmp     short loc_403081
.text:004030E9 ; ---------------------------------------------------------------------------
.text:004030E9
.text:004030E9 loc_4030E9:                             ; CODE XREF: sub_4024F0+158↑j
.text:004030E9                 mov     dword ptr [ebp+18h], 0
.text:004030F0                 mov     esi, [esp+Str]
.text:004030F4
.text:004030F4 loc_4030F4:                             ; CODE XREF: sub_4024F0+C19↓j
.text:004030F4                 inc     esi
.text:004030F5                 jmp     loc_402658
.text:004030F5 ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:004030F5 ; ---------------------------------------------------------------------------
.text:004030FA                 align 10h
.text:00403100 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_4024F0+150↑j
.text:00403100                 mov     dword ptr [ebp+18h], 2
.text:00403107                 mov     esi, ecx
.text:00403109                 jmp     short loc_4030F4
.text:00403109 ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:00403109 ; ---------------------------------------------------------------------------
.text:0040310B                 align 10h
.text:00403110 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_4024F0+139↑j
.text:00403110                 mov     dword ptr [esp+0], offset loc_4025A3 ; VarName
.text:00403117                 call    getenv
.text:0040311C                 test    eax, eax
.text:0040311E                 jz      loc_402634
.text:00403124                 jmp     loc_40262F
.text:00403124 ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:00403124 ; ---------------------------------------------------------------------------
.text:00403129                 align 10h
.text:00403130 ; START OF FUNCTION CHUNK FOR sub_4024F0
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_4024F0:loc_4025FF↑j
.text:00403130                 mov     dword ptr [ebp+0], 1
.text:00403137                 mov     ebx, 1
.text:0040313C                 jmp     loc_402610
.text:0040313C ; END OF FUNCTION CHUNK FOR sub_4024F0
.text:00403141 ; ---------------------------------------------------------------------------
.text:00403141                 jmp     short sub_403150
.text:00403141 ; ---------------------------------------------------------------------------
.text:00403143                 align 10h
.text:00403150
.text:00403150 ; =============== S U B R O U T I N E =======================================
.text:00403150
.text:00403150
.text:00403150 sub_403150      proc near               ; CODE XREF: .text:00403141↑j
.text:00403150                                         ; sub_403990+3A↓p ...
.text:00403150
.text:00403150 var_2C          = dword ptr -2Ch
.text:00403150 var_28          = dword ptr -28h
.text:00403150 var_24          = dword ptr -24h
.text:00403150 var_20          = dword ptr -20h
.text:00403150 var_1C          = dword ptr -1Ch
.text:00403150 var_18          = dword ptr -18h
.text:00403150 var_14          = dword ptr -14h
.text:00403150 var_10          = dword ptr -10h
.text:00403150 arg_0           = dword ptr  4
.text:00403150 arg_4           = dword ptr  8
.text:00403150 arg_8           = dword ptr  0Ch
.text:00403150 arg_C           = dword ptr  10h
.text:00403150 arg_10          = dword ptr  14h
.text:00403150 arg_14          = dword ptr  18h
.text:00403150 arg_18          = dword ptr  1Ch
.text:00403150
.text:00403150                 sub     esp, 2Ch
.text:00403153                 mov     edx, dword_40E010
.text:00403159                 mov     [esp+2Ch+var_10], offset dword_40F020
.text:00403161                 mov     ecx, dword_40E014
.text:00403167                 mov     ds:dword_40F020, edx
.text:0040316D                 mov     edx, [esp+2Ch+arg_18]
.text:00403171                 mov     ds:dword_40F024, ecx
.text:00403177                 mov     ecx, [esp+2Ch+arg_14]
.text:0040317B                 mov     [esp+2Ch+var_14], edx
.text:0040317F                 mov     edx, [esp+2Ch+arg_10]
.text:00403183                 mov     [esp+2Ch+var_18], ecx
.text:00403187                 mov     ecx, [esp+2Ch+arg_C]
.text:0040318B                 mov     [esp+2Ch+var_1C], edx
.text:0040318F                 mov     edx, [esp+2Ch+arg_8]
.text:00403193                 mov     [esp+2Ch+var_20], ecx
.text:00403197                 mov     ecx, [esp+2Ch+arg_4]
.text:0040319B                 mov     [esp+2Ch+var_24], edx
.text:0040319F                 mov     edx, [esp+2Ch+arg_0]
.text:004031A3                 mov     [esp+2Ch+var_28], ecx
.text:004031A7                 mov     [esp+2Ch+var_2C], edx
.text:004031AA                 call    loc_4025C0
.text:004031AF                 mov     ecx, ds:dword_40F020
.text:004031B5                 mov     dword_40E010, ecx
.text:004031BB                 mov     ecx, ds:dword_40F02C
.text:004031C1                 mov     ds:dword_40F4F0, ecx
.text:004031C7                 mov     ecx, ds:dword_40F028
.text:004031CD                 mov     dword_40E018, ecx
.text:004031D3                 add     esp, 2Ch
.text:004031D6                 retn
.text:004031D6 sub_403150      endp
.text:004031D6
.text:004031D6 ; ---------------------------------------------------------------------------
.text:004031D7                 align 10h
.text:004031E0                 sub     esp, 2Ch
.text:004031E3                 mov     edx, dword_40E010
.text:004031E9                 mov     dword ptr [esp+1Ch], offset dword_40F020
.text:004031F1                 mov     ecx, dword_40E014
.text:004031F7                 mov     dword ptr [esp+18h], 1
.text:004031FF                 mov     ds:dword_40F020, edx
.text:00403205                 mov     edx, [esp+38h]
.text:00403209                 mov     ds:dword_40F024, ecx
.text:0040320F                 mov     ecx, [esp+34h]
.text:00403213                 mov     [esp+8], edx
.text:00403217                 mov     edx, [esp+30h]
.text:0040321B                 mov     [esp+4], ecx
.text:0040321F                 mov     dword ptr [esp+14h], 0
.text:00403227                 mov     dword ptr [esp+10h], 0
.text:0040322F                 mov     dword ptr [esp+0Ch], 0
.text:00403237                 mov     [esp], edx
.text:0040323A                 call    loc_4025C0
.text:0040323F                 mov     ecx, ds:dword_40F020
.text:00403245                 mov     dword_40E010, ecx
.text:0040324B                 mov     ecx, ds:dword_40F02C
.text:00403251                 mov     ds:dword_40F4F0, ecx
.text:00403257                 mov     ecx, ds:dword_40F028
.text:0040325D                 mov     dword_40E018, ecx
.text:00403263                 add     esp, 2Ch
.text:00403266                 retn
.text:00403266 ; ---------------------------------------------------------------------------
.text:00403267                 align 10h
.text:00403270
.text:00403270 ; =============== S U B R O U T I N E =======================================
.text:00403270
.text:00403270
.text:00403270 sub_403270      proc near               ; CODE XREF: sub_4024F0+1E3↑p
.text:00403270                                         ; sub_4024F0+B89↑p
.text:00403270
.text:00403270 var_2C          = dword ptr -2Ch
.text:00403270 var_28          = dword ptr -28h
.text:00403270 var_24          = dword ptr -24h
.text:00403270 var_20          = dword ptr -20h
.text:00403270 var_1C          = dword ptr -1Ch
.text:00403270 var_18          = dword ptr -18h
.text:00403270 var_14          = dword ptr -14h
.text:00403270 arg_0           = dword ptr  4
.text:00403270 arg_4           = dword ptr  8
.text:00403270
.text:00403270                 push    ebp
.text:00403271                 push    edi
.text:00403272                 push    esi
.text:00403273                 push    ebx
.text:00403274                 sub     esp, 1Ch
.text:00403277                 mov     ecx, [esp+2Ch+arg_4]
.text:0040327B                 mov     eax, [esp+2Ch+arg_4]
.text:0040327F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403283                 mov     edx, [ecx+20h]
.text:00403286                 mov     edi, [esp+2Ch+arg_0]
.text:0040328A                 mov     ecx, [ebx]
.text:0040328C                 mov     [esp+2Ch+var_2C], edx
.text:0040328F                 mov     [esp+2Ch+var_14], edx
.text:00403293                 mov     edx, [eax+24h]
.text:00403296                 mov     [esp+2Ch+var_28], ecx
.text:0040329A                 mov     [esp+2Ch+var_1C], ecx
.text:0040329E                 cmp     ecx, edx
.text:004032A0                 mov     [esp+2Ch+var_18], edx
.text:004032A4                 jle     short loc_403320
.text:004032A6                 mov     esi, [esp+2Ch+var_2C]
.text:004032A9                 cmp     edx, esi
.text:004032AB                 jle     short loc_403320
.text:004032AD                 lea     esi, [esi+0]
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_403270+A1↓j
.text:004032B0                 mov     ebx, [esp+2Ch+var_1C]
.text:004032B4                 mov     edx, [esp+2Ch+var_18]
.text:004032B8                 mov     ebp, [esp+2Ch+var_18]
.text:004032BC                 mov     eax, [esp+2Ch+var_14]
.text:004032C0                 sub     ebx, edx
.text:004032C2                 mov     [esp+2Ch+var_20], ebx
.text:004032C6                 sub     ebp, eax
.text:004032C8                 cmp     ebx, ebp
.text:004032CA                 jle     short loc_403345
.text:004032CC                 xor     esi, esi
.text:004032CE                 cmp     esi, ebp
.text:004032D0                 jge     short loc_4032FD
.text:004032D2                 mov     ecx, [esp+2Ch+var_1C]
.text:004032D6                 sub     ecx, ebp
.text:004032D8                 mov     [esp+2Ch+var_24], ecx
.text:004032DC                 lea     esi, [esi+0]
.text:004032E0
.text:004032E0 loc_4032E0:                             ; CODE XREF: sub_403270+8B↓j
.text:004032E0                 mov     ecx, [esp+2Ch+var_14]
.text:004032E4                 mov     edx, [esp+2Ch+var_24]
.text:004032E8                 add     ecx, esi
.text:004032EA                 add     edx, esi
.text:004032EC                 mov     ebx, [edi+ecx*4]
.text:004032EF                 mov     eax, [edi+edx*4]
.text:004032F2                 inc     esi
.text:004032F3                 cmp     esi, ebp
.text:004032F5                 mov     [edi+ecx*4], eax
.text:004032F8                 mov     [edi+edx*4], ebx
.text:004032FB                 jl      short loc_4032E0
.text:004032FD
.text:004032FD loc_4032FD:                             ; CODE XREF: sub_403270+60↑j
.text:004032FD                 sub     [esp+2Ch+var_1C], ebp
.text:00403301
.text:00403301 loc_403301:                             ; CODE XREF: sub_403270+107↓j
.text:00403301                 mov     eax, [esp+2Ch+var_18]
.text:00403305                 cmp     [esp+2Ch+var_1C], eax
.text:00403309                 jle     short loc_403320
.text:0040330B                 mov     ebp, [esp+2Ch+var_14]
.text:0040330F                 cmp     eax, ebp
.text:00403311                 jg      short loc_4032B0
.text:00403313                 lea     esi, [esi+0]
.text:00403319                 lea     edi, [edi+0]
.text:00403320
.text:00403320 loc_403320:                             ; CODE XREF: sub_403270+34↑j
.text:00403320                                         ; sub_403270+3B↑j ...
.text:00403320                 mov     esi, [esp+2Ch+var_28]
.text:00403324                 mov     ecx, [esp+2Ch+var_18]
.text:00403328                 mov     eax, [esp+2Ch+var_2C]
.text:0040332B                 mov     edi, [esp+2Ch+arg_4]
.text:0040332F                 mov     edx, [esp+2Ch+var_28]
.text:00403333                 sub     esi, ecx
.text:00403335                 add     esi, eax
.text:00403337                 mov     [edi+20h], esi
.text:0040333A                 mov     [edi+24h], edx
.text:0040333D                 add     esp, 1Ch
.text:00403340                 pop     ebx
.text:00403341                 pop     esi
.text:00403342                 pop     edi
.text:00403343                 pop     ebp
.text:00403344                 retn
.text:00403345 ; ---------------------------------------------------------------------------
.text:00403345
.text:00403345 loc_403345:                             ; CODE XREF: sub_403270+5A↑j
.text:00403345                 xor     esi, esi
.text:00403347                 cmp     esi, [esp+2Ch+var_20]
.text:0040334B                 jge     short loc_40336F
.text:0040334D                 lea     esi, [esi+0]
.text:00403350
.text:00403350 loc_403350:                             ; CODE XREF: sub_403270+FD↓j
.text:00403350                 mov     ebx, [esp+2Ch+var_14]
.text:00403354                 mov     ebp, [esp+2Ch+var_18]
.text:00403358                 add     ebx, esi
.text:0040335A                 add     ebp, esi
.text:0040335C                 mov     edx, [edi+ebx*4]
.text:0040335F                 inc     esi
.text:00403360                 cmp     esi, [esp+2Ch+var_20]
.text:00403364                 mov     ecx, [edi+ebp*4]
.text:00403367                 mov     [edi+ebx*4], ecx
.text:0040336A                 mov     [edi+ebp*4], edx
.text:0040336D                 jl      short loc_403350
.text:0040336F
.text:0040336F loc_40336F:                             ; CODE XREF: sub_403270+DB↑j
.text:0040336F                 mov     esi, [esp+2Ch+var_20]
.text:00403373                 add     [esp+2Ch+var_14], esi
.text:00403377                 jmp     short loc_403301
.text:00403377 sub_403270      endp
.text:00403377
.text:00403377 ; ---------------------------------------------------------------------------
.text:00403379                 db 17h dup(90h)
.text:00403390
.text:00403390 ; =============== S U B R O U T I N E =======================================
.text:00403390
.text:00403390
.text:00403390 ; int __cdecl sub_403390(char *, int)
.text:00403390 sub_403390      proc near               ; CODE XREF: sub_401910+33A↑p
.text:00403390                                         ; sub_401DE0+254↑p
.text:00403390
.text:00403390 Block           = dword ptr -1Ch
.text:00403390 lpString1       = dword ptr -18h
.text:00403390 var_14          = dword ptr -14h
.text:00403390 arg_0           = dword ptr  4
.text:00403390 arg_4           = dword ptr  8
.text:00403390
.text:00403390                 push    ebp
.text:00403391                 push    edi
.text:00403392                 mov     edi, 7FFFFFFFh
.text:00403397                 push    esi
.text:00403398                 push    ebx
.text:00403399                 sub     esp, 0Ch
.text:0040339C                 mov     eax, [esp+1Ch+arg_4]
.text:004033A0                 mov     ebp, [esp+1Ch+arg_0]
.text:004033A4                 cmp     eax, 7FFFFFFEh
.text:004033A9                 ja      short loc_4033B0
.text:004033AB                 lea     edi, [eax+1]
.text:004033AE                 mov     esi, esi
.text:004033B0
.text:004033B0 loc_4033B0:                             ; CODE XREF: sub_403390+19↑j
.text:004033B0                                         ; sub_403390+56↓j ...
.text:004033B0                 mov     [esp+1Ch+Block], edi ; size_t
.text:004033B3                 call    sub_403C20
.text:004033B8                 mov     [esp+1Ch+lpString1], eax ; lpString1
.text:004033BC                 mov     esi, eax
.text:004033BE                 mov     [esp+1Ch+var_14], edi
.text:004033C2                 mov     [esp+1Ch+Block], ebp ; char *
.text:004033C5                 call    sub_4057E0
.text:004033CA                 test    eax, eax
.text:004033CC                 mov     ebx, eax
.text:004033CE                 js      short loc_403405
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_403390+7D↓j
.text:004033D0                 cmp     ebx, edi
.text:004033D2                 jb      short loc_4033F7
.text:004033D4                 mov     [esp+1Ch+Block], esi ; Block
.text:004033D7                 call    free
.text:004033DC                 cmp     edi, 3FFFFFFFh
.text:004033E2                 ja      short loc_4033E8
.text:004033E4                 add     edi, edi
.text:004033E6                 jmp     short loc_4033B0
.text:004033E8 ; ---------------------------------------------------------------------------
.text:004033E8
.text:004033E8 loc_4033E8:                             ; CODE XREF: sub_403390+52↑j
.text:004033E8                 cmp     edi, 7FFFFFFEh
.text:004033EE                 ja      short loc_403429
.text:004033F0                 mov     edi, 7FFFFFFFh
.text:004033F5                 jmp     short loc_4033B0
.text:004033F7 ; ---------------------------------------------------------------------------
.text:004033F7
.text:004033F7 loc_4033F7:                             ; CODE XREF: sub_403390+42↑j
.text:004033F7                 mov     byte ptr [ebx+esi], 0
.text:004033FB                 mov     eax, esi
.text:004033FD
.text:004033FD loc_4033FD:                             ; CODE XREF: sub_403390+97↓j
.text:004033FD                 add     esp, 0Ch
.text:00403400                 pop     ebx
.text:00403401                 pop     esi
.text:00403402                 pop     edi
.text:00403403                 pop     ebp
.text:00403404                 retn
.text:00403405 ; ---------------------------------------------------------------------------
.text:00403405
.text:00403405 loc_403405:                             ; CODE XREF: sub_403390+3E↑j
.text:00403405                 call    _errno
.text:0040340A                 cmp     dword ptr [eax], 22h ; '"'
.text:0040340D                 jz      short loc_4033D0
.text:0040340F                 call    _errno
.text:00403414                 mov     edi, [eax]
.text:00403416                 mov     [esp+1Ch+Block], esi ; Block
.text:00403419                 call    free
.text:0040341E                 call    _errno
.text:00403423                 mov     [eax], edi
.text:00403425                 xor     eax, eax
.text:00403427                 jmp     short loc_4033FD
.text:00403429 ; ---------------------------------------------------------------------------
.text:00403429
.text:00403429 loc_403429:                             ; CODE XREF: sub_403390+5E↑j
.text:00403429                 call    sub_403F10
.text:00403429 sub_403390      endp
.text:00403429
.text:00403429 ; ---------------------------------------------------------------------------
.text:0040342E                 align 10h
.text:00403430                 sub     esp, 0Ch
.text:00403433                 mov     edx, [esp+14h]
.text:00403437                 mov     dword ptr [esp+4], 5
.text:0040343F                 mov     [esp+8], edx
.text:00403443                 mov     edx, [esp+10h]
.text:00403447                 mov     [esp], edx
.text:0040344A                 call    sub_404D10
.text:0040344F                 add     esp, 0Ch
.text:00403452                 retn
.text:00403452 ; ---------------------------------------------------------------------------
.text:00403453                 align 10h
.text:00403460
.text:00403460 ; =============== S U B R O U T I N E =======================================
.text:00403460
.text:00403460
.text:00403460 ; int __cdecl sub_403460(char *)
.text:00403460 sub_403460      proc near               ; CODE XREF: sub_401910+34A↑p
.text:00403460
.text:00403460 var_C           = dword ptr -0Ch
.text:00403460 var_8           = dword ptr -8
.text:00403460 var_4           = dword ptr -4
.text:00403460 arg_0           = dword ptr  4
.text:00403460
.text:00403460                 sub     esp, 0Ch
.text:00403463                 mov     edx, [esp+0Ch+arg_0]
.text:00403467                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040346F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00403476                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040347A                 call    sub_404D10
.text:0040347F                 add     esp, 0Ch
.text:00403482                 retn
.text:00403482 sub_403460      endp
.text:00403482
.text:00403482 ; ---------------------------------------------------------------------------
.text:00403483                 align 10h
.text:00403490 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403490                                         ; DATA XREF: .data:Buffer↓o
.text:004034C2 ; const char aSSS[]
.text:004034C2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403780+50↓o
.text:004034CE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004034CE                                         ; DATA XREF: sub_403780:loc_403821↓o
.text:004034DE                 db 12h dup(90h)
.text:004034F0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004034F0                                         ; DATA XREF: sub_403780+100↓o
.text:004034F0                 db 'ere is NO',0Ah
.text:004034F0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004034F0                 db 'R PURPOSE.',0Ah,0
.text:00403588 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403588                                         ; DATA XREF: sub_403780:loc_4038C1↓o
.text:0040359F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040359F                                         ; DATA XREF: sub_403780:loc_4038CD↓o
.text:004035BB                 db 15h dup(90h)
.text:004035D0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004035D0                                         ; DATA XREF: sub_403780:loc_4038D9↓o
.text:004035D0                 db 'and %s.',0Ah,0
.text:004035F0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004035F0                                         ; DATA XREF: sub_403780:loc_4038E5↓o
.text:004035F0                 db '%s, and %s.',0Ah,0
.text:00403614                 db 1Ch dup(90h)
.text:00403630 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403630                                         ; DATA XREF: sub_403780:loc_4038F1↓o
.text:00403630                 db '%s, %s, and %s.',0Ah,0
.text:00403658                 db 18h dup(90h)
.text:00403670 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403670                                         ; DATA XREF: sub_403780:loc_4038FD↓o
.text:00403670                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040369C                 db 14h dup(90h)
.text:004036B0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004036B0                                         ; DATA XREF: sub_403780:loc_403909↓o
.text:004036B0                 db '%s, %s, %s, %s,',0Ah
.text:004036B0                 db 'and %s.',0Ah,0
.text:004036E0                 db 10h dup(90h)
.text:004036F0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004036F0                                         ; DATA XREF: sub_403780:loc_403915↓o
.text:004036F0                 db '%s, %s, %s, %s,',0Ah
.text:004036F0                 db '%s, and %s.',0Ah,0
.text:00403724                 align 10h
.text:00403730 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403730                                         ; DATA XREF: sub_403780:def_4037ED↓o
.text:00403730                 db '%s, %s, %s, %s,',0Ah
.text:00403730                 db '%s, %s, and others.',0Ah,0
.text:0040376C ; const char aSS_0[]
.text:0040376C aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_403780+1B5↓o
.text:00403773                 align 10h
.text:00403780
.text:00403780 ; =============== S U B R O U T I N E =======================================
.text:00403780
.text:00403780
.text:00403780 ; int __cdecl sub_403780(FILE *, FILE *, int, int, va_list)
.text:00403780 sub_403780      proc near               ; CODE XREF: sub_403950+2A↓p
.text:00403780
.text:00403780 Stream          = dword ptr -2Ch
.text:00403780 Format          = dword ptr -28h
.text:00403780 ArgList         = dword ptr -24h
.text:00403780 var_20          = dword ptr -20h
.text:00403780 var_1C          = dword ptr -1Ch
.text:00403780 var_14          = dword ptr -14h
.text:00403780 arg_0           = dword ptr  4
.text:00403780 arg_4           = dword ptr  8
.text:00403780 arg_8           = dword ptr  0Ch
.text:00403780 arg_C           = dword ptr  10h
.text:00403780 arg_10          = dword ptr  14h
.text:00403780
.text:00403780                 push    ebp
.text:00403781                 push    edi
.text:00403782                 push    esi
.text:00403783                 push    ebx
.text:00403784                 sub     esp, 1Ch
.text:00403787                 xor     ebx, ebx
.text:00403789                 mov     edi, [esp+2Ch+arg_10]
.text:0040378D                 mov     edx, [esp+2Ch+arg_8]
.text:00403791                 mov     esi, [esp+2Ch+arg_0]
.text:00403795                 mov     eax, [edi]
.text:00403797                 mov     ecx, [esp+2Ch+arg_4]
.text:0040379B                 mov     [esp+2Ch+var_14], edx
.text:0040379F                 mov     ebp, [esp+2Ch+arg_C]
.text:004037A3                 lea     edx, [edi+4]
.text:004037A6                 test    eax, eax
.text:004037A8                 jz      short loc_4037BC
.text:004037AA                 lea     esi, [esi+0]
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: sub_403780+3A↓j
.text:004037B0                 mov     eax, edx
.text:004037B2                 inc     ebx
.text:004037B3                 mov     eax, [eax]
.text:004037B5                 add     edx, 4
.text:004037B8                 test    eax, eax
.text:004037BA                 jnz     short loc_4037B0
.text:004037BC
.text:004037BC loc_4037BC:                             ; CODE XREF: sub_403780+28↑j
.text:004037BC                 test    ecx, ecx
.text:004037BE                 jz      loc_40392D
.text:004037C4                 mov     [esp+2Ch+var_1C], ebp
.text:004037C8                 mov     edx, [esp+2Ch+var_14]
.text:004037CC                 mov     [esp+2Ch+ArgList], ecx
.text:004037D0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:004037D8                 mov     [esp+2Ch+var_20], edx
.text:004037DC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004037DF                 call    fprintf
.text:004037E4
.text:004037E4 loc_4037E4:                             ; CODE XREF: sub_403780+1C9↓j
.text:004037E4                 cmp     ebx, 9          ; switch 10 cases
.text:004037E7                 ja      def_4037ED      ; jumptable 004037ED default case
.text:004037ED                 jmp     ds:jpt_4037ED[ebx*4] ; switch jump
.text:004037ED ; ---------------------------------------------------------------------------
.text:004037F4 jpt_4037ED      dd offset loc_40381C    ; DATA XREF: sub_403780+6D↑r
.text:004037F4                 dd offset loc_403821    ; jump table for switch statement
.text:004037F4                 dd offset loc_4038C1
.text:004037F4                 dd offset loc_4038CD
.text:004037F4                 dd offset loc_4038D9
.text:004037F4                 dd offset loc_4038E5
.text:004037F4                 dd offset loc_4038F1
.text:004037F4                 dd offset loc_4038FD
.text:004037F4                 dd offset loc_403909
.text:004037F4                 dd offset loc_403915
.text:0040381C ; ---------------------------------------------------------------------------
.text:0040381C
.text:0040381C loc_40381C:                             ; CODE XREF: sub_403780+6D↑j
.text:0040381C                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:0040381C                 call    abort           ; jumptable 004037ED case 0
.text:00403821 ; ---------------------------------------------------------------------------
.text:00403821
.text:00403821 loc_403821:                             ; CODE XREF: sub_403780+6D↑j
.text:00403821                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:00403821                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004037ED case 1
.text:00403828                 nop
.text:00403829                 lea     esi, [esi+0]
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_403780+148↓j
.text:00403830                                         ; sub_403780+154↓j ...
.text:00403830                 call    ds:libintl_gettext
.text:00403836                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040383A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040383D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403841                 call    vfprintf
.text:00403846                 mov     ebx, [esi+4]
.text:00403849                 dec     ebx
.text:0040384A                 test    ebx, ebx
.text:0040384C                 mov     [esi+4], ebx
.text:0040384F                 js      short loc_4038AF
.text:00403851                 mov     edi, [esi]
.text:00403853                 mov     byte ptr [edi], 0Ah
.text:00403856                 inc     dword ptr [esi]
.text:00403858
.text:00403858 loc_403858:                             ; CODE XREF: sub_403780+13F↓j
.text:00403858                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040385C                 mov     edx, Buffer
.text:00403862                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403865                 call    fputs
.text:0040386A                 mov     ebp, [esi+4]
.text:0040386D                 dec     ebp
.text:0040386E                 test    ebp, ebp
.text:00403870                 mov     [esi+4], ebp
.text:00403873                 js      short loc_40389D
.text:00403875                 mov     ecx, [esi]
.text:00403877                 mov     byte ptr [ecx], 0Ah
.text:0040387A                 inc     dword ptr [esi]
.text:0040387C
.text:0040387C loc_40387C:                             ; CODE XREF: sub_403780+12D↓j
.text:0040387C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403880                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403887                 call    ds:libintl_gettext
.text:0040388D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403891                 add     esp, 1Ch
.text:00403894                 pop     ebx
.text:00403895                 pop     esi
.text:00403896                 pop     edi
.text:00403897                 pop     ebp
.text:00403898                 jmp     fputs
.text:0040389D ; ---------------------------------------------------------------------------
.text:0040389D
.text:0040389D loc_40389D:                             ; CODE XREF: sub_403780+F3↑j
.text:0040389D                 mov     [esp+2Ch+Format], esi ; File
.text:004038A1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004038A8                 call    _flsbuf
.text:004038AD                 jmp     short loc_40387C
.text:004038AF ; ---------------------------------------------------------------------------
.text:004038AF
.text:004038AF loc_4038AF:                             ; CODE XREF: sub_403780+CF↑j
.text:004038AF                 mov     [esp+2Ch+Format], esi ; File
.text:004038B3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004038BA                 call    _flsbuf
.text:004038BF                 jmp     short loc_403858
.text:004038C1 ; ---------------------------------------------------------------------------
.text:004038C1
.text:004038C1 loc_4038C1:                             ; CODE XREF: sub_403780+6D↑j
.text:004038C1                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:004038C1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004037ED case 2
.text:004038C8                 jmp     loc_403830
.text:004038CD ; ---------------------------------------------------------------------------
.text:004038CD
.text:004038CD loc_4038CD:                             ; CODE XREF: sub_403780+6D↑j
.text:004038CD                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:004038CD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004037ED case 3
.text:004038D4                 jmp     loc_403830
.text:004038D9 ; ---------------------------------------------------------------------------
.text:004038D9
.text:004038D9 loc_4038D9:                             ; CODE XREF: sub_403780+6D↑j
.text:004038D9                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:004038D9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004037ED case 4
.text:004038E0                 jmp     loc_403830
.text:004038E5 ; ---------------------------------------------------------------------------
.text:004038E5
.text:004038E5 loc_4038E5:                             ; CODE XREF: sub_403780+6D↑j
.text:004038E5                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:004038E5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004037ED case 5
.text:004038EC                 jmp     loc_403830
.text:004038F1 ; ---------------------------------------------------------------------------
.text:004038F1
.text:004038F1 loc_4038F1:                             ; CODE XREF: sub_403780+6D↑j
.text:004038F1                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:004038F1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004037ED case 6
.text:004038F8                 jmp     loc_403830
.text:004038FD ; ---------------------------------------------------------------------------
.text:004038FD
.text:004038FD loc_4038FD:                             ; CODE XREF: sub_403780+6D↑j
.text:004038FD                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:004038FD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004037ED case 7
.text:00403904                 jmp     loc_403830
.text:00403909 ; ---------------------------------------------------------------------------
.text:00403909
.text:00403909 loc_403909:                             ; CODE XREF: sub_403780+6D↑j
.text:00403909                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:00403909                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004037ED case 8
.text:00403910                 jmp     loc_403830
.text:00403915 ; ---------------------------------------------------------------------------
.text:00403915
.text:00403915 loc_403915:                             ; CODE XREF: sub_403780+6D↑j
.text:00403915                                         ; DATA XREF: sub_403780:jpt_4037ED↑o
.text:00403915                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004037ED case 9
.text:0040391C                 jmp     loc_403830
.text:00403921 ; ---------------------------------------------------------------------------
.text:00403921
.text:00403921 def_4037ED:                             ; CODE XREF: sub_403780+67↑j
.text:00403921                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004037ED default case
.text:00403928                 jmp     loc_403830
.text:0040392D ; ---------------------------------------------------------------------------
.text:0040392D
.text:0040392D loc_40392D:                             ; CODE XREF: sub_403780+3E↑j
.text:0040392D                 mov     [esp+2Ch+var_20], ebp
.text:00403931                 mov     ecx, [esp+2Ch+var_14]
.text:00403935                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:0040393D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403940                 mov     [esp+2Ch+ArgList], ecx
.text:00403944                 call    fprintf
.text:00403949                 jmp     loc_4037E4
.text:00403949 sub_403780      endp
.text:00403949
.text:00403949 ; ---------------------------------------------------------------------------
.text:0040394E                 align 10h
.text:00403950
.text:00403950 ; =============== S U B R O U T I N E =======================================
.text:00403950
.text:00403950
.text:00403950 ; int __cdecl sub_403950(FILE *, FILE *, int, int, char)
.text:00403950 sub_403950      proc near               ; CODE XREF: sub_401910+145↑p
.text:00403950
.text:00403950 var_1C          = dword ptr -1Ch
.text:00403950 var_18          = dword ptr -18h
.text:00403950 var_14          = dword ptr -14h
.text:00403950 var_10          = dword ptr -10h
.text:00403950 var_C           = dword ptr -0Ch
.text:00403950 arg_0           = dword ptr  4
.text:00403950 arg_4           = dword ptr  8
.text:00403950 arg_8           = dword ptr  0Ch
.text:00403950 arg_C           = dword ptr  10h
.text:00403950 arg_10          = byte ptr  14h
.text:00403950
.text:00403950                 sub     esp, 1Ch
.text:00403953                 mov     edx, [esp+1Ch+arg_C]
.text:00403957                 lea     ecx, [esp+1Ch+arg_10]
.text:0040395B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040395F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403963                 mov     [esp+1Ch+var_10], edx ; int
.text:00403967                 mov     edx, [esp+1Ch+arg_4]
.text:0040396B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040396F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403973                 mov     edx, [esp+1Ch+arg_0]
.text:00403977                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040397A                 call    sub_403780
.text:0040397F                 add     esp, 1Ch
.text:00403982                 retn
.text:00403982 sub_403950      endp
.text:00403982
.text:00403982 ; ---------------------------------------------------------------------------
.text:00403983                 align 10h
.text:00403990
.text:00403990 ; =============== S U B R O U T I N E =======================================
.text:00403990
.text:00403990
.text:00403990 sub_403990      proc near               ; CODE XREF: sub_401910+8F↑p
.text:00403990
.text:00403990 var_1C          = dword ptr -1Ch
.text:00403990 var_18          = dword ptr -18h
.text:00403990 var_14          = dword ptr -14h
.text:00403990 var_10          = dword ptr -10h
.text:00403990 var_C           = dword ptr -0Ch
.text:00403990 var_8           = dword ptr -8
.text:00403990 var_4           = dword ptr -4
.text:00403990 arg_0           = dword ptr  4
.text:00403990 arg_4           = dword ptr  8
.text:00403990 arg_8           = dword ptr  0Ch
.text:00403990 arg_C           = dword ptr  10h
.text:00403990 arg_10          = dword ptr  14h
.text:00403990
.text:00403990                 sub     esp, 1Ch
.text:00403993                 mov     edx, [esp+1Ch+arg_C]
.text:00403997                 mov     [esp+1Ch+var_4], 0
.text:0040399F                 mov     ecx, [esp+1Ch+arg_10]
.text:004039A3                 mov     [esp+1Ch+var_8], 0
.text:004039AB                 mov     [esp+1Ch+var_10], edx
.text:004039AF                 mov     edx, [esp+1Ch+arg_4]
.text:004039B3                 mov     [esp+1Ch+var_C], ecx
.text:004039B7                 mov     ecx, [esp+1Ch+arg_8]
.text:004039BB                 mov     [esp+1Ch+var_18], edx
.text:004039BF                 mov     edx, [esp+1Ch+arg_0]
.text:004039C3                 mov     [esp+1Ch+var_14], ecx
.text:004039C7                 mov     [esp+1Ch+var_1C], edx
.text:004039CA                 call    sub_403150
.text:004039CF                 add     esp, 1Ch
.text:004039D2                 retn
.text:004039D2 sub_403990      endp
.text:004039D2
.text:004039D2 ; ---------------------------------------------------------------------------
.text:004039D3                 align 10h
.text:004039E0                 sub     esp, 2Ch
.text:004039E3                 mov     edx, [esp+44h]
.text:004039E7                 mov     dword ptr [esp+18h], 0
.text:004039EF                 mov     ecx, [esp+40h]
.text:004039F3                 mov     dword ptr [esp+14h], 0
.text:004039FB                 mov     [esp+1Ch], edx
.text:004039FF                 mov     edx, [esp+3Ch]
.text:00403A03                 mov     [esp+10h], ecx
.text:00403A07                 mov     ecx, [esp+38h]
.text:00403A0B                 mov     [esp+0Ch], edx
.text:00403A0F                 mov     edx, [esp+34h]
.text:00403A13                 mov     [esp+8], ecx
.text:00403A17                 mov     [esp+4], edx
.text:00403A1B                 mov     edx, [esp+30h]
.text:00403A1F                 mov     [esp], edx
.text:00403A22                 call    loc_4025C0
.text:00403A27                 add     esp, 2Ch
.text:00403A2A                 retn
.text:00403A2A ; ---------------------------------------------------------------------------
.text:00403A2B                 align 10h
.text:00403A30                 sub     esp, 1Ch
.text:00403A33                 mov     edx, [esp+2Ch]
.text:00403A37                 mov     dword ptr [esp+18h], 0
.text:00403A3F                 mov     ecx, [esp+30h]
.text:00403A43                 mov     dword ptr [esp+14h], 1
.text:00403A4B                 mov     [esp+0Ch], edx
.text:00403A4F                 mov     edx, [esp+24h]
.text:00403A53                 mov     [esp+10h], ecx
.text:00403A57                 mov     ecx, [esp+28h]
.text:00403A5B                 mov     [esp+4], edx
.text:00403A5F                 mov     edx, [esp+20h]
.text:00403A63                 mov     [esp+8], ecx
.text:00403A67                 mov     [esp], edx
.text:00403A6A                 call    sub_403150
.text:00403A6F                 add     esp, 1Ch
.text:00403A72                 retn
.text:00403A72 ; ---------------------------------------------------------------------------
.text:00403A73                 align 10h
.text:00403A80                 sub     esp, 2Ch
.text:00403A83                 mov     edx, [esp+44h]
.text:00403A87                 mov     dword ptr [esp+18h], 0
.text:00403A8F                 mov     ecx, [esp+40h]
.text:00403A93                 mov     dword ptr [esp+14h], 1
.text:00403A9B                 mov     [esp+1Ch], edx
.text:00403A9F                 mov     edx, [esp+3Ch]
.text:00403AA3                 mov     [esp+10h], ecx
.text:00403AA7                 mov     ecx, [esp+38h]
.text:00403AAB                 mov     [esp+0Ch], edx
.text:00403AAF                 mov     edx, [esp+34h]
.text:00403AB3                 mov     [esp+8], ecx
.text:00403AB7                 mov     [esp+4], edx
.text:00403ABB                 mov     edx, [esp+30h]
.text:00403ABF                 mov     [esp], edx
.text:00403AC2                 call    loc_4025C0
.text:00403AC7                 add     esp, 2Ch
.text:00403ACA                 retn
.text:00403ACA ; ---------------------------------------------------------------------------
.text:00403ACB                 align 10h
.text:00403AD0                 mov     edx, [esp+4]
.text:00403AD4                 mov     ds:dword_40F050, edx
.text:00403ADA                 retn
.text:00403ADA ; ---------------------------------------------------------------------------
.text:00403ADB aWriteError     db 'write error',0      ; DATA XREF: sub_403B00:loc_403B49↓o
.text:00403AE7 ; const char aSS_1[]
.text:00403AE7 aSS_1           db '%s: %s',0           ; DATA XREF: sub_403B00+77↓o
.text:00403AEE ; const char aS_2[]
.text:00403AEE aS_2            db '%s',0               ; DATA XREF: sub_403B00+A0↓o
.text:00403AF1 ; ---------------------------------------------------------------------------
.text:00403AF1                 jmp     short sub_403B00
.text:00403AF1 ; ---------------------------------------------------------------------------
.text:00403AF3                 align 10h
.text:00403B00
.text:00403B00 ; =============== S U B R O U T I N E =======================================
.text:00403B00
.text:00403B00
.text:00403B00 ; void __cdecl sub_403B00()
.text:00403B00 sub_403B00      proc near               ; CODE XREF: .text:00403AF1↑j
.text:00403B00                                         ; DATA XREF: sub_401910+61↑o
.text:00403B00
.text:00403B00 Stream          = dword ptr -2Ch
.text:00403B00 ErrorMessage    = dword ptr -28h
.text:00403B00 var_24          = dword ptr -24h
.text:00403B00 var_20          = byte ptr -20h
.text:00403B00 var_1C          = dword ptr -1Ch
.text:00403B00 var_9           = byte ptr -9
.text:00403B00
.text:00403B00                 push    esi
.text:00403B01                 push    ebx
.text:00403B02                 sub     esp, 24h
.text:00403B05                 mov     edx, ds:_iob
.text:00403B0B                 mov     ecx, [edx+2Ch]
.text:00403B0E                 lea     esi, [edx+20h]
.text:00403B11                 shr     ecx, 5
.text:00403B14                 mov     bl, cl
.text:00403B16                 mov     ecx, [edx+20h]
.text:00403B19                 and     bl, 1
.text:00403B1C                 cmp     ecx, [esi+8]
.text:00403B1F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403B22                 setz    [esp+2Ch+var_9]
.text:00403B27                 call    fclose
.text:00403B2C                 test    eax, eax
.text:00403B2E                 setnz   al
.text:00403B31                 test    bl, bl
.text:00403B33                 jnz     loc_403BC3
.text:00403B39                 test    al, al
.text:00403B3B                 jz      short loc_403B90
.text:00403B3D
.text:00403B3D loc_403B3D:                             ; CODE XREF: sub_403B00+CD↓j
.text:00403B3D                 call    _errno
.text:00403B42                 mov     esi, [eax]
.text:00403B44
.text:00403B44 loc_403B44:                             ; CODE XREF: sub_403B00+C7↓j
.text:00403B44                 cmp     esi, 9
.text:00403B47                 jz      short loc_403BB6
.text:00403B49
.text:00403B49 loc_403B49:                             ; CODE XREF: sub_403B00+B8↓j
.text:00403B49                                         ; sub_403B00+C1↓j
.text:00403B49                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403B50                 call    ds:libintl_gettext
.text:00403B56                 mov     ebx, eax
.text:00403B58                 mov     eax, ds:dword_40F050
.text:00403B5D                 test    eax, eax
.text:00403B5F                 jz      short loc_403B96
.text:00403B61                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403B64                 call    sub_405080
.text:00403B69                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00403B6D                 mov     edx, Code
.text:00403B73                 mov     [esp+2Ch+var_1C], ebx
.text:00403B77                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:00403B7F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403B83                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403B86                 call    sub_405340
.text:00403B8B                 nop
.text:00403B8C                 lea     esi, [esi+0]
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: sub_403B00+3B↑j
.text:00403B90                                         ; sub_403B00+B4↓j ...
.text:00403B90                 add     esp, 24h
.text:00403B93                 pop     ebx
.text:00403B94                 pop     esi
.text:00403B95                 retn
.text:00403B96 ; ---------------------------------------------------------------------------
.text:00403B96
.text:00403B96 loc_403B96:                             ; CODE XREF: sub_403B00+5F↑j
.text:00403B96                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00403B9A                 mov     ebx, Code
.text:00403BA0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00403BA8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403BAC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00403BAF                 call    sub_405340
.text:00403BB4                 jmp     short loc_403B90
.text:00403BB6 ; ---------------------------------------------------------------------------
.text:00403BB6
.text:00403BB6 loc_403BB6:                             ; CODE XREF: sub_403B00+47↑j
.text:00403BB6                 test    bl, bl
.text:00403BB8                 jnz     short loc_403B49
.text:00403BBA                 cmp     [esp+2Ch+var_9], 0
.text:00403BBF                 jnz     short loc_403B90
.text:00403BC1                 jmp     short loc_403B49
.text:00403BC3 ; ---------------------------------------------------------------------------
.text:00403BC3
.text:00403BC3 loc_403BC3:                             ; CODE XREF: sub_403B00+33↑j
.text:00403BC3                 xor     esi, esi
.text:00403BC5                 test    al, al
.text:00403BC7                 jz      loc_403B44
.text:00403BCD                 jmp     loc_403B3D
.text:00403BCD sub_403B00      endp
.text:00403BCD
.text:00403BCD ; ---------------------------------------------------------------------------
.text:00403BD2                 align 10h
.text:00403BE0                 sub     esp, 0Ch
.text:00403BE3                 xor     edx, edx
.text:00403BE5                 mov     ecx, [esp+14h]
.text:00403BE9                 mov     [esp+8], ebx
.text:00403BED                 mov     eax, 0FFFFFFFFh
.text:00403BF2                 mov     ebx, [esp+10h]
.text:00403BF6                 div     ecx
.text:00403BF8                 cmp     eax, ebx
.text:00403BFA                 jb      short loc_403C19
.text:00403BFC                 mov     edx, ebx
.text:00403BFE                 imul    edx, ecx
.text:00403C01                 mov     [esp], edx
.text:00403C04                 call    malloc
.text:00403C09                 test    eax, eax
.text:00403C0B                 jz      short loc_403C15
.text:00403C0D
.text:00403C0D loc_403C0D:                             ; CODE XREF: .text:00403C17↓j
.text:00403C0D                 mov     ebx, [esp+8]
.text:00403C11                 add     esp, 0Ch
.text:00403C14                 retn
.text:00403C15 ; ---------------------------------------------------------------------------
.text:00403C15
.text:00403C15 loc_403C15:                             ; CODE XREF: .text:00403C0B↑j
.text:00403C15                 test    ebx, ebx
.text:00403C17                 jz      short loc_403C0D
.text:00403C19
.text:00403C19 loc_403C19:                             ; CODE XREF: .text:00403BFA↑j
.text:00403C19                 call    sub_403F10
.text:00403C19 ; ---------------------------------------------------------------------------
.text:00403C1E                 align 10h
.text:00403C20
.text:00403C20 ; =============== S U B R O U T I N E =======================================
.text:00403C20
.text:00403C20
.text:00403C20 ; int __cdecl sub_403C20(size_t)
.text:00403C20 sub_403C20      proc near               ; CODE XREF: sub_401DE0+2A4↑p
.text:00403C20                                         ; sub_401DE0+3EE↑p ...
.text:00403C20
.text:00403C20 Size            = dword ptr -0Ch
.text:00403C20 var_4           = dword ptr -4
.text:00403C20 arg_0           = dword ptr  4
.text:00403C20
.text:00403C20                 sub     esp, 0Ch
.text:00403C23                 mov     [esp+0Ch+var_4], ebx
.text:00403C27                 mov     ebx, [esp+0Ch+arg_0]
.text:00403C2B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403C2E                 call    malloc
.text:00403C33                 test    eax, eax
.text:00403C35                 jz      short loc_403C40
.text:00403C37
.text:00403C37 loc_403C37:                             ; CODE XREF: sub_403C20+22↓j
.text:00403C37                 mov     ebx, [esp+0Ch+var_4]
.text:00403C3B                 add     esp, 0Ch
.text:00403C3E                 retn
.text:00403C3E ; ---------------------------------------------------------------------------
.text:00403C3F                 align 10h
.text:00403C40
.text:00403C40 loc_403C40:                             ; CODE XREF: sub_403C20+15↑j
.text:00403C40                 test    ebx, ebx
.text:00403C42                 jz      short loc_403C37
.text:00403C44                 call    sub_403F10
.text:00403C44 sub_403C20      endp
.text:00403C44
.text:00403C44 ; ---------------------------------------------------------------------------
.text:00403C49                 align 10h
.text:00403C50                 sub     esp, 1Ch
.text:00403C53                 xor     edx, edx
.text:00403C55                 mov     eax, 0FFFFFFFFh
.text:00403C5A                 mov     [esp+14h], ebx
.text:00403C5E                 mov     ecx, [esp+20h]
.text:00403C62                 mov     ebx, [esp+28h]
.text:00403C66                 mov     [esp+18h], esi
.text:00403C6A                 mov     esi, [esp+24h]
.text:00403C6E                 div     ebx
.text:00403C70                 cmp     eax, esi
.text:00403C72                 jb      short loc_403CA4
.text:00403C74                 mov     [esp], ecx
.text:00403C77                 mov     edx, esi
.text:00403C79                 imul    edx, ebx
.text:00403C7C                 mov     [esp+4], edx
.text:00403C80                 call    realloc
.text:00403C85                 test    eax, eax
.text:00403C87                 mov     ecx, eax
.text:00403C89                 jz      short loc_403CA0
.text:00403C8B
.text:00403C8B loc_403C8B:                             ; CODE XREF: .text:00403CA2↓j
.text:00403C8B                 mov     ebx, [esp+14h]
.text:00403C8F                 mov     eax, ecx
.text:00403C91                 mov     esi, [esp+18h]
.text:00403C95                 add     esp, 1Ch
.text:00403C98                 retn
.text:00403C98 ; ---------------------------------------------------------------------------
.text:00403C99                 align 10h
.text:00403CA0
.text:00403CA0 loc_403CA0:                             ; CODE XREF: .text:00403C89↑j
.text:00403CA0                 test    esi, esi
.text:00403CA2                 jz      short loc_403C8B
.text:00403CA4
.text:00403CA4 loc_403CA4:                             ; CODE XREF: .text:00403C72↑j
.text:00403CA4                 call    sub_403F10
.text:00403CA4 ; ---------------------------------------------------------------------------
.text:00403CA9                 align 10h
.text:00403CB0
.text:00403CB0 ; =============== S U B R O U T I N E =======================================
.text:00403CB0
.text:00403CB0
.text:00403CB0 ; int __cdecl sub_403CB0(void *, size_t)
.text:00403CB0 sub_403CB0      proc near               ; CODE XREF: sub_401DE0+130↑p
.text:00403CB0                                         ; sub_401DE0+32A↑p ...
.text:00403CB0
.text:00403CB0 Block           = dword ptr -0Ch
.text:00403CB0 Size            = dword ptr -8
.text:00403CB0 var_4           = dword ptr -4
.text:00403CB0 arg_0           = dword ptr  4
.text:00403CB0 arg_4           = dword ptr  8
.text:00403CB0
.text:00403CB0                 sub     esp, 0Ch
.text:00403CB3                 mov     edx, [esp+0Ch+arg_0]
.text:00403CB7                 mov     [esp+0Ch+var_4], ebx
.text:00403CBB                 mov     ebx, [esp+0Ch+arg_4]
.text:00403CBF                 mov     [esp+0Ch+Block], edx ; Block
.text:00403CC2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403CC6                 call    realloc
.text:00403CCB                 test    eax, eax
.text:00403CCD                 jz      short loc_403CD7
.text:00403CCF
.text:00403CCF loc_403CCF:                             ; CODE XREF: sub_403CB0+29↓j
.text:00403CCF                 mov     ebx, [esp+0Ch+var_4]
.text:00403CD3                 add     esp, 0Ch
.text:00403CD6                 retn
.text:00403CD7 ; ---------------------------------------------------------------------------
.text:00403CD7
.text:00403CD7 loc_403CD7:                             ; CODE XREF: sub_403CB0+1D↑j
.text:00403CD7                 test    ebx, ebx
.text:00403CD9                 jz      short loc_403CCF
.text:00403CDB                 call    sub_403F10
.text:00403CDB sub_403CB0      endp
.text:00403CDB
.text:00403CE0 ; ---------------------------------------------------------------------------
.text:00403CE0                 jmp     sub_403E30
.text:00403CE0 ; ---------------------------------------------------------------------------
.text:00403CE5                 align 10h
.text:00403CF0                 sub     esp, 0Ch
.text:00403CF3                 mov     edx, [esp+14h]
.text:00403CF7                 mov     dword ptr [esp+8], 1
.text:00403CFF                 mov     [esp+4], edx
.text:00403D03                 mov     edx, [esp+10h]
.text:00403D07                 mov     [esp], edx
.text:00403D0A                 call    sub_403E30
.text:00403D0F                 add     esp, 0Ch
.text:00403D12                 retn
.text:00403D12 ; ---------------------------------------------------------------------------
.text:00403D13                 align 10h
.text:00403D20                 sub     esp, 1Ch
.text:00403D23                 mov     [esp+18h], ebx
.text:00403D27                 mov     ebx, [esp+20h]
.text:00403D2B                 mov     [esp], ebx
.text:00403D2E                 call    malloc
.text:00403D33                 test    eax, eax
.text:00403D35                 jz      short loc_403D53
.text:00403D37
.text:00403D37 loc_403D37:                             ; CODE XREF: .text:00403D55↓j
.text:00403D37                 mov     [esp+8], ebx
.text:00403D3B                 mov     dword ptr [esp+4], 0
.text:00403D43                 mov     [esp], eax
.text:00403D46                 call    memset
.text:00403D4B                 mov     ebx, [esp+18h]
.text:00403D4F                 add     esp, 1Ch
.text:00403D52                 retn
.text:00403D53 ; ---------------------------------------------------------------------------
.text:00403D53
.text:00403D53 loc_403D53:                             ; CODE XREF: .text:00403D35↑j
.text:00403D53                 test    ebx, ebx
.text:00403D55                 jz      short loc_403D37
.text:00403D57                 call    sub_403F10
.text:00403D57 ; ---------------------------------------------------------------------------
.text:00403D5C                 align 10h
.text:00403D60                 sub     esp, 0Ch
.text:00403D63                 xor     edx, edx
.text:00403D65                 mov     ecx, [esp+14h]
.text:00403D69                 mov     [esp+8], ebx
.text:00403D6D                 mov     eax, 0FFFFFFFFh
.text:00403D72                 mov     ebx, [esp+10h]
.text:00403D76                 div     ecx
.text:00403D78                 cmp     eax, ebx
.text:00403D7A                 jb      short loc_403D98
.text:00403D7C                 mov     [esp+4], ecx
.text:00403D80                 mov     [esp], ebx
.text:00403D83                 call    calloc
.text:00403D88                 test    eax, eax
.text:00403D8A                 jz      short loc_403D94
.text:00403D8C
.text:00403D8C loc_403D8C:                             ; CODE XREF: .text:00403D96↓j
.text:00403D8C                 mov     ebx, [esp+8]
.text:00403D90                 add     esp, 0Ch
.text:00403D93                 retn
.text:00403D94 ; ---------------------------------------------------------------------------
.text:00403D94
.text:00403D94 loc_403D94:                             ; CODE XREF: .text:00403D8A↑j
.text:00403D94                 test    ebx, ebx
.text:00403D96                 jz      short loc_403D8C
.text:00403D98
.text:00403D98 loc_403D98:                             ; CODE XREF: .text:00403D7A↑j
.text:00403D98                 call    sub_403F10
.text:00403D98 ; ---------------------------------------------------------------------------
.text:00403D9D                 align 10h
.text:00403DA0                 sub     esp, 1Ch
.text:00403DA3                 mov     [esp+18h], ebx
.text:00403DA7                 mov     ebx, [esp+24h]
.text:00403DAB                 mov     [esp], ebx
.text:00403DAE                 call    malloc
.text:00403DB3                 test    eax, eax
.text:00403DB5                 mov     edx, eax
.text:00403DB7                 jz      short loc_403DD5
.text:00403DB9
.text:00403DB9 loc_403DB9:                             ; CODE XREF: .text:00403DD7↓j
.text:00403DB9                 mov     [esp+8], ebx
.text:00403DBD                 mov     ecx, [esp+20h]
.text:00403DC1                 mov     [esp], edx
.text:00403DC4                 mov     [esp+4], ecx
.text:00403DC8                 call    memcpy
.text:00403DCD                 mov     ebx, [esp+18h]
.text:00403DD1                 add     esp, 1Ch
.text:00403DD4                 retn
.text:00403DD5 ; ---------------------------------------------------------------------------
.text:00403DD5
.text:00403DD5 loc_403DD5:                             ; CODE XREF: .text:00403DB7↑j
.text:00403DD5                 test    ebx, ebx
.text:00403DD7                 jz      short loc_403DB9
.text:00403DD9                 call    sub_403F10
.text:00403DD9 ; ---------------------------------------------------------------------------
.text:00403DDE                 align 10h
.text:00403DE0                 sub     esp, 1Ch
.text:00403DE3                 mov     [esp+18h], esi
.text:00403DE7                 mov     esi, [esp+20h]
.text:00403DEB                 mov     [esp+14h], ebx
.text:00403DEF                 mov     [esp], esi
.text:00403DF2                 call    strlen
.text:00403DF7                 lea     ebx, [eax+1]
.text:00403DFA                 mov     [esp], ebx
.text:00403DFD                 call    malloc
.text:00403E02                 test    eax, eax
.text:00403E04                 jz      short loc_403E22
.text:00403E06
.text:00403E06 loc_403E06:                             ; CODE XREF: .text:00403E24↓j
.text:00403E06                 mov     [esp+8], ebx
.text:00403E0A                 mov     [esp+4], esi
.text:00403E0E                 mov     [esp], eax
.text:00403E11                 call    memcpy
.text:00403E16                 mov     ebx, [esp+14h]
.text:00403E1A                 mov     esi, [esp+18h]
.text:00403E1E                 add     esp, 1Ch
.text:00403E21                 retn
.text:00403E22 ; ---------------------------------------------------------------------------
.text:00403E22
.text:00403E22 loc_403E22:                             ; CODE XREF: .text:00403E04↑j
.text:00403E22                 test    ebx, ebx
.text:00403E24                 jz      short loc_403E06
.text:00403E26                 call    sub_403F10
.text:00403E26 ; ---------------------------------------------------------------------------
.text:00403E2B                 align 10h
.text:00403E30
.text:00403E30 ; =============== S U B R O U T I N E =======================================
.text:00403E30
.text:00403E30
.text:00403E30 ; int __cdecl sub_403E30(void *, int, int)
.text:00403E30 sub_403E30      proc near               ; CODE XREF: .text:00403CE0↑j
.text:00403E30                                         ; .text:00403D0A↑p
.text:00403E30
.text:00403E30 Block           = dword ptr -1Ch
.text:00403E30 Size            = dword ptr -18h
.text:00403E30 var_C           = dword ptr -0Ch
.text:00403E30 var_8           = dword ptr -8
.text:00403E30 var_4           = dword ptr -4
.text:00403E30 arg_0           = dword ptr  4
.text:00403E30 arg_4           = dword ptr  8
.text:00403E30 arg_8           = dword ptr  0Ch
.text:00403E30
.text:00403E30                 sub     esp, 1Ch
.text:00403E33                 mov     [esp+1Ch+var_8], esi
.text:00403E37                 mov     esi, [esp+1Ch+arg_0]
.text:00403E3B                 mov     [esp+1Ch+var_4], edi
.text:00403E3F                 mov     edi, [esp+1Ch+arg_4]
.text:00403E43                 test    esi, esi
.text:00403E45                 mov     [esp+1Ch+var_C], ebx
.text:00403E49                 mov     ecx, [edi]
.text:00403E4B                 mov     ebx, [esp+1Ch+arg_8]
.text:00403E4F                 jz      short loc_403E90
.text:00403E51                 xor     edx, edx
.text:00403E53                 mov     eax, 7FFFFFFFh
.text:00403E58                 div     ebx
.text:00403E5A                 cmp     eax, ecx
.text:00403E5C                 jb      short loc_403E89
.text:00403E5E                 add     ecx, ecx
.text:00403E60
.text:00403E60 loc_403E60:                             ; CODE XREF: sub_403E30+62↓j
.text:00403E60                                         ; sub_403E30+71↓j ...
.text:00403E60                 mov     [edi], ecx
.text:00403E62                 imul    ebx, ecx
.text:00403E65                 mov     [esp+1Ch+Block], esi ; Block
.text:00403E68                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403E6C                 call    realloc
.text:00403E71                 test    eax, eax
.text:00403E73                 jz      short loc_403E85
.text:00403E75
.text:00403E75 loc_403E75:                             ; CODE XREF: sub_403E30+57↓j
.text:00403E75                 mov     ebx, [esp+1Ch+var_C]
.text:00403E79                 mov     esi, [esp+1Ch+var_8]
.text:00403E7D                 mov     edi, [esp+1Ch+var_4]
.text:00403E81                 add     esp, 1Ch
.text:00403E84                 retn
.text:00403E85 ; ---------------------------------------------------------------------------
.text:00403E85
.text:00403E85 loc_403E85:                             ; CODE XREF: sub_403E30+43↑j
.text:00403E85                 test    ebx, ebx
.text:00403E87                 jz      short loc_403E75
.text:00403E89
.text:00403E89 loc_403E89:                             ; CODE XREF: sub_403E30+2C↑j
.text:00403E89                 call    sub_403F10
.text:00403E89 ; ---------------------------------------------------------------------------
.text:00403E8E                 align 10h
.text:00403E90
.text:00403E90 loc_403E90:                             ; CODE XREF: sub_403E30+1F↑j
.text:00403E90                 test    ecx, ecx
.text:00403E92                 jnz     short loc_403E60
.text:00403E94                 xor     edx, edx
.text:00403E96                 mov     eax, 40h ; '@'
.text:00403E9B                 div     ebx
.text:00403E9D                 test    eax, eax
.text:00403E9F                 mov     ecx, eax
.text:00403EA1                 jnz     short loc_403E60
.text:00403EA3                 mov     ecx, 1
.text:00403EA8                 jmp     short loc_403E60
.text:00403EA8 sub_403E30      endp
.text:00403EA8
.text:00403EA8 ; ---------------------------------------------------------------------------
.text:00403EAA                 align 10h
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: sub_401DE0+3C↑p
.text:00403EB0                 sub     esp, 0Ch
.text:00403EB3                 mov     [esp+8], ebx
.text:00403EB7                 mov     dword ptr [esp+4], 0
.text:00403EBF                 mov     dword ptr [esp], 0
.text:00403EC6                 call    j__getcwd
.text:00403ECB                 test    eax, eax
.text:00403ECD                 mov     ebx, eax
.text:00403ECF                 jz      short loc_403EDB
.text:00403ED1
.text:00403ED1 loc_403ED1:                             ; CODE XREF: .text:00403EE3↓j
.text:00403ED1                 mov     eax, ebx
.text:00403ED3                 mov     ebx, [esp+8]
.text:00403ED7                 add     esp, 0Ch
.text:00403EDA                 retn
.text:00403EDB ; ---------------------------------------------------------------------------
.text:00403EDB
.text:00403EDB loc_403EDB:                             ; CODE XREF: .text:00403ECF↑j
.text:00403EDB                 call    _errno
.text:00403EE0                 cmp     dword ptr [eax], 0Ch
.text:00403EE3                 jnz     short loc_403ED1
.text:00403EE5                 call    sub_403F10
.text:00403EE5 ; ---------------------------------------------------------------------------
.text:00403EEA                 align 10h
.text:00403EF0
.text:00403EF0 loc_403EF0:                             ; DATA XREF: sub_403F10+3↓o
.text:00403EF0                 insd
.text:00403EF1                 db      65h
.text:00403EF1                 insd
.text:00403EF3                 outsd
.text:00403EF4                 jb      short loc_403F6F
.text:00403EF6                 and     [ebp+78h], ah
.text:00403EF9                 push    74737561h
.text:00403EFE
.text:00403EFE loc_403EFE:                             ; DATA XREF: sub_403F10+10↓o
.text:00403EFE                 db      65h
.text:00403EFE                 add     fs:0B68D0073h, ah
.text:00403EFE ; ---------------------------------------------------------------------------
.text:00403F06                 dw 0
.text:00403F08                 align 10h
.text:00403F10
.text:00403F10 ; =============== S U B R O U T I N E =======================================
.text:00403F10
.text:00403F10 ; Attributes: noreturn
.text:00403F10
.text:00403F10 sub_403F10      proc near               ; CODE XREF: sub_403390:loc_403429↑p
.text:00403F10                                         ; .text:loc_403C19↑p ...
.text:00403F10
.text:00403F10 Code            = dword ptr -1Ch
.text:00403F10 ErrorMessage    = dword ptr -18h
.text:00403F10 var_14          = dword ptr -14h
.text:00403F10 var_10          = byte ptr -10h
.text:00403F10
.text:00403F10                 sub     esp, 1Ch
.text:00403F13                 mov     [esp+1Ch+Code], offset loc_403EF0
.text:00403F1A                 call    ds:libintl_gettext
.text:00403F20                 mov     [esp+1Ch+var_14], (offset loc_403EFE+3) ; char *
.text:00403F28                 mov     edx, Code
.text:00403F2E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403F36                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00403F3A                 mov     [esp+1Ch+Code], edx ; Code
.text:00403F3D                 call    sub_405340
.text:00403F42                 call    abort
.text:00403F42 sub_403F10      endp
.text:00403F42
.text:00403F42 ; ---------------------------------------------------------------------------
.text:00403F47                 align 10h
.text:00403F50 aLiteral        db 'literal',0          ; DATA XREF: .text:00403F90↓o
.text:00403F58 aShell          db 'shell',0            ; DATA XREF: .text:00403F94↓o
.text:00403F5E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403F98↓o
.text:00403F6B aC              db 'c',0                ; DATA XREF: .text:00403F9C↓o
.text:00403F6D byte_403F6D     db 65h, 73h             ; DATA XREF: .text:00403FA0↓o
.text:00403F6F ; ---------------------------------------------------------------------------
.text:00403F6F
.text:00403F6F loc_403F6F:                             ; CODE XREF: .text:00403EF4↑j
.text:00403F6F                 arpl    [ecx+70h], sp
.text:00403F72                 add     gs:[edi+ebp*2+63h], ch
.text:00403F77                 popa
.text:00403F78                 insb
.text:00403F79                 add     gs:[ebx+6Ch], ah
.text:00403F7D                 outsd
.text:00403F7E                 arpl    [ecx+6Ch], sp
.text:00403F81                 add     gs:[ebp+0B6h], cl
.text:00403F88                 add     [ebp+27BCh], cl
.text:00403F88 ; ---------------------------------------------------------------------------
.text:00403F8E                 dw 0
.text:00403F90                 dd offset aLiteral      ; "literal"
.text:00403F94                 dd offset aShell        ; "shell"
.text:00403F98                 dd offset aShellAlways  ; "shell-always"
.text:00403F9C                 dd offset aC            ; "c"
.text:00403FA0                 dd offset byte_403F6D
.text:00403FA4                 dd 403F74h, 403F7Bh, 2 dup(0)
.text:00403FB4                 dd 1, 2, 3, 4, 5, 6
.text:00403FCC asc_403FCC:                             ; DATA XREF: sub_403FE0+7E↓o
.text:00403FCC                                         ; sub_403FE0+A39↓o ...
.text:00403FCC                 text "UTF-16LE", '"',27h,'`'
.text:00403FD2                 align 10h
.text:00403FE0
.text:00403FE0 ; =============== S U B R O U T I N E =======================================
.text:00403FE0
.text:00403FE0
.text:00403FE0 ; int __cdecl sub_403FE0(int, int, char *Str, int, int, int)
.text:00403FE0 sub_403FE0      proc near               ; CODE XREF: sub_403FE0+43A↓p
.text:00403FE0                                         ; .text:00404BA3↓p ...
.text:00403FE0
.text:00403FE0 C               = dword ptr -4Ch
.text:00403FE0 Type            = dword ptr -48h
.text:00403FE0 SizeInBytes     = dword ptr -44h
.text:00403FE0 State           = dword ptr -40h
.text:00403FE0 var_3C          = dword ptr -3Ch
.text:00403FE0 var_38          = dword ptr -38h
.text:00403FE0 var_34          = dword ptr -34h
.text:00403FE0 var_30          = dword ptr -30h
.text:00403FE0 var_29          = byte ptr -29h
.text:00403FE0 var_28          = dword ptr -28h
.text:00403FE0 var_22          = byte ptr -22h
.text:00403FE0 var_21          = byte ptr -21h
.text:00403FE0 var_20          = dword ptr -20h
.text:00403FE0 var_1C          = dword ptr -1Ch
.text:00403FE0 var_18          = mbstate_t ptr -18h
.text:00403FE0 arg_0           = dword ptr  4
.text:00403FE0 arg_4           = dword ptr  8
.text:00403FE0 Str             = dword ptr  0Ch
.text:00403FE0 arg_C           = dword ptr  10h
.text:00403FE0 arg_10          = dword ptr  14h
.text:00403FE0 arg_14          = dword ptr  18h
.text:00403FE0
.text:00403FE0                 push    ebp
.text:00403FE1                 push    edi
.text:00403FE2                 push    esi
.text:00403FE3                 push    ebx
.text:00403FE4                 sub     esp, 3Ch
.text:00403FE7                 mov     edx, ds:__mb_cur_max
.text:00403FED                 mov     [esp+4Ch+var_34], 0
.text:00403FF5                 mov     [esp+4Ch+var_1C], 0
.text:00403FFD                 cmp     dword ptr [edx], 1
.text:00404000                 mov     [esp+4Ch+var_20], 0
.text:00404008                 mov     [esp+4Ch+var_21], 0
.text:0040400D                 setz    [esp+4Ch+var_22]
.text:00404012                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00404017                 ja      short def_40401D ; jumptable 0040401D default case, cases 0,1
.text:00404019                 mov     edx, [esp+4Ch+arg_10]
.text:0040401D                 jmp     ds:jpt_40401D[edx*4] ; switch jump
.text:0040401D ; ---------------------------------------------------------------------------
.text:00404024 jpt_40401D      dd offset def_40401D    ; DATA XREF: sub_403FE0+3D↑r
.text:00404024                 dd offset def_40401D    ; jump table for switch statement
.text:00404024                 dd offset loc_404965
.text:00404024                 dd offset loc_404040
.text:00404024                 dd offset loc_40498B
.text:00404024                 dd offset loc_404995
.text:00404024                 dd offset loc_404995
.text:00404040 ; ---------------------------------------------------------------------------
.text:00404040
.text:00404040 loc_404040:                             ; CODE XREF: sub_403FE0+3D↑j
.text:00404040                                         ; DATA XREF: sub_403FE0:jpt_40401D↑o
.text:00404040                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040401D case 3
.text:00404044                 cmp     [esp+4Ch+var_34], eax
.text:00404048                 jnb     short loc_404051
.text:0040404A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040404E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404051
.text:00404051 loc_404051:                             ; CODE XREF: sub_403FE0+68↑j
.text:00404051                 mov     [esp+4Ch+var_34], 1
.text:00404059                 mov     [esp+4Ch+var_21], 1
.text:0040405E                 mov     [esp+4Ch+var_1C], offset asc_403FCC ; "\"'`"
.text:00404066
.text:00404066 loc_404066:                             ; CODE XREF: sub_403FE0+9A6↓j
.text:00404066                 mov     [esp+4Ch+var_20], 1
.text:0040406E
.text:0040406E def_40401D:                             ; CODE XREF: sub_403FE0+37↑j
.text:0040406E                                         ; sub_403FE0+3D↑j ...
.text:0040406E                 xor     ebp, ebp        ; jumptable 0040401D default case, cases 0,1
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_403FE0+3DB↓j
.text:00404070                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404075                 jz      loc_404957
.text:0040407B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040407F
.text:0040407F loc_40407F:                             ; CODE XREF: sub_403FE0+980↓j
.text:0040407F                 jz      loc_4048EE
.text:00404085                 cmp     [esp+4Ch+var_21], 0
.text:0040408A                 jz      short loc_4040D0
.text:0040408C                 mov     esi, [esp+4Ch+var_20]
.text:00404090                 test    esi, esi
.text:00404092                 jz      short loc_4040D0
.text:00404094                 mov     ecx, [esp+4Ch+var_20]
.text:00404098                 lea     edi, [ecx+ebp]
.text:0040409B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040409F                 ja      short loc_4040D0
.text:004040A1                 cld
.text:004040A2                 mov     ebx, [esp+4Ch+Str]
.text:004040A6                 mov     edi, [esp+4Ch+var_1C]
.text:004040AA                 add     ebx, ebp
.text:004040AC                 mov     esi, ebx
.text:004040AE                 cmp     ecx, ecx
.text:004040B0                 repe cmpsb
.text:004040B2                 jnz     short loc_4040D0
.text:004040B4                 mov     edx, [esp+4Ch+arg_4]
.text:004040B8                 cmp     [esp+4Ch+var_34], edx
.text:004040BC                 jnb     short loc_4040CA
.text:004040BE                 mov     ecx, [esp+4Ch+arg_0]
.text:004040C2                 mov     eax, [esp+4Ch+var_34]
.text:004040C6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004040CA
.text:004040CA loc_4040CA:                             ; CODE XREF: sub_403FE0+DC↑j
.text:004040CA                 inc     [esp+4Ch+var_34]
.text:004040CE                 mov     esi, esi
.text:004040D0
.text:004040D0 loc_4040D0:                             ; CODE XREF: sub_403FE0+AA↑j
.text:004040D0                                         ; sub_403FE0+B2↑j ...
.text:004040D0                 mov     edi, [esp+4Ch+Str]
.text:004040D4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004040D9                 movzx   eax, bl
.text:004040DC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004040DF                 ja      def_4040E5      ; jumptable 004040E5 default case, cases 1-6,14-31,64
.text:004040E5                 jmp     ds:jpt_4040E5[eax*4] ; switch jump
.text:004040E5 ; ---------------------------------------------------------------------------
.text:004040EC jpt_4040E5      dd offset loc_4042E8, offset def_4040E5, offset def_4040E5
.text:004040EC                                         ; DATA XREF: sub_403FE0+105↑r
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5 ; jump table for switch statement
.text:004040EC                 dd offset def_4040E5, offset loc_4043C0, offset loc_4043DE
.text:004040EC                 dd offset loc_4043E2, offset loc_404427, offset loc_40442B
.text:004040EC                 dd offset loc_40442F, offset loc_404433, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset def_4040E5
.text:004040EC                 dd offset def_4040E5, offset def_4040E5, offset loc_4048B8
.text:004040EC                 dd offset loc_4048B8, offset loc_4048B8, offset loc_4048DA
.text:004040EC                 dd offset loc_4048B8, offset def_4044E2, offset loc_4048B8
.text:004040EC                 dd offset loc_404437, offset loc_4048B8, offset loc_4048B8
.text:004040EC                 dd offset loc_4048B8, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset loc_4048B8
.text:004040EC                 dd offset loc_4048B8, offset loc_4048B8, offset loc_4048B8
.text:004040EC                 dd offset loc_40449C, offset def_4040E5, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset loc_4048B8, offset loc_4048B1
.text:004040EC                 dd offset def_4044E2, offset loc_4048B8, offset def_4044E2
.text:004040EC                 dd offset loc_4048B8, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset def_4044E2, offset def_4044E2, offset def_4044E2
.text:004040EC                 dd offset loc_4048C8, offset loc_4048B8, offset loc_4048C8
.text:004040EC                 dd offset loc_4048DA
.text:004042E8 ; ---------------------------------------------------------------------------
.text:004042E8
.text:004042E8 loc_4042E8:                             ; CODE XREF: sub_403FE0+105↑j
.text:004042E8                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004042E8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004040E5 case 0
.text:004042ED                 lea     eax, [ebp+1]
.text:004042F0                 jz      loc_4043A0
.text:004042F6                 mov     esi, [esp+4Ch+arg_4]
.text:004042FA                 cmp     [esp+4Ch+var_34], esi
.text:004042FE                 jnb     short loc_40430C
.text:00404300                 mov     eax, [esp+4Ch+arg_0]
.text:00404304                 mov     ebx, [esp+4Ch+var_34]
.text:00404308                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040430C
.text:0040430C loc_40430C:                             ; CODE XREF: sub_403FE0+31E↑j
.text:0040430C                 inc     [esp+4Ch+var_34]
.text:00404310                 mov     edx, [esp+4Ch+arg_4]
.text:00404314                 cmp     [esp+4Ch+var_34], edx
.text:00404318                 jnb     short loc_404326
.text:0040431A                 mov     edi, [esp+4Ch+arg_0]
.text:0040431E                 mov     ecx, [esp+4Ch+var_34]
.text:00404322                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404326
.text:00404326 loc_404326:                             ; CODE XREF: sub_403FE0+338↑j
.text:00404326                 inc     [esp+4Ch+var_34]
.text:0040432A                 mov     esi, [esp+4Ch+arg_4]
.text:0040432E                 cmp     [esp+4Ch+var_34], esi
.text:00404332                 jnb     short loc_404340
.text:00404334                 mov     ebx, [esp+4Ch+arg_0]
.text:00404338                 mov     eax, [esp+4Ch+var_34]
.text:0040433C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_403FE0+352↑j
.text:00404340                 inc     [esp+4Ch+var_34]
.text:00404344                 mov     bl, 30h ; '0'
.text:00404346                 lea     esi, [esi+0]
.text:00404349                 lea     edi, [edi+0]
.text:00404350
.text:00404350 def_4044E2:                             ; CODE XREF: sub_403FE0+105↑j
.text:00404350                                         ; sub_403FE0+463↓j ...
.text:00404350                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:00404350                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:00404355                 lea     eax, [ebp+1]
.text:00404358                 jz      short loc_4043A0
.text:0040435A                 mov     cl, bl
.text:0040435C                 mov     edi, [esp+4Ch+arg_14]
.text:00404360                 mov     esi, 1
.text:00404365                 shr     cl, 5
.text:00404368                 movzx   edx, cl
.text:0040436B                 mov     ecx, ebx
.text:0040436D                 and     ecx, 1Fh
.text:00404370                 shl     esi, cl
.text:00404372                 test    [edi+edx*4+4], esi
.text:00404376                 jz      short loc_404392
.text:00404378
.text:00404378 loc_404378:                             ; CODE XREF: sub_403FE0+3FC↓j
.text:00404378                 mov     edx, [esp+4Ch+arg_4]
.text:0040437C                 cmp     [esp+4Ch+var_34], edx
.text:00404380                 jnb     short loc_40438E
.text:00404382                 mov     edi, [esp+4Ch+arg_0]
.text:00404386                 mov     esi, [esp+4Ch+var_34]
.text:0040438A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040438E
.text:0040438E loc_40438E:                             ; CODE XREF: sub_403FE0+3A0↑j
.text:0040438E                 inc     [esp+4Ch+var_34]
.text:00404392
.text:00404392 loc_404392:                             ; CODE XREF: sub_403FE0+396↑j
.text:00404392                 lea     eax, [ebp+1]
.text:00404395                 lea     esi, [esi+0]
.text:00404399                 lea     edi, [edi+0]
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_403FE0+310↑j
.text:004043A0                                         ; sub_403FE0+378↑j ...
.text:004043A0                 mov     ebp, [esp+4Ch+arg_4]
.text:004043A4                 cmp     [esp+4Ch+var_34], ebp
.text:004043A8                 jnb     short loc_4043B5
.text:004043AA                 mov     edx, [esp+4Ch+arg_0]
.text:004043AE                 mov     ecx, [esp+4Ch+var_34]
.text:004043B2                 mov     [ecx+edx], bl
.text:004043B5
.text:004043B5 loc_4043B5:                             ; CODE XREF: sub_403FE0+3C8↑j
.text:004043B5                 inc     [esp+4Ch+var_34]
.text:004043B9                 mov     ebp, eax
.text:004043BB                 jmp     loc_404070
.text:004043C0 ; ---------------------------------------------------------------------------
.text:004043C0
.text:004043C0 loc_4043C0:                             ; CODE XREF: sub_403FE0+105↑j
.text:004043C0                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004043C0                 mov     dl, 61h ; 'a'   ; jumptable 004040E5 case 7
.text:004043C2                 lea     esi, [esi+0]
.text:004043C9                 lea     edi, [edi+0]
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_403FE0+400↓j
.text:004043D0                                         ; sub_403FE0+409↓j ...
.text:004043D0                 cmp     [esp+4Ch+var_21], 0
.text:004043D5                 lea     eax, [ebp+1]
.text:004043D8                 jz      short loc_4043A0
.text:004043DA                 mov     bl, dl
.text:004043DC                 jmp     short loc_404378
.text:004043DE ; ---------------------------------------------------------------------------
.text:004043DE
.text:004043DE loc_4043DE:                             ; CODE XREF: sub_403FE0+105↑j
.text:004043DE                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004043DE                 mov     dl, 62h ; 'b'   ; jumptable 004040E5 case 8
.text:004043E0                 jmp     short loc_4043D0
.text:004043E2 ; ---------------------------------------------------------------------------
.text:004043E2
.text:004043E2 loc_4043E2:                             ; CODE XREF: sub_403FE0+105↑j
.text:004043E2                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004043E2                 mov     dl, 74h ; 't'   ; jumptable 004040E5 case 9
.text:004043E4
.text:004043E4 loc_4043E4:                             ; CODE XREF: sub_403FE0+449↓j
.text:004043E4                                         ; sub_403FE0+455↓j ...
.text:004043E4                 cmp     [esp+4Ch+arg_10], 1
.text:004043E9                 jnz     short loc_4043D0
.text:004043EB
.text:004043EB loc_4043EB:                             ; CODE XREF: sub_403FE0+45C↓j
.text:004043EB                                         ; sub_403FE0+4C1↓j ...
.text:004043EB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004047B2 cases 91,92,94,96,124
.text:004043F3                 mov     eax, [esp+4Ch+arg_14]
.text:004043F7                 mov     edx, [esp+4Ch+arg_C]
.text:004043FB                 mov     ecx, [esp+4Ch+Str]
.text:004043FF                 mov     ebx, [esp+4Ch+arg_4]
.text:00404403                 mov     [esp+4Ch+var_38], eax ; int
.text:00404407                 mov     ebp, [esp+4Ch+arg_0]
.text:0040440B                 mov     [esp+4Ch+State], edx ; int
.text:0040440F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404413                 mov     [esp+4Ch+Type], ebx ; int
.text:00404417                 mov     [esp+4Ch+C], ebp ; int
.text:0040441A                 call    sub_403FE0
.text:0040441F
.text:0040441F loc_40441F:                             ; CODE XREF: sub_403FE0+972↓j
.text:0040441F                 add     esp, 3Ch
.text:00404422                 pop     ebx
.text:00404423                 pop     esi
.text:00404424                 pop     edi
.text:00404425                 pop     ebp
.text:00404426                 retn
.text:00404427 ; ---------------------------------------------------------------------------
.text:00404427
.text:00404427 loc_404427:                             ; CODE XREF: sub_403FE0+105↑j
.text:00404427                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:00404427                 mov     dl, 6Eh ; 'n'   ; jumptable 004040E5 case 10
.text:00404429                 jmp     short loc_4043E4
.text:0040442B ; ---------------------------------------------------------------------------
.text:0040442B
.text:0040442B loc_40442B:                             ; CODE XREF: sub_403FE0+105↑j
.text:0040442B                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:0040442B                 mov     dl, 76h ; 'v'   ; jumptable 004040E5 case 11
.text:0040442D                 jmp     short loc_4043D0
.text:0040442F ; ---------------------------------------------------------------------------
.text:0040442F
.text:0040442F loc_40442F:                             ; CODE XREF: sub_403FE0+105↑j
.text:0040442F                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:0040442F                 mov     dl, 66h ; 'f'   ; jumptable 004040E5 case 12
.text:00404431                 jmp     short loc_4043D0
.text:00404433 ; ---------------------------------------------------------------------------
.text:00404433
.text:00404433 loc_404433:                             ; CODE XREF: sub_403FE0+105↑j
.text:00404433                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:00404433                 mov     dl, 72h ; 'r'   ; jumptable 004040E5 case 13
.text:00404435                 jmp     short loc_4043E4
.text:00404437 ; ---------------------------------------------------------------------------
.text:00404437
.text:00404437 loc_404437:                             ; CODE XREF: sub_403FE0+105↑j
.text:00404437                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:00404437                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040E5 case 39
.text:0040443C                 jz      short loc_4043EB ; jumptable 004047B2 cases 91,92,94,96,124
.text:0040443E                 cmp     [esp+4Ch+arg_10], 2
.text:00404443                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:00404443                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:00404449                 mov     edx, [esp+4Ch+arg_4]
.text:0040444D                 cmp     [esp+4Ch+var_34], edx
.text:00404451                 jnb     short loc_40445F
.text:00404453                 mov     ecx, [esp+4Ch+arg_0]
.text:00404457                 mov     edi, [esp+4Ch+var_34]
.text:0040445B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040445F
.text:0040445F loc_40445F:                             ; CODE XREF: sub_403FE0+471↑j
.text:0040445F                 inc     [esp+4Ch+var_34]
.text:00404463                 mov     eax, [esp+4Ch+arg_4]
.text:00404467                 cmp     [esp+4Ch+var_34], eax
.text:0040446B                 jnb     short loc_404479
.text:0040446D                 mov     esi, [esp+4Ch+arg_0]
.text:00404471                 mov     edx, [esp+4Ch+var_34]
.text:00404475                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404479
.text:00404479 loc_404479:                             ; CODE XREF: sub_403FE0+48B↑j
.text:00404479                 inc     [esp+4Ch+var_34]
.text:0040447D                 mov     edi, [esp+4Ch+arg_4]
.text:00404481                 cmp     [esp+4Ch+var_34], edi
.text:00404485                 jnb     short loc_404493
.text:00404487                 mov     ecx, [esp+4Ch+arg_0]
.text:0040448B                 mov     eax, [esp+4Ch+var_34]
.text:0040448F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: sub_403FE0+4A5↑j
.text:00404493                                         ; sub_403FE0+5C4↓j ...
.text:00404493                 inc     [esp+4Ch+var_34]
.text:00404497                 jmp     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:00404497                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:0040449C ; ---------------------------------------------------------------------------
.text:0040449C
.text:0040449C loc_40449C:                             ; CODE XREF: sub_403FE0+105↑j
.text:0040449C                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:0040449C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040E5 case 63
.text:004044A1                 jz      loc_4043EB      ; jumptable 004047B2 cases 91,92,94,96,124
.text:004044A7                 cmp     [esp+4Ch+arg_10], 3
.text:004044AC                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004044AC                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004044B2                 lea     edx, [ebp+2]
.text:004044B5                 cmp     edx, [esp+4Ch+arg_C]
.text:004044B9                 jnb     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004044B9                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004044BF                 mov     esi, [esp+4Ch+Str]
.text:004044C3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004044C8                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004044C8                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004044CE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004044D3                 movsx   eax, cl
.text:004044D6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004044D9                 cmp     eax, 1Dh
.text:004044DC                 ja      def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004044DC                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004044E2                 jmp     ds:jpt_4044E2[eax*4] ; switch jump
.text:004044E2 ; ---------------------------------------------------------------------------
.text:004044E9                 align 4
.text:004044EC jpt_4044E2      dd offset loc_404564    ; DATA XREF: sub_403FE0+502↑r
.text:004044EC                 dd offset def_4044E2    ; jump table for switch statement
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset def_4044E2
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset loc_404564
.text:004044EC                 dd offset loc_404564
.text:00404564 ; ---------------------------------------------------------------------------
.text:00404564
.text:00404564 loc_404564:                             ; CODE XREF: sub_403FE0+502↑j
.text:00404564                                         ; DATA XREF: sub_403FE0:jpt_4044E2↑o
.text:00404564                 mov     ebp, edx        ; jumptable 004044E2 cases 33,39-41,45,47,60-62
.text:00404566                 mov     bl, cl
.text:00404568                 mov     edx, [esp+4Ch+arg_4]
.text:0040456C                 cmp     [esp+4Ch+var_34], edx
.text:00404570                 jnb     short loc_40457E
.text:00404572                 mov     ecx, [esp+4Ch+arg_0]
.text:00404576                 mov     edi, [esp+4Ch+var_34]
.text:0040457A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040457E
.text:0040457E loc_40457E:                             ; CODE XREF: sub_403FE0+590↑j
.text:0040457E                 inc     [esp+4Ch+var_34]
.text:00404582                 mov     eax, [esp+4Ch+arg_4]
.text:00404586                 cmp     [esp+4Ch+var_34], eax
.text:0040458A                 jnb     short loc_404598
.text:0040458C                 mov     edx, [esp+4Ch+arg_0]
.text:00404590                 mov     esi, [esp+4Ch+var_34]
.text:00404594                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404598
.text:00404598 loc_404598:                             ; CODE XREF: sub_403FE0+5AA↑j
.text:00404598                 inc     [esp+4Ch+var_34]
.text:0040459C                 mov     edi, [esp+4Ch+arg_4]
.text:004045A0                 cmp     [esp+4Ch+var_34], edi
.text:004045A4                 jnb     loc_404493
.text:004045AA                 mov     eax, [esp+4Ch+arg_0]
.text:004045AE                 mov     ecx, [esp+4Ch+var_34]
.text:004045B2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004045B6                 jmp     loc_404493
.text:004045B6 ; ---------------------------------------------------------------------------
.text:004045BB                 align 10h
.text:004045C0
.text:004045C0 def_4040E5:                             ; CODE XREF: sub_403FE0+FF↑j
.text:004045C0                                         ; sub_403FE0+105↑j
.text:004045C0                                         ; DATA XREF: ...
.text:004045C0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004040E5 default case, cases 1-6,14-31,64
.text:004045C5                 jz      loc_4046F0
.text:004045CB                 mov     [esp+4Ch+var_28], 1
.text:004045D3                 mov     esi, ds:__mb_cur_max
.text:004045D9                 movzx   edx, bl
.text:004045DC                 cmp     dword ptr [esi], 1
.text:004045DF                 jz      loc_4046D4
.text:004045E5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004045ED                 mov     [esp+4Ch+C], edx ; C
.text:004045F0                 call    _isctype
.text:004045F5
.text:004045F5 loc_4045F5:                             ; CODE XREF: sub_403FE0+705↓j
.text:004045F5                 test    eax, eax
.text:004045F7                 setnz   [esp+4Ch+var_29]
.text:004045FC
.text:004045FC loc_4045FC:                             ; CODE XREF: sub_403FE0+7A5↓j
.text:004045FC                 cmp     [esp+4Ch+var_21], 0
.text:00404601                 lea     eax, [ebp+1]
.text:00404604                 jz      loc_4043A0
.text:0040460A                 cmp     [esp+4Ch+var_29], 0
.text:0040460F                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:0040460F                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:00404615
.text:00404615 loc_404615:                             ; CODE XREF: sub_403FE0+7AB↓j
.text:00404615                 mov     eax, [esp+4Ch+var_28]
.text:00404619                 lea     edx, [eax+ebp]
.text:0040461C                 lea     esi, [esi+0]
.text:00404620
.text:00404620 loc_404620:                             ; CODE XREF: sub_403FE0+6EF↓j
.text:00404620                 cmp     [esp+4Ch+var_21], 0
.text:00404625                 jz      short loc_4046A0
.text:00404627                 cmp     [esp+4Ch+var_29], 0
.text:0040462C                 jnz     short loc_4046A0
.text:0040462E                 mov     edi, [esp+4Ch+arg_4]
.text:00404632                 cmp     [esp+4Ch+var_34], edi
.text:00404636                 jnb     short loc_404644
.text:00404638                 mov     esi, [esp+4Ch+arg_0]
.text:0040463C                 mov     eax, [esp+4Ch+var_34]
.text:00404640                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404644
.text:00404644 loc_404644:                             ; CODE XREF: sub_403FE0+656↑j
.text:00404644                 inc     [esp+4Ch+var_34]
.text:00404648                 mov     ecx, [esp+4Ch+arg_4]
.text:0040464C                 cmp     [esp+4Ch+var_34], ecx
.text:00404650                 jnb     short loc_404665
.text:00404652                 mov     cl, bl
.text:00404654                 mov     esi, [esp+4Ch+arg_0]
.text:00404658                 mov     edi, [esp+4Ch+var_34]
.text:0040465C                 shr     cl, 6
.text:0040465F                 add     cl, 30h ; '0'
.text:00404662                 mov     [edi+esi], cl
.text:00404665
.text:00404665 loc_404665:                             ; CODE XREF: sub_403FE0+670↑j
.text:00404665                 inc     [esp+4Ch+var_34]
.text:00404669                 mov     edi, [esp+4Ch+arg_4]
.text:0040466D                 cmp     [esp+4Ch+var_34], edi
.text:00404671                 jnb     short loc_404689
.text:00404673                 mov     cl, bl
.text:00404675                 mov     esi, [esp+4Ch+arg_0]
.text:00404679                 shr     cl, 3
.text:0040467C                 mov     edi, [esp+4Ch+var_34]
.text:00404680                 and     cl, 7
.text:00404683                 add     cl, 30h ; '0'
.text:00404686                 mov     [edi+esi], cl
.text:00404689
.text:00404689 loc_404689:                             ; CODE XREF: sub_403FE0+691↑j
.text:00404689                 inc     [esp+4Ch+var_34]
.text:0040468D                 and     bl, 7
.text:00404690                 add     bl, 30h ; '0'
.text:00404693                 lea     esi, [esi+0]
.text:00404699                 lea     edi, [edi+0]
.text:004046A0
.text:004046A0 loc_4046A0:                             ; CODE XREF: sub_403FE0+645↑j
.text:004046A0                                         ; sub_403FE0+64C↑j
.text:004046A0                 lea     eax, [ebp+1]
.text:004046A3                 cmp     edx, eax
.text:004046A5                 jbe     loc_4043A0
.text:004046AB                 mov     ebp, [esp+4Ch+arg_4]
.text:004046AF                 cmp     [esp+4Ch+var_34], ebp
.text:004046B3                 jnb     short loc_4046C0
.text:004046B5                 mov     ecx, [esp+4Ch+arg_0]
.text:004046B9                 mov     edi, [esp+4Ch+var_34]
.text:004046BD                 mov     [edi+ecx], bl
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_403FE0+6D3↑j
.text:004046C0                 inc     [esp+4Ch+var_34]
.text:004046C4                 mov     ebp, eax
.text:004046C6                 mov     eax, [esp+4Ch+Str]
.text:004046CA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004046CF                 jmp     loc_404620
.text:004046D4 ; ---------------------------------------------------------------------------
.text:004046D4
.text:004046D4 loc_4046D4:                             ; CODE XREF: sub_403FE0+5FF↑j
.text:004046D4                 mov     ecx, ds:_pctype
.text:004046DA                 mov     edi, [ecx]
.text:004046DC                 movzx   eax, word ptr [edi+edx*2]
.text:004046E0                 and     eax, 157h
.text:004046E5                 jmp     loc_4045F5
.text:004046E5 ; ---------------------------------------------------------------------------
.text:004046EA                 align 10h
.text:004046F0
.text:004046F0 loc_4046F0:                             ; CODE XREF: sub_403FE0+5E5↑j
.text:004046F0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004046F5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004046FD                 mov     [esp+4Ch+var_28], 0
.text:00404705                 mov     [esp+4Ch+var_29], 1
.text:0040470A                 jz      loc_40489C
.text:00404710
.text:00404710 loc_404710:                             ; CODE XREF: sub_403FE0+8CC↓j
.text:00404710                 mov     ecx, [esp+4Ch+arg_C]
.text:00404714                 lea     edx, [esp+4Ch+var_18]
.text:00404718                 mov     edi, [esp+4Ch+Str]
.text:0040471C                 mov     [esp+4Ch+State], edx ; State
.text:00404720                 lea     esi, [esp+4Ch+var_18._State]
.text:00404724                 sub     ecx, ebp
.text:00404726                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040472A                 add     edi, ebp
.text:0040472C                 mov     [esp+4Ch+var_30], edi
.text:00404730                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404734                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404737                 call    mbrtowc
.text:0040473C                 test    eax, eax
.text:0040473E                 mov     edi, eax
.text:00404740                 jz      short loc_404780
.text:00404742                 cmp     eax, 0FFFFFFFFh
.text:00404745                 jz      loc_404892
.text:0040474B                 cmp     eax, 0FFFFFFFEh
.text:0040474E                 jz      loc_404852
.text:00404754                 cmp     [esp+4Ch+arg_10], 1
.text:00404759                 jz      short loc_404790
.text:0040475B
.text:0040475B loc_40475B:                             ; CODE XREF: sub_403FE0+7B9↓j
.text:0040475B                                         ; sub_403FE0+86D↓j
.text:0040475B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404760                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404768                 mov     [esp+4Ch+C], ecx ; C
.text:0040476B                 call    iswctype
.text:00404770                 test    eax, eax
.text:00404772                 jnz     short loc_404779
.text:00404774                 mov     [esp+4Ch+var_29], 0
.text:00404779
.text:00404779 loc_404779:                             ; CODE XREF: sub_403FE0+792↑j
.text:00404779                 mov     [esp+4Ch+var_28], edi
.text:0040477D                 lea     esi, [esi+0]
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_403FE0+760↑j
.text:00404780                                         ; sub_403FE0+87B↓j ...
.text:00404780                 cmp     [esp+4Ch+var_28], 1
.text:00404785                 jbe     loc_4045FC
.text:0040478B                 jmp     loc_404615
.text:00404790 ; ---------------------------------------------------------------------------
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: sub_403FE0+779↑j
.text:00404790                 cmp     [esp+4Ch+arg_10], eax
.text:00404794                 mov     edx, 1
.text:00404799                 jnb     short loc_40475B
.text:0040479B
.text:0040479B loc_40479B:                             ; CODE XREF: sub_403FE0+867↓j
.text:0040479B                 mov     ecx, [esp+4Ch+Str]
.text:0040479F                 lea     esi, [edx+ebp]
.text:004047A2                 movsx   eax, byte ptr [esi+ecx]
.text:004047A6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004047A9                 cmp     eax, 21h
.text:004047AC                 ja      def_4047B2      ; jumptable 004047B2 default case, cases 93,95,97-123
.text:004047B2                 jmp     ds:jpt_4047B2[eax*4] ; switch jump
.text:004047B2 ; ---------------------------------------------------------------------------
.text:004047B9                 align 4
.text:004047BC jpt_4047B2      dd offset loc_4043EB    ; DATA XREF: sub_403FE0+7D2↑r
.text:004047BC                 dd offset loc_4043EB    ; jump table for switch statement
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset loc_4043EB
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset loc_4043EB
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset def_4047B2
.text:004047BC                 dd offset loc_4043EB
.text:00404844 ; ---------------------------------------------------------------------------
.text:00404844
.text:00404844 def_4047B2:                             ; CODE XREF: sub_403FE0+7CC↑j
.text:00404844                                         ; sub_403FE0+7D2↑j
.text:00404844                                         ; DATA XREF: ...
.text:00404844                 inc     edx             ; jumptable 004047B2 default case, cases 93,95,97-123
.text:00404845                 cmp     edx, edi
.text:00404847                 jb      loc_40479B
.text:0040484D                 jmp     loc_40475B
.text:00404852 ; ---------------------------------------------------------------------------
.text:00404852
.text:00404852 loc_404852:                             ; CODE XREF: sub_403FE0+76E↑j
.text:00404852                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404856                 mov     [esp+4Ch+var_29], 0
.text:0040485B                 jnb     loc_404780
.text:00404861                 mov     eax, [esp+4Ch+var_30]
.text:00404865                 cmp     byte ptr [eax], 0
.text:00404868                 jz      loc_404780
.text:0040486E
.text:0040486E loc_40486E:                             ; CODE XREF: sub_403FE0+8AB↓j
.text:0040486E                 inc     [esp+4Ch+var_28]
.text:00404872                 mov     esi, [esp+4Ch+var_28]
.text:00404876                 lea     eax, [esi+ebp]
.text:00404879                 cmp     eax, [esp+4Ch+arg_C]
.text:0040487D                 jnb     loc_404780
.text:00404883                 mov     edi, [esp+4Ch+Str]
.text:00404887                 cmp     byte ptr [eax+edi], 0
.text:0040488B                 jnz     short loc_40486E
.text:0040488D                 jmp     loc_404780
.text:00404892 ; ---------------------------------------------------------------------------
.text:00404892
.text:00404892 loc_404892:                             ; CODE XREF: sub_403FE0+765↑j
.text:00404892                 mov     [esp+4Ch+var_29], 0
.text:00404897                 jmp     loc_404780
.text:0040489C ; ---------------------------------------------------------------------------
.text:0040489C
.text:0040489C loc_40489C:                             ; CODE XREF: sub_403FE0+72A↑j
.text:0040489C                 mov     edx, [esp+4Ch+Str]
.text:004048A0                 mov     [esp+4Ch+C], edx ; Str
.text:004048A3                 call    strlen
.text:004048A8                 mov     [esp+4Ch+arg_C], eax
.text:004048AC                 jmp     loc_404710
.text:004048B1 ; ---------------------------------------------------------------------------
.text:004048B1
.text:004048B1 loc_4048B1:                             ; CODE XREF: sub_403FE0+105↑j
.text:004048B1                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004048B1                 mov     dl, bl          ; jumptable 004040E5 case 92
.text:004048B3                 jmp     loc_4043E4
.text:004048B8 ; ---------------------------------------------------------------------------
.text:004048B8
.text:004048B8 loc_4048B8:                             ; CODE XREF: sub_403FE0+105↑j
.text:004048B8                                         ; sub_403FE0+902↓j
.text:004048B8                                         ; DATA XREF: ...
.text:004048B8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004048BD                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004048BD                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004048C3                 jmp     loc_4043EB      ; jumptable 004047B2 cases 91,92,94,96,124
.text:004048C8 ; ---------------------------------------------------------------------------
.text:004048C8
.text:004048C8 loc_4048C8:                             ; CODE XREF: sub_403FE0+105↑j
.text:004048C8                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004048C8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004040E5 cases 123,125
.text:004048CD                 jz      short loc_4048E4
.text:004048CF                 cmp     [esp+4Ch+arg_C], 1
.text:004048D4
.text:004048D4 loc_4048D4:                             ; CODE XREF: sub_403FE0+90C↓j
.text:004048D4                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004048D4                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004048DA
.text:004048DA loc_4048DA:                             ; CODE XREF: sub_403FE0+105↑j
.text:004048DA                                         ; DATA XREF: sub_403FE0:jpt_4040E5↑o
.text:004048DA                 test    ebp, ebp        ; jumptable 004040E5 cases 35,126
.text:004048DC                 jnz     def_4044E2      ; jumptable 004040E5 cases 37,43-58,65-90,93,95,97-122
.text:004048DC                                         ; jumptable 004044E2 default case, cases 34-38,42-44,46,48-59
.text:004048E2                 jmp     short loc_4048B8 ; jumptable 004040E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004048E4 ; ---------------------------------------------------------------------------
.text:004048E4
.text:004048E4 loc_4048E4:                             ; CODE XREF: sub_403FE0+8ED↑j
.text:004048E4                 mov     esi, [esp+4Ch+Str]
.text:004048E8                 cmp     byte ptr [esi+1], 0
.text:004048EC                 jmp     short loc_4048D4
.text:004048EE ; ---------------------------------------------------------------------------
.text:004048EE
.text:004048EE loc_4048EE:                             ; CODE XREF: sub_403FE0:loc_40407F↑j
.text:004048EE                 test    ebp, ebp
.text:004048F0                 jnz     short loc_4048FD
.text:004048F2                 cmp     [esp+4Ch+arg_10], 1
.text:004048F7                 jz      loc_4043EB      ; jumptable 004047B2 cases 91,92,94,96,124
.text:004048FD
.text:004048FD loc_4048FD:                             ; CODE XREF: sub_403FE0+910↑j
.text:004048FD                 mov     esi, [esp+4Ch+var_1C]
.text:00404901                 test    esi, esi
.text:00404903                 jz      short loc_404938
.text:00404905                 mov     edi, [esp+4Ch+var_1C]
.text:00404909                 movzx   eax, byte ptr [edi]
.text:0040490C                 test    al, al
.text:0040490E                 jz      short loc_404938
.text:00404910
.text:00404910 loc_404910:                             ; CODE XREF: sub_403FE0+956↓j
.text:00404910                 mov     ebp, [esp+4Ch+arg_4]
.text:00404914                 cmp     [esp+4Ch+var_34], ebp
.text:00404918                 jnb     short loc_404925
.text:0040491A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040491E                 mov     ebx, [esp+4Ch+var_34]
.text:00404922                 mov     [ebx+ecx], al
.text:00404925
.text:00404925 loc_404925:                             ; CODE XREF: sub_403FE0+938↑j
.text:00404925                 inc     [esp+4Ch+var_1C]
.text:00404929                 inc     [esp+4Ch+var_34]
.text:0040492D                 mov     edx, [esp+4Ch+var_1C]
.text:00404931                 movzx   eax, byte ptr [edx]
.text:00404934                 test    al, al
.text:00404936                 jnz     short loc_404910
.text:00404938
.text:00404938 loc_404938:                             ; CODE XREF: sub_403FE0+923↑j
.text:00404938                                         ; sub_403FE0+92E↑j
.text:00404938                 mov     eax, [esp+4Ch+arg_4]
.text:0040493C                 cmp     [esp+4Ch+var_34], eax
.text:00404940                 jnb     short loc_40494E
.text:00404942                 mov     edi, [esp+4Ch+arg_0]
.text:00404946                 mov     esi, [esp+4Ch+var_34]
.text:0040494A                 mov     byte ptr [esi+edi], 0
.text:0040494E
.text:0040494E loc_40494E:                             ; CODE XREF: sub_403FE0+960↑j
.text:0040494E                 mov     eax, [esp+4Ch+var_34]
.text:00404952                 jmp     loc_40441F
.text:00404957 ; ---------------------------------------------------------------------------
.text:00404957
.text:00404957 loc_404957:                             ; CODE XREF: sub_403FE0+95↑j
.text:00404957                 mov     ebx, [esp+4Ch+Str]
.text:0040495B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404960                 jmp     loc_40407F
.text:00404965 ; ---------------------------------------------------------------------------
.text:00404965
.text:00404965 loc_404965:                             ; CODE XREF: sub_403FE0+3D↑j
.text:00404965                                         ; DATA XREF: sub_403FE0:jpt_40401D↑o
.text:00404965                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040401D case 2
.text:00404969                 cmp     [esp+4Ch+var_34], edx
.text:0040496D                 jnb     short loc_404976
.text:0040496F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404973                 mov     byte ptr [ecx], 27h ; '''
.text:00404976
.text:00404976 loc_404976:                             ; CODE XREF: sub_403FE0+98D↑j
.text:00404976                 mov     [esp+4Ch+var_34], 1
.text:0040497E                 mov     [esp+4Ch+var_1C], 403FCEh
.text:00404986                 jmp     loc_404066
.text:0040498B ; ---------------------------------------------------------------------------
.text:0040498B
.text:0040498B loc_40498B:                             ; CODE XREF: sub_403FE0+3D↑j
.text:0040498B                                         ; DATA XREF: sub_403FE0:jpt_40401D↑o
.text:0040498B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040401D case 4
.text:00404990                 jmp     def_40401D      ; jumptable 0040401D default case, cases 0,1
.text:00404995 ; ---------------------------------------------------------------------------
.text:00404995
.text:00404995 loc_404995:                             ; CODE XREF: sub_403FE0+3D↑j
.text:00404995                                         ; DATA XREF: sub_403FE0:jpt_40401D↑o
.text:00404995                 mov     [esp+4Ch+C], 403FD0h ; jumptable 0040401D cases 5,6
.text:0040499C                 call    ds:libintl_gettext
.text:004049A2                 cmp     eax, 403FD0h
.text:004049A7                 mov     edi, eax
.text:004049A9                 jz      short loc_404A20
.text:004049AB
.text:004049AB loc_4049AB:                             ; CODE XREF: sub_403FE0+A45↓j
.text:004049AB                                         ; sub_403FE0+A4C↓j
.text:004049AB                 mov     [esp+4Ch+C], 403FCEh
.text:004049B2                 call    ds:libintl_gettext
.text:004049B8                 cmp     eax, 403FCEh
.text:004049BD                 mov     edx, eax
.text:004049BF                 jz      short loc_404A12
.text:004049C1
.text:004049C1 loc_4049C1:                             ; CODE XREF: sub_403FE0+A37↓j
.text:004049C1                                         ; sub_403FE0+A3E↓j
.text:004049C1                 mov     [esp+4Ch+var_1C], edi
.text:004049C5                 cmp     byte ptr [edi], 0
.text:004049C8                 jz      short loc_4049F8
.text:004049CA
.text:004049CA loc_4049CA:                             ; CODE XREF: sub_403FE0+A16↓j
.text:004049CA                 mov     ecx, [esp+4Ch+arg_4]
.text:004049CE                 cmp     [esp+4Ch+var_34], ecx
.text:004049D2                 jnb     short loc_4049E7
.text:004049D4                 mov     ebp, [esp+4Ch+var_1C]
.text:004049D8                 mov     edi, [esp+4Ch+arg_0]
.text:004049DC                 mov     esi, [esp+4Ch+var_34]
.text:004049E0                 movzx   ebx, byte ptr [ebp+0]
.text:004049E4                 mov     [esi+edi], bl
.text:004049E7
.text:004049E7 loc_4049E7:                             ; CODE XREF: sub_403FE0+9F2↑j
.text:004049E7                 inc     [esp+4Ch+var_1C]
.text:004049EB                 inc     [esp+4Ch+var_34]
.text:004049EF                 mov     eax, [esp+4Ch+var_1C]
.text:004049F3                 cmp     byte ptr [eax], 0
.text:004049F6                 jnz     short loc_4049CA
.text:004049F8
.text:004049F8 loc_4049F8:                             ; CODE XREF: sub_403FE0+9E8↑j
.text:004049F8                 mov     [esp+4Ch+var_21], 1
.text:004049FD                 mov     [esp+4Ch+var_1C], edx
.text:00404A01                 mov     [esp+4Ch+C], edx ; Str
.text:00404A04                 call    strlen
.text:00404A09                 mov     [esp+4Ch+var_20], eax
.text:00404A0D                 jmp     def_40401D      ; jumptable 0040401D default case, cases 0,1
.text:00404A12 ; ---------------------------------------------------------------------------
.text:00404A12
.text:00404A12 loc_404A12:                             ; CODE XREF: sub_403FE0+9DF↑j
.text:00404A12                 cmp     [esp+4Ch+arg_10], 6
.text:00404A17                 jnz     short loc_4049C1
.text:00404A19                 mov     edx, offset asc_403FCC ; "\"'`"
.text:00404A1E                 jmp     short loc_4049C1
.text:00404A20 ; ---------------------------------------------------------------------------
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_403FE0+9C9↑j
.text:00404A20                 cmp     [esp+4Ch+arg_10], 6
.text:00404A25                 jnz     short loc_4049AB
.text:00404A27                 mov     edi, offset asc_403FCC ; "\"'`"
.text:00404A2C                 jmp     loc_4049AB
.text:00404A2C sub_403FE0      endp
.text:00404A2C
.text:00404A31 ; ---------------------------------------------------------------------------
.text:00404A31                 jmp     short loc_404A40
.text:00404A31 ; ---------------------------------------------------------------------------
.text:00404A33                 align 10h
.text:00404A40
.text:00404A40 loc_404A40:                             ; CODE XREF: .text:00404A31↑j
.text:00404A40                 sub     esp, 0Ch
.text:00404A43                 mov     [esp+4], ebx
.text:00404A47                 mov     [esp+8], esi
.text:00404A4B                 call    _errno
.text:00404A50                 mov     esi, [eax]
.text:00404A52                 mov     dword ptr [esp], 24h ; '$'
.text:00404A59                 call    sub_403C20
.text:00404A5E                 mov     edx, [esp+10h]
.text:00404A62                 mov     ebx, eax
.text:00404A64                 test    edx, edx
.text:00404A66                 jz      short loc_404AB1
.text:00404A68
.text:00404A68 loc_404A68:                             ; CODE XREF: .text:00404AB6↓j
.text:00404A68                 mov     ecx, [edx]
.text:00404A6A                 mov     [ebx], ecx
.text:00404A6C                 mov     ecx, [edx+4]
.text:00404A6F                 mov     [ebx+4], ecx
.text:00404A72                 mov     ecx, [edx+8]
.text:00404A75                 mov     [ebx+8], ecx
.text:00404A78                 mov     ecx, [edx+0Ch]
.text:00404A7B                 mov     [ebx+0Ch], ecx
.text:00404A7E                 mov     ecx, [edx+10h]
.text:00404A81                 mov     [ebx+10h], ecx
.text:00404A84                 mov     ecx, [edx+14h]
.text:00404A87                 mov     [ebx+14h], ecx
.text:00404A8A                 mov     ecx, [edx+18h]
.text:00404A8D                 mov     [ebx+18h], ecx
.text:00404A90                 mov     ecx, [edx+1Ch]
.text:00404A93                 mov     [ebx+1Ch], ecx
.text:00404A96                 mov     ecx, [edx+20h]
.text:00404A99                 mov     [ebx+20h], ecx
.text:00404A9C                 call    _errno
.text:00404AA1                 mov     [eax], esi
.text:00404AA3                 mov     esi, [esp+8]
.text:00404AA7                 mov     eax, ebx
.text:00404AA9                 mov     ebx, [esp+4]
.text:00404AAD                 add     esp, 0Ch
.text:00404AB0                 retn
.text:00404AB1 ; ---------------------------------------------------------------------------
.text:00404AB1
.text:00404AB1 loc_404AB1:                             ; CODE XREF: .text:00404A66↑j
.text:00404AB1                 mov     edx, offset dword_40F160
.text:00404AB6                 jmp     short loc_404A68
.text:00404AB6 ; ---------------------------------------------------------------------------
.text:00404AB8                 align 10h
.text:00404AC0                 mov     eax, [esp+4]
.text:00404AC4                 test    eax, eax
.text:00404AC6                 jz      short loc_404AD0
.text:00404AC8
.text:00404AC8 loc_404AC8:                             ; CODE XREF: .text:00404AD5↓j
.text:00404AC8                 mov     eax, [eax]
.text:00404ACA                 retn
.text:00404ACA ; ---------------------------------------------------------------------------
.text:00404ACB                 align 10h
.text:00404AD0
.text:00404AD0 loc_404AD0:                             ; CODE XREF: .text:00404AC6↑j
.text:00404AD0                 mov     eax, offset dword_40F160
.text:00404AD5                 jmp     short loc_404AC8
.text:00404AD5 ; ---------------------------------------------------------------------------
.text:00404AD7                 align 10h
.text:00404AE0                 mov     edx, [esp+4]
.text:00404AE4                 test    edx, edx
.text:00404AE6                 jz      short loc_404AF0
.text:00404AE8
.text:00404AE8 loc_404AE8:                             ; CODE XREF: .text:00404AF5↓j
.text:00404AE8                 mov     ecx, [esp+8]
.text:00404AEC                 mov     [edx], ecx
.text:00404AEE                 retn
.text:00404AEE ; ---------------------------------------------------------------------------
.text:00404AEF                 align 10h
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: .text:00404AE6↑j
.text:00404AF0                 mov     edx, offset dword_40F160
.text:00404AF5                 jmp     short loc_404AE8
.text:00404AF5 ; ---------------------------------------------------------------------------
.text:00404AF7                 align 10h
.text:00404B00                 sub     esp, 8
.text:00404B03                 mov     eax, [esp+0Ch]
.text:00404B07                 movzx   ecx, byte ptr [esp+10h]
.text:00404B0C                 mov     [esp], ebx
.text:00404B0F                 mov     ebx, [esp+14h]
.text:00404B13                 mov     [esp+4], esi
.text:00404B17                 mov     dl, cl
.text:00404B19                 shr     dl, 5
.text:00404B1C                 movzx   edx, dl
.text:00404B1F                 shl     edx, 2
.text:00404B22                 test    eax, eax
.text:00404B24                 lea     esi, [edx+eax+4]
.text:00404B28                 jz      short loc_404B50
.text:00404B2A
.text:00404B2A loc_404B2A:                             ; CODE XREF: .text:00404B56↓j
.text:00404B2A                 mov     edx, [esi]
.text:00404B2C                 and     ecx, 1Fh
.text:00404B2F                 and     ebx, 1
.text:00404B32                 mov     eax, edx
.text:00404B34                 shr     eax, cl
.text:00404B36                 and     eax, 1
.text:00404B39                 xor     ebx, eax
.text:00404B3B                 shl     ebx, cl
.text:00404B3D                 xor     edx, ebx
.text:00404B3F                 mov     [esi], edx
.text:00404B41                 mov     ebx, [esp]
.text:00404B44                 mov     esi, [esp+4]
.text:00404B48                 add     esp, 8
.text:00404B4B                 retn
.text:00404B4B ; ---------------------------------------------------------------------------
.text:00404B4C                 align 10h
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: .text:00404B28↑j
.text:00404B50                 lea     esi, dword_40F164[edx]
.text:00404B56                 jmp     short loc_404B2A
.text:00404B56 ; ---------------------------------------------------------------------------
.text:00404B58                 align 10h
.text:00404B60                 sub     esp, 2Ch
.text:00404B63                 mov     [esp+24h], ebx
.text:00404B67                 mov     ebx, [esp+40h]
.text:00404B6B                 mov     [esp+28h], esi
.text:00404B6F                 test    ebx, ebx
.text:00404B71                 jz      short loc_404BC0
.text:00404B73
.text:00404B73 loc_404B73:                             ; CODE XREF: .text:00404BC5↓j
.text:00404B73                 call    _errno
.text:00404B78                 mov     esi, [eax]
.text:00404B7A                 mov     [esp+14h], ebx
.text:00404B7E                 mov     edx, [ebx]
.text:00404B80                 mov     ecx, [esp+38h]
.text:00404B84                 mov     ebx, [esp+3Ch]
.text:00404B88                 mov     [esp+10h], edx
.text:00404B8C                 mov     edx, [esp+34h]
.text:00404B90                 mov     [esp+0Ch], ebx
.text:00404B94                 mov     [esp+8], ecx
.text:00404B98                 mov     [esp+4], edx
.text:00404B9C                 mov     edx, [esp+30h]
.text:00404BA0                 mov     [esp], edx
.text:00404BA3                 call    sub_403FE0
.text:00404BA8                 mov     ebx, eax
.text:00404BAA                 call    _errno
.text:00404BAF                 mov     [eax], esi
.text:00404BB1                 mov     esi, [esp+28h]
.text:00404BB5                 mov     eax, ebx
.text:00404BB7                 mov     ebx, [esp+24h]
.text:00404BBB                 add     esp, 2Ch
.text:00404BBE                 retn
.text:00404BBE ; ---------------------------------------------------------------------------
.text:00404BBF                 align 10h
.text:00404BC0
.text:00404BC0 loc_404BC0:                             ; CODE XREF: .text:00404B71↑j
.text:00404BC0                 mov     ebx, offset dword_40F160
.text:00404BC5                 jmp     short loc_404B73
.text:00404BC5 ; ---------------------------------------------------------------------------
.text:00404BC7                 align 10h
.text:00404BD0                 push    ebp
.text:00404BD1                 push    edi
.text:00404BD2                 push    esi
.text:00404BD3                 push    ebx
.text:00404BD4                 sub     esp, 2Ch
.text:00404BD7                 mov     ebp, [esp+48h]
.text:00404BDB                 call    _errno
.text:00404BE0                 mov     edx, [eax]
.text:00404BE2                 test    ebp, ebp
.text:00404BE4                 mov     ebx, ebp
.text:00404BE6                 mov     [esp+28h], edx
.text:00404BEA                 jz      loc_404CA0
.text:00404BF0
.text:00404BF0 loc_404BF0:                             ; CODE XREF: .text:00404CA5↓j
.text:00404BF0                 call    _errno
.text:00404BF5                 mov     edi, [eax]
.text:00404BF7                 mov     esi, ebp
.text:00404BF9                 mov     [esp+14h], ebx
.text:00404BFD                 mov     ecx, [ebx]
.text:00404BFF                 mov     dword ptr [esp], 0
.text:00404C06                 mov     edx, [esp+44h]
.text:00404C0A                 mov     dword ptr [esp+4], 0
.text:00404C12                 mov     eax, [esp+40h]
.text:00404C16                 mov     [esp+10h], ecx
.text:00404C1A                 mov     [esp+0Ch], edx
.text:00404C1E                 mov     [esp+8], eax
.text:00404C22                 call    sub_403FE0
.text:00404C27                 mov     ebx, eax
.text:00404C29                 call    _errno
.text:00404C2E                 mov     [eax], edi
.text:00404C30                 lea     edi, [ebx+1]
.text:00404C33                 mov     [esp], edi
.text:00404C36                 call    sub_403C20
.text:00404C3B                 mov     [esp+24h], eax
.text:00404C3F                 test    ebp, ebp
.text:00404C41                 jz      short loc_404C92
.text:00404C43
.text:00404C43 loc_404C43:                             ; CODE XREF: .text:00404C97↓j
.text:00404C43                 call    _errno
.text:00404C48                 mov     ebp, [eax]
.text:00404C4A                 mov     [esp+14h], esi
.text:00404C4E                 mov     ecx, [esi]
.text:00404C50                 mov     [esp+4], edi
.text:00404C54                 mov     edx, [esp+44h]
.text:00404C58                 mov     esi, [esp+24h]
.text:00404C5C                 mov     [esp+10h], ecx
.text:00404C60                 mov     eax, [esp+40h]
.text:00404C64                 mov     [esp+0Ch], edx
.text:00404C68                 mov     [esp], esi
.text:00404C6B                 mov     [esp+8], eax
.text:00404C6F                 call    sub_403FE0
.text:00404C74                 call    _errno
.text:00404C79                 mov     [eax], ebp
.text:00404C7B                 call    _errno
.text:00404C80                 mov     ebx, [esp+28h]
.text:00404C84                 mov     [eax], ebx
.text:00404C86                 mov     eax, [esp+24h]
.text:00404C8A                 add     esp, 2Ch
.text:00404C8D                 pop     ebx
.text:00404C8E                 pop     esi
.text:00404C8F                 pop     edi
.text:00404C90                 pop     ebp
.text:00404C91                 retn
.text:00404C92 ; ---------------------------------------------------------------------------
.text:00404C92
.text:00404C92 loc_404C92:                             ; CODE XREF: .text:00404C41↑j
.text:00404C92                 mov     esi, offset dword_40F160
.text:00404C97                 jmp     short loc_404C43
.text:00404C97 ; ---------------------------------------------------------------------------
.text:00404C99                 align 10h
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: .text:00404BEA↑j
.text:00404CA0                 mov     ebx, offset dword_40F160
.text:00404CA5                 jmp     loc_404BF0
.text:00404CA5 ; ---------------------------------------------------------------------------
.text:00404CAA                 align 10h
.text:00404CB0                 sub     esp, 1Ch
.text:00404CB3                 mov     edx, [esp+24h]
.text:00404CB7                 mov     dword ptr [esp+0Ch], offset dword_40F160
.text:00404CBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404CC7                 mov     [esp+4], edx
.text:00404CCB                 mov     edx, [esp+20h]
.text:00404CCF                 mov     [esp], edx
.text:00404CD2                 call    sub_405120
.text:00404CD7                 add     esp, 1Ch
.text:00404CDA                 retn
.text:00404CDA ; ---------------------------------------------------------------------------
.text:00404CDB                 align 10h
.text:00404CE0                 sub     esp, 1Ch
.text:00404CE3                 mov     edx, [esp+20h]
.text:00404CE7                 mov     dword ptr [esp+0Ch], offset dword_40F160
.text:00404CEF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404CF7                 mov     [esp+4], edx
.text:00404CFB                 mov     dword ptr [esp], 0
.text:00404D02                 call    sub_405120
.text:00404D07                 add     esp, 1Ch
.text:00404D0A                 retn
.text:00404D0A ; ---------------------------------------------------------------------------
.text:00404D0B                 align 10h
.text:00404D10
.text:00404D10 ; =============== S U B R O U T I N E =======================================
.text:00404D10
.text:00404D10
.text:00404D10 ; int __cdecl sub_404D10(int, int, char *)
.text:00404D10 sub_404D10      proc near               ; CODE XREF: .text:0040344A↑p
.text:00404D10                                         ; sub_403460+1A↑p
.text:00404D10
.text:00404D10 var_BC          = dword ptr -0BCh
.text:00404D10 var_B8          = dword ptr -0B8h
.text:00404D10 var_B4          = dword ptr -0B4h
.text:00404D10 var_B0          = dword ptr -0B0h
.text:00404D10 var_AC          = dword ptr -0ACh
.text:00404D10 var_A8          = dword ptr -0A8h
.text:00404D10 var_A4          = dword ptr -0A4h
.text:00404D10 var_A0          = dword ptr -0A0h
.text:00404D10 var_9C          = dword ptr -9Ch
.text:00404D10 var_98          = dword ptr -98h
.text:00404D10 var_94          = dword ptr -94h
.text:00404D10 var_90          = dword ptr -90h
.text:00404D10 var_8C          = dword ptr -8Ch
.text:00404D10 var_7C          = dword ptr -7Ch
.text:00404D10 var_78          = dword ptr -78h
.text:00404D10 var_74          = dword ptr -74h
.text:00404D10 var_70          = dword ptr -70h
.text:00404D10 var_6C          = dword ptr -6Ch
.text:00404D10 var_68          = dword ptr -68h
.text:00404D10 var_64          = dword ptr -64h
.text:00404D10 var_60          = dword ptr -60h
.text:00404D10 var_5C          = dword ptr -5Ch
.text:00404D10 var_4C          = dword ptr -4Ch
.text:00404D10 var_48          = dword ptr -48h
.text:00404D10 var_44          = dword ptr -44h
.text:00404D10 var_40          = dword ptr -40h
.text:00404D10 var_3C          = dword ptr -3Ch
.text:00404D10 var_38          = dword ptr -38h
.text:00404D10 var_34          = dword ptr -34h
.text:00404D10 var_30          = dword ptr -30h
.text:00404D10 var_2C          = dword ptr -2Ch
.text:00404D10 arg_0           = dword ptr  4
.text:00404D10 arg_4           = dword ptr  8
.text:00404D10 arg_8           = dword ptr  0Ch
.text:00404D10
.text:00404D10                 push    ebp
.text:00404D11                 xor     eax, eax
.text:00404D13                 mov     ecx, 8
.text:00404D18                 push    edi
.text:00404D19                 push    esi
.text:00404D1A                 push    ebx
.text:00404D1B                 sub     esp, 0ACh
.text:00404D21                 mov     ebp, [esp+0BCh+arg_4]
.text:00404D28                 cld
.text:00404D29                 lea     edi, [esp+0BCh+var_A8]
.text:00404D2D                 mov     [esp+0BCh+var_AC], ebp
.text:00404D31                 rep stosd
.text:00404D33                 mov     eax, [esp+0BCh+var_8C]
.text:00404D37                 mov     edi, [esp+0BCh+var_AC]
.text:00404D3B                 mov     esi, [esp+0BCh+var_A8]
.text:00404D3F                 mov     [esp+0BCh+var_5C], eax
.text:00404D43                 mov     ebp, [esp+0BCh+var_A4]
.text:00404D47                 mov     eax, [esp+0BCh+var_AC]
.text:00404D4B                 mov     [esp+0BCh+var_7C], edi
.text:00404D4F                 mov     ecx, [esp+0BCh+var_94]
.text:00404D53                 mov     edi, [esp+0BCh+var_A0]
.text:00404D57                 mov     [esp+0BCh+var_78], esi
.text:00404D5B                 mov     edx, [esp+0BCh+var_90]
.text:00404D5F                 mov     esi, [esp+0BCh+var_9C]
.text:00404D63                 mov     [esp+0BCh+var_4C], eax
.text:00404D67                 mov     ebx, [esp+0BCh+var_98]
.text:00404D6B                 mov     eax, [esp+0BCh+var_A8]
.text:00404D6F                 mov     [esp+0BCh+var_74], ebp
.text:00404D73                 mov     [esp+0BCh+var_70], edi
.text:00404D77                 mov     [esp+0BCh+var_6C], esi
.text:00404D7B                 mov     [esp+0BCh+var_68], ebx
.text:00404D7F                 mov     [esp+0BCh+var_64], ecx
.text:00404D83                 mov     [esp+0BCh+var_60], edx
.text:00404D87                 mov     [esp+0BCh+var_48], eax
.text:00404D8B                 mov     [esp+0BCh+var_44], ebp
.text:00404D8F                 mov     [esp+0BCh+var_40], edi
.text:00404D93                 mov     [esp+0BCh+var_3C], esi
.text:00404D9A                 mov     [esp+0BCh+var_38], ebx
.text:00404DA1                 mov     ebx, [esp+0BCh+var_8C]
.text:00404DA5                 mov     [esp+0BCh+var_30], edx
.text:00404DAC                 mov     edx, [esp+0BCh+arg_8]
.text:00404DB3                 mov     [esp+0BCh+var_34], ecx
.text:00404DBA                 lea     ecx, [esp+0BCh+var_4C]
.text:00404DBE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404DC2                 mov     edx, [esp+0BCh+arg_0]
.text:00404DC9                 mov     [esp+0BCh+var_2C], ebx
.text:00404DD0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404DD4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00404DDC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00404DDF                 call    sub_405120
.text:00404DE4                 add     esp, 0ACh
.text:00404DEA                 pop     ebx
.text:00404DEB                 pop     esi
.text:00404DEC                 pop     edi
.text:00404DED                 pop     ebp
.text:00404DEE                 retn
.text:00404DEE sub_404D10      endp
.text:00404DEE
.text:00404DEE ; ---------------------------------------------------------------------------
.text:00404DEF                 align 10h
.text:00404DF0                 push    ebp
.text:00404DF1                 xor     eax, eax
.text:00404DF3                 mov     ecx, 8
.text:00404DF8                 push    edi
.text:00404DF9                 push    esi
.text:00404DFA                 push    ebx
.text:00404DFB                 sub     esp, 0ACh
.text:00404E01                 mov     edx, [esp+0C4h]
.text:00404E08                 cld
.text:00404E09                 lea     edi, [esp+14h]
.text:00404E0D                 mov     [esp+10h], edx
.text:00404E11                 rep stosd
.text:00404E13                 mov     eax, [esp+30h]
.text:00404E17                 mov     ebp, [esp+10h]
.text:00404E1B                 mov     edi, [esp+14h]
.text:00404E1F                 mov     [esp+60h], eax
.text:00404E23                 mov     esi, [esp+20h]
.text:00404E27                 mov     eax, [esp+10h]
.text:00404E2B                 mov     [esp+40h], ebp
.text:00404E2F                 mov     ecx, [esp+28h]
.text:00404E33                 mov     ebp, [esp+18h]
.text:00404E37                 mov     [esp+44h], edi
.text:00404E3B                 mov     edx, [esp+2Ch]
.text:00404E3F                 mov     edi, [esp+1Ch]
.text:00404E43                 mov     [esp+70h], eax
.text:00404E47                 mov     ebx, [esp+24h]
.text:00404E4B                 mov     eax, [esp+14h]
.text:00404E4F                 mov     [esp+48h], ebp
.text:00404E53                 mov     [esp+4Ch], edi
.text:00404E57                 mov     [esp+50h], esi
.text:00404E5B                 mov     [esp+54h], ebx
.text:00404E5F                 mov     [esp+58h], ecx
.text:00404E63                 mov     [esp+5Ch], edx
.text:00404E67                 mov     [esp+74h], eax
.text:00404E6B                 mov     [esp+78h], ebp
.text:00404E6F                 mov     [esp+7Ch], edi
.text:00404E73                 mov     [esp+80h], esi
.text:00404E7A                 mov     [esp+84h], ebx
.text:00404E81                 mov     esi, [esp+30h]
.text:00404E85                 lea     ebx, [esp+70h]
.text:00404E89                 mov     [esp+8Ch], edx
.text:00404E90                 mov     edx, [esp+0C8h]
.text:00404E97                 mov     [esp+88h], ecx
.text:00404E9E                 mov     ecx, [esp+0CCh]
.text:00404EA5                 mov     [esp+4], edx
.text:00404EA9                 mov     edx, [esp+0C0h]
.text:00404EB0                 mov     [esp+90h], esi
.text:00404EB7                 mov     [esp+0Ch], ebx
.text:00404EBB                 mov     [esp+8], ecx
.text:00404EBF                 mov     [esp], edx
.text:00404EC2                 call    sub_405120
.text:00404EC7                 add     esp, 0ACh
.text:00404ECD                 pop     ebx
.text:00404ECE                 pop     esi
.text:00404ECF                 pop     edi
.text:00404ED0                 pop     ebp
.text:00404ED1                 retn
.text:00404ED1 ; ---------------------------------------------------------------------------
.text:00404ED2                 align 10h
.text:00404EE0                 push    ebp
.text:00404EE1                 xor     eax, eax
.text:00404EE3                 mov     ecx, 8
.text:00404EE8                 push    edi
.text:00404EE9                 push    esi
.text:00404EEA                 push    ebx
.text:00404EEB                 sub     esp, 0ACh
.text:00404EF1                 mov     edi, [esp+0C0h]
.text:00404EF8                 cld
.text:00404EF9                 mov     [esp+10h], edi
.text:00404EFD                 lea     edi, [esp+14h]
.text:00404F01                 rep stosd
.text:00404F03                 mov     eax, [esp+30h]
.text:00404F07                 mov     esi, [esp+10h]
.text:00404F0B                 mov     ebx, [esp+14h]
.text:00404F0F                 mov     [esp+60h], eax
.text:00404F13                 mov     ebp, [esp+18h]
.text:00404F17                 mov     eax, [esp+10h]
.text:00404F1B                 mov     [esp+40h], esi
.text:00404F1F                 mov     edi, [esp+1Ch]
.text:00404F23                 mov     esi, [esp+20h]
.text:00404F27                 mov     [esp+44h], ebx
.text:00404F2B                 mov     ecx, [esp+28h]
.text:00404F2F                 mov     edx, [esp+2Ch]
.text:00404F33                 mov     [esp+70h], eax
.text:00404F37                 mov     ebx, [esp+24h]
.text:00404F3B                 mov     eax, [esp+14h]
.text:00404F3F                 mov     [esp+48h], ebp
.text:00404F43                 mov     [esp+4Ch], edi
.text:00404F47                 mov     [esp+50h], esi
.text:00404F4B                 mov     [esp+54h], ebx
.text:00404F4F                 mov     [esp+58h], ecx
.text:00404F53                 mov     [esp+5Ch], edx
.text:00404F57                 mov     [esp+74h], eax
.text:00404F5B                 mov     [esp+78h], ebp
.text:00404F5F                 mov     [esp+7Ch], edi
.text:00404F63                 mov     [esp+80h], esi
.text:00404F6A                 mov     [esp+84h], ebx
.text:00404F71                 mov     [esp+8Ch], edx
.text:00404F78                 lea     edx, [esp+70h]
.text:00404F7C                 mov     [esp+88h], ecx
.text:00404F83                 mov     ecx, [esp+30h]
.text:00404F87                 mov     [esp+0Ch], edx
.text:00404F8B                 mov     edx, [esp+0C4h]
.text:00404F92                 mov     [esp+90h], ecx
.text:00404F99                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404FA1                 mov     [esp+4], edx
.text:00404FA5                 mov     dword ptr [esp], 0
.text:00404FAC                 call    sub_405120
.text:00404FB1                 add     esp, 0ACh
.text:00404FB7                 pop     ebx
.text:00404FB8                 pop     esi
.text:00404FB9                 pop     edi
.text:00404FBA                 pop     ebp
.text:00404FBB                 retn
.text:00404FBB ; ---------------------------------------------------------------------------
.text:00404FBC                 align 10h
.text:00404FC0                 push    edi
.text:00404FC1                 push    esi
.text:00404FC2                 push    ebx
.text:00404FC3                 sub     esp, 40h
.text:00404FC6                 mov     edx, ds:dword_40F16C
.text:00404FCC                 mov     ebx, ds:dword_40F160
.text:00404FD2                 mov     esi, ds:dword_40F168
.text:00404FD8                 mov     edi, ds:dword_40F164
.text:00404FDE                 mov     [esp+1Ch], edx
.text:00404FE2                 mov     ecx, ds:dword_40F170
.text:00404FE8                 mov     edx, ds:dword_40F180
.text:00404FEE                 mov     [esp+10h], ebx
.text:00404FF2                 mov     ebx, ds:dword_40F174
.text:00404FF8                 mov     [esp+30h], edx
.text:00404FFC                 movzx   edx, byte ptr [esp+54h]
.text:00405001                 mov     [esp+18h], esi
.text:00405005                 mov     esi, ds:dword_40F17C
.text:0040500B                 mov     [esp+14h], edi
.text:0040500F                 mov     edi, ds:dword_40F178
.text:00405015                 mov     [esp+20h], ecx
.text:00405019                 mov     cl, dl
.text:0040501B                 shr     cl, 5
.text:0040501E                 mov     [esp+24h], ebx
.text:00405022                 movzx   ebx, cl
.text:00405025                 mov     [esp+2Ch], esi
.text:00405029                 lea     esi, [esp+10h]
.text:0040502D                 mov     [esp+28h], edi
.text:00405031                 lea     edi, [esi+ebx*4]
.text:00405034                 mov     ebx, edx
.text:00405036                 mov     edx, [edi+4]
.text:00405039                 and     ebx, 1Fh
.text:0040503C                 mov     cl, bl
.text:0040503E                 mov     eax, edx
.text:00405040                 shr     eax, cl
.text:00405042                 and     eax, 1
.text:00405045                 xor     eax, 1
.text:00405048                 shl     eax, cl
.text:0040504A                 xor     edx, eax
.text:0040504C                 mov     [edi+4], edx
.text:0040504F                 mov     edx, [esp+50h]
.text:00405053                 mov     [esp+0Ch], esi
.text:00405057                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040505F                 mov     [esp+4], edx
.text:00405063                 mov     dword ptr [esp], 0
.text:0040506A                 call    sub_405120
.text:0040506F                 add     esp, 40h
.text:00405072                 pop     ebx
.text:00405073                 pop     esi
.text:00405074                 pop     edi
.text:00405075                 retn
.text:00405075 ; ---------------------------------------------------------------------------
.text:00405076                 align 10h
.text:00405080
.text:00405080 ; =============== S U B R O U T I N E =======================================
.text:00405080
.text:00405080
.text:00405080 ; int __cdecl sub_405080(char *)
.text:00405080 sub_405080      proc near               ; CODE XREF: sub_403B00+64↑p
.text:00405080
.text:00405080 var_4C          = dword ptr -4Ch
.text:00405080 var_48          = dword ptr -48h
.text:00405080 var_44          = dword ptr -44h
.text:00405080 var_40          = dword ptr -40h
.text:00405080 var_3C          = dword ptr -3Ch
.text:00405080 var_38          = dword ptr -38h
.text:00405080 var_34          = dword ptr -34h
.text:00405080 var_30          = dword ptr -30h
.text:00405080 var_2C          = dword ptr -2Ch
.text:00405080 var_28          = dword ptr -28h
.text:00405080 var_24          = dword ptr -24h
.text:00405080 var_20          = dword ptr -20h
.text:00405080 var_1C          = dword ptr -1Ch
.text:00405080 arg_0           = dword ptr  4
.text:00405080
.text:00405080                 sub     esp, 4Ch
.text:00405083                 mov     ecx, ds:dword_40F160
.text:00405089                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405091                 mov     edx, ds:dword_40F164
.text:00405097                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040509E                 mov     [esp+4Ch+var_3C], ecx
.text:004050A2                 mov     ecx, ds:dword_40F16C
.text:004050A8                 mov     [esp+4Ch+var_38], edx
.text:004050AC                 mov     edx, ds:dword_40F168
.text:004050B2                 mov     [esp+4Ch+var_30], ecx
.text:004050B6                 mov     ecx, ds:dword_40F170
.text:004050BC                 mov     eax, edx
.text:004050BE                 shr     eax, 1Ah
.text:004050C1                 and     eax, 1
.text:004050C4                 xor     eax, 1
.text:004050C7                 mov     [esp+4Ch+var_2C], ecx
.text:004050CB                 shl     eax, 1Ah
.text:004050CE                 mov     ecx, ds:dword_40F174
.text:004050D4                 xor     edx, eax
.text:004050D6                 mov     [esp+4Ch+var_34], edx
.text:004050DA                 mov     edx, [esp+4Ch+arg_0]
.text:004050DE                 mov     [esp+4Ch+var_28], ecx
.text:004050E2                 mov     ecx, ds:dword_40F178
.text:004050E8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004050EC                 mov     [esp+4Ch+var_24], ecx
.text:004050F0                 mov     ecx, ds:dword_40F17C
.text:004050F6                 mov     [esp+4Ch+var_20], ecx
.text:004050FA                 mov     ecx, ds:dword_40F180
.text:00405100                 mov     [esp+4Ch+var_1C], ecx
.text:00405104                 lea     ecx, [esp+4Ch+var_3C]
.text:00405108                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040510C                 call    sub_405120
.text:00405111                 add     esp, 4Ch
.text:00405114                 retn
.text:00405114 sub_405080      endp
.text:00405114
.text:00405114 ; ---------------------------------------------------------------------------
.text:00405115                 align 10h
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120
.text:00405120 ; int __cdecl sub_405120(int, char *, int, int)
.text:00405120 sub_405120      proc near               ; CODE XREF: .text:00404CD2↑p
.text:00405120                                         ; .text:00404D02↑p ...
.text:00405120
.text:00405120 Block           = dword ptr -2Ch
.text:00405120 var_28          = dword ptr -28h
.text:00405120 Str             = dword ptr -24h
.text:00405120 var_20          = dword ptr -20h
.text:00405120 var_1C          = dword ptr -1Ch
.text:00405120 var_18          = dword ptr -18h
.text:00405120 var_14          = dword ptr -14h
.text:00405120 arg_0           = dword ptr  4
.text:00405120 arg_4           = dword ptr  8
.text:00405120 arg_8           = dword ptr  0Ch
.text:00405120 arg_C           = dword ptr  10h
.text:00405120
.text:00405120                 push    ebp
.text:00405121                 push    edi
.text:00405122                 push    esi
.text:00405123                 push    ebx
.text:00405124                 sub     esp, 1Ch
.text:00405127                 call    _errno
.text:0040512C                 mov     edx, [eax]
.text:0040512E                 mov     eax, [esp+2Ch+arg_0]
.text:00405132                 mov     [esp+2Ch+var_14], edx
.text:00405136                 test    eax, eax
.text:00405138                 js      loc_4052DA
.text:0040513E                 mov     eax, [esp+2Ch+arg_0]
.text:00405142                 cmp     dword_40E030, eax
.text:00405148                 ja      short loc_4051C0
.text:0040514A                 mov     esi, eax
.text:0040514C                 inc     esi
.text:0040514D                 cmp     esi, 1FFFFFFFh
.text:00405153                 ja      loc_4052DF
.text:00405159                 mov     ebx, off_40E03C
.text:0040515F                 cmp     ebx, offset dword_40E034
.text:00405165                 jz      loc_4052B1
.text:0040516B
.text:0040516B loc_40516B:                             ; CODE XREF: sub_405120+1B5↓j
.text:0040516B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040516E                 lea     ecx, ds:0[esi*8]
.text:00405175                 mov     ebp, esi
.text:00405177                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040517B                 call    sub_403CB0
.text:00405180                 mov     off_40E03C, eax
.text:00405185                 mov     ebx, dword_40E030
.text:0040518B                 sub     ebp, ebx
.text:0040518D                 lea     edi, [eax+ebx*8]
.text:00405190                 lea     eax, ds:0[ebp*8]
.text:00405197                 cmp     eax, 7
.text:0040519A                 jbe     short loc_4051B0
.text:0040519C                 test    edi, 4
.text:004051A2                 jz      short loc_4051B0
.text:004051A4                 mov     dword ptr [edi], 0
.text:004051AA                 sub     eax, 4
.text:004051AD                 add     edi, 4
.text:004051B0
.text:004051B0 loc_4051B0:                             ; CODE XREF: sub_405120+7A↑j
.text:004051B0                                         ; sub_405120+82↑j
.text:004051B0                 cld
.text:004051B1                 mov     ecx, eax
.text:004051B3                 shr     ecx, 2
.text:004051B6                 xor     eax, eax
.text:004051B8                 rep stosd
.text:004051BA                 mov     dword_40E030, esi
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_405120+28↑j
.text:004051C0                 mov     esi, off_40E03C
.text:004051C6                 mov     eax, [esp+2Ch+arg_0]
.text:004051CA                 mov     ebp, [esi+eax*8]
.text:004051CD                 mov     edi, [esi+eax*8+4]
.text:004051D1                 mov     esi, [esp+2Ch+arg_C]
.text:004051D5                 test    esi, esi
.text:004051D7                 jz      loc_4052A7
.text:004051DD
.text:004051DD loc_4051DD:                             ; CODE XREF: sub_405120+18C↓j
.text:004051DD                 call    _errno
.text:004051E2                 mov     ebx, [eax]
.text:004051E4                 mov     [esp+2Ch+var_18], esi ; int
.text:004051E8                 mov     ecx, [esi]
.text:004051EA                 mov     [esp+2Ch+Block], edi ; int
.text:004051ED                 mov     edx, [esp+2Ch+arg_8]
.text:004051F1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004051F5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004051F9                 mov     ecx, [esp+2Ch+arg_4]
.text:004051FD                 mov     [esp+2Ch+var_20], edx ; int
.text:00405201                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405205                 call    sub_403FE0
.text:0040520A                 mov     esi, eax
.text:0040520C                 call    _errno
.text:00405211                 mov     [eax], ebx
.text:00405213                 cmp     ebp, esi
.text:00405215                 ja      short loc_40528B
.text:00405217                 lea     ebp, [esi+1]
.text:0040521A                 mov     ebx, off_40E03C
.text:00405220                 cmp     edi, offset unk_40F060
.text:00405226                 mov     esi, [esp+2Ch+arg_0]
.text:0040522A                 mov     [ebx+esi*8], ebp
.text:0040522D                 jz      short loc_40523D
.text:0040522F                 mov     [esp+2Ch+Block], edi ; Block
.text:00405232                 call    free
.text:00405237                 mov     ebx, off_40E03C
.text:0040523D
.text:0040523D loc_40523D:                             ; CODE XREF: sub_405120+10D↑j
.text:0040523D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405240                 call    sub_403C20
.text:00405245                 mov     esi, [esp+2Ch+arg_C]
.text:00405249                 mov     edi, eax
.text:0040524B                 mov     eax, [esp+2Ch+arg_0]
.text:0040524F                 test    esi, esi
.text:00405251                 mov     [ebx+eax*8+4], edi
.text:00405255                 jz      short loc_4052A0
.text:00405257
.text:00405257 loc_405257:                             ; CODE XREF: sub_405120+185↓j
.text:00405257                 call    _errno
.text:0040525C                 mov     ebx, [eax]
.text:0040525E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405262                 mov     ecx, [esi]
.text:00405264                 mov     [esp+2Ch+Block], edi ; int
.text:00405267                 mov     edx, [esp+2Ch+arg_8]
.text:0040526B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040526F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405273                 mov     ecx, [esp+2Ch+arg_4]
.text:00405277                 mov     [esp+2Ch+var_20], edx ; int
.text:0040527B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040527F                 call    sub_403FE0
.text:00405284                 call    _errno
.text:00405289                 mov     [eax], ebx
.text:0040528B
.text:0040528B loc_40528B:                             ; CODE XREF: sub_405120+F5↑j
.text:0040528B                 call    _errno
.text:00405290                 mov     ebp, [esp+2Ch+var_14]
.text:00405294                 mov     [eax], ebp
.text:00405296                 add     esp, 1Ch
.text:00405299                 mov     eax, edi
.text:0040529B                 pop     ebx
.text:0040529C                 pop     esi
.text:0040529D                 pop     edi
.text:0040529E                 pop     ebp
.text:0040529F                 retn
.text:004052A0 ; ---------------------------------------------------------------------------
.text:004052A0
.text:004052A0 loc_4052A0:                             ; CODE XREF: sub_405120+135↑j
.text:004052A0                 mov     esi, offset dword_40F160
.text:004052A5                 jmp     short loc_405257
.text:004052A7 ; ---------------------------------------------------------------------------
.text:004052A7
.text:004052A7 loc_4052A7:                             ; CODE XREF: sub_405120+B7↑j
.text:004052A7                 mov     esi, offset dword_40F160
.text:004052AC                 jmp     loc_4051DD
.text:004052B1 ; ---------------------------------------------------------------------------
.text:004052B1
.text:004052B1 loc_4052B1:                             ; CODE XREF: sub_405120+45↑j
.text:004052B1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004052B8                 call    sub_403C20
.text:004052BD                 mov     off_40E03C, eax
.text:004052C2                 mov     edi, dword_40E034
.text:004052C8                 mov     ebx, eax
.text:004052CA                 mov     ecx, off_40E038
.text:004052D0                 mov     [eax], edi
.text:004052D2                 mov     [eax+4], ecx
.text:004052D5                 jmp     loc_40516B
.text:004052DA ; ---------------------------------------------------------------------------
.text:004052DA
.text:004052DA loc_4052DA:                             ; CODE XREF: sub_405120+18↑j
.text:004052DA                 call    abort
.text:004052DF ; ---------------------------------------------------------------------------
.text:004052DF
.text:004052DF loc_4052DF:                             ; CODE XREF: sub_405120+33↑j
.text:004052DF                 call    sub_403F10
.text:004052DF sub_405120      endp
.text:004052DF
.text:004052DF ; ---------------------------------------------------------------------------
.text:004052E4                 align 10h
.text:004052F0
.text:004052F0 ; =============== S U B R O U T I N E =======================================
.text:004052F0
.text:004052F0 ; Attributes: thunk
.text:004052F0
.text:004052F0 libintl_bindtextdomain proc near
.text:004052F0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004052F0 libintl_bindtextdomain endp
.text:004052F0
.text:004052F0 ; ---------------------------------------------------------------------------
.text:004052F6                 align 10h
.text:00405300                 jmp     ds:libintl_textdomain
.text:00405300 ; ---------------------------------------------------------------------------
.text:00405306                 align 10h
.text:00405310                 jmp     ds:libintl_gettext
.text:00405310 ; ---------------------------------------------------------------------------
.text:00405316                 align 10h
.text:00405320 ; const char aS_0[]
.text:00405320 aS_0            db ': %s',0             ; DATA XREF: sub_405340+B8↓o
.text:00405320                                         ; sub_405444+122↓o
.text:00405325 aUnknownSystemE db 'Unknown system error',0
.text:00405325                                         ; DATA XREF: sub_405340:loc_40540D↓o
.text:00405325                                         ; sub_405444:loc_40557E↓o
.text:0040533A ; const char aS_1[]
.text:0040533A aS_1            db '%s: ',0             ; DATA XREF: sub_405340:loc_405414↓o
.text:0040533F                 align 10h
.text:00405340
.text:00405340 ; =============== S U B R O U T I N E =======================================
.text:00405340
.text:00405340
.text:00405340 ; int __cdecl sub_405340(int Code, int ErrorMessage, char *, char)
.text:00405340 sub_405340      proc near               ; CODE XREF: sub_401910+325↑p
.text:00405340                                         ; sub_401910+375↑p ...
.text:00405340
.text:00405340 Stream          = dword ptr -1Ch
.text:00405340 Format          = dword ptr -18h
.text:00405340 ArgList         = dword ptr -14h
.text:00405340 Code            = dword ptr  4
.text:00405340 ErrorMessage    = dword ptr  8
.text:00405340 arg_8           = dword ptr  0Ch
.text:00405340 arg_C           = byte ptr  10h
.text:00405340
.text:00405340                 push    esi
.text:00405341                 push    ebx
.text:00405342                 sub     esp, 14h
.text:00405345                 mov     edx, ds:_iob
.text:0040534B                 mov     esi, [esp+1Ch+Code]
.text:0040534F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405353                 add     edx, 20h ; ' '
.text:00405356                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405359                 call    fflush
.text:0040535E                 mov     eax, ds:dword_40F500
.text:00405363                 test    eax, eax
.text:00405365                 jz      loc_405414
.text:0040536B                 call    eax ; dword_40F500
.text:0040536D
.text:0040536D loc_40536D:                             ; CODE XREF: sub_405340+F7↓j
.text:0040536D                 lea     edx, [esp+1Ch+arg_C]
.text:00405371                 mov     ecx, [esp+1Ch+arg_8]
.text:00405375                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405379                 mov     edx, ds:_iob
.text:0040537F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405383                 add     edx, 40h ; '@'
.text:00405386                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405389                 call    vfprintf
.text:0040538E                 inc     ds:dword_40F510
.text:00405394                 test    ebx, ebx
.text:00405396                 jnz     short loc_4053E2
.text:00405398
.text:00405398 loc_405398:                             ; CODE XREF: sub_405340+CB↓j
.text:00405398                 mov     edx, ds:_iob
.text:0040539E                 lea     ecx, [edx+40h]
.text:004053A1                 mov     ebx, [ecx+4]
.text:004053A4                 dec     ebx
.text:004053A5                 test    ebx, ebx
.text:004053A7                 mov     [ecx+4], ebx
.text:004053AA                 js      short loc_4053D0
.text:004053AC                 mov     ecx, [edx+40h]
.text:004053AF                 mov     byte ptr [ecx], 0Ah
.text:004053B2                 inc     dword ptr [edx+40h]
.text:004053B5
.text:004053B5 loc_4053B5:                             ; CODE XREF: sub_405340+A0↓j
.text:004053B5                 mov     edx, ds:_iob
.text:004053BB                 add     edx, 40h ; '@'
.text:004053BE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004053C1                 call    fflush
.text:004053C6                 test    esi, esi
.text:004053C8                 jnz     short loc_40543C
.text:004053CA                 add     esp, 14h
.text:004053CD                 pop     ebx
.text:004053CE                 pop     esi
.text:004053CF                 retn
.text:004053D0 ; ---------------------------------------------------------------------------
.text:004053D0
.text:004053D0 loc_4053D0:                             ; CODE XREF: sub_405340+6A↑j
.text:004053D0                 mov     [esp+1Ch+Format], ecx ; File
.text:004053D4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004053DB                 call    _flsbuf
.text:004053E0                 jmp     short loc_4053B5
.text:004053E2 ; ---------------------------------------------------------------------------
.text:004053E2
.text:004053E2 loc_4053E2:                             ; CODE XREF: sub_405340+56↑j
.text:004053E2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004053E5                 call    strerror
.text:004053EA                 test    eax, eax
.text:004053EC                 jz      short loc_40540D
.text:004053EE
.text:004053EE loc_4053EE:                             ; CODE XREF: sub_405340+D2↓j
.text:004053EE                 mov     [esp+1Ch+ArgList], eax
.text:004053F2                 mov     ebx, ds:_iob
.text:004053F8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00405400                 add     ebx, 40h ; '@'
.text:00405403                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405406                 call    fprintf
.text:0040540B                 jmp     short loc_405398
.text:0040540D ; ---------------------------------------------------------------------------
.text:0040540D
.text:0040540D loc_40540D:                             ; CODE XREF: sub_405340+AC↑j
.text:0040540D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405412                 jmp     short loc_4053EE
.text:00405414 ; ---------------------------------------------------------------------------
.text:00405414
.text:00405414 loc_405414:                             ; CODE XREF: sub_405340+25↑j
.text:00405414                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040541C                 mov     edx, ds:_iob
.text:00405422                 mov     ecx, ds:dword_40F4D0
.text:00405428                 add     edx, 40h ; '@'
.text:0040542B                 mov     [esp+1Ch+ArgList], ecx
.text:0040542F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405432                 call    fprintf
.text:00405437                 jmp     loc_40536D
.text:0040543C ; ---------------------------------------------------------------------------
.text:0040543C
.text:0040543C loc_40543C:                             ; CODE XREF: sub_405340+88↑j
.text:0040543C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040543F                 call    exit
.text:0040543F sub_405340      endp
.text:0040543F
.text:00405444
.text:00405444 ; =============== S U B R O U T I N E =======================================
.text:00405444
.text:00405444
.text:00405444 ; int __cdecl sub_405444(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405444 sub_405444      proc near               ; DATA XREF: sub_405444+77↓o
.text:00405444
.text:00405444 Stream          = dword ptr -28h
.text:00405444 Format          = dword ptr -24h
.text:00405444 ArgList         = dword ptr -20h
.text:00405444 var_1C          = dword ptr -1Ch
.text:00405444 Code            = dword ptr  8
.text:00405444 ErrorMessage    = dword ptr  0Ch
.text:00405444 Str2            = dword ptr  10h
.text:00405444 arg_10          = dword ptr  14h
.text:00405444 arg_14          = dword ptr  18h
.text:00405444 arg_18          = byte ptr  1Ch
.text:00405444
.text:00405444                 and     eax, 64253A73h
.text:00405449                 cmp     ah, [eax]
.text:0040544B
.text:0040544B loc_40544B:                             ; DATA XREF: sub_405444:loc_405585↓o
.text:0040544B                 add     ds:55003A73h, ah
.text:00405451                 push    edi
.text:00405452                 push    esi
.text:00405453                 push    ebx
.text:00405454                 sub     esp, 1Ch
.text:00405457                 mov     edx, ds:dword_40F540
.text:0040545D                 mov     ebp, [esp+28h+Code]
.text:00405461                 mov     edi, [esp+28h+ErrorMessage]
.text:00405465                 test    edx, edx
.text:00405467                 mov     ebx, [esp+28h+Str2]
.text:0040546B                 mov     esi, [esp+28h+arg_10]
.text:0040546F                 jz      short loc_405489
.text:00405471                 cmp     ds:dword_40F1A0, esi
.text:00405477                 jz      loc_4055B0
.text:0040547D
.text:0040547D loc_40547D:                             ; CODE XREF: sub_405444+18D↓j
.text:0040547D                 mov     ds:Str1, ebx
.text:00405483                 mov     ds:dword_40F1A0, esi
.text:00405489
.text:00405489 loc_405489:                             ; CODE XREF: sub_405444+2B↑j
.text:00405489                 mov     edx, ds:_iob
.text:0040548F                 add     edx, 20h ; ' '
.text:00405492                 mov     [esp+28h+Stream], edx ; Stream
.text:00405495                 call    fflush
.text:0040549A                 mov     eax, ds:dword_40F500
.text:0040549F                 test    eax, eax
.text:004054A1                 jz      loc_405585
.text:004054A7                 call    eax ; dword_40F500
.text:004054A9
.text:004054A9 loc_4054A9:                             ; CODE XREF: sub_405444+164↓j
.text:004054A9                 test    ebx, ebx
.text:004054AB                 jz      short loc_4054CE
.text:004054AD                 mov     [esp+28h+ArgList], ebx
.text:004054B1                 mov     ebx, ds:_iob
.text:004054B7                 mov     [esp+28h+var_1C], esi
.text:004054BB                 mov     [esp+28h+Format], offset sub_405444 ; Format
.text:004054C3                 add     ebx, 40h ; '@'
.text:004054C6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004054C9                 call    fprintf
.text:004054CE
.text:004054CE loc_4054CE:                             ; CODE XREF: sub_405444+67↑j
.text:004054CE                 mov     esi, ds:_iob
.text:004054D4                 lea     edx, [esp+28h+arg_18]
.text:004054D8                 mov     ecx, [esp+28h+arg_14]
.text:004054DC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004054E0                 add     esi, 40h ; '@'
.text:004054E3                 mov     [esp+28h+Format], ecx ; Format
.text:004054E7                 mov     [esp+28h+Stream], esi ; Stream
.text:004054EA                 call    vfprintf
.text:004054EF                 inc     ds:dword_40F510
.text:004054F5                 test    edi, edi
.text:004054F7                 jnz     short loc_405550
.text:004054F9
.text:004054F9 loc_4054F9:                             ; CODE XREF: sub_405444+135↓j
.text:004054F9                 mov     edx, ds:_iob
.text:004054FF                 lea     ecx, [edx+40h]
.text:00405502                 mov     ebx, [ecx+4]
.text:00405505                 dec     ebx
.text:00405506                 test    ebx, ebx
.text:00405508                 mov     [ecx+4], ebx
.text:0040550B                 js      short loc_405537
.text:0040550D                 mov     esi, [edx+40h]
.text:00405510                 mov     byte ptr [esi], 0Ah
.text:00405513                 inc     dword ptr [edx+40h]
.text:00405516
.text:00405516 loc_405516:                             ; CODE XREF: sub_405444+103↓j
.text:00405516                 mov     ecx, ds:_iob
.text:0040551C                 add     ecx, 40h ; '@'
.text:0040551F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405522                 call    fflush
.text:00405527                 test    ebp, ebp
.text:00405529                 jnz     loc_4055D6
.text:0040552F
.text:0040552F loc_40552F:                             ; CODE XREF: sub_405444+173↓j
.text:0040552F                                         ; sub_405444+187↓j
.text:0040552F                 add     esp, 1Ch
.text:00405532                 pop     ebx
.text:00405533                 pop     esi
.text:00405534                 pop     edi
.text:00405535                 pop     ebp
.text:00405536                 retn
.text:00405537 ; ---------------------------------------------------------------------------
.text:00405537
.text:00405537 loc_405537:                             ; CODE XREF: sub_405444+C7↑j
.text:00405537                 mov     [esp+28h+Format], ecx ; File
.text:0040553B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405542                 call    _flsbuf
.text:00405547                 jmp     short loc_405516
.text:00405547 ; ---------------------------------------------------------------------------
.text:00405549                 align 10h
.text:00405550
.text:00405550 loc_405550:                             ; CODE XREF: sub_405444+B3↑j
.text:00405550                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405553                 call    strerror
.text:00405558                 test    eax, eax
.text:0040555A                 jz      short loc_40557E
.text:0040555C
.text:0040555C loc_40555C:                             ; CODE XREF: sub_405444+13F↓j
.text:0040555C                 mov     [esp+28h+ArgList], eax
.text:00405560                 mov     edi, ds:_iob
.text:00405566                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040556E                 add     edi, 40h ; '@'
.text:00405571                 mov     [esp+28h+Stream], edi ; Stream
.text:00405574                 call    fprintf
.text:00405579                 jmp     loc_4054F9
.text:0040557E ; ---------------------------------------------------------------------------
.text:0040557E
.text:0040557E loc_40557E:                             ; CODE XREF: sub_405444+116↑j
.text:0040557E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405583                 jmp     short loc_40555C
.text:00405585 ; ---------------------------------------------------------------------------
.text:00405585
.text:00405585 loc_405585:                             ; CODE XREF: sub_405444+5D↑j
.text:00405585                 mov     [esp+28h+Format], (offset loc_40544B+1) ; Format
.text:0040558D                 mov     ecx, ds:_iob
.text:00405593                 mov     edx, ds:dword_40F4D0
.text:00405599                 add     ecx, 40h ; '@'
.text:0040559C                 mov     [esp+28h+ArgList], edx
.text:004055A0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004055A3                 call    fprintf
.text:004055A8                 jmp     loc_4054A9
.text:004055A8 ; ---------------------------------------------------------------------------
.text:004055AD                 align 10h
.text:004055B0
.text:004055B0 loc_4055B0:                             ; CODE XREF: sub_405444+33↑j
.text:004055B0                 mov     eax, ds:Str1
.text:004055B5                 cmp     ebx, eax
.text:004055B7                 jz      loc_40552F
.text:004055BD                 mov     [esp+28h+Format], ebx ; Str2
.text:004055C1                 mov     [esp+28h+Stream], eax ; Str1
.text:004055C4                 call    strcmp
.text:004055C9                 test    eax, eax
.text:004055CB                 jz      loc_40552F
.text:004055D1                 jmp     loc_40547D
.text:004055D6 ; ---------------------------------------------------------------------------
.text:004055D6
.text:004055D6 loc_4055D6:                             ; CODE XREF: sub_405444+E5↑j
.text:004055D6                 mov     [esp+28h+Stream], ebp ; Code
.text:004055D9                 call    exit
.text:004055D9 sub_405444      endp ; sp-analysis failed
.text:004055D9
.text:004055D9 ; ---------------------------------------------------------------------------
.text:004055DE                 align 10h
.text:004055E0
.text:004055E0 ; =============== S U B R O U T I N E =======================================
.text:004055E0
.text:004055E0
.text:004055E0 sub_4055E0      proc near               ; CODE XREF: sub_401DE0+16C↑p
.text:004055E0
.text:004055E0 var_C           = dword ptr -0Ch
.text:004055E0 var_8           = dword ptr -8
.text:004055E0 var_4           = dword ptr -4
.text:004055E0 arg_0           = dword ptr  4
.text:004055E0 arg_4           = dword ptr  8
.text:004055E0
.text:004055E0                 sub     esp, 0Ch
.text:004055E3                 mov     edx, [esp+0Ch+arg_4]
.text:004055E7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:004055EE                 mov     [esp+0Ch+var_4], edx ; int
.text:004055F2                 mov     edx, [esp+0Ch+arg_0]
.text:004055F6                 mov     [esp+0Ch+var_8], edx ; int
.text:004055FA                 call    sub_405610
.text:004055FF                 add     esp, 0Ch
.text:00405602                 retn
.text:00405602 sub_4055E0      endp
.text:00405602
.text:00405602 ; ---------------------------------------------------------------------------
.text:00405603                 align 10h
.text:00405610
.text:00405610 ; =============== S U B R O U T I N E =======================================
.text:00405610
.text:00405610
.text:00405610 ; int __cdecl sub_405610(LPCSTR, int, int)
.text:00405610 sub_405610      proc near               ; CODE XREF: sub_4055E0+1A↑p
.text:00405610                                         ; sub_40ACB0+30E↓p ...
.text:00405610
.text:00405610 lpFileName      = dword ptr -2Ch
.text:00405610 dwDesiredAccess = dword ptr -28h
.text:00405610 dwShareMode     = dword ptr -24h
.text:00405610 lpSecurityAttributes= dword ptr -20h
.text:00405610 dwCreationDisposition= dword ptr -1Ch
.text:00405610 dwFlagsAndAttributes= dword ptr -18h
.text:00405610 hTemplateFile   = dword ptr -14h
.text:00405610 var_10          = dword ptr -10h
.text:00405610 var_C           = dword ptr -0Ch
.text:00405610 var_8           = dword ptr -8
.text:00405610 var_4           = dword ptr -4
.text:00405610 arg_0           = dword ptr  4
.text:00405610 arg_4           = dword ptr  8
.text:00405610 arg_8           = dword ptr  0Ch
.text:00405610
.text:00405610 ; FUNCTION CHUNK AT .text:004072C0 SIZE 0000013A BYTES
.text:00405610
.text:00405610                 sub     esp, 0Ch
.text:00405613                 mov     ecx, [esp+0Ch+arg_0]
.text:00405617                 mov     edx, [esp+0Ch+arg_4]
.text:0040561B                 mov     eax, [esp+0Ch+arg_8]
.text:0040561F                 test    ecx, ecx
.text:00405621                 jnz     short loc_405640
.text:00405623                 test    edx, edx
.text:00405625                 jz      short loc_405640
.text:00405627                 test    eax, eax
.text:00405629                 jz      short loc_405640
.text:0040562B                 mov     [esp+0Ch+arg_4], eax
.text:0040562F                 mov     [esp+0Ch+arg_0], edx
.text:00405633                 add     esp, 0Ch
.text:00405636                 jmp     loc_4072C0
.text:00405636 ; ---------------------------------------------------------------------------
.text:0040563B                 align 10h
.text:00405640
.text:00405640 loc_405640:                             ; CODE XREF: sub_405610+11↑j
.text:00405640                                         ; sub_405610+15↑j ...
.text:00405640                 call    _errno
.text:00405645                 mov     dword ptr [eax], 16h
.text:0040564B                 mov     eax, 0FFFFFFFFh
.text:00405650                 add     esp, 0Ch
.text:00405653                 retn
.text:00405653 sub_405610      endp
.text:00405653
.text:00405653 ; ---------------------------------------------------------------------------
.text:00405654                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660
.text:00405660 ; int __cdecl sub_405660(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00405660 sub_405660      proc near               ; CODE XREF: sub_4057E0+93↓p
.text:00405660
.text:00405660 pvReserved      = dword ptr -35Ch
.text:00405660 pUnkOuter       = dword ptr -358h
.text:00405660 dwClsContext    = dword ptr -354h
.text:00405660 riid            = dword ptr -350h
.text:00405660 ppv             = dword ptr -34Ch
.text:00405660 cchWideChar     = dword ptr -348h
.text:00405660 var_334         = byte ptr -334h
.text:00405660 var_330         = dword ptr -330h
.text:00405660 String2         = byte ptr -32Ch
.text:00405660 WideCharStr     = word ptr -21Ch
.text:00405660 lpMultiByteStr  = dword ptr  4
.text:00405660 lpString1       = dword ptr  8
.text:00405660
.text:00405660                 push    edi
.text:00405661                 push    esi
.text:00405662                 push    ebx
.text:00405663                 sub     esp, 350h
.text:00405669                 mov     edi, [esp+35Ch+lpString1]
.text:00405670                 mov     byte ptr [edi], 0
.text:00405673                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040567A                 call    OleInitialize
.text:0040567F                 sub     esp, 4
.text:00405682                 cmp     eax, 1
.text:00405685                 ja      loc_4057BF
.text:0040568B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00405693                 lea     ecx, [esp+35Ch+var_330]
.text:00405697                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040569B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:004056A3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:004056AB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:004056B2                 call    CoCreateInstance
.text:004056B7                 sub     esp, 14h
.text:004056BA                 test    eax, eax
.text:004056BC                 js      loc_4057BF
.text:004056C2                 mov     ebx, [esp+35Ch+var_330]
.text:004056C6                 lea     edx, [esp+35Ch+var_334]
.text:004056CA                 mov     esi, [ebx]
.text:004056CC                 mov     [esp+35Ch+dwClsContext], edx
.text:004056D0                 mov     [esp+35Ch+pvReserved], ebx
.text:004056D3                 xor     ebx, ebx
.text:004056D5                 mov     [esp+35Ch+pUnkOuter], offset dword_40C1F0
.text:004056DD                 call    dword ptr [esi]
.text:004056DF                 sub     esp, 0Ch
.text:004056E2                 lea     esi, [esp+35Ch+WideCharStr]
.text:004056E9                 call    AreFileApisANSI
.text:004056EE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:004056F6                 test    eax, eax
.text:004056F8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:004056FF                 setz    bl
.text:00405702                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00405706                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040570E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00405712                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040571A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040571D                 call    MultiByteToWideChar
.text:00405722                 sub     esp, 18h
.text:00405725                 test    eax, eax
.text:00405727                 js      loc_4057BF
.text:0040572D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00405731                 mov     ebx, [edx]
.text:00405733                 mov     [esp+35Ch+dwClsContext], 0
.text:0040573B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040573F                 mov     [esp+35Ch+pvReserved], edx
.text:00405742                 call    dword ptr [ebx+14h]
.text:00405745                 sub     esp, 0Ch
.text:00405748                 test    eax, eax
.text:0040574A                 js      short loc_4057BF
.text:0040574C                 mov     ebx, [esp+35Ch+var_330]
.text:00405750                 lea     esi, [esp+35Ch+String2]
.text:00405754                 mov     ecx, [ebx]
.text:00405756                 mov     [esp+35Ch+pvReserved], ebx
.text:00405759                 mov     [esp+35Ch+ppv], 0
.text:00405761                 mov     [esp+35Ch+riid], 0
.text:00405769                 mov     [esp+35Ch+dwClsContext], 104h
.text:00405771                 mov     [esp+35Ch+pUnkOuter], esi
.text:00405775                 call    dword ptr [ecx+0Ch]
.text:00405778                 sub     esp, 14h
.text:0040577B                 mov     ebx, eax
.text:0040577D                 test    eax, eax
.text:0040577F                 js      short loc_4057BF
.text:00405781                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00405785                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00405788                 call    lstrcpyA
.text:0040578D                 sub     esp, 8
.text:00405790                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00405794                 mov     ecx, [edi]
.text:00405796                 mov     [esp+35Ch+pvReserved], edi
.text:00405799                 call    dword ptr [ecx+8]
.text:0040579C                 sub     esp, 4
.text:0040579F                 mov     edx, [esp+35Ch+var_330]
.text:004057A3                 mov     esi, [edx]
.text:004057A5                 mov     [esp+35Ch+pvReserved], edx
.text:004057A8                 call    dword ptr [esi+8]
.text:004057AB                 sub     esp, 4
.text:004057AE                 call    CoUninitialize
.text:004057B3                 mov     eax, ebx
.text:004057B5
.text:004057B5 loc_4057B5:                             ; CODE XREF: sub_405660+177↓j
.text:004057B5                 add     esp, 350h
.text:004057BB                 pop     ebx
.text:004057BC                 pop     esi
.text:004057BD                 pop     edi
.text:004057BE                 retn
.text:004057BF ; ---------------------------------------------------------------------------
.text:004057BF
.text:004057BF loc_4057BF:                             ; CODE XREF: sub_405660+25↑j
.text:004057BF                                         ; sub_405660+5C↑j ...
.text:004057BF                 call    sub_407F00
.text:004057C4                 mov     edi, eax
.text:004057C6                 call    _errno
.text:004057CB                 mov     [eax], edi
.text:004057CD                 call    CoUninitialize
.text:004057D2                 mov     eax, 0FFFFFFFFh
.text:004057D7                 jmp     short loc_4057B5
.text:004057D7 sub_405660      endp
.text:004057D7
.text:004057D7 ; ---------------------------------------------------------------------------
.text:004057D9 ; const char Source[]
.text:004057D9 Source          db '.lnk',0             ; DATA XREF: sub_4057E0+53↓o
.text:004057D9                                         ; sub_4057E0:loc_405845↓o
.text:004057DE                 align 10h
.text:004057E0
.text:004057E0 ; =============== S U B R O U T I N E =======================================
.text:004057E0
.text:004057E0
.text:004057E0 ; int __cdecl sub_4057E0(char *, LPSTR lpString1)
.text:004057E0 sub_4057E0      proc near               ; CODE XREF: sub_403390+35↑p
.text:004057E0                                         ; sub_40B1E0+96↓p
.text:004057E0
.text:004057E0 Str             = dword ptr -1Ch
.text:004057E0 Source          = dword ptr -18h
.text:004057E0 Destination     = dword ptr -14h
.text:004057E0 arg_0           = dword ptr  4
.text:004057E0 lpString1       = dword ptr  8
.text:004057E0
.text:004057E0                 push    ebp
.text:004057E1                 push    edi
.text:004057E2                 push    esi
.text:004057E3                 push    ebx
.text:004057E4                 sub     esp, 0Ch
.text:004057E7                 mov     ebx, [esp+1Ch+arg_0]
.text:004057EB                 mov     ebp, [esp+1Ch+lpString1]
.text:004057EF                 mov     [esp+1Ch+Str], ebx ; Str
.text:004057F2                 call    strlen
.text:004057F7                 add     eax, 5
.text:004057FA                 mov     [esp+1Ch+Str], eax ; Size
.text:004057FD                 call    malloc
.text:00405802                 mov     [esp+1Ch+Destination], eax
.text:00405806                 test    eax, eax
.text:00405808                 jz      loc_4058B0
.text:0040580E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00405812                 mov     [esp+1Ch+Str], eax ; Destination
.text:00405815                 call    strcpy
.text:0040581A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00405822                 mov     eax, [esp+1Ch+Destination]
.text:00405826                 mov     [esp+1Ch+Str], eax ; Str
.text:00405829                 call    strrchr
.text:0040582E                 test    eax, eax
.text:00405830                 jz      short loc_405845
.text:00405832                 cld
.text:00405833                 mov     ebx, offset Source ; ".lnk"
.text:00405838                 mov     ecx, 5
.text:0040583D                 mov     esi, eax
.text:0040583F                 mov     edi, ebx
.text:00405841                 repe cmpsb
.text:00405843                 jz      short loc_405859
.text:00405845
.text:00405845 loc_405845:                             ; CODE XREF: sub_4057E0+50↑j
.text:00405845                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:0040584D                 mov     edx, [esp+1Ch+Destination]
.text:00405851                 mov     [esp+1Ch+Str], edx ; Destination
.text:00405854                 call    strcat
.text:00405859
.text:00405859 loc_405859:                             ; CODE XREF: sub_4057E0+63↑j
.text:00405859                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00405860                 call    SetErrorMode
.text:00405865                 sub     esp, 4
.text:00405868                 mov     ebx, [esp+1Ch+Destination]
.text:0040586C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00405870                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00405873                 call    sub_405660
.text:00405878                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040587B                 mov     esi, eax
.text:0040587D                 call    free
.text:00405882                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00405889                 call    SetErrorMode
.text:0040588E                 sub     esp, 4
.text:00405891                 mov     [esp+1Ch+Str], ebp
.text:00405894                 call    sub_4077D0
.text:00405899                 inc     esi
.text:0040589A                 jz      short loc_4058B0
.text:0040589C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:004058A0                 add     esp, 0Ch
.text:004058A3                 pop     ebx
.text:004058A4                 pop     esi
.text:004058A5                 pop     edi
.text:004058A6                 pop     ebp
.text:004058A7                 jmp     strlen
.text:004058A7 ; ---------------------------------------------------------------------------
.text:004058AC                 align 10h
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_4057E0+28↑j
.text:004058B0                                         ; sub_4057E0+BA↑j
.text:004058B0                 add     esp, 0Ch
.text:004058B3                 mov     eax, 0FFFFFFFFh
.text:004058B8                 pop     ebx
.text:004058B9                 pop     esi
.text:004058BA                 pop     edi
.text:004058BB                 pop     ebp
.text:004058BC                 retn
.text:004058BC sub_4057E0      endp
.text:004058BC
.text:004058BC ; ---------------------------------------------------------------------------
.text:004058BD                 align 10h
.text:004058C0
.text:004058C0 ; =============== S U B R O U T I N E =======================================
.text:004058C0
.text:004058C0 ; Attributes: thunk
.text:004058C0
.text:004058C0 ; char *__cdecl j__getcwd(char *DstBuf, int SizeInBytes)
.text:004058C0 j__getcwd       proc near               ; CODE XREF: .text:00403EC6↑p
.text:004058C0
.text:004058C0 DstBuf          = dword ptr  4
.text:004058C0 SizeInBytes     = dword ptr  8
.text:004058C0
.text:004058C0                 jmp     _getcwd
.text:004058C0 j__getcwd       endp
.text:004058C0
.text:004058C0 ; ---------------------------------------------------------------------------
.text:004058C5                 align 10h
.text:004058D0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004058D0                                         ; DATA XREF: .data:off_40E054↓o
.text:004058E4 ; const CHAR LibFileName[]
.text:004058E4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_405910+11↓o
.text:004058E4                                         ; sub_405A80+C↓o ...
.text:004058F1 ; const CHAR ProcName[]
.text:004058F1 ProcName        db 'GetFileAttributesExA',0
.text:004058F1                                         ; DATA XREF: sub_405910+28↓o
.text:00405906                 align 10h
.text:00405910
.text:00405910 ; =============== S U B R O U T I N E =======================================
.text:00405910
.text:00405910
.text:00405910 ; int __cdecl sub_405910(LPCSTR lpFileName, int)
.text:00405910 sub_405910      proc near               ; CODE XREF: .text:00406AB4↓p
.text:00405910                                         ; sub_406EB0+37↓p
.text:00405910
.text:00405910 lpModuleName    = dword ptr -18Ch
.text:00405910 lpProcName      = dword ptr -188h
.text:00405910 var_184         = dword ptr -184h
.text:00405910 var_170         = dword ptr -170h
.text:00405910 var_164         = dword ptr -164h
.text:00405910 hModule         = dword ptr -160h
.text:00405910 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00405910 lpFileName      = dword ptr  4
.text:00405910 arg_4           = dword ptr  8
.text:00405910
.text:00405910                 push    ebp
.text:00405911                 push    edi
.text:00405912                 push    esi
.text:00405913                 push    ebx
.text:00405914                 sub     esp, 17Ch
.text:0040591A                 mov     ebx, [esp+18Ch+arg_4]
.text:00405921                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00405928                 call    GetModuleHandleA
.text:0040592D                 sub     esp, 4
.text:00405930                 mov     [esp+18Ch+hModule], eax
.text:00405934                 mov     edx, [esp+18Ch+hModule]
.text:00405938                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00405940                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00405943                 call    GetProcAddress
.text:00405948                 sub     esp, 8
.text:0040594B                 mov     ebp, eax
.text:0040594D                 mov     eax, [esp+18Ch+lpFileName]
.text:00405954                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00405957                 call    GetFileAttributesA
.text:0040595C                 sub     esp, 4
.text:0040595F                 mov     [esp+18Ch+var_164], eax
.text:00405963                 xor     eax, eax
.text:00405965                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040596A                 jz      short loc_4059C1
.text:0040596C                 cld
.text:0040596D                 mov     ecx, 50h ; 'P'
.text:00405972                 lea     esi, [esp+18Ch+FindFileData]
.text:00405976                 mov     edi, esi
.text:00405978                 test    ebp, ebp
.text:0040597A                 rep stosd
.text:0040597C                 mov     [esp+18Ch+var_170], 0
.text:00405984                 jz      short loc_4059A5
.text:00405986                 mov     [esp+18Ch+var_184], ebx
.text:0040598A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00405991                 mov     [esp+18Ch+lpProcName], 0
.text:00405999                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040599C                 call    ebp
.text:0040599E                 sub     esp, 0Ch
.text:004059A1                 mov     [esp+18Ch+var_170], eax
.text:004059A5
.text:004059A5 loc_4059A5:                             ; CODE XREF: sub_405910+74↑j
.text:004059A5                 mov     eax, [esp+18Ch+var_170]
.text:004059A9                 test    eax, eax
.text:004059AB                 jz      short loc_4059D0
.text:004059AD
.text:004059AD loc_4059AD:                             ; CODE XREF: sub_405910+131↓j
.text:004059AD                                         ; sub_405910+14B↓j
.text:004059AD                 mov     ebx, [esp+18Ch+hModule]
.text:004059B1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:004059B4                 call    FreeLibrary
.text:004059B9                 sub     esp, 4
.text:004059BC                 mov     eax, 1
.text:004059C1
.text:004059C1 loc_4059C1:                             ; CODE XREF: sub_405910+5A↑j
.text:004059C1                 add     esp, 17Ch
.text:004059C7                 pop     ebx
.text:004059C8                 pop     esi
.text:004059C9                 pop     edi
.text:004059CA                 pop     ebp
.text:004059CB                 retn
.text:004059CB ; ---------------------------------------------------------------------------
.text:004059CC                 align 10h
.text:004059D0
.text:004059D0 loc_4059D0:                             ; CODE XREF: sub_405910+9B↑j
.text:004059D0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:004059D4                 mov     edx, [esp+18Ch+lpFileName]
.text:004059DB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:004059DE                 call    FindFirstFileA
.text:004059E3                 sub     esp, 8
.text:004059E6                 xor     ecx, ecx
.text:004059E8                 cmp     eax, 0FFFFFFFFh
.text:004059EB                 setnz   cl
.text:004059EE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:004059F2                 mov     [ebx], edi
.text:004059F4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:004059F8                 mov     [esp+18Ch+var_170], ecx
.text:004059FC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00405A00                 mov     [ebx+8], esi
.text:00405A03                 mov     [ebx+4], ecx
.text:00405A06                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00405A0A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00405A0E                 mov     [ebx+0Ch], ebp
.text:00405A11                 mov     [ebx+10h], edi
.text:00405A14                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00405A18                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00405A1C                 mov     [ebx+18h], esi
.text:00405A1F                 mov     [ebx+14h], ecx
.text:00405A22                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00405A26                 mov     [ebx+1Ch], ebp
.text:00405A29                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00405A2D                 mov     [ebx+20h], edi
.text:00405A30                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00405A33                 call    FindClose
.text:00405A38                 sub     esp, 4
.text:00405A3B                 mov     esi, [esp+18Ch+var_170]
.text:00405A3F                 test    esi, esi
.text:00405A41                 jnz     loc_4059AD
.text:00405A47                 cld
.text:00405A48                 mov     eax, [esp+18Ch+var_170]
.text:00405A4C                 mov     ecx, 9
.text:00405A51                 mov     edi, ebx
.text:00405A53                 rep stosd
.text:00405A55                 mov     ebp, [esp+18Ch+var_164]
.text:00405A59                 mov     [ebx], ebp
.text:00405A5B                 jmp     loc_4059AD
.text:00405A5B sub_405910      endp
.text:00405A5B
.text:00405A5B ; ---------------------------------------------------------------------------
.text:00405A60 ; const CHAR aFindfirstfilee[]
.text:00405A60 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_405A80+23↓o
.text:00405A71 ; const char asc_405A71[]
.text:00405A71 asc_405A71      db '\*',0               ; DATA XREF: sub_405A80:loc_405B0D↓o
.text:00405A74                 align 10h
.text:00405A80
.text:00405A80 ; =============== S U B R O U T I N E =======================================
.text:00405A80
.text:00405A80
.text:00405A80 ; int __cdecl sub_405A80(char *Str)
.text:00405A80 sub_405A80      proc near               ; CODE XREF: .text:00406BB3↓p
.text:00405A80                                         ; sub_406EB0+3FA↓p ...
.text:00405A80
.text:00405A80 lpLibFileName   = dword ptr -18Ch
.text:00405A80 lpProcName      = dword ptr -188h
.text:00405A80 var_184         = dword ptr -184h
.text:00405A80 var_180         = dword ptr -180h
.text:00405A80 var_17C         = dword ptr -17Ch
.text:00405A80 var_178         = dword ptr -178h
.text:00405A80 var_164         = dword ptr -164h
.text:00405A80 hModule         = dword ptr -160h
.text:00405A80 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00405A80 Str             = dword ptr  4
.text:00405A80
.text:00405A80                 push    ebp
.text:00405A81                 push    edi
.text:00405A82                 xor     edi, edi
.text:00405A84                 push    esi
.text:00405A85                 push    ebx
.text:00405A86                 sub     esp, 17Ch
.text:00405A8C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00405A93                 call    LoadLibraryA
.text:00405A98                 sub     esp, 4
.text:00405A9B                 mov     [esp+18Ch+hModule], eax
.text:00405A9F                 mov     ecx, [esp+18Ch+hModule]
.text:00405AA3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00405AAB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00405AAE                 call    GetProcAddress
.text:00405AB3                 sub     esp, 8
.text:00405AB6                 mov     edx, [esp+18Ch+Str]
.text:00405ABD                 mov     [esp+18Ch+var_164], eax
.text:00405AC1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00405AC4                 call    strlen
.text:00405AC9                 lea     edx, [eax+5]
.text:00405ACC                 mov     ebx, eax
.text:00405ACE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00405AD1                 call    malloc
.text:00405AD6                 mov     esi, eax
.text:00405AD8                 test    esi, esi
.text:00405ADA                 mov     eax, 1
.text:00405ADF                 jz      loc_405BBD
.text:00405AE5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00405AE8                 mov     ebp, [esp+18Ch+Str]
.text:00405AEF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00405AF3                 call    strcpy
.text:00405AF8                 movzx   eax, byte ptr [ebx+esi-1]
.text:00405AFD                 cmp     al, 2Fh ; '/'
.text:00405AFF                 jz      loc_405BEB
.text:00405B05                 cmp     al, 5Ch ; '\'
.text:00405B07                 jz      loc_405BEB
.text:00405B0D
.text:00405B0D loc_405B0D:                             ; CODE XREF: sub_405A80+170↓j
.text:00405B0D                 mov     [esp+18Ch+lpProcName], offset asc_405A71 ; "\\*"
.text:00405B15                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00405B18                 call    strcat
.text:00405B1D                 mov     eax, [esp+18Ch+var_164]
.text:00405B21                 test    eax, eax
.text:00405B23                 jz      loc_405BE5
.text:00405B29                 mov     [esp+18Ch+var_178], 0
.text:00405B31                 lea     ebp, [esp+18Ch+FindFileData]
.text:00405B35                 mov     [esp+18Ch+var_17C], 0
.text:00405B3D                 mov     [esp+18Ch+var_180], 1
.text:00405B45                 mov     [esp+18Ch+var_184], ebp
.text:00405B49                 mov     [esp+18Ch+lpProcName], 0
.text:00405B51                 mov     [esp+18Ch+lpLibFileName], esi
.text:00405B54                 call    [esp+18Ch+var_164]
.text:00405B58                 sub     esp, 18h
.text:00405B5B                 mov     ebx, eax
.text:00405B5D                 cmp     eax, 0FFFFFFFFh
.text:00405B60                 jz      short loc_405BC8
.text:00405B62                 lea     esi, [esi+0]
.text:00405B69                 lea     edi, [edi+0]
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: sub_405A80+109↓j
.text:00405B70                                         ; sub_405A80+161↓j
.text:00405B70                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00405B75                 jz      short loc_405B78
.text:00405B77                 inc     edi
.text:00405B78
.text:00405B78 loc_405B78:                             ; CODE XREF: sub_405A80+F5↑j
.text:00405B78                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00405B7C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00405B7F                 call    FindNextFileA
.text:00405B84                 sub     esp, 8
.text:00405B87                 test    eax, eax
.text:00405B89                 jnz     short loc_405B70
.text:00405B8B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00405B8E                 call    FindClose
.text:00405B93                 sub     esp, 4
.text:00405B96                 mov     esi, [esp+18Ch+hModule]
.text:00405B9A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00405B9D                 call    FreeLibrary
.text:00405BA2                 sub     esp, 4
.text:00405BA5                 mov     ebx, [esp+18Ch+Str]
.text:00405BAC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00405BAF                 call    sub_408550
.text:00405BB4                 test    eax, eax
.text:00405BB6                 jz      short loc_405BBB
.text:00405BB8                 add     edi, 2
.text:00405BBB
.text:00405BBB loc_405BBB:                             ; CODE XREF: sub_405A80+136↑j
.text:00405BBB                 mov     eax, edi
.text:00405BBD
.text:00405BBD loc_405BBD:                             ; CODE XREF: sub_405A80+5F↑j
.text:00405BBD                                         ; sub_405A80+163↓j
.text:00405BBD                 add     esp, 17Ch
.text:00405BC3                 pop     ebx
.text:00405BC4                 pop     esi
.text:00405BC5                 pop     edi
.text:00405BC6                 pop     ebp
.text:00405BC7                 retn
.text:00405BC8 ; ---------------------------------------------------------------------------
.text:00405BC8
.text:00405BC8 loc_405BC8:                             ; CODE XREF: sub_405A80+E0↑j
.text:00405BC8                                         ; sub_405A80+169↓j
.text:00405BC8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00405BCC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00405BCF                 call    FindFirstFileA
.text:00405BD4                 mov     ebx, eax
.text:00405BD6                 sub     esp, 8
.text:00405BD9                 cmp     ebx, 0FFFFFFFFh
.text:00405BDC                 mov     eax, 2
.text:00405BE1                 jnz     short loc_405B70
.text:00405BE3                 jmp     short loc_405BBD
.text:00405BE5 ; ---------------------------------------------------------------------------
.text:00405BE5
.text:00405BE5 loc_405BE5:                             ; CODE XREF: sub_405A80+A3↑j
.text:00405BE5                 lea     ebp, [esp+18Ch+FindFileData]
.text:00405BE9                 jmp     short loc_405BC8
.text:00405BEB ; ---------------------------------------------------------------------------
.text:00405BEB
.text:00405BEB loc_405BEB:                             ; CODE XREF: sub_405A80+7F↑j
.text:00405BEB                                         ; sub_405A80+87↑j
.text:00405BEB                 mov     byte ptr [ebx+esi-1], 0
.text:00405BF0                 jmp     loc_405B0D
.text:00405BF0 sub_405A80      endp
.text:00405BF0
.text:00405BF0 ; ---------------------------------------------------------------------------
.text:00405BF5                 align 10h
.text:00405C00
.text:00405C00 ; =============== S U B R O U T I N E =======================================
.text:00405C00
.text:00405C00
.text:00405C00 ; int __cdecl sub_405C00(HANDLE hNamedPipe, int)
.text:00405C00 sub_405C00      proc near               ; CODE XREF: sub_405610+1D67↓p
.text:00405C00                                         ; sub_40A6A0+52↓j
.text:00405C00
.text:00405C00 hFile           = dword ptr -0ECh
.text:00405C00 lpFileInformation= dword ptr -0E8h
.text:00405C00 nBufferSize     = dword ptr -0E4h
.text:00405C00 lpBytesRead     = dword ptr -0E0h
.text:00405C00 lpTotalBytesAvail= dword ptr -0DCh
.text:00405C00 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00405C00 var_C4          = dword ptr -0C4h
.text:00405C00 var_C0          = dword ptr -0C0h
.text:00405C00 var_BC          = dword ptr -0BCh
.text:00405C00 var_B8          = dword ptr -0B8h
.text:00405C00 var_B4          = dword ptr -0B4h
.text:00405C00 var_B0          = dword ptr -0B0h
.text:00405C00 var_AC          = dword ptr -0ACh
.text:00405C00 var_A8          = dword ptr -0A8h
.text:00405C00 TotalBytesAvail = dword ptr -0A0h
.text:00405C00 var_9C          = dword ptr -9Ch
.text:00405C00 var_98          = dword ptr -98h
.text:00405C00 var_94          = dword ptr -94h
.text:00405C00 var_90          = dword ptr -90h
.text:00405C00 var_8C          = dword ptr -8Ch
.text:00405C00 var_88          = dword ptr -88h
.text:00405C00 var_84          = dword ptr -84h
.text:00405C00 var_80          = dword ptr -80h
.text:00405C00 var_7C          = dword ptr -7Ch
.text:00405C00 var_78          = dword ptr -78h
.text:00405C00 var_74          = dword ptr -74h
.text:00405C00 var_70          = dword ptr -70h
.text:00405C00 var_6C          = dword ptr -6Ch
.text:00405C00 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00405C00 hNamedPipe      = dword ptr  4
.text:00405C00 arg_4           = dword ptr  8
.text:00405C00
.text:00405C00                 push    ebp
.text:00405C01                 mov     eax, 0FFFFFFFFh
.text:00405C06                 push    edi
.text:00405C07                 push    esi
.text:00405C08                 push    ebx
.text:00405C09                 sub     esp, 0DCh
.text:00405C0F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00405C16                 mov     ebp, [esp+0ECh+arg_4]
.text:00405C1D                 cmp     esi, 0FFFFFFFFh
.text:00405C20                 jz      loc_405FA1
.text:00405C26                 cld
.text:00405C27                 xor     eax, eax
.text:00405C29                 lea     ebx, [esp+0ECh+FileInformation]
.text:00405C30                 mov     ecx, 0Dh
.text:00405C35                 mov     edi, ebx
.text:00405C37                 rep stosd
.text:00405C39                 mov     dword ptr [ebp+18h], 1
.text:00405C40                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00405C43                 call    GetFileType
.text:00405C48                 sub     esp, 4
.text:00405C4B                 xor     edx, edx
.text:00405C4D                 cmp     eax, 2
.text:00405C50                 jz      loc_406080
.text:00405C56                 cmp     eax, 3
.text:00405C59                 jz      loc_406070
.text:00405C5F
.text:00405C5F loc_405C5F:                             ; CODE XREF: sub_405C00+475↓j
.text:00405C5F                                         ; sub_405C00+485↓j
.text:00405C5F                 or      [ebp+0], edx
.text:00405C62                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00405C66                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00405C69                 call    GetFileInformationByHandle
.text:00405C6E                 sub     esp, 8
.text:00405C71                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00405C78                 test    ecx, ecx
.text:00405C7A                 jnz     short loc_405CB0
.text:00405C7C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00405C83                 test    edx, edx
.text:00405C85                 jnz     short loc_405CB0
.text:00405C87                 mov     edx, [ebp+0]
.text:00405C8A                 and     edx, 0F000h
.text:00405C90                 cmp     edx, 1000h
.text:00405C96                 jz      loc_406006
.text:00405C9C
.text:00405C9C loc_405C9C:                             ; CODE XREF: sub_405C00+459↓j
.text:00405C9C                                         ; sub_405C00+465↓j
.text:00405C9C                 test    ecx, ecx
.text:00405C9E                 jnz     short loc_405CB0
.text:00405CA0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00405CA7                 test    edx, edx
.text:00405CA9                 jz      loc_405FE4
.text:00405CAF                 nop
.text:00405CB0
.text:00405CB0 loc_405CB0:                             ; CODE XREF: sub_405C00+7A↑j
.text:00405CB0                                         ; sub_405C00+85↑j ...
.text:00405CB0                 cld
.text:00405CB1                 mov     esi, ebx
.text:00405CB3                 mov     dword ptr [ebp+14h], 0
.text:00405CBA                 lea     edi, [esp+0ECh+var_9C]
.text:00405CBE                 mov     ecx, 0Dh
.text:00405CC3                 rep movsd
.text:00405CC5                 xor     ebx, ebx
.text:00405CC7                 xor     edi, edi
.text:00405CC9                 mov     edx, [esp+0ECh+var_6C]
.text:00405CD0                 mov     esi, [esp+0ECh+var_70]
.text:00405CD4                 or      edx, ebx
.text:00405CD6                 mov     ebx, [esp+0ECh+var_9C]
.text:00405CDA                 mov     [ebp+8], edx
.text:00405CDD                 or      edi, esi
.text:00405CDF                 xor     edx, edx
.text:00405CE1                 mov     [ebp+0Ch], edi
.text:00405CE4                 test    bl, 10h
.text:00405CE7                 mov     esi, [esp+0ECh+var_80]
.text:00405CEB                 setz    dl
.text:00405CEE                 mov     [ebp+10h], esi
.text:00405CF1                 dec     edx
.text:00405CF2                 and     edx, 0FFFFC000h
.text:00405CF8                 add     edx, 8000h
.text:00405CFE                 or      edx, 124h
.text:00405D04                 test    bl, 1
.text:00405D07                 movzx   eax, dx
.text:00405D0A                 jnz     short loc_405D11
.text:00405D0C                 or      eax, 92h
.text:00405D11
.text:00405D11 loc_405D11:                             ; CODE XREF: sub_405C00+10A↑j
.text:00405D11                 or      [ebp+0], eax
.text:00405D14                 xor     edx, edx
.text:00405D16                 mov     ebx, [esp+0ECh+var_7C]
.text:00405D1A                 mov     ecx, [esp+0ECh+var_78]
.text:00405D1E                 mov     eax, edx
.text:00405D20                 xor     esi, esi
.text:00405D22                 mov     edx, [esp+0ECh+var_8C]
.text:00405D26                 mov     edi, ebx
.text:00405D28                 or      eax, edi
.text:00405D2A                 mov     [esp+0ECh+var_A8], eax
.text:00405D2E                 mov     ebx, ecx
.text:00405D30                 mov     edi, [esp+0ECh+var_74]
.text:00405D34                 or      ebx, esi
.text:00405D36                 mov     esi, [esp+0ECh+var_A8]
.text:00405D3A                 mov     [esp+0ECh+var_AC], ebx
.text:00405D3E                 xor     ebx, ebx
.text:00405D40                 mov     ecx, [esp+0ECh+var_AC]
.text:00405D44                 mov     [ebp+34h], esi
.text:00405D47                 mov     esi, [esp+0ECh+var_90]
.text:00405D4B                 mov     [ebp+18h], edi
.text:00405D4E                 xor     edi, edi
.text:00405D50                 or      esi, ebx
.text:00405D52                 mov     [ebp+30h], ecx
.text:00405D55                 or      edi, edx
.text:00405D57                 mov     edx, esi
.text:00405D59                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405D61                 sub     edx, 0D53E8000h
.text:00405D67                 mov     ebx, edi
.text:00405D69                 sbb     ebx, 19DB1DEh
.text:00405D6F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00405D73                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405D7B                 mov     [esp+0ECh+hFile], edx
.text:00405D7E                 call    sub_40CA40
.text:00405D83                 mov     ecx, eax
.text:00405D85                 shr     eax, 1Fh
.text:00405D88                 dec     eax
.text:00405D89                 and     ecx, eax
.text:00405D8B                 mov     [ebp+38h], ecx
.text:00405D8E                 mov     [esp+0ECh+hFile], esi
.text:00405D91                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405D95                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405D9D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405DA5                 call    sub_40CB60
.text:00405DAA                 lea     ebx, [eax+eax*4]
.text:00405DAD                 xor     ecx, ecx
.text:00405DAF                 lea     esi, [ebx+ebx*4]
.text:00405DB2                 shl     esi, 2
.text:00405DB5                 mov     edi, esi
.text:00405DB7                 shr     edi, 1Fh
.text:00405DBA                 dec     edi
.text:00405DBB                 and     edi, esi
.text:00405DBD                 mov     [ebp+3Ch], edi
.text:00405DC0                 mov     esi, [esp+0ECh+var_98]
.text:00405DC4                 xor     edi, edi
.text:00405DC6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405DCE                 mov     edx, [esp+0ECh+var_94]
.text:00405DD2                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405DDA                 or      esi, ecx
.text:00405DDC                 or      edi, edx
.text:00405DDE                 mov     edx, esi
.text:00405DE0                 mov     ecx, edi
.text:00405DE2                 sub     edx, 0D53E8000h
.text:00405DE8                 sbb     ecx, 19DB1DEh
.text:00405DEE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00405DF2                 mov     [esp+0ECh+hFile], edx
.text:00405DF5                 call    sub_40CA40
.text:00405DFA                 mov     ebx, eax
.text:00405DFC                 shr     eax, 1Fh
.text:00405DFF                 dec     eax
.text:00405E00                 and     ebx, eax
.text:00405E02                 mov     [ebp+48h], ebx
.text:00405E05                 xor     ebx, ebx
.text:00405E07                 mov     [esp+0ECh+hFile], esi
.text:00405E0A                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405E0E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405E16                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405E1E                 call    sub_40CB60
.text:00405E23                 lea     ecx, [eax+eax*4]
.text:00405E26                 lea     esi, [ecx+ecx*4]
.text:00405E29                 shl     esi, 2
.text:00405E2C                 mov     edi, esi
.text:00405E2E                 shr     edi, 1Fh
.text:00405E31                 dec     edi
.text:00405E32                 and     edi, esi
.text:00405E34                 mov     [ebp+4Ch], edi
.text:00405E37                 mov     esi, [esp+0ECh+var_88]
.text:00405E3B                 xor     edi, edi
.text:00405E3D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405E45                 mov     edx, [esp+0ECh+var_84]
.text:00405E49                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405E51                 or      esi, ebx
.text:00405E53                 or      edi, edx
.text:00405E55                 mov     edx, esi
.text:00405E57                 mov     ebx, edi
.text:00405E59                 sub     edx, 0D53E8000h
.text:00405E5F                 sbb     ebx, 19DB1DEh
.text:00405E65                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00405E69                 mov     [esp+0ECh+hFile], edx
.text:00405E6C                 call    sub_40CA40
.text:00405E71                 mov     ecx, eax
.text:00405E73                 shr     eax, 1Fh
.text:00405E76                 dec     eax
.text:00405E77                 and     ecx, eax
.text:00405E79                 mov     [ebp+40h], ecx
.text:00405E7C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405E80                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405E88                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405E90                 mov     [esp+0ECh+hFile], esi
.text:00405E93                 call    sub_40CB60
.text:00405E98                 mov     dword ptr [ebp+50h], 200h
.text:00405E9F                 lea     ebx, [eax+eax*4]
.text:00405EA2                 mov     edi, [esp+0ECh+var_A8]
.text:00405EA6                 lea     edx, [ebx+ebx*4]
.text:00405EA9                 mov     eax, [esp+0ECh+var_AC]
.text:00405EAD                 shl     edx, 2
.text:00405EB0                 mov     ecx, edx
.text:00405EB2                 shr     ecx, 1Fh
.text:00405EB5                 dec     ecx
.text:00405EB6                 and     ecx, edx
.text:00405EB8                 test    edi, edi
.text:00405EBA                 mov     edx, [esp+0ECh+var_A8]
.text:00405EBE                 mov     [ebp+44h], ecx
.text:00405EC1                 js      loc_405FD7
.text:00405EC7
.text:00405EC7 loc_405EC7:                             ; CODE XREF: sub_405C00+3DF↓j
.text:00405EC7                 mov     edi, [esp+0ECh+var_AC]
.text:00405ECB                 xor     esi, esi
.text:00405ECD                 mov     ecx, eax
.text:00405ECF                 shrd    ecx, edx, 9
.text:00405ED3                 mov     ebx, edx
.text:00405ED5                 mov     eax, esi
.text:00405ED7                 and     edi, 1FFh
.text:00405EDD                 sar     ebx, 9
.text:00405EE0                 or      eax, edi
.text:00405EE2                 jz      short loc_405EEA
.text:00405EE4                 add     ecx, 1
.text:00405EE7                 adc     ebx, 0
.text:00405EEA
.text:00405EEA loc_405EEA:                             ; CODE XREF: sub_405C00+2E2↑j
.text:00405EEA                 mov     [ebp+5Ch], ebx
.text:00405EED                 mov     esi, dword_40E050
.text:00405EF3                 xor     edi, edi
.text:00405EF5                 mov     [ebp+58h], ecx
.text:00405EF8                 mov     ebx, dword_40E050
.text:00405EFE                 mov     ecx, [esp+0ECh+var_A8]
.text:00405F02                 mov     edx, [esp+0ECh+var_AC]
.text:00405F06                 mov     [ebp+50h], ebx
.text:00405F09                 shr     ebx, 9
.text:00405F0C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00405F10                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00405F14                 mov     [esp+0ECh+nBufferSize], esi
.text:00405F18                 mov     [esp+0ECh+hFile], edx
.text:00405F1B                 call    sub_40CA40
.text:00405F20                 mov     [esp+0ECh+lpBytesRead], edi
.text:00405F24                 mov     ecx, [esp+0ECh+var_AC]
.text:00405F28                 mov     edi, [esp+0ECh+var_A8]
.text:00405F2C                 mov     [esp+0ECh+var_BC], ebx
.text:00405F30                 mov     [esp+0ECh+var_B4], eax
.text:00405F34                 mov     [esp+0ECh+var_B0], edx
.text:00405F38                 mov     [esp+0ECh+var_B8], 0
.text:00405F40                 mov     [esp+0ECh+nBufferSize], esi
.text:00405F44                 mov     [esp+0ECh+hFile], ecx
.text:00405F47                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405F4B                 call    sub_40CB60
.text:00405F50                 mov     ebx, edx
.text:00405F52                 or      ebx, eax
.text:00405F54                 jz      short loc_405FB0
.text:00405F56                 mov     edi, [esp+0ECh+var_B4]
.text:00405F5A                 mov     esi, [esp+0ECh+var_B0]
.text:00405F5E                 mov     eax, [esp+0ECh+var_BC]
.text:00405F62                 mov     [esp+0ECh+var_C4], edi
.text:00405F66                 mov     ecx, [esp+0ECh+var_B8]
.text:00405F6A                 add     [esp+0ECh+var_C4], 1
.text:00405F6F                 mov     [esp+0ECh+var_C0], esi
.text:00405F73                 adc     [esp+0ECh+var_C0], 0
.text:00405F78                 mul     [esp+0ECh+var_C4]
.text:00405F7C                 mov     edi, [esp+0ECh+var_C0]
.text:00405F80                 mov     ebx, edx
.text:00405F82                 mov     edx, [esp+0ECh+var_C4]
.text:00405F86                 mov     esi, eax
.text:00405F88                 mov     eax, ebx
.text:00405F8A                 imul    ecx, edx
.text:00405F8D                 mov     edx, [esp+0ECh+var_BC]
.text:00405F91                 imul    edx, edi
.text:00405F94                 add     eax, ecx
.text:00405F96                 lea     edi, [edx+eax]
.text:00405F99
.text:00405F99 loc_405F99:                             ; CODE XREF: sub_405C00+3D5↓j
.text:00405F99                 mov     [ebp+58h], esi
.text:00405F9C                 xor     eax, eax
.text:00405F9E                 mov     [ebp+5Ch], edi
.text:00405FA1
.text:00405FA1 loc_405FA1:                             ; CODE XREF: sub_405C00+20↑j
.text:00405FA1                 add     esp, 0DCh
.text:00405FA7                 pop     ebx
.text:00405FA8                 pop     esi
.text:00405FA9                 pop     edi
.text:00405FAA                 pop     ebp
.text:00405FAB                 retn
.text:00405FAB ; ---------------------------------------------------------------------------
.text:00405FAC                 align 10h
.text:00405FB0
.text:00405FB0 loc_405FB0:                             ; CODE XREF: sub_405C00+354↑j
.text:00405FB0                 mov     eax, [esp+0ECh+var_B4]
.text:00405FB4                 mov     edi, [esp+0ECh+var_B8]
.text:00405FB8                 mov     ebx, [esp+0ECh+var_B4]
.text:00405FBC                 mul     [esp+0ECh+var_BC]
.text:00405FC0                 mov     ecx, [esp+0ECh+var_BC]
.text:00405FC4                 imul    ebx, edi
.text:00405FC7                 mov     esi, eax
.text:00405FC9                 mov     eax, [esp+0ECh+var_B0]
.text:00405FCD                 add     edx, ebx
.text:00405FCF                 imul    ecx, eax
.text:00405FD2                 lea     edi, [ecx+edx]
.text:00405FD5                 jmp     short loc_405F99
.text:00405FD7 ; ---------------------------------------------------------------------------
.text:00405FD7
.text:00405FD7 loc_405FD7:                             ; CODE XREF: sub_405C00+2C1↑j
.text:00405FD7                 add     eax, 1FFh
.text:00405FDC                 adc     edx, 0
.text:00405FDF                 jmp     loc_405EC7
.text:00405FE4 ; ---------------------------------------------------------------------------
.text:00405FE4
.text:00405FE4 loc_405FE4:                             ; CODE XREF: sub_405C00+A9↑j
.text:00405FE4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00405FE7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00405FEE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00405FF2                 call    GetFileSize
.text:00405FF7                 sub     esp, 8
.text:00405FFA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00406001                 jmp     loc_405CB0
.text:00406006 ; ---------------------------------------------------------------------------
.text:00406006
.text:00406006 loc_406006:                             ; CODE XREF: sub_405C00+96↑j
.text:00406006                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040600E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00406012                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040601A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040601E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00406026                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040602E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00406036                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00406039                 call    PeekNamedPipe
.text:0040603E                 sub     esp, 18h
.text:00406041                 test    eax, eax
.text:00406043                 jz      short loc_40605E
.text:00406045                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00406049                 xor     eax, eax
.text:0040604B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00406052                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00406059                 jmp     loc_405C9C
.text:0040605E ; ---------------------------------------------------------------------------
.text:0040605E
.text:0040605E loc_40605E:                             ; CODE XREF: sub_405C00+443↑j
.text:0040605E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00406065                 jmp     loc_405C9C
.text:00406065 ; ---------------------------------------------------------------------------
.text:0040606A                 align 10h
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: sub_405C00+59↑j
.text:00406070                 mov     edx, 1000h
.text:00406075                 jmp     loc_405C5F
.text:00406075 ; ---------------------------------------------------------------------------
.text:0040607A                 align 10h
.text:00406080
.text:00406080 loc_406080:                             ; CODE XREF: sub_405C00+50↑j
.text:00406080                 mov     edx, 2000h
.text:00406085                 jmp     loc_405C5F
.text:00406085 sub_405C00      endp
.text:00406085
.text:00406085 ; ---------------------------------------------------------------------------
.text:0040608A aLnk_0          db '.lnk',0             ; DATA XREF: sub_4060D0+E0↓o
.text:0040608A                                         ; .text:0040677A↓o ...
.text:0040608F ; const CHAR aKernel32[]
.text:0040608F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_4060D0+12D↓o
.text:0040608F                                         ; .text:00406E2B↓o
.text:00406098 ; const CHAR aGetcompressedf[]
.text:00406098 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00406098                                         ; DATA XREF: sub_4060D0+13E↓o
.text:00406098                                         ; .text:00406E3C↓o
.text:004060AF ; const CHAR aGetbinarytypea[]
.text:004060AF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4060D0+333↓o
.text:004060AF                                         ; .text:004067D6↓o ...
.text:004060BE ; const char VarName[]
.text:004060BE VarName         db 'PATHEXT',0          ; DATA XREF: sub_4060D0:loc_4064B7↓o
.text:004060BE                                         ; .text:loc_406880↓o ...
.text:004060C6                 align 10h
.text:004060D0
.text:004060D0 ; =============== S U B R O U T I N E =======================================
.text:004060D0
.text:004060D0
.text:004060D0 ; int __cdecl sub_4060D0(char *String1, int)
.text:004060D0 sub_4060D0      proc near               ; CODE XREF: sub_406EB0+3CD↓p
.text:004060D0                                         ; sub_405610+1D85↓p
.text:004060D0
.text:004060D0 Str             = dword ptr -6Ch
.text:004060D0 lpProcName      = dword ptr -68h
.text:004060D0 var_64          = dword ptr -64h
.text:004060D0 var_60          = dword ptr -60h
.text:004060D0 var_5C          = dword ptr -5Ch
.text:004060D0 var_4C          = dword ptr -4Ch
.text:004060D0 var_48          = dword ptr -48h
.text:004060D0 var_44          = dword ptr -44h
.text:004060D0 var_40          = dword ptr -40h
.text:004060D0 var_3C          = dword ptr -3Ch
.text:004060D0 var_38          = dword ptr -38h
.text:004060D0 lpRootPathName  = dword ptr -30h
.text:004060D0 var_2C          = byte ptr -2Ch
.text:004060D0 var_28          = dword ptr -28h
.text:004060D0 var_24          = dword ptr -24h
.text:004060D0 var_20          = dword ptr -20h
.text:004060D0 var_1C          = dword ptr -1Ch
.text:004060D0 var_18          = byte ptr -18h
.text:004060D0 String1         = dword ptr  4
.text:004060D0 arg_4           = dword ptr  8
.text:004060D0
.text:004060D0                 push    ebp
.text:004060D1                 push    edi
.text:004060D2                 push    esi
.text:004060D3                 push    ebx
.text:004060D4                 sub     esp, 5Ch
.text:004060D7                 mov     edx, [esp+6Ch+String1]
.text:004060DB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004060DE                 call    sub_408180
.text:004060E3                 mov     [esp+6Ch+Str], eax
.text:004060E6                 call    sub_407850
.text:004060EB                 mov     [esp+6Ch+lpRootPathName], eax
.text:004060EF                 test    eax, eax
.text:004060F1                 jz      loc_406323
.text:004060F7                 mov     [esp+6Ch+Str], eax ; Str
.text:004060FA                 call    strlen
.text:004060FF                 mov     edx, [esp+6Ch+arg_4]
.text:00406103                 mov     ebx, eax
.text:00406105                 mov     esi, [edx+0Ch]
.text:00406108                 mov     edi, [edx+8]
.text:0040610B                 mov     eax, esi
.text:0040610D                 or      eax, edi
.text:0040610F                 jz      loc_406530
.text:00406115                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00406119                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040611C                 call    GetDriveTypeA
.text:00406121                 sub     esp, 4
.text:00406124                 cmp     eax, 4
.text:00406127                 jz      loc_406530
.text:0040612D
.text:0040612D loc_40612D:                             ; CODE XREF: sub_4060D0+48A↓j
.text:0040612D                                         ; sub_4060D0+4B2↓j
.text:0040612D                 mov     edx, [esp+6Ch+arg_4]
.text:00406131                 mov     esi, [edx+14h]
.text:00406134                 mov     edi, [edx+10h]
.text:00406137                 mov     ecx, esi
.text:00406139                 or      ecx, edi
.text:0040613B                 jnz     short loc_406165
.text:0040613D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00406141                 xor     esi, esi
.text:00406143                 xor     edi, edi
.text:00406145                 test    ebp, ebp
.text:00406147                 jz      short loc_406157
.text:00406149                 movzx   ebx, byte ptr [ebp+0]
.text:0040614D                 test    bl, bl
.text:0040614F                 mov     cl, bl
.text:00406151                 jnz     loc_4064E1
.text:00406157
.text:00406157 loc_406157:                             ; CODE XREF: sub_4060D0+77↑j
.text:00406157                 xor     eax, eax
.text:00406159                 xor     edx, edx
.text:0040615B
.text:0040615B loc_40615B:                             ; CODE XREF: sub_4060D0+458↓j
.text:0040615B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040615F                 mov     [ebp+10h], eax
.text:00406162                 mov     [ebp+14h], edx
.text:00406165
.text:00406165 loc_406165:                             ; CODE XREF: sub_4060D0+6B↑j
.text:00406165                 mov     edi, [esp+6Ch+String1]
.text:00406169                 xor     ebx, ebx
.text:0040616B                 test    edi, edi
.text:0040616D                 jz      loc_4063E3
.text:00406173                 mov     esi, [esp+6Ch+String1]
.text:00406177                 cmp     byte ptr [esi], 0
.text:0040617A                 jnz     loc_4063F0
.text:00406180
.text:00406180 loc_406180:                             ; CODE XREF: sub_4060D0+38C↓j
.text:00406180                                         ; sub_4060D0+397↓j
.text:00406180                 mov     ebp, [esp+6Ch+String1]
.text:00406184                 test    ebp, ebp
.text:00406186                 jz      loc_4063E3
.text:0040618C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00406194                 mov     edi, [esp+6Ch+String1]
.text:00406198                 mov     [esp+6Ch+Str], edi ; Str
.text:0040619B                 call    strrchr
.text:004061A0                 test    eax, eax
.text:004061A2                 jz      loc_4063E3
.text:004061A8                 cld
.text:004061A9                 mov     ecx, 5
.text:004061AE                 mov     esi, eax
.text:004061B0                 mov     edi, offset aLnk_0 ; ".lnk"
.text:004061B5                 repe cmpsb
.text:004061B7                 setz    cl
.text:004061BA                 movzx   eax, cl
.text:004061BD                 lea     esi, [esi+0]
.text:004061C0
.text:004061C0 loc_4061C0:                             ; CODE XREF: sub_4060D0+315↓j
.text:004061C0                 test    eax, eax
.text:004061C2                 jz      short loc_4061CA
.text:004061C4                 or      ebx, 0A000h
.text:004061CA
.text:004061CA loc_4061CA:                             ; CODE XREF: sub_4060D0+F2↑j
.text:004061CA                 mov     esi, [esp+6Ch+arg_4]
.text:004061CE                 xor     ecx, ecx
.text:004061D0                 mov     edi, ds:dword_40F1B0
.text:004061D6                 or      [esi], ebx
.text:004061D8                 mov     ebx, [esi+14h]
.text:004061DB                 mov     ebp, [esi+10h]
.text:004061DE                 mov     eax, ebx
.text:004061E0                 xor     eax, ecx
.text:004061E2                 xor     ebp, edi
.text:004061E4                 or      eax, ebp
.text:004061E6                 jnz     loc_406370
.text:004061EC
.text:004061EC loc_4061EC:                             ; CODE XREF: sub_4060D0+30E↓j
.text:004061EC                 mov     ecx, dword_40E050
.text:004061F2                 xor     esi, esi
.text:004061F4                 xor     edi, edi
.text:004061F6                 mov     edx, [esp+6Ch+arg_4]
.text:004061FA                 mov     [edx+50h], ecx
.text:004061FD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00406204                 call    LoadLibraryA
.text:00406209                 sub     esp, 4
.text:0040620C                 mov     ebp, eax
.text:0040620E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00406216                 mov     [esp+6Ch+Str], eax ; hModule
.text:00406219                 call    GetProcAddress
.text:0040621E                 sub     esp, 8
.text:00406221                 test    eax, eax
.text:00406223                 jz      short loc_406258
.text:00406225                 mov     ebx, [esp+6Ch+String1]
.text:00406229                 lea     esi, [esp+6Ch+var_2C]
.text:0040622D                 mov     [esp+6Ch+lpProcName], esi
.text:00406231                 mov     [esp+6Ch+Str], ebx
.text:00406234                 call    eax
.text:00406236                 sub     esp, 8
.text:00406239                 mov     ebx, eax
.text:0040623B                 cmp     eax, 0FFFFFFFFh
.text:0040623E                 jz      loc_406359
.text:00406244
.text:00406244 loc_406244:                             ; CODE XREF: sub_4060D0+29A↓j
.text:00406244                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00406248                 mov     ecx, ebx
.text:0040624A                 xor     edi, edi
.text:0040624C                 xor     ebx, ebx
.text:0040624E                 mov     edx, esi
.text:00406250                 mov     esi, ecx
.text:00406252                 or      esi, edi
.text:00406254                 mov     edi, ebx
.text:00406256                 or      edi, edx
.text:00406258
.text:00406258 loc_406258:                             ; CODE XREF: sub_4060D0+153↑j
.text:00406258                                         ; sub_4060D0+294↓j
.text:00406258                 test    ebp, ebp
.text:0040625A                 jz      short loc_406267
.text:0040625C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040625F                 call    FreeLibrary
.text:00406264                 sub     esp, 4
.text:00406267
.text:00406267 loc_406267:                             ; CODE XREF: sub_4060D0+18A↑j
.text:00406267                 mov     ebp, edi
.text:00406269                 mov     edx, ebp
.text:0040626B                 mov     edi, esi
.text:0040626D                 or      edx, esi
.text:0040626F                 jnz     short loc_40627B
.text:00406271                 mov     eax, [esp+6Ch+arg_4]
.text:00406275                 mov     edi, [eax+30h]
.text:00406278                 mov     ebp, [eax+34h]
.text:0040627B
.text:0040627B loc_40627B:                             ; CODE XREF: sub_4060D0+19F↑j
.text:0040627B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040627F                 mov     ebx, dword_40E050
.text:00406285                 xor     esi, esi
.text:00406287                 mov     [esp+6Ch+var_60], esi
.text:0040628B                 mov     [esp+6Ch+Str], edi
.text:0040628E                 mov     [esp+6Ch+var_64], ebx
.text:00406292                 call    sub_40CA40
.text:00406297                 mov     [esp+6Ch+var_3C], eax
.text:0040629B                 mov     ecx, dword_40E050
.text:004062A1                 mov     [esp+6Ch+lpProcName], ebp
.text:004062A5                 mov     [esp+6Ch+var_38], edx
.text:004062A9                 shr     ecx, 9
.text:004062AC                 mov     [esp+6Ch+var_44], ecx
.text:004062B0                 mov     [esp+6Ch+var_40], 0
.text:004062B8                 mov     [esp+6Ch+var_64], ebx
.text:004062BC                 mov     [esp+6Ch+var_60], esi
.text:004062C0                 mov     [esp+6Ch+Str], edi
.text:004062C3                 call    sub_40CB60
.text:004062C8                 mov     ebp, edx
.text:004062CA                 or      ebp, eax
.text:004062CC                 jz      short loc_406330
.text:004062CE                 mov     ebp, [esp+6Ch+var_3C]
.text:004062D2                 mov     esi, [esp+6Ch+var_38]
.text:004062D6                 mov     eax, [esp+6Ch+var_44]
.text:004062DA                 mov     [esp+6Ch+var_4C], ebp
.text:004062DE                 mov     ecx, [esp+6Ch+var_40]
.text:004062E2                 mov     ebx, [esp+6Ch+var_44]
.text:004062E6                 add     [esp+6Ch+var_4C], 1
.text:004062EB                 mov     [esp+6Ch+var_48], esi
.text:004062EF                 mov     edi, [esp+6Ch+var_4C]
.text:004062F3                 adc     [esp+6Ch+var_48], 0
.text:004062F8                 mul     [esp+6Ch+var_4C]
.text:004062FC                 imul    ecx, edi
.text:004062FF                 mov     esi, eax
.text:00406301                 mov     eax, [esp+6Ch+var_48]
.text:00406305                 add     edx, ecx
.text:00406307                 imul    ebx, eax
.text:0040630A                 lea     edi, [ebx+edx]
.text:0040630D
.text:0040630D loc_40630D:                             ; CODE XREF: sub_4060D0+287↓j
.text:0040630D                 mov     ebx, [esp+6Ch+arg_4]
.text:00406311                 mov     [ebx+58h], esi
.text:00406314                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00406318                 mov     [ebx+5Ch], edi
.text:0040631B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040631E                 call    free
.text:00406323
.text:00406323 loc_406323:                             ; CODE XREF: sub_4060D0+21↑j
.text:00406323                 add     esp, 5Ch
.text:00406326                 xor     eax, eax
.text:00406328                 pop     ebx
.text:00406329                 pop     esi
.text:0040632A                 pop     edi
.text:0040632B                 pop     ebp
.text:0040632C                 retn
.text:0040632C ; ---------------------------------------------------------------------------
.text:0040632D                 align 10h
.text:00406330
.text:00406330 loc_406330:                             ; CODE XREF: sub_4060D0+1FC↑j
.text:00406330                 mov     eax, [esp+6Ch+var_3C]
.text:00406334                 mov     edi, [esp+6Ch+var_40]
.text:00406338                 mov     ecx, [esp+6Ch+var_3C]
.text:0040633C                 mul     [esp+6Ch+var_44]
.text:00406340                 mov     ebx, [esp+6Ch+var_44]
.text:00406344                 imul    ecx, edi
.text:00406347                 mov     ebp, edx
.text:00406349                 mov     esi, eax
.text:0040634B                 mov     edx, [esp+6Ch+var_38]
.text:0040634F                 add     ebp, ecx
.text:00406351                 imul    ebx, edx
.text:00406354                 lea     edi, [ebx+ebp]
.text:00406357                 jmp     short loc_40630D
.text:00406359 ; ---------------------------------------------------------------------------
.text:00406359
.text:00406359 loc_406359:                             ; CODE XREF: sub_4060D0+16E↑j
.text:00406359                 call    GetLastError
.text:0040635E                 xor     esi, esi
.text:00406360                 xor     edi, edi
.text:00406362                 test    eax, eax
.text:00406364                 jnz     loc_406258
.text:0040636A                 jmp     loc_406244
.text:0040636A ; ---------------------------------------------------------------------------
.text:0040636F                 align 10h
.text:00406370
.text:00406370 loc_406370:                             ; CODE XREF: sub_4060D0+116↑j
.text:00406370                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00406374                 lea     ecx, [esp+6Ch+var_20]
.text:00406378                 lea     ebx, [esp+6Ch+var_1C]
.text:0040637C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00406380                 lea     edi, [esp+6Ch+var_24]
.text:00406384                 lea     ebp, [esp+6Ch+var_28]
.text:00406388                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040638C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00406390                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00406394                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00406397                 call    sub_408BA0
.text:0040639C                 test    eax, eax
.text:0040639E                 jnz     short loc_4063C0
.text:004063A0                 mov     [esp+6Ch+var_28], 1
.text:004063A8                 mov     [esp+6Ch+var_24], 200h
.text:004063B0                 mov     [esp+6Ch+var_20], 0
.text:004063B8                 mov     [esp+6Ch+var_1C], 0
.text:004063C0
.text:004063C0 loc_4063C0:                             ; CODE XREF: sub_4060D0+2CE↑j
.text:004063C0                 mov     ebp, [esp+6Ch+var_24]
.text:004063C4                 mov     edi, [esp+6Ch+var_28]
.text:004063C8                 mov     eax, [esp+6Ch+arg_4]
.text:004063CC                 imul    ebp, edi
.text:004063CF                 mov     esi, [eax+10h]
.text:004063D2                 mov     dword_40E050, ebp
.text:004063D8                 mov     ds:dword_40F1B0, esi
.text:004063DE                 jmp     loc_4061EC
.text:004063E3 ; ---------------------------------------------------------------------------
.text:004063E3
.text:004063E3 loc_4063E3:                             ; CODE XREF: sub_4060D0+9D↑j
.text:004063E3                                         ; sub_4060D0+B6↑j ...
.text:004063E3                 xor     eax, eax
.text:004063E5                 jmp     loc_4061C0
.text:004063E5 ; ---------------------------------------------------------------------------
.text:004063EA                 align 10h
.text:004063F0
.text:004063F0 loc_4063F0:                             ; CODE XREF: sub_4060D0+AA↑j
.text:004063F0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:004063F7                 xor     ebp, ebp
.text:004063F9                 call    GetModuleHandleA
.text:004063FE                 sub     esp, 4
.text:00406401                 mov     edi, eax
.text:00406403                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040640B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040640E                 call    GetProcAddress
.text:00406413                 sub     esp, 8
.text:00406416                 mov     edx, eax
.text:00406418                 test    eax, eax
.text:0040641A                 jz      short loc_406434
.text:0040641C                 mov     eax, [esp+6Ch+String1]
.text:00406420                 lea     ecx, [esp+6Ch+var_18]
.text:00406424                 mov     [esp+6Ch+lpProcName], ecx
.text:00406428                 mov     [esp+6Ch+Str], eax
.text:0040642B                 call    edx
.text:0040642D                 sub     esp, 8
.text:00406430                 test    eax, eax
.text:00406432                 jnz     short loc_406498
.text:00406434
.text:00406434 loc_406434:                             ; CODE XREF: sub_4060D0+34A↑j
.text:00406434                 mov     edx, ds:Str
.text:0040643A                 test    edx, edx
.text:0040643C                 jz      short loc_4064B7
.text:0040643E
.text:0040643E loc_40643E:                             ; CODE XREF: sub_4060D0+3FA↓j
.text:0040643E                                         ; sub_4060D0+40C↓j
.text:0040643E                 mov     eax, [esp+6Ch+String1]
.text:00406442                 test    eax, eax
.text:00406444                 jz      short loc_40644F
.text:00406446                 mov     esi, [esp+6Ch+String1]
.text:0040644A                 cmp     byte ptr [esi], 0
.text:0040644D                 jnz     short loc_40646C
.text:0040644F
.text:0040644F loc_40644F:                             ; CODE XREF: sub_4060D0+374↑j
.text:0040644F                                         ; sub_4060D0+3B0↓j ...
.text:0040644F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00406452                 call    FreeLibrary
.text:00406457                 sub     esp, 4
.text:0040645A                 test    ebp, ebp
.text:0040645C                 jz      loc_406180
.text:00406462                 mov     ebx, 49h ; 'I'
.text:00406467                 jmp     loc_406180
.text:0040646C ; ---------------------------------------------------------------------------
.text:0040646C
.text:0040646C loc_40646C:                             ; CODE XREF: sub_4060D0+37D↑j
.text:0040646C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040646F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00406477                 call    strrchr
.text:0040647C                 test    eax, eax
.text:0040647E                 mov     esi, eax
.text:00406480                 jz      short loc_40644F
.text:00406482                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00406486                 mov     ecx, ds:Str
.text:0040648C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040648F                 call    strstr
.text:00406494                 test    eax, eax
.text:00406496                 jz      short loc_40649F
.text:00406498
.text:00406498 loc_406498:                             ; CODE XREF: sub_4060D0+362↑j
.text:00406498                                         ; sub_4060D0+3E5↓j
.text:00406498                 mov     ebp, 1
.text:0040649D                 jmp     short loc_40644F
.text:0040649F ; ---------------------------------------------------------------------------
.text:0040649F
.text:0040649F loc_40649F:                             ; CODE XREF: sub_4060D0+3C6↑j
.text:0040649F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:004064A3                 mov     edx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:004064A9                 mov     [esp+6Ch+Str], edx ; Str
.text:004064AC                 call    strstr
.text:004064B1                 test    eax, eax
.text:004064B3                 jz      short loc_40644F
.text:004064B5                 jmp     short loc_406498
.text:004064B7 ; ---------------------------------------------------------------------------
.text:004064B7
.text:004064B7 loc_4064B7:                             ; CODE XREF: sub_4060D0+36C↑j
.text:004064B7                 mov     [esp+6Ch+Str], offset VarName ; "PATHEXT"
.text:004064BE                 call    getenv
.text:004064C3                 mov     ds:Str, eax
.text:004064C8                 test    eax, eax
.text:004064CA                 jnz     loc_40643E
.text:004064D0                 mov     esi, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:004064D6                 mov     ds:Str, esi
.text:004064DC                 jmp     loc_40643E
.text:004064E1 ; ---------------------------------------------------------------------------
.text:004064E1
.text:004064E1 loc_4064E1:                             ; CODE XREF: sub_4060D0+81↑j
.text:004064E1                                         ; sub_4060D0+452↓j
.text:004064E1                 shld    edi, esi, 8
.text:004064E5                 movsx   eax, cl
.text:004064E8                 shl     esi, 8
.text:004064EB                 cdq
.text:004064EC                 add     esi, eax
.text:004064EE                 adc     edi, edx
.text:004064F0                 mov     edx, edi
.text:004064F2                 xor     ebx, ebx
.text:004064F4                 and     edx, 0FF000000h
.text:004064FA                 mov     eax, edx
.text:004064FC                 or      eax, ebx
.text:004064FE                 jz      short loc_406519
.text:00406500                 mov     ecx, edx
.text:00406502                 xor     eax, eax
.text:00406504                 shr     ecx, 10h
.text:00406507                 mov     edx, esi
.text:00406509                 xor     edx, ecx
.text:0040650B                 mov     ecx, edi
.text:0040650D                 xor     ecx, eax
.text:0040650F                 mov     esi, edx
.text:00406511                 mov     edi, ecx
.text:00406513                 and     edi, 0FFFFFFh
.text:00406519
.text:00406519 loc_406519:                             ; CODE XREF: sub_4060D0+42E↑j
.text:00406519                 inc     ebp
.text:0040651A                 movzx   ebx, byte ptr [ebp+0]
.text:0040651E                 test    bl, bl
.text:00406520                 mov     cl, bl
.text:00406522                 jnz     short loc_4064E1
.text:00406524                 mov     eax, esi
.text:00406526                 mov     edx, edi
.text:00406528                 jmp     loc_40615B
.text:00406528 ; ---------------------------------------------------------------------------
.text:0040652D                 align 10h
.text:00406530
.text:00406530 loc_406530:                             ; CODE XREF: sub_4060D0+3F↑j
.text:00406530                                         ; sub_4060D0+57↑j
.text:00406530                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00406534                 mov     ebp, [esp+6Ch+String1]
.text:00406538                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040653C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040653F                 call    _stricmp
.text:00406544                 test    eax, eax
.text:00406546                 jnz     short loc_406560
.text:00406548                 mov     ebx, [esp+6Ch+arg_4]
.text:0040654C                 mov     dword ptr [ebx+8], 5
.text:00406553                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040655A                 jmp     loc_40612D
.text:0040655A ; ---------------------------------------------------------------------------
.text:0040655F                 align 10h
.text:00406560
.text:00406560 loc_406560:                             ; CODE XREF: sub_4060D0+476↑j
.text:00406560                 mov     ebp, [esp+6Ch+String1]
.text:00406564                 xor     esi, esi
.text:00406566                 xor     edi, edi
.text:00406568                 add     ebp, ebx
.text:0040656A                 jz      short loc_406574
.text:0040656C                 movzx   ecx, byte ptr [ebp+0]
.text:00406570                 test    cl, cl
.text:00406572                 jnz     short loc_406587
.text:00406574
.text:00406574 loc_406574:                             ; CODE XREF: sub_4060D0+49A↑j
.text:00406574                 xor     eax, eax
.text:00406576                 xor     edx, edx
.text:00406578
.text:00406578 loc_406578:                             ; CODE XREF: sub_4060D0+4FE↓j
.text:00406578                 mov     ebp, [esp+6Ch+arg_4]
.text:0040657C                 mov     [ebp+8], eax
.text:0040657F                 mov     [ebp+0Ch], edx
.text:00406582                 jmp     loc_40612D
.text:00406587 ; ---------------------------------------------------------------------------
.text:00406587
.text:00406587 loc_406587:                             ; CODE XREF: sub_4060D0+4A2↑j
.text:00406587                                         ; sub_4060D0+4F8↓j
.text:00406587                 shld    edi, esi, 8
.text:0040658B                 movsx   eax, cl
.text:0040658E                 shl     esi, 8
.text:00406591                 cdq
.text:00406592                 add     esi, eax
.text:00406594                 adc     edi, edx
.text:00406596                 mov     edx, edi
.text:00406598                 xor     ebx, ebx
.text:0040659A                 and     edx, 0FF000000h
.text:004065A0                 mov     eax, edx
.text:004065A2                 or      eax, ebx
.text:004065A4                 jz      short loc_4065BF
.text:004065A6                 mov     ecx, edx
.text:004065A8                 xor     eax, eax
.text:004065AA                 shr     ecx, 10h
.text:004065AD                 mov     edx, esi
.text:004065AF                 xor     edx, ecx
.text:004065B1                 mov     ecx, edi
.text:004065B3                 xor     ecx, eax
.text:004065B5                 mov     esi, edx
.text:004065B7                 mov     edi, ecx
.text:004065B9                 and     edi, 0FFFFFFh
.text:004065BF
.text:004065BF loc_4065BF:                             ; CODE XREF: sub_4060D0+4D4↑j
.text:004065BF                 inc     ebp
.text:004065C0                 movzx   ebx, byte ptr [ebp+0]
.text:004065C4                 test    bl, bl
.text:004065C6                 mov     cl, bl
.text:004065C8                 jnz     short loc_406587
.text:004065CA                 mov     eax, esi
.text:004065CC                 mov     edx, edi
.text:004065CE                 jmp     short loc_406578
.text:004065CE sub_4060D0      endp
.text:004065CE
.text:004065D0
.text:004065D0 ; =============== S U B R O U T I N E =======================================
.text:004065D0
.text:004065D0
.text:004065D0 ; int __cdecl sub_4065D0(LPCSTR)
.text:004065D0 sub_4065D0      proc near               ; CODE XREF: sub_4082A0+CA↓p
.text:004065D0
.text:004065D0 lpRootPathName  = dword ptr -83Ch
.text:004065D0 lpVolumeNameBuffer= dword ptr -838h
.text:004065D0 nVolumeNameSize = dword ptr -834h
.text:004065D0 lpVolumeSerialNumber= dword ptr -830h
.text:004065D0 lpMaximumComponentLength= dword ptr -82Ch
.text:004065D0 lpFileSystemFlags= dword ptr -828h
.text:004065D0 lpFileSystemNameBuffer= dword ptr -824h
.text:004065D0 nFileSystemNameSize= dword ptr -820h
.text:004065D0 VolumeSerialNumber= dword ptr -818h
.text:004065D0 MaximumComponentLength= dword ptr -814h
.text:004065D0 FileSystemFlags = dword ptr -810h
.text:004065D0 FileSystemNameBuffer= byte ptr -80Ch
.text:004065D0 VolumeNameBuffer= byte ptr -40Ch
.text:004065D0 var_4           = dword ptr -4
.text:004065D0 arg_0           = dword ptr  4
.text:004065D0
.text:004065D0                 sub     esp, 83Ch
.text:004065D6                 mov     [esp+83Ch+var_4], ebx
.text:004065DD                 mov     ebx, [esp+83Ch+arg_0]
.text:004065E4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:004065E7                 call    sub_408180
.text:004065EC                 mov     [esp+83Ch+lpRootPathName], eax
.text:004065EF                 call    sub_407850
.text:004065F4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004065F7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004065FB                 mov     ebx, eax
.text:004065FD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00406601                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00406605                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00406609                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040660D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00406611                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00406615                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040661C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00406620                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00406624                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040662C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00406634                 call    GetVolumeInformationA
.text:00406639                 sub     esp, 20h
.text:0040663C                 test    eax, eax
.text:0040663E                 setz    cl
.text:00406641                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00406644                 movzx   edx, cl
.text:00406647                 dec     edx
.text:00406648                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040664C                 call    free
.text:00406651                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00406655                 mov     ebx, [esp+83Ch+var_4]
.text:0040665C                 add     esp, 83Ch
.text:00406662                 retn
.text:00406662 sub_4065D0      endp
.text:00406662
.text:00406662 ; ---------------------------------------------------------------------------
.text:00406663                 align 10h
.text:00406670                 push    ebp
.text:00406671                 push    edi
.text:00406672                 xor     edi, edi
.text:00406674                 push    esi
.text:00406675                 xor     esi, esi
.text:00406677                 push    ebx
.text:00406678                 mov     ebp, [esp+14h]
.text:0040667C                 test    ebp, ebp
.text:0040667E                 jz      short loc_406688
.text:00406680                 movzx   ecx, byte ptr [ebp+0]
.text:00406684                 test    cl, cl
.text:00406686                 jnz     short loc_406691
.text:00406688
.text:00406688 loc_406688:                             ; CODE XREF: .text:0040667E↑j
.text:00406688                 xor     eax, eax
.text:0040668A                 xor     edx, edx
.text:0040668C
.text:0040668C loc_40668C:                             ; CODE XREF: .text:004066D8↓j
.text:0040668C                 pop     ebx
.text:0040668D                 pop     esi
.text:0040668E                 pop     edi
.text:0040668F                 pop     ebp
.text:00406690                 retn
.text:00406691 ; ---------------------------------------------------------------------------
.text:00406691
.text:00406691 loc_406691:                             ; CODE XREF: .text:00406686↑j
.text:00406691                                         ; .text:004066D2↓j
.text:00406691                 shld    edi, esi, 8
.text:00406695                 movsx   eax, cl
.text:00406698                 shl     esi, 8
.text:0040669B                 cdq
.text:0040669C                 add     esi, eax
.text:0040669E                 adc     edi, edx
.text:004066A0                 mov     edx, edi
.text:004066A2                 xor     ebx, ebx
.text:004066A4                 and     edx, 0FF000000h
.text:004066AA                 mov     eax, edx
.text:004066AC                 or      eax, ebx
.text:004066AE                 jz      short loc_4066C9
.text:004066B0                 mov     ecx, edx
.text:004066B2                 xor     eax, eax
.text:004066B4                 shr     ecx, 10h
.text:004066B7                 mov     edx, esi
.text:004066B9                 xor     edx, ecx
.text:004066BB                 mov     ecx, edi
.text:004066BD                 xor     ecx, eax
.text:004066BF                 mov     esi, edx
.text:004066C1                 mov     edi, ecx
.text:004066C3                 and     edi, 0FFFFFFh
.text:004066C9
.text:004066C9 loc_4066C9:                             ; CODE XREF: .text:004066AE↑j
.text:004066C9                 inc     ebp
.text:004066CA                 movzx   ebx, byte ptr [ebp+0]
.text:004066CE                 test    bl, bl
.text:004066D0                 mov     cl, bl
.text:004066D2                 jnz     short loc_406691
.text:004066D4                 mov     eax, esi
.text:004066D6                 mov     edx, edi
.text:004066D8                 jmp     short loc_40668C
.text:004066D8 ; ---------------------------------------------------------------------------
.text:004066DA                 align 10h
.text:004066E0                 sub     esp, 2Ch
.text:004066E3                 lea     edx, [esp+24h]
.text:004066E7                 lea     ecx, [esp+28h]
.text:004066EB                 mov     [esp+0Ch], edx
.text:004066EF                 lea     edx, [esp+1Ch]
.text:004066F3                 mov     [esp+4], edx
.text:004066F7                 mov     edx, [esp+30h]
.text:004066FB                 mov     [esp+10h], ecx
.text:004066FF                 lea     ecx, [esp+20h]
.text:00406703                 mov     [esp+8], ecx
.text:00406707                 mov     [esp], edx
.text:0040670A                 call    sub_408BA0
.text:0040670F                 test    eax, eax
.text:00406711                 jnz     short loc_406733
.text:00406713                 mov     dword ptr [esp+1Ch], 1
.text:0040671B                 mov     dword ptr [esp+20h], 200h
.text:00406723                 mov     dword ptr [esp+24h], 0
.text:0040672B                 mov     dword ptr [esp+28h], 0
.text:00406733
.text:00406733 loc_406733:                             ; CODE XREF: .text:00406711↑j
.text:00406733                 mov     eax, [esp+20h]
.text:00406737                 mov     ecx, [esp+1Ch]
.text:0040673B                 add     esp, 2Ch
.text:0040673E                 imul    eax, ecx
.text:00406741                 retn
.text:00406741 ; ---------------------------------------------------------------------------
.text:00406742                 align 10h
.text:00406750                 sub     esp, 1Ch
.text:00406753                 mov     eax, [esp+20h]
.text:00406757                 mov     [esp+14h], esi
.text:0040675B                 mov     [esp+18h], edi
.text:0040675F                 test    eax, eax
.text:00406761                 jz      short loc_4067A0
.text:00406763                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040676B                 mov     [esp], eax
.text:0040676E                 call    strrchr
.text:00406773                 test    eax, eax
.text:00406775                 jz      short loc_4067A0
.text:00406777                 cld
.text:00406778                 mov     esi, eax
.text:0040677A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040677F                 mov     ecx, 5
.text:00406784                 repe cmpsb
.text:00406786                 setz    dl
.text:00406789                 movzx   eax, dl
.text:0040678C                 lea     esi, [esi+0]
.text:00406790
.text:00406790 loc_406790:                             ; CODE XREF: .text:004067A2↓j
.text:00406790                 mov     esi, [esp+14h]
.text:00406794                 mov     edi, [esp+18h]
.text:00406798                 add     esp, 1Ch
.text:0040679B                 retn
.text:0040679B ; ---------------------------------------------------------------------------
.text:0040679C                 align 10h
.text:004067A0
.text:004067A0 loc_4067A0:                             ; CODE XREF: .text:00406761↑j
.text:004067A0                                         ; .text:00406775↑j
.text:004067A0                 xor     eax, eax
.text:004067A2                 jmp     short loc_406790
.text:004067A2 ; ---------------------------------------------------------------------------
.text:004067A4                 align 10h
.text:004067B0                 sub     esp, 1Ch
.text:004067B3                 mov     [esp+10h], ebx
.text:004067B7                 mov     ebx, [esp+20h]
.text:004067BB                 mov     [esp+14h], esi
.text:004067BF                 mov     [esp+18h], edi
.text:004067C3                 xor     edi, edi
.text:004067C5                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:004067CC                 call    GetModuleHandleA
.text:004067D1                 sub     esp, 4
.text:004067D4                 mov     esi, eax
.text:004067D6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004067DE                 mov     [esp], eax
.text:004067E1                 call    GetProcAddress
.text:004067E6                 sub     esp, 8
.text:004067E9                 test    eax, eax
.text:004067EB                 jz      short loc_406801
.text:004067ED                 mov     [esp], ebx
.text:004067F0                 lea     ecx, [esp+0Ch]
.text:004067F4                 mov     [esp+4], ecx
.text:004067F8                 call    eax
.text:004067FA                 sub     esp, 8
.text:004067FD                 test    eax, eax
.text:004067FF                 jnz     short loc_406860
.text:00406801
.text:00406801 loc_406801:                             ; CODE XREF: .text:004067EB↑j
.text:00406801                 mov     eax, ds:Str
.text:00406806                 test    eax, eax
.text:00406808                 jz      short loc_406880
.text:0040680A
.text:0040680A loc_40680A:                             ; CODE XREF: .text:00406893↓j
.text:0040680A                                         ; .text:004068A5↓j
.text:0040680A                 test    ebx, ebx
.text:0040680C                 jz      short loc_406813
.text:0040680E                 cmp     byte ptr [ebx], 0
.text:00406811                 jnz     short loc_406830
.text:00406813
.text:00406813 loc_406813:                             ; CODE XREF: .text:0040680C↑j
.text:00406813                                         ; .text:00406844↓j ...
.text:00406813                 mov     [esp], esi
.text:00406816                 call    FreeLibrary
.text:0040681B                 sub     esp, 4
.text:0040681E                 mov     eax, edi
.text:00406820                 mov     ebx, [esp+10h]
.text:00406824                 mov     esi, [esp+14h]
.text:00406828                 mov     edi, [esp+18h]
.text:0040682C                 add     esp, 1Ch
.text:0040682F                 retn
.text:00406830 ; ---------------------------------------------------------------------------
.text:00406830
.text:00406830 loc_406830:                             ; CODE XREF: .text:00406811↑j
.text:00406830                 mov     [esp], ebx
.text:00406833                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040683B                 call    strrchr
.text:00406840                 test    eax, eax
.text:00406842                 mov     ebx, eax
.text:00406844                 jz      short loc_406813
.text:00406846                 mov     [esp+4], eax
.text:0040684A                 mov     ecx, ds:Str
.text:00406850                 mov     [esp], ecx
.text:00406853                 call    strstr
.text:00406858                 test    eax, eax
.text:0040685A                 jz      short loc_406867
.text:0040685C                 lea     esi, [esi+0]
.text:00406860
.text:00406860 loc_406860:                             ; CODE XREF: .text:004067FF↑j
.text:00406860                                         ; .text:0040687D↓j
.text:00406860                 mov     edi, 1
.text:00406865                 jmp     short loc_406813
.text:00406867 ; ---------------------------------------------------------------------------
.text:00406867
.text:00406867 loc_406867:                             ; CODE XREF: .text:0040685A↑j
.text:00406867                 mov     [esp+4], ebx
.text:0040686B                 mov     ebx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00406871                 mov     [esp], ebx
.text:00406874                 call    strstr
.text:00406879                 test    eax, eax
.text:0040687B                 jz      short loc_406813
.text:0040687D                 jmp     short loc_406860
.text:0040687D ; ---------------------------------------------------------------------------
.text:0040687F                 align 10h
.text:00406880
.text:00406880 loc_406880:                             ; CODE XREF: .text:00406808↑j
.text:00406880                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:00406887                 call    getenv
.text:0040688C                 mov     ds:Str, eax
.text:00406891                 test    eax, eax
.text:00406893                 jnz     loc_40680A
.text:00406899                 mov     edx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:0040689F                 mov     ds:Str, edx
.text:004068A5                 jmp     loc_40680A
.text:004068A5 ; ---------------------------------------------------------------------------
.text:004068AA                 align 10h
.text:004068B0                 sub     esp, 0Ch
.text:004068B3                 mov     edx, [esp+10h]
.text:004068B7                 mov     [esp], edx
.text:004068BA                 call    GetFileType
.text:004068BF                 sub     esp, 4
.text:004068C2                 xor     edx, edx
.text:004068C4                 cmp     eax, 2
.text:004068C7                 jz      short loc_4068E0
.text:004068C9                 cmp     eax, 3
.text:004068CC                 jz      short loc_4068D4
.text:004068CE
.text:004068CE loc_4068CE:                             ; CODE XREF: .text:004068D9↓j
.text:004068CE                                         ; .text:004068E5↓j
.text:004068CE                 mov     eax, edx
.text:004068D0                 add     esp, 0Ch
.text:004068D3                 retn
.text:004068D4 ; ---------------------------------------------------------------------------
.text:004068D4
.text:004068D4 loc_4068D4:                             ; CODE XREF: .text:004068CC↑j
.text:004068D4                 mov     edx, 1000h
.text:004068D9                 jmp     short loc_4068CE
.text:004068D9 ; ---------------------------------------------------------------------------
.text:004068DB                 align 10h
.text:004068E0
.text:004068E0 loc_4068E0:                             ; CODE XREF: .text:004068C7↑j
.text:004068E0                 mov     edx, 2000h
.text:004068E5                 jmp     short loc_4068CE
.text:004068E5 ; ---------------------------------------------------------------------------
.text:004068E7                 align 10h
.text:004068F0                 mov     ecx, [esp+4]
.text:004068F4                 xor     edx, edx
.text:004068F6                 test    cl, 10h
.text:004068F9                 setz    dl
.text:004068FC                 dec     edx
.text:004068FD                 and     edx, 0FFFFC000h
.text:00406903                 add     edx, 8000h
.text:00406909                 or      edx, 124h
.text:0040690F                 test    cl, 1
.text:00406912                 movzx   eax, dx
.text:00406915                 jnz     short locret_40691C
.text:00406917                 or      eax, 92h
.text:0040691C
.text:0040691C locret_40691C:                          ; CODE XREF: .text:00406915↑j
.text:0040691C                 retn
.text:0040691C ; ---------------------------------------------------------------------------
.text:0040691D                 align 10h
.text:00406920                 sub     esp, 2Ch
.text:00406923                 mov     [esp+20h], esi
.text:00406927                 mov     esi, [esp+30h]
.text:0040692B                 mov     [esp+1Ch], ebx
.text:0040692F                 xor     ebx, ebx
.text:00406931                 test    esi, esi
.text:00406933                 mov     [esp+24h], edi
.text:00406937                 mov     [esp+28h], ebp
.text:0040693B                 jz      short loc_406990
.text:0040693D                 cmp     byte ptr [esi], 0
.text:00406940                 jnz     short loc_406994
.text:00406942
.text:00406942 loc_406942:                             ; CODE XREF: .text:004069FC↓j
.text:00406942                                         ; .text:00406A07↓j
.text:00406942                 test    esi, esi
.text:00406944                 jz      short loc_406990
.text:00406946                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040694E                 mov     [esp], esi
.text:00406951                 call    strrchr
.text:00406956                 test    eax, eax
.text:00406958                 jz      short loc_406990
.text:0040695A                 cld
.text:0040695B                 mov     ecx, 5
.text:00406960                 mov     esi, eax
.text:00406962                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00406967                 repe cmpsb
.text:00406969                 setz    cl
.text:0040696C                 movzx   eax, cl
.text:0040696F                 nop
.text:00406970
.text:00406970 loc_406970:                             ; CODE XREF: .text:00406992↓j
.text:00406970                 test    eax, eax
.text:00406972                 jz      short loc_40697A
.text:00406974                 or      ebx, 0A000h
.text:0040697A
.text:0040697A loc_40697A:                             ; CODE XREF: .text:00406972↑j
.text:0040697A                 mov     eax, ebx
.text:0040697C                 mov     esi, [esp+20h]
.text:00406980                 mov     ebx, [esp+1Ch]
.text:00406984                 mov     edi, [esp+24h]
.text:00406988                 mov     ebp, [esp+28h]
.text:0040698C                 add     esp, 2Ch
.text:0040698F                 retn
.text:00406990 ; ---------------------------------------------------------------------------
.text:00406990
.text:00406990 loc_406990:                             ; CODE XREF: .text:0040693B↑j
.text:00406990                                         ; .text:00406944↑j ...
.text:00406990                 xor     eax, eax
.text:00406992                 jmp     short loc_406970
.text:00406994 ; ---------------------------------------------------------------------------
.text:00406994
.text:00406994 loc_406994:                             ; CODE XREF: .text:00406940↑j
.text:00406994                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040699B                 call    GetModuleHandleA
.text:004069A0                 sub     esp, 4
.text:004069A3                 mov     ebp, eax
.text:004069A5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004069AD                 mov     [esp], eax
.text:004069B0                 call    GetProcAddress
.text:004069B5                 sub     esp, 8
.text:004069B8                 test    eax, eax
.text:004069BA                 mov     dword ptr [esp+14h], 0
.text:004069C2                 jz      short loc_4069D8
.text:004069C4                 mov     [esp], esi
.text:004069C7                 lea     ecx, [esp+18h]
.text:004069CB                 mov     [esp+4], ecx
.text:004069CF                 call    eax
.text:004069D1                 sub     esp, 8
.text:004069D4                 test    eax, eax
.text:004069D6                 jnz     short loc_406A38
.text:004069D8
.text:004069D8 loc_4069D8:                             ; CODE XREF: .text:004069C2↑j
.text:004069D8                 mov     edx, ds:Str
.text:004069DE                 test    edx, edx
.text:004069E0                 jz      short loc_406A60
.text:004069E2
.text:004069E2 loc_4069E2:                             ; CODE XREF: .text:00406A73↓j
.text:004069E2                                         ; .text:00406A85↓j
.text:004069E2                 test    esi, esi
.text:004069E4                 jz      short loc_4069EB
.text:004069E6                 cmp     byte ptr [esi], 0
.text:004069E9                 jnz     short loc_406A0C
.text:004069EB
.text:004069EB loc_4069EB:                             ; CODE XREF: .text:004069E4↑j
.text:004069EB                                         ; .text:00406A20↓j ...
.text:004069EB                 mov     [esp], ebp
.text:004069EE                 call    FreeLibrary
.text:004069F3                 sub     esp, 4
.text:004069F6                 mov     eax, [esp+14h]
.text:004069FA                 test    eax, eax
.text:004069FC                 jz      loc_406942
.text:00406A02                 mov     ebx, 49h ; 'I'
.text:00406A07                 jmp     loc_406942
.text:00406A0C ; ---------------------------------------------------------------------------
.text:00406A0C
.text:00406A0C loc_406A0C:                             ; CODE XREF: .text:004069E9↑j
.text:00406A0C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00406A14                 mov     [esp], esi
.text:00406A17                 call    strrchr
.text:00406A1C                 test    eax, eax
.text:00406A1E                 mov     edi, eax
.text:00406A20                 jz      short loc_4069EB
.text:00406A22                 mov     [esp+4], eax
.text:00406A26                 mov     edx, ds:Str
.text:00406A2C                 mov     [esp], edx
.text:00406A2F                 call    strstr
.text:00406A34                 test    eax, eax
.text:00406A36                 jz      short loc_406A42
.text:00406A38
.text:00406A38 loc_406A38:                             ; CODE XREF: .text:004069D6↑j
.text:00406A38                                         ; .text:00406A58↓j
.text:00406A38                 mov     dword ptr [esp+14h], 1
.text:00406A40                 jmp     short loc_4069EB
.text:00406A42 ; ---------------------------------------------------------------------------
.text:00406A42
.text:00406A42 loc_406A42:                             ; CODE XREF: .text:00406A36↑j
.text:00406A42                 mov     [esp+4], edi
.text:00406A46                 mov     edi, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00406A4C                 mov     [esp], edi
.text:00406A4F                 call    strstr
.text:00406A54                 test    eax, eax
.text:00406A56                 jz      short loc_4069EB
.text:00406A58                 jmp     short loc_406A38
.text:00406A58 ; ---------------------------------------------------------------------------
.text:00406A5A                 align 10h
.text:00406A60
.text:00406A60 loc_406A60:                             ; CODE XREF: .text:004069E0↑j
.text:00406A60                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:00406A67                 call    getenv
.text:00406A6C                 mov     ds:Str, eax
.text:00406A71                 test    eax, eax
.text:00406A73                 jnz     loc_4069E2
.text:00406A79                 mov     ecx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00406A7F                 mov     ds:Str, ecx
.text:00406A85                 jmp     loc_4069E2
.text:00406A85 ; ---------------------------------------------------------------------------
.text:00406A8A                 align 10h
.text:00406A90                 push    esi
.text:00406A91                 push    ebx
.text:00406A92                 sub     esp, 864h
.text:00406A98                 mov     ebx, [esp+870h]
.text:00406A9F                 lea     edx, [esp+830h]
.text:00406AA6                 mov     esi, [esp+874h]
.text:00406AAD                 mov     [esp+4], edx
.text:00406AB1                 mov     [esp], ebx
.text:00406AB4                 call    sub_405910
.text:00406AB9                 xor     edx, edx
.text:00406ABB                 test    eax, eax
.text:00406ABD                 jz      loc_406BA5
.text:00406AC3                 mov     ecx, [esp+830h]
.text:00406ACA                 test    cl, 10h
.text:00406ACD                 mov     [esi], ecx
.text:00406ACF                 mov     eax, [esp+834h]
.text:00406AD6                 mov     edx, [esp+838h]
.text:00406ADD                 mov     [esi+4], eax
.text:00406AE0                 mov     [esi+8], edx
.text:00406AE3                 mov     eax, [esp+83Ch]
.text:00406AEA                 mov     edx, [esp+840h]
.text:00406AF1                 mov     [esi+0Ch], eax
.text:00406AF4                 mov     [esi+10h], edx
.text:00406AF7                 mov     edx, [esp+848h]
.text:00406AFE                 mov     eax, [esp+844h]
.text:00406B05                 mov     [esi+18h], edx
.text:00406B08                 mov     [esi+14h], eax
.text:00406B0B                 mov     edx, [esp+84Ch]
.text:00406B12                 mov     [esi+20h], edx
.text:00406B15                 mov     edx, [esp+850h]
.text:00406B1C                 mov     [esi+24h], edx
.text:00406B1F                 jnz     loc_406BB0
.text:00406B25                 mov     dword ptr [esi+28h], 1
.text:00406B2C
.text:00406B2C loc_406B2C:                             ; CODE XREF: .text:00406BBB↓j
.text:00406B2C                 mov     [esp], ebx
.text:00406B2F                 call    sub_408180
.text:00406B34                 mov     [esp], eax
.text:00406B37                 call    sub_407850
.text:00406B3C                 mov     [esp], eax
.text:00406B3F                 lea     edx, [esp+30h]
.text:00406B43                 mov     ebx, eax
.text:00406B45                 mov     [esp+18h], edx
.text:00406B49                 lea     ecx, [esp+2Ch]
.text:00406B4D                 lea     edx, [esp+28h]
.text:00406B51                 mov     [esp+14h], ecx
.text:00406B55                 lea     ecx, [esp+24h]
.text:00406B59                 mov     [esp+10h], edx
.text:00406B5D                 lea     edx, [esp+430h]
.text:00406B64                 mov     [esp+0Ch], ecx
.text:00406B68                 mov     [esp+4], edx
.text:00406B6C                 mov     dword ptr [esp+1Ch], 400h
.text:00406B74                 mov     dword ptr [esp+8], 400h
.text:00406B7C                 call    GetVolumeInformationA
.text:00406B81                 sub     esp, 20h
.text:00406B84                 test    eax, eax
.text:00406B86                 setz    cl
.text:00406B89                 mov     [esp], ebx
.text:00406B8C                 movzx   edx, cl
.text:00406B8F                 dec     edx
.text:00406B90                 and     [esp+24h], edx
.text:00406B94                 call    free
.text:00406B99                 mov     ecx, [esp+24h]
.text:00406B9D                 mov     edx, 1
.text:00406BA2                 mov     [esi+1Ch], ecx
.text:00406BA5
.text:00406BA5 loc_406BA5:                             ; CODE XREF: .text:00406ABD↑j
.text:00406BA5                 add     esp, 864h
.text:00406BAB                 mov     eax, edx
.text:00406BAD                 pop     ebx
.text:00406BAE                 pop     esi
.text:00406BAF                 retn
.text:00406BB0 ; ---------------------------------------------------------------------------
.text:00406BB0
.text:00406BB0 loc_406BB0:                             ; CODE XREF: .text:00406B1F↑j
.text:00406BB0                 mov     [esp], ebx
.text:00406BB3                 call    sub_405A80
.text:00406BB8                 mov     [esi+28h], eax
.text:00406BBB                 jmp     loc_406B2C
.text:00406BC0 ; ---------------------------------------------------------------------------
.text:00406BC0                 push    ebp
.text:00406BC1                 xor     edx, edx
.text:00406BC3                 push    edi
.text:00406BC4                 push    esi
.text:00406BC5                 xor     esi, esi
.text:00406BC7                 push    ebx
.text:00406BC8                 sub     esp, 1Ch
.text:00406BCB                 mov     ebx, [esp+5Ch]
.text:00406BCF                 mov     ecx, [esp+30h]
.text:00406BD3                 mov     edi, [esp+60h]
.text:00406BD7                 or      esi, ebx
.text:00406BD9                 mov     eax, [esp+4Ch]
.text:00406BDD                 or      edi, edx
.text:00406BDF                 mov     ebx, [esp+64h]
.text:00406BE3                 xor     edx, edx
.text:00406BE5                 test    cl, 10h
.text:00406BE8                 setz    dl
.text:00406BEB                 mov     [ebx+10h], eax
.text:00406BEE                 mov     [ebx+8], edi
.text:00406BF1                 mov     [ebx+0Ch], esi
.text:00406BF4                 dec     edx
.text:00406BF5                 and     edx, 0FFFFC000h
.text:00406BFB                 mov     dword ptr [ebx+14h], 0
.text:00406C02                 add     edx, 8000h
.text:00406C08                 or      edx, 124h
.text:00406C0E                 test    cl, 1
.text:00406C11                 movzx   eax, dx
.text:00406C14                 jnz     short loc_406C1B
.text:00406C16                 or      eax, 92h
.text:00406C1B
.text:00406C1B loc_406C1B:                             ; CODE XREF: .text:00406C14↑j
.text:00406C1B                 mov     ebx, [esp+54h]
.text:00406C1F                 xor     edx, edx
.text:00406C21                 xor     ebp, ebp
.text:00406C23                 mov     edi, [esp+50h]
.text:00406C27                 mov     ecx, [esp+64h]
.text:00406C2B                 mov     esi, edi
.text:00406C2D                 or      [ecx], eax
.text:00406C2F                 mov     edi, ebx
.text:00406C31                 or      edi, ebp
.text:00406C33                 mov     ebp, edx
.text:00406C35                 mov     ebx, [esp+64h]
.text:00406C39                 or      ebp, esi
.text:00406C3B                 mov     esi, [esp+58h]
.text:00406C3F                 mov     edx, [esp+40h]
.text:00406C43                 mov     [ebx+30h], edi
.text:00406C46                 mov     [ebx+18h], esi
.text:00406C49                 mov     ecx, edx
.text:00406C4B                 xor     esi, esi
.text:00406C4D                 mov     [ebx+34h], ebp
.text:00406C50                 xor     edx, edx
.text:00406C52                 or      esi, ecx
.text:00406C54                 mov     dword ptr [esp+8], 989680h
.text:00406C5C                 mov     ebx, [esp+3Ch]
.text:00406C60                 mov     ecx, esi
.text:00406C62                 mov     dword ptr [esp+0Ch], 0
.text:00406C6A                 or      ebx, edx
.text:00406C6C                 mov     edx, ebx
.text:00406C6E                 sub     edx, 0D53E8000h
.text:00406C74                 sbb     ecx, 19DB1DEh
.text:00406C7A                 mov     [esp+4], ecx
.text:00406C7E                 mov     [esp], edx
.text:00406C81                 call    sub_40CA40
.text:00406C86                 mov     edx, eax
.text:00406C88                 mov     ecx, [esp+64h]
.text:00406C8C                 shr     eax, 1Fh
.text:00406C8F                 dec     eax
.text:00406C90                 and     edx, eax
.text:00406C92                 mov     [ecx+38h], edx
.text:00406C95                 mov     [esp], ebx
.text:00406C98                 mov     [esp+4], esi
.text:00406C9C                 mov     dword ptr [esp+8], 989680h
.text:00406CA4                 mov     dword ptr [esp+0Ch], 0
.text:00406CAC                 call    sub_40CB60
.text:00406CB1                 lea     ecx, [eax+eax*4]
.text:00406CB4                 lea     esi, [ecx+ecx*4]
.text:00406CB7                 mov     eax, [esp+64h]
.text:00406CBB                 shl     esi, 2
.text:00406CBE                 mov     ebx, esi
.text:00406CC0                 shr     ebx, 1Fh
.text:00406CC3                 dec     ebx
.text:00406CC4                 and     ebx, esi
.text:00406CC6                 xor     esi, esi
.text:00406CC8                 mov     [eax+3Ch], ebx
.text:00406CCB                 mov     edx, [esp+38h]
.text:00406CCF                 mov     dword ptr [esp+8], 989680h
.text:00406CD7                 mov     ebx, [esp+34h]
.text:00406CDB                 mov     dword ptr [esp+0Ch], 0
.text:00406CE3                 mov     ecx, edx
.text:00406CE5                 xor     edx, edx
.text:00406CE7                 or      ebx, edx
.text:00406CE9                 or      esi, ecx
.text:00406CEB                 mov     edx, ebx
.text:00406CED                 sub     edx, 0D53E8000h
.text:00406CF3                 mov     ecx, esi
.text:00406CF5                 sbb     ecx, 19DB1DEh
.text:00406CFB                 mov     [esp+4], ecx
.text:00406CFF                 mov     [esp], edx
.text:00406D02                 call    sub_40CA40
.text:00406D07                 mov     edx, eax
.text:00406D09                 mov     ecx, [esp+64h]
.text:00406D0D                 shr     eax, 1Fh
.text:00406D10                 dec     eax
.text:00406D11                 and     edx, eax
.text:00406D13                 mov     [ecx+48h], edx
.text:00406D16                 mov     [esp], ebx
.text:00406D19                 mov     [esp+4], esi
.text:00406D1D                 mov     dword ptr [esp+8], 989680h
.text:00406D25                 mov     dword ptr [esp+0Ch], 0
.text:00406D2D                 call    sub_40CB60
.text:00406D32                 lea     edx, [eax+eax*4]
.text:00406D35                 mov     ebx, [esp+64h]
.text:00406D39                 lea     ecx, [edx+edx*4]
.text:00406D3C                 shl     ecx, 2
.text:00406D3F                 mov     esi, ecx
.text:00406D41                 shr     esi, 1Fh
.text:00406D44                 dec     esi
.text:00406D45                 and     esi, ecx
.text:00406D47                 mov     [ebx+4Ch], esi
.text:00406D4A                 mov     edx, [esp+48h]
.text:00406D4E                 xor     esi, esi
.text:00406D50                 mov     dword ptr [esp+8], 989680h
.text:00406D58                 mov     ebx, [esp+44h]
.text:00406D5C                 mov     dword ptr [esp+0Ch], 0
.text:00406D64                 mov     ecx, edx
.text:00406D66                 xor     edx, edx
.text:00406D68                 or      ebx, edx
.text:00406D6A                 or      esi, ecx
.text:00406D6C                 mov     edx, ebx
.text:00406D6E                 sub     edx, 0D53E8000h
.text:00406D74                 mov     ecx, esi
.text:00406D76                 sbb     ecx, 19DB1DEh
.text:00406D7C                 mov     [esp+4], ecx
.text:00406D80                 mov     [esp], edx
.text:00406D83                 call    sub_40CA40
.text:00406D88                 mov     edx, eax
.text:00406D8A                 mov     ecx, [esp+64h]
.text:00406D8E                 shr     eax, 1Fh
.text:00406D91                 dec     eax
.text:00406D92                 and     edx, eax
.text:00406D94                 mov     [ecx+40h], edx
.text:00406D97                 mov     [esp+4], esi
.text:00406D9B                 mov     dword ptr [esp+8], 989680h
.text:00406DA3                 mov     dword ptr [esp+0Ch], 0
.text:00406DAB                 mov     [esp], ebx
.text:00406DAE                 call    sub_40CB60
.text:00406DB3                 lea     edx, [eax+eax*4]
.text:00406DB6                 lea     esi, [edx+edx*4]
.text:00406DB9                 mov     eax, [esp+64h]
.text:00406DBD                 shl     esi, 2
.text:00406DC0                 mov     edx, ebp
.text:00406DC2                 mov     ecx, esi
.text:00406DC4                 mov     dword ptr [eax+50h], 200h
.text:00406DCB                 shr     ecx, 1Fh
.text:00406DCE                 dec     ecx
.text:00406DCF                 and     ecx, esi
.text:00406DD1                 test    ebp, ebp
.text:00406DD3                 mov     [eax+44h], ecx
.text:00406DD6                 mov     eax, edi
.text:00406DD8                 js      short loc_406E12
.text:00406DDA
.text:00406DDA loc_406DDA:                             ; CODE XREF: .text:00406E1A↓j
.text:00406DDA                 xor     esi, esi
.text:00406DDC                 mov     ebp, edi
.text:00406DDE                 mov     ecx, eax
.text:00406DE0                 shrd    ecx, edx, 9
.text:00406DE4                 mov     ebx, edx
.text:00406DE6                 and     ebp, 1FFh
.text:00406DEC                 mov     eax, esi
.text:00406DEE                 sar     ebx, 9
.text:00406DF1                 or      eax, ebp
.text:00406DF3                 jz      short loc_406DFB
.text:00406DF5                 add     ecx, 1
.text:00406DF8                 adc     ebx, 0
.text:00406DFB
.text:00406DFB loc_406DFB:                             ; CODE XREF: .text:00406DF3↑j
.text:00406DFB                 mov     edx, [esp+64h]
.text:00406DFF                 mov     eax, 1
.text:00406E04                 mov     [edx+58h], ecx
.text:00406E07                 mov     [edx+5Ch], ebx
.text:00406E0A                 add     esp, 1Ch
.text:00406E0D                 pop     ebx
.text:00406E0E                 pop     esi
.text:00406E0F                 pop     edi
.text:00406E10                 pop     ebp
.text:00406E11                 retn
.text:00406E12 ; ---------------------------------------------------------------------------
.text:00406E12
.text:00406E12 loc_406E12:                             ; CODE XREF: .text:00406DD8↑j
.text:00406E12                 add     eax, 1FFh
.text:00406E17                 adc     edx, 0
.text:00406E1A                 jmp     short loc_406DDA
.text:00406E1A ; ---------------------------------------------------------------------------
.text:00406E1C                 align 10h
.text:00406E20                 push    ebp
.text:00406E21                 push    edi
.text:00406E22                 xor     edi, edi
.text:00406E24                 push    esi
.text:00406E25                 xor     esi, esi
.text:00406E27                 push    ebx
.text:00406E28                 sub     esp, 0Ch
.text:00406E2B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00406E32                 call    LoadLibraryA
.text:00406E37                 sub     esp, 4
.text:00406E3A                 mov     ebp, eax
.text:00406E3C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00406E44                 mov     [esp], eax
.text:00406E47                 call    GetProcAddress
.text:00406E4C                 sub     esp, 8
.text:00406E4F                 test    eax, eax
.text:00406E51                 jz      short loc_406E82
.text:00406E53                 lea     ecx, [esp+8]
.text:00406E57                 mov     [esp+4], ecx
.text:00406E5B                 mov     ecx, [esp+20h]
.text:00406E5F                 mov     [esp], ecx
.text:00406E62                 call    eax
.text:00406E64                 sub     esp, 8
.text:00406E67                 mov     ebx, eax
.text:00406E69                 cmp     eax, 0FFFFFFFFh
.text:00406E6C                 jz      short loc_406E9D
.text:00406E6E
.text:00406E6E loc_406E6E:                             ; CODE XREF: .text:00406EA6↓j
.text:00406E6E                 mov     esi, [esp+8]
.text:00406E72                 mov     ecx, ebx
.text:00406E74                 xor     edi, edi
.text:00406E76                 xor     ebx, ebx
.text:00406E78                 mov     edx, esi
.text:00406E7A                 mov     esi, ecx
.text:00406E7C                 or      esi, edi
.text:00406E7E                 mov     edi, ebx
.text:00406E80                 or      edi, edx
.text:00406E82
.text:00406E82 loc_406E82:                             ; CODE XREF: .text:00406E51↑j
.text:00406E82                                         ; .text:00406EA4↓j
.text:00406E82                 test    ebp, ebp
.text:00406E84                 jz      short loc_406E91
.text:00406E86                 mov     [esp], ebp
.text:00406E89                 call    FreeLibrary
.text:00406E8E                 sub     esp, 4
.text:00406E91
.text:00406E91 loc_406E91:                             ; CODE XREF: .text:00406E84↑j
.text:00406E91                 add     esp, 0Ch
.text:00406E94                 mov     eax, esi
.text:00406E96                 mov     edx, edi
.text:00406E98                 pop     ebx
.text:00406E99                 pop     esi
.text:00406E9A                 pop     edi
.text:00406E9B                 pop     ebp
.text:00406E9C                 retn
.text:00406E9D ; ---------------------------------------------------------------------------
.text:00406E9D
.text:00406E9D loc_406E9D:                             ; CODE XREF: .text:00406E6C↑j
.text:00406E9D                 call    GetLastError
.text:00406EA2                 test    eax, eax
.text:00406EA4                 jnz     short loc_406E82
.text:00406EA6                 jmp     short loc_406E6E
.text:00406EA6 ; ---------------------------------------------------------------------------
.text:00406EA8                 align 10h
.text:00406EB0
.text:00406EB0 ; =============== S U B R O U T I N E =======================================
.text:00406EB0
.text:00406EB0
.text:00406EB0 ; int __cdecl sub_406EB0(LPCSTR lpFileName, int)
.text:00406EB0 sub_406EB0      proc near               ; CODE XREF: sub_405610+1DE1↓p
.text:00406EB0
.text:00406EB0 lpRootPathName  = dword ptr -8FCh
.text:00406EB0 lpVolumeNameBuffer= dword ptr -8F8h
.text:00406EB0 nVolumeNameSize = dword ptr -8F4h
.text:00406EB0 lpVolumeSerialNumber= dword ptr -8F0h
.text:00406EB0 lpMaximumComponentLength= dword ptr -8ECh
.text:00406EB0 lpFileSystemFlags= dword ptr -8E8h
.text:00406EB0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00406EB0 nFileSystemNameSize= dword ptr -8E0h
.text:00406EB0 VolumeSerialNumber= dword ptr -8D8h
.text:00406EB0 MaximumComponentLength= dword ptr -8D4h
.text:00406EB0 FileSystemFlags = dword ptr -8D0h
.text:00406EB0 var_8CC         = dword ptr -8CCh
.text:00406EB0 var_8C8         = dword ptr -8C8h
.text:00406EB0 var_8C4         = dword ptr -8C4h
.text:00406EB0 var_8C0         = dword ptr -8C0h
.text:00406EB0 var_8BC         = dword ptr -8BCh
.text:00406EB0 var_8B8         = dword ptr -8B8h
.text:00406EB0 var_8B4         = dword ptr -8B4h
.text:00406EB0 var_8B0         = dword ptr -8B0h
.text:00406EB0 var_8AC         = dword ptr -8ACh
.text:00406EB0 var_8A8         = dword ptr -8A8h
.text:00406EB0 var_8A4         = dword ptr -8A4h
.text:00406EB0 var_8A0         = dword ptr -8A0h
.text:00406EB0 var_89C         = dword ptr -89Ch
.text:00406EB0 FileSystemNameBuffer= byte ptr -88Ch
.text:00406EB0 VolumeNameBuffer= byte ptr -48Ch
.text:00406EB0 var_8C          = dword ptr -8Ch
.text:00406EB0 var_88          = dword ptr -88h
.text:00406EB0 var_84          = dword ptr -84h
.text:00406EB0 var_80          = dword ptr -80h
.text:00406EB0 var_7C          = dword ptr -7Ch
.text:00406EB0 var_78          = dword ptr -78h
.text:00406EB0 var_74          = dword ptr -74h
.text:00406EB0 var_70          = dword ptr -70h
.text:00406EB0 var_6C          = dword ptr -6Ch
.text:00406EB0 var_5C          = dword ptr -5Ch
.text:00406EB0 var_58          = dword ptr -58h
.text:00406EB0 var_54          = dword ptr -54h
.text:00406EB0 var_50          = dword ptr -50h
.text:00406EB0 var_4C          = dword ptr -4Ch
.text:00406EB0 var_48          = dword ptr -48h
.text:00406EB0 var_44          = dword ptr -44h
.text:00406EB0 var_3C          = dword ptr -3Ch
.text:00406EB0 var_38          = dword ptr -38h
.text:00406EB0 var_34          = dword ptr -34h
.text:00406EB0 lpFileName      = dword ptr  4
.text:00406EB0 arg_4           = dword ptr  8
.text:00406EB0
.text:00406EB0                 push    ebp
.text:00406EB1                 xor     eax, eax
.text:00406EB3                 mov     ecx, 0Dh
.text:00406EB8                 push    edi
.text:00406EB9                 push    esi
.text:00406EBA                 push    ebx
.text:00406EBB                 sub     esp, 8ECh
.text:00406EC1                 lea     edi, [esp+8FCh+var_5C]
.text:00406EC8                 cld
.text:00406EC9                 lea     edx, [esp+8FCh+var_8C]
.text:00406ED0                 rep stosd
.text:00406ED2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00406ED6                 lea     esi, [esp+8FCh+var_5C]
.text:00406EDD                 mov     edx, [esp+8FCh+lpFileName]
.text:00406EE4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00406EE7                 call    sub_405910
.text:00406EEC                 test    eax, eax
.text:00406EEE                 mov     edx, 0FFFFFFFFh
.text:00406EF3                 jz      loc_407284
.text:00406EF9                 mov     edx, [esp+8FCh+var_88]
.text:00406F00                 mov     ebp, [esp+8FCh+var_84]
.text:00406F07                 mov     edi, [esp+8FCh+var_80]
.text:00406F0E                 mov     [esp+8FCh+var_58], edx
.text:00406F15                 mov     ecx, [esp+8FCh+var_7C]
.text:00406F1C                 mov     ebx, [esp+8FCh+var_8C]
.text:00406F23                 mov     [esp+8FCh+var_54], ebp
.text:00406F2A                 mov     edx, [esp+8FCh+var_78]
.text:00406F31                 mov     ebp, [esp+8FCh+var_74]
.text:00406F38                 mov     [esp+8FCh+var_50], edi
.text:00406F3F                 test    bl, 10h
.text:00406F42                 mov     edi, [esp+8FCh+var_70]
.text:00406F49                 mov     [esp+8FCh+var_4C], ecx
.text:00406F50                 mov     ecx, [esp+8FCh+var_6C]
.text:00406F57                 mov     [esp+8FCh+var_5C], ebx
.text:00406F5E                 mov     [esp+8FCh+var_48], edx
.text:00406F65                 mov     [esp+8FCh+var_44], ebp
.text:00406F6C                 mov     [esp+8FCh+var_3C], edi
.text:00406F73                 mov     [esp+8FCh+var_38], ecx
.text:00406F7A                 jnz     loc_4072A0
.text:00406F80                 mov     ebx, 1
.text:00406F85                 mov     [esp+8FCh+var_34], ebx
.text:00406F8C
.text:00406F8C loc_406F8C:                             ; CODE XREF: sub_406EB0+406↓j
.text:00406F8C                 mov     eax, [esp+8FCh+lpFileName]
.text:00406F93                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00406F97                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:00406F9B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:00406F9E                 call    sub_408180
.text:00406FA3                 mov     [esp+8FCh+lpRootPathName], eax
.text:00406FA6                 call    sub_407850
.text:00406FAB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:00406FAF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00406FB3                 mov     ebp, eax
.text:00406FB5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00406FB9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:00406FBD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00406FC4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00406FC8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00406FCC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00406FD0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00406FD8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00406FE0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00406FE3                 call    GetVolumeInformationA
.text:00406FE8                 sub     esp, 20h
.text:00406FEB                 test    eax, eax
.text:00406FED                 lea     edi, [esp+8FCh+var_8CC]
.text:00406FF1                 setz    bl
.text:00406FF4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00406FF7                 xor     ebp, ebp
.text:00406FF9                 movzx   edx, bl
.text:00406FFC                 dec     edx
.text:00406FFD                 xor     ebx, ebx
.text:00406FFF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00407003                 call    free
.text:00407008                 cld
.text:00407009                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040700D                 mov     [esi+1Ch], ecx
.text:00407010                 mov     ecx, 0Dh
.text:00407015                 rep movsd
.text:00407017                 mov     edi, [esp+8FCh+var_8A0]
.text:0040701B                 mov     edx, [esp+8FCh+var_89C]
.text:0040701F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00407023                 or      ebp, edi
.text:00407025                 mov     esi, [esp+8FCh+var_8B0]
.text:00407029                 mov     edi, [esp+8FCh+arg_4]
.text:00407030                 or      edx, ebx
.text:00407032                 mov     [edi+8], edx
.text:00407035                 xor     edx, edx
.text:00407037                 test    cl, 10h
.text:0040703A                 setz    dl
.text:0040703D                 mov     [edi+0Ch], ebp
.text:00407040                 mov     [edi+10h], esi
.text:00407043                 mov     dword ptr [edi+14h], 0
.text:0040704A                 dec     edx
.text:0040704B                 and     edx, 0FFFFC000h
.text:00407051                 add     edx, 8000h
.text:00407057                 or      edx, 124h
.text:0040705D                 test    cl, 1
.text:00407060                 movzx   eax, dx
.text:00407063                 jnz     short loc_40706A
.text:00407065                 or      eax, 92h
.text:0040706A
.text:0040706A loc_40706A:                             ; CODE XREF: sub_406EB0+1B3↑j
.text:0040706A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040706E                 xor     edx, edx
.text:00407070                 xor     ebp, ebp
.text:00407072                 mov     edi, [esp+8FCh+var_8AC]
.text:00407076                 mov     ecx, [esp+8FCh+arg_4]
.text:0040707D                 mov     esi, edi
.text:0040707F                 or      [ecx], eax
.text:00407081                 mov     edi, ebx
.text:00407083                 or      edi, ebp
.text:00407085                 mov     ebp, edx
.text:00407087                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040708B                 or      ebp, esi
.text:0040708D                 mov     esi, [esp+8FCh+arg_4]
.text:00407094                 mov     edx, [esp+8FCh+var_8BC]
.text:00407098                 mov     [esi+18h], ebx
.text:0040709B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040709F                 mov     ecx, edx
.text:004070A1                 mov     [esi+30h], edi
.text:004070A4                 xor     edx, edx
.text:004070A6                 mov     [esi+34h], ebp
.text:004070A9                 or      ebx, edx
.text:004070AB                 xor     esi, esi
.text:004070AD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004070B5                 or      esi, ecx
.text:004070B7                 mov     edx, ebx
.text:004070B9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004070C1                 sub     edx, 0D53E8000h
.text:004070C7                 mov     ecx, esi
.text:004070C9                 sbb     ecx, 19DB1DEh
.text:004070CF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004070D3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004070D6                 call    sub_40CA40
.text:004070DB                 mov     edx, eax
.text:004070DD                 mov     ecx, [esp+8FCh+arg_4]
.text:004070E4                 shr     eax, 1Fh
.text:004070E7                 dec     eax
.text:004070E8                 and     edx, eax
.text:004070EA                 mov     [ecx+38h], edx
.text:004070ED                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004070F0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004070F4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004070FC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407104                 call    sub_40CB60
.text:00407109                 lea     ecx, [eax+eax*4]
.text:0040710C                 lea     ebx, [ecx+ecx*4]
.text:0040710F                 mov     eax, [esp+8FCh+arg_4]
.text:00407116                 shl     ebx, 2
.text:00407119                 mov     esi, ebx
.text:0040711B                 shr     esi, 1Fh
.text:0040711E                 dec     esi
.text:0040711F                 and     esi, ebx
.text:00407121                 mov     [eax+3Ch], esi
.text:00407124                 mov     edx, [esp+8FCh+var_8C4]
.text:00407128                 xor     esi, esi
.text:0040712A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407132                 mov     ebx, [esp+8FCh+var_8C8]
.text:00407136                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040713E                 mov     ecx, edx
.text:00407140                 xor     edx, edx
.text:00407142                 or      ebx, edx
.text:00407144                 or      esi, ecx
.text:00407146                 mov     edx, ebx
.text:00407148                 sub     edx, 0D53E8000h
.text:0040714E                 mov     ecx, esi
.text:00407150                 sbb     ecx, 19DB1DEh
.text:00407156                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040715A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040715D                 call    sub_40CA40
.text:00407162                 mov     edx, eax
.text:00407164                 mov     ecx, [esp+8FCh+arg_4]
.text:0040716B                 shr     eax, 1Fh
.text:0040716E                 dec     eax
.text:0040716F                 and     edx, eax
.text:00407171                 mov     [ecx+48h], edx
.text:00407174                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00407177                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040717B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407183                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040718B                 call    sub_40CB60
.text:00407190                 lea     ecx, [eax+eax*4]
.text:00407193                 lea     ebx, [ecx+ecx*4]
.text:00407196                 mov     eax, [esp+8FCh+arg_4]
.text:0040719D                 shl     ebx, 2
.text:004071A0                 mov     esi, ebx
.text:004071A2                 shr     esi, 1Fh
.text:004071A5                 dec     esi
.text:004071A6                 and     esi, ebx
.text:004071A8                 mov     [eax+4Ch], esi
.text:004071AB                 mov     edx, [esp+8FCh+var_8B4]
.text:004071AF                 xor     esi, esi
.text:004071B1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004071B9                 mov     ebx, [esp+8FCh+var_8B8]
.text:004071BD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004071C5                 mov     ecx, edx
.text:004071C7                 xor     edx, edx
.text:004071C9                 or      ebx, edx
.text:004071CB                 or      esi, ecx
.text:004071CD                 mov     edx, ebx
.text:004071CF                 sub     edx, 0D53E8000h
.text:004071D5                 mov     ecx, esi
.text:004071D7                 sbb     ecx, 19DB1DEh
.text:004071DD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004071E1                 mov     [esp+8FCh+lpRootPathName], edx
.text:004071E4                 call    sub_40CA40
.text:004071E9                 mov     edx, eax
.text:004071EB                 mov     ecx, [esp+8FCh+arg_4]
.text:004071F2                 shr     eax, 1Fh
.text:004071F5                 dec     eax
.text:004071F6                 and     edx, eax
.text:004071F8                 mov     [ecx+40h], edx
.text:004071FB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004071FE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00407202                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040720A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407212                 call    sub_40CB60
.text:00407217                 lea     ebx, [eax+eax*4]
.text:0040721A                 mov     esi, [esp+8FCh+arg_4]
.text:00407221                 lea     edx, [ebx+ebx*4]
.text:00407224                 shl     edx, 2
.text:00407227                 mov     eax, edi
.text:00407229                 mov     ecx, edx
.text:0040722B                 mov     dword ptr [esi+50h], 200h
.text:00407232                 shr     ecx, 1Fh
.text:00407235                 dec     ecx
.text:00407236                 and     ecx, edx
.text:00407238                 test    ebp, ebp
.text:0040723A                 mov     edx, ebp
.text:0040723C                 mov     [esi+44h], ecx
.text:0040723F                 js      short loc_407291
.text:00407241
.text:00407241 loc_407241:                             ; CODE XREF: sub_406EB0+3E9↓j
.text:00407241                 xor     esi, esi
.text:00407243                 mov     ebp, edi
.text:00407245                 mov     ecx, eax
.text:00407247                 shrd    ecx, edx, 9
.text:0040724B                 mov     ebx, edx
.text:0040724D                 and     ebp, 1FFh
.text:00407253                 mov     eax, esi
.text:00407255                 sar     ebx, 9
.text:00407258                 or      eax, ebp
.text:0040725A                 jz      short loc_407262
.text:0040725C                 add     ecx, 1
.text:0040725F                 adc     ebx, 0
.text:00407262
.text:00407262 loc_407262:                             ; CODE XREF: sub_406EB0+3AA↑j
.text:00407262                 mov     edx, [esp+8FCh+arg_4]
.text:00407269                 mov     [edx+5Ch], ebx
.text:0040726C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00407273                 mov     [edx+58h], ecx
.text:00407276                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040727A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040727D                 call    sub_4060D0
.text:00407282                 xor     edx, edx
.text:00407284
.text:00407284 loc_407284:                             ; CODE XREF: sub_406EB0+43↑j
.text:00407284                 add     esp, 8ECh
.text:0040728A                 mov     eax, edx
.text:0040728C                 pop     ebx
.text:0040728D                 pop     esi
.text:0040728E                 pop     edi
.text:0040728F                 pop     ebp
.text:00407290                 retn
.text:00407291 ; ---------------------------------------------------------------------------
.text:00407291
.text:00407291 loc_407291:                             ; CODE XREF: sub_406EB0+38F↑j
.text:00407291                 add     eax, 1FFh
.text:00407296                 adc     edx, 0
.text:00407299                 jmp     short loc_407241
.text:00407299 ; ---------------------------------------------------------------------------
.text:0040729B                 align 10h
.text:004072A0
.text:004072A0 loc_4072A0:                             ; CODE XREF: sub_406EB0+CA↑j
.text:004072A0                 mov     eax, [esp+8FCh+lpFileName]
.text:004072A7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:004072AA                 call    sub_405A80
.text:004072AF                 mov     [esp+8FCh+var_34], eax
.text:004072B6                 jmp     loc_406F8C
.text:004072B6 sub_406EB0      endp
.text:004072B6
.text:004072B6 ; ---------------------------------------------------------------------------
.text:004072BB                 align 10h
.text:004072C0 ; START OF FUNCTION CHUNK FOR sub_405610
.text:004072C0
.text:004072C0 loc_4072C0:                             ; CODE XREF: sub_405610+26↑j
.text:004072C0                 cld
.text:004072C1                 sub     esp, 2Ch
.text:004072C4                 xor     eax, eax
.text:004072C6                 mov     [esp+2Ch+var_10], ebx
.text:004072CA                 mov     ecx, 18h
.text:004072CF                 mov     ebx, [esp+2Ch+arg_0]
.text:004072D3                 mov     [esp+2Ch+var_C], esi
.text:004072D7                 mov     esi, [esp+2Ch+arg_4]
.text:004072DB                 test    ebx, ebx
.text:004072DD                 mov     [esp+2Ch+var_8], edi
.text:004072E1                 mov     edi, esi
.text:004072E3                 mov     [esp+2Ch+var_4], ebp
.text:004072E7                 rep stosd
.text:004072E9                 jz      short loc_4072F0
.text:004072EB                 cmp     byte ptr [ebx], 0
.text:004072EE                 jnz     short loc_407308
.text:004072F0
.text:004072F0 loc_4072F0:                             ; CODE XREF: sub_405610+1CD9↑j
.text:004072F0                 xor     edx, edx
.text:004072F2
.text:004072F2 loc_4072F2:                             ; CODE XREF: sub_405610+1D0F↓j
.text:004072F2                                         ; sub_405610+1DB8↓j
.text:004072F2                 mov     ebx, [esp+2Ch+var_10]
.text:004072F6                 mov     eax, edx
.text:004072F8                 mov     esi, [esp+2Ch+var_C]
.text:004072FC                 mov     edi, [esp+2Ch+var_8]
.text:00407300                 mov     ebp, [esp+2Ch+var_4]
.text:00407304                 add     esp, 2Ch
.text:00407307                 retn
.text:00407308 ; ---------------------------------------------------------------------------
.text:00407308
.text:00407308 loc_407308:                             ; CODE XREF: sub_405610+1CDE↑j
.text:00407308                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00407310                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00407313                 call    sub_4080A0
.text:00407318                 test    eax, eax
.text:0040731A                 mov     edx, 0FFFFFFFFh
.text:0040731F                 jnz     short loc_4072F2
.text:00407321                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00407324                 call    sub_407F50
.text:00407329                 mov     [esp+2Ch+lpFileName], eax
.text:0040732C                 call    sub_407850
.text:00407331                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00407334                 mov     ebp, eax
.text:00407336                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040733E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00407346                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040734E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00407356                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040735E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00407366                 call    CreateFileA
.text:0040736B                 sub     esp, 1Ch
.text:0040736E                 mov     ebx, eax
.text:00407370                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407374                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00407377                 call    sub_405C00
.text:0040737C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040737F                 mov     edi, eax
.text:00407381                 call    CloseHandle
.text:00407386                 sub     esp, 4
.text:00407389                 cmp     edi, 0FFFFFFFFh
.text:0040738C                 jz      short loc_4073EA
.text:0040738E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407392                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00407395                 call    sub_4060D0
.text:0040739A
.text:0040739A loc_40739A:                             ; CODE XREF: sub_405610+1DE8↓j
.text:0040739A                 mov     edx, [esi]
.text:0040739C                 and     edx, 0F000h
.text:004073A2                 cmp     edx, 4000h
.text:004073A8                 jz      short loc_4073DD
.text:004073AA
.text:004073AA loc_4073AA:                             ; CODE XREF: sub_405610+1DD8↓j
.text:004073AA                 cmp     edi, 0FFFFFFFFh
.text:004073AD                 jz      short loc_4073CD
.text:004073AF
.text:004073AF loc_4073AF:                             ; CODE XREF: sub_405610+1DCB↓j
.text:004073AF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:004073B6                 call    SetErrorMode
.text:004073BB                 sub     esp, 4
.text:004073BE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:004073C1                 call    free
.text:004073C6                 mov     edx, edi
.text:004073C8                 jmp     loc_4072F2
.text:004073CD ; ---------------------------------------------------------------------------
.text:004073CD
.text:004073CD loc_4073CD:                             ; CODE XREF: sub_405610+1D9D↑j
.text:004073CD                 call    sub_407F00
.text:004073D2                 mov     esi, eax
.text:004073D4                 call    _errno
.text:004073D9                 mov     [eax], esi
.text:004073DB                 jmp     short loc_4073AF
.text:004073DD ; ---------------------------------------------------------------------------
.text:004073DD
.text:004073DD loc_4073DD:                             ; CODE XREF: sub_405610+1D98↑j
.text:004073DD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:004073E0                 call    sub_405A80
.text:004073E5                 mov     [esi+18h], eax
.text:004073E8                 jmp     short loc_4073AA
.text:004073EA ; ---------------------------------------------------------------------------
.text:004073EA
.text:004073EA loc_4073EA:                             ; CODE XREF: sub_405610+1D7C↑j
.text:004073EA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004073EE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:004073F1                 call    sub_406EB0
.text:004073F6                 mov     edi, eax
.text:004073F8                 jmp     short loc_40739A
.text:004073F8 ; END OF FUNCTION CHUNK FOR sub_405610
.text:004073F8 ; ---------------------------------------------------------------------------
.text:004073FA                 align 10h
.text:00407400
.text:00407400 ; =============== S U B R O U T I N E =======================================
.text:00407400
.text:00407400 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00407400
.text:00407400 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00407400 _win32_longpath proc near               ; CODE XREF: .text:00407BC4↓p
.text:00407400
.text:00407400 C               = dword ptr -278h
.text:00407400 lpFindFileData  = dword ptr -274h
.text:00407400 Destination     = byte ptr -268h
.text:00407400 var_267         = byte ptr -267h
.text:00407400 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00407400 lpFileName      = dword ptr  8
.text:00407400
.text:00407400                 push    ebp
.text:00407401                 xor     eax, eax
.text:00407403                 push    edi
.text:00407404                 push    esi
.text:00407405                 push    ebx
.text:00407406                 sub     esp, 26Ch
.text:0040740C                 mov     esi, [esp+278h+lpFileName]
.text:00407413                 lea     ebp, [esp+278h+Destination]
.text:00407417                 test    esi, esi
.text:00407419                 jz      loc_407577
.text:0040741F                 movsx   edx, byte ptr [esi]
.text:00407422                 mov     [esp+278h+C], edx ; C
.text:00407425                 call    isalpha
.text:0040742A                 test    eax, eax
.text:0040742C                 jz      short loc_40743F
.text:0040742E                 mov     eax, [esp+278h+lpFileName]
.text:00407435                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00407439                 jz      loc_40777B
.text:0040743F
.text:0040743F loc_40743F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040743F                 mov     edx, [esp+278h+lpFileName]
.text:00407446                 movzx   eax, byte ptr [edx]
.text:00407449                 cmp     al, 2Fh ; '/'
.text:0040744B                 jz      loc_40765B
.text:00407451                 cmp     al, 5Ch ; '\'
.text:00407453                 jz      loc_40765B
.text:00407459
.text:00407459 loc_407459:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00407459                                         ; _win32_longpath+2B1↓j ...
.text:00407459                 mov     [ebp+268h+Destination], 0
.text:0040745D                 movzx   ebx, byte ptr [esi]
.text:00407460                 test    bl, bl
.text:00407462                 jz      loc_407559
.text:00407468                 nop
.text:00407469                 lea     esi, [esi+0]
.text:00407470
.text:00407470 loc_407470:                             ; CODE XREF: _win32_longpath+153↓j
.text:00407470                 cmp     bl, 2Fh ; '/'
.text:00407473                 jz      loc_407610
.text:00407479                 cmp     bl, 5Ch ; '\'
.text:0040747C                 jz      loc_407610
.text:00407482
.text:00407482 loc_407482:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00407482                                         ; _win32_longpath+22C↓j ...
.text:00407482                 cmp     bl, 2Eh ; '.'
.text:00407485                 jz      loc_4075B0
.text:0040748B
.text:0040748B loc_40748B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040748B                                         ; _win32_longpath+203↓j
.text:0040748B                 test    bl, bl
.text:0040748D                 jz      loc_407559
.text:00407493                 cmp     bl, 2Fh ; '/'
.text:00407496                 jz      short loc_4074B2
.text:00407498                 cmp     bl, 5Ch ; '\'
.text:0040749B                 jz      short loc_4074B2
.text:0040749D                 lea     esi, [esi+0]
.text:004074A0
.text:004074A0 loc_4074A0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:004074A0                 inc     esi
.text:004074A1                 movzx   ebx, byte ptr [esi]
.text:004074A4                 test    bl, bl
.text:004074A6                 jz      short loc_4074B2
.text:004074A8                 cmp     bl, 2Fh ; '/'
.text:004074AB                 jz      short loc_4074B2
.text:004074AD                 cmp     bl, 5Ch ; '\'
.text:004074B0                 jnz     short loc_4074A0
.text:004074B2
.text:004074B2 loc_4074B2:                             ; CODE XREF: _win32_longpath+96↑j
.text:004074B2                                         ; _win32_longpath+9B↑j ...
.text:004074B2                 mov     byte ptr [esi], 0
.text:004074B5                 lea     edx, [esp+278h+FindFileData]
.text:004074BC                 mov     eax, [esp+278h+lpFileName]
.text:004074C3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:004074C7                 mov     [esp+278h+C], eax ; lpFileName
.text:004074CA                 call    FindFirstFileA
.text:004074CF                 mov     [esi], bl
.text:004074D1                 sub     esp, 8
.text:004074D4                 mov     edi, eax
.text:004074D6                 cmp     eax, 0FFFFFFFFh
.text:004074D9                 jz      loc_40759C
.text:004074DF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:004074E6                 mov     ecx, ebx
.text:004074E8                 nop
.text:004074E9                 lea     esi, [esi+0]
.text:004074F0
.text:004074F0 loc_4074F0:                             ; CODE XREF: _win32_longpath+105↓j
.text:004074F0                 mov     eax, [ebx]
.text:004074F2                 add     ebx, 4
.text:004074F5                 lea     edx, [eax-1010101h]
.text:004074FB                 not     eax
.text:004074FD                 and     edx, eax
.text:004074FF                 and     edx, 80808080h
.text:00407505                 jz      short loc_4074F0
.text:00407507                 test    edx, 8080h
.text:0040750D                 jnz     short loc_407515
.text:0040750F                 shr     edx, 10h
.text:00407512                 add     ebx, 2
.text:00407515
.text:00407515 loc_407515:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00407515                 add     dl, dl
.text:00407517                 sbb     ebx, 3
.text:0040751A                 sub     ebx, ecx
.text:0040751C                 lea     ecx, [esp+278h+Destination]
.text:00407520                 sub     ecx, ebp
.text:00407522                 add     ecx, 105h
.text:00407528                 cmp     ecx, ebx
.text:0040752A                 jle     short loc_407582
.text:0040752C                 mov     [esp+278h+C], ebp ; Destination
.text:0040752F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00407536                 add     ebp, ebx
.text:00407538                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040753C                 call    strcpy
.text:00407541                 mov     [esp+278h+C], edi ; hFindFile
.text:00407544                 call    FindClose
.text:00407549                 sub     esp, 4
.text:0040754C
.text:0040754C loc_40754C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040754C                 movzx   ecx, byte ptr [esi]
.text:0040754F                 test    cl, cl
.text:00407551                 mov     bl, cl
.text:00407553                 jnz     loc_407470
.text:00407559
.text:00407559 loc_407559:                             ; CODE XREF: _win32_longpath+62↑j
.text:00407559                                         ; _win32_longpath+8D↑j
.text:00407559                 mov     esi, [esp+278h+lpFileName]
.text:00407560                 lea     ebp, [esp+278h+Destination]
.text:00407564                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00407568                 mov     [esp+278h+C], esi ; Destination
.text:0040756B                 call    strcpy
.text:00407570                 mov     eax, [esp+278h+lpFileName]
.text:00407577
.text:00407577 loc_407577:                             ; CODE XREF: _win32_longpath+19↑j
.text:00407577                                         ; _win32_longpath+19A↓j
.text:00407577                 add     esp, 26Ch
.text:0040757D                 pop     ebx
.text:0040757E                 pop     esi
.text:0040757F                 pop     edi
.text:00407580                 pop     ebp
.text:00407581                 retn
.text:00407582 ; ---------------------------------------------------------------------------
.text:00407582
.text:00407582 loc_407582:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00407582                 mov     [esp+278h+C], edi ; hFindFile
.text:00407585                 call    FindClose
.text:0040758A                 sub     esp, 4
.text:0040758D                 call    _errno
.text:00407592                 mov     dword ptr [eax], 22h ; '"'
.text:00407598
.text:00407598 loc_407598:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00407598                 xor     eax, eax
.text:0040759A                 jmp     short loc_407577
.text:0040759C ; ---------------------------------------------------------------------------
.text:0040759C
.text:0040759C loc_40759C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040759C                 call    _errno
.text:004075A1                 mov     dword ptr [eax], 16h
.text:004075A7                 jmp     short loc_407598
.text:004075A7 ; ---------------------------------------------------------------------------
.text:004075A9                 align 10h
.text:004075B0
.text:004075B0 loc_4075B0:                             ; CODE XREF: _win32_longpath+85↑j
.text:004075B0                 movzx   eax, byte ptr [esi+1]
.text:004075B4                 test    al, al
.text:004075B6                 jnz     short loc_4075E5
.text:004075B8
.text:004075B8 loc_4075B8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:004075B8                                         ; _win32_longpath+1EB↓j ...
.text:004075B8                 test    bl, bl
.text:004075BA                 jz      short loc_4075DC
.text:004075BC                 cmp     bl, 2Fh ; '/'
.text:004075BF                 jz      short loc_4075DC
.text:004075C1                 cmp     bl, 5Ch ; '\'
.text:004075C4                 jz      short loc_4075DC
.text:004075C6
.text:004075C6 loc_4075C6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:004075C6                 mov     [ebp+268h+Destination], bl
.text:004075C9                 inc     esi
.text:004075CA                 inc     ebp
.text:004075CB                 movzx   ebx, byte ptr [esi]
.text:004075CE                 test    bl, bl
.text:004075D0                 jz      short loc_4075DC
.text:004075D2                 cmp     bl, 2Fh ; '/'
.text:004075D5                 jz      short loc_4075DC
.text:004075D7                 cmp     bl, 5Ch ; '\'
.text:004075DA                 jnz     short loc_4075C6
.text:004075DC
.text:004075DC loc_4075DC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:004075DC                                         ; _win32_longpath+1BF↑j ...
.text:004075DC                 mov     [ebp+268h+Destination], 0
.text:004075E0                 jmp     loc_40754C
.text:004075E5 ; ---------------------------------------------------------------------------
.text:004075E5
.text:004075E5 loc_4075E5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:004075E5                 cmp     al, 2Fh ; '/'
.text:004075E7                 jz      short loc_4075B8
.text:004075E9                 cmp     al, 5Ch ; '\'
.text:004075EB                 jz      short loc_4075B8
.text:004075ED                 cmp     al, 2Eh ; '.'
.text:004075EF                 jnz     loc_40748B
.text:004075F5                 movzx   eax, byte ptr [esi+2]
.text:004075F9                 test    al, al
.text:004075FB                 jz      short loc_4075B8
.text:004075FD                 cmp     al, 2Fh ; '/'
.text:004075FF                 jz      short loc_4075B8
.text:00407601                 cmp     al, 5Ch ; '\'
.text:00407603                 jnz     loc_40748B
.text:00407609                 jmp     short loc_4075B8
.text:00407609 ; ---------------------------------------------------------------------------
.text:0040760B                 align 10h
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: _win32_longpath+73↑j
.text:00407610                                         ; _win32_longpath+7C↑j
.text:00407610                 mov     [ebp+268h+Destination], bl
.text:00407613                 inc     esi
.text:00407614                 inc     ebp
.text:00407615                 mov     [ebp+268h+Destination], 0
.text:00407619                 movzx   ebx, byte ptr [esi]
.text:0040761C                 test    bl, bl
.text:0040761E                 jz      loc_407482
.text:00407624                 cmp     bl, 2Fh ; '/'
.text:00407627                 jz      short loc_407640
.text:00407629                 cmp     bl, 5Ch ; '\'
.text:0040762C                 jnz     loc_407482
.text:00407632                 lea     esi, [esi+0]
.text:00407639                 lea     edi, [edi+0]
.text:00407640
.text:00407640 loc_407640:                             ; CODE XREF: _win32_longpath+227↑j
.text:00407640                                         ; _win32_longpath+24F↓j ...
.text:00407640                 inc     esi
.text:00407641                 movzx   ebx, byte ptr [esi]
.text:00407644                 test    bl, bl
.text:00407646                 jz      loc_407482
.text:0040764C                 cmp     bl, 2Fh ; '/'
.text:0040764F                 jz      short loc_407640
.text:00407651                 cmp     bl, 5Ch ; '\'
.text:00407654                 jz      short loc_407640
.text:00407656                 jmp     loc_407482
.text:0040765B ; ---------------------------------------------------------------------------
.text:0040765B
.text:0040765B loc_40765B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040765B                                         ; _win32_longpath+53↑j
.text:0040765B                 mov     edi, [esp+278h+lpFileName]
.text:00407662                 movzx   edx, byte ptr [edi+1]
.text:00407666                 cmp     dl, 2Fh ; '/'
.text:00407669                 jz      short loc_407674
.text:0040766B                 cmp     dl, 5Ch ; '\'
.text:0040766E                 jnz     loc_407459
.text:00407674
.text:00407674 loc_407674:                             ; CODE XREF: _win32_longpath+269↑j
.text:00407674                 mov     esi, [esp+278h+lpFileName]
.text:0040767B                 mov     [ebp+268h+Destination], al
.text:0040767E                 mov     ecx, [esp+278h+lpFileName]
.text:00407685                 inc     ebp
.text:00407686                 add     esi, 2
.text:00407689                 movzx   ebx, byte ptr [ecx+1]
.text:0040768D                 mov     [ebp+268h+Destination], bl
.text:00407690                 inc     ebp
.text:00407691                 movzx   eax, byte ptr [ecx+2]
.text:00407695                 test    al, al
.text:00407697                 jz      loc_407773
.text:0040769D                 cmp     al, 2Fh ; '/'
.text:0040769F                 jz      loc_407758
.text:004076A5                 cmp     al, 5Ch ; '\'
.text:004076A7                 mov     bl, al
.text:004076A9                 jz      loc_407758
.text:004076AF
.text:004076AF loc_4076AF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:004076AF                                         ; _win32_longpath+376↓j
.text:004076AF                 test    bl, bl
.text:004076B1                 jz      loc_407459
.text:004076B7                 cmp     bl, 2Fh ; '/'
.text:004076BA                 jz      short loc_4076DB
.text:004076BC                 cmp     bl, 5Ch ; '\'
.text:004076BF                 jz      short loc_4076DB
.text:004076C1
.text:004076C1 loc_4076C1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:004076C1                 mov     [ebp+268h+Destination], bl
.text:004076C4                 inc     esi
.text:004076C5                 inc     ebp
.text:004076C6                 movzx   ebx, byte ptr [esi]
.text:004076C9                 test    bl, bl
.text:004076CB                 jz      loc_407459
.text:004076D1                 cmp     bl, 2Fh ; '/'
.text:004076D4                 jz      short loc_4076DB
.text:004076D6                 cmp     bl, 5Ch ; '\'
.text:004076D9                 jnz     short loc_4076C1
.text:004076DB
.text:004076DB loc_4076DB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:004076DB                                         ; _win32_longpath+2BF↑j ...
.text:004076DB                 test    bl, bl
.text:004076DD                 jz      loc_407459
.text:004076E3                 mov     [ebp+268h+Destination], bl
.text:004076E6                 inc     esi
.text:004076E7                 inc     ebp
.text:004076E8                 movzx   ebx, byte ptr [esi]
.text:004076EB                 test    bl, bl
.text:004076ED                 jz      loc_407459
.text:004076F3                 cmp     bl, 2Fh ; '/'
.text:004076F6                 jz      short loc_407740
.text:004076F8                 cmp     bl, 5Ch ; '\'
.text:004076FB                 jz      short loc_407740
.text:004076FD
.text:004076FD loc_4076FD:                             ; CODE XREF: _win32_longpath+356↓j
.text:004076FD                 test    bl, bl
.text:004076FF                 jz      loc_407459
.text:00407705                 cmp     bl, 2Fh ; '/'
.text:00407708                 jz      loc_407459
.text:0040770E                 cmp     bl, 5Ch ; '\'
.text:00407711                 jz      loc_407459
.text:00407717
.text:00407717 loc_407717:                             ; CODE XREF: _win32_longpath+333↓j
.text:00407717                 mov     [ebp+268h+Destination], bl
.text:0040771A                 inc     esi
.text:0040771B                 inc     ebp
.text:0040771C                 movzx   ebx, byte ptr [esi]
.text:0040771F                 test    bl, bl
.text:00407721                 jz      loc_407459
.text:00407727                 cmp     bl, 2Fh ; '/'
.text:0040772A                 jz      loc_407459
.text:00407730                 cmp     bl, 5Ch ; '\'
.text:00407733                 jnz     short loc_407717
.text:00407735                 jmp     loc_407459
.text:00407735 ; ---------------------------------------------------------------------------
.text:0040773A                 align 10h
.text:00407740
.text:00407740 loc_407740:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00407740                                         ; _win32_longpath+2FB↑j ...
.text:00407740                 inc     esi
.text:00407741                 movzx   ebx, byte ptr [esi]
.text:00407744                 test    bl, bl
.text:00407746                 jz      loc_407459
.text:0040774C                 cmp     bl, 2Fh ; '/'
.text:0040774F                 jz      short loc_407740
.text:00407751                 cmp     bl, 5Ch ; '\'
.text:00407754                 jz      short loc_407740
.text:00407756                 jmp     short loc_4076FD
.text:00407758 ; ---------------------------------------------------------------------------
.text:00407758
.text:00407758 loc_407758:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00407758                                         ; _win32_longpath+2A9↑j ...
.text:00407758                 inc     esi
.text:00407759                 movzx   ebx, byte ptr [esi]
.text:0040775C                 test    bl, bl
.text:0040775E                 jz      loc_407459
.text:00407764                 cmp     bl, 2Fh ; '/'
.text:00407767                 jz      short loc_407758
.text:00407769                 cmp     bl, 5Ch ; '\'
.text:0040776C                 jz      short loc_407758
.text:0040776E                 jmp     loc_4076AF
.text:00407773 ; ---------------------------------------------------------------------------
.text:00407773
.text:00407773 loc_407773:                             ; CODE XREF: _win32_longpath+297↑j
.text:00407773                 movzx   ebx, byte ptr [esi]
.text:00407776                 jmp     loc_4076AF
.text:0040777B ; ---------------------------------------------------------------------------
.text:0040777B
.text:0040777B loc_40777B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040777B                 movzx   ecx, byte ptr [eax]
.text:0040777E                 mov     esi, eax
.text:00407780                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00407785                 add     esi, 2
.text:00407788                 lea     ebp, [esp+12h]
.text:0040778C                 mov     [esp+278h+Destination], cl
.text:00407790                 jmp     loc_407459
.text:00407790 _win32_longpath endp
.text:00407790
.text:00407790 ; ---------------------------------------------------------------------------
.text:00407795                 align 10h
.text:004077A0                 sub     esp, 0Ch
.text:004077A3                 mov     edx, [esp+10h]
.text:004077A7                 mov     dword ptr [esp+4], 0
.text:004077AF                 mov     [esp], edx
.text:004077B2                 call    sub_4080A0
.text:004077B7                 inc     eax
.text:004077B8                 setnz   dl
.text:004077BB                 add     esp, 0Ch
.text:004077BE                 movzx   eax, dl
.text:004077C1                 retn
.text:004077C1 ; ---------------------------------------------------------------------------
.text:004077C2                 align 10h
.text:004077D0
.text:004077D0 ; =============== S U B R O U T I N E =======================================
.text:004077D0
.text:004077D0
.text:004077D0 sub_4077D0      proc near               ; CODE XREF: sub_4057E0+B4↑p
.text:004077D0                                         ; sub_407F70+AA↓p
.text:004077D0
.text:004077D0 arg_0           = dword ptr  4
.text:004077D0
.text:004077D0                 mov     ecx, [esp+arg_0]
.text:004077D4                 mov     edx, ecx
.text:004077D6                 movzx   eax, byte ptr [ecx]
.text:004077D9                 test    al, al
.text:004077DB                 jz      short loc_4077EC
.text:004077DD                 lea     esi, [esi+0]
.text:004077E0
.text:004077E0 loc_4077E0:                             ; CODE XREF: sub_4077D0+1A↓j
.text:004077E0                 cmp     al, 5Ch ; '\'
.text:004077E2                 jz      short loc_4077F0
.text:004077E4
.text:004077E4 loc_4077E4:                             ; CODE XREF: sub_4077D0+23↓j
.text:004077E4                 inc     edx
.text:004077E5                 movzx   eax, byte ptr [edx]
.text:004077E8                 test    al, al
.text:004077EA                 jnz     short loc_4077E0
.text:004077EC
.text:004077EC loc_4077EC:                             ; CODE XREF: sub_4077D0+B↑j
.text:004077EC                 mov     eax, ecx
.text:004077EE                 retn
.text:004077EE ; ---------------------------------------------------------------------------
.text:004077EF                 align 10h
.text:004077F0
.text:004077F0 loc_4077F0:                             ; CODE XREF: sub_4077D0+12↑j
.text:004077F0                 mov     byte ptr [edx], 2Fh ; '/'
.text:004077F3                 jmp     short loc_4077E4
.text:004077F3 sub_4077D0      endp
.text:004077F3
.text:004077F3 ; ---------------------------------------------------------------------------
.text:004077F5                 align 10h
.text:00407800                 push    ebx
.text:00407801                 sub     esp, 8
.text:00407804                 mov     ebx, [esp+14h]
.text:00407808                 mov     edx, [esp+10h]
.text:0040780C                 mov     [esp], ebx
.text:0040780F                 mov     [esp+4], edx
.text:00407813                 call    strcpy
.text:00407818                 movzx   eax, byte ptr [ebx]
.text:0040781B                 mov     edx, ebx
.text:0040781D                 test    al, al
.text:0040781F                 jz      short loc_40783C
.text:00407821                 jmp     short loc_407830
.text:00407821 ; ---------------------------------------------------------------------------
.text:00407823                 align 10h
.text:00407830
.text:00407830 loc_407830:                             ; CODE XREF: .text:00407821↑j
.text:00407830                                         ; .text:0040783A↓j
.text:00407830                 cmp     al, 5Ch ; '\'
.text:00407832                 jz      short loc_407843
.text:00407834
.text:00407834 loc_407834:                             ; CODE XREF: .text:00407846↓j
.text:00407834                 inc     edx
.text:00407835                 movzx   eax, byte ptr [edx]
.text:00407838                 test    al, al
.text:0040783A                 jnz     short loc_407830
.text:0040783C
.text:0040783C loc_40783C:                             ; CODE XREF: .text:0040781F↑j
.text:0040783C                 add     esp, 8
.text:0040783F                 xor     eax, eax
.text:00407841                 pop     ebx
.text:00407842                 retn
.text:00407843 ; ---------------------------------------------------------------------------
.text:00407843
.text:00407843 loc_407843:                             ; CODE XREF: .text:00407832↑j
.text:00407843                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407846                 jmp     short loc_407834
.text:00407846 ; ---------------------------------------------------------------------------
.text:00407848                 align 10h
.text:00407850
.text:00407850 ; =============== S U B R O U T I N E =======================================
.text:00407850
.text:00407850
.text:00407850 sub_407850      proc near               ; CODE XREF: sub_4060D0+16↑p
.text:00407850                                         ; sub_4065D0+1F↑p ...
.text:00407850
.text:00407850 arg_0           = dword ptr  4
.text:00407850
.text:00407850                 mov     ecx, [esp+arg_0]
.text:00407854                 mov     edx, ecx
.text:00407856                 movzx   eax, byte ptr [ecx]
.text:00407859                 test    al, al
.text:0040785B                 jz      short loc_40786C
.text:0040785D                 lea     esi, [esi+0]
.text:00407860
.text:00407860 loc_407860:                             ; CODE XREF: sub_407850+1A↓j
.text:00407860                 cmp     al, 2Fh ; '/'
.text:00407862                 jz      short loc_407870
.text:00407864
.text:00407864 loc_407864:                             ; CODE XREF: sub_407850+23↓j
.text:00407864                 inc     edx
.text:00407865                 movzx   eax, byte ptr [edx]
.text:00407868                 test    al, al
.text:0040786A                 jnz     short loc_407860
.text:0040786C
.text:0040786C loc_40786C:                             ; CODE XREF: sub_407850+B↑j
.text:0040786C                 mov     eax, ecx
.text:0040786E                 retn
.text:0040786E ; ---------------------------------------------------------------------------
.text:0040786F                 align 10h
.text:00407870
.text:00407870 loc_407870:                             ; CODE XREF: sub_407850+12↑j
.text:00407870                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407873                 jmp     short loc_407864
.text:00407873 sub_407850      endp
.text:00407873
.text:00407873 ; ---------------------------------------------------------------------------
.text:00407875                 align 10h
.text:00407880                 push    ebx
.text:00407881                 sub     esp, 8
.text:00407884                 mov     ebx, [esp+14h]
.text:00407888                 mov     edx, [esp+10h]
.text:0040788C                 mov     [esp], ebx
.text:0040788F                 mov     [esp+4], edx
.text:00407893                 call    strcpy
.text:00407898                 movzx   eax, byte ptr [ebx]
.text:0040789B                 mov     edx, ebx
.text:0040789D                 test    al, al
.text:0040789F                 jz      short loc_4078BC
.text:004078A1                 jmp     short loc_4078B0
.text:004078A1 ; ---------------------------------------------------------------------------
.text:004078A3                 align 10h
.text:004078B0
.text:004078B0 loc_4078B0:                             ; CODE XREF: .text:004078A1↑j
.text:004078B0                                         ; .text:004078BA↓j
.text:004078B0                 cmp     al, 2Fh ; '/'
.text:004078B2                 jz      short loc_4078C3
.text:004078B4
.text:004078B4 loc_4078B4:                             ; CODE XREF: .text:004078C6↓j
.text:004078B4                 inc     edx
.text:004078B5                 movzx   eax, byte ptr [edx]
.text:004078B8                 test    al, al
.text:004078BA                 jnz     short loc_4078B0
.text:004078BC
.text:004078BC loc_4078BC:                             ; CODE XREF: .text:0040789F↑j
.text:004078BC                 add     esp, 8
.text:004078BF                 xor     eax, eax
.text:004078C1                 pop     ebx
.text:004078C2                 retn
.text:004078C3 ; ---------------------------------------------------------------------------
.text:004078C3
.text:004078C3 loc_4078C3:                             ; CODE XREF: .text:004078B2↑j
.text:004078C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004078C6                 jmp     short loc_4078B4
.text:004078C6 ; ---------------------------------------------------------------------------
.text:004078C8                 align 10h
.text:004078D0                 push    ebx
.text:004078D1                 sub     esp, 8
.text:004078D4                 mov     ebx, [esp+14h]
.text:004078D8                 mov     edx, [esp+10h]
.text:004078DC                 mov     [esp+4], ebx
.text:004078E0                 mov     [esp], edx
.text:004078E3                 call    sub_407F20
.text:004078E8                 movzx   eax, byte ptr [ebx]
.text:004078EB                 mov     edx, ebx
.text:004078ED                 test    al, al
.text:004078EF                 jz      short loc_40790C
.text:004078F1                 jmp     short loc_407900
.text:004078F1 ; ---------------------------------------------------------------------------
.text:004078F3                 align 10h
.text:00407900
.text:00407900 loc_407900:                             ; CODE XREF: .text:004078F1↑j
.text:00407900                                         ; .text:0040790A↓j
.text:00407900                 cmp     al, 2Fh ; '/'
.text:00407902                 jz      short loc_407913
.text:00407904
.text:00407904 loc_407904:                             ; CODE XREF: .text:00407916↓j
.text:00407904                 inc     edx
.text:00407905                 movzx   eax, byte ptr [edx]
.text:00407908                 test    al, al
.text:0040790A                 jnz     short loc_407900
.text:0040790C
.text:0040790C loc_40790C:                             ; CODE XREF: .text:004078EF↑j
.text:0040790C                 add     esp, 8
.text:0040790F                 xor     eax, eax
.text:00407911                 pop     ebx
.text:00407912                 retn
.text:00407913 ; ---------------------------------------------------------------------------
.text:00407913
.text:00407913 loc_407913:                             ; CODE XREF: .text:00407902↑j
.text:00407913                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407916                 jmp     short loc_407904
.text:00407916 ; ---------------------------------------------------------------------------
.text:00407918                 align 10h
.text:00407920                 push    ebx
.text:00407921                 sub     esp, 8
.text:00407924                 mov     ebx, [esp+14h]
.text:00407928                 mov     edx, [esp+10h]
.text:0040792C                 mov     [esp], ebx
.text:0040792F                 mov     [esp+4], edx
.text:00407933                 call    sub_407F20
.text:00407938                 movzx   eax, byte ptr [ebx]
.text:0040793B                 mov     edx, ebx
.text:0040793D                 test    al, al
.text:0040793F                 jz      short loc_40795C
.text:00407941                 jmp     short loc_407950
.text:00407941 ; ---------------------------------------------------------------------------
.text:00407943                 align 10h
.text:00407950
.text:00407950 loc_407950:                             ; CODE XREF: .text:00407941↑j
.text:00407950                                         ; .text:0040795A↓j
.text:00407950                 cmp     al, 5Ch ; '\'
.text:00407952                 jz      short loc_407961
.text:00407954
.text:00407954 loc_407954:                             ; CODE XREF: .text:00407964↓j
.text:00407954                 inc     edx
.text:00407955                 movzx   eax, byte ptr [edx]
.text:00407958                 test    al, al
.text:0040795A                 jnz     short loc_407950
.text:0040795C
.text:0040795C loc_40795C:                             ; CODE XREF: .text:0040793F↑j
.text:0040795C                 add     esp, 8
.text:0040795F                 pop     ebx
.text:00407960                 retn
.text:00407961 ; ---------------------------------------------------------------------------
.text:00407961
.text:00407961 loc_407961:                             ; CODE XREF: .text:00407952↑j
.text:00407961                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407964                 jmp     short loc_407954
.text:00407964 ; ---------------------------------------------------------------------------
.text:00407966                 align 10h
.text:00407970
.text:00407970 ; =============== S U B R O U T I N E =======================================
.text:00407970
.text:00407970
.text:00407970 ; int __cdecl sub_407970(LPSTR)
.text:00407970 sub_407970      proc near               ; CODE XREF: .text:004079FE↓p
.text:00407970                                         ; .text:00407A3E↓p ...
.text:00407970
.text:00407970 hModule         = dword ptr -1Ch
.text:00407970 lpFilename      = dword ptr -18h
.text:00407970 nSize           = dword ptr -14h
.text:00407970 arg_0           = dword ptr  4
.text:00407970
.text:00407970                 push    esi
.text:00407971                 push    ebx
.text:00407972                 sub     esp, 14h
.text:00407975                 mov     esi, [esp+1Ch+arg_0]
.text:00407979                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00407981                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00407988                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040798C                 call    GetModuleFileNameA
.text:00407991                 sub     esp, 0Ch
.text:00407994                 test    eax, eax
.text:00407996                 jz      short loc_4079D8
.text:00407998                 cmp     eax, 104h
.text:0040799D                 jg      short loc_4079C9
.text:0040799F
.text:0040799F loc_40799F:                             ; CODE XREF: sub_407970+66↓j
.text:0040799F                                         ; sub_407970+78↓j
.text:0040799F                 movzx   eax, byte ptr [esi]
.text:004079A2                 mov     edx, esi
.text:004079A4                 test    al, al
.text:004079A6                 jz      short loc_4079BC
.text:004079A8                 nop
.text:004079A9                 lea     esi, [esi+0]
.text:004079B0
.text:004079B0 loc_4079B0:                             ; CODE XREF: sub_407970+4A↓j
.text:004079B0                 cmp     al, 5Ch ; '\'
.text:004079B2                 jz      short loc_4079C4
.text:004079B4
.text:004079B4 loc_4079B4:                             ; CODE XREF: sub_407970+57↓j
.text:004079B4                 inc     edx
.text:004079B5                 movzx   eax, byte ptr [edx]
.text:004079B8                 test    al, al
.text:004079BA                 jnz     short loc_4079B0
.text:004079BC
.text:004079BC loc_4079BC:                             ; CODE XREF: sub_407970+36↑j
.text:004079BC                 add     esp, 14h
.text:004079BF                 mov     eax, esi
.text:004079C1                 pop     ebx
.text:004079C2                 pop     esi
.text:004079C3                 retn
.text:004079C4 ; ---------------------------------------------------------------------------
.text:004079C4
.text:004079C4 loc_4079C4:                             ; CODE XREF: sub_407970+42↑j
.text:004079C4                 mov     byte ptr [edx], 2Fh ; '/'
.text:004079C7                 jmp     short loc_4079B4
.text:004079C9 ; ---------------------------------------------------------------------------
.text:004079C9
.text:004079C9 loc_4079C9:                             ; CODE XREF: sub_407970+2D↑j
.text:004079C9                 call    _errno
.text:004079CE                 mov     dword ptr [eax], 26h ; '&'
.text:004079D4                 xor     esi, esi
.text:004079D6                 jmp     short loc_40799F
.text:004079D8 ; ---------------------------------------------------------------------------
.text:004079D8
.text:004079D8 loc_4079D8:                             ; CODE XREF: sub_407970+26↑j
.text:004079D8                 call    sub_407F00
.text:004079DD                 mov     ebx, eax
.text:004079DF                 xor     esi, esi
.text:004079E1                 call    _errno
.text:004079E6                 mov     [eax], ebx
.text:004079E8                 jmp     short loc_40799F
.text:004079E8 sub_407970      endp
.text:004079E8
.text:004079E8 ; ---------------------------------------------------------------------------
.text:004079EA                 align 10h
.text:004079F0                 sub     esp, 0Ch
.text:004079F3                 mov     [esp+8], ebx
.text:004079F7                 mov     ebx, [esp+10h]
.text:004079FB                 mov     [esp], ebx
.text:004079FE                 call    sub_407970
.text:00407A03                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407A0B                 mov     [esp], ebx
.text:00407A0E                 call    strrchr
.text:00407A13                 test    eax, eax
.text:00407A15                 jz      short loc_407A1A
.text:00407A17                 lea     ebx, [eax+1]
.text:00407A1A
.text:00407A1A loc_407A1A:                             ; CODE XREF: .text:00407A15↑j
.text:00407A1A                 mov     eax, ebx
.text:00407A1C                 mov     ebx, [esp+8]
.text:00407A20                 add     esp, 0Ch
.text:00407A23                 retn
.text:00407A23 ; ---------------------------------------------------------------------------
.text:00407A24                 align 10h
.text:00407A30                 sub     esp, 0Ch
.text:00407A33                 mov     [esp+8], ebx
.text:00407A37                 mov     ebx, [esp+10h]
.text:00407A3B                 mov     [esp], ebx
.text:00407A3E                 call    sub_407970
.text:00407A43                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407A4B                 mov     [esp], ebx
.text:00407A4E                 call    strrchr
.text:00407A53                 test    eax, eax
.text:00407A55                 jz      short loc_407A5A
.text:00407A57                 mov     byte ptr [eax], 0
.text:00407A5A
.text:00407A5A loc_407A5A:                             ; CODE XREF: .text:00407A55↑j
.text:00407A5A                 mov     eax, ebx
.text:00407A5C                 mov     ebx, [esp+8]
.text:00407A60                 add     esp, 0Ch
.text:00407A63                 retn
.text:00407A63 ; ---------------------------------------------------------------------------
.text:00407A64                 align 10h
.text:00407A70                 sub     esp, 0Ch
.text:00407A73                 mov     [esp+8], ebx
.text:00407A77                 mov     ebx, [esp+10h]
.text:00407A7B                 mov     [esp], ebx
.text:00407A7E                 call    sub_407970
.text:00407A83                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407A8B                 mov     [esp], ebx
.text:00407A8E                 call    strrchr
.text:00407A93                 test    eax, eax
.text:00407A95                 jz      short loc_407A9A
.text:00407A97                 mov     byte ptr [eax], 0
.text:00407A9A
.text:00407A9A loc_407A9A:                             ; CODE XREF: .text:00407A95↑j
.text:00407A9A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407AA2                 mov     [esp], ebx
.text:00407AA5                 call    strrchr
.text:00407AAA                 test    eax, eax
.text:00407AAC                 jz      short loc_407AB1
.text:00407AAE                 mov     byte ptr [eax], 0
.text:00407AB1
.text:00407AB1 loc_407AB1:                             ; CODE XREF: .text:00407AAC↑j
.text:00407AB1                 mov     eax, ebx
.text:00407AB3                 mov     ebx, [esp+8]
.text:00407AB7                 add     esp, 0Ch
.text:00407ABA                 retn
.text:00407ABA ; ---------------------------------------------------------------------------
.text:00407ABB                 align 10h
.text:00407AC0                 sub     esp, 1Ch
.text:00407AC3                 mov     edx, [esp+20h]
.text:00407AC7                 mov     [esp+10h], ebx
.text:00407ACB                 xor     ebx, ebx
.text:00407ACD                 mov     [esp+14h], esi
.text:00407AD1                 mov     [esp+18h], edi
.text:00407AD5                 mov     [esp], edx
.text:00407AD8                 call    sub_407F50
.text:00407ADD                 mov     edx, [esp+24h]
.text:00407AE1                 mov     edi, eax
.text:00407AE3                 mov     [esp], edx
.text:00407AE6                 call    sub_407F50
.text:00407AEB                 mov     [esp+4], eax
.text:00407AEF                 mov     esi, eax
.text:00407AF1                 mov     [esp], edi
.text:00407AF4                 call    _stricmp_0
.text:00407AF9                 mov     [esp], edi
.text:00407AFC                 test    eax, eax
.text:00407AFE                 setz    bl
.text:00407B01                 call    free
.text:00407B06                 mov     [esp], esi
.text:00407B09                 call    free
.text:00407B0E                 mov     eax, ebx
.text:00407B10                 mov     esi, [esp+14h]
.text:00407B14                 mov     ebx, [esp+10h]
.text:00407B18                 mov     edi, [esp+18h]
.text:00407B1C                 add     esp, 1Ch
.text:00407B1F                 retn
.text:00407B20 ; ---------------------------------------------------------------------------
.text:00407B20                 xor     eax, eax
.text:00407B22                 retn
.text:00407B22 ; ---------------------------------------------------------------------------
.text:00407B23 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00407B57↓o
.text:00407B30 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00407B66↓o
.text:00407B40 ; ---------------------------------------------------------------------------
.text:00407B40                 sub     esp, 1Ch
.text:00407B43                 mov     [esp+10h], ebx
.text:00407B47                 mov     ebx, [esp+20h]
.text:00407B4B                 mov     [esp+18h], edi
.text:00407B4F                 mov     edi, [esp+24h]
.text:00407B53                 mov     [esp+14h], esi
.text:00407B57                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:00407B5E                 call    GetModuleHandleA
.text:00407B63                 sub     esp, 4
.text:00407B66                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:00407B6E                 mov     [esp], eax
.text:00407B71                 call    GetProcAddress
.text:00407B76                 sub     esp, 8
.text:00407B79                 test    eax, eax
.text:00407B7B                 jz      short loc_407B93
.text:00407B7D                 mov     dword ptr [esp+8], 104h
.text:00407B85                 mov     [esp+4], ebx
.text:00407B89                 mov     [esp], edi
.text:00407B8C                 call    eax
.text:00407B8E                 sub     esp, 0Ch
.text:00407B91                 mov     esi, eax
.text:00407B93
.text:00407B93 loc_407B93:                             ; CODE XREF: .text:00407B7B↑j
.text:00407B93                 test    esi, esi
.text:00407B95                 jz      short loc_407BB0
.text:00407B97
.text:00407B97 loc_407B97:                             ; CODE XREF: .text:00407BCB↓j
.text:00407B97                 mov     eax, ebx
.text:00407B99                 mov     esi, [esp+14h]
.text:00407B9D                 mov     ebx, [esp+10h]
.text:00407BA1                 mov     edi, [esp+18h]
.text:00407BA5                 add     esp, 1Ch
.text:00407BA8                 retn
.text:00407BA8 ; ---------------------------------------------------------------------------
.text:00407BA9                 align 10h
.text:00407BB0
.text:00407BB0 loc_407BB0:                             ; CODE XREF: .text:00407B95↑j
.text:00407BB0                 call    sub_4096B0
.text:00407BB5                 mov     [esp], ebx
.text:00407BB8                 mov     [esp+4], edi
.text:00407BBC                 call    strcpy
.text:00407BC1                 mov     [esp], ebx
.text:00407BC4                 call    _win32_longpath
.text:00407BC9                 mov     ebx, eax
.text:00407BCB                 jmp     short loc_407B97
.text:00407BCB ; ---------------------------------------------------------------------------
.text:00407BCD                 align 10h
.text:00407BD0                 sub     esp, 1Ch
.text:00407BD3                 mov     [esp+18h], edi
.text:00407BD7                 mov     edi, [esp+20h]
.text:00407BDB                 mov     [esp+10h], ebx
.text:00407BDF                 mov     [esp+14h], esi
.text:00407BE3                 mov     dword ptr [esp+8], 0
.text:00407BEB                 mov     dword ptr [esp+4], 0
.text:00407BF3                 mov     [esp], edi
.text:00407BF6                 call    GetShortPathNameA
.text:00407BFB                 sub     esp, 0Ch
.text:00407BFE                 mov     ebx, eax
.text:00407C00                 test    eax, eax
.text:00407C02                 jz      short loc_407C50
.text:00407C04                 lea     edx, [eax+1]
.text:00407C07                 mov     [esp], edx
.text:00407C0A                 call    malloc
.text:00407C0F                 test    eax, eax
.text:00407C11                 mov     esi, eax
.text:00407C13                 jz      short loc_407C50
.text:00407C15                 mov     [esp+8], ebx
.text:00407C19                 mov     [esp+4], eax
.text:00407C1D                 mov     [esp], edi
.text:00407C20                 call    GetShortPathNameA
.text:00407C25                 sub     esp, 0Ch
.text:00407C28                 mov     edx, esi
.text:00407C2A                 test    eax, eax
.text:00407C2C                 jz      short loc_407C42
.text:00407C2E                 mov     esi, esi
.text:00407C30
.text:00407C30 loc_407C30:                             ; CODE XREF: .text:00407C60↓j
.text:00407C30                 mov     ebx, [esp+10h]
.text:00407C34                 mov     eax, edx
.text:00407C36                 mov     esi, [esp+14h]
.text:00407C3A                 mov     edi, [esp+18h]
.text:00407C3E                 add     esp, 1Ch
.text:00407C41                 retn
.text:00407C42 ; ---------------------------------------------------------------------------
.text:00407C42
.text:00407C42 loc_407C42:                             ; CODE XREF: .text:00407C2C↑j
.text:00407C42                 mov     [esp], esi
.text:00407C45                 call    free
.text:00407C4A                 lea     esi, [esi+0]
.text:00407C50
.text:00407C50 loc_407C50:                             ; CODE XREF: .text:00407C02↑j
.text:00407C50                                         ; .text:00407C13↑j
.text:00407C50                 call    sub_407F00
.text:00407C55                 mov     esi, eax
.text:00407C57                 call    _errno
.text:00407C5C                 mov     [eax], esi
.text:00407C5E                 mov     edx, edi
.text:00407C60                 jmp     short loc_407C30
.text:00407C60 ; ---------------------------------------------------------------------------
.text:00407C62                 align 10h
.text:00407C70
.text:00407C70 ; =============== S U B R O U T I N E =======================================
.text:00407C70
.text:00407C70 ; Attributes: info_from_lumina
.text:00407C70
.text:00407C70 ___get_errno    proc near               ; CODE XREF: sub_407F00+B↓p
.text:00407C70
.text:00407C70 arg_0           = dword ptr  4
.text:00407C70
.text:00407C70                 mov     eax, [esp+arg_0]
.text:00407C74                 cmp     eax, 53h ; 'S'
.text:00407C77                 jg      loc_407D70
.text:00407C7D                 cmp     eax, 52h ; 'R'
.text:00407C80                 jge     short loc_407CD2
.text:00407C82                 cmp     eax, 0Fh
.text:00407C85                 jz      short loc_407CA0
.text:00407C87                 cmp     eax, 0Fh
.text:00407C8A                 jg      short loc_407D00
.text:00407C8C                 cmp     eax, 9
.text:00407C8F                 jg      short loc_407CE0
.text:00407C91                 cmp     eax, 7
.text:00407C94                 jge     short loc_407CD9
.text:00407C96                 cmp     eax, 3
.text:00407C99                 jg      short loc_407CBA
.text:00407C9B                 cmp     eax, 2
.text:00407C9E                 jl      short loc_407CB3
.text:00407CA0
.text:00407CA0 loc_407CA0:                             ; CODE XREF: ___get_errno+15↑j
.text:00407CA0                                         ; ___get_errno+9D↓j ...
.text:00407CA0                 mov     edx, 2
.text:00407CA5                 lea     esi, [esi+0]
.text:00407CA9                 lea     edi, [edi+0]
.text:00407CB0
.text:00407CB0 loc_407CB0:                             ; CODE XREF: ___get_errno+48↓j
.text:00407CB0                                         ; ___get_errno+59↓j ...
.text:00407CB0                 mov     eax, edx
.text:00407CB2                 retn
.text:00407CB3 ; ---------------------------------------------------------------------------
.text:00407CB3
.text:00407CB3 loc_407CB3:                             ; CODE XREF: ___get_errno+2E↑j
.text:00407CB3                                         ; ___get_errno+78↓j ...
.text:00407CB3                 mov     edx, 16h
.text:00407CB8                 jmp     short loc_407CB0
.text:00407CBA ; ---------------------------------------------------------------------------
.text:00407CBA
.text:00407CBA loc_407CBA:                             ; CODE XREF: ___get_errno+29↑j
.text:00407CBA                 cmp     eax, 5
.text:00407CBD                 jz      short loc_407CD2
.text:00407CBF                 cmp     eax, 5
.text:00407CC2                 jg      short loc_407CCB
.text:00407CC4                 mov     edx, 18h
.text:00407CC9                 jmp     short loc_407CB0
.text:00407CCB ; ---------------------------------------------------------------------------
.text:00407CCB
.text:00407CCB loc_407CCB:                             ; CODE XREF: ___get_errno+52↑j
.text:00407CCB                                         ; ___get_errno+180↓j
.text:00407CCB                 mov     edx, 9
.text:00407CD0                 jmp     short loc_407CB0
.text:00407CD2 ; ---------------------------------------------------------------------------
.text:00407CD2
.text:00407CD2 loc_407CD2:                             ; CODE XREF: ___get_errno+10↑j
.text:00407CD2                                         ; ___get_errno+4D↑j ...
.text:00407CD2                 mov     edx, 0Dh
.text:00407CD7                 jmp     short loc_407CB0
.text:00407CD9 ; ---------------------------------------------------------------------------
.text:00407CD9
.text:00407CD9 loc_407CD9:                             ; CODE XREF: ___get_errno+24↑j
.text:00407CD9                                         ; ___get_errno+73↓j ...
.text:00407CD9                 mov     edx, 0Ch
.text:00407CDE                 jmp     short loc_407CB0
.text:00407CE0 ; ---------------------------------------------------------------------------
.text:00407CE0
.text:00407CE0 loc_407CE0:                             ; CODE XREF: ___get_errno+1F↑j
.text:00407CE0                 cmp     eax, 0Dh
.text:00407CE3                 jg      short loc_407CD9
.text:00407CE5                 cmp     eax, 0Ch
.text:00407CE8                 jge     short loc_407CB3
.text:00407CEA                 cmp     eax, 0Ah
.text:00407CED                 mov     edx, 7
.text:00407CF2                 jz      short loc_407CB0
.text:00407CF4                 cmp     eax, 0Bh
.text:00407CF7                 jnz     short loc_407CB3
.text:00407CF9
.text:00407CF9 loc_407CF9:                             ; CODE XREF: ___get_errno+21A↓j
.text:00407CF9                 mov     edx, 8
.text:00407CFE                 jmp     short loc_407CB0
.text:00407D00 ; ---------------------------------------------------------------------------
.text:00407D00
.text:00407D00 loc_407D00:                             ; CODE XREF: ___get_errno+1A↑j
.text:00407D00                 cmp     eax, 22h ; '"'
.text:00407D03                 jg      short loc_407D34
.text:00407D05                 cmp     eax, 16h
.text:00407D08                 jge     short loc_407CD2
.text:00407D0A                 cmp     eax, 12h
.text:00407D0D                 jz      short loc_407CA0
.text:00407D0F                 cmp     eax, 12h
.text:00407D12                 jg      short loc_407D25
.text:00407D14                 cmp     eax, 10h
.text:00407D17                 jz      short loc_407CD2
.text:00407D19                 mov     edx, 12h
.text:00407D1E                 cmp     eax, 11h
.text:00407D21
.text:00407D21 loc_407D21:                             ; CODE XREF: ___get_errno+172↓j
.text:00407D21                                         ; ___get_errno+24C↓j ...
.text:00407D21                 jnz     short loc_407CB3
.text:00407D23                 jmp     short loc_407CB0
.text:00407D25 ; ---------------------------------------------------------------------------
.text:00407D25
.text:00407D25 loc_407D25:                             ; CODE XREF: ___get_errno+A2↑j
.text:00407D25                 cmp     eax, 14h
.text:00407D28                 jle     short loc_407CD2
.text:00407D2A
.text:00407D2A loc_407D2A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00407D2A                 mov     edx, 10h
.text:00407D2F                 jmp     loc_407CB0
.text:00407D34 ; ---------------------------------------------------------------------------
.text:00407D34
.text:00407D34 loc_407D34:                             ; CODE XREF: ___get_errno+93↑j
.text:00407D34                 cmp     eax, 41h ; 'A'
.text:00407D37                 jz      short loc_407CD2
.text:00407D39                 cmp     eax, 41h ; 'A'
.text:00407D3C                 jg      short loc_407D51
.text:00407D3E                 cmp     eax, 24h ; '$'
.text:00407D41                 jz      short loc_407CD2
.text:00407D43                 cmp     eax, 35h ; '5'
.text:00407D46                 jnz     loc_407CB3
.text:00407D4C                 jmp     loc_407CA0
.text:00407D51 ; ---------------------------------------------------------------------------
.text:00407D51
.text:00407D51 loc_407D51:                             ; CODE XREF: ___get_errno+CC↑j
.text:00407D51                 cmp     eax, 43h ; 'C'
.text:00407D54                 jz      loc_407CA0
.text:00407D5A                 cmp     eax, 50h ; 'P'
.text:00407D5D                 jnz     loc_407CB3
.text:00407D63
.text:00407D63 loc_407D63:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00407D63                 mov     edx, 11h
.text:00407D68                 jmp     loc_407CB0
.text:00407D68 ; ---------------------------------------------------------------------------
.text:00407D6D                 align 10h
.text:00407D70
.text:00407D70 loc_407D70:                             ; CODE XREF: ___get_errno+7↑j
.text:00407D70                 cmp     eax, 0A1h ; '¡'
.text:00407D75                 jz      loc_407CA0
.text:00407D7B                 cmp     eax, 0A1h ; '¡'
.text:00407D80                 jg      loc_407E30
.text:00407D86                 cmp     eax, 81h
.text:00407D8B                 jg      short loc_407DF5
.text:00407D8D                 cmp     eax, 80h ; '€'
.text:00407D92                 mov     edx, 0Ah
.text:00407D97                 jge     loc_407CB0
.text:00407D9D                 cmp     eax, 6Ch ; 'l'
.text:00407DA0                 jz      loc_407CD2
.text:00407DA6                 cmp     eax, 6Ch ; 'l'
.text:00407DA9                 jg      short loc_407DC7
.text:00407DAB                 cmp     eax, 57h ; 'W'
.text:00407DAE                 jz      loc_407CB3
.text:00407DB4                 cmp     eax, 59h ; 'Y'
.text:00407DB7                 jnz     loc_407CB3
.text:00407DBD
.text:00407DBD loc_407DBD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00407DBD                                         ; ___get_errno+23C↓j
.text:00407DBD                 mov     edx, 0Bh
.text:00407DC2                 jmp     loc_407CB0
.text:00407DC7 ; ---------------------------------------------------------------------------
.text:00407DC7
.text:00407DC7 loc_407DC7:                             ; CODE XREF: ___get_errno+139↑j
.text:00407DC7                 cmp     eax, 70h ; 'p'
.text:00407DCA                 mov     edx, 1Ch
.text:00407DCF                 jz      loc_407CB0
.text:00407DD5                 cmp     eax, 70h ; 'p'
.text:00407DD8                 jg      short loc_407DE7
.text:00407DDA                 mov     edx, 20h ; ' '
.text:00407DDF                 cmp     eax, 6Dh ; 'm'
.text:00407DE2                 jmp     loc_407D21
.text:00407DE7 ; ---------------------------------------------------------------------------
.text:00407DE7
.text:00407DE7 loc_407DE7:                             ; CODE XREF: ___get_errno+168↑j
.text:00407DE7                 cmp     eax, 72h ; 'r'
.text:00407DEA
.text:00407DEA loc_407DEA:                             ; CODE XREF: ___get_errno+19C↓j
.text:00407DEA                 jnz     loc_407CB3
.text:00407DF0                 jmp     loc_407CCB
.text:00407DF5 ; ---------------------------------------------------------------------------
.text:00407DF5
.text:00407DF5 loc_407DF5:                             ; CODE XREF: ___get_errno+11B↑j
.text:00407DF5                 cmp     eax, 84h ; '„'
.text:00407DFA                 jz      loc_407CD2
.text:00407E00                 cmp     eax, 84h ; '„'
.text:00407E05                 jg      short loc_407E0E
.text:00407E07                 cmp     eax, 82h ; '‚'
.text:00407E0C                 jmp     short loc_407DEA
.text:00407E0E ; ---------------------------------------------------------------------------
.text:00407E0E
.text:00407E0E loc_407E0E:                             ; CODE XREF: ___get_errno+195↑j
.text:00407E0E                 cmp     eax, 91h ; '‘'
.text:00407E13                 mov     edx, 29h ; ')'
.text:00407E18                 jz      loc_407CB0
.text:00407E1E                 cmp     eax, 9Eh ; 'ž'
.text:00407E23
.text:00407E23 loc_407E23:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00407E23                 jnz     loc_407CB3
.text:00407E29                 jmp     loc_407CD2
.text:00407E29 ; ---------------------------------------------------------------------------
.text:00407E2E                 align 10h
.text:00407E30
.text:00407E30 loc_407E30:                             ; CODE XREF: ___get_errno+110↑j
.text:00407E30                 cmp     eax, 0CEh ; 'Î'
.text:00407E35                 jz      loc_407CA0
.text:00407E3B                 cmp     eax, 0CEh ; 'Î'
.text:00407E40                 jg      short loc_407E90
.text:00407E42                 cmp     eax, 0AAh ; 'ª'
.text:00407E47                 jz      loc_407D2A
.text:00407E4D                 cmp     eax, 0AAh ; 'ª'
.text:00407E52                 jg      short loc_407E66
.text:00407E54                 cmp     eax, 0A4h ; '¤'
.text:00407E59                 jz      loc_407DBD
.text:00407E5F                 cmp     eax, 0A7h ; '§'
.text:00407E64                 jmp     short loc_407E23
.text:00407E66 ; ---------------------------------------------------------------------------
.text:00407E66
.text:00407E66 loc_407E66:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00407E66                 cmp     eax, 0B7h ; '·'
.text:00407E6B                 jz      loc_407D63
.text:00407E71                 cmp     eax, 0B7h ; '·'
.text:00407E76                 jl      loc_407CB3
.text:00407E7C                 sub     eax, 0BCh ; '¼'
.text:00407E81                 cmp     eax, 0Eh
.text:00407E84                 ja      loc_407CB3
.text:00407E8A                 jmp     loc_407CF9
.text:00407E8A ; ---------------------------------------------------------------------------
.text:00407E8F                 align 10h
.text:00407E90
.text:00407E90 loc_407E90:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00407E90                 cmp     eax, 46Bh
.text:00407E95                 mov     edx, 24h ; '$'
.text:00407E9A                 jz      loc_407CB0
.text:00407EA0                 cmp     eax, 46Bh
.text:00407EA5                 jg      short loc_407EC1
.text:00407EA7                 cmp     eax, 0D7h ; '×'
.text:00407EAC                 jz      loc_407DBD
.text:00407EB2                 mov     edx, 5
.text:00407EB7                 cmp     eax, 45Dh
.text:00407EBC                 jmp     loc_407D21
.text:00407EC1 ; ---------------------------------------------------------------------------
.text:00407EC1
.text:00407EC1 loc_407EC1:                             ; CODE XREF: ___get_errno+235↑j
.text:00407EC1                 cmp     eax, 4D5h
.text:00407EC6                 mov     edx, 4
.text:00407ECB                 jz      loc_407CB0
.text:00407ED1                 cmp     eax, 4D5h
.text:00407ED6                 jg      short loc_407EE7
.text:00407ED8                 mov     edx, 13h
.text:00407EDD                 cmp     eax, 4B0h
.text:00407EE2                 jmp     loc_407D21
.text:00407EE7 ; ---------------------------------------------------------------------------
.text:00407EE7
.text:00407EE7 loc_407EE7:                             ; CODE XREF: ___get_errno+266↑j
.text:00407EE7                 cmp     eax, 718h
.text:00407EEC                 jnz     loc_407CB3
.text:00407EF2                 jmp     loc_407CD9
.text:00407EF2 ___get_errno    endp
.text:00407EF2
.text:00407EF2 ; ---------------------------------------------------------------------------
.text:00407EF7                 align 10h
.text:00407F00
.text:00407F00 ; =============== S U B R O U T I N E =======================================
.text:00407F00
.text:00407F00
.text:00407F00 sub_407F00      proc near               ; CODE XREF: sub_405660:loc_4057BF↑p
.text:00407F00                                         ; sub_405610:loc_4073CD↑p ...
.text:00407F00
.text:00407F00 var_C           = dword ptr -0Ch
.text:00407F00
.text:00407F00                 sub     esp, 0Ch
.text:00407F03                 call    GetLastError
.text:00407F08                 mov     [esp+0Ch+var_C], eax
.text:00407F0B                 call    ___get_errno
.text:00407F10                 add     esp, 0Ch
.text:00407F13                 retn
.text:00407F13 sub_407F00      endp
.text:00407F13
.text:00407F13 ; ---------------------------------------------------------------------------
.text:00407F14                 align 10h
.text:00407F20
.text:00407F20 ; =============== S U B R O U T I N E =======================================
.text:00407F20
.text:00407F20
.text:00407F20 sub_407F20      proc near               ; CODE XREF: .text:004078E3↑p
.text:00407F20                                         ; .text:00407933↑p
.text:00407F20
.text:00407F20 arg_4           = dword ptr  8
.text:00407F20
.text:00407F20                 sub     esp, 0Ch
.text:00407F23                 mov     edx, [esp+0Ch+arg_4]
.text:00407F27                 test    edx, edx
.text:00407F29                 jz      short loc_407F30
.text:00407F2B                 add     esp, 0Ch
.text:00407F2E                 jmp     short sub_407F70
.text:00407F30 ; ---------------------------------------------------------------------------
.text:00407F30
.text:00407F30 loc_407F30:                             ; CODE XREF: sub_407F20+9↑j
.text:00407F30                 call    _errno
.text:00407F35                 mov     dword ptr [eax], 16h
.text:00407F3B                 xor     eax, eax
.text:00407F3D                 add     esp, 0Ch
.text:00407F40                 retn
.text:00407F40 sub_407F20      endp
.text:00407F40
.text:00407F41 ; ---------------------------------------------------------------------------
.text:00407F41                 jmp     short sub_407F50
.text:00407F41 ; ---------------------------------------------------------------------------
.text:00407F43                 align 10h
.text:00407F50
.text:00407F50 ; =============== S U B R O U T I N E =======================================
.text:00407F50
.text:00407F50
.text:00407F50 ; int __cdecl sub_407F50(LPCSTR)
.text:00407F50 sub_407F50      proc near               ; CODE XREF: sub_405610+1D14↑p
.text:00407F50                                         ; .text:00407AD8↑p ...
.text:00407F50
.text:00407F50 lpFileName      = dword ptr -0Ch
.text:00407F50 Destination     = dword ptr -8
.text:00407F50 arg_0           = dword ptr  4
.text:00407F50
.text:00407F50                 sub     esp, 0Ch
.text:00407F53                 mov     edx, [esp+0Ch+arg_0]
.text:00407F57                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:00407F5F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00407F62                 call    sub_407F70
.text:00407F67                 add     esp, 0Ch
.text:00407F6A                 retn
.text:00407F6A sub_407F50      endp
.text:00407F6A
.text:00407F6A ; ---------------------------------------------------------------------------
.text:00407F6B                 align 10h
.text:00407F70
.text:00407F70 ; =============== S U B R O U T I N E =======================================
.text:00407F70
.text:00407F70
.text:00407F70 ; int __cdecl sub_407F70(LPCSTR lpFileName, char *Destination)
.text:00407F70 sub_407F70      proc near               ; CODE XREF: sub_407F20+E↑j
.text:00407F70                                         ; sub_407F50+12↑p
.text:00407F70
.text:00407F70 Size            = dword ptr -2Ch
.text:00407F70 nBufferLength   = dword ptr -28h
.text:00407F70 lpBuffer        = dword ptr -24h
.text:00407F70 lpFilePart      = dword ptr -20h
.text:00407F70 FilePart        = dword ptr -14h
.text:00407F70 lpFileName      = dword ptr  4
.text:00407F70 Destination     = dword ptr  8
.text:00407F70
.text:00407F70                 push    ebp
.text:00407F71                 push    edi
.text:00407F72                 push    esi
.text:00407F73                 push    ebx
.text:00407F74                 sub     esp, 1Ch
.text:00407F77                 mov     edi, [esp+2Ch+lpFileName]
.text:00407F7B                 mov     ebp, [esp+2Ch+Destination]
.text:00407F7F                 test    edi, edi
.text:00407F81                 jz      loc_408089
.text:00407F87                 cmp     byte ptr [edi], 0
.text:00407F8A                 jz      loc_40807C
.text:00407F90                 mov     [esp+2Ch+Size], 104h ; Size
.text:00407F97                 call    malloc
.text:00407F9C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00407FA0                 lea     edx, [esp+2Ch+FilePart]
.text:00407FA4                 mov     ebx, eax
.text:00407FA6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00407FAA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00407FB2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00407FB5                 call    GetFullPathNameA
.text:00407FBA                 sub     esp, 10h
.text:00407FBD                 mov     esi, eax
.text:00407FBF                 test    eax, eax
.text:00407FC1                 jz      loc_40806A
.text:00407FC7                 cmp     eax, 104h
.text:00407FCC                 jle     short loc_407FDD
.text:00407FCE                 test    ebp, ebp
.text:00407FD0                 jz      short loc_408039
.text:00407FD2                 call    _errno
.text:00407FD7                 mov     dword ptr [eax], 26h ; '&'
.text:00407FDD
.text:00407FDD loc_407FDD:                             ; CODE XREF: sub_407F70+5C↑j
.text:00407FDD                                         ; sub_407F70+F5↓j
.text:00407FDD                 call    _errno
.text:00407FE2                 mov     edi, [eax]
.text:00407FE4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:00407FEC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:00407FEF                 call    sub_4080A0
.text:00407FF4                 test    eax, eax
.text:00407FF6                 jnz     short loc_408010
.text:00407FF8                 movzx   eax, byte ptr [esi+ebx-1]
.text:00407FFD                 cmp     al, 2Fh ; '/'
.text:00407FFF                 jz      short loc_408010
.text:00408001                 cmp     al, 5Ch ; '\'
.text:00408003                 jz      short loc_408010
.text:00408005                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00408009                 mov     byte ptr [esi+ebx+1], 0
.text:0040800E                 mov     esi, esi
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_407F70+86↑j
.text:00408010                                         ; sub_407F70+8F↑j ...
.text:00408010                 call    _errno
.text:00408015                 mov     [eax], edi
.text:00408017                 mov     [esp+2Ch+Size], ebx
.text:0040801A                 call    sub_4077D0
.text:0040801F                 test    ebp, ebp
.text:00408021                 mov     eax, ebx
.text:00408023                 jz      short loc_408031
.text:00408025                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00408029                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040802C                 call    strcpy
.text:00408031
.text:00408031 loc_408031:                             ; CODE XREF: sub_407F70+B3↑j
.text:00408031                                         ; sub_407F70+10A↓j
.text:00408031                 add     esp, 1Ch
.text:00408034                 pop     ebx
.text:00408035                 pop     esi
.text:00408036                 pop     edi
.text:00408037                 pop     ebp
.text:00408038                 retn
.text:00408039 ; ---------------------------------------------------------------------------
.text:00408039
.text:00408039 loc_408039:                             ; CODE XREF: sub_407F70+60↑j
.text:00408039                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040803C                 lea     ecx, [eax+2]
.text:0040803F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00408043                 call    realloc
.text:00408048                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040804C                 lea     edx, [esp+2Ch+FilePart]
.text:00408050                 mov     ebx, eax
.text:00408052                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00408056                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040805A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040805D                 call    GetFullPathNameA
.text:00408062                 sub     esp, 10h
.text:00408065                 jmp     loc_407FDD
.text:0040806A ; ---------------------------------------------------------------------------
.text:0040806A
.text:0040806A loc_40806A:                             ; CODE XREF: sub_407F70+51↑j
.text:0040806A                 call    sub_407F00
.text:0040806F                 mov     esi, eax
.text:00408071                 call    _errno
.text:00408076                 mov     [eax], esi
.text:00408078
.text:00408078 loc_408078:                             ; CODE XREF: sub_407F70+117↓j
.text:00408078                                         ; sub_407F70+124↓j
.text:00408078                 xor     eax, eax
.text:0040807A                 jmp     short loc_408031
.text:0040807C ; ---------------------------------------------------------------------------
.text:0040807C
.text:0040807C loc_40807C:                             ; CODE XREF: sub_407F70+1A↑j
.text:0040807C                 call    _errno
.text:00408081                 mov     dword ptr [eax], 2
.text:00408087                 jmp     short loc_408078
.text:00408089 ; ---------------------------------------------------------------------------
.text:00408089
.text:00408089 loc_408089:                             ; CODE XREF: sub_407F70+11↑j
.text:00408089                 call    _errno
.text:0040808E                 mov     dword ptr [eax], 16h
.text:00408094                 jmp     short loc_408078
.text:00408094 sub_407F70      endp
.text:00408094
.text:00408094 ; ---------------------------------------------------------------------------
.text:00408096                 align 10h
.text:004080A0
.text:004080A0 ; =============== S U B R O U T I N E =======================================
.text:004080A0
.text:004080A0
.text:004080A0 ; int __cdecl sub_4080A0(LPCSTR lpFileName, int)
.text:004080A0 sub_4080A0      proc near               ; CODE XREF: sub_405610+1D03↑p
.text:004080A0                                         ; .text:004077B2↑p ...
.text:004080A0
.text:004080A0 uMode           = dword ptr -1Ch
.text:004080A0 var_10          = dword ptr -10h
.text:004080A0 var_C           = dword ptr -0Ch
.text:004080A0 var_8           = dword ptr -8
.text:004080A0 var_4           = dword ptr -4
.text:004080A0 lpFileName      = dword ptr  4
.text:004080A0 arg_4           = dword ptr  8
.text:004080A0
.text:004080A0                 sub     esp, 1Ch
.text:004080A3                 mov     [esp+1Ch+var_10], ebx
.text:004080A7                 mov     ebx, [esp+1Ch+lpFileName]
.text:004080AB                 mov     [esp+1Ch+var_4], ebp
.text:004080AF                 xor     ebp, ebp
.text:004080B1                 test    ebx, ebx
.text:004080B3                 mov     [esp+1Ch+var_C], esi
.text:004080B7                 mov     esi, [esp+1Ch+arg_4]
.text:004080BB                 mov     [esp+1Ch+var_8], edi
.text:004080BF                 jz      short loc_4080C9
.text:004080C1                 test    esi, 0FFFFFFE8h
.text:004080C7                 jz      short loc_4080F0
.text:004080C9
.text:004080C9 loc_4080C9:                             ; CODE XREF: sub_4080A0+1F↑j
.text:004080C9                 call    _errno
.text:004080CE                 mov     dword ptr [eax], 16h
.text:004080D4
.text:004080D4 loc_4080D4:                             ; CODE XREF: sub_4080A0+B1↓j
.text:004080D4                 mov     eax, 0FFFFFFFFh
.text:004080D9
.text:004080D9 loc_4080D9:                             ; CODE XREF: sub_4080A0+86↓j
.text:004080D9                                         ; sub_4080A0+A4↓j
.text:004080D9                 mov     ebx, [esp+1Ch+var_10]
.text:004080DD                 mov     esi, [esp+1Ch+var_C]
.text:004080E1                 mov     edi, [esp+1Ch+var_8]
.text:004080E5                 mov     ebp, [esp+1Ch+var_4]
.text:004080E9                 add     esp, 1Ch
.text:004080EC                 retn
.text:004080EC ; ---------------------------------------------------------------------------
.text:004080ED                 align 10h
.text:004080F0
.text:004080F0 loc_4080F0:                             ; CODE XREF: sub_4080A0+27↑j
.text:004080F0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:004080F7                 call    SetErrorMode
.text:004080FC                 sub     esp, 4
.text:004080FF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00408102                 call    GetFileAttributesA
.text:00408107                 sub     esp, 4
.text:0040810A                 mov     edi, eax
.text:0040810C                 cmp     eax, 0FFFFFFFFh
.text:0040810F                 jz      short loc_408153
.text:00408111
.text:00408111 loc_408111:                             ; CODE XREF: sub_4080A0+C6↓j
.text:00408111                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00408118                 call    SetErrorMode
.text:0040811D                 sub     esp, 4
.text:00408120                 mov     eax, 0FFFFFFFFh
.text:00408125                 inc     ebp
.text:00408126                 jz      short loc_4080D9
.text:00408128                 test    esi, 10h
.text:0040812E                 jz      short loc_408138
.text:00408130                 test    edi, 10h
.text:00408136                 jz      short loc_408146
.text:00408138
.text:00408138 loc_408138:                             ; CODE XREF: sub_4080A0+8E↑j
.text:00408138                 and     esi, 2
.text:0040813B                 jz      short loc_408142
.text:0040813D                 and     edi, 1
.text:00408140                 jnz     short loc_408146
.text:00408142
.text:00408142 loc_408142:                             ; CODE XREF: sub_4080A0+9B↑j
.text:00408142                 xor     eax, eax
.text:00408144                 jmp     short loc_4080D9
.text:00408146 ; ---------------------------------------------------------------------------
.text:00408146
.text:00408146 loc_408146:                             ; CODE XREF: sub_4080A0+96↑j
.text:00408146                                         ; sub_4080A0+A0↑j
.text:00408146                 call    _errno
.text:0040814B                 mov     dword ptr [eax], 0Dh
.text:00408151                 jmp     short loc_4080D4
.text:00408153 ; ---------------------------------------------------------------------------
.text:00408153
.text:00408153 loc_408153:                             ; CODE XREF: sub_4080A0+6F↑j
.text:00408153                 call    sub_407F00
.text:00408158                 mov     ebp, eax
.text:0040815A                 call    _errno
.text:0040815F                 mov     [eax], ebp
.text:00408161                 mov     ebp, 0FFFFFFFFh
.text:00408166                 jmp     short loc_408111
.text:00408166 sub_4080A0      endp
.text:00408166
.text:00408166 ; ---------------------------------------------------------------------------
.text:00408168                 align 10h
.text:00408170 ; const char String[4]
.text:00408170 String          db ' :/',0              ; DATA XREF: sub_408180+FA↓o
.text:00408174                 align 10h
.text:00408180
.text:00408180 ; =============== S U B R O U T I N E =======================================
.text:00408180
.text:00408180
.text:00408180 ; int __cdecl sub_408180(LPCSTR)
.text:00408180 sub_408180      proc near               ; CODE XREF: sub_4060D0+E↑p
.text:00408180                                         ; sub_4065D0+17↑p ...
.text:00408180
.text:00408180 Str             = dword ptr -1Ch
.text:00408180 Val             = dword ptr -18h
.text:00408180 Count           = dword ptr -14h
.text:00408180 var_10          = dword ptr -10h
.text:00408180 var_C           = dword ptr -0Ch
.text:00408180 var_8           = dword ptr -8
.text:00408180 var_4           = dword ptr -4
.text:00408180 arg_0           = dword ptr  4
.text:00408180
.text:00408180                 sub     esp, 1Ch
.text:00408183                 mov     edx, [esp+1Ch+arg_0]
.text:00408187                 mov     [esp+1Ch+var_8], edi
.text:0040818B                 mov     [esp+1Ch+var_10], ebx
.text:0040818F                 mov     [esp+1Ch+var_C], esi
.text:00408193                 mov     [esp+1Ch+var_4], ebp
.text:00408197                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040819A                 call    sub_407F50
.text:0040819F                 test    eax, eax
.text:004081A1                 mov     edi, eax
.text:004081A3                 jz      short loc_4081E0
.text:004081A5                 mov     [esp+1Ch+Str], eax ; Str
.text:004081A8                 call    strlen
.text:004081AD                 cmp     eax, 2
.text:004081B0                 jbe     short loc_4081BC
.text:004081B2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:004081B6                 jz      loc_408270
.text:004081BC
.text:004081BC loc_4081BC:                             ; CODE XREF: sub_408180+30↑j
.text:004081BC                                         ; sub_408180+F4↓j
.text:004081BC                 test    edi, edi
.text:004081BE                 jz      short loc_4081E0
.text:004081C0                 mov     [esp+1Ch+Str], edi ; Str
.text:004081C3                 call    strlen
.text:004081C8                 cmp     eax, 4
.text:004081CB                 mov     ebp, eax
.text:004081CD                 jle     short loc_4081E0
.text:004081CF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:004081D2                 jz      short loc_408200
.text:004081D4                 lea     esi, [esi+0]
.text:004081DA                 lea     edi, [edi+0]
.text:004081E0
.text:004081E0 loc_4081E0:                             ; CODE XREF: sub_408180+23↑j
.text:004081E0                                         ; sub_408180+3E↑j ...
.text:004081E0                 xor     esi, esi
.text:004081E2
.text:004081E2 loc_4081E2:                             ; CODE XREF: sub_408180+CD↓j
.text:004081E2                                         ; sub_408180+115↓j
.text:004081E2                 mov     [esp+1Ch+Str], edi ; Block
.text:004081E5                 call    free
.text:004081EA                 mov     eax, esi
.text:004081EC                 mov     ebx, [esp+1Ch+var_10]
.text:004081F0                 mov     esi, [esp+1Ch+var_C]
.text:004081F4                 mov     edi, [esp+1Ch+var_8]
.text:004081F8                 mov     ebp, [esp+1Ch+var_4]
.text:004081FC                 add     esp, 1Ch
.text:004081FF                 retn
.text:00408200 ; ---------------------------------------------------------------------------
.text:00408200
.text:00408200 loc_408200:                             ; CODE XREF: sub_408180+52↑j
.text:00408200                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00408204                 jnz     short loc_4081E0
.text:00408206                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040820E                 lea     ecx, [edi+2]
.text:00408211                 mov     [esp+1Ch+Str], ecx ; Str
.text:00408214                 call    strchr
.text:00408219                 test    eax, eax
.text:0040821B                 jnz     short loc_40824F
.text:0040821D
.text:0040821D loc_40821D:                             ; CODE XREF: sub_408180+E2↓j
.text:0040821D                 inc     ebp
.text:0040821E
.text:0040821E loc_40821E:                             ; CODE XREF: sub_408180+E9↓j
.text:0040821E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00408226                 lea     ebx, [ebp+1]
.text:00408229                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040822C                 call    calloc
.text:00408231                 mov     [esp+1Ch+Str], eax ; Destination
.text:00408234                 mov     esi, eax
.text:00408236                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040823A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040823E                 call    strncpy
.text:00408243                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00408248                 mov     byte ptr [ebp+esi+0], 0
.text:0040824D                 jmp     short loc_4081E2
.text:0040824F ; ---------------------------------------------------------------------------
.text:0040824F
.text:0040824F loc_40824F:                             ; CODE XREF: sub_408180+9B↑j
.text:0040824F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00408257                 inc     eax
.text:00408258                 mov     [esp+1Ch+Str], eax ; Str
.text:0040825B                 call    strchr
.text:00408260                 test    eax, eax
.text:00408262                 jz      short loc_40821D
.text:00408264                 sub     eax, edi
.text:00408266                 lea     ebp, [eax+1]
.text:00408269                 jmp     short loc_40821E
.text:00408269 ; ---------------------------------------------------------------------------
.text:0040826B                 align 10h
.text:00408270
.text:00408270 loc_408270:                             ; CODE XREF: sub_408180+36↑j
.text:00408270                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00408274                 jnz     loc_4081BC
.text:0040827A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00408281                 call    _strdup
.text:00408286                 movsx   edx, byte ptr [edi]
.text:00408289                 mov     esi, eax
.text:0040828B                 mov     [esp+1Ch+Str], edx ; C
.text:0040828E                 call    toupper
.text:00408293                 mov     [esi], al
.text:00408295                 jmp     loc_4081E2
.text:00408295 sub_408180      endp
.text:00408295
.text:00408295 ; ---------------------------------------------------------------------------
.text:0040829A                 align 10h
.text:004082A0
.text:004082A0 ; =============== S U B R O U T I N E =======================================
.text:004082A0
.text:004082A0
.text:004082A0 sub_4082A0      proc near               ; CODE XREF: .text:004083F4↓p
.text:004082A0                                         ; .text:004084D8↓p
.text:004082A0
.text:004082A0 Str             = dword ptr -2Ch
.text:004082A0 Val             = dword ptr -28h
.text:004082A0 var_18          = dword ptr -18h
.text:004082A0 var_11          = byte ptr -11h
.text:004082A0 arg_0           = dword ptr  4
.text:004082A0
.text:004082A0                 push    ebp
.text:004082A1                 push    edi
.text:004082A2                 push    esi
.text:004082A3                 push    ebx
.text:004082A4                 sub     esp, 1Ch
.text:004082A7                 mov     edx, [esp+2Ch+arg_0]
.text:004082AB                 cmp     edx, ds:dword_40F1E0
.text:004082B1                 mov     [esp+2Ch+var_11], 0
.text:004082B6                 jz      loc_4083B4
.text:004082BC                 mov     ebx, ds:dword_40F1D0
.text:004082C2                 test    ebx, ebx
.text:004082C4                 jz      short loc_408332
.text:004082C6
.text:004082C6 loc_4082C6:                             ; CODE XREF: sub_4082A0+10F↓j
.text:004082C6                 mov     ebx, [esp+2Ch+arg_0]
.text:004082CA                 xor     edi, edi
.text:004082CC                 xor     esi, esi
.text:004082CE                 mov     ebp, offset dword_40F1F8
.text:004082D3                 lea     esi, [esi+0]
.text:004082D9                 lea     edi, [edi+0]
.text:004082E0
.text:004082E0 loc_4082E0:                             ; CODE XREF: sub_4082A0+60↓j
.text:004082E0                 mov     edx, [ebp+4]
.text:004082E3                 mov     ecx, edi
.text:004082E5                 mov     eax, [ebp+0]
.text:004082E8                 shl     ecx, 4
.text:004082EB                 mov     [esp+2Ch+var_18], ecx
.text:004082EF                 mov     ecx, edx
.text:004082F1                 xor     eax, ebx
.text:004082F3                 xor     ecx, esi
.text:004082F5                 or      ecx, eax
.text:004082F7                 jz      short loc_408321
.text:004082F9                 inc     edi
.text:004082FA                 add     ebp, 10h
.text:004082FD                 cmp     edi, 20h ; ' '
.text:00408300                 jle     short loc_4082E0
.text:00408302
.text:00408302 loc_408302:                             ; CODE XREF: sub_4082A0+90↓j
.text:00408302                 movzx   ebx, [esp+2Ch+var_11]
.text:00408307                 mov     eax, [esp+2Ch+arg_0]
.text:0040830B                 mov     byte_40E060, bl
.text:00408311                 mov     ds:dword_40F1E0, eax
.text:00408316                 movsx   eax, bl
.text:00408319
.text:00408319 loc_408319:                             ; CODE XREF: sub_4082A0+11B↓j
.text:00408319                 add     esp, 1Ch
.text:0040831C                 pop     ebx
.text:0040831D                 pop     esi
.text:0040831E                 pop     edi
.text:0040831F                 pop     ebp
.text:00408320                 retn
.text:00408321 ; ---------------------------------------------------------------------------
.text:00408321
.text:00408321 loc_408321:                             ; CODE XREF: sub_4082A0+57↑j
.text:00408321                 mov     edx, [esp+2Ch+var_18]
.text:00408325                 movzx   eax, byte ptr ds:dword_40F1F0[edx]
.text:0040832C                 mov     [esp+2Ch+var_11], al
.text:00408330                 jmp     short loc_408302
.text:00408332 ; ---------------------------------------------------------------------------
.text:00408332
.text:00408332 loc_408332:                             ; CODE XREF: sub_4082A0+24↑j
.text:00408332                 mov     [esp+2Ch+Str], 0
.text:00408339                 call    sub_40A490
.text:0040833E                 test    eax, eax
.text:00408340                 mov     ebx, eax
.text:00408342                 jz      short loc_40839C
.text:00408344                 movzx   ecx, byte ptr [eax]
.text:00408347                 mov     esi, 0FFFFFFF0h
.text:0040834C                 test    cl, cl
.text:0040834E                 jz      short loc_40839C
.text:00408350
.text:00408350 loc_408350:                             ; CODE XREF: sub_4082A0+FA↓j
.text:00408350                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00408353                 movsx   ebp, cl
.text:00408356                 add     esi, 10h
.text:00408359                 mov     ds:dword_40F1F0[esi], ebp
.text:0040835F                 mov     edi, ebp
.text:00408361                 sar     edi, 1Fh
.text:00408364                 mov     ds:dword_40F1F4[esi], edi
.text:0040836A                 call    sub_4065D0
.text:0040836F                 mov     ds:dword_40F1F8[esi], eax
.text:00408375                 xor     ecx, ecx
.text:00408377                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040837A                 mov     ds:dword_40F1FC[esi], ecx
.text:00408380                 mov     [esp+2Ch+Val], 0 ; Val
.text:00408388                 call    strchr
.text:0040838D                 mov     ebx, eax
.text:0040838F                 inc     ebx
.text:00408390                 jz      short loc_40839C
.text:00408392                 movzx   edx, byte ptr [eax+1]
.text:00408396                 test    dl, dl
.text:00408398                 mov     cl, dl
.text:0040839A                 jnz     short loc_408350
.text:0040839C
.text:0040839C loc_40839C:                             ; CODE XREF: sub_4082A0+A2↑j
.text:0040839C                                         ; sub_4082A0+AE↑j ...
.text:0040839C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040839F                 mov     esi, 1
.text:004083A4                 mov     ds:dword_40F1D0, esi
.text:004083AA                 call    free
.text:004083AF                 jmp     loc_4082C6
.text:004083B4 ; ---------------------------------------------------------------------------
.text:004083B4
.text:004083B4 loc_4083B4:                             ; CODE XREF: sub_4082A0+16↑j
.text:004083B4                 movsx   eax, byte_40E060
.text:004083BB                 jmp     loc_408319
.text:004083BB sub_4082A0      endp
.text:004083BB
.text:004083BB ; ---------------------------------------------------------------------------
.text:004083C0 dword_4083C0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:004083C0                                         ; DATA XREF: .text:004083E3↓o
.text:004083C0                                         ; .text:004084C3↓o
.text:004083D0 ; ---------------------------------------------------------------------------
.text:004083D0                 sub     esp, 1Ch
.text:004083D3                 mov     [esp+14h], esi
.text:004083D7                 mov     esi, [esp+20h]
.text:004083DB                 mov     [esp+18h], edi
.text:004083DF                 mov     [esp+10h], ebx
.text:004083E3                 mov     dword ptr [esp], offset dword_4083C0
.text:004083EA                 call    _strdup
.text:004083EF                 mov     [esp], esi
.text:004083F2                 mov     edi, eax
.text:004083F4                 call    sub_4082A0
.text:004083F9                 mov     [edi], al
.text:004083FB                 test    al, al
.text:004083FD                 jz      short loc_408411
.text:004083FF                 mov     eax, edi
.text:00408401                 mov     ebx, [esp+10h]
.text:00408405                 mov     esi, [esp+14h]
.text:00408409                 mov     edi, [esp+18h]
.text:0040840D                 add     esp, 1Ch
.text:00408410                 retn
.text:00408411 ; ---------------------------------------------------------------------------
.text:00408411
.text:00408411 loc_408411:                             ; CODE XREF: .text:004083FD↑j
.text:00408411                 mov     [esp], edi
.text:00408414                 call    free
.text:00408419                 mov     dword ptr [esp+4], 0
.text:00408421                 mov     dword ptr [esp], 0
.text:00408428                 call    GetCurrentDirectoryA
.text:0040842D                 sub     esp, 8
.text:00408430                 lea     esi, [eax+1]
.text:00408433                 mov     [esp], esi
.text:00408436                 call    malloc
.text:0040843B                 mov     [esp+4], eax
.text:0040843F                 mov     edi, eax
.text:00408441                 mov     [esp], esi
.text:00408444                 call    GetCurrentDirectoryA
.text:00408449                 sub     esp, 8
.text:0040844C                 test    eax, eax
.text:0040844E                 jnz     short loc_408470
.text:00408450                 mov     dword ptr [esp+20h], 4083C4h
.text:00408458                 mov     ebx, [esp+10h]
.text:0040845C                 mov     esi, [esp+14h]
.text:00408460                 mov     edi, [esp+18h]
.text:00408464                 add     esp, 1Ch
.text:00408467                 jmp     _strdup
.text:00408467 ; ---------------------------------------------------------------------------
.text:0040846C                 align 10h
.text:00408470
.text:00408470 loc_408470:                             ; CODE XREF: .text:0040844E↑j
.text:00408470                 mov     [esp+20h], edi
.text:00408474                 mov     ebx, [esp+10h]
.text:00408478                 mov     esi, [esp+14h]
.text:0040847C                 mov     edi, [esp+18h]
.text:00408480                 add     esp, 1Ch
.text:00408483                 jmp     sub_408180
.text:00408483 ; ---------------------------------------------------------------------------
.text:00408488                 align 10h
.text:00408490                 sub     esp, 7Ch
.text:00408493                 lea     edx, [esp+10h]
.text:00408497                 mov     [esp+8], edx
.text:0040849B                 mov     edx, [esp+80h]
.text:004084A2                 mov     [esp+70h], ebx
.text:004084A6                 mov     [esp+74h], esi
.text:004084AA                 mov     [esp+4], edx
.text:004084AE                 mov     [esp+78h], edi
.text:004084B2                 mov     dword ptr [esp], 0
.text:004084B9                 call    sub_40A6A0
.text:004084BE                 xor     edx, edx
.text:004084C0                 inc     eax
.text:004084C1                 jz      short loc_4084E5
.text:004084C3                 mov     dword ptr [esp], offset dword_4083C0
.text:004084CA                 mov     esi, [esp+20h]
.text:004084CE                 call    _strdup
.text:004084D3                 mov     edi, eax
.text:004084D5                 mov     [esp], esi
.text:004084D8                 call    sub_4082A0
.text:004084DD                 mov     [edi], al
.text:004084DF                 test    al, al
.text:004084E1                 mov     edx, edi
.text:004084E3                 jz      short loc_4084F7
.text:004084E5
.text:004084E5 loc_4084E5:                             ; CODE XREF: .text:004084C1↑j
.text:004084E5                                         ; .text:00408544↓j
.text:004084E5                 mov     ebx, [esp+70h]
.text:004084E9                 mov     eax, edx
.text:004084EB                 mov     esi, [esp+74h]
.text:004084EF                 mov     edi, [esp+78h]
.text:004084F3                 add     esp, 7Ch
.text:004084F6                 retn
.text:004084F7 ; ---------------------------------------------------------------------------
.text:004084F7
.text:004084F7 loc_4084F7:                             ; CODE XREF: .text:004084E3↑j
.text:004084F7                 mov     [esp], edi
.text:004084FA                 call    free
.text:004084FF                 mov     dword ptr [esp+4], 0
.text:00408507                 mov     dword ptr [esp], 0
.text:0040850E                 call    GetCurrentDirectoryA
.text:00408513                 sub     esp, 8
.text:00408516                 lea     esi, [eax+1]
.text:00408519                 mov     [esp], esi
.text:0040851C                 call    malloc
.text:00408521                 mov     [esp+4], eax
.text:00408525                 mov     edi, eax
.text:00408527                 mov     [esp], esi
.text:0040852A                 call    GetCurrentDirectoryA
.text:0040852F                 sub     esp, 8
.text:00408532                 test    eax, eax
.text:00408534                 jnz     short loc_408546
.text:00408536                 mov     dword ptr [esp], 4083C4h
.text:0040853D                 call    _strdup
.text:00408542
.text:00408542 loc_408542:                             ; CODE XREF: .text:0040854E↓j
.text:00408542                 mov     edx, eax
.text:00408544                 jmp     short loc_4084E5
.text:00408546 ; ---------------------------------------------------------------------------
.text:00408546
.text:00408546 loc_408546:                             ; CODE XREF: .text:00408534↑j
.text:00408546                 mov     [esp], edi
.text:00408549                 call    sub_408180
.text:0040854E                 jmp     short loc_408542
.text:00408550
.text:00408550 ; =============== S U B R O U T I N E =======================================
.text:00408550
.text:00408550
.text:00408550 ; int __cdecl sub_408550(LPCSTR)
.text:00408550 sub_408550      proc near               ; CODE XREF: sub_405A80+12F↑p
.text:00408550
.text:00408550 String1         = dword ptr -1Ch
.text:00408550 String2         = dword ptr -18h
.text:00408550 var_C           = dword ptr -0Ch
.text:00408550 var_8           = dword ptr -8
.text:00408550 var_4           = dword ptr -4
.text:00408550 arg_0           = dword ptr  4
.text:00408550
.text:00408550                 sub     esp, 1Ch
.text:00408553                 mov     [esp+1Ch+var_4], edi
.text:00408557                 mov     edi, [esp+1Ch+arg_0]
.text:0040855B                 mov     [esp+1Ch+var_C], ebx
.text:0040855F                 mov     [esp+1Ch+var_8], esi
.text:00408563                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00408566                 call    sub_407F50
.text:0040856B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040856E                 mov     esi, eax
.text:00408570                 call    sub_408180
.text:00408575                 mov     [esp+1Ch+String2], eax ; String2
.text:00408579                 mov     ebx, eax
.text:0040857B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040857E                 call    _stricmp
.text:00408583                 test    eax, eax
.text:00408585                 setz    dl
.text:00408588                 test    esi, esi
.text:0040858A                 movzx   edi, dl
.text:0040858D                 jz      short loc_408597
.text:0040858F                 mov     [esp+1Ch+String1], esi ; Block
.text:00408592                 call    free
.text:00408597
.text:00408597 loc_408597:                             ; CODE XREF: sub_408550+3D↑j
.text:00408597                 test    ebx, ebx
.text:00408599                 jz      short loc_4085A3
.text:0040859B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040859E                 call    free
.text:004085A3
.text:004085A3 loc_4085A3:                             ; CODE XREF: sub_408550+49↑j
.text:004085A3                 mov     eax, edi
.text:004085A5                 mov     ebx, [esp+1Ch+var_C]
.text:004085A9                 mov     esi, [esp+1Ch+var_8]
.text:004085AD                 mov     edi, [esp+1Ch+var_4]
.text:004085B1                 add     esp, 1Ch
.text:004085B4                 retn
.text:004085B4 sub_408550      endp
.text:004085B4
.text:004085B4 ; ---------------------------------------------------------------------------
.text:004085B5                 align 10h
.text:004085C0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00408611↓o
.text:004085C9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:004085C9                                         ; DATA XREF: .text:00408622↓o
.text:004085DD ; const CHAR FileName[]
.text:004085DD FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040876C↓o
.text:004085DD                                         ; sub_408BA0+17C↓o
.text:004085E8 ; ---------------------------------------------------------------------------
.text:004085E8
.text:004085E8 loc_4085E8:                             ; DATA XREF: .text:00408882↓o
.text:004085E8                 dec     esi
.text:004085E9                 push    esp
.text:004085EA                 inc     esi
.text:004085EB                 push    ebx
.text:004085EC                 add     [esi+41h], al
.text:004085EF                 push    esp
.text:004085F0                 xor     esi, [edx]
.text:004085F2                 add     [esi+41h], al
.text:004085F5                 push    esp
.text:004085F6                 add     [ebx+44h], al
.text:004085F9                 inc     esi
.text:004085FA                 push    ebx
.text:004085FB
.text:004085FB loc_4085FB:                             ; CODE XREF: sub_408BA0+101↓p
.text:004085FB                 add     [ebp+55002674h], cl
.text:00408601                 push    edi
.text:00408602                 push    esi
.text:00408603                 push    ebx
.text:00408604                 sub     esp, 8BCh
.text:0040860A                 mov     ebp, [esp+8D0h]
.text:00408611                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00408618                 call    LoadLibraryA
.text:0040861D                 sub     esp, 4
.text:00408620                 mov     edi, eax
.text:00408622                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040862A                 mov     [esp], eax
.text:0040862D                 call    GetProcAddress
.text:00408632                 sub     esp, 8
.text:00408635                 mov     esi, eax
.text:00408637                 test    ebp, ebp
.text:00408639                 mov     dword ptr [esp+20h], 0
.text:00408641                 jz      loc_408B81
.text:00408647                 mov     [esp], ebp
.text:0040864A                 call    sub_407850
.text:0040864F                 mov     [esp], eax
.text:00408652                 mov     ebp, eax
.text:00408654                 call    strlen
.text:00408659                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040865E                 mov     ebx, eax
.text:00408660                 jz      short loc_40867C
.text:00408662                 mov     [esp], ebp
.text:00408665                 lea     edx, [eax+1]
.text:00408668                 mov     [esp+4], edx
.text:0040866C                 call    realloc
.text:00408671                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00408675                 mov     ebp, eax
.text:00408677                 mov     byte ptr [ebx+eax+1], 0
.text:0040867C
.text:0040867C loc_40867C:                             ; CODE XREF: .text:00408660↑j
.text:0040867C                 mov     dword ptr [esp+1Ch], 400h
.text:00408684                 lea     edx, [esp+0B0h]
.text:0040868B                 lea     ebx, [esp+5Ch]
.text:0040868F                 mov     [esp+18h], edx
.text:00408693                 lea     ecx, [esp+58h]
.text:00408697                 lea     edx, [esp+54h]
.text:0040869B                 mov     [esp+14h], ebx
.text:0040869F                 lea     eax, [esp+4B0h]
.text:004086A6                 mov     [esp+10h], ecx
.text:004086AA                 mov     [esp+0Ch], edx
.text:004086AE                 mov     dword ptr [esp+8], 400h
.text:004086B6                 mov     [esp+4], eax
.text:004086BA                 mov     [esp], ebp
.text:004086BD                 call    GetVolumeInformationA
.text:004086C2                 sub     esp, 20h
.text:004086C5                 test    eax, eax
.text:004086C7                 jz      loc_408B5E
.text:004086CD                 test    esi, esi
.text:004086CF                 jz      short loc_4086F5
.text:004086D1                 mov     [esp], ebp
.text:004086D4                 lea     edx, [esp+48h]
.text:004086D8                 lea     ebx, [esp+40h]
.text:004086DC                 mov     [esp+0Ch], edx
.text:004086E0                 lea     ecx, [esp+38h]
.text:004086E4                 mov     [esp+8], ebx
.text:004086E8                 mov     [esp+4], ecx
.text:004086EC                 call    esi
.text:004086EE                 sub     esp, 10h
.text:004086F1                 mov     [esp+20h], eax
.text:004086F5
.text:004086F5 loc_4086F5:                             ; CODE XREF: .text:004086CF↑j
.text:004086F5                 test    edi, edi
.text:004086F7                 jz      short loc_408704
.text:004086F9                 mov     [esp], edi
.text:004086FC                 call    FreeLibrary
.text:00408701                 sub     esp, 4
.text:00408704
.text:00408704 loc_408704:                             ; CODE XREF: .text:004086F7↑j
.text:00408704                 call    sub_4096B0
.text:00408709                 test    eax, eax
.text:0040870B                 lea     esi, [esp+28h]
.text:0040870F                 jz      loc_408B40
.text:00408715                 call    sub_4096B0
.text:0040871A                 test    eax, eax
.text:0040871C                 jz      short loc_40872C
.text:0040871E                 call    sub_409600
.text:00408723                 cmp     eax, 0Bh
.text:00408726                 jle     loc_408B14
.text:0040872C
.text:0040872C loc_40872C:                             ; CODE XREF: .text:0040871C↑j
.text:0040872C                 cld
.text:0040872D                 xor     eax, eax
.text:0040872F                 lea     ebx, [esp+60h]
.text:00408733                 mov     ecx, 7
.text:00408738                 mov     edi, ebx
.text:0040873A                 rep stosd
.text:0040873C                 mov     dword ptr [esp+18h], 0
.text:00408744                 mov     dword ptr [esp+14h], 4000000h
.text:0040874C                 mov     dword ptr [esp+10h], 0
.text:00408754                 mov     dword ptr [esp+0Ch], 0
.text:0040875C                 mov     dword ptr [esp+8], 0
.text:00408764                 mov     dword ptr [esp+4], 0
.text:0040876C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00408773                 call    CreateFileA
.text:00408778                 sub     esp, 1Ch
.text:0040877B                 mov     edi, eax
.text:0040877D                 cmp     eax, 0FFFFFFFFh
.text:00408780                 jz      short loc_408800
.text:00408782                 mov     [esp+10h], ebx
.text:00408786                 lea     edx, [esp+80h]
.text:0040878D                 lea     ecx, [esp+24h]
.text:00408791                 mov     [esp+70h], edx
.text:00408795                 mov     [esp+18h], ecx
.text:00408799                 mov     [esp+8], ebx
.text:0040879D                 mov     dword ptr [esp+6Ch], 7303h
.text:004087A5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:004087AD                 mov     [esp+64h], ebp
.text:004087B1                 mov     dword ptr [esp+78h], 1
.text:004087B9                 mov     dword ptr [esp+1Ch], 0
.text:004087C1                 mov     dword ptr [esp+14h], 1Ch
.text:004087C9                 mov     dword ptr [esp+0Ch], 1Ch
.text:004087D1                 mov     dword ptr [esp+4], 6
.text:004087D9                 mov     [esp], eax
.text:004087DC                 call    DeviceIoControl
.text:004087E1                 sub     esp, 20h
.text:004087E4                 mov     ebx, eax
.text:004087E6                 mov     [esp], edi
.text:004087E9                 call    CloseHandle
.text:004087EE                 sub     esp, 4
.text:004087F1                 test    ebx, ebx
.text:004087F3                 jz      short loc_408800
.text:004087F5                 test    byte ptr [esp+78h], 1
.text:004087FA                 jz      loc_408AE0
.text:00408800
.text:00408800 loc_408800:                             ; CODE XREF: .text:00408780↑j
.text:00408800                                         ; .text:004087F3↑j
.text:00408800                 call    sub_407F00
.text:00408805                 mov     edi, eax
.text:00408807                 call    _errno
.text:0040880C                 mov     [eax], edi
.text:0040880E                 xor     eax, eax
.text:00408810
.text:00408810 loc_408810:                             ; CODE XREF: .text:00408B0F↓j
.text:00408810                                         ; .text:00408B3B↓j
.text:00408810                 test    eax, eax
.text:00408812                 jnz     short loc_408834
.text:00408814                 mov     dword ptr [esp+34h], 1
.text:0040881C                 mov     dword ptr [esp+30h], 200h
.text:00408824                 mov     dword ptr [esp+2Ch], 0
.text:0040882C                 mov     dword ptr [esp+28h], 0
.text:00408834
.text:00408834 loc_408834:                             ; CODE XREF: .text:00408812↑j
.text:00408834                 mov     edx, [esp+30h]
.text:00408838                 mov     edi, [esp+34h]
.text:0040883C                 mov     ecx, [esp+20h]
.text:00408840                 imul    edi, edx
.text:00408843                 test    ecx, ecx
.text:00408845                 jnz     short loc_40886D
.text:00408847                 mov     eax, [esp+28h]
.text:0040884B                 mul     edi
.text:0040884D                 mov     esi, eax
.text:0040884F                 mov     eax, [esp+2Ch]
.text:00408853                 mov     [esp+44h], edx
.text:00408857                 mov     [esp+40h], esi
.text:0040885B                 mul     edi
.text:0040885D                 mov     [esp+48h], eax
.text:00408861                 mov     [esp+4Ch], edx
.text:00408865                 mov     [esp+38h], eax
.text:00408869                 mov     [esp+3Ch], edx
.text:0040886D
.text:0040886D loc_40886D:                             ; CODE XREF: .text:00408845↑j
.text:0040886D                 mov     ebx, [esp+5Ch]
.text:00408871                 lea     edx, [esp+0B0h]
.text:00408878                 mov     ecx, [esp+8D4h]
.text:0040887F                 mov     [ecx+48h], ebx
.text:00408882                 mov     dword ptr [esp+4], offset loc_4085E8
.text:0040888A                 mov     [esp], edx
.text:0040888D                 call    _stricmp
.text:00408892                 test    eax, eax
.text:00408894                 jnz     loc_408A50
.text:0040889A                 mov     esi, [esp+8D4h]
.text:004088A1                 mov     dword ptr [esi], 5346544Eh
.text:004088A7
.text:004088A7 loc_4088A7:                             ; CODE XREF: .text:00408A78↓j
.text:004088A7                                         ; .text:00408AA5↓j ...
.text:004088A7                 mov     ebx, [esp+30h]
.text:004088AB                 mov     esi, [esp+8D4h]
.text:004088B2                 mov     [esi+4], ebx
.text:004088B5                 mov     [esi+8], ebx
.text:004088B8                 mov     ebx, [esi+8]
.text:004088BB                 mov     [esi+0Ch], edi
.text:004088BE                 mov     ecx, [esp+44h]
.text:004088C2                 xor     esi, esi
.text:004088C4                 mov     [esp+8], ebx
.text:004088C8                 mov     edx, [esp+40h]
.text:004088CC                 mov     [esp+0Ch], esi
.text:004088D0                 mov     [esp+4], ecx
.text:004088D4                 mov     [esp], edx
.text:004088D7                 call    sub_40CA40
.text:004088DC                 mov     ecx, [esp+8D4h]
.text:004088E3                 mov     [ecx+10h], eax
.text:004088E6                 mov     [ecx+14h], edx
.text:004088E9                 mov     ecx, [esp+4Ch]
.text:004088ED                 mov     [esp+8], ebx
.text:004088F1                 mov     edx, [esp+48h]
.text:004088F5                 mov     [esp+0Ch], esi
.text:004088F9                 mov     [esp+4], ecx
.text:004088FD                 mov     [esp], edx
.text:00408900                 call    sub_40CA40
.text:00408905                 mov     ecx, [esp+8D4h]
.text:0040890C                 mov     [ecx+18h], eax
.text:0040890F                 mov     [ecx+1Ch], edx
.text:00408912                 mov     ecx, [esp+38h]
.text:00408916                 mov     [esp+8], ebx
.text:0040891A                 mov     ebx, [esp+3Ch]
.text:0040891E                 mov     [esp+0Ch], esi
.text:00408922                 mov     [esp], ecx
.text:00408925                 mov     [esp+4], ebx
.text:00408929                 call    sub_40CA40
.text:0040892E                 mov     esi, [esp+8D4h]
.text:00408935                 mov     [esi+20h], eax
.text:00408938                 mov     [esi+24h], edx
.text:0040893B                 mov     ecx, [esp+44h]
.text:0040893F                 mov     esi, edi
.text:00408941                 mov     [esp+8], esi
.text:00408945                 mov     edx, [esp+40h]
.text:00408949                 xor     edi, edi
.text:0040894B                 mov     [esp+0Ch], edi
.text:0040894F                 mov     [esp+4], ecx
.text:00408953                 mov     [esp], edx
.text:00408956                 call    sub_40CA40
.text:0040895B                 mov     ebx, [esp+8D4h]
.text:00408962                 mov     [ebx+28h], eax
.text:00408965                 mov     [ebx+2Ch], edx
.text:00408968                 mov     ecx, [esp+4Ch]
.text:0040896C                 mov     [esp+8], esi
.text:00408970                 mov     edx, [esp+48h]
.text:00408974                 mov     [esp+0Ch], edi
.text:00408978                 mov     [esp+4], ecx
.text:0040897C                 mov     [esp], edx
.text:0040897F                 call    sub_40CA40
.text:00408984                 mov     ebx, [esp+8D4h]
.text:0040898B                 mov     [ebx+30h], eax
.text:0040898E                 mov     [ebx+34h], edx
.text:00408991                 mov     ecx, [esp+3Ch]
.text:00408995                 mov     [esp+8], esi
.text:00408999                 mov     edx, [esp+38h]
.text:0040899D                 mov     [esp+0Ch], edi
.text:004089A1                 mov     [esp+4], ecx
.text:004089A5                 mov     [esp], edx
.text:004089A8                 call    sub_40CA40
.text:004089AD                 mov     edx, [esp+8D4h]
.text:004089B4                 lea     ecx, [esp+0B0h]
.text:004089BB                 mov     [edx+38h], eax
.text:004089BE                 mov     esi, [esp+58h]
.text:004089C2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:004089C9                 mov     [edx+110h], esi
.text:004089CF                 mov     esi, edx
.text:004089D1                 add     esi, 4Ch ; 'L'
.text:004089D4                 movzx   ebx, word ptr [esp+56h]
.text:004089D9                 movzx   edi, word ptr [esp+54h]
.text:004089DE                 mov     [edx+3Ch], ebx
.text:004089E1                 lea     ebx, [esp+4B0h]
.text:004089E8                 mov     [edx+40h], edi
.text:004089EB                 mov     [esp+4], ecx
.text:004089EF                 mov     dword ptr [esp+8], 10h
.text:004089F7                 mov     [esp], esi
.text:004089FA                 call    strncpy
.text:004089FF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408A07                 mov     edi, [esp+8D4h]
.text:00408A0E                 mov     [esp+4], ebx
.text:00408A12                 add     edi, 5Ch ; '\'
.text:00408A15                 mov     [esp], edi
.text:00408A18                 call    strncpy
.text:00408A1D                 mov     [esp+4], ebp
.text:00408A21                 mov     ebp, [esp+8D4h]
.text:00408A28                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408A30                 add     ebp, 0B6h ; '¶'
.text:00408A36                 mov     [esp], ebp
.text:00408A39                 call    strncpy
.text:00408A3E                 xor     eax, eax
.text:00408A40
.text:00408A40 loc_408A40:                             ; CODE XREF: .text:00408B7C↓j
.text:00408A40                 add     esp, 8BCh
.text:00408A46                 pop     ebx
.text:00408A47                 pop     esi
.text:00408A48                 pop     edi
.text:00408A49                 pop     ebp
.text:00408A4A                 retn
.text:00408A4A ; ---------------------------------------------------------------------------
.text:00408A4B                 align 10h
.text:00408A50
.text:00408A50 loc_408A50:                             ; CODE XREF: .text:00408894↑j
.text:00408A50                 mov     dword ptr [esp+4], 4085EDh
.text:00408A58                 lea     eax, [esp+0B0h]
.text:00408A5F                 mov     [esp], eax
.text:00408A62                 call    _stricmp
.text:00408A67                 test    eax, eax
.text:00408A69                 jnz     short loc_408A7D
.text:00408A6B                 mov     edx, [esp+8D4h]
.text:00408A72                 mov     dword ptr [edx], 4008h
.text:00408A78                 jmp     loc_4088A7
.text:00408A7D ; ---------------------------------------------------------------------------
.text:00408A7D
.text:00408A7D loc_408A7D:                             ; CODE XREF: .text:00408A69↑j
.text:00408A7D                 mov     dword ptr [esp+4], 4085F3h
.text:00408A85                 lea     ecx, [esp+0B0h]
.text:00408A8C                 mov     [esp], ecx
.text:00408A8F                 call    _stricmp
.text:00408A94                 test    eax, eax
.text:00408A96                 jnz     short loc_408AAA
.text:00408A98                 mov     ebx, [esp+8D4h]
.text:00408A9F                 mov     dword ptr [ebx], 4006h
.text:00408AA5                 jmp     loc_4088A7
.text:00408AAA ; ---------------------------------------------------------------------------
.text:00408AAA
.text:00408AAA loc_408AAA:                             ; CODE XREF: .text:00408A96↑j
.text:00408AAA                 mov     dword ptr [esp+4], 4085F7h
.text:00408AB2                 lea     eax, [esp+0B0h]
.text:00408AB9                 mov     [esp], eax
.text:00408ABC                 call    _stricmp
.text:00408AC1                 test    eax, eax
.text:00408AC3                 mov     esi, [esp+8D4h]
.text:00408ACA                 setnz   cl
.text:00408ACD                 movzx   edx, cl
.text:00408AD0                 dec     edx
.text:00408AD1                 and     edx, 4000h
.text:00408AD7                 mov     [esi], edx
.text:00408AD9                 jmp     loc_4088A7
.text:00408AD9 ; ---------------------------------------------------------------------------
.text:00408ADE                 align 10h
.text:00408AE0
.text:00408AE0 loc_408AE0:                             ; CODE XREF: .text:004087FA↑j
.text:00408AE0                 mov     edi, [esp+84h]
.text:00408AE7                 mov     eax, 1
.text:00408AEC                 mov     edx, [esp+88h]
.text:00408AF3                 mov     ecx, [esp+8Ch]
.text:00408AFA                 mov     ebx, [esp+90h]
.text:00408B01                 mov     [esp+34h], edi
.text:00408B05                 mov     [esp+30h], edx
.text:00408B09                 mov     [esp+2Ch], ecx
.text:00408B0D                 mov     [esi], ebx
.text:00408B0F                 jmp     loc_408810
.text:00408B14 ; ---------------------------------------------------------------------------
.text:00408B14
.text:00408B14 loc_408B14:                             ; CODE XREF: .text:00408726↑j
.text:00408B14                 mov     [esp+10h], esi
.text:00408B18                 lea     eax, [esp+2Ch]
.text:00408B1C                 lea     esi, [esp+30h]
.text:00408B20                 mov     [esp+0Ch], eax
.text:00408B24                 lea     edi, [esp+34h]
.text:00408B28                 mov     [esp+8], esi
.text:00408B2C                 mov     [esp+4], edi
.text:00408B30
.text:00408B30 loc_408B30:                             ; CODE XREF: .text:00408B5C↓j
.text:00408B30                 mov     [esp], ebp
.text:00408B33                 call    GetDiskFreeSpaceA
.text:00408B38                 sub     esp, 14h
.text:00408B3B                 jmp     loc_408810
.text:00408B40 ; ---------------------------------------------------------------------------
.text:00408B40
.text:00408B40 loc_408B40:                             ; CODE XREF: .text:0040870F↑j
.text:00408B40                 mov     [esp+10h], esi
.text:00408B44                 lea     ebx, [esp+2Ch]
.text:00408B48                 lea     eax, [esp+30h]
.text:00408B4C                 mov     [esp+0Ch], ebx
.text:00408B50                 lea     esi, [esp+34h]
.text:00408B54                 mov     [esp+8], eax
.text:00408B58                 mov     [esp+4], esi
.text:00408B5C                 jmp     short loc_408B30
.text:00408B5E ; ---------------------------------------------------------------------------
.text:00408B5E
.text:00408B5E loc_408B5E:                             ; CODE XREF: .text:004086C7↑j
.text:00408B5E                 mov     [esp], edi
.text:00408B61                 call    FreeLibrary
.text:00408B66                 sub     esp, 4
.text:00408B69                 call    sub_407F00
.text:00408B6E                 mov     esi, eax
.text:00408B70                 call    _errno
.text:00408B75                 mov     [eax], esi
.text:00408B77
.text:00408B77 loc_408B77:                             ; CODE XREF: .text:00408B97↓j
.text:00408B77                 mov     eax, 0FFFFFFFFh
.text:00408B7C                 jmp     loc_408A40
.text:00408B81 ; ---------------------------------------------------------------------------
.text:00408B81
.text:00408B81 loc_408B81:                             ; CODE XREF: .text:00408641↑j
.text:00408B81                 mov     [esp], edi
.text:00408B84                 call    FreeLibrary
.text:00408B89                 sub     esp, 4
.text:00408B8C                 call    _errno
.text:00408B91                 mov     dword ptr [eax], 2
.text:00408B97                 jmp     short loc_408B77
.text:00408B97 ; ---------------------------------------------------------------------------
.text:00408B99                 align 10h
.text:00408BA0
.text:00408BA0 ; =============== S U B R O U T I N E =======================================
.text:00408BA0
.text:00408BA0
.text:00408BA0 ; int __cdecl sub_408BA0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00408BA0 sub_408BA0      proc near               ; CODE XREF: sub_4060D0+2C7↑p
.text:00408BA0                                         ; .text:0040670A↑p
.text:00408BA0
.text:00408BA0 lpFileName      = dword ptr -9Ch
.text:00408BA0 dwDesiredAccess = dword ptr -98h
.text:00408BA0 dwShareMode     = dword ptr -94h
.text:00408BA0 lpSecurityAttributes= dword ptr -90h
.text:00408BA0 dwCreationDisposition= dword ptr -8Ch
.text:00408BA0 dwFlagsAndAttributes= dword ptr -88h
.text:00408BA0 hTemplateFile   = dword ptr -84h
.text:00408BA0 lpOverlapped    = dword ptr -80h
.text:00408BA0 BytesReturned   = dword ptr -70h
.text:00408BA0 InBuffer        = byte ptr -6Ch
.text:00408BA0 var_68          = dword ptr -68h
.text:00408BA0 var_64          = dword ptr -64h
.text:00408BA0 var_60          = dword ptr -60h
.text:00408BA0 var_5C          = dword ptr -5Ch
.text:00408BA0 var_54          = dword ptr -54h
.text:00408BA0 var_4C          = byte ptr -4Ch
.text:00408BA0 var_48          = dword ptr -48h
.text:00408BA0 var_44          = dword ptr -44h
.text:00408BA0 var_40          = dword ptr -40h
.text:00408BA0 var_3C          = dword ptr -3Ch
.text:00408BA0 lpRootPathName  = dword ptr -2Ch
.text:00408BA0 lpSectorsPerCluster= dword ptr -28h
.text:00408BA0 lpBytesPerSector= dword ptr -24h
.text:00408BA0 lpNumberOfFreeClusters= dword ptr -20h
.text:00408BA0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00408BA0 var_18          = dword ptr -18h
.text:00408BA0 var_14          = dword ptr -14h
.text:00408BA0 var_10          = dword ptr -10h
.text:00408BA0 var_C           = dword ptr -0Ch
.text:00408BA0 var_8           = dword ptr -8
.text:00408BA0 var_4           = dword ptr -4
.text:00408BA0 arg_0           = dword ptr  4
.text:00408BA0 arg_4           = dword ptr  8
.text:00408BA0 arg_8           = dword ptr  0Ch
.text:00408BA0 arg_C           = dword ptr  10h
.text:00408BA0 arg_10          = dword ptr  14h
.text:00408BA0
.text:00408BA0                 sub     esp, 2Ch
.text:00408BA3                 mov     edx, [esp+2Ch+arg_0]
.text:00408BA7                 mov     [esp+2Ch+var_10], ebx
.text:00408BAB                 mov     ebx, [esp+2Ch+arg_10]
.text:00408BAF                 mov     [esp+2Ch+var_C], esi
.text:00408BB3                 mov     esi, [esp+2Ch+arg_C]
.text:00408BB7                 mov     [esp+2Ch+var_8], edi
.text:00408BBB                 mov     edi, [esp+2Ch+arg_8]
.text:00408BBF                 mov     [esp+2Ch+var_4], ebp
.text:00408BC3                 mov     ebp, [esp+2Ch+arg_4]
.text:00408BC7                 mov     [esp+2Ch+var_14], edx
.text:00408BCB                 call    sub_4096B0
.text:00408BD0                 test    eax, eax
.text:00408BD2                 jz      short loc_408C04
.text:00408BD4                 mov     [esp+2Ch+arg_10], ebx
.text:00408BD8                 mov     edx, [esp+2Ch+var_14]
.text:00408BDC                 mov     ebx, [esp+2Ch+var_10]
.text:00408BE0                 mov     [esp+2Ch+arg_C], esi
.text:00408BE4                 mov     esi, [esp+2Ch+var_C]
.text:00408BE8                 mov     [esp+2Ch+arg_8], edi
.text:00408BEC                 mov     edi, [esp+2Ch+var_8]
.text:00408BF0                 mov     [esp+2Ch+arg_4], ebp
.text:00408BF4                 mov     ebp, [esp+2Ch+var_4]
.text:00408BF8                 mov     [esp+2Ch+arg_0], edx
.text:00408BFC                 add     esp, 2Ch
.text:00408BFF                 jmp     loc_408CB0
.text:00408C04 ; ---------------------------------------------------------------------------
.text:00408C04
.text:00408C04 loc_408C04:                             ; CODE XREF: sub_408BA0+32↑j
.text:00408C04                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00408C08                 mov     ecx, [esp+2Ch+var_14]
.text:00408C0C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00408C10                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00408C14                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00408C18                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00408C1B                 call    GetDiskFreeSpaceA
.text:00408C20                 sub     esp, 14h
.text:00408C23                 mov     ebx, [esp+2Ch+var_10]
.text:00408C27                 mov     esi, [esp+2Ch+var_C]
.text:00408C2B                 mov     edi, [esp+2Ch+var_8]
.text:00408C2F                 mov     ebp, [esp+2Ch+var_4]
.text:00408C33                 add     esp, 2Ch
.text:00408C36                 retn
.text:00408C36 ; ---------------------------------------------------------------------------
.text:00408C37                 align 10h
.text:00408C40
.text:00408C40 loc_408C40:                             ; CODE XREF: .text:004099CD↓p
.text:00408C40                 sub     esp, 1Ch
.text:00408C43                 mov     [esp+1Ch+var_4], esi
.text:00408C47                 mov     esi, [esp+1Ch+arg_0]
.text:00408C4B                 mov     [esp+1Ch+var_8], ebx
.text:00408C4F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00408C52                 call    sub_408180
.text:00408C57                 test    eax, eax
.text:00408C59                 mov     ebx, eax
.text:00408C5B                 jz      short loc_408C70
.text:00408C5D                 cmp     byte ptr [eax], 0
.text:00408C60                 jz      short loc_408C70
.text:00408C62                 test    esi, esi
.text:00408C64                 jz      short loc_408C70
.text:00408C66                 cmp     byte ptr [esi], 0
.text:00408C69                 jnz     short loc_408C96
.text:00408C6B                 nop
.text:00408C6C                 lea     esi, [esi+0]
.text:00408C70
.text:00408C70 loc_408C70:                             ; CODE XREF: sub_408BA0+BB↑j
.text:00408C70                                         ; sub_408BA0+C0↑j ...
.text:00408C70                 call    _errno
.text:00408C75                 mov     dword ptr [eax], 2
.text:00408C7B                 mov     esi, 0FFFFFFFFh
.text:00408C80
.text:00408C80 loc_408C80:                             ; CODE XREF: sub_408BA0+108↓j
.text:00408C80                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00408C83                 call    free
.text:00408C88                 mov     eax, esi
.text:00408C8A                 mov     ebx, [esp+1Ch+var_8]
.text:00408C8E                 mov     esi, [esp+1Ch+var_4]
.text:00408C92                 add     esp, 1Ch
.text:00408C95                 retn
.text:00408C96 ; ---------------------------------------------------------------------------
.text:00408C96
.text:00408C96 loc_408C96:                             ; CODE XREF: sub_408BA0+C9↑j
.text:00408C96                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00408C99                 mov     edx, [esp+1Ch+arg_4]
.text:00408C9D                 mov     [esp+1Ch+var_18], edx
.text:00408CA1                 call    near ptr loc_4085FB+5
.text:00408CA6                 mov     esi, eax
.text:00408CA8                 jmp     short loc_408C80
.text:00408CA8 ; ---------------------------------------------------------------------------
.text:00408CAA                 align 10h
.text:00408CB0
.text:00408CB0 loc_408CB0:                             ; CODE XREF: sub_408BA0+5F↑j
.text:00408CB0                 push    ebp
.text:00408CB1                 push    edi
.text:00408CB2                 push    esi
.text:00408CB3                 push    ebx
.text:00408CB4                 sub     esp, 8Ch
.text:00408CBA                 mov     ebp, [esp+9Ch+arg_0]
.text:00408CC1                 call    sub_4096B0
.text:00408CC6                 test    eax, eax
.text:00408CC8                 jz      short loc_408CD8
.text:00408CCA                 call    sub_409600
.text:00408CCF                 cmp     eax, 0Bh
.text:00408CD2                 jle     loc_408E00
.text:00408CD8
.text:00408CD8 loc_408CD8:                             ; CODE XREF: sub_408BA0+128↑j
.text:00408CD8                 cld
.text:00408CD9                 xor     eax, eax
.text:00408CDB                 lea     ebx, [esp+9Ch+InBuffer]
.text:00408CDF                 mov     ecx, 7
.text:00408CE4                 mov     edi, ebx
.text:00408CE6                 lea     esi, [esp+9Ch+var_4C]
.text:00408CEA                 rep stosd
.text:00408CEC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00408CF4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:00408CFC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00408D04                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00408D0C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00408D14                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00408D1C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00408D23                 call    CreateFileA
.text:00408D28                 sub     esp, 1Ch
.text:00408D2B                 mov     edi, eax
.text:00408D2D                 cmp     eax, 0FFFFFFFFh
.text:00408D30                 jz      short loc_408DA5
.text:00408D32                 mov     [esp+9Ch+var_68], ebp
.text:00408D36                 lea     ebp, [esp+9Ch+BytesReturned]
.text:00408D3A                 mov     [esp+9Ch+var_5C], esi
.text:00408D3E                 mov     [esp+9Ch+var_60], 7303h
.text:00408D46                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:00408D4E                 mov     [esp+9Ch+var_54], 1
.text:00408D56                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:00408D5E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00408D62                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:00408D6A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:00408D6E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00408D76                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:00408D7A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00408D82                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00408D85                 call    DeviceIoControl
.text:00408D8A                 sub     esp, 20h
.text:00408D8D                 mov     esi, eax
.text:00408D8F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00408D92                 call    CloseHandle
.text:00408D97                 sub     esp, 4
.text:00408D9A                 test    esi, esi
.text:00408D9C                 jz      short loc_408DA5
.text:00408D9E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00408DA3                 jz      short loc_408DC0
.text:00408DA5
.text:00408DA5 loc_408DA5:                             ; CODE XREF: sub_408BA0+190↑j
.text:00408DA5                                         ; sub_408BA0+1FC↑j
.text:00408DA5                 call    sub_407F00
.text:00408DAA                 mov     edi, eax
.text:00408DAC                 call    _errno
.text:00408DB1                 mov     [eax], edi
.text:00408DB3                 xor     eax, eax
.text:00408DB5
.text:00408DB5 loc_408DB5:                             ; CODE XREF: sub_408BA0+25A↓j
.text:00408DB5                                         ; sub_408BA0+297↓j
.text:00408DB5                 add     esp, 8Ch
.text:00408DBB                 pop     ebx
.text:00408DBC                 pop     esi
.text:00408DBD                 pop     edi
.text:00408DBE                 pop     ebp
.text:00408DBF                 retn
.text:00408DC0 ; ---------------------------------------------------------------------------
.text:00408DC0
.text:00408DC0 loc_408DC0:                             ; CODE XREF: sub_408BA0+203↑j
.text:00408DC0                 mov     edx, [esp+9Ch+var_48]
.text:00408DC4                 mov     eax, 1
.text:00408DC9                 mov     ebx, [esp+9Ch+arg_4]
.text:00408DD0                 mov     ebp, [esp+9Ch+arg_8]
.text:00408DD7                 mov     ecx, [esp+9Ch+arg_C]
.text:00408DDE                 mov     [ebx], edx
.text:00408DE0                 mov     edi, [esp+9Ch+var_44]
.text:00408DE4                 mov     ebx, [esp+9Ch+arg_10]
.text:00408DEB                 mov     [ebp+0], edi
.text:00408DEE                 mov     esi, [esp+9Ch+var_40]
.text:00408DF2                 mov     [ecx], esi
.text:00408DF4                 mov     edx, [esp+9Ch+var_3C]
.text:00408DF8                 mov     [ebx], edx
.text:00408DFA                 jmp     short loc_408DB5
.text:00408DFA ; ---------------------------------------------------------------------------
.text:00408DFC                 align 10h
.text:00408E00
.text:00408E00 loc_408E00:                             ; CODE XREF: sub_408BA0+132↑j
.text:00408E00                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00408E03                 mov     eax, [esp+9Ch+arg_C]
.text:00408E0A                 mov     ecx, [esp+9Ch+arg_10]
.text:00408E11                 mov     edx, [esp+9Ch+arg_8]
.text:00408E18                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:00408E1C                 mov     eax, [esp+9Ch+arg_4]
.text:00408E23                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00408E27                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:00408E2B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:00408E2F                 call    GetDiskFreeSpaceA
.text:00408E34                 sub     esp, 14h
.text:00408E37                 jmp     loc_408DB5
.text:00408E37 sub_408BA0      endp ; sp-analysis failed
.text:00408E37
.text:00408E37 ; ---------------------------------------------------------------------------
.text:00408E3C                 align 10h
.text:00408E40 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040905F↓o
.text:00408E4C aLu             db '%lu',0              ; DATA XREF: .text:0040906F↓o
.text:00408E50 asc_408E50      db ' ',0                ; DATA XREF: .text:loc_409158↓o
.text:00408E52                 align 10h
.text:00408E60 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00408E60                                         ; DATA XREF: .text:0040918F↓o
.text:00408E80 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40919D↓o
.text:00408E8C aServer         db ' Server',0          ; DATA XREF: .text:004091C6↓o
.text:00408E8C                                         ; .text:loc_40933E↓o
.text:00408E94 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_4091D8↓o
.text:00408EA5 aDatacenterServ db ' Datacenter Server',0
.text:00408EA5                                         ; DATA XREF: .text:loc_4091E2↓o
.text:00408EB8 aStandardEditio db ' Standard Edition',0
.text:00408EB8                                         ; DATA XREF: .text:0040920A↓o
.text:00408ECA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_409214↓o
.text:00408ED7 aEnterpriseEdit db ' Enterprise Edition',0
.text:00408ED7                                         ; DATA XREF: .text:loc_40921E↓o
.text:00408EEB aDatacenterEdit db ' Datacenter Edition',0
.text:00408EEB                                         ; DATA XREF: .text:loc_409228↓o
.text:00408EFF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040923B↓o
.text:00408F0D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_409245↓o
.text:00408F0D                                         ; .text:loc_409350↓o
.text:00408F1B                 align 10h
.text:00408F20 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00408F20                                         ; DATA XREF: .text:00409272↓o
.text:00408F50 aProducttype    db 'ProductType',0      ; DATA XREF: .text:004092B9↓o
.text:00408F5C aWinnt          db 'WINNT',0            ; DATA XREF: .text:004092F4↓o
.text:00408F62 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040930B↓o
.text:00408F6B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00409322↓o
.text:00408F74                 align 10h
.text:00408F80 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00408F80                                         ; DATA XREF: .text:00409497↓o
.text:00408FA3                 align 20h
.text:00408FC0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00408FC0                                         ; DATA XREF: .text:004094F6↓o
.text:00408FE6 ; ---------------------------------------------------------------------------
.text:00408FE6
.text:00408FE6 loc_408FE6:                             ; DATA XREF: .text:loc_409561↓o
.text:00408FE6                 and     [ebx+45h], dl
.text:00408FE9                 add     [eax], ah
.text:00408FEB                 push    ebx
.text:00408FEC                 push    eax
.text:00408FED                 xor     [eax], eax
.text:00408FEF
.text:00408FEF loc_408FEF:                             ; DATA XREF: .text:loc_4095DB↓o
.text:00408FEF                 and     [edi+53h], cl
.text:00408FF2                 push    edx
.text:00408FF3                 xor     al, [eax]
.text:00408FF5                 lea     esi, [esi+0]
.text:00408FF9                 lea     edi, [edi+0]
.text:00409000                 push    edi
.text:00409001                 push    esi
.text:00409002                 push    ebx
.text:00409003                 sub     esp, 130h
.text:00409009                 mov     ebx, [esp+140h]
.text:00409010                 call    sub_409710
.text:00409015                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040901A                 cmp     eax, 1
.text:0040901D                 jz      loc_4094C0
.text:00409023                 cmp     eax, 1
.text:00409026                 jb      loc_409496
.text:0040902C                 cmp     eax, 2
.text:0040902F                 jz      loc_4090E0
.text:00409035                 cmp     eax, 3
.text:00409038                 jz      short loc_40909F
.text:0040903A                 lea     esi, [esi+0]
.text:00409040
.text:00409040 loc_409040:                             ; CODE XREF: .text:004090D5↓j
.text:00409040                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409046                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040904C
.text:0040904C loc_40904C:                             ; CODE XREF: .text:004094DF↓j
.text:0040904C                 mov     [esp+10h], edx
.text:00409050                 mov     ebx, [esp+144h]
.text:00409057                 mov     [esp+0Ch], ecx
.text:0040905B                 mov     [esp+8], eax
.text:0040905F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00409067                 mov     [esp], ebx
.text:0040906A                 call    sprintf
.text:0040906F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00409077                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040907D                 mov     ecx, [esp+148h]
.text:00409084                 mov     [esp+8], edi
.text:00409088                 mov     [esp], ecx
.text:0040908B                 call    sprintf
.text:00409090                 mov     eax, 1
.text:00409095
.text:00409095 loc_409095:                             ; CODE XREF: .text:0040928F↓j
.text:00409095                                         ; .text:004092DC↓j
.text:00409095                 add     esp, 130h
.text:0040909B                 pop     ebx
.text:0040909C                 pop     esi
.text:0040909D                 pop     edi
.text:0040909E                 retn
.text:0040909F ; ---------------------------------------------------------------------------
.text:0040909F
.text:0040909F loc_40909F:                             ; CODE XREF: .text:00409038↑j
.text:0040909F                 mov     dword ptr [ebx], 7263694Dh
.text:004090A5                 mov     dword ptr [ebx+4], 666F736Fh
.text:004090AC                 mov     dword ptr [ebx+8], 69572074h
.text:004090B3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004090BA                 mov     dword ptr [ebx+10h], 45432073h
.text:004090C1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:004090C7                 mov     esi, esi
.text:004090C9                 lea     edi, [edi+0]
.text:004090D0
.text:004090D0 loc_4090D0:                             ; CODE XREF: .text:00409178↓j
.text:004090D0                                         ; .text:004094B9↓j ...
.text:004090D0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004090D5                 jmp     loc_409040
.text:004090D5 ; ---------------------------------------------------------------------------
.text:004090DA                 align 10h
.text:004090E0
.text:004090E0 loc_4090E0:                             ; CODE XREF: .text:0040902F↑j
.text:004090E0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:004090E6                 cmp     edx, 3
.text:004090E9                 mov     eax, edx
.text:004090EB                 jz      loc_409455
.text:004090F1
.text:004090F1 loc_4090F1:                             ; CODE XREF: .text:0040945C↓j
.text:004090F1                 cmp     eax, 4
.text:004090F4                 jz      loc_409415
.text:004090FA
.text:004090FA loc_4090FA:                             ; CODE XREF: .text:0040941D↓j
.text:004090FA                 cmp     eax, 4
.text:004090FD                 ja      loc_409362
.text:00409103                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409109                 test    ecx, ecx
.text:0040910B                 jnz     loc_409362
.text:00409111                 mov     dword ptr [ebx], 7263694Dh
.text:00409117                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040911E                 mov     dword ptr [ebx+8], 69572074h
.text:00409125                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040912C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409133
.text:00409133 loc_409133:                             ; CODE XREF: .text:004093D5↓j
.text:00409133                 mov     byte ptr [ebx+14h], 0
.text:00409137
.text:00409137 loc_409137:                             ; CODE XREF: .text:00409365↓j
.text:00409137                                         ; .text:0040937C↓j ...
.text:00409137                 mov     esi, dword_40E070
.text:0040913D                 test    esi, esi
.text:0040913F                 jz      loc_409252
.text:00409145                 movzx   eax, ds:byte_40F49A
.text:0040914C                 cmp     al, 1
.text:0040914E                 jz      loc_409232
.text:00409154                 cmp     al, 3
.text:00409156                 jz      short loc_40917D
.text:00409158
.text:00409158 loc_409158:                             ; CODE XREF: .text:0040919B↓j
.text:00409158                                         ; .text:004091D6↓j ...
.text:00409158                 mov     dword ptr [esp+4], offset asc_408E50 ; " "
.text:00409160                 mov     [esp], ebx
.text:00409163                 call    strcat
.text:00409168                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00409170                 mov     [esp], ebx
.text:00409173                 call    strcat
.text:00409178                 jmp     loc_4090D0
.text:0040917D ; ---------------------------------------------------------------------------
.text:0040917D
.text:0040917D loc_40917D:                             ; CODE XREF: .text:00409156↑j
.text:0040917D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00409184                 jz      short loc_4091A6
.text:00409186
.text:00409186 loc_409186:                             ; CODE XREF: .text:004091B2↓j
.text:00409186                 test    byte ptr ds:word_40F498, 2
.text:0040918D                 jz      short loc_40919D
.text:0040918F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00409196
.text:00409196 loc_409196:                             ; CODE XREF: .text:004091A4↓j
.text:00409196                 call    printf
.text:0040919B                 jmp     short loc_409158
.text:0040919D ; ---------------------------------------------------------------------------
.text:0040919D
.text:0040919D loc_40919D:                             ; CODE XREF: .text:0040918D↑j
.text:0040919D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:004091A4                 jmp     short loc_409196
.text:004091A6 ; ---------------------------------------------------------------------------
.text:004091A6
.text:004091A6 loc_4091A6:                             ; CODE XREF: .text:00409184↑j
.text:004091A6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004091AB                 cmp     eax, 2
.text:004091AE                 jz      short loc_4091F0
.text:004091B0                 test    eax, eax
.text:004091B2                 jnz     short loc_409186
.text:004091B4                 cmp     byte ptr ds:word_40F498, 0
.text:004091BB                 js      short loc_4091E2
.text:004091BD                 test    byte ptr ds:word_40F498, 2
.text:004091C4                 jnz     short loc_4091D8
.text:004091C6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004091CE
.text:004091CE loc_4091CE:                             ; CODE XREF: .text:004091E0↓j
.text:004091CE                                         ; .text:004091EA↓j ...
.text:004091CE                 mov     [esp], ebx
.text:004091D1                 call    strcat
.text:004091D6                 jmp     short loc_409158
.text:004091D8 ; ---------------------------------------------------------------------------
.text:004091D8
.text:004091D8 loc_4091D8:                             ; CODE XREF: .text:004091C4↑j
.text:004091D8                                         ; .text:00409339↓j
.text:004091D8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:004091E0                 jmp     short loc_4091CE
.text:004091E2 ; ---------------------------------------------------------------------------
.text:004091E2
.text:004091E2 loc_4091E2:                             ; CODE XREF: .text:004091BB↑j
.text:004091E2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:004091EA                 jmp     short loc_4091CE
.text:004091EA ; ---------------------------------------------------------------------------
.text:004091EC                 align 10h
.text:004091F0
.text:004091F0 loc_4091F0:                             ; CODE XREF: .text:004091AE↑j
.text:004091F0                 cmp     byte ptr ds:word_40F498, 0
.text:004091F7                 js      short loc_409228
.text:004091F9                 movzx   eax, ds:word_40F498
.text:00409200                 test    al, 2
.text:00409202                 jnz     short loc_40921E
.text:00409204                 cmp     ax, 400h
.text:00409208                 jz      short loc_409214
.text:0040920A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00409212                 jmp     short loc_4091CE
.text:00409214 ; ---------------------------------------------------------------------------
.text:00409214
.text:00409214 loc_409214:                             ; CODE XREF: .text:00409208↑j
.text:00409214                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040921C                 jmp     short loc_4091CE
.text:0040921E ; ---------------------------------------------------------------------------
.text:0040921E
.text:0040921E loc_40921E:                             ; CODE XREF: .text:00409202↑j
.text:0040921E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00409226                 jmp     short loc_4091CE
.text:00409228 ; ---------------------------------------------------------------------------
.text:00409228
.text:00409228 loc_409228:                             ; CODE XREF: .text:004091F7↑j
.text:00409228                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00409230                 jmp     short loc_4091CE
.text:00409232 ; ---------------------------------------------------------------------------
.text:00409232
.text:00409232 loc_409232:                             ; CODE XREF: .text:0040914E↑j
.text:00409232                 test    byte ptr ds:word_40F498+1, 2
.text:00409239                 jz      short loc_409245
.text:0040923B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00409243                 jmp     short loc_4091CE
.text:00409245 ; ---------------------------------------------------------------------------
.text:00409245
.text:00409245 loc_409245:                             ; CODE XREF: .text:00409239↑j
.text:00409245                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040924D                 jmp     loc_4091CE
.text:00409252 ; ---------------------------------------------------------------------------
.text:00409252
.text:00409252 loc_409252:                             ; CODE XREF: .text:0040913F↑j
.text:00409252                 mov     dword ptr [esp+28h], 0FFh
.text:0040925A                 lea     edx, [esp+2Ch]
.text:0040925E                 mov     [esp+10h], edx
.text:00409262                 mov     dword ptr [esp+0Ch], 1
.text:0040926A                 mov     dword ptr [esp+8], 0
.text:00409272                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040927A                 mov     dword ptr [esp], 80000002h
.text:00409281                 call    RegOpenKeyExA
.text:00409286                 mov     edi, eax
.text:00409288                 sub     esp, 14h
.text:0040928B                 xor     eax, eax
.text:0040928D                 test    edi, edi
.text:0040928F                 jnz     loc_409095
.text:00409295                 mov     dword ptr [esp+0Ch], 0
.text:0040929D                 mov     edi, [esp+2Ch]
.text:004092A1                 lea     esi, [esp+28h]
.text:004092A5                 mov     [esp+14h], esi
.text:004092A9                 lea     esi, [esp+30h]
.text:004092AD                 mov     [esp+10h], esi
.text:004092B1                 mov     dword ptr [esp+8], 0
.text:004092B9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:004092C1                 mov     [esp], edi
.text:004092C4                 call    RegQueryValueExA
.text:004092C9                 sub     esp, 18h
.text:004092CC                 test    eax, eax
.text:004092CE                 jnz     short loc_4092DA
.text:004092D0                 cmp     dword ptr [esp+28h], 0FFh
.text:004092D8                 jbe     short loc_4092E1
.text:004092DA
.text:004092DA loc_4092DA:                             ; CODE XREF: .text:004092CE↑j
.text:004092DA                 xor     eax, eax
.text:004092DC                 jmp     loc_409095
.text:004092E1 ; ---------------------------------------------------------------------------
.text:004092E1
.text:004092E1 loc_4092E1:                             ; CODE XREF: .text:004092D8↑j
.text:004092E1                 mov     edx, [esp+2Ch]
.text:004092E5                 mov     [esp], edx
.text:004092E8                 call    RegCloseKey
.text:004092ED                 sub     esp, 4
.text:004092F0                 mov     [esp+4], esi
.text:004092F4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:004092FB                 call    lstrcmpiA
.text:00409300                 sub     esp, 8
.text:00409303                 test    eax, eax
.text:00409305                 jz      short loc_409350
.text:00409307
.text:00409307 loc_409307:                             ; CODE XREF: .text:00409360↓j
.text:00409307                 mov     [esp+4], esi
.text:0040930B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00409312                 call    lstrcmpiA
.text:00409317                 sub     esp, 8
.text:0040931A                 test    eax, eax
.text:0040931C                 jz      short loc_40933E
.text:0040931E
.text:0040931E loc_40931E:                             ; CODE XREF: .text:0040934E↓j
.text:0040931E                 mov     [esp+4], esi
.text:00409322                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00409329                 call    lstrcmpiA
.text:0040932E                 sub     esp, 8
.text:00409331                 test    eax, eax
.text:00409333                 jnz     loc_409158
.text:00409339                 jmp     loc_4091D8
.text:0040933E ; ---------------------------------------------------------------------------
.text:0040933E
.text:0040933E loc_40933E:                             ; CODE XREF: .text:0040931C↑j
.text:0040933E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409346                 mov     [esp], ebx
.text:00409349                 call    strcat
.text:0040934E                 jmp     short loc_40931E
.text:00409350 ; ---------------------------------------------------------------------------
.text:00409350
.text:00409350 loc_409350:                             ; CODE XREF: .text:00409305↑j
.text:00409350                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409358                 mov     [esp], ebx
.text:0040935B                 call    strcat
.text:00409360                 jmp     short loc_409307
.text:00409362 ; ---------------------------------------------------------------------------
.text:00409362
.text:00409362 loc_409362:                             ; CODE XREF: .text:004090FD↑j
.text:00409362                                         ; .text:0040910B↑j
.text:00409362                 cmp     eax, 5
.text:00409365                 jnz     loc_409137
.text:0040936B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409370                 cmp     eax, 2
.text:00409373                 jz      short loc_4093DA
.text:00409375                 cmp     eax, 1
.text:00409378                 jz      short loc_4093B3
.text:0040937A                 test    eax, eax
.text:0040937C                 jnz     loc_409137
.text:00409382                 mov     dword ptr [ebx], 7263694Dh
.text:00409388                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040938F                 mov     dword ptr [ebx+8], 69572074h
.text:00409396                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040939D                 mov     dword ptr [ebx+10h], 30322073h
.text:004093A4                 mov     word ptr [ebx+14h], 3030h
.text:004093AA                 mov     byte ptr [ebx+16h], 0
.text:004093AE                 jmp     loc_409137
.text:004093B3 ; ---------------------------------------------------------------------------
.text:004093B3
.text:004093B3 loc_4093B3:                             ; CODE XREF: .text:00409378↑j
.text:004093B3                 mov     dword ptr [ebx], 7263694Dh
.text:004093B9                 mov     dword ptr [ebx+4], 666F736Fh
.text:004093C0                 mov     dword ptr [ebx+8], 69572074h
.text:004093C7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004093CE                 mov     dword ptr [ebx+10h], 50582073h
.text:004093D5                 jmp     loc_409133
.text:004093DA ; ---------------------------------------------------------------------------
.text:004093DA
.text:004093DA loc_4093DA:                             ; CODE XREF: .text:00409373↑j
.text:004093DA                 mov     dword ptr [ebx], 7263694Dh
.text:004093E0                 mov     dword ptr [ebx+4], 666F736Fh
.text:004093E7                 mov     dword ptr [ebx+8], 69572074h
.text:004093EE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004093F5                 mov     dword ptr [ebx+10h], 65532073h
.text:004093FC                 mov     dword ptr [ebx+14h], 72657672h
.text:00409403                 mov     dword ptr [ebx+18h], 30303220h
.text:0040940A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00409410                 jmp     loc_409137
.text:00409415 ; ---------------------------------------------------------------------------
.text:00409415
.text:00409415 loc_409415:                             ; CODE XREF: .text:004090F4↑j
.text:00409415                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040941B                 test    edx, edx
.text:0040941D                 jnz     loc_4090FA
.text:00409423                 mov     dword ptr [ebx], 7263694Dh
.text:00409429                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409430                 mov     dword ptr [ebx+8], 69572074h
.text:00409437                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040943E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409445                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040944C                 mov     byte ptr [ebx+18h], 0
.text:00409450                 jmp     loc_409137
.text:00409455 ; ---------------------------------------------------------------------------
.text:00409455
.text:00409455 loc_409455:                             ; CODE XREF: .text:004090EB↑j
.text:00409455                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040945C                 jnz     loc_4090F1
.text:00409462                 mov     dword ptr [ebx], 7263694Dh
.text:00409468                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040946F                 mov     dword ptr [ebx+8], 69572074h
.text:00409476                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040947D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409484                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040948B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00409491                 jmp     loc_409137
.text:00409496 ; ---------------------------------------------------------------------------
.text:00409496
.text:00409496 loc_409496:                             ; CODE XREF: .text:00409026↑j
.text:00409496                 cld
.text:00409497                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040949C                 mov     ecx, 8
.text:004094A1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:004094A8                 mov     edi, ebx
.text:004094AA                 rep movsd
.text:004094AC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:004094B3                 mov     [edi+2], dl
.text:004094B6                 mov     [edi], si
.text:004094B9                 jmp     loc_4090D0
.text:004094B9 ; ---------------------------------------------------------------------------
.text:004094BE                 align 10h
.text:004094C0
.text:004094C0 loc_4094C0:                             ; CODE XREF: .text:0040901D↑j
.text:004094C0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004094C6                 cmp     ecx, 4
.text:004094C9                 jz      loc_409580
.text:004094CF
.text:004094CF loc_4094CF:                             ; CODE XREF: .text:004095D6↓j
.text:004094CF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004094D5
.text:004094D5 loc_4094D5:                             ; CODE XREF: .text:00409588↓j
.text:004094D5                 cmp     ecx, 4
.text:004094D8                 jz      short loc_4094E4
.text:004094DA
.text:004094DA loc_4094DA:                             ; CODE XREF: .text:004094EC↓j
.text:004094DA                                         ; .text:004094F1↓j
.text:004094DA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004094DF                 jmp     loc_40904C
.text:004094E4 ; ---------------------------------------------------------------------------
.text:004094E4
.text:004094E4 loc_4094E4:                             ; CODE XREF: .text:004094D8↑j
.text:004094E4                 cmp     edx, 0Ah
.text:004094E7                 jz      short loc_409511
.text:004094E9
.text:004094E9 loc_4094E9:                             ; CODE XREF: .text:0040955F↓j
.text:004094E9                 cmp     ecx, 4
.text:004094EC                 jnz     short loc_4094DA
.text:004094EE                 cmp     edx, 5Ah ; 'Z'
.text:004094F1                 jnz     short loc_4094DA
.text:004094F3                 cld
.text:004094F4                 mov     edi, ebx
.text:004094F6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:004094FB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00409502                 mov     ecx, 9
.text:00409507                 rep movsd
.text:00409509                 mov     [edi], bx
.text:0040950C                 jmp     loc_4090D0
.text:00409511 ; ---------------------------------------------------------------------------
.text:00409511
.text:00409511 loc_409511:                             ; CODE XREF: .text:004094E7↑j
.text:00409511                 mov     dword ptr [ebx], 7263694Dh
.text:00409517                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040951E                 mov     dword ptr [ebx+8], 69572074h
.text:00409525                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040952C                 mov     dword ptr [ebx+10h], 38392073h
.text:00409533                 mov     byte ptr [ebx+14h], 0
.text:00409537                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040953D                 lea     edi, [edx-7CFh]
.text:00409543                 cmp     edi, 0B7h ; '·'
.text:00409549                 jbe     short loc_409573
.text:0040954B                 cmp     edx, 886h
.text:00409551                 ja      short loc_409561
.text:00409553
.text:00409553 loc_409553:                             ; CODE XREF: .text:00409571↓j
.text:00409553                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409559                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040955F                 jmp     short loc_4094E9
.text:00409561 ; ---------------------------------------------------------------------------
.text:00409561
.text:00409561 loc_409561:                             ; CODE XREF: .text:00409551↑j
.text:00409561                 mov     dword ptr [esp+4], offset loc_408FE6
.text:00409569
.text:00409569 loc_409569:                             ; CODE XREF: .text:0040957B↓j
.text:00409569                 mov     [esp], ebx
.text:0040956C                 call    strcat
.text:00409571                 jmp     short loc_409553
.text:00409573 ; ---------------------------------------------------------------------------
.text:00409573
.text:00409573 loc_409573:                             ; CODE XREF: .text:00409549↑j
.text:00409573                 mov     dword ptr [esp+4], 408FEAh
.text:0040957B                 jmp     short loc_409569
.text:0040957B ; ---------------------------------------------------------------------------
.text:0040957D                 align 10h
.text:00409580
.text:00409580 loc_409580:                             ; CODE XREF: .text:004094C9↑j
.text:00409580                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409586                 test    edx, edx
.text:00409588                 jnz     loc_4094D5
.text:0040958E                 mov     dword ptr [ebx], 7263694Dh
.text:00409594                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040959B                 mov     dword ptr [ebx+8], 69572074h
.text:004095A2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004095A9                 mov     dword ptr [ebx+10h], 35392073h
.text:004095B0                 mov     byte ptr [ebx+14h], 0
.text:004095B4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004095BA                 lea     ecx, [edx-3B7h]
.text:004095C0                 cmp     ecx, 81h
.text:004095C6                 jbe     short loc_4095ED
.text:004095C8                 cmp     edx, 438h
.text:004095CE                 ja      short loc_4095DB
.text:004095D0
.text:004095D0 loc_4095D0:                             ; CODE XREF: .text:004095EB↓j
.text:004095D0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004095D6                 jmp     loc_4094CF
.text:004095DB ; ---------------------------------------------------------------------------
.text:004095DB
.text:004095DB loc_4095DB:                             ; CODE XREF: .text:004095CE↑j
.text:004095DB                 mov     dword ptr [esp+4], offset loc_408FEF
.text:004095E3
.text:004095E3 loc_4095E3:                             ; CODE XREF: .text:004095F5↓j
.text:004095E3                 mov     [esp], ebx
.text:004095E6                 call    strcat
.text:004095EB                 jmp     short loc_4095D0
.text:004095ED ; ---------------------------------------------------------------------------
.text:004095ED
.text:004095ED loc_4095ED:                             ; CODE XREF: .text:004095C6↑j
.text:004095ED                 mov     dword ptr [esp+4], 408FEAh
.text:004095F5                 jmp     short loc_4095E3
.text:004095F5 ; ---------------------------------------------------------------------------
.text:004095F7                 align 10h
.text:00409600
.text:00409600 ; =============== S U B R O U T I N E =======================================
.text:00409600
.text:00409600
.text:00409600 sub_409600      proc near               ; CODE XREF: .text:0040871E↑p
.text:00409600                                         ; sub_408BA0+12A↑p
.text:00409600                 sub     esp, 0Ch
.text:00409603                 call    sub_409710
.text:00409608                 mov     eax, ds:dword_40F3F0
.text:0040960D                 add     esp, 0Ch
.text:00409610                 retn
.text:00409610 sub_409600      endp
.text:00409610
.text:00409611 ; ---------------------------------------------------------------------------
.text:00409611                 jmp     short loc_409620
.text:00409611 ; ---------------------------------------------------------------------------
.text:00409613                 align 10h
.text:00409620
.text:00409620 loc_409620:                             ; CODE XREF: .text:00409611↑j
.text:00409620                 sub     esp, 0Ch
.text:00409623                 call    sub_409710
.text:00409628                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040962D                 add     esp, 0Ch
.text:00409630                 retn
.text:00409631 ; ---------------------------------------------------------------------------
.text:00409631                 jmp     short loc_409640
.text:00409631 ; ---------------------------------------------------------------------------
.text:00409633                 align 10h
.text:00409640
.text:00409640 loc_409640:                             ; CODE XREF: .text:00409631↑j
.text:00409640                 sub     esp, 0Ch
.text:00409643                 call    sub_409710
.text:00409648                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040964D                 add     esp, 0Ch
.text:00409650                 retn
.text:00409651 ; ---------------------------------------------------------------------------
.text:00409651                 jmp     short loc_409660
.text:00409651 ; ---------------------------------------------------------------------------
.text:00409653                 align 10h
.text:00409660
.text:00409660 loc_409660:                             ; CODE XREF: .text:00409651↑j
.text:00409660                 sub     esp, 0Ch
.text:00409663                 call    sub_409710
.text:00409668                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040966D                 add     esp, 0Ch
.text:00409670                 retn
.text:00409671 ; ---------------------------------------------------------------------------
.text:00409671                 jmp     short loc_409680
.text:00409671 ; ---------------------------------------------------------------------------
.text:00409673                 align 10h
.text:00409680
.text:00409680 loc_409680:                             ; CODE XREF: .text:00409671↑j
.text:00409680                 sub     esp, 0Ch
.text:00409683                 call    GetVersion
.text:00409688                 shr     eax, 10h
.text:0040968B                 add     esp, 0Ch
.text:0040968E                 retn
.text:0040968E ; ---------------------------------------------------------------------------
.text:0040968F                 align 10h
.text:00409690                 sub     esp, 0Ch
.text:00409693                 call    sub_409710
.text:00409698                 xor     eax, eax
.text:0040969A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:004096A1                 setz    al
.text:004096A4                 add     esp, 0Ch
.text:004096A7                 retn
.text:004096A7 ; ---------------------------------------------------------------------------
.text:004096A8                 align 10h
.text:004096B0
.text:004096B0 ; =============== S U B R O U T I N E =======================================
.text:004096B0
.text:004096B0
.text:004096B0 sub_4096B0      proc near               ; CODE XREF: .text:loc_407BB0↑p
.text:004096B0                                         ; .text:loc_408704↑p ...
.text:004096B0                 sub     esp, 0Ch
.text:004096B3                 call    sub_409710
.text:004096B8                 xor     eax, eax
.text:004096BA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:004096C1                 setz    al
.text:004096C4                 add     esp, 0Ch
.text:004096C7                 retn
.text:004096C7 sub_4096B0      endp
.text:004096C7
.text:004096C7 ; ---------------------------------------------------------------------------
.text:004096C8                 align 10h
.text:004096D0                 sub     esp, 0Ch
.text:004096D3                 call    sub_409710
.text:004096D8                 xor     eax, eax
.text:004096DA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:004096E1                 setz    al
.text:004096E4                 add     esp, 0Ch
.text:004096E7                 retn
.text:004096E7 ; ---------------------------------------------------------------------------
.text:004096E8                 align 10h
.text:004096F0                 sub     esp, 0Ch
.text:004096F3                 call    sub_409710
.text:004096F8                 xor     eax, eax
.text:004096FA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00409701                 setz    al
.text:00409704                 add     esp, 0Ch
.text:00409707                 retn
.text:00409707 ; ---------------------------------------------------------------------------
.text:00409708                 align 10h
.text:00409710
.text:00409710 ; =============== S U B R O U T I N E =======================================
.text:00409710
.text:00409710
.text:00409710 sub_409710      proc near               ; CODE XREF: .text:00409010↑p
.text:00409710                                         ; sub_409600+3↑p ...
.text:00409710
.text:00409710 lpVersionInformation= dword ptr -0BCh
.text:00409710 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00409710
.text:00409710                 sub     esp, 0BCh
.text:00409716                 mov     edx, ds:dword_40F4A0
.text:0040971C                 test    edx, edx
.text:0040971E                 jz      short loc_409730
.text:00409720
.text:00409720 loc_409720:                             ; CODE XREF: sub_409710+7B↓j
.text:00409720                 mov     edx, 1
.text:00409725
.text:00409725 loc_409725:                             ; CODE XREF: sub_409710+217↓j
.text:00409725                 mov     eax, edx
.text:00409727                 add     esp, 0BCh
.text:0040972D                 retn
.text:0040972D ; ---------------------------------------------------------------------------
.text:0040972E                 align 10h
.text:00409730
.text:00409730 loc_409730:                             ; CODE XREF: sub_409710+E↑j
.text:00409730                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00409737                 mov     edx, 9Ch ; 'œ'
.text:0040973C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00409742                 call    GetVersionExA
.text:00409747                 sub     esp, 4
.text:0040974A                 test    eax, eax
.text:0040974C                 jz      loc_409904
.text:00409752
.text:00409752 loc_409752:                             ; CODE XREF: sub_409710+245↓j
.text:00409752                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00409759                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040975E                 cmp     eax, 1
.text:00409761                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00409767                 jz      loc_409850
.text:0040976D                 cmp     eax, 1
.text:00409770                 jb      loc_409840
.text:00409776                 cmp     eax, 2
.text:00409779                 jz      short loc_40979A
.text:0040977B                 cmp     eax, 3
.text:0040977E                 jz      short loc_40978D
.text:00409780
.text:00409780 loc_409780:                             ; CODE XREF: sub_409710+88↓j
.text:00409780                                         ; sub_409710+C0↓j ...
.text:00409780                 mov     edx, 1
.text:00409785                 mov     ds:dword_40F4A0, edx
.text:0040978B                 jmp     short loc_409720
.text:0040978D ; ---------------------------------------------------------------------------
.text:0040978D
.text:0040978D loc_40978D:                             ; CODE XREF: sub_409710+6E↑j
.text:0040978D                 mov     ecx, 17h
.text:00409792
.text:00409792 loc_409792:                             ; CODE XREF: sub_409710+1A7↓j
.text:00409792                 mov     ds:dword_40F3F0, ecx
.text:00409798                 jmp     short loc_409780
.text:0040979A ; ---------------------------------------------------------------------------
.text:0040979A
.text:0040979A loc_40979A:                             ; CODE XREF: sub_409710+69↑j
.text:0040979A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040979F                 cmp     eax, 3
.text:004097A2                 jz      short loc_40981B
.text:004097A4                 cmp     eax, 4
.text:004097A7                 jz      short loc_40980A
.text:004097A9
.text:004097A9 loc_4097A9:                             ; CODE XREF: sub_409710+102↓j
.text:004097A9                 cmp     eax, 4
.text:004097AC                 ja      short loc_4097D2
.text:004097AE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004097B4                 test    ecx, ecx
.text:004097B6                 jnz     short loc_4097D2
.text:004097B8                 mov     edx, 1Eh
.text:004097BD
.text:004097BD loc_4097BD:                             ; CODE XREF: sub_409710+DF↓j
.text:004097BD                 mov     ds:dword_40F3F0, edx
.text:004097C3
.text:004097C3 loc_4097C3:                             ; CODE XREF: sub_409710+C5↓j
.text:004097C3                                         ; sub_409710+D8↓j ...
.text:004097C3                 movzx   ecx, ds:word_40F494
.text:004097CA                 add     ds:dword_40F3F0, ecx
.text:004097D0                 jmp     short loc_409780
.text:004097D2 ; ---------------------------------------------------------------------------
.text:004097D2
.text:004097D2 loc_4097D2:                             ; CODE XREF: sub_409710+9C↑j
.text:004097D2                                         ; sub_409710+A6↑j
.text:004097D2                 cmp     eax, 5
.text:004097D5                 jnz     short loc_4097C3
.text:004097D7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004097DC                 cmp     eax, 2
.text:004097DF                 jz      short loc_4097FE
.text:004097E1                 cmp     eax, 1
.text:004097E4                 jz      short loc_4097F1
.text:004097E6                 test    eax, eax
.text:004097E8                 jnz     short loc_4097C3
.text:004097EA                 mov     edx, 32h ; '2'
.text:004097EF                 jmp     short loc_4097BD
.text:004097F1 ; ---------------------------------------------------------------------------
.text:004097F1
.text:004097F1 loc_4097F1:                             ; CODE XREF: sub_409710+D4↑j
.text:004097F1                 mov     ecx, 3Ch ; '<'
.text:004097F6
.text:004097F6 loc_4097F6:                             ; CODE XREF: sub_409710+122↓j
.text:004097F6                 mov     ds:dword_40F3F0, ecx
.text:004097FC                 jmp     short loc_4097C3
.text:004097FE ; ---------------------------------------------------------------------------
.text:004097FE
.text:004097FE loc_4097FE:                             ; CODE XREF: sub_409710+CF↑j
.text:004097FE                 mov     eax, 46h ; 'F'
.text:00409803
.text:00409803 loc_409803:                             ; CODE XREF: sub_409710+109↓j
.text:00409803                                         ; sub_409710+129↓j
.text:00409803                 mov     ds:dword_40F3F0, eax
.text:00409808                 jmp     short loc_4097C3
.text:0040980A ; ---------------------------------------------------------------------------
.text:0040980A
.text:0040980A loc_40980A:                             ; CODE XREF: sub_409710+97↑j
.text:0040980A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409810                 test    ecx, ecx
.text:00409812                 jnz     short loc_4097A9
.text:00409814                 mov     eax, 28h ; '('
.text:00409819                 jmp     short loc_409803
.text:0040981B ; ---------------------------------------------------------------------------
.text:0040981B
.text:0040981B loc_40981B:                             ; CODE XREF: sub_409710+92↑j
.text:0040981B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409820                 cmp     eax, 33h ; '3'
.text:00409823                 jz      short loc_409834
.text:00409825                 cmp     eax, 5
.text:00409828                 setz    cl
.text:0040982B                 movzx   edx, cl
.text:0040982E                 lea     ecx, [edx+edx*4+1Eh]
.text:00409832                 jmp     short loc_4097F6
.text:00409834 ; ---------------------------------------------------------------------------
.text:00409834
.text:00409834 loc_409834:                             ; CODE XREF: sub_409710+113↑j
.text:00409834                 mov     eax, 24h ; '$'
.text:00409839                 jmp     short loc_409803
.text:00409839 ; ---------------------------------------------------------------------------
.text:0040983B                 align 10h
.text:00409840
.text:00409840 loc_409840:                             ; CODE XREF: sub_409710+60↑j
.text:00409840                 mov     edx, 2
.text:00409845                 mov     ds:dword_40F3F0, edx
.text:0040984B                 jmp     loc_409780
.text:00409850 ; ---------------------------------------------------------------------------
.text:00409850
.text:00409850 loc_409850:                             ; CODE XREF: sub_409710+57↑j
.text:00409850                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409856                 cmp     ecx, 4
.text:00409859                 jnz     loc_409780
.text:0040985F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409864                 test    eax, eax
.text:00409866                 jnz     short loc_40988A
.text:00409868                 mov     eax, 0Ah
.text:0040986D                 mov     ds:dword_40F3F0, eax
.text:00409872                 lea     eax, [edx-3B7h]
.text:00409878                 cmp     eax, 81h
.text:0040987D                 ja      short loc_4098F5
.text:0040987F                 mov     edx, 0Bh
.text:00409884
.text:00409884 loc_409884:                             ; CODE XREF: sub_409710+1F2↓j
.text:00409884                 mov     ds:dword_40F3F0, edx
.text:0040988A
.text:0040988A loc_40988A:                             ; CODE XREF: sub_409710+156↑j
.text:0040988A                                         ; sub_409710+1EB↓j
.text:0040988A                 cmp     ecx, 4
.text:0040988D                 jnz     loc_409780
.text:00409893                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040989A                 jz      short loc_4098BC
.text:0040989C
.text:0040989C loc_40989C:                             ; CODE XREF: sub_409710+1D4↓j
.text:0040989C                                         ; sub_409710+1DC↓j
.text:0040989C                 cmp     ecx, 4
.text:0040989F                 jnz     loc_409780
.text:004098A5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:004098AC                 jnz     loc_409780
.text:004098B2                 mov     ecx, 12h
.text:004098B7                 jmp     loc_409792
.text:004098BC ; ---------------------------------------------------------------------------
.text:004098BC
.text:004098BC loc_4098BC:                             ; CODE XREF: sub_409710+18A↑j
.text:004098BC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004098C2                 mov     eax, 0Eh
.text:004098C7                 mov     ds:dword_40F3F0, eax
.text:004098CC                 lea     eax, [edx-7CFh]
.text:004098D2                 cmp     eax, 0B7h ; '·'
.text:004098D7                 ja      short loc_4098E6
.text:004098D9                 mov     edx, 0Fh
.text:004098DE
.text:004098DE loc_4098DE:                             ; CODE XREF: sub_409710+1E3↓j
.text:004098DE                 mov     ds:dword_40F3F0, edx
.text:004098E4                 jmp     short loc_40989C
.text:004098E6 ; ---------------------------------------------------------------------------
.text:004098E6
.text:004098E6 loc_4098E6:                             ; CODE XREF: sub_409710+1C7↑j
.text:004098E6                 cmp     edx, 886h
.text:004098EC                 jbe     short loc_40989C
.text:004098EE                 mov     edx, 10h
.text:004098F3                 jmp     short loc_4098DE
.text:004098F5 ; ---------------------------------------------------------------------------
.text:004098F5
.text:004098F5 loc_4098F5:                             ; CODE XREF: sub_409710+16D↑j
.text:004098F5                 cmp     edx, 438h
.text:004098FB                 jbe     short loc_40988A
.text:004098FD                 mov     edx, 0Ch
.text:00409902                 jmp     short loc_409884
.text:00409904 ; ---------------------------------------------------------------------------
.text:00409904
.text:00409904 loc_409904:                             ; CODE XREF: sub_409710+3C↑j
.text:00409904                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040990C                 xor     edx, edx
.text:0040990E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00409912                 mov     dword_40E070, edx
.text:00409918                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040991B                 call    GetVersionExA
.text:00409920                 sub     esp, 4
.text:00409923                 xor     edx, edx
.text:00409925                 test    eax, eax
.text:00409927                 jz      loc_409725
.text:0040992D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00409931                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00409935                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040993B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040993F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00409945                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00409949                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040994F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00409955                 jmp     loc_409752
.text:00409955 sub_409710      endp
.text:00409955
.text:00409955 ; ---------------------------------------------------------------------------
.text:0040995A                 align 10h
.text:00409960 aNotset         db 'notset',0           ; DATA XREF: .data:off_40E080↓o
.text:00409960                                         ; .data:off_40E084↓o
.text:00409967 ; ---------------------------------------------------------------------------
.text:00409967
.text:00409967 loc_409967:                             ; DATA XREF: .text:loc_409A05↓o
.text:00409967                 jb      short loc_4099E0
.text:00409969                 add     [eax], ah
.text:0040996B                 or      [eax], eax
.text:0040996D
.text:0040996D loc_40996D:                             ; DATA XREF: .text:00409A58↓o
.text:0040996D                                         ; .text:00409ABE↓o ...
.text:0040996D                 add     [eax], ah
.text:0040996F                 and     eax, 64252064h
.text:00409974                 and     [eax], al
.text:00409976                 lea     esi, [esi+0]
.text:00409979                 lea     edi, [edi+0]
.text:00409980                 push    ebp
.text:00409981                 push    edi
.text:00409982                 push    esi
.text:00409983                 push    ebx
.text:00409984                 sub     esp, 14Ch
.text:0040998A                 mov     edx, off_40E080 ; "notset"
.text:00409990                 mov     edi, [esp+164h]
.text:00409997                 mov     ebp, [esp+168h]
.text:0040999E                 mov     [esp+4], edx
.text:004099A2                 mov     edx, off_40E084 ; "notset"
.text:004099A8                 mov     [esp], edx
.text:004099AB                 call    strcmp
.text:004099B0                 test    eax, eax
.text:004099B2                 jz      loc_409DA0
.text:004099B8
.text:004099B8 loc_4099B8:                             ; CODE XREF: .text:00409DEC↓j
.text:004099B8                 lea     ebx, [esp+20h]
.text:004099BC                 lea     esi, [esi+0]
.text:004099C0
.text:004099C0 loc_4099C0:                             ; CODE XREF: .text:004099F6↓j
.text:004099C0                 mov     [esp+4], ebx
.text:004099C4                 mov     ecx, off_40E084 ; "notset"
.text:004099CA                 mov     [esp], ecx
.text:004099CD                 call    loc_408C40
.text:004099D2                 test    eax, eax
.text:004099D4                 jns     short loc_409A05
.text:004099D6                 mov     eax, off_40E084 ; "notset"
.text:004099DB                 cmp     byte ptr [eax], 0
.text:004099DE                 jz      short loc_4099F8
.text:004099E0
.text:004099E0 loc_4099E0:                             ; CODE XREF: .text:loc_409967↑j
.text:004099E0                 mov     dword ptr [esp+4], 0
.text:004099E8                 mov     [esp], eax
.text:004099EB                 call    strchr
.text:004099F0                 inc     eax
.text:004099F1                 mov     off_40E084, eax ; "notset"
.text:004099F6                 jmp     short loc_4099C0
.text:004099F8 ; ---------------------------------------------------------------------------
.text:004099F8
.text:004099F8 loc_4099F8:                             ; CODE XREF: .text:004099DE↑j
.text:004099F8                 xor     eax, eax
.text:004099FA
.text:004099FA loc_4099FA:                             ; CODE XREF: .text:00409BBC↓j
.text:004099FA                 add     esp, 14Ch
.text:00409A00                 pop     ebx
.text:00409A01                 pop     esi
.text:00409A02                 pop     edi
.text:00409A03                 pop     ebp
.text:00409A04                 retn
.text:00409A05 ; ---------------------------------------------------------------------------
.text:00409A05
.text:00409A05 loc_409A05:                             ; CODE XREF: .text:004099D4↑j
.text:00409A05                 mov     dword ptr [edi+0Ch], offset loc_409967
.text:00409A0C                 lea     ecx, [esp+0D6h]
.text:00409A13                 lea     edx, [esp+6Ch]
.text:00409A17                 mov     [edi+4], ecx
.text:00409A1A                 lea     ebx, [esp+7Ch]
.text:00409A1E                 mov     [edi+8], edx
.text:00409A21                 mov     [edi], ebx
.text:00409A23                 mov     [esp], ebp
.text:00409A26                 mov     [esp+4], edi
.text:00409A2A                 call    ___addmntentstr
.text:00409A2F                 mov     [esp], ebp
.text:00409A32                 mov     dword ptr [esp+4], 40996Ah
.text:00409A3A                 call    strspn
.text:00409A3F                 mov     dword ptr [esp+4], 0
.text:00409A47                 mov     ebx, off_40E084 ; "notset"
.text:00409A4D                 lea     esi, [eax+ebp]
.text:00409A50                 mov     [esp+1Ch], esi
.text:00409A54                 lea     ebp, [esp+1Ch]
.text:00409A58                 mov     esi, offset loc_40996D
.text:00409A5D                 mov     [esp], ebx
.text:00409A60                 call    strchr
.text:00409A65                 mov     dword ptr [esp+4], 40996Ah
.text:00409A6D                 inc     eax
.text:00409A6E                 mov     off_40E084, eax ; "notset"
.text:00409A73                 mov     [esp], ebp
.text:00409A76                 call    sub_40A7C0
.text:00409A7B                 test    eax, eax
.text:00409A7D                 mov     ebx, eax
.text:00409A7F                 jz      short loc_409AA8
.text:00409A81                 mov     edx, eax
.text:00409A83                 mov     ecx, eax
.text:00409A85                 lea     esi, [esi+0]
.text:00409A89                 lea     edi, [edi+0]
.text:00409A90
.text:00409A90 loc_409A90:                             ; CODE XREF: .text:00409AA6↓j
.text:00409A90                 movzx   eax, byte ptr [edx]
.text:00409A93                 cmp     al, 5Ch ; '\'
.text:00409A95                 jz      loc_409D44
.text:00409A9B
.text:00409A9B loc_409A9B:                             ; CODE XREF: .text:00409D4C↓j
.text:00409A9B                                         ; .text:00409D5A↓j ...
.text:00409A9B                 mov     [ecx], al
.text:00409A9D
.text:00409A9D loc_409A9D:                             ; CODE XREF: .text:00409D6E↓j
.text:00409A9D                 inc     ecx
.text:00409A9E
.text:00409A9E loc_409A9E:                             ; CODE XREF: .text:00409D86↓j
.text:00409A9E                 movzx   eax, byte ptr [edx]
.text:00409AA1                 mov     esi, ebx
.text:00409AA3                 inc     edx
.text:00409AA4                 test    al, al
.text:00409AA6                 jnz     short loc_409A90
.text:00409AA8
.text:00409AA8 loc_409AA8:                             ; CODE XREF: .text:00409A7F↑j
.text:00409AA8                 mov     [edi], esi
.text:00409AAA                 mov     eax, [esp+1Ch]
.text:00409AAE                 test    eax, eax
.text:00409AB0                 jnz     loc_409D2B
.text:00409AB6
.text:00409AB6 loc_409AB6:                             ; CODE XREF: .text:00409D3F↓j
.text:00409AB6                 mov     dword ptr [esp+4], 40996Ah
.text:00409ABE                 mov     esi, offset loc_40996D
.text:00409AC3                 mov     [esp], ebp
.text:00409AC6                 call    sub_40A7C0
.text:00409ACB                 test    eax, eax
.text:00409ACD                 mov     ebx, eax
.text:00409ACF                 jz      short loc_409AF8
.text:00409AD1                 mov     edx, eax
.text:00409AD3                 mov     ecx, eax
.text:00409AD5                 lea     esi, [esi+0]
.text:00409AD9                 lea     edi, [edi+0]
.text:00409AE0
.text:00409AE0 loc_409AE0:                             ; CODE XREF: .text:00409AF6↓j
.text:00409AE0                 movzx   eax, byte ptr [edx]
.text:00409AE3                 cmp     al, 5Ch ; '\'
.text:00409AE5                 jz      loc_409CD3
.text:00409AEB
.text:00409AEB loc_409AEB:                             ; CODE XREF: .text:00409CDB↓j
.text:00409AEB                                         ; .text:00409CE9↓j ...
.text:00409AEB                 mov     [ecx], al
.text:00409AED
.text:00409AED loc_409AED:                             ; CODE XREF: .text:00409CFD↓j
.text:00409AED                 inc     ecx
.text:00409AEE
.text:00409AEE loc_409AEE:                             ; CODE XREF: .text:00409D15↓j
.text:00409AEE                 movzx   eax, byte ptr [edx]
.text:00409AF1                 mov     esi, ebx
.text:00409AF3                 inc     edx
.text:00409AF4                 test    al, al
.text:00409AF6                 jnz     short loc_409AE0
.text:00409AF8
.text:00409AF8 loc_409AF8:                             ; CODE XREF: .text:00409ACF↑j
.text:00409AF8                 mov     [edi+4], esi
.text:00409AFB                 mov     eax, [esp+1Ch]
.text:00409AFF                 test    eax, eax
.text:00409B01                 jnz     loc_409CBA
.text:00409B07
.text:00409B07 loc_409B07:                             ; CODE XREF: .text:00409CCE↓j
.text:00409B07                 mov     dword ptr [esp+4], 40996Ah
.text:00409B0F                 mov     esi, offset loc_40996D
.text:00409B14                 mov     [esp], ebp
.text:00409B17                 call    sub_40A7C0
.text:00409B1C                 test    eax, eax
.text:00409B1E                 mov     ebx, eax
.text:00409B20                 jz      short loc_409B48
.text:00409B22                 mov     edx, eax
.text:00409B24                 mov     ecx, eax
.text:00409B26                 lea     esi, [esi+0]
.text:00409B29                 lea     edi, [edi+0]
.text:00409B30
.text:00409B30 loc_409B30:                             ; CODE XREF: .text:00409B46↓j
.text:00409B30                 movzx   eax, byte ptr [edx]
.text:00409B33                 cmp     al, 5Ch ; '\'
.text:00409B35                 jz      loc_409C62
.text:00409B3B
.text:00409B3B loc_409B3B:                             ; CODE XREF: .text:00409C6A↓j
.text:00409B3B                                         ; .text:00409C78↓j ...
.text:00409B3B                 mov     [ecx], al
.text:00409B3D
.text:00409B3D loc_409B3D:                             ; CODE XREF: .text:00409C8C↓j
.text:00409B3D                 inc     ecx
.text:00409B3E
.text:00409B3E loc_409B3E:                             ; CODE XREF: .text:00409CA4↓j
.text:00409B3E                 movzx   eax, byte ptr [edx]
.text:00409B41                 mov     esi, ebx
.text:00409B43                 inc     edx
.text:00409B44                 test    al, al
.text:00409B46                 jnz     short loc_409B30
.text:00409B48
.text:00409B48 loc_409B48:                             ; CODE XREF: .text:00409B20↑j
.text:00409B48                 mov     [edi+8], esi
.text:00409B4B                 mov     eax, [esp+1Ch]
.text:00409B4F                 test    eax, eax
.text:00409B51                 jnz     loc_409C49
.text:00409B57
.text:00409B57 loc_409B57:                             ; CODE XREF: .text:00409C5D↓j
.text:00409B57                 mov     dword ptr [esp+4], 40996Ah
.text:00409B5F                 mov     esi, offset loc_40996D
.text:00409B64                 mov     [esp], ebp
.text:00409B67                 call    sub_40A7C0
.text:00409B6C                 test    eax, eax
.text:00409B6E                 mov     ebx, eax
.text:00409B70                 jz      short loc_409B94
.text:00409B72                 mov     edx, eax
.text:00409B74                 mov     ecx, eax
.text:00409B76                 lea     esi, [esi+0]
.text:00409B79                 lea     edi, [edi+0]
.text:00409B80
.text:00409B80 loc_409B80:                             ; CODE XREF: .text:00409B92↓j
.text:00409B80                 movzx   eax, byte ptr [edx]
.text:00409B83                 cmp     al, 5Ch ; '\'
.text:00409B85                 jz      short loc_409BF5
.text:00409B87
.text:00409B87 loc_409B87:                             ; CODE XREF: .text:00409BFD↓j
.text:00409B87                                         ; .text:00409C07↓j ...
.text:00409B87                 mov     [ecx], al
.text:00409B89
.text:00409B89 loc_409B89:                             ; CODE XREF: .text:00409C1B↓j
.text:00409B89                 inc     ecx
.text:00409B8A
.text:00409B8A loc_409B8A:                             ; CODE XREF: .text:00409C33↓j
.text:00409B8A                 movzx   eax, byte ptr [edx]
.text:00409B8D                 mov     esi, ebx
.text:00409B8F                 inc     edx
.text:00409B90                 test    al, al
.text:00409B92                 jnz     short loc_409B80
.text:00409B94
.text:00409B94 loc_409B94:                             ; CODE XREF: .text:00409B70↑j
.text:00409B94                 mov     [edi+0Ch], esi
.text:00409B97                 xor     eax, eax
.text:00409B99                 mov     edx, [esp+1Ch]
.text:00409B9D                 test    edx, edx
.text:00409B9F                 jnz     short loc_409BD5
.text:00409BA1
.text:00409BA1 loc_409BA1:                             ; CODE XREF: .text:00409BF3↓j
.text:00409BA1                 cmp     eax, 1
.text:00409BA4                 jz      short loc_409BCC
.text:00409BA6                 cmp     eax, 1
.text:00409BA9                 jle     short loc_409BC1
.text:00409BAB
.text:00409BAB loc_409BAB:                             ; CODE XREF: .text:00409BC3↓j
.text:00409BAB                                         ; .text:00409BD3↓j
.text:00409BAB                 mov     edx, [esp+160h]
.text:00409BB2                 mov     [esp], edx
.text:00409BB5                 call    sub_40A760
.text:00409BBA                 mov     eax, edi
.text:00409BBC                 jmp     loc_4099FA
.text:00409BC1 ; ---------------------------------------------------------------------------
.text:00409BC1
.text:00409BC1 loc_409BC1:                             ; CODE XREF: .text:00409BA9↑j
.text:00409BC1                 test    eax, eax
.text:00409BC3                 jnz     short loc_409BAB
.text:00409BC5                 mov     dword ptr [edi+10h], 0
.text:00409BCC
.text:00409BCC loc_409BCC:                             ; CODE XREF: .text:00409BA4↑j
.text:00409BCC                 mov     dword ptr [edi+14h], 0
.text:00409BD3                 jmp     short loc_409BAB
.text:00409BD5 ; ---------------------------------------------------------------------------
.text:00409BD5
.text:00409BD5 loc_409BD5:                             ; CODE XREF: .text:00409B9F↑j
.text:00409BD5                 mov     dword ptr [esp+4], 40996Eh
.text:00409BDD                 lea     esi, [edi+14h]
.text:00409BE0                 lea     ebp, [edi+10h]
.text:00409BE3                 mov     [esp+0Ch], esi
.text:00409BE7                 mov     [esp+8], ebp
.text:00409BEB                 mov     [esp], edx
.text:00409BEE                 call    sscanf
.text:00409BF3                 jmp     short loc_409BA1
.text:00409BF5 ; ---------------------------------------------------------------------------
.text:00409BF5
.text:00409BF5 loc_409BF5:                             ; CODE XREF: .text:00409B85↑j
.text:00409BF5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409BF9                 jz      short loc_409C38
.text:00409BFB
.text:00409BFB loc_409BFB:                             ; CODE XREF: .text:00409C3C↓j
.text:00409BFB                                         ; .text:00409C42↓j
.text:00409BFB                 cmp     al, 5Ch ; '\'
.text:00409BFD                 jnz     short loc_409B87
.text:00409BFF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409C03                 jz      short loc_409C20
.text:00409C05
.text:00409C05 loc_409C05:                             ; CODE XREF: .text:00409C24↓j
.text:00409C05                                         ; .text:00409C2A↓j
.text:00409C05                 cmp     al, 5Ch ; '\'
.text:00409C07                 jnz     loc_409B87
.text:00409C0D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409C11                 jnz     loc_409B87
.text:00409C17                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409C1A                 inc     edx
.text:00409C1B                 jmp     loc_409B89
.text:00409C20 ; ---------------------------------------------------------------------------
.text:00409C20
.text:00409C20 loc_409C20:                             ; CODE XREF: .text:00409C03↑j
.text:00409C20                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409C24                 jnz     short loc_409C05
.text:00409C26                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409C2A                 jnz     short loc_409C05
.text:00409C2C                 mov     byte ptr [ecx], 9
.text:00409C2F
.text:00409C2F loc_409C2F:                             ; CODE XREF: .text:00409C47↓j
.text:00409C2F                 inc     ecx
.text:00409C30                 add     edx, 3
.text:00409C33                 jmp     loc_409B8A
.text:00409C38 ; ---------------------------------------------------------------------------
.text:00409C38
.text:00409C38 loc_409C38:                             ; CODE XREF: .text:00409BF9↑j
.text:00409C38                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409C3C                 jnz     short loc_409BFB
.text:00409C3E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409C42                 jnz     short loc_409BFB
.text:00409C44                 mov     byte ptr [ecx], 20h ; ' '
.text:00409C47                 jmp     short loc_409C2F
.text:00409C49 ; ---------------------------------------------------------------------------
.text:00409C49
.text:00409C49 loc_409C49:                             ; CODE XREF: .text:00409B51↑j
.text:00409C49                 mov     dword ptr [esp+4], 40996Ah
.text:00409C51                 mov     [esp], eax
.text:00409C54                 call    strspn
.text:00409C59                 add     [esp+1Ch], eax
.text:00409C5D                 jmp     loc_409B57
.text:00409C62 ; ---------------------------------------------------------------------------
.text:00409C62
.text:00409C62 loc_409C62:                             ; CODE XREF: .text:00409B35↑j
.text:00409C62                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409C66                 jz      short loc_409CA9
.text:00409C68
.text:00409C68 loc_409C68:                             ; CODE XREF: .text:00409CAD↓j
.text:00409C68                                         ; .text:00409CB3↓j
.text:00409C68                 cmp     al, 5Ch ; '\'
.text:00409C6A                 jnz     loc_409B3B
.text:00409C70                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409C74                 jz      short loc_409C91
.text:00409C76
.text:00409C76 loc_409C76:                             ; CODE XREF: .text:00409C95↓j
.text:00409C76                                         ; .text:00409C9B↓j
.text:00409C76                 cmp     al, 5Ch ; '\'
.text:00409C78                 jnz     loc_409B3B
.text:00409C7E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409C82                 jnz     loc_409B3B
.text:00409C88                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409C8B                 inc     edx
.text:00409C8C                 jmp     loc_409B3D
.text:00409C91 ; ---------------------------------------------------------------------------
.text:00409C91
.text:00409C91 loc_409C91:                             ; CODE XREF: .text:00409C74↑j
.text:00409C91                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409C95                 jnz     short loc_409C76
.text:00409C97                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409C9B                 jnz     short loc_409C76
.text:00409C9D                 mov     byte ptr [ecx], 9
.text:00409CA0
.text:00409CA0 loc_409CA0:                             ; CODE XREF: .text:00409CB8↓j
.text:00409CA0                 inc     ecx
.text:00409CA1                 add     edx, 3
.text:00409CA4                 jmp     loc_409B3E
.text:00409CA9 ; ---------------------------------------------------------------------------
.text:00409CA9
.text:00409CA9 loc_409CA9:                             ; CODE XREF: .text:00409C66↑j
.text:00409CA9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409CAD                 jnz     short loc_409C68
.text:00409CAF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409CB3                 jnz     short loc_409C68
.text:00409CB5                 mov     byte ptr [ecx], 20h ; ' '
.text:00409CB8                 jmp     short loc_409CA0
.text:00409CBA ; ---------------------------------------------------------------------------
.text:00409CBA
.text:00409CBA loc_409CBA:                             ; CODE XREF: .text:00409B01↑j
.text:00409CBA                 mov     dword ptr [esp+4], 40996Ah
.text:00409CC2                 mov     [esp], eax
.text:00409CC5                 call    strspn
.text:00409CCA                 add     [esp+1Ch], eax
.text:00409CCE                 jmp     loc_409B07
.text:00409CD3 ; ---------------------------------------------------------------------------
.text:00409CD3
.text:00409CD3 loc_409CD3:                             ; CODE XREF: .text:00409AE5↑j
.text:00409CD3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409CD7                 jz      short loc_409D1A
.text:00409CD9
.text:00409CD9 loc_409CD9:                             ; CODE XREF: .text:00409D1E↓j
.text:00409CD9                                         ; .text:00409D24↓j
.text:00409CD9                 cmp     al, 5Ch ; '\'
.text:00409CDB                 jnz     loc_409AEB
.text:00409CE1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409CE5                 jz      short loc_409D02
.text:00409CE7
.text:00409CE7 loc_409CE7:                             ; CODE XREF: .text:00409D06↓j
.text:00409CE7                                         ; .text:00409D0C↓j
.text:00409CE7                 cmp     al, 5Ch ; '\'
.text:00409CE9                 jnz     loc_409AEB
.text:00409CEF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409CF3                 jnz     loc_409AEB
.text:00409CF9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409CFC                 inc     edx
.text:00409CFD                 jmp     loc_409AED
.text:00409D02 ; ---------------------------------------------------------------------------
.text:00409D02
.text:00409D02 loc_409D02:                             ; CODE XREF: .text:00409CE5↑j
.text:00409D02                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409D06                 jnz     short loc_409CE7
.text:00409D08                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409D0C                 jnz     short loc_409CE7
.text:00409D0E                 mov     byte ptr [ecx], 9
.text:00409D11
.text:00409D11 loc_409D11:                             ; CODE XREF: .text:00409D29↓j
.text:00409D11                 inc     ecx
.text:00409D12                 add     edx, 3
.text:00409D15                 jmp     loc_409AEE
.text:00409D1A ; ---------------------------------------------------------------------------
.text:00409D1A
.text:00409D1A loc_409D1A:                             ; CODE XREF: .text:00409CD7↑j
.text:00409D1A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409D1E                 jnz     short loc_409CD9
.text:00409D20                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409D24                 jnz     short loc_409CD9
.text:00409D26                 mov     byte ptr [ecx], 20h ; ' '
.text:00409D29                 jmp     short loc_409D11
.text:00409D2B ; ---------------------------------------------------------------------------
.text:00409D2B
.text:00409D2B loc_409D2B:                             ; CODE XREF: .text:00409AB0↑j
.text:00409D2B                 mov     dword ptr [esp+4], 40996Ah
.text:00409D33                 mov     [esp], eax
.text:00409D36                 call    strspn
.text:00409D3B                 add     [esp+1Ch], eax
.text:00409D3F                 jmp     loc_409AB6
.text:00409D44 ; ---------------------------------------------------------------------------
.text:00409D44
.text:00409D44 loc_409D44:                             ; CODE XREF: .text:00409A95↑j
.text:00409D44                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409D48                 jz      short loc_409D8B
.text:00409D4A
.text:00409D4A loc_409D4A:                             ; CODE XREF: .text:00409D8F↓j
.text:00409D4A                                         ; .text:00409D95↓j
.text:00409D4A                 cmp     al, 5Ch ; '\'
.text:00409D4C                 jnz     loc_409A9B
.text:00409D52                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409D56                 jz      short loc_409D73
.text:00409D58
.text:00409D58 loc_409D58:                             ; CODE XREF: .text:00409D77↓j
.text:00409D58                                         ; .text:00409D7D↓j
.text:00409D58                 cmp     al, 5Ch ; '\'
.text:00409D5A                 jnz     loc_409A9B
.text:00409D60                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409D64                 jnz     loc_409A9B
.text:00409D6A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409D6D                 inc     edx
.text:00409D6E                 jmp     loc_409A9D
.text:00409D73 ; ---------------------------------------------------------------------------
.text:00409D73
.text:00409D73 loc_409D73:                             ; CODE XREF: .text:00409D56↑j
.text:00409D73                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409D77                 jnz     short loc_409D58
.text:00409D79                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409D7D                 jnz     short loc_409D58
.text:00409D7F                 mov     byte ptr [ecx], 9
.text:00409D82
.text:00409D82 loc_409D82:                             ; CODE XREF: .text:00409D9A↓j
.text:00409D82                 inc     ecx
.text:00409D83                 add     edx, 3
.text:00409D86                 jmp     loc_409A9E
.text:00409D8B ; ---------------------------------------------------------------------------
.text:00409D8B
.text:00409D8B loc_409D8B:                             ; CODE XREF: .text:00409D48↑j
.text:00409D8B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409D8F                 jnz     short loc_409D4A
.text:00409D91                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409D95                 jnz     short loc_409D4A
.text:00409D97                 mov     byte ptr [ecx], 20h ; ' '
.text:00409D9A                 jmp     short loc_409D82
.text:00409D9A ; ---------------------------------------------------------------------------
.text:00409D9C                 align 10h
.text:00409DA0
.text:00409DA0 loc_409DA0:                             ; CODE XREF: .text:004099B2↑j
.text:00409DA0                 mov     dword ptr [esp+4], 0
.text:00409DA8                 mov     dword ptr [esp], 0
.text:00409DAF                 call    GetLogicalDriveStringsA
.text:00409DB4                 sub     esp, 8
.text:00409DB7                 mov     ebx, eax
.text:00409DB9                 call    GetProcessHeap
.text:00409DBE                 mov     [esp], eax
.text:00409DC1                 mov     [esp+8], ebx
.text:00409DC5                 mov     dword ptr [esp+4], 0
.text:00409DCD                 call    HeapAlloc
.text:00409DD2                 sub     esp, 0Ch
.text:00409DD5                 mov     esi, eax
.text:00409DD7                 mov     [esp+4], eax
.text:00409DDB                 mov     [esp], ebx
.text:00409DDE                 call    GetLogicalDriveStringsA
.text:00409DE3                 mov     off_40E084, esi ; "notset"
.text:00409DE9                 sub     esp, 8
.text:00409DEC                 jmp     loc_4099B8
.text:00409DEC ; ---------------------------------------------------------------------------
.text:00409DF1 ; const char aSSSSDD[]
.text:00409DF1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:00409DF1                                         ; DATA XREF: .text:00409F30↓o
.text:00409DF1                                         ; ___addmntentstr+F0↓o
.text:00409E04                 align 10h
.text:00409E10                 push    esi
.text:00409E11                 push    ebx
.text:00409E12                 sub     esp, 44h
.text:00409E15                 mov     ebx, [esp+54h]
.text:00409E19                 mov     esi, [esp+50h]
.text:00409E1D                 mov     edx, [ebx]
.text:00409E1F                 mov     [esp+20h], edx
.text:00409E23                 mov     ecx, [ebx+4]
.text:00409E26                 mov     [esp+24h], ecx
.text:00409E2A                 mov     edx, [ebx+8]
.text:00409E2D                 mov     [esp+28h], edx
.text:00409E31                 mov     ecx, [ebx+0Ch]
.text:00409E34                 mov     [esp+2Ch], ecx
.text:00409E38                 mov     edx, [ebx+10h]
.text:00409E3B                 mov     [esp+30h], edx
.text:00409E3F                 mov     ecx, [ebx+14h]
.text:00409E42                 mov     dword ptr [esp+8], 2
.text:00409E4A                 mov     dword ptr [esp+4], 0
.text:00409E52                 mov     [esp+34h], ecx
.text:00409E56                 mov     [esp], esi
.text:00409E59                 call    sub_40A750
.text:00409E5E ; ---------------------------------------------------------------------------
.text:00409E5E                 test    eax, eax
.text:00409E60                 mov     edx, 1
.text:00409E65                 jnz     loc_409F65
.text:00409E6B                 mov     ebx, [esp+20h]
.text:00409E6F                 mov     edx, ebx
.text:00409E71                 movzx   eax, byte ptr [ebx]
.text:00409E74                 test    al, al
.text:00409E76                 jz      short loc_409EA0
.text:00409E78                 nop
.text:00409E79                 lea     esi, [esi+0]
.text:00409E80
.text:00409E80 loc_409E80:                             ; CODE XREF: .text:00409E9E↓j
.text:00409E80                 cmp     al, 20h ; ' '
.text:00409E82                 jz      loc_40A0DA
.text:00409E88                 cmp     al, 9
.text:00409E8A                 jz      loc_40A0DA
.text:00409E90                 cmp     al, 5Ch ; '\'
.text:00409E92                 jz      loc_40A0DA
.text:00409E98                 inc     ebx
.text:00409E99                 movzx   eax, byte ptr [ebx]
.text:00409E9C                 test    al, al
.text:00409E9E                 jnz     short loc_409E80
.text:00409EA0
.text:00409EA0 loc_409EA0:                             ; CODE XREF: .text:00409E76↑j
.text:00409EA0                                         ; .text:0040A0DC↓j ...
.text:00409EA0                 mov     ebx, [esp+24h]
.text:00409EA4                 mov     edx, ebx
.text:00409EA6                 movzx   eax, byte ptr [ebx]
.text:00409EA9                 test    al, al
.text:00409EAB                 jz      short loc_409ED0
.text:00409EAD                 lea     esi, [esi+0]
.text:00409EB0
.text:00409EB0 loc_409EB0:                             ; CODE XREF: .text:00409ECE↓j
.text:00409EB0                 cmp     al, 20h ; ' '
.text:00409EB2                 jz      loc_40A05A
.text:00409EB8                 cmp     al, 9
.text:00409EBA                 jz      loc_40A05A
.text:00409EC0                 cmp     al, 5Ch ; '\'
.text:00409EC2                 jz      loc_40A05A
.text:00409EC8                 inc     ebx
.text:00409EC9                 movzx   eax, byte ptr [ebx]
.text:00409ECC                 test    al, al
.text:00409ECE                 jnz     short loc_409EB0
.text:00409ED0
.text:00409ED0 loc_409ED0:                             ; CODE XREF: .text:00409EAB↑j
.text:00409ED0                                         ; .text:0040A05C↓j ...
.text:00409ED0                 mov     ebx, [esp+28h]
.text:00409ED4                 mov     edx, ebx
.text:00409ED6                 movzx   eax, byte ptr [ebx]
.text:00409ED9                 test    al, al
.text:00409EDB                 jz      short loc_409F00
.text:00409EDD                 lea     esi, [esi+0]
.text:00409EE0
.text:00409EE0 loc_409EE0:                             ; CODE XREF: .text:00409EFE↓j
.text:00409EE0                 cmp     al, 20h ; ' '
.text:00409EE2                 jz      loc_409FDE
.text:00409EE8                 cmp     al, 9
.text:00409EEA                 jz      loc_409FDE
.text:00409EF0                 cmp     al, 5Ch ; '\'
.text:00409EF2                 jz      loc_409FDE
.text:00409EF8                 inc     ebx
.text:00409EF9                 movzx   eax, byte ptr [ebx]
.text:00409EFC                 test    al, al
.text:00409EFE                 jnz     short loc_409EE0
.text:00409F00
.text:00409F00 loc_409F00:                             ; CODE XREF: .text:00409EDB↑j
.text:00409F00                                         ; .text:00409FE0↓j ...
.text:00409F00                 mov     edx, [esp+2Ch]
.text:00409F04                 mov     ebx, edx
.text:00409F06                 movzx   eax, byte ptr [edx]
.text:00409F09                 test    al, al
.text:00409F0B                 jz      short loc_409F24
.text:00409F0D                 lea     esi, [esi+0]
.text:00409F10
.text:00409F10 loc_409F10:                             ; CODE XREF: .text:00409F22↓j
.text:00409F10                 cmp     al, 20h ; ' '
.text:00409F12                 jz      short loc_409F6D
.text:00409F14                 cmp     al, 9
.text:00409F16                 jz      short loc_409F6D
.text:00409F18                 cmp     al, 5Ch ; '\'
.text:00409F1A                 jz      short loc_409F6D
.text:00409F1C                 inc     ebx
.text:00409F1D                 movzx   eax, byte ptr [ebx]
.text:00409F20                 test    al, al
.text:00409F22                 jnz     short loc_409F10
.text:00409F24
.text:00409F24 loc_409F24:                             ; CODE XREF: .text:00409F0B↑j
.text:00409F24                                         ; .text:00409F6F↓j ...
.text:00409F24                 mov     [esp+14h], edx
.text:00409F28                 mov     ecx, [esp+34h]
.text:00409F2C                 mov     ebx, [esp+30h]
.text:00409F30                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00409F38                 mov     edx, [esp+24h]
.text:00409F3C                 mov     [esp+1Ch], ecx
.text:00409F40                 mov     ecx, [esp+28h]
.text:00409F44                 mov     [esp+18h], ebx
.text:00409F48                 mov     ebx, [esp+20h]
.text:00409F4C                 mov     [esp+0Ch], edx
.text:00409F50                 mov     [esp+10h], ecx
.text:00409F54                 mov     [esp+8], ebx
.text:00409F58                 mov     [esp], esi
.text:00409F5B                 call    fprintf
.text:00409F60                 mov     edx, eax
.text:00409F62                 shr     edx, 1Fh
.text:00409F65
.text:00409F65 loc_409F65:                             ; CODE XREF: .text:00409E65↑j
.text:00409F65                 add     esp, 44h
.text:00409F68                 mov     eax, edx
.text:00409F6A                 pop     ebx
.text:00409F6B                 pop     esi
.text:00409F6C                 retn
.text:00409F6D ; ---------------------------------------------------------------------------
.text:00409F6D
.text:00409F6D loc_409F6D:                             ; CODE XREF: .text:00409F12↑j
.text:00409F6D                                         ; .text:00409F16↑j ...
.text:00409F6D                 test    al, al
.text:00409F6F                 jz      short loc_409F24
.text:00409F71                 mov     [esp], edx
.text:00409F74                 mov     ebx, edx
.text:00409F76                 call    strlen
.text:00409F7B                 lea     edx, ds:1[eax*4]
.text:00409F82                 mov     [esp], edx
.text:00409F85                 call    malloc
.text:00409F8A                 mov     [esp+2Ch], eax
.text:00409F8E                 mov     edx, eax
.text:00409F90
.text:00409F90 loc_409F90:                             ; CODE XREF: .text:00409FA8↓j
.text:00409F90                 movzx   eax, byte ptr [ebx]
.text:00409F93                 cmp     al, 20h ; ' '
.text:00409F95                 jz      short loc_409FCD
.text:00409F97                 cmp     al, 9
.text:00409F99                 jz      short loc_409FBC
.text:00409F9B                 cmp     al, 5Ch ; '\'
.text:00409F9D                 jz      short loc_409FB3
.text:00409F9F                 mov     [edx], al
.text:00409FA1
.text:00409FA1 loc_409FA1:                             ; CODE XREF: .text:00409FBA↓j
.text:00409FA1                                         ; .text:00409FCB↓j ...
.text:00409FA1                 movzx   ecx, byte ptr [ebx]
.text:00409FA4                 inc     edx
.text:00409FA5                 inc     ebx
.text:00409FA6                 test    cl, cl
.text:00409FA8                 jnz     short loc_409F90
.text:00409FAA                 mov     edx, [esp+2Ch]
.text:00409FAE                 jmp     loc_409F24
.text:00409FB3 ; ---------------------------------------------------------------------------
.text:00409FB3
.text:00409FB3 loc_409FB3:                             ; CODE XREF: .text:00409F9D↑j
.text:00409FB3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409FB6                 inc     edx
.text:00409FB7                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409FBA                 jmp     short loc_409FA1
.text:00409FBC ; ---------------------------------------------------------------------------
.text:00409FBC
.text:00409FBC loc_409FBC:                             ; CODE XREF: .text:00409F99↑j
.text:00409FBC                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409FBF                 inc     edx
.text:00409FC0                 mov     byte ptr [edx], 30h ; '0'
.text:00409FC3                 inc     edx
.text:00409FC4                 mov     byte ptr [edx], 31h ; '1'
.text:00409FC7                 inc     edx
.text:00409FC8                 mov     byte ptr [edx], 32h ; '2'
.text:00409FCB                 jmp     short loc_409FA1
.text:00409FCD ; ---------------------------------------------------------------------------
.text:00409FCD
.text:00409FCD loc_409FCD:                             ; CODE XREF: .text:00409F95↑j
.text:00409FCD                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409FD0                 inc     edx
.text:00409FD1                 mov     byte ptr [edx], 30h ; '0'
.text:00409FD4                 inc     edx
.text:00409FD5                 mov     byte ptr [edx], 34h ; '4'
.text:00409FD8                 inc     edx
.text:00409FD9                 mov     byte ptr [edx], 30h ; '0'
.text:00409FDC                 jmp     short loc_409FA1
.text:00409FDE ; ---------------------------------------------------------------------------
.text:00409FDE
.text:00409FDE loc_409FDE:                             ; CODE XREF: .text:00409EE2↑j
.text:00409FDE                                         ; .text:00409EEA↑j ...
.text:00409FDE                 test    al, al
.text:00409FE0                 jz      loc_409F00
.text:00409FE6                 mov     [esp], edx
.text:00409FE9                 mov     ebx, edx
.text:00409FEB                 call    strlen
.text:00409FF0                 lea     edx, ds:1[eax*4]
.text:00409FF7                 mov     [esp], edx
.text:00409FFA                 call    malloc
.text:00409FFF                 mov     [esp+28h], eax
.text:0040A003                 mov     edx, eax
.text:0040A005                 lea     esi, [esi+0]
.text:0040A009                 lea     edi, [edi+0]
.text:0040A010
.text:0040A010 loc_40A010:                             ; CODE XREF: .text:0040A028↓j
.text:0040A010                 movzx   eax, byte ptr [ebx]
.text:0040A013                 cmp     al, 20h ; ' '
.text:0040A015                 jz      short loc_40A049
.text:0040A017                 cmp     al, 9
.text:0040A019                 jz      short loc_40A038
.text:0040A01B                 cmp     al, 5Ch ; '\'
.text:0040A01D                 jz      short loc_40A02F
.text:0040A01F                 mov     [edx], al
.text:0040A021
.text:0040A021 loc_40A021:                             ; CODE XREF: .text:0040A036↓j
.text:0040A021                                         ; .text:0040A047↓j ...
.text:0040A021                 movzx   ecx, byte ptr [ebx]
.text:0040A024                 inc     edx
.text:0040A025                 inc     ebx
.text:0040A026                 test    cl, cl
.text:0040A028                 jnz     short loc_40A010
.text:0040A02A                 jmp     loc_409F00
.text:0040A02F ; ---------------------------------------------------------------------------
.text:0040A02F
.text:0040A02F loc_40A02F:                             ; CODE XREF: .text:0040A01D↑j
.text:0040A02F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A032                 inc     edx
.text:0040A033                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A036                 jmp     short loc_40A021
.text:0040A038 ; ---------------------------------------------------------------------------
.text:0040A038
.text:0040A038 loc_40A038:                             ; CODE XREF: .text:0040A019↑j
.text:0040A038                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A03B                 inc     edx
.text:0040A03C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A03F                 inc     edx
.text:0040A040                 mov     byte ptr [edx], 31h ; '1'
.text:0040A043                 inc     edx
.text:0040A044                 mov     byte ptr [edx], 32h ; '2'
.text:0040A047                 jmp     short loc_40A021
.text:0040A049 ; ---------------------------------------------------------------------------
.text:0040A049
.text:0040A049 loc_40A049:                             ; CODE XREF: .text:0040A015↑j
.text:0040A049                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A04C                 inc     edx
.text:0040A04D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A050                 inc     edx
.text:0040A051                 mov     byte ptr [edx], 34h ; '4'
.text:0040A054                 inc     edx
.text:0040A055                 mov     byte ptr [edx], 30h ; '0'
.text:0040A058                 jmp     short loc_40A021
.text:0040A05A ; ---------------------------------------------------------------------------
.text:0040A05A
.text:0040A05A loc_40A05A:                             ; CODE XREF: .text:00409EB2↑j
.text:0040A05A                                         ; .text:00409EBA↑j ...
.text:0040A05A                 test    al, al
.text:0040A05C                 jz      loc_409ED0
.text:0040A062                 mov     [esp], edx
.text:0040A065                 mov     ebx, edx
.text:0040A067                 call    strlen
.text:0040A06C                 lea     edx, ds:1[eax*4]
.text:0040A073                 mov     [esp], edx
.text:0040A076                 call    malloc
.text:0040A07B                 mov     [esp+24h], eax
.text:0040A07F                 mov     edx, eax
.text:0040A081                 jmp     short loc_40A090
.text:0040A081 ; ---------------------------------------------------------------------------
.text:0040A083                 align 10h
.text:0040A090
.text:0040A090 loc_40A090:                             ; CODE XREF: .text:0040A081↑j
.text:0040A090                                         ; .text:0040A0A8↓j
.text:0040A090                 movzx   eax, byte ptr [ebx]
.text:0040A093                 cmp     al, 20h ; ' '
.text:0040A095                 jz      short loc_40A0C9
.text:0040A097                 cmp     al, 9
.text:0040A099                 jz      short loc_40A0B8
.text:0040A09B                 cmp     al, 5Ch ; '\'
.text:0040A09D                 jz      short loc_40A0AF
.text:0040A09F                 mov     [edx], al
.text:0040A0A1
.text:0040A0A1 loc_40A0A1:                             ; CODE XREF: .text:0040A0B6↓j
.text:0040A0A1                                         ; .text:0040A0C7↓j ...
.text:0040A0A1                 movzx   ecx, byte ptr [ebx]
.text:0040A0A4                 inc     edx
.text:0040A0A5                 inc     ebx
.text:0040A0A6                 test    cl, cl
.text:0040A0A8                 jnz     short loc_40A090
.text:0040A0AA                 jmp     loc_409ED0
.text:0040A0AF ; ---------------------------------------------------------------------------
.text:0040A0AF
.text:0040A0AF loc_40A0AF:                             ; CODE XREF: .text:0040A09D↑j
.text:0040A0AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A0B2                 inc     edx
.text:0040A0B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A0B6                 jmp     short loc_40A0A1
.text:0040A0B8 ; ---------------------------------------------------------------------------
.text:0040A0B8
.text:0040A0B8 loc_40A0B8:                             ; CODE XREF: .text:0040A099↑j
.text:0040A0B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A0BB                 inc     edx
.text:0040A0BC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A0BF                 inc     edx
.text:0040A0C0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A0C3                 inc     edx
.text:0040A0C4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A0C7                 jmp     short loc_40A0A1
.text:0040A0C9 ; ---------------------------------------------------------------------------
.text:0040A0C9
.text:0040A0C9 loc_40A0C9:                             ; CODE XREF: .text:0040A095↑j
.text:0040A0C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A0CC                 inc     edx
.text:0040A0CD                 mov     byte ptr [edx], 30h ; '0'
.text:0040A0D0                 inc     edx
.text:0040A0D1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A0D4                 inc     edx
.text:0040A0D5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A0D8                 jmp     short loc_40A0A1
.text:0040A0DA ; ---------------------------------------------------------------------------
.text:0040A0DA
.text:0040A0DA loc_40A0DA:                             ; CODE XREF: .text:00409E82↑j
.text:0040A0DA                                         ; .text:00409E8A↑j ...
.text:0040A0DA                 test    al, al
.text:0040A0DC                 jz      loc_409EA0
.text:0040A0E2                 mov     [esp], edx
.text:0040A0E5                 mov     ebx, edx
.text:0040A0E7                 call    strlen
.text:0040A0EC                 lea     ecx, ds:1[eax*4]
.text:0040A0F3                 mov     [esp], ecx
.text:0040A0F6                 call    malloc
.text:0040A0FB                 mov     [esp+20h], eax
.text:0040A0FF                 mov     edx, eax
.text:0040A101                 jmp     short loc_40A110
.text:0040A101 ; ---------------------------------------------------------------------------
.text:0040A103                 align 10h
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: .text:0040A101↑j
.text:0040A110                                         ; .text:0040A128↓j
.text:0040A110                 movzx   eax, byte ptr [ebx]
.text:0040A113                 cmp     al, 20h ; ' '
.text:0040A115                 jz      short loc_40A149
.text:0040A117                 cmp     al, 9
.text:0040A119                 jz      short loc_40A138
.text:0040A11B                 cmp     al, 5Ch ; '\'
.text:0040A11D                 jz      short loc_40A12F
.text:0040A11F                 mov     [edx], al
.text:0040A121
.text:0040A121 loc_40A121:                             ; CODE XREF: .text:0040A136↓j
.text:0040A121                                         ; .text:0040A147↓j ...
.text:0040A121                 movzx   ecx, byte ptr [ebx]
.text:0040A124                 inc     edx
.text:0040A125                 inc     ebx
.text:0040A126                 test    cl, cl
.text:0040A128                 jnz     short loc_40A110
.text:0040A12A                 jmp     loc_409EA0
.text:0040A12F ; ---------------------------------------------------------------------------
.text:0040A12F
.text:0040A12F loc_40A12F:                             ; CODE XREF: .text:0040A11D↑j
.text:0040A12F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A132                 inc     edx
.text:0040A133                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A136                 jmp     short loc_40A121
.text:0040A138 ; ---------------------------------------------------------------------------
.text:0040A138
.text:0040A138 loc_40A138:                             ; CODE XREF: .text:0040A119↑j
.text:0040A138                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A13B                 inc     edx
.text:0040A13C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A13F                 inc     edx
.text:0040A140                 mov     byte ptr [edx], 31h ; '1'
.text:0040A143                 inc     edx
.text:0040A144                 mov     byte ptr [edx], 32h ; '2'
.text:0040A147                 jmp     short loc_40A121
.text:0040A149 ; ---------------------------------------------------------------------------
.text:0040A149
.text:0040A149 loc_40A149:                             ; CODE XREF: .text:0040A115↑j
.text:0040A149                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A14C                 inc     edx
.text:0040A14D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A150                 inc     edx
.text:0040A151                 mov     byte ptr [edx], 34h ; '4'
.text:0040A154                 inc     edx
.text:0040A155                 mov     byte ptr [edx], 30h ; '0'
.text:0040A158                 jmp     short loc_40A121
.text:0040A158 ; ---------------------------------------------------------------------------
.text:0040A15A                 align 10h
.text:0040A160
.text:0040A160 ; =============== S U B R O U T I N E =======================================
.text:0040A160
.text:0040A160 ; Attributes: info_from_lumina
.text:0040A160
.text:0040A160 ; int __cdecl __addmntentstr(char *, int)
.text:0040A160 ___addmntentstr proc near               ; CODE XREF: .text:00409A2A↑p
.text:0040A160
.text:0040A160 Buffer          = dword ptr -4Ch
.text:0040A160 Format          = dword ptr -48h
.text:0040A160 var_44          = dword ptr -44h
.text:0040A160 var_40          = dword ptr -40h
.text:0040A160 var_3C          = dword ptr -3Ch
.text:0040A160 var_38          = dword ptr -38h
.text:0040A160 var_34          = dword ptr -34h
.text:0040A160 var_30          = dword ptr -30h
.text:0040A160 var_2C          = dword ptr -2Ch
.text:0040A160 var_28          = dword ptr -28h
.text:0040A160 var_24          = dword ptr -24h
.text:0040A160 Str             = dword ptr -20h
.text:0040A160 var_1C          = dword ptr -1Ch
.text:0040A160 var_18          = dword ptr -18h
.text:0040A160 arg_0           = dword ptr  4
.text:0040A160 arg_4           = dword ptr  8
.text:0040A160
.text:0040A160                 push    ebx
.text:0040A161                 sub     esp, 48h
.text:0040A164                 mov     edx, [esp+4Ch+arg_4]
.text:0040A168                 mov     ecx, [edx]
.text:0040A16A                 mov     [esp+4Ch+var_2C], ecx
.text:0040A16E                 mov     ebx, [edx+4]
.text:0040A171                 mov     [esp+4Ch+var_28], ebx
.text:0040A175                 mov     ebx, [edx+8]
.text:0040A178                 mov     [esp+4Ch+var_24], ebx
.text:0040A17C                 mov     ebx, [edx+0Ch]
.text:0040A17F                 mov     [esp+4Ch+Str], ebx
.text:0040A183                 mov     ebx, [edx+10h]
.text:0040A186                 mov     [esp+4Ch+var_1C], ebx
.text:0040A18A                 mov     ebx, [edx+14h]
.text:0040A18D                 mov     [esp+4Ch+var_18], ebx
.text:0040A191                 mov     ebx, ecx
.text:0040A193                 movzx   eax, byte ptr [ecx]
.text:0040A196                 test    al, al
.text:0040A198                 jz      loc_40A481
.text:0040A19E                 mov     esi, esi
.text:0040A1A0
.text:0040A1A0 loc_40A1A0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040A1A0                 cmp     al, 20h ; ' '
.text:0040A1A2                 jz      loc_40A400
.text:0040A1A8                 cmp     al, 9
.text:0040A1AA                 jz      loc_40A400
.text:0040A1B0                 cmp     al, 5Ch ; '\'
.text:0040A1B2                 jz      loc_40A400
.text:0040A1B8                 inc     ebx
.text:0040A1B9                 movzx   eax, byte ptr [ebx]
.text:0040A1BC                 test    al, al
.text:0040A1BE                 jnz     short loc_40A1A0
.text:0040A1C0
.text:0040A1C0 loc_40A1C0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040A1C0                                         ; ___addmntentstr+2EA↓j
.text:0040A1C0                 mov     ebx, [esp+4Ch+var_28]
.text:0040A1C4                 mov     edx, ebx
.text:0040A1C6                 movzx   eax, byte ptr [ebx]
.text:0040A1C9                 test    al, al
.text:0040A1CB                 jz      short loc_40A1F0
.text:0040A1CD                 lea     esi, [esi+0]
.text:0040A1D0
.text:0040A1D0 loc_40A1D0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040A1D0                 cmp     al, 20h ; ' '
.text:0040A1D2                 jz      loc_40A37A
.text:0040A1D8                 cmp     al, 9
.text:0040A1DA                 jz      loc_40A37A
.text:0040A1E0                 cmp     al, 5Ch ; '\'
.text:0040A1E2                 jz      loc_40A37A
.text:0040A1E8                 inc     ebx
.text:0040A1E9                 movzx   eax, byte ptr [ebx]
.text:0040A1EC                 test    al, al
.text:0040A1EE                 jnz     short loc_40A1D0
.text:0040A1F0
.text:0040A1F0 loc_40A1F0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040A1F0                                         ; ___addmntentstr+21C↓j ...
.text:0040A1F0                 mov     ebx, [esp+4Ch+var_24]
.text:0040A1F4                 mov     edx, ebx
.text:0040A1F6                 movzx   eax, byte ptr [ebx]
.text:0040A1F9                 test    al, al
.text:0040A1FB                 jz      short loc_40A220
.text:0040A1FD                 lea     esi, [esi+0]
.text:0040A200
.text:0040A200 loc_40A200:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040A200                 cmp     al, 20h ; ' '
.text:0040A202                 jz      loc_40A2FE
.text:0040A208                 cmp     al, 9
.text:0040A20A                 jz      loc_40A2FE
.text:0040A210                 cmp     al, 5Ch ; '\'
.text:0040A212                 jz      loc_40A2FE
.text:0040A218                 inc     ebx
.text:0040A219                 movzx   eax, byte ptr [ebx]
.text:0040A21C                 test    al, al
.text:0040A21E                 jnz     short loc_40A200
.text:0040A220
.text:0040A220 loc_40A220:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040A220                                         ; ___addmntentstr+1A0↓j ...
.text:0040A220                 mov     edx, [esp+4Ch+Str]
.text:0040A224                 mov     ebx, edx
.text:0040A226                 movzx   eax, byte ptr [edx]
.text:0040A229                 test    al, al
.text:0040A22B                 jz      short loc_40A244
.text:0040A22D                 lea     esi, [esi+0]
.text:0040A230
.text:0040A230 loc_40A230:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040A230                 cmp     al, 20h ; ' '
.text:0040A232                 jz      short loc_40A28C
.text:0040A234                 cmp     al, 9
.text:0040A236                 jz      short loc_40A28C
.text:0040A238                 cmp     al, 5Ch ; '\'
.text:0040A23A                 jz      short loc_40A28C
.text:0040A23C                 inc     ebx
.text:0040A23D                 movzx   eax, byte ptr [ebx]
.text:0040A240                 test    al, al
.text:0040A242                 jnz     short loc_40A230
.text:0040A244
.text:0040A244 loc_40A244:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040A244                                         ; ___addmntentstr+12E↓j ...
.text:0040A244                 mov     [esp+4Ch+var_38], edx
.text:0040A248                 mov     ebx, [esp+4Ch+var_18]
.text:0040A24C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040A250                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A258                 mov     edx, [esp+4Ch+var_2C]
.text:0040A25C                 mov     [esp+4Ch+var_30], ebx
.text:0040A260                 mov     ebx, [esp+4Ch+var_24]
.text:0040A264                 mov     [esp+4Ch+var_34], ecx
.text:0040A268                 mov     ecx, [esp+4Ch+var_28]
.text:0040A26C                 mov     [esp+4Ch+var_3C], ebx
.text:0040A270                 mov     ebx, [esp+4Ch+arg_0]
.text:0040A274                 mov     [esp+4Ch+var_40], ecx
.text:0040A278                 mov     [esp+4Ch+var_44], edx
.text:0040A27C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040A27F                 call    sprintf
.text:0040A284                 add     esp, 48h
.text:0040A287                 shr     eax, 1Fh
.text:0040A28A                 pop     ebx
.text:0040A28B                 retn
.text:0040A28C ; ---------------------------------------------------------------------------
.text:0040A28C
.text:0040A28C loc_40A28C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040A28C                                         ; ___addmntentstr+D6↑j ...
.text:0040A28C                 test    al, al
.text:0040A28E                 jz      short loc_40A244
.text:0040A290                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A293                 mov     ebx, edx
.text:0040A295                 call    strlen
.text:0040A29A                 lea     edx, ds:1[eax*4]
.text:0040A2A1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A2A4                 call    malloc
.text:0040A2A9                 mov     [esp+4Ch+Str], eax
.text:0040A2AD                 mov     edx, eax
.text:0040A2AF                 nop
.text:0040A2B0
.text:0040A2B0 loc_40A2B0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040A2B0                 movzx   eax, byte ptr [ebx]
.text:0040A2B3                 cmp     al, 20h ; ' '
.text:0040A2B5                 jz      short loc_40A2ED
.text:0040A2B7                 cmp     al, 9
.text:0040A2B9                 jz      short loc_40A2DC
.text:0040A2BB                 cmp     al, 5Ch ; '\'
.text:0040A2BD                 jz      short loc_40A2D3
.text:0040A2BF                 mov     [edx], al
.text:0040A2C1
.text:0040A2C1 loc_40A2C1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040A2C1                                         ; ___addmntentstr+18B↓j ...
.text:0040A2C1                 movzx   ecx, byte ptr [ebx]
.text:0040A2C4                 inc     edx
.text:0040A2C5                 inc     ebx
.text:0040A2C6                 test    cl, cl
.text:0040A2C8                 jnz     short loc_40A2B0
.text:0040A2CA                 mov     edx, [esp+4Ch+Str]
.text:0040A2CE                 jmp     loc_40A244
.text:0040A2D3 ; ---------------------------------------------------------------------------
.text:0040A2D3
.text:0040A2D3 loc_40A2D3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040A2D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A2D6                 inc     edx
.text:0040A2D7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A2DA                 jmp     short loc_40A2C1
.text:0040A2DC ; ---------------------------------------------------------------------------
.text:0040A2DC
.text:0040A2DC loc_40A2DC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040A2DC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A2DF                 inc     edx
.text:0040A2E0                 mov     byte ptr [edx], 30h ; '0'
.text:0040A2E3                 inc     edx
.text:0040A2E4                 mov     byte ptr [edx], 31h ; '1'
.text:0040A2E7                 inc     edx
.text:0040A2E8                 mov     byte ptr [edx], 32h ; '2'
.text:0040A2EB                 jmp     short loc_40A2C1
.text:0040A2ED ; ---------------------------------------------------------------------------
.text:0040A2ED
.text:0040A2ED loc_40A2ED:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040A2ED                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A2F0                 inc     edx
.text:0040A2F1                 mov     byte ptr [edx], 30h ; '0'
.text:0040A2F4                 inc     edx
.text:0040A2F5                 mov     byte ptr [edx], 34h ; '4'
.text:0040A2F8                 inc     edx
.text:0040A2F9                 mov     byte ptr [edx], 30h ; '0'
.text:0040A2FC                 jmp     short loc_40A2C1
.text:0040A2FE ; ---------------------------------------------------------------------------
.text:0040A2FE
.text:0040A2FE loc_40A2FE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040A2FE                                         ; ___addmntentstr+AA↑j ...
.text:0040A2FE                 test    al, al
.text:0040A300                 jz      loc_40A220
.text:0040A306                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A309                 mov     ebx, edx
.text:0040A30B                 call    strlen
.text:0040A310                 lea     edx, ds:1[eax*4]
.text:0040A317                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A31A                 call    malloc
.text:0040A31F                 mov     [esp+4Ch+var_24], eax
.text:0040A323                 mov     edx, eax
.text:0040A325                 lea     esi, [esi+0]
.text:0040A329                 lea     edi, [edi+0]
.text:0040A330
.text:0040A330 loc_40A330:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040A330                 movzx   eax, byte ptr [ebx]
.text:0040A333                 cmp     al, 20h ; ' '
.text:0040A335                 jz      short loc_40A369
.text:0040A337                 cmp     al, 9
.text:0040A339                 jz      short loc_40A358
.text:0040A33B                 cmp     al, 5Ch ; '\'
.text:0040A33D                 jz      short loc_40A34F
.text:0040A33F                 mov     [edx], al
.text:0040A341
.text:0040A341 loc_40A341:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040A341                                         ; ___addmntentstr+207↓j ...
.text:0040A341                 movzx   ecx, byte ptr [ebx]
.text:0040A344                 inc     edx
.text:0040A345                 inc     ebx
.text:0040A346                 test    cl, cl
.text:0040A348                 jnz     short loc_40A330
.text:0040A34A                 jmp     loc_40A220
.text:0040A34F ; ---------------------------------------------------------------------------
.text:0040A34F
.text:0040A34F loc_40A34F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040A34F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A352                 inc     edx
.text:0040A353                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A356                 jmp     short loc_40A341
.text:0040A358 ; ---------------------------------------------------------------------------
.text:0040A358
.text:0040A358 loc_40A358:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040A358                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A35B                 inc     edx
.text:0040A35C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A35F                 inc     edx
.text:0040A360                 mov     byte ptr [edx], 31h ; '1'
.text:0040A363                 inc     edx
.text:0040A364                 mov     byte ptr [edx], 32h ; '2'
.text:0040A367                 jmp     short loc_40A341
.text:0040A369 ; ---------------------------------------------------------------------------
.text:0040A369
.text:0040A369 loc_40A369:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040A369                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A36C                 inc     edx
.text:0040A36D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A370                 inc     edx
.text:0040A371                 mov     byte ptr [edx], 34h ; '4'
.text:0040A374                 inc     edx
.text:0040A375                 mov     byte ptr [edx], 30h ; '0'
.text:0040A378                 jmp     short loc_40A341
.text:0040A37A ; ---------------------------------------------------------------------------
.text:0040A37A
.text:0040A37A loc_40A37A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040A37A                                         ; ___addmntentstr+7A↑j ...
.text:0040A37A                 test    al, al
.text:0040A37C                 jz      loc_40A1F0
.text:0040A382                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A385                 mov     ebx, edx
.text:0040A387                 call    strlen
.text:0040A38C                 lea     edx, ds:1[eax*4]
.text:0040A393                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A396                 call    malloc
.text:0040A39B                 mov     [esp+4Ch+var_28], eax
.text:0040A39F                 mov     edx, eax
.text:0040A3A1                 jmp     short loc_40A3B0
.text:0040A3A1 ; ---------------------------------------------------------------------------
.text:0040A3A3                 align 10h
.text:0040A3B0
.text:0040A3B0 loc_40A3B0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040A3B0                                         ; ___addmntentstr+268↓j
.text:0040A3B0                 movzx   eax, byte ptr [ebx]
.text:0040A3B3                 cmp     al, 20h ; ' '
.text:0040A3B5                 jz      short loc_40A3E9
.text:0040A3B7                 cmp     al, 9
.text:0040A3B9                 jz      short loc_40A3D8
.text:0040A3BB                 cmp     al, 5Ch ; '\'
.text:0040A3BD                 jz      short loc_40A3CF
.text:0040A3BF                 mov     [edx], al
.text:0040A3C1
.text:0040A3C1 loc_40A3C1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040A3C1                                         ; ___addmntentstr+287↓j ...
.text:0040A3C1                 movzx   ecx, byte ptr [ebx]
.text:0040A3C4                 inc     edx
.text:0040A3C5                 inc     ebx
.text:0040A3C6                 test    cl, cl
.text:0040A3C8                 jnz     short loc_40A3B0
.text:0040A3CA                 jmp     loc_40A1F0
.text:0040A3CF ; ---------------------------------------------------------------------------
.text:0040A3CF
.text:0040A3CF loc_40A3CF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040A3CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3D2                 inc     edx
.text:0040A3D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3D6                 jmp     short loc_40A3C1
.text:0040A3D8 ; ---------------------------------------------------------------------------
.text:0040A3D8
.text:0040A3D8 loc_40A3D8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040A3D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3DB                 inc     edx
.text:0040A3DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3DF                 inc     edx
.text:0040A3E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A3E3                 inc     edx
.text:0040A3E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A3E7                 jmp     short loc_40A3C1
.text:0040A3E9 ; ---------------------------------------------------------------------------
.text:0040A3E9
.text:0040A3E9 loc_40A3E9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040A3E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3EC                 inc     edx
.text:0040A3ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3F0                 inc     edx
.text:0040A3F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A3F4                 inc     edx
.text:0040A3F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3F8                 jmp     short loc_40A3C1
.text:0040A3F8 ; ---------------------------------------------------------------------------
.text:0040A3FA                 align 10h
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040A400                                         ; ___addmntentstr+4A↑j ...
.text:0040A400                 test    al, al
.text:0040A402                 jz      loc_40A1C0
.text:0040A408                 mov     ebx, [esp+4Ch+var_2C]
.text:0040A40C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040A40F                 call    strlen
.text:0040A414                 lea     edx, ds:1[eax*4]
.text:0040A41B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A41E                 call    malloc
.text:0040A423                 mov     [esp+4Ch+var_2C], eax
.text:0040A427                 mov     edx, eax
.text:0040A429                 lea     esi, [esi+0]
.text:0040A430
.text:0040A430 loc_40A430:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040A430                 movzx   eax, byte ptr [ebx]
.text:0040A433                 cmp     al, 20h ; ' '
.text:0040A435                 jz      short loc_40A470
.text:0040A437                 cmp     al, 9
.text:0040A439                 jz      short loc_40A458
.text:0040A43B                 cmp     al, 5Ch ; '\'
.text:0040A43D                 jz      short loc_40A44F
.text:0040A43F                 mov     [edx], al
.text:0040A441
.text:0040A441 loc_40A441:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040A441                                         ; ___addmntentstr+307↓j ...
.text:0040A441                 movzx   ecx, byte ptr [ebx]
.text:0040A444                 inc     edx
.text:0040A445                 inc     ebx
.text:0040A446                 test    cl, cl
.text:0040A448                 jnz     short loc_40A430
.text:0040A44A                 jmp     loc_40A1C0
.text:0040A44F ; ---------------------------------------------------------------------------
.text:0040A44F
.text:0040A44F loc_40A44F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040A44F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A452                 inc     edx
.text:0040A453                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A456                 jmp     short loc_40A441
.text:0040A458 ; ---------------------------------------------------------------------------
.text:0040A458
.text:0040A458 loc_40A458:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040A458                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A45B                 inc     edx
.text:0040A45C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A45F                 inc     edx
.text:0040A460                 mov     byte ptr [edx], 31h ; '1'
.text:0040A463                 inc     edx
.text:0040A464                 mov     byte ptr [edx], 32h ; '2'
.text:0040A467                 jmp     short loc_40A441
.text:0040A467 ; ---------------------------------------------------------------------------
.text:0040A469                 align 10h
.text:0040A470
.text:0040A470 loc_40A470:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040A470                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A473                 inc     edx
.text:0040A474                 mov     byte ptr [edx], 30h ; '0'
.text:0040A477                 inc     edx
.text:0040A478                 mov     byte ptr [edx], 34h ; '4'
.text:0040A47B                 inc     edx
.text:0040A47C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A47F                 jmp     short loc_40A441
.text:0040A481 ; ---------------------------------------------------------------------------
.text:0040A481
.text:0040A481 loc_40A481:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040A481                 movzx   eax, byte ptr [ecx]
.text:0040A484                 jmp     loc_40A400
.text:0040A484 ___addmntentstr endp
.text:0040A484
.text:0040A484 ; ---------------------------------------------------------------------------
.text:0040A489                 align 10h
.text:0040A490
.text:0040A490 ; =============== S U B R O U T I N E =======================================
.text:0040A490
.text:0040A490
.text:0040A490 sub_40A490      proc near               ; CODE XREF: sub_4082A0+99↑p
.text:0040A490
.text:0040A490 nBufferLength   = dword ptr -1Ch
.text:0040A490 lpBuffer        = dword ptr -18h
.text:0040A490 dwBytes         = dword ptr -14h
.text:0040A490 var_8           = dword ptr -8
.text:0040A490 var_4           = dword ptr -4
.text:0040A490
.text:0040A490                 sub     esp, 1Ch
.text:0040A493                 mov     [esp+1Ch+var_8], ebx
.text:0040A497                 mov     [esp+1Ch+var_4], esi
.text:0040A49B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040A4A3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040A4AA                 call    GetLogicalDriveStringsA
.text:0040A4AF                 sub     esp, 8
.text:0040A4B2                 mov     ebx, eax
.text:0040A4B4                 call    GetProcessHeap
.text:0040A4B9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040A4BC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040A4C0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040A4C8                 call    HeapAlloc
.text:0040A4CD                 sub     esp, 0Ch
.text:0040A4D0                 mov     esi, eax
.text:0040A4D2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040A4D5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040A4D9                 call    GetLogicalDriveStringsA
.text:0040A4DE                 sub     esp, 8
.text:0040A4E1                 mov     eax, esi
.text:0040A4E3                 mov     ebx, [esp+1Ch+var_8]
.text:0040A4E7                 mov     esi, [esp+1Ch+var_4]
.text:0040A4EB                 add     esp, 1Ch
.text:0040A4EE                 retn
.text:0040A4EE sub_40A490      endp
.text:0040A4EE
.text:0040A4EF
.text:0040A4EF ; =============== S U B R O U T I N E =======================================
.text:0040A4EF
.text:0040A4EF
.text:0040A4EF ; int __cdecl sub_40A4EF(char *, char *)
.text:0040A4EF sub_40A4EF      proc near               ; DATA XREF: sub_40A4EF:loc_40A57D↓o
.text:0040A4EF
.text:0040A4EF FileName        = dword ptr -1Ch
.text:0040A4EF Mode            = dword ptr -18h
.text:0040A4EF dwBytes         = dword ptr -14h
.text:0040A4EF arg_0           = dword ptr  4
.text:0040A4EF arg_4           = dword ptr  8
.text:0040A4EF
.text:0040A4EF                 ja      short $+2
.text:0040A4F1
.text:0040A4F1 loc_40A4F1:                             ; CODE XREF: sub_40A4EF↑j
.text:0040A4F1                 jmp     short loc_40A500
.text:0040A4F1 ; ---------------------------------------------------------------------------
.text:0040A4F3                 align 10h
.text:0040A500
.text:0040A500 loc_40A500:                             ; CODE XREF: sub_40A4EF:loc_40A4F1↑j
.text:0040A500                 push    edi
.text:0040A501                 push    esi
.text:0040A502                 push    ebx
.text:0040A503                 sub     esp, 10h
.text:0040A506                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A50A                 mov     edx, [esp+1Ch+arg_4]
.text:0040A50E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040A511                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040A515                 call    fopen
.text:0040A51A                 test    eax, eax
.text:0040A51C                 mov     edi, eax
.text:0040A51E                 jz      short loc_40A57D
.text:0040A520
.text:0040A520 loc_40A520:                             ; CODE XREF: sub_40A4EF+A2↓j
.text:0040A520                                         ; sub_40A4EF+AB↓j
.text:0040A520                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040A528                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040A52F                 call    GetLogicalDriveStringsA
.text:0040A534                 sub     esp, 8
.text:0040A537                 mov     esi, eax
.text:0040A539                 call    GetProcessHeap
.text:0040A53E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040A541                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040A545                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040A54D                 call    HeapAlloc
.text:0040A552                 sub     esp, 0Ch
.text:0040A555                 mov     ebx, eax
.text:0040A557                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040A55A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040A55E                 call    GetLogicalDriveStringsA
.text:0040A563                 mov     off_40E084, ebx ; "notset"
.text:0040A569                 sub     esp, 8
.text:0040A56C                 xor     eax, eax
.text:0040A56E                 test    ebx, ebx
.text:0040A570                 setz    al
.text:0040A573                 add     esp, 10h
.text:0040A576                 pop     ebx
.text:0040A577                 dec     eax
.text:0040A578                 and     eax, edi
.text:0040A57A                 pop     esi
.text:0040A57B                 pop     edi
.text:0040A57C                 retn
.text:0040A57D ; ---------------------------------------------------------------------------
.text:0040A57D
.text:0040A57D loc_40A57D:                             ; CODE XREF: sub_40A4EF+2F↑j
.text:0040A57D                 mov     [esp+1Ch+Mode], offset sub_40A4EF ; Mode
.text:0040A585                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040A588                 call    fopen
.text:0040A58D                 test    eax, eax
.text:0040A58F                 mov     edi, eax
.text:0040A591                 jnz     short loc_40A520
.text:0040A593                 call    sub_40A860
.text:0040A598                 mov     edi, eax
.text:0040A59A                 jmp     short loc_40A520
.text:0040A59A sub_40A4EF      endp
.text:0040A59A
.text:0040A59A ; ---------------------------------------------------------------------------
.text:0040A59C                 align 10h
.text:0040A5A0                 sub     esp, 0Ch
.text:0040A5A3                 mov     eax, [esp+10h]
.text:0040A5A7                 test    eax, eax
.text:0040A5A9                 jz      short loc_40A5B3
.text:0040A5AB                 mov     [esp], eax
.text:0040A5AE                 call    fclose
.text:0040A5B3
.text:0040A5B3 loc_40A5B3:                             ; CODE XREF: .text:0040A5A9↑j
.text:0040A5B3                 call    GetProcessHeap
.text:0040A5B8                 mov     [esp], eax
.text:0040A5BB                 mov     ecx, off_40E084 ; "notset"
.text:0040A5C1                 mov     dword ptr [esp+4], 0
.text:0040A5C9                 mov     [esp+8], ecx
.text:0040A5CD                 call    HeapFree
.text:0040A5D2                 mov     edx, off_40E080 ; "notset"
.text:0040A5D8                 sub     esp, 0Ch
.text:0040A5DB                 mov     eax, 1
.text:0040A5E0                 mov     off_40E084, edx ; "notset"
.text:0040A5E6                 add     esp, 0Ch
.text:0040A5E9                 retn
.text:0040A5E9 ; ---------------------------------------------------------------------------
.text:0040A5EA                 align 10h
.text:0040A5F0                 push    edi
.text:0040A5F1                 push    esi
.text:0040A5F2                 push    ebx
.text:0040A5F3                 sub     esp, 10h
.text:0040A5F6                 mov     edi, [esp+24h]
.text:0040A5FA                 mov     [esp], edi
.text:0040A5FD                 call    strlen
.text:0040A602                 mov     edx, [esp+20h]
.text:0040A606                 mov     esi, eax
.text:0040A608                 mov     ebx, [edx+0Ch]
.text:0040A60B                 nop
.text:0040A60C                 lea     esi, [esi+0]
.text:0040A610
.text:0040A610 loc_40A610:                             ; CODE XREF: .text:0040A641↓j
.text:0040A610                 mov     [esp+4], edi
.text:0040A614                 mov     [esp], ebx
.text:0040A617                 call    strstr
.text:0040A61C                 test    eax, eax
.text:0040A61E                 jz      short loc_40A643
.text:0040A620                 cmp     eax, ebx
.text:0040A622                 jz      short loc_40A645
.text:0040A624                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040A628                 jz      short loc_40A650
.text:0040A62A
.text:0040A62A loc_40A62A:                             ; CODE XREF: .text:0040A660↓j
.text:0040A62A                 mov     [esp], ebx
.text:0040A62D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040A635                 call    strchr
.text:0040A63A                 test    eax, eax
.text:0040A63C                 mov     ebx, eax
.text:0040A63E                 jz      short loc_40A643
.text:0040A640                 inc     ebx
.text:0040A641                 jmp     short loc_40A610
.text:0040A643 ; ---------------------------------------------------------------------------
.text:0040A643
.text:0040A643 loc_40A643:                             ; CODE XREF: .text:0040A61E↑j
.text:0040A643                                         ; .text:0040A63E↑j
.text:0040A643                 xor     eax, eax
.text:0040A645
.text:0040A645 loc_40A645:                             ; CODE XREF: .text:0040A622↑j
.text:0040A645                                         ; .text:0040A656↓j ...
.text:0040A645                 add     esp, 10h
.text:0040A648                 pop     ebx
.text:0040A649                 pop     esi
.text:0040A64A                 pop     edi
.text:0040A64B                 retn
.text:0040A64B ; ---------------------------------------------------------------------------
.text:0040A64C                 align 10h
.text:0040A650
.text:0040A650 loc_40A650:                             ; CODE XREF: .text:0040A628↑j
.text:0040A650                 movzx   edx, byte ptr [esi+eax]
.text:0040A654                 test    dl, dl
.text:0040A656                 jz      short loc_40A645
.text:0040A658                 cmp     dl, 3Dh ; '='
.text:0040A65B                 jz      short loc_40A645
.text:0040A65D                 cmp     dl, 2Ch ; ','
.text:0040A660                 jnz     short loc_40A62A
.text:0040A662                 jmp     short loc_40A645
.text:0040A662 ; ---------------------------------------------------------------------------
.text:0040A664                 align 10h
.text:0040A670 ; const char aFxstat64BadFil[]
.text:0040A670 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040A670                                         ; DATA XREF: sub_40A6A0+7B↓o
.text:0040A694                 align 10h
.text:0040A6A0
.text:0040A6A0 ; =============== S U B R O U T I N E =======================================
.text:0040A6A0
.text:0040A6A0
.text:0040A6A0 ; int __cdecl sub_40A6A0(HANDLE hNamedPipe, int, int)
.text:0040A6A0 sub_40A6A0      proc near               ; CODE XREF: .text:004084B9↑p
.text:0040A6A0
.text:0040A6A0 FileHandle      = dword ptr -1Ch
.text:0040A6A0 var_18          = dword ptr -18h
.text:0040A6A0 var_C           = dword ptr -0Ch
.text:0040A6A0 var_8           = dword ptr -8
.text:0040A6A0 var_4           = dword ptr -4
.text:0040A6A0 hNamedPipe      = dword ptr  4
.text:0040A6A0 arg_4           = dword ptr  8
.text:0040A6A0 arg_8           = dword ptr  0Ch
.text:0040A6A0
.text:0040A6A0                 sub     esp, 1Ch
.text:0040A6A3                 mov     edx, [esp+1Ch+arg_4]
.text:0040A6A7                 mov     [esp+1Ch+var_C], ebx
.text:0040A6AB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040A6AF                 mov     [esp+1Ch+var_8], esi
.text:0040A6B3                 mov     esi, [esp+1Ch+arg_8]
.text:0040A6B7                 test    ebx, ebx
.text:0040A6B9                 mov     [esp+1Ch+var_4], edi
.text:0040A6BD                 jnz     short loc_40A6F7
.text:0040A6BF                 test    edx, edx
.text:0040A6C1                 js      short loc_40A717
.text:0040A6C3                 test    esi, esi
.text:0040A6C5                 jz      short loc_40A6F7
.text:0040A6C7                 cld
.text:0040A6C8                 mov     eax, ebx
.text:0040A6CA                 mov     edi, esi
.text:0040A6CC                 mov     ecx, 18h
.text:0040A6D1                 rep stosd
.text:0040A6D3                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040A6D7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040A6DA                 call    _get_osfhandle
.text:0040A6DF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040A6E3                 mov     ebx, [esp+1Ch+var_C]
.text:0040A6E7                 mov     esi, [esp+1Ch+var_8]
.text:0040A6EB                 mov     edi, [esp+1Ch+var_4]
.text:0040A6EF                 add     esp, 1Ch
.text:0040A6F2                 jmp     sub_405C00
.text:0040A6F7 ; ---------------------------------------------------------------------------
.text:0040A6F7
.text:0040A6F7 loc_40A6F7:                             ; CODE XREF: sub_40A6A0+1D↑j
.text:0040A6F7                                         ; sub_40A6A0+25↑j
.text:0040A6F7                 call    _errno
.text:0040A6FC                 mov     dword ptr [eax], 16h
.text:0040A702
.text:0040A702 loc_40A702:                             ; CODE XREF: sub_40A6A0+92↓j
.text:0040A702                 mov     ebx, [esp+1Ch+var_C]
.text:0040A706                 mov     eax, 0FFFFFFFFh
.text:0040A70B                 mov     esi, [esp+1Ch+var_8]
.text:0040A70F                 mov     edi, [esp+1Ch+var_4]
.text:0040A713                 add     esp, 1Ch
.text:0040A716                 retn
.text:0040A717 ; ---------------------------------------------------------------------------
.text:0040A717
.text:0040A717 loc_40A717:                             ; CODE XREF: sub_40A6A0+21↑j
.text:0040A717                 mov     [esp+1Ch+var_18], edx
.text:0040A71B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040A722                 call    printf
.text:0040A727                 call    _errno
.text:0040A72C                 mov     dword ptr [eax], 9
.text:0040A732                 jmp     short loc_40A702
.text:0040A732 sub_40A6A0      endp
.text:0040A732
.text:0040A732 ; ---------------------------------------------------------------------------
.text:0040A734                 db 1Ch dup(90h)
.text:0040A750
.text:0040A750 ; =============== S U B R O U T I N E =======================================
.text:0040A750
.text:0040A750 ; Attributes: noreturn
.text:0040A750
.text:0040A750 sub_40A750      proc near               ; CODE XREF: .text:00409E59↑p
.text:0040A750                                         ; sub_40A750↓j
.text:0040A750                 jmp     short sub_40A750
.text:0040A750 sub_40A750      endp
.text:0040A750
.text:0040A750 ; ---------------------------------------------------------------------------
.text:0040A752                 align 10h
.text:0040A760
.text:0040A760 ; =============== S U B R O U T I N E =======================================
.text:0040A760
.text:0040A760
.text:0040A760 sub_40A760      proc near               ; CODE XREF: .text:00409BB5↑p
.text:0040A760
.text:0040A760 FileHandle      = dword ptr -1Ch
.text:0040A760 dwFileOffsetLow = dword ptr -18h
.text:0040A760 dwFileOffsetHigh= dword ptr -14h
.text:0040A760 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040A760 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040A760 var_8           = dword ptr -8
.text:0040A760 var_4           = dword ptr -4
.text:0040A760 arg_0           = dword ptr  4
.text:0040A760
.text:0040A760                 sub     esp, 1Ch
.text:0040A763                 mov     edx, [esp+1Ch+arg_0]
.text:0040A767                 mov     [esp+1Ch+var_4], esi
.text:0040A76B                 mov     [esp+1Ch+var_8], ebx
.text:0040A76F                 mov     ebx, [edx+10h]
.text:0040A772                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040A775                 call    _get_osfhandle
.text:0040A77A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040A77D                 mov     esi, eax
.text:0040A77F                 call    _filelengthi64
.text:0040A784                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040A788                 cdq
.text:0040A789                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040A78C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040A790                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040A798                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040A7A0                 call    UnlockFile
.text:0040A7A5                 sub     esp, 14h
.text:0040A7A8                 mov     ebx, [esp+1Ch+var_8]
.text:0040A7AC                 mov     esi, [esp+1Ch+var_4]
.text:0040A7B0                 add     esp, 1Ch
.text:0040A7B3                 retn
.text:0040A7B3 sub_40A760      endp
.text:0040A7B3
.text:0040A7B3 ; ---------------------------------------------------------------------------
.text:0040A7B4                 align 10h
.text:0040A7C0
.text:0040A7C0 ; =============== S U B R O U T I N E =======================================
.text:0040A7C0
.text:0040A7C0
.text:0040A7C0 ; int __cdecl sub_40A7C0(int, char *Control)
.text:0040A7C0 sub_40A7C0      proc near               ; CODE XREF: .text:00409A76↑p
.text:0040A7C0                                         ; .text:00409AC6↑p ...
.text:0040A7C0
.text:0040A7C0 Str             = dword ptr -1Ch
.text:0040A7C0 Val             = dword ptr -18h
.text:0040A7C0 var_8           = dword ptr -8
.text:0040A7C0 var_4           = dword ptr -4
.text:0040A7C0 arg_0           = dword ptr  4
.text:0040A7C0 Control         = dword ptr  8
.text:0040A7C0
.text:0040A7C0                 sub     esp, 1Ch
.text:0040A7C3                 xor     eax, eax
.text:0040A7C5                 mov     edx, [esp+1Ch+Control]
.text:0040A7C9                 mov     [esp+1Ch+var_4], esi
.text:0040A7CD                 mov     esi, [esp+1Ch+arg_0]
.text:0040A7D1                 mov     [esp+1Ch+var_8], ebx
.text:0040A7D5                 mov     ebx, [esi]
.text:0040A7D7                 test    ebx, ebx
.text:0040A7D9                 jz      short loc_40A808
.text:0040A7DB                 movzx   eax, byte ptr [edx]
.text:0040A7DE                 test    al, al
.text:0040A7E0                 jz      short loc_40A800
.text:0040A7E2                 cmp     byte ptr [edx+1], 0
.text:0040A7E6                 jnz     short loc_40A840
.text:0040A7E8                 movzx   ecx, byte ptr [ebx]
.text:0040A7EB                 mov     edx, ebx
.text:0040A7ED                 cmp     cl, al
.text:0040A7EF                 jz      short loc_40A832
.text:0040A7F1                 test    cl, cl
.text:0040A7F3                 jnz     short loc_40A814
.text:0040A7F5                 lea     esi, [esi+0]
.text:0040A7F9                 lea     edi, [edi+0]
.text:0040A800
.text:0040A800 loc_40A800:                             ; CODE XREF: sub_40A7C0+20↑j
.text:0040A800                                         ; sub_40A7C0+74↓j
.text:0040A800                 mov     dword ptr [esi], 0
.text:0040A806
.text:0040A806 loc_40A806:                             ; CODE XREF: sub_40A7C0+7C↓j
.text:0040A806                 mov     eax, ebx
.text:0040A808
.text:0040A808 loc_40A808:                             ; CODE XREF: sub_40A7C0+19↑j
.text:0040A808                 mov     ebx, [esp+1Ch+var_8]
.text:0040A80C                 mov     esi, [esp+1Ch+var_4]
.text:0040A810                 add     esp, 1Ch
.text:0040A813                 retn
.text:0040A814 ; ---------------------------------------------------------------------------
.text:0040A814
.text:0040A814 loc_40A814:                             ; CODE XREF: sub_40A7C0+33↑j
.text:0040A814                 movsx   edx, al
.text:0040A817                 mov     [esp+1Ch+Val], edx ; Val
.text:0040A81B                 lea     edx, [ebx+1]
.text:0040A81E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A821                 call    strchr
.text:0040A826                 lea     esi, [esi+0]
.text:0040A829                 lea     edi, [edi+0]
.text:0040A830
.text:0040A830 loc_40A830:                             ; CODE XREF: sub_40A7C0+8C↓j
.text:0040A830                 mov     edx, eax
.text:0040A832
.text:0040A832 loc_40A832:                             ; CODE XREF: sub_40A7C0+2F↑j
.text:0040A832                 test    edx, edx
.text:0040A834                 jz      short loc_40A800
.text:0040A836                 mov     byte ptr [edx], 0
.text:0040A839                 inc     edx
.text:0040A83A                 mov     [esi], edx
.text:0040A83C                 jmp     short loc_40A806
.text:0040A83C ; ---------------------------------------------------------------------------
.text:0040A83E                 align 10h
.text:0040A840
.text:0040A840 loc_40A840:                             ; CODE XREF: sub_40A7C0+26↑j
.text:0040A840                 mov     [esp+1Ch+Val], edx ; Control
.text:0040A844                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040A847                 call    strpbrk
.text:0040A84C                 jmp     short loc_40A830
.text:0040A84C sub_40A7C0      endp
.text:0040A84C
.text:0040A84C ; ---------------------------------------------------------------------------
.text:0040A84E                 align 10h
.text:0040A850 ; const char aTmpf[]
.text:0040A850 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40A860+20↓o
.text:0040A855 ; const char aWBd[]
.text:0040A855 aWBd            db 'w+bD',0             ; DATA XREF: sub_40A860+5E↓o
.text:0040A85A                 align 10h
.text:0040A860
.text:0040A860 ; =============== S U B R O U T I N E =======================================
.text:0040A860
.text:0040A860
.text:0040A860 sub_40A860      proc near               ; CODE XREF: sub_40A4EF+A4↑p
.text:0040A860
.text:0040A860 FileHandle      = dword ptr -13Ch
.text:0040A860 Format          = dword ptr -138h
.text:0040A860 var_134         = dword ptr -134h
.text:0040A860 var_130         = dword ptr -130h
.text:0040A860 var_12C         = dword ptr -12Ch
.text:0040A860 FileName        = byte ptr -11Ch
.text:0040A860 var_8           = dword ptr -8
.text:0040A860 var_4           = dword ptr -4
.text:0040A860
.text:0040A860                 sub     esp, 13Ch
.text:0040A866                 mov     [esp+13Ch+var_8], ebx
.text:0040A86D                 lea     ebx, [esp+13Ch+FileName]
.text:0040A871                 mov     [esp+13Ch+var_4], esi
.text:0040A878                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040A880                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040A888                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040A890                 mov     [esp+13Ch+Format], 104h ; int
.text:0040A898                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040A89B                 call    sub_40A930
.text:0040A8A0                 xor     edx, edx
.text:0040A8A2                 test    eax, eax
.text:0040A8A4                 jnz     short loc_40A8D6
.text:0040A8A6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040A8A9                 mov     [esp+13Ch+Format], 0 ; int
.text:0040A8B1                 call    sub_40ACB0
.text:0040A8B6                 xor     edx, edx
.text:0040A8B8                 mov     ebx, eax
.text:0040A8BA                 test    eax, eax
.text:0040A8BC                 js      short loc_40A8D6
.text:0040A8BE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040A8C6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040A8C9                 call    _fdopen
.text:0040A8CE                 test    eax, eax
.text:0040A8D0                 mov     esi, eax
.text:0040A8D2                 jz      short loc_40A8ED
.text:0040A8D4
.text:0040A8D4 loc_40A8D4:                             ; CODE XREF: sub_40A860+95↓j
.text:0040A8D4                 mov     edx, esi
.text:0040A8D6
.text:0040A8D6 loc_40A8D6:                             ; CODE XREF: sub_40A860+44↑j
.text:0040A8D6                                         ; sub_40A860+5C↑j
.text:0040A8D6                 mov     ebx, [esp+13Ch+var_8]
.text:0040A8DD                 mov     eax, edx
.text:0040A8DF                 mov     esi, [esp+13Ch+var_4]
.text:0040A8E6                 add     esp, 13Ch
.text:0040A8EC                 retn
.text:0040A8ED ; ---------------------------------------------------------------------------
.text:0040A8ED
.text:0040A8ED loc_40A8ED:                             ; CODE XREF: sub_40A860+72↑j
.text:0040A8ED                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040A8F0                 call    _close
.text:0040A8F5                 jmp     short loc_40A8D4
.text:0040A8F5 sub_40A860      endp
.text:0040A8F5
.text:0040A8F5 ; ---------------------------------------------------------------------------
.text:0040A8F7                 align 10h
.text:0040A900 aFile           db 'file',0             ; DATA XREF: sub_40A930:loc_40A95C↓o
.text:0040A905 ; const char aSSxxxxxx[]
.text:0040A905 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40A930+9B↓o
.text:0040A915 ; const char aTemp[]
.text:0040A915 aTemp           db 'TEMP',0             ; DATA XREF: sub_40A930:loc_40AA12↓o
.text:0040A915                                         ; sub_40A930:loc_40AA52↓o ...
.text:0040A91A ; const char aTmp[]
.text:0040A91A aTmp            db '/tmp',0             ; DATA XREF: sub_40A930+12F↓o
.text:0040A91A                                         ; sub_40A930+141↓o ...
.text:0040A91F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40A930:loc_40AAD0↓o
.text:0040A926 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40A930:loc_40AB60↓o
.text:0040A92A                 align 10h
.text:0040A930
.text:0040A930 ; =============== S U B R O U T I N E =======================================
.text:0040A930
.text:0040A930
.text:0040A930 ; int __cdecl sub_40A930(char *Buffer, int, char *, char *, int)
.text:0040A930 sub_40A930      proc near               ; CODE XREF: sub_40A860+3B↑p
.text:0040A930
.text:0040A930 Str             = dword ptr -1BCh
.text:0040A930 Format          = dword ptr -1B8h
.text:0040A930 var_1B4         = dword ptr -1B4h
.text:0040A930 var_1B0         = dword ptr -1B0h
.text:0040A930 var_1AC         = dword ptr -1ACh
.text:0040A930 var_1A8         = dword ptr -1A8h
.text:0040A930 var_19C         = dword ptr -19Ch
.text:0040A930 var_13C         = dword ptr -13Ch
.text:0040A930 var_DC          = dword ptr -0DCh
.text:0040A930 var_7C          = dword ptr -7Ch
.text:0040A930 Buffer          = dword ptr  4
.text:0040A930 arg_4           = dword ptr  8
.text:0040A930 arg_8           = dword ptr  0Ch
.text:0040A930 arg_C           = dword ptr  10h
.text:0040A930 arg_10          = dword ptr  14h
.text:0040A930
.text:0040A930                 push    ebp
.text:0040A931                 push    edi
.text:0040A932                 push    esi
.text:0040A933                 push    ebx
.text:0040A934                 sub     esp, 1ACh
.text:0040A93A                 mov     eax, [esp+1BCh+arg_C]
.text:0040A941                 mov     esi, [esp+1BCh+arg_8]
.text:0040A948                 test    eax, eax
.text:0040A94A                 jz      short loc_40A95C
.text:0040A94C                 mov     edx, [esp+1BCh+arg_C]
.text:0040A953                 cmp     byte ptr [edx], 0
.text:0040A956                 jnz     loc_40AB90
.text:0040A95C
.text:0040A95C loc_40A95C:                             ; CODE XREF: sub_40A930+1A↑j
.text:0040A95C                 mov     eax, offset aFile ; "file"
.text:0040A961                 mov     ebp, 4
.text:0040A966                 mov     [esp+1BCh+arg_C], eax
.text:0040A96D
.text:0040A96D loc_40A96D:                             ; CODE XREF: sub_40A930+274↓j
.text:0040A96D                                         ; sub_40A930+27F↓j
.text:0040A96D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040A974                 test    ebx, ebx
.text:0040A976                 jnz     loc_40AAD0
.text:0040A97C
.text:0040A97C loc_40A97C:                             ; CODE XREF: sub_40A930+21C↓j
.text:0040A97C                                         ; sub_40A930+224↓j ...
.text:0040A97C                 test    esi, esi
.text:0040A97E                 jz      loc_40AA12
.text:0040A984
.text:0040A984 loc_40A984:                             ; CODE XREF: sub_40A930+176↓j
.text:0040A984                                         ; sub_40A930+19A↓j
.text:0040A984                 mov     [esp+1BCh+Str], esi ; Str
.text:0040A987                 call    strlen
.text:0040A98C                 test    eax, eax
.text:0040A98E                 mov     edx, eax
.text:0040A990                 jz      short loc_40A9A0
.text:0040A992                 movzx   eax, byte ptr [eax+esi-1]
.text:0040A997                 cmp     al, 2Fh ; '/'
.text:0040A999                 jz      short loc_40AA00
.text:0040A99B                 cmp     al, 5Ch ; '\'
.text:0040A99D                 jz      short loc_40AA00
.text:0040A99F                 nop
.text:0040A9A0
.text:0040A9A0 loc_40A9A0:                             ; CODE XREF: sub_40A930+60↑j
.text:0040A9A0                                         ; sub_40A930+D1↓j ...
.text:0040A9A0                 lea     edi, [ebp+edx+8]
.text:0040A9A4                 cmp     [esp+1BCh+arg_4], edi
.text:0040A9AB                 jb      short loc_40A9E8
.text:0040A9AD                 mov     [esp+1BCh+var_1AC], ebp
.text:0040A9B1                 mov     ecx, [esp+1BCh+arg_C]
.text:0040A9B8                 mov     ebp, [esp+1BCh+Buffer]
.text:0040A9BF                 mov     [esp+1BCh+var_1B0], esi
.text:0040A9C3                 mov     [esp+1BCh+var_1A8], ecx
.text:0040A9C7                 mov     [esp+1BCh+var_1B4], edx
.text:0040A9CB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040A9D3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040A9D6                 call    sprintf
.text:0040A9DB                 xor     eax, eax
.text:0040A9DD
.text:0040A9DD loc_40A9DD:                             ; CODE XREF: sub_40A930+C8↓j
.text:0040A9DD                 add     esp, 1ACh
.text:0040A9E3                 pop     ebx
.text:0040A9E4                 pop     esi
.text:0040A9E5                 pop     edi
.text:0040A9E6                 pop     ebp
.text:0040A9E7                 retn
.text:0040A9E8 ; ---------------------------------------------------------------------------
.text:0040A9E8
.text:0040A9E8 loc_40A9E8:                             ; CODE XREF: sub_40A930+7B↑j
.text:0040A9E8                 call    _errno
.text:0040A9ED                 mov     dword ptr [eax], 16h
.text:0040A9F3
.text:0040A9F3 loc_40A9F3:                             ; CODE XREF: sub_40A930+187↓j
.text:0040A9F3                 mov     eax, 0FFFFFFFFh
.text:0040A9F8                 jmp     short loc_40A9DD
.text:0040A9F8 ; ---------------------------------------------------------------------------
.text:0040A9FA                 align 10h
.text:0040AA00
.text:0040AA00 loc_40AA00:                             ; CODE XREF: sub_40A930+69↑j
.text:0040AA00                                         ; sub_40A930+6D↑j ...
.text:0040AA00                 dec     edx
.text:0040AA01                 jz      short loc_40A9A0
.text:0040AA03                 movzx   eax, byte ptr [edx+esi-1]
.text:0040AA08                 cmp     al, 2Fh ; '/'
.text:0040AA0A                 jz      short loc_40AA00
.text:0040AA0C                 cmp     al, 5Ch ; '\'
.text:0040AA0E                 jz      short loc_40AA00
.text:0040AA10                 jmp     short loc_40A9A0
.text:0040AA12 ; ---------------------------------------------------------------------------
.text:0040AA12
.text:0040AA12 loc_40AA12:                             ; CODE XREF: sub_40A930+4E↑j
.text:0040AA12                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AA19                 lea     esi, [esp+1BCh+var_13C]
.text:0040AA20                 call    getenv
.text:0040AA25                 mov     [esp+1BCh+Format], eax ; char *
.text:0040AA29                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040AA2D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AA34                 call    sub_40B1E0
.text:0040AA39                 test    eax, eax
.text:0040AA3B                 jnz     short loc_40AA52
.text:0040AA3D                 mov     edi, [esp+1BCh+var_13C]
.text:0040AA44                 and     edi, 0F000h
.text:0040AA4A                 cmp     edi, 4000h
.text:0040AA50                 jz      short loc_40AABC
.text:0040AA52
.text:0040AA52 loc_40AA52:                             ; CODE XREF: sub_40A930+10B↑j
.text:0040AA52                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AA59                 call    getenv
.text:0040AA5E                 cld
.text:0040AA5F                 mov     edx, offset aTmp ; "/tmp"
.text:0040AA64                 mov     esi, eax
.text:0040AA66                 mov     ecx, 5
.text:0040AA6B                 mov     edi, edx
.text:0040AA6D                 repe cmpsb
.text:0040AA6F                 jz      short loc_40AAAC
.text:0040AA71                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040AA79                 lea     ecx, [esp+1BCh+var_19C]
.text:0040AA7D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040AA81                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AA88                 call    sub_40B1E0
.text:0040AA8D                 test    eax, eax
.text:0040AA8F                 jnz     short loc_40AAAC
.text:0040AA91                 mov     ebx, [esp+1BCh+var_19C]
.text:0040AA95                 mov     esi, offset aTmp ; "/tmp"
.text:0040AA9A                 and     ebx, 0F000h
.text:0040AAA0                 cmp     ebx, 4000h
.text:0040AAA6                 jz      loc_40A984
.text:0040AAAC
.text:0040AAAC loc_40AAAC:                             ; CODE XREF: sub_40A930+13F↑j
.text:0040AAAC                                         ; sub_40A930+15F↑j
.text:0040AAAC                 call    _errno
.text:0040AAB1                 mov     dword ptr [eax], 2
.text:0040AAB7                 jmp     loc_40A9F3
.text:0040AABC ; ---------------------------------------------------------------------------
.text:0040AABC
.text:0040AABC loc_40AABC:                             ; CODE XREF: sub_40A930+120↑j
.text:0040AABC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AAC3                 call    getenv
.text:0040AAC8                 mov     esi, eax
.text:0040AACA                 jmp     loc_40A984
.text:0040AACA ; ---------------------------------------------------------------------------
.text:0040AACF                 align 10h
.text:0040AAD0
.text:0040AAD0 loc_40AAD0:                             ; CODE XREF: sub_40A930+46↑j
.text:0040AAD0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040AAD7                 call    sub_40B1C0
.text:0040AADC                 test    eax, eax
.text:0040AADE                 mov     ebx, eax
.text:0040AAE0                 jz      short loc_40AB60
.text:0040AAE2
.text:0040AAE2 loc_40AAE2:                             ; CODE XREF: sub_40A930+240↓j
.text:0040AAE2                                         ; sub_40A930+256↓j
.text:0040AAE2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040AAE6                 lea     edi, [esp+1BCh+var_7C]
.text:0040AAED                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040AAF1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AAF8                 call    sub_40B1E0
.text:0040AAFD                 test    eax, eax
.text:0040AAFF                 jnz     short loc_40AB16
.text:0040AB01                 mov     edx, [esp+1BCh+var_7C]
.text:0040AB08                 and     edx, 0F000h
.text:0040AB0E                 cmp     edx, 4000h
.text:0040AB14                 jz      short loc_40AB59
.text:0040AB16
.text:0040AB16 loc_40AB16:                             ; CODE XREF: sub_40A930+1CF↑j
.text:0040AB16                                         ; sub_40A930+25C↓j
.text:0040AB16                 test    esi, esi
.text:0040AB18                 jz      short loc_40AB52
.text:0040AB1A                 mov     [esp+1BCh+Format], esi ; char *
.text:0040AB1E                 lea     ecx, [esp+1BCh+var_DC]
.text:0040AB25                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040AB29                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AB30                 call    sub_40B1E0
.text:0040AB35                 test    eax, eax
.text:0040AB37                 jnz     short loc_40AB52
.text:0040AB39                 mov     ebx, [esp+1BCh+var_DC]
.text:0040AB40                 and     ebx, 0F000h
.text:0040AB46                 cmp     ebx, 4000h
.text:0040AB4C                 jz      loc_40A97C
.text:0040AB52
.text:0040AB52 loc_40AB52:                             ; CODE XREF: sub_40A930+1E8↑j
.text:0040AB52                                         ; sub_40A930+207↑j
.text:0040AB52                 xor     esi, esi
.text:0040AB54                 jmp     loc_40A97C
.text:0040AB59 ; ---------------------------------------------------------------------------
.text:0040AB59
.text:0040AB59 loc_40AB59:                             ; CODE XREF: sub_40A930+1E4↑j
.text:0040AB59                 mov     esi, ebx
.text:0040AB5B                 jmp     loc_40A97C
.text:0040AB60 ; ---------------------------------------------------------------------------
.text:0040AB60
.text:0040AB60 loc_40AB60:                             ; CODE XREF: sub_40A930+1B0↑j
.text:0040AB60                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040AB67                 call    sub_40B1C0
.text:0040AB6C                 test    eax, eax
.text:0040AB6E                 mov     ebx, eax
.text:0040AB70                 jnz     loc_40AAE2
.text:0040AB76                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AB7D                 call    sub_40B1C0
.text:0040AB82                 test    eax, eax
.text:0040AB84                 mov     ebx, eax
.text:0040AB86                 jnz     loc_40AAE2
.text:0040AB8C                 jmp     short loc_40AB16
.text:0040AB8C ; ---------------------------------------------------------------------------
.text:0040AB8E                 align 10h
.text:0040AB90
.text:0040AB90 loc_40AB90:                             ; CODE XREF: sub_40A930+26↑j
.text:0040AB90                 mov     ecx, [esp+1BCh+arg_C]
.text:0040AB97                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040AB9A                 call    strlen
.text:0040AB9F                 cmp     eax, 5
.text:0040ABA2                 mov     ebp, eax
.text:0040ABA4                 jbe     loc_40A96D
.text:0040ABAA                 mov     ebp, 5
.text:0040ABAF                 jmp     loc_40A96D
.text:0040ABAF sub_40A930      endp
.text:0040ABAF
.text:0040ABAF ; ---------------------------------------------------------------------------
.text:0040ABB4                 align 10h
.text:0040ABC0 byte_40ABC0     db 61h                  ; DATA XREF: sub_40ACB0+DC↓r
.text:0040ABC0                                         ; sub_40ACB0+122↓r ...
.text:0040ABC1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040ABFF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40ACB0+39↓o
.text:0040AC06                 align 20h
.text:0040AC20 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040AC20                                         ; DATA XREF: sub_40ACB0:loc_40AF28↓o
.text:0040AC3F                 align 10h
.text:0040AC40 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040AC40                                         ; DATA XREF: sub_40ACB0+405↓o
.text:0040AC6B                 align 20h
.text:0040AC80 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040AC80                                         ; DATA XREF: sub_40ACB0+40D↓o
.text:0040ACA3                 align 10h
.text:0040ACB0
.text:0040ACB0 ; =============== S U B R O U T I N E =======================================
.text:0040ACB0
.text:0040ACB0
.text:0040ACB0 ; int __cdecl sub_40ACB0(char *FileName, int)
.text:0040ACB0 sub_40ACB0      proc near               ; CODE XREF: sub_40A860+51↑p
.text:0040ACB0
.text:0040ACB0 Str             = dword ptr -9Ch
.text:0040ACB0 OpenFlag        = dword ptr -98h
.text:0040ACB0 var_94          = dword ptr -94h
.text:0040ACB0 var_90          = dword ptr -90h
.text:0040ACB0 var_8C          = dword ptr -8Ch
.text:0040ACB0 var_88          = dword ptr -88h
.text:0040ACB0 var_84          = dword ptr -84h
.text:0040ACB0 var_80          = dword ptr -80h
.text:0040ACB0 var_7C          = dword ptr -7Ch
.text:0040ACB0 FileName        = dword ptr  4
.text:0040ACB0 arg_4           = dword ptr  8
.text:0040ACB0
.text:0040ACB0                 push    ebp
.text:0040ACB1                 push    edi
.text:0040ACB2                 push    esi
.text:0040ACB3                 push    ebx
.text:0040ACB4                 sub     esp, 8Ch
.text:0040ACBA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040ACC2                 call    _errno
.text:0040ACC7                 mov     edx, [eax]
.text:0040ACC9                 mov     [esp+9Ch+var_8C], edx
.text:0040ACCD                 mov     edx, [esp+9Ch+FileName]
.text:0040ACD4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040ACD7                 call    strlen
.text:0040ACDC                 cmp     eax, 5
.text:0040ACDF                 jle     short loc_40ACFD
.text:0040ACE1                 cld
.text:0040ACE2                 mov     ecx, [esp+9Ch+FileName]
.text:0040ACE9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040ACEE                 lea     esi, [eax+ecx-6]
.text:0040ACF2                 mov     ecx, 7
.text:0040ACF7                 mov     ebp, esi
.text:0040ACF9                 repe cmpsb
.text:0040ACFB                 jz      short loc_40AD18
.text:0040ACFD
.text:0040ACFD loc_40ACFD:                             ; CODE XREF: sub_40ACB0+2F↑j
.text:0040ACFD                 call    _errno
.text:0040AD02                 mov     dword ptr [eax], 16h
.text:0040AD08
.text:0040AD08 loc_40AD08:                             ; CODE XREF: sub_40ACB0+295↓j
.text:0040AD08                                         ; sub_40ACB0+2D8↓j ...
.text:0040AD08                 mov     eax, 0FFFFFFFFh
.text:0040AD0D
.text:0040AD0D loc_40AD0D:                             ; CODE XREF: sub_40ACB0+2EF↓j
.text:0040AD0D                                         ; sub_40ACB0+332↓j
.text:0040AD0D                 add     esp, 8Ch
.text:0040AD13                 pop     ebx
.text:0040AD14                 pop     esi
.text:0040AD15                 pop     edi
.text:0040AD16                 pop     ebp
.text:0040AD17                 retn
.text:0040AD18 ; ---------------------------------------------------------------------------
.text:0040AD18
.text:0040AD18 loc_40AD18:                             ; CODE XREF: sub_40ACB0+4B↑j
.text:0040AD18                 mov     ecx, ds:dword_40F4B4
.text:0040AD1E                 mov     edi, ds:dword_40F4B0
.text:0040AD24                 mov     eax, ecx
.text:0040AD26                 or      eax, edi
.text:0040AD28                 jz      loc_40B063
.text:0040AD2E
.text:0040AD2E loc_40AD2E:                             ; CODE XREF: sub_40ACB0+3F8↓j
.text:0040AD2E                 rdtsc
.text:0040AD30                 mov     edi, edx
.text:0040AD32                 mov     esi, eax
.text:0040AD34                 call    _getpid
.text:0040AD39                 mov     ebx, eax
.text:0040AD3B                 mov     edx, esi
.text:0040AD3D                 sar     ebx, 1Fh
.text:0040AD40                 xor     edx, eax
.text:0040AD42                 mov     ecx, edi
.text:0040AD44                 xor     ecx, ebx
.text:0040AD46                 mov     ebx, edx
.text:0040AD48                 mov     esi, ecx
.text:0040AD4A                 add     ebx, ds:dword_40F4B0
.text:0040AD50                 adc     esi, ds:dword_40F4B4
.text:0040AD56                 xor     edi, edi
.text:0040AD58                 mov     ds:dword_40F4B0, ebx
.text:0040AD5E                 mov     ds:dword_40F4B4, esi
.text:0040AD64                 lea     esi, [esi+0]
.text:0040AD6A                 lea     edi, [edi+0]
.text:0040AD70
.text:0040AD70 loc_40AD70:                             ; CODE XREF: sub_40ACB0+2C7↓j
.text:0040AD70                 mov     [esp+9Ch+Str], ebx
.text:0040AD73                 mov     [esp+9Ch+OpenFlag], esi
.text:0040AD77                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040AD7F                 mov     [esp+9Ch+var_90], 0
.text:0040AD87                 call    sub_40CB60
.text:0040AD8C                 movzx   ecx, ds:byte_40ABC0[eax]
.text:0040AD93                 mov     [ebp+0], cl
.text:0040AD96                 mov     [esp+9Ch+Str], ebx
.text:0040AD99                 mov     [esp+9Ch+OpenFlag], esi
.text:0040AD9D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040ADA5                 mov     [esp+9Ch+var_90], 0
.text:0040ADAD                 call    sub_40CA40
.text:0040ADB2                 mov     [esp+9Ch+Str], eax
.text:0040ADB5                 mov     ebx, eax
.text:0040ADB7                 mov     esi, edx
.text:0040ADB9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040ADC1                 mov     [esp+9Ch+var_90], 0
.text:0040ADC9                 mov     [esp+9Ch+OpenFlag], edx
.text:0040ADCD                 call    sub_40CB60
.text:0040ADD2                 movzx   edx, ds:byte_40ABC0[eax]
.text:0040ADD9                 mov     [ebp+1], dl
.text:0040ADDC                 mov     [esp+9Ch+Str], ebx
.text:0040ADDF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040ADE3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040ADEB                 mov     [esp+9Ch+var_90], 0
.text:0040ADF3                 call    sub_40CA40
.text:0040ADF8                 mov     [esp+9Ch+Str], eax
.text:0040ADFB                 mov     ebx, eax
.text:0040ADFD                 mov     esi, edx
.text:0040ADFF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040AE07                 mov     [esp+9Ch+var_90], 0
.text:0040AE0F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040AE13                 call    sub_40CB60
.text:0040AE18                 movzx   ecx, ds:byte_40ABC0[eax]
.text:0040AE1F                 mov     [ebp+2], cl
.text:0040AE22                 mov     [esp+9Ch+Str], ebx
.text:0040AE25                 mov     [esp+9Ch+OpenFlag], esi
.text:0040AE29                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040AE31                 mov     [esp+9Ch+var_90], 0
.text:0040AE39                 call    sub_40CA40
.text:0040AE3E                 mov     [esp+9Ch+Str], eax
.text:0040AE41                 mov     ebx, eax
.text:0040AE43                 mov     esi, edx
.text:0040AE45                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040AE4D                 mov     [esp+9Ch+var_90], 0
.text:0040AE55                 mov     [esp+9Ch+OpenFlag], edx
.text:0040AE59                 call    sub_40CB60
.text:0040AE5E                 movzx   edx, ds:byte_40ABC0[eax]
.text:0040AE65                 mov     [ebp+3], dl
.text:0040AE68                 mov     [esp+9Ch+Str], ebx
.text:0040AE6B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040AE6F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040AE77                 mov     [esp+9Ch+var_90], 0
.text:0040AE7F                 call    sub_40CA40
.text:0040AE84                 mov     [esp+9Ch+Str], eax
.text:0040AE87                 mov     ebx, eax
.text:0040AE89                 mov     esi, edx
.text:0040AE8B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040AE93                 mov     [esp+9Ch+var_90], 0
.text:0040AE9B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040AE9F                 call    sub_40CB60
.text:0040AEA4                 movzx   ecx, ds:byte_40ABC0[eax]
.text:0040AEAB                 mov     [ebp+4], cl
.text:0040AEAE                 mov     [esp+9Ch+Str], ebx
.text:0040AEB1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040AEB9                 mov     [esp+9Ch+var_90], 0
.text:0040AEC1                 mov     [esp+9Ch+OpenFlag], esi
.text:0040AEC5                 call    sub_40CA40
.text:0040AECA                 mov     [esp+9Ch+Str], eax
.text:0040AECD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040AED5                 mov     [esp+9Ch+var_90], 0
.text:0040AEDD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040AEE1                 call    sub_40CB60
.text:0040AEE6                 movzx   ebx, ds:byte_40ABC0[eax]
.text:0040AEED                 mov     [ebp+5], bl
.text:0040AEF0                 cmp     [esp+9Ch+arg_4], 1
.text:0040AEF8                 jz      loc_40B047
.text:0040AEFE                 cmp     [esp+9Ch+arg_4], 1
.text:0040AF06                 jle     loc_40B010
.text:0040AF0C                 cmp     [esp+9Ch+arg_4], 2
.text:0040AF14                 jz      loc_40AFE7
.text:0040AF1A                 cmp     [esp+9Ch+arg_4], 3
.text:0040AF22                 jz      loc_40AFA4
.text:0040AF28
.text:0040AF28 loc_40AF28:                             ; CODE XREF: sub_40ACB0+369↓j
.text:0040AF28                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040AF2D                 test    ebx, ebx
.text:0040AF2F                 jnz     loc_40B0AD
.text:0040AF35
.text:0040AF35 loc_40AF35:                             ; CODE XREF: sub_40ACB0+354↓j
.text:0040AF35                 mov     eax, [esp+9Ch+var_88]
.text:0040AF39                 test    eax, eax
.text:0040AF3B                 jns     short loc_40AF90
.text:0040AF3D                 call    _errno
.text:0040AF42                 cmp     dword ptr [eax], 11h
.text:0040AF45                 jnz     loc_40AD08
.text:0040AF4B
.text:0040AF4B loc_40AF4B:                             ; CODE XREF: sub_40ACB0+315↓j
.text:0040AF4B                 mov     edx, ds:dword_40F4B0
.text:0040AF51                 mov     ecx, ds:dword_40F4B4
.text:0040AF57                 add     edx, 1E61h
.text:0040AF5D                 adc     ecx, 0
.text:0040AF60                 mov     ebx, edx
.text:0040AF62                 inc     edi
.text:0040AF63                 mov     ds:dword_40F4B0, edx
.text:0040AF69                 cmp     edi, 3A2F8h
.text:0040AF6F                 mov     esi, ecx
.text:0040AF71                 mov     ds:dword_40F4B4, ecx
.text:0040AF77                 jb      loc_40AD70
.text:0040AF7D                 call    _errno
.text:0040AF82                 mov     dword ptr [eax], 11h
.text:0040AF88                 jmp     loc_40AD08
.text:0040AF88 ; ---------------------------------------------------------------------------
.text:0040AF8D                 align 10h
.text:0040AF90
.text:0040AF90 loc_40AF90:                             ; CODE XREF: sub_40ACB0+28B↑j
.text:0040AF90                 call    _errno
.text:0040AF95                 mov     esi, [esp+9Ch+var_8C]
.text:0040AF99                 mov     [eax], esi
.text:0040AF9B                 mov     eax, [esp+9Ch+var_88]
.text:0040AF9F                 jmp     loc_40AD0D
.text:0040AFA4 ; ---------------------------------------------------------------------------
.text:0040AFA4
.text:0040AFA4 loc_40AFA4:                             ; CODE XREF: sub_40ACB0+272↑j
.text:0040AFA4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040AFAB                 mov     ecx, [esp+9Ch+FileName]
.text:0040AFB2                 lea     esi, [esp+9Ch+var_7C]
.text:0040AFB6                 mov     [esp+9Ch+var_94], esi ; int
.text:0040AFBA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040AFBE                 call    sub_405610
.text:0040AFC3                 test    eax, eax
.text:0040AFC5                 jns     short loc_40AF4B
.text:0040AFC7                 call    _errno
.text:0040AFCC                 cmp     dword ptr [eax], 2
.text:0040AFCF                 jnz     loc_40AD08
.text:0040AFD5                 call    _errno
.text:0040AFDA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040AFDE                 mov     [eax], ebx
.text:0040AFE0                 xor     eax, eax
.text:0040AFE2                 jmp     loc_40AD0D
.text:0040AFE7 ; ---------------------------------------------------------------------------
.text:0040AFE7
.text:0040AFE7 loc_40AFE7:                             ; CODE XREF: sub_40ACB0+264↑j
.text:0040AFE7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040AFEF                 mov     edx, [esp+9Ch+FileName]
.text:0040AFF6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040AFF9                 call    sub_40B0E0
.text:0040AFFE                 mov     esi, esi
.text:0040B000
.text:0040B000 loc_40B000:                             ; CODE XREF: sub_40ACB0+395↓j
.text:0040B000                 mov     [esp+9Ch+var_88], eax
.text:0040B004                 jmp     loc_40AF35
.text:0040B004 ; ---------------------------------------------------------------------------
.text:0040B009                 align 10h
.text:0040B010
.text:0040B010 loc_40B010:                             ; CODE XREF: sub_40ACB0+256↑j
.text:0040B010                 mov     eax, [esp+9Ch+arg_4]
.text:0040B017                 test    eax, eax
.text:0040B019                 jnz     loc_40AF28
.text:0040B01F                 mov     [esp+9Ch+var_94], 180h
.text:0040B027                 mov     esi, [esp+9Ch+FileName]
.text:0040B02E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040B036                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040B039                 lea     esi, [esi+0]
.text:0040B040
.text:0040B040 loc_40B040:                             ; CODE XREF: sub_40ACB0+3B1↓j
.text:0040B040                 call    _open
.text:0040B045                 jmp     short loc_40B000
.text:0040B047 ; ---------------------------------------------------------------------------
.text:0040B047
.text:0040B047 loc_40B047:                             ; CODE XREF: sub_40ACB0+248↑j
.text:0040B047                 mov     [esp+9Ch+var_94], 180h
.text:0040B04F                 mov     ebx, [esp+9Ch+FileName]
.text:0040B056                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040B05E                 mov     [esp+9Ch+Str], ebx
.text:0040B061                 jmp     short loc_40B040
.text:0040B063 ; ---------------------------------------------------------------------------
.text:0040B063
.text:0040B063 loc_40B063:                             ; CODE XREF: sub_40ACB0+78↑j
.text:0040B063                 mov     [esp+9Ch+OpenFlag], 0
.text:0040B06B                 lea     ebx, [esp+9Ch+var_84]
.text:0040B06F                 mov     [esp+9Ch+Str], ebx
.text:0040B072                 call    sub_40B160
.text:0040B077                 mov     edi, [esp+9Ch+var_80]
.text:0040B07B                 mov     edx, [esp+9Ch+var_84]
.text:0040B07F                 mov     ecx, edi
.text:0040B081                 mov     ebx, edi
.text:0040B083                 shl     ecx, 10h
.text:0040B086                 sar     ebx, 1Fh
.text:0040B089                 shld    ebx, edi, 10h
.text:0040B08D                 mov     esi, edx
.text:0040B08F                 mov     edi, edx
.text:0040B091                 mov     edx, ecx
.text:0040B093                 sar     edi, 1Fh
.text:0040B096                 xor     edx, esi
.text:0040B098                 mov     ds:dword_40F4B0, edx
.text:0040B09E                 mov     esi, ebx
.text:0040B0A0                 xor     esi, edi
.text:0040B0A2                 mov     ds:dword_40F4B4, esi
.text:0040B0A8                 jmp     loc_40AD2E
.text:0040B0AD ; ---------------------------------------------------------------------------
.text:0040B0AD
.text:0040B0AD loc_40B0AD:                             ; CODE XREF: sub_40ACB0+27F↑j
.text:0040B0AD                 mov     [esp+9Ch+var_94], 151h
.text:0040B0B5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040B0BD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040B0C4                 call    _assert
.text:0040B0C4 sub_40ACB0      endp
.text:0040B0C4
.text:0040B0C4 ; ---------------------------------------------------------------------------
.text:0040B0C9                 align 20h
.text:0040B0E0
.text:0040B0E0 ; =============== S U B R O U T I N E =======================================
.text:0040B0E0
.text:0040B0E0
.text:0040B0E0 ; int __cdecl sub_40B0E0(LPCSTR, int AccessMode)
.text:0040B0E0 sub_40B0E0      proc near               ; CODE XREF: sub_40ACB0+349↑p
.text:0040B0E0
.text:0040B0E0 lpPathName      = dword ptr -1Ch
.text:0040B0E0 lpSecurityAttributes= dword ptr -18h
.text:0040B0E0 var_8           = dword ptr -8
.text:0040B0E0 var_4           = dword ptr -4
.text:0040B0E0 arg_0           = dword ptr  4
.text:0040B0E0 AccessMode      = dword ptr  8
.text:0040B0E0
.text:0040B0E0                 sub     esp, 1Ch
.text:0040B0E3                 mov     [esp+1Ch+var_8], ebx
.text:0040B0E7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B0EB                 mov     [esp+1Ch+var_4], esi
.text:0040B0EF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040B0F3                 test    ebx, ebx
.text:0040B0F5                 jz      short loc_40B145
.text:0040B0F7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040B0FF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040B102                 call    CreateDirectoryA
.text:0040B107                 sub     esp, 8
.text:0040B10A                 test    eax, eax
.text:0040B10C                 jz      short loc_40B126
.text:0040B10E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040B112                 mov     esi, [esp+1Ch+var_4]
.text:0040B116                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040B11A                 mov     ebx, [esp+1Ch+var_8]
.text:0040B11E                 add     esp, 1Ch
.text:0040B121                 jmp     _chmod
.text:0040B126 ; ---------------------------------------------------------------------------
.text:0040B126
.text:0040B126 loc_40B126:                             ; CODE XREF: sub_40B0E0+2C↑j
.text:0040B126                 call    sub_407F00
.text:0040B12B                 mov     esi, eax
.text:0040B12D                 call    _errno
.text:0040B132                 mov     [eax], esi
.text:0040B134
.text:0040B134 loc_40B134:                             ; CODE XREF: sub_40B0E0+70↓j
.text:0040B134                 mov     ebx, [esp+1Ch+var_8]
.text:0040B138                 mov     eax, 0FFFFFFFFh
.text:0040B13D                 mov     esi, [esp+1Ch+var_4]
.text:0040B141                 add     esp, 1Ch
.text:0040B144                 retn
.text:0040B145 ; ---------------------------------------------------------------------------
.text:0040B145
.text:0040B145 loc_40B145:                             ; CODE XREF: sub_40B0E0+15↑j
.text:0040B145                 call    _errno
.text:0040B14A                 mov     dword ptr [eax], 16h
.text:0040B150                 jmp     short loc_40B134
.text:0040B150 sub_40B0E0      endp
.text:0040B150
.text:0040B150 ; ---------------------------------------------------------------------------
.text:0040B152                 align 10h
.text:0040B160
.text:0040B160 ; =============== S U B R O U T I N E =======================================
.text:0040B160
.text:0040B160
.text:0040B160 sub_40B160      proc near               ; CODE XREF: sub_40ACB0+3C2↑p
.text:0040B160
.text:0040B160 var_1C          = dword ptr -1Ch
.text:0040B160 var_18          = dword ptr -18h
.text:0040B160 var_C           = dword ptr -0Ch
.text:0040B160 var_8           = dword ptr -8
.text:0040B160 var_4           = dword ptr -4
.text:0040B160 arg_0           = dword ptr  4
.text:0040B160 arg_4           = dword ptr  8
.text:0040B160
.text:0040B160                 sub     esp, 1Ch
.text:0040B163                 mov     edx, [esp+1Ch+arg_4]
.text:0040B167                 mov     [esp+1Ch+var_4], ebx
.text:0040B16B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B16F                 mov     [esp+1Ch+var_18], edx
.text:0040B173                 lea     edx, [esp+1Ch+var_C]
.text:0040B177                 mov     [esp+1Ch+var_1C], edx
.text:0040B17A                 call    sub_40B2A0
.text:0040B17F                 test    eax, eax
.text:0040B181                 mov     edx, 0FFFFFFFFh
.text:0040B186                 jnz     short loc_40B1AA
.text:0040B188                 mov     ecx, [esp+1Ch+var_C]
.text:0040B18C                 mov     edx, 10624DD3h
.text:0040B191                 mov     [ebx], ecx
.text:0040B193                 mov     ecx, [esp+1Ch+var_8]
.text:0040B197                 mov     eax, ecx
.text:0040B199                 imul    edx
.text:0040B19B                 mov     eax, ecx
.text:0040B19D                 sar     eax, 1Fh
.text:0040B1A0                 sar     edx, 6
.text:0040B1A3                 sub     edx, eax
.text:0040B1A5                 mov     [ebx+4], edx
.text:0040B1A8                 xor     edx, edx
.text:0040B1AA
.text:0040B1AA loc_40B1AA:                             ; CODE XREF: sub_40B160+26↑j
.text:0040B1AA                 mov     ebx, [esp+1Ch+var_4]
.text:0040B1AE                 mov     eax, edx
.text:0040B1B0                 add     esp, 1Ch
.text:0040B1B3                 retn
.text:0040B1B3 sub_40B160      endp
.text:0040B1B3
.text:0040B1B3 ; ---------------------------------------------------------------------------
.text:0040B1B4                 align 10h
.text:0040B1C0
.text:0040B1C0 ; =============== S U B R O U T I N E =======================================
.text:0040B1C0
.text:0040B1C0
.text:0040B1C0 sub_40B1C0      proc near               ; CODE XREF: sub_40A930+1A7↑p
.text:0040B1C0                                         ; sub_40A930+237↑p ...
.text:0040B1C0                 mov     edx, ds:dword_40F4C0
.text:0040B1C6                 test    edx, edx
.text:0040B1C8                 jnz     short loc_40B1D0
.text:0040B1CA                 jmp     getenv
.text:0040B1CA ; ---------------------------------------------------------------------------
.text:0040B1CF                 align 10h
.text:0040B1D0
.text:0040B1D0 loc_40B1D0:                             ; CODE XREF: sub_40B1C0+8↑j
.text:0040B1D0                 xor     eax, eax
.text:0040B1D2                 retn
.text:0040B1D2 sub_40B1C0      endp
.text:0040B1D2
.text:0040B1D2 ; ---------------------------------------------------------------------------
.text:0040B1D3                 align 10h
.text:0040B1E0
.text:0040B1E0 ; =============== S U B R O U T I N E =======================================
.text:0040B1E0
.text:0040B1E0
.text:0040B1E0 ; int __cdecl sub_40B1E0(LPCSTR, char *, int)
.text:0040B1E0 sub_40B1E0      proc near               ; CODE XREF: sub_40A930+104↑p
.text:0040B1E0                                         ; sub_40A930+158↑p ...
.text:0040B1E0
.text:0040B1E0 var_13C         = dword ptr -13Ch
.text:0040B1E0 lpString1       = dword ptr -138h
.text:0040B1E0 var_134         = dword ptr -134h
.text:0040B1E0 String1         = byte ptr -12Ch
.text:0040B1E0 var_10          = dword ptr -10h
.text:0040B1E0 var_C           = dword ptr -0Ch
.text:0040B1E0 var_8           = dword ptr -8
.text:0040B1E0 var_4           = dword ptr -4
.text:0040B1E0 arg_0           = dword ptr  4
.text:0040B1E0 arg_4           = dword ptr  8
.text:0040B1E0 arg_8           = dword ptr  0Ch
.text:0040B1E0
.text:0040B1E0                 sub     esp, 13Ch
.text:0040B1E6                 mov     [esp+13Ch+var_10], ebx
.text:0040B1ED                 mov     ebx, [esp+13Ch+arg_8]
.text:0040B1F4                 mov     [esp+13Ch+var_C], esi
.text:0040B1FB                 mov     esi, [esp+13Ch+arg_4]
.text:0040B202                 mov     [esp+13Ch+var_8], edi
.text:0040B209                 mov     edi, [esp+13Ch+arg_0]
.text:0040B210                 mov     [esp+13Ch+var_4], ebp
.text:0040B217                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040B21B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040B21F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040B222                 call    sub_405610
.text:0040B227                 cmp     eax, 0FFFFFFFFh
.text:0040B22A                 mov     edx, eax
.text:0040B22C                 jz      short loc_40B23E
.text:0040B22E                 mov     ecx, [ebx]
.text:0040B230                 and     ecx, 0F000h
.text:0040B236                 cmp     ecx, 0A000h
.text:0040B23C                 jz      short loc_40B263
.text:0040B23E
.text:0040B23E loc_40B23E:                             ; CODE XREF: sub_40B1E0+4C↑j
.text:0040B23E                                         ; sub_40B1E0+A1↓j ...
.text:0040B23E                 mov     ebx, [esp+13Ch+var_10]
.text:0040B245                 mov     eax, edx
.text:0040B247                 mov     esi, [esp+13Ch+var_C]
.text:0040B24E                 mov     edi, [esp+13Ch+var_8]
.text:0040B255                 mov     ebp, [esp+13Ch+var_4]
.text:0040B25C                 add     esp, 13Ch
.text:0040B262                 retn
.text:0040B263 ; ---------------------------------------------------------------------------
.text:0040B263
.text:0040B263 loc_40B263:                             ; CODE XREF: sub_40B1E0+5C↑j
.text:0040B263                 mov     [esp+13Ch+var_134], 104h
.text:0040B26B                 lea     ebp, [esp+13Ch+String1]
.text:0040B26F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040B273                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040B276                 call    sub_4057E0
.text:0040B27B                 inc     eax
.text:0040B27C                 mov     edx, 0FFFFFFFFh
.text:0040B281                 jz      short loc_40B23E
.text:0040B283                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040B287                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040B28B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040B28E                 call    sub_405610
.text:0040B293                 mov     edx, eax
.text:0040B295                 jmp     short loc_40B23E
.text:0040B295 sub_40B1E0      endp
.text:0040B295
.text:0040B295 ; ---------------------------------------------------------------------------
.text:0040B297                 align 10h
.text:0040B2A0
.text:0040B2A0 ; =============== S U B R O U T I N E =======================================
.text:0040B2A0
.text:0040B2A0
.text:0040B2A0 sub_40B2A0      proc near               ; CODE XREF: sub_40B160+1A↑p
.text:0040B2A0
.text:0040B2A0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040B2A0 var_D8          = dword ptr -0D8h
.text:0040B2A0 var_D4          = dword ptr -0D4h
.text:0040B2A0 var_D0          = dword ptr -0D0h
.text:0040B2A0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040B2A0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040B2A0 arg_0           = dword ptr  4
.text:0040B2A0 arg_4           = dword ptr  8
.text:0040B2A0
.text:0040B2A0                 push    edi
.text:0040B2A1                 push    esi
.text:0040B2A2                 push    ebx
.text:0040B2A3                 sub     esp, 0D0h
.text:0040B2A9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040B2B0                 mov     edi, [esp+0DCh+arg_0]
.text:0040B2B7                 test    ebx, ebx
.text:0040B2B9                 jz      short loc_40B2E4
.text:0040B2BB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040B2BF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040B2C2                 call    GetTimeZoneInformation
.text:0040B2C7                 sub     esp, 4
.text:0040B2CA                 cmp     eax, 0FFFFFFFFh
.text:0040B2CD                 jz      loc_40B365
.text:0040B2D3                 xor     ecx, ecx
.text:0040B2D5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040B2D9                 cmp     eax, 2
.text:0040B2DC                 setz    cl
.text:0040B2DF                 mov     [ebx], esi
.text:0040B2E1                 mov     [ebx+4], ecx
.text:0040B2E4
.text:0040B2E4 loc_40B2E4:                             ; CODE XREF: sub_40B2A0+19↑j
.text:0040B2E4                                         ; sub_40B2A0+E0↓j
.text:0040B2E4                 test    edi, edi
.text:0040B2E6                 jz      short loc_40B359
.text:0040B2E8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040B2EC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040B2EF                 call    GetSystemTimeAsFileTime
.text:0040B2F4                 sub     esp, 4
.text:0040B2F7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040B2FB                 mov     [esp+0DCh+var_D4], 989680h
.text:0040B303                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040B307                 mov     [esp+0DCh+var_D0], 0
.text:0040B30F                 add     ebx, 2AC18000h
.text:0040B315                 adc     esi, 0FE624E21h
.text:0040B31B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040B31F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040B322                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040B326                 mov     [esp+0DCh+var_D8], esi
.text:0040B32A                 call    sub_40CA40
.text:0040B32F                 mov     [edi], eax
.text:0040B331                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040B334                 mov     [esp+0DCh+var_D4], 989680h
.text:0040B33C                 mov     [esp+0DCh+var_D0], 0
.text:0040B344                 mov     [esp+0DCh+var_D8], esi
.text:0040B348                 call    sub_40CB60
.text:0040B34D                 lea     ebx, [eax+eax*4]
.text:0040B350                 lea     edx, [ebx+ebx*4]
.text:0040B353                 shl     edx, 2
.text:0040B356                 mov     [edi+4], edx
.text:0040B359
.text:0040B359 loc_40B359:                             ; CODE XREF: sub_40B2A0+46↑j
.text:0040B359                 add     esp, 0D0h
.text:0040B35F                 xor     eax, eax
.text:0040B361                 pop     ebx
.text:0040B362                 pop     esi
.text:0040B363                 pop     edi
.text:0040B364                 retn
.text:0040B365 ; ---------------------------------------------------------------------------
.text:0040B365
.text:0040B365 loc_40B365:                             ; CODE XREF: sub_40B2A0+2D↑j
.text:0040B365                 mov     dword ptr [ebx], 0
.text:0040B36B                 mov     dword ptr [ebx+4], 0
.text:0040B372                 call    sub_407F00
.text:0040B377                 mov     esi, eax
.text:0040B379                 call    _errno
.text:0040B37E                 mov     [eax], esi
.text:0040B380                 jmp     loc_40B2E4
.text:0040B380 sub_40B2A0      endp
.text:0040B380
.text:0040B380 ; ---------------------------------------------------------------------------
.text:0040B385                 align 10h
.text:0040B390                 sub     esp, 0Ch
.text:0040B393                 mov     [esp+4], ebx
.text:0040B397                 mov     [esp+8], esi
.text:0040B39B                 xor     esi, esi
.text:0040B39D                 call    sub_40B410
.text:0040B3A2                 mov     ebx, eax
.text:0040B3A4                 call    sub_40B400
.text:0040B3A9                 cmp     ebx, eax
.text:0040B3AB                 jz      short loc_40B3C4
.text:0040B3AD
.text:0040B3AD loc_40B3AD:                             ; CODE XREF: .text:0040B3D2↓j
.text:0040B3AD                 mov     esi, 1
.text:0040B3B2
.text:0040B3B2 loc_40B3B2:                             ; CODE XREF: .text:0040B3D4↓j
.text:0040B3B2                 mov     ds:dword_40F4C0, esi
.text:0040B3B8                 mov     ebx, [esp+4]
.text:0040B3BC                 mov     esi, [esp+8]
.text:0040B3C0                 add     esp, 0Ch
.text:0040B3C3                 retn
.text:0040B3C4 ; ---------------------------------------------------------------------------
.text:0040B3C4
.text:0040B3C4 loc_40B3C4:                             ; CODE XREF: .text:0040B3AB↑j
.text:0040B3C4                 call    sub_40B3F0
.text:0040B3C9                 mov     ebx, eax
.text:0040B3CB                 call    sub_40B3E0
.text:0040B3D0                 cmp     ebx, eax
.text:0040B3D2                 jnz     short loc_40B3AD
.text:0040B3D4                 jmp     short loc_40B3B2
.text:0040B3D4 ; ---------------------------------------------------------------------------
.text:0040B3D6                 align 10h
.text:0040B3E0
.text:0040B3E0 ; =============== S U B R O U T I N E =======================================
.text:0040B3E0
.text:0040B3E0
.text:0040B3E0 sub_40B3E0      proc near               ; CODE XREF: .text:0040B3CB↑p
.text:0040B3E0                 xor     eax, eax
.text:0040B3E2                 retn
.text:0040B3E2 sub_40B3E0      endp
.text:0040B3E2
.text:0040B3E2 ; ---------------------------------------------------------------------------
.text:0040B3E3                 align 10h
.text:0040B3F0
.text:0040B3F0 ; =============== S U B R O U T I N E =======================================
.text:0040B3F0
.text:0040B3F0
.text:0040B3F0 sub_40B3F0      proc near               ; CODE XREF: .text:loc_40B3C4↑p
.text:0040B3F0                 xor     eax, eax
.text:0040B3F2                 retn
.text:0040B3F2 sub_40B3F0      endp
.text:0040B3F2
.text:0040B3F2 ; ---------------------------------------------------------------------------
.text:0040B3F3                 align 10h
.text:0040B400
.text:0040B400 ; =============== S U B R O U T I N E =======================================
.text:0040B400
.text:0040B400
.text:0040B400 sub_40B400      proc near               ; CODE XREF: .text:0040B3A4↑p
.text:0040B400                 xor     eax, eax
.text:0040B402                 retn
.text:0040B402 sub_40B400      endp
.text:0040B402
.text:0040B402 ; ---------------------------------------------------------------------------
.text:0040B403                 align 10h
.text:0040B410
.text:0040B410 ; =============== S U B R O U T I N E =======================================
.text:0040B410
.text:0040B410
.text:0040B410 sub_40B410      proc near               ; CODE XREF: .text:0040B39D↑p
.text:0040B410                 xor     eax, eax
.text:0040B412                 retn
.text:0040B412 sub_40B410      endp
.text:0040B412
.text:0040B412 ; ---------------------------------------------------------------------------
.text:0040B413                 align 10h
.text:0040B420
.text:0040B420 ; =============== S U B R O U T I N E =======================================
.text:0040B420
.text:0040B420 ; Attributes: thunk
.text:0040B420
.text:0040B420 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040B420 OleInitialize   proc near               ; CODE XREF: sub_405660+1A↑p
.text:0040B420
.text:0040B420 pvReserved      = dword ptr  4
.text:0040B420
.text:0040B420                 jmp     ds:__imp_OleInitialize
.text:0040B420 OleInitialize   endp
.text:0040B420
.text:0040B420 ; ---------------------------------------------------------------------------
.text:0040B426                 align 10h
.text:0040B430
.text:0040B430 ; =============== S U B R O U T I N E =======================================
.text:0040B430
.text:0040B430 ; Attributes: thunk
.text:0040B430
.text:0040B430 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040B430 CoCreateInstance proc near              ; CODE XREF: sub_405660+52↑p
.text:0040B430
.text:0040B430 rclsid          = dword ptr  4
.text:0040B430 pUnkOuter       = dword ptr  8
.text:0040B430 dwClsContext    = dword ptr  0Ch
.text:0040B430 riid            = dword ptr  10h
.text:0040B430 ppv             = dword ptr  14h
.text:0040B430
.text:0040B430                 jmp     ds:__imp_CoCreateInstance
.text:0040B430 CoCreateInstance endp
.text:0040B430
.text:0040B430 ; ---------------------------------------------------------------------------
.text:0040B436                 align 10h
.text:0040B440
.text:0040B440 ; =============== S U B R O U T I N E =======================================
.text:0040B440
.text:0040B440 ; Attributes: thunk
.text:0040B440
.text:0040B440 ; void __stdcall CoUninitialize()
.text:0040B440 CoUninitialize  proc near               ; CODE XREF: sub_405660+14E↑p
.text:0040B440                                         ; sub_405660+16D↑p
.text:0040B440                 jmp     ds:__imp_CoUninitialize
.text:0040B440 CoUninitialize  endp
.text:0040B440
.text:0040B440 ; ---------------------------------------------------------------------------
.text:0040B446                 align 10h
.text:0040B450                 add     al, 0BAh ; 'º'
.text:0040B452                 retf
.text:0040B452 ; ---------------------------------------------------------------------------
.text:0040B453                 db 7Eh
.text:0040B454                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040B454                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040B454                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040B454                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040B454                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040B454                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040B454                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040B454                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040B454                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040B454                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040B454                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040B454                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040B454                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040B454                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040B454                 dd 0C4426C00h, 330h, 0
.text:0040B588                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040B588                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040B588                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040B588                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040B5D8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B5D8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040B5D8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040B5D8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040B5D8                 dd 0BA94B00h, 1Bh, 0
.text:0040B638                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040B648                 dd 0C0h, 46000000h, 331h, 0
.text:0040B658                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B658                 dd 312h, 0
.text:0040B678                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040B688                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040B698                 dd 0C0h, 46000000h, 311h, 0
.text:0040B6A8                 dd 0C0h, 46000000h, 313h, 0
.text:0040B6B8                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040B6C8                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040B6D8                 dd 0C0h, 46000000h, 310h, 0
.text:0040B6E8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B6E8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040B718                 dd 0C0h, 46000000h, 319h, 0
.text:0040B728                 dd 0C0h, 46000000h, 315h, 0
.text:0040B738                 dd 0C0h, 46000000h, 316h, 0
.text:0040B748                 dd 0C0h, 46000000h, 315h, 0
.text:0040B758                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040B768                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040B768                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040B768                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040B7A8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040B7A8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040B7A8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040B7A8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040B7A8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040B7A8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040B7A8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040B7A8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040B7A8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040B7A8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040B7A8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040B7A8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040B7A8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040B7A8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040B7A8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040B7A8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040B7A8                 dd 2DE81h, 0
.text:0040B8F8                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040B910                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040B910                 dd 0
.text:0040B928                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040B928                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040B928                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040B928                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040B928                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040B928                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040B928                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040B928                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040B928                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040B928                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040B928                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040B928                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040B928                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040B928                 dd 10Fh, 0
.text:0040BA38                 dd 0C0h, 46000000h, 125h, 0
.text:0040BA48                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040BA48                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040BA48                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040BA88                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040BA88                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BA88                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040BA88                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040BA88                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040BAE8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040BAF8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040BAF8                 dd 140h, 0
.text:0040BB18                 dd 0C0h, 46000000h, 1, 0
.text:0040BB28                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040BB28                 dd 71D3400h, 13Dh, 0
.text:0040BB48                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040BB48                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040BB48                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040BB48                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040BB98                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040BB98                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040BB98                 dd 20405h, 0
.text:0040BBC8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040BBD8                 dd 0C0h, 46000000h, 20406h, 0
.text:0040BBE8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040BBF8                 dd 0C0h, 46000000h, 110h, 0
.text:0040BC08                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040BC18                 dd 0C0h, 46000000h, 123h, 0
.text:0040BC28                 dd 0C0h, 46000000h, 124h, 0
.text:0040BC38                 dd 0C0h, 46000000h, 13h, 0
.text:0040BC48                 dd 0C0h, 46000000h, 14h, 0
.text:0040BC58                 dd 0C0h, 46000000h, 15h, 0
.text:0040BC68                 dd 0C0h, 46000000h, 20400h, 0
.text:0040BC78                 dd 0C0h, 46000000h, 121h, 0
.text:0040BC88                 dd 0C0h, 46000000h, 122h, 0
.text:0040BC98                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040BCA8                 dd 0C0h, 46000000h, 108h, 0
.text:0040BCB8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040BCB8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040BCB8                 dd 103h, 0
.text:0040BCE8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040BCF8                 dd 0C0h, 46000000h, 106h, 0
.text:0040BD08                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BD08                 dd 107h, 0
.text:0040BD28                 dd 0C0h, 46000000h, 102h, 0
.text:0040BD38                 dd 0C0h, 46000000h, 104h, 0
.text:0040BD48                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040BD48                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040BD48                 dd 105h, 0
.text:0040BD78                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040BD88                 dd 0C0h, 46000000h, 139h, 0
.text:0040BD98                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040BDA8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040BDA8                 dd 101h, 0
.text:0040BDC8                 dd 0C0h, 46000000h, 100h, 0
.text:0040BDD8                 dd 0C0h, 46000000h, 20404h, 0
.text:0040BDE8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040BDE8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040BE18                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040BE18                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040BE18                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040BE18                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040BE68                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BE68                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040BE68                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040BE68                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040BE68                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BE68                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040BEE8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040BEE8                 dd 0Ah, 0
.text:0040BF08                 dd 0C0h, 46000000h, 2, 0
.text:0040BF18                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040BF28                 dd 0C0h, 46000000h, 3, 0
.text:0040BF38                 dd 0C0h, 46000000h, 16h, 0
.text:0040BF48                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040BF48                 dd 1608D74Fh, 0Fh, 0
.text:0040BF68                 dd 0C0h, 46000000h, 20h, 0
.text:0040BF78                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040BF78                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040BF78                 dd 0
.text:0040BFA8                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040BFB8                 dd 0C0h, 46000000h, 128h, 0
.text:0040BFC8                 dd 0C0h, 46000000h, 129h, 0
.text:0040BFD8                 dd 0C0h, 46000000h, 118h, 0
.text:0040BFE8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040BFE8                 dd 70474000h, 11Bh, 0
.text:0040C008                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040C008                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C008                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040C008                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040C008                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040C068                 dd 0C0h, 46000000h, 116h, 0
.text:0040C078                 dd 0C0h, 46000000h, 113h, 0
.text:0040C088                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040C088                 dd 119h, 0
.text:0040C0A8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040C0A8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040C0A8                 dd 0
.text:0040C0D8                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040C0E8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040C0F8                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040C108                 dd 0C0h, 46000000h, 112h, 0
.text:0040C118                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040C118                 dd 18E6000h, 120h, 0
.text:0040C138                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040C138                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040C138                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040C178                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040C178                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040C1A8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C1A8                 dd 11Ah, 0
.text:0040C1C8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040C1C8                 dd 10Ch, 0
.text:0040C1E8                 dd 0C0h, 46000000h
.text:0040C1F0 dword_40C1F0    dd 10Bh, 0              ; DATA XREF: sub_405660+75↑o
.text:0040C1F8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040C1F8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040C1F8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040C1F8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040C248                 dd 0C0h, 46000000h, 109h, 0
.text:0040C258                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040C258                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040C258                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040C258                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040C258                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040C258                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040C258                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040C258                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040C258                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C258                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040C258                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040C338                 dd 0C0h, 46000000h, 138h, 0
.text:0040C348                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040C348                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040C348                 dd 27h, 0
.text:0040C378                 dd 0C0h, 46000000h, 8, 0
.text:0040C388                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040C388                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040C388                 dd 20D00h, 0
.text:0040C3B8                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040C3C8                 dd 0C0h, 46000000h, 12h, 0
.text:0040C3D8                 dd 0C0h, 46000000h, 4, 0
.text:0040C3E8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C3E8                 dd 7, 0
.text:0040C408                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C408                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040C438                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C438                 dd 126h, 0
.text:0040C458                 dd 0C0h, 46000000h, 10h, 0
.text:0040C468                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040C468                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040C498                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040C498                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040C498                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040C4D8                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040C4E8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040C4F8                 dd 0C0h, 46000000h, 26h, 0
.text:0040C508                 dd 0C0h, 46000000h, 6, 0
.text:0040C518                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040C518                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040C518                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040C558                 dd 0C0h, 46000000h, 20403h, 0
.text:0040C568                 dd 0C0h, 46000000h, 20401h, 0
.text:0040C578                 dd 0C0h, 46000000h, 20412h, 0
.text:0040C588                 dd 0C0h, 46000000h, 20402h, 0
.text:0040C598                 dd 0C0h, 46000000h, 20411h, 0
.text:0040C5A8                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040C5B8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040C5B8                 dd 10Dh, 0
.text:0040C5D8                 dd 0C0h, 46000000h, 127h, 0
.text:0040C5E8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040C5E8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040C5E8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040C628                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040C628                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040C628                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040C668                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040C678                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040C688                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040C698                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040C6A8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040C6B8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040C6C8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040C6D8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040C6E8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040C6F8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040C708                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040C718                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040C728                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040C738                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040C748                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040C758                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040C768                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040C778                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040C788                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040C798                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040C7A8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040C7B8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040C7C8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040C7D8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040C7E8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040C7F8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040C808                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040C818                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040C828                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040C838                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040C848                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040C858                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040C868                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040C878                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040C888                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040C898                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040C898                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040C8C0
.text:0040C8C0 ; =============== S U B R O U T I N E =======================================
.text:0040C8C0
.text:0040C8C0 ; Attributes: thunk
.text:0040C8C0
.text:0040C8C0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040C8C0 mbrtowc         proc near               ; CODE XREF: sub_403FE0+757↑p
.text:0040C8C0
.text:0040C8C0 DstCh           = dword ptr  4
.text:0040C8C0 SrcCh           = dword ptr  8
.text:0040C8C0 SizeInBytes     = dword ptr  0Ch
.text:0040C8C0 State           = dword ptr  10h
.text:0040C8C0
.text:0040C8C0                 jmp     ds:__imp_mbrtowc
.text:0040C8C0 mbrtowc         endp
.text:0040C8C0
.text:0040C8C0 ; ---------------------------------------------------------------------------
.text:0040C8C6                 align 10h
.text:0040C8D0
.text:0040C8D0 ; =============== S U B R O U T I N E =======================================
.text:0040C8D0
.text:0040C8D0 ; Attributes: bp-based frame
.text:0040C8D0
.text:0040C8D0 sub_40C8D0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040C8D0                 push    ebp
.text:0040C8D1                 mov     ecx, offset byte_40F000
.text:0040C8D6                 cmp     ecx, offset byte_40F000
.text:0040C8DC                 mov     ebp, esp
.text:0040C8DE                 jnb     short loc_40C8F6
.text:0040C8E0
.text:0040C8E0 loc_40C8E0:                             ; CODE XREF: sub_40C8D0+24↓j
.text:0040C8E0                 mov     edx, [ecx+4]
.text:0040C8E3                 mov     eax, [ecx]
.text:0040C8E5                 add     ecx, 8
.text:0040C8E8                 add     [edx+400000h], eax
.text:0040C8EE                 cmp     ecx, offset byte_40F000
.text:0040C8F4                 jb      short loc_40C8E0
.text:0040C8F6
.text:0040C8F6 loc_40C8F6:                             ; CODE XREF: sub_40C8D0+E↑j
.text:0040C8F6                 pop     ebp
.text:0040C8F7                 retn
.text:0040C8F7 sub_40C8D0      endp
.text:0040C8F7
.text:0040C8F7 ; ---------------------------------------------------------------------------
.text:0040C8F8                 align 10h
.text:0040C900
.text:0040C900 ; =============== S U B R O U T I N E =======================================
.text:0040C900
.text:0040C900 ; Attributes: bp-based frame
.text:0040C900
.text:0040C900 sub_40C900      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040C900                                         ; TopLevelExceptionFilter+D7↑p
.text:0040C900                 push    ebp
.text:0040C901                 mov     ebp, esp
.text:0040C903                 fninit
.text:0040C905                 pop     ebp
.text:0040C906                 retn
.text:0040C906 sub_40C900      endp
.text:0040C906
.text:0040C906 ; ---------------------------------------------------------------------------
.text:0040C907                 align 10h
.text:0040C910
.text:0040C910 ; =============== S U B R O U T I N E =======================================
.text:0040C910
.text:0040C910 ; Attributes: bp-based frame
.text:0040C910
.text:0040C910 ; void __cdecl sub_40C910()
.text:0040C910 sub_40C910      proc near               ; DATA XREF: .text:loc_40C959↓o
.text:0040C910                                         ; sub_40C9A0:loc_40C9CE↓o
.text:0040C910                 push    ebp
.text:0040C911                 mov     ebp, esp
.text:0040C913                 sub     esp, 8
.text:0040C916                 mov     eax, off_40E0C4
.text:0040C91B                 mov     edx, [eax]
.text:0040C91D                 test    edx, edx
.text:0040C91F                 jnz     short loc_40C925
.text:0040C921
.text:0040C921 loc_40C921:                             ; CODE XREF: sub_40C910+2C↓j
.text:0040C921                 mov     esp, ebp
.text:0040C923                 pop     ebp
.text:0040C924                 retn
.text:0040C925 ; ---------------------------------------------------------------------------
.text:0040C925
.text:0040C925 loc_40C925:                             ; CODE XREF: sub_40C910+F↑j
.text:0040C925                                         ; sub_40C910+2A↓j
.text:0040C925                 call    dword ptr [eax]
.text:0040C927                 mov     edx, off_40E0C4
.text:0040C92D                 mov     ecx, [edx+4]
.text:0040C930                 lea     eax, [edx+4]
.text:0040C933                 mov     off_40E0C4, eax
.text:0040C938                 test    ecx, ecx
.text:0040C93A                 jnz     short loc_40C925
.text:0040C93C                 jmp     short loc_40C921
.text:0040C93C sub_40C910      endp
.text:0040C93C
.text:0040C93C ; ---------------------------------------------------------------------------
.text:0040C93E                 align 10h
.text:0040C940                 push    ebp
.text:0040C941                 mov     ebp, esp
.text:0040C943                 sub     esp, 8
.text:0040C946                 mov     [ebp-4], ebx
.text:0040C949                 mov     eax, ds:dword_40D6C0
.text:0040C94E                 cmp     eax, 0FFFFFFFFh
.text:0040C951                 jz      short loc_40C97C
.text:0040C953
.text:0040C953 loc_40C953:                             ; CODE XREF: .text:0040C986↓j
.text:0040C953                                         ; .text:0040C999↓j
.text:0040C953                 test    eax, eax
.text:0040C955                 mov     ebx, eax
.text:0040C957                 jnz     short loc_40C970
.text:0040C959
.text:0040C959 loc_40C959:                             ; CODE XREF: .text:0040C97A↓j
.text:0040C959                 mov     dword ptr [esp], offset sub_40C910
.text:0040C960                 call    sub_401040
.text:0040C965                 mov     ebx, [ebp-4]
.text:0040C968                 mov     esp, ebp
.text:0040C96A                 pop     ebp
.text:0040C96B                 retn
.text:0040C96B ; ---------------------------------------------------------------------------
.text:0040C96C                 align 10h
.text:0040C970
.text:0040C970 loc_40C970:                             ; CODE XREF: .text:0040C957↑j
.text:0040C970                                         ; .text:0040C978↓j
.text:0040C970                 call    ds:dword_40D6C0[ebx*4]
.text:0040C977                 dec     ebx
.text:0040C978                 jnz     short loc_40C970
.text:0040C97A                 jmp     short loc_40C959
.text:0040C97C ; ---------------------------------------------------------------------------
.text:0040C97C
.text:0040C97C loc_40C97C:                             ; CODE XREF: .text:0040C951↑j
.text:0040C97C                 mov     ecx, ds:dword_40D6C4
.text:0040C982                 xor     eax, eax
.text:0040C984                 test    ecx, ecx
.text:0040C986                 jz      short loc_40C953
.text:0040C988                 mov     edx, offset dword_40D6C0
.text:0040C98D                 lea     esi, [esi+0]
.text:0040C990
.text:0040C990 loc_40C990:                             ; CODE XREF: .text:0040C997↓j
.text:0040C990                 inc     eax
.text:0040C991                 mov     ecx, [edx+eax*4+4]
.text:0040C995                 test    ecx, ecx
.text:0040C997                 jnz     short loc_40C990
.text:0040C999                 jmp     short loc_40C953
.text:0040C999 ; ---------------------------------------------------------------------------
.text:0040C99B                 align 10h
.text:0040C9A0
.text:0040C9A0 ; =============== S U B R O U T I N E =======================================
.text:0040C9A0
.text:0040C9A0 ; Attributes: bp-based frame
.text:0040C9A0
.text:0040C9A0 sub_40C9A0      proc near               ; CODE XREF: sub_401910+1E↑p
.text:0040C9A0
.text:0040C9A0 var_8           = dword ptr -8
.text:0040C9A0 var_4           = dword ptr -4
.text:0040C9A0
.text:0040C9A0                 push    ebp
.text:0040C9A1                 mov     ebp, esp
.text:0040C9A3                 sub     esp, 8
.text:0040C9A6                 mov     [ebp+var_4], ebx
.text:0040C9A9                 mov     edx, dword_40E0C0
.text:0040C9AF                 test    edx, edx
.text:0040C9B1                 jnz     short loc_40C9DA
.text:0040C9B3                 mov     eax, ds:dword_40D6C0
.text:0040C9B8                 mov     edx, 1
.text:0040C9BD                 mov     dword_40E0C0, edx
.text:0040C9C3                 cmp     eax, 0FFFFFFFFh
.text:0040C9C6                 jz      short loc_40C9ED
.text:0040C9C8
.text:0040C9C8 loc_40C9C8:                             ; CODE XREF: sub_40C9A0+57↓j
.text:0040C9C8                                         ; sub_40C9A0+69↓j
.text:0040C9C8                 test    eax, eax
.text:0040C9CA                 mov     ebx, eax
.text:0040C9CC                 jnz     short loc_40C9E1
.text:0040C9CE
.text:0040C9CE loc_40C9CE:                             ; CODE XREF: sub_40C9A0+4B↓j
.text:0040C9CE                 mov     [esp+8+var_8], offset sub_40C910 ; void (__cdecl *)()
.text:0040C9D5                 call    sub_401040
.text:0040C9DA
.text:0040C9DA loc_40C9DA:                             ; CODE XREF: sub_40C9A0+11↑j
.text:0040C9DA                 mov     ebx, [ebp+var_4]
.text:0040C9DD                 mov     esp, ebp
.text:0040C9DF                 pop     ebp
.text:0040C9E0                 retn
.text:0040C9E1 ; ---------------------------------------------------------------------------
.text:0040C9E1
.text:0040C9E1 loc_40C9E1:                             ; CODE XREF: sub_40C9A0+2C↑j
.text:0040C9E1                                         ; sub_40C9A0+49↓j
.text:0040C9E1                 call    ds:dword_40D6C0[ebx*4]
.text:0040C9E8                 dec     ebx
.text:0040C9E9                 jnz     short loc_40C9E1
.text:0040C9EB                 jmp     short loc_40C9CE
.text:0040C9ED ; ---------------------------------------------------------------------------
.text:0040C9ED
.text:0040C9ED loc_40C9ED:                             ; CODE XREF: sub_40C9A0+26↑j
.text:0040C9ED                 mov     ecx, ds:dword_40D6C4
.text:0040C9F3                 xor     eax, eax
.text:0040C9F5                 test    ecx, ecx
.text:0040C9F7                 jz      short loc_40C9C8
.text:0040C9F9                 mov     edx, offset dword_40D6C0
.text:0040C9FE                 mov     esi, esi
.text:0040CA00
.text:0040CA00 loc_40CA00:                             ; CODE XREF: sub_40C9A0+67↓j
.text:0040CA00                 inc     eax
.text:0040CA01                 mov     ebx, [edx+eax*4+4]
.text:0040CA05                 test    ebx, ebx
.text:0040CA07                 jnz     short loc_40CA00
.text:0040CA09                 jmp     short loc_40C9C8
.text:0040CA09 sub_40C9A0      endp
.text:0040CA09
.text:0040CA09 ; ---------------------------------------------------------------------------
.text:0040CA0B                 align 10h
.text:0040CA10
.text:0040CA10 ; =============== S U B R O U T I N E =======================================
.text:0040CA10
.text:0040CA10 ; Attributes: info_from_lumina
.text:0040CA10
.text:0040CA10 ; void *__cdecl _alloca(size_t Size)
.text:0040CA10 __alloca        proc near               ; CODE XREF: sub_401910+19↑p
.text:0040CA10                 push    ecx
.text:0040CA11                 mov     ecx, esp
.text:0040CA13                 add     ecx, 8
.text:0040CA16
.text:0040CA16 loc_40CA16:                             ; CODE XREF: __alloca+1B↓j
.text:0040CA16                 cmp     eax, 1000h
.text:0040CA1B                 jb      short loc_40CA2D
.text:0040CA1D                 sub     ecx, 1000h
.text:0040CA23                 or      dword ptr [ecx], 0
.text:0040CA26                 sub     eax, 1000h
.text:0040CA2B                 jmp     short loc_40CA16
.text:0040CA2D ; ---------------------------------------------------------------------------
.text:0040CA2D
.text:0040CA2D loc_40CA2D:                             ; CODE XREF: __alloca+B↑j
.text:0040CA2D                 sub     ecx, eax
.text:0040CA2F                 or      dword ptr [ecx], 0
.text:0040CA32                 mov     eax, esp
.text:0040CA34                 mov     esp, ecx
.text:0040CA36                 mov     ecx, [eax]
.text:0040CA38                 mov     eax, [eax+4]
.text:0040CA3B                 jmp     eax
.text:0040CA3B __alloca        endp
.text:0040CA3B
.text:0040CA3B ; ---------------------------------------------------------------------------
.text:0040CA3D                 align 10h
.text:0040CA40
.text:0040CA40 ; =============== S U B R O U T I N E =======================================
.text:0040CA40
.text:0040CA40 ; Attributes: bp-based frame
.text:0040CA40
.text:0040CA40 sub_40CA40      proc near               ; CODE XREF: sub_405C00+17E↑p
.text:0040CA40                                         ; sub_405C00+1F5↑p ...
.text:0040CA40
.text:0040CA40 var_24          = dword ptr -24h
.text:0040CA40 var_20          = dword ptr -20h
.text:0040CA40 var_1C          = dword ptr -1Ch
.text:0040CA40 var_18          = dword ptr -18h
.text:0040CA40 var_14          = dword ptr -14h
.text:0040CA40 var_C           = dword ptr -0Ch
.text:0040CA40 var_8           = dword ptr -8
.text:0040CA40 var_4           = dword ptr -4
.text:0040CA40 arg_0           = dword ptr  8
.text:0040CA40 arg_4           = dword ptr  0Ch
.text:0040CA40 arg_8           = dword ptr  10h
.text:0040CA40 arg_C           = dword ptr  14h
.text:0040CA40
.text:0040CA40                 push    ebp
.text:0040CA41                 mov     ebp, esp
.text:0040CA43                 sub     esp, 28h
.text:0040CA46                 mov     [ebp+var_C], ebx
.text:0040CA49                 mov     edx, [ebp+arg_C]
.text:0040CA4C                 mov     ecx, [ebp+arg_0]
.text:0040CA4F                 mov     [ebp+var_8], esi
.text:0040CA52                 mov     eax, [ebp+arg_8]
.text:0040CA55                 test    edx, edx
.text:0040CA57                 mov     [ebp+var_4], edi
.text:0040CA5A                 mov     ebx, [ebp+arg_4]
.text:0040CA5D                 mov     esi, eax
.text:0040CA5F                 mov     [ebp+var_18], 0
.text:0040CA66                 mov     [ebp+var_14], 0
.text:0040CA6D                 mov     [ebp+var_1C], ecx
.text:0040CA70                 jnz     short loc_40CAC2
.text:0040CA72                 cmp     eax, ebx
.text:0040CA74                 jbe     short loc_40CAA0
.text:0040CA76                 mov     eax, ecx
.text:0040CA78                 mov     edx, ebx
.text:0040CA7A                 div     esi
.text:0040CA7C                 mov     edi, eax
.text:0040CA7E                 mov     esi, esi
.text:0040CA80
.text:0040CA80 loc_40CA80:                             ; CODE XREF: sub_40CA40+88↓j
.text:0040CA80                                         ; sub_40CA40+A4↓j ...
.text:0040CA80                 xor     ecx, ecx
.text:0040CA82
.text:0040CA82 loc_40CA82:                             ; CODE XREF: sub_40CA40+80↓j
.text:0040CA82                 mov     [ebp+var_18], edi
.text:0040CA85                 mov     ebx, [ebp+var_C]
.text:0040CA88                 mov     eax, [ebp+var_18]
.text:0040CA8B                 mov     [ebp+var_14], ecx
.text:0040CA8E                 mov     esi, [ebp+var_8]
.text:0040CA91                 mov     edx, [ebp+var_14]
.text:0040CA94                 mov     edi, [ebp+var_4]
.text:0040CA97                 mov     esp, ebp
.text:0040CA99                 pop     ebp
.text:0040CA9A                 retn
.text:0040CA9A ; ---------------------------------------------------------------------------
.text:0040CA9B                 align 10h
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: sub_40CA40+34↑j
.text:0040CAA0                 test    eax, eax
.text:0040CAA2                 jnz     short loc_40CAB1
.text:0040CAA4                 mov     eax, 1
.text:0040CAA9                 xor     ecx, ecx
.text:0040CAAB                 xor     edx, edx
.text:0040CAAD                 div     ecx
.text:0040CAAF                 mov     esi, eax
.text:0040CAB1
.text:0040CAB1 loc_40CAB1:                             ; CODE XREF: sub_40CA40+62↑j
.text:0040CAB1                 mov     eax, ebx
.text:0040CAB3                 xor     edx, edx
.text:0040CAB5                 div     esi
.text:0040CAB7                 mov     ecx, eax
.text:0040CAB9                 mov     eax, [ebp+var_1C]
.text:0040CABC                 div     esi
.text:0040CABE                 mov     edi, eax
.text:0040CAC0                 jmp     short loc_40CA82
.text:0040CAC2 ; ---------------------------------------------------------------------------
.text:0040CAC2
.text:0040CAC2 loc_40CAC2:                             ; CODE XREF: sub_40CA40+30↑j
.text:0040CAC2                 cmp     edx, ebx
.text:0040CAC4                 jbe     short loc_40CAD0
.text:0040CAC6                 xor     edi, edi
.text:0040CAC8                 jmp     short loc_40CA80
.text:0040CAC8 ; ---------------------------------------------------------------------------
.text:0040CACA                 align 10h
.text:0040CAD0
.text:0040CAD0 loc_40CAD0:                             ; CODE XREF: sub_40CA40+84↑j
.text:0040CAD0                 bsr     eax, edx
.text:0040CAD3                 xor     eax, 1Fh
.text:0040CAD6                 mov     [ebp+var_20], eax
.text:0040CAD9                 jnz     short loc_40CAF0
.text:0040CADB                 cmp     ebx, edx
.text:0040CADD                 ja      short loc_40CAE6
.text:0040CADF                 xor     edi, edi
.text:0040CAE1                 cmp     [ebp+var_1C], esi
.text:0040CAE4                 jb      short loc_40CA80
.text:0040CAE6
.text:0040CAE6 loc_40CAE6:                             ; CODE XREF: sub_40CA40+9D↑j
.text:0040CAE6                 mov     edi, 1
.text:0040CAEB                 jmp     short loc_40CA80
.text:0040CAEB ; ---------------------------------------------------------------------------
.text:0040CAED                 align 10h
.text:0040CAF0
.text:0040CAF0 loc_40CAF0:                             ; CODE XREF: sub_40CA40+99↑j
.text:0040CAF0                 mov     eax, [ebp+var_20]
.text:0040CAF3                 mov     ecx, 20h ; ' '
.text:0040CAF8                 sub     ecx, eax
.text:0040CAFA                 mov     [ebp+var_24], ecx
.text:0040CAFD                 mov     eax, esi
.text:0040CAFF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CB03                 shl     edx, cl
.text:0040CB05                 mov     edi, edx
.text:0040CB07                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CB0B                 mov     edx, ebx
.text:0040CB0D                 shr     eax, cl
.text:0040CB0F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CB13                 or      edi, eax
.text:0040CB15                 mov     eax, [ebp+var_1C]
.text:0040CB18                 shl     esi, cl
.text:0040CB1A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CB1E                 shr     edx, cl
.text:0040CB20                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CB24                 shl     ebx, cl
.text:0040CB26                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CB2A                 shr     eax, cl
.text:0040CB2C                 or      ebx, eax
.text:0040CB2E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CB32                 mov     eax, ebx
.text:0040CB34                 div     edi
.text:0040CB36                 mov     ebx, edx
.text:0040CB38                 mov     edi, eax
.text:0040CB3A                 shl     [ebp+var_1C], cl
.text:0040CB3D                 mul     esi
.text:0040CB3F                 cmp     edx, ebx
.text:0040CB41                 ja      short loc_40CB54
.text:0040CB43                 cmp     edx, ebx
.text:0040CB45                 jnz     loc_40CA80
.text:0040CB4B                 cmp     eax, [ebp+var_1C]
.text:0040CB4E                 jbe     loc_40CA80
.text:0040CB54
.text:0040CB54 loc_40CB54:                             ; CODE XREF: sub_40CA40+101↑j
.text:0040CB54                 dec     edi
.text:0040CB55                 jmp     loc_40CA80
.text:0040CB55 sub_40CA40      endp
.text:0040CB55
.text:0040CB55 ; ---------------------------------------------------------------------------
.text:0040CB5A                 align 10h
.text:0040CB60
.text:0040CB60 ; =============== S U B R O U T I N E =======================================
.text:0040CB60
.text:0040CB60 ; Attributes: bp-based frame
.text:0040CB60
.text:0040CB60 sub_40CB60      proc near               ; CODE XREF: sub_405C00+1A5↑p
.text:0040CB60                                         ; sub_405C00+21E↑p ...
.text:0040CB60
.text:0040CB60 var_34          = dword ptr -34h
.text:0040CB60 var_2C          = dword ptr -2Ch
.text:0040CB60 var_28          = dword ptr -28h
.text:0040CB60 var_24          = dword ptr -24h
.text:0040CB60 var_20          = dword ptr -20h
.text:0040CB60 var_1C          = dword ptr -1Ch
.text:0040CB60 var_18          = dword ptr -18h
.text:0040CB60 var_14          = dword ptr -14h
.text:0040CB60 arg_0           = dword ptr  8
.text:0040CB60 arg_4           = dword ptr  0Ch
.text:0040CB60 arg_8           = dword ptr  10h
.text:0040CB60 arg_C           = dword ptr  14h
.text:0040CB60
.text:0040CB60                 push    ebp
.text:0040CB61                 mov     ebp, esp
.text:0040CB63                 push    edi
.text:0040CB64                 push    esi
.text:0040CB65                 push    ebx
.text:0040CB66                 sub     esp, 2Ch
.text:0040CB69                 mov     edx, [ebp+arg_C]
.text:0040CB6C                 mov     [ebp+var_20], 0
.text:0040CB73                 mov     ecx, [ebp+arg_0]
.text:0040CB76                 mov     ebx, [ebp+arg_4]
.text:0040CB79                 mov     [ebp+var_1C], 0
.text:0040CB80                 mov     eax, [ebp+arg_8]
.text:0040CB83                 test    edx, edx
.text:0040CB85                 mov     [ebp+var_24], edx
.text:0040CB88                 mov     edi, ebx
.text:0040CB8A                 mov     esi, eax
.text:0040CB8C                 mov     [ebp+var_28], ecx
.text:0040CB8F                 jnz     short loc_40CBF0
.text:0040CB91                 cmp     eax, ebx
.text:0040CB93                 jbe     short loc_40CBD0
.text:0040CB95                 mov     eax, ecx
.text:0040CB97                 mov     edx, ebx
.text:0040CB99                 div     esi
.text:0040CB9B
.text:0040CB9B loc_40CB9B:                             ; CODE XREF: sub_40CB60+8B↓j
.text:0040CB9B                 mov     [ebp+var_28], edx
.text:0040CB9E                 lea     ecx, [ebp+var_18]
.text:0040CBA1                 test    ecx, ecx
.text:0040CBA3                 jz      short loc_40CBBE
.text:0040CBA5                 mov     [ebp+var_1C], 0
.text:0040CBAC
.text:0040CBAC loc_40CBAC:                             ; CODE XREF: sub_40CB60+DA↓j
.text:0040CBAC                 mov     eax, [ebp+var_28]
.text:0040CBAF                 mov     [ebp+var_20], eax
.text:0040CBB2                 mov     edx, [ebp+var_20]
.text:0040CBB5                 mov     ecx, [ebp+var_1C]
.text:0040CBB8                 mov     [ebp+var_18], edx
.text:0040CBBB                 mov     [ebp+var_14], ecx
.text:0040CBBE
.text:0040CBBE loc_40CBBE:                             ; CODE XREF: sub_40CB60+43↑j
.text:0040CBBE                                         ; sub_40CB60+A7↓j ...
.text:0040CBBE                 mov     eax, [ebp+var_18]
.text:0040CBC1                 mov     edx, [ebp+var_14]
.text:0040CBC4                 add     esp, 2Ch
.text:0040CBC7                 pop     ebx
.text:0040CBC8                 pop     esi
.text:0040CBC9                 pop     edi
.text:0040CBCA                 pop     ebp
.text:0040CBCB                 retn
.text:0040CBCB ; ---------------------------------------------------------------------------
.text:0040CBCC                 align 10h
.text:0040CBD0
.text:0040CBD0 loc_40CBD0:                             ; CODE XREF: sub_40CB60+33↑j
.text:0040CBD0                 test    eax, eax
.text:0040CBD2                 jnz     short loc_40CBDF
.text:0040CBD4                 mov     eax, 1
.text:0040CBD9                 xor     edx, edx
.text:0040CBDB                 div     esi
.text:0040CBDD                 mov     esi, eax
.text:0040CBDF
.text:0040CBDF loc_40CBDF:                             ; CODE XREF: sub_40CB60+72↑j
.text:0040CBDF                 mov     eax, edi
.text:0040CBE1                 mov     edx, [ebp+var_24]
.text:0040CBE4                 div     esi
.text:0040CBE6                 mov     eax, [ebp+var_28]
.text:0040CBE9                 div     esi
.text:0040CBEB                 jmp     short loc_40CB9B
.text:0040CBEB ; ---------------------------------------------------------------------------
.text:0040CBED                 align 10h
.text:0040CBF0
.text:0040CBF0 loc_40CBF0:                             ; CODE XREF: sub_40CB60+2F↑j
.text:0040CBF0                 cmp     [ebp+var_24], ebx
.text:0040CBF3                 jbe     short loc_40CC10
.text:0040CBF5                 mov     [ebp+var_20], ecx
.text:0040CBF8
.text:0040CBF8 loc_40CBF8:                             ; CODE XREF: sub_40CB60+15B↓j
.text:0040CBF8                 mov     [ebp+var_1C], edi
.text:0040CBFB                 mov     eax, [ebp+var_20]
.text:0040CBFE                 mov     edx, [ebp+var_1C]
.text:0040CC01                 mov     [ebp+var_18], eax
.text:0040CC04                 mov     [ebp+var_14], edx
.text:0040CC07                 jmp     short loc_40CBBE
.text:0040CC07 ; ---------------------------------------------------------------------------
.text:0040CC09                 align 10h
.text:0040CC10
.text:0040CC10 loc_40CC10:                             ; CODE XREF: sub_40CB60+93↑j
.text:0040CC10                 bsr     eax, [ebp+var_24]
.text:0040CC14                 mov     ebx, eax
.text:0040CC16                 xor     ebx, 1Fh
.text:0040CC19                 jnz     short loc_40CC40
.text:0040CC1B                 cmp     edi, [ebp+var_24]
.text:0040CC1E                 ja      short loc_40CC25
.text:0040CC20                 cmp     [ebp+var_28], esi
.text:0040CC23                 jb      short loc_40CC30
.text:0040CC25
.text:0040CC25 loc_40CC25:                             ; CODE XREF: sub_40CB60+BE↑j
.text:0040CC25                 mov     edx, [ebp+var_28]
.text:0040CC28                 sub     edx, esi
.text:0040CC2A                 sbb     edi, [ebp+var_24]
.text:0040CC2D                 mov     [ebp+var_28], edx
.text:0040CC30
.text:0040CC30 loc_40CC30:                             ; CODE XREF: sub_40CB60+C3↑j
.text:0040CC30                 lea     ecx, [ebp+var_18]
.text:0040CC33                 test    ecx, ecx
.text:0040CC35                 jz      short loc_40CBBE
.text:0040CC37                 mov     [ebp+var_1C], edi
.text:0040CC3A                 jmp     loc_40CBAC
.text:0040CC3A ; ---------------------------------------------------------------------------
.text:0040CC3F                 align 10h
.text:0040CC40
.text:0040CC40 loc_40CC40:                             ; CODE XREF: sub_40CB60+B9↑j
.text:0040CC40                 mov     edx, [ebp+var_24]
.text:0040CC43                 mov     eax, 20h ; ' '
.text:0040CC48                 mov     cl, bl
.text:0040CC4A                 sub     eax, ebx
.text:0040CC4C                 mov     [ebp+var_2C], eax
.text:0040CC4F                 shl     edx, cl
.text:0040CC51                 mov     eax, esi
.text:0040CC53                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CC57                 shr     eax, cl
.text:0040CC59                 mov     cl, bl
.text:0040CC5B                 shl     esi, cl
.text:0040CC5D                 or      edx, eax
.text:0040CC5F                 mov     eax, [ebp+var_28]
.text:0040CC62                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CC66                 mov     [ebp+var_24], edx
.text:0040CC69                 mov     edx, edi
.text:0040CC6B                 shr     edx, cl
.text:0040CC6D                 mov     cl, bl
.text:0040CC6F                 shl     edi, cl
.text:0040CC71                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CC75                 shr     eax, cl
.text:0040CC77                 or      edi, eax
.text:0040CC79                 mov     eax, edi
.text:0040CC7B                 mov     cl, bl
.text:0040CC7D                 div     [ebp+var_24]
.text:0040CC80                 shl     [ebp+var_28], cl
.text:0040CC83                 mov     edi, edx
.text:0040CC85                 mul     esi
.text:0040CC87                 mov     [ebp+var_34], eax
.text:0040CC8A                 cmp     edx, edi
.text:0040CC8C                 ja      short loc_40CCC8
.text:0040CC8E                 cmp     edx, edi
.text:0040CC90                 jz      short loc_40CCC0
.text:0040CC92
.text:0040CC92 loc_40CC92:                             ; CODE XREF: sub_40CB60+166↓j
.text:0040CC92                                         ; sub_40CB60+173↓j
.text:0040CC92                 lea     eax, [ebp+var_18]
.text:0040CC95                 test    eax, eax
.text:0040CC97                 jz      loc_40CBBE
.text:0040CC9D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CCA1                 mov     eax, [ebp+var_28]
.text:0040CCA4                 sub     eax, [ebp+var_34]
.text:0040CCA7                 sbb     edi, edx
.text:0040CCA9                 mov     [ebp+var_28], eax
.text:0040CCAC                 mov     edx, edi
.text:0040CCAE                 shl     edx, cl
.text:0040CCB0                 mov     cl, bl
.text:0040CCB2                 shr     eax, cl
.text:0040CCB4                 or      edx, eax
.text:0040CCB6                 mov     [ebp+var_20], edx
.text:0040CCB9                 shr     edi, cl
.text:0040CCBB                 jmp     loc_40CBF8
.text:0040CCC0 ; ---------------------------------------------------------------------------
.text:0040CCC0
.text:0040CCC0 loc_40CCC0:                             ; CODE XREF: sub_40CB60+130↑j
.text:0040CCC0                 mov     eax, [ebp+var_28]
.text:0040CCC3                 cmp     [ebp+var_34], eax
.text:0040CCC6                 jbe     short loc_40CC92
.text:0040CCC8
.text:0040CCC8 loc_40CCC8:                             ; CODE XREF: sub_40CB60+12C↑j
.text:0040CCC8                 mov     ecx, [ebp+var_34]
.text:0040CCCB                 sub     ecx, esi
.text:0040CCCD                 sbb     edx, [ebp+var_24]
.text:0040CCD0                 mov     [ebp+var_34], ecx
.text:0040CCD3                 jmp     short loc_40CC92
.text:0040CCD3 sub_40CB60      endp
.text:0040CCD3
.text:0040CCD3 ; ---------------------------------------------------------------------------
.text:0040CCD5                 align 10h
.text:0040CCE0
.text:0040CCE0 ; =============== S U B R O U T I N E =======================================
.text:0040CCE0
.text:0040CCE0 ; Attributes: thunk
.text:0040CCE0
.text:0040CCE0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040CCE0 _stricmp        proc near               ; CODE XREF: sub_4060D0+46F↑p
.text:0040CCE0                                         ; sub_408550+2E↑p ...
.text:0040CCE0
.text:0040CCE0 String1         = dword ptr  4
.text:0040CCE0 String2         = dword ptr  8
.text:0040CCE0
.text:0040CCE0                 jmp     ds:__imp__stricmp
.text:0040CCE0 _stricmp        endp
.text:0040CCE0
.text:0040CCE0 ; ---------------------------------------------------------------------------
.text:0040CCE6                 align 10h
.text:0040CCF0
.text:0040CCF0 ; =============== S U B R O U T I N E =======================================
.text:0040CCF0
.text:0040CCF0 ; Attributes: thunk
.text:0040CCF0
.text:0040CCF0 ; char *__cdecl strdup(const char *String)
.text:0040CCF0 _strdup         proc near               ; CODE XREF: sub_408180+101↑p
.text:0040CCF0                                         ; .text:004083EA↑p ...
.text:0040CCF0
.text:0040CCF0 String          = dword ptr  4
.text:0040CCF0
.text:0040CCF0                 jmp     ds:__imp__strdup
.text:0040CCF0 _strdup         endp
.text:0040CCF0
.text:0040CCF0 ; ---------------------------------------------------------------------------
.text:0040CCF6                 align 10h
.text:0040CD00
.text:0040CD00 ; =============== S U B R O U T I N E =======================================
.text:0040CD00
.text:0040CD00 ; Attributes: thunk
.text:0040CD00
.text:0040CD00 ; int __cdecl getpid()
.text:0040CD00 _getpid         proc near               ; CODE XREF: sub_40ACB0+84↑p
.text:0040CD00                 jmp     ds:__imp__getpid
.text:0040CD00 _getpid         endp
.text:0040CD00
.text:0040CD00 ; ---------------------------------------------------------------------------
.text:0040CD06                 align 10h
.text:0040CD10
.text:0040CD10 ; =============== S U B R O U T I N E =======================================
.text:0040CD10
.text:0040CD10 ; Attributes: thunk
.text:0040CD10
.text:0040CD10 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040CD10 _chmod          proc near               ; CODE XREF: sub_40B0E0+41↑j
.text:0040CD10
.text:0040CD10 FileName        = dword ptr  4
.text:0040CD10 AccessMode      = dword ptr  8
.text:0040CD10
.text:0040CD10                 jmp     ds:__imp__chmod
.text:0040CD10 _chmod          endp
.text:0040CD10
.text:0040CD10 ; ---------------------------------------------------------------------------
.text:0040CD16                 align 10h
.text:0040CD20                 jmp     ds:__set_app_type
.text:0040CD20 ; ---------------------------------------------------------------------------
.text:0040CD26                 align 10h
.text:0040CD30
.text:0040CD30 ; =============== S U B R O U T I N E =======================================
.text:0040CD30
.text:0040CD30 ; Attributes: thunk
.text:0040CD30
.text:0040CD30 ; void __cdecl cexit()
.text:0040CD30 _cexit          proc near               ; CODE XREF: sub_401080+EC↑p
.text:0040CD30                 jmp     ds:__imp__cexit
.text:0040CD30 _cexit          endp
.text:0040CD30
.text:0040CD30 ; ---------------------------------------------------------------------------
.text:0040CD36                 align 10h
.text:0040CD40
.text:0040CD40 ; =============== S U B R O U T I N E =======================================
.text:0040CD40
.text:0040CD40 ; Attributes: thunk
.text:0040CD40
.text:0040CD40 ; char ***__cdecl _p__environ()
.text:0040CD40 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040CD40                 jmp     ds:__imp___p__environ
.text:0040CD40 __p__environ    endp
.text:0040CD40
.text:0040CD40 ; ---------------------------------------------------------------------------
.text:0040CD46                 align 10h
.text:0040CD50
.text:0040CD50 ; =============== S U B R O U T I N E =======================================
.text:0040CD50
.text:0040CD50 ; Attributes: thunk
.text:0040CD50
.text:0040CD50 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040CD50 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040CD50                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040CD50
.text:0040CD50 Signal          = dword ptr  4
.text:0040CD50 Function        = dword ptr  8
.text:0040CD50
.text:0040CD50                 jmp     ds:__imp_signal
.text:0040CD50 signal          endp
.text:0040CD50
.text:0040CD50 ; ---------------------------------------------------------------------------
.text:0040CD56                 align 10h
.text:0040CD60
.text:0040CD60 ; =============== S U B R O U T I N E =======================================
.text:0040CD60
.text:0040CD60 ; Attributes: thunk
.text:0040CD60
.text:0040CD60 ; int *__cdecl _p__fmode()
.text:0040CD60 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040CD60                 jmp     ds:__imp___p__fmode
.text:0040CD60 __p__fmode      endp
.text:0040CD60
.text:0040CD60 ; ---------------------------------------------------------------------------
.text:0040CD66                 align 10h
.text:0040CD70
.text:0040CD70 ; =============== S U B R O U T I N E =======================================
.text:0040CD70
.text:0040CD70 ; Attributes: thunk
.text:0040CD70
.text:0040CD70 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040CD70 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040CD70                                         ; sub_401080+90↑p ...
.text:0040CD70
.text:0040CD70 FileHandle      = dword ptr  4
.text:0040CD70 Mode            = dword ptr  8
.text:0040CD70
.text:0040CD70                 jmp     ds:__imp__setmode
.text:0040CD70 _setmode        endp
.text:0040CD70
.text:0040CD70 ; ---------------------------------------------------------------------------
.text:0040CD76                 align 10h
.text:0040CD80
.text:0040CD80 ; =============== S U B R O U T I N E =======================================
.text:0040CD80
.text:0040CD80 ; Attributes: thunk
.text:0040CD80
.text:0040CD80 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040CD80                 jmp     ds:__imp___getmainargs
.text:0040CD80 __getmainargs   endp
.text:0040CD80
.text:0040CD80 ; ---------------------------------------------------------------------------
.text:0040CD86                 align 10h
.text:0040CD90
.text:0040CD90 ; =============== S U B R O U T I N E =======================================
.text:0040CD90
.text:0040CD90 ; Attributes: thunk
.text:0040CD90
.text:0040CD90 ; int *__cdecl errno()
.text:0040CD90 _errno          proc near               ; CODE XREF: sub_401910:loc_401C14↑p
.text:0040CD90                                         ; sub_401DE0:loc_401FCB↑p ...
.text:0040CD90                 jmp     ds:__imp__errno
.text:0040CD90 _errno          endp
.text:0040CD90
.text:0040CD90 ; ---------------------------------------------------------------------------
.text:0040CD96                 align 10h
.text:0040CDA0
.text:0040CDA0 ; =============== S U B R O U T I N E =======================================
.text:0040CDA0
.text:0040CDA0 ; Attributes: thunk
.text:0040CDA0
.text:0040CDA0 ; void __cdecl free(void *Block)
.text:0040CDA0 free            proc near               ; CODE XREF: sub_401910+2DE↑p
.text:0040CDA0                                         ; sub_401DE0+1D4↑p ...
.text:0040CDA0
.text:0040CDA0 Block           = dword ptr  4
.text:0040CDA0
.text:0040CDA0                 jmp     ds:__imp_free
.text:0040CDA0 free            endp
.text:0040CDA0
.text:0040CDA0 ; ---------------------------------------------------------------------------
.text:0040CDA6                 align 10h
.text:0040CDB0
.text:0040CDB0 ; =============== S U B R O U T I N E =======================================
.text:0040CDB0
.text:0040CDB0 ; Attributes: thunk
.text:0040CDB0
.text:0040CDB0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040CDB0 setlocale       proc near               ; CODE XREF: sub_401910+3A↑p
.text:0040CDB0
.text:0040CDB0 Category        = dword ptr  4
.text:0040CDB0 Locale          = dword ptr  8
.text:0040CDB0
.text:0040CDB0                 jmp     ds:__imp_setlocale
.text:0040CDB0 setlocale       endp
.text:0040CDB0
.text:0040CDB0 ; ---------------------------------------------------------------------------
.text:0040CDB6                 align 10h
.text:0040CDC0
.text:0040CDC0 ; =============== S U B R O U T I N E =======================================
.text:0040CDC0
.text:0040CDC0 ; Attributes: noreturn thunk
.text:0040CDC0
.text:0040CDC0 ; void __cdecl __noreturn exit(int Code)
.text:0040CDC0 exit            proc near               ; CODE XREF: sub_401910:loc_401A15↑p
.text:0040CDC0                                         ; .text:00401CFE↑p ...
.text:0040CDC0
.text:0040CDC0 Code            = dword ptr  4
.text:0040CDC0
.text:0040CDC0                 jmp     ds:__imp_exit
.text:0040CDC0 exit            endp
.text:0040CDC0
.text:0040CDC0 ; ---------------------------------------------------------------------------
.text:0040CDC6                 align 10h
.text:0040CDD0
.text:0040CDD0 ; =============== S U B R O U T I N E =======================================
.text:0040CDD0
.text:0040CDD0 ; Attributes: thunk
.text:0040CDD0
.text:0040CDD0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040CDD0 fputs           proc near               ; CODE XREF: sub_401910+18F↑p
.text:0040CDD0                                         ; sub_401910+1B1↑p ...
.text:0040CDD0
.text:0040CDD0 Buffer          = dword ptr  4
.text:0040CDD0 Stream          = dword ptr  8
.text:0040CDD0
.text:0040CDD0                 jmp     ds:__imp_fputs
.text:0040CDD0 fputs           endp
.text:0040CDD0
.text:0040CDD0 ; ---------------------------------------------------------------------------
.text:0040CDD6                 align 10h
.text:0040CDE0
.text:0040CDE0 ; =============== S U B R O U T I N E =======================================
.text:0040CDE0
.text:0040CDE0 ; Attributes: thunk
.text:0040CDE0
.text:0040CDE0 ; int printf(const char *const Format, ...)
.text:0040CDE0 printf          proc near               ; CODE XREF: sub_401910+16D↑p
.text:0040CDE0                                         ; sub_401910+212↑p ...
.text:0040CDE0
.text:0040CDE0 Format          = dword ptr  4
.text:0040CDE0
.text:0040CDE0                 jmp     ds:__imp_printf
.text:0040CDE0 printf          endp
.text:0040CDE0
.text:0040CDE0 ; ---------------------------------------------------------------------------
.text:0040CDE6                 align 10h
.text:0040CDF0
.text:0040CDF0 ; =============== S U B R O U T I N E =======================================
.text:0040CDF0
.text:0040CDF0 ; Attributes: thunk
.text:0040CDF0
.text:0040CDF0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040CDF0 fprintf         proc near               ; CODE XREF: sub_401910+F9↑p
.text:0040CDF0                                         ; .text:00401CF6↑p ...
.text:0040CDF0
.text:0040CDF0 Stream          = dword ptr  4
.text:0040CDF0 Format          = dword ptr  8
.text:0040CDF0
.text:0040CDF0                 jmp     ds:__imp_fprintf
.text:0040CDF0 fprintf         endp
.text:0040CDF0
.text:0040CDF0 ; ---------------------------------------------------------------------------
.text:0040CDF6                 align 10h
.text:0040CE00
.text:0040CE00 ; =============== S U B R O U T I N E =======================================
.text:0040CE00
.text:0040CE00 ; Attributes: thunk
.text:0040CE00
.text:0040CE00 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040CE00 memcpy          proc near               ; CODE XREF: sub_401DE0+150↑p
.text:0040CE00                                         ; sub_401DE0+2DD↑p ...
.text:0040CE00
.text:0040CE00 Src             = dword ptr  8
.text:0040CE00 Size            = dword ptr  0Ch
.text:0040CE00
.text:0040CE00                 jmp     ds:__imp_memcpy
.text:0040CE00 memcpy          endp
.text:0040CE00
.text:0040CE00 ; ---------------------------------------------------------------------------
.text:0040CE06                 align 10h
.text:0040CE10
.text:0040CE10 ; =============== S U B R O U T I N E =======================================
.text:0040CE10
.text:0040CE10 ; Attributes: thunk
.text:0040CE10
.text:0040CE10 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:0040CE10 memmove         proc near               ; CODE XREF: sub_401DE0+2C5↑p
.text:0040CE10
.text:0040CE10 Src             = dword ptr  8
.text:0040CE10 Size            = dword ptr  0Ch
.text:0040CE10
.text:0040CE10                 jmp     ds:__imp_memmove
.text:0040CE10 memmove         endp
.text:0040CE10
.text:0040CE10 ; ---------------------------------------------------------------------------
.text:0040CE16                 align 10h
.text:0040CE20
.text:0040CE20 ; =============== S U B R O U T I N E =======================================
.text:0040CE20
.text:0040CE20 ; Attributes: thunk
.text:0040CE20
.text:0040CE20 ; size_t __cdecl strlen(const char *Str)
.text:0040CE20 strlen          proc near               ; CODE XREF: sub_401DE0+262↑p
.text:0040CE20                                         ; sub_401DE0+26E↑p ...
.text:0040CE20
.text:0040CE20 Str             = dword ptr  4
.text:0040CE20
.text:0040CE20                 jmp     ds:__imp_strlen
.text:0040CE20 strlen          endp
.text:0040CE20
.text:0040CE20 ; ---------------------------------------------------------------------------
.text:0040CE26                 align 10h
.text:0040CE30
.text:0040CE30 ; =============== S U B R O U T I N E =======================================
.text:0040CE30
.text:0040CE30 ; Attributes: thunk
.text:0040CE30
.text:0040CE30 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040CE30 strchr          proc near               ; CODE XREF: sub_401DE0+62↑p
.text:0040CE30                                         ; sub_4024F0+539↑p ...
.text:0040CE30
.text:0040CE30 Str             = dword ptr  4
.text:0040CE30 Val             = dword ptr  8
.text:0040CE30
.text:0040CE30                 jmp     ds:__imp_strchr
.text:0040CE30 strchr          endp
.text:0040CE30
.text:0040CE30 ; ---------------------------------------------------------------------------
.text:0040CE36                 align 10h
.text:0040CE40
.text:0040CE40 ; =============== S U B R O U T I N E =======================================
.text:0040CE40
.text:0040CE40 ; Attributes: noreturn thunk
.text:0040CE40
.text:0040CE40 _assert         proc near               ; CODE XREF: sub_402280+DD↑p
.text:0040CE40                                         ; sub_40ACB0+414↑p
.text:0040CE40                 jmp     ds:__imp__assert
.text:0040CE40 _assert         endp
.text:0040CE40
.text:0040CE40 ; ---------------------------------------------------------------------------
.text:0040CE46                 align 10h
.text:0040CE50
.text:0040CE50 ; =============== S U B R O U T I N E =======================================
.text:0040CE50
.text:0040CE50 ; Attributes: thunk
.text:0040CE50
.text:0040CE50 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040CE50 strncmp         proc near               ; CODE XREF: sub_4024F0+30F↑p
.text:0040CE50                                         ; sub_4024F0+769↑p
.text:0040CE50
.text:0040CE50 Str1            = dword ptr  4
.text:0040CE50 Str2            = dword ptr  8
.text:0040CE50 MaxCount        = dword ptr  0Ch
.text:0040CE50
.text:0040CE50                 jmp     ds:__imp_strncmp
.text:0040CE50 strncmp         endp
.text:0040CE50
.text:0040CE50 ; ---------------------------------------------------------------------------
.text:0040CE56                 align 10h
.text:0040CE60
.text:0040CE60 ; =============== S U B R O U T I N E =======================================
.text:0040CE60
.text:0040CE60 ; Attributes: thunk
.text:0040CE60
.text:0040CE60 ; char *__cdecl getenv(const char *VarName)
.text:0040CE60 getenv          proc near               ; CODE XREF: sub_4024F0+C27↑p
.text:0040CE60                                         ; sub_4060D0+3EE↑p ...
.text:0040CE60
.text:0040CE60 VarName         = dword ptr  4
.text:0040CE60
.text:0040CE60                 jmp     ds:__imp_getenv
.text:0040CE60 getenv          endp
.text:0040CE60
.text:0040CE60 ; ---------------------------------------------------------------------------
.text:0040CE66                 align 10h
.text:0040CE70
.text:0040CE70 ; =============== S U B R O U T I N E =======================================
.text:0040CE70
.text:0040CE70 ; Attributes: thunk
.text:0040CE70
.text:0040CE70 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040CE70 vfprintf        proc near               ; CODE XREF: sub_403780+C1↑p
.text:0040CE70                                         ; sub_405340+49↑p ...
.text:0040CE70
.text:0040CE70 Stream          = dword ptr  4
.text:0040CE70 Format          = dword ptr  8
.text:0040CE70 ArgList         = dword ptr  0Ch
.text:0040CE70
.text:0040CE70                 jmp     ds:__imp_vfprintf
.text:0040CE70 vfprintf        endp
.text:0040CE70
.text:0040CE70 ; ---------------------------------------------------------------------------
.text:0040CE76                 align 10h
.text:0040CE80
.text:0040CE80 ; =============== S U B R O U T I N E =======================================
.text:0040CE80
.text:0040CE80 ; Attributes: noreturn thunk
.text:0040CE80
.text:0040CE80 ; void __cdecl __noreturn abort()
.text:0040CE80 abort           proc near               ; CODE XREF: sub_403780:loc_40381C↑p
.text:0040CE80                                         ; sub_403F10+32↑p ...
.text:0040CE80                 jmp     ds:__imp_abort
.text:0040CE80 abort           endp
.text:0040CE80
.text:0040CE80 ; ---------------------------------------------------------------------------
.text:0040CE86                 align 10h
.text:0040CE90
.text:0040CE90 ; =============== S U B R O U T I N E =======================================
.text:0040CE90
.text:0040CE90 ; Attributes: thunk
.text:0040CE90
.text:0040CE90 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040CE90 _flsbuf         proc near               ; CODE XREF: sub_403780+128↑p
.text:0040CE90                                         ; sub_403780+13A↑p ...
.text:0040CE90
.text:0040CE90 File            = dword ptr  8
.text:0040CE90
.text:0040CE90                 jmp     ds:__imp__flsbuf
.text:0040CE90 _flsbuf         endp
.text:0040CE90
.text:0040CE90 ; ---------------------------------------------------------------------------
.text:0040CE96                 align 10h
.text:0040CEA0
.text:0040CEA0 ; =============== S U B R O U T I N E =======================================
.text:0040CEA0
.text:0040CEA0 ; Attributes: thunk
.text:0040CEA0
.text:0040CEA0 ; int __cdecl fclose(FILE *Stream)
.text:0040CEA0 fclose          proc near               ; CODE XREF: sub_403B00+27↑p
.text:0040CEA0                                         ; .text:0040A5AE↑p
.text:0040CEA0
.text:0040CEA0 Stream          = dword ptr  4
.text:0040CEA0
.text:0040CEA0                 jmp     ds:__imp_fclose
.text:0040CEA0 fclose          endp
.text:0040CEA0
.text:0040CEA0 ; ---------------------------------------------------------------------------
.text:0040CEA6                 align 10h
.text:0040CEB0
.text:0040CEB0 ; =============== S U B R O U T I N E =======================================
.text:0040CEB0
.text:0040CEB0 ; Attributes: thunk
.text:0040CEB0
.text:0040CEB0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040CEB0 memset          proc near               ; CODE XREF: .text:00403D46↑p
.text:0040CEB0
.text:0040CEB0 Val             = dword ptr  8
.text:0040CEB0 Size            = dword ptr  0Ch
.text:0040CEB0
.text:0040CEB0                 jmp     ds:__imp_memset
.text:0040CEB0 memset          endp
.text:0040CEB0
.text:0040CEB0 ; ---------------------------------------------------------------------------
.text:0040CEB6                 align 10h
.text:0040CEC0
.text:0040CEC0 ; =============== S U B R O U T I N E =======================================
.text:0040CEC0
.text:0040CEC0 ; Attributes: thunk
.text:0040CEC0
.text:0040CEC0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040CEC0 calloc          proc near               ; CODE XREF: .text:00403D83↑p
.text:0040CEC0                                         ; sub_408180+AC↑p
.text:0040CEC0
.text:0040CEC0 Count           = dword ptr  4
.text:0040CEC0 Size            = dword ptr  8
.text:0040CEC0
.text:0040CEC0                 jmp     ds:__imp_calloc
.text:0040CEC0 calloc          endp
.text:0040CEC0
.text:0040CEC0 ; ---------------------------------------------------------------------------
.text:0040CEC6                 align 10h
.text:0040CED0
.text:0040CED0 ; =============== S U B R O U T I N E =======================================
.text:0040CED0
.text:0040CED0 ; Attributes: thunk
.text:0040CED0
.text:0040CED0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040CED0 realloc         proc near               ; CODE XREF: .text:00403C80↑p
.text:0040CED0                                         ; sub_403CB0+16↑p ...
.text:0040CED0
.text:0040CED0 Block           = dword ptr  4
.text:0040CED0 Size            = dword ptr  8
.text:0040CED0
.text:0040CED0                 jmp     ds:__imp_realloc
.text:0040CED0 realloc         endp
.text:0040CED0
.text:0040CED0 ; ---------------------------------------------------------------------------
.text:0040CED6                 align 10h
.text:0040CEE0
.text:0040CEE0 ; =============== S U B R O U T I N E =======================================
.text:0040CEE0
.text:0040CEE0 ; Attributes: thunk
.text:0040CEE0
.text:0040CEE0 ; void *__cdecl malloc(size_t Size)
.text:0040CEE0 malloc          proc near               ; CODE XREF: .text:00403C04↑p
.text:0040CEE0                                         ; sub_403C20+E↑p ...
.text:0040CEE0
.text:0040CEE0 Size            = dword ptr  4
.text:0040CEE0
.text:0040CEE0                 jmp     ds:__imp_malloc
.text:0040CEE0 malloc          endp
.text:0040CEE0
.text:0040CEE0 ; ---------------------------------------------------------------------------
.text:0040CEE6                 align 10h
.text:0040CEF0
.text:0040CEF0 ; =============== S U B R O U T I N E =======================================
.text:0040CEF0
.text:0040CEF0 ; Attributes: thunk
.text:0040CEF0
.text:0040CEF0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040CEF0 iswctype        proc near               ; CODE XREF: sub_403FE0+78B↑p
.text:0040CEF0
.text:0040CEF0 C               = word ptr  4
.text:0040CEF0 Type            = word ptr  8
.text:0040CEF0
.text:0040CEF0                 jmp     ds:__imp_iswctype
.text:0040CEF0 iswctype        endp
.text:0040CEF0
.text:0040CEF0 ; ---------------------------------------------------------------------------
.text:0040CEF6                 align 10h
.text:0040CF00
.text:0040CF00 ; =============== S U B R O U T I N E =======================================
.text:0040CF00
.text:0040CF00 ; Attributes: thunk
.text:0040CF00
.text:0040CF00 ; int __cdecl isctype(int C, int Type)
.text:0040CF00 _isctype        proc near               ; CODE XREF: sub_403FE0+610↑p
.text:0040CF00
.text:0040CF00 C               = dword ptr  4
.text:0040CF00 Type            = dword ptr  8
.text:0040CF00
.text:0040CF00                 jmp     ds:__imp__isctype
.text:0040CF00 _isctype        endp
.text:0040CF00
.text:0040CF00 ; ---------------------------------------------------------------------------
.text:0040CF06                 align 10h
.text:0040CF10
.text:0040CF10 ; =============== S U B R O U T I N E =======================================
.text:0040CF10
.text:0040CF10 ; Attributes: thunk
.text:0040CF10
.text:0040CF10 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040CF10 strcmp          proc near               ; CODE XREF: sub_405444+180↑p
.text:0040CF10                                         ; .text:004099AB↑p
.text:0040CF10
.text:0040CF10 Str1            = dword ptr  4
.text:0040CF10 Str2            = dword ptr  8
.text:0040CF10
.text:0040CF10                 jmp     ds:__imp_strcmp
.text:0040CF10 strcmp          endp
.text:0040CF10
.text:0040CF10 ; ---------------------------------------------------------------------------
.text:0040CF16                 align 10h
.text:0040CF20
.text:0040CF20 ; =============== S U B R O U T I N E =======================================
.text:0040CF20
.text:0040CF20 ; Attributes: thunk
.text:0040CF20
.text:0040CF20 ; int __cdecl fflush(FILE *Stream)
.text:0040CF20 fflush          proc near               ; CODE XREF: sub_405340+19↑p
.text:0040CF20                                         ; sub_405340+81↑p ...
.text:0040CF20
.text:0040CF20 Stream          = dword ptr  4
.text:0040CF20
.text:0040CF20                 jmp     ds:__imp_fflush
.text:0040CF20 fflush          endp
.text:0040CF20
.text:0040CF20 ; ---------------------------------------------------------------------------
.text:0040CF26                 align 10h
.text:0040CF30
.text:0040CF30 ; =============== S U B R O U T I N E =======================================
.text:0040CF30
.text:0040CF30 ; Attributes: thunk
.text:0040CF30
.text:0040CF30 ; char *__cdecl strerror(int ErrorMessage)
.text:0040CF30 strerror        proc near               ; CODE XREF: sub_405340+A5↑p
.text:0040CF30                                         ; sub_405444+10F↑p
.text:0040CF30
.text:0040CF30 ErrorMessage    = dword ptr  4
.text:0040CF30
.text:0040CF30                 jmp     ds:__imp_strerror
.text:0040CF30 strerror        endp
.text:0040CF30
.text:0040CF30 ; ---------------------------------------------------------------------------
.text:0040CF36                 align 10h
.text:0040CF40
.text:0040CF40 ; =============== S U B R O U T I N E =======================================
.text:0040CF40
.text:0040CF40 ; Attributes: thunk
.text:0040CF40
.text:0040CF40 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040CF40 strcat          proc near               ; CODE XREF: sub_4057E0+74↑p
.text:0040CF40                                         ; sub_405A80+98↑p ...
.text:0040CF40
.text:0040CF40 Destination     = dword ptr  4
.text:0040CF40 Source          = dword ptr  8
.text:0040CF40
.text:0040CF40                 jmp     ds:__imp_strcat
.text:0040CF40 strcat          endp
.text:0040CF40
.text:0040CF40 ; ---------------------------------------------------------------------------
.text:0040CF46                 align 10h
.text:0040CF50
.text:0040CF50 ; =============== S U B R O U T I N E =======================================
.text:0040CF50
.text:0040CF50 ; Attributes: thunk
.text:0040CF50
.text:0040CF50 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040CF50 strcpy          proc near               ; CODE XREF: sub_4057E0+35↑p
.text:0040CF50                                         ; sub_405A80+73↑p ...
.text:0040CF50
.text:0040CF50 Destination     = dword ptr  4
.text:0040CF50 Source          = dword ptr  8
.text:0040CF50
.text:0040CF50                 jmp     ds:__imp_strcpy
.text:0040CF50 strcpy          endp
.text:0040CF50
.text:0040CF50 ; ---------------------------------------------------------------------------
.text:0040CF56                 align 10h
.text:0040CF60
.text:0040CF60 ; =============== S U B R O U T I N E =======================================
.text:0040CF60
.text:0040CF60 ; Attributes: thunk
.text:0040CF60
.text:0040CF60 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040CF60 strrchr         proc near               ; CODE XREF: sub_4057E0+49↑p
.text:0040CF60                                         ; sub_4060D0+CB↑p ...
.text:0040CF60
.text:0040CF60 Str             = dword ptr  4
.text:0040CF60
.text:0040CF60                 jmp     ds:__imp_strrchr
.text:0040CF60 strrchr         endp
.text:0040CF60
.text:0040CF60 ; ---------------------------------------------------------------------------
.text:0040CF66                 align 10h
.text:0040CF70
.text:0040CF70 ; =============== S U B R O U T I N E =======================================
.text:0040CF70
.text:0040CF70 ; Attributes: thunk
.text:0040CF70
.text:0040CF70 ; char *__cdecl getcwd(char *DstBuf, int SizeInBytes)
.text:0040CF70 _getcwd         proc near               ; CODE XREF: j__getcwd↑j
.text:0040CF70
.text:0040CF70 DstBuf          = dword ptr  4
.text:0040CF70 SizeInBytes     = dword ptr  8
.text:0040CF70
.text:0040CF70                 jmp     ds:__imp__getcwd
.text:0040CF70 _getcwd         endp
.text:0040CF70
.text:0040CF70 ; ---------------------------------------------------------------------------
.text:0040CF76                 align 10h
.text:0040CF80
.text:0040CF80 ; =============== S U B R O U T I N E =======================================
.text:0040CF80
.text:0040CF80 ; Attributes: thunk
.text:0040CF80
.text:0040CF80 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040CF80 strstr          proc near               ; CODE XREF: sub_4060D0+3BF↑p
.text:0040CF80                                         ; sub_4060D0+3DC↑p ...
.text:0040CF80
.text:0040CF80 Str             = dword ptr  4
.text:0040CF80 SubStr          = dword ptr  8
.text:0040CF80
.text:0040CF80                 jmp     ds:__imp_strstr
.text:0040CF80 strstr          endp
.text:0040CF80
.text:0040CF80 ; ---------------------------------------------------------------------------
.text:0040CF86                 align 10h
.text:0040CF90
.text:0040CF90 ; =============== S U B R O U T I N E =======================================
.text:0040CF90
.text:0040CF90 ; Attributes: thunk
.text:0040CF90
.text:0040CF90 ; int __cdecl isalpha(int C)
.text:0040CF90 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040CF90
.text:0040CF90 C               = dword ptr  4
.text:0040CF90
.text:0040CF90                 jmp     ds:__imp_isalpha
.text:0040CF90 isalpha         endp
.text:0040CF90
.text:0040CF90 ; ---------------------------------------------------------------------------
.text:0040CF96                 align 10h
.text:0040CFA0
.text:0040CFA0 ; =============== S U B R O U T I N E =======================================
.text:0040CFA0
.text:0040CFA0 ; Attributes: thunk
.text:0040CFA0
.text:0040CFA0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040CFA0 _stricmp_0      proc near               ; CODE XREF: .text:00407AF4↑p
.text:0040CFA0
.text:0040CFA0 String1         = dword ptr  4
.text:0040CFA0 String2         = dword ptr  8
.text:0040CFA0
.text:0040CFA0                 jmp     ds:__imp__stricmp_0
.text:0040CFA0 _stricmp_0      endp
.text:0040CFA0
.text:0040CFA0 ; ---------------------------------------------------------------------------
.text:0040CFA6                 align 10h
.text:0040CFB0
.text:0040CFB0 ; =============== S U B R O U T I N E =======================================
.text:0040CFB0
.text:0040CFB0 ; Attributes: thunk
.text:0040CFB0
.text:0040CFB0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040CFB0 strncpy         proc near               ; CODE XREF: sub_408180+BE↑p
.text:0040CFB0                                         ; .text:004089FA↑p ...
.text:0040CFB0
.text:0040CFB0 Destination     = dword ptr  4
.text:0040CFB0 Source          = dword ptr  8
.text:0040CFB0 Count           = dword ptr  0Ch
.text:0040CFB0
.text:0040CFB0                 jmp     ds:__imp_strncpy
.text:0040CFB0 strncpy         endp
.text:0040CFB0
.text:0040CFB0 ; ---------------------------------------------------------------------------
.text:0040CFB6                 align 10h
.text:0040CFC0
.text:0040CFC0 ; =============== S U B R O U T I N E =======================================
.text:0040CFC0
.text:0040CFC0 ; Attributes: thunk
.text:0040CFC0
.text:0040CFC0 ; int __cdecl toupper(int C)
.text:0040CFC0 toupper         proc near               ; CODE XREF: sub_408180+10E↑p
.text:0040CFC0
.text:0040CFC0 C               = dword ptr  4
.text:0040CFC0
.text:0040CFC0                 jmp     ds:__imp_toupper
.text:0040CFC0 toupper         endp
.text:0040CFC0
.text:0040CFC0 ; ---------------------------------------------------------------------------
.text:0040CFC6                 align 10h
.text:0040CFD0
.text:0040CFD0 ; =============== S U B R O U T I N E =======================================
.text:0040CFD0
.text:0040CFD0 ; Attributes: thunk
.text:0040CFD0
.text:0040CFD0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040CFD0 sprintf         proc near               ; CODE XREF: .text:0040906A↑p
.text:0040CFD0                                         ; .text:0040908B↑p ...
.text:0040CFD0
.text:0040CFD0 Buffer          = dword ptr  4
.text:0040CFD0 Format          = dword ptr  8
.text:0040CFD0
.text:0040CFD0                 jmp     ds:__imp_sprintf
.text:0040CFD0 sprintf         endp
.text:0040CFD0
.text:0040CFD0 ; ---------------------------------------------------------------------------
.text:0040CFD6                 align 10h
.text:0040CFE0
.text:0040CFE0 ; =============== S U B R O U T I N E =======================================
.text:0040CFE0
.text:0040CFE0 ; Attributes: thunk
.text:0040CFE0
.text:0040CFE0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040CFE0 sscanf          proc near               ; CODE XREF: .text:00409BEE↑p
.text:0040CFE0
.text:0040CFE0 Buffer          = dword ptr  4
.text:0040CFE0 Format          = dword ptr  8
.text:0040CFE0
.text:0040CFE0                 jmp     ds:__imp_sscanf
.text:0040CFE0 sscanf          endp
.text:0040CFE0
.text:0040CFE0 ; ---------------------------------------------------------------------------
.text:0040CFE6                 align 10h
.text:0040CFF0
.text:0040CFF0 ; =============== S U B R O U T I N E =======================================
.text:0040CFF0
.text:0040CFF0 ; Attributes: thunk
.text:0040CFF0
.text:0040CFF0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040CFF0 strspn          proc near               ; CODE XREF: .text:00409A3A↑p
.text:0040CFF0                                         ; .text:00409C54↑p ...
.text:0040CFF0
.text:0040CFF0 Str             = dword ptr  4
.text:0040CFF0 Control         = dword ptr  8
.text:0040CFF0
.text:0040CFF0                 jmp     ds:__imp_strspn
.text:0040CFF0 strspn          endp
.text:0040CFF0
.text:0040CFF0 ; ---------------------------------------------------------------------------
.text:0040CFF6                 align 10h
.text:0040D000
.text:0040D000 ; =============== S U B R O U T I N E =======================================
.text:0040D000
.text:0040D000 ; Attributes: thunk
.text:0040D000
.text:0040D000 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040D000 fopen           proc near               ; CODE XREF: sub_40A4EF+26↑p
.text:0040D000                                         ; sub_40A4EF+99↑p
.text:0040D000
.text:0040D000 FileName        = dword ptr  4
.text:0040D000 Mode            = dword ptr  8
.text:0040D000
.text:0040D000                 jmp     ds:__imp_fopen
.text:0040D000 fopen           endp
.text:0040D000
.text:0040D000 ; ---------------------------------------------------------------------------
.text:0040D006                 align 10h
.text:0040D010
.text:0040D010 ; =============== S U B R O U T I N E =======================================
.text:0040D010
.text:0040D010 ; Attributes: thunk
.text:0040D010
.text:0040D010 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040D010 _get_osfhandle  proc near               ; CODE XREF: sub_40A6A0+3A↑p
.text:0040D010                                         ; sub_40A760+15↑p
.text:0040D010
.text:0040D010 FileHandle      = dword ptr  4
.text:0040D010
.text:0040D010                 jmp     ds:__imp__get_osfhandle
.text:0040D010 _get_osfhandle  endp
.text:0040D010
.text:0040D010 ; ---------------------------------------------------------------------------
.text:0040D016                 align 10h
.text:0040D020
.text:0040D020 ; =============== S U B R O U T I N E =======================================
.text:0040D020
.text:0040D020 ; Attributes: thunk
.text:0040D020
.text:0040D020 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040D020 _filelengthi64  proc near               ; CODE XREF: sub_40A760+1F↑p
.text:0040D020
.text:0040D020 FileHandle      = dword ptr  4
.text:0040D020
.text:0040D020                 jmp     ds:__imp__filelengthi64
.text:0040D020 _filelengthi64  endp
.text:0040D020
.text:0040D020 ; ---------------------------------------------------------------------------
.text:0040D026                 align 10h
.text:0040D030
.text:0040D030 ; =============== S U B R O U T I N E =======================================
.text:0040D030
.text:0040D030 ; Attributes: thunk
.text:0040D030
.text:0040D030 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040D030 strpbrk         proc near               ; CODE XREF: sub_40A7C0+87↑p
.text:0040D030
.text:0040D030 Str             = dword ptr  4
.text:0040D030 Control         = dword ptr  8
.text:0040D030
.text:0040D030                 jmp     ds:__imp_strpbrk
.text:0040D030 strpbrk         endp
.text:0040D030
.text:0040D030 ; ---------------------------------------------------------------------------
.text:0040D036                 align 10h
.text:0040D040
.text:0040D040 ; =============== S U B R O U T I N E =======================================
.text:0040D040
.text:0040D040 ; Attributes: thunk
.text:0040D040
.text:0040D040 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040D040 _fdopen         proc near               ; CODE XREF: sub_40A860+69↑p
.text:0040D040
.text:0040D040 FileHandle      = dword ptr  4
.text:0040D040 Format          = dword ptr  8
.text:0040D040
.text:0040D040                 jmp     ds:__imp__fdopen
.text:0040D040 _fdopen         endp
.text:0040D040
.text:0040D040 ; ---------------------------------------------------------------------------
.text:0040D046                 align 10h
.text:0040D050
.text:0040D050 ; =============== S U B R O U T I N E =======================================
.text:0040D050
.text:0040D050 ; Attributes: thunk
.text:0040D050
.text:0040D050 ; int __cdecl close(int FileHandle)
.text:0040D050 _close          proc near               ; CODE XREF: sub_40A860+90↑p
.text:0040D050
.text:0040D050 FileHandle      = dword ptr  4
.text:0040D050
.text:0040D050                 jmp     ds:__imp__close
.text:0040D050 _close          endp
.text:0040D050
.text:0040D050 ; ---------------------------------------------------------------------------
.text:0040D056                 align 10h
.text:0040D060
.text:0040D060 ; =============== S U B R O U T I N E =======================================
.text:0040D060
.text:0040D060 ; Attributes: thunk
.text:0040D060
.text:0040D060 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040D060 _open           proc near               ; CODE XREF: sub_40ACB0:loc_40B040↑p
.text:0040D060
.text:0040D060 FileName        = dword ptr  4
.text:0040D060 OpenFlag        = dword ptr  8
.text:0040D060
.text:0040D060                 jmp     ds:__imp__open
.text:0040D060 _open           endp
.text:0040D060
.text:0040D060 ; ---------------------------------------------------------------------------
.text:0040D066                 align 10h
.text:0040D070
.text:0040D070 ; =============== S U B R O U T I N E =======================================
.text:0040D070
.text:0040D070 ; Attributes: thunk
.text:0040D070
.text:0040D070 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040D070 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040D070
.text:0040D070 lpTopLevelExceptionFilter= dword ptr  4
.text:0040D070
.text:0040D070                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040D070 SetUnhandledExceptionFilter endp
.text:0040D070
.text:0040D070 ; ---------------------------------------------------------------------------
.text:0040D076                 align 10h
.text:0040D080
.text:0040D080 ; =============== S U B R O U T I N E =======================================
.text:0040D080
.text:0040D080 ; Attributes: noreturn thunk
.text:0040D080
.text:0040D080 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040D080 ExitProcess     proc near               ; CODE XREF: sub_401080+F4↑p
.text:0040D080
.text:0040D080 uExitCode       = dword ptr  4
.text:0040D080
.text:0040D080                 jmp     ds:__imp_ExitProcess
.text:0040D080 ExitProcess     endp
.text:0040D080
.text:0040D080 ; ---------------------------------------------------------------------------
.text:0040D086                 align 10h
.text:0040D090
.text:0040D090 ; =============== S U B R O U T I N E =======================================
.text:0040D090
.text:0040D090 ; Attributes: thunk
.text:0040D090
.text:0040D090 ; BOOL __stdcall AreFileApisANSI()
.text:0040D090 AreFileApisANSI proc near               ; CODE XREF: sub_405660+89↑p
.text:0040D090                 jmp     ds:__imp_AreFileApisANSI
.text:0040D090 AreFileApisANSI endp
.text:0040D090
.text:0040D090 ; ---------------------------------------------------------------------------
.text:0040D096                 align 10h
.text:0040D0A0
.text:0040D0A0 ; =============== S U B R O U T I N E =======================================
.text:0040D0A0
.text:0040D0A0 ; Attributes: thunk
.text:0040D0A0
.text:0040D0A0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040D0A0 MultiByteToWideChar proc near           ; CODE XREF: sub_405660+BD↑p
.text:0040D0A0
.text:0040D0A0 CodePage        = dword ptr  4
.text:0040D0A0 dwFlags         = dword ptr  8
.text:0040D0A0 lpMultiByteStr  = dword ptr  0Ch
.text:0040D0A0 cbMultiByte     = dword ptr  10h
.text:0040D0A0 lpWideCharStr   = dword ptr  14h
.text:0040D0A0 cchWideChar     = dword ptr  18h
.text:0040D0A0
.text:0040D0A0                 jmp     ds:__imp_MultiByteToWideChar
.text:0040D0A0 MultiByteToWideChar endp
.text:0040D0A0
.text:0040D0A0 ; ---------------------------------------------------------------------------
.text:0040D0A6                 align 10h
.text:0040D0B0
.text:0040D0B0 ; =============== S U B R O U T I N E =======================================
.text:0040D0B0
.text:0040D0B0 ; Attributes: thunk
.text:0040D0B0
.text:0040D0B0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040D0B0 lstrcpyA        proc near               ; CODE XREF: sub_405660+128↑p
.text:0040D0B0
.text:0040D0B0 lpString1       = dword ptr  4
.text:0040D0B0 lpString2       = dword ptr  8
.text:0040D0B0
.text:0040D0B0                 jmp     ds:__imp_lstrcpyA
.text:0040D0B0 lstrcpyA        endp
.text:0040D0B0
.text:0040D0B0 ; ---------------------------------------------------------------------------
.text:0040D0B6                 align 10h
.text:0040D0C0
.text:0040D0C0 ; =============== S U B R O U T I N E =======================================
.text:0040D0C0
.text:0040D0C0 ; Attributes: thunk
.text:0040D0C0
.text:0040D0C0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040D0C0 SetErrorMode    proc near               ; CODE XREF: sub_4057E0+80↑p
.text:0040D0C0                                         ; sub_4057E0+A9↑p ...
.text:0040D0C0
.text:0040D0C0 uMode           = dword ptr  4
.text:0040D0C0
.text:0040D0C0                 jmp     ds:__imp_SetErrorMode
.text:0040D0C0 SetErrorMode    endp
.text:0040D0C0
.text:0040D0C0 ; ---------------------------------------------------------------------------
.text:0040D0C6                 align 10h
.text:0040D0D0
.text:0040D0D0 ; =============== S U B R O U T I N E =======================================
.text:0040D0D0
.text:0040D0D0 ; Attributes: thunk
.text:0040D0D0
.text:0040D0D0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040D0D0 GetModuleHandleA proc near              ; CODE XREF: sub_405910+18↑p
.text:0040D0D0                                         ; sub_4060D0+329↑p ...
.text:0040D0D0
.text:0040D0D0 lpModuleName    = dword ptr  4
.text:0040D0D0
.text:0040D0D0                 jmp     ds:__imp_GetModuleHandleA
.text:0040D0D0 GetModuleHandleA endp
.text:0040D0D0
.text:0040D0D0 ; ---------------------------------------------------------------------------
.text:0040D0D6                 align 10h
.text:0040D0E0
.text:0040D0E0 ; =============== S U B R O U T I N E =======================================
.text:0040D0E0
.text:0040D0E0 ; Attributes: thunk
.text:0040D0E0
.text:0040D0E0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040D0E0 GetProcAddress  proc near               ; CODE XREF: sub_405910+33↑p
.text:0040D0E0                                         ; sub_405A80+2E↑p ...
.text:0040D0E0
.text:0040D0E0 hModule         = dword ptr  4
.text:0040D0E0 lpProcName      = dword ptr  8
.text:0040D0E0
.text:0040D0E0                 jmp     ds:__imp_GetProcAddress
.text:0040D0E0 GetProcAddress  endp
.text:0040D0E0
.text:0040D0E0 ; ---------------------------------------------------------------------------
.text:0040D0E6                 align 10h
.text:0040D0F0
.text:0040D0F0 ; =============== S U B R O U T I N E =======================================
.text:0040D0F0
.text:0040D0F0 ; Attributes: thunk
.text:0040D0F0
.text:0040D0F0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040D0F0 GetFileAttributesA proc near            ; CODE XREF: sub_405910+47↑p
.text:0040D0F0                                         ; sub_4080A0+62↑p
.text:0040D0F0
.text:0040D0F0 lpFileName      = dword ptr  4
.text:0040D0F0
.text:0040D0F0                 jmp     ds:__imp_GetFileAttributesA
.text:0040D0F0 GetFileAttributesA endp
.text:0040D0F0
.text:0040D0F0 ; ---------------------------------------------------------------------------
.text:0040D0F6                 align 10h
.text:0040D100
.text:0040D100 ; =============== S U B R O U T I N E =======================================
.text:0040D100
.text:0040D100 ; Attributes: thunk
.text:0040D100
.text:0040D100 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040D100 FreeLibrary     proc near               ; CODE XREF: sub_405910+A4↑p
.text:0040D100                                         ; sub_405A80+11D↑p ...
.text:0040D100
.text:0040D100 hLibModule      = dword ptr  4
.text:0040D100
.text:0040D100                 jmp     ds:__imp_FreeLibrary
.text:0040D100 FreeLibrary     endp
.text:0040D100
.text:0040D100 ; ---------------------------------------------------------------------------
.text:0040D106                 align 10h
.text:0040D110
.text:0040D110 ; =============== S U B R O U T I N E =======================================
.text:0040D110
.text:0040D110 ; Attributes: thunk
.text:0040D110
.text:0040D110 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040D110 FindFirstFileA  proc near               ; CODE XREF: sub_405910+CE↑p
.text:0040D110                                         ; sub_405A80+14F↑p ...
.text:0040D110
.text:0040D110 lpFileName      = dword ptr  4
.text:0040D110 lpFindFileData  = dword ptr  8
.text:0040D110
.text:0040D110                 jmp     ds:__imp_FindFirstFileA
.text:0040D110 FindFirstFileA  endp
.text:0040D110
.text:0040D110 ; ---------------------------------------------------------------------------
.text:0040D116                 align 10h
.text:0040D120
.text:0040D120 ; =============== S U B R O U T I N E =======================================
.text:0040D120
.text:0040D120 ; Attributes: thunk
.text:0040D120
.text:0040D120 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040D120 FindClose       proc near               ; CODE XREF: sub_405910+123↑p
.text:0040D120                                         ; sub_405A80+10E↑p ...
.text:0040D120
.text:0040D120 hFindFile       = dword ptr  4
.text:0040D120
.text:0040D120                 jmp     ds:__imp_FindClose
.text:0040D120 FindClose       endp
.text:0040D120
.text:0040D120 ; ---------------------------------------------------------------------------
.text:0040D126                 align 10h
.text:0040D130
.text:0040D130 ; =============== S U B R O U T I N E =======================================
.text:0040D130
.text:0040D130 ; Attributes: thunk
.text:0040D130
.text:0040D130 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040D130 LoadLibraryA    proc near               ; CODE XREF: sub_405A80+13↑p
.text:0040D130                                         ; sub_4060D0+134↑p ...
.text:0040D130
.text:0040D130 lpLibFileName   = dword ptr  4
.text:0040D130
.text:0040D130                 jmp     ds:__imp_LoadLibraryA
.text:0040D130 LoadLibraryA    endp
.text:0040D130
.text:0040D130 ; ---------------------------------------------------------------------------
.text:0040D136                 align 10h
.text:0040D140
.text:0040D140 ; =============== S U B R O U T I N E =======================================
.text:0040D140
.text:0040D140 ; Attributes: thunk
.text:0040D140
.text:0040D140 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040D140 FindNextFileA   proc near               ; CODE XREF: sub_405A80+FF↑p
.text:0040D140
.text:0040D140 hFindFile       = dword ptr  4
.text:0040D140 lpFindFileData  = dword ptr  8
.text:0040D140
.text:0040D140                 jmp     ds:__imp_FindNextFileA
.text:0040D140 FindNextFileA   endp
.text:0040D140
.text:0040D140 ; ---------------------------------------------------------------------------
.text:0040D146                 align 10h
.text:0040D150
.text:0040D150 ; =============== S U B R O U T I N E =======================================
.text:0040D150
.text:0040D150 ; Attributes: thunk
.text:0040D150
.text:0040D150 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040D150 GetFileType     proc near               ; CODE XREF: sub_405C00+43↑p
.text:0040D150                                         ; .text:004068BA↑p
.text:0040D150
.text:0040D150 hFile           = dword ptr  4
.text:0040D150
.text:0040D150                 jmp     ds:__imp_GetFileType
.text:0040D150 GetFileType     endp
.text:0040D150
.text:0040D150 ; ---------------------------------------------------------------------------
.text:0040D156                 align 10h
.text:0040D160
.text:0040D160 ; =============== S U B R O U T I N E =======================================
.text:0040D160
.text:0040D160 ; Attributes: thunk
.text:0040D160
.text:0040D160 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040D160 GetFileInformationByHandle proc near    ; CODE XREF: sub_405C00+69↑p
.text:0040D160
.text:0040D160 hFile           = dword ptr  4
.text:0040D160 lpFileInformation= dword ptr  8
.text:0040D160
.text:0040D160                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040D160 GetFileInformationByHandle endp
.text:0040D160
.text:0040D160 ; ---------------------------------------------------------------------------
.text:0040D166                 align 10h
.text:0040D170
.text:0040D170 ; =============== S U B R O U T I N E =======================================
.text:0040D170
.text:0040D170 ; Attributes: thunk
.text:0040D170
.text:0040D170 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040D170 GetFileSize     proc near               ; CODE XREF: sub_405C00+3F2↑p
.text:0040D170
.text:0040D170 hFile           = dword ptr  4
.text:0040D170 lpFileSizeHigh  = dword ptr  8
.text:0040D170
.text:0040D170                 jmp     ds:__imp_GetFileSize
.text:0040D170 GetFileSize     endp
.text:0040D170
.text:0040D170 ; ---------------------------------------------------------------------------
.text:0040D176                 align 10h
.text:0040D180
.text:0040D180 ; =============== S U B R O U T I N E =======================================
.text:0040D180
.text:0040D180 ; Attributes: thunk
.text:0040D180
.text:0040D180 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040D180 PeekNamedPipe   proc near               ; CODE XREF: sub_405C00+439↑p
.text:0040D180
.text:0040D180 hNamedPipe      = dword ptr  4
.text:0040D180 lpBuffer        = dword ptr  8
.text:0040D180 nBufferSize     = dword ptr  0Ch
.text:0040D180 lpBytesRead     = dword ptr  10h
.text:0040D180 lpTotalBytesAvail= dword ptr  14h
.text:0040D180 lpBytesLeftThisMessage= dword ptr  18h
.text:0040D180
.text:0040D180                 jmp     ds:__imp_PeekNamedPipe
.text:0040D180 PeekNamedPipe   endp
.text:0040D180
.text:0040D180 ; ---------------------------------------------------------------------------
.text:0040D186                 align 10h
.text:0040D190
.text:0040D190 ; =============== S U B R O U T I N E =======================================
.text:0040D190
.text:0040D190 ; Attributes: thunk
.text:0040D190
.text:0040D190 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040D190 GetDriveTypeA   proc near               ; CODE XREF: sub_4060D0+4C↑p
.text:0040D190
.text:0040D190 lpRootPathName  = dword ptr  4
.text:0040D190
.text:0040D190                 jmp     ds:__imp_GetDriveTypeA
.text:0040D190 GetDriveTypeA   endp
.text:0040D190
.text:0040D190 ; ---------------------------------------------------------------------------
.text:0040D196                 align 10h
.text:0040D1A0
.text:0040D1A0 ; =============== S U B R O U T I N E =======================================
.text:0040D1A0
.text:0040D1A0 ; Attributes: thunk
.text:0040D1A0
.text:0040D1A0 ; DWORD __stdcall GetLastError()
.text:0040D1A0 GetLastError    proc near               ; CODE XREF: sub_4060D0:loc_406359↑p
.text:0040D1A0                                         ; .text:loc_406E9D↑p ...
.text:0040D1A0                 jmp     ds:__imp_GetLastError
.text:0040D1A0 GetLastError    endp
.text:0040D1A0
.text:0040D1A0 ; ---------------------------------------------------------------------------
.text:0040D1A6                 align 10h
.text:0040D1B0
.text:0040D1B0 ; =============== S U B R O U T I N E =======================================
.text:0040D1B0
.text:0040D1B0 ; Attributes: thunk
.text:0040D1B0
.text:0040D1B0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040D1B0 GetVolumeInformationA proc near         ; CODE XREF: sub_4065D0+64↑p
.text:0040D1B0                                         ; .text:00406B7C↑p ...
.text:0040D1B0
.text:0040D1B0 lpRootPathName  = dword ptr  4
.text:0040D1B0 lpVolumeNameBuffer= dword ptr  8
.text:0040D1B0 nVolumeNameSize = dword ptr  0Ch
.text:0040D1B0 lpVolumeSerialNumber= dword ptr  10h
.text:0040D1B0 lpMaximumComponentLength= dword ptr  14h
.text:0040D1B0 lpFileSystemFlags= dword ptr  18h
.text:0040D1B0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040D1B0 nFileSystemNameSize= dword ptr  20h
.text:0040D1B0
.text:0040D1B0                 jmp     ds:__imp_GetVolumeInformationA
.text:0040D1B0 GetVolumeInformationA endp
.text:0040D1B0
.text:0040D1B0 ; ---------------------------------------------------------------------------
.text:0040D1B6                 align 10h
.text:0040D1C0
.text:0040D1C0 ; =============== S U B R O U T I N E =======================================
.text:0040D1C0
.text:0040D1C0 ; Attributes: thunk
.text:0040D1C0
.text:0040D1C0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040D1C0 CreateFileA     proc near               ; CODE XREF: sub_405610+1D56↑p
.text:0040D1C0                                         ; .text:00408773↑p ...
.text:0040D1C0
.text:0040D1C0 lpFileName      = dword ptr  4
.text:0040D1C0 dwDesiredAccess = dword ptr  8
.text:0040D1C0 dwShareMode     = dword ptr  0Ch
.text:0040D1C0 lpSecurityAttributes= dword ptr  10h
.text:0040D1C0 dwCreationDisposition= dword ptr  14h
.text:0040D1C0 dwFlagsAndAttributes= dword ptr  18h
.text:0040D1C0 hTemplateFile   = dword ptr  1Ch
.text:0040D1C0
.text:0040D1C0                 jmp     ds:__imp_CreateFileA
.text:0040D1C0 CreateFileA     endp
.text:0040D1C0
.text:0040D1C0 ; ---------------------------------------------------------------------------
.text:0040D1C6                 align 10h
.text:0040D1D0
.text:0040D1D0 ; =============== S U B R O U T I N E =======================================
.text:0040D1D0
.text:0040D1D0 ; Attributes: thunk
.text:0040D1D0
.text:0040D1D0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040D1D0 CloseHandle     proc near               ; CODE XREF: sub_405610+1D71↑p
.text:0040D1D0                                         ; .text:004087E9↑p ...
.text:0040D1D0
.text:0040D1D0 hObject         = dword ptr  4
.text:0040D1D0
.text:0040D1D0                 jmp     ds:__imp_CloseHandle
.text:0040D1D0 CloseHandle     endp
.text:0040D1D0
.text:0040D1D0 ; ---------------------------------------------------------------------------
.text:0040D1D6                 align 10h
.text:0040D1E0
.text:0040D1E0 ; =============== S U B R O U T I N E =======================================
.text:0040D1E0
.text:0040D1E0 ; Attributes: thunk
.text:0040D1E0
.text:0040D1E0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040D1E0 GetModuleFileNameA proc near            ; CODE XREF: sub_407970+1C↑p
.text:0040D1E0
.text:0040D1E0 hModule         = dword ptr  4
.text:0040D1E0 lpFilename      = dword ptr  8
.text:0040D1E0 nSize           = dword ptr  0Ch
.text:0040D1E0
.text:0040D1E0                 jmp     ds:__imp_GetModuleFileNameA
.text:0040D1E0 GetModuleFileNameA endp
.text:0040D1E0
.text:0040D1E0 ; ---------------------------------------------------------------------------
.text:0040D1E6                 align 10h
.text:0040D1F0
.text:0040D1F0 ; =============== S U B R O U T I N E =======================================
.text:0040D1F0
.text:0040D1F0 ; Attributes: thunk
.text:0040D1F0
.text:0040D1F0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040D1F0 GetShortPathNameA proc near             ; CODE XREF: .text:00407BF6↑p
.text:0040D1F0                                         ; .text:00407C20↑p
.text:0040D1F0
.text:0040D1F0 lpszLongPath    = dword ptr  4
.text:0040D1F0 lpszShortPath   = dword ptr  8
.text:0040D1F0 cchBuffer       = dword ptr  0Ch
.text:0040D1F0
.text:0040D1F0                 jmp     ds:__imp_GetShortPathNameA
.text:0040D1F0 GetShortPathNameA endp
.text:0040D1F0
.text:0040D1F0 ; ---------------------------------------------------------------------------
.text:0040D1F6                 align 10h
.text:0040D200
.text:0040D200 ; =============== S U B R O U T I N E =======================================
.text:0040D200
.text:0040D200 ; Attributes: thunk
.text:0040D200
.text:0040D200 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040D200 GetFullPathNameA proc near              ; CODE XREF: sub_407F70+45↑p
.text:0040D200                                         ; sub_407F70+ED↑p
.text:0040D200
.text:0040D200 lpFileName      = dword ptr  4
.text:0040D200 nBufferLength   = dword ptr  8
.text:0040D200 lpBuffer        = dword ptr  0Ch
.text:0040D200 lpFilePart      = dword ptr  10h
.text:0040D200
.text:0040D200                 jmp     ds:__imp_GetFullPathNameA
.text:0040D200 GetFullPathNameA endp
.text:0040D200
.text:0040D200 ; ---------------------------------------------------------------------------
.text:0040D206                 align 10h
.text:0040D210
.text:0040D210 ; =============== S U B R O U T I N E =======================================
.text:0040D210
.text:0040D210 ; Attributes: thunk
.text:0040D210
.text:0040D210 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040D210 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00408428↑p
.text:0040D210                                         ; .text:00408444↑p ...
.text:0040D210
.text:0040D210 nBufferLength   = dword ptr  4
.text:0040D210 lpBuffer        = dword ptr  8
.text:0040D210
.text:0040D210                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040D210 GetCurrentDirectoryA endp
.text:0040D210
.text:0040D210 ; ---------------------------------------------------------------------------
.text:0040D216                 align 10h
.text:0040D220
.text:0040D220 ; =============== S U B R O U T I N E =======================================
.text:0040D220
.text:0040D220 ; Attributes: thunk
.text:0040D220
.text:0040D220 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040D220 DeviceIoControl proc near               ; CODE XREF: .text:004087DC↑p
.text:0040D220                                         ; sub_408BA0+1E5↑p
.text:0040D220
.text:0040D220 hDevice         = dword ptr  4
.text:0040D220 dwIoControlCode = dword ptr  8
.text:0040D220 lpInBuffer      = dword ptr  0Ch
.text:0040D220 nInBufferSize   = dword ptr  10h
.text:0040D220 lpOutBuffer     = dword ptr  14h
.text:0040D220 nOutBufferSize  = dword ptr  18h
.text:0040D220 lpBytesReturned = dword ptr  1Ch
.text:0040D220 lpOverlapped    = dword ptr  20h
.text:0040D220
.text:0040D220                 jmp     ds:__imp_DeviceIoControl
.text:0040D220 DeviceIoControl endp
.text:0040D220
.text:0040D220 ; ---------------------------------------------------------------------------
.text:0040D226                 align 10h
.text:0040D230
.text:0040D230 ; =============== S U B R O U T I N E =======================================
.text:0040D230
.text:0040D230 ; Attributes: thunk
.text:0040D230
.text:0040D230 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040D230 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00408B33↑p
.text:0040D230                                         ; sub_408BA0+7B↑p ...
.text:0040D230
.text:0040D230 lpRootPathName  = dword ptr  4
.text:0040D230 lpSectorsPerCluster= dword ptr  8
.text:0040D230 lpBytesPerSector= dword ptr  0Ch
.text:0040D230 lpNumberOfFreeClusters= dword ptr  10h
.text:0040D230 lpTotalNumberOfClusters= dword ptr  14h
.text:0040D230
.text:0040D230                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040D230 GetDiskFreeSpaceA endp
.text:0040D230
.text:0040D230 ; ---------------------------------------------------------------------------
.text:0040D236                 align 10h
.text:0040D240
.text:0040D240 ; =============== S U B R O U T I N E =======================================
.text:0040D240
.text:0040D240 ; Attributes: thunk
.text:0040D240
.text:0040D240 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040D240 lstrcmpiA       proc near               ; CODE XREF: .text:004092FB↑p
.text:0040D240                                         ; .text:00409312↑p ...
.text:0040D240
.text:0040D240 lpString1       = dword ptr  4
.text:0040D240 lpString2       = dword ptr  8
.text:0040D240
.text:0040D240                 jmp     ds:__imp_lstrcmpiA
.text:0040D240 lstrcmpiA       endp
.text:0040D240
.text:0040D240 ; ---------------------------------------------------------------------------
.text:0040D246                 align 10h
.text:0040D250
.text:0040D250 ; =============== S U B R O U T I N E =======================================
.text:0040D250
.text:0040D250 ; Attributes: thunk
.text:0040D250
.text:0040D250 ; DWORD __stdcall GetVersion()
.text:0040D250 GetVersion      proc near               ; CODE XREF: .text:00409683↑p
.text:0040D250                 jmp     ds:__imp_GetVersion
.text:0040D250 GetVersion      endp
.text:0040D250
.text:0040D250 ; ---------------------------------------------------------------------------
.text:0040D256                 align 10h
.text:0040D260
.text:0040D260 ; =============== S U B R O U T I N E =======================================
.text:0040D260
.text:0040D260 ; Attributes: thunk
.text:0040D260
.text:0040D260 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040D260 GetVersionExA   proc near               ; CODE XREF: sub_409710+32↑p
.text:0040D260                                         ; sub_409710+20B↑p
.text:0040D260
.text:0040D260 lpVersionInformation= dword ptr  4
.text:0040D260
.text:0040D260                 jmp     ds:__imp_GetVersionExA
.text:0040D260 GetVersionExA   endp
.text:0040D260
.text:0040D260 ; ---------------------------------------------------------------------------
.text:0040D266                 align 10h
.text:0040D270
.text:0040D270 ; =============== S U B R O U T I N E =======================================
.text:0040D270
.text:0040D270 ; Attributes: thunk
.text:0040D270
.text:0040D270 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040D270 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:00409DAF↑p
.text:0040D270                                         ; .text:00409DDE↑p ...
.text:0040D270
.text:0040D270 nBufferLength   = dword ptr  4
.text:0040D270 lpBuffer        = dword ptr  8
.text:0040D270
.text:0040D270                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040D270 GetLogicalDriveStringsA endp
.text:0040D270
.text:0040D270 ; ---------------------------------------------------------------------------
.text:0040D276                 align 10h
.text:0040D280
.text:0040D280 ; =============== S U B R O U T I N E =======================================
.text:0040D280
.text:0040D280 ; Attributes: thunk
.text:0040D280
.text:0040D280 ; HANDLE __stdcall GetProcessHeap()
.text:0040D280 GetProcessHeap  proc near               ; CODE XREF: .text:00409DB9↑p
.text:0040D280                                         ; sub_40A490+24↑p ...
.text:0040D280                 jmp     ds:__imp_GetProcessHeap
.text:0040D280 GetProcessHeap  endp
.text:0040D280
.text:0040D280 ; ---------------------------------------------------------------------------
.text:0040D286                 align 10h
.text:0040D290
.text:0040D290 ; =============== S U B R O U T I N E =======================================
.text:0040D290
.text:0040D290 ; Attributes: thunk
.text:0040D290
.text:0040D290 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040D290 HeapAlloc       proc near               ; CODE XREF: .text:00409DCD↑p
.text:0040D290                                         ; sub_40A490+38↑p ...
.text:0040D290
.text:0040D290 hHeap           = dword ptr  4
.text:0040D290 dwFlags         = dword ptr  8
.text:0040D290 dwBytes         = dword ptr  0Ch
.text:0040D290
.text:0040D290                 jmp     ds:__imp_HeapAlloc
.text:0040D290 HeapAlloc       endp
.text:0040D290
.text:0040D290 ; ---------------------------------------------------------------------------
.text:0040D296                 align 10h
.text:0040D2A0
.text:0040D2A0 ; =============== S U B R O U T I N E =======================================
.text:0040D2A0
.text:0040D2A0 ; Attributes: thunk
.text:0040D2A0
.text:0040D2A0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040D2A0 HeapFree        proc near               ; CODE XREF: .text:0040A5CD↑p
.text:0040D2A0
.text:0040D2A0 hHeap           = dword ptr  4
.text:0040D2A0 dwFlags         = dword ptr  8
.text:0040D2A0 lpMem           = dword ptr  0Ch
.text:0040D2A0
.text:0040D2A0                 jmp     ds:__imp_HeapFree
.text:0040D2A0 HeapFree        endp
.text:0040D2A0
.text:0040D2A0 ; ---------------------------------------------------------------------------
.text:0040D2A6                 align 10h
.text:0040D2B0
.text:0040D2B0 ; =============== S U B R O U T I N E =======================================
.text:0040D2B0
.text:0040D2B0 ; Attributes: thunk
.text:0040D2B0
.text:0040D2B0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040D2B0 UnlockFile      proc near               ; CODE XREF: sub_40A760+40↑p
.text:0040D2B0
.text:0040D2B0 hFile           = dword ptr  4
.text:0040D2B0 dwFileOffsetLow = dword ptr  8
.text:0040D2B0 dwFileOffsetHigh= dword ptr  0Ch
.text:0040D2B0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040D2B0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040D2B0
.text:0040D2B0                 jmp     ds:__imp_UnlockFile
.text:0040D2B0 UnlockFile      endp
.text:0040D2B0
.text:0040D2B0 ; ---------------------------------------------------------------------------
.text:0040D2B6                 align 10h
.text:0040D2C0
.text:0040D2C0 ; =============== S U B R O U T I N E =======================================
.text:0040D2C0
.text:0040D2C0 ; Attributes: thunk
.text:0040D2C0
.text:0040D2C0 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040D2C0 CreateDirectoryA proc near              ; CODE XREF: sub_40B0E0+22↑p
.text:0040D2C0
.text:0040D2C0 lpPathName      = dword ptr  4
.text:0040D2C0 lpSecurityAttributes= dword ptr  8
.text:0040D2C0
.text:0040D2C0                 jmp     ds:__imp_CreateDirectoryA
.text:0040D2C0 CreateDirectoryA endp
.text:0040D2C0
.text:0040D2C0 ; ---------------------------------------------------------------------------
.text:0040D2C6                 align 10h
.text:0040D2D0
.text:0040D2D0 ; =============== S U B R O U T I N E =======================================
.text:0040D2D0
.text:0040D2D0 ; Attributes: thunk
.text:0040D2D0
.text:0040D2D0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040D2D0 GetTimeZoneInformation proc near        ; CODE XREF: sub_40B2A0+22↑p
.text:0040D2D0
.text:0040D2D0 lpTimeZoneInformation= dword ptr  4
.text:0040D2D0
.text:0040D2D0                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040D2D0 GetTimeZoneInformation endp
.text:0040D2D0
.text:0040D2D0 ; ---------------------------------------------------------------------------
.text:0040D2D6                 align 10h
.text:0040D2E0
.text:0040D2E0 ; =============== S U B R O U T I N E =======================================
.text:0040D2E0
.text:0040D2E0 ; Attributes: thunk
.text:0040D2E0
.text:0040D2E0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040D2E0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40B2A0+4F↑p
.text:0040D2E0
.text:0040D2E0 lpSystemTimeAsFileTime= dword ptr  4
.text:0040D2E0
.text:0040D2E0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040D2E0 GetSystemTimeAsFileTime endp
.text:0040D2E0
.text:0040D2E0 ; ---------------------------------------------------------------------------
.text:0040D2E6                 align 10h
.text:0040D2F0
.text:0040D2F0 ; =============== S U B R O U T I N E =======================================
.text:0040D2F0
.text:0040D2F0 ; Attributes: thunk
.text:0040D2F0
.text:0040D2F0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040D2F0 RegOpenKeyExA   proc near               ; CODE XREF: .text:00409281↑p
.text:0040D2F0
.text:0040D2F0 hKey            = dword ptr  4
.text:0040D2F0 lpSubKey        = dword ptr  8
.text:0040D2F0 ulOptions       = dword ptr  0Ch
.text:0040D2F0 samDesired      = dword ptr  10h
.text:0040D2F0 phkResult       = dword ptr  14h
.text:0040D2F0
.text:0040D2F0                 jmp     ds:__imp_RegOpenKeyExA
.text:0040D2F0 RegOpenKeyExA   endp
.text:0040D2F0
.text:0040D2F0 ; ---------------------------------------------------------------------------
.text:0040D2F6                 align 10h
.text:0040D300
.text:0040D300 ; =============== S U B R O U T I N E =======================================
.text:0040D300
.text:0040D300 ; Attributes: thunk
.text:0040D300
.text:0040D300 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040D300 RegQueryValueExA proc near              ; CODE XREF: .text:004092C4↑p
.text:0040D300
.text:0040D300 hKey            = dword ptr  4
.text:0040D300 lpValueName     = dword ptr  8
.text:0040D300 lpReserved      = dword ptr  0Ch
.text:0040D300 lpType          = dword ptr  10h
.text:0040D300 lpData          = dword ptr  14h
.text:0040D300 lpcbData        = dword ptr  18h
.text:0040D300
.text:0040D300                 jmp     ds:__imp_RegQueryValueExA
.text:0040D300 RegQueryValueExA endp
.text:0040D300
.text:0040D300 ; ---------------------------------------------------------------------------
.text:0040D306                 align 10h
.text:0040D310
.text:0040D310 ; =============== S U B R O U T I N E =======================================
.text:0040D310
.text:0040D310 ; Attributes: thunk
.text:0040D310
.text:0040D310 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040D310 RegCloseKey     proc near               ; CODE XREF: .text:004092E8↑p
.text:0040D310
.text:0040D310 hKey            = dword ptr  4
.text:0040D310
.text:0040D310                 jmp     ds:__imp_RegCloseKey
.text:0040D310 RegCloseKey     endp
.text:0040D310
.text:0040D310 ; ---------------------------------------------------------------------------
.text:0040D316                 db 2 dup(90h)
.text:0040D318                 dd 2 dup(0)
.text:0040D320                 dd 21400h, 0
.text:0040D328                 dd 0C0h, 46000000h
.text:0040D330 ; const IID rclsid
.text:0040D330 rclsid          dd 21401h               ; Data1
.text:0040D330                                         ; DATA XREF: sub_405660+4B↑o
.text:0040D330                 dw 0                    ; Data2
.text:0040D330                 dw 0                    ; Data3
.text:0040D330                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040D340                 dd 214A0h, 0
.text:0040D348                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040D358                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040D368                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040D378                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040D388                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040D398                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040D3A8                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040D3B8                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040D3C8                 dd 0C0h, 46000000h, 21500h, 0
.text:0040D3D8                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040D3E8                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040D3F8                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040D408                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040D418                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040D428                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040D438                 dd 0C0h, 46000000h
.text:0040D440 ; const IID riid
.text:0040D440 riid            dd 214EEh               ; Data1
.text:0040D440                                         ; DATA XREF: sub_405660+2B↑o
.text:0040D440                 dw 0                    ; Data2
.text:0040D440                 dw 0                    ; Data3
.text:0040D440                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040D450                 dd 214EFh, 0
.text:0040D458                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040D468                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040D478                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040D488                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040D498                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040D4A8                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040D4B8                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040D4C8                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040D4D8                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040D4E8                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040D4F8                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040D508                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040D518                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040D528                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040D528                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040D528                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040D528                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040D528                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040D528                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040D528                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040D528                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040D528                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040D528                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040D5F8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040D608                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040D618                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040D628                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040D638                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040D638                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040D638                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040D638                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040D638                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040D638                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040D638                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040D6C0 dword_40D6C0    dd 0FFFFFFFFh           ; DATA XREF: .text:0040C949↑r
.text:0040D6C0                                         ; .text:loc_40C970↑r ...
.text:0040D6C4 dword_40D6C4    dd 0                    ; DATA XREF: .text:loc_40C97C↑r
.text:0040D6C4                                         ; sub_40C9A0:loc_40C9ED↑r
.text:0040D6C8                 dd 0FFFFFFFFh
.text:0040D6CC dword_40D6CC    dd 4Dh dup(0)           ; DATA XREF: .data:off_40E0C4↓o
.text:0040D800                 dd 200h dup(?)
.text:0040D800 _text           ends
.text:0040D800
.data:0040E000 ; Section 2. (virtual address 0000E000)
.data:0040E000 ; Virtual size                  : 000000E0 (    224.)
.data:0040E000 ; Section size in file          : 00000200 (    512.)
.data:0040E000 ; Offset to raw data for section: 0000CC00
.data:0040E000 ; Flags C0000040: Data Readable Writable
.data:0040E000 ; Alignment     : default
.data:0040E000 ; ===========================================================================
.data:0040E000
.data:0040E000 ; Segment type: Pure data
.data:0040E000 ; Segment permissions: Read/Write
.data:0040E000 _data           segment para public 'DATA' use32
.data:0040E000                 assume cs:_data
.data:0040E000                 ;org 40E000h
.data:0040E000 dword_40E000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040E000                                         ; sub_401080+CC↑r
.data:0040E004 dword_40E004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040E004                                         ; sub_401080+D4↑r
.data:0040E008                 align 10h
.data:0040E010 dword_40E010    dd 1                    ; DATA XREF: sub_401910:loc_401B8A↑r
.data:0040E010                                         ; sub_401910+290↑w ...
.data:0040E014 dword_40E014    dd 1                    ; DATA XREF: sub_403150+11↑r
.data:0040E014                                         ; .text:004031F1↑r
.data:0040E018 dword_40E018    dd 3Fh                  ; DATA XREF: sub_403150+7D↑w
.data:0040E018                                         ; .text:0040325D↑w
.data:0040E01C                 align 10h
.data:0040E020 ; char *Buffer
.data:0040E020 Buffer          dd offset aCopyrightC2005
.data:0040E020                                         ; DATA XREF: sub_403780+DC↑r
.data:0040E020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040E024                 align 10h
.data:0040E030 dword_40E030    dd 1                    ; DATA XREF: sub_405120+22↑r
.data:0040E030                                         ; sub_405120+65↑r ...
.data:0040E034 dword_40E034    dd 100h                 ; DATA XREF: sub_405120+3F↑o
.data:0040E034                                         ; sub_405120+1A2↑r ...
.data:0040E038 off_40E038      dd offset unk_40F060    ; DATA XREF: sub_405120+1AA↑r
.data:0040E03C ; void *off_40E03C
.data:0040E03C off_40E03C      dd offset dword_40E034  ; DATA XREF: sub_405120+39↑r
.data:0040E03C                                         ; sub_405120+60↑w ...
.data:0040E040 ; int Code
.data:0040E040 Code            dd 1                    ; DATA XREF: sub_403B00+6D↑r
.data:0040E040                                         ; sub_403B00+9A↑r ...
.data:0040E044                 align 10h
.data:0040E050 dword_40E050    dd 200h                 ; DATA XREF: sub_405C00+2ED↑r
.data:0040E050                                         ; sub_405C00+2F8↑r ...
.data:0040E054 ; char *off_40E054
.data:0040E054 off_40E054      dd offset aComExeBatCmd ; DATA XREF: sub_4060D0+3D3↑r
.data:0040E054                                         ; sub_4060D0+400↑r ...
.data:0040E054                                         ; ".com;.exe;.bat;.cmd"
.data:0040E058                 align 10h
.data:0040E060 byte_40E060     db 41h                  ; DATA XREF: sub_4082A0+6B↑w
.data:0040E060                                         ; sub_4082A0:loc_4083B4↑r
.data:0040E061                 align 10h
.data:0040E070 dword_40E070    dd 1                    ; DATA XREF: .text:loc_409137↑r
.data:0040E070                                         ; sub_409710+202↑w
.data:0040E074                 align 10h
.data:0040E080 off_40E080      dd offset aNotset       ; DATA XREF: .text:0040998A↑r
.data:0040E080                                         ; .text:0040A5D2↑r
.data:0040E080                                         ; "notset"
.data:0040E084 off_40E084      dd offset aNotset       ; DATA XREF: .text:004099A2↑r
.data:0040E084                                         ; .text:004099C4↑r ...
.data:0040E084                                         ; "notset"
.data:0040E088                 align 10h
.data:0040E090 dword_40E090    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040E094                 align 10h
.data:0040E0A0 ; int Mode
.data:0040E0A0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040E0A0                                         ; sub_401080+80↑r ...
.data:0040E0A4                 align 10h
.data:0040E0B0 dword_40E0B0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040E0B0                                         ; sub_401080+BA↑r
.data:0040E0B4                 align 10h
.data:0040E0C0 dword_40E0C0    dd 0                    ; DATA XREF: sub_40C9A0+9↑r
.data:0040E0C0                                         ; sub_40C9A0+1D↑w
.data:0040E0C4 off_40E0C4      dd offset dword_40D6CC  ; DATA XREF: sub_40C910+6↑r
.data:0040E0C4                                         ; sub_40C910+17↑r ...
.data:0040E0C8                 align 1000h
.data:0040E0C8 _data           ends
.data:0040E0C8
.bss:0040F000 ; Section 3. (virtual address 0000F000)
.bss:0040F000 ; Virtual size                  : 00000570 (   1392.)
.bss:0040F000 ; Section size in file          : 00000000 (      0.)
.bss:0040F000 ; Offset to raw data for section: 00000000
.bss:0040F000 ; Flags C0000080: Bss Readable Writable
.bss:0040F000 ; Alignment     : default
.bss:0040F000 ; ===========================================================================
.bss:0040F000
.bss:0040F000 ; Segment type: Uninitialized
.bss:0040F000 ; Segment permissions: Read/Write
.bss:0040F000 _bss            segment para public 'BSS' use32
.bss:0040F000                 assume cs:_bss
.bss:0040F000                 ;org 40F000h
.bss:0040F000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040F000 byte_40F000     db ?                    ; DATA XREF: sub_401910+233↑w
.bss:0040F000                                         ; sub_401910+2B9↑r ...
.bss:0040F001                 align 10h
.bss:0040F010 byte_40F010     db ?                    ; DATA XREF: sub_401910+24E↑w
.bss:0040F010                                         ; sub_401910:loc_401B70↑w ...
.bss:0040F011                 align 10h
.bss:0040F020 dword_40F020    dd ?                    ; DATA XREF: sub_403150+9↑o
.bss:0040F020                                         ; sub_403150+17↑w ...
.bss:0040F024 dword_40F024    dd ?                    ; DATA XREF: sub_403150+21↑w
.bss:0040F024                                         ; .text:00403209↑w
.bss:0040F028 dword_40F028    dd ?                    ; DATA XREF: sub_403150+77↑r
.bss:0040F028                                         ; .text:00403257↑r
.bss:0040F02C dword_40F02C    dd ?                    ; DATA XREF: sub_403150+6B↑r
.bss:0040F02C                                         ; .text:0040324B↑r
.bss:0040F030                 db    ? ;
.bss:0040F031                 db    ? ;
.bss:0040F032                 db    ? ;
.bss:0040F033                 db    ? ;
.bss:0040F034                 db    ? ;
.bss:0040F035                 db    ? ;
.bss:0040F036                 db    ? ;
.bss:0040F037                 db    ? ;
.bss:0040F038                 db    ? ;
.bss:0040F039                 db    ? ;
.bss:0040F03A                 db    ? ;
.bss:0040F03B                 db    ? ;
.bss:0040F03C                 db    ? ;
.bss:0040F03D                 db    ? ;
.bss:0040F03E                 db    ? ;
.bss:0040F03F                 db    ? ;
.bss:0040F040                 db    ? ;
.bss:0040F041                 db    ? ;
.bss:0040F042                 db    ? ;
.bss:0040F043                 db    ? ;
.bss:0040F044                 db    ? ;
.bss:0040F045                 db    ? ;
.bss:0040F046                 db    ? ;
.bss:0040F047                 db    ? ;
.bss:0040F048                 db    ? ;
.bss:0040F049                 db    ? ;
.bss:0040F04A                 db    ? ;
.bss:0040F04B                 db    ? ;
.bss:0040F04C                 db    ? ;
.bss:0040F04D                 db    ? ;
.bss:0040F04E                 db    ? ;
.bss:0040F04F                 db    ? ;
.bss:0040F050 ; char *dword_40F050
.bss:0040F050 dword_40F050    dd ?                    ; DATA XREF: .text:00403AD4↑w
.bss:0040F050                                         ; sub_403B00+58↑r
.bss:0040F054                 align 10h
.bss:0040F060 unk_40F060      db    ? ;               ; DATA XREF: sub_405120+100↑o
.bss:0040F060                                         ; .data:off_40E038↑o
.bss:0040F061                 db    ? ;
.bss:0040F062                 db    ? ;
.bss:0040F063                 db    ? ;
.bss:0040F064                 db    ? ;
.bss:0040F065                 db    ? ;
.bss:0040F066                 db    ? ;
.bss:0040F067                 db    ? ;
.bss:0040F068                 db    ? ;
.bss:0040F069                 db    ? ;
.bss:0040F06A                 db    ? ;
.bss:0040F06B                 db    ? ;
.bss:0040F06C                 db    ? ;
.bss:0040F06D                 db    ? ;
.bss:0040F06E                 db    ? ;
.bss:0040F06F                 db    ? ;
.bss:0040F070                 db    ? ;
.bss:0040F071                 db    ? ;
.bss:0040F072                 db    ? ;
.bss:0040F073                 db    ? ;
.bss:0040F074                 db    ? ;
.bss:0040F075                 db    ? ;
.bss:0040F076                 db    ? ;
.bss:0040F077                 db    ? ;
.bss:0040F078                 db    ? ;
.bss:0040F079                 db    ? ;
.bss:0040F07A                 db    ? ;
.bss:0040F07B                 db    ? ;
.bss:0040F07C                 db    ? ;
.bss:0040F07D                 db    ? ;
.bss:0040F07E                 db    ? ;
.bss:0040F07F                 db    ? ;
.bss:0040F080                 db    ? ;
.bss:0040F081                 db    ? ;
.bss:0040F082                 db    ? ;
.bss:0040F083                 db    ? ;
.bss:0040F084                 db    ? ;
.bss:0040F085                 db    ? ;
.bss:0040F086                 db    ? ;
.bss:0040F087                 db    ? ;
.bss:0040F088                 db    ? ;
.bss:0040F089                 db    ? ;
.bss:0040F08A                 db    ? ;
.bss:0040F08B                 db    ? ;
.bss:0040F08C                 db    ? ;
.bss:0040F08D                 db    ? ;
.bss:0040F08E                 db    ? ;
.bss:0040F08F                 db    ? ;
.bss:0040F090                 db    ? ;
.bss:0040F091                 db    ? ;
.bss:0040F092                 db    ? ;
.bss:0040F093                 db    ? ;
.bss:0040F094                 db    ? ;
.bss:0040F095                 db    ? ;
.bss:0040F096                 db    ? ;
.bss:0040F097                 db    ? ;
.bss:0040F098                 db    ? ;
.bss:0040F099                 db    ? ;
.bss:0040F09A                 db    ? ;
.bss:0040F09B                 db    ? ;
.bss:0040F09C                 db    ? ;
.bss:0040F09D                 db    ? ;
.bss:0040F09E                 db    ? ;
.bss:0040F09F                 db    ? ;
.bss:0040F0A0                 db    ? ;
.bss:0040F0A1                 db    ? ;
.bss:0040F0A2                 db    ? ;
.bss:0040F0A3                 db    ? ;
.bss:0040F0A4                 db    ? ;
.bss:0040F0A5                 db    ? ;
.bss:0040F0A6                 db    ? ;
.bss:0040F0A7                 db    ? ;
.bss:0040F0A8                 db    ? ;
.bss:0040F0A9                 db    ? ;
.bss:0040F0AA                 db    ? ;
.bss:0040F0AB                 db    ? ;
.bss:0040F0AC                 db    ? ;
.bss:0040F0AD                 db    ? ;
.bss:0040F0AE                 db    ? ;
.bss:0040F0AF                 db    ? ;
.bss:0040F0B0                 db    ? ;
.bss:0040F0B1                 db    ? ;
.bss:0040F0B2                 db    ? ;
.bss:0040F0B3                 db    ? ;
.bss:0040F0B4                 db    ? ;
.bss:0040F0B5                 db    ? ;
.bss:0040F0B6                 db    ? ;
.bss:0040F0B7                 db    ? ;
.bss:0040F0B8                 db    ? ;
.bss:0040F0B9                 db    ? ;
.bss:0040F0BA                 db    ? ;
.bss:0040F0BB                 db    ? ;
.bss:0040F0BC                 db    ? ;
.bss:0040F0BD                 db    ? ;
.bss:0040F0BE                 db    ? ;
.bss:0040F0BF                 db    ? ;
.bss:0040F0C0                 db    ? ;
.bss:0040F0C1                 db    ? ;
.bss:0040F0C2                 db    ? ;
.bss:0040F0C3                 db    ? ;
.bss:0040F0C4                 db    ? ;
.bss:0040F0C5                 db    ? ;
.bss:0040F0C6                 db    ? ;
.bss:0040F0C7                 db    ? ;
.bss:0040F0C8                 db    ? ;
.bss:0040F0C9                 db    ? ;
.bss:0040F0CA                 db    ? ;
.bss:0040F0CB                 db    ? ;
.bss:0040F0CC                 db    ? ;
.bss:0040F0CD                 db    ? ;
.bss:0040F0CE                 db    ? ;
.bss:0040F0CF                 db    ? ;
.bss:0040F0D0                 db    ? ;
.bss:0040F0D1                 db    ? ;
.bss:0040F0D2                 db    ? ;
.bss:0040F0D3                 db    ? ;
.bss:0040F0D4                 db    ? ;
.bss:0040F0D5                 db    ? ;
.bss:0040F0D6                 db    ? ;
.bss:0040F0D7                 db    ? ;
.bss:0040F0D8                 db    ? ;
.bss:0040F0D9                 db    ? ;
.bss:0040F0DA                 db    ? ;
.bss:0040F0DB                 db    ? ;
.bss:0040F0DC                 db    ? ;
.bss:0040F0DD                 db    ? ;
.bss:0040F0DE                 db    ? ;
.bss:0040F0DF                 db    ? ;
.bss:0040F0E0                 db    ? ;
.bss:0040F0E1                 db    ? ;
.bss:0040F0E2                 db    ? ;
.bss:0040F0E3                 db    ? ;
.bss:0040F0E4                 db    ? ;
.bss:0040F0E5                 db    ? ;
.bss:0040F0E6                 db    ? ;
.bss:0040F0E7                 db    ? ;
.bss:0040F0E8                 db    ? ;
.bss:0040F0E9                 db    ? ;
.bss:0040F0EA                 db    ? ;
.bss:0040F0EB                 db    ? ;
.bss:0040F0EC                 db    ? ;
.bss:0040F0ED                 db    ? ;
.bss:0040F0EE                 db    ? ;
.bss:0040F0EF                 db    ? ;
.bss:0040F0F0                 db    ? ;
.bss:0040F0F1                 db    ? ;
.bss:0040F0F2                 db    ? ;
.bss:0040F0F3                 db    ? ;
.bss:0040F0F4                 db    ? ;
.bss:0040F0F5                 db    ? ;
.bss:0040F0F6                 db    ? ;
.bss:0040F0F7                 db    ? ;
.bss:0040F0F8                 db    ? ;
.bss:0040F0F9                 db    ? ;
.bss:0040F0FA                 db    ? ;
.bss:0040F0FB                 db    ? ;
.bss:0040F0FC                 db    ? ;
.bss:0040F0FD                 db    ? ;
.bss:0040F0FE                 db    ? ;
.bss:0040F0FF                 db    ? ;
.bss:0040F100                 db    ? ;
.bss:0040F101                 db    ? ;
.bss:0040F102                 db    ? ;
.bss:0040F103                 db    ? ;
.bss:0040F104                 db    ? ;
.bss:0040F105                 db    ? ;
.bss:0040F106                 db    ? ;
.bss:0040F107                 db    ? ;
.bss:0040F108                 db    ? ;
.bss:0040F109                 db    ? ;
.bss:0040F10A                 db    ? ;
.bss:0040F10B                 db    ? ;
.bss:0040F10C                 db    ? ;
.bss:0040F10D                 db    ? ;
.bss:0040F10E                 db    ? ;
.bss:0040F10F                 db    ? ;
.bss:0040F110                 db    ? ;
.bss:0040F111                 db    ? ;
.bss:0040F112                 db    ? ;
.bss:0040F113                 db    ? ;
.bss:0040F114                 db    ? ;
.bss:0040F115                 db    ? ;
.bss:0040F116                 db    ? ;
.bss:0040F117                 db    ? ;
.bss:0040F118                 db    ? ;
.bss:0040F119                 db    ? ;
.bss:0040F11A                 db    ? ;
.bss:0040F11B                 db    ? ;
.bss:0040F11C                 db    ? ;
.bss:0040F11D                 db    ? ;
.bss:0040F11E                 db    ? ;
.bss:0040F11F                 db    ? ;
.bss:0040F120                 db    ? ;
.bss:0040F121                 db    ? ;
.bss:0040F122                 db    ? ;
.bss:0040F123                 db    ? ;
.bss:0040F124                 db    ? ;
.bss:0040F125                 db    ? ;
.bss:0040F126                 db    ? ;
.bss:0040F127                 db    ? ;
.bss:0040F128                 db    ? ;
.bss:0040F129                 db    ? ;
.bss:0040F12A                 db    ? ;
.bss:0040F12B                 db    ? ;
.bss:0040F12C                 db    ? ;
.bss:0040F12D                 db    ? ;
.bss:0040F12E                 db    ? ;
.bss:0040F12F                 db    ? ;
.bss:0040F130                 db    ? ;
.bss:0040F131                 db    ? ;
.bss:0040F132                 db    ? ;
.bss:0040F133                 db    ? ;
.bss:0040F134                 db    ? ;
.bss:0040F135                 db    ? ;
.bss:0040F136                 db    ? ;
.bss:0040F137                 db    ? ;
.bss:0040F138                 db    ? ;
.bss:0040F139                 db    ? ;
.bss:0040F13A                 db    ? ;
.bss:0040F13B                 db    ? ;
.bss:0040F13C                 db    ? ;
.bss:0040F13D                 db    ? ;
.bss:0040F13E                 db    ? ;
.bss:0040F13F                 db    ? ;
.bss:0040F140                 db    ? ;
.bss:0040F141                 db    ? ;
.bss:0040F142                 db    ? ;
.bss:0040F143                 db    ? ;
.bss:0040F144                 db    ? ;
.bss:0040F145                 db    ? ;
.bss:0040F146                 db    ? ;
.bss:0040F147                 db    ? ;
.bss:0040F148                 db    ? ;
.bss:0040F149                 db    ? ;
.bss:0040F14A                 db    ? ;
.bss:0040F14B                 db    ? ;
.bss:0040F14C                 db    ? ;
.bss:0040F14D                 db    ? ;
.bss:0040F14E                 db    ? ;
.bss:0040F14F                 db    ? ;
.bss:0040F150                 db    ? ;
.bss:0040F151                 db    ? ;
.bss:0040F152                 db    ? ;
.bss:0040F153                 db    ? ;
.bss:0040F154                 db    ? ;
.bss:0040F155                 db    ? ;
.bss:0040F156                 db    ? ;
.bss:0040F157                 db    ? ;
.bss:0040F158                 db    ? ;
.bss:0040F159                 db    ? ;
.bss:0040F15A                 db    ? ;
.bss:0040F15B                 db    ? ;
.bss:0040F15C                 db    ? ;
.bss:0040F15D                 db    ? ;
.bss:0040F15E                 db    ? ;
.bss:0040F15F                 db    ? ;
.bss:0040F160 dword_40F160    dd ?                    ; DATA XREF: .text:loc_404AB1↑o
.bss:0040F160                                         ; .text:loc_404AD0↑o ...
.bss:0040F164 dword_40F164    dd ?                    ; DATA XREF: .text:loc_404B50↑o
.bss:0040F164                                         ; .text:00404FD8↑r ...
.bss:0040F168 dword_40F168    dd ?                    ; DATA XREF: .text:00404FD2↑r
.bss:0040F168                                         ; sub_405080+2C↑r
.bss:0040F16C dword_40F16C    dd ?                    ; DATA XREF: .text:00404FC6↑r
.bss:0040F16C                                         ; sub_405080+22↑r
.bss:0040F170 dword_40F170    dd ?                    ; DATA XREF: .text:00404FE2↑r
.bss:0040F170                                         ; sub_405080+36↑r
.bss:0040F174 dword_40F174    dd ?                    ; DATA XREF: .text:00404FF2↑r
.bss:0040F174                                         ; sub_405080+4E↑r
.bss:0040F178 dword_40F178    dd ?                    ; DATA XREF: .text:0040500F↑r
.bss:0040F178                                         ; sub_405080+62↑r
.bss:0040F17C dword_40F17C    dd ?                    ; DATA XREF: .text:00405005↑r
.bss:0040F17C                                         ; sub_405080+70↑r
.bss:0040F180 dword_40F180    dd ?                    ; DATA XREF: .text:00404FE8↑r
.bss:0040F180                                         ; sub_405080+7A↑r
.bss:0040F184                 align 10h
.bss:0040F190 ; char *Str1
.bss:0040F190 Str1            dd ?                    ; DATA XREF: sub_405444:loc_40547D↑w
.bss:0040F190                                         ; sub_405444:loc_4055B0↑r
.bss:0040F194                 align 10h
.bss:0040F1A0 dword_40F1A0    dd ?                    ; DATA XREF: sub_405444+2D↑r
.bss:0040F1A0                                         ; sub_405444+3F↑w
.bss:0040F1A4                 align 10h
.bss:0040F1B0 dword_40F1B0    dd ?                    ; DATA XREF: sub_4060D0+100↑r
.bss:0040F1B0                                         ; sub_4060D0+308↑w
.bss:0040F1B4                 align 10h
.bss:0040F1C0 ; char *Str
.bss:0040F1C0 Str             dd ?                    ; DATA XREF: sub_4060D0:loc_406434↑r
.bss:0040F1C0                                         ; sub_4060D0+3B6↑r ...
.bss:0040F1C4                 align 10h
.bss:0040F1D0 dword_40F1D0    dd ?                    ; DATA XREF: sub_4082A0+1C↑r
.bss:0040F1D0                                         ; sub_4082A0+104↑w
.bss:0040F1D4                 align 10h
.bss:0040F1E0 dword_40F1E0    dd ?                    ; DATA XREF: sub_4082A0+B↑r
.bss:0040F1E0                                         ; sub_4082A0+71↑w
.bss:0040F1E4                 align 10h
.bss:0040F1F0 dword_40F1F0    dd ?                    ; DATA XREF: sub_4082A0+85↑r
.bss:0040F1F0                                         ; sub_4082A0+B9↑w
.bss:0040F1F4 dword_40F1F4    dd ?                    ; DATA XREF: sub_4082A0+C4↑w
.bss:0040F1F8 dword_40F1F8    dd ?                    ; DATA XREF: sub_4082A0+2E↑o
.bss:0040F1F8                                         ; sub_4082A0+CF↑w
.bss:0040F1FC dword_40F1FC    dd ?                    ; DATA XREF: sub_4082A0+DA↑w
.bss:0040F200                 db    ? ;
.bss:0040F201                 db    ? ;
.bss:0040F202                 db    ? ;
.bss:0040F203                 db    ? ;
.bss:0040F204                 db    ? ;
.bss:0040F205                 db    ? ;
.bss:0040F206                 db    ? ;
.bss:0040F207                 db    ? ;
.bss:0040F208                 db    ? ;
.bss:0040F209                 db    ? ;
.bss:0040F20A                 db    ? ;
.bss:0040F20B                 db    ? ;
.bss:0040F20C                 db    ? ;
.bss:0040F20D                 db    ? ;
.bss:0040F20E                 db    ? ;
.bss:0040F20F                 db    ? ;
.bss:0040F210                 db    ? ;
.bss:0040F211                 db    ? ;
.bss:0040F212                 db    ? ;
.bss:0040F213                 db    ? ;
.bss:0040F214                 db    ? ;
.bss:0040F215                 db    ? ;
.bss:0040F216                 db    ? ;
.bss:0040F217                 db    ? ;
.bss:0040F218                 db    ? ;
.bss:0040F219                 db    ? ;
.bss:0040F21A                 db    ? ;
.bss:0040F21B                 db    ? ;
.bss:0040F21C                 db    ? ;
.bss:0040F21D                 db    ? ;
.bss:0040F21E                 db    ? ;
.bss:0040F21F                 db    ? ;
.bss:0040F220                 db    ? ;
.bss:0040F221                 db    ? ;
.bss:0040F222                 db    ? ;
.bss:0040F223                 db    ? ;
.bss:0040F224                 db    ? ;
.bss:0040F225                 db    ? ;
.bss:0040F226                 db    ? ;
.bss:0040F227                 db    ? ;
.bss:0040F228                 db    ? ;
.bss:0040F229                 db    ? ;
.bss:0040F22A                 db    ? ;
.bss:0040F22B                 db    ? ;
.bss:0040F22C                 db    ? ;
.bss:0040F22D                 db    ? ;
.bss:0040F22E                 db    ? ;
.bss:0040F22F                 db    ? ;
.bss:0040F230                 db    ? ;
.bss:0040F231                 db    ? ;
.bss:0040F232                 db    ? ;
.bss:0040F233                 db    ? ;
.bss:0040F234                 db    ? ;
.bss:0040F235                 db    ? ;
.bss:0040F236                 db    ? ;
.bss:0040F237                 db    ? ;
.bss:0040F238                 db    ? ;
.bss:0040F239                 db    ? ;
.bss:0040F23A                 db    ? ;
.bss:0040F23B                 db    ? ;
.bss:0040F23C                 db    ? ;
.bss:0040F23D                 db    ? ;
.bss:0040F23E                 db    ? ;
.bss:0040F23F                 db    ? ;
.bss:0040F240                 db    ? ;
.bss:0040F241                 db    ? ;
.bss:0040F242                 db    ? ;
.bss:0040F243                 db    ? ;
.bss:0040F244                 db    ? ;
.bss:0040F245                 db    ? ;
.bss:0040F246                 db    ? ;
.bss:0040F247                 db    ? ;
.bss:0040F248                 db    ? ;
.bss:0040F249                 db    ? ;
.bss:0040F24A                 db    ? ;
.bss:0040F24B                 db    ? ;
.bss:0040F24C                 db    ? ;
.bss:0040F24D                 db    ? ;
.bss:0040F24E                 db    ? ;
.bss:0040F24F                 db    ? ;
.bss:0040F250                 db    ? ;
.bss:0040F251                 db    ? ;
.bss:0040F252                 db    ? ;
.bss:0040F253                 db    ? ;
.bss:0040F254                 db    ? ;
.bss:0040F255                 db    ? ;
.bss:0040F256                 db    ? ;
.bss:0040F257                 db    ? ;
.bss:0040F258                 db    ? ;
.bss:0040F259                 db    ? ;
.bss:0040F25A                 db    ? ;
.bss:0040F25B                 db    ? ;
.bss:0040F25C                 db    ? ;
.bss:0040F25D                 db    ? ;
.bss:0040F25E                 db    ? ;
.bss:0040F25F                 db    ? ;
.bss:0040F260                 db    ? ;
.bss:0040F261                 db    ? ;
.bss:0040F262                 db    ? ;
.bss:0040F263                 db    ? ;
.bss:0040F264                 db    ? ;
.bss:0040F265                 db    ? ;
.bss:0040F266                 db    ? ;
.bss:0040F267                 db    ? ;
.bss:0040F268                 db    ? ;
.bss:0040F269                 db    ? ;
.bss:0040F26A                 db    ? ;
.bss:0040F26B                 db    ? ;
.bss:0040F26C                 db    ? ;
.bss:0040F26D                 db    ? ;
.bss:0040F26E                 db    ? ;
.bss:0040F26F                 db    ? ;
.bss:0040F270                 db    ? ;
.bss:0040F271                 db    ? ;
.bss:0040F272                 db    ? ;
.bss:0040F273                 db    ? ;
.bss:0040F274                 db    ? ;
.bss:0040F275                 db    ? ;
.bss:0040F276                 db    ? ;
.bss:0040F277                 db    ? ;
.bss:0040F278                 db    ? ;
.bss:0040F279                 db    ? ;
.bss:0040F27A                 db    ? ;
.bss:0040F27B                 db    ? ;
.bss:0040F27C                 db    ? ;
.bss:0040F27D                 db    ? ;
.bss:0040F27E                 db    ? ;
.bss:0040F27F                 db    ? ;
.bss:0040F280                 db    ? ;
.bss:0040F281                 db    ? ;
.bss:0040F282                 db    ? ;
.bss:0040F283                 db    ? ;
.bss:0040F284                 db    ? ;
.bss:0040F285                 db    ? ;
.bss:0040F286                 db    ? ;
.bss:0040F287                 db    ? ;
.bss:0040F288                 db    ? ;
.bss:0040F289                 db    ? ;
.bss:0040F28A                 db    ? ;
.bss:0040F28B                 db    ? ;
.bss:0040F28C                 db    ? ;
.bss:0040F28D                 db    ? ;
.bss:0040F28E                 db    ? ;
.bss:0040F28F                 db    ? ;
.bss:0040F290                 db    ? ;
.bss:0040F291                 db    ? ;
.bss:0040F292                 db    ? ;
.bss:0040F293                 db    ? ;
.bss:0040F294                 db    ? ;
.bss:0040F295                 db    ? ;
.bss:0040F296                 db    ? ;
.bss:0040F297                 db    ? ;
.bss:0040F298                 db    ? ;
.bss:0040F299                 db    ? ;
.bss:0040F29A                 db    ? ;
.bss:0040F29B                 db    ? ;
.bss:0040F29C                 db    ? ;
.bss:0040F29D                 db    ? ;
.bss:0040F29E                 db    ? ;
.bss:0040F29F                 db    ? ;
.bss:0040F2A0                 db    ? ;
.bss:0040F2A1                 db    ? ;
.bss:0040F2A2                 db    ? ;
.bss:0040F2A3                 db    ? ;
.bss:0040F2A4                 db    ? ;
.bss:0040F2A5                 db    ? ;
.bss:0040F2A6                 db    ? ;
.bss:0040F2A7                 db    ? ;
.bss:0040F2A8                 db    ? ;
.bss:0040F2A9                 db    ? ;
.bss:0040F2AA                 db    ? ;
.bss:0040F2AB                 db    ? ;
.bss:0040F2AC                 db    ? ;
.bss:0040F2AD                 db    ? ;
.bss:0040F2AE                 db    ? ;
.bss:0040F2AF                 db    ? ;
.bss:0040F2B0                 db    ? ;
.bss:0040F2B1                 db    ? ;
.bss:0040F2B2                 db    ? ;
.bss:0040F2B3                 db    ? ;
.bss:0040F2B4                 db    ? ;
.bss:0040F2B5                 db    ? ;
.bss:0040F2B6                 db    ? ;
.bss:0040F2B7                 db    ? ;
.bss:0040F2B8                 db    ? ;
.bss:0040F2B9                 db    ? ;
.bss:0040F2BA                 db    ? ;
.bss:0040F2BB                 db    ? ;
.bss:0040F2BC                 db    ? ;
.bss:0040F2BD                 db    ? ;
.bss:0040F2BE                 db    ? ;
.bss:0040F2BF                 db    ? ;
.bss:0040F2C0                 db    ? ;
.bss:0040F2C1                 db    ? ;
.bss:0040F2C2                 db    ? ;
.bss:0040F2C3                 db    ? ;
.bss:0040F2C4                 db    ? ;
.bss:0040F2C5                 db    ? ;
.bss:0040F2C6                 db    ? ;
.bss:0040F2C7                 db    ? ;
.bss:0040F2C8                 db    ? ;
.bss:0040F2C9                 db    ? ;
.bss:0040F2CA                 db    ? ;
.bss:0040F2CB                 db    ? ;
.bss:0040F2CC                 db    ? ;
.bss:0040F2CD                 db    ? ;
.bss:0040F2CE                 db    ? ;
.bss:0040F2CF                 db    ? ;
.bss:0040F2D0                 db    ? ;
.bss:0040F2D1                 db    ? ;
.bss:0040F2D2                 db    ? ;
.bss:0040F2D3                 db    ? ;
.bss:0040F2D4                 db    ? ;
.bss:0040F2D5                 db    ? ;
.bss:0040F2D6                 db    ? ;
.bss:0040F2D7                 db    ? ;
.bss:0040F2D8                 db    ? ;
.bss:0040F2D9                 db    ? ;
.bss:0040F2DA                 db    ? ;
.bss:0040F2DB                 db    ? ;
.bss:0040F2DC                 db    ? ;
.bss:0040F2DD                 db    ? ;
.bss:0040F2DE                 db    ? ;
.bss:0040F2DF                 db    ? ;
.bss:0040F2E0                 db    ? ;
.bss:0040F2E1                 db    ? ;
.bss:0040F2E2                 db    ? ;
.bss:0040F2E3                 db    ? ;
.bss:0040F2E4                 db    ? ;
.bss:0040F2E5                 db    ? ;
.bss:0040F2E6                 db    ? ;
.bss:0040F2E7                 db    ? ;
.bss:0040F2E8                 db    ? ;
.bss:0040F2E9                 db    ? ;
.bss:0040F2EA                 db    ? ;
.bss:0040F2EB                 db    ? ;
.bss:0040F2EC                 db    ? ;
.bss:0040F2ED                 db    ? ;
.bss:0040F2EE                 db    ? ;
.bss:0040F2EF                 db    ? ;
.bss:0040F2F0                 db    ? ;
.bss:0040F2F1                 db    ? ;
.bss:0040F2F2                 db    ? ;
.bss:0040F2F3                 db    ? ;
.bss:0040F2F4                 db    ? ;
.bss:0040F2F5                 db    ? ;
.bss:0040F2F6                 db    ? ;
.bss:0040F2F7                 db    ? ;
.bss:0040F2F8                 db    ? ;
.bss:0040F2F9                 db    ? ;
.bss:0040F2FA                 db    ? ;
.bss:0040F2FB                 db    ? ;
.bss:0040F2FC                 db    ? ;
.bss:0040F2FD                 db    ? ;
.bss:0040F2FE                 db    ? ;
.bss:0040F2FF                 db    ? ;
.bss:0040F300                 db    ? ;
.bss:0040F301                 db    ? ;
.bss:0040F302                 db    ? ;
.bss:0040F303                 db    ? ;
.bss:0040F304                 db    ? ;
.bss:0040F305                 db    ? ;
.bss:0040F306                 db    ? ;
.bss:0040F307                 db    ? ;
.bss:0040F308                 db    ? ;
.bss:0040F309                 db    ? ;
.bss:0040F30A                 db    ? ;
.bss:0040F30B                 db    ? ;
.bss:0040F30C                 db    ? ;
.bss:0040F30D                 db    ? ;
.bss:0040F30E                 db    ? ;
.bss:0040F30F                 db    ? ;
.bss:0040F310                 db    ? ;
.bss:0040F311                 db    ? ;
.bss:0040F312                 db    ? ;
.bss:0040F313                 db    ? ;
.bss:0040F314                 db    ? ;
.bss:0040F315                 db    ? ;
.bss:0040F316                 db    ? ;
.bss:0040F317                 db    ? ;
.bss:0040F318                 db    ? ;
.bss:0040F319                 db    ? ;
.bss:0040F31A                 db    ? ;
.bss:0040F31B                 db    ? ;
.bss:0040F31C                 db    ? ;
.bss:0040F31D                 db    ? ;
.bss:0040F31E                 db    ? ;
.bss:0040F31F                 db    ? ;
.bss:0040F320                 db    ? ;
.bss:0040F321                 db    ? ;
.bss:0040F322                 db    ? ;
.bss:0040F323                 db    ? ;
.bss:0040F324                 db    ? ;
.bss:0040F325                 db    ? ;
.bss:0040F326                 db    ? ;
.bss:0040F327                 db    ? ;
.bss:0040F328                 db    ? ;
.bss:0040F329                 db    ? ;
.bss:0040F32A                 db    ? ;
.bss:0040F32B                 db    ? ;
.bss:0040F32C                 db    ? ;
.bss:0040F32D                 db    ? ;
.bss:0040F32E                 db    ? ;
.bss:0040F32F                 db    ? ;
.bss:0040F330                 db    ? ;
.bss:0040F331                 db    ? ;
.bss:0040F332                 db    ? ;
.bss:0040F333                 db    ? ;
.bss:0040F334                 db    ? ;
.bss:0040F335                 db    ? ;
.bss:0040F336                 db    ? ;
.bss:0040F337                 db    ? ;
.bss:0040F338                 db    ? ;
.bss:0040F339                 db    ? ;
.bss:0040F33A                 db    ? ;
.bss:0040F33B                 db    ? ;
.bss:0040F33C                 db    ? ;
.bss:0040F33D                 db    ? ;
.bss:0040F33E                 db    ? ;
.bss:0040F33F                 db    ? ;
.bss:0040F340                 db    ? ;
.bss:0040F341                 db    ? ;
.bss:0040F342                 db    ? ;
.bss:0040F343                 db    ? ;
.bss:0040F344                 db    ? ;
.bss:0040F345                 db    ? ;
.bss:0040F346                 db    ? ;
.bss:0040F347                 db    ? ;
.bss:0040F348                 db    ? ;
.bss:0040F349                 db    ? ;
.bss:0040F34A                 db    ? ;
.bss:0040F34B                 db    ? ;
.bss:0040F34C                 db    ? ;
.bss:0040F34D                 db    ? ;
.bss:0040F34E                 db    ? ;
.bss:0040F34F                 db    ? ;
.bss:0040F350                 db    ? ;
.bss:0040F351                 db    ? ;
.bss:0040F352                 db    ? ;
.bss:0040F353                 db    ? ;
.bss:0040F354                 db    ? ;
.bss:0040F355                 db    ? ;
.bss:0040F356                 db    ? ;
.bss:0040F357                 db    ? ;
.bss:0040F358                 db    ? ;
.bss:0040F359                 db    ? ;
.bss:0040F35A                 db    ? ;
.bss:0040F35B                 db    ? ;
.bss:0040F35C                 db    ? ;
.bss:0040F35D                 db    ? ;
.bss:0040F35E                 db    ? ;
.bss:0040F35F                 db    ? ;
.bss:0040F360                 db    ? ;
.bss:0040F361                 db    ? ;
.bss:0040F362                 db    ? ;
.bss:0040F363                 db    ? ;
.bss:0040F364                 db    ? ;
.bss:0040F365                 db    ? ;
.bss:0040F366                 db    ? ;
.bss:0040F367                 db    ? ;
.bss:0040F368                 db    ? ;
.bss:0040F369                 db    ? ;
.bss:0040F36A                 db    ? ;
.bss:0040F36B                 db    ? ;
.bss:0040F36C                 db    ? ;
.bss:0040F36D                 db    ? ;
.bss:0040F36E                 db    ? ;
.bss:0040F36F                 db    ? ;
.bss:0040F370                 db    ? ;
.bss:0040F371                 db    ? ;
.bss:0040F372                 db    ? ;
.bss:0040F373                 db    ? ;
.bss:0040F374                 db    ? ;
.bss:0040F375                 db    ? ;
.bss:0040F376                 db    ? ;
.bss:0040F377                 db    ? ;
.bss:0040F378                 db    ? ;
.bss:0040F379                 db    ? ;
.bss:0040F37A                 db    ? ;
.bss:0040F37B                 db    ? ;
.bss:0040F37C                 db    ? ;
.bss:0040F37D                 db    ? ;
.bss:0040F37E                 db    ? ;
.bss:0040F37F                 db    ? ;
.bss:0040F380                 db    ? ;
.bss:0040F381                 db    ? ;
.bss:0040F382                 db    ? ;
.bss:0040F383                 db    ? ;
.bss:0040F384                 db    ? ;
.bss:0040F385                 db    ? ;
.bss:0040F386                 db    ? ;
.bss:0040F387                 db    ? ;
.bss:0040F388                 db    ? ;
.bss:0040F389                 db    ? ;
.bss:0040F38A                 db    ? ;
.bss:0040F38B                 db    ? ;
.bss:0040F38C                 db    ? ;
.bss:0040F38D                 db    ? ;
.bss:0040F38E                 db    ? ;
.bss:0040F38F                 db    ? ;
.bss:0040F390                 db    ? ;
.bss:0040F391                 db    ? ;
.bss:0040F392                 db    ? ;
.bss:0040F393                 db    ? ;
.bss:0040F394                 db    ? ;
.bss:0040F395                 db    ? ;
.bss:0040F396                 db    ? ;
.bss:0040F397                 db    ? ;
.bss:0040F398                 db    ? ;
.bss:0040F399                 db    ? ;
.bss:0040F39A                 db    ? ;
.bss:0040F39B                 db    ? ;
.bss:0040F39C                 db    ? ;
.bss:0040F39D                 db    ? ;
.bss:0040F39E                 db    ? ;
.bss:0040F39F                 db    ? ;
.bss:0040F3A0                 db    ? ;
.bss:0040F3A1                 db    ? ;
.bss:0040F3A2                 db    ? ;
.bss:0040F3A3                 db    ? ;
.bss:0040F3A4                 db    ? ;
.bss:0040F3A5                 db    ? ;
.bss:0040F3A6                 db    ? ;
.bss:0040F3A7                 db    ? ;
.bss:0040F3A8                 db    ? ;
.bss:0040F3A9                 db    ? ;
.bss:0040F3AA                 db    ? ;
.bss:0040F3AB                 db    ? ;
.bss:0040F3AC                 db    ? ;
.bss:0040F3AD                 db    ? ;
.bss:0040F3AE                 db    ? ;
.bss:0040F3AF                 db    ? ;
.bss:0040F3B0                 db    ? ;
.bss:0040F3B1                 db    ? ;
.bss:0040F3B2                 db    ? ;
.bss:0040F3B3                 db    ? ;
.bss:0040F3B4                 db    ? ;
.bss:0040F3B5                 db    ? ;
.bss:0040F3B6                 db    ? ;
.bss:0040F3B7                 db    ? ;
.bss:0040F3B8                 db    ? ;
.bss:0040F3B9                 db    ? ;
.bss:0040F3BA                 db    ? ;
.bss:0040F3BB                 db    ? ;
.bss:0040F3BC                 db    ? ;
.bss:0040F3BD                 db    ? ;
.bss:0040F3BE                 db    ? ;
.bss:0040F3BF                 db    ? ;
.bss:0040F3C0                 db    ? ;
.bss:0040F3C1                 db    ? ;
.bss:0040F3C2                 db    ? ;
.bss:0040F3C3                 db    ? ;
.bss:0040F3C4                 db    ? ;
.bss:0040F3C5                 db    ? ;
.bss:0040F3C6                 db    ? ;
.bss:0040F3C7                 db    ? ;
.bss:0040F3C8                 db    ? ;
.bss:0040F3C9                 db    ? ;
.bss:0040F3CA                 db    ? ;
.bss:0040F3CB                 db    ? ;
.bss:0040F3CC                 db    ? ;
.bss:0040F3CD                 db    ? ;
.bss:0040F3CE                 db    ? ;
.bss:0040F3CF                 db    ? ;
.bss:0040F3D0                 db    ? ;
.bss:0040F3D1                 db    ? ;
.bss:0040F3D2                 db    ? ;
.bss:0040F3D3                 db    ? ;
.bss:0040F3D4                 db    ? ;
.bss:0040F3D5                 db    ? ;
.bss:0040F3D6                 db    ? ;
.bss:0040F3D7                 db    ? ;
.bss:0040F3D8                 db    ? ;
.bss:0040F3D9                 db    ? ;
.bss:0040F3DA                 db    ? ;
.bss:0040F3DB                 db    ? ;
.bss:0040F3DC                 db    ? ;
.bss:0040F3DD                 db    ? ;
.bss:0040F3DE                 db    ? ;
.bss:0040F3DF                 db    ? ;
.bss:0040F3E0                 db    ? ;
.bss:0040F3E1                 db    ? ;
.bss:0040F3E2                 db    ? ;
.bss:0040F3E3                 db    ? ;
.bss:0040F3E4                 db    ? ;
.bss:0040F3E5                 db    ? ;
.bss:0040F3E6                 db    ? ;
.bss:0040F3E7                 db    ? ;
.bss:0040F3E8                 db    ? ;
.bss:0040F3E9                 db    ? ;
.bss:0040F3EA                 db    ? ;
.bss:0040F3EB                 db    ? ;
.bss:0040F3EC                 db    ? ;
.bss:0040F3ED                 db    ? ;
.bss:0040F3EE                 db    ? ;
.bss:0040F3EF                 db    ? ;
.bss:0040F3F0 dword_40F3F0    dd ?                    ; DATA XREF: sub_409600+8↑r
.bss:0040F3F0                                         ; sub_409710:loc_409792↑w ...
.bss:0040F3F4                 align 10h
.bss:0040F400 ; struct _OSVERSIONINFOA VersionInformation
.bss:0040F400 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_409710:loc_409730↑o
.bss:0040F400                                         ; sub_409710+2C↑w ...
.bss:0040F494 word_40F494     dw ?                    ; DATA XREF: sub_409710:loc_4097C3↑r
.bss:0040F496                 align 4
.bss:0040F498 word_40F498     dw ?                    ; DATA XREF: .text:loc_409186↑r
.bss:0040F498                                         ; .text:004091B4↑r ...
.bss:0040F49A byte_40F49A     db ?                    ; DATA XREF: .text:00409145↑r
.bss:0040F49B                 align 10h
.bss:0040F4A0 dword_40F4A0    dd ?                    ; DATA XREF: sub_409710+6↑r
.bss:0040F4A0                                         ; sub_409710+75↑w
.bss:0040F4A4                 align 10h
.bss:0040F4B0 dword_40F4B0    dd ?                    ; DATA XREF: sub_40ACB0+6E↑r
.bss:0040F4B0                                         ; sub_40ACB0+9A↑r ...
.bss:0040F4B4 dword_40F4B4    dd ?                    ; DATA XREF: sub_40ACB0:loc_40AD18↑r
.bss:0040F4B4                                         ; sub_40ACB0+A0↑r ...
.bss:0040F4B8                 align 10h
.bss:0040F4C0 dword_40F4C0    dd ?                    ; DATA XREF: sub_40B1C0↑r
.bss:0040F4C0                                         ; .text:loc_40B3B2↑w
.bss:0040F4C4                 align 10h
.bss:0040F4D0 dword_40F4D0    dd ?                    ; DATA XREF: sub_401910+34↑w
.bss:0040F4D0                                         ; sub_401910+E5↑r ...
.bss:0040F4D4                 db    ? ;
.bss:0040F4D5                 db    ? ;
.bss:0040F4D6                 db    ? ;
.bss:0040F4D7                 db    ? ;
.bss:0040F4D8                 db    ? ;
.bss:0040F4D9                 db    ? ;
.bss:0040F4DA                 db    ? ;
.bss:0040F4DB                 db    ? ;
.bss:0040F4DC                 db    ? ;
.bss:0040F4DD                 db    ? ;
.bss:0040F4DE                 db    ? ;
.bss:0040F4DF                 db    ? ;
.bss:0040F4E0                 db    ? ;
.bss:0040F4E1                 db    ? ;
.bss:0040F4E2                 db    ? ;
.bss:0040F4E3                 db    ? ;
.bss:0040F4E4                 db    ? ;
.bss:0040F4E5                 db    ? ;
.bss:0040F4E6                 db    ? ;
.bss:0040F4E7                 db    ? ;
.bss:0040F4E8                 db    ? ;
.bss:0040F4E9                 db    ? ;
.bss:0040F4EA                 db    ? ;
.bss:0040F4EB                 db    ? ;
.bss:0040F4EC                 db    ? ;
.bss:0040F4ED                 db    ? ;
.bss:0040F4EE                 db    ? ;
.bss:0040F4EF                 db    ? ;
.bss:0040F4F0 dword_40F4F0    dd ?                    ; DATA XREF: sub_403150+71↑w
.bss:0040F4F0                                         ; .text:00403251↑w
.bss:0040F4F4                 align 10h
.bss:0040F500 dword_40F500    dd ?                    ; CODE XREF: sub_405444+63↑p
.bss:0040F500                                         ; DATA XREF: sub_405340+1E↑r ...
.bss:0040F504                 align 10h
.bss:0040F510 dword_40F510    dd ?                    ; DATA XREF: sub_405340+4E↑w
.bss:0040F510                                         ; sub_405444+AB↑w
.bss:0040F514                 align 40h
.bss:0040F540 dword_40F540    dd ?                    ; DATA XREF: sub_405444+13↑r
.bss:0040F544                 align 1000h
.bss:0040F544 _bss            ends
.bss:0040F544
.idata:00410000 ; Section 4. (virtual address 00010000)
.idata:00410000 ; Virtual size                  : 00000D64 (   3428.)
.idata:00410000 ; Section size in file          : 00000E00 (   3584.)
.idata:00410000 ; Offset to raw data for section: 0000CE00
.idata:00410000 ; Flags C0000040: Data Readable Writable
.idata:00410000 ; Alignment     : default
.idata:00410000 ; ===========================================================================
.idata:00410000
.idata:00410000 ; Segment type: Externs
.idata:00410000 ; _idata
.idata:00410000
.idata:00410001
.idata:0041029C ;
.idata:0041029C ; Imports from libintl3.dll
.idata:0041029C ;
.idata:0041029C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0041029C                                         ; CODE XREF: sub_401910+4E↑p
.idata:0041029C                                         ; DATA XREF: sub_401910+4E↑r ...
.idata:004102A0                 extrn libintl_gettext:dword
.idata:004102A0                                         ; CODE XREF: sub_401910+D9↑p
.idata:004102A0                                         ; sub_401910+15A↑p ...
.idata:004102A4                 extrn libintl_textdomain:dword
.idata:004102A4                                         ; CODE XREF: sub_401910+5B↑p
.idata:004102A4                                         ; DATA XREF: sub_401910+5B↑r ...
.idata:004102A8
.idata:004102B0 ;
.idata:004102B0 ; Imports from ADVAPI32.DLL
.idata:004102B0 ;
.idata:004102B0 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004102B0                 extrn __imp_RegCloseKey:dword
.idata:004102B0                                         ; DATA XREF: RegCloseKey↑r
.idata:004102B4 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004102B4                 extrn __imp_RegOpenKeyExA:dword
.idata:004102B4                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004102B8 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004102B8                 extrn __imp_RegQueryValueExA:dword
.idata:004102B8                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004102BC
.idata:004102C4 ;
.idata:004102C4 ; Imports from KERNEL32.dll
.idata:004102C4 ;
.idata:004102C4 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004102C4                 extrn __imp_AreFileApisANSI:dword
.idata:004102C4                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004102C8 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004102C8                 extrn __imp_CloseHandle:dword
.idata:004102C8                                         ; DATA XREF: CloseHandle↑r
.idata:004102CC ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004102CC                 extrn __imp_CreateDirectoryA:dword
.idata:004102CC                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004102D0 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004102D0                 extrn __imp_CreateFileA:dword
.idata:004102D0                                         ; DATA XREF: CreateFileA↑r
.idata:004102D4 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004102D4                 extrn __imp_DeviceIoControl:dword
.idata:004102D4                                         ; DATA XREF: DeviceIoControl↑r
.idata:004102D8 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004102D8                 extrn __imp_ExitProcess:dword
.idata:004102D8                                         ; DATA XREF: ExitProcess↑r
.idata:004102DC ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004102DC                 extrn __imp_FindClose:dword
.idata:004102DC                                         ; DATA XREF: FindClose↑r
.idata:004102E0 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102E0                 extrn __imp_FindFirstFileA:dword
.idata:004102E0                                         ; DATA XREF: FindFirstFileA↑r
.idata:004102E4 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102E4                 extrn __imp_FindNextFileA:dword
.idata:004102E4                                         ; DATA XREF: FindNextFileA↑r
.idata:004102E8 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:004102E8                 extrn __imp_FreeLibrary:dword
.idata:004102E8                                         ; DATA XREF: FreeLibrary↑r
.idata:004102EC ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004102EC                 extrn __imp_GetCurrentDirectoryA:dword
.idata:004102EC                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:004102F0 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:004102F0                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:004102F0                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:004102F4 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:004102F4                 extrn __imp_GetDriveTypeA:dword
.idata:004102F4                                         ; DATA XREF: GetDriveTypeA↑r
.idata:004102F8 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:004102F8                 extrn __imp_GetFileAttributesA:dword
.idata:004102F8                                         ; DATA XREF: GetFileAttributesA↑r
.idata:004102FC ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:004102FC                 extrn __imp_GetFileInformationByHandle:dword
.idata:004102FC                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00410300 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00410300                 extrn __imp_GetFileSize:dword
.idata:00410300                                         ; DATA XREF: GetFileSize↑r
.idata:00410304 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00410304                 extrn __imp_GetFileType:dword
.idata:00410304                                         ; DATA XREF: GetFileType↑r
.idata:00410308 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00410308                 extrn __imp_GetFullPathNameA:dword
.idata:00410308                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041030C ; DWORD (__stdcall *GetLastError)()
.idata:0041030C                 extrn __imp_GetLastError:dword
.idata:0041030C                                         ; DATA XREF: GetLastError↑r
.idata:00410310 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00410310                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00410310                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00410314 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00410314                 extrn __imp_GetModuleFileNameA:dword
.idata:00410314                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00410318 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00410318                 extrn __imp_GetModuleHandleA:dword
.idata:00410318                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041031C ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041031C                 extrn __imp_GetProcAddress:dword
.idata:0041031C                                         ; DATA XREF: GetProcAddress↑r
.idata:00410320 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00410320                 extrn __imp_GetProcessHeap:dword
.idata:00410320                                         ; DATA XREF: GetProcessHeap↑r
.idata:00410324 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00410324                 extrn __imp_GetShortPathNameA:dword
.idata:00410324                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00410328 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00410328                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00410328                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041032C ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041032C                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041032C                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00410330 ; DWORD (__stdcall *GetVersion)()
.idata:00410330                 extrn __imp_GetVersion:dword
.idata:00410330                                         ; DATA XREF: GetVersion↑r
.idata:00410334 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00410334                 extrn __imp_GetVersionExA:dword
.idata:00410334                                         ; DATA XREF: GetVersionExA↑r
.idata:00410338 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00410338                 extrn __imp_GetVolumeInformationA:dword
.idata:00410338                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041033C ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041033C                 extrn __imp_HeapAlloc:dword
.idata:0041033C                                         ; DATA XREF: HeapAlloc↑r
.idata:00410340 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00410340                 extrn __imp_HeapFree:dword
.idata:00410340                                         ; DATA XREF: HeapFree↑r
.idata:00410344 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00410344                 extrn __imp_LoadLibraryA:dword
.idata:00410344                                         ; DATA XREF: LoadLibraryA↑r
.idata:00410348 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00410348                 extrn __imp_MultiByteToWideChar:dword
.idata:00410348                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041034C ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041034C                 extrn __imp_PeekNamedPipe:dword
.idata:0041034C                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00410350 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00410350                 extrn __imp_SetErrorMode:dword
.idata:00410350                                         ; DATA XREF: SetErrorMode↑r
.idata:00410354 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00410354                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00410354                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00410358 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00410358                 extrn __imp_UnlockFile:dword
.idata:00410358                                         ; DATA XREF: UnlockFile↑r
.idata:0041035C ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041035C                 extrn __imp_lstrcmpiA:dword
.idata:0041035C                                         ; DATA XREF: lstrcmpiA↑r
.idata:00410360 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00410360                 extrn __imp_lstrcpyA:dword
.idata:00410360                                         ; DATA XREF: lstrcpyA↑r
.idata:00410364
.idata:0041036C ;
.idata:0041036C ; Imports from msvcrt.dll
.idata:0041036C ;
.idata:0041036C ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041036C                 extrn __imp__chmod:dword
.idata:0041036C                                         ; DATA XREF: _chmod↑r
.idata:00410370 ; int (__cdecl *_getpid)()
.idata:00410370                 extrn __imp__getpid:dword
.idata:00410370                                         ; DATA XREF: _getpid↑r
.idata:00410374 ; char *(__cdecl *_strdup)(const char *String)
.idata:00410374                 extrn __imp__strdup:dword
.idata:00410374                                         ; DATA XREF: _strdup↑r
.idata:00410378 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00410378                 extrn __imp__stricmp:dword
.idata:00410378                                         ; DATA XREF: _stricmp↑r
.idata:0041037C
.idata:00410384 ;
.idata:00410384 ; Imports from MSVCP60.DLL
.idata:00410384 ;
.idata:00410384 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00410384                 extrn __imp_mbrtowc:dword
.idata:00410384                                         ; DATA XREF: mbrtowc↑r
.idata:00410388
.idata:00410390 ;
.idata:00410390 ; Imports from msvcrt.dll
.idata:00410390 ;
.idata:00410390                 extrn __imp___getmainargs:dword
.idata:00410390                                         ; DATA XREF: __getmainargs↑r
.idata:00410394 ; int _mb_cur_max
.idata:00410394                 extrn __mb_cur_max:dword
.idata:00410394                                         ; DATA XREF: sub_403FE0+7↑r
.idata:00410394                                         ; sub_403FE0+5F3↑r
.idata:00410398 ; char ***(__cdecl *__p__environ)()
.idata:00410398                 extrn __imp___p__environ:dword
.idata:00410398                                         ; DATA XREF: __p__environ↑r
.idata:0041039C ; int *(__cdecl *__p__fmode)()
.idata:0041039C                 extrn __imp___p__fmode:dword
.idata:0041039C                                         ; DATA XREF: __p__fmode↑r
.idata:004103A0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004103A0                 extrn __set_app_type:dword
.idata:004103A0                                         ; CODE XREF: start+D↑p
.idata:004103A0                                         ; .text:0040102D↑p
.idata:004103A0                                         ; DATA XREF: ...
.idata:004103A4                 extrn __imp__assert:dword
.idata:004103A4                                         ; DATA XREF: _assert↑r
.idata:004103A8 ; void (__cdecl *_cexit)()
.idata:004103A8                 extrn __imp__cexit:dword
.idata:004103A8                                         ; DATA XREF: _cexit↑r
.idata:004103AC ; int (__cdecl *_close)(int FileHandle)
.idata:004103AC                 extrn __imp__close:dword
.idata:004103AC                                         ; DATA XREF: _close↑r
.idata:004103B0 ; int *(__cdecl *_errno)()
.idata:004103B0                 extrn __imp__errno:dword
.idata:004103B0                                         ; DATA XREF: _errno↑r
.idata:004103B4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004103B4                 extrn __imp__fdopen:dword
.idata:004103B4                                         ; DATA XREF: _fdopen↑r
.idata:004103B8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004103B8                 extrn __imp__filelengthi64:dword
.idata:004103B8                                         ; DATA XREF: _filelengthi64↑r
.idata:004103BC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004103BC                 extrn __imp__flsbuf:dword
.idata:004103BC                                         ; DATA XREF: _flsbuf↑r
.idata:004103C0 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004103C0                 extrn __imp__get_osfhandle:dword
.idata:004103C0                                         ; DATA XREF: _get_osfhandle↑r
.idata:004103C4 ; char *(__cdecl *_getcwd)(char *DstBuf, int SizeInBytes)
.idata:004103C4                 extrn __imp__getcwd:dword
.idata:004103C4                                         ; DATA XREF: _getcwd↑r
.idata:004103C8 ; FILE iob[]
.idata:004103C8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004103C8                                         ; sub_401080+75↑r ...
.idata:004103CC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004103CC                 extrn __imp__isctype:dword
.idata:004103CC                                         ; DATA XREF: _isctype↑r
.idata:004103D0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004103D0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004103D0                                         ; DATA XREF: .text:0040106C↑r
.idata:004103D4 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004103D4                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004103D8 ; const unsigned __int16 *pctype
.idata:004103D8                 extrn _pctype:dword     ; DATA XREF: sub_403FE0:loc_4046D4↑r
.idata:004103DC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004103DC                 extrn __imp__setmode:dword
.idata:004103DC                                         ; DATA XREF: _setmode↑r
.idata:004103E0 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004103E0                 extrn __imp__stricmp_0:dword
.idata:004103E0                                         ; DATA XREF: _stricmp_0↑r
.idata:004103E4 ; void (__cdecl __noreturn *abort)()
.idata:004103E4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004103E8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004103E8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004103E8                                         ; DATA XREF: sub_401040+C↑r
.idata:004103EC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004103EC                 extrn __imp_calloc:dword
.idata:004103EC                                         ; DATA XREF: calloc↑r
.idata:004103F0 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004103F0                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004103F4 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004103F4                 extrn __imp_fclose:dword
.idata:004103F4                                         ; DATA XREF: fclose↑r
.idata:004103F8 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004103F8                 extrn __imp_fflush:dword
.idata:004103F8                                         ; DATA XREF: fflush↑r
.idata:004103FC ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004103FC                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00410400 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00410400                 extrn __imp_fprintf:dword
.idata:00410400                                         ; DATA XREF: fprintf↑r
.idata:00410404 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00410404                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00410408 ; void (__cdecl *free)(void *Block)
.idata:00410408                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041040C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041040C                 extrn __imp_getenv:dword
.idata:0041040C                                         ; DATA XREF: getenv↑r
.idata:00410410 ; int (__cdecl *isalpha)(int C)
.idata:00410410                 extrn __imp_isalpha:dword
.idata:00410410                                         ; DATA XREF: isalpha↑r
.idata:00410414 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00410414                 extrn __imp_iswctype:dword
.idata:00410414                                         ; DATA XREF: iswctype↑r
.idata:00410418 ; void *(__cdecl *malloc)(size_t Size)
.idata:00410418                 extrn __imp_malloc:dword
.idata:00410418                                         ; DATA XREF: malloc↑r
.idata:0041041C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041041C                 extrn __imp_memcpy:dword
.idata:0041041C                                         ; DATA XREF: memcpy↑r
.idata:00410420 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:00410420                 extrn __imp_memmove:dword
.idata:00410420                                         ; DATA XREF: memmove↑r
.idata:00410424 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00410424                 extrn __imp_memset:dword
.idata:00410424                                         ; DATA XREF: memset↑r
.idata:00410428 ; int (*printf)(const char *const Format, ...)
.idata:00410428                 extrn __imp_printf:dword
.idata:00410428                                         ; DATA XREF: printf↑r
.idata:0041042C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041042C                 extrn __imp_realloc:dword
.idata:0041042C                                         ; DATA XREF: realloc↑r
.idata:00410430 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00410430                 extrn __imp_setlocale:dword
.idata:00410430                                         ; DATA XREF: setlocale↑r
.idata:00410434 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00410434                 extrn __imp_signal:dword
.idata:00410434                                         ; DATA XREF: signal↑r
.idata:00410438 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00410438                 extrn __imp_sprintf:dword
.idata:00410438                                         ; DATA XREF: sprintf↑r
.idata:0041043C ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041043C                 extrn __imp_sscanf:dword
.idata:0041043C                                         ; DATA XREF: sscanf↑r
.idata:00410440 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00410440                 extrn __imp_strcat:dword
.idata:00410440                                         ; DATA XREF: strcat↑r
.idata:00410444 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00410444                 extrn __imp_strchr:dword
.idata:00410444                                         ; DATA XREF: strchr↑r
.idata:00410448 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00410448                 extrn __imp_strcmp:dword
.idata:00410448                                         ; DATA XREF: strcmp↑r
.idata:0041044C ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041044C                 extrn __imp_strcpy:dword
.idata:0041044C                                         ; DATA XREF: strcpy↑r
.idata:00410450 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00410450                 extrn __imp_strerror:dword
.idata:00410450                                         ; DATA XREF: strerror↑r
.idata:00410454 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00410454                 extrn __imp_strlen:dword
.idata:00410454                                         ; DATA XREF: strlen↑r
.idata:00410458 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00410458                 extrn __imp_strncmp:dword
.idata:00410458                                         ; DATA XREF: strncmp↑r
.idata:0041045C ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041045C                 extrn __imp_strncpy:dword
.idata:0041045C                                         ; DATA XREF: strncpy↑r
.idata:00410460 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00410460                 extrn __imp_strpbrk:dword
.idata:00410460                                         ; DATA XREF: strpbrk↑r
.idata:00410464 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00410464                 extrn __imp_strrchr:dword
.idata:00410464                                         ; DATA XREF: strrchr↑r
.idata:00410468 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00410468                 extrn __imp_strspn:dword
.idata:00410468                                         ; DATA XREF: strspn↑r
.idata:0041046C ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041046C                 extrn __imp_strstr:dword
.idata:0041046C                                         ; DATA XREF: strstr↑r
.idata:00410470 ; int (__cdecl *toupper)(int C)
.idata:00410470                 extrn __imp_toupper:dword
.idata:00410470                                         ; DATA XREF: toupper↑r
.idata:00410474 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00410474                 extrn __imp_vfprintf:dword
.idata:00410474                                         ; DATA XREF: vfprintf↑r
.idata:00410478
.idata:00410480 ;
.idata:00410480 ; Imports from OLE32.dll
.idata:00410480 ;
.idata:00410480 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00410480                 extrn __imp_CoCreateInstance:dword
.idata:00410480                                         ; DATA XREF: CoCreateInstance↑r
.idata:00410484 ; void (__stdcall *CoUninitialize)()
.idata:00410484                 extrn __imp_CoUninitialize:dword
.idata:00410484                                         ; DATA XREF: CoUninitialize↑r
.idata:00410488 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00410488                 extrn __imp_OleInitialize:dword
.idata:00410488                                         ; DATA XREF: OleInitialize↑r
.idata:0041048C
.idata:0041048C
.idata:0041048C
.idata:0041048C                 end start
