.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 50B71C20B74FCD079E089A013BDEE02BBF109BF516993B545E3D15C954659E34
.text:00401000 ; Input MD5    : 0AC97BFB2106D46BB08CE7139AB8BB32
.text:00401000 ; Input CRC32  : 392C4781
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/tsort.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A261 (Wed Apr 20 18:41:37 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004A90 (  19088.)
.text:00401000 ; Section size in file          : 00004C00 (  19456.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401340+62↓p
.text:00401040                                         ; .text:00405740↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4056E0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4056B0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401340
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4056E0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401340+1F↓o
.text:00401280                                         ; sub_401340+B3↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401340+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401340+41↓o
.text:004012C3                                         ; sub_401340+4E↓o ...
.text:004012CD aMarkKettenis   db 'Mark Kettenis',0    ; DATA XREF: sub_401340+6F↓o
.text:004012DB a530            db '5.3.0',0            ; DATA XREF: sub_401340+7F↓o
.text:004012E1 ; const FILE stru_4012E1
.text:004012E1 stru_4012E1     FILE <726F7374h, 78650074h, 20617274h, 7265706Fh, 20646E61h, \
.text:004012E1                                         ; DATA XREF: sub_401340+8F↓o
.text:004012E1                                         ; sub_401340+EA↓o
.text:004012E1                       90007325h, 26B48Dh, 54000000h>
.text:00401301                 db  72h ; r
.text:00401302                 db  79h ; y
.text:00401303                 db  20h
.text:00401304                 db  60h ; `
.text:00401305                 db  25h ; %
.text:00401306                 db  73h ; s
.text:00401307                 db  20h
.text:00401308                 db  2Dh ; -
.text:00401309                 db  2Dh ; -
.text:0040130A                 db  68h ; h
.text:0040130B                 db  65h ; e
.text:0040130C                 db  6Ch ; l
.text:0040130D                 db  70h ; p
.text:0040130E                 db  27h ; '
.text:0040130F                 db  20h
.text:00401310                 db  66h ; f
.text:00401311                 db  6Fh ; o
.text:00401312                 db  72h ; r
.text:00401313                 db  20h
.text:00401314                 db  6Dh ; m
.text:00401315                 db  6Fh ; o
.text:00401316                 db  72h ; r
.text:00401317                 db  65h ; e
.text:00401318                 db  20h
.text:00401319                 db  69h ; i
.text:0040131A                 db  6Eh ; n
.text:0040131B                 db  66h ; f
.text:0040131C                 db  6Fh ; o
.text:0040131D                 db  72h ; r
.text:0040131E                 db  6Dh ; m
.text:0040131F                 db  61h ; a
.text:00401320                 db  74h ; t
.text:00401321                 db  69h ; i
.text:00401322                 db  6Fh ; o
.text:00401323                 db  6Eh ; n
.text:00401324                 db  2Eh ; .
.text:00401325                 db  0Ah
.text:00401326                 db    0
.text:00401327 ; const char FileName[]
.text:00401327 FileName        db '-',0                ; DATA XREF: sub_401340+14F↓o
.text:00401327                                         ; sub_4017B0+4↓o
.text:00401329 aStandardInput  db 'standard input',0   ; DATA XREF: sub_401340+18C↓o
.text:00401338                 align 10h
.text:00401340
.text:00401340 ; =============== S U B R O U T I N E =======================================
.text:00401340
.text:00401340 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401340
.text:00401340 sub_401340      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401340
.text:00401340 Category        = dword ptr -38h
.text:00401340 Locale          = dword ptr -34h
.text:00401340 var_30          = dword ptr -30h
.text:00401340 var_2C          = byte ptr -2Ch
.text:00401340 var_28          = dword ptr -28h
.text:00401340 var_24          = dword ptr -24h
.text:00401340 var_20          = byte ptr -20h
.text:00401340 var_1C          = dword ptr -1Ch
.text:00401340 var_9           = byte ptr -9
.text:00401340 arg_0           = dword ptr  8
.text:00401340 arg_4           = dword ptr  0Ch
.text:00401340
.text:00401340                 push    ebp
.text:00401341                 xor     eax, eax
.text:00401343                 mov     ebp, esp
.text:00401345                 push    esi
.text:00401346                 push    ebx
.text:00401347                 sub     esp, 30h
.text:0040134A                 mov     ebx, [ebp+arg_4]
.text:0040134D                 and     esp, 0FFFFFFF0h
.text:00401350                 mov     esi, [ebp+arg_0]
.text:00401353                 call    __alloca
.text:00401358                 call    sub_405780
.text:0040135D                 mov     edx, [ebx]
.text:0040135F                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401367                 mov     [esp+38h+Category], 0 ; Category
.text:0040136E                 mov     ds:dword_4072F0, edx
.text:00401374                 call    setlocale
.text:00401379                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401381                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401388                 call    ds:__imp_libintl_bindtextdomain
.text:0040138E                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401395                 call    ds:libintl_textdomain
.text:0040139B                 mov     [esp+38h+Category], offset sub_4033D0 ; void (__cdecl *)()
.text:004013A2                 call    sub_401040
.text:004013A7                 mov     [esp+38h+var_1C], 0
.text:004013AF                 mov     dword ptr [esp+38h+var_20], offset aMarkKettenis ; "Mark Kettenis"
.text:004013B7                 mov     [esp+38h+var_24], offset sub_401650 ; int
.text:004013BF                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:004013C7                 mov     dword ptr [esp+38h+var_2C], offset aCoreutils ; "coreutils"
.text:004013CF                 mov     [esp+38h+var_30], offset stru_4012E1 ; FILE *
.text:004013D7                 mov     [esp+38h+Locale], ebx ; int
.text:004013DB                 mov     [esp+38h+Category], esi ; int
.text:004013DE                 call    sub_4032E0
.text:004013E3                 mov     [esp+38h+var_28], 0 ; int
.text:004013EB                 mov     dword ptr [esp+38h+var_2C], 0 ; char
.text:004013F3                 mov     [esp+38h+var_30], offset Locale ; char *
.text:004013FB                 mov     [esp+38h+Locale], ebx ; int
.text:004013FF                 mov     [esp+38h+Category], esi ; int
.text:00401402                 call    sub_403140
.text:00401407                 inc     eax
.text:00401408                 jnz     short loc_401455
.text:0040140A                 mov     ds:byte_407040, 0
.text:00401411                 mov     edx, dword_406010
.text:00401417                 mov     ecx, esi
.text:00401419                 sub     ecx, edx
.text:0040141B                 dec     ecx
.text:0040141C                 jle     short loc_40148D
.text:0040141E                 mov     ecx, [ebx+edx*4+4]
.text:00401422                 mov     [esp+38h+Category], ecx ; char *
.text:00401425                 call    sub_403110
.text:0040142A                 mov     [esp+38h+Category], (offset stru_4012E1._cnt+2)
.text:00401431                 mov     esi, eax
.text:00401433                 call    ds:libintl_gettext
.text:00401439                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:0040143D                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401445                 mov     [esp+38h+Category], 0 ; Code
.text:0040144C                 mov     [esp+38h+var_30], eax ; char *
.text:00401450                 call    sub_405400
.text:00401455
.text:00401455 loc_401455:                             ; CODE XREF: sub_401340+C8↑j
.text:00401455                 mov     [esp+38h+Category], (offset stru_4012E1._tmpfname+3)
.text:0040145C                 call    ds:libintl_gettext
.text:00401462                 mov     edx, ds:_iob
.text:00401468                 mov     ebx, ds:dword_4072F0
.text:0040146E                 add     edx, 40h ; '@'
.text:00401471                 mov     [esp+38h+var_30], ebx
.text:00401475                 mov     [esp+38h+Locale], eax ; Format
.text:00401479                 mov     [esp+38h+Category], edx ; Stream
.text:0040147C                 call    fprintf
.text:00401481                 mov     [esp+38h+Category], 1 ; Code
.text:00401488
.text:00401488 loc_401488:                             ; CODE XREF: sub_401340+179↓j
.text:00401488                 call    exit
.text:0040148D ; ---------------------------------------------------------------------------
.text:0040148D
.text:0040148D loc_40148D:                             ; CODE XREF: sub_401340+DC↑j
.text:0040148D                 cmp     edx, esi
.text:0040148F                 mov     eax, offset FileName ; "-"
.text:00401494                 jz      short loc_401499
.text:00401496                 mov     eax, [ebx+edx*4]
.text:00401499
.text:00401499 loc_401499:                             ; CODE XREF: sub_401340+154↑j
.text:00401499                 mov     [esp+38h+Category], eax ; FileName
.text:0040149C                 call    sub_4017B0
.text:004014A1                 cmp     ds:byte_407040, 0
.text:004014A8                 mov     [ebp+var_9], al
.text:004014AB                 jnz     short loc_4014BB
.text:004014AD
.text:004014AD loc_4014AD:                             ; CODE XREF: sub_401340+18A↓j
.text:004014AD                                         ; sub_401340+1B6↓j
.text:004014AD                 xor     edx, edx
.text:004014AF                 cmp     [ebp+var_9], 0
.text:004014B3                 setz    dl
.text:004014B6                 mov     [esp+38h+Category], edx
.text:004014B9                 jmp     short loc_401488
.text:004014BB ; ---------------------------------------------------------------------------
.text:004014BB
.text:004014BB loc_4014BB:                             ; CODE XREF: sub_401340+16B↑j
.text:004014BB                 mov     esi, ds:_iob
.text:004014C1                 mov     [esp+38h+Category], esi ; Stream
.text:004014C4                 call    fclose
.text:004014C9                 inc     eax
.text:004014CA                 jnz     short loc_4014AD
.text:004014CC                 mov     [esp+38h+Category], offset aStandardInput ; "standard input"
.text:004014D3                 call    ds:libintl_gettext
.text:004014D9                 mov     esi, eax
.text:004014DB                 call    _errno
.text:004014E0                 mov     [esp+38h+var_30], esi ; char *
.text:004014E4                 mov     ecx, [eax]
.text:004014E6                 mov     [esp+38h+Category], 1 ; Code
.text:004014ED                 mov     [esp+38h+Locale], ecx ; ErrorMessage
.text:004014F1                 call    sub_405400
.text:004014F6                 jmp     short loc_4014AD
.text:004014F6 sub_401340      endp
.text:004014F6
.text:004014F6 ; ---------------------------------------------------------------------------
.text:004014F8                 align 10h
.text:00401500 aUsageSOptionFi db 'Usage: %s [OPTION] [FILE]',0Ah
.text:00401500                                         ; DATA XREF: sub_401650:loc_401693↓o
.text:00401500                 db 'Write totally ordered list consistent with the partial ordering i'
.text:00401500                 db 'n FILE.',0Ah
.text:00401500                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:00401500                 db 0Ah,0
.text:0040159B                 align 10h
.text:004015A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015A0                                         ; DATA XREF: sub_401650+62↓o
.text:004015CD                 align 20h
.text:004015E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004015E0                                         ; DATA XREF: sub_401650+84↓o
.text:00401616 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401650+A6↓o
.text:00401616                 db 'Report bugs to <%s>.',0Ah,0
.text:0040162D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040162D                                         ; DATA XREF: sub_401650+B3↓o
.text:00401643                 align 10h
.text:00401650
.text:00401650 ; =============== S U B R O U T I N E =======================================
.text:00401650
.text:00401650 ; Attributes: noreturn
.text:00401650
.text:00401650 ; void __cdecl __noreturn sub_401650(int Code)
.text:00401650 sub_401650      proc near               ; DATA XREF: sub_401340+77↑o
.text:00401650
.text:00401650 Stream          = dword ptr -1Ch
.text:00401650 Format          = dword ptr -18h
.text:00401650 var_14          = dword ptr -14h
.text:00401650 var_4           = dword ptr -4
.text:00401650 Code            = dword ptr  4
.text:00401650
.text:00401650                 sub     esp, 1Ch
.text:00401653                 mov     [esp+1Ch+var_4], ebx
.text:00401657                 mov     ebx, [esp+1Ch+Code]
.text:0040165B                 test    ebx, ebx
.text:0040165D                 jz      short loc_401693
.text:0040165F                 mov     [esp+1Ch+Stream], (offset stru_4012E1._tmpfname+3)
.text:00401666                 call    ds:libintl_gettext
.text:0040166C                 mov     edx, ds:_iob
.text:00401672                 mov     ecx, ds:dword_4072F0
.text:00401678                 add     edx, 40h ; '@'
.text:0040167B                 mov     [esp+1Ch+var_14], ecx
.text:0040167F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401683                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401686                 call    fprintf
.text:0040168B
.text:0040168B loc_40168B:                             ; CODE XREF: sub_401650+C3↓j
.text:0040168B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040168E                 call    exit
.text:00401693 ; ---------------------------------------------------------------------------
.text:00401693
.text:00401693 loc_401693:                             ; CODE XREF: sub_401650+D↑j
.text:00401693                 mov     [esp+1Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION] [FILE]\nWrite totall"...
.text:0040169A                 call    ds:libintl_gettext
.text:004016A0                 mov     ecx, ds:dword_4072F0
.text:004016A6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004016A9                 mov     [esp+1Ch+Format], ecx
.text:004016AD                 call    printf
.text:004016B2                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004016B9                 call    ds:libintl_gettext
.text:004016BF                 mov     ecx, ds:_iob
.text:004016C5                 add     ecx, 20h ; ' '
.text:004016C8                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004016CC                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004016CF                 call    fputs
.text:004016D4                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004016DB                 call    ds:libintl_gettext
.text:004016E1                 mov     ecx, ds:_iob
.text:004016E7                 add     ecx, 20h ; ' '
.text:004016EA                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004016EE                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004016F1                 call    fputs
.text:004016F6                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004016FD                 call    ds:libintl_gettext
.text:00401703                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040170B                 mov     [esp+1Ch+Stream], eax ; Format
.text:0040170E                 call    printf
.text:00401713                 jmp     loc_40168B
.text:00401713 sub_401650      endp
.text:00401713
.text:00401713 ; ---------------------------------------------------------------------------
.text:00401718 dword_401718    dd 0A0920h, 26748Dh     ; DATA XREF: sub_4017B0+8C↓o
.text:00401720 aSInputContains db '%s: input contains an odd number of tokens',0
.text:00401720                                         ; DATA XREF: sub_4017B0+100↓o
.text:0040174B aSInputContains_0 db '%s: input contains a loop:',0
.text:0040174B                                         ; DATA XREF: sub_4017B0:loc_4019E5↓o
.text:00401766 ; const char aR[]
.text:00401766 aR              db 'r',0                ; DATA XREF: sub_4017B0:loc_401B24↓o
.text:00401768 ; const char aS[]
.text:00401768 aS              db '%s',0               ; DATA XREF: sub_4017B0+397↓o
.text:0040176B                 align 20h
.text:00401780 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/tsort.c',0
.text:00401780                                         ; DATA XREF: sub_4017B0+3C6↓o
.text:00401780                                         ; sub_401BC0+147↓o ...
.text:004017A6 aLen0           db 'len != 0',0         ; DATA XREF: sub_4017B0+3CE↓o
.text:004017AF                 align 10h
.text:004017B0
.text:004017B0 ; =============== S U B R O U T I N E =======================================
.text:004017B0
.text:004017B0
.text:004017B0 ; int __cdecl sub_4017B0(char *FileName)
.text:004017B0 sub_4017B0      proc near               ; CODE XREF: sub_401340+15C↑p
.text:004017B0
.text:004017B0 Str1            = dword ptr -3Ch
.text:004017B0 Str2            = dword ptr -38h
.text:004017B0 var_34          = dword ptr -34h
.text:004017B0 var_30          = byte ptr -30h
.text:004017B0 var_24          = dword ptr -24h
.text:004017B0 var_1D          = byte ptr -1Dh
.text:004017B0 var_1C          = dword ptr -1Ch
.text:004017B0 FileName        = dword ptr  4
.text:004017B0
.text:004017B0                 push    ebp
.text:004017B1                 xor     ebp, ebp
.text:004017B3                 push    edi
.text:004017B4                 mov     edi, offset FileName ; "-"
.text:004017B9                 push    esi
.text:004017BA                 push    ebx
.text:004017BB                 sub     esp, 2Ch
.text:004017BE                 xor     ebx, ebx
.text:004017C0                 mov     [esp+3Ch+var_1D], 1
.text:004017C5                 mov     [esp+3Ch+Str1], 1Ch ; size_t
.text:004017CC                 call    sub_403820
.text:004017D1                 mov     dword ptr [eax], 0
.text:004017D7                 mov     ecx, 2
.text:004017DC                 mov     esi, [esp+3Ch+FileName]
.text:004017E0                 mov     [esp+3Ch+var_24], eax
.text:004017E4                 mov     dword ptr [eax+8], 0
.text:004017EB                 mov     dword ptr [eax+4], 0
.text:004017F2                 mov     dword ptr [eax+0Ch], 0
.text:004017F9                 mov     dword ptr [eax+10h], 0
.text:00401800                 mov     dword ptr [eax+14h], 0
.text:00401807                 mov     dword ptr [eax+18h], 0
.text:0040180E                 cld
.text:0040180F                 repe cmpsb
.text:00401811                 jnz     loc_401B24
.text:00401817                 mov     ds:byte_407040, 1
.text:0040181E                 mov     edi, ds:_iob
.text:00401824
.text:00401824 loc_401824:                             ; CODE XREF: sub_4017B0+38C↓j
.text:00401824                                         ; sub_4017B0+3B9↓j
.text:00401824                 lea     esi, [esp+3Ch+var_1C]
.text:00401828                 mov     [esp+3Ch+Str1], esi
.text:0040182B                 call    sub_4037C0
.text:00401830
.text:00401830 loc_401830:                             ; CODE XREF: sub_4017B0+DB↓j
.text:00401830                 mov     dword ptr [esp+3Ch+var_30], esi ; int
.text:00401834                 mov     [esp+3Ch+var_34], 3 ; int
.text:0040183C                 mov     [esp+3Ch+Str2], offset dword_401718 ; int
.text:00401844                 mov     [esp+3Ch+Str1], edi ; FILE *
.text:00401847                 call    sub_4034B0
.text:0040184C                 cmp     eax, 0FFFFFFFFh
.text:0040184F                 jz      short loc_4018AC
.text:00401851                 test    eax, eax
.text:00401853                 jz      loc_401B6E
.text:00401859                 mov     edx, [esi+4]
.text:0040185C                 mov     ebx, [esp+3Ch+var_24]
.text:00401860                 mov     [esp+3Ch+Str2], edx ; char *
.text:00401864                 mov     [esp+3Ch+Str1], ebx ; int
.text:00401867                 call    sub_401BC0
.text:0040186C                 test    ebp, ebp
.text:0040186E                 mov     ebx, eax
.text:00401870                 jz      short loc_401889
.text:00401872                 mov     edx, [eax]
.text:00401874                 mov     [esp+3Ch+Str2], edx ; Str2
.text:00401878                 mov     ecx, [ebp+0]
.text:0040187B                 mov     [esp+3Ch+Str1], ecx ; Str1
.text:0040187E                 call    strcmp
.text:00401883                 test    eax, eax
.text:00401885                 jnz     short loc_401890
.text:00401887
.text:00401887 loc_401887:                             ; CODE XREF: sub_4017B0+FA↓j
.text:00401887                 xor     ebx, ebx
.text:00401889
.text:00401889 loc_401889:                             ; CODE XREF: sub_4017B0+C0↑j
.text:00401889                 mov     ebp, ebx
.text:0040188B                 jmp     short loc_401830
.text:0040188B ; ---------------------------------------------------------------------------
.text:0040188D                 align 10h
.text:00401890
.text:00401890 loc_401890:                             ; CODE XREF: sub_4017B0+D5↑j
.text:00401890                 inc     dword ptr [ebx+10h]
.text:00401893                 mov     [esp+3Ch+Str1], 8 ; size_t
.text:0040189A                 call    sub_403820
.text:0040189F                 mov     [eax], ebx
.text:004018A1                 mov     ebx, [ebp+18h]
.text:004018A4                 mov     [eax+4], ebx
.text:004018A7                 mov     [ebp+18h], eax
.text:004018AA                 jmp     short loc_401887
.text:004018AC ; ---------------------------------------------------------------------------
.text:004018AC
.text:004018AC loc_4018AC:                             ; CODE XREF: sub_4017B0+9F↑j
.text:004018AC                 test    ebx, ebx
.text:004018AE                 jz      short loc_4018DD
.text:004018B0                 mov     [esp+3Ch+Str1], offset aSInputContains ; "%s: input contains an odd number of tok"...
.text:004018B7                 call    ds:libintl_gettext
.text:004018BD                 mov     [esp+3Ch+Str2], 0 ; ErrorMessage
.text:004018C5                 mov     esi, [esp+3Ch+FileName]
.text:004018C9                 mov     [esp+3Ch+Str1], 1 ; Code
.text:004018D0                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:004018D4                 mov     [esp+3Ch+var_34], eax ; char *
.text:004018D8                 call    sub_405400
.text:004018DD
.text:004018DD loc_4018DD:                             ; CODE XREF: sub_4017B0+FE↑j
.text:004018DD                 mov     edi, [esp+3Ch+var_24]
.text:004018E1                 mov     ebx, [edi+8]
.text:004018E4                 test    ebx, ebx
.text:004018E6                 jz      loc_401A4D
.text:004018EC                 mov     ebp, [ebx+4]
.text:004018EF                 test    ebp, ebp
.text:004018F1                 jnz     loc_401B04
.text:004018F7                 mov     ecx, [ebx+8]
.text:004018FA                 test    ecx, ecx
.text:004018FC                 jz      loc_401AF7
.text:00401902
.text:00401902 loc_401902:                             ; CODE XREF: sub_4017B0+36F↓j
.text:00401902                 mov     [esp+3Ch+Str1], ebx
.text:00401905                 call    sub_401EB0
.text:0040190A                 test    al, al
.text:0040190C                 jnz     loc_401A4D
.text:00401912                 mov     esi, [ebx+8]
.text:00401915                 test    esi, esi
.text:00401917                 jnz     loc_401AD7
.text:0040191D
.text:0040191D loc_40191D:                             ; CODE XREF: sub_4017B0+342↓j
.text:0040191D                 mov     ebx, ds:dword_407030
.text:00401923                 test    ebx, ebx
.text:00401925
.text:00401925 loc_401925:                             ; CODE XREF: sub_4017B0+2A5↓j
.text:00401925                 jz      loc_4019D8
.text:0040192B                 mov     eax, [esp+3Ch+var_24]
.text:0040192F                 mov     ebx, [eax+8]
.text:00401932                 test    ebx, ebx
.text:00401934                 jz      short loc_401963
.text:00401936                 mov     ebp, [ebx+4]
.text:00401939                 test    ebp, ebp
.text:0040193B                 jnz     loc_401AB7
.text:00401941                 mov     ecx, [ebx+8]
.text:00401944                 test    ecx, ecx
.text:00401946                 jz      loc_401AAA
.text:0040194C
.text:0040194C loc_40194C:                             ; CODE XREF: sub_4017B0+322↓j
.text:0040194C                 mov     [esp+3Ch+Str1], ebx
.text:0040194F                 call    sub_401EC0
.text:00401954                 test    al, al
.text:00401956                 jnz     short loc_401963
.text:00401958                 mov     esi, [ebx+8]
.text:0040195B                 test    esi, esi
.text:0040195D                 jnz     loc_401A92
.text:00401963
.text:00401963 loc_401963:                             ; CODE XREF: sub_4017B0+184↑j
.text:00401963                                         ; sub_4017B0+1A6↑j ...
.text:00401963                 mov     eax, ds:dword_407000
.text:00401968
.text:00401968 loc_401968:                             ; CODE XREF: sub_4017B0+21C↓j
.text:00401968                 test    eax, eax
.text:0040196A                 jz      short loc_4019CE
.text:0040196C                 mov     ebp, [eax]
.text:0040196E                 mov     ebx, [eax+18h]
.text:00401971                 mov     [esp+3Ch+Str1], ebp ; Buffer
.text:00401974                 call    puts
.text:00401979                 dec     ds:dword_407030
.text:0040197F                 test    ebx, ebx
.text:00401981                 mov     eax, ds:dword_407000
.text:00401986                 mov     dword ptr [eax], 0
.text:0040198C                 jz      short loc_4019C4
.text:0040198E                 mov     ecx, ds:dword_407010
.text:00401994                 lea     esi, [esi+0]
.text:0040199A                 lea     edi, [edi+0]
.text:004019A0
.text:004019A0 loc_4019A0:                             ; CODE XREF: sub_4017B0+207↓j
.text:004019A0                 mov     edx, [ebx]
.text:004019A2                 mov     esi, [edx+10h]
.text:004019A5                 dec     esi
.text:004019A6                 mov     [edx+10h], esi
.text:004019A9                 test    esi, esi
.text:004019AB                 jnz     short loc_4019B2
.text:004019AD                 mov     [ecx+14h], edx
.text:004019B0                 mov     ecx, [ebx]
.text:004019B2
.text:004019B2 loc_4019B2:                             ; CODE XREF: sub_4017B0+1FB↑j
.text:004019B2                 mov     ebx, [ebx+4]
.text:004019B5                 test    ebx, ebx
.text:004019B7                 jnz     short loc_4019A0
.text:004019B9                 mov     ds:dword_407010, ecx
.text:004019BF                 mov     eax, ds:dword_407000
.text:004019C4
.text:004019C4 loc_4019C4:                             ; CODE XREF: sub_4017B0+1DC↑j
.text:004019C4                 mov     eax, [eax+14h]
.text:004019C7                 mov     ds:dword_407000, eax
.text:004019CC                 jmp     short loc_401968
.text:004019CE ; ---------------------------------------------------------------------------
.text:004019CE
.text:004019CE loc_4019CE:                             ; CODE XREF: sub_4017B0+1BA↑j
.text:004019CE                 mov     ebx, ds:dword_407030
.text:004019D4                 test    ebx, ebx
.text:004019D6                 jnz     short loc_4019E5
.text:004019D8
.text:004019D8 loc_4019D8:                             ; CODE XREF: sub_4017B0:loc_401925↑j
.text:004019D8                 movzx   eax, [esp+3Ch+var_1D]
.text:004019DD                 add     esp, 2Ch
.text:004019E0                 pop     ebx
.text:004019E1                 pop     esi
.text:004019E2                 pop     edi
.text:004019E3                 pop     ebp
.text:004019E4                 retn
.text:004019E5 ; ---------------------------------------------------------------------------
.text:004019E5
.text:004019E5 loc_4019E5:                             ; CODE XREF: sub_4017B0+226↑j
.text:004019E5                 mov     [esp+3Ch+Str1], offset aSInputContains_0 ; "%s: input contains a loop:"
.text:004019EC                 call    ds:libintl_gettext
.text:004019F2                 mov     [esp+3Ch+Str2], 0 ; ErrorMessage
.text:004019FA                 mov     ecx, [esp+3Ch+FileName]
.text:004019FE                 mov     [esp+3Ch+Str1], 0 ; Code
.text:00401A05                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00401A09                 mov     [esp+3Ch+var_34], eax ; char *
.text:00401A0D                 call    sub_405400
.text:00401A12                 mov     [esp+3Ch+var_1D], 0
.text:00401A17
.text:00401A17 loc_401A17:                             ; CODE XREF: sub_4017B0+29B↓j
.text:00401A17                 mov     edx, [esp+3Ch+var_24]
.text:00401A1B                 mov     ebx, [edx+8]
.text:00401A1E                 test    ebx, ebx
.text:00401A20                 jz      short loc_401A43
.text:00401A22                 mov     eax, [ebx+4]
.text:00401A25                 test    eax, eax
.text:00401A27                 jnz     short loc_401A79
.text:00401A29                 mov     edi, [ebx+8]
.text:00401A2C                 test    edi, edi
.text:00401A2E                 jz      short loc_401A6F
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: sub_4017B0+2E0↓j
.text:00401A30                 mov     [esp+3Ch+Str1], ebx
.text:00401A33                 call    sub_401F10
.text:00401A38                 test    al, al
.text:00401A3A                 jnz     short loc_401A43
.text:00401A3C                 mov     esi, [ebx+8]
.text:00401A3F                 test    esi, esi
.text:00401A41                 jnz     short loc_401A5A
.text:00401A43
.text:00401A43 loc_401A43:                             ; CODE XREF: sub_4017B0+270↑j
.text:00401A43                                         ; sub_4017B0+28A↑j ...
.text:00401A43                 mov     ebx, ds:dword_407020
.text:00401A49                 test    ebx, ebx
.text:00401A4B                 jnz     short loc_401A17
.text:00401A4D
.text:00401A4D loc_401A4D:                             ; CODE XREF: sub_4017B0+136↑j
.text:00401A4D                                         ; sub_4017B0+15C↑j ...
.text:00401A4D                 mov     edx, ds:dword_407030
.text:00401A53                 test    edx, edx
.text:00401A55                 jmp     loc_401925
.text:00401A5A ; ---------------------------------------------------------------------------
.text:00401A5A
.text:00401A5A loc_401A5A:                             ; CODE XREF: sub_4017B0+291↑j
.text:00401A5A                 mov     [esp+3Ch+Str2], offset sub_401F10
.text:00401A62                 mov     ecx, [ebx+8]
.text:00401A65                 mov     [esp+3Ch+Str1], ecx
.text:00401A68                 call    sub_402020
.text:00401A6D                 jmp     short loc_401A43
.text:00401A6F ; ---------------------------------------------------------------------------
.text:00401A6F
.text:00401A6F loc_401A6F:                             ; CODE XREF: sub_4017B0+27E↑j
.text:00401A6F                 mov     [esp+3Ch+Str1], ebx
.text:00401A72                 call    sub_401F10
.text:00401A77                 jmp     short loc_401A43
.text:00401A79 ; ---------------------------------------------------------------------------
.text:00401A79
.text:00401A79 loc_401A79:                             ; CODE XREF: sub_4017B0+277↑j
.text:00401A79                 mov     [esp+3Ch+Str2], offset sub_401F10
.text:00401A81                 mov     ebp, [ebx+4]
.text:00401A84                 mov     [esp+3Ch+Str1], ebp
.text:00401A87                 call    sub_402020
.text:00401A8C                 test    al, al
.text:00401A8E                 jnz     short loc_401A43
.text:00401A90                 jmp     short loc_401A30
.text:00401A92 ; ---------------------------------------------------------------------------
.text:00401A92
.text:00401A92 loc_401A92:                             ; CODE XREF: sub_4017B0+1AD↑j
.text:00401A92                 mov     [esp+3Ch+Str2], offset sub_401EC0
.text:00401A9A                 mov     edi, [ebx+8]
.text:00401A9D                 mov     [esp+3Ch+Str1], edi
.text:00401AA0                 call    sub_402020
.text:00401AA5                 jmp     loc_401963
.text:00401AAA ; ---------------------------------------------------------------------------
.text:00401AAA
.text:00401AAA loc_401AAA:                             ; CODE XREF: sub_4017B0+196↑j
.text:00401AAA                 mov     [esp+3Ch+Str1], ebx
.text:00401AAD                 call    sub_401EC0
.text:00401AB2                 jmp     loc_401963
.text:00401AB7 ; ---------------------------------------------------------------------------
.text:00401AB7
.text:00401AB7 loc_401AB7:                             ; CODE XREF: sub_4017B0+18B↑j
.text:00401AB7                 mov     [esp+3Ch+Str2], offset sub_401EC0
.text:00401ABF                 mov     edx, [ebx+4]
.text:00401AC2                 mov     [esp+3Ch+Str1], edx
.text:00401AC5                 call    sub_402020
.text:00401ACA                 test    al, al
.text:00401ACC                 jnz     loc_401963
.text:00401AD2                 jmp     loc_40194C
.text:00401AD7 ; ---------------------------------------------------------------------------
.text:00401AD7
.text:00401AD7 loc_401AD7:                             ; CODE XREF: sub_4017B0+167↑j
.text:00401AD7                 mov     [esp+3Ch+Str2], offset sub_401EB0
.text:00401ADF                 mov     edi, [ebx+8]
.text:00401AE2                 mov     [esp+3Ch+Str1], edi
.text:00401AE5                 call    sub_402020
.text:00401AEA                 test    al, al
.text:00401AEC                 jnz     loc_401A4D
.text:00401AF2                 jmp     loc_40191D
.text:00401AF7 ; ---------------------------------------------------------------------------
.text:00401AF7
.text:00401AF7 loc_401AF7:                             ; CODE XREF: sub_4017B0+14C↑j
.text:00401AF7                 mov     [esp+3Ch+Str1], ebx
.text:00401AFA                 call    sub_401EB0
.text:00401AFF                 jmp     loc_401A4D
.text:00401B04 ; ---------------------------------------------------------------------------
.text:00401B04
.text:00401B04 loc_401B04:                             ; CODE XREF: sub_4017B0+141↑j
.text:00401B04                 mov     [esp+3Ch+Str2], offset sub_401EB0
.text:00401B0C                 mov     edx, [ebx+4]
.text:00401B0F                 mov     [esp+3Ch+Str1], edx
.text:00401B12                 call    sub_402020
.text:00401B17                 test    al, al
.text:00401B19                 jnz     loc_401A4D
.text:00401B1F                 jmp     loc_401902
.text:00401B24 ; ---------------------------------------------------------------------------
.text:00401B24
.text:00401B24 loc_401B24:                             ; CODE XREF: sub_4017B0+61↑j
.text:00401B24                 mov     [esp+3Ch+Str2], offset aR ; "r"
.text:00401B2C                 mov     eax, [esp+3Ch+FileName]
.text:00401B30                 mov     [esp+3Ch+Str1], eax ; FileName
.text:00401B33                 call    fopen
.text:00401B38                 test    eax, eax
.text:00401B3A                 mov     edi, eax
.text:00401B3C                 jnz     loc_401824
.text:00401B42                 call    _errno
.text:00401B47                 mov     [esp+3Ch+var_34], offset aS ; "%s"
.text:00401B4F                 mov     ecx, [esp+3Ch+FileName]
.text:00401B53                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00401B57                 mov     edx, [eax]
.text:00401B59                 mov     [esp+3Ch+Str1], 1 ; Code
.text:00401B60                 mov     [esp+3Ch+Str2], edx ; ErrorMessage
.text:00401B64                 call    sub_405400
.text:00401B69                 jmp     loc_401824
.text:00401B6E ; ---------------------------------------------------------------------------
.text:00401B6E
.text:00401B6E loc_401B6E:                             ; CODE XREF: sub_4017B0+A3↑j
.text:00401B6E                 mov     [esp+3Ch+var_34], 1D8h
.text:00401B76                 mov     [esp+3Ch+Str2], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tsort.c"
.text:00401B7E                 mov     [esp+3Ch+Str1], offset aLen0 ; "len != 0"
.text:00401B85                 call    _assert
.text:00401B85 sub_4017B0      endp
.text:00401B85
.text:00401B85 ; ---------------------------------------------------------------------------
.text:00401B8A aStreqStrPStr   db '!STREQ (str, p->str)',0
.text:00401B8A                                         ; DATA XREF: sub_401BC0+14F↓o
.text:00401B9F aStreqStrSStr   db '!STREQ (str, s->str)',0
.text:00401BB4 aRoot           db 'root',0
.text:00401BB9                 align 10h
.text:00401BC0
.text:00401BC0 ; =============== S U B R O U T I N E =======================================
.text:00401BC0
.text:00401BC0
.text:00401BC0 ; int __cdecl sub_401BC0(int, char *)
.text:00401BC0 sub_401BC0      proc near               ; CODE XREF: sub_4017B0+B7↑p
.text:00401BC0
.text:00401BC0 Str1            = dword ptr -2Ch
.text:00401BC0 Str2            = dword ptr -28h
.text:00401BC0 var_24          = dword ptr -24h
.text:00401BC0 var_1C          = dword ptr -1Ch
.text:00401BC0 var_18          = dword ptr -18h
.text:00401BC0 var_14          = dword ptr -14h
.text:00401BC0 arg_0           = dword ptr  4
.text:00401BC0 arg_4           = dword ptr  8
.text:00401BC0
.text:00401BC0                 push    ebp
.text:00401BC1                 push    edi
.text:00401BC2                 push    esi
.text:00401BC3                 push    ebx
.text:00401BC4                 sub     esp, 1Ch
.text:00401BC7                 mov     esi, [esp+2Ch+arg_0]
.text:00401BCB                 mov     edi, [esp+2Ch+arg_4]
.text:00401BCF                 test    esi, esi
.text:00401BD1                 jz      loc_401E92
.text:00401BD7                 mov     eax, [esi+8]
.text:00401BDA                 test    eax, eax
.text:00401BDC                 jz      loc_401E40
.text:00401BE2                 mov     [esp+2Ch+var_18], esi
.text:00401BE6                 mov     ebx, eax
.text:00401BE8                 mov     ebp, eax
.text:00401BEA                 lea     esi, [esi+0]
.text:00401BF0
.text:00401BF0 loc_401BF0:                             ; CODE XREF: sub_401BC0+68↓j
.text:00401BF0                 mov     edx, [ebx]
.text:00401BF2                 mov     [esp+2Ch+Str1], edi ; Str1
.text:00401BF5                 mov     [esp+2Ch+Str2], edx ; Str2
.text:00401BF9                 call    strcmp
.text:00401BFE                 mov     esi, eax
.text:00401C00                 test    esi, esi
.text:00401C02                 mov     eax, ebx
.text:00401C04                 jz      loc_401D96
.text:00401C0A                 test    esi, esi
.text:00401C0C                 js      loc_401E38
.text:00401C12                 mov     eax, [ebx+8]
.text:00401C15
.text:00401C15 loc_401C15:                             ; CODE XREF: sub_401BC0+27B↓j
.text:00401C15                 test    eax, eax
.text:00401C17                 jz      short loc_401C2A
.text:00401C19                 mov     esi, [eax+0Ch]
.text:00401C1C                 test    esi, esi
.text:00401C1E                 jz      short loc_401C26
.text:00401C20                 mov     [esp+2Ch+var_18], ebx
.text:00401C24                 mov     ebp, eax
.text:00401C26
.text:00401C26 loc_401C26:                             ; CODE XREF: sub_401BC0+5E↑j
.text:00401C26                 mov     ebx, eax
.text:00401C28                 jmp     short loc_401BF0
.text:00401C2A ; ---------------------------------------------------------------------------
.text:00401C2A
.text:00401C2A loc_401C2A:                             ; CODE XREF: sub_401BC0+57↑j
.text:00401C2A                 mov     [esp+2Ch+Str1], 1Ch ; size_t
.text:00401C31                 call    sub_403820
.text:00401C36                 mov     [esp+2Ch+var_1C], eax
.text:00401C3A                 xor     eax, eax
.text:00401C3C                 test    edi, edi
.text:00401C3E                 jz      short loc_401C48
.text:00401C40                 mov     [esp+2Ch+Str1], edi ; char *
.text:00401C43                 call    sub_4039E0
.text:00401C48
.text:00401C48 loc_401C48:                             ; CODE XREF: sub_401BC0+7E↑j
.text:00401C48                 mov     ecx, [esp+2Ch+var_1C]
.text:00401C4C                 test    esi, esi
.text:00401C4E                 mov     [ecx], eax
.text:00401C50                 mov     dword ptr [ecx+8], 0
.text:00401C57                 mov     dword ptr [ecx+4], 0
.text:00401C5E                 mov     dword ptr [ecx+0Ch], 0
.text:00401C65                 mov     dword ptr [ecx+10h], 0
.text:00401C6C                 mov     dword ptr [ecx+14h], 0
.text:00401C73                 mov     dword ptr [ecx+18h], 0
.text:00401C7A                 js      loc_401E30
.text:00401C80                 mov     [ebx+8], ecx
.text:00401C83
.text:00401C83 loc_401C83:                             ; CODE XREF: sub_401BC0+273↓j
.text:00401C83                 mov     edx, [ebp+0]
.text:00401C86                 mov     [esp+2Ch+Str1], edi ; Str1
.text:00401C89                 mov     [esp+2Ch+Str2], edx ; Str2
.text:00401C8D                 call    strcmp
.text:00401C92                 test    eax, eax
.text:00401C94                 jz      loc_401E14
.text:00401C9A                 mov     ebx, [ebp+0]
.text:00401C9D                 mov     [esp+2Ch+Str1], edi ; Str1
.text:00401CA0                 mov     [esp+2Ch+Str2], ebx ; Str2
.text:00401CA4                 call    strcmp
.text:00401CA9                 test    eax, eax
.text:00401CAB                 js      loc_401E07
.text:00401CB1                 mov     ebx, [ebp+8]
.text:00401CB4                 mov     esi, 1
.text:00401CB9
.text:00401CB9 loc_401CB9:                             ; CODE XREF: sub_401BC0+24F↓j
.text:00401CB9                 mov     [esp+2Ch+var_14], ebx
.text:00401CBD
.text:00401CBD loc_401CBD:                             ; CODE XREF: sub_401BC0+131↓j
.text:00401CBD                                         ; sub_401BC0+13D↓j
.text:00401CBD                 cmp     ebx, [esp+2Ch+var_1C]
.text:00401CC1                 jz      short loc_401D1B
.text:00401CC3                 mov     ecx, [ebx]
.text:00401CC5                 mov     [esp+2Ch+Str1], edi ; Str1
.text:00401CC8                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:00401CCC                 call    strcmp
.text:00401CD1                 test    eax, eax
.text:00401CD3                 jz      short loc_401CFF
.text:00401CD5                 mov     edx, [ebx]
.text:00401CD7                 mov     [esp+2Ch+Str1], edi ; Str1
.text:00401CDA                 mov     [esp+2Ch+Str2], edx ; Str2
.text:00401CDE                 call    strcmp
.text:00401CE3                 test    eax, eax
.text:00401CE5                 js      short loc_401CF3
.text:00401CE7                 mov     dword ptr [ebx+0Ch], 1
.text:00401CEE                 mov     ebx, [ebx+8]
.text:00401CF1                 jmp     short loc_401CBD
.text:00401CF3 ; ---------------------------------------------------------------------------
.text:00401CF3
.text:00401CF3 loc_401CF3:                             ; CODE XREF: sub_401BC0+125↑j
.text:00401CF3                 mov     dword ptr [ebx+0Ch], 0FFFFFFFFh
.text:00401CFA                 mov     ebx, [ebx+4]
.text:00401CFD                 jmp     short loc_401CBD
.text:00401CFF ; ---------------------------------------------------------------------------
.text:00401CFF
.text:00401CFF loc_401CFF:                             ; CODE XREF: sub_401BC0+113↑j
.text:00401CFF                 mov     [esp+2Ch+var_24], 0B9h ; '¹'
.text:00401D07                 mov     [esp+2Ch+Str2], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tsort.c"
.text:00401D0F                 mov     [esp+2Ch+Str1], offset aStreqStrPStr ; "!STREQ (str, p->str)"
.text:00401D16
.text:00401D16 loc_401D16:                             ; CODE XREF: sub_401BC0+26B↓j
.text:00401D16                                         ; sub_401BC0+2E9↓j
.text:00401D16                 call    _assert
.text:00401D1B ; ---------------------------------------------------------------------------
.text:00401D1B
.text:00401D1B loc_401D1B:                             ; CODE XREF: sub_401BC0+101↑j
.text:00401D1B                 mov     eax, [ebp+0Ch]
.text:00401D1E                 test    eax, eax
.text:00401D20                 jz      loc_401E00
.text:00401D26                 mov     edi, eax
.text:00401D28                 add     edi, esi
.text:00401D2A                 jz      loc_401E00
.text:00401D30                 mov     eax, [esp+2Ch+var_14]
.text:00401D34                 cmp     [eax+0Ch], esi
.text:00401D37                 jz      loc_401DD2
.text:00401D3D                 test    esi, esi
.text:00401D3F                 js      short loc_401DB3
.text:00401D41                 mov     edi, [esp+2Ch+var_14]
.text:00401D45                 mov     ecx, [esp+2Ch+var_14]
.text:00401D49                 mov     ebx, [edi+4]
.text:00401D4C                 mov     edx, [ebx+8]
.text:00401D4F                 mov     [ebx+8], ecx
.text:00401D52                 mov     [ecx+4], edx
.text:00401D55                 mov     edi, [ebx+4]
.text:00401D58                 mov     [ebx+4], ebp
.text:00401D5B                 mov     [ebp+8], edi
.text:00401D5E
.text:00401D5E loc_401D5E:                             ; CODE XREF: sub_401BC0+210↓j
.text:00401D5E                 mov     dword ptr [ebp+0Ch], 0
.text:00401D65                 mov     ecx, [esp+2Ch+var_14]
.text:00401D69                 mov     dword ptr [ecx+0Ch], 0
.text:00401D70                 mov     eax, [ebx+0Ch]
.text:00401D73                 cmp     eax, esi
.text:00401D75                 jz      short loc_401DAC
.text:00401D77                 add     eax, esi
.text:00401D79                 jz      short loc_401DA3
.text:00401D7B
.text:00401D7B loc_401D7B:                             ; CODE XREF: sub_401BC0+1EA↓j
.text:00401D7B                                         ; sub_401BC0+1F1↓j
.text:00401D7B                 mov     dword ptr [ebx+0Ch], 0
.text:00401D82
.text:00401D82 loc_401D82:                             ; CODE XREF: sub_401BC0+233↓j
.text:00401D82                 mov     eax, [esp+2Ch+var_18]
.text:00401D86                 cmp     ebp, [eax+8]
.text:00401D89                 jz      short loc_401D9E
.text:00401D8B                 mov     ebp, [esp+2Ch+var_18]
.text:00401D8F                 mov     [ebp+4], ebx
.text:00401D92
.text:00401D92 loc_401D92:                             ; CODE XREF: sub_401BC0+1E1↓j
.text:00401D92                                         ; sub_401BC0+245↓j
.text:00401D92                 mov     eax, [esp+2Ch+var_1C]
.text:00401D96
.text:00401D96 loc_401D96:                             ; CODE XREF: sub_401BC0+44↑j
.text:00401D96                                         ; sub_401BC0+2CD↓j
.text:00401D96                 add     esp, 1Ch
.text:00401D99                 pop     ebx
.text:00401D9A                 pop     esi
.text:00401D9B                 pop     edi
.text:00401D9C                 pop     ebp
.text:00401D9D                 retn
.text:00401D9E ; ---------------------------------------------------------------------------
.text:00401D9E
.text:00401D9E loc_401D9E:                             ; CODE XREF: sub_401BC0+1C9↑j
.text:00401D9E                 mov     [eax+8], ebx
.text:00401DA1                 jmp     short loc_401D92
.text:00401DA3 ; ---------------------------------------------------------------------------
.text:00401DA3
.text:00401DA3 loc_401DA3:                             ; CODE XREF: sub_401BC0+1B9↑j
.text:00401DA3                 mov     eax, [esp+2Ch+var_14]
.text:00401DA7                 mov     [eax+0Ch], esi
.text:00401DAA                 jmp     short loc_401D7B
.text:00401DAC ; ---------------------------------------------------------------------------
.text:00401DAC
.text:00401DAC loc_401DAC:                             ; CODE XREF: sub_401BC0+1B5↑j
.text:00401DAC                 neg     esi
.text:00401DAE                 mov     [ebp+0Ch], esi
.text:00401DB1                 jmp     short loc_401D7B
.text:00401DB3 ; ---------------------------------------------------------------------------
.text:00401DB3
.text:00401DB3 loc_401DB3:                             ; CODE XREF: sub_401BC0+17F↑j
.text:00401DB3                 mov     edx, [esp+2Ch+var_14]
.text:00401DB7                 mov     edi, [esp+2Ch+var_14]
.text:00401DBB                 mov     ebx, [edx+8]
.text:00401DBE                 mov     ecx, [ebx+4]
.text:00401DC1                 mov     [ebx+4], edi
.text:00401DC4                 mov     [edi+8], ecx
.text:00401DC7                 mov     edx, [ebx+8]
.text:00401DCA                 mov     [ebx+8], ebp
.text:00401DCD                 mov     [ebp+4], edx
.text:00401DD0                 jmp     short loc_401D5E
.text:00401DD2 ; ---------------------------------------------------------------------------
.text:00401DD2
.text:00401DD2 loc_401DD2:                             ; CODE XREF: sub_401BC0+177↑j
.text:00401DD2                 test    esi, esi
.text:00401DD4                 mov     ebx, eax
.text:00401DD6                 js      short loc_401DF5
.text:00401DD8                 mov     ecx, [eax+4]
.text:00401DDB                 mov     [eax+4], ebp
.text:00401DDE                 mov     [ebp+8], ecx
.text:00401DE1
.text:00401DE1 loc_401DE1:                             ; CODE XREF: sub_401BC0+23E↓j
.text:00401DE1                 mov     eax, [esp+2Ch+var_14]
.text:00401DE5                 mov     dword ptr [eax+0Ch], 0
.text:00401DEC                 mov     dword ptr [ebp+0Ch], 0
.text:00401DF3                 jmp     short loc_401D82
.text:00401DF5 ; ---------------------------------------------------------------------------
.text:00401DF5
.text:00401DF5 loc_401DF5:                             ; CODE XREF: sub_401BC0+216↑j
.text:00401DF5                 mov     esi, [eax+8]
.text:00401DF8                 mov     [eax+8], ebp
.text:00401DFB                 mov     [ebp+4], esi
.text:00401DFE                 jmp     short loc_401DE1
.text:00401E00 ; ---------------------------------------------------------------------------
.text:00401E00
.text:00401E00 loc_401E00:                             ; CODE XREF: sub_401BC0+160↑j
.text:00401E00                                         ; sub_401BC0+16A↑j
.text:00401E00                 add     eax, esi
.text:00401E02                 mov     [ebp+0Ch], eax
.text:00401E05                 jmp     short loc_401D92
.text:00401E07 ; ---------------------------------------------------------------------------
.text:00401E07
.text:00401E07 loc_401E07:                             ; CODE XREF: sub_401BC0+EB↑j
.text:00401E07                 mov     ebx, [ebp+4]
.text:00401E0A                 mov     esi, 0FFFFFFFFh
.text:00401E0F                 jmp     loc_401CB9
.text:00401E14 ; ---------------------------------------------------------------------------
.text:00401E14
.text:00401E14 loc_401E14:                             ; CODE XREF: sub_401BC0+D4↑j
.text:00401E14                 mov     [esp+2Ch+var_24], 0ABh ; '«'
.text:00401E1C                 mov     [esp+2Ch+Str2], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tsort.c"
.text:00401E24                 mov     [esp+2Ch+Str1], 401B9Fh
.text:00401E2B                 jmp     loc_401D16
.text:00401E30 ; ---------------------------------------------------------------------------
.text:00401E30
.text:00401E30 loc_401E30:                             ; CODE XREF: sub_401BC0+BA↑j
.text:00401E30                 mov     [ebx+4], ecx
.text:00401E33                 jmp     loc_401C83
.text:00401E38 ; ---------------------------------------------------------------------------
.text:00401E38
.text:00401E38 loc_401E38:                             ; CODE XREF: sub_401BC0+4C↑j
.text:00401E38                 mov     eax, [ebx+4]
.text:00401E3B                 jmp     loc_401C15
.text:00401E40 ; ---------------------------------------------------------------------------
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_401BC0+1C↑j
.text:00401E40                 mov     [esp+2Ch+Str1], 1Ch ; size_t
.text:00401E47                 call    sub_403820
.text:00401E4C                 mov     ebx, eax
.text:00401E4E                 xor     eax, eax
.text:00401E50                 test    edi, edi
.text:00401E52                 jz      short loc_401E5C
.text:00401E54                 mov     [esp+2Ch+Str1], edi ; char *
.text:00401E57                 call    sub_4039E0
.text:00401E5C
.text:00401E5C loc_401E5C:                             ; CODE XREF: sub_401BC0+292↑j
.text:00401E5C                 mov     [ebx], eax
.text:00401E5E                 mov     eax, ebx
.text:00401E60                 mov     dword ptr [ebx+8], 0
.text:00401E67                 mov     dword ptr [ebx+4], 0
.text:00401E6E                 mov     dword ptr [ebx+0Ch], 0
.text:00401E75                 mov     dword ptr [ebx+10h], 0
.text:00401E7C                 mov     dword ptr [ebx+14h], 0
.text:00401E83                 mov     dword ptr [ebx+18h], 0
.text:00401E8A                 mov     [esi+8], ebx
.text:00401E8D                 jmp     loc_401D96
.text:00401E92 ; ---------------------------------------------------------------------------
.text:00401E92
.text:00401E92 loc_401E92:                             ; CODE XREF: sub_401BC0+11↑j
.text:00401E92                 mov     [esp+2Ch+var_24], 87h ; '‡'
.text:00401E9A                 mov     [esp+2Ch+Str2], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tsort.c"
.text:00401EA2                 mov     [esp+2Ch+Str1], 401BB4h
.text:00401EA9                 jmp     loc_401D16
.text:00401EA9 sub_401BC0      endp
.text:00401EA9
.text:00401EA9 ; ---------------------------------------------------------------------------
.text:00401EAE                 align 10h
.text:00401EB0
.text:00401EB0 ; =============== S U B R O U T I N E =======================================
.text:00401EB0
.text:00401EB0
.text:00401EB0 sub_401EB0      proc near               ; CODE XREF: sub_4017B0+155↑p
.text:00401EB0                                         ; sub_4017B0+34A↑p
.text:00401EB0                                         ; DATA XREF: ...
.text:00401EB0                 inc     ds:dword_407030
.text:00401EB6                 xor     eax, eax
.text:00401EB8                 retn
.text:00401EB8 sub_401EB0      endp
.text:00401EB8
.text:00401EB8 ; ---------------------------------------------------------------------------
.text:00401EB9                 align 10h
.text:00401EC0
.text:00401EC0 ; =============== S U B R O U T I N E =======================================
.text:00401EC0
.text:00401EC0
.text:00401EC0 sub_401EC0      proc near               ; CODE XREF: sub_4017B0+19F↑p
.text:00401EC0                                         ; sub_4017B0+2FD↑p
.text:00401EC0                                         ; DATA XREF: ...
.text:00401EC0
.text:00401EC0 arg_0           = dword ptr  4
.text:00401EC0
.text:00401EC0                 mov     edx, [esp+arg_0]
.text:00401EC4                 mov     ecx, [edx+10h]
.text:00401EC7                 test    ecx, ecx
.text:00401EC9                 jnz     short loc_401EF0
.text:00401ECB                 mov     ecx, [edx]
.text:00401ECD                 test    ecx, ecx
.text:00401ECF                 jz      short loc_401EF0
.text:00401ED1                 mov     eax, ds:dword_407000
.text:00401ED6                 test    eax, eax
.text:00401ED8                 jnz     short loc_401EF3
.text:00401EDA                 mov     ds:dword_407000, edx
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_401EC0+3C↓j
.text:00401EE0                 mov     ds:dword_407010, edx
.text:00401EE6                 lea     esi, [esi+0]
.text:00401EE9                 lea     edi, [edi+0]
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_401EC0+9↑j
.text:00401EF0                                         ; sub_401EC0+F↑j
.text:00401EF0                 xor     eax, eax
.text:00401EF2                 retn
.text:00401EF3 ; ---------------------------------------------------------------------------
.text:00401EF3
.text:00401EF3 loc_401EF3:                             ; CODE XREF: sub_401EC0+18↑j
.text:00401EF3                 mov     ecx, ds:dword_407010
.text:00401EF9                 mov     [ecx+14h], edx
.text:00401EFC                 jmp     short loc_401EE0
.text:00401EFC sub_401EC0      endp
.text:00401EFC
.text:00401EFC ; ---------------------------------------------------------------------------
.text:00401EFE ; const char Format[]
.text:00401EFE Format          db '%s: %s',0Ah,0       ; DATA XREF: sub_401F10+9F↓o
.text:00401F06                 align 10h
.text:00401F10
.text:00401F10 ; =============== S U B R O U T I N E =======================================
.text:00401F10
.text:00401F10
.text:00401F10 sub_401F10      proc near               ; CODE XREF: sub_4017B0+283↑p
.text:00401F10                                         ; sub_4017B0+2C2↑p
.text:00401F10                                         ; DATA XREF: ...
.text:00401F10
.text:00401F10 Stream          = dword ptr -1Ch
.text:00401F10 Format          = dword ptr -18h
.text:00401F10 var_14          = dword ptr -14h
.text:00401F10 var_10          = dword ptr -10h
.text:00401F10 var_C           = dword ptr -0Ch
.text:00401F10 var_8           = dword ptr -8
.text:00401F10 var_4           = dword ptr -4
.text:00401F10 arg_0           = dword ptr  4
.text:00401F10
.text:00401F10                 sub     esp, 1Ch
.text:00401F13                 mov     [esp+1Ch+var_4], edi
.text:00401F17                 mov     edi, [esp+1Ch+arg_0]
.text:00401F1B                 mov     [esp+1Ch+var_C], ebx
.text:00401F1F                 mov     [esp+1Ch+var_8], esi
.text:00401F23                 mov     edx, [edi+10h]
.text:00401F26                 test    edx, edx
.text:00401F28                 jz      short loc_401F70
.text:00401F2A                 mov     ecx, ds:dword_407020
.text:00401F30                 test    ecx, ecx
.text:00401F32                 mov     esi, ecx
.text:00401F34                 jz      loc_402010
.text:00401F3A                 mov     edx, [edi+18h]
.text:00401F3D                 lea     ebx, [edi+18h]
.text:00401F40                 test    edx, edx
.text:00401F42                 jz      short loc_401F70
.text:00401F44                 lea     esi, [esi+0]
.text:00401F4A                 lea     edi, [edi+0]
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401F10+50↓j
.text:00401F50                 mov     eax, [ebx]
.text:00401F52                 mov     edx, [eax]
.text:00401F54                 cmp     edx, esi
.text:00401F56                 jz      short loc_401F82
.text:00401F58                 mov     edx, [eax+4]
.text:00401F5B                 lea     ebx, [eax+4]
.text:00401F5E                 test    edx, edx
.text:00401F60                 jnz     short loc_401F50
.text:00401F62                 lea     esi, [esi+0]
.text:00401F69                 lea     edi, [edi+0]
.text:00401F70
.text:00401F70 loc_401F70:                             ; CODE XREF: sub_401F10+18↑j
.text:00401F70                                         ; sub_401F10+32↑j ...
.text:00401F70                 xor     eax, eax
.text:00401F72
.text:00401F72 loc_401F72:                             ; CODE XREF: sub_401F10+CE↓j
.text:00401F72                 mov     ebx, [esp+1Ch+var_C]
.text:00401F76                 mov     esi, [esp+1Ch+var_8]
.text:00401F7A                 mov     edi, [esp+1Ch+var_4]
.text:00401F7E                 add     esp, 1Ch
.text:00401F81                 retn
.text:00401F82 ; ---------------------------------------------------------------------------
.text:00401F82
.text:00401F82 loc_401F82:                             ; CODE XREF: sub_401F10+46↑j
.text:00401F82                 mov     esi, [edi+14h]
.text:00401F85                 test    esi, esi
.text:00401F87                 jz      short loc_402008
.text:00401F89                 test    edx, edx
.text:00401F8B                 jz      short loc_401FF0
.text:00401F8D                 lea     esi, [esi+0]
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_401F10+C7↓j
.text:00401F90                 mov     edx, [ecx]
.text:00401F92                 mov     esi, [ecx+14h]
.text:00401F95                 mov     ecx, ds:_iob
.text:00401F9B                 mov     [esp+1Ch+var_10], edx
.text:00401F9F                 mov     edx, ds:dword_4072F0
.text:00401FA5                 add     ecx, 40h ; '@'
.text:00401FA8                 mov     [esp+1Ch+Stream], ecx ; Stream
.text:00401FAB                 mov     [esp+1Ch+var_14], edx
.text:00401FAF                 mov     [esp+1Ch+Format], offset Format ; "%s: %s\n"
.text:00401FB7                 call    fprintf
.text:00401FBC                 mov     ecx, ds:dword_407020
.text:00401FC2                 cmp     ecx, edi
.text:00401FC4                 jz      short loc_401FE0
.text:00401FC6                 mov     dword ptr [ecx+14h], 0
.text:00401FCD                 test    esi, esi
.text:00401FCF                 mov     ecx, esi
.text:00401FD1                 mov     ds:dword_407020, esi
.text:00401FD7                 jnz     short loc_401F90
.text:00401FD9
.text:00401FD9 loc_401FD9:                             ; CODE XREF: sub_401F10+E2↓j
.text:00401FD9                 mov     eax, 1
.text:00401FDE                 jmp     short loc_401F72
.text:00401FE0 ; ---------------------------------------------------------------------------
.text:00401FE0
.text:00401FE0 loc_401FE0:                             ; CODE XREF: sub_401F10+B4↑j
.text:00401FE0                 mov     esi, [ebx]
.text:00401FE2                 mov     eax, [esi]
.text:00401FE4                 mov     edi, [esi+4]
.text:00401FE7                 dec     dword ptr [eax+10h]
.text:00401FEA                 mov     [ebx], edi
.text:00401FEC                 lea     esi, [esi+0]
.text:00401FF0
.text:00401FF0 loc_401FF0:                             ; CODE XREF: sub_401F10+7B↑j
.text:00401FF0                                         ; sub_401F10+F6↓j
.text:00401FF0                 test    ecx, ecx
.text:00401FF2                 jz      short loc_401FD9
.text:00401FF4                 mov     ebx, [ecx+14h]
.text:00401FF7                 mov     dword ptr [ecx+14h], 0
.text:00401FFE                 mov     ecx, ebx
.text:00402000                 mov     ds:dword_407020, ebx
.text:00402006                 jmp     short loc_401FF0
.text:00402008 ; ---------------------------------------------------------------------------
.text:00402008
.text:00402008 loc_402008:                             ; CODE XREF: sub_401F10+77↑j
.text:00402008                 mov     [edi+14h], edx
.text:0040200B                 nop
.text:0040200C                 lea     esi, [esi+0]
.text:00402010
.text:00402010 loc_402010:                             ; CODE XREF: sub_401F10+24↑j
.text:00402010                 mov     ds:dword_407020, edi
.text:00402016                 jmp     loc_401F70
.text:00402016 sub_401F10      endp
.text:00402016
.text:00402016 ; ---------------------------------------------------------------------------
.text:0040201B                 align 10h
.text:00402020
.text:00402020 ; =============== S U B R O U T I N E =======================================
.text:00402020
.text:00402020
.text:00402020 sub_402020      proc near               ; CODE XREF: sub_4017B0+2B8↑p
.text:00402020                                         ; sub_4017B0+2D7↑p ...
.text:00402020
.text:00402020 var_1C          = dword ptr -1Ch
.text:00402020 var_18          = dword ptr -18h
.text:00402020 var_8           = dword ptr -8
.text:00402020 var_4           = dword ptr -4
.text:00402020 arg_0           = dword ptr  4
.text:00402020 arg_4           = dword ptr  8
.text:00402020
.text:00402020                 sub     esp, 1Ch
.text:00402023                 mov     [esp+1Ch+var_8], ebx
.text:00402027                 mov     ebx, [esp+1Ch+arg_0]
.text:0040202B                 mov     [esp+1Ch+var_4], esi
.text:0040202F                 mov     esi, [esp+1Ch+arg_4]
.text:00402033                 mov     eax, [ebx+4]
.text:00402036                 test    eax, eax
.text:00402038                 jnz     short loc_402090
.text:0040203A                 mov     eax, [ebx+8]
.text:0040203D                 test    eax, eax
.text:0040203F                 jz      short loc_402085
.text:00402041
.text:00402041 loc_402041:                             ; CODE XREF: sub_402020+85↓j
.text:00402041                 mov     [esp+1Ch+var_1C], ebx
.text:00402044                 call    esi
.text:00402046                 mov     edx, 1
.text:0040204B                 test    al, al
.text:0040204D                 jnz     short loc_402060
.text:0040204F                 mov     eax, [ebx+8]
.text:00402052                 test    eax, eax
.text:00402054                 jnz     short loc_40206E
.text:00402056
.text:00402056 loc_402056:                             ; CODE XREF: sub_402020+63↓j
.text:00402056                 xor     edx, edx
.text:00402058                 nop
.text:00402059                 lea     esi, [esi+0]
.text:00402060
.text:00402060 loc_402060:                             ; CODE XREF: sub_402020+2D↑j
.text:00402060                                         ; sub_402020+61↓j ...
.text:00402060                 mov     ebx, [esp+1Ch+var_8]
.text:00402064                 mov     eax, edx
.text:00402066                 mov     esi, [esp+1Ch+var_4]
.text:0040206A                 add     esp, 1Ch
.text:0040206D                 retn
.text:0040206E ; ---------------------------------------------------------------------------
.text:0040206E
.text:0040206E loc_40206E:                             ; CODE XREF: sub_402020+34↑j
.text:0040206E                 mov     [esp+1Ch+var_18], esi
.text:00402072                 mov     [esp+1Ch+var_1C], eax
.text:00402075                 call    sub_402020
.text:0040207A                 test    al, al
.text:0040207C                 mov     edx, 1
.text:00402081                 jnz     short loc_402060
.text:00402083                 jmp     short loc_402056
.text:00402085 ; ---------------------------------------------------------------------------
.text:00402085
.text:00402085 loc_402085:                             ; CODE XREF: sub_402020+1F↑j
.text:00402085                 mov     [esp+1Ch+var_1C], ebx
.text:00402088                 call    esi
.text:0040208A                 movzx   edx, al
.text:0040208D                 jmp     short loc_402060
.text:0040208D ; ---------------------------------------------------------------------------
.text:0040208F                 align 10h
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_402020+18↑j
.text:00402090                 mov     [esp+1Ch+var_18], esi
.text:00402094                 mov     [esp+1Ch+var_1C], eax
.text:00402097                 call    sub_402020
.text:0040209C                 test    al, al
.text:0040209E                 mov     edx, 1
.text:004020A3                 jnz     short loc_402060
.text:004020A5                 jmp     short loc_402041
.text:004020A5 sub_402020      endp
.text:004020A5
.text:004020A5 ; ---------------------------------------------------------------------------
.text:004020A7                 align 20h
.text:004020C0 dword_4020C0    dd 90002D2Dh, 7 dup(90909090h)
.text:004020C0                                         ; DATA XREF: sub_402310+E4↓o
.text:004020E0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004020E0                                         ; DATA XREF: sub_402310+2FC↓o
.text:0040210D                 align 20h
.text:00402120 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402120                                         ; DATA XREF: sub_402310:loc_402672↓o
.text:0040214D                 align 20h
.text:00402160 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402160                                         ; DATA XREF: sub_402310:loc_402710↓o
.text:00402160                                         ; sub_402310:loc_402AD7↓o
.text:00402186                 align 20h
.text:004021A0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004021A0                                         ; DATA XREF: sub_402310+48E↓o
.text:004021C0 dword_4021C0    dd 90909000h, 7 dup(90909090h)
.text:004021C0                                         ; DATA XREF: sub_402310:loc_4027E1↓o
.text:004021E0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004021E0                                         ; DATA XREF: sub_402310:loc_4027FA↓o
.text:00402200 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402200                                         ; DATA XREF: sub_402310:loc_4028DF↓o
.text:00402200                                         ; sub_402310:loc_402C0C↓o
.text:00402227                 align 20h
.text:00402240 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402240                                         ; DATA XREF: sub_402310:loc_402A53↓o
.text:0040226E                 align 20h
.text:00402280 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402280                                         ; DATA XREF: sub_402310:loc_402B3F↓o
.text:004022A1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004022A1                                         ; DATA XREF: sub_402310+93F↓o
.text:004022BB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004022BB                                         ; DATA XREF: sub_402310:loc_402C87↓o
.text:004022D5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004022D5                                         ; DATA XREF: sub_402310:loc_402CAE↓o
.text:004022F3 ; const char VarName[]
.text:004022F3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402310:loc_402E60↓o
.text:00402303                 align 10h
.text:00402310
.text:00402310 ; =============== S U B R O U T I N E =======================================
.text:00402310
.text:00402310
.text:00402310 ; int __cdecl sub_402310(int, int, char *Str, int, int, int, int, int)
.text:00402310 sub_402310      proc near               ; CODE XREF: sub_402EA0+5A↓p
.text:00402310                                         ; .text:00402F8A↓p ...
.text:00402310
.text:00402310 Str1            = dword ptr -5Ch
.text:00402310 Str2            = dword ptr -58h
.text:00402310 MaxCount        = dword ptr -54h
.text:00402310 var_50          = dword ptr -50h
.text:00402310 var_4C          = dword ptr -4Ch
.text:00402310 var_3C          = dword ptr -3Ch
.text:00402310 var_38          = dword ptr -38h
.text:00402310 var_34          = dword ptr -34h
.text:00402310 var_30          = dword ptr -30h
.text:00402310 var_2C          = dword ptr -2Ch
.text:00402310 var_28          = dword ptr -28h
.text:00402310 var_24          = dword ptr -24h
.text:00402310 var_20          = dword ptr -20h
.text:00402310 var_1C          = dword ptr -1Ch
.text:00402310 var_18          = dword ptr -18h
.text:00402310 var_14          = dword ptr -14h
.text:00402310 arg_0           = dword ptr  4
.text:00402310 arg_4           = dword ptr  8
.text:00402310 Str             = dword ptr  0Ch
.text:00402310 arg_C           = dword ptr  10h
.text:00402310 arg_10          = dword ptr  14h
.text:00402310 arg_14          = dword ptr  18h
.text:00402310 arg_18          = dword ptr  1Ch
.text:00402310 arg_1C          = dword ptr  20h
.text:00402310
.text:00402310                 push    ebp
.text:00402311                 mov     eax, 0FFFFFFFFh
.text:00402316                 push    edi
.text:00402317                 push    esi
.text:00402318                 push    ebx
.text:00402319                 sub     esp, 4Ch
.text:0040231C                 mov     esi, [esp+5Ch+Str]
.text:00402320                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402324                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402327                 mov     ebx, [ebp+4]
.text:0040232A                 setz    dl
.text:0040232D                 movzx   ecx, dl
.text:00402330                 dec     ecx
.text:00402331                 and     ecx, ebx
.text:00402333                 mov     [esp+5Ch+var_14], ecx
.text:00402337                 mov     ecx, [esp+5Ch+arg_0]
.text:0040233B                 test    ecx, ecx
.text:0040233D                 jle     loc_402467
.text:00402343                 mov     dword ptr [ebp+0Ch], 0
.text:0040234A                 mov     ebx, [ebp+0]
.text:0040234D                 test    ebx, ebx
.text:0040234F                 jz      loc_402E80
.text:00402355                 mov     edi, [ebp+10h]
.text:00402358                 test    edi, edi
.text:0040235A                 jnz     short loc_4023B3
.text:0040235C                 lea     esi, [esi+0]
.text:00402360
.text:00402360 loc_402360:                             ; CODE XREF: sub_402310+B7C↓j
.text:00402360                 mov     [ebp+24h], ebx
.text:00402363                 mov     esi, [esp+5Ch+Str]
.text:00402367                 mov     [ebp+20h], ebx
.text:0040236A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040236E                 xor     ebx, ebx
.text:00402370                 mov     dword ptr [ebp+14h], 0
.text:00402377                 test    ecx, ecx
.text:00402379                 jz      loc_402E60
.text:0040237F
.text:0040237F loc_40237F:                             ; CODE XREF: sub_402310+B64↓j
.text:0040237F                 mov     ebx, 1
.text:00402384
.text:00402384 loc_402384:                             ; CODE XREF: sub_402310+B5E↓j
.text:00402384                 mov     [ebp+1Ch], ebx
.text:00402387                 mov     ecx, [esp+5Ch+Str]
.text:0040238B                 movzx   eax, byte ptr [ecx]
.text:0040238E                 cmp     al, 2Dh ; '-'
.text:00402390                 jz      loc_402E50
.text:00402396                 cmp     al, 2Bh ; '+'
.text:00402398                 jz      loc_402E39
.text:0040239E                 xor     edx, edx
.text:004023A0                 test    ebx, ebx
.text:004023A2                 setz    dl
.text:004023A5                 mov     [ebp+18h], edx
.text:004023A8
.text:004023A8 loc_4023A8:                             ; CODE XREF: sub_402310+B35↓j
.text:004023A8                 mov     [esp+5Ch+Str], esi
.text:004023AC                 mov     dword ptr [ebp+10h], 1
.text:004023B3
.text:004023B3 loc_4023B3:                             ; CODE XREF: sub_402310+4A↑j
.text:004023B3                 mov     eax, [ebp+14h]
.text:004023B6                 test    eax, eax
.text:004023B8                 jz      short loc_4023C3
.text:004023BA                 cmp     byte ptr [eax], 0
.text:004023BD                 jnz     loc_4024A0
.text:004023C3
.text:004023C3 loc_4023C3:                             ; CODE XREF: sub_402310+A8↑j
.text:004023C3                 mov     ebx, [ebp+0]
.text:004023C6                 cmp     [ebp+24h], ebx
.text:004023C9                 jle     short loc_4023CE
.text:004023CB                 mov     [ebp+24h], ebx
.text:004023CE
.text:004023CE loc_4023CE:                             ; CODE XREF: sub_402310+B9↑j
.text:004023CE                 cmp     [ebp+20h], ebx
.text:004023D1                 jle     short loc_4023D6
.text:004023D3                 mov     [ebp+20h], ebx
.text:004023D6
.text:004023D6 loc_4023D6:                             ; CODE XREF: sub_402310+C1↑j
.text:004023D6                 cmp     dword ptr [ebp+18h], 1
.text:004023DA                 jz      loc_402DB0
.text:004023E0
.text:004023E0 loc_4023E0:                             ; CODE XREF: sub_402310+B13↓j
.text:004023E0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004023E4                 jz      loc_402D94
.text:004023EA                 cld
.text:004023EB                 mov     ecx, [esp+5Ch+arg_4]
.text:004023EF                 mov     edx, 3
.text:004023F4                 mov     edi, offset dword_4020C0
.text:004023F9                 mov     esi, [ecx+ebx*4]
.text:004023FC                 mov     ecx, edx
.text:004023FE                 repe cmpsb
.text:00402400                 jnz     short loc_40243C
.text:00402402                 mov     edx, [ebp+24h]
.text:00402405                 lea     eax, [ebx+1]
.text:00402408                 cmp     [ebp+20h], edx
.text:0040240B                 mov     [ebp+0], eax
.text:0040240E                 jz      loc_402DA8
.text:00402414                 cmp     edx, eax
.text:00402416                 jz      short loc_402430
.text:00402418                 mov     [esp+5Ch+Str2], ebp
.text:0040241C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402420                 mov     [esp+5Ch+Str1], ebx
.text:00402423                 call    sub_402FC0
.text:00402428                 nop
.text:00402429                 lea     esi, [esi+0]
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_402310+106↑j
.text:00402430                                         ; sub_402310+A9B↓j
.text:00402430                 mov     eax, [esp+5Ch+arg_0]
.text:00402434                 mov     ebx, eax
.text:00402436                 mov     [ebp+24h], eax
.text:00402439                 mov     [ebp+0], eax
.text:0040243C
.text:0040243C loc_40243C:                             ; CODE XREF: sub_402310+F0↑j
.text:0040243C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402440                 jz      loc_402D94
.text:00402446                 mov     esi, [esp+5Ch+arg_4]
.text:0040244A                 mov     eax, [esi+ebx*4]
.text:0040244D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402450                 jz      short loc_402477
.text:00402452
.text:00402452 loc_402452:                             ; CODE XREF: sub_402310+16D↓j
.text:00402452                 mov     edx, [ebp+18h]
.text:00402455                 test    edx, edx
.text:00402457                 jz      short loc_402470
.text:00402459                 mov     [ebp+0Ch], eax
.text:0040245C                 lea     edi, [ebx+1]
.text:0040245F                 mov     eax, 1
.text:00402464                 mov     [ebp+0], edi
.text:00402467
.text:00402467 loc_402467:                             ; CODE XREF: sub_402310+2D↑j
.text:00402467                                         ; sub_402310+165↓j ...
.text:00402467                 add     esp, 4Ch
.text:0040246A                 pop     ebx
.text:0040246B                 pop     esi
.text:0040246C                 pop     edi
.text:0040246D                 pop     ebp
.text:0040246E                 retn
.text:0040246E ; ---------------------------------------------------------------------------
.text:0040246F                 align 10h
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_402310+147↑j
.text:00402470                                         ; sub_402310+A8A↓j ...
.text:00402470                 mov     eax, 0FFFFFFFFh
.text:00402475                 jmp     short loc_402467
.text:00402477 ; ---------------------------------------------------------------------------
.text:00402477
.text:00402477 loc_402477:                             ; CODE XREF: sub_402310+140↑j
.text:00402477                 movzx   edx, byte ptr [eax+1]
.text:0040247B                 test    dl, dl
.text:0040247D                 jz      short loc_402452
.text:0040247F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402483                 xor     ecx, ecx
.text:00402485                 test    ebx, ebx
.text:00402487                 jz      short loc_402492
.text:00402489                 cmp     dl, 2Dh ; '-'
.text:0040248C                 jz      loc_402D8A
.text:00402492
.text:00402492 loc_402492:                             ; CODE XREF: sub_402310+177↑j
.text:00402492                                         ; sub_402310+A7F↓j
.text:00402492                 lea     esi, [ecx+eax+1]
.text:00402496                 mov     [ebp+14h], esi
.text:00402499                 lea     esi, [esi+0]
.text:004024A0
.text:004024A0 loc_4024A0:                             ; CODE XREF: sub_402310+AD↑j
.text:004024A0                 mov     ecx, [esp+5Ch+arg_C]
.text:004024A4                 test    ecx, ecx
.text:004024A6                 jz      loc_402830
.text:004024AC                 mov     edx, [ebp+0]
.text:004024AF                 mov     edi, [esp+5Ch+arg_4]
.text:004024B3                 mov     eax, [edi+edx*4]
.text:004024B6                 movzx   edx, byte ptr [eax+1]
.text:004024BA                 cmp     dl, 2Dh ; '-'
.text:004024BD                 jz      short loc_4024D5
.text:004024BF                 mov     ebx, [esp+5Ch+arg_14]
.text:004024C3                 test    ebx, ebx
.text:004024C5                 jz      loc_402830
.text:004024CB                 cmp     byte ptr [eax+2], 0
.text:004024CF                 jz      loc_402D6A
.text:004024D5
.text:004024D5 loc_4024D5:                             ; CODE XREF: sub_402310+1AD↑j
.text:004024D5                                         ; sub_402310+A75↓j
.text:004024D5                 mov     [esp+5Ch+var_18], 0
.text:004024DD                 mov     ecx, [ebp+14h]
.text:004024E0                 mov     [esp+5Ch+var_1C], 0
.text:004024E8                 mov     [esp+5Ch+var_20], 0
.text:004024F0                 mov     edi, ecx
.text:004024F2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004024FA                 movzx   eax, byte ptr [ecx]
.text:004024FD                 test    al, al
.text:004024FF                 jz      short loc_40251C
.text:00402501                 cmp     al, 3Dh ; '='
.text:00402503                 jz      short loc_40251C
.text:00402505                 lea     esi, [esi+0]
.text:00402509                 lea     edi, [edi+0]
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_402310+20A↓j
.text:00402510                 inc     edi
.text:00402511                 movzx   eax, byte ptr [edi]
.text:00402514                 test    al, al
.text:00402516                 jz      short loc_40251C
.text:00402518                 cmp     al, 3Dh ; '='
.text:0040251A                 jnz     short loc_402510
.text:0040251C
.text:0040251C loc_40251C:                             ; CODE XREF: sub_402310+1EF↑j
.text:0040251C                                         ; sub_402310+1F3↑j ...
.text:0040251C                 mov     [esp+5Ch+var_28], 0
.text:00402524                 mov     esi, [esp+5Ch+arg_C]
.text:00402528                 mov     ebx, [esi]
.text:0040252A                 test    ebx, ebx
.text:0040252C                 mov     edx, ebx
.text:0040252E                 jz      loc_402750
.text:00402534                 lea     esi, [esi+0]
.text:0040253A                 lea     edi, [edi+0]
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_402310+25E↓j
.text:00402540                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402544                 mov     ebx, edi
.text:00402546                 sub     ebx, ecx
.text:00402548                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040254C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040254F                 call    strncmp
.text:00402554                 test    eax, eax
.text:00402556                 jz      loc_402CE6
.text:0040255C
.text:0040255C loc_40255C:                             ; CODE XREF: sub_402310+A0F↓j
.text:0040255C                                         ; sub_402310+A24↓j ...
.text:0040255C                 inc     [esp+5Ch+var_28]
.text:00402560                 add     esi, 10h
.text:00402563                 mov     ecx, [esi]
.text:00402565                 test    ecx, ecx
.text:00402567                 mov     edx, ecx
.text:00402569                 jz      short loc_402570
.text:0040256B                 mov     ecx, [ebp+14h]
.text:0040256E                 jmp     short loc_402540
.text:00402570 ; ---------------------------------------------------------------------------
.text:00402570
.text:00402570 loc_402570:                             ; CODE XREF: sub_402310+259↑j
.text:00402570                                         ; sub_402310+A55↓j
.text:00402570                 mov     esi, [esp+5Ch+var_20]
.text:00402574                 test    esi, esi
.text:00402576                 jz      short loc_402584
.text:00402578                 mov     edx, [esp+5Ch+var_1C]
.text:0040257C                 test    edx, edx
.text:0040257E                 jz      loc_402C90
.text:00402584
.text:00402584 loc_402584:                             ; CODE XREF: sub_402310+266↑j
.text:00402584                 mov     eax, [esp+5Ch+var_18]
.text:00402588                 test    eax, eax
.text:0040258A                 jz      loc_402750
.text:00402590                 mov     ecx, [ebp+0]
.text:00402593                 lea     eax, [ecx+1]
.text:00402596                 mov     [ebp+0], eax
.text:00402599                 cmp     byte ptr [edi], 0
.text:0040259C                 jz      loc_4026B0
.text:004025A2                 mov     ecx, [esp+5Ch+var_18]
.text:004025A6                 mov     esi, [ecx+4]
.text:004025A9                 test    esi, esi
.text:004025AB                 jz      short loc_4025F6
.text:004025AD                 lea     ebx, [edi+1]
.text:004025B0                 mov     [ebp+0Ch], ebx
.text:004025B3
.text:004025B3 loc_4025B3:                             ; CODE XREF: sub_402310+3A8↓j
.text:004025B3                                         ; sub_402310+3C4↓j
.text:004025B3                 mov     ebx, [ebp+14h]
.text:004025B6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:004025B9                 call    strlen
.text:004025BE                 add     [ebp+14h], eax
.text:004025C1                 mov     esi, [esp+5Ch+arg_10]
.text:004025C5                 test    esi, esi
.text:004025C7                 jz      short loc_4025D3
.text:004025C9                 mov     ebp, [esp+5Ch+var_24]
.text:004025CD                 mov     ecx, [esp+5Ch+arg_10]
.text:004025D1                 mov     [ecx], ebp
.text:004025D3
.text:004025D3 loc_4025D3:                             ; CODE XREF: sub_402310+2B7↑j
.text:004025D3                 mov     eax, [esp+5Ch+var_18]
.text:004025D7                 mov     ecx, [eax+8]
.text:004025DA                 test    ecx, ecx
.text:004025DC                 jnz     short loc_4025EA
.text:004025DE                 mov     ecx, [esp+5Ch+var_18]
.text:004025E2
.text:004025E2 loc_4025E2:                             ; CODE XREF: sub_402310+723↓j
.text:004025E2                 mov     eax, [ecx+0Ch]
.text:004025E5                 jmp     loc_402467
.text:004025EA ; ---------------------------------------------------------------------------
.text:004025EA
.text:004025EA loc_4025EA:                             ; CODE XREF: sub_402310+2CC↑j
.text:004025EA                                         ; sub_402310+719↓j
.text:004025EA                 mov     esi, [eax+0Ch]
.text:004025ED                 xor     eax, eax
.text:004025EF                 mov     [ecx], esi
.text:004025F1                 jmp     loc_402467
.text:004025F6 ; ---------------------------------------------------------------------------
.text:004025F6
.text:004025F6 loc_4025F6:                             ; CODE XREF: sub_402310+29B↑j
.text:004025F6                 mov     edi, [esp+5Ch+var_14]
.text:004025FA                 test    edi, edi
.text:004025FC                 jz      short loc_402650
.text:004025FE                 mov     esi, [esp+5Ch+arg_4]
.text:00402602                 mov     edx, [esi+eax*4-4]
.text:00402606                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040260A                 jz      short loc_402672
.text:0040260C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402613                 call    ds:libintl_gettext
.text:00402619                 mov     edx, [esp+5Ch+var_18]
.text:0040261D                 mov     edi, [edx]
.text:0040261F                 mov     [esp+5Ch+var_4C], edi
.text:00402623                 mov     ebx, [ebp+0]
.text:00402626                 mov     edi, [esp+5Ch+arg_4]
.text:0040262A                 mov     ecx, [edi+ebx*4-4]
.text:0040262E                 movsx   esi, byte ptr [ecx]
.text:00402631                 mov     ecx, ds:_iob
.text:00402637                 add     ecx, 40h ; '@'
.text:0040263A                 mov     [esp+5Ch+var_50], esi
.text:0040263E                 mov     ebx, [edi]
.text:00402640                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402644                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402647                 mov     [esp+5Ch+MaxCount], ebx
.text:0040264B                 call    fprintf
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_402310+2EC↑j
.text:00402650                                         ; sub_402310+398↓j
.text:00402650                 mov     ecx, [ebp+14h]
.text:00402653                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402656                 call    strlen
.text:0040265B                 add     [ebp+14h], eax
.text:0040265E                 mov     eax, [esp+5Ch+var_18]
.text:00402662                 mov     esi, [eax+0Ch]
.text:00402665                 mov     [ebp+8], esi
.text:00402668
.text:00402668 loc_402668:                             ; CODE XREF: sub_402310+4E5↓j
.text:00402668                                         ; sub_402310+73E↓j ...
.text:00402668                 mov     eax, 3Fh ; '?'
.text:0040266D                 jmp     loc_402467
.text:00402672 ; ---------------------------------------------------------------------------
.text:00402672
.text:00402672 loc_402672:                             ; CODE XREF: sub_402310+2FA↑j
.text:00402672                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402679                 call    ds:libintl_gettext
.text:0040267F                 mov     edx, [esp+5Ch+var_18]
.text:00402683                 mov     edi, [esp+5Ch+arg_4]
.text:00402687                 mov     ecx, ds:_iob
.text:0040268D                 mov     esi, [edx]
.text:0040268F                 add     ecx, 40h ; '@'
.text:00402692                 mov     [esp+5Ch+var_50], esi
.text:00402696                 mov     ebx, [edi]
.text:00402698                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040269C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040269F                 mov     [esp+5Ch+MaxCount], ebx
.text:004026A3                 call    fprintf
.text:004026A8                 jmp     short loc_402650
.text:004026A8 ; ---------------------------------------------------------------------------
.text:004026AA                 align 10h
.text:004026B0
.text:004026B0 loc_4026B0:                             ; CODE XREF: sub_402310+28C↑j
.text:004026B0                 mov     ebx, [esp+5Ch+var_18]
.text:004026B4                 cmp     dword ptr [ebx+4], 1
.text:004026B8                 jnz     loc_4025B3
.text:004026BE                 cmp     eax, [esp+5Ch+arg_0]
.text:004026C2                 jge     short loc_4026D9
.text:004026C4                 mov     ebx, [esp+5Ch+arg_4]
.text:004026C8                 lea     edi, [ecx+2]
.text:004026CB                 mov     [ebp+0], edi
.text:004026CE                 mov     esi, [ebx+eax*4]
.text:004026D1                 mov     [ebp+0Ch], esi
.text:004026D4                 jmp     loc_4025B3
.text:004026D9 ; ---------------------------------------------------------------------------
.text:004026D9
.text:004026D9 loc_4026D9:                             ; CODE XREF: sub_402310+3B2↑j
.text:004026D9                 mov     edx, [esp+5Ch+var_14]
.text:004026DD                 test    edx, edx
.text:004026DF                 jnz     short loc_402710
.text:004026E1
.text:004026E1 loc_4026E1:                             ; CODE XREF: sub_402310+437↓j
.text:004026E1                 mov     edx, [ebp+14h]
.text:004026E4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004026E7                 call    strlen
.text:004026EC                 add     [ebp+14h], eax
.text:004026EF                 mov     eax, [esp+5Ch+var_18]
.text:004026F3                 mov     edi, [eax+0Ch]
.text:004026F6                 mov     [ebp+8], edi
.text:004026F9
.text:004026F9 loc_4026F9:                             ; CODE XREF: sub_402310+7C2↓j
.text:004026F9                 mov     ebp, [esp+5Ch+Str]
.text:004026FD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402701                 setnz   bl
.text:00402704                 movzx   esi, bl
.text:00402707                 lea     eax, [esi+esi*4+3Ah]
.text:0040270B                 jmp     loc_402467
.text:00402710 ; ---------------------------------------------------------------------------
.text:00402710
.text:00402710 loc_402710:                             ; CODE XREF: sub_402310+3CF↑j
.text:00402710                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402717                 call    ds:libintl_gettext
.text:0040271D                 mov     ecx, [ebp+0]
.text:00402720                 mov     esi, [esp+5Ch+arg_4]
.text:00402724                 mov     ebx, [esi+ecx*4-4]
.text:00402728                 mov     ecx, ds:_iob
.text:0040272E                 mov     [esp+5Ch+var_50], ebx
.text:00402732                 mov     edi, [esi]
.text:00402734                 add     ecx, 40h ; '@'
.text:00402737                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040273B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040273E                 mov     [esp+5Ch+MaxCount], edi
.text:00402742                 call    fprintf
.text:00402747                 jmp     short loc_4026E1
.text:00402747 ; ---------------------------------------------------------------------------
.text:00402749                 align 10h
.text:00402750
.text:00402750 loc_402750:                             ; CODE XREF: sub_402310+21E↑j
.text:00402750                                         ; sub_402310+27A↑j
.text:00402750                 mov     eax, [esp+5Ch+arg_14]
.text:00402754                 test    eax, eax
.text:00402756                 jz      short loc_402786
.text:00402758                 mov     ebx, [ebp+0]
.text:0040275B                 mov     esi, [esp+5Ch+arg_4]
.text:0040275F                 mov     edi, [esi+ebx*4]
.text:00402762                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402766                 jz      short loc_402789
.text:00402768                 mov     ecx, [ebp+14h]
.text:0040276B                 mov     edx, [esp+5Ch+Str]
.text:0040276F                 movsx   ebx, byte ptr [ecx]
.text:00402772                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402775                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402779                 call    strchr
.text:0040277E                 test    eax, eax
.text:00402780                 jnz     loc_402830
.text:00402786
.text:00402786 loc_402786:                             ; CODE XREF: sub_402310+446↑j
.text:00402786                 mov     ebx, [ebp+0]
.text:00402789
.text:00402789 loc_402789:                             ; CODE XREF: sub_402310+456↑j
.text:00402789                 mov     eax, [esp+5Ch+var_14]
.text:0040278D                 test    eax, eax
.text:0040278F                 jz      short loc_4027E1
.text:00402791                 mov     esi, [esp+5Ch+arg_4]
.text:00402795                 mov     edi, [esi+ebx*4]
.text:00402798                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040279C                 jz      short loc_4027FA
.text:0040279E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004027A5                 call    ds:libintl_gettext
.text:004027AB                 mov     edi, [ebp+14h]
.text:004027AE                 mov     [esp+5Ch+var_4C], edi
.text:004027B2                 mov     ebx, [ebp+0]
.text:004027B5                 mov     edi, [esp+5Ch+arg_4]
.text:004027B9                 mov     esi, [edi+ebx*4]
.text:004027BC                 movsx   ecx, byte ptr [esi]
.text:004027BF                 mov     esi, ds:_iob
.text:004027C5                 add     esi, 40h ; '@'
.text:004027C8                 mov     [esp+5Ch+var_50], ecx
.text:004027CC                 mov     ebx, [edi]
.text:004027CE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004027D2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004027D5                 mov     [esp+5Ch+MaxCount], ebx
.text:004027D9                 call    fprintf
.text:004027DE
.text:004027DE loc_4027DE:                             ; CODE XREF: sub_402310+51D↓j
.text:004027DE                 mov     ebx, [ebp+0]
.text:004027E1
.text:004027E1 loc_4027E1:                             ; CODE XREF: sub_402310+47F↑j
.text:004027E1                 mov     dword ptr [ebp+14h], offset dword_4021C0
.text:004027E8                 lea     edx, [ebx+1]
.text:004027EB                 mov     [ebp+0], edx
.text:004027EE
.text:004027EE loc_4027EE:                             ; CODE XREF: sub_402310+999↓j
.text:004027EE                 mov     dword ptr [ebp+8], 0
.text:004027F5                 jmp     loc_402668
.text:004027FA ; ---------------------------------------------------------------------------
.text:004027FA
.text:004027FA loc_4027FA:                             ; CODE XREF: sub_402310+48C↑j
.text:004027FA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402801                 call    ds:libintl_gettext
.text:00402807                 mov     ecx, [ebp+14h]
.text:0040280A                 mov     edi, [esp+5Ch+arg_4]
.text:0040280E                 mov     edx, ds:_iob
.text:00402814                 mov     [esp+5Ch+var_50], ecx
.text:00402818                 mov     ebx, [edi]
.text:0040281A                 add     edx, 40h ; '@'
.text:0040281D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402821                 mov     [esp+5Ch+MaxCount], ebx
.text:00402825                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402828                 call    fprintf
.text:0040282D                 jmp     short loc_4027DE
.text:0040282D ; ---------------------------------------------------------------------------
.text:0040282F                 align 10h
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: sub_402310+196↑j
.text:00402830                                         ; sub_402310+1B5↑j ...
.text:00402830                 mov     esi, [ebp+14h]
.text:00402833                 movzx   ebx, byte ptr [esi]
.text:00402836                 inc     esi
.text:00402837                 mov     [ebp+14h], esi
.text:0040283A                 mov     ecx, [esp+5Ch+Str]
.text:0040283E                 movsx   esi, bl
.text:00402841                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402845                 mov     edi, esi
.text:00402847                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040284A                 call    strchr
.text:0040284F                 mov     ecx, [ebp+14h]
.text:00402852                 cmp     byte ptr [ecx], 0
.text:00402855                 jnz     short loc_40285A
.text:00402857                 inc     dword ptr [ebp+0]
.text:0040285A
.text:0040285A loc_40285A:                             ; CODE XREF: sub_402310+545↑j
.text:0040285A                 test    eax, eax
.text:0040285C                 jz      loc_402C40
.text:00402862                 cmp     bl, 3Ah ; ':'
.text:00402865                 jz      loc_402C40
.text:0040286B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040286E                 jz      loc_402926
.text:00402874                 movzx   edx, byte ptr [eax+1]
.text:00402878
.text:00402878 loc_402878:                             ; CODE XREF: sub_402310+61D↓j
.text:00402878                 cmp     dl, 3Ah ; ':'
.text:0040287B                 jz      short loc_402884
.text:0040287D
.text:0040287D loc_40287D:                             ; CODE XREF: sub_402310+590↓j
.text:0040287D                 mov     eax, esi
.text:0040287F                 jmp     loc_402467
.text:00402884 ; ---------------------------------------------------------------------------
.text:00402884
.text:00402884 loc_402884:                             ; CODE XREF: sub_402310+56B↑j
.text:00402884                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402888                 jz      loc_402911
.text:0040288E                 cmp     byte ptr [ecx], 0
.text:00402891                 jz      short loc_4028A2
.text:00402893
.text:00402893 loc_402893:                             ; CODE XREF: sub_402310+604↓j
.text:00402893                 inc     dword ptr [ebp+0]
.text:00402896                 mov     [ebp+0Ch], ecx
.text:00402899
.text:00402899 loc_402899:                             ; CODE XREF: sub_402310+5AB↓j
.text:00402899                                         ; sub_402310+5C6↓j ...
.text:00402899                 mov     dword ptr [ebp+14h], 0
.text:004028A0                 jmp     short loc_40287D
.text:004028A2 ; ---------------------------------------------------------------------------
.text:004028A2
.text:004028A2 loc_4028A2:                             ; CODE XREF: sub_402310+581↑j
.text:004028A2                 mov     ecx, [ebp+0]
.text:004028A5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004028A9                 jz      short loc_4028BD
.text:004028AB                 mov     eax, [esp+5Ch+arg_4]
.text:004028AF                 lea     edx, [ecx+1]
.text:004028B2                 mov     [ebp+0], edx
.text:004028B5                 mov     ebx, [eax+ecx*4]
.text:004028B8                 mov     [ebp+0Ch], ebx
.text:004028BB                 jmp     short loc_402899
.text:004028BD ; ---------------------------------------------------------------------------
.text:004028BD
.text:004028BD loc_4028BD:                             ; CODE XREF: sub_402310+599↑j
.text:004028BD                 mov     ecx, [esp+5Ch+var_14]
.text:004028C1                 test    ecx, ecx
.text:004028C3                 jnz     short loc_4028DF
.text:004028C5
.text:004028C5 loc_4028C5:                             ; CODE XREF: sub_402310+5FF↓j
.text:004028C5                 mov     [ebp+8], edi
.text:004028C8                 mov     edi, [esp+5Ch+Str]
.text:004028CC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004028CF                 jz      short loc_4028D8
.text:004028D1                 mov     esi, 3Fh ; '?'
.text:004028D6                 jmp     short loc_402899
.text:004028D8 ; ---------------------------------------------------------------------------
.text:004028D8
.text:004028D8 loc_4028D8:                             ; CODE XREF: sub_402310+5BF↑j
.text:004028D8                 mov     esi, 3Ah ; ':'
.text:004028DD                 jmp     short loc_402899
.text:004028DF ; ---------------------------------------------------------------------------
.text:004028DF
.text:004028DF loc_4028DF:                             ; CODE XREF: sub_402310+5B3↑j
.text:004028DF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004028E6                 call    ds:libintl_gettext
.text:004028EC                 mov     [esp+5Ch+var_50], edi
.text:004028F0                 mov     ebx, [esp+5Ch+arg_4]
.text:004028F4                 mov     edx, ds:_iob
.text:004028FA                 mov     esi, [ebx]
.text:004028FC                 add     edx, 40h ; '@'
.text:004028FF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402903                 mov     [esp+5Ch+MaxCount], esi
.text:00402907                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040290A                 call    fprintf
.text:0040290F                 jmp     short loc_4028C5
.text:00402911 ; ---------------------------------------------------------------------------
.text:00402911
.text:00402911 loc_402911:                             ; CODE XREF: sub_402310+578↑j
.text:00402911                 cmp     byte ptr [ecx], 0
.text:00402914                 jnz     loc_402893
.text:0040291A                 mov     dword ptr [ebp+0Ch], 0
.text:00402921                 jmp     loc_402899
.text:00402926 ; ---------------------------------------------------------------------------
.text:00402926
.text:00402926 loc_402926:                             ; CODE XREF: sub_402310+55E↑j
.text:00402926                 movzx   edx, byte ptr [eax+1]
.text:0040292A                 cmp     dl, 3Bh ; ';'
.text:0040292D                 jnz     loc_402878
.text:00402933                 mov     [esp+5Ch+var_2C], 0
.text:0040293B                 mov     [esp+5Ch+var_30], 0
.text:00402943                 mov     [esp+5Ch+var_34], 0
.text:0040294B                 mov     [esp+5Ch+var_38], 0
.text:00402953                 cmp     byte ptr [ecx], 0
.text:00402956                 jz      loc_402BCB
.text:0040295C                 inc     dword ptr [ebp+0]
.text:0040295F                 mov     [ebp+0Ch], ecx
.text:00402962
.text:00402962 loc_402962:                             ; CODE XREF: sub_402310+8D4↓j
.text:00402962                 mov     edi, [ebp+0Ch]
.text:00402965                 mov     [ebp+14h], edi
.text:00402968                 movzx   eax, byte ptr [edi]
.text:0040296B                 test    al, al
.text:0040296D                 jz      short loc_40297F
.text:0040296F                 cmp     al, 3Dh ; '='
.text:00402971                 jz      short loc_40297F
.text:00402973
.text:00402973 loc_402973:                             ; CODE XREF: sub_402310+66D↓j
.text:00402973                 inc     edi
.text:00402974                 movzx   eax, byte ptr [edi]
.text:00402977                 test    al, al
.text:00402979                 jz      short loc_40297F
.text:0040297B                 cmp     al, 3Dh ; '='
.text:0040297D                 jnz     short loc_402973
.text:0040297F
.text:0040297F loc_40297F:                             ; CODE XREF: sub_402310+65D↑j
.text:0040297F                                         ; sub_402310+661↑j ...
.text:0040297F                 mov     [esp+5Ch+var_3C], 0
.text:00402987                 mov     esi, [esp+5Ch+arg_C]
.text:0040298B                 mov     eax, [esi]
.text:0040298D                 test    eax, eax
.text:0040298F                 jz      loc_402B10
.text:00402995                 mov     ecx, eax
.text:00402997
.text:00402997 loc_402997:                             ; CODE XREF: sub_402310+6B3↓j
.text:00402997                 mov     ebx, [ebp+14h]
.text:0040299A                 mov     eax, edi
.text:0040299C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040299F                 sub     eax, ebx
.text:004029A1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004029A5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004029A9                 call    strncmp
.text:004029AE                 test    eax, eax
.text:004029B0                 jz      loc_402B77
.text:004029B6
.text:004029B6 loc_4029B6:                             ; CODE XREF: sub_402310+88C↓j
.text:004029B6                                         ; sub_402310+89D↓j
.text:004029B6                 inc     [esp+5Ch+var_3C]
.text:004029BA                 add     esi, 10h
.text:004029BD                 mov     edx, [esi]
.text:004029BF                 test    edx, edx
.text:004029C1                 mov     ecx, edx
.text:004029C3                 jnz     short loc_402997
.text:004029C5
.text:004029C5 loc_4029C5:                             ; CODE XREF: sub_402310+8B6↓j
.text:004029C5                 mov     esi, [esp+5Ch+var_34]
.text:004029C9                 test    esi, esi
.text:004029CB                 jz      short loc_4029D9
.text:004029CD                 mov     ebx, [esp+5Ch+var_30]
.text:004029D1                 test    ebx, ebx
.text:004029D3                 jz      loc_402B21
.text:004029D9
.text:004029D9 loc_4029D9:                             ; CODE XREF: sub_402310+6BB↑j
.text:004029D9                 mov     esi, [esp+5Ch+var_2C]
.text:004029DD                 test    esi, esi
.text:004029DF                 jz      loc_402B10
.text:004029E5                 cmp     byte ptr [edi], 0
.text:004029E8                 jz      loc_402A90
.text:004029EE                 mov     ecx, [esp+5Ch+var_2C]
.text:004029F2                 mov     ebx, [ecx+4]
.text:004029F5                 test    ebx, ebx
.text:004029F7                 jz      short loc_402A38
.text:004029F9                 lea     edx, [edi+1]
.text:004029FC                 mov     [ebp+0Ch], edx
.text:004029FF
.text:004029FF loc_4029FF:                             ; CODE XREF: sub_402310+788↓j
.text:004029FF                                         ; sub_402310+7A7↓j
.text:004029FF                 mov     edi, [ebp+14h]
.text:00402A02                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402A05                 call    strlen
.text:00402A0A                 add     [ebp+14h], eax
.text:00402A0D                 mov     eax, [esp+5Ch+arg_10]
.text:00402A11                 test    eax, eax
.text:00402A13                 jz      short loc_402A20
.text:00402A15                 mov     edx, [esp+5Ch+var_38]
.text:00402A19                 mov     ebp, [esp+5Ch+arg_10]
.text:00402A1D                 mov     [ebp+0], edx
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_402310+703↑j
.text:00402A20                 mov     eax, [esp+5Ch+var_2C]
.text:00402A24                 mov     ecx, [eax+8]
.text:00402A27                 test    ecx, ecx
.text:00402A29                 jnz     loc_4025EA
.text:00402A2F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402A33                 jmp     loc_4025E2
.text:00402A38 ; ---------------------------------------------------------------------------
.text:00402A38
.text:00402A38 loc_402A38:                             ; CODE XREF: sub_402310+6E7↑j
.text:00402A38                 mov     eax, [esp+5Ch+var_14]
.text:00402A3C                 test    eax, eax
.text:00402A3E                 jnz     short loc_402A53
.text:00402A40
.text:00402A40 loc_402A40:                             ; CODE XREF: sub_402310+779↓j
.text:00402A40                 mov     ecx, [ebp+14h]
.text:00402A43                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402A46                 call    strlen
.text:00402A4B                 add     [ebp+14h], eax
.text:00402A4E                 jmp     loc_402668
.text:00402A53 ; ---------------------------------------------------------------------------
.text:00402A53
.text:00402A53 loc_402A53:                             ; CODE XREF: sub_402310+72E↑j
.text:00402A53                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00402A5A                 call    ds:libintl_gettext
.text:00402A60                 mov     edx, [esp+5Ch+var_2C]
.text:00402A64                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A68                 mov     edi, [edx]
.text:00402A6A                 mov     [esp+5Ch+var_50], edi
.text:00402A6E                 mov     edi, ds:_iob
.text:00402A74                 mov     esi, [ebx]
.text:00402A76                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A7A                 add     edi, 40h ; '@'
.text:00402A7D                 mov     [esp+5Ch+MaxCount], esi
.text:00402A81                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402A84                 call    fprintf
.text:00402A89                 jmp     short loc_402A40
.text:00402A89 ; ---------------------------------------------------------------------------
.text:00402A8B                 align 10h
.text:00402A90
.text:00402A90 loc_402A90:                             ; CODE XREF: sub_402310+6D8↑j
.text:00402A90                 mov     esi, [esp+5Ch+var_2C]
.text:00402A94                 cmp     dword ptr [esi+4], 1
.text:00402A98                 jnz     loc_4029FF
.text:00402A9E                 mov     ecx, [ebp+0]
.text:00402AA1                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402AA5                 jge     short loc_402ABC
.text:00402AA7                 mov     eax, [esp+5Ch+arg_4]
.text:00402AAB                 lea     ebx, [ecx+1]
.text:00402AAE                 mov     [ebp+0], ebx
.text:00402AB1                 mov     edi, [eax+ecx*4]
.text:00402AB4                 mov     [ebp+0Ch], edi
.text:00402AB7                 jmp     loc_4029FF
.text:00402ABC ; ---------------------------------------------------------------------------
.text:00402ABC
.text:00402ABC loc_402ABC:                             ; CODE XREF: sub_402310+795↑j
.text:00402ABC                 mov     edx, [esp+5Ch+var_14]
.text:00402AC0                 test    edx, edx
.text:00402AC2                 jnz     short loc_402AD7
.text:00402AC4
.text:00402AC4 loc_402AC4:                             ; CODE XREF: sub_402310+7FE↓j
.text:00402AC4                 mov     edx, [ebp+14h]
.text:00402AC7                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402ACA                 call    strlen
.text:00402ACF                 add     [ebp+14h], eax
.text:00402AD2                 jmp     loc_4026F9
.text:00402AD7 ; ---------------------------------------------------------------------------
.text:00402AD7
.text:00402AD7 loc_402AD7:                             ; CODE XREF: sub_402310+7B2↑j
.text:00402AD7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402ADE                 call    ds:libintl_gettext
.text:00402AE4                 mov     ecx, [ebp+0]
.text:00402AE7                 mov     ebx, [esp+5Ch+arg_4]
.text:00402AEB                 mov     edi, [ebx+ecx*4-4]
.text:00402AEF                 mov     ecx, ds:_iob
.text:00402AF5                 mov     [esp+5Ch+var_50], edi
.text:00402AF9                 mov     esi, [ebx]
.text:00402AFB                 add     ecx, 40h ; '@'
.text:00402AFE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B02                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402B05                 mov     [esp+5Ch+MaxCount], esi
.text:00402B09                 call    fprintf
.text:00402B0E                 jmp     short loc_402AC4
.text:00402B10 ; ---------------------------------------------------------------------------
.text:00402B10
.text:00402B10 loc_402B10:                             ; CODE XREF: sub_402310+67F↑j
.text:00402B10                                         ; sub_402310+6CF↑j
.text:00402B10                 mov     dword ptr [ebp+14h], 0
.text:00402B17                 mov     eax, 57h ; 'W'
.text:00402B1C                 jmp     loc_402467
.text:00402B21 ; ---------------------------------------------------------------------------
.text:00402B21
.text:00402B21 loc_402B21:                             ; CODE XREF: sub_402310+6C3↑j
.text:00402B21                 mov     edi, [esp+5Ch+var_14]
.text:00402B25                 test    edi, edi
.text:00402B27                 jnz     short loc_402B3F
.text:00402B29
.text:00402B29 loc_402B29:                             ; CODE XREF: sub_402310+865↓j
.text:00402B29                 mov     edx, [ebp+14h]
.text:00402B2C                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402B2F                 call    strlen
.text:00402B34                 add     [ebp+14h], eax
.text:00402B37                 inc     dword ptr [ebp+0]
.text:00402B3A                 jmp     loc_402668
.text:00402B3F ; ---------------------------------------------------------------------------
.text:00402B3F
.text:00402B3F loc_402B3F:                             ; CODE XREF: sub_402310+817↑j
.text:00402B3F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402B46                 call    ds:libintl_gettext
.text:00402B4C                 mov     ecx, [ebp+0]
.text:00402B4F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402B53                 mov     edi, [ebx+ecx*4]
.text:00402B56                 mov     ecx, ds:_iob
.text:00402B5C                 mov     [esp+5Ch+var_50], edi
.text:00402B60                 mov     esi, [ebx]
.text:00402B62                 add     ecx, 40h ; '@'
.text:00402B65                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B69                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402B6C                 mov     [esp+5Ch+MaxCount], esi
.text:00402B70                 call    fprintf
.text:00402B75                 jmp     short loc_402B29
.text:00402B77 ; ---------------------------------------------------------------------------
.text:00402B77
.text:00402B77 loc_402B77:                             ; CODE XREF: sub_402310+6A0↑j
.text:00402B77                 mov     edx, [ebp+14h]
.text:00402B7A                 mov     ebx, edi
.text:00402B7C                 mov     ecx, [esi]
.text:00402B7E                 sub     ebx, edx
.text:00402B80                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402B83                 call    strlen
.text:00402B88                 cmp     ebx, eax
.text:00402B8A                 jz      short loc_402BB2
.text:00402B8C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402B90                 test    ebx, ebx
.text:00402B92                 jz      short loc_402BA1
.text:00402B94                 mov     [esp+5Ch+var_34], 1
.text:00402B9C                 jmp     loc_4029B6
.text:00402BA1 ; ---------------------------------------------------------------------------
.text:00402BA1
.text:00402BA1 loc_402BA1:                             ; CODE XREF: sub_402310+882↑j
.text:00402BA1                 mov     [esp+5Ch+var_2C], esi
.text:00402BA5                 mov     ecx, [esp+5Ch+var_3C]
.text:00402BA9                 mov     [esp+5Ch+var_38], ecx
.text:00402BAD                 jmp     loc_4029B6
.text:00402BB2 ; ---------------------------------------------------------------------------
.text:00402BB2
.text:00402BB2 loc_402BB2:                             ; CODE XREF: sub_402310+87A↑j
.text:00402BB2                 mov     [esp+5Ch+var_2C], esi
.text:00402BB6                 mov     eax, [esp+5Ch+var_3C]
.text:00402BBA                 mov     [esp+5Ch+var_30], 1
.text:00402BC2                 mov     [esp+5Ch+var_38], eax
.text:00402BC6                 jmp     loc_4029C5
.text:00402BCB ; ---------------------------------------------------------------------------
.text:00402BCB
.text:00402BCB loc_402BCB:                             ; CODE XREF: sub_402310+646↑j
.text:00402BCB                 mov     edx, [ebp+0]
.text:00402BCE                 cmp     edx, [esp+5Ch+arg_0]
.text:00402BD2                 jz      short loc_402BE9
.text:00402BD4                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BD8                 lea     esi, [edx+1]
.text:00402BDB                 mov     [ebp+0], esi
.text:00402BDE                 mov     edi, [ebx+edx*4]
.text:00402BE1                 mov     [ebp+0Ch], edi
.text:00402BE4                 jmp     loc_402962
.text:00402BE9 ; ---------------------------------------------------------------------------
.text:00402BE9
.text:00402BE9 loc_402BE9:                             ; CODE XREF: sub_402310+8C2↑j
.text:00402BE9                 mov     edi, [esp+5Ch+var_14]
.text:00402BED                 test    edi, edi
.text:00402BEF                 jnz     short loc_402C0C
.text:00402BF1
.text:00402BF1 loc_402BF1:                             ; CODE XREF: sub_402310+92C↓j
.text:00402BF1                 mov     [ebp+8], esi
.text:00402BF4                 mov     ebp, [esp+5Ch+Str]
.text:00402BF8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402BFC                 jz      short loc_402C08
.text:00402BFE                 mov     bl, 3Fh ; '?'
.text:00402C00
.text:00402C00 loc_402C00:                             ; CODE XREF: sub_402310+8FA↓j
.text:00402C00                 movsx   eax, bl
.text:00402C03                 jmp     loc_402467
.text:00402C08 ; ---------------------------------------------------------------------------
.text:00402C08
.text:00402C08 loc_402C08:                             ; CODE XREF: sub_402310+8EC↑j
.text:00402C08                 mov     bl, 3Ah ; ':'
.text:00402C0A                 jmp     short loc_402C00
.text:00402C0C ; ---------------------------------------------------------------------------
.text:00402C0C
.text:00402C0C loc_402C0C:                             ; CODE XREF: sub_402310+8DF↑j
.text:00402C0C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402C13                 call    ds:libintl_gettext
.text:00402C19                 mov     [esp+5Ch+var_50], esi
.text:00402C1D                 mov     edx, [esp+5Ch+arg_4]
.text:00402C21                 mov     ecx, ds:_iob
.text:00402C27                 mov     ebx, [edx]
.text:00402C29                 add     ecx, 40h ; '@'
.text:00402C2C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C30                 mov     [esp+5Ch+MaxCount], ebx
.text:00402C34                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402C37                 call    fprintf
.text:00402C3C                 jmp     short loc_402BF1
.text:00402C3C ; ---------------------------------------------------------------------------
.text:00402C3E                 align 10h
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_402310+54C↑j
.text:00402C40                                         ; sub_402310+555↑j
.text:00402C40                 mov     eax, [esp+5Ch+var_14]
.text:00402C44                 test    eax, eax
.text:00402C46                 jz      short loc_402C7F
.text:00402C48                 mov     ebx, [ebp+1Ch]
.text:00402C4B                 test    ebx, ebx
.text:00402C4D                 jz      short loc_402C87
.text:00402C4F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402C56
.text:00402C56 loc_402C56:                             ; CODE XREF: sub_402310+97E↓j
.text:00402C56                 call    ds:libintl_gettext
.text:00402C5C                 mov     [esp+5Ch+var_50], esi
.text:00402C60                 mov     ebx, [esp+5Ch+arg_4]
.text:00402C64                 mov     edx, ds:_iob
.text:00402C6A                 mov     esi, [ebx]
.text:00402C6C                 add     edx, 40h ; '@'
.text:00402C6F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C73                 mov     [esp+5Ch+MaxCount], esi
.text:00402C77                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402C7A                 call    fprintf
.text:00402C7F
.text:00402C7F loc_402C7F:                             ; CODE XREF: sub_402310+936↑j
.text:00402C7F                 mov     [ebp+8], edi
.text:00402C82                 jmp     loc_402668
.text:00402C87 ; ---------------------------------------------------------------------------
.text:00402C87
.text:00402C87 loc_402C87:                             ; CODE XREF: sub_402310+93D↑j
.text:00402C87                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402C8E                 jmp     short loc_402C56
.text:00402C90 ; ---------------------------------------------------------------------------
.text:00402C90
.text:00402C90 loc_402C90:                             ; CODE XREF: sub_402310+26E↑j
.text:00402C90                 mov     edi, [esp+5Ch+var_14]
.text:00402C94                 test    edi, edi
.text:00402C96                 jnz     short loc_402CAE
.text:00402C98
.text:00402C98 loc_402C98:                             ; CODE XREF: sub_402310+9D4↓j
.text:00402C98                 mov     edx, [ebp+14h]
.text:00402C9B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402C9E                 call    strlen
.text:00402CA3                 add     [ebp+14h], eax
.text:00402CA6                 inc     dword ptr [ebp+0]
.text:00402CA9                 jmp     loc_4027EE
.text:00402CAE ; ---------------------------------------------------------------------------
.text:00402CAE
.text:00402CAE loc_402CAE:                             ; CODE XREF: sub_402310+986↑j
.text:00402CAE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402CB5                 call    ds:libintl_gettext
.text:00402CBB                 mov     ebx, [ebp+0]
.text:00402CBE                 mov     edi, [esp+5Ch+arg_4]
.text:00402CC2                 mov     ecx, [edi+ebx*4]
.text:00402CC5                 mov     ebx, ds:_iob
.text:00402CCB                 mov     [esp+5Ch+var_50], ecx
.text:00402CCF                 mov     esi, [edi]
.text:00402CD1                 add     ebx, 40h ; '@'
.text:00402CD4                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402CD8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402CDB                 mov     [esp+5Ch+MaxCount], esi
.text:00402CDF                 call    fprintf
.text:00402CE4                 jmp     short loc_402C98
.text:00402CE6 ; ---------------------------------------------------------------------------
.text:00402CE6
.text:00402CE6 loc_402CE6:                             ; CODE XREF: sub_402310+246↑j
.text:00402CE6                 mov     ecx, [ebp+14h]
.text:00402CE9                 mov     ebx, edi
.text:00402CEB                 mov     edx, [esi]
.text:00402CED                 sub     ebx, ecx
.text:00402CEF                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402CF2                 call    strlen
.text:00402CF7                 cmp     ebx, eax
.text:00402CF9                 jz      short loc_402D51
.text:00402CFB                 mov     ebx, [esp+5Ch+var_18]
.text:00402CFF                 test    ebx, ebx
.text:00402D01                 jz      short loc_402D40
.text:00402D03                 mov     edx, [esp+5Ch+arg_14]
.text:00402D07                 test    edx, edx
.text:00402D09                 jnz     short loc_402D17
.text:00402D0B                 mov     ecx, [esp+5Ch+var_18]
.text:00402D0F                 mov     ebx, [esi+4]
.text:00402D12                 cmp     [ecx+4], ebx
.text:00402D15                 jz      short loc_402D24
.text:00402D17
.text:00402D17 loc_402D17:                             ; CODE XREF: sub_402310+9F9↑j
.text:00402D17                                         ; sub_402310+A1A↓j ...
.text:00402D17                 mov     [esp+5Ch+var_20], 1
.text:00402D1F                 jmp     loc_40255C
.text:00402D24 ; ---------------------------------------------------------------------------
.text:00402D24
.text:00402D24 loc_402D24:                             ; CODE XREF: sub_402310+A05↑j
.text:00402D24                 mov     edx, [esi+8]
.text:00402D27                 cmp     [ecx+8], edx
.text:00402D2A                 jnz     short loc_402D17
.text:00402D2C                 mov     ebx, [esi+0Ch]
.text:00402D2F                 cmp     [ecx+0Ch], ebx
.text:00402D32                 jnz     short loc_402D17
.text:00402D34                 jmp     loc_40255C
.text:00402D34 ; ---------------------------------------------------------------------------
.text:00402D39                 align 10h
.text:00402D40
.text:00402D40 loc_402D40:                             ; CODE XREF: sub_402310+9F1↑j
.text:00402D40                 mov     [esp+5Ch+var_18], esi
.text:00402D44                 mov     eax, [esp+5Ch+var_28]
.text:00402D48                 mov     [esp+5Ch+var_24], eax
.text:00402D4C                 jmp     loc_40255C
.text:00402D51 ; ---------------------------------------------------------------------------
.text:00402D51
.text:00402D51 loc_402D51:                             ; CODE XREF: sub_402310+9E9↑j
.text:00402D51                 mov     [esp+5Ch+var_18], esi
.text:00402D55                 mov     ecx, [esp+5Ch+var_28]
.text:00402D59                 mov     [esp+5Ch+var_1C], 1
.text:00402D61                 mov     [esp+5Ch+var_24], ecx
.text:00402D65                 jmp     loc_402570
.text:00402D6A ; ---------------------------------------------------------------------------
.text:00402D6A
.text:00402D6A loc_402D6A:                             ; CODE XREF: sub_402310+1BF↑j
.text:00402D6A                 mov     eax, [esp+5Ch+Str]
.text:00402D6E                 movsx   esi, dl
.text:00402D71                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402D75                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402D78                 call    strchr
.text:00402D7D                 test    eax, eax
.text:00402D7F                 jnz     loc_402830
.text:00402D85                 jmp     loc_4024D5
.text:00402D8A ; ---------------------------------------------------------------------------
.text:00402D8A
.text:00402D8A loc_402D8A:                             ; CODE XREF: sub_402310+17C↑j
.text:00402D8A                 mov     ecx, 1
.text:00402D8F                 jmp     loc_402492
.text:00402D94 ; ---------------------------------------------------------------------------
.text:00402D94
.text:00402D94 loc_402D94:                             ; CODE XREF: sub_402310+D4↑j
.text:00402D94                                         ; sub_402310+130↑j
.text:00402D94                 mov     eax, [ebp+20h]
.text:00402D97                 cmp     eax, [ebp+24h]
.text:00402D9A                 jz      loc_402470
.text:00402DA0                 mov     [ebp+0], eax
.text:00402DA3                 jmp     loc_402470
.text:00402DA8 ; ---------------------------------------------------------------------------
.text:00402DA8
.text:00402DA8 loc_402DA8:                             ; CODE XREF: sub_402310+FE↑j
.text:00402DA8                 mov     [ebp+20h], eax
.text:00402DAB                 jmp     loc_402430
.text:00402DB0 ; ---------------------------------------------------------------------------
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_402310+CA↑j
.text:00402DB0                 mov     edx, [ebp+20h]
.text:00402DB3                 mov     eax, [ebp+24h]
.text:00402DB6                 cmp     edx, eax
.text:00402DB8                 jz      short loc_402E30
.text:00402DBA                 cmp     eax, ebx
.text:00402DBC                 jz      short loc_402DD1
.text:00402DBE                 mov     [esp+5Ch+Str2], ebp
.text:00402DC2                 mov     ebx, [esp+5Ch+arg_4]
.text:00402DC6                 mov     [esp+5Ch+Str1], ebx
.text:00402DC9                 call    sub_402FC0
.text:00402DCE                 mov     ebx, [ebp+0]
.text:00402DD1
.text:00402DD1 loc_402DD1:                             ; CODE XREF: sub_402310+AAC↑j
.text:00402DD1                                         ; sub_402310+B22↓j ...
.text:00402DD1                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402DD5                 jge     short loc_402E20
.text:00402DD7                 mov     esi, [esp+5Ch+arg_4]
.text:00402DDB                 mov     eax, [esi+ebx*4]
.text:00402DDE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402DE1                 jz      short loc_402E28
.text:00402DE3                 lea     esi, [esi+0]
.text:00402DE9                 lea     edi, [edi+0]
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402310+AFC↓j
.text:00402DF0                                         ; sub_402310+B1C↓j
.text:00402DF0                 lea     eax, [ebx+1]
.text:00402DF3                 mov     ebx, eax
.text:00402DF5                 mov     [ebp+0], eax
.text:00402DF8                 cmp     eax, [esp+5Ch+arg_0]
.text:00402DFC                 jge     short loc_402E20
.text:00402DFE                 mov     edi, [esp+5Ch+arg_4]
.text:00402E02                 mov     edx, [edi+eax*4]
.text:00402E05                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402E08                 jz      short loc_402E10
.text:00402E0A
.text:00402E0A loc_402E0A:                             ; CODE XREF: sub_402310+B04↓j
.text:00402E0A                 mov     ebx, eax
.text:00402E0C                 jmp     short loc_402DF0
.text:00402E0C ; ---------------------------------------------------------------------------
.text:00402E0E                 align 10h
.text:00402E10
.text:00402E10 loc_402E10:                             ; CODE XREF: sub_402310+AF8↑j
.text:00402E10                 cmp     byte ptr [edx+1], 0
.text:00402E14                 jz      short loc_402E0A
.text:00402E16                 lea     esi, [esi+0]
.text:00402E19                 lea     edi, [edi+0]
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402310+AC5↑j
.text:00402E20                                         ; sub_402310+AEC↑j ...
.text:00402E20                 mov     [ebp+24h], ebx
.text:00402E23                 jmp     loc_4023E0
.text:00402E28 ; ---------------------------------------------------------------------------
.text:00402E28
.text:00402E28 loc_402E28:                             ; CODE XREF: sub_402310+AD1↑j
.text:00402E28                 cmp     byte ptr [eax+1], 0
.text:00402E2C                 jz      short loc_402DF0
.text:00402E2E                 jmp     short loc_402E20
.text:00402E30 ; ---------------------------------------------------------------------------
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_402310+AA8↑j
.text:00402E30                 cmp     edx, ebx
.text:00402E32                 jz      short loc_402DD1
.text:00402E34                 mov     [ebp+20h], ebx
.text:00402E37                 jmp     short loc_402DD1
.text:00402E39 ; ---------------------------------------------------------------------------
.text:00402E39
.text:00402E39 loc_402E39:                             ; CODE XREF: sub_402310+88↑j
.text:00402E39                 mov     dword ptr [ebp+18h], 0
.text:00402E40                 mov     esi, [esp+5Ch+Str]
.text:00402E44
.text:00402E44 loc_402E44:                             ; CODE XREF: sub_402310+B49↓j
.text:00402E44                 inc     esi
.text:00402E45                 jmp     loc_4023A8
.text:00402E45 ; ---------------------------------------------------------------------------
.text:00402E4A                 align 10h
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402310+80↑j
.text:00402E50                 mov     dword ptr [ebp+18h], 2
.text:00402E57                 mov     esi, ecx
.text:00402E59                 jmp     short loc_402E44
.text:00402E59 ; ---------------------------------------------------------------------------
.text:00402E5B                 align 10h
.text:00402E60
.text:00402E60 loc_402E60:                             ; CODE XREF: sub_402310+69↑j
.text:00402E60                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402E67                 call    getenv
.text:00402E6C                 test    eax, eax
.text:00402E6E                 jz      loc_402384
.text:00402E74                 jmp     loc_40237F
.text:00402E74 ; ---------------------------------------------------------------------------
.text:00402E79                 align 10h
.text:00402E80
.text:00402E80 loc_402E80:                             ; CODE XREF: sub_402310+3F↑j
.text:00402E80                 mov     dword ptr [ebp+0], 1
.text:00402E87                 mov     ebx, 1
.text:00402E8C                 jmp     loc_402360
.text:00402E8C sub_402310      endp
.text:00402E8C
.text:00402E91 ; ---------------------------------------------------------------------------
.text:00402E91                 jmp     short sub_402EA0
.text:00402E91 ; ---------------------------------------------------------------------------
.text:00402E93                 align 10h
.text:00402EA0
.text:00402EA0 ; =============== S U B R O U T I N E =======================================
.text:00402EA0
.text:00402EA0
.text:00402EA0 ; int __cdecl sub_402EA0(int, int, char *, int, int, int, int)
.text:00402EA0 sub_402EA0      proc near               ; CODE XREF: .text:00402E91↑j
.text:00402EA0                                         ; sub_403140+3A↓p ...
.text:00402EA0
.text:00402EA0 var_2C          = dword ptr -2Ch
.text:00402EA0 var_28          = dword ptr -28h
.text:00402EA0 Str             = dword ptr -24h
.text:00402EA0 var_20          = dword ptr -20h
.text:00402EA0 var_1C          = dword ptr -1Ch
.text:00402EA0 var_18          = dword ptr -18h
.text:00402EA0 var_14          = dword ptr -14h
.text:00402EA0 var_10          = dword ptr -10h
.text:00402EA0 arg_0           = dword ptr  4
.text:00402EA0 arg_4           = dword ptr  8
.text:00402EA0 arg_8           = dword ptr  0Ch
.text:00402EA0 arg_C           = dword ptr  10h
.text:00402EA0 arg_10          = dword ptr  14h
.text:00402EA0 arg_14          = dword ptr  18h
.text:00402EA0 arg_18          = dword ptr  1Ch
.text:00402EA0
.text:00402EA0                 sub     esp, 2Ch
.text:00402EA3                 mov     edx, dword_406010
.text:00402EA9                 mov     [esp+2Ch+var_10], offset dword_407050 ; int
.text:00402EB1                 mov     ecx, dword_406014
.text:00402EB7                 mov     ds:dword_407050, edx
.text:00402EBD                 mov     edx, [esp+2Ch+arg_18]
.text:00402EC1                 mov     ds:dword_407054, ecx
.text:00402EC7                 mov     ecx, [esp+2Ch+arg_14]
.text:00402ECB                 mov     [esp+2Ch+var_14], edx ; int
.text:00402ECF                 mov     edx, [esp+2Ch+arg_10]
.text:00402ED3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402ED7                 mov     ecx, [esp+2Ch+arg_C]
.text:00402EDB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402EDF                 mov     edx, [esp+2Ch+arg_8]
.text:00402EE3                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402EE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402EEB                 mov     [esp+2Ch+Str], edx ; Str
.text:00402EEF                 mov     edx, [esp+2Ch+arg_0]
.text:00402EF3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402EF7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402EFA                 call    sub_402310
.text:00402EFF                 mov     ecx, ds:dword_407050
.text:00402F05                 mov     dword_406010, ecx
.text:00402F0B                 mov     ecx, ds:dword_40705C
.text:00402F11                 mov     ds:dword_407310, ecx
.text:00402F17                 mov     ecx, ds:dword_407058
.text:00402F1D                 mov     dword_406018, ecx
.text:00402F23                 add     esp, 2Ch
.text:00402F26                 retn
.text:00402F26 sub_402EA0      endp
.text:00402F26
.text:00402F26 ; ---------------------------------------------------------------------------
.text:00402F27                 align 10h
.text:00402F30                 sub     esp, 2Ch
.text:00402F33                 mov     edx, dword_406010
.text:00402F39                 mov     dword ptr [esp+1Ch], offset dword_407050
.text:00402F41                 mov     ecx, dword_406014
.text:00402F47                 mov     dword ptr [esp+18h], 1
.text:00402F4F                 mov     ds:dword_407050, edx
.text:00402F55                 mov     edx, [esp+38h]
.text:00402F59                 mov     ds:dword_407054, ecx
.text:00402F5F                 mov     ecx, [esp+34h]
.text:00402F63                 mov     [esp+8], edx
.text:00402F67                 mov     edx, [esp+30h]
.text:00402F6B                 mov     [esp+4], ecx
.text:00402F6F                 mov     dword ptr [esp+14h], 0
.text:00402F77                 mov     dword ptr [esp+10h], 0
.text:00402F7F                 mov     dword ptr [esp+0Ch], 0
.text:00402F87                 mov     [esp], edx
.text:00402F8A                 call    sub_402310
.text:00402F8F                 mov     ecx, ds:dword_407050
.text:00402F95                 mov     dword_406010, ecx
.text:00402F9B                 mov     ecx, ds:dword_40705C
.text:00402FA1                 mov     ds:dword_407310, ecx
.text:00402FA7                 mov     ecx, ds:dword_407058
.text:00402FAD                 mov     dword_406018, ecx
.text:00402FB3                 add     esp, 2Ch
.text:00402FB6                 retn
.text:00402FB6 ; ---------------------------------------------------------------------------
.text:00402FB7                 align 10h
.text:00402FC0
.text:00402FC0 ; =============== S U B R O U T I N E =======================================
.text:00402FC0
.text:00402FC0
.text:00402FC0 sub_402FC0      proc near               ; CODE XREF: sub_402310+113↑p
.text:00402FC0                                         ; sub_402310+AB9↑p
.text:00402FC0
.text:00402FC0 var_2C          = dword ptr -2Ch
.text:00402FC0 var_28          = dword ptr -28h
.text:00402FC0 var_24          = dword ptr -24h
.text:00402FC0 var_20          = dword ptr -20h
.text:00402FC0 var_1C          = dword ptr -1Ch
.text:00402FC0 var_18          = dword ptr -18h
.text:00402FC0 var_14          = dword ptr -14h
.text:00402FC0 arg_0           = dword ptr  4
.text:00402FC0 arg_4           = dword ptr  8
.text:00402FC0
.text:00402FC0                 push    ebp
.text:00402FC1                 push    edi
.text:00402FC2                 push    esi
.text:00402FC3                 push    ebx
.text:00402FC4                 sub     esp, 1Ch
.text:00402FC7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402FCB                 mov     eax, [esp+2Ch+arg_4]
.text:00402FCF                 mov     ebx, [esp+2Ch+arg_4]
.text:00402FD3                 mov     edx, [ecx+20h]
.text:00402FD6                 mov     edi, [esp+2Ch+arg_0]
.text:00402FDA                 mov     ecx, [ebx]
.text:00402FDC                 mov     [esp+2Ch+var_2C], edx
.text:00402FDF                 mov     [esp+2Ch+var_14], edx
.text:00402FE3                 mov     edx, [eax+24h]
.text:00402FE6                 mov     [esp+2Ch+var_28], ecx
.text:00402FEA                 mov     [esp+2Ch+var_1C], ecx
.text:00402FEE                 cmp     ecx, edx
.text:00402FF0                 mov     [esp+2Ch+var_18], edx
.text:00402FF4                 jle     short loc_403070
.text:00402FF6                 mov     esi, [esp+2Ch+var_2C]
.text:00402FF9                 cmp     edx, esi
.text:00402FFB                 jle     short loc_403070
.text:00402FFD                 lea     esi, [esi+0]
.text:00403000
.text:00403000 loc_403000:                             ; CODE XREF: sub_402FC0+A1↓j
.text:00403000                 mov     ebx, [esp+2Ch+var_1C]
.text:00403004                 mov     edx, [esp+2Ch+var_18]
.text:00403008                 mov     ebp, [esp+2Ch+var_18]
.text:0040300C                 mov     eax, [esp+2Ch+var_14]
.text:00403010                 sub     ebx, edx
.text:00403012                 mov     [esp+2Ch+var_20], ebx
.text:00403016                 sub     ebp, eax
.text:00403018                 cmp     ebx, ebp
.text:0040301A                 jle     short loc_403095
.text:0040301C                 xor     esi, esi
.text:0040301E                 cmp     esi, ebp
.text:00403020                 jge     short loc_40304D
.text:00403022                 mov     ecx, [esp+2Ch+var_1C]
.text:00403026                 sub     ecx, ebp
.text:00403028                 mov     [esp+2Ch+var_24], ecx
.text:0040302C                 lea     esi, [esi+0]
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: sub_402FC0+8B↓j
.text:00403030                 mov     ecx, [esp+2Ch+var_14]
.text:00403034                 mov     edx, [esp+2Ch+var_24]
.text:00403038                 add     ecx, esi
.text:0040303A                 add     edx, esi
.text:0040303C                 mov     ebx, [edi+ecx*4]
.text:0040303F                 mov     eax, [edi+edx*4]
.text:00403042                 inc     esi
.text:00403043                 cmp     esi, ebp
.text:00403045                 mov     [edi+ecx*4], eax
.text:00403048                 mov     [edi+edx*4], ebx
.text:0040304B                 jl      short loc_403030
.text:0040304D
.text:0040304D loc_40304D:                             ; CODE XREF: sub_402FC0+60↑j
.text:0040304D                 sub     [esp+2Ch+var_1C], ebp
.text:00403051
.text:00403051 loc_403051:                             ; CODE XREF: sub_402FC0+107↓j
.text:00403051                 mov     eax, [esp+2Ch+var_18]
.text:00403055                 cmp     [esp+2Ch+var_1C], eax
.text:00403059                 jle     short loc_403070
.text:0040305B                 mov     ebp, [esp+2Ch+var_14]
.text:0040305F                 cmp     eax, ebp
.text:00403061                 jg      short loc_403000
.text:00403063                 lea     esi, [esi+0]
.text:00403069                 lea     edi, [edi+0]
.text:00403070
.text:00403070 loc_403070:                             ; CODE XREF: sub_402FC0+34↑j
.text:00403070                                         ; sub_402FC0+3B↑j ...
.text:00403070                 mov     esi, [esp+2Ch+var_28]
.text:00403074                 mov     ecx, [esp+2Ch+var_18]
.text:00403078                 mov     eax, [esp+2Ch+var_2C]
.text:0040307B                 mov     edi, [esp+2Ch+arg_4]
.text:0040307F                 mov     edx, [esp+2Ch+var_28]
.text:00403083                 sub     esi, ecx
.text:00403085                 add     esi, eax
.text:00403087                 mov     [edi+20h], esi
.text:0040308A                 mov     [edi+24h], edx
.text:0040308D                 add     esp, 1Ch
.text:00403090                 pop     ebx
.text:00403091                 pop     esi
.text:00403092                 pop     edi
.text:00403093                 pop     ebp
.text:00403094                 retn
.text:00403095 ; ---------------------------------------------------------------------------
.text:00403095
.text:00403095 loc_403095:                             ; CODE XREF: sub_402FC0+5A↑j
.text:00403095                 xor     esi, esi
.text:00403097                 cmp     esi, [esp+2Ch+var_20]
.text:0040309B                 jge     short loc_4030BF
.text:0040309D                 lea     esi, [esi+0]
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_402FC0+FD↓j
.text:004030A0                 mov     ebx, [esp+2Ch+var_14]
.text:004030A4                 mov     ebp, [esp+2Ch+var_18]
.text:004030A8                 add     ebx, esi
.text:004030AA                 add     ebp, esi
.text:004030AC                 mov     edx, [edi+ebx*4]
.text:004030AF                 inc     esi
.text:004030B0                 cmp     esi, [esp+2Ch+var_20]
.text:004030B4                 mov     ecx, [edi+ebp*4]
.text:004030B7                 mov     [edi+ebx*4], ecx
.text:004030BA                 mov     [edi+ebp*4], edx
.text:004030BD                 jl      short loc_4030A0
.text:004030BF
.text:004030BF loc_4030BF:                             ; CODE XREF: sub_402FC0+DB↑j
.text:004030BF                 mov     esi, [esp+2Ch+var_20]
.text:004030C3                 add     [esp+2Ch+var_14], esi
.text:004030C7                 jmp     short loc_403051
.text:004030C7 sub_402FC0      endp
.text:004030C7
.text:004030C7 ; ---------------------------------------------------------------------------
.text:004030C9                 align 20h
.text:004030E0                 sub     esp, 0Ch
.text:004030E3                 mov     edx, [esp+14h]
.text:004030E7                 mov     dword ptr [esp+4], 5
.text:004030EF                 mov     [esp+8], edx
.text:004030F3                 mov     edx, [esp+10h]
.text:004030F7                 mov     [esp], edx
.text:004030FA                 call    sub_404870
.text:004030FF                 add     esp, 0Ch
.text:00403102                 retn
.text:00403102 ; ---------------------------------------------------------------------------
.text:00403103                 align 10h
.text:00403110
.text:00403110 ; =============== S U B R O U T I N E =======================================
.text:00403110
.text:00403110
.text:00403110 ; int __cdecl sub_403110(char *)
.text:00403110 sub_403110      proc near               ; CODE XREF: sub_401340+E5↑p
.text:00403110
.text:00403110 var_C           = dword ptr -0Ch
.text:00403110 var_8           = dword ptr -8
.text:00403110 var_4           = dword ptr -4
.text:00403110 arg_0           = dword ptr  4
.text:00403110
.text:00403110                 sub     esp, 0Ch
.text:00403113                 mov     edx, [esp+0Ch+arg_0]
.text:00403117                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040311F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00403126                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040312A                 call    sub_404870
.text:0040312F                 add     esp, 0Ch
.text:00403132                 retn
.text:00403132 sub_403110      endp
.text:00403132
.text:00403132 ; ---------------------------------------------------------------------------
.text:00403133                 align 10h
.text:00403140
.text:00403140 ; =============== S U B R O U T I N E =======================================
.text:00403140
.text:00403140
.text:00403140 ; int __cdecl sub_403140(int, int, char *, int, int)
.text:00403140 sub_403140      proc near               ; CODE XREF: sub_401340+C2↑p
.text:00403140                                         ; sub_4032E0+58↓p
.text:00403140
.text:00403140 var_1C          = dword ptr -1Ch
.text:00403140 var_18          = dword ptr -18h
.text:00403140 var_14          = dword ptr -14h
.text:00403140 var_10          = dword ptr -10h
.text:00403140 var_C           = dword ptr -0Ch
.text:00403140 var_8           = dword ptr -8
.text:00403140 var_4           = dword ptr -4
.text:00403140 arg_0           = dword ptr  4
.text:00403140 arg_4           = dword ptr  8
.text:00403140 arg_8           = dword ptr  0Ch
.text:00403140 arg_C           = dword ptr  10h
.text:00403140 arg_10          = dword ptr  14h
.text:00403140
.text:00403140                 sub     esp, 1Ch
.text:00403143                 mov     edx, [esp+1Ch+arg_C]
.text:00403147                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040314F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403153                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040315B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040315F                 mov     edx, [esp+1Ch+arg_4]
.text:00403163                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403167                 mov     ecx, [esp+1Ch+arg_8]
.text:0040316B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040316F                 mov     edx, [esp+1Ch+arg_0]
.text:00403173                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403177                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040317A                 call    sub_402EA0
.text:0040317F                 add     esp, 1Ch
.text:00403182                 retn
.text:00403182 sub_403140      endp
.text:00403182
.text:00403182 ; ---------------------------------------------------------------------------
.text:00403183                 align 10h
.text:00403190                 sub     esp, 2Ch
.text:00403193                 mov     edx, [esp+44h]
.text:00403197                 mov     dword ptr [esp+18h], 0
.text:0040319F                 mov     ecx, [esp+40h]
.text:004031A3                 mov     dword ptr [esp+14h], 0
.text:004031AB                 mov     [esp+1Ch], edx
.text:004031AF                 mov     edx, [esp+3Ch]
.text:004031B3                 mov     [esp+10h], ecx
.text:004031B7                 mov     ecx, [esp+38h]
.text:004031BB                 mov     [esp+0Ch], edx
.text:004031BF                 mov     edx, [esp+34h]
.text:004031C3                 mov     [esp+8], ecx
.text:004031C7                 mov     [esp+4], edx
.text:004031CB                 mov     edx, [esp+30h]
.text:004031CF                 mov     [esp], edx
.text:004031D2                 call    sub_402310
.text:004031D7                 add     esp, 2Ch
.text:004031DA                 retn
.text:004031DA ; ---------------------------------------------------------------------------
.text:004031DB                 align 10h
.text:004031E0                 sub     esp, 1Ch
.text:004031E3                 mov     edx, [esp+2Ch]
.text:004031E7                 mov     dword ptr [esp+18h], 0
.text:004031EF                 mov     ecx, [esp+30h]
.text:004031F3                 mov     dword ptr [esp+14h], 1
.text:004031FB                 mov     [esp+0Ch], edx
.text:004031FF                 mov     edx, [esp+24h]
.text:00403203                 mov     [esp+10h], ecx
.text:00403207                 mov     ecx, [esp+28h]
.text:0040320B                 mov     [esp+4], edx
.text:0040320F                 mov     edx, [esp+20h]
.text:00403213                 mov     [esp+8], ecx
.text:00403217                 mov     [esp], edx
.text:0040321A                 call    sub_402EA0
.text:0040321F                 add     esp, 1Ch
.text:00403222                 retn
.text:00403222 ; ---------------------------------------------------------------------------
.text:00403223                 align 10h
.text:00403230                 sub     esp, 2Ch
.text:00403233                 mov     edx, [esp+44h]
.text:00403237                 mov     dword ptr [esp+18h], 0
.text:0040323F                 mov     ecx, [esp+40h]
.text:00403243                 mov     dword ptr [esp+14h], 1
.text:0040324B                 mov     [esp+1Ch], edx
.text:0040324F                 mov     edx, [esp+3Ch]
.text:00403253                 mov     [esp+10h], ecx
.text:00403257                 mov     ecx, [esp+38h]
.text:0040325B                 mov     [esp+0Ch], edx
.text:0040325F                 mov     edx, [esp+34h]
.text:00403263                 mov     [esp+8], ecx
.text:00403267                 mov     [esp+4], edx
.text:0040326B                 mov     edx, [esp+30h]
.text:0040326F                 mov     [esp], edx
.text:00403272                 call    sub_402310
.text:00403277                 add     esp, 2Ch
.text:0040327A                 retn
.text:0040327A ; ---------------------------------------------------------------------------
.text:0040327B                 align 10h
.text:00403280 aHelp           db 'help',0             ; DATA XREF: .text:off_4032A0↓o
.text:00403285 aVersion        db 'version',0          ; DATA XREF: .text:004032B0↓o
.text:0040328D                 align 20h
.text:004032A0 off_4032A0      dd offset aHelp         ; DATA XREF: sub_4032E0+3D↓o
.text:004032A0                                         ; "help"
.text:004032A4                 dd 2 dup(0)
.text:004032AC                 dd 68h
.text:004032B0                 dd offset aVersion      ; "version"
.text:004032B4                 dd 2 dup(0)
.text:004032BC                 dd 76h, 4 dup(0)
.text:004032D0 ; ---------------------------------------------------------------------------
.text:004032D0
.text:004032D0 loc_4032D0:                             ; DATA XREF: sub_4032E0+45↓o
.text:004032D0                 sub     eax, [eax]
.text:004032D2                 lea     esi, [esi+0]
.text:004032D9                 lea     edi, [edi+0]
.text:004032E0
.text:004032E0 ; =============== S U B R O U T I N E =======================================
.text:004032E0
.text:004032E0
.text:004032E0 ; int __cdecl sub_4032E0(int, int, FILE *, int, int, int, char)
.text:004032E0 sub_4032E0      proc near               ; CODE XREF: sub_401340+9E↑p
.text:004032E0
.text:004032E0 Code            = dword ptr -1Ch
.text:004032E0 var_18          = dword ptr -18h
.text:004032E0 var_14          = dword ptr -14h
.text:004032E0 var_10          = dword ptr -10h
.text:004032E0 var_C           = dword ptr -0Ch
.text:004032E0 var_4           = dword ptr -4
.text:004032E0 arg_0           = dword ptr  4
.text:004032E0 arg_4           = dword ptr  8
.text:004032E0 arg_8           = dword ptr  0Ch
.text:004032E0 arg_C           = dword ptr  10h
.text:004032E0 arg_10          = dword ptr  14h
.text:004032E0 arg_14          = dword ptr  18h
.text:004032E0 arg_18          = byte ptr  1Ch
.text:004032E0
.text:004032E0                 sub     esp, 1Ch
.text:004032E3                 xor     eax, eax
.text:004032E5                 cmp     [esp+1Ch+arg_0], 2
.text:004032EA                 mov     [esp+1Ch+var_4], ebx
.text:004032EE                 mov     ebx, dword_406014
.text:004032F4                 mov     dword_406014, eax
.text:004032F9                 jz      short loc_403311
.text:004032FB
.text:004032FB loc_4032FB:                             ; CODE XREF: sub_4032E0+60↓j
.text:004032FB                                         ; sub_4032E0+6A↓j
.text:004032FB                 mov     dword_406014, ebx
.text:00403301                 xor     edx, edx
.text:00403303                 mov     ebx, [esp+1Ch+var_4]
.text:00403307                 mov     dword_406010, edx
.text:0040330D                 add     esp, 1Ch
.text:00403310                 retn
.text:00403311 ; ---------------------------------------------------------------------------
.text:00403311
.text:00403311 loc_403311:                             ; CODE XREF: sub_4032E0+19↑j
.text:00403311                 mov     [esp+1Ch+var_C], 0 ; int
.text:00403319                 mov     edx, [esp+1Ch+arg_4]
.text:0040331D                 mov     [esp+1Ch+var_10], offset off_4032A0 ; int
.text:00403325                 mov     [esp+1Ch+var_14], offset loc_4032D0 ; char *
.text:0040332D                 mov     [esp+1Ch+var_18], edx ; int
.text:00403331                 mov     [esp+1Ch+Code], 2 ; int
.text:00403338                 call    sub_403140
.text:0040333D                 cmp     eax, 0FFFFFFFFh
.text:00403340                 jz      short loc_4032FB
.text:00403342                 cmp     eax, 68h ; 'h'
.text:00403345                 jz      short loc_40334E
.text:00403347                 cmp     eax, 76h ; 'v'
.text:0040334A                 jnz     short loc_4032FB
.text:0040334C                 jmp     short loc_403359
.text:0040334E ; ---------------------------------------------------------------------------
.text:0040334E
.text:0040334E loc_40334E:                             ; CODE XREF: sub_4032E0+65↑j
.text:0040334E                 mov     [esp+1Ch+Code], 0
.text:00403355                 call    [esp+1Ch+arg_14]
.text:00403359
.text:00403359 loc_403359:                             ; CODE XREF: sub_4032E0+6C↑j
.text:00403359                 mov     ecx, [esp+1Ch+arg_10]
.text:0040335D                 lea     ebx, [esp+1Ch+arg_18]
.text:00403361                 mov     edx, [esp+1Ch+arg_C]
.text:00403365                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00403369                 mov     ebx, [esp+1Ch+arg_8]
.text:0040336D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00403371                 mov     ecx, ds:_iob
.text:00403377                 mov     [esp+1Ch+var_14], edx ; int
.text:0040337B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040337F                 add     ecx, 20h ; ' '
.text:00403382                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00403385                 call    sub_405140
.text:0040338A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00403391                 call    exit
.text:00403391 sub_4032E0      endp
.text:00403391
.text:00403391 ; ---------------------------------------------------------------------------
.text:00403396                 align 10h
.text:004033A0                 mov     edx, [esp+4]
.text:004033A4                 mov     ds:dword_407080, edx
.text:004033AA                 retn
.text:004033AA ; ---------------------------------------------------------------------------
.text:004033AB aWriteError     db 'write error',0      ; DATA XREF: sub_4033D0:loc_403419↓o
.text:004033B7 ; const char aSS_0[]
.text:004033B7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4033D0+77↓o
.text:004033BE ; const char aS_3[]
.text:004033BE aS_3            db '%s',0               ; DATA XREF: sub_4033D0+A0↓o
.text:004033C1 ; ---------------------------------------------------------------------------
.text:004033C1                 jmp     short sub_4033D0
.text:004033C1 ; ---------------------------------------------------------------------------
.text:004033C3                 align 10h
.text:004033D0
.text:004033D0 ; =============== S U B R O U T I N E =======================================
.text:004033D0
.text:004033D0
.text:004033D0 ; void __cdecl sub_4033D0()
.text:004033D0 sub_4033D0      proc near               ; CODE XREF: .text:004033C1↑j
.text:004033D0                                         ; DATA XREF: sub_401340+5B↑o
.text:004033D0
.text:004033D0 Stream          = dword ptr -2Ch
.text:004033D0 ErrorMessage    = dword ptr -28h
.text:004033D0 var_24          = dword ptr -24h
.text:004033D0 var_20          = byte ptr -20h
.text:004033D0 var_1C          = dword ptr -1Ch
.text:004033D0 var_9           = byte ptr -9
.text:004033D0
.text:004033D0                 push    esi
.text:004033D1                 push    ebx
.text:004033D2                 sub     esp, 24h
.text:004033D5                 mov     edx, ds:_iob
.text:004033DB                 mov     ecx, [edx+2Ch]
.text:004033DE                 lea     esi, [edx+20h]
.text:004033E1                 shr     ecx, 5
.text:004033E4                 mov     bl, cl
.text:004033E6                 mov     ecx, [edx+20h]
.text:004033E9                 and     bl, 1
.text:004033EC                 cmp     ecx, [esi+8]
.text:004033EF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004033F2                 setz    [esp+2Ch+var_9]
.text:004033F7                 call    fclose
.text:004033FC                 test    eax, eax
.text:004033FE                 setnz   al
.text:00403401                 test    bl, bl
.text:00403403                 jnz     loc_403493
.text:00403409                 test    al, al
.text:0040340B                 jz      short loc_403460
.text:0040340D
.text:0040340D loc_40340D:                             ; CODE XREF: sub_4033D0+CD↓j
.text:0040340D                 call    _errno
.text:00403412                 mov     esi, [eax]
.text:00403414
.text:00403414 loc_403414:                             ; CODE XREF: sub_4033D0+C7↓j
.text:00403414                 cmp     esi, 9
.text:00403417                 jz      short loc_403486
.text:00403419
.text:00403419 loc_403419:                             ; CODE XREF: sub_4033D0+B8↓j
.text:00403419                                         ; sub_4033D0+C1↓j
.text:00403419                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403420                 call    ds:libintl_gettext
.text:00403426                 mov     ebx, eax
.text:00403428                 mov     eax, ds:dword_407080
.text:0040342D                 test    eax, eax
.text:0040342F                 jz      short loc_403466
.text:00403431                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403434                 call    sub_404BE0
.text:00403439                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040343D                 mov     edx, Code
.text:00403443                 mov     [esp+2Ch+var_1C], ebx
.text:00403447                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040344F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403453                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403456                 call    sub_405400
.text:0040345B                 nop
.text:0040345C                 lea     esi, [esi+0]
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: sub_4033D0+3B↑j
.text:00403460                                         ; sub_4033D0+B4↓j ...
.text:00403460                 add     esp, 24h
.text:00403463                 pop     ebx
.text:00403464                 pop     esi
.text:00403465                 retn
.text:00403466 ; ---------------------------------------------------------------------------
.text:00403466
.text:00403466 loc_403466:                             ; CODE XREF: sub_4033D0+5F↑j
.text:00403466                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040346A                 mov     ebx, Code
.text:00403470                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00403478                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040347C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040347F                 call    sub_405400
.text:00403484                 jmp     short loc_403460
.text:00403486 ; ---------------------------------------------------------------------------
.text:00403486
.text:00403486 loc_403486:                             ; CODE XREF: sub_4033D0+47↑j
.text:00403486                 test    bl, bl
.text:00403488                 jnz     short loc_403419
.text:0040348A                 cmp     [esp+2Ch+var_9], 0
.text:0040348F                 jnz     short loc_403460
.text:00403491                 jmp     short loc_403419
.text:00403493 ; ---------------------------------------------------------------------------
.text:00403493
.text:00403493 loc_403493:                             ; CODE XREF: sub_4033D0+33↑j
.text:00403493                 xor     esi, esi
.text:00403495                 test    al, al
.text:00403497                 jz      loc_403414
.text:0040349D                 jmp     loc_40340D
.text:0040349D sub_4033D0      endp
.text:0040349D
.text:0040349D ; ---------------------------------------------------------------------------
.text:004034A2                 align 10h
.text:004034B0
.text:004034B0 ; =============== S U B R O U T I N E =======================================
.text:004034B0
.text:004034B0
.text:004034B0 ; int __cdecl sub_4034B0(FILE *, int, int, int)
.text:004034B0 sub_4034B0      proc near               ; CODE XREF: sub_4017B0+97↑p
.text:004034B0                                         ; .text:004036EF↓p
.text:004034B0
.text:004034B0 File            = dword ptr -2Ch
.text:004034B0 var_28          = dword ptr -28h
.text:004034B0 var_24          = dword ptr -24h
.text:004034B0 var_14          = dword ptr -14h
.text:004034B0 arg_0           = dword ptr  4
.text:004034B0 arg_4           = dword ptr  8
.text:004034B0 arg_8           = dword ptr  0Ch
.text:004034B0 arg_C           = dword ptr  10h
.text:004034B0
.text:004034B0                 push    ebp
.text:004034B1                 push    edi
.text:004034B2                 push    esi
.text:004034B3                 push    ebx
.text:004034B4                 sub     esp, 1Ch
.text:004034B7                 mov     ebp, [esp+2Ch+arg_4]
.text:004034BB                 mov     esi, [esp+2Ch+arg_0]
.text:004034BF                 test    ebp, ebp
.text:004034C1                 jz      loc_403654
.text:004034C7                 mov     edx, ds:dword_407090
.text:004034CD
.text:004034CD loc_4034CD:                             ; CODE XREF: sub_4034B0+1AC↓j
.text:004034CD                 cmp     ebp, edx
.text:004034CF                 jz      short loc_4034F8
.text:004034D1                 test    edx, edx
.text:004034D3                 jz      short loc_4034F8
.text:004034D5                 xor     ebx, ebx
.text:004034D7                 mov     cl, 1
.text:004034D9                 cmp     ebx, [esp+2Ch+arg_8]
.text:004034DD                 jnb     short loc_4034F4
.text:004034DF                 nop
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_4034B0+42↓j
.text:004034E0                 movzx   eax, byte ptr [ebx+edx]
.text:004034E4                 cmp     [ebx+ebp], al
.text:004034E7                 jnz     loc_40364D
.text:004034ED                 inc     ebx
.text:004034EE                 cmp     ebx, [esp+2Ch+arg_8]
.text:004034F2                 jb      short loc_4034E0
.text:004034F4
.text:004034F4 loc_4034F4:                             ; CODE XREF: sub_4034B0+2D↑j
.text:004034F4                                         ; sub_4034B0+19F↓j
.text:004034F4                 test    cl, cl
.text:004034F6                 jnz     short loc_403532
.text:004034F8
.text:004034F8 loc_4034F8:                             ; CODE XREF: sub_4034B0+1F↑j
.text:004034F8                                         ; sub_4034B0+23↑j
.text:004034F8                 cld
.text:004034F9                 xor     eax, eax
.text:004034FB                 mov     ds:dword_407090, ebp
.text:00403501                 mov     edi, offset byte_4070A0
.text:00403506                 mov     ecx, 40h ; '@'
.text:0040350B                 rep stosd
.text:0040350D                 xor     edx, edx
.text:0040350F                 cmp     eax, [esp+2Ch+arg_8]
.text:00403513                 jnb     short loc_403532
.text:00403515                 lea     esi, [esi+0]
.text:00403519                 lea     edi, [edi+0]
.text:00403520
.text:00403520 loc_403520:                             ; CODE XREF: sub_4034B0+80↓j
.text:00403520                 movzx   ecx, byte ptr [edx+ebp]
.text:00403524                 inc     edx
.text:00403525                 cmp     edx, [esp+2Ch+arg_8]
.text:00403529                 mov     ds:byte_4070A0[ecx], 1
.text:00403530                 jb      short loc_403520
.text:00403532
.text:00403532 loc_403532:                             ; CODE XREF: sub_4034B0+46↑j
.text:00403532                                         ; sub_4034B0+63↑j
.text:00403532                 mov     edx, [esi+4]
.text:00403535                 dec     edx
.text:00403536                 test    edx, edx
.text:00403538                 mov     [esi+4], edx
.text:0040353B                 js      loc_40363E
.text:00403541                 mov     ecx, [esi]
.text:00403543                 movzx   edi, byte ptr [ecx]
.text:00403546                 inc     ecx
.text:00403547                 mov     [esi], ecx
.text:00403549
.text:00403549 loc_403549:                             ; CODE XREF: sub_4034B0+198↓j
.text:00403549                 test    edi, edi
.text:0040354B                 js      short loc_403585
.text:0040354D                 cmp     ds:byte_4070A0[edi], 0
.text:00403554                 jz      short loc_403585
.text:00403556                 lea     esi, [esi+0]
.text:00403559                 lea     edi, [edi+0]
.text:00403560
.text:00403560 loc_403560:                             ; CODE XREF: sub_4034B0+D3↓j
.text:00403560                 mov     ebx, [esi+4]
.text:00403563                 dec     ebx
.text:00403564                 test    ebx, ebx
.text:00403566                 mov     [esi+4], ebx
.text:00403569                 js      loc_40362F
.text:0040356F                 mov     ebp, [esi]
.text:00403571                 movzx   edi, byte ptr [ebp+0]
.text:00403575                 inc     ebp
.text:00403576                 mov     [esi], ebp
.text:00403578
.text:00403578 loc_403578:                             ; CODE XREF: sub_4034B0+189↓j
.text:00403578                 test    edi, edi
.text:0040357A                 js      short loc_403585
.text:0040357C                 cmp     ds:byte_4070A0[edi], 0
.text:00403583                 jnz     short loc_403560
.text:00403585
.text:00403585 loc_403585:                             ; CODE XREF: sub_4034B0+9B↑j
.text:00403585                                         ; sub_4034B0+A4↑j ...
.text:00403585                 mov     edx, [esp+2Ch+arg_C]
.text:00403589                 xor     ebx, ebx
.text:0040358B                 mov     ecx, [edx]
.text:0040358D                 mov     ebp, [edx+4]
.text:00403590                 mov     [esp+2Ch+var_14], ecx
.text:00403594                 lea     esi, [esi+0]
.text:0040359A                 lea     edi, [edi+0]
.text:004035A0
.text:004035A0 loc_4035A0:                             ; CODE XREF: sub_4034B0+120↓j
.text:004035A0                                         ; sub_4034B0+12C↓j
.text:004035A0                 test    edi, edi
.text:004035A2                 js      short loc_403620
.text:004035A4
.text:004035A4 loc_4035A4:                             ; CODE XREF: sub_4034B0+177↓j
.text:004035A4                 cmp     ebx, [esp+2Ch+var_14]
.text:004035A8                 jz      short loc_403600
.text:004035AA
.text:004035AA loc_4035AA:                             ; CODE XREF: sub_4034B0+16A↓j
.text:004035AA                 test    edi, edi
.text:004035AC                 js      short loc_4035DE
.text:004035AE                 cmp     ds:byte_4070A0[edi], 0
.text:004035B5                 jnz     short loc_4035DE
.text:004035B7                 mov     edx, edi
.text:004035B9                 mov     [ebx+ebp], dl
.text:004035BC                 mov     edi, [esi+4]
.text:004035BF                 inc     ebx
.text:004035C0                 dec     edi
.text:004035C1                 test    edi, edi
.text:004035C3                 mov     [esi+4], edi
.text:004035C6                 js      short loc_4035D2
.text:004035C8                 mov     ecx, [esi]
.text:004035CA                 movzx   edi, byte ptr [ecx]
.text:004035CD                 inc     ecx
.text:004035CE                 mov     [esi], ecx
.text:004035D0                 jmp     short loc_4035A0
.text:004035D2 ; ---------------------------------------------------------------------------
.text:004035D2
.text:004035D2 loc_4035D2:                             ; CODE XREF: sub_4034B0+116↑j
.text:004035D2                 mov     [esp+2Ch+File], esi ; File
.text:004035D5                 call    _filbuf
.text:004035DA                 mov     edi, eax
.text:004035DC                 jmp     short loc_4035A0
.text:004035DE ; ---------------------------------------------------------------------------
.text:004035DE
.text:004035DE loc_4035DE:                             ; CODE XREF: sub_4034B0+FC↑j
.text:004035DE                                         ; sub_4034B0+105↑j
.text:004035DE                 mov     byte ptr [ebx+ebp], 0
.text:004035E2                 mov     eax, ebx
.text:004035E4                 mov     esi, [esp+2Ch+arg_C]
.text:004035E8                 mov     [esi+4], ebp
.text:004035EB                 mov     ebp, [esp+2Ch+var_14]
.text:004035EF                 mov     [esi], ebp
.text:004035F1
.text:004035F1 loc_4035F1:                             ; CODE XREF: sub_4034B0+17D↓j
.text:004035F1                 add     esp, 1Ch
.text:004035F4                 pop     ebx
.text:004035F5                 pop     esi
.text:004035F6                 pop     edi
.text:004035F7                 pop     ebp
.text:004035F8                 retn
.text:004035F8 ; ---------------------------------------------------------------------------
.text:004035F9                 align 10h
.text:00403600
.text:00403600 loc_403600:                             ; CODE XREF: sub_4034B0+F8↑j
.text:00403600                 mov     [esp+2Ch+File], ebp ; void *
.text:00403603                 lea     ecx, [esp+2Ch+var_14]
.text:00403607                 mov     [esp+2Ch+var_24], 1 ; int
.text:0040360F                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403613                 call    sub_4038E0
.text:00403618                 mov     ebp, eax
.text:0040361A                 jmp     short loc_4035AA
.text:0040361A ; ---------------------------------------------------------------------------
.text:0040361C                 align 10h
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_4034B0+F2↑j
.text:00403620                 test    ebx, ebx
.text:00403622                 mov     eax, 0FFFFFFFFh
.text:00403627                 jnz     loc_4035A4
.text:0040362D                 jmp     short loc_4035F1
.text:0040362F ; ---------------------------------------------------------------------------
.text:0040362F
.text:0040362F loc_40362F:                             ; CODE XREF: sub_4034B0+B9↑j
.text:0040362F                 mov     [esp+2Ch+File], esi ; File
.text:00403632                 call    _filbuf
.text:00403637                 mov     edi, eax
.text:00403639                 jmp     loc_403578
.text:0040363E ; ---------------------------------------------------------------------------
.text:0040363E
.text:0040363E loc_40363E:                             ; CODE XREF: sub_4034B0+8B↑j
.text:0040363E                 mov     [esp+2Ch+File], esi ; File
.text:00403641                 call    _filbuf
.text:00403646                 mov     edi, eax
.text:00403648                 jmp     loc_403549
.text:0040364D ; ---------------------------------------------------------------------------
.text:0040364D
.text:0040364D loc_40364D:                             ; CODE XREF: sub_4034B0+37↑j
.text:0040364D                 xor     ecx, ecx
.text:0040364F                 jmp     loc_4034F4
.text:00403654 ; ---------------------------------------------------------------------------
.text:00403654
.text:00403654 loc_403654:                             ; CODE XREF: sub_4034B0+11↑j
.text:00403654                 mov     edx, ds:dword_407090
.text:0040365A                 test    edx, edx
.text:0040365C                 jnz     loc_4034CD
.text:00403662                 call    abort
.text:00403662 sub_4034B0      endp
.text:00403662
.text:00403662 ; ---------------------------------------------------------------------------
.text:00403667                 align 10h
.text:00403670                 push    ebp
.text:00403671                 push    edi
.text:00403672                 push    esi
.text:00403673                 push    ebx
.text:00403674                 sub     esp, 2Ch
.text:00403677                 mov     eax, [esp+44h]
.text:0040367B                 test    eax, eax
.text:0040367D                 jnz     loc_4037B6
.text:00403683                 mov     eax, 40h ; '@'
.text:00403688
.text:00403688 loc_403688:                             ; CODE XREF: .text:004037B7↓j
.text:00403688                 mov     [esp+1Ch], eax
.text:0040368C                 xor     edi, edi
.text:0040368E                 mov     dword ptr [esp+4], 4
.text:00403696                 mov     [esp], eax
.text:00403699                 call    sub_4037E0
.text:0040369E                 mov     [esp+18h], eax
.text:004036A2                 mov     edx, [esp+1Ch]
.text:004036A6                 mov     dword ptr [esp+4], 4
.text:004036AE                 mov     [esp], edx
.text:004036B1                 call    sub_4037E0
.text:004036B6                 mov     dword ptr [esp+20h], 0
.text:004036BE                 mov     ebp, eax
.text:004036C0                 mov     dword ptr [esp+24h], 0
.text:004036C8                 nop
.text:004036C9                 lea     esi, [esi+0]
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: .text:00403734↓j
.text:004036D0                 mov     ecx, [esp+4Ch]
.text:004036D4                 lea     ebx, [esp+20h]
.text:004036D8                 mov     edx, [esp+48h]
.text:004036DC                 mov     [esp+0Ch], ebx
.text:004036E0                 mov     eax, [esp+40h]
.text:004036E4                 mov     [esp+8], ecx
.text:004036E8                 mov     [esp+4], edx
.text:004036EC                 mov     [esp], eax
.text:004036EF                 call    sub_4034B0
.text:004036F4                 cmp     edi, [esp+1Ch]
.text:004036F8                 mov     esi, eax
.text:004036FA                 jnb     short loc_403777
.text:004036FC
.text:004036FC loc_4036FC:                             ; CODE XREF: .text:004037B1↓j
.text:004036FC                 cmp     esi, 0FFFFFFFFh
.text:004036FF                 jz      short loc_403736
.text:00403701                 mov     dword ptr [esp+4], 1
.text:00403709                 lea     ebx, [esi+1]
.text:0040370C                 mov     [esp], ebx
.text:0040370F                 call    sub_4037E0
.text:00403714                 mov     [ebp+edi*4+0], esi
.text:00403718                 mov     ecx, [esp+24h]
.text:0040371C                 mov     [esp+8], ebx
.text:00403720                 mov     [esp], eax
.text:00403723                 mov     [esp+4], ecx
.text:00403727                 call    memcpy
.text:0040372C                 mov     esi, [esp+18h]
.text:00403730                 mov     [esi+edi*4], eax
.text:00403733                 inc     edi
.text:00403734                 jmp     short loc_4036D0
.text:00403736 ; ---------------------------------------------------------------------------
.text:00403736
.text:00403736 loc_403736:                             ; CODE XREF: .text:004036FF↑j
.text:00403736                 mov     dword ptr [ebp+edi*4+0], 0
.text:0040373E                 mov     ecx, [esp+18h]
.text:00403742                 mov     dword ptr [ecx+edi*4], 0
.text:00403749                 mov     esi, [esp+24h]
.text:0040374D                 mov     [esp], esi
.text:00403750                 call    free
.text:00403755                 mov     edx, [esp+54h]
.text:00403759                 mov     ebx, [esp+50h]
.text:0040375D                 mov     eax, [esp+18h]
.text:00403761                 test    edx, edx
.text:00403763                 mov     [ebx], eax
.text:00403765                 jz      short loc_40376D
.text:00403767                 mov     edx, [esp+54h]
.text:0040376B                 mov     [edx], ebp
.text:0040376D
.text:0040376D loc_40376D:                             ; CODE XREF: .text:00403765↑j
.text:0040376D                 add     esp, 2Ch
.text:00403770                 mov     eax, edi
.text:00403772                 pop     ebx
.text:00403773                 pop     esi
.text:00403774                 pop     edi
.text:00403775                 pop     ebp
.text:00403776                 retn
.text:00403777 ; ---------------------------------------------------------------------------
.text:00403777
.text:00403777 loc_403777:                             ; CODE XREF: .text:004036FA↑j
.text:00403777                 mov     dword ptr [esp+8], 4
.text:0040377F                 mov     ecx, [esp+18h]
.text:00403783                 lea     ebx, [esp+1Ch]
.text:00403787                 mov     [esp+4], ebx
.text:0040378B                 mov     [esp], ecx
.text:0040378E                 call    sub_4038E0
.text:00403793                 mov     [esp+18h], eax
.text:00403797                 mov     edx, [esp+1Ch]
.text:0040379B                 mov     [esp], ebp
.text:0040379E                 mov     dword ptr [esp+8], 4
.text:004037A6                 mov     [esp+4], edx
.text:004037AA                 call    sub_403850
.text:004037AF                 mov     ebp, eax
.text:004037B1                 jmp     loc_4036FC
.text:004037B6 ; ---------------------------------------------------------------------------
.text:004037B6
.text:004037B6 loc_4037B6:                             ; CODE XREF: .text:0040367D↑j
.text:004037B6                 inc     eax
.text:004037B7                 jmp     loc_403688
.text:004037B7 ; ---------------------------------------------------------------------------
.text:004037BC                 align 10h
.text:004037C0
.text:004037C0 ; =============== S U B R O U T I N E =======================================
.text:004037C0
.text:004037C0
.text:004037C0 sub_4037C0      proc near               ; CODE XREF: sub_4017B0+7B↑p
.text:004037C0
.text:004037C0 arg_0           = dword ptr  4
.text:004037C0
.text:004037C0                 mov     edx, [esp+arg_0]
.text:004037C4                 mov     dword ptr [edx], 0
.text:004037CA                 mov     dword ptr [edx+4], 0
.text:004037D1                 retn
.text:004037D1 sub_4037C0      endp
.text:004037D1
.text:004037D1 ; ---------------------------------------------------------------------------
.text:004037D2                 align 10h
.text:004037E0
.text:004037E0 ; =============== S U B R O U T I N E =======================================
.text:004037E0
.text:004037E0
.text:004037E0 sub_4037E0      proc near               ; CODE XREF: .text:00403699↑p
.text:004037E0                                         ; .text:004036B1↑p ...
.text:004037E0
.text:004037E0 Size            = dword ptr -0Ch
.text:004037E0 var_4           = dword ptr -4
.text:004037E0 arg_0           = dword ptr  4
.text:004037E0 arg_4           = dword ptr  8
.text:004037E0
.text:004037E0                 sub     esp, 0Ch
.text:004037E3                 xor     edx, edx
.text:004037E5                 mov     ecx, [esp+0Ch+arg_4]
.text:004037E9                 mov     [esp+0Ch+var_4], ebx
.text:004037ED                 mov     eax, 0FFFFFFFFh
.text:004037F2                 mov     ebx, [esp+0Ch+arg_0]
.text:004037F6                 div     ecx
.text:004037F8                 cmp     eax, ebx
.text:004037FA                 jb      short loc_403819
.text:004037FC                 mov     edx, ebx
.text:004037FE                 imul    edx, ecx
.text:00403801                 mov     [esp+0Ch+Size], edx ; Size
.text:00403804                 call    malloc
.text:00403809                 test    eax, eax
.text:0040380B                 jz      short loc_403815
.text:0040380D
.text:0040380D loc_40380D:                             ; CODE XREF: sub_4037E0+37↓j
.text:0040380D                 mov     ebx, [esp+0Ch+var_4]
.text:00403811                 add     esp, 0Ch
.text:00403814                 retn
.text:00403815 ; ---------------------------------------------------------------------------
.text:00403815
.text:00403815 loc_403815:                             ; CODE XREF: sub_4037E0+2B↑j
.text:00403815                 test    ebx, ebx
.text:00403817                 jz      short loc_40380D
.text:00403819
.text:00403819 loc_403819:                             ; CODE XREF: sub_4037E0+1A↑j
.text:00403819                 call    sub_405370
.text:00403819 sub_4037E0      endp
.text:00403819
.text:00403819 ; ---------------------------------------------------------------------------
.text:0040381E                 align 10h
.text:00403820
.text:00403820 ; =============== S U B R O U T I N E =======================================
.text:00403820
.text:00403820
.text:00403820 ; int __cdecl sub_403820(size_t)
.text:00403820 sub_403820      proc near               ; CODE XREF: sub_4017B0+1C↑p
.text:00403820                                         ; sub_4017B0+EA↑p ...
.text:00403820
.text:00403820 Size            = dword ptr -0Ch
.text:00403820 var_4           = dword ptr -4
.text:00403820 arg_0           = dword ptr  4
.text:00403820
.text:00403820                 sub     esp, 0Ch
.text:00403823                 mov     [esp+0Ch+var_4], ebx
.text:00403827                 mov     ebx, [esp+0Ch+arg_0]
.text:0040382B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040382E                 call    malloc
.text:00403833                 test    eax, eax
.text:00403835                 jz      short loc_403840
.text:00403837
.text:00403837 loc_403837:                             ; CODE XREF: sub_403820+22↓j
.text:00403837                 mov     ebx, [esp+0Ch+var_4]
.text:0040383B                 add     esp, 0Ch
.text:0040383E                 retn
.text:0040383E ; ---------------------------------------------------------------------------
.text:0040383F                 align 10h
.text:00403840
.text:00403840 loc_403840:                             ; CODE XREF: sub_403820+15↑j
.text:00403840                 test    ebx, ebx
.text:00403842                 jz      short loc_403837
.text:00403844                 call    sub_405370
.text:00403844 sub_403820      endp
.text:00403844
.text:00403844 ; ---------------------------------------------------------------------------
.text:00403849                 align 10h
.text:00403850
.text:00403850 ; =============== S U B R O U T I N E =======================================
.text:00403850
.text:00403850
.text:00403850 ; int __cdecl sub_403850(void *, int, int)
.text:00403850 sub_403850      proc near               ; CODE XREF: .text:004037AA↑p
.text:00403850
.text:00403850 Block           = dword ptr -1Ch
.text:00403850 Size            = dword ptr -18h
.text:00403850 var_8           = dword ptr -8
.text:00403850 var_4           = dword ptr -4
.text:00403850 arg_0           = dword ptr  4
.text:00403850 arg_4           = dword ptr  8
.text:00403850 arg_8           = dword ptr  0Ch
.text:00403850
.text:00403850                 sub     esp, 1Ch
.text:00403853                 xor     edx, edx
.text:00403855                 mov     eax, 0FFFFFFFFh
.text:0040385A                 mov     [esp+1Ch+var_8], ebx
.text:0040385E                 mov     ecx, [esp+1Ch+arg_0]
.text:00403862                 mov     ebx, [esp+1Ch+arg_8]
.text:00403866                 mov     [esp+1Ch+var_4], esi
.text:0040386A                 mov     esi, [esp+1Ch+arg_4]
.text:0040386E                 div     ebx
.text:00403870                 cmp     eax, esi
.text:00403872                 jb      short loc_4038A4
.text:00403874                 mov     [esp+1Ch+Block], ecx ; Block
.text:00403877                 mov     edx, esi
.text:00403879                 imul    edx, ebx
.text:0040387C                 mov     [esp+1Ch+Size], edx ; Size
.text:00403880                 call    realloc
.text:00403885                 test    eax, eax
.text:00403887                 mov     ecx, eax
.text:00403889                 jz      short loc_4038A0
.text:0040388B
.text:0040388B loc_40388B:                             ; CODE XREF: sub_403850+52↓j
.text:0040388B                 mov     ebx, [esp+1Ch+var_8]
.text:0040388F                 mov     eax, ecx
.text:00403891                 mov     esi, [esp+1Ch+var_4]
.text:00403895                 add     esp, 1Ch
.text:00403898                 retn
.text:00403898 ; ---------------------------------------------------------------------------
.text:00403899                 align 10h
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_403850+39↑j
.text:004038A0                 test    esi, esi
.text:004038A2                 jz      short loc_40388B
.text:004038A4
.text:004038A4 loc_4038A4:                             ; CODE XREF: sub_403850+22↑j
.text:004038A4                 call    sub_405370
.text:004038A4 sub_403850      endp
.text:004038A4
.text:004038A4 ; ---------------------------------------------------------------------------
.text:004038A9                 align 10h
.text:004038B0
.text:004038B0 ; =============== S U B R O U T I N E =======================================
.text:004038B0
.text:004038B0
.text:004038B0 ; int __cdecl sub_4038B0(void *, size_t)
.text:004038B0 sub_4038B0      proc near               ; CODE XREF: sub_404C80+5B↓p
.text:004038B0
.text:004038B0 Block           = dword ptr -0Ch
.text:004038B0 Size            = dword ptr -8
.text:004038B0 var_4           = dword ptr -4
.text:004038B0 arg_0           = dword ptr  4
.text:004038B0 arg_4           = dword ptr  8
.text:004038B0
.text:004038B0                 sub     esp, 0Ch
.text:004038B3                 mov     edx, [esp+0Ch+arg_0]
.text:004038B7                 mov     [esp+0Ch+var_4], ebx
.text:004038BB                 mov     ebx, [esp+0Ch+arg_4]
.text:004038BF                 mov     [esp+0Ch+Block], edx ; Block
.text:004038C2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004038C6                 call    realloc
.text:004038CB                 test    eax, eax
.text:004038CD                 jz      short loc_4038D7
.text:004038CF
.text:004038CF loc_4038CF:                             ; CODE XREF: sub_4038B0+29↓j
.text:004038CF                 mov     ebx, [esp+0Ch+var_4]
.text:004038D3                 add     esp, 0Ch
.text:004038D6                 retn
.text:004038D7 ; ---------------------------------------------------------------------------
.text:004038D7
.text:004038D7 loc_4038D7:                             ; CODE XREF: sub_4038B0+1D↑j
.text:004038D7                 test    ebx, ebx
.text:004038D9                 jz      short loc_4038CF
.text:004038DB                 call    sub_405370
.text:004038DB sub_4038B0      endp
.text:004038DB
.text:004038E0
.text:004038E0 ; =============== S U B R O U T I N E =======================================
.text:004038E0
.text:004038E0 ; Attributes: thunk
.text:004038E0
.text:004038E0 ; int __cdecl sub_4038E0(void *, int, int)
.text:004038E0 sub_4038E0      proc near               ; CODE XREF: sub_4034B0+163↑p
.text:004038E0                                         ; .text:0040378E↑p
.text:004038E0                 jmp     sub_403A30
.text:004038E0 sub_4038E0      endp
.text:004038E0
.text:004038E0 ; ---------------------------------------------------------------------------
.text:004038E5                 align 10h
.text:004038F0                 sub     esp, 0Ch
.text:004038F3                 mov     edx, [esp+14h]
.text:004038F7                 mov     dword ptr [esp+8], 1
.text:004038FF                 mov     [esp+4], edx
.text:00403903                 mov     edx, [esp+10h]
.text:00403907                 mov     [esp], edx
.text:0040390A                 call    sub_403A30
.text:0040390F                 add     esp, 0Ch
.text:00403912                 retn
.text:00403912 ; ---------------------------------------------------------------------------
.text:00403913                 align 10h
.text:00403920                 sub     esp, 1Ch
.text:00403923                 mov     [esp+18h], ebx
.text:00403927                 mov     ebx, [esp+20h]
.text:0040392B                 mov     [esp], ebx
.text:0040392E                 call    malloc
.text:00403933                 test    eax, eax
.text:00403935                 jz      short loc_403953
.text:00403937
.text:00403937 loc_403937:                             ; CODE XREF: .text:00403955↓j
.text:00403937                 mov     [esp+8], ebx
.text:0040393B                 mov     dword ptr [esp+4], 0
.text:00403943                 mov     [esp], eax
.text:00403946                 call    memset
.text:0040394B                 mov     ebx, [esp+18h]
.text:0040394F                 add     esp, 1Ch
.text:00403952                 retn
.text:00403953 ; ---------------------------------------------------------------------------
.text:00403953
.text:00403953 loc_403953:                             ; CODE XREF: .text:00403935↑j
.text:00403953                 test    ebx, ebx
.text:00403955                 jz      short loc_403937
.text:00403957                 call    sub_405370
.text:00403957 ; ---------------------------------------------------------------------------
.text:0040395C                 align 10h
.text:00403960                 sub     esp, 0Ch
.text:00403963                 xor     edx, edx
.text:00403965                 mov     ecx, [esp+14h]
.text:00403969                 mov     [esp+8], ebx
.text:0040396D                 mov     eax, 0FFFFFFFFh
.text:00403972                 mov     ebx, [esp+10h]
.text:00403976                 div     ecx
.text:00403978                 cmp     eax, ebx
.text:0040397A                 jb      short loc_403998
.text:0040397C                 mov     [esp+4], ecx
.text:00403980                 mov     [esp], ebx
.text:00403983                 call    calloc
.text:00403988                 test    eax, eax
.text:0040398A                 jz      short loc_403994
.text:0040398C
.text:0040398C loc_40398C:                             ; CODE XREF: .text:00403996↓j
.text:0040398C                 mov     ebx, [esp+8]
.text:00403990                 add     esp, 0Ch
.text:00403993                 retn
.text:00403994 ; ---------------------------------------------------------------------------
.text:00403994
.text:00403994 loc_403994:                             ; CODE XREF: .text:0040398A↑j
.text:00403994                 test    ebx, ebx
.text:00403996                 jz      short loc_40398C
.text:00403998
.text:00403998 loc_403998:                             ; CODE XREF: .text:0040397A↑j
.text:00403998                 call    sub_405370
.text:00403998 ; ---------------------------------------------------------------------------
.text:0040399D                 align 10h
.text:004039A0                 sub     esp, 1Ch
.text:004039A3                 mov     [esp+18h], ebx
.text:004039A7                 mov     ebx, [esp+24h]
.text:004039AB                 mov     [esp], ebx
.text:004039AE                 call    malloc
.text:004039B3                 test    eax, eax
.text:004039B5                 mov     edx, eax
.text:004039B7                 jz      short loc_4039D5
.text:004039B9
.text:004039B9 loc_4039B9:                             ; CODE XREF: .text:004039D7↓j
.text:004039B9                 mov     [esp+8], ebx
.text:004039BD                 mov     ecx, [esp+20h]
.text:004039C1                 mov     [esp], edx
.text:004039C4                 mov     [esp+4], ecx
.text:004039C8                 call    memcpy
.text:004039CD                 mov     ebx, [esp+18h]
.text:004039D1                 add     esp, 1Ch
.text:004039D4                 retn
.text:004039D5 ; ---------------------------------------------------------------------------
.text:004039D5
.text:004039D5 loc_4039D5:                             ; CODE XREF: .text:004039B7↑j
.text:004039D5                 test    ebx, ebx
.text:004039D7                 jz      short loc_4039B9
.text:004039D9                 call    sub_405370
.text:004039D9 ; ---------------------------------------------------------------------------
.text:004039DE                 align 10h
.text:004039E0
.text:004039E0 ; =============== S U B R O U T I N E =======================================
.text:004039E0
.text:004039E0
.text:004039E0 ; int __cdecl sub_4039E0(char *)
.text:004039E0 sub_4039E0      proc near               ; CODE XREF: sub_401BC0+83↑p
.text:004039E0                                         ; sub_401BC0+297↑p
.text:004039E0
.text:004039E0 Str             = dword ptr -1Ch
.text:004039E0 Src             = dword ptr -18h
.text:004039E0 Size            = dword ptr -14h
.text:004039E0 var_8           = dword ptr -8
.text:004039E0 var_4           = dword ptr -4
.text:004039E0 arg_0           = dword ptr  4
.text:004039E0
.text:004039E0                 sub     esp, 1Ch
.text:004039E3                 mov     [esp+1Ch+var_4], esi
.text:004039E7                 mov     esi, [esp+1Ch+arg_0]
.text:004039EB                 mov     [esp+1Ch+var_8], ebx
.text:004039EF                 mov     [esp+1Ch+Str], esi ; Str
.text:004039F2                 call    strlen
.text:004039F7                 lea     ebx, [eax+1]
.text:004039FA                 mov     [esp+1Ch+Str], ebx ; Size
.text:004039FD                 call    malloc
.text:00403A02                 test    eax, eax
.text:00403A04                 jz      short loc_403A22
.text:00403A06
.text:00403A06 loc_403A06:                             ; CODE XREF: sub_4039E0+44↓j
.text:00403A06                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403A0A                 mov     [esp+1Ch+Src], esi ; Src
.text:00403A0E                 mov     [esp+1Ch+Str], eax ; void *
.text:00403A11                 call    memcpy
.text:00403A16                 mov     ebx, [esp+1Ch+var_8]
.text:00403A1A                 mov     esi, [esp+1Ch+var_4]
.text:00403A1E                 add     esp, 1Ch
.text:00403A21                 retn
.text:00403A22 ; ---------------------------------------------------------------------------
.text:00403A22
.text:00403A22 loc_403A22:                             ; CODE XREF: sub_4039E0+24↑j
.text:00403A22                 test    ebx, ebx
.text:00403A24                 jz      short loc_403A06
.text:00403A26                 call    sub_405370
.text:00403A26 sub_4039E0      endp
.text:00403A26
.text:00403A26 ; ---------------------------------------------------------------------------
.text:00403A2B                 align 10h
.text:00403A30
.text:00403A30 ; =============== S U B R O U T I N E =======================================
.text:00403A30
.text:00403A30
.text:00403A30 ; int __cdecl sub_403A30(void *, int, int)
.text:00403A30 sub_403A30      proc near               ; CODE XREF: sub_4038E0↑j
.text:00403A30                                         ; .text:0040390A↑p
.text:00403A30
.text:00403A30 Block           = dword ptr -1Ch
.text:00403A30 Size            = dword ptr -18h
.text:00403A30 var_C           = dword ptr -0Ch
.text:00403A30 var_8           = dword ptr -8
.text:00403A30 var_4           = dword ptr -4
.text:00403A30 arg_0           = dword ptr  4
.text:00403A30 arg_4           = dword ptr  8
.text:00403A30 arg_8           = dword ptr  0Ch
.text:00403A30
.text:00403A30                 sub     esp, 1Ch
.text:00403A33                 mov     [esp+1Ch+var_8], esi
.text:00403A37                 mov     esi, [esp+1Ch+arg_0]
.text:00403A3B                 mov     [esp+1Ch+var_4], edi
.text:00403A3F                 mov     edi, [esp+1Ch+arg_4]
.text:00403A43                 test    esi, esi
.text:00403A45                 mov     [esp+1Ch+var_C], ebx
.text:00403A49                 mov     ecx, [edi]
.text:00403A4B                 mov     ebx, [esp+1Ch+arg_8]
.text:00403A4F                 jz      short loc_403A90
.text:00403A51                 xor     edx, edx
.text:00403A53                 mov     eax, 7FFFFFFFh
.text:00403A58                 div     ebx
.text:00403A5A                 cmp     eax, ecx
.text:00403A5C                 jb      short loc_403A89
.text:00403A5E                 add     ecx, ecx
.text:00403A60
.text:00403A60 loc_403A60:                             ; CODE XREF: sub_403A30+62↓j
.text:00403A60                                         ; sub_403A30+71↓j ...
.text:00403A60                 mov     [edi], ecx
.text:00403A62                 imul    ebx, ecx
.text:00403A65                 mov     [esp+1Ch+Block], esi ; Block
.text:00403A68                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403A6C                 call    realloc
.text:00403A71                 test    eax, eax
.text:00403A73                 jz      short loc_403A85
.text:00403A75
.text:00403A75 loc_403A75:                             ; CODE XREF: sub_403A30+57↓j
.text:00403A75                 mov     ebx, [esp+1Ch+var_C]
.text:00403A79                 mov     esi, [esp+1Ch+var_8]
.text:00403A7D                 mov     edi, [esp+1Ch+var_4]
.text:00403A81                 add     esp, 1Ch
.text:00403A84                 retn
.text:00403A85 ; ---------------------------------------------------------------------------
.text:00403A85
.text:00403A85 loc_403A85:                             ; CODE XREF: sub_403A30+43↑j
.text:00403A85                 test    ebx, ebx
.text:00403A87                 jz      short loc_403A75
.text:00403A89
.text:00403A89 loc_403A89:                             ; CODE XREF: sub_403A30+2C↑j
.text:00403A89                 call    sub_405370
.text:00403A89 ; ---------------------------------------------------------------------------
.text:00403A8E                 align 10h
.text:00403A90
.text:00403A90 loc_403A90:                             ; CODE XREF: sub_403A30+1F↑j
.text:00403A90                 test    ecx, ecx
.text:00403A92                 jnz     short loc_403A60
.text:00403A94                 xor     edx, edx
.text:00403A96                 mov     eax, 40h ; '@'
.text:00403A9B                 div     ebx
.text:00403A9D                 test    eax, eax
.text:00403A9F                 mov     ecx, eax
.text:00403AA1                 jnz     short loc_403A60
.text:00403AA3                 mov     ecx, 1
.text:00403AA8                 jmp     short loc_403A60
.text:00403AA8 sub_403A30      endp
.text:00403AA8
.text:00403AA8 ; ---------------------------------------------------------------------------
.text:00403AAA                 align 10h
.text:00403AB0 aLiteral        db 'literal',0
.text:00403AB8 aShell          db 'shell',0
.text:00403ABE aShellAlways    db 'shell-always',0
.text:00403ACB aC              db 'c',0
.text:00403ACD aEscape         db 'escape',0           ; DATA XREF: .text:00403B00↓o
.text:00403AD4 aLocale         db 'locale',0           ; DATA XREF: .text:00403B04↓o
.text:00403ADB aClocale        db 'clocale',0          ; DATA XREF: .text:00403B08↓o
.text:00403AE3                 align 10h
.text:00403AF0                 mov     al, 3Ah ; ':'
.text:00403AF2                 inc     eax
.text:00403AF3                 add     [eax-41FFBFC6h], bh
.text:00403AF9                 cmp     al, [eax+0]
.text:00403AFC                 retf
.text:00403AFC ; ---------------------------------------------------------------------------
.text:00403AFD                 db 3Ah, 40h, 0
.text:00403B00                 dd offset aEscape       ; "escape"
.text:00403B04                 dd offset aLocale       ; "locale"
.text:00403B08                 dd offset aClocale      ; "clocale"
.text:00403B0C                 dd 2 dup(0)
.text:00403B14                 dd 1, 2, 3, 4, 5, 6
.text:00403B2C asc_403B2C:                             ; DATA XREF: sub_403B40+7E↓o
.text:00403B2C                                         ; sub_403B40+A39↓o ...
.text:00403B2C                 text "UTF-16LE", '"',27h,'`'
.text:00403B32                 align 10h
.text:00403B40
.text:00403B40 ; =============== S U B R O U T I N E =======================================
.text:00403B40
.text:00403B40
.text:00403B40 ; int __cdecl sub_403B40(int, int, char *Str, int, int, int)
.text:00403B40 sub_403B40      proc near               ; CODE XREF: sub_403B40+43A↓p
.text:00403B40                                         ; .text:00404703↓p ...
.text:00403B40
.text:00403B40 C               = dword ptr -4Ch
.text:00403B40 Type            = dword ptr -48h
.text:00403B40 SizeInBytes     = dword ptr -44h
.text:00403B40 State           = dword ptr -40h
.text:00403B40 var_3C          = dword ptr -3Ch
.text:00403B40 var_38          = dword ptr -38h
.text:00403B40 var_34          = dword ptr -34h
.text:00403B40 var_30          = dword ptr -30h
.text:00403B40 var_29          = byte ptr -29h
.text:00403B40 var_28          = dword ptr -28h
.text:00403B40 var_22          = byte ptr -22h
.text:00403B40 var_21          = byte ptr -21h
.text:00403B40 var_20          = dword ptr -20h
.text:00403B40 var_1C          = dword ptr -1Ch
.text:00403B40 var_18          = mbstate_t ptr -18h
.text:00403B40 arg_0           = dword ptr  4
.text:00403B40 arg_4           = dword ptr  8
.text:00403B40 Str             = dword ptr  0Ch
.text:00403B40 arg_C           = dword ptr  10h
.text:00403B40 arg_10          = dword ptr  14h
.text:00403B40 arg_14          = dword ptr  18h
.text:00403B40
.text:00403B40                 push    ebp
.text:00403B41                 push    edi
.text:00403B42                 push    esi
.text:00403B43                 push    ebx
.text:00403B44                 sub     esp, 3Ch
.text:00403B47                 mov     edx, ds:__mb_cur_max
.text:00403B4D                 mov     [esp+4Ch+var_34], 0
.text:00403B55                 mov     [esp+4Ch+var_1C], 0
.text:00403B5D                 cmp     dword ptr [edx], 1
.text:00403B60                 mov     [esp+4Ch+var_20], 0
.text:00403B68                 mov     [esp+4Ch+var_21], 0
.text:00403B6D                 setz    [esp+4Ch+var_22]
.text:00403B72                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403B77                 ja      short def_403B7D ; jumptable 00403B7D default case, cases 0,1
.text:00403B79                 mov     edx, [esp+4Ch+arg_10]
.text:00403B7D                 jmp     ds:jpt_403B7D[edx*4] ; switch jump
.text:00403B7D ; ---------------------------------------------------------------------------
.text:00403B84 jpt_403B7D      dd offset def_403B7D    ; DATA XREF: sub_403B40+3D↑r
.text:00403B84                 dd offset def_403B7D    ; jump table for switch statement
.text:00403B84                 dd offset loc_4044C5
.text:00403B84                 dd offset loc_403BA0
.text:00403B84                 dd offset loc_4044EB
.text:00403B84                 dd offset loc_4044F5
.text:00403B84                 dd offset loc_4044F5
.text:00403BA0 ; ---------------------------------------------------------------------------
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_403B40+3D↑j
.text:00403BA0                                         ; DATA XREF: sub_403B40:jpt_403B7D↑o
.text:00403BA0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403B7D case 3
.text:00403BA4                 cmp     [esp+4Ch+var_34], eax
.text:00403BA8                 jnb     short loc_403BB1
.text:00403BAA                 mov     ebx, [esp+4Ch+arg_0]
.text:00403BAE                 mov     byte ptr [ebx], 22h ; '"'
.text:00403BB1
.text:00403BB1 loc_403BB1:                             ; CODE XREF: sub_403B40+68↑j
.text:00403BB1                 mov     [esp+4Ch+var_34], 1
.text:00403BB9                 mov     [esp+4Ch+var_21], 1
.text:00403BBE                 mov     [esp+4Ch+var_1C], offset asc_403B2C ; "\"'`"
.text:00403BC6
.text:00403BC6 loc_403BC6:                             ; CODE XREF: sub_403B40+9A6↓j
.text:00403BC6                 mov     [esp+4Ch+var_20], 1
.text:00403BCE
.text:00403BCE def_403B7D:                             ; CODE XREF: sub_403B40+37↑j
.text:00403BCE                                         ; sub_403B40+3D↑j ...
.text:00403BCE                 xor     ebp, ebp        ; jumptable 00403B7D default case, cases 0,1
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403B40+3DB↓j
.text:00403BD0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403BD5                 jz      loc_4044B7
.text:00403BDB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403BDF
.text:00403BDF loc_403BDF:                             ; CODE XREF: sub_403B40+980↓j
.text:00403BDF                 jz      loc_40444E
.text:00403BE5                 cmp     [esp+4Ch+var_21], 0
.text:00403BEA                 jz      short loc_403C30
.text:00403BEC                 mov     esi, [esp+4Ch+var_20]
.text:00403BF0                 test    esi, esi
.text:00403BF2                 jz      short loc_403C30
.text:00403BF4                 mov     ecx, [esp+4Ch+var_20]
.text:00403BF8                 lea     edi, [ecx+ebp]
.text:00403BFB                 cmp     edi, [esp+4Ch+arg_C]
.text:00403BFF                 ja      short loc_403C30
.text:00403C01                 cld
.text:00403C02                 mov     ebx, [esp+4Ch+Str]
.text:00403C06                 mov     edi, [esp+4Ch+var_1C]
.text:00403C0A                 add     ebx, ebp
.text:00403C0C                 mov     esi, ebx
.text:00403C0E                 cmp     ecx, ecx
.text:00403C10                 repe cmpsb
.text:00403C12                 jnz     short loc_403C30
.text:00403C14                 mov     edx, [esp+4Ch+arg_4]
.text:00403C18                 cmp     [esp+4Ch+var_34], edx
.text:00403C1C                 jnb     short loc_403C2A
.text:00403C1E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403C22                 mov     eax, [esp+4Ch+var_34]
.text:00403C26                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00403C2A
.text:00403C2A loc_403C2A:                             ; CODE XREF: sub_403B40+DC↑j
.text:00403C2A                 inc     [esp+4Ch+var_34]
.text:00403C2E                 mov     esi, esi
.text:00403C30
.text:00403C30 loc_403C30:                             ; CODE XREF: sub_403B40+AA↑j
.text:00403C30                                         ; sub_403B40+B2↑j ...
.text:00403C30                 mov     edi, [esp+4Ch+Str]
.text:00403C34                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403C39                 movzx   eax, bl
.text:00403C3C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00403C3F                 ja      def_403C45      ; jumptable 00403C45 default case, cases 1-6,14-31,64
.text:00403C45                 jmp     ds:jpt_403C45[eax*4] ; switch jump
.text:00403C45 ; ---------------------------------------------------------------------------
.text:00403C4C jpt_403C45      dd offset loc_403E48, offset def_403C45, offset def_403C45
.text:00403C4C                                         ; DATA XREF: sub_403B40+105↑r
.text:00403C4C                 dd offset def_403C45, offset def_403C45, offset def_403C45 ; jump table for switch statement
.text:00403C4C                 dd offset def_403C45, offset loc_403F20, offset loc_403F3E
.text:00403C4C                 dd offset loc_403F42, offset loc_403F87, offset loc_403F8B
.text:00403C4C                 dd offset loc_403F8F, offset loc_403F93, offset def_403C45
.text:00403C4C                 dd offset def_403C45, offset def_403C45, offset def_403C45
.text:00403C4C                 dd offset def_403C45, offset def_403C45, offset def_403C45
.text:00403C4C                 dd offset def_403C45, offset def_403C45, offset def_403C45
.text:00403C4C                 dd offset def_403C45, offset def_403C45, offset def_403C45
.text:00403C4C                 dd offset def_403C45, offset def_403C45, offset def_403C45
.text:00403C4C                 dd offset def_403C45, offset def_403C45, offset loc_404418
.text:00403C4C                 dd offset loc_404418, offset loc_404418, offset loc_40443A
.text:00403C4C                 dd offset loc_404418, offset def_404042, offset loc_404418
.text:00403C4C                 dd offset loc_403F97, offset loc_404418, offset loc_404418
.text:00403C4C                 dd offset loc_404418, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset loc_404418
.text:00403C4C                 dd offset loc_404418, offset loc_404418, offset loc_404418
.text:00403C4C                 dd offset loc_403FFC, offset def_403C45, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset loc_404418, offset loc_404411
.text:00403C4C                 dd offset def_404042, offset loc_404418, offset def_404042
.text:00403C4C                 dd offset loc_404418, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset def_404042, offset def_404042, offset def_404042
.text:00403C4C                 dd offset loc_404428, offset loc_404418, offset loc_404428
.text:00403C4C                 dd offset loc_40443A
.text:00403E48 ; ---------------------------------------------------------------------------
.text:00403E48
.text:00403E48 loc_403E48:                             ; CODE XREF: sub_403B40+105↑j
.text:00403E48                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403E48                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403C45 case 0
.text:00403E4D                 lea     eax, [ebp+1]
.text:00403E50                 jz      loc_403F00
.text:00403E56                 mov     esi, [esp+4Ch+arg_4]
.text:00403E5A                 cmp     [esp+4Ch+var_34], esi
.text:00403E5E                 jnb     short loc_403E6C
.text:00403E60                 mov     eax, [esp+4Ch+arg_0]
.text:00403E64                 mov     ebx, [esp+4Ch+var_34]
.text:00403E68                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403E6C
.text:00403E6C loc_403E6C:                             ; CODE XREF: sub_403B40+31E↑j
.text:00403E6C                 inc     [esp+4Ch+var_34]
.text:00403E70                 mov     edx, [esp+4Ch+arg_4]
.text:00403E74                 cmp     [esp+4Ch+var_34], edx
.text:00403E78                 jnb     short loc_403E86
.text:00403E7A                 mov     edi, [esp+4Ch+arg_0]
.text:00403E7E                 mov     ecx, [esp+4Ch+var_34]
.text:00403E82                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403E86
.text:00403E86 loc_403E86:                             ; CODE XREF: sub_403B40+338↑j
.text:00403E86                 inc     [esp+4Ch+var_34]
.text:00403E8A                 mov     esi, [esp+4Ch+arg_4]
.text:00403E8E                 cmp     [esp+4Ch+var_34], esi
.text:00403E92                 jnb     short loc_403EA0
.text:00403E94                 mov     ebx, [esp+4Ch+arg_0]
.text:00403E98                 mov     eax, [esp+4Ch+var_34]
.text:00403E9C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403EA0
.text:00403EA0 loc_403EA0:                             ; CODE XREF: sub_403B40+352↑j
.text:00403EA0                 inc     [esp+4Ch+var_34]
.text:00403EA4                 mov     bl, 30h ; '0'
.text:00403EA6                 lea     esi, [esi+0]
.text:00403EA9                 lea     edi, [edi+0]
.text:00403EB0
.text:00403EB0 def_404042:                             ; CODE XREF: sub_403B40+105↑j
.text:00403EB0                                         ; sub_403B40+463↓j ...
.text:00403EB0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:00403EB0                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:00403EB5                 lea     eax, [ebp+1]
.text:00403EB8                 jz      short loc_403F00
.text:00403EBA                 mov     cl, bl
.text:00403EBC                 mov     edi, [esp+4Ch+arg_14]
.text:00403EC0                 mov     esi, 1
.text:00403EC5                 shr     cl, 5
.text:00403EC8                 movzx   edx, cl
.text:00403ECB                 mov     ecx, ebx
.text:00403ECD                 and     ecx, 1Fh
.text:00403ED0                 shl     esi, cl
.text:00403ED2                 test    [edi+edx*4+4], esi
.text:00403ED6                 jz      short loc_403EF2
.text:00403ED8
.text:00403ED8 loc_403ED8:                             ; CODE XREF: sub_403B40+3FC↓j
.text:00403ED8                 mov     edx, [esp+4Ch+arg_4]
.text:00403EDC                 cmp     [esp+4Ch+var_34], edx
.text:00403EE0                 jnb     short loc_403EEE
.text:00403EE2                 mov     edi, [esp+4Ch+arg_0]
.text:00403EE6                 mov     esi, [esp+4Ch+var_34]
.text:00403EEA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403EEE
.text:00403EEE loc_403EEE:                             ; CODE XREF: sub_403B40+3A0↑j
.text:00403EEE                 inc     [esp+4Ch+var_34]
.text:00403EF2
.text:00403EF2 loc_403EF2:                             ; CODE XREF: sub_403B40+396↑j
.text:00403EF2                 lea     eax, [ebp+1]
.text:00403EF5                 lea     esi, [esi+0]
.text:00403EF9                 lea     edi, [edi+0]
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403B40+310↑j
.text:00403F00                                         ; sub_403B40+378↑j ...
.text:00403F00                 mov     ebp, [esp+4Ch+arg_4]
.text:00403F04                 cmp     [esp+4Ch+var_34], ebp
.text:00403F08                 jnb     short loc_403F15
.text:00403F0A                 mov     edx, [esp+4Ch+arg_0]
.text:00403F0E                 mov     ecx, [esp+4Ch+var_34]
.text:00403F12                 mov     [ecx+edx], bl
.text:00403F15
.text:00403F15 loc_403F15:                             ; CODE XREF: sub_403B40+3C8↑j
.text:00403F15                 inc     [esp+4Ch+var_34]
.text:00403F19                 mov     ebp, eax
.text:00403F1B                 jmp     loc_403BD0
.text:00403F20 ; ---------------------------------------------------------------------------
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_403B40+105↑j
.text:00403F20                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403F20                 mov     dl, 61h ; 'a'   ; jumptable 00403C45 case 7
.text:00403F22                 lea     esi, [esi+0]
.text:00403F29                 lea     edi, [edi+0]
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_403B40+400↓j
.text:00403F30                                         ; sub_403B40+409↓j ...
.text:00403F30                 cmp     [esp+4Ch+var_21], 0
.text:00403F35                 lea     eax, [ebp+1]
.text:00403F38                 jz      short loc_403F00
.text:00403F3A                 mov     bl, dl
.text:00403F3C                 jmp     short loc_403ED8
.text:00403F3E ; ---------------------------------------------------------------------------
.text:00403F3E
.text:00403F3E loc_403F3E:                             ; CODE XREF: sub_403B40+105↑j
.text:00403F3E                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403F3E                 mov     dl, 62h ; 'b'   ; jumptable 00403C45 case 8
.text:00403F40                 jmp     short loc_403F30
.text:00403F42 ; ---------------------------------------------------------------------------
.text:00403F42
.text:00403F42 loc_403F42:                             ; CODE XREF: sub_403B40+105↑j
.text:00403F42                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403F42                 mov     dl, 74h ; 't'   ; jumptable 00403C45 case 9
.text:00403F44
.text:00403F44 loc_403F44:                             ; CODE XREF: sub_403B40+449↓j
.text:00403F44                                         ; sub_403B40+455↓j ...
.text:00403F44                 cmp     [esp+4Ch+arg_10], 1
.text:00403F49                 jnz     short loc_403F30
.text:00403F4B
.text:00403F4B loc_403F4B:                             ; CODE XREF: sub_403B40+45C↓j
.text:00403F4B                                         ; sub_403B40+4C1↓j ...
.text:00403F4B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404312 cases 91,92,94,96,124
.text:00403F53                 mov     eax, [esp+4Ch+arg_14]
.text:00403F57                 mov     edx, [esp+4Ch+arg_C]
.text:00403F5B                 mov     ecx, [esp+4Ch+Str]
.text:00403F5F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403F63                 mov     [esp+4Ch+var_38], eax ; int
.text:00403F67                 mov     ebp, [esp+4Ch+arg_0]
.text:00403F6B                 mov     [esp+4Ch+State], edx ; int
.text:00403F6F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403F73                 mov     [esp+4Ch+Type], ebx ; int
.text:00403F77                 mov     [esp+4Ch+C], ebp ; int
.text:00403F7A                 call    sub_403B40
.text:00403F7F
.text:00403F7F loc_403F7F:                             ; CODE XREF: sub_403B40+972↓j
.text:00403F7F                 add     esp, 3Ch
.text:00403F82                 pop     ebx
.text:00403F83                 pop     esi
.text:00403F84                 pop     edi
.text:00403F85                 pop     ebp
.text:00403F86                 retn
.text:00403F87 ; ---------------------------------------------------------------------------
.text:00403F87
.text:00403F87 loc_403F87:                             ; CODE XREF: sub_403B40+105↑j
.text:00403F87                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403F87                 mov     dl, 6Eh ; 'n'   ; jumptable 00403C45 case 10
.text:00403F89                 jmp     short loc_403F44
.text:00403F8B ; ---------------------------------------------------------------------------
.text:00403F8B
.text:00403F8B loc_403F8B:                             ; CODE XREF: sub_403B40+105↑j
.text:00403F8B                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403F8B                 mov     dl, 76h ; 'v'   ; jumptable 00403C45 case 11
.text:00403F8D                 jmp     short loc_403F30
.text:00403F8F ; ---------------------------------------------------------------------------
.text:00403F8F
.text:00403F8F loc_403F8F:                             ; CODE XREF: sub_403B40+105↑j
.text:00403F8F                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403F8F                 mov     dl, 66h ; 'f'   ; jumptable 00403C45 case 12
.text:00403F91                 jmp     short loc_403F30
.text:00403F93 ; ---------------------------------------------------------------------------
.text:00403F93
.text:00403F93 loc_403F93:                             ; CODE XREF: sub_403B40+105↑j
.text:00403F93                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403F93                 mov     dl, 72h ; 'r'   ; jumptable 00403C45 case 13
.text:00403F95                 jmp     short loc_403F44
.text:00403F97 ; ---------------------------------------------------------------------------
.text:00403F97
.text:00403F97 loc_403F97:                             ; CODE XREF: sub_403B40+105↑j
.text:00403F97                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403F97                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403C45 case 39
.text:00403F9C                 jz      short loc_403F4B ; jumptable 00404312 cases 91,92,94,96,124
.text:00403F9E                 cmp     [esp+4Ch+arg_10], 2
.text:00403FA3                 jnz     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:00403FA3                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:00403FA9                 mov     edx, [esp+4Ch+arg_4]
.text:00403FAD                 cmp     [esp+4Ch+var_34], edx
.text:00403FB1                 jnb     short loc_403FBF
.text:00403FB3                 mov     ecx, [esp+4Ch+arg_0]
.text:00403FB7                 mov     edi, [esp+4Ch+var_34]
.text:00403FBB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403FBF
.text:00403FBF loc_403FBF:                             ; CODE XREF: sub_403B40+471↑j
.text:00403FBF                 inc     [esp+4Ch+var_34]
.text:00403FC3                 mov     eax, [esp+4Ch+arg_4]
.text:00403FC7                 cmp     [esp+4Ch+var_34], eax
.text:00403FCB                 jnb     short loc_403FD9
.text:00403FCD                 mov     esi, [esp+4Ch+arg_0]
.text:00403FD1                 mov     edx, [esp+4Ch+var_34]
.text:00403FD5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403FD9
.text:00403FD9 loc_403FD9:                             ; CODE XREF: sub_403B40+48B↑j
.text:00403FD9                 inc     [esp+4Ch+var_34]
.text:00403FDD                 mov     edi, [esp+4Ch+arg_4]
.text:00403FE1                 cmp     [esp+4Ch+var_34], edi
.text:00403FE5                 jnb     short loc_403FF3
.text:00403FE7                 mov     ecx, [esp+4Ch+arg_0]
.text:00403FEB                 mov     eax, [esp+4Ch+var_34]
.text:00403FEF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403FF3
.text:00403FF3 loc_403FF3:                             ; CODE XREF: sub_403B40+4A5↑j
.text:00403FF3                                         ; sub_403B40+5C4↓j ...
.text:00403FF3                 inc     [esp+4Ch+var_34]
.text:00403FF7                 jmp     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:00403FF7                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:00403FFC ; ---------------------------------------------------------------------------
.text:00403FFC
.text:00403FFC loc_403FFC:                             ; CODE XREF: sub_403B40+105↑j
.text:00403FFC                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00403FFC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403C45 case 63
.text:00404001                 jz      loc_403F4B      ; jumptable 00404312 cases 91,92,94,96,124
.text:00404007                 cmp     [esp+4Ch+arg_10], 3
.text:0040400C                 jnz     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:0040400C                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:00404012                 lea     edx, [ebp+2]
.text:00404015                 cmp     edx, [esp+4Ch+arg_C]
.text:00404019                 jnb     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:00404019                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:0040401F                 mov     esi, [esp+4Ch+Str]
.text:00404023                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404028                 jnz     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:00404028                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:0040402E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404033                 movsx   eax, cl
.text:00404036                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404039                 cmp     eax, 1Dh
.text:0040403C                 ja      def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:0040403C                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:00404042                 jmp     ds:jpt_404042[eax*4] ; switch jump
.text:00404042 ; ---------------------------------------------------------------------------
.text:00404049                 align 4
.text:0040404C jpt_404042      dd offset loc_4040C4    ; DATA XREF: sub_403B40+502↑r
.text:0040404C                 dd offset def_404042    ; jump table for switch statement
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset loc_4040C4
.text:0040404C                 dd offset loc_4040C4
.text:0040404C                 dd offset loc_4040C4
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset loc_4040C4
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset loc_4040C4
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset def_404042
.text:0040404C                 dd offset loc_4040C4
.text:0040404C                 dd offset loc_4040C4
.text:0040404C                 dd offset loc_4040C4
.text:004040C4 ; ---------------------------------------------------------------------------
.text:004040C4
.text:004040C4 loc_4040C4:                             ; CODE XREF: sub_403B40+502↑j
.text:004040C4                                         ; DATA XREF: sub_403B40:jpt_404042↑o
.text:004040C4                 mov     ebp, edx        ; jumptable 00404042 cases 33,39-41,45,47,60-62
.text:004040C6                 mov     bl, cl
.text:004040C8                 mov     edx, [esp+4Ch+arg_4]
.text:004040CC                 cmp     [esp+4Ch+var_34], edx
.text:004040D0                 jnb     short loc_4040DE
.text:004040D2                 mov     ecx, [esp+4Ch+arg_0]
.text:004040D6                 mov     edi, [esp+4Ch+var_34]
.text:004040DA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004040DE
.text:004040DE loc_4040DE:                             ; CODE XREF: sub_403B40+590↑j
.text:004040DE                 inc     [esp+4Ch+var_34]
.text:004040E2                 mov     eax, [esp+4Ch+arg_4]
.text:004040E6                 cmp     [esp+4Ch+var_34], eax
.text:004040EA                 jnb     short loc_4040F8
.text:004040EC                 mov     edx, [esp+4Ch+arg_0]
.text:004040F0                 mov     esi, [esp+4Ch+var_34]
.text:004040F4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004040F8
.text:004040F8 loc_4040F8:                             ; CODE XREF: sub_403B40+5AA↑j
.text:004040F8                 inc     [esp+4Ch+var_34]
.text:004040FC                 mov     edi, [esp+4Ch+arg_4]
.text:00404100                 cmp     [esp+4Ch+var_34], edi
.text:00404104                 jnb     loc_403FF3
.text:0040410A                 mov     eax, [esp+4Ch+arg_0]
.text:0040410E                 mov     ecx, [esp+4Ch+var_34]
.text:00404112                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404116                 jmp     loc_403FF3
.text:00404116 ; ---------------------------------------------------------------------------
.text:0040411B                 align 10h
.text:00404120
.text:00404120 def_403C45:                             ; CODE XREF: sub_403B40+FF↑j
.text:00404120                                         ; sub_403B40+105↑j
.text:00404120                                         ; DATA XREF: ...
.text:00404120                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403C45 default case, cases 1-6,14-31,64
.text:00404125                 jz      loc_404250
.text:0040412B                 mov     [esp+4Ch+var_28], 1
.text:00404133                 mov     esi, ds:__mb_cur_max
.text:00404139                 movzx   edx, bl
.text:0040413C                 cmp     dword ptr [esi], 1
.text:0040413F                 jz      loc_404234
.text:00404145                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040414D                 mov     [esp+4Ch+C], edx ; C
.text:00404150                 call    _isctype
.text:00404155
.text:00404155 loc_404155:                             ; CODE XREF: sub_403B40+705↓j
.text:00404155                 test    eax, eax
.text:00404157                 setnz   [esp+4Ch+var_29]
.text:0040415C
.text:0040415C loc_40415C:                             ; CODE XREF: sub_403B40+7A5↓j
.text:0040415C                 cmp     [esp+4Ch+var_21], 0
.text:00404161                 lea     eax, [ebp+1]
.text:00404164                 jz      loc_403F00
.text:0040416A                 cmp     [esp+4Ch+var_29], 0
.text:0040416F                 jnz     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:0040416F                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:00404175
.text:00404175 loc_404175:                             ; CODE XREF: sub_403B40+7AB↓j
.text:00404175                 mov     eax, [esp+4Ch+var_28]
.text:00404179                 lea     edx, [eax+ebp]
.text:0040417C                 lea     esi, [esi+0]
.text:00404180
.text:00404180 loc_404180:                             ; CODE XREF: sub_403B40+6EF↓j
.text:00404180                 cmp     [esp+4Ch+var_21], 0
.text:00404185                 jz      short loc_404200
.text:00404187                 cmp     [esp+4Ch+var_29], 0
.text:0040418C                 jnz     short loc_404200
.text:0040418E                 mov     edi, [esp+4Ch+arg_4]
.text:00404192                 cmp     [esp+4Ch+var_34], edi
.text:00404196                 jnb     short loc_4041A4
.text:00404198                 mov     esi, [esp+4Ch+arg_0]
.text:0040419C                 mov     eax, [esp+4Ch+var_34]
.text:004041A0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004041A4
.text:004041A4 loc_4041A4:                             ; CODE XREF: sub_403B40+656↑j
.text:004041A4                 inc     [esp+4Ch+var_34]
.text:004041A8                 mov     ecx, [esp+4Ch+arg_4]
.text:004041AC                 cmp     [esp+4Ch+var_34], ecx
.text:004041B0                 jnb     short loc_4041C5
.text:004041B2                 mov     cl, bl
.text:004041B4                 mov     esi, [esp+4Ch+arg_0]
.text:004041B8                 mov     edi, [esp+4Ch+var_34]
.text:004041BC                 shr     cl, 6
.text:004041BF                 add     cl, 30h ; '0'
.text:004041C2                 mov     [edi+esi], cl
.text:004041C5
.text:004041C5 loc_4041C5:                             ; CODE XREF: sub_403B40+670↑j
.text:004041C5                 inc     [esp+4Ch+var_34]
.text:004041C9                 mov     edi, [esp+4Ch+arg_4]
.text:004041CD                 cmp     [esp+4Ch+var_34], edi
.text:004041D1                 jnb     short loc_4041E9
.text:004041D3                 mov     cl, bl
.text:004041D5                 mov     esi, [esp+4Ch+arg_0]
.text:004041D9                 shr     cl, 3
.text:004041DC                 mov     edi, [esp+4Ch+var_34]
.text:004041E0                 and     cl, 7
.text:004041E3                 add     cl, 30h ; '0'
.text:004041E6                 mov     [edi+esi], cl
.text:004041E9
.text:004041E9 loc_4041E9:                             ; CODE XREF: sub_403B40+691↑j
.text:004041E9                 inc     [esp+4Ch+var_34]
.text:004041ED                 and     bl, 7
.text:004041F0                 add     bl, 30h ; '0'
.text:004041F3                 lea     esi, [esi+0]
.text:004041F9                 lea     edi, [edi+0]
.text:00404200
.text:00404200 loc_404200:                             ; CODE XREF: sub_403B40+645↑j
.text:00404200                                         ; sub_403B40+64C↑j
.text:00404200                 lea     eax, [ebp+1]
.text:00404203                 cmp     edx, eax
.text:00404205                 jbe     loc_403F00
.text:0040420B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040420F                 cmp     [esp+4Ch+var_34], ebp
.text:00404213                 jnb     short loc_404220
.text:00404215                 mov     ecx, [esp+4Ch+arg_0]
.text:00404219                 mov     edi, [esp+4Ch+var_34]
.text:0040421D                 mov     [edi+ecx], bl
.text:00404220
.text:00404220 loc_404220:                             ; CODE XREF: sub_403B40+6D3↑j
.text:00404220                 inc     [esp+4Ch+var_34]
.text:00404224                 mov     ebp, eax
.text:00404226                 mov     eax, [esp+4Ch+Str]
.text:0040422A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040422F                 jmp     loc_404180
.text:00404234 ; ---------------------------------------------------------------------------
.text:00404234
.text:00404234 loc_404234:                             ; CODE XREF: sub_403B40+5FF↑j
.text:00404234                 mov     ecx, ds:_pctype
.text:0040423A                 mov     edi, [ecx]
.text:0040423C                 movzx   eax, word ptr [edi+edx*2]
.text:00404240                 and     eax, 157h
.text:00404245                 jmp     loc_404155
.text:00404245 ; ---------------------------------------------------------------------------
.text:0040424A                 align 10h
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_403B40+5E5↑j
.text:00404250                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404255                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040425D                 mov     [esp+4Ch+var_28], 0
.text:00404265                 mov     [esp+4Ch+var_29], 1
.text:0040426A                 jz      loc_4043FC
.text:00404270
.text:00404270 loc_404270:                             ; CODE XREF: sub_403B40+8CC↓j
.text:00404270                 mov     ecx, [esp+4Ch+arg_C]
.text:00404274                 lea     edx, [esp+4Ch+var_18]
.text:00404278                 mov     edi, [esp+4Ch+Str]
.text:0040427C                 mov     [esp+4Ch+State], edx ; State
.text:00404280                 lea     esi, [esp+4Ch+var_18._State]
.text:00404284                 sub     ecx, ebp
.text:00404286                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040428A                 add     edi, ebp
.text:0040428C                 mov     [esp+4Ch+var_30], edi
.text:00404290                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404294                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404297                 call    mbrtowc
.text:0040429C                 test    eax, eax
.text:0040429E                 mov     edi, eax
.text:004042A0                 jz      short loc_4042E0
.text:004042A2                 cmp     eax, 0FFFFFFFFh
.text:004042A5                 jz      loc_4043F2
.text:004042AB                 cmp     eax, 0FFFFFFFEh
.text:004042AE                 jz      loc_4043B2
.text:004042B4                 cmp     [esp+4Ch+arg_10], 1
.text:004042B9                 jz      short loc_4042F0
.text:004042BB
.text:004042BB loc_4042BB:                             ; CODE XREF: sub_403B40+7B9↓j
.text:004042BB                                         ; sub_403B40+86D↓j
.text:004042BB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004042C0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004042C8                 mov     [esp+4Ch+C], ecx ; C
.text:004042CB                 call    iswctype
.text:004042D0                 test    eax, eax
.text:004042D2                 jnz     short loc_4042D9
.text:004042D4                 mov     [esp+4Ch+var_29], 0
.text:004042D9
.text:004042D9 loc_4042D9:                             ; CODE XREF: sub_403B40+792↑j
.text:004042D9                 mov     [esp+4Ch+var_28], edi
.text:004042DD                 lea     esi, [esi+0]
.text:004042E0
.text:004042E0 loc_4042E0:                             ; CODE XREF: sub_403B40+760↑j
.text:004042E0                                         ; sub_403B40+87B↓j ...
.text:004042E0                 cmp     [esp+4Ch+var_28], 1
.text:004042E5                 jbe     loc_40415C
.text:004042EB                 jmp     loc_404175
.text:004042F0 ; ---------------------------------------------------------------------------
.text:004042F0
.text:004042F0 loc_4042F0:                             ; CODE XREF: sub_403B40+779↑j
.text:004042F0                 cmp     [esp+4Ch+arg_10], eax
.text:004042F4                 mov     edx, 1
.text:004042F9                 jnb     short loc_4042BB
.text:004042FB
.text:004042FB loc_4042FB:                             ; CODE XREF: sub_403B40+867↓j
.text:004042FB                 mov     ecx, [esp+4Ch+Str]
.text:004042FF                 lea     esi, [edx+ebp]
.text:00404302                 movsx   eax, byte ptr [esi+ecx]
.text:00404306                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404309                 cmp     eax, 21h
.text:0040430C                 ja      def_404312      ; jumptable 00404312 default case, cases 93,95,97-123
.text:00404312                 jmp     ds:jpt_404312[eax*4] ; switch jump
.text:00404312 ; ---------------------------------------------------------------------------
.text:00404319                 align 4
.text:0040431C jpt_404312      dd offset loc_403F4B    ; DATA XREF: sub_403B40+7D2↑r
.text:0040431C                 dd offset loc_403F4B    ; jump table for switch statement
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset loc_403F4B
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset loc_403F4B
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset def_404312
.text:0040431C                 dd offset loc_403F4B
.text:004043A4 ; ---------------------------------------------------------------------------
.text:004043A4
.text:004043A4 def_404312:                             ; CODE XREF: sub_403B40+7CC↑j
.text:004043A4                                         ; sub_403B40+7D2↑j
.text:004043A4                                         ; DATA XREF: ...
.text:004043A4                 inc     edx             ; jumptable 00404312 default case, cases 93,95,97-123
.text:004043A5                 cmp     edx, edi
.text:004043A7                 jb      loc_4042FB
.text:004043AD                 jmp     loc_4042BB
.text:004043B2 ; ---------------------------------------------------------------------------
.text:004043B2
.text:004043B2 loc_4043B2:                             ; CODE XREF: sub_403B40+76E↑j
.text:004043B2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004043B6                 mov     [esp+4Ch+var_29], 0
.text:004043BB                 jnb     loc_4042E0
.text:004043C1                 mov     eax, [esp+4Ch+var_30]
.text:004043C5                 cmp     byte ptr [eax], 0
.text:004043C8                 jz      loc_4042E0
.text:004043CE
.text:004043CE loc_4043CE:                             ; CODE XREF: sub_403B40+8AB↓j
.text:004043CE                 inc     [esp+4Ch+var_28]
.text:004043D2                 mov     esi, [esp+4Ch+var_28]
.text:004043D6                 lea     eax, [esi+ebp]
.text:004043D9                 cmp     eax, [esp+4Ch+arg_C]
.text:004043DD                 jnb     loc_4042E0
.text:004043E3                 mov     edi, [esp+4Ch+Str]
.text:004043E7                 cmp     byte ptr [eax+edi], 0
.text:004043EB                 jnz     short loc_4043CE
.text:004043ED                 jmp     loc_4042E0
.text:004043F2 ; ---------------------------------------------------------------------------
.text:004043F2
.text:004043F2 loc_4043F2:                             ; CODE XREF: sub_403B40+765↑j
.text:004043F2                 mov     [esp+4Ch+var_29], 0
.text:004043F7                 jmp     loc_4042E0
.text:004043FC ; ---------------------------------------------------------------------------
.text:004043FC
.text:004043FC loc_4043FC:                             ; CODE XREF: sub_403B40+72A↑j
.text:004043FC                 mov     edx, [esp+4Ch+Str]
.text:00404400                 mov     [esp+4Ch+C], edx ; Str
.text:00404403                 call    strlen
.text:00404408                 mov     [esp+4Ch+arg_C], eax
.text:0040440C                 jmp     loc_404270
.text:00404411 ; ---------------------------------------------------------------------------
.text:00404411
.text:00404411 loc_404411:                             ; CODE XREF: sub_403B40+105↑j
.text:00404411                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00404411                 mov     dl, bl          ; jumptable 00403C45 case 92
.text:00404413                 jmp     loc_403F44
.text:00404418 ; ---------------------------------------------------------------------------
.text:00404418
.text:00404418 loc_404418:                             ; CODE XREF: sub_403B40+105↑j
.text:00404418                                         ; sub_403B40+902↓j
.text:00404418                                         ; DATA XREF: ...
.text:00404418                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403C45 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040441D                 jnz     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:0040441D                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:00404423                 jmp     loc_403F4B      ; jumptable 00404312 cases 91,92,94,96,124
.text:00404428 ; ---------------------------------------------------------------------------
.text:00404428
.text:00404428 loc_404428:                             ; CODE XREF: sub_403B40+105↑j
.text:00404428                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:00404428                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403C45 cases 123,125
.text:0040442D                 jz      short loc_404444
.text:0040442F                 cmp     [esp+4Ch+arg_C], 1
.text:00404434
.text:00404434 loc_404434:                             ; CODE XREF: sub_403B40+90C↓j
.text:00404434                 jnz     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:00404434                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:0040443A
.text:0040443A loc_40443A:                             ; CODE XREF: sub_403B40+105↑j
.text:0040443A                                         ; DATA XREF: sub_403B40:jpt_403C45↑o
.text:0040443A                 test    ebp, ebp        ; jumptable 00403C45 cases 35,126
.text:0040443C                 jnz     def_404042      ; jumptable 00403C45 cases 37,43-58,65-90,93,95,97-122
.text:0040443C                                         ; jumptable 00404042 default case, cases 34-38,42-44,46,48-59
.text:00404442                 jmp     short loc_404418 ; jumptable 00403C45 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404444 ; ---------------------------------------------------------------------------
.text:00404444
.text:00404444 loc_404444:                             ; CODE XREF: sub_403B40+8ED↑j
.text:00404444                 mov     esi, [esp+4Ch+Str]
.text:00404448                 cmp     byte ptr [esi+1], 0
.text:0040444C                 jmp     short loc_404434
.text:0040444E ; ---------------------------------------------------------------------------
.text:0040444E
.text:0040444E loc_40444E:                             ; CODE XREF: sub_403B40:loc_403BDF↑j
.text:0040444E                 test    ebp, ebp
.text:00404450                 jnz     short loc_40445D
.text:00404452                 cmp     [esp+4Ch+arg_10], 1
.text:00404457                 jz      loc_403F4B      ; jumptable 00404312 cases 91,92,94,96,124
.text:0040445D
.text:0040445D loc_40445D:                             ; CODE XREF: sub_403B40+910↑j
.text:0040445D                 mov     esi, [esp+4Ch+var_1C]
.text:00404461                 test    esi, esi
.text:00404463                 jz      short loc_404498
.text:00404465                 mov     edi, [esp+4Ch+var_1C]
.text:00404469                 movzx   eax, byte ptr [edi]
.text:0040446C                 test    al, al
.text:0040446E                 jz      short loc_404498
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: sub_403B40+956↓j
.text:00404470                 mov     ebp, [esp+4Ch+arg_4]
.text:00404474                 cmp     [esp+4Ch+var_34], ebp
.text:00404478                 jnb     short loc_404485
.text:0040447A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040447E                 mov     ebx, [esp+4Ch+var_34]
.text:00404482                 mov     [ebx+ecx], al
.text:00404485
.text:00404485 loc_404485:                             ; CODE XREF: sub_403B40+938↑j
.text:00404485                 inc     [esp+4Ch+var_1C]
.text:00404489                 inc     [esp+4Ch+var_34]
.text:0040448D                 mov     edx, [esp+4Ch+var_1C]
.text:00404491                 movzx   eax, byte ptr [edx]
.text:00404494                 test    al, al
.text:00404496                 jnz     short loc_404470
.text:00404498
.text:00404498 loc_404498:                             ; CODE XREF: sub_403B40+923↑j
.text:00404498                                         ; sub_403B40+92E↑j
.text:00404498                 mov     eax, [esp+4Ch+arg_4]
.text:0040449C                 cmp     [esp+4Ch+var_34], eax
.text:004044A0                 jnb     short loc_4044AE
.text:004044A2                 mov     edi, [esp+4Ch+arg_0]
.text:004044A6                 mov     esi, [esp+4Ch+var_34]
.text:004044AA                 mov     byte ptr [esi+edi], 0
.text:004044AE
.text:004044AE loc_4044AE:                             ; CODE XREF: sub_403B40+960↑j
.text:004044AE                 mov     eax, [esp+4Ch+var_34]
.text:004044B2                 jmp     loc_403F7F
.text:004044B7 ; ---------------------------------------------------------------------------
.text:004044B7
.text:004044B7 loc_4044B7:                             ; CODE XREF: sub_403B40+95↑j
.text:004044B7                 mov     ebx, [esp+4Ch+Str]
.text:004044BB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004044C0                 jmp     loc_403BDF
.text:004044C5 ; ---------------------------------------------------------------------------
.text:004044C5
.text:004044C5 loc_4044C5:                             ; CODE XREF: sub_403B40+3D↑j
.text:004044C5                                         ; DATA XREF: sub_403B40:jpt_403B7D↑o
.text:004044C5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403B7D case 2
.text:004044C9                 cmp     [esp+4Ch+var_34], edx
.text:004044CD                 jnb     short loc_4044D6
.text:004044CF                 mov     ecx, [esp+4Ch+arg_0]
.text:004044D3                 mov     byte ptr [ecx], 27h ; '''
.text:004044D6
.text:004044D6 loc_4044D6:                             ; CODE XREF: sub_403B40+98D↑j
.text:004044D6                 mov     [esp+4Ch+var_34], 1
.text:004044DE                 mov     [esp+4Ch+var_1C], 403B2Eh
.text:004044E6                 jmp     loc_403BC6
.text:004044EB ; ---------------------------------------------------------------------------
.text:004044EB
.text:004044EB loc_4044EB:                             ; CODE XREF: sub_403B40+3D↑j
.text:004044EB                                         ; DATA XREF: sub_403B40:jpt_403B7D↑o
.text:004044EB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403B7D case 4
.text:004044F0                 jmp     def_403B7D      ; jumptable 00403B7D default case, cases 0,1
.text:004044F5 ; ---------------------------------------------------------------------------
.text:004044F5
.text:004044F5 loc_4044F5:                             ; CODE XREF: sub_403B40+3D↑j
.text:004044F5                                         ; DATA XREF: sub_403B40:jpt_403B7D↑o
.text:004044F5                 mov     [esp+4Ch+C], 403B30h ; jumptable 00403B7D cases 5,6
.text:004044FC                 call    ds:libintl_gettext
.text:00404502                 cmp     eax, 403B30h
.text:00404507                 mov     edi, eax
.text:00404509                 jz      short loc_404580
.text:0040450B
.text:0040450B loc_40450B:                             ; CODE XREF: sub_403B40+A45↓j
.text:0040450B                                         ; sub_403B40+A4C↓j
.text:0040450B                 mov     [esp+4Ch+C], 403B2Eh
.text:00404512                 call    ds:libintl_gettext
.text:00404518                 cmp     eax, 403B2Eh
.text:0040451D                 mov     edx, eax
.text:0040451F                 jz      short loc_404572
.text:00404521
.text:00404521 loc_404521:                             ; CODE XREF: sub_403B40+A37↓j
.text:00404521                                         ; sub_403B40+A3E↓j
.text:00404521                 mov     [esp+4Ch+var_1C], edi
.text:00404525                 cmp     byte ptr [edi], 0
.text:00404528                 jz      short loc_404558
.text:0040452A
.text:0040452A loc_40452A:                             ; CODE XREF: sub_403B40+A16↓j
.text:0040452A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040452E                 cmp     [esp+4Ch+var_34], ecx
.text:00404532                 jnb     short loc_404547
.text:00404534                 mov     ebp, [esp+4Ch+var_1C]
.text:00404538                 mov     edi, [esp+4Ch+arg_0]
.text:0040453C                 mov     esi, [esp+4Ch+var_34]
.text:00404540                 movzx   ebx, byte ptr [ebp+0]
.text:00404544                 mov     [esi+edi], bl
.text:00404547
.text:00404547 loc_404547:                             ; CODE XREF: sub_403B40+9F2↑j
.text:00404547                 inc     [esp+4Ch+var_1C]
.text:0040454B                 inc     [esp+4Ch+var_34]
.text:0040454F                 mov     eax, [esp+4Ch+var_1C]
.text:00404553                 cmp     byte ptr [eax], 0
.text:00404556                 jnz     short loc_40452A
.text:00404558
.text:00404558 loc_404558:                             ; CODE XREF: sub_403B40+9E8↑j
.text:00404558                 mov     [esp+4Ch+var_21], 1
.text:0040455D                 mov     [esp+4Ch+var_1C], edx
.text:00404561                 mov     [esp+4Ch+C], edx ; Str
.text:00404564                 call    strlen
.text:00404569                 mov     [esp+4Ch+var_20], eax
.text:0040456D                 jmp     def_403B7D      ; jumptable 00403B7D default case, cases 0,1
.text:00404572 ; ---------------------------------------------------------------------------
.text:00404572
.text:00404572 loc_404572:                             ; CODE XREF: sub_403B40+9DF↑j
.text:00404572                 cmp     [esp+4Ch+arg_10], 6
.text:00404577                 jnz     short loc_404521
.text:00404579                 mov     edx, offset asc_403B2C ; "\"'`"
.text:0040457E                 jmp     short loc_404521
.text:00404580 ; ---------------------------------------------------------------------------
.text:00404580
.text:00404580 loc_404580:                             ; CODE XREF: sub_403B40+9C9↑j
.text:00404580                 cmp     [esp+4Ch+arg_10], 6
.text:00404585                 jnz     short loc_40450B
.text:00404587                 mov     edi, offset asc_403B2C ; "\"'`"
.text:0040458C                 jmp     loc_40450B
.text:0040458C sub_403B40      endp
.text:0040458C
.text:00404591 ; ---------------------------------------------------------------------------
.text:00404591                 jmp     short loc_4045A0
.text:00404591 ; ---------------------------------------------------------------------------
.text:00404593                 align 10h
.text:004045A0
.text:004045A0 loc_4045A0:                             ; CODE XREF: .text:00404591↑j
.text:004045A0                 sub     esp, 0Ch
.text:004045A3                 mov     [esp+4], ebx
.text:004045A7                 mov     [esp+8], esi
.text:004045AB                 call    _errno
.text:004045B0                 mov     esi, [eax]
.text:004045B2                 mov     dword ptr [esp], 24h ; '$'
.text:004045B9                 call    sub_403820
.text:004045BE                 mov     edx, [esp+10h]
.text:004045C2                 mov     ebx, eax
.text:004045C4                 test    edx, edx
.text:004045C6                 jz      short loc_404611
.text:004045C8
.text:004045C8 loc_4045C8:                             ; CODE XREF: .text:00404616↓j
.text:004045C8                 mov     ecx, [edx]
.text:004045CA                 mov     [ebx], ecx
.text:004045CC                 mov     ecx, [edx+4]
.text:004045CF                 mov     [ebx+4], ecx
.text:004045D2                 mov     ecx, [edx+8]
.text:004045D5                 mov     [ebx+8], ecx
.text:004045D8                 mov     ecx, [edx+0Ch]
.text:004045DB                 mov     [ebx+0Ch], ecx
.text:004045DE                 mov     ecx, [edx+10h]
.text:004045E1                 mov     [ebx+10h], ecx
.text:004045E4                 mov     ecx, [edx+14h]
.text:004045E7                 mov     [ebx+14h], ecx
.text:004045EA                 mov     ecx, [edx+18h]
.text:004045ED                 mov     [ebx+18h], ecx
.text:004045F0                 mov     ecx, [edx+1Ch]
.text:004045F3                 mov     [ebx+1Ch], ecx
.text:004045F6                 mov     ecx, [edx+20h]
.text:004045F9                 mov     [ebx+20h], ecx
.text:004045FC                 call    _errno
.text:00404601                 mov     [eax], esi
.text:00404603                 mov     esi, [esp+8]
.text:00404607                 mov     eax, ebx
.text:00404609                 mov     ebx, [esp+4]
.text:0040460D                 add     esp, 0Ch
.text:00404610                 retn
.text:00404611 ; ---------------------------------------------------------------------------
.text:00404611
.text:00404611 loc_404611:                             ; CODE XREF: .text:004045C6↑j
.text:00404611                 mov     edx, offset dword_4072A0
.text:00404616                 jmp     short loc_4045C8
.text:00404616 ; ---------------------------------------------------------------------------
.text:00404618                 align 10h
.text:00404620                 mov     eax, [esp+4]
.text:00404624                 test    eax, eax
.text:00404626                 jz      short loc_404630
.text:00404628
.text:00404628 loc_404628:                             ; CODE XREF: .text:00404635↓j
.text:00404628                 mov     eax, [eax]
.text:0040462A                 retn
.text:0040462A ; ---------------------------------------------------------------------------
.text:0040462B                 align 10h
.text:00404630
.text:00404630 loc_404630:                             ; CODE XREF: .text:00404626↑j
.text:00404630                 mov     eax, offset dword_4072A0
.text:00404635                 jmp     short loc_404628
.text:00404635 ; ---------------------------------------------------------------------------
.text:00404637                 align 10h
.text:00404640                 mov     edx, [esp+4]
.text:00404644                 test    edx, edx
.text:00404646                 jz      short loc_404650
.text:00404648
.text:00404648 loc_404648:                             ; CODE XREF: .text:00404655↓j
.text:00404648                 mov     ecx, [esp+8]
.text:0040464C                 mov     [edx], ecx
.text:0040464E                 retn
.text:0040464E ; ---------------------------------------------------------------------------
.text:0040464F                 align 10h
.text:00404650
.text:00404650 loc_404650:                             ; CODE XREF: .text:00404646↑j
.text:00404650                 mov     edx, offset dword_4072A0
.text:00404655                 jmp     short loc_404648
.text:00404655 ; ---------------------------------------------------------------------------
.text:00404657                 align 10h
.text:00404660                 sub     esp, 8
.text:00404663                 mov     eax, [esp+0Ch]
.text:00404667                 movzx   ecx, byte ptr [esp+10h]
.text:0040466C                 mov     [esp], ebx
.text:0040466F                 mov     ebx, [esp+14h]
.text:00404673                 mov     [esp+4], esi
.text:00404677                 mov     dl, cl
.text:00404679                 shr     dl, 5
.text:0040467C                 movzx   edx, dl
.text:0040467F                 shl     edx, 2
.text:00404682                 test    eax, eax
.text:00404684                 lea     esi, [edx+eax+4]
.text:00404688                 jz      short loc_4046B0
.text:0040468A
.text:0040468A loc_40468A:                             ; CODE XREF: .text:004046B6↓j
.text:0040468A                 mov     edx, [esi]
.text:0040468C                 and     ecx, 1Fh
.text:0040468F                 and     ebx, 1
.text:00404692                 mov     eax, edx
.text:00404694                 shr     eax, cl
.text:00404696                 and     eax, 1
.text:00404699                 xor     ebx, eax
.text:0040469B                 shl     ebx, cl
.text:0040469D                 xor     edx, ebx
.text:0040469F                 mov     [esi], edx
.text:004046A1                 mov     ebx, [esp]
.text:004046A4                 mov     esi, [esp+4]
.text:004046A8                 add     esp, 8
.text:004046AB                 retn
.text:004046AB ; ---------------------------------------------------------------------------
.text:004046AC                 align 10h
.text:004046B0
.text:004046B0 loc_4046B0:                             ; CODE XREF: .text:00404688↑j
.text:004046B0                 lea     esi, dword_4072A4[edx]
.text:004046B6                 jmp     short loc_40468A
.text:004046B6 ; ---------------------------------------------------------------------------
.text:004046B8                 align 10h
.text:004046C0                 sub     esp, 2Ch
.text:004046C3                 mov     [esp+24h], ebx
.text:004046C7                 mov     ebx, [esp+40h]
.text:004046CB                 mov     [esp+28h], esi
.text:004046CF                 test    ebx, ebx
.text:004046D1                 jz      short loc_404720
.text:004046D3
.text:004046D3 loc_4046D3:                             ; CODE XREF: .text:00404725↓j
.text:004046D3                 call    _errno
.text:004046D8                 mov     esi, [eax]
.text:004046DA                 mov     [esp+14h], ebx
.text:004046DE                 mov     edx, [ebx]
.text:004046E0                 mov     ecx, [esp+38h]
.text:004046E4                 mov     ebx, [esp+3Ch]
.text:004046E8                 mov     [esp+10h], edx
.text:004046EC                 mov     edx, [esp+34h]
.text:004046F0                 mov     [esp+0Ch], ebx
.text:004046F4                 mov     [esp+8], ecx
.text:004046F8                 mov     [esp+4], edx
.text:004046FC                 mov     edx, [esp+30h]
.text:00404700                 mov     [esp], edx
.text:00404703                 call    sub_403B40
.text:00404708                 mov     ebx, eax
.text:0040470A                 call    _errno
.text:0040470F                 mov     [eax], esi
.text:00404711                 mov     esi, [esp+28h]
.text:00404715                 mov     eax, ebx
.text:00404717                 mov     ebx, [esp+24h]
.text:0040471B                 add     esp, 2Ch
.text:0040471E                 retn
.text:0040471E ; ---------------------------------------------------------------------------
.text:0040471F                 align 10h
.text:00404720
.text:00404720 loc_404720:                             ; CODE XREF: .text:004046D1↑j
.text:00404720                 mov     ebx, offset dword_4072A0
.text:00404725                 jmp     short loc_4046D3
.text:00404725 ; ---------------------------------------------------------------------------
.text:00404727                 align 10h
.text:00404730                 push    ebp
.text:00404731                 push    edi
.text:00404732                 push    esi
.text:00404733                 push    ebx
.text:00404734                 sub     esp, 2Ch
.text:00404737                 mov     ebp, [esp+48h]
.text:0040473B                 call    _errno
.text:00404740                 mov     edx, [eax]
.text:00404742                 test    ebp, ebp
.text:00404744                 mov     ebx, ebp
.text:00404746                 mov     [esp+28h], edx
.text:0040474A                 jz      loc_404800
.text:00404750
.text:00404750 loc_404750:                             ; CODE XREF: .text:00404805↓j
.text:00404750                 call    _errno
.text:00404755                 mov     edi, [eax]
.text:00404757                 mov     esi, ebp
.text:00404759                 mov     [esp+14h], ebx
.text:0040475D                 mov     ecx, [ebx]
.text:0040475F                 mov     dword ptr [esp], 0
.text:00404766                 mov     edx, [esp+44h]
.text:0040476A                 mov     dword ptr [esp+4], 0
.text:00404772                 mov     eax, [esp+40h]
.text:00404776                 mov     [esp+10h], ecx
.text:0040477A                 mov     [esp+0Ch], edx
.text:0040477E                 mov     [esp+8], eax
.text:00404782                 call    sub_403B40
.text:00404787                 mov     ebx, eax
.text:00404789                 call    _errno
.text:0040478E                 mov     [eax], edi
.text:00404790                 lea     edi, [ebx+1]
.text:00404793                 mov     [esp], edi
.text:00404796                 call    sub_403820
.text:0040479B                 mov     [esp+24h], eax
.text:0040479F                 test    ebp, ebp
.text:004047A1                 jz      short loc_4047F2
.text:004047A3
.text:004047A3 loc_4047A3:                             ; CODE XREF: .text:004047F7↓j
.text:004047A3                 call    _errno
.text:004047A8                 mov     ebp, [eax]
.text:004047AA                 mov     [esp+14h], esi
.text:004047AE                 mov     ecx, [esi]
.text:004047B0                 mov     [esp+4], edi
.text:004047B4                 mov     edx, [esp+44h]
.text:004047B8                 mov     esi, [esp+24h]
.text:004047BC                 mov     [esp+10h], ecx
.text:004047C0                 mov     eax, [esp+40h]
.text:004047C4                 mov     [esp+0Ch], edx
.text:004047C8                 mov     [esp], esi
.text:004047CB                 mov     [esp+8], eax
.text:004047CF                 call    sub_403B40
.text:004047D4                 call    _errno
.text:004047D9                 mov     [eax], ebp
.text:004047DB                 call    _errno
.text:004047E0                 mov     ebx, [esp+28h]
.text:004047E4                 mov     [eax], ebx
.text:004047E6                 mov     eax, [esp+24h]
.text:004047EA                 add     esp, 2Ch
.text:004047ED                 pop     ebx
.text:004047EE                 pop     esi
.text:004047EF                 pop     edi
.text:004047F0                 pop     ebp
.text:004047F1                 retn
.text:004047F2 ; ---------------------------------------------------------------------------
.text:004047F2
.text:004047F2 loc_4047F2:                             ; CODE XREF: .text:004047A1↑j
.text:004047F2                 mov     esi, offset dword_4072A0
.text:004047F7                 jmp     short loc_4047A3
.text:004047F7 ; ---------------------------------------------------------------------------
.text:004047F9                 align 10h
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: .text:0040474A↑j
.text:00404800                 mov     ebx, offset dword_4072A0
.text:00404805                 jmp     loc_404750
.text:00404805 ; ---------------------------------------------------------------------------
.text:0040480A                 align 10h
.text:00404810                 sub     esp, 1Ch
.text:00404813                 mov     edx, [esp+24h]
.text:00404817                 mov     dword ptr [esp+0Ch], offset dword_4072A0
.text:0040481F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404827                 mov     [esp+4], edx
.text:0040482B                 mov     edx, [esp+20h]
.text:0040482F                 mov     [esp], edx
.text:00404832                 call    sub_404C80
.text:00404837                 add     esp, 1Ch
.text:0040483A                 retn
.text:0040483A ; ---------------------------------------------------------------------------
.text:0040483B                 align 10h
.text:00404840                 sub     esp, 1Ch
.text:00404843                 mov     edx, [esp+20h]
.text:00404847                 mov     dword ptr [esp+0Ch], offset dword_4072A0
.text:0040484F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404857                 mov     [esp+4], edx
.text:0040485B                 mov     dword ptr [esp], 0
.text:00404862                 call    sub_404C80
.text:00404867                 add     esp, 1Ch
.text:0040486A                 retn
.text:0040486A ; ---------------------------------------------------------------------------
.text:0040486B                 align 10h
.text:00404870
.text:00404870 ; =============== S U B R O U T I N E =======================================
.text:00404870
.text:00404870
.text:00404870 ; int __cdecl sub_404870(int, int, char *)
.text:00404870 sub_404870      proc near               ; CODE XREF: .text:004030FA↑p
.text:00404870                                         ; sub_403110+1A↑p
.text:00404870
.text:00404870 var_BC          = dword ptr -0BCh
.text:00404870 var_B8          = dword ptr -0B8h
.text:00404870 var_B4          = dword ptr -0B4h
.text:00404870 var_B0          = dword ptr -0B0h
.text:00404870 var_AC          = dword ptr -0ACh
.text:00404870 var_A8          = dword ptr -0A8h
.text:00404870 var_A4          = dword ptr -0A4h
.text:00404870 var_A0          = dword ptr -0A0h
.text:00404870 var_9C          = dword ptr -9Ch
.text:00404870 var_98          = dword ptr -98h
.text:00404870 var_94          = dword ptr -94h
.text:00404870 var_90          = dword ptr -90h
.text:00404870 var_8C          = dword ptr -8Ch
.text:00404870 var_7C          = dword ptr -7Ch
.text:00404870 var_78          = dword ptr -78h
.text:00404870 var_74          = dword ptr -74h
.text:00404870 var_70          = dword ptr -70h
.text:00404870 var_6C          = dword ptr -6Ch
.text:00404870 var_68          = dword ptr -68h
.text:00404870 var_64          = dword ptr -64h
.text:00404870 var_60          = dword ptr -60h
.text:00404870 var_5C          = dword ptr -5Ch
.text:00404870 var_4C          = dword ptr -4Ch
.text:00404870 var_48          = dword ptr -48h
.text:00404870 var_44          = dword ptr -44h
.text:00404870 var_40          = dword ptr -40h
.text:00404870 var_3C          = dword ptr -3Ch
.text:00404870 var_38          = dword ptr -38h
.text:00404870 var_34          = dword ptr -34h
.text:00404870 var_30          = dword ptr -30h
.text:00404870 var_2C          = dword ptr -2Ch
.text:00404870 arg_0           = dword ptr  4
.text:00404870 arg_4           = dword ptr  8
.text:00404870 arg_8           = dword ptr  0Ch
.text:00404870
.text:00404870                 push    ebp
.text:00404871                 xor     eax, eax
.text:00404873                 mov     ecx, 8
.text:00404878                 push    edi
.text:00404879                 push    esi
.text:0040487A                 push    ebx
.text:0040487B                 sub     esp, 0ACh
.text:00404881                 mov     ebp, [esp+0BCh+arg_4]
.text:00404888                 cld
.text:00404889                 lea     edi, [esp+0BCh+var_A8]
.text:0040488D                 mov     [esp+0BCh+var_AC], ebp
.text:00404891                 rep stosd
.text:00404893                 mov     eax, [esp+0BCh+var_8C]
.text:00404897                 mov     edi, [esp+0BCh+var_AC]
.text:0040489B                 mov     esi, [esp+0BCh+var_A8]
.text:0040489F                 mov     [esp+0BCh+var_5C], eax
.text:004048A3                 mov     ebp, [esp+0BCh+var_A4]
.text:004048A7                 mov     eax, [esp+0BCh+var_AC]
.text:004048AB                 mov     [esp+0BCh+var_7C], edi
.text:004048AF                 mov     ecx, [esp+0BCh+var_94]
.text:004048B3                 mov     edi, [esp+0BCh+var_A0]
.text:004048B7                 mov     [esp+0BCh+var_78], esi
.text:004048BB                 mov     edx, [esp+0BCh+var_90]
.text:004048BF                 mov     esi, [esp+0BCh+var_9C]
.text:004048C3                 mov     [esp+0BCh+var_4C], eax
.text:004048C7                 mov     ebx, [esp+0BCh+var_98]
.text:004048CB                 mov     eax, [esp+0BCh+var_A8]
.text:004048CF                 mov     [esp+0BCh+var_74], ebp
.text:004048D3                 mov     [esp+0BCh+var_70], edi
.text:004048D7                 mov     [esp+0BCh+var_6C], esi
.text:004048DB                 mov     [esp+0BCh+var_68], ebx
.text:004048DF                 mov     [esp+0BCh+var_64], ecx
.text:004048E3                 mov     [esp+0BCh+var_60], edx
.text:004048E7                 mov     [esp+0BCh+var_48], eax
.text:004048EB                 mov     [esp+0BCh+var_44], ebp
.text:004048EF                 mov     [esp+0BCh+var_40], edi
.text:004048F3                 mov     [esp+0BCh+var_3C], esi
.text:004048FA                 mov     [esp+0BCh+var_38], ebx
.text:00404901                 mov     ebx, [esp+0BCh+var_8C]
.text:00404905                 mov     [esp+0BCh+var_30], edx
.text:0040490C                 mov     edx, [esp+0BCh+arg_8]
.text:00404913                 mov     [esp+0BCh+var_34], ecx
.text:0040491A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040491E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404922                 mov     edx, [esp+0BCh+arg_0]
.text:00404929                 mov     [esp+0BCh+var_2C], ebx
.text:00404930                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404934                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040493C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040493F                 call    sub_404C80
.text:00404944                 add     esp, 0ACh
.text:0040494A                 pop     ebx
.text:0040494B                 pop     esi
.text:0040494C                 pop     edi
.text:0040494D                 pop     ebp
.text:0040494E                 retn
.text:0040494E sub_404870      endp
.text:0040494E
.text:0040494E ; ---------------------------------------------------------------------------
.text:0040494F                 align 10h
.text:00404950                 push    ebp
.text:00404951                 xor     eax, eax
.text:00404953                 mov     ecx, 8
.text:00404958                 push    edi
.text:00404959                 push    esi
.text:0040495A                 push    ebx
.text:0040495B                 sub     esp, 0ACh
.text:00404961                 mov     edx, [esp+0C4h]
.text:00404968                 cld
.text:00404969                 lea     edi, [esp+14h]
.text:0040496D                 mov     [esp+10h], edx
.text:00404971                 rep stosd
.text:00404973                 mov     eax, [esp+30h]
.text:00404977                 mov     ebp, [esp+10h]
.text:0040497B                 mov     edi, [esp+14h]
.text:0040497F                 mov     [esp+60h], eax
.text:00404983                 mov     esi, [esp+20h]
.text:00404987                 mov     eax, [esp+10h]
.text:0040498B                 mov     [esp+40h], ebp
.text:0040498F                 mov     ecx, [esp+28h]
.text:00404993                 mov     ebp, [esp+18h]
.text:00404997                 mov     [esp+44h], edi
.text:0040499B                 mov     edx, [esp+2Ch]
.text:0040499F                 mov     edi, [esp+1Ch]
.text:004049A3                 mov     [esp+70h], eax
.text:004049A7                 mov     ebx, [esp+24h]
.text:004049AB                 mov     eax, [esp+14h]
.text:004049AF                 mov     [esp+48h], ebp
.text:004049B3                 mov     [esp+4Ch], edi
.text:004049B7                 mov     [esp+50h], esi
.text:004049BB                 mov     [esp+54h], ebx
.text:004049BF                 mov     [esp+58h], ecx
.text:004049C3                 mov     [esp+5Ch], edx
.text:004049C7                 mov     [esp+74h], eax
.text:004049CB                 mov     [esp+78h], ebp
.text:004049CF                 mov     [esp+7Ch], edi
.text:004049D3                 mov     [esp+80h], esi
.text:004049DA                 mov     [esp+84h], ebx
.text:004049E1                 mov     esi, [esp+30h]
.text:004049E5                 lea     ebx, [esp+70h]
.text:004049E9                 mov     [esp+8Ch], edx
.text:004049F0                 mov     edx, [esp+0C8h]
.text:004049F7                 mov     [esp+88h], ecx
.text:004049FE                 mov     ecx, [esp+0CCh]
.text:00404A05                 mov     [esp+4], edx
.text:00404A09                 mov     edx, [esp+0C0h]
.text:00404A10                 mov     [esp+90h], esi
.text:00404A17                 mov     [esp+0Ch], ebx
.text:00404A1B                 mov     [esp+8], ecx
.text:00404A1F                 mov     [esp], edx
.text:00404A22                 call    sub_404C80
.text:00404A27                 add     esp, 0ACh
.text:00404A2D                 pop     ebx
.text:00404A2E                 pop     esi
.text:00404A2F                 pop     edi
.text:00404A30                 pop     ebp
.text:00404A31                 retn
.text:00404A31 ; ---------------------------------------------------------------------------
.text:00404A32                 align 10h
.text:00404A40                 push    ebp
.text:00404A41                 xor     eax, eax
.text:00404A43                 mov     ecx, 8
.text:00404A48                 push    edi
.text:00404A49                 push    esi
.text:00404A4A                 push    ebx
.text:00404A4B                 sub     esp, 0ACh
.text:00404A51                 mov     edi, [esp+0C0h]
.text:00404A58                 cld
.text:00404A59                 mov     [esp+10h], edi
.text:00404A5D                 lea     edi, [esp+14h]
.text:00404A61                 rep stosd
.text:00404A63                 mov     eax, [esp+30h]
.text:00404A67                 mov     esi, [esp+10h]
.text:00404A6B                 mov     ebx, [esp+14h]
.text:00404A6F                 mov     [esp+60h], eax
.text:00404A73                 mov     ebp, [esp+18h]
.text:00404A77                 mov     eax, [esp+10h]
.text:00404A7B                 mov     [esp+40h], esi
.text:00404A7F                 mov     edi, [esp+1Ch]
.text:00404A83                 mov     esi, [esp+20h]
.text:00404A87                 mov     [esp+44h], ebx
.text:00404A8B                 mov     ecx, [esp+28h]
.text:00404A8F                 mov     edx, [esp+2Ch]
.text:00404A93                 mov     [esp+70h], eax
.text:00404A97                 mov     ebx, [esp+24h]
.text:00404A9B                 mov     eax, [esp+14h]
.text:00404A9F                 mov     [esp+48h], ebp
.text:00404AA3                 mov     [esp+4Ch], edi
.text:00404AA7                 mov     [esp+50h], esi
.text:00404AAB                 mov     [esp+54h], ebx
.text:00404AAF                 mov     [esp+58h], ecx
.text:00404AB3                 mov     [esp+5Ch], edx
.text:00404AB7                 mov     [esp+74h], eax
.text:00404ABB                 mov     [esp+78h], ebp
.text:00404ABF                 mov     [esp+7Ch], edi
.text:00404AC3                 mov     [esp+80h], esi
.text:00404ACA                 mov     [esp+84h], ebx
.text:00404AD1                 mov     [esp+8Ch], edx
.text:00404AD8                 lea     edx, [esp+70h]
.text:00404ADC                 mov     [esp+88h], ecx
.text:00404AE3                 mov     ecx, [esp+30h]
.text:00404AE7                 mov     [esp+0Ch], edx
.text:00404AEB                 mov     edx, [esp+0C4h]
.text:00404AF2                 mov     [esp+90h], ecx
.text:00404AF9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404B01                 mov     [esp+4], edx
.text:00404B05                 mov     dword ptr [esp], 0
.text:00404B0C                 call    sub_404C80
.text:00404B11                 add     esp, 0ACh
.text:00404B17                 pop     ebx
.text:00404B18                 pop     esi
.text:00404B19                 pop     edi
.text:00404B1A                 pop     ebp
.text:00404B1B                 retn
.text:00404B1B ; ---------------------------------------------------------------------------
.text:00404B1C                 align 10h
.text:00404B20                 push    edi
.text:00404B21                 push    esi
.text:00404B22                 push    ebx
.text:00404B23                 sub     esp, 40h
.text:00404B26                 mov     edx, ds:dword_4072AC
.text:00404B2C                 mov     ebx, ds:dword_4072A0
.text:00404B32                 mov     esi, ds:dword_4072A8
.text:00404B38                 mov     edi, ds:dword_4072A4
.text:00404B3E                 mov     [esp+1Ch], edx
.text:00404B42                 mov     ecx, ds:dword_4072B0
.text:00404B48                 mov     edx, ds:dword_4072C0
.text:00404B4E                 mov     [esp+10h], ebx
.text:00404B52                 mov     ebx, ds:dword_4072B4
.text:00404B58                 mov     [esp+30h], edx
.text:00404B5C                 movzx   edx, byte ptr [esp+54h]
.text:00404B61                 mov     [esp+18h], esi
.text:00404B65                 mov     esi, ds:dword_4072BC
.text:00404B6B                 mov     [esp+14h], edi
.text:00404B6F                 mov     edi, ds:dword_4072B8
.text:00404B75                 mov     [esp+20h], ecx
.text:00404B79                 mov     cl, dl
.text:00404B7B                 shr     cl, 5
.text:00404B7E                 mov     [esp+24h], ebx
.text:00404B82                 movzx   ebx, cl
.text:00404B85                 mov     [esp+2Ch], esi
.text:00404B89                 lea     esi, [esp+10h]
.text:00404B8D                 mov     [esp+28h], edi
.text:00404B91                 lea     edi, [esi+ebx*4]
.text:00404B94                 mov     ebx, edx
.text:00404B96                 mov     edx, [edi+4]
.text:00404B99                 and     ebx, 1Fh
.text:00404B9C                 mov     cl, bl
.text:00404B9E                 mov     eax, edx
.text:00404BA0                 shr     eax, cl
.text:00404BA2                 and     eax, 1
.text:00404BA5                 xor     eax, 1
.text:00404BA8                 shl     eax, cl
.text:00404BAA                 xor     edx, eax
.text:00404BAC                 mov     [edi+4], edx
.text:00404BAF                 mov     edx, [esp+50h]
.text:00404BB3                 mov     [esp+0Ch], esi
.text:00404BB7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404BBF                 mov     [esp+4], edx
.text:00404BC3                 mov     dword ptr [esp], 0
.text:00404BCA                 call    sub_404C80
.text:00404BCF                 add     esp, 40h
.text:00404BD2                 pop     ebx
.text:00404BD3                 pop     esi
.text:00404BD4                 pop     edi
.text:00404BD5                 retn
.text:00404BD5 ; ---------------------------------------------------------------------------
.text:00404BD6                 align 10h
.text:00404BE0
.text:00404BE0 ; =============== S U B R O U T I N E =======================================
.text:00404BE0
.text:00404BE0
.text:00404BE0 ; int __cdecl sub_404BE0(char *)
.text:00404BE0 sub_404BE0      proc near               ; CODE XREF: sub_4033D0+64↑p
.text:00404BE0
.text:00404BE0 var_4C          = dword ptr -4Ch
.text:00404BE0 var_48          = dword ptr -48h
.text:00404BE0 var_44          = dword ptr -44h
.text:00404BE0 var_40          = dword ptr -40h
.text:00404BE0 var_3C          = dword ptr -3Ch
.text:00404BE0 var_38          = dword ptr -38h
.text:00404BE0 var_34          = dword ptr -34h
.text:00404BE0 var_30          = dword ptr -30h
.text:00404BE0 var_2C          = dword ptr -2Ch
.text:00404BE0 var_28          = dword ptr -28h
.text:00404BE0 var_24          = dword ptr -24h
.text:00404BE0 var_20          = dword ptr -20h
.text:00404BE0 var_1C          = dword ptr -1Ch
.text:00404BE0 arg_0           = dword ptr  4
.text:00404BE0
.text:00404BE0                 sub     esp, 4Ch
.text:00404BE3                 mov     ecx, ds:dword_4072A0
.text:00404BE9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404BF1                 mov     edx, ds:dword_4072A4
.text:00404BF7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00404BFE                 mov     [esp+4Ch+var_3C], ecx
.text:00404C02                 mov     ecx, ds:dword_4072AC
.text:00404C08                 mov     [esp+4Ch+var_38], edx
.text:00404C0C                 mov     edx, ds:dword_4072A8
.text:00404C12                 mov     [esp+4Ch+var_30], ecx
.text:00404C16                 mov     ecx, ds:dword_4072B0
.text:00404C1C                 mov     eax, edx
.text:00404C1E                 shr     eax, 1Ah
.text:00404C21                 and     eax, 1
.text:00404C24                 xor     eax, 1
.text:00404C27                 mov     [esp+4Ch+var_2C], ecx
.text:00404C2B                 shl     eax, 1Ah
.text:00404C2E                 mov     ecx, ds:dword_4072B4
.text:00404C34                 xor     edx, eax
.text:00404C36                 mov     [esp+4Ch+var_34], edx
.text:00404C3A                 mov     edx, [esp+4Ch+arg_0]
.text:00404C3E                 mov     [esp+4Ch+var_28], ecx
.text:00404C42                 mov     ecx, ds:dword_4072B8
.text:00404C48                 mov     [esp+4Ch+var_48], edx ; char *
.text:00404C4C                 mov     [esp+4Ch+var_24], ecx
.text:00404C50                 mov     ecx, ds:dword_4072BC
.text:00404C56                 mov     [esp+4Ch+var_20], ecx
.text:00404C5A                 mov     ecx, ds:dword_4072C0
.text:00404C60                 mov     [esp+4Ch+var_1C], ecx
.text:00404C64                 lea     ecx, [esp+4Ch+var_3C]
.text:00404C68                 mov     [esp+4Ch+var_40], ecx ; int
.text:00404C6C                 call    sub_404C80
.text:00404C71                 add     esp, 4Ch
.text:00404C74                 retn
.text:00404C74 sub_404BE0      endp
.text:00404C74
.text:00404C74 ; ---------------------------------------------------------------------------
.text:00404C75                 align 10h
.text:00404C80
.text:00404C80 ; =============== S U B R O U T I N E =======================================
.text:00404C80
.text:00404C80
.text:00404C80 ; int __cdecl sub_404C80(int, char *, int, int)
.text:00404C80 sub_404C80      proc near               ; CODE XREF: .text:00404832↑p
.text:00404C80                                         ; .text:00404862↑p ...
.text:00404C80
.text:00404C80 Block           = dword ptr -2Ch
.text:00404C80 var_28          = dword ptr -28h
.text:00404C80 Str             = dword ptr -24h
.text:00404C80 var_20          = dword ptr -20h
.text:00404C80 var_1C          = dword ptr -1Ch
.text:00404C80 var_18          = dword ptr -18h
.text:00404C80 var_14          = dword ptr -14h
.text:00404C80 arg_0           = dword ptr  4
.text:00404C80 arg_4           = dword ptr  8
.text:00404C80 arg_8           = dword ptr  0Ch
.text:00404C80 arg_C           = dword ptr  10h
.text:00404C80
.text:00404C80                 push    ebp
.text:00404C81                 push    edi
.text:00404C82                 push    esi
.text:00404C83                 push    ebx
.text:00404C84                 sub     esp, 1Ch
.text:00404C87                 call    _errno
.text:00404C8C                 mov     edx, [eax]
.text:00404C8E                 mov     eax, [esp+2Ch+arg_0]
.text:00404C92                 mov     [esp+2Ch+var_14], edx
.text:00404C96                 test    eax, eax
.text:00404C98                 js      loc_404E3A
.text:00404C9E                 mov     eax, [esp+2Ch+arg_0]
.text:00404CA2                 cmp     dword_406020, eax
.text:00404CA8                 ja      short loc_404D20
.text:00404CAA                 mov     esi, eax
.text:00404CAC                 inc     esi
.text:00404CAD                 cmp     esi, 1FFFFFFFh
.text:00404CB3                 ja      loc_404E3F
.text:00404CB9                 mov     ebx, off_40602C
.text:00404CBF                 cmp     ebx, offset dword_406024
.text:00404CC5                 jz      loc_404E11
.text:00404CCB
.text:00404CCB loc_404CCB:                             ; CODE XREF: sub_404C80+1B5↓j
.text:00404CCB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404CCE                 lea     ecx, ds:0[esi*8]
.text:00404CD5                 mov     ebp, esi
.text:00404CD7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404CDB                 call    sub_4038B0
.text:00404CE0                 mov     off_40602C, eax
.text:00404CE5                 mov     ebx, dword_406020
.text:00404CEB                 sub     ebp, ebx
.text:00404CED                 lea     edi, [eax+ebx*8]
.text:00404CF0                 lea     eax, ds:0[ebp*8]
.text:00404CF7                 cmp     eax, 7
.text:00404CFA                 jbe     short loc_404D10
.text:00404CFC                 test    edi, 4
.text:00404D02                 jz      short loc_404D10
.text:00404D04                 mov     dword ptr [edi], 0
.text:00404D0A                 sub     eax, 4
.text:00404D0D                 add     edi, 4
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: sub_404C80+7A↑j
.text:00404D10                                         ; sub_404C80+82↑j
.text:00404D10                 cld
.text:00404D11                 mov     ecx, eax
.text:00404D13                 shr     ecx, 2
.text:00404D16                 xor     eax, eax
.text:00404D18                 rep stosd
.text:00404D1A                 mov     dword_406020, esi
.text:00404D20
.text:00404D20 loc_404D20:                             ; CODE XREF: sub_404C80+28↑j
.text:00404D20                 mov     esi, off_40602C
.text:00404D26                 mov     eax, [esp+2Ch+arg_0]
.text:00404D2A                 mov     ebp, [esi+eax*8]
.text:00404D2D                 mov     edi, [esi+eax*8+4]
.text:00404D31                 mov     esi, [esp+2Ch+arg_C]
.text:00404D35                 test    esi, esi
.text:00404D37                 jz      loc_404E07
.text:00404D3D
.text:00404D3D loc_404D3D:                             ; CODE XREF: sub_404C80+18C↓j
.text:00404D3D                 call    _errno
.text:00404D42                 mov     ebx, [eax]
.text:00404D44                 mov     [esp+2Ch+var_18], esi ; int
.text:00404D48                 mov     ecx, [esi]
.text:00404D4A                 mov     [esp+2Ch+Block], edi ; int
.text:00404D4D                 mov     edx, [esp+2Ch+arg_8]
.text:00404D51                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404D55                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404D59                 mov     ecx, [esp+2Ch+arg_4]
.text:00404D5D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404D61                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404D65                 call    sub_403B40
.text:00404D6A                 mov     esi, eax
.text:00404D6C                 call    _errno
.text:00404D71                 mov     [eax], ebx
.text:00404D73                 cmp     ebp, esi
.text:00404D75                 ja      short loc_404DEB
.text:00404D77                 lea     ebp, [esi+1]
.text:00404D7A                 mov     ebx, off_40602C
.text:00404D80                 cmp     edi, offset unk_4071A0
.text:00404D86                 mov     esi, [esp+2Ch+arg_0]
.text:00404D8A                 mov     [ebx+esi*8], ebp
.text:00404D8D                 jz      short loc_404D9D
.text:00404D8F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404D92                 call    free
.text:00404D97                 mov     ebx, off_40602C
.text:00404D9D
.text:00404D9D loc_404D9D:                             ; CODE XREF: sub_404C80+10D↑j
.text:00404D9D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404DA0                 call    sub_403820
.text:00404DA5                 mov     esi, [esp+2Ch+arg_C]
.text:00404DA9                 mov     edi, eax
.text:00404DAB                 mov     eax, [esp+2Ch+arg_0]
.text:00404DAF                 test    esi, esi
.text:00404DB1                 mov     [ebx+eax*8+4], edi
.text:00404DB5                 jz      short loc_404E00
.text:00404DB7
.text:00404DB7 loc_404DB7:                             ; CODE XREF: sub_404C80+185↓j
.text:00404DB7                 call    _errno
.text:00404DBC                 mov     ebx, [eax]
.text:00404DBE                 mov     [esp+2Ch+var_18], esi ; int
.text:00404DC2                 mov     ecx, [esi]
.text:00404DC4                 mov     [esp+2Ch+Block], edi ; int
.text:00404DC7                 mov     edx, [esp+2Ch+arg_8]
.text:00404DCB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404DCF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404DD3                 mov     ecx, [esp+2Ch+arg_4]
.text:00404DD7                 mov     [esp+2Ch+var_20], edx ; int
.text:00404DDB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404DDF                 call    sub_403B40
.text:00404DE4                 call    _errno
.text:00404DE9                 mov     [eax], ebx
.text:00404DEB
.text:00404DEB loc_404DEB:                             ; CODE XREF: sub_404C80+F5↑j
.text:00404DEB                 call    _errno
.text:00404DF0                 mov     ebp, [esp+2Ch+var_14]
.text:00404DF4                 mov     [eax], ebp
.text:00404DF6                 add     esp, 1Ch
.text:00404DF9                 mov     eax, edi
.text:00404DFB                 pop     ebx
.text:00404DFC                 pop     esi
.text:00404DFD                 pop     edi
.text:00404DFE                 pop     ebp
.text:00404DFF                 retn
.text:00404E00 ; ---------------------------------------------------------------------------
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_404C80+135↑j
.text:00404E00                 mov     esi, offset dword_4072A0
.text:00404E05                 jmp     short loc_404DB7
.text:00404E07 ; ---------------------------------------------------------------------------
.text:00404E07
.text:00404E07 loc_404E07:                             ; CODE XREF: sub_404C80+B7↑j
.text:00404E07                 mov     esi, offset dword_4072A0
.text:00404E0C                 jmp     loc_404D3D
.text:00404E11 ; ---------------------------------------------------------------------------
.text:00404E11
.text:00404E11 loc_404E11:                             ; CODE XREF: sub_404C80+45↑j
.text:00404E11                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404E18                 call    sub_403820
.text:00404E1D                 mov     off_40602C, eax
.text:00404E22                 mov     edi, dword_406024
.text:00404E28                 mov     ebx, eax
.text:00404E2A                 mov     ecx, off_406028
.text:00404E30                 mov     [eax], edi
.text:00404E32                 mov     [eax+4], ecx
.text:00404E35                 jmp     loc_404CCB
.text:00404E3A ; ---------------------------------------------------------------------------
.text:00404E3A
.text:00404E3A loc_404E3A:                             ; CODE XREF: sub_404C80+18↑j
.text:00404E3A                 call    abort
.text:00404E3F ; ---------------------------------------------------------------------------
.text:00404E3F
.text:00404E3F loc_404E3F:                             ; CODE XREF: sub_404C80+33↑j
.text:00404E3F                 call    sub_405370
.text:00404E3F sub_404C80      endp
.text:00404E3F
.text:00404E3F ; ---------------------------------------------------------------------------
.text:00404E44                 align 10h
.text:00404E50 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404E50                                         ; DATA XREF: .data:Buffer↓o
.text:00404E82 ; const char aSSS[12]
.text:00404E82 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_405140+50↓o
.text:00404E8E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00404E9E                 db 12h dup(90h)
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0
.text:00404EB0 sub_404EB0      proc near               ; DATA XREF: sub_405140+100↓o
.text:00404EB0                 push    esp
.text:00404EB1                 push    69207369h
.text:00404EB6                 jnb     short loc_404ED8
.text:00404EB8                 db      66h
.text:00404EB8                 jb      short near ptr 4F20h
.text:00404EBB                 and     gs:[ebx+6Fh], dh
.text:00404EBF                 db      66h
.text:00404EBF                 jz      short near ptr 4F39h
.text:00404EC2                 popa
.text:00404EC3                 jb      short loc_404F2A
.text:00404EC5                 cmp     esp, [eax]
.text:00404EC7                 jnb     short near ptr loc_404F2C+2
.text:00404EC9                 and     gs:[eax+ebp*2+65h], dh
.text:00404ECE                 and     [ebx+6Fh], dh
.text:00404ED1                 jnz     short loc_404F45
.text:00404ED3                 arpl    [ebp+20h], sp
.text:00404ED6                 outsw
.text:00404ED8
.text:00404ED8 loc_404ED8:                             ; CODE XREF: sub_404EB0+6↑j
.text:00404ED8                 jb      short loc_404EFA
.text:00404EDA                 arpl    [edi+70h], bp
.text:00404EDD                 jns     short loc_404F48
.text:00404EDF                 outsb
.text:00404EE0                 and     [bp+di+6Fh], ah
.text:00404EE4                 outsb
.text:00404EE5                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:00404EEE                 and     [eax+ebp*2+65h], dl
.text:00404EF2                 jb      short near ptr loc_404F58+1
.text:00404EF4                 and     [ecx+73h], ch
.text:00404EF7                 and     [esi+4Fh], cl
.text:00404EFA
.text:00404EFA loc_404EFA:                             ; CODE XREF: sub_404EB0:loc_404ED8↑j
.text:00404EFA                 or      dh, [edi+61h]
.text:00404EFD                 jb      short loc_404F71
.text:00404EFF                 popa
.text:00404F00                 outsb
.text:00404F01                 jz      short loc_404F7C
.text:00404F03                 cmp     esp, [eax]
.text:00404F05                 outsb
.text:00404F06                 outsd
.text:00404F07                 jz      short loc_404F29
.text:00404F09                 db      65h
.text:00404F09                 jbe     short loc_404F71
.text:00404F0C                 outsb
.text:00404F0D                 and     [esi+6Fh], ah
.text:00404F10                 jb      short near ptr loc_404F30+2
.text:00404F12                 dec     ebp
.text:00404F13                 inc     ebp
.text:00404F14                 push    edx
.text:00404F15                 inc     ebx
.text:00404F16                 dec     eax
.text:00404F17                 inc     ecx
.text:00404F18                 dec     esi
.text:00404F19                 push    esp
.text:00404F1A                 inc     ecx
.text:00404F1B                 inc     edx
.text:00404F1C                 dec     ecx
.text:00404F1D                 dec     esp
.text:00404F1E                 dec     ecx
.text:00404F1F                 push    esp
.text:00404F20                 pop     ecx
.text:00404F21                 and     [edi+72h], ch
.text:00404F24                 and     [esi+49h], al
.text:00404F27                 push    esp
.text:00404F28                 dec     esi
.text:00404F29
.text:00404F29 loc_404F29:                             ; CODE XREF: sub_404EB0+57↑j
.text:00404F29                 inc     ebp
.text:00404F2A
.text:00404F2A loc_404F2A:                             ; CODE XREF: sub_404EB0+13↑j
.text:00404F2A                 push    ebx
.text:00404F2B                 push    ebx
.text:00404F2C
.text:00404F2C loc_404F2C:                             ; CODE XREF: sub_404EB0+17↑j
.text:00404F2C                 and     [esi+4Fh], al
.text:00404F2F                 push    edx
.text:00404F30
.text:00404F30 loc_404F30:                             ; CODE XREF: sub_404EB0+60↑j
.text:00404F30                 and     [ecx+20h], al
.text:00404F33                 push    eax
.text:00404F34                 inc     ecx
.text:00404F35                 push    edx
.text:00404F36                 push    esp
.text:00404F37                 dec     ecx
.text:00404F38                 inc     ebx
.text:00404F39                 push    ebp
.text:00404F3A                 dec     esp
.text:00404F3B                 inc     ecx
.text:00404F3C                 push    edx
.text:00404F3D                 and     [eax+55h], dl
.text:00404F40                 push    edx
.text:00404F41                 push    eax
.text:00404F42                 dec     edi
.text:00404F43                 push    ebx
.text:00404F44                 inc     ebp
.text:00404F45
.text:00404F45 loc_404F45:                             ; CODE XREF: sub_404EB0+21↑j
.text:00404F45                 or      al, cs:[eax]
.text:00404F48
.text:00404F48 loc_404F48:                             ; CODE XREF: sub_404EB0+2D↑j
.text:00404F48                                         ; DATA XREF: sub_405140:loc_405281↓o
.text:00404F48                 push    edi
.text:00404F49                 jb      short near ptr loc_404FB3+1
.text:00404F4B                 jz      short near ptr loc_404FC0+1
.text:00404F4D                 outs    dx, byte ptr gs:[esi]
.text:00404F4F                 and     [edx+79h], ah
.text:00404F52                 and     ds:6E612073h, ah
.text:00404F58
.text:00404F58 loc_404F58:                             ; CODE XREF: sub_404EB0+42↑j
.text:00404F58                 and     fs:0A2E73h, ah
.text:00404F5F
.text:00404F5F loc_404F5F:                             ; DATA XREF: sub_405140:loc_40528D↓o
.text:00404F5F                 push    edi
.text:00404F60                 jb      short near ptr loc_404FCA+1
.text:00404F62                 jz      short loc_404FD8
.text:00404F64                 outs    dx, byte ptr gs:[esi]
.text:00404F66                 and     [edx+79h], ah
.text:00404F69                 and     ds:25202C73h, ah
.text:00404F6F                 jnb     short near ptr loc_404F9A+3
.text:00404F71
.text:00404F71 loc_404F71:                             ; CODE XREF: sub_404EB0+4D↑j
.text:00404F71                                         ; sub_404EB0+59↑j
.text:00404F71                 and     [ecx+6Eh], ah
.text:00404F74                 and     fs:0A2E73h, ah
.text:00404F7B                 nop
.text:00404F7C
.text:00404F7C loc_404F7C:                             ; CODE XREF: sub_404EB0+51↑j
.text:00404F7C                 nop
.text:00404F7D                 nop
.text:00404F7E                 nop
.text:00404F7F                 nop
.text:00404F80                 nop
.text:00404F81                 nop
.text:00404F82                 nop
.text:00404F83                 nop
.text:00404F84                 nop
.text:00404F85                 nop
.text:00404F86                 nop
.text:00404F87                 nop
.text:00404F88                 nop
.text:00404F89                 nop
.text:00404F8A                 nop
.text:00404F8B                 nop
.text:00404F8C                 nop
.text:00404F8D                 nop
.text:00404F8E                 nop
.text:00404F8F                 nop
.text:00404F8F sub_404EB0      endp ; sp-analysis failed
.text:00404F8F
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90
.text:00404F90 sub_404F90      proc near               ; DATA XREF: sub_405140:loc_405299↓o
.text:00404F90                 push    edi
.text:00404F91                 jb      short near ptr loc_404FFA+2
.text:00404F93                 jz      short near ptr loc_405008+1
.text:00404F95                 outs    dx, byte ptr gs:[esi]
.text:00404F97                 and     [edx+79h], ah
.text:00404F9A
.text:00404F9A loc_404F9A:                             ; CODE XREF: sub_404EB0+BF↑j
.text:00404F9A                 and     ds:25202C73h, ah
.text:00404FA0                 jnb     short near ptr loc_404FCD+1
.text:00404FA2                 and     ds:610A2C73h, ah
.text:00404FA8                 outsb
.text:00404FA9                 and     fs:0A2E73h, ah
.text:00404FB0
.text:00404FB0 loc_404FB0:                             ; DATA XREF: sub_405140:loc_4052A5↓o
.text:00404FB0                 push    edi
.text:00404FB1                 jb      short loc_40501C
.text:00404FB3
.text:00404FB3 loc_404FB3:                             ; CODE XREF: sub_404EB0+99↑j
.text:00404FB3                 jz      short loc_405029
.text:00404FB5                 outs    dx, byte ptr gs:[esi]
.text:00404FB7                 and     [edx+79h], ah
.text:00404FBA                 and     ds:25202C73h, ah
.text:00404FC0
.text:00404FC0 loc_404FC0:                             ; CODE XREF: sub_404EB0+9B↑j
.text:00404FC0                 jnb     short loc_404FEE
.text:00404FC2                 and     ds:250A2C73h, ah
.text:00404FC8                 jnb     short near ptr loc_404FF5+1
.text:00404FCA
.text:00404FCA loc_404FCA:                             ; CODE XREF: sub_404EB0+B0↑j
.text:00404FCA                 and     [ecx+6Eh], ah
.text:00404FCD
.text:00404FCD loc_404FCD:                             ; CODE XREF: sub_404F90+10↑j
.text:00404FCD                 and     fs:0A2E73h, ah
.text:00404FD4                 nop
.text:00404FD5                 nop
.text:00404FD6                 nop
.text:00404FD7                 nop
.text:00404FD8
.text:00404FD8 loc_404FD8:                             ; CODE XREF: sub_404EB0+B2↑j
.text:00404FD8                 nop
.text:00404FD9                 nop
.text:00404FDA                 nop
.text:00404FDB                 nop
.text:00404FDC                 nop
.text:00404FDD                 nop
.text:00404FDE                 nop
.text:00404FDF                 nop
.text:00404FE0                 nop
.text:00404FE1                 nop
.text:00404FE2                 nop
.text:00404FE3                 nop
.text:00404FE4                 nop
.text:00404FE5                 nop
.text:00404FE6                 nop
.text:00404FE7                 nop
.text:00404FE8                 nop
.text:00404FE9                 nop
.text:00404FEA                 nop
.text:00404FEB                 nop
.text:00404FEC                 nop
.text:00404FED                 nop
.text:00404FEE
.text:00404FEE loc_404FEE:                             ; CODE XREF: sub_404F90:loc_404FC0↑j
.text:00404FEE                 nop
.text:00404FEF                 nop
.text:00404FEF sub_404F90      endp ; sp-analysis failed
.text:00404FEF
.text:00404FF0
.text:00404FF0 ; =============== S U B R O U T I N E =======================================
.text:00404FF0
.text:00404FF0
.text:00404FF0 sub_404FF0      proc near               ; DATA XREF: sub_405140:loc_4052B1↓o
.text:00404FF0                 push    edi
.text:00404FF1                 jb      short loc_40505C
.text:00404FF3                 jz      short loc_405069
.text:00404FF5
.text:00404FF5 loc_404FF5:                             ; CODE XREF: sub_404F90+38↑j
.text:00404FF5                 outs    dx, byte ptr gs:[esi]
.text:00404FF7                 and     [edx+79h], ah
.text:00404FFA
.text:00404FFA loc_404FFA:                             ; CODE XREF: sub_404F90+1↑j
.text:00404FFA                 and     ds:25202C73h, ah
.text:00405000                 jnb     short loc_40502E
.text:00405002                 and     ds:250A2C73h, ah
.text:00405008
.text:00405008 loc_405008:                             ; CODE XREF: sub_404F90+3↑j
.text:00405008                 jnb     short near ptr loc_405035+1
.text:0040500A                 and     ds:61202C73h, ah
.text:00405010                 outsb
.text:00405011                 and     fs:0A2E73h, ah
.text:00405018                 nop
.text:00405019                 nop
.text:0040501A                 nop
.text:0040501B                 nop
.text:0040501C
.text:0040501C loc_40501C:                             ; CODE XREF: sub_404F90+21↑j
.text:0040501C                 nop
.text:0040501D                 nop
.text:0040501E                 nop
.text:0040501F                 nop
.text:00405020                 nop
.text:00405021                 nop
.text:00405022                 nop
.text:00405023                 nop
.text:00405024                 nop
.text:00405025                 nop
.text:00405026                 nop
.text:00405027                 nop
.text:00405028                 nop
.text:00405029
.text:00405029 loc_405029:                             ; CODE XREF: sub_404F90:loc_404FB3↑j
.text:00405029                 nop
.text:0040502A                 nop
.text:0040502B                 nop
.text:0040502C                 nop
.text:0040502D                 nop
.text:0040502E
.text:0040502E loc_40502E:                             ; CODE XREF: sub_404FF0+10↑j
.text:0040502E                 nop
.text:0040502F                 nop
.text:0040502F sub_404FF0      endp ; sp-analysis failed
.text:0040502F
.text:00405030
.text:00405030 ; =============== S U B R O U T I N E =======================================
.text:00405030
.text:00405030
.text:00405030 sub_405030      proc near               ; DATA XREF: sub_405140:loc_4052BD↓o
.text:00405030                 push    edi
.text:00405031                 jb      short near ptr loc_405099+3
.text:00405033                 jz      short loc_4050A9
.text:00405035
.text:00405035 loc_405035:                             ; CODE XREF: sub_404FF0:loc_405008↑j
.text:00405035                 outs    dx, byte ptr gs:[esi]
.text:00405037                 and     [edx+79h], ah
.text:0040503A                 and     ds:25202C73h, ah
.text:00405040                 jnb     short loc_40506E
.text:00405042                 and     ds:250A2C73h, ah
.text:00405048                 jnb     short near ptr loc_405075+1
.text:0040504A                 and     ds:25202C73h, ah
.text:00405050                 jnb     short near ptr loc_40507A+4
.text:00405052                 and     [ecx+6Eh], ah
.text:00405055                 and     fs:0A2E73h, ah
.text:0040505C
.text:0040505C loc_40505C:                             ; CODE XREF: sub_404FF0+1↑j
.text:0040505C                 nop
.text:0040505D                 nop
.text:0040505E                 nop
.text:0040505F                 nop
.text:00405060                 nop
.text:00405061                 nop
.text:00405062                 nop
.text:00405063                 nop
.text:00405064                 nop
.text:00405065                 nop
.text:00405066                 nop
.text:00405067                 nop
.text:00405068                 nop
.text:00405069
.text:00405069 loc_405069:                             ; CODE XREF: sub_404FF0+3↑j
.text:00405069                 nop
.text:0040506A                 nop
.text:0040506B                 nop
.text:0040506C                 nop
.text:0040506D                 nop
.text:0040506E
.text:0040506E loc_40506E:                             ; CODE XREF: sub_405030+10↑j
.text:0040506E                 nop
.text:0040506F                 nop
.text:0040506F sub_405030      endp ; sp-analysis failed
.text:0040506F
.text:00405070
.text:00405070 ; =============== S U B R O U T I N E =======================================
.text:00405070
.text:00405070
.text:00405070 sub_405070      proc near               ; DATA XREF: sub_405140:loc_4052C9↓o
.text:00405070                 push    edi
.text:00405071                 jb      short near ptr loc_4050DA+2
.text:00405073                 jz      short near ptr loc_4050E4+5
.text:00405075
.text:00405075 loc_405075:                             ; CODE XREF: sub_405030+18↑j
.text:00405075                 outs    dx, byte ptr gs:[esi]
.text:00405077                 and     [edx+79h], ah
.text:0040507A
.text:0040507A loc_40507A:                             ; CODE XREF: sub_405030+20↑j
.text:0040507A                 and     ds:25202C73h, ah
.text:00405080                 jnb     short loc_4050AE
.text:00405082                 and     ds:250A2C73h, ah
.text:00405088                 jnb     short near ptr loc_4050B5+1
.text:0040508A                 and     ds:25202C73h, ah
.text:00405090                 jnb     short near ptr loc_4050BA+4
.text:00405092                 and     ds:610A2C73h, ah
.text:00405098                 outsb
.text:00405099
.text:00405099 loc_405099:                             ; CODE XREF: sub_405030+1↑j
.text:00405099                 and     fs:0A2E73h, ah
.text:004050A0                 nop
.text:004050A1                 nop
.text:004050A2                 nop
.text:004050A3                 nop
.text:004050A4                 nop
.text:004050A5                 nop
.text:004050A6                 nop
.text:004050A7                 nop
.text:004050A8                 nop
.text:004050A9
.text:004050A9 loc_4050A9:                             ; CODE XREF: sub_405030+3↑j
.text:004050A9                 nop
.text:004050AA                 nop
.text:004050AB                 nop
.text:004050AC                 nop
.text:004050AD                 nop
.text:004050AE
.text:004050AE loc_4050AE:                             ; CODE XREF: sub_405070+10↑j
.text:004050AE                 nop
.text:004050AF                 nop
.text:004050AF sub_405070      endp ; sp-analysis failed
.text:004050AF
.text:004050B0
.text:004050B0 ; =============== S U B R O U T I N E =======================================
.text:004050B0
.text:004050B0
.text:004050B0 sub_4050B0      proc near               ; DATA XREF: sub_405140:loc_4052D5↓o
.text:004050B0                 push    edi
.text:004050B1                 jb      short near ptr loc_40511A+2
.text:004050B3                 jz      short near ptr loc_405125+4
.text:004050B5
.text:004050B5 loc_4050B5:                             ; CODE XREF: sub_405070+18↑j
.text:004050B5                 outs    dx, byte ptr gs:[esi]
.text:004050B7                 and     [edx+79h], ah
.text:004050BA
.text:004050BA loc_4050BA:                             ; CODE XREF: sub_405070+20↑j
.text:004050BA                 and     ds:25202C73h, ah
.text:004050C0                 jnb     short near ptr loc_4050EA+4
.text:004050C2                 and     ds:250A2C73h, ah
.text:004050C8                 jnb     short near ptr loc_4050F5+1
.text:004050CA                 and     ds:25202C73h, ah
.text:004050D0                 jnb     short near ptr loc_4050FA+4
.text:004050D2                 and     ds:250A2C73h, ah
.text:004050D8                 jnb     short near ptr loc_405102+4
.text:004050DA
.text:004050DA loc_4050DA:                             ; CODE XREF: sub_405070+1↑j
.text:004050DA                 and     [ecx+6Eh], ah
.text:004050DD                 and     fs:0A2E73h, ah
.text:004050E4
.text:004050E4 loc_4050E4:                             ; CODE XREF: sub_405070+3↑j
.text:004050E4                 lea     esi, [esi+0]
.text:004050EA
.text:004050EA loc_4050EA:                             ; CODE XREF: sub_4050B0+10↑j
.text:004050EA                 lea     edi, [edi+0]
.text:004050F0
.text:004050F0 loc_4050F0:                             ; DATA XREF: sub_405140:def_4051AD↓o
.text:004050F0                 push    edi
.text:004050F1                 jb      short near ptr loc_40515B+1
.text:004050F3                 jz      short near ptr loc_405168+1
.text:004050F5
.text:004050F5 loc_4050F5:                             ; CODE XREF: sub_4050B0+18↑j
.text:004050F5                 outs    dx, byte ptr gs:[esi]
.text:004050F7                 and     [edx+79h], ah
.text:004050FA
.text:004050FA loc_4050FA:                             ; CODE XREF: sub_4050B0+20↑j
.text:004050FA                 and     ds:25202C73h, ah
.text:00405100                 jnb     short near ptr loc_40512C+2
.text:00405102
.text:00405102 loc_405102:                             ; CODE XREF: sub_4050B0+28↑j
.text:00405102                 and     ds:250A2C73h, ah
.text:00405108                 jnb     short near ptr loc_405133+3
.text:0040510A                 and     ds:25202C73h, ah
.text:00405110                 jnb     short near ptr loc_405139+5
.text:00405112                 and     ds:250A2C73h, ah
.text:00405118                 jnb     short near ptr loc_405144+2
.text:0040511A
.text:0040511A loc_40511A:                             ; CODE XREF: sub_4050B0+1↑j
.text:0040511A                 and     ds:61202C73h, ah
.text:00405120                 outsb
.text:00405121                 and     fs:[edi+74h], ch
.text:00405125
.text:00405125 loc_405125:                             ; CODE XREF: sub_4050B0+3↑j
.text:00405125                 push    2E737265h
.text:0040512A                 or      al, [eax]
.text:0040512C
.text:0040512C loc_40512C:                             ; CODE XREF: sub_4050B0+50↑j
.text:0040512C                                         ; DATA XREF: sub_405140+1B5↓o
.text:0040512C                 and     eax, 73252073h
.text:00405131                 or      al, [eax]
.text:00405133
.text:00405133 loc_405133:                             ; CODE XREF: sub_4050B0+58↑j
.text:00405133                 lea     esi, [esi+0]
.text:00405139
.text:00405139 loc_405139:                             ; CODE XREF: sub_4050B0+60↑j
.text:00405139                 lea     edi, [edi+0]
.text:00405139 sub_4050B0      endp ; sp-analysis failed
.text:00405139
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140
.text:00405140 ; int __cdecl sub_405140(FILE *, FILE *, int, int, va_list)
.text:00405140 sub_405140      proc near               ; CODE XREF: sub_4032E0+A5↑p
.text:00405140                                         ; .text:0040533A↓p
.text:00405140
.text:00405140 Stream          = dword ptr -2Ch
.text:00405140 Format          = dword ptr -28h
.text:00405140 ArgList         = dword ptr -24h
.text:00405140 var_20          = dword ptr -20h
.text:00405140 var_1C          = dword ptr -1Ch
.text:00405140 var_14          = dword ptr -14h
.text:00405140 arg_0           = dword ptr  4
.text:00405140 arg_4           = dword ptr  8
.text:00405140 arg_8           = dword ptr  0Ch
.text:00405140 arg_C           = dword ptr  10h
.text:00405140 arg_10          = dword ptr  14h
.text:00405140
.text:00405140                 push    ebp
.text:00405141                 push    edi
.text:00405142                 push    esi
.text:00405143                 push    ebx
.text:00405144
.text:00405144 loc_405144:                             ; CODE XREF: sub_4050B0+68↑j
.text:00405144                 sub     esp, 1Ch
.text:00405147                 xor     ebx, ebx
.text:00405149                 mov     edi, [esp+2Ch+arg_10]
.text:0040514D                 mov     edx, [esp+2Ch+arg_8]
.text:00405151                 mov     esi, [esp+2Ch+arg_0]
.text:00405155                 mov     eax, [edi]
.text:00405157                 mov     ecx, [esp+2Ch+arg_4]
.text:0040515B
.text:0040515B loc_40515B:                             ; CODE XREF: sub_4050B0+41↑j
.text:0040515B                 mov     [esp+2Ch+var_14], edx
.text:0040515F                 mov     ebp, [esp+2Ch+arg_C]
.text:00405163                 lea     edx, [edi+4]
.text:00405166                 test    eax, eax
.text:00405168
.text:00405168 loc_405168:                             ; CODE XREF: sub_4050B0+43↑j
.text:00405168                 jz      short loc_40517C
.text:0040516A                 lea     esi, [esi+0]
.text:00405170
.text:00405170 loc_405170:                             ; CODE XREF: sub_405140+3A↓j
.text:00405170                 mov     eax, edx
.text:00405172                 inc     ebx
.text:00405173                 mov     eax, [eax]
.text:00405175                 add     edx, 4
.text:00405178                 test    eax, eax
.text:0040517A                 jnz     short loc_405170
.text:0040517C
.text:0040517C loc_40517C:                             ; CODE XREF: sub_405140:loc_405168↑j
.text:0040517C                 test    ecx, ecx
.text:0040517E                 jz      loc_4052ED
.text:00405184                 mov     [esp+2Ch+var_1C], ebp
.text:00405188                 mov     edx, [esp+2Ch+var_14]
.text:0040518C                 mov     [esp+2Ch+ArgList], ecx
.text:00405190                 mov     [esp+2Ch+Format], offset aSSS ; Format
.text:00405198                 mov     [esp+2Ch+var_20], edx
.text:0040519C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040519F                 call    fprintf
.text:004051A4
.text:004051A4 loc_4051A4:                             ; CODE XREF: sub_405140+1C9↓j
.text:004051A4                 cmp     ebx, 9          ; switch 10 cases
.text:004051A7                 ja      def_4051AD      ; jumptable 004051AD default case
.text:004051AD                 jmp     ds:jpt_4051AD[ebx*4] ; switch jump
.text:004051AD ; ---------------------------------------------------------------------------
.text:004051B4 jpt_4051AD      dd offset loc_4051DC    ; DATA XREF: sub_405140+6D↑r
.text:004051B4                 dd offset loc_4051E1    ; jump table for switch statement
.text:004051B4                 dd offset loc_405281
.text:004051B4                 dd offset loc_40528D
.text:004051B4                 dd offset loc_405299
.text:004051B4                 dd offset loc_4052A5
.text:004051B4                 dd offset loc_4052B1
.text:004051B4                 dd offset loc_4052BD
.text:004051B4                 dd offset loc_4052C9
.text:004051B4                 dd offset loc_4052D5
.text:004051DC ; ---------------------------------------------------------------------------
.text:004051DC
.text:004051DC loc_4051DC:                             ; CODE XREF: sub_405140+6D↑j
.text:004051DC                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:004051DC                 call    abort           ; jumptable 004051AD case 0
.text:004051E1 ; ---------------------------------------------------------------------------
.text:004051E1
.text:004051E1 loc_4051E1:                             ; CODE XREF: sub_405140+6D↑j
.text:004051E1                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:004051E1                 mov     [esp+2Ch+Stream], 404E8Eh ; jumptable 004051AD case 1
.text:004051E8                 nop
.text:004051E9                 lea     esi, [esi+0]
.text:004051F0
.text:004051F0 loc_4051F0:                             ; CODE XREF: sub_405140+148↓j
.text:004051F0                                         ; sub_405140+154↓j ...
.text:004051F0                 call    ds:libintl_gettext
.text:004051F6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004051FA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004051FD                 mov     [esp+2Ch+Format], eax ; Format
.text:00405201                 call    vfprintf
.text:00405206                 mov     ebx, [esi+4]
.text:00405209                 dec     ebx
.text:0040520A                 test    ebx, ebx
.text:0040520C                 mov     [esi+4], ebx
.text:0040520F                 js      short loc_40526F
.text:00405211                 mov     edi, [esi]
.text:00405213                 mov     byte ptr [edi], 0Ah
.text:00405216                 inc     dword ptr [esi]
.text:00405218
.text:00405218 loc_405218:                             ; CODE XREF: sub_405140+13F↓j
.text:00405218                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040521C                 mov     edx, Buffer
.text:00405222                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00405225                 call    fputs
.text:0040522A                 mov     ebp, [esi+4]
.text:0040522D                 dec     ebp
.text:0040522E                 test    ebp, ebp
.text:00405230                 mov     [esi+4], ebp
.text:00405233                 js      short loc_40525D
.text:00405235                 mov     ecx, [esi]
.text:00405237                 mov     byte ptr [ecx], 0Ah
.text:0040523A                 inc     dword ptr [esi]
.text:0040523C
.text:0040523C loc_40523C:                             ; CODE XREF: sub_405140+12D↓j
.text:0040523C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00405240                 mov     [esp+2Ch+Stream], offset sub_404EB0
.text:00405247                 call    ds:libintl_gettext
.text:0040524D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00405251                 add     esp, 1Ch
.text:00405254                 pop     ebx
.text:00405255                 pop     esi
.text:00405256                 pop     edi
.text:00405257                 pop     ebp
.text:00405258                 jmp     fputs
.text:0040525D ; ---------------------------------------------------------------------------
.text:0040525D
.text:0040525D loc_40525D:                             ; CODE XREF: sub_405140+F3↑j
.text:0040525D                 mov     [esp+2Ch+Format], esi ; File
.text:00405261                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405268                 call    _flsbuf
.text:0040526D                 jmp     short loc_40523C
.text:0040526F ; ---------------------------------------------------------------------------
.text:0040526F
.text:0040526F loc_40526F:                             ; CODE XREF: sub_405140+CF↑j
.text:0040526F                 mov     [esp+2Ch+Format], esi ; File
.text:00405273                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040527A                 call    _flsbuf
.text:0040527F                 jmp     short loc_405218
.text:00405281 ; ---------------------------------------------------------------------------
.text:00405281
.text:00405281 loc_405281:                             ; CODE XREF: sub_405140+6D↑j
.text:00405281                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:00405281                 mov     [esp+2Ch+Stream], offset loc_404F48 ; jumptable 004051AD case 2
.text:00405288                 jmp     loc_4051F0
.text:0040528D ; ---------------------------------------------------------------------------
.text:0040528D
.text:0040528D loc_40528D:                             ; CODE XREF: sub_405140+6D↑j
.text:0040528D                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:0040528D                 mov     [esp+2Ch+Stream], offset loc_404F5F ; jumptable 004051AD case 3
.text:00405294                 jmp     loc_4051F0
.text:00405299 ; ---------------------------------------------------------------------------
.text:00405299
.text:00405299 loc_405299:                             ; CODE XREF: sub_405140+6D↑j
.text:00405299                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:00405299                 mov     [esp+2Ch+Stream], offset sub_404F90 ; jumptable 004051AD case 4
.text:004052A0                 jmp     loc_4051F0
.text:004052A5 ; ---------------------------------------------------------------------------
.text:004052A5
.text:004052A5 loc_4052A5:                             ; CODE XREF: sub_405140+6D↑j
.text:004052A5                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:004052A5                 mov     [esp+2Ch+Stream], offset loc_404FB0 ; jumptable 004051AD case 5
.text:004052AC                 jmp     loc_4051F0
.text:004052B1 ; ---------------------------------------------------------------------------
.text:004052B1
.text:004052B1 loc_4052B1:                             ; CODE XREF: sub_405140+6D↑j
.text:004052B1                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:004052B1                 mov     [esp+2Ch+Stream], offset sub_404FF0 ; jumptable 004051AD case 6
.text:004052B8                 jmp     loc_4051F0
.text:004052BD ; ---------------------------------------------------------------------------
.text:004052BD
.text:004052BD loc_4052BD:                             ; CODE XREF: sub_405140+6D↑j
.text:004052BD                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:004052BD                 mov     [esp+2Ch+Stream], offset sub_405030 ; jumptable 004051AD case 7
.text:004052C4                 jmp     loc_4051F0
.text:004052C9 ; ---------------------------------------------------------------------------
.text:004052C9
.text:004052C9 loc_4052C9:                             ; CODE XREF: sub_405140+6D↑j
.text:004052C9                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:004052C9                 mov     [esp+2Ch+Stream], offset sub_405070 ; jumptable 004051AD case 8
.text:004052D0                 jmp     loc_4051F0
.text:004052D5 ; ---------------------------------------------------------------------------
.text:004052D5
.text:004052D5 loc_4052D5:                             ; CODE XREF: sub_405140+6D↑j
.text:004052D5                                         ; DATA XREF: sub_405140:jpt_4051AD↑o
.text:004052D5                 mov     [esp+2Ch+Stream], offset sub_4050B0 ; jumptable 004051AD case 9
.text:004052DC                 jmp     loc_4051F0
.text:004052E1 ; ---------------------------------------------------------------------------
.text:004052E1
.text:004052E1 def_4051AD:                             ; CODE XREF: sub_405140+67↑j
.text:004052E1                 mov     [esp+2Ch+Stream], offset loc_4050F0 ; jumptable 004051AD default case
.text:004052E8                 jmp     loc_4051F0
.text:004052ED ; ---------------------------------------------------------------------------
.text:004052ED
.text:004052ED loc_4052ED:                             ; CODE XREF: sub_405140+3E↑j
.text:004052ED                 mov     [esp+2Ch+var_20], ebp
.text:004052F1                 mov     ecx, [esp+2Ch+var_14]
.text:004052F5                 mov     [esp+2Ch+Format], offset loc_40512C ; Format
.text:004052FD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405300                 mov     [esp+2Ch+ArgList], ecx
.text:00405304                 call    fprintf
.text:00405309                 jmp     loc_4051A4
.text:00405309 sub_405140      endp
.text:00405309
.text:00405309 ; ---------------------------------------------------------------------------
.text:0040530E                 align 10h
.text:00405310                 sub     esp, 1Ch
.text:00405313                 mov     edx, [esp+2Ch]
.text:00405317                 lea     ecx, [esp+30h]
.text:0040531B                 mov     [esp+10h], ecx
.text:0040531F                 mov     ecx, [esp+28h]
.text:00405323                 mov     [esp+0Ch], edx
.text:00405327                 mov     edx, [esp+24h]
.text:0040532B                 mov     [esp+8], ecx
.text:0040532F                 mov     [esp+4], edx
.text:00405333                 mov     edx, [esp+20h]
.text:00405337                 mov     [esp], edx
.text:0040533A                 call    sub_405140
.text:0040533F                 add     esp, 1Ch
.text:00405342                 retn
.text:00405342 ; ---------------------------------------------------------------------------
.text:00405343                 align 10h
.text:00405350 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405370+3↓o
.text:00405361 ; const char aS_0[]
.text:00405361 aS_0            db '%s',0               ; DATA XREF: sub_405370+10↓o
.text:00405364                 align 10h
.text:00405370
.text:00405370 ; =============== S U B R O U T I N E =======================================
.text:00405370
.text:00405370 ; Attributes: noreturn
.text:00405370
.text:00405370 sub_405370      proc near               ; CODE XREF: sub_4037E0:loc_403819↑p
.text:00405370                                         ; sub_403820+24↑p ...
.text:00405370
.text:00405370 Code            = dword ptr -1Ch
.text:00405370 ErrorMessage    = dword ptr -18h
.text:00405370 var_14          = dword ptr -14h
.text:00405370 var_10          = byte ptr -10h
.text:00405370
.text:00405370                 sub     esp, 1Ch
.text:00405373                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040537A                 call    ds:libintl_gettext
.text:00405380                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00405388                 mov     edx, Code
.text:0040538E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405396                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040539A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040539D                 call    sub_405400
.text:004053A2                 call    abort
.text:004053A2 sub_405370      endp
.text:004053A2
.text:004053A2 ; ---------------------------------------------------------------------------
.text:004053A7                 align 10h
.text:004053B0
.text:004053B0 ; =============== S U B R O U T I N E =======================================
.text:004053B0
.text:004053B0 ; Attributes: thunk
.text:004053B0
.text:004053B0 libintl_bindtextdomain proc near
.text:004053B0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004053B0 libintl_bindtextdomain endp
.text:004053B0
.text:004053B0 ; ---------------------------------------------------------------------------
.text:004053B6                 align 10h
.text:004053C0                 jmp     ds:libintl_textdomain
.text:004053C0 ; ---------------------------------------------------------------------------
.text:004053C6                 align 10h
.text:004053D0                 jmp     ds:libintl_gettext
.text:004053D0 ; ---------------------------------------------------------------------------
.text:004053D6                 align 10h
.text:004053E0 ; const char aS_1[]
.text:004053E0 aS_1            db ': %s',0             ; DATA XREF: sub_405400+B8↓o
.text:004053E0                                         ; sub_405504+122↓o
.text:004053E5 aUnknownSystemE db 'Unknown system error',0
.text:004053E5                                         ; DATA XREF: sub_405400:loc_4054CD↓o
.text:004053E5                                         ; sub_405504:loc_40563E↓o
.text:004053FA ; const char aS_2[]
.text:004053FA aS_2            db '%s: ',0             ; DATA XREF: sub_405400:loc_4054D4↓o
.text:004053FF                 align 10h
.text:00405400
.text:00405400 ; =============== S U B R O U T I N E =======================================
.text:00405400
.text:00405400
.text:00405400 ; int __cdecl sub_405400(int Code, int ErrorMessage, char *, char)
.text:00405400 sub_405400      proc near               ; CODE XREF: sub_401340+110↑p
.text:00405400                                         ; sub_401340+1B1↑p ...
.text:00405400
.text:00405400 Stream          = dword ptr -1Ch
.text:00405400 Format          = dword ptr -18h
.text:00405400 ArgList         = dword ptr -14h
.text:00405400 Code            = dword ptr  4
.text:00405400 ErrorMessage    = dword ptr  8
.text:00405400 arg_8           = dword ptr  0Ch
.text:00405400 arg_C           = byte ptr  10h
.text:00405400
.text:00405400                 push    esi
.text:00405401                 push    ebx
.text:00405402                 sub     esp, 14h
.text:00405405                 mov     edx, ds:_iob
.text:0040540B                 mov     esi, [esp+1Ch+Code]
.text:0040540F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405413                 add     edx, 20h ; ' '
.text:00405416                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405419                 call    fflush
.text:0040541E                 mov     eax, ds:dword_407320
.text:00405423                 test    eax, eax
.text:00405425                 jz      loc_4054D4
.text:0040542B                 call    eax ; dword_407320
.text:0040542D
.text:0040542D loc_40542D:                             ; CODE XREF: sub_405400+F7↓j
.text:0040542D                 lea     edx, [esp+1Ch+arg_C]
.text:00405431                 mov     ecx, [esp+1Ch+arg_8]
.text:00405435                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405439                 mov     edx, ds:_iob
.text:0040543F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405443                 add     edx, 40h ; '@'
.text:00405446                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405449                 call    vfprintf
.text:0040544E                 inc     ds:dword_407330
.text:00405454                 test    ebx, ebx
.text:00405456                 jnz     short loc_4054A2
.text:00405458
.text:00405458 loc_405458:                             ; CODE XREF: sub_405400+CB↓j
.text:00405458                 mov     edx, ds:_iob
.text:0040545E                 lea     ecx, [edx+40h]
.text:00405461                 mov     ebx, [ecx+4]
.text:00405464                 dec     ebx
.text:00405465                 test    ebx, ebx
.text:00405467                 mov     [ecx+4], ebx
.text:0040546A                 js      short loc_405490
.text:0040546C                 mov     ecx, [edx+40h]
.text:0040546F                 mov     byte ptr [ecx], 0Ah
.text:00405472                 inc     dword ptr [edx+40h]
.text:00405475
.text:00405475 loc_405475:                             ; CODE XREF: sub_405400+A0↓j
.text:00405475                 mov     edx, ds:_iob
.text:0040547B                 add     edx, 40h ; '@'
.text:0040547E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405481                 call    fflush
.text:00405486                 test    esi, esi
.text:00405488                 jnz     short loc_4054FC
.text:0040548A                 add     esp, 14h
.text:0040548D                 pop     ebx
.text:0040548E                 pop     esi
.text:0040548F                 retn
.text:00405490 ; ---------------------------------------------------------------------------
.text:00405490
.text:00405490 loc_405490:                             ; CODE XREF: sub_405400+6A↑j
.text:00405490                 mov     [esp+1Ch+Format], ecx ; File
.text:00405494                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040549B                 call    _flsbuf
.text:004054A0                 jmp     short loc_405475
.text:004054A2 ; ---------------------------------------------------------------------------
.text:004054A2
.text:004054A2 loc_4054A2:                             ; CODE XREF: sub_405400+56↑j
.text:004054A2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004054A5                 call    strerror
.text:004054AA                 test    eax, eax
.text:004054AC                 jz      short loc_4054CD
.text:004054AE
.text:004054AE loc_4054AE:                             ; CODE XREF: sub_405400+D2↓j
.text:004054AE                 mov     [esp+1Ch+ArgList], eax
.text:004054B2                 mov     ebx, ds:_iob
.text:004054B8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:004054C0                 add     ebx, 40h ; '@'
.text:004054C3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004054C6                 call    fprintf
.text:004054CB                 jmp     short loc_405458
.text:004054CD ; ---------------------------------------------------------------------------
.text:004054CD
.text:004054CD loc_4054CD:                             ; CODE XREF: sub_405400+AC↑j
.text:004054CD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004054D2                 jmp     short loc_4054AE
.text:004054D4 ; ---------------------------------------------------------------------------
.text:004054D4
.text:004054D4 loc_4054D4:                             ; CODE XREF: sub_405400+25↑j
.text:004054D4                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:004054DC                 mov     edx, ds:_iob
.text:004054E2                 mov     ecx, ds:dword_4072F0
.text:004054E8                 add     edx, 40h ; '@'
.text:004054EB                 mov     [esp+1Ch+ArgList], ecx
.text:004054EF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004054F2                 call    fprintf
.text:004054F7                 jmp     loc_40542D
.text:004054FC ; ---------------------------------------------------------------------------
.text:004054FC
.text:004054FC loc_4054FC:                             ; CODE XREF: sub_405400+88↑j
.text:004054FC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004054FF                 call    exit
.text:004054FF sub_405400      endp
.text:004054FF
.text:00405504
.text:00405504 ; =============== S U B R O U T I N E =======================================
.text:00405504
.text:00405504
.text:00405504 ; int __cdecl sub_405504(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405504 sub_405504      proc near               ; DATA XREF: sub_405504+77↓o
.text:00405504
.text:00405504 Stream          = dword ptr -28h
.text:00405504 Format          = dword ptr -24h
.text:00405504 ArgList         = dword ptr -20h
.text:00405504 var_1C          = dword ptr -1Ch
.text:00405504 Code            = dword ptr  8
.text:00405504 ErrorMessage    = dword ptr  0Ch
.text:00405504 Str2            = dword ptr  10h
.text:00405504 arg_10          = dword ptr  14h
.text:00405504 arg_14          = dword ptr  18h
.text:00405504 arg_18          = byte ptr  1Ch
.text:00405504
.text:00405504                 and     eax, 64253A73h
.text:00405509                 cmp     ah, [eax]
.text:0040550B
.text:0040550B loc_40550B:                             ; DATA XREF: sub_405504:loc_405645↓o
.text:0040550B                 add     ds:55003A73h, ah
.text:00405511                 push    edi
.text:00405512                 push    esi
.text:00405513                 push    ebx
.text:00405514                 sub     esp, 1Ch
.text:00405517                 mov     edx, ds:dword_407360
.text:0040551D                 mov     ebp, [esp+28h+Code]
.text:00405521                 mov     edi, [esp+28h+ErrorMessage]
.text:00405525                 test    edx, edx
.text:00405527                 mov     ebx, [esp+28h+Str2]
.text:0040552B                 mov     esi, [esp+28h+arg_10]
.text:0040552F                 jz      short loc_405549
.text:00405531                 cmp     ds:dword_4072E0, esi
.text:00405537                 jz      loc_405670
.text:0040553D
.text:0040553D loc_40553D:                             ; CODE XREF: sub_405504+18D↓j
.text:0040553D                 mov     ds:Str1, ebx
.text:00405543                 mov     ds:dword_4072E0, esi
.text:00405549
.text:00405549 loc_405549:                             ; CODE XREF: sub_405504+2B↑j
.text:00405549                 mov     edx, ds:_iob
.text:0040554F                 add     edx, 20h ; ' '
.text:00405552                 mov     [esp+28h+Stream], edx ; Stream
.text:00405555                 call    fflush
.text:0040555A                 mov     eax, ds:dword_407320
.text:0040555F                 test    eax, eax
.text:00405561                 jz      loc_405645
.text:00405567                 call    eax ; dword_407320
.text:00405569
.text:00405569 loc_405569:                             ; CODE XREF: sub_405504+164↓j
.text:00405569                 test    ebx, ebx
.text:0040556B                 jz      short loc_40558E
.text:0040556D                 mov     [esp+28h+ArgList], ebx
.text:00405571                 mov     ebx, ds:_iob
.text:00405577                 mov     [esp+28h+var_1C], esi
.text:0040557B                 mov     [esp+28h+Format], offset sub_405504 ; Format
.text:00405583                 add     ebx, 40h ; '@'
.text:00405586                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405589                 call    fprintf
.text:0040558E
.text:0040558E loc_40558E:                             ; CODE XREF: sub_405504+67↑j
.text:0040558E                 mov     esi, ds:_iob
.text:00405594                 lea     edx, [esp+28h+arg_18]
.text:00405598                 mov     ecx, [esp+28h+arg_14]
.text:0040559C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004055A0                 add     esi, 40h ; '@'
.text:004055A3                 mov     [esp+28h+Format], ecx ; Format
.text:004055A7                 mov     [esp+28h+Stream], esi ; Stream
.text:004055AA                 call    vfprintf
.text:004055AF                 inc     ds:dword_407330
.text:004055B5                 test    edi, edi
.text:004055B7                 jnz     short loc_405610
.text:004055B9
.text:004055B9 loc_4055B9:                             ; CODE XREF: sub_405504+135↓j
.text:004055B9                 mov     edx, ds:_iob
.text:004055BF                 lea     ecx, [edx+40h]
.text:004055C2                 mov     ebx, [ecx+4]
.text:004055C5                 dec     ebx
.text:004055C6                 test    ebx, ebx
.text:004055C8                 mov     [ecx+4], ebx
.text:004055CB                 js      short loc_4055F7
.text:004055CD                 mov     esi, [edx+40h]
.text:004055D0                 mov     byte ptr [esi], 0Ah
.text:004055D3                 inc     dword ptr [edx+40h]
.text:004055D6
.text:004055D6 loc_4055D6:                             ; CODE XREF: sub_405504+103↓j
.text:004055D6                 mov     ecx, ds:_iob
.text:004055DC                 add     ecx, 40h ; '@'
.text:004055DF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004055E2                 call    fflush
.text:004055E7                 test    ebp, ebp
.text:004055E9                 jnz     loc_405696
.text:004055EF
.text:004055EF loc_4055EF:                             ; CODE XREF: sub_405504+173↓j
.text:004055EF                                         ; sub_405504+187↓j
.text:004055EF                 add     esp, 1Ch
.text:004055F2                 pop     ebx
.text:004055F3                 pop     esi
.text:004055F4                 pop     edi
.text:004055F5                 pop     ebp
.text:004055F6                 retn
.text:004055F7 ; ---------------------------------------------------------------------------
.text:004055F7
.text:004055F7 loc_4055F7:                             ; CODE XREF: sub_405504+C7↑j
.text:004055F7                 mov     [esp+28h+Format], ecx ; File
.text:004055FB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405602                 call    _flsbuf
.text:00405607                 jmp     short loc_4055D6
.text:00405607 ; ---------------------------------------------------------------------------
.text:00405609                 align 10h
.text:00405610
.text:00405610 loc_405610:                             ; CODE XREF: sub_405504+B3↑j
.text:00405610                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405613                 call    strerror
.text:00405618                 test    eax, eax
.text:0040561A                 jz      short loc_40563E
.text:0040561C
.text:0040561C loc_40561C:                             ; CODE XREF: sub_405504+13F↓j
.text:0040561C                 mov     [esp+28h+ArgList], eax
.text:00405620                 mov     edi, ds:_iob
.text:00405626                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040562E                 add     edi, 40h ; '@'
.text:00405631                 mov     [esp+28h+Stream], edi ; Stream
.text:00405634                 call    fprintf
.text:00405639                 jmp     loc_4055B9
.text:0040563E ; ---------------------------------------------------------------------------
.text:0040563E
.text:0040563E loc_40563E:                             ; CODE XREF: sub_405504+116↑j
.text:0040563E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405643                 jmp     short loc_40561C
.text:00405645 ; ---------------------------------------------------------------------------
.text:00405645
.text:00405645 loc_405645:                             ; CODE XREF: sub_405504+5D↑j
.text:00405645                 mov     [esp+28h+Format], (offset loc_40550B+1) ; Format
.text:0040564D                 mov     ecx, ds:_iob
.text:00405653                 mov     edx, ds:dword_4072F0
.text:00405659                 add     ecx, 40h ; '@'
.text:0040565C                 mov     [esp+28h+ArgList], edx
.text:00405660                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405663                 call    fprintf
.text:00405668                 jmp     loc_405569
.text:00405668 ; ---------------------------------------------------------------------------
.text:0040566D                 align 10h
.text:00405670
.text:00405670 loc_405670:                             ; CODE XREF: sub_405504+33↑j
.text:00405670                 mov     eax, ds:Str1
.text:00405675                 cmp     ebx, eax
.text:00405677                 jz      loc_4055EF
.text:0040567D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405681                 mov     [esp+28h+Stream], eax ; Str1
.text:00405684                 call    strcmp
.text:00405689                 test    eax, eax
.text:0040568B                 jz      loc_4055EF
.text:00405691                 jmp     loc_40553D
.text:00405696 ; ---------------------------------------------------------------------------
.text:00405696
.text:00405696 loc_405696:                             ; CODE XREF: sub_405504+E5↑j
.text:00405696                 mov     [esp+28h+Stream], ebp ; Code
.text:00405699                 call    exit
.text:00405699 sub_405504      endp ; sp-analysis failed
.text:00405699
.text:00405699 ; ---------------------------------------------------------------------------
.text:0040569E                 align 10h
.text:004056A0
.text:004056A0 ; =============== S U B R O U T I N E =======================================
.text:004056A0
.text:004056A0 ; Attributes: thunk
.text:004056A0
.text:004056A0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004056A0 mbrtowc         proc near               ; CODE XREF: sub_403B40+757↑p
.text:004056A0                 jmp     ds:__imp_mbrtowc
.text:004056A0 mbrtowc         endp
.text:004056A0
.text:004056A0 ; ---------------------------------------------------------------------------
.text:004056A6                 align 10h
.text:004056B0
.text:004056B0 ; =============== S U B R O U T I N E =======================================
.text:004056B0
.text:004056B0 ; Attributes: bp-based frame
.text:004056B0
.text:004056B0 sub_4056B0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004056B0                 push    ebp
.text:004056B1                 mov     ecx, offset dword_407000
.text:004056B6                 cmp     ecx, offset dword_407000
.text:004056BC                 mov     ebp, esp
.text:004056BE                 jnb     short loc_4056D6
.text:004056C0
.text:004056C0 loc_4056C0:                             ; CODE XREF: sub_4056B0+24↓j
.text:004056C0                 mov     edx, [ecx+4]
.text:004056C3                 mov     eax, [ecx]
.text:004056C5                 add     ecx, 8
.text:004056C8                 add     [edx+400000h], eax
.text:004056CE                 cmp     ecx, offset dword_407000
.text:004056D4                 jb      short loc_4056C0
.text:004056D6
.text:004056D6 loc_4056D6:                             ; CODE XREF: sub_4056B0+E↑j
.text:004056D6                 pop     ebp
.text:004056D7                 retn
.text:004056D7 sub_4056B0      endp
.text:004056D7
.text:004056D7 ; ---------------------------------------------------------------------------
.text:004056D8                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0 ; Attributes: bp-based frame
.text:004056E0
.text:004056E0 sub_4056E0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004056E0                                         ; TopLevelExceptionFilter+D7↑p
.text:004056E0                 push    ebp
.text:004056E1                 mov     ebp, esp
.text:004056E3                 fninit
.text:004056E5                 pop     ebp
.text:004056E6                 retn
.text:004056E6 sub_4056E0      endp
.text:004056E6
.text:004056E6 ; ---------------------------------------------------------------------------
.text:004056E7                 align 10h
.text:004056F0
.text:004056F0 ; =============== S U B R O U T I N E =======================================
.text:004056F0
.text:004056F0 ; Attributes: bp-based frame
.text:004056F0
.text:004056F0 ; void __cdecl sub_4056F0()
.text:004056F0 sub_4056F0      proc near               ; DATA XREF: .text:loc_405739↓o
.text:004056F0                                         ; sub_405780:loc_4057AE↓o
.text:004056F0                 push    ebp
.text:004056F1                 mov     ebp, esp
.text:004056F3                 sub     esp, 8
.text:004056F6                 mov     eax, off_406084
.text:004056FB                 mov     edx, [eax]
.text:004056FD                 test    edx, edx
.text:004056FF                 jnz     short loc_405705
.text:00405701
.text:00405701 loc_405701:                             ; CODE XREF: sub_4056F0+2C↓j
.text:00405701                 mov     esp, ebp
.text:00405703                 pop     ebp
.text:00405704                 retn
.text:00405705 ; ---------------------------------------------------------------------------
.text:00405705
.text:00405705 loc_405705:                             ; CODE XREF: sub_4056F0+F↑j
.text:00405705                                         ; sub_4056F0+2A↓j
.text:00405705                 call    dword ptr [eax]
.text:00405707                 mov     edx, off_406084
.text:0040570D                 mov     ecx, [edx+4]
.text:00405710                 lea     eax, [edx+4]
.text:00405713                 mov     off_406084, eax
.text:00405718                 test    ecx, ecx
.text:0040571A                 jnz     short loc_405705
.text:0040571C                 jmp     short loc_405701
.text:0040571C sub_4056F0      endp
.text:0040571C
.text:0040571C ; ---------------------------------------------------------------------------
.text:0040571E                 align 10h
.text:00405720                 push    ebp
.text:00405721                 mov     ebp, esp
.text:00405723                 sub     esp, 8
.text:00405726                 mov     [ebp-4], ebx
.text:00405729                 mov     eax, ds:dword_405A80
.text:0040572E                 cmp     eax, 0FFFFFFFFh
.text:00405731                 jz      short loc_40575C
.text:00405733
.text:00405733 loc_405733:                             ; CODE XREF: .text:00405766↓j
.text:00405733                                         ; .text:00405779↓j
.text:00405733                 test    eax, eax
.text:00405735                 mov     ebx, eax
.text:00405737                 jnz     short loc_405750
.text:00405739
.text:00405739 loc_405739:                             ; CODE XREF: .text:0040575A↓j
.text:00405739                 mov     dword ptr [esp], offset sub_4056F0
.text:00405740                 call    sub_401040
.text:00405745                 mov     ebx, [ebp-4]
.text:00405748                 mov     esp, ebp
.text:0040574A                 pop     ebp
.text:0040574B                 retn
.text:0040574B ; ---------------------------------------------------------------------------
.text:0040574C                 align 10h
.text:00405750
.text:00405750 loc_405750:                             ; CODE XREF: .text:00405737↑j
.text:00405750                                         ; .text:00405758↓j
.text:00405750                 call    ds:dword_405A80[ebx*4]
.text:00405757                 dec     ebx
.text:00405758                 jnz     short loc_405750
.text:0040575A                 jmp     short loc_405739
.text:0040575C ; ---------------------------------------------------------------------------
.text:0040575C
.text:0040575C loc_40575C:                             ; CODE XREF: .text:00405731↑j
.text:0040575C                 mov     ecx, ds:dword_405A84
.text:00405762                 xor     eax, eax
.text:00405764                 test    ecx, ecx
.text:00405766                 jz      short loc_405733
.text:00405768                 mov     edx, offset dword_405A80
.text:0040576D                 lea     esi, [esi+0]
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: .text:00405777↓j
.text:00405770                 inc     eax
.text:00405771                 mov     ecx, [edx+eax*4+4]
.text:00405775                 test    ecx, ecx
.text:00405777                 jnz     short loc_405770
.text:00405779                 jmp     short loc_405733
.text:00405779 ; ---------------------------------------------------------------------------
.text:0040577B                 align 10h
.text:00405780
.text:00405780 ; =============== S U B R O U T I N E =======================================
.text:00405780
.text:00405780 ; Attributes: bp-based frame
.text:00405780
.text:00405780 sub_405780      proc near               ; CODE XREF: sub_401340+18↑p
.text:00405780
.text:00405780 var_8           = dword ptr -8
.text:00405780 var_4           = dword ptr -4
.text:00405780
.text:00405780                 push    ebp
.text:00405781                 mov     ebp, esp
.text:00405783                 sub     esp, 8
.text:00405786                 mov     [ebp+var_4], ebx
.text:00405789                 mov     edx, dword_406080
.text:0040578F                 test    edx, edx
.text:00405791                 jnz     short loc_4057BA
.text:00405793                 mov     eax, ds:dword_405A80
.text:00405798                 mov     edx, 1
.text:0040579D                 mov     dword_406080, edx
.text:004057A3                 cmp     eax, 0FFFFFFFFh
.text:004057A6                 jz      short loc_4057CD
.text:004057A8
.text:004057A8 loc_4057A8:                             ; CODE XREF: sub_405780+57↓j
.text:004057A8                                         ; sub_405780+69↓j
.text:004057A8                 test    eax, eax
.text:004057AA                 mov     ebx, eax
.text:004057AC                 jnz     short loc_4057C1
.text:004057AE
.text:004057AE loc_4057AE:                             ; CODE XREF: sub_405780+4B↓j
.text:004057AE                 mov     [esp+8+var_8], offset sub_4056F0 ; void (__cdecl *)()
.text:004057B5                 call    sub_401040
.text:004057BA
.text:004057BA loc_4057BA:                             ; CODE XREF: sub_405780+11↑j
.text:004057BA                 mov     ebx, [ebp+var_4]
.text:004057BD                 mov     esp, ebp
.text:004057BF                 pop     ebp
.text:004057C0                 retn
.text:004057C1 ; ---------------------------------------------------------------------------
.text:004057C1
.text:004057C1 loc_4057C1:                             ; CODE XREF: sub_405780+2C↑j
.text:004057C1                                         ; sub_405780+49↓j
.text:004057C1                 call    ds:dword_405A80[ebx*4]
.text:004057C8                 dec     ebx
.text:004057C9                 jnz     short loc_4057C1
.text:004057CB                 jmp     short loc_4057AE
.text:004057CD ; ---------------------------------------------------------------------------
.text:004057CD
.text:004057CD loc_4057CD:                             ; CODE XREF: sub_405780+26↑j
.text:004057CD                 mov     ecx, ds:dword_405A84
.text:004057D3                 xor     eax, eax
.text:004057D5                 test    ecx, ecx
.text:004057D7                 jz      short loc_4057A8
.text:004057D9                 mov     edx, offset dword_405A80
.text:004057DE                 mov     esi, esi
.text:004057E0
.text:004057E0 loc_4057E0:                             ; CODE XREF: sub_405780+67↓j
.text:004057E0                 inc     eax
.text:004057E1                 mov     ebx, [edx+eax*4+4]
.text:004057E5                 test    ebx, ebx
.text:004057E7                 jnz     short loc_4057E0
.text:004057E9                 jmp     short loc_4057A8
.text:004057E9 sub_405780      endp
.text:004057E9
.text:004057E9 ; ---------------------------------------------------------------------------
.text:004057EB                 align 10h
.text:004057F0
.text:004057F0 ; =============== S U B R O U T I N E =======================================
.text:004057F0
.text:004057F0 ; Attributes: info_from_lumina
.text:004057F0
.text:004057F0 ; void *__cdecl _alloca(size_t Size)
.text:004057F0 __alloca        proc near               ; CODE XREF: sub_401340+13↑p
.text:004057F0                 push    ecx
.text:004057F1                 mov     ecx, esp
.text:004057F3                 add     ecx, 8
.text:004057F6
.text:004057F6 loc_4057F6:                             ; CODE XREF: __alloca+1B↓j
.text:004057F6                 cmp     eax, 1000h
.text:004057FB                 jb      short loc_40580D
.text:004057FD                 sub     ecx, 1000h
.text:00405803                 or      dword ptr [ecx], 0
.text:00405806                 sub     eax, 1000h
.text:0040580B                 jmp     short loc_4057F6
.text:0040580D ; ---------------------------------------------------------------------------
.text:0040580D
.text:0040580D loc_40580D:                             ; CODE XREF: __alloca+B↑j
.text:0040580D                 sub     ecx, eax
.text:0040580F                 or      dword ptr [ecx], 0
.text:00405812                 mov     eax, esp
.text:00405814                 mov     esp, ecx
.text:00405816                 mov     ecx, [eax]
.text:00405818                 mov     eax, [eax+4]
.text:0040581B                 jmp     eax
.text:0040581B __alloca        endp
.text:0040581B
.text:0040581B ; ---------------------------------------------------------------------------
.text:0040581D                 align 10h
.text:00405820                 jmp     ds:__set_app_type
.text:00405820 ; ---------------------------------------------------------------------------
.text:00405826                 align 10h
.text:00405830
.text:00405830 ; =============== S U B R O U T I N E =======================================
.text:00405830
.text:00405830 ; Attributes: thunk
.text:00405830
.text:00405830 ; void __cdecl cexit()
.text:00405830 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405830                 jmp     ds:__imp__cexit
.text:00405830 _cexit          endp
.text:00405830
.text:00405830 ; ---------------------------------------------------------------------------
.text:00405836                 align 10h
.text:00405840
.text:00405840 ; =============== S U B R O U T I N E =======================================
.text:00405840
.text:00405840 ; Attributes: thunk
.text:00405840
.text:00405840 ; char ***__cdecl _p__environ()
.text:00405840 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405840                 jmp     ds:__imp___p__environ
.text:00405840 __p__environ    endp
.text:00405840
.text:00405840 ; ---------------------------------------------------------------------------
.text:00405846                 align 10h
.text:00405850
.text:00405850 ; =============== S U B R O U T I N E =======================================
.text:00405850
.text:00405850 ; Attributes: thunk
.text:00405850
.text:00405850 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405850 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405850                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405850
.text:00405850 Signal          = dword ptr  4
.text:00405850 Function        = dword ptr  8
.text:00405850
.text:00405850                 jmp     ds:__imp_signal
.text:00405850 signal          endp
.text:00405850
.text:00405850 ; ---------------------------------------------------------------------------
.text:00405856                 align 10h
.text:00405860
.text:00405860 ; =============== S U B R O U T I N E =======================================
.text:00405860
.text:00405860 ; Attributes: thunk
.text:00405860
.text:00405860 ; int *__cdecl _p__fmode()
.text:00405860 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405860                 jmp     ds:__imp___p__fmode
.text:00405860 __p__fmode      endp
.text:00405860
.text:00405860 ; ---------------------------------------------------------------------------
.text:00405866                 align 10h
.text:00405870
.text:00405870 ; =============== S U B R O U T I N E =======================================
.text:00405870
.text:00405870 ; Attributes: thunk
.text:00405870
.text:00405870 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405870 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405870                                         ; sub_401080+90↑p ...
.text:00405870
.text:00405870 FileHandle      = dword ptr  4
.text:00405870 Mode            = dword ptr  8
.text:00405870
.text:00405870                 jmp     ds:__imp__setmode
.text:00405870 _setmode        endp
.text:00405870
.text:00405870 ; ---------------------------------------------------------------------------
.text:00405876                 align 10h
.text:00405880
.text:00405880 ; =============== S U B R O U T I N E =======================================
.text:00405880
.text:00405880 ; Attributes: thunk
.text:00405880
.text:00405880 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405880                 jmp     ds:__imp___getmainargs
.text:00405880 __getmainargs   endp
.text:00405880
.text:00405880 ; ---------------------------------------------------------------------------
.text:00405886                 align 10h
.text:00405890
.text:00405890 ; =============== S U B R O U T I N E =======================================
.text:00405890
.text:00405890 ; Attributes: thunk
.text:00405890
.text:00405890 ; int __cdecl fclose(FILE *Stream)
.text:00405890 fclose          proc near               ; CODE XREF: sub_401340+184↑p
.text:00405890                                         ; sub_4033D0+27↑p
.text:00405890
.text:00405890 Stream          = dword ptr  4
.text:00405890
.text:00405890                 jmp     ds:__imp_fclose
.text:00405890 fclose          endp
.text:00405890
.text:00405890 ; ---------------------------------------------------------------------------
.text:00405896                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0 ; Attributes: thunk
.text:004058A0
.text:004058A0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004058A0 setlocale       proc near               ; CODE XREF: sub_401340+34↑p
.text:004058A0
.text:004058A0 Category        = dword ptr  4
.text:004058A0 Locale          = dword ptr  8
.text:004058A0
.text:004058A0                 jmp     ds:__imp_setlocale
.text:004058A0 setlocale       endp
.text:004058A0
.text:004058A0 ; ---------------------------------------------------------------------------
.text:004058A6                 align 10h
.text:004058B0
.text:004058B0 ; =============== S U B R O U T I N E =======================================
.text:004058B0
.text:004058B0 ; Attributes: thunk
.text:004058B0
.text:004058B0 ; int __cdecl puts(const char *Buffer)
.text:004058B0 puts            proc near               ; CODE XREF: sub_4017B0+1C4↑p
.text:004058B0
.text:004058B0 Buffer          = dword ptr  4
.text:004058B0
.text:004058B0                 jmp     ds:__imp_puts
.text:004058B0 puts            endp
.text:004058B0
.text:004058B0 ; ---------------------------------------------------------------------------
.text:004058B6                 align 10h
.text:004058C0
.text:004058C0 ; =============== S U B R O U T I N E =======================================
.text:004058C0
.text:004058C0 ; Attributes: thunk
.text:004058C0
.text:004058C0 ; int *__cdecl errno()
.text:004058C0 _errno          proc near               ; CODE XREF: sub_401340+19B↑p
.text:004058C0                                         ; sub_4017B0+392↑p ...
.text:004058C0                 jmp     ds:__imp__errno
.text:004058C0 _errno          endp
.text:004058C0
.text:004058C0 ; ---------------------------------------------------------------------------
.text:004058C6                 align 10h
.text:004058D0
.text:004058D0 ; =============== S U B R O U T I N E =======================================
.text:004058D0
.text:004058D0 ; Attributes: thunk
.text:004058D0
.text:004058D0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004058D0 strcmp          proc near               ; CODE XREF: sub_4017B0+CE↑p
.text:004058D0                                         ; sub_401BC0+39↑p ...
.text:004058D0
.text:004058D0 Str1            = dword ptr  4
.text:004058D0 Str2            = dword ptr  8
.text:004058D0
.text:004058D0                 jmp     ds:__imp_strcmp
.text:004058D0 strcmp          endp
.text:004058D0
.text:004058D0 ; ---------------------------------------------------------------------------
.text:004058D6                 align 10h
.text:004058E0
.text:004058E0 ; =============== S U B R O U T I N E =======================================
.text:004058E0
.text:004058E0 ; Attributes: noreturn thunk
.text:004058E0
.text:004058E0 _assert         proc near               ; CODE XREF: sub_4017B0+3D5↑p
.text:004058E0                                         ; sub_401BC0:loc_401D16↑p
.text:004058E0                 jmp     ds:__imp__assert
.text:004058E0 _assert         endp
.text:004058E0
.text:004058E0 ; ---------------------------------------------------------------------------
.text:004058E6                 align 10h
.text:004058F0
.text:004058F0 ; =============== S U B R O U T I N E =======================================
.text:004058F0
.text:004058F0 ; Attributes: noreturn thunk
.text:004058F0
.text:004058F0 ; void __cdecl __noreturn exit(int Code)
.text:004058F0 exit            proc near               ; CODE XREF: sub_401340:loc_401488↑p
.text:004058F0                                         ; sub_401650+3E↑p ...
.text:004058F0
.text:004058F0 Code            = dword ptr  4
.text:004058F0
.text:004058F0                 jmp     ds:__imp_exit
.text:004058F0 exit            endp
.text:004058F0
.text:004058F0 ; ---------------------------------------------------------------------------
.text:004058F6                 align 10h
.text:00405900
.text:00405900 ; =============== S U B R O U T I N E =======================================
.text:00405900
.text:00405900 ; Attributes: thunk
.text:00405900
.text:00405900 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405900 fputs           proc near               ; CODE XREF: sub_401650+7F↑p
.text:00405900                                         ; sub_401650+A1↑p ...
.text:00405900
.text:00405900 Buffer          = dword ptr  4
.text:00405900 Stream          = dword ptr  8
.text:00405900
.text:00405900                 jmp     ds:__imp_fputs
.text:00405900 fputs           endp
.text:00405900
.text:00405900 ; ---------------------------------------------------------------------------
.text:00405906                 align 10h
.text:00405910
.text:00405910 ; =============== S U B R O U T I N E =======================================
.text:00405910
.text:00405910 ; Attributes: thunk
.text:00405910
.text:00405910 ; int printf(const char *const Format, ...)
.text:00405910 printf          proc near               ; CODE XREF: sub_401650+5D↑p
.text:00405910                                         ; sub_401650+BE↑p
.text:00405910
.text:00405910 Format          = dword ptr  4
.text:00405910
.text:00405910                 jmp     ds:__imp_printf
.text:00405910 printf          endp
.text:00405910
.text:00405910 ; ---------------------------------------------------------------------------
.text:00405916                 align 10h
.text:00405920
.text:00405920 ; =============== S U B R O U T I N E =======================================
.text:00405920
.text:00405920 ; Attributes: thunk
.text:00405920
.text:00405920 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405920 fprintf         proc near               ; CODE XREF: sub_401340+13C↑p
.text:00405920                                         ; sub_401650+36↑p ...
.text:00405920
.text:00405920 Stream          = dword ptr  4
.text:00405920 Format          = dword ptr  8
.text:00405920
.text:00405920                 jmp     ds:__imp_fprintf
.text:00405920 fprintf         endp
.text:00405920
.text:00405920 ; ---------------------------------------------------------------------------
.text:00405926                 align 10h
.text:00405930
.text:00405930 ; =============== S U B R O U T I N E =======================================
.text:00405930
.text:00405930 ; Attributes: thunk
.text:00405930
.text:00405930 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00405930 fopen           proc near               ; CODE XREF: sub_4017B0+383↑p
.text:00405930
.text:00405930 FileName        = dword ptr  4
.text:00405930 Mode            = dword ptr  8
.text:00405930
.text:00405930                 jmp     ds:__imp_fopen
.text:00405930 fopen           endp
.text:00405930
.text:00405930 ; ---------------------------------------------------------------------------
.text:00405936                 align 10h
.text:00405940
.text:00405940 ; =============== S U B R O U T I N E =======================================
.text:00405940
.text:00405940 ; Attributes: thunk
.text:00405940
.text:00405940 ; size_t __cdecl strlen(const char *Str)
.text:00405940 strlen          proc near               ; CODE XREF: sub_402310+2A9↑p
.text:00405940                                         ; sub_402310+346↑p ...
.text:00405940
.text:00405940 Str             = dword ptr  4
.text:00405940
.text:00405940                 jmp     ds:__imp_strlen
.text:00405940 strlen          endp
.text:00405940
.text:00405940 ; ---------------------------------------------------------------------------
.text:00405946                 align 10h
.text:00405950
.text:00405950 ; =============== S U B R O U T I N E =======================================
.text:00405950
.text:00405950 ; Attributes: thunk
.text:00405950
.text:00405950 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405950 strncmp         proc near               ; CODE XREF: sub_402310+23F↑p
.text:00405950                                         ; sub_402310+699↑p
.text:00405950
.text:00405950 Str1            = dword ptr  4
.text:00405950 Str2            = dword ptr  8
.text:00405950 MaxCount        = dword ptr  0Ch
.text:00405950
.text:00405950                 jmp     ds:__imp_strncmp
.text:00405950 strncmp         endp
.text:00405950
.text:00405950 ; ---------------------------------------------------------------------------
.text:00405956                 align 10h
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960 ; Attributes: thunk
.text:00405960
.text:00405960 ; char *__cdecl getenv(const char *VarName)
.text:00405960 getenv          proc near               ; CODE XREF: sub_402310+B57↑p
.text:00405960
.text:00405960 VarName         = dword ptr  4
.text:00405960
.text:00405960                 jmp     ds:__imp_getenv
.text:00405960 getenv          endp
.text:00405960
.text:00405960 ; ---------------------------------------------------------------------------
.text:00405966                 align 10h
.text:00405970
.text:00405970 ; =============== S U B R O U T I N E =======================================
.text:00405970
.text:00405970 ; Attributes: thunk
.text:00405970
.text:00405970 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405970 strchr          proc near               ; CODE XREF: sub_402310+469↑p
.text:00405970                                         ; sub_402310+53A↑p ...
.text:00405970
.text:00405970 Str             = dword ptr  4
.text:00405970 Val             = dword ptr  8
.text:00405970
.text:00405970                 jmp     ds:__imp_strchr
.text:00405970 strchr          endp
.text:00405970
.text:00405970 ; ---------------------------------------------------------------------------
.text:00405976                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980 ; Attributes: thunk
.text:00405980
.text:00405980 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405980 memcpy          proc near               ; CODE XREF: .text:00403727↑p
.text:00405980                                         ; .text:004039C8↑p ...
.text:00405980
.text:00405980 Src             = dword ptr  8
.text:00405980 Size            = dword ptr  0Ch
.text:00405980
.text:00405980                 jmp     ds:__imp_memcpy
.text:00405980 memcpy          endp
.text:00405980
.text:00405980 ; ---------------------------------------------------------------------------
.text:00405986                 align 10h
.text:00405990
.text:00405990 ; =============== S U B R O U T I N E =======================================
.text:00405990
.text:00405990 ; Attributes: thunk
.text:00405990
.text:00405990 ; void __cdecl free(void *Block)
.text:00405990 free            proc near               ; CODE XREF: .text:00403750↑p
.text:00405990                                         ; sub_404C80+112↑p
.text:00405990
.text:00405990 Block           = dword ptr  4
.text:00405990
.text:00405990                 jmp     ds:__imp_free
.text:00405990 free            endp
.text:00405990
.text:00405990 ; ---------------------------------------------------------------------------
.text:00405996                 align 10h
.text:004059A0
.text:004059A0 ; =============== S U B R O U T I N E =======================================
.text:004059A0
.text:004059A0 ; Attributes: noreturn thunk
.text:004059A0
.text:004059A0 ; void __cdecl __noreturn abort()
.text:004059A0 abort           proc near               ; CODE XREF: sub_4034B0+1B2↑p
.text:004059A0                                         ; sub_404C80:loc_404E3A↑p ...
.text:004059A0                 jmp     ds:__imp_abort
.text:004059A0 abort           endp
.text:004059A0
.text:004059A0 ; ---------------------------------------------------------------------------
.text:004059A6                 align 10h
.text:004059B0
.text:004059B0 ; =============== S U B R O U T I N E =======================================
.text:004059B0
.text:004059B0 ; Attributes: thunk
.text:004059B0
.text:004059B0 ; int __cdecl filbuf(FILE *File)
.text:004059B0 _filbuf         proc near               ; CODE XREF: sub_4034B0+125↑p
.text:004059B0                                         ; sub_4034B0+182↑p ...
.text:004059B0
.text:004059B0 File            = dword ptr  4
.text:004059B0
.text:004059B0                 jmp     ds:__imp__filbuf
.text:004059B0 _filbuf         endp
.text:004059B0
.text:004059B0 ; ---------------------------------------------------------------------------
.text:004059B6                 align 10h
.text:004059C0
.text:004059C0 ; =============== S U B R O U T I N E =======================================
.text:004059C0
.text:004059C0 ; Attributes: thunk
.text:004059C0
.text:004059C0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004059C0 memset          proc near               ; CODE XREF: .text:00403946↑p
.text:004059C0
.text:004059C0 Val             = dword ptr  8
.text:004059C0 Size            = dword ptr  0Ch
.text:004059C0
.text:004059C0                 jmp     ds:__imp_memset
.text:004059C0 memset          endp
.text:004059C0
.text:004059C0 ; ---------------------------------------------------------------------------
.text:004059C6                 align 10h
.text:004059D0
.text:004059D0 ; =============== S U B R O U T I N E =======================================
.text:004059D0
.text:004059D0 ; Attributes: thunk
.text:004059D0
.text:004059D0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004059D0 calloc          proc near               ; CODE XREF: .text:00403983↑p
.text:004059D0
.text:004059D0 Count           = dword ptr  4
.text:004059D0 Size            = dword ptr  8
.text:004059D0
.text:004059D0                 jmp     ds:__imp_calloc
.text:004059D0 calloc          endp
.text:004059D0
.text:004059D0 ; ---------------------------------------------------------------------------
.text:004059D6                 align 10h
.text:004059E0
.text:004059E0 ; =============== S U B R O U T I N E =======================================
.text:004059E0
.text:004059E0 ; Attributes: thunk
.text:004059E0
.text:004059E0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004059E0 realloc         proc near               ; CODE XREF: sub_403850+30↑p
.text:004059E0                                         ; sub_4038B0+16↑p ...
.text:004059E0
.text:004059E0 Block           = dword ptr  4
.text:004059E0 Size            = dword ptr  8
.text:004059E0
.text:004059E0                 jmp     ds:__imp_realloc
.text:004059E0 realloc         endp
.text:004059E0
.text:004059E0 ; ---------------------------------------------------------------------------
.text:004059E6                 align 10h
.text:004059F0
.text:004059F0 ; =============== S U B R O U T I N E =======================================
.text:004059F0
.text:004059F0 ; Attributes: thunk
.text:004059F0
.text:004059F0 ; void *__cdecl malloc(size_t Size)
.text:004059F0 malloc          proc near               ; CODE XREF: sub_4037E0+24↑p
.text:004059F0                                         ; sub_403820+E↑p ...
.text:004059F0
.text:004059F0 Size            = dword ptr  4
.text:004059F0
.text:004059F0                 jmp     ds:__imp_malloc
.text:004059F0 malloc          endp
.text:004059F0
.text:004059F0 ; ---------------------------------------------------------------------------
.text:004059F6                 align 10h
.text:00405A00
.text:00405A00 ; =============== S U B R O U T I N E =======================================
.text:00405A00
.text:00405A00 ; Attributes: thunk
.text:00405A00
.text:00405A00 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405A00 iswctype        proc near               ; CODE XREF: sub_403B40+78B↑p
.text:00405A00
.text:00405A00 C               = word ptr  4
.text:00405A00 Type            = word ptr  8
.text:00405A00
.text:00405A00                 jmp     ds:__imp_iswctype
.text:00405A00 iswctype        endp
.text:00405A00
.text:00405A00 ; ---------------------------------------------------------------------------
.text:00405A06                 align 10h
.text:00405A10
.text:00405A10 ; =============== S U B R O U T I N E =======================================
.text:00405A10
.text:00405A10 ; Attributes: thunk
.text:00405A10
.text:00405A10 ; int __cdecl isctype(int C, int Type)
.text:00405A10 _isctype        proc near               ; CODE XREF: sub_403B40+610↑p
.text:00405A10
.text:00405A10 C               = dword ptr  4
.text:00405A10 Type            = dword ptr  8
.text:00405A10
.text:00405A10                 jmp     ds:__imp__isctype
.text:00405A10 _isctype        endp
.text:00405A10
.text:00405A10 ; ---------------------------------------------------------------------------
.text:00405A16                 align 10h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20 ; Attributes: thunk
.text:00405A20
.text:00405A20 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405A20 vfprintf        proc near               ; CODE XREF: sub_405140+C1↑p
.text:00405A20                                         ; sub_405400+49↑p ...
.text:00405A20
.text:00405A20 Stream          = dword ptr  4
.text:00405A20 Format          = dword ptr  8
.text:00405A20 ArgList         = dword ptr  0Ch
.text:00405A20
.text:00405A20                 jmp     ds:__imp_vfprintf
.text:00405A20 vfprintf        endp
.text:00405A20
.text:00405A20 ; ---------------------------------------------------------------------------
.text:00405A26                 align 10h
.text:00405A30
.text:00405A30 ; =============== S U B R O U T I N E =======================================
.text:00405A30
.text:00405A30 ; Attributes: thunk
.text:00405A30
.text:00405A30 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405A30 _flsbuf         proc near               ; CODE XREF: sub_405140+128↑p
.text:00405A30                                         ; sub_405140+13A↑p ...
.text:00405A30
.text:00405A30 File            = dword ptr  8
.text:00405A30
.text:00405A30                 jmp     ds:__imp__flsbuf
.text:00405A30 _flsbuf         endp
.text:00405A30
.text:00405A30 ; ---------------------------------------------------------------------------
.text:00405A36                 align 10h
.text:00405A40
.text:00405A40 ; =============== S U B R O U T I N E =======================================
.text:00405A40
.text:00405A40 ; Attributes: thunk
.text:00405A40
.text:00405A40 ; int __cdecl fflush(FILE *Stream)
.text:00405A40 fflush          proc near               ; CODE XREF: sub_405400+19↑p
.text:00405A40                                         ; sub_405400+81↑p ...
.text:00405A40
.text:00405A40 Stream          = dword ptr  4
.text:00405A40
.text:00405A40                 jmp     ds:__imp_fflush
.text:00405A40 fflush          endp
.text:00405A40
.text:00405A40 ; ---------------------------------------------------------------------------
.text:00405A46                 align 10h
.text:00405A50
.text:00405A50 ; =============== S U B R O U T I N E =======================================
.text:00405A50
.text:00405A50 ; Attributes: thunk
.text:00405A50
.text:00405A50 ; char *__cdecl strerror(int ErrorMessage)
.text:00405A50 strerror        proc near               ; CODE XREF: sub_405400+A5↑p
.text:00405A50                                         ; sub_405504+10F↑p
.text:00405A50
.text:00405A50 ErrorMessage    = dword ptr  4
.text:00405A50
.text:00405A50                 jmp     ds:__imp_strerror
.text:00405A50 strerror        endp
.text:00405A50
.text:00405A50 ; ---------------------------------------------------------------------------
.text:00405A56                 align 10h
.text:00405A60
.text:00405A60 ; =============== S U B R O U T I N E =======================================
.text:00405A60
.text:00405A60 ; Attributes: thunk
.text:00405A60
.text:00405A60 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405A60 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405A60
.text:00405A60 lpTopLevelExceptionFilter= dword ptr  4
.text:00405A60
.text:00405A60                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405A60 SetUnhandledExceptionFilter endp
.text:00405A60
.text:00405A60 ; ---------------------------------------------------------------------------
.text:00405A66                 align 10h
.text:00405A70
.text:00405A70 ; =============== S U B R O U T I N E =======================================
.text:00405A70
.text:00405A70 ; Attributes: noreturn thunk
.text:00405A70
.text:00405A70 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405A70 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405A70
.text:00405A70 uExitCode       = dword ptr  4
.text:00405A70
.text:00405A70                 jmp     ds:__imp_ExitProcess
.text:00405A70 ExitProcess     endp
.text:00405A70
.text:00405A70 ; ---------------------------------------------------------------------------
.text:00405A76                 align 10h
.text:00405A80 dword_405A80    dd 0FFFFFFFFh           ; DATA XREF: .text:00405729↑r
.text:00405A80                                         ; .text:loc_405750↑r ...
.text:00405A84 dword_405A84    dd 0                    ; DATA XREF: .text:loc_40575C↑r
.text:00405A84                                         ; sub_405780:loc_4057CD↑r
.text:00405A88                 dd 0FFFFFFFFh
.text:00405A8C dword_405A8C    dd 5Dh dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405C00                 dd 100h dup(?)
.text:00405C00 _text           ends
.text:00405C00
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00005000
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401340+D1↑r
.data:00406010                                         ; sub_402EA0+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402EA0+11↑r
.data:00406014                                         ; .text:00402F41↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402EA0+7D↑w
.data:00406018                                         ; .text:00402FAD↑w
.data:0040601C                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_404C80+22↑r
.data:00406020                                         ; sub_404C80+65↑r ...
.data:00406024 dword_406024    dd 100h                 ; DATA XREF: sub_404C80+3F↑o
.data:00406024                                         ; sub_404C80+1A2↑r ...
.data:00406028 off_406028      dd offset unk_4071A0    ; DATA XREF: sub_404C80+1AA↑r
.data:0040602C ; void *off_40602C
.data:0040602C off_40602C      dd offset dword_406024  ; DATA XREF: sub_404C80+39↑r
.data:0040602C                                         ; sub_404C80+60↑w ...
.data:00406030 ; char *Buffer
.data:00406030 Buffer          dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_405140+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_4033D0+6D↑r
.data:00406040                                         ; sub_4033D0+9A↑r ...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_405780+9↑r
.data:00406080                                         ; sub_405780+1D↑w
.data:00406084 off_406084      dd offset dword_405A8C  ; DATA XREF: sub_4056F0+6↑r
.data:00406084                                         ; sub_4056F0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000390 (    912.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_4017B0:loc_401963↑r
.bss:00407000                                         ; sub_4017B0+1D1↑r ...
.bss:00407004                 align 10h
.bss:00407010 dword_407010    dd ?                    ; DATA XREF: sub_4017B0+1DE↑r
.bss:00407010                                         ; sub_4017B0+209↑w ...
.bss:00407014                 align 10h
.bss:00407020 dword_407020    dd ?                    ; DATA XREF: sub_4017B0:loc_401A43↑r
.bss:00407020                                         ; sub_401F10+1A↑r ...
.bss:00407024                 align 10h
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: sub_4017B0:loc_40191D↑r
.bss:00407030                                         ; sub_4017B0+1C9↑w ...
.bss:00407034                 align 10h
.bss:00407040 byte_407040     db ?                    ; DATA XREF: sub_401340+CA↑w
.bss:00407040                                         ; sub_401340+161↑r ...
.bss:00407041                 align 10h
.bss:00407050 dword_407050    dd ?                    ; DATA XREF: sub_402EA0+9↑o
.bss:00407050                                         ; sub_402EA0+17↑w ...
.bss:00407054 dword_407054    dd ?                    ; DATA XREF: sub_402EA0+21↑w
.bss:00407054                                         ; .text:00402F59↑w
.bss:00407058 dword_407058    dd ?                    ; DATA XREF: sub_402EA0+77↑r
.bss:00407058                                         ; .text:00402FA7↑r
.bss:0040705C dword_40705C    dd ?                    ; DATA XREF: sub_402EA0+6B↑r
.bss:0040705C                                         ; .text:00402F9B↑r
.bss:00407060                 align 40h
.bss:00407080 ; char *dword_407080
.bss:00407080 dword_407080    dd ?                    ; DATA XREF: .text:004033A4↑w
.bss:00407080                                         ; sub_4033D0+58↑r
.bss:00407084                 align 10h
.bss:00407090 dword_407090    dd ?                    ; DATA XREF: sub_4034B0+17↑r
.bss:00407090                                         ; sub_4034B0+4B↑w ...
.bss:00407094                 align 10h
.bss:004070A0 byte_4070A0     db ?                    ; DATA XREF: sub_4034B0+51↑o
.bss:004070A0                                         ; sub_4034B0+79↑w ...
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150                 db    ? ;
.bss:00407151                 db    ? ;
.bss:00407152                 db    ? ;
.bss:00407153                 db    ? ;
.bss:00407154                 db    ? ;
.bss:00407155                 db    ? ;
.bss:00407156                 db    ? ;
.bss:00407157                 db    ? ;
.bss:00407158                 db    ? ;
.bss:00407159                 db    ? ;
.bss:0040715A                 db    ? ;
.bss:0040715B                 db    ? ;
.bss:0040715C                 db    ? ;
.bss:0040715D                 db    ? ;
.bss:0040715E                 db    ? ;
.bss:0040715F                 db    ? ;
.bss:00407160                 db    ? ;
.bss:00407161                 db    ? ;
.bss:00407162                 db    ? ;
.bss:00407163                 db    ? ;
.bss:00407164                 db    ? ;
.bss:00407165                 db    ? ;
.bss:00407166                 db    ? ;
.bss:00407167                 db    ? ;
.bss:00407168                 db    ? ;
.bss:00407169                 db    ? ;
.bss:0040716A                 db    ? ;
.bss:0040716B                 db    ? ;
.bss:0040716C                 db    ? ;
.bss:0040716D                 db    ? ;
.bss:0040716E                 db    ? ;
.bss:0040716F                 db    ? ;
.bss:00407170                 db    ? ;
.bss:00407171                 db    ? ;
.bss:00407172                 db    ? ;
.bss:00407173                 db    ? ;
.bss:00407174                 db    ? ;
.bss:00407175                 db    ? ;
.bss:00407176                 db    ? ;
.bss:00407177                 db    ? ;
.bss:00407178                 db    ? ;
.bss:00407179                 db    ? ;
.bss:0040717A                 db    ? ;
.bss:0040717B                 db    ? ;
.bss:0040717C                 db    ? ;
.bss:0040717D                 db    ? ;
.bss:0040717E                 db    ? ;
.bss:0040717F                 db    ? ;
.bss:00407180                 db    ? ;
.bss:00407181                 db    ? ;
.bss:00407182                 db    ? ;
.bss:00407183                 db    ? ;
.bss:00407184                 db    ? ;
.bss:00407185                 db    ? ;
.bss:00407186                 db    ? ;
.bss:00407187                 db    ? ;
.bss:00407188                 db    ? ;
.bss:00407189                 db    ? ;
.bss:0040718A                 db    ? ;
.bss:0040718B                 db    ? ;
.bss:0040718C                 db    ? ;
.bss:0040718D                 db    ? ;
.bss:0040718E                 db    ? ;
.bss:0040718F                 db    ? ;
.bss:00407190                 db    ? ;
.bss:00407191                 db    ? ;
.bss:00407192                 db    ? ;
.bss:00407193                 db    ? ;
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0 unk_4071A0      db    ? ;               ; DATA XREF: sub_404C80+100↑o
.bss:004071A0                                         ; .data:off_406028↑o
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0                 db    ? ;
.bss:004071B1                 db    ? ;
.bss:004071B2                 db    ? ;
.bss:004071B3                 db    ? ;
.bss:004071B4                 db    ? ;
.bss:004071B5                 db    ? ;
.bss:004071B6                 db    ? ;
.bss:004071B7                 db    ? ;
.bss:004071B8                 db    ? ;
.bss:004071B9                 db    ? ;
.bss:004071BA                 db    ? ;
.bss:004071BB                 db    ? ;
.bss:004071BC                 db    ? ;
.bss:004071BD                 db    ? ;
.bss:004071BE                 db    ? ;
.bss:004071BF                 db    ? ;
.bss:004071C0                 db    ? ;
.bss:004071C1                 db    ? ;
.bss:004071C2                 db    ? ;
.bss:004071C3                 db    ? ;
.bss:004071C4                 db    ? ;
.bss:004071C5                 db    ? ;
.bss:004071C6                 db    ? ;
.bss:004071C7                 db    ? ;
.bss:004071C8                 db    ? ;
.bss:004071C9                 db    ? ;
.bss:004071CA                 db    ? ;
.bss:004071CB                 db    ? ;
.bss:004071CC                 db    ? ;
.bss:004071CD                 db    ? ;
.bss:004071CE                 db    ? ;
.bss:004071CF                 db    ? ;
.bss:004071D0                 db    ? ;
.bss:004071D1                 db    ? ;
.bss:004071D2                 db    ? ;
.bss:004071D3                 db    ? ;
.bss:004071D4                 db    ? ;
.bss:004071D5                 db    ? ;
.bss:004071D6                 db    ? ;
.bss:004071D7                 db    ? ;
.bss:004071D8                 db    ? ;
.bss:004071D9                 db    ? ;
.bss:004071DA                 db    ? ;
.bss:004071DB                 db    ? ;
.bss:004071DC                 db    ? ;
.bss:004071DD                 db    ? ;
.bss:004071DE                 db    ? ;
.bss:004071DF                 db    ? ;
.bss:004071E0                 db    ? ;
.bss:004071E1                 db    ? ;
.bss:004071E2                 db    ? ;
.bss:004071E3                 db    ? ;
.bss:004071E4                 db    ? ;
.bss:004071E5                 db    ? ;
.bss:004071E6                 db    ? ;
.bss:004071E7                 db    ? ;
.bss:004071E8                 db    ? ;
.bss:004071E9                 db    ? ;
.bss:004071EA                 db    ? ;
.bss:004071EB                 db    ? ;
.bss:004071EC                 db    ? ;
.bss:004071ED                 db    ? ;
.bss:004071EE                 db    ? ;
.bss:004071EF                 db    ? ;
.bss:004071F0                 db    ? ;
.bss:004071F1                 db    ? ;
.bss:004071F2                 db    ? ;
.bss:004071F3                 db    ? ;
.bss:004071F4                 db    ? ;
.bss:004071F5                 db    ? ;
.bss:004071F6                 db    ? ;
.bss:004071F7                 db    ? ;
.bss:004071F8                 db    ? ;
.bss:004071F9                 db    ? ;
.bss:004071FA                 db    ? ;
.bss:004071FB                 db    ? ;
.bss:004071FC                 db    ? ;
.bss:004071FD                 db    ? ;
.bss:004071FE                 db    ? ;
.bss:004071FF                 db    ? ;
.bss:00407200                 db    ? ;
.bss:00407201                 db    ? ;
.bss:00407202                 db    ? ;
.bss:00407203                 db    ? ;
.bss:00407204                 db    ? ;
.bss:00407205                 db    ? ;
.bss:00407206                 db    ? ;
.bss:00407207                 db    ? ;
.bss:00407208                 db    ? ;
.bss:00407209                 db    ? ;
.bss:0040720A                 db    ? ;
.bss:0040720B                 db    ? ;
.bss:0040720C                 db    ? ;
.bss:0040720D                 db    ? ;
.bss:0040720E                 db    ? ;
.bss:0040720F                 db    ? ;
.bss:00407210                 db    ? ;
.bss:00407211                 db    ? ;
.bss:00407212                 db    ? ;
.bss:00407213                 db    ? ;
.bss:00407214                 db    ? ;
.bss:00407215                 db    ? ;
.bss:00407216                 db    ? ;
.bss:00407217                 db    ? ;
.bss:00407218                 db    ? ;
.bss:00407219                 db    ? ;
.bss:0040721A                 db    ? ;
.bss:0040721B                 db    ? ;
.bss:0040721C                 db    ? ;
.bss:0040721D                 db    ? ;
.bss:0040721E                 db    ? ;
.bss:0040721F                 db    ? ;
.bss:00407220                 db    ? ;
.bss:00407221                 db    ? ;
.bss:00407222                 db    ? ;
.bss:00407223                 db    ? ;
.bss:00407224                 db    ? ;
.bss:00407225                 db    ? ;
.bss:00407226                 db    ? ;
.bss:00407227                 db    ? ;
.bss:00407228                 db    ? ;
.bss:00407229                 db    ? ;
.bss:0040722A                 db    ? ;
.bss:0040722B                 db    ? ;
.bss:0040722C                 db    ? ;
.bss:0040722D                 db    ? ;
.bss:0040722E                 db    ? ;
.bss:0040722F                 db    ? ;
.bss:00407230                 db    ? ;
.bss:00407231                 db    ? ;
.bss:00407232                 db    ? ;
.bss:00407233                 db    ? ;
.bss:00407234                 db    ? ;
.bss:00407235                 db    ? ;
.bss:00407236                 db    ? ;
.bss:00407237                 db    ? ;
.bss:00407238                 db    ? ;
.bss:00407239                 db    ? ;
.bss:0040723A                 db    ? ;
.bss:0040723B                 db    ? ;
.bss:0040723C                 db    ? ;
.bss:0040723D                 db    ? ;
.bss:0040723E                 db    ? ;
.bss:0040723F                 db    ? ;
.bss:00407240                 db    ? ;
.bss:00407241                 db    ? ;
.bss:00407242                 db    ? ;
.bss:00407243                 db    ? ;
.bss:00407244                 db    ? ;
.bss:00407245                 db    ? ;
.bss:00407246                 db    ? ;
.bss:00407247                 db    ? ;
.bss:00407248                 db    ? ;
.bss:00407249                 db    ? ;
.bss:0040724A                 db    ? ;
.bss:0040724B                 db    ? ;
.bss:0040724C                 db    ? ;
.bss:0040724D                 db    ? ;
.bss:0040724E                 db    ? ;
.bss:0040724F                 db    ? ;
.bss:00407250                 db    ? ;
.bss:00407251                 db    ? ;
.bss:00407252                 db    ? ;
.bss:00407253                 db    ? ;
.bss:00407254                 db    ? ;
.bss:00407255                 db    ? ;
.bss:00407256                 db    ? ;
.bss:00407257                 db    ? ;
.bss:00407258                 db    ? ;
.bss:00407259                 db    ? ;
.bss:0040725A                 db    ? ;
.bss:0040725B                 db    ? ;
.bss:0040725C                 db    ? ;
.bss:0040725D                 db    ? ;
.bss:0040725E                 db    ? ;
.bss:0040725F                 db    ? ;
.bss:00407260                 db    ? ;
.bss:00407261                 db    ? ;
.bss:00407262                 db    ? ;
.bss:00407263                 db    ? ;
.bss:00407264                 db    ? ;
.bss:00407265                 db    ? ;
.bss:00407266                 db    ? ;
.bss:00407267                 db    ? ;
.bss:00407268                 db    ? ;
.bss:00407269                 db    ? ;
.bss:0040726A                 db    ? ;
.bss:0040726B                 db    ? ;
.bss:0040726C                 db    ? ;
.bss:0040726D                 db    ? ;
.bss:0040726E                 db    ? ;
.bss:0040726F                 db    ? ;
.bss:00407270                 db    ? ;
.bss:00407271                 db    ? ;
.bss:00407272                 db    ? ;
.bss:00407273                 db    ? ;
.bss:00407274                 db    ? ;
.bss:00407275                 db    ? ;
.bss:00407276                 db    ? ;
.bss:00407277                 db    ? ;
.bss:00407278                 db    ? ;
.bss:00407279                 db    ? ;
.bss:0040727A                 db    ? ;
.bss:0040727B                 db    ? ;
.bss:0040727C                 db    ? ;
.bss:0040727D                 db    ? ;
.bss:0040727E                 db    ? ;
.bss:0040727F                 db    ? ;
.bss:00407280                 db    ? ;
.bss:00407281                 db    ? ;
.bss:00407282                 db    ? ;
.bss:00407283                 db    ? ;
.bss:00407284                 db    ? ;
.bss:00407285                 db    ? ;
.bss:00407286                 db    ? ;
.bss:00407287                 db    ? ;
.bss:00407288                 db    ? ;
.bss:00407289                 db    ? ;
.bss:0040728A                 db    ? ;
.bss:0040728B                 db    ? ;
.bss:0040728C                 db    ? ;
.bss:0040728D                 db    ? ;
.bss:0040728E                 db    ? ;
.bss:0040728F                 db    ? ;
.bss:00407290                 db    ? ;
.bss:00407291                 db    ? ;
.bss:00407292                 db    ? ;
.bss:00407293                 db    ? ;
.bss:00407294                 db    ? ;
.bss:00407295                 db    ? ;
.bss:00407296                 db    ? ;
.bss:00407297                 db    ? ;
.bss:00407298                 db    ? ;
.bss:00407299                 db    ? ;
.bss:0040729A                 db    ? ;
.bss:0040729B                 db    ? ;
.bss:0040729C                 db    ? ;
.bss:0040729D                 db    ? ;
.bss:0040729E                 db    ? ;
.bss:0040729F                 db    ? ;
.bss:004072A0 dword_4072A0    dd ?                    ; DATA XREF: .text:loc_404611↑o
.bss:004072A0                                         ; .text:loc_404630↑o ...
.bss:004072A4 dword_4072A4    dd ?                    ; DATA XREF: .text:loc_4046B0↑o
.bss:004072A4                                         ; .text:00404B38↑r ...
.bss:004072A8 dword_4072A8    dd ?                    ; DATA XREF: .text:00404B32↑r
.bss:004072A8                                         ; sub_404BE0+2C↑r
.bss:004072AC dword_4072AC    dd ?                    ; DATA XREF: .text:00404B26↑r
.bss:004072AC                                         ; sub_404BE0+22↑r
.bss:004072B0 dword_4072B0    dd ?                    ; DATA XREF: .text:00404B42↑r
.bss:004072B0                                         ; sub_404BE0+36↑r
.bss:004072B4 dword_4072B4    dd ?                    ; DATA XREF: .text:00404B52↑r
.bss:004072B4                                         ; sub_404BE0+4E↑r
.bss:004072B8 dword_4072B8    dd ?                    ; DATA XREF: .text:00404B6F↑r
.bss:004072B8                                         ; sub_404BE0+62↑r
.bss:004072BC dword_4072BC    dd ?                    ; DATA XREF: .text:00404B65↑r
.bss:004072BC                                         ; sub_404BE0+70↑r
.bss:004072C0 dword_4072C0    dd ?                    ; DATA XREF: .text:00404B48↑r
.bss:004072C0                                         ; sub_404BE0+7A↑r
.bss:004072C4                 align 10h
.bss:004072D0 ; char *Str1
.bss:004072D0 Str1            dd ?                    ; DATA XREF: sub_405504:loc_40553D↑w
.bss:004072D0                                         ; sub_405504:loc_405670↑r
.bss:004072D4                 align 10h
.bss:004072E0 dword_4072E0    dd ?                    ; DATA XREF: sub_405504+2D↑r
.bss:004072E0                                         ; sub_405504+3F↑w
.bss:004072E4                 align 10h
.bss:004072F0 dword_4072F0    dd ?                    ; DATA XREF: sub_401340+2E↑w
.bss:004072F0                                         ; sub_401340+128↑r ...
.bss:004072F4                 db    ? ;
.bss:004072F5                 db    ? ;
.bss:004072F6                 db    ? ;
.bss:004072F7                 db    ? ;
.bss:004072F8                 db    ? ;
.bss:004072F9                 db    ? ;
.bss:004072FA                 db    ? ;
.bss:004072FB                 db    ? ;
.bss:004072FC                 db    ? ;
.bss:004072FD                 db    ? ;
.bss:004072FE                 db    ? ;
.bss:004072FF                 db    ? ;
.bss:00407300                 db    ? ;
.bss:00407301                 db    ? ;
.bss:00407302                 db    ? ;
.bss:00407303                 db    ? ;
.bss:00407304                 db    ? ;
.bss:00407305                 db    ? ;
.bss:00407306                 db    ? ;
.bss:00407307                 db    ? ;
.bss:00407308                 db    ? ;
.bss:00407309                 db    ? ;
.bss:0040730A                 db    ? ;
.bss:0040730B                 db    ? ;
.bss:0040730C                 db    ? ;
.bss:0040730D                 db    ? ;
.bss:0040730E                 db    ? ;
.bss:0040730F                 db    ? ;
.bss:00407310 dword_407310    dd ?                    ; DATA XREF: sub_402EA0+71↑w
.bss:00407310                                         ; .text:00402FA1↑w
.bss:00407314                 align 10h
.bss:00407320 dword_407320    dd ?                    ; CODE XREF: sub_405504+63↑p
.bss:00407320                                         ; DATA XREF: sub_405400+1E↑r ...
.bss:00407324                 align 10h
.bss:00407330 dword_407330    dd ?                    ; DATA XREF: sub_405400+4E↑w
.bss:00407330                                         ; sub_405504+AB↑w
.bss:00407334                 db    ? ;
.bss:00407335                 db    ? ;
.bss:00407336                 db    ? ;
.bss:00407337                 db    ? ;
.bss:00407338                 db    ? ;
.bss:00407339                 db    ? ;
.bss:0040733A                 db    ? ;
.bss:0040733B                 db    ? ;
.bss:0040733C                 db    ? ;
.bss:0040733D                 db    ? ;
.bss:0040733E                 db    ? ;
.bss:0040733F                 db    ? ;
.bss:00407340                 db    ? ;
.bss:00407341                 db    ? ;
.bss:00407342                 db    ? ;
.bss:00407343                 db    ? ;
.bss:00407344                 db    ? ;
.bss:00407345                 db    ? ;
.bss:00407346                 db    ? ;
.bss:00407347                 db    ? ;
.bss:00407348                 db    ? ;
.bss:00407349                 db    ? ;
.bss:0040734A                 db    ? ;
.bss:0040734B                 db    ? ;
.bss:0040734C                 db    ? ;
.bss:0040734D                 db    ? ;
.bss:0040734E                 db    ? ;
.bss:0040734F                 db    ? ;
.bss:00407350                 db    ? ;
.bss:00407351                 db    ? ;
.bss:00407352                 db    ? ;
.bss:00407353                 db    ? ;
.bss:00407354                 db    ? ;
.bss:00407355                 db    ? ;
.bss:00407356                 db    ? ;
.bss:00407357                 db    ? ;
.bss:00407358                 db    ? ;
.bss:00407359                 db    ? ;
.bss:0040735A                 db    ? ;
.bss:0040735B                 db    ? ;
.bss:0040735C                 db    ? ;
.bss:0040735D                 db    ? ;
.bss:0040735E                 db    ? ;
.bss:0040735F                 db    ? ;
.bss:00407360 dword_407360    dd ?                    ; DATA XREF: sub_405504+13↑r
.bss:00407364                 align 1000h
.bss:00407364 _bss            ends
.bss:00407364
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 0000057C (   1404.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00005200
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408144 ;
.idata:00408144 ; Imports from libintl3.dll
.idata:00408144 ;
.idata:00408144                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408144                                         ; CODE XREF: sub_401340+48↑p
.idata:00408144                                         ; DATA XREF: sub_401340+48↑r ...
.idata:00408148                 extrn libintl_gettext:dword
.idata:00408148                                         ; CODE XREF: sub_401340+F3↑p
.idata:00408148                                         ; sub_401340+11C↑p ...
.idata:0040814C                 extrn libintl_textdomain:dword
.idata:0040814C                                         ; CODE XREF: sub_401340+55↑p
.idata:0040814C                                         ; DATA XREF: sub_401340+55↑r ...
.idata:00408150
.idata:00408158 ;
.idata:00408158 ; Imports from KERNEL32.dll
.idata:00408158 ;
.idata:00408158 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408158                 extrn __imp_ExitProcess:dword
.idata:00408158                                         ; DATA XREF: ExitProcess↑r
.idata:0040815C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040815C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040815C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408160
.idata:00408168 ;
.idata:00408168 ; Imports from MSVCP60.DLL
.idata:00408168 ;
.idata:00408168 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408168                 extrn __imp_mbrtowc:dword
.idata:00408168                                         ; DATA XREF: mbrtowc↑r
.idata:0040816C
.idata:00408174 ;
.idata:00408174 ; Imports from msvcrt.dll
.idata:00408174 ;
.idata:00408174                 extrn __imp___getmainargs:dword
.idata:00408174                                         ; DATA XREF: __getmainargs↑r
.idata:00408178 ; int _mb_cur_max
.idata:00408178                 extrn __mb_cur_max:dword
.idata:00408178                                         ; DATA XREF: sub_403B40+7↑r
.idata:00408178                                         ; sub_403B40+5F3↑r
.idata:0040817C ; char ***(__cdecl *__p__environ)()
.idata:0040817C                 extrn __imp___p__environ:dword
.idata:0040817C                                         ; DATA XREF: __p__environ↑r
.idata:00408180 ; int *(__cdecl *__p__fmode)()
.idata:00408180                 extrn __imp___p__fmode:dword
.idata:00408180                                         ; DATA XREF: __p__fmode↑r
.idata:00408184 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00408184                 extrn __set_app_type:dword
.idata:00408184                                         ; CODE XREF: start+D↑p
.idata:00408184                                         ; .text:0040102D↑p
.idata:00408184                                         ; DATA XREF: ...
.idata:00408188                 extrn __imp__assert:dword
.idata:00408188                                         ; DATA XREF: _assert↑r
.idata:0040818C ; void (__cdecl *_cexit)()
.idata:0040818C                 extrn __imp__cexit:dword
.idata:0040818C                                         ; DATA XREF: _cexit↑r
.idata:00408190 ; int *(__cdecl *_errno)()
.idata:00408190                 extrn __imp__errno:dword
.idata:00408190                                         ; DATA XREF: _errno↑r
.idata:00408194 ; int (__cdecl *_filbuf)(FILE *File)
.idata:00408194                 extrn __imp__filbuf:dword
.idata:00408194                                         ; DATA XREF: _filbuf↑r
.idata:00408198 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00408198                 extrn __imp__flsbuf:dword
.idata:00408198                                         ; DATA XREF: _flsbuf↑r
.idata:0040819C ; FILE iob[]
.idata:0040819C                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040819C                                         ; sub_401080+75↑r ...
.idata:004081A0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081A0                 extrn __imp__isctype:dword
.idata:004081A0                                         ; DATA XREF: _isctype↑r
.idata:004081A4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081A4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081A4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081A8 ; const unsigned __int16 *pctype
.idata:004081A8                 extrn _pctype:dword     ; DATA XREF: sub_403B40:loc_404234↑r
.idata:004081AC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081AC                 extrn __imp__setmode:dword
.idata:004081AC                                         ; DATA XREF: _setmode↑r
.idata:004081B0 ; void (__cdecl __noreturn *abort)()
.idata:004081B0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081B4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081B4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081B4                                         ; DATA XREF: sub_401040+C↑r
.idata:004081B8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081B8                 extrn __imp_calloc:dword
.idata:004081B8                                         ; DATA XREF: calloc↑r
.idata:004081BC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081BC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081C0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081C0                 extrn __imp_fclose:dword
.idata:004081C0                                         ; DATA XREF: fclose↑r
.idata:004081C4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081C4                 extrn __imp_fflush:dword
.idata:004081C4                                         ; DATA XREF: fflush↑r
.idata:004081C8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004081C8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004081CC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081CC                 extrn __imp_fprintf:dword
.idata:004081CC                                         ; DATA XREF: fprintf↑r
.idata:004081D0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081D0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081D4 ; void (__cdecl *free)(void *Block)
.idata:004081D4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081D8 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081D8                 extrn __imp_getenv:dword
.idata:004081D8                                         ; DATA XREF: getenv↑r
.idata:004081DC ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081DC                 extrn __imp_iswctype:dword
.idata:004081DC                                         ; DATA XREF: iswctype↑r
.idata:004081E0 ; void *(__cdecl *malloc)(size_t Size)
.idata:004081E0                 extrn __imp_malloc:dword
.idata:004081E0                                         ; DATA XREF: malloc↑r
.idata:004081E4 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081E4                 extrn __imp_memcpy:dword
.idata:004081E4                                         ; DATA XREF: memcpy↑r
.idata:004081E8 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081E8                 extrn __imp_memset:dword
.idata:004081E8                                         ; DATA XREF: memset↑r
.idata:004081EC ; int (*printf)(const char *const Format, ...)
.idata:004081EC                 extrn __imp_printf:dword
.idata:004081EC                                         ; DATA XREF: printf↑r
.idata:004081F0 ; int (__cdecl *puts)(const char *Buffer)
.idata:004081F0                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:004081F4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004081F4                 extrn __imp_realloc:dword
.idata:004081F4                                         ; DATA XREF: realloc↑r
.idata:004081F8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004081F8                 extrn __imp_setlocale:dword
.idata:004081F8                                         ; DATA XREF: setlocale↑r
.idata:004081FC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004081FC                 extrn __imp_signal:dword
.idata:004081FC                                         ; DATA XREF: signal↑r
.idata:00408200 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408200                 extrn __imp_strchr:dword
.idata:00408200                                         ; DATA XREF: strchr↑r
.idata:00408204 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408204                 extrn __imp_strcmp:dword
.idata:00408204                                         ; DATA XREF: strcmp↑r
.idata:00408208 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408208                 extrn __imp_strerror:dword
.idata:00408208                                         ; DATA XREF: strerror↑r
.idata:0040820C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040820C                 extrn __imp_strlen:dword
.idata:0040820C                                         ; DATA XREF: strlen↑r
.idata:00408210 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408210                 extrn __imp_strncmp:dword
.idata:00408210                                         ; DATA XREF: strncmp↑r
.idata:00408214 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408214                 extrn __imp_vfprintf:dword
.idata:00408214                                         ; DATA XREF: vfprintf↑r
.idata:00408218
.idata:00408218
.idata:00408218
.idata:00408218                 end start
