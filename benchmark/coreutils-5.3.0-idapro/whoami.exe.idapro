.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : D572BBA90323B729D783C4F1FD046E99CADCCA2FA4B9B55AEF5B1A8F099C76AF
.text:00401000 ; Input MD5    : 06FC28D73DCFF0EFE7786C2D902CA51E
.text:00401000 ; Input CRC32  : 1DD43077
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/whoami.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A273 (Wed Apr 20 18:41:55 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000043B0 (  17328.)
.text:00401000 ; Section size in file          : 00004400 (  17408.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401370+62↓p
.text:00401040                                         ; .text:00405070↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405010
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404FE0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401370
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405010
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401370+1F↓o
.text:00401280                                         ; sub_401370+B3↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401370+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401370+41↓o
.text:004012C3                                         ; sub_401370+4E↓o
.text:004012CD aRichardMlynari db 'Richard Mlynarik',0 ; DATA XREF: sub_401370+6F↓o
.text:004012DE a530            db '5.3.0',0            ; DATA XREF: sub_401370+7F↓o
.text:004012E4 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401370+87↓o
.text:004012F2 ; const FILE stru_4012F2
.text:004012F2 stru_4012F2     FILE <616F6877h, 8D00696Dh, 26B4h, 73250000h, 6163203Ah, 746F6E6Eh, \
.text:004012F2                                         ; DATA XREF: sub_401370+8F↓o
.text:004012F2                                         ; sub_401370:loc_401470↓o
.text:004012F2                       6E696620h, 73752064h>
.text:00401312                 db  65h ; e
.text:00401313                 db  72h ; r
.text:00401314                 db  6Eh ; n
.text:00401315                 db  61h ; a
.text:00401316                 db  6Dh ; m
.text:00401317                 db  65h ; e
.text:00401318                 db  20h
.text:00401319                 db  66h ; f
.text:0040131A                 db  6Fh ; o
.text:0040131B                 db  72h ; r
.text:0040131C                 db  20h
.text:0040131D                 db  55h ; U
.text:0040131E                 db  49h ; I
.text:0040131F                 db  44h ; D
.text:00401320                 db  20h
.text:00401321                 db  25h ; %
.text:00401322                 db  6Ch ; l
.text:00401323                 db  75h ; u
.text:00401324                 db  0Ah
.text:00401325                 db    0
.text:00401326 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401370+144↓o
.text:00401337                 align 10h
.text:00401340 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401340                                         ; DATA XREF: sub_401370:loc_4014DF↓o
.text:00401340                                         ; sub_401650+F↓o
.text:00401367                 align 10h
.text:00401370
.text:00401370 ; =============== S U B R O U T I N E =======================================
.text:00401370
.text:00401370 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401370
.text:00401370 sub_401370      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401370
.text:00401370 Category        = dword ptr -28h
.text:00401370 Locale          = dword ptr -24h
.text:00401370 var_20          = dword ptr -20h
.text:00401370 var_1C          = byte ptr -1Ch
.text:00401370 var_18          = dword ptr -18h
.text:00401370 var_14          = dword ptr -14h
.text:00401370 var_10          = byte ptr -10h
.text:00401370 var_C           = dword ptr -0Ch
.text:00401370 arg_0           = dword ptr  8
.text:00401370 arg_4           = dword ptr  0Ch
.text:00401370
.text:00401370                 push    ebp
.text:00401371                 xor     eax, eax
.text:00401373                 mov     ebp, esp
.text:00401375                 push    esi
.text:00401376                 push    ebx
.text:00401377                 sub     esp, 20h
.text:0040137A                 mov     esi, [ebp+arg_4]
.text:0040137D                 and     esp, 0FFFFFFF0h
.text:00401380                 mov     ebx, [ebp+arg_0]
.text:00401383                 call    __alloca
.text:00401388                 call    sub_4050B0
.text:0040138D                 mov     edx, [esi]
.text:0040138F                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:00401397                 mov     [esp+28h+Category], 0 ; Category
.text:0040139E                 mov     ds:dword_4076C0, edx
.text:004013A4                 call    setlocale
.text:004013A9                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013B1                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004013B8                 call    ds:__imp_libintl_bindtextdomain
.text:004013BE                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004013C5                 call    ds:libintl_textdomain
.text:004013CB                 mov     [esp+28h+Category], offset sub_402A50 ; void (__cdecl *)()
.text:004013D2                 call    sub_401040
.text:004013D7                 mov     [esp+28h+var_C], 0
.text:004013DF                 mov     dword ptr [esp+28h+var_10], offset aRichardMlynari ; "Richard Mlynarik"
.text:004013E7                 mov     [esp+28h+var_14], offset sub_401650 ; int
.text:004013EF                 mov     [esp+28h+var_18], offset a530 ; "5.3.0"
.text:004013F7                 mov     dword ptr [esp+28h+var_1C], offset aGnuCoreutils ; "GNU coreutils"
.text:004013FF                 mov     [esp+28h+var_20], offset stru_4012F2 ; FILE *
.text:00401407                 mov     [esp+28h+Locale], esi ; int
.text:0040140B                 mov     [esp+28h+Category], ebx ; int
.text:0040140E                 call    sub_402960
.text:00401413                 mov     [esp+28h+var_18], 0 ; int
.text:0040141B                 mov     dword ptr [esp+28h+var_1C], 0 ; int
.text:00401423                 mov     [esp+28h+var_20], offset Locale ; char *
.text:0040142B                 mov     [esp+28h+Locale], esi ; int
.text:0040142F                 mov     [esp+28h+Category], ebx ; int
.text:00401432                 call    sub_4027C0
.text:00401437                 inc     eax
.text:00401438                 jnz     loc_4014DF
.text:0040143E                 mov     eax, dword_406010
.text:00401443                 cmp     eax, ebx
.text:00401445                 jnz     short loc_4014A9
.text:00401447                 call    sub_404A40
.text:0040144C                 mov     [esp+28h+Category], eax
.text:0040144F                 mov     ebx, eax
.text:00401451                 call    sub_4049F0
.text:00401456                 test    eax, eax
.text:00401458                 jz      short loc_401470
.text:0040145A                 mov     esi, [eax]
.text:0040145C                 mov     [esp+28h+Category], esi ; Buffer
.text:0040145F                 call    puts
.text:00401464                 mov     [esp+28h+Category], 0 ; Code
.text:0040146B
.text:0040146B loc_40146B:                             ; CODE XREF: sub_401370+137↓j
.text:0040146B                 call    exit
.text:00401470 ; ---------------------------------------------------------------------------
.text:00401470
.text:00401470 loc_401470:                             ; CODE XREF: sub_401370+E8↑j
.text:00401470                 mov     [esp+28h+Category], (offset stru_4012F2._flag+2)
.text:00401477                 call    ds:libintl_gettext
.text:0040147D                 mov     dword ptr [esp+28h+var_1C], ebx
.text:00401481                 mov     edx, ds:_iob
.text:00401487                 mov     ecx, ds:dword_4076C0
.text:0040148D                 mov     [esp+28h+Locale], eax ; Format
.text:00401491                 add     edx, 40h ; '@'
.text:00401494                 mov     [esp+28h+var_20], ecx
.text:00401498                 mov     [esp+28h+Category], edx ; Stream
.text:0040149B                 call    fprintf
.text:004014A0
.text:004014A0 loc_4014A0:                             ; CODE XREF: sub_401370+19B↓j
.text:004014A0                 mov     [esp+28h+Category], 1
.text:004014A7                 jmp     short loc_40146B
.text:004014A9 ; ---------------------------------------------------------------------------
.text:004014A9
.text:004014A9 loc_4014A9:                             ; CODE XREF: sub_401370+D5↑j
.text:004014A9                 mov     edx, [esi+eax*4]
.text:004014AC                 mov     [esp+28h+Category], edx ; char *
.text:004014AF                 call    sub_402790
.text:004014B4                 mov     [esp+28h+Category], offset aExtraOperandS ; "extra operand %s"
.text:004014BB                 mov     esi, eax
.text:004014BD                 call    ds:libintl_gettext
.text:004014C3                 mov     dword ptr [esp+28h+var_1C], esi ; char
.text:004014C7                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:004014CF                 mov     [esp+28h+Category], 0 ; Code
.text:004014D6                 mov     [esp+28h+var_20], eax ; char *
.text:004014DA                 call    sub_404750
.text:004014DF
.text:004014DF loc_4014DF:                             ; CODE XREF: sub_401370+C8↑j
.text:004014DF                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004014E6                 call    ds:libintl_gettext
.text:004014EC                 mov     ecx, ds:_iob
.text:004014F2                 mov     ebx, ds:dword_4076C0
.text:004014F8                 add     ecx, 40h ; '@'
.text:004014FB                 mov     [esp+28h+var_20], ebx
.text:004014FF                 mov     [esp+28h+Locale], eax ; Format
.text:00401503                 mov     [esp+28h+Category], ecx ; Stream
.text:00401506                 call    fprintf
.text:0040150B                 jmp     short loc_4014A0
.text:0040150B sub_401370      endp
.text:0040150B
.text:0040150B ; ---------------------------------------------------------------------------
.text:0040150D aUsageSOption   db 'Usage: %s [OPTION]...',0Ah,0
.text:0040150D                                         ; DATA XREF: sub_401650:loc_401693↓o
.text:00401524                 align 20h
.text:00401540 aPrintTheUserNa db 'Print the user name associated with the current effective user id'
.text:00401540                                         ; DATA XREF: sub_401650+62↓o
.text:00401540                 db '.',0Ah
.text:00401540                 db 'Same as id -un.',0Ah
.text:00401540                 db 0Ah,0
.text:00401595                 align 10h
.text:004015A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015A0                                         ; DATA XREF: sub_401650+84↓o
.text:004015CD                 align 20h
.text:004015E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004015E0                                         ; DATA XREF: sub_401650+A6↓o
.text:00401616 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401650+C8↓o
.text:00401616                 db 'Report bugs to <%s>.',0Ah,0
.text:0040162D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040162D                                         ; DATA XREF: sub_401650+D5↓o
.text:00401643                 align 10h
.text:00401650
.text:00401650 ; =============== S U B R O U T I N E =======================================
.text:00401650
.text:00401650 ; Attributes: noreturn
.text:00401650
.text:00401650 ; void __cdecl __noreturn sub_401650(int Code)
.text:00401650 sub_401650      proc near               ; DATA XREF: sub_401370+77↑o
.text:00401650
.text:00401650 Stream          = dword ptr -1Ch
.text:00401650 Format          = dword ptr -18h
.text:00401650 var_14          = dword ptr -14h
.text:00401650 var_4           = dword ptr -4
.text:00401650 Code            = dword ptr  4
.text:00401650
.text:00401650                 sub     esp, 1Ch
.text:00401653                 mov     [esp+1Ch+var_4], ebx
.text:00401657                 mov     ebx, [esp+1Ch+Code]
.text:0040165B                 test    ebx, ebx
.text:0040165D                 jz      short loc_401693
.text:0040165F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401666                 call    ds:libintl_gettext
.text:0040166C                 mov     edx, ds:_iob
.text:00401672                 mov     ecx, ds:dword_4076C0
.text:00401678                 add     edx, 40h ; '@'
.text:0040167B                 mov     [esp+1Ch+var_14], ecx
.text:0040167F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401683                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401686                 call    fprintf
.text:0040168B
.text:0040168B loc_40168B:                             ; CODE XREF: sub_401650+E5↓j
.text:0040168B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040168E                 call    exit
.text:00401693 ; ---------------------------------------------------------------------------
.text:00401693
.text:00401693 loc_401693:                             ; CODE XREF: sub_401650+D↑j
.text:00401693                 mov     [esp+1Ch+Stream], offset aUsageSOption ; "Usage: %s [OPTION]...\n"
.text:0040169A                 call    ds:libintl_gettext
.text:004016A0                 mov     ecx, ds:dword_4076C0
.text:004016A6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004016A9                 mov     [esp+1Ch+Format], ecx
.text:004016AD                 call    printf
.text:004016B2                 mov     [esp+1Ch+Stream], offset aPrintTheUserNa ; "Print the user name associated with the"...
.text:004016B9                 call    ds:libintl_gettext
.text:004016BF                 mov     ecx, ds:_iob
.text:004016C5                 add     ecx, 20h ; ' '
.text:004016C8                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004016CC                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004016CF                 call    fputs
.text:004016D4                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004016DB                 call    ds:libintl_gettext
.text:004016E1                 mov     ecx, ds:_iob
.text:004016E7                 add     ecx, 20h ; ' '
.text:004016EA                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004016EE                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004016F1                 call    fputs
.text:004016F6                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004016FD                 call    ds:libintl_gettext
.text:00401703                 mov     ecx, ds:_iob
.text:00401709                 add     ecx, 20h ; ' '
.text:0040170C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401710                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401713                 call    fputs
.text:00401718                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040171F                 call    ds:libintl_gettext
.text:00401725                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040172D                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401730                 call    printf
.text:00401735                 jmp     loc_40168B
.text:00401735 sub_401650      endp
.text:00401735
.text:00401735 ; ---------------------------------------------------------------------------
.text:0040173A                 align 10h
.text:00401740 dword_401740    dd 90002D2Dh, 7 dup(90909090h)
.text:00401740                                         ; DATA XREF: sub_401990+E4↓o
.text:00401760 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401760                                         ; DATA XREF: sub_401990+2FC↓o
.text:0040178D                 align 20h
.text:004017A0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004017A0                                         ; DATA XREF: sub_401990:loc_401CF2↓o
.text:004017CD                 align 20h
.text:004017E0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004017E0                                         ; DATA XREF: sub_401990:loc_401D90↓o
.text:004017E0                                         ; sub_401990:loc_402157↓o
.text:00401806                 align 20h
.text:00401820 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401820                                         ; DATA XREF: sub_401990+48E↓o
.text:00401840 dword_401840    dd 90909000h, 7 dup(90909090h)
.text:00401840                                         ; DATA XREF: sub_401990:loc_401E61↓o
.text:00401860 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401860                                         ; DATA XREF: sub_401990:loc_401E7A↓o
.text:00401880 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401880                                         ; DATA XREF: sub_401990:loc_401F5F↓o
.text:00401880                                         ; sub_401990:loc_40228C↓o
.text:004018A7                 align 20h
.text:004018C0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004018C0                                         ; DATA XREF: sub_401990:loc_4020D3↓o
.text:004018EE                 align 20h
.text:00401900 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401900                                         ; DATA XREF: sub_401990:loc_4021BF↓o
.text:00401921 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401921                                         ; DATA XREF: sub_401990+93F↓o
.text:0040193B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040193B                                         ; DATA XREF: sub_401990:loc_402307↓o
.text:00401955 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401955                                         ; DATA XREF: sub_401990:loc_40232E↓o
.text:00401973 ; const char VarName[]
.text:00401973 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401990:loc_4024E0↓o
.text:00401983                 align 10h
.text:00401990
.text:00401990 ; =============== S U B R O U T I N E =======================================
.text:00401990
.text:00401990
.text:00401990 ; int __cdecl sub_401990(int, int, char *Str, int, int, int, int, int)
.text:00401990 sub_401990      proc near               ; CODE XREF: sub_402520+5A↓p
.text:00401990                                         ; .text:0040260A↓p ...
.text:00401990
.text:00401990 Str1            = dword ptr -5Ch
.text:00401990 Str2            = dword ptr -58h
.text:00401990 MaxCount        = dword ptr -54h
.text:00401990 var_50          = dword ptr -50h
.text:00401990 var_4C          = dword ptr -4Ch
.text:00401990 var_3C          = dword ptr -3Ch
.text:00401990 var_38          = dword ptr -38h
.text:00401990 var_34          = dword ptr -34h
.text:00401990 var_30          = dword ptr -30h
.text:00401990 var_2C          = dword ptr -2Ch
.text:00401990 var_28          = dword ptr -28h
.text:00401990 var_24          = dword ptr -24h
.text:00401990 var_20          = dword ptr -20h
.text:00401990 var_1C          = dword ptr -1Ch
.text:00401990 var_18          = dword ptr -18h
.text:00401990 var_14          = dword ptr -14h
.text:00401990 arg_0           = dword ptr  4
.text:00401990 arg_4           = dword ptr  8
.text:00401990 Str             = dword ptr  0Ch
.text:00401990 arg_C           = dword ptr  10h
.text:00401990 arg_10          = dword ptr  14h
.text:00401990 arg_14          = dword ptr  18h
.text:00401990 arg_18          = dword ptr  1Ch
.text:00401990 arg_1C          = dword ptr  20h
.text:00401990
.text:00401990                 push    ebp
.text:00401991                 mov     eax, 0FFFFFFFFh
.text:00401996                 push    edi
.text:00401997                 push    esi
.text:00401998                 push    ebx
.text:00401999                 sub     esp, 4Ch
.text:0040199C                 mov     esi, [esp+5Ch+Str]
.text:004019A0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004019A4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004019A7                 mov     ebx, [ebp+4]
.text:004019AA                 setz    dl
.text:004019AD                 movzx   ecx, dl
.text:004019B0                 dec     ecx
.text:004019B1                 and     ecx, ebx
.text:004019B3                 mov     [esp+5Ch+var_14], ecx
.text:004019B7                 mov     ecx, [esp+5Ch+arg_0]
.text:004019BB                 test    ecx, ecx
.text:004019BD                 jle     loc_401AE7
.text:004019C3                 mov     dword ptr [ebp+0Ch], 0
.text:004019CA                 mov     ebx, [ebp+0]
.text:004019CD                 test    ebx, ebx
.text:004019CF                 jz      loc_402500
.text:004019D5                 mov     edi, [ebp+10h]
.text:004019D8                 test    edi, edi
.text:004019DA                 jnz     short loc_401A33
.text:004019DC                 lea     esi, [esi+0]
.text:004019E0
.text:004019E0 loc_4019E0:                             ; CODE XREF: sub_401990+B7C↓j
.text:004019E0                 mov     [ebp+24h], ebx
.text:004019E3                 mov     esi, [esp+5Ch+Str]
.text:004019E7                 mov     [ebp+20h], ebx
.text:004019EA                 mov     ecx, [esp+5Ch+arg_18]
.text:004019EE                 xor     ebx, ebx
.text:004019F0                 mov     dword ptr [ebp+14h], 0
.text:004019F7                 test    ecx, ecx
.text:004019F9                 jz      loc_4024E0
.text:004019FF
.text:004019FF loc_4019FF:                             ; CODE XREF: sub_401990+B64↓j
.text:004019FF                 mov     ebx, 1
.text:00401A04
.text:00401A04 loc_401A04:                             ; CODE XREF: sub_401990+B5E↓j
.text:00401A04                 mov     [ebp+1Ch], ebx
.text:00401A07                 mov     ecx, [esp+5Ch+Str]
.text:00401A0B                 movzx   eax, byte ptr [ecx]
.text:00401A0E                 cmp     al, 2Dh ; '-'
.text:00401A10                 jz      loc_4024D0
.text:00401A16                 cmp     al, 2Bh ; '+'
.text:00401A18                 jz      loc_4024B9
.text:00401A1E                 xor     edx, edx
.text:00401A20                 test    ebx, ebx
.text:00401A22                 setz    dl
.text:00401A25                 mov     [ebp+18h], edx
.text:00401A28
.text:00401A28 loc_401A28:                             ; CODE XREF: sub_401990+B35↓j
.text:00401A28                 mov     [esp+5Ch+Str], esi
.text:00401A2C                 mov     dword ptr [ebp+10h], 1
.text:00401A33
.text:00401A33 loc_401A33:                             ; CODE XREF: sub_401990+4A↑j
.text:00401A33                 mov     eax, [ebp+14h]
.text:00401A36                 test    eax, eax
.text:00401A38                 jz      short loc_401A43
.text:00401A3A                 cmp     byte ptr [eax], 0
.text:00401A3D                 jnz     loc_401B20
.text:00401A43
.text:00401A43 loc_401A43:                             ; CODE XREF: sub_401990+A8↑j
.text:00401A43                 mov     ebx, [ebp+0]
.text:00401A46                 cmp     [ebp+24h], ebx
.text:00401A49                 jle     short loc_401A4E
.text:00401A4B                 mov     [ebp+24h], ebx
.text:00401A4E
.text:00401A4E loc_401A4E:                             ; CODE XREF: sub_401990+B9↑j
.text:00401A4E                 cmp     [ebp+20h], ebx
.text:00401A51                 jle     short loc_401A56
.text:00401A53                 mov     [ebp+20h], ebx
.text:00401A56
.text:00401A56 loc_401A56:                             ; CODE XREF: sub_401990+C1↑j
.text:00401A56                 cmp     dword ptr [ebp+18h], 1
.text:00401A5A                 jz      loc_402430
.text:00401A60
.text:00401A60 loc_401A60:                             ; CODE XREF: sub_401990+B13↓j
.text:00401A60                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401A64                 jz      loc_402414
.text:00401A6A                 cld
.text:00401A6B                 mov     ecx, [esp+5Ch+arg_4]
.text:00401A6F                 mov     edx, 3
.text:00401A74                 mov     edi, offset dword_401740
.text:00401A79                 mov     esi, [ecx+ebx*4]
.text:00401A7C                 mov     ecx, edx
.text:00401A7E                 repe cmpsb
.text:00401A80                 jnz     short loc_401ABC
.text:00401A82                 mov     edx, [ebp+24h]
.text:00401A85                 lea     eax, [ebx+1]
.text:00401A88                 cmp     [ebp+20h], edx
.text:00401A8B                 mov     [ebp+0], eax
.text:00401A8E                 jz      loc_402428
.text:00401A94                 cmp     edx, eax
.text:00401A96                 jz      short loc_401AB0
.text:00401A98                 mov     [esp+5Ch+Str2], ebp
.text:00401A9C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401AA0                 mov     [esp+5Ch+Str1], ebx
.text:00401AA3                 call    sub_402640
.text:00401AA8                 nop
.text:00401AA9                 lea     esi, [esi+0]
.text:00401AB0
.text:00401AB0 loc_401AB0:                             ; CODE XREF: sub_401990+106↑j
.text:00401AB0                                         ; sub_401990+A9B↓j
.text:00401AB0                 mov     eax, [esp+5Ch+arg_0]
.text:00401AB4                 mov     ebx, eax
.text:00401AB6                 mov     [ebp+24h], eax
.text:00401AB9                 mov     [ebp+0], eax
.text:00401ABC
.text:00401ABC loc_401ABC:                             ; CODE XREF: sub_401990+F0↑j
.text:00401ABC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401AC0                 jz      loc_402414
.text:00401AC6                 mov     esi, [esp+5Ch+arg_4]
.text:00401ACA                 mov     eax, [esi+ebx*4]
.text:00401ACD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401AD0                 jz      short loc_401AF7
.text:00401AD2
.text:00401AD2 loc_401AD2:                             ; CODE XREF: sub_401990+16D↓j
.text:00401AD2                 mov     edx, [ebp+18h]
.text:00401AD5                 test    edx, edx
.text:00401AD7                 jz      short loc_401AF0
.text:00401AD9                 mov     [ebp+0Ch], eax
.text:00401ADC                 lea     edi, [ebx+1]
.text:00401ADF                 mov     eax, 1
.text:00401AE4                 mov     [ebp+0], edi
.text:00401AE7
.text:00401AE7 loc_401AE7:                             ; CODE XREF: sub_401990+2D↑j
.text:00401AE7                                         ; sub_401990+165↓j ...
.text:00401AE7                 add     esp, 4Ch
.text:00401AEA                 pop     ebx
.text:00401AEB                 pop     esi
.text:00401AEC                 pop     edi
.text:00401AED                 pop     ebp
.text:00401AEE                 retn
.text:00401AEE ; ---------------------------------------------------------------------------
.text:00401AEF                 align 10h
.text:00401AF0
.text:00401AF0 loc_401AF0:                             ; CODE XREF: sub_401990+147↑j
.text:00401AF0                                         ; sub_401990+A8A↓j ...
.text:00401AF0                 mov     eax, 0FFFFFFFFh
.text:00401AF5                 jmp     short loc_401AE7
.text:00401AF7 ; ---------------------------------------------------------------------------
.text:00401AF7
.text:00401AF7 loc_401AF7:                             ; CODE XREF: sub_401990+140↑j
.text:00401AF7                 movzx   edx, byte ptr [eax+1]
.text:00401AFB                 test    dl, dl
.text:00401AFD                 jz      short loc_401AD2
.text:00401AFF                 mov     ebx, [esp+5Ch+arg_C]
.text:00401B03                 xor     ecx, ecx
.text:00401B05                 test    ebx, ebx
.text:00401B07                 jz      short loc_401B12
.text:00401B09                 cmp     dl, 2Dh ; '-'
.text:00401B0C                 jz      loc_40240A
.text:00401B12
.text:00401B12 loc_401B12:                             ; CODE XREF: sub_401990+177↑j
.text:00401B12                                         ; sub_401990+A7F↓j
.text:00401B12                 lea     esi, [ecx+eax+1]
.text:00401B16                 mov     [ebp+14h], esi
.text:00401B19                 lea     esi, [esi+0]
.text:00401B20
.text:00401B20 loc_401B20:                             ; CODE XREF: sub_401990+AD↑j
.text:00401B20                 mov     ecx, [esp+5Ch+arg_C]
.text:00401B24                 test    ecx, ecx
.text:00401B26                 jz      loc_401EB0
.text:00401B2C                 mov     edx, [ebp+0]
.text:00401B2F                 mov     edi, [esp+5Ch+arg_4]
.text:00401B33                 mov     eax, [edi+edx*4]
.text:00401B36                 movzx   edx, byte ptr [eax+1]
.text:00401B3A                 cmp     dl, 2Dh ; '-'
.text:00401B3D                 jz      short loc_401B55
.text:00401B3F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401B43                 test    ebx, ebx
.text:00401B45                 jz      loc_401EB0
.text:00401B4B                 cmp     byte ptr [eax+2], 0
.text:00401B4F                 jz      loc_4023EA
.text:00401B55
.text:00401B55 loc_401B55:                             ; CODE XREF: sub_401990+1AD↑j
.text:00401B55                                         ; sub_401990+A75↓j
.text:00401B55                 mov     [esp+5Ch+var_18], 0
.text:00401B5D                 mov     ecx, [ebp+14h]
.text:00401B60                 mov     [esp+5Ch+var_1C], 0
.text:00401B68                 mov     [esp+5Ch+var_20], 0
.text:00401B70                 mov     edi, ecx
.text:00401B72                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401B7A                 movzx   eax, byte ptr [ecx]
.text:00401B7D                 test    al, al
.text:00401B7F                 jz      short loc_401B9C
.text:00401B81                 cmp     al, 3Dh ; '='
.text:00401B83                 jz      short loc_401B9C
.text:00401B85                 lea     esi, [esi+0]
.text:00401B89                 lea     edi, [edi+0]
.text:00401B90
.text:00401B90 loc_401B90:                             ; CODE XREF: sub_401990+20A↓j
.text:00401B90                 inc     edi
.text:00401B91                 movzx   eax, byte ptr [edi]
.text:00401B94                 test    al, al
.text:00401B96                 jz      short loc_401B9C
.text:00401B98                 cmp     al, 3Dh ; '='
.text:00401B9A                 jnz     short loc_401B90
.text:00401B9C
.text:00401B9C loc_401B9C:                             ; CODE XREF: sub_401990+1EF↑j
.text:00401B9C                                         ; sub_401990+1F3↑j ...
.text:00401B9C                 mov     [esp+5Ch+var_28], 0
.text:00401BA4                 mov     esi, [esp+5Ch+arg_C]
.text:00401BA8                 mov     ebx, [esi]
.text:00401BAA                 test    ebx, ebx
.text:00401BAC                 mov     edx, ebx
.text:00401BAE                 jz      loc_401DD0
.text:00401BB4                 lea     esi, [esi+0]
.text:00401BBA                 lea     edi, [edi+0]
.text:00401BC0
.text:00401BC0 loc_401BC0:                             ; CODE XREF: sub_401990+25E↓j
.text:00401BC0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401BC4                 mov     ebx, edi
.text:00401BC6                 sub     ebx, ecx
.text:00401BC8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401BCC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401BCF                 call    strncmp
.text:00401BD4                 test    eax, eax
.text:00401BD6                 jz      loc_402366
.text:00401BDC
.text:00401BDC loc_401BDC:                             ; CODE XREF: sub_401990+A0F↓j
.text:00401BDC                                         ; sub_401990+A24↓j ...
.text:00401BDC                 inc     [esp+5Ch+var_28]
.text:00401BE0                 add     esi, 10h
.text:00401BE3                 mov     ecx, [esi]
.text:00401BE5                 test    ecx, ecx
.text:00401BE7                 mov     edx, ecx
.text:00401BE9                 jz      short loc_401BF0
.text:00401BEB                 mov     ecx, [ebp+14h]
.text:00401BEE                 jmp     short loc_401BC0
.text:00401BF0 ; ---------------------------------------------------------------------------
.text:00401BF0
.text:00401BF0 loc_401BF0:                             ; CODE XREF: sub_401990+259↑j
.text:00401BF0                                         ; sub_401990+A55↓j
.text:00401BF0                 mov     esi, [esp+5Ch+var_20]
.text:00401BF4                 test    esi, esi
.text:00401BF6                 jz      short loc_401C04
.text:00401BF8                 mov     edx, [esp+5Ch+var_1C]
.text:00401BFC                 test    edx, edx
.text:00401BFE                 jz      loc_402310
.text:00401C04
.text:00401C04 loc_401C04:                             ; CODE XREF: sub_401990+266↑j
.text:00401C04                 mov     eax, [esp+5Ch+var_18]
.text:00401C08                 test    eax, eax
.text:00401C0A                 jz      loc_401DD0
.text:00401C10                 mov     ecx, [ebp+0]
.text:00401C13                 lea     eax, [ecx+1]
.text:00401C16                 mov     [ebp+0], eax
.text:00401C19                 cmp     byte ptr [edi], 0
.text:00401C1C                 jz      loc_401D30
.text:00401C22                 mov     ecx, [esp+5Ch+var_18]
.text:00401C26                 mov     esi, [ecx+4]
.text:00401C29                 test    esi, esi
.text:00401C2B                 jz      short loc_401C76
.text:00401C2D                 lea     ebx, [edi+1]
.text:00401C30                 mov     [ebp+0Ch], ebx
.text:00401C33
.text:00401C33 loc_401C33:                             ; CODE XREF: sub_401990+3A8↓j
.text:00401C33                                         ; sub_401990+3C4↓j
.text:00401C33                 mov     ebx, [ebp+14h]
.text:00401C36                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401C39                 call    strlen
.text:00401C3E                 add     [ebp+14h], eax
.text:00401C41                 mov     esi, [esp+5Ch+arg_10]
.text:00401C45                 test    esi, esi
.text:00401C47                 jz      short loc_401C53
.text:00401C49                 mov     ebp, [esp+5Ch+var_24]
.text:00401C4D                 mov     ecx, [esp+5Ch+arg_10]
.text:00401C51                 mov     [ecx], ebp
.text:00401C53
.text:00401C53 loc_401C53:                             ; CODE XREF: sub_401990+2B7↑j
.text:00401C53                 mov     eax, [esp+5Ch+var_18]
.text:00401C57                 mov     ecx, [eax+8]
.text:00401C5A                 test    ecx, ecx
.text:00401C5C                 jnz     short loc_401C6A
.text:00401C5E                 mov     ecx, [esp+5Ch+var_18]
.text:00401C62
.text:00401C62 loc_401C62:                             ; CODE XREF: sub_401990+723↓j
.text:00401C62                 mov     eax, [ecx+0Ch]
.text:00401C65                 jmp     loc_401AE7
.text:00401C6A ; ---------------------------------------------------------------------------
.text:00401C6A
.text:00401C6A loc_401C6A:                             ; CODE XREF: sub_401990+2CC↑j
.text:00401C6A                                         ; sub_401990+719↓j
.text:00401C6A                 mov     esi, [eax+0Ch]
.text:00401C6D                 xor     eax, eax
.text:00401C6F                 mov     [ecx], esi
.text:00401C71                 jmp     loc_401AE7
.text:00401C76 ; ---------------------------------------------------------------------------
.text:00401C76
.text:00401C76 loc_401C76:                             ; CODE XREF: sub_401990+29B↑j
.text:00401C76                 mov     edi, [esp+5Ch+var_14]
.text:00401C7A                 test    edi, edi
.text:00401C7C                 jz      short loc_401CD0
.text:00401C7E                 mov     esi, [esp+5Ch+arg_4]
.text:00401C82                 mov     edx, [esi+eax*4-4]
.text:00401C86                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401C8A                 jz      short loc_401CF2
.text:00401C8C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401C93                 call    ds:libintl_gettext
.text:00401C99                 mov     edx, [esp+5Ch+var_18]
.text:00401C9D                 mov     edi, [edx]
.text:00401C9F                 mov     [esp+5Ch+var_4C], edi
.text:00401CA3                 mov     ebx, [ebp+0]
.text:00401CA6                 mov     edi, [esp+5Ch+arg_4]
.text:00401CAA                 mov     ecx, [edi+ebx*4-4]
.text:00401CAE                 movsx   esi, byte ptr [ecx]
.text:00401CB1                 mov     ecx, ds:_iob
.text:00401CB7                 add     ecx, 40h ; '@'
.text:00401CBA                 mov     [esp+5Ch+var_50], esi
.text:00401CBE                 mov     ebx, [edi]
.text:00401CC0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401CC4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401CC7                 mov     [esp+5Ch+MaxCount], ebx
.text:00401CCB                 call    fprintf
.text:00401CD0
.text:00401CD0 loc_401CD0:                             ; CODE XREF: sub_401990+2EC↑j
.text:00401CD0                                         ; sub_401990+398↓j
.text:00401CD0                 mov     ecx, [ebp+14h]
.text:00401CD3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401CD6                 call    strlen
.text:00401CDB                 add     [ebp+14h], eax
.text:00401CDE                 mov     eax, [esp+5Ch+var_18]
.text:00401CE2                 mov     esi, [eax+0Ch]
.text:00401CE5                 mov     [ebp+8], esi
.text:00401CE8
.text:00401CE8 loc_401CE8:                             ; CODE XREF: sub_401990+4E5↓j
.text:00401CE8                                         ; sub_401990+73E↓j ...
.text:00401CE8                 mov     eax, 3Fh ; '?'
.text:00401CED                 jmp     loc_401AE7
.text:00401CF2 ; ---------------------------------------------------------------------------
.text:00401CF2
.text:00401CF2 loc_401CF2:                             ; CODE XREF: sub_401990+2FA↑j
.text:00401CF2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401CF9                 call    ds:libintl_gettext
.text:00401CFF                 mov     edx, [esp+5Ch+var_18]
.text:00401D03                 mov     edi, [esp+5Ch+arg_4]
.text:00401D07                 mov     ecx, ds:_iob
.text:00401D0D                 mov     esi, [edx]
.text:00401D0F                 add     ecx, 40h ; '@'
.text:00401D12                 mov     [esp+5Ch+var_50], esi
.text:00401D16                 mov     ebx, [edi]
.text:00401D18                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D1C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D1F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D23                 call    fprintf
.text:00401D28                 jmp     short loc_401CD0
.text:00401D28 ; ---------------------------------------------------------------------------
.text:00401D2A                 align 10h
.text:00401D30
.text:00401D30 loc_401D30:                             ; CODE XREF: sub_401990+28C↑j
.text:00401D30                 mov     ebx, [esp+5Ch+var_18]
.text:00401D34                 cmp     dword ptr [ebx+4], 1
.text:00401D38                 jnz     loc_401C33
.text:00401D3E                 cmp     eax, [esp+5Ch+arg_0]
.text:00401D42                 jge     short loc_401D59
.text:00401D44                 mov     ebx, [esp+5Ch+arg_4]
.text:00401D48                 lea     edi, [ecx+2]
.text:00401D4B                 mov     [ebp+0], edi
.text:00401D4E                 mov     esi, [ebx+eax*4]
.text:00401D51                 mov     [ebp+0Ch], esi
.text:00401D54                 jmp     loc_401C33
.text:00401D59 ; ---------------------------------------------------------------------------
.text:00401D59
.text:00401D59 loc_401D59:                             ; CODE XREF: sub_401990+3B2↑j
.text:00401D59                 mov     edx, [esp+5Ch+var_14]
.text:00401D5D                 test    edx, edx
.text:00401D5F                 jnz     short loc_401D90
.text:00401D61
.text:00401D61 loc_401D61:                             ; CODE XREF: sub_401990+437↓j
.text:00401D61                 mov     edx, [ebp+14h]
.text:00401D64                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401D67                 call    strlen
.text:00401D6C                 add     [ebp+14h], eax
.text:00401D6F                 mov     eax, [esp+5Ch+var_18]
.text:00401D73                 mov     edi, [eax+0Ch]
.text:00401D76                 mov     [ebp+8], edi
.text:00401D79
.text:00401D79 loc_401D79:                             ; CODE XREF: sub_401990+7C2↓j
.text:00401D79                 mov     ebp, [esp+5Ch+Str]
.text:00401D7D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401D81                 setnz   bl
.text:00401D84                 movzx   esi, bl
.text:00401D87                 lea     eax, [esi+esi*4+3Ah]
.text:00401D8B                 jmp     loc_401AE7
.text:00401D90 ; ---------------------------------------------------------------------------
.text:00401D90
.text:00401D90 loc_401D90:                             ; CODE XREF: sub_401990+3CF↑j
.text:00401D90                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401D97                 call    ds:libintl_gettext
.text:00401D9D                 mov     ecx, [ebp+0]
.text:00401DA0                 mov     esi, [esp+5Ch+arg_4]
.text:00401DA4                 mov     ebx, [esi+ecx*4-4]
.text:00401DA8                 mov     ecx, ds:_iob
.text:00401DAE                 mov     [esp+5Ch+var_50], ebx
.text:00401DB2                 mov     edi, [esi]
.text:00401DB4                 add     ecx, 40h ; '@'
.text:00401DB7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401DBB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401DBE                 mov     [esp+5Ch+MaxCount], edi
.text:00401DC2                 call    fprintf
.text:00401DC7                 jmp     short loc_401D61
.text:00401DC7 ; ---------------------------------------------------------------------------
.text:00401DC9                 align 10h
.text:00401DD0
.text:00401DD0 loc_401DD0:                             ; CODE XREF: sub_401990+21E↑j
.text:00401DD0                                         ; sub_401990+27A↑j
.text:00401DD0                 mov     eax, [esp+5Ch+arg_14]
.text:00401DD4                 test    eax, eax
.text:00401DD6                 jz      short loc_401E06
.text:00401DD8                 mov     ebx, [ebp+0]
.text:00401DDB                 mov     esi, [esp+5Ch+arg_4]
.text:00401DDF                 mov     edi, [esi+ebx*4]
.text:00401DE2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401DE6                 jz      short loc_401E09
.text:00401DE8                 mov     ecx, [ebp+14h]
.text:00401DEB                 mov     edx, [esp+5Ch+Str]
.text:00401DEF                 movsx   ebx, byte ptr [ecx]
.text:00401DF2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401DF5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401DF9                 call    strchr
.text:00401DFE                 test    eax, eax
.text:00401E00                 jnz     loc_401EB0
.text:00401E06
.text:00401E06 loc_401E06:                             ; CODE XREF: sub_401990+446↑j
.text:00401E06                 mov     ebx, [ebp+0]
.text:00401E09
.text:00401E09 loc_401E09:                             ; CODE XREF: sub_401990+456↑j
.text:00401E09                 mov     eax, [esp+5Ch+var_14]
.text:00401E0D                 test    eax, eax
.text:00401E0F                 jz      short loc_401E61
.text:00401E11                 mov     esi, [esp+5Ch+arg_4]
.text:00401E15                 mov     edi, [esi+ebx*4]
.text:00401E18                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E1C                 jz      short loc_401E7A
.text:00401E1E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401E25                 call    ds:libintl_gettext
.text:00401E2B                 mov     edi, [ebp+14h]
.text:00401E2E                 mov     [esp+5Ch+var_4C], edi
.text:00401E32                 mov     ebx, [ebp+0]
.text:00401E35                 mov     edi, [esp+5Ch+arg_4]
.text:00401E39                 mov     esi, [edi+ebx*4]
.text:00401E3C                 movsx   ecx, byte ptr [esi]
.text:00401E3F                 mov     esi, ds:_iob
.text:00401E45                 add     esi, 40h ; '@'
.text:00401E48                 mov     [esp+5Ch+var_50], ecx
.text:00401E4C                 mov     ebx, [edi]
.text:00401E4E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E52                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401E55                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E59                 call    fprintf
.text:00401E5E
.text:00401E5E loc_401E5E:                             ; CODE XREF: sub_401990+51D↓j
.text:00401E5E                 mov     ebx, [ebp+0]
.text:00401E61
.text:00401E61 loc_401E61:                             ; CODE XREF: sub_401990+47F↑j
.text:00401E61                 mov     dword ptr [ebp+14h], offset dword_401840
.text:00401E68                 lea     edx, [ebx+1]
.text:00401E6B                 mov     [ebp+0], edx
.text:00401E6E
.text:00401E6E loc_401E6E:                             ; CODE XREF: sub_401990+999↓j
.text:00401E6E                 mov     dword ptr [ebp+8], 0
.text:00401E75                 jmp     loc_401CE8
.text:00401E7A ; ---------------------------------------------------------------------------
.text:00401E7A
.text:00401E7A loc_401E7A:                             ; CODE XREF: sub_401990+48C↑j
.text:00401E7A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401E81                 call    ds:libintl_gettext
.text:00401E87                 mov     ecx, [ebp+14h]
.text:00401E8A                 mov     edi, [esp+5Ch+arg_4]
.text:00401E8E                 mov     edx, ds:_iob
.text:00401E94                 mov     [esp+5Ch+var_50], ecx
.text:00401E98                 mov     ebx, [edi]
.text:00401E9A                 add     edx, 40h ; '@'
.text:00401E9D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401EA1                 mov     [esp+5Ch+MaxCount], ebx
.text:00401EA5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401EA8                 call    fprintf
.text:00401EAD                 jmp     short loc_401E5E
.text:00401EAD ; ---------------------------------------------------------------------------
.text:00401EAF                 align 10h
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401990+196↑j
.text:00401EB0                                         ; sub_401990+1B5↑j ...
.text:00401EB0                 mov     esi, [ebp+14h]
.text:00401EB3                 movzx   ebx, byte ptr [esi]
.text:00401EB6                 inc     esi
.text:00401EB7                 mov     [ebp+14h], esi
.text:00401EBA                 mov     ecx, [esp+5Ch+Str]
.text:00401EBE                 movsx   esi, bl
.text:00401EC1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401EC5                 mov     edi, esi
.text:00401EC7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401ECA                 call    strchr
.text:00401ECF                 mov     ecx, [ebp+14h]
.text:00401ED2                 cmp     byte ptr [ecx], 0
.text:00401ED5                 jnz     short loc_401EDA
.text:00401ED7                 inc     dword ptr [ebp+0]
.text:00401EDA
.text:00401EDA loc_401EDA:                             ; CODE XREF: sub_401990+545↑j
.text:00401EDA                 test    eax, eax
.text:00401EDC                 jz      loc_4022C0
.text:00401EE2                 cmp     bl, 3Ah ; ':'
.text:00401EE5                 jz      loc_4022C0
.text:00401EEB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401EEE                 jz      loc_401FA6
.text:00401EF4                 movzx   edx, byte ptr [eax+1]
.text:00401EF8
.text:00401EF8 loc_401EF8:                             ; CODE XREF: sub_401990+61D↓j
.text:00401EF8                 cmp     dl, 3Ah ; ':'
.text:00401EFB                 jz      short loc_401F04
.text:00401EFD
.text:00401EFD loc_401EFD:                             ; CODE XREF: sub_401990+590↓j
.text:00401EFD                 mov     eax, esi
.text:00401EFF                 jmp     loc_401AE7
.text:00401F04 ; ---------------------------------------------------------------------------
.text:00401F04
.text:00401F04 loc_401F04:                             ; CODE XREF: sub_401990+56B↑j
.text:00401F04                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401F08                 jz      loc_401F91
.text:00401F0E                 cmp     byte ptr [ecx], 0
.text:00401F11                 jz      short loc_401F22
.text:00401F13
.text:00401F13 loc_401F13:                             ; CODE XREF: sub_401990+604↓j
.text:00401F13                 inc     dword ptr [ebp+0]
.text:00401F16                 mov     [ebp+0Ch], ecx
.text:00401F19
.text:00401F19 loc_401F19:                             ; CODE XREF: sub_401990+5AB↓j
.text:00401F19                                         ; sub_401990+5C6↓j ...
.text:00401F19                 mov     dword ptr [ebp+14h], 0
.text:00401F20                 jmp     short loc_401EFD
.text:00401F22 ; ---------------------------------------------------------------------------
.text:00401F22
.text:00401F22 loc_401F22:                             ; CODE XREF: sub_401990+581↑j
.text:00401F22                 mov     ecx, [ebp+0]
.text:00401F25                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401F29                 jz      short loc_401F3D
.text:00401F2B                 mov     eax, [esp+5Ch+arg_4]
.text:00401F2F                 lea     edx, [ecx+1]
.text:00401F32                 mov     [ebp+0], edx
.text:00401F35                 mov     ebx, [eax+ecx*4]
.text:00401F38                 mov     [ebp+0Ch], ebx
.text:00401F3B                 jmp     short loc_401F19
.text:00401F3D ; ---------------------------------------------------------------------------
.text:00401F3D
.text:00401F3D loc_401F3D:                             ; CODE XREF: sub_401990+599↑j
.text:00401F3D                 mov     ecx, [esp+5Ch+var_14]
.text:00401F41                 test    ecx, ecx
.text:00401F43                 jnz     short loc_401F5F
.text:00401F45
.text:00401F45 loc_401F45:                             ; CODE XREF: sub_401990+5FF↓j
.text:00401F45                 mov     [ebp+8], edi
.text:00401F48                 mov     edi, [esp+5Ch+Str]
.text:00401F4C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401F4F                 jz      short loc_401F58
.text:00401F51                 mov     esi, 3Fh ; '?'
.text:00401F56                 jmp     short loc_401F19
.text:00401F58 ; ---------------------------------------------------------------------------
.text:00401F58
.text:00401F58 loc_401F58:                             ; CODE XREF: sub_401990+5BF↑j
.text:00401F58                 mov     esi, 3Ah ; ':'
.text:00401F5D                 jmp     short loc_401F19
.text:00401F5F ; ---------------------------------------------------------------------------
.text:00401F5F
.text:00401F5F loc_401F5F:                             ; CODE XREF: sub_401990+5B3↑j
.text:00401F5F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401F66                 call    ds:libintl_gettext
.text:00401F6C                 mov     [esp+5Ch+var_50], edi
.text:00401F70                 mov     ebx, [esp+5Ch+arg_4]
.text:00401F74                 mov     edx, ds:_iob
.text:00401F7A                 mov     esi, [ebx]
.text:00401F7C                 add     edx, 40h ; '@'
.text:00401F7F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F83                 mov     [esp+5Ch+MaxCount], esi
.text:00401F87                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401F8A                 call    fprintf
.text:00401F8F                 jmp     short loc_401F45
.text:00401F91 ; ---------------------------------------------------------------------------
.text:00401F91
.text:00401F91 loc_401F91:                             ; CODE XREF: sub_401990+578↑j
.text:00401F91                 cmp     byte ptr [ecx], 0
.text:00401F94                 jnz     loc_401F13
.text:00401F9A                 mov     dword ptr [ebp+0Ch], 0
.text:00401FA1                 jmp     loc_401F19
.text:00401FA6 ; ---------------------------------------------------------------------------
.text:00401FA6
.text:00401FA6 loc_401FA6:                             ; CODE XREF: sub_401990+55E↑j
.text:00401FA6                 movzx   edx, byte ptr [eax+1]
.text:00401FAA                 cmp     dl, 3Bh ; ';'
.text:00401FAD                 jnz     loc_401EF8
.text:00401FB3                 mov     [esp+5Ch+var_2C], 0
.text:00401FBB                 mov     [esp+5Ch+var_30], 0
.text:00401FC3                 mov     [esp+5Ch+var_34], 0
.text:00401FCB                 mov     [esp+5Ch+var_38], 0
.text:00401FD3                 cmp     byte ptr [ecx], 0
.text:00401FD6                 jz      loc_40224B
.text:00401FDC                 inc     dword ptr [ebp+0]
.text:00401FDF                 mov     [ebp+0Ch], ecx
.text:00401FE2
.text:00401FE2 loc_401FE2:                             ; CODE XREF: sub_401990+8D4↓j
.text:00401FE2                 mov     edi, [ebp+0Ch]
.text:00401FE5                 mov     [ebp+14h], edi
.text:00401FE8                 movzx   eax, byte ptr [edi]
.text:00401FEB                 test    al, al
.text:00401FED                 jz      short loc_401FFF
.text:00401FEF                 cmp     al, 3Dh ; '='
.text:00401FF1                 jz      short loc_401FFF
.text:00401FF3
.text:00401FF3 loc_401FF3:                             ; CODE XREF: sub_401990+66D↓j
.text:00401FF3                 inc     edi
.text:00401FF4                 movzx   eax, byte ptr [edi]
.text:00401FF7                 test    al, al
.text:00401FF9                 jz      short loc_401FFF
.text:00401FFB                 cmp     al, 3Dh ; '='
.text:00401FFD                 jnz     short loc_401FF3
.text:00401FFF
.text:00401FFF loc_401FFF:                             ; CODE XREF: sub_401990+65D↑j
.text:00401FFF                                         ; sub_401990+661↑j ...
.text:00401FFF                 mov     [esp+5Ch+var_3C], 0
.text:00402007                 mov     esi, [esp+5Ch+arg_C]
.text:0040200B                 mov     eax, [esi]
.text:0040200D                 test    eax, eax
.text:0040200F                 jz      loc_402190
.text:00402015                 mov     ecx, eax
.text:00402017
.text:00402017 loc_402017:                             ; CODE XREF: sub_401990+6B3↓j
.text:00402017                 mov     ebx, [ebp+14h]
.text:0040201A                 mov     eax, edi
.text:0040201C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040201F                 sub     eax, ebx
.text:00402021                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402025                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402029                 call    strncmp
.text:0040202E                 test    eax, eax
.text:00402030                 jz      loc_4021F7
.text:00402036
.text:00402036 loc_402036:                             ; CODE XREF: sub_401990+88C↓j
.text:00402036                                         ; sub_401990+89D↓j
.text:00402036                 inc     [esp+5Ch+var_3C]
.text:0040203A                 add     esi, 10h
.text:0040203D                 mov     edx, [esi]
.text:0040203F                 test    edx, edx
.text:00402041                 mov     ecx, edx
.text:00402043                 jnz     short loc_402017
.text:00402045
.text:00402045 loc_402045:                             ; CODE XREF: sub_401990+8B6↓j
.text:00402045                 mov     esi, [esp+5Ch+var_34]
.text:00402049                 test    esi, esi
.text:0040204B                 jz      short loc_402059
.text:0040204D                 mov     ebx, [esp+5Ch+var_30]
.text:00402051                 test    ebx, ebx
.text:00402053                 jz      loc_4021A1
.text:00402059
.text:00402059 loc_402059:                             ; CODE XREF: sub_401990+6BB↑j
.text:00402059                 mov     esi, [esp+5Ch+var_2C]
.text:0040205D                 test    esi, esi
.text:0040205F                 jz      loc_402190
.text:00402065                 cmp     byte ptr [edi], 0
.text:00402068                 jz      loc_402110
.text:0040206E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402072                 mov     ebx, [ecx+4]
.text:00402075                 test    ebx, ebx
.text:00402077                 jz      short loc_4020B8
.text:00402079                 lea     edx, [edi+1]
.text:0040207C                 mov     [ebp+0Ch], edx
.text:0040207F
.text:0040207F loc_40207F:                             ; CODE XREF: sub_401990+788↓j
.text:0040207F                                         ; sub_401990+7A7↓j
.text:0040207F                 mov     edi, [ebp+14h]
.text:00402082                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402085                 call    strlen
.text:0040208A                 add     [ebp+14h], eax
.text:0040208D                 mov     eax, [esp+5Ch+arg_10]
.text:00402091                 test    eax, eax
.text:00402093                 jz      short loc_4020A0
.text:00402095                 mov     edx, [esp+5Ch+var_38]
.text:00402099                 mov     ebp, [esp+5Ch+arg_10]
.text:0040209D                 mov     [ebp+0], edx
.text:004020A0
.text:004020A0 loc_4020A0:                             ; CODE XREF: sub_401990+703↑j
.text:004020A0                 mov     eax, [esp+5Ch+var_2C]
.text:004020A4                 mov     ecx, [eax+8]
.text:004020A7                 test    ecx, ecx
.text:004020A9                 jnz     loc_401C6A
.text:004020AF                 mov     ecx, [esp+5Ch+var_2C]
.text:004020B3                 jmp     loc_401C62
.text:004020B8 ; ---------------------------------------------------------------------------
.text:004020B8
.text:004020B8 loc_4020B8:                             ; CODE XREF: sub_401990+6E7↑j
.text:004020B8                 mov     eax, [esp+5Ch+var_14]
.text:004020BC                 test    eax, eax
.text:004020BE                 jnz     short loc_4020D3
.text:004020C0
.text:004020C0 loc_4020C0:                             ; CODE XREF: sub_401990+779↓j
.text:004020C0                 mov     ecx, [ebp+14h]
.text:004020C3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004020C6                 call    strlen
.text:004020CB                 add     [ebp+14h], eax
.text:004020CE                 jmp     loc_401CE8
.text:004020D3 ; ---------------------------------------------------------------------------
.text:004020D3
.text:004020D3 loc_4020D3:                             ; CODE XREF: sub_401990+72E↑j
.text:004020D3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004020DA                 call    ds:libintl_gettext
.text:004020E0                 mov     edx, [esp+5Ch+var_2C]
.text:004020E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004020E8                 mov     edi, [edx]
.text:004020EA                 mov     [esp+5Ch+var_50], edi
.text:004020EE                 mov     edi, ds:_iob
.text:004020F4                 mov     esi, [ebx]
.text:004020F6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004020FA                 add     edi, 40h ; '@'
.text:004020FD                 mov     [esp+5Ch+MaxCount], esi
.text:00402101                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402104                 call    fprintf
.text:00402109                 jmp     short loc_4020C0
.text:00402109 ; ---------------------------------------------------------------------------
.text:0040210B                 align 10h
.text:00402110
.text:00402110 loc_402110:                             ; CODE XREF: sub_401990+6D8↑j
.text:00402110                 mov     esi, [esp+5Ch+var_2C]
.text:00402114                 cmp     dword ptr [esi+4], 1
.text:00402118                 jnz     loc_40207F
.text:0040211E                 mov     ecx, [ebp+0]
.text:00402121                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402125                 jge     short loc_40213C
.text:00402127                 mov     eax, [esp+5Ch+arg_4]
.text:0040212B                 lea     ebx, [ecx+1]
.text:0040212E                 mov     [ebp+0], ebx
.text:00402131                 mov     edi, [eax+ecx*4]
.text:00402134                 mov     [ebp+0Ch], edi
.text:00402137                 jmp     loc_40207F
.text:0040213C ; ---------------------------------------------------------------------------
.text:0040213C
.text:0040213C loc_40213C:                             ; CODE XREF: sub_401990+795↑j
.text:0040213C                 mov     edx, [esp+5Ch+var_14]
.text:00402140                 test    edx, edx
.text:00402142                 jnz     short loc_402157
.text:00402144
.text:00402144 loc_402144:                             ; CODE XREF: sub_401990+7FE↓j
.text:00402144                 mov     edx, [ebp+14h]
.text:00402147                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040214A                 call    strlen
.text:0040214F                 add     [ebp+14h], eax
.text:00402152                 jmp     loc_401D79
.text:00402157 ; ---------------------------------------------------------------------------
.text:00402157
.text:00402157 loc_402157:                             ; CODE XREF: sub_401990+7B2↑j
.text:00402157                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040215E                 call    ds:libintl_gettext
.text:00402164                 mov     ecx, [ebp+0]
.text:00402167                 mov     ebx, [esp+5Ch+arg_4]
.text:0040216B                 mov     edi, [ebx+ecx*4-4]
.text:0040216F                 mov     ecx, ds:_iob
.text:00402175                 mov     [esp+5Ch+var_50], edi
.text:00402179                 mov     esi, [ebx]
.text:0040217B                 add     ecx, 40h ; '@'
.text:0040217E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402182                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402185                 mov     [esp+5Ch+MaxCount], esi
.text:00402189                 call    fprintf
.text:0040218E                 jmp     short loc_402144
.text:00402190 ; ---------------------------------------------------------------------------
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401990+67F↑j
.text:00402190                                         ; sub_401990+6CF↑j
.text:00402190                 mov     dword ptr [ebp+14h], 0
.text:00402197                 mov     eax, 57h ; 'W'
.text:0040219C                 jmp     loc_401AE7
.text:004021A1 ; ---------------------------------------------------------------------------
.text:004021A1
.text:004021A1 loc_4021A1:                             ; CODE XREF: sub_401990+6C3↑j
.text:004021A1                 mov     edi, [esp+5Ch+var_14]
.text:004021A5                 test    edi, edi
.text:004021A7                 jnz     short loc_4021BF
.text:004021A9
.text:004021A9 loc_4021A9:                             ; CODE XREF: sub_401990+865↓j
.text:004021A9                 mov     edx, [ebp+14h]
.text:004021AC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004021AF                 call    strlen
.text:004021B4                 add     [ebp+14h], eax
.text:004021B7                 inc     dword ptr [ebp+0]
.text:004021BA                 jmp     loc_401CE8
.text:004021BF ; ---------------------------------------------------------------------------
.text:004021BF
.text:004021BF loc_4021BF:                             ; CODE XREF: sub_401990+817↑j
.text:004021BF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004021C6                 call    ds:libintl_gettext
.text:004021CC                 mov     ecx, [ebp+0]
.text:004021CF                 mov     ebx, [esp+5Ch+arg_4]
.text:004021D3                 mov     edi, [ebx+ecx*4]
.text:004021D6                 mov     ecx, ds:_iob
.text:004021DC                 mov     [esp+5Ch+var_50], edi
.text:004021E0                 mov     esi, [ebx]
.text:004021E2                 add     ecx, 40h ; '@'
.text:004021E5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021E9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004021EC                 mov     [esp+5Ch+MaxCount], esi
.text:004021F0                 call    fprintf
.text:004021F5                 jmp     short loc_4021A9
.text:004021F7 ; ---------------------------------------------------------------------------
.text:004021F7
.text:004021F7 loc_4021F7:                             ; CODE XREF: sub_401990+6A0↑j
.text:004021F7                 mov     edx, [ebp+14h]
.text:004021FA                 mov     ebx, edi
.text:004021FC                 mov     ecx, [esi]
.text:004021FE                 sub     ebx, edx
.text:00402200                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402203                 call    strlen
.text:00402208                 cmp     ebx, eax
.text:0040220A                 jz      short loc_402232
.text:0040220C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402210                 test    ebx, ebx
.text:00402212                 jz      short loc_402221
.text:00402214                 mov     [esp+5Ch+var_34], 1
.text:0040221C                 jmp     loc_402036
.text:00402221 ; ---------------------------------------------------------------------------
.text:00402221
.text:00402221 loc_402221:                             ; CODE XREF: sub_401990+882↑j
.text:00402221                 mov     [esp+5Ch+var_2C], esi
.text:00402225                 mov     ecx, [esp+5Ch+var_3C]
.text:00402229                 mov     [esp+5Ch+var_38], ecx
.text:0040222D                 jmp     loc_402036
.text:00402232 ; ---------------------------------------------------------------------------
.text:00402232
.text:00402232 loc_402232:                             ; CODE XREF: sub_401990+87A↑j
.text:00402232                 mov     [esp+5Ch+var_2C], esi
.text:00402236                 mov     eax, [esp+5Ch+var_3C]
.text:0040223A                 mov     [esp+5Ch+var_30], 1
.text:00402242                 mov     [esp+5Ch+var_38], eax
.text:00402246                 jmp     loc_402045
.text:0040224B ; ---------------------------------------------------------------------------
.text:0040224B
.text:0040224B loc_40224B:                             ; CODE XREF: sub_401990+646↑j
.text:0040224B                 mov     edx, [ebp+0]
.text:0040224E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402252                 jz      short loc_402269
.text:00402254                 mov     ebx, [esp+5Ch+arg_4]
.text:00402258                 lea     esi, [edx+1]
.text:0040225B                 mov     [ebp+0], esi
.text:0040225E                 mov     edi, [ebx+edx*4]
.text:00402261                 mov     [ebp+0Ch], edi
.text:00402264                 jmp     loc_401FE2
.text:00402269 ; ---------------------------------------------------------------------------
.text:00402269
.text:00402269 loc_402269:                             ; CODE XREF: sub_401990+8C2↑j
.text:00402269                 mov     edi, [esp+5Ch+var_14]
.text:0040226D                 test    edi, edi
.text:0040226F                 jnz     short loc_40228C
.text:00402271
.text:00402271 loc_402271:                             ; CODE XREF: sub_401990+92C↓j
.text:00402271                 mov     [ebp+8], esi
.text:00402274                 mov     ebp, [esp+5Ch+Str]
.text:00402278                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040227C                 jz      short loc_402288
.text:0040227E                 mov     bl, 3Fh ; '?'
.text:00402280
.text:00402280 loc_402280:                             ; CODE XREF: sub_401990+8FA↓j
.text:00402280                 movsx   eax, bl
.text:00402283                 jmp     loc_401AE7
.text:00402288 ; ---------------------------------------------------------------------------
.text:00402288
.text:00402288 loc_402288:                             ; CODE XREF: sub_401990+8EC↑j
.text:00402288                 mov     bl, 3Ah ; ':'
.text:0040228A                 jmp     short loc_402280
.text:0040228C ; ---------------------------------------------------------------------------
.text:0040228C
.text:0040228C loc_40228C:                             ; CODE XREF: sub_401990+8DF↑j
.text:0040228C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402293                 call    ds:libintl_gettext
.text:00402299                 mov     [esp+5Ch+var_50], esi
.text:0040229D                 mov     edx, [esp+5Ch+arg_4]
.text:004022A1                 mov     ecx, ds:_iob
.text:004022A7                 mov     ebx, [edx]
.text:004022A9                 add     ecx, 40h ; '@'
.text:004022AC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022B0                 mov     [esp+5Ch+MaxCount], ebx
.text:004022B4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004022B7                 call    fprintf
.text:004022BC                 jmp     short loc_402271
.text:004022BC ; ---------------------------------------------------------------------------
.text:004022BE                 align 10h
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_401990+54C↑j
.text:004022C0                                         ; sub_401990+555↑j
.text:004022C0                 mov     eax, [esp+5Ch+var_14]
.text:004022C4                 test    eax, eax
.text:004022C6                 jz      short loc_4022FF
.text:004022C8                 mov     ebx, [ebp+1Ch]
.text:004022CB                 test    ebx, ebx
.text:004022CD                 jz      short loc_402307
.text:004022CF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004022D6
.text:004022D6 loc_4022D6:                             ; CODE XREF: sub_401990+97E↓j
.text:004022D6                 call    ds:libintl_gettext
.text:004022DC                 mov     [esp+5Ch+var_50], esi
.text:004022E0                 mov     ebx, [esp+5Ch+arg_4]
.text:004022E4                 mov     edx, ds:_iob
.text:004022EA                 mov     esi, [ebx]
.text:004022EC                 add     edx, 40h ; '@'
.text:004022EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022F3                 mov     [esp+5Ch+MaxCount], esi
.text:004022F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004022FA                 call    fprintf
.text:004022FF
.text:004022FF loc_4022FF:                             ; CODE XREF: sub_401990+936↑j
.text:004022FF                 mov     [ebp+8], edi
.text:00402302                 jmp     loc_401CE8
.text:00402307 ; ---------------------------------------------------------------------------
.text:00402307
.text:00402307 loc_402307:                             ; CODE XREF: sub_401990+93D↑j
.text:00402307                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040230E                 jmp     short loc_4022D6
.text:00402310 ; ---------------------------------------------------------------------------
.text:00402310
.text:00402310 loc_402310:                             ; CODE XREF: sub_401990+26E↑j
.text:00402310                 mov     edi, [esp+5Ch+var_14]
.text:00402314                 test    edi, edi
.text:00402316                 jnz     short loc_40232E
.text:00402318
.text:00402318 loc_402318:                             ; CODE XREF: sub_401990+9D4↓j
.text:00402318                 mov     edx, [ebp+14h]
.text:0040231B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040231E                 call    strlen
.text:00402323                 add     [ebp+14h], eax
.text:00402326                 inc     dword ptr [ebp+0]
.text:00402329                 jmp     loc_401E6E
.text:0040232E ; ---------------------------------------------------------------------------
.text:0040232E
.text:0040232E loc_40232E:                             ; CODE XREF: sub_401990+986↑j
.text:0040232E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402335                 call    ds:libintl_gettext
.text:0040233B                 mov     ebx, [ebp+0]
.text:0040233E                 mov     edi, [esp+5Ch+arg_4]
.text:00402342                 mov     ecx, [edi+ebx*4]
.text:00402345                 mov     ebx, ds:_iob
.text:0040234B                 mov     [esp+5Ch+var_50], ecx
.text:0040234F                 mov     esi, [edi]
.text:00402351                 add     ebx, 40h ; '@'
.text:00402354                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402358                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040235B                 mov     [esp+5Ch+MaxCount], esi
.text:0040235F                 call    fprintf
.text:00402364                 jmp     short loc_402318
.text:00402366 ; ---------------------------------------------------------------------------
.text:00402366
.text:00402366 loc_402366:                             ; CODE XREF: sub_401990+246↑j
.text:00402366                 mov     ecx, [ebp+14h]
.text:00402369                 mov     ebx, edi
.text:0040236B                 mov     edx, [esi]
.text:0040236D                 sub     ebx, ecx
.text:0040236F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402372                 call    strlen
.text:00402377                 cmp     ebx, eax
.text:00402379                 jz      short loc_4023D1
.text:0040237B                 mov     ebx, [esp+5Ch+var_18]
.text:0040237F                 test    ebx, ebx
.text:00402381                 jz      short loc_4023C0
.text:00402383                 mov     edx, [esp+5Ch+arg_14]
.text:00402387                 test    edx, edx
.text:00402389                 jnz     short loc_402397
.text:0040238B                 mov     ecx, [esp+5Ch+var_18]
.text:0040238F                 mov     ebx, [esi+4]
.text:00402392                 cmp     [ecx+4], ebx
.text:00402395                 jz      short loc_4023A4
.text:00402397
.text:00402397 loc_402397:                             ; CODE XREF: sub_401990+9F9↑j
.text:00402397                                         ; sub_401990+A1A↓j ...
.text:00402397                 mov     [esp+5Ch+var_20], 1
.text:0040239F                 jmp     loc_401BDC
.text:004023A4 ; ---------------------------------------------------------------------------
.text:004023A4
.text:004023A4 loc_4023A4:                             ; CODE XREF: sub_401990+A05↑j
.text:004023A4                 mov     edx, [esi+8]
.text:004023A7                 cmp     [ecx+8], edx
.text:004023AA                 jnz     short loc_402397
.text:004023AC                 mov     ebx, [esi+0Ch]
.text:004023AF                 cmp     [ecx+0Ch], ebx
.text:004023B2                 jnz     short loc_402397
.text:004023B4                 jmp     loc_401BDC
.text:004023B4 ; ---------------------------------------------------------------------------
.text:004023B9                 align 10h
.text:004023C0
.text:004023C0 loc_4023C0:                             ; CODE XREF: sub_401990+9F1↑j
.text:004023C0                 mov     [esp+5Ch+var_18], esi
.text:004023C4                 mov     eax, [esp+5Ch+var_28]
.text:004023C8                 mov     [esp+5Ch+var_24], eax
.text:004023CC                 jmp     loc_401BDC
.text:004023D1 ; ---------------------------------------------------------------------------
.text:004023D1
.text:004023D1 loc_4023D1:                             ; CODE XREF: sub_401990+9E9↑j
.text:004023D1                 mov     [esp+5Ch+var_18], esi
.text:004023D5                 mov     ecx, [esp+5Ch+var_28]
.text:004023D9                 mov     [esp+5Ch+var_1C], 1
.text:004023E1                 mov     [esp+5Ch+var_24], ecx
.text:004023E5                 jmp     loc_401BF0
.text:004023EA ; ---------------------------------------------------------------------------
.text:004023EA
.text:004023EA loc_4023EA:                             ; CODE XREF: sub_401990+1BF↑j
.text:004023EA                 mov     eax, [esp+5Ch+Str]
.text:004023EE                 movsx   esi, dl
.text:004023F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004023F5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004023F8                 call    strchr
.text:004023FD                 test    eax, eax
.text:004023FF                 jnz     loc_401EB0
.text:00402405                 jmp     loc_401B55
.text:0040240A ; ---------------------------------------------------------------------------
.text:0040240A
.text:0040240A loc_40240A:                             ; CODE XREF: sub_401990+17C↑j
.text:0040240A                 mov     ecx, 1
.text:0040240F                 jmp     loc_401B12
.text:00402414 ; ---------------------------------------------------------------------------
.text:00402414
.text:00402414 loc_402414:                             ; CODE XREF: sub_401990+D4↑j
.text:00402414                                         ; sub_401990+130↑j
.text:00402414                 mov     eax, [ebp+20h]
.text:00402417                 cmp     eax, [ebp+24h]
.text:0040241A                 jz      loc_401AF0
.text:00402420                 mov     [ebp+0], eax
.text:00402423                 jmp     loc_401AF0
.text:00402428 ; ---------------------------------------------------------------------------
.text:00402428
.text:00402428 loc_402428:                             ; CODE XREF: sub_401990+FE↑j
.text:00402428                 mov     [ebp+20h], eax
.text:0040242B                 jmp     loc_401AB0
.text:00402430 ; ---------------------------------------------------------------------------
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_401990+CA↑j
.text:00402430                 mov     edx, [ebp+20h]
.text:00402433                 mov     eax, [ebp+24h]
.text:00402436                 cmp     edx, eax
.text:00402438                 jz      short loc_4024B0
.text:0040243A                 cmp     eax, ebx
.text:0040243C                 jz      short loc_402451
.text:0040243E                 mov     [esp+5Ch+Str2], ebp
.text:00402442                 mov     ebx, [esp+5Ch+arg_4]
.text:00402446                 mov     [esp+5Ch+Str1], ebx
.text:00402449                 call    sub_402640
.text:0040244E                 mov     ebx, [ebp+0]
.text:00402451
.text:00402451 loc_402451:                             ; CODE XREF: sub_401990+AAC↑j
.text:00402451                                         ; sub_401990+B22↓j ...
.text:00402451                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402455                 jge     short loc_4024A0
.text:00402457                 mov     esi, [esp+5Ch+arg_4]
.text:0040245B                 mov     eax, [esi+ebx*4]
.text:0040245E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402461                 jz      short loc_4024A8
.text:00402463                 lea     esi, [esi+0]
.text:00402469                 lea     edi, [edi+0]
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_401990+AFC↓j
.text:00402470                                         ; sub_401990+B1C↓j
.text:00402470                 lea     eax, [ebx+1]
.text:00402473                 mov     ebx, eax
.text:00402475                 mov     [ebp+0], eax
.text:00402478                 cmp     eax, [esp+5Ch+arg_0]
.text:0040247C                 jge     short loc_4024A0
.text:0040247E                 mov     edi, [esp+5Ch+arg_4]
.text:00402482                 mov     edx, [edi+eax*4]
.text:00402485                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402488                 jz      short loc_402490
.text:0040248A
.text:0040248A loc_40248A:                             ; CODE XREF: sub_401990+B04↓j
.text:0040248A                 mov     ebx, eax
.text:0040248C                 jmp     short loc_402470
.text:0040248C ; ---------------------------------------------------------------------------
.text:0040248E                 align 10h
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_401990+AF8↑j
.text:00402490                 cmp     byte ptr [edx+1], 0
.text:00402494                 jz      short loc_40248A
.text:00402496                 lea     esi, [esi+0]
.text:00402499                 lea     edi, [edi+0]
.text:004024A0
.text:004024A0 loc_4024A0:                             ; CODE XREF: sub_401990+AC5↑j
.text:004024A0                                         ; sub_401990+AEC↑j ...
.text:004024A0                 mov     [ebp+24h], ebx
.text:004024A3                 jmp     loc_401A60
.text:004024A8 ; ---------------------------------------------------------------------------
.text:004024A8
.text:004024A8 loc_4024A8:                             ; CODE XREF: sub_401990+AD1↑j
.text:004024A8                 cmp     byte ptr [eax+1], 0
.text:004024AC                 jz      short loc_402470
.text:004024AE                 jmp     short loc_4024A0
.text:004024B0 ; ---------------------------------------------------------------------------
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_401990+AA8↑j
.text:004024B0                 cmp     edx, ebx
.text:004024B2                 jz      short loc_402451
.text:004024B4                 mov     [ebp+20h], ebx
.text:004024B7                 jmp     short loc_402451
.text:004024B9 ; ---------------------------------------------------------------------------
.text:004024B9
.text:004024B9 loc_4024B9:                             ; CODE XREF: sub_401990+88↑j
.text:004024B9                 mov     dword ptr [ebp+18h], 0
.text:004024C0                 mov     esi, [esp+5Ch+Str]
.text:004024C4
.text:004024C4 loc_4024C4:                             ; CODE XREF: sub_401990+B49↓j
.text:004024C4                 inc     esi
.text:004024C5                 jmp     loc_401A28
.text:004024C5 ; ---------------------------------------------------------------------------
.text:004024CA                 align 10h
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_401990+80↑j
.text:004024D0                 mov     dword ptr [ebp+18h], 2
.text:004024D7                 mov     esi, ecx
.text:004024D9                 jmp     short loc_4024C4
.text:004024D9 ; ---------------------------------------------------------------------------
.text:004024DB                 align 10h
.text:004024E0
.text:004024E0 loc_4024E0:                             ; CODE XREF: sub_401990+69↑j
.text:004024E0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004024E7                 call    getenv
.text:004024EC                 test    eax, eax
.text:004024EE                 jz      loc_401A04
.text:004024F4                 jmp     loc_4019FF
.text:004024F4 ; ---------------------------------------------------------------------------
.text:004024F9                 align 10h
.text:00402500
.text:00402500 loc_402500:                             ; CODE XREF: sub_401990+3F↑j
.text:00402500                 mov     dword ptr [ebp+0], 1
.text:00402507                 mov     ebx, 1
.text:0040250C                 jmp     loc_4019E0
.text:0040250C sub_401990      endp
.text:0040250C
.text:00402511 ; ---------------------------------------------------------------------------
.text:00402511                 jmp     short sub_402520
.text:00402511 ; ---------------------------------------------------------------------------
.text:00402513                 align 10h
.text:00402520
.text:00402520 ; =============== S U B R O U T I N E =======================================
.text:00402520
.text:00402520
.text:00402520 ; int __cdecl sub_402520(int, int, char *, int, int, int, int)
.text:00402520 sub_402520      proc near               ; CODE XREF: .text:00402511↑j
.text:00402520                                         ; sub_4027C0+3A↓p ...
.text:00402520
.text:00402520 var_2C          = dword ptr -2Ch
.text:00402520 var_28          = dword ptr -28h
.text:00402520 Str             = dword ptr -24h
.text:00402520 var_20          = dword ptr -20h
.text:00402520 var_1C          = dword ptr -1Ch
.text:00402520 var_18          = dword ptr -18h
.text:00402520 var_14          = dword ptr -14h
.text:00402520 var_10          = dword ptr -10h
.text:00402520 arg_0           = dword ptr  4
.text:00402520 arg_4           = dword ptr  8
.text:00402520 arg_8           = dword ptr  0Ch
.text:00402520 arg_C           = dword ptr  10h
.text:00402520 arg_10          = dword ptr  14h
.text:00402520 arg_14          = dword ptr  18h
.text:00402520 arg_18          = dword ptr  1Ch
.text:00402520
.text:00402520                 sub     esp, 2Ch
.text:00402523                 mov     edx, dword_406010
.text:00402529                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:00402531                 mov     ecx, dword_406014
.text:00402537                 mov     ds:dword_407000, edx
.text:0040253D                 mov     edx, [esp+2Ch+arg_18]
.text:00402541                 mov     ds:dword_407004, ecx
.text:00402547                 mov     ecx, [esp+2Ch+arg_14]
.text:0040254B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040254F                 mov     edx, [esp+2Ch+arg_10]
.text:00402553                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402557                 mov     ecx, [esp+2Ch+arg_C]
.text:0040255B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040255F                 mov     edx, [esp+2Ch+arg_8]
.text:00402563                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402567                 mov     ecx, [esp+2Ch+arg_4]
.text:0040256B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040256F                 mov     edx, [esp+2Ch+arg_0]
.text:00402573                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402577                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040257A                 call    sub_401990
.text:0040257F                 mov     ecx, ds:dword_407000
.text:00402585                 mov     dword_406010, ecx
.text:0040258B                 mov     ecx, ds:dword_40700C
.text:00402591                 mov     ds:dword_4076E0, ecx
.text:00402597                 mov     ecx, ds:dword_407008
.text:0040259D                 mov     dword_406018, ecx
.text:004025A3                 add     esp, 2Ch
.text:004025A6                 retn
.text:004025A6 sub_402520      endp
.text:004025A6
.text:004025A6 ; ---------------------------------------------------------------------------
.text:004025A7                 align 10h
.text:004025B0                 sub     esp, 2Ch
.text:004025B3                 mov     edx, dword_406010
.text:004025B9                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:004025C1                 mov     ecx, dword_406014
.text:004025C7                 mov     dword ptr [esp+18h], 1
.text:004025CF                 mov     ds:dword_407000, edx
.text:004025D5                 mov     edx, [esp+38h]
.text:004025D9                 mov     ds:dword_407004, ecx
.text:004025DF                 mov     ecx, [esp+34h]
.text:004025E3                 mov     [esp+8], edx
.text:004025E7                 mov     edx, [esp+30h]
.text:004025EB                 mov     [esp+4], ecx
.text:004025EF                 mov     dword ptr [esp+14h], 0
.text:004025F7                 mov     dword ptr [esp+10h], 0
.text:004025FF                 mov     dword ptr [esp+0Ch], 0
.text:00402607                 mov     [esp], edx
.text:0040260A                 call    sub_401990
.text:0040260F                 mov     ecx, ds:dword_407000
.text:00402615                 mov     dword_406010, ecx
.text:0040261B                 mov     ecx, ds:dword_40700C
.text:00402621                 mov     ds:dword_4076E0, ecx
.text:00402627                 mov     ecx, ds:dword_407008
.text:0040262D                 mov     dword_406018, ecx
.text:00402633                 add     esp, 2Ch
.text:00402636                 retn
.text:00402636 ; ---------------------------------------------------------------------------
.text:00402637                 align 10h
.text:00402640
.text:00402640 ; =============== S U B R O U T I N E =======================================
.text:00402640
.text:00402640
.text:00402640 sub_402640      proc near               ; CODE XREF: sub_401990+113↑p
.text:00402640                                         ; sub_401990+AB9↑p
.text:00402640
.text:00402640 var_2C          = dword ptr -2Ch
.text:00402640 var_28          = dword ptr -28h
.text:00402640 var_24          = dword ptr -24h
.text:00402640 var_20          = dword ptr -20h
.text:00402640 var_1C          = dword ptr -1Ch
.text:00402640 var_18          = dword ptr -18h
.text:00402640 var_14          = dword ptr -14h
.text:00402640 arg_0           = dword ptr  4
.text:00402640 arg_4           = dword ptr  8
.text:00402640
.text:00402640                 push    ebp
.text:00402641                 push    edi
.text:00402642                 push    esi
.text:00402643                 push    ebx
.text:00402644                 sub     esp, 1Ch
.text:00402647                 mov     ecx, [esp+2Ch+arg_4]
.text:0040264B                 mov     eax, [esp+2Ch+arg_4]
.text:0040264F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402653                 mov     edx, [ecx+20h]
.text:00402656                 mov     edi, [esp+2Ch+arg_0]
.text:0040265A                 mov     ecx, [ebx]
.text:0040265C                 mov     [esp+2Ch+var_2C], edx
.text:0040265F                 mov     [esp+2Ch+var_14], edx
.text:00402663                 mov     edx, [eax+24h]
.text:00402666                 mov     [esp+2Ch+var_28], ecx
.text:0040266A                 mov     [esp+2Ch+var_1C], ecx
.text:0040266E                 cmp     ecx, edx
.text:00402670                 mov     [esp+2Ch+var_18], edx
.text:00402674                 jle     short loc_4026F0
.text:00402676                 mov     esi, [esp+2Ch+var_2C]
.text:00402679                 cmp     edx, esi
.text:0040267B                 jle     short loc_4026F0
.text:0040267D                 lea     esi, [esi+0]
.text:00402680
.text:00402680 loc_402680:                             ; CODE XREF: sub_402640+A1↓j
.text:00402680                 mov     ebx, [esp+2Ch+var_1C]
.text:00402684                 mov     edx, [esp+2Ch+var_18]
.text:00402688                 mov     ebp, [esp+2Ch+var_18]
.text:0040268C                 mov     eax, [esp+2Ch+var_14]
.text:00402690                 sub     ebx, edx
.text:00402692                 mov     [esp+2Ch+var_20], ebx
.text:00402696                 sub     ebp, eax
.text:00402698                 cmp     ebx, ebp
.text:0040269A                 jle     short loc_402715
.text:0040269C                 xor     esi, esi
.text:0040269E                 cmp     esi, ebp
.text:004026A0                 jge     short loc_4026CD
.text:004026A2                 mov     ecx, [esp+2Ch+var_1C]
.text:004026A6                 sub     ecx, ebp
.text:004026A8                 mov     [esp+2Ch+var_24], ecx
.text:004026AC                 lea     esi, [esi+0]
.text:004026B0
.text:004026B0 loc_4026B0:                             ; CODE XREF: sub_402640+8B↓j
.text:004026B0                 mov     ecx, [esp+2Ch+var_14]
.text:004026B4                 mov     edx, [esp+2Ch+var_24]
.text:004026B8                 add     ecx, esi
.text:004026BA                 add     edx, esi
.text:004026BC                 mov     ebx, [edi+ecx*4]
.text:004026BF                 mov     eax, [edi+edx*4]
.text:004026C2                 inc     esi
.text:004026C3                 cmp     esi, ebp
.text:004026C5                 mov     [edi+ecx*4], eax
.text:004026C8                 mov     [edi+edx*4], ebx
.text:004026CB                 jl      short loc_4026B0
.text:004026CD
.text:004026CD loc_4026CD:                             ; CODE XREF: sub_402640+60↑j
.text:004026CD                 sub     [esp+2Ch+var_1C], ebp
.text:004026D1
.text:004026D1 loc_4026D1:                             ; CODE XREF: sub_402640+107↓j
.text:004026D1                 mov     eax, [esp+2Ch+var_18]
.text:004026D5                 cmp     [esp+2Ch+var_1C], eax
.text:004026D9                 jle     short loc_4026F0
.text:004026DB                 mov     ebp, [esp+2Ch+var_14]
.text:004026DF                 cmp     eax, ebp
.text:004026E1                 jg      short loc_402680
.text:004026E3                 lea     esi, [esi+0]
.text:004026E9                 lea     edi, [edi+0]
.text:004026F0
.text:004026F0 loc_4026F0:                             ; CODE XREF: sub_402640+34↑j
.text:004026F0                                         ; sub_402640+3B↑j ...
.text:004026F0                 mov     esi, [esp+2Ch+var_28]
.text:004026F4                 mov     ecx, [esp+2Ch+var_18]
.text:004026F8                 mov     eax, [esp+2Ch+var_2C]
.text:004026FB                 mov     edi, [esp+2Ch+arg_4]
.text:004026FF                 mov     edx, [esp+2Ch+var_28]
.text:00402703                 sub     esi, ecx
.text:00402705                 add     esi, eax
.text:00402707                 mov     [edi+20h], esi
.text:0040270A                 mov     [edi+24h], edx
.text:0040270D                 add     esp, 1Ch
.text:00402710                 pop     ebx
.text:00402711                 pop     esi
.text:00402712                 pop     edi
.text:00402713                 pop     ebp
.text:00402714                 retn
.text:00402715 ; ---------------------------------------------------------------------------
.text:00402715
.text:00402715 loc_402715:                             ; CODE XREF: sub_402640+5A↑j
.text:00402715                 xor     esi, esi
.text:00402717                 cmp     esi, [esp+2Ch+var_20]
.text:0040271B                 jge     short loc_40273F
.text:0040271D                 lea     esi, [esi+0]
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_402640+FD↓j
.text:00402720                 mov     ebx, [esp+2Ch+var_14]
.text:00402724                 mov     ebp, [esp+2Ch+var_18]
.text:00402728                 add     ebx, esi
.text:0040272A                 add     ebp, esi
.text:0040272C                 mov     edx, [edi+ebx*4]
.text:0040272F                 inc     esi
.text:00402730                 cmp     esi, [esp+2Ch+var_20]
.text:00402734                 mov     ecx, [edi+ebp*4]
.text:00402737                 mov     [edi+ebx*4], ecx
.text:0040273A                 mov     [edi+ebp*4], edx
.text:0040273D                 jl      short loc_402720
.text:0040273F
.text:0040273F loc_40273F:                             ; CODE XREF: sub_402640+DB↑j
.text:0040273F                 mov     esi, [esp+2Ch+var_20]
.text:00402743                 add     [esp+2Ch+var_14], esi
.text:00402747                 jmp     short loc_4026D1
.text:00402747 sub_402640      endp
.text:00402747
.text:00402747 ; ---------------------------------------------------------------------------
.text:00402749                 align 20h
.text:00402760                 sub     esp, 0Ch
.text:00402763                 mov     edx, [esp+14h]
.text:00402767                 mov     dword ptr [esp+4], 5
.text:0040276F                 mov     [esp+8], edx
.text:00402773                 mov     edx, [esp+10h]
.text:00402777                 mov     [esp], edx
.text:0040277A                 call    sub_4038F0
.text:0040277F                 add     esp, 0Ch
.text:00402782                 retn
.text:00402782 ; ---------------------------------------------------------------------------
.text:00402783                 align 10h
.text:00402790
.text:00402790 ; =============== S U B R O U T I N E =======================================
.text:00402790
.text:00402790
.text:00402790 ; int __cdecl sub_402790(char *)
.text:00402790 sub_402790      proc near               ; CODE XREF: sub_401370+13F↑p
.text:00402790
.text:00402790 var_C           = dword ptr -0Ch
.text:00402790 var_8           = dword ptr -8
.text:00402790 var_4           = dword ptr -4
.text:00402790 arg_0           = dword ptr  4
.text:00402790
.text:00402790                 sub     esp, 0Ch
.text:00402793                 mov     edx, [esp+0Ch+arg_0]
.text:00402797                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040279F                 mov     [esp+0Ch+var_C], 0 ; int
.text:004027A6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004027AA                 call    sub_4038F0
.text:004027AF                 add     esp, 0Ch
.text:004027B2                 retn
.text:004027B2 sub_402790      endp
.text:004027B2
.text:004027B2 ; ---------------------------------------------------------------------------
.text:004027B3                 align 10h
.text:004027C0
.text:004027C0 ; =============== S U B R O U T I N E =======================================
.text:004027C0
.text:004027C0
.text:004027C0 ; int __cdecl sub_4027C0(int, int, char *, int, int)
.text:004027C0 sub_4027C0      proc near               ; CODE XREF: sub_401370+C2↑p
.text:004027C0                                         ; sub_402960+58↓p
.text:004027C0
.text:004027C0 var_1C          = dword ptr -1Ch
.text:004027C0 var_18          = dword ptr -18h
.text:004027C0 var_14          = dword ptr -14h
.text:004027C0 var_10          = dword ptr -10h
.text:004027C0 var_C           = dword ptr -0Ch
.text:004027C0 var_8           = dword ptr -8
.text:004027C0 var_4           = dword ptr -4
.text:004027C0 arg_0           = dword ptr  4
.text:004027C0 arg_4           = dword ptr  8
.text:004027C0 arg_8           = dword ptr  0Ch
.text:004027C0 arg_C           = dword ptr  10h
.text:004027C0 arg_10          = dword ptr  14h
.text:004027C0
.text:004027C0                 sub     esp, 1Ch
.text:004027C3                 mov     edx, [esp+1Ch+arg_C]
.text:004027C7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004027CF                 mov     ecx, [esp+1Ch+arg_10]
.text:004027D3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004027DB                 mov     [esp+1Ch+var_10], edx ; int
.text:004027DF                 mov     edx, [esp+1Ch+arg_4]
.text:004027E3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004027E7                 mov     ecx, [esp+1Ch+arg_8]
.text:004027EB                 mov     [esp+1Ch+var_18], edx ; int
.text:004027EF                 mov     edx, [esp+1Ch+arg_0]
.text:004027F3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004027F7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004027FA                 call    sub_402520
.text:004027FF                 add     esp, 1Ch
.text:00402802                 retn
.text:00402802 sub_4027C0      endp
.text:00402802
.text:00402802 ; ---------------------------------------------------------------------------
.text:00402803                 align 10h
.text:00402810                 sub     esp, 2Ch
.text:00402813                 mov     edx, [esp+44h]
.text:00402817                 mov     dword ptr [esp+18h], 0
.text:0040281F                 mov     ecx, [esp+40h]
.text:00402823                 mov     dword ptr [esp+14h], 0
.text:0040282B                 mov     [esp+1Ch], edx
.text:0040282F                 mov     edx, [esp+3Ch]
.text:00402833                 mov     [esp+10h], ecx
.text:00402837                 mov     ecx, [esp+38h]
.text:0040283B                 mov     [esp+0Ch], edx
.text:0040283F                 mov     edx, [esp+34h]
.text:00402843                 mov     [esp+8], ecx
.text:00402847                 mov     [esp+4], edx
.text:0040284B                 mov     edx, [esp+30h]
.text:0040284F                 mov     [esp], edx
.text:00402852                 call    sub_401990
.text:00402857                 add     esp, 2Ch
.text:0040285A                 retn
.text:0040285A ; ---------------------------------------------------------------------------
.text:0040285B                 align 10h
.text:00402860                 sub     esp, 1Ch
.text:00402863                 mov     edx, [esp+2Ch]
.text:00402867                 mov     dword ptr [esp+18h], 0
.text:0040286F                 mov     ecx, [esp+30h]
.text:00402873                 mov     dword ptr [esp+14h], 1
.text:0040287B                 mov     [esp+0Ch], edx
.text:0040287F                 mov     edx, [esp+24h]
.text:00402883                 mov     [esp+10h], ecx
.text:00402887                 mov     ecx, [esp+28h]
.text:0040288B                 mov     [esp+4], edx
.text:0040288F                 mov     edx, [esp+20h]
.text:00402893                 mov     [esp+8], ecx
.text:00402897                 mov     [esp], edx
.text:0040289A                 call    sub_402520
.text:0040289F                 add     esp, 1Ch
.text:004028A2                 retn
.text:004028A2 ; ---------------------------------------------------------------------------
.text:004028A3                 align 10h
.text:004028B0                 sub     esp, 2Ch
.text:004028B3                 mov     edx, [esp+44h]
.text:004028B7                 mov     dword ptr [esp+18h], 0
.text:004028BF                 mov     ecx, [esp+40h]
.text:004028C3                 mov     dword ptr [esp+14h], 1
.text:004028CB                 mov     [esp+1Ch], edx
.text:004028CF                 mov     edx, [esp+3Ch]
.text:004028D3                 mov     [esp+10h], ecx
.text:004028D7                 mov     ecx, [esp+38h]
.text:004028DB                 mov     [esp+0Ch], edx
.text:004028DF                 mov     edx, [esp+34h]
.text:004028E3                 mov     [esp+8], ecx
.text:004028E7                 mov     [esp+4], edx
.text:004028EB                 mov     edx, [esp+30h]
.text:004028EF                 mov     [esp], edx
.text:004028F2                 call    sub_401990
.text:004028F7                 add     esp, 2Ch
.text:004028FA                 retn
.text:004028FA ; ---------------------------------------------------------------------------
.text:004028FB                 align 10h
.text:00402900 aHelp           db 'help',0             ; DATA XREF: .text:off_402920↓o
.text:00402905 aVersion        db 'version',0          ; DATA XREF: .text:00402930↓o
.text:0040290D                 align 20h
.text:00402920 off_402920      dd offset aHelp         ; DATA XREF: sub_402960+3D↓o
.text:00402920                                         ; "help"
.text:00402924                 dd 2 dup(0)
.text:0040292C                 dd 68h
.text:00402930                 dd offset aVersion      ; "version"
.text:00402934                 dd 2 dup(0)
.text:0040293C                 dd 76h, 4 dup(0)
.text:00402950 ; ---------------------------------------------------------------------------
.text:00402950
.text:00402950 loc_402950:                             ; DATA XREF: sub_402960+45↓o
.text:00402950                 sub     eax, [eax]
.text:00402952                 lea     esi, [esi+0]
.text:00402959                 lea     edi, [edi+0]
.text:00402960
.text:00402960 ; =============== S U B R O U T I N E =======================================
.text:00402960
.text:00402960
.text:00402960 ; int __cdecl sub_402960(int, int, FILE *, int, int, int, char)
.text:00402960 sub_402960      proc near               ; CODE XREF: sub_401370+9E↑p
.text:00402960
.text:00402960 Code            = dword ptr -1Ch
.text:00402960 var_18          = dword ptr -18h
.text:00402960 var_14          = dword ptr -14h
.text:00402960 var_10          = dword ptr -10h
.text:00402960 var_C           = dword ptr -0Ch
.text:00402960 var_4           = dword ptr -4
.text:00402960 arg_0           = dword ptr  4
.text:00402960 arg_4           = dword ptr  8
.text:00402960 arg_8           = dword ptr  0Ch
.text:00402960 arg_C           = dword ptr  10h
.text:00402960 arg_10          = dword ptr  14h
.text:00402960 arg_14          = dword ptr  18h
.text:00402960 arg_18          = byte ptr  1Ch
.text:00402960
.text:00402960                 sub     esp, 1Ch
.text:00402963                 xor     eax, eax
.text:00402965                 cmp     [esp+1Ch+arg_0], 2
.text:0040296A                 mov     [esp+1Ch+var_4], ebx
.text:0040296E                 mov     ebx, dword_406014
.text:00402974                 mov     dword_406014, eax
.text:00402979                 jz      short loc_402991
.text:0040297B
.text:0040297B loc_40297B:                             ; CODE XREF: sub_402960+60↓j
.text:0040297B                                         ; sub_402960+6A↓j
.text:0040297B                 mov     dword_406014, ebx
.text:00402981                 xor     edx, edx
.text:00402983                 mov     ebx, [esp+1Ch+var_4]
.text:00402987                 mov     dword_406010, edx
.text:0040298D                 add     esp, 1Ch
.text:00402990                 retn
.text:00402991 ; ---------------------------------------------------------------------------
.text:00402991
.text:00402991 loc_402991:                             ; CODE XREF: sub_402960+19↑j
.text:00402991                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402999                 mov     edx, [esp+1Ch+arg_4]
.text:0040299D                 mov     [esp+1Ch+var_10], offset off_402920 ; int
.text:004029A5                 mov     [esp+1Ch+var_14], offset loc_402950 ; char *
.text:004029AD                 mov     [esp+1Ch+var_18], edx ; int
.text:004029B1                 mov     [esp+1Ch+Code], 2 ; int
.text:004029B8                 call    sub_4027C0
.text:004029BD                 cmp     eax, 0FFFFFFFFh
.text:004029C0                 jz      short loc_40297B
.text:004029C2                 cmp     eax, 68h ; 'h'
.text:004029C5                 jz      short loc_4029CE
.text:004029C7                 cmp     eax, 76h ; 'v'
.text:004029CA                 jnz     short loc_40297B
.text:004029CC                 jmp     short loc_4029D9
.text:004029CE ; ---------------------------------------------------------------------------
.text:004029CE
.text:004029CE loc_4029CE:                             ; CODE XREF: sub_402960+65↑j
.text:004029CE                 mov     [esp+1Ch+Code], 0
.text:004029D5                 call    [esp+1Ch+arg_14]
.text:004029D9
.text:004029D9 loc_4029D9:                             ; CODE XREF: sub_402960+6C↑j
.text:004029D9                 mov     ecx, [esp+1Ch+arg_10]
.text:004029DD                 lea     ebx, [esp+1Ch+arg_18]
.text:004029E1                 mov     edx, [esp+1Ch+arg_C]
.text:004029E5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:004029E9                 mov     ebx, [esp+1Ch+arg_8]
.text:004029ED                 mov     [esp+1Ch+var_10], ecx ; int
.text:004029F1                 mov     ecx, ds:_iob
.text:004029F7                 mov     [esp+1Ch+var_14], edx ; int
.text:004029FB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:004029FF                 add     ecx, 20h ; ' '
.text:00402A02                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402A05                 call    sub_4041C0
.text:00402A0A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402A11                 call    exit
.text:00402A11 sub_402960      endp
.text:00402A11
.text:00402A11 ; ---------------------------------------------------------------------------
.text:00402A16                 align 10h
.text:00402A20                 mov     edx, [esp+4]
.text:00402A24                 mov     ds:dword_407030, edx
.text:00402A2A                 retn
.text:00402A2A ; ---------------------------------------------------------------------------
.text:00402A2B aWriteError     db 'write error',0      ; DATA XREF: sub_402A50:loc_402A99↓o
.text:00402A37 ; const char aSS[]
.text:00402A37 aSS             db '%s: %s',0           ; DATA XREF: sub_402A50+77↓o
.text:00402A3E ; const char aS_2[]
.text:00402A3E aS_2            db '%s',0               ; DATA XREF: sub_402A50+A0↓o
.text:00402A41 ; ---------------------------------------------------------------------------
.text:00402A41                 jmp     short sub_402A50
.text:00402A41 ; ---------------------------------------------------------------------------
.text:00402A43                 align 10h
.text:00402A50
.text:00402A50 ; =============== S U B R O U T I N E =======================================
.text:00402A50
.text:00402A50
.text:00402A50 ; void __cdecl sub_402A50()
.text:00402A50 sub_402A50      proc near               ; CODE XREF: .text:00402A41↑j
.text:00402A50                                         ; DATA XREF: sub_401370+5B↑o
.text:00402A50
.text:00402A50 Stream          = dword ptr -2Ch
.text:00402A50 ErrorMessage    = dword ptr -28h
.text:00402A50 var_24          = dword ptr -24h
.text:00402A50 var_20          = byte ptr -20h
.text:00402A50 var_1C          = dword ptr -1Ch
.text:00402A50 var_9           = byte ptr -9
.text:00402A50
.text:00402A50                 push    esi
.text:00402A51                 push    ebx
.text:00402A52                 sub     esp, 24h
.text:00402A55                 mov     edx, ds:_iob
.text:00402A5B                 mov     ecx, [edx+2Ch]
.text:00402A5E                 lea     esi, [edx+20h]
.text:00402A61                 shr     ecx, 5
.text:00402A64                 mov     bl, cl
.text:00402A66                 mov     ecx, [edx+20h]
.text:00402A69                 and     bl, 1
.text:00402A6C                 cmp     ecx, [esi+8]
.text:00402A6F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402A72                 setz    [esp+2Ch+var_9]
.text:00402A77                 call    fclose
.text:00402A7C                 test    eax, eax
.text:00402A7E                 setnz   al
.text:00402A81                 test    bl, bl
.text:00402A83                 jnz     loc_402B13
.text:00402A89                 test    al, al
.text:00402A8B                 jz      short loc_402AE0
.text:00402A8D
.text:00402A8D loc_402A8D:                             ; CODE XREF: sub_402A50+CD↓j
.text:00402A8D                 call    _errno
.text:00402A92                 mov     esi, [eax]
.text:00402A94
.text:00402A94 loc_402A94:                             ; CODE XREF: sub_402A50+C7↓j
.text:00402A94                 cmp     esi, 9
.text:00402A97                 jz      short loc_402B06
.text:00402A99
.text:00402A99 loc_402A99:                             ; CODE XREF: sub_402A50+B8↓j
.text:00402A99                                         ; sub_402A50+C1↓j
.text:00402A99                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402AA0                 call    ds:libintl_gettext
.text:00402AA6                 mov     ebx, eax
.text:00402AA8                 mov     eax, ds:dword_407030
.text:00402AAD                 test    eax, eax
.text:00402AAF                 jz      short loc_402AE6
.text:00402AB1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402AB4                 call    sub_403C60
.text:00402AB9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402ABD                 mov     edx, Code
.text:00402AC3                 mov     [esp+2Ch+var_1C], ebx
.text:00402AC7                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402ACF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402AD3                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402AD6                 call    sub_404750
.text:00402ADB                 nop
.text:00402ADC                 lea     esi, [esi+0]
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: sub_402A50+3B↑j
.text:00402AE0                                         ; sub_402A50+B4↓j ...
.text:00402AE0                 add     esp, 24h
.text:00402AE3                 pop     ebx
.text:00402AE4                 pop     esi
.text:00402AE5                 retn
.text:00402AE6 ; ---------------------------------------------------------------------------
.text:00402AE6
.text:00402AE6 loc_402AE6:                             ; CODE XREF: sub_402A50+5F↑j
.text:00402AE6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402AEA                 mov     ebx, Code
.text:00402AF0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402AF8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402AFC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402AFF                 call    sub_404750
.text:00402B04                 jmp     short loc_402AE0
.text:00402B06 ; ---------------------------------------------------------------------------
.text:00402B06
.text:00402B06 loc_402B06:                             ; CODE XREF: sub_402A50+47↑j
.text:00402B06                 test    bl, bl
.text:00402B08                 jnz     short loc_402A99
.text:00402B0A                 cmp     [esp+2Ch+var_9], 0
.text:00402B0F                 jnz     short loc_402AE0
.text:00402B11                 jmp     short loc_402A99
.text:00402B13 ; ---------------------------------------------------------------------------
.text:00402B13
.text:00402B13 loc_402B13:                             ; CODE XREF: sub_402A50+33↑j
.text:00402B13                 xor     esi, esi
.text:00402B15                 test    al, al
.text:00402B17                 jz      loc_402A94
.text:00402B1D                 jmp     loc_402A8D
.text:00402B1D sub_402A50      endp
.text:00402B1D
.text:00402B1D ; ---------------------------------------------------------------------------
.text:00402B22                 align 10h
.text:00402B30 aLiteral        db 'literal',0          ; DATA XREF: .text:00402B70↓o
.text:00402B38 aShell_0        db 'shell',0            ; DATA XREF: .text:00402B74↓o
.text:00402B3E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402B78↓o
.text:00402B4B aC_0            db 'c',0                ; DATA XREF: .text:00402B7C↓o
.text:00402B4D aEscape         db 'escape',0           ; DATA XREF: .text:00402B80↓o
.text:00402B54 aLocale         db 'locale',0           ; DATA XREF: .text:00402B84↓o
.text:00402B5B aClocale        db 'clocale',0          ; DATA XREF: .text:00402B88↓o
.text:00402B63                 align 10h
.text:00402B70                 dd offset aLiteral      ; "literal"
.text:00402B74                 dd offset aShell_0      ; "shell"
.text:00402B78                 dd offset aShellAlways  ; "shell-always"
.text:00402B7C                 dd offset aC_0          ; "c"
.text:00402B80                 dd offset aEscape       ; "escape"
.text:00402B84                 dd offset aLocale       ; "locale"
.text:00402B88                 dd offset aClocale      ; "clocale"
.text:00402B8C                 dd 2 dup(0)
.text:00402B94                 dd 1, 2, 3, 4, 5, 6
.text:00402BAC asc_402BAC:                             ; DATA XREF: sub_402BC0+7E↓o
.text:00402BAC                                         ; sub_402BC0+A39↓o ...
.text:00402BAC                 text "UTF-16LE", '"',27h,'`'
.text:00402BB2                 align 10h
.text:00402BC0
.text:00402BC0 ; =============== S U B R O U T I N E =======================================
.text:00402BC0
.text:00402BC0
.text:00402BC0 ; int __cdecl sub_402BC0(int, int, char *Str, int, int, int)
.text:00402BC0 sub_402BC0      proc near               ; CODE XREF: sub_402BC0+43A↓p
.text:00402BC0                                         ; .text:00403783↓p ...
.text:00402BC0
.text:00402BC0 C               = dword ptr -4Ch
.text:00402BC0 Type            = dword ptr -48h
.text:00402BC0 SizeInBytes     = dword ptr -44h
.text:00402BC0 State           = dword ptr -40h
.text:00402BC0 var_3C          = dword ptr -3Ch
.text:00402BC0 var_38          = dword ptr -38h
.text:00402BC0 var_34          = dword ptr -34h
.text:00402BC0 var_30          = dword ptr -30h
.text:00402BC0 var_29          = byte ptr -29h
.text:00402BC0 var_28          = dword ptr -28h
.text:00402BC0 var_22          = byte ptr -22h
.text:00402BC0 var_21          = byte ptr -21h
.text:00402BC0 var_20          = dword ptr -20h
.text:00402BC0 var_1C          = dword ptr -1Ch
.text:00402BC0 var_18          = mbstate_t ptr -18h
.text:00402BC0 arg_0           = dword ptr  4
.text:00402BC0 arg_4           = dword ptr  8
.text:00402BC0 Str             = dword ptr  0Ch
.text:00402BC0 arg_C           = dword ptr  10h
.text:00402BC0 arg_10          = dword ptr  14h
.text:00402BC0 arg_14          = dword ptr  18h
.text:00402BC0
.text:00402BC0                 push    ebp
.text:00402BC1                 push    edi
.text:00402BC2                 push    esi
.text:00402BC3                 push    ebx
.text:00402BC4                 sub     esp, 3Ch
.text:00402BC7                 mov     edx, ds:__mb_cur_max
.text:00402BCD                 mov     [esp+4Ch+var_34], 0
.text:00402BD5                 mov     [esp+4Ch+var_1C], 0
.text:00402BDD                 cmp     dword ptr [edx], 1
.text:00402BE0                 mov     [esp+4Ch+var_20], 0
.text:00402BE8                 mov     [esp+4Ch+var_21], 0
.text:00402BED                 setz    [esp+4Ch+var_22]
.text:00402BF2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402BF7                 ja      short def_402BFD ; jumptable 00402BFD default case, cases 0,1
.text:00402BF9                 mov     edx, [esp+4Ch+arg_10]
.text:00402BFD                 jmp     ds:jpt_402BFD[edx*4] ; switch jump
.text:00402BFD ; ---------------------------------------------------------------------------
.text:00402C04 jpt_402BFD      dd offset def_402BFD    ; DATA XREF: sub_402BC0+3D↑r
.text:00402C04                 dd offset def_402BFD    ; jump table for switch statement
.text:00402C04                 dd offset loc_403545
.text:00402C04                 dd offset loc_402C20
.text:00402C04                 dd offset loc_40356B
.text:00402C04                 dd offset loc_403575
.text:00402C04                 dd offset loc_403575
.text:00402C20 ; ---------------------------------------------------------------------------
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402BC0+3D↑j
.text:00402C20                                         ; DATA XREF: sub_402BC0:jpt_402BFD↑o
.text:00402C20                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402BFD case 3
.text:00402C24                 cmp     [esp+4Ch+var_34], eax
.text:00402C28                 jnb     short loc_402C31
.text:00402C2A                 mov     ebx, [esp+4Ch+arg_0]
.text:00402C2E                 mov     byte ptr [ebx], 22h ; '"'
.text:00402C31
.text:00402C31 loc_402C31:                             ; CODE XREF: sub_402BC0+68↑j
.text:00402C31                 mov     [esp+4Ch+var_34], 1
.text:00402C39                 mov     [esp+4Ch+var_21], 1
.text:00402C3E                 mov     [esp+4Ch+var_1C], offset asc_402BAC ; "\"'`"
.text:00402C46
.text:00402C46 loc_402C46:                             ; CODE XREF: sub_402BC0+9A6↓j
.text:00402C46                 mov     [esp+4Ch+var_20], 1
.text:00402C4E
.text:00402C4E def_402BFD:                             ; CODE XREF: sub_402BC0+37↑j
.text:00402C4E                                         ; sub_402BC0+3D↑j ...
.text:00402C4E                 xor     ebp, ebp        ; jumptable 00402BFD default case, cases 0,1
.text:00402C50
.text:00402C50 loc_402C50:                             ; CODE XREF: sub_402BC0+3DB↓j
.text:00402C50                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402C55                 jz      loc_403537
.text:00402C5B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402C5F
.text:00402C5F loc_402C5F:                             ; CODE XREF: sub_402BC0+980↓j
.text:00402C5F                 jz      loc_4034CE
.text:00402C65                 cmp     [esp+4Ch+var_21], 0
.text:00402C6A                 jz      short loc_402CB0
.text:00402C6C                 mov     esi, [esp+4Ch+var_20]
.text:00402C70                 test    esi, esi
.text:00402C72                 jz      short loc_402CB0
.text:00402C74                 mov     ecx, [esp+4Ch+var_20]
.text:00402C78                 lea     edi, [ecx+ebp]
.text:00402C7B                 cmp     edi, [esp+4Ch+arg_C]
.text:00402C7F                 ja      short loc_402CB0
.text:00402C81                 cld
.text:00402C82                 mov     ebx, [esp+4Ch+Str]
.text:00402C86                 mov     edi, [esp+4Ch+var_1C]
.text:00402C8A                 add     ebx, ebp
.text:00402C8C                 mov     esi, ebx
.text:00402C8E                 cmp     ecx, ecx
.text:00402C90                 repe cmpsb
.text:00402C92                 jnz     short loc_402CB0
.text:00402C94                 mov     edx, [esp+4Ch+arg_4]
.text:00402C98                 cmp     [esp+4Ch+var_34], edx
.text:00402C9C                 jnb     short loc_402CAA
.text:00402C9E                 mov     ecx, [esp+4Ch+arg_0]
.text:00402CA2                 mov     eax, [esp+4Ch+var_34]
.text:00402CA6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402CAA
.text:00402CAA loc_402CAA:                             ; CODE XREF: sub_402BC0+DC↑j
.text:00402CAA                 inc     [esp+4Ch+var_34]
.text:00402CAE                 mov     esi, esi
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_402BC0+AA↑j
.text:00402CB0                                         ; sub_402BC0+B2↑j ...
.text:00402CB0                 mov     edi, [esp+4Ch+Str]
.text:00402CB4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402CB9                 movzx   eax, bl
.text:00402CBC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402CBF                 ja      def_402CC5      ; jumptable 00402CC5 default case, cases 1-6,14-31,64
.text:00402CC5                 jmp     ds:jpt_402CC5[eax*4] ; switch jump
.text:00402CC5 ; ---------------------------------------------------------------------------
.text:00402CCC jpt_402CC5      dd offset loc_402EC8, offset def_402CC5, offset def_402CC5
.text:00402CCC                                         ; DATA XREF: sub_402BC0+105↑r
.text:00402CCC                 dd offset def_402CC5, offset def_402CC5, offset def_402CC5 ; jump table for switch statement
.text:00402CCC                 dd offset def_402CC5, offset loc_402FA0, offset loc_402FBE
.text:00402CCC                 dd offset loc_402FC2, offset loc_403007, offset loc_40300B
.text:00402CCC                 dd offset loc_40300F, offset loc_403013, offset def_402CC5
.text:00402CCC                 dd offset def_402CC5, offset def_402CC5, offset def_402CC5
.text:00402CCC                 dd offset def_402CC5, offset def_402CC5, offset def_402CC5
.text:00402CCC                 dd offset def_402CC5, offset def_402CC5, offset def_402CC5
.text:00402CCC                 dd offset def_402CC5, offset def_402CC5, offset def_402CC5
.text:00402CCC                 dd offset def_402CC5, offset def_402CC5, offset def_402CC5
.text:00402CCC                 dd offset def_402CC5, offset def_402CC5, offset loc_403498
.text:00402CCC                 dd offset loc_403498, offset loc_403498, offset loc_4034BA
.text:00402CCC                 dd offset loc_403498, offset def_4030C2, offset loc_403498
.text:00402CCC                 dd offset loc_403017, offset loc_403498, offset loc_403498
.text:00402CCC                 dd offset loc_403498, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset loc_403498
.text:00402CCC                 dd offset loc_403498, offset loc_403498, offset loc_403498
.text:00402CCC                 dd offset loc_40307C, offset def_402CC5, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset loc_403498, offset loc_403491
.text:00402CCC                 dd offset def_4030C2, offset loc_403498, offset def_4030C2
.text:00402CCC                 dd offset loc_403498, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset def_4030C2, offset def_4030C2, offset def_4030C2
.text:00402CCC                 dd offset loc_4034A8, offset loc_403498, offset loc_4034A8
.text:00402CCC                 dd offset loc_4034BA
.text:00402EC8 ; ---------------------------------------------------------------------------
.text:00402EC8
.text:00402EC8 loc_402EC8:                             ; CODE XREF: sub_402BC0+105↑j
.text:00402EC8                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:00402EC8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402CC5 case 0
.text:00402ECD                 lea     eax, [ebp+1]
.text:00402ED0                 jz      loc_402F80
.text:00402ED6                 mov     esi, [esp+4Ch+arg_4]
.text:00402EDA                 cmp     [esp+4Ch+var_34], esi
.text:00402EDE                 jnb     short loc_402EEC
.text:00402EE0                 mov     eax, [esp+4Ch+arg_0]
.text:00402EE4                 mov     ebx, [esp+4Ch+var_34]
.text:00402EE8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00402EEC
.text:00402EEC loc_402EEC:                             ; CODE XREF: sub_402BC0+31E↑j
.text:00402EEC                 inc     [esp+4Ch+var_34]
.text:00402EF0                 mov     edx, [esp+4Ch+arg_4]
.text:00402EF4                 cmp     [esp+4Ch+var_34], edx
.text:00402EF8                 jnb     short loc_402F06
.text:00402EFA                 mov     edi, [esp+4Ch+arg_0]
.text:00402EFE                 mov     ecx, [esp+4Ch+var_34]
.text:00402F02                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00402F06
.text:00402F06 loc_402F06:                             ; CODE XREF: sub_402BC0+338↑j
.text:00402F06                 inc     [esp+4Ch+var_34]
.text:00402F0A                 mov     esi, [esp+4Ch+arg_4]
.text:00402F0E                 cmp     [esp+4Ch+var_34], esi
.text:00402F12                 jnb     short loc_402F20
.text:00402F14                 mov     ebx, [esp+4Ch+arg_0]
.text:00402F18                 mov     eax, [esp+4Ch+var_34]
.text:00402F1C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00402F20
.text:00402F20 loc_402F20:                             ; CODE XREF: sub_402BC0+352↑j
.text:00402F20                 inc     [esp+4Ch+var_34]
.text:00402F24                 mov     bl, 30h ; '0'
.text:00402F26                 lea     esi, [esi+0]
.text:00402F29                 lea     edi, [edi+0]
.text:00402F30
.text:00402F30 def_4030C2:                             ; CODE XREF: sub_402BC0+105↑j
.text:00402F30                                         ; sub_402BC0+463↓j ...
.text:00402F30                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:00402F30                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:00402F35                 lea     eax, [ebp+1]
.text:00402F38                 jz      short loc_402F80
.text:00402F3A                 mov     cl, bl
.text:00402F3C                 mov     edi, [esp+4Ch+arg_14]
.text:00402F40                 mov     esi, 1
.text:00402F45                 shr     cl, 5
.text:00402F48                 movzx   edx, cl
.text:00402F4B                 mov     ecx, ebx
.text:00402F4D                 and     ecx, 1Fh
.text:00402F50                 shl     esi, cl
.text:00402F52                 test    [edi+edx*4+4], esi
.text:00402F56                 jz      short loc_402F72
.text:00402F58
.text:00402F58 loc_402F58:                             ; CODE XREF: sub_402BC0+3FC↓j
.text:00402F58                 mov     edx, [esp+4Ch+arg_4]
.text:00402F5C                 cmp     [esp+4Ch+var_34], edx
.text:00402F60                 jnb     short loc_402F6E
.text:00402F62                 mov     edi, [esp+4Ch+arg_0]
.text:00402F66                 mov     esi, [esp+4Ch+var_34]
.text:00402F6A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00402F6E
.text:00402F6E loc_402F6E:                             ; CODE XREF: sub_402BC0+3A0↑j
.text:00402F6E                 inc     [esp+4Ch+var_34]
.text:00402F72
.text:00402F72 loc_402F72:                             ; CODE XREF: sub_402BC0+396↑j
.text:00402F72                 lea     eax, [ebp+1]
.text:00402F75                 lea     esi, [esi+0]
.text:00402F79                 lea     edi, [edi+0]
.text:00402F80
.text:00402F80 loc_402F80:                             ; CODE XREF: sub_402BC0+310↑j
.text:00402F80                                         ; sub_402BC0+378↑j ...
.text:00402F80                 mov     ebp, [esp+4Ch+arg_4]
.text:00402F84                 cmp     [esp+4Ch+var_34], ebp
.text:00402F88                 jnb     short loc_402F95
.text:00402F8A                 mov     edx, [esp+4Ch+arg_0]
.text:00402F8E                 mov     ecx, [esp+4Ch+var_34]
.text:00402F92                 mov     [ecx+edx], bl
.text:00402F95
.text:00402F95 loc_402F95:                             ; CODE XREF: sub_402BC0+3C8↑j
.text:00402F95                 inc     [esp+4Ch+var_34]
.text:00402F99                 mov     ebp, eax
.text:00402F9B                 jmp     loc_402C50
.text:00402FA0 ; ---------------------------------------------------------------------------
.text:00402FA0
.text:00402FA0 loc_402FA0:                             ; CODE XREF: sub_402BC0+105↑j
.text:00402FA0                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:00402FA0                 mov     dl, 61h ; 'a'   ; jumptable 00402CC5 case 7
.text:00402FA2                 lea     esi, [esi+0]
.text:00402FA9                 lea     edi, [edi+0]
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: sub_402BC0+400↓j
.text:00402FB0                                         ; sub_402BC0+409↓j ...
.text:00402FB0                 cmp     [esp+4Ch+var_21], 0
.text:00402FB5                 lea     eax, [ebp+1]
.text:00402FB8                 jz      short loc_402F80
.text:00402FBA                 mov     bl, dl
.text:00402FBC                 jmp     short loc_402F58
.text:00402FBE ; ---------------------------------------------------------------------------
.text:00402FBE
.text:00402FBE loc_402FBE:                             ; CODE XREF: sub_402BC0+105↑j
.text:00402FBE                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:00402FBE                 mov     dl, 62h ; 'b'   ; jumptable 00402CC5 case 8
.text:00402FC0                 jmp     short loc_402FB0
.text:00402FC2 ; ---------------------------------------------------------------------------
.text:00402FC2
.text:00402FC2 loc_402FC2:                             ; CODE XREF: sub_402BC0+105↑j
.text:00402FC2                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:00402FC2                 mov     dl, 74h ; 't'   ; jumptable 00402CC5 case 9
.text:00402FC4
.text:00402FC4 loc_402FC4:                             ; CODE XREF: sub_402BC0+449↓j
.text:00402FC4                                         ; sub_402BC0+455↓j ...
.text:00402FC4                 cmp     [esp+4Ch+arg_10], 1
.text:00402FC9                 jnz     short loc_402FB0
.text:00402FCB
.text:00402FCB loc_402FCB:                             ; CODE XREF: sub_402BC0+45C↓j
.text:00402FCB                                         ; sub_402BC0+4C1↓j ...
.text:00402FCB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403392 cases 91,92,94,96,124
.text:00402FD3                 mov     eax, [esp+4Ch+arg_14]
.text:00402FD7                 mov     edx, [esp+4Ch+arg_C]
.text:00402FDB                 mov     ecx, [esp+4Ch+Str]
.text:00402FDF                 mov     ebx, [esp+4Ch+arg_4]
.text:00402FE3                 mov     [esp+4Ch+var_38], eax ; int
.text:00402FE7                 mov     ebp, [esp+4Ch+arg_0]
.text:00402FEB                 mov     [esp+4Ch+State], edx ; int
.text:00402FEF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00402FF3                 mov     [esp+4Ch+Type], ebx ; int
.text:00402FF7                 mov     [esp+4Ch+C], ebp ; int
.text:00402FFA                 call    sub_402BC0
.text:00402FFF
.text:00402FFF loc_402FFF:                             ; CODE XREF: sub_402BC0+972↓j
.text:00402FFF                 add     esp, 3Ch
.text:00403002                 pop     ebx
.text:00403003                 pop     esi
.text:00403004                 pop     edi
.text:00403005                 pop     ebp
.text:00403006                 retn
.text:00403007 ; ---------------------------------------------------------------------------
.text:00403007
.text:00403007 loc_403007:                             ; CODE XREF: sub_402BC0+105↑j
.text:00403007                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:00403007                 mov     dl, 6Eh ; 'n'   ; jumptable 00402CC5 case 10
.text:00403009                 jmp     short loc_402FC4
.text:0040300B ; ---------------------------------------------------------------------------
.text:0040300B
.text:0040300B loc_40300B:                             ; CODE XREF: sub_402BC0+105↑j
.text:0040300B                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:0040300B                 mov     dl, 76h ; 'v'   ; jumptable 00402CC5 case 11
.text:0040300D                 jmp     short loc_402FB0
.text:0040300F ; ---------------------------------------------------------------------------
.text:0040300F
.text:0040300F loc_40300F:                             ; CODE XREF: sub_402BC0+105↑j
.text:0040300F                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:0040300F                 mov     dl, 66h ; 'f'   ; jumptable 00402CC5 case 12
.text:00403011                 jmp     short loc_402FB0
.text:00403013 ; ---------------------------------------------------------------------------
.text:00403013
.text:00403013 loc_403013:                             ; CODE XREF: sub_402BC0+105↑j
.text:00403013                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:00403013                 mov     dl, 72h ; 'r'   ; jumptable 00402CC5 case 13
.text:00403015                 jmp     short loc_402FC4
.text:00403017 ; ---------------------------------------------------------------------------
.text:00403017
.text:00403017 loc_403017:                             ; CODE XREF: sub_402BC0+105↑j
.text:00403017                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:00403017                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402CC5 case 39
.text:0040301C                 jz      short loc_402FCB ; jumptable 00403392 cases 91,92,94,96,124
.text:0040301E                 cmp     [esp+4Ch+arg_10], 2
.text:00403023                 jnz     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:00403023                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:00403029                 mov     edx, [esp+4Ch+arg_4]
.text:0040302D                 cmp     [esp+4Ch+var_34], edx
.text:00403031                 jnb     short loc_40303F
.text:00403033                 mov     ecx, [esp+4Ch+arg_0]
.text:00403037                 mov     edi, [esp+4Ch+var_34]
.text:0040303B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040303F
.text:0040303F loc_40303F:                             ; CODE XREF: sub_402BC0+471↑j
.text:0040303F                 inc     [esp+4Ch+var_34]
.text:00403043                 mov     eax, [esp+4Ch+arg_4]
.text:00403047                 cmp     [esp+4Ch+var_34], eax
.text:0040304B                 jnb     short loc_403059
.text:0040304D                 mov     esi, [esp+4Ch+arg_0]
.text:00403051                 mov     edx, [esp+4Ch+var_34]
.text:00403055                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403059
.text:00403059 loc_403059:                             ; CODE XREF: sub_402BC0+48B↑j
.text:00403059                 inc     [esp+4Ch+var_34]
.text:0040305D                 mov     edi, [esp+4Ch+arg_4]
.text:00403061                 cmp     [esp+4Ch+var_34], edi
.text:00403065                 jnb     short loc_403073
.text:00403067                 mov     ecx, [esp+4Ch+arg_0]
.text:0040306B                 mov     eax, [esp+4Ch+var_34]
.text:0040306F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403073
.text:00403073 loc_403073:                             ; CODE XREF: sub_402BC0+4A5↑j
.text:00403073                                         ; sub_402BC0+5C4↓j ...
.text:00403073                 inc     [esp+4Ch+var_34]
.text:00403077                 jmp     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:00403077                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:0040307C ; ---------------------------------------------------------------------------
.text:0040307C
.text:0040307C loc_40307C:                             ; CODE XREF: sub_402BC0+105↑j
.text:0040307C                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:0040307C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402CC5 case 63
.text:00403081                 jz      loc_402FCB      ; jumptable 00403392 cases 91,92,94,96,124
.text:00403087                 cmp     [esp+4Ch+arg_10], 3
.text:0040308C                 jnz     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:0040308C                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:00403092                 lea     edx, [ebp+2]
.text:00403095                 cmp     edx, [esp+4Ch+arg_C]
.text:00403099                 jnb     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:00403099                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:0040309F                 mov     esi, [esp+4Ch+Str]
.text:004030A3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004030A8                 jnz     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:004030A8                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:004030AE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004030B3                 movsx   eax, cl
.text:004030B6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004030B9                 cmp     eax, 1Dh
.text:004030BC                 ja      def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:004030BC                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:004030C2                 jmp     ds:jpt_4030C2[eax*4] ; switch jump
.text:004030C2 ; ---------------------------------------------------------------------------
.text:004030C9                 align 4
.text:004030CC jpt_4030C2      dd offset loc_403144    ; DATA XREF: sub_402BC0+502↑r
.text:004030CC                 dd offset def_4030C2    ; jump table for switch statement
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset loc_403144
.text:004030CC                 dd offset loc_403144
.text:004030CC                 dd offset loc_403144
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset loc_403144
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset loc_403144
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset def_4030C2
.text:004030CC                 dd offset loc_403144
.text:004030CC                 dd offset loc_403144
.text:004030CC                 dd offset loc_403144
.text:00403144 ; ---------------------------------------------------------------------------
.text:00403144
.text:00403144 loc_403144:                             ; CODE XREF: sub_402BC0+502↑j
.text:00403144                                         ; DATA XREF: sub_402BC0:jpt_4030C2↑o
.text:00403144                 mov     ebp, edx        ; jumptable 004030C2 cases 33,39-41,45,47,60-62
.text:00403146                 mov     bl, cl
.text:00403148                 mov     edx, [esp+4Ch+arg_4]
.text:0040314C                 cmp     [esp+4Ch+var_34], edx
.text:00403150                 jnb     short loc_40315E
.text:00403152                 mov     ecx, [esp+4Ch+arg_0]
.text:00403156                 mov     edi, [esp+4Ch+var_34]
.text:0040315A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040315E
.text:0040315E loc_40315E:                             ; CODE XREF: sub_402BC0+590↑j
.text:0040315E                 inc     [esp+4Ch+var_34]
.text:00403162                 mov     eax, [esp+4Ch+arg_4]
.text:00403166                 cmp     [esp+4Ch+var_34], eax
.text:0040316A                 jnb     short loc_403178
.text:0040316C                 mov     edx, [esp+4Ch+arg_0]
.text:00403170                 mov     esi, [esp+4Ch+var_34]
.text:00403174                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403178
.text:00403178 loc_403178:                             ; CODE XREF: sub_402BC0+5AA↑j
.text:00403178                 inc     [esp+4Ch+var_34]
.text:0040317C                 mov     edi, [esp+4Ch+arg_4]
.text:00403180                 cmp     [esp+4Ch+var_34], edi
.text:00403184                 jnb     loc_403073
.text:0040318A                 mov     eax, [esp+4Ch+arg_0]
.text:0040318E                 mov     ecx, [esp+4Ch+var_34]
.text:00403192                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403196                 jmp     loc_403073
.text:00403196 ; ---------------------------------------------------------------------------
.text:0040319B                 align 10h
.text:004031A0
.text:004031A0 def_402CC5:                             ; CODE XREF: sub_402BC0+FF↑j
.text:004031A0                                         ; sub_402BC0+105↑j
.text:004031A0                                         ; DATA XREF: ...
.text:004031A0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402CC5 default case, cases 1-6,14-31,64
.text:004031A5                 jz      loc_4032D0
.text:004031AB                 mov     [esp+4Ch+var_28], 1
.text:004031B3                 mov     esi, ds:__mb_cur_max
.text:004031B9                 movzx   edx, bl
.text:004031BC                 cmp     dword ptr [esi], 1
.text:004031BF                 jz      loc_4032B4
.text:004031C5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004031CD                 mov     [esp+4Ch+C], edx ; C
.text:004031D0                 call    _isctype
.text:004031D5
.text:004031D5 loc_4031D5:                             ; CODE XREF: sub_402BC0+705↓j
.text:004031D5                 test    eax, eax
.text:004031D7                 setnz   [esp+4Ch+var_29]
.text:004031DC
.text:004031DC loc_4031DC:                             ; CODE XREF: sub_402BC0+7A5↓j
.text:004031DC                 cmp     [esp+4Ch+var_21], 0
.text:004031E1                 lea     eax, [ebp+1]
.text:004031E4                 jz      loc_402F80
.text:004031EA                 cmp     [esp+4Ch+var_29], 0
.text:004031EF                 jnz     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:004031EF                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:004031F5
.text:004031F5 loc_4031F5:                             ; CODE XREF: sub_402BC0+7AB↓j
.text:004031F5                 mov     eax, [esp+4Ch+var_28]
.text:004031F9                 lea     edx, [eax+ebp]
.text:004031FC                 lea     esi, [esi+0]
.text:00403200
.text:00403200 loc_403200:                             ; CODE XREF: sub_402BC0+6EF↓j
.text:00403200                 cmp     [esp+4Ch+var_21], 0
.text:00403205                 jz      short loc_403280
.text:00403207                 cmp     [esp+4Ch+var_29], 0
.text:0040320C                 jnz     short loc_403280
.text:0040320E                 mov     edi, [esp+4Ch+arg_4]
.text:00403212                 cmp     [esp+4Ch+var_34], edi
.text:00403216                 jnb     short loc_403224
.text:00403218                 mov     esi, [esp+4Ch+arg_0]
.text:0040321C                 mov     eax, [esp+4Ch+var_34]
.text:00403220                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403224
.text:00403224 loc_403224:                             ; CODE XREF: sub_402BC0+656↑j
.text:00403224                 inc     [esp+4Ch+var_34]
.text:00403228                 mov     ecx, [esp+4Ch+arg_4]
.text:0040322C                 cmp     [esp+4Ch+var_34], ecx
.text:00403230                 jnb     short loc_403245
.text:00403232                 mov     cl, bl
.text:00403234                 mov     esi, [esp+4Ch+arg_0]
.text:00403238                 mov     edi, [esp+4Ch+var_34]
.text:0040323C                 shr     cl, 6
.text:0040323F                 add     cl, 30h ; '0'
.text:00403242                 mov     [edi+esi], cl
.text:00403245
.text:00403245 loc_403245:                             ; CODE XREF: sub_402BC0+670↑j
.text:00403245                 inc     [esp+4Ch+var_34]
.text:00403249                 mov     edi, [esp+4Ch+arg_4]
.text:0040324D                 cmp     [esp+4Ch+var_34], edi
.text:00403251                 jnb     short loc_403269
.text:00403253                 mov     cl, bl
.text:00403255                 mov     esi, [esp+4Ch+arg_0]
.text:00403259                 shr     cl, 3
.text:0040325C                 mov     edi, [esp+4Ch+var_34]
.text:00403260                 and     cl, 7
.text:00403263                 add     cl, 30h ; '0'
.text:00403266                 mov     [edi+esi], cl
.text:00403269
.text:00403269 loc_403269:                             ; CODE XREF: sub_402BC0+691↑j
.text:00403269                 inc     [esp+4Ch+var_34]
.text:0040326D                 and     bl, 7
.text:00403270                 add     bl, 30h ; '0'
.text:00403273                 lea     esi, [esi+0]
.text:00403279                 lea     edi, [edi+0]
.text:00403280
.text:00403280 loc_403280:                             ; CODE XREF: sub_402BC0+645↑j
.text:00403280                                         ; sub_402BC0+64C↑j
.text:00403280                 lea     eax, [ebp+1]
.text:00403283                 cmp     edx, eax
.text:00403285                 jbe     loc_402F80
.text:0040328B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040328F                 cmp     [esp+4Ch+var_34], ebp
.text:00403293                 jnb     short loc_4032A0
.text:00403295                 mov     ecx, [esp+4Ch+arg_0]
.text:00403299                 mov     edi, [esp+4Ch+var_34]
.text:0040329D                 mov     [edi+ecx], bl
.text:004032A0
.text:004032A0 loc_4032A0:                             ; CODE XREF: sub_402BC0+6D3↑j
.text:004032A0                 inc     [esp+4Ch+var_34]
.text:004032A4                 mov     ebp, eax
.text:004032A6                 mov     eax, [esp+4Ch+Str]
.text:004032AA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004032AF                 jmp     loc_403200
.text:004032B4 ; ---------------------------------------------------------------------------
.text:004032B4
.text:004032B4 loc_4032B4:                             ; CODE XREF: sub_402BC0+5FF↑j
.text:004032B4                 mov     ecx, ds:_pctype
.text:004032BA                 mov     edi, [ecx]
.text:004032BC                 movzx   eax, word ptr [edi+edx*2]
.text:004032C0                 and     eax, 157h
.text:004032C5                 jmp     loc_4031D5
.text:004032C5 ; ---------------------------------------------------------------------------
.text:004032CA                 align 10h
.text:004032D0
.text:004032D0 loc_4032D0:                             ; CODE XREF: sub_402BC0+5E5↑j
.text:004032D0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004032D5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004032DD                 mov     [esp+4Ch+var_28], 0
.text:004032E5                 mov     [esp+4Ch+var_29], 1
.text:004032EA                 jz      loc_40347C
.text:004032F0
.text:004032F0 loc_4032F0:                             ; CODE XREF: sub_402BC0+8CC↓j
.text:004032F0                 mov     ecx, [esp+4Ch+arg_C]
.text:004032F4                 lea     edx, [esp+4Ch+var_18]
.text:004032F8                 mov     edi, [esp+4Ch+Str]
.text:004032FC                 mov     [esp+4Ch+State], edx ; State
.text:00403300                 lea     esi, [esp+4Ch+var_18._State]
.text:00403304                 sub     ecx, ebp
.text:00403306                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040330A                 add     edi, ebp
.text:0040330C                 mov     [esp+4Ch+var_30], edi
.text:00403310                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403314                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403317                 call    mbrtowc
.text:0040331C                 test    eax, eax
.text:0040331E                 mov     edi, eax
.text:00403320                 jz      short loc_403360
.text:00403322                 cmp     eax, 0FFFFFFFFh
.text:00403325                 jz      loc_403472
.text:0040332B                 cmp     eax, 0FFFFFFFEh
.text:0040332E                 jz      loc_403432
.text:00403334                 cmp     [esp+4Ch+arg_10], 1
.text:00403339                 jz      short loc_403370
.text:0040333B
.text:0040333B loc_40333B:                             ; CODE XREF: sub_402BC0+7B9↓j
.text:0040333B                                         ; sub_402BC0+86D↓j
.text:0040333B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403340                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403348                 mov     [esp+4Ch+C], ecx ; C
.text:0040334B                 call    iswctype
.text:00403350                 test    eax, eax
.text:00403352                 jnz     short loc_403359
.text:00403354                 mov     [esp+4Ch+var_29], 0
.text:00403359
.text:00403359 loc_403359:                             ; CODE XREF: sub_402BC0+792↑j
.text:00403359                 mov     [esp+4Ch+var_28], edi
.text:0040335D                 lea     esi, [esi+0]
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_402BC0+760↑j
.text:00403360                                         ; sub_402BC0+87B↓j ...
.text:00403360                 cmp     [esp+4Ch+var_28], 1
.text:00403365                 jbe     loc_4031DC
.text:0040336B                 jmp     loc_4031F5
.text:00403370 ; ---------------------------------------------------------------------------
.text:00403370
.text:00403370 loc_403370:                             ; CODE XREF: sub_402BC0+779↑j
.text:00403370                 cmp     [esp+4Ch+arg_10], eax
.text:00403374                 mov     edx, 1
.text:00403379                 jnb     short loc_40333B
.text:0040337B
.text:0040337B loc_40337B:                             ; CODE XREF: sub_402BC0+867↓j
.text:0040337B                 mov     ecx, [esp+4Ch+Str]
.text:0040337F                 lea     esi, [edx+ebp]
.text:00403382                 movsx   eax, byte ptr [esi+ecx]
.text:00403386                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403389                 cmp     eax, 21h
.text:0040338C                 ja      def_403392      ; jumptable 00403392 default case, cases 93,95,97-123
.text:00403392                 jmp     ds:jpt_403392[eax*4] ; switch jump
.text:00403392 ; ---------------------------------------------------------------------------
.text:00403399                 align 4
.text:0040339C jpt_403392      dd offset loc_402FCB    ; DATA XREF: sub_402BC0+7D2↑r
.text:0040339C                 dd offset loc_402FCB    ; jump table for switch statement
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset loc_402FCB
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset loc_402FCB
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset def_403392
.text:0040339C                 dd offset loc_402FCB
.text:00403424 ; ---------------------------------------------------------------------------
.text:00403424
.text:00403424 def_403392:                             ; CODE XREF: sub_402BC0+7CC↑j
.text:00403424                                         ; sub_402BC0+7D2↑j
.text:00403424                                         ; DATA XREF: ...
.text:00403424                 inc     edx             ; jumptable 00403392 default case, cases 93,95,97-123
.text:00403425                 cmp     edx, edi
.text:00403427                 jb      loc_40337B
.text:0040342D                 jmp     loc_40333B
.text:00403432 ; ---------------------------------------------------------------------------
.text:00403432
.text:00403432 loc_403432:                             ; CODE XREF: sub_402BC0+76E↑j
.text:00403432                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403436                 mov     [esp+4Ch+var_29], 0
.text:0040343B                 jnb     loc_403360
.text:00403441                 mov     eax, [esp+4Ch+var_30]
.text:00403445                 cmp     byte ptr [eax], 0
.text:00403448                 jz      loc_403360
.text:0040344E
.text:0040344E loc_40344E:                             ; CODE XREF: sub_402BC0+8AB↓j
.text:0040344E                 inc     [esp+4Ch+var_28]
.text:00403452                 mov     esi, [esp+4Ch+var_28]
.text:00403456                 lea     eax, [esi+ebp]
.text:00403459                 cmp     eax, [esp+4Ch+arg_C]
.text:0040345D                 jnb     loc_403360
.text:00403463                 mov     edi, [esp+4Ch+Str]
.text:00403467                 cmp     byte ptr [eax+edi], 0
.text:0040346B                 jnz     short loc_40344E
.text:0040346D                 jmp     loc_403360
.text:00403472 ; ---------------------------------------------------------------------------
.text:00403472
.text:00403472 loc_403472:                             ; CODE XREF: sub_402BC0+765↑j
.text:00403472                 mov     [esp+4Ch+var_29], 0
.text:00403477                 jmp     loc_403360
.text:0040347C ; ---------------------------------------------------------------------------
.text:0040347C
.text:0040347C loc_40347C:                             ; CODE XREF: sub_402BC0+72A↑j
.text:0040347C                 mov     edx, [esp+4Ch+Str]
.text:00403480                 mov     [esp+4Ch+C], edx ; Str
.text:00403483                 call    strlen
.text:00403488                 mov     [esp+4Ch+arg_C], eax
.text:0040348C                 jmp     loc_4032F0
.text:00403491 ; ---------------------------------------------------------------------------
.text:00403491
.text:00403491 loc_403491:                             ; CODE XREF: sub_402BC0+105↑j
.text:00403491                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:00403491                 mov     dl, bl          ; jumptable 00402CC5 case 92
.text:00403493                 jmp     loc_402FC4
.text:00403498 ; ---------------------------------------------------------------------------
.text:00403498
.text:00403498 loc_403498:                             ; CODE XREF: sub_402BC0+105↑j
.text:00403498                                         ; sub_402BC0+902↓j
.text:00403498                                         ; DATA XREF: ...
.text:00403498                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402CC5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040349D                 jnz     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:0040349D                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:004034A3                 jmp     loc_402FCB      ; jumptable 00403392 cases 91,92,94,96,124
.text:004034A8 ; ---------------------------------------------------------------------------
.text:004034A8
.text:004034A8 loc_4034A8:                             ; CODE XREF: sub_402BC0+105↑j
.text:004034A8                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:004034A8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402CC5 cases 123,125
.text:004034AD                 jz      short loc_4034C4
.text:004034AF                 cmp     [esp+4Ch+arg_C], 1
.text:004034B4
.text:004034B4 loc_4034B4:                             ; CODE XREF: sub_402BC0+90C↓j
.text:004034B4                 jnz     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:004034B4                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:004034BA
.text:004034BA loc_4034BA:                             ; CODE XREF: sub_402BC0+105↑j
.text:004034BA                                         ; DATA XREF: sub_402BC0:jpt_402CC5↑o
.text:004034BA                 test    ebp, ebp        ; jumptable 00402CC5 cases 35,126
.text:004034BC                 jnz     def_4030C2      ; jumptable 00402CC5 cases 37,43-58,65-90,93,95,97-122
.text:004034BC                                         ; jumptable 004030C2 default case, cases 34-38,42-44,46,48-59
.text:004034C2                 jmp     short loc_403498 ; jumptable 00402CC5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004034C4 ; ---------------------------------------------------------------------------
.text:004034C4
.text:004034C4 loc_4034C4:                             ; CODE XREF: sub_402BC0+8ED↑j
.text:004034C4                 mov     esi, [esp+4Ch+Str]
.text:004034C8                 cmp     byte ptr [esi+1], 0
.text:004034CC                 jmp     short loc_4034B4
.text:004034CE ; ---------------------------------------------------------------------------
.text:004034CE
.text:004034CE loc_4034CE:                             ; CODE XREF: sub_402BC0:loc_402C5F↑j
.text:004034CE                 test    ebp, ebp
.text:004034D0                 jnz     short loc_4034DD
.text:004034D2                 cmp     [esp+4Ch+arg_10], 1
.text:004034D7                 jz      loc_402FCB      ; jumptable 00403392 cases 91,92,94,96,124
.text:004034DD
.text:004034DD loc_4034DD:                             ; CODE XREF: sub_402BC0+910↑j
.text:004034DD                 mov     esi, [esp+4Ch+var_1C]
.text:004034E1                 test    esi, esi
.text:004034E3                 jz      short loc_403518
.text:004034E5                 mov     edi, [esp+4Ch+var_1C]
.text:004034E9                 movzx   eax, byte ptr [edi]
.text:004034EC                 test    al, al
.text:004034EE                 jz      short loc_403518
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_402BC0+956↓j
.text:004034F0                 mov     ebp, [esp+4Ch+arg_4]
.text:004034F4                 cmp     [esp+4Ch+var_34], ebp
.text:004034F8                 jnb     short loc_403505
.text:004034FA                 mov     ecx, [esp+4Ch+arg_0]
.text:004034FE                 mov     ebx, [esp+4Ch+var_34]
.text:00403502                 mov     [ebx+ecx], al
.text:00403505
.text:00403505 loc_403505:                             ; CODE XREF: sub_402BC0+938↑j
.text:00403505                 inc     [esp+4Ch+var_1C]
.text:00403509                 inc     [esp+4Ch+var_34]
.text:0040350D                 mov     edx, [esp+4Ch+var_1C]
.text:00403511                 movzx   eax, byte ptr [edx]
.text:00403514                 test    al, al
.text:00403516                 jnz     short loc_4034F0
.text:00403518
.text:00403518 loc_403518:                             ; CODE XREF: sub_402BC0+923↑j
.text:00403518                                         ; sub_402BC0+92E↑j
.text:00403518                 mov     eax, [esp+4Ch+arg_4]
.text:0040351C                 cmp     [esp+4Ch+var_34], eax
.text:00403520                 jnb     short loc_40352E
.text:00403522                 mov     edi, [esp+4Ch+arg_0]
.text:00403526                 mov     esi, [esp+4Ch+var_34]
.text:0040352A                 mov     byte ptr [esi+edi], 0
.text:0040352E
.text:0040352E loc_40352E:                             ; CODE XREF: sub_402BC0+960↑j
.text:0040352E                 mov     eax, [esp+4Ch+var_34]
.text:00403532                 jmp     loc_402FFF
.text:00403537 ; ---------------------------------------------------------------------------
.text:00403537
.text:00403537 loc_403537:                             ; CODE XREF: sub_402BC0+95↑j
.text:00403537                 mov     ebx, [esp+4Ch+Str]
.text:0040353B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403540                 jmp     loc_402C5F
.text:00403545 ; ---------------------------------------------------------------------------
.text:00403545
.text:00403545 loc_403545:                             ; CODE XREF: sub_402BC0+3D↑j
.text:00403545                                         ; DATA XREF: sub_402BC0:jpt_402BFD↑o
.text:00403545                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402BFD case 2
.text:00403549                 cmp     [esp+4Ch+var_34], edx
.text:0040354D                 jnb     short loc_403556
.text:0040354F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403553                 mov     byte ptr [ecx], 27h ; '''
.text:00403556
.text:00403556 loc_403556:                             ; CODE XREF: sub_402BC0+98D↑j
.text:00403556                 mov     [esp+4Ch+var_34], 1
.text:0040355E                 mov     [esp+4Ch+var_1C], 402BAEh
.text:00403566                 jmp     loc_402C46
.text:0040356B ; ---------------------------------------------------------------------------
.text:0040356B
.text:0040356B loc_40356B:                             ; CODE XREF: sub_402BC0+3D↑j
.text:0040356B                                         ; DATA XREF: sub_402BC0:jpt_402BFD↑o
.text:0040356B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402BFD case 4
.text:00403570                 jmp     def_402BFD      ; jumptable 00402BFD default case, cases 0,1
.text:00403575 ; ---------------------------------------------------------------------------
.text:00403575
.text:00403575 loc_403575:                             ; CODE XREF: sub_402BC0+3D↑j
.text:00403575                                         ; DATA XREF: sub_402BC0:jpt_402BFD↑o
.text:00403575                 mov     [esp+4Ch+C], 402BB0h ; jumptable 00402BFD cases 5,6
.text:0040357C                 call    ds:libintl_gettext
.text:00403582                 cmp     eax, 402BB0h
.text:00403587                 mov     edi, eax
.text:00403589                 jz      short loc_403600
.text:0040358B
.text:0040358B loc_40358B:                             ; CODE XREF: sub_402BC0+A45↓j
.text:0040358B                                         ; sub_402BC0+A4C↓j
.text:0040358B                 mov     [esp+4Ch+C], 402BAEh
.text:00403592                 call    ds:libintl_gettext
.text:00403598                 cmp     eax, 402BAEh
.text:0040359D                 mov     edx, eax
.text:0040359F                 jz      short loc_4035F2
.text:004035A1
.text:004035A1 loc_4035A1:                             ; CODE XREF: sub_402BC0+A37↓j
.text:004035A1                                         ; sub_402BC0+A3E↓j
.text:004035A1                 mov     [esp+4Ch+var_1C], edi
.text:004035A5                 cmp     byte ptr [edi], 0
.text:004035A8                 jz      short loc_4035D8
.text:004035AA
.text:004035AA loc_4035AA:                             ; CODE XREF: sub_402BC0+A16↓j
.text:004035AA                 mov     ecx, [esp+4Ch+arg_4]
.text:004035AE                 cmp     [esp+4Ch+var_34], ecx
.text:004035B2                 jnb     short loc_4035C7
.text:004035B4                 mov     ebp, [esp+4Ch+var_1C]
.text:004035B8                 mov     edi, [esp+4Ch+arg_0]
.text:004035BC                 mov     esi, [esp+4Ch+var_34]
.text:004035C0                 movzx   ebx, byte ptr [ebp+0]
.text:004035C4                 mov     [esi+edi], bl
.text:004035C7
.text:004035C7 loc_4035C7:                             ; CODE XREF: sub_402BC0+9F2↑j
.text:004035C7                 inc     [esp+4Ch+var_1C]
.text:004035CB                 inc     [esp+4Ch+var_34]
.text:004035CF                 mov     eax, [esp+4Ch+var_1C]
.text:004035D3                 cmp     byte ptr [eax], 0
.text:004035D6                 jnz     short loc_4035AA
.text:004035D8
.text:004035D8 loc_4035D8:                             ; CODE XREF: sub_402BC0+9E8↑j
.text:004035D8                 mov     [esp+4Ch+var_21], 1
.text:004035DD                 mov     [esp+4Ch+var_1C], edx
.text:004035E1                 mov     [esp+4Ch+C], edx ; Str
.text:004035E4                 call    strlen
.text:004035E9                 mov     [esp+4Ch+var_20], eax
.text:004035ED                 jmp     def_402BFD      ; jumptable 00402BFD default case, cases 0,1
.text:004035F2 ; ---------------------------------------------------------------------------
.text:004035F2
.text:004035F2 loc_4035F2:                             ; CODE XREF: sub_402BC0+9DF↑j
.text:004035F2                 cmp     [esp+4Ch+arg_10], 6
.text:004035F7                 jnz     short loc_4035A1
.text:004035F9                 mov     edx, offset asc_402BAC ; "\"'`"
.text:004035FE                 jmp     short loc_4035A1
.text:00403600 ; ---------------------------------------------------------------------------
.text:00403600
.text:00403600 loc_403600:                             ; CODE XREF: sub_402BC0+9C9↑j
.text:00403600                 cmp     [esp+4Ch+arg_10], 6
.text:00403605                 jnz     short loc_40358B
.text:00403607                 mov     edi, offset asc_402BAC ; "\"'`"
.text:0040360C                 jmp     loc_40358B
.text:0040360C sub_402BC0      endp
.text:0040360C
.text:00403611 ; ---------------------------------------------------------------------------
.text:00403611                 jmp     short loc_403620
.text:00403611 ; ---------------------------------------------------------------------------
.text:00403613                 align 10h
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: .text:00403611↑j
.text:00403620                 sub     esp, 0Ch
.text:00403623                 mov     [esp+4], ebx
.text:00403627                 mov     [esp+8], esi
.text:0040362B                 call    _errno
.text:00403630                 mov     esi, [eax]
.text:00403632                 mov     dword ptr [esp], 24h ; '$'
.text:00403639                 call    sub_404410
.text:0040363E                 mov     edx, [esp+10h]
.text:00403642                 mov     ebx, eax
.text:00403644                 test    edx, edx
.text:00403646                 jz      short loc_403691
.text:00403648
.text:00403648 loc_403648:                             ; CODE XREF: .text:00403696↓j
.text:00403648                 mov     ecx, [edx]
.text:0040364A                 mov     [ebx], ecx
.text:0040364C                 mov     ecx, [edx+4]
.text:0040364F                 mov     [ebx+4], ecx
.text:00403652                 mov     ecx, [edx+8]
.text:00403655                 mov     [ebx+8], ecx
.text:00403658                 mov     ecx, [edx+0Ch]
.text:0040365B                 mov     [ebx+0Ch], ecx
.text:0040365E                 mov     ecx, [edx+10h]
.text:00403661                 mov     [ebx+10h], ecx
.text:00403664                 mov     ecx, [edx+14h]
.text:00403667                 mov     [ebx+14h], ecx
.text:0040366A                 mov     ecx, [edx+18h]
.text:0040366D                 mov     [ebx+18h], ecx
.text:00403670                 mov     ecx, [edx+1Ch]
.text:00403673                 mov     [ebx+1Ch], ecx
.text:00403676                 mov     ecx, [edx+20h]
.text:00403679                 mov     [ebx+20h], ecx
.text:0040367C                 call    _errno
.text:00403681                 mov     [eax], esi
.text:00403683                 mov     esi, [esp+8]
.text:00403687                 mov     eax, ebx
.text:00403689                 mov     ebx, [esp+4]
.text:0040368D                 add     esp, 0Ch
.text:00403690                 retn
.text:00403691 ; ---------------------------------------------------------------------------
.text:00403691
.text:00403691 loc_403691:                             ; CODE XREF: .text:00403646↑j
.text:00403691                 mov     edx, offset dword_407140
.text:00403696                 jmp     short loc_403648
.text:00403696 ; ---------------------------------------------------------------------------
.text:00403698                 align 10h
.text:004036A0                 mov     eax, [esp+4]
.text:004036A4                 test    eax, eax
.text:004036A6                 jz      short loc_4036B0
.text:004036A8
.text:004036A8 loc_4036A8:                             ; CODE XREF: .text:004036B5↓j
.text:004036A8                 mov     eax, [eax]
.text:004036AA                 retn
.text:004036AA ; ---------------------------------------------------------------------------
.text:004036AB                 align 10h
.text:004036B0
.text:004036B0 loc_4036B0:                             ; CODE XREF: .text:004036A6↑j
.text:004036B0                 mov     eax, offset dword_407140
.text:004036B5                 jmp     short loc_4036A8
.text:004036B5 ; ---------------------------------------------------------------------------
.text:004036B7                 align 10h
.text:004036C0                 mov     edx, [esp+4]
.text:004036C4                 test    edx, edx
.text:004036C6                 jz      short loc_4036D0
.text:004036C8
.text:004036C8 loc_4036C8:                             ; CODE XREF: .text:004036D5↓j
.text:004036C8                 mov     ecx, [esp+8]
.text:004036CC                 mov     [edx], ecx
.text:004036CE                 retn
.text:004036CE ; ---------------------------------------------------------------------------
.text:004036CF                 align 10h
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: .text:004036C6↑j
.text:004036D0                 mov     edx, offset dword_407140
.text:004036D5                 jmp     short loc_4036C8
.text:004036D5 ; ---------------------------------------------------------------------------
.text:004036D7                 align 10h
.text:004036E0                 sub     esp, 8
.text:004036E3                 mov     eax, [esp+0Ch]
.text:004036E7                 movzx   ecx, byte ptr [esp+10h]
.text:004036EC                 mov     [esp], ebx
.text:004036EF                 mov     ebx, [esp+14h]
.text:004036F3                 mov     [esp+4], esi
.text:004036F7                 mov     dl, cl
.text:004036F9                 shr     dl, 5
.text:004036FC                 movzx   edx, dl
.text:004036FF                 shl     edx, 2
.text:00403702                 test    eax, eax
.text:00403704                 lea     esi, [edx+eax+4]
.text:00403708                 jz      short loc_403730
.text:0040370A
.text:0040370A loc_40370A:                             ; CODE XREF: .text:00403736↓j
.text:0040370A                 mov     edx, [esi]
.text:0040370C                 and     ecx, 1Fh
.text:0040370F                 and     ebx, 1
.text:00403712                 mov     eax, edx
.text:00403714                 shr     eax, cl
.text:00403716                 and     eax, 1
.text:00403719                 xor     ebx, eax
.text:0040371B                 shl     ebx, cl
.text:0040371D                 xor     edx, ebx
.text:0040371F                 mov     [esi], edx
.text:00403721                 mov     ebx, [esp]
.text:00403724                 mov     esi, [esp+4]
.text:00403728                 add     esp, 8
.text:0040372B                 retn
.text:0040372B ; ---------------------------------------------------------------------------
.text:0040372C                 align 10h
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: .text:00403708↑j
.text:00403730                 lea     esi, dword_407144[edx]
.text:00403736                 jmp     short loc_40370A
.text:00403736 ; ---------------------------------------------------------------------------
.text:00403738                 align 10h
.text:00403740                 sub     esp, 2Ch
.text:00403743                 mov     [esp+24h], ebx
.text:00403747                 mov     ebx, [esp+40h]
.text:0040374B                 mov     [esp+28h], esi
.text:0040374F                 test    ebx, ebx
.text:00403751                 jz      short loc_4037A0
.text:00403753
.text:00403753 loc_403753:                             ; CODE XREF: .text:004037A5↓j
.text:00403753                 call    _errno
.text:00403758                 mov     esi, [eax]
.text:0040375A                 mov     [esp+14h], ebx
.text:0040375E                 mov     edx, [ebx]
.text:00403760                 mov     ecx, [esp+38h]
.text:00403764                 mov     ebx, [esp+3Ch]
.text:00403768                 mov     [esp+10h], edx
.text:0040376C                 mov     edx, [esp+34h]
.text:00403770                 mov     [esp+0Ch], ebx
.text:00403774                 mov     [esp+8], ecx
.text:00403778                 mov     [esp+4], edx
.text:0040377C                 mov     edx, [esp+30h]
.text:00403780                 mov     [esp], edx
.text:00403783                 call    sub_402BC0
.text:00403788                 mov     ebx, eax
.text:0040378A                 call    _errno
.text:0040378F                 mov     [eax], esi
.text:00403791                 mov     esi, [esp+28h]
.text:00403795                 mov     eax, ebx
.text:00403797                 mov     ebx, [esp+24h]
.text:0040379B                 add     esp, 2Ch
.text:0040379E                 retn
.text:0040379E ; ---------------------------------------------------------------------------
.text:0040379F                 align 10h
.text:004037A0
.text:004037A0 loc_4037A0:                             ; CODE XREF: .text:00403751↑j
.text:004037A0                 mov     ebx, offset dword_407140
.text:004037A5                 jmp     short loc_403753
.text:004037A5 ; ---------------------------------------------------------------------------
.text:004037A7                 align 10h
.text:004037B0                 push    ebp
.text:004037B1                 push    edi
.text:004037B2                 push    esi
.text:004037B3                 push    ebx
.text:004037B4                 sub     esp, 2Ch
.text:004037B7                 mov     ebp, [esp+48h]
.text:004037BB                 call    _errno
.text:004037C0                 mov     edx, [eax]
.text:004037C2                 test    ebp, ebp
.text:004037C4                 mov     ebx, ebp
.text:004037C6                 mov     [esp+28h], edx
.text:004037CA                 jz      loc_403880
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: .text:00403885↓j
.text:004037D0                 call    _errno
.text:004037D5                 mov     edi, [eax]
.text:004037D7                 mov     esi, ebp
.text:004037D9                 mov     [esp+14h], ebx
.text:004037DD                 mov     ecx, [ebx]
.text:004037DF                 mov     dword ptr [esp], 0
.text:004037E6                 mov     edx, [esp+44h]
.text:004037EA                 mov     dword ptr [esp+4], 0
.text:004037F2                 mov     eax, [esp+40h]
.text:004037F6                 mov     [esp+10h], ecx
.text:004037FA                 mov     [esp+0Ch], edx
.text:004037FE                 mov     [esp+8], eax
.text:00403802                 call    sub_402BC0
.text:00403807                 mov     ebx, eax
.text:00403809                 call    _errno
.text:0040380E                 mov     [eax], edi
.text:00403810                 lea     edi, [ebx+1]
.text:00403813                 mov     [esp], edi
.text:00403816                 call    sub_404410
.text:0040381B                 mov     [esp+24h], eax
.text:0040381F                 test    ebp, ebp
.text:00403821                 jz      short loc_403872
.text:00403823
.text:00403823 loc_403823:                             ; CODE XREF: .text:00403877↓j
.text:00403823                 call    _errno
.text:00403828                 mov     ebp, [eax]
.text:0040382A                 mov     [esp+14h], esi
.text:0040382E                 mov     ecx, [esi]
.text:00403830                 mov     [esp+4], edi
.text:00403834                 mov     edx, [esp+44h]
.text:00403838                 mov     esi, [esp+24h]
.text:0040383C                 mov     [esp+10h], ecx
.text:00403840                 mov     eax, [esp+40h]
.text:00403844                 mov     [esp+0Ch], edx
.text:00403848                 mov     [esp], esi
.text:0040384B                 mov     [esp+8], eax
.text:0040384F                 call    sub_402BC0
.text:00403854                 call    _errno
.text:00403859                 mov     [eax], ebp
.text:0040385B                 call    _errno
.text:00403860                 mov     ebx, [esp+28h]
.text:00403864                 mov     [eax], ebx
.text:00403866                 mov     eax, [esp+24h]
.text:0040386A                 add     esp, 2Ch
.text:0040386D                 pop     ebx
.text:0040386E                 pop     esi
.text:0040386F                 pop     edi
.text:00403870                 pop     ebp
.text:00403871                 retn
.text:00403872 ; ---------------------------------------------------------------------------
.text:00403872
.text:00403872 loc_403872:                             ; CODE XREF: .text:00403821↑j
.text:00403872                 mov     esi, offset dword_407140
.text:00403877                 jmp     short loc_403823
.text:00403877 ; ---------------------------------------------------------------------------
.text:00403879                 align 10h
.text:00403880
.text:00403880 loc_403880:                             ; CODE XREF: .text:004037CA↑j
.text:00403880                 mov     ebx, offset dword_407140
.text:00403885                 jmp     loc_4037D0
.text:00403885 ; ---------------------------------------------------------------------------
.text:0040388A                 align 10h
.text:00403890                 sub     esp, 1Ch
.text:00403893                 mov     edx, [esp+24h]
.text:00403897                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040389F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004038A7                 mov     [esp+4], edx
.text:004038AB                 mov     edx, [esp+20h]
.text:004038AF                 mov     [esp], edx
.text:004038B2                 call    sub_403D00
.text:004038B7                 add     esp, 1Ch
.text:004038BA                 retn
.text:004038BA ; ---------------------------------------------------------------------------
.text:004038BB                 align 10h
.text:004038C0                 sub     esp, 1Ch
.text:004038C3                 mov     edx, [esp+20h]
.text:004038C7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:004038CF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004038D7                 mov     [esp+4], edx
.text:004038DB                 mov     dword ptr [esp], 0
.text:004038E2                 call    sub_403D00
.text:004038E7                 add     esp, 1Ch
.text:004038EA                 retn
.text:004038EA ; ---------------------------------------------------------------------------
.text:004038EB                 align 10h
.text:004038F0
.text:004038F0 ; =============== S U B R O U T I N E =======================================
.text:004038F0
.text:004038F0
.text:004038F0 ; int __cdecl sub_4038F0(int, int, char *)
.text:004038F0 sub_4038F0      proc near               ; CODE XREF: .text:0040277A↑p
.text:004038F0                                         ; sub_402790+1A↑p
.text:004038F0
.text:004038F0 var_BC          = dword ptr -0BCh
.text:004038F0 var_B8          = dword ptr -0B8h
.text:004038F0 var_B4          = dword ptr -0B4h
.text:004038F0 var_B0          = dword ptr -0B0h
.text:004038F0 var_AC          = dword ptr -0ACh
.text:004038F0 var_A8          = dword ptr -0A8h
.text:004038F0 var_A4          = dword ptr -0A4h
.text:004038F0 var_A0          = dword ptr -0A0h
.text:004038F0 var_9C          = dword ptr -9Ch
.text:004038F0 var_98          = dword ptr -98h
.text:004038F0 var_94          = dword ptr -94h
.text:004038F0 var_90          = dword ptr -90h
.text:004038F0 var_8C          = dword ptr -8Ch
.text:004038F0 var_7C          = dword ptr -7Ch
.text:004038F0 var_78          = dword ptr -78h
.text:004038F0 var_74          = dword ptr -74h
.text:004038F0 var_70          = dword ptr -70h
.text:004038F0 var_6C          = dword ptr -6Ch
.text:004038F0 var_68          = dword ptr -68h
.text:004038F0 var_64          = dword ptr -64h
.text:004038F0 var_60          = dword ptr -60h
.text:004038F0 var_5C          = dword ptr -5Ch
.text:004038F0 var_4C          = dword ptr -4Ch
.text:004038F0 var_48          = dword ptr -48h
.text:004038F0 var_44          = dword ptr -44h
.text:004038F0 var_40          = dword ptr -40h
.text:004038F0 var_3C          = dword ptr -3Ch
.text:004038F0 var_38          = dword ptr -38h
.text:004038F0 var_34          = dword ptr -34h
.text:004038F0 var_30          = dword ptr -30h
.text:004038F0 var_2C          = dword ptr -2Ch
.text:004038F0 arg_0           = dword ptr  4
.text:004038F0 arg_4           = dword ptr  8
.text:004038F0 arg_8           = dword ptr  0Ch
.text:004038F0
.text:004038F0                 push    ebp
.text:004038F1                 xor     eax, eax
.text:004038F3                 mov     ecx, 8
.text:004038F8                 push    edi
.text:004038F9                 push    esi
.text:004038FA                 push    ebx
.text:004038FB                 sub     esp, 0ACh
.text:00403901                 mov     ebp, [esp+0BCh+arg_4]
.text:00403908                 cld
.text:00403909                 lea     edi, [esp+0BCh+var_A8]
.text:0040390D                 mov     [esp+0BCh+var_AC], ebp
.text:00403911                 rep stosd
.text:00403913                 mov     eax, [esp+0BCh+var_8C]
.text:00403917                 mov     edi, [esp+0BCh+var_AC]
.text:0040391B                 mov     esi, [esp+0BCh+var_A8]
.text:0040391F                 mov     [esp+0BCh+var_5C], eax
.text:00403923                 mov     ebp, [esp+0BCh+var_A4]
.text:00403927                 mov     eax, [esp+0BCh+var_AC]
.text:0040392B                 mov     [esp+0BCh+var_7C], edi
.text:0040392F                 mov     ecx, [esp+0BCh+var_94]
.text:00403933                 mov     edi, [esp+0BCh+var_A0]
.text:00403937                 mov     [esp+0BCh+var_78], esi
.text:0040393B                 mov     edx, [esp+0BCh+var_90]
.text:0040393F                 mov     esi, [esp+0BCh+var_9C]
.text:00403943                 mov     [esp+0BCh+var_4C], eax
.text:00403947                 mov     ebx, [esp+0BCh+var_98]
.text:0040394B                 mov     eax, [esp+0BCh+var_A8]
.text:0040394F                 mov     [esp+0BCh+var_74], ebp
.text:00403953                 mov     [esp+0BCh+var_70], edi
.text:00403957                 mov     [esp+0BCh+var_6C], esi
.text:0040395B                 mov     [esp+0BCh+var_68], ebx
.text:0040395F                 mov     [esp+0BCh+var_64], ecx
.text:00403963                 mov     [esp+0BCh+var_60], edx
.text:00403967                 mov     [esp+0BCh+var_48], eax
.text:0040396B                 mov     [esp+0BCh+var_44], ebp
.text:0040396F                 mov     [esp+0BCh+var_40], edi
.text:00403973                 mov     [esp+0BCh+var_3C], esi
.text:0040397A                 mov     [esp+0BCh+var_38], ebx
.text:00403981                 mov     ebx, [esp+0BCh+var_8C]
.text:00403985                 mov     [esp+0BCh+var_30], edx
.text:0040398C                 mov     edx, [esp+0BCh+arg_8]
.text:00403993                 mov     [esp+0BCh+var_34], ecx
.text:0040399A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040399E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004039A2                 mov     edx, [esp+0BCh+arg_0]
.text:004039A9                 mov     [esp+0BCh+var_2C], ebx
.text:004039B0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004039B4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004039BC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004039BF                 call    sub_403D00
.text:004039C4                 add     esp, 0ACh
.text:004039CA                 pop     ebx
.text:004039CB                 pop     esi
.text:004039CC                 pop     edi
.text:004039CD                 pop     ebp
.text:004039CE                 retn
.text:004039CE sub_4038F0      endp
.text:004039CE
.text:004039CE ; ---------------------------------------------------------------------------
.text:004039CF                 align 10h
.text:004039D0                 push    ebp
.text:004039D1                 xor     eax, eax
.text:004039D3                 mov     ecx, 8
.text:004039D8                 push    edi
.text:004039D9                 push    esi
.text:004039DA                 push    ebx
.text:004039DB                 sub     esp, 0ACh
.text:004039E1                 mov     edx, [esp+0C4h]
.text:004039E8                 cld
.text:004039E9                 lea     edi, [esp+14h]
.text:004039ED                 mov     [esp+10h], edx
.text:004039F1                 rep stosd
.text:004039F3                 mov     eax, [esp+30h]
.text:004039F7                 mov     ebp, [esp+10h]
.text:004039FB                 mov     edi, [esp+14h]
.text:004039FF                 mov     [esp+60h], eax
.text:00403A03                 mov     esi, [esp+20h]
.text:00403A07                 mov     eax, [esp+10h]
.text:00403A0B                 mov     [esp+40h], ebp
.text:00403A0F                 mov     ecx, [esp+28h]
.text:00403A13                 mov     ebp, [esp+18h]
.text:00403A17                 mov     [esp+44h], edi
.text:00403A1B                 mov     edx, [esp+2Ch]
.text:00403A1F                 mov     edi, [esp+1Ch]
.text:00403A23                 mov     [esp+70h], eax
.text:00403A27                 mov     ebx, [esp+24h]
.text:00403A2B                 mov     eax, [esp+14h]
.text:00403A2F                 mov     [esp+48h], ebp
.text:00403A33                 mov     [esp+4Ch], edi
.text:00403A37                 mov     [esp+50h], esi
.text:00403A3B                 mov     [esp+54h], ebx
.text:00403A3F                 mov     [esp+58h], ecx
.text:00403A43                 mov     [esp+5Ch], edx
.text:00403A47                 mov     [esp+74h], eax
.text:00403A4B                 mov     [esp+78h], ebp
.text:00403A4F                 mov     [esp+7Ch], edi
.text:00403A53                 mov     [esp+80h], esi
.text:00403A5A                 mov     [esp+84h], ebx
.text:00403A61                 mov     esi, [esp+30h]
.text:00403A65                 lea     ebx, [esp+70h]
.text:00403A69                 mov     [esp+8Ch], edx
.text:00403A70                 mov     edx, [esp+0C8h]
.text:00403A77                 mov     [esp+88h], ecx
.text:00403A7E                 mov     ecx, [esp+0CCh]
.text:00403A85                 mov     [esp+4], edx
.text:00403A89                 mov     edx, [esp+0C0h]
.text:00403A90                 mov     [esp+90h], esi
.text:00403A97                 mov     [esp+0Ch], ebx
.text:00403A9B                 mov     [esp+8], ecx
.text:00403A9F                 mov     [esp], edx
.text:00403AA2                 call    sub_403D00
.text:00403AA7                 add     esp, 0ACh
.text:00403AAD                 pop     ebx
.text:00403AAE                 pop     esi
.text:00403AAF                 pop     edi
.text:00403AB0                 pop     ebp
.text:00403AB1                 retn
.text:00403AB1 ; ---------------------------------------------------------------------------
.text:00403AB2                 align 10h
.text:00403AC0                 push    ebp
.text:00403AC1                 xor     eax, eax
.text:00403AC3                 mov     ecx, 8
.text:00403AC8                 push    edi
.text:00403AC9                 push    esi
.text:00403ACA                 push    ebx
.text:00403ACB                 sub     esp, 0ACh
.text:00403AD1                 mov     edi, [esp+0C0h]
.text:00403AD8                 cld
.text:00403AD9                 mov     [esp+10h], edi
.text:00403ADD                 lea     edi, [esp+14h]
.text:00403AE1                 rep stosd
.text:00403AE3                 mov     eax, [esp+30h]
.text:00403AE7                 mov     esi, [esp+10h]
.text:00403AEB                 mov     ebx, [esp+14h]
.text:00403AEF                 mov     [esp+60h], eax
.text:00403AF3                 mov     ebp, [esp+18h]
.text:00403AF7                 mov     eax, [esp+10h]
.text:00403AFB                 mov     [esp+40h], esi
.text:00403AFF                 mov     edi, [esp+1Ch]
.text:00403B03                 mov     esi, [esp+20h]
.text:00403B07                 mov     [esp+44h], ebx
.text:00403B0B                 mov     ecx, [esp+28h]
.text:00403B0F                 mov     edx, [esp+2Ch]
.text:00403B13                 mov     [esp+70h], eax
.text:00403B17                 mov     ebx, [esp+24h]
.text:00403B1B                 mov     eax, [esp+14h]
.text:00403B1F                 mov     [esp+48h], ebp
.text:00403B23                 mov     [esp+4Ch], edi
.text:00403B27                 mov     [esp+50h], esi
.text:00403B2B                 mov     [esp+54h], ebx
.text:00403B2F                 mov     [esp+58h], ecx
.text:00403B33                 mov     [esp+5Ch], edx
.text:00403B37                 mov     [esp+74h], eax
.text:00403B3B                 mov     [esp+78h], ebp
.text:00403B3F                 mov     [esp+7Ch], edi
.text:00403B43                 mov     [esp+80h], esi
.text:00403B4A                 mov     [esp+84h], ebx
.text:00403B51                 mov     [esp+8Ch], edx
.text:00403B58                 lea     edx, [esp+70h]
.text:00403B5C                 mov     [esp+88h], ecx
.text:00403B63                 mov     ecx, [esp+30h]
.text:00403B67                 mov     [esp+0Ch], edx
.text:00403B6B                 mov     edx, [esp+0C4h]
.text:00403B72                 mov     [esp+90h], ecx
.text:00403B79                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403B81                 mov     [esp+4], edx
.text:00403B85                 mov     dword ptr [esp], 0
.text:00403B8C                 call    sub_403D00
.text:00403B91                 add     esp, 0ACh
.text:00403B97                 pop     ebx
.text:00403B98                 pop     esi
.text:00403B99                 pop     edi
.text:00403B9A                 pop     ebp
.text:00403B9B                 retn
.text:00403B9B ; ---------------------------------------------------------------------------
.text:00403B9C                 align 10h
.text:00403BA0                 push    edi
.text:00403BA1                 push    esi
.text:00403BA2                 push    ebx
.text:00403BA3                 sub     esp, 40h
.text:00403BA6                 mov     edx, ds:dword_40714C
.text:00403BAC                 mov     ebx, ds:dword_407140
.text:00403BB2                 mov     esi, ds:dword_407148
.text:00403BB8                 mov     edi, ds:dword_407144
.text:00403BBE                 mov     [esp+1Ch], edx
.text:00403BC2                 mov     ecx, ds:dword_407150
.text:00403BC8                 mov     edx, ds:dword_407160
.text:00403BCE                 mov     [esp+10h], ebx
.text:00403BD2                 mov     ebx, ds:dword_407154
.text:00403BD8                 mov     [esp+30h], edx
.text:00403BDC                 movzx   edx, byte ptr [esp+54h]
.text:00403BE1                 mov     [esp+18h], esi
.text:00403BE5                 mov     esi, ds:dword_40715C
.text:00403BEB                 mov     [esp+14h], edi
.text:00403BEF                 mov     edi, ds:dword_407158
.text:00403BF5                 mov     [esp+20h], ecx
.text:00403BF9                 mov     cl, dl
.text:00403BFB                 shr     cl, 5
.text:00403BFE                 mov     [esp+24h], ebx
.text:00403C02                 movzx   ebx, cl
.text:00403C05                 mov     [esp+2Ch], esi
.text:00403C09                 lea     esi, [esp+10h]
.text:00403C0D                 mov     [esp+28h], edi
.text:00403C11                 lea     edi, [esi+ebx*4]
.text:00403C14                 mov     ebx, edx
.text:00403C16                 mov     edx, [edi+4]
.text:00403C19                 and     ebx, 1Fh
.text:00403C1C                 mov     cl, bl
.text:00403C1E                 mov     eax, edx
.text:00403C20                 shr     eax, cl
.text:00403C22                 and     eax, 1
.text:00403C25                 xor     eax, 1
.text:00403C28                 shl     eax, cl
.text:00403C2A                 xor     edx, eax
.text:00403C2C                 mov     [edi+4], edx
.text:00403C2F                 mov     edx, [esp+50h]
.text:00403C33                 mov     [esp+0Ch], esi
.text:00403C37                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403C3F                 mov     [esp+4], edx
.text:00403C43                 mov     dword ptr [esp], 0
.text:00403C4A                 call    sub_403D00
.text:00403C4F                 add     esp, 40h
.text:00403C52                 pop     ebx
.text:00403C53                 pop     esi
.text:00403C54                 pop     edi
.text:00403C55                 retn
.text:00403C55 ; ---------------------------------------------------------------------------
.text:00403C56                 align 10h
.text:00403C60
.text:00403C60 ; =============== S U B R O U T I N E =======================================
.text:00403C60
.text:00403C60
.text:00403C60 ; int __cdecl sub_403C60(char *)
.text:00403C60 sub_403C60      proc near               ; CODE XREF: sub_402A50+64↑p
.text:00403C60
.text:00403C60 var_4C          = dword ptr -4Ch
.text:00403C60 var_48          = dword ptr -48h
.text:00403C60 var_44          = dword ptr -44h
.text:00403C60 var_40          = dword ptr -40h
.text:00403C60 var_3C          = dword ptr -3Ch
.text:00403C60 var_38          = dword ptr -38h
.text:00403C60 var_34          = dword ptr -34h
.text:00403C60 var_30          = dword ptr -30h
.text:00403C60 var_2C          = dword ptr -2Ch
.text:00403C60 var_28          = dword ptr -28h
.text:00403C60 var_24          = dword ptr -24h
.text:00403C60 var_20          = dword ptr -20h
.text:00403C60 var_1C          = dword ptr -1Ch
.text:00403C60 arg_0           = dword ptr  4
.text:00403C60
.text:00403C60                 sub     esp, 4Ch
.text:00403C63                 mov     ecx, ds:dword_407140
.text:00403C69                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403C71                 mov     edx, ds:dword_407144
.text:00403C77                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403C7E                 mov     [esp+4Ch+var_3C], ecx
.text:00403C82                 mov     ecx, ds:dword_40714C
.text:00403C88                 mov     [esp+4Ch+var_38], edx
.text:00403C8C                 mov     edx, ds:dword_407148
.text:00403C92                 mov     [esp+4Ch+var_30], ecx
.text:00403C96                 mov     ecx, ds:dword_407150
.text:00403C9C                 mov     eax, edx
.text:00403C9E                 shr     eax, 1Ah
.text:00403CA1                 and     eax, 1
.text:00403CA4                 xor     eax, 1
.text:00403CA7                 mov     [esp+4Ch+var_2C], ecx
.text:00403CAB                 shl     eax, 1Ah
.text:00403CAE                 mov     ecx, ds:dword_407154
.text:00403CB4                 xor     edx, eax
.text:00403CB6                 mov     [esp+4Ch+var_34], edx
.text:00403CBA                 mov     edx, [esp+4Ch+arg_0]
.text:00403CBE                 mov     [esp+4Ch+var_28], ecx
.text:00403CC2                 mov     ecx, ds:dword_407158
.text:00403CC8                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403CCC                 mov     [esp+4Ch+var_24], ecx
.text:00403CD0                 mov     ecx, ds:dword_40715C
.text:00403CD6                 mov     [esp+4Ch+var_20], ecx
.text:00403CDA                 mov     ecx, ds:dword_407160
.text:00403CE0                 mov     [esp+4Ch+var_1C], ecx
.text:00403CE4                 lea     ecx, [esp+4Ch+var_3C]
.text:00403CE8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403CEC                 call    sub_403D00
.text:00403CF1                 add     esp, 4Ch
.text:00403CF4                 retn
.text:00403CF4 sub_403C60      endp
.text:00403CF4
.text:00403CF4 ; ---------------------------------------------------------------------------
.text:00403CF5                 align 10h
.text:00403D00
.text:00403D00 ; =============== S U B R O U T I N E =======================================
.text:00403D00
.text:00403D00
.text:00403D00 ; int __cdecl sub_403D00(int, char *, int, int)
.text:00403D00 sub_403D00      proc near               ; CODE XREF: .text:004038B2↑p
.text:00403D00                                         ; .text:004038E2↑p ...
.text:00403D00
.text:00403D00 Block           = dword ptr -2Ch
.text:00403D00 var_28          = dword ptr -28h
.text:00403D00 Str             = dword ptr -24h
.text:00403D00 var_20          = dword ptr -20h
.text:00403D00 var_1C          = dword ptr -1Ch
.text:00403D00 var_18          = dword ptr -18h
.text:00403D00 var_14          = dword ptr -14h
.text:00403D00 arg_0           = dword ptr  4
.text:00403D00 arg_4           = dword ptr  8
.text:00403D00 arg_8           = dword ptr  0Ch
.text:00403D00 arg_C           = dword ptr  10h
.text:00403D00
.text:00403D00                 push    ebp
.text:00403D01                 push    edi
.text:00403D02                 push    esi
.text:00403D03                 push    ebx
.text:00403D04                 sub     esp, 1Ch
.text:00403D07                 call    _errno
.text:00403D0C                 mov     edx, [eax]
.text:00403D0E                 mov     eax, [esp+2Ch+arg_0]
.text:00403D12                 mov     [esp+2Ch+var_14], edx
.text:00403D16                 test    eax, eax
.text:00403D18                 js      loc_403EBA
.text:00403D1E                 mov     eax, [esp+2Ch+arg_0]
.text:00403D22                 cmp     dword_406020, eax
.text:00403D28                 ja      short loc_403DA0
.text:00403D2A                 mov     esi, eax
.text:00403D2C                 inc     esi
.text:00403D2D                 cmp     esi, 1FFFFFFFh
.text:00403D33                 ja      loc_403EBF
.text:00403D39                 mov     ebx, off_40602C
.text:00403D3F                 cmp     ebx, offset dword_406024
.text:00403D45                 jz      loc_403E91
.text:00403D4B
.text:00403D4B loc_403D4B:                             ; CODE XREF: sub_403D00+1B5↓j
.text:00403D4B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403D4E                 lea     ecx, ds:0[esi*8]
.text:00403D55                 mov     ebp, esi
.text:00403D57                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403D5B                 call    sub_4044A0
.text:00403D60                 mov     off_40602C, eax
.text:00403D65                 mov     ebx, dword_406020
.text:00403D6B                 sub     ebp, ebx
.text:00403D6D                 lea     edi, [eax+ebx*8]
.text:00403D70                 lea     eax, ds:0[ebp*8]
.text:00403D77                 cmp     eax, 7
.text:00403D7A                 jbe     short loc_403D90
.text:00403D7C                 test    edi, 4
.text:00403D82                 jz      short loc_403D90
.text:00403D84                 mov     dword ptr [edi], 0
.text:00403D8A                 sub     eax, 4
.text:00403D8D                 add     edi, 4
.text:00403D90
.text:00403D90 loc_403D90:                             ; CODE XREF: sub_403D00+7A↑j
.text:00403D90                                         ; sub_403D00+82↑j
.text:00403D90                 cld
.text:00403D91                 mov     ecx, eax
.text:00403D93                 shr     ecx, 2
.text:00403D96                 xor     eax, eax
.text:00403D98                 rep stosd
.text:00403D9A                 mov     dword_406020, esi
.text:00403DA0
.text:00403DA0 loc_403DA0:                             ; CODE XREF: sub_403D00+28↑j
.text:00403DA0                 mov     esi, off_40602C
.text:00403DA6                 mov     eax, [esp+2Ch+arg_0]
.text:00403DAA                 mov     ebp, [esi+eax*8]
.text:00403DAD                 mov     edi, [esi+eax*8+4]
.text:00403DB1                 mov     esi, [esp+2Ch+arg_C]
.text:00403DB5                 test    esi, esi
.text:00403DB7                 jz      loc_403E87
.text:00403DBD
.text:00403DBD loc_403DBD:                             ; CODE XREF: sub_403D00+18C↓j
.text:00403DBD                 call    _errno
.text:00403DC2                 mov     ebx, [eax]
.text:00403DC4                 mov     [esp+2Ch+var_18], esi ; int
.text:00403DC8                 mov     ecx, [esi]
.text:00403DCA                 mov     [esp+2Ch+Block], edi ; int
.text:00403DCD                 mov     edx, [esp+2Ch+arg_8]
.text:00403DD1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403DD5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403DD9                 mov     ecx, [esp+2Ch+arg_4]
.text:00403DDD                 mov     [esp+2Ch+var_20], edx ; int
.text:00403DE1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403DE5                 call    sub_402BC0
.text:00403DEA                 mov     esi, eax
.text:00403DEC                 call    _errno
.text:00403DF1                 mov     [eax], ebx
.text:00403DF3                 cmp     ebp, esi
.text:00403DF5                 ja      short loc_403E6B
.text:00403DF7                 lea     ebp, [esi+1]
.text:00403DFA                 mov     ebx, off_40602C
.text:00403E00                 cmp     edi, offset unk_407040
.text:00403E06                 mov     esi, [esp+2Ch+arg_0]
.text:00403E0A                 mov     [ebx+esi*8], ebp
.text:00403E0D                 jz      short loc_403E1D
.text:00403E0F                 mov     [esp+2Ch+Block], edi ; Block
.text:00403E12                 call    free
.text:00403E17                 mov     ebx, off_40602C
.text:00403E1D
.text:00403E1D loc_403E1D:                             ; CODE XREF: sub_403D00+10D↑j
.text:00403E1D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403E20                 call    sub_404410
.text:00403E25                 mov     esi, [esp+2Ch+arg_C]
.text:00403E29                 mov     edi, eax
.text:00403E2B                 mov     eax, [esp+2Ch+arg_0]
.text:00403E2F                 test    esi, esi
.text:00403E31                 mov     [ebx+eax*8+4], edi
.text:00403E35                 jz      short loc_403E80
.text:00403E37
.text:00403E37 loc_403E37:                             ; CODE XREF: sub_403D00+185↓j
.text:00403E37                 call    _errno
.text:00403E3C                 mov     ebx, [eax]
.text:00403E3E                 mov     [esp+2Ch+var_18], esi ; int
.text:00403E42                 mov     ecx, [esi]
.text:00403E44                 mov     [esp+2Ch+Block], edi ; int
.text:00403E47                 mov     edx, [esp+2Ch+arg_8]
.text:00403E4B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403E4F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403E53                 mov     ecx, [esp+2Ch+arg_4]
.text:00403E57                 mov     [esp+2Ch+var_20], edx ; int
.text:00403E5B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403E5F                 call    sub_402BC0
.text:00403E64                 call    _errno
.text:00403E69                 mov     [eax], ebx
.text:00403E6B
.text:00403E6B loc_403E6B:                             ; CODE XREF: sub_403D00+F5↑j
.text:00403E6B                 call    _errno
.text:00403E70                 mov     ebp, [esp+2Ch+var_14]
.text:00403E74                 mov     [eax], ebp
.text:00403E76                 add     esp, 1Ch
.text:00403E79                 mov     eax, edi
.text:00403E7B                 pop     ebx
.text:00403E7C                 pop     esi
.text:00403E7D                 pop     edi
.text:00403E7E                 pop     ebp
.text:00403E7F                 retn
.text:00403E80 ; ---------------------------------------------------------------------------
.text:00403E80
.text:00403E80 loc_403E80:                             ; CODE XREF: sub_403D00+135↑j
.text:00403E80                 mov     esi, offset dword_407140
.text:00403E85                 jmp     short loc_403E37
.text:00403E87 ; ---------------------------------------------------------------------------
.text:00403E87
.text:00403E87 loc_403E87:                             ; CODE XREF: sub_403D00+B7↑j
.text:00403E87                 mov     esi, offset dword_407140
.text:00403E8C                 jmp     loc_403DBD
.text:00403E91 ; ---------------------------------------------------------------------------
.text:00403E91
.text:00403E91 loc_403E91:                             ; CODE XREF: sub_403D00+45↑j
.text:00403E91                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00403E98                 call    sub_404410
.text:00403E9D                 mov     off_40602C, eax
.text:00403EA2                 mov     edi, dword_406024
.text:00403EA8                 mov     ebx, eax
.text:00403EAA                 mov     ecx, off_406028
.text:00403EB0                 mov     [eax], edi
.text:00403EB2                 mov     [eax+4], ecx
.text:00403EB5                 jmp     loc_403D4B
.text:00403EBA ; ---------------------------------------------------------------------------
.text:00403EBA
.text:00403EBA loc_403EBA:                             ; CODE XREF: sub_403D00+18↑j
.text:00403EBA                 call    abort
.text:00403EBF ; ---------------------------------------------------------------------------
.text:00403EBF
.text:00403EBF loc_403EBF:                             ; CODE XREF: sub_403D00+33↑j
.text:00403EBF                 call    sub_4046C0
.text:00403EBF sub_403D00      endp
.text:00403EBF
.text:00403EBF ; ---------------------------------------------------------------------------
.text:00403EC4                 align 10h
.text:00403ED0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403ED0                                         ; DATA XREF: .data:Buffer↓o
.text:00403F02 ; const char Format[12]
.text:00403F02 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4041C0+50↓o
.text:00403F0E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403F1E                 db 12h dup(90h)
.text:00403F30
.text:00403F30 ; =============== S U B R O U T I N E =======================================
.text:00403F30
.text:00403F30
.text:00403F30 sub_403F30      proc near               ; DATA XREF: sub_4041C0+100↓o
.text:00403F30                 push    esp
.text:00403F31                 push    69207369h
.text:00403F36                 jnb     short loc_403F58
.text:00403F38                 db      66h
.text:00403F38                 jb      short near ptr 3FA0h
.text:00403F3B                 and     gs:[ebx+6Fh], dh
.text:00403F3F                 db      66h
.text:00403F3F                 jz      short near ptr 3FB9h
.text:00403F42                 popa
.text:00403F43                 jb      short loc_403FAA
.text:00403F45                 cmp     esp, [eax]
.text:00403F47                 jnb     short near ptr loc_403FAC+2
.text:00403F49                 and     gs:[eax+ebp*2+65h], dh
.text:00403F4E                 and     [ebx+6Fh], dh
.text:00403F51                 jnz     short loc_403FC5
.text:00403F53                 arpl    [ebp+20h], sp
.text:00403F56                 outsw
.text:00403F58
.text:00403F58 loc_403F58:                             ; CODE XREF: sub_403F30+6↑j
.text:00403F58                 jb      short loc_403F7A
.text:00403F5A                 arpl    [edi+70h], bp
.text:00403F5D                 jns     short loc_403FC8
.text:00403F5F                 outsb
.text:00403F60                 and     [bp+di+6Fh], ah
.text:00403F64                 outsb
.text:00403F65                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:00403F6E                 and     [eax+ebp*2+65h], dl
.text:00403F72                 jb      short near ptr loc_403FD8+1
.text:00403F74                 and     [ecx+73h], ch
.text:00403F77                 and     [esi+4Fh], cl
.text:00403F7A
.text:00403F7A loc_403F7A:                             ; CODE XREF: sub_403F30:loc_403F58↑j
.text:00403F7A                 or      dh, [edi+61h]
.text:00403F7D                 jb      short loc_403FF1
.text:00403F7F                 popa
.text:00403F80                 outsb
.text:00403F81                 jz      short loc_403FFC
.text:00403F83                 cmp     esp, [eax]
.text:00403F85                 outsb
.text:00403F86                 outsd
.text:00403F87                 jz      short loc_403FA9
.text:00403F89                 db      65h
.text:00403F89                 jbe     short loc_403FF1
.text:00403F8C                 outsb
.text:00403F8D                 and     [esi+6Fh], ah
.text:00403F90                 jb      short near ptr loc_403FB0+2
.text:00403F92                 dec     ebp
.text:00403F93                 inc     ebp
.text:00403F94                 push    edx
.text:00403F95                 inc     ebx
.text:00403F96                 dec     eax
.text:00403F97                 inc     ecx
.text:00403F98                 dec     esi
.text:00403F99                 push    esp
.text:00403F9A                 inc     ecx
.text:00403F9B                 inc     edx
.text:00403F9C                 dec     ecx
.text:00403F9D                 dec     esp
.text:00403F9E                 dec     ecx
.text:00403F9F                 push    esp
.text:00403FA0                 pop     ecx
.text:00403FA1                 and     [edi+72h], ch
.text:00403FA4                 and     [esi+49h], al
.text:00403FA7                 push    esp
.text:00403FA8                 dec     esi
.text:00403FA9
.text:00403FA9 loc_403FA9:                             ; CODE XREF: sub_403F30+57↑j
.text:00403FA9                 inc     ebp
.text:00403FAA
.text:00403FAA loc_403FAA:                             ; CODE XREF: sub_403F30+13↑j
.text:00403FAA                 push    ebx
.text:00403FAB                 push    ebx
.text:00403FAC
.text:00403FAC loc_403FAC:                             ; CODE XREF: sub_403F30+17↑j
.text:00403FAC                 and     [esi+4Fh], al
.text:00403FAF                 push    edx
.text:00403FB0
.text:00403FB0 loc_403FB0:                             ; CODE XREF: sub_403F30+60↑j
.text:00403FB0                 and     [ecx+20h], al
.text:00403FB3                 push    eax
.text:00403FB4                 inc     ecx
.text:00403FB5                 push    edx
.text:00403FB6                 push    esp
.text:00403FB7                 dec     ecx
.text:00403FB8                 inc     ebx
.text:00403FB9                 push    ebp
.text:00403FBA                 dec     esp
.text:00403FBB                 inc     ecx
.text:00403FBC                 push    edx
.text:00403FBD                 and     [eax+55h], dl
.text:00403FC0                 push    edx
.text:00403FC1                 push    eax
.text:00403FC2                 dec     edi
.text:00403FC3                 push    ebx
.text:00403FC4                 inc     ebp
.text:00403FC5
.text:00403FC5 loc_403FC5:                             ; CODE XREF: sub_403F30+21↑j
.text:00403FC5                 or      al, cs:[eax]
.text:00403FC8
.text:00403FC8 loc_403FC8:                             ; CODE XREF: sub_403F30+2D↑j
.text:00403FC8                                         ; DATA XREF: sub_4041C0:loc_404301↓o
.text:00403FC8                 push    edi
.text:00403FC9                 jb      short near ptr loc_404033+1
.text:00403FCB                 jz      short near ptr loc_404040+1
.text:00403FCD                 outs    dx, byte ptr gs:[esi]
.text:00403FCF                 and     [edx+79h], ah
.text:00403FD2                 and     ds:6E612073h, ah
.text:00403FD8
.text:00403FD8 loc_403FD8:                             ; CODE XREF: sub_403F30+42↑j
.text:00403FD8                 and     fs:0A2E73h, ah
.text:00403FDF
.text:00403FDF loc_403FDF:                             ; DATA XREF: sub_4041C0:loc_40430D↓o
.text:00403FDF                 push    edi
.text:00403FE0                 jb      short near ptr loc_40404A+1
.text:00403FE2                 jz      short loc_404058
.text:00403FE4                 outs    dx, byte ptr gs:[esi]
.text:00403FE6                 and     [edx+79h], ah
.text:00403FE9                 and     ds:25202C73h, ah
.text:00403FEF                 jnb     short near ptr loc_40401A+3
.text:00403FF1
.text:00403FF1 loc_403FF1:                             ; CODE XREF: sub_403F30+4D↑j
.text:00403FF1                                         ; sub_403F30+59↑j
.text:00403FF1                 and     [ecx+6Eh], ah
.text:00403FF4                 and     fs:0A2E73h, ah
.text:00403FFB                 nop
.text:00403FFC
.text:00403FFC loc_403FFC:                             ; CODE XREF: sub_403F30+51↑j
.text:00403FFC                 nop
.text:00403FFD                 nop
.text:00403FFE                 nop
.text:00403FFF                 nop
.text:00404000                 nop
.text:00404001                 nop
.text:00404002                 nop
.text:00404003                 nop
.text:00404004                 nop
.text:00404005                 nop
.text:00404006                 nop
.text:00404007                 nop
.text:00404008                 nop
.text:00404009                 nop
.text:0040400A                 nop
.text:0040400B                 nop
.text:0040400C                 nop
.text:0040400D                 nop
.text:0040400E                 nop
.text:0040400F                 nop
.text:0040400F sub_403F30      endp ; sp-analysis failed
.text:0040400F
.text:00404010
.text:00404010 ; =============== S U B R O U T I N E =======================================
.text:00404010
.text:00404010
.text:00404010 sub_404010      proc near               ; DATA XREF: sub_4041C0:loc_404319↓o
.text:00404010                 push    edi
.text:00404011                 jb      short near ptr loc_40407A+2
.text:00404013                 jz      short near ptr loc_404088+1
.text:00404015                 outs    dx, byte ptr gs:[esi]
.text:00404017                 and     [edx+79h], ah
.text:0040401A
.text:0040401A loc_40401A:                             ; CODE XREF: sub_403F30+BF↑j
.text:0040401A                 and     ds:25202C73h, ah
.text:00404020                 jnb     short near ptr loc_40404D+1
.text:00404022                 and     ds:610A2C73h, ah
.text:00404028                 outsb
.text:00404029                 and     fs:0A2E73h, ah
.text:00404030
.text:00404030 loc_404030:                             ; DATA XREF: sub_4041C0:loc_404325↓o
.text:00404030                 push    edi
.text:00404031                 jb      short loc_40409C
.text:00404033
.text:00404033 loc_404033:                             ; CODE XREF: sub_403F30+99↑j
.text:00404033                 jz      short loc_4040A9
.text:00404035                 outs    dx, byte ptr gs:[esi]
.text:00404037                 and     [edx+79h], ah
.text:0040403A                 and     ds:25202C73h, ah
.text:00404040
.text:00404040 loc_404040:                             ; CODE XREF: sub_403F30+9B↑j
.text:00404040                 jnb     short loc_40406E
.text:00404042                 and     ds:250A2C73h, ah
.text:00404048                 jnb     short near ptr loc_404075+1
.text:0040404A
.text:0040404A loc_40404A:                             ; CODE XREF: sub_403F30+B0↑j
.text:0040404A                 and     [ecx+6Eh], ah
.text:0040404D
.text:0040404D loc_40404D:                             ; CODE XREF: sub_404010+10↑j
.text:0040404D                 and     fs:0A2E73h, ah
.text:00404054                 nop
.text:00404055                 nop
.text:00404056                 nop
.text:00404057                 nop
.text:00404058
.text:00404058 loc_404058:                             ; CODE XREF: sub_403F30+B2↑j
.text:00404058                 nop
.text:00404059                 nop
.text:0040405A                 nop
.text:0040405B                 nop
.text:0040405C                 nop
.text:0040405D                 nop
.text:0040405E                 nop
.text:0040405F                 nop
.text:00404060                 nop
.text:00404061                 nop
.text:00404062                 nop
.text:00404063                 nop
.text:00404064                 nop
.text:00404065                 nop
.text:00404066                 nop
.text:00404067                 nop
.text:00404068                 nop
.text:00404069                 nop
.text:0040406A                 nop
.text:0040406B                 nop
.text:0040406C                 nop
.text:0040406D                 nop
.text:0040406E
.text:0040406E loc_40406E:                             ; CODE XREF: sub_404010:loc_404040↑j
.text:0040406E                 nop
.text:0040406F                 nop
.text:0040406F sub_404010      endp ; sp-analysis failed
.text:0040406F
.text:00404070
.text:00404070 ; =============== S U B R O U T I N E =======================================
.text:00404070
.text:00404070
.text:00404070 sub_404070      proc near               ; DATA XREF: sub_4041C0:loc_404331↓o
.text:00404070                 push    edi
.text:00404071                 jb      short loc_4040DC
.text:00404073                 jz      short loc_4040E9
.text:00404075
.text:00404075 loc_404075:                             ; CODE XREF: sub_404010+38↑j
.text:00404075                 outs    dx, byte ptr gs:[esi]
.text:00404077                 and     [edx+79h], ah
.text:0040407A
.text:0040407A loc_40407A:                             ; CODE XREF: sub_404010+1↑j
.text:0040407A                 and     ds:25202C73h, ah
.text:00404080                 jnb     short loc_4040AE
.text:00404082                 and     ds:250A2C73h, ah
.text:00404088
.text:00404088 loc_404088:                             ; CODE XREF: sub_404010+3↑j
.text:00404088                 jnb     short near ptr loc_4040B5+1
.text:0040408A                 and     ds:61202C73h, ah
.text:00404090                 outsb
.text:00404091                 and     fs:0A2E73h, ah
.text:00404098                 nop
.text:00404099                 nop
.text:0040409A                 nop
.text:0040409B                 nop
.text:0040409C
.text:0040409C loc_40409C:                             ; CODE XREF: sub_404010+21↑j
.text:0040409C                 nop
.text:0040409D                 nop
.text:0040409E                 nop
.text:0040409F                 nop
.text:004040A0                 nop
.text:004040A1                 nop
.text:004040A2                 nop
.text:004040A3                 nop
.text:004040A4                 nop
.text:004040A5                 nop
.text:004040A6                 nop
.text:004040A7                 nop
.text:004040A8                 nop
.text:004040A9
.text:004040A9 loc_4040A9:                             ; CODE XREF: sub_404010:loc_404033↑j
.text:004040A9                 nop
.text:004040AA                 nop
.text:004040AB                 nop
.text:004040AC                 nop
.text:004040AD                 nop
.text:004040AE
.text:004040AE loc_4040AE:                             ; CODE XREF: sub_404070+10↑j
.text:004040AE                 nop
.text:004040AF                 nop
.text:004040AF sub_404070      endp ; sp-analysis failed
.text:004040AF
.text:004040B0
.text:004040B0 ; =============== S U B R O U T I N E =======================================
.text:004040B0
.text:004040B0
.text:004040B0 sub_4040B0      proc near               ; DATA XREF: sub_4041C0:loc_40433D↓o
.text:004040B0                 push    edi
.text:004040B1                 jb      short near ptr loc_404119+3
.text:004040B3                 jz      short loc_404129
.text:004040B5
.text:004040B5 loc_4040B5:                             ; CODE XREF: sub_404070:loc_404088↑j
.text:004040B5                 outs    dx, byte ptr gs:[esi]
.text:004040B7                 and     [edx+79h], ah
.text:004040BA                 and     ds:25202C73h, ah
.text:004040C0                 jnb     short loc_4040EE
.text:004040C2                 and     ds:250A2C73h, ah
.text:004040C8                 jnb     short near ptr loc_4040F5+1
.text:004040CA                 and     ds:25202C73h, ah
.text:004040D0                 jnb     short near ptr loc_4040FA+4
.text:004040D2                 and     [ecx+6Eh], ah
.text:004040D5                 and     fs:0A2E73h, ah
.text:004040DC
.text:004040DC loc_4040DC:                             ; CODE XREF: sub_404070+1↑j
.text:004040DC                 nop
.text:004040DD                 nop
.text:004040DE                 nop
.text:004040DF                 nop
.text:004040E0                 nop
.text:004040E1                 nop
.text:004040E2                 nop
.text:004040E3                 nop
.text:004040E4                 nop
.text:004040E5                 nop
.text:004040E6                 nop
.text:004040E7                 nop
.text:004040E8                 nop
.text:004040E9
.text:004040E9 loc_4040E9:                             ; CODE XREF: sub_404070+3↑j
.text:004040E9                 nop
.text:004040EA                 nop
.text:004040EB                 nop
.text:004040EC                 nop
.text:004040ED                 nop
.text:004040EE
.text:004040EE loc_4040EE:                             ; CODE XREF: sub_4040B0+10↑j
.text:004040EE                 nop
.text:004040EF                 nop
.text:004040EF sub_4040B0      endp ; sp-analysis failed
.text:004040EF
.text:004040F0
.text:004040F0 ; =============== S U B R O U T I N E =======================================
.text:004040F0
.text:004040F0
.text:004040F0 sub_4040F0      proc near               ; DATA XREF: sub_4041C0:loc_404349↓o
.text:004040F0                 push    edi
.text:004040F1                 jb      short near ptr loc_40415A+2
.text:004040F3                 jz      short near ptr loc_404164+5
.text:004040F5
.text:004040F5 loc_4040F5:                             ; CODE XREF: sub_4040B0+18↑j
.text:004040F5                 outs    dx, byte ptr gs:[esi]
.text:004040F7                 and     [edx+79h], ah
.text:004040FA
.text:004040FA loc_4040FA:                             ; CODE XREF: sub_4040B0+20↑j
.text:004040FA                 and     ds:25202C73h, ah
.text:00404100                 jnb     short loc_40412E
.text:00404102                 and     ds:250A2C73h, ah
.text:00404108                 jnb     short near ptr loc_404135+1
.text:0040410A                 and     ds:25202C73h, ah
.text:00404110                 jnb     short near ptr loc_40413A+4
.text:00404112                 and     ds:610A2C73h, ah
.text:00404118                 outsb
.text:00404119
.text:00404119 loc_404119:                             ; CODE XREF: sub_4040B0+1↑j
.text:00404119                 and     fs:0A2E73h, ah
.text:00404120                 nop
.text:00404121                 nop
.text:00404122                 nop
.text:00404123                 nop
.text:00404124                 nop
.text:00404125                 nop
.text:00404126                 nop
.text:00404127                 nop
.text:00404128                 nop
.text:00404129
.text:00404129 loc_404129:                             ; CODE XREF: sub_4040B0+3↑j
.text:00404129                 nop
.text:0040412A                 nop
.text:0040412B                 nop
.text:0040412C                 nop
.text:0040412D                 nop
.text:0040412E
.text:0040412E loc_40412E:                             ; CODE XREF: sub_4040F0+10↑j
.text:0040412E                 nop
.text:0040412F                 nop
.text:0040412F sub_4040F0      endp ; sp-analysis failed
.text:0040412F
.text:00404130
.text:00404130 ; =============== S U B R O U T I N E =======================================
.text:00404130
.text:00404130
.text:00404130 sub_404130      proc near               ; DATA XREF: sub_4041C0:loc_404355↓o
.text:00404130                 push    edi
.text:00404131                 jb      short near ptr loc_40419A+2
.text:00404133                 jz      short near ptr loc_4041A5+4
.text:00404135
.text:00404135 loc_404135:                             ; CODE XREF: sub_4040F0+18↑j
.text:00404135                 outs    dx, byte ptr gs:[esi]
.text:00404137                 and     [edx+79h], ah
.text:0040413A
.text:0040413A loc_40413A:                             ; CODE XREF: sub_4040F0+20↑j
.text:0040413A                 and     ds:25202C73h, ah
.text:00404140                 jnb     short near ptr loc_40416A+4
.text:00404142                 and     ds:250A2C73h, ah
.text:00404148                 jnb     short near ptr loc_404175+1
.text:0040414A                 and     ds:25202C73h, ah
.text:00404150                 jnb     short near ptr loc_40417A+4
.text:00404152                 and     ds:250A2C73h, ah
.text:00404158                 jnb     short near ptr loc_404182+4
.text:0040415A
.text:0040415A loc_40415A:                             ; CODE XREF: sub_4040F0+1↑j
.text:0040415A                 and     [ecx+6Eh], ah
.text:0040415D                 and     fs:0A2E73h, ah
.text:00404164
.text:00404164 loc_404164:                             ; CODE XREF: sub_4040F0+3↑j
.text:00404164                 lea     esi, [esi+0]
.text:0040416A
.text:0040416A loc_40416A:                             ; CODE XREF: sub_404130+10↑j
.text:0040416A                 lea     edi, [edi+0]
.text:00404170
.text:00404170 loc_404170:                             ; DATA XREF: sub_4041C0:def_40422D↓o
.text:00404170                 push    edi
.text:00404171                 jb      short near ptr loc_4041DB+1
.text:00404173                 jz      short near ptr loc_4041E8+1
.text:00404175
.text:00404175 loc_404175:                             ; CODE XREF: sub_404130+18↑j
.text:00404175                 outs    dx, byte ptr gs:[esi]
.text:00404177                 and     [edx+79h], ah
.text:0040417A
.text:0040417A loc_40417A:                             ; CODE XREF: sub_404130+20↑j
.text:0040417A                 and     ds:25202C73h, ah
.text:00404180                 jnb     short near ptr loc_4041AC+2
.text:00404182
.text:00404182 loc_404182:                             ; CODE XREF: sub_404130+28↑j
.text:00404182                 and     ds:250A2C73h, ah
.text:00404188                 jnb     short near ptr loc_4041B3+3
.text:0040418A                 and     ds:25202C73h, ah
.text:00404190                 jnb     short near ptr loc_4041B9+5
.text:00404192                 and     ds:250A2C73h, ah
.text:00404198                 jnb     short near ptr loc_4041C4+2
.text:0040419A
.text:0040419A loc_40419A:                             ; CODE XREF: sub_404130+1↑j
.text:0040419A                 and     ds:61202C73h, ah
.text:004041A0                 outsb
.text:004041A1                 and     fs:[edi+74h], ch
.text:004041A5
.text:004041A5 loc_4041A5:                             ; CODE XREF: sub_404130+3↑j
.text:004041A5                 push    2E737265h
.text:004041AA                 or      al, [eax]
.text:004041AC
.text:004041AC loc_4041AC:                             ; CODE XREF: sub_404130+50↑j
.text:004041AC                                         ; DATA XREF: sub_4041C0+1B5↓o
.text:004041AC                 and     eax, 73252073h
.text:004041B1                 or      al, [eax]
.text:004041B3
.text:004041B3 loc_4041B3:                             ; CODE XREF: sub_404130+58↑j
.text:004041B3                 lea     esi, [esi+0]
.text:004041B9
.text:004041B9 loc_4041B9:                             ; CODE XREF: sub_404130+60↑j
.text:004041B9                 lea     edi, [edi+0]
.text:004041B9 sub_404130      endp ; sp-analysis failed
.text:004041B9
.text:004041C0
.text:004041C0 ; =============== S U B R O U T I N E =======================================
.text:004041C0
.text:004041C0
.text:004041C0 ; int __cdecl sub_4041C0(FILE *, FILE *, int, int, va_list)
.text:004041C0 sub_4041C0      proc near               ; CODE XREF: sub_402960+A5↑p
.text:004041C0                                         ; .text:004043BA↓p
.text:004041C0
.text:004041C0 Stream          = dword ptr -2Ch
.text:004041C0 Format          = dword ptr -28h
.text:004041C0 ArgList         = dword ptr -24h
.text:004041C0 var_20          = dword ptr -20h
.text:004041C0 var_1C          = dword ptr -1Ch
.text:004041C0 var_14          = dword ptr -14h
.text:004041C0 arg_0           = dword ptr  4
.text:004041C0 arg_4           = dword ptr  8
.text:004041C0 arg_8           = dword ptr  0Ch
.text:004041C0 arg_C           = dword ptr  10h
.text:004041C0 arg_10          = dword ptr  14h
.text:004041C0
.text:004041C0                 push    ebp
.text:004041C1                 push    edi
.text:004041C2                 push    esi
.text:004041C3                 push    ebx
.text:004041C4
.text:004041C4 loc_4041C4:                             ; CODE XREF: sub_404130+68↑j
.text:004041C4                 sub     esp, 1Ch
.text:004041C7                 xor     ebx, ebx
.text:004041C9                 mov     edi, [esp+2Ch+arg_10]
.text:004041CD                 mov     edx, [esp+2Ch+arg_8]
.text:004041D1                 mov     esi, [esp+2Ch+arg_0]
.text:004041D5                 mov     eax, [edi]
.text:004041D7                 mov     ecx, [esp+2Ch+arg_4]
.text:004041DB
.text:004041DB loc_4041DB:                             ; CODE XREF: sub_404130+41↑j
.text:004041DB                 mov     [esp+2Ch+var_14], edx
.text:004041DF                 mov     ebp, [esp+2Ch+arg_C]
.text:004041E3                 lea     edx, [edi+4]
.text:004041E6                 test    eax, eax
.text:004041E8
.text:004041E8 loc_4041E8:                             ; CODE XREF: sub_404130+43↑j
.text:004041E8                 jz      short loc_4041FC
.text:004041EA                 lea     esi, [esi+0]
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: sub_4041C0+3A↓j
.text:004041F0                 mov     eax, edx
.text:004041F2                 inc     ebx
.text:004041F3                 mov     eax, [eax]
.text:004041F5                 add     edx, 4
.text:004041F8                 test    eax, eax
.text:004041FA                 jnz     short loc_4041F0
.text:004041FC
.text:004041FC loc_4041FC:                             ; CODE XREF: sub_4041C0:loc_4041E8↑j
.text:004041FC                 test    ecx, ecx
.text:004041FE                 jz      loc_40436D
.text:00404204                 mov     [esp+2Ch+var_1C], ebp
.text:00404208                 mov     edx, [esp+2Ch+var_14]
.text:0040420C                 mov     [esp+2Ch+ArgList], ecx
.text:00404210                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00404218                 mov     [esp+2Ch+var_20], edx
.text:0040421C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040421F                 call    fprintf
.text:00404224
.text:00404224 loc_404224:                             ; CODE XREF: sub_4041C0+1C9↓j
.text:00404224                 cmp     ebx, 9          ; switch 10 cases
.text:00404227                 ja      def_40422D      ; jumptable 0040422D default case
.text:0040422D                 jmp     ds:jpt_40422D[ebx*4] ; switch jump
.text:0040422D ; ---------------------------------------------------------------------------
.text:00404234 jpt_40422D      dd offset loc_40425C    ; DATA XREF: sub_4041C0+6D↑r
.text:00404234                 dd offset loc_404261    ; jump table for switch statement
.text:00404234                 dd offset loc_404301
.text:00404234                 dd offset loc_40430D
.text:00404234                 dd offset loc_404319
.text:00404234                 dd offset loc_404325
.text:00404234                 dd offset loc_404331
.text:00404234                 dd offset loc_40433D
.text:00404234                 dd offset loc_404349
.text:00404234                 dd offset loc_404355
.text:0040425C ; ---------------------------------------------------------------------------
.text:0040425C
.text:0040425C loc_40425C:                             ; CODE XREF: sub_4041C0+6D↑j
.text:0040425C                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:0040425C                 call    abort           ; jumptable 0040422D case 0
.text:00404261 ; ---------------------------------------------------------------------------
.text:00404261
.text:00404261 loc_404261:                             ; CODE XREF: sub_4041C0+6D↑j
.text:00404261                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:00404261                 mov     [esp+2Ch+Stream], 403F0Eh ; jumptable 0040422D case 1
.text:00404268                 nop
.text:00404269                 lea     esi, [esi+0]
.text:00404270
.text:00404270 loc_404270:                             ; CODE XREF: sub_4041C0+148↓j
.text:00404270                                         ; sub_4041C0+154↓j ...
.text:00404270                 call    ds:libintl_gettext
.text:00404276                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040427A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040427D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404281                 call    vfprintf
.text:00404286                 mov     ebx, [esi+4]
.text:00404289                 dec     ebx
.text:0040428A                 test    ebx, ebx
.text:0040428C                 mov     [esi+4], ebx
.text:0040428F                 js      short loc_4042EF
.text:00404291                 mov     edi, [esi]
.text:00404293                 mov     byte ptr [edi], 0Ah
.text:00404296                 inc     dword ptr [esi]
.text:00404298
.text:00404298 loc_404298:                             ; CODE XREF: sub_4041C0+13F↓j
.text:00404298                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040429C                 mov     edx, Buffer
.text:004042A2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004042A5                 call    fputs
.text:004042AA                 mov     ebp, [esi+4]
.text:004042AD                 dec     ebp
.text:004042AE                 test    ebp, ebp
.text:004042B0                 mov     [esi+4], ebp
.text:004042B3                 js      short loc_4042DD
.text:004042B5                 mov     ecx, [esi]
.text:004042B7                 mov     byte ptr [ecx], 0Ah
.text:004042BA                 inc     dword ptr [esi]
.text:004042BC
.text:004042BC loc_4042BC:                             ; CODE XREF: sub_4041C0+12D↓j
.text:004042BC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004042C0                 mov     [esp+2Ch+Stream], offset sub_403F30
.text:004042C7                 call    ds:libintl_gettext
.text:004042CD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004042D1                 add     esp, 1Ch
.text:004042D4                 pop     ebx
.text:004042D5                 pop     esi
.text:004042D6                 pop     edi
.text:004042D7                 pop     ebp
.text:004042D8                 jmp     fputs
.text:004042DD ; ---------------------------------------------------------------------------
.text:004042DD
.text:004042DD loc_4042DD:                             ; CODE XREF: sub_4041C0+F3↑j
.text:004042DD                 mov     [esp+2Ch+Format], esi ; File
.text:004042E1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004042E8                 call    _flsbuf
.text:004042ED                 jmp     short loc_4042BC
.text:004042EF ; ---------------------------------------------------------------------------
.text:004042EF
.text:004042EF loc_4042EF:                             ; CODE XREF: sub_4041C0+CF↑j
.text:004042EF                 mov     [esp+2Ch+Format], esi ; File
.text:004042F3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004042FA                 call    _flsbuf
.text:004042FF                 jmp     short loc_404298
.text:00404301 ; ---------------------------------------------------------------------------
.text:00404301
.text:00404301 loc_404301:                             ; CODE XREF: sub_4041C0+6D↑j
.text:00404301                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:00404301                 mov     [esp+2Ch+Stream], offset loc_403FC8 ; jumptable 0040422D case 2
.text:00404308                 jmp     loc_404270
.text:0040430D ; ---------------------------------------------------------------------------
.text:0040430D
.text:0040430D loc_40430D:                             ; CODE XREF: sub_4041C0+6D↑j
.text:0040430D                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:0040430D                 mov     [esp+2Ch+Stream], offset loc_403FDF ; jumptable 0040422D case 3
.text:00404314                 jmp     loc_404270
.text:00404319 ; ---------------------------------------------------------------------------
.text:00404319
.text:00404319 loc_404319:                             ; CODE XREF: sub_4041C0+6D↑j
.text:00404319                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:00404319                 mov     [esp+2Ch+Stream], offset sub_404010 ; jumptable 0040422D case 4
.text:00404320                 jmp     loc_404270
.text:00404325 ; ---------------------------------------------------------------------------
.text:00404325
.text:00404325 loc_404325:                             ; CODE XREF: sub_4041C0+6D↑j
.text:00404325                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:00404325                 mov     [esp+2Ch+Stream], offset loc_404030 ; jumptable 0040422D case 5
.text:0040432C                 jmp     loc_404270
.text:00404331 ; ---------------------------------------------------------------------------
.text:00404331
.text:00404331 loc_404331:                             ; CODE XREF: sub_4041C0+6D↑j
.text:00404331                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:00404331                 mov     [esp+2Ch+Stream], offset sub_404070 ; jumptable 0040422D case 6
.text:00404338                 jmp     loc_404270
.text:0040433D ; ---------------------------------------------------------------------------
.text:0040433D
.text:0040433D loc_40433D:                             ; CODE XREF: sub_4041C0+6D↑j
.text:0040433D                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:0040433D                 mov     [esp+2Ch+Stream], offset sub_4040B0 ; jumptable 0040422D case 7
.text:00404344                 jmp     loc_404270
.text:00404349 ; ---------------------------------------------------------------------------
.text:00404349
.text:00404349 loc_404349:                             ; CODE XREF: sub_4041C0+6D↑j
.text:00404349                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:00404349                 mov     [esp+2Ch+Stream], offset sub_4040F0 ; jumptable 0040422D case 8
.text:00404350                 jmp     loc_404270
.text:00404355 ; ---------------------------------------------------------------------------
.text:00404355
.text:00404355 loc_404355:                             ; CODE XREF: sub_4041C0+6D↑j
.text:00404355                                         ; DATA XREF: sub_4041C0:jpt_40422D↑o
.text:00404355                 mov     [esp+2Ch+Stream], offset sub_404130 ; jumptable 0040422D case 9
.text:0040435C                 jmp     loc_404270
.text:00404361 ; ---------------------------------------------------------------------------
.text:00404361
.text:00404361 def_40422D:                             ; CODE XREF: sub_4041C0+67↑j
.text:00404361                 mov     [esp+2Ch+Stream], offset loc_404170 ; jumptable 0040422D default case
.text:00404368                 jmp     loc_404270
.text:0040436D ; ---------------------------------------------------------------------------
.text:0040436D
.text:0040436D loc_40436D:                             ; CODE XREF: sub_4041C0+3E↑j
.text:0040436D                 mov     [esp+2Ch+var_20], ebp
.text:00404371                 mov     ecx, [esp+2Ch+var_14]
.text:00404375                 mov     [esp+2Ch+Format], offset loc_4041AC ; Format
.text:0040437D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404380                 mov     [esp+2Ch+ArgList], ecx
.text:00404384                 call    fprintf
.text:00404389                 jmp     loc_404224
.text:00404389 sub_4041C0      endp
.text:00404389
.text:00404389 ; ---------------------------------------------------------------------------
.text:0040438E                 align 10h
.text:00404390                 sub     esp, 1Ch
.text:00404393                 mov     edx, [esp+2Ch]
.text:00404397                 lea     ecx, [esp+30h]
.text:0040439B                 mov     [esp+10h], ecx
.text:0040439F                 mov     ecx, [esp+28h]
.text:004043A3                 mov     [esp+0Ch], edx
.text:004043A7                 mov     edx, [esp+24h]
.text:004043AB                 mov     [esp+8], ecx
.text:004043AF                 mov     [esp+4], edx
.text:004043B3                 mov     edx, [esp+20h]
.text:004043B7                 mov     [esp], edx
.text:004043BA                 call    sub_4041C0
.text:004043BF                 add     esp, 1Ch
.text:004043C2                 retn
.text:004043C2 ; ---------------------------------------------------------------------------
.text:004043C3                 align 10h
.text:004043D0                 sub     esp, 0Ch
.text:004043D3                 xor     edx, edx
.text:004043D5                 mov     ecx, [esp+14h]
.text:004043D9                 mov     [esp+8], ebx
.text:004043DD                 mov     eax, 0FFFFFFFFh
.text:004043E2                 mov     ebx, [esp+10h]
.text:004043E6                 div     ecx
.text:004043E8                 cmp     eax, ebx
.text:004043EA                 jb      short loc_404409
.text:004043EC                 mov     edx, ebx
.text:004043EE                 imul    edx, ecx
.text:004043F1                 mov     [esp], edx
.text:004043F4                 call    malloc
.text:004043F9                 test    eax, eax
.text:004043FB                 jz      short loc_404405
.text:004043FD
.text:004043FD loc_4043FD:                             ; CODE XREF: .text:00404407↓j
.text:004043FD                 mov     ebx, [esp+8]
.text:00404401                 add     esp, 0Ch
.text:00404404                 retn
.text:00404405 ; ---------------------------------------------------------------------------
.text:00404405
.text:00404405 loc_404405:                             ; CODE XREF: .text:004043FB↑j
.text:00404405                 test    ebx, ebx
.text:00404407                 jz      short loc_4043FD
.text:00404409
.text:00404409 loc_404409:                             ; CODE XREF: .text:004043EA↑j
.text:00404409                 call    sub_4046C0
.text:00404409 ; ---------------------------------------------------------------------------
.text:0040440E                 align 10h
.text:00404410
.text:00404410 ; =============== S U B R O U T I N E =======================================
.text:00404410
.text:00404410
.text:00404410 ; int __cdecl sub_404410(size_t)
.text:00404410 sub_404410      proc near               ; CODE XREF: .text:00403639↑p
.text:00404410                                         ; .text:00403816↑p ...
.text:00404410
.text:00404410 Size            = dword ptr -0Ch
.text:00404410 var_4           = dword ptr -4
.text:00404410 arg_0           = dword ptr  4
.text:00404410
.text:00404410                 sub     esp, 0Ch
.text:00404413                 mov     [esp+0Ch+var_4], ebx
.text:00404417                 mov     ebx, [esp+0Ch+arg_0]
.text:0040441B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040441E                 call    malloc
.text:00404423                 test    eax, eax
.text:00404425                 jz      short loc_404430
.text:00404427
.text:00404427 loc_404427:                             ; CODE XREF: sub_404410+22↓j
.text:00404427                 mov     ebx, [esp+0Ch+var_4]
.text:0040442B                 add     esp, 0Ch
.text:0040442E                 retn
.text:0040442E ; ---------------------------------------------------------------------------
.text:0040442F                 align 10h
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: sub_404410+15↑j
.text:00404430                 test    ebx, ebx
.text:00404432                 jz      short loc_404427
.text:00404434                 call    sub_4046C0
.text:00404434 sub_404410      endp
.text:00404434
.text:00404434 ; ---------------------------------------------------------------------------
.text:00404439                 align 10h
.text:00404440                 sub     esp, 1Ch
.text:00404443                 xor     edx, edx
.text:00404445                 mov     eax, 0FFFFFFFFh
.text:0040444A                 mov     [esp+14h], ebx
.text:0040444E                 mov     ecx, [esp+20h]
.text:00404452                 mov     ebx, [esp+28h]
.text:00404456                 mov     [esp+18h], esi
.text:0040445A                 mov     esi, [esp+24h]
.text:0040445E                 div     ebx
.text:00404460                 cmp     eax, esi
.text:00404462                 jb      short loc_404494
.text:00404464                 mov     [esp], ecx
.text:00404467                 mov     edx, esi
.text:00404469                 imul    edx, ebx
.text:0040446C                 mov     [esp+4], edx
.text:00404470                 call    realloc
.text:00404475                 test    eax, eax
.text:00404477                 mov     ecx, eax
.text:00404479                 jz      short loc_404490
.text:0040447B
.text:0040447B loc_40447B:                             ; CODE XREF: .text:00404492↓j
.text:0040447B                 mov     ebx, [esp+14h]
.text:0040447F                 mov     eax, ecx
.text:00404481                 mov     esi, [esp+18h]
.text:00404485                 add     esp, 1Ch
.text:00404488                 retn
.text:00404488 ; ---------------------------------------------------------------------------
.text:00404489                 align 10h
.text:00404490
.text:00404490 loc_404490:                             ; CODE XREF: .text:00404479↑j
.text:00404490                 test    esi, esi
.text:00404492                 jz      short loc_40447B
.text:00404494
.text:00404494 loc_404494:                             ; CODE XREF: .text:00404462↑j
.text:00404494                 call    sub_4046C0
.text:00404494 ; ---------------------------------------------------------------------------
.text:00404499                 align 10h
.text:004044A0
.text:004044A0 ; =============== S U B R O U T I N E =======================================
.text:004044A0
.text:004044A0
.text:004044A0 ; int __cdecl sub_4044A0(void *, size_t)
.text:004044A0 sub_4044A0      proc near               ; CODE XREF: sub_403D00+5B↑p
.text:004044A0
.text:004044A0 Block           = dword ptr -0Ch
.text:004044A0 Size            = dword ptr -8
.text:004044A0 var_4           = dword ptr -4
.text:004044A0 arg_0           = dword ptr  4
.text:004044A0 arg_4           = dword ptr  8
.text:004044A0
.text:004044A0                 sub     esp, 0Ch
.text:004044A3                 mov     edx, [esp+0Ch+arg_0]
.text:004044A7                 mov     [esp+0Ch+var_4], ebx
.text:004044AB                 mov     ebx, [esp+0Ch+arg_4]
.text:004044AF                 mov     [esp+0Ch+Block], edx ; Block
.text:004044B2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004044B6                 call    realloc
.text:004044BB                 test    eax, eax
.text:004044BD                 jz      short loc_4044C7
.text:004044BF
.text:004044BF loc_4044BF:                             ; CODE XREF: sub_4044A0+29↓j
.text:004044BF                 mov     ebx, [esp+0Ch+var_4]
.text:004044C3                 add     esp, 0Ch
.text:004044C6                 retn
.text:004044C7 ; ---------------------------------------------------------------------------
.text:004044C7
.text:004044C7 loc_4044C7:                             ; CODE XREF: sub_4044A0+1D↑j
.text:004044C7                 test    ebx, ebx
.text:004044C9                 jz      short loc_4044BF
.text:004044CB                 call    sub_4046C0
.text:004044CB sub_4044A0      endp
.text:004044CB
.text:004044D0 ; ---------------------------------------------------------------------------
.text:004044D0                 jmp     sub_404620
.text:004044D0 ; ---------------------------------------------------------------------------
.text:004044D5                 align 10h
.text:004044E0                 sub     esp, 0Ch
.text:004044E3                 mov     edx, [esp+14h]
.text:004044E7                 mov     dword ptr [esp+8], 1
.text:004044EF                 mov     [esp+4], edx
.text:004044F3                 mov     edx, [esp+10h]
.text:004044F7                 mov     [esp], edx
.text:004044FA                 call    sub_404620
.text:004044FF                 add     esp, 0Ch
.text:00404502                 retn
.text:00404502 ; ---------------------------------------------------------------------------
.text:00404503                 align 10h
.text:00404510                 sub     esp, 1Ch
.text:00404513                 mov     [esp+18h], ebx
.text:00404517                 mov     ebx, [esp+20h]
.text:0040451B                 mov     [esp], ebx
.text:0040451E                 call    malloc
.text:00404523                 test    eax, eax
.text:00404525                 jz      short loc_404543
.text:00404527
.text:00404527 loc_404527:                             ; CODE XREF: .text:00404545↓j
.text:00404527                 mov     [esp+8], ebx
.text:0040452B                 mov     dword ptr [esp+4], 0
.text:00404533                 mov     [esp], eax
.text:00404536                 call    memset
.text:0040453B                 mov     ebx, [esp+18h]
.text:0040453F                 add     esp, 1Ch
.text:00404542                 retn
.text:00404543 ; ---------------------------------------------------------------------------
.text:00404543
.text:00404543 loc_404543:                             ; CODE XREF: .text:00404525↑j
.text:00404543                 test    ebx, ebx
.text:00404545                 jz      short loc_404527
.text:00404547                 call    sub_4046C0
.text:00404547 ; ---------------------------------------------------------------------------
.text:0040454C                 align 10h
.text:00404550                 sub     esp, 0Ch
.text:00404553                 xor     edx, edx
.text:00404555                 mov     ecx, [esp+14h]
.text:00404559                 mov     [esp+8], ebx
.text:0040455D                 mov     eax, 0FFFFFFFFh
.text:00404562                 mov     ebx, [esp+10h]
.text:00404566                 div     ecx
.text:00404568                 cmp     eax, ebx
.text:0040456A                 jb      short loc_404588
.text:0040456C                 mov     [esp+4], ecx
.text:00404570                 mov     [esp], ebx
.text:00404573                 call    calloc
.text:00404578                 test    eax, eax
.text:0040457A                 jz      short loc_404584
.text:0040457C
.text:0040457C loc_40457C:                             ; CODE XREF: .text:00404586↓j
.text:0040457C                 mov     ebx, [esp+8]
.text:00404580                 add     esp, 0Ch
.text:00404583                 retn
.text:00404584 ; ---------------------------------------------------------------------------
.text:00404584
.text:00404584 loc_404584:                             ; CODE XREF: .text:0040457A↑j
.text:00404584                 test    ebx, ebx
.text:00404586                 jz      short loc_40457C
.text:00404588
.text:00404588 loc_404588:                             ; CODE XREF: .text:0040456A↑j
.text:00404588                 call    sub_4046C0
.text:00404588 ; ---------------------------------------------------------------------------
.text:0040458D                 align 10h
.text:00404590                 sub     esp, 1Ch
.text:00404593                 mov     [esp+18h], ebx
.text:00404597                 mov     ebx, [esp+24h]
.text:0040459B                 mov     [esp], ebx
.text:0040459E                 call    malloc
.text:004045A3                 test    eax, eax
.text:004045A5                 mov     edx, eax
.text:004045A7                 jz      short loc_4045C5
.text:004045A9
.text:004045A9 loc_4045A9:                             ; CODE XREF: .text:004045C7↓j
.text:004045A9                 mov     [esp+8], ebx
.text:004045AD                 mov     ecx, [esp+20h]
.text:004045B1                 mov     [esp], edx
.text:004045B4                 mov     [esp+4], ecx
.text:004045B8                 call    memcpy
.text:004045BD                 mov     ebx, [esp+18h]
.text:004045C1                 add     esp, 1Ch
.text:004045C4                 retn
.text:004045C5 ; ---------------------------------------------------------------------------
.text:004045C5
.text:004045C5 loc_4045C5:                             ; CODE XREF: .text:004045A7↑j
.text:004045C5                 test    ebx, ebx
.text:004045C7                 jz      short loc_4045A9
.text:004045C9                 call    sub_4046C0
.text:004045C9 ; ---------------------------------------------------------------------------
.text:004045CE                 align 10h
.text:004045D0                 sub     esp, 1Ch
.text:004045D3                 mov     [esp+18h], esi
.text:004045D7                 mov     esi, [esp+20h]
.text:004045DB                 mov     [esp+14h], ebx
.text:004045DF                 mov     [esp], esi
.text:004045E2                 call    strlen
.text:004045E7                 lea     ebx, [eax+1]
.text:004045EA                 mov     [esp], ebx
.text:004045ED                 call    malloc
.text:004045F2                 test    eax, eax
.text:004045F4                 jz      short loc_404612
.text:004045F6
.text:004045F6 loc_4045F6:                             ; CODE XREF: .text:00404614↓j
.text:004045F6                 mov     [esp+8], ebx
.text:004045FA                 mov     [esp+4], esi
.text:004045FE                 mov     [esp], eax
.text:00404601                 call    memcpy
.text:00404606                 mov     ebx, [esp+14h]
.text:0040460A                 mov     esi, [esp+18h]
.text:0040460E                 add     esp, 1Ch
.text:00404611                 retn
.text:00404612 ; ---------------------------------------------------------------------------
.text:00404612
.text:00404612 loc_404612:                             ; CODE XREF: .text:004045F4↑j
.text:00404612                 test    ebx, ebx
.text:00404614                 jz      short loc_4045F6
.text:00404616                 call    sub_4046C0
.text:00404616 ; ---------------------------------------------------------------------------
.text:0040461B                 align 10h
.text:00404620
.text:00404620 ; =============== S U B R O U T I N E =======================================
.text:00404620
.text:00404620
.text:00404620 ; int __cdecl sub_404620(void *, int, int)
.text:00404620 sub_404620      proc near               ; CODE XREF: .text:004044D0↑j
.text:00404620                                         ; .text:004044FA↑p
.text:00404620
.text:00404620 Block           = dword ptr -1Ch
.text:00404620 Size            = dword ptr -18h
.text:00404620 var_C           = dword ptr -0Ch
.text:00404620 var_8           = dword ptr -8
.text:00404620 var_4           = dword ptr -4
.text:00404620 arg_0           = dword ptr  4
.text:00404620 arg_4           = dword ptr  8
.text:00404620 arg_8           = dword ptr  0Ch
.text:00404620
.text:00404620                 sub     esp, 1Ch
.text:00404623                 mov     [esp+1Ch+var_8], esi
.text:00404627                 mov     esi, [esp+1Ch+arg_0]
.text:0040462B                 mov     [esp+1Ch+var_4], edi
.text:0040462F                 mov     edi, [esp+1Ch+arg_4]
.text:00404633                 test    esi, esi
.text:00404635                 mov     [esp+1Ch+var_C], ebx
.text:00404639                 mov     ecx, [edi]
.text:0040463B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040463F                 jz      short loc_404680
.text:00404641                 xor     edx, edx
.text:00404643                 mov     eax, 7FFFFFFFh
.text:00404648                 div     ebx
.text:0040464A                 cmp     eax, ecx
.text:0040464C                 jb      short loc_404679
.text:0040464E                 add     ecx, ecx
.text:00404650
.text:00404650 loc_404650:                             ; CODE XREF: sub_404620+62↓j
.text:00404650                                         ; sub_404620+71↓j ...
.text:00404650                 mov     [edi], ecx
.text:00404652                 imul    ebx, ecx
.text:00404655                 mov     [esp+1Ch+Block], esi ; Block
.text:00404658                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040465C                 call    realloc
.text:00404661                 test    eax, eax
.text:00404663                 jz      short loc_404675
.text:00404665
.text:00404665 loc_404665:                             ; CODE XREF: sub_404620+57↓j
.text:00404665                 mov     ebx, [esp+1Ch+var_C]
.text:00404669                 mov     esi, [esp+1Ch+var_8]
.text:0040466D                 mov     edi, [esp+1Ch+var_4]
.text:00404671                 add     esp, 1Ch
.text:00404674                 retn
.text:00404675 ; ---------------------------------------------------------------------------
.text:00404675
.text:00404675 loc_404675:                             ; CODE XREF: sub_404620+43↑j
.text:00404675                 test    ebx, ebx
.text:00404677                 jz      short loc_404665
.text:00404679
.text:00404679 loc_404679:                             ; CODE XREF: sub_404620+2C↑j
.text:00404679                 call    sub_4046C0
.text:00404679 ; ---------------------------------------------------------------------------
.text:0040467E                 align 10h
.text:00404680
.text:00404680 loc_404680:                             ; CODE XREF: sub_404620+1F↑j
.text:00404680                 test    ecx, ecx
.text:00404682                 jnz     short loc_404650
.text:00404684                 xor     edx, edx
.text:00404686                 mov     eax, 40h ; '@'
.text:0040468B                 div     ebx
.text:0040468D                 test    eax, eax
.text:0040468F                 mov     ecx, eax
.text:00404691                 jnz     short loc_404650
.text:00404693                 mov     ecx, 1
.text:00404698                 jmp     short loc_404650
.text:00404698 sub_404620      endp
.text:00404698
.text:00404698 ; ---------------------------------------------------------------------------
.text:0040469A                 align 10h
.text:004046A0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4046C0+3↓o
.text:004046B1 ; const char aS[]
.text:004046B1 aS              db '%s',0               ; DATA XREF: sub_4046C0+10↓o
.text:004046B4                 align 10h
.text:004046C0
.text:004046C0 ; =============== S U B R O U T I N E =======================================
.text:004046C0
.text:004046C0 ; Attributes: noreturn
.text:004046C0
.text:004046C0 sub_4046C0      proc near               ; CODE XREF: sub_403D00:loc_403EBF↑p
.text:004046C0                                         ; .text:loc_404409↑p ...
.text:004046C0
.text:004046C0 Code            = dword ptr -1Ch
.text:004046C0 ErrorMessage    = dword ptr -18h
.text:004046C0 var_14          = dword ptr -14h
.text:004046C0 var_10          = byte ptr -10h
.text:004046C0
.text:004046C0                 sub     esp, 1Ch
.text:004046C3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004046CA                 call    ds:libintl_gettext
.text:004046D0                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:004046D8                 mov     edx, Code
.text:004046DE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004046E6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004046EA                 mov     [esp+1Ch+Code], edx ; Code
.text:004046ED                 call    sub_404750
.text:004046F2                 call    abort
.text:004046F2 sub_4046C0      endp
.text:004046F2
.text:004046F2 ; ---------------------------------------------------------------------------
.text:004046F7                 align 10h
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700 ; Attributes: thunk
.text:00404700
.text:00404700 libintl_bindtextdomain proc near
.text:00404700                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404700 libintl_bindtextdomain endp
.text:00404700
.text:00404700 ; ---------------------------------------------------------------------------
.text:00404706                 align 10h
.text:00404710                 jmp     ds:libintl_textdomain
.text:00404710 ; ---------------------------------------------------------------------------
.text:00404716                 align 10h
.text:00404720                 jmp     ds:libintl_gettext
.text:00404720 ; ---------------------------------------------------------------------------
.text:00404726                 align 10h
.text:00404730 ; const char aS_0[]
.text:00404730 aS_0            db ': %s',0             ; DATA XREF: sub_404750+B8↓o
.text:00404730                                         ; sub_404854+122↓o
.text:00404735 aUnknownSystemE db 'Unknown system error',0
.text:00404735                                         ; DATA XREF: sub_404750:loc_40481D↓o
.text:00404735                                         ; sub_404854:loc_40498E↓o
.text:0040474A ; const char aS_1[]
.text:0040474A aS_1            db '%s: ',0             ; DATA XREF: sub_404750:loc_404824↓o
.text:0040474F                 align 10h
.text:00404750
.text:00404750 ; =============== S U B R O U T I N E =======================================
.text:00404750
.text:00404750
.text:00404750 ; int __cdecl sub_404750(int Code, int ErrorMessage, char *, char)
.text:00404750 sub_404750      proc near               ; CODE XREF: sub_401370+16A↑p
.text:00404750                                         ; sub_402A50+86↑p ...
.text:00404750
.text:00404750 Stream          = dword ptr -1Ch
.text:00404750 Format          = dword ptr -18h
.text:00404750 ArgList         = dword ptr -14h
.text:00404750 Code            = dword ptr  4
.text:00404750 ErrorMessage    = dword ptr  8
.text:00404750 arg_8           = dword ptr  0Ch
.text:00404750 arg_C           = byte ptr  10h
.text:00404750
.text:00404750                 push    esi
.text:00404751                 push    ebx
.text:00404752                 sub     esp, 14h
.text:00404755                 mov     edx, ds:_iob
.text:0040475B                 mov     esi, [esp+1Ch+Code]
.text:0040475F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404763                 add     edx, 20h ; ' '
.text:00404766                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404769                 call    fflush
.text:0040476E                 mov     eax, ds:dword_4076F0
.text:00404773                 test    eax, eax
.text:00404775                 jz      loc_404824
.text:0040477B                 call    eax ; dword_4076F0
.text:0040477D
.text:0040477D loc_40477D:                             ; CODE XREF: sub_404750+F7↓j
.text:0040477D                 lea     edx, [esp+1Ch+arg_C]
.text:00404781                 mov     ecx, [esp+1Ch+arg_8]
.text:00404785                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404789                 mov     edx, ds:_iob
.text:0040478F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404793                 add     edx, 40h ; '@'
.text:00404796                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404799                 call    vfprintf
.text:0040479E                 inc     ds:dword_407700
.text:004047A4                 test    ebx, ebx
.text:004047A6                 jnz     short loc_4047F2
.text:004047A8
.text:004047A8 loc_4047A8:                             ; CODE XREF: sub_404750+CB↓j
.text:004047A8                 mov     edx, ds:_iob
.text:004047AE                 lea     ecx, [edx+40h]
.text:004047B1                 mov     ebx, [ecx+4]
.text:004047B4                 dec     ebx
.text:004047B5                 test    ebx, ebx
.text:004047B7                 mov     [ecx+4], ebx
.text:004047BA                 js      short loc_4047E0
.text:004047BC                 mov     ecx, [edx+40h]
.text:004047BF                 mov     byte ptr [ecx], 0Ah
.text:004047C2                 inc     dword ptr [edx+40h]
.text:004047C5
.text:004047C5 loc_4047C5:                             ; CODE XREF: sub_404750+A0↓j
.text:004047C5                 mov     edx, ds:_iob
.text:004047CB                 add     edx, 40h ; '@'
.text:004047CE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004047D1                 call    fflush
.text:004047D6                 test    esi, esi
.text:004047D8                 jnz     short loc_40484C
.text:004047DA                 add     esp, 14h
.text:004047DD                 pop     ebx
.text:004047DE                 pop     esi
.text:004047DF                 retn
.text:004047E0 ; ---------------------------------------------------------------------------
.text:004047E0
.text:004047E0 loc_4047E0:                             ; CODE XREF: sub_404750+6A↑j
.text:004047E0                 mov     [esp+1Ch+Format], ecx ; File
.text:004047E4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004047EB                 call    _flsbuf
.text:004047F0                 jmp     short loc_4047C5
.text:004047F2 ; ---------------------------------------------------------------------------
.text:004047F2
.text:004047F2 loc_4047F2:                             ; CODE XREF: sub_404750+56↑j
.text:004047F2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004047F5                 call    strerror
.text:004047FA                 test    eax, eax
.text:004047FC                 jz      short loc_40481D
.text:004047FE
.text:004047FE loc_4047FE:                             ; CODE XREF: sub_404750+D2↓j
.text:004047FE                 mov     [esp+1Ch+ArgList], eax
.text:00404802                 mov     ebx, ds:_iob
.text:00404808                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00404810                 add     ebx, 40h ; '@'
.text:00404813                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404816                 call    fprintf
.text:0040481B                 jmp     short loc_4047A8
.text:0040481D ; ---------------------------------------------------------------------------
.text:0040481D
.text:0040481D loc_40481D:                             ; CODE XREF: sub_404750+AC↑j
.text:0040481D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404822                 jmp     short loc_4047FE
.text:00404824 ; ---------------------------------------------------------------------------
.text:00404824
.text:00404824 loc_404824:                             ; CODE XREF: sub_404750+25↑j
.text:00404824                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040482C                 mov     edx, ds:_iob
.text:00404832                 mov     ecx, ds:dword_4076C0
.text:00404838                 add     edx, 40h ; '@'
.text:0040483B                 mov     [esp+1Ch+ArgList], ecx
.text:0040483F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404842                 call    fprintf
.text:00404847                 jmp     loc_40477D
.text:0040484C ; ---------------------------------------------------------------------------
.text:0040484C
.text:0040484C loc_40484C:                             ; CODE XREF: sub_404750+88↑j
.text:0040484C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040484F                 call    exit
.text:0040484F sub_404750      endp
.text:0040484F
.text:00404854
.text:00404854 ; =============== S U B R O U T I N E =======================================
.text:00404854
.text:00404854
.text:00404854 ; int __cdecl sub_404854(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404854 sub_404854      proc near               ; DATA XREF: sub_404854+77↓o
.text:00404854
.text:00404854 Stream          = dword ptr -28h
.text:00404854 Format          = dword ptr -24h
.text:00404854 ArgList         = dword ptr -20h
.text:00404854 var_1C          = dword ptr -1Ch
.text:00404854 Code            = dword ptr  8
.text:00404854 ErrorMessage    = dword ptr  0Ch
.text:00404854 Str2            = dword ptr  10h
.text:00404854 arg_10          = dword ptr  14h
.text:00404854 arg_14          = dword ptr  18h
.text:00404854 arg_18          = byte ptr  1Ch
.text:00404854
.text:00404854                 and     eax, 64253A73h
.text:00404859                 cmp     ah, [eax]
.text:0040485B
.text:0040485B loc_40485B:                             ; DATA XREF: sub_404854:loc_404995↓o
.text:0040485B                 add     ds:55003A73h, ah
.text:00404861                 push    edi
.text:00404862                 push    esi
.text:00404863                 push    ebx
.text:00404864                 sub     esp, 1Ch
.text:00404867                 mov     edx, ds:dword_407730
.text:0040486D                 mov     ebp, [esp+28h+Code]
.text:00404871                 mov     edi, [esp+28h+ErrorMessage]
.text:00404875                 test    edx, edx
.text:00404877                 mov     ebx, [esp+28h+Str2]
.text:0040487B                 mov     esi, [esp+28h+arg_10]
.text:0040487F                 jz      short loc_404899
.text:00404881                 cmp     ds:dword_407180, esi
.text:00404887                 jz      loc_4049C0
.text:0040488D
.text:0040488D loc_40488D:                             ; CODE XREF: sub_404854+18D↓j
.text:0040488D                 mov     ds:Str1, ebx
.text:00404893                 mov     ds:dword_407180, esi
.text:00404899
.text:00404899 loc_404899:                             ; CODE XREF: sub_404854+2B↑j
.text:00404899                 mov     edx, ds:_iob
.text:0040489F                 add     edx, 20h ; ' '
.text:004048A2                 mov     [esp+28h+Stream], edx ; Stream
.text:004048A5                 call    fflush
.text:004048AA                 mov     eax, ds:dword_4076F0
.text:004048AF                 test    eax, eax
.text:004048B1                 jz      loc_404995
.text:004048B7                 call    eax ; dword_4076F0
.text:004048B9
.text:004048B9 loc_4048B9:                             ; CODE XREF: sub_404854+164↓j
.text:004048B9                 test    ebx, ebx
.text:004048BB                 jz      short loc_4048DE
.text:004048BD                 mov     [esp+28h+ArgList], ebx
.text:004048C1                 mov     ebx, ds:_iob
.text:004048C7                 mov     [esp+28h+var_1C], esi
.text:004048CB                 mov     [esp+28h+Format], offset sub_404854 ; Format
.text:004048D3                 add     ebx, 40h ; '@'
.text:004048D6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004048D9                 call    fprintf
.text:004048DE
.text:004048DE loc_4048DE:                             ; CODE XREF: sub_404854+67↑j
.text:004048DE                 mov     esi, ds:_iob
.text:004048E4                 lea     edx, [esp+28h+arg_18]
.text:004048E8                 mov     ecx, [esp+28h+arg_14]
.text:004048EC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004048F0                 add     esi, 40h ; '@'
.text:004048F3                 mov     [esp+28h+Format], ecx ; Format
.text:004048F7                 mov     [esp+28h+Stream], esi ; Stream
.text:004048FA                 call    vfprintf
.text:004048FF                 inc     ds:dword_407700
.text:00404905                 test    edi, edi
.text:00404907                 jnz     short loc_404960
.text:00404909
.text:00404909 loc_404909:                             ; CODE XREF: sub_404854+135↓j
.text:00404909                 mov     edx, ds:_iob
.text:0040490F                 lea     ecx, [edx+40h]
.text:00404912                 mov     ebx, [ecx+4]
.text:00404915                 dec     ebx
.text:00404916                 test    ebx, ebx
.text:00404918                 mov     [ecx+4], ebx
.text:0040491B                 js      short loc_404947
.text:0040491D                 mov     esi, [edx+40h]
.text:00404920                 mov     byte ptr [esi], 0Ah
.text:00404923                 inc     dword ptr [edx+40h]
.text:00404926
.text:00404926 loc_404926:                             ; CODE XREF: sub_404854+103↓j
.text:00404926                 mov     ecx, ds:_iob
.text:0040492C                 add     ecx, 40h ; '@'
.text:0040492F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404932                 call    fflush
.text:00404937                 test    ebp, ebp
.text:00404939                 jnz     loc_4049E6
.text:0040493F
.text:0040493F loc_40493F:                             ; CODE XREF: sub_404854+173↓j
.text:0040493F                                         ; sub_404854+187↓j
.text:0040493F                 add     esp, 1Ch
.text:00404942                 pop     ebx
.text:00404943                 pop     esi
.text:00404944                 pop     edi
.text:00404945                 pop     ebp
.text:00404946                 retn
.text:00404947 ; ---------------------------------------------------------------------------
.text:00404947
.text:00404947 loc_404947:                             ; CODE XREF: sub_404854+C7↑j
.text:00404947                 mov     [esp+28h+Format], ecx ; File
.text:0040494B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404952                 call    _flsbuf
.text:00404957                 jmp     short loc_404926
.text:00404957 ; ---------------------------------------------------------------------------
.text:00404959                 align 10h
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_404854+B3↑j
.text:00404960                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404963                 call    strerror
.text:00404968                 test    eax, eax
.text:0040496A                 jz      short loc_40498E
.text:0040496C
.text:0040496C loc_40496C:                             ; CODE XREF: sub_404854+13F↓j
.text:0040496C                 mov     [esp+28h+ArgList], eax
.text:00404970                 mov     edi, ds:_iob
.text:00404976                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040497E                 add     edi, 40h ; '@'
.text:00404981                 mov     [esp+28h+Stream], edi ; Stream
.text:00404984                 call    fprintf
.text:00404989                 jmp     loc_404909
.text:0040498E ; ---------------------------------------------------------------------------
.text:0040498E
.text:0040498E loc_40498E:                             ; CODE XREF: sub_404854+116↑j
.text:0040498E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404993                 jmp     short loc_40496C
.text:00404995 ; ---------------------------------------------------------------------------
.text:00404995
.text:00404995 loc_404995:                             ; CODE XREF: sub_404854+5D↑j
.text:00404995                 mov     [esp+28h+Format], (offset loc_40485B+1) ; Format
.text:0040499D                 mov     ecx, ds:_iob
.text:004049A3                 mov     edx, ds:dword_4076C0
.text:004049A9                 add     ecx, 40h ; '@'
.text:004049AC                 mov     [esp+28h+ArgList], edx
.text:004049B0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004049B3                 call    fprintf
.text:004049B8                 jmp     loc_4048B9
.text:004049B8 ; ---------------------------------------------------------------------------
.text:004049BD                 align 10h
.text:004049C0
.text:004049C0 loc_4049C0:                             ; CODE XREF: sub_404854+33↑j
.text:004049C0                 mov     eax, ds:Str1
.text:004049C5                 cmp     ebx, eax
.text:004049C7                 jz      loc_40493F
.text:004049CD                 mov     [esp+28h+Format], ebx ; Str2
.text:004049D1                 mov     [esp+28h+Stream], eax ; Str1
.text:004049D4                 call    strcmp
.text:004049D9                 test    eax, eax
.text:004049DB                 jz      loc_40493F
.text:004049E1                 jmp     loc_40488D
.text:004049E6 ; ---------------------------------------------------------------------------
.text:004049E6
.text:004049E6 loc_4049E6:                             ; CODE XREF: sub_404854+E5↑j
.text:004049E6                 mov     [esp+28h+Stream], ebp ; Code
.text:004049E9                 call    exit
.text:004049E9 sub_404854      endp ; sp-analysis failed
.text:004049E9
.text:004049E9 ; ---------------------------------------------------------------------------
.text:004049EE                 align 10h
.text:004049F0
.text:004049F0 ; =============== S U B R O U T I N E =======================================
.text:004049F0
.text:004049F0
.text:004049F0 sub_4049F0      proc near               ; CODE XREF: sub_401370+E1↑p
.text:004049F0
.text:004049F0 var_1C          = dword ptr -1Ch
.text:004049F0 var_18          = dword ptr -18h
.text:004049F0 var_14          = dword ptr -14h
.text:004049F0 var_10          = dword ptr -10h
.text:004049F0 var_C           = dword ptr -0Ch
.text:004049F0 var_4           = dword ptr -4
.text:004049F0 arg_0           = dword ptr  4
.text:004049F0
.text:004049F0                 sub     esp, 1Ch
.text:004049F3                 mov     ecx, [esp+1Ch+arg_0]
.text:004049F7                 lea     edx, [esp+1Ch+var_4]
.text:004049FB                 mov     [esp+1Ch+var_C], edx ; int
.text:004049FF                 mov     [esp+1Ch+var_10], 400h ; int
.text:00404A07                 mov     [esp+1Ch+var_1C], ecx ; int
.text:00404A0A                 mov     [esp+1Ch+var_14], offset byte_4071B0 ; char *
.text:00404A12                 mov     [esp+1Ch+var_18], offset unk_407190 ; int
.text:00404A1A                 call    sub_404A50
.text:00404A1F                 test    eax, eax
.text:00404A21                 mov     ecx, [esp+1Ch+var_4]
.text:00404A25                 setnz   dl
.text:00404A28                 add     esp, 1Ch
.text:00404A2B                 movzx   eax, dl
.text:00404A2E                 dec     eax
.text:00404A2F                 and     eax, ecx
.text:00404A31                 retn
.text:00404A31 sub_4049F0      endp
.text:00404A31
.text:00404A31 ; ---------------------------------------------------------------------------
.text:00404A32                 align 10h
.text:00404A40
.text:00404A40 ; =============== S U B R O U T I N E =======================================
.text:00404A40
.text:00404A40
.text:00404A40 sub_404A40      proc near               ; CODE XREF: sub_401370+D7↑p
.text:00404A40                 xor     eax, eax
.text:00404A42                 retn
.text:00404A42 sub_404A40      endp
.text:00404A42
.text:00404A42 ; ---------------------------------------------------------------------------
.text:00404A43                 align 10h
.text:00404A50
.text:00404A50 ; =============== S U B R O U T I N E =======================================
.text:00404A50
.text:00404A50
.text:00404A50 ; int __cdecl sub_404A50(int, int, char *, int, int)
.text:00404A50 sub_404A50      proc near               ; CODE XREF: sub_4049F0+2A↑p
.text:00404A50
.text:00404A50 var_1C          = dword ptr -1Ch
.text:00404A50 var_18          = dword ptr -18h
.text:00404A50 var_14          = dword ptr -14h
.text:00404A50 var_10          = dword ptr -10h
.text:00404A50 var_C           = dword ptr -0Ch
.text:00404A50 var_4           = dword ptr -4
.text:00404A50 arg_0           = dword ptr  4
.text:00404A50 arg_4           = dword ptr  8
.text:00404A50 arg_8           = dword ptr  0Ch
.text:00404A50 arg_C           = dword ptr  10h
.text:00404A50 arg_10          = dword ptr  14h
.text:00404A50
.text:00404A50                 sub     esp, 1Ch
.text:00404A53                 mov     [esp+1Ch+var_4], ebx
.text:00404A57                 mov     ebx, [esp+1Ch+arg_4]
.text:00404A5B                 call    sub_404CB0
.text:00404A60                 mov     [esp+1Ch+var_1C], eax ; char *
.text:00404A63                 mov     ecx, [esp+1Ch+arg_10]
.text:00404A67                 mov     [esp+1Ch+var_18], ebx ; int
.text:00404A6B                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404A6F                 mov     ecx, [esp+1Ch+arg_C]
.text:00404A73                 mov     [esp+1Ch+var_10], ecx ; int
.text:00404A77                 mov     ecx, [esp+1Ch+arg_8]
.text:00404A7B                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404A7F                 call    sub_404AC0
.text:00404A84                 mov     ecx, [esp+1Ch+arg_0]
.text:00404A88                 mov     [ebx+8], ecx
.text:00404A8B                 mov     ebx, [esp+1Ch+var_4]
.text:00404A8F                 add     esp, 1Ch
.text:00404A92                 retn
.text:00404A92 sub_404A50      endp
.text:00404A92
.text:00404A92 ; ---------------------------------------------------------------------------
.text:00404A93                 align 10h
.text:00404AA0 byte_404AA0     db 0                    ; DATA XREF: .data:Src↓o
.text:00404AA1 byte_404AA1     db 73h, 68h, 0          ; DATA XREF: .data:off_406054↓o
.text:00404AA4 ; const char aHome[]
.text:00404AA4 aHome           db 'HOME',0             ; DATA XREF: sub_404AC0+96↓o
.text:00404AA9 ; const char aShell[]
.text:00404AA9 aShell          db 'SHELL',0            ; DATA XREF: sub_404AC0+E2↓o
.text:00404AAF ; const char aComspec[]
.text:00404AAF aComspec        db 'COMSPEC',0          ; DATA XREF: sub_404AC0:loc_404C84↓o
.text:00404AB7 aC              db 'C:/',0              ; DATA XREF: sub_404AC0:loc_404CA5↓o
.text:00404ABB                 align 10h
.text:00404AC0
.text:00404AC0 ; =============== S U B R O U T I N E =======================================
.text:00404AC0
.text:00404AC0
.text:00404AC0 ; int __cdecl sub_404AC0(char *, int, char *, int, int)
.text:00404AC0 sub_404AC0      proc near               ; CODE XREF: sub_404A50+2F↑p
.text:00404AC0
.text:00404AC0 Str             = dword ptr -1Ch
.text:00404AC0 Src             = dword ptr -18h
.text:00404AC0 Size            = dword ptr -14h
.text:00404AC0 var_10          = dword ptr -10h
.text:00404AC0 var_C           = dword ptr -0Ch
.text:00404AC0 var_8           = dword ptr -8
.text:00404AC0 var_4           = dword ptr -4
.text:00404AC0 arg_0           = dword ptr  4
.text:00404AC0 arg_4           = dword ptr  8
.text:00404AC0 arg_8           = dword ptr  0Ch
.text:00404AC0 arg_C           = dword ptr  10h
.text:00404AC0 arg_10          = dword ptr  14h
.text:00404AC0
.text:00404AC0                 sub     esp, 1Ch
.text:00404AC3                 mov     eax, [esp+1Ch+arg_0]
.text:00404AC7                 mov     [esp+1Ch+var_10], ebx
.text:00404ACB                 mov     [esp+1Ch+var_C], esi
.text:00404ACF                 test    eax, eax
.text:00404AD1                 mov     [esp+1Ch+var_8], edi
.text:00404AD5                 mov     [esp+1Ch+var_4], ebp
.text:00404AD9                 jz      short loc_404AE8
.text:00404ADB                 cmp     byte ptr [eax], 0
.text:00404ADE                 jz      short loc_404AE8
.text:00404AE0                 mov     ecx, [esp+1Ch+arg_C]
.text:00404AE4                 test    ecx, ecx
.text:00404AE6                 jnz     short loc_404B10
.text:00404AE8
.text:00404AE8 loc_404AE8:                             ; CODE XREF: sub_404AC0+19↑j
.text:00404AE8                                         ; sub_404AC0+1E↑j ...
.text:00404AE8                 call    _errno
.text:00404AED                 mov     dword ptr [eax], 22h ; '"'
.text:00404AF3                 mov     eax, 0FFFFFFFFh
.text:00404AF8
.text:00404AF8 loc_404AF8:                             ; CODE XREF: sub_404AC0+1BF↓j
.text:00404AF8                 mov     ebx, [esp+1Ch+var_10]
.text:00404AFC                 mov     esi, [esp+1Ch+var_C]
.text:00404B00                 mov     edi, [esp+1Ch+var_8]
.text:00404B04                 mov     ebp, [esp+1Ch+var_4]
.text:00404B08                 add     esp, 1Ch
.text:00404B0B                 retn
.text:00404B0B ; ---------------------------------------------------------------------------
.text:00404B0C                 align 10h
.text:00404B10
.text:00404B10 loc_404B10:                             ; CODE XREF: sub_404AC0+26↑j
.text:00404B10                 mov     [esp+1Ch+Str], eax ; Str
.text:00404B13                 mov     ebx, eax
.text:00404B15                 call    strlen
.text:00404B1A                 lea     esi, [eax+1]
.text:00404B1D                 cmp     esi, [esp+1Ch+arg_C]
.text:00404B21                 ja      short loc_404AE8
.text:00404B23                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404B27                 mov     edx, [esp+1Ch+arg_8]
.text:00404B2B                 mov     [esp+1Ch+Size], esi ; Size
.text:00404B2F                 mov     [esp+1Ch+Str], edx ; void *
.text:00404B32                 call    memcpy
.text:00404B37                 mov     ebp, [esp+1Ch+arg_4]
.text:00404B3B                 mov     [ebp+0], eax
.text:00404B3E                 call    sub_404D10
.text:00404B43                 mov     edi, [esp+1Ch+arg_4]
.text:00404B47                 mov     [edi+8], eax
.text:00404B4A                 call    sub_404D00
.text:00404B4F                 mov     ebx, [esp+1Ch+arg_4]
.text:00404B53                 mov     [ebx+0Ch], eax
.text:00404B56                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:00404B5D                 call    getenv
.text:00404B62                 test    eax, eax
.text:00404B64                 mov     ebx, eax
.text:00404B66                 jz      loc_404CA5
.text:00404B6C
.text:00404B6C loc_404B6C:                             ; CODE XREF: sub_404AC0+1EA↓j
.text:00404B6C                 mov     [esp+1Ch+Str], ebx ; Str
.text:00404B6F                 call    strlen
.text:00404B74                 lea     ebp, [eax+esi+1]
.text:00404B78                 cmp     ebp, [esp+1Ch+arg_C]
.text:00404B7C                 ja      loc_404AE8
.text:00404B82                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404B86                 mov     ecx, [esp+1Ch+arg_8]
.text:00404B8A                 lea     edi, [eax+1]
.text:00404B8D                 mov     [esp+1Ch+Size], edi ; Size
.text:00404B91                 add     ecx, esi
.text:00404B93                 mov     [esp+1Ch+Str], ecx ; void *
.text:00404B96                 call    memcpy
.text:00404B9B                 mov     esi, [esp+1Ch+arg_4]
.text:00404B9F                 mov     [esi+14h], eax
.text:00404BA2                 mov     [esp+1Ch+Str], offset aShell ; "SHELL"
.text:00404BA9                 call    getenv
.text:00404BAE                 test    eax, eax
.text:00404BB0                 mov     ebx, eax
.text:00404BB2                 jz      loc_404C84
.text:00404BB8
.text:00404BB8 loc_404BB8:                             ; CODE XREF: sub_404AC0+1D4↓j
.text:00404BB8                                         ; sub_404AC0+1E0↓j
.text:00404BB8                 mov     [esp+1Ch+Str], ebx ; Str
.text:00404BBB                 call    strlen
.text:00404BC0                 lea     edi, [eax+ebp+1]
.text:00404BC4                 cmp     edi, [esp+1Ch+arg_C]
.text:00404BC8                 ja      loc_404AE8
.text:00404BCE                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404BD2                 mov     esi, [esp+1Ch+arg_8]
.text:00404BD6                 lea     ecx, [eax+1]
.text:00404BD9                 mov     [esp+1Ch+Size], ecx ; Size
.text:00404BDD                 add     esi, ebp
.text:00404BDF                 mov     [esp+1Ch+Str], esi ; void *
.text:00404BE2                 call    memcpy
.text:00404BE7                 mov     ebx, [esp+1Ch+arg_4]
.text:00404BEB                 mov     [ebx+18h], eax
.text:00404BEE                 call    sub_404CB0
.text:00404BF3                 mov     [esp+1Ch+Str], eax ; Str
.text:00404BF6                 mov     ebx, eax
.text:00404BF8                 call    strlen
.text:00404BFD                 lea     esi, [eax+edi+1]
.text:00404C01                 cmp     esi, [esp+1Ch+arg_C]
.text:00404C05                 ja      loc_404AE8
.text:00404C0B                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404C0F                 mov     ecx, [esp+1Ch+arg_8]
.text:00404C13                 lea     ebp, [eax+1]
.text:00404C16                 mov     [esp+1Ch+Size], ebp ; Size
.text:00404C1A                 add     ecx, edi
.text:00404C1C                 mov     [esp+1Ch+Str], ecx ; void *
.text:00404C1F                 call    memcpy
.text:00404C24                 mov     edi, [esp+1Ch+arg_4]
.text:00404C28                 mov     ebx, Src
.text:00404C2E                 mov     [edi+10h], eax
.text:00404C31                 mov     [esp+1Ch+Str], ebx ; Str
.text:00404C34                 call    strlen
.text:00404C39                 lea     ebp, [eax+esi+1]
.text:00404C3D                 cmp     ebp, [esp+1Ch+arg_C]
.text:00404C41                 ja      loc_404AE8
.text:00404C47                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404C4B                 mov     edi, [esp+1Ch+arg_8]
.text:00404C4F                 lea     ecx, [eax+1]
.text:00404C52                 mov     [esp+1Ch+Size], ecx ; Size
.text:00404C56                 add     edi, esi
.text:00404C58                 mov     [esp+1Ch+Str], edi ; void *
.text:00404C5B                 call    memcpy
.text:00404C60                 mov     esi, [esp+1Ch+arg_4]
.text:00404C64                 mov     [esi+4], eax
.text:00404C67                 mov     edx, [esp+1Ch+arg_8]
.text:00404C6B                 mov     [esp+1Ch+Str], edx ; Str
.text:00404C6E                 call    strlen
.text:00404C73                 mov     eax, [esp+1Ch+arg_4]
.text:00404C77                 mov     ebx, [esp+1Ch+arg_10]
.text:00404C7B                 mov     [ebx], eax
.text:00404C7D                 xor     eax, eax
.text:00404C7F                 jmp     loc_404AF8
.text:00404C84 ; ---------------------------------------------------------------------------
.text:00404C84
.text:00404C84 loc_404C84:                             ; CODE XREF: sub_404AC0+F2↑j
.text:00404C84                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:00404C8B                 call    getenv
.text:00404C90                 test    eax, eax
.text:00404C92                 mov     ebx, eax
.text:00404C94                 jnz     loc_404BB8
.text:00404C9A                 mov     ebx, off_406054
.text:00404CA0                 jmp     loc_404BB8
.text:00404CA5 ; ---------------------------------------------------------------------------
.text:00404CA5
.text:00404CA5 loc_404CA5:                             ; CODE XREF: sub_404AC0+A6↑j
.text:00404CA5                 mov     ebx, offset aC  ; "C:/"
.text:00404CAA                 jmp     loc_404B6C
.text:00404CAA sub_404AC0      endp
.text:00404CAA
.text:00404CAA ; ---------------------------------------------------------------------------
.text:00404CAF                 align 10h
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0
.text:00404CB0 sub_404CB0      proc near               ; CODE XREF: sub_404A50+B↑p
.text:00404CB0                                         ; sub_404AC0+12E↑p
.text:00404CB0
.text:00404CB0 lpBuffer        = dword ptr -1Ch
.text:00404CB0 pcbBuffer       = dword ptr -18h
.text:00404CB0 var_8           = dword ptr -8
.text:00404CB0 var_4           = dword ptr -4
.text:00404CB0
.text:00404CB0                 sub     esp, 1Ch
.text:00404CB3                 lea     edx, [esp+1Ch+var_8]
.text:00404CB7                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:00404CBB                 mov     [esp+1Ch+var_4], ebx
.text:00404CBF                 mov     [esp+1Ch+var_8], 101h
.text:00404CC7                 mov     [esp+1Ch+lpBuffer], offset byte_4075B0 ; lpBuffer
.text:00404CCE                 call    GetUserNameA
.text:00404CD3                 sub     esp, 8
.text:00404CD6                 mov     edx, offset byte_4075B0
.text:00404CDB                 test    eax, eax
.text:00404CDD                 jz      short loc_404CE9
.text:00404CDF
.text:00404CDF loc_404CDF:                             ; CODE XREF: sub_404CB0+49↓j
.text:00404CDF                 mov     ebx, [esp+1Ch+var_4]
.text:00404CE3                 mov     eax, edx
.text:00404CE5                 add     esp, 1Ch
.text:00404CE8                 retn
.text:00404CE9 ; ---------------------------------------------------------------------------
.text:00404CE9
.text:00404CE9 loc_404CE9:                             ; CODE XREF: sub_404CB0+2D↑j
.text:00404CE9                 call    sub_404FB0
.text:00404CEE                 mov     ebx, eax
.text:00404CF0                 call    _errno
.text:00404CF5                 mov     [eax], ebx
.text:00404CF7                 xor     edx, edx
.text:00404CF9                 jmp     short loc_404CDF
.text:00404CF9 sub_404CB0      endp
.text:00404CF9
.text:00404CF9 ; ---------------------------------------------------------------------------
.text:00404CFB                 align 10h
.text:00404D00
.text:00404D00 ; =============== S U B R O U T I N E =======================================
.text:00404D00
.text:00404D00
.text:00404D00 sub_404D00      proc near               ; CODE XREF: sub_404AC0+8A↑p
.text:00404D00                 xor     eax, eax
.text:00404D02                 retn
.text:00404D02 sub_404D00      endp
.text:00404D02
.text:00404D02 ; ---------------------------------------------------------------------------
.text:00404D03                 align 10h
.text:00404D10
.text:00404D10 ; =============== S U B R O U T I N E =======================================
.text:00404D10
.text:00404D10
.text:00404D10 sub_404D10      proc near               ; CODE XREF: sub_404AC0+7E↑p
.text:00404D10                 xor     eax, eax
.text:00404D12                 retn
.text:00404D12 sub_404D10      endp
.text:00404D12
.text:00404D12 ; ---------------------------------------------------------------------------
.text:00404D13                 align 10h
.text:00404D20
.text:00404D20 ; =============== S U B R O U T I N E =======================================
.text:00404D20
.text:00404D20 ; Attributes: info_from_lumina
.text:00404D20
.text:00404D20 ___get_errno    proc near               ; CODE XREF: sub_404FB0+B↓p
.text:00404D20
.text:00404D20 arg_0           = dword ptr  4
.text:00404D20
.text:00404D20                 mov     eax, [esp+arg_0]
.text:00404D24                 cmp     eax, 53h ; 'S'
.text:00404D27                 jg      loc_404E20
.text:00404D2D                 cmp     eax, 52h ; 'R'
.text:00404D30                 jge     short loc_404D82
.text:00404D32                 cmp     eax, 0Fh
.text:00404D35                 jz      short loc_404D50
.text:00404D37                 cmp     eax, 0Fh
.text:00404D3A                 jg      short loc_404DB0
.text:00404D3C                 cmp     eax, 9
.text:00404D3F                 jg      short loc_404D90
.text:00404D41                 cmp     eax, 7
.text:00404D44                 jge     short loc_404D89
.text:00404D46                 cmp     eax, 3
.text:00404D49                 jg      short loc_404D6A
.text:00404D4B                 cmp     eax, 2
.text:00404D4E                 jl      short loc_404D63
.text:00404D50
.text:00404D50 loc_404D50:                             ; CODE XREF: ___get_errno+15↑j
.text:00404D50                                         ; ___get_errno+9D↓j ...
.text:00404D50                 mov     edx, 2
.text:00404D55                 lea     esi, [esi+0]
.text:00404D59                 lea     edi, [edi+0]
.text:00404D60
.text:00404D60 loc_404D60:                             ; CODE XREF: ___get_errno+48↓j
.text:00404D60                                         ; ___get_errno+59↓j ...
.text:00404D60                 mov     eax, edx
.text:00404D62                 retn
.text:00404D63 ; ---------------------------------------------------------------------------
.text:00404D63
.text:00404D63 loc_404D63:                             ; CODE XREF: ___get_errno+2E↑j
.text:00404D63                                         ; ___get_errno+78↓j ...
.text:00404D63                 mov     edx, 16h
.text:00404D68                 jmp     short loc_404D60
.text:00404D6A ; ---------------------------------------------------------------------------
.text:00404D6A
.text:00404D6A loc_404D6A:                             ; CODE XREF: ___get_errno+29↑j
.text:00404D6A                 cmp     eax, 5
.text:00404D6D                 jz      short loc_404D82
.text:00404D6F                 cmp     eax, 5
.text:00404D72                 jg      short loc_404D7B
.text:00404D74                 mov     edx, 18h
.text:00404D79                 jmp     short loc_404D60
.text:00404D7B ; ---------------------------------------------------------------------------
.text:00404D7B
.text:00404D7B loc_404D7B:                             ; CODE XREF: ___get_errno+52↑j
.text:00404D7B                                         ; ___get_errno+180↓j
.text:00404D7B                 mov     edx, 9
.text:00404D80                 jmp     short loc_404D60
.text:00404D82 ; ---------------------------------------------------------------------------
.text:00404D82
.text:00404D82 loc_404D82:                             ; CODE XREF: ___get_errno+10↑j
.text:00404D82                                         ; ___get_errno+4D↑j ...
.text:00404D82                 mov     edx, 0Dh
.text:00404D87                 jmp     short loc_404D60
.text:00404D89 ; ---------------------------------------------------------------------------
.text:00404D89
.text:00404D89 loc_404D89:                             ; CODE XREF: ___get_errno+24↑j
.text:00404D89                                         ; ___get_errno+73↓j ...
.text:00404D89                 mov     edx, 0Ch
.text:00404D8E                 jmp     short loc_404D60
.text:00404D90 ; ---------------------------------------------------------------------------
.text:00404D90
.text:00404D90 loc_404D90:                             ; CODE XREF: ___get_errno+1F↑j
.text:00404D90                 cmp     eax, 0Dh
.text:00404D93                 jg      short loc_404D89
.text:00404D95                 cmp     eax, 0Ch
.text:00404D98                 jge     short loc_404D63
.text:00404D9A                 cmp     eax, 0Ah
.text:00404D9D                 mov     edx, 7
.text:00404DA2                 jz      short loc_404D60
.text:00404DA4                 cmp     eax, 0Bh
.text:00404DA7                 jnz     short loc_404D63
.text:00404DA9
.text:00404DA9 loc_404DA9:                             ; CODE XREF: ___get_errno+21A↓j
.text:00404DA9                 mov     edx, 8
.text:00404DAE                 jmp     short loc_404D60
.text:00404DB0 ; ---------------------------------------------------------------------------
.text:00404DB0
.text:00404DB0 loc_404DB0:                             ; CODE XREF: ___get_errno+1A↑j
.text:00404DB0                 cmp     eax, 22h ; '"'
.text:00404DB3                 jg      short loc_404DE4
.text:00404DB5                 cmp     eax, 16h
.text:00404DB8                 jge     short loc_404D82
.text:00404DBA                 cmp     eax, 12h
.text:00404DBD                 jz      short loc_404D50
.text:00404DBF                 cmp     eax, 12h
.text:00404DC2                 jg      short loc_404DD5
.text:00404DC4                 cmp     eax, 10h
.text:00404DC7                 jz      short loc_404D82
.text:00404DC9                 mov     edx, 12h
.text:00404DCE                 cmp     eax, 11h
.text:00404DD1
.text:00404DD1 loc_404DD1:                             ; CODE XREF: ___get_errno+172↓j
.text:00404DD1                                         ; ___get_errno+24C↓j ...
.text:00404DD1                 jnz     short loc_404D63
.text:00404DD3                 jmp     short loc_404D60
.text:00404DD5 ; ---------------------------------------------------------------------------
.text:00404DD5
.text:00404DD5 loc_404DD5:                             ; CODE XREF: ___get_errno+A2↑j
.text:00404DD5                 cmp     eax, 14h
.text:00404DD8                 jle     short loc_404D82
.text:00404DDA
.text:00404DDA loc_404DDA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00404DDA                 mov     edx, 10h
.text:00404DDF                 jmp     loc_404D60
.text:00404DE4 ; ---------------------------------------------------------------------------
.text:00404DE4
.text:00404DE4 loc_404DE4:                             ; CODE XREF: ___get_errno+93↑j
.text:00404DE4                 cmp     eax, 41h ; 'A'
.text:00404DE7                 jz      short loc_404D82
.text:00404DE9                 cmp     eax, 41h ; 'A'
.text:00404DEC                 jg      short loc_404E01
.text:00404DEE                 cmp     eax, 24h ; '$'
.text:00404DF1                 jz      short loc_404D82
.text:00404DF3                 cmp     eax, 35h ; '5'
.text:00404DF6                 jnz     loc_404D63
.text:00404DFC                 jmp     loc_404D50
.text:00404E01 ; ---------------------------------------------------------------------------
.text:00404E01
.text:00404E01 loc_404E01:                             ; CODE XREF: ___get_errno+CC↑j
.text:00404E01                 cmp     eax, 43h ; 'C'
.text:00404E04                 jz      loc_404D50
.text:00404E0A                 cmp     eax, 50h ; 'P'
.text:00404E0D                 jnz     loc_404D63
.text:00404E13
.text:00404E13 loc_404E13:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00404E13                 mov     edx, 11h
.text:00404E18                 jmp     loc_404D60
.text:00404E18 ; ---------------------------------------------------------------------------
.text:00404E1D                 align 10h
.text:00404E20
.text:00404E20 loc_404E20:                             ; CODE XREF: ___get_errno+7↑j
.text:00404E20                 cmp     eax, 0A1h ; '¡'
.text:00404E25                 jz      loc_404D50
.text:00404E2B                 cmp     eax, 0A1h ; '¡'
.text:00404E30                 jg      loc_404EE0
.text:00404E36                 cmp     eax, 81h
.text:00404E3B                 jg      short loc_404EA5
.text:00404E3D                 cmp     eax, 80h ; '€'
.text:00404E42                 mov     edx, 0Ah
.text:00404E47                 jge     loc_404D60
.text:00404E4D                 cmp     eax, 6Ch ; 'l'
.text:00404E50                 jz      loc_404D82
.text:00404E56                 cmp     eax, 6Ch ; 'l'
.text:00404E59                 jg      short loc_404E77
.text:00404E5B                 cmp     eax, 57h ; 'W'
.text:00404E5E                 jz      loc_404D63
.text:00404E64                 cmp     eax, 59h ; 'Y'
.text:00404E67                 jnz     loc_404D63
.text:00404E6D
.text:00404E6D loc_404E6D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00404E6D                                         ; ___get_errno+23C↓j
.text:00404E6D                 mov     edx, 0Bh
.text:00404E72                 jmp     loc_404D60
.text:00404E77 ; ---------------------------------------------------------------------------
.text:00404E77
.text:00404E77 loc_404E77:                             ; CODE XREF: ___get_errno+139↑j
.text:00404E77                 cmp     eax, 70h ; 'p'
.text:00404E7A                 mov     edx, 1Ch
.text:00404E7F                 jz      loc_404D60
.text:00404E85                 cmp     eax, 70h ; 'p'
.text:00404E88                 jg      short loc_404E97
.text:00404E8A                 mov     edx, 20h ; ' '
.text:00404E8F                 cmp     eax, 6Dh ; 'm'
.text:00404E92                 jmp     loc_404DD1
.text:00404E97 ; ---------------------------------------------------------------------------
.text:00404E97
.text:00404E97 loc_404E97:                             ; CODE XREF: ___get_errno+168↑j
.text:00404E97                 cmp     eax, 72h ; 'r'
.text:00404E9A
.text:00404E9A loc_404E9A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00404E9A                 jnz     loc_404D63
.text:00404EA0                 jmp     loc_404D7B
.text:00404EA5 ; ---------------------------------------------------------------------------
.text:00404EA5
.text:00404EA5 loc_404EA5:                             ; CODE XREF: ___get_errno+11B↑j
.text:00404EA5                 cmp     eax, 84h ; '„'
.text:00404EAA                 jz      loc_404D82
.text:00404EB0                 cmp     eax, 84h ; '„'
.text:00404EB5                 jg      short loc_404EBE
.text:00404EB7                 cmp     eax, 82h ; '‚'
.text:00404EBC                 jmp     short loc_404E9A
.text:00404EBE ; ---------------------------------------------------------------------------
.text:00404EBE
.text:00404EBE loc_404EBE:                             ; CODE XREF: ___get_errno+195↑j
.text:00404EBE                 cmp     eax, 91h ; '‘'
.text:00404EC3                 mov     edx, 29h ; ')'
.text:00404EC8                 jz      loc_404D60
.text:00404ECE                 cmp     eax, 9Eh ; 'ž'
.text:00404ED3
.text:00404ED3 loc_404ED3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00404ED3                 jnz     loc_404D63
.text:00404ED9                 jmp     loc_404D82
.text:00404ED9 ; ---------------------------------------------------------------------------
.text:00404EDE                 align 10h
.text:00404EE0
.text:00404EE0 loc_404EE0:                             ; CODE XREF: ___get_errno+110↑j
.text:00404EE0                 cmp     eax, 0CEh ; 'Î'
.text:00404EE5                 jz      loc_404D50
.text:00404EEB                 cmp     eax, 0CEh ; 'Î'
.text:00404EF0                 jg      short loc_404F40
.text:00404EF2                 cmp     eax, 0AAh ; 'ª'
.text:00404EF7                 jz      loc_404DDA
.text:00404EFD                 cmp     eax, 0AAh ; 'ª'
.text:00404F02                 jg      short loc_404F16
.text:00404F04                 cmp     eax, 0A4h ; '¤'
.text:00404F09                 jz      loc_404E6D
.text:00404F0F                 cmp     eax, 0A7h ; '§'
.text:00404F14                 jmp     short loc_404ED3
.text:00404F16 ; ---------------------------------------------------------------------------
.text:00404F16
.text:00404F16 loc_404F16:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00404F16                 cmp     eax, 0B7h ; '·'
.text:00404F1B                 jz      loc_404E13
.text:00404F21                 cmp     eax, 0B7h ; '·'
.text:00404F26                 jl      loc_404D63
.text:00404F2C                 sub     eax, 0BCh ; '¼'
.text:00404F31                 cmp     eax, 0Eh
.text:00404F34                 ja      loc_404D63
.text:00404F3A                 jmp     loc_404DA9
.text:00404F3A ; ---------------------------------------------------------------------------
.text:00404F3F                 align 10h
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00404F40                 cmp     eax, 46Bh
.text:00404F45                 mov     edx, 24h ; '$'
.text:00404F4A                 jz      loc_404D60
.text:00404F50                 cmp     eax, 46Bh
.text:00404F55                 jg      short loc_404F71
.text:00404F57                 cmp     eax, 0D7h ; '×'
.text:00404F5C                 jz      loc_404E6D
.text:00404F62                 mov     edx, 5
.text:00404F67                 cmp     eax, 45Dh
.text:00404F6C                 jmp     loc_404DD1
.text:00404F71 ; ---------------------------------------------------------------------------
.text:00404F71
.text:00404F71 loc_404F71:                             ; CODE XREF: ___get_errno+235↑j
.text:00404F71                 cmp     eax, 4D5h
.text:00404F76                 mov     edx, 4
.text:00404F7B                 jz      loc_404D60
.text:00404F81                 cmp     eax, 4D5h
.text:00404F86                 jg      short loc_404F97
.text:00404F88                 mov     edx, 13h
.text:00404F8D                 cmp     eax, 4B0h
.text:00404F92                 jmp     loc_404DD1
.text:00404F97 ; ---------------------------------------------------------------------------
.text:00404F97
.text:00404F97 loc_404F97:                             ; CODE XREF: ___get_errno+266↑j
.text:00404F97                 cmp     eax, 718h
.text:00404F9C                 jnz     loc_404D63
.text:00404FA2                 jmp     loc_404D89
.text:00404FA2 ___get_errno    endp
.text:00404FA2
.text:00404FA2 ; ---------------------------------------------------------------------------
.text:00404FA7                 align 10h
.text:00404FB0
.text:00404FB0 ; =============== S U B R O U T I N E =======================================
.text:00404FB0
.text:00404FB0
.text:00404FB0 sub_404FB0      proc near               ; CODE XREF: sub_404CB0:loc_404CE9↑p
.text:00404FB0
.text:00404FB0 var_C           = dword ptr -0Ch
.text:00404FB0
.text:00404FB0                 sub     esp, 0Ch
.text:00404FB3                 call    GetLastError
.text:00404FB8                 mov     [esp+0Ch+var_C], eax
.text:00404FBB                 call    ___get_errno
.text:00404FC0                 add     esp, 0Ch
.text:00404FC3                 retn
.text:00404FC3 sub_404FB0      endp
.text:00404FC3
.text:00404FC3 ; ---------------------------------------------------------------------------
.text:00404FC4                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0 ; Attributes: thunk
.text:00404FD0
.text:00404FD0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404FD0 mbrtowc         proc near               ; CODE XREF: sub_402BC0+757↑p
.text:00404FD0
.text:00404FD0 DstCh           = dword ptr  4
.text:00404FD0 SrcCh           = dword ptr  8
.text:00404FD0 SizeInBytes     = dword ptr  0Ch
.text:00404FD0 State           = dword ptr  10h
.text:00404FD0
.text:00404FD0                 jmp     ds:__imp_mbrtowc
.text:00404FD0 mbrtowc         endp
.text:00404FD0
.text:00404FD0 ; ---------------------------------------------------------------------------
.text:00404FD6                 align 10h
.text:00404FE0
.text:00404FE0 ; =============== S U B R O U T I N E =======================================
.text:00404FE0
.text:00404FE0 ; Attributes: bp-based frame
.text:00404FE0
.text:00404FE0 sub_404FE0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404FE0                 push    ebp
.text:00404FE1                 mov     ecx, offset dword_407000
.text:00404FE6                 cmp     ecx, offset dword_407000
.text:00404FEC                 mov     ebp, esp
.text:00404FEE                 jnb     short loc_405006
.text:00404FF0
.text:00404FF0 loc_404FF0:                             ; CODE XREF: sub_404FE0+24↓j
.text:00404FF0                 mov     edx, [ecx+4]
.text:00404FF3                 mov     eax, [ecx]
.text:00404FF5                 add     ecx, 8
.text:00404FF8                 add     [edx+400000h], eax
.text:00404FFE                 cmp     ecx, offset dword_407000
.text:00405004                 jb      short loc_404FF0
.text:00405006
.text:00405006 loc_405006:                             ; CODE XREF: sub_404FE0+E↑j
.text:00405006                 pop     ebp
.text:00405007                 retn
.text:00405007 sub_404FE0      endp
.text:00405007
.text:00405007 ; ---------------------------------------------------------------------------
.text:00405008                 align 10h
.text:00405010
.text:00405010 ; =============== S U B R O U T I N E =======================================
.text:00405010
.text:00405010 ; Attributes: bp-based frame
.text:00405010
.text:00405010 sub_405010      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405010                                         ; TopLevelExceptionFilter+D7↑p
.text:00405010                 push    ebp
.text:00405011                 mov     ebp, esp
.text:00405013                 fninit
.text:00405015                 pop     ebp
.text:00405016                 retn
.text:00405016 sub_405010      endp
.text:00405016
.text:00405016 ; ---------------------------------------------------------------------------
.text:00405017                 align 10h
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020 ; Attributes: bp-based frame
.text:00405020
.text:00405020 ; void __cdecl sub_405020()
.text:00405020 sub_405020      proc near               ; DATA XREF: .text:loc_405069↓o
.text:00405020                                         ; sub_4050B0:loc_4050DE↓o
.text:00405020                 push    ebp
.text:00405021                 mov     ebp, esp
.text:00405023                 sub     esp, 8
.text:00405026                 mov     eax, off_406094
.text:0040502B                 mov     edx, [eax]
.text:0040502D                 test    edx, edx
.text:0040502F                 jnz     short loc_405035
.text:00405031
.text:00405031 loc_405031:                             ; CODE XREF: sub_405020+2C↓j
.text:00405031                 mov     esp, ebp
.text:00405033                 pop     ebp
.text:00405034                 retn
.text:00405035 ; ---------------------------------------------------------------------------
.text:00405035
.text:00405035 loc_405035:                             ; CODE XREF: sub_405020+F↑j
.text:00405035                                         ; sub_405020+2A↓j
.text:00405035                 call    dword ptr [eax]
.text:00405037                 mov     edx, off_406094
.text:0040503D                 mov     ecx, [edx+4]
.text:00405040                 lea     eax, [edx+4]
.text:00405043                 mov     off_406094, eax
.text:00405048                 test    ecx, ecx
.text:0040504A                 jnz     short loc_405035
.text:0040504C                 jmp     short loc_405031
.text:0040504C sub_405020      endp
.text:0040504C
.text:0040504C ; ---------------------------------------------------------------------------
.text:0040504E                 align 10h
.text:00405050                 push    ebp
.text:00405051                 mov     ebp, esp
.text:00405053                 sub     esp, 8
.text:00405056                 mov     [ebp-4], ebx
.text:00405059                 mov     eax, ds:dword_4053A0
.text:0040505E                 cmp     eax, 0FFFFFFFFh
.text:00405061                 jz      short loc_40508C
.text:00405063
.text:00405063 loc_405063:                             ; CODE XREF: .text:00405096↓j
.text:00405063                                         ; .text:004050A9↓j
.text:00405063                 test    eax, eax
.text:00405065                 mov     ebx, eax
.text:00405067                 jnz     short loc_405080
.text:00405069
.text:00405069 loc_405069:                             ; CODE XREF: .text:0040508A↓j
.text:00405069                 mov     dword ptr [esp], offset sub_405020
.text:00405070                 call    sub_401040
.text:00405075                 mov     ebx, [ebp-4]
.text:00405078                 mov     esp, ebp
.text:0040507A                 pop     ebp
.text:0040507B                 retn
.text:0040507B ; ---------------------------------------------------------------------------
.text:0040507C                 align 10h
.text:00405080
.text:00405080 loc_405080:                             ; CODE XREF: .text:00405067↑j
.text:00405080                                         ; .text:00405088↓j
.text:00405080                 call    ds:dword_4053A0[ebx*4]
.text:00405087                 dec     ebx
.text:00405088                 jnz     short loc_405080
.text:0040508A                 jmp     short loc_405069
.text:0040508C ; ---------------------------------------------------------------------------
.text:0040508C
.text:0040508C loc_40508C:                             ; CODE XREF: .text:00405061↑j
.text:0040508C                 mov     ecx, ds:dword_4053A4
.text:00405092                 xor     eax, eax
.text:00405094                 test    ecx, ecx
.text:00405096                 jz      short loc_405063
.text:00405098                 mov     edx, offset dword_4053A0
.text:0040509D                 lea     esi, [esi+0]
.text:004050A0
.text:004050A0 loc_4050A0:                             ; CODE XREF: .text:004050A7↓j
.text:004050A0                 inc     eax
.text:004050A1                 mov     ecx, [edx+eax*4+4]
.text:004050A5                 test    ecx, ecx
.text:004050A7                 jnz     short loc_4050A0
.text:004050A9                 jmp     short loc_405063
.text:004050A9 ; ---------------------------------------------------------------------------
.text:004050AB                 align 10h
.text:004050B0
.text:004050B0 ; =============== S U B R O U T I N E =======================================
.text:004050B0
.text:004050B0 ; Attributes: bp-based frame
.text:004050B0
.text:004050B0 sub_4050B0      proc near               ; CODE XREF: sub_401370+18↑p
.text:004050B0
.text:004050B0 var_8           = dword ptr -8
.text:004050B0 var_4           = dword ptr -4
.text:004050B0
.text:004050B0                 push    ebp
.text:004050B1                 mov     ebp, esp
.text:004050B3                 sub     esp, 8
.text:004050B6                 mov     [ebp+var_4], ebx
.text:004050B9                 mov     edx, dword_406090
.text:004050BF                 test    edx, edx
.text:004050C1                 jnz     short loc_4050EA
.text:004050C3                 mov     eax, ds:dword_4053A0
.text:004050C8                 mov     edx, 1
.text:004050CD                 mov     dword_406090, edx
.text:004050D3                 cmp     eax, 0FFFFFFFFh
.text:004050D6                 jz      short loc_4050FD
.text:004050D8
.text:004050D8 loc_4050D8:                             ; CODE XREF: sub_4050B0+57↓j
.text:004050D8                                         ; sub_4050B0+69↓j
.text:004050D8                 test    eax, eax
.text:004050DA                 mov     ebx, eax
.text:004050DC                 jnz     short loc_4050F1
.text:004050DE
.text:004050DE loc_4050DE:                             ; CODE XREF: sub_4050B0+4B↓j
.text:004050DE                 mov     [esp+8+var_8], offset sub_405020 ; void (__cdecl *)()
.text:004050E5                 call    sub_401040
.text:004050EA
.text:004050EA loc_4050EA:                             ; CODE XREF: sub_4050B0+11↑j
.text:004050EA                 mov     ebx, [ebp+var_4]
.text:004050ED                 mov     esp, ebp
.text:004050EF                 pop     ebp
.text:004050F0                 retn
.text:004050F1 ; ---------------------------------------------------------------------------
.text:004050F1
.text:004050F1 loc_4050F1:                             ; CODE XREF: sub_4050B0+2C↑j
.text:004050F1                                         ; sub_4050B0+49↓j
.text:004050F1                 call    ds:dword_4053A0[ebx*4]
.text:004050F8                 dec     ebx
.text:004050F9                 jnz     short loc_4050F1
.text:004050FB                 jmp     short loc_4050DE
.text:004050FD ; ---------------------------------------------------------------------------
.text:004050FD
.text:004050FD loc_4050FD:                             ; CODE XREF: sub_4050B0+26↑j
.text:004050FD                 mov     ecx, ds:dword_4053A4
.text:00405103                 xor     eax, eax
.text:00405105                 test    ecx, ecx
.text:00405107                 jz      short loc_4050D8
.text:00405109                 mov     edx, offset dword_4053A0
.text:0040510E                 mov     esi, esi
.text:00405110
.text:00405110 loc_405110:                             ; CODE XREF: sub_4050B0+67↓j
.text:00405110                 inc     eax
.text:00405111                 mov     ebx, [edx+eax*4+4]
.text:00405115                 test    ebx, ebx
.text:00405117                 jnz     short loc_405110
.text:00405119                 jmp     short loc_4050D8
.text:00405119 sub_4050B0      endp
.text:00405119
.text:00405119 ; ---------------------------------------------------------------------------
.text:0040511B                 align 10h
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120 ; Attributes: info_from_lumina
.text:00405120
.text:00405120 ; void *__cdecl _alloca(size_t Size)
.text:00405120 __alloca        proc near               ; CODE XREF: sub_401370+13↑p
.text:00405120                 push    ecx
.text:00405121                 mov     ecx, esp
.text:00405123                 add     ecx, 8
.text:00405126
.text:00405126 loc_405126:                             ; CODE XREF: __alloca+1B↓j
.text:00405126                 cmp     eax, 1000h
.text:0040512B                 jb      short loc_40513D
.text:0040512D                 sub     ecx, 1000h
.text:00405133                 or      dword ptr [ecx], 0
.text:00405136                 sub     eax, 1000h
.text:0040513B                 jmp     short loc_405126
.text:0040513D ; ---------------------------------------------------------------------------
.text:0040513D
.text:0040513D loc_40513D:                             ; CODE XREF: __alloca+B↑j
.text:0040513D                 sub     ecx, eax
.text:0040513F                 or      dword ptr [ecx], 0
.text:00405142                 mov     eax, esp
.text:00405144                 mov     esp, ecx
.text:00405146                 mov     ecx, [eax]
.text:00405148                 mov     eax, [eax+4]
.text:0040514B                 jmp     eax
.text:0040514B __alloca        endp
.text:0040514B
.text:0040514B ; ---------------------------------------------------------------------------
.text:0040514D                 align 10h
.text:00405150                 jmp     ds:__set_app_type
.text:00405150 ; ---------------------------------------------------------------------------
.text:00405156                 align 10h
.text:00405160
.text:00405160 ; =============== S U B R O U T I N E =======================================
.text:00405160
.text:00405160 ; Attributes: thunk
.text:00405160
.text:00405160 ; void __cdecl cexit()
.text:00405160 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405160                 jmp     ds:__imp__cexit
.text:00405160 _cexit          endp
.text:00405160
.text:00405160 ; ---------------------------------------------------------------------------
.text:00405166                 align 10h
.text:00405170
.text:00405170 ; =============== S U B R O U T I N E =======================================
.text:00405170
.text:00405170 ; Attributes: thunk
.text:00405170
.text:00405170 ; char ***__cdecl _p__environ()
.text:00405170 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405170                 jmp     ds:__imp___p__environ
.text:00405170 __p__environ    endp
.text:00405170
.text:00405170 ; ---------------------------------------------------------------------------
.text:00405176                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180 ; Attributes: thunk
.text:00405180
.text:00405180 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405180 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405180                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405180
.text:00405180 Signal          = dword ptr  4
.text:00405180 Function        = dword ptr  8
.text:00405180
.text:00405180                 jmp     ds:__imp_signal
.text:00405180 signal          endp
.text:00405180
.text:00405180 ; ---------------------------------------------------------------------------
.text:00405186                 align 10h
.text:00405190
.text:00405190 ; =============== S U B R O U T I N E =======================================
.text:00405190
.text:00405190 ; Attributes: thunk
.text:00405190
.text:00405190 ; int *__cdecl _p__fmode()
.text:00405190 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405190                 jmp     ds:__imp___p__fmode
.text:00405190 __p__fmode      endp
.text:00405190
.text:00405190 ; ---------------------------------------------------------------------------
.text:00405196                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0 ; Attributes: thunk
.text:004051A0
.text:004051A0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004051A0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004051A0                                         ; sub_401080+90↑p ...
.text:004051A0
.text:004051A0 FileHandle      = dword ptr  4
.text:004051A0 Mode            = dword ptr  8
.text:004051A0
.text:004051A0                 jmp     ds:__imp__setmode
.text:004051A0 _setmode        endp
.text:004051A0
.text:004051A0 ; ---------------------------------------------------------------------------
.text:004051A6                 align 10h
.text:004051B0
.text:004051B0 ; =============== S U B R O U T I N E =======================================
.text:004051B0
.text:004051B0 ; Attributes: thunk
.text:004051B0
.text:004051B0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004051B0                 jmp     ds:__imp___getmainargs
.text:004051B0 __getmainargs   endp
.text:004051B0
.text:004051B0 ; ---------------------------------------------------------------------------
.text:004051B6                 align 10h
.text:004051C0
.text:004051C0 ; =============== S U B R O U T I N E =======================================
.text:004051C0
.text:004051C0 ; Attributes: thunk
.text:004051C0
.text:004051C0 ; int __cdecl puts(const char *Buffer)
.text:004051C0 puts            proc near               ; CODE XREF: sub_401370+EF↑p
.text:004051C0
.text:004051C0 Buffer          = dword ptr  4
.text:004051C0
.text:004051C0                 jmp     ds:__imp_puts
.text:004051C0 puts            endp
.text:004051C0
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C6                 align 10h
.text:004051D0
.text:004051D0 ; =============== S U B R O U T I N E =======================================
.text:004051D0
.text:004051D0 ; Attributes: thunk
.text:004051D0
.text:004051D0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004051D0 setlocale       proc near               ; CODE XREF: sub_401370+34↑p
.text:004051D0
.text:004051D0 Category        = dword ptr  4
.text:004051D0 Locale          = dword ptr  8
.text:004051D0
.text:004051D0                 jmp     ds:__imp_setlocale
.text:004051D0 setlocale       endp
.text:004051D0
.text:004051D0 ; ---------------------------------------------------------------------------
.text:004051D6                 align 10h
.text:004051E0
.text:004051E0 ; =============== S U B R O U T I N E =======================================
.text:004051E0
.text:004051E0 ; Attributes: noreturn thunk
.text:004051E0
.text:004051E0 ; void __cdecl __noreturn exit(int Code)
.text:004051E0 exit            proc near               ; CODE XREF: sub_401370:loc_40146B↑p
.text:004051E0                                         ; sub_401650+3E↑p ...
.text:004051E0
.text:004051E0 Code            = dword ptr  4
.text:004051E0
.text:004051E0                 jmp     ds:__imp_exit
.text:004051E0 exit            endp
.text:004051E0
.text:004051E0 ; ---------------------------------------------------------------------------
.text:004051E6                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0 ; Attributes: thunk
.text:004051F0
.text:004051F0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004051F0 fputs           proc near               ; CODE XREF: sub_401650+7F↑p
.text:004051F0                                         ; sub_401650+A1↑p ...
.text:004051F0
.text:004051F0 Buffer          = dword ptr  4
.text:004051F0 Stream          = dword ptr  8
.text:004051F0
.text:004051F0                 jmp     ds:__imp_fputs
.text:004051F0 fputs           endp
.text:004051F0
.text:004051F0 ; ---------------------------------------------------------------------------
.text:004051F6                 align 10h
.text:00405200
.text:00405200 ; =============== S U B R O U T I N E =======================================
.text:00405200
.text:00405200 ; Attributes: thunk
.text:00405200
.text:00405200 ; int printf(const char *const Format, ...)
.text:00405200 printf          proc near               ; CODE XREF: sub_401650+5D↑p
.text:00405200                                         ; sub_401650+E0↑p
.text:00405200
.text:00405200 Format          = dword ptr  4
.text:00405200
.text:00405200                 jmp     ds:__imp_printf
.text:00405200 printf          endp
.text:00405200
.text:00405200 ; ---------------------------------------------------------------------------
.text:00405206                 align 10h
.text:00405210
.text:00405210 ; =============== S U B R O U T I N E =======================================
.text:00405210
.text:00405210 ; Attributes: thunk
.text:00405210
.text:00405210 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405210 fprintf         proc near               ; CODE XREF: sub_401370+12B↑p
.text:00405210                                         ; sub_401370+196↑p ...
.text:00405210
.text:00405210 Stream          = dword ptr  4
.text:00405210 Format          = dword ptr  8
.text:00405210
.text:00405210                 jmp     ds:__imp_fprintf
.text:00405210 fprintf         endp
.text:00405210
.text:00405210 ; ---------------------------------------------------------------------------
.text:00405216                 align 10h
.text:00405220
.text:00405220 ; =============== S U B R O U T I N E =======================================
.text:00405220
.text:00405220 ; Attributes: thunk
.text:00405220
.text:00405220 ; size_t __cdecl strlen(const char *Str)
.text:00405220 strlen          proc near               ; CODE XREF: sub_401990+2A9↑p
.text:00405220                                         ; sub_401990+346↑p ...
.text:00405220
.text:00405220 Str             = dword ptr  4
.text:00405220
.text:00405220                 jmp     ds:__imp_strlen
.text:00405220 strlen          endp
.text:00405220
.text:00405220 ; ---------------------------------------------------------------------------
.text:00405226                 align 10h
.text:00405230
.text:00405230 ; =============== S U B R O U T I N E =======================================
.text:00405230
.text:00405230 ; Attributes: thunk
.text:00405230
.text:00405230 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405230 strncmp         proc near               ; CODE XREF: sub_401990+23F↑p
.text:00405230                                         ; sub_401990+699↑p
.text:00405230
.text:00405230 Str1            = dword ptr  4
.text:00405230 Str2            = dword ptr  8
.text:00405230 MaxCount        = dword ptr  0Ch
.text:00405230
.text:00405230                 jmp     ds:__imp_strncmp
.text:00405230 strncmp         endp
.text:00405230
.text:00405230 ; ---------------------------------------------------------------------------
.text:00405236                 align 10h
.text:00405240
.text:00405240 ; =============== S U B R O U T I N E =======================================
.text:00405240
.text:00405240 ; Attributes: thunk
.text:00405240
.text:00405240 ; char *__cdecl getenv(const char *VarName)
.text:00405240 getenv          proc near               ; CODE XREF: sub_401990+B57↑p
.text:00405240                                         ; sub_404AC0+9D↑p ...
.text:00405240
.text:00405240 VarName         = dword ptr  4
.text:00405240
.text:00405240                 jmp     ds:__imp_getenv
.text:00405240 getenv          endp
.text:00405240
.text:00405240 ; ---------------------------------------------------------------------------
.text:00405246                 align 10h
.text:00405250
.text:00405250 ; =============== S U B R O U T I N E =======================================
.text:00405250
.text:00405250 ; Attributes: thunk
.text:00405250
.text:00405250 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405250 strchr          proc near               ; CODE XREF: sub_401990+469↑p
.text:00405250                                         ; sub_401990+53A↑p ...
.text:00405250
.text:00405250 Str             = dword ptr  4
.text:00405250 Val             = dword ptr  8
.text:00405250
.text:00405250                 jmp     ds:__imp_strchr
.text:00405250 strchr          endp
.text:00405250
.text:00405250 ; ---------------------------------------------------------------------------
.text:00405256                 align 10h
.text:00405260
.text:00405260 ; =============== S U B R O U T I N E =======================================
.text:00405260
.text:00405260 ; Attributes: thunk
.text:00405260
.text:00405260 ; int *__cdecl errno()
.text:00405260 _errno          proc near               ; CODE XREF: sub_402A50:loc_402A8D↑p
.text:00405260                                         ; .text:0040362B↑p ...
.text:00405260                 jmp     ds:__imp__errno
.text:00405260 _errno          endp
.text:00405260
.text:00405260 ; ---------------------------------------------------------------------------
.text:00405266                 align 10h
.text:00405270
.text:00405270 ; =============== S U B R O U T I N E =======================================
.text:00405270
.text:00405270 ; Attributes: thunk
.text:00405270
.text:00405270 ; int __cdecl fclose(FILE *Stream)
.text:00405270 fclose          proc near               ; CODE XREF: sub_402A50+27↑p
.text:00405270
.text:00405270 Stream          = dword ptr  4
.text:00405270
.text:00405270                 jmp     ds:__imp_fclose
.text:00405270 fclose          endp
.text:00405270
.text:00405270 ; ---------------------------------------------------------------------------
.text:00405276                 align 10h
.text:00405280
.text:00405280 ; =============== S U B R O U T I N E =======================================
.text:00405280
.text:00405280 ; Attributes: thunk
.text:00405280
.text:00405280 ; void __cdecl free(void *Block)
.text:00405280 free            proc near               ; CODE XREF: sub_403D00+112↑p
.text:00405280
.text:00405280 Block           = dword ptr  4
.text:00405280
.text:00405280                 jmp     ds:__imp_free
.text:00405280 free            endp
.text:00405280
.text:00405280 ; ---------------------------------------------------------------------------
.text:00405286                 align 10h
.text:00405290
.text:00405290 ; =============== S U B R O U T I N E =======================================
.text:00405290
.text:00405290 ; Attributes: noreturn thunk
.text:00405290
.text:00405290 ; void __cdecl __noreturn abort()
.text:00405290 abort           proc near               ; CODE XREF: sub_403D00:loc_403EBA↑p
.text:00405290                                         ; sub_4041C0:loc_40425C↑p ...
.text:00405290                 jmp     ds:__imp_abort
.text:00405290 abort           endp
.text:00405290
.text:00405290 ; ---------------------------------------------------------------------------
.text:00405296                 align 10h
.text:004052A0
.text:004052A0 ; =============== S U B R O U T I N E =======================================
.text:004052A0
.text:004052A0 ; Attributes: thunk
.text:004052A0
.text:004052A0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004052A0 iswctype        proc near               ; CODE XREF: sub_402BC0+78B↑p
.text:004052A0
.text:004052A0 C               = word ptr  4
.text:004052A0 Type            = word ptr  8
.text:004052A0
.text:004052A0                 jmp     ds:__imp_iswctype
.text:004052A0 iswctype        endp
.text:004052A0
.text:004052A0 ; ---------------------------------------------------------------------------
.text:004052A6                 align 10h
.text:004052B0
.text:004052B0 ; =============== S U B R O U T I N E =======================================
.text:004052B0
.text:004052B0 ; Attributes: thunk
.text:004052B0
.text:004052B0 ; int __cdecl isctype(int C, int Type)
.text:004052B0 _isctype        proc near               ; CODE XREF: sub_402BC0+610↑p
.text:004052B0
.text:004052B0 C               = dword ptr  4
.text:004052B0 Type            = dword ptr  8
.text:004052B0
.text:004052B0                 jmp     ds:__imp__isctype
.text:004052B0 _isctype        endp
.text:004052B0
.text:004052B0 ; ---------------------------------------------------------------------------
.text:004052B6                 align 10h
.text:004052C0
.text:004052C0 ; =============== S U B R O U T I N E =======================================
.text:004052C0
.text:004052C0 ; Attributes: thunk
.text:004052C0
.text:004052C0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004052C0 vfprintf        proc near               ; CODE XREF: sub_4041C0+C1↑p
.text:004052C0                                         ; sub_404750+49↑p ...
.text:004052C0
.text:004052C0 Stream          = dword ptr  4
.text:004052C0 Format          = dword ptr  8
.text:004052C0 ArgList         = dword ptr  0Ch
.text:004052C0
.text:004052C0                 jmp     ds:__imp_vfprintf
.text:004052C0 vfprintf        endp
.text:004052C0
.text:004052C0 ; ---------------------------------------------------------------------------
.text:004052C6                 align 10h
.text:004052D0
.text:004052D0 ; =============== S U B R O U T I N E =======================================
.text:004052D0
.text:004052D0 ; Attributes: thunk
.text:004052D0
.text:004052D0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004052D0 _flsbuf         proc near               ; CODE XREF: sub_4041C0+128↑p
.text:004052D0                                         ; sub_4041C0+13A↑p ...
.text:004052D0
.text:004052D0 File            = dword ptr  8
.text:004052D0
.text:004052D0                 jmp     ds:__imp__flsbuf
.text:004052D0 _flsbuf         endp
.text:004052D0
.text:004052D0 ; ---------------------------------------------------------------------------
.text:004052D6                 align 10h
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0 ; Attributes: thunk
.text:004052E0
.text:004052E0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004052E0 memcpy          proc near               ; CODE XREF: .text:004045B8↑p
.text:004052E0                                         ; .text:00404601↑p ...
.text:004052E0
.text:004052E0 Src             = dword ptr  8
.text:004052E0 Size            = dword ptr  0Ch
.text:004052E0
.text:004052E0                 jmp     ds:__imp_memcpy
.text:004052E0 memcpy          endp
.text:004052E0
.text:004052E0 ; ---------------------------------------------------------------------------
.text:004052E6                 align 10h
.text:004052F0
.text:004052F0 ; =============== S U B R O U T I N E =======================================
.text:004052F0
.text:004052F0 ; Attributes: thunk
.text:004052F0
.text:004052F0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004052F0 memset          proc near               ; CODE XREF: .text:00404536↑p
.text:004052F0
.text:004052F0 Val             = dword ptr  8
.text:004052F0 Size            = dword ptr  0Ch
.text:004052F0
.text:004052F0                 jmp     ds:__imp_memset
.text:004052F0 memset          endp
.text:004052F0
.text:004052F0 ; ---------------------------------------------------------------------------
.text:004052F6                 align 10h
.text:00405300
.text:00405300 ; =============== S U B R O U T I N E =======================================
.text:00405300
.text:00405300 ; Attributes: thunk
.text:00405300
.text:00405300 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405300 calloc          proc near               ; CODE XREF: .text:00404573↑p
.text:00405300
.text:00405300 Count           = dword ptr  4
.text:00405300 Size            = dword ptr  8
.text:00405300
.text:00405300                 jmp     ds:__imp_calloc
.text:00405300 calloc          endp
.text:00405300
.text:00405300 ; ---------------------------------------------------------------------------
.text:00405306                 align 10h
.text:00405310
.text:00405310 ; =============== S U B R O U T I N E =======================================
.text:00405310
.text:00405310 ; Attributes: thunk
.text:00405310
.text:00405310 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405310 realloc         proc near               ; CODE XREF: .text:00404470↑p
.text:00405310                                         ; sub_4044A0+16↑p ...
.text:00405310
.text:00405310 Block           = dword ptr  4
.text:00405310 Size            = dword ptr  8
.text:00405310
.text:00405310                 jmp     ds:__imp_realloc
.text:00405310 realloc         endp
.text:00405310
.text:00405310 ; ---------------------------------------------------------------------------
.text:00405316                 align 10h
.text:00405320
.text:00405320 ; =============== S U B R O U T I N E =======================================
.text:00405320
.text:00405320 ; Attributes: thunk
.text:00405320
.text:00405320 ; void *__cdecl malloc(size_t Size)
.text:00405320 malloc          proc near               ; CODE XREF: .text:004043F4↑p
.text:00405320                                         ; sub_404410+E↑p ...
.text:00405320
.text:00405320 Size            = dword ptr  4
.text:00405320
.text:00405320                 jmp     ds:__imp_malloc
.text:00405320 malloc          endp
.text:00405320
.text:00405320 ; ---------------------------------------------------------------------------
.text:00405326                 align 10h
.text:00405330
.text:00405330 ; =============== S U B R O U T I N E =======================================
.text:00405330
.text:00405330 ; Attributes: thunk
.text:00405330
.text:00405330 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405330 strcmp          proc near               ; CODE XREF: sub_404854+180↑p
.text:00405330
.text:00405330 Str1            = dword ptr  4
.text:00405330 Str2            = dword ptr  8
.text:00405330
.text:00405330                 jmp     ds:__imp_strcmp
.text:00405330 strcmp          endp
.text:00405330
.text:00405330 ; ---------------------------------------------------------------------------
.text:00405336                 align 10h
.text:00405340
.text:00405340 ; =============== S U B R O U T I N E =======================================
.text:00405340
.text:00405340 ; Attributes: thunk
.text:00405340
.text:00405340 ; int __cdecl fflush(FILE *Stream)
.text:00405340 fflush          proc near               ; CODE XREF: sub_404750+19↑p
.text:00405340                                         ; sub_404750+81↑p ...
.text:00405340
.text:00405340 Stream          = dword ptr  4
.text:00405340
.text:00405340                 jmp     ds:__imp_fflush
.text:00405340 fflush          endp
.text:00405340
.text:00405340 ; ---------------------------------------------------------------------------
.text:00405346                 align 10h
.text:00405350
.text:00405350 ; =============== S U B R O U T I N E =======================================
.text:00405350
.text:00405350 ; Attributes: thunk
.text:00405350
.text:00405350 ; char *__cdecl strerror(int ErrorMessage)
.text:00405350 strerror        proc near               ; CODE XREF: sub_404750+A5↑p
.text:00405350                                         ; sub_404854+10F↑p
.text:00405350
.text:00405350 ErrorMessage    = dword ptr  4
.text:00405350
.text:00405350                 jmp     ds:__imp_strerror
.text:00405350 strerror        endp
.text:00405350
.text:00405350 ; ---------------------------------------------------------------------------
.text:00405356                 align 10h
.text:00405360
.text:00405360 ; =============== S U B R O U T I N E =======================================
.text:00405360
.text:00405360 ; Attributes: thunk
.text:00405360
.text:00405360 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405360 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405360
.text:00405360 lpTopLevelExceptionFilter= dword ptr  4
.text:00405360
.text:00405360                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405360 SetUnhandledExceptionFilter endp
.text:00405360
.text:00405360 ; ---------------------------------------------------------------------------
.text:00405366                 align 10h
.text:00405370
.text:00405370 ; =============== S U B R O U T I N E =======================================
.text:00405370
.text:00405370 ; Attributes: noreturn thunk
.text:00405370
.text:00405370 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405370 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405370
.text:00405370 uExitCode       = dword ptr  4
.text:00405370
.text:00405370                 jmp     ds:__imp_ExitProcess
.text:00405370 ExitProcess     endp
.text:00405370
.text:00405370 ; ---------------------------------------------------------------------------
.text:00405376                 align 10h
.text:00405380
.text:00405380 ; =============== S U B R O U T I N E =======================================
.text:00405380
.text:00405380 ; Attributes: thunk
.text:00405380
.text:00405380 ; DWORD __stdcall GetLastError()
.text:00405380 GetLastError    proc near               ; CODE XREF: sub_404FB0+3↑p
.text:00405380                 jmp     ds:__imp_GetLastError
.text:00405380 GetLastError    endp
.text:00405380
.text:00405380 ; ---------------------------------------------------------------------------
.text:00405386                 align 10h
.text:00405390
.text:00405390 ; =============== S U B R O U T I N E =======================================
.text:00405390
.text:00405390 ; Attributes: thunk
.text:00405390
.text:00405390 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:00405390 GetUserNameA    proc near               ; CODE XREF: sub_404CB0+1E↑p
.text:00405390
.text:00405390 lpBuffer        = dword ptr  4
.text:00405390 pcbBuffer       = dword ptr  8
.text:00405390
.text:00405390                 jmp     ds:__imp_GetUserNameA
.text:00405390 GetUserNameA    endp
.text:00405390
.text:00405390 ; ---------------------------------------------------------------------------
.text:00405396                 align 10h
.text:004053A0 dword_4053A0    dd 0FFFFFFFFh           ; DATA XREF: .text:00405059↑r
.text:004053A0                                         ; .text:loc_405080↑r ...
.text:004053A4 dword_4053A4    dd 0                    ; DATA XREF: .text:loc_40508C↑r
.text:004053A4                                         ; sub_4050B0:loc_4050FD↑r
.text:004053A8                 dd 0FFFFFFFFh
.text:004053AC dword_4053AC    dd 15h dup(0)           ; DATA XREF: .data:off_406094↓o
.text:00405400                 dd 300h dup(?)
.text:00405400 _text           ends
.text:00405400
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000B0 (    176.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004800
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401370+CE↑r
.data:00406010                                         ; sub_402520+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402520+11↑r
.data:00406014                                         ; .text:004025C1↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402520+7D↑w
.data:00406018                                         ; .text:0040262D↑w
.data:0040601C                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_403D00+22↑r
.data:00406020                                         ; sub_403D00+65↑r ...
.data:00406024 dword_406024    dd 100h                 ; DATA XREF: sub_403D00+3F↑o
.data:00406024                                         ; sub_403D00+1A2↑r ...
.data:00406028 off_406028      dd offset unk_407040    ; DATA XREF: sub_403D00+1AA↑r
.data:0040602C ; void *off_40602C
.data:0040602C off_40602C      dd offset dword_406024  ; DATA XREF: sub_403D00+39↑r
.data:0040602C                                         ; sub_403D00+60↑w ...
.data:00406030 ; char *Buffer
.data:00406030 Buffer          dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_4041C0+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_402A50+6D↑r
.data:00406040                                         ; sub_402A50+9A↑r ...
.data:00406044                 align 10h
.data:00406050 ; char *Src
.data:00406050 Src             dd offset byte_404AA0   ; DATA XREF: sub_404AC0+168↑r
.data:00406054 off_406054      dd offset byte_404AA1   ; DATA XREF: sub_404AC0+1DA↑r
.data:00406058                 align 10h
.data:00406060 dword_406060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406064                 align 10h
.data:00406070 ; int Mode
.data:00406070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406070                                         ; sub_401080+80↑r ...
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406080                                         ; sub_401080+BA↑r
.data:00406084                 align 10h
.data:00406090 dword_406090    dd 0                    ; DATA XREF: sub_4050B0+9↑r
.data:00406090                                         ; sub_4050B0+1D↑w
.data:00406094 off_406094      dd offset dword_4053AC  ; DATA XREF: sub_405020+6↑r
.data:00406094                                         ; sub_405020+17↑r ...
.data:00406098                 align 1000h
.data:00406098 _data           ends
.data:00406098
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000760 (   1888.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_402520+9↑o
.bss:00407000                                         ; sub_402520+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_402520+21↑w
.bss:00407004                                         ; .text:004025D9↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_402520+77↑r
.bss:00407008                                         ; .text:00402627↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_402520+6B↑r
.bss:0040700C                                         ; .text:0040261B↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:00402A24↑w
.bss:00407030                                         ; sub_402A50+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_403D00+100↑o
.bss:00407040                                         ; .data:off_406028↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_403691↑o
.bss:00407140                                         ; .text:loc_4036B0↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_403730↑o
.bss:00407144                                         ; .text:00403BB8↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:00403BB2↑r
.bss:00407148                                         ; sub_403C60+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:00403BA6↑r
.bss:0040714C                                         ; sub_403C60+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00403BC2↑r
.bss:00407150                                         ; sub_403C60+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00403BD2↑r
.bss:00407154                                         ; sub_403C60+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00403BEF↑r
.bss:00407158                                         ; sub_403C60+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00403BE5↑r
.bss:0040715C                                         ; sub_403C60+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00403BC8↑r
.bss:00407160                                         ; sub_403C60+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_404854:loc_40488D↑w
.bss:00407170                                         ; sub_404854:loc_4049C0↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_404854+2D↑r
.bss:00407180                                         ; sub_404854+3F↑w
.bss:00407184                 align 10h
.bss:00407190 unk_407190      db    ? ;               ; DATA XREF: sub_4049F0+22↑o
.bss:00407191                 db    ? ;
.bss:00407192                 db    ? ;
.bss:00407193                 db    ? ;
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0 ; char byte_4071B0[1024]
.bss:004071B0 byte_4071B0     db 400h dup(?)          ; DATA XREF: sub_4049F0+1A↑o
.bss:004075B0 ; CHAR byte_4075B0[272]
.bss:004075B0 byte_4075B0     db 110h dup(?)          ; DATA XREF: sub_404CB0+17↑o
.bss:004075B0                                         ; sub_404CB0+26↑o
.bss:004076C0 dword_4076C0    dd ?                    ; DATA XREF: sub_401370+2E↑w
.bss:004076C0                                         ; sub_401370+117↑r ...
.bss:004076C4                 align 20h
.bss:004076E0 dword_4076E0    dd ?                    ; DATA XREF: sub_402520+71↑w
.bss:004076E0                                         ; .text:00402621↑w
.bss:004076E4                 align 10h
.bss:004076F0 dword_4076F0    dd ?                    ; CODE XREF: sub_404854+63↑p
.bss:004076F0                                         ; DATA XREF: sub_404750+1E↑r ...
.bss:004076F4                 align 10h
.bss:00407700 dword_407700    dd ?                    ; DATA XREF: sub_404750+4E↑w
.bss:00407700                                         ; sub_404854+AB↑w
.bss:00407704                 db    ? ;
.bss:00407705                 db    ? ;
.bss:00407706                 db    ? ;
.bss:00407707                 db    ? ;
.bss:00407708                 db    ? ;
.bss:00407709                 db    ? ;
.bss:0040770A                 db    ? ;
.bss:0040770B                 db    ? ;
.bss:0040770C                 db    ? ;
.bss:0040770D                 db    ? ;
.bss:0040770E                 db    ? ;
.bss:0040770F                 db    ? ;
.bss:00407710                 db    ? ;
.bss:00407711                 db    ? ;
.bss:00407712                 db    ? ;
.bss:00407713                 db    ? ;
.bss:00407714                 db    ? ;
.bss:00407715                 db    ? ;
.bss:00407716                 db    ? ;
.bss:00407717                 db    ? ;
.bss:00407718                 db    ? ;
.bss:00407719                 db    ? ;
.bss:0040771A                 db    ? ;
.bss:0040771B                 db    ? ;
.bss:0040771C                 db    ? ;
.bss:0040771D                 db    ? ;
.bss:0040771E                 db    ? ;
.bss:0040771F                 db    ? ;
.bss:00407720                 db    ? ;
.bss:00407721                 db    ? ;
.bss:00407722                 db    ? ;
.bss:00407723                 db    ? ;
.bss:00407724                 db    ? ;
.bss:00407725                 db    ? ;
.bss:00407726                 db    ? ;
.bss:00407727                 db    ? ;
.bss:00407728                 db    ? ;
.bss:00407729                 db    ? ;
.bss:0040772A                 db    ? ;
.bss:0040772B                 db    ? ;
.bss:0040772C                 db    ? ;
.bss:0040772D                 db    ? ;
.bss:0040772E                 db    ? ;
.bss:0040772F                 db    ? ;
.bss:00407730 dword_407730    dd ?                    ; DATA XREF: sub_404854+13↑r
.bss:00407734                 align 1000h
.bss:00407734 _bss            ends
.bss:00407734
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005A4 (   1444.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004A00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:0040815C ;
.idata:0040815C ; Imports from libintl3.dll
.idata:0040815C ;
.idata:0040815C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040815C                                         ; CODE XREF: sub_401370+48↑p
.idata:0040815C                                         ; DATA XREF: sub_401370+48↑r ...
.idata:00408160                 extrn libintl_gettext:dword
.idata:00408160                                         ; CODE XREF: sub_401370+107↑p
.idata:00408160                                         ; sub_401370+14D↑p ...
.idata:00408164                 extrn libintl_textdomain:dword
.idata:00408164                                         ; CODE XREF: sub_401370+55↑p
.idata:00408164                                         ; DATA XREF: sub_401370+55↑r ...
.idata:00408168
.idata:00408170 ;
.idata:00408170 ; Imports from ADVAPI32.DLL
.idata:00408170 ;
.idata:00408170 ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:00408170                 extrn __imp_GetUserNameA:dword
.idata:00408170                                         ; DATA XREF: GetUserNameA↑r
.idata:00408174
.idata:0040817C ;
.idata:0040817C ; Imports from KERNEL32.dll
.idata:0040817C ;
.idata:0040817C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040817C                 extrn __imp_ExitProcess:dword
.idata:0040817C                                         ; DATA XREF: ExitProcess↑r
.idata:00408180 ; DWORD (__stdcall *GetLastError)()
.idata:00408180                 extrn __imp_GetLastError:dword
.idata:00408180                                         ; DATA XREF: GetLastError↑r
.idata:00408184 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408184                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408184                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408188
.idata:00408190 ;
.idata:00408190 ; Imports from MSVCP60.DLL
.idata:00408190 ;
.idata:00408190 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408190                 extrn __imp_mbrtowc:dword
.idata:00408190                                         ; DATA XREF: mbrtowc↑r
.idata:00408194
.idata:0040819C ;
.idata:0040819C ; Imports from msvcrt.dll
.idata:0040819C ;
.idata:0040819C                 extrn __imp___getmainargs:dword
.idata:0040819C                                         ; DATA XREF: __getmainargs↑r
.idata:004081A0 ; int _mb_cur_max
.idata:004081A0                 extrn __mb_cur_max:dword
.idata:004081A0                                         ; DATA XREF: sub_402BC0+7↑r
.idata:004081A0                                         ; sub_402BC0+5F3↑r
.idata:004081A4 ; char ***(__cdecl *__p__environ)()
.idata:004081A4                 extrn __imp___p__environ:dword
.idata:004081A4                                         ; DATA XREF: __p__environ↑r
.idata:004081A8 ; int *(__cdecl *__p__fmode)()
.idata:004081A8                 extrn __imp___p__fmode:dword
.idata:004081A8                                         ; DATA XREF: __p__fmode↑r
.idata:004081AC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081AC                 extrn __set_app_type:dword
.idata:004081AC                                         ; CODE XREF: start+D↑p
.idata:004081AC                                         ; .text:0040102D↑p
.idata:004081AC                                         ; DATA XREF: ...
.idata:004081B0 ; void (__cdecl *_cexit)()
.idata:004081B0                 extrn __imp__cexit:dword
.idata:004081B0                                         ; DATA XREF: _cexit↑r
.idata:004081B4 ; int *(__cdecl *_errno)()
.idata:004081B4                 extrn __imp__errno:dword
.idata:004081B4                                         ; DATA XREF: _errno↑r
.idata:004081B8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081B8                 extrn __imp__flsbuf:dword
.idata:004081B8                                         ; DATA XREF: _flsbuf↑r
.idata:004081BC ; FILE iob[]
.idata:004081BC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081BC                                         ; sub_401080+75↑r ...
.idata:004081C0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081C0                 extrn __imp__isctype:dword
.idata:004081C0                                         ; DATA XREF: _isctype↑r
.idata:004081C4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081C4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081C4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081C8 ; const unsigned __int16 *pctype
.idata:004081C8                 extrn _pctype:dword     ; DATA XREF: sub_402BC0:loc_4032B4↑r
.idata:004081CC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081CC                 extrn __imp__setmode:dword
.idata:004081CC                                         ; DATA XREF: _setmode↑r
.idata:004081D0 ; void (__cdecl __noreturn *abort)()
.idata:004081D0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081D4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081D4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081D4                                         ; DATA XREF: sub_401040+C↑r
.idata:004081D8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081D8                 extrn __imp_calloc:dword
.idata:004081D8                                         ; DATA XREF: calloc↑r
.idata:004081DC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081DC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081E0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081E0                 extrn __imp_fclose:dword
.idata:004081E0                                         ; DATA XREF: fclose↑r
.idata:004081E4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081E4                 extrn __imp_fflush:dword
.idata:004081E4                                         ; DATA XREF: fflush↑r
.idata:004081E8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081E8                 extrn __imp_fprintf:dword
.idata:004081E8                                         ; DATA XREF: fprintf↑r
.idata:004081EC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081EC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081F0 ; void (__cdecl *free)(void *Block)
.idata:004081F0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081F4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081F4                 extrn __imp_getenv:dword
.idata:004081F4                                         ; DATA XREF: getenv↑r
.idata:004081F8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081F8                 extrn __imp_iswctype:dword
.idata:004081F8                                         ; DATA XREF: iswctype↑r
.idata:004081FC ; void *(__cdecl *malloc)(size_t Size)
.idata:004081FC                 extrn __imp_malloc:dword
.idata:004081FC                                         ; DATA XREF: malloc↑r
.idata:00408200 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408200                 extrn __imp_memcpy:dword
.idata:00408200                                         ; DATA XREF: memcpy↑r
.idata:00408204 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408204                 extrn __imp_memset:dword
.idata:00408204                                         ; DATA XREF: memset↑r
.idata:00408208 ; int (*printf)(const char *const Format, ...)
.idata:00408208                 extrn __imp_printf:dword
.idata:00408208                                         ; DATA XREF: printf↑r
.idata:0040820C ; int (__cdecl *puts)(const char *Buffer)
.idata:0040820C                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:00408210 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408210                 extrn __imp_realloc:dword
.idata:00408210                                         ; DATA XREF: realloc↑r
.idata:00408214 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408214                 extrn __imp_setlocale:dword
.idata:00408214                                         ; DATA XREF: setlocale↑r
.idata:00408218 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408218                 extrn __imp_signal:dword
.idata:00408218                                         ; DATA XREF: signal↑r
.idata:0040821C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040821C                 extrn __imp_strchr:dword
.idata:0040821C                                         ; DATA XREF: strchr↑r
.idata:00408220 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408220                 extrn __imp_strcmp:dword
.idata:00408220                                         ; DATA XREF: strcmp↑r
.idata:00408224 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408224                 extrn __imp_strerror:dword
.idata:00408224                                         ; DATA XREF: strerror↑r
.idata:00408228 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408228                 extrn __imp_strlen:dword
.idata:00408228                                         ; DATA XREF: strlen↑r
.idata:0040822C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040822C                 extrn __imp_strncmp:dword
.idata:0040822C                                         ; DATA XREF: strncmp↑r
.idata:00408230 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408230                 extrn __imp_vfprintf:dword
.idata:00408230                                         ; DATA XREF: vfprintf↑r
.idata:00408234
.idata:00408234
.idata:00408234
.idata:00408234                 end start
