.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 3498E95BCC5A71B0DD1A5296C5180D8944C74FB1748DA5DEB0EB960CBCC0C6BA
.text:00401000 ; Input MD5    : F31EEC70E2555FEF3107392D69F8BEAE
.text:00401000 ; Input CRC32  : 5B666DA3
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/hostname.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A269 (Wed Apr 20 18:41:45 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00003F90 (  16272.)
.text:00401000 ; Section size in file          : 00004000 (  16384.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401380+63↓p
.text:00401040                                         ; .text:00404C70↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404C10
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_405000
.text:004010A2                 mov     edx, dword_405050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_405004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_405070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_405070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404BE0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_405000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_405004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401380
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404C10
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401380+20↓o
.text:00401280                                         ; sub_401380+BA↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401380+3A↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401380+42↓o
.text:004012C3                                         ; sub_401380+4F↓o
.text:004012CD aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401380+73↓o
.text:004012DA a530            db '5.3.0',0            ; DATA XREF: sub_401380+87↓o
.text:004012E0 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401380+8F↓o
.text:004012EE ; const FILE stru_4012EE
.text:004012EE stru_4012EE     FILE <74736F68h, 656D616Eh, 74786500h, 6F206172h, 61726570h, \
.text:004012EE                                         ; DATA XREF: sub_401380+97↓o
.text:004012EE                                         ; sub_401380+100↓o
.text:004012EE                       2520646Eh, 90900073h, 90909090h>
.text:0040130E                 db  90h
.text:0040130F                 db  90h
.text:00401310                 db  90h
.text:00401311                 db  90h
.text:00401312                 db  90h
.text:00401313                 db  90h
.text:00401314                 db  90h
.text:00401315                 db  90h
.text:00401316                 db  90h
.text:00401317                 db  90h
.text:00401318                 db  90h
.text:00401319                 db  90h
.text:0040131A                 db  90h
.text:0040131B                 db  90h
.text:0040131C                 db  90h
.text:0040131D                 db  90h
.text:0040131E                 db  90h
.text:0040131F                 db  90h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401380:loc_4014AB↓o
.text:00401320                                         ; sub_4016B0+F↓o
.text:00401347 aCannotDetermin db 'cannot determine hostname',0
.text:00401347                                         ; DATA XREF: sub_401380:loc_40150E↓o
.text:00401361 aCannotSetNameT db 'cannot set name to `%s',27h,0
.text:00401361                                         ; DATA XREF: sub_401380:loc_401569↓o
.text:00401379                 align 10h
.text:00401380
.text:00401380 ; =============== S U B R O U T I N E =======================================
.text:00401380
.text:00401380 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401380
.text:00401380 sub_401380      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401380
.text:00401380 Category        = dword ptr -38h
.text:00401380 Locale          = dword ptr -34h
.text:00401380 var_30          = dword ptr -30h
.text:00401380 var_2C          = byte ptr -2Ch
.text:00401380 var_28          = dword ptr -28h
.text:00401380 var_24          = dword ptr -24h
.text:00401380 var_20          = byte ptr -20h
.text:00401380 var_1C          = dword ptr -1Ch
.text:00401380 arg_0           = dword ptr  8
.text:00401380 arg_4           = dword ptr  0Ch
.text:00401380
.text:00401380                 push    ebp
.text:00401381                 xor     eax, eax
.text:00401383                 mov     ebp, esp
.text:00401385                 push    edi
.text:00401386                 push    esi
.text:00401387                 push    ebx
.text:00401388                 sub     esp, 2Ch
.text:0040138B                 and     esp, 0FFFFFFF0h
.text:0040138E                 call    __alloca
.text:00401393                 mov     esi, [ebp+arg_0]
.text:00401396                 call    sub_404CB0
.text:0040139B                 mov     ebx, [ebp+arg_4]
.text:0040139E                 mov     ecx, [ebx]
.text:004013A0                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:004013A8                 mov     [esp+38h+Category], 0 ; Category
.text:004013AF                 mov     ds:dword_406190, ecx
.text:004013B5                 call    setlocale
.text:004013BA                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013C2                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013C9                 call    ds:__imp_libintl_bindtextdomain
.text:004013CF                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013D6                 call    ds:libintl_textdomain
.text:004013DC                 mov     [esp+38h+Category], offset sub_402BE0 ; void (__cdecl *)()
.text:004013E3                 call    sub_401040
.text:004013E8                 mov     [esp+38h+var_1C], 0
.text:004013F0                 mov     eax, [ebp+arg_4]
.text:004013F3                 mov     dword ptr [esp+38h+var_20], offset aJimMeyering ; "Jim Meyering"
.text:004013FB                 mov     [esp+38h+var_24], offset sub_4016B0 ; int
.text:00401403                 mov     [esp+38h+Locale], eax ; int
.text:00401407                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:0040140F                 mov     dword ptr [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:00401417                 mov     [esp+38h+var_30], offset stru_4012EE ; FILE *
.text:0040141F                 mov     [esp+38h+Category], esi ; int
.text:00401422                 call    sub_402AF0
.text:00401427                 mov     [esp+38h+var_28], 0 ; int
.text:0040142F                 mov     edx, [ebp+arg_4]
.text:00401432                 mov     dword ptr [esp+38h+var_2C], 0 ; char
.text:0040143A                 mov     [esp+38h+var_30], offset Locale ; char *
.text:00401442                 mov     [esp+38h+Locale], edx ; int
.text:00401446                 mov     [esp+38h+Category], esi ; int
.text:00401449                 call    sub_402950
.text:0040144E                 inc     eax
.text:0040144F                 jnz     short loc_4014AB
.text:00401451                 mov     edx, dword_405010
.text:00401457                 lea     edi, [edx+1]
.text:0040145A                 cmp     esi, edi
.text:0040145C                 jz      loc_401540
.text:00401462
.text:00401462 loc_401462:                             ; CODE XREF: sub_401380+1E4↓j
.text:00401462                 cmp     esi, edx
.text:00401464                 jle     loc_4014F0
.text:0040146A
.text:0040146A loc_40146A:                             ; CODE XREF: sub_401380+189↓j
.text:0040146A                 lea     ebx, [edx+1]
.text:0040146D                 cmp     ebx, esi
.text:0040146F                 jge     short loc_4014E3
.text:00401471                 mov     eax, [ebp+arg_4]
.text:00401474                 mov     edi, [eax+edx*4+4]
.text:00401478                 mov     [esp+38h+Category], edi ; char *
.text:0040147B                 call    sub_4027D0
.text:00401480                 mov     [esp+38h+Category], (offset stru_4012EE._base+1)
.text:00401487                 mov     esi, eax
.text:00401489                 call    ds:libintl_gettext
.text:0040148F                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:00401493                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:0040149B                 mov     [esp+38h+Category], 0 ; Code
.text:004014A2                 mov     [esp+38h+var_30], eax ; char *
.text:004014A6                 call    sub_4048E0
.text:004014AB
.text:004014AB loc_4014AB:                             ; CODE XREF: sub_401380+CF↑j
.text:004014AB                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004014B2                 call    ds:libintl_gettext
.text:004014B8                 mov     edx, ds:_iob
.text:004014BE                 mov     ecx, ds:dword_406190
.text:004014C4                 add     edx, 40h ; '@'
.text:004014C7                 mov     [esp+38h+var_30], ecx
.text:004014CB                 mov     [esp+38h+Locale], eax ; Format
.text:004014CF                 mov     [esp+38h+Category], edx ; Stream
.text:004014D2                 call    fprintf
.text:004014D7                 mov     [esp+38h+Category], 1 ; Code
.text:004014DE
.text:004014DE loc_4014DE:                             ; CODE XREF: sub_401380+16A↓j
.text:004014DE                 call    exit
.text:004014E3 ; ---------------------------------------------------------------------------
.text:004014E3
.text:004014E3 loc_4014E3:                             ; CODE XREF: sub_401380+EF↑j
.text:004014E3                 mov     [esp+38h+Category], 0
.text:004014EA                 jmp     short loc_4014DE
.text:004014EA ; ---------------------------------------------------------------------------
.text:004014EC                 align 10h
.text:004014F0
.text:004014F0 loc_4014F0:                             ; CODE XREF: sub_401380+E4↑j
.text:004014F0                 call    sub_402870
.text:004014F5                 test    eax, eax
.text:004014F7                 mov     edi, eax
.text:004014F9                 jz      short loc_40150E
.text:004014FB
.text:004014FB loc_4014FB:                             ; CODE XREF: sub_401380+1B8↓j
.text:004014FB                 mov     [esp+38h+Category], edi ; Buffer
.text:004014FE                 call    puts
.text:00401503                 mov     edx, dword_405010
.text:00401509                 jmp     loc_40146A
.text:0040150E ; ---------------------------------------------------------------------------
.text:0040150E
.text:0040150E loc_40150E:                             ; CODE XREF: sub_401380+179↑j
.text:0040150E                 mov     [esp+38h+Category], offset aCannotDetermin ; "cannot determine hostname"
.text:00401515                 call    ds:libintl_gettext
.text:0040151B                 mov     ebx, eax
.text:0040151D                 call    _errno
.text:00401522                 mov     [esp+38h+var_30], ebx ; char *
.text:00401526                 mov     ecx, [eax]
.text:00401528                 mov     [esp+38h+Category], 1 ; Code
.text:0040152F                 mov     [esp+38h+Locale], ecx ; ErrorMessage
.text:00401533                 call    sub_4048E0
.text:00401538                 jmp     short loc_4014FB
.text:00401538 ; ---------------------------------------------------------------------------
.text:0040153A                 align 10h
.text:00401540
.text:00401540 loc_401540:                             ; CODE XREF: sub_401380+DC↑j
.text:00401540                 mov     eax, [ebp+arg_4]
.text:00401543                 mov     edi, [eax+edx*4]
.text:00401546                 mov     [esp+38h+Category], edi ; Str
.text:00401549                 call    strlen
.text:0040154E                 mov     [esp+38h+Locale], eax
.text:00401552                 mov     [esp+38h+Category], edi
.text:00401555                 call    sub_404B80
.text:0040155A                 test    eax, eax
.text:0040155C                 jnz     short loc_401569
.text:0040155E
.text:0040155E loc_40155E:                             ; CODE XREF: sub_401380+217↓j
.text:0040155E                 mov     edx, dword_405010
.text:00401564                 jmp     loc_401462
.text:00401569 ; ---------------------------------------------------------------------------
.text:00401569
.text:00401569 loc_401569:                             ; CODE XREF: sub_401380+1DC↑j
.text:00401569                 mov     [esp+38h+Category], offset aCannotSetNameT ; "cannot set name to `%s'"
.text:00401570                 call    ds:libintl_gettext
.text:00401576                 mov     ebx, eax
.text:00401578                 call    _errno
.text:0040157D                 mov     dword ptr [esp+38h+var_2C], edi ; char
.text:00401581                 mov     [esp+38h+var_30], ebx ; char *
.text:00401585                 mov     edx, [eax]
.text:00401587                 mov     [esp+38h+Category], 1 ; Code
.text:0040158E                 mov     [esp+38h+Locale], edx ; ErrorMessage
.text:00401592                 call    sub_4048E0
.text:00401597                 jmp     short loc_40155E
.text:00401597 sub_401380      endp
.text:00401597
.text:00401597 ; ---------------------------------------------------------------------------
.text:00401599                 align 10h
.text:004015A0 aUsageSNameOrSO db 'Usage: %s [NAME]',0Ah
.text:004015A0                                         ; DATA XREF: sub_4016B0:loc_4016F3↓o
.text:004015A0                 db '  or:  %s OPTION',0Ah
.text:004015A0                 db 'Print or set the hostname of the current system.',0Ah
.text:004015A0                 db 0Ah,0
.text:004015F5                 align 10h
.text:00401600 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401600                                         ; DATA XREF: sub_4016B0+66↓o
.text:0040162D                 align 20h
.text:00401640 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401640                                         ; DATA XREF: sub_4016B0+88↓o
.text:00401676 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016B0+AA↓o
.text:00401676                 db 'Report bugs to <%s>.',0Ah,0
.text:0040168D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040168D                                         ; DATA XREF: sub_4016B0+B7↓o
.text:004016A3                 align 10h
.text:004016B0
.text:004016B0 ; =============== S U B R O U T I N E =======================================
.text:004016B0
.text:004016B0 ; Attributes: noreturn
.text:004016B0
.text:004016B0 ; void __cdecl __noreturn sub_4016B0(int Code)
.text:004016B0 sub_4016B0      proc near               ; DATA XREF: sub_401380+7B↑o
.text:004016B0
.text:004016B0 Stream          = dword ptr -1Ch
.text:004016B0 Format          = dword ptr -18h
.text:004016B0 var_14          = dword ptr -14h
.text:004016B0 var_4           = dword ptr -4
.text:004016B0 Code            = dword ptr  4
.text:004016B0
.text:004016B0                 sub     esp, 1Ch
.text:004016B3                 mov     [esp+1Ch+var_4], ebx
.text:004016B7                 mov     ebx, [esp+1Ch+Code]
.text:004016BB                 test    ebx, ebx
.text:004016BD                 jz      short loc_4016F3
.text:004016BF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004016C6                 call    ds:libintl_gettext
.text:004016CC                 mov     edx, ds:_iob
.text:004016D2                 mov     ecx, ds:dword_406190
.text:004016D8                 add     edx, 40h ; '@'
.text:004016DB                 mov     [esp+1Ch+var_14], ecx
.text:004016DF                 mov     [esp+1Ch+Format], eax ; Format
.text:004016E3                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004016E6                 call    fprintf
.text:004016EB
.text:004016EB loc_4016EB:                             ; CODE XREF: sub_4016B0+C7↓j
.text:004016EB                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004016EE                 call    exit
.text:004016F3 ; ---------------------------------------------------------------------------
.text:004016F3
.text:004016F3 loc_4016F3:                             ; CODE XREF: sub_4016B0+D↑j
.text:004016F3                 mov     [esp+1Ch+Stream], offset aUsageSNameOrSO ; "Usage: %s [NAME]\n  or:  %s OPTION\nPri"...
.text:004016FA                 call    ds:libintl_gettext
.text:00401700                 mov     ecx, ds:dword_406190
.text:00401706                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401709                 mov     [esp+1Ch+var_14], ecx
.text:0040170D                 mov     [esp+1Ch+Format], ecx
.text:00401711                 call    printf
.text:00401716                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040171D                 call    ds:libintl_gettext
.text:00401723                 mov     ecx, ds:_iob
.text:00401729                 add     ecx, 20h ; ' '
.text:0040172C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401730                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401733                 call    fputs
.text:00401738                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040173F                 call    ds:libintl_gettext
.text:00401745                 mov     ecx, ds:_iob
.text:0040174B                 add     ecx, 20h ; ' '
.text:0040174E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401752                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401755                 call    fputs
.text:0040175A                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401761                 call    ds:libintl_gettext
.text:00401767                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040176F                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401772                 call    printf
.text:00401777                 jmp     loc_4016EB
.text:00401777 sub_4016B0      endp
.text:00401777
.text:00401777 ; ---------------------------------------------------------------------------
.text:0040177C                 align 10h
.text:00401780 dword_401780    dd 90002D2Dh, 7 dup(90909090h)
.text:00401780                                         ; DATA XREF: sub_4019D0+E4↓o
.text:004017A0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004017A0                                         ; DATA XREF: sub_4019D0+2FC↓o
.text:004017CD                 align 20h
.text:004017E0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004017E0                                         ; DATA XREF: sub_4019D0:loc_401D32↓o
.text:0040180D                 align 20h
.text:00401820 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401820                                         ; DATA XREF: sub_4019D0:loc_401DD0↓o
.text:00401820                                         ; sub_4019D0:loc_402197↓o
.text:00401846                 align 20h
.text:00401860 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401860                                         ; DATA XREF: sub_4019D0+48E↓o
.text:00401880 dword_401880    dd 90909000h, 7 dup(90909090h)
.text:00401880                                         ; DATA XREF: sub_4019D0:loc_401EA1↓o
.text:004018A0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004018A0                                         ; DATA XREF: sub_4019D0:loc_401EBA↓o
.text:004018C0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004018C0                                         ; DATA XREF: sub_4019D0:loc_401F9F↓o
.text:004018C0                                         ; sub_4019D0:loc_4022CC↓o
.text:004018E7                 align 20h
.text:00401900 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401900                                         ; DATA XREF: sub_4019D0:loc_402113↓o
.text:0040192E                 align 20h
.text:00401940 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401940                                         ; DATA XREF: sub_4019D0:loc_4021FF↓o
.text:00401961 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401961                                         ; DATA XREF: sub_4019D0+93F↓o
.text:0040197B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040197B                                         ; DATA XREF: sub_4019D0:loc_402347↓o
.text:00401995 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401995                                         ; DATA XREF: sub_4019D0:loc_40236E↓o
.text:004019B3 ; const char VarName[]
.text:004019B3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4019D0:loc_402520↓o
.text:004019C3                 align 10h
.text:004019D0
.text:004019D0 ; =============== S U B R O U T I N E =======================================
.text:004019D0
.text:004019D0
.text:004019D0 ; int __cdecl sub_4019D0(int, int, char *Str, int, int, int, int, int)
.text:004019D0 sub_4019D0      proc near               ; CODE XREF: sub_402560+5A↓p
.text:004019D0                                         ; .text:0040264A↓p ...
.text:004019D0
.text:004019D0 Str1            = dword ptr -5Ch
.text:004019D0 Str2            = dword ptr -58h
.text:004019D0 MaxCount        = dword ptr -54h
.text:004019D0 var_50          = dword ptr -50h
.text:004019D0 var_4C          = dword ptr -4Ch
.text:004019D0 var_3C          = dword ptr -3Ch
.text:004019D0 var_38          = dword ptr -38h
.text:004019D0 var_34          = dword ptr -34h
.text:004019D0 var_30          = dword ptr -30h
.text:004019D0 var_2C          = dword ptr -2Ch
.text:004019D0 var_28          = dword ptr -28h
.text:004019D0 var_24          = dword ptr -24h
.text:004019D0 var_20          = dword ptr -20h
.text:004019D0 var_1C          = dword ptr -1Ch
.text:004019D0 var_18          = dword ptr -18h
.text:004019D0 var_14          = dword ptr -14h
.text:004019D0 arg_0           = dword ptr  4
.text:004019D0 arg_4           = dword ptr  8
.text:004019D0 Str             = dword ptr  0Ch
.text:004019D0 arg_C           = dword ptr  10h
.text:004019D0 arg_10          = dword ptr  14h
.text:004019D0 arg_14          = dword ptr  18h
.text:004019D0 arg_18          = dword ptr  1Ch
.text:004019D0 arg_1C          = dword ptr  20h
.text:004019D0
.text:004019D0                 push    ebp
.text:004019D1                 mov     eax, 0FFFFFFFFh
.text:004019D6                 push    edi
.text:004019D7                 push    esi
.text:004019D8                 push    ebx
.text:004019D9                 sub     esp, 4Ch
.text:004019DC                 mov     esi, [esp+5Ch+Str]
.text:004019E0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004019E4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004019E7                 mov     ebx, [ebp+4]
.text:004019EA                 setz    dl
.text:004019ED                 movzx   ecx, dl
.text:004019F0                 dec     ecx
.text:004019F1                 and     ecx, ebx
.text:004019F3                 mov     [esp+5Ch+var_14], ecx
.text:004019F7                 mov     ecx, [esp+5Ch+arg_0]
.text:004019FB                 test    ecx, ecx
.text:004019FD                 jle     loc_401B27
.text:00401A03                 mov     dword ptr [ebp+0Ch], 0
.text:00401A0A                 mov     ebx, [ebp+0]
.text:00401A0D                 test    ebx, ebx
.text:00401A0F                 jz      loc_402540
.text:00401A15                 mov     edi, [ebp+10h]
.text:00401A18                 test    edi, edi
.text:00401A1A                 jnz     short loc_401A73
.text:00401A1C                 lea     esi, [esi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_4019D0+B7C↓j
.text:00401A20                 mov     [ebp+24h], ebx
.text:00401A23                 mov     esi, [esp+5Ch+Str]
.text:00401A27                 mov     [ebp+20h], ebx
.text:00401A2A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401A2E                 xor     ebx, ebx
.text:00401A30                 mov     dword ptr [ebp+14h], 0
.text:00401A37                 test    ecx, ecx
.text:00401A39                 jz      loc_402520
.text:00401A3F
.text:00401A3F loc_401A3F:                             ; CODE XREF: sub_4019D0+B64↓j
.text:00401A3F                 mov     ebx, 1
.text:00401A44
.text:00401A44 loc_401A44:                             ; CODE XREF: sub_4019D0+B5E↓j
.text:00401A44                 mov     [ebp+1Ch], ebx
.text:00401A47                 mov     ecx, [esp+5Ch+Str]
.text:00401A4B                 movzx   eax, byte ptr [ecx]
.text:00401A4E                 cmp     al, 2Dh ; '-'
.text:00401A50                 jz      loc_402510
.text:00401A56                 cmp     al, 2Bh ; '+'
.text:00401A58                 jz      loc_4024F9
.text:00401A5E                 xor     edx, edx
.text:00401A60                 test    ebx, ebx
.text:00401A62                 setz    dl
.text:00401A65                 mov     [ebp+18h], edx
.text:00401A68
.text:00401A68 loc_401A68:                             ; CODE XREF: sub_4019D0+B35↓j
.text:00401A68                 mov     [esp+5Ch+Str], esi
.text:00401A6C                 mov     dword ptr [ebp+10h], 1
.text:00401A73
.text:00401A73 loc_401A73:                             ; CODE XREF: sub_4019D0+4A↑j
.text:00401A73                 mov     eax, [ebp+14h]
.text:00401A76                 test    eax, eax
.text:00401A78                 jz      short loc_401A83
.text:00401A7A                 cmp     byte ptr [eax], 0
.text:00401A7D                 jnz     loc_401B60
.text:00401A83
.text:00401A83 loc_401A83:                             ; CODE XREF: sub_4019D0+A8↑j
.text:00401A83                 mov     ebx, [ebp+0]
.text:00401A86                 cmp     [ebp+24h], ebx
.text:00401A89                 jle     short loc_401A8E
.text:00401A8B                 mov     [ebp+24h], ebx
.text:00401A8E
.text:00401A8E loc_401A8E:                             ; CODE XREF: sub_4019D0+B9↑j
.text:00401A8E                 cmp     [ebp+20h], ebx
.text:00401A91                 jle     short loc_401A96
.text:00401A93                 mov     [ebp+20h], ebx
.text:00401A96
.text:00401A96 loc_401A96:                             ; CODE XREF: sub_4019D0+C1↑j
.text:00401A96                 cmp     dword ptr [ebp+18h], 1
.text:00401A9A                 jz      loc_402470
.text:00401AA0
.text:00401AA0 loc_401AA0:                             ; CODE XREF: sub_4019D0+B13↓j
.text:00401AA0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401AA4                 jz      loc_402454
.text:00401AAA                 cld
.text:00401AAB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401AAF                 mov     edx, 3
.text:00401AB4                 mov     edi, offset dword_401780
.text:00401AB9                 mov     esi, [ecx+ebx*4]
.text:00401ABC                 mov     ecx, edx
.text:00401ABE                 repe cmpsb
.text:00401AC0                 jnz     short loc_401AFC
.text:00401AC2                 mov     edx, [ebp+24h]
.text:00401AC5                 lea     eax, [ebx+1]
.text:00401AC8                 cmp     [ebp+20h], edx
.text:00401ACB                 mov     [ebp+0], eax
.text:00401ACE                 jz      loc_402468
.text:00401AD4                 cmp     edx, eax
.text:00401AD6                 jz      short loc_401AF0
.text:00401AD8                 mov     [esp+5Ch+Str2], ebp
.text:00401ADC                 mov     ebx, [esp+5Ch+arg_4]
.text:00401AE0                 mov     [esp+5Ch+Str1], ebx
.text:00401AE3                 call    sub_402680
.text:00401AE8                 nop
.text:00401AE9                 lea     esi, [esi+0]
.text:00401AF0
.text:00401AF0 loc_401AF0:                             ; CODE XREF: sub_4019D0+106↑j
.text:00401AF0                                         ; sub_4019D0+A9B↓j
.text:00401AF0                 mov     eax, [esp+5Ch+arg_0]
.text:00401AF4                 mov     ebx, eax
.text:00401AF6                 mov     [ebp+24h], eax
.text:00401AF9                 mov     [ebp+0], eax
.text:00401AFC
.text:00401AFC loc_401AFC:                             ; CODE XREF: sub_4019D0+F0↑j
.text:00401AFC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401B00                 jz      loc_402454
.text:00401B06                 mov     esi, [esp+5Ch+arg_4]
.text:00401B0A                 mov     eax, [esi+ebx*4]
.text:00401B0D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401B10                 jz      short loc_401B37
.text:00401B12
.text:00401B12 loc_401B12:                             ; CODE XREF: sub_4019D0+16D↓j
.text:00401B12                 mov     edx, [ebp+18h]
.text:00401B15                 test    edx, edx
.text:00401B17                 jz      short loc_401B30
.text:00401B19                 mov     [ebp+0Ch], eax
.text:00401B1C                 lea     edi, [ebx+1]
.text:00401B1F                 mov     eax, 1
.text:00401B24                 mov     [ebp+0], edi
.text:00401B27
.text:00401B27 loc_401B27:                             ; CODE XREF: sub_4019D0+2D↑j
.text:00401B27                                         ; sub_4019D0+165↓j ...
.text:00401B27                 add     esp, 4Ch
.text:00401B2A                 pop     ebx
.text:00401B2B                 pop     esi
.text:00401B2C                 pop     edi
.text:00401B2D                 pop     ebp
.text:00401B2E                 retn
.text:00401B2E ; ---------------------------------------------------------------------------
.text:00401B2F                 align 10h
.text:00401B30
.text:00401B30 loc_401B30:                             ; CODE XREF: sub_4019D0+147↑j
.text:00401B30                                         ; sub_4019D0+A8A↓j ...
.text:00401B30                 mov     eax, 0FFFFFFFFh
.text:00401B35                 jmp     short loc_401B27
.text:00401B37 ; ---------------------------------------------------------------------------
.text:00401B37
.text:00401B37 loc_401B37:                             ; CODE XREF: sub_4019D0+140↑j
.text:00401B37                 movzx   edx, byte ptr [eax+1]
.text:00401B3B                 test    dl, dl
.text:00401B3D                 jz      short loc_401B12
.text:00401B3F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401B43                 xor     ecx, ecx
.text:00401B45                 test    ebx, ebx
.text:00401B47                 jz      short loc_401B52
.text:00401B49                 cmp     dl, 2Dh ; '-'
.text:00401B4C                 jz      loc_40244A
.text:00401B52
.text:00401B52 loc_401B52:                             ; CODE XREF: sub_4019D0+177↑j
.text:00401B52                                         ; sub_4019D0+A7F↓j
.text:00401B52                 lea     esi, [ecx+eax+1]
.text:00401B56                 mov     [ebp+14h], esi
.text:00401B59                 lea     esi, [esi+0]
.text:00401B60
.text:00401B60 loc_401B60:                             ; CODE XREF: sub_4019D0+AD↑j
.text:00401B60                 mov     ecx, [esp+5Ch+arg_C]
.text:00401B64                 test    ecx, ecx
.text:00401B66                 jz      loc_401EF0
.text:00401B6C                 mov     edx, [ebp+0]
.text:00401B6F                 mov     edi, [esp+5Ch+arg_4]
.text:00401B73                 mov     eax, [edi+edx*4]
.text:00401B76                 movzx   edx, byte ptr [eax+1]
.text:00401B7A                 cmp     dl, 2Dh ; '-'
.text:00401B7D                 jz      short loc_401B95
.text:00401B7F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401B83                 test    ebx, ebx
.text:00401B85                 jz      loc_401EF0
.text:00401B8B                 cmp     byte ptr [eax+2], 0
.text:00401B8F                 jz      loc_40242A
.text:00401B95
.text:00401B95 loc_401B95:                             ; CODE XREF: sub_4019D0+1AD↑j
.text:00401B95                                         ; sub_4019D0+A75↓j
.text:00401B95                 mov     [esp+5Ch+var_18], 0
.text:00401B9D                 mov     ecx, [ebp+14h]
.text:00401BA0                 mov     [esp+5Ch+var_1C], 0
.text:00401BA8                 mov     [esp+5Ch+var_20], 0
.text:00401BB0                 mov     edi, ecx
.text:00401BB2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401BBA                 movzx   eax, byte ptr [ecx]
.text:00401BBD                 test    al, al
.text:00401BBF                 jz      short loc_401BDC
.text:00401BC1                 cmp     al, 3Dh ; '='
.text:00401BC3                 jz      short loc_401BDC
.text:00401BC5                 lea     esi, [esi+0]
.text:00401BC9                 lea     edi, [edi+0]
.text:00401BD0
.text:00401BD0 loc_401BD0:                             ; CODE XREF: sub_4019D0+20A↓j
.text:00401BD0                 inc     edi
.text:00401BD1                 movzx   eax, byte ptr [edi]
.text:00401BD4                 test    al, al
.text:00401BD6                 jz      short loc_401BDC
.text:00401BD8                 cmp     al, 3Dh ; '='
.text:00401BDA                 jnz     short loc_401BD0
.text:00401BDC
.text:00401BDC loc_401BDC:                             ; CODE XREF: sub_4019D0+1EF↑j
.text:00401BDC                                         ; sub_4019D0+1F3↑j ...
.text:00401BDC                 mov     [esp+5Ch+var_28], 0
.text:00401BE4                 mov     esi, [esp+5Ch+arg_C]
.text:00401BE8                 mov     ebx, [esi]
.text:00401BEA                 test    ebx, ebx
.text:00401BEC                 mov     edx, ebx
.text:00401BEE                 jz      loc_401E10
.text:00401BF4                 lea     esi, [esi+0]
.text:00401BFA                 lea     edi, [edi+0]
.text:00401C00
.text:00401C00 loc_401C00:                             ; CODE XREF: sub_4019D0+25E↓j
.text:00401C00                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401C04                 mov     ebx, edi
.text:00401C06                 sub     ebx, ecx
.text:00401C08                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401C0C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401C0F                 call    strncmp
.text:00401C14                 test    eax, eax
.text:00401C16                 jz      loc_4023A6
.text:00401C1C
.text:00401C1C loc_401C1C:                             ; CODE XREF: sub_4019D0+A0F↓j
.text:00401C1C                                         ; sub_4019D0+A24↓j ...
.text:00401C1C                 inc     [esp+5Ch+var_28]
.text:00401C20                 add     esi, 10h
.text:00401C23                 mov     ecx, [esi]
.text:00401C25                 test    ecx, ecx
.text:00401C27                 mov     edx, ecx
.text:00401C29                 jz      short loc_401C30
.text:00401C2B                 mov     ecx, [ebp+14h]
.text:00401C2E                 jmp     short loc_401C00
.text:00401C30 ; ---------------------------------------------------------------------------
.text:00401C30
.text:00401C30 loc_401C30:                             ; CODE XREF: sub_4019D0+259↑j
.text:00401C30                                         ; sub_4019D0+A55↓j
.text:00401C30                 mov     esi, [esp+5Ch+var_20]
.text:00401C34                 test    esi, esi
.text:00401C36                 jz      short loc_401C44
.text:00401C38                 mov     edx, [esp+5Ch+var_1C]
.text:00401C3C                 test    edx, edx
.text:00401C3E                 jz      loc_402350
.text:00401C44
.text:00401C44 loc_401C44:                             ; CODE XREF: sub_4019D0+266↑j
.text:00401C44                 mov     eax, [esp+5Ch+var_18]
.text:00401C48                 test    eax, eax
.text:00401C4A                 jz      loc_401E10
.text:00401C50                 mov     ecx, [ebp+0]
.text:00401C53                 lea     eax, [ecx+1]
.text:00401C56                 mov     [ebp+0], eax
.text:00401C59                 cmp     byte ptr [edi], 0
.text:00401C5C                 jz      loc_401D70
.text:00401C62                 mov     ecx, [esp+5Ch+var_18]
.text:00401C66                 mov     esi, [ecx+4]
.text:00401C69                 test    esi, esi
.text:00401C6B                 jz      short loc_401CB6
.text:00401C6D                 lea     ebx, [edi+1]
.text:00401C70                 mov     [ebp+0Ch], ebx
.text:00401C73
.text:00401C73 loc_401C73:                             ; CODE XREF: sub_4019D0+3A8↓j
.text:00401C73                                         ; sub_4019D0+3C4↓j
.text:00401C73                 mov     ebx, [ebp+14h]
.text:00401C76                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401C79                 call    strlen
.text:00401C7E                 add     [ebp+14h], eax
.text:00401C81                 mov     esi, [esp+5Ch+arg_10]
.text:00401C85                 test    esi, esi
.text:00401C87                 jz      short loc_401C93
.text:00401C89                 mov     ebp, [esp+5Ch+var_24]
.text:00401C8D                 mov     ecx, [esp+5Ch+arg_10]
.text:00401C91                 mov     [ecx], ebp
.text:00401C93
.text:00401C93 loc_401C93:                             ; CODE XREF: sub_4019D0+2B7↑j
.text:00401C93                 mov     eax, [esp+5Ch+var_18]
.text:00401C97                 mov     ecx, [eax+8]
.text:00401C9A                 test    ecx, ecx
.text:00401C9C                 jnz     short loc_401CAA
.text:00401C9E                 mov     ecx, [esp+5Ch+var_18]
.text:00401CA2
.text:00401CA2 loc_401CA2:                             ; CODE XREF: sub_4019D0+723↓j
.text:00401CA2                 mov     eax, [ecx+0Ch]
.text:00401CA5                 jmp     loc_401B27
.text:00401CAA ; ---------------------------------------------------------------------------
.text:00401CAA
.text:00401CAA loc_401CAA:                             ; CODE XREF: sub_4019D0+2CC↑j
.text:00401CAA                                         ; sub_4019D0+719↓j
.text:00401CAA                 mov     esi, [eax+0Ch]
.text:00401CAD                 xor     eax, eax
.text:00401CAF                 mov     [ecx], esi
.text:00401CB1                 jmp     loc_401B27
.text:00401CB6 ; ---------------------------------------------------------------------------
.text:00401CB6
.text:00401CB6 loc_401CB6:                             ; CODE XREF: sub_4019D0+29B↑j
.text:00401CB6                 mov     edi, [esp+5Ch+var_14]
.text:00401CBA                 test    edi, edi
.text:00401CBC                 jz      short loc_401D10
.text:00401CBE                 mov     esi, [esp+5Ch+arg_4]
.text:00401CC2                 mov     edx, [esi+eax*4-4]
.text:00401CC6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401CCA                 jz      short loc_401D32
.text:00401CCC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401CD3                 call    ds:libintl_gettext
.text:00401CD9                 mov     edx, [esp+5Ch+var_18]
.text:00401CDD                 mov     edi, [edx]
.text:00401CDF                 mov     [esp+5Ch+var_4C], edi
.text:00401CE3                 mov     ebx, [ebp+0]
.text:00401CE6                 mov     edi, [esp+5Ch+arg_4]
.text:00401CEA                 mov     ecx, [edi+ebx*4-4]
.text:00401CEE                 movsx   esi, byte ptr [ecx]
.text:00401CF1                 mov     ecx, ds:_iob
.text:00401CF7                 add     ecx, 40h ; '@'
.text:00401CFA                 mov     [esp+5Ch+var_50], esi
.text:00401CFE                 mov     ebx, [edi]
.text:00401D00                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D04                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D07                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D0B                 call    fprintf
.text:00401D10
.text:00401D10 loc_401D10:                             ; CODE XREF: sub_4019D0+2EC↑j
.text:00401D10                                         ; sub_4019D0+398↓j
.text:00401D10                 mov     ecx, [ebp+14h]
.text:00401D13                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401D16                 call    strlen
.text:00401D1B                 add     [ebp+14h], eax
.text:00401D1E                 mov     eax, [esp+5Ch+var_18]
.text:00401D22                 mov     esi, [eax+0Ch]
.text:00401D25                 mov     [ebp+8], esi
.text:00401D28
.text:00401D28 loc_401D28:                             ; CODE XREF: sub_4019D0+4E5↓j
.text:00401D28                                         ; sub_4019D0+73E↓j ...
.text:00401D28                 mov     eax, 3Fh ; '?'
.text:00401D2D                 jmp     loc_401B27
.text:00401D32 ; ---------------------------------------------------------------------------
.text:00401D32
.text:00401D32 loc_401D32:                             ; CODE XREF: sub_4019D0+2FA↑j
.text:00401D32                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401D39                 call    ds:libintl_gettext
.text:00401D3F                 mov     edx, [esp+5Ch+var_18]
.text:00401D43                 mov     edi, [esp+5Ch+arg_4]
.text:00401D47                 mov     ecx, ds:_iob
.text:00401D4D                 mov     esi, [edx]
.text:00401D4F                 add     ecx, 40h ; '@'
.text:00401D52                 mov     [esp+5Ch+var_50], esi
.text:00401D56                 mov     ebx, [edi]
.text:00401D58                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D5C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D5F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D63                 call    fprintf
.text:00401D68                 jmp     short loc_401D10
.text:00401D68 ; ---------------------------------------------------------------------------
.text:00401D6A                 align 10h
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_4019D0+28C↑j
.text:00401D70                 mov     ebx, [esp+5Ch+var_18]
.text:00401D74                 cmp     dword ptr [ebx+4], 1
.text:00401D78                 jnz     loc_401C73
.text:00401D7E                 cmp     eax, [esp+5Ch+arg_0]
.text:00401D82                 jge     short loc_401D99
.text:00401D84                 mov     ebx, [esp+5Ch+arg_4]
.text:00401D88                 lea     edi, [ecx+2]
.text:00401D8B                 mov     [ebp+0], edi
.text:00401D8E                 mov     esi, [ebx+eax*4]
.text:00401D91                 mov     [ebp+0Ch], esi
.text:00401D94                 jmp     loc_401C73
.text:00401D99 ; ---------------------------------------------------------------------------
.text:00401D99
.text:00401D99 loc_401D99:                             ; CODE XREF: sub_4019D0+3B2↑j
.text:00401D99                 mov     edx, [esp+5Ch+var_14]
.text:00401D9D                 test    edx, edx
.text:00401D9F                 jnz     short loc_401DD0
.text:00401DA1
.text:00401DA1 loc_401DA1:                             ; CODE XREF: sub_4019D0+437↓j
.text:00401DA1                 mov     edx, [ebp+14h]
.text:00401DA4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401DA7                 call    strlen
.text:00401DAC                 add     [ebp+14h], eax
.text:00401DAF                 mov     eax, [esp+5Ch+var_18]
.text:00401DB3                 mov     edi, [eax+0Ch]
.text:00401DB6                 mov     [ebp+8], edi
.text:00401DB9
.text:00401DB9 loc_401DB9:                             ; CODE XREF: sub_4019D0+7C2↓j
.text:00401DB9                 mov     ebp, [esp+5Ch+Str]
.text:00401DBD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401DC1                 setnz   bl
.text:00401DC4                 movzx   esi, bl
.text:00401DC7                 lea     eax, [esi+esi*4+3Ah]
.text:00401DCB                 jmp     loc_401B27
.text:00401DD0 ; ---------------------------------------------------------------------------
.text:00401DD0
.text:00401DD0 loc_401DD0:                             ; CODE XREF: sub_4019D0+3CF↑j
.text:00401DD0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401DD7                 call    ds:libintl_gettext
.text:00401DDD                 mov     ecx, [ebp+0]
.text:00401DE0                 mov     esi, [esp+5Ch+arg_4]
.text:00401DE4                 mov     ebx, [esi+ecx*4-4]
.text:00401DE8                 mov     ecx, ds:_iob
.text:00401DEE                 mov     [esp+5Ch+var_50], ebx
.text:00401DF2                 mov     edi, [esi]
.text:00401DF4                 add     ecx, 40h ; '@'
.text:00401DF7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401DFB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401DFE                 mov     [esp+5Ch+MaxCount], edi
.text:00401E02                 call    fprintf
.text:00401E07                 jmp     short loc_401DA1
.text:00401E07 ; ---------------------------------------------------------------------------
.text:00401E09                 align 10h
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_4019D0+21E↑j
.text:00401E10                                         ; sub_4019D0+27A↑j
.text:00401E10                 mov     eax, [esp+5Ch+arg_14]
.text:00401E14                 test    eax, eax
.text:00401E16                 jz      short loc_401E46
.text:00401E18                 mov     ebx, [ebp+0]
.text:00401E1B                 mov     esi, [esp+5Ch+arg_4]
.text:00401E1F                 mov     edi, [esi+ebx*4]
.text:00401E22                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E26                 jz      short loc_401E49
.text:00401E28                 mov     ecx, [ebp+14h]
.text:00401E2B                 mov     edx, [esp+5Ch+Str]
.text:00401E2F                 movsx   ebx, byte ptr [ecx]
.text:00401E32                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401E35                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401E39                 call    strchr
.text:00401E3E                 test    eax, eax
.text:00401E40                 jnz     loc_401EF0
.text:00401E46
.text:00401E46 loc_401E46:                             ; CODE XREF: sub_4019D0+446↑j
.text:00401E46                 mov     ebx, [ebp+0]
.text:00401E49
.text:00401E49 loc_401E49:                             ; CODE XREF: sub_4019D0+456↑j
.text:00401E49                 mov     eax, [esp+5Ch+var_14]
.text:00401E4D                 test    eax, eax
.text:00401E4F                 jz      short loc_401EA1
.text:00401E51                 mov     esi, [esp+5Ch+arg_4]
.text:00401E55                 mov     edi, [esi+ebx*4]
.text:00401E58                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E5C                 jz      short loc_401EBA
.text:00401E5E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401E65                 call    ds:libintl_gettext
.text:00401E6B                 mov     edi, [ebp+14h]
.text:00401E6E                 mov     [esp+5Ch+var_4C], edi
.text:00401E72                 mov     ebx, [ebp+0]
.text:00401E75                 mov     edi, [esp+5Ch+arg_4]
.text:00401E79                 mov     esi, [edi+ebx*4]
.text:00401E7C                 movsx   ecx, byte ptr [esi]
.text:00401E7F                 mov     esi, ds:_iob
.text:00401E85                 add     esi, 40h ; '@'
.text:00401E88                 mov     [esp+5Ch+var_50], ecx
.text:00401E8C                 mov     ebx, [edi]
.text:00401E8E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E92                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401E95                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E99                 call    fprintf
.text:00401E9E
.text:00401E9E loc_401E9E:                             ; CODE XREF: sub_4019D0+51D↓j
.text:00401E9E                 mov     ebx, [ebp+0]
.text:00401EA1
.text:00401EA1 loc_401EA1:                             ; CODE XREF: sub_4019D0+47F↑j
.text:00401EA1                 mov     dword ptr [ebp+14h], offset dword_401880
.text:00401EA8                 lea     edx, [ebx+1]
.text:00401EAB                 mov     [ebp+0], edx
.text:00401EAE
.text:00401EAE loc_401EAE:                             ; CODE XREF: sub_4019D0+999↓j
.text:00401EAE                 mov     dword ptr [ebp+8], 0
.text:00401EB5                 jmp     loc_401D28
.text:00401EBA ; ---------------------------------------------------------------------------
.text:00401EBA
.text:00401EBA loc_401EBA:                             ; CODE XREF: sub_4019D0+48C↑j
.text:00401EBA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401EC1                 call    ds:libintl_gettext
.text:00401EC7                 mov     ecx, [ebp+14h]
.text:00401ECA                 mov     edi, [esp+5Ch+arg_4]
.text:00401ECE                 mov     edx, ds:_iob
.text:00401ED4                 mov     [esp+5Ch+var_50], ecx
.text:00401ED8                 mov     ebx, [edi]
.text:00401EDA                 add     edx, 40h ; '@'
.text:00401EDD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401EE1                 mov     [esp+5Ch+MaxCount], ebx
.text:00401EE5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401EE8                 call    fprintf
.text:00401EED                 jmp     short loc_401E9E
.text:00401EED ; ---------------------------------------------------------------------------
.text:00401EEF                 align 10h
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_4019D0+196↑j
.text:00401EF0                                         ; sub_4019D0+1B5↑j ...
.text:00401EF0                 mov     esi, [ebp+14h]
.text:00401EF3                 movzx   ebx, byte ptr [esi]
.text:00401EF6                 inc     esi
.text:00401EF7                 mov     [ebp+14h], esi
.text:00401EFA                 mov     ecx, [esp+5Ch+Str]
.text:00401EFE                 movsx   esi, bl
.text:00401F01                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401F05                 mov     edi, esi
.text:00401F07                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401F0A                 call    strchr
.text:00401F0F                 mov     ecx, [ebp+14h]
.text:00401F12                 cmp     byte ptr [ecx], 0
.text:00401F15                 jnz     short loc_401F1A
.text:00401F17                 inc     dword ptr [ebp+0]
.text:00401F1A
.text:00401F1A loc_401F1A:                             ; CODE XREF: sub_4019D0+545↑j
.text:00401F1A                 test    eax, eax
.text:00401F1C                 jz      loc_402300
.text:00401F22                 cmp     bl, 3Ah ; ':'
.text:00401F25                 jz      loc_402300
.text:00401F2B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401F2E                 jz      loc_401FE6
.text:00401F34                 movzx   edx, byte ptr [eax+1]
.text:00401F38
.text:00401F38 loc_401F38:                             ; CODE XREF: sub_4019D0+61D↓j
.text:00401F38                 cmp     dl, 3Ah ; ':'
.text:00401F3B                 jz      short loc_401F44
.text:00401F3D
.text:00401F3D loc_401F3D:                             ; CODE XREF: sub_4019D0+590↓j
.text:00401F3D                 mov     eax, esi
.text:00401F3F                 jmp     loc_401B27
.text:00401F44 ; ---------------------------------------------------------------------------
.text:00401F44
.text:00401F44 loc_401F44:                             ; CODE XREF: sub_4019D0+56B↑j
.text:00401F44                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401F48                 jz      loc_401FD1
.text:00401F4E                 cmp     byte ptr [ecx], 0
.text:00401F51                 jz      short loc_401F62
.text:00401F53
.text:00401F53 loc_401F53:                             ; CODE XREF: sub_4019D0+604↓j
.text:00401F53                 inc     dword ptr [ebp+0]
.text:00401F56                 mov     [ebp+0Ch], ecx
.text:00401F59
.text:00401F59 loc_401F59:                             ; CODE XREF: sub_4019D0+5AB↓j
.text:00401F59                                         ; sub_4019D0+5C6↓j ...
.text:00401F59                 mov     dword ptr [ebp+14h], 0
.text:00401F60                 jmp     short loc_401F3D
.text:00401F62 ; ---------------------------------------------------------------------------
.text:00401F62
.text:00401F62 loc_401F62:                             ; CODE XREF: sub_4019D0+581↑j
.text:00401F62                 mov     ecx, [ebp+0]
.text:00401F65                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401F69                 jz      short loc_401F7D
.text:00401F6B                 mov     eax, [esp+5Ch+arg_4]
.text:00401F6F                 lea     edx, [ecx+1]
.text:00401F72                 mov     [ebp+0], edx
.text:00401F75                 mov     ebx, [eax+ecx*4]
.text:00401F78                 mov     [ebp+0Ch], ebx
.text:00401F7B                 jmp     short loc_401F59
.text:00401F7D ; ---------------------------------------------------------------------------
.text:00401F7D
.text:00401F7D loc_401F7D:                             ; CODE XREF: sub_4019D0+599↑j
.text:00401F7D                 mov     ecx, [esp+5Ch+var_14]
.text:00401F81                 test    ecx, ecx
.text:00401F83                 jnz     short loc_401F9F
.text:00401F85
.text:00401F85 loc_401F85:                             ; CODE XREF: sub_4019D0+5FF↓j
.text:00401F85                 mov     [ebp+8], edi
.text:00401F88                 mov     edi, [esp+5Ch+Str]
.text:00401F8C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401F8F                 jz      short loc_401F98
.text:00401F91                 mov     esi, 3Fh ; '?'
.text:00401F96                 jmp     short loc_401F59
.text:00401F98 ; ---------------------------------------------------------------------------
.text:00401F98
.text:00401F98 loc_401F98:                             ; CODE XREF: sub_4019D0+5BF↑j
.text:00401F98                 mov     esi, 3Ah ; ':'
.text:00401F9D                 jmp     short loc_401F59
.text:00401F9F ; ---------------------------------------------------------------------------
.text:00401F9F
.text:00401F9F loc_401F9F:                             ; CODE XREF: sub_4019D0+5B3↑j
.text:00401F9F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401FA6                 call    ds:libintl_gettext
.text:00401FAC                 mov     [esp+5Ch+var_50], edi
.text:00401FB0                 mov     ebx, [esp+5Ch+arg_4]
.text:00401FB4                 mov     edx, ds:_iob
.text:00401FBA                 mov     esi, [ebx]
.text:00401FBC                 add     edx, 40h ; '@'
.text:00401FBF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401FC3                 mov     [esp+5Ch+MaxCount], esi
.text:00401FC7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401FCA                 call    fprintf
.text:00401FCF                 jmp     short loc_401F85
.text:00401FD1 ; ---------------------------------------------------------------------------
.text:00401FD1
.text:00401FD1 loc_401FD1:                             ; CODE XREF: sub_4019D0+578↑j
.text:00401FD1                 cmp     byte ptr [ecx], 0
.text:00401FD4                 jnz     loc_401F53
.text:00401FDA                 mov     dword ptr [ebp+0Ch], 0
.text:00401FE1                 jmp     loc_401F59
.text:00401FE6 ; ---------------------------------------------------------------------------
.text:00401FE6
.text:00401FE6 loc_401FE6:                             ; CODE XREF: sub_4019D0+55E↑j
.text:00401FE6                 movzx   edx, byte ptr [eax+1]
.text:00401FEA                 cmp     dl, 3Bh ; ';'
.text:00401FED                 jnz     loc_401F38
.text:00401FF3                 mov     [esp+5Ch+var_2C], 0
.text:00401FFB                 mov     [esp+5Ch+var_30], 0
.text:00402003                 mov     [esp+5Ch+var_34], 0
.text:0040200B                 mov     [esp+5Ch+var_38], 0
.text:00402013                 cmp     byte ptr [ecx], 0
.text:00402016                 jz      loc_40228B
.text:0040201C                 inc     dword ptr [ebp+0]
.text:0040201F                 mov     [ebp+0Ch], ecx
.text:00402022
.text:00402022 loc_402022:                             ; CODE XREF: sub_4019D0+8D4↓j
.text:00402022                 mov     edi, [ebp+0Ch]
.text:00402025                 mov     [ebp+14h], edi
.text:00402028                 movzx   eax, byte ptr [edi]
.text:0040202B                 test    al, al
.text:0040202D                 jz      short loc_40203F
.text:0040202F                 cmp     al, 3Dh ; '='
.text:00402031                 jz      short loc_40203F
.text:00402033
.text:00402033 loc_402033:                             ; CODE XREF: sub_4019D0+66D↓j
.text:00402033                 inc     edi
.text:00402034                 movzx   eax, byte ptr [edi]
.text:00402037                 test    al, al
.text:00402039                 jz      short loc_40203F
.text:0040203B                 cmp     al, 3Dh ; '='
.text:0040203D                 jnz     short loc_402033
.text:0040203F
.text:0040203F loc_40203F:                             ; CODE XREF: sub_4019D0+65D↑j
.text:0040203F                                         ; sub_4019D0+661↑j ...
.text:0040203F                 mov     [esp+5Ch+var_3C], 0
.text:00402047                 mov     esi, [esp+5Ch+arg_C]
.text:0040204B                 mov     eax, [esi]
.text:0040204D                 test    eax, eax
.text:0040204F                 jz      loc_4021D0
.text:00402055                 mov     ecx, eax
.text:00402057
.text:00402057 loc_402057:                             ; CODE XREF: sub_4019D0+6B3↓j
.text:00402057                 mov     ebx, [ebp+14h]
.text:0040205A                 mov     eax, edi
.text:0040205C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040205F                 sub     eax, ebx
.text:00402061                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402065                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402069                 call    strncmp
.text:0040206E                 test    eax, eax
.text:00402070                 jz      loc_402237
.text:00402076
.text:00402076 loc_402076:                             ; CODE XREF: sub_4019D0+88C↓j
.text:00402076                                         ; sub_4019D0+89D↓j
.text:00402076                 inc     [esp+5Ch+var_3C]
.text:0040207A                 add     esi, 10h
.text:0040207D                 mov     edx, [esi]
.text:0040207F                 test    edx, edx
.text:00402081                 mov     ecx, edx
.text:00402083                 jnz     short loc_402057
.text:00402085
.text:00402085 loc_402085:                             ; CODE XREF: sub_4019D0+8B6↓j
.text:00402085                 mov     esi, [esp+5Ch+var_34]
.text:00402089                 test    esi, esi
.text:0040208B                 jz      short loc_402099
.text:0040208D                 mov     ebx, [esp+5Ch+var_30]
.text:00402091                 test    ebx, ebx
.text:00402093                 jz      loc_4021E1
.text:00402099
.text:00402099 loc_402099:                             ; CODE XREF: sub_4019D0+6BB↑j
.text:00402099                 mov     esi, [esp+5Ch+var_2C]
.text:0040209D                 test    esi, esi
.text:0040209F                 jz      loc_4021D0
.text:004020A5                 cmp     byte ptr [edi], 0
.text:004020A8                 jz      loc_402150
.text:004020AE                 mov     ecx, [esp+5Ch+var_2C]
.text:004020B2                 mov     ebx, [ecx+4]
.text:004020B5                 test    ebx, ebx
.text:004020B7                 jz      short loc_4020F8
.text:004020B9                 lea     edx, [edi+1]
.text:004020BC                 mov     [ebp+0Ch], edx
.text:004020BF
.text:004020BF loc_4020BF:                             ; CODE XREF: sub_4019D0+788↓j
.text:004020BF                                         ; sub_4019D0+7A7↓j
.text:004020BF                 mov     edi, [ebp+14h]
.text:004020C2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004020C5                 call    strlen
.text:004020CA                 add     [ebp+14h], eax
.text:004020CD                 mov     eax, [esp+5Ch+arg_10]
.text:004020D1                 test    eax, eax
.text:004020D3                 jz      short loc_4020E0
.text:004020D5                 mov     edx, [esp+5Ch+var_38]
.text:004020D9                 mov     ebp, [esp+5Ch+arg_10]
.text:004020DD                 mov     [ebp+0], edx
.text:004020E0
.text:004020E0 loc_4020E0:                             ; CODE XREF: sub_4019D0+703↑j
.text:004020E0                 mov     eax, [esp+5Ch+var_2C]
.text:004020E4                 mov     ecx, [eax+8]
.text:004020E7                 test    ecx, ecx
.text:004020E9                 jnz     loc_401CAA
.text:004020EF                 mov     ecx, [esp+5Ch+var_2C]
.text:004020F3                 jmp     loc_401CA2
.text:004020F8 ; ---------------------------------------------------------------------------
.text:004020F8
.text:004020F8 loc_4020F8:                             ; CODE XREF: sub_4019D0+6E7↑j
.text:004020F8                 mov     eax, [esp+5Ch+var_14]
.text:004020FC                 test    eax, eax
.text:004020FE                 jnz     short loc_402113
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: sub_4019D0+779↓j
.text:00402100                 mov     ecx, [ebp+14h]
.text:00402103                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402106                 call    strlen
.text:0040210B                 add     [ebp+14h], eax
.text:0040210E                 jmp     loc_401D28
.text:00402113 ; ---------------------------------------------------------------------------
.text:00402113
.text:00402113 loc_402113:                             ; CODE XREF: sub_4019D0+72E↑j
.text:00402113                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040211A                 call    ds:libintl_gettext
.text:00402120                 mov     edx, [esp+5Ch+var_2C]
.text:00402124                 mov     ebx, [esp+5Ch+arg_4]
.text:00402128                 mov     edi, [edx]
.text:0040212A                 mov     [esp+5Ch+var_50], edi
.text:0040212E                 mov     edi, ds:_iob
.text:00402134                 mov     esi, [ebx]
.text:00402136                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040213A                 add     edi, 40h ; '@'
.text:0040213D                 mov     [esp+5Ch+MaxCount], esi
.text:00402141                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402144                 call    fprintf
.text:00402149                 jmp     short loc_402100
.text:00402149 ; ---------------------------------------------------------------------------
.text:0040214B                 align 10h
.text:00402150
.text:00402150 loc_402150:                             ; CODE XREF: sub_4019D0+6D8↑j
.text:00402150                 mov     esi, [esp+5Ch+var_2C]
.text:00402154                 cmp     dword ptr [esi+4], 1
.text:00402158                 jnz     loc_4020BF
.text:0040215E                 mov     ecx, [ebp+0]
.text:00402161                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402165                 jge     short loc_40217C
.text:00402167                 mov     eax, [esp+5Ch+arg_4]
.text:0040216B                 lea     ebx, [ecx+1]
.text:0040216E                 mov     [ebp+0], ebx
.text:00402171                 mov     edi, [eax+ecx*4]
.text:00402174                 mov     [ebp+0Ch], edi
.text:00402177                 jmp     loc_4020BF
.text:0040217C ; ---------------------------------------------------------------------------
.text:0040217C
.text:0040217C loc_40217C:                             ; CODE XREF: sub_4019D0+795↑j
.text:0040217C                 mov     edx, [esp+5Ch+var_14]
.text:00402180                 test    edx, edx
.text:00402182                 jnz     short loc_402197
.text:00402184
.text:00402184 loc_402184:                             ; CODE XREF: sub_4019D0+7FE↓j
.text:00402184                 mov     edx, [ebp+14h]
.text:00402187                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040218A                 call    strlen
.text:0040218F                 add     [ebp+14h], eax
.text:00402192                 jmp     loc_401DB9
.text:00402197 ; ---------------------------------------------------------------------------
.text:00402197
.text:00402197 loc_402197:                             ; CODE XREF: sub_4019D0+7B2↑j
.text:00402197                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040219E                 call    ds:libintl_gettext
.text:004021A4                 mov     ecx, [ebp+0]
.text:004021A7                 mov     ebx, [esp+5Ch+arg_4]
.text:004021AB                 mov     edi, [ebx+ecx*4-4]
.text:004021AF                 mov     ecx, ds:_iob
.text:004021B5                 mov     [esp+5Ch+var_50], edi
.text:004021B9                 mov     esi, [ebx]
.text:004021BB                 add     ecx, 40h ; '@'
.text:004021BE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021C2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004021C5                 mov     [esp+5Ch+MaxCount], esi
.text:004021C9                 call    fprintf
.text:004021CE                 jmp     short loc_402184
.text:004021D0 ; ---------------------------------------------------------------------------
.text:004021D0
.text:004021D0 loc_4021D0:                             ; CODE XREF: sub_4019D0+67F↑j
.text:004021D0                                         ; sub_4019D0+6CF↑j
.text:004021D0                 mov     dword ptr [ebp+14h], 0
.text:004021D7                 mov     eax, 57h ; 'W'
.text:004021DC                 jmp     loc_401B27
.text:004021E1 ; ---------------------------------------------------------------------------
.text:004021E1
.text:004021E1 loc_4021E1:                             ; CODE XREF: sub_4019D0+6C3↑j
.text:004021E1                 mov     edi, [esp+5Ch+var_14]
.text:004021E5                 test    edi, edi
.text:004021E7                 jnz     short loc_4021FF
.text:004021E9
.text:004021E9 loc_4021E9:                             ; CODE XREF: sub_4019D0+865↓j
.text:004021E9                 mov     edx, [ebp+14h]
.text:004021EC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004021EF                 call    strlen
.text:004021F4                 add     [ebp+14h], eax
.text:004021F7                 inc     dword ptr [ebp+0]
.text:004021FA                 jmp     loc_401D28
.text:004021FF ; ---------------------------------------------------------------------------
.text:004021FF
.text:004021FF loc_4021FF:                             ; CODE XREF: sub_4019D0+817↑j
.text:004021FF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402206                 call    ds:libintl_gettext
.text:0040220C                 mov     ecx, [ebp+0]
.text:0040220F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402213                 mov     edi, [ebx+ecx*4]
.text:00402216                 mov     ecx, ds:_iob
.text:0040221C                 mov     [esp+5Ch+var_50], edi
.text:00402220                 mov     esi, [ebx]
.text:00402222                 add     ecx, 40h ; '@'
.text:00402225                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402229                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040222C                 mov     [esp+5Ch+MaxCount], esi
.text:00402230                 call    fprintf
.text:00402235                 jmp     short loc_4021E9
.text:00402237 ; ---------------------------------------------------------------------------
.text:00402237
.text:00402237 loc_402237:                             ; CODE XREF: sub_4019D0+6A0↑j
.text:00402237                 mov     edx, [ebp+14h]
.text:0040223A                 mov     ebx, edi
.text:0040223C                 mov     ecx, [esi]
.text:0040223E                 sub     ebx, edx
.text:00402240                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402243                 call    strlen
.text:00402248                 cmp     ebx, eax
.text:0040224A                 jz      short loc_402272
.text:0040224C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402250                 test    ebx, ebx
.text:00402252                 jz      short loc_402261
.text:00402254                 mov     [esp+5Ch+var_34], 1
.text:0040225C                 jmp     loc_402076
.text:00402261 ; ---------------------------------------------------------------------------
.text:00402261
.text:00402261 loc_402261:                             ; CODE XREF: sub_4019D0+882↑j
.text:00402261                 mov     [esp+5Ch+var_2C], esi
.text:00402265                 mov     ecx, [esp+5Ch+var_3C]
.text:00402269                 mov     [esp+5Ch+var_38], ecx
.text:0040226D                 jmp     loc_402076
.text:00402272 ; ---------------------------------------------------------------------------
.text:00402272
.text:00402272 loc_402272:                             ; CODE XREF: sub_4019D0+87A↑j
.text:00402272                 mov     [esp+5Ch+var_2C], esi
.text:00402276                 mov     eax, [esp+5Ch+var_3C]
.text:0040227A                 mov     [esp+5Ch+var_30], 1
.text:00402282                 mov     [esp+5Ch+var_38], eax
.text:00402286                 jmp     loc_402085
.text:0040228B ; ---------------------------------------------------------------------------
.text:0040228B
.text:0040228B loc_40228B:                             ; CODE XREF: sub_4019D0+646↑j
.text:0040228B                 mov     edx, [ebp+0]
.text:0040228E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402292                 jz      short loc_4022A9
.text:00402294                 mov     ebx, [esp+5Ch+arg_4]
.text:00402298                 lea     esi, [edx+1]
.text:0040229B                 mov     [ebp+0], esi
.text:0040229E                 mov     edi, [ebx+edx*4]
.text:004022A1                 mov     [ebp+0Ch], edi
.text:004022A4                 jmp     loc_402022
.text:004022A9 ; ---------------------------------------------------------------------------
.text:004022A9
.text:004022A9 loc_4022A9:                             ; CODE XREF: sub_4019D0+8C2↑j
.text:004022A9                 mov     edi, [esp+5Ch+var_14]
.text:004022AD                 test    edi, edi
.text:004022AF                 jnz     short loc_4022CC
.text:004022B1
.text:004022B1 loc_4022B1:                             ; CODE XREF: sub_4019D0+92C↓j
.text:004022B1                 mov     [ebp+8], esi
.text:004022B4                 mov     ebp, [esp+5Ch+Str]
.text:004022B8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004022BC                 jz      short loc_4022C8
.text:004022BE                 mov     bl, 3Fh ; '?'
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_4019D0+8FA↓j
.text:004022C0                 movsx   eax, bl
.text:004022C3                 jmp     loc_401B27
.text:004022C8 ; ---------------------------------------------------------------------------
.text:004022C8
.text:004022C8 loc_4022C8:                             ; CODE XREF: sub_4019D0+8EC↑j
.text:004022C8                 mov     bl, 3Ah ; ':'
.text:004022CA                 jmp     short loc_4022C0
.text:004022CC ; ---------------------------------------------------------------------------
.text:004022CC
.text:004022CC loc_4022CC:                             ; CODE XREF: sub_4019D0+8DF↑j
.text:004022CC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004022D3                 call    ds:libintl_gettext
.text:004022D9                 mov     [esp+5Ch+var_50], esi
.text:004022DD                 mov     edx, [esp+5Ch+arg_4]
.text:004022E1                 mov     ecx, ds:_iob
.text:004022E7                 mov     ebx, [edx]
.text:004022E9                 add     ecx, 40h ; '@'
.text:004022EC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022F0                 mov     [esp+5Ch+MaxCount], ebx
.text:004022F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004022F7                 call    fprintf
.text:004022FC                 jmp     short loc_4022B1
.text:004022FC ; ---------------------------------------------------------------------------
.text:004022FE                 align 10h
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_4019D0+54C↑j
.text:00402300                                         ; sub_4019D0+555↑j
.text:00402300                 mov     eax, [esp+5Ch+var_14]
.text:00402304                 test    eax, eax
.text:00402306                 jz      short loc_40233F
.text:00402308                 mov     ebx, [ebp+1Ch]
.text:0040230B                 test    ebx, ebx
.text:0040230D                 jz      short loc_402347
.text:0040230F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402316
.text:00402316 loc_402316:                             ; CODE XREF: sub_4019D0+97E↓j
.text:00402316                 call    ds:libintl_gettext
.text:0040231C                 mov     [esp+5Ch+var_50], esi
.text:00402320                 mov     ebx, [esp+5Ch+arg_4]
.text:00402324                 mov     edx, ds:_iob
.text:0040232A                 mov     esi, [ebx]
.text:0040232C                 add     edx, 40h ; '@'
.text:0040232F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402333                 mov     [esp+5Ch+MaxCount], esi
.text:00402337                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040233A                 call    fprintf
.text:0040233F
.text:0040233F loc_40233F:                             ; CODE XREF: sub_4019D0+936↑j
.text:0040233F                 mov     [ebp+8], edi
.text:00402342                 jmp     loc_401D28
.text:00402347 ; ---------------------------------------------------------------------------
.text:00402347
.text:00402347 loc_402347:                             ; CODE XREF: sub_4019D0+93D↑j
.text:00402347                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040234E                 jmp     short loc_402316
.text:00402350 ; ---------------------------------------------------------------------------
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_4019D0+26E↑j
.text:00402350                 mov     edi, [esp+5Ch+var_14]
.text:00402354                 test    edi, edi
.text:00402356                 jnz     short loc_40236E
.text:00402358
.text:00402358 loc_402358:                             ; CODE XREF: sub_4019D0+9D4↓j
.text:00402358                 mov     edx, [ebp+14h]
.text:0040235B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040235E                 call    strlen
.text:00402363                 add     [ebp+14h], eax
.text:00402366                 inc     dword ptr [ebp+0]
.text:00402369                 jmp     loc_401EAE
.text:0040236E ; ---------------------------------------------------------------------------
.text:0040236E
.text:0040236E loc_40236E:                             ; CODE XREF: sub_4019D0+986↑j
.text:0040236E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402375                 call    ds:libintl_gettext
.text:0040237B                 mov     ebx, [ebp+0]
.text:0040237E                 mov     edi, [esp+5Ch+arg_4]
.text:00402382                 mov     ecx, [edi+ebx*4]
.text:00402385                 mov     ebx, ds:_iob
.text:0040238B                 mov     [esp+5Ch+var_50], ecx
.text:0040238F                 mov     esi, [edi]
.text:00402391                 add     ebx, 40h ; '@'
.text:00402394                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402398                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040239B                 mov     [esp+5Ch+MaxCount], esi
.text:0040239F                 call    fprintf
.text:004023A4                 jmp     short loc_402358
.text:004023A6 ; ---------------------------------------------------------------------------
.text:004023A6
.text:004023A6 loc_4023A6:                             ; CODE XREF: sub_4019D0+246↑j
.text:004023A6                 mov     ecx, [ebp+14h]
.text:004023A9                 mov     ebx, edi
.text:004023AB                 mov     edx, [esi]
.text:004023AD                 sub     ebx, ecx
.text:004023AF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004023B2                 call    strlen
.text:004023B7                 cmp     ebx, eax
.text:004023B9                 jz      short loc_402411
.text:004023BB                 mov     ebx, [esp+5Ch+var_18]
.text:004023BF                 test    ebx, ebx
.text:004023C1                 jz      short loc_402400
.text:004023C3                 mov     edx, [esp+5Ch+arg_14]
.text:004023C7                 test    edx, edx
.text:004023C9                 jnz     short loc_4023D7
.text:004023CB                 mov     ecx, [esp+5Ch+var_18]
.text:004023CF                 mov     ebx, [esi+4]
.text:004023D2                 cmp     [ecx+4], ebx
.text:004023D5                 jz      short loc_4023E4
.text:004023D7
.text:004023D7 loc_4023D7:                             ; CODE XREF: sub_4019D0+9F9↑j
.text:004023D7                                         ; sub_4019D0+A1A↓j ...
.text:004023D7                 mov     [esp+5Ch+var_20], 1
.text:004023DF                 jmp     loc_401C1C
.text:004023E4 ; ---------------------------------------------------------------------------
.text:004023E4
.text:004023E4 loc_4023E4:                             ; CODE XREF: sub_4019D0+A05↑j
.text:004023E4                 mov     edx, [esi+8]
.text:004023E7                 cmp     [ecx+8], edx
.text:004023EA                 jnz     short loc_4023D7
.text:004023EC                 mov     ebx, [esi+0Ch]
.text:004023EF                 cmp     [ecx+0Ch], ebx
.text:004023F2                 jnz     short loc_4023D7
.text:004023F4                 jmp     loc_401C1C
.text:004023F4 ; ---------------------------------------------------------------------------
.text:004023F9                 align 10h
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_4019D0+9F1↑j
.text:00402400                 mov     [esp+5Ch+var_18], esi
.text:00402404                 mov     eax, [esp+5Ch+var_28]
.text:00402408                 mov     [esp+5Ch+var_24], eax
.text:0040240C                 jmp     loc_401C1C
.text:00402411 ; ---------------------------------------------------------------------------
.text:00402411
.text:00402411 loc_402411:                             ; CODE XREF: sub_4019D0+9E9↑j
.text:00402411                 mov     [esp+5Ch+var_18], esi
.text:00402415                 mov     ecx, [esp+5Ch+var_28]
.text:00402419                 mov     [esp+5Ch+var_1C], 1
.text:00402421                 mov     [esp+5Ch+var_24], ecx
.text:00402425                 jmp     loc_401C30
.text:0040242A ; ---------------------------------------------------------------------------
.text:0040242A
.text:0040242A loc_40242A:                             ; CODE XREF: sub_4019D0+1BF↑j
.text:0040242A                 mov     eax, [esp+5Ch+Str]
.text:0040242E                 movsx   esi, dl
.text:00402431                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402435                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402438                 call    strchr
.text:0040243D                 test    eax, eax
.text:0040243F                 jnz     loc_401EF0
.text:00402445                 jmp     loc_401B95
.text:0040244A ; ---------------------------------------------------------------------------
.text:0040244A
.text:0040244A loc_40244A:                             ; CODE XREF: sub_4019D0+17C↑j
.text:0040244A                 mov     ecx, 1
.text:0040244F                 jmp     loc_401B52
.text:00402454 ; ---------------------------------------------------------------------------
.text:00402454
.text:00402454 loc_402454:                             ; CODE XREF: sub_4019D0+D4↑j
.text:00402454                                         ; sub_4019D0+130↑j
.text:00402454                 mov     eax, [ebp+20h]
.text:00402457                 cmp     eax, [ebp+24h]
.text:0040245A                 jz      loc_401B30
.text:00402460                 mov     [ebp+0], eax
.text:00402463                 jmp     loc_401B30
.text:00402468 ; ---------------------------------------------------------------------------
.text:00402468
.text:00402468 loc_402468:                             ; CODE XREF: sub_4019D0+FE↑j
.text:00402468                 mov     [ebp+20h], eax
.text:0040246B                 jmp     loc_401AF0
.text:00402470 ; ---------------------------------------------------------------------------
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_4019D0+CA↑j
.text:00402470                 mov     edx, [ebp+20h]
.text:00402473                 mov     eax, [ebp+24h]
.text:00402476                 cmp     edx, eax
.text:00402478                 jz      short loc_4024F0
.text:0040247A                 cmp     eax, ebx
.text:0040247C                 jz      short loc_402491
.text:0040247E                 mov     [esp+5Ch+Str2], ebp
.text:00402482                 mov     ebx, [esp+5Ch+arg_4]
.text:00402486                 mov     [esp+5Ch+Str1], ebx
.text:00402489                 call    sub_402680
.text:0040248E                 mov     ebx, [ebp+0]
.text:00402491
.text:00402491 loc_402491:                             ; CODE XREF: sub_4019D0+AAC↑j
.text:00402491                                         ; sub_4019D0+B22↓j ...
.text:00402491                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402495                 jge     short loc_4024E0
.text:00402497                 mov     esi, [esp+5Ch+arg_4]
.text:0040249B                 mov     eax, [esi+ebx*4]
.text:0040249E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004024A1                 jz      short loc_4024E8
.text:004024A3                 lea     esi, [esi+0]
.text:004024A9                 lea     edi, [edi+0]
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_4019D0+AFC↓j
.text:004024B0                                         ; sub_4019D0+B1C↓j
.text:004024B0                 lea     eax, [ebx+1]
.text:004024B3                 mov     ebx, eax
.text:004024B5                 mov     [ebp+0], eax
.text:004024B8                 cmp     eax, [esp+5Ch+arg_0]
.text:004024BC                 jge     short loc_4024E0
.text:004024BE                 mov     edi, [esp+5Ch+arg_4]
.text:004024C2                 mov     edx, [edi+eax*4]
.text:004024C5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004024C8                 jz      short loc_4024D0
.text:004024CA
.text:004024CA loc_4024CA:                             ; CODE XREF: sub_4019D0+B04↓j
.text:004024CA                 mov     ebx, eax
.text:004024CC                 jmp     short loc_4024B0
.text:004024CC ; ---------------------------------------------------------------------------
.text:004024CE                 align 10h
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_4019D0+AF8↑j
.text:004024D0                 cmp     byte ptr [edx+1], 0
.text:004024D4                 jz      short loc_4024CA
.text:004024D6                 lea     esi, [esi+0]
.text:004024D9                 lea     edi, [edi+0]
.text:004024E0
.text:004024E0 loc_4024E0:                             ; CODE XREF: sub_4019D0+AC5↑j
.text:004024E0                                         ; sub_4019D0+AEC↑j ...
.text:004024E0                 mov     [ebp+24h], ebx
.text:004024E3                 jmp     loc_401AA0
.text:004024E8 ; ---------------------------------------------------------------------------
.text:004024E8
.text:004024E8 loc_4024E8:                             ; CODE XREF: sub_4019D0+AD1↑j
.text:004024E8                 cmp     byte ptr [eax+1], 0
.text:004024EC                 jz      short loc_4024B0
.text:004024EE                 jmp     short loc_4024E0
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_4019D0+AA8↑j
.text:004024F0                 cmp     edx, ebx
.text:004024F2                 jz      short loc_402491
.text:004024F4                 mov     [ebp+20h], ebx
.text:004024F7                 jmp     short loc_402491
.text:004024F9 ; ---------------------------------------------------------------------------
.text:004024F9
.text:004024F9 loc_4024F9:                             ; CODE XREF: sub_4019D0+88↑j
.text:004024F9                 mov     dword ptr [ebp+18h], 0
.text:00402500                 mov     esi, [esp+5Ch+Str]
.text:00402504
.text:00402504 loc_402504:                             ; CODE XREF: sub_4019D0+B49↓j
.text:00402504                 inc     esi
.text:00402505                 jmp     loc_401A68
.text:00402505 ; ---------------------------------------------------------------------------
.text:0040250A                 align 10h
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_4019D0+80↑j
.text:00402510                 mov     dword ptr [ebp+18h], 2
.text:00402517                 mov     esi, ecx
.text:00402519                 jmp     short loc_402504
.text:00402519 ; ---------------------------------------------------------------------------
.text:0040251B                 align 10h
.text:00402520
.text:00402520 loc_402520:                             ; CODE XREF: sub_4019D0+69↑j
.text:00402520                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402527                 call    getenv
.text:0040252C                 test    eax, eax
.text:0040252E                 jz      loc_401A44
.text:00402534                 jmp     loc_401A3F
.text:00402534 ; ---------------------------------------------------------------------------
.text:00402539                 align 10h
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_4019D0+3F↑j
.text:00402540                 mov     dword ptr [ebp+0], 1
.text:00402547                 mov     ebx, 1
.text:0040254C                 jmp     loc_401A20
.text:0040254C sub_4019D0      endp
.text:0040254C
.text:00402551 ; ---------------------------------------------------------------------------
.text:00402551                 jmp     short sub_402560
.text:00402551 ; ---------------------------------------------------------------------------
.text:00402553                 align 10h
.text:00402560
.text:00402560 ; =============== S U B R O U T I N E =======================================
.text:00402560
.text:00402560
.text:00402560 ; int __cdecl sub_402560(int, int, char *, int, int, int, int)
.text:00402560 sub_402560      proc near               ; CODE XREF: .text:00402551↑j
.text:00402560                                         ; sub_402950+3A↓p ...
.text:00402560
.text:00402560 var_2C          = dword ptr -2Ch
.text:00402560 var_28          = dword ptr -28h
.text:00402560 Str             = dword ptr -24h
.text:00402560 var_20          = dword ptr -20h
.text:00402560 var_1C          = dword ptr -1Ch
.text:00402560 var_18          = dword ptr -18h
.text:00402560 var_14          = dword ptr -14h
.text:00402560 var_10          = dword ptr -10h
.text:00402560 arg_0           = dword ptr  4
.text:00402560 arg_4           = dword ptr  8
.text:00402560 arg_8           = dword ptr  0Ch
.text:00402560 arg_C           = dword ptr  10h
.text:00402560 arg_10          = dword ptr  14h
.text:00402560 arg_14          = dword ptr  18h
.text:00402560 arg_18          = dword ptr  1Ch
.text:00402560
.text:00402560                 sub     esp, 2Ch
.text:00402563                 mov     edx, dword_405010
.text:00402569                 mov     [esp+2Ch+var_10], offset dword_406000 ; int
.text:00402571                 mov     ecx, dword_405014
.text:00402577                 mov     ds:dword_406000, edx
.text:0040257D                 mov     edx, [esp+2Ch+arg_18]
.text:00402581                 mov     ds:dword_406004, ecx
.text:00402587                 mov     ecx, [esp+2Ch+arg_14]
.text:0040258B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040258F                 mov     edx, [esp+2Ch+arg_10]
.text:00402593                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402597                 mov     ecx, [esp+2Ch+arg_C]
.text:0040259B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040259F                 mov     edx, [esp+2Ch+arg_8]
.text:004025A3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004025A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004025AB                 mov     [esp+2Ch+Str], edx ; Str
.text:004025AF                 mov     edx, [esp+2Ch+arg_0]
.text:004025B3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004025B7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004025BA                 call    sub_4019D0
.text:004025BF                 mov     ecx, ds:dword_406000
.text:004025C5                 mov     dword_405010, ecx
.text:004025CB                 mov     ecx, ds:dword_40600C
.text:004025D1                 mov     ds:dword_4061B0, ecx
.text:004025D7                 mov     ecx, ds:dword_406008
.text:004025DD                 mov     dword_405018, ecx
.text:004025E3                 add     esp, 2Ch
.text:004025E6                 retn
.text:004025E6 sub_402560      endp
.text:004025E6
.text:004025E6 ; ---------------------------------------------------------------------------
.text:004025E7                 align 10h
.text:004025F0                 sub     esp, 2Ch
.text:004025F3                 mov     edx, dword_405010
.text:004025F9                 mov     dword ptr [esp+1Ch], offset dword_406000
.text:00402601                 mov     ecx, dword_405014
.text:00402607                 mov     dword ptr [esp+18h], 1
.text:0040260F                 mov     ds:dword_406000, edx
.text:00402615                 mov     edx, [esp+38h]
.text:00402619                 mov     ds:dword_406004, ecx
.text:0040261F                 mov     ecx, [esp+34h]
.text:00402623                 mov     [esp+8], edx
.text:00402627                 mov     edx, [esp+30h]
.text:0040262B                 mov     [esp+4], ecx
.text:0040262F                 mov     dword ptr [esp+14h], 0
.text:00402637                 mov     dword ptr [esp+10h], 0
.text:0040263F                 mov     dword ptr [esp+0Ch], 0
.text:00402647                 mov     [esp], edx
.text:0040264A                 call    sub_4019D0
.text:0040264F                 mov     ecx, ds:dword_406000
.text:00402655                 mov     dword_405010, ecx
.text:0040265B                 mov     ecx, ds:dword_40600C
.text:00402661                 mov     ds:dword_4061B0, ecx
.text:00402667                 mov     ecx, ds:dword_406008
.text:0040266D                 mov     dword_405018, ecx
.text:00402673                 add     esp, 2Ch
.text:00402676                 retn
.text:00402676 ; ---------------------------------------------------------------------------
.text:00402677                 align 10h
.text:00402680
.text:00402680 ; =============== S U B R O U T I N E =======================================
.text:00402680
.text:00402680
.text:00402680 sub_402680      proc near               ; CODE XREF: sub_4019D0+113↑p
.text:00402680                                         ; sub_4019D0+AB9↑p
.text:00402680
.text:00402680 var_2C          = dword ptr -2Ch
.text:00402680 var_28          = dword ptr -28h
.text:00402680 var_24          = dword ptr -24h
.text:00402680 var_20          = dword ptr -20h
.text:00402680 var_1C          = dword ptr -1Ch
.text:00402680 var_18          = dword ptr -18h
.text:00402680 var_14          = dword ptr -14h
.text:00402680 arg_0           = dword ptr  4
.text:00402680 arg_4           = dword ptr  8
.text:00402680
.text:00402680                 push    ebp
.text:00402681                 push    edi
.text:00402682                 push    esi
.text:00402683                 push    ebx
.text:00402684                 sub     esp, 1Ch
.text:00402687                 mov     ecx, [esp+2Ch+arg_4]
.text:0040268B                 mov     eax, [esp+2Ch+arg_4]
.text:0040268F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402693                 mov     edx, [ecx+20h]
.text:00402696                 mov     edi, [esp+2Ch+arg_0]
.text:0040269A                 mov     ecx, [ebx]
.text:0040269C                 mov     [esp+2Ch+var_2C], edx
.text:0040269F                 mov     [esp+2Ch+var_14], edx
.text:004026A3                 mov     edx, [eax+24h]
.text:004026A6                 mov     [esp+2Ch+var_28], ecx
.text:004026AA                 mov     [esp+2Ch+var_1C], ecx
.text:004026AE                 cmp     ecx, edx
.text:004026B0                 mov     [esp+2Ch+var_18], edx
.text:004026B4                 jle     short loc_402730
.text:004026B6                 mov     esi, [esp+2Ch+var_2C]
.text:004026B9                 cmp     edx, esi
.text:004026BB                 jle     short loc_402730
.text:004026BD                 lea     esi, [esi+0]
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_402680+A1↓j
.text:004026C0                 mov     ebx, [esp+2Ch+var_1C]
.text:004026C4                 mov     edx, [esp+2Ch+var_18]
.text:004026C8                 mov     ebp, [esp+2Ch+var_18]
.text:004026CC                 mov     eax, [esp+2Ch+var_14]
.text:004026D0                 sub     ebx, edx
.text:004026D2                 mov     [esp+2Ch+var_20], ebx
.text:004026D6                 sub     ebp, eax
.text:004026D8                 cmp     ebx, ebp
.text:004026DA                 jle     short loc_402755
.text:004026DC                 xor     esi, esi
.text:004026DE                 cmp     esi, ebp
.text:004026E0                 jge     short loc_40270D
.text:004026E2                 mov     ecx, [esp+2Ch+var_1C]
.text:004026E6                 sub     ecx, ebp
.text:004026E8                 mov     [esp+2Ch+var_24], ecx
.text:004026EC                 lea     esi, [esi+0]
.text:004026F0
.text:004026F0 loc_4026F0:                             ; CODE XREF: sub_402680+8B↓j
.text:004026F0                 mov     ecx, [esp+2Ch+var_14]
.text:004026F4                 mov     edx, [esp+2Ch+var_24]
.text:004026F8                 add     ecx, esi
.text:004026FA                 add     edx, esi
.text:004026FC                 mov     ebx, [edi+ecx*4]
.text:004026FF                 mov     eax, [edi+edx*4]
.text:00402702                 inc     esi
.text:00402703                 cmp     esi, ebp
.text:00402705                 mov     [edi+ecx*4], eax
.text:00402708                 mov     [edi+edx*4], ebx
.text:0040270B                 jl      short loc_4026F0
.text:0040270D
.text:0040270D loc_40270D:                             ; CODE XREF: sub_402680+60↑j
.text:0040270D                 sub     [esp+2Ch+var_1C], ebp
.text:00402711
.text:00402711 loc_402711:                             ; CODE XREF: sub_402680+107↓j
.text:00402711                 mov     eax, [esp+2Ch+var_18]
.text:00402715                 cmp     [esp+2Ch+var_1C], eax
.text:00402719                 jle     short loc_402730
.text:0040271B                 mov     ebp, [esp+2Ch+var_14]
.text:0040271F                 cmp     eax, ebp
.text:00402721                 jg      short loc_4026C0
.text:00402723                 lea     esi, [esi+0]
.text:00402729                 lea     edi, [edi+0]
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_402680+34↑j
.text:00402730                                         ; sub_402680+3B↑j ...
.text:00402730                 mov     esi, [esp+2Ch+var_28]
.text:00402734                 mov     ecx, [esp+2Ch+var_18]
.text:00402738                 mov     eax, [esp+2Ch+var_2C]
.text:0040273B                 mov     edi, [esp+2Ch+arg_4]
.text:0040273F                 mov     edx, [esp+2Ch+var_28]
.text:00402743                 sub     esi, ecx
.text:00402745                 add     esi, eax
.text:00402747                 mov     [edi+20h], esi
.text:0040274A                 mov     [edi+24h], edx
.text:0040274D                 add     esp, 1Ch
.text:00402750                 pop     ebx
.text:00402751                 pop     esi
.text:00402752                 pop     edi
.text:00402753                 pop     ebp
.text:00402754                 retn
.text:00402755 ; ---------------------------------------------------------------------------
.text:00402755
.text:00402755 loc_402755:                             ; CODE XREF: sub_402680+5A↑j
.text:00402755                 xor     esi, esi
.text:00402757                 cmp     esi, [esp+2Ch+var_20]
.text:0040275B                 jge     short loc_40277F
.text:0040275D                 lea     esi, [esi+0]
.text:00402760
.text:00402760 loc_402760:                             ; CODE XREF: sub_402680+FD↓j
.text:00402760                 mov     ebx, [esp+2Ch+var_14]
.text:00402764                 mov     ebp, [esp+2Ch+var_18]
.text:00402768                 add     ebx, esi
.text:0040276A                 add     ebp, esi
.text:0040276C                 mov     edx, [edi+ebx*4]
.text:0040276F                 inc     esi
.text:00402770                 cmp     esi, [esp+2Ch+var_20]
.text:00402774                 mov     ecx, [edi+ebp*4]
.text:00402777                 mov     [edi+ebx*4], ecx
.text:0040277A                 mov     [edi+ebp*4], edx
.text:0040277D                 jl      short loc_402760
.text:0040277F
.text:0040277F loc_40277F:                             ; CODE XREF: sub_402680+DB↑j
.text:0040277F                 mov     esi, [esp+2Ch+var_20]
.text:00402783                 add     [esp+2Ch+var_14], esi
.text:00402787                 jmp     short loc_402711
.text:00402787 sub_402680      endp
.text:00402787
.text:00402787 ; ---------------------------------------------------------------------------
.text:00402789                 align 20h
.text:004027A0                 sub     esp, 0Ch
.text:004027A3                 mov     edx, [esp+14h]
.text:004027A7                 mov     dword ptr [esp+4], 5
.text:004027AF                 mov     [esp+8], edx
.text:004027B3                 mov     edx, [esp+10h]
.text:004027B7                 mov     [esp], edx
.text:004027BA                 call    sub_403A80
.text:004027BF                 add     esp, 0Ch
.text:004027C2                 retn
.text:004027C2 ; ---------------------------------------------------------------------------
.text:004027C3                 align 10h
.text:004027D0
.text:004027D0 ; =============== S U B R O U T I N E =======================================
.text:004027D0
.text:004027D0
.text:004027D0 ; int __cdecl sub_4027D0(char *)
.text:004027D0 sub_4027D0      proc near               ; CODE XREF: sub_401380+FB↑p
.text:004027D0
.text:004027D0 var_C           = dword ptr -0Ch
.text:004027D0 var_8           = dword ptr -8
.text:004027D0 var_4           = dword ptr -4
.text:004027D0 arg_0           = dword ptr  4
.text:004027D0
.text:004027D0                 sub     esp, 0Ch
.text:004027D3                 mov     edx, [esp+0Ch+arg_0]
.text:004027D7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004027DF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004027E6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004027EA                 call    sub_403A80
.text:004027EF                 add     esp, 0Ch
.text:004027F2                 retn
.text:004027F2 sub_4027D0      endp
.text:004027F2
.text:004027F2 ; ---------------------------------------------------------------------------
.text:004027F3                 align 10h
.text:00402800                 sub     esp, 1ACh
.text:00402806                 lea     edx, [esp+10h]
.text:0040280A                 mov     [esp+1A8h], ebx
.text:00402811                 mov     [esp+4], edx
.text:00402815                 mov     dword ptr [esp], 1
.text:0040281C                 call    WSAStartup
.text:00402821                 sub     esp, 8
.text:00402824                 test    eax, eax
.text:00402826                 jnz     short loc_40285C
.text:00402828                 mov     ecx, [esp+1B4h]
.text:0040282F                 mov     edx, [esp+1B0h]
.text:00402836                 mov     [esp+4], ecx
.text:0040283A                 mov     [esp], edx
.text:0040283D                 call    gethostname
.text:00402842                 mov     ebx, eax
.text:00402844                 sub     esp, 8
.text:00402847                 call    WSACleanup
.text:0040284C                 mov     eax, ebx
.text:0040284E
.text:0040284E loc_40284E:                             ; CODE XREF: .text:0040286C↓j
.text:0040284E                 mov     ebx, [esp+1A8h]
.text:00402855                 add     esp, 1ACh
.text:0040285B                 retn
.text:0040285C ; ---------------------------------------------------------------------------
.text:0040285C
.text:0040285C loc_40285C:                             ; CODE XREF: .text:00402826↑j
.text:0040285C                 call    _errno
.text:00402861                 mov     dword ptr [eax], 28h ; '('
.text:00402867                 mov     eax, 0FFFFFFFFh
.text:0040286C                 jmp     short loc_40284E
.text:0040286C ; ---------------------------------------------------------------------------
.text:0040286E                 align 10h
.text:00402870
.text:00402870 ; =============== S U B R O U T I N E =======================================
.text:00402870
.text:00402870 ; Attributes: bp-based frame fpd=1A8h
.text:00402870
.text:00402870 sub_402870      proc near               ; CODE XREF: sub_401380:loc_4014F0↑p
.text:00402870
.text:00402870 wVersionRequested= word ptr -1C8h
.text:00402870 lpWSAData       = dword ptr -1C4h
.text:00402870 var_1AC         = dword ptr -1ACh
.text:00402870 WSAData         = WSAData ptr -1A8h
.text:00402870
.text:00402870                 push    ebp
.text:00402871                 push    edi
.text:00402872                 xor     edi, edi
.text:00402874                 push    esi
.text:00402875                 push    ebx
.text:00402876                 sub     esp, 1BCh
.text:0040287C                 lea     ebp, [esp+1C8h+WSAData]
.text:00402880                 mov     [esp+1C8h+var_1AC], 22h ; '"'
.text:00402888                 nop
.text:00402889                 lea     esi, [esi+0]
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: sub_402870+72↓j
.text:00402890                                         ; sub_402870+7C↓j ...
.text:00402890                 mov     dword ptr [esp+1C8h+wVersionRequested], edi ; void *
.text:00402893                 lea     edx, [esp+1C8h+var_1AC]
.text:00402897                 mov     [esp+1C8h+lpWSAData], edx ; int
.text:0040289B                 call    sub_404170
.text:004028A0                 mov     esi, [esp+1C8h+var_1AC]
.text:004028A4                 mov     edi, eax
.text:004028A6                 dec     esi
.text:004028A7                 mov     byte ptr [esi+eax-1], 0
.text:004028AC                 call    _errno
.text:004028B1                 mov     dword ptr [eax], 0
.text:004028B7                 mov     [esp+1C8h+lpWSAData], ebp ; lpWSAData
.text:004028BB                 mov     dword ptr [esp+1C8h+wVersionRequested], 1 ; wVersionRequested
.text:004028C2                 call    WSAStartup
.text:004028C7                 sub     esp, 8
.text:004028CA                 test    eax, eax
.text:004028CC                 jz      short loc_402920
.text:004028CE                 call    _errno
.text:004028D3                 mov     dword ptr [eax], 28h ; '('
.text:004028D9
.text:004028D9 loc_4028D9:                             ; CODE XREF: sub_402870+C8↓j
.text:004028D9                 call    _errno
.text:004028DE                 mov     edx, [eax]
.text:004028E0                 test    edx, edx
.text:004028E2                 jz      short loc_402890
.text:004028E4                 call    _errno
.text:004028E9                 cmp     dword ptr [eax], 26h ; '&'
.text:004028EC                 jz      short loc_402890
.text:004028EE                 call    _errno
.text:004028F3                 cmp     dword ptr [eax], 16h
.text:004028F6                 jz      short loc_402890
.text:004028F8                 call    _errno
.text:004028FD                 mov     esi, [eax]
.text:004028FF                 mov     dword ptr [esp+1C8h+wVersionRequested], edi ; Block
.text:00402902                 call    free
.text:00402907                 call    _errno
.text:0040290C                 mov     [eax], esi
.text:0040290E                 xor     eax, eax
.text:00402910
.text:00402910 loc_402910:                             ; CODE XREF: sub_402870+D7↓j
.text:00402910                 add     esp, 1BCh
.text:00402916                 pop     ebx
.text:00402917                 pop     esi
.text:00402918                 pop     edi
.text:00402919                 pop     ebp
.text:0040291A                 retn
.text:0040291A ; ---------------------------------------------------------------------------
.text:0040291B                 align 10h
.text:00402920
.text:00402920 loc_402920:                             ; CODE XREF: sub_402870+5C↑j
.text:00402920                 mov     [esp+1C8h+lpWSAData], esi ; namelen
.text:00402924                 mov     dword ptr [esp+1C8h+wVersionRequested], edi ; name
.text:00402927                 call    gethostname
.text:0040292C                 sub     esp, 8
.text:0040292F                 mov     ebx, eax
.text:00402931                 call    WSACleanup
.text:00402936                 test    ebx, ebx
.text:00402938                 jnz     short loc_4028D9
.text:0040293A                 cmp     byte ptr [esi+edi-1], 0
.text:0040293F                 jnz     loc_402890
.text:00402945                 mov     eax, edi
.text:00402947                 jmp     short loc_402910
.text:00402947 sub_402870      endp
.text:00402947
.text:00402947 ; ---------------------------------------------------------------------------
.text:00402949                 align 10h
.text:00402950
.text:00402950 ; =============== S U B R O U T I N E =======================================
.text:00402950
.text:00402950
.text:00402950 ; int __cdecl sub_402950(int, int, char *, int, int)
.text:00402950 sub_402950      proc near               ; CODE XREF: sub_401380+C9↑p
.text:00402950                                         ; sub_402AF0+58↓p
.text:00402950
.text:00402950 var_1C          = dword ptr -1Ch
.text:00402950 var_18          = dword ptr -18h
.text:00402950 var_14          = dword ptr -14h
.text:00402950 var_10          = dword ptr -10h
.text:00402950 var_C           = dword ptr -0Ch
.text:00402950 var_8           = dword ptr -8
.text:00402950 var_4           = dword ptr -4
.text:00402950 arg_0           = dword ptr  4
.text:00402950 arg_4           = dword ptr  8
.text:00402950 arg_8           = dword ptr  0Ch
.text:00402950 arg_C           = dword ptr  10h
.text:00402950 arg_10          = dword ptr  14h
.text:00402950
.text:00402950                 sub     esp, 1Ch
.text:00402953                 mov     edx, [esp+1Ch+arg_C]
.text:00402957                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040295F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402963                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040296B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040296F                 mov     edx, [esp+1Ch+arg_4]
.text:00402973                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402977                 mov     ecx, [esp+1Ch+arg_8]
.text:0040297B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040297F                 mov     edx, [esp+1Ch+arg_0]
.text:00402983                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402987                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040298A                 call    sub_402560
.text:0040298F                 add     esp, 1Ch
.text:00402992                 retn
.text:00402992 sub_402950      endp
.text:00402992
.text:00402992 ; ---------------------------------------------------------------------------
.text:00402993                 align 10h
.text:004029A0                 sub     esp, 2Ch
.text:004029A3                 mov     edx, [esp+44h]
.text:004029A7                 mov     dword ptr [esp+18h], 0
.text:004029AF                 mov     ecx, [esp+40h]
.text:004029B3                 mov     dword ptr [esp+14h], 0
.text:004029BB                 mov     [esp+1Ch], edx
.text:004029BF                 mov     edx, [esp+3Ch]
.text:004029C3                 mov     [esp+10h], ecx
.text:004029C7                 mov     ecx, [esp+38h]
.text:004029CB                 mov     [esp+0Ch], edx
.text:004029CF                 mov     edx, [esp+34h]
.text:004029D3                 mov     [esp+8], ecx
.text:004029D7                 mov     [esp+4], edx
.text:004029DB                 mov     edx, [esp+30h]
.text:004029DF                 mov     [esp], edx
.text:004029E2                 call    sub_4019D0
.text:004029E7                 add     esp, 2Ch
.text:004029EA                 retn
.text:004029EA ; ---------------------------------------------------------------------------
.text:004029EB                 align 10h
.text:004029F0                 sub     esp, 1Ch
.text:004029F3                 mov     edx, [esp+2Ch]
.text:004029F7                 mov     dword ptr [esp+18h], 0
.text:004029FF                 mov     ecx, [esp+30h]
.text:00402A03                 mov     dword ptr [esp+14h], 1
.text:00402A0B                 mov     [esp+0Ch], edx
.text:00402A0F                 mov     edx, [esp+24h]
.text:00402A13                 mov     [esp+10h], ecx
.text:00402A17                 mov     ecx, [esp+28h]
.text:00402A1B                 mov     [esp+4], edx
.text:00402A1F                 mov     edx, [esp+20h]
.text:00402A23                 mov     [esp+8], ecx
.text:00402A27                 mov     [esp], edx
.text:00402A2A                 call    sub_402560
.text:00402A2F                 add     esp, 1Ch
.text:00402A32                 retn
.text:00402A32 ; ---------------------------------------------------------------------------
.text:00402A33                 align 10h
.text:00402A40                 sub     esp, 2Ch
.text:00402A43                 mov     edx, [esp+44h]
.text:00402A47                 mov     dword ptr [esp+18h], 0
.text:00402A4F                 mov     ecx, [esp+40h]
.text:00402A53                 mov     dword ptr [esp+14h], 1
.text:00402A5B                 mov     [esp+1Ch], edx
.text:00402A5F                 mov     edx, [esp+3Ch]
.text:00402A63                 mov     [esp+10h], ecx
.text:00402A67                 mov     ecx, [esp+38h]
.text:00402A6B                 mov     [esp+0Ch], edx
.text:00402A6F                 mov     edx, [esp+34h]
.text:00402A73                 mov     [esp+8], ecx
.text:00402A77                 mov     [esp+4], edx
.text:00402A7B                 mov     edx, [esp+30h]
.text:00402A7F                 mov     [esp], edx
.text:00402A82                 call    sub_4019D0
.text:00402A87                 add     esp, 2Ch
.text:00402A8A                 retn
.text:00402A8A ; ---------------------------------------------------------------------------
.text:00402A8B                 align 10h
.text:00402A90 aHelp           db 'help',0             ; DATA XREF: .text:off_402AB0↓o
.text:00402A95 aVersion        db 'version',0          ; DATA XREF: .text:00402AC0↓o
.text:00402A9D                 db 13h dup(90h)
.text:00402AB0 off_402AB0      dd offset aHelp         ; DATA XREF: sub_402AF0+3D↓o
.text:00402AB0                                         ; "help"
.text:00402AB4                 dd 2 dup(0)
.text:00402ABC                 dd 68h
.text:00402AC0                 dd offset aVersion      ; "version"
.text:00402AC4                 dd 2 dup(0)
.text:00402ACC                 dd 76h, 4 dup(0)
.text:00402AE0 ; ---------------------------------------------------------------------------
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; DATA XREF: sub_402AF0+45↓o
.text:00402AE0                 sub     eax, [eax]
.text:00402AE2                 lea     esi, [esi+0]
.text:00402AE9                 lea     edi, [edi+0]
.text:00402AF0
.text:00402AF0 ; =============== S U B R O U T I N E =======================================
.text:00402AF0
.text:00402AF0
.text:00402AF0 ; int __cdecl sub_402AF0(int, int, FILE *, int, int, int, char)
.text:00402AF0 sub_402AF0      proc near               ; CODE XREF: sub_401380+A2↑p
.text:00402AF0
.text:00402AF0 Code            = dword ptr -1Ch
.text:00402AF0 var_18          = dword ptr -18h
.text:00402AF0 var_14          = dword ptr -14h
.text:00402AF0 var_10          = dword ptr -10h
.text:00402AF0 var_C           = dword ptr -0Ch
.text:00402AF0 var_4           = dword ptr -4
.text:00402AF0 arg_0           = dword ptr  4
.text:00402AF0 arg_4           = dword ptr  8
.text:00402AF0 arg_8           = dword ptr  0Ch
.text:00402AF0 arg_C           = dword ptr  10h
.text:00402AF0 arg_10          = dword ptr  14h
.text:00402AF0 arg_14          = dword ptr  18h
.text:00402AF0 arg_18          = byte ptr  1Ch
.text:00402AF0
.text:00402AF0                 sub     esp, 1Ch
.text:00402AF3                 xor     eax, eax
.text:00402AF5                 cmp     [esp+1Ch+arg_0], 2
.text:00402AFA                 mov     [esp+1Ch+var_4], ebx
.text:00402AFE                 mov     ebx, dword_405014
.text:00402B04                 mov     dword_405014, eax
.text:00402B09                 jz      short loc_402B21
.text:00402B0B
.text:00402B0B loc_402B0B:                             ; CODE XREF: sub_402AF0+60↓j
.text:00402B0B                                         ; sub_402AF0+6A↓j
.text:00402B0B                 mov     dword_405014, ebx
.text:00402B11                 xor     edx, edx
.text:00402B13                 mov     ebx, [esp+1Ch+var_4]
.text:00402B17                 mov     dword_405010, edx
.text:00402B1D                 add     esp, 1Ch
.text:00402B20                 retn
.text:00402B21 ; ---------------------------------------------------------------------------
.text:00402B21
.text:00402B21 loc_402B21:                             ; CODE XREF: sub_402AF0+19↑j
.text:00402B21                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402B29                 mov     edx, [esp+1Ch+arg_4]
.text:00402B2D                 mov     [esp+1Ch+var_10], offset off_402AB0 ; int
.text:00402B35                 mov     [esp+1Ch+var_14], offset loc_402AE0 ; char *
.text:00402B3D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402B41                 mov     [esp+1Ch+Code], 2 ; int
.text:00402B48                 call    sub_402950
.text:00402B4D                 cmp     eax, 0FFFFFFFFh
.text:00402B50                 jz      short loc_402B0B
.text:00402B52                 cmp     eax, 68h ; 'h'
.text:00402B55                 jz      short loc_402B5E
.text:00402B57                 cmp     eax, 76h ; 'v'
.text:00402B5A                 jnz     short loc_402B0B
.text:00402B5C                 jmp     short loc_402B69
.text:00402B5E ; ---------------------------------------------------------------------------
.text:00402B5E
.text:00402B5E loc_402B5E:                             ; CODE XREF: sub_402AF0+65↑j
.text:00402B5E                 mov     [esp+1Ch+Code], 0
.text:00402B65                 call    [esp+1Ch+arg_14]
.text:00402B69
.text:00402B69 loc_402B69:                             ; CODE XREF: sub_402AF0+6C↑j
.text:00402B69                 mov     ecx, [esp+1Ch+arg_10]
.text:00402B6D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402B71                 mov     edx, [esp+1Ch+arg_C]
.text:00402B75                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402B79                 mov     ebx, [esp+1Ch+arg_8]
.text:00402B7D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402B81                 mov     ecx, ds:_iob
.text:00402B87                 mov     [esp+1Ch+var_14], edx ; int
.text:00402B8B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402B8F                 add     ecx, 20h ; ' '
.text:00402B92                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402B95                 call    sub_404620
.text:00402B9A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402BA1                 call    exit
.text:00402BA1 sub_402AF0      endp
.text:00402BA1
.text:00402BA1 ; ---------------------------------------------------------------------------
.text:00402BA6                 align 10h
.text:00402BB0                 mov     edx, [esp+4]
.text:00402BB4                 mov     ds:dword_406030, edx
.text:00402BBA                 retn
.text:00402BBA ; ---------------------------------------------------------------------------
.text:00402BBB aWriteError     db 'write error',0      ; DATA XREF: sub_402BE0:loc_402C29↓o
.text:00402BC7 ; const char aSS_0[]
.text:00402BC7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_402BE0+77↓o
.text:00402BCE ; const char aS_2[]
.text:00402BCE aS_2            db '%s',0               ; DATA XREF: sub_402BE0+A0↓o
.text:00402BD1 ; ---------------------------------------------------------------------------
.text:00402BD1                 jmp     short sub_402BE0
.text:00402BD1 ; ---------------------------------------------------------------------------
.text:00402BD3                 align 10h
.text:00402BE0
.text:00402BE0 ; =============== S U B R O U T I N E =======================================
.text:00402BE0
.text:00402BE0
.text:00402BE0 ; void __cdecl sub_402BE0()
.text:00402BE0 sub_402BE0      proc near               ; CODE XREF: .text:00402BD1↑j
.text:00402BE0                                         ; DATA XREF: sub_401380+5C↑o
.text:00402BE0
.text:00402BE0 Stream          = dword ptr -2Ch
.text:00402BE0 ErrorMessage    = dword ptr -28h
.text:00402BE0 var_24          = dword ptr -24h
.text:00402BE0 var_20          = byte ptr -20h
.text:00402BE0 var_1C          = dword ptr -1Ch
.text:00402BE0 var_9           = byte ptr -9
.text:00402BE0
.text:00402BE0                 push    esi
.text:00402BE1                 push    ebx
.text:00402BE2                 sub     esp, 24h
.text:00402BE5                 mov     edx, ds:_iob
.text:00402BEB                 mov     ecx, [edx+2Ch]
.text:00402BEE                 lea     esi, [edx+20h]
.text:00402BF1                 shr     ecx, 5
.text:00402BF4                 mov     bl, cl
.text:00402BF6                 mov     ecx, [edx+20h]
.text:00402BF9                 and     bl, 1
.text:00402BFC                 cmp     ecx, [esi+8]
.text:00402BFF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402C02                 setz    [esp+2Ch+var_9]
.text:00402C07                 call    fclose
.text:00402C0C                 test    eax, eax
.text:00402C0E                 setnz   al
.text:00402C11                 test    bl, bl
.text:00402C13                 jnz     loc_402CA3
.text:00402C19                 test    al, al
.text:00402C1B                 jz      short loc_402C70
.text:00402C1D
.text:00402C1D loc_402C1D:                             ; CODE XREF: sub_402BE0+CD↓j
.text:00402C1D                 call    _errno
.text:00402C22                 mov     esi, [eax]
.text:00402C24
.text:00402C24 loc_402C24:                             ; CODE XREF: sub_402BE0+C7↓j
.text:00402C24                 cmp     esi, 9
.text:00402C27                 jz      short loc_402C96
.text:00402C29
.text:00402C29 loc_402C29:                             ; CODE XREF: sub_402BE0+B8↓j
.text:00402C29                                         ; sub_402BE0+C1↓j
.text:00402C29                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402C30                 call    ds:libintl_gettext
.text:00402C36                 mov     ebx, eax
.text:00402C38                 mov     eax, ds:dword_406030
.text:00402C3D                 test    eax, eax
.text:00402C3F                 jz      short loc_402C76
.text:00402C41                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402C44                 call    sub_403DF0
.text:00402C49                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402C4D                 mov     edx, Code
.text:00402C53                 mov     [esp+2Ch+var_1C], ebx
.text:00402C57                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00402C5F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402C63                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402C66                 call    sub_4048E0
.text:00402C6B                 nop
.text:00402C6C                 lea     esi, [esi+0]
.text:00402C70
.text:00402C70 loc_402C70:                             ; CODE XREF: sub_402BE0+3B↑j
.text:00402C70                                         ; sub_402BE0+B4↓j ...
.text:00402C70                 add     esp, 24h
.text:00402C73                 pop     ebx
.text:00402C74                 pop     esi
.text:00402C75                 retn
.text:00402C76 ; ---------------------------------------------------------------------------
.text:00402C76
.text:00402C76 loc_402C76:                             ; CODE XREF: sub_402BE0+5F↑j
.text:00402C76                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402C7A                 mov     ebx, Code
.text:00402C80                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402C88                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402C8C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402C8F                 call    sub_4048E0
.text:00402C94                 jmp     short loc_402C70
.text:00402C96 ; ---------------------------------------------------------------------------
.text:00402C96
.text:00402C96 loc_402C96:                             ; CODE XREF: sub_402BE0+47↑j
.text:00402C96                 test    bl, bl
.text:00402C98                 jnz     short loc_402C29
.text:00402C9A                 cmp     [esp+2Ch+var_9], 0
.text:00402C9F                 jnz     short loc_402C70
.text:00402CA1                 jmp     short loc_402C29
.text:00402CA3 ; ---------------------------------------------------------------------------
.text:00402CA3
.text:00402CA3 loc_402CA3:                             ; CODE XREF: sub_402BE0+33↑j
.text:00402CA3                 xor     esi, esi
.text:00402CA5                 test    al, al
.text:00402CA7                 jz      loc_402C24
.text:00402CAD                 jmp     loc_402C1D
.text:00402CAD sub_402BE0      endp
.text:00402CAD
.text:00402CAD ; ---------------------------------------------------------------------------
.text:00402CB2                 align 10h
.text:00402CC0 aLiteral        db 'literal',0          ; DATA XREF: .text:00402D00↓o
.text:00402CC8 aShell          db 'shell',0            ; DATA XREF: .text:00402D04↓o
.text:00402CCE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402D08↓o
.text:00402CDB aC              db 'c',0                ; DATA XREF: .text:00402D0C↓o
.text:00402CDD aEscape         db 'escape',0           ; DATA XREF: .text:00402D10↓o
.text:00402CE4 aLocale         db 'locale',0           ; DATA XREF: .text:00402D14↓o
.text:00402CEB aClocale        db 'clocale',0          ; DATA XREF: .text:00402D18↓o
.text:00402CF3                 align 10h
.text:00402D00                 dd offset aLiteral      ; "literal"
.text:00402D04                 dd offset aShell        ; "shell"
.text:00402D08                 dd offset aShellAlways  ; "shell-always"
.text:00402D0C                 dd offset aC            ; "c"
.text:00402D10                 dd offset aEscape       ; "escape"
.text:00402D14                 dd offset aLocale       ; "locale"
.text:00402D18                 dd offset aClocale      ; "clocale"
.text:00402D1C                 dd 2 dup(0)
.text:00402D24                 dd 1, 2, 3, 4, 5, 6
.text:00402D3C asc_402D3C:                             ; DATA XREF: sub_402D50+7E↓o
.text:00402D3C                                         ; sub_402D50+A39↓o ...
.text:00402D3C                 text "UTF-16LE", '"',27h,'`'
.text:00402D42                 align 10h
.text:00402D50
.text:00402D50 ; =============== S U B R O U T I N E =======================================
.text:00402D50
.text:00402D50
.text:00402D50 ; int __cdecl sub_402D50(int, int, char *Str, int, int, int)
.text:00402D50 sub_402D50      proc near               ; CODE XREF: sub_402D50+43A↓p
.text:00402D50                                         ; .text:00403913↓p ...
.text:00402D50
.text:00402D50 C               = dword ptr -4Ch
.text:00402D50 Type            = dword ptr -48h
.text:00402D50 SizeInBytes     = dword ptr -44h
.text:00402D50 State           = dword ptr -40h
.text:00402D50 var_3C          = dword ptr -3Ch
.text:00402D50 var_38          = dword ptr -38h
.text:00402D50 var_34          = dword ptr -34h
.text:00402D50 var_30          = dword ptr -30h
.text:00402D50 var_29          = byte ptr -29h
.text:00402D50 var_28          = dword ptr -28h
.text:00402D50 var_22          = byte ptr -22h
.text:00402D50 var_21          = byte ptr -21h
.text:00402D50 var_20          = dword ptr -20h
.text:00402D50 var_1C          = dword ptr -1Ch
.text:00402D50 var_18          = mbstate_t ptr -18h
.text:00402D50 arg_0           = dword ptr  4
.text:00402D50 arg_4           = dword ptr  8
.text:00402D50 Str             = dword ptr  0Ch
.text:00402D50 arg_C           = dword ptr  10h
.text:00402D50 arg_10          = dword ptr  14h
.text:00402D50 arg_14          = dword ptr  18h
.text:00402D50
.text:00402D50                 push    ebp
.text:00402D51                 push    edi
.text:00402D52                 push    esi
.text:00402D53                 push    ebx
.text:00402D54                 sub     esp, 3Ch
.text:00402D57                 mov     edx, ds:__mb_cur_max
.text:00402D5D                 mov     [esp+4Ch+var_34], 0
.text:00402D65                 mov     [esp+4Ch+var_1C], 0
.text:00402D6D                 cmp     dword ptr [edx], 1
.text:00402D70                 mov     [esp+4Ch+var_20], 0
.text:00402D78                 mov     [esp+4Ch+var_21], 0
.text:00402D7D                 setz    [esp+4Ch+var_22]
.text:00402D82                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402D87                 ja      short def_402D8D ; jumptable 00402D8D default case, cases 0,1
.text:00402D89                 mov     edx, [esp+4Ch+arg_10]
.text:00402D8D                 jmp     ds:jpt_402D8D[edx*4] ; switch jump
.text:00402D8D ; ---------------------------------------------------------------------------
.text:00402D94 jpt_402D8D      dd offset def_402D8D    ; DATA XREF: sub_402D50+3D↑r
.text:00402D94                 dd offset def_402D8D    ; jump table for switch statement
.text:00402D94                 dd offset loc_4036D5
.text:00402D94                 dd offset loc_402DB0
.text:00402D94                 dd offset loc_4036FB
.text:00402D94                 dd offset loc_403705
.text:00402D94                 dd offset loc_403705
.text:00402DB0 ; ---------------------------------------------------------------------------
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_402D50+3D↑j
.text:00402DB0                                         ; DATA XREF: sub_402D50:jpt_402D8D↑o
.text:00402DB0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402D8D case 3
.text:00402DB4                 cmp     [esp+4Ch+var_34], eax
.text:00402DB8                 jnb     short loc_402DC1
.text:00402DBA                 mov     ebx, [esp+4Ch+arg_0]
.text:00402DBE                 mov     byte ptr [ebx], 22h ; '"'
.text:00402DC1
.text:00402DC1 loc_402DC1:                             ; CODE XREF: sub_402D50+68↑j
.text:00402DC1                 mov     [esp+4Ch+var_34], 1
.text:00402DC9                 mov     [esp+4Ch+var_21], 1
.text:00402DCE                 mov     [esp+4Ch+var_1C], offset asc_402D3C ; "\"'`"
.text:00402DD6
.text:00402DD6 loc_402DD6:                             ; CODE XREF: sub_402D50+9A6↓j
.text:00402DD6                 mov     [esp+4Ch+var_20], 1
.text:00402DDE
.text:00402DDE def_402D8D:                             ; CODE XREF: sub_402D50+37↑j
.text:00402DDE                                         ; sub_402D50+3D↑j ...
.text:00402DDE                 xor     ebp, ebp        ; jumptable 00402D8D default case, cases 0,1
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402D50+3DB↓j
.text:00402DE0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402DE5                 jz      loc_4036C7
.text:00402DEB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402DEF
.text:00402DEF loc_402DEF:                             ; CODE XREF: sub_402D50+980↓j
.text:00402DEF                 jz      loc_40365E
.text:00402DF5                 cmp     [esp+4Ch+var_21], 0
.text:00402DFA                 jz      short loc_402E40
.text:00402DFC                 mov     esi, [esp+4Ch+var_20]
.text:00402E00                 test    esi, esi
.text:00402E02                 jz      short loc_402E40
.text:00402E04                 mov     ecx, [esp+4Ch+var_20]
.text:00402E08                 lea     edi, [ecx+ebp]
.text:00402E0B                 cmp     edi, [esp+4Ch+arg_C]
.text:00402E0F                 ja      short loc_402E40
.text:00402E11                 cld
.text:00402E12                 mov     ebx, [esp+4Ch+Str]
.text:00402E16                 mov     edi, [esp+4Ch+var_1C]
.text:00402E1A                 add     ebx, ebp
.text:00402E1C                 mov     esi, ebx
.text:00402E1E                 cmp     ecx, ecx
.text:00402E20                 repe cmpsb
.text:00402E22                 jnz     short loc_402E40
.text:00402E24                 mov     edx, [esp+4Ch+arg_4]
.text:00402E28                 cmp     [esp+4Ch+var_34], edx
.text:00402E2C                 jnb     short loc_402E3A
.text:00402E2E                 mov     ecx, [esp+4Ch+arg_0]
.text:00402E32                 mov     eax, [esp+4Ch+var_34]
.text:00402E36                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402E3A
.text:00402E3A loc_402E3A:                             ; CODE XREF: sub_402D50+DC↑j
.text:00402E3A                 inc     [esp+4Ch+var_34]
.text:00402E3E                 mov     esi, esi
.text:00402E40
.text:00402E40 loc_402E40:                             ; CODE XREF: sub_402D50+AA↑j
.text:00402E40                                         ; sub_402D50+B2↑j ...
.text:00402E40                 mov     edi, [esp+4Ch+Str]
.text:00402E44                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402E49                 movzx   eax, bl
.text:00402E4C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402E4F                 ja      def_402E55      ; jumptable 00402E55 default case, cases 1-6,14-31,64
.text:00402E55                 jmp     ds:jpt_402E55[eax*4] ; switch jump
.text:00402E55 ; ---------------------------------------------------------------------------
.text:00402E5C jpt_402E55      dd offset loc_403058, offset def_402E55, offset def_402E55
.text:00402E5C                                         ; DATA XREF: sub_402D50+105↑r
.text:00402E5C                 dd offset def_402E55, offset def_402E55, offset def_402E55 ; jump table for switch statement
.text:00402E5C                 dd offset def_402E55, offset loc_403130, offset loc_40314E
.text:00402E5C                 dd offset loc_403152, offset loc_403197, offset loc_40319B
.text:00402E5C                 dd offset loc_40319F, offset loc_4031A3, offset def_402E55
.text:00402E5C                 dd offset def_402E55, offset def_402E55, offset def_402E55
.text:00402E5C                 dd offset def_402E55, offset def_402E55, offset def_402E55
.text:00402E5C                 dd offset def_402E55, offset def_402E55, offset def_402E55
.text:00402E5C                 dd offset def_402E55, offset def_402E55, offset def_402E55
.text:00402E5C                 dd offset def_402E55, offset def_402E55, offset def_402E55
.text:00402E5C                 dd offset def_402E55, offset def_402E55, offset loc_403628
.text:00402E5C                 dd offset loc_403628, offset loc_403628, offset loc_40364A
.text:00402E5C                 dd offset loc_403628, offset def_403252, offset loc_403628
.text:00402E5C                 dd offset loc_4031A7, offset loc_403628, offset loc_403628
.text:00402E5C                 dd offset loc_403628, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset loc_403628
.text:00402E5C                 dd offset loc_403628, offset loc_403628, offset loc_403628
.text:00402E5C                 dd offset loc_40320C, offset def_402E55, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset loc_403628, offset loc_403621
.text:00402E5C                 dd offset def_403252, offset loc_403628, offset def_403252
.text:00402E5C                 dd offset loc_403628, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset def_403252, offset def_403252, offset def_403252
.text:00402E5C                 dd offset loc_403638, offset loc_403628, offset loc_403638
.text:00402E5C                 dd offset loc_40364A
.text:00403058 ; ---------------------------------------------------------------------------
.text:00403058
.text:00403058 loc_403058:                             ; CODE XREF: sub_402D50+105↑j
.text:00403058                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:00403058                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402E55 case 0
.text:0040305D                 lea     eax, [ebp+1]
.text:00403060                 jz      loc_403110
.text:00403066                 mov     esi, [esp+4Ch+arg_4]
.text:0040306A                 cmp     [esp+4Ch+var_34], esi
.text:0040306E                 jnb     short loc_40307C
.text:00403070                 mov     eax, [esp+4Ch+arg_0]
.text:00403074                 mov     ebx, [esp+4Ch+var_34]
.text:00403078                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040307C
.text:0040307C loc_40307C:                             ; CODE XREF: sub_402D50+31E↑j
.text:0040307C                 inc     [esp+4Ch+var_34]
.text:00403080                 mov     edx, [esp+4Ch+arg_4]
.text:00403084                 cmp     [esp+4Ch+var_34], edx
.text:00403088                 jnb     short loc_403096
.text:0040308A                 mov     edi, [esp+4Ch+arg_0]
.text:0040308E                 mov     ecx, [esp+4Ch+var_34]
.text:00403092                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403096
.text:00403096 loc_403096:                             ; CODE XREF: sub_402D50+338↑j
.text:00403096                 inc     [esp+4Ch+var_34]
.text:0040309A                 mov     esi, [esp+4Ch+arg_4]
.text:0040309E                 cmp     [esp+4Ch+var_34], esi
.text:004030A2                 jnb     short loc_4030B0
.text:004030A4                 mov     ebx, [esp+4Ch+arg_0]
.text:004030A8                 mov     eax, [esp+4Ch+var_34]
.text:004030AC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004030B0
.text:004030B0 loc_4030B0:                             ; CODE XREF: sub_402D50+352↑j
.text:004030B0                 inc     [esp+4Ch+var_34]
.text:004030B4                 mov     bl, 30h ; '0'
.text:004030B6                 lea     esi, [esi+0]
.text:004030B9                 lea     edi, [edi+0]
.text:004030C0
.text:004030C0 def_403252:                             ; CODE XREF: sub_402D50+105↑j
.text:004030C0                                         ; sub_402D50+463↓j ...
.text:004030C0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:004030C0                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:004030C5                 lea     eax, [ebp+1]
.text:004030C8                 jz      short loc_403110
.text:004030CA                 mov     cl, bl
.text:004030CC                 mov     edi, [esp+4Ch+arg_14]
.text:004030D0                 mov     esi, 1
.text:004030D5                 shr     cl, 5
.text:004030D8                 movzx   edx, cl
.text:004030DB                 mov     ecx, ebx
.text:004030DD                 and     ecx, 1Fh
.text:004030E0                 shl     esi, cl
.text:004030E2                 test    [edi+edx*4+4], esi
.text:004030E6                 jz      short loc_403102
.text:004030E8
.text:004030E8 loc_4030E8:                             ; CODE XREF: sub_402D50+3FC↓j
.text:004030E8                 mov     edx, [esp+4Ch+arg_4]
.text:004030EC                 cmp     [esp+4Ch+var_34], edx
.text:004030F0                 jnb     short loc_4030FE
.text:004030F2                 mov     edi, [esp+4Ch+arg_0]
.text:004030F6                 mov     esi, [esp+4Ch+var_34]
.text:004030FA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004030FE
.text:004030FE loc_4030FE:                             ; CODE XREF: sub_402D50+3A0↑j
.text:004030FE                 inc     [esp+4Ch+var_34]
.text:00403102
.text:00403102 loc_403102:                             ; CODE XREF: sub_402D50+396↑j
.text:00403102                 lea     eax, [ebp+1]
.text:00403105                 lea     esi, [esi+0]
.text:00403109                 lea     edi, [edi+0]
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_402D50+310↑j
.text:00403110                                         ; sub_402D50+378↑j ...
.text:00403110                 mov     ebp, [esp+4Ch+arg_4]
.text:00403114                 cmp     [esp+4Ch+var_34], ebp
.text:00403118                 jnb     short loc_403125
.text:0040311A                 mov     edx, [esp+4Ch+arg_0]
.text:0040311E                 mov     ecx, [esp+4Ch+var_34]
.text:00403122                 mov     [ecx+edx], bl
.text:00403125
.text:00403125 loc_403125:                             ; CODE XREF: sub_402D50+3C8↑j
.text:00403125                 inc     [esp+4Ch+var_34]
.text:00403129                 mov     ebp, eax
.text:0040312B                 jmp     loc_402DE0
.text:00403130 ; ---------------------------------------------------------------------------
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_402D50+105↑j
.text:00403130                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:00403130                 mov     dl, 61h ; 'a'   ; jumptable 00402E55 case 7
.text:00403132                 lea     esi, [esi+0]
.text:00403139                 lea     edi, [edi+0]
.text:00403140
.text:00403140 loc_403140:                             ; CODE XREF: sub_402D50+400↓j
.text:00403140                                         ; sub_402D50+409↓j ...
.text:00403140                 cmp     [esp+4Ch+var_21], 0
.text:00403145                 lea     eax, [ebp+1]
.text:00403148                 jz      short loc_403110
.text:0040314A                 mov     bl, dl
.text:0040314C                 jmp     short loc_4030E8
.text:0040314E ; ---------------------------------------------------------------------------
.text:0040314E
.text:0040314E loc_40314E:                             ; CODE XREF: sub_402D50+105↑j
.text:0040314E                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:0040314E                 mov     dl, 62h ; 'b'   ; jumptable 00402E55 case 8
.text:00403150                 jmp     short loc_403140
.text:00403152 ; ---------------------------------------------------------------------------
.text:00403152
.text:00403152 loc_403152:                             ; CODE XREF: sub_402D50+105↑j
.text:00403152                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:00403152                 mov     dl, 74h ; 't'   ; jumptable 00402E55 case 9
.text:00403154
.text:00403154 loc_403154:                             ; CODE XREF: sub_402D50+449↓j
.text:00403154                                         ; sub_402D50+455↓j ...
.text:00403154                 cmp     [esp+4Ch+arg_10], 1
.text:00403159                 jnz     short loc_403140
.text:0040315B
.text:0040315B loc_40315B:                             ; CODE XREF: sub_402D50+45C↓j
.text:0040315B                                         ; sub_402D50+4C1↓j ...
.text:0040315B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403522 cases 91,92,94,96,124
.text:00403163                 mov     eax, [esp+4Ch+arg_14]
.text:00403167                 mov     edx, [esp+4Ch+arg_C]
.text:0040316B                 mov     ecx, [esp+4Ch+Str]
.text:0040316F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403173                 mov     [esp+4Ch+var_38], eax ; int
.text:00403177                 mov     ebp, [esp+4Ch+arg_0]
.text:0040317B                 mov     [esp+4Ch+State], edx ; int
.text:0040317F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403183                 mov     [esp+4Ch+Type], ebx ; int
.text:00403187                 mov     [esp+4Ch+C], ebp ; int
.text:0040318A                 call    sub_402D50
.text:0040318F
.text:0040318F loc_40318F:                             ; CODE XREF: sub_402D50+972↓j
.text:0040318F                 add     esp, 3Ch
.text:00403192                 pop     ebx
.text:00403193                 pop     esi
.text:00403194                 pop     edi
.text:00403195                 pop     ebp
.text:00403196                 retn
.text:00403197 ; ---------------------------------------------------------------------------
.text:00403197
.text:00403197 loc_403197:                             ; CODE XREF: sub_402D50+105↑j
.text:00403197                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:00403197                 mov     dl, 6Eh ; 'n'   ; jumptable 00402E55 case 10
.text:00403199                 jmp     short loc_403154
.text:0040319B ; ---------------------------------------------------------------------------
.text:0040319B
.text:0040319B loc_40319B:                             ; CODE XREF: sub_402D50+105↑j
.text:0040319B                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:0040319B                 mov     dl, 76h ; 'v'   ; jumptable 00402E55 case 11
.text:0040319D                 jmp     short loc_403140
.text:0040319F ; ---------------------------------------------------------------------------
.text:0040319F
.text:0040319F loc_40319F:                             ; CODE XREF: sub_402D50+105↑j
.text:0040319F                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:0040319F                 mov     dl, 66h ; 'f'   ; jumptable 00402E55 case 12
.text:004031A1                 jmp     short loc_403140
.text:004031A3 ; ---------------------------------------------------------------------------
.text:004031A3
.text:004031A3 loc_4031A3:                             ; CODE XREF: sub_402D50+105↑j
.text:004031A3                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:004031A3                 mov     dl, 72h ; 'r'   ; jumptable 00402E55 case 13
.text:004031A5                 jmp     short loc_403154
.text:004031A7 ; ---------------------------------------------------------------------------
.text:004031A7
.text:004031A7 loc_4031A7:                             ; CODE XREF: sub_402D50+105↑j
.text:004031A7                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:004031A7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402E55 case 39
.text:004031AC                 jz      short loc_40315B ; jumptable 00403522 cases 91,92,94,96,124
.text:004031AE                 cmp     [esp+4Ch+arg_10], 2
.text:004031B3                 jnz     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:004031B3                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:004031B9                 mov     edx, [esp+4Ch+arg_4]
.text:004031BD                 cmp     [esp+4Ch+var_34], edx
.text:004031C1                 jnb     short loc_4031CF
.text:004031C3                 mov     ecx, [esp+4Ch+arg_0]
.text:004031C7                 mov     edi, [esp+4Ch+var_34]
.text:004031CB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004031CF
.text:004031CF loc_4031CF:                             ; CODE XREF: sub_402D50+471↑j
.text:004031CF                 inc     [esp+4Ch+var_34]
.text:004031D3                 mov     eax, [esp+4Ch+arg_4]
.text:004031D7                 cmp     [esp+4Ch+var_34], eax
.text:004031DB                 jnb     short loc_4031E9
.text:004031DD                 mov     esi, [esp+4Ch+arg_0]
.text:004031E1                 mov     edx, [esp+4Ch+var_34]
.text:004031E5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004031E9
.text:004031E9 loc_4031E9:                             ; CODE XREF: sub_402D50+48B↑j
.text:004031E9                 inc     [esp+4Ch+var_34]
.text:004031ED                 mov     edi, [esp+4Ch+arg_4]
.text:004031F1                 cmp     [esp+4Ch+var_34], edi
.text:004031F5                 jnb     short loc_403203
.text:004031F7                 mov     ecx, [esp+4Ch+arg_0]
.text:004031FB                 mov     eax, [esp+4Ch+var_34]
.text:004031FF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403203
.text:00403203 loc_403203:                             ; CODE XREF: sub_402D50+4A5↑j
.text:00403203                                         ; sub_402D50+5C4↓j ...
.text:00403203                 inc     [esp+4Ch+var_34]
.text:00403207                 jmp     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:00403207                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:0040320C ; ---------------------------------------------------------------------------
.text:0040320C
.text:0040320C loc_40320C:                             ; CODE XREF: sub_402D50+105↑j
.text:0040320C                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:0040320C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402E55 case 63
.text:00403211                 jz      loc_40315B      ; jumptable 00403522 cases 91,92,94,96,124
.text:00403217                 cmp     [esp+4Ch+arg_10], 3
.text:0040321C                 jnz     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:0040321C                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:00403222                 lea     edx, [ebp+2]
.text:00403225                 cmp     edx, [esp+4Ch+arg_C]
.text:00403229                 jnb     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:00403229                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:0040322F                 mov     esi, [esp+4Ch+Str]
.text:00403233                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403238                 jnz     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:00403238                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:0040323E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403243                 movsx   eax, cl
.text:00403246                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403249                 cmp     eax, 1Dh
.text:0040324C                 ja      def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:0040324C                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:00403252                 jmp     ds:jpt_403252[eax*4] ; switch jump
.text:00403252 ; ---------------------------------------------------------------------------
.text:00403259                 align 4
.text:0040325C jpt_403252      dd offset loc_4032D4    ; DATA XREF: sub_402D50+502↑r
.text:0040325C                 dd offset def_403252    ; jump table for switch statement
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset loc_4032D4
.text:0040325C                 dd offset loc_4032D4
.text:0040325C                 dd offset loc_4032D4
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset loc_4032D4
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset loc_4032D4
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset def_403252
.text:0040325C                 dd offset loc_4032D4
.text:0040325C                 dd offset loc_4032D4
.text:0040325C                 dd offset loc_4032D4
.text:004032D4 ; ---------------------------------------------------------------------------
.text:004032D4
.text:004032D4 loc_4032D4:                             ; CODE XREF: sub_402D50+502↑j
.text:004032D4                                         ; DATA XREF: sub_402D50:jpt_403252↑o
.text:004032D4                 mov     ebp, edx        ; jumptable 00403252 cases 33,39-41,45,47,60-62
.text:004032D6                 mov     bl, cl
.text:004032D8                 mov     edx, [esp+4Ch+arg_4]
.text:004032DC                 cmp     [esp+4Ch+var_34], edx
.text:004032E0                 jnb     short loc_4032EE
.text:004032E2                 mov     ecx, [esp+4Ch+arg_0]
.text:004032E6                 mov     edi, [esp+4Ch+var_34]
.text:004032EA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004032EE
.text:004032EE loc_4032EE:                             ; CODE XREF: sub_402D50+590↑j
.text:004032EE                 inc     [esp+4Ch+var_34]
.text:004032F2                 mov     eax, [esp+4Ch+arg_4]
.text:004032F6                 cmp     [esp+4Ch+var_34], eax
.text:004032FA                 jnb     short loc_403308
.text:004032FC                 mov     edx, [esp+4Ch+arg_0]
.text:00403300                 mov     esi, [esp+4Ch+var_34]
.text:00403304                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403308
.text:00403308 loc_403308:                             ; CODE XREF: sub_402D50+5AA↑j
.text:00403308                 inc     [esp+4Ch+var_34]
.text:0040330C                 mov     edi, [esp+4Ch+arg_4]
.text:00403310                 cmp     [esp+4Ch+var_34], edi
.text:00403314                 jnb     loc_403203
.text:0040331A                 mov     eax, [esp+4Ch+arg_0]
.text:0040331E                 mov     ecx, [esp+4Ch+var_34]
.text:00403322                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403326                 jmp     loc_403203
.text:00403326 ; ---------------------------------------------------------------------------
.text:0040332B                 align 10h
.text:00403330
.text:00403330 def_402E55:                             ; CODE XREF: sub_402D50+FF↑j
.text:00403330                                         ; sub_402D50+105↑j
.text:00403330                                         ; DATA XREF: ...
.text:00403330                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402E55 default case, cases 1-6,14-31,64
.text:00403335                 jz      loc_403460
.text:0040333B                 mov     [esp+4Ch+var_28], 1
.text:00403343                 mov     esi, ds:__mb_cur_max
.text:00403349                 movzx   edx, bl
.text:0040334C                 cmp     dword ptr [esi], 1
.text:0040334F                 jz      loc_403444
.text:00403355                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040335D                 mov     [esp+4Ch+C], edx ; C
.text:00403360                 call    _isctype
.text:00403365
.text:00403365 loc_403365:                             ; CODE XREF: sub_402D50+705↓j
.text:00403365                 test    eax, eax
.text:00403367                 setnz   [esp+4Ch+var_29]
.text:0040336C
.text:0040336C loc_40336C:                             ; CODE XREF: sub_402D50+7A5↓j
.text:0040336C                 cmp     [esp+4Ch+var_21], 0
.text:00403371                 lea     eax, [ebp+1]
.text:00403374                 jz      loc_403110
.text:0040337A                 cmp     [esp+4Ch+var_29], 0
.text:0040337F                 jnz     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:0040337F                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:00403385
.text:00403385 loc_403385:                             ; CODE XREF: sub_402D50+7AB↓j
.text:00403385                 mov     eax, [esp+4Ch+var_28]
.text:00403389                 lea     edx, [eax+ebp]
.text:0040338C                 lea     esi, [esi+0]
.text:00403390
.text:00403390 loc_403390:                             ; CODE XREF: sub_402D50+6EF↓j
.text:00403390                 cmp     [esp+4Ch+var_21], 0
.text:00403395                 jz      short loc_403410
.text:00403397                 cmp     [esp+4Ch+var_29], 0
.text:0040339C                 jnz     short loc_403410
.text:0040339E                 mov     edi, [esp+4Ch+arg_4]
.text:004033A2                 cmp     [esp+4Ch+var_34], edi
.text:004033A6                 jnb     short loc_4033B4
.text:004033A8                 mov     esi, [esp+4Ch+arg_0]
.text:004033AC                 mov     eax, [esp+4Ch+var_34]
.text:004033B0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004033B4
.text:004033B4 loc_4033B4:                             ; CODE XREF: sub_402D50+656↑j
.text:004033B4                 inc     [esp+4Ch+var_34]
.text:004033B8                 mov     ecx, [esp+4Ch+arg_4]
.text:004033BC                 cmp     [esp+4Ch+var_34], ecx
.text:004033C0                 jnb     short loc_4033D5
.text:004033C2                 mov     cl, bl
.text:004033C4                 mov     esi, [esp+4Ch+arg_0]
.text:004033C8                 mov     edi, [esp+4Ch+var_34]
.text:004033CC                 shr     cl, 6
.text:004033CF                 add     cl, 30h ; '0'
.text:004033D2                 mov     [edi+esi], cl
.text:004033D5
.text:004033D5 loc_4033D5:                             ; CODE XREF: sub_402D50+670↑j
.text:004033D5                 inc     [esp+4Ch+var_34]
.text:004033D9                 mov     edi, [esp+4Ch+arg_4]
.text:004033DD                 cmp     [esp+4Ch+var_34], edi
.text:004033E1                 jnb     short loc_4033F9
.text:004033E3                 mov     cl, bl
.text:004033E5                 mov     esi, [esp+4Ch+arg_0]
.text:004033E9                 shr     cl, 3
.text:004033EC                 mov     edi, [esp+4Ch+var_34]
.text:004033F0                 and     cl, 7
.text:004033F3                 add     cl, 30h ; '0'
.text:004033F6                 mov     [edi+esi], cl
.text:004033F9
.text:004033F9 loc_4033F9:                             ; CODE XREF: sub_402D50+691↑j
.text:004033F9                 inc     [esp+4Ch+var_34]
.text:004033FD                 and     bl, 7
.text:00403400                 add     bl, 30h ; '0'
.text:00403403                 lea     esi, [esi+0]
.text:00403409                 lea     edi, [edi+0]
.text:00403410
.text:00403410 loc_403410:                             ; CODE XREF: sub_402D50+645↑j
.text:00403410                                         ; sub_402D50+64C↑j
.text:00403410                 lea     eax, [ebp+1]
.text:00403413                 cmp     edx, eax
.text:00403415                 jbe     loc_403110
.text:0040341B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040341F                 cmp     [esp+4Ch+var_34], ebp
.text:00403423                 jnb     short loc_403430
.text:00403425                 mov     ecx, [esp+4Ch+arg_0]
.text:00403429                 mov     edi, [esp+4Ch+var_34]
.text:0040342D                 mov     [edi+ecx], bl
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_402D50+6D3↑j
.text:00403430                 inc     [esp+4Ch+var_34]
.text:00403434                 mov     ebp, eax
.text:00403436                 mov     eax, [esp+4Ch+Str]
.text:0040343A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040343F                 jmp     loc_403390
.text:00403444 ; ---------------------------------------------------------------------------
.text:00403444
.text:00403444 loc_403444:                             ; CODE XREF: sub_402D50+5FF↑j
.text:00403444                 mov     ecx, ds:_pctype
.text:0040344A                 mov     edi, [ecx]
.text:0040344C                 movzx   eax, word ptr [edi+edx*2]
.text:00403450                 and     eax, 157h
.text:00403455                 jmp     loc_403365
.text:00403455 ; ---------------------------------------------------------------------------
.text:0040345A                 align 10h
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: sub_402D50+5E5↑j
.text:00403460                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403465                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040346D                 mov     [esp+4Ch+var_28], 0
.text:00403475                 mov     [esp+4Ch+var_29], 1
.text:0040347A                 jz      loc_40360C
.text:00403480
.text:00403480 loc_403480:                             ; CODE XREF: sub_402D50+8CC↓j
.text:00403480                 mov     ecx, [esp+4Ch+arg_C]
.text:00403484                 lea     edx, [esp+4Ch+var_18]
.text:00403488                 mov     edi, [esp+4Ch+Str]
.text:0040348C                 mov     [esp+4Ch+State], edx ; State
.text:00403490                 lea     esi, [esp+4Ch+var_18._State]
.text:00403494                 sub     ecx, ebp
.text:00403496                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040349A                 add     edi, ebp
.text:0040349C                 mov     [esp+4Ch+var_30], edi
.text:004034A0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004034A4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004034A7                 call    mbrtowc
.text:004034AC                 test    eax, eax
.text:004034AE                 mov     edi, eax
.text:004034B0                 jz      short loc_4034F0
.text:004034B2                 cmp     eax, 0FFFFFFFFh
.text:004034B5                 jz      loc_403602
.text:004034BB                 cmp     eax, 0FFFFFFFEh
.text:004034BE                 jz      loc_4035C2
.text:004034C4                 cmp     [esp+4Ch+arg_10], 1
.text:004034C9                 jz      short loc_403500
.text:004034CB
.text:004034CB loc_4034CB:                             ; CODE XREF: sub_402D50+7B9↓j
.text:004034CB                                         ; sub_402D50+86D↓j
.text:004034CB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004034D0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004034D8                 mov     [esp+4Ch+C], ecx ; C
.text:004034DB                 call    iswctype
.text:004034E0                 test    eax, eax
.text:004034E2                 jnz     short loc_4034E9
.text:004034E4                 mov     [esp+4Ch+var_29], 0
.text:004034E9
.text:004034E9 loc_4034E9:                             ; CODE XREF: sub_402D50+792↑j
.text:004034E9                 mov     [esp+4Ch+var_28], edi
.text:004034ED                 lea     esi, [esi+0]
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_402D50+760↑j
.text:004034F0                                         ; sub_402D50+87B↓j ...
.text:004034F0                 cmp     [esp+4Ch+var_28], 1
.text:004034F5                 jbe     loc_40336C
.text:004034FB                 jmp     loc_403385
.text:00403500 ; ---------------------------------------------------------------------------
.text:00403500
.text:00403500 loc_403500:                             ; CODE XREF: sub_402D50+779↑j
.text:00403500                 cmp     [esp+4Ch+arg_10], eax
.text:00403504                 mov     edx, 1
.text:00403509                 jnb     short loc_4034CB
.text:0040350B
.text:0040350B loc_40350B:                             ; CODE XREF: sub_402D50+867↓j
.text:0040350B                 mov     ecx, [esp+4Ch+Str]
.text:0040350F                 lea     esi, [edx+ebp]
.text:00403512                 movsx   eax, byte ptr [esi+ecx]
.text:00403516                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403519                 cmp     eax, 21h
.text:0040351C                 ja      def_403522      ; jumptable 00403522 default case, cases 93,95,97-123
.text:00403522                 jmp     ds:jpt_403522[eax*4] ; switch jump
.text:00403522 ; ---------------------------------------------------------------------------
.text:00403529                 align 4
.text:0040352C jpt_403522      dd offset loc_40315B    ; DATA XREF: sub_402D50+7D2↑r
.text:0040352C                 dd offset loc_40315B    ; jump table for switch statement
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset loc_40315B
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset loc_40315B
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset def_403522
.text:0040352C                 dd offset loc_40315B
.text:004035B4 ; ---------------------------------------------------------------------------
.text:004035B4
.text:004035B4 def_403522:                             ; CODE XREF: sub_402D50+7CC↑j
.text:004035B4                                         ; sub_402D50+7D2↑j
.text:004035B4                                         ; DATA XREF: ...
.text:004035B4                 inc     edx             ; jumptable 00403522 default case, cases 93,95,97-123
.text:004035B5                 cmp     edx, edi
.text:004035B7                 jb      loc_40350B
.text:004035BD                 jmp     loc_4034CB
.text:004035C2 ; ---------------------------------------------------------------------------
.text:004035C2
.text:004035C2 loc_4035C2:                             ; CODE XREF: sub_402D50+76E↑j
.text:004035C2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004035C6                 mov     [esp+4Ch+var_29], 0
.text:004035CB                 jnb     loc_4034F0
.text:004035D1                 mov     eax, [esp+4Ch+var_30]
.text:004035D5                 cmp     byte ptr [eax], 0
.text:004035D8                 jz      loc_4034F0
.text:004035DE
.text:004035DE loc_4035DE:                             ; CODE XREF: sub_402D50+8AB↓j
.text:004035DE                 inc     [esp+4Ch+var_28]
.text:004035E2                 mov     esi, [esp+4Ch+var_28]
.text:004035E6                 lea     eax, [esi+ebp]
.text:004035E9                 cmp     eax, [esp+4Ch+arg_C]
.text:004035ED                 jnb     loc_4034F0
.text:004035F3                 mov     edi, [esp+4Ch+Str]
.text:004035F7                 cmp     byte ptr [eax+edi], 0
.text:004035FB                 jnz     short loc_4035DE
.text:004035FD                 jmp     loc_4034F0
.text:00403602 ; ---------------------------------------------------------------------------
.text:00403602
.text:00403602 loc_403602:                             ; CODE XREF: sub_402D50+765↑j
.text:00403602                 mov     [esp+4Ch+var_29], 0
.text:00403607                 jmp     loc_4034F0
.text:0040360C ; ---------------------------------------------------------------------------
.text:0040360C
.text:0040360C loc_40360C:                             ; CODE XREF: sub_402D50+72A↑j
.text:0040360C                 mov     edx, [esp+4Ch+Str]
.text:00403610                 mov     [esp+4Ch+C], edx ; Str
.text:00403613                 call    strlen
.text:00403618                 mov     [esp+4Ch+arg_C], eax
.text:0040361C                 jmp     loc_403480
.text:00403621 ; ---------------------------------------------------------------------------
.text:00403621
.text:00403621 loc_403621:                             ; CODE XREF: sub_402D50+105↑j
.text:00403621                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:00403621                 mov     dl, bl          ; jumptable 00402E55 case 92
.text:00403623                 jmp     loc_403154
.text:00403628 ; ---------------------------------------------------------------------------
.text:00403628
.text:00403628 loc_403628:                             ; CODE XREF: sub_402D50+105↑j
.text:00403628                                         ; sub_402D50+902↓j
.text:00403628                                         ; DATA XREF: ...
.text:00403628                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402E55 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040362D                 jnz     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:0040362D                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:00403633                 jmp     loc_40315B      ; jumptable 00403522 cases 91,92,94,96,124
.text:00403638 ; ---------------------------------------------------------------------------
.text:00403638
.text:00403638 loc_403638:                             ; CODE XREF: sub_402D50+105↑j
.text:00403638                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:00403638                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402E55 cases 123,125
.text:0040363D                 jz      short loc_403654
.text:0040363F                 cmp     [esp+4Ch+arg_C], 1
.text:00403644
.text:00403644 loc_403644:                             ; CODE XREF: sub_402D50+90C↓j
.text:00403644                 jnz     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:00403644                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:0040364A
.text:0040364A loc_40364A:                             ; CODE XREF: sub_402D50+105↑j
.text:0040364A                                         ; DATA XREF: sub_402D50:jpt_402E55↑o
.text:0040364A                 test    ebp, ebp        ; jumptable 00402E55 cases 35,126
.text:0040364C                 jnz     def_403252      ; jumptable 00402E55 cases 37,43-58,65-90,93,95,97-122
.text:0040364C                                         ; jumptable 00403252 default case, cases 34-38,42-44,46,48-59
.text:00403652                 jmp     short loc_403628 ; jumptable 00402E55 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403654 ; ---------------------------------------------------------------------------
.text:00403654
.text:00403654 loc_403654:                             ; CODE XREF: sub_402D50+8ED↑j
.text:00403654                 mov     esi, [esp+4Ch+Str]
.text:00403658                 cmp     byte ptr [esi+1], 0
.text:0040365C                 jmp     short loc_403644
.text:0040365E ; ---------------------------------------------------------------------------
.text:0040365E
.text:0040365E loc_40365E:                             ; CODE XREF: sub_402D50:loc_402DEF↑j
.text:0040365E                 test    ebp, ebp
.text:00403660                 jnz     short loc_40366D
.text:00403662                 cmp     [esp+4Ch+arg_10], 1
.text:00403667                 jz      loc_40315B      ; jumptable 00403522 cases 91,92,94,96,124
.text:0040366D
.text:0040366D loc_40366D:                             ; CODE XREF: sub_402D50+910↑j
.text:0040366D                 mov     esi, [esp+4Ch+var_1C]
.text:00403671                 test    esi, esi
.text:00403673                 jz      short loc_4036A8
.text:00403675                 mov     edi, [esp+4Ch+var_1C]
.text:00403679                 movzx   eax, byte ptr [edi]
.text:0040367C                 test    al, al
.text:0040367E                 jz      short loc_4036A8
.text:00403680
.text:00403680 loc_403680:                             ; CODE XREF: sub_402D50+956↓j
.text:00403680                 mov     ebp, [esp+4Ch+arg_4]
.text:00403684                 cmp     [esp+4Ch+var_34], ebp
.text:00403688                 jnb     short loc_403695
.text:0040368A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040368E                 mov     ebx, [esp+4Ch+var_34]
.text:00403692                 mov     [ebx+ecx], al
.text:00403695
.text:00403695 loc_403695:                             ; CODE XREF: sub_402D50+938↑j
.text:00403695                 inc     [esp+4Ch+var_1C]
.text:00403699                 inc     [esp+4Ch+var_34]
.text:0040369D                 mov     edx, [esp+4Ch+var_1C]
.text:004036A1                 movzx   eax, byte ptr [edx]
.text:004036A4                 test    al, al
.text:004036A6                 jnz     short loc_403680
.text:004036A8
.text:004036A8 loc_4036A8:                             ; CODE XREF: sub_402D50+923↑j
.text:004036A8                                         ; sub_402D50+92E↑j
.text:004036A8                 mov     eax, [esp+4Ch+arg_4]
.text:004036AC                 cmp     [esp+4Ch+var_34], eax
.text:004036B0                 jnb     short loc_4036BE
.text:004036B2                 mov     edi, [esp+4Ch+arg_0]
.text:004036B6                 mov     esi, [esp+4Ch+var_34]
.text:004036BA                 mov     byte ptr [esi+edi], 0
.text:004036BE
.text:004036BE loc_4036BE:                             ; CODE XREF: sub_402D50+960↑j
.text:004036BE                 mov     eax, [esp+4Ch+var_34]
.text:004036C2                 jmp     loc_40318F
.text:004036C7 ; ---------------------------------------------------------------------------
.text:004036C7
.text:004036C7 loc_4036C7:                             ; CODE XREF: sub_402D50+95↑j
.text:004036C7                 mov     ebx, [esp+4Ch+Str]
.text:004036CB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004036D0                 jmp     loc_402DEF
.text:004036D5 ; ---------------------------------------------------------------------------
.text:004036D5
.text:004036D5 loc_4036D5:                             ; CODE XREF: sub_402D50+3D↑j
.text:004036D5                                         ; DATA XREF: sub_402D50:jpt_402D8D↑o
.text:004036D5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402D8D case 2
.text:004036D9                 cmp     [esp+4Ch+var_34], edx
.text:004036DD                 jnb     short loc_4036E6
.text:004036DF                 mov     ecx, [esp+4Ch+arg_0]
.text:004036E3                 mov     byte ptr [ecx], 27h ; '''
.text:004036E6
.text:004036E6 loc_4036E6:                             ; CODE XREF: sub_402D50+98D↑j
.text:004036E6                 mov     [esp+4Ch+var_34], 1
.text:004036EE                 mov     [esp+4Ch+var_1C], 402D3Eh
.text:004036F6                 jmp     loc_402DD6
.text:004036FB ; ---------------------------------------------------------------------------
.text:004036FB
.text:004036FB loc_4036FB:                             ; CODE XREF: sub_402D50+3D↑j
.text:004036FB                                         ; DATA XREF: sub_402D50:jpt_402D8D↑o
.text:004036FB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402D8D case 4
.text:00403700                 jmp     def_402D8D      ; jumptable 00402D8D default case, cases 0,1
.text:00403705 ; ---------------------------------------------------------------------------
.text:00403705
.text:00403705 loc_403705:                             ; CODE XREF: sub_402D50+3D↑j
.text:00403705                                         ; DATA XREF: sub_402D50:jpt_402D8D↑o
.text:00403705                 mov     [esp+4Ch+C], 402D40h ; jumptable 00402D8D cases 5,6
.text:0040370C                 call    ds:libintl_gettext
.text:00403712                 cmp     eax, 402D40h
.text:00403717                 mov     edi, eax
.text:00403719                 jz      short loc_403790
.text:0040371B
.text:0040371B loc_40371B:                             ; CODE XREF: sub_402D50+A45↓j
.text:0040371B                                         ; sub_402D50+A4C↓j
.text:0040371B                 mov     [esp+4Ch+C], 402D3Eh
.text:00403722                 call    ds:libintl_gettext
.text:00403728                 cmp     eax, 402D3Eh
.text:0040372D                 mov     edx, eax
.text:0040372F                 jz      short loc_403782
.text:00403731
.text:00403731 loc_403731:                             ; CODE XREF: sub_402D50+A37↓j
.text:00403731                                         ; sub_402D50+A3E↓j
.text:00403731                 mov     [esp+4Ch+var_1C], edi
.text:00403735                 cmp     byte ptr [edi], 0
.text:00403738                 jz      short loc_403768
.text:0040373A
.text:0040373A loc_40373A:                             ; CODE XREF: sub_402D50+A16↓j
.text:0040373A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040373E                 cmp     [esp+4Ch+var_34], ecx
.text:00403742                 jnb     short loc_403757
.text:00403744                 mov     ebp, [esp+4Ch+var_1C]
.text:00403748                 mov     edi, [esp+4Ch+arg_0]
.text:0040374C                 mov     esi, [esp+4Ch+var_34]
.text:00403750                 movzx   ebx, byte ptr [ebp+0]
.text:00403754                 mov     [esi+edi], bl
.text:00403757
.text:00403757 loc_403757:                             ; CODE XREF: sub_402D50+9F2↑j
.text:00403757                 inc     [esp+4Ch+var_1C]
.text:0040375B                 inc     [esp+4Ch+var_34]
.text:0040375F                 mov     eax, [esp+4Ch+var_1C]
.text:00403763                 cmp     byte ptr [eax], 0
.text:00403766                 jnz     short loc_40373A
.text:00403768
.text:00403768 loc_403768:                             ; CODE XREF: sub_402D50+9E8↑j
.text:00403768                 mov     [esp+4Ch+var_21], 1
.text:0040376D                 mov     [esp+4Ch+var_1C], edx
.text:00403771                 mov     [esp+4Ch+C], edx ; Str
.text:00403774                 call    strlen
.text:00403779                 mov     [esp+4Ch+var_20], eax
.text:0040377D                 jmp     def_402D8D      ; jumptable 00402D8D default case, cases 0,1
.text:00403782 ; ---------------------------------------------------------------------------
.text:00403782
.text:00403782 loc_403782:                             ; CODE XREF: sub_402D50+9DF↑j
.text:00403782                 cmp     [esp+4Ch+arg_10], 6
.text:00403787                 jnz     short loc_403731
.text:00403789                 mov     edx, offset asc_402D3C ; "\"'`"
.text:0040378E                 jmp     short loc_403731
.text:00403790 ; ---------------------------------------------------------------------------
.text:00403790
.text:00403790 loc_403790:                             ; CODE XREF: sub_402D50+9C9↑j
.text:00403790                 cmp     [esp+4Ch+arg_10], 6
.text:00403795                 jnz     short loc_40371B
.text:00403797                 mov     edi, offset asc_402D3C ; "\"'`"
.text:0040379C                 jmp     loc_40371B
.text:0040379C sub_402D50      endp
.text:0040379C
.text:004037A1 ; ---------------------------------------------------------------------------
.text:004037A1                 jmp     short loc_4037B0
.text:004037A1 ; ---------------------------------------------------------------------------
.text:004037A3                 align 10h
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: .text:004037A1↑j
.text:004037B0                 sub     esp, 0Ch
.text:004037B3                 mov     [esp+4], ebx
.text:004037B7                 mov     [esp+8], esi
.text:004037BB                 call    _errno
.text:004037C0                 mov     esi, [eax]
.text:004037C2                 mov     dword ptr [esp], 24h ; '$'
.text:004037C9                 call    sub_4040A0
.text:004037CE                 mov     edx, [esp+10h]
.text:004037D2                 mov     ebx, eax
.text:004037D4                 test    edx, edx
.text:004037D6                 jz      short loc_403821
.text:004037D8
.text:004037D8 loc_4037D8:                             ; CODE XREF: .text:00403826↓j
.text:004037D8                 mov     ecx, [edx]
.text:004037DA                 mov     [ebx], ecx
.text:004037DC                 mov     ecx, [edx+4]
.text:004037DF                 mov     [ebx+4], ecx
.text:004037E2                 mov     ecx, [edx+8]
.text:004037E5                 mov     [ebx+8], ecx
.text:004037E8                 mov     ecx, [edx+0Ch]
.text:004037EB                 mov     [ebx+0Ch], ecx
.text:004037EE                 mov     ecx, [edx+10h]
.text:004037F1                 mov     [ebx+10h], ecx
.text:004037F4                 mov     ecx, [edx+14h]
.text:004037F7                 mov     [ebx+14h], ecx
.text:004037FA                 mov     ecx, [edx+18h]
.text:004037FD                 mov     [ebx+18h], ecx
.text:00403800                 mov     ecx, [edx+1Ch]
.text:00403803                 mov     [ebx+1Ch], ecx
.text:00403806                 mov     ecx, [edx+20h]
.text:00403809                 mov     [ebx+20h], ecx
.text:0040380C                 call    _errno
.text:00403811                 mov     [eax], esi
.text:00403813                 mov     esi, [esp+8]
.text:00403817                 mov     eax, ebx
.text:00403819                 mov     ebx, [esp+4]
.text:0040381D                 add     esp, 0Ch
.text:00403820                 retn
.text:00403821 ; ---------------------------------------------------------------------------
.text:00403821
.text:00403821 loc_403821:                             ; CODE XREF: .text:004037D6↑j
.text:00403821                 mov     edx, offset dword_406140
.text:00403826                 jmp     short loc_4037D8
.text:00403826 ; ---------------------------------------------------------------------------
.text:00403828                 align 10h
.text:00403830                 mov     eax, [esp+4]
.text:00403834                 test    eax, eax
.text:00403836                 jz      short loc_403840
.text:00403838
.text:00403838 loc_403838:                             ; CODE XREF: .text:00403845↓j
.text:00403838                 mov     eax, [eax]
.text:0040383A                 retn
.text:0040383A ; ---------------------------------------------------------------------------
.text:0040383B                 align 10h
.text:00403840
.text:00403840 loc_403840:                             ; CODE XREF: .text:00403836↑j
.text:00403840                 mov     eax, offset dword_406140
.text:00403845                 jmp     short loc_403838
.text:00403845 ; ---------------------------------------------------------------------------
.text:00403847                 align 10h
.text:00403850                 mov     edx, [esp+4]
.text:00403854                 test    edx, edx
.text:00403856                 jz      short loc_403860
.text:00403858
.text:00403858 loc_403858:                             ; CODE XREF: .text:00403865↓j
.text:00403858                 mov     ecx, [esp+8]
.text:0040385C                 mov     [edx], ecx
.text:0040385E                 retn
.text:0040385E ; ---------------------------------------------------------------------------
.text:0040385F                 align 10h
.text:00403860
.text:00403860 loc_403860:                             ; CODE XREF: .text:00403856↑j
.text:00403860                 mov     edx, offset dword_406140
.text:00403865                 jmp     short loc_403858
.text:00403865 ; ---------------------------------------------------------------------------
.text:00403867                 align 10h
.text:00403870                 sub     esp, 8
.text:00403873                 mov     eax, [esp+0Ch]
.text:00403877                 movzx   ecx, byte ptr [esp+10h]
.text:0040387C                 mov     [esp], ebx
.text:0040387F                 mov     ebx, [esp+14h]
.text:00403883                 mov     [esp+4], esi
.text:00403887                 mov     dl, cl
.text:00403889                 shr     dl, 5
.text:0040388C                 movzx   edx, dl
.text:0040388F                 shl     edx, 2
.text:00403892                 test    eax, eax
.text:00403894                 lea     esi, [edx+eax+4]
.text:00403898                 jz      short loc_4038C0
.text:0040389A
.text:0040389A loc_40389A:                             ; CODE XREF: .text:004038C6↓j
.text:0040389A                 mov     edx, [esi]
.text:0040389C                 and     ecx, 1Fh
.text:0040389F                 and     ebx, 1
.text:004038A2                 mov     eax, edx
.text:004038A4                 shr     eax, cl
.text:004038A6                 and     eax, 1
.text:004038A9                 xor     ebx, eax
.text:004038AB                 shl     ebx, cl
.text:004038AD                 xor     edx, ebx
.text:004038AF                 mov     [esi], edx
.text:004038B1                 mov     ebx, [esp]
.text:004038B4                 mov     esi, [esp+4]
.text:004038B8                 add     esp, 8
.text:004038BB                 retn
.text:004038BB ; ---------------------------------------------------------------------------
.text:004038BC                 align 10h
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: .text:00403898↑j
.text:004038C0                 lea     esi, dword_406144[edx]
.text:004038C6                 jmp     short loc_40389A
.text:004038C6 ; ---------------------------------------------------------------------------
.text:004038C8                 align 10h
.text:004038D0                 sub     esp, 2Ch
.text:004038D3                 mov     [esp+24h], ebx
.text:004038D7                 mov     ebx, [esp+40h]
.text:004038DB                 mov     [esp+28h], esi
.text:004038DF                 test    ebx, ebx
.text:004038E1                 jz      short loc_403930
.text:004038E3
.text:004038E3 loc_4038E3:                             ; CODE XREF: .text:00403935↓j
.text:004038E3                 call    _errno
.text:004038E8                 mov     esi, [eax]
.text:004038EA                 mov     [esp+14h], ebx
.text:004038EE                 mov     edx, [ebx]
.text:004038F0                 mov     ecx, [esp+38h]
.text:004038F4                 mov     ebx, [esp+3Ch]
.text:004038F8                 mov     [esp+10h], edx
.text:004038FC                 mov     edx, [esp+34h]
.text:00403900                 mov     [esp+0Ch], ebx
.text:00403904                 mov     [esp+8], ecx
.text:00403908                 mov     [esp+4], edx
.text:0040390C                 mov     edx, [esp+30h]
.text:00403910                 mov     [esp], edx
.text:00403913                 call    sub_402D50
.text:00403918                 mov     ebx, eax
.text:0040391A                 call    _errno
.text:0040391F                 mov     [eax], esi
.text:00403921                 mov     esi, [esp+28h]
.text:00403925                 mov     eax, ebx
.text:00403927                 mov     ebx, [esp+24h]
.text:0040392B                 add     esp, 2Ch
.text:0040392E                 retn
.text:0040392E ; ---------------------------------------------------------------------------
.text:0040392F                 align 10h
.text:00403930
.text:00403930 loc_403930:                             ; CODE XREF: .text:004038E1↑j
.text:00403930                 mov     ebx, offset dword_406140
.text:00403935                 jmp     short loc_4038E3
.text:00403935 ; ---------------------------------------------------------------------------
.text:00403937                 align 10h
.text:00403940                 push    ebp
.text:00403941                 push    edi
.text:00403942                 push    esi
.text:00403943                 push    ebx
.text:00403944                 sub     esp, 2Ch
.text:00403947                 mov     ebp, [esp+48h]
.text:0040394B                 call    _errno
.text:00403950                 mov     edx, [eax]
.text:00403952                 test    ebp, ebp
.text:00403954                 mov     ebx, ebp
.text:00403956                 mov     [esp+28h], edx
.text:0040395A                 jz      loc_403A10
.text:00403960
.text:00403960 loc_403960:                             ; CODE XREF: .text:00403A15↓j
.text:00403960                 call    _errno
.text:00403965                 mov     edi, [eax]
.text:00403967                 mov     esi, ebp
.text:00403969                 mov     [esp+14h], ebx
.text:0040396D                 mov     ecx, [ebx]
.text:0040396F                 mov     dword ptr [esp], 0
.text:00403976                 mov     edx, [esp+44h]
.text:0040397A                 mov     dword ptr [esp+4], 0
.text:00403982                 mov     eax, [esp+40h]
.text:00403986                 mov     [esp+10h], ecx
.text:0040398A                 mov     [esp+0Ch], edx
.text:0040398E                 mov     [esp+8], eax
.text:00403992                 call    sub_402D50
.text:00403997                 mov     ebx, eax
.text:00403999                 call    _errno
.text:0040399E                 mov     [eax], edi
.text:004039A0                 lea     edi, [ebx+1]
.text:004039A3                 mov     [esp], edi
.text:004039A6                 call    sub_4040A0
.text:004039AB                 mov     [esp+24h], eax
.text:004039AF                 test    ebp, ebp
.text:004039B1                 jz      short loc_403A02
.text:004039B3
.text:004039B3 loc_4039B3:                             ; CODE XREF: .text:00403A07↓j
.text:004039B3                 call    _errno
.text:004039B8                 mov     ebp, [eax]
.text:004039BA                 mov     [esp+14h], esi
.text:004039BE                 mov     ecx, [esi]
.text:004039C0                 mov     [esp+4], edi
.text:004039C4                 mov     edx, [esp+44h]
.text:004039C8                 mov     esi, [esp+24h]
.text:004039CC                 mov     [esp+10h], ecx
.text:004039D0                 mov     eax, [esp+40h]
.text:004039D4                 mov     [esp+0Ch], edx
.text:004039D8                 mov     [esp], esi
.text:004039DB                 mov     [esp+8], eax
.text:004039DF                 call    sub_402D50
.text:004039E4                 call    _errno
.text:004039E9                 mov     [eax], ebp
.text:004039EB                 call    _errno
.text:004039F0                 mov     ebx, [esp+28h]
.text:004039F4                 mov     [eax], ebx
.text:004039F6                 mov     eax, [esp+24h]
.text:004039FA                 add     esp, 2Ch
.text:004039FD                 pop     ebx
.text:004039FE                 pop     esi
.text:004039FF                 pop     edi
.text:00403A00                 pop     ebp
.text:00403A01                 retn
.text:00403A02 ; ---------------------------------------------------------------------------
.text:00403A02
.text:00403A02 loc_403A02:                             ; CODE XREF: .text:004039B1↑j
.text:00403A02                 mov     esi, offset dword_406140
.text:00403A07                 jmp     short loc_4039B3
.text:00403A07 ; ---------------------------------------------------------------------------
.text:00403A09                 align 10h
.text:00403A10
.text:00403A10 loc_403A10:                             ; CODE XREF: .text:0040395A↑j
.text:00403A10                 mov     ebx, offset dword_406140
.text:00403A15                 jmp     loc_403960
.text:00403A15 ; ---------------------------------------------------------------------------
.text:00403A1A                 align 10h
.text:00403A20                 sub     esp, 1Ch
.text:00403A23                 mov     edx, [esp+24h]
.text:00403A27                 mov     dword ptr [esp+0Ch], offset dword_406140
.text:00403A2F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403A37                 mov     [esp+4], edx
.text:00403A3B                 mov     edx, [esp+20h]
.text:00403A3F                 mov     [esp], edx
.text:00403A42                 call    sub_403E90
.text:00403A47                 add     esp, 1Ch
.text:00403A4A                 retn
.text:00403A4A ; ---------------------------------------------------------------------------
.text:00403A4B                 align 10h
.text:00403A50                 sub     esp, 1Ch
.text:00403A53                 mov     edx, [esp+20h]
.text:00403A57                 mov     dword ptr [esp+0Ch], offset dword_406140
.text:00403A5F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403A67                 mov     [esp+4], edx
.text:00403A6B                 mov     dword ptr [esp], 0
.text:00403A72                 call    sub_403E90
.text:00403A77                 add     esp, 1Ch
.text:00403A7A                 retn
.text:00403A7A ; ---------------------------------------------------------------------------
.text:00403A7B                 align 10h
.text:00403A80
.text:00403A80 ; =============== S U B R O U T I N E =======================================
.text:00403A80
.text:00403A80
.text:00403A80 ; int __cdecl sub_403A80(int, int, char *)
.text:00403A80 sub_403A80      proc near               ; CODE XREF: .text:004027BA↑p
.text:00403A80                                         ; sub_4027D0+1A↑p
.text:00403A80
.text:00403A80 var_BC          = dword ptr -0BCh
.text:00403A80 var_B8          = dword ptr -0B8h
.text:00403A80 var_B4          = dword ptr -0B4h
.text:00403A80 var_B0          = dword ptr -0B0h
.text:00403A80 var_AC          = dword ptr -0ACh
.text:00403A80 var_A8          = dword ptr -0A8h
.text:00403A80 var_A4          = dword ptr -0A4h
.text:00403A80 var_A0          = dword ptr -0A0h
.text:00403A80 var_9C          = dword ptr -9Ch
.text:00403A80 var_98          = dword ptr -98h
.text:00403A80 var_94          = dword ptr -94h
.text:00403A80 var_90          = dword ptr -90h
.text:00403A80 var_8C          = dword ptr -8Ch
.text:00403A80 var_7C          = dword ptr -7Ch
.text:00403A80 var_78          = dword ptr -78h
.text:00403A80 var_74          = dword ptr -74h
.text:00403A80 var_70          = dword ptr -70h
.text:00403A80 var_6C          = dword ptr -6Ch
.text:00403A80 var_68          = dword ptr -68h
.text:00403A80 var_64          = dword ptr -64h
.text:00403A80 var_60          = dword ptr -60h
.text:00403A80 var_5C          = dword ptr -5Ch
.text:00403A80 var_4C          = dword ptr -4Ch
.text:00403A80 var_48          = dword ptr -48h
.text:00403A80 var_44          = dword ptr -44h
.text:00403A80 var_40          = dword ptr -40h
.text:00403A80 var_3C          = dword ptr -3Ch
.text:00403A80 var_38          = dword ptr -38h
.text:00403A80 var_34          = dword ptr -34h
.text:00403A80 var_30          = dword ptr -30h
.text:00403A80 var_2C          = dword ptr -2Ch
.text:00403A80 arg_0           = dword ptr  4
.text:00403A80 arg_4           = dword ptr  8
.text:00403A80 arg_8           = dword ptr  0Ch
.text:00403A80
.text:00403A80                 push    ebp
.text:00403A81                 xor     eax, eax
.text:00403A83                 mov     ecx, 8
.text:00403A88                 push    edi
.text:00403A89                 push    esi
.text:00403A8A                 push    ebx
.text:00403A8B                 sub     esp, 0ACh
.text:00403A91                 mov     ebp, [esp+0BCh+arg_4]
.text:00403A98                 cld
.text:00403A99                 lea     edi, [esp+0BCh+var_A8]
.text:00403A9D                 mov     [esp+0BCh+var_AC], ebp
.text:00403AA1                 rep stosd
.text:00403AA3                 mov     eax, [esp+0BCh+var_8C]
.text:00403AA7                 mov     edi, [esp+0BCh+var_AC]
.text:00403AAB                 mov     esi, [esp+0BCh+var_A8]
.text:00403AAF                 mov     [esp+0BCh+var_5C], eax
.text:00403AB3                 mov     ebp, [esp+0BCh+var_A4]
.text:00403AB7                 mov     eax, [esp+0BCh+var_AC]
.text:00403ABB                 mov     [esp+0BCh+var_7C], edi
.text:00403ABF                 mov     ecx, [esp+0BCh+var_94]
.text:00403AC3                 mov     edi, [esp+0BCh+var_A0]
.text:00403AC7                 mov     [esp+0BCh+var_78], esi
.text:00403ACB                 mov     edx, [esp+0BCh+var_90]
.text:00403ACF                 mov     esi, [esp+0BCh+var_9C]
.text:00403AD3                 mov     [esp+0BCh+var_4C], eax
.text:00403AD7                 mov     ebx, [esp+0BCh+var_98]
.text:00403ADB                 mov     eax, [esp+0BCh+var_A8]
.text:00403ADF                 mov     [esp+0BCh+var_74], ebp
.text:00403AE3                 mov     [esp+0BCh+var_70], edi
.text:00403AE7                 mov     [esp+0BCh+var_6C], esi
.text:00403AEB                 mov     [esp+0BCh+var_68], ebx
.text:00403AEF                 mov     [esp+0BCh+var_64], ecx
.text:00403AF3                 mov     [esp+0BCh+var_60], edx
.text:00403AF7                 mov     [esp+0BCh+var_48], eax
.text:00403AFB                 mov     [esp+0BCh+var_44], ebp
.text:00403AFF                 mov     [esp+0BCh+var_40], edi
.text:00403B03                 mov     [esp+0BCh+var_3C], esi
.text:00403B0A                 mov     [esp+0BCh+var_38], ebx
.text:00403B11                 mov     ebx, [esp+0BCh+var_8C]
.text:00403B15                 mov     [esp+0BCh+var_30], edx
.text:00403B1C                 mov     edx, [esp+0BCh+arg_8]
.text:00403B23                 mov     [esp+0BCh+var_34], ecx
.text:00403B2A                 lea     ecx, [esp+0BCh+var_4C]
.text:00403B2E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403B32                 mov     edx, [esp+0BCh+arg_0]
.text:00403B39                 mov     [esp+0BCh+var_2C], ebx
.text:00403B40                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403B44                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403B4C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403B4F                 call    sub_403E90
.text:00403B54                 add     esp, 0ACh
.text:00403B5A                 pop     ebx
.text:00403B5B                 pop     esi
.text:00403B5C                 pop     edi
.text:00403B5D                 pop     ebp
.text:00403B5E                 retn
.text:00403B5E sub_403A80      endp
.text:00403B5E
.text:00403B5E ; ---------------------------------------------------------------------------
.text:00403B5F                 align 10h
.text:00403B60                 push    ebp
.text:00403B61                 xor     eax, eax
.text:00403B63                 mov     ecx, 8
.text:00403B68                 push    edi
.text:00403B69                 push    esi
.text:00403B6A                 push    ebx
.text:00403B6B                 sub     esp, 0ACh
.text:00403B71                 mov     edx, [esp+0C4h]
.text:00403B78                 cld
.text:00403B79                 lea     edi, [esp+14h]
.text:00403B7D                 mov     [esp+10h], edx
.text:00403B81                 rep stosd
.text:00403B83                 mov     eax, [esp+30h]
.text:00403B87                 mov     ebp, [esp+10h]
.text:00403B8B                 mov     edi, [esp+14h]
.text:00403B8F                 mov     [esp+60h], eax
.text:00403B93                 mov     esi, [esp+20h]
.text:00403B97                 mov     eax, [esp+10h]
.text:00403B9B                 mov     [esp+40h], ebp
.text:00403B9F                 mov     ecx, [esp+28h]
.text:00403BA3                 mov     ebp, [esp+18h]
.text:00403BA7                 mov     [esp+44h], edi
.text:00403BAB                 mov     edx, [esp+2Ch]
.text:00403BAF                 mov     edi, [esp+1Ch]
.text:00403BB3                 mov     [esp+70h], eax
.text:00403BB7                 mov     ebx, [esp+24h]
.text:00403BBB                 mov     eax, [esp+14h]
.text:00403BBF                 mov     [esp+48h], ebp
.text:00403BC3                 mov     [esp+4Ch], edi
.text:00403BC7                 mov     [esp+50h], esi
.text:00403BCB                 mov     [esp+54h], ebx
.text:00403BCF                 mov     [esp+58h], ecx
.text:00403BD3                 mov     [esp+5Ch], edx
.text:00403BD7                 mov     [esp+74h], eax
.text:00403BDB                 mov     [esp+78h], ebp
.text:00403BDF                 mov     [esp+7Ch], edi
.text:00403BE3                 mov     [esp+80h], esi
.text:00403BEA                 mov     [esp+84h], ebx
.text:00403BF1                 mov     esi, [esp+30h]
.text:00403BF5                 lea     ebx, [esp+70h]
.text:00403BF9                 mov     [esp+8Ch], edx
.text:00403C00                 mov     edx, [esp+0C8h]
.text:00403C07                 mov     [esp+88h], ecx
.text:00403C0E                 mov     ecx, [esp+0CCh]
.text:00403C15                 mov     [esp+4], edx
.text:00403C19                 mov     edx, [esp+0C0h]
.text:00403C20                 mov     [esp+90h], esi
.text:00403C27                 mov     [esp+0Ch], ebx
.text:00403C2B                 mov     [esp+8], ecx
.text:00403C2F                 mov     [esp], edx
.text:00403C32                 call    sub_403E90
.text:00403C37                 add     esp, 0ACh
.text:00403C3D                 pop     ebx
.text:00403C3E                 pop     esi
.text:00403C3F                 pop     edi
.text:00403C40                 pop     ebp
.text:00403C41                 retn
.text:00403C41 ; ---------------------------------------------------------------------------
.text:00403C42                 align 10h
.text:00403C50                 push    ebp
.text:00403C51                 xor     eax, eax
.text:00403C53                 mov     ecx, 8
.text:00403C58                 push    edi
.text:00403C59                 push    esi
.text:00403C5A                 push    ebx
.text:00403C5B                 sub     esp, 0ACh
.text:00403C61                 mov     edi, [esp+0C0h]
.text:00403C68                 cld
.text:00403C69                 mov     [esp+10h], edi
.text:00403C6D                 lea     edi, [esp+14h]
.text:00403C71                 rep stosd
.text:00403C73                 mov     eax, [esp+30h]
.text:00403C77                 mov     esi, [esp+10h]
.text:00403C7B                 mov     ebx, [esp+14h]
.text:00403C7F                 mov     [esp+60h], eax
.text:00403C83                 mov     ebp, [esp+18h]
.text:00403C87                 mov     eax, [esp+10h]
.text:00403C8B                 mov     [esp+40h], esi
.text:00403C8F                 mov     edi, [esp+1Ch]
.text:00403C93                 mov     esi, [esp+20h]
.text:00403C97                 mov     [esp+44h], ebx
.text:00403C9B                 mov     ecx, [esp+28h]
.text:00403C9F                 mov     edx, [esp+2Ch]
.text:00403CA3                 mov     [esp+70h], eax
.text:00403CA7                 mov     ebx, [esp+24h]
.text:00403CAB                 mov     eax, [esp+14h]
.text:00403CAF                 mov     [esp+48h], ebp
.text:00403CB3                 mov     [esp+4Ch], edi
.text:00403CB7                 mov     [esp+50h], esi
.text:00403CBB                 mov     [esp+54h], ebx
.text:00403CBF                 mov     [esp+58h], ecx
.text:00403CC3                 mov     [esp+5Ch], edx
.text:00403CC7                 mov     [esp+74h], eax
.text:00403CCB                 mov     [esp+78h], ebp
.text:00403CCF                 mov     [esp+7Ch], edi
.text:00403CD3                 mov     [esp+80h], esi
.text:00403CDA                 mov     [esp+84h], ebx
.text:00403CE1                 mov     [esp+8Ch], edx
.text:00403CE8                 lea     edx, [esp+70h]
.text:00403CEC                 mov     [esp+88h], ecx
.text:00403CF3                 mov     ecx, [esp+30h]
.text:00403CF7                 mov     [esp+0Ch], edx
.text:00403CFB                 mov     edx, [esp+0C4h]
.text:00403D02                 mov     [esp+90h], ecx
.text:00403D09                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403D11                 mov     [esp+4], edx
.text:00403D15                 mov     dword ptr [esp], 0
.text:00403D1C                 call    sub_403E90
.text:00403D21                 add     esp, 0ACh
.text:00403D27                 pop     ebx
.text:00403D28                 pop     esi
.text:00403D29                 pop     edi
.text:00403D2A                 pop     ebp
.text:00403D2B                 retn
.text:00403D2B ; ---------------------------------------------------------------------------
.text:00403D2C                 align 10h
.text:00403D30                 push    edi
.text:00403D31                 push    esi
.text:00403D32                 push    ebx
.text:00403D33                 sub     esp, 40h
.text:00403D36                 mov     edx, ds:dword_40614C
.text:00403D3C                 mov     ebx, ds:dword_406140
.text:00403D42                 mov     esi, ds:dword_406148
.text:00403D48                 mov     edi, ds:dword_406144
.text:00403D4E                 mov     [esp+1Ch], edx
.text:00403D52                 mov     ecx, ds:dword_406150
.text:00403D58                 mov     edx, ds:dword_406160
.text:00403D5E                 mov     [esp+10h], ebx
.text:00403D62                 mov     ebx, ds:dword_406154
.text:00403D68                 mov     [esp+30h], edx
.text:00403D6C                 movzx   edx, byte ptr [esp+54h]
.text:00403D71                 mov     [esp+18h], esi
.text:00403D75                 mov     esi, ds:dword_40615C
.text:00403D7B                 mov     [esp+14h], edi
.text:00403D7F                 mov     edi, ds:dword_406158
.text:00403D85                 mov     [esp+20h], ecx
.text:00403D89                 mov     cl, dl
.text:00403D8B                 shr     cl, 5
.text:00403D8E                 mov     [esp+24h], ebx
.text:00403D92                 movzx   ebx, cl
.text:00403D95                 mov     [esp+2Ch], esi
.text:00403D99                 lea     esi, [esp+10h]
.text:00403D9D                 mov     [esp+28h], edi
.text:00403DA1                 lea     edi, [esi+ebx*4]
.text:00403DA4                 mov     ebx, edx
.text:00403DA6                 mov     edx, [edi+4]
.text:00403DA9                 and     ebx, 1Fh
.text:00403DAC                 mov     cl, bl
.text:00403DAE                 mov     eax, edx
.text:00403DB0                 shr     eax, cl
.text:00403DB2                 and     eax, 1
.text:00403DB5                 xor     eax, 1
.text:00403DB8                 shl     eax, cl
.text:00403DBA                 xor     edx, eax
.text:00403DBC                 mov     [edi+4], edx
.text:00403DBF                 mov     edx, [esp+50h]
.text:00403DC3                 mov     [esp+0Ch], esi
.text:00403DC7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403DCF                 mov     [esp+4], edx
.text:00403DD3                 mov     dword ptr [esp], 0
.text:00403DDA                 call    sub_403E90
.text:00403DDF                 add     esp, 40h
.text:00403DE2                 pop     ebx
.text:00403DE3                 pop     esi
.text:00403DE4                 pop     edi
.text:00403DE5                 retn
.text:00403DE5 ; ---------------------------------------------------------------------------
.text:00403DE6                 align 10h
.text:00403DF0
.text:00403DF0 ; =============== S U B R O U T I N E =======================================
.text:00403DF0
.text:00403DF0
.text:00403DF0 ; int __cdecl sub_403DF0(char *)
.text:00403DF0 sub_403DF0      proc near               ; CODE XREF: sub_402BE0+64↑p
.text:00403DF0
.text:00403DF0 var_4C          = dword ptr -4Ch
.text:00403DF0 var_48          = dword ptr -48h
.text:00403DF0 var_44          = dword ptr -44h
.text:00403DF0 var_40          = dword ptr -40h
.text:00403DF0 var_3C          = dword ptr -3Ch
.text:00403DF0 var_38          = dword ptr -38h
.text:00403DF0 var_34          = dword ptr -34h
.text:00403DF0 var_30          = dword ptr -30h
.text:00403DF0 var_2C          = dword ptr -2Ch
.text:00403DF0 var_28          = dword ptr -28h
.text:00403DF0 var_24          = dword ptr -24h
.text:00403DF0 var_20          = dword ptr -20h
.text:00403DF0 var_1C          = dword ptr -1Ch
.text:00403DF0 arg_0           = dword ptr  4
.text:00403DF0
.text:00403DF0                 sub     esp, 4Ch
.text:00403DF3                 mov     ecx, ds:dword_406140
.text:00403DF9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403E01                 mov     edx, ds:dword_406144
.text:00403E07                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403E0E                 mov     [esp+4Ch+var_3C], ecx
.text:00403E12                 mov     ecx, ds:dword_40614C
.text:00403E18                 mov     [esp+4Ch+var_38], edx
.text:00403E1C                 mov     edx, ds:dword_406148
.text:00403E22                 mov     [esp+4Ch+var_30], ecx
.text:00403E26                 mov     ecx, ds:dword_406150
.text:00403E2C                 mov     eax, edx
.text:00403E2E                 shr     eax, 1Ah
.text:00403E31                 and     eax, 1
.text:00403E34                 xor     eax, 1
.text:00403E37                 mov     [esp+4Ch+var_2C], ecx
.text:00403E3B                 shl     eax, 1Ah
.text:00403E3E                 mov     ecx, ds:dword_406154
.text:00403E44                 xor     edx, eax
.text:00403E46                 mov     [esp+4Ch+var_34], edx
.text:00403E4A                 mov     edx, [esp+4Ch+arg_0]
.text:00403E4E                 mov     [esp+4Ch+var_28], ecx
.text:00403E52                 mov     ecx, ds:dword_406158
.text:00403E58                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403E5C                 mov     [esp+4Ch+var_24], ecx
.text:00403E60                 mov     ecx, ds:dword_40615C
.text:00403E66                 mov     [esp+4Ch+var_20], ecx
.text:00403E6A                 mov     ecx, ds:dword_406160
.text:00403E70                 mov     [esp+4Ch+var_1C], ecx
.text:00403E74                 lea     ecx, [esp+4Ch+var_3C]
.text:00403E78                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403E7C                 call    sub_403E90
.text:00403E81                 add     esp, 4Ch
.text:00403E84                 retn
.text:00403E84 sub_403DF0      endp
.text:00403E84
.text:00403E84 ; ---------------------------------------------------------------------------
.text:00403E85                 align 10h
.text:00403E90
.text:00403E90 ; =============== S U B R O U T I N E =======================================
.text:00403E90
.text:00403E90
.text:00403E90 ; int __cdecl sub_403E90(int, char *, int, int)
.text:00403E90 sub_403E90      proc near               ; CODE XREF: .text:00403A42↑p
.text:00403E90                                         ; .text:00403A72↑p ...
.text:00403E90
.text:00403E90 Block           = dword ptr -2Ch
.text:00403E90 var_28          = dword ptr -28h
.text:00403E90 Str             = dword ptr -24h
.text:00403E90 var_20          = dword ptr -20h
.text:00403E90 var_1C          = dword ptr -1Ch
.text:00403E90 var_18          = dword ptr -18h
.text:00403E90 var_14          = dword ptr -14h
.text:00403E90 arg_0           = dword ptr  4
.text:00403E90 arg_4           = dword ptr  8
.text:00403E90 arg_8           = dword ptr  0Ch
.text:00403E90 arg_C           = dword ptr  10h
.text:00403E90
.text:00403E90                 push    ebp
.text:00403E91                 push    edi
.text:00403E92                 push    esi
.text:00403E93                 push    ebx
.text:00403E94                 sub     esp, 1Ch
.text:00403E97                 call    _errno
.text:00403E9C                 mov     edx, [eax]
.text:00403E9E                 mov     eax, [esp+2Ch+arg_0]
.text:00403EA2                 mov     [esp+2Ch+var_14], edx
.text:00403EA6                 test    eax, eax
.text:00403EA8                 js      loc_40404A
.text:00403EAE                 mov     eax, [esp+2Ch+arg_0]
.text:00403EB2                 cmp     dword_405020, eax
.text:00403EB8                 ja      short loc_403F30
.text:00403EBA                 mov     esi, eax
.text:00403EBC                 inc     esi
.text:00403EBD                 cmp     esi, 1FFFFFFFh
.text:00403EC3                 ja      loc_40404F
.text:00403EC9                 mov     ebx, off_40502C
.text:00403ECF                 cmp     ebx, offset dword_405024
.text:00403ED5                 jz      loc_404021
.text:00403EDB
.text:00403EDB loc_403EDB:                             ; CODE XREF: sub_403E90+1B5↓j
.text:00403EDB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403EDE                 lea     ecx, ds:0[esi*8]
.text:00403EE5                 mov     ebp, esi
.text:00403EE7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403EEB                 call    sub_404130
.text:00403EF0                 mov     off_40502C, eax
.text:00403EF5                 mov     ebx, dword_405020
.text:00403EFB                 sub     ebp, ebx
.text:00403EFD                 lea     edi, [eax+ebx*8]
.text:00403F00                 lea     eax, ds:0[ebp*8]
.text:00403F07                 cmp     eax, 7
.text:00403F0A                 jbe     short loc_403F20
.text:00403F0C                 test    edi, 4
.text:00403F12                 jz      short loc_403F20
.text:00403F14                 mov     dword ptr [edi], 0
.text:00403F1A                 sub     eax, 4
.text:00403F1D                 add     edi, 4
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_403E90+7A↑j
.text:00403F20                                         ; sub_403E90+82↑j
.text:00403F20                 cld
.text:00403F21                 mov     ecx, eax
.text:00403F23                 shr     ecx, 2
.text:00403F26                 xor     eax, eax
.text:00403F28                 rep stosd
.text:00403F2A                 mov     dword_405020, esi
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_403E90+28↑j
.text:00403F30                 mov     esi, off_40502C
.text:00403F36                 mov     eax, [esp+2Ch+arg_0]
.text:00403F3A                 mov     ebp, [esi+eax*8]
.text:00403F3D                 mov     edi, [esi+eax*8+4]
.text:00403F41                 mov     esi, [esp+2Ch+arg_C]
.text:00403F45                 test    esi, esi
.text:00403F47                 jz      loc_404017
.text:00403F4D
.text:00403F4D loc_403F4D:                             ; CODE XREF: sub_403E90+18C↓j
.text:00403F4D                 call    _errno
.text:00403F52                 mov     ebx, [eax]
.text:00403F54                 mov     [esp+2Ch+var_18], esi ; int
.text:00403F58                 mov     ecx, [esi]
.text:00403F5A                 mov     [esp+2Ch+Block], edi ; int
.text:00403F5D                 mov     edx, [esp+2Ch+arg_8]
.text:00403F61                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403F65                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403F69                 mov     ecx, [esp+2Ch+arg_4]
.text:00403F6D                 mov     [esp+2Ch+var_20], edx ; int
.text:00403F71                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403F75                 call    sub_402D50
.text:00403F7A                 mov     esi, eax
.text:00403F7C                 call    _errno
.text:00403F81                 mov     [eax], ebx
.text:00403F83                 cmp     ebp, esi
.text:00403F85                 ja      short loc_403FFB
.text:00403F87                 lea     ebp, [esi+1]
.text:00403F8A                 mov     ebx, off_40502C
.text:00403F90                 cmp     edi, offset unk_406040
.text:00403F96                 mov     esi, [esp+2Ch+arg_0]
.text:00403F9A                 mov     [ebx+esi*8], ebp
.text:00403F9D                 jz      short loc_403FAD
.text:00403F9F                 mov     [esp+2Ch+Block], edi ; Block
.text:00403FA2                 call    free
.text:00403FA7                 mov     ebx, off_40502C
.text:00403FAD
.text:00403FAD loc_403FAD:                             ; CODE XREF: sub_403E90+10D↑j
.text:00403FAD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403FB0                 call    sub_4040A0
.text:00403FB5                 mov     esi, [esp+2Ch+arg_C]
.text:00403FB9                 mov     edi, eax
.text:00403FBB                 mov     eax, [esp+2Ch+arg_0]
.text:00403FBF                 test    esi, esi
.text:00403FC1                 mov     [ebx+eax*8+4], edi
.text:00403FC5                 jz      short loc_404010
.text:00403FC7
.text:00403FC7 loc_403FC7:                             ; CODE XREF: sub_403E90+185↓j
.text:00403FC7                 call    _errno
.text:00403FCC                 mov     ebx, [eax]
.text:00403FCE                 mov     [esp+2Ch+var_18], esi ; int
.text:00403FD2                 mov     ecx, [esi]
.text:00403FD4                 mov     [esp+2Ch+Block], edi ; int
.text:00403FD7                 mov     edx, [esp+2Ch+arg_8]
.text:00403FDB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403FDF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403FE3                 mov     ecx, [esp+2Ch+arg_4]
.text:00403FE7                 mov     [esp+2Ch+var_20], edx ; int
.text:00403FEB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403FEF                 call    sub_402D50
.text:00403FF4                 call    _errno
.text:00403FF9                 mov     [eax], ebx
.text:00403FFB
.text:00403FFB loc_403FFB:                             ; CODE XREF: sub_403E90+F5↑j
.text:00403FFB                 call    _errno
.text:00404000                 mov     ebp, [esp+2Ch+var_14]
.text:00404004                 mov     [eax], ebp
.text:00404006                 add     esp, 1Ch
.text:00404009                 mov     eax, edi
.text:0040400B                 pop     ebx
.text:0040400C                 pop     esi
.text:0040400D                 pop     edi
.text:0040400E                 pop     ebp
.text:0040400F                 retn
.text:00404010 ; ---------------------------------------------------------------------------
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_403E90+135↑j
.text:00404010                 mov     esi, offset dword_406140
.text:00404015                 jmp     short loc_403FC7
.text:00404017 ; ---------------------------------------------------------------------------
.text:00404017
.text:00404017 loc_404017:                             ; CODE XREF: sub_403E90+B7↑j
.text:00404017                 mov     esi, offset dword_406140
.text:0040401C                 jmp     loc_403F4D
.text:00404021 ; ---------------------------------------------------------------------------
.text:00404021
.text:00404021 loc_404021:                             ; CODE XREF: sub_403E90+45↑j
.text:00404021                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404028                 call    sub_4040A0
.text:0040402D                 mov     off_40502C, eax
.text:00404032                 mov     edi, dword_405024
.text:00404038                 mov     ebx, eax
.text:0040403A                 mov     ecx, off_405028
.text:00404040                 mov     [eax], edi
.text:00404042                 mov     [eax+4], ecx
.text:00404045                 jmp     loc_403EDB
.text:0040404A ; ---------------------------------------------------------------------------
.text:0040404A
.text:0040404A loc_40404A:                             ; CODE XREF: sub_403E90+18↑j
.text:0040404A                 call    abort
.text:0040404F ; ---------------------------------------------------------------------------
.text:0040404F
.text:0040404F loc_40404F:                             ; CODE XREF: sub_403E90+33↑j
.text:0040404F                 call    sub_404850
.text:0040404F sub_403E90      endp
.text:0040404F
.text:0040404F ; ---------------------------------------------------------------------------
.text:00404054                 align 10h
.text:00404060
.text:00404060 ; =============== S U B R O U T I N E =======================================
.text:00404060
.text:00404060
.text:00404060 sub_404060      proc near
.text:00404060
.text:00404060 Size            = dword ptr -0Ch
.text:00404060 var_4           = dword ptr -4
.text:00404060 arg_0           = dword ptr  4
.text:00404060 arg_4           = dword ptr  8
.text:00404060
.text:00404060                 sub     esp, 0Ch
.text:00404063                 xor     edx, edx
.text:00404065                 mov     ecx, [esp+0Ch+arg_4]
.text:00404069                 mov     [esp+0Ch+var_4], ebx
.text:0040406D                 mov     eax, 0FFFFFFFFh
.text:00404072                 mov     ebx, [esp+0Ch+arg_0]
.text:00404076                 div     ecx
.text:00404078                 cmp     eax, ebx
.text:0040407A                 jb      short loc_404099
.text:0040407C                 mov     edx, ebx
.text:0040407E                 imul    edx, ecx
.text:00404081                 mov     [esp+0Ch+Size], edx ; Size
.text:00404084                 call    malloc
.text:00404089                 test    eax, eax
.text:0040408B                 jz      short loc_404095
.text:0040408D
.text:0040408D loc_40408D:                             ; CODE XREF: sub_404060+37↓j
.text:0040408D                 mov     ebx, [esp+0Ch+var_4]
.text:00404091                 add     esp, 0Ch
.text:00404094                 retn
.text:00404095 ; ---------------------------------------------------------------------------
.text:00404095
.text:00404095 loc_404095:                             ; CODE XREF: sub_404060+2B↑j
.text:00404095                 test    ebx, ebx
.text:00404097                 jz      short loc_40408D
.text:00404099
.text:00404099 loc_404099:                             ; CODE XREF: sub_404060+1A↑j
.text:00404099                 call    sub_404850
.text:00404099 sub_404060      endp
.text:00404099
.text:00404099 ; ---------------------------------------------------------------------------
.text:0040409E                 align 10h
.text:004040A0
.text:004040A0 ; =============== S U B R O U T I N E =======================================
.text:004040A0
.text:004040A0
.text:004040A0 ; int __cdecl sub_4040A0(size_t)
.text:004040A0 sub_4040A0      proc near               ; CODE XREF: .text:004037C9↑p
.text:004040A0                                         ; .text:004039A6↑p ...
.text:004040A0
.text:004040A0 Size            = dword ptr -0Ch
.text:004040A0 var_4           = dword ptr -4
.text:004040A0 arg_0           = dword ptr  4
.text:004040A0
.text:004040A0                 sub     esp, 0Ch
.text:004040A3                 mov     [esp+0Ch+var_4], ebx
.text:004040A7                 mov     ebx, [esp+0Ch+arg_0]
.text:004040AB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004040AE                 call    malloc
.text:004040B3                 test    eax, eax
.text:004040B5                 jz      short loc_4040C0
.text:004040B7
.text:004040B7 loc_4040B7:                             ; CODE XREF: sub_4040A0+22↓j
.text:004040B7                 mov     ebx, [esp+0Ch+var_4]
.text:004040BB                 add     esp, 0Ch
.text:004040BE                 retn
.text:004040BE ; ---------------------------------------------------------------------------
.text:004040BF                 align 10h
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_4040A0+15↑j
.text:004040C0                 test    ebx, ebx
.text:004040C2                 jz      short loc_4040B7
.text:004040C4                 call    sub_404850
.text:004040C4 sub_4040A0      endp
.text:004040C4
.text:004040C4 ; ---------------------------------------------------------------------------
.text:004040C9                 align 10h
.text:004040D0                 sub     esp, 1Ch
.text:004040D3                 xor     edx, edx
.text:004040D5                 mov     eax, 0FFFFFFFFh
.text:004040DA                 mov     [esp+14h], ebx
.text:004040DE                 mov     ecx, [esp+20h]
.text:004040E2                 mov     ebx, [esp+28h]
.text:004040E6                 mov     [esp+18h], esi
.text:004040EA                 mov     esi, [esp+24h]
.text:004040EE                 div     ebx
.text:004040F0                 cmp     eax, esi
.text:004040F2                 jb      short loc_404124
.text:004040F4                 mov     [esp], ecx
.text:004040F7                 mov     edx, esi
.text:004040F9                 imul    edx, ebx
.text:004040FC                 mov     [esp+4], edx
.text:00404100                 call    realloc
.text:00404105                 test    eax, eax
.text:00404107                 mov     ecx, eax
.text:00404109                 jz      short loc_404120
.text:0040410B
.text:0040410B loc_40410B:                             ; CODE XREF: .text:00404122↓j
.text:0040410B                 mov     ebx, [esp+14h]
.text:0040410F                 mov     eax, ecx
.text:00404111                 mov     esi, [esp+18h]
.text:00404115                 add     esp, 1Ch
.text:00404118                 retn
.text:00404118 ; ---------------------------------------------------------------------------
.text:00404119                 align 10h
.text:00404120
.text:00404120 loc_404120:                             ; CODE XREF: .text:00404109↑j
.text:00404120                 test    esi, esi
.text:00404122                 jz      short loc_40410B
.text:00404124
.text:00404124 loc_404124:                             ; CODE XREF: .text:004040F2↑j
.text:00404124                 call    sub_404850
.text:00404124 ; ---------------------------------------------------------------------------
.text:00404129                 align 10h
.text:00404130
.text:00404130 ; =============== S U B R O U T I N E =======================================
.text:00404130
.text:00404130
.text:00404130 ; int __cdecl sub_404130(void *, size_t)
.text:00404130 sub_404130      proc near               ; CODE XREF: sub_403E90+5B↑p
.text:00404130
.text:00404130 Block           = dword ptr -0Ch
.text:00404130 Size            = dword ptr -8
.text:00404130 var_4           = dword ptr -4
.text:00404130 arg_0           = dword ptr  4
.text:00404130 arg_4           = dword ptr  8
.text:00404130
.text:00404130                 sub     esp, 0Ch
.text:00404133                 mov     edx, [esp+0Ch+arg_0]
.text:00404137                 mov     [esp+0Ch+var_4], ebx
.text:0040413B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040413F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404142                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404146                 call    realloc
.text:0040414B                 test    eax, eax
.text:0040414D                 jz      short loc_404157
.text:0040414F
.text:0040414F loc_40414F:                             ; CODE XREF: sub_404130+29↓j
.text:0040414F                 mov     ebx, [esp+0Ch+var_4]
.text:00404153                 add     esp, 0Ch
.text:00404156                 retn
.text:00404157 ; ---------------------------------------------------------------------------
.text:00404157
.text:00404157 loc_404157:                             ; CODE XREF: sub_404130+1D↑j
.text:00404157                 test    ebx, ebx
.text:00404159                 jz      short loc_40414F
.text:0040415B                 call    sub_404850
.text:0040415B sub_404130      endp
.text:0040415B
.text:00404160 ; ---------------------------------------------------------------------------
.text:00404160                 jmp     sub_4042B0
.text:00404160 ; ---------------------------------------------------------------------------
.text:00404165                 align 10h
.text:00404170
.text:00404170 ; =============== S U B R O U T I N E =======================================
.text:00404170
.text:00404170
.text:00404170 ; int __cdecl sub_404170(void *, int)
.text:00404170 sub_404170      proc near               ; CODE XREF: sub_402870+2B↑p
.text:00404170
.text:00404170 var_C           = dword ptr -0Ch
.text:00404170 var_8           = dword ptr -8
.text:00404170 var_4           = dword ptr -4
.text:00404170 arg_0           = dword ptr  4
.text:00404170 arg_4           = dword ptr  8
.text:00404170
.text:00404170                 sub     esp, 0Ch
.text:00404173                 mov     edx, [esp+0Ch+arg_4]
.text:00404177                 mov     [esp+0Ch+var_4], 1 ; int
.text:0040417F                 mov     [esp+0Ch+var_8], edx ; int
.text:00404183                 mov     edx, [esp+0Ch+arg_0]
.text:00404187                 mov     [esp+0Ch+var_C], edx ; void *
.text:0040418A                 call    sub_4042B0
.text:0040418F                 add     esp, 0Ch
.text:00404192                 retn
.text:00404192 sub_404170      endp
.text:00404192
.text:00404192 ; ---------------------------------------------------------------------------
.text:00404193                 align 10h
.text:004041A0                 sub     esp, 1Ch
.text:004041A3                 mov     [esp+18h], ebx
.text:004041A7                 mov     ebx, [esp+20h]
.text:004041AB                 mov     [esp], ebx
.text:004041AE                 call    malloc
.text:004041B3                 test    eax, eax
.text:004041B5                 jz      short loc_4041D3
.text:004041B7
.text:004041B7 loc_4041B7:                             ; CODE XREF: .text:004041D5↓j
.text:004041B7                 mov     [esp+8], ebx
.text:004041BB                 mov     dword ptr [esp+4], 0
.text:004041C3                 mov     [esp], eax
.text:004041C6                 call    memset
.text:004041CB                 mov     ebx, [esp+18h]
.text:004041CF                 add     esp, 1Ch
.text:004041D2                 retn
.text:004041D3 ; ---------------------------------------------------------------------------
.text:004041D3
.text:004041D3 loc_4041D3:                             ; CODE XREF: .text:004041B5↑j
.text:004041D3                 test    ebx, ebx
.text:004041D5                 jz      short loc_4041B7
.text:004041D7                 call    sub_404850
.text:004041D7 ; ---------------------------------------------------------------------------
.text:004041DC                 align 10h
.text:004041E0                 sub     esp, 0Ch
.text:004041E3                 xor     edx, edx
.text:004041E5                 mov     ecx, [esp+14h]
.text:004041E9                 mov     [esp+8], ebx
.text:004041ED                 mov     eax, 0FFFFFFFFh
.text:004041F2                 mov     ebx, [esp+10h]
.text:004041F6                 div     ecx
.text:004041F8                 cmp     eax, ebx
.text:004041FA                 jb      short loc_404218
.text:004041FC                 mov     [esp+4], ecx
.text:00404200                 mov     [esp], ebx
.text:00404203                 call    calloc
.text:00404208                 test    eax, eax
.text:0040420A                 jz      short loc_404214
.text:0040420C
.text:0040420C loc_40420C:                             ; CODE XREF: .text:00404216↓j
.text:0040420C                 mov     ebx, [esp+8]
.text:00404210                 add     esp, 0Ch
.text:00404213                 retn
.text:00404214 ; ---------------------------------------------------------------------------
.text:00404214
.text:00404214 loc_404214:                             ; CODE XREF: .text:0040420A↑j
.text:00404214                 test    ebx, ebx
.text:00404216                 jz      short loc_40420C
.text:00404218
.text:00404218 loc_404218:                             ; CODE XREF: .text:004041FA↑j
.text:00404218                 call    sub_404850
.text:00404218 ; ---------------------------------------------------------------------------
.text:0040421D                 align 10h
.text:00404220                 sub     esp, 1Ch
.text:00404223                 mov     [esp+18h], ebx
.text:00404227                 mov     ebx, [esp+24h]
.text:0040422B                 mov     [esp], ebx
.text:0040422E                 call    malloc
.text:00404233                 test    eax, eax
.text:00404235                 mov     edx, eax
.text:00404237                 jz      short loc_404255
.text:00404239
.text:00404239 loc_404239:                             ; CODE XREF: .text:00404257↓j
.text:00404239                 mov     [esp+8], ebx
.text:0040423D                 mov     ecx, [esp+20h]
.text:00404241                 mov     [esp], edx
.text:00404244                 mov     [esp+4], ecx
.text:00404248                 call    memcpy
.text:0040424D                 mov     ebx, [esp+18h]
.text:00404251                 add     esp, 1Ch
.text:00404254                 retn
.text:00404255 ; ---------------------------------------------------------------------------
.text:00404255
.text:00404255 loc_404255:                             ; CODE XREF: .text:00404237↑j
.text:00404255                 test    ebx, ebx
.text:00404257                 jz      short loc_404239
.text:00404259                 call    sub_404850
.text:00404259 ; ---------------------------------------------------------------------------
.text:0040425E                 align 10h
.text:00404260                 sub     esp, 1Ch
.text:00404263                 mov     [esp+18h], esi
.text:00404267                 mov     esi, [esp+20h]
.text:0040426B                 mov     [esp+14h], ebx
.text:0040426F                 mov     [esp], esi
.text:00404272                 call    strlen
.text:00404277                 lea     ebx, [eax+1]
.text:0040427A                 mov     [esp], ebx
.text:0040427D                 call    malloc
.text:00404282                 test    eax, eax
.text:00404284                 jz      short loc_4042A2
.text:00404286
.text:00404286 loc_404286:                             ; CODE XREF: .text:004042A4↓j
.text:00404286                 mov     [esp+8], ebx
.text:0040428A                 mov     [esp+4], esi
.text:0040428E                 mov     [esp], eax
.text:00404291                 call    memcpy
.text:00404296                 mov     ebx, [esp+14h]
.text:0040429A                 mov     esi, [esp+18h]
.text:0040429E                 add     esp, 1Ch
.text:004042A1                 retn
.text:004042A2 ; ---------------------------------------------------------------------------
.text:004042A2
.text:004042A2 loc_4042A2:                             ; CODE XREF: .text:00404284↑j
.text:004042A2                 test    ebx, ebx
.text:004042A4                 jz      short loc_404286
.text:004042A6                 call    sub_404850
.text:004042A6 ; ---------------------------------------------------------------------------
.text:004042AB                 align 10h
.text:004042B0
.text:004042B0 ; =============== S U B R O U T I N E =======================================
.text:004042B0
.text:004042B0
.text:004042B0 ; int __cdecl sub_4042B0(void *, int, int)
.text:004042B0 sub_4042B0      proc near               ; CODE XREF: .text:00404160↑j
.text:004042B0                                         ; sub_404170+1A↑p
.text:004042B0
.text:004042B0 Block           = dword ptr -1Ch
.text:004042B0 Size            = dword ptr -18h
.text:004042B0 var_C           = dword ptr -0Ch
.text:004042B0 var_8           = dword ptr -8
.text:004042B0 var_4           = dword ptr -4
.text:004042B0 arg_0           = dword ptr  4
.text:004042B0 arg_4           = dword ptr  8
.text:004042B0 arg_8           = dword ptr  0Ch
.text:004042B0
.text:004042B0                 sub     esp, 1Ch
.text:004042B3                 mov     [esp+1Ch+var_8], esi
.text:004042B7                 mov     esi, [esp+1Ch+arg_0]
.text:004042BB                 mov     [esp+1Ch+var_4], edi
.text:004042BF                 mov     edi, [esp+1Ch+arg_4]
.text:004042C3                 test    esi, esi
.text:004042C5                 mov     [esp+1Ch+var_C], ebx
.text:004042C9                 mov     ecx, [edi]
.text:004042CB                 mov     ebx, [esp+1Ch+arg_8]
.text:004042CF                 jz      short loc_404310
.text:004042D1                 xor     edx, edx
.text:004042D3                 mov     eax, 7FFFFFFFh
.text:004042D8                 div     ebx
.text:004042DA                 cmp     eax, ecx
.text:004042DC                 jb      short loc_404309
.text:004042DE                 add     ecx, ecx
.text:004042E0
.text:004042E0 loc_4042E0:                             ; CODE XREF: sub_4042B0+62↓j
.text:004042E0                                         ; sub_4042B0+71↓j ...
.text:004042E0                 mov     [edi], ecx
.text:004042E2                 imul    ebx, ecx
.text:004042E5                 mov     [esp+1Ch+Block], esi ; Block
.text:004042E8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004042EC                 call    realloc
.text:004042F1                 test    eax, eax
.text:004042F3                 jz      short loc_404305
.text:004042F5
.text:004042F5 loc_4042F5:                             ; CODE XREF: sub_4042B0+57↓j
.text:004042F5                 mov     ebx, [esp+1Ch+var_C]
.text:004042F9                 mov     esi, [esp+1Ch+var_8]
.text:004042FD                 mov     edi, [esp+1Ch+var_4]
.text:00404301                 add     esp, 1Ch
.text:00404304                 retn
.text:00404305 ; ---------------------------------------------------------------------------
.text:00404305
.text:00404305 loc_404305:                             ; CODE XREF: sub_4042B0+43↑j
.text:00404305                 test    ebx, ebx
.text:00404307                 jz      short loc_4042F5
.text:00404309
.text:00404309 loc_404309:                             ; CODE XREF: sub_4042B0+2C↑j
.text:00404309                 call    sub_404850
.text:00404309 ; ---------------------------------------------------------------------------
.text:0040430E                 align 10h
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_4042B0+1F↑j
.text:00404310                 test    ecx, ecx
.text:00404312                 jnz     short loc_4042E0
.text:00404314                 xor     edx, edx
.text:00404316                 mov     eax, 40h ; '@'
.text:0040431B                 div     ebx
.text:0040431D                 test    eax, eax
.text:0040431F                 mov     ecx, eax
.text:00404321                 jnz     short loc_4042E0
.text:00404323                 mov     ecx, 1
.text:00404328                 jmp     short loc_4042E0
.text:00404328 sub_4042B0      endp
.text:00404328
.text:00404328 ; ---------------------------------------------------------------------------
.text:0040432A                 align 10h
.text:00404330 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404330                                         ; DATA XREF: .data:Buffer↓o
.text:00404362 ; const char Format[]
.text:00404362 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404620+50↓o
.text:0040436E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040436E                                         ; DATA XREF: sub_404620:loc_4046C1↓o
.text:0040437E                 db 12h dup(90h)
.text:00404390 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404390                                         ; DATA XREF: sub_404620+100↓o
.text:00404390                 db 'ere is NO',0Ah
.text:00404390                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404390                 db 'R PURPOSE.',0Ah,0
.text:00404428 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404428                                         ; DATA XREF: sub_404620:loc_404761↓o
.text:0040443F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040443F                                         ; DATA XREF: sub_404620:loc_40476D↓o
.text:0040445B                 db 15h dup(90h)
.text:00404470 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404470                                         ; DATA XREF: sub_404620:loc_404779↓o
.text:00404470                 db 'and %s.',0Ah,0
.text:00404490 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00404490                                         ; DATA XREF: sub_404620:loc_404785↓o
.text:00404490                 db '%s, and %s.',0Ah,0
.text:004044B4                 db 1Ch dup(90h)
.text:004044D0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004044D0                                         ; DATA XREF: sub_404620:loc_404791↓o
.text:004044D0                 db '%s, %s, and %s.',0Ah,0
.text:004044F8                 db 18h dup(90h)
.text:00404510 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00404510                                         ; DATA XREF: sub_404620:loc_40479D↓o
.text:00404510                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040453C                 db 14h dup(90h)
.text:00404550 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404550                                         ; DATA XREF: sub_404620:loc_4047A9↓o
.text:00404550                 db '%s, %s, %s, %s,',0Ah
.text:00404550                 db 'and %s.',0Ah,0
.text:00404580                 db 10h dup(90h)
.text:00404590 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00404590                                         ; DATA XREF: sub_404620:loc_4047B5↓o
.text:00404590                 db '%s, %s, %s, %s,',0Ah
.text:00404590                 db '%s, and %s.',0Ah,0
.text:004045C4                 align 10h
.text:004045D0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004045D0                                         ; DATA XREF: sub_404620:def_40468D↓o
.text:004045D0                 db '%s, %s, %s, %s,',0Ah
.text:004045D0                 db '%s, %s, and others.',0Ah,0
.text:0040460C ; const char aSS[]
.text:0040460C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_404620+1B5↓o
.text:00404613                 align 10h
.text:00404620
.text:00404620 ; =============== S U B R O U T I N E =======================================
.text:00404620
.text:00404620
.text:00404620 ; int __cdecl sub_404620(FILE *, FILE *, int, int, va_list)
.text:00404620 sub_404620      proc near               ; CODE XREF: sub_402AF0+A5↑p
.text:00404620                                         ; .text:0040481A↓p
.text:00404620
.text:00404620 Stream          = dword ptr -2Ch
.text:00404620 Format          = dword ptr -28h
.text:00404620 ArgList         = dword ptr -24h
.text:00404620 var_20          = dword ptr -20h
.text:00404620 var_1C          = dword ptr -1Ch
.text:00404620 var_14          = dword ptr -14h
.text:00404620 arg_0           = dword ptr  4
.text:00404620 arg_4           = dword ptr  8
.text:00404620 arg_8           = dword ptr  0Ch
.text:00404620 arg_C           = dword ptr  10h
.text:00404620 arg_10          = dword ptr  14h
.text:00404620
.text:00404620                 push    ebp
.text:00404621                 push    edi
.text:00404622                 push    esi
.text:00404623                 push    ebx
.text:00404624                 sub     esp, 1Ch
.text:00404627                 xor     ebx, ebx
.text:00404629                 mov     edi, [esp+2Ch+arg_10]
.text:0040462D                 mov     edx, [esp+2Ch+arg_8]
.text:00404631                 mov     esi, [esp+2Ch+arg_0]
.text:00404635                 mov     eax, [edi]
.text:00404637                 mov     ecx, [esp+2Ch+arg_4]
.text:0040463B                 mov     [esp+2Ch+var_14], edx
.text:0040463F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404643                 lea     edx, [edi+4]
.text:00404646                 test    eax, eax
.text:00404648                 jz      short loc_40465C
.text:0040464A                 lea     esi, [esi+0]
.text:00404650
.text:00404650 loc_404650:                             ; CODE XREF: sub_404620+3A↓j
.text:00404650                 mov     eax, edx
.text:00404652                 inc     ebx
.text:00404653                 mov     eax, [eax]
.text:00404655                 add     edx, 4
.text:00404658                 test    eax, eax
.text:0040465A                 jnz     short loc_404650
.text:0040465C
.text:0040465C loc_40465C:                             ; CODE XREF: sub_404620+28↑j
.text:0040465C                 test    ecx, ecx
.text:0040465E                 jz      loc_4047CD
.text:00404664                 mov     [esp+2Ch+var_1C], ebp
.text:00404668                 mov     edx, [esp+2Ch+var_14]
.text:0040466C                 mov     [esp+2Ch+ArgList], ecx
.text:00404670                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00404678                 mov     [esp+2Ch+var_20], edx
.text:0040467C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040467F                 call    fprintf
.text:00404684
.text:00404684 loc_404684:                             ; CODE XREF: sub_404620+1C9↓j
.text:00404684                 cmp     ebx, 9          ; switch 10 cases
.text:00404687                 ja      def_40468D      ; jumptable 0040468D default case
.text:0040468D                 jmp     ds:jpt_40468D[ebx*4] ; switch jump
.text:0040468D ; ---------------------------------------------------------------------------
.text:00404694 jpt_40468D      dd offset loc_4046BC    ; DATA XREF: sub_404620+6D↑r
.text:00404694                 dd offset loc_4046C1    ; jump table for switch statement
.text:00404694                 dd offset loc_404761
.text:00404694                 dd offset loc_40476D
.text:00404694                 dd offset loc_404779
.text:00404694                 dd offset loc_404785
.text:00404694                 dd offset loc_404791
.text:00404694                 dd offset loc_40479D
.text:00404694                 dd offset loc_4047A9
.text:00404694                 dd offset loc_4047B5
.text:004046BC ; ---------------------------------------------------------------------------
.text:004046BC
.text:004046BC loc_4046BC:                             ; CODE XREF: sub_404620+6D↑j
.text:004046BC                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:004046BC                 call    abort           ; jumptable 0040468D case 0
.text:004046C1 ; ---------------------------------------------------------------------------
.text:004046C1
.text:004046C1 loc_4046C1:                             ; CODE XREF: sub_404620+6D↑j
.text:004046C1                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:004046C1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040468D case 1
.text:004046C8                 nop
.text:004046C9                 lea     esi, [esi+0]
.text:004046D0
.text:004046D0 loc_4046D0:                             ; CODE XREF: sub_404620+148↓j
.text:004046D0                                         ; sub_404620+154↓j ...
.text:004046D0                 call    ds:libintl_gettext
.text:004046D6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004046DA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004046DD                 mov     [esp+2Ch+Format], eax ; Format
.text:004046E1                 call    vfprintf
.text:004046E6                 mov     ebx, [esi+4]
.text:004046E9                 dec     ebx
.text:004046EA                 test    ebx, ebx
.text:004046EC                 mov     [esi+4], ebx
.text:004046EF                 js      short loc_40474F
.text:004046F1                 mov     edi, [esi]
.text:004046F3                 mov     byte ptr [edi], 0Ah
.text:004046F6                 inc     dword ptr [esi]
.text:004046F8
.text:004046F8 loc_4046F8:                             ; CODE XREF: sub_404620+13F↓j
.text:004046F8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004046FC                 mov     edx, Buffer
.text:00404702                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404705                 call    fputs
.text:0040470A                 mov     ebp, [esi+4]
.text:0040470D                 dec     ebp
.text:0040470E                 test    ebp, ebp
.text:00404710                 mov     [esi+4], ebp
.text:00404713                 js      short loc_40473D
.text:00404715                 mov     ecx, [esi]
.text:00404717                 mov     byte ptr [ecx], 0Ah
.text:0040471A                 inc     dword ptr [esi]
.text:0040471C
.text:0040471C loc_40471C:                             ; CODE XREF: sub_404620+12D↓j
.text:0040471C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404720                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00404727                 call    ds:libintl_gettext
.text:0040472D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404731                 add     esp, 1Ch
.text:00404734                 pop     ebx
.text:00404735                 pop     esi
.text:00404736                 pop     edi
.text:00404737                 pop     ebp
.text:00404738                 jmp     fputs
.text:0040473D ; ---------------------------------------------------------------------------
.text:0040473D
.text:0040473D loc_40473D:                             ; CODE XREF: sub_404620+F3↑j
.text:0040473D                 mov     [esp+2Ch+Format], esi ; File
.text:00404741                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404748                 call    _flsbuf
.text:0040474D                 jmp     short loc_40471C
.text:0040474F ; ---------------------------------------------------------------------------
.text:0040474F
.text:0040474F loc_40474F:                             ; CODE XREF: sub_404620+CF↑j
.text:0040474F                 mov     [esp+2Ch+Format], esi ; File
.text:00404753                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040475A                 call    _flsbuf
.text:0040475F                 jmp     short loc_4046F8
.text:00404761 ; ---------------------------------------------------------------------------
.text:00404761
.text:00404761 loc_404761:                             ; CODE XREF: sub_404620+6D↑j
.text:00404761                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:00404761                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040468D case 2
.text:00404768                 jmp     loc_4046D0
.text:0040476D ; ---------------------------------------------------------------------------
.text:0040476D
.text:0040476D loc_40476D:                             ; CODE XREF: sub_404620+6D↑j
.text:0040476D                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:0040476D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040468D case 3
.text:00404774                 jmp     loc_4046D0
.text:00404779 ; ---------------------------------------------------------------------------
.text:00404779
.text:00404779 loc_404779:                             ; CODE XREF: sub_404620+6D↑j
.text:00404779                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:00404779                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040468D case 4
.text:00404780                 jmp     loc_4046D0
.text:00404785 ; ---------------------------------------------------------------------------
.text:00404785
.text:00404785 loc_404785:                             ; CODE XREF: sub_404620+6D↑j
.text:00404785                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:00404785                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040468D case 5
.text:0040478C                 jmp     loc_4046D0
.text:00404791 ; ---------------------------------------------------------------------------
.text:00404791
.text:00404791 loc_404791:                             ; CODE XREF: sub_404620+6D↑j
.text:00404791                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:00404791                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040468D case 6
.text:00404798                 jmp     loc_4046D0
.text:0040479D ; ---------------------------------------------------------------------------
.text:0040479D
.text:0040479D loc_40479D:                             ; CODE XREF: sub_404620+6D↑j
.text:0040479D                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:0040479D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040468D case 7
.text:004047A4                 jmp     loc_4046D0
.text:004047A9 ; ---------------------------------------------------------------------------
.text:004047A9
.text:004047A9 loc_4047A9:                             ; CODE XREF: sub_404620+6D↑j
.text:004047A9                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:004047A9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040468D case 8
.text:004047B0                 jmp     loc_4046D0
.text:004047B5 ; ---------------------------------------------------------------------------
.text:004047B5
.text:004047B5 loc_4047B5:                             ; CODE XREF: sub_404620+6D↑j
.text:004047B5                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:004047B5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040468D case 9
.text:004047BC                 jmp     loc_4046D0
.text:004047C1 ; ---------------------------------------------------------------------------
.text:004047C1
.text:004047C1 def_40468D:                             ; CODE XREF: sub_404620+67↑j
.text:004047C1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040468D default case
.text:004047C8                 jmp     loc_4046D0
.text:004047CD ; ---------------------------------------------------------------------------
.text:004047CD
.text:004047CD loc_4047CD:                             ; CODE XREF: sub_404620+3E↑j
.text:004047CD                 mov     [esp+2Ch+var_20], ebp
.text:004047D1                 mov     ecx, [esp+2Ch+var_14]
.text:004047D5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004047DD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004047E0                 mov     [esp+2Ch+ArgList], ecx
.text:004047E4                 call    fprintf
.text:004047E9                 jmp     loc_404684
.text:004047E9 sub_404620      endp
.text:004047E9
.text:004047E9 ; ---------------------------------------------------------------------------
.text:004047EE                 align 10h
.text:004047F0                 sub     esp, 1Ch
.text:004047F3                 mov     edx, [esp+2Ch]
.text:004047F7                 lea     ecx, [esp+30h]
.text:004047FB                 mov     [esp+10h], ecx
.text:004047FF                 mov     ecx, [esp+28h]
.text:00404803                 mov     [esp+0Ch], edx
.text:00404807                 mov     edx, [esp+24h]
.text:0040480B                 mov     [esp+8], ecx
.text:0040480F                 mov     [esp+4], edx
.text:00404813                 mov     edx, [esp+20h]
.text:00404817                 mov     [esp], edx
.text:0040481A                 call    sub_404620
.text:0040481F                 add     esp, 1Ch
.text:00404822                 retn
.text:00404822 ; ---------------------------------------------------------------------------
.text:00404823                 align 10h
.text:00404830 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404850+3↓o
.text:00404841 ; const char aS[]
.text:00404841 aS              db '%s',0               ; DATA XREF: sub_404850+10↓o
.text:00404844                 align 10h
.text:00404850
.text:00404850 ; =============== S U B R O U T I N E =======================================
.text:00404850
.text:00404850 ; Attributes: noreturn
.text:00404850
.text:00404850 sub_404850      proc near               ; CODE XREF: sub_403E90:loc_40404F↑p
.text:00404850                                         ; sub_404060:loc_404099↑p ...
.text:00404850
.text:00404850 Code            = dword ptr -1Ch
.text:00404850 ErrorMessage    = dword ptr -18h
.text:00404850 var_14          = dword ptr -14h
.text:00404850 var_10          = byte ptr -10h
.text:00404850
.text:00404850                 sub     esp, 1Ch
.text:00404853                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040485A                 call    ds:libintl_gettext
.text:00404860                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404868                 mov     edx, Code
.text:0040486E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404876                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040487A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040487D                 call    sub_4048E0
.text:00404882                 call    abort
.text:00404882 sub_404850      endp
.text:00404882
.text:00404882 ; ---------------------------------------------------------------------------
.text:00404887                 align 10h
.text:00404890
.text:00404890 ; =============== S U B R O U T I N E =======================================
.text:00404890
.text:00404890 ; Attributes: thunk
.text:00404890
.text:00404890 libintl_bindtextdomain proc near
.text:00404890                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404890 libintl_bindtextdomain endp
.text:00404890
.text:00404890 ; ---------------------------------------------------------------------------
.text:00404896                 align 10h
.text:004048A0                 jmp     ds:libintl_textdomain
.text:004048A0 ; ---------------------------------------------------------------------------
.text:004048A6                 align 10h
.text:004048B0                 jmp     ds:libintl_gettext
.text:004048B0 ; ---------------------------------------------------------------------------
.text:004048B6                 align 10h
.text:004048C0 ; const char aS_0[]
.text:004048C0 aS_0            db ': %s',0             ; DATA XREF: sub_4048E0+B8↓o
.text:004048C0                                         ; sub_4049E4+122↓o
.text:004048C5 aUnknownSystemE db 'Unknown system error',0
.text:004048C5                                         ; DATA XREF: sub_4048E0:loc_4049AD↓o
.text:004048C5                                         ; sub_4049E4:loc_404B1E↓o
.text:004048DA ; const char aS_1[]
.text:004048DA aS_1            db '%s: ',0             ; DATA XREF: sub_4048E0:loc_4049B4↓o
.text:004048DF                 align 10h
.text:004048E0
.text:004048E0 ; =============== S U B R O U T I N E =======================================
.text:004048E0
.text:004048E0
.text:004048E0 ; int __cdecl sub_4048E0(int Code, int ErrorMessage, char *, char)
.text:004048E0 sub_4048E0      proc near               ; CODE XREF: sub_401380+126↑p
.text:004048E0                                         ; sub_401380+1B3↑p ...
.text:004048E0
.text:004048E0 Stream          = dword ptr -1Ch
.text:004048E0 Format          = dword ptr -18h
.text:004048E0 ArgList         = dword ptr -14h
.text:004048E0 Code            = dword ptr  4
.text:004048E0 ErrorMessage    = dword ptr  8
.text:004048E0 arg_8           = dword ptr  0Ch
.text:004048E0 arg_C           = byte ptr  10h
.text:004048E0
.text:004048E0                 push    esi
.text:004048E1                 push    ebx
.text:004048E2                 sub     esp, 14h
.text:004048E5                 mov     edx, ds:_iob
.text:004048EB                 mov     esi, [esp+1Ch+Code]
.text:004048EF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004048F3                 add     edx, 20h ; ' '
.text:004048F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004048F9                 call    fflush
.text:004048FE                 mov     eax, ds:dword_4061C0
.text:00404903                 test    eax, eax
.text:00404905                 jz      loc_4049B4
.text:0040490B                 call    eax ; dword_4061C0
.text:0040490D
.text:0040490D loc_40490D:                             ; CODE XREF: sub_4048E0+F7↓j
.text:0040490D                 lea     edx, [esp+1Ch+arg_C]
.text:00404911                 mov     ecx, [esp+1Ch+arg_8]
.text:00404915                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404919                 mov     edx, ds:_iob
.text:0040491F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404923                 add     edx, 40h ; '@'
.text:00404926                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404929                 call    vfprintf
.text:0040492E                 inc     ds:dword_4061D0
.text:00404934                 test    ebx, ebx
.text:00404936                 jnz     short loc_404982
.text:00404938
.text:00404938 loc_404938:                             ; CODE XREF: sub_4048E0+CB↓j
.text:00404938                 mov     edx, ds:_iob
.text:0040493E                 lea     ecx, [edx+40h]
.text:00404941                 mov     ebx, [ecx+4]
.text:00404944                 dec     ebx
.text:00404945                 test    ebx, ebx
.text:00404947                 mov     [ecx+4], ebx
.text:0040494A                 js      short loc_404970
.text:0040494C                 mov     ecx, [edx+40h]
.text:0040494F                 mov     byte ptr [ecx], 0Ah
.text:00404952                 inc     dword ptr [edx+40h]
.text:00404955
.text:00404955 loc_404955:                             ; CODE XREF: sub_4048E0+A0↓j
.text:00404955                 mov     edx, ds:_iob
.text:0040495B                 add     edx, 40h ; '@'
.text:0040495E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404961                 call    fflush
.text:00404966                 test    esi, esi
.text:00404968                 jnz     short loc_4049DC
.text:0040496A                 add     esp, 14h
.text:0040496D                 pop     ebx
.text:0040496E                 pop     esi
.text:0040496F                 retn
.text:00404970 ; ---------------------------------------------------------------------------
.text:00404970
.text:00404970 loc_404970:                             ; CODE XREF: sub_4048E0+6A↑j
.text:00404970                 mov     [esp+1Ch+Format], ecx ; File
.text:00404974                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040497B                 call    _flsbuf
.text:00404980                 jmp     short loc_404955
.text:00404982 ; ---------------------------------------------------------------------------
.text:00404982
.text:00404982 loc_404982:                             ; CODE XREF: sub_4048E0+56↑j
.text:00404982                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404985                 call    strerror
.text:0040498A                 test    eax, eax
.text:0040498C                 jz      short loc_4049AD
.text:0040498E
.text:0040498E loc_40498E:                             ; CODE XREF: sub_4048E0+D2↓j
.text:0040498E                 mov     [esp+1Ch+ArgList], eax
.text:00404992                 mov     ebx, ds:_iob
.text:00404998                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:004049A0                 add     ebx, 40h ; '@'
.text:004049A3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004049A6                 call    fprintf
.text:004049AB                 jmp     short loc_404938
.text:004049AD ; ---------------------------------------------------------------------------
.text:004049AD
.text:004049AD loc_4049AD:                             ; CODE XREF: sub_4048E0+AC↑j
.text:004049AD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004049B2                 jmp     short loc_40498E
.text:004049B4 ; ---------------------------------------------------------------------------
.text:004049B4
.text:004049B4 loc_4049B4:                             ; CODE XREF: sub_4048E0+25↑j
.text:004049B4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004049BC                 mov     edx, ds:_iob
.text:004049C2                 mov     ecx, ds:dword_406190
.text:004049C8                 add     edx, 40h ; '@'
.text:004049CB                 mov     [esp+1Ch+ArgList], ecx
.text:004049CF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004049D2                 call    fprintf
.text:004049D7                 jmp     loc_40490D
.text:004049DC ; ---------------------------------------------------------------------------
.text:004049DC
.text:004049DC loc_4049DC:                             ; CODE XREF: sub_4048E0+88↑j
.text:004049DC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004049DF                 call    exit
.text:004049DF sub_4048E0      endp
.text:004049DF
.text:004049E4
.text:004049E4 ; =============== S U B R O U T I N E =======================================
.text:004049E4
.text:004049E4
.text:004049E4 ; int __cdecl sub_4049E4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004049E4 sub_4049E4      proc near               ; DATA XREF: sub_4049E4+77↓o
.text:004049E4
.text:004049E4 Stream          = dword ptr -28h
.text:004049E4 Format          = dword ptr -24h
.text:004049E4 ArgList         = dword ptr -20h
.text:004049E4 var_1C          = dword ptr -1Ch
.text:004049E4 Code            = dword ptr  8
.text:004049E4 ErrorMessage    = dword ptr  0Ch
.text:004049E4 Str2            = dword ptr  10h
.text:004049E4 arg_10          = dword ptr  14h
.text:004049E4 arg_14          = dword ptr  18h
.text:004049E4 arg_18          = byte ptr  1Ch
.text:004049E4
.text:004049E4                 and     eax, 64253A73h
.text:004049E9                 cmp     ah, [eax]
.text:004049EB
.text:004049EB loc_4049EB:                             ; DATA XREF: sub_4049E4:loc_404B25↓o
.text:004049EB                 add     ds:55003A73h, ah
.text:004049F1                 push    edi
.text:004049F2                 push    esi
.text:004049F3                 push    ebx
.text:004049F4                 sub     esp, 1Ch
.text:004049F7                 mov     edx, ds:dword_406200
.text:004049FD                 mov     ebp, [esp+28h+Code]
.text:00404A01                 mov     edi, [esp+28h+ErrorMessage]
.text:00404A05                 test    edx, edx
.text:00404A07                 mov     ebx, [esp+28h+Str2]
.text:00404A0B                 mov     esi, [esp+28h+arg_10]
.text:00404A0F                 jz      short loc_404A29
.text:00404A11                 cmp     ds:dword_406180, esi
.text:00404A17                 jz      loc_404B50
.text:00404A1D
.text:00404A1D loc_404A1D:                             ; CODE XREF: sub_4049E4+18D↓j
.text:00404A1D                 mov     ds:Str1, ebx
.text:00404A23                 mov     ds:dword_406180, esi
.text:00404A29
.text:00404A29 loc_404A29:                             ; CODE XREF: sub_4049E4+2B↑j
.text:00404A29                 mov     edx, ds:_iob
.text:00404A2F                 add     edx, 20h ; ' '
.text:00404A32                 mov     [esp+28h+Stream], edx ; Stream
.text:00404A35                 call    fflush
.text:00404A3A                 mov     eax, ds:dword_4061C0
.text:00404A3F                 test    eax, eax
.text:00404A41                 jz      loc_404B25
.text:00404A47                 call    eax ; dword_4061C0
.text:00404A49
.text:00404A49 loc_404A49:                             ; CODE XREF: sub_4049E4+164↓j
.text:00404A49                 test    ebx, ebx
.text:00404A4B                 jz      short loc_404A6E
.text:00404A4D                 mov     [esp+28h+ArgList], ebx
.text:00404A51                 mov     ebx, ds:_iob
.text:00404A57                 mov     [esp+28h+var_1C], esi
.text:00404A5B                 mov     [esp+28h+Format], offset sub_4049E4 ; Format
.text:00404A63                 add     ebx, 40h ; '@'
.text:00404A66                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404A69                 call    fprintf
.text:00404A6E
.text:00404A6E loc_404A6E:                             ; CODE XREF: sub_4049E4+67↑j
.text:00404A6E                 mov     esi, ds:_iob
.text:00404A74                 lea     edx, [esp+28h+arg_18]
.text:00404A78                 mov     ecx, [esp+28h+arg_14]
.text:00404A7C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404A80                 add     esi, 40h ; '@'
.text:00404A83                 mov     [esp+28h+Format], ecx ; Format
.text:00404A87                 mov     [esp+28h+Stream], esi ; Stream
.text:00404A8A                 call    vfprintf
.text:00404A8F                 inc     ds:dword_4061D0
.text:00404A95                 test    edi, edi
.text:00404A97                 jnz     short loc_404AF0
.text:00404A99
.text:00404A99 loc_404A99:                             ; CODE XREF: sub_4049E4+135↓j
.text:00404A99                 mov     edx, ds:_iob
.text:00404A9F                 lea     ecx, [edx+40h]
.text:00404AA2                 mov     ebx, [ecx+4]
.text:00404AA5                 dec     ebx
.text:00404AA6                 test    ebx, ebx
.text:00404AA8                 mov     [ecx+4], ebx
.text:00404AAB                 js      short loc_404AD7
.text:00404AAD                 mov     esi, [edx+40h]
.text:00404AB0                 mov     byte ptr [esi], 0Ah
.text:00404AB3                 inc     dword ptr [edx+40h]
.text:00404AB6
.text:00404AB6 loc_404AB6:                             ; CODE XREF: sub_4049E4+103↓j
.text:00404AB6                 mov     ecx, ds:_iob
.text:00404ABC                 add     ecx, 40h ; '@'
.text:00404ABF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404AC2                 call    fflush
.text:00404AC7                 test    ebp, ebp
.text:00404AC9                 jnz     loc_404B76
.text:00404ACF
.text:00404ACF loc_404ACF:                             ; CODE XREF: sub_4049E4+173↓j
.text:00404ACF                                         ; sub_4049E4+187↓j
.text:00404ACF                 add     esp, 1Ch
.text:00404AD2                 pop     ebx
.text:00404AD3                 pop     esi
.text:00404AD4                 pop     edi
.text:00404AD5                 pop     ebp
.text:00404AD6                 retn
.text:00404AD7 ; ---------------------------------------------------------------------------
.text:00404AD7
.text:00404AD7 loc_404AD7:                             ; CODE XREF: sub_4049E4+C7↑j
.text:00404AD7                 mov     [esp+28h+Format], ecx ; File
.text:00404ADB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404AE2                 call    _flsbuf
.text:00404AE7                 jmp     short loc_404AB6
.text:00404AE7 ; ---------------------------------------------------------------------------
.text:00404AE9                 align 10h
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: sub_4049E4+B3↑j
.text:00404AF0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404AF3                 call    strerror
.text:00404AF8                 test    eax, eax
.text:00404AFA                 jz      short loc_404B1E
.text:00404AFC
.text:00404AFC loc_404AFC:                             ; CODE XREF: sub_4049E4+13F↓j
.text:00404AFC                 mov     [esp+28h+ArgList], eax
.text:00404B00                 mov     edi, ds:_iob
.text:00404B06                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00404B0E                 add     edi, 40h ; '@'
.text:00404B11                 mov     [esp+28h+Stream], edi ; Stream
.text:00404B14                 call    fprintf
.text:00404B19                 jmp     loc_404A99
.text:00404B1E ; ---------------------------------------------------------------------------
.text:00404B1E
.text:00404B1E loc_404B1E:                             ; CODE XREF: sub_4049E4+116↑j
.text:00404B1E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404B23                 jmp     short loc_404AFC
.text:00404B25 ; ---------------------------------------------------------------------------
.text:00404B25
.text:00404B25 loc_404B25:                             ; CODE XREF: sub_4049E4+5D↑j
.text:00404B25                 mov     [esp+28h+Format], (offset loc_4049EB+1) ; Format
.text:00404B2D                 mov     ecx, ds:_iob
.text:00404B33                 mov     edx, ds:dword_406190
.text:00404B39                 add     ecx, 40h ; '@'
.text:00404B3C                 mov     [esp+28h+ArgList], edx
.text:00404B40                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404B43                 call    fprintf
.text:00404B48                 jmp     loc_404A49
.text:00404B48 ; ---------------------------------------------------------------------------
.text:00404B4D                 align 10h
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: sub_4049E4+33↑j
.text:00404B50                 mov     eax, ds:Str1
.text:00404B55                 cmp     ebx, eax
.text:00404B57                 jz      loc_404ACF
.text:00404B5D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404B61                 mov     [esp+28h+Stream], eax ; Str1
.text:00404B64                 call    strcmp
.text:00404B69                 test    eax, eax
.text:00404B6B                 jz      loc_404ACF
.text:00404B71                 jmp     loc_404A1D
.text:00404B76 ; ---------------------------------------------------------------------------
.text:00404B76
.text:00404B76 loc_404B76:                             ; CODE XREF: sub_4049E4+E5↑j
.text:00404B76                 mov     [esp+28h+Stream], ebp ; Code
.text:00404B79                 call    exit
.text:00404B79 sub_4049E4      endp ; sp-analysis failed
.text:00404B79
.text:00404B79 ; ---------------------------------------------------------------------------
.text:00404B7E                 align 10h
.text:00404B80
.text:00404B80 ; =============== S U B R O U T I N E =======================================
.text:00404B80
.text:00404B80
.text:00404B80 sub_404B80      proc near               ; CODE XREF: sub_401380+1D5↑p
.text:00404B80                 sub     esp, 0Ch
.text:00404B83                 call    _errno
.text:00404B88                 mov     dword ptr [eax], 28h ; '('
.text:00404B8E                 mov     eax, 0FFFFFFFFh
.text:00404B93                 add     esp, 0Ch
.text:00404B96                 retn
.text:00404B96 sub_404B80      endp
.text:00404B96
.text:00404B96 ; ---------------------------------------------------------------------------
.text:00404B97                 align 10h
.text:00404BA0
.text:00404BA0 ; =============== S U B R O U T I N E =======================================
.text:00404BA0
.text:00404BA0 ; Attributes: thunk
.text:00404BA0
.text:00404BA0 ; int __stdcall WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData)
.text:00404BA0 WSAStartup      proc near               ; CODE XREF: .text:0040281C↑p
.text:00404BA0                                         ; sub_402870+52↑p
.text:00404BA0
.text:00404BA0 wVersionRequested= word ptr  4
.text:00404BA0 lpWSAData       = dword ptr  8
.text:00404BA0
.text:00404BA0                 jmp     ds:__imp_WSAStartup
.text:00404BA0 WSAStartup      endp
.text:00404BA0
.text:00404BA0 ; ---------------------------------------------------------------------------
.text:00404BA6                 align 10h
.text:00404BB0
.text:00404BB0 ; =============== S U B R O U T I N E =======================================
.text:00404BB0
.text:00404BB0 ; Attributes: thunk
.text:00404BB0
.text:00404BB0 ; int __stdcall gethostname(char *name, int namelen)
.text:00404BB0 gethostname     proc near               ; CODE XREF: .text:0040283D↑p
.text:00404BB0                                         ; sub_402870+B7↑p
.text:00404BB0
.text:00404BB0 name            = dword ptr  4
.text:00404BB0 namelen         = dword ptr  8
.text:00404BB0
.text:00404BB0                 jmp     ds:__imp_gethostname
.text:00404BB0 gethostname     endp
.text:00404BB0
.text:00404BB0 ; ---------------------------------------------------------------------------
.text:00404BB6                 align 10h
.text:00404BC0
.text:00404BC0 ; =============== S U B R O U T I N E =======================================
.text:00404BC0
.text:00404BC0 ; Attributes: thunk
.text:00404BC0
.text:00404BC0 ; int __stdcall WSACleanup()
.text:00404BC0 WSACleanup      proc near               ; CODE XREF: .text:00402847↑p
.text:00404BC0                                         ; sub_402870+C1↑p
.text:00404BC0                 jmp     ds:__imp_WSACleanup
.text:00404BC0 WSACleanup      endp
.text:00404BC0
.text:00404BC0 ; ---------------------------------------------------------------------------
.text:00404BC6                 align 10h
.text:00404BD0
.text:00404BD0 ; =============== S U B R O U T I N E =======================================
.text:00404BD0
.text:00404BD0 ; Attributes: thunk
.text:00404BD0
.text:00404BD0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404BD0 mbrtowc         proc near               ; CODE XREF: sub_402D50+757↑p
.text:00404BD0
.text:00404BD0 DstCh           = dword ptr  4
.text:00404BD0 SrcCh           = dword ptr  8
.text:00404BD0 SizeInBytes     = dword ptr  0Ch
.text:00404BD0 State           = dword ptr  10h
.text:00404BD0
.text:00404BD0                 jmp     ds:__imp_mbrtowc
.text:00404BD0 mbrtowc         endp
.text:00404BD0
.text:00404BD0 ; ---------------------------------------------------------------------------
.text:00404BD6                 align 10h
.text:00404BE0
.text:00404BE0 ; =============== S U B R O U T I N E =======================================
.text:00404BE0
.text:00404BE0 ; Attributes: bp-based frame
.text:00404BE0
.text:00404BE0 sub_404BE0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404BE0                 push    ebp
.text:00404BE1                 mov     ecx, offset dword_406000
.text:00404BE6                 cmp     ecx, offset dword_406000
.text:00404BEC                 mov     ebp, esp
.text:00404BEE                 jnb     short loc_404C06
.text:00404BF0
.text:00404BF0 loc_404BF0:                             ; CODE XREF: sub_404BE0+24↓j
.text:00404BF0                 mov     edx, [ecx+4]
.text:00404BF3                 mov     eax, [ecx]
.text:00404BF5                 add     ecx, 8
.text:00404BF8                 add     [edx+400000h], eax
.text:00404BFE                 cmp     ecx, offset dword_406000
.text:00404C04                 jb      short loc_404BF0
.text:00404C06
.text:00404C06 loc_404C06:                             ; CODE XREF: sub_404BE0+E↑j
.text:00404C06                 pop     ebp
.text:00404C07                 retn
.text:00404C07 sub_404BE0      endp
.text:00404C07
.text:00404C07 ; ---------------------------------------------------------------------------
.text:00404C08                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10 ; Attributes: bp-based frame
.text:00404C10
.text:00404C10 sub_404C10      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404C10                                         ; TopLevelExceptionFilter+D7↑p
.text:00404C10                 push    ebp
.text:00404C11                 mov     ebp, esp
.text:00404C13                 fninit
.text:00404C15                 pop     ebp
.text:00404C16                 retn
.text:00404C16 sub_404C10      endp
.text:00404C16
.text:00404C16 ; ---------------------------------------------------------------------------
.text:00404C17                 align 10h
.text:00404C20
.text:00404C20 ; =============== S U B R O U T I N E =======================================
.text:00404C20
.text:00404C20 ; Attributes: bp-based frame
.text:00404C20
.text:00404C20 ; void __cdecl sub_404C20()
.text:00404C20 sub_404C20      proc near               ; DATA XREF: .text:loc_404C69↓o
.text:00404C20                                         ; sub_404CB0:loc_404CDE↓o
.text:00404C20                 push    ebp
.text:00404C21                 mov     ebp, esp
.text:00404C23                 sub     esp, 8
.text:00404C26                 mov     eax, off_405084
.text:00404C2B                 mov     edx, [eax]
.text:00404C2D                 test    edx, edx
.text:00404C2F                 jnz     short loc_404C35
.text:00404C31
.text:00404C31 loc_404C31:                             ; CODE XREF: sub_404C20+2C↓j
.text:00404C31                 mov     esp, ebp
.text:00404C33                 pop     ebp
.text:00404C34                 retn
.text:00404C35 ; ---------------------------------------------------------------------------
.text:00404C35
.text:00404C35 loc_404C35:                             ; CODE XREF: sub_404C20+F↑j
.text:00404C35                                         ; sub_404C20+2A↓j
.text:00404C35                 call    dword ptr [eax]
.text:00404C37                 mov     edx, off_405084
.text:00404C3D                 mov     ecx, [edx+4]
.text:00404C40                 lea     eax, [edx+4]
.text:00404C43                 mov     off_405084, eax
.text:00404C48                 test    ecx, ecx
.text:00404C4A                 jnz     short loc_404C35
.text:00404C4C                 jmp     short loc_404C31
.text:00404C4C sub_404C20      endp
.text:00404C4C
.text:00404C4C ; ---------------------------------------------------------------------------
.text:00404C4E                 align 10h
.text:00404C50                 push    ebp
.text:00404C51                 mov     ebp, esp
.text:00404C53                 sub     esp, 8
.text:00404C56                 mov     [ebp-4], ebx
.text:00404C59                 mov     eax, ds:dword_404F80
.text:00404C5E                 cmp     eax, 0FFFFFFFFh
.text:00404C61                 jz      short loc_404C8C
.text:00404C63
.text:00404C63 loc_404C63:                             ; CODE XREF: .text:00404C96↓j
.text:00404C63                                         ; .text:00404CA9↓j
.text:00404C63                 test    eax, eax
.text:00404C65                 mov     ebx, eax
.text:00404C67                 jnz     short loc_404C80
.text:00404C69
.text:00404C69 loc_404C69:                             ; CODE XREF: .text:00404C8A↓j
.text:00404C69                 mov     dword ptr [esp], offset sub_404C20
.text:00404C70                 call    sub_401040
.text:00404C75                 mov     ebx, [ebp-4]
.text:00404C78                 mov     esp, ebp
.text:00404C7A                 pop     ebp
.text:00404C7B                 retn
.text:00404C7B ; ---------------------------------------------------------------------------
.text:00404C7C                 align 10h
.text:00404C80
.text:00404C80 loc_404C80:                             ; CODE XREF: .text:00404C67↑j
.text:00404C80                                         ; .text:00404C88↓j
.text:00404C80                 call    ds:dword_404F80[ebx*4]
.text:00404C87                 dec     ebx
.text:00404C88                 jnz     short loc_404C80
.text:00404C8A                 jmp     short loc_404C69
.text:00404C8C ; ---------------------------------------------------------------------------
.text:00404C8C
.text:00404C8C loc_404C8C:                             ; CODE XREF: .text:00404C61↑j
.text:00404C8C                 mov     ecx, ds:dword_404F84
.text:00404C92                 xor     eax, eax
.text:00404C94                 test    ecx, ecx
.text:00404C96                 jz      short loc_404C63
.text:00404C98                 mov     edx, offset dword_404F80
.text:00404C9D                 lea     esi, [esi+0]
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: .text:00404CA7↓j
.text:00404CA0                 inc     eax
.text:00404CA1                 mov     ecx, [edx+eax*4+4]
.text:00404CA5                 test    ecx, ecx
.text:00404CA7                 jnz     short loc_404CA0
.text:00404CA9                 jmp     short loc_404C63
.text:00404CA9 ; ---------------------------------------------------------------------------
.text:00404CAB                 align 10h
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0 ; Attributes: bp-based frame
.text:00404CB0
.text:00404CB0 sub_404CB0      proc near               ; CODE XREF: sub_401380+16↑p
.text:00404CB0
.text:00404CB0 var_8           = dword ptr -8
.text:00404CB0 var_4           = dword ptr -4
.text:00404CB0
.text:00404CB0                 push    ebp
.text:00404CB1                 mov     ebp, esp
.text:00404CB3                 sub     esp, 8
.text:00404CB6                 mov     [ebp+var_4], ebx
.text:00404CB9                 mov     edx, dword_405080
.text:00404CBF                 test    edx, edx
.text:00404CC1                 jnz     short loc_404CEA
.text:00404CC3                 mov     eax, ds:dword_404F80
.text:00404CC8                 mov     edx, 1
.text:00404CCD                 mov     dword_405080, edx
.text:00404CD3                 cmp     eax, 0FFFFFFFFh
.text:00404CD6                 jz      short loc_404CFD
.text:00404CD8
.text:00404CD8 loc_404CD8:                             ; CODE XREF: sub_404CB0+57↓j
.text:00404CD8                                         ; sub_404CB0+69↓j
.text:00404CD8                 test    eax, eax
.text:00404CDA                 mov     ebx, eax
.text:00404CDC                 jnz     short loc_404CF1
.text:00404CDE
.text:00404CDE loc_404CDE:                             ; CODE XREF: sub_404CB0+4B↓j
.text:00404CDE                 mov     [esp+8+var_8], offset sub_404C20 ; void (__cdecl *)()
.text:00404CE5                 call    sub_401040
.text:00404CEA
.text:00404CEA loc_404CEA:                             ; CODE XREF: sub_404CB0+11↑j
.text:00404CEA                 mov     ebx, [ebp+var_4]
.text:00404CED                 mov     esp, ebp
.text:00404CEF                 pop     ebp
.text:00404CF0                 retn
.text:00404CF1 ; ---------------------------------------------------------------------------
.text:00404CF1
.text:00404CF1 loc_404CF1:                             ; CODE XREF: sub_404CB0+2C↑j
.text:00404CF1                                         ; sub_404CB0+49↓j
.text:00404CF1                 call    ds:dword_404F80[ebx*4]
.text:00404CF8                 dec     ebx
.text:00404CF9                 jnz     short loc_404CF1
.text:00404CFB                 jmp     short loc_404CDE
.text:00404CFD ; ---------------------------------------------------------------------------
.text:00404CFD
.text:00404CFD loc_404CFD:                             ; CODE XREF: sub_404CB0+26↑j
.text:00404CFD                 mov     ecx, ds:dword_404F84
.text:00404D03                 xor     eax, eax
.text:00404D05                 test    ecx, ecx
.text:00404D07                 jz      short loc_404CD8
.text:00404D09                 mov     edx, offset dword_404F80
.text:00404D0E                 mov     esi, esi
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: sub_404CB0+67↓j
.text:00404D10                 inc     eax
.text:00404D11                 mov     ebx, [edx+eax*4+4]
.text:00404D15                 test    ebx, ebx
.text:00404D17                 jnz     short loc_404D10
.text:00404D19                 jmp     short loc_404CD8
.text:00404D19 sub_404CB0      endp
.text:00404D19
.text:00404D19 ; ---------------------------------------------------------------------------
.text:00404D1B                 align 10h
.text:00404D20
.text:00404D20 ; =============== S U B R O U T I N E =======================================
.text:00404D20
.text:00404D20 ; Attributes: info_from_lumina
.text:00404D20
.text:00404D20 ; void *__cdecl _alloca(size_t Size)
.text:00404D20 __alloca        proc near               ; CODE XREF: sub_401380+E↑p
.text:00404D20                 push    ecx
.text:00404D21                 mov     ecx, esp
.text:00404D23                 add     ecx, 8
.text:00404D26
.text:00404D26 loc_404D26:                             ; CODE XREF: __alloca+1B↓j
.text:00404D26                 cmp     eax, 1000h
.text:00404D2B                 jb      short loc_404D3D
.text:00404D2D                 sub     ecx, 1000h
.text:00404D33                 or      dword ptr [ecx], 0
.text:00404D36                 sub     eax, 1000h
.text:00404D3B                 jmp     short loc_404D26
.text:00404D3D ; ---------------------------------------------------------------------------
.text:00404D3D
.text:00404D3D loc_404D3D:                             ; CODE XREF: __alloca+B↑j
.text:00404D3D                 sub     ecx, eax
.text:00404D3F                 or      dword ptr [ecx], 0
.text:00404D42                 mov     eax, esp
.text:00404D44                 mov     esp, ecx
.text:00404D46                 mov     ecx, [eax]
.text:00404D48                 mov     eax, [eax+4]
.text:00404D4B                 jmp     eax
.text:00404D4B __alloca        endp
.text:00404D4B
.text:00404D4B ; ---------------------------------------------------------------------------
.text:00404D4D                 align 10h
.text:00404D50                 jmp     ds:__set_app_type
.text:00404D50 ; ---------------------------------------------------------------------------
.text:00404D56                 align 10h
.text:00404D60
.text:00404D60 ; =============== S U B R O U T I N E =======================================
.text:00404D60
.text:00404D60 ; Attributes: thunk
.text:00404D60
.text:00404D60 ; void __cdecl cexit()
.text:00404D60 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404D60                 jmp     ds:__imp__cexit
.text:00404D60 _cexit          endp
.text:00404D60
.text:00404D60 ; ---------------------------------------------------------------------------
.text:00404D66                 align 10h
.text:00404D70
.text:00404D70 ; =============== S U B R O U T I N E =======================================
.text:00404D70
.text:00404D70 ; Attributes: thunk
.text:00404D70
.text:00404D70 ; char ***__cdecl _p__environ()
.text:00404D70 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00404D70                 jmp     ds:__imp___p__environ
.text:00404D70 __p__environ    endp
.text:00404D70
.text:00404D70 ; ---------------------------------------------------------------------------
.text:00404D76                 align 10h
.text:00404D80
.text:00404D80 ; =============== S U B R O U T I N E =======================================
.text:00404D80
.text:00404D80 ; Attributes: thunk
.text:00404D80
.text:00404D80 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00404D80 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00404D80                                         ; TopLevelExceptionFilter+88↑p ...
.text:00404D80
.text:00404D80 Signal          = dword ptr  4
.text:00404D80 Function        = dword ptr  8
.text:00404D80
.text:00404D80                 jmp     ds:__imp_signal
.text:00404D80 signal          endp
.text:00404D80
.text:00404D80 ; ---------------------------------------------------------------------------
.text:00404D86                 align 10h
.text:00404D90
.text:00404D90 ; =============== S U B R O U T I N E =======================================
.text:00404D90
.text:00404D90 ; Attributes: thunk
.text:00404D90
.text:00404D90 ; int *__cdecl _p__fmode()
.text:00404D90 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00404D90                 jmp     ds:__imp___p__fmode
.text:00404D90 __p__fmode      endp
.text:00404D90
.text:00404D90 ; ---------------------------------------------------------------------------
.text:00404D96                 align 10h
.text:00404DA0
.text:00404DA0 ; =============== S U B R O U T I N E =======================================
.text:00404DA0
.text:00404DA0 ; Attributes: thunk
.text:00404DA0
.text:00404DA0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00404DA0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00404DA0                                         ; sub_401080+90↑p ...
.text:00404DA0
.text:00404DA0 FileHandle      = dword ptr  4
.text:00404DA0 Mode            = dword ptr  8
.text:00404DA0
.text:00404DA0                 jmp     ds:__imp__setmode
.text:00404DA0 _setmode        endp
.text:00404DA0
.text:00404DA0 ; ---------------------------------------------------------------------------
.text:00404DA6                 align 10h
.text:00404DB0
.text:00404DB0 ; =============== S U B R O U T I N E =======================================
.text:00404DB0
.text:00404DB0 ; Attributes: thunk
.text:00404DB0
.text:00404DB0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00404DB0                 jmp     ds:__imp___getmainargs
.text:00404DB0 __getmainargs   endp
.text:00404DB0
.text:00404DB0 ; ---------------------------------------------------------------------------
.text:00404DB6                 align 10h
.text:00404DC0
.text:00404DC0 ; =============== S U B R O U T I N E =======================================
.text:00404DC0
.text:00404DC0 ; Attributes: thunk
.text:00404DC0
.text:00404DC0 ; int __cdecl puts(const char *Buffer)
.text:00404DC0 puts            proc near               ; CODE XREF: sub_401380+17E↑p
.text:00404DC0
.text:00404DC0 Buffer          = dword ptr  4
.text:00404DC0
.text:00404DC0                 jmp     ds:__imp_puts
.text:00404DC0 puts            endp
.text:00404DC0
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC6                 align 10h
.text:00404DD0
.text:00404DD0 ; =============== S U B R O U T I N E =======================================
.text:00404DD0
.text:00404DD0 ; Attributes: thunk
.text:00404DD0
.text:00404DD0 ; int *__cdecl errno()
.text:00404DD0 _errno          proc near               ; CODE XREF: sub_401380+19D↑p
.text:00404DD0                                         ; sub_401380+1F8↑p ...
.text:00404DD0                 jmp     ds:__imp__errno
.text:00404DD0 _errno          endp
.text:00404DD0
.text:00404DD0 ; ---------------------------------------------------------------------------
.text:00404DD6                 align 10h
.text:00404DE0
.text:00404DE0 ; =============== S U B R O U T I N E =======================================
.text:00404DE0
.text:00404DE0 ; Attributes: thunk
.text:00404DE0
.text:00404DE0 ; size_t __cdecl strlen(const char *Str)
.text:00404DE0 strlen          proc near               ; CODE XREF: sub_401380+1C9↑p
.text:00404DE0                                         ; sub_4019D0+2A9↑p ...
.text:00404DE0
.text:00404DE0 Str             = dword ptr  4
.text:00404DE0
.text:00404DE0                 jmp     ds:__imp_strlen
.text:00404DE0 strlen          endp
.text:00404DE0
.text:00404DE0 ; ---------------------------------------------------------------------------
.text:00404DE6                 align 10h
.text:00404DF0
.text:00404DF0 ; =============== S U B R O U T I N E =======================================
.text:00404DF0
.text:00404DF0 ; Attributes: thunk
.text:00404DF0
.text:00404DF0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00404DF0 setlocale       proc near               ; CODE XREF: sub_401380+35↑p
.text:00404DF0
.text:00404DF0 Category        = dword ptr  4
.text:00404DF0 Locale          = dword ptr  8
.text:00404DF0
.text:00404DF0                 jmp     ds:__imp_setlocale
.text:00404DF0 setlocale       endp
.text:00404DF0
.text:00404DF0 ; ---------------------------------------------------------------------------
.text:00404DF6                 align 10h
.text:00404E00
.text:00404E00 ; =============== S U B R O U T I N E =======================================
.text:00404E00
.text:00404E00 ; Attributes: noreturn thunk
.text:00404E00
.text:00404E00 ; void __cdecl __noreturn exit(int Code)
.text:00404E00 exit            proc near               ; CODE XREF: sub_401380:loc_4014DE↑p
.text:00404E00                                         ; sub_4016B0+3E↑p ...
.text:00404E00
.text:00404E00 Code            = dword ptr  4
.text:00404E00
.text:00404E00                 jmp     ds:__imp_exit
.text:00404E00 exit            endp
.text:00404E00
.text:00404E00 ; ---------------------------------------------------------------------------
.text:00404E06                 align 10h
.text:00404E10
.text:00404E10 ; =============== S U B R O U T I N E =======================================
.text:00404E10
.text:00404E10 ; Attributes: thunk
.text:00404E10
.text:00404E10 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00404E10 fputs           proc near               ; CODE XREF: sub_4016B0+83↑p
.text:00404E10                                         ; sub_4016B0+A5↑p ...
.text:00404E10
.text:00404E10 Buffer          = dword ptr  4
.text:00404E10 Stream          = dword ptr  8
.text:00404E10
.text:00404E10                 jmp     ds:__imp_fputs
.text:00404E10 fputs           endp
.text:00404E10
.text:00404E10 ; ---------------------------------------------------------------------------
.text:00404E16                 align 10h
.text:00404E20
.text:00404E20 ; =============== S U B R O U T I N E =======================================
.text:00404E20
.text:00404E20 ; Attributes: thunk
.text:00404E20
.text:00404E20 ; int printf(const char *const Format, ...)
.text:00404E20 printf          proc near               ; CODE XREF: sub_4016B0+61↑p
.text:00404E20                                         ; sub_4016B0+C2↑p
.text:00404E20
.text:00404E20 Format          = dword ptr  4
.text:00404E20
.text:00404E20                 jmp     ds:__imp_printf
.text:00404E20 printf          endp
.text:00404E20
.text:00404E20 ; ---------------------------------------------------------------------------
.text:00404E26                 align 10h
.text:00404E30
.text:00404E30 ; =============== S U B R O U T I N E =======================================
.text:00404E30
.text:00404E30 ; Attributes: thunk
.text:00404E30
.text:00404E30 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00404E30 fprintf         proc near               ; CODE XREF: sub_401380+152↑p
.text:00404E30                                         ; sub_4016B0+36↑p ...
.text:00404E30
.text:00404E30 Stream          = dword ptr  4
.text:00404E30 Format          = dword ptr  8
.text:00404E30
.text:00404E30                 jmp     ds:__imp_fprintf
.text:00404E30 fprintf         endp
.text:00404E30
.text:00404E30 ; ---------------------------------------------------------------------------
.text:00404E36                 align 10h
.text:00404E40
.text:00404E40 ; =============== S U B R O U T I N E =======================================
.text:00404E40
.text:00404E40 ; Attributes: thunk
.text:00404E40
.text:00404E40 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00404E40 strncmp         proc near               ; CODE XREF: sub_4019D0+23F↑p
.text:00404E40                                         ; sub_4019D0+699↑p
.text:00404E40
.text:00404E40 Str1            = dword ptr  4
.text:00404E40 Str2            = dword ptr  8
.text:00404E40 MaxCount        = dword ptr  0Ch
.text:00404E40
.text:00404E40                 jmp     ds:__imp_strncmp
.text:00404E40 strncmp         endp
.text:00404E40
.text:00404E40 ; ---------------------------------------------------------------------------
.text:00404E46                 align 10h
.text:00404E50
.text:00404E50 ; =============== S U B R O U T I N E =======================================
.text:00404E50
.text:00404E50 ; Attributes: thunk
.text:00404E50
.text:00404E50 ; char *__cdecl getenv(const char *VarName)
.text:00404E50 getenv          proc near               ; CODE XREF: sub_4019D0+B57↑p
.text:00404E50
.text:00404E50 VarName         = dword ptr  4
.text:00404E50
.text:00404E50                 jmp     ds:__imp_getenv
.text:00404E50 getenv          endp
.text:00404E50
.text:00404E50 ; ---------------------------------------------------------------------------
.text:00404E56                 align 10h
.text:00404E60
.text:00404E60 ; =============== S U B R O U T I N E =======================================
.text:00404E60
.text:00404E60 ; Attributes: thunk
.text:00404E60
.text:00404E60 ; char *__cdecl strchr(const char *Str, int Val)
.text:00404E60 strchr          proc near               ; CODE XREF: sub_4019D0+469↑p
.text:00404E60                                         ; sub_4019D0+53A↑p ...
.text:00404E60
.text:00404E60 Str             = dword ptr  4
.text:00404E60 Val             = dword ptr  8
.text:00404E60
.text:00404E60                 jmp     ds:__imp_strchr
.text:00404E60 strchr          endp
.text:00404E60
.text:00404E60 ; ---------------------------------------------------------------------------
.text:00404E66                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70 ; Attributes: thunk
.text:00404E70
.text:00404E70 ; void __cdecl free(void *Block)
.text:00404E70 free            proc near               ; CODE XREF: sub_402870+92↑p
.text:00404E70                                         ; sub_403E90+112↑p
.text:00404E70
.text:00404E70 Block           = dword ptr  4
.text:00404E70
.text:00404E70                 jmp     ds:__imp_free
.text:00404E70 free            endp
.text:00404E70
.text:00404E70 ; ---------------------------------------------------------------------------
.text:00404E76                 align 10h
.text:00404E80
.text:00404E80 ; =============== S U B R O U T I N E =======================================
.text:00404E80
.text:00404E80 ; Attributes: thunk
.text:00404E80
.text:00404E80 ; int __cdecl fclose(FILE *Stream)
.text:00404E80 fclose          proc near               ; CODE XREF: sub_402BE0+27↑p
.text:00404E80
.text:00404E80 Stream          = dword ptr  4
.text:00404E80
.text:00404E80                 jmp     ds:__imp_fclose
.text:00404E80 fclose          endp
.text:00404E80
.text:00404E80 ; ---------------------------------------------------------------------------
.text:00404E86                 align 10h
.text:00404E90
.text:00404E90 ; =============== S U B R O U T I N E =======================================
.text:00404E90
.text:00404E90 ; Attributes: noreturn thunk
.text:00404E90
.text:00404E90 ; void __cdecl __noreturn abort()
.text:00404E90 abort           proc near               ; CODE XREF: sub_403E90:loc_40404A↑p
.text:00404E90                                         ; sub_404620:loc_4046BC↑p ...
.text:00404E90                 jmp     ds:__imp_abort
.text:00404E90 abort           endp
.text:00404E90
.text:00404E90 ; ---------------------------------------------------------------------------
.text:00404E96                 align 10h
.text:00404EA0
.text:00404EA0 ; =============== S U B R O U T I N E =======================================
.text:00404EA0
.text:00404EA0 ; Attributes: thunk
.text:00404EA0
.text:00404EA0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00404EA0 iswctype        proc near               ; CODE XREF: sub_402D50+78B↑p
.text:00404EA0
.text:00404EA0 C               = word ptr  4
.text:00404EA0 Type            = word ptr  8
.text:00404EA0
.text:00404EA0                 jmp     ds:__imp_iswctype
.text:00404EA0 iswctype        endp
.text:00404EA0
.text:00404EA0 ; ---------------------------------------------------------------------------
.text:00404EA6                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0 ; Attributes: thunk
.text:00404EB0
.text:00404EB0 ; int __cdecl isctype(int C, int Type)
.text:00404EB0 _isctype        proc near               ; CODE XREF: sub_402D50+610↑p
.text:00404EB0
.text:00404EB0 C               = dword ptr  4
.text:00404EB0 Type            = dword ptr  8
.text:00404EB0
.text:00404EB0                 jmp     ds:__imp__isctype
.text:00404EB0 _isctype        endp
.text:00404EB0
.text:00404EB0 ; ---------------------------------------------------------------------------
.text:00404EB6                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0 ; Attributes: thunk
.text:00404EC0
.text:00404EC0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00404EC0 memcpy          proc near               ; CODE XREF: .text:00404248↑p
.text:00404EC0                                         ; .text:00404291↑p
.text:00404EC0
.text:00404EC0 Src             = dword ptr  8
.text:00404EC0 Size            = dword ptr  0Ch
.text:00404EC0
.text:00404EC0                 jmp     ds:__imp_memcpy
.text:00404EC0 memcpy          endp
.text:00404EC0
.text:00404EC0 ; ---------------------------------------------------------------------------
.text:00404EC6                 align 10h
.text:00404ED0
.text:00404ED0 ; =============== S U B R O U T I N E =======================================
.text:00404ED0
.text:00404ED0 ; Attributes: thunk
.text:00404ED0
.text:00404ED0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00404ED0 memset          proc near               ; CODE XREF: .text:004041C6↑p
.text:00404ED0
.text:00404ED0 Val             = dword ptr  8
.text:00404ED0 Size            = dword ptr  0Ch
.text:00404ED0
.text:00404ED0                 jmp     ds:__imp_memset
.text:00404ED0 memset          endp
.text:00404ED0
.text:00404ED0 ; ---------------------------------------------------------------------------
.text:00404ED6                 align 10h
.text:00404EE0
.text:00404EE0 ; =============== S U B R O U T I N E =======================================
.text:00404EE0
.text:00404EE0 ; Attributes: thunk
.text:00404EE0
.text:00404EE0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00404EE0 calloc          proc near               ; CODE XREF: .text:00404203↑p
.text:00404EE0
.text:00404EE0 Count           = dword ptr  4
.text:00404EE0 Size            = dword ptr  8
.text:00404EE0
.text:00404EE0                 jmp     ds:__imp_calloc
.text:00404EE0 calloc          endp
.text:00404EE0
.text:00404EE0 ; ---------------------------------------------------------------------------
.text:00404EE6                 align 10h
.text:00404EF0
.text:00404EF0 ; =============== S U B R O U T I N E =======================================
.text:00404EF0
.text:00404EF0 ; Attributes: thunk
.text:00404EF0
.text:00404EF0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00404EF0 realloc         proc near               ; CODE XREF: .text:00404100↑p
.text:00404EF0                                         ; sub_404130+16↑p ...
.text:00404EF0
.text:00404EF0 Block           = dword ptr  4
.text:00404EF0 Size            = dword ptr  8
.text:00404EF0
.text:00404EF0                 jmp     ds:__imp_realloc
.text:00404EF0 realloc         endp
.text:00404EF0
.text:00404EF0 ; ---------------------------------------------------------------------------
.text:00404EF6                 align 10h
.text:00404F00
.text:00404F00 ; =============== S U B R O U T I N E =======================================
.text:00404F00
.text:00404F00 ; Attributes: thunk
.text:00404F00
.text:00404F00 ; void *__cdecl malloc(size_t Size)
.text:00404F00 malloc          proc near               ; CODE XREF: sub_404060+24↑p
.text:00404F00                                         ; sub_4040A0+E↑p ...
.text:00404F00
.text:00404F00 Size            = dword ptr  4
.text:00404F00
.text:00404F00                 jmp     ds:__imp_malloc
.text:00404F00 malloc          endp
.text:00404F00
.text:00404F00 ; ---------------------------------------------------------------------------
.text:00404F06                 align 10h
.text:00404F10
.text:00404F10 ; =============== S U B R O U T I N E =======================================
.text:00404F10
.text:00404F10 ; Attributes: thunk
.text:00404F10
.text:00404F10 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00404F10 vfprintf        proc near               ; CODE XREF: sub_404620+C1↑p
.text:00404F10                                         ; sub_4048E0+49↑p ...
.text:00404F10
.text:00404F10 Stream          = dword ptr  4
.text:00404F10 Format          = dword ptr  8
.text:00404F10 ArgList         = dword ptr  0Ch
.text:00404F10
.text:00404F10                 jmp     ds:__imp_vfprintf
.text:00404F10 vfprintf        endp
.text:00404F10
.text:00404F10 ; ---------------------------------------------------------------------------
.text:00404F16                 align 10h
.text:00404F20
.text:00404F20 ; =============== S U B R O U T I N E =======================================
.text:00404F20
.text:00404F20 ; Attributes: thunk
.text:00404F20
.text:00404F20 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00404F20 _flsbuf         proc near               ; CODE XREF: sub_404620+128↑p
.text:00404F20                                         ; sub_404620+13A↑p ...
.text:00404F20
.text:00404F20 File            = dword ptr  8
.text:00404F20
.text:00404F20                 jmp     ds:__imp__flsbuf
.text:00404F20 _flsbuf         endp
.text:00404F20
.text:00404F20 ; ---------------------------------------------------------------------------
.text:00404F26                 align 10h
.text:00404F30
.text:00404F30 ; =============== S U B R O U T I N E =======================================
.text:00404F30
.text:00404F30 ; Attributes: thunk
.text:00404F30
.text:00404F30 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00404F30 strcmp          proc near               ; CODE XREF: sub_4049E4+180↑p
.text:00404F30
.text:00404F30 Str1            = dword ptr  4
.text:00404F30 Str2            = dword ptr  8
.text:00404F30
.text:00404F30                 jmp     ds:__imp_strcmp
.text:00404F30 strcmp          endp
.text:00404F30
.text:00404F30 ; ---------------------------------------------------------------------------
.text:00404F36                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40 ; Attributes: thunk
.text:00404F40
.text:00404F40 ; int __cdecl fflush(FILE *Stream)
.text:00404F40 fflush          proc near               ; CODE XREF: sub_4048E0+19↑p
.text:00404F40                                         ; sub_4048E0+81↑p ...
.text:00404F40
.text:00404F40 Stream          = dword ptr  4
.text:00404F40
.text:00404F40                 jmp     ds:__imp_fflush
.text:00404F40 fflush          endp
.text:00404F40
.text:00404F40 ; ---------------------------------------------------------------------------
.text:00404F46                 align 10h
.text:00404F50
.text:00404F50 ; =============== S U B R O U T I N E =======================================
.text:00404F50
.text:00404F50 ; Attributes: thunk
.text:00404F50
.text:00404F50 ; char *__cdecl strerror(int ErrorMessage)
.text:00404F50 strerror        proc near               ; CODE XREF: sub_4048E0+A5↑p
.text:00404F50                                         ; sub_4049E4+10F↑p
.text:00404F50
.text:00404F50 ErrorMessage    = dword ptr  4
.text:00404F50
.text:00404F50                 jmp     ds:__imp_strerror
.text:00404F50 strerror        endp
.text:00404F50
.text:00404F50 ; ---------------------------------------------------------------------------
.text:00404F56                 align 10h
.text:00404F60
.text:00404F60 ; =============== S U B R O U T I N E =======================================
.text:00404F60
.text:00404F60 ; Attributes: thunk
.text:00404F60
.text:00404F60 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00404F60 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00404F60
.text:00404F60 lpTopLevelExceptionFilter= dword ptr  4
.text:00404F60
.text:00404F60                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00404F60 SetUnhandledExceptionFilter endp
.text:00404F60
.text:00404F60 ; ---------------------------------------------------------------------------
.text:00404F66                 align 10h
.text:00404F70
.text:00404F70 ; =============== S U B R O U T I N E =======================================
.text:00404F70
.text:00404F70 ; Attributes: noreturn thunk
.text:00404F70
.text:00404F70 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00404F70 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00404F70
.text:00404F70 uExitCode       = dword ptr  4
.text:00404F70
.text:00404F70                 jmp     ds:__imp_ExitProcess
.text:00404F70 ExitProcess     endp
.text:00404F70
.text:00404F70 ; ---------------------------------------------------------------------------
.text:00404F76                 align 10h
.text:00404F80 dword_404F80    dd 0FFFFFFFFh           ; DATA XREF: .text:00404C59↑r
.text:00404F80                                         ; .text:loc_404C80↑r ...
.text:00404F84 dword_404F84    dd 0                    ; DATA XREF: .text:loc_404C8C↑r
.text:00404F84                                         ; sub_404CB0:loc_404CFD↑r
.text:00404F88                 dd 0FFFFFFFFh
.text:00404F8C dword_404F8C    dd 1Dh dup(0)           ; DATA XREF: .data:off_405084↓o
.text:00404F8C _text           ends
.text:00404F8C
.data:00405000 ; Section 2. (virtual address 00005000)
.data:00405000 ; Virtual size                  : 000000A0 (    160.)
.data:00405000 ; Section size in file          : 00000200 (    512.)
.data:00405000 ; Offset to raw data for section: 00004400
.data:00405000 ; Flags C0000040: Data Readable Writable
.data:00405000 ; Alignment     : default
.data:00405000 ; ===========================================================================
.data:00405000
.data:00405000 ; Segment type: Pure data
.data:00405000 ; Segment permissions: Read/Write
.data:00405000 _data           segment para public 'DATA' use32
.data:00405000                 assume cs:_data
.data:00405000                 ;org 405000h
.data:00405000 dword_405000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00405000                                         ; sub_401080+CC↑r
.data:00405004 dword_405004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00405004                                         ; sub_401080+D4↑r
.data:00405008                 align 10h
.data:00405010 dword_405010    dd 1                    ; DATA XREF: sub_401380+D1↑r
.data:00405010                                         ; sub_401380+183↑r ...
.data:00405014 dword_405014    dd 1                    ; DATA XREF: sub_402560+11↑r
.data:00405014                                         ; .text:00402601↑r ...
.data:00405018 dword_405018    dd 3Fh                  ; DATA XREF: sub_402560+7D↑w
.data:00405018                                         ; .text:0040266D↑w
.data:0040501C                 align 10h
.data:00405020 dword_405020    dd 1                    ; DATA XREF: sub_403E90+22↑r
.data:00405020                                         ; sub_403E90+65↑r ...
.data:00405024 dword_405024    dd 100h                 ; DATA XREF: sub_403E90+3F↑o
.data:00405024                                         ; sub_403E90+1A2↑r ...
.data:00405028 off_405028      dd offset unk_406040    ; DATA XREF: sub_403E90+1AA↑r
.data:0040502C ; void *off_40502C
.data:0040502C off_40502C      dd offset dword_405024  ; DATA XREF: sub_403E90+39↑r
.data:0040502C                                         ; sub_403E90+60↑w ...
.data:00405030 ; char *Buffer
.data:00405030 Buffer          dd offset aCopyrightC2005
.data:00405030                                         ; DATA XREF: sub_404620+DC↑r
.data:00405030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00405034                 align 10h
.data:00405040 ; int Code
.data:00405040 Code            dd 1                    ; DATA XREF: sub_402BE0+6D↑r
.data:00405040                                         ; sub_402BE0+9A↑r ...
.data:00405044                 align 10h
.data:00405050 dword_405050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00405054                 align 10h
.data:00405060 ; int Mode
.data:00405060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00405060                                         ; sub_401080+80↑r ...
.data:00405064                 align 10h
.data:00405070 dword_405070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00405070                                         ; sub_401080+BA↑r
.data:00405074                 align 10h
.data:00405080 dword_405080    dd 0                    ; DATA XREF: sub_404CB0+9↑r
.data:00405080                                         ; sub_404CB0+1D↑w
.data:00405084 off_405084      dd offset dword_404F8C  ; DATA XREF: sub_404C20+6↑r
.data:00405084                                         ; sub_404C20+17↑r ...
.data:00405088                 align 1000h
.data:00405088 _data           ends
.data:00405088
.bss:00406000 ; Section 3. (virtual address 00006000)
.bss:00406000 ; Virtual size                  : 00000230 (    560.)
.bss:00406000 ; Section size in file          : 00000000 (      0.)
.bss:00406000 ; Offset to raw data for section: 00000000
.bss:00406000 ; Flags C0000080: Bss Readable Writable
.bss:00406000 ; Alignment     : default
.bss:00406000 ; ===========================================================================
.bss:00406000
.bss:00406000 ; Segment type: Uninitialized
.bss:00406000 ; Segment permissions: Read/Write
.bss:00406000 _bss            segment para public 'BSS' use32
.bss:00406000                 assume cs:_bss
.bss:00406000                 ;org 406000h
.bss:00406000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00406000 dword_406000    dd ?                    ; DATA XREF: sub_402560+9↑o
.bss:00406000                                         ; sub_402560+17↑w ...
.bss:00406004 dword_406004    dd ?                    ; DATA XREF: sub_402560+21↑w
.bss:00406004                                         ; .text:00402619↑w
.bss:00406008 dword_406008    dd ?                    ; DATA XREF: sub_402560+77↑r
.bss:00406008                                         ; .text:00402667↑r
.bss:0040600C dword_40600C    dd ?                    ; DATA XREF: sub_402560+6B↑r
.bss:0040600C                                         ; .text:0040265B↑r
.bss:00406010                 db    ? ;
.bss:00406011                 db    ? ;
.bss:00406012                 db    ? ;
.bss:00406013                 db    ? ;
.bss:00406014                 db    ? ;
.bss:00406015                 db    ? ;
.bss:00406016                 db    ? ;
.bss:00406017                 db    ? ;
.bss:00406018                 db    ? ;
.bss:00406019                 db    ? ;
.bss:0040601A                 db    ? ;
.bss:0040601B                 db    ? ;
.bss:0040601C                 db    ? ;
.bss:0040601D                 db    ? ;
.bss:0040601E                 db    ? ;
.bss:0040601F                 db    ? ;
.bss:00406020                 db    ? ;
.bss:00406021                 db    ? ;
.bss:00406022                 db    ? ;
.bss:00406023                 db    ? ;
.bss:00406024                 db    ? ;
.bss:00406025                 db    ? ;
.bss:00406026                 db    ? ;
.bss:00406027                 db    ? ;
.bss:00406028                 db    ? ;
.bss:00406029                 db    ? ;
.bss:0040602A                 db    ? ;
.bss:0040602B                 db    ? ;
.bss:0040602C                 db    ? ;
.bss:0040602D                 db    ? ;
.bss:0040602E                 db    ? ;
.bss:0040602F                 db    ? ;
.bss:00406030 ; char *dword_406030
.bss:00406030 dword_406030    dd ?                    ; DATA XREF: .text:00402BB4↑w
.bss:00406030                                         ; sub_402BE0+58↑r
.bss:00406034                 align 10h
.bss:00406040 unk_406040      db    ? ;               ; DATA XREF: sub_403E90+100↑o
.bss:00406040                                         ; .data:off_405028↑o
.bss:00406041                 db    ? ;
.bss:00406042                 db    ? ;
.bss:00406043                 db    ? ;
.bss:00406044                 db    ? ;
.bss:00406045                 db    ? ;
.bss:00406046                 db    ? ;
.bss:00406047                 db    ? ;
.bss:00406048                 db    ? ;
.bss:00406049                 db    ? ;
.bss:0040604A                 db    ? ;
.bss:0040604B                 db    ? ;
.bss:0040604C                 db    ? ;
.bss:0040604D                 db    ? ;
.bss:0040604E                 db    ? ;
.bss:0040604F                 db    ? ;
.bss:00406050                 db    ? ;
.bss:00406051                 db    ? ;
.bss:00406052                 db    ? ;
.bss:00406053                 db    ? ;
.bss:00406054                 db    ? ;
.bss:00406055                 db    ? ;
.bss:00406056                 db    ? ;
.bss:00406057                 db    ? ;
.bss:00406058                 db    ? ;
.bss:00406059                 db    ? ;
.bss:0040605A                 db    ? ;
.bss:0040605B                 db    ? ;
.bss:0040605C                 db    ? ;
.bss:0040605D                 db    ? ;
.bss:0040605E                 db    ? ;
.bss:0040605F                 db    ? ;
.bss:00406060                 db    ? ;
.bss:00406061                 db    ? ;
.bss:00406062                 db    ? ;
.bss:00406063                 db    ? ;
.bss:00406064                 db    ? ;
.bss:00406065                 db    ? ;
.bss:00406066                 db    ? ;
.bss:00406067                 db    ? ;
.bss:00406068                 db    ? ;
.bss:00406069                 db    ? ;
.bss:0040606A                 db    ? ;
.bss:0040606B                 db    ? ;
.bss:0040606C                 db    ? ;
.bss:0040606D                 db    ? ;
.bss:0040606E                 db    ? ;
.bss:0040606F                 db    ? ;
.bss:00406070                 db    ? ;
.bss:00406071                 db    ? ;
.bss:00406072                 db    ? ;
.bss:00406073                 db    ? ;
.bss:00406074                 db    ? ;
.bss:00406075                 db    ? ;
.bss:00406076                 db    ? ;
.bss:00406077                 db    ? ;
.bss:00406078                 db    ? ;
.bss:00406079                 db    ? ;
.bss:0040607A                 db    ? ;
.bss:0040607B                 db    ? ;
.bss:0040607C                 db    ? ;
.bss:0040607D                 db    ? ;
.bss:0040607E                 db    ? ;
.bss:0040607F                 db    ? ;
.bss:00406080                 db    ? ;
.bss:00406081                 db    ? ;
.bss:00406082                 db    ? ;
.bss:00406083                 db    ? ;
.bss:00406084                 db    ? ;
.bss:00406085                 db    ? ;
.bss:00406086                 db    ? ;
.bss:00406087                 db    ? ;
.bss:00406088                 db    ? ;
.bss:00406089                 db    ? ;
.bss:0040608A                 db    ? ;
.bss:0040608B                 db    ? ;
.bss:0040608C                 db    ? ;
.bss:0040608D                 db    ? ;
.bss:0040608E                 db    ? ;
.bss:0040608F                 db    ? ;
.bss:00406090                 db    ? ;
.bss:00406091                 db    ? ;
.bss:00406092                 db    ? ;
.bss:00406093                 db    ? ;
.bss:00406094                 db    ? ;
.bss:00406095                 db    ? ;
.bss:00406096                 db    ? ;
.bss:00406097                 db    ? ;
.bss:00406098                 db    ? ;
.bss:00406099                 db    ? ;
.bss:0040609A                 db    ? ;
.bss:0040609B                 db    ? ;
.bss:0040609C                 db    ? ;
.bss:0040609D                 db    ? ;
.bss:0040609E                 db    ? ;
.bss:0040609F                 db    ? ;
.bss:004060A0                 db    ? ;
.bss:004060A1                 db    ? ;
.bss:004060A2                 db    ? ;
.bss:004060A3                 db    ? ;
.bss:004060A4                 db    ? ;
.bss:004060A5                 db    ? ;
.bss:004060A6                 db    ? ;
.bss:004060A7                 db    ? ;
.bss:004060A8                 db    ? ;
.bss:004060A9                 db    ? ;
.bss:004060AA                 db    ? ;
.bss:004060AB                 db    ? ;
.bss:004060AC                 db    ? ;
.bss:004060AD                 db    ? ;
.bss:004060AE                 db    ? ;
.bss:004060AF                 db    ? ;
.bss:004060B0                 db    ? ;
.bss:004060B1                 db    ? ;
.bss:004060B2                 db    ? ;
.bss:004060B3                 db    ? ;
.bss:004060B4                 db    ? ;
.bss:004060B5                 db    ? ;
.bss:004060B6                 db    ? ;
.bss:004060B7                 db    ? ;
.bss:004060B8                 db    ? ;
.bss:004060B9                 db    ? ;
.bss:004060BA                 db    ? ;
.bss:004060BB                 db    ? ;
.bss:004060BC                 db    ? ;
.bss:004060BD                 db    ? ;
.bss:004060BE                 db    ? ;
.bss:004060BF                 db    ? ;
.bss:004060C0                 db    ? ;
.bss:004060C1                 db    ? ;
.bss:004060C2                 db    ? ;
.bss:004060C3                 db    ? ;
.bss:004060C4                 db    ? ;
.bss:004060C5                 db    ? ;
.bss:004060C6                 db    ? ;
.bss:004060C7                 db    ? ;
.bss:004060C8                 db    ? ;
.bss:004060C9                 db    ? ;
.bss:004060CA                 db    ? ;
.bss:004060CB                 db    ? ;
.bss:004060CC                 db    ? ;
.bss:004060CD                 db    ? ;
.bss:004060CE                 db    ? ;
.bss:004060CF                 db    ? ;
.bss:004060D0                 db    ? ;
.bss:004060D1                 db    ? ;
.bss:004060D2                 db    ? ;
.bss:004060D3                 db    ? ;
.bss:004060D4                 db    ? ;
.bss:004060D5                 db    ? ;
.bss:004060D6                 db    ? ;
.bss:004060D7                 db    ? ;
.bss:004060D8                 db    ? ;
.bss:004060D9                 db    ? ;
.bss:004060DA                 db    ? ;
.bss:004060DB                 db    ? ;
.bss:004060DC                 db    ? ;
.bss:004060DD                 db    ? ;
.bss:004060DE                 db    ? ;
.bss:004060DF                 db    ? ;
.bss:004060E0                 db    ? ;
.bss:004060E1                 db    ? ;
.bss:004060E2                 db    ? ;
.bss:004060E3                 db    ? ;
.bss:004060E4                 db    ? ;
.bss:004060E5                 db    ? ;
.bss:004060E6                 db    ? ;
.bss:004060E7                 db    ? ;
.bss:004060E8                 db    ? ;
.bss:004060E9                 db    ? ;
.bss:004060EA                 db    ? ;
.bss:004060EB                 db    ? ;
.bss:004060EC                 db    ? ;
.bss:004060ED                 db    ? ;
.bss:004060EE                 db    ? ;
.bss:004060EF                 db    ? ;
.bss:004060F0                 db    ? ;
.bss:004060F1                 db    ? ;
.bss:004060F2                 db    ? ;
.bss:004060F3                 db    ? ;
.bss:004060F4                 db    ? ;
.bss:004060F5                 db    ? ;
.bss:004060F6                 db    ? ;
.bss:004060F7                 db    ? ;
.bss:004060F8                 db    ? ;
.bss:004060F9                 db    ? ;
.bss:004060FA                 db    ? ;
.bss:004060FB                 db    ? ;
.bss:004060FC                 db    ? ;
.bss:004060FD                 db    ? ;
.bss:004060FE                 db    ? ;
.bss:004060FF                 db    ? ;
.bss:00406100                 db    ? ;
.bss:00406101                 db    ? ;
.bss:00406102                 db    ? ;
.bss:00406103                 db    ? ;
.bss:00406104                 db    ? ;
.bss:00406105                 db    ? ;
.bss:00406106                 db    ? ;
.bss:00406107                 db    ? ;
.bss:00406108                 db    ? ;
.bss:00406109                 db    ? ;
.bss:0040610A                 db    ? ;
.bss:0040610B                 db    ? ;
.bss:0040610C                 db    ? ;
.bss:0040610D                 db    ? ;
.bss:0040610E                 db    ? ;
.bss:0040610F                 db    ? ;
.bss:00406110                 db    ? ;
.bss:00406111                 db    ? ;
.bss:00406112                 db    ? ;
.bss:00406113                 db    ? ;
.bss:00406114                 db    ? ;
.bss:00406115                 db    ? ;
.bss:00406116                 db    ? ;
.bss:00406117                 db    ? ;
.bss:00406118                 db    ? ;
.bss:00406119                 db    ? ;
.bss:0040611A                 db    ? ;
.bss:0040611B                 db    ? ;
.bss:0040611C                 db    ? ;
.bss:0040611D                 db    ? ;
.bss:0040611E                 db    ? ;
.bss:0040611F                 db    ? ;
.bss:00406120                 db    ? ;
.bss:00406121                 db    ? ;
.bss:00406122                 db    ? ;
.bss:00406123                 db    ? ;
.bss:00406124                 db    ? ;
.bss:00406125                 db    ? ;
.bss:00406126                 db    ? ;
.bss:00406127                 db    ? ;
.bss:00406128                 db    ? ;
.bss:00406129                 db    ? ;
.bss:0040612A                 db    ? ;
.bss:0040612B                 db    ? ;
.bss:0040612C                 db    ? ;
.bss:0040612D                 db    ? ;
.bss:0040612E                 db    ? ;
.bss:0040612F                 db    ? ;
.bss:00406130                 db    ? ;
.bss:00406131                 db    ? ;
.bss:00406132                 db    ? ;
.bss:00406133                 db    ? ;
.bss:00406134                 db    ? ;
.bss:00406135                 db    ? ;
.bss:00406136                 db    ? ;
.bss:00406137                 db    ? ;
.bss:00406138                 db    ? ;
.bss:00406139                 db    ? ;
.bss:0040613A                 db    ? ;
.bss:0040613B                 db    ? ;
.bss:0040613C                 db    ? ;
.bss:0040613D                 db    ? ;
.bss:0040613E                 db    ? ;
.bss:0040613F                 db    ? ;
.bss:00406140 dword_406140    dd ?                    ; DATA XREF: .text:loc_403821↑o
.bss:00406140                                         ; .text:loc_403840↑o ...
.bss:00406144 dword_406144    dd ?                    ; DATA XREF: .text:loc_4038C0↑o
.bss:00406144                                         ; .text:00403D48↑r ...
.bss:00406148 dword_406148    dd ?                    ; DATA XREF: .text:00403D42↑r
.bss:00406148                                         ; sub_403DF0+2C↑r
.bss:0040614C dword_40614C    dd ?                    ; DATA XREF: .text:00403D36↑r
.bss:0040614C                                         ; sub_403DF0+22↑r
.bss:00406150 dword_406150    dd ?                    ; DATA XREF: .text:00403D52↑r
.bss:00406150                                         ; sub_403DF0+36↑r
.bss:00406154 dword_406154    dd ?                    ; DATA XREF: .text:00403D62↑r
.bss:00406154                                         ; sub_403DF0+4E↑r
.bss:00406158 dword_406158    dd ?                    ; DATA XREF: .text:00403D7F↑r
.bss:00406158                                         ; sub_403DF0+62↑r
.bss:0040615C dword_40615C    dd ?                    ; DATA XREF: .text:00403D75↑r
.bss:0040615C                                         ; sub_403DF0+70↑r
.bss:00406160 dword_406160    dd ?                    ; DATA XREF: .text:00403D58↑r
.bss:00406160                                         ; sub_403DF0+7A↑r
.bss:00406164                 align 10h
.bss:00406170 ; char *Str1
.bss:00406170 Str1            dd ?                    ; DATA XREF: sub_4049E4:loc_404A1D↑w
.bss:00406170                                         ; sub_4049E4:loc_404B50↑r
.bss:00406174                 align 10h
.bss:00406180 dword_406180    dd ?                    ; DATA XREF: sub_4049E4+2D↑r
.bss:00406180                                         ; sub_4049E4+3F↑w
.bss:00406184                 align 10h
.bss:00406190 dword_406190    dd ?                    ; DATA XREF: sub_401380+2F↑w
.bss:00406190                                         ; sub_401380+13E↑r ...
.bss:00406194                 db    ? ;
.bss:00406195                 db    ? ;
.bss:00406196                 db    ? ;
.bss:00406197                 db    ? ;
.bss:00406198                 db    ? ;
.bss:00406199                 db    ? ;
.bss:0040619A                 db    ? ;
.bss:0040619B                 db    ? ;
.bss:0040619C                 db    ? ;
.bss:0040619D                 db    ? ;
.bss:0040619E                 db    ? ;
.bss:0040619F                 db    ? ;
.bss:004061A0                 db    ? ;
.bss:004061A1                 db    ? ;
.bss:004061A2                 db    ? ;
.bss:004061A3                 db    ? ;
.bss:004061A4                 db    ? ;
.bss:004061A5                 db    ? ;
.bss:004061A6                 db    ? ;
.bss:004061A7                 db    ? ;
.bss:004061A8                 db    ? ;
.bss:004061A9                 db    ? ;
.bss:004061AA                 db    ? ;
.bss:004061AB                 db    ? ;
.bss:004061AC                 db    ? ;
.bss:004061AD                 db    ? ;
.bss:004061AE                 db    ? ;
.bss:004061AF                 db    ? ;
.bss:004061B0 dword_4061B0    dd ?                    ; DATA XREF: sub_402560+71↑w
.bss:004061B0                                         ; .text:00402661↑w
.bss:004061B4                 align 10h
.bss:004061C0 dword_4061C0    dd ?                    ; CODE XREF: sub_4049E4+63↑p
.bss:004061C0                                         ; DATA XREF: sub_4048E0+1E↑r ...
.bss:004061C4                 align 10h
.bss:004061D0 dword_4061D0    dd ?                    ; DATA XREF: sub_4048E0+4E↑w
.bss:004061D0                                         ; sub_4049E4+AB↑w
.bss:004061D4                 align 40h
.bss:00406200 dword_406200    dd ?                    ; DATA XREF: sub_4049E4+13↑r
.bss:00406204                 align 1000h
.bss:00406204 _bss            ends
.bss:00406204
.idata:00407000 ; Section 4. (virtual address 00007000)
.idata:00407000 ; Virtual size                  : 000005BC (   1468.)
.idata:00407000 ; Section size in file          : 00000600 (   1536.)
.idata:00407000 ; Offset to raw data for section: 00004600
.idata:00407000 ; Flags C0000040: Data Readable Writable
.idata:00407000 ; Alignment     : default
.idata:00407000 ; ===========================================================================
.idata:00407000
.idata:00407000 ; Segment type: Externs
.idata:00407000 ; _idata
.idata:00407000
.idata:00407001
.idata:00407160 ;
.idata:00407160 ; Imports from libintl3.dll
.idata:00407160 ;
.idata:00407160                 extrn __imp_libintl_bindtextdomain:dword
.idata:00407160                                         ; CODE XREF: sub_401380+49↑p
.idata:00407160                                         ; DATA XREF: sub_401380+49↑r ...
.idata:00407164                 extrn libintl_gettext:dword
.idata:00407164                                         ; CODE XREF: sub_401380+109↑p
.idata:00407164                                         ; sub_401380+132↑p ...
.idata:00407168                 extrn libintl_textdomain:dword
.idata:00407168                                         ; CODE XREF: sub_401380+56↑p
.idata:00407168                                         ; DATA XREF: sub_401380+56↑r ...
.idata:0040716C
.idata:00407174 ;
.idata:00407174 ; Imports from KERNEL32.dll
.idata:00407174 ;
.idata:00407174 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00407174                 extrn __imp_ExitProcess:dword
.idata:00407174                                         ; DATA XREF: ExitProcess↑r
.idata:00407178 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00407178                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00407178                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040717C
.idata:00407184 ;
.idata:00407184 ; Imports from MSVCP60.DLL
.idata:00407184 ;
.idata:00407184 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00407184                 extrn __imp_mbrtowc:dword
.idata:00407184                                         ; DATA XREF: mbrtowc↑r
.idata:00407188
.idata:00407190 ;
.idata:00407190 ; Imports from msvcrt.dll
.idata:00407190 ;
.idata:00407190                 extrn __imp___getmainargs:dword
.idata:00407190                                         ; DATA XREF: __getmainargs↑r
.idata:00407194 ; int _mb_cur_max
.idata:00407194                 extrn __mb_cur_max:dword
.idata:00407194                                         ; DATA XREF: sub_402D50+7↑r
.idata:00407194                                         ; sub_402D50+5F3↑r
.idata:00407198 ; char ***(__cdecl *__p__environ)()
.idata:00407198                 extrn __imp___p__environ:dword
.idata:00407198                                         ; DATA XREF: __p__environ↑r
.idata:0040719C ; int *(__cdecl *__p__fmode)()
.idata:0040719C                 extrn __imp___p__fmode:dword
.idata:0040719C                                         ; DATA XREF: __p__fmode↑r
.idata:004071A0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004071A0                 extrn __set_app_type:dword
.idata:004071A0                                         ; CODE XREF: start+D↑p
.idata:004071A0                                         ; .text:0040102D↑p
.idata:004071A0                                         ; DATA XREF: ...
.idata:004071A4 ; void (__cdecl *_cexit)()
.idata:004071A4                 extrn __imp__cexit:dword
.idata:004071A4                                         ; DATA XREF: _cexit↑r
.idata:004071A8 ; int *(__cdecl *_errno)()
.idata:004071A8                 extrn __imp__errno:dword
.idata:004071A8                                         ; DATA XREF: _errno↑r
.idata:004071AC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004071AC                 extrn __imp__flsbuf:dword
.idata:004071AC                                         ; DATA XREF: _flsbuf↑r
.idata:004071B0 ; FILE iob[]
.idata:004071B0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004071B0                                         ; sub_401080+75↑r ...
.idata:004071B4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004071B4                 extrn __imp__isctype:dword
.idata:004071B4                                         ; DATA XREF: _isctype↑r
.idata:004071B8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004071B8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004071B8                                         ; DATA XREF: .text:0040106C↑r
.idata:004071BC ; const unsigned __int16 *pctype
.idata:004071BC                 extrn _pctype:dword     ; DATA XREF: sub_402D50:loc_403444↑r
.idata:004071C0 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004071C0                 extrn __imp__setmode:dword
.idata:004071C0                                         ; DATA XREF: _setmode↑r
.idata:004071C4 ; void (__cdecl __noreturn *abort)()
.idata:004071C4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004071C8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004071C8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004071C8                                         ; DATA XREF: sub_401040+C↑r
.idata:004071CC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004071CC                 extrn __imp_calloc:dword
.idata:004071CC                                         ; DATA XREF: calloc↑r
.idata:004071D0 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004071D0                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004071D4 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004071D4                 extrn __imp_fclose:dword
.idata:004071D4                                         ; DATA XREF: fclose↑r
.idata:004071D8 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004071D8                 extrn __imp_fflush:dword
.idata:004071D8                                         ; DATA XREF: fflush↑r
.idata:004071DC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004071DC                 extrn __imp_fprintf:dword
.idata:004071DC                                         ; DATA XREF: fprintf↑r
.idata:004071E0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004071E0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004071E4 ; void (__cdecl *free)(void *Block)
.idata:004071E4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004071E8 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004071E8                 extrn __imp_getenv:dword
.idata:004071E8                                         ; DATA XREF: getenv↑r
.idata:004071EC ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004071EC                 extrn __imp_iswctype:dword
.idata:004071EC                                         ; DATA XREF: iswctype↑r
.idata:004071F0 ; void *(__cdecl *malloc)(size_t Size)
.idata:004071F0                 extrn __imp_malloc:dword
.idata:004071F0                                         ; DATA XREF: malloc↑r
.idata:004071F4 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004071F4                 extrn __imp_memcpy:dword
.idata:004071F4                                         ; DATA XREF: memcpy↑r
.idata:004071F8 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004071F8                 extrn __imp_memset:dword
.idata:004071F8                                         ; DATA XREF: memset↑r
.idata:004071FC ; int (*printf)(const char *const Format, ...)
.idata:004071FC                 extrn __imp_printf:dword
.idata:004071FC                                         ; DATA XREF: printf↑r
.idata:00407200 ; int (__cdecl *puts)(const char *Buffer)
.idata:00407200                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:00407204 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00407204                 extrn __imp_realloc:dword
.idata:00407204                                         ; DATA XREF: realloc↑r
.idata:00407208 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00407208                 extrn __imp_setlocale:dword
.idata:00407208                                         ; DATA XREF: setlocale↑r
.idata:0040720C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040720C                 extrn __imp_signal:dword
.idata:0040720C                                         ; DATA XREF: signal↑r
.idata:00407210 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00407210                 extrn __imp_strchr:dword
.idata:00407210                                         ; DATA XREF: strchr↑r
.idata:00407214 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00407214                 extrn __imp_strcmp:dword
.idata:00407214                                         ; DATA XREF: strcmp↑r
.idata:00407218 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00407218                 extrn __imp_strerror:dword
.idata:00407218                                         ; DATA XREF: strerror↑r
.idata:0040721C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040721C                 extrn __imp_strlen:dword
.idata:0040721C                                         ; DATA XREF: strlen↑r
.idata:00407220 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00407220                 extrn __imp_strncmp:dword
.idata:00407220                                         ; DATA XREF: strncmp↑r
.idata:00407224 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00407224                 extrn __imp_vfprintf:dword
.idata:00407224                                         ; DATA XREF: vfprintf↑r
.idata:00407228
.idata:00407230 ;
.idata:00407230 ; Imports from WSOCK32.DLL
.idata:00407230 ;
.idata:00407230 ; int (__stdcall *WSACleanup)()
.idata:00407230                 extrn __imp_WSACleanup:dword
.idata:00407230                                         ; DATA XREF: WSACleanup↑r
.idata:00407234 ; int (__stdcall *WSAStartup)(WORD wVersionRequested, LPWSADATA lpWSAData)
.idata:00407234                 extrn __imp_WSAStartup:dword
.idata:00407234                                         ; DATA XREF: WSAStartup↑r
.idata:00407238 ; int (__stdcall *gethostname)(char *name, int namelen)
.idata:00407238                 extrn __imp_gethostname:dword
.idata:00407238                                         ; DATA XREF: gethostname↑r
.idata:0040723C
.idata:0040723C
.idata:0040723C
.idata:0040723C                 end start
