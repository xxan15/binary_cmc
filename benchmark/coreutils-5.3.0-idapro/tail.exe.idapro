.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 9D62A3482EFE6E11DE2878BA3002546EAE690FE23985E8492C7F6895FB3A2984
.text:00401000 ; Input MD5    : 0536879920AFB39D54C27F517918DB2E
.text:00401000 ; Input CRC32  : EFF40589
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/tail.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A260 (Wed Apr 20 18:41:36 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00013130 (  78128.)
.text:00401000 ; Section size in file          : 00013200 (  78336.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4014E0+96↓p
.text:00401040                                         ; .text:00412B50↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_412AF0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_415000
.text:004010A2                 mov     edx, dword_4150C0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_415004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4150E0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4150E0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_412AC0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_415000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_415004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4014E0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_412AF0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aDescriptor     db 'descriptor',0       ; DATA XREF: .text:off_401290↓o
.text:0040128B aName           db 'name',0             ; DATA XREF: .text:00401294↓o
.text:00401290 off_401290      dd offset aDescriptor   ; DATA XREF: sub_403760+33F↓o
.text:00401290                                         ; "descriptor"
.text:00401294                 dd offset aName         ; "name"
.text:00401298                 dd 0
.text:0040129C dword_40129C    dd 2                    ; DATA XREF: sub_403760+337↓o
.text:0040129C                                         ; sub_403760+35B↓r
.text:004012A0                 dd 1
.text:004012A4 aAllowMissing   db 'allow-missing',0    ; DATA XREF: .text:off_401340↓o
.text:004012B2 aBytes          db 'bytes',0            ; DATA XREF: .text:00401350↓o
.text:004012B8 aFollow_0       db 'follow',0           ; DATA XREF: .text:00401360↓o
.text:004012BF aLines          db 'lines',0            ; DATA XREF: .text:00401370↓o
.text:004012C5 aMaxUnchangedSt db 'max-unchanged-stats',0
.text:004012C5                                         ; DATA XREF: .text:00401380↓o
.text:004012D9 aPid            db 'pid',0              ; DATA XREF: .text:00401390↓o
.text:004012DD aPresumeInputPi db 'presume-input-pipe',0
.text:004012DD                                         ; DATA XREF: .text:004013A0↓o
.text:004012F0 aQuiet          db 'quiet',0            ; DATA XREF: .text:004013B0↓o
.text:004012F6 aRetry          db 'retry',0            ; DATA XREF: .text:004013C0↓o
.text:004012FC aSilent         db 'silent',0           ; DATA XREF: .text:004013D0↓o
.text:00401303 aSleepInterval  db 'sleep-interval',0   ; DATA XREF: .text:004013E0↓o
.text:00401312 aVerbose        db 'verbose',0          ; DATA XREF: .text:004013F0↓o
.text:0040131A aHelp           db 'help',0             ; DATA XREF: .text:00401400↓o
.text:0040131F aVersion        db 'version',0          ; DATA XREF: .text:00401410↓o
.text:00401327                 align 20h
.text:00401340 off_401340      dd offset aAllowMissing ; DATA XREF: sub_403760+28↓o
.text:00401340                                         ; "allow-missing"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 81h
.text:00401350                 dd offset aBytes        ; "bytes"
.text:00401354                 dd 1, 0
.text:0040135C                 dd 63h
.text:00401360                 dd offset aFollow_0     ; "follow"
.text:00401364                 dd 2, 0
.text:0040136C                 dd 85h
.text:00401370                 dd offset aLines        ; "lines"
.text:00401374                 dd 1, 0
.text:0040137C                 dd 6Eh
.text:00401380                 dd offset aMaxUnchangedSt ; "max-unchanged-stats"
.text:00401384                 dd 1, 0
.text:0040138C                 dd 82h
.text:00401390                 dd offset aPid          ; "pid"
.text:00401394                 dd 1, 0
.text:0040139C                 dd 83h
.text:004013A0                 dd offset aPresumeInputPi ; "presume-input-pipe"
.text:004013A4                 dd 2 dup(0)
.text:004013AC                 dd 84h
.text:004013B0                 dd offset aQuiet        ; "quiet"
.text:004013B4                 dd 2 dup(0)
.text:004013BC                 dd 71h
.text:004013C0                 dd offset aRetry        ; "retry"
.text:004013C4                 dd 2 dup(0)
.text:004013CC                 dd 80h
.text:004013D0                 dd offset aSilent       ; "silent"
.text:004013D4                 dd 2 dup(0)
.text:004013DC                 dd 71h
.text:004013E0                 dd offset aSleepInterval ; "sleep-interval"
.text:004013E4                 dd 1, 0
.text:004013EC                 dd 73h
.text:004013F0                 dd offset aVerbose      ; "verbose"
.text:004013F4                 dd 2 dup(0)
.text:004013FC                 dd 76h
.text:00401400                 dd offset aHelp         ; "help"
.text:00401404                 dd 2 dup(0)
.text:0040140C                 dd 0FFFFFF7Eh
.text:00401410                 dd offset aVersion      ; "version"
.text:00401414                 dd 2 dup(0)
.text:0040141C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401430 ; const char byte_401430[]
.text:00401430 byte_401430     db 2Dh, 0               ; DATA XREF: sub_4014E0+16E↓o
.text:00401430                                         ; sub_4014E0+2BE↓o ...
.text:00401432 ; const char Locale
.text:00401432 Locale          db 0                    ; DATA XREF: sub_4014E0+2C↓o
.text:00401432                                         ; sub_402620+3AE↓o ...
.text:00401433                 align 10h
.text:00401440 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401440                                         ; DATA XREF: sub_4014E0+6D↓o
.text:00401463 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4014E0+75↓o
.text:00401463                                         ; sub_4014E0+82↓o
.text:0040146D                 align 20h
.text:00401480 aWarningFollowi db 'warning: following standard input indefinitely is ineffective',0
.text:00401480                                         ; DATA XREF: sub_4014E0+30C↓o
.text:004014BE aCannotFollowSB db 'cannot follow %s by name',0
.text:004014BE                                         ; DATA XREF: sub_4014E0+342↓o
.text:004014D7                 align 10h
.text:004014E0
.text:004014E0 ; =============== S U B R O U T I N E =======================================
.text:004014E0
.text:004014E0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004014E0
.text:004014E0 sub_4014E0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004014E0
.text:004014E0 Category        = dword ptr -0D8h
.text:004014E0 Locale          = dword ptr -0D4h
.text:004014E0 var_D0          = dword ptr -0D0h
.text:004014E0 var_C8          = dword ptr -0C8h
.text:004014E0 var_AA          = byte ptr -0AAh
.text:004014E0 var_A9          = byte ptr -0A9h
.text:004014E0 var_A8          = dword ptr -0A8h
.text:004014E0 var_A4          = dword ptr -0A4h
.text:004014E0 var_9D          = byte ptr -9Dh
.text:004014E0 var_9C          = byte ptr -9Ch
.text:004014E0 var_98          = qword ptr -98h
.text:004014E0 var_90          = dword ptr -90h
.text:004014E0 var_8C          = dword ptr -8Ch
.text:004014E0 var_88          = dword ptr -88h
.text:004014E0 arg_0           = dword ptr  8
.text:004014E0 arg_4           = dword ptr  0Ch
.text:004014E0
.text:004014E0                 push    ebp
.text:004014E1                 xor     eax, eax
.text:004014E3                 mov     ebp, esp
.text:004014E5                 push    edi
.text:004014E6                 push    esi
.text:004014E7                 push    ebx
.text:004014E8                 sub     esp, 0CCh
.text:004014EE                 mov     edi, [ebp+arg_4]
.text:004014F1                 and     esp, 0FFFFFFF0h
.text:004014F4                 mov     esi, [ebp+arg_0]
.text:004014F7                 call    __alloca
.text:004014FC                 call    sub_412B90
.text:00401501                 mov     [ebp+var_9D], 1
.text:00401508                 mov     ebx, [edi]
.text:0040150A                 fld1
.text:0040150C                 mov     [esp+0D8h+Locale], offset Locale ; Locale
.text:00401514                 xor     ecx, ecx
.text:00401516                 mov     edx, 0Ah
.text:0040151B                 mov     dword ptr [ebp+var_9C], ecx
.text:00401521                 xor     eax, eax
.text:00401523                 mov     [ebp+var_90], edx
.text:00401529                 fstp    [ebp+var_98]
.text:0040152F                 mov     ds:dword_416550, ebx
.text:00401535                 lea     ebx, [ebp+var_90]
.text:0040153B                 mov     [ebp+var_8C], eax
.text:00401541                 mov     [esp+0D8h+Category], 0 ; Category
.text:00401548                 call    setlocale
.text:0040154D                 mov     [esp+0D8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401555                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:0040155C                 call    ds:libintl_bindtextdomain
.text:00401562                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:00401569                 call    ds:libintl_textdomain
.text:0040156F                 mov     [esp+0D8h+Category], offset sub_407650 ; void (__cdecl *)()
.text:00401576                 call    sub_401040
.text:0040157B                 mov     [esp+0D8h+Locale], edi
.text:0040157F                 mov     [esp+0D8h+Category], esi
.text:00401582                 mov     ds:byte_416060, 0
.text:00401589                 mov     ds:byte_416010, 1
.text:00401590                 mov     ds:byte_416040, 0
.text:00401597                 mov     ds:byte_416030, 0
.text:0040159E                 mov     ds:byte_416020, 0
.text:004015A5                 mov     [esp+0D8h+var_D0], ebx
.text:004015A9                 call    sub_403270
.text:004015AE                 mov     [esp+0D8h+var_D0], ebx
.text:004015B2                 movzx   ecx, al
.text:004015B5                 lea     edx, [ebp+var_98]
.text:004015BB                 mov     [esp+0D8h+var_C8], edx
.text:004015BF                 sub     esi, ecx
.text:004015C1                 lea     edi, [edi+ecx*4]
.text:004015C4                 mov     [esp+0D8h+Locale], edi
.text:004015C8                 lea     edx, [ebp+var_9C]
.text:004015CE                 mov     [esp+0D8h+var_D0+4], edx ; char
.text:004015D2                 mov     [esp+0D8h+Category], esi
.text:004015D5                 call    sub_403760
.text:004015DA                 cmp     ds:byte_416030, 0
.text:004015E1                 jz      short loc_401610
.text:004015E3                 mov     edx, [ebp+var_8C]
.text:004015E9                 mov     eax, [ebp+var_90]
.text:004015EF                 mov     ebx, edx
.text:004015F1                 or      ebx, eax
.text:004015F3                 jz      short loc_401610
.text:004015F5                 add     eax, 0FFFFFFFFh
.text:004015F8                 adc     edx, 0FFFFFFFFh
.text:004015FB                 mov     [ebp+var_90], eax
.text:00401601                 mov     [ebp+var_8C], edx
.text:00401607                 mov     esi, esi
.text:00401609                 lea     edi, [edi+0]
.text:00401610
.text:00401610 loc_401610:                             ; CODE XREF: sub_4014E0+101↑j
.text:00401610                                         ; sub_4014E0+113↑j
.text:00401610                 mov     eax, dword_415030
.text:00401615                 cmp     eax, esi
.text:00401617                 jge     loc_401852
.text:0040161D                 sub     esi, eax
.text:0040161F                 mov     [ebp+var_A4], esi
.text:00401625                 lea     esi, [edi+eax*4]
.text:00401628                 mov     [ebp+var_A8], esi
.text:0040162E
.text:0040162E loc_40162E:                             ; CODE XREF: sub_4014E0+38F↓j
.text:0040162E                                         ; sub_4014E0+3AD↓j ...
.text:0040162E                 mov     [ebp+var_A9], 0
.text:00401635                 xor     ebx, ebx
.text:00401637                 cmp     ebx, [ebp+var_A4]
.text:0040163D                 jge     short loc_401680
.text:0040163F                 cld
.text:00401640
.text:00401640 loc_401640:                             ; CODE XREF: sub_4014E0+185↓j
.text:00401640                 mov     edi, [ebp+var_A8]
.text:00401646                 mov     ecx, 2
.text:0040164B                 mov     esi, [edi+ebx*4]
.text:0040164E                 mov     edi, offset byte_401430
.text:00401653                 repe cmpsb
.text:00401655                 jnz     short loc_40165E
.text:00401657                 mov     [ebp+var_A9], 1
.text:0040165E
.text:0040165E loc_40165E:                             ; CODE XREF: sub_4014E0+175↑j
.text:0040165E                 inc     ebx
.text:0040165F                 cmp     ebx, [ebp+var_A4]
.text:00401665                 jl      short loc_401640
.text:00401667                 cmp     [ebp+var_A9], 0
.text:0040166E                 jz      short loc_401680
.text:00401670                 cmp     dword_415010, 1
.text:00401677                 jz      loc_401816
.text:0040167D                 lea     esi, [esi+0]
.text:00401680
.text:00401680 loc_401680:                             ; CODE XREF: sub_4014E0+15D↑j
.text:00401680                                         ; sub_4014E0+18E↑j ...
.text:00401680                 cmp     ds:byte_416020, 0
.text:00401687                 jz      short loc_401696
.text:00401689                 cmp     [ebp+var_A9], 0
.text:00401690                 jnz     loc_4017D8
.text:00401696
.text:00401696 loc_401696:                             ; CODE XREF: sub_4014E0+1A7↑j
.text:00401696                                         ; sub_4014E0+306↓j ...
.text:00401696                 mov     [esp+0D8h+Locale], 48h ; 'H'
.text:0040169E                 mov     ebx, [ebp+var_A4]
.text:004016A4                 mov     [esp+0D8h+Category], ebx
.text:004016A7                 xor     ebx, ebx
.text:004016A9                 call    sub_407350
.text:004016AE                 cmp     ebx, [ebp+var_A4]
.text:004016B4                 mov     edi, eax
.text:004016B6                 jge     short loc_4016D7
.text:004016B8                 mov     edx, eax
.text:004016BA                 lea     esi, [esi+0]
.text:004016C0
.text:004016C0 loc_4016C0:                             ; CODE XREF: sub_4014E0+1F5↓j
.text:004016C0                 mov     eax, [ebp+var_A8]
.text:004016C6                 mov     esi, [eax+ebx*4]
.text:004016C9                 inc     ebx
.text:004016CA                 mov     [edx], esi
.text:004016CC                 add     edx, 48h ; 'H'
.text:004016CF                 cmp     ebx, [ebp+var_A4]
.text:004016D5                 jl      short loc_4016C0
.text:004016D7
.text:004016D7 loc_4016D7:                             ; CODE XREF: sub_4014E0+1D6↑j
.text:004016D7                 mov     eax, dword ptr [ebp+var_9C]
.text:004016DD                 cmp     eax, 1
.text:004016E0                 jz      short loc_4016EF
.text:004016E2                 test    eax, eax
.text:004016E4                 jnz     short loc_4016F6
.text:004016E6                 cmp     [ebp+var_A4], 1
.text:004016ED                 jle     short loc_4016F6
.text:004016EF
.text:004016EF loc_4016EF:                             ; CODE XREF: sub_4014E0+200↑j
.text:004016EF                 mov     ds:byte_416040, 1
.text:004016F6
.text:004016F6 loc_4016F6:                             ; CODE XREF: sub_4014E0+204↑j
.text:004016F6                                         ; sub_4014E0+20D↑j
.text:004016F6                 mov     edx, [ebp+var_A4]
.text:004016FC                 test    edx, edx
.text:004016FE                 jle     short loc_401763
.text:00401700                 mov     ebx, [ebp+var_A4]
.text:00401706                 mov     esi, edi
.text:00401708                 nop
.text:00401709                 lea     esi, [esi+0]
.text:00401710
.text:00401710 loc_401710:                             ; CODE XREF: sub_4014E0+281↓j
.text:00401710                 mov     [ebp+var_AA], 0
.text:00401717                 mov     edx, [ebp+var_90]
.text:0040171D                 mov     ecx, [ebp+var_8C]
.text:00401723                 mov     [esp+0D8h+Category], esi
.text:00401726                 mov     [esp+0D8h+Locale], edx
.text:0040172A                 mov     [esp+0D8h+var_D0], ecx
.text:0040172E                 call    sub_402D60
.text:00401733                 test    al, al
.text:00401735                 jz      short loc_401750
.text:00401737                 cmp     [ebp+var_9D], 0
.text:0040173E                 jz      short loc_401750
.text:00401740                 mov     [ebp+var_AA], 1
.text:00401747                 mov     esi, esi
.text:00401749                 lea     edi, [edi+0]
.text:00401750
.text:00401750 loc_401750:                             ; CODE XREF: sub_4014E0+255↑j
.text:00401750                                         ; sub_4014E0+25E↑j
.text:00401750                 movzx   ecx, [ebp+var_AA]
.text:00401757                 add     esi, 48h ; 'H'
.text:0040175A                 dec     ebx
.text:0040175B                 mov     [ebp+var_9D], cl
.text:00401761                 jnz     short loc_401710
.text:00401763
.text:00401763 loc_401763:                             ; CODE XREF: sub_4014E0+21E↑j
.text:00401763                 cmp     ds:byte_416020, 0
.text:0040176A                 jnz     short loc_4017BA
.text:0040176C
.text:0040176C loc_40176C:                             ; CODE XREF: sub_4014E0+2F6↓j
.text:0040176C                 cmp     ds:byte_416060, 0
.text:00401773                 jnz     short loc_401789
.text:00401775
.text:00401775 loc_401775:                             ; CODE XREF: sub_4014E0+2B7↓j
.text:00401775                                         ; sub_4014E0+2D8↓j
.text:00401775                 xor     edx, edx
.text:00401777                 cmp     [ebp+var_9D], 0
.text:0040177E                 setz    dl
.text:00401781                 mov     [esp+0D8h+Category], edx ; Code
.text:00401784                 call    exit
.text:00401789 ; ---------------------------------------------------------------------------
.text:00401789
.text:00401789 loc_401789:                             ; CODE XREF: sub_4014E0+293↑j
.text:00401789                 mov     [esp+0D8h+Category], 0 ; FileHandle
.text:00401790                 call    _close
.text:00401795                 test    eax, eax
.text:00401797                 jns     short loc_401775
.text:00401799                 call    _errno
.text:0040179E                 mov     [esp+0D8h+var_D0], offset byte_401430 ; char *
.text:004017A6                 mov     edi, [eax]
.text:004017A8                 mov     [esp+0D8h+Category], 1 ; Code
.text:004017AF                 mov     [esp+0D8h+Locale], edi ; ErrorMessage
.text:004017B3                 call    sub_40AB80
.text:004017B8                 jmp     short loc_401775
.text:004017BA ; ---------------------------------------------------------------------------
.text:004017BA
.text:004017BA loc_4017BA:                             ; CODE XREF: sub_4014E0+28A↑j
.text:004017BA                 fld     [ebp+var_98]
.text:004017C0                 mov     [esp+0D8h+Category], edi ; int
.text:004017C3                 mov     ebx, [ebp+var_A4]
.text:004017C9                 fstp    qword ptr [esp+0D8h+var_D0] ; double
.text:004017CD                 mov     [esp+0D8h+Locale], ebx ; int
.text:004017D1                 call    sub_402620
.text:004017D6                 jmp     short loc_40176C
.text:004017D8 ; ---------------------------------------------------------------------------
.text:004017D8
.text:004017D8 loc_4017D8:                             ; CODE XREF: sub_4014E0+1B0↑j
.text:004017D8                 mov     [esp+0D8h+Category], 0 ; FileHandle
.text:004017DF                 call    _isatty
.text:004017E4                 test    eax, eax
.text:004017E6                 jz      loc_401696
.text:004017EC                 mov     [esp+0D8h+Category], offset aWarningFollowi ; "warning: following standard input indef"...
.text:004017F3                 call    ds:libintl_gettext
.text:004017F9                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00401801                 mov     [esp+0D8h+Category], 0 ; Code
.text:00401808                 mov     [esp+0D8h+var_D0], eax ; char *
.text:0040180C                 call    sub_40AB80
.text:00401811                 jmp     loc_401696
.text:00401816 ; ---------------------------------------------------------------------------
.text:00401816
.text:00401816 loc_401816:                             ; CODE XREF: sub_4014E0+197↑j
.text:00401816                 mov     [esp+0D8h+Category], offset byte_401430 ; char *
.text:0040181D                 call    sub_4095E0
.text:00401822                 mov     [esp+0D8h+Category], offset aCannotFollowSB ; "cannot follow %s by name"
.text:00401829                 mov     esi, eax
.text:0040182B                 call    ds:libintl_gettext
.text:00401831                 mov     [esp+0D8h+var_D0+4], esi ; char
.text:00401835                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:0040183D                 mov     [esp+0D8h+Category], 1 ; Code
.text:00401844                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00401848                 call    sub_40AB80
.text:0040184D                 jmp     loc_401680
.text:00401852 ; ---------------------------------------------------------------------------
.text:00401852
.text:00401852 loc_401852:                             ; CODE XREF: sub_4014E0+137↑j
.text:00401852                 cmp     ds:byte_416020, 0
.text:00401859                 mov     eax, 1
.text:0040185E                 mov     edi, offset off_415024
.text:00401863                 mov     [ebp+var_A4], eax
.text:00401869                 mov     [ebp+var_A8], edi
.text:0040186F                 jz      loc_40162E
.text:00401875                 mov     [esp+0D8h+Category], 0 ; char *
.text:0040187C                 lea     edx, [ebp+var_88]
.text:00401882                 mov     [esp+0D8h+Locale], edx ; int
.text:00401886                 call    sub_40AE20
.text:0040188B                 test    eax, eax
.text:0040188D                 jnz     loc_40162E
.text:00401893                 mov     ecx, [ebp+var_88]
.text:00401899                 and     ecx, 0F000h
.text:0040189F                 cmp     ecx, 1000h
.text:004018A5                 jnz     loc_40162E
.text:004018AB                 mov     ds:byte_416020, 0
.text:004018B2                 jmp     loc_40162E
.text:004018B2 sub_4014E0      endp
.text:004018B2
.text:004018B2 ; ---------------------------------------------------------------------------
.text:004018B7                 align 10h
.text:004018C0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004018C0                                         ; DATA XREF: sub_402370+C↓o
.text:004018C0                                         ; sub_403270+1CC↓o ...
.text:004018E7                 align 20h
.text:00401900 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:00401900                                         ; DATA XREF: sub_402370:loc_4023B0↓o
.text:00401900                                         ; sub_403760:loc_40389C↓o
.text:00401921                 align 20h
.text:00401940 aPrintTheLastDL db 'Print the last %d lines of each FILE to standard output.',0Ah
.text:00401940                                         ; DATA XREF: sub_402370+5F↓o
.text:00401940                                         ; sub_403760+15B↓o
.text:00401940                 db 'With more than one FILE, precede each with a header giving the fi'
.text:00401940                 db 'le name.',0Ah
.text:00401940                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:00401940                 db 0Ah,0
.text:004019FB                 align 10h
.text:00401A00 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401A00                                         ; DATA XREF: sub_402370+7C↓o
.text:00401A00                                         ; sub_403760+178↓o
.text:00401A00                 db 'ns too.',0Ah,0
.text:00401A4A                 align 20h
.text:00401A60 aRetryKeepTryin db '      --retry              keep trying to open a file even if it '
.text:00401A60                                         ; DATA XREF: sub_402370+9E↓o
.text:00401A60                                         ; sub_403760+19A↓o
.text:00401A60                 db 'is',0Ah
.text:00401A60                 db '                           inaccessible when tail starts or if it'
.text:00401A60                 db ' becomes',0Ah
.text:00401A60                 db '                           inaccessible later; useful when follow'
.text:00401A60                 db 'ing by name,',0Ah
.text:00401A60                 db '                           i.e., with --follow=name',0Ah
.text:00401A60                 db '  -c, --bytes=N            output the last N bytes',0Ah,0
.text:00401BA4                 align 20h
.text:00401BC0 aFFollowNameDes db '  -f, --follow[={name|descriptor}]',0Ah
.text:00401BC0                                         ; DATA XREF: sub_402370+C0↓o
.text:00401BC0                                         ; sub_403760+1BC↓o
.text:00401BC0                 db '                           output appended data as the file grows'
.text:00401BC0                 db ';',0Ah
.text:00401BC0                 db '                           -f, --follow, and --follow=descriptor '
.text:00401BC0                 db 'are',0Ah
.text:00401BC0                 db '                           equivalent',0Ah
.text:00401BC0                 db '  -F                       same as --follow=name --retry',0Ah,0
.text:00401CCB                 align 20h
.text:00401CE0 aNLinesNOutputT db '  -n, --lines=N            output the last N lines, instead of th'
.text:00401CE0                                         ; DATA XREF: sub_402370+E2↓o
.text:00401CE0                                         ; sub_403760+1DE↓o
.text:00401CE0                 db 'e last %d',0Ah
.text:00401CE0                 db '      --max-unchanged-stats=N',0Ah
.text:00401CE0                 db '                           with --follow=name, reopen a FILE whic'
.text:00401CE0                 db 'h has not',0Ah
.text:00401CE0                 db '                           changed size after N (default %d) iter'
.text:00401CE0                 db 'ations',0Ah
.text:00401CE0                 db '                           to see if it has been unlinked or rena'
.text:00401CE0                 db 'med',0Ah
.text:00401CE0                 db '                           (this is the usual case of rotated log'
.text:00401CE0                 db ' files)',0Ah,0
.text:00401E6B                 align 20h
.text:00401E80 aPidPidWithFTer db '      --pid=PID            with -f, terminate after process ID, P'
.text:00401E80                                         ; DATA XREF: sub_402370+107↓o
.text:00401E80                                         ; sub_403760+203↓o
.text:00401E80                 db 'ID dies',0Ah
.text:00401E80                 db '  -q, --quiet, --silent    never output headers giving file names'
.text:00401E80                 db 0Ah
.text:00401E80                 db '  -s, --sleep-interval=S   with -f, sleep for approximately S sec'
.text:00401E80                 db 'onds',0Ah
.text:00401E80                 db '                           (default 1.0) between iterations.',0Ah
.text:00401E80                 db '  -v, --verbose            always output headers giving file name'
.text:00401E80                 db 's',0Ah,0
.text:00401FD2                 align 10h
.text:00401FE0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401FE0                                         ; DATA XREF: sub_402370+129↓o
.text:00401FE0                                         ; sub_403760+225↓o
.text:0040200D                 align 20h
.text:00402020 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00402020                                         ; DATA XREF: sub_402370+14B↓o
.text:00402020                                         ; sub_403760+247↓o
.text:00402056                 align 10h
.text:00402060 aIfTheFirstChar db 0Ah                  ; DATA XREF: sub_402370+16D↓o
.text:00402060                                         ; sub_403760+269↓o
.text:00402060                 db 'If the first character of N (the number of bytes or lines) is a `'
.text:00402060                 db '+',27h,',',0Ah
.text:00402060                 db 'print beginning with the Nth item from the start of each file, ot'
.text:00402060                 db 'herwise,',0Ah
.text:00402060                 db 'print the last N items in the file.  N may have a multiplier suff'
.text:00402060                 db 'ix:',0Ah
.text:00402060                 db 'b 512, k 1024, m 1024*1024.',0Ah
.text:00402060                 db 0Ah,0
.text:00402153                 align 10h
.text:00402160 aWithFollowFTai db 'With --follow (-f), tail defaults to following the file descripto'
.text:00402160                                         ; DATA XREF: sub_402370+18F↓o
.text:00402160                                         ; sub_403760+28B↓o
.text:00402160                 db 'r, which',0Ah
.text:00402160                 db 'means that even if a tail',27h,'ed file is renamed, tail will con'
.text:00402160                 db 'tinue to track',0Ah
.text:00402160                 db 'its end.  ',0
.text:004021FF                 align 10h
.text:00402200 aThisDefaultBeh db 'This default behavior is not desirable when you really want to',0Ah
.text:00402200                                         ; DATA XREF: sub_402370+1B1↓o
.text:00402200                                         ; sub_403760+2AD↓o
.text:00402200                 db 'track the actual name of the file, not the file descriptor (e.g.,'
.text:00402200                 db ' log',0Ah
.text:00402200                 db 'rotation).  Use --follow=name in that case.  That causes tail to '
.text:00402200                 db 'track the',0Ah
.text:00402200                 db 'named file by reopening it periodically to see if it has been rem'
.text:00402200                 db 'oved and',0Ah
.text:00402200                 db 'recreated by some other program.',0Ah,0
.text:0040233C aReportBugsToS  db 0Ah                  ; DATA XREF: sub_402370+1D3↓o
.text:0040233C                                         ; sub_403760+2CF↓o
.text:0040233C                 db 'Report bugs to <%s>.',0Ah,0
.text:00402353 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00402353                                         ; DATA XREF: sub_402370+1E0↓o
.text:00402353                                         ; sub_403760+2DC↓o
.text:00402369                 align 10h
.text:00402370
.text:00402370 ; =============== S U B R O U T I N E =======================================
.text:00402370
.text:00402370 ; Attributes: noreturn
.text:00402370
.text:00402370 ; void __cdecl __noreturn sub_402370(int Code)
.text:00402370 sub_402370      proc near               ; CODE XREF: sub_407330+A↓p
.text:00402370
.text:00402370 Stream          = dword ptr -1Ch
.text:00402370 Format          = dword ptr -18h
.text:00402370 var_14          = dword ptr -14h
.text:00402370 Code            = dword ptr  4
.text:00402370
.text:00402370                 push    ebx
.text:00402371                 sub     esp, 18h
.text:00402374                 mov     ebx, [esp+1Ch+Code]
.text:00402378                 test    ebx, ebx
.text:0040237A                 jz      short loc_4023B0
.text:0040237C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402383                 call    ds:libintl_gettext
.text:00402389                 mov     edx, ds:_iob
.text:0040238F                 mov     ecx, ds:dword_416550
.text:00402395                 add     edx, 40h ; '@'
.text:00402398                 mov     [esp+1Ch+var_14], ecx
.text:0040239C                 mov     [esp+1Ch+Format], eax ; Format
.text:004023A0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004023A3                 call    fprintf
.text:004023A8
.text:004023A8 loc_4023A8:                             ; CODE XREF: sub_402370+1F0↓j
.text:004023A8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004023AB                 call    exit
.text:004023B0 ; ---------------------------------------------------------------------------
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_402370+A↑j
.text:004023B0                 mov     [esp+1Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:004023B7                 call    ds:libintl_gettext
.text:004023BD                 mov     ecx, ds:dword_416550
.text:004023C3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004023C6                 mov     [esp+1Ch+Format], ecx
.text:004023CA                 call    printf
.text:004023CF                 mov     [esp+1Ch+Stream], offset aPrintTheLastDL ; "Print the last %d lines of each FILE to"...
.text:004023D6                 call    ds:libintl_gettext
.text:004023DC                 mov     [esp+1Ch+Format], 0Ah
.text:004023E4                 mov     [esp+1Ch+Stream], eax ; Format
.text:004023E7                 call    printf
.text:004023EC                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004023F3                 call    ds:libintl_gettext
.text:004023F9                 mov     ecx, ds:_iob
.text:004023FF                 add     ecx, 20h ; ' '
.text:00402402                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402406                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402409                 call    fputs
.text:0040240E                 mov     [esp+1Ch+Stream], offset aRetryKeepTryin ; "      --retry              keep trying "...
.text:00402415                 call    ds:libintl_gettext
.text:0040241B                 mov     ecx, ds:_iob
.text:00402421                 add     ecx, 20h ; ' '
.text:00402424                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402428                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040242B                 call    fputs
.text:00402430                 mov     [esp+1Ch+Stream], offset aFFollowNameDes ; "  -f, --follow[={name|descriptor}]\n   "...
.text:00402437                 call    ds:libintl_gettext
.text:0040243D                 mov     ecx, ds:_iob
.text:00402443                 add     ecx, 20h ; ' '
.text:00402446                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040244A                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040244D                 call    fputs
.text:00402452                 mov     [esp+1Ch+Stream], offset aNLinesNOutputT ; "  -n, --lines=N            output the l"...
.text:00402459                 call    ds:libintl_gettext
.text:0040245F                 mov     [esp+1Ch+var_14], 5
.text:00402467                 mov     [esp+1Ch+Format], 0Ah
.text:0040246F                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402472                 call    printf
.text:00402477                 mov     [esp+1Ch+Stream], offset aPidPidWithFTer ; "      --pid=PID            with -f, ter"...
.text:0040247E                 call    ds:libintl_gettext
.text:00402484                 mov     ecx, ds:_iob
.text:0040248A                 add     ecx, 20h ; ' '
.text:0040248D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402491                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402494                 call    fputs
.text:00402499                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004024A0                 call    ds:libintl_gettext
.text:004024A6                 mov     ecx, ds:_iob
.text:004024AC                 add     ecx, 20h ; ' '
.text:004024AF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004024B3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004024B6                 call    fputs
.text:004024BB                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004024C2                 call    ds:libintl_gettext
.text:004024C8                 mov     ecx, ds:_iob
.text:004024CE                 add     ecx, 20h ; ' '
.text:004024D1                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004024D5                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004024D8                 call    fputs
.text:004024DD                 mov     [esp+1Ch+Stream], offset aIfTheFirstChar ; "\nIf the first character of N (the numb"...
.text:004024E4                 call    ds:libintl_gettext
.text:004024EA                 mov     ecx, ds:_iob
.text:004024F0                 add     ecx, 20h ; ' '
.text:004024F3                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004024F7                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004024FA                 call    fputs
.text:004024FF                 mov     [esp+1Ch+Stream], offset aWithFollowFTai ; "With --follow (-f), tail defaults to fo"...
.text:00402506                 call    ds:libintl_gettext
.text:0040250C                 mov     ecx, ds:_iob
.text:00402512                 add     ecx, 20h ; ' '
.text:00402515                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402519                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040251C                 call    fputs
.text:00402521                 mov     [esp+1Ch+Stream], offset aThisDefaultBeh ; "This default behavior is not desirable "...
.text:00402528                 call    ds:libintl_gettext
.text:0040252E                 mov     ecx, ds:_iob
.text:00402534                 add     ecx, 20h ; ' '
.text:00402537                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040253B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040253E                 call    fputs
.text:00402543                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040254A                 call    ds:libintl_gettext
.text:00402550                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402558                 mov     [esp+1Ch+Stream], eax ; Format
.text:0040255B                 call    printf
.text:00402560                 jmp     loc_4023A8
.text:00402560 sub_402370      endp
.text:00402560
.text:00402560 ; ---------------------------------------------------------------------------
.text:00402565 aCannotReadReal db 'cannot read realtime clock',0
.text:00402565                                         ; DATA XREF: sub_402620:loc_402781↓o
.text:00402580 aWriteError     db 'write error',0      ; DATA XREF: sub_402620:loc_4027B8↓o
.text:00402580                                         ; sub_403E50:loc_403F43↓o ...
.text:0040258C aNoFilesRemaini db 'no files remaining',0
.text:0040258C                                         ; DATA XREF: sub_402620:loc_4027E7↓o
.text:0040259F aStandardInput  db 'standard input',0   ; DATA XREF: sub_402620+224↓o
.text:0040259F                                         ; sub_402D60+A1↓o ...
.text:004025AE ; const char Format[]
.text:004025AE Format          db '%s==> %s <==',0Ah,0 ; DATA XREF: sub_402620+3B7↓o
.text:004025AE                                         ; sub_402D60+C0↓o
.text:004025BC asc_4025BC      db 0Ah,0                ; DATA XREF: sub_402620:loc_402A08↓o
.text:004025BC                                         ; sub_402D60:loc_403180↓o
.text:004025BE aSFileTruncated db '%s: file truncated',0
.text:004025BE                                         ; DATA XREF: sub_402620:loc_402A35↓o
.text:004025D1 ; const char aS[]
.text:004025D1 aS              db '%s',0               ; DATA XREF: sub_402620+590↓o
.text:004025D1                                         ; sub_404120+640↓o
.text:004025D4                 align 10h
.text:004025E0 aSCannotChangeN db '%s: cannot change nonblocking mode',0
.text:004025E0                                         ; DATA XREF: sub_402620:loc_402BD7↓o
.text:00402603 aSCannotSeekToO db '%s: cannot seek to offset %s',0
.text:00402603                                         ; DATA XREF: sub_402620+65A↓o
.text:00402603                                         ; sub_404120+69C↓o ...
.text:00402620
.text:00402620 ; =============== S U B R O U T I N E =======================================
.text:00402620
.text:00402620
.text:00402620 ; int __cdecl sub_402620(int, int, double)
.text:00402620 sub_402620      proc near               ; CODE XREF: sub_4014E0+2F1↑p
.text:00402620
.text:00402620 Stream          = dword ptr -10Ch
.text:00402620 var_104         = dword ptr -104h
.text:00402620 Origin          = dword ptr -100h
.text:00402620 var_FC          = dword ptr -0FCh
.text:00402620 var_E0          = dword ptr -0E0h
.text:00402620 var_D4          = dword ptr -0D4h
.text:00402620 var_D0          = dword ptr -0D0h
.text:00402620 var_CC          = dword ptr -0CCh
.text:00402620 FileHandle      = dword ptr -0C8h
.text:00402620 var_C4          = dword ptr -0C4h
.text:00402620 var_BE          = byte ptr -0BEh
.text:00402620 var_BD          = byte ptr -0BDh
.text:00402620 var_BC          = dword ptr -0BCh
.text:00402620 var_B5          = byte ptr -0B5h
.text:00402620 var_B4          = qword ptr -0B4h
.text:00402620 var_AC          = byte ptr -0ACh
.text:00402620 var_8C          = dword ptr -8Ch
.text:00402620 Offset          = qword ptr -5Ch
.text:00402620 var_4C          = dword ptr -4Ch
.text:00402620 var_48          = dword ptr -48h
.text:00402620 arg_0           = dword ptr  4
.text:00402620 arg_4           = dword ptr  8
.text:00402620 arg_8           = qword ptr  0Ch
.text:00402620
.text:00402620                 push    ebp
.text:00402621                 push    edi
.text:00402622                 push    esi
.text:00402623                 push    ebx
.text:00402624                 sub     esp, 0FCh
.text:0040262A                 mov     eax, ds:dword_416050
.text:0040262F                 fld     [esp+10Ch+arg_8]
.text:00402636                 mov     [esp+10Ch+var_B5], 0
.text:0040263B                 test    eax, eax
.text:0040263D                 fstp    [esp+10Ch+var_B4]
.text:00402641                 jnz     short loc_402650
.text:00402643                 cmp     dword_415010, 2
.text:0040264A                 jz      loc_402C31
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_402620+21↑j
.text:00402650                                         ; sub_402620+619↓j ...
.text:00402650                 mov     [esp+10Ch+var_BD], 0
.text:00402655                 mov     edx, [esp+10Ch+arg_4]
.text:0040265C                 dec     edx
.text:0040265D                 mov     [esp+10Ch+var_BC], edx
.text:00402661                 jmp     short loc_402670
.text:00402661 ; ---------------------------------------------------------------------------
.text:00402663                 align 10h
.text:00402670
.text:00402670 loc_402670:                             ; CODE XREF: sub_402620+41↑j
.text:00402670                                         ; sub_402620+10E↓j ...
.text:00402670                 mov     [esp+10Ch+var_BE], 0
.text:00402675                 xor     ebp, ebp
.text:00402677                 cmp     ebp, [esp+10Ch+arg_4]
.text:0040267E                 jge     short loc_4026C2
.text:00402680                 mov     [esp+10Ch+var_D4], 0
.text:00402688                 mov     esi, [esp+10Ch+arg_0]
.text:0040268F                 mov     [esp+10Ch+var_E0], esi
.text:00402693                 lea     esi, [esi+0]
.text:00402699                 lea     edi, [edi+0]
.text:004026A0
.text:004026A0 loc_4026A0:                             ; CODE XREF: sub_402620+A0↓j
.text:004026A0                 mov     esi, [esp+10Ch+var_E0]
.text:004026A4                 cmp     byte ptr [esi+30h], 0
.text:004026A8                 jz      loc_402810
.text:004026AE
.text:004026AE loc_4026AE:                             ; CODE XREF: sub_402620+2FA↓j
.text:004026AE                                         ; sub_402620+499↓j ...
.text:004026AE                 add     [esp+10Ch+var_D4], 48h ; 'H'
.text:004026B3                 inc     ebp
.text:004026B4                 add     [esp+10Ch+var_E0], 48h ; 'H'
.text:004026B9                 cmp     ebp, [esp+10Ch+arg_4]
.text:004026C0                 jl      short loc_4026A0
.text:004026C2
.text:004026C2 loc_4026C2:                             ; CODE XREF: sub_402620+5E↑j
.text:004026C2                 xor     edx, edx
.text:004026C4                 cmp     edx, [esp+10Ch+arg_4]
.text:004026CB                 jge     short loc_4026F3
.text:004026CD                 mov     eax, [esp+10Ch+arg_0]
.text:004026D4                 add     eax, 4
.text:004026D7                 mov     esi, esi
.text:004026D9                 lea     edi, [edi+0]
.text:004026E0
.text:004026E0 loc_4026E0:                             ; CODE XREF: sub_402620+D1↓j
.text:004026E0                 mov     ebp, [eax]
.text:004026E2                 test    ebp, ebp
.text:004026E4                 jns     short loc_402700
.text:004026E6                 inc     edx
.text:004026E7                 add     eax, 48h ; 'H'
.text:004026EA                 cmp     edx, [esp+10Ch+arg_4]
.text:004026F1                 jl      short loc_4026E0
.text:004026F3
.text:004026F3 loc_4026F3:                             ; CODE XREF: sub_402620+AB↑j
.text:004026F3                 cmp     ds:byte_416000, 0
.text:004026FA                 jz      loc_4027E7
.text:00402700
.text:00402700 loc_402700:                             ; CODE XREF: sub_402620+C4↑j
.text:00402700                 cmp     [esp+10Ch+var_BE], 0
.text:00402705                 movzx   eax, [esp+10Ch+var_B5]
.text:0040270A                 jz      short loc_402710
.text:0040270C                 test    eax, eax
.text:0040270E                 jz      short loc_402729
.text:00402710
.text:00402710 loc_402710:                             ; CODE XREF: sub_402620+EA↑j
.text:00402710                 mov     ebx, ds:_iob
.text:00402716                 add     ebx, 20h ; ' '
.text:00402719                 mov     [esp+10Ch+Stream], ebx ; Stream
.text:0040271C                 call    fflush
.text:00402721                 test    eax, eax
.text:00402723                 jnz     loc_4027B8
.text:00402729
.text:00402729 loc_402729:                             ; CODE XREF: sub_402620+EE↑j
.text:00402729                                         ; sub_402620+1C2↓j
.text:00402729                 cmp     [esp+10Ch+var_BE], 0
.text:0040272E                 jnz     loc_402670
.text:00402734                 cmp     [esp+10Ch+var_BD], 0
.text:00402739                 jnz     short loc_4027AD
.text:0040273B                 fld     [esp+10Ch+var_B4]
.text:0040273F                 fstp    qword ptr [esp+10Ch+Stream] ; double
.text:00402742                 call    sub_409230
.text:00402747                 test    eax, eax
.text:00402749                 jnz     short loc_402781
.text:0040274B
.text:0040274B loc_40274B:                             ; CODE XREF: sub_402620+18B↓j
.text:0040274B                 mov     eax, ds:dword_416050
.text:00402750                 xor     ebx, ebx
.text:00402752                 test    eax, eax
.text:00402754                 jnz     short loc_40275F
.text:00402756
.text:00402756 loc_402756:                             ; CODE XREF: sub_402620+151↓j
.text:00402756                                         ; sub_402620+15B↓j ...
.text:00402756                 mov     [esp+10Ch+var_BD], bl
.text:0040275A                 jmp     loc_402670
.text:0040275F ; ---------------------------------------------------------------------------
.text:0040275F
.text:0040275F loc_40275F:                             ; CODE XREF: sub_402620+134↑j
.text:0040275F                 mov     [esp+10Ch+Stream+4], 0 ; int
.text:00402767                 mov     [esp+10Ch+Stream], eax ; DWORD
.text:0040276A                 call    sub_40E1B0
.text:0040276F                 test    eax, eax
.text:00402771                 jz      short loc_402756
.text:00402773                 call    _errno
.text:00402778                 cmp     dword ptr [eax], 1
.text:0040277B                 jz      short loc_402756
.text:0040277D                 mov     bl, 1
.text:0040277F                 jmp     short loc_402756
.text:00402781 ; ---------------------------------------------------------------------------
.text:00402781
.text:00402781 loc_402781:                             ; CODE XREF: sub_402620+129↑j
.text:00402781                 mov     [esp+10Ch+Stream], offset aCannotReadReal ; "cannot read realtime clock"
.text:00402788                 call    ds:libintl_gettext
.text:0040278E                 mov     ebp, eax
.text:00402790                 call    _errno
.text:00402795                 mov     [esp+10Ch+var_104], ebp ; char *
.text:00402799                 mov     edx, [eax]
.text:0040279B                 mov     [esp+10Ch+Stream], 1 ; Code
.text:004027A2                 mov     [esp+10Ch+Stream+4], edx ; ErrorMessage
.text:004027A6                 call    sub_40AB80
.text:004027AB                 jmp     short loc_40274B
.text:004027AD ; ---------------------------------------------------------------------------
.text:004027AD
.text:004027AD loc_4027AD:                             ; CODE XREF: sub_402620+119↑j
.text:004027AD                                         ; sub_402620+1EC↓j
.text:004027AD                 add     esp, 0FCh
.text:004027B3                 pop     ebx
.text:004027B4                 pop     esi
.text:004027B5                 pop     edi
.text:004027B6                 pop     ebp
.text:004027B7                 retn
.text:004027B8 ; ---------------------------------------------------------------------------
.text:004027B8
.text:004027B8 loc_4027B8:                             ; CODE XREF: sub_402620+103↑j
.text:004027B8                 mov     [esp+10Ch+Stream], offset aWriteError ; "write error"
.text:004027BF                 call    ds:libintl_gettext
.text:004027C5                 mov     edi, eax
.text:004027C7                 call    _errno
.text:004027CC                 mov     [esp+10Ch+var_104], edi ; char *
.text:004027D0                 mov     esi, [eax]
.text:004027D2                 mov     [esp+10Ch+Stream], 1 ; Code
.text:004027D9                 mov     [esp+10Ch+Stream+4], esi ; ErrorMessage
.text:004027DD                 call    sub_40AB80
.text:004027E2                 jmp     loc_402729
.text:004027E7 ; ---------------------------------------------------------------------------
.text:004027E7
.text:004027E7 loc_4027E7:                             ; CODE XREF: sub_402620+DA↑j
.text:004027E7                 mov     [esp+10Ch+Stream], offset aNoFilesRemaini ; "no files remaining"
.text:004027EE                 call    ds:libintl_gettext
.text:004027F4                 mov     [esp+10Ch+Stream+4], 0 ; ErrorMessage
.text:004027FC                 mov     [esp+10Ch+Stream], 0 ; Code
.text:00402803                 mov     [esp+10Ch+var_104], eax ; char *
.text:00402807                 call    sub_40AB80
.text:0040280C                 jmp     short loc_4027AD
.text:0040280C ; ---------------------------------------------------------------------------
.text:0040280E                 align 10h
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_402620+88↑j
.text:00402810                 mov     ebx, [esi+4]
.text:00402813                 test    ebx, ebx
.text:00402815                 mov     [esp+10Ch+FileHandle], ebx
.text:00402819                 js      loc_402C0E
.text:0040281F                 cld
.text:00402820                 mov     esi, [esp+10Ch+var_E0]
.text:00402824                 mov     eax, offset byte_401430
.text:00402829                 mov     ecx, 2
.text:0040282E                 mov     edi, eax
.text:00402830                 mov     ebx, [esi]
.text:00402832                 mov     esi, ebx
.text:00402834                 repe cmpsb
.text:00402836                 setnbe  al
.text:00402839                 setb    cl
.text:0040283C                 mov     [esp+10Ch+var_CC], ebx
.text:00402840                 cmp     al, cl
.text:00402842                 jnz     short loc_40284C
.text:00402844                 mov     [esp+10Ch+var_CC], offset aStandardInput ; "standard input"
.text:0040284C
.text:0040284C loc_40284C:                             ; CODE XREF: sub_402620+222↑j
.text:0040284C                 movzx   ebx, [esp+10Ch+var_B5]
.text:00402851                 mov     ecx, [esp+10Ch+var_E0]
.text:00402855                 mov     edi, [esp+10Ch+var_E0]
.text:00402859                 movzx   edx, word ptr [ecx+28h]
.text:0040285D                 cmp     [edi+2Ch], ebx
.text:00402860                 mov     [esp+10Ch+var_C4], edx
.text:00402864                 jz      short loc_4028CC
.text:00402866                 mov     [esp+10Ch+Stream+4], 3
.text:0040286E                 mov     eax, [esp+10Ch+FileHandle]
.text:00402872                 mov     [esp+10Ch+Stream], eax
.text:00402875                 call    sub_40E400
.text:0040287A                 cmp     [esp+10Ch+var_B5], 0
.text:0040287F                 mov     edx, eax
.text:00402881                 jnz     short loc_402886
.text:00402883                 or      eax, 4
.text:00402886
.text:00402886 loc_402886:                             ; CODE XREF: sub_402620+261↑j
.text:00402886                 test    edx, edx
.text:00402888                 js      loc_402BD7
.text:0040288E                 cmp     eax, edx
.text:00402890                 jz      short loc_4028C0
.text:00402892                 mov     [esp+10Ch+var_104], eax
.text:00402896                 mov     esi, [esp+10Ch+FileHandle]
.text:0040289A                 mov     [esp+10Ch+Stream+4], 4
.text:004028A2                 mov     [esp+10Ch+Stream], esi
.text:004028A5                 call    sub_40E400
.text:004028AA                 inc     eax
.text:004028AB                 jz      loc_402BD7
.text:004028B1                 jmp     short loc_4028C0
.text:004028B1 ; ---------------------------------------------------------------------------
.text:004028B3                 align 10h
.text:004028C0
.text:004028C0 loc_4028C0:                             ; CODE XREF: sub_402620+270↑j
.text:004028C0                                         ; sub_402620+291↑j ...
.text:004028C0                 movzx   esi, [esp+10Ch+var_B5]
.text:004028C5                 mov     ecx, [esp+10Ch+var_E0]
.text:004028C9                 mov     [ecx+2Ch], esi
.text:004028CC
.text:004028CC loc_4028CC:                             ; CODE XREF: sub_402620+244↑j
.text:004028CC                 cmp     [esp+10Ch+var_B5], 0
.text:004028D1                 jz      short loc_402920
.text:004028D3
.text:004028D3 loc_4028D3:                             ; CODE XREF: sub_402620+3E3↓j
.text:004028D3                 mov     eax, 0FFFFFFFEh
.text:004028D8                 mov     edx, 0FFFFFFFFh
.text:004028DD
.text:004028DD loc_4028DD:                             ; CODE XREF: sub_402620+3DD↓j
.text:004028DD                 mov     [esp+10Ch+Origin], edx ; int
.text:004028E1                 mov     ecx, [esp+10Ch+FileHandle]
.text:004028E5                 mov     edx, [esp+10Ch+var_CC]
.text:004028E9                 mov     [esp+10Ch+var_104], eax ; int
.text:004028ED                 mov     [esp+10Ch+Stream+4], ecx ; int
.text:004028F1                 mov     [esp+10Ch+Stream], edx ; char *
.text:004028F4                 call    sub_403E50
.text:004028F9                 movzx   ecx, [esp+10Ch+var_BE]
.text:004028FE                 mov     esi, edx
.text:00402900                 or      esi, eax
.text:00402902                 mov     [esp+10Ch+var_BE], 1
.text:00402907                 jnz     short loc_402910
.text:00402909                 test    ecx, ecx
.text:0040290B                 setnz   [esp+10Ch+var_BE]
.text:00402910
.text:00402910 loc_402910:                             ; CODE XREF: sub_402620+2E7↑j
.text:00402910                 mov     edi, [esp+10Ch+var_E0]
.text:00402914                 add     [edi+8], eax
.text:00402917                 adc     [edi+0Ch], edx
.text:0040291A                 jmp     loc_4026AE
.text:0040291A ; ---------------------------------------------------------------------------
.text:0040291F                 align 10h
.text:00402920
.text:00402920 loc_402920:                             ; CODE XREF: sub_402620+2B1↑j
.text:00402920                 mov     ebx, [esp+10Ch+FileHandle]
.text:00402924                 lea     edi, [esp+10Ch+var_8C]
.text:0040292B                 mov     [esp+10Ch+Stream+4], edi ; int
.text:0040292F                 mov     [esp+10Ch+Stream], ebx ; char *
.text:00402932                 call    sub_40AE20
.text:00402937                 test    eax, eax
.text:00402939                 jnz     loc_402B92
.text:0040293F                 mov     edx, [esp+10Ch+var_8C]
.text:00402946                 mov     edi, edx
.text:00402948                 and     edi, 0F000h
.text:0040294E                 mov     [esp+10Ch+var_D0], edx
.text:00402952                 cmp     edi, 8000h
.text:00402958                 jz      loc_402B60
.text:0040295E
.text:0040295E loc_40295E:                             ; CODE XREF: sub_402620+560↓j
.text:0040295E                 mov     eax, [esp+10Ch+var_E0]
.text:00402962                 mov     edx, [esp+10Ch+var_4C]
.text:00402969                 cmp     [eax+10h], edx
.text:0040296C                 jz      loc_402ABE
.text:00402972
.text:00402972 loc_402972:                             ; CODE XREF: sub_402620+56D↓j
.text:00402972                 mov     ecx, [esp+10Ch+var_48]
.text:00402979
.text:00402979 loc_402979:                             ; CODE XREF: sub_402620+4A8↓j
.text:00402979                                         ; sub_402620+4B6↓j
.text:00402979                 and     [esp+10Ch+var_C4], 0F000h
.text:00402981                 mov     edi, [esp+10Ch+var_E0]
.text:00402985                 cmp     [esp+10Ch+var_C4], 8000h
.text:0040298D                 mov     [edi+14h], ecx
.text:00402990                 mov     ecx, [esp+10Ch+var_8C]
.text:00402997                 mov     [edi+10h], edx
.text:0040299A                 mov     dword ptr [edi+38h], 0
.text:004029A1                 mov     [edi+28h], cx
.text:004029A5                 mov     dword ptr [edi+3Ch], 0
.text:004029AC                 jz      short loc_402A0F
.text:004029AE
.text:004029AE loc_4029AE:                             ; CODE XREF: sub_402620+409↓j
.text:004029AE                                         ; sub_402620+40F↓j
.text:004029AE                 cmp     ebp, [esp+10Ch+var_BC]
.text:004029B2                 jz      short loc_4029EE
.text:004029B4                 cmp     ds:byte_416040, 0
.text:004029BB                 jz      short loc_4029EA
.text:004029BD                 cmp     byte_415020, 0
.text:004029C4                 mov     eax, [esp+10Ch+var_CC]
.text:004029C8                 mov     [esp+10Ch+var_104], eax
.text:004029CC                 jz      short loc_402A08
.text:004029CE                 mov     eax, offset Locale
.text:004029D3
.text:004029D3 loc_4029D3:                             ; CODE XREF: sub_402620+3ED↓j
.text:004029D3                 mov     [esp+10Ch+Stream+4], eax
.text:004029D7                 mov     [esp+10Ch+Stream], offset Format ; "%s==> %s <==\n"
.text:004029DE                 call    printf
.text:004029E3                 mov     byte_415020, 0
.text:004029EA
.text:004029EA loc_4029EA:                             ; CODE XREF: sub_402620+39B↑j
.text:004029EA                 mov     [esp+10Ch+var_BC], ebp
.text:004029EE
.text:004029EE loc_4029EE:                             ; CODE XREF: sub_402620+392↑j
.text:004029EE                 cmp     [esp+10Ch+var_B5], 0
.text:004029F3                 mov     eax, 0FFFFFFFFh
.text:004029F8                 mov     edx, 0FFFFFFFFh
.text:004029FD                 jz      loc_4028DD
.text:00402A03                 jmp     loc_4028D3
.text:00402A08 ; ---------------------------------------------------------------------------
.text:00402A08
.text:00402A08 loc_402A08:                             ; CODE XREF: sub_402620+3AC↑j
.text:00402A08                 mov     eax, offset asc_4025BC ; "\n"
.text:00402A0D                 jmp     short loc_4029D3
.text:00402A0F ; ---------------------------------------------------------------------------
.text:00402A0F
.text:00402A0F loc_402A0F:                             ; CODE XREF: sub_402620+38C↑j
.text:00402A0F                 mov     ebx, [esp+10Ch+var_E0]
.text:00402A13                 mov     edx, dword ptr [esp+10Ch+Offset+4]
.text:00402A1A                 mov     ecx, dword ptr [esp+10Ch+Offset]
.text:00402A21                 mov     edi, [ebx+0Ch]
.text:00402A24                 mov     eax, [ebx+8]
.text:00402A27                 cmp     edx, edi
.text:00402A29                 jg      short loc_4029AE
.text:00402A2B                 jl      short loc_402A35
.text:00402A2D                 cmp     ecx, eax
.text:00402A2F                 jnb     loc_4029AE
.text:00402A35
.text:00402A35 loc_402A35:                             ; CODE XREF: sub_402620+40B↑j
.text:00402A35                 mov     [esp+10Ch+Stream], offset aSFileTruncated ; "%s: file truncated"
.text:00402A3C                 call    ds:libintl_gettext
.text:00402A42                 mov     [esp+10Ch+Stream+4], 0 ; ErrorMessage
.text:00402A4A                 mov     edi, [esp+10Ch+var_CC]
.text:00402A4E                 mov     [esp+10Ch+Stream], 0 ; Code
.text:00402A55                 mov     [esp+10Ch+var_104], eax ; char *
.text:00402A59                 mov     [esp+10Ch+Origin], edi ; char
.text:00402A5D                 call    sub_40AB80
.text:00402A62                 mov     [esp+10Ch+var_BC], ebp
.text:00402A66                 mov     ebx, dword ptr [esp+10Ch+Offset]
.text:00402A6D                 mov     esi, dword ptr [esp+10Ch+Offset+4]
.text:00402A74                 mov     [esp+10Ch+Origin], 0 ; Origin
.text:00402A7C                 mov     ecx, [esp+10Ch+FileHandle]
.text:00402A80                 mov     [esp+10Ch+Stream+4], ebx ; Offset
.text:00402A84                 mov     [esp+10Ch+var_104], esi
.text:00402A88                 mov     [esp+10Ch+Stream], ecx ; FileHandle
.text:00402A8B                 call    _lseeki64
.text:00402A90                 test    edx, edx
.text:00402A92                 js      loc_402C66
.text:00402A98                 mov     ebx, dword ptr [esp+10Ch+Offset]
.text:00402A9F                 mov     ecx, dword ptr [esp+10Ch+Offset+4]
.text:00402AA6                 mov     edi, [esp+10Ch+var_D4]
.text:00402AAA                 mov     esi, [esp+10Ch+arg_0]
.text:00402AB1                 mov     [esi+edi+8], ebx
.text:00402AB5                 mov     [esi+edi+0Ch], ecx
.text:00402AB9                 jmp     loc_4026AE
.text:00402ABE ; ---------------------------------------------------------------------------
.text:00402ABE
.text:00402ABE loc_402ABE:                             ; CODE XREF: sub_402620+34C↑j
.text:00402ABE                 mov     ecx, [esp+10Ch+var_48]
.text:00402AC5                 cmp     [eax+14h], ecx
.text:00402AC8                 jnz     loc_402979
.text:00402ACE                 movzx   edi, word ptr [eax+28h]
.text:00402AD2                 cmp     edi, [esp+10Ch+var_D0]
.text:00402AD6                 jnz     loc_402979
.text:00402ADC                 mov     eax, [esp+10Ch+var_E0]
.text:00402AE0                 mov     ebx, [esp+10Ch+var_E0]
.text:00402AE4                 mov     ecx, [eax+38h]
.text:00402AE7                 mov     edi, [eax+3Ch]
.text:00402AEA                 mov     eax, dword_415018
.text:00402AEF                 mov     edx, ecx
.text:00402AF1                 add     edx, 1
.text:00402AF4                 mov     esi, edi
.text:00402AF6                 adc     esi, 0
.text:00402AF9                 mov     [ebx+3Ch], esi
.text:00402AFC                 mov     esi, dword_41501C
.text:00402B02                 mov     [ebx+38h], edx
.text:00402B05                 cmp     edi, esi
.text:00402B07                 jb      loc_4026AE
.text:00402B0D                 ja      short loc_402B17
.text:00402B0F                 cmp     ecx, eax
.text:00402B11                 jb      loc_4026AE
.text:00402B17
.text:00402B17 loc_402B17:                             ; CODE XREF: sub_402620+4ED↑j
.text:00402B17                 cmp     dword_415010, 1
.text:00402B1E                 jnz     loc_4026AE
.text:00402B24                 mov     [esp+10Ch+Stream+4], 0
.text:00402B2C                 mov     esi, [esp+10Ch+arg_0]
.text:00402B33                 xor     ebx, ebx
.text:00402B35                 mov     eax, [esp+10Ch+var_D4]
.text:00402B39                 xor     edi, edi
.text:00402B3B                 add     esi, eax
.text:00402B3D                 mov     [esp+10Ch+Stream], esi
.text:00402B40                 call    sub_404120
.text:00402B45                 mov     edx, [esp+10Ch+var_D4]
.text:00402B49                 mov     ecx, [esp+10Ch+arg_0]
.text:00402B50                 mov     [ecx+edx+38h], ebx
.text:00402B54                 mov     [ecx+edx+3Ch], edi
.text:00402B58                 jmp     loc_4026AE
.text:00402B58 ; ---------------------------------------------------------------------------
.text:00402B5D                 align 10h
.text:00402B60
.text:00402B60 loc_402B60:                             ; CODE XREF: sub_402620+338↑j
.text:00402B60                 mov     ebx, [esp+10Ch+var_E0]
.text:00402B64                 mov     edi, dword ptr [esp+10Ch+Offset]
.text:00402B6B                 mov     ecx, dword ptr [esp+10Ch+Offset+4]
.text:00402B72                 mov     edx, [ebx+0Ch]
.text:00402B75                 mov     esi, [ebx+8]
.text:00402B78                 mov     eax, edx
.text:00402B7A                 xor     eax, ecx
.text:00402B7C                 xor     edi, esi
.text:00402B7E                 or      eax, edi
.text:00402B80                 jz      loc_40295E
.text:00402B86                 mov     edx, [esp+10Ch+var_4C]
.text:00402B8D                 jmp     loc_402972
.text:00402B92 ; ---------------------------------------------------------------------------
.text:00402B92
.text:00402B92 loc_402B92:                             ; CODE XREF: sub_402620+319↑j
.text:00402B92                 mov     eax, [esp+10Ch+var_E0]
.text:00402B96                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text:00402B9D                 call    _errno
.text:00402BA2                 mov     ebx, [eax]
.text:00402BA4                 mov     esi, [esp+10Ch+var_E0]
.text:00402BA8                 mov     [esi+44h], ebx
.text:00402BAB                 call    _errno
.text:00402BB0                 mov     [esp+10Ch+var_104], offset aS ; "%s"
.text:00402BB8                 mov     ecx, [esp+10Ch+var_CC]
.text:00402BBC                 mov     [esp+10Ch+Origin], ecx ; char
.text:00402BC0                 mov     edx, [eax]
.text:00402BC2                 mov     [esp+10Ch+Stream], 0 ; Code
.text:00402BC9                 mov     [esp+10Ch+Stream+4], edx ; ErrorMessage
.text:00402BCD                 call    sub_40AB80
.text:00402BD2                 jmp     loc_4026AE
.text:00402BD7 ; ---------------------------------------------------------------------------
.text:00402BD7
.text:00402BD7 loc_402BD7:                             ; CODE XREF: sub_402620+268↑j
.text:00402BD7                                         ; sub_402620+28B↑j
.text:00402BD7                 mov     [esp+10Ch+Stream], offset aSCannotChangeN ; "%s: cannot change nonblocking mode"
.text:00402BDE                 call    ds:libintl_gettext
.text:00402BE4                 mov     edi, eax
.text:00402BE6                 call    _errno
.text:00402BEB                 mov     [esp+10Ch+var_104], edi ; char *
.text:00402BEF                 mov     edx, [esp+10Ch+var_CC]
.text:00402BF3                 mov     [esp+10Ch+Origin], edx ; char
.text:00402BF7                 mov     ebx, [eax]
.text:00402BF9                 mov     [esp+10Ch+Stream], 1 ; Code
.text:00402C00                 mov     [esp+10Ch+Stream+4], ebx ; ErrorMessage
.text:00402C04                 call    sub_40AB80
.text:00402C09                 jmp     loc_4028C0
.text:00402C0E ; ---------------------------------------------------------------------------
.text:00402C0E
.text:00402C0E loc_402C0E:                             ; CODE XREF: sub_402620+1F9↑j
.text:00402C0E                 movzx   edx, [esp+10Ch+var_B5]
.text:00402C13                 mov     edi, [esp+10Ch+arg_0]
.text:00402C1A                 mov     ecx, [esp+10Ch+var_D4]
.text:00402C1E                 mov     [esp+10Ch+Stream+4], edx
.text:00402C22                 add     edi, ecx
.text:00402C24                 mov     [esp+10Ch+Stream], edi
.text:00402C27                 call    sub_404120
.text:00402C2C                 jmp     loc_4026AE
.text:00402C31 ; ---------------------------------------------------------------------------
.text:00402C31
.text:00402C31 loc_402C31:                             ; CODE XREF: sub_402620+2A↑j
.text:00402C31                 cmp     [esp+10Ch+arg_4], 1
.text:00402C39                 jnz     loc_402650
.text:00402C3F                 mov     eax, [esp+10Ch+arg_0]
.text:00402C46                 movzx   ecx, word ptr [eax+28h]
.text:00402C4A                 and     ecx, 0F000h
.text:00402C50                 cmp     ecx, 8000h
.text:00402C56                 jz      loc_402650
.text:00402C5C                 mov     [esp+10Ch+var_B5], 1
.text:00402C61                 jmp     loc_402650
.text:00402C66 ; ---------------------------------------------------------------------------
.text:00402C66
.text:00402C66 loc_402C66:                             ; CODE XREF: sub_402620+472↑j
.text:00402C66                 mov     [esp+10Ch+Stream], ebx
.text:00402C69                 lea     edx, [esp+10Ch+var_AC]
.text:00402C6D                 mov     [esp+10Ch+var_104], edx
.text:00402C71                 mov     [esp+10Ch+Stream+4], esi
.text:00402C75                 call    sub_4094F0
.text:00402C7A                 mov     [esp+10Ch+Stream], offset aSCannotSeekToO ; "%s: cannot seek to offset %s"
.text:00402C81                 mov     ebx, eax
.text:00402C83                 call    ds:libintl_gettext
.text:00402C89                 mov     ebp, eax
.text:00402C8B                 call    _errno
.text:00402C90                 mov     [esp+10Ch+var_FC], ebx
.text:00402C94                 mov     [esp+10Ch+Origin], edi ; char
.text:00402C98                 mov     [esp+10Ch+var_104], ebp ; char *
.text:00402C9C                 mov     ebp, [eax]
.text:00402C9E                 mov     [esp+10Ch+Stream], 0 ; Code
.text:00402CA5                 mov     [esp+10Ch+Stream+4], ebp ; ErrorMessage
.text:00402CA9                 call    sub_40AB80
.text:00402CAE                 mov     [esp+10Ch+Stream], 1 ; Code
.text:00402CB5                 call    exit
.text:00402CB5 sub_402620      endp
.text:00402CB5
.text:00402CB5 ; ---------------------------------------------------------------------------
.text:00402CBA aErrorReadingS  db 'error reading %s',0 ; DATA XREF: sub_402D60+1A1↓o
.text:00402CBA                                         ; sub_402D60+3B4↓o ...
.text:00402CCB                 align 20h
.text:00402CE0
.text:00402CE0 ; =============== S U B R O U T I N E =======================================
.text:00402CE0
.text:00402CE0
.text:00402CE0 sub_402CE0      proc near               ; DATA XREF: sub_402D60:loc_402FAD↓o
.text:00402CE0                 and     eax, 63203A73h
.text:00402CE5                 popa
.text:00402CE6                 outsb
.text:00402CE7                 outsb
.text:00402CE8                 outsd
.text:00402CE9                 jz      short near ptr loc_402D09+2
.text:00402CEB                 outsw
.text:00402CED                 insb
.text:00402CEE                 insb
.text:00402CEF                 outsd
.text:00402CF0                 ja      short near ptr loc_402D0C+6
.text:00402CF2                 outs    dx, byte ptr gs:[esi]
.text:00402CF4                 and     fs:[edi+66h], ch
.text:00402CF8                 and     [eax+ebp*2+69h], dh
.text:00402CFC                 jnb     short loc_402D1E
.text:00402CFE                 jz      short near ptr loc_402D77+2
.text:00402D00                 jo      short loc_402D67
.text:00402D02                 and     [edi+66h], ch
.text:00402D05                 and     [esi+69h], ah
.text:00402D08                 insb
.text:00402D09
.text:00402D09 loc_402D09:                             ; CODE XREF: sub_402CE0+9↑j
.text:00402D09                 cmp     esp, gs:[eax]
.text:00402D0C
.text:00402D0C loc_402D0C:                             ; CODE XREF: sub_402CE0+10↑j
.text:00402D0C                 imul    esi, [bp+69h], 7520676Eh
.text:00402D14                 jo      short loc_402D36
.text:00402D16                 outsd
.text:00402D17                 outsb
.text:00402D18                 and     [eax+ebp*2+69h], dh
.text:00402D1C                 jnb     short loc_402D3E
.text:00402D1E
.text:00402D1E loc_402D1E:                             ; CODE XREF: sub_402CE0+1C↑j
.text:00402D1E                 outsb
.text:00402D1F                 popa
.text:00402D20                 insd
.text:00402D21                 add     gs:[ebx+6Ch], ah
.text:00402D25                 outsd
.text:00402D26                 jnb     short loc_402D91
.text:00402D28                 outsb
.text:00402D29                 and     [di], ah
.text:00402D2C                 jnb     short near ptr loc_402D4C+2
.text:00402D2E                 sub     [esi+64h], ah
.text:00402D31                 cmp     eax, 296425h
.text:00402D36
.text:00402D36 loc_402D36:                             ; CODE XREF: sub_402CE0+34↑j
.text:00402D36                                         ; DATA XREF: sub_402D60+464↓o
.text:00402D36                 arpl    [ecx+6Eh], sp
.text:00402D39                 outsb
.text:00402D3A                 outsd
.text:00402D3B                 jz      short loc_402D5D
.text:00402D3D                 outsd
.text:00402D3E
.text:00402D3E loc_402D3E:                             ; CODE XREF: sub_402CE0+3C↑j
.text:00402D3E                 jo      short near ptr loc_402DA3+2
.text:00402D40                 outsb
.text:00402D41                 and     ds:6F662073h, ah
.text:00402D47                 jb      short loc_402D69
.text:00402D49                 jb      short loc_402DB0
.text:00402D4B                 popa
.text:00402D4C
.text:00402D4C loc_402D4C:                             ; CODE XREF: sub_402CE0+4C↑j
.text:00402D4C                 imul    ebp, fs:[esi+67h], 900DEB00h
.text:00402D54                 nop
.text:00402D55                 nop
.text:00402D56                 nop
.text:00402D57                 nop
.text:00402D58                 nop
.text:00402D59                 nop
.text:00402D5A                 nop
.text:00402D5B                 nop
.text:00402D5C                 nop
.text:00402D5D
.text:00402D5D loc_402D5D:                             ; CODE XREF: sub_402CE0+5B↑j
.text:00402D5D                 nop
.text:00402D5E                 nop
.text:00402D5F                 nop
.text:00402D5F sub_402CE0      endp ; sp-analysis failed
.text:00402D5F
.text:00402D60
.text:00402D60 ; =============== S U B R O U T I N E =======================================
.text:00402D60
.text:00402D60
.text:00402D60 sub_402D60      proc near               ; CODE XREF: sub_4014E0+24E↑p
.text:00402D60
.text:00402D60 Format          = dword ptr -0DCh
.text:00402D60 ErrorMessage    = dword ptr -0D8h
.text:00402D60 var_D4          = dword ptr -0D4h
.text:00402D60 var_D0          = byte ptr -0D0h
.text:00402D60 var_CC          = dword ptr -0CCh
.text:00402D60 var_B0          = byte ptr -0B0h
.text:00402D60 var_A2          = byte ptr -0A2h
.text:00402D60 var_A1          = byte ptr -0A1h
.text:00402D60 FileHandle      = dword ptr -0A0h
.text:00402D60 Offset          = qword ptr -9Ch
.text:00402D60 var_94          = dword ptr -94h
.text:00402D60 var_90          = dword ptr -90h
.text:00402D60 var_8C          = dword ptr -8Ch
.text:00402D60 arg_0           = dword ptr  4
.text:00402D60 arg_4           = dword ptr  8
.text:00402D60 arg_8           = dword ptr  0Ch
.text:00402D60
.text:00402D60                 push    ebp
.text:00402D61                 push    edi
.text:00402D62                 mov     edi, offset byte_401430
.text:00402D67
.text:00402D67 loc_402D67:                             ; CODE XREF: sub_402CE0+20↑j
.text:00402D67                 push    esi
.text:00402D68                 push    ebx
.text:00402D69
.text:00402D69 loc_402D69:                             ; CODE XREF: sub_402CE0+67↑j
.text:00402D69                 sub     esp, 0CCh
.text:00402D6F                 mov     ebp, [esp+0DCh+arg_0]
.text:00402D76                 cld
.text:00402D77
.text:00402D77 loc_402D77:                             ; CODE XREF: sub_402CE0+1E↑j
.text:00402D77                 mov     ecx, [esp+0DCh+arg_8]
.text:00402D7E                 mov     edx, [esp+0DCh+arg_4]
.text:00402D85                 mov     ebx, [ebp+0]
.text:00402D88                 mov     dword ptr [esp+0DCh+Offset+4], ecx
.text:00402D8C                 mov     ecx, 2
.text:00402D91
.text:00402D91 loc_402D91:                             ; CODE XREF: sub_402CE0+46↑j
.text:00402D91                 mov     esi, ebx
.text:00402D93                 mov     dword ptr [esp+0DCh+Offset], edx
.text:00402D97                 repe cmpsb
.text:00402D99                 setz    [esp+0DCh+var_A2]
.text:00402D9E                 cmp     [esp+0DCh+var_A2], 0
.text:00402DA3
.text:00402DA3 loc_402DA3:                             ; CODE XREF: sub_402CE0:loc_402D3E↑j
.text:00402DA3                 jz      loc_403203
.text:00402DA9                 mov     ds:byte_416060, 1
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_402CE0+69↑j
.text:00402DB0                 mov     [esp+0DCh+FileHandle], 0
.text:00402DB8
.text:00402DB8 loc_402DB8:                             ; CODE XREF: sub_402D60+4B7↓j
.text:00402DB8                 xor     eax, eax
.text:00402DBA                 cmp     ds:byte_416000, 0
.text:00402DC1                 jz      short loc_402DCA
.text:00402DC3                 cmp     [esp+0DCh+FileHandle], 0FFFFFFFFh
.text:00402DC8                 jz      short loc_402DCC
.text:00402DCA
.text:00402DCA loc_402DCA:                             ; CODE XREF: sub_402D60+61↑j
.text:00402DCA                 mov     al, 1
.text:00402DCC
.text:00402DCC loc_402DCC:                             ; CODE XREF: sub_402D60+68↑j
.text:00402DCC                 cmp     [esp+0DCh+FileHandle], 0FFFFFFFFh
.text:00402DD1                 mov     [ebp+40h], al
.text:00402DD4                 jz      loc_403190
.text:00402DDA                 cmp     ds:byte_416040, 0
.text:00402DE1                 jz      short loc_402E33
.text:00402DE3                 cld
.text:00402DE4                 mov     edx, [ebp+0]
.text:00402DE7                 mov     ecx, 2
.text:00402DEC                 mov     edi, offset byte_401430
.text:00402DF1                 mov     esi, edx
.text:00402DF3                 repe cmpsb
.text:00402DF5                 setnbe  al
.text:00402DF8                 mov     esi, edx
.text:00402DFA                 setb    cl
.text:00402DFD                 cmp     al, cl
.text:00402DFF                 jnz     short loc_402E06
.text:00402E01                 mov     esi, offset aStandardInput ; "standard input"
.text:00402E06
.text:00402E06 loc_402E06:                             ; CODE XREF: sub_402D60+9F↑j
.text:00402E06                 cmp     byte_415020, 0
.text:00402E0D                 mov     [esp+0DCh+var_D4], esi
.text:00402E11                 jz      loc_403180
.text:00402E17                 mov     eax, offset Locale
.text:00402E1C
.text:00402E1C loc_402E1C:                             ; CODE XREF: sub_402D60+425↓j
.text:00402E1C                 mov     [esp+0DCh+ErrorMessage], eax
.text:00402E20                 mov     [esp+0DCh+Format], offset Format ; "%s==> %s <==\n"
.text:00402E27                 call    printf
.text:00402E2C                 mov     byte_415020, 0
.text:00402E33
.text:00402E33 loc_402E33:                             ; CODE XREF: sub_402D60+81↑j
.text:00402E33                 cld
.text:00402E34                 mov     edx, [ebp+0]
.text:00402E37                 mov     ecx, 2
.text:00402E3C                 mov     edi, offset byte_401430
.text:00402E41                 mov     esi, edx
.text:00402E43                 repe cmpsb
.text:00402E45                 setnbe  al
.text:00402E48                 mov     esi, edx
.text:00402E4A                 setb    cl
.text:00402E4D                 cmp     al, cl
.text:00402E4F                 jnz     short loc_402E56
.text:00402E51                 mov     esi, offset aStandardInput ; "standard input"
.text:00402E56
.text:00402E56 loc_402E56:                             ; CODE XREF: sub_402D60+EF↑j
.text:00402E56                 cmp     ds:byte_416010, 0
.text:00402E5D                 lea     eax, [esp+0DCh+var_94]
.text:00402E61                 mov     [esp+0DCh+var_94], 0
.text:00402E69                 mov     [esp+0DCh+var_90], 0
.text:00402E71                 jz      loc_403150
.text:00402E77                 mov     [esp+0DCh+var_CC], eax ; int
.text:00402E7B                 mov     ecx, dword ptr [esp+0DCh+Offset]
.text:00402E7F                 mov     edi, dword ptr [esp+0DCh+Offset+4]
.text:00402E83                 mov     [esp+0DCh+Format], esi ; char *
.text:00402E86                 mov     ebx, [esp+0DCh+FileHandle]
.text:00402E8A                 mov     [esp+0DCh+var_D4], ecx ; int
.text:00402E8E                 mov     dword ptr [esp+0DCh+var_D0], edi ; int
.text:00402E92                 mov     [esp+0DCh+ErrorMessage], ebx ; char *
.text:00402E96                 call    sub_404DA0
.text:00402E9B
.text:00402E9B loc_402E9B:                             ; CODE XREF: sub_402D60+414↓j
.text:00402E9B                 cmp     ds:byte_416020, 0
.text:00402EA2                 movzx   eax, al
.text:00402EA5                 mov     [esp+0DCh+var_A1], al
.text:00402EA9                 jnz     loc_402F43
.text:00402EAF                 cmp     [esp+0DCh+var_A2], 0
.text:00402EB4                 jz      short loc_402EC6
.text:00402EB6
.text:00402EB6 loc_402EB6:                             ; CODE XREF: sub_402D60+174↓j
.text:00402EB6                                         ; sub_402D60+1DE↓j ...
.text:00402EB6                 movzx   eax, [esp+0DCh+var_A1]
.text:00402EBB                 add     esp, 0CCh
.text:00402EC1                 pop     ebx
.text:00402EC2                 pop     esi
.text:00402EC3                 pop     edi
.text:00402EC4                 pop     ebp
.text:00402EC5                 retn
.text:00402EC6 ; ---------------------------------------------------------------------------
.text:00402EC6
.text:00402EC6 loc_402EC6:                             ; CODE XREF: sub_402D60+154↑j
.text:00402EC6                 mov     ebx, [esp+0DCh+FileHandle]
.text:00402ECA                 mov     [esp+0DCh+Format], ebx ; FileHandle
.text:00402ECD                 call    _close
.text:00402ED2                 test    eax, eax
.text:00402ED4                 jz      short loc_402EB6
.text:00402ED6                 cld
.text:00402ED7                 mov     edx, [ebp+0]
.text:00402EDA                 mov     ecx, 2
.text:00402EDF                 mov     edi, offset byte_401430
.text:00402EE4                 mov     esi, edx
.text:00402EE6                 repe cmpsb
.text:00402EE8                 setnbe  al
.text:00402EEB                 mov     esi, edx
.text:00402EED                 setb    cl
.text:00402EF0                 cmp     al, cl
.text:00402EF2                 jnz     short loc_402EF9
.text:00402EF4                 mov     esi, offset aStandardInput ; "standard input"
.text:00402EF9
.text:00402EF9 loc_402EF9:                             ; CODE XREF: sub_402D60+192↑j
.text:00402EF9                 mov     [esp+0DCh+Format], esi ; char *
.text:00402EFC                 call    sub_4095E0
.text:00402F01                 mov     [esp+0DCh+Format], offset aErrorReadingS ; "error reading %s"
.text:00402F08                 nop
.text:00402F09                 lea     esi, [esi+0]
.text:00402F10
.text:00402F10 loc_402F10:                             ; CODE XREF: sub_402D60+46B↓j
.text:00402F10                 mov     esi, eax
.text:00402F12                 call    ds:libintl_gettext
.text:00402F18                 mov     edi, eax
.text:00402F1A                 call    _errno
.text:00402F1F                 mov     dword ptr [esp+0DCh+var_D0], esi ; char
.text:00402F23                 mov     [esp+0DCh+var_D4], edi ; char *
.text:00402F27                 mov     ebp, [eax]
.text:00402F29                 mov     [esp+0DCh+Format], 0 ; Code
.text:00402F30                 mov     [esp+0DCh+ErrorMessage], ebp ; ErrorMessage
.text:00402F34                 call    sub_40AB80
.text:00402F39                 mov     [esp+0DCh+var_A1], 0
.text:00402F3E                 jmp     loc_402EB6
.text:00402F43 ; ---------------------------------------------------------------------------
.text:00402F43
.text:00402F43 loc_402F43:                             ; CODE XREF: sub_402D60+149↑j
.text:00402F43                 movzx   esi, al
.text:00402F46                 mov     edi, [esp+0DCh+FileHandle]
.text:00402F4A                 lea     ebx, [esp+0DCh+var_8C]
.text:00402F4E                 dec     esi
.text:00402F4F                 mov     [ebp+44h], esi
.text:00402F52                 mov     [esp+0DCh+ErrorMessage], ebx ; int
.text:00402F56                 mov     [esp+0DCh+Format], edi ; char *
.text:00402F59                 call    sub_40AE20
.text:00402F5E                 test    eax, eax
.text:00402F60                 js      loc_4030DA
.text:00402F66                 mov     eax, [esp+0DCh+var_8C]
.text:00402F6A                 and     eax, 0F000h
.text:00402F6F                 cmp     eax, 8000h
.text:00402F74                 jz      short loc_402FE6
.text:00402F76                 cmp     eax, 1000h
.text:00402F7B                 jz      short loc_402FE6
.text:00402F7D                 cmp     eax, 2000h
.text:00402F82                 jz      short loc_402FE6
.text:00402F84                 cld
.text:00402F85                 mov     edx, [ebp+0]
.text:00402F88                 mov     ecx, 2
.text:00402F8D                 mov     edi, offset byte_401430
.text:00402F92                 mov     esi, edx
.text:00402F94                 mov     dword ptr [esp+0DCh+var_B0], edx
.text:00402F98                 repe cmpsb
.text:00402F9A                 setnbe  al
.text:00402F9D                 mov     esi, dword ptr [esp+0DCh+var_B0]
.text:00402FA1                 setb    cl
.text:00402FA4                 cmp     al, cl
.text:00402FA6                 jnz     short loc_402FAD
.text:00402FA8                 mov     esi, offset aStandardInput ; "standard input"
.text:00402FAD
.text:00402FAD loc_402FAD:                             ; CODE XREF: sub_402D60+246↑j
.text:00402FAD                 mov     [esp+0DCh+Format], offset sub_402CE0
.text:00402FB4                 call    ds:libintl_gettext
.text:00402FBA                 mov     dword ptr [esp+0DCh+var_D0], esi ; char
.text:00402FBE                 mov     [esp+0DCh+ErrorMessage], 0 ; ErrorMessage
.text:00402FC6                 mov     [esp+0DCh+Format], 0 ; Code
.text:00402FCD                 mov     [esp+0DCh+var_D4], eax ; char *
.text:00402FD1                 call    sub_40AB80
.text:00402FD6                 mov     [esp+0DCh+var_A1], 0
.text:00402FDB                 mov     dword ptr [ebp+44h], 0FFFFFFFFh
.text:00402FE2                 mov     byte ptr [ebp+30h], 1
.text:00402FE6
.text:00402FE6 loc_402FE6:                             ; CODE XREF: sub_402D60+214↑j
.text:00402FE6                                         ; sub_402D60+21B↑j ...
.text:00402FE6                 cmp     [esp+0DCh+var_A1], 0
.text:00402FEB                 jnz     loc_403072
.text:00402FF1
.text:00402FF1 loc_402FF1:                             ; CODE XREF: sub_402D60+3E4↓j
.text:00402FF1                 cld
.text:00402FF2                 mov     edx, [ebp+0]
.text:00402FF5                 mov     ecx, 2
.text:00402FFA                 mov     edi, offset byte_401430
.text:00402FFF                 mov     esi, edx
.text:00403001                 repe cmpsb
.text:00403003                 setnbe  al
.text:00403006                 mov     esi, edx
.text:00403008                 setb    cl
.text:0040300B                 cmp     al, cl
.text:0040300D                 jnz     short loc_403014
.text:0040300F                 mov     esi, offset aStandardInput ; "standard input"
.text:00403014
.text:00403014 loc_403014:                             ; CODE XREF: sub_402D60+2AD↑j
.text:00403014                 mov     edi, [esp+0DCh+FileHandle]
.text:00403018                 inc     edi
.text:00403019                 cmp     edi, 1
.text:0040301C                 ja      short loc_40302A
.text:0040301E
.text:0040301E loc_40301E:                             ; CODE XREF: sub_402D60+2D8↓j
.text:0040301E                                         ; sub_402D60+310↓j
.text:0040301E                 mov     dword ptr [ebp+4], 0FFFFFFFFh
.text:00403025                 jmp     loc_402EB6
.text:0040302A ; ---------------------------------------------------------------------------
.text:0040302A
.text:0040302A loc_40302A:                             ; CODE XREF: sub_402D60+2BC↑j
.text:0040302A                 mov     ebx, [esp+0DCh+FileHandle]
.text:0040302E                 mov     [esp+0DCh+Format], ebx ; FileHandle
.text:00403031                 call    _close
.text:00403036                 test    eax, eax
.text:00403038                 jz      short loc_40301E
.text:0040303A                 mov     [esp+0DCh+Format], 402D23h
.text:00403041                 call    ds:libintl_gettext
.text:00403047                 mov     edi, eax
.text:00403049                 call    _errno
.text:0040304E                 mov     dword ptr [esp+0DCh+var_D0], esi ; char
.text:00403052                 mov     ecx, [esp+0DCh+FileHandle]
.text:00403056                 mov     [esp+0DCh+var_D4], edi ; char *
.text:0040305A                 mov     [esp+0DCh+var_CC], ecx
.text:0040305E                 mov     esi, [eax]
.text:00403060                 mov     [esp+0DCh+Format], 0 ; Code
.text:00403067                 mov     [esp+0DCh+ErrorMessage], esi ; ErrorMessage
.text:0040306B                 call    sub_40AB80
.text:00403070                 jmp     short loc_40301E
.text:00403072 ; ---------------------------------------------------------------------------
.text:00403072
.text:00403072 loc_403072:                             ; CODE XREF: sub_402D60+28B↑j
.text:00403072                 xor     [esp+0DCh+var_A2], 1
.text:00403077                 mov     edx, [esp+0DCh+var_94]
.text:0040307B                 mov     byte ptr [ebp+30h], 0
.text:0040307F                 mov     eax, [esp+0DCh+FileHandle]
.text:00403083                 movzx   esi, [esp+0DCh+var_A2]
.text:00403088                 mov     [ebp+4], eax
.text:0040308B                 lea     edi, [esi+esi-1]
.text:0040308F                 mov     esi, [esp+0DCh+var_90]
.text:00403093                 mov     [ebp+8], edx
.text:00403096                 mov     edx, [ebx+40h]
.text:00403099                 mov     [ebp+0Ch], esi
.text:0040309C                 mov     esi, [ebx+44h]
.text:0040309F                 mov     [ebp+10h], edx
.text:004030A2                 mov     edx, [ebx+10h]
.text:004030A5                 mov     [ebp+14h], esi
.text:004030A8                 mov     esi, [ebx+14h]
.text:004030AB                 mov     [ebp+18h], edx
.text:004030AE                 mov     [ebp+1Ch], esi
.text:004030B1                 mov     edx, [ebx+8]
.text:004030B4                 mov     esi, [ebx+0Ch]
.text:004030B7                 mov     dword ptr [ebp+38h], 0
.text:004030BE                 mov     [ebp+20h], edx
.text:004030C1                 movzx   edx, word ptr [ebx]
.text:004030C4                 mov     [ebp+24h], esi
.text:004030C7                 mov     [ebp+2Ch], edi
.text:004030CA                 mov     dword ptr [ebp+3Ch], 0
.text:004030D1                 mov     [ebp+28h], dx
.text:004030D5                 jmp     loc_402EB6
.text:004030DA ; ---------------------------------------------------------------------------
.text:004030DA
.text:004030DA loc_4030DA:                             ; CODE XREF: sub_402D60+200↑j
.text:004030DA                 mov     [esp+0DCh+var_A1], 0
.text:004030DF                 mov     edi, offset byte_401430
.text:004030E4                 call    _errno
.text:004030E9                 cld
.text:004030EA                 mov     ebx, [eax]
.text:004030EC                 mov     ecx, 2
.text:004030F1                 mov     edx, [ebp+0]
.text:004030F4                 mov     [ebp+44h], ebx
.text:004030F7                 mov     esi, edx
.text:004030F9                 repe cmpsb
.text:004030FB                 setnbe  al
.text:004030FE                 mov     esi, edx
.text:00403100                 setb    cl
.text:00403103                 cmp     al, cl
.text:00403105                 jnz     short loc_40310C
.text:00403107                 mov     esi, offset aStandardInput ; "standard input"
.text:0040310C
.text:0040310C loc_40310C:                             ; CODE XREF: sub_402D60+3A5↑j
.text:0040310C                 mov     [esp+0DCh+Format], esi ; char *
.text:0040310F                 call    sub_4095E0
.text:00403114                 mov     [esp+0DCh+Format], offset aErrorReadingS ; "error reading %s"
.text:0040311B                 mov     ebx, eax
.text:0040311D                 call    ds:libintl_gettext
.text:00403123                 mov     edi, eax
.text:00403125                 call    _errno
.text:0040312A                 mov     dword ptr [esp+0DCh+var_D0], ebx ; char
.text:0040312E                 mov     [esp+0DCh+var_D4], edi ; char *
.text:00403132                 mov     edi, [eax]
.text:00403134                 mov     [esp+0DCh+Format], 0 ; Code
.text:0040313B                 mov     [esp+0DCh+ErrorMessage], edi ; ErrorMessage
.text:0040313F                 call    sub_40AB80
.text:00403144                 jmp     loc_402FF1
.text:00403144 ; ---------------------------------------------------------------------------
.text:00403149                 align 10h
.text:00403150
.text:00403150 loc_403150:                             ; CODE XREF: sub_402D60+111↑j
.text:00403150                 mov     [esp+0DCh+var_CC], eax ; int
.text:00403154                 mov     edx, dword ptr [esp+0DCh+Offset]
.text:00403158                 mov     ebx, dword ptr [esp+0DCh+Offset+4]
.text:0040315C                 mov     [esp+0DCh+Format], esi ; char *
.text:0040315F                 mov     eax, [esp+0DCh+FileHandle]
.text:00403163                 mov     [esp+0DCh+var_D4], edx ; Offset
.text:00403167                 mov     dword ptr [esp+0DCh+var_D0], ebx
.text:0040316B                 mov     [esp+0DCh+ErrorMessage], eax ; char *
.text:0040316F                 call    sub_404880
.text:00403174                 jmp     loc_402E9B
.text:00403174 ; ---------------------------------------------------------------------------
.text:00403179                 align 10h
.text:00403180
.text:00403180 loc_403180:                             ; CODE XREF: sub_402D60+B1↑j
.text:00403180                 mov     eax, offset asc_4025BC ; "\n"
.text:00403185                 jmp     loc_402E1C
.text:00403185 ; ---------------------------------------------------------------------------
.text:0040318A                 align 10h
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_402D60+74↑j
.text:00403190                 cmp     ds:byte_416020, 0
.text:00403197                 jnz     short loc_4031D0
.text:00403199
.text:00403199 loc_403199:                             ; CODE XREF: sub_402D60+4A1↓j
.text:00403199                 cld
.text:0040319A                 mov     edx, [ebp+0]
.text:0040319D                 mov     ecx, 2
.text:004031A2                 mov     edi, offset byte_401430
.text:004031A7                 mov     esi, edx
.text:004031A9                 repe cmpsb
.text:004031AB                 setnbe  al
.text:004031AE                 mov     esi, edx
.text:004031B0                 setb    cl
.text:004031B3                 cmp     al, cl
.text:004031B5                 jnz     short loc_4031BC
.text:004031B7                 mov     esi, offset aStandardInput ; "standard input"
.text:004031BC
.text:004031BC loc_4031BC:                             ; CODE XREF: sub_402D60+455↑j
.text:004031BC                 mov     [esp+0DCh+Format], esi ; char *
.text:004031BF                 call    sub_4095E0
.text:004031C4                 mov     [esp+0DCh+Format], offset loc_402D36
.text:004031CB                 jmp     loc_402F10
.text:004031D0 ; ---------------------------------------------------------------------------
.text:004031D0
.text:004031D0 loc_4031D0:                             ; CODE XREF: sub_402D60+437↑j
.text:004031D0                 mov     dword ptr [ebp+4], 0FFFFFFFFh
.text:004031D7                 call    _errno
.text:004031DC                 mov     byte ptr [ebp+30h], 0
.text:004031E0                 mov     ecx, [eax]
.text:004031E2                 mov     dword ptr [ebp+20h], 0
.text:004031E9                 mov     dword ptr [ebp+24h], 0
.text:004031F0                 mov     [ebp+44h], ecx
.text:004031F3                 mov     dword ptr [ebp+18h], 0
.text:004031FA                 mov     dword ptr [ebp+1Ch], 0
.text:00403201                 jmp     short loc_403199
.text:00403203 ; ---------------------------------------------------------------------------
.text:00403203
.text:00403203 loc_403203:                             ; CODE XREF: sub_402D60:loc_402DA3↑j
.text:00403203                 mov     [esp+0DCh+ErrorMessage], 0 ; int
.text:0040320B                 mov     [esp+0DCh+Format], ebx ; char *
.text:0040320E                 call    sub_409470
.text:00403213                 mov     [esp+0DCh+FileHandle], eax
.text:00403217                 jmp     loc_402DB8
.text:00403217 sub_402D60      endp
.text:00403217
.text:00403217 ; ---------------------------------------------------------------------------
.text:0040321C ; const char dword_40321C[]
.text:0040321C dword_40321C    dd 0F6890062h           ; DATA XREF: sub_403270+10B↓o
.text:00403220 aSOptionIsObsol db '`%s',27h,' option is obsolete; use `%s-%c %I64u',27h,0
.text:00403220                                         ; DATA XREF: sub_403270:loc_4033D9↓o
.text:0040324B asc_40324B      db '-f ',0              ; DATA XREF: sub_403270+185↓o
.text:0040324F aNumberInSIsToo db 'number in `%s',27h,' is too large',0
.text:0040324F                                         ; DATA XREF: sub_403270:loc_403474↓o
.text:0040326B                 align 10h
.text:00403270
.text:00403270 ; =============== S U B R O U T I N E =======================================
.text:00403270
.text:00403270
.text:00403270 sub_403270      proc near               ; CODE XREF: sub_4014E0+C9↑p
.text:00403270
.text:00403270 Stream          = dword ptr -6Ch
.text:00403270 Format          = dword ptr -68h
.text:00403270 var_64          = dword ptr -64h
.text:00403270 var_60          = byte ptr -60h
.text:00403270 Str             = dword ptr -5Ch
.text:00403270 var_58          = dword ptr -58h
.text:00403270 var_54          = dword ptr -54h
.text:00403270 var_50          = dword ptr -50h
.text:00403270 var_3D          = byte ptr -3Dh
.text:00403270 var_3C          = byte ptr -3Ch
.text:00403270 var_25          = byte ptr -25h
.text:00403270 var_24          = dword ptr -24h
.text:00403270 var_1D          = byte ptr -1Dh
.text:00403270 var_10          = dword ptr -10h
.text:00403270 var_C           = dword ptr -0Ch
.text:00403270 var_8           = dword ptr -8
.text:00403270 var_4           = dword ptr -4
.text:00403270 arg_0           = dword ptr  4
.text:00403270 arg_4           = dword ptr  8
.text:00403270 arg_8           = dword ptr  0Ch
.text:00403270
.text:00403270                 sub     esp, 6Ch
.text:00403273                 cmp     [esp+6Ch+arg_0], 1
.text:00403278                 mov     [esp+6Ch+var_C], esi
.text:0040327C                 mov     esi, [esp+6Ch+arg_4]
.text:00403280                 mov     [esp+6Ch+var_8], edi
.text:00403284                 mov     edi, [esp+6Ch+arg_8]
.text:00403288                 mov     [esp+6Ch+var_10], ebx
.text:0040328C                 mov     [esp+6Ch+var_4], ebp
.text:00403290                 mov     ebx, [esi+4]
.text:00403293                 mov     [esp+6Ch+var_24], 0Ah
.text:0040329B                 mov     [esp+6Ch+var_3C], 1
.text:004032A0                 mov     [esp+6Ch+var_3D], 0
.text:004032A5                 jle     short loc_403310
.text:004032A7                 call    near ptr loc_40918F+1
.text:004032AC                 cmp     eax, 30DAFh
.text:004032B1                 setle   [esp+6Ch+var_1D]
.text:004032B6                 movsx   edx, byte ptr [ebx]
.text:004032B9                 inc     ebx
.text:004032BA                 cmp     edx, 2Bh ; '+'
.text:004032BD                 jz      loc_4034F3
.text:004032C3                 xor     eax, eax
.text:004032C5                 cmp     edx, 2Dh ; '-'
.text:004032C8                 jz      short loc_4032E4
.text:004032CA                 lea     esi, [esi+0]
.text:004032D0
.text:004032D0 loc_4032D0:                             ; CODE XREF: sub_403270+A2↓j
.text:004032D0                                         ; sub_403270+FD↓j ...
.text:004032D0                 mov     ebx, [esp+6Ch+var_10]
.text:004032D4                 mov     esi, [esp+6Ch+var_C]
.text:004032D8                 mov     edi, [esp+6Ch+var_8]
.text:004032DC                 mov     ebp, [esp+6Ch+var_4]
.text:004032E0                 add     esp, 6Ch
.text:004032E3                 retn
.text:004032E4 ; ---------------------------------------------------------------------------
.text:004032E4
.text:004032E4 loc_4032E4:                             ; CODE XREF: sub_403270+58↑j
.text:004032E4                 cmp     [esp+6Ch+var_1D], 0
.text:004032E9                 jnz     loc_4034EB
.text:004032EF                 movzx   edx, byte ptr [ebx]
.text:004032F2                 mov     eax, ebx
.text:004032F4                 cmp     dl, 63h ; 'c'
.text:004032F7                 jz      loc_4034E3
.text:004032FD
.text:004032FD loc_4032FD:                             ; CODE XREF: sub_403270+276↓j
.text:004032FD                 cmp     byte ptr [eax], 0
.text:00403300                 jnz     short loc_403314
.text:00403302                 lea     esi, [esi+0]
.text:00403309                 lea     edi, [edi+0]
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_403270+35↑j
.text:00403310                 xor     eax, eax
.text:00403312                 jmp     short loc_4032D0
.text:00403314 ; ---------------------------------------------------------------------------
.text:00403314
.text:00403314 loc_403314:                             ; CODE XREF: sub_403270+90↑j
.text:00403314                                         ; sub_403270+27E↓j
.text:00403314                 mov     [esp+6Ch+var_25], 0
.text:00403319
.text:00403319 loc_403319:                             ; CODE XREF: sub_403270+298↓j
.text:00403319                 movsx   ecx, dl
.text:0040331C                 mov     ebp, ebx
.text:0040331E                 sub     ecx, 30h ; '0'
.text:00403321                 cmp     ecx, 9
.text:00403324                 ja      short loc_40333F
.text:00403326                 lea     esi, [esi+0]
.text:00403329                 lea     edi, [edi+0]
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_403270+CD↓j
.text:00403330                 inc     ebx
.text:00403331                 movzx   edx, byte ptr [ebx]
.text:00403334                 movsx   ecx, dl
.text:00403337                 sub     ecx, 30h ; '0'
.text:0040333A                 cmp     ecx, 9
.text:0040333D                 jbe     short loc_403330
.text:0040333F
.text:0040333F loc_40333F:                             ; CODE XREF: sub_403270+B4↑j
.text:0040333F                 movsx   eax, dl
.text:00403342                 mov     ecx, ebx
.text:00403344                 cmp     eax, 63h ; 'c'
.text:00403347                 jz      loc_4034CA
.text:0040334D                 cmp     eax, 63h ; 'c'
.text:00403350                 jg      loc_4034D8
.text:00403356                 cmp     eax, 62h ; 'b'
.text:00403359                 jz      loc_4034C2
.text:0040335F                 nop
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_403270+263↓j
.text:00403360                                         ; sub_403270+26B↓j
.text:00403360                 cmp     dl, 66h ; 'f'
.text:00403363                 jz      loc_4034B4
.text:00403369
.text:00403369 loc_403369:                             ; CODE XREF: sub_403270+24D↓j
.text:00403369                 xor     eax, eax
.text:0040336B                 test    dl, dl
.text:0040336D                 jnz     loc_4032D0
.text:00403373                 cmp     ebp, ecx
.text:00403375                 jz      loc_4034A5
.text:0040337B                 mov     [esp+6Ch+Str], offset dword_40321C ; Str
.text:00403383                 mov     dword ptr [esp+6Ch+var_60], edi ; int
.text:00403387                 mov     [esp+6Ch+var_64], 0Ah ; int
.text:0040338F                 mov     [esp+6Ch+Format], 0 ; int
.text:00403397                 mov     [esp+6Ch+Stream], ebp ; int
.text:0040339A                 call    sub_4084F0
.text:0040339F                 and     eax, 0FFFFFFFDh
.text:004033A2                 jnz     loc_403474
.text:004033A8
.text:004033A8 loc_4033A8:                             ; CODE XREF: sub_403270+230↓j
.text:004033A8                 cmp     [esp+6Ch+var_1D], 0
.text:004033AD                 jz      short loc_4033D9
.text:004033AF
.text:004033AF loc_4033AF:                             ; CODE XREF: sub_403270+23F↓j
.text:004033AF                 movzx   eax, [esp+6Ch+var_3D]
.text:004033B4                 movzx   ebx, [esp+6Ch+var_25]
.text:004033B9                 movzx   ecx, [esp+6Ch+var_3C]
.text:004033BE                 mov     ds:byte_416020, al
.text:004033C3                 mov     eax, 1
.text:004033C8                 mov     ds:byte_416030, bl
.text:004033CE                 mov     ds:byte_416010, cl
.text:004033D4                 jmp     loc_4032D0
.text:004033D9 ; ---------------------------------------------------------------------------
.text:004033D9
.text:004033D9 loc_4033D9:                             ; CODE XREF: sub_403270+13D↑j
.text:004033D9                 mov     [esp+6Ch+Stream], offset aSOptionIsObsol ; "`%s' option is obsolete; use `%s-%c %I6"...
.text:004033E0                 call    ds:libintl_gettext
.text:004033E6                 movzx   edx, [esp+6Ch+var_3C]
.text:004033EB                 mov     ebx, [edi]
.text:004033ED                 mov     ebp, [edi+4]
.text:004033F0                 mov     ecx, eax
.text:004033F2                 and     edx, 1
.text:004033F5                 mov     eax, offset asc_40324B ; "-f "
.text:004033FA                 mov     [esp+6Ch+var_54], ebx
.text:004033FE                 dec     edx
.text:004033FF                 and     edx, 0FFFFFFF5h
.text:00403402                 mov     [esp+6Ch+var_50], ebp
.text:00403406                 add     edx, 6Eh ; 'n'
.text:00403409                 cmp     [esp+6Ch+var_3D], 0
.text:0040340E                 mov     [esp+6Ch+var_58], edx
.text:00403412                 jnz     short loc_403419
.text:00403414                 mov     eax, offset Locale
.text:00403419
.text:00403419 loc_403419:                             ; CODE XREF: sub_403270+1A2↑j
.text:00403419                 mov     [esp+6Ch+Str], eax
.text:0040341D                 mov     edx, [esi+4]
.text:00403420                 mov     [esp+6Ch+var_64], ecx ; char *
.text:00403424                 mov     [esp+6Ch+Format], 0 ; ErrorMessage
.text:0040342C                 mov     dword ptr [esp+6Ch+var_60], edx ; char
.text:00403430                 mov     [esp+6Ch+Stream], 0 ; Code
.text:00403437                 call    sub_40AB80
.text:0040343C                 mov     [esp+6Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403443                 call    ds:libintl_gettext
.text:00403449                 mov     esi, ds:_iob
.text:0040344F                 mov     edi, ds:dword_416550
.text:00403455                 add     esi, 40h ; '@'
.text:00403458                 mov     [esp+6Ch+var_64], edi
.text:0040345C                 mov     [esp+6Ch+Format], eax ; Format
.text:00403460                 mov     [esp+6Ch+Stream], esi ; Stream
.text:00403463                 call    fprintf
.text:00403468                 mov     [esp+6Ch+Stream], 1 ; Code
.text:0040346F                 call    exit
.text:00403474 ; ---------------------------------------------------------------------------
.text:00403474
.text:00403474 loc_403474:                             ; CODE XREF: sub_403270+132↑j
.text:00403474                 mov     [esp+6Ch+Stream], offset aNumberInSIsToo ; "number in `%s' is too large"
.text:0040347B                 call    ds:libintl_gettext
.text:00403481                 mov     ebx, [esi+4]
.text:00403484                 mov     [esp+6Ch+Format], 0 ; ErrorMessage
.text:0040348C                 mov     [esp+6Ch+Stream], 1 ; Code
.text:00403493                 mov     dword ptr [esp+6Ch+var_60], ebx ; char
.text:00403497                 mov     [esp+6Ch+var_64], eax ; char *
.text:0040349B                 call    sub_40AB80
.text:004034A0                 jmp     loc_4033A8
.text:004034A5 ; ---------------------------------------------------------------------------
.text:004034A5
.text:004034A5 loc_4034A5:                             ; CODE XREF: sub_403270+105↑j
.text:004034A5                 mov     eax, [esp+6Ch+var_24]
.text:004034A9                 cdq
.text:004034AA                 mov     [edi], eax
.text:004034AC                 mov     [edi+4], edx
.text:004034AF                 jmp     loc_4033AF
.text:004034B4 ; ---------------------------------------------------------------------------
.text:004034B4
.text:004034B4 loc_4034B4:                             ; CODE XREF: sub_403270+F3↑j
.text:004034B4                 mov     [esp+6Ch+var_3D], 1
.text:004034B9                 movzx   edx, byte ptr [ebx+1]
.text:004034BD                 jmp     loc_403369
.text:004034C2 ; ---------------------------------------------------------------------------
.text:004034C2
.text:004034C2 loc_4034C2:                             ; CODE XREF: sub_403270+E9↑j
.text:004034C2                 mov     [esp+6Ch+var_24], 1400h
.text:004034CA
.text:004034CA loc_4034CA:                             ; CODE XREF: sub_403270+D7↑j
.text:004034CA                 mov     [esp+6Ch+var_3C], 0
.text:004034CF
.text:004034CF loc_4034CF:                             ; CODE XREF: sub_403270+271↓j
.text:004034CF                 inc     ebx
.text:004034D0                 movzx   edx, byte ptr [ebx]
.text:004034D3                 jmp     loc_403360
.text:004034D8 ; ---------------------------------------------------------------------------
.text:004034D8
.text:004034D8 loc_4034D8:                             ; CODE XREF: sub_403270+E0↑j
.text:004034D8                 cmp     eax, 6Ch ; 'l'
.text:004034DB                 jnz     loc_403360
.text:004034E1                 jmp     short loc_4034CF
.text:004034E3 ; ---------------------------------------------------------------------------
.text:004034E3
.text:004034E3 loc_4034E3:                             ; CODE XREF: sub_403270+87↑j
.text:004034E3                 lea     eax, [ebx+1]
.text:004034E6                 jmp     loc_4032FD
.text:004034EB ; ---------------------------------------------------------------------------
.text:004034EB
.text:004034EB loc_4034EB:                             ; CODE XREF: sub_403270+79↑j
.text:004034EB                 movzx   edx, byte ptr [ebx]
.text:004034EE                 jmp     loc_403314
.text:004034F3 ; ---------------------------------------------------------------------------
.text:004034F3
.text:004034F3 loc_4034F3:                             ; CODE XREF: sub_403270+4D↑j
.text:004034F3                 xor     eax, eax
.text:004034F5                 cmp     [esp+6Ch+var_1D], 0
.text:004034FA                 jz      loc_4032D0
.text:00403500                 mov     [esp+6Ch+var_25], 1
.text:00403505                 movzx   edx, byte ptr [ebx]
.text:00403508                 jmp     loc_403319
.text:00403508 sub_403270      endp
.text:00403508
.text:00403508 ; ---------------------------------------------------------------------------
.text:0040350D ; const char aCNFfqsV[]
.text:0040350D aCNFfqsV        db 'c:n:fFqs:v',0       ; DATA XREF: sub_403760+30↓o
.text:00403518 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_403760+F8↓o
.text:00403525                 align 20h
.text:00403540 aDavidMackenzie db 'David MacKenzie, Ian Lance Taylor',0
.text:00403540                                         ; DATA XREF: sub_403760+100↓o
.text:00403562 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: sub_403760+10B↓o
.text:0040356D a530            db '5.3.0',0            ; DATA XREF: sub_403760+113↓o
.text:00403573 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_403760+11B↓o
.text:00403581 ; const FILE stru_403581
.text:00403581 stru_403581     FILE <6C696174h, 662D2D00h, 6F6C6C6Fh, 6B620077h, 6E69006Dh, \
.text:00403581                                         ; DATA XREF: sub_403760+123↓o
.text:00403581                                         ; sub_403760+34F↓o ...
.text:00403581                       696C6176h, 756E2064h, 7265626Dh>
.text:004035A1                 db  20h
.text:004035A2                 db  6Fh ; o
.text:004035A3                 db  66h ; f
.text:004035A4                 db  20h
.text:004035A5                 db  62h ; b
.text:004035A6                 db  79h ; y
.text:004035A7                 db  74h ; t
.text:004035A8                 db  65h ; e
.text:004035A9                 db  73h ; s
.text:004035AA                 db    0
.text:004035AB ; const char aSS_0[]
.text:004035AB aSS_0           db '%s: %s',0           ; DATA XREF: sub_403760+3E2↓o
.text:004035B2 aInvalidNumberO_0 db 'invalid number of lines',0
.text:004035B2                                         ; DATA XREF: sub_403760:loc_403B71↓o
.text:004035CA                 align 20h
.text:004035E0 aTheAllowMissin db 'the --allow-missing option is deprecated; use --retry instead',0
.text:004035E0                                         ; DATA XREF: sub_403760:loc_403BD0↓o
.text:0040361E aSInvalidPid    db '%s: invalid PID',0  ; DATA XREF: sub_403760:loc_403C63↓o
.text:0040362E                 align 20h
.text:00403640 aSInvalidMaximu db '%s: invalid maximum number of unchanged stats between opens',0
.text:00403640                                         ; DATA XREF: sub_403760+57A↓o
.text:0040367C aSInvalidNumber db '%s: invalid number of seconds',0
.text:0040367C                                         ; DATA XREF: sub_403760:loc_403D4D↓o
.text:0040369A                 align 10h
.text:004036A0 aWarningRetryIs db 'warning: --retry is useful only when following by name',0
.text:004036A0                                         ; DATA XREF: sub_403760+63D↓o
.text:004036D7                 align 10h
.text:004036E0 aWarningPidPidI db 'warning: --pid=PID is not supported on this system',0
.text:004036E0                                         ; DATA XREF: sub_403760+69A↓o
.text:00403713                 align 10h
.text:00403720 aWarningPidIgno db 'warning: PID ignored; --pid=PID is useful only when following',0
.text:00403720                                         ; DATA XREF: sub_403760:loc_403E28↓o
.text:0040375E                 align 10h
.text:00403760
.text:00403760 ; =============== S U B R O U T I N E =======================================
.text:00403760
.text:00403760
.text:00403760 sub_403760      proc near               ; CODE XREF: sub_4014E0+F5↑p
.text:00403760
.text:00403760 Stream          = dword ptr -4Ch
.text:00403760 Format          = dword ptr -48h
.text:00403760 var_44          = dword ptr -44h
.text:00403760 var_40          = byte ptr -40h
.text:00403760 Str             = dword ptr -3Ch
.text:00403760 var_38          = dword ptr -38h
.text:00403760 var_34          = dword ptr -34h
.text:00403760 var_30          = dword ptr -30h
.text:00403760 var_24          = qword ptr -24h
.text:00403760 var_18          = dword ptr -18h
.text:00403760 arg_0           = dword ptr  4
.text:00403760 arg_4           = dword ptr  8
.text:00403760 arg_8           = dword ptr  0Ch
.text:00403760 arg_C           = dword ptr  10h
.text:00403760 arg_10          = dword ptr  14h
.text:00403760
.text:00403760                 push    ebp
.text:00403761                 push    edi
.text:00403762                 push    esi
.text:00403763                 push    ebx
.text:00403764                 sub     esp, 3Ch
.text:00403767                 mov     esi, [esp+4Ch+arg_0]
.text:0040376B                 mov     edi, [esp+4Ch+arg_4]
.text:0040376F                 mov     ebp, [esp+4Ch+arg_8]
.text:00403773                 lea     esi, [esi+0]
.text:00403779                 lea     edi, [edi+0]
.text:00403780
.text:00403780 loc_403780:                             ; CODE XREF: sub_403760+A5↓j
.text:00403780                                         ; sub_403760+324↓j ...
.text:00403780                 mov     [esp+4Ch+Str], 0 ; int
.text:00403788                 mov     dword ptr [esp+4Ch+var_40], offset off_401340 ; char
.text:00403790                 mov     [esp+4Ch+var_44], offset aCNFfqsV ; "c:n:fFqs:v"
.text:00403798                 mov     [esp+4Ch+Format], edi ; int
.text:0040379C                 mov     [esp+4Ch+Stream], esi ; int
.text:0040379F                 call    sub_408340
.text:004037A4                 cmp     eax, 0FFFFFFFFh
.text:004037A7                 mov     ebx, eax
.text:004037A9                 jz      loc_403D8B
.text:004037AF                 cmp     ebx, 73h ; 's'
.text:004037B2                 jz      loc_403D10
.text:004037B8                 cmp     ebx, 73h ; 's'
.text:004037BB                 jg      loc_403B90
.text:004037C1                 cmp     ebx, 63h ; 'c'
.text:004037C4                 jz      loc_403AE5
.text:004037CA                 cmp     ebx, 63h ; 'c'
.text:004037CD                 jg      loc_403A51
.text:004037D3                 cmp     ebx, 0FFFFFF7Eh
.text:004037D9                 jz      loc_40389C
.text:004037DF                 cmp     ebx, 0FFFFFF7Eh
.text:004037E5                 jle     short loc_403842
.text:004037E7                 cmp     ebx, 46h ; 'F'
.text:004037EA                 jnz     short loc_40380A
.text:004037EC                 mov     ds:byte_416020, 1
.text:004037F3                 mov     edx, 1
.text:004037F8                 mov     dword_415010, edx
.text:004037FE
.text:004037FE loc_4037FE:                             ; CODE XREF: sub_403760+44A↓j
.text:004037FE                                         ; sub_403760+495↓j
.text:004037FE                 mov     ds:byte_416000, 1
.text:00403805                 jmp     loc_403780
.text:0040380A ; ---------------------------------------------------------------------------
.text:0040380A
.text:0040380A loc_40380A:                             ; CODE XREF: sub_403760+8A↑j
.text:0040380A                                         ; sub_403760+E8↓j ...
.text:0040380A                 mov     [esp+4Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403811                 call    ds:libintl_gettext
.text:00403817                 mov     esi, ds:_iob
.text:0040381D                 mov     edi, ds:dword_416550
.text:00403823                 add     esi, 40h ; '@'
.text:00403826                 mov     [esp+4Ch+var_44], edi
.text:0040382A                 mov     [esp+4Ch+Format], eax ; Format
.text:0040382E                 mov     [esp+4Ch+Stream], esi ; Stream
.text:00403831                 call    fprintf
.text:00403836                 mov     [esp+4Ch+Stream], 1 ; Code
.text:0040383D
.text:0040383D loc_40383D:                             ; CODE XREF: sub_403760+13A↓j
.text:0040383D                 call    exit
.text:00403842 ; ---------------------------------------------------------------------------
.text:00403842
.text:00403842 loc_403842:                             ; CODE XREF: sub_403760+85↑j
.text:00403842                 cmp     ebx, 0FFFFFF7Dh
.text:00403848                 jnz     short loc_40380A
.text:0040384A                 mov     [esp+4Ch+var_30], 0
.text:00403852                 mov     edx, ds:_iob
.text:00403858                 mov     [esp+4Ch+var_34], offset aJimMeyering ; "Jim Meyering"
.text:00403860                 mov     [esp+4Ch+var_38], offset aDavidMackenzie ; "David MacKenzie, Ian Lance Taylor"
.text:00403868                 add     edx, 20h ; ' '
.text:0040386B                 mov     [esp+4Ch+Str], offset aPaulRubin ; "Paul Rubin"
.text:00403873                 mov     dword ptr [esp+4Ch+var_40], offset a530 ; "5.3.0"
.text:0040387B                 mov     [esp+4Ch+var_44], offset aGnuCoreutils ; "GNU coreutils"
.text:00403883                 mov     [esp+4Ch+Format], offset stru_403581 ; FILE *
.text:0040388B                 mov     [esp+4Ch+Stream], edx ; FILE *
.text:0040388E                 call    sub_407BF0
.text:00403893
.text:00403893 loc_403893:                             ; CODE XREF: sub_403760+2EC↓j
.text:00403893                 mov     [esp+4Ch+Stream], 0
.text:0040389A                 jmp     short loc_40383D
.text:0040389C ; ---------------------------------------------------------------------------
.text:0040389C
.text:0040389C loc_40389C:                             ; CODE XREF: sub_403760+79↑j
.text:0040389C                 mov     [esp+4Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:004038A3                 call    ds:libintl_gettext
.text:004038A9                 mov     ebx, ds:dword_416550
.text:004038AF                 mov     [esp+4Ch+Stream], eax ; Format
.text:004038B2                 mov     [esp+4Ch+Format], ebx
.text:004038B6                 call    printf
.text:004038BB                 mov     [esp+4Ch+Stream], offset aPrintTheLastDL ; "Print the last %d lines of each FILE to"...
.text:004038C2                 call    ds:libintl_gettext
.text:004038C8                 mov     [esp+4Ch+Format], 0Ah
.text:004038D0                 mov     [esp+4Ch+Stream], eax ; Format
.text:004038D3                 call    printf
.text:004038D8                 mov     [esp+4Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004038DF                 call    ds:libintl_gettext
.text:004038E5                 mov     ecx, ds:_iob
.text:004038EB                 add     ecx, 20h ; ' '
.text:004038EE                 mov     [esp+4Ch+Format], ecx ; Stream
.text:004038F2                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:004038F5                 call    fputs
.text:004038FA                 mov     [esp+4Ch+Stream], offset aRetryKeepTryin ; "      --retry              keep trying "...
.text:00403901                 call    ds:libintl_gettext
.text:00403907                 mov     ebp, ds:_iob
.text:0040390D                 add     ebp, 20h ; ' '
.text:00403910                 mov     [esp+4Ch+Format], ebp ; Stream
.text:00403914                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:00403917                 call    fputs
.text:0040391C                 mov     [esp+4Ch+Stream], offset aFFollowNameDes ; "  -f, --follow[={name|descriptor}]\n   "...
.text:00403923                 call    ds:libintl_gettext
.text:00403929                 mov     edi, ds:_iob
.text:0040392F                 add     edi, 20h ; ' '
.text:00403932                 mov     [esp+4Ch+Format], edi ; Stream
.text:00403936                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:00403939                 call    fputs
.text:0040393E                 mov     [esp+4Ch+Stream], offset aNLinesNOutputT ; "  -n, --lines=N            output the l"...
.text:00403945                 call    ds:libintl_gettext
.text:0040394B                 mov     [esp+4Ch+var_44], 5
.text:00403953                 mov     [esp+4Ch+Format], 0Ah
.text:0040395B                 mov     [esp+4Ch+Stream], eax ; Format
.text:0040395E                 call    printf
.text:00403963                 mov     [esp+4Ch+Stream], offset aPidPidWithFTer ; "      --pid=PID            with -f, ter"...
.text:0040396A                 call    ds:libintl_gettext
.text:00403970                 mov     esi, ds:_iob
.text:00403976                 add     esi, 20h ; ' '
.text:00403979                 mov     [esp+4Ch+Format], esi ; Stream
.text:0040397D                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:00403980                 call    fputs
.text:00403985                 mov     [esp+4Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040398C                 call    ds:libintl_gettext
.text:00403992                 mov     ebx, ds:_iob
.text:00403998                 add     ebx, 20h ; ' '
.text:0040399B                 mov     [esp+4Ch+Format], ebx ; Stream
.text:0040399F                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:004039A2                 call    fputs
.text:004039A7                 mov     [esp+4Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004039AE                 call    ds:libintl_gettext
.text:004039B4                 mov     ecx, ds:_iob
.text:004039BA                 add     ecx, 20h ; ' '
.text:004039BD                 mov     [esp+4Ch+Format], ecx ; Stream
.text:004039C1                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:004039C4                 call    fputs
.text:004039C9                 mov     [esp+4Ch+Stream], offset aIfTheFirstChar ; "\nIf the first character of N (the numb"...
.text:004039D0                 call    ds:libintl_gettext
.text:004039D6                 mov     ebp, ds:_iob
.text:004039DC                 add     ebp, 20h ; ' '
.text:004039DF                 mov     [esp+4Ch+Format], ebp ; Stream
.text:004039E3                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:004039E6                 call    fputs
.text:004039EB                 mov     [esp+4Ch+Stream], offset aWithFollowFTai ; "With --follow (-f), tail defaults to fo"...
.text:004039F2                 call    ds:libintl_gettext
.text:004039F8                 mov     edi, ds:_iob
.text:004039FE                 add     edi, 20h ; ' '
.text:00403A01                 mov     [esp+4Ch+Format], edi ; Stream
.text:00403A05                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:00403A08                 call    fputs
.text:00403A0D                 mov     [esp+4Ch+Stream], offset aThisDefaultBeh ; "This default behavior is not desirable "...
.text:00403A14                 call    ds:libintl_gettext
.text:00403A1A                 mov     esi, ds:_iob
.text:00403A20                 add     esi, 20h ; ' '
.text:00403A23                 mov     [esp+4Ch+Format], esi ; Stream
.text:00403A27                 mov     [esp+4Ch+Stream], eax ; Buffer
.text:00403A2A                 call    fputs
.text:00403A2F                 mov     [esp+4Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00403A36                 call    ds:libintl_gettext
.text:00403A3C                 mov     [esp+4Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00403A44                 mov     [esp+4Ch+Stream], eax ; Format
.text:00403A47                 call    printf
.text:00403A4C                 jmp     loc_403893
.text:00403A51 ; ---------------------------------------------------------------------------
.text:00403A51
.text:00403A51 loc_403A51:                             ; CODE XREF: sub_403760+6D↑j
.text:00403A51                 cmp     ebx, 6Eh ; 'n'
.text:00403A54                 jz      loc_403AE5
.text:00403A5A                 cmp     ebx, 6Eh ; 'n'
.text:00403A5D                 jg      short loc_403ACD
.text:00403A5F                 cmp     ebx, 66h ; 'f'
.text:00403A62
.text:00403A62 loc_403A62:                             ; CODE XREF: sub_403760+4BA↓j
.text:00403A62                 jnz     loc_40380A
.text:00403A68                 mov     ds:byte_416020, 1
.text:00403A6F                 mov     edx, ds:dword_416570
.text:00403A75                 test    edx, edx
.text:00403A77                 jnz     short loc_403A89
.text:00403A79                 mov     ecx, 2
.text:00403A7E                 mov     dword_415010, ecx
.text:00403A84                 jmp     loc_403780
.text:00403A89 ; ---------------------------------------------------------------------------
.text:00403A89
.text:00403A89 loc_403A89:                             ; CODE XREF: sub_403760+317↑j
.text:00403A89                 mov     [esp+4Ch+Str], 4 ; int
.text:00403A91                 mov     ecx, off_415040
.text:00403A97                 mov     dword ptr [esp+4Ch+var_40], offset dword_40129C ; int
.text:00403A9F                 mov     [esp+4Ch+var_44], offset off_401290 ; int
.text:00403AA7                 mov     [esp+4Ch+var_38], ecx ; int
.text:00403AAB                 mov     [esp+4Ch+Format], edx ; char *
.text:00403AAF                 mov     [esp+4Ch+Stream], (offset stru_403581._cnt+1) ; char *
.text:00403AB6                 call    sub_4070C0
.text:00403ABB                 mov     ebx, ds:dword_40129C[eax*4]
.text:00403AC2                 mov     dword_415010, ebx
.text:00403AC8                 jmp     loc_403780
.text:00403ACD ; ---------------------------------------------------------------------------
.text:00403ACD
.text:00403ACD loc_403ACD:                             ; CODE XREF: sub_403760+2FD↑j
.text:00403ACD                 cmp     ebx, 71h ; 'q'
.text:00403AD0                 jnz     loc_40380A
.text:00403AD6                 mov     ecx, [esp+4Ch+arg_C]
.text:00403ADA                 mov     dword ptr [ecx], 2
.text:00403AE0                 jmp     loc_403780
.text:00403AE5 ; ---------------------------------------------------------------------------
.text:00403AE5
.text:00403AE5 loc_403AE5:                             ; CODE XREF: sub_403760+64↑j
.text:00403AE5                                         ; sub_403760+2F4↑j
.text:00403AE5                 cmp     ebx, 6Eh ; 'n'
.text:00403AE8                 mov     edx, ds:dword_416570
.text:00403AEE                 setz    ds:byte_416010
.text:00403AF5                 movzx   eax, byte ptr [edx]
.text:00403AF8                 cmp     al, 2Bh ; '+'
.text:00403AFA                 jz      loc_403B83
.text:00403B00                 cmp     al, 2Dh ; '-'
.text:00403B02                 jz      short loc_403B7A
.text:00403B04
.text:00403B04 loc_403B04:                             ; CODE XREF: sub_403760+421↓j
.text:00403B04                                         ; sub_403760+42A↓j
.text:00403B04                 mov     [esp+4Ch+Str], (offset stru_403581._flag+2) ; Str
.text:00403B0C                 mov     dword ptr [esp+4Ch+var_40], ebp ; int
.text:00403B10                 mov     [esp+4Ch+var_44], 0Ah ; int
.text:00403B18                 mov     [esp+4Ch+Format], 0 ; int
.text:00403B20                 mov     [esp+4Ch+Stream], edx ; int
.text:00403B23                 call    sub_4084F0
.text:00403B28                 test    eax, eax
.text:00403B2A                 jz      loc_403780
.text:00403B30                 cmp     ebx, 6Eh ; 'n'
.text:00403B33                 jz      short loc_403B71
.text:00403B35                 mov     [esp+4Ch+Stream], (offset stru_403581._file+2)
.text:00403B3C
.text:00403B3C loc_403B3C:                             ; CODE XREF: sub_403760+418↓j
.text:00403B3C                 call    ds:libintl_gettext
.text:00403B42                 mov     [esp+4Ch+var_44], offset aSS_0 ; "%s: %s"
.text:00403B4A                 mov     edx, ds:dword_416570
.text:00403B50                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00403B58                 mov     [esp+4Ch+Stream], 1 ; Code
.text:00403B5F                 mov     [esp+4Ch+Str], eax
.text:00403B63                 mov     dword ptr [esp+4Ch+var_40], edx ; char
.text:00403B67                 call    sub_40AB80
.text:00403B6C                 jmp     loc_403780
.text:00403B71 ; ---------------------------------------------------------------------------
.text:00403B71
.text:00403B71 loc_403B71:                             ; CODE XREF: sub_403760+3D3↑j
.text:00403B71                 mov     [esp+4Ch+Stream], offset aInvalidNumberO_0 ; "invalid number of lines"
.text:00403B78                 jmp     short loc_403B3C
.text:00403B7A ; ---------------------------------------------------------------------------
.text:00403B7A
.text:00403B7A loc_403B7A:                             ; CODE XREF: sub_403760+3A2↑j
.text:00403B7A                 inc     edx
.text:00403B7B                 mov     ds:dword_416570, edx
.text:00403B81                 jmp     short loc_403B04
.text:00403B83 ; ---------------------------------------------------------------------------
.text:00403B83
.text:00403B83 loc_403B83:                             ; CODE XREF: sub_403760+39A↑j
.text:00403B83                 mov     ds:byte_416030, 1
.text:00403B8A                 jmp     loc_403B04
.text:00403B8A ; ---------------------------------------------------------------------------
.text:00403B8F                 align 10h
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: sub_403760+5B↑j
.text:00403B90                 cmp     ebx, 82h ; '‚'
.text:00403B96                 jz      loc_403CA4
.text:00403B9C                 cmp     ebx, 82h ; '‚'
.text:00403BA2                 jg      short loc_403C00
.text:00403BA4                 cmp     ebx, 80h ; '€'
.text:00403BAA                 jz      loc_4037FE
.text:00403BB0                 cmp     ebx, 80h ; '€'
.text:00403BB6                 jg      short loc_403BD0
.text:00403BB8                 cmp     ebx, 76h ; 'v'
.text:00403BBB                 jnz     loc_40380A
.text:00403BC1                 mov     ebx, [esp+4Ch+arg_C]
.text:00403BC5                 mov     dword ptr [ebx], 1
.text:00403BCB                 jmp     loc_403780
.text:00403BD0 ; ---------------------------------------------------------------------------
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403760+456↑j
.text:00403BD0                 mov     [esp+4Ch+Stream], offset aTheAllowMissin ; "the --allow-missing option is deprecate"...
.text:00403BD7                 call    ds:libintl_gettext
.text:00403BDD                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00403BE5                 mov     [esp+4Ch+Stream], 0 ; Code
.text:00403BEC                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403BF0                 call    sub_40AB80
.text:00403BF5                 jmp     loc_4037FE
.text:00403BF5 ; ---------------------------------------------------------------------------
.text:00403BFA                 align 10h
.text:00403C00
.text:00403C00 loc_403C00:                             ; CODE XREF: sub_403760+442↑j
.text:00403C00                 cmp     ebx, 84h ; '„'
.text:00403C06                 jz      loc_403C98
.text:00403C0C                 cmp     ebx, 84h ; '„'
.text:00403C12                 jl      short loc_403C1F
.text:00403C14                 cmp     ebx, 85h ; '…'
.text:00403C1A                 jmp     loc_403A62
.text:00403C1F ; ---------------------------------------------------------------------------
.text:00403C1F
.text:00403C1F loc_403C1F:                             ; CODE XREF: sub_403760+4B2↑j
.text:00403C1F                 mov     [esp+4Ch+Str], offset Locale ; Str
.text:00403C27                 mov     ecx, ds:dword_416570
.text:00403C2D                 lea     edx, [esp+4Ch+var_18]
.text:00403C31                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:00403C35                 mov     [esp+4Ch+var_44], 0Ah ; int
.text:00403C3D                 mov     [esp+4Ch+Format], 0 ; int
.text:00403C45                 mov     [esp+4Ch+Stream], ecx ; int
.text:00403C48                 call    sub_407DD0
.text:00403C4D                 test    eax, eax
.text:00403C4F                 jnz     short loc_403C63
.text:00403C51                 mov     eax, [esp+4Ch+var_18]
.text:00403C55                 test    eax, eax
.text:00403C57                 js      short loc_403C63
.text:00403C59
.text:00403C59 loc_403C59:                             ; CODE XREF: sub_403760+536↓j
.text:00403C59                 mov     ds:dword_416050, eax
.text:00403C5E                 jmp     loc_403780
.text:00403C63 ; ---------------------------------------------------------------------------
.text:00403C63
.text:00403C63 loc_403C63:                             ; CODE XREF: sub_403760+4EF↑j
.text:00403C63                                         ; sub_403760+4F7↑j
.text:00403C63                 mov     [esp+4Ch+Stream], offset aSInvalidPid ; "%s: invalid PID"
.text:00403C6A                 call    ds:libintl_gettext
.text:00403C70                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00403C78                 mov     ebx, ds:dword_416570
.text:00403C7E                 mov     [esp+4Ch+Stream], 1 ; Code
.text:00403C85                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403C89                 mov     dword ptr [esp+4Ch+var_40], ebx ; char
.text:00403C8D                 call    sub_40AB80
.text:00403C92                 mov     eax, [esp+4Ch+var_18]
.text:00403C96                 jmp     short loc_403C59
.text:00403C98 ; ---------------------------------------------------------------------------
.text:00403C98
.text:00403C98 loc_403C98:                             ; CODE XREF: sub_403760+4A6↑j
.text:00403C98                 mov     ds:byte_416070, 1
.text:00403C9F                 jmp     loc_403780
.text:00403CA4 ; ---------------------------------------------------------------------------
.text:00403CA4
.text:00403CA4 loc_403CA4:                             ; CODE XREF: sub_403760+436↑j
.text:00403CA4                 mov     [esp+4Ch+Str], offset Locale ; Str
.text:00403CAC                 mov     edx, ds:dword_416570
.text:00403CB2                 mov     dword ptr [esp+4Ch+var_40], offset dword_415018 ; int
.text:00403CBA                 mov     [esp+4Ch+var_44], 0Ah ; int
.text:00403CC2                 mov     [esp+4Ch+Format], 0 ; int
.text:00403CCA                 mov     [esp+4Ch+Stream], edx ; int
.text:00403CCD                 call    sub_4084F0
.text:00403CD2                 test    eax, eax
.text:00403CD4                 jz      loc_403780
.text:00403CDA                 mov     [esp+4Ch+Stream], offset aSInvalidMaximu ; "%s: invalid maximum number of unchanged"...
.text:00403CE1                 call    ds:libintl_gettext
.text:00403CE7                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00403CEF                 mov     ebx, ds:dword_416570
.text:00403CF5                 mov     [esp+4Ch+Stream], 1 ; Code
.text:00403CFC                 mov     dword ptr [esp+4Ch+var_40], ebx ; char
.text:00403D00                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403D04                 call    sub_40AB80
.text:00403D09                 jmp     loc_403780
.text:00403D09 ; ---------------------------------------------------------------------------
.text:00403D0E                 align 10h
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: sub_403760+52↑j
.text:00403D10                 mov     dword ptr [esp+4Ch+var_40], offset sub_407C40
.text:00403D18                 mov     edx, ds:dword_416570
.text:00403D1E                 lea     ebx, [esp+4Ch+var_24]
.text:00403D22                 mov     [esp+4Ch+var_44], ebx
.text:00403D26                 mov     [esp+4Ch+Format], 0
.text:00403D2E                 mov     [esp+4Ch+Stream], edx
.text:00403D31                 call    sub_407CC0
.text:00403D36                 test    al, al
.text:00403D38                 jz      short loc_403D4D
.text:00403D3A                 fld     [esp+4Ch+var_24]
.text:00403D3E                 fldz
.text:00403D40                 fxch    st(1)
.text:00403D42                 fucom   st(1)
.text:00403D44                 fnstsw  ax
.text:00403D46                 fstp    st(1)
.text:00403D48                 sahf
.text:00403D49                 jnb     short loc_403D80
.text:00403D4B                 fstp    st
.text:00403D4D
.text:00403D4D loc_403D4D:                             ; CODE XREF: sub_403760+5D8↑j
.text:00403D4D                 mov     [esp+4Ch+Stream], offset aSInvalidNumber ; "%s: invalid number of seconds"
.text:00403D54                 call    ds:libintl_gettext
.text:00403D5A                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00403D62                 mov     ecx, ds:dword_416570
.text:00403D68                 mov     [esp+4Ch+Stream], 1 ; Code
.text:00403D6F                 mov     dword ptr [esp+4Ch+var_40], ecx ; char
.text:00403D73                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403D77                 call    sub_40AB80
.text:00403D7C                 fld     [esp+4Ch+var_24]
.text:00403D80
.text:00403D80 loc_403D80:                             ; CODE XREF: sub_403760+5E9↑j
.text:00403D80                 mov     edx, [esp+4Ch+arg_10]
.text:00403D84                 fstp    qword ptr [edx]
.text:00403D86                 jmp     loc_403780
.text:00403D8B ; ---------------------------------------------------------------------------
.text:00403D8B
.text:00403D8B loc_403D8B:                             ; CODE XREF: sub_403760+49↑j
.text:00403D8B                 cmp     ds:byte_416000, 0
.text:00403D92                 jz      short loc_403DC2
.text:00403D94                 cmp     dword_415010, 1
.text:00403D9B                 jz      short loc_403DC2
.text:00403D9D                 mov     [esp+4Ch+Stream], offset aWarningRetryIs ; "warning: --retry is useful only when fo"...
.text:00403DA4                 call    ds:libintl_gettext
.text:00403DAA                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00403DB2                 mov     [esp+4Ch+Stream], 0 ; Code
.text:00403DB9                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403DBD                 call    sub_40AB80
.text:00403DC2
.text:00403DC2 loc_403DC2:                             ; CODE XREF: sub_403760+632↑j
.text:00403DC2                                         ; sub_403760+63B↑j
.text:00403DC2                 mov     eax, ds:dword_416050
.text:00403DC7                 test    eax, eax
.text:00403DC9                 jz      short loc_403DE8
.text:00403DCB                 cmp     ds:byte_416020, 0
.text:00403DD2                 jz      short loc_403E28
.text:00403DD4                 mov     [esp+4Ch+Format], 0 ; int
.text:00403DDC                 mov     [esp+4Ch+Stream], eax ; DWORD
.text:00403DDF                 call    sub_40E1B0
.text:00403DE4                 test    eax, eax
.text:00403DE6                 jnz     short loc_403DF0
.text:00403DE8
.text:00403DE8 loc_403DE8:                             ; CODE XREF: sub_403760+669↑j
.text:00403DE8                                         ; sub_403760+698↓j ...
.text:00403DE8                 add     esp, 3Ch
.text:00403DEB                 pop     ebx
.text:00403DEC                 pop     esi
.text:00403DED                 pop     edi
.text:00403DEE                 pop     ebp
.text:00403DEF                 retn
.text:00403DF0 ; ---------------------------------------------------------------------------
.text:00403DF0
.text:00403DF0 loc_403DF0:                             ; CODE XREF: sub_403760+686↑j
.text:00403DF0                 call    _errno
.text:00403DF5                 cmp     dword ptr [eax], 28h ; '('
.text:00403DF8                 jnz     short loc_403DE8
.text:00403DFA                 mov     [esp+4Ch+Stream], offset aWarningPidPidI ; "warning: --pid=PID is not supported on "...
.text:00403E01                 call    ds:libintl_gettext
.text:00403E07                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00403E0F                 mov     [esp+4Ch+Stream], 0 ; Code
.text:00403E16                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403E1A                 call    sub_40AB80
.text:00403E1F                 xor     eax, eax
.text:00403E21                 mov     ds:dword_416050, eax
.text:00403E26                 jmp     short loc_403DE8
.text:00403E28 ; ---------------------------------------------------------------------------
.text:00403E28
.text:00403E28 loc_403E28:                             ; CODE XREF: sub_403760+672↑j
.text:00403E28                 mov     [esp+4Ch+Stream], offset aWarningPidIgno ; "warning: PID ignored; --pid=PID is usef"...
.text:00403E2F                 call    ds:libintl_gettext
.text:00403E35                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00403E3D                 mov     [esp+4Ch+Stream], 0 ; Code
.text:00403E44                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403E48                 call    sub_40AB80
.text:00403E4D                 jmp     short loc_403DE8
.text:00403E4D sub_403760      endp
.text:00403E4D
.text:00403E4D ; ---------------------------------------------------------------------------
.text:00403E4F                 align 10h
.text:00403E50
.text:00403E50 ; =============== S U B R O U T I N E =======================================
.text:00403E50
.text:00403E50
.text:00403E50 ; int __cdecl sub_403E50(char *, int, int, int)
.text:00403E50 sub_403E50      proc near               ; CODE XREF: sub_402620+2D4↑p
.text:00403E50                                         ; sub_404880+10D↓p ...
.text:00403E50
.text:00403E50 Buffer          = dword ptr -23Ch
.text:00403E50 ElementSize     = dword ptr -238h
.text:00403E50 ElementCount    = dword ptr -234h
.text:00403E50 Stream          = dword ptr -230h
.text:00403E50 var_22C         = dword ptr -22Ch
.text:00403E50 var_228         = dword ptr -228h
.text:00403E50 var_224         = dword ptr -224h
.text:00403E50 var_220         = dword ptr -220h
.text:00403E50 var_21C         = byte ptr -21Ch
.text:00403E50 arg_0           = dword ptr  4
.text:00403E50 arg_4           = dword ptr  8
.text:00403E50 arg_8           = dword ptr  0Ch
.text:00403E50 arg_C           = dword ptr  10h
.text:00403E50
.text:00403E50                 push    ebp
.text:00403E51                 push    edi
.text:00403E52                 push    esi
.text:00403E53                 push    ebx
.text:00403E54                 sub     esp, 22Ch
.text:00403E5A                 mov     edx, [esp+23Ch+arg_8]
.text:00403E61                 mov     [esp+23Ch+var_22C], 0
.text:00403E69                 mov     ecx, [esp+23Ch+arg_C]
.text:00403E70                 mov     [esp+23Ch+var_228], 0
.text:00403E78                 mov     esi, edx
.text:00403E7A                 mov     edi, ecx
.text:00403E7C                 mov     [esp+23Ch+var_224], edx
.text:00403E80                 mov     [esp+23Ch+var_220], ecx
.text:00403E84                 lea     esi, [esi+0]
.text:00403E8A                 lea     edi, [edi+0]
.text:00403E90
.text:00403E90 loc_403E90:                             ; CODE XREF: sub_403E50+C1↓j
.text:00403E90                                         ; sub_403E50+DA↓j
.text:00403E90                 cmp     edi, 0
.text:00403E93                 mov     eax, esi
.text:00403E95                 ja      short loc_403E9F
.text:00403E97                 cmp     esi, 200h
.text:00403E9D                 jbe     short loc_403EA4
.text:00403E9F
.text:00403E9F loc_403E9F:                             ; CODE XREF: sub_403E50+45↑j
.text:00403E9F                 mov     eax, 200h
.text:00403EA4
.text:00403EA4 loc_403EA4:                             ; CODE XREF: sub_403E50+4D↑j
.text:00403EA4                 mov     [esp+23Ch+ElementCount], eax
.text:00403EA8                 mov     ecx, [esp+23Ch+arg_4]
.text:00403EAF                 lea     eax, [esp+23Ch+var_21C]
.text:00403EB3                 mov     [esp+23Ch+ElementSize], eax
.text:00403EB7                 mov     [esp+23Ch+Buffer], ecx
.text:00403EBA                 call    sub_409610
.text:00403EBF                 cmp     eax, 0FFFFFFFFh
.text:00403EC2                 mov     ebp, eax
.text:00403EC4                 jz      loc_403F6F
.text:00403ECA                 test    eax, eax
.text:00403ECC                 jz      short loc_403F30
.text:00403ECE                 mov     [esp+23Ch+ElementCount], eax ; ElementCount
.text:00403ED2                 mov     edx, ds:_iob
.text:00403ED8                 lea     ecx, [esp+23Ch+var_21C]
.text:00403EDC                 mov     [esp+23Ch+ElementSize], 1 ; ElementSize
.text:00403EE4                 mov     [esp+23Ch+Buffer], ecx ; Buffer
.text:00403EE7                 add     edx, 20h ; ' '
.text:00403EEA                 mov     [esp+23Ch+Stream], edx ; char
.text:00403EEE                 call    fwrite
.text:00403EF3                 test    eax, eax
.text:00403EF5                 jz      short loc_403F43
.text:00403EF7
.text:00403EF7 loc_403EF7:                             ; CODE XREF: sub_403E50+11D↓j
.text:00403EF7                 xor     ecx, ecx
.text:00403EF9                 mov     edx, ebp
.text:00403EFB                 mov     ebx, [esp+23Ch+var_220]
.text:00403EFF                 add     [esp+23Ch+var_22C], ebp
.text:00403F03                 mov     ebp, [esp+23Ch+var_224]
.text:00403F07                 not     ebx
.text:00403F09                 adc     [esp+23Ch+var_228], ecx
.text:00403F0D                 not     ebp
.text:00403F0F                 or      ebp, ebx
.text:00403F11                 jz      loc_403E90
.text:00403F17                 sub     esi, edx
.text:00403F19                 sbb     edi, ecx
.text:00403F1B                 mov     ecx, edi
.text:00403F1D                 or      ecx, esi
.text:00403F1F                 jz      short loc_403F30
.text:00403F21                 mov     edx, [esp+23Ch+var_224]
.text:00403F25                 xor     edx, 0FFFFFFFEh
.text:00403F28                 or      ebx, edx
.text:00403F2A                 jnz     loc_403E90
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_403E50+7C↑j
.text:00403F30                                         ; sub_403E50+CF↑j ...
.text:00403F30                 mov     eax, [esp+23Ch+var_22C]
.text:00403F34                 mov     edx, [esp+23Ch+var_228]
.text:00403F38                 add     esp, 22Ch
.text:00403F3E                 pop     ebx
.text:00403F3F                 pop     esi
.text:00403F40                 pop     edi
.text:00403F41                 pop     ebp
.text:00403F42                 retn
.text:00403F43 ; ---------------------------------------------------------------------------
.text:00403F43
.text:00403F43 loc_403F43:                             ; CODE XREF: sub_403E50+A5↑j
.text:00403F43                 mov     [esp+23Ch+Buffer], offset aWriteError ; "write error"
.text:00403F4A                 call    ds:libintl_gettext
.text:00403F50                 mov     ebx, eax
.text:00403F52                 call    _errno
.text:00403F57                 mov     [esp+23Ch+ElementCount], ebx ; char *
.text:00403F5B                 mov     ebx, [eax]
.text:00403F5D                 mov     [esp+23Ch+Buffer], 1 ; Code
.text:00403F64                 mov     [esp+23Ch+ElementSize], ebx ; ErrorMessage
.text:00403F68                 call    sub_40AB80
.text:00403F6D                 jmp     short loc_403EF7
.text:00403F6F ; ---------------------------------------------------------------------------
.text:00403F6F
.text:00403F6F loc_403F6F:                             ; CODE XREF: sub_403E50+74↑j
.text:00403F6F                 call    _errno
.text:00403F74                 cmp     dword ptr [eax], 0Bh
.text:00403F77                 jz      short loc_403F30
.text:00403F79                 mov     esi, [esp+23Ch+arg_0]
.text:00403F80                 mov     [esp+23Ch+Buffer], esi ; char *
.text:00403F83                 call    sub_4095E0
.text:00403F88                 mov     [esp+23Ch+Buffer], offset aErrorReadingS ; "error reading %s"
.text:00403F8F                 mov     ebp, eax
.text:00403F91                 call    ds:libintl_gettext
.text:00403F97                 mov     edi, eax
.text:00403F99                 call    _errno
.text:00403F9E                 mov     [esp+23Ch+Stream], ebp ; char
.text:00403FA2                 mov     [esp+23Ch+ElementCount], edi ; char *
.text:00403FA6                 mov     ebx, [eax]
.text:00403FA8                 mov     [esp+23Ch+Buffer], 1 ; Code
.text:00403FAF                 mov     [esp+23Ch+ElementSize], ebx ; ErrorMessage
.text:00403FB3                 call    sub_40AB80
.text:00403FB8                 jmp     loc_403F30
.text:00403FB8 sub_403E50      endp
.text:00403FB8
.text:00403FB8 ; ---------------------------------------------------------------------------
.text:00403FBD                 align 10h
.text:00403FC0 aSHasBeenReplac db '`%s',27h,' has been replaced with an untailable file; giving up o'
.text:00403FC0                                         ; DATA XREF: sub_404120:loc_404249↓o
.text:00403FC0                 db 'n this name',0
.text:00404007 aSHasBecomeAcce db '`%s',27h,' has become accessible',0
.text:00404007                                         ; DATA XREF: sub_404120:loc_4043DC↓o
.text:00404022                 align 20h
.text:00404040 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/tail.c',0
.text:00404040                                         ; DATA XREF: sub_404120+3B5↓o
.text:00404040                                         ; sub_404120+654↓o ...
.text:00404065 aFFd1           db 'f->fd == -1',0      ; DATA XREF: sub_404120+3BD↓o
.text:00404071                 db 0EBh, 0Dh, 90h
.text:00404074                 align 10h
.text:00404080 aSHasBeenReplac_0 db '`%s',27h,' has been replaced;  following end of new file',0
.text:00404080                                         ; DATA XREF: sub_404120:loc_40458B↓o
.text:004040B3                 align 10h
.text:004040C0 aSHasAppearedFo db '`%s',27h,' has appeared;  following end of new file',0
.text:004040C0                                         ; DATA XREF: sub_404120:loc_404607↓o
.text:004040EE aSHasBecomeInac db '`%s',27h,' has become inaccessible',0
.text:004040EE                                         ; DATA XREF: sub_404120:loc_4046F6↓o
.text:0040410B aValidFileSpecF db 'valid_file_spec (f)',0
.text:0040410B                                         ; DATA XREF: sub_404120+65C↓o
.text:0040411F                 align 10h
.text:00404120
.text:00404120 ; =============== S U B R O U T I N E =======================================
.text:00404120
.text:00404120
.text:00404120 sub_404120      proc near               ; CODE XREF: sub_402620+520↑p
.text:00404120                                         ; sub_402620+607↑p
.text:00404120
.text:00404120 FileHandle      = dword ptr -0ECh
.text:00404120 Offset          = qword ptr -0E8h
.text:00404120 Origin          = dword ptr -0E0h
.text:00404120 var_DC          = dword ptr -0DCh
.text:00404120 var_C0          = dword ptr -0C0h
.text:00404120 var_BC          = dword ptr -0BCh
.text:00404120 var_B8          = dword ptr -0B8h
.text:00404120 var_B4          = dword ptr -0B4h
.text:00404120 var_B0          = byte ptr -0B0h
.text:00404120 var_AF          = byte ptr -0AFh
.text:00404120 var_AE          = byte ptr -0AEh
.text:00404120 var_AD          = byte ptr -0ADh
.text:00404120 var_AC          = byte ptr -0ACh
.text:00404120 var_8C          = dword ptr -8Ch
.text:00404120 var_84          = dword ptr -84h
.text:00404120 var_80          = dword ptr -80h
.text:00404120 var_7C          = dword ptr -7Ch
.text:00404120 var_78          = dword ptr -78h
.text:00404120 var_4C          = dword ptr -4Ch
.text:00404120 var_48          = dword ptr -48h
.text:00404120 arg_0           = dword ptr  4
.text:00404120 arg_4           = byte ptr  8
.text:00404120
.text:00404120                 push    ebp
.text:00404121                 mov     ecx, 2
.text:00404126                 push    edi
.text:00404127                 mov     edi, offset byte_401430
.text:0040412C                 push    esi
.text:0040412D                 push    ebx
.text:0040412E                 sub     esp, 0DCh
.text:00404134                 mov     ebp, [esp+0ECh+arg_0]
.text:0040413B                 movzx   edx, [esp+0ECh+arg_4]
.text:00404143                 mov     [esp+0ECh+var_AE], 1
.text:00404148                 mov     ebx, [ebp+0]
.text:0040414B                 cld
.text:0040414C                 mov     [esp+0ECh+var_AD], dl
.text:00404150                 mov     esi, ebx
.text:00404152                 repe cmpsb
.text:00404154                 movzx   eax, byte ptr [ebp+40h]
.text:00404158                 setz    [esp+0ECh+var_AF]
.text:0040415D                 cmp     [esp+0ECh+var_AF], 0
.text:00404162                 mov     [esp+0ECh+var_B0], al
.text:00404166                 mov     eax, [ebp+44h]
.text:00404169                 mov     edx, eax
.text:0040416B                 mov     [esp+0ECh+var_B4], eax
.text:0040416F                 jnz     loc_404793
.text:00404175                 mov     [esp+0ECh+FileHandle], ebx ; char *
.text:00404178                 xor     ecx, ecx
.text:0040417A                 cmp     [esp+0ECh+var_AD], 0
.text:0040417F                 setz    cl
.text:00404182                 shl     ecx, 2
.text:00404185                 mov     dword ptr [esp+0ECh+Offset], ecx ; int
.text:00404189                 call    sub_409470
.text:0040418E                 mov     [esp+0ECh+var_B8], eax
.text:00404192                 mov     edx, [ebp+44h]
.text:00404195
.text:00404195 loc_404195:                             ; CODE XREF: sub_404120+67B↓j
.text:00404195                 test    edx, edx
.text:00404197                 mov     eax, [ebp+4]
.text:0040419A                 jnz     loc_404788
.text:004041A0                 inc     eax
.text:004041A1                 setnz   al
.text:004041A4
.text:004041A4 loc_4041A4:                             ; CODE XREF: sub_404120+66E↓j
.text:004041A4                 movzx   edx, al
.text:004041A7                 movzx   ebx, dl
.text:004041AA                 test    bl, bl
.text:004041AC                 jz      loc_40476C
.text:004041B2                 xor     eax, eax
.text:004041B4                 cmp     ds:byte_416000, 0
.text:004041BB                 jz      short loc_4041C4
.text:004041BD                 cmp     [esp+0ECh+var_B8], 0FFFFFFFFh
.text:004041C2                 jz      short loc_4041C6
.text:004041C4
.text:004041C4 loc_4041C4:                             ; CODE XREF: sub_404120+9B↑j
.text:004041C4                 mov     al, 1
.text:004041C6
.text:004041C6 loc_4041C6:                             ; CODE XREF: sub_404120+A2↑j
.text:004041C6                 cmp     [esp+0ECh+var_B8], 0FFFFFFFFh
.text:004041CB                 mov     [ebp+40h], al
.text:004041CE                 jz      loc_4046B3
.text:004041D4                 mov     esi, [esp+0ECh+var_B8]
.text:004041D8                 lea     edi, [esp+0ECh+var_8C]
.text:004041DC                 mov     dword ptr [esp+0ECh+Offset], edi ; int
.text:004041E0                 mov     [esp+0ECh+FileHandle], esi ; char *
.text:004041E3                 call    sub_40AE20
.text:004041E8                 test    eax, eax
.text:004041EA                 js      loc_4046B3
.text:004041F0                 mov     eax, [esp+0ECh+var_8C]
.text:004041F4                 and     eax, 0F000h
.text:004041F9                 cmp     eax, 8000h
.text:004041FE                 jz      loc_4046A7
.text:00404204                 cmp     eax, 1000h
.text:00404209                 jz      loc_4046A7
.text:0040420F                 cmp     eax, 2000h
.text:00404214                 jz      loc_4046A7
.text:0040421A                 mov     [esp+0ECh+var_AE], 0
.text:0040421F                 mov     edx, [ebp+0]
.text:00404222                 mov     ecx, 2
.text:00404227                 mov     dword ptr [ebp+44h], 0FFFFFFFFh
.text:0040422E                 mov     edi, offset byte_401430
.text:00404233                 cld
.text:00404234                 mov     esi, edx
.text:00404236                 repe cmpsb
.text:00404238                 setnbe  al
.text:0040423B                 mov     esi, edx
.text:0040423D                 setb    cl
.text:00404240                 cmp     al, cl
.text:00404242                 jnz     short loc_404249
.text:00404244                 mov     esi, offset aStandardInput ; "standard input"
.text:00404249
.text:00404249 loc_404249:                             ; CODE XREF: sub_404120+122↑j
.text:00404249                 mov     [esp+0ECh+FileHandle], offset aSHasBeenReplac ; "`%s' has been replaced with an untailab"...
.text:00404250                 call    ds:libintl_gettext
.text:00404256                 mov     [esp+0ECh+Origin], esi ; char
.text:0040425A                 mov     dword ptr [esp+0ECh+Offset], 0 ; ErrorMessage
.text:00404262                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:00404269                 mov     dword ptr [esp+0ECh+Offset+4], eax ; char *
.text:0040426D                 call    sub_40AB80
.text:00404272                 mov     byte ptr [ebp+30h], 1
.text:00404276                 lea     esi, [esi+0]
.text:00404279                 lea     edi, [edi+0]
.text:00404280
.text:00404280 loc_404280:                             ; CODE XREF: sub_404120+58E↓j
.text:00404280                                         ; sub_404120+5AD↓j ...
.text:00404280                 cmp     [esp+0ECh+var_AE], 0
.text:00404285                 jnz     loc_404398
.text:0040428B                 cld
.text:0040428C                 mov     ebx, [ebp+0]
.text:0040428F                 mov     ecx, 2
.text:00404294                 mov     edi, offset byte_401430
.text:00404299                 mov     esi, ebx
.text:0040429B                 repe cmpsb
.text:0040429D                 setnbe  al
.text:004042A0                 mov     esi, ebx
.text:004042A2                 setb    cl
.text:004042A5                 cmp     al, cl
.text:004042A7                 jnz     short loc_4042AE
.text:004042A9                 mov     esi, offset aStandardInput ; "standard input"
.text:004042AE
.text:004042AE loc_4042AE:                             ; CODE XREF: sub_404120+187↑j
.text:004042AE                 mov     edi, [esp+0ECh+var_B8]
.text:004042B2                 inc     edi
.text:004042B3                 cmp     edi, 1
.text:004042B6                 ja      loc_404348
.text:004042BC
.text:004042BC loc_4042BC:                             ; CODE XREF: sub_404120+23B↓j
.text:004042BC                 cld
.text:004042BD                 mov     edx, [ebp+4]
.text:004042C0                 mov     ecx, 2
.text:004042C5                 mov     esi, ebx
.text:004042C7                 mov     edi, offset byte_401430
.text:004042CC                 mov     [esp+0ECh+var_BC], edx
.text:004042D0                 repe cmpsb
.text:004042D2                 setnbe  al
.text:004042D5                 mov     esi, ebx
.text:004042D7                 setb    cl
.text:004042DA                 cmp     al, cl
.text:004042DC                 jnz     short loc_4042E3
.text:004042DE                 mov     esi, offset aStandardInput ; "standard input"
.text:004042E3
.text:004042E3 loc_4042E3:                             ; CODE XREF: sub_404120+1BC↑j
.text:004042E3                 mov     ebx, [esp+0ECh+var_BC]
.text:004042E7                 inc     ebx
.text:004042E8                 cmp     ebx, 1
.text:004042EB                 ja      short loc_404300
.text:004042ED
.text:004042ED loc_4042ED:                             ; CODE XREF: sub_404120+1EE↓j
.text:004042ED                                         ; sub_404120+226↓j
.text:004042ED                 mov     dword ptr [ebp+4], 0FFFFFFFFh
.text:004042F4
.text:004042F4 loc_4042F4:                             ; CODE XREF: sub_404120+3A2↓j
.text:004042F4                                         ; sub_404120+528↓j ...
.text:004042F4                 add     esp, 0DCh
.text:004042FA                 pop     ebx
.text:004042FB                 pop     esi
.text:004042FC                 pop     edi
.text:004042FD                 pop     ebp
.text:004042FE                 retn
.text:004042FE ; ---------------------------------------------------------------------------
.text:004042FF                 align 10h
.text:00404300
.text:00404300 loc_404300:                             ; CODE XREF: sub_404120+1CB↑j
.text:00404300                 mov     edi, [esp+0ECh+var_BC]
.text:00404304                 mov     [esp+0ECh+FileHandle], edi ; FileHandle
.text:00404307                 call    _close
.text:0040430C                 test    eax, eax
.text:0040430E                 jz      short loc_4042ED
.text:00404310                 mov     [esp+0ECh+FileHandle], 402D23h
.text:00404317                 call    ds:libintl_gettext
.text:0040431D                 mov     edi, eax
.text:0040431F                 call    _errno
.text:00404324                 mov     [esp+0ECh+Origin], esi ; char
.text:00404328                 mov     ecx, [esp+0ECh+var_BC]
.text:0040432C                 mov     dword ptr [esp+0ECh+Offset+4], edi ; char *
.text:00404330                 mov     [esp+0ECh+var_DC], ecx
.text:00404334                 mov     esi, [eax]
.text:00404336                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:0040433D                 mov     dword ptr [esp+0ECh+Offset], esi ; ErrorMessage
.text:00404341                 call    sub_40AB80
.text:00404346                 jmp     short loc_4042ED
.text:00404348 ; ---------------------------------------------------------------------------
.text:00404348
.text:00404348 loc_404348:                             ; CODE XREF: sub_404120+196↑j
.text:00404348                 mov     ebx, [esp+0ECh+var_B8]
.text:0040434C                 mov     [esp+0ECh+FileHandle], ebx ; FileHandle
.text:0040434F                 call    _close
.text:00404354                 test    eax, eax
.text:00404356                 jnz     short loc_404360
.text:00404358
.text:00404358 loc_404358:                             ; CODE XREF: sub_404120+276↓j
.text:00404358                 mov     ebx, [ebp+0]
.text:0040435B                 jmp     loc_4042BC
.text:00404360 ; ---------------------------------------------------------------------------
.text:00404360
.text:00404360 loc_404360:                             ; CODE XREF: sub_404120+236↑j
.text:00404360                 mov     [esp+0ECh+FileHandle], 402D23h
.text:00404367                 call    ds:libintl_gettext
.text:0040436D                 mov     edi, eax
.text:0040436F                 call    _errno
.text:00404374                 mov     [esp+0ECh+Origin], esi ; char
.text:00404378                 mov     ecx, [esp+0ECh+var_B8]
.text:0040437C                 mov     dword ptr [esp+0ECh+Offset+4], edi ; char *
.text:00404380                 mov     [esp+0ECh+var_DC], ecx
.text:00404384                 mov     esi, [eax]
.text:00404386                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:0040438D                 mov     dword ptr [esp+0ECh+Offset], esi ; ErrorMessage
.text:00404391                 call    sub_40AB80
.text:00404396                 jmp     short loc_404358
.text:00404398 ; ---------------------------------------------------------------------------
.text:00404398
.text:00404398 loc_404398:                             ; CODE XREF: sub_404120+165↑j
.text:00404398                 mov     edx, [esp+0ECh+var_B4]
.text:0040439C                 test    edx, edx
.text:0040439E                 jz      loc_4044F0
.text:004043A4                 cmp     [esp+0ECh+var_B4], 2
.text:004043A9                 jz      loc_4044F0
.text:004043AF                 cmp     dword ptr [ebp+4], 0FFFFFFFFh
.text:004043B3                 jnz     loc_4044CD
.text:004043B9                 cld
.text:004043BA                 mov     edx, [ebp+0]
.text:004043BD                 mov     ecx, 2
.text:004043C2                 mov     edi, offset byte_401430
.text:004043C7                 mov     esi, edx
.text:004043C9                 repe cmpsb
.text:004043CB                 setnbe  al
.text:004043CE                 mov     esi, edx
.text:004043D0                 setb    cl
.text:004043D3                 cmp     al, cl
.text:004043D5                 jnz     short loc_4043DC
.text:004043D7                 mov     esi, offset aStandardInput ; "standard input"
.text:004043DC
.text:004043DC loc_4043DC:                             ; CODE XREF: sub_404120+2B5↑j
.text:004043DC                 mov     [esp+0ECh+FileHandle], offset aSHasBecomeAcce ; "`%s' has become accessible"
.text:004043E3
.text:004043E3 loc_4043E3:                             ; CODE XREF: sub_404120+472↓j
.text:004043E3                                         ; sub_404120+4EE↓j
.text:004043E3                 call    ds:libintl_gettext
.text:004043E9                 mov     [esp+0ECh+Origin], esi ; char
.text:004043ED                 mov     dword ptr [esp+0ECh+Offset], 0 ; ErrorMessage
.text:004043F5                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:004043FC                 mov     dword ptr [esp+0ECh+Offset+4], eax ; char *
.text:00404400                 call    sub_40AB80
.text:00404405
.text:00404405 loc_404405:                             ; CODE XREF: sub_404120+4F7↓j
.text:00404405                                         ; sub_404120+582↓j
.text:00404405                 xor     [esp+0ECh+var_AF], 1
.text:0040440A                 cld
.text:0040440B                 mov     eax, [esp+0ECh+var_B8]
.text:0040440F                 mov     dword ptr [ebp+8], 0
.text:00404416                 mov     ecx, [esp+0ECh+var_4C]
.text:0040441D                 mov     dword ptr [ebp+0Ch], 0
.text:00404424                 mov     edx, [esp+0ECh+var_7C]
.text:00404428                 mov     byte ptr [ebp+30h], 0
.text:0040442C                 mov     ebx, [esp+0ECh+var_48]
.text:00404433                 movzx   esi, [esp+0ECh+var_AF]
.text:00404438                 movzx   edi, [esp+0ECh+var_AD]
.text:0040443D                 mov     [ebp+4], eax
.text:00404440                 mov     [ebp+10h], ecx
.text:00404443                 dec     esi
.text:00404444                 or      edi, esi
.text:00404446                 mov     [ebp+14h], ebx
.text:00404449                 mov     esi, [esp+0ECh+var_78]
.text:0040444D                 mov     [ebp+18h], edx
.text:00404450                 mov     edx, [ebp+0]
.text:00404453                 mov     [ebp+1Ch], esi
.text:00404456                 mov     ecx, [esp+0ECh+var_84]
.text:0040445A                 mov     ebx, [esp+0ECh+var_80]
.text:0040445E                 mov     dword ptr [ebp+38h], 0
.text:00404465                 mov     esi, [esp+0ECh+var_8C]
.text:00404469                 mov     [ebp+20h], ecx
.text:0040446C                 mov     ecx, 2
.text:00404471                 mov     [ebp+28h], si
.text:00404475                 mov     esi, edx
.text:00404477                 mov     [ebp+2Ch], edi
.text:0040447A                 mov     edi, offset byte_401430
.text:0040447F                 mov     [ebp+24h], ebx
.text:00404482                 mov     dword ptr [ebp+3Ch], 0
.text:00404489                 repe cmpsb
.text:0040448B                 setnbe  al
.text:0040448E                 mov     edi, edx
.text:00404490                 setb    cl
.text:00404493                 cmp     al, cl
.text:00404495                 jnz     short loc_40449C
.text:00404497                 mov     edi, offset aStandardInput ; "standard input"
.text:0040449C
.text:0040449C loc_40449C:                             ; CODE XREF: sub_404120+375↑j
.text:0040449C                 mov     [esp+0ECh+Origin], 0 ; Origin
.text:004044A4                 mov     ebp, [esp+0ECh+var_B8]
.text:004044A8                 mov     dword ptr [esp+0ECh+Offset], 0 ; Offset
.text:004044B0                 mov     dword ptr [esp+0ECh+Offset+4], 0
.text:004044B8                 mov     [esp+0ECh+FileHandle], ebp ; FileHandle
.text:004044BB                 call    _lseeki64
.text:004044C0                 test    edx, edx
.text:004044C2                 jns     loc_4042F4
.text:004044C8                 jmp     loc_4047A0
.text:004044CD ; ---------------------------------------------------------------------------
.text:004044CD
.text:004044CD loc_4044CD:                             ; CODE XREF: sub_404120+293↑j
.text:004044CD                 mov     dword ptr [esp+0ECh+Offset+4], 38Fh
.text:004044D5                 mov     dword ptr [esp+0ECh+Offset], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tail.c"
.text:004044DD                 mov     [esp+0ECh+FileHandle], offset aFFd1 ; "f->fd == -1"
.text:004044E4
.text:004044E4 loc_4044E4:                             ; CODE XREF: sub_404120+663↓j
.text:004044E4                 call    _assert
.text:004044E4 ; ---------------------------------------------------------------------------
.text:004044E9                 align 10h
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: sub_404120+27E↑j
.text:004044F0                                         ; sub_404120+289↑j
.text:004044F0                 mov     edx, [ebp+24h]
.text:004044F3                 mov     esi, [ebp+20h]
.text:004044F6                 mov     edi, [esp+0ECh+var_84]
.text:004044FA                 mov     ecx, [esp+0ECh+var_80]
.text:004044FE                 mov     eax, edx
.text:00404500                 xor     edi, esi
.text:00404502                 xor     eax, ecx
.text:00404504                 or      eax, edi
.text:00404506                 jnz     short loc_404530
.text:00404508                 mov     edx, [ebp+1Ch]
.text:0040450B                 mov     esi, [ebp+18h]
.text:0040450E                 mov     edi, [esp+0ECh+var_7C]
.text:00404512                 mov     ecx, [esp+0ECh+var_78]
.text:00404516                 mov     eax, edx
.text:00404518                 xor     edi, esi
.text:0040451A                 xor     eax, ecx
.text:0040451C                 or      eax, edi
.text:0040451E                 jz      loc_404613
.text:00404524                 lea     esi, [esi+0]
.text:0040452A                 lea     edi, [edi+0]
.text:00404530
.text:00404530 loc_404530:                             ; CODE XREF: sub_404120+3E6↑j
.text:00404530                 mov     ebx, [ebp+4]
.text:00404533                 mov     [esp+0ECh+var_C0], ebx
.text:00404537                 inc     ebx
.text:00404538                 jz      loc_4045E4
.text:0040453E                 cld
.text:0040453F                 mov     ebx, [ebp+0]
.text:00404542                 mov     ecx, 2
.text:00404547                 mov     edi, offset byte_401430
.text:0040454C                 mov     esi, ebx
.text:0040454E                 repe cmpsb
.text:00404550                 setnbe  al
.text:00404553                 mov     esi, ebx
.text:00404555                 setb    cl
.text:00404558                 cmp     al, cl
.text:0040455A                 jnz     short loc_404561
.text:0040455C                 mov     esi, offset aStandardInput ; "standard input"
.text:00404561
.text:00404561 loc_404561:                             ; CODE XREF: sub_404120+43A↑j
.text:00404561                 mov     edi, [esp+0ECh+var_C0]
.text:00404565                 inc     edi
.text:00404566                 cmp     edi, 1
.text:00404569                 ja      short loc_404597
.text:0040456B
.text:0040456B loc_40456B:                             ; CODE XREF: sub_404120+48A↓j
.text:0040456B                 cld
.text:0040456C                 mov     ecx, 2
.text:00404571                 mov     esi, ebx
.text:00404573                 mov     edi, offset byte_401430
.text:00404578                 repe cmpsb
.text:0040457A                 setnbe  al
.text:0040457D                 mov     esi, ebx
.text:0040457F                 setb    cl
.text:00404582                 cmp     al, cl
.text:00404584                 jnz     short loc_40458B
.text:00404586                 mov     esi, offset aStandardInput ; "standard input"
.text:0040458B
.text:0040458B loc_40458B:                             ; CODE XREF: sub_404120+464↑j
.text:0040458B                 mov     [esp+0ECh+FileHandle], offset aSHasBeenReplac_0 ; "`%s' has been replaced;  following end "...
.text:00404592                 jmp     loc_4043E3
.text:00404597 ; ---------------------------------------------------------------------------
.text:00404597
.text:00404597 loc_404597:                             ; CODE XREF: sub_404120+449↑j
.text:00404597                 mov     ebx, [esp+0ECh+var_C0]
.text:0040459B                 mov     [esp+0ECh+FileHandle], ebx ; FileHandle
.text:0040459E                 call    _close
.text:004045A3                 test    eax, eax
.text:004045A5                 jnz     short loc_4045AC
.text:004045A7
.text:004045A7 loc_4045A7:                             ; CODE XREF: sub_404120+4C2↓j
.text:004045A7                 mov     ebx, [ebp+0]
.text:004045AA                 jmp     short loc_40456B
.text:004045AC ; ---------------------------------------------------------------------------
.text:004045AC
.text:004045AC loc_4045AC:                             ; CODE XREF: sub_404120+485↑j
.text:004045AC                 mov     [esp+0ECh+FileHandle], 402D23h
.text:004045B3                 call    ds:libintl_gettext
.text:004045B9                 mov     edi, eax
.text:004045BB                 call    _errno
.text:004045C0                 mov     [esp+0ECh+Origin], esi ; char
.text:004045C4                 mov     ecx, [esp+0ECh+var_C0]
.text:004045C8                 mov     dword ptr [esp+0ECh+Offset+4], edi ; char *
.text:004045CC                 mov     [esp+0ECh+var_DC], ecx
.text:004045D0                 mov     esi, [eax]
.text:004045D2                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:004045D9                 mov     dword ptr [esp+0ECh+Offset], esi ; ErrorMessage
.text:004045DD                 call    sub_40AB80
.text:004045E2                 jmp     short loc_4045A7
.text:004045E4 ; ---------------------------------------------------------------------------
.text:004045E4
.text:004045E4 loc_4045E4:                             ; CODE XREF: sub_404120+418↑j
.text:004045E4                 cld
.text:004045E5                 mov     edx, [ebp+0]
.text:004045E8                 mov     ecx, 2
.text:004045ED                 mov     edi, offset byte_401430
.text:004045F2                 mov     esi, edx
.text:004045F4                 repe cmpsb
.text:004045F6                 setnbe  al
.text:004045F9                 mov     esi, edx
.text:004045FB                 setb    cl
.text:004045FE                 cmp     al, cl
.text:00404600                 jnz     short loc_404607
.text:00404602                 mov     esi, offset aStandardInput ; "standard input"
.text:00404607
.text:00404607 loc_404607:                             ; CODE XREF: sub_404120+4E0↑j
.text:00404607                 mov     [esp+0ECh+FileHandle], offset aSHasAppearedFo ; "`%s' has appeared;  following end of ne"...
.text:0040460E                 jmp     loc_4043E3
.text:00404613 ; ---------------------------------------------------------------------------
.text:00404613
.text:00404613 loc_404613:                             ; CODE XREF: sub_404120+3FE↑j
.text:00404613                 cmp     dword ptr [ebp+4], 0FFFFFFFFh
.text:00404617                 jz      loc_404405
.text:0040461D                 cld
.text:0040461E                 mov     edx, [ebp+0]
.text:00404621                 mov     ecx, 2
.text:00404626                 mov     edi, offset byte_401430
.text:0040462B                 mov     esi, edx
.text:0040462D                 repe cmpsb
.text:0040462F                 setnbe  al
.text:00404632                 mov     esi, edx
.text:00404634                 setb    cl
.text:00404637                 cmp     al, cl
.text:00404639                 jnz     short loc_404640
.text:0040463B                 mov     esi, offset aStandardInput ; "standard input"
.text:00404640
.text:00404640 loc_404640:                             ; CODE XREF: sub_404120+519↑j
.text:00404640                 mov     ebx, [esp+0ECh+var_B8]
.text:00404644                 inc     ebx
.text:00404645                 cmp     ebx, 1
.text:00404648                 jbe     loc_4042F4
.text:0040464E                 mov     edi, [esp+0ECh+var_B8]
.text:00404652                 mov     [esp+0ECh+FileHandle], edi ; FileHandle
.text:00404655                 call    _close
.text:0040465A                 test    eax, eax
.text:0040465C                 jz      loc_4042F4
.text:00404662                 mov     [esp+0ECh+FileHandle], 402D23h
.text:00404669                 call    ds:libintl_gettext
.text:0040466F                 mov     edi, eax
.text:00404671                 call    _errno
.text:00404676                 mov     [esp+0ECh+Origin], esi ; char
.text:0040467A                 mov     ebx, [esp+0ECh+var_B8]
.text:0040467E                 mov     dword ptr [esp+0ECh+Offset+4], edi ; char *
.text:00404682                 mov     [esp+0ECh+var_DC], ebx
.text:00404686                 mov     esi, [eax]
.text:00404688                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:0040468F                 mov     dword ptr [esp+0ECh+Offset], esi ; ErrorMessage
.text:00404693                 call    sub_40AB80
.text:00404698                 xor     ecx, ecx
.text:0040469A                 test    cl, cl
.text:0040469C                 jz      loc_4042F4
.text:004046A2                 jmp     loc_404405
.text:004046A7 ; ---------------------------------------------------------------------------
.text:004046A7
.text:004046A7 loc_4046A7:                             ; CODE XREF: sub_404120+DE↑j
.text:004046A7                                         ; sub_404120+E9↑j ...
.text:004046A7                 mov     dword ptr [ebp+44h], 0
.text:004046AE                 jmp     loc_404280
.text:004046B3 ; ---------------------------------------------------------------------------
.text:004046B3
.text:004046B3 loc_4046B3:                             ; CODE XREF: sub_404120+AE↑j
.text:004046B3                                         ; sub_404120+CA↑j
.text:004046B3                 mov     [esp+0ECh+var_AE], 0
.text:004046B8                 call    _errno
.text:004046BD                 cmp     byte ptr [ebp+40h], 0
.text:004046C1                 mov     ecx, [eax]
.text:004046C3                 mov     [ebp+44h], ecx
.text:004046C6                 jnz     short loc_404723
.text:004046C8                 cmp     [esp+0ECh+var_B0], 0
.text:004046CD                 jz      loc_404280
.text:004046D3                 cld
.text:004046D4                 mov     edx, [ebp+0]
.text:004046D7                 mov     ecx, 2
.text:004046DC                 mov     edi, offset byte_401430
.text:004046E1                 mov     esi, edx
.text:004046E3                 repe cmpsb
.text:004046E5                 setnbe  al
.text:004046E8                 mov     esi, edx
.text:004046EA                 setb    cl
.text:004046ED                 cmp     al, cl
.text:004046EF                 jnz     short loc_4046F6
.text:004046F1                 mov     esi, offset aStandardInput ; "standard input"
.text:004046F6
.text:004046F6 loc_4046F6:                             ; CODE XREF: sub_404120+5CF↑j
.text:004046F6                 mov     [esp+0ECh+FileHandle], offset aSHasBecomeInac ; "`%s' has become inaccessible"
.text:004046FD                 call    ds:libintl_gettext
.text:00404703                 mov     [esp+0ECh+Origin], esi ; char
.text:00404707                 mov     dword ptr [esp+0ECh+Offset+4], eax ; char *
.text:0040470B                 mov     eax, [ebp+44h]
.text:0040470E
.text:0040470E loc_40470E:                             ; CODE XREF: sub_404120+64A↓j
.text:0040470E                 mov     dword ptr [esp+0ECh+Offset], eax ; ErrorMessage
.text:00404712                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:00404719                 call    sub_40AB80
.text:0040471E                 jmp     loc_404280
.text:00404723 ; ---------------------------------------------------------------------------
.text:00404723
.text:00404723 loc_404723:                             ; CODE XREF: sub_404120+5A6↑j
.text:00404723                 call    _errno
.text:00404728                 mov     ebx, [esp+0ECh+var_B4]
.text:0040472C                 cmp     ebx, [eax]
.text:0040472E                 jz      loc_404280
.text:00404734                 cld
.text:00404735                 mov     edx, [ebp+0]
.text:00404738                 mov     ecx, 2
.text:0040473D                 mov     edi, offset byte_401430
.text:00404742                 mov     esi, edx
.text:00404744                 repe cmpsb
.text:00404746                 setnbe  al
.text:00404749                 mov     esi, edx
.text:0040474B                 setb    cl
.text:0040474E                 cmp     al, cl
.text:00404750                 jnz     short loc_404757
.text:00404752                 mov     esi, offset aStandardInput ; "standard input"
.text:00404757
.text:00404757 loc_404757:                             ; CODE XREF: sub_404120+630↑j
.text:00404757                 call    _errno
.text:0040475C                 mov     [esp+0ECh+Origin], esi
.text:00404760                 mov     dword ptr [esp+0ECh+Offset+4], offset aS ; "%s"
.text:00404768                 mov     eax, [eax]
.text:0040476A                 jmp     short loc_40470E
.text:0040476C ; ---------------------------------------------------------------------------
.text:0040476C
.text:0040476C loc_40476C:                             ; CODE XREF: sub_404120+8C↑j
.text:0040476C                 mov     dword ptr [esp+0ECh+Offset+4], 358h
.text:00404774                 mov     dword ptr [esp+0ECh+Offset], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tail.c"
.text:0040477C                 mov     [esp+0ECh+FileHandle], offset aValidFileSpecF ; "valid_file_spec (f)"
.text:00404783                 jmp     loc_4044E4
.text:00404788 ; ---------------------------------------------------------------------------
.text:00404788
.text:00404788 loc_404788:                             ; CODE XREF: sub_404120+7A↑j
.text:00404788                 cmp     eax, 0FFFFFFFFh
.text:0040478B                 setz    al
.text:0040478E                 jmp     loc_4041A4
.text:00404793 ; ---------------------------------------------------------------------------
.text:00404793
.text:00404793 loc_404793:                             ; CODE XREF: sub_404120+4F↑j
.text:00404793                 mov     [esp+0ECh+var_B8], 0
.text:0040479B                 jmp     loc_404195
.text:004047A0 ; ---------------------------------------------------------------------------
.text:004047A0
.text:004047A0 loc_4047A0:                             ; CODE XREF: sub_404120+3A8↑j
.text:004047A0                 mov     [esp+0ECh+FileHandle], 0
.text:004047A7                 lea     edx, [esp+0ECh+var_AC]
.text:004047AB                 mov     dword ptr [esp+0ECh+Offset+4], edx
.text:004047AF                 mov     dword ptr [esp+0ECh+Offset], 0
.text:004047B7                 call    sub_4094F0
.text:004047BC                 mov     [esp+0ECh+FileHandle], offset aSCannotSeekToO ; "%s: cannot seek to offset %s"
.text:004047C3                 mov     ebx, eax
.text:004047C5                 call    ds:libintl_gettext
.text:004047CB                 mov     ebp, eax
.text:004047CD                 call    _errno
.text:004047D2                 mov     [esp+0ECh+var_DC], ebx
.text:004047D6                 mov     [esp+0ECh+Origin], edi ; char
.text:004047DA                 mov     dword ptr [esp+0ECh+Offset+4], ebp ; char *
.text:004047DE                 mov     edi, [eax]
.text:004047E0                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:004047E7                 mov     dword ptr [esp+0ECh+Offset], edi ; ErrorMessage
.text:004047EB                 call    sub_40AB80
.text:004047F0                 mov     [esp+0ECh+FileHandle], 1 ; Code
.text:004047F7                 call    exit
.text:004047F7 sub_404120      endp
.text:004047F7
.text:004047F7 ; ---------------------------------------------------------------------------
.text:004047FC                 align 10h
.text:00404800
.text:00404800 loc_404800:                             ; DATA XREF: sub_404880+254↓o
.text:00404800                                         ; sub_404880+481↓o
.text:00404800                 and     eax, 63203A73h
.text:00404805                 popa
.text:00404806                 outsb
.text:00404807                 outsb
.text:00404808                 outsd
.text:00404809                 jz      short loc_40482B
.text:0040480B                 jnb     short near ptr loc_404871+1
.text:0040480D                 imul    esp, gs:[eax], 74h ; 't'
.text:00404811                 outsd
.text:00404812                 and     [edx+65h], dh
.text:00404815                 insb
.text:00404816                 popa
.text:00404817                 jz      short loc_404882
.text:00404819                 jbe     short sub_404880
.text:0040481B                 and     [edi+66h], ch
.text:0040481E                 db      66h
.text:0040481E                 jnb     short near ptr 4886h
.text:00404821                 jz      short near ptr loc_404840+3
.text:00404823                 and     eax, 90900073h
.text:00404828                 nop
.text:00404829                 nop
.text:0040482A                 nop
.text:0040482B
.text:0040482B loc_40482B:                             ; CODE XREF: .text:00404809↑j
.text:0040482B                 nop
.text:0040482C                 nop
.text:0040482D                 nop
.text:0040482E                 nop
.text:0040482F                 nop
.text:00404830                 nop
.text:00404831                 nop
.text:00404832                 nop
.text:00404833                 nop
.text:00404834                 nop
.text:00404835                 nop
.text:00404836                 nop
.text:00404837                 nop
.text:00404838                 nop
.text:00404839                 nop
.text:0040483A                 nop
.text:0040483B                 nop
.text:0040483C                 nop
.text:0040483D                 nop
.text:0040483E                 nop
.text:0040483F                 nop
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: .text:00404821↑j
.text:00404840                                         ; DATA XREF: sub_404880+437↓o
.text:00404840                 and     eax, 63203A73h
.text:00404845                 popa
.text:00404846                 outsb
.text:00404847                 outsb
.text:00404848                 outsd
.text:00404849                 jz      short near ptr loc_404867+4
.text:0040484B                 jnb     short near ptr loc_4048AF+3
.text:0040484D                 imul    esp, gs:[eax], 74h ; 't'
.text:00404851                 outsd
.text:00404852                 and     [ebp+6Eh], ah
.text:00404855                 db      64h
.text:00404855                 sub     eax, 616C6572h
.text:0040485B                 jz      short near ptr loc_4048C4+2
.text:0040485D                 jbe     short loc_4048C4
.text:0040485F                 and     [edi+66h], ch
.text:00404862                 db      66h
.text:00404862                 jnb     short near ptr 48CAh
.text:00404865                 jz      short near ptr loc_404884+3
.text:00404867
.text:00404867 loc_404867:                             ; CODE XREF: .text:00404849↑j
.text:00404867                 and     eax, 61630073h
.text:0040486C                 outsb
.text:0040486D                 outsb
.text:0040486E                 outsd
.text:0040486F                 jz      short loc_404891
.text:00404871
.text:00404871 loc_404871:                             ; CODE XREF: .text:0040480B↑j
.text:00404871                 db      66h
.text:00404871                 jnb     short near ptr 48E8h
.text:00404874                 popa
.text:00404875                 jz      short near ptr loc_404891+6
.text:00404877                 and     eax, 0B68D0073h
.text:00404877 ; ---------------------------------------------------------------------------
.text:0040487C                 dd 0
.text:00404880
.text:00404880 ; =============== S U B R O U T I N E =======================================
.text:00404880
.text:00404880
.text:00404880 ; int __cdecl sub_404880(char *, char *, __int64 Offset, int)
.text:00404880 sub_404880      proc near               ; CODE XREF: sub_402D60+40F↑p
.text:00404880                                         ; .text:00404819↑j
.text:00404880
.text:00404880 FileHandle      = dword ptr -34Ch
.text:00404880 ElementSize     = dword ptr -348h
.text:00404880 ElementCount    = dword ptr -344h
.text:00404880 Stream          = dword ptr -340h
.text:00404880 var_33C         = dword ptr -33Ch
.text:00404880 var_32C         = byte ptr -32Ch
.text:00404880 var_30C         = byte ptr -30Ch
.text:00404880 var_2EC         = byte ptr -2ECh
.text:00404880 var_2CC         = byte ptr -2CCh
.text:00404880 var_2AC         = byte ptr -2ACh
.text:00404880 var_AC          = byte ptr -0ACh
.text:00404880 var_8C          = dword ptr -8Ch
.text:00404880 arg_0           = dword ptr  4
.text:00404880 arg_4           = dword ptr  8
.text:00404880 Offset          = qword ptr  0Ch
.text:00404880 arg_10          = dword ptr  14h
.text:00404880
.text:00404880                 push    ebp
.text:00404881                 push    edi
.text:00404882
.text:00404882 loc_404882:                             ; CODE XREF: .text:00404817↑j
.text:00404882                 push    esi
.text:00404883                 push    ebx
.text:00404884
.text:00404884 loc_404884:                             ; CODE XREF: .text:00404865↑j
.text:00404884                 sub     esp, 33Ch
.text:0040488A                 mov     edx, [esp+34Ch+arg_4]
.text:00404891
.text:00404891 loc_404891:                             ; CODE XREF: .text:0040486F↑j
.text:00404891                                         ; .text:00404875↑j
.text:00404891                 mov     edi, dword ptr [esp+34Ch+Offset]
.text:00404898                 mov     ebp, dword ptr [esp+34Ch+Offset+4]
.text:0040489F                 mov     [esp+34Ch+FileHandle], edx ; FileHandle
.text:004048A2                 call    _isatty
.text:004048A7                 test    eax, eax
.text:004048A9                 jz      loc_404D56
.text:004048AF
.text:004048AF loc_4048AF:                             ; CODE XREF: sub_404880+4FB↓j
.text:004048AF                                         ; sub_404880+515↓j ...
.text:004048AF                 mov     edx, [esp+34Ch+arg_4]
.text:004048B6                 lea     ecx, [esp+34Ch+var_8C]
.text:004048BD                 mov     [esp+34Ch+ElementSize], ecx ; int
.text:004048C1                 mov     [esp+34Ch+FileHandle], edx ; char *
.text:004048C4
.text:004048C4 loc_4048C4:                             ; CODE XREF: .text:0040485D↑j
.text:004048C4                                         ; .text:0040485B↑j
.text:004048C4                 call    sub_40AE20
.text:004048C9                 test    eax, eax
.text:004048CB                 jnz     loc_404D10
.text:004048D1                 cmp     ds:byte_416030, 0
.text:004048D8                 jz      loc_404B20
.text:004048DE                 cmp     ds:byte_416070, 0
.text:004048E5                 jnz     short loc_404900
.text:004048E7                 mov     edx, [esp+34Ch+var_8C]
.text:004048EE                 and     edx, 0F000h
.text:004048F4                 cmp     edx, 8000h
.text:004048FA                 jz      loc_404A7D
.text:00404900
.text:00404900 loc_404900:                             ; CODE XREF: sub_404880+65↑j
.text:00404900                                         ; sub_404880+203↓j
.text:00404900                 cmp     ebp, 0
.text:00404903                 mov     ebx, edi
.text:00404905                 mov     esi, ebp
.text:00404907                 jbe     loc_404A6F
.text:0040490D
.text:0040490D loc_40490D:                             ; CODE XREF: sub_404880+1F2↓j
.text:0040490D                 lea     edi, [esp+34Ch+var_2AC]
.text:00404914                 lea     esi, [esi+0]
.text:0040491A                 lea     edi, [edi+0]
.text:00404920
.text:00404920 loc_404920:                             ; CODE XREF: sub_404880+E1↓j
.text:00404920                                         ; sub_404880+E6↓j
.text:00404920                 mov     [esp+34Ch+ElementCount], 200h
.text:00404928                 mov     eax, [esp+34Ch+arg_4]
.text:0040492F                 mov     [esp+34Ch+ElementSize], edi
.text:00404933                 mov     [esp+34Ch+FileHandle], eax
.text:00404936                 call    sub_409610
.text:0040493B                 test    eax, eax
.text:0040493D                 jz      loc_404A68
.text:00404943                 cmp     eax, 0FFFFFFFFh
.text:00404946                 jz      loc_404A1C
.text:0040494C                 xor     ebp, ebp
.text:0040494E                 cmp     ebp, esi
.text:00404950                 ja      short loc_4049BB
.text:00404952                 jb      short loc_404958
.text:00404954                 cmp     eax, ebx
.text:00404956                 ja      short loc_4049BB
.text:00404958
.text:00404958 loc_404958:                             ; CODE XREF: sub_404880+D2↑j
.text:00404958                 xor     ecx, ecx
.text:0040495A                 sub     ebx, eax
.text:0040495C                 sbb     esi, ecx
.text:0040495E                 cmp     esi, 0
.text:00404961                 ja      short loc_404920
.text:00404963                 cmp     ebx, 0
.text:00404966                 ja      short loc_404920
.text:00404968
.text:00404968 loc_404968:                             ; CODE XREF: sub_404880+13F↓j
.text:00404968                                         ; sub_404880+167↓j ...
.text:00404968                 mov     [esp+34Ch+ElementCount], 0FFFFFFFFh ; int
.text:00404970                 mov     [esp+34Ch+Stream], 0FFFFFFFFh ; int
.text:00404978
.text:00404978 loc_404978:                             ; CODE XREF: sub_404880+3AE↓j
.text:00404978                 mov     ecx, [esp+34Ch+arg_4]
.text:0040497F                 mov     eax, [esp+34Ch+arg_0]
.text:00404986                 mov     [esp+34Ch+ElementSize], ecx ; int
.text:0040498A                 mov     [esp+34Ch+FileHandle], eax ; char *
.text:0040498D                 call    sub_403E50
.text:00404992                 mov     ebp, [esp+34Ch+arg_10]
.text:00404999                 add     [ebp+0], eax
.text:0040499C                 mov     eax, 1
.text:004049A1                 adc     [ebp+4], edx
.text:004049A4                 lea     esi, [esi+0]
.text:004049AA                 lea     edi, [edi+0]
.text:004049B0
.text:004049B0 loc_4049B0:                             ; CODE XREF: sub_404880+1E3↓j
.text:004049B0                                         ; sub_404880+2EE↓j ...
.text:004049B0                 add     esp, 33Ch
.text:004049B6                 pop     ebx
.text:004049B7                 pop     esi
.text:004049B8                 pop     edi
.text:004049B9                 pop     ebp
.text:004049BA                 retn
.text:004049BB ; ---------------------------------------------------------------------------
.text:004049BB
.text:004049BB loc_4049BB:                             ; CODE XREF: sub_404880+D0↑j
.text:004049BB                                         ; sub_404880+D6↑j
.text:004049BB                 mov     ecx, eax
.text:004049BD                 sub     ecx, ebx
.text:004049BF                 jz      short loc_404968
.text:004049C1                 mov     [esp+34Ch+ElementCount], ecx ; ElementCount
.text:004049C5                 lea     esi, [ebx+edi]
.text:004049C8                 mov     edi, ds:_iob
.text:004049CE                 mov     [esp+34Ch+ElementSize], 1 ; ElementSize
.text:004049D6                 mov     [esp+34Ch+FileHandle], esi ; Buffer
.text:004049D9                 add     edi, 20h ; ' '
.text:004049DC                 mov     [esp+34Ch+Stream], edi ; char
.text:004049E0                 call    fwrite
.text:004049E5                 test    eax, eax
.text:004049E7                 jnz     loc_404968
.text:004049ED                 mov     [esp+34Ch+FileHandle], offset aWriteError ; "write error"
.text:004049F4                 call    ds:libintl_gettext
.text:004049FA                 mov     ebp, eax
.text:004049FC                 call    _errno
.text:00404A01                 mov     [esp+34Ch+ElementCount], ebp ; char *
.text:00404A05                 mov     edx, [eax]
.text:00404A07                 mov     [esp+34Ch+FileHandle], 1 ; Code
.text:00404A0E                 mov     [esp+34Ch+ElementSize], edx ; ErrorMessage
.text:00404A12                 call    sub_40AB80
.text:00404A17                 jmp     loc_404968
.text:00404A1C ; ---------------------------------------------------------------------------
.text:00404A1C
.text:00404A1C loc_404A1C:                             ; CODE XREF: sub_404880+C6↑j
.text:00404A1C                 mov     eax, [esp+34Ch+arg_0]
.text:00404A23                 mov     [esp+34Ch+FileHandle], eax ; char *
.text:00404A26                 call    sub_4095E0
.text:00404A2B                 mov     [esp+34Ch+FileHandle], offset aErrorReadingS ; "error reading %s"
.text:00404A32                 mov     ebp, eax
.text:00404A34                 call    ds:libintl_gettext
.text:00404A3A                 mov     edi, eax
.text:00404A3C                 call    _errno
.text:00404A41                 mov     [esp+34Ch+Stream], ebp ; char
.text:00404A45                 mov     [esp+34Ch+ElementCount], edi ; char *
.text:00404A49                 mov     ebx, [eax]
.text:00404A4B                 mov     [esp+34Ch+FileHandle], 0 ; Code
.text:00404A52                 mov     [esp+34Ch+ElementSize], ebx ; ErrorMessage
.text:00404A56                 call    sub_40AB80
.text:00404A5B                 mov     eax, 1
.text:00404A60
.text:00404A60 loc_404A60:                             ; CODE XREF: sub_404880+1ED↓j
.text:00404A60                 shr     eax, 1Fh
.text:00404A63                 jmp     loc_4049B0
.text:00404A68 ; ---------------------------------------------------------------------------
.text:00404A68
.text:00404A68 loc_404A68:                             ; CODE XREF: sub_404880+BD↑j
.text:00404A68                 mov     eax, 0FFFFFFFFh
.text:00404A6D                 jmp     short loc_404A60
.text:00404A6F ; ---------------------------------------------------------------------------
.text:00404A6F
.text:00404A6F loc_404A6F:                             ; CODE XREF: sub_404880+87↑j
.text:00404A6F                 cmp     edi, 0
.text:00404A72                 ja      loc_40490D
.text:00404A78                 jmp     loc_404968
.text:00404A7D ; ---------------------------------------------------------------------------
.text:00404A7D
.text:00404A7D loc_404A7D:                             ; CODE XREF: sub_404880+7A↑j
.text:00404A7D                 cmp     ebp, 7FFFFFFFh
.text:00404A83                 ja      loc_404900
.text:00404A89                 mov     [esp+34Ch+Stream], 1 ; Origin
.text:00404A91                 mov     eax, [esp+34Ch+arg_4]
.text:00404A98                 mov     [esp+34Ch+ElementSize], edi ; Offset
.text:00404A9C                 mov     [esp+34Ch+ElementCount], ebp
.text:00404AA0                 mov     [esp+34Ch+FileHandle], eax ; FileHandle
.text:00404AA3                 call    _lseeki64
.text:00404AA8                 test    edx, edx
.text:00404AAA                 js      short loc_404ABD
.text:00404AAC                 mov     ebx, [esp+34Ch+arg_10]
.text:00404AB3                 add     [ebx], edi
.text:00404AB5                 adc     [ebx+4], ebp
.text:00404AB8                 jmp     loc_404968
.text:00404ABD ; ---------------------------------------------------------------------------
.text:00404ABD
.text:00404ABD loc_404ABD:                             ; CODE XREF: sub_404880+22A↑j
.text:00404ABD                 mov     [esp+34Ch+FileHandle], edi
.text:00404AC0                 lea     ecx, [esp+34Ch+var_AC]
.text:00404AC7                 mov     [esp+34Ch+ElementCount], ecx
.text:00404ACB                 mov     [esp+34Ch+ElementSize], ebp
.text:00404ACF                 call    sub_4094F0
.text:00404AD4                 mov     [esp+34Ch+FileHandle], offset loc_404800
.text:00404ADB                 mov     ebp, eax
.text:00404ADD                 call    ds:libintl_gettext
.text:00404AE3                 mov     ebx, eax
.text:00404AE5                 call    _errno
.text:00404AEA                 mov     [esp+34Ch+var_33C], ebp
.text:00404AEE                 mov     edi, [esp+34Ch+arg_0]
.text:00404AF5                 mov     [esp+34Ch+Stream], edi ; char
.text:00404AF9
.text:00404AF9 loc_404AF9:                             ; CODE XREF: sub_404880+3EC↓j
.text:00404AF9                 mov     [esp+34Ch+ElementCount], ebx ; char *
.text:00404AFD                 mov     ecx, [eax]
.text:00404AFF                 mov     [esp+34Ch+FileHandle], 0 ; Code
.text:00404B06                 mov     [esp+34Ch+ElementSize], ecx ; ErrorMessage
.text:00404B0A                 call    sub_40AB80
.text:00404B0F                 mov     [esp+34Ch+FileHandle], 1 ; Code
.text:00404B16                 call    exit
.text:00404B16 ; ---------------------------------------------------------------------------
.text:00404B1B                 align 10h
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: sub_404880+58↑j
.text:00404B20                 cmp     ds:byte_416070, 0
.text:00404B27                 jnz     short loc_404B3E
.text:00404B29                 mov     esi, [esp+34Ch+var_8C]
.text:00404B30                 and     esi, 0F000h
.text:00404B36                 cmp     esi, 8000h
.text:00404B3C                 jz      short loc_404B73
.text:00404B3E
.text:00404B3E loc_404B3E:                             ; CODE XREF: sub_404880+2A7↑j
.text:00404B3E                                         ; sub_404880+2F9↓j
.text:00404B3E                 mov     [esp+34Ch+ElementCount], edi ; int
.text:00404B42                 mov     esi, [esp+34Ch+arg_10]
.text:00404B49                 mov     edi, [esp+34Ch+arg_4]
.text:00404B50                 mov     [esp+34Ch+Stream], ebp ; int
.text:00404B54                 mov     edx, [esp+34Ch+arg_0]
.text:00404B5B                 mov     [esp+34Ch+var_33C], esi ; int
.text:00404B5F                 mov     [esp+34Ch+ElementSize], edi ; int
.text:00404B63                 mov     [esp+34Ch+FileHandle], edx ; char *
.text:00404B66                 call    sub_405910
.text:00404B6B                 movzx   eax, al
.text:00404B6E                 jmp     loc_4049B0
.text:00404B73 ; ---------------------------------------------------------------------------
.text:00404B73
.text:00404B73 loc_404B73:                             ; CODE XREF: sub_404880+2BC↑j
.text:00404B73                 cmp     ebp, 7FFFFFFFh
.text:00404B79                 ja      short loc_404B3E
.text:00404B7B                 mov     [esp+34Ch+Stream], 1 ; Origin
.text:00404B83                 mov     edx, [esp+34Ch+arg_4]
.text:00404B8A                 mov     [esp+34Ch+ElementSize], 0 ; Offset
.text:00404B92                 mov     [esp+34Ch+ElementCount], 0
.text:00404B9A                 mov     [esp+34Ch+FileHandle], edx ; FileHandle
.text:00404B9D                 call    _lseeki64
.text:00404BA2                 test    edx, edx
.text:00404BA4                 mov     ebx, eax
.text:00404BA6                 mov     esi, edx
.text:00404BA8                 js      loc_404CE2
.text:00404BAE                 mov     [esp+34Ch+Stream], 2 ; Origin
.text:00404BB6                 mov     eax, [esp+34Ch+arg_4]
.text:00404BBD                 mov     [esp+34Ch+ElementSize], 0 ; Offset
.text:00404BC5                 mov     [esp+34Ch+ElementCount], 0
.text:00404BCD                 mov     [esp+34Ch+FileHandle], eax ; FileHandle
.text:00404BD0                 call    _lseeki64
.text:00404BD5                 test    edx, edx
.text:00404BD7                 js      loc_404CC9
.text:00404BDD                 sub     eax, ebx
.text:00404BDF                 sbb     edx, esi
.text:00404BE1                 test    edx, edx
.text:00404BE3                 js      loc_404CC0
.text:00404BE9
.text:00404BE9 loc_404BE9:                             ; CODE XREF: sub_404880+444↓j
.text:00404BE9                 cmp     edx, ebp
.text:00404BEB                 jg      loc_404C71
.text:00404BF1                 jl      short loc_404BF7
.text:00404BF3                 cmp     eax, edi
.text:00404BF5                 ja      short loc_404C71
.text:00404BF7
.text:00404BF7 loc_404BF7:                             ; CODE XREF: sub_404880+371↑j
.text:00404BF7                 mov     [esp+34Ch+Stream], 0 ; Origin
.text:00404BFF                 mov     edx, [esp+34Ch+arg_4]
.text:00404C06                 mov     [esp+34Ch+ElementSize], ebx ; Offset
.text:00404C0A                 mov     [esp+34Ch+ElementCount], esi
.text:00404C0E                 mov     [esp+34Ch+FileHandle], edx ; FileHandle
.text:00404C11                 call    _lseeki64
.text:00404C16                 test    edx, edx
.text:00404C18                 js      short loc_404C33
.text:00404C1A
.text:00404C1A loc_404C1A:                             ; CODE XREF: sub_404880+41D↓j
.text:00404C1A                 mov     ebx, [esp+34Ch+arg_10]
.text:00404C21                 mov     [ebx], eax
.text:00404C23                 mov     [ebx+4], edx
.text:00404C26                 mov     [esp+34Ch+ElementCount], edi
.text:00404C2A                 mov     [esp+34Ch+Stream], ebp
.text:00404C2E                 jmp     loc_404978
.text:00404C33 ; ---------------------------------------------------------------------------
.text:00404C33
.text:00404C33 loc_404C33:                             ; CODE XREF: sub_404880+398↑j
.text:00404C33                 mov     [esp+34Ch+ElementSize], esi
.text:00404C37                 lea     edi, [esp+34Ch+var_30C]
.text:00404C3B                 mov     [esp+34Ch+ElementCount], edi
.text:00404C3F                 mov     [esp+34Ch+FileHandle], ebx
.text:00404C42                 call    sub_4094F0
.text:00404C47                 mov     [esp+34Ch+FileHandle], offset aSCannotSeekToO ; "%s: cannot seek to offset %s"
.text:00404C4E
.text:00404C4E loc_404C4E:                             ; CODE XREF: sub_404880+43E↓j
.text:00404C4E                                         ; sub_404880+488↓j
.text:00404C4E                 mov     esi, eax
.text:00404C50                 call    ds:libintl_gettext
.text:00404C56                 mov     ebx, eax
.text:00404C58                 call    _errno
.text:00404C5D                 mov     [esp+34Ch+var_33C], esi
.text:00404C61                 mov     esi, [esp+34Ch+arg_0]
.text:00404C68                 mov     [esp+34Ch+Stream], esi
.text:00404C6C                 jmp     loc_404AF9
.text:00404C71 ; ---------------------------------------------------------------------------
.text:00404C71
.text:00404C71 loc_404C71:                             ; CODE XREF: sub_404880+36B↑j
.text:00404C71                                         ; sub_404880+375↑j
.text:00404C71                 mov     [esp+34Ch+Stream], 2 ; Origin
.text:00404C79                 mov     ebx, edi
.text:00404C7B                 mov     eax, [esp+34Ch+arg_4]
.text:00404C82                 neg     ebx
.text:00404C84                 mov     esi, ebp
.text:00404C86                 adc     esi, 0
.text:00404C89                 neg     esi
.text:00404C8B                 mov     [esp+34Ch+ElementSize], ebx ; Offset
.text:00404C8F                 mov     [esp+34Ch+ElementCount], esi
.text:00404C93                 mov     [esp+34Ch+FileHandle], eax ; FileHandle
.text:00404C96                 call    _lseeki64
.text:00404C9B                 test    edx, edx
.text:00404C9D                 jns     loc_404C1A
.text:00404CA3                 mov     [esp+34Ch+FileHandle], ebx
.text:00404CA6                 lea     ebp, [esp+34Ch+var_32C]
.text:00404CAA                 mov     [esp+34Ch+ElementCount], ebp
.text:00404CAE                 mov     [esp+34Ch+ElementSize], esi
.text:00404CB2
.text:00404CB2 loc_404CB2:                             ; CODE XREF: sub_404880+460↓j
.text:00404CB2                 call    sub_4094F0
.text:00404CB7                 mov     [esp+34Ch+FileHandle], offset loc_404840
.text:00404CBE                 jmp     short loc_404C4E
.text:00404CC0 ; ---------------------------------------------------------------------------
.text:00404CC0
.text:00404CC0 loc_404CC0:                             ; CODE XREF: sub_404880+363↑j
.text:00404CC0                 xor     eax, eax
.text:00404CC2                 xor     edx, edx
.text:00404CC4                 jmp     loc_404BE9
.text:00404CC9 ; ---------------------------------------------------------------------------
.text:00404CC9
.text:00404CC9 loc_404CC9:                             ; CODE XREF: sub_404880+357↑j
.text:00404CC9                 mov     [esp+34Ch+FileHandle], 0
.text:00404CD0                 lea     ebx, [esp+34Ch+var_2EC]
.text:00404CD4                 mov     [esp+34Ch+ElementCount], ebx
.text:00404CD8                 mov     [esp+34Ch+ElementSize], 0
.text:00404CE0                 jmp     short loc_404CB2
.text:00404CE2 ; ---------------------------------------------------------------------------
.text:00404CE2
.text:00404CE2 loc_404CE2:                             ; CODE XREF: sub_404880+328↑j
.text:00404CE2                 mov     [esp+34Ch+FileHandle], 0
.text:00404CE9                 lea     ecx, [esp+34Ch+var_2CC]
.text:00404CF0                 mov     [esp+34Ch+ElementCount], ecx
.text:00404CF4                 mov     [esp+34Ch+ElementSize], 0
.text:00404CFC                 call    sub_4094F0
.text:00404D01                 mov     [esp+34Ch+FileHandle], offset loc_404800
.text:00404D08                 jmp     loc_404C4E
.text:00404D08 ; ---------------------------------------------------------------------------
.text:00404D0D                 align 10h
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: sub_404880+4B↑j
.text:00404D10                 mov     esi, [esp+34Ch+arg_0]
.text:00404D17                 mov     [esp+34Ch+FileHandle], esi ; char *
.text:00404D1A                 call    sub_4095E0
.text:00404D1F                 mov     [esp+34Ch+FileHandle], 40486Ah
.text:00404D26                 mov     ebp, eax
.text:00404D28                 call    ds:libintl_gettext
.text:00404D2E                 mov     edi, eax
.text:00404D30                 call    _errno
.text:00404D35                 mov     [esp+34Ch+Stream], ebp ; char
.text:00404D39                 mov     [esp+34Ch+ElementCount], edi ; char *
.text:00404D3D                 mov     ebx, [eax]
.text:00404D3F                 mov     [esp+34Ch+FileHandle], 0 ; Code
.text:00404D46                 mov     [esp+34Ch+ElementSize], ebx ; ErrorMessage
.text:00404D4A                 call    sub_40AB80
.text:00404D4F                 xor     eax, eax
.text:00404D51                 jmp     loc_4049B0
.text:00404D56 ; ---------------------------------------------------------------------------
.text:00404D56
.text:00404D56 loc_404D56:                             ; CODE XREF: sub_404880+29↑j
.text:00404D56                 mov     [esp+34Ch+ElementSize], 8000h ; Mode
.text:00404D5E                 mov     eax, [esp+34Ch+arg_4]
.text:00404D65                 mov     [esp+34Ch+FileHandle], eax ; FileHandle
.text:00404D68                 call    _setmode
.text:00404D6D                 mov     [esp+34Ch+FileHandle], 1 ; FileHandle
.text:00404D74                 call    _isatty
.text:00404D79                 test    eax, eax
.text:00404D7B                 jnz     loc_4048AF
.text:00404D81                 mov     [esp+34Ch+ElementSize], 8000h ; Mode
.text:00404D89                 mov     [esp+34Ch+FileHandle], 1 ; FileHandle
.text:00404D90                 call    _setmode
.text:00404D95                 jmp     loc_4048AF
.text:00404D95 sub_404880      endp
.text:00404D95
.text:00404D95 ; ---------------------------------------------------------------------------
.text:00404D9A                 align 10h
.text:00404DA0
.text:00404DA0 ; =============== S U B R O U T I N E =======================================
.text:00404DA0
.text:00404DA0
.text:00404DA0 ; int __cdecl sub_404DA0(char *, char *, int, int, int)
.text:00404DA0 sub_404DA0      proc near               ; CODE XREF: sub_402D60+136↑p
.text:00404DA0
.text:00404DA0 FileHandle      = dword ptr -0ECh
.text:00404DA0 Offset          = qword ptr -0E8h
.text:00404DA0 Origin          = dword ptr -0E0h
.text:00404DA0 var_DC          = dword ptr -0DCh
.text:00404DA0 var_D8          = dword ptr -0D8h
.text:00404DA0 var_D4          = dword ptr -0D4h
.text:00404DA0 var_D0          = dword ptr -0D0h
.text:00404DA0 var_CC          = dword ptr -0CCh
.text:00404DA0 var_B4          = qword ptr -0B4h
.text:00404DA0 var_AC          = byte ptr -0ACh
.text:00404DA0 var_8C          = dword ptr -8Ch
.text:00404DA0 arg_0           = dword ptr  4
.text:00404DA0 arg_4           = dword ptr  8
.text:00404DA0 arg_8           = dword ptr  0Ch
.text:00404DA0 arg_C           = dword ptr  10h
.text:00404DA0 arg_10          = dword ptr  14h
.text:00404DA0
.text:00404DA0                 push    ebp
.text:00404DA1                 push    edi
.text:00404DA2                 push    esi
.text:00404DA3                 push    ebx
.text:00404DA4                 sub     esp, 0DCh
.text:00404DAA                 mov     edx, [esp+0ECh+arg_4]
.text:00404DB1                 mov     edi, [esp+0ECh+arg_8]
.text:00404DB8                 mov     ebp, [esp+0ECh+arg_C]
.text:00404DBF                 mov     [esp+0ECh+FileHandle], edx ; FileHandle
.text:00404DC2                 call    _isatty
.text:00404DC7                 test    eax, eax
.text:00404DC9                 jz      loc_405050
.text:00404DCF
.text:00404DCF loc_404DCF:                             ; CODE XREF: sub_404DA0+2D5↓j
.text:00404DCF                                         ; sub_404DA0+2EF↓j
.text:00404DCF                 mov     edx, [esp+0ECh+arg_4]
.text:00404DD6                 lea     ecx, [esp+0ECh+var_8C]
.text:00404DDA                 mov     dword ptr [esp+0ECh+Offset], ecx ; int
.text:00404DDE                 mov     [esp+0ECh+FileHandle], edx ; char *
.text:00404DE1                 call    sub_40AE20
.text:00404DE6                 test    eax, eax
.text:00404DE8                 jnz     loc_405006
.text:00404DEE                 cmp     ds:byte_416030, 0
.text:00404DF5                 jnz     loc_404F90
.text:00404DFB                 cmp     ds:byte_416070, 0
.text:00404E02                 mov     dword ptr [esp+0ECh+var_B4], 0FFFFFFFFh
.text:00404E0A                 mov     dword ptr [esp+0ECh+var_B4+4], 0FFFFFFFFh
.text:00404E12                 jnz     short loc_404E26
.text:00404E14                 mov     esi, [esp+0ECh+var_8C]
.text:00404E18                 and     esi, 0F000h
.text:00404E1E                 cmp     esi, 8000h
.text:00404E24                 jz      short loc_404E9A
.text:00404E26
.text:00404E26 loc_404E26:                             ; CODE XREF: sub_404DA0+72↑j
.text:00404E26                 xor     esi, esi
.text:00404E28                 xor     ebx, ebx
.text:00404E2A
.text:00404E2A loc_404E2A:                             ; CODE XREF: sub_404DA0+139↓j
.text:00404E2A                                         ; sub_404DA0+16A↓j ...
.text:00404E2A                 or      esi, ebx
.text:00404E2C                 jz      short loc_404E5D
.text:00404E2E                 mov     [esp+0ECh+Origin], 0 ; Origin
.text:00404E36                 mov     ebx, dword ptr [esp+0ECh+var_B4]
.text:00404E3A                 mov     ecx, dword ptr [esp+0ECh+var_B4+4]
.text:00404E3E                 mov     eax, [esp+0ECh+arg_4]
.text:00404E45                 mov     dword ptr [esp+0ECh+Offset], ebx ; Offset
.text:00404E49                 mov     dword ptr [esp+0ECh+Offset+4], ecx
.text:00404E4D                 mov     [esp+0ECh+FileHandle], eax ; FileHandle
.text:00404E50                 call    _lseeki64
.text:00404E55                 test    edx, edx
.text:00404E57                 js      loc_405094
.text:00404E5D
.text:00404E5D loc_404E5D:                             ; CODE XREF: sub_404DA0+8C↑j
.text:00404E5D                 mov     dword ptr [esp+0ECh+Offset+4], edi ; int
.text:00404E61                 mov     esi, [esp+0ECh+arg_10]
.text:00404E68                 mov     edi, [esp+0ECh+arg_4]
.text:00404E6F                 mov     [esp+0ECh+Origin], ebp ; int
.text:00404E73                 mov     eax, [esp+0ECh+arg_0]
.text:00404E7A                 mov     [esp+0ECh+var_DC], esi ; int
.text:00404E7E                 mov     dword ptr [esp+0ECh+Offset], edi ; int
.text:00404E82                 mov     [esp+0ECh+FileHandle], eax ; char *
.text:00404E85                 call    sub_405540
.text:00404E8A                 movzx   edx, al
.text:00404E8D
.text:00404E8D loc_404E8D:                             ; CODE XREF: sub_404DA0+193↓j
.text:00404E8D                                         ; sub_404DA0+1E1↓j ...
.text:00404E8D                 add     esp, 0DCh
.text:00404E93                 mov     eax, edx
.text:00404E95                 pop     ebx
.text:00404E96                 pop     esi
.text:00404E97                 pop     edi
.text:00404E98                 pop     ebp
.text:00404E99                 retn
.text:00404E9A ; ---------------------------------------------------------------------------
.text:00404E9A
.text:00404E9A loc_404E9A:                             ; CODE XREF: sub_404DA0+84↑j
.text:00404E9A                 mov     [esp+0ECh+Origin], 1 ; Origin
.text:00404EA2                 mov     edx, [esp+0ECh+arg_4]
.text:00404EA9                 mov     dword ptr [esp+0ECh+Offset], 0 ; Offset
.text:00404EB1                 mov     dword ptr [esp+0ECh+Offset+4], 0
.text:00404EB9                 mov     [esp+0ECh+FileHandle], edx ; FileHandle
.text:00404EBC                 call    _lseeki64
.text:00404EC1                 mov     dword ptr [esp+0ECh+var_B4+4], edx
.text:00404EC5                 mov     esi, dword ptr [esp+0ECh+var_B4+4]
.text:00404EC9                 mov     dword ptr [esp+0ECh+var_B4], eax
.text:00404ECD                 mov     ebx, dword ptr [esp+0ECh+var_B4]
.text:00404ED1                 not     esi
.text:00404ED3                 mov     eax, esi
.text:00404ED5                 not     ebx
.text:00404ED7                 or      eax, ebx
.text:00404ED9                 jz      loc_404E2A
.text:00404EDF                 mov     [esp+0ECh+Origin], 2 ; Origin
.text:00404EE7                 mov     eax, [esp+0ECh+arg_4]
.text:00404EEE                 mov     dword ptr [esp+0ECh+Offset], 0 ; Offset
.text:00404EF6                 mov     dword ptr [esp+0ECh+Offset+4], 0
.text:00404EFE                 mov     [esp+0ECh+FileHandle], eax ; FileHandle
.text:00404F01                 call    _lseeki64
.text:00404F06                 cmp     dword ptr [esp+0ECh+var_B4+4], edx
.text:00404F0A                 jg      loc_404E2A
.text:00404F10                 jl      short loc_404F1C
.text:00404F12                 cmp     dword ptr [esp+0ECh+var_B4], eax
.text:00404F16                 jnb     loc_404E2A
.text:00404F1C
.text:00404F1C loc_404F1C:                             ; CODE XREF: sub_404DA0+170↑j
.text:00404F1C                 mov     esi, [esp+0ECh+arg_10]
.text:00404F23                 mov     ebx, edx
.text:00404F25                 or      ebx, eax
.text:00404F27                 mov     [esi], eax
.text:00404F29                 mov     [esi+4], edx
.text:00404F2C                 jnz     short loc_404F38
.text:00404F2E
.text:00404F2E loc_404F2E:                             ; CODE XREF: sub_404DA0+1E7↓j
.text:00404F2E                                         ; sub_404DA0+261↓j
.text:00404F2E                 mov     edx, 1
.text:00404F33                 jmp     loc_404E8D
.text:00404F38 ; ---------------------------------------------------------------------------
.text:00404F38
.text:00404F38 loc_404F38:                             ; CODE XREF: sub_404DA0+18C↑j
.text:00404F38                 mov     [esp+0ECh+var_D0], edx ; int
.text:00404F3C                 mov     esi, [esp+0ECh+arg_10]
.text:00404F43                 mov     edx, dword ptr [esp+0ECh+var_B4]
.text:00404F47                 mov     dword ptr [esp+0ECh+Offset+4], edi ; int
.text:00404F4B                 mov     ebx, dword ptr [esp+0ECh+var_B4+4]
.text:00404F4F                 mov     ecx, [esp+0ECh+arg_4]
.text:00404F56                 mov     [esp+0ECh+var_DC], edx ; int
.text:00404F5A                 mov     edi, [esp+0ECh+arg_0]
.text:00404F61                 mov     [esp+0ECh+var_CC], esi ; int
.text:00404F65                 mov     [esp+0ECh+var_D4], eax ; int
.text:00404F69                 mov     [esp+0ECh+var_D8], ebx ; int
.text:00404F6D                 mov     [esp+0ECh+Origin], ebp ; int
.text:00404F71                 mov     dword ptr [esp+0ECh+Offset], ecx ; int
.text:00404F75                 mov     [esp+0ECh+FileHandle], edi ; char *
.text:00404F78                 call    sub_405100
.text:00404F7D                 xor     edx, edx
.text:00404F7F                 test    al, al
.text:00404F81                 jz      loc_404E8D
.text:00404F87                 jmp     short loc_404F2E
.text:00404F87 ; ---------------------------------------------------------------------------
.text:00404F89                 align 10h
.text:00404F90
.text:00404F90 loc_404F90:                             ; CODE XREF: sub_404DA0+55↑j
.text:00404F90                 mov     dword ptr [esp+0ECh+Offset+4], edi ; int
.text:00404F94                 mov     ecx, [esp+0ECh+arg_10]
.text:00404F9B                 mov     eax, [esp+0ECh+arg_4]
.text:00404FA2                 mov     [esp+0ECh+Origin], ebp ; int
.text:00404FA6                 mov     edx, [esp+0ECh+arg_0]
.text:00404FAD                 mov     [esp+0ECh+var_DC], ecx ; int
.text:00404FB1                 mov     dword ptr [esp+0ECh+Offset], eax ; int
.text:00404FB5                 mov     [esp+0ECh+FileHandle], edx ; char *
.text:00404FB8                 call    sub_405C30
.text:00404FBD                 test    eax, eax
.text:00404FBF                 jz      short loc_404FCB
.text:00404FC1                 mov     edx, eax
.text:00404FC3                 shr     edx, 1Fh
.text:00404FC6                 jmp     loc_404E8D
.text:00404FCB ; ---------------------------------------------------------------------------
.text:00404FCB
.text:00404FCB loc_404FCB:                             ; CODE XREF: sub_404DA0+21F↑j
.text:00404FCB                 mov     dword ptr [esp+0ECh+Offset+4], 0FFFFFFFFh ; int
.text:00404FD3                 mov     ebp, [esp+0ECh+arg_4]
.text:00404FDA                 mov     edi, [esp+0ECh+arg_0]
.text:00404FE1                 mov     [esp+0ECh+Origin], 0FFFFFFFFh ; int
.text:00404FE9                 mov     dword ptr [esp+0ECh+Offset], ebp ; int
.text:00404FED                 mov     [esp+0ECh+FileHandle], edi ; char *
.text:00404FF0                 call    sub_403E50
.text:00404FF5                 mov     ebx, [esp+0ECh+arg_10]
.text:00404FFC                 add     [ebx], eax
.text:00404FFE                 adc     [ebx+4], edx
.text:00405001                 jmp     loc_404F2E
.text:00405006 ; ---------------------------------------------------------------------------
.text:00405006
.text:00405006 loc_405006:                             ; CODE XREF: sub_404DA0+48↑j
.text:00405006                 mov     esi, [esp+0ECh+arg_0]
.text:0040500D                 mov     [esp+0ECh+FileHandle], esi ; char *
.text:00405010                 call    sub_4095E0
.text:00405015                 mov     [esp+0ECh+FileHandle], 40486Ah
.text:0040501C                 mov     ebp, eax
.text:0040501E                 call    ds:libintl_gettext
.text:00405024                 mov     edi, eax
.text:00405026                 call    _errno
.text:0040502B                 mov     [esp+0ECh+Origin], ebp ; char
.text:0040502F                 mov     dword ptr [esp+0ECh+Offset+4], edi ; char *
.text:00405033                 mov     ebx, [eax]
.text:00405035                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:0040503C                 mov     dword ptr [esp+0ECh+Offset], ebx ; ErrorMessage
.text:00405040                 call    sub_40AB80
.text:00405045                 xor     edx, edx
.text:00405047                 jmp     loc_404E8D
.text:00405047 ; ---------------------------------------------------------------------------
.text:0040504C                 align 10h
.text:00405050
.text:00405050 loc_405050:                             ; CODE XREF: sub_404DA0+29↑j
.text:00405050                 mov     dword ptr [esp+0ECh+Offset], 8000h ; Mode
.text:00405058                 mov     eax, [esp+0ECh+arg_4]
.text:0040505F                 mov     [esp+0ECh+FileHandle], eax ; FileHandle
.text:00405062                 call    _setmode
.text:00405067                 mov     [esp+0ECh+FileHandle], 1 ; FileHandle
.text:0040506E                 call    _isatty
.text:00405073                 test    eax, eax
.text:00405075                 jnz     loc_404DCF
.text:0040507B                 mov     dword ptr [esp+0ECh+Offset], 8000h ; Mode
.text:00405083                 mov     [esp+0ECh+FileHandle], 1 ; FileHandle
.text:0040508A                 call    _setmode
.text:0040508F                 jmp     loc_404DCF
.text:00405094 ; ---------------------------------------------------------------------------
.text:00405094
.text:00405094 loc_405094:                             ; CODE XREF: sub_404DA0+B7↑j
.text:00405094                 mov     edx, dword ptr [esp+0ECh+var_B4]
.text:00405098                 lea     ebp, [esp+0ECh+var_AC]
.text:0040509C                 mov     ecx, dword ptr [esp+0ECh+var_B4+4]
.text:004050A0                 mov     dword ptr [esp+0ECh+Offset+4], ebp
.text:004050A4                 mov     [esp+0ECh+FileHandle], edx
.text:004050A7                 mov     dword ptr [esp+0ECh+Offset], ecx
.text:004050AB                 call    sub_4094F0
.text:004050B0                 mov     [esp+0ECh+FileHandle], offset aSCannotSeekToO ; "%s: cannot seek to offset %s"
.text:004050B7                 mov     ebx, eax
.text:004050B9                 call    ds:libintl_gettext
.text:004050BF                 mov     edi, eax
.text:004050C1                 call    _errno
.text:004050C6                 mov     [esp+0ECh+var_DC], ebx
.text:004050CA                 mov     esi, [esp+0ECh+arg_0]
.text:004050D1                 mov     dword ptr [esp+0ECh+Offset+4], edi ; char *
.text:004050D5                 mov     [esp+0ECh+Origin], esi ; char
.text:004050D9                 mov     ebp, [eax]
.text:004050DB                 mov     [esp+0ECh+FileHandle], 0 ; Code
.text:004050E2                 mov     dword ptr [esp+0ECh+Offset], ebp ; ErrorMessage
.text:004050E6                 call    sub_40AB80
.text:004050EB                 mov     [esp+0ECh+FileHandle], 1 ; Code
.text:004050F2                 call    exit
.text:004050F2 sub_404DA0      endp
.text:004050F2
.text:004050F2 ; ---------------------------------------------------------------------------
.text:004050F7                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100
.text:00405100 ; int __cdecl sub_405100(char *, int, int, int, int, int, int, int, int)
.text:00405100 sub_405100      proc near               ; CODE XREF: sub_404DA0+1D8↑p
.text:00405100
.text:00405100 FileHandle      = dword ptr -2CCh
.text:00405100 Offset          = qword ptr -2C8h
.text:00405100 Origin          = dword ptr -2C0h
.text:00405100 var_2BC         = dword ptr -2BCh
.text:00405100 var_2A4         = dword ptr -2A4h
.text:00405100 var_2A0         = dword ptr -2A0h
.text:00405100 var_29C         = dword ptr -29Ch
.text:00405100 var_298         = dword ptr -298h
.text:00405100 var_294         = qword ptr -294h
.text:00405100 var_28C         = dword ptr -28Ch
.text:00405100 var_288         = dword ptr -288h
.text:00405100 var_284         = qword ptr -284h
.text:00405100 var_27C         = byte ptr -27Ch
.text:00405100 var_25C         = byte ptr -25Ch
.text:00405100 var_23C         = byte ptr -23Ch
.text:00405100 var_21D         = byte ptr -21Dh
.text:00405100 var_21C         = byte ptr -21Ch
.text:00405100 arg_0           = dword ptr  4
.text:00405100 arg_4           = dword ptr  8
.text:00405100 arg_8           = dword ptr  0Ch
.text:00405100 arg_C           = dword ptr  10h
.text:00405100 arg_10          = dword ptr  14h
.text:00405100 arg_14          = dword ptr  18h
.text:00405100 arg_18          = dword ptr  1Ch
.text:00405100 arg_1C          = dword ptr  20h
.text:00405100 arg_20          = dword ptr  24h
.text:00405100
.text:00405100                 push    ebp
.text:00405101                 push    edi
.text:00405102                 push    esi
.text:00405103                 push    ebx
.text:00405104                 sub     esp, 2BCh
.text:0040510A                 mov     edx, [esp+2CCh+arg_10]
.text:00405111                 mov     esi, [esp+2CCh+arg_C]
.text:00405118                 mov     ebx, [esp+2CCh+arg_8]
.text:0040511F                 mov     eax, [esp+2CCh+arg_1C]
.text:00405126                 mov     dword ptr [esp+2CCh+var_284], edx
.text:0040512A                 mov     ecx, [esp+2CCh+arg_18]
.text:00405131                 mov     edx, esi
.text:00405133                 mov     edi, [esp+2CCh+arg_14]
.text:0040513A                 or      edx, ebx
.text:0040513C                 mov     [esp+2CCh+var_288], eax
.text:00405140                 mov     dword ptr [esp+2CCh+var_294+4], eax
.text:00405144                 mov     eax, 1
.text:00405149                 mov     dword ptr [esp+2CCh+var_284+4], edi
.text:0040514D                 mov     [esp+2CCh+var_28C], ecx
.text:00405151                 mov     dword ptr [esp+2CCh+var_294], ecx
.text:00405155                 jz      loc_405330
.text:0040515B                 mov     edi, dword ptr [esp+2CCh+var_294]
.text:0040515F                 mov     ecx, dword ptr [esp+2CCh+var_294+4]
.text:00405163                 sub     edi, dword ptr [esp+2CCh+var_284]
.text:00405167                 sbb     ecx, dword ptr [esp+2CCh+var_284+4]
.text:0040516B                 mov     eax, edi
.text:0040516D                 test    ecx, ecx
.text:0040516F                 mov     edx, ecx
.text:00405171                 js      loc_405520
.text:00405177
.text:00405177 loc_405177:                             ; CODE XREF: sub_405100+428↓j
.text:00405177                 shrd    eax, edx, 9
.text:0040517B                 shl     eax, 9
.text:0040517E                 sub     edi, eax
.text:00405180                 jnz     short loc_405187
.text:00405182                 mov     edi, 200h
.text:00405187
.text:00405187 loc_405187:                             ; CODE XREF: sub_405100+80↑j
.text:00405187                 mov     [esp+2CCh+Origin], 0 ; Origin
.text:0040518F                 xor     ebp, ebp
.text:00405191                 sub     dword ptr [esp+2CCh+var_294], edi
.text:00405195                 mov     edx, dword ptr [esp+2CCh+var_294]
.text:00405199                 sbb     dword ptr [esp+2CCh+var_294+4], ebp
.text:0040519D                 mov     ebp, [esp+2CCh+arg_4]
.text:004051A4                 mov     dword ptr [esp+2CCh+Offset], edx ; Offset
.text:004051A8                 mov     ecx, dword ptr [esp+2CCh+var_294+4]
.text:004051AC                 mov     [esp+2CCh+FileHandle], ebp ; FileHandle
.text:004051AF                 mov     dword ptr [esp+2CCh+Offset+4], ecx
.text:004051B3                 call    _lseeki64
.text:004051B8                 test    edx, edx
.text:004051BA                 lea     eax, [esp+2CCh+var_23C]
.text:004051C1                 js      loc_405382
.text:004051C7                 mov     dword ptr [esp+2CCh+Offset+4], edi
.text:004051CB                 mov     eax, [esp+2CCh+arg_4]
.text:004051D2                 lea     ebp, [esp+2CCh+var_21C]
.text:004051D9                 mov     dword ptr [esp+2CCh+Offset], ebp
.text:004051DD                 mov     [esp+2CCh+FileHandle], eax
.text:004051E0                 call    sub_409610
.text:004051E5                 cmp     eax, 0FFFFFFFFh
.text:004051E8                 mov     edi, eax
.text:004051EA                 jz      loc_405511
.text:004051F0                 xor     edx, edx
.text:004051F2                 mov     ecx, [esp+2CCh+arg_20]
.text:004051F9                 add     eax, dword ptr [esp+2CCh+var_294]
.text:004051FD                 adc     edx, dword ptr [esp+2CCh+var_294+4]
.text:00405201                 test    edi, edi
.text:00405203                 mov     [ecx], eax
.text:00405205                 mov     [ecx+4], edx
.text:00405208                 jz      short loc_405220
.text:0040520A                 cmp     [esp+edi+2CCh+var_21D], 0Ah
.text:00405212                 jz      short loc_405220
.text:00405214                 add     ebx, 0FFFFFFFFh
.text:00405217                 adc     esi, 0FFFFFFFFh
.text:0040521A                 lea     esi, [esi+0]
.text:00405220
.text:00405220 loc_405220:                             ; CODE XREF: sub_405100+108↑j
.text:00405220                                         ; sub_405100+112↑j ...
.text:00405220                 test    edi, edi
.text:00405222                 mov     ecx, edi
.text:00405224                 jz      short loc_405293
.text:00405226                 mov     [esp+2CCh+var_2A4], edi
.text:0040522A                 mov     eax, dword ptr [esp+2CCh+var_294]
.text:0040522E                 mov     edx, dword ptr [esp+2CCh+var_294+4]
.text:00405232                 add     [esp+2CCh+var_2A4], eax
.text:00405236                 mov     eax, [esp+2CCh+var_28C]
.text:0040523A                 mov     [esp+2CCh+var_2A0], 0
.text:00405242                 adc     [esp+2CCh+var_2A0], edx
.text:00405246                 mov     edx, [esp+2CCh+var_288]
.text:0040524A                 sub     eax, [esp+2CCh+var_2A4]
.text:0040524E                 sbb     edx, [esp+2CCh+var_2A0]
.text:00405252                 mov     [esp+2CCh+var_29C], eax
.text:00405256                 mov     [esp+2CCh+var_298], edx
.text:0040525A                 lea     esi, [esi+0]
.text:00405260
.text:00405260 loc_405260:                             ; CODE XREF: sub_405100+191↓j
.text:00405260                 mov     dword ptr [esp+2CCh+Offset+4], ecx
.text:00405264                 mov     dword ptr [esp+2CCh+Offset], 0Ah
.text:0040526C                 mov     [esp+2CCh+FileHandle], ebp
.text:0040526F                 call    sub_40E640
.text:00405274                 test    eax, eax
.text:00405276                 mov     edx, eax
.text:00405278                 jz      short loc_405293
.text:0040527A                 mov     ecx, eax
.text:0040527C                 sub     ecx, ebp
.text:0040527E                 add     ebx, 0FFFFFFFFh
.text:00405281                 adc     esi, 0FFFFFFFFh
.text:00405284                 mov     eax, ebx
.text:00405286                 and     eax, esi
.text:00405288                 inc     eax
.text:00405289                 jz      loc_405470
.text:0040528F                 test    ecx, ecx
.text:00405291                 jnz     short loc_405260
.text:00405293
.text:00405293 loc_405293:                             ; CODE XREF: sub_405100+124↑j
.text:00405293                                         ; sub_405100+178↑j
.text:00405293                 mov     eax, dword ptr [esp+2CCh+var_294+4]
.text:00405297                 mov     ecx, dword ptr [esp+2CCh+var_284+4]
.text:0040529B                 mov     edi, dword ptr [esp+2CCh+var_294]
.text:0040529F                 mov     edx, dword ptr [esp+2CCh+var_284]
.text:004052A3                 xor     eax, ecx
.text:004052A5                 xor     edi, edx
.text:004052A7                 or      eax, edi
.text:004052A9                 jz      loc_4053E1
.text:004052AF                 add     dword ptr [esp+2CCh+var_294], 0FFFFFE00h
.text:004052B7                 mov     ecx, [esp+2CCh+arg_4]
.text:004052BE                 mov     [esp+2CCh+Origin], 0 ; Origin
.text:004052C6                 mov     edx, dword ptr [esp+2CCh+var_294]
.text:004052CA                 adc     dword ptr [esp+2CCh+var_294+4], 0FFFFFFFFh
.text:004052CF                 mov     [esp+2CCh+FileHandle], ecx ; FileHandle
.text:004052D2                 mov     dword ptr [esp+2CCh+Offset], edx ; Offset
.text:004052D6                 mov     edi, dword ptr [esp+2CCh+var_294+4]
.text:004052DA                 mov     dword ptr [esp+2CCh+Offset+4], edi
.text:004052DE                 call    _lseeki64
.text:004052E3                 test    edx, edx
.text:004052E5                 js      loc_40537E
.text:004052EB                 mov     dword ptr [esp+2CCh+Offset+4], 200h
.text:004052F3                 mov     eax, [esp+2CCh+arg_4]
.text:004052FA                 mov     dword ptr [esp+2CCh+Offset], ebp
.text:004052FE                 mov     [esp+2CCh+FileHandle], eax
.text:00405301                 call    sub_409610
.text:00405306                 cmp     eax, 0FFFFFFFFh
.text:00405309                 mov     edi, eax
.text:0040530B                 jz      short loc_40533B
.text:0040530D                 xor     edx, edx
.text:0040530F                 mov     ecx, [esp+2CCh+arg_20]
.text:00405316                 add     eax, dword ptr [esp+2CCh+var_294]
.text:0040531A                 adc     edx, dword ptr [esp+2CCh+var_294+4]
.text:0040531E                 test    edi, edi
.text:00405320                 mov     [ecx], eax
.text:00405322                 mov     [ecx+4], edx
.text:00405325                 jnz     loc_405220
.text:0040532B
.text:0040532B loc_40532B:                             ; CODE XREF: sub_405100+353↓j
.text:0040532B                                         ; sub_405100+3B8↓j
.text:0040532B                 mov     eax, 1
.text:00405330
.text:00405330 loc_405330:                             ; CODE XREF: sub_405100+55↑j
.text:00405330                                         ; sub_405100+27C↓j
.text:00405330                 add     esp, 2BCh
.text:00405336                 pop     ebx
.text:00405337                 pop     esi
.text:00405338                 pop     edi
.text:00405339                 pop     ebp
.text:0040533A                 retn
.text:0040533B ; ---------------------------------------------------------------------------
.text:0040533B
.text:0040533B loc_40533B:                             ; CODE XREF: sub_405100+20B↑j
.text:0040533B                 mov     esi, [esp+2CCh+arg_0]
.text:00405342                 mov     [esp+2CCh+FileHandle], esi ; char *
.text:00405345
.text:00405345 loc_405345:                             ; CODE XREF: sub_405100+41B↓j
.text:00405345                 call    sub_4095E0
.text:0040534A                 mov     [esp+2CCh+FileHandle], offset aErrorReadingS ; "error reading %s"
.text:00405351                 mov     ebx, eax
.text:00405353                 call    ds:libintl_gettext
.text:00405359                 mov     ebp, eax
.text:0040535B                 call    _errno
.text:00405360                 mov     [esp+2CCh+Origin], ebx ; char
.text:00405364                 mov     dword ptr [esp+2CCh+Offset+4], ebp ; char *
.text:00405368                 mov     edi, [eax]
.text:0040536A                 mov     [esp+2CCh+FileHandle], 0 ; Code
.text:00405371                 mov     dword ptr [esp+2CCh+Offset], edi ; ErrorMessage
.text:00405375                 call    sub_40AB80
.text:0040537A                 xor     eax, eax
.text:0040537C                 jmp     short loc_405330
.text:0040537E ; ---------------------------------------------------------------------------
.text:0040537E
.text:0040537E loc_40537E:                             ; CODE XREF: sub_405100+1E5↑j
.text:0040537E                 lea     eax, [esp+2CCh+var_27C]
.text:00405382
.text:00405382 loc_405382:                             ; CODE XREF: sub_405100+C1↑j
.text:00405382                 mov     dword ptr [esp+2CCh+Offset+4], eax
.text:00405386                 mov     edx, dword ptr [esp+2CCh+var_294+4]
.text:0040538A                 mov     eax, dword ptr [esp+2CCh+var_294]
.text:0040538E
.text:0040538E loc_40538E:                             ; CODE XREF: sub_405100+368↓j
.text:0040538E                 mov     dword ptr [esp+2CCh+Offset], edx
.text:00405392                 mov     [esp+2CCh+FileHandle], eax
.text:00405395                 call    sub_4094F0
.text:0040539A                 mov     [esp+2CCh+FileHandle], offset aSCannotSeekToO ; "%s: cannot seek to offset %s"
.text:004053A1                 mov     ebp, eax
.text:004053A3                 call    ds:libintl_gettext
.text:004053A9                 mov     edi, eax
.text:004053AB                 call    _errno
.text:004053B0                 mov     [esp+2CCh+var_2BC], ebp
.text:004053B4                 mov     ebx, [esp+2CCh+arg_0]
.text:004053BB                 mov     dword ptr [esp+2CCh+Offset+4], edi ; char *
.text:004053BF                 mov     [esp+2CCh+Origin], ebx ; char
.text:004053C3                 mov     ebp, [eax]
.text:004053C5                 mov     [esp+2CCh+FileHandle], 0 ; Code
.text:004053CC                 mov     dword ptr [esp+2CCh+Offset], ebp ; ErrorMessage
.text:004053D0                 call    sub_40AB80
.text:004053D5                 mov     [esp+2CCh+FileHandle], 1 ; Code
.text:004053DC                 call    exit
.text:004053E1 ; ---------------------------------------------------------------------------
.text:004053E1
.text:004053E1 loc_4053E1:                             ; CODE XREF: sub_405100+1A9↑j
.text:004053E1                 mov     [esp+2CCh+Origin], 0 ; Origin
.text:004053E9                 mov     esi, dword ptr [esp+2CCh+var_284]
.text:004053ED                 mov     ebx, dword ptr [esp+2CCh+var_284+4]
.text:004053F1                 mov     ebp, [esp+2CCh+arg_4]
.text:004053F8                 mov     dword ptr [esp+2CCh+Offset], esi ; Offset
.text:004053FC                 mov     dword ptr [esp+2CCh+Offset+4], ebx
.text:00405400                 mov     [esp+2CCh+FileHandle], ebp ; FileHandle
.text:00405403                 call    _lseeki64
.text:00405408                 test    edx, edx
.text:0040540A                 js      short loc_405458
.text:0040540C                 mov     edi, [esp+2CCh+var_28C]
.text:00405410                 mov     esi, [esp+2CCh+var_288]
.text:00405414                 mov     ebx, [esp+2CCh+arg_4]
.text:0040541B                 mov     dword ptr [esp+2CCh+Offset+4], edi ; int
.text:0040541F                 mov     eax, [esp+2CCh+arg_0]
.text:00405426                 mov     [esp+2CCh+Origin], esi ; int
.text:0040542A                 mov     dword ptr [esp+2CCh+Offset], ebx ; int
.text:0040542E                 mov     [esp+2CCh+FileHandle], eax ; char *
.text:00405431                 call    sub_403E50
.text:00405436                 add     dword ptr [esp+2CCh+var_284], eax
.text:0040543A                 mov     ebp, [esp+2CCh+arg_20]
.text:00405441                 adc     dword ptr [esp+2CCh+var_284+4], edx
.text:00405445                 mov     edx, dword ptr [esp+2CCh+var_284]
.text:00405449                 mov     ecx, dword ptr [esp+2CCh+var_284+4]
.text:0040544D                 mov     [ebp+0], edx
.text:00405450                 mov     [ebp+4], ecx
.text:00405453                 jmp     loc_40532B
.text:00405458 ; ---------------------------------------------------------------------------
.text:00405458
.text:00405458 loc_405458:                             ; CODE XREF: sub_405100+30A↑j
.text:00405458                 mov     eax, dword ptr [esp+2CCh+var_284]
.text:0040545C                 lea     edi, [esp+2CCh+var_25C]
.text:00405460                 mov     edx, dword ptr [esp+2CCh+var_284+4]
.text:00405464                 mov     dword ptr [esp+2CCh+Offset+4], edi
.text:00405468                 jmp     loc_40538E
.text:00405468 ; ---------------------------------------------------------------------------
.text:0040546D                 align 10h
.text:00405470
.text:00405470 loc_405470:                             ; CODE XREF: sub_405100+189↑j
.text:00405470                 lea     esi, [edi-1]
.text:00405473                 cmp     ecx, esi
.text:00405475                 jz      short loc_405481
.text:00405477                 sub     edi, ecx
.text:00405479                 lea     ebx, [edx+1]
.text:0040547C                 mov     edx, edi
.text:0040547E                 dec     edx
.text:0040547F                 jnz     short loc_4054BD
.text:00405481
.text:00405481 loc_405481:                             ; CODE XREF: sub_405100+375↑j
.text:00405481                                         ; sub_405100+3E0↓j ...
.text:00405481                 mov     ecx, [esp+2CCh+var_29C]
.text:00405485                 mov     esi, [esp+2CCh+var_298]
.text:00405489                 mov     eax, [esp+2CCh+arg_4]
.text:00405490                 mov     dword ptr [esp+2CCh+Offset+4], ecx ; int
.text:00405494                 mov     ebx, [esp+2CCh+arg_0]
.text:0040549B                 mov     [esp+2CCh+Origin], esi ; int
.text:0040549F                 mov     dword ptr [esp+2CCh+Offset], eax ; int
.text:004054A3                 mov     [esp+2CCh+FileHandle], ebx ; char *
.text:004054A6                 call    sub_403E50
.text:004054AB                 mov     ebp, [esp+2CCh+arg_20]
.text:004054B2                 add     [ebp+0], eax
.text:004054B5                 adc     [ebp+4], edx
.text:004054B8                 jmp     loc_40532B
.text:004054BD ; ---------------------------------------------------------------------------
.text:004054BD
.text:004054BD loc_4054BD:                             ; CODE XREF: sub_405100+37F↑j
.text:004054BD                 mov     dword ptr [esp+2CCh+Offset+4], edx ; ElementCount
.text:004054C1                 mov     ecx, ds:_iob
.text:004054C7                 mov     dword ptr [esp+2CCh+Offset], 1 ; ElementSize
.text:004054CF                 mov     [esp+2CCh+FileHandle], ebx ; Buffer
.text:004054D2                 add     ecx, 20h ; ' '
.text:004054D5                 mov     [esp+2CCh+Origin], ecx ; char
.text:004054D9                 call    fwrite
.text:004054DE                 test    eax, eax
.text:004054E0                 jnz     short loc_405481
.text:004054E2                 mov     [esp+2CCh+FileHandle], offset aWriteError ; "write error"
.text:004054E9                 call    ds:libintl_gettext
.text:004054EF                 mov     edi, eax
.text:004054F1                 call    _errno
.text:004054F6                 mov     dword ptr [esp+2CCh+Offset+4], edi ; char *
.text:004054FA                 mov     edx, [eax]
.text:004054FC                 mov     [esp+2CCh+FileHandle], 1 ; Code
.text:00405503                 mov     dword ptr [esp+2CCh+Offset], edx ; ErrorMessage
.text:00405507                 call    sub_40AB80
.text:0040550C                 jmp     loc_405481
.text:00405511 ; ---------------------------------------------------------------------------
.text:00405511
.text:00405511 loc_405511:                             ; CODE XREF: sub_405100+EA↑j
.text:00405511                 mov     ebx, [esp+2CCh+arg_0]
.text:00405518                 mov     [esp+2CCh+FileHandle], ebx
.text:0040551B                 jmp     loc_405345
.text:00405520 ; ---------------------------------------------------------------------------
.text:00405520
.text:00405520 loc_405520:                             ; CODE XREF: sub_405100+71↑j
.text:00405520                 add     eax, 1FFh
.text:00405525                 adc     edx, 0
.text:00405528                 jmp     loc_405177
.text:00405528 sub_405100      endp
.text:00405528
.text:00405528 ; ---------------------------------------------------------------------------
.text:0040552D byte_40552D     db 62h, 65h, 67h        ; DATA XREF: sub_405540+3C2↓o
.text:00405530                 dd 900DEB00h, 3 dup(90909090h)
.text:00405540
.text:00405540 ; =============== S U B R O U T I N E =======================================
.text:00405540
.text:00405540
.text:00405540 ; int __cdecl sub_405540(char *, int, int, int, int)
.text:00405540 sub_405540      proc near               ; CODE XREF: sub_404DA0+E5↑p
.text:00405540
.text:00405540 Buf             = dword ptr -3Ch
.text:00405540 Val             = dword ptr -38h
.text:00405540 MaxCount        = dword ptr -34h
.text:00405540 Stream          = dword ptr -30h
.text:00405540 var_24          = dword ptr -24h
.text:00405540 var_1D          = byte ptr -1Dh
.text:00405540 var_1C          = dword ptr -1Ch
.text:00405540 var_18          = dword ptr -18h
.text:00405540 Block           = dword ptr -14h
.text:00405540 arg_0           = dword ptr  4
.text:00405540 arg_4           = dword ptr  8
.text:00405540 arg_8           = dword ptr  0Ch
.text:00405540 arg_C           = dword ptr  10h
.text:00405540 arg_10          = dword ptr  14h
.text:00405540
.text:00405540                 push    ebp
.text:00405541                 push    edi
.text:00405542                 push    esi
.text:00405543                 push    ebx
.text:00405544                 sub     esp, 2Ch
.text:00405547                 mov     edi, [esp+3Ch+arg_8]
.text:0040554B                 mov     [esp+3Ch+var_1C], 0
.text:00405553                 mov     ebp, [esp+3Ch+arg_C]
.text:00405557                 mov     [esp+3Ch+var_1D], 1
.text:0040555C                 mov     [esp+3Ch+Buf], 20Ch ; size_t
.text:00405563                 call    sub_407390
.text:00405568                 mov     [esp+3Ch+Block], eax
.text:0040556C                 xor     ecx, ecx
.text:0040556E                 xor     edx, edx
.text:00405570                 mov     [eax+204h], ecx
.text:00405576                 xor     ecx, ecx
.text:00405578                 mov     [esp+3Ch+var_18], eax
.text:0040557C                 mov     [eax+200h], edx
.text:00405582                 mov     [eax+208h], ecx
.text:00405588
.text:00405588 loc_405588:                             ; CODE XREF: sub_405540+11E↓j
.text:00405588                                         ; sub_405540+128↓j
.text:00405588                 mov     [esp+3Ch+Buf], 20Ch ; size_t
.text:0040558F                 call    sub_407390
.text:00405594                 mov     esi, eax
.text:00405596
.text:00405596 loc_405596:                             ; CODE XREF: sub_405540+140↓j
.text:00405596                                         ; sub_405540+177↓j
.text:00405596                 mov     [esp+3Ch+MaxCount], 200h
.text:0040559E                 mov     eax, [esp+3Ch+arg_4]
.text:004055A2                 mov     [esp+3Ch+Val], esi
.text:004055A6                 mov     [esp+3Ch+Buf], eax
.text:004055A9                 call    sub_409610
.text:004055AE                 test    eax, eax
.text:004055B0                 mov     ebx, eax
.text:004055B2                 jz      loc_4056BC
.text:004055B8                 cmp     eax, 0FFFFFFFFh
.text:004055BB                 jz      loc_4056BC
.text:004055C1                 mov     [esi+200h], eax
.text:004055C7                 mov     ecx, [esp+3Ch+arg_10]
.text:004055CB                 xor     edx, edx
.text:004055CD                 lea     ebx, [ebx+esi]
.text:004055D0                 add     [ecx], eax
.text:004055D2                 adc     [ecx+4], edx
.text:004055D5                 xor     edx, edx
.text:004055D7                 xor     ecx, ecx
.text:004055D9                 mov     [esi+208h], edx
.text:004055DF                 mov     edx, esi
.text:004055E1                 mov     [esi+204h], ecx
.text:004055E7                 mov     esi, esi
.text:004055E9                 lea     edi, [edi+0]
.text:004055F0
.text:004055F0 loc_4055F0:                             ; CODE XREF: sub_405540+D5↓j
.text:004055F0                 mov     [esp+3Ch+Buf], edx ; Buf
.text:004055F3                 mov     ecx, ebx
.text:004055F5                 sub     ecx, edx
.text:004055F7                 mov     [esp+3Ch+MaxCount], ecx ; MaxCount
.text:004055FB                 mov     [esp+3Ch+Val], 0Ah ; Val
.text:00405603                 call    memchr
.text:00405608                 test    eax, eax
.text:0040560A                 mov     edx, eax
.text:0040560C                 jz      short loc_405617
.text:0040560E                 inc     dword ptr [esi+204h]
.text:00405614                 inc     edx
.text:00405615                 jmp     short loc_4055F0
.text:00405617 ; ---------------------------------------------------------------------------
.text:00405617
.text:00405617 loc_405617:                             ; CODE XREF: sub_405540+CC↑j
.text:00405617                 mov     ebx, [esp+3Ch+var_18]
.text:0040561B                 mov     edx, [esi+204h]
.text:00405621                 mov     ecx, [esi+200h]
.text:00405627                 add     [esp+3Ch+var_1C], edx
.text:0040562B                 mov     edx, [ebx+200h]
.text:00405631                 lea     ebx, [edx+ecx]
.text:00405634                 cmp     ebx, 1FFh
.text:0040563A                 jbe     short loc_405685
.text:0040563C                 mov     edx, [esp+3Ch+Block]
.text:00405640                 mov     eax, [esp+3Ch+var_18]
.text:00405644                 mov     [esp+3Ch+var_18], esi
.text:00405648                 mov     ecx, [esp+3Ch+var_1C]
.text:0040564C                 mov     ebx, [edx+204h]
.text:00405652                 mov     [eax+208h], esi
.text:00405658                 xor     esi, esi
.text:0040565A                 sub     ecx, ebx
.text:0040565C                 cmp     esi, ebp
.text:0040565E                 jb      loc_405588
.text:00405664                 ja      short loc_40566E
.text:00405666                 cmp     ecx, edi
.text:00405668                 jbe     loc_405588
.text:0040566E
.text:0040566E loc_40566E:                             ; CODE XREF: sub_405540+124↑j
.text:0040566E                 mov     [esp+3Ch+var_1C], ecx
.text:00405672                 mov     esi, [esp+3Ch+Block]
.text:00405676                 mov     ecx, [esi+208h]
.text:0040567C                 mov     [esp+3Ch+Block], ecx
.text:00405680                 jmp     loc_405596
.text:00405685 ; ---------------------------------------------------------------------------
.text:00405685
.text:00405685 loc_405685:                             ; CODE XREF: sub_405540+FA↑j
.text:00405685                 mov     [esp+3Ch+MaxCount], ecx ; Size
.text:00405689                 mov     ebx, [esp+3Ch+var_18]
.text:0040568D                 mov     [esp+3Ch+Val], esi ; Src
.text:00405691                 add     ebx, edx
.text:00405693                 mov     [esp+3Ch+Buf], ebx ; void *
.text:00405696                 call    memcpy
.text:0040569B                 mov     ecx, [esp+3Ch+var_18]
.text:0040569F                 mov     edx, [esi+200h]
.text:004056A5                 mov     ebx, [esi+204h]
.text:004056AB                 add     [ecx+200h], edx
.text:004056B1                 add     [ecx+204h], ebx
.text:004056B7                 jmp     loc_405596
.text:004056BC ; ---------------------------------------------------------------------------
.text:004056BC
.text:004056BC loc_4056BC:                             ; CODE XREF: sub_405540+72↑j
.text:004056BC                                         ; sub_405540+7B↑j
.text:004056BC                 mov     [esp+3Ch+Buf], esi ; Block
.text:004056BF                 call    free
.text:004056C4                 inc     ebx
.text:004056C5                 jz      loc_4058AC
.text:004056CB                 mov     ecx, [esp+3Ch+var_18]
.text:004056CF                 mov     eax, [ecx+200h]
.text:004056D5                 test    eax, eax
.text:004056D7                 jz      loc_405790
.text:004056DD                 mov     ebx, ebp
.text:004056DF                 or      ebx, edi
.text:004056E1                 jz      loc_405790
.text:004056E7                 cmp     byte ptr [eax+ecx-1], 0Ah
.text:004056EC                 jz      short loc_4056F8
.text:004056EE                 inc     dword ptr [ecx+204h]
.text:004056F4                 inc     [esp+3Ch+var_1C]
.text:004056F8
.text:004056F8 loc_4056F8:                             ; CODE XREF: sub_405540+1AC↑j
.text:004056F8                 mov     esi, [esp+3Ch+Block]
.text:004056FC                 xor     ebx, ebx
.text:004056FE                 mov     eax, [esp+3Ch+var_1C]
.text:00405702                 mov     ecx, [esi+204h]
.text:00405708                 sub     eax, ecx
.text:0040570A                 cmp     ebx, ebp
.text:0040570C                 jbe     loc_405899
.text:00405712
.text:00405712 loc_405712:                             ; CODE XREF: sub_405540+1EE↓j
.text:00405712                                         ; sub_405540+1F4↓j ...
.text:00405712                 sub     [esp+3Ch+var_1C], ecx
.text:00405716                 xor     ebx, ebx
.text:00405718                 mov     esi, [esi+208h]
.text:0040571E                 mov     eax, [esp+3Ch+var_1C]
.text:00405722                 mov     edx, [esi+204h]
.text:00405728                 sub     eax, edx
.text:0040572A                 cmp     ebx, ebp
.text:0040572C                 mov     ecx, edx
.text:0040572E                 ja      short loc_405712
.text:00405730                 jb      short loc_405736
.text:00405732                 cmp     eax, edi
.text:00405734                 ja      short loc_405712
.text:00405736
.text:00405736 loc_405736:                             ; CODE XREF: sub_405540+1F0↑j
.text:00405736                                         ; sub_405540:loc_405899↓j ...
.text:00405736                 mov     edx, [esi+200h]
.text:0040573C                 xor     ebx, ebx
.text:0040573E                 mov     ecx, esi
.text:00405740                 mov     eax, [esp+3Ch+var_1C]
.text:00405744                 add     edx, esi
.text:00405746                 cmp     ebx, ebp
.text:00405748                 mov     [esp+3Ch+var_24], edx
.text:0040574C                 jb      short loc_405760
.text:0040574E                 ja      short loc_405754
.text:00405750                 cmp     eax, edi
.text:00405752                 jbe     short loc_405760
.text:00405754
.text:00405754 loc_405754:                             ; CODE XREF: sub_405540+20E↑j
.text:00405754                 mov     ebx, [esp+3Ch+var_1C]
.text:00405758                 sub     ebx, edi
.text:0040575A                 jnz     loc_405870
.text:00405760
.text:00405760 loc_405760:                             ; CODE XREF: sub_405540+20C↑j
.text:00405760                                         ; sub_405540+212↑j ...
.text:00405760                 mov     edx, [esp+3Ch+var_24]
.text:00405764                 sub     edx, ecx
.text:00405766                 jnz     loc_405811
.text:0040576C
.text:0040576C loc_40576C:                             ; CODE XREF: sub_405540+2F4↓j
.text:0040576C                                         ; sub_405540+324↓j
.text:0040576C                 mov     esi, [esi+208h]
.text:00405772                 test    esi, esi
.text:00405774                 jz      short loc_405790
.text:00405776
.text:00405776 loc_405776:                             ; CODE XREF: sub_405540+248↓j
.text:00405776                 mov     edx, [esi+200h]
.text:0040577C                 test    edx, edx
.text:0040577E                 jnz     short loc_4057BD
.text:00405780
.text:00405780 loc_405780:                             ; CODE XREF: sub_405540+2A0↓j
.text:00405780                                         ; sub_405540+2CC↓j
.text:00405780                 mov     esi, [esi+208h]
.text:00405786                 test    esi, esi
.text:00405788                 jnz     short loc_405776
.text:0040578A                 lea     esi, [esi+0]
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_405540+197↑j
.text:00405790                                         ; sub_405540+1A1↑j ...
.text:00405790                 mov     esi, [esp+3Ch+Block]
.text:00405794                 test    esi, esi
.text:00405796                 jz      short loc_4057B0
.text:00405798                 mov     eax, [esp+3Ch+Block]
.text:0040579C                 mov     edi, [eax+208h]
.text:004057A2                 mov     [esp+3Ch+Buf], eax ; Block
.text:004057A5                 call    free
.text:004057AA                 mov     [esp+3Ch+Block], edi
.text:004057AE                 jmp     short loc_405790
.text:004057B0 ; ---------------------------------------------------------------------------
.text:004057B0
.text:004057B0 loc_4057B0:                             ; CODE XREF: sub_405540+256↑j
.text:004057B0                 movzx   eax, [esp+3Ch+var_1D]
.text:004057B5                 add     esp, 2Ch
.text:004057B8                 pop     ebx
.text:004057B9                 pop     esi
.text:004057BA                 pop     edi
.text:004057BB                 pop     ebp
.text:004057BC                 retn
.text:004057BD ; ---------------------------------------------------------------------------
.text:004057BD
.text:004057BD loc_4057BD:                             ; CODE XREF: sub_405540+23E↑j
.text:004057BD                 mov     [esp+3Ch+MaxCount], edx ; ElementCount
.text:004057C1                 mov     ebx, ds:_iob
.text:004057C7                 mov     [esp+3Ch+Val], 1 ; ElementSize
.text:004057CF                 mov     [esp+3Ch+Buf], esi ; Buffer
.text:004057D2                 add     ebx, 20h ; ' '
.text:004057D5                 mov     [esp+3Ch+Stream], ebx ; char
.text:004057D9                 call    fwrite
.text:004057DE                 test    eax, eax
.text:004057E0                 jnz     short loc_405780
.text:004057E2                 mov     [esp+3Ch+Buf], offset aWriteError ; "write error"
.text:004057E9                 call    ds:libintl_gettext
.text:004057EF                 mov     ebp, eax
.text:004057F1                 call    _errno
.text:004057F6                 mov     [esp+3Ch+MaxCount], ebp ; char *
.text:004057FA                 mov     edx, [eax]
.text:004057FC                 mov     [esp+3Ch+Buf], 1 ; Code
.text:00405803                 mov     [esp+3Ch+Val], edx ; ErrorMessage
.text:00405807                 call    sub_40AB80
.text:0040580C                 jmp     loc_405780
.text:00405811 ; ---------------------------------------------------------------------------
.text:00405811
.text:00405811 loc_405811:                             ; CODE XREF: sub_405540+226↑j
.text:00405811                 mov     [esp+3Ch+MaxCount], edx ; ElementCount
.text:00405815                 mov     ebp, ds:_iob
.text:0040581B                 mov     [esp+3Ch+Val], 1 ; ElementSize
.text:00405823                 mov     [esp+3Ch+Buf], ecx ; Buffer
.text:00405826                 add     ebp, 20h ; ' '
.text:00405829                 mov     [esp+3Ch+Stream], ebp ; char
.text:0040582D                 call    fwrite
.text:00405832                 test    eax, eax
.text:00405834                 jnz     loc_40576C
.text:0040583A                 mov     [esp+3Ch+Buf], offset aWriteError ; "write error"
.text:00405841                 call    ds:libintl_gettext
.text:00405847                 mov     edi, eax
.text:00405849                 call    _errno
.text:0040584E                 mov     [esp+3Ch+MaxCount], edi ; char *
.text:00405852                 mov     ecx, [eax]
.text:00405854                 mov     [esp+3Ch+Buf], 1 ; Code
.text:0040585B                 mov     [esp+3Ch+Val], ecx ; ErrorMessage
.text:0040585F                 call    sub_40AB80
.text:00405864                 jmp     loc_40576C
.text:00405864 ; ---------------------------------------------------------------------------
.text:00405869                 align 10h
.text:00405870
.text:00405870 loc_405870:                             ; CODE XREF: sub_405540+21A↑j
.text:00405870                                         ; sub_405540+352↓j
.text:00405870                 mov     [esp+3Ch+Buf], ecx ; Buf
.text:00405873                 mov     edi, [esp+3Ch+var_24]
.text:00405877                 mov     [esp+3Ch+Val], 0Ah ; Val
.text:0040587F                 sub     edi, ecx
.text:00405881                 mov     [esp+3Ch+MaxCount], edi ; MaxCount
.text:00405885                 call    memchr
.text:0040588A                 test    eax, eax
.text:0040588C                 mov     ecx, eax
.text:0040588E                 jz      short loc_4058F2
.text:00405890                 inc     ecx
.text:00405891                 dec     ebx
.text:00405892                 jnz     short loc_405870
.text:00405894                 jmp     loc_405760
.text:00405899 ; ---------------------------------------------------------------------------
.text:00405899
.text:00405899 loc_405899:                             ; CODE XREF: sub_405540+1CC↑j
.text:00405899                 jb      loc_405736
.text:0040589F                 cmp     eax, edi
.text:004058A1                 ja      loc_405712
.text:004058A7                 jmp     loc_405736
.text:004058AC ; ---------------------------------------------------------------------------
.text:004058AC
.text:004058AC loc_4058AC:                             ; CODE XREF: sub_405540+185↑j
.text:004058AC                 mov     esi, [esp+3Ch+arg_0]
.text:004058B0                 mov     [esp+3Ch+Buf], esi ; char *
.text:004058B3                 call    sub_4095E0
.text:004058B8                 mov     [esp+3Ch+Buf], offset aErrorReadingS ; "error reading %s"
.text:004058BF                 mov     ebx, eax
.text:004058C1                 call    ds:libintl_gettext
.text:004058C7                 mov     ebp, eax
.text:004058C9                 call    _errno
.text:004058CE                 mov     [esp+3Ch+Stream], ebx ; char
.text:004058D2                 mov     [esp+3Ch+MaxCount], ebp ; char *
.text:004058D6                 mov     edi, [eax]
.text:004058D8                 mov     [esp+3Ch+Buf], 0 ; Code
.text:004058DF                 mov     [esp+3Ch+Val], edi ; ErrorMessage
.text:004058E3                 call    sub_40AB80
.text:004058E8                 mov     [esp+3Ch+var_1D], 0
.text:004058ED                 jmp     loc_405790
.text:004058F2 ; ---------------------------------------------------------------------------
.text:004058F2
.text:004058F2 loc_4058F2:                             ; CODE XREF: sub_405540+34E↑j
.text:004058F2                 mov     [esp+3Ch+MaxCount], 283h
.text:004058FA                 mov     [esp+3Ch+Val], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tail.c"
.text:00405902                 mov     [esp+3Ch+Buf], offset byte_40552D
.text:00405909                 call    _assert
.text:00405909 sub_405540      endp
.text:00405909
.text:00405909 ; ---------------------------------------------------------------------------
.text:0040590E                 align 10h
.text:00405910
.text:00405910 ; =============== S U B R O U T I N E =======================================
.text:00405910
.text:00405910
.text:00405910 ; int __cdecl sub_405910(char *, int, int, int, int)
.text:00405910 sub_405910      proc near               ; CODE XREF: sub_404880+2E6↑p
.text:00405910
.text:00405910 Block           = dword ptr -3Ch
.text:00405910 Src             = dword ptr -38h
.text:00405910 Size            = dword ptr -34h
.text:00405910 Stream          = dword ptr -30h
.text:00405910 var_1D          = byte ptr -1Dh
.text:00405910 var_1C          = dword ptr -1Ch
.text:00405910 var_18          = dword ptr -18h
.text:00405910 var_14          = dword ptr -14h
.text:00405910 arg_0           = dword ptr  4
.text:00405910 arg_4           = dword ptr  8
.text:00405910 arg_8           = dword ptr  0Ch
.text:00405910 arg_C           = dword ptr  10h
.text:00405910 arg_10          = dword ptr  14h
.text:00405910
.text:00405910                 push    ebp
.text:00405911                 push    edi
.text:00405912                 push    esi
.text:00405913                 push    ebx
.text:00405914                 sub     esp, 2Ch
.text:00405917                 mov     edi, [esp+3Ch+arg_8]
.text:0040591B                 mov     [esp+3Ch+var_1C], 0
.text:00405923                 mov     ebp, [esp+3Ch+arg_C]
.text:00405927                 mov     [esp+3Ch+var_1D], 1
.text:0040592C                 mov     [esp+3Ch+Block], 208h ; size_t
.text:00405933                 call    sub_407390
.text:00405938                 mov     [esp+3Ch+var_14], eax
.text:0040593C                 xor     edx, edx
.text:0040593E                 mov     [eax+200h], edx
.text:00405944                 xor     edx, edx
.text:00405946                 mov     [esp+3Ch+var_18], eax
.text:0040594A                 mov     [eax+204h], edx
.text:00405950
.text:00405950 loc_405950:                             ; CODE XREF: sub_405910+CD↓j
.text:00405950                                         ; sub_405910+D7↓j
.text:00405950                 mov     [esp+3Ch+Block], 208h ; size_t
.text:00405957                 call    sub_407390
.text:0040595C                 mov     esi, eax
.text:0040595E
.text:0040595E loc_40595E:                             ; CODE XREF: sub_405910+EF↓j
.text:0040595E                                         ; sub_405910+11A↓j
.text:0040595E                 mov     [esp+3Ch+Size], 200h
.text:00405966                 mov     eax, [esp+3Ch+arg_4]
.text:0040596A                 mov     [esp+3Ch+Src], esi
.text:0040596E                 mov     [esp+3Ch+Block], eax
.text:00405971                 call    sub_409610
.text:00405976                 test    eax, eax
.text:00405978                 mov     ebx, eax
.text:0040597A                 jz      loc_405A2F
.text:00405980                 cmp     eax, 0FFFFFFFFh
.text:00405983                 jz      loc_405A2F
.text:00405989                 mov     [esi+200h], ebx
.text:0040598F                 mov     ecx, [esp+3Ch+arg_10]
.text:00405993                 xor     edx, edx
.text:00405995                 add     [ecx], eax
.text:00405997                 adc     [ecx+4], edx
.text:0040599A                 mov     ecx, [esp+3Ch+var_18]
.text:0040599E                 xor     edx, edx
.text:004059A0                 mov     [esi+204h], edx
.text:004059A6                 add     [esp+3Ch+var_1C], ebx
.text:004059AA                 mov     edx, [ecx+200h]
.text:004059B0                 lea     ecx, [edx+ebx]
.text:004059B3                 cmp     ecx, 1FFh
.text:004059B9                 jbe     short loc_405A04
.text:004059BB                 mov     edx, [esp+3Ch+var_14]
.text:004059BF                 mov     eax, [esp+3Ch+var_18]
.text:004059C3                 mov     [esp+3Ch+var_18], esi
.text:004059C7                 mov     ecx, [esp+3Ch+var_1C]
.text:004059CB                 mov     ebx, [edx+200h]
.text:004059D1                 mov     [eax+204h], esi
.text:004059D7                 xor     esi, esi
.text:004059D9                 sub     ecx, ebx
.text:004059DB                 cmp     esi, ebp
.text:004059DD                 jb      loc_405950
.text:004059E3                 ja      short loc_4059ED
.text:004059E5                 cmp     ecx, edi
.text:004059E7                 jbe     loc_405950
.text:004059ED
.text:004059ED loc_4059ED:                             ; CODE XREF: sub_405910+D3↑j
.text:004059ED                 mov     [esp+3Ch+var_1C], ecx
.text:004059F1                 mov     esi, [esp+3Ch+var_14]
.text:004059F5                 mov     ecx, [esi+204h]
.text:004059FB                 mov     [esp+3Ch+var_14], ecx
.text:004059FF                 jmp     loc_40595E
.text:00405A04 ; ---------------------------------------------------------------------------
.text:00405A04
.text:00405A04 loc_405A04:                             ; CODE XREF: sub_405910+A9↑j
.text:00405A04                 mov     [esp+3Ch+Size], ebx ; Size
.text:00405A08                 mov     ecx, [esp+3Ch+var_18]
.text:00405A0C                 mov     [esp+3Ch+Src], esi ; Src
.text:00405A10                 add     ecx, edx
.text:00405A12                 mov     [esp+3Ch+Block], ecx ; void *
.text:00405A15                 call    memcpy
.text:00405A1A                 mov     ebx, [esp+3Ch+var_18]
.text:00405A1E                 mov     ecx, [esi+200h]
.text:00405A24                 add     [ebx+200h], ecx
.text:00405A2A                 jmp     loc_40595E
.text:00405A2F ; ---------------------------------------------------------------------------
.text:00405A2F
.text:00405A2F loc_405A2F:                             ; CODE XREF: sub_405910+6A↑j
.text:00405A2F                                         ; sub_405910+73↑j
.text:00405A2F                 mov     [esp+3Ch+Block], esi ; Block
.text:00405A32                 call    free
.text:00405A37                 inc     ebx
.text:00405A38                 jz      loc_405BE3
.text:00405A3E                 mov     esi, [esp+3Ch+var_14]
.text:00405A42                 xor     ecx, ecx
.text:00405A44                 mov     eax, [esp+3Ch+var_1C]
.text:00405A48                 mov     ebx, [esi+200h]
.text:00405A4E                 sub     eax, ebx
.text:00405A50                 cmp     ecx, ebp
.text:00405A52                 jbe     loc_405BC3
.text:00405A58
.text:00405A58 loc_405A58:                             ; CODE XREF: sub_405910+2B9↓j
.text:00405A58                 mov     ecx, ebx
.text:00405A5A                 lea     esi, [esi+0]
.text:00405A60
.text:00405A60 loc_405A60:                             ; CODE XREF: sub_405910+16A↓j
.text:00405A60                                         ; sub_405910+170↓j
.text:00405A60                 sub     [esp+3Ch+var_1C], ecx
.text:00405A64                 xor     ebx, ebx
.text:00405A66                 mov     esi, [esi+204h]
.text:00405A6C                 mov     eax, [esp+3Ch+var_1C]
.text:00405A70                 mov     ecx, [esi+200h]
.text:00405A76                 sub     eax, ecx
.text:00405A78                 cmp     ebx, ebp
.text:00405A7A                 ja      short loc_405A60
.text:00405A7C                 jb      short loc_405A82
.text:00405A7E                 cmp     eax, edi
.text:00405A80                 ja      short loc_405A60
.text:00405A82
.text:00405A82 loc_405A82:                             ; CODE XREF: sub_405910+16C↑j
.text:00405A82                                         ; sub_405910+2BF↓j ...
.text:00405A82                 xor     ebx, ebx
.text:00405A84                 mov     eax, [esp+3Ch+var_1C]
.text:00405A88                 cmp     ebx, ebp
.text:00405A8A                 jb      loc_405BBC
.text:00405A90                 ja      short loc_405A9A
.text:00405A92                 cmp     eax, edi
.text:00405A94                 jbe     loc_405BBC
.text:00405A9A
.text:00405A9A loc_405A9A:                             ; CODE XREF: sub_405910+180↑j
.text:00405A9A                 mov     eax, [esp+3Ch+var_1C]
.text:00405A9E                 sub     eax, edi
.text:00405AA0
.text:00405AA0 loc_405AA0:                             ; CODE XREF: sub_405910+2AE↓j
.text:00405AA0                 mov     edx, ecx
.text:00405AA2                 lea     ebx, [eax+esi]
.text:00405AA5                 sub     edx, eax
.text:00405AA7                 jnz     loc_405B64
.text:00405AAD
.text:00405AAD loc_405AAD:                             ; CODE XREF: sub_405910+277↓j
.text:00405AAD                                         ; sub_405910+2A7↓j
.text:00405AAD                 mov     esi, [esi+204h]
.text:00405AB3                 test    esi, esi
.text:00405AB5                 jz      short loc_405AE0
.text:00405AB7                 mov     esi, esi
.text:00405AB9                 lea     edi, [edi+0]
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_405910+1C2↓j
.text:00405AC0                 mov     edx, [esi+200h]
.text:00405AC6                 test    edx, edx
.text:00405AC8                 jnz     short loc_405B10
.text:00405ACA
.text:00405ACA loc_405ACA:                             ; CODE XREF: sub_405910+223↓j
.text:00405ACA                                         ; sub_405910+24F↓j
.text:00405ACA                 mov     esi, [esi+204h]
.text:00405AD0                 test    esi, esi
.text:00405AD2                 jnz     short loc_405AC0
.text:00405AD4                 lea     esi, [esi+0]
.text:00405ADA                 lea     edi, [edi+0]
.text:00405AE0
.text:00405AE0 loc_405AE0:                             ; CODE XREF: sub_405910+1A5↑j
.text:00405AE0                                         ; sub_405910+1EE↓j ...
.text:00405AE0                 mov     edi, [esp+3Ch+var_14]
.text:00405AE4                 test    edi, edi
.text:00405AE6                 jz      short loc_405B00
.text:00405AE8                 mov     eax, [esp+3Ch+var_14]
.text:00405AEC                 mov     ebx, [eax+204h]
.text:00405AF2                 mov     [esp+3Ch+Block], eax ; Block
.text:00405AF5                 call    free
.text:00405AFA                 mov     [esp+3Ch+var_14], ebx
.text:00405AFE                 jmp     short loc_405AE0
.text:00405B00 ; ---------------------------------------------------------------------------
.text:00405B00
.text:00405B00 loc_405B00:                             ; CODE XREF: sub_405910+1D6↑j
.text:00405B00                 movzx   eax, [esp+3Ch+var_1D]
.text:00405B05                 add     esp, 2Ch
.text:00405B08                 pop     ebx
.text:00405B09                 pop     esi
.text:00405B0A                 pop     edi
.text:00405B0B                 pop     ebp
.text:00405B0C                 retn
.text:00405B0C ; ---------------------------------------------------------------------------
.text:00405B0D                 align 10h
.text:00405B10
.text:00405B10 loc_405B10:                             ; CODE XREF: sub_405910+1B8↑j
.text:00405B10                 mov     [esp+3Ch+Size], edx ; ElementCount
.text:00405B14                 mov     ecx, ds:_iob
.text:00405B1A                 mov     [esp+3Ch+Src], 1 ; ElementSize
.text:00405B22                 mov     [esp+3Ch+Block], esi ; Buffer
.text:00405B25                 add     ecx, 20h ; ' '
.text:00405B28                 mov     [esp+3Ch+Stream], ecx ; char
.text:00405B2C                 call    fwrite
.text:00405B31                 test    eax, eax
.text:00405B33                 jnz     short loc_405ACA
.text:00405B35                 mov     [esp+3Ch+Block], offset aWriteError ; "write error"
.text:00405B3C                 call    ds:libintl_gettext
.text:00405B42                 mov     ebp, eax
.text:00405B44                 call    _errno
.text:00405B49                 mov     [esp+3Ch+Size], ebp ; char *
.text:00405B4D                 mov     edx, [eax]
.text:00405B4F                 mov     [esp+3Ch+Block], 1 ; Code
.text:00405B56                 mov     [esp+3Ch+Src], edx ; ErrorMessage
.text:00405B5A                 call    sub_40AB80
.text:00405B5F                 jmp     loc_405ACA
.text:00405B64 ; ---------------------------------------------------------------------------
.text:00405B64
.text:00405B64 loc_405B64:                             ; CODE XREF: sub_405910+197↑j
.text:00405B64                 mov     [esp+3Ch+Size], edx ; ElementCount
.text:00405B68                 mov     edi, ds:_iob
.text:00405B6E                 mov     [esp+3Ch+Src], 1 ; ElementSize
.text:00405B76                 mov     [esp+3Ch+Block], ebx ; Buffer
.text:00405B79                 add     edi, 20h ; ' '
.text:00405B7C                 mov     [esp+3Ch+Stream], edi ; char
.text:00405B80                 call    fwrite
.text:00405B85                 test    eax, eax
.text:00405B87                 jnz     loc_405AAD
.text:00405B8D                 mov     [esp+3Ch+Block], offset aWriteError ; "write error"
.text:00405B94                 call    ds:libintl_gettext
.text:00405B9A                 mov     edi, eax
.text:00405B9C                 call    _errno
.text:00405BA1                 mov     [esp+3Ch+Size], edi ; char *
.text:00405BA5                 mov     ebp, [eax]
.text:00405BA7                 mov     [esp+3Ch+Block], 1 ; Code
.text:00405BAE                 mov     [esp+3Ch+Src], ebp ; ErrorMessage
.text:00405BB2                 call    sub_40AB80
.text:00405BB7                 jmp     loc_405AAD
.text:00405BBC ; ---------------------------------------------------------------------------
.text:00405BBC
.text:00405BBC loc_405BBC:                             ; CODE XREF: sub_405910+17A↑j
.text:00405BBC                                         ; sub_405910+184↑j
.text:00405BBC                 xor     eax, eax
.text:00405BBE                 jmp     loc_405AA0
.text:00405BC3 ; ---------------------------------------------------------------------------
.text:00405BC3
.text:00405BC3 loc_405BC3:                             ; CODE XREF: sub_405910+142↑j
.text:00405BC3                 jb      short loc_405BD4
.text:00405BC5                 cmp     eax, edi
.text:00405BC7                 mov     ecx, ebx
.text:00405BC9                 ja      loc_405A58
.text:00405BCF                 jmp     loc_405A82
.text:00405BD4 ; ---------------------------------------------------------------------------
.text:00405BD4
.text:00405BD4 loc_405BD4:                             ; CODE XREF: sub_405910:loc_405BC3↑j
.text:00405BD4                 mov     edx, [esp+3Ch+var_14]
.text:00405BD8                 mov     ecx, [edx+200h]
.text:00405BDE                 jmp     loc_405A82
.text:00405BE3 ; ---------------------------------------------------------------------------
.text:00405BE3
.text:00405BE3 loc_405BE3:                             ; CODE XREF: sub_405910+128↑j
.text:00405BE3                 mov     esi, [esp+3Ch+arg_0]
.text:00405BE7                 mov     [esp+3Ch+Block], esi ; char *
.text:00405BEA                 call    sub_4095E0
.text:00405BEF                 mov     [esp+3Ch+Block], offset aErrorReadingS ; "error reading %s"
.text:00405BF6                 mov     ebx, eax
.text:00405BF8                 call    ds:libintl_gettext
.text:00405BFE                 mov     ebp, eax
.text:00405C00                 call    _errno
.text:00405C05                 mov     [esp+3Ch+Stream], ebx ; char
.text:00405C09                 mov     [esp+3Ch+Size], ebp ; char *
.text:00405C0D                 mov     edi, [eax]
.text:00405C0F                 mov     [esp+3Ch+Block], 0 ; Code
.text:00405C16                 mov     [esp+3Ch+Src], edi ; ErrorMessage
.text:00405C1A                 call    sub_40AB80
.text:00405C1F                 mov     [esp+3Ch+var_1D], 0
.text:00405C24                 jmp     loc_405AE0
.text:00405C24 sub_405910      endp
.text:00405C24
.text:00405C24 ; ---------------------------------------------------------------------------
.text:00405C29                 align 10h
.text:00405C30
.text:00405C30 ; =============== S U B R O U T I N E =======================================
.text:00405C30
.text:00405C30
.text:00405C30 ; int __cdecl sub_405C30(char *, int, int, int, int)
.text:00405C30 sub_405C30      proc near               ; CODE XREF: sub_404DA0+218↑p
.text:00405C30
.text:00405C30 Buf             = dword ptr -22Ch
.text:00405C30 Val             = dword ptr -228h
.text:00405C30 MaxCount        = dword ptr -224h
.text:00405C30 Stream          = dword ptr -220h
.text:00405C30 var_21C         = byte ptr -21Ch
.text:00405C30 arg_0           = dword ptr  4
.text:00405C30 arg_4           = dword ptr  8
.text:00405C30 arg_8           = dword ptr  0Ch
.text:00405C30 arg_C           = dword ptr  10h
.text:00405C30 arg_10          = dword ptr  14h
.text:00405C30
.text:00405C30                 push    ebp
.text:00405C31                 xor     edx, edx
.text:00405C33                 push    edi
.text:00405C34                 push    esi
.text:00405C35                 push    ebx
.text:00405C36                 sub     esp, 21Ch
.text:00405C3C                 mov     esi, [esp+22Ch+arg_C]
.text:00405C43                 mov     ebx, [esp+22Ch+arg_8]
.text:00405C4A                 mov     ecx, esi
.text:00405C4C                 or      ecx, ebx
.text:00405C4E                 jz      loc_405CD7
.text:00405C54
.text:00405C54 loc_405C54:                             ; CODE XREF: sub_405C30+8C↓j
.text:00405C54                 mov     [esp+22Ch+MaxCount], 200h
.text:00405C5C                 mov     eax, [esp+22Ch+arg_4]
.text:00405C63                 lea     edi, [esp+22Ch+var_21C]
.text:00405C67                 mov     [esp+22Ch+Val], edi
.text:00405C6B                 mov     [esp+22Ch+Buf], eax
.text:00405C6E                 call    sub_409610
.text:00405C73                 test    eax, eax
.text:00405C75                 lea     ebp, [eax+edi]
.text:00405C78                 mov     edx, 0FFFFFFFFh
.text:00405C7D                 jz      short loc_405CD7
.text:00405C7F                 cmp     eax, 0FFFFFFFFh
.text:00405C82                 jz      loc_405D35
.text:00405C88                 mov     ecx, [esp+22Ch+arg_10]
.text:00405C8F                 xor     edx, edx
.text:00405C91                 add     [ecx], eax
.text:00405C93                 adc     [ecx+4], edx
.text:00405C96                 lea     esi, [esi+0]
.text:00405C99                 lea     edi, [edi+0]
.text:00405CA0
.text:00405CA0 loc_405CA0:                             ; CODE XREF: sub_405C30+99↓j
.text:00405CA0                 mov     [esp+22Ch+Buf], edi ; Buf
.text:00405CA3                 mov     ecx, ebp
.text:00405CA5                 sub     ecx, edi
.text:00405CA7                 mov     [esp+22Ch+MaxCount], ecx ; MaxCount
.text:00405CAB                 mov     [esp+22Ch+Val], 0Ah ; Val
.text:00405CB3                 call    memchr
.text:00405CB8                 test    eax, eax
.text:00405CBA                 mov     edi, eax
.text:00405CBC                 jz      short loc_405C54
.text:00405CBE                 inc     edi
.text:00405CBF                 add     ebx, 0FFFFFFFFh
.text:00405CC2                 adc     esi, 0FFFFFFFFh
.text:00405CC5                 mov     edx, esi
.text:00405CC7                 or      edx, ebx
.text:00405CC9                 jnz     short loc_405CA0
.text:00405CCB                 cmp     edi, ebp
.text:00405CCD                 jnb     short loc_405CD5
.text:00405CCF                 mov     edx, ebp
.text:00405CD1                 sub     edx, edi
.text:00405CD3                 jnz     short loc_405CE4
.text:00405CD5
.text:00405CD5 loc_405CD5:                             ; CODE XREF: sub_405C30+9D↑j
.text:00405CD5                                         ; sub_405C30+D7↓j ...
.text:00405CD5                 xor     edx, edx
.text:00405CD7
.text:00405CD7 loc_405CD7:                             ; CODE XREF: sub_405C30+1E↑j
.text:00405CD7                                         ; sub_405C30+4D↑j ...
.text:00405CD7                 add     esp, 21Ch
.text:00405CDD                 mov     eax, edx
.text:00405CDF                 pop     ebx
.text:00405CE0                 pop     esi
.text:00405CE1                 pop     edi
.text:00405CE2                 pop     ebp
.text:00405CE3                 retn
.text:00405CE4 ; ---------------------------------------------------------------------------
.text:00405CE4
.text:00405CE4 loc_405CE4:                             ; CODE XREF: sub_405C30+A3↑j
.text:00405CE4                 mov     [esp+22Ch+MaxCount], edx ; ElementCount
.text:00405CE8                 mov     esi, ds:_iob
.text:00405CEE                 mov     [esp+22Ch+Val], 1 ; ElementSize
.text:00405CF6                 mov     [esp+22Ch+Buf], edi ; Buffer
.text:00405CF9                 add     esi, 20h ; ' '
.text:00405CFC                 mov     [esp+22Ch+Stream], esi ; char
.text:00405D00                 call    fwrite
.text:00405D05                 test    eax, eax
.text:00405D07                 jnz     short loc_405CD5
.text:00405D09                 mov     [esp+22Ch+Buf], offset aWriteError ; "write error"
.text:00405D10                 call    ds:libintl_gettext
.text:00405D16                 mov     edi, eax
.text:00405D18                 call    _errno
.text:00405D1D                 mov     [esp+22Ch+MaxCount], edi ; char *
.text:00405D21                 mov     ebp, [eax]
.text:00405D23                 mov     [esp+22Ch+Buf], 1 ; Code
.text:00405D2A                 mov     [esp+22Ch+Val], ebp ; ErrorMessage
.text:00405D2E                 call    sub_40AB80
.text:00405D33                 jmp     short loc_405CD5
.text:00405D35 ; ---------------------------------------------------------------------------
.text:00405D35
.text:00405D35 loc_405D35:                             ; CODE XREF: sub_405C30+52↑j
.text:00405D35                 mov     ecx, [esp+22Ch+arg_0]
.text:00405D3C                 mov     [esp+22Ch+Buf], ecx ; char *
.text:00405D3F                 call    sub_4095E0
.text:00405D44                 mov     [esp+22Ch+Buf], offset aErrorReadingS ; "error reading %s"
.text:00405D4B                 mov     ebx, eax
.text:00405D4D                 call    ds:libintl_gettext
.text:00405D53                 mov     edi, eax
.text:00405D55                 call    _errno
.text:00405D5A                 mov     [esp+22Ch+Stream], ebx ; char
.text:00405D5E                 mov     [esp+22Ch+MaxCount], edi ; char *
.text:00405D62                 mov     edx, [eax]
.text:00405D64                 mov     [esp+22Ch+Buf], 0 ; Code
.text:00405D6B                 mov     [esp+22Ch+Val], edx ; ErrorMessage
.text:00405D6F                 call    sub_40AB80
.text:00405D74                 mov     edx, 1
.text:00405D79                 jmp     loc_405CD7
.text:00405D79 sub_405C30      endp
.text:00405D79
.text:00405D79 ; ---------------------------------------------------------------------------
.text:00405D7E                 align 10h
.text:00405D80 dword_405D80    dd 90002D2Dh, 7 dup(90909090h)
.text:00405D80                                         ; DATA XREF: sub_405FD0+E4↓o
.text:00405DA0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00405DA0                                         ; DATA XREF: sub_405FD0+2FC↓o
.text:00405DCD                 align 20h
.text:00405DE0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00405DE0                                         ; DATA XREF: sub_405FD0:loc_406332↓o
.text:00405E0D                 align 20h
.text:00405E20 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00405E20                                         ; DATA XREF: sub_405FD0:loc_4063D0↓o
.text:00405E20                                         ; sub_405FD0:loc_406797↓o
.text:00405E46                 align 20h
.text:00405E60 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00405E60                                         ; DATA XREF: sub_405FD0+48E↓o
.text:00405E80 dword_405E80    dd 90909000h, 7 dup(90909090h)
.text:00405E80                                         ; DATA XREF: sub_405FD0:loc_4064A1↓o
.text:00405EA0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00405EA0                                         ; DATA XREF: sub_405FD0:loc_4064BA↓o
.text:00405EC0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00405EC0                                         ; DATA XREF: sub_405FD0:loc_40659F↓o
.text:00405EC0                                         ; sub_405FD0:loc_4068CC↓o
.text:00405EE7                 align 20h
.text:00405F00 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00405F00                                         ; DATA XREF: sub_405FD0:loc_406713↓o
.text:00405F2E                 align 20h
.text:00405F40 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00405F40                                         ; DATA XREF: sub_405FD0:loc_4067FF↓o
.text:00405F61 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00405F61                                         ; DATA XREF: sub_405FD0+93F↓o
.text:00405F7B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00405F7B                                         ; DATA XREF: sub_405FD0:loc_406947↓o
.text:00405F95 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00405F95                                         ; DATA XREF: sub_405FD0:loc_40696E↓o
.text:00405FB3 ; const char VarName[]
.text:00405FB3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_405FD0:loc_406B20↓o
.text:00405FC3                 align 10h
.text:00405FD0
.text:00405FD0 ; =============== S U B R O U T I N E =======================================
.text:00405FD0
.text:00405FD0
.text:00405FD0 ; int __cdecl sub_405FD0(int, int, char *Str, int, int, int, int, int)
.text:00405FD0 sub_405FD0      proc near               ; CODE XREF: sub_406B60+5A↓p
.text:00405FD0                                         ; .text:00406C4A↓p ...
.text:00405FD0
.text:00405FD0 Str1            = dword ptr -5Ch
.text:00405FD0 Str2            = dword ptr -58h
.text:00405FD0 MaxCount        = dword ptr -54h
.text:00405FD0 var_50          = dword ptr -50h
.text:00405FD0 var_4C          = dword ptr -4Ch
.text:00405FD0 var_3C          = dword ptr -3Ch
.text:00405FD0 var_38          = dword ptr -38h
.text:00405FD0 var_34          = dword ptr -34h
.text:00405FD0 var_30          = dword ptr -30h
.text:00405FD0 var_2C          = dword ptr -2Ch
.text:00405FD0 var_28          = dword ptr -28h
.text:00405FD0 var_24          = dword ptr -24h
.text:00405FD0 var_20          = dword ptr -20h
.text:00405FD0 var_1C          = dword ptr -1Ch
.text:00405FD0 var_18          = dword ptr -18h
.text:00405FD0 var_14          = dword ptr -14h
.text:00405FD0 arg_0           = dword ptr  4
.text:00405FD0 arg_4           = dword ptr  8
.text:00405FD0 Str             = dword ptr  0Ch
.text:00405FD0 arg_C           = dword ptr  10h
.text:00405FD0 arg_10          = dword ptr  14h
.text:00405FD0 arg_14          = dword ptr  18h
.text:00405FD0 arg_18          = dword ptr  1Ch
.text:00405FD0 arg_1C          = dword ptr  20h
.text:00405FD0
.text:00405FD0                 push    ebp
.text:00405FD1                 mov     eax, 0FFFFFFFFh
.text:00405FD6                 push    edi
.text:00405FD7                 push    esi
.text:00405FD8                 push    ebx
.text:00405FD9                 sub     esp, 4Ch
.text:00405FDC                 mov     esi, [esp+5Ch+Str]
.text:00405FE0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00405FE4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00405FE7                 mov     ebx, [ebp+4]
.text:00405FEA                 setz    dl
.text:00405FED                 movzx   ecx, dl
.text:00405FF0                 dec     ecx
.text:00405FF1                 and     ecx, ebx
.text:00405FF3                 mov     [esp+5Ch+var_14], ecx
.text:00405FF7                 mov     ecx, [esp+5Ch+arg_0]
.text:00405FFB                 test    ecx, ecx
.text:00405FFD                 jle     loc_406127
.text:00406003                 mov     dword ptr [ebp+0Ch], 0
.text:0040600A                 mov     ebx, [ebp+0]
.text:0040600D                 test    ebx, ebx
.text:0040600F                 jz      loc_406B40
.text:00406015                 mov     edi, [ebp+10h]
.text:00406018                 test    edi, edi
.text:0040601A                 jnz     short loc_406073
.text:0040601C                 lea     esi, [esi+0]
.text:00406020
.text:00406020 loc_406020:                             ; CODE XREF: sub_405FD0+B7C↓j
.text:00406020                 mov     [ebp+24h], ebx
.text:00406023                 mov     esi, [esp+5Ch+Str]
.text:00406027                 mov     [ebp+20h], ebx
.text:0040602A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040602E                 xor     ebx, ebx
.text:00406030                 mov     dword ptr [ebp+14h], 0
.text:00406037                 test    ecx, ecx
.text:00406039                 jz      loc_406B20
.text:0040603F
.text:0040603F loc_40603F:                             ; CODE XREF: sub_405FD0+B64↓j
.text:0040603F                 mov     ebx, 1
.text:00406044
.text:00406044 loc_406044:                             ; CODE XREF: sub_405FD0+B5E↓j
.text:00406044                 mov     [ebp+1Ch], ebx
.text:00406047                 mov     ecx, [esp+5Ch+Str]
.text:0040604B                 movzx   eax, byte ptr [ecx]
.text:0040604E                 cmp     al, 2Dh ; '-'
.text:00406050                 jz      loc_406B10
.text:00406056                 cmp     al, 2Bh ; '+'
.text:00406058                 jz      loc_406AF9
.text:0040605E                 xor     edx, edx
.text:00406060                 test    ebx, ebx
.text:00406062                 setz    dl
.text:00406065                 mov     [ebp+18h], edx
.text:00406068
.text:00406068 loc_406068:                             ; CODE XREF: sub_405FD0+B35↓j
.text:00406068                 mov     [esp+5Ch+Str], esi
.text:0040606C                 mov     dword ptr [ebp+10h], 1
.text:00406073
.text:00406073 loc_406073:                             ; CODE XREF: sub_405FD0+4A↑j
.text:00406073                 mov     eax, [ebp+14h]
.text:00406076                 test    eax, eax
.text:00406078                 jz      short loc_406083
.text:0040607A                 cmp     byte ptr [eax], 0
.text:0040607D                 jnz     loc_406160
.text:00406083
.text:00406083 loc_406083:                             ; CODE XREF: sub_405FD0+A8↑j
.text:00406083                 mov     ebx, [ebp+0]
.text:00406086                 cmp     [ebp+24h], ebx
.text:00406089                 jle     short loc_40608E
.text:0040608B                 mov     [ebp+24h], ebx
.text:0040608E
.text:0040608E loc_40608E:                             ; CODE XREF: sub_405FD0+B9↑j
.text:0040608E                 cmp     [ebp+20h], ebx
.text:00406091                 jle     short loc_406096
.text:00406093                 mov     [ebp+20h], ebx
.text:00406096
.text:00406096 loc_406096:                             ; CODE XREF: sub_405FD0+C1↑j
.text:00406096                 cmp     dword ptr [ebp+18h], 1
.text:0040609A                 jz      loc_406A70
.text:004060A0
.text:004060A0 loc_4060A0:                             ; CODE XREF: sub_405FD0+B13↓j
.text:004060A0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004060A4                 jz      loc_406A54
.text:004060AA                 cld
.text:004060AB                 mov     ecx, [esp+5Ch+arg_4]
.text:004060AF                 mov     edx, 3
.text:004060B4                 mov     edi, offset dword_405D80
.text:004060B9                 mov     esi, [ecx+ebx*4]
.text:004060BC                 mov     ecx, edx
.text:004060BE                 repe cmpsb
.text:004060C0                 jnz     short loc_4060FC
.text:004060C2                 mov     edx, [ebp+24h]
.text:004060C5                 lea     eax, [ebx+1]
.text:004060C8                 cmp     [ebp+20h], edx
.text:004060CB                 mov     [ebp+0], eax
.text:004060CE                 jz      loc_406A68
.text:004060D4                 cmp     edx, eax
.text:004060D6                 jz      short loc_4060F0
.text:004060D8                 mov     [esp+5Ch+Str2], ebp
.text:004060DC                 mov     ebx, [esp+5Ch+arg_4]
.text:004060E0                 mov     [esp+5Ch+Str1], ebx
.text:004060E3                 call    sub_406C80
.text:004060E8                 nop
.text:004060E9                 lea     esi, [esi+0]
.text:004060F0
.text:004060F0 loc_4060F0:                             ; CODE XREF: sub_405FD0+106↑j
.text:004060F0                                         ; sub_405FD0+A9B↓j
.text:004060F0                 mov     eax, [esp+5Ch+arg_0]
.text:004060F4                 mov     ebx, eax
.text:004060F6                 mov     [ebp+24h], eax
.text:004060F9                 mov     [ebp+0], eax
.text:004060FC
.text:004060FC loc_4060FC:                             ; CODE XREF: sub_405FD0+F0↑j
.text:004060FC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00406100                 jz      loc_406A54
.text:00406106                 mov     esi, [esp+5Ch+arg_4]
.text:0040610A                 mov     eax, [esi+ebx*4]
.text:0040610D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00406110                 jz      short loc_406137
.text:00406112
.text:00406112 loc_406112:                             ; CODE XREF: sub_405FD0+16D↓j
.text:00406112                 mov     edx, [ebp+18h]
.text:00406115                 test    edx, edx
.text:00406117                 jz      short loc_406130
.text:00406119                 mov     [ebp+0Ch], eax
.text:0040611C                 lea     edi, [ebx+1]
.text:0040611F                 mov     eax, 1
.text:00406124                 mov     [ebp+0], edi
.text:00406127
.text:00406127 loc_406127:                             ; CODE XREF: sub_405FD0+2D↑j
.text:00406127                                         ; sub_405FD0+165↓j ...
.text:00406127                 add     esp, 4Ch
.text:0040612A                 pop     ebx
.text:0040612B                 pop     esi
.text:0040612C                 pop     edi
.text:0040612D                 pop     ebp
.text:0040612E                 retn
.text:0040612E ; ---------------------------------------------------------------------------
.text:0040612F                 align 10h
.text:00406130
.text:00406130 loc_406130:                             ; CODE XREF: sub_405FD0+147↑j
.text:00406130                                         ; sub_405FD0+A8A↓j ...
.text:00406130                 mov     eax, 0FFFFFFFFh
.text:00406135                 jmp     short loc_406127
.text:00406137 ; ---------------------------------------------------------------------------
.text:00406137
.text:00406137 loc_406137:                             ; CODE XREF: sub_405FD0+140↑j
.text:00406137                 movzx   edx, byte ptr [eax+1]
.text:0040613B                 test    dl, dl
.text:0040613D                 jz      short loc_406112
.text:0040613F                 mov     ebx, [esp+5Ch+arg_C]
.text:00406143                 xor     ecx, ecx
.text:00406145                 test    ebx, ebx
.text:00406147                 jz      short loc_406152
.text:00406149                 cmp     dl, 2Dh ; '-'
.text:0040614C                 jz      loc_406A4A
.text:00406152
.text:00406152 loc_406152:                             ; CODE XREF: sub_405FD0+177↑j
.text:00406152                                         ; sub_405FD0+A7F↓j
.text:00406152                 lea     esi, [ecx+eax+1]
.text:00406156                 mov     [ebp+14h], esi
.text:00406159                 lea     esi, [esi+0]
.text:00406160
.text:00406160 loc_406160:                             ; CODE XREF: sub_405FD0+AD↑j
.text:00406160                 mov     ecx, [esp+5Ch+arg_C]
.text:00406164                 test    ecx, ecx
.text:00406166                 jz      loc_4064F0
.text:0040616C                 mov     edx, [ebp+0]
.text:0040616F                 mov     edi, [esp+5Ch+arg_4]
.text:00406173                 mov     eax, [edi+edx*4]
.text:00406176                 movzx   edx, byte ptr [eax+1]
.text:0040617A                 cmp     dl, 2Dh ; '-'
.text:0040617D                 jz      short loc_406195
.text:0040617F                 mov     ebx, [esp+5Ch+arg_14]
.text:00406183                 test    ebx, ebx
.text:00406185                 jz      loc_4064F0
.text:0040618B                 cmp     byte ptr [eax+2], 0
.text:0040618F                 jz      loc_406A2A
.text:00406195
.text:00406195 loc_406195:                             ; CODE XREF: sub_405FD0+1AD↑j
.text:00406195                                         ; sub_405FD0+A75↓j
.text:00406195                 mov     [esp+5Ch+var_18], 0
.text:0040619D                 mov     ecx, [ebp+14h]
.text:004061A0                 mov     [esp+5Ch+var_1C], 0
.text:004061A8                 mov     [esp+5Ch+var_20], 0
.text:004061B0                 mov     edi, ecx
.text:004061B2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004061BA                 movzx   eax, byte ptr [ecx]
.text:004061BD                 test    al, al
.text:004061BF                 jz      short loc_4061DC
.text:004061C1                 cmp     al, 3Dh ; '='
.text:004061C3                 jz      short loc_4061DC
.text:004061C5                 lea     esi, [esi+0]
.text:004061C9                 lea     edi, [edi+0]
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: sub_405FD0+20A↓j
.text:004061D0                 inc     edi
.text:004061D1                 movzx   eax, byte ptr [edi]
.text:004061D4                 test    al, al
.text:004061D6                 jz      short loc_4061DC
.text:004061D8                 cmp     al, 3Dh ; '='
.text:004061DA                 jnz     short loc_4061D0
.text:004061DC
.text:004061DC loc_4061DC:                             ; CODE XREF: sub_405FD0+1EF↑j
.text:004061DC                                         ; sub_405FD0+1F3↑j ...
.text:004061DC                 mov     [esp+5Ch+var_28], 0
.text:004061E4                 mov     esi, [esp+5Ch+arg_C]
.text:004061E8                 mov     ebx, [esi]
.text:004061EA                 test    ebx, ebx
.text:004061EC                 mov     edx, ebx
.text:004061EE                 jz      loc_406410
.text:004061F4                 lea     esi, [esi+0]
.text:004061FA                 lea     edi, [edi+0]
.text:00406200
.text:00406200 loc_406200:                             ; CODE XREF: sub_405FD0+25E↓j
.text:00406200                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00406204                 mov     ebx, edi
.text:00406206                 sub     ebx, ecx
.text:00406208                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040620C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040620F                 call    strncmp
.text:00406214                 test    eax, eax
.text:00406216                 jz      loc_4069A6
.text:0040621C
.text:0040621C loc_40621C:                             ; CODE XREF: sub_405FD0+A0F↓j
.text:0040621C                                         ; sub_405FD0+A24↓j ...
.text:0040621C                 inc     [esp+5Ch+var_28]
.text:00406220                 add     esi, 10h
.text:00406223                 mov     ecx, [esi]
.text:00406225                 test    ecx, ecx
.text:00406227                 mov     edx, ecx
.text:00406229                 jz      short loc_406230
.text:0040622B                 mov     ecx, [ebp+14h]
.text:0040622E                 jmp     short loc_406200
.text:00406230 ; ---------------------------------------------------------------------------
.text:00406230
.text:00406230 loc_406230:                             ; CODE XREF: sub_405FD0+259↑j
.text:00406230                                         ; sub_405FD0+A55↓j
.text:00406230                 mov     esi, [esp+5Ch+var_20]
.text:00406234                 test    esi, esi
.text:00406236                 jz      short loc_406244
.text:00406238                 mov     edx, [esp+5Ch+var_1C]
.text:0040623C                 test    edx, edx
.text:0040623E                 jz      loc_406950
.text:00406244
.text:00406244 loc_406244:                             ; CODE XREF: sub_405FD0+266↑j
.text:00406244                 mov     eax, [esp+5Ch+var_18]
.text:00406248                 test    eax, eax
.text:0040624A                 jz      loc_406410
.text:00406250                 mov     ecx, [ebp+0]
.text:00406253                 lea     eax, [ecx+1]
.text:00406256                 mov     [ebp+0], eax
.text:00406259                 cmp     byte ptr [edi], 0
.text:0040625C                 jz      loc_406370
.text:00406262                 mov     ecx, [esp+5Ch+var_18]
.text:00406266                 mov     esi, [ecx+4]
.text:00406269                 test    esi, esi
.text:0040626B                 jz      short loc_4062B6
.text:0040626D                 lea     ebx, [edi+1]
.text:00406270                 mov     [ebp+0Ch], ebx
.text:00406273
.text:00406273 loc_406273:                             ; CODE XREF: sub_405FD0+3A8↓j
.text:00406273                                         ; sub_405FD0+3C4↓j
.text:00406273                 mov     ebx, [ebp+14h]
.text:00406276                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00406279                 call    strlen
.text:0040627E                 add     [ebp+14h], eax
.text:00406281                 mov     esi, [esp+5Ch+arg_10]
.text:00406285                 test    esi, esi
.text:00406287                 jz      short loc_406293
.text:00406289                 mov     ebp, [esp+5Ch+var_24]
.text:0040628D                 mov     ecx, [esp+5Ch+arg_10]
.text:00406291                 mov     [ecx], ebp
.text:00406293
.text:00406293 loc_406293:                             ; CODE XREF: sub_405FD0+2B7↑j
.text:00406293                 mov     eax, [esp+5Ch+var_18]
.text:00406297                 mov     ecx, [eax+8]
.text:0040629A                 test    ecx, ecx
.text:0040629C                 jnz     short loc_4062AA
.text:0040629E                 mov     ecx, [esp+5Ch+var_18]
.text:004062A2
.text:004062A2 loc_4062A2:                             ; CODE XREF: sub_405FD0+723↓j
.text:004062A2                 mov     eax, [ecx+0Ch]
.text:004062A5                 jmp     loc_406127
.text:004062AA ; ---------------------------------------------------------------------------
.text:004062AA
.text:004062AA loc_4062AA:                             ; CODE XREF: sub_405FD0+2CC↑j
.text:004062AA                                         ; sub_405FD0+719↓j
.text:004062AA                 mov     esi, [eax+0Ch]
.text:004062AD                 xor     eax, eax
.text:004062AF                 mov     [ecx], esi
.text:004062B1                 jmp     loc_406127
.text:004062B6 ; ---------------------------------------------------------------------------
.text:004062B6
.text:004062B6 loc_4062B6:                             ; CODE XREF: sub_405FD0+29B↑j
.text:004062B6                 mov     edi, [esp+5Ch+var_14]
.text:004062BA                 test    edi, edi
.text:004062BC                 jz      short loc_406310
.text:004062BE                 mov     esi, [esp+5Ch+arg_4]
.text:004062C2                 mov     edx, [esi+eax*4-4]
.text:004062C6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004062CA                 jz      short loc_406332
.text:004062CC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004062D3                 call    ds:libintl_gettext
.text:004062D9                 mov     edx, [esp+5Ch+var_18]
.text:004062DD                 mov     edi, [edx]
.text:004062DF                 mov     [esp+5Ch+var_4C], edi
.text:004062E3                 mov     ebx, [ebp+0]
.text:004062E6                 mov     edi, [esp+5Ch+arg_4]
.text:004062EA                 mov     ecx, [edi+ebx*4-4]
.text:004062EE                 movsx   esi, byte ptr [ecx]
.text:004062F1                 mov     ecx, ds:_iob
.text:004062F7                 add     ecx, 40h ; '@'
.text:004062FA                 mov     [esp+5Ch+var_50], esi
.text:004062FE                 mov     ebx, [edi]
.text:00406300                 mov     [esp+5Ch+Str2], eax ; Format
.text:00406304                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00406307                 mov     [esp+5Ch+MaxCount], ebx
.text:0040630B                 call    fprintf
.text:00406310
.text:00406310 loc_406310:                             ; CODE XREF: sub_405FD0+2EC↑j
.text:00406310                                         ; sub_405FD0+398↓j
.text:00406310                 mov     ecx, [ebp+14h]
.text:00406313                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00406316                 call    strlen
.text:0040631B                 add     [ebp+14h], eax
.text:0040631E                 mov     eax, [esp+5Ch+var_18]
.text:00406322                 mov     esi, [eax+0Ch]
.text:00406325                 mov     [ebp+8], esi
.text:00406328
.text:00406328 loc_406328:                             ; CODE XREF: sub_405FD0+4E5↓j
.text:00406328                                         ; sub_405FD0+73E↓j ...
.text:00406328                 mov     eax, 3Fh ; '?'
.text:0040632D                 jmp     loc_406127
.text:00406332 ; ---------------------------------------------------------------------------
.text:00406332
.text:00406332 loc_406332:                             ; CODE XREF: sub_405FD0+2FA↑j
.text:00406332                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00406339                 call    ds:libintl_gettext
.text:0040633F                 mov     edx, [esp+5Ch+var_18]
.text:00406343                 mov     edi, [esp+5Ch+arg_4]
.text:00406347                 mov     ecx, ds:_iob
.text:0040634D                 mov     esi, [edx]
.text:0040634F                 add     ecx, 40h ; '@'
.text:00406352                 mov     [esp+5Ch+var_50], esi
.text:00406356                 mov     ebx, [edi]
.text:00406358                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040635C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040635F                 mov     [esp+5Ch+MaxCount], ebx
.text:00406363                 call    fprintf
.text:00406368                 jmp     short loc_406310
.text:00406368 ; ---------------------------------------------------------------------------
.text:0040636A                 align 10h
.text:00406370
.text:00406370 loc_406370:                             ; CODE XREF: sub_405FD0+28C↑j
.text:00406370                 mov     ebx, [esp+5Ch+var_18]
.text:00406374                 cmp     dword ptr [ebx+4], 1
.text:00406378                 jnz     loc_406273
.text:0040637E                 cmp     eax, [esp+5Ch+arg_0]
.text:00406382                 jge     short loc_406399
.text:00406384                 mov     ebx, [esp+5Ch+arg_4]
.text:00406388                 lea     edi, [ecx+2]
.text:0040638B                 mov     [ebp+0], edi
.text:0040638E                 mov     esi, [ebx+eax*4]
.text:00406391                 mov     [ebp+0Ch], esi
.text:00406394                 jmp     loc_406273
.text:00406399 ; ---------------------------------------------------------------------------
.text:00406399
.text:00406399 loc_406399:                             ; CODE XREF: sub_405FD0+3B2↑j
.text:00406399                 mov     edx, [esp+5Ch+var_14]
.text:0040639D                 test    edx, edx
.text:0040639F                 jnz     short loc_4063D0
.text:004063A1
.text:004063A1 loc_4063A1:                             ; CODE XREF: sub_405FD0+437↓j
.text:004063A1                 mov     edx, [ebp+14h]
.text:004063A4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004063A7                 call    strlen
.text:004063AC                 add     [ebp+14h], eax
.text:004063AF                 mov     eax, [esp+5Ch+var_18]
.text:004063B3                 mov     edi, [eax+0Ch]
.text:004063B6                 mov     [ebp+8], edi
.text:004063B9
.text:004063B9 loc_4063B9:                             ; CODE XREF: sub_405FD0+7C2↓j
.text:004063B9                 mov     ebp, [esp+5Ch+Str]
.text:004063BD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004063C1                 setnz   bl
.text:004063C4                 movzx   esi, bl
.text:004063C7                 lea     eax, [esi+esi*4+3Ah]
.text:004063CB                 jmp     loc_406127
.text:004063D0 ; ---------------------------------------------------------------------------
.text:004063D0
.text:004063D0 loc_4063D0:                             ; CODE XREF: sub_405FD0+3CF↑j
.text:004063D0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004063D7                 call    ds:libintl_gettext
.text:004063DD                 mov     ecx, [ebp+0]
.text:004063E0                 mov     esi, [esp+5Ch+arg_4]
.text:004063E4                 mov     ebx, [esi+ecx*4-4]
.text:004063E8                 mov     ecx, ds:_iob
.text:004063EE                 mov     [esp+5Ch+var_50], ebx
.text:004063F2                 mov     edi, [esi]
.text:004063F4                 add     ecx, 40h ; '@'
.text:004063F7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004063FB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004063FE                 mov     [esp+5Ch+MaxCount], edi
.text:00406402                 call    fprintf
.text:00406407                 jmp     short loc_4063A1
.text:00406407 ; ---------------------------------------------------------------------------
.text:00406409                 align 10h
.text:00406410
.text:00406410 loc_406410:                             ; CODE XREF: sub_405FD0+21E↑j
.text:00406410                                         ; sub_405FD0+27A↑j
.text:00406410                 mov     eax, [esp+5Ch+arg_14]
.text:00406414                 test    eax, eax
.text:00406416                 jz      short loc_406446
.text:00406418                 mov     ebx, [ebp+0]
.text:0040641B                 mov     esi, [esp+5Ch+arg_4]
.text:0040641F                 mov     edi, [esi+ebx*4]
.text:00406422                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00406426                 jz      short loc_406449
.text:00406428                 mov     ecx, [ebp+14h]
.text:0040642B                 mov     edx, [esp+5Ch+Str]
.text:0040642F                 movsx   ebx, byte ptr [ecx]
.text:00406432                 mov     [esp+5Ch+Str1], edx ; Str
.text:00406435                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00406439                 call    strchr
.text:0040643E                 test    eax, eax
.text:00406440                 jnz     loc_4064F0
.text:00406446
.text:00406446 loc_406446:                             ; CODE XREF: sub_405FD0+446↑j
.text:00406446                 mov     ebx, [ebp+0]
.text:00406449
.text:00406449 loc_406449:                             ; CODE XREF: sub_405FD0+456↑j
.text:00406449                 mov     eax, [esp+5Ch+var_14]
.text:0040644D                 test    eax, eax
.text:0040644F                 jz      short loc_4064A1
.text:00406451                 mov     esi, [esp+5Ch+arg_4]
.text:00406455                 mov     edi, [esi+ebx*4]
.text:00406458                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040645C                 jz      short loc_4064BA
.text:0040645E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00406465                 call    ds:libintl_gettext
.text:0040646B                 mov     edi, [ebp+14h]
.text:0040646E                 mov     [esp+5Ch+var_4C], edi
.text:00406472                 mov     ebx, [ebp+0]
.text:00406475                 mov     edi, [esp+5Ch+arg_4]
.text:00406479                 mov     esi, [edi+ebx*4]
.text:0040647C                 movsx   ecx, byte ptr [esi]
.text:0040647F                 mov     esi, ds:_iob
.text:00406485                 add     esi, 40h ; '@'
.text:00406488                 mov     [esp+5Ch+var_50], ecx
.text:0040648C                 mov     ebx, [edi]
.text:0040648E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00406492                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00406495                 mov     [esp+5Ch+MaxCount], ebx
.text:00406499                 call    fprintf
.text:0040649E
.text:0040649E loc_40649E:                             ; CODE XREF: sub_405FD0+51D↓j
.text:0040649E                 mov     ebx, [ebp+0]
.text:004064A1
.text:004064A1 loc_4064A1:                             ; CODE XREF: sub_405FD0+47F↑j
.text:004064A1                 mov     dword ptr [ebp+14h], offset dword_405E80
.text:004064A8                 lea     edx, [ebx+1]
.text:004064AB                 mov     [ebp+0], edx
.text:004064AE
.text:004064AE loc_4064AE:                             ; CODE XREF: sub_405FD0+999↓j
.text:004064AE                 mov     dword ptr [ebp+8], 0
.text:004064B5                 jmp     loc_406328
.text:004064BA ; ---------------------------------------------------------------------------
.text:004064BA
.text:004064BA loc_4064BA:                             ; CODE XREF: sub_405FD0+48C↑j
.text:004064BA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004064C1                 call    ds:libintl_gettext
.text:004064C7                 mov     ecx, [ebp+14h]
.text:004064CA                 mov     edi, [esp+5Ch+arg_4]
.text:004064CE                 mov     edx, ds:_iob
.text:004064D4                 mov     [esp+5Ch+var_50], ecx
.text:004064D8                 mov     ebx, [edi]
.text:004064DA                 add     edx, 40h ; '@'
.text:004064DD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004064E1                 mov     [esp+5Ch+MaxCount], ebx
.text:004064E5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004064E8                 call    fprintf
.text:004064ED                 jmp     short loc_40649E
.text:004064ED ; ---------------------------------------------------------------------------
.text:004064EF                 align 10h
.text:004064F0
.text:004064F0 loc_4064F0:                             ; CODE XREF: sub_405FD0+196↑j
.text:004064F0                                         ; sub_405FD0+1B5↑j ...
.text:004064F0                 mov     esi, [ebp+14h]
.text:004064F3                 movzx   ebx, byte ptr [esi]
.text:004064F6                 inc     esi
.text:004064F7                 mov     [ebp+14h], esi
.text:004064FA                 mov     ecx, [esp+5Ch+Str]
.text:004064FE                 movsx   esi, bl
.text:00406501                 mov     [esp+5Ch+Str2], esi ; Val
.text:00406505                 mov     edi, esi
.text:00406507                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040650A                 call    strchr
.text:0040650F                 mov     ecx, [ebp+14h]
.text:00406512                 cmp     byte ptr [ecx], 0
.text:00406515                 jnz     short loc_40651A
.text:00406517                 inc     dword ptr [ebp+0]
.text:0040651A
.text:0040651A loc_40651A:                             ; CODE XREF: sub_405FD0+545↑j
.text:0040651A                 test    eax, eax
.text:0040651C                 jz      loc_406900
.text:00406522                 cmp     bl, 3Ah ; ':'
.text:00406525                 jz      loc_406900
.text:0040652B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040652E                 jz      loc_4065E6
.text:00406534                 movzx   edx, byte ptr [eax+1]
.text:00406538
.text:00406538 loc_406538:                             ; CODE XREF: sub_405FD0+61D↓j
.text:00406538                 cmp     dl, 3Ah ; ':'
.text:0040653B                 jz      short loc_406544
.text:0040653D
.text:0040653D loc_40653D:                             ; CODE XREF: sub_405FD0+590↓j
.text:0040653D                 mov     eax, esi
.text:0040653F                 jmp     loc_406127
.text:00406544 ; ---------------------------------------------------------------------------
.text:00406544
.text:00406544 loc_406544:                             ; CODE XREF: sub_405FD0+56B↑j
.text:00406544                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00406548                 jz      loc_4065D1
.text:0040654E                 cmp     byte ptr [ecx], 0
.text:00406551                 jz      short loc_406562
.text:00406553
.text:00406553 loc_406553:                             ; CODE XREF: sub_405FD0+604↓j
.text:00406553                 inc     dword ptr [ebp+0]
.text:00406556                 mov     [ebp+0Ch], ecx
.text:00406559
.text:00406559 loc_406559:                             ; CODE XREF: sub_405FD0+5AB↓j
.text:00406559                                         ; sub_405FD0+5C6↓j ...
.text:00406559                 mov     dword ptr [ebp+14h], 0
.text:00406560                 jmp     short loc_40653D
.text:00406562 ; ---------------------------------------------------------------------------
.text:00406562
.text:00406562 loc_406562:                             ; CODE XREF: sub_405FD0+581↑j
.text:00406562                 mov     ecx, [ebp+0]
.text:00406565                 cmp     ecx, [esp+5Ch+arg_0]
.text:00406569                 jz      short loc_40657D
.text:0040656B                 mov     eax, [esp+5Ch+arg_4]
.text:0040656F                 lea     edx, [ecx+1]
.text:00406572                 mov     [ebp+0], edx
.text:00406575                 mov     ebx, [eax+ecx*4]
.text:00406578                 mov     [ebp+0Ch], ebx
.text:0040657B                 jmp     short loc_406559
.text:0040657D ; ---------------------------------------------------------------------------
.text:0040657D
.text:0040657D loc_40657D:                             ; CODE XREF: sub_405FD0+599↑j
.text:0040657D                 mov     ecx, [esp+5Ch+var_14]
.text:00406581                 test    ecx, ecx
.text:00406583                 jnz     short loc_40659F
.text:00406585
.text:00406585 loc_406585:                             ; CODE XREF: sub_405FD0+5FF↓j
.text:00406585                 mov     [ebp+8], edi
.text:00406588                 mov     edi, [esp+5Ch+Str]
.text:0040658C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040658F                 jz      short loc_406598
.text:00406591                 mov     esi, 3Fh ; '?'
.text:00406596                 jmp     short loc_406559
.text:00406598 ; ---------------------------------------------------------------------------
.text:00406598
.text:00406598 loc_406598:                             ; CODE XREF: sub_405FD0+5BF↑j
.text:00406598                 mov     esi, 3Ah ; ':'
.text:0040659D                 jmp     short loc_406559
.text:0040659F ; ---------------------------------------------------------------------------
.text:0040659F
.text:0040659F loc_40659F:                             ; CODE XREF: sub_405FD0+5B3↑j
.text:0040659F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004065A6                 call    ds:libintl_gettext
.text:004065AC                 mov     [esp+5Ch+var_50], edi
.text:004065B0                 mov     ebx, [esp+5Ch+arg_4]
.text:004065B4                 mov     edx, ds:_iob
.text:004065BA                 mov     esi, [ebx]
.text:004065BC                 add     edx, 40h ; '@'
.text:004065BF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004065C3                 mov     [esp+5Ch+MaxCount], esi
.text:004065C7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004065CA                 call    fprintf
.text:004065CF                 jmp     short loc_406585
.text:004065D1 ; ---------------------------------------------------------------------------
.text:004065D1
.text:004065D1 loc_4065D1:                             ; CODE XREF: sub_405FD0+578↑j
.text:004065D1                 cmp     byte ptr [ecx], 0
.text:004065D4                 jnz     loc_406553
.text:004065DA                 mov     dword ptr [ebp+0Ch], 0
.text:004065E1                 jmp     loc_406559
.text:004065E6 ; ---------------------------------------------------------------------------
.text:004065E6
.text:004065E6 loc_4065E6:                             ; CODE XREF: sub_405FD0+55E↑j
.text:004065E6                 movzx   edx, byte ptr [eax+1]
.text:004065EA                 cmp     dl, 3Bh ; ';'
.text:004065ED                 jnz     loc_406538
.text:004065F3                 mov     [esp+5Ch+var_2C], 0
.text:004065FB                 mov     [esp+5Ch+var_30], 0
.text:00406603                 mov     [esp+5Ch+var_34], 0
.text:0040660B                 mov     [esp+5Ch+var_38], 0
.text:00406613                 cmp     byte ptr [ecx], 0
.text:00406616                 jz      loc_40688B
.text:0040661C                 inc     dword ptr [ebp+0]
.text:0040661F                 mov     [ebp+0Ch], ecx
.text:00406622
.text:00406622 loc_406622:                             ; CODE XREF: sub_405FD0+8D4↓j
.text:00406622                 mov     edi, [ebp+0Ch]
.text:00406625                 mov     [ebp+14h], edi
.text:00406628                 movzx   eax, byte ptr [edi]
.text:0040662B                 test    al, al
.text:0040662D                 jz      short loc_40663F
.text:0040662F                 cmp     al, 3Dh ; '='
.text:00406631                 jz      short loc_40663F
.text:00406633
.text:00406633 loc_406633:                             ; CODE XREF: sub_405FD0+66D↓j
.text:00406633                 inc     edi
.text:00406634                 movzx   eax, byte ptr [edi]
.text:00406637                 test    al, al
.text:00406639                 jz      short loc_40663F
.text:0040663B                 cmp     al, 3Dh ; '='
.text:0040663D                 jnz     short loc_406633
.text:0040663F
.text:0040663F loc_40663F:                             ; CODE XREF: sub_405FD0+65D↑j
.text:0040663F                                         ; sub_405FD0+661↑j ...
.text:0040663F                 mov     [esp+5Ch+var_3C], 0
.text:00406647                 mov     esi, [esp+5Ch+arg_C]
.text:0040664B                 mov     eax, [esi]
.text:0040664D                 test    eax, eax
.text:0040664F                 jz      loc_4067D0
.text:00406655                 mov     ecx, eax
.text:00406657
.text:00406657 loc_406657:                             ; CODE XREF: sub_405FD0+6B3↓j
.text:00406657                 mov     ebx, [ebp+14h]
.text:0040665A                 mov     eax, edi
.text:0040665C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040665F                 sub     eax, ebx
.text:00406661                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00406665                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00406669                 call    strncmp
.text:0040666E                 test    eax, eax
.text:00406670                 jz      loc_406837
.text:00406676
.text:00406676 loc_406676:                             ; CODE XREF: sub_405FD0+88C↓j
.text:00406676                                         ; sub_405FD0+89D↓j
.text:00406676                 inc     [esp+5Ch+var_3C]
.text:0040667A                 add     esi, 10h
.text:0040667D                 mov     edx, [esi]
.text:0040667F                 test    edx, edx
.text:00406681                 mov     ecx, edx
.text:00406683                 jnz     short loc_406657
.text:00406685
.text:00406685 loc_406685:                             ; CODE XREF: sub_405FD0+8B6↓j
.text:00406685                 mov     esi, [esp+5Ch+var_34]
.text:00406689                 test    esi, esi
.text:0040668B                 jz      short loc_406699
.text:0040668D                 mov     ebx, [esp+5Ch+var_30]
.text:00406691                 test    ebx, ebx
.text:00406693                 jz      loc_4067E1
.text:00406699
.text:00406699 loc_406699:                             ; CODE XREF: sub_405FD0+6BB↑j
.text:00406699                 mov     esi, [esp+5Ch+var_2C]
.text:0040669D                 test    esi, esi
.text:0040669F                 jz      loc_4067D0
.text:004066A5                 cmp     byte ptr [edi], 0
.text:004066A8                 jz      loc_406750
.text:004066AE                 mov     ecx, [esp+5Ch+var_2C]
.text:004066B2                 mov     ebx, [ecx+4]
.text:004066B5                 test    ebx, ebx
.text:004066B7                 jz      short loc_4066F8
.text:004066B9                 lea     edx, [edi+1]
.text:004066BC                 mov     [ebp+0Ch], edx
.text:004066BF
.text:004066BF loc_4066BF:                             ; CODE XREF: sub_405FD0+788↓j
.text:004066BF                                         ; sub_405FD0+7A7↓j
.text:004066BF                 mov     edi, [ebp+14h]
.text:004066C2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004066C5                 call    strlen
.text:004066CA                 add     [ebp+14h], eax
.text:004066CD                 mov     eax, [esp+5Ch+arg_10]
.text:004066D1                 test    eax, eax
.text:004066D3                 jz      short loc_4066E0
.text:004066D5                 mov     edx, [esp+5Ch+var_38]
.text:004066D9                 mov     ebp, [esp+5Ch+arg_10]
.text:004066DD                 mov     [ebp+0], edx
.text:004066E0
.text:004066E0 loc_4066E0:                             ; CODE XREF: sub_405FD0+703↑j
.text:004066E0                 mov     eax, [esp+5Ch+var_2C]
.text:004066E4                 mov     ecx, [eax+8]
.text:004066E7                 test    ecx, ecx
.text:004066E9                 jnz     loc_4062AA
.text:004066EF                 mov     ecx, [esp+5Ch+var_2C]
.text:004066F3                 jmp     loc_4062A2
.text:004066F8 ; ---------------------------------------------------------------------------
.text:004066F8
.text:004066F8 loc_4066F8:                             ; CODE XREF: sub_405FD0+6E7↑j
.text:004066F8                 mov     eax, [esp+5Ch+var_14]
.text:004066FC                 test    eax, eax
.text:004066FE                 jnz     short loc_406713
.text:00406700
.text:00406700 loc_406700:                             ; CODE XREF: sub_405FD0+779↓j
.text:00406700                 mov     ecx, [ebp+14h]
.text:00406703                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00406706                 call    strlen
.text:0040670B                 add     [ebp+14h], eax
.text:0040670E                 jmp     loc_406328
.text:00406713 ; ---------------------------------------------------------------------------
.text:00406713
.text:00406713 loc_406713:                             ; CODE XREF: sub_405FD0+72E↑j
.text:00406713                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040671A                 call    ds:libintl_gettext
.text:00406720                 mov     edx, [esp+5Ch+var_2C]
.text:00406724                 mov     ebx, [esp+5Ch+arg_4]
.text:00406728                 mov     edi, [edx]
.text:0040672A                 mov     [esp+5Ch+var_50], edi
.text:0040672E                 mov     edi, ds:_iob
.text:00406734                 mov     esi, [ebx]
.text:00406736                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040673A                 add     edi, 40h ; '@'
.text:0040673D                 mov     [esp+5Ch+MaxCount], esi
.text:00406741                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00406744                 call    fprintf
.text:00406749                 jmp     short loc_406700
.text:00406749 ; ---------------------------------------------------------------------------
.text:0040674B                 align 10h
.text:00406750
.text:00406750 loc_406750:                             ; CODE XREF: sub_405FD0+6D8↑j
.text:00406750                 mov     esi, [esp+5Ch+var_2C]
.text:00406754                 cmp     dword ptr [esi+4], 1
.text:00406758                 jnz     loc_4066BF
.text:0040675E                 mov     ecx, [ebp+0]
.text:00406761                 cmp     ecx, [esp+5Ch+arg_0]
.text:00406765                 jge     short loc_40677C
.text:00406767                 mov     eax, [esp+5Ch+arg_4]
.text:0040676B                 lea     ebx, [ecx+1]
.text:0040676E                 mov     [ebp+0], ebx
.text:00406771                 mov     edi, [eax+ecx*4]
.text:00406774                 mov     [ebp+0Ch], edi
.text:00406777                 jmp     loc_4066BF
.text:0040677C ; ---------------------------------------------------------------------------
.text:0040677C
.text:0040677C loc_40677C:                             ; CODE XREF: sub_405FD0+795↑j
.text:0040677C                 mov     edx, [esp+5Ch+var_14]
.text:00406780                 test    edx, edx
.text:00406782                 jnz     short loc_406797
.text:00406784
.text:00406784 loc_406784:                             ; CODE XREF: sub_405FD0+7FE↓j
.text:00406784                 mov     edx, [ebp+14h]
.text:00406787                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040678A                 call    strlen
.text:0040678F                 add     [ebp+14h], eax
.text:00406792                 jmp     loc_4063B9
.text:00406797 ; ---------------------------------------------------------------------------
.text:00406797
.text:00406797 loc_406797:                             ; CODE XREF: sub_405FD0+7B2↑j
.text:00406797                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040679E                 call    ds:libintl_gettext
.text:004067A4                 mov     ecx, [ebp+0]
.text:004067A7                 mov     ebx, [esp+5Ch+arg_4]
.text:004067AB                 mov     edi, [ebx+ecx*4-4]
.text:004067AF                 mov     ecx, ds:_iob
.text:004067B5                 mov     [esp+5Ch+var_50], edi
.text:004067B9                 mov     esi, [ebx]
.text:004067BB                 add     ecx, 40h ; '@'
.text:004067BE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004067C2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004067C5                 mov     [esp+5Ch+MaxCount], esi
.text:004067C9                 call    fprintf
.text:004067CE                 jmp     short loc_406784
.text:004067D0 ; ---------------------------------------------------------------------------
.text:004067D0
.text:004067D0 loc_4067D0:                             ; CODE XREF: sub_405FD0+67F↑j
.text:004067D0                                         ; sub_405FD0+6CF↑j
.text:004067D0                 mov     dword ptr [ebp+14h], 0
.text:004067D7                 mov     eax, 57h ; 'W'
.text:004067DC                 jmp     loc_406127
.text:004067E1 ; ---------------------------------------------------------------------------
.text:004067E1
.text:004067E1 loc_4067E1:                             ; CODE XREF: sub_405FD0+6C3↑j
.text:004067E1                 mov     edi, [esp+5Ch+var_14]
.text:004067E5                 test    edi, edi
.text:004067E7                 jnz     short loc_4067FF
.text:004067E9
.text:004067E9 loc_4067E9:                             ; CODE XREF: sub_405FD0+865↓j
.text:004067E9                 mov     edx, [ebp+14h]
.text:004067EC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004067EF                 call    strlen
.text:004067F4                 add     [ebp+14h], eax
.text:004067F7                 inc     dword ptr [ebp+0]
.text:004067FA                 jmp     loc_406328
.text:004067FF ; ---------------------------------------------------------------------------
.text:004067FF
.text:004067FF loc_4067FF:                             ; CODE XREF: sub_405FD0+817↑j
.text:004067FF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00406806                 call    ds:libintl_gettext
.text:0040680C                 mov     ecx, [ebp+0]
.text:0040680F                 mov     ebx, [esp+5Ch+arg_4]
.text:00406813                 mov     edi, [ebx+ecx*4]
.text:00406816                 mov     ecx, ds:_iob
.text:0040681C                 mov     [esp+5Ch+var_50], edi
.text:00406820                 mov     esi, [ebx]
.text:00406822                 add     ecx, 40h ; '@'
.text:00406825                 mov     [esp+5Ch+Str2], eax ; Format
.text:00406829                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040682C                 mov     [esp+5Ch+MaxCount], esi
.text:00406830                 call    fprintf
.text:00406835                 jmp     short loc_4067E9
.text:00406837 ; ---------------------------------------------------------------------------
.text:00406837
.text:00406837 loc_406837:                             ; CODE XREF: sub_405FD0+6A0↑j
.text:00406837                 mov     edx, [ebp+14h]
.text:0040683A                 mov     ebx, edi
.text:0040683C                 mov     ecx, [esi]
.text:0040683E                 sub     ebx, edx
.text:00406840                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00406843                 call    strlen
.text:00406848                 cmp     ebx, eax
.text:0040684A                 jz      short loc_406872
.text:0040684C                 mov     ebx, [esp+5Ch+var_2C]
.text:00406850                 test    ebx, ebx
.text:00406852                 jz      short loc_406861
.text:00406854                 mov     [esp+5Ch+var_34], 1
.text:0040685C                 jmp     loc_406676
.text:00406861 ; ---------------------------------------------------------------------------
.text:00406861
.text:00406861 loc_406861:                             ; CODE XREF: sub_405FD0+882↑j
.text:00406861                 mov     [esp+5Ch+var_2C], esi
.text:00406865                 mov     ecx, [esp+5Ch+var_3C]
.text:00406869                 mov     [esp+5Ch+var_38], ecx
.text:0040686D                 jmp     loc_406676
.text:00406872 ; ---------------------------------------------------------------------------
.text:00406872
.text:00406872 loc_406872:                             ; CODE XREF: sub_405FD0+87A↑j
.text:00406872                 mov     [esp+5Ch+var_2C], esi
.text:00406876                 mov     eax, [esp+5Ch+var_3C]
.text:0040687A                 mov     [esp+5Ch+var_30], 1
.text:00406882                 mov     [esp+5Ch+var_38], eax
.text:00406886                 jmp     loc_406685
.text:0040688B ; ---------------------------------------------------------------------------
.text:0040688B
.text:0040688B loc_40688B:                             ; CODE XREF: sub_405FD0+646↑j
.text:0040688B                 mov     edx, [ebp+0]
.text:0040688E                 cmp     edx, [esp+5Ch+arg_0]
.text:00406892                 jz      short loc_4068A9
.text:00406894                 mov     ebx, [esp+5Ch+arg_4]
.text:00406898                 lea     esi, [edx+1]
.text:0040689B                 mov     [ebp+0], esi
.text:0040689E                 mov     edi, [ebx+edx*4]
.text:004068A1                 mov     [ebp+0Ch], edi
.text:004068A4                 jmp     loc_406622
.text:004068A9 ; ---------------------------------------------------------------------------
.text:004068A9
.text:004068A9 loc_4068A9:                             ; CODE XREF: sub_405FD0+8C2↑j
.text:004068A9                 mov     edi, [esp+5Ch+var_14]
.text:004068AD                 test    edi, edi
.text:004068AF                 jnz     short loc_4068CC
.text:004068B1
.text:004068B1 loc_4068B1:                             ; CODE XREF: sub_405FD0+92C↓j
.text:004068B1                 mov     [ebp+8], esi
.text:004068B4                 mov     ebp, [esp+5Ch+Str]
.text:004068B8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004068BC                 jz      short loc_4068C8
.text:004068BE                 mov     bl, 3Fh ; '?'
.text:004068C0
.text:004068C0 loc_4068C0:                             ; CODE XREF: sub_405FD0+8FA↓j
.text:004068C0                 movsx   eax, bl
.text:004068C3                 jmp     loc_406127
.text:004068C8 ; ---------------------------------------------------------------------------
.text:004068C8
.text:004068C8 loc_4068C8:                             ; CODE XREF: sub_405FD0+8EC↑j
.text:004068C8                 mov     bl, 3Ah ; ':'
.text:004068CA                 jmp     short loc_4068C0
.text:004068CC ; ---------------------------------------------------------------------------
.text:004068CC
.text:004068CC loc_4068CC:                             ; CODE XREF: sub_405FD0+8DF↑j
.text:004068CC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004068D3                 call    ds:libintl_gettext
.text:004068D9                 mov     [esp+5Ch+var_50], esi
.text:004068DD                 mov     edx, [esp+5Ch+arg_4]
.text:004068E1                 mov     ecx, ds:_iob
.text:004068E7                 mov     ebx, [edx]
.text:004068E9                 add     ecx, 40h ; '@'
.text:004068EC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004068F0                 mov     [esp+5Ch+MaxCount], ebx
.text:004068F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004068F7                 call    fprintf
.text:004068FC                 jmp     short loc_4068B1
.text:004068FC ; ---------------------------------------------------------------------------
.text:004068FE                 align 10h
.text:00406900
.text:00406900 loc_406900:                             ; CODE XREF: sub_405FD0+54C↑j
.text:00406900                                         ; sub_405FD0+555↑j
.text:00406900                 mov     eax, [esp+5Ch+var_14]
.text:00406904                 test    eax, eax
.text:00406906                 jz      short loc_40693F
.text:00406908                 mov     ebx, [ebp+1Ch]
.text:0040690B                 test    ebx, ebx
.text:0040690D                 jz      short loc_406947
.text:0040690F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00406916
.text:00406916 loc_406916:                             ; CODE XREF: sub_405FD0+97E↓j
.text:00406916                 call    ds:libintl_gettext
.text:0040691C                 mov     [esp+5Ch+var_50], esi
.text:00406920                 mov     ebx, [esp+5Ch+arg_4]
.text:00406924                 mov     edx, ds:_iob
.text:0040692A                 mov     esi, [ebx]
.text:0040692C                 add     edx, 40h ; '@'
.text:0040692F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00406933                 mov     [esp+5Ch+MaxCount], esi
.text:00406937                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040693A                 call    fprintf
.text:0040693F
.text:0040693F loc_40693F:                             ; CODE XREF: sub_405FD0+936↑j
.text:0040693F                 mov     [ebp+8], edi
.text:00406942                 jmp     loc_406328
.text:00406947 ; ---------------------------------------------------------------------------
.text:00406947
.text:00406947 loc_406947:                             ; CODE XREF: sub_405FD0+93D↑j
.text:00406947                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040694E                 jmp     short loc_406916
.text:00406950 ; ---------------------------------------------------------------------------
.text:00406950
.text:00406950 loc_406950:                             ; CODE XREF: sub_405FD0+26E↑j
.text:00406950                 mov     edi, [esp+5Ch+var_14]
.text:00406954                 test    edi, edi
.text:00406956                 jnz     short loc_40696E
.text:00406958
.text:00406958 loc_406958:                             ; CODE XREF: sub_405FD0+9D4↓j
.text:00406958                 mov     edx, [ebp+14h]
.text:0040695B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040695E                 call    strlen
.text:00406963                 add     [ebp+14h], eax
.text:00406966                 inc     dword ptr [ebp+0]
.text:00406969                 jmp     loc_4064AE
.text:0040696E ; ---------------------------------------------------------------------------
.text:0040696E
.text:0040696E loc_40696E:                             ; CODE XREF: sub_405FD0+986↑j
.text:0040696E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00406975                 call    ds:libintl_gettext
.text:0040697B                 mov     ebx, [ebp+0]
.text:0040697E                 mov     edi, [esp+5Ch+arg_4]
.text:00406982                 mov     ecx, [edi+ebx*4]
.text:00406985                 mov     ebx, ds:_iob
.text:0040698B                 mov     [esp+5Ch+var_50], ecx
.text:0040698F                 mov     esi, [edi]
.text:00406991                 add     ebx, 40h ; '@'
.text:00406994                 mov     [esp+5Ch+Str2], eax ; Format
.text:00406998                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040699B                 mov     [esp+5Ch+MaxCount], esi
.text:0040699F                 call    fprintf
.text:004069A4                 jmp     short loc_406958
.text:004069A6 ; ---------------------------------------------------------------------------
.text:004069A6
.text:004069A6 loc_4069A6:                             ; CODE XREF: sub_405FD0+246↑j
.text:004069A6                 mov     ecx, [ebp+14h]
.text:004069A9                 mov     ebx, edi
.text:004069AB                 mov     edx, [esi]
.text:004069AD                 sub     ebx, ecx
.text:004069AF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004069B2                 call    strlen
.text:004069B7                 cmp     ebx, eax
.text:004069B9                 jz      short loc_406A11
.text:004069BB                 mov     ebx, [esp+5Ch+var_18]
.text:004069BF                 test    ebx, ebx
.text:004069C1                 jz      short loc_406A00
.text:004069C3                 mov     edx, [esp+5Ch+arg_14]
.text:004069C7                 test    edx, edx
.text:004069C9                 jnz     short loc_4069D7
.text:004069CB                 mov     ecx, [esp+5Ch+var_18]
.text:004069CF                 mov     ebx, [esi+4]
.text:004069D2                 cmp     [ecx+4], ebx
.text:004069D5                 jz      short loc_4069E4
.text:004069D7
.text:004069D7 loc_4069D7:                             ; CODE XREF: sub_405FD0+9F9↑j
.text:004069D7                                         ; sub_405FD0+A1A↓j ...
.text:004069D7                 mov     [esp+5Ch+var_20], 1
.text:004069DF                 jmp     loc_40621C
.text:004069E4 ; ---------------------------------------------------------------------------
.text:004069E4
.text:004069E4 loc_4069E4:                             ; CODE XREF: sub_405FD0+A05↑j
.text:004069E4                 mov     edx, [esi+8]
.text:004069E7                 cmp     [ecx+8], edx
.text:004069EA                 jnz     short loc_4069D7
.text:004069EC                 mov     ebx, [esi+0Ch]
.text:004069EF                 cmp     [ecx+0Ch], ebx
.text:004069F2                 jnz     short loc_4069D7
.text:004069F4                 jmp     loc_40621C
.text:004069F4 ; ---------------------------------------------------------------------------
.text:004069F9                 align 10h
.text:00406A00
.text:00406A00 loc_406A00:                             ; CODE XREF: sub_405FD0+9F1↑j
.text:00406A00                 mov     [esp+5Ch+var_18], esi
.text:00406A04                 mov     eax, [esp+5Ch+var_28]
.text:00406A08                 mov     [esp+5Ch+var_24], eax
.text:00406A0C                 jmp     loc_40621C
.text:00406A11 ; ---------------------------------------------------------------------------
.text:00406A11
.text:00406A11 loc_406A11:                             ; CODE XREF: sub_405FD0+9E9↑j
.text:00406A11                 mov     [esp+5Ch+var_18], esi
.text:00406A15                 mov     ecx, [esp+5Ch+var_28]
.text:00406A19                 mov     [esp+5Ch+var_1C], 1
.text:00406A21                 mov     [esp+5Ch+var_24], ecx
.text:00406A25                 jmp     loc_406230
.text:00406A2A ; ---------------------------------------------------------------------------
.text:00406A2A
.text:00406A2A loc_406A2A:                             ; CODE XREF: sub_405FD0+1BF↑j
.text:00406A2A                 mov     eax, [esp+5Ch+Str]
.text:00406A2E                 movsx   esi, dl
.text:00406A31                 mov     [esp+5Ch+Str2], esi ; Val
.text:00406A35                 mov     [esp+5Ch+Str1], eax ; Str
.text:00406A38                 call    strchr
.text:00406A3D                 test    eax, eax
.text:00406A3F                 jnz     loc_4064F0
.text:00406A45                 jmp     loc_406195
.text:00406A4A ; ---------------------------------------------------------------------------
.text:00406A4A
.text:00406A4A loc_406A4A:                             ; CODE XREF: sub_405FD0+17C↑j
.text:00406A4A                 mov     ecx, 1
.text:00406A4F                 jmp     loc_406152
.text:00406A54 ; ---------------------------------------------------------------------------
.text:00406A54
.text:00406A54 loc_406A54:                             ; CODE XREF: sub_405FD0+D4↑j
.text:00406A54                                         ; sub_405FD0+130↑j
.text:00406A54                 mov     eax, [ebp+20h]
.text:00406A57                 cmp     eax, [ebp+24h]
.text:00406A5A                 jz      loc_406130
.text:00406A60                 mov     [ebp+0], eax
.text:00406A63                 jmp     loc_406130
.text:00406A68 ; ---------------------------------------------------------------------------
.text:00406A68
.text:00406A68 loc_406A68:                             ; CODE XREF: sub_405FD0+FE↑j
.text:00406A68                 mov     [ebp+20h], eax
.text:00406A6B                 jmp     loc_4060F0
.text:00406A70 ; ---------------------------------------------------------------------------
.text:00406A70
.text:00406A70 loc_406A70:                             ; CODE XREF: sub_405FD0+CA↑j
.text:00406A70                 mov     edx, [ebp+20h]
.text:00406A73                 mov     eax, [ebp+24h]
.text:00406A76                 cmp     edx, eax
.text:00406A78                 jz      short loc_406AF0
.text:00406A7A                 cmp     eax, ebx
.text:00406A7C                 jz      short loc_406A91
.text:00406A7E                 mov     [esp+5Ch+Str2], ebp
.text:00406A82                 mov     ebx, [esp+5Ch+arg_4]
.text:00406A86                 mov     [esp+5Ch+Str1], ebx
.text:00406A89                 call    sub_406C80
.text:00406A8E                 mov     ebx, [ebp+0]
.text:00406A91
.text:00406A91 loc_406A91:                             ; CODE XREF: sub_405FD0+AAC↑j
.text:00406A91                                         ; sub_405FD0+B22↓j ...
.text:00406A91                 cmp     ebx, [esp+5Ch+arg_0]
.text:00406A95                 jge     short loc_406AE0
.text:00406A97                 mov     esi, [esp+5Ch+arg_4]
.text:00406A9B                 mov     eax, [esi+ebx*4]
.text:00406A9E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00406AA1                 jz      short loc_406AE8
.text:00406AA3                 lea     esi, [esi+0]
.text:00406AA9                 lea     edi, [edi+0]
.text:00406AB0
.text:00406AB0 loc_406AB0:                             ; CODE XREF: sub_405FD0+AFC↓j
.text:00406AB0                                         ; sub_405FD0+B1C↓j
.text:00406AB0                 lea     eax, [ebx+1]
.text:00406AB3                 mov     ebx, eax
.text:00406AB5                 mov     [ebp+0], eax
.text:00406AB8                 cmp     eax, [esp+5Ch+arg_0]
.text:00406ABC                 jge     short loc_406AE0
.text:00406ABE                 mov     edi, [esp+5Ch+arg_4]
.text:00406AC2                 mov     edx, [edi+eax*4]
.text:00406AC5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00406AC8                 jz      short loc_406AD0
.text:00406ACA
.text:00406ACA loc_406ACA:                             ; CODE XREF: sub_405FD0+B04↓j
.text:00406ACA                 mov     ebx, eax
.text:00406ACC                 jmp     short loc_406AB0
.text:00406ACC ; ---------------------------------------------------------------------------
.text:00406ACE                 align 10h
.text:00406AD0
.text:00406AD0 loc_406AD0:                             ; CODE XREF: sub_405FD0+AF8↑j
.text:00406AD0                 cmp     byte ptr [edx+1], 0
.text:00406AD4                 jz      short loc_406ACA
.text:00406AD6                 lea     esi, [esi+0]
.text:00406AD9                 lea     edi, [edi+0]
.text:00406AE0
.text:00406AE0 loc_406AE0:                             ; CODE XREF: sub_405FD0+AC5↑j
.text:00406AE0                                         ; sub_405FD0+AEC↑j ...
.text:00406AE0                 mov     [ebp+24h], ebx
.text:00406AE3                 jmp     loc_4060A0
.text:00406AE8 ; ---------------------------------------------------------------------------
.text:00406AE8
.text:00406AE8 loc_406AE8:                             ; CODE XREF: sub_405FD0+AD1↑j
.text:00406AE8                 cmp     byte ptr [eax+1], 0
.text:00406AEC                 jz      short loc_406AB0
.text:00406AEE                 jmp     short loc_406AE0
.text:00406AF0 ; ---------------------------------------------------------------------------
.text:00406AF0
.text:00406AF0 loc_406AF0:                             ; CODE XREF: sub_405FD0+AA8↑j
.text:00406AF0                 cmp     edx, ebx
.text:00406AF2                 jz      short loc_406A91
.text:00406AF4                 mov     [ebp+20h], ebx
.text:00406AF7                 jmp     short loc_406A91
.text:00406AF9 ; ---------------------------------------------------------------------------
.text:00406AF9
.text:00406AF9 loc_406AF9:                             ; CODE XREF: sub_405FD0+88↑j
.text:00406AF9                 mov     dword ptr [ebp+18h], 0
.text:00406B00                 mov     esi, [esp+5Ch+Str]
.text:00406B04
.text:00406B04 loc_406B04:                             ; CODE XREF: sub_405FD0+B49↓j
.text:00406B04                 inc     esi
.text:00406B05                 jmp     loc_406068
.text:00406B05 ; ---------------------------------------------------------------------------
.text:00406B0A                 align 10h
.text:00406B10
.text:00406B10 loc_406B10:                             ; CODE XREF: sub_405FD0+80↑j
.text:00406B10                 mov     dword ptr [ebp+18h], 2
.text:00406B17                 mov     esi, ecx
.text:00406B19                 jmp     short loc_406B04
.text:00406B19 ; ---------------------------------------------------------------------------
.text:00406B1B                 align 10h
.text:00406B20
.text:00406B20 loc_406B20:                             ; CODE XREF: sub_405FD0+69↑j
.text:00406B20                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00406B27                 call    getenv
.text:00406B2C                 test    eax, eax
.text:00406B2E                 jz      loc_406044
.text:00406B34                 jmp     loc_40603F
.text:00406B34 ; ---------------------------------------------------------------------------
.text:00406B39                 align 10h
.text:00406B40
.text:00406B40 loc_406B40:                             ; CODE XREF: sub_405FD0+3F↑j
.text:00406B40                 mov     dword ptr [ebp+0], 1
.text:00406B47                 mov     ebx, 1
.text:00406B4C                 jmp     loc_406020
.text:00406B4C sub_405FD0      endp
.text:00406B4C
.text:00406B51 ; ---------------------------------------------------------------------------
.text:00406B51                 jmp     short sub_406B60
.text:00406B51 ; ---------------------------------------------------------------------------
.text:00406B53                 align 10h
.text:00406B60
.text:00406B60 ; =============== S U B R O U T I N E =======================================
.text:00406B60
.text:00406B60
.text:00406B60 ; int __cdecl sub_406B60(int, int, char *, int, int, int, int)
.text:00406B60 sub_406B60      proc near               ; CODE XREF: .text:00406B51↑j
.text:00406B60                                         ; sub_408340+3A↓p ...
.text:00406B60
.text:00406B60 var_2C          = dword ptr -2Ch
.text:00406B60 var_28          = dword ptr -28h
.text:00406B60 Str             = dword ptr -24h
.text:00406B60 var_20          = dword ptr -20h
.text:00406B60 var_1C          = dword ptr -1Ch
.text:00406B60 var_18          = dword ptr -18h
.text:00406B60 var_14          = dword ptr -14h
.text:00406B60 var_10          = dword ptr -10h
.text:00406B60 arg_0           = dword ptr  4
.text:00406B60 arg_4           = dword ptr  8
.text:00406B60 arg_8           = dword ptr  0Ch
.text:00406B60 arg_C           = dword ptr  10h
.text:00406B60 arg_10          = dword ptr  14h
.text:00406B60 arg_14          = dword ptr  18h
.text:00406B60 arg_18          = dword ptr  1Ch
.text:00406B60
.text:00406B60                 sub     esp, 2Ch
.text:00406B63                 mov     edx, dword_415030
.text:00406B69                 mov     [esp+2Ch+var_10], offset dword_416080 ; int
.text:00406B71                 mov     ecx, dword_415034
.text:00406B77                 mov     ds:dword_416080, edx
.text:00406B7D                 mov     edx, [esp+2Ch+arg_18]
.text:00406B81                 mov     ds:dword_416084, ecx
.text:00406B87                 mov     ecx, [esp+2Ch+arg_14]
.text:00406B8B                 mov     [esp+2Ch+var_14], edx ; int
.text:00406B8F                 mov     edx, [esp+2Ch+arg_10]
.text:00406B93                 mov     [esp+2Ch+var_18], ecx ; int
.text:00406B97                 mov     ecx, [esp+2Ch+arg_C]
.text:00406B9B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00406B9F                 mov     edx, [esp+2Ch+arg_8]
.text:00406BA3                 mov     [esp+2Ch+var_20], ecx ; int
.text:00406BA7                 mov     ecx, [esp+2Ch+arg_4]
.text:00406BAB                 mov     [esp+2Ch+Str], edx ; Str
.text:00406BAF                 mov     edx, [esp+2Ch+arg_0]
.text:00406BB3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00406BB7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00406BBA                 call    sub_405FD0
.text:00406BBF                 mov     ecx, ds:dword_416080
.text:00406BC5                 mov     dword_415030, ecx
.text:00406BCB                 mov     ecx, ds:dword_41608C
.text:00406BD1                 mov     ds:dword_416570, ecx
.text:00406BD7                 mov     ecx, ds:dword_416088
.text:00406BDD                 mov     dword_415038, ecx
.text:00406BE3                 add     esp, 2Ch
.text:00406BE6                 retn
.text:00406BE6 sub_406B60      endp
.text:00406BE6
.text:00406BE6 ; ---------------------------------------------------------------------------
.text:00406BE7                 align 10h
.text:00406BF0                 sub     esp, 2Ch
.text:00406BF3                 mov     edx, dword_415030
.text:00406BF9                 mov     dword ptr [esp+1Ch], offset dword_416080
.text:00406C01                 mov     ecx, dword_415034
.text:00406C07                 mov     dword ptr [esp+18h], 1
.text:00406C0F                 mov     ds:dword_416080, edx
.text:00406C15                 mov     edx, [esp+38h]
.text:00406C19                 mov     ds:dword_416084, ecx
.text:00406C1F                 mov     ecx, [esp+34h]
.text:00406C23                 mov     [esp+8], edx
.text:00406C27                 mov     edx, [esp+30h]
.text:00406C2B                 mov     [esp+4], ecx
.text:00406C2F                 mov     dword ptr [esp+14h], 0
.text:00406C37                 mov     dword ptr [esp+10h], 0
.text:00406C3F                 mov     dword ptr [esp+0Ch], 0
.text:00406C47                 mov     [esp], edx
.text:00406C4A                 call    sub_405FD0
.text:00406C4F                 mov     ecx, ds:dword_416080
.text:00406C55                 mov     dword_415030, ecx
.text:00406C5B                 mov     ecx, ds:dword_41608C
.text:00406C61                 mov     ds:dword_416570, ecx
.text:00406C67                 mov     ecx, ds:dword_416088
.text:00406C6D                 mov     dword_415038, ecx
.text:00406C73                 add     esp, 2Ch
.text:00406C76                 retn
.text:00406C76 ; ---------------------------------------------------------------------------
.text:00406C77                 align 10h
.text:00406C80
.text:00406C80 ; =============== S U B R O U T I N E =======================================
.text:00406C80
.text:00406C80
.text:00406C80 sub_406C80      proc near               ; CODE XREF: sub_405FD0+113↑p
.text:00406C80                                         ; sub_405FD0+AB9↑p
.text:00406C80
.text:00406C80 var_2C          = dword ptr -2Ch
.text:00406C80 var_28          = dword ptr -28h
.text:00406C80 var_24          = dword ptr -24h
.text:00406C80 var_20          = dword ptr -20h
.text:00406C80 var_1C          = dword ptr -1Ch
.text:00406C80 var_18          = dword ptr -18h
.text:00406C80 var_14          = dword ptr -14h
.text:00406C80 arg_0           = dword ptr  4
.text:00406C80 arg_4           = dword ptr  8
.text:00406C80
.text:00406C80                 push    ebp
.text:00406C81                 push    edi
.text:00406C82                 push    esi
.text:00406C83                 push    ebx
.text:00406C84                 sub     esp, 1Ch
.text:00406C87                 mov     ecx, [esp+2Ch+arg_4]
.text:00406C8B                 mov     eax, [esp+2Ch+arg_4]
.text:00406C8F                 mov     ebx, [esp+2Ch+arg_4]
.text:00406C93                 mov     edx, [ecx+20h]
.text:00406C96                 mov     edi, [esp+2Ch+arg_0]
.text:00406C9A                 mov     ecx, [ebx]
.text:00406C9C                 mov     [esp+2Ch+var_2C], edx
.text:00406C9F                 mov     [esp+2Ch+var_14], edx
.text:00406CA3                 mov     edx, [eax+24h]
.text:00406CA6                 mov     [esp+2Ch+var_28], ecx
.text:00406CAA                 mov     [esp+2Ch+var_1C], ecx
.text:00406CAE                 cmp     ecx, edx
.text:00406CB0                 mov     [esp+2Ch+var_18], edx
.text:00406CB4                 jle     short loc_406D30
.text:00406CB6                 mov     esi, [esp+2Ch+var_2C]
.text:00406CB9                 cmp     edx, esi
.text:00406CBB                 jle     short loc_406D30
.text:00406CBD                 lea     esi, [esi+0]
.text:00406CC0
.text:00406CC0 loc_406CC0:                             ; CODE XREF: sub_406C80+A1↓j
.text:00406CC0                 mov     ebx, [esp+2Ch+var_1C]
.text:00406CC4                 mov     edx, [esp+2Ch+var_18]
.text:00406CC8                 mov     ebp, [esp+2Ch+var_18]
.text:00406CCC                 mov     eax, [esp+2Ch+var_14]
.text:00406CD0                 sub     ebx, edx
.text:00406CD2                 mov     [esp+2Ch+var_20], ebx
.text:00406CD6                 sub     ebp, eax
.text:00406CD8                 cmp     ebx, ebp
.text:00406CDA                 jle     short loc_406D55
.text:00406CDC                 xor     esi, esi
.text:00406CDE                 cmp     esi, ebp
.text:00406CE0                 jge     short loc_406D0D
.text:00406CE2                 mov     ecx, [esp+2Ch+var_1C]
.text:00406CE6                 sub     ecx, ebp
.text:00406CE8                 mov     [esp+2Ch+var_24], ecx
.text:00406CEC                 lea     esi, [esi+0]
.text:00406CF0
.text:00406CF0 loc_406CF0:                             ; CODE XREF: sub_406C80+8B↓j
.text:00406CF0                 mov     ecx, [esp+2Ch+var_14]
.text:00406CF4                 mov     edx, [esp+2Ch+var_24]
.text:00406CF8                 add     ecx, esi
.text:00406CFA                 add     edx, esi
.text:00406CFC                 mov     ebx, [edi+ecx*4]
.text:00406CFF                 mov     eax, [edi+edx*4]
.text:00406D02                 inc     esi
.text:00406D03                 cmp     esi, ebp
.text:00406D05                 mov     [edi+ecx*4], eax
.text:00406D08                 mov     [edi+edx*4], ebx
.text:00406D0B                 jl      short loc_406CF0
.text:00406D0D
.text:00406D0D loc_406D0D:                             ; CODE XREF: sub_406C80+60↑j
.text:00406D0D                 sub     [esp+2Ch+var_1C], ebp
.text:00406D11
.text:00406D11 loc_406D11:                             ; CODE XREF: sub_406C80+107↓j
.text:00406D11                 mov     eax, [esp+2Ch+var_18]
.text:00406D15                 cmp     [esp+2Ch+var_1C], eax
.text:00406D19                 jle     short loc_406D30
.text:00406D1B                 mov     ebp, [esp+2Ch+var_14]
.text:00406D1F                 cmp     eax, ebp
.text:00406D21                 jg      short loc_406CC0
.text:00406D23                 lea     esi, [esi+0]
.text:00406D29                 lea     edi, [edi+0]
.text:00406D30
.text:00406D30 loc_406D30:                             ; CODE XREF: sub_406C80+34↑j
.text:00406D30                                         ; sub_406C80+3B↑j ...
.text:00406D30                 mov     esi, [esp+2Ch+var_28]
.text:00406D34                 mov     ecx, [esp+2Ch+var_18]
.text:00406D38                 mov     eax, [esp+2Ch+var_2C]
.text:00406D3B                 mov     edi, [esp+2Ch+arg_4]
.text:00406D3F                 mov     edx, [esp+2Ch+var_28]
.text:00406D43                 sub     esi, ecx
.text:00406D45                 add     esi, eax
.text:00406D47                 mov     [edi+20h], esi
.text:00406D4A                 mov     [edi+24h], edx
.text:00406D4D                 add     esp, 1Ch
.text:00406D50                 pop     ebx
.text:00406D51                 pop     esi
.text:00406D52                 pop     edi
.text:00406D53                 pop     ebp
.text:00406D54                 retn
.text:00406D55 ; ---------------------------------------------------------------------------
.text:00406D55
.text:00406D55 loc_406D55:                             ; CODE XREF: sub_406C80+5A↑j
.text:00406D55                 xor     esi, esi
.text:00406D57                 cmp     esi, [esp+2Ch+var_20]
.text:00406D5B                 jge     short loc_406D7F
.text:00406D5D                 lea     esi, [esi+0]
.text:00406D60
.text:00406D60 loc_406D60:                             ; CODE XREF: sub_406C80+FD↓j
.text:00406D60                 mov     ebx, [esp+2Ch+var_14]
.text:00406D64                 mov     ebp, [esp+2Ch+var_18]
.text:00406D68                 add     ebx, esi
.text:00406D6A                 add     ebp, esi
.text:00406D6C                 mov     edx, [edi+ebx*4]
.text:00406D6F                 inc     esi
.text:00406D70                 cmp     esi, [esp+2Ch+var_20]
.text:00406D74                 mov     ecx, [edi+ebp*4]
.text:00406D77                 mov     [edi+ebx*4], ecx
.text:00406D7A                 mov     [edi+ebp*4], edx
.text:00406D7D                 jl      short loc_406D60
.text:00406D7F
.text:00406D7F loc_406D7F:                             ; CODE XREF: sub_406C80+DB↑j
.text:00406D7F                 mov     esi, [esp+2Ch+var_20]
.text:00406D83                 add     [esp+2Ch+var_14], esi
.text:00406D87                 jmp     short loc_406D11
.text:00406D87 sub_406C80      endp
.text:00406D87
.text:00406D87 ; ---------------------------------------------------------------------------
.text:00406D89                 align 20h
.text:00406DA0
.text:00406DA0 ; =============== S U B R O U T I N E =======================================
.text:00406DA0
.text:00406DA0
.text:00406DA0 ; int __cdecl sub_406DA0(char *, int, int, int)
.text:00406DA0 sub_406DA0      proc near               ; CODE XREF: sub_4070C0+32↓p
.text:00406DA0
.text:00406DA0 Str             = dword ptr -2Ch
.text:00406DA0 Str2            = dword ptr -28h
.text:00406DA0 MaxCount        = dword ptr -24h
.text:00406DA0 var_20          = dword ptr -20h
.text:00406DA0 var_19          = byte ptr -19h
.text:00406DA0 var_18          = dword ptr -18h
.text:00406DA0 var_14          = dword ptr -14h
.text:00406DA0 arg_0           = dword ptr  4
.text:00406DA0 arg_4           = dword ptr  8
.text:00406DA0 arg_8           = dword ptr  0Ch
.text:00406DA0 arg_C           = dword ptr  10h
.text:00406DA0
.text:00406DA0                 push    ebp
.text:00406DA1                 push    edi
.text:00406DA2                 push    esi
.text:00406DA3                 push    ebx
.text:00406DA4                 sub     esp, 1Ch
.text:00406DA7                 xor     ebx, ebx
.text:00406DA9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00406DB1                 mov     edx, [esp+2Ch+arg_0]
.text:00406DB5                 mov     ebp, [esp+2Ch+arg_C]
.text:00406DB9                 mov     [esp+2Ch+var_19], 0
.text:00406DBE                 mov     [esp+2Ch+Str], edx ; Str
.text:00406DC1                 call    strlen
.text:00406DC6                 mov     [esp+2Ch+var_14], eax
.text:00406DCA                 mov     ecx, [esp+2Ch+arg_4]
.text:00406DCE                 mov     eax, [ecx]
.text:00406DD0                 test    eax, eax
.text:00406DD2                 jz      short loc_406E18
.text:00406DD4                 mov     [esp+2Ch+var_20], 0
.text:00406DDC                 lea     esi, [esi+0]
.text:00406DE0
.text:00406DE0 loc_406DE0:                             ; CODE XREF: sub_406DA0+6A↓j
.text:00406DE0                 mov     [esp+2Ch+Str], eax ; Str1
.text:00406DE3                 mov     esi, [esp+2Ch+var_14]
.text:00406DE7                 mov     ecx, [esp+2Ch+arg_0]
.text:00406DEB                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:00406DEF                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:00406DF3                 call    strncmp
.text:00406DF8                 test    eax, eax
.text:00406DFA                 jz      short loc_406E26
.text:00406DFC
.text:00406DFC loc_406DFC:                             ; CODE XREF: sub_406DA0+CA↓j
.text:00406DFC                                         ; sub_406DA0+D1↓j ...
.text:00406DFC                 add     [esp+2Ch+var_20], ebp
.text:00406E00                 inc     ebx
.text:00406E01                 mov     esi, [esp+2Ch+arg_4]
.text:00406E05                 mov     eax, [esi+ebx*4]
.text:00406E08                 test    eax, eax
.text:00406E0A                 jnz     short loc_406DE0
.text:00406E0C                 cmp     [esp+2Ch+var_19], 0
.text:00406E11                 mov     edx, 0FFFFFFFEh
.text:00406E16                 jnz     short loc_406E1C
.text:00406E18
.text:00406E18 loc_406E18:                             ; CODE XREF: sub_406DA0+32↑j
.text:00406E18                 mov     edx, [esp+2Ch+var_18]
.text:00406E1C
.text:00406E1C loc_406E1C:                             ; CODE XREF: sub_406DA0+76↑j
.text:00406E1C                                         ; sub_406DA0+9B↓j
.text:00406E1C                 add     esp, 1Ch
.text:00406E1F                 mov     eax, edx
.text:00406E21                 pop     ebx
.text:00406E22                 pop     esi
.text:00406E23                 pop     edi
.text:00406E24                 pop     ebp
.text:00406E25                 retn
.text:00406E26 ; ---------------------------------------------------------------------------
.text:00406E26
.text:00406E26 loc_406E26:                             ; CODE XREF: sub_406DA0+5A↑j
.text:00406E26                 mov     eax, [esp+2Ch+arg_4]
.text:00406E2A                 mov     edi, [eax+ebx*4]
.text:00406E2D                 mov     [esp+2Ch+Str], edi ; Str
.text:00406E30                 call    strlen
.text:00406E35                 cmp     eax, [esp+2Ch+var_14]
.text:00406E39                 mov     edx, ebx
.text:00406E3B                 jz      short loc_406E1C
.text:00406E3D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00406E42                 jz      short loc_406E73
.text:00406E44                 mov     ecx, [esp+2Ch+arg_8]
.text:00406E48                 test    ecx, ecx
.text:00406E4A                 jz      short loc_406E6C
.text:00406E4C                 cld
.text:00406E4D                 mov     edi, [esp+2Ch+var_18]
.text:00406E51                 mov     ecx, ebp
.text:00406E53                 mov     esi, [esp+2Ch+arg_8]
.text:00406E57                 mov     edx, [esp+2Ch+var_20]
.text:00406E5B                 imul    edi, ebp
.text:00406E5E                 add     esi, edi
.text:00406E60                 mov     edi, [esp+2Ch+arg_8]
.text:00406E64                 add     edi, edx
.text:00406E66                 cmp     ebp, ebp
.text:00406E68                 repe cmpsb
.text:00406E6A                 jz      short loc_406DFC
.text:00406E6C
.text:00406E6C loc_406E6C:                             ; CODE XREF: sub_406DA0+AA↑j
.text:00406E6C                 mov     [esp+2Ch+var_19], 1
.text:00406E71                 jmp     short loc_406DFC
.text:00406E73 ; ---------------------------------------------------------------------------
.text:00406E73
.text:00406E73 loc_406E73:                             ; CODE XREF: sub_406DA0+A2↑j
.text:00406E73                 mov     [esp+2Ch+var_18], ebx
.text:00406E77                 jmp     short loc_406DFC
.text:00406E77 sub_406DA0      endp
.text:00406E77
.text:00406E77 ; ---------------------------------------------------------------------------
.text:00406E79 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:00406E79                                         ; DATA XREF: .text:00406ED2↓o
.text:00406E79                                         ; sub_4070C0+5A↓o
.text:00406E96 aInvalidArgumen db 'invalid argument %s for %s',0
.text:00406E96                                         ; DATA XREF: .text:loc_406F40↓o
.text:00406E96                                         ; sub_4070C0:loc_4072B6↓o
.text:00406EB1 ; ---------------------------------------------------------------------------
.text:00406EB1                 jmp     short loc_406EC0
.text:00406EB1 ; ---------------------------------------------------------------------------
.text:00406EB3                 align 10h
.text:00406EC0
.text:00406EC0 loc_406EC0:                             ; CODE XREF: .text:00406EB1↑j
.text:00406EC0                 sub     esp, 1Ch
.text:00406EC3                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:00406EC8                 mov     [esp+14h], ebx
.text:00406ECC                 mov     [esp+18h], esi
.text:00406ED0                 jz      short loc_406F40
.text:00406ED2                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00406ED9
.text:00406ED9 loc_406ED9:                             ; CODE XREF: .text:00406F47↓j
.text:00406ED9                 call    ds:libintl_gettext
.text:00406EDF                 mov     dword ptr [esp], 1
.text:00406EE6                 mov     edx, [esp+20h]
.text:00406EEA                 mov     esi, eax
.text:00406EEC                 mov     [esp+4], edx
.text:00406EF0                 call    sub_4095B0
.text:00406EF5                 mov     dword ptr [esp+4], 5
.text:00406EFD                 mov     edx, [esp+24h]
.text:00406F01                 mov     ebx, eax
.text:00406F03                 mov     dword ptr [esp], 0
.text:00406F0A                 mov     [esp+8], edx
.text:00406F0E                 call    sub_40A440
.text:00406F13                 mov     [esp+0Ch], eax
.text:00406F17                 mov     [esp+10h], ebx
.text:00406F1B                 mov     [esp+8], esi
.text:00406F1F                 mov     dword ptr [esp+4], 0
.text:00406F27                 mov     dword ptr [esp], 0
.text:00406F2E                 call    sub_40AB80
.text:00406F33                 mov     ebx, [esp+14h]
.text:00406F37                 mov     esi, [esp+18h]
.text:00406F3B                 add     esp, 1Ch
.text:00406F3E                 retn
.text:00406F3E ; ---------------------------------------------------------------------------
.text:00406F3F                 align 10h
.text:00406F40
.text:00406F40 loc_406F40:                             ; CODE XREF: .text:00406ED0↑j
.text:00406F40                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00406F47                 jmp     short loc_406ED9
.text:00406F47 ; ---------------------------------------------------------------------------
.text:00406F49 aValidArguments db 'Valid arguments are:',0
.text:00406F49                                         ; DATA XREF: .text:00406F93↓o
.text:00406F49                                         ; sub_4070C0+CB↓o
.text:00406F5E ; const char aS_0[]
.text:00406F5E aS_0            db 0Ah                  ; DATA XREF: .text:0040700D↓o
.text:00406F5E                                         ; sub_4070C0:loc_4071F8↓o
.text:00406F5E                 db '  - `%s',27h,0
.text:00406F68 ; const char aS_1[]
.text:00406F68 aS_1            db ', `%s',27h,0        ; DATA XREF: .text:0040709A↓o
.text:00406F68                                         ; sub_4070C0:loc_407290↓o
.text:00406F6F                 align 10h
.text:00406F70                 push    ebp
.text:00406F71                 push    edi
.text:00406F72                 push    esi
.text:00406F73                 push    ebx
.text:00406F74                 sub     esp, 2Ch
.text:00406F77                 mov     ecx, [esp+40h]
.text:00406F7B                 mov     dword ptr [esp+1Ch], 0
.text:00406F83                 mov     eax, [esp+44h]
.text:00406F87                 mov     ebp, [esp+48h]
.text:00406F8B                 mov     [esp+28h], ecx
.text:00406F8F                 mov     [esp+24h], eax
.text:00406F93                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:00406F9A                 call    ds:libintl_gettext
.text:00406FA0                 mov     edx, ds:_iob
.text:00406FA6                 add     edx, 40h ; '@'
.text:00406FA9                 mov     [esp], edx
.text:00406FAC                 mov     [esp+4], eax
.text:00406FB0                 call    fprintf
.text:00406FB5                 mov     dword ptr [esp+20h], 0
.text:00406FBD                 mov     edx, [esp+28h]
.text:00406FC1                 mov     eax, [edx]
.text:00406FC3                 test    eax, eax
.text:00406FC5                 jz      short loc_407045
.text:00406FC7                 mov     dword ptr [esp+14h], 0
.text:00406FCF                 mov     esi, [esp+24h]
.text:00406FD3                 mov     ebx, eax
.text:00406FD5                 mov     [esp+18h], esi
.text:00406FD9                 lea     esi, [esi+0]
.text:00406FE0
.text:00406FE0 loc_406FE0:                             ; CODE XREF: .text:00407043↓j
.text:00406FE0                 mov     edi, [esp+20h]
.text:00406FE4                 test    edi, edi
.text:00406FE6                 jz      short loc_407003
.text:00406FE8                 cld
.text:00406FE9                 mov     edi, [esp+24h]
.text:00406FED                 mov     ecx, ebp
.text:00406FEF                 mov     edx, [esp+14h]
.text:00406FF3                 mov     esi, [esp+1Ch]
.text:00406FF7                 add     edi, edx
.text:00406FF9                 cmp     ebp, ebp
.text:00406FFB                 repe cmpsb
.text:00406FFD                 jz      loc_407090
.text:00407003
.text:00407003 loc_407003:                             ; CODE XREF: .text:00406FE6↑j
.text:00407003                 mov     [esp+8], ebx
.text:00407007                 mov     ecx, ds:_iob
.text:0040700D                 mov     dword ptr [esp+4], offset aS_0 ; "\n  - `%s'"
.text:00407015                 add     ecx, 40h ; '@'
.text:00407018                 mov     [esp], ecx
.text:0040701B                 call    fprintf
.text:00407020                 mov     ebx, [esp+18h]
.text:00407024                 mov     [esp+1Ch], ebx
.text:00407028
.text:00407028 loc_407028:                             ; CODE XREF: .text:004070AD↓j
.text:00407028                 inc     dword ptr [esp+20h]
.text:0040702C                 mov     eax, [esp+28h]
.text:00407030                 add     [esp+14h], ebp
.text:00407034                 mov     edx, [esp+20h]
.text:00407038                 add     [esp+18h], ebp
.text:0040703C                 mov     edi, [eax+edx*4]
.text:0040703F                 test    edi, edi
.text:00407041                 mov     ebx, edi
.text:00407043                 jnz     short loc_406FE0
.text:00407045
.text:00407045 loc_407045:                             ; CODE XREF: .text:00406FC5↑j
.text:00407045                 mov     ebx, ds:_iob
.text:0040704B                 mov     ebp, [ebx+44h]
.text:0040704E                 dec     ebp
.text:0040704F                 mov     [ebx+44h], ebp
.text:00407052                 test    ebp, ebp
.text:00407054                 js      short loc_40706D
.text:00407056                 mov     ecx, ds:_iob
.text:0040705C                 mov     esi, [ecx+40h]
.text:0040705F                 mov     byte ptr [esi], 0Ah
.text:00407062                 inc     dword ptr [ecx+40h]
.text:00407065                 add     esp, 2Ch
.text:00407068                 pop     ebx
.text:00407069                 pop     esi
.text:0040706A                 pop     edi
.text:0040706B                 pop     ebp
.text:0040706C                 retn
.text:0040706D ; ---------------------------------------------------------------------------
.text:0040706D
.text:0040706D loc_40706D:                             ; CODE XREF: .text:00407054↑j
.text:0040706D                 mov     dword ptr [esp+40h], 0Ah
.text:00407075                 mov     edi, ds:_iob
.text:0040707B                 add     edi, 40h ; '@'
.text:0040707E                 mov     [esp+44h], edi
.text:00407082                 add     esp, 2Ch
.text:00407085                 pop     ebx
.text:00407086                 pop     esi
.text:00407087                 pop     edi
.text:00407088                 pop     ebp
.text:00407089                 jmp     _flsbuf
.text:00407089 ; ---------------------------------------------------------------------------
.text:0040708E                 align 10h
.text:00407090
.text:00407090 loc_407090:                             ; CODE XREF: .text:00406FFD↑j
.text:00407090                 mov     [esp+8], ebx
.text:00407094                 mov     esi, ds:_iob
.text:0040709A                 mov     dword ptr [esp+4], offset aS_1 ; ", `%s'"
.text:004070A2                 add     esi, 40h ; '@'
.text:004070A5                 mov     [esp], esi
.text:004070A8                 call    fprintf
.text:004070AD                 jmp     loc_407028
.text:004070AD ; ---------------------------------------------------------------------------
.text:004070B2                 align 10h
.text:004070C0
.text:004070C0 ; =============== S U B R O U T I N E =======================================
.text:004070C0
.text:004070C0
.text:004070C0 ; int __cdecl sub_4070C0(char *, char *, int, int, int, int)
.text:004070C0 sub_4070C0      proc near               ; CODE XREF: sub_403760+356↑p
.text:004070C0
.text:004070C0 Stream          = dword ptr -4Ch
.text:004070C0 Format          = dword ptr -48h
.text:004070C0 var_44          = dword ptr -44h
.text:004070C0 var_40          = byte ptr -40h
.text:004070C0 var_3C          = dword ptr -3Ch
.text:004070C0 var_2C          = dword ptr -2Ch
.text:004070C0 var_28          = dword ptr -28h
.text:004070C0 var_24          = dword ptr -24h
.text:004070C0 var_20          = dword ptr -20h
.text:004070C0 var_1C          = dword ptr -1Ch
.text:004070C0 var_18          = dword ptr -18h
.text:004070C0 var_14          = dword ptr -14h
.text:004070C0 var_10          = dword ptr -10h
.text:004070C0 var_C           = dword ptr -0Ch
.text:004070C0 var_8           = dword ptr -8
.text:004070C0 var_4           = dword ptr -4
.text:004070C0 arg_0           = dword ptr  4
.text:004070C0 arg_4           = dword ptr  8
.text:004070C0 arg_8           = dword ptr  0Ch
.text:004070C0 arg_C           = dword ptr  10h
.text:004070C0 arg_10          = dword ptr  14h
.text:004070C0 arg_14          = dword ptr  18h
.text:004070C0
.text:004070C0                 sub     esp, 4Ch
.text:004070C3                 mov     edx, [esp+4Ch+arg_10]
.text:004070C7                 mov     [esp+4Ch+var_10], ebx
.text:004070CB                 mov     ebx, [esp+4Ch+arg_C]
.text:004070CF                 mov     [esp+4Ch+var_C], esi
.text:004070D3                 mov     esi, [esp+4Ch+arg_4]
.text:004070D7                 mov     [esp+4Ch+var_4], ebp
.text:004070DB                 mov     ebp, [esp+4Ch+arg_8]
.text:004070DF                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:004070E3                 mov     [esp+4Ch+var_8], edi
.text:004070E7                 mov     [esp+4Ch+var_44], ebx ; int
.text:004070EB                 mov     [esp+4Ch+Format], ebp ; int
.text:004070EF                 mov     [esp+4Ch+Stream], esi ; char *
.text:004070F2                 call    sub_406DA0
.text:004070F7                 test    eax, eax
.text:004070F9                 mov     edx, eax
.text:004070FB                 js      short loc_407113
.text:004070FD
.text:004070FD loc_4070FD:                             ; CODE XREF: sub_4070C0+1AA↓j
.text:004070FD                 mov     ebx, [esp+4Ch+var_10]
.text:00407101                 mov     eax, edx
.text:00407103                 mov     esi, [esp+4Ch+var_C]
.text:00407107                 mov     edi, [esp+4Ch+var_8]
.text:0040710B                 mov     ebp, [esp+4Ch+var_4]
.text:0040710F                 add     esp, 4Ch
.text:00407112                 retn
.text:00407113 ; ---------------------------------------------------------------------------
.text:00407113
.text:00407113 loc_407113:                             ; CODE XREF: sub_4070C0+3B↑j
.text:00407113                 inc     eax
.text:00407114                 jz      loc_4072B6
.text:0040711A                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00407121
.text:00407121 loc_407121:                             ; CODE XREF: sub_4070C0+1FD↓j
.text:00407121                 call    ds:libintl_gettext
.text:00407127                 mov     [esp+4Ch+Stream], 1 ; int
.text:0040712E                 mov     edi, [esp+4Ch+arg_0]
.text:00407132                 mov     [esp+4Ch+var_14], eax
.text:00407136                 mov     [esp+4Ch+Format], edi ; char *
.text:0040713A                 call    sub_4095B0
.text:0040713F                 mov     [esp+4Ch+var_18], eax
.text:00407143                 mov     [esp+4Ch+var_44], esi ; char *
.text:00407147                 mov     [esp+4Ch+Format], 5 ; int
.text:0040714F                 mov     [esp+4Ch+Stream], 0 ; int
.text:00407156                 call    sub_40A440
.text:0040715B                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:0040715F                 mov     ecx, [esp+4Ch+var_18]
.text:00407163                 mov     eax, [esp+4Ch+var_14]
.text:00407167                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:0040716F                 mov     [esp+4Ch+var_3C], ecx
.text:00407173                 mov     [esp+4Ch+var_44], eax ; char *
.text:00407177                 mov     [esp+4Ch+Stream], 0 ; Code
.text:0040717E                 call    sub_40AB80
.text:00407183                 mov     [esp+4Ch+var_20], 0
.text:0040718B                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:00407192                 call    ds:libintl_gettext
.text:00407198                 mov     edx, ds:_iob
.text:0040719E                 add     edx, 40h ; '@'
.text:004071A1                 mov     [esp+4Ch+Format], eax ; Format
.text:004071A5                 mov     [esp+4Ch+Stream], edx ; Stream
.text:004071A8                 call    fprintf
.text:004071AD                 mov     [esp+4Ch+var_1C], 0
.text:004071B5                 mov     eax, [ebp+0]
.text:004071B8                 test    eax, eax
.text:004071BA                 jz      loc_407241
.text:004071C0                 mov     [esp+4Ch+var_24], eax
.text:004071C4                 mov     [esp+4Ch+var_28], ebx
.text:004071C8                 mov     [esp+4Ch+var_2C], 0
.text:004071D0
.text:004071D0 loc_4071D0:                             ; CODE XREF: sub_4070C0+17F↓j
.text:004071D0                 mov     esi, [esp+4Ch+var_1C]
.text:004071D4                 test    esi, esi
.text:004071D6                 jz      short loc_4071F8
.text:004071D8                 cld
.text:004071D9                 mov     eax, [esp+4Ch+var_2C]
.text:004071DD                 mov     edx, [esp+4Ch+arg_10]
.text:004071E1                 mov     esi, [esp+4Ch+var_20]
.text:004071E5                 lea     ecx, [eax+ebx]
.text:004071E8                 mov     edi, ecx
.text:004071EA                 mov     ecx, [esp+4Ch+arg_10]
.text:004071EE                 cmp     edx, edx
.text:004071F0                 repe cmpsb
.text:004071F2                 jz      loc_407290
.text:004071F8
.text:004071F8 loc_4071F8:                             ; CODE XREF: sub_4070C0+116↑j
.text:004071F8                 mov     [esp+4Ch+Format], offset aS_0 ; "\n  - `%s'"
.text:00407200                 mov     esi, ds:_iob
.text:00407206                 mov     ecx, [esp+4Ch+var_24]
.text:0040720A                 add     esi, 40h ; '@'
.text:0040720D                 mov     [esp+4Ch+var_44], ecx
.text:00407211                 mov     [esp+4Ch+Stream], esi ; Stream
.text:00407214                 call    fprintf
.text:00407219                 mov     edi, [esp+4Ch+var_28]
.text:0040721D                 mov     [esp+4Ch+var_20], edi
.text:00407221
.text:00407221 loc_407221:                             ; CODE XREF: sub_4070C0+1F1↓j
.text:00407221                 inc     [esp+4Ch+var_1C]
.text:00407225                 mov     ecx, [esp+4Ch+arg_10]
.text:00407229                 add     [esp+4Ch+var_2C], ecx
.text:0040722D                 mov     esi, [esp+4Ch+var_1C]
.text:00407231                 add     [esp+4Ch+var_28], ecx
.text:00407235                 mov     edi, [ebp+esi*4+0]
.text:00407239                 test    edi, edi
.text:0040723B                 mov     [esp+4Ch+var_24], edi
.text:0040723F                 jnz     short loc_4071D0
.text:00407241
.text:00407241 loc_407241:                             ; CODE XREF: sub_4070C0+FA↑j
.text:00407241                 mov     ebp, ds:_iob
.text:00407247                 mov     ebx, [ebp+44h]
.text:0040724A                 dec     ebx
.text:0040724B                 mov     [ebp+44h], ebx
.text:0040724E                 test    ebx, ebx
.text:00407250                 js      short loc_40726F
.text:00407252                 mov     edi, ds:_iob
.text:00407258                 mov     eax, [edi+40h]
.text:0040725B                 mov     byte ptr [eax], 0Ah
.text:0040725E                 inc     dword ptr [edi+40h]
.text:00407261
.text:00407261 loc_407261:                             ; CODE XREF: sub_4070C0+1C8↓j
.text:00407261                 call    [esp+4Ch+arg_14]
.text:00407265                 mov     edx, 0FFFFFFFFh
.text:0040726A                 jmp     loc_4070FD
.text:0040726F ; ---------------------------------------------------------------------------
.text:0040726F
.text:0040726F loc_40726F:                             ; CODE XREF: sub_4070C0+190↑j
.text:0040726F                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:00407276                 mov     edx, ds:_iob
.text:0040727C                 add     edx, 40h ; '@'
.text:0040727F                 mov     [esp+4Ch+Format], edx ; File
.text:00407283                 call    _flsbuf
.text:00407288                 jmp     short loc_407261
.text:00407288 ; ---------------------------------------------------------------------------
.text:0040728A                 align 10h
.text:00407290
.text:00407290 loc_407290:                             ; CODE XREF: sub_4070C0+132↑j
.text:00407290                 mov     [esp+4Ch+Format], offset aS_1 ; ", `%s'"
.text:00407298                 mov     edx, ds:_iob
.text:0040729E                 mov     eax, [esp+4Ch+var_24]
.text:004072A2                 add     edx, 40h ; '@'
.text:004072A5                 mov     [esp+4Ch+var_44], eax
.text:004072A9                 mov     [esp+4Ch+Stream], edx ; Stream
.text:004072AC                 call    fprintf
.text:004072B1                 jmp     loc_407221
.text:004072B6 ; ---------------------------------------------------------------------------
.text:004072B6
.text:004072B6 loc_4072B6:                             ; CODE XREF: sub_4070C0+54↑j
.text:004072B6                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:004072BD                 jmp     loc_407121
.text:004072BD sub_4070C0      endp
.text:004072BD
.text:004072BD ; ---------------------------------------------------------------------------
.text:004072C2                 align 10h
.text:004072D0                 push    ebp
.text:004072D1                 push    edi
.text:004072D2                 push    esi
.text:004072D3                 push    ebx
.text:004072D4                 sub     esp, 4
.text:004072D7                 mov     ecx, [esp+1Ch]
.text:004072DB                 mov     dword ptr [esp], 0
.text:004072E2                 mov     ebx, [esp+24h]
.text:004072E6                 mov     edx, [ecx]
.text:004072E8                 test    edx, edx
.text:004072EA                 jz      short loc_407315
.text:004072EC                 cld
.text:004072ED                 xor     ebp, ebp
.text:004072EF                 nop
.text:004072F0
.text:004072F0 loc_4072F0:                             ; CODE XREF: .text:00407313↓j
.text:004072F0                 mov     edi, [esp+20h]
.text:004072F4                 mov     ecx, ebx
.text:004072F6                 mov     esi, [esp+18h]
.text:004072FA                 add     edi, ebp
.text:004072FC                 cmp     ebx, ebx
.text:004072FE                 repe cmpsb
.text:00407300                 jz      short loc_40731D
.text:00407302                 inc     dword ptr [esp]
.text:00407305                 add     ebp, ebx
.text:00407307                 mov     eax, [esp+1Ch]
.text:0040730B                 mov     ecx, [esp]
.text:0040730E                 mov     edi, [eax+ecx*4]
.text:00407311                 test    edi, edi
.text:00407313                 jnz     short loc_4072F0
.text:00407315
.text:00407315 loc_407315:                             ; CODE XREF: .text:004072EA↑j
.text:00407315                 xor     eax, eax
.text:00407317
.text:00407317 loc_407317:                             ; CODE XREF: .text:00407327↓j
.text:00407317                 pop     ebp
.text:00407318                 pop     ebx
.text:00407319                 pop     esi
.text:0040731A                 pop     edi
.text:0040731B                 pop     ebp
.text:0040731C                 retn
.text:0040731D ; ---------------------------------------------------------------------------
.text:0040731D
.text:0040731D loc_40731D:                             ; CODE XREF: .text:00407300↑j
.text:0040731D                 mov     esi, [esp]
.text:00407320                 mov     ebx, [esp+1Ch]
.text:00407324                 mov     eax, [ebx+esi*4]
.text:00407327                 jmp     short loc_407317
.text:00407327 ; ---------------------------------------------------------------------------
.text:00407329                 align 10h
.text:00407330
.text:00407330 ; =============== S U B R O U T I N E =======================================
.text:00407330
.text:00407330 ; Attributes: noreturn
.text:00407330
.text:00407330 sub_407330      proc near               ; DATA XREF: .data:off_415040↓o
.text:00407330
.text:00407330 Code            = dword ptr -0Ch
.text:00407330
.text:00407330                 sub     esp, 0Ch
.text:00407333                 mov     [esp+0Ch+Code], 1 ; Code
.text:0040733A                 call    sub_402370
.text:0040733A sub_407330      endp
.text:0040733A
.text:0040733A ; ---------------------------------------------------------------------------
.text:0040733F                 db  83h ; ƒ
.text:00407340                 db 0C4h ; Ä
.text:00407341                 db  0Ch
.text:00407342                 db 0C3h ; Ã
.text:00407343                 align 10h
.text:00407350
.text:00407350 ; =============== S U B R O U T I N E =======================================
.text:00407350
.text:00407350
.text:00407350 sub_407350      proc near               ; CODE XREF: sub_4014E0+1C9↑p
.text:00407350
.text:00407350 Size            = dword ptr -0Ch
.text:00407350 var_4           = dword ptr -4
.text:00407350 arg_0           = dword ptr  4
.text:00407350 arg_4           = dword ptr  8
.text:00407350
.text:00407350                 sub     esp, 0Ch
.text:00407353                 xor     edx, edx
.text:00407355                 mov     ecx, [esp+0Ch+arg_4]
.text:00407359                 mov     [esp+0Ch+var_4], ebx
.text:0040735D                 mov     eax, 0FFFFFFFFh
.text:00407362                 mov     ebx, [esp+0Ch+arg_0]
.text:00407366                 div     ecx
.text:00407368                 cmp     eax, ebx
.text:0040736A                 jb      short loc_407389
.text:0040736C                 mov     edx, ebx
.text:0040736E                 imul    edx, ecx
.text:00407371                 mov     [esp+0Ch+Size], edx ; Size
.text:00407374                 call    malloc
.text:00407379                 test    eax, eax
.text:0040737B                 jz      short loc_407385
.text:0040737D
.text:0040737D loc_40737D:                             ; CODE XREF: sub_407350+37↓j
.text:0040737D                 mov     ebx, [esp+0Ch+var_4]
.text:00407381                 add     esp, 0Ch
.text:00407384                 retn
.text:00407385 ; ---------------------------------------------------------------------------
.text:00407385
.text:00407385 loc_407385:                             ; CODE XREF: sub_407350+2B↑j
.text:00407385                 test    ebx, ebx
.text:00407387                 jz      short loc_40737D
.text:00407389
.text:00407389 loc_407389:                             ; CODE XREF: sub_407350+1A↑j
.text:00407389                 call    sub_40AA40
.text:00407389 sub_407350      endp
.text:00407389
.text:00407389 ; ---------------------------------------------------------------------------
.text:0040738E                 align 10h
.text:00407390
.text:00407390 ; =============== S U B R O U T I N E =======================================
.text:00407390
.text:00407390
.text:00407390 ; int __cdecl sub_407390(size_t)
.text:00407390 sub_407390      proc near               ; CODE XREF: sub_405540+23↑p
.text:00407390                                         ; sub_405540+4F↑p ...
.text:00407390
.text:00407390 Size            = dword ptr -0Ch
.text:00407390 var_4           = dword ptr -4
.text:00407390 arg_0           = dword ptr  4
.text:00407390
.text:00407390                 sub     esp, 0Ch
.text:00407393                 mov     [esp+0Ch+var_4], ebx
.text:00407397                 mov     ebx, [esp+0Ch+arg_0]
.text:0040739B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040739E                 call    malloc
.text:004073A3                 test    eax, eax
.text:004073A5                 jz      short loc_4073B0
.text:004073A7
.text:004073A7 loc_4073A7:                             ; CODE XREF: sub_407390+22↓j
.text:004073A7                 mov     ebx, [esp+0Ch+var_4]
.text:004073AB                 add     esp, 0Ch
.text:004073AE                 retn
.text:004073AE ; ---------------------------------------------------------------------------
.text:004073AF                 align 10h
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: sub_407390+15↑j
.text:004073B0                 test    ebx, ebx
.text:004073B2                 jz      short loc_4073A7
.text:004073B4                 call    sub_40AA40
.text:004073B4 sub_407390      endp
.text:004073B4
.text:004073B4 ; ---------------------------------------------------------------------------
.text:004073B9                 align 10h
.text:004073C0                 sub     esp, 1Ch
.text:004073C3                 xor     edx, edx
.text:004073C5                 mov     eax, 0FFFFFFFFh
.text:004073CA                 mov     [esp+14h], ebx
.text:004073CE                 mov     ecx, [esp+20h]
.text:004073D2                 mov     ebx, [esp+28h]
.text:004073D6                 mov     [esp+18h], esi
.text:004073DA                 mov     esi, [esp+24h]
.text:004073DE                 div     ebx
.text:004073E0                 cmp     eax, esi
.text:004073E2                 jb      short loc_407414
.text:004073E4                 mov     [esp], ecx
.text:004073E7                 mov     edx, esi
.text:004073E9                 imul    edx, ebx
.text:004073EC                 mov     [esp+4], edx
.text:004073F0                 call    realloc
.text:004073F5                 test    eax, eax
.text:004073F7                 mov     ecx, eax
.text:004073F9                 jz      short loc_407410
.text:004073FB
.text:004073FB loc_4073FB:                             ; CODE XREF: .text:00407412↓j
.text:004073FB                 mov     ebx, [esp+14h]
.text:004073FF                 mov     eax, ecx
.text:00407401                 mov     esi, [esp+18h]
.text:00407405                 add     esp, 1Ch
.text:00407408                 retn
.text:00407408 ; ---------------------------------------------------------------------------
.text:00407409                 align 10h
.text:00407410
.text:00407410 loc_407410:                             ; CODE XREF: .text:004073F9↑j
.text:00407410                 test    esi, esi
.text:00407412                 jz      short loc_4073FB
.text:00407414
.text:00407414 loc_407414:                             ; CODE XREF: .text:004073E2↑j
.text:00407414                 call    sub_40AA40
.text:00407414 ; ---------------------------------------------------------------------------
.text:00407419                 align 10h
.text:00407420
.text:00407420 ; =============== S U B R O U T I N E =======================================
.text:00407420
.text:00407420
.text:00407420 ; int __cdecl sub_407420(void *, size_t)
.text:00407420 sub_407420      proc near               ; CODE XREF: sub_40A850+5B↓p
.text:00407420
.text:00407420 Block           = dword ptr -0Ch
.text:00407420 Size            = dword ptr -8
.text:00407420 var_4           = dword ptr -4
.text:00407420 arg_0           = dword ptr  4
.text:00407420 arg_4           = dword ptr  8
.text:00407420
.text:00407420                 sub     esp, 0Ch
.text:00407423                 mov     edx, [esp+0Ch+arg_0]
.text:00407427                 mov     [esp+0Ch+var_4], ebx
.text:0040742B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040742F                 mov     [esp+0Ch+Block], edx ; Block
.text:00407432                 mov     [esp+0Ch+Size], ebx ; Size
.text:00407436                 call    realloc
.text:0040743B                 test    eax, eax
.text:0040743D                 jz      short loc_407447
.text:0040743F
.text:0040743F loc_40743F:                             ; CODE XREF: sub_407420+29↓j
.text:0040743F                 mov     ebx, [esp+0Ch+var_4]
.text:00407443                 add     esp, 0Ch
.text:00407446                 retn
.text:00407447 ; ---------------------------------------------------------------------------
.text:00407447
.text:00407447 loc_407447:                             ; CODE XREF: sub_407420+1D↑j
.text:00407447                 test    ebx, ebx
.text:00407449                 jz      short loc_40743F
.text:0040744B                 call    sub_40AA40
.text:0040744B sub_407420      endp
.text:0040744B
.text:00407450 ; ---------------------------------------------------------------------------
.text:00407450                 jmp     sub_4075A0
.text:00407450 ; ---------------------------------------------------------------------------
.text:00407455                 align 10h
.text:00407460                 sub     esp, 0Ch
.text:00407463                 mov     edx, [esp+14h]
.text:00407467                 mov     dword ptr [esp+8], 1
.text:0040746F                 mov     [esp+4], edx
.text:00407473                 mov     edx, [esp+10h]
.text:00407477                 mov     [esp], edx
.text:0040747A                 call    sub_4075A0
.text:0040747F                 add     esp, 0Ch
.text:00407482                 retn
.text:00407482 ; ---------------------------------------------------------------------------
.text:00407483                 align 10h
.text:00407490                 sub     esp, 1Ch
.text:00407493                 mov     [esp+18h], ebx
.text:00407497                 mov     ebx, [esp+20h]
.text:0040749B                 mov     [esp], ebx
.text:0040749E                 call    malloc
.text:004074A3                 test    eax, eax
.text:004074A5                 jz      short loc_4074C3
.text:004074A7
.text:004074A7 loc_4074A7:                             ; CODE XREF: .text:004074C5↓j
.text:004074A7                 mov     [esp+8], ebx
.text:004074AB                 mov     dword ptr [esp+4], 0
.text:004074B3                 mov     [esp], eax
.text:004074B6                 call    memset
.text:004074BB                 mov     ebx, [esp+18h]
.text:004074BF                 add     esp, 1Ch
.text:004074C2                 retn
.text:004074C3 ; ---------------------------------------------------------------------------
.text:004074C3
.text:004074C3 loc_4074C3:                             ; CODE XREF: .text:004074A5↑j
.text:004074C3                 test    ebx, ebx
.text:004074C5                 jz      short loc_4074A7
.text:004074C7                 call    sub_40AA40
.text:004074C7 ; ---------------------------------------------------------------------------
.text:004074CC                 align 10h
.text:004074D0                 sub     esp, 0Ch
.text:004074D3                 xor     edx, edx
.text:004074D5                 mov     ecx, [esp+14h]
.text:004074D9                 mov     [esp+8], ebx
.text:004074DD                 mov     eax, 0FFFFFFFFh
.text:004074E2                 mov     ebx, [esp+10h]
.text:004074E6                 div     ecx
.text:004074E8                 cmp     eax, ebx
.text:004074EA                 jb      short loc_407508
.text:004074EC                 mov     [esp+4], ecx
.text:004074F0                 mov     [esp], ebx
.text:004074F3                 call    calloc
.text:004074F8                 test    eax, eax
.text:004074FA                 jz      short loc_407504
.text:004074FC
.text:004074FC loc_4074FC:                             ; CODE XREF: .text:00407506↓j
.text:004074FC                 mov     ebx, [esp+8]
.text:00407500                 add     esp, 0Ch
.text:00407503                 retn
.text:00407504 ; ---------------------------------------------------------------------------
.text:00407504
.text:00407504 loc_407504:                             ; CODE XREF: .text:004074FA↑j
.text:00407504                 test    ebx, ebx
.text:00407506                 jz      short loc_4074FC
.text:00407508
.text:00407508 loc_407508:                             ; CODE XREF: .text:004074EA↑j
.text:00407508                 call    sub_40AA40
.text:00407508 ; ---------------------------------------------------------------------------
.text:0040750D                 align 10h
.text:00407510                 sub     esp, 1Ch
.text:00407513                 mov     [esp+18h], ebx
.text:00407517                 mov     ebx, [esp+24h]
.text:0040751B                 mov     [esp], ebx
.text:0040751E                 call    malloc
.text:00407523                 test    eax, eax
.text:00407525                 mov     edx, eax
.text:00407527                 jz      short loc_407545
.text:00407529
.text:00407529 loc_407529:                             ; CODE XREF: .text:00407547↓j
.text:00407529                 mov     [esp+8], ebx
.text:0040752D                 mov     ecx, [esp+20h]
.text:00407531                 mov     [esp], edx
.text:00407534                 mov     [esp+4], ecx
.text:00407538                 call    memcpy
.text:0040753D                 mov     ebx, [esp+18h]
.text:00407541                 add     esp, 1Ch
.text:00407544                 retn
.text:00407545 ; ---------------------------------------------------------------------------
.text:00407545
.text:00407545 loc_407545:                             ; CODE XREF: .text:00407527↑j
.text:00407545                 test    ebx, ebx
.text:00407547                 jz      short loc_407529
.text:00407549                 call    sub_40AA40
.text:00407549 ; ---------------------------------------------------------------------------
.text:0040754E                 align 10h
.text:00407550
.text:00407550 ; =============== S U B R O U T I N E =======================================
.text:00407550
.text:00407550
.text:00407550 ; int __cdecl sub_407550(char *)
.text:00407550 sub_407550      proc near               ; CODE XREF: sub_407C40+24↓p
.text:00407550
.text:00407550 Str             = dword ptr -1Ch
.text:00407550 Src             = dword ptr -18h
.text:00407550 Size            = dword ptr -14h
.text:00407550 var_8           = dword ptr -8
.text:00407550 var_4           = dword ptr -4
.text:00407550 arg_0           = dword ptr  4
.text:00407550
.text:00407550                 sub     esp, 1Ch
.text:00407553                 mov     [esp+1Ch+var_4], esi
.text:00407557                 mov     esi, [esp+1Ch+arg_0]
.text:0040755B                 mov     [esp+1Ch+var_8], ebx
.text:0040755F                 mov     [esp+1Ch+Str], esi ; Str
.text:00407562                 call    strlen
.text:00407567                 lea     ebx, [eax+1]
.text:0040756A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040756D                 call    malloc
.text:00407572                 test    eax, eax
.text:00407574                 jz      short loc_407592
.text:00407576
.text:00407576 loc_407576:                             ; CODE XREF: sub_407550+44↓j
.text:00407576                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040757A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040757E                 mov     [esp+1Ch+Str], eax ; void *
.text:00407581                 call    memcpy
.text:00407586                 mov     ebx, [esp+1Ch+var_8]
.text:0040758A                 mov     esi, [esp+1Ch+var_4]
.text:0040758E                 add     esp, 1Ch
.text:00407591                 retn
.text:00407592 ; ---------------------------------------------------------------------------
.text:00407592
.text:00407592 loc_407592:                             ; CODE XREF: sub_407550+24↑j
.text:00407592                 test    ebx, ebx
.text:00407594                 jz      short loc_407576
.text:00407596                 call    sub_40AA40
.text:00407596 sub_407550      endp
.text:00407596
.text:00407596 ; ---------------------------------------------------------------------------
.text:0040759B                 align 10h
.text:004075A0
.text:004075A0 ; =============== S U B R O U T I N E =======================================
.text:004075A0
.text:004075A0
.text:004075A0 ; int __cdecl sub_4075A0(void *, int, int)
.text:004075A0 sub_4075A0      proc near               ; CODE XREF: .text:00407450↑j
.text:004075A0                                         ; .text:0040747A↑p
.text:004075A0
.text:004075A0 Block           = dword ptr -1Ch
.text:004075A0 Size            = dword ptr -18h
.text:004075A0 var_C           = dword ptr -0Ch
.text:004075A0 var_8           = dword ptr -8
.text:004075A0 var_4           = dword ptr -4
.text:004075A0 arg_0           = dword ptr  4
.text:004075A0 arg_4           = dword ptr  8
.text:004075A0 arg_8           = dword ptr  0Ch
.text:004075A0
.text:004075A0                 sub     esp, 1Ch
.text:004075A3                 mov     [esp+1Ch+var_8], esi
.text:004075A7                 mov     esi, [esp+1Ch+arg_0]
.text:004075AB                 mov     [esp+1Ch+var_4], edi
.text:004075AF                 mov     edi, [esp+1Ch+arg_4]
.text:004075B3                 test    esi, esi
.text:004075B5                 mov     [esp+1Ch+var_C], ebx
.text:004075B9                 mov     ecx, [edi]
.text:004075BB                 mov     ebx, [esp+1Ch+arg_8]
.text:004075BF                 jz      short loc_407600
.text:004075C1                 xor     edx, edx
.text:004075C3                 mov     eax, 7FFFFFFFh
.text:004075C8                 div     ebx
.text:004075CA                 cmp     eax, ecx
.text:004075CC                 jb      short loc_4075F9
.text:004075CE                 add     ecx, ecx
.text:004075D0
.text:004075D0 loc_4075D0:                             ; CODE XREF: sub_4075A0+62↓j
.text:004075D0                                         ; sub_4075A0+71↓j ...
.text:004075D0                 mov     [edi], ecx
.text:004075D2                 imul    ebx, ecx
.text:004075D5                 mov     [esp+1Ch+Block], esi ; Block
.text:004075D8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004075DC                 call    realloc
.text:004075E1                 test    eax, eax
.text:004075E3                 jz      short loc_4075F5
.text:004075E5
.text:004075E5 loc_4075E5:                             ; CODE XREF: sub_4075A0+57↓j
.text:004075E5                 mov     ebx, [esp+1Ch+var_C]
.text:004075E9                 mov     esi, [esp+1Ch+var_8]
.text:004075ED                 mov     edi, [esp+1Ch+var_4]
.text:004075F1                 add     esp, 1Ch
.text:004075F4                 retn
.text:004075F5 ; ---------------------------------------------------------------------------
.text:004075F5
.text:004075F5 loc_4075F5:                             ; CODE XREF: sub_4075A0+43↑j
.text:004075F5                 test    ebx, ebx
.text:004075F7                 jz      short loc_4075E5
.text:004075F9
.text:004075F9 loc_4075F9:                             ; CODE XREF: sub_4075A0+2C↑j
.text:004075F9                 call    sub_40AA40
.text:004075F9 ; ---------------------------------------------------------------------------
.text:004075FE                 align 10h
.text:00407600
.text:00407600 loc_407600:                             ; CODE XREF: sub_4075A0+1F↑j
.text:00407600                 test    ecx, ecx
.text:00407602                 jnz     short loc_4075D0
.text:00407604                 xor     edx, edx
.text:00407606                 mov     eax, 40h ; '@'
.text:0040760B                 div     ebx
.text:0040760D                 test    eax, eax
.text:0040760F                 mov     ecx, eax
.text:00407611                 jnz     short loc_4075D0
.text:00407613                 mov     ecx, 1
.text:00407618                 jmp     short loc_4075D0
.text:00407618 sub_4075A0      endp
.text:00407618
.text:00407618 ; ---------------------------------------------------------------------------
.text:0040761A                 align 10h
.text:00407620                 mov     edx, [esp+4]
.text:00407624                 mov     ds:dword_4160B0, edx
.text:0040762A                 retn
.text:0040762A ; ---------------------------------------------------------------------------
.text:0040762B aWriteError_0   db 'write error',0      ; DATA XREF: sub_407650:loc_407699↓o
.text:00407637 ; const char aSS_2[]
.text:00407637 aSS_2           db '%s: %s',0           ; DATA XREF: sub_407650+77↓o
.text:0040763E ; const char aS_4[]
.text:0040763E aS_4            db '%s',0               ; DATA XREF: sub_407650+A0↓o
.text:00407641 ; ---------------------------------------------------------------------------
.text:00407641                 jmp     short sub_407650
.text:00407641 ; ---------------------------------------------------------------------------
.text:00407643                 align 10h
.text:00407650
.text:00407650 ; =============== S U B R O U T I N E =======================================
.text:00407650
.text:00407650
.text:00407650 ; void __cdecl sub_407650()
.text:00407650 sub_407650      proc near               ; CODE XREF: .text:00407641↑j
.text:00407650                                         ; DATA XREF: sub_4014E0+8F↑o
.text:00407650
.text:00407650 Stream          = dword ptr -2Ch
.text:00407650 ErrorMessage    = dword ptr -28h
.text:00407650 var_24          = dword ptr -24h
.text:00407650 var_20          = byte ptr -20h
.text:00407650 var_1C          = dword ptr -1Ch
.text:00407650 var_9           = byte ptr -9
.text:00407650
.text:00407650                 push    esi
.text:00407651                 push    ebx
.text:00407652                 sub     esp, 24h
.text:00407655                 mov     edx, ds:_iob
.text:0040765B                 mov     ecx, [edx+2Ch]
.text:0040765E                 lea     esi, [edx+20h]
.text:00407661                 shr     ecx, 5
.text:00407664                 mov     bl, cl
.text:00407666                 mov     ecx, [edx+20h]
.text:00407669                 and     bl, 1
.text:0040766C                 cmp     ecx, [esi+8]
.text:0040766F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407672                 setz    [esp+2Ch+var_9]
.text:00407677                 call    fclose
.text:0040767C                 test    eax, eax
.text:0040767E                 setnz   al
.text:00407681                 test    bl, bl
.text:00407683                 jnz     loc_407713
.text:00407689                 test    al, al
.text:0040768B                 jz      short loc_4076E0
.text:0040768D
.text:0040768D loc_40768D:                             ; CODE XREF: sub_407650+CD↓j
.text:0040768D                 call    _errno
.text:00407692                 mov     esi, [eax]
.text:00407694
.text:00407694 loc_407694:                             ; CODE XREF: sub_407650+C7↓j
.text:00407694                 cmp     esi, 9
.text:00407697                 jz      short loc_407706
.text:00407699
.text:00407699 loc_407699:                             ; CODE XREF: sub_407650+B8↓j
.text:00407699                                         ; sub_407650+C1↓j
.text:00407699                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:004076A0                 call    ds:libintl_gettext
.text:004076A6                 mov     ebx, eax
.text:004076A8                 mov     eax, ds:dword_4160B0
.text:004076AD                 test    eax, eax
.text:004076AF                 jz      short loc_4076E6
.text:004076B1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004076B4                 call    sub_40A7B0
.text:004076B9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004076BD                 mov     edx, Code
.text:004076C3                 mov     [esp+2Ch+var_1C], ebx
.text:004076C7                 mov     [esp+2Ch+var_24], offset aSS_2 ; "%s: %s"
.text:004076CF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004076D3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004076D6                 call    sub_40AB80
.text:004076DB                 nop
.text:004076DC                 lea     esi, [esi+0]
.text:004076E0
.text:004076E0 loc_4076E0:                             ; CODE XREF: sub_407650+3B↑j
.text:004076E0                                         ; sub_407650+B4↓j ...
.text:004076E0                 add     esp, 24h
.text:004076E3                 pop     ebx
.text:004076E4                 pop     esi
.text:004076E5                 retn
.text:004076E6 ; ---------------------------------------------------------------------------
.text:004076E6
.text:004076E6 loc_4076E6:                             ; CODE XREF: sub_407650+5F↑j
.text:004076E6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004076EA                 mov     ebx, Code
.text:004076F0                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:004076F8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004076FC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004076FF                 call    sub_40AB80
.text:00407704                 jmp     short loc_4076E0
.text:00407706 ; ---------------------------------------------------------------------------
.text:00407706
.text:00407706 loc_407706:                             ; CODE XREF: sub_407650+47↑j
.text:00407706                 test    bl, bl
.text:00407708                 jnz     short loc_407699
.text:0040770A                 cmp     [esp+2Ch+var_9], 0
.text:0040770F                 jnz     short loc_4076E0
.text:00407711                 jmp     short loc_407699
.text:00407713 ; ---------------------------------------------------------------------------
.text:00407713
.text:00407713 loc_407713:                             ; CODE XREF: sub_407650+33↑j
.text:00407713                 xor     esi, esi
.text:00407715                 test    al, al
.text:00407717                 jz      loc_407694
.text:0040771D                 jmp     loc_40768D
.text:0040771D sub_407650      endp
.text:0040771D
.text:0040771D ; ---------------------------------------------------------------------------
.text:00407722                 align 10h
.text:00407730 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00407730                                         ; DATA XREF: .data:Buffer↓o
.text:00407762 ; const char aSSS[]
.text:00407762 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_407A20+50↓o
.text:0040776E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040776E                                         ; DATA XREF: sub_407A20:loc_407AC1↓o
.text:0040777E                 db 12h dup(90h)
.text:00407790 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00407790                                         ; DATA XREF: sub_407A20+100↓o
.text:00407790                 db 'ere is NO',0Ah
.text:00407790                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00407790                 db 'R PURPOSE.',0Ah,0
.text:00407828 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00407828                                         ; DATA XREF: sub_407A20:loc_407B61↓o
.text:0040783F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040783F                                         ; DATA XREF: sub_407A20:loc_407B6D↓o
.text:0040785B                 db 15h dup(90h)
.text:00407870 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00407870                                         ; DATA XREF: sub_407A20:loc_407B79↓o
.text:00407870                 db 'and %s.',0Ah,0
.text:00407890 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00407890                                         ; DATA XREF: sub_407A20:loc_407B85↓o
.text:00407890                 db '%s, and %s.',0Ah,0
.text:004078B4                 db 1Ch dup(90h)
.text:004078D0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004078D0                                         ; DATA XREF: sub_407A20:loc_407B91↓o
.text:004078D0                 db '%s, %s, and %s.',0Ah,0
.text:004078F8                 db 18h dup(90h)
.text:00407910 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00407910                                         ; DATA XREF: sub_407A20:loc_407B9D↓o
.text:00407910                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040793C                 db 14h dup(90h)
.text:00407950 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00407950                                         ; DATA XREF: sub_407A20:loc_407BA9↓o
.text:00407950                 db '%s, %s, %s, %s,',0Ah
.text:00407950                 db 'and %s.',0Ah,0
.text:00407980                 db 10h dup(90h)
.text:00407990 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00407990                                         ; DATA XREF: sub_407A20:loc_407BB5↓o
.text:00407990                 db '%s, %s, %s, %s,',0Ah
.text:00407990                 db '%s, and %s.',0Ah,0
.text:004079C4                 align 10h
.text:004079D0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004079D0                                         ; DATA XREF: sub_407A20:def_407A8D↓o
.text:004079D0                 db '%s, %s, %s, %s,',0Ah
.text:004079D0                 db '%s, %s, and others.',0Ah,0
.text:00407A0C ; const char aSS_1[]
.text:00407A0C aSS_1           db '%s %s',0Ah,0        ; DATA XREF: sub_407A20+1B5↓o
.text:00407A13                 align 10h
.text:00407A20
.text:00407A20 ; =============== S U B R O U T I N E =======================================
.text:00407A20
.text:00407A20
.text:00407A20 ; int __cdecl sub_407A20(FILE *, FILE *, int, int, va_list)
.text:00407A20 sub_407A20      proc near               ; CODE XREF: sub_407BF0+2A↓p
.text:00407A20
.text:00407A20 Stream          = dword ptr -2Ch
.text:00407A20 Format          = dword ptr -28h
.text:00407A20 ArgList         = dword ptr -24h
.text:00407A20 var_20          = dword ptr -20h
.text:00407A20 var_1C          = dword ptr -1Ch
.text:00407A20 var_14          = dword ptr -14h
.text:00407A20 arg_0           = dword ptr  4
.text:00407A20 arg_4           = dword ptr  8
.text:00407A20 arg_8           = dword ptr  0Ch
.text:00407A20 arg_C           = dword ptr  10h
.text:00407A20 arg_10          = dword ptr  14h
.text:00407A20
.text:00407A20                 push    ebp
.text:00407A21                 push    edi
.text:00407A22                 push    esi
.text:00407A23                 push    ebx
.text:00407A24                 sub     esp, 1Ch
.text:00407A27                 xor     ebx, ebx
.text:00407A29                 mov     edi, [esp+2Ch+arg_10]
.text:00407A2D                 mov     edx, [esp+2Ch+arg_8]
.text:00407A31                 mov     esi, [esp+2Ch+arg_0]
.text:00407A35                 mov     eax, [edi]
.text:00407A37                 mov     ecx, [esp+2Ch+arg_4]
.text:00407A3B                 mov     [esp+2Ch+var_14], edx
.text:00407A3F                 mov     ebp, [esp+2Ch+arg_C]
.text:00407A43                 lea     edx, [edi+4]
.text:00407A46                 test    eax, eax
.text:00407A48                 jz      short loc_407A5C
.text:00407A4A                 lea     esi, [esi+0]
.text:00407A50
.text:00407A50 loc_407A50:                             ; CODE XREF: sub_407A20+3A↓j
.text:00407A50                 mov     eax, edx
.text:00407A52                 inc     ebx
.text:00407A53                 mov     eax, [eax]
.text:00407A55                 add     edx, 4
.text:00407A58                 test    eax, eax
.text:00407A5A                 jnz     short loc_407A50
.text:00407A5C
.text:00407A5C loc_407A5C:                             ; CODE XREF: sub_407A20+28↑j
.text:00407A5C                 test    ecx, ecx
.text:00407A5E                 jz      loc_407BCD
.text:00407A64                 mov     [esp+2Ch+var_1C], ebp
.text:00407A68                 mov     edx, [esp+2Ch+var_14]
.text:00407A6C                 mov     [esp+2Ch+ArgList], ecx
.text:00407A70                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00407A78                 mov     [esp+2Ch+var_20], edx
.text:00407A7C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407A7F                 call    fprintf
.text:00407A84
.text:00407A84 loc_407A84:                             ; CODE XREF: sub_407A20+1C9↓j
.text:00407A84                 cmp     ebx, 9          ; switch 10 cases
.text:00407A87                 ja      def_407A8D      ; jumptable 00407A8D default case
.text:00407A8D                 jmp     ds:jpt_407A8D[ebx*4] ; switch jump
.text:00407A8D ; ---------------------------------------------------------------------------
.text:00407A94 jpt_407A8D      dd offset loc_407ABC    ; DATA XREF: sub_407A20+6D↑r
.text:00407A94                 dd offset loc_407AC1    ; jump table for switch statement
.text:00407A94                 dd offset loc_407B61
.text:00407A94                 dd offset loc_407B6D
.text:00407A94                 dd offset loc_407B79
.text:00407A94                 dd offset loc_407B85
.text:00407A94                 dd offset loc_407B91
.text:00407A94                 dd offset loc_407B9D
.text:00407A94                 dd offset loc_407BA9
.text:00407A94                 dd offset loc_407BB5
.text:00407ABC ; ---------------------------------------------------------------------------
.text:00407ABC
.text:00407ABC loc_407ABC:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407ABC                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407ABC                 call    abort           ; jumptable 00407A8D case 0
.text:00407AC1 ; ---------------------------------------------------------------------------
.text:00407AC1
.text:00407AC1 loc_407AC1:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407AC1                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407AC1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00407A8D case 1
.text:00407AC8                 nop
.text:00407AC9                 lea     esi, [esi+0]
.text:00407AD0
.text:00407AD0 loc_407AD0:                             ; CODE XREF: sub_407A20+148↓j
.text:00407AD0                                         ; sub_407A20+154↓j ...
.text:00407AD0                 call    ds:libintl_gettext
.text:00407AD6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00407ADA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407ADD                 mov     [esp+2Ch+Format], eax ; Format
.text:00407AE1                 call    vfprintf
.text:00407AE6                 mov     ebx, [esi+4]
.text:00407AE9                 dec     ebx
.text:00407AEA                 test    ebx, ebx
.text:00407AEC                 mov     [esi+4], ebx
.text:00407AEF                 js      short loc_407B4F
.text:00407AF1                 mov     edi, [esi]
.text:00407AF3                 mov     byte ptr [edi], 0Ah
.text:00407AF6                 inc     dword ptr [esi]
.text:00407AF8
.text:00407AF8 loc_407AF8:                             ; CODE XREF: sub_407A20+13F↓j
.text:00407AF8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00407AFC                 mov     edx, Buffer
.text:00407B02                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00407B05                 call    fputs
.text:00407B0A                 mov     ebp, [esi+4]
.text:00407B0D                 dec     ebp
.text:00407B0E                 test    ebp, ebp
.text:00407B10                 mov     [esi+4], ebp
.text:00407B13                 js      short loc_407B3D
.text:00407B15                 mov     ecx, [esi]
.text:00407B17                 mov     byte ptr [ecx], 0Ah
.text:00407B1A                 inc     dword ptr [esi]
.text:00407B1C
.text:00407B1C loc_407B1C:                             ; CODE XREF: sub_407A20+12D↓j
.text:00407B1C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00407B20                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00407B27                 call    ds:libintl_gettext
.text:00407B2D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00407B31                 add     esp, 1Ch
.text:00407B34                 pop     ebx
.text:00407B35                 pop     esi
.text:00407B36                 pop     edi
.text:00407B37                 pop     ebp
.text:00407B38                 jmp     fputs
.text:00407B3D ; ---------------------------------------------------------------------------
.text:00407B3D
.text:00407B3D loc_407B3D:                             ; CODE XREF: sub_407A20+F3↑j
.text:00407B3D                 mov     [esp+2Ch+Format], esi ; File
.text:00407B41                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00407B48                 call    _flsbuf
.text:00407B4D                 jmp     short loc_407B1C
.text:00407B4F ; ---------------------------------------------------------------------------
.text:00407B4F
.text:00407B4F loc_407B4F:                             ; CODE XREF: sub_407A20+CF↑j
.text:00407B4F                 mov     [esp+2Ch+Format], esi ; File
.text:00407B53                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00407B5A                 call    _flsbuf
.text:00407B5F                 jmp     short loc_407AF8
.text:00407B61 ; ---------------------------------------------------------------------------
.text:00407B61
.text:00407B61 loc_407B61:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407B61                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407B61                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00407A8D case 2
.text:00407B68                 jmp     loc_407AD0
.text:00407B6D ; ---------------------------------------------------------------------------
.text:00407B6D
.text:00407B6D loc_407B6D:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407B6D                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407B6D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00407A8D case 3
.text:00407B74                 jmp     loc_407AD0
.text:00407B79 ; ---------------------------------------------------------------------------
.text:00407B79
.text:00407B79 loc_407B79:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407B79                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407B79                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00407A8D case 4
.text:00407B80                 jmp     loc_407AD0
.text:00407B85 ; ---------------------------------------------------------------------------
.text:00407B85
.text:00407B85 loc_407B85:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407B85                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407B85                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00407A8D case 5
.text:00407B8C                 jmp     loc_407AD0
.text:00407B91 ; ---------------------------------------------------------------------------
.text:00407B91
.text:00407B91 loc_407B91:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407B91                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407B91                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00407A8D case 6
.text:00407B98                 jmp     loc_407AD0
.text:00407B9D ; ---------------------------------------------------------------------------
.text:00407B9D
.text:00407B9D loc_407B9D:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407B9D                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407B9D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00407A8D case 7
.text:00407BA4                 jmp     loc_407AD0
.text:00407BA9 ; ---------------------------------------------------------------------------
.text:00407BA9
.text:00407BA9 loc_407BA9:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407BA9                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407BA9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00407A8D case 8
.text:00407BB0                 jmp     loc_407AD0
.text:00407BB5 ; ---------------------------------------------------------------------------
.text:00407BB5
.text:00407BB5 loc_407BB5:                             ; CODE XREF: sub_407A20+6D↑j
.text:00407BB5                                         ; DATA XREF: sub_407A20:jpt_407A8D↑o
.text:00407BB5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00407A8D case 9
.text:00407BBC                 jmp     loc_407AD0
.text:00407BC1 ; ---------------------------------------------------------------------------
.text:00407BC1
.text:00407BC1 def_407A8D:                             ; CODE XREF: sub_407A20+67↑j
.text:00407BC1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00407A8D default case
.text:00407BC8                 jmp     loc_407AD0
.text:00407BCD ; ---------------------------------------------------------------------------
.text:00407BCD
.text:00407BCD loc_407BCD:                             ; CODE XREF: sub_407A20+3E↑j
.text:00407BCD                 mov     [esp+2Ch+var_20], ebp
.text:00407BD1                 mov     ecx, [esp+2Ch+var_14]
.text:00407BD5                 mov     [esp+2Ch+Format], offset aSS_1 ; "%s %s\n"
.text:00407BDD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407BE0                 mov     [esp+2Ch+ArgList], ecx
.text:00407BE4                 call    fprintf
.text:00407BE9                 jmp     loc_407A84
.text:00407BE9 sub_407A20      endp
.text:00407BE9
.text:00407BE9 ; ---------------------------------------------------------------------------
.text:00407BEE                 align 10h
.text:00407BF0
.text:00407BF0 ; =============== S U B R O U T I N E =======================================
.text:00407BF0
.text:00407BF0
.text:00407BF0 ; int __cdecl sub_407BF0(FILE *, FILE *, int, int, char)
.text:00407BF0 sub_407BF0      proc near               ; CODE XREF: sub_403760+12E↑p
.text:00407BF0
.text:00407BF0 var_1C          = dword ptr -1Ch
.text:00407BF0 var_18          = dword ptr -18h
.text:00407BF0 var_14          = dword ptr -14h
.text:00407BF0 var_10          = dword ptr -10h
.text:00407BF0 var_C           = dword ptr -0Ch
.text:00407BF0 arg_0           = dword ptr  4
.text:00407BF0 arg_4           = dword ptr  8
.text:00407BF0 arg_8           = dword ptr  0Ch
.text:00407BF0 arg_C           = dword ptr  10h
.text:00407BF0 arg_10          = byte ptr  14h
.text:00407BF0
.text:00407BF0                 sub     esp, 1Ch
.text:00407BF3                 mov     edx, [esp+1Ch+arg_C]
.text:00407BF7                 lea     ecx, [esp+1Ch+arg_10]
.text:00407BFB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00407BFF                 mov     ecx, [esp+1Ch+arg_8]
.text:00407C03                 mov     [esp+1Ch+var_10], edx ; int
.text:00407C07                 mov     edx, [esp+1Ch+arg_4]
.text:00407C0B                 mov     [esp+1Ch+var_14], ecx ; int
.text:00407C0F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00407C13                 mov     edx, [esp+1Ch+arg_0]
.text:00407C17                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00407C1A                 call    sub_407A20
.text:00407C1F                 add     esp, 1Ch
.text:00407C22                 retn
.text:00407C22 sub_407BF0      endp
.text:00407C22
.text:00407C22 ; ---------------------------------------------------------------------------
.text:00407C23                 align 10h
.text:00407C30 ; const char aC[2]
.text:00407C30 aC              db 'C',0                ; DATA XREF: sub_407C40+29↓o
.text:00407C32                 align 10h
.text:00407C40
.text:00407C40 ; =============== S U B R O U T I N E =======================================
.text:00407C40
.text:00407C40
.text:00407C40 ; int __cdecl sub_407C40(char *String, char **EndPtr)
.text:00407C40 sub_407C40      proc near               ; DATA XREF: sub_403760:loc_403D10↑o
.text:00407C40
.text:00407C40 Category        = dword ptr -1Ch
.text:00407C40 Locale          = dword ptr -18h
.text:00407C40 var_C           = qword ptr -0Ch
.text:00407C40 var_4           = dword ptr -4
.text:00407C40 String          = dword ptr  4
.text:00407C40 EndPtr          = dword ptr  8
.text:00407C40
.text:00407C40                 sub     esp, 1Ch
.text:00407C43                 mov     [esp+1Ch+var_4], ebx
.text:00407C47                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:00407C4F                 mov     [esp+1Ch+Category], 4 ; Category
.text:00407C56                 call    setlocale
.text:00407C5B                 test    eax, eax
.text:00407C5D                 mov     ebx, eax
.text:00407C5F                 jz      short loc_407C7F
.text:00407C61                 mov     [esp+1Ch+Category], eax ; char *
.text:00407C64                 call    sub_407550
.text:00407C69                 mov     [esp+1Ch+Locale], offset aC ; "C"
.text:00407C71                 mov     ebx, eax
.text:00407C73                 mov     [esp+1Ch+Category], 4 ; Category
.text:00407C7A                 call    setlocale
.text:00407C7F
.text:00407C7F loc_407C7F:                             ; CODE XREF: sub_407C40+1F↑j
.text:00407C7F                 mov     edx, [esp+1Ch+EndPtr]
.text:00407C83                 mov     [esp+1Ch+Locale], edx ; EndPtr
.text:00407C87                 mov     edx, [esp+1Ch+String]
.text:00407C8B                 mov     [esp+1Ch+Category], edx ; String
.text:00407C8E                 call    strtod
.text:00407C93                 test    ebx, ebx
.text:00407C95                 fstp    [esp+1Ch+var_C]
.text:00407C99                 jz      short loc_407CB3
.text:00407C9B                 mov     [esp+1Ch+Locale], ebx ; Locale
.text:00407C9F                 mov     [esp+1Ch+Category], 4 ; Category
.text:00407CA6                 call    setlocale
.text:00407CAB                 mov     [esp+1Ch+Category], ebx ; Block
.text:00407CAE                 call    free
.text:00407CB3
.text:00407CB3 loc_407CB3:                             ; CODE XREF: sub_407C40+59↑j
.text:00407CB3                 fld     [esp+1Ch+var_C]
.text:00407CB7                 mov     ebx, [esp+1Ch+var_4]
.text:00407CBB                 add     esp, 1Ch
.text:00407CBE                 retn
.text:00407CBE sub_407C40      endp
.text:00407CBE
.text:00407CBE ; ---------------------------------------------------------------------------
.text:00407CBF                 align 10h
.text:00407CC0
.text:00407CC0 ; =============== S U B R O U T I N E =======================================
.text:00407CC0
.text:00407CC0
.text:00407CC0 sub_407CC0      proc near               ; CODE XREF: sub_403760+5D1↑p
.text:00407CC0
.text:00407CC0 var_2C          = dword ptr -2Ch
.text:00407CC0 var_28          = dword ptr -28h
.text:00407CC0 var_1D          = byte ptr -1Dh
.text:00407CC0 var_1C          = qword ptr -1Ch
.text:00407CC0 var_10          = dword ptr -10h
.text:00407CC0 var_8           = dword ptr -8
.text:00407CC0 var_4           = dword ptr -4
.text:00407CC0 arg_0           = dword ptr  4
.text:00407CC0 arg_4           = dword ptr  8
.text:00407CC0 arg_8           = dword ptr  0Ch
.text:00407CC0 arg_C           = dword ptr  10h
.text:00407CC0
.text:00407CC0                 sub     esp, 2Ch
.text:00407CC3                 mov     [esp+2Ch+var_8], ebx
.text:00407CC7                 mov     ebx, [esp+2Ch+arg_0]
.text:00407CCB                 mov     [esp+2Ch+var_4], esi
.text:00407CCF                 mov     esi, [esp+2Ch+arg_4]
.text:00407CD3                 mov     [esp+2Ch+var_1D], 1
.text:00407CD8                 call    _errno
.text:00407CDD                 mov     dword ptr [eax], 0
.text:00407CE3                 lea     edx, [esp+2Ch+var_10]
.text:00407CE7                 mov     [esp+2Ch+var_28], edx
.text:00407CEB                 mov     [esp+2Ch+var_2C], ebx
.text:00407CEE                 call    [esp+2Ch+arg_C]
.text:00407CF2                 mov     eax, [esp+2Ch+var_10]
.text:00407CF6                 cmp     eax, ebx
.text:00407CF8                 fstp    [esp+2Ch+var_1C]
.text:00407CFC                 jz      short loc_407D50
.text:00407CFE                 test    esi, esi
.text:00407D00                 jz      short loc_407D57
.text:00407D02
.text:00407D02 loc_407D02:                             ; CODE XREF: sub_407CC0+9C↓j
.text:00407D02                 fld     [esp+2Ch+var_1C]
.text:00407D06                 fldz
.text:00407D08                 fxch    st(1)
.text:00407D0A                 fucompp
.text:00407D0C                 fnstsw  ax
.text:00407D0E                 sahf
.text:00407D0F                 jp      short loc_407D38
.text:00407D11                 jnz     short loc_407D38
.text:00407D13
.text:00407D13 loc_407D13:                             ; CODE XREF: sub_407CC0+80↓j
.text:00407D13                                         ; sub_407CC0+95↓j
.text:00407D13                 test    esi, esi
.text:00407D15                 jz      short loc_407D1D
.text:00407D17                 mov     edx, [esp+2Ch+var_10]
.text:00407D1B                 mov     [esi], edx
.text:00407D1D
.text:00407D1D loc_407D1D:                             ; CODE XREF: sub_407CC0+55↑j
.text:00407D1D                 fld     [esp+2Ch+var_1C]
.text:00407D21                 mov     ecx, [esp+2Ch+arg_8]
.text:00407D25                 movzx   eax, [esp+2Ch+var_1D]
.text:00407D2A                 fstp    qword ptr [ecx]
.text:00407D2C                 mov     ebx, [esp+2Ch+var_8]
.text:00407D30                 mov     esi, [esp+2Ch+var_4]
.text:00407D34                 add     esp, 2Ch
.text:00407D37                 retn
.text:00407D38 ; ---------------------------------------------------------------------------
.text:00407D38
.text:00407D38 loc_407D38:                             ; CODE XREF: sub_407CC0+4F↑j
.text:00407D38                                         ; sub_407CC0+51↑j
.text:00407D38                 call    _errno
.text:00407D3D                 cmp     dword ptr [eax], 22h ; '"'
.text:00407D40                 jnz     short loc_407D13
.text:00407D42                 lea     esi, [esi+0]
.text:00407D49                 lea     edi, [edi+0]
.text:00407D50
.text:00407D50 loc_407D50:                             ; CODE XREF: sub_407CC0+3C↑j
.text:00407D50                                         ; sub_407CC0+9A↓j
.text:00407D50                 mov     [esp+2Ch+var_1D], 0
.text:00407D55                 jmp     short loc_407D13
.text:00407D57 ; ---------------------------------------------------------------------------
.text:00407D57
.text:00407D57 loc_407D57:                             ; CODE XREF: sub_407CC0+40↑j
.text:00407D57                 cmp     byte ptr [eax], 0
.text:00407D5A                 jnz     short loc_407D50
.text:00407D5C                 jmp     short loc_407D02
.text:00407D5C sub_407CC0      endp
.text:00407D5C
.text:00407D5C ; ---------------------------------------------------------------------------
.text:00407D5E                 align 10h
.text:00407D60 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00407D60                                         ; DATA XREF: sub_407DD0+544↓o
.text:00407D88                 align 20h
.text:00407DA0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00407DA0                                         ; DATA XREF: sub_407DD0+54C↓o
.text:00407DC6                 align 10h
.text:00407DD0
.text:00407DD0 ; =============== S U B R O U T I N E =======================================
.text:00407DD0
.text:00407DD0
.text:00407DD0 ; int __cdecl sub_407DD0(int, int, int, int, char *Str)
.text:00407DD0 sub_407DD0      proc near               ; CODE XREF: sub_403760+4E8↑p
.text:00407DD0
.text:00407DD0 C               = dword ptr -3Ch
.text:00407DD0 Type            = dword ptr -38h
.text:00407DD0 Radix           = dword ptr -34h
.text:00407DD0 var_28          = dword ptr -28h
.text:00407DD0 var_24          = dword ptr -24h
.text:00407DD0 var_1D          = byte ptr -1Dh
.text:00407DD0 var_1C          = dword ptr -1Ch
.text:00407DD0 var_18          = dword ptr -18h
.text:00407DD0 var_14          = byte ptr -14h
.text:00407DD0 arg_0           = dword ptr  4
.text:00407DD0 arg_4           = dword ptr  8
.text:00407DD0 arg_8           = dword ptr  0Ch
.text:00407DD0 arg_C           = dword ptr  10h
.text:00407DD0 Str             = dword ptr  14h
.text:00407DD0
.text:00407DD0                 push    ebp
.text:00407DD1                 push    edi
.text:00407DD2                 push    esi
.text:00407DD3                 push    ebx
.text:00407DD4                 sub     esp, 2Ch
.text:00407DD7                 mov     ebp, [esp+3Ch+arg_8]
.text:00407DDB                 mov     [esp+3Ch+var_1C], 0
.text:00407DE3                 mov     esi, [esp+3Ch+arg_0]
.text:00407DE7                 cmp     ebp, 24h ; '$'
.text:00407DEA                 ja      loc_40830C
.text:00407DF0                 mov     edi, [esp+3Ch+arg_4]
.text:00407DF4                 test    edi, edi
.text:00407DF6                 jz      loc_408303
.text:00407DFC
.text:00407DFC loc_407DFC:                             ; CODE XREF: sub_407DD0+537↓j
.text:00407DFC                 movzx   edx, byte ptr [esi]
.text:00407DFF                 mov     ebx, esi
.text:00407E01                 mov     [esp+3Ch+var_1D], dl
.text:00407E05                 lea     esi, [esi+0]
.text:00407E09                 lea     edi, [edi+0]
.text:00407E10
.text:00407E10 loc_407E10:                             ; CODE XREF: sub_407DD0+70↓j
.text:00407E10                 movzx   edx, [esp+3Ch+var_1D]
.text:00407E15                 mov     ecx, ds:__mb_cur_max
.text:00407E1B                 cmp     dword ptr [ecx], 1
.text:00407E1E                 jz      loc_4082F0
.text:00407E24                 mov     [esp+3Ch+Type], 8 ; Type
.text:00407E2C                 mov     [esp+3Ch+C], edx ; C
.text:00407E2F                 call    _isctype
.text:00407E34
.text:00407E34 loc_407E34:                             ; CODE XREF: sub_407DD0+52E↓j
.text:00407E34                 test    eax, eax
.text:00407E36                 jz      short loc_407E42
.text:00407E38                 inc     ebx
.text:00407E39                 movzx   eax, byte ptr [ebx]
.text:00407E3C                 mov     [esp+3Ch+var_1D], al
.text:00407E40                 jmp     short loc_407E10
.text:00407E42 ; ---------------------------------------------------------------------------
.text:00407E42
.text:00407E42 loc_407E42:                             ; CODE XREF: sub_407DD0+66↑j
.text:00407E42                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00407E47                 mov     eax, 4
.text:00407E4C                 jz      short loc_407EA5
.text:00407E4E                 call    _errno
.text:00407E53                 mov     dword ptr [eax], 0
.text:00407E59                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:00407E5D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00407E61                 mov     [esp+3Ch+C], esi ; String
.text:00407E64                 call    strtoul
.text:00407E69                 mov     [esp+3Ch+var_18], eax
.text:00407E6D                 mov     eax, [edi]
.text:00407E6F                 cmp     eax, esi
.text:00407E71                 jz      loc_4082BC
.text:00407E77                 call    _errno
.text:00407E7C                 mov     ebp, [eax]
.text:00407E7E                 test    ebp, ebp
.text:00407E80                 jnz     loc_40829B
.text:00407E86
.text:00407E86 loc_407E86:                             ; CODE XREF: sub_407DD0+4DD↓j
.text:00407E86                                         ; sub_407DD0+51A↓j
.text:00407E86                 mov     eax, [esp+3Ch+Str]
.text:00407E8A                 test    eax, eax
.text:00407E8C                 jz      short loc_407E97
.text:00407E8E                 mov     ecx, [edi]
.text:00407E90                 movzx   eax, byte ptr [ecx]
.text:00407E93                 test    al, al
.text:00407E95                 jnz     short loc_407EAD
.text:00407E97
.text:00407E97 loc_407E97:                             ; CODE XREF: sub_407DD0+BC↑j
.text:00407E97                                         ; sub_407DD0+26C↓j ...
.text:00407E97                 mov     edx, [esp+3Ch+var_18]
.text:00407E9B                 mov     esi, [esp+3Ch+arg_C]
.text:00407E9F                 mov     eax, [esp+3Ch+var_1C]
.text:00407EA3                 mov     [esi], edx
.text:00407EA5
.text:00407EA5 loc_407EA5:                             ; CODE XREF: sub_407DD0+7C↑j
.text:00407EA5                                         ; sub_407DD0+112↓j ...
.text:00407EA5                 add     esp, 2Ch
.text:00407EA8                 pop     ebx
.text:00407EA9                 pop     esi
.text:00407EAA                 pop     edi
.text:00407EAB                 pop     ebp
.text:00407EAC                 retn
.text:00407EAD ; ---------------------------------------------------------------------------
.text:00407EAD
.text:00407EAD loc_407EAD:                             ; CODE XREF: sub_407DD0+C5↑j
.text:00407EAD                 mov     [esp+3Ch+var_24], 1
.text:00407EB5                 mov     edx, [esp+3Ch+Str]
.text:00407EB9                 movsx   esi, al
.text:00407EBC                 mov     [esp+3Ch+Type], esi ; Val
.text:00407EC0                 mov     ebx, 400h
.text:00407EC5                 mov     [esp+3Ch+C], edx ; Str
.text:00407EC8                 call    strchr
.text:00407ECD                 test    eax, eax
.text:00407ECF                 jnz     short loc_407EE4
.text:00407ED1
.text:00407ED1 def_407F34:                             ; CODE XREF: sub_407DD0+162↓j
.text:00407ED1                                         ; sub_407DD0+164↓j
.text:00407ED1                                         ; DATA XREF: ...
.text:00407ED1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00407F34 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00407ED5                 mov     ebx, [esp+3Ch+var_18]
.text:00407ED9                 mov     edi, [esp+3Ch+arg_C]
.text:00407EDD                 or      eax, 2
.text:00407EE0                 mov     [edi], ebx
.text:00407EE2                 jmp     short loc_407EA5
.text:00407EE4 ; ---------------------------------------------------------------------------
.text:00407EE4
.text:00407EE4 loc_407EE4:                             ; CODE XREF: sub_407DD0+FF↑j
.text:00407EE4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:00407EEC                 mov     ebp, [esp+3Ch+Str]
.text:00407EF0                 mov     [esp+3Ch+C], ebp ; Str
.text:00407EF3                 call    strchr
.text:00407EF8                 test    eax, eax
.text:00407EFA                 jz      loc_408290
.text:00407F00                 mov     ecx, [edi]
.text:00407F02                 mov     [esp+3Ch+var_28], ecx
.text:00407F06                 movsx   eax, byte ptr [ecx+1]
.text:00407F0A                 cmp     eax, 44h ; 'D'
.text:00407F0D                 jz      loc_408259
.text:00407F13                 cmp     eax, 44h ; 'D'
.text:00407F16                 jg      loc_40826B
.text:00407F1C                 cmp     eax, 42h ; 'B'
.text:00407F1F                 jz      loc_408259
.text:00407F25
.text:00407F25 loc_407F25:                             ; CODE XREF: sub_407DD0+496↓j
.text:00407F25                                         ; sub_407DD0+49E↓j ...
.text:00407F25                 mov     esi, [esp+3Ch+var_28]
.text:00407F29                 movsx   eax, byte ptr [esi]
.text:00407F2C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00407F2F                 cmp     eax, 35h
.text:00407F32                 ja      short def_407F34 ; jumptable 00407F34 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00407F34                 jmp     ds:jpt_407F34[eax*4] ; switch jump
.text:00407F34 ; ---------------------------------------------------------------------------
.text:00407F3B                 align 4
.text:00407F3C jpt_407F34      dd offset loc_40805B, offset def_407F34, offset def_407F34
.text:00407F3C                                         ; DATA XREF: sub_407DD0+164↑r
.text:00407F3C                 dd offset loc_40806B, offset def_407F34, offset loc_40815C ; jump table for switch statement
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset def_407F34
.text:00407F3C                 dd offset loc_408199, offset def_407F34, offset loc_4081CB
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset loc_4080A5
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset def_407F34
.text:00407F3C                 dd offset loc_408209, offset def_407F34, offset def_407F34
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset loc_4080E2
.text:00407F3C                 dd offset loc_40811F, offset def_407F34, offset def_407F34
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset def_407F34
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset loc_408014
.text:00407F3C                 dd offset loc_408026, offset def_407F34, offset def_407F34
.text:00407F3C                 dd offset def_407F34, offset loc_40815C, offset def_407F34
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset loc_408199
.text:00407F3C                 dd offset def_407F34, offset loc_4081CB, offset def_407F34
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset def_407F34
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset loc_408209
.text:00407F3C                 dd offset def_407F34, offset def_407F34, offset loc_408246
.text:00408014 ; ---------------------------------------------------------------------------
.text:00408014
.text:00408014 loc_408014:                             ; CODE XREF: sub_407DD0+164↑j
.text:00408014                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:00408014                 mov     eax, [esp+3Ch+var_18] ; jumptable 00407F34 case 98
.text:00408018                 cmp     eax, 7FFFFFh
.text:0040801D                 ja      short loc_40804C
.text:0040801F                 shl     eax, 9
.text:00408022
.text:00408022 loc_408022:                             ; CODE XREF: sub_407DD0+299↓j
.text:00408022                                         ; sub_407DD0+484↓j
.text:00408022                 mov     [esp+3Ch+var_18], eax
.text:00408026
.text:00408026 loc_408026:                             ; CODE XREF: sub_407DD0+164↑j
.text:00408026                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:00408026                 xor     eax, eax        ; jumptable 00407F34 case 99
.text:00408028
.text:00408028 loc_408028:                             ; CODE XREF: sub_407DD0+289↓j
.text:00408028                                         ; sub_407DD0+2CA↓j ...
.text:00408028                 or      [esp+3Ch+var_1C], eax
.text:0040802C                 mov     ebp, [esp+3Ch+var_28]
.text:00408030                 mov     ecx, [esp+3Ch+var_24]
.text:00408034                 add     ebp, ecx
.text:00408036                 mov     [edi], ebp
.text:00408038                 cmp     byte ptr [ebp+0], 0
.text:0040803C                 jz      loc_407E97
.text:00408042                 or      [esp+3Ch+var_1C], 2
.text:00408047                 jmp     loc_407E97
.text:0040804C ; ---------------------------------------------------------------------------
.text:0040804C
.text:0040804C loc_40804C:                             ; CODE XREF: sub_407DD0+24D↑j
.text:0040804C                                         ; sub_407DD0+294↓j ...
.text:0040804C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00408054                 mov     eax, 1
.text:00408059                 jmp     short loc_408028
.text:0040805B ; ---------------------------------------------------------------------------
.text:0040805B
.text:0040805B loc_40805B:                             ; CODE XREF: sub_407DD0+164↑j
.text:0040805B                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:0040805B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00407F34 case 66
.text:0040805F                 cmp     eax, 3FFFFFh
.text:00408064                 ja      short loc_40804C
.text:00408066                 shl     eax, 0Ah
.text:00408069                 jmp     short loc_408022
.text:0040806B ; ---------------------------------------------------------------------------
.text:0040806B
.text:0040806B loc_40806B:                             ; CODE XREF: sub_407DD0+164↑j
.text:0040806B                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:0040806B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407F34 case 69
.text:0040806F                 xor     ebp, ebp
.text:00408071                 mov     esi, 5
.text:00408076
.text:00408076 loc_408076:                             ; CODE XREF: sub_407DD0+2C8↓j
.text:00408076                 xor     edx, edx
.text:00408078                 mov     eax, 0FFFFFFFFh
.text:0040807D                 div     ebx
.text:0040807F                 mov     edx, [ecx]
.text:00408081                 cmp     eax, edx
.text:00408083                 jnb     short loc_40809C
.text:00408085                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040808B                 mov     eax, 1
.text:00408090
.text:00408090 loc_408090:                             ; CODE XREF: sub_407DD0+2D3↓j
.text:00408090                 dec     esi
.text:00408091                 or      ebp, eax
.text:00408093                 cmp     esi, 0FFFFFFFFh
.text:00408096                 mov     eax, ebp
.text:00408098                 jnz     short loc_408076
.text:0040809A                 jmp     short loc_408028
.text:0040809C ; ---------------------------------------------------------------------------
.text:0040809C
.text:0040809C loc_40809C:                             ; CODE XREF: sub_407DD0+2B3↑j
.text:0040809C                 imul    edx, ebx
.text:0040809F                 xor     eax, eax
.text:004080A1                 mov     [ecx], edx
.text:004080A3                 jmp     short loc_408090
.text:004080A5 ; ---------------------------------------------------------------------------
.text:004080A5
.text:004080A5 loc_4080A5:                             ; CODE XREF: sub_407DD0+164↑j
.text:004080A5                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:004080A5                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407F34 case 80
.text:004080A9                 xor     ebp, ebp
.text:004080AB                 mov     esi, 4
.text:004080B0
.text:004080B0 loc_4080B0:                             ; CODE XREF: sub_407DD0+302↓j
.text:004080B0                 xor     edx, edx
.text:004080B2                 mov     eax, 0FFFFFFFFh
.text:004080B7                 div     ebx
.text:004080B9                 mov     edx, [ecx]
.text:004080BB                 cmp     eax, edx
.text:004080BD                 jnb     short loc_4080D9
.text:004080BF                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004080C5                 mov     eax, 1
.text:004080CA
.text:004080CA loc_4080CA:                             ; CODE XREF: sub_407DD0+310↓j
.text:004080CA                 dec     esi
.text:004080CB                 or      ebp, eax
.text:004080CD                 cmp     esi, 0FFFFFFFFh
.text:004080D0                 mov     eax, ebp
.text:004080D2                 jnz     short loc_4080B0
.text:004080D4                 jmp     loc_408028
.text:004080D9 ; ---------------------------------------------------------------------------
.text:004080D9
.text:004080D9 loc_4080D9:                             ; CODE XREF: sub_407DD0+2ED↑j
.text:004080D9                 imul    edx, ebx
.text:004080DC                 xor     eax, eax
.text:004080DE                 mov     [ecx], edx
.text:004080E0                 jmp     short loc_4080CA
.text:004080E2 ; ---------------------------------------------------------------------------
.text:004080E2
.text:004080E2 loc_4080E2:                             ; CODE XREF: sub_407DD0+164↑j
.text:004080E2                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:004080E2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407F34 case 89
.text:004080E6                 xor     ebp, ebp
.text:004080E8                 mov     esi, 7
.text:004080ED
.text:004080ED loc_4080ED:                             ; CODE XREF: sub_407DD0+33F↓j
.text:004080ED                 xor     edx, edx
.text:004080EF                 mov     eax, 0FFFFFFFFh
.text:004080F4                 div     ebx
.text:004080F6                 mov     edx, [ecx]
.text:004080F8                 cmp     eax, edx
.text:004080FA                 jnb     short loc_408116
.text:004080FC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00408102                 mov     eax, 1
.text:00408107
.text:00408107 loc_408107:                             ; CODE XREF: sub_407DD0+34D↓j
.text:00408107                 dec     esi
.text:00408108                 or      ebp, eax
.text:0040810A                 cmp     esi, 0FFFFFFFFh
.text:0040810D                 mov     eax, ebp
.text:0040810F                 jnz     short loc_4080ED
.text:00408111                 jmp     loc_408028
.text:00408116 ; ---------------------------------------------------------------------------
.text:00408116
.text:00408116 loc_408116:                             ; CODE XREF: sub_407DD0+32A↑j
.text:00408116                 imul    edx, ebx
.text:00408119                 xor     eax, eax
.text:0040811B                 mov     [ecx], edx
.text:0040811D                 jmp     short loc_408107
.text:0040811F ; ---------------------------------------------------------------------------
.text:0040811F
.text:0040811F loc_40811F:                             ; CODE XREF: sub_407DD0+164↑j
.text:0040811F                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:0040811F                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407F34 case 90
.text:00408123                 xor     ebp, ebp
.text:00408125                 mov     esi, 6
.text:0040812A
.text:0040812A loc_40812A:                             ; CODE XREF: sub_407DD0+37C↓j
.text:0040812A                 xor     edx, edx
.text:0040812C                 mov     eax, 0FFFFFFFFh
.text:00408131                 div     ebx
.text:00408133                 mov     edx, [ecx]
.text:00408135                 cmp     eax, edx
.text:00408137                 jnb     short loc_408153
.text:00408139                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040813F                 mov     eax, 1
.text:00408144
.text:00408144 loc_408144:                             ; CODE XREF: sub_407DD0+38A↓j
.text:00408144                 dec     esi
.text:00408145                 or      ebp, eax
.text:00408147                 cmp     esi, 0FFFFFFFFh
.text:0040814A                 mov     eax, ebp
.text:0040814C                 jnz     short loc_40812A
.text:0040814E                 jmp     loc_408028
.text:00408153 ; ---------------------------------------------------------------------------
.text:00408153
.text:00408153 loc_408153:                             ; CODE XREF: sub_407DD0+367↑j
.text:00408153                 imul    edx, ebx
.text:00408156                 xor     eax, eax
.text:00408158                 mov     [ecx], edx
.text:0040815A                 jmp     short loc_408144
.text:0040815C ; ---------------------------------------------------------------------------
.text:0040815C
.text:0040815C loc_40815C:                             ; CODE XREF: sub_407DD0+164↑j
.text:0040815C                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:0040815C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407F34 cases 71,103
.text:00408160                 xor     ebp, ebp
.text:00408162                 mov     esi, 2
.text:00408167
.text:00408167 loc_408167:                             ; CODE XREF: sub_407DD0+3B9↓j
.text:00408167                 xor     edx, edx
.text:00408169                 mov     eax, 0FFFFFFFFh
.text:0040816E                 div     ebx
.text:00408170                 mov     edx, [ecx]
.text:00408172                 cmp     eax, edx
.text:00408174                 jnb     short loc_408190
.text:00408176                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040817C                 mov     eax, 1
.text:00408181
.text:00408181 loc_408181:                             ; CODE XREF: sub_407DD0+3C7↓j
.text:00408181                 dec     esi
.text:00408182                 or      ebp, eax
.text:00408184                 cmp     esi, 0FFFFFFFFh
.text:00408187                 mov     eax, ebp
.text:00408189                 jnz     short loc_408167
.text:0040818B                 jmp     loc_408028
.text:00408190 ; ---------------------------------------------------------------------------
.text:00408190
.text:00408190 loc_408190:                             ; CODE XREF: sub_407DD0+3A4↑j
.text:00408190                 imul    edx, ebx
.text:00408193                 xor     eax, eax
.text:00408195                 mov     [ecx], edx
.text:00408197                 jmp     short loc_408181
.text:00408199 ; ---------------------------------------------------------------------------
.text:00408199
.text:00408199 loc_408199:                             ; CODE XREF: sub_407DD0+164↑j
.text:00408199                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:00408199                 xor     edx, edx        ; jumptable 00407F34 cases 75,107
.text:0040819B                 mov     eax, 0FFFFFFFFh
.text:004081A0                 div     ebx
.text:004081A2                 mov     edx, [esp+3Ch+var_18]
.text:004081A6                 cmp     eax, edx
.text:004081A8                 jnb     short loc_4081C0
.text:004081AA                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:004081B2                 mov     edx, 1
.text:004081B7
.text:004081B7 loc_4081B7:                             ; CODE XREF: sub_407DD0+3F9↓j
.text:004081B7                 xor     eax, eax
.text:004081B9                 or      eax, edx
.text:004081BB                 jmp     loc_408028
.text:004081C0 ; ---------------------------------------------------------------------------
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: sub_407DD0+3D8↑j
.text:004081C0                 imul    edx, ebx
.text:004081C3                 mov     [esp+3Ch+var_18], edx
.text:004081C7                 xor     edx, edx
.text:004081C9                 jmp     short loc_4081B7
.text:004081CB ; ---------------------------------------------------------------------------
.text:004081CB
.text:004081CB loc_4081CB:                             ; CODE XREF: sub_407DD0+164↑j
.text:004081CB                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:004081CB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407F34 cases 77,109
.text:004081CF                 xor     ebp, ebp
.text:004081D1                 mov     esi, 1
.text:004081D6
.text:004081D6 loc_4081D6:                             ; CODE XREF: sub_407DD0+42E↓j
.text:004081D6                 xor     edx, edx
.text:004081D8                 mov     eax, 0FFFFFFFFh
.text:004081DD                 div     ebx
.text:004081DF                 mov     edx, [ecx]
.text:004081E1                 cmp     eax, edx
.text:004081E3                 jnb     short loc_408200
.text:004081E5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004081EB                 mov     eax, 1
.text:004081F0
.text:004081F0 loc_4081F0:                             ; CODE XREF: sub_407DD0+437↓j
.text:004081F0                 dec     esi
.text:004081F1                 or      ebp, eax
.text:004081F3                 cmp     esi, 0FFFFFFFFh
.text:004081F6                 mov     eax, ebp
.text:004081F8                 jz      loc_408028
.text:004081FE                 jmp     short loc_4081D6
.text:00408200 ; ---------------------------------------------------------------------------
.text:00408200
.text:00408200 loc_408200:                             ; CODE XREF: sub_407DD0+413↑j
.text:00408200                 imul    edx, ebx
.text:00408203                 xor     eax, eax
.text:00408205                 mov     [ecx], edx
.text:00408207                 jmp     short loc_4081F0
.text:00408209 ; ---------------------------------------------------------------------------
.text:00408209
.text:00408209 loc_408209:                             ; CODE XREF: sub_407DD0+164↑j
.text:00408209                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:00408209                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407F34 cases 84,116
.text:0040820D                 xor     ebp, ebp
.text:0040820F                 mov     esi, 3
.text:00408214
.text:00408214 loc_408214:                             ; CODE XREF: sub_407DD0+466↓j
.text:00408214                 xor     edx, edx
.text:00408216                 mov     eax, 0FFFFFFFFh
.text:0040821B                 div     ebx
.text:0040821D                 mov     edx, [ecx]
.text:0040821F                 cmp     eax, edx
.text:00408221                 jnb     short loc_40823D
.text:00408223                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00408229                 mov     eax, 1
.text:0040822E
.text:0040822E loc_40822E:                             ; CODE XREF: sub_407DD0+474↓j
.text:0040822E                 dec     esi
.text:0040822F                 or      ebp, eax
.text:00408231                 cmp     esi, 0FFFFFFFFh
.text:00408234                 mov     eax, ebp
.text:00408236                 jnz     short loc_408214
.text:00408238                 jmp     loc_408028
.text:0040823D ; ---------------------------------------------------------------------------
.text:0040823D
.text:0040823D loc_40823D:                             ; CODE XREF: sub_407DD0+451↑j
.text:0040823D                 imul    edx, ebx
.text:00408240                 xor     eax, eax
.text:00408242                 mov     [ecx], edx
.text:00408244                 jmp     short loc_40822E
.text:00408246 ; ---------------------------------------------------------------------------
.text:00408246
.text:00408246 loc_408246:                             ; CODE XREF: sub_407DD0+164↑j
.text:00408246                                         ; DATA XREF: sub_407DD0:jpt_407F34↑o
.text:00408246                 mov     eax, [esp+3Ch+var_18] ; jumptable 00407F34 case 119
.text:0040824A                 test    eax, eax
.text:0040824C                 js      loc_40804C
.text:00408252                 add     eax, eax
.text:00408254                 jmp     loc_408022
.text:00408259 ; ---------------------------------------------------------------------------
.text:00408259
.text:00408259 loc_408259:                             ; CODE XREF: sub_407DD0+13D↑j
.text:00408259                                         ; sub_407DD0+14F↑j
.text:00408259                 mov     [esp+3Ch+var_24], 2
.text:00408261                 mov     ebx, 3E8h
.text:00408266                 jmp     loc_407F25
.text:0040826B ; ---------------------------------------------------------------------------
.text:0040826B
.text:0040826B loc_40826B:                             ; CODE XREF: sub_407DD0+146↑j
.text:0040826B                 cmp     eax, 69h ; 'i'
.text:0040826E                 jnz     loc_407F25
.text:00408274                 mov     edx, [esp+3Ch+var_28]
.text:00408278                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040827C                 jnz     loc_407F25
.text:00408282                 mov     [esp+3Ch+var_24], 3
.text:0040828A                 jmp     loc_407F25
.text:0040828A ; ---------------------------------------------------------------------------
.text:0040828F                 align 10h
.text:00408290
.text:00408290 loc_408290:                             ; CODE XREF: sub_407DD0+12A↑j
.text:00408290                 mov     eax, [edi]
.text:00408292                 mov     [esp+3Ch+var_28], eax
.text:00408296                 jmp     loc_407F25
.text:0040829B ; ---------------------------------------------------------------------------
.text:0040829B
.text:0040829B loc_40829B:                             ; CODE XREF: sub_407DD0+B0↑j
.text:0040829B                 call    _errno
.text:004082A0                 cmp     dword ptr [eax], 22h ; '"'
.text:004082A3                 jnz     short loc_4082B2
.text:004082A5                 mov     [esp+3Ch+var_1C], 1
.text:004082AD                 jmp     loc_407E86
.text:004082B2 ; ---------------------------------------------------------------------------
.text:004082B2
.text:004082B2 loc_4082B2:                             ; CODE XREF: sub_407DD0+4D3↑j
.text:004082B2                                         ; sub_407DD0+4F2↓j ...
.text:004082B2                 mov     eax, 4
.text:004082B7                 jmp     loc_407EA5
.text:004082BC ; ---------------------------------------------------------------------------
.text:004082BC
.text:004082BC loc_4082BC:                             ; CODE XREF: sub_407DD0+A1↑j
.text:004082BC                 mov     edx, [esp+3Ch+Str]
.text:004082C0                 test    edx, edx
.text:004082C2                 jz      short loc_4082B2
.text:004082C4                 movzx   eax, byte ptr [eax]
.text:004082C7                 test    al, al
.text:004082C9                 jz      short loc_4082B2
.text:004082CB                 mov     ebx, [esp+3Ch+Str]
.text:004082CF                 movsx   esi, al
.text:004082D2                 mov     [esp+3Ch+Type], esi ; Val
.text:004082D6                 mov     [esp+3Ch+C], ebx ; Str
.text:004082D9                 call    strchr
.text:004082DE                 test    eax, eax
.text:004082E0                 jz      short loc_4082B2
.text:004082E2                 mov     [esp+3Ch+var_18], 1
.text:004082EA                 jmp     loc_407E86
.text:004082EA ; ---------------------------------------------------------------------------
.text:004082EF                 align 10h
.text:004082F0
.text:004082F0 loc_4082F0:                             ; CODE XREF: sub_407DD0+4E↑j
.text:004082F0                 mov     eax, ds:_pctype
.text:004082F5                 mov     ecx, [eax]
.text:004082F7                 movzx   eax, word ptr [ecx+edx*2]
.text:004082FB                 and     eax, 8
.text:004082FE                 jmp     loc_407E34
.text:00408303 ; ---------------------------------------------------------------------------
.text:00408303
.text:00408303 loc_408303:                             ; CODE XREF: sub_407DD0+26↑j
.text:00408303                 lea     edi, [esp+3Ch+var_14]
.text:00408307                 jmp     loc_407DFC
.text:0040830C ; ---------------------------------------------------------------------------
.text:0040830C
.text:0040830C loc_40830C:                             ; CODE XREF: sub_407DD0+1A↑j
.text:0040830C                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00408314                 mov     [esp+3Ch+Type], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:0040831C                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00408323                 call    _assert
.text:00408323 sub_407DD0      endp
.text:00408323
.text:00408323 ; ---------------------------------------------------------------------------
.text:00408328                 align 20h
.text:00408340
.text:00408340 ; =============== S U B R O U T I N E =======================================
.text:00408340
.text:00408340
.text:00408340 ; int __cdecl sub_408340(int, int, char *, int, int)
.text:00408340 sub_408340      proc near               ; CODE XREF: sub_403760+3F↑p
.text:00408340
.text:00408340 var_1C          = dword ptr -1Ch
.text:00408340 var_18          = dword ptr -18h
.text:00408340 var_14          = dword ptr -14h
.text:00408340 var_10          = dword ptr -10h
.text:00408340 var_C           = dword ptr -0Ch
.text:00408340 var_8           = dword ptr -8
.text:00408340 var_4           = dword ptr -4
.text:00408340 arg_0           = dword ptr  4
.text:00408340 arg_4           = dword ptr  8
.text:00408340 arg_8           = dword ptr  0Ch
.text:00408340 arg_C           = dword ptr  10h
.text:00408340 arg_10          = dword ptr  14h
.text:00408340
.text:00408340                 sub     esp, 1Ch
.text:00408343                 mov     edx, [esp+1Ch+arg_C]
.text:00408347                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040834F                 mov     ecx, [esp+1Ch+arg_10]
.text:00408353                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040835B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040835F                 mov     edx, [esp+1Ch+arg_4]
.text:00408363                 mov     [esp+1Ch+var_C], ecx ; int
.text:00408367                 mov     ecx, [esp+1Ch+arg_8]
.text:0040836B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040836F                 mov     edx, [esp+1Ch+arg_0]
.text:00408373                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00408377                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040837A                 call    sub_406B60
.text:0040837F                 add     esp, 1Ch
.text:00408382                 retn
.text:00408382 sub_408340      endp
.text:00408382
.text:00408382 ; ---------------------------------------------------------------------------
.text:00408383                 align 10h
.text:00408390                 sub     esp, 2Ch
.text:00408393                 mov     edx, [esp+44h]
.text:00408397                 mov     dword ptr [esp+18h], 0
.text:0040839F                 mov     ecx, [esp+40h]
.text:004083A3                 mov     dword ptr [esp+14h], 0
.text:004083AB                 mov     [esp+1Ch], edx
.text:004083AF                 mov     edx, [esp+3Ch]
.text:004083B3                 mov     [esp+10h], ecx
.text:004083B7                 mov     ecx, [esp+38h]
.text:004083BB                 mov     [esp+0Ch], edx
.text:004083BF                 mov     edx, [esp+34h]
.text:004083C3                 mov     [esp+8], ecx
.text:004083C7                 mov     [esp+4], edx
.text:004083CB                 mov     edx, [esp+30h]
.text:004083CF                 mov     [esp], edx
.text:004083D2                 call    sub_405FD0
.text:004083D7                 add     esp, 2Ch
.text:004083DA                 retn
.text:004083DA ; ---------------------------------------------------------------------------
.text:004083DB                 align 10h
.text:004083E0                 sub     esp, 1Ch
.text:004083E3                 mov     edx, [esp+2Ch]
.text:004083E7                 mov     dword ptr [esp+18h], 0
.text:004083EF                 mov     ecx, [esp+30h]
.text:004083F3                 mov     dword ptr [esp+14h], 1
.text:004083FB                 mov     [esp+0Ch], edx
.text:004083FF                 mov     edx, [esp+24h]
.text:00408403                 mov     [esp+10h], ecx
.text:00408407                 mov     ecx, [esp+28h]
.text:0040840B                 mov     [esp+4], edx
.text:0040840F                 mov     edx, [esp+20h]
.text:00408413                 mov     [esp+8], ecx
.text:00408417                 mov     [esp], edx
.text:0040841A                 call    sub_406B60
.text:0040841F                 add     esp, 1Ch
.text:00408422                 retn
.text:00408422 ; ---------------------------------------------------------------------------
.text:00408423                 align 10h
.text:00408430                 sub     esp, 2Ch
.text:00408433                 mov     edx, [esp+44h]
.text:00408437                 mov     dword ptr [esp+18h], 0
.text:0040843F                 mov     ecx, [esp+40h]
.text:00408443                 mov     dword ptr [esp+14h], 1
.text:0040844B                 mov     [esp+1Ch], edx
.text:0040844F                 mov     edx, [esp+3Ch]
.text:00408453                 mov     [esp+10h], ecx
.text:00408457                 mov     ecx, [esp+38h]
.text:0040845B                 mov     [esp+0Ch], edx
.text:0040845F                 mov     edx, [esp+34h]
.text:00408463                 mov     [esp+8], ecx
.text:00408467                 mov     [esp+4], edx
.text:0040846B                 mov     edx, [esp+30h]
.text:0040846F                 mov     [esp], edx
.text:00408472                 call    sub_405FD0
.text:00408477                 add     esp, 2Ch
.text:0040847A                 retn
.text:0040847A ; ---------------------------------------------------------------------------
.text:0040847B                 align 10h
.text:00408480 aCoreutils530Sr_1 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00408480                                         ; DATA XREF: sub_4084F0+C79↓o
.text:004084A8                 align 20h
.text:004084C0 a0StrtolBaseStr_0 db '0 <= strtol_base && strtol_base <= 36',0
.text:004084C0                                         ; DATA XREF: sub_4084F0+C81↓o
.text:004084E6                 align 10h
.text:004084F0
.text:004084F0 ; =============== S U B R O U T I N E =======================================
.text:004084F0
.text:004084F0
.text:004084F0 ; int __cdecl sub_4084F0(int, int, int, int, char *Str)
.text:004084F0 sub_4084F0      proc near               ; CODE XREF: sub_403270+12A↑p
.text:004084F0                                         ; sub_403760+3C3↑p ...
.text:004084F0
.text:004084F0 C               = dword ptr -13Ch
.text:004084F0 Type            = dword ptr -138h
.text:004084F0 Radix           = dword ptr -134h
.text:004084F0 var_130         = dword ptr -130h
.text:004084F0 var_124         = dword ptr -124h
.text:004084F0 var_120         = dword ptr -120h
.text:004084F0 var_11C         = dword ptr -11Ch
.text:004084F0 var_118         = dword ptr -118h
.text:004084F0 var_114         = dword ptr -114h
.text:004084F0 var_110         = dword ptr -110h
.text:004084F0 var_10C         = dword ptr -10Ch
.text:004084F0 var_108         = dword ptr -108h
.text:004084F0 var_104         = dword ptr -104h
.text:004084F0 var_100         = dword ptr -100h
.text:004084F0 var_F8          = dword ptr -0F8h
.text:004084F0 var_F4          = dword ptr -0F4h
.text:004084F0 var_F0          = dword ptr -0F0h
.text:004084F0 var_EC          = dword ptr -0ECh
.text:004084F0 var_E8          = dword ptr -0E8h
.text:004084F0 var_E4          = dword ptr -0E4h
.text:004084F0 var_E0          = dword ptr -0E0h
.text:004084F0 var_D8          = dword ptr -0D8h
.text:004084F0 var_D4          = dword ptr -0D4h
.text:004084F0 var_D0          = dword ptr -0D0h
.text:004084F0 var_CC          = dword ptr -0CCh
.text:004084F0 var_C8          = dword ptr -0C8h
.text:004084F0 var_C4          = dword ptr -0C4h
.text:004084F0 var_C0          = dword ptr -0C0h
.text:004084F0 var_B8          = dword ptr -0B8h
.text:004084F0 var_B4          = dword ptr -0B4h
.text:004084F0 var_B0          = dword ptr -0B0h
.text:004084F0 var_AC          = dword ptr -0ACh
.text:004084F0 var_A8          = dword ptr -0A8h
.text:004084F0 var_A4          = dword ptr -0A4h
.text:004084F0 var_A0          = dword ptr -0A0h
.text:004084F0 var_98          = dword ptr -98h
.text:004084F0 var_94          = dword ptr -94h
.text:004084F0 var_90          = dword ptr -90h
.text:004084F0 var_8C          = dword ptr -8Ch
.text:004084F0 var_88          = dword ptr -88h
.text:004084F0 var_84          = dword ptr -84h
.text:004084F0 var_80          = dword ptr -80h
.text:004084F0 var_78          = dword ptr -78h
.text:004084F0 var_74          = dword ptr -74h
.text:004084F0 var_70          = dword ptr -70h
.text:004084F0 var_6C          = dword ptr -6Ch
.text:004084F0 var_68          = dword ptr -68h
.text:004084F0 var_64          = dword ptr -64h
.text:004084F0 var_60          = dword ptr -60h
.text:004084F0 var_5C          = dword ptr -5Ch
.text:004084F0 var_58          = dword ptr -58h
.text:004084F0 var_50          = dword ptr -50h
.text:004084F0 var_4C          = dword ptr -4Ch
.text:004084F0 var_48          = dword ptr -48h
.text:004084F0 var_44          = dword ptr -44h
.text:004084F0 var_40          = dword ptr -40h
.text:004084F0 var_3C          = dword ptr -3Ch
.text:004084F0 var_38          = dword ptr -38h
.text:004084F0 var_34          = dword ptr -34h
.text:004084F0 var_30          = dword ptr -30h
.text:004084F0 var_29          = byte ptr -29h
.text:004084F0 var_28          = dword ptr -28h
.text:004084F0 var_24          = dword ptr -24h
.text:004084F0 var_20          = dword ptr -20h
.text:004084F0 var_18          = byte ptr -18h
.text:004084F0 arg_0           = dword ptr  4
.text:004084F0 arg_4           = dword ptr  8
.text:004084F0 arg_8           = dword ptr  0Ch
.text:004084F0 arg_C           = dword ptr  10h
.text:004084F0 Str             = dword ptr  14h
.text:004084F0
.text:004084F0                 push    ebp
.text:004084F1                 xor     eax, eax
.text:004084F3                 push    edi
.text:004084F4                 push    esi
.text:004084F5                 push    ebx
.text:004084F6                 sub     esp, 12Ch
.text:004084FC                 mov     ebp, [esp+13Ch+arg_8]
.text:00408503                 mov     [esp+13Ch+var_28], eax
.text:0040850A                 mov     esi, [esp+13Ch+arg_0]
.text:00408511                 cmp     ebp, 24h ; '$'
.text:00408514                 ja      loc_409161
.text:0040851A                 mov     edi, [esp+13Ch+arg_4]
.text:00408521                 test    edi, edi
.text:00408523                 jz      loc_409155
.text:00408529
.text:00408529 loc_408529:                             ; CODE XREF: sub_4084F0+C6C↓j
.text:00408529                 movzx   edx, byte ptr [esi]
.text:0040852C                 mov     ebx, esi
.text:0040852E                 mov     [esp+13Ch+var_29], dl
.text:00408535                 lea     esi, [esi+0]
.text:00408539                 lea     edi, [edi+0]
.text:00408540
.text:00408540 loc_408540:                             ; CODE XREF: sub_4084F0+86↓j
.text:00408540                 movzx   edx, [esp+13Ch+var_29]
.text:00408548                 mov     ecx, ds:__mb_cur_max
.text:0040854E                 cmp     dword ptr [ecx], 1
.text:00408551                 jz      loc_409142
.text:00408557                 mov     [esp+13Ch+Type], 8 ; Type
.text:0040855F                 mov     [esp+13Ch+C], edx ; C
.text:00408562                 call    _isctype
.text:00408567
.text:00408567 loc_408567:                             ; CODE XREF: sub_4084F0+C60↓j
.text:00408567                 test    eax, eax
.text:00408569                 jz      short loc_408578
.text:0040856B                 inc     ebx
.text:0040856C                 movzx   eax, byte ptr [ebx]
.text:0040856F                 mov     [esp+13Ch+var_29], al
.text:00408576                 jmp     short loc_408540
.text:00408578 ; ---------------------------------------------------------------------------
.text:00408578
.text:00408578 loc_408578:                             ; CODE XREF: sub_4084F0+79↑j
.text:00408578                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00408580                 mov     eax, 4
.text:00408585                 jz      short loc_408602
.text:00408587                 call    _errno
.text:0040858C                 mov     dword ptr [eax], 0
.text:00408592                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00408596                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0040859A                 mov     [esp+13Ch+C], esi ; String
.text:0040859D                 call    _strtoull
.text:004085A2                 mov     [esp+13Ch+var_24], eax
.text:004085A9                 mov     eax, [edi]
.text:004085AB                 mov     [esp+13Ch+var_20], edx
.text:004085B2                 cmp     eax, esi
.text:004085B4                 jz      loc_4090FC
.text:004085BA                 call    _errno
.text:004085BF                 mov     ebx, [eax]
.text:004085C1                 test    ebx, ebx
.text:004085C3                 jnz     loc_4090D7
.text:004085C9
.text:004085C9 loc_4085C9:                             ; CODE XREF: sub_4084F0+BFD↓j
.text:004085C9                                         ; sub_4084F0+C4D↓j
.text:004085C9                 mov     ebp, [esp+13Ch+Str]
.text:004085D0                 test    ebp, ebp
.text:004085D2                 jz      loc_4090B8
.text:004085D8                 mov     ebx, [edi]
.text:004085DA                 movzx   eax, byte ptr [ebx]
.text:004085DD                 test    al, al
.text:004085DF                 jnz     short loc_40860D
.text:004085E1
.text:004085E1 loc_4085E1:                             ; CODE XREF: sub_4084F0+312↓j
.text:004085E1                                         ; sub_4084F0+320↓j
.text:004085E1                 mov     edx, [esp+13Ch+var_24]
.text:004085E8                 mov     edi, [esp+13Ch+var_20]
.text:004085EF                 mov     ebx, [esp+13Ch+arg_C]
.text:004085F6                 mov     [ebx], edx
.text:004085F8                 mov     [ebx+4], edi
.text:004085FB
.text:004085FB loc_4085FB:                             ; CODE XREF: sub_4084F0+BE2↓j
.text:004085FB                 mov     eax, [esp+13Ch+var_28]
.text:00408602
.text:00408602 loc_408602:                             ; CODE XREF: sub_4084F0+95↑j
.text:00408602                                         ; sub_4084F0+16C↓j ...
.text:00408602                 add     esp, 12Ch
.text:00408608                 pop     ebx
.text:00408609                 pop     esi
.text:0040860A                 pop     edi
.text:0040860B                 pop     ebp
.text:0040860C                 retn
.text:0040860D ; ---------------------------------------------------------------------------
.text:0040860D
.text:0040860D loc_40860D:                             ; CODE XREF: sub_4084F0+EF↑j
.text:0040860D                 mov     esi, [esp+13Ch+Str]
.text:00408614                 mov     ecx, 1
.text:00408619                 movsx   ebp, al
.text:0040861C                 mov     [esp+13Ch+var_30], ecx
.text:00408623                 mov     ebx, 400h
.text:00408628                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040862C                 mov     [esp+13Ch+C], esi ; Str
.text:0040862F                 call    strchr
.text:00408634                 test    eax, eax
.text:00408636                 jnz     short loc_40865E
.text:00408638
.text:00408638 def_4086A9:                             ; CODE XREF: sub_4084F0+1B7↓j
.text:00408638                                         ; sub_4084F0+1B9↓j
.text:00408638                                         ; DATA XREF: ...
.text:00408638                 mov     eax, [esp+13Ch+var_28] ; jumptable 004086A9 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0040863F                 mov     esi, [esp+13Ch+var_24]
.text:00408646                 mov     ebp, [esp+13Ch+var_20]
.text:0040864D                 mov     edi, [esp+13Ch+arg_C]
.text:00408654                 or      eax, 2
.text:00408657                 mov     [edi], esi
.text:00408659                 mov     [edi+4], ebp
.text:0040865C                 jmp     short loc_408602
.text:0040865E ; ---------------------------------------------------------------------------
.text:0040865E
.text:0040865E loc_40865E:                             ; CODE XREF: sub_4084F0+146↑j
.text:0040865E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00408666                 mov     edx, [esp+13Ch+Str]
.text:0040866D                 mov     [esp+13Ch+C], edx ; Str
.text:00408670                 call    strchr
.text:00408675                 test    eax, eax
.text:00408677                 jz      loc_4090B1
.text:0040867D                 mov     edx, [edi]
.text:0040867F                 movsx   eax, byte ptr [edx+1]
.text:00408683                 cmp     eax, 44h ; 'D'
.text:00408686                 jz      loc_409077
.text:0040868C                 cmp     eax, 44h ; 'D'
.text:0040868F                 jg      loc_40908D
.text:00408695                 cmp     eax, 42h ; 'B'
.text:00408698                 jz      loc_409077
.text:0040869E
.text:0040869E loc_40869E:                             ; CODE XREF: sub_4084F0+B98↓j
.text:0040869E                                         ; sub_4084F0+BA0↓j ...
.text:0040869E                 movsx   eax, byte ptr [edx]
.text:004086A1                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:004086A4                 cmp     eax, 35h
.text:004086A7                 ja      short def_4086A9 ; jumptable 004086A9 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004086A9                 jmp     ds:jpt_4086A9[eax*4] ; switch jump
.text:004086A9 ; ---------------------------------------------------------------------------
.text:004086B0 jpt_4086A9      dd offset loc_408834, offset def_4086A9, offset def_4086A9
.text:004086B0                                         ; DATA XREF: sub_4084F0+1B9↑r
.text:004086B0                 dd offset loc_40888E, offset def_4086A9, offset loc_408C57 ; jump table for switch statement
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset def_4086A9
.text:004086B0                 dd offset loc_408D66, offset def_4086A9, offset loc_408E2F
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset loc_40899D
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset def_4086A9
.text:004086B0                 dd offset loc_408F3E, offset def_4086A9, offset def_4086A9
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset loc_408AAC
.text:004086B0                 dd offset loc_408B7E, offset def_4086A9, offset def_4086A9
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset def_4086A9
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset loc_408788
.text:004086B0                 dd offset loc_408C50, offset def_4086A9, offset def_4086A9
.text:004086B0                 dd offset def_4086A9, offset loc_408C57, offset def_4086A9
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset loc_408D66
.text:004086B0                 dd offset def_4086A9, offset loc_408E2F, offset def_4086A9
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset def_4086A9
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset loc_408F3E
.text:004086B0                 dd offset def_4086A9, offset def_4086A9, offset loc_409017
.text:00408788 ; ---------------------------------------------------------------------------
.text:00408788
.text:00408788 loc_408788:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408788                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408788                 mov     [esp+13Ch+Radix], 200h ; jumptable 004086A9 case 98
.text:00408790                 lea     ebp, [esp+13Ch+var_24]
.text:00408797                 mov     [esp+13Ch+var_130], 0
.text:0040879F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004087A6                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004087AE                 call    sub_412C30
.text:004087B3                 mov     esi, [esp+13Ch+var_20]
.text:004087BA                 mov     ecx, [esp+13Ch+var_24]
.text:004087C1                 cmp     edx, esi
.text:004087C3                 ja      short loc_4087CB
.text:004087C5                 jb      short loc_408815
.text:004087C7                 cmp     eax, ecx
.text:004087C9                 jb      short loc_408815
.text:004087CB
.text:004087CB loc_4087CB:                             ; CODE XREF: sub_4084F0+2D3↑j
.text:004087CB                 mov     esi, [ebp+0]
.text:004087CE                 mov     eax, 200h
.text:004087D3                 mov     ebx, [ebp+4]
.text:004087D6                 mul     esi
.text:004087D8                 mov     ecx, ebx
.text:004087DA                 shl     ecx, 9
.text:004087DD
.text:004087DD loc_4087DD:                             ; CODE XREF: sub_4084F0+399↓j
.text:004087DD                 mov     esi, edx
.text:004087DF                 lea     edx, [ecx+esi]
.text:004087E2
.text:004087E2 loc_4087E2:                             ; CODE XREF: sub_4084F0+B82↓j
.text:004087E2                 mov     [ebp+0], eax
.text:004087E5                 xor     eax, eax
.text:004087E7                 mov     [ebp+4], edx
.text:004087EA
.text:004087EA loc_4087EA:                             ; CODE XREF: sub_4084F0+342↓j
.text:004087EA                                         ; sub_4084F0+459↓j ...
.text:004087EA                 mov     edx, [edi]
.text:004087EC
.text:004087EC loc_4087EC:                             ; CODE XREF: sub_4084F0+762↓j
.text:004087EC                 or      [esp+13Ch+var_28], eax
.text:004087F3                 mov     eax, [esp+13Ch+var_30]
.text:004087FA                 lea     ecx, [eax+edx]
.text:004087FD                 mov     [edi], ecx
.text:004087FF                 cmp     byte ptr [ecx], 0
.text:00408802                 jz      loc_4085E1
.text:00408808                 or      [esp+13Ch+var_28], 2
.text:00408810                 jmp     loc_4085E1
.text:00408815 ; ---------------------------------------------------------------------------
.text:00408815
.text:00408815 loc_408815:                             ; CODE XREF: sub_4084F0+2D5↑j
.text:00408815                                         ; sub_4084F0+2D9↑j ...
.text:00408815                 mov     edx, 0FFFFFFFFh
.text:0040881A                 mov     ebp, 0FFFFFFFFh
.text:0040881F                 mov     eax, 1
.text:00408824                 mov     [esp+13Ch+var_24], edx
.text:0040882B                 mov     [esp+13Ch+var_20], ebp
.text:00408832                 jmp     short loc_4087EA
.text:00408834 ; ---------------------------------------------------------------------------
.text:00408834
.text:00408834 loc_408834:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408834                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408834                 mov     [esp+13Ch+Radix], 400h ; jumptable 004086A9 case 66
.text:0040883C                 lea     ebp, [esp+13Ch+var_24]
.text:00408843                 mov     [esp+13Ch+var_130], 0
.text:0040884B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408852                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040885A                 call    sub_412C30
.text:0040885F                 mov     esi, [esp+13Ch+var_20]
.text:00408866                 mov     ecx, [esp+13Ch+var_24]
.text:0040886D                 cmp     edx, esi
.text:0040886F                 ja      short loc_408877
.text:00408871                 jb      short loc_408815
.text:00408873                 cmp     eax, ecx
.text:00408875                 jb      short loc_408815
.text:00408877
.text:00408877 loc_408877:                             ; CODE XREF: sub_4084F0+37F↑j
.text:00408877                 mov     esi, [ebp+0]
.text:0040887A                 mov     eax, 400h
.text:0040887F                 mov     ebx, [ebp+4]
.text:00408882                 mul     esi
.text:00408884                 mov     ecx, ebx
.text:00408886                 shl     ecx, 0Ah
.text:00408889                 jmp     loc_4087DD
.text:0040888E ; ---------------------------------------------------------------------------
.text:0040888E
.text:0040888E loc_40888E:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:0040888E                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:0040888E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 004086A9 case 69
.text:00408895                 mov     ecx, ebx
.text:00408897                 xor     ebp, ebp
.text:00408899                 mov     [esp+13Ch+var_34], ebp
.text:004088A0                 sar     ecx, 1Fh
.text:004088A3                 mov     ebx, [esp+13Ch+var_3C]
.text:004088AA                 mov     [esp+13Ch+var_38], ecx
.text:004088B1                 lea     esi, [esp+13Ch+var_24]
.text:004088B8                 mov     ebp, 5
.text:004088BD                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004088C4                 mov     edx, [esp+13Ch+var_38]
.text:004088CB                 mov     [esp+13Ch+Radix], ebx
.text:004088CF                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004088D7                 mov     [esp+13Ch+var_130], edx
.text:004088DB                 call    sub_412C30
.text:004088E0                 mov     [esp+13Ch+var_44], eax
.text:004088E7                 mov     [esp+13Ch+var_40], edx
.text:004088EE
.text:004088EE loc_4088EE:                             ; CODE XREF: sub_4084F0+450↓j
.text:004088EE                 mov     ebx, [esi+4]
.text:004088F1                 mov     eax, [esi]
.text:004088F3                 cmp     [esp+13Ch+var_40], ebx
.text:004088FA                 mov     [esp+13Ch+var_48], ebx
.text:00408901                 mov     [esp+13Ch+var_4C], eax
.text:00408908                 ja      short loc_40894E
.text:0040890A                 mov     ecx, [esp+13Ch+var_48]
.text:00408911                 cmp     [esp+13Ch+var_40], ecx
.text:00408918                 jb      short loc_408923
.text:0040891A                 cmp     [esp+13Ch+var_44], eax
.text:00408921                 jnb     short loc_40894E
.text:00408923
.text:00408923 loc_408923:                             ; CODE XREF: sub_4084F0+428↑j
.text:00408923                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408929                 mov     eax, 1
.text:0040892E                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408935
.text:00408935 loc_408935:                             ; CODE XREF: sub_4084F0+4AB↓j
.text:00408935                 or      [esp+13Ch+var_34], eax
.text:0040893C                 dec     ebp
.text:0040893D                 cmp     ebp, 0FFFFFFFFh
.text:00408940                 jnz     short loc_4088EE
.text:00408942                 mov     eax, [esp+13Ch+var_34]
.text:00408949                 jmp     loc_4087EA
.text:0040894E ; ---------------------------------------------------------------------------
.text:0040894E
.text:0040894E loc_40894E:                             ; CODE XREF: sub_4084F0+418↑j
.text:0040894E                                         ; sub_4084F0+431↑j
.text:0040894E                 mov     ecx, [esp+13Ch+var_38]
.text:00408955                 mov     eax, [esp+13Ch+var_4C]
.text:0040895C                 mov     ebx, [esp+13Ch+var_4C]
.text:00408963                 mul     [esp+13Ch+var_3C]
.text:0040896A                 imul    ebx, ecx
.text:0040896D                 mov     ecx, edx
.text:0040896F                 mov     [esp+13Ch+var_124], eax
.text:00408973                 add     ecx, ebx
.text:00408975                 mov     edx, [esp+13Ch+var_3C]
.text:0040897C                 mov     ebx, [esp+13Ch+var_48]
.text:00408983                 imul    edx, ebx
.text:00408986                 mov     ebx, [esp+13Ch+var_124]
.text:0040898A                 mov     [esi], ebx
.text:0040898C                 add     ecx, edx
.text:0040898E                 mov     [esp+13Ch+var_120], ecx
.text:00408992                 mov     eax, [esp+13Ch+var_120]
.text:00408996                 mov     [esi+4], eax
.text:00408999                 xor     eax, eax
.text:0040899B                 jmp     short loc_408935
.text:0040899D ; ---------------------------------------------------------------------------
.text:0040899D
.text:0040899D loc_40899D:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:0040899D                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:0040899D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 004086A9 case 80
.text:004089A4                 mov     eax, ebx
.text:004089A6                 xor     ebp, ebp
.text:004089A8                 mov     [esp+13Ch+var_98], ebp
.text:004089AF                 sar     eax, 1Fh
.text:004089B2                 mov     edx, [esp+13Ch+var_A4]
.text:004089B9                 mov     [esp+13Ch+var_A0], eax
.text:004089C0                 lea     esi, [esp+13Ch+var_24]
.text:004089C7                 mov     ebp, 4
.text:004089CC                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004089D3                 mov     ebx, [esp+13Ch+var_A0]
.text:004089DA                 mov     [esp+13Ch+Radix], edx
.text:004089DE                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004089E6                 mov     [esp+13Ch+var_130], ebx
.text:004089EA                 call    sub_412C30
.text:004089EF                 mov     [esp+13Ch+var_AC], eax
.text:004089F6                 mov     [esp+13Ch+var_A8], edx
.text:004089FD
.text:004089FD loc_4089FD:                             ; CODE XREF: sub_4084F0+55F↓j
.text:004089FD                 mov     ebx, [esi+4]
.text:00408A00                 mov     edx, [esi]
.text:00408A02                 cmp     [esp+13Ch+var_A8], ebx
.text:00408A09                 mov     [esp+13Ch+var_B0], ebx
.text:00408A10                 mov     [esp+13Ch+var_B4], edx
.text:00408A17                 ja      short loc_408A5D
.text:00408A19                 mov     eax, [esp+13Ch+var_B0]
.text:00408A20                 cmp     [esp+13Ch+var_A8], eax
.text:00408A27                 jb      short loc_408A32
.text:00408A29                 cmp     [esp+13Ch+var_AC], edx
.text:00408A30                 jnb     short loc_408A5D
.text:00408A32
.text:00408A32 loc_408A32:                             ; CODE XREF: sub_4084F0+537↑j
.text:00408A32                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408A38                 mov     eax, 1
.text:00408A3D                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408A44
.text:00408A44 loc_408A44:                             ; CODE XREF: sub_4084F0+5BA↓j
.text:00408A44                 or      [esp+13Ch+var_98], eax
.text:00408A4B                 dec     ebp
.text:00408A4C                 cmp     ebp, 0FFFFFFFFh
.text:00408A4F                 jnz     short loc_4089FD
.text:00408A51                 mov     eax, [esp+13Ch+var_98]
.text:00408A58                 jmp     loc_4087EA
.text:00408A5D ; ---------------------------------------------------------------------------
.text:00408A5D
.text:00408A5D loc_408A5D:                             ; CODE XREF: sub_4084F0+527↑j
.text:00408A5D                                         ; sub_4084F0+540↑j
.text:00408A5D                 mov     ecx, [esp+13Ch+var_A0]
.text:00408A64                 mov     eax, [esp+13Ch+var_B4]
.text:00408A6B                 mov     ebx, [esp+13Ch+var_B4]
.text:00408A72                 mul     [esp+13Ch+var_A4]
.text:00408A79                 imul    ebx, ecx
.text:00408A7C                 mov     ecx, edx
.text:00408A7E                 mov     [esp+13Ch+var_124], eax
.text:00408A82                 add     ecx, ebx
.text:00408A84                 mov     edx, [esp+13Ch+var_A4]
.text:00408A8B                 mov     ebx, [esp+13Ch+var_B0]
.text:00408A92                 xor     eax, eax
.text:00408A94                 imul    edx, ebx
.text:00408A97                 add     ecx, edx
.text:00408A99                 mov     [esp+13Ch+var_120], ecx
.text:00408A9D                 mov     ebx, [esp+13Ch+var_120]
.text:00408AA1                 mov     ecx, [esp+13Ch+var_124]
.text:00408AA5                 mov     [esi+4], ebx
.text:00408AA8                 mov     [esi], ecx
.text:00408AAA                 jmp     short loc_408A44
.text:00408AAC ; ---------------------------------------------------------------------------
.text:00408AAC
.text:00408AAC loc_408AAC:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408AAC                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408AAC                 mov     [esp+13Ch+var_E4], ebx ; jumptable 004086A9 case 89
.text:00408AB0                 mov     eax, ebx
.text:00408AB2                 lea     esi, [esp+13Ch+var_24]
.text:00408AB9                 mov     [esp+13Ch+var_D8], 0
.text:00408AC1                 sar     eax, 1Fh
.text:00408AC4                 mov     edx, [esp+13Ch+var_E4]
.text:00408AC8                 mov     [esp+13Ch+var_E0], eax
.text:00408ACC                 mov     ebp, 7
.text:00408AD1                 mov     ebx, [esp+13Ch+var_E0]
.text:00408AD5                 mov     [esp+13Ch+Radix], edx
.text:00408AD9                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408AE0                 mov     [esp+13Ch+var_130], ebx
.text:00408AE4                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408AEC                 call    sub_412C30
.text:00408AF1                 mov     [esp+13Ch+var_EC], eax
.text:00408AF5                 mov     [esp+13Ch+var_E8], edx
.text:00408AF9
.text:00408AF9 loc_408AF9:                             ; CODE XREF: sub_4084F0+646↓j
.text:00408AF9                 mov     ebx, [esi+4]
.text:00408AFC                 mov     edx, [esi]
.text:00408AFE                 cmp     [esp+13Ch+var_E8], ebx
.text:00408B02                 mov     [esp+13Ch+var_F0], ebx
.text:00408B06                 mov     [esp+13Ch+var_F4], edx
.text:00408B0A                 ja      short loc_408B41
.text:00408B0C                 mov     eax, [esp+13Ch+var_F0]
.text:00408B10                 cmp     [esp+13Ch+var_E8], eax
.text:00408B14                 jb      short loc_408B1C
.text:00408B16                 cmp     [esp+13Ch+var_EC], edx
.text:00408B1A                 jnb     short loc_408B41
.text:00408B1C
.text:00408B1C loc_408B1C:                             ; CODE XREF: sub_4084F0+624↑j
.text:00408B1C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408B22                 mov     eax, 1
.text:00408B27                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408B2E
.text:00408B2E loc_408B2E:                             ; CODE XREF: sub_4084F0+68C↓j
.text:00408B2E                 or      [esp+13Ch+var_D8], eax
.text:00408B32                 dec     ebp
.text:00408B33                 cmp     ebp, 0FFFFFFFFh
.text:00408B36                 jnz     short loc_408AF9
.text:00408B38                 mov     eax, [esp+13Ch+var_D8]
.text:00408B3C                 jmp     loc_4087EA
.text:00408B41 ; ---------------------------------------------------------------------------
.text:00408B41
.text:00408B41 loc_408B41:                             ; CODE XREF: sub_4084F0+61A↑j
.text:00408B41                                         ; sub_4084F0+62A↑j
.text:00408B41                 mov     ecx, [esp+13Ch+var_E0]
.text:00408B45                 mov     eax, [esp+13Ch+var_F4]
.text:00408B49                 mov     ebx, [esp+13Ch+var_F4]
.text:00408B4D                 mul     [esp+13Ch+var_E4]
.text:00408B51                 imul    ebx, ecx
.text:00408B54                 mov     ecx, edx
.text:00408B56                 mov     [esp+13Ch+var_124], eax
.text:00408B5A                 add     ecx, ebx
.text:00408B5C                 mov     edx, [esp+13Ch+var_E4]
.text:00408B60                 mov     ebx, [esp+13Ch+var_F0]
.text:00408B64                 xor     eax, eax
.text:00408B66                 imul    edx, ebx
.text:00408B69                 add     ecx, edx
.text:00408B6B                 mov     [esp+13Ch+var_120], ecx
.text:00408B6F                 mov     ebx, [esp+13Ch+var_120]
.text:00408B73                 mov     ecx, [esp+13Ch+var_124]
.text:00408B77                 mov     [esi+4], ebx
.text:00408B7A                 mov     [esi], ecx
.text:00408B7C                 jmp     short loc_408B2E
.text:00408B7E ; ---------------------------------------------------------------------------
.text:00408B7E
.text:00408B7E loc_408B7E:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408B7E                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408B7E                 mov     [esp+13Ch+var_104], ebx ; jumptable 004086A9 case 90
.text:00408B82                 mov     eax, ebx
.text:00408B84                 lea     esi, [esp+13Ch+var_24]
.text:00408B8B                 mov     [esp+13Ch+var_F8], 0
.text:00408B93                 sar     eax, 1Fh
.text:00408B96                 mov     edx, [esp+13Ch+var_104]
.text:00408B9A                 mov     [esp+13Ch+var_100], eax
.text:00408B9E                 mov     ebp, 6
.text:00408BA3                 mov     ebx, [esp+13Ch+var_100]
.text:00408BA7                 mov     [esp+13Ch+Radix], edx
.text:00408BAB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408BB2                 mov     [esp+13Ch+var_130], ebx
.text:00408BB6                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408BBE                 call    sub_412C30
.text:00408BC3                 mov     [esp+13Ch+var_10C], eax
.text:00408BC7                 mov     [esp+13Ch+var_108], edx
.text:00408BCB
.text:00408BCB loc_408BCB:                             ; CODE XREF: sub_4084F0+718↓j
.text:00408BCB                 mov     ebx, [esi+4]
.text:00408BCE                 mov     edx, [esi]
.text:00408BD0                 cmp     [esp+13Ch+var_108], ebx
.text:00408BD4                 mov     [esp+13Ch+var_110], ebx
.text:00408BD8                 mov     [esp+13Ch+var_114], edx
.text:00408BDC                 ja      short loc_408C13
.text:00408BDE                 mov     eax, [esp+13Ch+var_110]
.text:00408BE2                 cmp     [esp+13Ch+var_108], eax
.text:00408BE6                 jb      short loc_408BEE
.text:00408BE8                 cmp     [esp+13Ch+var_10C], edx
.text:00408BEC                 jnb     short loc_408C13
.text:00408BEE
.text:00408BEE loc_408BEE:                             ; CODE XREF: sub_4084F0+6F6↑j
.text:00408BEE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408BF4                 mov     eax, 1
.text:00408BF9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408C00
.text:00408C00 loc_408C00:                             ; CODE XREF: sub_4084F0+75E↓j
.text:00408C00                 or      [esp+13Ch+var_F8], eax
.text:00408C04                 dec     ebp
.text:00408C05                 cmp     ebp, 0FFFFFFFFh
.text:00408C08                 jnz     short loc_408BCB
.text:00408C0A                 mov     eax, [esp+13Ch+var_F8]
.text:00408C0E                 jmp     loc_4087EA
.text:00408C13 ; ---------------------------------------------------------------------------
.text:00408C13
.text:00408C13 loc_408C13:                             ; CODE XREF: sub_4084F0+6EC↑j
.text:00408C13                                         ; sub_4084F0+6FC↑j
.text:00408C13                 mov     eax, [esp+13Ch+var_114]
.text:00408C17                 mov     ebx, [esp+13Ch+var_100]
.text:00408C1B                 mul     [esp+13Ch+var_104]
.text:00408C1F                 mov     ecx, edx
.text:00408C21                 mov     edx, [esp+13Ch+var_104]
.text:00408C25                 mov     [esp+13Ch+var_124], eax
.text:00408C29                 mov     eax, [esp+13Ch+var_114]
.text:00408C2D                 imul    eax, ebx
.text:00408C30                 mov     ebx, [esp+13Ch+var_110]
.text:00408C34                 imul    edx, ebx
.text:00408C37                 add     ecx, eax
.text:00408C39                 xor     eax, eax
.text:00408C3B                 add     ecx, edx
.text:00408C3D                 mov     [esp+13Ch+var_120], ecx
.text:00408C41                 mov     ebx, [esp+13Ch+var_120]
.text:00408C45                 mov     ecx, [esp+13Ch+var_124]
.text:00408C49                 mov     [esi+4], ebx
.text:00408C4C                 mov     [esi], ecx
.text:00408C4E                 jmp     short loc_408C00
.text:00408C50 ; ---------------------------------------------------------------------------
.text:00408C50
.text:00408C50 loc_408C50:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408C50                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408C50                 xor     eax, eax        ; jumptable 004086A9 case 99
.text:00408C52                 jmp     loc_4087EC
.text:00408C57 ; ---------------------------------------------------------------------------
.text:00408C57
.text:00408C57 loc_408C57:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408C57                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408C57                 mov     [esp+13Ch+var_5C], ebx ; jumptable 004086A9 cases 71,103
.text:00408C5E                 mov     eax, ebx
.text:00408C60                 xor     ebp, ebp
.text:00408C62                 mov     [esp+13Ch+var_50], ebp
.text:00408C69                 sar     eax, 1Fh
.text:00408C6C                 mov     edx, [esp+13Ch+var_5C]
.text:00408C73                 mov     [esp+13Ch+var_58], eax
.text:00408C7A                 lea     esi, [esp+13Ch+var_24]
.text:00408C81                 mov     ebp, 2
.text:00408C86                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408C8D                 mov     ebx, [esp+13Ch+var_58]
.text:00408C94                 mov     [esp+13Ch+Radix], edx
.text:00408C98                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408CA0                 mov     [esp+13Ch+var_130], ebx
.text:00408CA4                 call    sub_412C30
.text:00408CA9                 mov     [esp+13Ch+var_64], eax
.text:00408CB0                 mov     [esp+13Ch+var_60], edx
.text:00408CB7
.text:00408CB7 loc_408CB7:                             ; CODE XREF: sub_4084F0+819↓j
.text:00408CB7                 mov     ebx, [esi+4]
.text:00408CBA                 mov     edx, [esi]
.text:00408CBC                 cmp     [esp+13Ch+var_60], ebx
.text:00408CC3                 mov     [esp+13Ch+var_68], ebx
.text:00408CCA                 mov     [esp+13Ch+var_6C], edx
.text:00408CD1                 ja      short loc_408D17
.text:00408CD3                 mov     eax, [esp+13Ch+var_68]
.text:00408CDA                 cmp     [esp+13Ch+var_60], eax
.text:00408CE1                 jb      short loc_408CEC
.text:00408CE3                 cmp     [esp+13Ch+var_64], edx
.text:00408CEA                 jnb     short loc_408D17
.text:00408CEC
.text:00408CEC loc_408CEC:                             ; CODE XREF: sub_4084F0+7F1↑j
.text:00408CEC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408CF2                 mov     eax, 1
.text:00408CF7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408CFE
.text:00408CFE loc_408CFE:                             ; CODE XREF: sub_4084F0+874↓j
.text:00408CFE                 or      [esp+13Ch+var_50], eax
.text:00408D05                 dec     ebp
.text:00408D06                 cmp     ebp, 0FFFFFFFFh
.text:00408D09                 jnz     short loc_408CB7
.text:00408D0B                 mov     eax, [esp+13Ch+var_50]
.text:00408D12                 jmp     loc_4087EA
.text:00408D17 ; ---------------------------------------------------------------------------
.text:00408D17
.text:00408D17 loc_408D17:                             ; CODE XREF: sub_4084F0+7E1↑j
.text:00408D17                                         ; sub_4084F0+7FA↑j
.text:00408D17                 mov     ecx, [esp+13Ch+var_58]
.text:00408D1E                 mov     eax, [esp+13Ch+var_6C]
.text:00408D25                 mov     ebx, [esp+13Ch+var_6C]
.text:00408D2C                 mul     [esp+13Ch+var_5C]
.text:00408D33                 imul    ebx, ecx
.text:00408D36                 mov     ecx, edx
.text:00408D38                 mov     [esp+13Ch+var_124], eax
.text:00408D3C                 add     ecx, ebx
.text:00408D3E                 mov     edx, [esp+13Ch+var_5C]
.text:00408D45                 mov     ebx, [esp+13Ch+var_68]
.text:00408D4C                 xor     eax, eax
.text:00408D4E                 imul    edx, ebx
.text:00408D51                 add     ecx, edx
.text:00408D53                 mov     [esp+13Ch+var_120], ecx
.text:00408D57                 mov     ebx, [esp+13Ch+var_120]
.text:00408D5B                 mov     ecx, [esp+13Ch+var_124]
.text:00408D5F                 mov     [esi+4], ebx
.text:00408D62                 mov     [esi], ecx
.text:00408D64                 jmp     short loc_408CFE
.text:00408D66 ; ---------------------------------------------------------------------------
.text:00408D66
.text:00408D66 loc_408D66:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408D66                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408D66                 mov     [esp+13Ch+var_74], ebx ; jumptable 004086A9 cases 75,107
.text:00408D6D                 mov     eax, ebx
.text:00408D6F                 lea     esi, [esp+13Ch+var_24]
.text:00408D76                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408D7D                 sar     eax, 1Fh
.text:00408D80                 mov     edx, [esp+13Ch+var_74]
.text:00408D87                 mov     [esp+13Ch+var_70], eax
.text:00408D8E                 mov     ebx, [esp+13Ch+var_70]
.text:00408D95                 mov     [esp+13Ch+Radix], edx
.text:00408D99                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408DA1                 mov     [esp+13Ch+var_130], ebx
.text:00408DA5                 call    sub_412C30
.text:00408DAA                 mov     ebp, [esp+13Ch+var_20]
.text:00408DB1                 mov     ecx, [esp+13Ch+var_24]
.text:00408DB8                 cmp     edx, ebp
.text:00408DBA                 mov     [esp+13Ch+var_11C], ecx
.text:00408DBE                 mov     [esp+13Ch+var_118], ebp
.text:00408DC2                 ja      short loc_408DE9
.text:00408DC4                 cmp     edx, [esp+13Ch+var_118]
.text:00408DC8                 jb      short loc_408DCE
.text:00408DCA                 cmp     eax, ecx
.text:00408DCC                 jnb     short loc_408DE9
.text:00408DCE
.text:00408DCE loc_408DCE:                             ; CODE XREF: sub_4084F0+8D8↑j
.text:00408DCE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408DD4                 mov     edx, 1
.text:00408DD9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408DE0
.text:00408DE0 loc_408DE0:                             ; CODE XREF: sub_4084F0+93D↓j
.text:00408DE0                 xor     eax, eax
.text:00408DE2                 or      eax, edx
.text:00408DE4                 jmp     loc_4087EA
.text:00408DE9 ; ---------------------------------------------------------------------------
.text:00408DE9
.text:00408DE9 loc_408DE9:                             ; CODE XREF: sub_4084F0+8D2↑j
.text:00408DE9                                         ; sub_4084F0+8DC↑j
.text:00408DE9                 mov     eax, [esp+13Ch+var_11C]
.text:00408DED                 mov     ebp, [esp+13Ch+var_11C]
.text:00408DF1                 mov     ebx, [esp+13Ch+var_118]
.text:00408DF5                 mul     [esp+13Ch+var_74]
.text:00408DFC                 mov     [esp+13Ch+var_124], eax
.text:00408E00                 mov     eax, [esp+13Ch+var_70]
.text:00408E07                 mov     ecx, [esp+13Ch+var_124]
.text:00408E0B                 imul    ebp, eax
.text:00408E0E                 mov     eax, edx
.text:00408E10                 xor     edx, edx
.text:00408E12                 mov     [esi], ecx
.text:00408E14                 add     eax, ebp
.text:00408E16                 mov     ebp, [esp+13Ch+var_74]
.text:00408E1D                 imul    ebp, ebx
.text:00408E20                 add     eax, ebp
.text:00408E22                 mov     [esp+13Ch+var_120], eax
.text:00408E26                 mov     ebp, [esp+13Ch+var_120]
.text:00408E2A                 mov     [esi+4], ebp
.text:00408E2D                 jmp     short loc_408DE0
.text:00408E2F ; ---------------------------------------------------------------------------
.text:00408E2F
.text:00408E2F loc_408E2F:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408E2F                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408E2F                 mov     [esp+13Ch+var_84], ebx ; jumptable 004086A9 cases 77,109
.text:00408E36                 mov     eax, ebx
.text:00408E38                 xor     ebp, ebp
.text:00408E3A                 mov     [esp+13Ch+var_78], ebp
.text:00408E41                 sar     eax, 1Fh
.text:00408E44                 mov     edx, [esp+13Ch+var_84]
.text:00408E4B                 mov     [esp+13Ch+var_80], eax
.text:00408E52                 lea     esi, [esp+13Ch+var_24]
.text:00408E59                 mov     ebp, 1
.text:00408E5E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408E65                 mov     ecx, [esp+13Ch+var_80]
.text:00408E6C                 mov     [esp+13Ch+Radix], edx
.text:00408E70                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408E78                 mov     [esp+13Ch+var_130], ecx
.text:00408E7C                 call    sub_412C30
.text:00408E81                 mov     [esp+13Ch+var_8C], eax
.text:00408E88                 mov     [esp+13Ch+var_88], edx
.text:00408E8F
.text:00408E8F loc_408E8F:                             ; CODE XREF: sub_4084F0+9F1↓j
.text:00408E8F                 mov     ebx, [esi+4]
.text:00408E92                 mov     edx, [esi]
.text:00408E94                 cmp     [esp+13Ch+var_88], ebx
.text:00408E9B                 mov     [esp+13Ch+var_90], ebx
.text:00408EA2                 mov     [esp+13Ch+var_94], edx
.text:00408EA9                 ja      short loc_408EEF
.text:00408EAB                 mov     eax, [esp+13Ch+var_90]
.text:00408EB2                 cmp     [esp+13Ch+var_88], eax
.text:00408EB9                 jb      short loc_408EC4
.text:00408EBB                 cmp     [esp+13Ch+var_8C], edx
.text:00408EC2                 jnb     short loc_408EEF
.text:00408EC4
.text:00408EC4 loc_408EC4:                             ; CODE XREF: sub_4084F0+9C9↑j
.text:00408EC4                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408ECA                 mov     eax, 1
.text:00408ECF                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408ED6
.text:00408ED6 loc_408ED6:                             ; CODE XREF: sub_4084F0+A4C↓j
.text:00408ED6                 or      [esp+13Ch+var_78], eax
.text:00408EDD                 dec     ebp
.text:00408EDE                 cmp     ebp, 0FFFFFFFFh
.text:00408EE1                 jnz     short loc_408E8F
.text:00408EE3                 mov     eax, [esp+13Ch+var_78]
.text:00408EEA                 jmp     loc_4087EA
.text:00408EEF ; ---------------------------------------------------------------------------
.text:00408EEF
.text:00408EEF loc_408EEF:                             ; CODE XREF: sub_4084F0+9B9↑j
.text:00408EEF                                         ; sub_4084F0+9D2↑j
.text:00408EEF                 mov     ecx, [esp+13Ch+var_80]
.text:00408EF6                 mov     eax, [esp+13Ch+var_94]
.text:00408EFD                 mov     ebx, [esp+13Ch+var_94]
.text:00408F04                 mul     [esp+13Ch+var_84]
.text:00408F0B                 imul    ebx, ecx
.text:00408F0E                 mov     ecx, edx
.text:00408F10                 mov     [esp+13Ch+var_124], eax
.text:00408F14                 add     ecx, ebx
.text:00408F16                 mov     edx, [esp+13Ch+var_84]
.text:00408F1D                 mov     ebx, [esp+13Ch+var_90]
.text:00408F24                 xor     eax, eax
.text:00408F26                 imul    edx, ebx
.text:00408F29                 add     ecx, edx
.text:00408F2B                 mov     [esp+13Ch+var_120], ecx
.text:00408F2F                 mov     ebx, [esp+13Ch+var_120]
.text:00408F33                 mov     ecx, [esp+13Ch+var_124]
.text:00408F37                 mov     [esi+4], ebx
.text:00408F3A                 mov     [esi], ecx
.text:00408F3C                 jmp     short loc_408ED6
.text:00408F3E ; ---------------------------------------------------------------------------
.text:00408F3E
.text:00408F3E loc_408F3E:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00408F3E                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00408F3E                 mov     [esp+13Ch+var_C4], ebx ; jumptable 004086A9 cases 84,116
.text:00408F42                 mov     eax, ebx
.text:00408F44                 xor     ebp, ebp
.text:00408F46                 mov     [esp+13Ch+var_B8], ebp
.text:00408F4D                 sar     eax, 1Fh
.text:00408F50                 mov     edx, [esp+13Ch+var_C4]
.text:00408F54                 mov     [esp+13Ch+var_C0], eax
.text:00408F58                 lea     esi, [esp+13Ch+var_24]
.text:00408F5F                 mov     ebp, 3
.text:00408F64                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408F6B                 mov     ebx, [esp+13Ch+var_C0]
.text:00408F6F                 mov     [esp+13Ch+Radix], edx
.text:00408F73                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408F7B                 mov     [esp+13Ch+var_130], ebx
.text:00408F7F                 call    sub_412C30
.text:00408F84                 mov     [esp+13Ch+var_CC], eax
.text:00408F88                 mov     [esp+13Ch+var_C8], edx
.text:00408F8C
.text:00408F8C loc_408F8C:                             ; CODE XREF: sub_4084F0+ADC↓j
.text:00408F8C                 mov     ebx, [esi+4]
.text:00408F8F                 mov     edx, [esi]
.text:00408F91                 cmp     [esp+13Ch+var_C8], ebx
.text:00408F95                 mov     [esp+13Ch+var_D0], ebx
.text:00408F99                 mov     [esp+13Ch+var_D4], edx
.text:00408F9D                 ja      short loc_408FDA
.text:00408F9F                 mov     eax, [esp+13Ch+var_D0]
.text:00408FA3                 cmp     [esp+13Ch+var_C8], eax
.text:00408FA7                 jb      short loc_408FAF
.text:00408FA9                 cmp     [esp+13Ch+var_CC], edx
.text:00408FAD                 jnb     short loc_408FDA
.text:00408FAF
.text:00408FAF loc_408FAF:                             ; CODE XREF: sub_4084F0+AB7↑j
.text:00408FAF                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408FB5                 mov     eax, 1
.text:00408FBA                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408FC1
.text:00408FC1 loc_408FC1:                             ; CODE XREF: sub_4084F0+B25↓j
.text:00408FC1                 or      [esp+13Ch+var_B8], eax
.text:00408FC8                 dec     ebp
.text:00408FC9                 cmp     ebp, 0FFFFFFFFh
.text:00408FCC                 jnz     short loc_408F8C
.text:00408FCE                 mov     eax, [esp+13Ch+var_B8]
.text:00408FD5                 jmp     loc_4087EA
.text:00408FDA ; ---------------------------------------------------------------------------
.text:00408FDA
.text:00408FDA loc_408FDA:                             ; CODE XREF: sub_4084F0+AAD↑j
.text:00408FDA                                         ; sub_4084F0+ABD↑j
.text:00408FDA                 mov     ecx, [esp+13Ch+var_C0]
.text:00408FDE                 mov     eax, [esp+13Ch+var_D4]
.text:00408FE2                 mov     ebx, [esp+13Ch+var_D4]
.text:00408FE6                 mul     [esp+13Ch+var_C4]
.text:00408FEA                 imul    ebx, ecx
.text:00408FED                 mov     ecx, edx
.text:00408FEF                 mov     [esp+13Ch+var_124], eax
.text:00408FF3                 add     ecx, ebx
.text:00408FF5                 mov     edx, [esp+13Ch+var_C4]
.text:00408FF9                 mov     ebx, [esp+13Ch+var_D0]
.text:00408FFD                 xor     eax, eax
.text:00408FFF                 imul    edx, ebx
.text:00409002                 add     ecx, edx
.text:00409004                 mov     [esp+13Ch+var_120], ecx
.text:00409008                 mov     ebx, [esp+13Ch+var_120]
.text:0040900C                 mov     ecx, [esp+13Ch+var_124]
.text:00409010                 mov     [esi+4], ebx
.text:00409013                 mov     [esi], ecx
.text:00409015                 jmp     short loc_408FC1
.text:00409017 ; ---------------------------------------------------------------------------
.text:00409017
.text:00409017 loc_409017:                             ; CODE XREF: sub_4084F0+1B9↑j
.text:00409017                                         ; DATA XREF: sub_4084F0:jpt_4086A9↑o
.text:00409017                 mov     [esp+13Ch+Radix], 2 ; jumptable 004086A9 case 119
.text:0040901F                 lea     ebp, [esp+13Ch+var_24]
.text:00409026                 mov     [esp+13Ch+var_130], 0
.text:0040902E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00409035                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040903D                 call    sub_412C30
.text:00409042                 mov     esi, [esp+13Ch+var_20]
.text:00409049                 mov     ecx, [esp+13Ch+var_24]
.text:00409050                 cmp     edx, esi
.text:00409052                 ja      short loc_409062
.text:00409054                 jb      loc_408815
.text:0040905A                 cmp     eax, ecx
.text:0040905C                 jb      loc_408815
.text:00409062
.text:00409062 loc_409062:                             ; CODE XREF: sub_4084F0+B62↑j
.text:00409062                 mov     esi, [ebp+0]
.text:00409065                 mov     eax, 2
.text:0040906A                 mov     ecx, [ebp+4]
.text:0040906D                 mul     esi
.text:0040906F                 lea     edx, [edx+ecx*2]
.text:00409072                 jmp     loc_4087E2
.text:00409077 ; ---------------------------------------------------------------------------
.text:00409077
.text:00409077 loc_409077:                             ; CODE XREF: sub_4084F0+196↑j
.text:00409077                                         ; sub_4084F0+1A8↑j
.text:00409077                 mov     esi, 2
.text:0040907C                 mov     ebx, 3E8h
.text:00409081                 mov     [esp+13Ch+var_30], esi
.text:00409088                 jmp     loc_40869E
.text:0040908D ; ---------------------------------------------------------------------------
.text:0040908D
.text:0040908D loc_40908D:                             ; CODE XREF: sub_4084F0+19F↑j
.text:0040908D                 cmp     eax, 69h ; 'i'
.text:00409090                 jnz     loc_40869E
.text:00409096                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040909A                 jnz     loc_40869E
.text:004090A0                 mov     eax, 3
.text:004090A5                 mov     [esp+13Ch+var_30], eax
.text:004090AC                 jmp     loc_40869E
.text:004090B1 ; ---------------------------------------------------------------------------
.text:004090B1
.text:004090B1 loc_4090B1:                             ; CODE XREF: sub_4084F0+187↑j
.text:004090B1                 mov     edx, [edi]
.text:004090B3                 jmp     loc_40869E
.text:004090B8 ; ---------------------------------------------------------------------------
.text:004090B8
.text:004090B8 loc_4090B8:                             ; CODE XREF: sub_4084F0+E2↑j
.text:004090B8                 mov     edx, [esp+13Ch+var_24]
.text:004090BF                 mov     ecx, [esp+13Ch+var_20]
.text:004090C6                 mov     edi, [esp+13Ch+arg_C]
.text:004090CD                 mov     [edi], edx
.text:004090CF                 mov     [edi+4], ecx
.text:004090D2                 jmp     loc_4085FB
.text:004090D7 ; ---------------------------------------------------------------------------
.text:004090D7
.text:004090D7 loc_4090D7:                             ; CODE XREF: sub_4084F0+D3↑j
.text:004090D7                 call    _errno
.text:004090DC                 cmp     dword ptr [eax], 22h ; '"'
.text:004090DF                 jnz     short loc_4090F2
.text:004090E1                 mov     esi, 1
.text:004090E6                 mov     [esp+13Ch+var_28], esi
.text:004090ED                 jmp     loc_4085C9
.text:004090F2 ; ---------------------------------------------------------------------------
.text:004090F2
.text:004090F2 loc_4090F2:                             ; CODE XREF: sub_4084F0+BEF↑j
.text:004090F2                                         ; sub_4084F0+C15↓j ...
.text:004090F2                 mov     eax, 4
.text:004090F7                 jmp     loc_408602
.text:004090FC ; ---------------------------------------------------------------------------
.text:004090FC
.text:004090FC loc_4090FC:                             ; CODE XREF: sub_4084F0+C4↑j
.text:004090FC                 mov     ebx, [esp+13Ch+Str]
.text:00409103                 test    ebx, ebx
.text:00409105                 jz      short loc_4090F2
.text:00409107                 movzx   eax, byte ptr [eax]
.text:0040910A                 test    al, al
.text:0040910C                 jz      short loc_4090F2
.text:0040910E                 mov     esi, [esp+13Ch+Str]
.text:00409115                 movsx   ebp, al
.text:00409118                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040911C                 mov     [esp+13Ch+C], esi ; Str
.text:0040911F                 call    strchr
.text:00409124                 test    eax, eax
.text:00409126                 jz      short loc_4090F2
.text:00409128                 mov     ecx, 1
.text:0040912D                 xor     edx, edx
.text:0040912F                 mov     [esp+13Ch+var_24], ecx
.text:00409136                 mov     [esp+13Ch+var_20], edx
.text:0040913D                 jmp     loc_4085C9
.text:00409142 ; ---------------------------------------------------------------------------
.text:00409142
.text:00409142 loc_409142:                             ; CODE XREF: sub_4084F0+61↑j
.text:00409142                 mov     eax, ds:_pctype
.text:00409147                 mov     ecx, [eax]
.text:00409149                 movzx   eax, word ptr [ecx+edx*2]
.text:0040914D                 and     eax, 8
.text:00409150                 jmp     loc_408567
.text:00409155 ; ---------------------------------------------------------------------------
.text:00409155
.text:00409155 loc_409155:                             ; CODE XREF: sub_4084F0+33↑j
.text:00409155                 lea     edi, [esp+13Ch+var_18]
.text:0040915C                 jmp     loc_408529
.text:00409161 ; ---------------------------------------------------------------------------
.text:00409161
.text:00409161 loc_409161:                             ; CODE XREF: sub_4084F0+24↑j
.text:00409161                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00409169                 mov     [esp+13Ch+Type], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00409171                 mov     [esp+13Ch+C], offset a0StrtolBaseStr_0 ; "0 <= strtol_base && strtol_base <= 36"
.text:00409178                 call    _assert
.text:00409178 sub_4084F0      endp
.text:00409178
.text:00409178 ; ---------------------------------------------------------------------------
.text:0040917D                 align 10h
.text:00409180
.text:00409180 loc_409180:                             ; DATA XREF: .text:0040919C↓o
.text:00409180                 pop     edi
.text:00409181                 push    eax
.text:00409182                 dec     edi
.text:00409183                 push    ebx
.text:00409184                 dec     ecx
.text:00409185                 pop     eax
.text:00409186                 xor     bl, [edi+56h]
.text:00409189                 inc     ebp
.text:0040918A                 push    edx
.text:0040918B                 push    ebx
.text:0040918C                 dec     ecx
.text:0040918D                 dec     edi
.text:0040918E                 dec     esi
.text:0040918F
.text:0040918F loc_40918F:                             ; CODE XREF: sub_403270+37↑p
.text:0040918F                 add     [ebx+5C891CECh], al
.text:00409195                 and     al, 18h
.text:00409197                 mov     ebx, 30A29h
.text:0040919C                 mov     dword ptr [esp], offset loc_409180
.text:004091A3                 call    getenv
.text:004091A8                 test    eax, eax
.text:004091AA                 jz      short loc_4091B1
.text:004091AC                 cmp     byte ptr [eax], 0
.text:004091AF                 jnz     short loc_4091C0
.text:004091B1
.text:004091B1 loc_4091B1:                             ; CODE XREF: .text:004091AA↑j
.text:004091B1                                         ; .text:004091DF↓j ...
.text:004091B1                 mov     eax, ebx
.text:004091B3                 mov     ebx, [esp+18h]
.text:004091B7                 add     esp, 1Ch
.text:004091BA                 retn
.text:004091BA ; ---------------------------------------------------------------------------
.text:004091BB                 align 10h
.text:004091C0
.text:004091C0 loc_4091C0:                             ; CODE XREF: .text:004091AF↑j
.text:004091C0                 mov     dword ptr [esp+8], 0Ah
.text:004091C8                 lea     ecx, [esp+14h]
.text:004091CC                 mov     [esp+4], ecx
.text:004091D0                 mov     [esp], eax
.text:004091D3                 call    strtol
.text:004091D8                 mov     ecx, [esp+14h]
.text:004091DC                 cmp     byte ptr [ecx], 0
.text:004091DF                 jnz     short loc_4091B1
.text:004091E1                 mov     ebx, eax
.text:004091E3                 jmp     short loc_4091B1
.text:004091E3 ; ---------------------------------------------------------------------------
.text:004091E5                 align 10h
.text:004091F0 aCoreutils530Sr_2 db '../../coreutils-5.3.0-src/lib/xnanosleep.c',0
.text:004091F0                                         ; DATA XREF: sub_409230+221↓o
.text:0040921B a0Seconds       db '0 <= seconds',0     ; DATA XREF: sub_409230+229↓o
.text:00409228 flt_409228      dd 1.0e9                ; DATA XREF: sub_409230+48↓r
.text:0040922C                 align 10h
.text:00409230
.text:00409230 ; =============== S U B R O U T I N E =======================================
.text:00409230
.text:00409230
.text:00409230 ; int __cdecl sub_409230(double)
.text:00409230 sub_409230      proc near               ; CODE XREF: sub_402620+122↑p
.text:00409230
.text:00409230 var_60          = dword ptr -60h
.text:00409230 var_5C          = dword ptr -5Ch
.text:00409230 var_58          = dword ptr -58h
.text:00409230 var_54          = dword ptr -54h
.text:00409230 var_4C          = qword ptr -4Ch
.text:00409230 var_3C          = dword ptr -3Ch
.text:00409230 var_38          = word ptr -38h
.text:00409230 var_36          = word ptr -36h
.text:00409230 var_34          = dword ptr -34h
.text:00409230 var_30          = dword ptr -30h
.text:00409230 var_2C          = dword ptr -2Ch
.text:00409230 var_28          = dword ptr -28h
.text:00409230 var_24          = dword ptr -24h
.text:00409230 arg_0           = qword ptr  4
.text:00409230
.text:00409230                 push    ebp
.text:00409231                 fldz
.text:00409233                 push    edi
.text:00409234                 push    esi
.text:00409235                 push    ebx
.text:00409236                 sub     esp, 4Ch
.text:00409239                 fld     [esp+5Ch+arg_0]
.text:0040923D                 fucom   st(1)
.text:0040923F                 fnstsw  ax
.text:00409241                 fstp    st(1)
.text:00409243                 sahf
.text:00409244                 jb      loc_409447
.text:0040924A                 fstp    [esp+5Ch+var_4C]
.text:0040924E                 lea     edi, [esp+5Ch+var_24]
.text:00409252                 mov     [esp+5Ch+var_5C], edi
.text:00409255                 call    sub_40AA80
.text:0040925A                 fld     [esp+5Ch+var_4C]
.text:0040925E                 test    eax, eax
.text:00409260                 mov     edx, 0FFFFFFFFh
.text:00409265                 jnz     loc_409443
.text:0040926B                 fnstcw  [esp+5Ch+var_36]
.text:0040926F                 fld     st
.text:00409271                 xor     ecx, ecx
.text:00409273                 movzx   edx, [esp+5Ch+var_36]
.text:00409278                 fld     ds:flt_409228
.text:0040927E                 fxch    st(2)
.text:00409280                 or      dx, 0C00h
.text:00409285                 mov     [esp+5Ch+var_38], dx
.text:0040928A                 fldcw   [esp+5Ch+var_38]
.text:0040928E                 fist    [esp+5Ch+var_3C]
.text:00409292                 fldcw   [esp+5Ch+var_36]
.text:00409296                 mov     edx, [esp+5Ch+var_3C]
.text:0040929A                 mov     [esp+5Ch+var_2C], edx
.text:0040929E                 push    edx
.text:0040929F                 fild    [esp+60h+var_60]
.text:004092A2                 add     esp, 4
.text:004092A5                 fsub    st(2), st
.text:004092A7                 fxch    st(1)
.text:004092A9                 fucompp
.text:004092AB                 fnstsw  ax
.text:004092AD                 sahf
.text:004092AE                 fmul    st, st(1)
.text:004092B0                 jb      loc_40943C
.text:004092B6                 fldz
.text:004092B8                 fxch    st(1)
.text:004092BA                 fucom   st(1)
.text:004092BC                 fnstsw  ax
.text:004092BE                 fstp    st(1)
.text:004092C0                 sahf
.text:004092C1                 jb      loc_40943C
.text:004092C7                 fxch    st(1)
.text:004092C9                 fucomp  st(1)
.text:004092CB                 fnstsw  ax
.text:004092CD                 sahf
.text:004092CE                 jnb     short loc_4092D2
.text:004092D0
.text:004092D0 loc_4092D0:                             ; CODE XREF: sub_409230+20E↓j
.text:004092D0                 mov     cl, 1
.text:004092D2
.text:004092D2 loc_4092D2:                             ; CODE XREF: sub_409230+9E↑j
.text:004092D2                 fldcw   [esp+5Ch+var_38]
.text:004092D6                 fist    [esp+5Ch+var_3C]
.text:004092DA                 fldcw   [esp+5Ch+var_36]
.text:004092DE                 mov     bl, cl
.text:004092E0                 lea     esi, [esp+5Ch+var_2C]
.text:004092E4                 mov     ebp, [esp+5Ch+var_3C]
.text:004092E8                 mov     edx, ebp
.text:004092EA                 mov     [esp+5Ch+var_28], ebp
.text:004092EE                 push    ebp
.text:004092EF                 fild    [esp+60h+var_60]
.text:004092F2                 fxch    st(1)
.text:004092F4                 add     esp, 4
.text:004092F7                 fucompp
.text:004092F9                 fnstsw  ax
.text:004092FB                 sahf
.text:004092FC                 jbe     short loc_4092FF
.text:004092FE                 inc     edx
.text:004092FF
.text:004092FF loc_4092FF:                             ; CODE XREF: sub_409230+CC↑j
.text:004092FF                 mov     [esi+4], edx
.text:00409302                 cmp     edx, 3B9AC9FFh
.text:00409308                 jle     short loc_409322
.text:0040930A                 mov     ebp, [esp+5Ch+var_2C]
.text:0040930E                 movzx   ebx, cl
.text:00409311                 inc     ebp
.text:00409312                 mov     [esp+5Ch+var_2C], ebp
.text:00409316                 test    ebx, ebx
.text:00409318                 setnz   bl
.text:0040931B                 sub     dword ptr [esi+4], 3B9ACA00h
.text:00409322
.text:00409322 loc_409322:                             ; CODE XREF: sub_409230+D8↑j
.text:00409322                 mov     ecx, [esp+5Ch+var_24]
.text:00409326                 mov     ebp, [esp+5Ch+var_2C]
.text:0040932A                 mov     eax, ecx
.text:0040932C                 add     eax, ebp
.text:0040932E                 mov     [esp+5Ch+var_34], eax
.text:00409332                 mov     ebp, [edi+4]
.text:00409335                 mov     edx, ebp
.text:00409337                 add     edx, [esi+4]
.text:0040933A                 cmp     edx, 3B9AC9FFh
.text:00409340                 mov     [esp+5Ch+var_30], edx
.text:00409344                 jle     short loc_409355
.text:00409346                 inc     eax
.text:00409347                 mov     [esp+5Ch+var_34], eax
.text:0040934B                 lea     eax, [edx-3B9ACA00h]
.text:00409351                 mov     [esp+5Ch+var_30], eax
.text:00409355
.text:00409355 loc_409355:                             ; CODE XREF: sub_409230+114↑j
.text:00409355                 mov     eax, [esp+5Ch+var_34]
.text:00409359                 movzx   edx, bl
.text:0040935C                 xor     ebx, ebx
.text:0040935E                 cmp     eax, ecx
.text:00409360                 jl      loc_409432
.text:00409366                 cmp     eax, ecx
.text:00409368                 jz      loc_409428
.text:0040936E
.text:0040936E loc_40936E:                             ; CODE XREF: sub_409230+1FC↓j
.text:0040936E                                         ; sub_409230+207↓j
.text:0040936E                 or      edx, ebx
.text:00409370                 jz      short loc_4093A0
.text:00409372                 mov     [esp+5Ch+var_34], 7FFFFFFFh
.text:0040937A                 mov     [esp+5Ch+var_2C], 7FFFFFFFh
.text:00409382                 mov     [esp+5Ch+var_30], 3B9AC9FFh
.text:0040938A                 mov     dword ptr [esi+4], 3B9AC9FFh
.text:00409391                 jmp     short loc_4093A0
.text:00409391 ; ---------------------------------------------------------------------------
.text:00409393                 align 10h
.text:004093A0
.text:004093A0 loc_4093A0:                             ; CODE XREF: sub_409230+140↑j
.text:004093A0                                         ; sub_409230+161↑j ...
.text:004093A0                 mov     [esp+5Ch+var_58], 0
.text:004093A8                 mov     [esp+5Ch+var_5C], esi
.text:004093AB                 call    sub_40E740
.text:004093B0                 test    eax, eax
.text:004093B2                 jz      short loc_409409
.text:004093B4                 call    _errno
.text:004093B9                 cmp     dword ptr [eax], 4
.text:004093BC                 jnz     short loc_409421
.text:004093BE                 mov     [esp+5Ch+var_5C], edi
.text:004093C1                 call    sub_40AA80
.text:004093C6                 test    eax, eax
.text:004093C8                 jnz     short loc_409421
.text:004093CA                 mov     edx, [esp+5Ch+var_34]
.text:004093CE                 mov     eax, [esp+5Ch+var_24]
.text:004093D2                 mov     ecx, [esp+5Ch+var_30]
.text:004093D6                 mov     ebp, [edi+4]
.text:004093D9                 mov     ebx, edx
.text:004093DB                 sub     ebx, eax
.text:004093DD                 sub     ecx, ebp
.text:004093DF                 cmp     edx, eax
.text:004093E1                 jl      short loc_409409
.text:004093E3                 test    ebx, ebx
.text:004093E5                 js      short loc_409415
.text:004093E7                 test    ebx, ebx
.text:004093E9                 jnz     short loc_4093EF
.text:004093EB                 test    ecx, ecx
.text:004093ED                 jle     short loc_409409
.text:004093EF
.text:004093EF loc_4093EF:                             ; CODE XREF: sub_409230+1B9↑j
.text:004093EF                 test    ecx, ecx
.text:004093F1                 js      short loc_409400
.text:004093F3
.text:004093F3 loc_4093F3:                             ; CODE XREF: sub_409230+1D7↓j
.text:004093F3                                         ; sub_409230+1EF↓j
.text:004093F3                 mov     [esi], ebx
.text:004093F5                 mov     [esi+4], ecx
.text:004093F8                 jmp     short loc_4093A0
.text:004093F8 ; ---------------------------------------------------------------------------
.text:004093FA                 align 10h
.text:00409400
.text:00409400 loc_409400:                             ; CODE XREF: sub_409230+1C1↑j
.text:00409400                 dec     ebx
.text:00409401                 add     ecx, 3B9ACA00h
.text:00409407                 jmp     short loc_4093F3
.text:00409409 ; ---------------------------------------------------------------------------
.text:00409409
.text:00409409 loc_409409:                             ; CODE XREF: sub_409230+182↑j
.text:00409409                                         ; sub_409230+1B1↑j ...
.text:00409409                 xor     edx, edx
.text:0040940B
.text:0040940B loc_40940B:                             ; CODE XREF: sub_409230+1F6↓j
.text:0040940B                                         ; sub_409230+215↓j
.text:0040940B                 add     esp, 4Ch
.text:0040940E                 mov     eax, edx
.text:00409410                 pop     ebx
.text:00409411                 pop     esi
.text:00409412                 pop     edi
.text:00409413                 pop     ebp
.text:00409414                 retn
.text:00409415 ; ---------------------------------------------------------------------------
.text:00409415
.text:00409415 loc_409415:                             ; CODE XREF: sub_409230+1B5↑j
.text:00409415                 mov     ebx, 7FFFFFFFh
.text:0040941A                 mov     ecx, 3B9AC9FFh
.text:0040941F                 jmp     short loc_4093F3
.text:00409421 ; ---------------------------------------------------------------------------
.text:00409421
.text:00409421 loc_409421:                             ; CODE XREF: sub_409230+18C↑j
.text:00409421                                         ; sub_409230+198↑j
.text:00409421                 mov     edx, 0FFFFFFFFh
.text:00409426                 jmp     short loc_40940B
.text:00409428 ; ---------------------------------------------------------------------------
.text:00409428
.text:00409428 loc_409428:                             ; CODE XREF: sub_409230+138↑j
.text:00409428                 cmp     [esp+5Ch+var_30], ebp
.text:0040942C                 jge     loc_40936E
.text:00409432
.text:00409432 loc_409432:                             ; CODE XREF: sub_409230+130↑j
.text:00409432                 mov     ebx, 1
.text:00409437                 jmp     loc_40936E
.text:0040943C ; ---------------------------------------------------------------------------
.text:0040943C
.text:0040943C loc_40943C:                             ; CODE XREF: sub_409230+80↑j
.text:0040943C                                         ; sub_409230+91↑j
.text:0040943C                 fstp    st(1)
.text:0040943E                 jmp     loc_4092D0
.text:00409443 ; ---------------------------------------------------------------------------
.text:00409443
.text:00409443 loc_409443:                             ; CODE XREF: sub_409230+35↑j
.text:00409443                 fstp    st
.text:00409445                 jmp     short loc_40940B
.text:00409447 ; ---------------------------------------------------------------------------
.text:00409447
.text:00409447 loc_409447:                             ; CODE XREF: sub_409230+14↑j
.text:00409447                 fstp    st
.text:00409449                 mov     [esp+5Ch+var_54], 66h ; 'f'
.text:00409451                 mov     [esp+5Ch+var_58], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/xnanoslee"...
.text:00409459                 mov     [esp+5Ch+var_5C], offset a0Seconds ; "0 <= seconds"
.text:00409460                 call    _assert
.text:00409460 sub_409230      endp
.text:00409460
.text:00409460 ; ---------------------------------------------------------------------------
.text:00409465                 align 10h
.text:00409470
.text:00409470 ; =============== S U B R O U T I N E =======================================
.text:00409470
.text:00409470
.text:00409470 ; int __cdecl sub_409470(char *, int, __int16)
.text:00409470 sub_409470      proc near               ; CODE XREF: sub_402D60+4AE↑p
.text:00409470                                         ; sub_404120+69↑p
.text:00409470
.text:00409470 FileName        = dword ptr -1Ch
.text:00409470 OpenFlag        = dword ptr -18h
.text:00409470 var_14          = dword ptr -14h
.text:00409470 var_C           = dword ptr -0Ch
.text:00409470 var_8           = dword ptr -8
.text:00409470 var_4           = dword ptr -4
.text:00409470 arg_0           = dword ptr  4
.text:00409470 arg_4           = dword ptr  8
.text:00409470 arg_8           = word ptr  0Ch
.text:00409470
.text:00409470                 sub     esp, 1Ch
.text:00409473                 xor     eax, eax
.text:00409475                 mov     edx, [esp+1Ch+arg_4]
.text:00409479                 mov     [esp+1Ch+var_C], ebx
.text:0040947D                 mov     [esp+1Ch+var_8], esi
.text:00409481                 test    dh, 1
.text:00409484                 mov     [esp+1Ch+var_4], edi
.text:00409488                 jz      short loc_40948F
.text:0040948A                 movzx   eax, [esp+1Ch+arg_8]
.text:0040948F
.text:0040948F loc_40948F:                             ; CODE XREF: sub_409470+18↑j
.text:0040948F                 mov     [esp+1Ch+OpenFlag], edx ; OpenFlag
.text:00409493                 mov     edx, [esp+1Ch+arg_0]
.text:00409497                 mov     [esp+1Ch+var_14], eax
.text:0040949B                 mov     [esp+1Ch+FileName], edx ; FileName
.text:0040949E                 call    _open
.text:004094A3                 cmp     eax, 2
.text:004094A6                 mov     edi, eax
.text:004094A8                 jbe     short loc_4094C0
.text:004094AA
.text:004094AA loc_4094AA:                             ; CODE XREF: sub_409470+72↓j
.text:004094AA                 mov     eax, edi
.text:004094AC                 mov     ebx, [esp+1Ch+var_C]
.text:004094B0                 mov     esi, [esp+1Ch+var_8]
.text:004094B4                 mov     edi, [esp+1Ch+var_4]
.text:004094B8                 add     esp, 1Ch
.text:004094BB                 retn
.text:004094BB ; ---------------------------------------------------------------------------
.text:004094BC                 align 10h
.text:004094C0
.text:004094C0 loc_4094C0:                             ; CODE XREF: sub_409470+38↑j
.text:004094C0                 mov     [esp+1Ch+FileName], eax
.text:004094C3                 call    sub_40AB00
.text:004094C8                 mov     esi, eax
.text:004094CA                 call    _errno
.text:004094CF                 mov     ebx, [eax]
.text:004094D1                 mov     [esp+1Ch+FileName], edi ; FileHandle
.text:004094D4                 mov     edi, esi
.text:004094D6                 call    _close
.text:004094DB                 call    _errno
.text:004094E0                 mov     [eax], ebx
.text:004094E2                 jmp     short loc_4094AA
.text:004094E2 sub_409470      endp
.text:004094E2
.text:004094E2 ; ---------------------------------------------------------------------------
.text:004094E4                 align 10h
.text:004094F0
.text:004094F0 ; =============== S U B R O U T I N E =======================================
.text:004094F0
.text:004094F0
.text:004094F0 sub_4094F0      proc near               ; CODE XREF: sub_402620+655↑p
.text:004094F0                                         ; sub_404120+697↑p ...
.text:004094F0
.text:004094F0 var_1C          = dword ptr -1Ch
.text:004094F0 var_18          = dword ptr -18h
.text:004094F0 var_14          = dword ptr -14h
.text:004094F0 var_10          = dword ptr -10h
.text:004094F0 arg_0           = dword ptr  4
.text:004094F0 arg_4           = dword ptr  8
.text:004094F0 arg_8           = dword ptr  0Ch
.text:004094F0
.text:004094F0                 push    edi
.text:004094F1                 push    esi
.text:004094F2                 push    ebx
.text:004094F3                 sub     esp, 10h
.text:004094F6                 mov     esi, [esp+1Ch+arg_4]
.text:004094FA                 mov     edx, [esp+1Ch+arg_8]
.text:004094FE                 mov     ebx, [esp+1Ch+arg_0]
.text:00409502                 test    esi, esi
.text:00409504                 mov     byte ptr [edx+15h], 0
.text:00409508                 lea     edi, [edx+15h]
.text:0040950B                 js      short loc_409560
.text:0040950D                 lea     esi, [esi+0]
.text:00409510
.text:00409510 loc_409510:                             ; CODE XREF: sub_4094F0+65↓j
.text:00409510                 mov     [esp+1Ch+var_1C], ebx
.text:00409513                 dec     edi
.text:00409514                 mov     [esp+1Ch+var_18], esi
.text:00409518                 mov     [esp+1Ch+var_14], 0Ah
.text:00409520                 mov     [esp+1Ch+var_10], 0
.text:00409528                 call    sub_412D50
.text:0040952D                 add     al, 30h ; '0'
.text:0040952F                 mov     [edi], al
.text:00409531                 mov     [esp+1Ch+var_1C], ebx
.text:00409534                 mov     [esp+1Ch+var_18], esi
.text:00409538                 mov     [esp+1Ch+var_14], 0Ah
.text:00409540                 mov     [esp+1Ch+var_10], 0
.text:00409548                 call    sub_412F10
.text:0040954D                 mov     ebx, eax
.text:0040954F                 mov     esi, edx
.text:00409551                 mov     eax, edx
.text:00409553                 or      eax, ebx
.text:00409555                 jnz     short loc_409510
.text:00409557
.text:00409557 loc_409557:                             ; CODE XREF: sub_4094F0+BB↓j
.text:00409557                 add     esp, 10h
.text:0040955A                 mov     eax, edi
.text:0040955C                 pop     ebx
.text:0040955D                 pop     esi
.text:0040955E                 pop     edi
.text:0040955F                 retn
.text:00409560 ; ---------------------------------------------------------------------------
.text:00409560
.text:00409560 loc_409560:                             ; CODE XREF: sub_4094F0+1B↑j
.text:00409560                                         ; sub_4094F0+B5↓j
.text:00409560                 mov     [esp+1Ch+var_1C], ebx
.text:00409563                 dec     edi
.text:00409564                 mov     [esp+1Ch+var_18], esi
.text:00409568                 mov     [esp+1Ch+var_14], 0Ah
.text:00409570                 mov     [esp+1Ch+var_10], 0
.text:00409578                 call    sub_412D50
.text:0040957D                 mov     cl, 30h ; '0'
.text:0040957F                 sub     cl, al
.text:00409581                 mov     [edi], cl
.text:00409583                 mov     [esp+1Ch+var_1C], ebx
.text:00409586                 mov     [esp+1Ch+var_18], esi
.text:0040958A                 mov     [esp+1Ch+var_14], 0Ah
.text:00409592                 mov     [esp+1Ch+var_10], 0
.text:0040959A                 call    sub_412F10
.text:0040959F                 mov     ebx, eax
.text:004095A1                 mov     esi, edx
.text:004095A3                 or      edx, ebx
.text:004095A5                 jnz     short loc_409560
.text:004095A7                 dec     edi
.text:004095A8                 mov     byte ptr [edi], 2Dh ; '-'
.text:004095AB                 jmp     short loc_409557
.text:004095AB sub_4094F0      endp
.text:004095AB
.text:004095AB ; ---------------------------------------------------------------------------
.text:004095AD                 align 10h
.text:004095B0
.text:004095B0 ; =============== S U B R O U T I N E =======================================
.text:004095B0
.text:004095B0
.text:004095B0 ; int __cdecl sub_4095B0(int, char *)
.text:004095B0 sub_4095B0      proc near               ; CODE XREF: .text:00406EF0↑p
.text:004095B0                                         ; sub_4070C0+7A↑p
.text:004095B0
.text:004095B0 var_C           = dword ptr -0Ch
.text:004095B0 var_8           = dword ptr -8
.text:004095B0 var_4           = dword ptr -4
.text:004095B0 arg_0           = dword ptr  4
.text:004095B0 arg_4           = dword ptr  8
.text:004095B0
.text:004095B0                 sub     esp, 0Ch
.text:004095B3                 mov     edx, [esp+0Ch+arg_4]
.text:004095B7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004095BF                 mov     [esp+0Ch+var_4], edx ; char *
.text:004095C3                 mov     edx, [esp+0Ch+arg_0]
.text:004095C7                 mov     [esp+0Ch+var_C], edx ; int
.text:004095CA                 call    sub_40A440
.text:004095CF                 add     esp, 0Ch
.text:004095D2                 retn
.text:004095D2 sub_4095B0      endp
.text:004095D2
.text:004095D2 ; ---------------------------------------------------------------------------
.text:004095D3                 align 10h
.text:004095E0
.text:004095E0 ; =============== S U B R O U T I N E =======================================
.text:004095E0
.text:004095E0
.text:004095E0 ; int __cdecl sub_4095E0(char *)
.text:004095E0 sub_4095E0      proc near               ; CODE XREF: sub_4014E0+33D↑p
.text:004095E0                                         ; sub_402D60+19C↑p ...
.text:004095E0
.text:004095E0 var_C           = dword ptr -0Ch
.text:004095E0 var_8           = dword ptr -8
.text:004095E0 var_4           = dword ptr -4
.text:004095E0 arg_0           = dword ptr  4
.text:004095E0
.text:004095E0                 sub     esp, 0Ch
.text:004095E3                 mov     edx, [esp+0Ch+arg_0]
.text:004095E7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004095EF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004095F6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004095FA                 call    sub_40A440
.text:004095FF                 add     esp, 0Ch
.text:00409602                 retn
.text:00409602 sub_4095E0      endp
.text:00409602
.text:00409602 ; ---------------------------------------------------------------------------
.text:00409603                 align 10h
.text:00409610
.text:00409610 ; =============== S U B R O U T I N E =======================================
.text:00409610
.text:00409610
.text:00409610 sub_409610      proc near               ; CODE XREF: sub_403E50+6A↑p
.text:00409610                                         ; sub_404880+B6↑p ...
.text:00409610
.text:00409610 FileHandle      = dword ptr -1Ch
.text:00409610 DstBuf          = dword ptr -18h
.text:00409610 MaxCharCount    = dword ptr -14h
.text:00409610 arg_0           = dword ptr  4
.text:00409610 arg_4           = dword ptr  8
.text:00409610 arg_8           = dword ptr  0Ch
.text:00409610
.text:00409610                 push    ebp
.text:00409611                 push    edi
.text:00409612                 push    esi
.text:00409613                 push    ebx
.text:00409614                 sub     esp, 0Ch
.text:00409617                 mov     ebp, [esp+1Ch+arg_0]
.text:0040961B                 mov     edi, [esp+1Ch+arg_4]
.text:0040961F                 mov     ebx, [esp+1Ch+arg_8]
.text:00409623                 lea     esi, [esi+0]
.text:00409629                 lea     edi, [edi+0]
.text:00409630
.text:00409630 loc_409630:                             ; CODE XREF: sub_409610+3E↓j
.text:00409630                                         ; sub_409610+57↓j
.text:00409630                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:00409634                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:00409638                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040963B                 call    _read
.text:00409640                 test    eax, eax
.text:00409642                 mov     esi, eax
.text:00409644                 jns     short loc_409669
.text:00409646                 call    _errno
.text:0040964B                 cmp     dword ptr [eax], 4
.text:0040964E                 jz      short loc_409630
.text:00409650                 call    _errno
.text:00409655                 cmp     dword ptr [eax], 16h
.text:00409658                 jnz     short loc_409669
.text:0040965A                 cmp     ebx, 7FFFE000h
.text:00409660                 jbe     short loc_409669
.text:00409662                 mov     ebx, 7FFFE000h
.text:00409667                 jmp     short loc_409630
.text:00409669 ; ---------------------------------------------------------------------------
.text:00409669
.text:00409669 loc_409669:                             ; CODE XREF: sub_409610+34↑j
.text:00409669                                         ; sub_409610+48↑j ...
.text:00409669                 add     esp, 0Ch
.text:0040966C                 mov     eax, esi
.text:0040966E                 pop     ebx
.text:0040966F                 pop     esi
.text:00409670                 pop     edi
.text:00409671                 pop     ebp
.text:00409672                 retn
.text:00409672 sub_409610      endp
.text:00409672
.text:00409672 ; ---------------------------------------------------------------------------
.text:00409673                 align 10h
.text:00409680 aLiteral        db 'literal',0          ; DATA XREF: .text:004096C0↓o
.text:00409688 aShell          db 'shell',0            ; DATA XREF: .text:004096C4↓o
.text:0040968E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004096C8↓o
.text:0040969B aC_0            db 'c',0                ; DATA XREF: .text:004096CC↓o
.text:0040969D aEscape         db 'escape',0           ; DATA XREF: .text:004096D0↓o
.text:004096A4 aLocale         db 'locale',0           ; DATA XREF: .text:004096D4↓o
.text:004096AB aClocale        db 'clocale',0          ; DATA XREF: .text:004096D8↓o
.text:004096B3                 align 10h
.text:004096C0                 dd offset aLiteral      ; "literal"
.text:004096C4                 dd offset aShell        ; "shell"
.text:004096C8                 dd offset aShellAlways  ; "shell-always"
.text:004096CC                 dd offset aC_0          ; "c"
.text:004096D0                 dd offset aEscape       ; "escape"
.text:004096D4                 dd offset aLocale       ; "locale"
.text:004096D8                 dd offset aClocale      ; "clocale"
.text:004096DC                 dd 2 dup(0)
.text:004096E4                 dd 1, 2, 3, 4, 5, 6
.text:004096FC asc_4096FC:                             ; DATA XREF: sub_409710+7E↓o
.text:004096FC                                         ; sub_409710+A39↓o ...
.text:004096FC                 text "UTF-16LE", '"',27h,'`'
.text:00409702                 align 10h
.text:00409710
.text:00409710 ; =============== S U B R O U T I N E =======================================
.text:00409710
.text:00409710
.text:00409710 ; int __cdecl sub_409710(int, int, char *Str, int, int, int)
.text:00409710 sub_409710      proc near               ; CODE XREF: sub_409710+43A↓p
.text:00409710                                         ; .text:0040A2D3↓p ...
.text:00409710
.text:00409710 C               = dword ptr -4Ch
.text:00409710 Type            = dword ptr -48h
.text:00409710 SizeInBytes     = dword ptr -44h
.text:00409710 State           = dword ptr -40h
.text:00409710 var_3C          = dword ptr -3Ch
.text:00409710 var_38          = dword ptr -38h
.text:00409710 var_34          = dword ptr -34h
.text:00409710 var_30          = dword ptr -30h
.text:00409710 var_29          = byte ptr -29h
.text:00409710 var_28          = dword ptr -28h
.text:00409710 var_22          = byte ptr -22h
.text:00409710 var_21          = byte ptr -21h
.text:00409710 var_20          = dword ptr -20h
.text:00409710 var_1C          = dword ptr -1Ch
.text:00409710 var_18          = mbstate_t ptr -18h
.text:00409710 arg_0           = dword ptr  4
.text:00409710 arg_4           = dword ptr  8
.text:00409710 Str             = dword ptr  0Ch
.text:00409710 arg_C           = dword ptr  10h
.text:00409710 arg_10          = dword ptr  14h
.text:00409710 arg_14          = dword ptr  18h
.text:00409710
.text:00409710                 push    ebp
.text:00409711                 push    edi
.text:00409712                 push    esi
.text:00409713                 push    ebx
.text:00409714                 sub     esp, 3Ch
.text:00409717                 mov     edx, ds:__mb_cur_max
.text:0040971D                 mov     [esp+4Ch+var_34], 0
.text:00409725                 mov     [esp+4Ch+var_1C], 0
.text:0040972D                 cmp     dword ptr [edx], 1
.text:00409730                 mov     [esp+4Ch+var_20], 0
.text:00409738                 mov     [esp+4Ch+var_21], 0
.text:0040973D                 setz    [esp+4Ch+var_22]
.text:00409742                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00409747                 ja      short def_40974D ; jumptable 0040974D default case, cases 0,1
.text:00409749                 mov     edx, [esp+4Ch+arg_10]
.text:0040974D                 jmp     ds:jpt_40974D[edx*4] ; switch jump
.text:0040974D ; ---------------------------------------------------------------------------
.text:00409754 jpt_40974D      dd offset def_40974D    ; DATA XREF: sub_409710+3D↑r
.text:00409754                 dd offset def_40974D    ; jump table for switch statement
.text:00409754                 dd offset loc_40A095
.text:00409754                 dd offset loc_409770
.text:00409754                 dd offset loc_40A0BB
.text:00409754                 dd offset loc_40A0C5
.text:00409754                 dd offset loc_40A0C5
.text:00409770 ; ---------------------------------------------------------------------------
.text:00409770
.text:00409770 loc_409770:                             ; CODE XREF: sub_409710+3D↑j
.text:00409770                                         ; DATA XREF: sub_409710:jpt_40974D↑o
.text:00409770                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040974D case 3
.text:00409774                 cmp     [esp+4Ch+var_34], eax
.text:00409778                 jnb     short loc_409781
.text:0040977A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040977E                 mov     byte ptr [ebx], 22h ; '"'
.text:00409781
.text:00409781 loc_409781:                             ; CODE XREF: sub_409710+68↑j
.text:00409781                 mov     [esp+4Ch+var_34], 1
.text:00409789                 mov     [esp+4Ch+var_21], 1
.text:0040978E                 mov     [esp+4Ch+var_1C], offset asc_4096FC ; "\"'`"
.text:00409796
.text:00409796 loc_409796:                             ; CODE XREF: sub_409710+9A6↓j
.text:00409796                 mov     [esp+4Ch+var_20], 1
.text:0040979E
.text:0040979E def_40974D:                             ; CODE XREF: sub_409710+37↑j
.text:0040979E                                         ; sub_409710+3D↑j ...
.text:0040979E                 xor     ebp, ebp        ; jumptable 0040974D default case, cases 0,1
.text:004097A0
.text:004097A0 loc_4097A0:                             ; CODE XREF: sub_409710+3DB↓j
.text:004097A0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004097A5                 jz      loc_40A087
.text:004097AB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004097AF
.text:004097AF loc_4097AF:                             ; CODE XREF: sub_409710+980↓j
.text:004097AF                 jz      loc_40A01E
.text:004097B5                 cmp     [esp+4Ch+var_21], 0
.text:004097BA                 jz      short loc_409800
.text:004097BC                 mov     esi, [esp+4Ch+var_20]
.text:004097C0                 test    esi, esi
.text:004097C2                 jz      short loc_409800
.text:004097C4                 mov     ecx, [esp+4Ch+var_20]
.text:004097C8                 lea     edi, [ecx+ebp]
.text:004097CB                 cmp     edi, [esp+4Ch+arg_C]
.text:004097CF                 ja      short loc_409800
.text:004097D1                 cld
.text:004097D2                 mov     ebx, [esp+4Ch+Str]
.text:004097D6                 mov     edi, [esp+4Ch+var_1C]
.text:004097DA                 add     ebx, ebp
.text:004097DC                 mov     esi, ebx
.text:004097DE                 cmp     ecx, ecx
.text:004097E0                 repe cmpsb
.text:004097E2                 jnz     short loc_409800
.text:004097E4                 mov     edx, [esp+4Ch+arg_4]
.text:004097E8                 cmp     [esp+4Ch+var_34], edx
.text:004097EC                 jnb     short loc_4097FA
.text:004097EE                 mov     ecx, [esp+4Ch+arg_0]
.text:004097F2                 mov     eax, [esp+4Ch+var_34]
.text:004097F6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004097FA
.text:004097FA loc_4097FA:                             ; CODE XREF: sub_409710+DC↑j
.text:004097FA                 inc     [esp+4Ch+var_34]
.text:004097FE                 mov     esi, esi
.text:00409800
.text:00409800 loc_409800:                             ; CODE XREF: sub_409710+AA↑j
.text:00409800                                         ; sub_409710+B2↑j ...
.text:00409800                 mov     edi, [esp+4Ch+Str]
.text:00409804                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00409809                 movzx   eax, bl
.text:0040980C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040980F                 ja      def_409815      ; jumptable 00409815 default case, cases 1-6,14-31,64
.text:00409815                 jmp     ds:jpt_409815[eax*4] ; switch jump
.text:00409815 ; ---------------------------------------------------------------------------
.text:0040981C jpt_409815      dd offset loc_409A18, offset def_409815, offset def_409815
.text:0040981C                                         ; DATA XREF: sub_409710+105↑r
.text:0040981C                 dd offset def_409815, offset def_409815, offset def_409815 ; jump table for switch statement
.text:0040981C                 dd offset def_409815, offset loc_409AF0, offset loc_409B0E
.text:0040981C                 dd offset loc_409B12, offset loc_409B57, offset loc_409B5B
.text:0040981C                 dd offset loc_409B5F, offset loc_409B63, offset def_409815
.text:0040981C                 dd offset def_409815, offset def_409815, offset def_409815
.text:0040981C                 dd offset def_409815, offset def_409815, offset def_409815
.text:0040981C                 dd offset def_409815, offset def_409815, offset def_409815
.text:0040981C                 dd offset def_409815, offset def_409815, offset def_409815
.text:0040981C                 dd offset def_409815, offset def_409815, offset def_409815
.text:0040981C                 dd offset def_409815, offset def_409815, offset loc_409FE8
.text:0040981C                 dd offset loc_409FE8, offset loc_409FE8, offset loc_40A00A
.text:0040981C                 dd offset loc_409FE8, offset def_409C12, offset loc_409FE8
.text:0040981C                 dd offset loc_409B67, offset loc_409FE8, offset loc_409FE8
.text:0040981C                 dd offset loc_409FE8, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset loc_409FE8
.text:0040981C                 dd offset loc_409FE8, offset loc_409FE8, offset loc_409FE8
.text:0040981C                 dd offset loc_409BCC, offset def_409815, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset loc_409FE8, offset loc_409FE1
.text:0040981C                 dd offset def_409C12, offset loc_409FE8, offset def_409C12
.text:0040981C                 dd offset loc_409FE8, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset def_409C12, offset def_409C12, offset def_409C12
.text:0040981C                 dd offset loc_409FF8, offset loc_409FE8, offset loc_409FF8
.text:0040981C                 dd offset loc_40A00A
.text:00409A18 ; ---------------------------------------------------------------------------
.text:00409A18
.text:00409A18 loc_409A18:                             ; CODE XREF: sub_409710+105↑j
.text:00409A18                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409A18                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00409815 case 0
.text:00409A1D                 lea     eax, [ebp+1]
.text:00409A20                 jz      loc_409AD0
.text:00409A26                 mov     esi, [esp+4Ch+arg_4]
.text:00409A2A                 cmp     [esp+4Ch+var_34], esi
.text:00409A2E                 jnb     short loc_409A3C
.text:00409A30                 mov     eax, [esp+4Ch+arg_0]
.text:00409A34                 mov     ebx, [esp+4Ch+var_34]
.text:00409A38                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00409A3C
.text:00409A3C loc_409A3C:                             ; CODE XREF: sub_409710+31E↑j
.text:00409A3C                 inc     [esp+4Ch+var_34]
.text:00409A40                 mov     edx, [esp+4Ch+arg_4]
.text:00409A44                 cmp     [esp+4Ch+var_34], edx
.text:00409A48                 jnb     short loc_409A56
.text:00409A4A                 mov     edi, [esp+4Ch+arg_0]
.text:00409A4E                 mov     ecx, [esp+4Ch+var_34]
.text:00409A52                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00409A56
.text:00409A56 loc_409A56:                             ; CODE XREF: sub_409710+338↑j
.text:00409A56                 inc     [esp+4Ch+var_34]
.text:00409A5A                 mov     esi, [esp+4Ch+arg_4]
.text:00409A5E                 cmp     [esp+4Ch+var_34], esi
.text:00409A62                 jnb     short loc_409A70
.text:00409A64                 mov     ebx, [esp+4Ch+arg_0]
.text:00409A68                 mov     eax, [esp+4Ch+var_34]
.text:00409A6C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00409A70
.text:00409A70 loc_409A70:                             ; CODE XREF: sub_409710+352↑j
.text:00409A70                 inc     [esp+4Ch+var_34]
.text:00409A74                 mov     bl, 30h ; '0'
.text:00409A76                 lea     esi, [esi+0]
.text:00409A79                 lea     edi, [edi+0]
.text:00409A80
.text:00409A80 def_409C12:                             ; CODE XREF: sub_409710+105↑j
.text:00409A80                                         ; sub_409710+463↓j ...
.text:00409A80                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409A80                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409A85                 lea     eax, [ebp+1]
.text:00409A88                 jz      short loc_409AD0
.text:00409A8A                 mov     cl, bl
.text:00409A8C                 mov     edi, [esp+4Ch+arg_14]
.text:00409A90                 mov     esi, 1
.text:00409A95                 shr     cl, 5
.text:00409A98                 movzx   edx, cl
.text:00409A9B                 mov     ecx, ebx
.text:00409A9D                 and     ecx, 1Fh
.text:00409AA0                 shl     esi, cl
.text:00409AA2                 test    [edi+edx*4+4], esi
.text:00409AA6                 jz      short loc_409AC2
.text:00409AA8
.text:00409AA8 loc_409AA8:                             ; CODE XREF: sub_409710+3FC↓j
.text:00409AA8                 mov     edx, [esp+4Ch+arg_4]
.text:00409AAC                 cmp     [esp+4Ch+var_34], edx
.text:00409AB0                 jnb     short loc_409ABE
.text:00409AB2                 mov     edi, [esp+4Ch+arg_0]
.text:00409AB6                 mov     esi, [esp+4Ch+var_34]
.text:00409ABA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00409ABE
.text:00409ABE loc_409ABE:                             ; CODE XREF: sub_409710+3A0↑j
.text:00409ABE                 inc     [esp+4Ch+var_34]
.text:00409AC2
.text:00409AC2 loc_409AC2:                             ; CODE XREF: sub_409710+396↑j
.text:00409AC2                 lea     eax, [ebp+1]
.text:00409AC5                 lea     esi, [esi+0]
.text:00409AC9                 lea     edi, [edi+0]
.text:00409AD0
.text:00409AD0 loc_409AD0:                             ; CODE XREF: sub_409710+310↑j
.text:00409AD0                                         ; sub_409710+378↑j ...
.text:00409AD0                 mov     ebp, [esp+4Ch+arg_4]
.text:00409AD4                 cmp     [esp+4Ch+var_34], ebp
.text:00409AD8                 jnb     short loc_409AE5
.text:00409ADA                 mov     edx, [esp+4Ch+arg_0]
.text:00409ADE                 mov     ecx, [esp+4Ch+var_34]
.text:00409AE2                 mov     [ecx+edx], bl
.text:00409AE5
.text:00409AE5 loc_409AE5:                             ; CODE XREF: sub_409710+3C8↑j
.text:00409AE5                 inc     [esp+4Ch+var_34]
.text:00409AE9                 mov     ebp, eax
.text:00409AEB                 jmp     loc_4097A0
.text:00409AF0 ; ---------------------------------------------------------------------------
.text:00409AF0
.text:00409AF0 loc_409AF0:                             ; CODE XREF: sub_409710+105↑j
.text:00409AF0                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409AF0                 mov     dl, 61h ; 'a'   ; jumptable 00409815 case 7
.text:00409AF2                 lea     esi, [esi+0]
.text:00409AF9                 lea     edi, [edi+0]
.text:00409B00
.text:00409B00 loc_409B00:                             ; CODE XREF: sub_409710+400↓j
.text:00409B00                                         ; sub_409710+409↓j ...
.text:00409B00                 cmp     [esp+4Ch+var_21], 0
.text:00409B05                 lea     eax, [ebp+1]
.text:00409B08                 jz      short loc_409AD0
.text:00409B0A                 mov     bl, dl
.text:00409B0C                 jmp     short loc_409AA8
.text:00409B0E ; ---------------------------------------------------------------------------
.text:00409B0E
.text:00409B0E loc_409B0E:                             ; CODE XREF: sub_409710+105↑j
.text:00409B0E                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409B0E                 mov     dl, 62h ; 'b'   ; jumptable 00409815 case 8
.text:00409B10                 jmp     short loc_409B00
.text:00409B12 ; ---------------------------------------------------------------------------
.text:00409B12
.text:00409B12 loc_409B12:                             ; CODE XREF: sub_409710+105↑j
.text:00409B12                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409B12                 mov     dl, 74h ; 't'   ; jumptable 00409815 case 9
.text:00409B14
.text:00409B14 loc_409B14:                             ; CODE XREF: sub_409710+449↓j
.text:00409B14                                         ; sub_409710+455↓j ...
.text:00409B14                 cmp     [esp+4Ch+arg_10], 1
.text:00409B19                 jnz     short loc_409B00
.text:00409B1B
.text:00409B1B loc_409B1B:                             ; CODE XREF: sub_409710+45C↓j
.text:00409B1B                                         ; sub_409710+4C1↓j ...
.text:00409B1B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00409EE2 cases 91,92,94,96,124
.text:00409B23                 mov     eax, [esp+4Ch+arg_14]
.text:00409B27                 mov     edx, [esp+4Ch+arg_C]
.text:00409B2B                 mov     ecx, [esp+4Ch+Str]
.text:00409B2F                 mov     ebx, [esp+4Ch+arg_4]
.text:00409B33                 mov     [esp+4Ch+var_38], eax ; int
.text:00409B37                 mov     ebp, [esp+4Ch+arg_0]
.text:00409B3B                 mov     [esp+4Ch+State], edx ; int
.text:00409B3F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00409B43                 mov     [esp+4Ch+Type], ebx ; int
.text:00409B47                 mov     [esp+4Ch+C], ebp ; int
.text:00409B4A                 call    sub_409710
.text:00409B4F
.text:00409B4F loc_409B4F:                             ; CODE XREF: sub_409710+972↓j
.text:00409B4F                 add     esp, 3Ch
.text:00409B52                 pop     ebx
.text:00409B53                 pop     esi
.text:00409B54                 pop     edi
.text:00409B55                 pop     ebp
.text:00409B56                 retn
.text:00409B57 ; ---------------------------------------------------------------------------
.text:00409B57
.text:00409B57 loc_409B57:                             ; CODE XREF: sub_409710+105↑j
.text:00409B57                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409B57                 mov     dl, 6Eh ; 'n'   ; jumptable 00409815 case 10
.text:00409B59                 jmp     short loc_409B14
.text:00409B5B ; ---------------------------------------------------------------------------
.text:00409B5B
.text:00409B5B loc_409B5B:                             ; CODE XREF: sub_409710+105↑j
.text:00409B5B                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409B5B                 mov     dl, 76h ; 'v'   ; jumptable 00409815 case 11
.text:00409B5D                 jmp     short loc_409B00
.text:00409B5F ; ---------------------------------------------------------------------------
.text:00409B5F
.text:00409B5F loc_409B5F:                             ; CODE XREF: sub_409710+105↑j
.text:00409B5F                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409B5F                 mov     dl, 66h ; 'f'   ; jumptable 00409815 case 12
.text:00409B61                 jmp     short loc_409B00
.text:00409B63 ; ---------------------------------------------------------------------------
.text:00409B63
.text:00409B63 loc_409B63:                             ; CODE XREF: sub_409710+105↑j
.text:00409B63                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409B63                 mov     dl, 72h ; 'r'   ; jumptable 00409815 case 13
.text:00409B65                 jmp     short loc_409B14
.text:00409B67 ; ---------------------------------------------------------------------------
.text:00409B67
.text:00409B67 loc_409B67:                             ; CODE XREF: sub_409710+105↑j
.text:00409B67                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409B67                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409815 case 39
.text:00409B6C                 jz      short loc_409B1B ; jumptable 00409EE2 cases 91,92,94,96,124
.text:00409B6E                 cmp     [esp+4Ch+arg_10], 2
.text:00409B73                 jnz     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409B73                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409B79                 mov     edx, [esp+4Ch+arg_4]
.text:00409B7D                 cmp     [esp+4Ch+var_34], edx
.text:00409B81                 jnb     short loc_409B8F
.text:00409B83                 mov     ecx, [esp+4Ch+arg_0]
.text:00409B87                 mov     edi, [esp+4Ch+var_34]
.text:00409B8B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00409B8F
.text:00409B8F loc_409B8F:                             ; CODE XREF: sub_409710+471↑j
.text:00409B8F                 inc     [esp+4Ch+var_34]
.text:00409B93                 mov     eax, [esp+4Ch+arg_4]
.text:00409B97                 cmp     [esp+4Ch+var_34], eax
.text:00409B9B                 jnb     short loc_409BA9
.text:00409B9D                 mov     esi, [esp+4Ch+arg_0]
.text:00409BA1                 mov     edx, [esp+4Ch+var_34]
.text:00409BA5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00409BA9
.text:00409BA9 loc_409BA9:                             ; CODE XREF: sub_409710+48B↑j
.text:00409BA9                 inc     [esp+4Ch+var_34]
.text:00409BAD                 mov     edi, [esp+4Ch+arg_4]
.text:00409BB1                 cmp     [esp+4Ch+var_34], edi
.text:00409BB5                 jnb     short loc_409BC3
.text:00409BB7                 mov     ecx, [esp+4Ch+arg_0]
.text:00409BBB                 mov     eax, [esp+4Ch+var_34]
.text:00409BBF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00409BC3
.text:00409BC3 loc_409BC3:                             ; CODE XREF: sub_409710+4A5↑j
.text:00409BC3                                         ; sub_409710+5C4↓j ...
.text:00409BC3                 inc     [esp+4Ch+var_34]
.text:00409BC7                 jmp     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409BC7                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409BCC ; ---------------------------------------------------------------------------
.text:00409BCC
.text:00409BCC loc_409BCC:                             ; CODE XREF: sub_409710+105↑j
.text:00409BCC                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409BCC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409815 case 63
.text:00409BD1                 jz      loc_409B1B      ; jumptable 00409EE2 cases 91,92,94,96,124
.text:00409BD7                 cmp     [esp+4Ch+arg_10], 3
.text:00409BDC                 jnz     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409BDC                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409BE2                 lea     edx, [ebp+2]
.text:00409BE5                 cmp     edx, [esp+4Ch+arg_C]
.text:00409BE9                 jnb     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409BE9                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409BEF                 mov     esi, [esp+4Ch+Str]
.text:00409BF3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00409BF8                 jnz     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409BF8                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409BFE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00409C03                 movsx   eax, cl
.text:00409C06                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00409C09                 cmp     eax, 1Dh
.text:00409C0C                 ja      def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409C0C                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409C12                 jmp     ds:jpt_409C12[eax*4] ; switch jump
.text:00409C12 ; ---------------------------------------------------------------------------
.text:00409C19                 align 4
.text:00409C1C jpt_409C12      dd offset loc_409C94    ; DATA XREF: sub_409710+502↑r
.text:00409C1C                 dd offset def_409C12    ; jump table for switch statement
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset loc_409C94
.text:00409C1C                 dd offset loc_409C94
.text:00409C1C                 dd offset loc_409C94
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset loc_409C94
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset loc_409C94
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset def_409C12
.text:00409C1C                 dd offset loc_409C94
.text:00409C1C                 dd offset loc_409C94
.text:00409C1C                 dd offset loc_409C94
.text:00409C94 ; ---------------------------------------------------------------------------
.text:00409C94
.text:00409C94 loc_409C94:                             ; CODE XREF: sub_409710+502↑j
.text:00409C94                                         ; DATA XREF: sub_409710:jpt_409C12↑o
.text:00409C94                 mov     ebp, edx        ; jumptable 00409C12 cases 33,39-41,45,47,60-62
.text:00409C96                 mov     bl, cl
.text:00409C98                 mov     edx, [esp+4Ch+arg_4]
.text:00409C9C                 cmp     [esp+4Ch+var_34], edx
.text:00409CA0                 jnb     short loc_409CAE
.text:00409CA2                 mov     ecx, [esp+4Ch+arg_0]
.text:00409CA6                 mov     edi, [esp+4Ch+var_34]
.text:00409CAA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00409CAE
.text:00409CAE loc_409CAE:                             ; CODE XREF: sub_409710+590↑j
.text:00409CAE                 inc     [esp+4Ch+var_34]
.text:00409CB2                 mov     eax, [esp+4Ch+arg_4]
.text:00409CB6                 cmp     [esp+4Ch+var_34], eax
.text:00409CBA                 jnb     short loc_409CC8
.text:00409CBC                 mov     edx, [esp+4Ch+arg_0]
.text:00409CC0                 mov     esi, [esp+4Ch+var_34]
.text:00409CC4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00409CC8
.text:00409CC8 loc_409CC8:                             ; CODE XREF: sub_409710+5AA↑j
.text:00409CC8                 inc     [esp+4Ch+var_34]
.text:00409CCC                 mov     edi, [esp+4Ch+arg_4]
.text:00409CD0                 cmp     [esp+4Ch+var_34], edi
.text:00409CD4                 jnb     loc_409BC3
.text:00409CDA                 mov     eax, [esp+4Ch+arg_0]
.text:00409CDE                 mov     ecx, [esp+4Ch+var_34]
.text:00409CE2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00409CE6                 jmp     loc_409BC3
.text:00409CE6 ; ---------------------------------------------------------------------------
.text:00409CEB                 align 10h
.text:00409CF0
.text:00409CF0 def_409815:                             ; CODE XREF: sub_409710+FF↑j
.text:00409CF0                                         ; sub_409710+105↑j
.text:00409CF0                                         ; DATA XREF: ...
.text:00409CF0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00409815 default case, cases 1-6,14-31,64
.text:00409CF5                 jz      loc_409E20
.text:00409CFB                 mov     [esp+4Ch+var_28], 1
.text:00409D03                 mov     esi, ds:__mb_cur_max
.text:00409D09                 movzx   edx, bl
.text:00409D0C                 cmp     dword ptr [esi], 1
.text:00409D0F                 jz      loc_409E04
.text:00409D15                 mov     [esp+4Ch+Type], 157h ; Type
.text:00409D1D                 mov     [esp+4Ch+C], edx ; C
.text:00409D20                 call    _isctype
.text:00409D25
.text:00409D25 loc_409D25:                             ; CODE XREF: sub_409710+705↓j
.text:00409D25                 test    eax, eax
.text:00409D27                 setnz   [esp+4Ch+var_29]
.text:00409D2C
.text:00409D2C loc_409D2C:                             ; CODE XREF: sub_409710+7A5↓j
.text:00409D2C                 cmp     [esp+4Ch+var_21], 0
.text:00409D31                 lea     eax, [ebp+1]
.text:00409D34                 jz      loc_409AD0
.text:00409D3A                 cmp     [esp+4Ch+var_29], 0
.text:00409D3F                 jnz     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409D3F                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409D45
.text:00409D45 loc_409D45:                             ; CODE XREF: sub_409710+7AB↓j
.text:00409D45                 mov     eax, [esp+4Ch+var_28]
.text:00409D49                 lea     edx, [eax+ebp]
.text:00409D4C                 lea     esi, [esi+0]
.text:00409D50
.text:00409D50 loc_409D50:                             ; CODE XREF: sub_409710+6EF↓j
.text:00409D50                 cmp     [esp+4Ch+var_21], 0
.text:00409D55                 jz      short loc_409DD0
.text:00409D57                 cmp     [esp+4Ch+var_29], 0
.text:00409D5C                 jnz     short loc_409DD0
.text:00409D5E                 mov     edi, [esp+4Ch+arg_4]
.text:00409D62                 cmp     [esp+4Ch+var_34], edi
.text:00409D66                 jnb     short loc_409D74
.text:00409D68                 mov     esi, [esp+4Ch+arg_0]
.text:00409D6C                 mov     eax, [esp+4Ch+var_34]
.text:00409D70                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00409D74
.text:00409D74 loc_409D74:                             ; CODE XREF: sub_409710+656↑j
.text:00409D74                 inc     [esp+4Ch+var_34]
.text:00409D78                 mov     ecx, [esp+4Ch+arg_4]
.text:00409D7C                 cmp     [esp+4Ch+var_34], ecx
.text:00409D80                 jnb     short loc_409D95
.text:00409D82                 mov     cl, bl
.text:00409D84                 mov     esi, [esp+4Ch+arg_0]
.text:00409D88                 mov     edi, [esp+4Ch+var_34]
.text:00409D8C                 shr     cl, 6
.text:00409D8F                 add     cl, 30h ; '0'
.text:00409D92                 mov     [edi+esi], cl
.text:00409D95
.text:00409D95 loc_409D95:                             ; CODE XREF: sub_409710+670↑j
.text:00409D95                 inc     [esp+4Ch+var_34]
.text:00409D99                 mov     edi, [esp+4Ch+arg_4]
.text:00409D9D                 cmp     [esp+4Ch+var_34], edi
.text:00409DA1                 jnb     short loc_409DB9
.text:00409DA3                 mov     cl, bl
.text:00409DA5                 mov     esi, [esp+4Ch+arg_0]
.text:00409DA9                 shr     cl, 3
.text:00409DAC                 mov     edi, [esp+4Ch+var_34]
.text:00409DB0                 and     cl, 7
.text:00409DB3                 add     cl, 30h ; '0'
.text:00409DB6                 mov     [edi+esi], cl
.text:00409DB9
.text:00409DB9 loc_409DB9:                             ; CODE XREF: sub_409710+691↑j
.text:00409DB9                 inc     [esp+4Ch+var_34]
.text:00409DBD                 and     bl, 7
.text:00409DC0                 add     bl, 30h ; '0'
.text:00409DC3                 lea     esi, [esi+0]
.text:00409DC9                 lea     edi, [edi+0]
.text:00409DD0
.text:00409DD0 loc_409DD0:                             ; CODE XREF: sub_409710+645↑j
.text:00409DD0                                         ; sub_409710+64C↑j
.text:00409DD0                 lea     eax, [ebp+1]
.text:00409DD3                 cmp     edx, eax
.text:00409DD5                 jbe     loc_409AD0
.text:00409DDB                 mov     ebp, [esp+4Ch+arg_4]
.text:00409DDF                 cmp     [esp+4Ch+var_34], ebp
.text:00409DE3                 jnb     short loc_409DF0
.text:00409DE5                 mov     ecx, [esp+4Ch+arg_0]
.text:00409DE9                 mov     edi, [esp+4Ch+var_34]
.text:00409DED                 mov     [edi+ecx], bl
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: sub_409710+6D3↑j
.text:00409DF0                 inc     [esp+4Ch+var_34]
.text:00409DF4                 mov     ebp, eax
.text:00409DF6                 mov     eax, [esp+4Ch+Str]
.text:00409DFA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00409DFF                 jmp     loc_409D50
.text:00409E04 ; ---------------------------------------------------------------------------
.text:00409E04
.text:00409E04 loc_409E04:                             ; CODE XREF: sub_409710+5FF↑j
.text:00409E04                 mov     ecx, ds:_pctype
.text:00409E0A                 mov     edi, [ecx]
.text:00409E0C                 movzx   eax, word ptr [edi+edx*2]
.text:00409E10                 and     eax, 157h
.text:00409E15                 jmp     loc_409D25
.text:00409E15 ; ---------------------------------------------------------------------------
.text:00409E1A                 align 10h
.text:00409E20
.text:00409E20 loc_409E20:                             ; CODE XREF: sub_409710+5E5↑j
.text:00409E20                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00409E25                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00409E2D                 mov     [esp+4Ch+var_28], 0
.text:00409E35                 mov     [esp+4Ch+var_29], 1
.text:00409E3A                 jz      loc_409FCC
.text:00409E40
.text:00409E40 loc_409E40:                             ; CODE XREF: sub_409710+8CC↓j
.text:00409E40                 mov     ecx, [esp+4Ch+arg_C]
.text:00409E44                 lea     edx, [esp+4Ch+var_18]
.text:00409E48                 mov     edi, [esp+4Ch+Str]
.text:00409E4C                 mov     [esp+4Ch+State], edx ; State
.text:00409E50                 lea     esi, [esp+4Ch+var_18._State]
.text:00409E54                 sub     ecx, ebp
.text:00409E56                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00409E5A                 add     edi, ebp
.text:00409E5C                 mov     [esp+4Ch+var_30], edi
.text:00409E60                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00409E64                 mov     [esp+4Ch+C], esi ; DstCh
.text:00409E67                 call    mbrtowc
.text:00409E6C                 test    eax, eax
.text:00409E6E                 mov     edi, eax
.text:00409E70                 jz      short loc_409EB0
.text:00409E72                 cmp     eax, 0FFFFFFFFh
.text:00409E75                 jz      loc_409FC2
.text:00409E7B                 cmp     eax, 0FFFFFFFEh
.text:00409E7E                 jz      loc_409F82
.text:00409E84                 cmp     [esp+4Ch+arg_10], 1
.text:00409E89                 jz      short loc_409EC0
.text:00409E8B
.text:00409E8B loc_409E8B:                             ; CODE XREF: sub_409710+7B9↓j
.text:00409E8B                                         ; sub_409710+86D↓j
.text:00409E8B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00409E90                 mov     [esp+4Ch+Type], 157h ; Type
.text:00409E98                 mov     [esp+4Ch+C], ecx ; C
.text:00409E9B                 call    iswctype
.text:00409EA0                 test    eax, eax
.text:00409EA2                 jnz     short loc_409EA9
.text:00409EA4                 mov     [esp+4Ch+var_29], 0
.text:00409EA9
.text:00409EA9 loc_409EA9:                             ; CODE XREF: sub_409710+792↑j
.text:00409EA9                 mov     [esp+4Ch+var_28], edi
.text:00409EAD                 lea     esi, [esi+0]
.text:00409EB0
.text:00409EB0 loc_409EB0:                             ; CODE XREF: sub_409710+760↑j
.text:00409EB0                                         ; sub_409710+87B↓j ...
.text:00409EB0                 cmp     [esp+4Ch+var_28], 1
.text:00409EB5                 jbe     loc_409D2C
.text:00409EBB                 jmp     loc_409D45
.text:00409EC0 ; ---------------------------------------------------------------------------
.text:00409EC0
.text:00409EC0 loc_409EC0:                             ; CODE XREF: sub_409710+779↑j
.text:00409EC0                 cmp     [esp+4Ch+arg_10], eax
.text:00409EC4                 mov     edx, 1
.text:00409EC9                 jnb     short loc_409E8B
.text:00409ECB
.text:00409ECB loc_409ECB:                             ; CODE XREF: sub_409710+867↓j
.text:00409ECB                 mov     ecx, [esp+4Ch+Str]
.text:00409ECF                 lea     esi, [edx+ebp]
.text:00409ED2                 movsx   eax, byte ptr [esi+ecx]
.text:00409ED6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00409ED9                 cmp     eax, 21h
.text:00409EDC                 ja      def_409EE2      ; jumptable 00409EE2 default case, cases 93,95,97-123
.text:00409EE2                 jmp     ds:jpt_409EE2[eax*4] ; switch jump
.text:00409EE2 ; ---------------------------------------------------------------------------
.text:00409EE9                 align 4
.text:00409EEC jpt_409EE2      dd offset loc_409B1B    ; DATA XREF: sub_409710+7D2↑r
.text:00409EEC                 dd offset loc_409B1B    ; jump table for switch statement
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset loc_409B1B
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset loc_409B1B
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset def_409EE2
.text:00409EEC                 dd offset loc_409B1B
.text:00409F74 ; ---------------------------------------------------------------------------
.text:00409F74
.text:00409F74 def_409EE2:                             ; CODE XREF: sub_409710+7CC↑j
.text:00409F74                                         ; sub_409710+7D2↑j
.text:00409F74                                         ; DATA XREF: ...
.text:00409F74                 inc     edx             ; jumptable 00409EE2 default case, cases 93,95,97-123
.text:00409F75                 cmp     edx, edi
.text:00409F77                 jb      loc_409ECB
.text:00409F7D                 jmp     loc_409E8B
.text:00409F82 ; ---------------------------------------------------------------------------
.text:00409F82
.text:00409F82 loc_409F82:                             ; CODE XREF: sub_409710+76E↑j
.text:00409F82                 cmp     ebp, [esp+4Ch+arg_C]
.text:00409F86                 mov     [esp+4Ch+var_29], 0
.text:00409F8B                 jnb     loc_409EB0
.text:00409F91                 mov     eax, [esp+4Ch+var_30]
.text:00409F95                 cmp     byte ptr [eax], 0
.text:00409F98                 jz      loc_409EB0
.text:00409F9E
.text:00409F9E loc_409F9E:                             ; CODE XREF: sub_409710+8AB↓j
.text:00409F9E                 inc     [esp+4Ch+var_28]
.text:00409FA2                 mov     esi, [esp+4Ch+var_28]
.text:00409FA6                 lea     eax, [esi+ebp]
.text:00409FA9                 cmp     eax, [esp+4Ch+arg_C]
.text:00409FAD                 jnb     loc_409EB0
.text:00409FB3                 mov     edi, [esp+4Ch+Str]
.text:00409FB7                 cmp     byte ptr [eax+edi], 0
.text:00409FBB                 jnz     short loc_409F9E
.text:00409FBD                 jmp     loc_409EB0
.text:00409FC2 ; ---------------------------------------------------------------------------
.text:00409FC2
.text:00409FC2 loc_409FC2:                             ; CODE XREF: sub_409710+765↑j
.text:00409FC2                 mov     [esp+4Ch+var_29], 0
.text:00409FC7                 jmp     loc_409EB0
.text:00409FCC ; ---------------------------------------------------------------------------
.text:00409FCC
.text:00409FCC loc_409FCC:                             ; CODE XREF: sub_409710+72A↑j
.text:00409FCC                 mov     edx, [esp+4Ch+Str]
.text:00409FD0                 mov     [esp+4Ch+C], edx ; Str
.text:00409FD3                 call    strlen
.text:00409FD8                 mov     [esp+4Ch+arg_C], eax
.text:00409FDC                 jmp     loc_409E40
.text:00409FE1 ; ---------------------------------------------------------------------------
.text:00409FE1
.text:00409FE1 loc_409FE1:                             ; CODE XREF: sub_409710+105↑j
.text:00409FE1                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409FE1                 mov     dl, bl          ; jumptable 00409815 case 92
.text:00409FE3                 jmp     loc_409B14
.text:00409FE8 ; ---------------------------------------------------------------------------
.text:00409FE8
.text:00409FE8 loc_409FE8:                             ; CODE XREF: sub_409710+105↑j
.text:00409FE8                                         ; sub_409710+902↓j
.text:00409FE8                                         ; DATA XREF: ...
.text:00409FE8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409815 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00409FED                 jnz     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:00409FED                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:00409FF3                 jmp     loc_409B1B      ; jumptable 00409EE2 cases 91,92,94,96,124
.text:00409FF8 ; ---------------------------------------------------------------------------
.text:00409FF8
.text:00409FF8 loc_409FF8:                             ; CODE XREF: sub_409710+105↑j
.text:00409FF8                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:00409FF8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00409815 cases 123,125
.text:00409FFD                 jz      short loc_40A014
.text:00409FFF                 cmp     [esp+4Ch+arg_C], 1
.text:0040A004
.text:0040A004 loc_40A004:                             ; CODE XREF: sub_409710+90C↓j
.text:0040A004                 jnz     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:0040A004                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:0040A00A
.text:0040A00A loc_40A00A:                             ; CODE XREF: sub_409710+105↑j
.text:0040A00A                                         ; DATA XREF: sub_409710:jpt_409815↑o
.text:0040A00A                 test    ebp, ebp        ; jumptable 00409815 cases 35,126
.text:0040A00C                 jnz     def_409C12      ; jumptable 00409815 cases 37,43-58,65-90,93,95,97-122
.text:0040A00C                                         ; jumptable 00409C12 default case, cases 34-38,42-44,46,48-59
.text:0040A012                 jmp     short loc_409FE8 ; jumptable 00409815 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040A014 ; ---------------------------------------------------------------------------
.text:0040A014
.text:0040A014 loc_40A014:                             ; CODE XREF: sub_409710+8ED↑j
.text:0040A014                 mov     esi, [esp+4Ch+Str]
.text:0040A018                 cmp     byte ptr [esi+1], 0
.text:0040A01C                 jmp     short loc_40A004
.text:0040A01E ; ---------------------------------------------------------------------------
.text:0040A01E
.text:0040A01E loc_40A01E:                             ; CODE XREF: sub_409710:loc_4097AF↑j
.text:0040A01E                 test    ebp, ebp
.text:0040A020                 jnz     short loc_40A02D
.text:0040A022                 cmp     [esp+4Ch+arg_10], 1
.text:0040A027                 jz      loc_409B1B      ; jumptable 00409EE2 cases 91,92,94,96,124
.text:0040A02D
.text:0040A02D loc_40A02D:                             ; CODE XREF: sub_409710+910↑j
.text:0040A02D                 mov     esi, [esp+4Ch+var_1C]
.text:0040A031                 test    esi, esi
.text:0040A033                 jz      short loc_40A068
.text:0040A035                 mov     edi, [esp+4Ch+var_1C]
.text:0040A039                 movzx   eax, byte ptr [edi]
.text:0040A03C                 test    al, al
.text:0040A03E                 jz      short loc_40A068
.text:0040A040
.text:0040A040 loc_40A040:                             ; CODE XREF: sub_409710+956↓j
.text:0040A040                 mov     ebp, [esp+4Ch+arg_4]
.text:0040A044                 cmp     [esp+4Ch+var_34], ebp
.text:0040A048                 jnb     short loc_40A055
.text:0040A04A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040A04E                 mov     ebx, [esp+4Ch+var_34]
.text:0040A052                 mov     [ebx+ecx], al
.text:0040A055
.text:0040A055 loc_40A055:                             ; CODE XREF: sub_409710+938↑j
.text:0040A055                 inc     [esp+4Ch+var_1C]
.text:0040A059                 inc     [esp+4Ch+var_34]
.text:0040A05D                 mov     edx, [esp+4Ch+var_1C]
.text:0040A061                 movzx   eax, byte ptr [edx]
.text:0040A064                 test    al, al
.text:0040A066                 jnz     short loc_40A040
.text:0040A068
.text:0040A068 loc_40A068:                             ; CODE XREF: sub_409710+923↑j
.text:0040A068                                         ; sub_409710+92E↑j
.text:0040A068                 mov     eax, [esp+4Ch+arg_4]
.text:0040A06C                 cmp     [esp+4Ch+var_34], eax
.text:0040A070                 jnb     short loc_40A07E
.text:0040A072                 mov     edi, [esp+4Ch+arg_0]
.text:0040A076                 mov     esi, [esp+4Ch+var_34]
.text:0040A07A                 mov     byte ptr [esi+edi], 0
.text:0040A07E
.text:0040A07E loc_40A07E:                             ; CODE XREF: sub_409710+960↑j
.text:0040A07E                 mov     eax, [esp+4Ch+var_34]
.text:0040A082                 jmp     loc_409B4F
.text:0040A087 ; ---------------------------------------------------------------------------
.text:0040A087
.text:0040A087 loc_40A087:                             ; CODE XREF: sub_409710+95↑j
.text:0040A087                 mov     ebx, [esp+4Ch+Str]
.text:0040A08B                 cmp     byte ptr [ebp+ebx+0], 0
.text:0040A090                 jmp     loc_4097AF
.text:0040A095 ; ---------------------------------------------------------------------------
.text:0040A095
.text:0040A095 loc_40A095:                             ; CODE XREF: sub_409710+3D↑j
.text:0040A095                                         ; DATA XREF: sub_409710:jpt_40974D↑o
.text:0040A095                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040974D case 2
.text:0040A099                 cmp     [esp+4Ch+var_34], edx
.text:0040A09D                 jnb     short loc_40A0A6
.text:0040A09F                 mov     ecx, [esp+4Ch+arg_0]
.text:0040A0A3                 mov     byte ptr [ecx], 27h ; '''
.text:0040A0A6
.text:0040A0A6 loc_40A0A6:                             ; CODE XREF: sub_409710+98D↑j
.text:0040A0A6                 mov     [esp+4Ch+var_34], 1
.text:0040A0AE                 mov     [esp+4Ch+var_1C], 4096FEh
.text:0040A0B6                 jmp     loc_409796
.text:0040A0BB ; ---------------------------------------------------------------------------
.text:0040A0BB
.text:0040A0BB loc_40A0BB:                             ; CODE XREF: sub_409710+3D↑j
.text:0040A0BB                                         ; DATA XREF: sub_409710:jpt_40974D↑o
.text:0040A0BB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040974D case 4
.text:0040A0C0                 jmp     def_40974D      ; jumptable 0040974D default case, cases 0,1
.text:0040A0C5 ; ---------------------------------------------------------------------------
.text:0040A0C5
.text:0040A0C5 loc_40A0C5:                             ; CODE XREF: sub_409710+3D↑j
.text:0040A0C5                                         ; DATA XREF: sub_409710:jpt_40974D↑o
.text:0040A0C5                 mov     [esp+4Ch+C], 409700h ; jumptable 0040974D cases 5,6
.text:0040A0CC                 call    ds:libintl_gettext
.text:0040A0D2                 cmp     eax, 409700h
.text:0040A0D7                 mov     edi, eax
.text:0040A0D9                 jz      short loc_40A150
.text:0040A0DB
.text:0040A0DB loc_40A0DB:                             ; CODE XREF: sub_409710+A45↓j
.text:0040A0DB                                         ; sub_409710+A4C↓j
.text:0040A0DB                 mov     [esp+4Ch+C], 4096FEh
.text:0040A0E2                 call    ds:libintl_gettext
.text:0040A0E8                 cmp     eax, 4096FEh
.text:0040A0ED                 mov     edx, eax
.text:0040A0EF                 jz      short loc_40A142
.text:0040A0F1
.text:0040A0F1 loc_40A0F1:                             ; CODE XREF: sub_409710+A37↓j
.text:0040A0F1                                         ; sub_409710+A3E↓j
.text:0040A0F1                 mov     [esp+4Ch+var_1C], edi
.text:0040A0F5                 cmp     byte ptr [edi], 0
.text:0040A0F8                 jz      short loc_40A128
.text:0040A0FA
.text:0040A0FA loc_40A0FA:                             ; CODE XREF: sub_409710+A16↓j
.text:0040A0FA                 mov     ecx, [esp+4Ch+arg_4]
.text:0040A0FE                 cmp     [esp+4Ch+var_34], ecx
.text:0040A102                 jnb     short loc_40A117
.text:0040A104                 mov     ebp, [esp+4Ch+var_1C]
.text:0040A108                 mov     edi, [esp+4Ch+arg_0]
.text:0040A10C                 mov     esi, [esp+4Ch+var_34]
.text:0040A110                 movzx   ebx, byte ptr [ebp+0]
.text:0040A114                 mov     [esi+edi], bl
.text:0040A117
.text:0040A117 loc_40A117:                             ; CODE XREF: sub_409710+9F2↑j
.text:0040A117                 inc     [esp+4Ch+var_1C]
.text:0040A11B                 inc     [esp+4Ch+var_34]
.text:0040A11F                 mov     eax, [esp+4Ch+var_1C]
.text:0040A123                 cmp     byte ptr [eax], 0
.text:0040A126                 jnz     short loc_40A0FA
.text:0040A128
.text:0040A128 loc_40A128:                             ; CODE XREF: sub_409710+9E8↑j
.text:0040A128                 mov     [esp+4Ch+var_21], 1
.text:0040A12D                 mov     [esp+4Ch+var_1C], edx
.text:0040A131                 mov     [esp+4Ch+C], edx ; Str
.text:0040A134                 call    strlen
.text:0040A139                 mov     [esp+4Ch+var_20], eax
.text:0040A13D                 jmp     def_40974D      ; jumptable 0040974D default case, cases 0,1
.text:0040A142 ; ---------------------------------------------------------------------------
.text:0040A142
.text:0040A142 loc_40A142:                             ; CODE XREF: sub_409710+9DF↑j
.text:0040A142                 cmp     [esp+4Ch+arg_10], 6
.text:0040A147                 jnz     short loc_40A0F1
.text:0040A149                 mov     edx, offset asc_4096FC ; "\"'`"
.text:0040A14E                 jmp     short loc_40A0F1
.text:0040A150 ; ---------------------------------------------------------------------------
.text:0040A150
.text:0040A150 loc_40A150:                             ; CODE XREF: sub_409710+9C9↑j
.text:0040A150                 cmp     [esp+4Ch+arg_10], 6
.text:0040A155                 jnz     short loc_40A0DB
.text:0040A157                 mov     edi, offset asc_4096FC ; "\"'`"
.text:0040A15C                 jmp     loc_40A0DB
.text:0040A15C sub_409710      endp
.text:0040A15C
.text:0040A161 ; ---------------------------------------------------------------------------
.text:0040A161                 jmp     short loc_40A170
.text:0040A161 ; ---------------------------------------------------------------------------
.text:0040A163                 align 10h
.text:0040A170
.text:0040A170 loc_40A170:                             ; CODE XREF: .text:0040A161↑j
.text:0040A170                 sub     esp, 0Ch
.text:0040A173                 mov     [esp+4], ebx
.text:0040A177                 mov     [esp+8], esi
.text:0040A17B                 call    _errno
.text:0040A180                 mov     esi, [eax]
.text:0040A182                 mov     dword ptr [esp], 24h ; '$'
.text:0040A189                 call    sub_407390
.text:0040A18E                 mov     edx, [esp+10h]
.text:0040A192                 mov     ebx, eax
.text:0040A194                 test    edx, edx
.text:0040A196                 jz      short loc_40A1E1
.text:0040A198
.text:0040A198 loc_40A198:                             ; CODE XREF: .text:0040A1E6↓j
.text:0040A198                 mov     ecx, [edx]
.text:0040A19A                 mov     [ebx], ecx
.text:0040A19C                 mov     ecx, [edx+4]
.text:0040A19F                 mov     [ebx+4], ecx
.text:0040A1A2                 mov     ecx, [edx+8]
.text:0040A1A5                 mov     [ebx+8], ecx
.text:0040A1A8                 mov     ecx, [edx+0Ch]
.text:0040A1AB                 mov     [ebx+0Ch], ecx
.text:0040A1AE                 mov     ecx, [edx+10h]
.text:0040A1B1                 mov     [ebx+10h], ecx
.text:0040A1B4                 mov     ecx, [edx+14h]
.text:0040A1B7                 mov     [ebx+14h], ecx
.text:0040A1BA                 mov     ecx, [edx+18h]
.text:0040A1BD                 mov     [ebx+18h], ecx
.text:0040A1C0                 mov     ecx, [edx+1Ch]
.text:0040A1C3                 mov     [ebx+1Ch], ecx
.text:0040A1C6                 mov     ecx, [edx+20h]
.text:0040A1C9                 mov     [ebx+20h], ecx
.text:0040A1CC                 call    _errno
.text:0040A1D1                 mov     [eax], esi
.text:0040A1D3                 mov     esi, [esp+8]
.text:0040A1D7                 mov     eax, ebx
.text:0040A1D9                 mov     ebx, [esp+4]
.text:0040A1DD                 add     esp, 0Ch
.text:0040A1E0                 retn
.text:0040A1E1 ; ---------------------------------------------------------------------------
.text:0040A1E1
.text:0040A1E1 loc_40A1E1:                             ; CODE XREF: .text:0040A196↑j
.text:0040A1E1                 mov     edx, offset dword_4161C0
.text:0040A1E6                 jmp     short loc_40A198
.text:0040A1E6 ; ---------------------------------------------------------------------------
.text:0040A1E8                 align 10h
.text:0040A1F0                 mov     eax, [esp+4]
.text:0040A1F4                 test    eax, eax
.text:0040A1F6                 jz      short loc_40A200
.text:0040A1F8
.text:0040A1F8 loc_40A1F8:                             ; CODE XREF: .text:0040A205↓j
.text:0040A1F8                 mov     eax, [eax]
.text:0040A1FA                 retn
.text:0040A1FA ; ---------------------------------------------------------------------------
.text:0040A1FB                 align 10h
.text:0040A200
.text:0040A200 loc_40A200:                             ; CODE XREF: .text:0040A1F6↑j
.text:0040A200                 mov     eax, offset dword_4161C0
.text:0040A205                 jmp     short loc_40A1F8
.text:0040A205 ; ---------------------------------------------------------------------------
.text:0040A207                 align 10h
.text:0040A210                 mov     edx, [esp+4]
.text:0040A214                 test    edx, edx
.text:0040A216                 jz      short loc_40A220
.text:0040A218
.text:0040A218 loc_40A218:                             ; CODE XREF: .text:0040A225↓j
.text:0040A218                 mov     ecx, [esp+8]
.text:0040A21C                 mov     [edx], ecx
.text:0040A21E                 retn
.text:0040A21E ; ---------------------------------------------------------------------------
.text:0040A21F                 align 10h
.text:0040A220
.text:0040A220 loc_40A220:                             ; CODE XREF: .text:0040A216↑j
.text:0040A220                 mov     edx, offset dword_4161C0
.text:0040A225                 jmp     short loc_40A218
.text:0040A225 ; ---------------------------------------------------------------------------
.text:0040A227                 align 10h
.text:0040A230                 sub     esp, 8
.text:0040A233                 mov     eax, [esp+0Ch]
.text:0040A237                 movzx   ecx, byte ptr [esp+10h]
.text:0040A23C                 mov     [esp], ebx
.text:0040A23F                 mov     ebx, [esp+14h]
.text:0040A243                 mov     [esp+4], esi
.text:0040A247                 mov     dl, cl
.text:0040A249                 shr     dl, 5
.text:0040A24C                 movzx   edx, dl
.text:0040A24F                 shl     edx, 2
.text:0040A252                 test    eax, eax
.text:0040A254                 lea     esi, [edx+eax+4]
.text:0040A258                 jz      short loc_40A280
.text:0040A25A
.text:0040A25A loc_40A25A:                             ; CODE XREF: .text:0040A286↓j
.text:0040A25A                 mov     edx, [esi]
.text:0040A25C                 and     ecx, 1Fh
.text:0040A25F                 and     ebx, 1
.text:0040A262                 mov     eax, edx
.text:0040A264                 shr     eax, cl
.text:0040A266                 and     eax, 1
.text:0040A269                 xor     ebx, eax
.text:0040A26B                 shl     ebx, cl
.text:0040A26D                 xor     edx, ebx
.text:0040A26F                 mov     [esi], edx
.text:0040A271                 mov     ebx, [esp]
.text:0040A274                 mov     esi, [esp+4]
.text:0040A278                 add     esp, 8
.text:0040A27B                 retn
.text:0040A27B ; ---------------------------------------------------------------------------
.text:0040A27C                 align 10h
.text:0040A280
.text:0040A280 loc_40A280:                             ; CODE XREF: .text:0040A258↑j
.text:0040A280                 lea     esi, dword_4161C4[edx]
.text:0040A286                 jmp     short loc_40A25A
.text:0040A286 ; ---------------------------------------------------------------------------
.text:0040A288                 align 10h
.text:0040A290                 sub     esp, 2Ch
.text:0040A293                 mov     [esp+24h], ebx
.text:0040A297                 mov     ebx, [esp+40h]
.text:0040A29B                 mov     [esp+28h], esi
.text:0040A29F                 test    ebx, ebx
.text:0040A2A1                 jz      short loc_40A2F0
.text:0040A2A3
.text:0040A2A3 loc_40A2A3:                             ; CODE XREF: .text:0040A2F5↓j
.text:0040A2A3                 call    _errno
.text:0040A2A8                 mov     esi, [eax]
.text:0040A2AA                 mov     [esp+14h], ebx
.text:0040A2AE                 mov     edx, [ebx]
.text:0040A2B0                 mov     ecx, [esp+38h]
.text:0040A2B4                 mov     ebx, [esp+3Ch]
.text:0040A2B8                 mov     [esp+10h], edx
.text:0040A2BC                 mov     edx, [esp+34h]
.text:0040A2C0                 mov     [esp+0Ch], ebx
.text:0040A2C4                 mov     [esp+8], ecx
.text:0040A2C8                 mov     [esp+4], edx
.text:0040A2CC                 mov     edx, [esp+30h]
.text:0040A2D0                 mov     [esp], edx
.text:0040A2D3                 call    sub_409710
.text:0040A2D8                 mov     ebx, eax
.text:0040A2DA                 call    _errno
.text:0040A2DF                 mov     [eax], esi
.text:0040A2E1                 mov     esi, [esp+28h]
.text:0040A2E5                 mov     eax, ebx
.text:0040A2E7                 mov     ebx, [esp+24h]
.text:0040A2EB                 add     esp, 2Ch
.text:0040A2EE                 retn
.text:0040A2EE ; ---------------------------------------------------------------------------
.text:0040A2EF                 align 10h
.text:0040A2F0
.text:0040A2F0 loc_40A2F0:                             ; CODE XREF: .text:0040A2A1↑j
.text:0040A2F0                 mov     ebx, offset dword_4161C0
.text:0040A2F5                 jmp     short loc_40A2A3
.text:0040A2F5 ; ---------------------------------------------------------------------------
.text:0040A2F7                 align 10h
.text:0040A300                 push    ebp
.text:0040A301                 push    edi
.text:0040A302                 push    esi
.text:0040A303                 push    ebx
.text:0040A304                 sub     esp, 2Ch
.text:0040A307                 mov     ebp, [esp+48h]
.text:0040A30B                 call    _errno
.text:0040A310                 mov     edx, [eax]
.text:0040A312                 test    ebp, ebp
.text:0040A314                 mov     ebx, ebp
.text:0040A316                 mov     [esp+28h], edx
.text:0040A31A                 jz      loc_40A3D0
.text:0040A320
.text:0040A320 loc_40A320:                             ; CODE XREF: .text:0040A3D5↓j
.text:0040A320                 call    _errno
.text:0040A325                 mov     edi, [eax]
.text:0040A327                 mov     esi, ebp
.text:0040A329                 mov     [esp+14h], ebx
.text:0040A32D                 mov     ecx, [ebx]
.text:0040A32F                 mov     dword ptr [esp], 0
.text:0040A336                 mov     edx, [esp+44h]
.text:0040A33A                 mov     dword ptr [esp+4], 0
.text:0040A342                 mov     eax, [esp+40h]
.text:0040A346                 mov     [esp+10h], ecx
.text:0040A34A                 mov     [esp+0Ch], edx
.text:0040A34E                 mov     [esp+8], eax
.text:0040A352                 call    sub_409710
.text:0040A357                 mov     ebx, eax
.text:0040A359                 call    _errno
.text:0040A35E                 mov     [eax], edi
.text:0040A360                 lea     edi, [ebx+1]
.text:0040A363                 mov     [esp], edi
.text:0040A366                 call    sub_407390
.text:0040A36B                 mov     [esp+24h], eax
.text:0040A36F                 test    ebp, ebp
.text:0040A371                 jz      short loc_40A3C2
.text:0040A373
.text:0040A373 loc_40A373:                             ; CODE XREF: .text:0040A3C7↓j
.text:0040A373                 call    _errno
.text:0040A378                 mov     ebp, [eax]
.text:0040A37A                 mov     [esp+14h], esi
.text:0040A37E                 mov     ecx, [esi]
.text:0040A380                 mov     [esp+4], edi
.text:0040A384                 mov     edx, [esp+44h]
.text:0040A388                 mov     esi, [esp+24h]
.text:0040A38C                 mov     [esp+10h], ecx
.text:0040A390                 mov     eax, [esp+40h]
.text:0040A394                 mov     [esp+0Ch], edx
.text:0040A398                 mov     [esp], esi
.text:0040A39B                 mov     [esp+8], eax
.text:0040A39F                 call    sub_409710
.text:0040A3A4                 call    _errno
.text:0040A3A9                 mov     [eax], ebp
.text:0040A3AB                 call    _errno
.text:0040A3B0                 mov     ebx, [esp+28h]
.text:0040A3B4                 mov     [eax], ebx
.text:0040A3B6                 mov     eax, [esp+24h]
.text:0040A3BA                 add     esp, 2Ch
.text:0040A3BD                 pop     ebx
.text:0040A3BE                 pop     esi
.text:0040A3BF                 pop     edi
.text:0040A3C0                 pop     ebp
.text:0040A3C1                 retn
.text:0040A3C2 ; ---------------------------------------------------------------------------
.text:0040A3C2
.text:0040A3C2 loc_40A3C2:                             ; CODE XREF: .text:0040A371↑j
.text:0040A3C2                 mov     esi, offset dword_4161C0
.text:0040A3C7                 jmp     short loc_40A373
.text:0040A3C7 ; ---------------------------------------------------------------------------
.text:0040A3C9                 align 10h
.text:0040A3D0
.text:0040A3D0 loc_40A3D0:                             ; CODE XREF: .text:0040A31A↑j
.text:0040A3D0                 mov     ebx, offset dword_4161C0
.text:0040A3D5                 jmp     loc_40A320
.text:0040A3D5 ; ---------------------------------------------------------------------------
.text:0040A3DA                 align 10h
.text:0040A3E0                 sub     esp, 1Ch
.text:0040A3E3                 mov     edx, [esp+24h]
.text:0040A3E7                 mov     dword ptr [esp+0Ch], offset dword_4161C0
.text:0040A3EF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A3F7                 mov     [esp+4], edx
.text:0040A3FB                 mov     edx, [esp+20h]
.text:0040A3FF                 mov     [esp], edx
.text:0040A402                 call    sub_40A850
.text:0040A407                 add     esp, 1Ch
.text:0040A40A                 retn
.text:0040A40A ; ---------------------------------------------------------------------------
.text:0040A40B                 align 10h
.text:0040A410                 sub     esp, 1Ch
.text:0040A413                 mov     edx, [esp+20h]
.text:0040A417                 mov     dword ptr [esp+0Ch], offset dword_4161C0
.text:0040A41F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A427                 mov     [esp+4], edx
.text:0040A42B                 mov     dword ptr [esp], 0
.text:0040A432                 call    sub_40A850
.text:0040A437                 add     esp, 1Ch
.text:0040A43A                 retn
.text:0040A43A ; ---------------------------------------------------------------------------
.text:0040A43B                 align 10h
.text:0040A440
.text:0040A440 ; =============== S U B R O U T I N E =======================================
.text:0040A440
.text:0040A440
.text:0040A440 ; int __cdecl sub_40A440(int, int, char *)
.text:0040A440 sub_40A440      proc near               ; CODE XREF: .text:00406F0E↑p
.text:0040A440                                         ; sub_4070C0+96↑p ...
.text:0040A440
.text:0040A440 var_BC          = dword ptr -0BCh
.text:0040A440 var_B8          = dword ptr -0B8h
.text:0040A440 var_B4          = dword ptr -0B4h
.text:0040A440 var_B0          = dword ptr -0B0h
.text:0040A440 var_AC          = dword ptr -0ACh
.text:0040A440 var_A8          = dword ptr -0A8h
.text:0040A440 var_A4          = dword ptr -0A4h
.text:0040A440 var_A0          = dword ptr -0A0h
.text:0040A440 var_9C          = dword ptr -9Ch
.text:0040A440 var_98          = dword ptr -98h
.text:0040A440 var_94          = dword ptr -94h
.text:0040A440 var_90          = dword ptr -90h
.text:0040A440 var_8C          = dword ptr -8Ch
.text:0040A440 var_7C          = dword ptr -7Ch
.text:0040A440 var_78          = dword ptr -78h
.text:0040A440 var_74          = dword ptr -74h
.text:0040A440 var_70          = dword ptr -70h
.text:0040A440 var_6C          = dword ptr -6Ch
.text:0040A440 var_68          = dword ptr -68h
.text:0040A440 var_64          = dword ptr -64h
.text:0040A440 var_60          = dword ptr -60h
.text:0040A440 var_5C          = dword ptr -5Ch
.text:0040A440 var_4C          = dword ptr -4Ch
.text:0040A440 var_48          = dword ptr -48h
.text:0040A440 var_44          = dword ptr -44h
.text:0040A440 var_40          = dword ptr -40h
.text:0040A440 var_3C          = dword ptr -3Ch
.text:0040A440 var_38          = dword ptr -38h
.text:0040A440 var_34          = dword ptr -34h
.text:0040A440 var_30          = dword ptr -30h
.text:0040A440 var_2C          = dword ptr -2Ch
.text:0040A440 arg_0           = dword ptr  4
.text:0040A440 arg_4           = dword ptr  8
.text:0040A440 arg_8           = dword ptr  0Ch
.text:0040A440
.text:0040A440                 push    ebp
.text:0040A441                 xor     eax, eax
.text:0040A443                 mov     ecx, 8
.text:0040A448                 push    edi
.text:0040A449                 push    esi
.text:0040A44A                 push    ebx
.text:0040A44B                 sub     esp, 0ACh
.text:0040A451                 mov     ebp, [esp+0BCh+arg_4]
.text:0040A458                 cld
.text:0040A459                 lea     edi, [esp+0BCh+var_A8]
.text:0040A45D                 mov     [esp+0BCh+var_AC], ebp
.text:0040A461                 rep stosd
.text:0040A463                 mov     eax, [esp+0BCh+var_8C]
.text:0040A467                 mov     edi, [esp+0BCh+var_AC]
.text:0040A46B                 mov     esi, [esp+0BCh+var_A8]
.text:0040A46F                 mov     [esp+0BCh+var_5C], eax
.text:0040A473                 mov     ebp, [esp+0BCh+var_A4]
.text:0040A477                 mov     eax, [esp+0BCh+var_AC]
.text:0040A47B                 mov     [esp+0BCh+var_7C], edi
.text:0040A47F                 mov     ecx, [esp+0BCh+var_94]
.text:0040A483                 mov     edi, [esp+0BCh+var_A0]
.text:0040A487                 mov     [esp+0BCh+var_78], esi
.text:0040A48B                 mov     edx, [esp+0BCh+var_90]
.text:0040A48F                 mov     esi, [esp+0BCh+var_9C]
.text:0040A493                 mov     [esp+0BCh+var_4C], eax
.text:0040A497                 mov     ebx, [esp+0BCh+var_98]
.text:0040A49B                 mov     eax, [esp+0BCh+var_A8]
.text:0040A49F                 mov     [esp+0BCh+var_74], ebp
.text:0040A4A3                 mov     [esp+0BCh+var_70], edi
.text:0040A4A7                 mov     [esp+0BCh+var_6C], esi
.text:0040A4AB                 mov     [esp+0BCh+var_68], ebx
.text:0040A4AF                 mov     [esp+0BCh+var_64], ecx
.text:0040A4B3                 mov     [esp+0BCh+var_60], edx
.text:0040A4B7                 mov     [esp+0BCh+var_48], eax
.text:0040A4BB                 mov     [esp+0BCh+var_44], ebp
.text:0040A4BF                 mov     [esp+0BCh+var_40], edi
.text:0040A4C3                 mov     [esp+0BCh+var_3C], esi
.text:0040A4CA                 mov     [esp+0BCh+var_38], ebx
.text:0040A4D1                 mov     ebx, [esp+0BCh+var_8C]
.text:0040A4D5                 mov     [esp+0BCh+var_30], edx
.text:0040A4DC                 mov     edx, [esp+0BCh+arg_8]
.text:0040A4E3                 mov     [esp+0BCh+var_34], ecx
.text:0040A4EA                 lea     ecx, [esp+0BCh+var_4C]
.text:0040A4EE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040A4F2                 mov     edx, [esp+0BCh+arg_0]
.text:0040A4F9                 mov     [esp+0BCh+var_2C], ebx
.text:0040A500                 mov     [esp+0BCh+var_B0], ecx ; int
.text:0040A504                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040A50C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040A50F                 call    sub_40A850
.text:0040A514                 add     esp, 0ACh
.text:0040A51A                 pop     ebx
.text:0040A51B                 pop     esi
.text:0040A51C                 pop     edi
.text:0040A51D                 pop     ebp
.text:0040A51E                 retn
.text:0040A51E sub_40A440      endp
.text:0040A51E
.text:0040A51E ; ---------------------------------------------------------------------------
.text:0040A51F                 align 10h
.text:0040A520                 push    ebp
.text:0040A521                 xor     eax, eax
.text:0040A523                 mov     ecx, 8
.text:0040A528                 push    edi
.text:0040A529                 push    esi
.text:0040A52A                 push    ebx
.text:0040A52B                 sub     esp, 0ACh
.text:0040A531                 mov     edx, [esp+0C4h]
.text:0040A538                 cld
.text:0040A539                 lea     edi, [esp+14h]
.text:0040A53D                 mov     [esp+10h], edx
.text:0040A541                 rep stosd
.text:0040A543                 mov     eax, [esp+30h]
.text:0040A547                 mov     ebp, [esp+10h]
.text:0040A54B                 mov     edi, [esp+14h]
.text:0040A54F                 mov     [esp+60h], eax
.text:0040A553                 mov     esi, [esp+20h]
.text:0040A557                 mov     eax, [esp+10h]
.text:0040A55B                 mov     [esp+40h], ebp
.text:0040A55F                 mov     ecx, [esp+28h]
.text:0040A563                 mov     ebp, [esp+18h]
.text:0040A567                 mov     [esp+44h], edi
.text:0040A56B                 mov     edx, [esp+2Ch]
.text:0040A56F                 mov     edi, [esp+1Ch]
.text:0040A573                 mov     [esp+70h], eax
.text:0040A577                 mov     ebx, [esp+24h]
.text:0040A57B                 mov     eax, [esp+14h]
.text:0040A57F                 mov     [esp+48h], ebp
.text:0040A583                 mov     [esp+4Ch], edi
.text:0040A587                 mov     [esp+50h], esi
.text:0040A58B                 mov     [esp+54h], ebx
.text:0040A58F                 mov     [esp+58h], ecx
.text:0040A593                 mov     [esp+5Ch], edx
.text:0040A597                 mov     [esp+74h], eax
.text:0040A59B                 mov     [esp+78h], ebp
.text:0040A59F                 mov     [esp+7Ch], edi
.text:0040A5A3                 mov     [esp+80h], esi
.text:0040A5AA                 mov     [esp+84h], ebx
.text:0040A5B1                 mov     esi, [esp+30h]
.text:0040A5B5                 lea     ebx, [esp+70h]
.text:0040A5B9                 mov     [esp+8Ch], edx
.text:0040A5C0                 mov     edx, [esp+0C8h]
.text:0040A5C7                 mov     [esp+88h], ecx
.text:0040A5CE                 mov     ecx, [esp+0CCh]
.text:0040A5D5                 mov     [esp+4], edx
.text:0040A5D9                 mov     edx, [esp+0C0h]
.text:0040A5E0                 mov     [esp+90h], esi
.text:0040A5E7                 mov     [esp+0Ch], ebx
.text:0040A5EB                 mov     [esp+8], ecx
.text:0040A5EF                 mov     [esp], edx
.text:0040A5F2                 call    sub_40A850
.text:0040A5F7                 add     esp, 0ACh
.text:0040A5FD                 pop     ebx
.text:0040A5FE                 pop     esi
.text:0040A5FF                 pop     edi
.text:0040A600                 pop     ebp
.text:0040A601                 retn
.text:0040A601 ; ---------------------------------------------------------------------------
.text:0040A602                 align 10h
.text:0040A610                 push    ebp
.text:0040A611                 xor     eax, eax
.text:0040A613                 mov     ecx, 8
.text:0040A618                 push    edi
.text:0040A619                 push    esi
.text:0040A61A                 push    ebx
.text:0040A61B                 sub     esp, 0ACh
.text:0040A621                 mov     edi, [esp+0C0h]
.text:0040A628                 cld
.text:0040A629                 mov     [esp+10h], edi
.text:0040A62D                 lea     edi, [esp+14h]
.text:0040A631                 rep stosd
.text:0040A633                 mov     eax, [esp+30h]
.text:0040A637                 mov     esi, [esp+10h]
.text:0040A63B                 mov     ebx, [esp+14h]
.text:0040A63F                 mov     [esp+60h], eax
.text:0040A643                 mov     ebp, [esp+18h]
.text:0040A647                 mov     eax, [esp+10h]
.text:0040A64B                 mov     [esp+40h], esi
.text:0040A64F                 mov     edi, [esp+1Ch]
.text:0040A653                 mov     esi, [esp+20h]
.text:0040A657                 mov     [esp+44h], ebx
.text:0040A65B                 mov     ecx, [esp+28h]
.text:0040A65F                 mov     edx, [esp+2Ch]
.text:0040A663                 mov     [esp+70h], eax
.text:0040A667                 mov     ebx, [esp+24h]
.text:0040A66B                 mov     eax, [esp+14h]
.text:0040A66F                 mov     [esp+48h], ebp
.text:0040A673                 mov     [esp+4Ch], edi
.text:0040A677                 mov     [esp+50h], esi
.text:0040A67B                 mov     [esp+54h], ebx
.text:0040A67F                 mov     [esp+58h], ecx
.text:0040A683                 mov     [esp+5Ch], edx
.text:0040A687                 mov     [esp+74h], eax
.text:0040A68B                 mov     [esp+78h], ebp
.text:0040A68F                 mov     [esp+7Ch], edi
.text:0040A693                 mov     [esp+80h], esi
.text:0040A69A                 mov     [esp+84h], ebx
.text:0040A6A1                 mov     [esp+8Ch], edx
.text:0040A6A8                 lea     edx, [esp+70h]
.text:0040A6AC                 mov     [esp+88h], ecx
.text:0040A6B3                 mov     ecx, [esp+30h]
.text:0040A6B7                 mov     [esp+0Ch], edx
.text:0040A6BB                 mov     edx, [esp+0C4h]
.text:0040A6C2                 mov     [esp+90h], ecx
.text:0040A6C9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A6D1                 mov     [esp+4], edx
.text:0040A6D5                 mov     dword ptr [esp], 0
.text:0040A6DC                 call    sub_40A850
.text:0040A6E1                 add     esp, 0ACh
.text:0040A6E7                 pop     ebx
.text:0040A6E8                 pop     esi
.text:0040A6E9                 pop     edi
.text:0040A6EA                 pop     ebp
.text:0040A6EB                 retn
.text:0040A6EB ; ---------------------------------------------------------------------------
.text:0040A6EC                 align 10h
.text:0040A6F0                 push    edi
.text:0040A6F1                 push    esi
.text:0040A6F2                 push    ebx
.text:0040A6F3                 sub     esp, 40h
.text:0040A6F6                 mov     edx, ds:dword_4161CC
.text:0040A6FC                 mov     ebx, ds:dword_4161C0
.text:0040A702                 mov     esi, ds:dword_4161C8
.text:0040A708                 mov     edi, ds:dword_4161C4
.text:0040A70E                 mov     [esp+1Ch], edx
.text:0040A712                 mov     ecx, ds:dword_4161D0
.text:0040A718                 mov     edx, ds:dword_4161E0
.text:0040A71E                 mov     [esp+10h], ebx
.text:0040A722                 mov     ebx, ds:dword_4161D4
.text:0040A728                 mov     [esp+30h], edx
.text:0040A72C                 movzx   edx, byte ptr [esp+54h]
.text:0040A731                 mov     [esp+18h], esi
.text:0040A735                 mov     esi, ds:dword_4161DC
.text:0040A73B                 mov     [esp+14h], edi
.text:0040A73F                 mov     edi, ds:dword_4161D8
.text:0040A745                 mov     [esp+20h], ecx
.text:0040A749                 mov     cl, dl
.text:0040A74B                 shr     cl, 5
.text:0040A74E                 mov     [esp+24h], ebx
.text:0040A752                 movzx   ebx, cl
.text:0040A755                 mov     [esp+2Ch], esi
.text:0040A759                 lea     esi, [esp+10h]
.text:0040A75D                 mov     [esp+28h], edi
.text:0040A761                 lea     edi, [esi+ebx*4]
.text:0040A764                 mov     ebx, edx
.text:0040A766                 mov     edx, [edi+4]
.text:0040A769                 and     ebx, 1Fh
.text:0040A76C                 mov     cl, bl
.text:0040A76E                 mov     eax, edx
.text:0040A770                 shr     eax, cl
.text:0040A772                 and     eax, 1
.text:0040A775                 xor     eax, 1
.text:0040A778                 shl     eax, cl
.text:0040A77A                 xor     edx, eax
.text:0040A77C                 mov     [edi+4], edx
.text:0040A77F                 mov     edx, [esp+50h]
.text:0040A783                 mov     [esp+0Ch], esi
.text:0040A787                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A78F                 mov     [esp+4], edx
.text:0040A793                 mov     dword ptr [esp], 0
.text:0040A79A                 call    sub_40A850
.text:0040A79F                 add     esp, 40h
.text:0040A7A2                 pop     ebx
.text:0040A7A3                 pop     esi
.text:0040A7A4                 pop     edi
.text:0040A7A5                 retn
.text:0040A7A5 ; ---------------------------------------------------------------------------
.text:0040A7A6                 align 10h
.text:0040A7B0
.text:0040A7B0 ; =============== S U B R O U T I N E =======================================
.text:0040A7B0
.text:0040A7B0
.text:0040A7B0 ; int __cdecl sub_40A7B0(char *)
.text:0040A7B0 sub_40A7B0      proc near               ; CODE XREF: sub_407650+64↑p
.text:0040A7B0
.text:0040A7B0 var_4C          = dword ptr -4Ch
.text:0040A7B0 var_48          = dword ptr -48h
.text:0040A7B0 var_44          = dword ptr -44h
.text:0040A7B0 var_40          = dword ptr -40h
.text:0040A7B0 var_3C          = dword ptr -3Ch
.text:0040A7B0 var_38          = dword ptr -38h
.text:0040A7B0 var_34          = dword ptr -34h
.text:0040A7B0 var_30          = dword ptr -30h
.text:0040A7B0 var_2C          = dword ptr -2Ch
.text:0040A7B0 var_28          = dword ptr -28h
.text:0040A7B0 var_24          = dword ptr -24h
.text:0040A7B0 var_20          = dword ptr -20h
.text:0040A7B0 var_1C          = dword ptr -1Ch
.text:0040A7B0 arg_0           = dword ptr  4
.text:0040A7B0
.text:0040A7B0                 sub     esp, 4Ch
.text:0040A7B3                 mov     ecx, ds:dword_4161C0
.text:0040A7B9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040A7C1                 mov     edx, ds:dword_4161C4
.text:0040A7C7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040A7CE                 mov     [esp+4Ch+var_3C], ecx
.text:0040A7D2                 mov     ecx, ds:dword_4161CC
.text:0040A7D8                 mov     [esp+4Ch+var_38], edx
.text:0040A7DC                 mov     edx, ds:dword_4161C8
.text:0040A7E2                 mov     [esp+4Ch+var_30], ecx
.text:0040A7E6                 mov     ecx, ds:dword_4161D0
.text:0040A7EC                 mov     eax, edx
.text:0040A7EE                 shr     eax, 1Ah
.text:0040A7F1                 and     eax, 1
.text:0040A7F4                 xor     eax, 1
.text:0040A7F7                 mov     [esp+4Ch+var_2C], ecx
.text:0040A7FB                 shl     eax, 1Ah
.text:0040A7FE                 mov     ecx, ds:dword_4161D4
.text:0040A804                 xor     edx, eax
.text:0040A806                 mov     [esp+4Ch+var_34], edx
.text:0040A80A                 mov     edx, [esp+4Ch+arg_0]
.text:0040A80E                 mov     [esp+4Ch+var_28], ecx
.text:0040A812                 mov     ecx, ds:dword_4161D8
.text:0040A818                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040A81C                 mov     [esp+4Ch+var_24], ecx
.text:0040A820                 mov     ecx, ds:dword_4161DC
.text:0040A826                 mov     [esp+4Ch+var_20], ecx
.text:0040A82A                 mov     ecx, ds:dword_4161E0
.text:0040A830                 mov     [esp+4Ch+var_1C], ecx
.text:0040A834                 lea     ecx, [esp+4Ch+var_3C]
.text:0040A838                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040A83C                 call    sub_40A850
.text:0040A841                 add     esp, 4Ch
.text:0040A844                 retn
.text:0040A844 sub_40A7B0      endp
.text:0040A844
.text:0040A844 ; ---------------------------------------------------------------------------
.text:0040A845                 align 10h
.text:0040A850
.text:0040A850 ; =============== S U B R O U T I N E =======================================
.text:0040A850
.text:0040A850
.text:0040A850 ; int __cdecl sub_40A850(int, char *, int, int)
.text:0040A850 sub_40A850      proc near               ; CODE XREF: .text:0040A402↑p
.text:0040A850                                         ; .text:0040A432↑p ...
.text:0040A850
.text:0040A850 Block           = dword ptr -2Ch
.text:0040A850 var_28          = dword ptr -28h
.text:0040A850 Str             = dword ptr -24h
.text:0040A850 var_20          = dword ptr -20h
.text:0040A850 var_1C          = dword ptr -1Ch
.text:0040A850 var_18          = dword ptr -18h
.text:0040A850 var_14          = dword ptr -14h
.text:0040A850 arg_0           = dword ptr  4
.text:0040A850 arg_4           = dword ptr  8
.text:0040A850 arg_8           = dword ptr  0Ch
.text:0040A850 arg_C           = dword ptr  10h
.text:0040A850
.text:0040A850                 push    ebp
.text:0040A851                 push    edi
.text:0040A852                 push    esi
.text:0040A853                 push    ebx
.text:0040A854                 sub     esp, 1Ch
.text:0040A857                 call    _errno
.text:0040A85C                 mov     edx, [eax]
.text:0040A85E                 mov     eax, [esp+2Ch+arg_0]
.text:0040A862                 mov     [esp+2Ch+var_14], edx
.text:0040A866                 test    eax, eax
.text:0040A868                 js      loc_40AA0A
.text:0040A86E                 mov     eax, [esp+2Ch+arg_0]
.text:0040A872                 cmp     dword_415060, eax
.text:0040A878                 ja      short loc_40A8F0
.text:0040A87A                 mov     esi, eax
.text:0040A87C                 inc     esi
.text:0040A87D                 cmp     esi, 1FFFFFFFh
.text:0040A883                 ja      loc_40AA0F
.text:0040A889                 mov     ebx, off_41506C
.text:0040A88F                 cmp     ebx, offset dword_415064
.text:0040A895                 jz      loc_40A9E1
.text:0040A89B
.text:0040A89B loc_40A89B:                             ; CODE XREF: sub_40A850+1B5↓j
.text:0040A89B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040A89E                 lea     ecx, ds:0[esi*8]
.text:0040A8A5                 mov     ebp, esi
.text:0040A8A7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040A8AB                 call    sub_407420
.text:0040A8B0                 mov     off_41506C, eax
.text:0040A8B5                 mov     ebx, dword_415060
.text:0040A8BB                 sub     ebp, ebx
.text:0040A8BD                 lea     edi, [eax+ebx*8]
.text:0040A8C0                 lea     eax, ds:0[ebp*8]
.text:0040A8C7                 cmp     eax, 7
.text:0040A8CA                 jbe     short loc_40A8E0
.text:0040A8CC                 test    edi, 4
.text:0040A8D2                 jz      short loc_40A8E0
.text:0040A8D4                 mov     dword ptr [edi], 0
.text:0040A8DA                 sub     eax, 4
.text:0040A8DD                 add     edi, 4
.text:0040A8E0
.text:0040A8E0 loc_40A8E0:                             ; CODE XREF: sub_40A850+7A↑j
.text:0040A8E0                                         ; sub_40A850+82↑j
.text:0040A8E0                 cld
.text:0040A8E1                 mov     ecx, eax
.text:0040A8E3                 shr     ecx, 2
.text:0040A8E6                 xor     eax, eax
.text:0040A8E8                 rep stosd
.text:0040A8EA                 mov     dword_415060, esi
.text:0040A8F0
.text:0040A8F0 loc_40A8F0:                             ; CODE XREF: sub_40A850+28↑j
.text:0040A8F0                 mov     esi, off_41506C
.text:0040A8F6                 mov     eax, [esp+2Ch+arg_0]
.text:0040A8FA                 mov     ebp, [esi+eax*8]
.text:0040A8FD                 mov     edi, [esi+eax*8+4]
.text:0040A901                 mov     esi, [esp+2Ch+arg_C]
.text:0040A905                 test    esi, esi
.text:0040A907                 jz      loc_40A9D7
.text:0040A90D
.text:0040A90D loc_40A90D:                             ; CODE XREF: sub_40A850+18C↓j
.text:0040A90D                 call    _errno
.text:0040A912                 mov     ebx, [eax]
.text:0040A914                 mov     [esp+2Ch+var_18], esi ; int
.text:0040A918                 mov     ecx, [esi]
.text:0040A91A                 mov     [esp+2Ch+Block], edi ; int
.text:0040A91D                 mov     edx, [esp+2Ch+arg_8]
.text:0040A921                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040A925                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040A929                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A92D                 mov     [esp+2Ch+var_20], edx ; int
.text:0040A931                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040A935                 call    sub_409710
.text:0040A93A                 mov     esi, eax
.text:0040A93C                 call    _errno
.text:0040A941                 mov     [eax], ebx
.text:0040A943                 cmp     ebp, esi
.text:0040A945                 ja      short loc_40A9BB
.text:0040A947                 lea     ebp, [esi+1]
.text:0040A94A                 mov     ebx, off_41506C
.text:0040A950                 cmp     edi, offset unk_4160C0
.text:0040A956                 mov     esi, [esp+2Ch+arg_0]
.text:0040A95A                 mov     [ebx+esi*8], ebp
.text:0040A95D                 jz      short loc_40A96D
.text:0040A95F                 mov     [esp+2Ch+Block], edi ; Block
.text:0040A962                 call    free
.text:0040A967                 mov     ebx, off_41506C
.text:0040A96D
.text:0040A96D loc_40A96D:                             ; CODE XREF: sub_40A850+10D↑j
.text:0040A96D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040A970                 call    sub_407390
.text:0040A975                 mov     esi, [esp+2Ch+arg_C]
.text:0040A979                 mov     edi, eax
.text:0040A97B                 mov     eax, [esp+2Ch+arg_0]
.text:0040A97F                 test    esi, esi
.text:0040A981                 mov     [ebx+eax*8+4], edi
.text:0040A985                 jz      short loc_40A9D0
.text:0040A987
.text:0040A987 loc_40A987:                             ; CODE XREF: sub_40A850+185↓j
.text:0040A987                 call    _errno
.text:0040A98C                 mov     ebx, [eax]
.text:0040A98E                 mov     [esp+2Ch+var_18], esi ; int
.text:0040A992                 mov     ecx, [esi]
.text:0040A994                 mov     [esp+2Ch+Block], edi ; int
.text:0040A997                 mov     edx, [esp+2Ch+arg_8]
.text:0040A99B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040A99F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040A9A3                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A9A7                 mov     [esp+2Ch+var_20], edx ; int
.text:0040A9AB                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040A9AF                 call    sub_409710
.text:0040A9B4                 call    _errno
.text:0040A9B9                 mov     [eax], ebx
.text:0040A9BB
.text:0040A9BB loc_40A9BB:                             ; CODE XREF: sub_40A850+F5↑j
.text:0040A9BB                 call    _errno
.text:0040A9C0                 mov     ebp, [esp+2Ch+var_14]
.text:0040A9C4                 mov     [eax], ebp
.text:0040A9C6                 add     esp, 1Ch
.text:0040A9C9                 mov     eax, edi
.text:0040A9CB                 pop     ebx
.text:0040A9CC                 pop     esi
.text:0040A9CD                 pop     edi
.text:0040A9CE                 pop     ebp
.text:0040A9CF                 retn
.text:0040A9D0 ; ---------------------------------------------------------------------------
.text:0040A9D0
.text:0040A9D0 loc_40A9D0:                             ; CODE XREF: sub_40A850+135↑j
.text:0040A9D0                 mov     esi, offset dword_4161C0
.text:0040A9D5                 jmp     short loc_40A987
.text:0040A9D7 ; ---------------------------------------------------------------------------
.text:0040A9D7
.text:0040A9D7 loc_40A9D7:                             ; CODE XREF: sub_40A850+B7↑j
.text:0040A9D7                 mov     esi, offset dword_4161C0
.text:0040A9DC                 jmp     loc_40A90D
.text:0040A9E1 ; ---------------------------------------------------------------------------
.text:0040A9E1
.text:0040A9E1 loc_40A9E1:                             ; CODE XREF: sub_40A850+45↑j
.text:0040A9E1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040A9E8                 call    sub_407390
.text:0040A9ED                 mov     off_41506C, eax
.text:0040A9F2                 mov     edi, dword_415064
.text:0040A9F8                 mov     ebx, eax
.text:0040A9FA                 mov     ecx, off_415068
.text:0040AA00                 mov     [eax], edi
.text:0040AA02                 mov     [eax+4], ecx
.text:0040AA05                 jmp     loc_40A89B
.text:0040AA0A ; ---------------------------------------------------------------------------
.text:0040AA0A
.text:0040AA0A loc_40AA0A:                             ; CODE XREF: sub_40A850+18↑j
.text:0040AA0A                 call    abort
.text:0040AA0F ; ---------------------------------------------------------------------------
.text:0040AA0F
.text:0040AA0F loc_40AA0F:                             ; CODE XREF: sub_40A850+33↑j
.text:0040AA0F                 call    sub_40AA40
.text:0040AA0F sub_40A850      endp
.text:0040AA0F
.text:0040AA0F ; ---------------------------------------------------------------------------
.text:0040AA14                 align 10h
.text:0040AA20
.text:0040AA20 loc_40AA20:                             ; DATA XREF: sub_40AA40+3↓o
.text:0040AA20                 insd
.text:0040AA21                 db      65h
.text:0040AA21                 insd
.text:0040AA23                 outsd
.text:0040AA24                 jb      short loc_40AA9F
.text:0040AA26                 and     [ebp+78h], ah
.text:0040AA29                 push    74737561h
.text:0040AA2E
.text:0040AA2E loc_40AA2E:                             ; DATA XREF: sub_40AA40+10↓o
.text:0040AA2E                 db      65h
.text:0040AA2E                 add     fs:0B68D0073h, ah
.text:0040AA2E ; ---------------------------------------------------------------------------
.text:0040AA36                 dw 0
.text:0040AA38                 align 10h
.text:0040AA40
.text:0040AA40 ; =============== S U B R O U T I N E =======================================
.text:0040AA40
.text:0040AA40 ; Attributes: noreturn
.text:0040AA40
.text:0040AA40 sub_40AA40      proc near               ; CODE XREF: sub_407350:loc_407389↑p
.text:0040AA40                                         ; sub_407390+24↑p ...
.text:0040AA40
.text:0040AA40 Code            = dword ptr -1Ch
.text:0040AA40 ErrorMessage    = dword ptr -18h
.text:0040AA40 var_14          = dword ptr -14h
.text:0040AA40 var_10          = byte ptr -10h
.text:0040AA40
.text:0040AA40                 sub     esp, 1Ch
.text:0040AA43                 mov     [esp+1Ch+Code], offset loc_40AA20
.text:0040AA4A                 call    ds:libintl_gettext
.text:0040AA50                 mov     [esp+1Ch+var_14], (offset loc_40AA2E+3) ; char *
.text:0040AA58                 mov     edx, Code
.text:0040AA5E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040AA66                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040AA6A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040AA6D                 call    sub_40AB80
.text:0040AA72                 call    abort
.text:0040AA72 sub_40AA40      endp
.text:0040AA72
.text:0040AA72 ; ---------------------------------------------------------------------------
.text:0040AA77                 align 10h
.text:0040AA80
.text:0040AA80 ; =============== S U B R O U T I N E =======================================
.text:0040AA80
.text:0040AA80
.text:0040AA80 sub_40AA80      proc near               ; CODE XREF: sub_409230+25↑p
.text:0040AA80                                         ; sub_409230+191↑p
.text:0040AA80
.text:0040AA80 Time            = dword ptr -1Ch
.text:0040AA80 var_18          = dword ptr -18h
.text:0040AA80 var_C           = dword ptr -0Ch
.text:0040AA80 var_8           = dword ptr -8
.text:0040AA80 var_4           = dword ptr -4
.text:0040AA80 arg_0           = dword ptr  4
.text:0040AA80
.text:0040AA80                 sub     esp, 1Ch
.text:0040AA83                 mov     [esp+1Ch+var_4], ebx
.text:0040AA87                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AA8B                 mov     [esp+1Ch+Time], 0
.text:0040AA92                 mov     [esp+1Ch+var_18], ebx
.text:0040AA96                 call    sub_40E820
.text:0040AA9B                 xor     edx, edx
.text:0040AA9D                 test    eax, eax
.text:0040AA9F
.text:0040AA9F loc_40AA9F:                             ; CODE XREF: .text:0040AA24↑j
.text:0040AA9F                 jnz     short loc_40AAB0
.text:0040AAA1
.text:0040AAA1 loc_40AAA1:                             ; CODE XREF: sub_40AA80+5D↓j
.text:0040AAA1                                         ; sub_40AA80+73↓j
.text:0040AAA1                 mov     ebx, [esp+1Ch+var_4]
.text:0040AAA5                 mov     eax, edx
.text:0040AAA7                 add     esp, 1Ch
.text:0040AAAA                 retn
.text:0040AAAA ; ---------------------------------------------------------------------------
.text:0040AAAB                 align 10h
.text:0040AAB0
.text:0040AAB0 loc_40AAB0:                             ; CODE XREF: sub_40AA80:loc_40AA9F↑j
.text:0040AAB0                 mov     [esp+1Ch+var_18], 0
.text:0040AAB8                 lea     edx, [esp+1Ch+var_C]
.text:0040AABC                 mov     [esp+1Ch+Time], edx
.text:0040AABF                 call    sub_40E7C0
.text:0040AAC4                 test    eax, eax
.text:0040AAC6                 jnz     short loc_40AADF
.text:0040AAC8                 mov     ecx, [esp+1Ch+var_C]
.text:0040AACC                 mov     [ebx], ecx
.text:0040AACE                 mov     edx, [esp+1Ch+var_8]
.text:0040AAD2                 imul    edx, 3E8h
.text:0040AAD8                 mov     [ebx+4], edx
.text:0040AADB
.text:0040AADB loc_40AADB:                             ; CODE XREF: sub_40AA80+7E↓j
.text:0040AADB                 xor     edx, edx
.text:0040AADD                 jmp     short loc_40AAA1
.text:0040AADF ; ---------------------------------------------------------------------------
.text:0040AADF
.text:0040AADF loc_40AADF:                             ; CODE XREF: sub_40AA80+46↑j
.text:0040AADF                 mov     [esp+1Ch+Time], 0 ; Time
.text:0040AAE6                 call    time
.text:0040AAEB                 cmp     eax, 0FFFFFFFFh
.text:0040AAEE                 mov     edx, 0FFFFFFFFh
.text:0040AAF3                 jz      short loc_40AAA1
.text:0040AAF5                 mov     [ebx], eax
.text:0040AAF7                 mov     dword ptr [ebx+4], 0
.text:0040AAFE                 jmp     short loc_40AADB
.text:0040AAFE sub_40AA80      endp
.text:0040AAFE
.text:0040AB00
.text:0040AB00 ; =============== S U B R O U T I N E =======================================
.text:0040AB00
.text:0040AB00
.text:0040AB00 sub_40AB00      proc near               ; CODE XREF: sub_409470+53↑p
.text:0040AB00
.text:0040AB00 var_C           = dword ptr -0Ch
.text:0040AB00 var_8           = dword ptr -8
.text:0040AB00 var_4           = dword ptr -4
.text:0040AB00 arg_0           = dword ptr  4
.text:0040AB00
.text:0040AB00                 sub     esp, 0Ch
.text:0040AB03                 mov     edx, [esp+0Ch+arg_0]
.text:0040AB07                 mov     [esp+0Ch+var_4], 3
.text:0040AB0F                 mov     [esp+0Ch+var_8], 0
.text:0040AB17                 mov     [esp+0Ch+var_C], edx
.text:0040AB1A                 call    sub_40E400
.text:0040AB1F                 add     esp, 0Ch
.text:0040AB22                 retn
.text:0040AB22 sub_40AB00      endp
.text:0040AB22
.text:0040AB22 ; ---------------------------------------------------------------------------
.text:0040AB23                 align 10h
.text:0040AB30                 jmp     ds:libintl_bindtextdomain
.text:0040AB30 ; ---------------------------------------------------------------------------
.text:0040AB36                 align 10h
.text:0040AB40                 jmp     ds:libintl_textdomain
.text:0040AB40 ; ---------------------------------------------------------------------------
.text:0040AB46                 align 10h
.text:0040AB50                 jmp     ds:libintl_gettext
.text:0040AB50 ; ---------------------------------------------------------------------------
.text:0040AB56                 align 10h
.text:0040AB60 ; const char aS_2[]
.text:0040AB60 aS_2            db ': %s',0             ; DATA XREF: sub_40AB80+B8↓o
.text:0040AB60                                         ; sub_40AC84+122↓o
.text:0040AB65 aUnknownSystemE db 'Unknown system error',0
.text:0040AB65                                         ; DATA XREF: sub_40AB80:loc_40AC4D↓o
.text:0040AB65                                         ; sub_40AC84:loc_40ADBE↓o
.text:0040AB7A ; const char aS_3[]
.text:0040AB7A aS_3            db '%s: ',0             ; DATA XREF: sub_40AB80:loc_40AC54↓o
.text:0040AB7F                 align 10h
.text:0040AB80
.text:0040AB80 ; =============== S U B R O U T I N E =======================================
.text:0040AB80
.text:0040AB80
.text:0040AB80 ; int __cdecl sub_40AB80(int Code, int ErrorMessage, char *, char)
.text:0040AB80 sub_40AB80      proc near               ; CODE XREF: sub_4014E0+2D3↑p
.text:0040AB80                                         ; sub_4014E0+32C↑p ...
.text:0040AB80
.text:0040AB80 Stream          = dword ptr -1Ch
.text:0040AB80 Format          = dword ptr -18h
.text:0040AB80 ArgList         = dword ptr -14h
.text:0040AB80 Code            = dword ptr  4
.text:0040AB80 ErrorMessage    = dword ptr  8
.text:0040AB80 arg_8           = dword ptr  0Ch
.text:0040AB80 arg_C           = byte ptr  10h
.text:0040AB80
.text:0040AB80                 push    esi
.text:0040AB81                 push    ebx
.text:0040AB82                 sub     esp, 14h
.text:0040AB85                 mov     edx, ds:_iob
.text:0040AB8B                 mov     esi, [esp+1Ch+Code]
.text:0040AB8F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040AB93                 add     edx, 20h ; ' '
.text:0040AB96                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AB99                 call    fflush
.text:0040AB9E                 mov     eax, ds:dword_416580
.text:0040ABA3                 test    eax, eax
.text:0040ABA5                 jz      loc_40AC54
.text:0040ABAB                 call    eax ; dword_416580
.text:0040ABAD
.text:0040ABAD loc_40ABAD:                             ; CODE XREF: sub_40AB80+F7↓j
.text:0040ABAD                 lea     edx, [esp+1Ch+arg_C]
.text:0040ABB1                 mov     ecx, [esp+1Ch+arg_8]
.text:0040ABB5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040ABB9                 mov     edx, ds:_iob
.text:0040ABBF                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040ABC3                 add     edx, 40h ; '@'
.text:0040ABC6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040ABC9                 call    vfprintf
.text:0040ABCE                 inc     ds:dword_416590
.text:0040ABD4                 test    ebx, ebx
.text:0040ABD6                 jnz     short loc_40AC22
.text:0040ABD8
.text:0040ABD8 loc_40ABD8:                             ; CODE XREF: sub_40AB80+CB↓j
.text:0040ABD8                 mov     edx, ds:_iob
.text:0040ABDE                 lea     ecx, [edx+40h]
.text:0040ABE1                 mov     ebx, [ecx+4]
.text:0040ABE4                 dec     ebx
.text:0040ABE5                 test    ebx, ebx
.text:0040ABE7                 mov     [ecx+4], ebx
.text:0040ABEA                 js      short loc_40AC10
.text:0040ABEC                 mov     ecx, [edx+40h]
.text:0040ABEF                 mov     byte ptr [ecx], 0Ah
.text:0040ABF2                 inc     dword ptr [edx+40h]
.text:0040ABF5
.text:0040ABF5 loc_40ABF5:                             ; CODE XREF: sub_40AB80+A0↓j
.text:0040ABF5                 mov     edx, ds:_iob
.text:0040ABFB                 add     edx, 40h ; '@'
.text:0040ABFE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AC01                 call    fflush
.text:0040AC06                 test    esi, esi
.text:0040AC08                 jnz     short loc_40AC7C
.text:0040AC0A                 add     esp, 14h
.text:0040AC0D                 pop     ebx
.text:0040AC0E                 pop     esi
.text:0040AC0F                 retn
.text:0040AC10 ; ---------------------------------------------------------------------------
.text:0040AC10
.text:0040AC10 loc_40AC10:                             ; CODE XREF: sub_40AB80+6A↑j
.text:0040AC10                 mov     [esp+1Ch+Format], ecx ; File
.text:0040AC14                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040AC1B                 call    _flsbuf
.text:0040AC20                 jmp     short loc_40ABF5
.text:0040AC22 ; ---------------------------------------------------------------------------
.text:0040AC22
.text:0040AC22 loc_40AC22:                             ; CODE XREF: sub_40AB80+56↑j
.text:0040AC22                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040AC25                 call    strerror
.text:0040AC2A                 test    eax, eax
.text:0040AC2C                 jz      short loc_40AC4D
.text:0040AC2E
.text:0040AC2E loc_40AC2E:                             ; CODE XREF: sub_40AB80+D2↓j
.text:0040AC2E                 mov     [esp+1Ch+ArgList], eax
.text:0040AC32                 mov     ebx, ds:_iob
.text:0040AC38                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:0040AC40                 add     ebx, 40h ; '@'
.text:0040AC43                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040AC46                 call    fprintf
.text:0040AC4B                 jmp     short loc_40ABD8
.text:0040AC4D ; ---------------------------------------------------------------------------
.text:0040AC4D
.text:0040AC4D loc_40AC4D:                             ; CODE XREF: sub_40AB80+AC↑j
.text:0040AC4D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040AC52                 jmp     short loc_40AC2E
.text:0040AC54 ; ---------------------------------------------------------------------------
.text:0040AC54
.text:0040AC54 loc_40AC54:                             ; CODE XREF: sub_40AB80+25↑j
.text:0040AC54                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:0040AC5C                 mov     edx, ds:_iob
.text:0040AC62                 mov     ecx, ds:dword_416550
.text:0040AC68                 add     edx, 40h ; '@'
.text:0040AC6B                 mov     [esp+1Ch+ArgList], ecx
.text:0040AC6F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AC72                 call    fprintf
.text:0040AC77                 jmp     loc_40ABAD
.text:0040AC7C ; ---------------------------------------------------------------------------
.text:0040AC7C
.text:0040AC7C loc_40AC7C:                             ; CODE XREF: sub_40AB80+88↑j
.text:0040AC7C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040AC7F                 call    exit
.text:0040AC7F sub_40AB80      endp
.text:0040AC7F
.text:0040AC84
.text:0040AC84 ; =============== S U B R O U T I N E =======================================
.text:0040AC84
.text:0040AC84
.text:0040AC84 ; int __cdecl sub_40AC84(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040AC84 sub_40AC84      proc near               ; DATA XREF: sub_40AC84+77↓o
.text:0040AC84
.text:0040AC84 Stream          = dword ptr -28h
.text:0040AC84 Format          = dword ptr -24h
.text:0040AC84 ArgList         = dword ptr -20h
.text:0040AC84 var_1C          = dword ptr -1Ch
.text:0040AC84 Code            = dword ptr  8
.text:0040AC84 ErrorMessage    = dword ptr  0Ch
.text:0040AC84 Str2            = dword ptr  10h
.text:0040AC84 arg_10          = dword ptr  14h
.text:0040AC84 arg_14          = dword ptr  18h
.text:0040AC84 arg_18          = byte ptr  1Ch
.text:0040AC84
.text:0040AC84                 and     eax, 64253A73h
.text:0040AC89                 cmp     ah, [eax]
.text:0040AC8B
.text:0040AC8B loc_40AC8B:                             ; DATA XREF: sub_40AC84:loc_40ADC5↓o
.text:0040AC8B                 add     ds:55003A73h, ah
.text:0040AC91                 push    edi
.text:0040AC92                 push    esi
.text:0040AC93                 push    ebx
.text:0040AC94                 sub     esp, 1Ch
.text:0040AC97                 mov     edx, ds:dword_4165C0
.text:0040AC9D                 mov     ebp, [esp+28h+Code]
.text:0040ACA1                 mov     edi, [esp+28h+ErrorMessage]
.text:0040ACA5                 test    edx, edx
.text:0040ACA7                 mov     ebx, [esp+28h+Str2]
.text:0040ACAB                 mov     esi, [esp+28h+arg_10]
.text:0040ACAF                 jz      short loc_40ACC9
.text:0040ACB1                 cmp     ds:dword_416200, esi
.text:0040ACB7                 jz      loc_40ADF0
.text:0040ACBD
.text:0040ACBD loc_40ACBD:                             ; CODE XREF: sub_40AC84+18D↓j
.text:0040ACBD                 mov     ds:Str1, ebx
.text:0040ACC3                 mov     ds:dword_416200, esi
.text:0040ACC9
.text:0040ACC9 loc_40ACC9:                             ; CODE XREF: sub_40AC84+2B↑j
.text:0040ACC9                 mov     edx, ds:_iob
.text:0040ACCF                 add     edx, 20h ; ' '
.text:0040ACD2                 mov     [esp+28h+Stream], edx ; Stream
.text:0040ACD5                 call    fflush
.text:0040ACDA                 mov     eax, ds:dword_416580
.text:0040ACDF                 test    eax, eax
.text:0040ACE1                 jz      loc_40ADC5
.text:0040ACE7                 call    eax ; dword_416580
.text:0040ACE9
.text:0040ACE9 loc_40ACE9:                             ; CODE XREF: sub_40AC84+164↓j
.text:0040ACE9                 test    ebx, ebx
.text:0040ACEB                 jz      short loc_40AD0E
.text:0040ACED                 mov     [esp+28h+ArgList], ebx
.text:0040ACF1                 mov     ebx, ds:_iob
.text:0040ACF7                 mov     [esp+28h+var_1C], esi
.text:0040ACFB                 mov     [esp+28h+Format], offset sub_40AC84 ; Format
.text:0040AD03                 add     ebx, 40h ; '@'
.text:0040AD06                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040AD09                 call    fprintf
.text:0040AD0E
.text:0040AD0E loc_40AD0E:                             ; CODE XREF: sub_40AC84+67↑j
.text:0040AD0E                 mov     esi, ds:_iob
.text:0040AD14                 lea     edx, [esp+28h+arg_18]
.text:0040AD18                 mov     ecx, [esp+28h+arg_14]
.text:0040AD1C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040AD20                 add     esi, 40h ; '@'
.text:0040AD23                 mov     [esp+28h+Format], ecx ; Format
.text:0040AD27                 mov     [esp+28h+Stream], esi ; Stream
.text:0040AD2A                 call    vfprintf
.text:0040AD2F                 inc     ds:dword_416590
.text:0040AD35                 test    edi, edi
.text:0040AD37                 jnz     short loc_40AD90
.text:0040AD39
.text:0040AD39 loc_40AD39:                             ; CODE XREF: sub_40AC84+135↓j
.text:0040AD39                 mov     edx, ds:_iob
.text:0040AD3F                 lea     ecx, [edx+40h]
.text:0040AD42                 mov     ebx, [ecx+4]
.text:0040AD45                 dec     ebx
.text:0040AD46                 test    ebx, ebx
.text:0040AD48                 mov     [ecx+4], ebx
.text:0040AD4B                 js      short loc_40AD77
.text:0040AD4D                 mov     esi, [edx+40h]
.text:0040AD50                 mov     byte ptr [esi], 0Ah
.text:0040AD53                 inc     dword ptr [edx+40h]
.text:0040AD56
.text:0040AD56 loc_40AD56:                             ; CODE XREF: sub_40AC84+103↓j
.text:0040AD56                 mov     ecx, ds:_iob
.text:0040AD5C                 add     ecx, 40h ; '@'
.text:0040AD5F                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040AD62                 call    fflush
.text:0040AD67                 test    ebp, ebp
.text:0040AD69                 jnz     loc_40AE16
.text:0040AD6F
.text:0040AD6F loc_40AD6F:                             ; CODE XREF: sub_40AC84+173↓j
.text:0040AD6F                                         ; sub_40AC84+187↓j
.text:0040AD6F                 add     esp, 1Ch
.text:0040AD72                 pop     ebx
.text:0040AD73                 pop     esi
.text:0040AD74                 pop     edi
.text:0040AD75                 pop     ebp
.text:0040AD76                 retn
.text:0040AD77 ; ---------------------------------------------------------------------------
.text:0040AD77
.text:0040AD77 loc_40AD77:                             ; CODE XREF: sub_40AC84+C7↑j
.text:0040AD77                 mov     [esp+28h+Format], ecx ; File
.text:0040AD7B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040AD82                 call    _flsbuf
.text:0040AD87                 jmp     short loc_40AD56
.text:0040AD87 ; ---------------------------------------------------------------------------
.text:0040AD89                 align 10h
.text:0040AD90
.text:0040AD90 loc_40AD90:                             ; CODE XREF: sub_40AC84+B3↑j
.text:0040AD90                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040AD93                 call    strerror
.text:0040AD98                 test    eax, eax
.text:0040AD9A                 jz      short loc_40ADBE
.text:0040AD9C
.text:0040AD9C loc_40AD9C:                             ; CODE XREF: sub_40AC84+13F↓j
.text:0040AD9C                 mov     [esp+28h+ArgList], eax
.text:0040ADA0                 mov     edi, ds:_iob
.text:0040ADA6                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:0040ADAE                 add     edi, 40h ; '@'
.text:0040ADB1                 mov     [esp+28h+Stream], edi ; Stream
.text:0040ADB4                 call    fprintf
.text:0040ADB9                 jmp     loc_40AD39
.text:0040ADBE ; ---------------------------------------------------------------------------
.text:0040ADBE
.text:0040ADBE loc_40ADBE:                             ; CODE XREF: sub_40AC84+116↑j
.text:0040ADBE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040ADC3                 jmp     short loc_40AD9C
.text:0040ADC5 ; ---------------------------------------------------------------------------
.text:0040ADC5
.text:0040ADC5 loc_40ADC5:                             ; CODE XREF: sub_40AC84+5D↑j
.text:0040ADC5                 mov     [esp+28h+Format], (offset loc_40AC8B+1) ; Format
.text:0040ADCD                 mov     ecx, ds:_iob
.text:0040ADD3                 mov     edx, ds:dword_416550
.text:0040ADD9                 add     ecx, 40h ; '@'
.text:0040ADDC                 mov     [esp+28h+ArgList], edx
.text:0040ADE0                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040ADE3                 call    fprintf
.text:0040ADE8                 jmp     loc_40ACE9
.text:0040ADE8 ; ---------------------------------------------------------------------------
.text:0040ADED                 align 10h
.text:0040ADF0
.text:0040ADF0 loc_40ADF0:                             ; CODE XREF: sub_40AC84+33↑j
.text:0040ADF0                 mov     eax, ds:Str1
.text:0040ADF5                 cmp     ebx, eax
.text:0040ADF7                 jz      loc_40AD6F
.text:0040ADFD                 mov     [esp+28h+Format], ebx ; Str2
.text:0040AE01                 mov     [esp+28h+Stream], eax ; Str1
.text:0040AE04                 call    strcmp
.text:0040AE09                 test    eax, eax
.text:0040AE0B                 jz      loc_40AD6F
.text:0040AE11                 jmp     loc_40ACBD
.text:0040AE16 ; ---------------------------------------------------------------------------
.text:0040AE16
.text:0040AE16 loc_40AE16:                             ; CODE XREF: sub_40AC84+E5↑j
.text:0040AE16                 mov     [esp+28h+Stream], ebp ; Code
.text:0040AE19                 call    exit
.text:0040AE19 sub_40AC84      endp ; sp-analysis failed
.text:0040AE19
.text:0040AE19 ; ---------------------------------------------------------------------------
.text:0040AE1E                 align 10h
.text:0040AE20
.text:0040AE20 ; =============== S U B R O U T I N E =======================================
.text:0040AE20
.text:0040AE20
.text:0040AE20 ; int __cdecl sub_40AE20(char *, int)
.text:0040AE20 sub_40AE20      proc near               ; CODE XREF: sub_4014E0+3A6↑p
.text:0040AE20                                         ; sub_402620+312↑p ...
.text:0040AE20
.text:0040AE20 hNamedPipe      = dword ptr -0Ch
.text:0040AE20 Str             = dword ptr -8
.text:0040AE20 var_4           = dword ptr -4
.text:0040AE20 arg_0           = dword ptr  4
.text:0040AE20 arg_4           = dword ptr  8
.text:0040AE20
.text:0040AE20                 sub     esp, 0Ch
.text:0040AE23                 mov     edx, [esp+0Ch+arg_4]
.text:0040AE27                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0040AE2E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040AE32                 mov     edx, [esp+0Ch+arg_0]
.text:0040AE36                 mov     [esp+0Ch+Str], edx ; Str
.text:0040AE3A                 call    sub_40B090
.text:0040AE3F                 add     esp, 0Ch
.text:0040AE42                 retn
.text:0040AE42 sub_40AE20      endp
.text:0040AE42
.text:0040AE42 ; ---------------------------------------------------------------------------
.text:0040AE43 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:0040AE43                                         ; DATA XREF: .text:0040AF2E↓o
.text:0040AE56 aModeO          db 'mode:      %#o',0Ah,0
.text:0040AE56                                         ; DATA XREF: .text:0040AF44↓o
.text:0040AE66 aUidLd          db 'uid:       %ld',0Ah,0
.text:0040AE66                                         ; DATA XREF: .text:0040AF57↓o
.text:0040AE76 aGidLd          db 'gid:       %ld',0Ah,0
.text:0040AE76                                         ; DATA XREF: .text:0040AF6A↓o
.text:0040AE86 aDevLu          db 'dev:       %lu',0Ah,0
.text:0040AE86                                         ; DATA XREF: .text:0040AF7D↓o
.text:0040AE96 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:0040AE96                                         ; DATA XREF: .text:0040AF90↓o
.text:0040AEA6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:0040AEA6                                         ; DATA XREF: .text:0040AFA6↓o
.text:0040AEB8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:0040AEB8                                         ; DATA XREF: .text:0040AFBD↓o
.text:0040AEC7 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:0040AEC7                                         ; DATA XREF: .text:0040AFD3↓o
.text:0040AED9 aAtimeLdS       db 'atime:     %ld: %s',0
.text:0040AED9                                         ; DATA XREF: .text:0040AFF9↓o
.text:0040AEEC aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040AEEC                                         ; DATA XREF: .text:0040B01B↓o
.text:0040AEFF aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040AEFF                                         ; DATA XREF: .text:0040B03D↓o
.text:0040AF13                 align 10h
.text:0040AF20                 push    ebx
.text:0040AF21                 sub     esp, 18h
.text:0040AF24                 mov     ebx, [esp+20h]
.text:0040AF28                 mov     edx, [ebx+8]
.text:0040AF2B                 mov     ecx, [ebx+0Ch]
.text:0040AF2E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:0040AF35                 mov     [esp+4], edx
.text:0040AF39                 mov     [esp+8], ecx
.text:0040AF3D                 call    printf
.text:0040AF42                 mov     ecx, [ebx]
.text:0040AF44                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0040AF4B                 mov     [esp+4], ecx
.text:0040AF4F                 call    printf
.text:0040AF54                 mov     edx, [ebx+1Ch]
.text:0040AF57                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0040AF5E                 mov     [esp+4], edx
.text:0040AF62                 call    printf
.text:0040AF67                 mov     ecx, [ebx+20h]
.text:0040AF6A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:0040AF71                 mov     [esp+4], ecx
.text:0040AF75                 call    printf
.text:0040AF7A                 mov     edx, [ebx+10h]
.text:0040AF7D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:0040AF84                 mov     [esp+4], edx
.text:0040AF88                 call    printf
.text:0040AF8D                 mov     ecx, [ebx+18h]
.text:0040AF90                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:0040AF97                 mov     [esp+4], ecx
.text:0040AF9B                 call    printf
.text:0040AFA0                 mov     edx, [ebx+30h]
.text:0040AFA3                 mov     ecx, [ebx+34h]
.text:0040AFA6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0040AFAD                 mov     [esp+4], edx
.text:0040AFB1                 mov     [esp+8], ecx
.text:0040AFB5                 call    printf
.text:0040AFBA                 mov     ecx, [ebx+50h]
.text:0040AFBD                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:0040AFC4                 mov     [esp+4], ecx
.text:0040AFC8                 call    printf
.text:0040AFCD                 mov     ecx, [ebx+5Ch]
.text:0040AFD0                 mov     edx, [ebx+58h]
.text:0040AFD3                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040AFDA                 mov     [esp+8], ecx
.text:0040AFDE                 mov     [esp+4], edx
.text:0040AFE2                 call    printf
.text:0040AFE7                 lea     edx, [ebx+38h]
.text:0040AFEA                 mov     [esp], edx
.text:0040AFED                 call    ctime
.text:0040AFF2                 mov     [esp+8], eax
.text:0040AFF6                 mov     ecx, [ebx+38h]
.text:0040AFF9                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:0040B000                 mov     [esp+4], ecx
.text:0040B004                 call    printf
.text:0040B009                 lea     edx, [ebx+40h]
.text:0040B00C                 mov     [esp], edx
.text:0040B00F                 call    ctime
.text:0040B014                 mov     [esp+8], eax
.text:0040B018                 mov     ecx, [ebx+40h]
.text:0040B01B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:0040B022                 mov     [esp+4], ecx
.text:0040B026                 call    printf
.text:0040B02B                 lea     edx, [ebx+48h]
.text:0040B02E                 mov     [esp], edx
.text:0040B031                 call    ctime
.text:0040B036                 mov     [esp+8], eax
.text:0040B03A                 mov     edx, [ebx+48h]
.text:0040B03D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:0040B044                 mov     [esp+4], edx
.text:0040B048                 call    printf
.text:0040B04D                 add     esp, 18h
.text:0040B050                 xor     eax, eax
.text:0040B052                 pop     ebx
.text:0040B053                 retn
.text:0040B053 ; ---------------------------------------------------------------------------
.text:0040B054                 align 10h
.text:0040B060 ; const char aFxstat64BadFil[]
.text:0040B060 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040B060                                         ; DATA XREF: sub_40B090+7B↓o
.text:0040B084                 align 10h
.text:0040B090
.text:0040B090 ; =============== S U B R O U T I N E =======================================
.text:0040B090
.text:0040B090
.text:0040B090 ; int __cdecl sub_40B090(HANDLE hNamedPipe, char *Str, int)
.text:0040B090 sub_40B090      proc near               ; CODE XREF: sub_40AE20+1A↑p
.text:0040B090                                         ; .text:0040D829↓p
.text:0040B090
.text:0040B090 hFindFile       = dword ptr -1A0h
.text:0040B090 var_19C         = dword ptr -19Ch
.text:0040B090 hLibModule      = dword ptr -198h
.text:0040B090 lpFindFileData  = dword ptr -194h
.text:0040B090 lpModuleName    = dword ptr -18Ch
.text:0040B090 lpProcName      = dword ptr -188h
.text:0040B090 var_184         = dword ptr -184h
.text:0040B090 var_180         = dword ptr -180h
.text:0040B090 var_17C         = dword ptr -17Ch
.text:0040B090 var_178         = dword ptr -178h
.text:0040B090 var_174         = dword ptr -174h
.text:0040B090 var_170         = dword ptr -170h
.text:0040B090 var_16C         = dword ptr -16Ch
.text:0040B090 var_168         = dword ptr -168h
.text:0040B090 var_164         = dword ptr -164h
.text:0040B090 hModule         = dword ptr -160h
.text:0040B090 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040B090 FileHandle      = dword ptr -1Ch
.text:0040B090 var_18          = dword ptr -18h
.text:0040B090 var_10          = dword ptr -10h
.text:0040B090 var_C           = dword ptr -0Ch
.text:0040B090 lpFileName      = dword ptr -8
.text:0040B090 var_4           = dword ptr -4
.text:0040B090 hNamedPipe      = dword ptr  4
.text:0040B090 Str             = dword ptr  8
.text:0040B090 arg_8           = dword ptr  0Ch
.text:0040B090
.text:0040B090                 sub     esp, 1Ch
.text:0040B093                 mov     edx, [esp+1Ch+Str]
.text:0040B097                 mov     [esp+1Ch+var_C], ebx
.text:0040B09B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040B09F                 mov     [esp+1Ch+lpFileName], esi
.text:0040B0A3                 mov     esi, [esp+1Ch+arg_8]
.text:0040B0A7                 test    ebx, ebx
.text:0040B0A9                 mov     [esp+1Ch+var_4], edi
.text:0040B0AD                 jnz     short loc_40B0E7
.text:0040B0AF                 test    edx, edx
.text:0040B0B1                 js      short loc_40B107
.text:0040B0B3                 test    esi, esi
.text:0040B0B5                 jz      short loc_40B0E7
.text:0040B0B7                 cld
.text:0040B0B8                 mov     eax, ebx
.text:0040B0BA                 mov     edi, esi
.text:0040B0BC                 mov     ecx, 18h
.text:0040B0C1                 rep stosd
.text:0040B0C3                 mov     [esp+1Ch+Str], esi
.text:0040B0C7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040B0CA                 call    _get_osfhandle
.text:0040B0CF                 mov     [esp+1Ch+hNamedPipe], eax
.text:0040B0D3                 mov     ebx, [esp+1Ch+var_C]
.text:0040B0D7                 mov     esi, [esp+1Ch+lpFileName]
.text:0040B0DB                 mov     edi, [esp+1Ch+var_4]
.text:0040B0DF                 add     esp, 1Ch
.text:0040B0E2                 jmp     loc_40B470
.text:0040B0E7 ; ---------------------------------------------------------------------------
.text:0040B0E7
.text:0040B0E7 loc_40B0E7:                             ; CODE XREF: sub_40B090+1D↑j
.text:0040B0E7                                         ; sub_40B090+25↑j
.text:0040B0E7                 call    _errno
.text:0040B0EC                 mov     dword ptr [eax], 16h
.text:0040B0F2
.text:0040B0F2 loc_40B0F2:                             ; CODE XREF: sub_40B090+92↓j
.text:0040B0F2                 mov     ebx, [esp+1Ch+var_C]
.text:0040B0F6                 mov     eax, 0FFFFFFFFh
.text:0040B0FB                 mov     esi, [esp+1Ch+lpFileName]
.text:0040B0FF                 mov     edi, [esp+1Ch+var_4]
.text:0040B103                 add     esp, 1Ch
.text:0040B106                 retn
.text:0040B107 ; ---------------------------------------------------------------------------
.text:0040B107
.text:0040B107 loc_40B107:                             ; CODE XREF: sub_40B090+21↑j
.text:0040B107                 mov     [esp+1Ch+var_18], edx
.text:0040B10B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040B112                 call    printf
.text:0040B117                 call    _errno
.text:0040B11C                 mov     dword ptr [eax], 9
.text:0040B122                 jmp     short loc_40B0F2
.text:0040B122 ; ---------------------------------------------------------------------------
.text:0040B124                 align 20h
.text:0040B140 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040B140                                         ; DATA XREF: .data:off_415084↓o
.text:0040B154 ; const CHAR ModuleName[]
.text:0040B154 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_40B090+101↓o
.text:0040B154                                         ; sub_40B090+26C↓o ...
.text:0040B161 ; const CHAR ProcName[]
.text:0040B161 ProcName        db 'GetFileAttributesExA',0
.text:0040B161                                         ; DATA XREF: sub_40B090+118↓o
.text:0040B176                 align 10h
.text:0040B180
.text:0040B180 loc_40B180:                             ; CODE XREF: .text:0040C324↓p
.text:0040B180                                         ; sub_40C720+37↓p
.text:0040B180                 push    ebp
.text:0040B181                 push    edi
.text:0040B182                 push    esi
.text:0040B183                 push    ebx
.text:0040B184                 sub     esp, 17Ch
.text:0040B18A                 mov     ebx, [esp+18Ch+Str]
.text:0040B191                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:0040B198                 call    GetModuleHandleA
.text:0040B19D                 sub     esp, 4
.text:0040B1A0                 mov     [esp+18Ch+hModule], eax
.text:0040B1A4                 mov     edx, [esp+18Ch+hModule]
.text:0040B1A8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040B1B0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040B1B3                 call    GetProcAddress
.text:0040B1B8                 sub     esp, 8
.text:0040B1BB                 mov     ebp, eax
.text:0040B1BD                 mov     eax, [esp+18Ch+hNamedPipe]
.text:0040B1C4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040B1C7                 call    GetFileAttributesA
.text:0040B1CC                 sub     esp, 4
.text:0040B1CF                 mov     [esp+18Ch+var_164], eax
.text:0040B1D3                 xor     eax, eax
.text:0040B1D5                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040B1DA                 jz      short loc_40B231
.text:0040B1DC                 cld
.text:0040B1DD                 mov     ecx, 50h ; 'P'
.text:0040B1E2                 lea     esi, [esp+18Ch+FindFileData]
.text:0040B1E6                 mov     edi, esi
.text:0040B1E8                 test    ebp, ebp
.text:0040B1EA                 rep stosd
.text:0040B1EC                 mov     [esp+18Ch+var_170], 0
.text:0040B1F4                 jz      short loc_40B215
.text:0040B1F6                 mov     [esp+18Ch+var_184], ebx
.text:0040B1FA                 mov     ecx, [esp+18Ch+hNamedPipe]
.text:0040B201                 mov     [esp+18Ch+lpProcName], 0
.text:0040B209                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040B20C                 call    ebp
.text:0040B20E                 sub     esp, 0Ch
.text:0040B211                 mov     [esp+198h+var_17C], eax
.text:0040B215
.text:0040B215 loc_40B215:                             ; CODE XREF: sub_40B090+164↑j
.text:0040B215                 mov     eax, [esp+198h+var_17C]
.text:0040B219                 test    eax, eax
.text:0040B21B                 jz      short loc_40B240
.text:0040B21D
.text:0040B21D loc_40B21D:                             ; CODE XREF: sub_40B090+221↓j
.text:0040B21D                                         ; sub_40B090+23B↓j
.text:0040B21D                 mov     ebx, [esp+198h+var_16C]
.text:0040B221                 mov     [esp+198h+hLibModule], ebx ; hLibModule
.text:0040B224                 call    FreeLibrary
.text:0040B229                 sub     esp, 4
.text:0040B22C                 mov     eax, 1
.text:0040B231
.text:0040B231 loc_40B231:                             ; CODE XREF: sub_40B090+14A↑j
.text:0040B231                 add     esp, 17Ch
.text:0040B237                 pop     ebx
.text:0040B238                 pop     esi
.text:0040B239                 pop     edi
.text:0040B23A                 pop     ebp
.text:0040B23B                 retn
.text:0040B23B ; ---------------------------------------------------------------------------
.text:0040B23C                 align 10h
.text:0040B240
.text:0040B240 loc_40B240:                             ; CODE XREF: sub_40B090+18B↑j
.text:0040B240                 mov     [esp+198h+lpFindFileData], esi ; lpFindFileData
.text:0040B244                 mov     edx, [esp+198h+lpFileName]
.text:0040B24B                 mov     [esp+198h+hLibModule], edx ; lpFileName
.text:0040B24E                 call    FindFirstFileA
.text:0040B253                 sub     esp, 8
.text:0040B256                 xor     ecx, ecx
.text:0040B258                 cmp     eax, 0FFFFFFFFh
.text:0040B25B                 setnz   cl
.text:0040B25E                 mov     edi, [esp+198h+var_168]
.text:0040B262                 mov     [ebx], edi
.text:0040B264                 mov     esi, [esp+198h+hModule]
.text:0040B268                 mov     [esp+198h+var_17C], ecx
.text:0040B26C                 mov     ecx, [esp+198h+var_164]
.text:0040B270                 mov     [ebx+8], esi
.text:0040B273                 mov     [ebx+4], ecx
.text:0040B276                 mov     ebp, [esp+198h+FindFileData.dwFileAttributes]
.text:0040B27A                 mov     edi, [esp+198h+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040B27E                 mov     [ebx+0Ch], ebp
.text:0040B281                 mov     [ebx+10h], edi
.text:0040B284                 mov     esi, [esp+198h+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040B288                 mov     ecx, [esp+198h+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040B28C                 mov     [ebx+18h], esi
.text:0040B28F                 mov     [ebx+14h], ecx
.text:0040B292                 mov     ebp, [esp+198h+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040B296                 mov     [ebx+1Ch], ebp
.text:0040B299                 mov     edi, [esp+198h+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040B29D                 mov     [ebx+20h], edi
.text:0040B2A0                 mov     [esp+198h+hLibModule], eax ; hFindFile
.text:0040B2A3                 call    FindClose
.text:0040B2A8                 sub     esp, 4
.text:0040B2AB                 mov     esi, [esp+198h+var_17C]
.text:0040B2AF                 test    esi, esi
.text:0040B2B1                 jnz     loc_40B21D
.text:0040B2B7                 cld
.text:0040B2B8                 mov     eax, [esp+198h+var_17C]
.text:0040B2BC                 mov     ecx, 9
.text:0040B2C1                 mov     edi, ebx
.text:0040B2C3                 rep stosd
.text:0040B2C5                 mov     ebp, [esp+198h+var_170]
.text:0040B2C9                 mov     [ebx], ebp
.text:0040B2CB                 jmp     loc_40B21D
.text:0040B2CB ; ---------------------------------------------------------------------------
.text:0040B2D0 ; const CHAR aFindfirstfilee[]
.text:0040B2D0 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40B090+283↓o
.text:0040B2E1 ; ---------------------------------------------------------------------------
.text:0040B2E1
.text:0040B2E1 loc_40B2E1:                             ; DATA XREF: sub_40B090:loc_40B37D↓o
.text:0040B2E1                 pop     esp
.text:0040B2E2                 sub     al, [eax]
.text:0040B2E4                 lea     esi, [esi+0]
.text:0040B2EA                 lea     edi, [edi+0]
.text:0040B2F0
.text:0040B2F0 loc_40B2F0:                             ; CODE XREF: .text:0040C423↓p
.text:0040B2F0                                         ; sub_40C720+3FA↓p ...
.text:0040B2F0                 push    ebp
.text:0040B2F1                 push    edi
.text:0040B2F2                 xor     edi, edi
.text:0040B2F4                 push    esi
.text:0040B2F5                 push    ebx
.text:0040B2F6                 sub     esp, 17Ch
.text:0040B2FC                 mov     [esp+188h+lpProcName], offset ModuleName ; "KERNEL32.DLL"
.text:0040B303                 call    LoadLibraryA
.text:0040B308                 sub     esp, 4
.text:0040B30B                 mov     [esp+188h+FindFileData.dwFileAttributes], eax
.text:0040B30F                 mov     ecx, [esp+188h+FindFileData.dwFileAttributes]
.text:0040B313                 mov     [esp+188h+var_184], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040B31B                 mov     [esp+188h+lpProcName], ecx ; hModule
.text:0040B31E                 call    GetProcAddress
.text:0040B323                 sub     esp, 8
.text:0040B326                 mov     edx, [esp+188h+Str]
.text:0040B32D                 mov     [esp+188h+hModule], eax
.text:0040B331                 mov     [esp+188h+lpProcName], edx ; Str
.text:0040B334                 call    strlen
.text:0040B339                 lea     edx, [eax+5]
.text:0040B33C                 mov     ebx, eax
.text:0040B33E                 mov     [esp+188h+lpProcName], edx ; Size
.text:0040B341                 call    malloc
.text:0040B346                 mov     esi, eax
.text:0040B348                 test    esi, esi
.text:0040B34A                 mov     eax, 1
.text:0040B34F                 jz      loc_40B42D
.text:0040B355                 mov     [esp+188h+lpProcName], esi ; Destination
.text:0040B358                 mov     ebp, [esp+188h+Str]
.text:0040B35F                 mov     [esp+188h+var_184], ebp ; Source
.text:0040B363                 call    strcpy
.text:0040B368                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040B36D                 cmp     al, 2Fh ; '/'
.text:0040B36F                 jz      loc_40B45B
.text:0040B375                 cmp     al, 5Ch ; '\'
.text:0040B377                 jz      loc_40B45B
.text:0040B37D
.text:0040B37D loc_40B37D:                             ; CODE XREF: sub_40B090+3D0↓j
.text:0040B37D                 mov     [esp+188h+var_184], offset loc_40B2E1 ; Source
.text:0040B385                 mov     [esp+188h+lpProcName], esi ; Destination
.text:0040B388                 call    strcat
.text:0040B38D                 mov     eax, [esp+188h+hModule]
.text:0040B391                 test    eax, eax
.text:0040B393                 jz      loc_40B455
.text:0040B399                 mov     [esp+188h+var_174], 0
.text:0040B3A1                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:0040B3A5                 mov     [esp+188h+var_178], 0
.text:0040B3AD                 mov     [esp+188h+var_17C], 1
.text:0040B3B5                 mov     [esp+188h+var_180], ebp
.text:0040B3B9                 mov     [esp+188h+var_184], 0
.text:0040B3C1                 mov     [esp+188h+lpProcName], esi
.text:0040B3C4                 call    [esp+188h+hModule]
.text:0040B3C8                 sub     esp, 18h
.text:0040B3CB                 mov     ebx, eax
.text:0040B3CD                 cmp     eax, 0FFFFFFFFh
.text:0040B3D0                 jz      short loc_40B438
.text:0040B3D2                 lea     esi, [esi+0]
.text:0040B3D9                 lea     edi, [edi+0]
.text:0040B3E0
.text:0040B3E0 loc_40B3E0:                             ; CODE XREF: sub_40B090+369↓j
.text:0040B3E0                                         ; sub_40B090+3C1↓j
.text:0040B3E0                 test    byte ptr [esp+1A0h+var_170], 10h
.text:0040B3E5                 jz      short loc_40B3E8
.text:0040B3E7                 inc     edi
.text:0040B3E8
.text:0040B3E8 loc_40B3E8:                             ; CODE XREF: sub_40B090+355↑j
.text:0040B3E8                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040B3EC                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040B3EF                 call    FindNextFileA
.text:0040B3F4                 sub     esp, 8
.text:0040B3F7                 test    eax, eax
.text:0040B3F9                 jnz     short loc_40B3E0
.text:0040B3FB                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040B3FE                 call    FindClose
.text:0040B403                 sub     esp, 4
.text:0040B406                 mov     esi, [esp+1A0h+var_174]
.text:0040B40A                 mov     [esp+1A0h+hFindFile], esi ; hLibModule
.text:0040B40D                 call    FreeLibrary
.text:0040B412                 sub     esp, 4
.text:0040B415                 mov     ebx, [esp+1A0h+var_10]
.text:0040B41C                 mov     [esp+1A0h+hFindFile], ebx ; LPCSTR
.text:0040B41F                 call    sub_40D8C0
.text:0040B424                 test    eax, eax
.text:0040B426                 jz      short loc_40B42B
.text:0040B428                 add     edi, 2
.text:0040B42B
.text:0040B42B loc_40B42B:                             ; CODE XREF: sub_40B090+396↑j
.text:0040B42B                 mov     eax, edi
.text:0040B42D
.text:0040B42D loc_40B42D:                             ; CODE XREF: sub_40B090+2BF↑j
.text:0040B42D                                         ; sub_40B090+3C3↓j
.text:0040B42D                 add     esp, 17Ch
.text:0040B433                 pop     ebx
.text:0040B434                 pop     esi
.text:0040B435                 pop     edi
.text:0040B436                 pop     ebp
.text:0040B437                 retn
.text:0040B438 ; ---------------------------------------------------------------------------
.text:0040B438
.text:0040B438 loc_40B438:                             ; CODE XREF: sub_40B090+340↑j
.text:0040B438                                         ; sub_40B090+3C9↓j
.text:0040B438                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040B43C                 mov     [esp+1A0h+hFindFile], esi ; lpFileName
.text:0040B43F                 call    FindFirstFileA
.text:0040B444                 mov     ebx, eax
.text:0040B446                 sub     esp, 8
.text:0040B449                 cmp     ebx, 0FFFFFFFFh
.text:0040B44C                 mov     eax, 2
.text:0040B451                 jnz     short loc_40B3E0
.text:0040B453                 jmp     short loc_40B42D
.text:0040B455 ; ---------------------------------------------------------------------------
.text:0040B455
.text:0040B455 loc_40B455:                             ; CODE XREF: sub_40B090+303↑j
.text:0040B455                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:0040B459                 jmp     short loc_40B438
.text:0040B45B ; ---------------------------------------------------------------------------
.text:0040B45B
.text:0040B45B loc_40B45B:                             ; CODE XREF: sub_40B090+2DF↑j
.text:0040B45B                                         ; sub_40B090+2E7↑j
.text:0040B45B                 mov     byte ptr [ebx+esi-1], 0
.text:0040B460                 jmp     loc_40B37D
.text:0040B460 ; ---------------------------------------------------------------------------
.text:0040B465                 align 10h
.text:0040B470
.text:0040B470 loc_40B470:                             ; CODE XREF: sub_40B090+52↑j
.text:0040B470                                         ; sub_411210-4629↓p
.text:0040B470                 push    ebp
.text:0040B471                 mov     eax, 0FFFFFFFFh
.text:0040B476                 push    edi
.text:0040B477                 push    esi
.text:0040B478                 push    ebx
.text:0040B479                 sub     esp, 0DCh
.text:0040B47F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040B486                 mov     ebp, [esp+0ECh+Str]
.text:0040B48D                 cmp     esi, 0FFFFFFFFh
.text:0040B490                 jz      loc_40B811
.text:0040B496                 cld
.text:0040B497                 xor     eax, eax
.text:0040B499                 lea     ebx, [esp+0ECh+FindFileData.cFileName+0D4h]
.text:0040B4A0                 mov     ecx, 0Dh
.text:0040B4A5                 mov     edi, ebx
.text:0040B4A7                 rep stosd
.text:0040B4A9                 mov     dword ptr [ebp+18h], 1
.text:0040B4B0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B4B3                 call    GetFileType
.text:0040B4B8                 sub     esp, 4
.text:0040B4BB                 xor     edx, edx
.text:0040B4BD                 cmp     eax, 2
.text:0040B4C0                 jz      loc_40B8F0
.text:0040B4C6                 cmp     eax, 3
.text:0040B4C9                 jz      loc_40B8E0
.text:0040B4CF
.text:0040B4CF loc_40B4CF:                             ; CODE XREF: sub_40B090+855↓j
.text:0040B4CF                                         ; sub_40B090+865↓j
.text:0040B4CF                 or      [ebp+0], edx
.text:0040B4D2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx ; lpFileInformation
.text:0040B4D6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B4D9                 call    GetFileInformationByHandle
.text:0040B4DE                 sub     esp, 8
.text:0040B4E1                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:0040B4E8                 test    ecx, ecx
.text:0040B4EA                 jnz     short loc_40B520
.text:0040B4EC                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B4F3                 test    edx, edx
.text:0040B4F5                 jnz     short loc_40B520
.text:0040B4F7                 mov     edx, [ebp+0]
.text:0040B4FA                 and     edx, 0F000h
.text:0040B500                 cmp     edx, 1000h
.text:0040B506                 jz      loc_40B876
.text:0040B50C
.text:0040B50C loc_40B50C:                             ; CODE XREF: sub_40B090+839↓j
.text:0040B50C                                         ; sub_40B090+845↓j
.text:0040B50C                 test    ecx, ecx
.text:0040B50E                 jnz     short loc_40B520
.text:0040B510                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B517                 test    edx, edx
.text:0040B519                 jz      loc_40B854
.text:0040B51F                 nop
.text:0040B520
.text:0040B520 loc_40B520:                             ; CODE XREF: sub_40B090+45A↑j
.text:0040B520                                         ; sub_40B090+465↑j ...
.text:0040B520                 cld
.text:0040B521                 mov     esi, ebx
.text:0040B523                 mov     dword ptr [ebp+14h], 0
.text:0040B52A                 lea     edi, [esp+0ECh+FindFileData.cFileName+94h]
.text:0040B52E                 mov     ecx, 0Dh
.text:0040B533                 rep movsd
.text:0040B535                 xor     ebx, ebx
.text:0040B537                 xor     edi, edi
.text:0040B539                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0C4h]
.text:0040B540                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0C0h]
.text:0040B544                 or      edx, ebx
.text:0040B546                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+94h]
.text:0040B54A                 mov     [ebp+8], edx
.text:0040B54D                 or      edi, esi
.text:0040B54F                 xor     edx, edx
.text:0040B551                 mov     [ebp+0Ch], edi
.text:0040B554                 test    bl, 10h
.text:0040B557                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0B0h]
.text:0040B55B                 setz    dl
.text:0040B55E                 mov     [ebp+10h], esi
.text:0040B561                 dec     edx
.text:0040B562                 and     edx, 0FFFFC000h
.text:0040B568                 add     edx, 8000h
.text:0040B56E                 or      edx, 124h
.text:0040B574                 test    bl, 1
.text:0040B577                 movzx   eax, dx
.text:0040B57A                 jnz     short loc_40B581
.text:0040B57C                 or      eax, 92h
.text:0040B581
.text:0040B581 loc_40B581:                             ; CODE XREF: sub_40B090+4EA↑j
.text:0040B581                 or      [ebp+0], eax
.text:0040B584                 xor     edx, edx
.text:0040B586                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+0B4h]
.text:0040B58A                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0B8h]
.text:0040B58E                 mov     eax, edx
.text:0040B590                 xor     esi, esi
.text:0040B592                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0A4h]
.text:0040B596                 mov     edi, ebx
.text:0040B598                 or      eax, edi
.text:0040B59A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+88h], eax
.text:0040B59E                 mov     ebx, ecx
.text:0040B5A0                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+0BCh]
.text:0040B5A4                 or      ebx, esi
.text:0040B5A6                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B5AA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+84h], ebx
.text:0040B5AE                 xor     ebx, ebx
.text:0040B5B0                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B5B4                 mov     [ebp+34h], esi
.text:0040B5B7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A0h]
.text:0040B5BB                 mov     [ebp+18h], edi
.text:0040B5BE                 xor     edi, edi
.text:0040B5C0                 or      esi, ebx
.text:0040B5C2                 mov     [ebp+30h], ecx
.text:0040B5C5                 or      edi, edx
.text:0040B5C7                 mov     edx, esi
.text:0040B5C9                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B5D1                 sub     edx, 0D53E8000h
.text:0040B5D7                 mov     ebx, edi
.text:0040B5D9                 sbb     ebx, 19DB1DEh
.text:0040B5DF                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:0040B5E3                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B5EB                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B5EE                 call    sub_412C30
.text:0040B5F3                 mov     ecx, eax
.text:0040B5F5                 shr     eax, 1Fh
.text:0040B5F8                 dec     eax
.text:0040B5F9                 and     ecx, eax
.text:0040B5FB                 mov     [ebp+38h], ecx
.text:0040B5FE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B601                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B605                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B60D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B615                 call    sub_413070
.text:0040B61A                 lea     ebx, [eax+eax*4]
.text:0040B61D                 xor     ecx, ecx
.text:0040B61F                 lea     esi, [ebx+ebx*4]
.text:0040B622                 shl     esi, 2
.text:0040B625                 mov     edi, esi
.text:0040B627                 shr     edi, 1Fh
.text:0040B62A                 dec     edi
.text:0040B62B                 and     edi, esi
.text:0040B62D                 mov     [ebp+3Ch], edi
.text:0040B630                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+98h]
.text:0040B634                 xor     edi, edi
.text:0040B636                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B63E                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+9Ch]
.text:0040B642                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B64A                 or      esi, ecx
.text:0040B64C                 or      edi, edx
.text:0040B64E                 mov     edx, esi
.text:0040B650                 mov     ecx, edi
.text:0040B652                 sub     edx, 0D53E8000h
.text:0040B658                 sbb     ecx, 19DB1DEh
.text:0040B65E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:0040B662                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B665                 call    sub_412C30
.text:0040B66A                 mov     ebx, eax
.text:0040B66C                 shr     eax, 1Fh
.text:0040B66F                 dec     eax
.text:0040B670                 and     ebx, eax
.text:0040B672                 mov     [ebp+48h], ebx
.text:0040B675                 xor     ebx, ebx
.text:0040B677                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B67A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B67E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B686                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B68E                 call    sub_413070
.text:0040B693                 lea     ecx, [eax+eax*4]
.text:0040B696                 lea     esi, [ecx+ecx*4]
.text:0040B699                 shl     esi, 2
.text:0040B69C                 mov     edi, esi
.text:0040B69E                 shr     edi, 1Fh
.text:0040B6A1                 dec     edi
.text:0040B6A2                 and     edi, esi
.text:0040B6A4                 mov     [ebp+4Ch], edi
.text:0040B6A7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A8h]
.text:0040B6AB                 xor     edi, edi
.text:0040B6AD                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B6B5                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0ACh]
.text:0040B6B9                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B6C1                 or      esi, ebx
.text:0040B6C3                 or      edi, edx
.text:0040B6C5                 mov     edx, esi
.text:0040B6C7                 mov     ebx, edi
.text:0040B6C9                 sub     edx, 0D53E8000h
.text:0040B6CF                 sbb     ebx, 19DB1DEh
.text:0040B6D5                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:0040B6D9                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B6DC                 call    sub_412C30
.text:0040B6E1                 mov     ecx, eax
.text:0040B6E3                 shr     eax, 1Fh
.text:0040B6E6                 dec     eax
.text:0040B6E7                 and     ecx, eax
.text:0040B6E9                 mov     [ebp+40h], ecx
.text:0040B6EC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B6F0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B6F8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B700                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B703                 call    sub_413070
.text:0040B708                 mov     dword ptr [ebp+50h], 200h
.text:0040B70F                 lea     ebx, [eax+eax*4]
.text:0040B712                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B716                 lea     edx, [ebx+ebx*4]
.text:0040B719                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B71D                 shl     edx, 2
.text:0040B720                 mov     ecx, edx
.text:0040B722                 shr     ecx, 1Fh
.text:0040B725                 dec     ecx
.text:0040B726                 and     ecx, edx
.text:0040B728                 test    edi, edi
.text:0040B72A                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B72E                 mov     [ebp+44h], ecx
.text:0040B731                 js      loc_40B847
.text:0040B737
.text:0040B737 loc_40B737:                             ; CODE XREF: sub_40B090+7BF↓j
.text:0040B737                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B73B                 xor     esi, esi
.text:0040B73D                 mov     ecx, eax
.text:0040B73F                 shrd    ecx, edx, 9
.text:0040B743                 mov     ebx, edx
.text:0040B745                 mov     eax, esi
.text:0040B747                 and     edi, 1FFh
.text:0040B74D                 sar     ebx, 9
.text:0040B750                 or      eax, edi
.text:0040B752                 jz      short loc_40B75A
.text:0040B754                 add     ecx, 1
.text:0040B757                 adc     ebx, 0
.text:0040B75A
.text:0040B75A loc_40B75A:                             ; CODE XREF: sub_40B090+6C2↑j
.text:0040B75A                 mov     [ebp+5Ch], ebx
.text:0040B75D                 mov     esi, dword_415080
.text:0040B763                 xor     edi, edi
.text:0040B765                 mov     [ebp+58h], ecx
.text:0040B768                 mov     ebx, dword_415080
.text:0040B76E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B772                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B776                 mov     [ebp+50h], ebx
.text:0040B779                 shr     ebx, 9
.text:0040B77C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:0040B780                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:0040B784                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:0040B788                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B78B                 call    sub_412C30
.text:0040B790                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:0040B794                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B798                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B79C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+74h], ebx
.text:0040B7A0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+7Ch], eax
.text:0040B7A4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+80h], edx
.text:0040B7A8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+78h], 0
.text:0040B7B0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:0040B7B4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], ecx
.text:0040B7B7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B7BB                 call    sub_413070
.text:0040B7C0                 mov     ebx, edx
.text:0040B7C2                 or      ebx, eax
.text:0040B7C4                 jz      short loc_40B820
.text:0040B7C6                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B7CA                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040B7CE                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B7D2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], edi
.text:0040B7D6                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040B7DA                 add     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], 1
.text:0040B7DF                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+70h], esi
.text:0040B7E3                 adc     dword ptr [esp+0ECh+FindFileData.cFileName+70h], 0
.text:0040B7E8                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040B7EC                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+70h]
.text:0040B7F0                 mov     ebx, edx
.text:0040B7F2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040B7F6                 mov     esi, eax
.text:0040B7F8                 mov     eax, ebx
.text:0040B7FA                 imul    ecx, edx
.text:0040B7FD                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B801                 imul    edx, edi
.text:0040B804                 add     eax, ecx
.text:0040B806                 lea     edi, [edx+eax]
.text:0040B809
.text:0040B809 loc_40B809:                             ; CODE XREF: sub_40B090+7B5↓j
.text:0040B809                 mov     [ebp+58h], esi
.text:0040B80C                 xor     eax, eax
.text:0040B80E                 mov     [ebp+5Ch], edi
.text:0040B811
.text:0040B811 loc_40B811:                             ; CODE XREF: sub_40B090+400↑j
.text:0040B811                 add     esp, 0DCh
.text:0040B817                 pop     ebx
.text:0040B818                 pop     esi
.text:0040B819                 pop     edi
.text:0040B81A                 pop     ebp
.text:0040B81B                 retn
.text:0040B81B ; ---------------------------------------------------------------------------
.text:0040B81C                 align 10h
.text:0040B820
.text:0040B820 loc_40B820:                             ; CODE XREF: sub_40B090+734↑j
.text:0040B820                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B824                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040B828                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B82C                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B830                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B834                 imul    ebx, edi
.text:0040B837                 mov     esi, eax
.text:0040B839                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040B83D                 add     edx, ebx
.text:0040B83F                 imul    ecx, eax
.text:0040B842                 lea     edi, [ecx+edx]
.text:0040B845                 jmp     short loc_40B809
.text:0040B847 ; ---------------------------------------------------------------------------
.text:0040B847
.text:0040B847 loc_40B847:                             ; CODE XREF: sub_40B090+6A1↑j
.text:0040B847                 add     eax, 1FFh
.text:0040B84C                 adc     edx, 0
.text:0040B84F                 jmp     loc_40B737
.text:0040B854 ; ---------------------------------------------------------------------------
.text:0040B854
.text:0040B854 loc_40B854:                             ; CODE XREF: sub_40B090+489↑j
.text:0040B854                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B857                 lea     ecx, [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B85E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx ; lpFileSizeHigh
.text:0040B862                 call    GetFileSize
.text:0040B867                 sub     esp, 8
.text:0040B86A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], eax
.text:0040B871                 jmp     loc_40B520
.text:0040B876 ; ---------------------------------------------------------------------------
.text:0040B876
.text:0040B876 loc_40B876:                             ; CODE XREF: sub_40B090+476↑j
.text:0040B876                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+90h], 0
.text:0040B87E                 lea     ecx, [esp+0ECh+FindFileData.cFileName+90h]
.text:0040B882                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+58h], 0 ; lpBytesLeftThisMessage
.text:0040B88A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+54h], ecx ; lpTotalBytesAvail
.text:0040B88E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0 ; lpBytesRead
.text:0040B896                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 0 ; nBufferSize
.text:0040B89E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], 0 ; lpBuffer
.text:0040B8A6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hNamedPipe
.text:0040B8A9                 call    PeekNamedPipe
.text:0040B8AE                 sub     esp, 18h
.text:0040B8B1                 test    eax, eax
.text:0040B8B3                 jz      short loc_40B8CE
.text:0040B8B5                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+90h]
.text:0040B8B9                 xor     eax, eax
.text:0040B8BB                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F4h], eax
.text:0040B8C2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], ecx
.text:0040B8C9                 jmp     loc_40B50C
.text:0040B8CE ; ---------------------------------------------------------------------------
.text:0040B8CE
.text:0040B8CE loc_40B8CE:                             ; CODE XREF: sub_40B090+823↑j
.text:0040B8CE                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:0040B8D5                 jmp     loc_40B50C
.text:0040B8D5 ; ---------------------------------------------------------------------------
.text:0040B8DA                 align 10h
.text:0040B8E0
.text:0040B8E0 loc_40B8E0:                             ; CODE XREF: sub_40B090+439↑j
.text:0040B8E0                 mov     edx, 1000h
.text:0040B8E5                 jmp     loc_40B4CF
.text:0040B8E5 ; ---------------------------------------------------------------------------
.text:0040B8EA                 align 10h
.text:0040B8F0
.text:0040B8F0 loc_40B8F0:                             ; CODE XREF: sub_40B090+430↑j
.text:0040B8F0                 mov     edx, 2000h
.text:0040B8F5                 jmp     loc_40B4CF
.text:0040B8F5 sub_40B090      endp ; sp-analysis failed
.text:0040B8F5
.text:0040B8F5 ; ---------------------------------------------------------------------------
.text:0040B8FA aLnk            db '.lnk',0             ; DATA XREF: sub_40B940+E0↓o
.text:0040B8FA                                         ; .text:0040BFEA↓o ...
.text:0040B8FF ; const CHAR aKernel32[]
.text:0040B8FF aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40B940+12D↓o
.text:0040B8FF                                         ; .text:0040C69B↓o
.text:0040B908 ; const CHAR aGetcompressedf[]
.text:0040B908 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040B908                                         ; DATA XREF: sub_40B940+13E↓o
.text:0040B908                                         ; .text:0040C6AC↓o
.text:0040B91F ; const CHAR aGetbinarytypea[]
.text:0040B91F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40B940+333↓o
.text:0040B91F                                         ; .text:0040C046↓o ...
.text:0040B92E ; const char aPathext[]
.text:0040B92E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40B940:loc_40BD27↓o
.text:0040B92E                                         ; .text:loc_40C0F0↓o ...
.text:0040B936                 align 10h
.text:0040B940
.text:0040B940 ; =============== S U B R O U T I N E =======================================
.text:0040B940
.text:0040B940
.text:0040B940 ; int __cdecl sub_40B940(char *String1, int)
.text:0040B940 sub_40B940      proc near               ; CODE XREF: sub_40C720+3CD↓p
.text:0040B940                                         ; sub_411210-460B↓p
.text:0040B940
.text:0040B940 Str             = dword ptr -6Ch
.text:0040B940 lpProcName      = dword ptr -68h
.text:0040B940 var_64          = dword ptr -64h
.text:0040B940 var_60          = dword ptr -60h
.text:0040B940 var_5C          = dword ptr -5Ch
.text:0040B940 var_4C          = dword ptr -4Ch
.text:0040B940 var_48          = dword ptr -48h
.text:0040B940 var_44          = dword ptr -44h
.text:0040B940 var_40          = dword ptr -40h
.text:0040B940 var_3C          = dword ptr -3Ch
.text:0040B940 var_38          = dword ptr -38h
.text:0040B940 lpRootPathName  = dword ptr -30h
.text:0040B940 var_2C          = byte ptr -2Ch
.text:0040B940 var_28          = dword ptr -28h
.text:0040B940 var_24          = dword ptr -24h
.text:0040B940 var_20          = dword ptr -20h
.text:0040B940 var_1C          = dword ptr -1Ch
.text:0040B940 var_18          = byte ptr -18h
.text:0040B940 String1         = dword ptr  4
.text:0040B940 arg_4           = dword ptr  8
.text:0040B940
.text:0040B940                 push    ebp
.text:0040B941                 push    edi
.text:0040B942                 push    esi
.text:0040B943                 push    ebx
.text:0040B944                 sub     esp, 5Ch
.text:0040B947                 mov     edx, [esp+6Ch+String1]
.text:0040B94B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040B94E                 call    sub_40D4F0
.text:0040B953                 mov     [esp+6Ch+Str], eax
.text:0040B956                 call    sub_40D0C0
.text:0040B95B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040B95F                 test    eax, eax
.text:0040B961                 jz      loc_40BB93
.text:0040B967                 mov     [esp+6Ch+Str], eax ; Str
.text:0040B96A                 call    strlen
.text:0040B96F                 mov     edx, [esp+6Ch+arg_4]
.text:0040B973                 mov     ebx, eax
.text:0040B975                 mov     esi, [edx+0Ch]
.text:0040B978                 mov     edi, [edx+8]
.text:0040B97B                 mov     eax, esi
.text:0040B97D                 or      eax, edi
.text:0040B97F                 jz      loc_40BDA0
.text:0040B985                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040B989                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040B98C                 call    GetDriveTypeA
.text:0040B991                 sub     esp, 4
.text:0040B994                 cmp     eax, 4
.text:0040B997                 jz      loc_40BDA0
.text:0040B99D
.text:0040B99D loc_40B99D:                             ; CODE XREF: sub_40B940+48A↓j
.text:0040B99D                                         ; sub_40B940+4B2↓j
.text:0040B99D                 mov     edx, [esp+6Ch+arg_4]
.text:0040B9A1                 mov     esi, [edx+14h]
.text:0040B9A4                 mov     edi, [edx+10h]
.text:0040B9A7                 mov     ecx, esi
.text:0040B9A9                 or      ecx, edi
.text:0040B9AB                 jnz     short loc_40B9D5
.text:0040B9AD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040B9B1                 xor     esi, esi
.text:0040B9B3                 xor     edi, edi
.text:0040B9B5                 test    ebp, ebp
.text:0040B9B7                 jz      short loc_40B9C7
.text:0040B9B9                 movzx   ebx, byte ptr [ebp+0]
.text:0040B9BD                 test    bl, bl
.text:0040B9BF                 mov     cl, bl
.text:0040B9C1                 jnz     loc_40BD51
.text:0040B9C7
.text:0040B9C7 loc_40B9C7:                             ; CODE XREF: sub_40B940+77↑j
.text:0040B9C7                 xor     eax, eax
.text:0040B9C9                 xor     edx, edx
.text:0040B9CB
.text:0040B9CB loc_40B9CB:                             ; CODE XREF: sub_40B940+458↓j
.text:0040B9CB                 mov     ebp, [esp+6Ch+arg_4]
.text:0040B9CF                 mov     [ebp+10h], eax
.text:0040B9D2                 mov     [ebp+14h], edx
.text:0040B9D5
.text:0040B9D5 loc_40B9D5:                             ; CODE XREF: sub_40B940+6B↑j
.text:0040B9D5                 mov     edi, [esp+6Ch+String1]
.text:0040B9D9                 xor     ebx, ebx
.text:0040B9DB                 test    edi, edi
.text:0040B9DD                 jz      loc_40BC53
.text:0040B9E3                 mov     esi, [esp+6Ch+String1]
.text:0040B9E7                 cmp     byte ptr [esi], 0
.text:0040B9EA                 jnz     loc_40BC60
.text:0040B9F0
.text:0040B9F0 loc_40B9F0:                             ; CODE XREF: sub_40B940+38C↓j
.text:0040B9F0                                         ; sub_40B940+397↓j
.text:0040B9F0                 mov     ebp, [esp+6Ch+String1]
.text:0040B9F4                 test    ebp, ebp
.text:0040B9F6                 jz      loc_40BC53
.text:0040B9FC                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040BA04                 mov     edi, [esp+6Ch+String1]
.text:0040BA08                 mov     [esp+6Ch+Str], edi ; Str
.text:0040BA0B                 call    strrchr
.text:0040BA10                 test    eax, eax
.text:0040BA12                 jz      loc_40BC53
.text:0040BA18                 cld
.text:0040BA19                 mov     ecx, 5
.text:0040BA1E                 mov     esi, eax
.text:0040BA20                 mov     edi, offset aLnk ; ".lnk"
.text:0040BA25                 repe cmpsb
.text:0040BA27                 setz    cl
.text:0040BA2A                 movzx   eax, cl
.text:0040BA2D                 lea     esi, [esi+0]
.text:0040BA30
.text:0040BA30 loc_40BA30:                             ; CODE XREF: sub_40B940+315↓j
.text:0040BA30                 test    eax, eax
.text:0040BA32                 jz      short loc_40BA3A
.text:0040BA34                 or      ebx, 0A000h
.text:0040BA3A
.text:0040BA3A loc_40BA3A:                             ; CODE XREF: sub_40B940+F2↑j
.text:0040BA3A                 mov     esi, [esp+6Ch+arg_4]
.text:0040BA3E                 xor     ecx, ecx
.text:0040BA40                 mov     edi, ds:dword_416210
.text:0040BA46                 or      [esi], ebx
.text:0040BA48                 mov     ebx, [esi+14h]
.text:0040BA4B                 mov     ebp, [esi+10h]
.text:0040BA4E                 mov     eax, ebx
.text:0040BA50                 xor     eax, ecx
.text:0040BA52                 xor     ebp, edi
.text:0040BA54                 or      eax, ebp
.text:0040BA56                 jnz     loc_40BBE0
.text:0040BA5C
.text:0040BA5C loc_40BA5C:                             ; CODE XREF: sub_40B940+30E↓j
.text:0040BA5C                 mov     ecx, dword_415080
.text:0040BA62                 xor     esi, esi
.text:0040BA64                 xor     edi, edi
.text:0040BA66                 mov     edx, [esp+6Ch+arg_4]
.text:0040BA6A                 mov     [edx+50h], ecx
.text:0040BA6D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040BA74                 call    LoadLibraryA
.text:0040BA79                 sub     esp, 4
.text:0040BA7C                 mov     ebp, eax
.text:0040BA7E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040BA86                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040BA89                 call    GetProcAddress
.text:0040BA8E                 sub     esp, 8
.text:0040BA91                 test    eax, eax
.text:0040BA93                 jz      short loc_40BAC8
.text:0040BA95                 mov     ebx, [esp+6Ch+String1]
.text:0040BA99                 lea     esi, [esp+6Ch+var_2C]
.text:0040BA9D                 mov     [esp+6Ch+lpProcName], esi
.text:0040BAA1                 mov     [esp+6Ch+Str], ebx
.text:0040BAA4                 call    eax
.text:0040BAA6                 sub     esp, 8
.text:0040BAA9                 mov     ebx, eax
.text:0040BAAB                 cmp     eax, 0FFFFFFFFh
.text:0040BAAE                 jz      loc_40BBC9
.text:0040BAB4
.text:0040BAB4 loc_40BAB4:                             ; CODE XREF: sub_40B940+29A↓j
.text:0040BAB4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040BAB8                 mov     ecx, ebx
.text:0040BABA                 xor     edi, edi
.text:0040BABC                 xor     ebx, ebx
.text:0040BABE                 mov     edx, esi
.text:0040BAC0                 mov     esi, ecx
.text:0040BAC2                 or      esi, edi
.text:0040BAC4                 mov     edi, ebx
.text:0040BAC6                 or      edi, edx
.text:0040BAC8
.text:0040BAC8 loc_40BAC8:                             ; CODE XREF: sub_40B940+153↑j
.text:0040BAC8                                         ; sub_40B940+294↓j
.text:0040BAC8                 test    ebp, ebp
.text:0040BACA                 jz      short loc_40BAD7
.text:0040BACC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040BACF                 call    FreeLibrary
.text:0040BAD4                 sub     esp, 4
.text:0040BAD7
.text:0040BAD7 loc_40BAD7:                             ; CODE XREF: sub_40B940+18A↑j
.text:0040BAD7                 mov     ebp, edi
.text:0040BAD9                 mov     edx, ebp
.text:0040BADB                 mov     edi, esi
.text:0040BADD                 or      edx, esi
.text:0040BADF                 jnz     short loc_40BAEB
.text:0040BAE1                 mov     eax, [esp+6Ch+arg_4]
.text:0040BAE5                 mov     edi, [eax+30h]
.text:0040BAE8                 mov     ebp, [eax+34h]
.text:0040BAEB
.text:0040BAEB loc_40BAEB:                             ; CODE XREF: sub_40B940+19F↑j
.text:0040BAEB                 mov     [esp+6Ch+lpProcName], ebp
.text:0040BAEF                 mov     ebx, dword_415080
.text:0040BAF5                 xor     esi, esi
.text:0040BAF7                 mov     [esp+6Ch+var_60], esi
.text:0040BAFB                 mov     [esp+6Ch+Str], edi
.text:0040BAFE                 mov     [esp+6Ch+var_64], ebx
.text:0040BB02                 call    sub_412C30
.text:0040BB07                 mov     [esp+6Ch+var_3C], eax
.text:0040BB0B                 mov     ecx, dword_415080
.text:0040BB11                 mov     [esp+6Ch+lpProcName], ebp
.text:0040BB15                 mov     [esp+6Ch+var_38], edx
.text:0040BB19                 shr     ecx, 9
.text:0040BB1C                 mov     [esp+6Ch+var_44], ecx
.text:0040BB20                 mov     [esp+6Ch+var_40], 0
.text:0040BB28                 mov     [esp+6Ch+var_64], ebx
.text:0040BB2C                 mov     [esp+6Ch+var_60], esi
.text:0040BB30                 mov     [esp+6Ch+Str], edi
.text:0040BB33                 call    sub_413070
.text:0040BB38                 mov     ebp, edx
.text:0040BB3A                 or      ebp, eax
.text:0040BB3C                 jz      short loc_40BBA0
.text:0040BB3E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040BB42                 mov     esi, [esp+6Ch+var_38]
.text:0040BB46                 mov     eax, [esp+6Ch+var_44]
.text:0040BB4A                 mov     [esp+6Ch+var_4C], ebp
.text:0040BB4E                 mov     ecx, [esp+6Ch+var_40]
.text:0040BB52                 mov     ebx, [esp+6Ch+var_44]
.text:0040BB56                 add     [esp+6Ch+var_4C], 1
.text:0040BB5B                 mov     [esp+6Ch+var_48], esi
.text:0040BB5F                 mov     edi, [esp+6Ch+var_4C]
.text:0040BB63                 adc     [esp+6Ch+var_48], 0
.text:0040BB68                 mul     [esp+6Ch+var_4C]
.text:0040BB6C                 imul    ecx, edi
.text:0040BB6F                 mov     esi, eax
.text:0040BB71                 mov     eax, [esp+6Ch+var_48]
.text:0040BB75                 add     edx, ecx
.text:0040BB77                 imul    ebx, eax
.text:0040BB7A                 lea     edi, [ebx+edx]
.text:0040BB7D
.text:0040BB7D loc_40BB7D:                             ; CODE XREF: sub_40B940+287↓j
.text:0040BB7D                 mov     ebx, [esp+6Ch+arg_4]
.text:0040BB81                 mov     [ebx+58h], esi
.text:0040BB84                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040BB88                 mov     [ebx+5Ch], edi
.text:0040BB8B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040BB8E                 call    free
.text:0040BB93
.text:0040BB93 loc_40BB93:                             ; CODE XREF: sub_40B940+21↑j
.text:0040BB93                 add     esp, 5Ch
.text:0040BB96                 xor     eax, eax
.text:0040BB98                 pop     ebx
.text:0040BB99                 pop     esi
.text:0040BB9A                 pop     edi
.text:0040BB9B                 pop     ebp
.text:0040BB9C                 retn
.text:0040BB9C ; ---------------------------------------------------------------------------
.text:0040BB9D                 align 10h
.text:0040BBA0
.text:0040BBA0 loc_40BBA0:                             ; CODE XREF: sub_40B940+1FC↑j
.text:0040BBA0                 mov     eax, [esp+6Ch+var_3C]
.text:0040BBA4                 mov     edi, [esp+6Ch+var_40]
.text:0040BBA8                 mov     ecx, [esp+6Ch+var_3C]
.text:0040BBAC                 mul     [esp+6Ch+var_44]
.text:0040BBB0                 mov     ebx, [esp+6Ch+var_44]
.text:0040BBB4                 imul    ecx, edi
.text:0040BBB7                 mov     ebp, edx
.text:0040BBB9                 mov     esi, eax
.text:0040BBBB                 mov     edx, [esp+6Ch+var_38]
.text:0040BBBF                 add     ebp, ecx
.text:0040BBC1                 imul    ebx, edx
.text:0040BBC4                 lea     edi, [ebx+ebp]
.text:0040BBC7                 jmp     short loc_40BB7D
.text:0040BBC9 ; ---------------------------------------------------------------------------
.text:0040BBC9
.text:0040BBC9 loc_40BBC9:                             ; CODE XREF: sub_40B940+16E↑j
.text:0040BBC9                 call    GetLastError
.text:0040BBCE                 xor     esi, esi
.text:0040BBD0                 xor     edi, edi
.text:0040BBD2                 test    eax, eax
.text:0040BBD4                 jnz     loc_40BAC8
.text:0040BBDA                 jmp     loc_40BAB4
.text:0040BBDA ; ---------------------------------------------------------------------------
.text:0040BBDF                 align 10h
.text:0040BBE0
.text:0040BBE0 loc_40BBE0:                             ; CODE XREF: sub_40B940+116↑j
.text:0040BBE0                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040BBE4                 lea     ecx, [esp+6Ch+var_20]
.text:0040BBE8                 lea     ebx, [esp+6Ch+var_1C]
.text:0040BBEC                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040BBF0                 lea     edi, [esp+6Ch+var_24]
.text:0040BBF4                 lea     ebp, [esp+6Ch+var_28]
.text:0040BBF8                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040BBFC                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040BC00                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040BC04                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040BC07                 call    sub_40DF10
.text:0040BC0C                 test    eax, eax
.text:0040BC0E                 jnz     short loc_40BC30
.text:0040BC10                 mov     [esp+6Ch+var_28], 1
.text:0040BC18                 mov     [esp+6Ch+var_24], 200h
.text:0040BC20                 mov     [esp+6Ch+var_20], 0
.text:0040BC28                 mov     [esp+6Ch+var_1C], 0
.text:0040BC30
.text:0040BC30 loc_40BC30:                             ; CODE XREF: sub_40B940+2CE↑j
.text:0040BC30                 mov     ebp, [esp+6Ch+var_24]
.text:0040BC34                 mov     edi, [esp+6Ch+var_28]
.text:0040BC38                 mov     eax, [esp+6Ch+arg_4]
.text:0040BC3C                 imul    ebp, edi
.text:0040BC3F                 mov     esi, [eax+10h]
.text:0040BC42                 mov     dword_415080, ebp
.text:0040BC48                 mov     ds:dword_416210, esi
.text:0040BC4E                 jmp     loc_40BA5C
.text:0040BC53 ; ---------------------------------------------------------------------------
.text:0040BC53
.text:0040BC53 loc_40BC53:                             ; CODE XREF: sub_40B940+9D↑j
.text:0040BC53                                         ; sub_40B940+B6↑j ...
.text:0040BC53                 xor     eax, eax
.text:0040BC55                 jmp     loc_40BA30
.text:0040BC55 ; ---------------------------------------------------------------------------
.text:0040BC5A                 align 10h
.text:0040BC60
.text:0040BC60 loc_40BC60:                             ; CODE XREF: sub_40B940+AA↑j
.text:0040BC60                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:0040BC67                 xor     ebp, ebp
.text:0040BC69                 call    GetModuleHandleA
.text:0040BC6E                 sub     esp, 4
.text:0040BC71                 mov     edi, eax
.text:0040BC73                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040BC7B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040BC7E                 call    GetProcAddress
.text:0040BC83                 sub     esp, 8
.text:0040BC86                 mov     edx, eax
.text:0040BC88                 test    eax, eax
.text:0040BC8A                 jz      short loc_40BCA4
.text:0040BC8C                 mov     eax, [esp+6Ch+String1]
.text:0040BC90                 lea     ecx, [esp+6Ch+var_18]
.text:0040BC94                 mov     [esp+6Ch+lpProcName], ecx
.text:0040BC98                 mov     [esp+6Ch+Str], eax
.text:0040BC9B                 call    edx
.text:0040BC9D                 sub     esp, 8
.text:0040BCA0                 test    eax, eax
.text:0040BCA2                 jnz     short loc_40BD08
.text:0040BCA4
.text:0040BCA4 loc_40BCA4:                             ; CODE XREF: sub_40B940+34A↑j
.text:0040BCA4                 mov     edx, ds:Str
.text:0040BCAA                 test    edx, edx
.text:0040BCAC                 jz      short loc_40BD27
.text:0040BCAE
.text:0040BCAE loc_40BCAE:                             ; CODE XREF: sub_40B940+3FA↓j
.text:0040BCAE                                         ; sub_40B940+40C↓j
.text:0040BCAE                 mov     eax, [esp+6Ch+String1]
.text:0040BCB2                 test    eax, eax
.text:0040BCB4                 jz      short loc_40BCBF
.text:0040BCB6                 mov     esi, [esp+6Ch+String1]
.text:0040BCBA                 cmp     byte ptr [esi], 0
.text:0040BCBD                 jnz     short loc_40BCDC
.text:0040BCBF
.text:0040BCBF loc_40BCBF:                             ; CODE XREF: sub_40B940+374↑j
.text:0040BCBF                                         ; sub_40B940+3B0↓j ...
.text:0040BCBF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040BCC2                 call    FreeLibrary
.text:0040BCC7                 sub     esp, 4
.text:0040BCCA                 test    ebp, ebp
.text:0040BCCC                 jz      loc_40B9F0
.text:0040BCD2                 mov     ebx, 49h ; 'I'
.text:0040BCD7                 jmp     loc_40B9F0
.text:0040BCDC ; ---------------------------------------------------------------------------
.text:0040BCDC
.text:0040BCDC loc_40BCDC:                             ; CODE XREF: sub_40B940+37D↑j
.text:0040BCDC                 mov     [esp+6Ch+Str], esi ; Str
.text:0040BCDF                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040BCE7                 call    strrchr
.text:0040BCEC                 test    eax, eax
.text:0040BCEE                 mov     esi, eax
.text:0040BCF0                 jz      short loc_40BCBF
.text:0040BCF2                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040BCF6                 mov     ecx, ds:Str
.text:0040BCFC                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040BCFF                 call    strstr
.text:0040BD04                 test    eax, eax
.text:0040BD06                 jz      short loc_40BD0F
.text:0040BD08
.text:0040BD08 loc_40BD08:                             ; CODE XREF: sub_40B940+362↑j
.text:0040BD08                                         ; sub_40B940+3E5↓j
.text:0040BD08                 mov     ebp, 1
.text:0040BD0D                 jmp     short loc_40BCBF
.text:0040BD0F ; ---------------------------------------------------------------------------
.text:0040BD0F
.text:0040BD0F loc_40BD0F:                             ; CODE XREF: sub_40B940+3C6↑j
.text:0040BD0F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040BD13                 mov     edx, off_415084 ; ".com;.exe;.bat;.cmd"
.text:0040BD19                 mov     [esp+6Ch+Str], edx ; Str
.text:0040BD1C                 call    strstr
.text:0040BD21                 test    eax, eax
.text:0040BD23                 jz      short loc_40BCBF
.text:0040BD25                 jmp     short loc_40BD08
.text:0040BD27 ; ---------------------------------------------------------------------------
.text:0040BD27
.text:0040BD27 loc_40BD27:                             ; CODE XREF: sub_40B940+36C↑j
.text:0040BD27                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040BD2E                 call    getenv
.text:0040BD33                 mov     ds:Str, eax
.text:0040BD38                 test    eax, eax
.text:0040BD3A                 jnz     loc_40BCAE
.text:0040BD40                 mov     esi, off_415084 ; ".com;.exe;.bat;.cmd"
.text:0040BD46                 mov     ds:Str, esi
.text:0040BD4C                 jmp     loc_40BCAE
.text:0040BD51 ; ---------------------------------------------------------------------------
.text:0040BD51
.text:0040BD51 loc_40BD51:                             ; CODE XREF: sub_40B940+81↑j
.text:0040BD51                                         ; sub_40B940+452↓j
.text:0040BD51                 shld    edi, esi, 8
.text:0040BD55                 movsx   eax, cl
.text:0040BD58                 shl     esi, 8
.text:0040BD5B                 cdq
.text:0040BD5C                 add     esi, eax
.text:0040BD5E                 adc     edi, edx
.text:0040BD60                 mov     edx, edi
.text:0040BD62                 xor     ebx, ebx
.text:0040BD64                 and     edx, 0FF000000h
.text:0040BD6A                 mov     eax, edx
.text:0040BD6C                 or      eax, ebx
.text:0040BD6E                 jz      short loc_40BD89
.text:0040BD70                 mov     ecx, edx
.text:0040BD72                 xor     eax, eax
.text:0040BD74                 shr     ecx, 10h
.text:0040BD77                 mov     edx, esi
.text:0040BD79                 xor     edx, ecx
.text:0040BD7B                 mov     ecx, edi
.text:0040BD7D                 xor     ecx, eax
.text:0040BD7F                 mov     esi, edx
.text:0040BD81                 mov     edi, ecx
.text:0040BD83                 and     edi, 0FFFFFFh
.text:0040BD89
.text:0040BD89 loc_40BD89:                             ; CODE XREF: sub_40B940+42E↑j
.text:0040BD89                 inc     ebp
.text:0040BD8A                 movzx   ebx, byte ptr [ebp+0]
.text:0040BD8E                 test    bl, bl
.text:0040BD90                 mov     cl, bl
.text:0040BD92                 jnz     short loc_40BD51
.text:0040BD94                 mov     eax, esi
.text:0040BD96                 mov     edx, edi
.text:0040BD98                 jmp     loc_40B9CB
.text:0040BD98 ; ---------------------------------------------------------------------------
.text:0040BD9D                 align 10h
.text:0040BDA0
.text:0040BDA0 loc_40BDA0:                             ; CODE XREF: sub_40B940+3F↑j
.text:0040BDA0                                         ; sub_40B940+57↑j
.text:0040BDA0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040BDA4                 mov     ebp, [esp+6Ch+String1]
.text:0040BDA8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040BDAC                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040BDAF                 call    _stricmp
.text:0040BDB4                 test    eax, eax
.text:0040BDB6                 jnz     short loc_40BDD0
.text:0040BDB8                 mov     ebx, [esp+6Ch+arg_4]
.text:0040BDBC                 mov     dword ptr [ebx+8], 5
.text:0040BDC3                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040BDCA                 jmp     loc_40B99D
.text:0040BDCA ; ---------------------------------------------------------------------------
.text:0040BDCF                 align 10h
.text:0040BDD0
.text:0040BDD0 loc_40BDD0:                             ; CODE XREF: sub_40B940+476↑j
.text:0040BDD0                 mov     ebp, [esp+6Ch+String1]
.text:0040BDD4                 xor     esi, esi
.text:0040BDD6                 xor     edi, edi
.text:0040BDD8                 add     ebp, ebx
.text:0040BDDA                 jz      short loc_40BDE4
.text:0040BDDC                 movzx   ecx, byte ptr [ebp+0]
.text:0040BDE0                 test    cl, cl
.text:0040BDE2                 jnz     short loc_40BDF7
.text:0040BDE4
.text:0040BDE4 loc_40BDE4:                             ; CODE XREF: sub_40B940+49A↑j
.text:0040BDE4                 xor     eax, eax
.text:0040BDE6                 xor     edx, edx
.text:0040BDE8
.text:0040BDE8 loc_40BDE8:                             ; CODE XREF: sub_40B940+4FE↓j
.text:0040BDE8                 mov     ebp, [esp+6Ch+arg_4]
.text:0040BDEC                 mov     [ebp+8], eax
.text:0040BDEF                 mov     [ebp+0Ch], edx
.text:0040BDF2                 jmp     loc_40B99D
.text:0040BDF7 ; ---------------------------------------------------------------------------
.text:0040BDF7
.text:0040BDF7 loc_40BDF7:                             ; CODE XREF: sub_40B940+4A2↑j
.text:0040BDF7                                         ; sub_40B940+4F8↓j
.text:0040BDF7                 shld    edi, esi, 8
.text:0040BDFB                 movsx   eax, cl
.text:0040BDFE                 shl     esi, 8
.text:0040BE01                 cdq
.text:0040BE02                 add     esi, eax
.text:0040BE04                 adc     edi, edx
.text:0040BE06                 mov     edx, edi
.text:0040BE08                 xor     ebx, ebx
.text:0040BE0A                 and     edx, 0FF000000h
.text:0040BE10                 mov     eax, edx
.text:0040BE12                 or      eax, ebx
.text:0040BE14                 jz      short loc_40BE2F
.text:0040BE16                 mov     ecx, edx
.text:0040BE18                 xor     eax, eax
.text:0040BE1A                 shr     ecx, 10h
.text:0040BE1D                 mov     edx, esi
.text:0040BE1F                 xor     edx, ecx
.text:0040BE21                 mov     ecx, edi
.text:0040BE23                 xor     ecx, eax
.text:0040BE25                 mov     esi, edx
.text:0040BE27                 mov     edi, ecx
.text:0040BE29                 and     edi, 0FFFFFFh
.text:0040BE2F
.text:0040BE2F loc_40BE2F:                             ; CODE XREF: sub_40B940+4D4↑j
.text:0040BE2F                 inc     ebp
.text:0040BE30                 movzx   ebx, byte ptr [ebp+0]
.text:0040BE34                 test    bl, bl
.text:0040BE36                 mov     cl, bl
.text:0040BE38                 jnz     short loc_40BDF7
.text:0040BE3A                 mov     eax, esi
.text:0040BE3C                 mov     edx, edi
.text:0040BE3E                 jmp     short loc_40BDE8
.text:0040BE3E sub_40B940      endp
.text:0040BE3E
.text:0040BE40
.text:0040BE40 ; =============== S U B R O U T I N E =======================================
.text:0040BE40
.text:0040BE40
.text:0040BE40 ; int __cdecl sub_40BE40(LPCSTR)
.text:0040BE40 sub_40BE40      proc near               ; CODE XREF: sub_40D610+CA↓p
.text:0040BE40
.text:0040BE40 lpRootPathName  = dword ptr -83Ch
.text:0040BE40 lpVolumeNameBuffer= dword ptr -838h
.text:0040BE40 nVolumeNameSize = dword ptr -834h
.text:0040BE40 lpVolumeSerialNumber= dword ptr -830h
.text:0040BE40 lpMaximumComponentLength= dword ptr -82Ch
.text:0040BE40 lpFileSystemFlags= dword ptr -828h
.text:0040BE40 lpFileSystemNameBuffer= dword ptr -824h
.text:0040BE40 nFileSystemNameSize= dword ptr -820h
.text:0040BE40 VolumeSerialNumber= dword ptr -818h
.text:0040BE40 MaximumComponentLength= dword ptr -814h
.text:0040BE40 FileSystemFlags = dword ptr -810h
.text:0040BE40 FileSystemNameBuffer= byte ptr -80Ch
.text:0040BE40 VolumeNameBuffer= byte ptr -40Ch
.text:0040BE40 var_4           = dword ptr -4
.text:0040BE40 arg_0           = dword ptr  4
.text:0040BE40
.text:0040BE40                 sub     esp, 83Ch
.text:0040BE46                 mov     [esp+83Ch+var_4], ebx
.text:0040BE4D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040BE54                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040BE57                 call    sub_40D4F0
.text:0040BE5C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040BE5F                 call    sub_40D0C0
.text:0040BE64                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040BE67                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040BE6B                 mov     ebx, eax
.text:0040BE6D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040BE71                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040BE75                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040BE79                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040BE7D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040BE81                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040BE85                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040BE8C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040BE90                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040BE94                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040BE9C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040BEA4                 call    GetVolumeInformationA
.text:0040BEA9                 sub     esp, 20h
.text:0040BEAC                 test    eax, eax
.text:0040BEAE                 setz    cl
.text:0040BEB1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040BEB4                 movzx   edx, cl
.text:0040BEB7                 dec     edx
.text:0040BEB8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040BEBC                 call    free
.text:0040BEC1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040BEC5                 mov     ebx, [esp+83Ch+var_4]
.text:0040BECC                 add     esp, 83Ch
.text:0040BED2                 retn
.text:0040BED2 sub_40BE40      endp
.text:0040BED2
.text:0040BED2 ; ---------------------------------------------------------------------------
.text:0040BED3                 align 10h
.text:0040BEE0                 push    ebp
.text:0040BEE1                 push    edi
.text:0040BEE2                 xor     edi, edi
.text:0040BEE4                 push    esi
.text:0040BEE5                 xor     esi, esi
.text:0040BEE7                 push    ebx
.text:0040BEE8                 mov     ebp, [esp+14h]
.text:0040BEEC                 test    ebp, ebp
.text:0040BEEE                 jz      short loc_40BEF8
.text:0040BEF0                 movzx   ecx, byte ptr [ebp+0]
.text:0040BEF4                 test    cl, cl
.text:0040BEF6                 jnz     short loc_40BF01
.text:0040BEF8
.text:0040BEF8 loc_40BEF8:                             ; CODE XREF: .text:0040BEEE↑j
.text:0040BEF8                 xor     eax, eax
.text:0040BEFA                 xor     edx, edx
.text:0040BEFC
.text:0040BEFC loc_40BEFC:                             ; CODE XREF: .text:0040BF48↓j
.text:0040BEFC                 pop     ebx
.text:0040BEFD                 pop     esi
.text:0040BEFE                 pop     edi
.text:0040BEFF                 pop     ebp
.text:0040BF00                 retn
.text:0040BF01 ; ---------------------------------------------------------------------------
.text:0040BF01
.text:0040BF01 loc_40BF01:                             ; CODE XREF: .text:0040BEF6↑j
.text:0040BF01                                         ; .text:0040BF42↓j
.text:0040BF01                 shld    edi, esi, 8
.text:0040BF05                 movsx   eax, cl
.text:0040BF08                 shl     esi, 8
.text:0040BF0B                 cdq
.text:0040BF0C                 add     esi, eax
.text:0040BF0E                 adc     edi, edx
.text:0040BF10                 mov     edx, edi
.text:0040BF12                 xor     ebx, ebx
.text:0040BF14                 and     edx, 0FF000000h
.text:0040BF1A                 mov     eax, edx
.text:0040BF1C                 or      eax, ebx
.text:0040BF1E                 jz      short loc_40BF39
.text:0040BF20                 mov     ecx, edx
.text:0040BF22                 xor     eax, eax
.text:0040BF24                 shr     ecx, 10h
.text:0040BF27                 mov     edx, esi
.text:0040BF29                 xor     edx, ecx
.text:0040BF2B                 mov     ecx, edi
.text:0040BF2D                 xor     ecx, eax
.text:0040BF2F                 mov     esi, edx
.text:0040BF31                 mov     edi, ecx
.text:0040BF33                 and     edi, 0FFFFFFh
.text:0040BF39
.text:0040BF39 loc_40BF39:                             ; CODE XREF: .text:0040BF1E↑j
.text:0040BF39                 inc     ebp
.text:0040BF3A                 movzx   ebx, byte ptr [ebp+0]
.text:0040BF3E                 test    bl, bl
.text:0040BF40                 mov     cl, bl
.text:0040BF42                 jnz     short loc_40BF01
.text:0040BF44                 mov     eax, esi
.text:0040BF46                 mov     edx, edi
.text:0040BF48                 jmp     short loc_40BEFC
.text:0040BF48 ; ---------------------------------------------------------------------------
.text:0040BF4A                 align 10h
.text:0040BF50                 sub     esp, 2Ch
.text:0040BF53                 lea     edx, [esp+24h]
.text:0040BF57                 lea     ecx, [esp+28h]
.text:0040BF5B                 mov     [esp+0Ch], edx
.text:0040BF5F                 lea     edx, [esp+1Ch]
.text:0040BF63                 mov     [esp+4], edx
.text:0040BF67                 mov     edx, [esp+30h]
.text:0040BF6B                 mov     [esp+10h], ecx
.text:0040BF6F                 lea     ecx, [esp+20h]
.text:0040BF73                 mov     [esp+8], ecx
.text:0040BF77                 mov     [esp], edx
.text:0040BF7A                 call    sub_40DF10
.text:0040BF7F                 test    eax, eax
.text:0040BF81                 jnz     short loc_40BFA3
.text:0040BF83                 mov     dword ptr [esp+1Ch], 1
.text:0040BF8B                 mov     dword ptr [esp+20h], 200h
.text:0040BF93                 mov     dword ptr [esp+24h], 0
.text:0040BF9B                 mov     dword ptr [esp+28h], 0
.text:0040BFA3
.text:0040BFA3 loc_40BFA3:                             ; CODE XREF: .text:0040BF81↑j
.text:0040BFA3                 mov     eax, [esp+20h]
.text:0040BFA7                 mov     ecx, [esp+1Ch]
.text:0040BFAB                 add     esp, 2Ch
.text:0040BFAE                 imul    eax, ecx
.text:0040BFB1                 retn
.text:0040BFB1 ; ---------------------------------------------------------------------------
.text:0040BFB2                 align 10h
.text:0040BFC0                 sub     esp, 1Ch
.text:0040BFC3                 mov     eax, [esp+20h]
.text:0040BFC7                 mov     [esp+14h], esi
.text:0040BFCB                 mov     [esp+18h], edi
.text:0040BFCF                 test    eax, eax
.text:0040BFD1                 jz      short loc_40C010
.text:0040BFD3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040BFDB                 mov     [esp], eax
.text:0040BFDE                 call    strrchr
.text:0040BFE3                 test    eax, eax
.text:0040BFE5                 jz      short loc_40C010
.text:0040BFE7                 cld
.text:0040BFE8                 mov     esi, eax
.text:0040BFEA                 mov     edi, offset aLnk ; ".lnk"
.text:0040BFEF                 mov     ecx, 5
.text:0040BFF4                 repe cmpsb
.text:0040BFF6                 setz    dl
.text:0040BFF9                 movzx   eax, dl
.text:0040BFFC                 lea     esi, [esi+0]
.text:0040C000
.text:0040C000 loc_40C000:                             ; CODE XREF: .text:0040C012↓j
.text:0040C000                 mov     esi, [esp+14h]
.text:0040C004                 mov     edi, [esp+18h]
.text:0040C008                 add     esp, 1Ch
.text:0040C00B                 retn
.text:0040C00B ; ---------------------------------------------------------------------------
.text:0040C00C                 align 10h
.text:0040C010
.text:0040C010 loc_40C010:                             ; CODE XREF: .text:0040BFD1↑j
.text:0040C010                                         ; .text:0040BFE5↑j
.text:0040C010                 xor     eax, eax
.text:0040C012                 jmp     short loc_40C000
.text:0040C012 ; ---------------------------------------------------------------------------
.text:0040C014                 align 10h
.text:0040C020                 sub     esp, 1Ch
.text:0040C023                 mov     [esp+10h], ebx
.text:0040C027                 mov     ebx, [esp+20h]
.text:0040C02B                 mov     [esp+14h], esi
.text:0040C02F                 mov     [esp+18h], edi
.text:0040C033                 xor     edi, edi
.text:0040C035                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040C03C                 call    GetModuleHandleA
.text:0040C041                 sub     esp, 4
.text:0040C044                 mov     esi, eax
.text:0040C046                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040C04E                 mov     [esp], eax
.text:0040C051                 call    GetProcAddress
.text:0040C056                 sub     esp, 8
.text:0040C059                 test    eax, eax
.text:0040C05B                 jz      short loc_40C071
.text:0040C05D                 mov     [esp], ebx
.text:0040C060                 lea     ecx, [esp+0Ch]
.text:0040C064                 mov     [esp+4], ecx
.text:0040C068                 call    eax
.text:0040C06A                 sub     esp, 8
.text:0040C06D                 test    eax, eax
.text:0040C06F                 jnz     short loc_40C0D0
.text:0040C071
.text:0040C071 loc_40C071:                             ; CODE XREF: .text:0040C05B↑j
.text:0040C071                 mov     eax, ds:Str
.text:0040C076                 test    eax, eax
.text:0040C078                 jz      short loc_40C0F0
.text:0040C07A
.text:0040C07A loc_40C07A:                             ; CODE XREF: .text:0040C103↓j
.text:0040C07A                                         ; .text:0040C115↓j
.text:0040C07A                 test    ebx, ebx
.text:0040C07C                 jz      short loc_40C083
.text:0040C07E                 cmp     byte ptr [ebx], 0
.text:0040C081                 jnz     short loc_40C0A0
.text:0040C083
.text:0040C083 loc_40C083:                             ; CODE XREF: .text:0040C07C↑j
.text:0040C083                                         ; .text:0040C0B4↓j ...
.text:0040C083                 mov     [esp], esi
.text:0040C086                 call    FreeLibrary
.text:0040C08B                 sub     esp, 4
.text:0040C08E                 mov     eax, edi
.text:0040C090                 mov     ebx, [esp+10h]
.text:0040C094                 mov     esi, [esp+14h]
.text:0040C098                 mov     edi, [esp+18h]
.text:0040C09C                 add     esp, 1Ch
.text:0040C09F                 retn
.text:0040C0A0 ; ---------------------------------------------------------------------------
.text:0040C0A0
.text:0040C0A0 loc_40C0A0:                             ; CODE XREF: .text:0040C081↑j
.text:0040C0A0                 mov     [esp], ebx
.text:0040C0A3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C0AB                 call    strrchr
.text:0040C0B0                 test    eax, eax
.text:0040C0B2                 mov     ebx, eax
.text:0040C0B4                 jz      short loc_40C083
.text:0040C0B6                 mov     [esp+4], eax
.text:0040C0BA                 mov     ecx, ds:Str
.text:0040C0C0                 mov     [esp], ecx
.text:0040C0C3                 call    strstr
.text:0040C0C8                 test    eax, eax
.text:0040C0CA                 jz      short loc_40C0D7
.text:0040C0CC                 lea     esi, [esi+0]
.text:0040C0D0
.text:0040C0D0 loc_40C0D0:                             ; CODE XREF: .text:0040C06F↑j
.text:0040C0D0                                         ; .text:0040C0ED↓j
.text:0040C0D0                 mov     edi, 1
.text:0040C0D5                 jmp     short loc_40C083
.text:0040C0D7 ; ---------------------------------------------------------------------------
.text:0040C0D7
.text:0040C0D7 loc_40C0D7:                             ; CODE XREF: .text:0040C0CA↑j
.text:0040C0D7                 mov     [esp+4], ebx
.text:0040C0DB                 mov     ebx, off_415084 ; ".com;.exe;.bat;.cmd"
.text:0040C0E1                 mov     [esp], ebx
.text:0040C0E4                 call    strstr
.text:0040C0E9                 test    eax, eax
.text:0040C0EB                 jz      short loc_40C083
.text:0040C0ED                 jmp     short loc_40C0D0
.text:0040C0ED ; ---------------------------------------------------------------------------
.text:0040C0EF                 align 10h
.text:0040C0F0
.text:0040C0F0 loc_40C0F0:                             ; CODE XREF: .text:0040C078↑j
.text:0040C0F0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040C0F7                 call    getenv
.text:0040C0FC                 mov     ds:Str, eax
.text:0040C101                 test    eax, eax
.text:0040C103                 jnz     loc_40C07A
.text:0040C109                 mov     edx, off_415084 ; ".com;.exe;.bat;.cmd"
.text:0040C10F                 mov     ds:Str, edx
.text:0040C115                 jmp     loc_40C07A
.text:0040C115 ; ---------------------------------------------------------------------------
.text:0040C11A                 align 10h
.text:0040C120                 sub     esp, 0Ch
.text:0040C123                 mov     edx, [esp+10h]
.text:0040C127                 mov     [esp], edx
.text:0040C12A                 call    GetFileType
.text:0040C12F                 sub     esp, 4
.text:0040C132                 xor     edx, edx
.text:0040C134                 cmp     eax, 2
.text:0040C137                 jz      short loc_40C150
.text:0040C139                 cmp     eax, 3
.text:0040C13C                 jz      short loc_40C144
.text:0040C13E
.text:0040C13E loc_40C13E:                             ; CODE XREF: .text:0040C149↓j
.text:0040C13E                                         ; .text:0040C155↓j
.text:0040C13E                 mov     eax, edx
.text:0040C140                 add     esp, 0Ch
.text:0040C143                 retn
.text:0040C144 ; ---------------------------------------------------------------------------
.text:0040C144
.text:0040C144 loc_40C144:                             ; CODE XREF: .text:0040C13C↑j
.text:0040C144                 mov     edx, 1000h
.text:0040C149                 jmp     short loc_40C13E
.text:0040C149 ; ---------------------------------------------------------------------------
.text:0040C14B                 align 10h
.text:0040C150
.text:0040C150 loc_40C150:                             ; CODE XREF: .text:0040C137↑j
.text:0040C150                 mov     edx, 2000h
.text:0040C155                 jmp     short loc_40C13E
.text:0040C155 ; ---------------------------------------------------------------------------
.text:0040C157                 align 10h
.text:0040C160                 mov     ecx, [esp+4]
.text:0040C164                 xor     edx, edx
.text:0040C166                 test    cl, 10h
.text:0040C169                 setz    dl
.text:0040C16C                 dec     edx
.text:0040C16D                 and     edx, 0FFFFC000h
.text:0040C173                 add     edx, 8000h
.text:0040C179                 or      edx, 124h
.text:0040C17F                 test    cl, 1
.text:0040C182                 movzx   eax, dx
.text:0040C185                 jnz     short locret_40C18C
.text:0040C187                 or      eax, 92h
.text:0040C18C
.text:0040C18C locret_40C18C:                          ; CODE XREF: .text:0040C185↑j
.text:0040C18C                 retn
.text:0040C18C ; ---------------------------------------------------------------------------
.text:0040C18D                 align 10h
.text:0040C190                 sub     esp, 2Ch
.text:0040C193                 mov     [esp+20h], esi
.text:0040C197                 mov     esi, [esp+30h]
.text:0040C19B                 mov     [esp+1Ch], ebx
.text:0040C19F                 xor     ebx, ebx
.text:0040C1A1                 test    esi, esi
.text:0040C1A3                 mov     [esp+24h], edi
.text:0040C1A7                 mov     [esp+28h], ebp
.text:0040C1AB                 jz      short loc_40C200
.text:0040C1AD                 cmp     byte ptr [esi], 0
.text:0040C1B0                 jnz     short loc_40C204
.text:0040C1B2
.text:0040C1B2 loc_40C1B2:                             ; CODE XREF: .text:0040C26C↓j
.text:0040C1B2                                         ; .text:0040C277↓j
.text:0040C1B2                 test    esi, esi
.text:0040C1B4                 jz      short loc_40C200
.text:0040C1B6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C1BE                 mov     [esp], esi
.text:0040C1C1                 call    strrchr
.text:0040C1C6                 test    eax, eax
.text:0040C1C8                 jz      short loc_40C200
.text:0040C1CA                 cld
.text:0040C1CB                 mov     ecx, 5
.text:0040C1D0                 mov     esi, eax
.text:0040C1D2                 mov     edi, offset aLnk ; ".lnk"
.text:0040C1D7                 repe cmpsb
.text:0040C1D9                 setz    cl
.text:0040C1DC                 movzx   eax, cl
.text:0040C1DF                 nop
.text:0040C1E0
.text:0040C1E0 loc_40C1E0:                             ; CODE XREF: .text:0040C202↓j
.text:0040C1E0                 test    eax, eax
.text:0040C1E2                 jz      short loc_40C1EA
.text:0040C1E4                 or      ebx, 0A000h
.text:0040C1EA
.text:0040C1EA loc_40C1EA:                             ; CODE XREF: .text:0040C1E2↑j
.text:0040C1EA                 mov     eax, ebx
.text:0040C1EC                 mov     esi, [esp+20h]
.text:0040C1F0                 mov     ebx, [esp+1Ch]
.text:0040C1F4                 mov     edi, [esp+24h]
.text:0040C1F8                 mov     ebp, [esp+28h]
.text:0040C1FC                 add     esp, 2Ch
.text:0040C1FF                 retn
.text:0040C200 ; ---------------------------------------------------------------------------
.text:0040C200
.text:0040C200 loc_40C200:                             ; CODE XREF: .text:0040C1AB↑j
.text:0040C200                                         ; .text:0040C1B4↑j ...
.text:0040C200                 xor     eax, eax
.text:0040C202                 jmp     short loc_40C1E0
.text:0040C204 ; ---------------------------------------------------------------------------
.text:0040C204
.text:0040C204 loc_40C204:                             ; CODE XREF: .text:0040C1B0↑j
.text:0040C204                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040C20B                 call    GetModuleHandleA
.text:0040C210                 sub     esp, 4
.text:0040C213                 mov     ebp, eax
.text:0040C215                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040C21D                 mov     [esp], eax
.text:0040C220                 call    GetProcAddress
.text:0040C225                 sub     esp, 8
.text:0040C228                 test    eax, eax
.text:0040C22A                 mov     dword ptr [esp+14h], 0
.text:0040C232                 jz      short loc_40C248
.text:0040C234                 mov     [esp], esi
.text:0040C237                 lea     ecx, [esp+18h]
.text:0040C23B                 mov     [esp+4], ecx
.text:0040C23F                 call    eax
.text:0040C241                 sub     esp, 8
.text:0040C244                 test    eax, eax
.text:0040C246                 jnz     short loc_40C2A8
.text:0040C248
.text:0040C248 loc_40C248:                             ; CODE XREF: .text:0040C232↑j
.text:0040C248                 mov     edx, ds:Str
.text:0040C24E                 test    edx, edx
.text:0040C250                 jz      short loc_40C2D0
.text:0040C252
.text:0040C252 loc_40C252:                             ; CODE XREF: .text:0040C2E3↓j
.text:0040C252                                         ; .text:0040C2F5↓j
.text:0040C252                 test    esi, esi
.text:0040C254                 jz      short loc_40C25B
.text:0040C256                 cmp     byte ptr [esi], 0
.text:0040C259                 jnz     short loc_40C27C
.text:0040C25B
.text:0040C25B loc_40C25B:                             ; CODE XREF: .text:0040C254↑j
.text:0040C25B                                         ; .text:0040C290↓j ...
.text:0040C25B                 mov     [esp], ebp
.text:0040C25E                 call    FreeLibrary
.text:0040C263                 sub     esp, 4
.text:0040C266                 mov     eax, [esp+14h]
.text:0040C26A                 test    eax, eax
.text:0040C26C                 jz      loc_40C1B2
.text:0040C272                 mov     ebx, 49h ; 'I'
.text:0040C277                 jmp     loc_40C1B2
.text:0040C27C ; ---------------------------------------------------------------------------
.text:0040C27C
.text:0040C27C loc_40C27C:                             ; CODE XREF: .text:0040C259↑j
.text:0040C27C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C284                 mov     [esp], esi
.text:0040C287                 call    strrchr
.text:0040C28C                 test    eax, eax
.text:0040C28E                 mov     edi, eax
.text:0040C290                 jz      short loc_40C25B
.text:0040C292                 mov     [esp+4], eax
.text:0040C296                 mov     edx, ds:Str
.text:0040C29C                 mov     [esp], edx
.text:0040C29F                 call    strstr
.text:0040C2A4                 test    eax, eax
.text:0040C2A6                 jz      short loc_40C2B2
.text:0040C2A8
.text:0040C2A8 loc_40C2A8:                             ; CODE XREF: .text:0040C246↑j
.text:0040C2A8                                         ; .text:0040C2C8↓j
.text:0040C2A8                 mov     dword ptr [esp+14h], 1
.text:0040C2B0                 jmp     short loc_40C25B
.text:0040C2B2 ; ---------------------------------------------------------------------------
.text:0040C2B2
.text:0040C2B2 loc_40C2B2:                             ; CODE XREF: .text:0040C2A6↑j
.text:0040C2B2                 mov     [esp+4], edi
.text:0040C2B6                 mov     edi, off_415084 ; ".com;.exe;.bat;.cmd"
.text:0040C2BC                 mov     [esp], edi
.text:0040C2BF                 call    strstr
.text:0040C2C4                 test    eax, eax
.text:0040C2C6                 jz      short loc_40C25B
.text:0040C2C8                 jmp     short loc_40C2A8
.text:0040C2C8 ; ---------------------------------------------------------------------------
.text:0040C2CA                 align 10h
.text:0040C2D0
.text:0040C2D0 loc_40C2D0:                             ; CODE XREF: .text:0040C250↑j
.text:0040C2D0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040C2D7                 call    getenv
.text:0040C2DC                 mov     ds:Str, eax
.text:0040C2E1                 test    eax, eax
.text:0040C2E3                 jnz     loc_40C252
.text:0040C2E9                 mov     ecx, off_415084 ; ".com;.exe;.bat;.cmd"
.text:0040C2EF                 mov     ds:Str, ecx
.text:0040C2F5                 jmp     loc_40C252
.text:0040C2F5 ; ---------------------------------------------------------------------------
.text:0040C2FA                 align 10h
.text:0040C300                 push    esi
.text:0040C301                 push    ebx
.text:0040C302                 sub     esp, 864h
.text:0040C308                 mov     ebx, [esp+870h]
.text:0040C30F                 lea     edx, [esp+830h]
.text:0040C316                 mov     esi, [esp+874h]
.text:0040C31D                 mov     [esp+4], edx
.text:0040C321                 mov     [esp], ebx
.text:0040C324                 call    loc_40B180
.text:0040C329                 xor     edx, edx
.text:0040C32B                 test    eax, eax
.text:0040C32D                 jz      loc_40C415
.text:0040C333                 mov     ecx, [esp+830h]
.text:0040C33A                 test    cl, 10h
.text:0040C33D                 mov     [esi], ecx
.text:0040C33F                 mov     eax, [esp+834h]
.text:0040C346                 mov     edx, [esp+838h]
.text:0040C34D                 mov     [esi+4], eax
.text:0040C350                 mov     [esi+8], edx
.text:0040C353                 mov     eax, [esp+83Ch]
.text:0040C35A                 mov     edx, [esp+840h]
.text:0040C361                 mov     [esi+0Ch], eax
.text:0040C364                 mov     [esi+10h], edx
.text:0040C367                 mov     edx, [esp+848h]
.text:0040C36E                 mov     eax, [esp+844h]
.text:0040C375                 mov     [esi+18h], edx
.text:0040C378                 mov     [esi+14h], eax
.text:0040C37B                 mov     edx, [esp+84Ch]
.text:0040C382                 mov     [esi+20h], edx
.text:0040C385                 mov     edx, [esp+850h]
.text:0040C38C                 mov     [esi+24h], edx
.text:0040C38F                 jnz     loc_40C420
.text:0040C395                 mov     dword ptr [esi+28h], 1
.text:0040C39C
.text:0040C39C loc_40C39C:                             ; CODE XREF: .text:0040C42B↓j
.text:0040C39C                 mov     [esp], ebx
.text:0040C39F                 call    sub_40D4F0
.text:0040C3A4                 mov     [esp], eax
.text:0040C3A7                 call    sub_40D0C0
.text:0040C3AC                 mov     [esp], eax
.text:0040C3AF                 lea     edx, [esp+30h]
.text:0040C3B3                 mov     ebx, eax
.text:0040C3B5                 mov     [esp+18h], edx
.text:0040C3B9                 lea     ecx, [esp+2Ch]
.text:0040C3BD                 lea     edx, [esp+28h]
.text:0040C3C1                 mov     [esp+14h], ecx
.text:0040C3C5                 lea     ecx, [esp+24h]
.text:0040C3C9                 mov     [esp+10h], edx
.text:0040C3CD                 lea     edx, [esp+430h]
.text:0040C3D4                 mov     [esp+0Ch], ecx
.text:0040C3D8                 mov     [esp+4], edx
.text:0040C3DC                 mov     dword ptr [esp+1Ch], 400h
.text:0040C3E4                 mov     dword ptr [esp+8], 400h
.text:0040C3EC                 call    GetVolumeInformationA
.text:0040C3F1                 sub     esp, 20h
.text:0040C3F4                 test    eax, eax
.text:0040C3F6                 setz    cl
.text:0040C3F9                 mov     [esp], ebx
.text:0040C3FC                 movzx   edx, cl
.text:0040C3FF                 dec     edx
.text:0040C400                 and     [esp+24h], edx
.text:0040C404                 call    free
.text:0040C409                 mov     ecx, [esp+24h]
.text:0040C40D                 mov     edx, 1
.text:0040C412                 mov     [esi+1Ch], ecx
.text:0040C415
.text:0040C415 loc_40C415:                             ; CODE XREF: .text:0040C32D↑j
.text:0040C415                 add     esp, 864h
.text:0040C41B                 mov     eax, edx
.text:0040C41D                 pop     ebx
.text:0040C41E                 pop     esi
.text:0040C41F                 retn
.text:0040C420 ; ---------------------------------------------------------------------------
.text:0040C420
.text:0040C420 loc_40C420:                             ; CODE XREF: .text:0040C38F↑j
.text:0040C420                 mov     [esp], ebx
.text:0040C423                 call    loc_40B2F0
.text:0040C428                 mov     [esi+28h], eax
.text:0040C42B                 jmp     loc_40C39C
.text:0040C430 ; ---------------------------------------------------------------------------
.text:0040C430                 push    ebp
.text:0040C431                 xor     edx, edx
.text:0040C433                 push    edi
.text:0040C434                 push    esi
.text:0040C435                 xor     esi, esi
.text:0040C437                 push    ebx
.text:0040C438                 sub     esp, 1Ch
.text:0040C43B                 mov     ebx, [esp+5Ch]
.text:0040C43F                 mov     ecx, [esp+30h]
.text:0040C443                 mov     edi, [esp+60h]
.text:0040C447                 or      esi, ebx
.text:0040C449                 mov     eax, [esp+4Ch]
.text:0040C44D                 or      edi, edx
.text:0040C44F                 mov     ebx, [esp+64h]
.text:0040C453                 xor     edx, edx
.text:0040C455                 test    cl, 10h
.text:0040C458                 setz    dl
.text:0040C45B                 mov     [ebx+10h], eax
.text:0040C45E                 mov     [ebx+8], edi
.text:0040C461                 mov     [ebx+0Ch], esi
.text:0040C464                 dec     edx
.text:0040C465                 and     edx, 0FFFFC000h
.text:0040C46B                 mov     dword ptr [ebx+14h], 0
.text:0040C472                 add     edx, 8000h
.text:0040C478                 or      edx, 124h
.text:0040C47E                 test    cl, 1
.text:0040C481                 movzx   eax, dx
.text:0040C484                 jnz     short loc_40C48B
.text:0040C486                 or      eax, 92h
.text:0040C48B
.text:0040C48B loc_40C48B:                             ; CODE XREF: .text:0040C484↑j
.text:0040C48B                 mov     ebx, [esp+54h]
.text:0040C48F                 xor     edx, edx
.text:0040C491                 xor     ebp, ebp
.text:0040C493                 mov     edi, [esp+50h]
.text:0040C497                 mov     ecx, [esp+64h]
.text:0040C49B                 mov     esi, edi
.text:0040C49D                 or      [ecx], eax
.text:0040C49F                 mov     edi, ebx
.text:0040C4A1                 or      edi, ebp
.text:0040C4A3                 mov     ebp, edx
.text:0040C4A5                 mov     ebx, [esp+64h]
.text:0040C4A9                 or      ebp, esi
.text:0040C4AB                 mov     esi, [esp+58h]
.text:0040C4AF                 mov     edx, [esp+40h]
.text:0040C4B3                 mov     [ebx+30h], edi
.text:0040C4B6                 mov     [ebx+18h], esi
.text:0040C4B9                 mov     ecx, edx
.text:0040C4BB                 xor     esi, esi
.text:0040C4BD                 mov     [ebx+34h], ebp
.text:0040C4C0                 xor     edx, edx
.text:0040C4C2                 or      esi, ecx
.text:0040C4C4                 mov     dword ptr [esp+8], 989680h
.text:0040C4CC                 mov     ebx, [esp+3Ch]
.text:0040C4D0                 mov     ecx, esi
.text:0040C4D2                 mov     dword ptr [esp+0Ch], 0
.text:0040C4DA                 or      ebx, edx
.text:0040C4DC                 mov     edx, ebx
.text:0040C4DE                 sub     edx, 0D53E8000h
.text:0040C4E4                 sbb     ecx, 19DB1DEh
.text:0040C4EA                 mov     [esp+4], ecx
.text:0040C4EE                 mov     [esp], edx
.text:0040C4F1                 call    sub_412C30
.text:0040C4F6                 mov     edx, eax
.text:0040C4F8                 mov     ecx, [esp+64h]
.text:0040C4FC                 shr     eax, 1Fh
.text:0040C4FF                 dec     eax
.text:0040C500                 and     edx, eax
.text:0040C502                 mov     [ecx+38h], edx
.text:0040C505                 mov     [esp], ebx
.text:0040C508                 mov     [esp+4], esi
.text:0040C50C                 mov     dword ptr [esp+8], 989680h
.text:0040C514                 mov     dword ptr [esp+0Ch], 0
.text:0040C51C                 call    sub_413070
.text:0040C521                 lea     ecx, [eax+eax*4]
.text:0040C524                 lea     esi, [ecx+ecx*4]
.text:0040C527                 mov     eax, [esp+64h]
.text:0040C52B                 shl     esi, 2
.text:0040C52E                 mov     ebx, esi
.text:0040C530                 shr     ebx, 1Fh
.text:0040C533                 dec     ebx
.text:0040C534                 and     ebx, esi
.text:0040C536                 xor     esi, esi
.text:0040C538                 mov     [eax+3Ch], ebx
.text:0040C53B                 mov     edx, [esp+38h]
.text:0040C53F                 mov     dword ptr [esp+8], 989680h
.text:0040C547                 mov     ebx, [esp+34h]
.text:0040C54B                 mov     dword ptr [esp+0Ch], 0
.text:0040C553                 mov     ecx, edx
.text:0040C555                 xor     edx, edx
.text:0040C557                 or      ebx, edx
.text:0040C559                 or      esi, ecx
.text:0040C55B                 mov     edx, ebx
.text:0040C55D                 sub     edx, 0D53E8000h
.text:0040C563                 mov     ecx, esi
.text:0040C565                 sbb     ecx, 19DB1DEh
.text:0040C56B                 mov     [esp+4], ecx
.text:0040C56F                 mov     [esp], edx
.text:0040C572                 call    sub_412C30
.text:0040C577                 mov     edx, eax
.text:0040C579                 mov     ecx, [esp+64h]
.text:0040C57D                 shr     eax, 1Fh
.text:0040C580                 dec     eax
.text:0040C581                 and     edx, eax
.text:0040C583                 mov     [ecx+48h], edx
.text:0040C586                 mov     [esp], ebx
.text:0040C589                 mov     [esp+4], esi
.text:0040C58D                 mov     dword ptr [esp+8], 989680h
.text:0040C595                 mov     dword ptr [esp+0Ch], 0
.text:0040C59D                 call    sub_413070
.text:0040C5A2                 lea     edx, [eax+eax*4]
.text:0040C5A5                 mov     ebx, [esp+64h]
.text:0040C5A9                 lea     ecx, [edx+edx*4]
.text:0040C5AC                 shl     ecx, 2
.text:0040C5AF                 mov     esi, ecx
.text:0040C5B1                 shr     esi, 1Fh
.text:0040C5B4                 dec     esi
.text:0040C5B5                 and     esi, ecx
.text:0040C5B7                 mov     [ebx+4Ch], esi
.text:0040C5BA                 mov     edx, [esp+48h]
.text:0040C5BE                 xor     esi, esi
.text:0040C5C0                 mov     dword ptr [esp+8], 989680h
.text:0040C5C8                 mov     ebx, [esp+44h]
.text:0040C5CC                 mov     dword ptr [esp+0Ch], 0
.text:0040C5D4                 mov     ecx, edx
.text:0040C5D6                 xor     edx, edx
.text:0040C5D8                 or      ebx, edx
.text:0040C5DA                 or      esi, ecx
.text:0040C5DC                 mov     edx, ebx
.text:0040C5DE                 sub     edx, 0D53E8000h
.text:0040C5E4                 mov     ecx, esi
.text:0040C5E6                 sbb     ecx, 19DB1DEh
.text:0040C5EC                 mov     [esp+4], ecx
.text:0040C5F0                 mov     [esp], edx
.text:0040C5F3                 call    sub_412C30
.text:0040C5F8                 mov     edx, eax
.text:0040C5FA                 mov     ecx, [esp+64h]
.text:0040C5FE                 shr     eax, 1Fh
.text:0040C601                 dec     eax
.text:0040C602                 and     edx, eax
.text:0040C604                 mov     [ecx+40h], edx
.text:0040C607                 mov     [esp+4], esi
.text:0040C60B                 mov     dword ptr [esp+8], 989680h
.text:0040C613                 mov     dword ptr [esp+0Ch], 0
.text:0040C61B                 mov     [esp], ebx
.text:0040C61E                 call    sub_413070
.text:0040C623                 lea     edx, [eax+eax*4]
.text:0040C626                 lea     esi, [edx+edx*4]
.text:0040C629                 mov     eax, [esp+64h]
.text:0040C62D                 shl     esi, 2
.text:0040C630                 mov     edx, ebp
.text:0040C632                 mov     ecx, esi
.text:0040C634                 mov     dword ptr [eax+50h], 200h
.text:0040C63B                 shr     ecx, 1Fh
.text:0040C63E                 dec     ecx
.text:0040C63F                 and     ecx, esi
.text:0040C641                 test    ebp, ebp
.text:0040C643                 mov     [eax+44h], ecx
.text:0040C646                 mov     eax, edi
.text:0040C648                 js      short loc_40C682
.text:0040C64A
.text:0040C64A loc_40C64A:                             ; CODE XREF: .text:0040C68A↓j
.text:0040C64A                 xor     esi, esi
.text:0040C64C                 mov     ebp, edi
.text:0040C64E                 mov     ecx, eax
.text:0040C650                 shrd    ecx, edx, 9
.text:0040C654                 mov     ebx, edx
.text:0040C656                 and     ebp, 1FFh
.text:0040C65C                 mov     eax, esi
.text:0040C65E                 sar     ebx, 9
.text:0040C661                 or      eax, ebp
.text:0040C663                 jz      short loc_40C66B
.text:0040C665                 add     ecx, 1
.text:0040C668                 adc     ebx, 0
.text:0040C66B
.text:0040C66B loc_40C66B:                             ; CODE XREF: .text:0040C663↑j
.text:0040C66B                 mov     edx, [esp+64h]
.text:0040C66F                 mov     eax, 1
.text:0040C674                 mov     [edx+58h], ecx
.text:0040C677                 mov     [edx+5Ch], ebx
.text:0040C67A                 add     esp, 1Ch
.text:0040C67D                 pop     ebx
.text:0040C67E                 pop     esi
.text:0040C67F                 pop     edi
.text:0040C680                 pop     ebp
.text:0040C681                 retn
.text:0040C682 ; ---------------------------------------------------------------------------
.text:0040C682
.text:0040C682 loc_40C682:                             ; CODE XREF: .text:0040C648↑j
.text:0040C682                 add     eax, 1FFh
.text:0040C687                 adc     edx, 0
.text:0040C68A                 jmp     short loc_40C64A
.text:0040C68A ; ---------------------------------------------------------------------------
.text:0040C68C                 align 10h
.text:0040C690                 push    ebp
.text:0040C691                 push    edi
.text:0040C692                 xor     edi, edi
.text:0040C694                 push    esi
.text:0040C695                 xor     esi, esi
.text:0040C697                 push    ebx
.text:0040C698                 sub     esp, 0Ch
.text:0040C69B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040C6A2                 call    LoadLibraryA
.text:0040C6A7                 sub     esp, 4
.text:0040C6AA                 mov     ebp, eax
.text:0040C6AC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040C6B4                 mov     [esp], eax
.text:0040C6B7                 call    GetProcAddress
.text:0040C6BC                 sub     esp, 8
.text:0040C6BF                 test    eax, eax
.text:0040C6C1                 jz      short loc_40C6F2
.text:0040C6C3                 lea     ecx, [esp+8]
.text:0040C6C7                 mov     [esp+4], ecx
.text:0040C6CB                 mov     ecx, [esp+20h]
.text:0040C6CF                 mov     [esp], ecx
.text:0040C6D2                 call    eax
.text:0040C6D4                 sub     esp, 8
.text:0040C6D7                 mov     ebx, eax
.text:0040C6D9                 cmp     eax, 0FFFFFFFFh
.text:0040C6DC                 jz      short loc_40C70D
.text:0040C6DE
.text:0040C6DE loc_40C6DE:                             ; CODE XREF: .text:0040C716↓j
.text:0040C6DE                 mov     esi, [esp+8]
.text:0040C6E2                 mov     ecx, ebx
.text:0040C6E4                 xor     edi, edi
.text:0040C6E6                 xor     ebx, ebx
.text:0040C6E8                 mov     edx, esi
.text:0040C6EA                 mov     esi, ecx
.text:0040C6EC                 or      esi, edi
.text:0040C6EE                 mov     edi, ebx
.text:0040C6F0                 or      edi, edx
.text:0040C6F2
.text:0040C6F2 loc_40C6F2:                             ; CODE XREF: .text:0040C6C1↑j
.text:0040C6F2                                         ; .text:0040C714↓j
.text:0040C6F2                 test    ebp, ebp
.text:0040C6F4                 jz      short loc_40C701
.text:0040C6F6                 mov     [esp], ebp
.text:0040C6F9                 call    FreeLibrary
.text:0040C6FE                 sub     esp, 4
.text:0040C701
.text:0040C701 loc_40C701:                             ; CODE XREF: .text:0040C6F4↑j
.text:0040C701                 add     esp, 0Ch
.text:0040C704                 mov     eax, esi
.text:0040C706                 mov     edx, edi
.text:0040C708                 pop     ebx
.text:0040C709                 pop     esi
.text:0040C70A                 pop     edi
.text:0040C70B                 pop     ebp
.text:0040C70C                 retn
.text:0040C70D ; ---------------------------------------------------------------------------
.text:0040C70D
.text:0040C70D loc_40C70D:                             ; CODE XREF: .text:0040C6DC↑j
.text:0040C70D                 call    GetLastError
.text:0040C712                 test    eax, eax
.text:0040C714                 jnz     short loc_40C6F2
.text:0040C716                 jmp     short loc_40C6DE
.text:0040C716 ; ---------------------------------------------------------------------------
.text:0040C718                 align 10h
.text:0040C720
.text:0040C720 ; =============== S U B R O U T I N E =======================================
.text:0040C720
.text:0040C720
.text:0040C720 ; int __cdecl sub_40C720(LPCSTR, int)
.text:0040C720 sub_40C720      proc near               ; CODE XREF: sub_411210-45AF↓p
.text:0040C720
.text:0040C720 lpRootPathName  = dword ptr -8FCh
.text:0040C720 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040C720 nVolumeNameSize = dword ptr -8F4h
.text:0040C720 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040C720 lpMaximumComponentLength= dword ptr -8ECh
.text:0040C720 lpFileSystemFlags= dword ptr -8E8h
.text:0040C720 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040C720 nFileSystemNameSize= dword ptr -8E0h
.text:0040C720 VolumeSerialNumber= dword ptr -8D8h
.text:0040C720 MaximumComponentLength= dword ptr -8D4h
.text:0040C720 FileSystemFlags = dword ptr -8D0h
.text:0040C720 var_8CC         = dword ptr -8CCh
.text:0040C720 var_8C8         = dword ptr -8C8h
.text:0040C720 var_8C4         = dword ptr -8C4h
.text:0040C720 var_8C0         = dword ptr -8C0h
.text:0040C720 var_8BC         = dword ptr -8BCh
.text:0040C720 var_8B8         = dword ptr -8B8h
.text:0040C720 var_8B4         = dword ptr -8B4h
.text:0040C720 var_8B0         = dword ptr -8B0h
.text:0040C720 var_8AC         = dword ptr -8ACh
.text:0040C720 var_8A8         = dword ptr -8A8h
.text:0040C720 var_8A4         = dword ptr -8A4h
.text:0040C720 var_8A0         = dword ptr -8A0h
.text:0040C720 var_89C         = dword ptr -89Ch
.text:0040C720 FileSystemNameBuffer= byte ptr -88Ch
.text:0040C720 VolumeNameBuffer= byte ptr -48Ch
.text:0040C720 var_8C          = dword ptr -8Ch
.text:0040C720 var_88          = dword ptr -88h
.text:0040C720 var_84          = dword ptr -84h
.text:0040C720 var_80          = dword ptr -80h
.text:0040C720 var_7C          = dword ptr -7Ch
.text:0040C720 var_78          = dword ptr -78h
.text:0040C720 var_74          = dword ptr -74h
.text:0040C720 var_70          = dword ptr -70h
.text:0040C720 var_6C          = dword ptr -6Ch
.text:0040C720 var_5C          = dword ptr -5Ch
.text:0040C720 var_58          = dword ptr -58h
.text:0040C720 var_54          = dword ptr -54h
.text:0040C720 var_50          = dword ptr -50h
.text:0040C720 var_4C          = dword ptr -4Ch
.text:0040C720 var_48          = dword ptr -48h
.text:0040C720 var_44          = dword ptr -44h
.text:0040C720 var_3C          = dword ptr -3Ch
.text:0040C720 var_38          = dword ptr -38h
.text:0040C720 var_34          = dword ptr -34h
.text:0040C720 arg_0           = dword ptr  4
.text:0040C720 arg_4           = dword ptr  8
.text:0040C720
.text:0040C720                 push    ebp
.text:0040C721                 xor     eax, eax
.text:0040C723                 mov     ecx, 0Dh
.text:0040C728                 push    edi
.text:0040C729                 push    esi
.text:0040C72A                 push    ebx
.text:0040C72B                 sub     esp, 8ECh
.text:0040C731                 lea     edi, [esp+8FCh+var_5C]
.text:0040C738                 cld
.text:0040C739                 lea     edx, [esp+8FCh+var_8C]
.text:0040C740                 rep stosd
.text:0040C742                 mov     [esp+8FCh+lpVolumeNameBuffer], edx
.text:0040C746                 lea     esi, [esp+8FCh+var_5C]
.text:0040C74D                 mov     edx, [esp+8FCh+arg_0]
.text:0040C754                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C757                 call    loc_40B180
.text:0040C75C                 test    eax, eax
.text:0040C75E                 mov     edx, 0FFFFFFFFh
.text:0040C763                 jz      loc_40CAF4
.text:0040C769                 mov     edx, [esp+8FCh+var_88]
.text:0040C770                 mov     ebp, [esp+8FCh+var_84]
.text:0040C777                 mov     edi, [esp+8FCh+var_80]
.text:0040C77E                 mov     [esp+8FCh+var_58], edx
.text:0040C785                 mov     ecx, [esp+8FCh+var_7C]
.text:0040C78C                 mov     ebx, [esp+8FCh+var_8C]
.text:0040C793                 mov     [esp+8FCh+var_54], ebp
.text:0040C79A                 mov     edx, [esp+8FCh+var_78]
.text:0040C7A1                 mov     ebp, [esp+8FCh+var_74]
.text:0040C7A8                 mov     [esp+8FCh+var_50], edi
.text:0040C7AF                 test    bl, 10h
.text:0040C7B2                 mov     edi, [esp+8FCh+var_70]
.text:0040C7B9                 mov     [esp+8FCh+var_4C], ecx
.text:0040C7C0                 mov     ecx, [esp+8FCh+var_6C]
.text:0040C7C7                 mov     [esp+8FCh+var_5C], ebx
.text:0040C7CE                 mov     [esp+8FCh+var_48], edx
.text:0040C7D5                 mov     [esp+8FCh+var_44], ebp
.text:0040C7DC                 mov     [esp+8FCh+var_3C], edi
.text:0040C7E3                 mov     [esp+8FCh+var_38], ecx
.text:0040C7EA                 jnz     loc_40CB10
.text:0040C7F0                 mov     ebx, 1
.text:0040C7F5                 mov     [esp+8FCh+var_34], ebx
.text:0040C7FC
.text:0040C7FC loc_40C7FC:                             ; CODE XREF: sub_40C720+406↓j
.text:0040C7FC                 mov     eax, [esp+8FCh+arg_0]
.text:0040C803                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040C807                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040C80B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040C80E                 call    sub_40D4F0
.text:0040C813                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040C816                 call    sub_40D0C0
.text:0040C81B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040C81F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040C823                 mov     ebp, eax
.text:0040C825                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040C829                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040C82D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040C834                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040C838                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040C83C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040C840                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040C848                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040C850                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040C853                 call    GetVolumeInformationA
.text:0040C858                 sub     esp, 20h
.text:0040C85B                 test    eax, eax
.text:0040C85D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040C861                 setz    bl
.text:0040C864                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040C867                 xor     ebp, ebp
.text:0040C869                 movzx   edx, bl
.text:0040C86C                 dec     edx
.text:0040C86D                 xor     ebx, ebx
.text:0040C86F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040C873                 call    free
.text:0040C878                 cld
.text:0040C879                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040C87D                 mov     [esi+1Ch], ecx
.text:0040C880                 mov     ecx, 0Dh
.text:0040C885                 rep movsd
.text:0040C887                 mov     edi, [esp+8FCh+var_8A0]
.text:0040C88B                 mov     edx, [esp+8FCh+var_89C]
.text:0040C88F                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040C893                 or      ebp, edi
.text:0040C895                 mov     esi, [esp+8FCh+var_8B0]
.text:0040C899                 mov     edi, [esp+8FCh+arg_4]
.text:0040C8A0                 or      edx, ebx
.text:0040C8A2                 mov     [edi+8], edx
.text:0040C8A5                 xor     edx, edx
.text:0040C8A7                 test    cl, 10h
.text:0040C8AA                 setz    dl
.text:0040C8AD                 mov     [edi+0Ch], ebp
.text:0040C8B0                 mov     [edi+10h], esi
.text:0040C8B3                 mov     dword ptr [edi+14h], 0
.text:0040C8BA                 dec     edx
.text:0040C8BB                 and     edx, 0FFFFC000h
.text:0040C8C1                 add     edx, 8000h
.text:0040C8C7                 or      edx, 124h
.text:0040C8CD                 test    cl, 1
.text:0040C8D0                 movzx   eax, dx
.text:0040C8D3                 jnz     short loc_40C8DA
.text:0040C8D5                 or      eax, 92h
.text:0040C8DA
.text:0040C8DA loc_40C8DA:                             ; CODE XREF: sub_40C720+1B3↑j
.text:0040C8DA                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040C8DE                 xor     edx, edx
.text:0040C8E0                 xor     ebp, ebp
.text:0040C8E2                 mov     edi, [esp+8FCh+var_8AC]
.text:0040C8E6                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C8ED                 mov     esi, edi
.text:0040C8EF                 or      [ecx], eax
.text:0040C8F1                 mov     edi, ebx
.text:0040C8F3                 or      edi, ebp
.text:0040C8F5                 mov     ebp, edx
.text:0040C8F7                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040C8FB                 or      ebp, esi
.text:0040C8FD                 mov     esi, [esp+8FCh+arg_4]
.text:0040C904                 mov     edx, [esp+8FCh+var_8BC]
.text:0040C908                 mov     [esi+18h], ebx
.text:0040C90B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040C90F                 mov     ecx, edx
.text:0040C911                 mov     [esi+30h], edi
.text:0040C914                 xor     edx, edx
.text:0040C916                 mov     [esi+34h], ebp
.text:0040C919                 or      ebx, edx
.text:0040C91B                 xor     esi, esi
.text:0040C91D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C925                 or      esi, ecx
.text:0040C927                 mov     edx, ebx
.text:0040C929                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C931                 sub     edx, 0D53E8000h
.text:0040C937                 mov     ecx, esi
.text:0040C939                 sbb     ecx, 19DB1DEh
.text:0040C93F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040C943                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C946                 call    sub_412C30
.text:0040C94B                 mov     edx, eax
.text:0040C94D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C954                 shr     eax, 1Fh
.text:0040C957                 dec     eax
.text:0040C958                 and     edx, eax
.text:0040C95A                 mov     [ecx+38h], edx
.text:0040C95D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040C960                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040C964                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C96C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C974                 call    sub_413070
.text:0040C979                 lea     ecx, [eax+eax*4]
.text:0040C97C                 lea     ebx, [ecx+ecx*4]
.text:0040C97F                 mov     eax, [esp+8FCh+arg_4]
.text:0040C986                 shl     ebx, 2
.text:0040C989                 mov     esi, ebx
.text:0040C98B                 shr     esi, 1Fh
.text:0040C98E                 dec     esi
.text:0040C98F                 and     esi, ebx
.text:0040C991                 mov     [eax+3Ch], esi
.text:0040C994                 mov     edx, [esp+8FCh+var_8C4]
.text:0040C998                 xor     esi, esi
.text:0040C99A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C9A2                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040C9A6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C9AE                 mov     ecx, edx
.text:0040C9B0                 xor     edx, edx
.text:0040C9B2                 or      ebx, edx
.text:0040C9B4                 or      esi, ecx
.text:0040C9B6                 mov     edx, ebx
.text:0040C9B8                 sub     edx, 0D53E8000h
.text:0040C9BE                 mov     ecx, esi
.text:0040C9C0                 sbb     ecx, 19DB1DEh
.text:0040C9C6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040C9CA                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C9CD                 call    sub_412C30
.text:0040C9D2                 mov     edx, eax
.text:0040C9D4                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C9DB                 shr     eax, 1Fh
.text:0040C9DE                 dec     eax
.text:0040C9DF                 and     edx, eax
.text:0040C9E1                 mov     [ecx+48h], edx
.text:0040C9E4                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040C9E7                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040C9EB                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C9F3                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C9FB                 call    sub_413070
.text:0040CA00                 lea     ecx, [eax+eax*4]
.text:0040CA03                 lea     ebx, [ecx+ecx*4]
.text:0040CA06                 mov     eax, [esp+8FCh+arg_4]
.text:0040CA0D                 shl     ebx, 2
.text:0040CA10                 mov     esi, ebx
.text:0040CA12                 shr     esi, 1Fh
.text:0040CA15                 dec     esi
.text:0040CA16                 and     esi, ebx
.text:0040CA18                 mov     [eax+4Ch], esi
.text:0040CA1B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040CA1F                 xor     esi, esi
.text:0040CA21                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CA29                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040CA2D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CA35                 mov     ecx, edx
.text:0040CA37                 xor     edx, edx
.text:0040CA39                 or      ebx, edx
.text:0040CA3B                 or      esi, ecx
.text:0040CA3D                 mov     edx, ebx
.text:0040CA3F                 sub     edx, 0D53E8000h
.text:0040CA45                 mov     ecx, esi
.text:0040CA47                 sbb     ecx, 19DB1DEh
.text:0040CA4D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040CA51                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040CA54                 call    sub_412C30
.text:0040CA59                 mov     edx, eax
.text:0040CA5B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CA62                 shr     eax, 1Fh
.text:0040CA65                 dec     eax
.text:0040CA66                 and     edx, eax
.text:0040CA68                 mov     [ecx+40h], edx
.text:0040CA6B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040CA6E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040CA72                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CA7A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CA82                 call    sub_413070
.text:0040CA87                 lea     ebx, [eax+eax*4]
.text:0040CA8A                 mov     esi, [esp+8FCh+arg_4]
.text:0040CA91                 lea     edx, [ebx+ebx*4]
.text:0040CA94                 shl     edx, 2
.text:0040CA97                 mov     eax, edi
.text:0040CA99                 mov     ecx, edx
.text:0040CA9B                 mov     dword ptr [esi+50h], 200h
.text:0040CAA2                 shr     ecx, 1Fh
.text:0040CAA5                 dec     ecx
.text:0040CAA6                 and     ecx, edx
.text:0040CAA8                 test    ebp, ebp
.text:0040CAAA                 mov     edx, ebp
.text:0040CAAC                 mov     [esi+44h], ecx
.text:0040CAAF                 js      short loc_40CB01
.text:0040CAB1
.text:0040CAB1 loc_40CAB1:                             ; CODE XREF: sub_40C720+3E9↓j
.text:0040CAB1                 xor     esi, esi
.text:0040CAB3                 mov     ebp, edi
.text:0040CAB5                 mov     ecx, eax
.text:0040CAB7                 shrd    ecx, edx, 9
.text:0040CABB                 mov     ebx, edx
.text:0040CABD                 and     ebp, 1FFh
.text:0040CAC3                 mov     eax, esi
.text:0040CAC5                 sar     ebx, 9
.text:0040CAC8                 or      eax, ebp
.text:0040CACA                 jz      short loc_40CAD2
.text:0040CACC                 add     ecx, 1
.text:0040CACF                 adc     ebx, 0
.text:0040CAD2
.text:0040CAD2 loc_40CAD2:                             ; CODE XREF: sub_40C720+3AA↑j
.text:0040CAD2                 mov     edx, [esp+8FCh+arg_4]
.text:0040CAD9                 mov     [edx+5Ch], ebx
.text:0040CADC                 mov     ebx, [esp+8FCh+arg_0]
.text:0040CAE3                 mov     [edx+58h], ecx
.text:0040CAE6                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040CAEA                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040CAED                 call    sub_40B940
.text:0040CAF2                 xor     edx, edx
.text:0040CAF4
.text:0040CAF4 loc_40CAF4:                             ; CODE XREF: sub_40C720+43↑j
.text:0040CAF4                 add     esp, 8ECh
.text:0040CAFA                 mov     eax, edx
.text:0040CAFC                 pop     ebx
.text:0040CAFD                 pop     esi
.text:0040CAFE                 pop     edi
.text:0040CAFF                 pop     ebp
.text:0040CB00                 retn
.text:0040CB01 ; ---------------------------------------------------------------------------
.text:0040CB01
.text:0040CB01 loc_40CB01:                             ; CODE XREF: sub_40C720+38F↑j
.text:0040CB01                 add     eax, 1FFh
.text:0040CB06                 adc     edx, 0
.text:0040CB09                 jmp     short loc_40CAB1
.text:0040CB09 ; ---------------------------------------------------------------------------
.text:0040CB0B                 align 10h
.text:0040CB10
.text:0040CB10 loc_40CB10:                             ; CODE XREF: sub_40C720+CA↑j
.text:0040CB10                 mov     eax, [esp+8FCh+arg_0]
.text:0040CB17                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040CB1A                 call    loc_40B2F0
.text:0040CB1F                 mov     [esp+8FCh+var_34], eax
.text:0040CB26                 jmp     loc_40C7FC
.text:0040CB26 sub_40C720      endp
.text:0040CB26
.text:0040CB26 ; ---------------------------------------------------------------------------
.text:0040CB2B                 align 10h
.text:0040CB30 ; START OF FUNCTION CHUNK FOR sub_411210
.text:0040CB30
.text:0040CB30 loc_40CB30:                             ; CODE XREF: sub_411210+26↓j
.text:0040CB30                 cld
.text:0040CB31                 sub     esp, 2Ch
.text:0040CB34                 xor     eax, eax
.text:0040CB36                 mov     [esp+2Ch+var_10], ebx
.text:0040CB3A                 mov     ecx, 18h
.text:0040CB3F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040CB43                 mov     [esp+2Ch+var_C], esi
.text:0040CB47                 mov     esi, [esp+2Ch+arg_4]
.text:0040CB4B                 test    ebx, ebx
.text:0040CB4D                 mov     [esp+2Ch+var_8], edi
.text:0040CB51                 mov     edi, esi
.text:0040CB53                 mov     [esp+2Ch+var_4], ebp
.text:0040CB57                 rep stosd
.text:0040CB59                 jz      short loc_40CB60
.text:0040CB5B                 cmp     byte ptr [ebx], 0
.text:0040CB5E                 jnz     short loc_40CB78
.text:0040CB60
.text:0040CB60 loc_40CB60:                             ; CODE XREF: sub_411210-46B7↑j
.text:0040CB60                 xor     edx, edx
.text:0040CB62
.text:0040CB62 loc_40CB62:                             ; CODE XREF: sub_411210-4681↓j
.text:0040CB62                                         ; sub_411210-45D8↓j
.text:0040CB62                 mov     ebx, [esp+2Ch+var_10]
.text:0040CB66                 mov     eax, edx
.text:0040CB68                 mov     esi, [esp+2Ch+var_C]
.text:0040CB6C                 mov     edi, [esp+2Ch+var_8]
.text:0040CB70                 mov     ebp, [esp+2Ch+var_4]
.text:0040CB74                 add     esp, 2Ch
.text:0040CB77                 retn
.text:0040CB78 ; ---------------------------------------------------------------------------
.text:0040CB78
.text:0040CB78 loc_40CB78:                             ; CODE XREF: sub_411210-46B2↑j
.text:0040CB78                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040CB80                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040CB83                 call    sub_40ED90
.text:0040CB88                 test    eax, eax
.text:0040CB8A                 mov     edx, 0FFFFFFFFh
.text:0040CB8F                 jnz     short loc_40CB62
.text:0040CB91                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040CB94                 call    sub_40EC40
.text:0040CB99                 mov     [esp+2Ch+lpFileName], eax
.text:0040CB9C                 call    sub_40D0C0
.text:0040CBA1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040CBA4                 mov     ebp, eax
.text:0040CBA6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040CBAE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040CBB6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040CBBE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040CBC6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040CBCE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040CBD6                 call    CreateFileA
.text:0040CBDB                 sub     esp, 1Ch
.text:0040CBDE                 mov     ebx, eax
.text:0040CBE0                 mov     [esp+2Ch+dwDesiredAccess], esi
.text:0040CBE4                 mov     [esp+2Ch+lpFileName], eax
.text:0040CBE7                 call    loc_40B470
.text:0040CBEC                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040CBEF                 mov     edi, eax
.text:0040CBF1                 call    CloseHandle
.text:0040CBF6                 sub     esp, 4
.text:0040CBF9                 cmp     edi, 0FFFFFFFFh
.text:0040CBFC                 jz      short loc_40CC5A
.text:0040CBFE                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CC02                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040CC05                 call    sub_40B940
.text:0040CC0A
.text:0040CC0A loc_40CC0A:                             ; CODE XREF: sub_411210-45A8↓j
.text:0040CC0A                 mov     edx, [esi]
.text:0040CC0C                 and     edx, 0F000h
.text:0040CC12                 cmp     edx, 4000h
.text:0040CC18                 jz      short loc_40CC4D
.text:0040CC1A
.text:0040CC1A loc_40CC1A:                             ; CODE XREF: sub_411210-45B8↓j
.text:0040CC1A                 cmp     edi, 0FFFFFFFFh
.text:0040CC1D                 jz      short loc_40CC3D
.text:0040CC1F
.text:0040CC1F loc_40CC1F:                             ; CODE XREF: sub_411210-45C5↓j
.text:0040CC1F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040CC26                 call    SetErrorMode
.text:0040CC2B                 sub     esp, 4
.text:0040CC2E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040CC31                 call    free
.text:0040CC36                 mov     edx, edi
.text:0040CC38                 jmp     loc_40CB62
.text:0040CC3D ; ---------------------------------------------------------------------------
.text:0040CC3D
.text:0040CC3D loc_40CC3D:                             ; CODE XREF: sub_411210-45F3↑j
.text:0040CC3D                 call    sub_40EBF0
.text:0040CC42                 mov     esi, eax
.text:0040CC44                 call    _errno
.text:0040CC49                 mov     [eax], esi
.text:0040CC4B                 jmp     short loc_40CC1F
.text:0040CC4D ; ---------------------------------------------------------------------------
.text:0040CC4D
.text:0040CC4D loc_40CC4D:                             ; CODE XREF: sub_411210-45F8↑j
.text:0040CC4D                 mov     [esp+2Ch+lpFileName], ebp
.text:0040CC50                 call    loc_40B2F0
.text:0040CC55                 mov     [esi+18h], eax
.text:0040CC58                 jmp     short loc_40CC1A
.text:0040CC5A ; ---------------------------------------------------------------------------
.text:0040CC5A
.text:0040CC5A loc_40CC5A:                             ; CODE XREF: sub_411210-4614↑j
.text:0040CC5A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CC5E                 mov     [esp+2Ch+lpFileName], ebp ; LPCSTR
.text:0040CC61                 call    sub_40C720
.text:0040CC66                 mov     edi, eax
.text:0040CC68                 jmp     short loc_40CC0A
.text:0040CC68 ; END OF FUNCTION CHUNK FOR sub_411210
.text:0040CC68 ; ---------------------------------------------------------------------------
.text:0040CC6A                 align 10h
.text:0040CC70
.text:0040CC70 ; =============== S U B R O U T I N E =======================================
.text:0040CC70
.text:0040CC70 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040CC70
.text:0040CC70 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040CC70 _win32_longpath proc near               ; CODE XREF: .text:0040D434↓p
.text:0040CC70
.text:0040CC70 C               = dword ptr -278h
.text:0040CC70 lpFindFileData  = dword ptr -274h
.text:0040CC70 Destination     = byte ptr -268h
.text:0040CC70 var_267         = byte ptr -267h
.text:0040CC70 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040CC70 lpFileName      = dword ptr  8
.text:0040CC70
.text:0040CC70                 push    ebp
.text:0040CC71                 xor     eax, eax
.text:0040CC73                 push    edi
.text:0040CC74                 push    esi
.text:0040CC75                 push    ebx
.text:0040CC76                 sub     esp, 26Ch
.text:0040CC7C                 mov     esi, [esp+278h+lpFileName]
.text:0040CC83                 lea     ebp, [esp+278h+Destination]
.text:0040CC87                 test    esi, esi
.text:0040CC89                 jz      loc_40CDE7
.text:0040CC8F                 movsx   edx, byte ptr [esi]
.text:0040CC92                 mov     [esp+278h+C], edx ; C
.text:0040CC95                 call    isalpha
.text:0040CC9A                 test    eax, eax
.text:0040CC9C                 jz      short loc_40CCAF
.text:0040CC9E                 mov     eax, [esp+278h+lpFileName]
.text:0040CCA5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040CCA9                 jz      loc_40CFEB
.text:0040CCAF
.text:0040CCAF loc_40CCAF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040CCAF                 mov     edx, [esp+278h+lpFileName]
.text:0040CCB6                 movzx   eax, byte ptr [edx]
.text:0040CCB9                 cmp     al, 2Fh ; '/'
.text:0040CCBB                 jz      loc_40CECB
.text:0040CCC1                 cmp     al, 5Ch ; '\'
.text:0040CCC3                 jz      loc_40CECB
.text:0040CCC9
.text:0040CCC9 loc_40CCC9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040CCC9                                         ; _win32_longpath+2B1↓j ...
.text:0040CCC9                 mov     [ebp+268h+Destination], 0
.text:0040CCCD                 movzx   ebx, byte ptr [esi]
.text:0040CCD0                 test    bl, bl
.text:0040CCD2                 jz      loc_40CDC9
.text:0040CCD8                 nop
.text:0040CCD9                 lea     esi, [esi+0]
.text:0040CCE0
.text:0040CCE0 loc_40CCE0:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040CCE0                 cmp     bl, 2Fh ; '/'
.text:0040CCE3                 jz      loc_40CE80
.text:0040CCE9                 cmp     bl, 5Ch ; '\'
.text:0040CCEC                 jz      loc_40CE80
.text:0040CCF2
.text:0040CCF2 loc_40CCF2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040CCF2                                         ; _win32_longpath+22C↓j ...
.text:0040CCF2                 cmp     bl, 2Eh ; '.'
.text:0040CCF5                 jz      loc_40CE20
.text:0040CCFB
.text:0040CCFB loc_40CCFB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040CCFB                                         ; _win32_longpath+203↓j
.text:0040CCFB                 test    bl, bl
.text:0040CCFD                 jz      loc_40CDC9
.text:0040CD03                 cmp     bl, 2Fh ; '/'
.text:0040CD06                 jz      short loc_40CD22
.text:0040CD08                 cmp     bl, 5Ch ; '\'
.text:0040CD0B                 jz      short loc_40CD22
.text:0040CD0D                 lea     esi, [esi+0]
.text:0040CD10
.text:0040CD10 loc_40CD10:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040CD10                 inc     esi
.text:0040CD11                 movzx   ebx, byte ptr [esi]
.text:0040CD14                 test    bl, bl
.text:0040CD16                 jz      short loc_40CD22
.text:0040CD18                 cmp     bl, 2Fh ; '/'
.text:0040CD1B                 jz      short loc_40CD22
.text:0040CD1D                 cmp     bl, 5Ch ; '\'
.text:0040CD20                 jnz     short loc_40CD10
.text:0040CD22
.text:0040CD22 loc_40CD22:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040CD22                                         ; _win32_longpath+9B↑j ...
.text:0040CD22                 mov     byte ptr [esi], 0
.text:0040CD25                 lea     edx, [esp+278h+FindFileData]
.text:0040CD2C                 mov     eax, [esp+278h+lpFileName]
.text:0040CD33                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040CD37                 mov     [esp+278h+C], eax ; lpFileName
.text:0040CD3A                 call    FindFirstFileA
.text:0040CD3F                 mov     [esi], bl
.text:0040CD41                 sub     esp, 8
.text:0040CD44                 mov     edi, eax
.text:0040CD46                 cmp     eax, 0FFFFFFFFh
.text:0040CD49                 jz      loc_40CE0C
.text:0040CD4F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040CD56                 mov     ecx, ebx
.text:0040CD58                 nop
.text:0040CD59                 lea     esi, [esi+0]
.text:0040CD60
.text:0040CD60 loc_40CD60:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040CD60                 mov     eax, [ebx]
.text:0040CD62                 add     ebx, 4
.text:0040CD65                 lea     edx, [eax-1010101h]
.text:0040CD6B                 not     eax
.text:0040CD6D                 and     edx, eax
.text:0040CD6F                 and     edx, 80808080h
.text:0040CD75                 jz      short loc_40CD60
.text:0040CD77                 test    edx, 8080h
.text:0040CD7D                 jnz     short loc_40CD85
.text:0040CD7F                 shr     edx, 10h
.text:0040CD82                 add     ebx, 2
.text:0040CD85
.text:0040CD85 loc_40CD85:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040CD85                 add     dl, dl
.text:0040CD87                 sbb     ebx, 3
.text:0040CD8A                 sub     ebx, ecx
.text:0040CD8C                 lea     ecx, [esp+278h+Destination]
.text:0040CD90                 sub     ecx, ebp
.text:0040CD92                 add     ecx, 105h
.text:0040CD98                 cmp     ecx, ebx
.text:0040CD9A                 jle     short loc_40CDF2
.text:0040CD9C                 mov     [esp+278h+C], ebp ; Destination
.text:0040CD9F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040CDA6                 add     ebp, ebx
.text:0040CDA8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040CDAC                 call    strcpy
.text:0040CDB1                 mov     [esp+278h+C], edi ; hFindFile
.text:0040CDB4                 call    FindClose
.text:0040CDB9                 sub     esp, 4
.text:0040CDBC
.text:0040CDBC loc_40CDBC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040CDBC                 movzx   ecx, byte ptr [esi]
.text:0040CDBF                 test    cl, cl
.text:0040CDC1                 mov     bl, cl
.text:0040CDC3                 jnz     loc_40CCE0
.text:0040CDC9
.text:0040CDC9 loc_40CDC9:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040CDC9                                         ; _win32_longpath+8D↑j
.text:0040CDC9                 mov     esi, [esp+278h+lpFileName]
.text:0040CDD0                 lea     ebp, [esp+278h+Destination]
.text:0040CDD4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040CDD8                 mov     [esp+278h+C], esi ; Destination
.text:0040CDDB                 call    strcpy
.text:0040CDE0                 mov     eax, [esp+278h+lpFileName]
.text:0040CDE7
.text:0040CDE7 loc_40CDE7:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040CDE7                                         ; _win32_longpath+19A↓j
.text:0040CDE7                 add     esp, 26Ch
.text:0040CDED                 pop     ebx
.text:0040CDEE                 pop     esi
.text:0040CDEF                 pop     edi
.text:0040CDF0                 pop     ebp
.text:0040CDF1                 retn
.text:0040CDF2 ; ---------------------------------------------------------------------------
.text:0040CDF2
.text:0040CDF2 loc_40CDF2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040CDF2                 mov     [esp+278h+C], edi ; hFindFile
.text:0040CDF5                 call    FindClose
.text:0040CDFA                 sub     esp, 4
.text:0040CDFD                 call    _errno
.text:0040CE02                 mov     dword ptr [eax], 22h ; '"'
.text:0040CE08
.text:0040CE08 loc_40CE08:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040CE08                 xor     eax, eax
.text:0040CE0A                 jmp     short loc_40CDE7
.text:0040CE0C ; ---------------------------------------------------------------------------
.text:0040CE0C
.text:0040CE0C loc_40CE0C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040CE0C                 call    _errno
.text:0040CE11                 mov     dword ptr [eax], 16h
.text:0040CE17                 jmp     short loc_40CE08
.text:0040CE17 ; ---------------------------------------------------------------------------
.text:0040CE19                 align 10h
.text:0040CE20
.text:0040CE20 loc_40CE20:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040CE20                 movzx   eax, byte ptr [esi+1]
.text:0040CE24                 test    al, al
.text:0040CE26                 jnz     short loc_40CE55
.text:0040CE28
.text:0040CE28 loc_40CE28:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040CE28                                         ; _win32_longpath+1EB↓j ...
.text:0040CE28                 test    bl, bl
.text:0040CE2A                 jz      short loc_40CE4C
.text:0040CE2C                 cmp     bl, 2Fh ; '/'
.text:0040CE2F                 jz      short loc_40CE4C
.text:0040CE31                 cmp     bl, 5Ch ; '\'
.text:0040CE34                 jz      short loc_40CE4C
.text:0040CE36
.text:0040CE36 loc_40CE36:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040CE36                 mov     [ebp+268h+Destination], bl
.text:0040CE39                 inc     esi
.text:0040CE3A                 inc     ebp
.text:0040CE3B                 movzx   ebx, byte ptr [esi]
.text:0040CE3E                 test    bl, bl
.text:0040CE40                 jz      short loc_40CE4C
.text:0040CE42                 cmp     bl, 2Fh ; '/'
.text:0040CE45                 jz      short loc_40CE4C
.text:0040CE47                 cmp     bl, 5Ch ; '\'
.text:0040CE4A                 jnz     short loc_40CE36
.text:0040CE4C
.text:0040CE4C loc_40CE4C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040CE4C                                         ; _win32_longpath+1BF↑j ...
.text:0040CE4C                 mov     [ebp+268h+Destination], 0
.text:0040CE50                 jmp     loc_40CDBC
.text:0040CE55 ; ---------------------------------------------------------------------------
.text:0040CE55
.text:0040CE55 loc_40CE55:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040CE55                 cmp     al, 2Fh ; '/'
.text:0040CE57                 jz      short loc_40CE28
.text:0040CE59                 cmp     al, 5Ch ; '\'
.text:0040CE5B                 jz      short loc_40CE28
.text:0040CE5D                 cmp     al, 2Eh ; '.'
.text:0040CE5F                 jnz     loc_40CCFB
.text:0040CE65                 movzx   eax, byte ptr [esi+2]
.text:0040CE69                 test    al, al
.text:0040CE6B                 jz      short loc_40CE28
.text:0040CE6D                 cmp     al, 2Fh ; '/'
.text:0040CE6F                 jz      short loc_40CE28
.text:0040CE71                 cmp     al, 5Ch ; '\'
.text:0040CE73                 jnz     loc_40CCFB
.text:0040CE79                 jmp     short loc_40CE28
.text:0040CE79 ; ---------------------------------------------------------------------------
.text:0040CE7B                 align 10h
.text:0040CE80
.text:0040CE80 loc_40CE80:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040CE80                                         ; _win32_longpath+7C↑j
.text:0040CE80                 mov     [ebp+268h+Destination], bl
.text:0040CE83                 inc     esi
.text:0040CE84                 inc     ebp
.text:0040CE85                 mov     [ebp+268h+Destination], 0
.text:0040CE89                 movzx   ebx, byte ptr [esi]
.text:0040CE8C                 test    bl, bl
.text:0040CE8E                 jz      loc_40CCF2
.text:0040CE94                 cmp     bl, 2Fh ; '/'
.text:0040CE97                 jz      short loc_40CEB0
.text:0040CE99                 cmp     bl, 5Ch ; '\'
.text:0040CE9C                 jnz     loc_40CCF2
.text:0040CEA2                 lea     esi, [esi+0]
.text:0040CEA9                 lea     edi, [edi+0]
.text:0040CEB0
.text:0040CEB0 loc_40CEB0:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040CEB0                                         ; _win32_longpath+24F↓j ...
.text:0040CEB0                 inc     esi
.text:0040CEB1                 movzx   ebx, byte ptr [esi]
.text:0040CEB4                 test    bl, bl
.text:0040CEB6                 jz      loc_40CCF2
.text:0040CEBC                 cmp     bl, 2Fh ; '/'
.text:0040CEBF                 jz      short loc_40CEB0
.text:0040CEC1                 cmp     bl, 5Ch ; '\'
.text:0040CEC4                 jz      short loc_40CEB0
.text:0040CEC6                 jmp     loc_40CCF2
.text:0040CECB ; ---------------------------------------------------------------------------
.text:0040CECB
.text:0040CECB loc_40CECB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040CECB                                         ; _win32_longpath+53↑j
.text:0040CECB                 mov     edi, [esp+278h+lpFileName]
.text:0040CED2                 movzx   edx, byte ptr [edi+1]
.text:0040CED6                 cmp     dl, 2Fh ; '/'
.text:0040CED9                 jz      short loc_40CEE4
.text:0040CEDB                 cmp     dl, 5Ch ; '\'
.text:0040CEDE                 jnz     loc_40CCC9
.text:0040CEE4
.text:0040CEE4 loc_40CEE4:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040CEE4                 mov     esi, [esp+278h+lpFileName]
.text:0040CEEB                 mov     [ebp+268h+Destination], al
.text:0040CEEE                 mov     ecx, [esp+278h+lpFileName]
.text:0040CEF5                 inc     ebp
.text:0040CEF6                 add     esi, 2
.text:0040CEF9                 movzx   ebx, byte ptr [ecx+1]
.text:0040CEFD                 mov     [ebp+268h+Destination], bl
.text:0040CF00                 inc     ebp
.text:0040CF01                 movzx   eax, byte ptr [ecx+2]
.text:0040CF05                 test    al, al
.text:0040CF07                 jz      loc_40CFE3
.text:0040CF0D                 cmp     al, 2Fh ; '/'
.text:0040CF0F                 jz      loc_40CFC8
.text:0040CF15                 cmp     al, 5Ch ; '\'
.text:0040CF17                 mov     bl, al
.text:0040CF19                 jz      loc_40CFC8
.text:0040CF1F
.text:0040CF1F loc_40CF1F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040CF1F                                         ; _win32_longpath+376↓j
.text:0040CF1F                 test    bl, bl
.text:0040CF21                 jz      loc_40CCC9
.text:0040CF27                 cmp     bl, 2Fh ; '/'
.text:0040CF2A                 jz      short loc_40CF4B
.text:0040CF2C                 cmp     bl, 5Ch ; '\'
.text:0040CF2F                 jz      short loc_40CF4B
.text:0040CF31
.text:0040CF31 loc_40CF31:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040CF31                 mov     [ebp+268h+Destination], bl
.text:0040CF34                 inc     esi
.text:0040CF35                 inc     ebp
.text:0040CF36                 movzx   ebx, byte ptr [esi]
.text:0040CF39                 test    bl, bl
.text:0040CF3B                 jz      loc_40CCC9
.text:0040CF41                 cmp     bl, 2Fh ; '/'
.text:0040CF44                 jz      short loc_40CF4B
.text:0040CF46                 cmp     bl, 5Ch ; '\'
.text:0040CF49                 jnz     short loc_40CF31
.text:0040CF4B
.text:0040CF4B loc_40CF4B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040CF4B                                         ; _win32_longpath+2BF↑j ...
.text:0040CF4B                 test    bl, bl
.text:0040CF4D                 jz      loc_40CCC9
.text:0040CF53                 mov     [ebp+268h+Destination], bl
.text:0040CF56                 inc     esi
.text:0040CF57                 inc     ebp
.text:0040CF58                 movzx   ebx, byte ptr [esi]
.text:0040CF5B                 test    bl, bl
.text:0040CF5D                 jz      loc_40CCC9
.text:0040CF63                 cmp     bl, 2Fh ; '/'
.text:0040CF66                 jz      short loc_40CFB0
.text:0040CF68                 cmp     bl, 5Ch ; '\'
.text:0040CF6B                 jz      short loc_40CFB0
.text:0040CF6D
.text:0040CF6D loc_40CF6D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040CF6D                 test    bl, bl
.text:0040CF6F                 jz      loc_40CCC9
.text:0040CF75                 cmp     bl, 2Fh ; '/'
.text:0040CF78                 jz      loc_40CCC9
.text:0040CF7E                 cmp     bl, 5Ch ; '\'
.text:0040CF81                 jz      loc_40CCC9
.text:0040CF87
.text:0040CF87 loc_40CF87:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040CF87                 mov     [ebp+268h+Destination], bl
.text:0040CF8A                 inc     esi
.text:0040CF8B                 inc     ebp
.text:0040CF8C                 movzx   ebx, byte ptr [esi]
.text:0040CF8F                 test    bl, bl
.text:0040CF91                 jz      loc_40CCC9
.text:0040CF97                 cmp     bl, 2Fh ; '/'
.text:0040CF9A                 jz      loc_40CCC9
.text:0040CFA0                 cmp     bl, 5Ch ; '\'
.text:0040CFA3                 jnz     short loc_40CF87
.text:0040CFA5                 jmp     loc_40CCC9
.text:0040CFA5 ; ---------------------------------------------------------------------------
.text:0040CFAA                 align 10h
.text:0040CFB0
.text:0040CFB0 loc_40CFB0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040CFB0                                         ; _win32_longpath+2FB↑j ...
.text:0040CFB0                 inc     esi
.text:0040CFB1                 movzx   ebx, byte ptr [esi]
.text:0040CFB4                 test    bl, bl
.text:0040CFB6                 jz      loc_40CCC9
.text:0040CFBC                 cmp     bl, 2Fh ; '/'
.text:0040CFBF                 jz      short loc_40CFB0
.text:0040CFC1                 cmp     bl, 5Ch ; '\'
.text:0040CFC4                 jz      short loc_40CFB0
.text:0040CFC6                 jmp     short loc_40CF6D
.text:0040CFC8 ; ---------------------------------------------------------------------------
.text:0040CFC8
.text:0040CFC8 loc_40CFC8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040CFC8                                         ; _win32_longpath+2A9↑j ...
.text:0040CFC8                 inc     esi
.text:0040CFC9                 movzx   ebx, byte ptr [esi]
.text:0040CFCC                 test    bl, bl
.text:0040CFCE                 jz      loc_40CCC9
.text:0040CFD4                 cmp     bl, 2Fh ; '/'
.text:0040CFD7                 jz      short loc_40CFC8
.text:0040CFD9                 cmp     bl, 5Ch ; '\'
.text:0040CFDC                 jz      short loc_40CFC8
.text:0040CFDE                 jmp     loc_40CF1F
.text:0040CFE3 ; ---------------------------------------------------------------------------
.text:0040CFE3
.text:0040CFE3 loc_40CFE3:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040CFE3                 movzx   ebx, byte ptr [esi]
.text:0040CFE6                 jmp     loc_40CF1F
.text:0040CFEB ; ---------------------------------------------------------------------------
.text:0040CFEB
.text:0040CFEB loc_40CFEB:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040CFEB                 movzx   ecx, byte ptr [eax]
.text:0040CFEE                 mov     esi, eax
.text:0040CFF0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040CFF5                 add     esi, 2
.text:0040CFF8                 lea     ebp, [esp+12h]
.text:0040CFFC                 mov     [esp+278h+Destination], cl
.text:0040D000                 jmp     loc_40CCC9
.text:0040D000 _win32_longpath endp
.text:0040D000
.text:0040D000 ; ---------------------------------------------------------------------------
.text:0040D005                 align 10h
.text:0040D010                 sub     esp, 0Ch
.text:0040D013                 mov     edx, [esp+10h]
.text:0040D017                 mov     dword ptr [esp+4], 0
.text:0040D01F                 mov     [esp], edx
.text:0040D022                 call    sub_40ED90
.text:0040D027                 inc     eax
.text:0040D028                 setnz   dl
.text:0040D02B                 add     esp, 0Ch
.text:0040D02E                 movzx   eax, dl
.text:0040D031                 retn
.text:0040D031 ; ---------------------------------------------------------------------------
.text:0040D032                 align 10h
.text:0040D040
.text:0040D040 ; =============== S U B R O U T I N E =======================================
.text:0040D040
.text:0040D040
.text:0040D040 sub_40D040      proc near               ; CODE XREF: sub_40EC60+AA↓p
.text:0040D040                                         ; sub_4114F0+B4↓p
.text:0040D040
.text:0040D040 arg_0           = dword ptr  4
.text:0040D040
.text:0040D040                 mov     ecx, [esp+arg_0]
.text:0040D044                 mov     edx, ecx
.text:0040D046                 movzx   eax, byte ptr [ecx]
.text:0040D049                 test    al, al
.text:0040D04B                 jz      short loc_40D05C
.text:0040D04D                 lea     esi, [esi+0]
.text:0040D050
.text:0040D050 loc_40D050:                             ; CODE XREF: sub_40D040+1A↓j
.text:0040D050                 cmp     al, 5Ch ; '\'
.text:0040D052                 jz      short loc_40D060
.text:0040D054
.text:0040D054 loc_40D054:                             ; CODE XREF: sub_40D040+23↓j
.text:0040D054                 inc     edx
.text:0040D055                 movzx   eax, byte ptr [edx]
.text:0040D058                 test    al, al
.text:0040D05A                 jnz     short loc_40D050
.text:0040D05C
.text:0040D05C loc_40D05C:                             ; CODE XREF: sub_40D040+B↑j
.text:0040D05C                 mov     eax, ecx
.text:0040D05E                 retn
.text:0040D05E ; ---------------------------------------------------------------------------
.text:0040D05F                 align 10h
.text:0040D060
.text:0040D060 loc_40D060:                             ; CODE XREF: sub_40D040+12↑j
.text:0040D060                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D063                 jmp     short loc_40D054
.text:0040D063 sub_40D040      endp
.text:0040D063
.text:0040D063 ; ---------------------------------------------------------------------------
.text:0040D065                 align 10h
.text:0040D070                 push    ebx
.text:0040D071                 sub     esp, 8
.text:0040D074                 mov     ebx, [esp+14h]
.text:0040D078                 mov     edx, [esp+10h]
.text:0040D07C                 mov     [esp], ebx
.text:0040D07F                 mov     [esp+4], edx
.text:0040D083                 call    strcpy
.text:0040D088                 movzx   eax, byte ptr [ebx]
.text:0040D08B                 mov     edx, ebx
.text:0040D08D                 test    al, al
.text:0040D08F                 jz      short loc_40D0AC
.text:0040D091                 jmp     short loc_40D0A0
.text:0040D091 ; ---------------------------------------------------------------------------
.text:0040D093                 align 10h
.text:0040D0A0
.text:0040D0A0 loc_40D0A0:                             ; CODE XREF: .text:0040D091↑j
.text:0040D0A0                                         ; .text:0040D0AA↓j
.text:0040D0A0                 cmp     al, 5Ch ; '\'
.text:0040D0A2                 jz      short loc_40D0B3
.text:0040D0A4
.text:0040D0A4 loc_40D0A4:                             ; CODE XREF: .text:0040D0B6↓j
.text:0040D0A4                 inc     edx
.text:0040D0A5                 movzx   eax, byte ptr [edx]
.text:0040D0A8                 test    al, al
.text:0040D0AA                 jnz     short loc_40D0A0
.text:0040D0AC
.text:0040D0AC loc_40D0AC:                             ; CODE XREF: .text:0040D08F↑j
.text:0040D0AC                 add     esp, 8
.text:0040D0AF                 xor     eax, eax
.text:0040D0B1                 pop     ebx
.text:0040D0B2                 retn
.text:0040D0B3 ; ---------------------------------------------------------------------------
.text:0040D0B3
.text:0040D0B3 loc_40D0B3:                             ; CODE XREF: .text:0040D0A2↑j
.text:0040D0B3                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D0B6                 jmp     short loc_40D0A4
.text:0040D0B6 ; ---------------------------------------------------------------------------
.text:0040D0B8                 align 10h
.text:0040D0C0
.text:0040D0C0 ; =============== S U B R O U T I N E =======================================
.text:0040D0C0
.text:0040D0C0
.text:0040D0C0 sub_40D0C0      proc near               ; CODE XREF: sub_40B940+16↑p
.text:0040D0C0                                         ; sub_40BE40+1F↑p ...
.text:0040D0C0
.text:0040D0C0 arg_0           = dword ptr  4
.text:0040D0C0
.text:0040D0C0                 mov     ecx, [esp+arg_0]
.text:0040D0C4                 mov     edx, ecx
.text:0040D0C6                 movzx   eax, byte ptr [ecx]
.text:0040D0C9                 test    al, al
.text:0040D0CB                 jz      short loc_40D0DC
.text:0040D0CD                 lea     esi, [esi+0]
.text:0040D0D0
.text:0040D0D0 loc_40D0D0:                             ; CODE XREF: sub_40D0C0+1A↓j
.text:0040D0D0                 cmp     al, 2Fh ; '/'
.text:0040D0D2                 jz      short loc_40D0E0
.text:0040D0D4
.text:0040D0D4 loc_40D0D4:                             ; CODE XREF: sub_40D0C0+23↓j
.text:0040D0D4                 inc     edx
.text:0040D0D5                 movzx   eax, byte ptr [edx]
.text:0040D0D8                 test    al, al
.text:0040D0DA                 jnz     short loc_40D0D0
.text:0040D0DC
.text:0040D0DC loc_40D0DC:                             ; CODE XREF: sub_40D0C0+B↑j
.text:0040D0DC                 mov     eax, ecx
.text:0040D0DE                 retn
.text:0040D0DE ; ---------------------------------------------------------------------------
.text:0040D0DF                 align 10h
.text:0040D0E0
.text:0040D0E0 loc_40D0E0:                             ; CODE XREF: sub_40D0C0+12↑j
.text:0040D0E0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D0E3                 jmp     short loc_40D0D4
.text:0040D0E3 sub_40D0C0      endp
.text:0040D0E3
.text:0040D0E3 ; ---------------------------------------------------------------------------
.text:0040D0E5                 align 10h
.text:0040D0F0                 push    ebx
.text:0040D0F1                 sub     esp, 8
.text:0040D0F4                 mov     ebx, [esp+14h]
.text:0040D0F8                 mov     edx, [esp+10h]
.text:0040D0FC                 mov     [esp], ebx
.text:0040D0FF                 mov     [esp+4], edx
.text:0040D103                 call    strcpy
.text:0040D108                 movzx   eax, byte ptr [ebx]
.text:0040D10B                 mov     edx, ebx
.text:0040D10D                 test    al, al
.text:0040D10F                 jz      short loc_40D12C
.text:0040D111                 jmp     short loc_40D120
.text:0040D111 ; ---------------------------------------------------------------------------
.text:0040D113                 align 10h
.text:0040D120
.text:0040D120 loc_40D120:                             ; CODE XREF: .text:0040D111↑j
.text:0040D120                                         ; .text:0040D12A↓j
.text:0040D120                 cmp     al, 2Fh ; '/'
.text:0040D122                 jz      short loc_40D133
.text:0040D124
.text:0040D124 loc_40D124:                             ; CODE XREF: .text:0040D136↓j
.text:0040D124                 inc     edx
.text:0040D125                 movzx   eax, byte ptr [edx]
.text:0040D128                 test    al, al
.text:0040D12A                 jnz     short loc_40D120
.text:0040D12C
.text:0040D12C loc_40D12C:                             ; CODE XREF: .text:0040D10F↑j
.text:0040D12C                 add     esp, 8
.text:0040D12F                 xor     eax, eax
.text:0040D131                 pop     ebx
.text:0040D132                 retn
.text:0040D133 ; ---------------------------------------------------------------------------
.text:0040D133
.text:0040D133 loc_40D133:                             ; CODE XREF: .text:0040D122↑j
.text:0040D133                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D136                 jmp     short loc_40D124
.text:0040D136 ; ---------------------------------------------------------------------------
.text:0040D138                 align 10h
.text:0040D140                 push    ebx
.text:0040D141                 sub     esp, 8
.text:0040D144                 mov     ebx, [esp+14h]
.text:0040D148                 mov     edx, [esp+10h]
.text:0040D14C                 mov     [esp+4], ebx
.text:0040D150                 mov     [esp], edx
.text:0040D153                 call    sub_40EC10
.text:0040D158                 movzx   eax, byte ptr [ebx]
.text:0040D15B                 mov     edx, ebx
.text:0040D15D                 test    al, al
.text:0040D15F                 jz      short loc_40D17C
.text:0040D161                 jmp     short loc_40D170
.text:0040D161 ; ---------------------------------------------------------------------------
.text:0040D163                 align 10h
.text:0040D170
.text:0040D170 loc_40D170:                             ; CODE XREF: .text:0040D161↑j
.text:0040D170                                         ; .text:0040D17A↓j
.text:0040D170                 cmp     al, 2Fh ; '/'
.text:0040D172                 jz      short loc_40D183
.text:0040D174
.text:0040D174 loc_40D174:                             ; CODE XREF: .text:0040D186↓j
.text:0040D174                 inc     edx
.text:0040D175                 movzx   eax, byte ptr [edx]
.text:0040D178                 test    al, al
.text:0040D17A                 jnz     short loc_40D170
.text:0040D17C
.text:0040D17C loc_40D17C:                             ; CODE XREF: .text:0040D15F↑j
.text:0040D17C                 add     esp, 8
.text:0040D17F                 xor     eax, eax
.text:0040D181                 pop     ebx
.text:0040D182                 retn
.text:0040D183 ; ---------------------------------------------------------------------------
.text:0040D183
.text:0040D183 loc_40D183:                             ; CODE XREF: .text:0040D172↑j
.text:0040D183                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D186                 jmp     short loc_40D174
.text:0040D186 ; ---------------------------------------------------------------------------
.text:0040D188                 align 10h
.text:0040D190                 push    ebx
.text:0040D191                 sub     esp, 8
.text:0040D194                 mov     ebx, [esp+14h]
.text:0040D198                 mov     edx, [esp+10h]
.text:0040D19C                 mov     [esp], ebx
.text:0040D19F                 mov     [esp+4], edx
.text:0040D1A3                 call    sub_40EC10
.text:0040D1A8                 movzx   eax, byte ptr [ebx]
.text:0040D1AB                 mov     edx, ebx
.text:0040D1AD                 test    al, al
.text:0040D1AF                 jz      short loc_40D1CC
.text:0040D1B1                 jmp     short loc_40D1C0
.text:0040D1B1 ; ---------------------------------------------------------------------------
.text:0040D1B3                 align 10h
.text:0040D1C0
.text:0040D1C0 loc_40D1C0:                             ; CODE XREF: .text:0040D1B1↑j
.text:0040D1C0                                         ; .text:0040D1CA↓j
.text:0040D1C0                 cmp     al, 5Ch ; '\'
.text:0040D1C2                 jz      short loc_40D1D1
.text:0040D1C4
.text:0040D1C4 loc_40D1C4:                             ; CODE XREF: .text:0040D1D4↓j
.text:0040D1C4                 inc     edx
.text:0040D1C5                 movzx   eax, byte ptr [edx]
.text:0040D1C8                 test    al, al
.text:0040D1CA                 jnz     short loc_40D1C0
.text:0040D1CC
.text:0040D1CC loc_40D1CC:                             ; CODE XREF: .text:0040D1AF↑j
.text:0040D1CC                 add     esp, 8
.text:0040D1CF                 pop     ebx
.text:0040D1D0                 retn
.text:0040D1D1 ; ---------------------------------------------------------------------------
.text:0040D1D1
.text:0040D1D1 loc_40D1D1:                             ; CODE XREF: .text:0040D1C2↑j
.text:0040D1D1                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D1D4                 jmp     short loc_40D1C4
.text:0040D1D4 ; ---------------------------------------------------------------------------
.text:0040D1D6                 align 10h
.text:0040D1E0
.text:0040D1E0 ; =============== S U B R O U T I N E =======================================
.text:0040D1E0
.text:0040D1E0
.text:0040D1E0 ; int __cdecl sub_40D1E0(LPSTR)
.text:0040D1E0 sub_40D1E0      proc near               ; CODE XREF: .text:0040D26E↓p
.text:0040D1E0                                         ; .text:0040D2AE↓p ...
.text:0040D1E0
.text:0040D1E0 hModule         = dword ptr -1Ch
.text:0040D1E0 lpFilename      = dword ptr -18h
.text:0040D1E0 nSize           = dword ptr -14h
.text:0040D1E0 arg_0           = dword ptr  4
.text:0040D1E0
.text:0040D1E0                 push    esi
.text:0040D1E1                 push    ebx
.text:0040D1E2                 sub     esp, 14h
.text:0040D1E5                 mov     esi, [esp+1Ch+arg_0]
.text:0040D1E9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040D1F1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040D1F8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040D1FC                 call    GetModuleFileNameA
.text:0040D201                 sub     esp, 0Ch
.text:0040D204                 test    eax, eax
.text:0040D206                 jz      short loc_40D248
.text:0040D208                 cmp     eax, 104h
.text:0040D20D                 jg      short loc_40D239
.text:0040D20F
.text:0040D20F loc_40D20F:                             ; CODE XREF: sub_40D1E0+66↓j
.text:0040D20F                                         ; sub_40D1E0+78↓j
.text:0040D20F                 movzx   eax, byte ptr [esi]
.text:0040D212                 mov     edx, esi
.text:0040D214                 test    al, al
.text:0040D216                 jz      short loc_40D22C
.text:0040D218                 nop
.text:0040D219                 lea     esi, [esi+0]
.text:0040D220
.text:0040D220 loc_40D220:                             ; CODE XREF: sub_40D1E0+4A↓j
.text:0040D220                 cmp     al, 5Ch ; '\'
.text:0040D222                 jz      short loc_40D234
.text:0040D224
.text:0040D224 loc_40D224:                             ; CODE XREF: sub_40D1E0+57↓j
.text:0040D224                 inc     edx
.text:0040D225                 movzx   eax, byte ptr [edx]
.text:0040D228                 test    al, al
.text:0040D22A                 jnz     short loc_40D220
.text:0040D22C
.text:0040D22C loc_40D22C:                             ; CODE XREF: sub_40D1E0+36↑j
.text:0040D22C                 add     esp, 14h
.text:0040D22F                 mov     eax, esi
.text:0040D231                 pop     ebx
.text:0040D232                 pop     esi
.text:0040D233                 retn
.text:0040D234 ; ---------------------------------------------------------------------------
.text:0040D234
.text:0040D234 loc_40D234:                             ; CODE XREF: sub_40D1E0+42↑j
.text:0040D234                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D237                 jmp     short loc_40D224
.text:0040D239 ; ---------------------------------------------------------------------------
.text:0040D239
.text:0040D239 loc_40D239:                             ; CODE XREF: sub_40D1E0+2D↑j
.text:0040D239                 call    _errno
.text:0040D23E                 mov     dword ptr [eax], 26h ; '&'
.text:0040D244                 xor     esi, esi
.text:0040D246                 jmp     short loc_40D20F
.text:0040D248 ; ---------------------------------------------------------------------------
.text:0040D248
.text:0040D248 loc_40D248:                             ; CODE XREF: sub_40D1E0+26↑j
.text:0040D248                 call    sub_40EBF0
.text:0040D24D                 mov     ebx, eax
.text:0040D24F                 xor     esi, esi
.text:0040D251                 call    _errno
.text:0040D256                 mov     [eax], ebx
.text:0040D258                 jmp     short loc_40D20F
.text:0040D258 sub_40D1E0      endp
.text:0040D258
.text:0040D258 ; ---------------------------------------------------------------------------
.text:0040D25A                 align 10h
.text:0040D260                 sub     esp, 0Ch
.text:0040D263                 mov     [esp+8], ebx
.text:0040D267                 mov     ebx, [esp+10h]
.text:0040D26B                 mov     [esp], ebx
.text:0040D26E                 call    sub_40D1E0
.text:0040D273                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D27B                 mov     [esp], ebx
.text:0040D27E                 call    strrchr
.text:0040D283                 test    eax, eax
.text:0040D285                 jz      short loc_40D28A
.text:0040D287                 lea     ebx, [eax+1]
.text:0040D28A
.text:0040D28A loc_40D28A:                             ; CODE XREF: .text:0040D285↑j
.text:0040D28A                 mov     eax, ebx
.text:0040D28C                 mov     ebx, [esp+8]
.text:0040D290                 add     esp, 0Ch
.text:0040D293                 retn
.text:0040D293 ; ---------------------------------------------------------------------------
.text:0040D294                 align 10h
.text:0040D2A0                 sub     esp, 0Ch
.text:0040D2A3                 mov     [esp+8], ebx
.text:0040D2A7                 mov     ebx, [esp+10h]
.text:0040D2AB                 mov     [esp], ebx
.text:0040D2AE                 call    sub_40D1E0
.text:0040D2B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D2BB                 mov     [esp], ebx
.text:0040D2BE                 call    strrchr
.text:0040D2C3                 test    eax, eax
.text:0040D2C5                 jz      short loc_40D2CA
.text:0040D2C7                 mov     byte ptr [eax], 0
.text:0040D2CA
.text:0040D2CA loc_40D2CA:                             ; CODE XREF: .text:0040D2C5↑j
.text:0040D2CA                 mov     eax, ebx
.text:0040D2CC                 mov     ebx, [esp+8]
.text:0040D2D0                 add     esp, 0Ch
.text:0040D2D3                 retn
.text:0040D2D3 ; ---------------------------------------------------------------------------
.text:0040D2D4                 align 10h
.text:0040D2E0                 sub     esp, 0Ch
.text:0040D2E3                 mov     [esp+8], ebx
.text:0040D2E7                 mov     ebx, [esp+10h]
.text:0040D2EB                 mov     [esp], ebx
.text:0040D2EE                 call    sub_40D1E0
.text:0040D2F3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D2FB                 mov     [esp], ebx
.text:0040D2FE                 call    strrchr
.text:0040D303                 test    eax, eax
.text:0040D305                 jz      short loc_40D30A
.text:0040D307                 mov     byte ptr [eax], 0
.text:0040D30A
.text:0040D30A loc_40D30A:                             ; CODE XREF: .text:0040D305↑j
.text:0040D30A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D312                 mov     [esp], ebx
.text:0040D315                 call    strrchr
.text:0040D31A                 test    eax, eax
.text:0040D31C                 jz      short loc_40D321
.text:0040D31E                 mov     byte ptr [eax], 0
.text:0040D321
.text:0040D321 loc_40D321:                             ; CODE XREF: .text:0040D31C↑j
.text:0040D321                 mov     eax, ebx
.text:0040D323                 mov     ebx, [esp+8]
.text:0040D327                 add     esp, 0Ch
.text:0040D32A                 retn
.text:0040D32A ; ---------------------------------------------------------------------------
.text:0040D32B                 align 10h
.text:0040D330                 sub     esp, 1Ch
.text:0040D333                 mov     edx, [esp+20h]
.text:0040D337                 mov     [esp+10h], ebx
.text:0040D33B                 xor     ebx, ebx
.text:0040D33D                 mov     [esp+14h], esi
.text:0040D341                 mov     [esp+18h], edi
.text:0040D345                 mov     [esp], edx
.text:0040D348                 call    sub_40EC40
.text:0040D34D                 mov     edx, [esp+24h]
.text:0040D351                 mov     edi, eax
.text:0040D353                 mov     [esp], edx
.text:0040D356                 call    sub_40EC40
.text:0040D35B                 mov     [esp+4], eax
.text:0040D35F                 mov     esi, eax
.text:0040D361                 mov     [esp], edi
.text:0040D364                 call    _stricmp_0
.text:0040D369                 mov     [esp], edi
.text:0040D36C                 test    eax, eax
.text:0040D36E                 setz    bl
.text:0040D371                 call    free
.text:0040D376                 mov     [esp], esi
.text:0040D379                 call    free
.text:0040D37E                 mov     eax, ebx
.text:0040D380                 mov     esi, [esp+14h]
.text:0040D384                 mov     ebx, [esp+10h]
.text:0040D388                 mov     edi, [esp+18h]
.text:0040D38C                 add     esp, 1Ch
.text:0040D38F                 retn
.text:0040D390 ; ---------------------------------------------------------------------------
.text:0040D390                 xor     eax, eax
.text:0040D392                 retn
.text:0040D392 ; ---------------------------------------------------------------------------
.text:0040D393 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040D3C7↓o
.text:0040D3A0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040D3D6↓o
.text:0040D3B0 ; ---------------------------------------------------------------------------
.text:0040D3B0                 sub     esp, 1Ch
.text:0040D3B3                 mov     [esp+10h], ebx
.text:0040D3B7                 mov     ebx, [esp+20h]
.text:0040D3BB                 mov     [esp+18h], edi
.text:0040D3BF                 mov     edi, [esp+24h]
.text:0040D3C3                 mov     [esp+14h], esi
.text:0040D3C7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040D3CE                 call    GetModuleHandleA
.text:0040D3D3                 sub     esp, 4
.text:0040D3D6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040D3DE                 mov     [esp], eax
.text:0040D3E1                 call    GetProcAddress
.text:0040D3E6                 sub     esp, 8
.text:0040D3E9                 test    eax, eax
.text:0040D3EB                 jz      short loc_40D403
.text:0040D3ED                 mov     dword ptr [esp+8], 104h
.text:0040D3F5                 mov     [esp+4], ebx
.text:0040D3F9                 mov     [esp], edi
.text:0040D3FC                 call    eax
.text:0040D3FE                 sub     esp, 0Ch
.text:0040D401                 mov     esi, eax
.text:0040D403
.text:0040D403 loc_40D403:                             ; CODE XREF: .text:0040D3EB↑j
.text:0040D403                 test    esi, esi
.text:0040D405                 jz      short loc_40D420
.text:0040D407
.text:0040D407 loc_40D407:                             ; CODE XREF: .text:0040D43B↓j
.text:0040D407                 mov     eax, ebx
.text:0040D409                 mov     esi, [esp+14h]
.text:0040D40D                 mov     ebx, [esp+10h]
.text:0040D411                 mov     edi, [esp+18h]
.text:0040D415                 add     esp, 1Ch
.text:0040D418                 retn
.text:0040D418 ; ---------------------------------------------------------------------------
.text:0040D419                 align 10h
.text:0040D420
.text:0040D420 loc_40D420:                             ; CODE XREF: .text:0040D405↑j
.text:0040D420                 call    sub_40F6D0
.text:0040D425                 mov     [esp], ebx
.text:0040D428                 mov     [esp+4], edi
.text:0040D42C                 call    strcpy
.text:0040D431                 mov     [esp], ebx
.text:0040D434                 call    _win32_longpath
.text:0040D439                 mov     ebx, eax
.text:0040D43B                 jmp     short loc_40D407
.text:0040D43B ; ---------------------------------------------------------------------------
.text:0040D43D                 align 10h
.text:0040D440                 sub     esp, 1Ch
.text:0040D443                 mov     [esp+18h], edi
.text:0040D447                 mov     edi, [esp+20h]
.text:0040D44B                 mov     [esp+10h], ebx
.text:0040D44F                 mov     [esp+14h], esi
.text:0040D453                 mov     dword ptr [esp+8], 0
.text:0040D45B                 mov     dword ptr [esp+4], 0
.text:0040D463                 mov     [esp], edi
.text:0040D466                 call    GetShortPathNameA
.text:0040D46B                 sub     esp, 0Ch
.text:0040D46E                 mov     ebx, eax
.text:0040D470                 test    eax, eax
.text:0040D472                 jz      short loc_40D4C0
.text:0040D474                 lea     edx, [eax+1]
.text:0040D477                 mov     [esp], edx
.text:0040D47A                 call    malloc
.text:0040D47F                 test    eax, eax
.text:0040D481                 mov     esi, eax
.text:0040D483                 jz      short loc_40D4C0
.text:0040D485                 mov     [esp+8], ebx
.text:0040D489                 mov     [esp+4], eax
.text:0040D48D                 mov     [esp], edi
.text:0040D490                 call    GetShortPathNameA
.text:0040D495                 sub     esp, 0Ch
.text:0040D498                 mov     edx, esi
.text:0040D49A                 test    eax, eax
.text:0040D49C                 jz      short loc_40D4B2
.text:0040D49E                 mov     esi, esi
.text:0040D4A0
.text:0040D4A0 loc_40D4A0:                             ; CODE XREF: .text:0040D4D0↓j
.text:0040D4A0                 mov     ebx, [esp+10h]
.text:0040D4A4                 mov     eax, edx
.text:0040D4A6                 mov     esi, [esp+14h]
.text:0040D4AA                 mov     edi, [esp+18h]
.text:0040D4AE                 add     esp, 1Ch
.text:0040D4B1                 retn
.text:0040D4B2 ; ---------------------------------------------------------------------------
.text:0040D4B2
.text:0040D4B2 loc_40D4B2:                             ; CODE XREF: .text:0040D49C↑j
.text:0040D4B2                 mov     [esp], esi
.text:0040D4B5                 call    free
.text:0040D4BA                 lea     esi, [esi+0]
.text:0040D4C0
.text:0040D4C0 loc_40D4C0:                             ; CODE XREF: .text:0040D472↑j
.text:0040D4C0                                         ; .text:0040D483↑j
.text:0040D4C0                 call    sub_40EBF0
.text:0040D4C5                 mov     esi, eax
.text:0040D4C7                 call    _errno
.text:0040D4CC                 mov     [eax], esi
.text:0040D4CE                 mov     edx, edi
.text:0040D4D0                 jmp     short loc_40D4A0
.text:0040D4D0 ; ---------------------------------------------------------------------------
.text:0040D4D2                 align 10h
.text:0040D4E0 ; const char String[4]
.text:0040D4E0 String          db ' :/',0              ; DATA XREF: sub_40D4F0+FA↓o
.text:0040D4E4                 align 10h
.text:0040D4F0
.text:0040D4F0 ; =============== S U B R O U T I N E =======================================
.text:0040D4F0
.text:0040D4F0
.text:0040D4F0 ; int __cdecl sub_40D4F0(LPCSTR)
.text:0040D4F0 sub_40D4F0      proc near               ; CODE XREF: sub_40B940+E↑p
.text:0040D4F0                                         ; sub_40BE40+17↑p ...
.text:0040D4F0
.text:0040D4F0 Str             = dword ptr -1Ch
.text:0040D4F0 Val             = dword ptr -18h
.text:0040D4F0 Count           = dword ptr -14h
.text:0040D4F0 var_10          = dword ptr -10h
.text:0040D4F0 var_C           = dword ptr -0Ch
.text:0040D4F0 var_8           = dword ptr -8
.text:0040D4F0 var_4           = dword ptr -4
.text:0040D4F0 arg_0           = dword ptr  4
.text:0040D4F0
.text:0040D4F0                 sub     esp, 1Ch
.text:0040D4F3                 mov     edx, [esp+1Ch+arg_0]
.text:0040D4F7                 mov     [esp+1Ch+var_8], edi
.text:0040D4FB                 mov     [esp+1Ch+var_10], ebx
.text:0040D4FF                 mov     [esp+1Ch+var_C], esi
.text:0040D503                 mov     [esp+1Ch+var_4], ebp
.text:0040D507                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040D50A                 call    sub_40EC40
.text:0040D50F                 test    eax, eax
.text:0040D511                 mov     edi, eax
.text:0040D513                 jz      short loc_40D550
.text:0040D515                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D518                 call    strlen
.text:0040D51D                 cmp     eax, 2
.text:0040D520                 jbe     short loc_40D52C
.text:0040D522                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040D526                 jz      loc_40D5E0
.text:0040D52C
.text:0040D52C loc_40D52C:                             ; CODE XREF: sub_40D4F0+30↑j
.text:0040D52C                                         ; sub_40D4F0+F4↓j
.text:0040D52C                 test    edi, edi
.text:0040D52E                 jz      short loc_40D550
.text:0040D530                 mov     [esp+1Ch+Str], edi ; Str
.text:0040D533                 call    strlen
.text:0040D538                 cmp     eax, 4
.text:0040D53B                 mov     ebp, eax
.text:0040D53D                 jle     short loc_40D550
.text:0040D53F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040D542                 jz      short loc_40D570
.text:0040D544                 lea     esi, [esi+0]
.text:0040D54A                 lea     edi, [edi+0]
.text:0040D550
.text:0040D550 loc_40D550:                             ; CODE XREF: sub_40D4F0+23↑j
.text:0040D550                                         ; sub_40D4F0+3E↑j ...
.text:0040D550                 xor     esi, esi
.text:0040D552
.text:0040D552 loc_40D552:                             ; CODE XREF: sub_40D4F0+CD↓j
.text:0040D552                                         ; sub_40D4F0+115↓j
.text:0040D552                 mov     [esp+1Ch+Str], edi ; Block
.text:0040D555                 call    free
.text:0040D55A                 mov     eax, esi
.text:0040D55C                 mov     ebx, [esp+1Ch+var_10]
.text:0040D560                 mov     esi, [esp+1Ch+var_C]
.text:0040D564                 mov     edi, [esp+1Ch+var_8]
.text:0040D568                 mov     ebp, [esp+1Ch+var_4]
.text:0040D56C                 add     esp, 1Ch
.text:0040D56F                 retn
.text:0040D570 ; ---------------------------------------------------------------------------
.text:0040D570
.text:0040D570 loc_40D570:                             ; CODE XREF: sub_40D4F0+52↑j
.text:0040D570                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040D574                 jnz     short loc_40D550
.text:0040D576                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D57E                 lea     ecx, [edi+2]
.text:0040D581                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040D584                 call    strchr
.text:0040D589                 test    eax, eax
.text:0040D58B                 jnz     short loc_40D5BF
.text:0040D58D
.text:0040D58D loc_40D58D:                             ; CODE XREF: sub_40D4F0+E2↓j
.text:0040D58D                 inc     ebp
.text:0040D58E
.text:0040D58E loc_40D58E:                             ; CODE XREF: sub_40D4F0+E9↓j
.text:0040D58E                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040D596                 lea     ebx, [ebp+1]
.text:0040D599                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040D59C                 call    calloc
.text:0040D5A1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D5A4                 mov     esi, eax
.text:0040D5A6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040D5AA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040D5AE                 call    strncpy
.text:0040D5B3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040D5B8                 mov     byte ptr [ebp+esi+0], 0
.text:0040D5BD                 jmp     short loc_40D552
.text:0040D5BF ; ---------------------------------------------------------------------------
.text:0040D5BF
.text:0040D5BF loc_40D5BF:                             ; CODE XREF: sub_40D4F0+9B↑j
.text:0040D5BF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D5C7                 inc     eax
.text:0040D5C8                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D5CB                 call    strchr
.text:0040D5D0                 test    eax, eax
.text:0040D5D2                 jz      short loc_40D58D
.text:0040D5D4                 sub     eax, edi
.text:0040D5D6                 lea     ebp, [eax+1]
.text:0040D5D9                 jmp     short loc_40D58E
.text:0040D5D9 ; ---------------------------------------------------------------------------
.text:0040D5DB                 align 10h
.text:0040D5E0
.text:0040D5E0 loc_40D5E0:                             ; CODE XREF: sub_40D4F0+36↑j
.text:0040D5E0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040D5E4                 jnz     loc_40D52C
.text:0040D5EA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040D5F1                 call    _strdup
.text:0040D5F6                 movsx   edx, byte ptr [edi]
.text:0040D5F9                 mov     esi, eax
.text:0040D5FB                 mov     [esp+1Ch+Str], edx ; C
.text:0040D5FE                 call    toupper
.text:0040D603                 mov     [esi], al
.text:0040D605                 jmp     loc_40D552
.text:0040D605 sub_40D4F0      endp
.text:0040D605
.text:0040D605 ; ---------------------------------------------------------------------------
.text:0040D60A                 align 10h
.text:0040D610
.text:0040D610 ; =============== S U B R O U T I N E =======================================
.text:0040D610
.text:0040D610
.text:0040D610 sub_40D610      proc near               ; CODE XREF: .text:0040D764↓p
.text:0040D610                                         ; .text:0040D848↓p
.text:0040D610
.text:0040D610 Str             = dword ptr -2Ch
.text:0040D610 Val             = dword ptr -28h
.text:0040D610 var_18          = dword ptr -18h
.text:0040D610 var_11          = byte ptr -11h
.text:0040D610 arg_0           = dword ptr  4
.text:0040D610
.text:0040D610                 push    ebp
.text:0040D611                 push    edi
.text:0040D612                 push    esi
.text:0040D613                 push    ebx
.text:0040D614                 sub     esp, 1Ch
.text:0040D617                 mov     edx, [esp+2Ch+arg_0]
.text:0040D61B                 cmp     edx, ds:dword_416240
.text:0040D621                 mov     [esp+2Ch+var_11], 0
.text:0040D626                 jz      loc_40D724
.text:0040D62C                 mov     ebx, ds:dword_416230
.text:0040D632                 test    ebx, ebx
.text:0040D634                 jz      short loc_40D6A2
.text:0040D636
.text:0040D636 loc_40D636:                             ; CODE XREF: sub_40D610+10F↓j
.text:0040D636                 mov     ebx, [esp+2Ch+arg_0]
.text:0040D63A                 xor     edi, edi
.text:0040D63C                 xor     esi, esi
.text:0040D63E                 mov     ebp, offset dword_416258
.text:0040D643                 lea     esi, [esi+0]
.text:0040D649                 lea     edi, [edi+0]
.text:0040D650
.text:0040D650 loc_40D650:                             ; CODE XREF: sub_40D610+60↓j
.text:0040D650                 mov     edx, [ebp+4]
.text:0040D653                 mov     ecx, edi
.text:0040D655                 mov     eax, [ebp+0]
.text:0040D658                 shl     ecx, 4
.text:0040D65B                 mov     [esp+2Ch+var_18], ecx
.text:0040D65F                 mov     ecx, edx
.text:0040D661                 xor     eax, ebx
.text:0040D663                 xor     ecx, esi
.text:0040D665                 or      ecx, eax
.text:0040D667                 jz      short loc_40D691
.text:0040D669                 inc     edi
.text:0040D66A                 add     ebp, 10h
.text:0040D66D                 cmp     edi, 20h ; ' '
.text:0040D670                 jle     short loc_40D650
.text:0040D672
.text:0040D672 loc_40D672:                             ; CODE XREF: sub_40D610+90↓j
.text:0040D672                 movzx   ebx, [esp+2Ch+var_11]
.text:0040D677                 mov     eax, [esp+2Ch+arg_0]
.text:0040D67B                 mov     byte_415090, bl
.text:0040D681                 mov     ds:dword_416240, eax
.text:0040D686                 movsx   eax, bl
.text:0040D689
.text:0040D689 loc_40D689:                             ; CODE XREF: sub_40D610+11B↓j
.text:0040D689                 add     esp, 1Ch
.text:0040D68C                 pop     ebx
.text:0040D68D                 pop     esi
.text:0040D68E                 pop     edi
.text:0040D68F                 pop     ebp
.text:0040D690                 retn
.text:0040D691 ; ---------------------------------------------------------------------------
.text:0040D691
.text:0040D691 loc_40D691:                             ; CODE XREF: sub_40D610+57↑j
.text:0040D691                 mov     edx, [esp+2Ch+var_18]
.text:0040D695                 movzx   eax, byte ptr ds:dword_416250[edx]
.text:0040D69C                 mov     [esp+2Ch+var_11], al
.text:0040D6A0                 jmp     short loc_40D672
.text:0040D6A2 ; ---------------------------------------------------------------------------
.text:0040D6A2
.text:0040D6A2 loc_40D6A2:                             ; CODE XREF: sub_40D610+24↑j
.text:0040D6A2                 mov     [esp+2Ch+Str], 0
.text:0040D6A9                 call    sub_4104B0
.text:0040D6AE                 test    eax, eax
.text:0040D6B0                 mov     ebx, eax
.text:0040D6B2                 jz      short loc_40D70C
.text:0040D6B4                 movzx   ecx, byte ptr [eax]
.text:0040D6B7                 mov     esi, 0FFFFFFF0h
.text:0040D6BC                 test    cl, cl
.text:0040D6BE                 jz      short loc_40D70C
.text:0040D6C0
.text:0040D6C0 loc_40D6C0:                             ; CODE XREF: sub_40D610+FA↓j
.text:0040D6C0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040D6C3                 movsx   ebp, cl
.text:0040D6C6                 add     esi, 10h
.text:0040D6C9                 mov     ds:dword_416250[esi], ebp
.text:0040D6CF                 mov     edi, ebp
.text:0040D6D1                 sar     edi, 1Fh
.text:0040D6D4                 mov     ds:dword_416254[esi], edi
.text:0040D6DA                 call    sub_40BE40
.text:0040D6DF                 mov     ds:dword_416258[esi], eax
.text:0040D6E5                 xor     ecx, ecx
.text:0040D6E7                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040D6EA                 mov     ds:dword_41625C[esi], ecx
.text:0040D6F0                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040D6F8                 call    strchr
.text:0040D6FD                 mov     ebx, eax
.text:0040D6FF                 inc     ebx
.text:0040D700                 jz      short loc_40D70C
.text:0040D702                 movzx   edx, byte ptr [eax+1]
.text:0040D706                 test    dl, dl
.text:0040D708                 mov     cl, dl
.text:0040D70A                 jnz     short loc_40D6C0
.text:0040D70C
.text:0040D70C loc_40D70C:                             ; CODE XREF: sub_40D610+A2↑j
.text:0040D70C                                         ; sub_40D610+AE↑j ...
.text:0040D70C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040D70F                 mov     esi, 1
.text:0040D714                 mov     ds:dword_416230, esi
.text:0040D71A                 call    free
.text:0040D71F                 jmp     loc_40D636
.text:0040D724 ; ---------------------------------------------------------------------------
.text:0040D724
.text:0040D724 loc_40D724:                             ; CODE XREF: sub_40D610+16↑j
.text:0040D724                 movsx   eax, byte_415090
.text:0040D72B                 jmp     loc_40D689
.text:0040D72B sub_40D610      endp
.text:0040D72B
.text:0040D72B ; ---------------------------------------------------------------------------
.text:0040D730 dword_40D730    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040D730                                         ; DATA XREF: .text:0040D753↓o
.text:0040D730                                         ; .text:0040D833↓o
.text:0040D740 ; ---------------------------------------------------------------------------
.text:0040D740                 sub     esp, 1Ch
.text:0040D743                 mov     [esp+14h], esi
.text:0040D747                 mov     esi, [esp+20h]
.text:0040D74B                 mov     [esp+18h], edi
.text:0040D74F                 mov     [esp+10h], ebx
.text:0040D753                 mov     dword ptr [esp], offset dword_40D730
.text:0040D75A                 call    _strdup
.text:0040D75F                 mov     [esp], esi
.text:0040D762                 mov     edi, eax
.text:0040D764                 call    sub_40D610
.text:0040D769                 mov     [edi], al
.text:0040D76B                 test    al, al
.text:0040D76D                 jz      short loc_40D781
.text:0040D76F                 mov     eax, edi
.text:0040D771                 mov     ebx, [esp+10h]
.text:0040D775                 mov     esi, [esp+14h]
.text:0040D779                 mov     edi, [esp+18h]
.text:0040D77D                 add     esp, 1Ch
.text:0040D780                 retn
.text:0040D781 ; ---------------------------------------------------------------------------
.text:0040D781
.text:0040D781 loc_40D781:                             ; CODE XREF: .text:0040D76D↑j
.text:0040D781                 mov     [esp], edi
.text:0040D784                 call    free
.text:0040D789                 mov     dword ptr [esp+4], 0
.text:0040D791                 mov     dword ptr [esp], 0
.text:0040D798                 call    GetCurrentDirectoryA
.text:0040D79D                 sub     esp, 8
.text:0040D7A0                 lea     esi, [eax+1]
.text:0040D7A3                 mov     [esp], esi
.text:0040D7A6                 call    malloc
.text:0040D7AB                 mov     [esp+4], eax
.text:0040D7AF                 mov     edi, eax
.text:0040D7B1                 mov     [esp], esi
.text:0040D7B4                 call    GetCurrentDirectoryA
.text:0040D7B9                 sub     esp, 8
.text:0040D7BC                 test    eax, eax
.text:0040D7BE                 jnz     short loc_40D7E0
.text:0040D7C0                 mov     dword ptr [esp+20h], 40D734h
.text:0040D7C8                 mov     ebx, [esp+10h]
.text:0040D7CC                 mov     esi, [esp+14h]
.text:0040D7D0                 mov     edi, [esp+18h]
.text:0040D7D4                 add     esp, 1Ch
.text:0040D7D7                 jmp     _strdup
.text:0040D7D7 ; ---------------------------------------------------------------------------
.text:0040D7DC                 align 10h
.text:0040D7E0
.text:0040D7E0 loc_40D7E0:                             ; CODE XREF: .text:0040D7BE↑j
.text:0040D7E0                 mov     [esp+20h], edi
.text:0040D7E4                 mov     ebx, [esp+10h]
.text:0040D7E8                 mov     esi, [esp+14h]
.text:0040D7EC                 mov     edi, [esp+18h]
.text:0040D7F0                 add     esp, 1Ch
.text:0040D7F3                 jmp     sub_40D4F0
.text:0040D7F3 ; ---------------------------------------------------------------------------
.text:0040D7F8                 align 10h
.text:0040D800                 sub     esp, 7Ch
.text:0040D803                 lea     edx, [esp+10h]
.text:0040D807                 mov     [esp+8], edx
.text:0040D80B                 mov     edx, [esp+80h]
.text:0040D812                 mov     [esp+70h], ebx
.text:0040D816                 mov     [esp+74h], esi
.text:0040D81A                 mov     [esp+4], edx
.text:0040D81E                 mov     [esp+78h], edi
.text:0040D822                 mov     dword ptr [esp], 0
.text:0040D829                 call    sub_40B090
.text:0040D82E                 xor     edx, edx
.text:0040D830                 inc     eax
.text:0040D831                 jz      short loc_40D855
.text:0040D833                 mov     dword ptr [esp], offset dword_40D730
.text:0040D83A                 mov     esi, [esp+20h]
.text:0040D83E                 call    _strdup
.text:0040D843                 mov     edi, eax
.text:0040D845                 mov     [esp], esi
.text:0040D848                 call    sub_40D610
.text:0040D84D                 mov     [edi], al
.text:0040D84F                 test    al, al
.text:0040D851                 mov     edx, edi
.text:0040D853                 jz      short loc_40D867
.text:0040D855
.text:0040D855 loc_40D855:                             ; CODE XREF: .text:0040D831↑j
.text:0040D855                                         ; .text:0040D8B4↓j
.text:0040D855                 mov     ebx, [esp+70h]
.text:0040D859                 mov     eax, edx
.text:0040D85B                 mov     esi, [esp+74h]
.text:0040D85F                 mov     edi, [esp+78h]
.text:0040D863                 add     esp, 7Ch
.text:0040D866                 retn
.text:0040D867 ; ---------------------------------------------------------------------------
.text:0040D867
.text:0040D867 loc_40D867:                             ; CODE XREF: .text:0040D853↑j
.text:0040D867                 mov     [esp], edi
.text:0040D86A                 call    free
.text:0040D86F                 mov     dword ptr [esp+4], 0
.text:0040D877                 mov     dword ptr [esp], 0
.text:0040D87E                 call    GetCurrentDirectoryA
.text:0040D883                 sub     esp, 8
.text:0040D886                 lea     esi, [eax+1]
.text:0040D889                 mov     [esp], esi
.text:0040D88C                 call    malloc
.text:0040D891                 mov     [esp+4], eax
.text:0040D895                 mov     edi, eax
.text:0040D897                 mov     [esp], esi
.text:0040D89A                 call    GetCurrentDirectoryA
.text:0040D89F                 sub     esp, 8
.text:0040D8A2                 test    eax, eax
.text:0040D8A4                 jnz     short loc_40D8B6
.text:0040D8A6                 mov     dword ptr [esp], 40D734h
.text:0040D8AD                 call    _strdup
.text:0040D8B2
.text:0040D8B2 loc_40D8B2:                             ; CODE XREF: .text:0040D8BE↓j
.text:0040D8B2                 mov     edx, eax
.text:0040D8B4                 jmp     short loc_40D855
.text:0040D8B6 ; ---------------------------------------------------------------------------
.text:0040D8B6
.text:0040D8B6 loc_40D8B6:                             ; CODE XREF: .text:0040D8A4↑j
.text:0040D8B6                 mov     [esp], edi
.text:0040D8B9                 call    sub_40D4F0
.text:0040D8BE                 jmp     short loc_40D8B2
.text:0040D8C0
.text:0040D8C0 ; =============== S U B R O U T I N E =======================================
.text:0040D8C0
.text:0040D8C0
.text:0040D8C0 ; int __cdecl sub_40D8C0(LPCSTR)
.text:0040D8C0 sub_40D8C0      proc near               ; CODE XREF: sub_40B090+38F↑p
.text:0040D8C0
.text:0040D8C0 String1         = dword ptr -1Ch
.text:0040D8C0 String2         = dword ptr -18h
.text:0040D8C0 var_C           = dword ptr -0Ch
.text:0040D8C0 var_8           = dword ptr -8
.text:0040D8C0 var_4           = dword ptr -4
.text:0040D8C0 arg_0           = dword ptr  4
.text:0040D8C0
.text:0040D8C0                 sub     esp, 1Ch
.text:0040D8C3                 mov     [esp+1Ch+var_4], edi
.text:0040D8C7                 mov     edi, [esp+1Ch+arg_0]
.text:0040D8CB                 mov     [esp+1Ch+var_C], ebx
.text:0040D8CF                 mov     [esp+1Ch+var_8], esi
.text:0040D8D3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040D8D6                 call    sub_40EC40
.text:0040D8DB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040D8DE                 mov     esi, eax
.text:0040D8E0                 call    sub_40D4F0
.text:0040D8E5                 mov     [esp+1Ch+String2], eax ; String2
.text:0040D8E9                 mov     ebx, eax
.text:0040D8EB                 mov     [esp+1Ch+String1], esi ; String1
.text:0040D8EE                 call    _stricmp
.text:0040D8F3                 test    eax, eax
.text:0040D8F5                 setz    dl
.text:0040D8F8                 test    esi, esi
.text:0040D8FA                 movzx   edi, dl
.text:0040D8FD                 jz      short loc_40D907
.text:0040D8FF                 mov     [esp+1Ch+String1], esi ; Block
.text:0040D902                 call    free
.text:0040D907
.text:0040D907 loc_40D907:                             ; CODE XREF: sub_40D8C0+3D↑j
.text:0040D907                 test    ebx, ebx
.text:0040D909                 jz      short loc_40D913
.text:0040D90B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040D90E                 call    free
.text:0040D913
.text:0040D913 loc_40D913:                             ; CODE XREF: sub_40D8C0+49↑j
.text:0040D913                 mov     eax, edi
.text:0040D915                 mov     ebx, [esp+1Ch+var_C]
.text:0040D919                 mov     esi, [esp+1Ch+var_8]
.text:0040D91D                 mov     edi, [esp+1Ch+var_4]
.text:0040D921                 add     esp, 1Ch
.text:0040D924                 retn
.text:0040D924 sub_40D8C0      endp
.text:0040D924
.text:0040D924 ; ---------------------------------------------------------------------------
.text:0040D925                 align 10h
.text:0040D930 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040D981↓o
.text:0040D939 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040D939                                         ; DATA XREF: .text:0040D992↓o
.text:0040D94D ; const CHAR FileName[]
.text:0040D94D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040DADC↓o
.text:0040D94D                                         ; sub_40DF10+17C↓o
.text:0040D958 ; ---------------------------------------------------------------------------
.text:0040D958
.text:0040D958 loc_40D958:                             ; DATA XREF: .text:0040DBF2↓o
.text:0040D958                 dec     esi
.text:0040D959                 push    esp
.text:0040D95A                 inc     esi
.text:0040D95B                 push    ebx
.text:0040D95C                 add     [esi+41h], al
.text:0040D95F                 push    esp
.text:0040D960                 xor     esi, [edx]
.text:0040D962                 add     [esi+41h], al
.text:0040D965                 push    esp
.text:0040D966                 add     [ebx+44h], al
.text:0040D969                 inc     esi
.text:0040D96A                 push    ebx
.text:0040D96B
.text:0040D96B loc_40D96B:                             ; CODE XREF: sub_40DF10+101↓p
.text:0040D96B                 add     [ebp+55002674h], cl
.text:0040D971                 push    edi
.text:0040D972                 push    esi
.text:0040D973                 push    ebx
.text:0040D974                 sub     esp, 8BCh
.text:0040D97A                 mov     ebp, [esp+8D0h]
.text:0040D981                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040D988                 call    LoadLibraryA
.text:0040D98D                 sub     esp, 4
.text:0040D990                 mov     edi, eax
.text:0040D992                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040D99A                 mov     [esp], eax
.text:0040D99D                 call    GetProcAddress
.text:0040D9A2                 sub     esp, 8
.text:0040D9A5                 mov     esi, eax
.text:0040D9A7                 test    ebp, ebp
.text:0040D9A9                 mov     dword ptr [esp+20h], 0
.text:0040D9B1                 jz      loc_40DEF1
.text:0040D9B7                 mov     [esp], ebp
.text:0040D9BA                 call    sub_40D0C0
.text:0040D9BF                 mov     [esp], eax
.text:0040D9C2                 mov     ebp, eax
.text:0040D9C4                 call    strlen
.text:0040D9C9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040D9CE                 mov     ebx, eax
.text:0040D9D0                 jz      short loc_40D9EC
.text:0040D9D2                 mov     [esp], ebp
.text:0040D9D5                 lea     edx, [eax+1]
.text:0040D9D8                 mov     [esp+4], edx
.text:0040D9DC                 call    realloc
.text:0040D9E1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040D9E5                 mov     ebp, eax
.text:0040D9E7                 mov     byte ptr [ebx+eax+1], 0
.text:0040D9EC
.text:0040D9EC loc_40D9EC:                             ; CODE XREF: .text:0040D9D0↑j
.text:0040D9EC                 mov     dword ptr [esp+1Ch], 400h
.text:0040D9F4                 lea     edx, [esp+0B0h]
.text:0040D9FB                 lea     ebx, [esp+5Ch]
.text:0040D9FF                 mov     [esp+18h], edx
.text:0040DA03                 lea     ecx, [esp+58h]
.text:0040DA07                 lea     edx, [esp+54h]
.text:0040DA0B                 mov     [esp+14h], ebx
.text:0040DA0F                 lea     eax, [esp+4B0h]
.text:0040DA16                 mov     [esp+10h], ecx
.text:0040DA1A                 mov     [esp+0Ch], edx
.text:0040DA1E                 mov     dword ptr [esp+8], 400h
.text:0040DA26                 mov     [esp+4], eax
.text:0040DA2A                 mov     [esp], ebp
.text:0040DA2D                 call    GetVolumeInformationA
.text:0040DA32                 sub     esp, 20h
.text:0040DA35                 test    eax, eax
.text:0040DA37                 jz      loc_40DECE
.text:0040DA3D                 test    esi, esi
.text:0040DA3F                 jz      short loc_40DA65
.text:0040DA41                 mov     [esp], ebp
.text:0040DA44                 lea     edx, [esp+48h]
.text:0040DA48                 lea     ebx, [esp+40h]
.text:0040DA4C                 mov     [esp+0Ch], edx
.text:0040DA50                 lea     ecx, [esp+38h]
.text:0040DA54                 mov     [esp+8], ebx
.text:0040DA58                 mov     [esp+4], ecx
.text:0040DA5C                 call    esi
.text:0040DA5E                 sub     esp, 10h
.text:0040DA61                 mov     [esp+20h], eax
.text:0040DA65
.text:0040DA65 loc_40DA65:                             ; CODE XREF: .text:0040DA3F↑j
.text:0040DA65                 test    edi, edi
.text:0040DA67                 jz      short loc_40DA74
.text:0040DA69                 mov     [esp], edi
.text:0040DA6C                 call    FreeLibrary
.text:0040DA71                 sub     esp, 4
.text:0040DA74
.text:0040DA74 loc_40DA74:                             ; CODE XREF: .text:0040DA67↑j
.text:0040DA74                 call    sub_40F6D0
.text:0040DA79                 test    eax, eax
.text:0040DA7B                 lea     esi, [esp+28h]
.text:0040DA7F                 jz      loc_40DEB0
.text:0040DA85                 call    sub_40F6D0
.text:0040DA8A                 test    eax, eax
.text:0040DA8C                 jz      short loc_40DA9C
.text:0040DA8E                 call    sub_40F620
.text:0040DA93                 cmp     eax, 0Bh
.text:0040DA96                 jle     loc_40DE84
.text:0040DA9C
.text:0040DA9C loc_40DA9C:                             ; CODE XREF: .text:0040DA8C↑j
.text:0040DA9C                 cld
.text:0040DA9D                 xor     eax, eax
.text:0040DA9F                 lea     ebx, [esp+60h]
.text:0040DAA3                 mov     ecx, 7
.text:0040DAA8                 mov     edi, ebx
.text:0040DAAA                 rep stosd
.text:0040DAAC                 mov     dword ptr [esp+18h], 0
.text:0040DAB4                 mov     dword ptr [esp+14h], 4000000h
.text:0040DABC                 mov     dword ptr [esp+10h], 0
.text:0040DAC4                 mov     dword ptr [esp+0Ch], 0
.text:0040DACC                 mov     dword ptr [esp+8], 0
.text:0040DAD4                 mov     dword ptr [esp+4], 0
.text:0040DADC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040DAE3                 call    CreateFileA
.text:0040DAE8                 sub     esp, 1Ch
.text:0040DAEB                 mov     edi, eax
.text:0040DAED                 cmp     eax, 0FFFFFFFFh
.text:0040DAF0                 jz      short loc_40DB70
.text:0040DAF2                 mov     [esp+10h], ebx
.text:0040DAF6                 lea     edx, [esp+80h]
.text:0040DAFD                 lea     ecx, [esp+24h]
.text:0040DB01                 mov     [esp+70h], edx
.text:0040DB05                 mov     [esp+18h], ecx
.text:0040DB09                 mov     [esp+8], ebx
.text:0040DB0D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040DB15                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040DB1D                 mov     [esp+64h], ebp
.text:0040DB21                 mov     dword ptr [esp+78h], 1
.text:0040DB29                 mov     dword ptr [esp+1Ch], 0
.text:0040DB31                 mov     dword ptr [esp+14h], 1Ch
.text:0040DB39                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040DB41                 mov     dword ptr [esp+4], 6
.text:0040DB49                 mov     [esp], eax
.text:0040DB4C                 call    DeviceIoControl
.text:0040DB51                 sub     esp, 20h
.text:0040DB54                 mov     ebx, eax
.text:0040DB56                 mov     [esp], edi
.text:0040DB59                 call    CloseHandle
.text:0040DB5E                 sub     esp, 4
.text:0040DB61                 test    ebx, ebx
.text:0040DB63                 jz      short loc_40DB70
.text:0040DB65                 test    byte ptr [esp+78h], 1
.text:0040DB6A                 jz      loc_40DE50
.text:0040DB70
.text:0040DB70 loc_40DB70:                             ; CODE XREF: .text:0040DAF0↑j
.text:0040DB70                                         ; .text:0040DB63↑j
.text:0040DB70                 call    sub_40EBF0
.text:0040DB75                 mov     edi, eax
.text:0040DB77                 call    _errno
.text:0040DB7C                 mov     [eax], edi
.text:0040DB7E                 xor     eax, eax
.text:0040DB80
.text:0040DB80 loc_40DB80:                             ; CODE XREF: .text:0040DE7F↓j
.text:0040DB80                                         ; .text:0040DEAB↓j
.text:0040DB80                 test    eax, eax
.text:0040DB82                 jnz     short loc_40DBA4
.text:0040DB84                 mov     dword ptr [esp+34h], 1
.text:0040DB8C                 mov     dword ptr [esp+30h], 200h
.text:0040DB94                 mov     dword ptr [esp+2Ch], 0
.text:0040DB9C                 mov     dword ptr [esp+28h], 0
.text:0040DBA4
.text:0040DBA4 loc_40DBA4:                             ; CODE XREF: .text:0040DB82↑j
.text:0040DBA4                 mov     edx, [esp+30h]
.text:0040DBA8                 mov     edi, [esp+34h]
.text:0040DBAC                 mov     ecx, [esp+20h]
.text:0040DBB0                 imul    edi, edx
.text:0040DBB3                 test    ecx, ecx
.text:0040DBB5                 jnz     short loc_40DBDD
.text:0040DBB7                 mov     eax, [esp+28h]
.text:0040DBBB                 mul     edi
.text:0040DBBD                 mov     esi, eax
.text:0040DBBF                 mov     eax, [esp+2Ch]
.text:0040DBC3                 mov     [esp+44h], edx
.text:0040DBC7                 mov     [esp+40h], esi
.text:0040DBCB                 mul     edi
.text:0040DBCD                 mov     [esp+48h], eax
.text:0040DBD1                 mov     [esp+4Ch], edx
.text:0040DBD5                 mov     [esp+38h], eax
.text:0040DBD9                 mov     [esp+3Ch], edx
.text:0040DBDD
.text:0040DBDD loc_40DBDD:                             ; CODE XREF: .text:0040DBB5↑j
.text:0040DBDD                 mov     ebx, [esp+5Ch]
.text:0040DBE1                 lea     edx, [esp+0B0h]
.text:0040DBE8                 mov     ecx, [esp+8D4h]
.text:0040DBEF                 mov     [ecx+48h], ebx
.text:0040DBF2                 mov     dword ptr [esp+4], offset loc_40D958
.text:0040DBFA                 mov     [esp], edx
.text:0040DBFD                 call    _stricmp
.text:0040DC02                 test    eax, eax
.text:0040DC04                 jnz     loc_40DDC0
.text:0040DC0A                 mov     esi, [esp+8D4h]
.text:0040DC11                 mov     dword ptr [esi], 5346544Eh
.text:0040DC17
.text:0040DC17 loc_40DC17:                             ; CODE XREF: .text:0040DDE8↓j
.text:0040DC17                                         ; .text:0040DE15↓j ...
.text:0040DC17                 mov     ebx, [esp+30h]
.text:0040DC1B                 mov     esi, [esp+8D4h]
.text:0040DC22                 mov     [esi+4], ebx
.text:0040DC25                 mov     [esi+8], ebx
.text:0040DC28                 mov     ebx, [esi+8]
.text:0040DC2B                 mov     [esi+0Ch], edi
.text:0040DC2E                 mov     ecx, [esp+44h]
.text:0040DC32                 xor     esi, esi
.text:0040DC34                 mov     [esp+8], ebx
.text:0040DC38                 mov     edx, [esp+40h]
.text:0040DC3C                 mov     [esp+0Ch], esi
.text:0040DC40                 mov     [esp+4], ecx
.text:0040DC44                 mov     [esp], edx
.text:0040DC47                 call    sub_412C30
.text:0040DC4C                 mov     ecx, [esp+8D4h]
.text:0040DC53                 mov     [ecx+10h], eax
.text:0040DC56                 mov     [ecx+14h], edx
.text:0040DC59                 mov     ecx, [esp+4Ch]
.text:0040DC5D                 mov     [esp+8], ebx
.text:0040DC61                 mov     edx, [esp+48h]
.text:0040DC65                 mov     [esp+0Ch], esi
.text:0040DC69                 mov     [esp+4], ecx
.text:0040DC6D                 mov     [esp], edx
.text:0040DC70                 call    sub_412C30
.text:0040DC75                 mov     ecx, [esp+8D4h]
.text:0040DC7C                 mov     [ecx+18h], eax
.text:0040DC7F                 mov     [ecx+1Ch], edx
.text:0040DC82                 mov     ecx, [esp+38h]
.text:0040DC86                 mov     [esp+8], ebx
.text:0040DC8A                 mov     ebx, [esp+3Ch]
.text:0040DC8E                 mov     [esp+0Ch], esi
.text:0040DC92                 mov     [esp], ecx
.text:0040DC95                 mov     [esp+4], ebx
.text:0040DC99                 call    sub_412C30
.text:0040DC9E                 mov     esi, [esp+8D4h]
.text:0040DCA5                 mov     [esi+20h], eax
.text:0040DCA8                 mov     [esi+24h], edx
.text:0040DCAB                 mov     ecx, [esp+44h]
.text:0040DCAF                 mov     esi, edi
.text:0040DCB1                 mov     [esp+8], esi
.text:0040DCB5                 mov     edx, [esp+40h]
.text:0040DCB9                 xor     edi, edi
.text:0040DCBB                 mov     [esp+0Ch], edi
.text:0040DCBF                 mov     [esp+4], ecx
.text:0040DCC3                 mov     [esp], edx
.text:0040DCC6                 call    sub_412C30
.text:0040DCCB                 mov     ebx, [esp+8D4h]
.text:0040DCD2                 mov     [ebx+28h], eax
.text:0040DCD5                 mov     [ebx+2Ch], edx
.text:0040DCD8                 mov     ecx, [esp+4Ch]
.text:0040DCDC                 mov     [esp+8], esi
.text:0040DCE0                 mov     edx, [esp+48h]
.text:0040DCE4                 mov     [esp+0Ch], edi
.text:0040DCE8                 mov     [esp+4], ecx
.text:0040DCEC                 mov     [esp], edx
.text:0040DCEF                 call    sub_412C30
.text:0040DCF4                 mov     ebx, [esp+8D4h]
.text:0040DCFB                 mov     [ebx+30h], eax
.text:0040DCFE                 mov     [ebx+34h], edx
.text:0040DD01                 mov     ecx, [esp+3Ch]
.text:0040DD05                 mov     [esp+8], esi
.text:0040DD09                 mov     edx, [esp+38h]
.text:0040DD0D                 mov     [esp+0Ch], edi
.text:0040DD11                 mov     [esp+4], ecx
.text:0040DD15                 mov     [esp], edx
.text:0040DD18                 call    sub_412C30
.text:0040DD1D                 mov     edx, [esp+8D4h]
.text:0040DD24                 lea     ecx, [esp+0B0h]
.text:0040DD2B                 mov     [edx+38h], eax
.text:0040DD2E                 mov     esi, [esp+58h]
.text:0040DD32                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040DD39                 mov     [edx+110h], esi
.text:0040DD3F                 mov     esi, edx
.text:0040DD41                 add     esi, 4Ch ; 'L'
.text:0040DD44                 movzx   ebx, word ptr [esp+56h]
.text:0040DD49                 movzx   edi, word ptr [esp+54h]
.text:0040DD4E                 mov     [edx+3Ch], ebx
.text:0040DD51                 lea     ebx, [esp+4B0h]
.text:0040DD58                 mov     [edx+40h], edi
.text:0040DD5B                 mov     [esp+4], ecx
.text:0040DD5F                 mov     dword ptr [esp+8], 10h
.text:0040DD67                 mov     [esp], esi
.text:0040DD6A                 call    strncpy
.text:0040DD6F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040DD77                 mov     edi, [esp+8D4h]
.text:0040DD7E                 mov     [esp+4], ebx
.text:0040DD82                 add     edi, 5Ch ; '\'
.text:0040DD85                 mov     [esp], edi
.text:0040DD88                 call    strncpy
.text:0040DD8D                 mov     [esp+4], ebp
.text:0040DD91                 mov     ebp, [esp+8D4h]
.text:0040DD98                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040DDA0                 add     ebp, 0B6h ; '¶'
.text:0040DDA6                 mov     [esp], ebp
.text:0040DDA9                 call    strncpy
.text:0040DDAE                 xor     eax, eax
.text:0040DDB0
.text:0040DDB0 loc_40DDB0:                             ; CODE XREF: .text:0040DEEC↓j
.text:0040DDB0                 add     esp, 8BCh
.text:0040DDB6                 pop     ebx
.text:0040DDB7                 pop     esi
.text:0040DDB8                 pop     edi
.text:0040DDB9                 pop     ebp
.text:0040DDBA                 retn
.text:0040DDBA ; ---------------------------------------------------------------------------
.text:0040DDBB                 align 10h
.text:0040DDC0
.text:0040DDC0 loc_40DDC0:                             ; CODE XREF: .text:0040DC04↑j
.text:0040DDC0                 mov     dword ptr [esp+4], 40D95Dh
.text:0040DDC8                 lea     eax, [esp+0B0h]
.text:0040DDCF                 mov     [esp], eax
.text:0040DDD2                 call    _stricmp
.text:0040DDD7                 test    eax, eax
.text:0040DDD9                 jnz     short loc_40DDED
.text:0040DDDB                 mov     edx, [esp+8D4h]
.text:0040DDE2                 mov     dword ptr [edx], 4008h
.text:0040DDE8                 jmp     loc_40DC17
.text:0040DDED ; ---------------------------------------------------------------------------
.text:0040DDED
.text:0040DDED loc_40DDED:                             ; CODE XREF: .text:0040DDD9↑j
.text:0040DDED                 mov     dword ptr [esp+4], 40D963h
.text:0040DDF5                 lea     ecx, [esp+0B0h]
.text:0040DDFC                 mov     [esp], ecx
.text:0040DDFF                 call    _stricmp
.text:0040DE04                 test    eax, eax
.text:0040DE06                 jnz     short loc_40DE1A
.text:0040DE08                 mov     ebx, [esp+8D4h]
.text:0040DE0F                 mov     dword ptr [ebx], 4006h
.text:0040DE15                 jmp     loc_40DC17
.text:0040DE1A ; ---------------------------------------------------------------------------
.text:0040DE1A
.text:0040DE1A loc_40DE1A:                             ; CODE XREF: .text:0040DE06↑j
.text:0040DE1A                 mov     dword ptr [esp+4], 40D967h
.text:0040DE22                 lea     eax, [esp+0B0h]
.text:0040DE29                 mov     [esp], eax
.text:0040DE2C                 call    _stricmp
.text:0040DE31                 test    eax, eax
.text:0040DE33                 mov     esi, [esp+8D4h]
.text:0040DE3A                 setnz   cl
.text:0040DE3D                 movzx   edx, cl
.text:0040DE40                 dec     edx
.text:0040DE41                 and     edx, 4000h
.text:0040DE47                 mov     [esi], edx
.text:0040DE49                 jmp     loc_40DC17
.text:0040DE49 ; ---------------------------------------------------------------------------
.text:0040DE4E                 align 10h
.text:0040DE50
.text:0040DE50 loc_40DE50:                             ; CODE XREF: .text:0040DB6A↑j
.text:0040DE50                 mov     edi, [esp+84h]
.text:0040DE57                 mov     eax, 1
.text:0040DE5C                 mov     edx, [esp+88h]
.text:0040DE63                 mov     ecx, [esp+8Ch]
.text:0040DE6A                 mov     ebx, [esp+90h]
.text:0040DE71                 mov     [esp+34h], edi
.text:0040DE75                 mov     [esp+30h], edx
.text:0040DE79                 mov     [esp+2Ch], ecx
.text:0040DE7D                 mov     [esi], ebx
.text:0040DE7F                 jmp     loc_40DB80
.text:0040DE84 ; ---------------------------------------------------------------------------
.text:0040DE84
.text:0040DE84 loc_40DE84:                             ; CODE XREF: .text:0040DA96↑j
.text:0040DE84                 mov     [esp+10h], esi
.text:0040DE88                 lea     eax, [esp+2Ch]
.text:0040DE8C                 lea     esi, [esp+30h]
.text:0040DE90                 mov     [esp+0Ch], eax
.text:0040DE94                 lea     edi, [esp+34h]
.text:0040DE98                 mov     [esp+8], esi
.text:0040DE9C                 mov     [esp+4], edi
.text:0040DEA0
.text:0040DEA0 loc_40DEA0:                             ; CODE XREF: .text:0040DECC↓j
.text:0040DEA0                 mov     [esp], ebp
.text:0040DEA3                 call    GetDiskFreeSpaceA
.text:0040DEA8                 sub     esp, 14h
.text:0040DEAB                 jmp     loc_40DB80
.text:0040DEB0 ; ---------------------------------------------------------------------------
.text:0040DEB0
.text:0040DEB0 loc_40DEB0:                             ; CODE XREF: .text:0040DA7F↑j
.text:0040DEB0                 mov     [esp+10h], esi
.text:0040DEB4                 lea     ebx, [esp+2Ch]
.text:0040DEB8                 lea     eax, [esp+30h]
.text:0040DEBC                 mov     [esp+0Ch], ebx
.text:0040DEC0                 lea     esi, [esp+34h]
.text:0040DEC4                 mov     [esp+8], eax
.text:0040DEC8                 mov     [esp+4], esi
.text:0040DECC                 jmp     short loc_40DEA0
.text:0040DECE ; ---------------------------------------------------------------------------
.text:0040DECE
.text:0040DECE loc_40DECE:                             ; CODE XREF: .text:0040DA37↑j
.text:0040DECE                 mov     [esp], edi
.text:0040DED1                 call    FreeLibrary
.text:0040DED6                 sub     esp, 4
.text:0040DED9                 call    sub_40EBF0
.text:0040DEDE                 mov     esi, eax
.text:0040DEE0                 call    _errno
.text:0040DEE5                 mov     [eax], esi
.text:0040DEE7
.text:0040DEE7 loc_40DEE7:                             ; CODE XREF: .text:0040DF07↓j
.text:0040DEE7                 mov     eax, 0FFFFFFFFh
.text:0040DEEC                 jmp     loc_40DDB0
.text:0040DEF1 ; ---------------------------------------------------------------------------
.text:0040DEF1
.text:0040DEF1 loc_40DEF1:                             ; CODE XREF: .text:0040D9B1↑j
.text:0040DEF1                 mov     [esp], edi
.text:0040DEF4                 call    FreeLibrary
.text:0040DEF9                 sub     esp, 4
.text:0040DEFC                 call    _errno
.text:0040DF01                 mov     dword ptr [eax], 2
.text:0040DF07                 jmp     short loc_40DEE7
.text:0040DF07 ; ---------------------------------------------------------------------------
.text:0040DF09                 align 10h
.text:0040DF10
.text:0040DF10 ; =============== S U B R O U T I N E =======================================
.text:0040DF10
.text:0040DF10
.text:0040DF10 ; int __cdecl sub_40DF10(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040DF10 sub_40DF10      proc near               ; CODE XREF: sub_40B940+2C7↑p
.text:0040DF10                                         ; .text:0040BF7A↑p
.text:0040DF10
.text:0040DF10 lpFileName      = dword ptr -9Ch
.text:0040DF10 dwDesiredAccess = dword ptr -98h
.text:0040DF10 dwShareMode     = dword ptr -94h
.text:0040DF10 lpSecurityAttributes= dword ptr -90h
.text:0040DF10 dwCreationDisposition= dword ptr -8Ch
.text:0040DF10 dwFlagsAndAttributes= dword ptr -88h
.text:0040DF10 hTemplateFile   = dword ptr -84h
.text:0040DF10 lpOverlapped    = dword ptr -80h
.text:0040DF10 BytesReturned   = dword ptr -70h
.text:0040DF10 InBuffer        = byte ptr -6Ch
.text:0040DF10 var_68          = dword ptr -68h
.text:0040DF10 var_64          = dword ptr -64h
.text:0040DF10 var_60          = dword ptr -60h
.text:0040DF10 var_5C          = dword ptr -5Ch
.text:0040DF10 var_54          = dword ptr -54h
.text:0040DF10 var_4C          = byte ptr -4Ch
.text:0040DF10 var_48          = dword ptr -48h
.text:0040DF10 var_44          = dword ptr -44h
.text:0040DF10 var_40          = dword ptr -40h
.text:0040DF10 var_3C          = dword ptr -3Ch
.text:0040DF10 lpRootPathName  = dword ptr -2Ch
.text:0040DF10 lpSectorsPerCluster= dword ptr -28h
.text:0040DF10 lpBytesPerSector= dword ptr -24h
.text:0040DF10 lpNumberOfFreeClusters= dword ptr -20h
.text:0040DF10 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040DF10 var_18          = dword ptr -18h
.text:0040DF10 var_14          = dword ptr -14h
.text:0040DF10 var_10          = dword ptr -10h
.text:0040DF10 var_C           = dword ptr -0Ch
.text:0040DF10 var_8           = dword ptr -8
.text:0040DF10 var_4           = dword ptr -4
.text:0040DF10 arg_0           = dword ptr  4
.text:0040DF10 arg_4           = dword ptr  8
.text:0040DF10 arg_8           = dword ptr  0Ch
.text:0040DF10 arg_C           = dword ptr  10h
.text:0040DF10 arg_10          = dword ptr  14h
.text:0040DF10
.text:0040DF10                 sub     esp, 2Ch
.text:0040DF13                 mov     edx, [esp+2Ch+arg_0]
.text:0040DF17                 mov     [esp+2Ch+var_10], ebx
.text:0040DF1B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040DF1F                 mov     [esp+2Ch+var_C], esi
.text:0040DF23                 mov     esi, [esp+2Ch+arg_C]
.text:0040DF27                 mov     [esp+2Ch+var_8], edi
.text:0040DF2B                 mov     edi, [esp+2Ch+arg_8]
.text:0040DF2F                 mov     [esp+2Ch+var_4], ebp
.text:0040DF33                 mov     ebp, [esp+2Ch+arg_4]
.text:0040DF37                 mov     [esp+2Ch+var_14], edx
.text:0040DF3B                 call    sub_40F6D0
.text:0040DF40                 test    eax, eax
.text:0040DF42                 jz      short loc_40DF74
.text:0040DF44                 mov     [esp+2Ch+arg_10], ebx
.text:0040DF48                 mov     edx, [esp+2Ch+var_14]
.text:0040DF4C                 mov     ebx, [esp+2Ch+var_10]
.text:0040DF50                 mov     [esp+2Ch+arg_C], esi
.text:0040DF54                 mov     esi, [esp+2Ch+var_C]
.text:0040DF58                 mov     [esp+2Ch+arg_8], edi
.text:0040DF5C                 mov     edi, [esp+2Ch+var_8]
.text:0040DF60                 mov     [esp+2Ch+arg_4], ebp
.text:0040DF64                 mov     ebp, [esp+2Ch+var_4]
.text:0040DF68                 mov     [esp+2Ch+arg_0], edx
.text:0040DF6C                 add     esp, 2Ch
.text:0040DF6F                 jmp     loc_40E020
.text:0040DF74 ; ---------------------------------------------------------------------------
.text:0040DF74
.text:0040DF74 loc_40DF74:                             ; CODE XREF: sub_40DF10+32↑j
.text:0040DF74                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040DF78                 mov     ecx, [esp+2Ch+var_14]
.text:0040DF7C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040DF80                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040DF84                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040DF88                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040DF8B                 call    GetDiskFreeSpaceA
.text:0040DF90                 sub     esp, 14h
.text:0040DF93                 mov     ebx, [esp+2Ch+var_10]
.text:0040DF97                 mov     esi, [esp+2Ch+var_C]
.text:0040DF9B                 mov     edi, [esp+2Ch+var_8]
.text:0040DF9F                 mov     ebp, [esp+2Ch+var_4]
.text:0040DFA3                 add     esp, 2Ch
.text:0040DFA6                 retn
.text:0040DFA6 ; ---------------------------------------------------------------------------
.text:0040DFA7                 align 10h
.text:0040DFB0
.text:0040DFB0 loc_40DFB0:                             ; CODE XREF: .text:0040F9ED↓p
.text:0040DFB0                 sub     esp, 1Ch
.text:0040DFB3                 mov     [esp+1Ch+var_4], esi
.text:0040DFB7                 mov     esi, [esp+1Ch+arg_0]
.text:0040DFBB                 mov     [esp+1Ch+var_8], ebx
.text:0040DFBF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040DFC2                 call    sub_40D4F0
.text:0040DFC7                 test    eax, eax
.text:0040DFC9                 mov     ebx, eax
.text:0040DFCB                 jz      short loc_40DFE0
.text:0040DFCD                 cmp     byte ptr [eax], 0
.text:0040DFD0                 jz      short loc_40DFE0
.text:0040DFD2                 test    esi, esi
.text:0040DFD4                 jz      short loc_40DFE0
.text:0040DFD6                 cmp     byte ptr [esi], 0
.text:0040DFD9                 jnz     short loc_40E006
.text:0040DFDB                 nop
.text:0040DFDC                 lea     esi, [esi+0]
.text:0040DFE0
.text:0040DFE0 loc_40DFE0:                             ; CODE XREF: sub_40DF10+BB↑j
.text:0040DFE0                                         ; sub_40DF10+C0↑j ...
.text:0040DFE0                 call    _errno
.text:0040DFE5                 mov     dword ptr [eax], 2
.text:0040DFEB                 mov     esi, 0FFFFFFFFh
.text:0040DFF0
.text:0040DFF0 loc_40DFF0:                             ; CODE XREF: sub_40DF10+108↓j
.text:0040DFF0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040DFF3                 call    free
.text:0040DFF8                 mov     eax, esi
.text:0040DFFA                 mov     ebx, [esp+1Ch+var_8]
.text:0040DFFE                 mov     esi, [esp+1Ch+var_4]
.text:0040E002                 add     esp, 1Ch
.text:0040E005                 retn
.text:0040E006 ; ---------------------------------------------------------------------------
.text:0040E006
.text:0040E006 loc_40E006:                             ; CODE XREF: sub_40DF10+C9↑j
.text:0040E006                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040E009                 mov     edx, [esp+1Ch+arg_4]
.text:0040E00D                 mov     [esp+1Ch+var_18], edx
.text:0040E011                 call    near ptr loc_40D96B+5
.text:0040E016                 mov     esi, eax
.text:0040E018                 jmp     short loc_40DFF0
.text:0040E018 ; ---------------------------------------------------------------------------
.text:0040E01A                 align 10h
.text:0040E020
.text:0040E020 loc_40E020:                             ; CODE XREF: sub_40DF10+5F↑j
.text:0040E020                 push    ebp
.text:0040E021                 push    edi
.text:0040E022                 push    esi
.text:0040E023                 push    ebx
.text:0040E024                 sub     esp, 8Ch
.text:0040E02A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040E031                 call    sub_40F6D0
.text:0040E036                 test    eax, eax
.text:0040E038                 jz      short loc_40E048
.text:0040E03A                 call    sub_40F620
.text:0040E03F                 cmp     eax, 0Bh
.text:0040E042                 jle     loc_40E170
.text:0040E048
.text:0040E048 loc_40E048:                             ; CODE XREF: sub_40DF10+128↑j
.text:0040E048                 cld
.text:0040E049                 xor     eax, eax
.text:0040E04B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040E04F                 mov     ecx, 7
.text:0040E054                 mov     edi, ebx
.text:0040E056                 lea     esi, [esp+9Ch+var_4C]
.text:0040E05A                 rep stosd
.text:0040E05C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040E064                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040E06C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040E074                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040E07C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040E084                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040E08C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040E093                 call    CreateFileA
.text:0040E098                 sub     esp, 1Ch
.text:0040E09B                 mov     edi, eax
.text:0040E09D                 cmp     eax, 0FFFFFFFFh
.text:0040E0A0                 jz      short loc_40E115
.text:0040E0A2                 mov     [esp+9Ch+var_68], ebp
.text:0040E0A6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040E0AA                 mov     [esp+9Ch+var_5C], esi
.text:0040E0AE                 mov     [esp+9Ch+var_60], 7303h
.text:0040E0B6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040E0BE                 mov     [esp+9Ch+var_54], 1
.text:0040E0C6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040E0CE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040E0D2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040E0DA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040E0DE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040E0E6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040E0EA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040E0F2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040E0F5                 call    DeviceIoControl
.text:0040E0FA                 sub     esp, 20h
.text:0040E0FD                 mov     esi, eax
.text:0040E0FF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040E102                 call    CloseHandle
.text:0040E107                 sub     esp, 4
.text:0040E10A                 test    esi, esi
.text:0040E10C                 jz      short loc_40E115
.text:0040E10E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040E113                 jz      short loc_40E130
.text:0040E115
.text:0040E115 loc_40E115:                             ; CODE XREF: sub_40DF10+190↑j
.text:0040E115                                         ; sub_40DF10+1FC↑j
.text:0040E115                 call    sub_40EBF0
.text:0040E11A                 mov     edi, eax
.text:0040E11C                 call    _errno
.text:0040E121                 mov     [eax], edi
.text:0040E123                 xor     eax, eax
.text:0040E125
.text:0040E125 loc_40E125:                             ; CODE XREF: sub_40DF10+25A↓j
.text:0040E125                                         ; sub_40DF10+297↓j
.text:0040E125                 add     esp, 8Ch
.text:0040E12B                 pop     ebx
.text:0040E12C                 pop     esi
.text:0040E12D                 pop     edi
.text:0040E12E                 pop     ebp
.text:0040E12F                 retn
.text:0040E130 ; ---------------------------------------------------------------------------
.text:0040E130
.text:0040E130 loc_40E130:                             ; CODE XREF: sub_40DF10+203↑j
.text:0040E130                 mov     edx, [esp+9Ch+var_48]
.text:0040E134                 mov     eax, 1
.text:0040E139                 mov     ebx, [esp+9Ch+arg_4]
.text:0040E140                 mov     ebp, [esp+9Ch+arg_8]
.text:0040E147                 mov     ecx, [esp+9Ch+arg_C]
.text:0040E14E                 mov     [ebx], edx
.text:0040E150                 mov     edi, [esp+9Ch+var_44]
.text:0040E154                 mov     ebx, [esp+9Ch+arg_10]
.text:0040E15B                 mov     [ebp+0], edi
.text:0040E15E                 mov     esi, [esp+9Ch+var_40]
.text:0040E162                 mov     [ecx], esi
.text:0040E164                 mov     edx, [esp+9Ch+var_3C]
.text:0040E168                 mov     [ebx], edx
.text:0040E16A                 jmp     short loc_40E125
.text:0040E16A ; ---------------------------------------------------------------------------
.text:0040E16C                 align 10h
.text:0040E170
.text:0040E170 loc_40E170:                             ; CODE XREF: sub_40DF10+132↑j
.text:0040E170                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040E173                 mov     eax, [esp+9Ch+arg_C]
.text:0040E17A                 mov     ecx, [esp+9Ch+arg_10]
.text:0040E181                 mov     edx, [esp+9Ch+arg_8]
.text:0040E188                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040E18C                 mov     eax, [esp+9Ch+arg_4]
.text:0040E193                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040E197                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040E19B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040E19F                 call    GetDiskFreeSpaceA
.text:0040E1A4                 sub     esp, 14h
.text:0040E1A7                 jmp     loc_40E125
.text:0040E1A7 sub_40DF10      endp ; sp-analysis failed
.text:0040E1A7
.text:0040E1A7 ; ---------------------------------------------------------------------------
.text:0040E1AC                 align 10h
.text:0040E1B0
.text:0040E1B0 ; =============== S U B R O U T I N E =======================================
.text:0040E1B0
.text:0040E1B0
.text:0040E1B0 ; int __cdecl sub_40E1B0(DWORD, int)
.text:0040E1B0 sub_40E1B0      proc near               ; CODE XREF: sub_402620+14A↑p
.text:0040E1B0                                         ; sub_403760+67F↑p
.text:0040E1B0
.text:0040E1B0 dwDesiredAccess = dword ptr -1Ch
.text:0040E1B0 bInheritHandle  = dword ptr -18h
.text:0040E1B0 dwProcessId     = dword ptr -14h
.text:0040E1B0 var_C           = dword ptr -0Ch
.text:0040E1B0 var_8           = dword ptr -8
.text:0040E1B0 var_4           = dword ptr -4
.text:0040E1B0 arg_0           = dword ptr  4
.text:0040E1B0 arg_4           = dword ptr  8
.text:0040E1B0
.text:0040E1B0                 sub     esp, 1Ch
.text:0040E1B3                 mov     edx, [esp+1Ch+arg_0]
.text:0040E1B7                 mov     [esp+1Ch+var_C], ebx
.text:0040E1BB                 mov     ebx, [esp+1Ch+arg_4]
.text:0040E1BF                 mov     [esp+1Ch+var_8], esi
.text:0040E1C3                 mov     [esp+1Ch+var_4], edi
.text:0040E1C7                 xor     edi, edi
.text:0040E1C9                 mov     [esp+1Ch+dwProcessId], edx ; dwProcessId
.text:0040E1CD                 mov     [esp+1Ch+bInheritHandle], 0 ; bInheritHandle
.text:0040E1D5                 mov     [esp+1Ch+dwDesiredAccess], 1 ; dwDesiredAccess
.text:0040E1DC                 call    OpenProcess
.text:0040E1E1                 sub     esp, 0Ch
.text:0040E1E4                 mov     esi, eax
.text:0040E1E6                 test    eax, eax
.text:0040E1E8                 jz      loc_40E2C4
.text:0040E1EE                 cmp     ebx, 16h        ; switch 23 cases
.text:0040E1F1                 ja      def_40E1F7      ; jumptable 0040E1F7 default case, cases 1-8,10-21
.text:0040E1F7                 jmp     ds:jpt_40E1F7[ebx*4] ; switch jump
.text:0040E1F7 ; ---------------------------------------------------------------------------
.text:0040E1FE                 align 10h
.text:0040E200 jpt_40E1F7      dd offset loc_40E280    ; DATA XREF: sub_40E1B0+47↑r
.text:0040E200                 dd offset def_40E1F7    ; jump table for switch statement
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset loc_40E260
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset def_40E1F7
.text:0040E200                 dd offset loc_40E260
.text:0040E25C                 align 10h
.text:0040E260
.text:0040E260 loc_40E260:                             ; CODE XREF: sub_40E1B0+47↑j
.text:0040E260                                         ; DATA XREF: sub_40E1B0:jpt_40E1F7↑o
.text:0040E260                 mov     [esp+1Ch+bInheritHandle], 0FFFFFFFFh ; jumptable 0040E1F7 cases 9,22
.text:0040E268                 mov     [esp+1Ch+dwDesiredAccess], eax ; hProcess
.text:0040E26B                 call    TerminateProcess
.text:0040E270                 sub     esp, 8
.text:0040E273                 test    eax, eax
.text:0040E275                 jz      short loc_40E29D
.text:0040E277                 mov     esi, esi
.text:0040E279                 lea     edi, [edi+0]
.text:0040E280
.text:0040E280 loc_40E280:                             ; CODE XREF: sub_40E1B0+47↑j
.text:0040E280                                         ; sub_40E1B0+105↓j
.text:0040E280                                         ; DATA XREF: ...
.text:0040E280                 mov     [esp+1Ch+dwDesiredAccess], esi ; jumptable 0040E1F7 case 0
.text:0040E283                 call    CloseHandle
.text:0040E288                 sub     esp, 4
.text:0040E28B                 mov     eax, edi
.text:0040E28D
.text:0040E28D loc_40E28D:                             ; CODE XREF: sub_40E1B0+127↓j
.text:0040E28D                 mov     ebx, [esp+1Ch+var_C]
.text:0040E291                 mov     esi, [esp+1Ch+var_8]
.text:0040E295                 mov     edi, [esp+1Ch+var_4]
.text:0040E299                 add     esp, 1Ch
.text:0040E29C                 retn
.text:0040E29D ; ---------------------------------------------------------------------------
.text:0040E29D
.text:0040E29D loc_40E29D:                             ; CODE XREF: sub_40E1B0+C5↑j
.text:0040E29D                 call    sub_40EBF0
.text:0040E2A2                 mov     edi, eax
.text:0040E2A4                 call    _errno
.text:0040E2A9                 mov     [eax], edi
.text:0040E2AB                 nop
.text:0040E2AC                 lea     esi, [esi+0]
.text:0040E2B0
.text:0040E2B0 loc_40E2B0:                             ; CODE XREF: sub_40E1B0+112↓j
.text:0040E2B0                 mov     edi, 0FFFFFFFFh
.text:0040E2B5                 jmp     short loc_40E280 ; jumptable 0040E1F7 case 0
.text:0040E2B7 ; ---------------------------------------------------------------------------
.text:0040E2B7
.text:0040E2B7 def_40E1F7:                             ; CODE XREF: sub_40E1B0+41↑j
.text:0040E2B7                                         ; sub_40E1B0+47↑j
.text:0040E2B7                                         ; DATA XREF: ...
.text:0040E2B7                 call    _errno          ; jumptable 0040E1F7 default case, cases 1-8,10-21
.text:0040E2BC                 mov     dword ptr [eax], 16h
.text:0040E2C2                 jmp     short loc_40E2B0
.text:0040E2C4 ; ---------------------------------------------------------------------------
.text:0040E2C4
.text:0040E2C4 loc_40E2C4:                             ; CODE XREF: sub_40E1B0+38↑j
.text:0040E2C4                 call    sub_40EBF0
.text:0040E2C9                 mov     esi, eax
.text:0040E2CB                 call    _errno
.text:0040E2D0                 mov     [eax], esi
.text:0040E2D2                 mov     eax, 0FFFFFFFFh
.text:0040E2D7                 jmp     short loc_40E28D
.text:0040E2D7 sub_40E1B0      endp
.text:0040E2D7
.text:0040E2D7 ; ---------------------------------------------------------------------------
.text:0040E2D9                 align 10h
.text:0040E2E0
.text:0040E2E0 ; =============== S U B R O U T I N E =======================================
.text:0040E2E0
.text:0040E2E0
.text:0040E2E0 sub_40E2E0      proc near               ; CODE XREF: sub_40E400+152↓p
.text:0040E2E0                                         ; .text:0040E5CB↓p
.text:0040E2E0
.text:0040E2E0 FileHandle      = dword ptr -2Ch
.text:0040E2E0 Offset          = qword ptr -28h
.text:0040E2E0 Origin          = dword ptr -20h
.text:0040E2E0 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:0040E2E0 hFile           = dword ptr -14h
.text:0040E2E0 arg_0           = dword ptr  4
.text:0040E2E0 arg_4           = dword ptr  8
.text:0040E2E0 arg_8           = dword ptr  0Ch
.text:0040E2E0
.text:0040E2E0                 push    ebp
.text:0040E2E1                 push    edi
.text:0040E2E2                 push    esi
.text:0040E2E3                 push    ebx
.text:0040E2E4                 sub     esp, 1Ch
.text:0040E2E7                 mov     ebp, [esp+2Ch+arg_8]
.text:0040E2EB                 mov     edi, [esp+2Ch+arg_0]
.text:0040E2EF                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040E2F2                 call    _get_osfhandle
.text:0040E2F7                 movsx   edx, word ptr [ebp+2]
.text:0040E2FB                 mov     [esp+2Ch+hFile], eax
.text:0040E2FF                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:0040E307                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:0040E30F                 mov     [esp+2Ch+Origin], edx ; Origin
.text:0040E313                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040E316                 call    _lseeki64
.text:0040E31B                 mov     ebx, eax
.text:0040E31D                 mov     esi, edx
.text:0040E31F                 mov     edx, [ebp+14h]
.text:0040E322                 add     ebx, [ebp+8]
.text:0040E325                 mov     eax, [ebp+10h]
.text:0040E328                 mov     ecx, edx
.text:0040E32A                 adc     esi, [ebp+0Ch]
.text:0040E32D                 or      ecx, eax
.text:0040E32F                 jz      loc_40E3F0
.text:0040E335                 add     eax, ebx
.text:0040E337                 adc     edx, esi
.text:0040E339
.text:0040E339 loc_40E339:                             ; CODE XREF: sub_40E2E0+118↓j
.text:0040E339                 cmp     [esp+2Ch+arg_4], 7
.text:0040E33E                 jz      loc_40E3DE
.text:0040E344                 cmp     [esp+2Ch+arg_4], 7
.text:0040E349                 jl      short loc_40E365
.text:0040E34B                 cmp     [esp+2Ch+arg_4], 9
.text:0040E350                 jg      short loc_40E365
.text:0040E352                 movsx   ecx, word ptr [ebp+0]
.text:0040E356                 cmp     ecx, 1
.text:0040E359                 jl      short loc_40E365
.text:0040E35B                 cmp     ecx, 2
.text:0040E35E                 jle     short loc_40E3C0
.text:0040E360                 cmp     ecx, 3
.text:0040E363                 jz      short loc_40E37D
.text:0040E365
.text:0040E365 loc_40E365:                             ; CODE XREF: sub_40E2E0+69↑j
.text:0040E365                                         ; sub_40E2E0+70↑j ...
.text:0040E365                 call    _errno
.text:0040E36A                 mov     dword ptr [eax], 16h
.text:0040E370
.text:0040E370 loc_40E370:                             ; CODE XREF: sub_40E2E0+D9↓j
.text:0040E370                                         ; sub_40E2E0+109↓j
.text:0040E370                 mov     eax, 0FFFFFFFFh
.text:0040E375
.text:0040E375 loc_40E375:                             ; CODE XREF: sub_40E2E0+C9↓j
.text:0040E375                 add     esp, 1Ch
.text:0040E378                 pop     ebx
.text:0040E379                 pop     esi
.text:0040E37A                 pop     edi
.text:0040E37B                 pop     ebp
.text:0040E37C                 retn
.text:0040E37D ; ---------------------------------------------------------------------------
.text:0040E37D
.text:0040E37D loc_40E37D:                             ; CODE XREF: sub_40E2E0+83↑j
.text:0040E37D                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:0040E381                 mov     eax, [esp+2Ch+hFile]
.text:0040E385                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040E389                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040E38D                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040E391                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:0040E394                 call    UnlockFile
.text:0040E399                 lea     esi, [esi+0]
.text:0040E3A0
.text:0040E3A0 loc_40E3A0:                             ; CODE XREF: sub_40E2E0+FC↓j
.text:0040E3A0                 mov     ecx, eax
.text:0040E3A2                 sub     esp, 14h
.text:0040E3A5                 xor     eax, eax
.text:0040E3A7                 test    ecx, ecx
.text:0040E3A9                 jnz     short loc_40E375
.text:0040E3AB                 call    sub_40EBF0
.text:0040E3B0                 mov     esi, eax
.text:0040E3B2                 call    _errno
.text:0040E3B7                 mov     [eax], esi
.text:0040E3B9                 jmp     short loc_40E370
.text:0040E3B9 ; ---------------------------------------------------------------------------
.text:0040E3BB                 align 10h
.text:0040E3C0
.text:0040E3C0 loc_40E3C0:                             ; CODE XREF: sub_40E2E0+7E↑j
.text:0040E3C0                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:0040E3C4                 mov     edx, [esp+2Ch+hFile]
.text:0040E3C8                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040E3CC                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040E3D0                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:0040E3D3                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:0040E3D7                 call    LockFile
.text:0040E3DC                 jmp     short loc_40E3A0
.text:0040E3DE ; ---------------------------------------------------------------------------
.text:0040E3DE
.text:0040E3DE loc_40E3DE:                             ; CODE XREF: sub_40E2E0+5E↑j
.text:0040E3DE                 call    _errno
.text:0040E3E3                 mov     dword ptr [eax], 28h ; '('
.text:0040E3E9                 jmp     short loc_40E370
.text:0040E3E9 ; ---------------------------------------------------------------------------
.text:0040E3EB                 align 10h
.text:0040E3F0
.text:0040E3F0 loc_40E3F0:                             ; CODE XREF: sub_40E2E0+4F↑j
.text:0040E3F0                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040E3F3                 call    _filelengthi64
.text:0040E3F8                 jmp     loc_40E339
.text:0040E3F8 sub_40E2E0      endp
.text:0040E3F8
.text:0040E3F8 ; ---------------------------------------------------------------------------
.text:0040E3FD                 align 10h
.text:0040E400
.text:0040E400 ; =============== S U B R O U T I N E =======================================
.text:0040E400
.text:0040E400
.text:0040E400 sub_40E400      proc near               ; CODE XREF: sub_402620+255↑p
.text:0040E400                                         ; sub_402620+285↑p ...
.text:0040E400
.text:0040E400 FileHandle      = dword ptr -1Ch
.text:0040E400 var_18          = dword ptr -18h
.text:0040E400 var_14          = dword ptr -14h
.text:0040E400 var_4           = dword ptr -4
.text:0040E400 arg_0           = dword ptr  4
.text:0040E400 arg_4           = dword ptr  8
.text:0040E400 arg_8           = byte ptr  0Ch
.text:0040E400
.text:0040E400                 sub     esp, 1Ch
.text:0040E403                 mov     ecx, [esp+1Ch+arg_0]
.text:0040E407                 mov     [esp+1Ch+var_4], ebx
.text:0040E40B                 mov     edx, [esp+1Ch+arg_4]
.text:0040E40F                 test    ecx, ecx
.text:0040E411                 js      loc_40E569
.text:0040E417                 cmp     edx, 9          ; switch 10 cases
.text:0040E41A                 lea     eax, [esp+1Ch+arg_8]
.text:0040E41E                 ja      def_40E424      ; jumptable 0040E424 default case
.text:0040E424                 jmp     ds:jpt_40E424[edx*4] ; switch jump
.text:0040E424 ; ---------------------------------------------------------------------------
.text:0040E42B                 align 4
.text:0040E42C jpt_40E424      dd offset loc_40E454    ; DATA XREF: sub_40E400+24↑r
.text:0040E42C                 dd offset loc_40E468    ; jump table for switch statement
.text:0040E42C                 dd offset loc_40E488
.text:0040E42C                 dd offset loc_40E4B0
.text:0040E42C                 dd offset loc_40E4F8
.text:0040E42C                 dd offset loc_40E530
.text:0040E42C                 dd offset loc_40E530
.text:0040E42C                 dd offset loc_40E530
.text:0040E42C                 dd offset loc_40E545
.text:0040E42C                 dd offset loc_40E545
.text:0040E454 ; ---------------------------------------------------------------------------
.text:0040E454
.text:0040E454 loc_40E454:                             ; CODE XREF: sub_40E400+24↑j
.text:0040E454                                         ; DATA XREF: sub_40E400:jpt_40E424↑o
.text:0040E454                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 0040E424 case 0
.text:0040E457                 call    _dup
.text:0040E45C                 lea     esi, [esi+0]
.text:0040E460
.text:0040E460 loc_40E460:                             ; CODE XREF: sub_40E400+86↓j
.text:0040E460                                         ; sub_40E400+AC↓j ...
.text:0040E460                 mov     ebx, [esp+1Ch+var_4]
.text:0040E464                 add     esp, 1Ch
.text:0040E467                 retn
.text:0040E468 ; ---------------------------------------------------------------------------
.text:0040E468
.text:0040E468 loc_40E468:                             ; CODE XREF: sub_40E400+24↑j
.text:0040E468                                         ; DATA XREF: sub_40E400:jpt_40E424↑o
.text:0040E468                 mov     eax, ds:__pioinfo ; jumptable 0040E424 case 1
.text:0040E46D                 mov     edx, ecx
.text:0040E46F                 sar     edx, 5
.text:0040E472                 and     ecx, 1Fh
.text:0040E475                 mov     ebx, [eax+edx*4]
.text:0040E478                 lea     eax, [ecx+ecx*8]
.text:0040E47B                 test    byte ptr [ebx+eax*4+4], 10h
.text:0040E480                 setnz   dl
.text:0040E483                 movzx   eax, dl
.text:0040E486                 jmp     short loc_40E460
.text:0040E488 ; ---------------------------------------------------------------------------
.text:0040E488
.text:0040E488 loc_40E488:                             ; CODE XREF: sub_40E400+24↑j
.text:0040E488                                         ; DATA XREF: sub_40E400:jpt_40E424↑o
.text:0040E488                 test    bl, 1           ; jumptable 0040E424 case 2
.text:0040E48B                 jz      short loc_40E493
.text:0040E48D                 and     ebx, 0FFFFFFFEh
.text:0040E490                 or      ebx, 10h
.text:0040E493
.text:0040E493 loc_40E493:                             ; CODE XREF: sub_40E400+8B↑j
.text:0040E493                 mov     eax, ds:__pioinfo
.text:0040E498                 mov     edx, ecx
.text:0040E49A                 sar     edx, 5
.text:0040E49D                 and     ecx, 1Fh
.text:0040E4A0                 mov     edx, [eax+edx*4]
.text:0040E4A3                 lea     eax, [ecx+ecx*8]
.text:0040E4A6                 mov     [edx+eax*4+4], bl
.text:0040E4AA
.text:0040E4AA loc_40E4AA:                             ; CODE XREF: sub_40E400+121↓j
.text:0040E4AA                 xor     eax, eax
.text:0040E4AC                 jmp     short loc_40E460
.text:0040E4AC ; ---------------------------------------------------------------------------
.text:0040E4AE                 align 10h
.text:0040E4B0
.text:0040E4B0 loc_40E4B0:                             ; CODE XREF: sub_40E400+24↑j
.text:0040E4B0                                         ; DATA XREF: sub_40E400:jpt_40E424↑o
.text:0040E4B0                 mov     eax, ds:__pioinfo ; jumptable 0040E424 case 3
.text:0040E4B5                 mov     ebx, ecx
.text:0040E4B7                 sar     ebx, 5
.text:0040E4BA                 and     ecx, 1Fh
.text:0040E4BD                 mov     edx, [eax+ebx*4]
.text:0040E4C0                 lea     ebx, [ecx+ecx*8]
.text:0040E4C3                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:0040E4C8                 xor     edx, edx
.text:0040E4CA                 test    al, 1
.text:0040E4CC                 jz      short loc_40E4D7
.text:0040E4CE                 mov     edx, 2
.text:0040E4D3
.text:0040E4D3 loc_40E4D3:                             ; CODE XREF: sub_40E400+E0↓j
.text:0040E4D3                                         ; sub_40E400+EB↓j ...
.text:0040E4D3                 mov     eax, edx
.text:0040E4D5                 jmp     short loc_40E460
.text:0040E4D7 ; ---------------------------------------------------------------------------
.text:0040E4D7
.text:0040E4D7 loc_40E4D7:                             ; CODE XREF: sub_40E400+CC↑j
.text:0040E4D7                 test    al, 20h
.text:0040E4D9                 jz      short loc_40E4E2
.text:0040E4DB                 mov     edx, 8
.text:0040E4E0                 jmp     short loc_40E4D3
.text:0040E4E2 ; ---------------------------------------------------------------------------
.text:0040E4E2
.text:0040E4E2 loc_40E4E2:                             ; CODE XREF: sub_40E400+D9↑j
.text:0040E4E2                 test    al, 10h
.text:0040E4E4                 jz      short loc_40E4ED
.text:0040E4E6                 mov     edx, 80h ; '€'
.text:0040E4EB                 jmp     short loc_40E4D3
.text:0040E4ED ; ---------------------------------------------------------------------------
.text:0040E4ED
.text:0040E4ED loc_40E4ED:                             ; CODE XREF: sub_40E400+E4↑j
.text:0040E4ED                 test    al, al
.text:0040E4EF                 jns     short loc_40E4D3
.text:0040E4F1                 mov     edx, 4000h
.text:0040E4F6                 jmp     short loc_40E4D3
.text:0040E4F8 ; ---------------------------------------------------------------------------
.text:0040E4F8
.text:0040E4F8 loc_40E4F8:                             ; CODE XREF: sub_40E400+24↑j
.text:0040E4F8                                         ; DATA XREF: sub_40E400:jpt_40E424↑o
.text:0040E4F8                 mov     edx, ds:__pioinfo ; jumptable 0040E424 case 4
.text:0040E4FE                 mov     ebx, [eax]
.text:0040E500                 mov     eax, ecx
.text:0040E502                 sar     eax, 5
.text:0040E505                 and     ecx, 1Fh
.text:0040E508                 mov     edx, [edx+eax*4]
.text:0040E50B                 lea     eax, [ecx+ecx*8]
.text:0040E50E                 shl     eax, 2
.text:0040E511                 xor     ecx, ecx
.text:0040E513                 test    bl, 8
.text:0040E516                 jz      short loc_40E523
.text:0040E518                 mov     ecx, 20h ; ' '
.text:0040E51D
.text:0040E51D loc_40E51D:                             ; CODE XREF: sub_40E400+126↓j
.text:0040E51D                                         ; sub_40E400+12D↓j
.text:0040E51D                 mov     [edx+eax+4], cl
.text:0040E521                 jmp     short loc_40E4AA
.text:0040E523 ; ---------------------------------------------------------------------------
.text:0040E523
.text:0040E523 loc_40E523:                             ; CODE XREF: sub_40E400+116↑j
.text:0040E523                 test    bh, 40h
.text:0040E526                 jz      short loc_40E51D
.text:0040E528                 mov     ecx, 80h ; '€'
.text:0040E52D                 jmp     short loc_40E51D
.text:0040E52D ; ---------------------------------------------------------------------------
.text:0040E52F                 align 10h
.text:0040E530
.text:0040E530 loc_40E530:                             ; CODE XREF: sub_40E400+24↑j
.text:0040E530                                         ; DATA XREF: sub_40E400:jpt_40E424↑o
.text:0040E530                 call    _errno          ; jumptable 0040E424 cases 5-7
.text:0040E535                 mov     dword ptr [eax], 28h ; '('
.text:0040E53B
.text:0040E53B loc_40E53B:                             ; CODE XREF: sub_40E400+167↓j
.text:0040E53B                                         ; sub_40E400+174↓j
.text:0040E53B                 mov     eax, 0FFFFFFFFh
.text:0040E540                 jmp     loc_40E460
.text:0040E545 ; ---------------------------------------------------------------------------
.text:0040E545
.text:0040E545 loc_40E545:                             ; CODE XREF: sub_40E400+24↑j
.text:0040E545                                         ; DATA XREF: sub_40E400:jpt_40E424↑o
.text:0040E545                 mov     ebx, [eax]      ; jumptable 0040E424 cases 8,9
.text:0040E547                 mov     [esp+1Ch+var_18], edx
.text:0040E54B                 mov     [esp+1Ch+FileHandle], ecx
.text:0040E54E                 mov     [esp+1Ch+var_14], ebx
.text:0040E552                 call    sub_40E2E0
.text:0040E557                 jmp     loc_40E460
.text:0040E55C ; ---------------------------------------------------------------------------
.text:0040E55C
.text:0040E55C def_40E424:                             ; CODE XREF: sub_40E400+1E↑j
.text:0040E55C                 call    _errno          ; jumptable 0040E424 default case
.text:0040E561                 mov     dword ptr [eax], 16h
.text:0040E567                 jmp     short loc_40E53B
.text:0040E569 ; ---------------------------------------------------------------------------
.text:0040E569
.text:0040E569 loc_40E569:                             ; CODE XREF: sub_40E400+11↑j
.text:0040E569                 call    _errno
.text:0040E56E                 mov     dword ptr [eax], 9
.text:0040E574                 jmp     short loc_40E53B
.text:0040E574 sub_40E400      endp
.text:0040E574
.text:0040E574 ; ---------------------------------------------------------------------------
.text:0040E576                 align 10h
.text:0040E580                 sub     esp, 3Ch
.text:0040E583                 mov     edx, [esp+48h]
.text:0040E587                 mov     eax, [edx+4]
.text:0040E58A                 movzx   ecx, word ptr [edx]
.text:0040E58D                 mov     [esp+18h], eax
.text:0040E591                 mov     [esp+10h], cx
.text:0040E596                 movzx   ecx, word ptr [edx+2]
.text:0040E59A                 mov     [esp+12h], cx
.text:0040E59F                 mov     ecx, eax
.text:0040E5A1                 mov     eax, [edx+8]
.text:0040E5A4                 sar     ecx, 1Fh
.text:0040E5A7                 mov     [esp+1Ch], ecx
.text:0040E5AB                 cdq
.text:0040E5AC                 lea     ecx, [esp+10h]
.text:0040E5B0                 mov     [esp+24h], edx
.text:0040E5B4                 mov     edx, [esp+44h]
.text:0040E5B8                 mov     [esp+20h], eax
.text:0040E5BC                 mov     [esp+8], ecx
.text:0040E5C0                 mov     [esp+4], edx
.text:0040E5C4                 mov     edx, [esp+40h]
.text:0040E5C8                 mov     [esp], edx
.text:0040E5CB                 call    sub_40E2E0
.text:0040E5D0                 add     esp, 3Ch
.text:0040E5D3                 retn
.text:0040E5D3 ; ---------------------------------------------------------------------------
.text:0040E5D4                 align 10h
.text:0040E5E0                 mov     edx, [esp+4]
.text:0040E5E4                 xor     eax, eax
.text:0040E5E6                 test    dl, 1
.text:0040E5E9                 jz      short loc_40E5F1
.text:0040E5EB                 mov     eax, 2
.text:0040E5F0                 retn
.text:0040E5F1 ; ---------------------------------------------------------------------------
.text:0040E5F1
.text:0040E5F1 loc_40E5F1:                             ; CODE XREF: .text:0040E5E9↑j
.text:0040E5F1                 test    dl, 20h
.text:0040E5F4                 jz      short loc_40E600
.text:0040E5F6                 mov     eax, 8
.text:0040E5FB                 retn
.text:0040E5FB ; ---------------------------------------------------------------------------
.text:0040E5FC                 align 10h
.text:0040E600
.text:0040E600 loc_40E600:                             ; CODE XREF: .text:0040E5F4↑j
.text:0040E600                 test    dl, 10h
.text:0040E603                 jz      short loc_40E610
.text:0040E605                 mov     eax, 80h ; '€'
.text:0040E60A                 retn
.text:0040E60A ; ---------------------------------------------------------------------------
.text:0040E60B                 align 10h
.text:0040E610
.text:0040E610 loc_40E610:                             ; CODE XREF: .text:0040E603↑j
.text:0040E610                 test    dl, dl
.text:0040E612                 jns     short locret_40E619
.text:0040E614                 mov     eax, 4000h
.text:0040E619
.text:0040E619 locret_40E619:                          ; CODE XREF: .text:0040E612↑j
.text:0040E619                 retn
.text:0040E619 ; ---------------------------------------------------------------------------
.text:0040E61A                 align 10h
.text:0040E620                 mov     edx, [esp+4]
.text:0040E624                 xor     eax, eax
.text:0040E626                 test    dl, 8
.text:0040E629                 jz      short loc_40E631
.text:0040E62B                 mov     eax, 20h ; ' '
.text:0040E630                 retn
.text:0040E631 ; ---------------------------------------------------------------------------
.text:0040E631
.text:0040E631 loc_40E631:                             ; CODE XREF: .text:0040E629↑j
.text:0040E631                 test    dh, 40h
.text:0040E634                 jz      short locret_40E63B
.text:0040E636                 mov     eax, 80h ; '€'
.text:0040E63B
.text:0040E63B locret_40E63B:                          ; CODE XREF: .text:0040E634↑j
.text:0040E63B                 retn
.text:0040E63B ; ---------------------------------------------------------------------------
.text:0040E63C                 align 10h
.text:0040E640
.text:0040E640 ; =============== S U B R O U T I N E =======================================
.text:0040E640
.text:0040E640
.text:0040E640 sub_40E640      proc near               ; CODE XREF: sub_405100+16F↑p
.text:0040E640
.text:0040E640 var_9           = byte ptr -9
.text:0040E640 arg_0           = dword ptr  4
.text:0040E640 arg_4           = byte ptr  8
.text:0040E640 arg_8           = dword ptr  0Ch
.text:0040E640
.text:0040E640                 push    esi
.text:0040E641                 push    ebx
.text:0040E642                 sub     esp, 4
.text:0040E645                 mov     ecx, [esp+0Ch+arg_8]
.text:0040E649                 movzx   edx, [esp+0Ch+arg_4]
.text:0040E64E                 mov     [esp+0Ch+var_9], dl
.text:0040E652                 mov     edx, [esp+0Ch+arg_0]
.text:0040E656                 add     edx, ecx
.text:0040E658                 test    ecx, ecx
.text:0040E65A                 jz      short loc_40E690
.text:0040E65C                 test    dl, 3
.text:0040E65F                 jz      short loc_40E690
.text:0040E661                 jmp     short loc_40E670
.text:0040E661 ; ---------------------------------------------------------------------------
.text:0040E663                 align 10h
.text:0040E670
.text:0040E670 loc_40E670:                             ; CODE XREF: sub_40E640+21↑j
.text:0040E670                                         ; sub_40E640+44↓j
.text:0040E670                 movzx   ebx, [esp+0Ch+var_9]
.text:0040E675                 dec     edx
.text:0040E676                 cmp     [edx], bl
.text:0040E678                 jz      loc_40E727
.text:0040E67E                 dec     ecx
.text:0040E67F                 jz      short loc_40E690
.text:0040E681                 test    dl, 3
.text:0040E684                 jnz     short loc_40E670
.text:0040E686                 lea     esi, [esi+0]
.text:0040E689                 lea     edi, [edi+0]
.text:0040E690
.text:0040E690 loc_40E690:                             ; CODE XREF: sub_40E640+1A↑j
.text:0040E690                                         ; sub_40E640+1F↑j ...
.text:0040E690                 mov     ebx, edx
.text:0040E692                 movzx   edx, [esp+0Ch+var_9]
.text:0040E697                 mov     esi, edx
.text:0040E699                 shl     esi, 8
.text:0040E69C                 or      esi, edx
.text:0040E69E                 mov     edx, esi
.text:0040E6A0                 shl     edx, 10h
.text:0040E6A3                 or      esi, edx
.text:0040E6A5                 cmp     ecx, 3
.text:0040E6A8                 jbe     short loc_40E6F8
.text:0040E6AA                 lea     esi, [esi+0]
.text:0040E6B0
.text:0040E6B0 loc_40E6B0:                             ; CODE XREF: sub_40E640+B6↓j
.text:0040E6B0                 sub     ebx, 4
.text:0040E6B3                 mov     eax, [ebx]
.text:0040E6B5                 xor     eax, esi
.text:0040E6B7                 lea     edx, [eax+7EFEFEFFh]
.text:0040E6BD                 not     eax
.text:0040E6BF                 xor     edx, eax
.text:0040E6C1                 and     edx, 81010100h
.text:0040E6C7                 jz      short loc_40E6F0
.text:0040E6C9                 movzx   edx, [esp+0Ch+var_9]
.text:0040E6CE                 cmp     [ebx+3], dl
.text:0040E6D1                 jz      short loc_40E739
.text:0040E6D3                 movzx   edx, [esp+0Ch+var_9]
.text:0040E6D8                 cmp     [ebx+2], dl
.text:0040E6DB                 jz      short loc_40E734
.text:0040E6DD                 movzx   edx, [esp+0Ch+var_9]
.text:0040E6E2                 cmp     [ebx+1], dl
.text:0040E6E5                 jz      short loc_40E72F
.text:0040E6E7                 movzx   edx, [esp+0Ch+var_9]
.text:0040E6EC                 cmp     [ebx], dl
.text:0040E6EE                 jz      short loc_40E72B
.text:0040E6F0
.text:0040E6F0 loc_40E6F0:                             ; CODE XREF: sub_40E640+87↑j
.text:0040E6F0                 sub     ecx, 4
.text:0040E6F3                 cmp     ecx, 3
.text:0040E6F6                 ja      short loc_40E6B0
.text:0040E6F8
.text:0040E6F8 loc_40E6F8:                             ; CODE XREF: sub_40E640+68↑j
.text:0040E6F8                 mov     esi, ecx
.text:0040E6FA                 mov     edx, ebx
.text:0040E6FC                 dec     ecx
.text:0040E6FD                 test    esi, esi
.text:0040E6FF                 jz      short loc_40E721
.text:0040E701                 jmp     short loc_40E710
.text:0040E701 ; ---------------------------------------------------------------------------
.text:0040E703                 align 10h
.text:0040E710
.text:0040E710 loc_40E710:                             ; CODE XREF: sub_40E640+C1↑j
.text:0040E710                                         ; sub_40E640+DF↓j
.text:0040E710                 movzx   ebx, [esp+0Ch+var_9]
.text:0040E715                 dec     edx
.text:0040E716                 cmp     [edx], bl
.text:0040E718                 jz      short loc_40E727
.text:0040E71A                 mov     esi, ecx
.text:0040E71C                 dec     ecx
.text:0040E71D                 test    esi, esi
.text:0040E71F                 jnz     short loc_40E710
.text:0040E721
.text:0040E721 loc_40E721:                             ; CODE XREF: sub_40E640+BF↑j
.text:0040E721                 xor     eax, eax
.text:0040E723
.text:0040E723 loc_40E723:                             ; CODE XREF: sub_40E640+E9↓j
.text:0040E723                                         ; sub_40E640+ED↓j ...
.text:0040E723                 pop     edx
.text:0040E724                 pop     ebx
.text:0040E725                 pop     esi
.text:0040E726                 retn
.text:0040E727 ; ---------------------------------------------------------------------------
.text:0040E727
.text:0040E727 loc_40E727:                             ; CODE XREF: sub_40E640+38↑j
.text:0040E727                                         ; sub_40E640+D8↑j
.text:0040E727                 mov     eax, edx
.text:0040E729                 jmp     short loc_40E723
.text:0040E72B ; ---------------------------------------------------------------------------
.text:0040E72B
.text:0040E72B loc_40E72B:                             ; CODE XREF: sub_40E640+AE↑j
.text:0040E72B                 mov     eax, ebx
.text:0040E72D                 jmp     short loc_40E723
.text:0040E72F ; ---------------------------------------------------------------------------
.text:0040E72F
.text:0040E72F loc_40E72F:                             ; CODE XREF: sub_40E640+A5↑j
.text:0040E72F                 lea     eax, [ebx+1]
.text:0040E732                 jmp     short loc_40E723
.text:0040E734 ; ---------------------------------------------------------------------------
.text:0040E734
.text:0040E734 loc_40E734:                             ; CODE XREF: sub_40E640+9B↑j
.text:0040E734                 lea     eax, [ebx+2]
.text:0040E737                 jmp     short loc_40E723
.text:0040E739 ; ---------------------------------------------------------------------------
.text:0040E739
.text:0040E739 loc_40E739:                             ; CODE XREF: sub_40E640+91↑j
.text:0040E739                 lea     eax, [ebx+3]
.text:0040E73C                 jmp     short loc_40E723
.text:0040E73C sub_40E640      endp
.text:0040E73C
.text:0040E73C ; ---------------------------------------------------------------------------
.text:0040E73E                 align 10h
.text:0040E740
.text:0040E740 ; =============== S U B R O U T I N E =======================================
.text:0040E740
.text:0040E740
.text:0040E740 sub_40E740      proc near               ; CODE XREF: sub_409230+17B↑p
.text:0040E740
.text:0040E740 dwMilliseconds  = dword ptr -0Ch
.text:0040E740 var_8           = dword ptr -8
.text:0040E740 var_4           = dword ptr -4
.text:0040E740 arg_0           = dword ptr  4
.text:0040E740 arg_4           = dword ptr  8
.text:0040E740
.text:0040E740                 sub     esp, 0Ch
.text:0040E743                 mov     eax, [esp+0Ch+arg_0]
.text:0040E747                 mov     [esp+0Ch+var_8], ebx
.text:0040E74B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040E74F                 mov     [esp+0Ch+var_4], esi
.text:0040E753                 mov     ecx, [eax+4]
.text:0040E756                 cmp     ecx, 0F4240h
.text:0040E75C                 ja      short loc_40E7A4
.text:0040E75E                 mov     esi, [eax]
.text:0040E760                 mov     edx, 431BDE83h
.text:0040E765                 mov     eax, ecx
.text:0040E767                 imul    edx
.text:0040E769                 imul    esi, 3E8h
.text:0040E76F                 sar     ecx, 1Fh
.text:0040E772                 sar     edx, 12h
.text:0040E775                 sub     edx, ecx
.text:0040E777                 lea     ecx, [edx+esi]
.text:0040E77A                 mov     [esp+0Ch+dwMilliseconds], ecx ; dwMilliseconds
.text:0040E77D                 call    Sleep
.text:0040E782                 sub     esp, 4
.text:0040E785                 test    ebx, ebx
.text:0040E787                 jz      short loc_40E796
.text:0040E789                 mov     dword ptr [ebx], 0
.text:0040E78F                 mov     dword ptr [ebx+4], 0
.text:0040E796
.text:0040E796 loc_40E796:                             ; CODE XREF: sub_40E740+47↑j
.text:0040E796                 xor     eax, eax
.text:0040E798
.text:0040E798 loc_40E798:                             ; CODE XREF: sub_40E740+74↓j
.text:0040E798                 mov     ebx, [esp+0Ch+var_8]
.text:0040E79C                 mov     esi, [esp+0Ch+var_4]
.text:0040E7A0                 add     esp, 0Ch
.text:0040E7A3                 retn
.text:0040E7A4 ; ---------------------------------------------------------------------------
.text:0040E7A4
.text:0040E7A4 loc_40E7A4:                             ; CODE XREF: sub_40E740+1C↑j
.text:0040E7A4                 call    _errno
.text:0040E7A9                 mov     dword ptr [eax], 16h
.text:0040E7AF                 mov     eax, 0FFFFFFFFh
.text:0040E7B4                 jmp     short loc_40E798
.text:0040E7B4 sub_40E740      endp
.text:0040E7B4
.text:0040E7B4 ; ---------------------------------------------------------------------------
.text:0040E7B6                 align 10h
.text:0040E7C0
.text:0040E7C0 ; =============== S U B R O U T I N E =======================================
.text:0040E7C0
.text:0040E7C0
.text:0040E7C0 sub_40E7C0      proc near               ; CODE XREF: sub_40AA80+3F↑p
.text:0040E7C0                                         ; sub_410D40+3C2↓p
.text:0040E7C0
.text:0040E7C0 var_1C          = dword ptr -1Ch
.text:0040E7C0 var_18          = dword ptr -18h
.text:0040E7C0 var_C           = dword ptr -0Ch
.text:0040E7C0 var_8           = dword ptr -8
.text:0040E7C0 var_4           = dword ptr -4
.text:0040E7C0 arg_0           = dword ptr  4
.text:0040E7C0 arg_4           = dword ptr  8
.text:0040E7C0
.text:0040E7C0                 sub     esp, 1Ch
.text:0040E7C3                 mov     edx, [esp+1Ch+arg_4]
.text:0040E7C7                 mov     [esp+1Ch+var_4], ebx
.text:0040E7CB                 mov     ebx, [esp+1Ch+arg_0]
.text:0040E7CF                 mov     [esp+1Ch+var_18], edx
.text:0040E7D3                 lea     edx, [esp+1Ch+var_C]
.text:0040E7D7                 mov     [esp+1Ch+var_1C], edx
.text:0040E7DA                 call    sub_410690
.text:0040E7DF                 test    eax, eax
.text:0040E7E1                 mov     edx, 0FFFFFFFFh
.text:0040E7E6                 jnz     short loc_40E80A
.text:0040E7E8                 mov     ecx, [esp+1Ch+var_C]
.text:0040E7EC                 mov     edx, 10624DD3h
.text:0040E7F1                 mov     [ebx], ecx
.text:0040E7F3                 mov     ecx, [esp+1Ch+var_8]
.text:0040E7F7                 mov     eax, ecx
.text:0040E7F9                 imul    edx
.text:0040E7FB                 mov     eax, ecx
.text:0040E7FD                 sar     eax, 1Fh
.text:0040E800                 sar     edx, 6
.text:0040E803                 sub     edx, eax
.text:0040E805                 mov     [ebx+4], edx
.text:0040E808                 xor     edx, edx
.text:0040E80A
.text:0040E80A loc_40E80A:                             ; CODE XREF: sub_40E7C0+26↑j
.text:0040E80A                 mov     ebx, [esp+1Ch+var_4]
.text:0040E80E                 mov     eax, edx
.text:0040E810                 add     esp, 1Ch
.text:0040E813                 retn
.text:0040E813 sub_40E7C0      endp
.text:0040E813
.text:0040E813 ; ---------------------------------------------------------------------------
.text:0040E814                 align 10h
.text:0040E820
.text:0040E820 ; =============== S U B R O U T I N E =======================================
.text:0040E820
.text:0040E820
.text:0040E820 sub_40E820      proc near               ; CODE XREF: sub_40AA80+16↑p
.text:0040E820
.text:0040E820 var_2C          = dword ptr -2Ch
.text:0040E820 var_28          = dword ptr -28h
.text:0040E820 var_24          = dword ptr -24h
.text:0040E820 var_20          = dword ptr -20h
.text:0040E820 var_1C          = dword ptr -1Ch
.text:0040E820 var_18          = dword ptr -18h
.text:0040E820 var_10          = dword ptr -10h
.text:0040E820 var_C           = dword ptr -0Ch
.text:0040E820 var_8           = dword ptr -8
.text:0040E820 var_4           = dword ptr -4
.text:0040E820 arg_0           = dword ptr  4
.text:0040E820 arg_4           = dword ptr  8
.text:0040E820
.text:0040E820                 sub     esp, 2Ch
.text:0040E823                 mov     eax, [esp+2Ch+arg_0]
.text:0040E827                 mov     [esp+2Ch+var_10], ebx
.text:0040E82B                 mov     ebx, 0FFFFFFFFh
.text:0040E830                 test    eax, eax
.text:0040E832                 mov     [esp+2Ch+var_C], esi
.text:0040E836                 mov     [esp+2Ch+var_8], edi
.text:0040E83A                 mov     [esp+2Ch+var_4], ebp
.text:0040E83E                 jz      loc_40E930
.text:0040E844                 test    eax, eax
.text:0040E846                 js      loc_40E923
.text:0040E84C                 sub     eax, 2
.text:0040E84F                 cmp     eax, 1
.text:0040E852                 ja      loc_40E923
.text:0040E858                 mov     ebp, ds:dword_416454
.text:0040E85E                 mov     edi, ds:dword_416450
.text:0040E864                 mov     eax, ebp
.text:0040E866                 or      eax, edi
.text:0040E868                 jz      loc_40E906
.text:0040E86E
.text:0040E86E loc_40E86E:                             ; CODE XREF: sub_40E820+FE↓j
.text:0040E86E                 rdtsc
.text:0040E870                 mov     [esp+2Ch+var_24], edi
.text:0040E874                 mov     ebx, eax
.text:0040E876                 mov     esi, edx
.text:0040E878                 mov     [esp+2Ch+var_20], ebp
.text:0040E87C                 mov     [esp+2Ch+var_2C], eax
.text:0040E87F                 mov     [esp+2Ch+var_28], edx
.text:0040E883                 call    sub_412C30
.text:0040E888                 mov     edx, [esp+2Ch+arg_4]
.text:0040E88C                 mov     [edx], eax
.text:0040E88E                 mov     [esp+2Ch+var_2C], ebx
.text:0040E891                 mov     ebx, 3B9ACA00h
.text:0040E896                 mov     [esp+2Ch+var_24], edi
.text:0040E89A                 mov     [esp+2Ch+var_20], ebp
.text:0040E89E                 mov     [esp+2Ch+var_28], esi
.text:0040E8A2                 call    sub_413070
.text:0040E8A7                 mov     [esp+2Ch+var_1C], eax
.text:0040E8AB                 mov     eax, [esp+2Ch+var_1C]
.text:0040E8AF                 mov     [esp+2Ch+var_18], edx
.text:0040E8B3                 mov     [esp+2Ch+var_24], edi
.text:0040E8B7                 mul     ebx
.text:0040E8B9                 mov     ebx, [esp+2Ch+var_18]
.text:0040E8BD                 mov     [esp+2Ch+var_20], ebp
.text:0040E8C1                 imul    ebx, 3B9ACA00h
.text:0040E8C7                 mov     ecx, eax
.text:0040E8C9                 mov     [esp+2Ch+var_2C], ecx
.text:0040E8CC                 lea     edx, [ebx+edx]
.text:0040E8CF                 mov     [esp+2Ch+var_28], edx
.text:0040E8D3                 call    sub_412C30
.text:0040E8D8                 mov     ebx, [esp+2Ch+arg_4]
.text:0040E8DC                 mov     [ebx+4], eax
.text:0040E8DF                 xor     ebx, ebx
.text:0040E8E1                 jmp     short loc_40E8F0
.text:0040E8E1 ; ---------------------------------------------------------------------------
.text:0040E8E3                 align 10h
.text:0040E8F0
.text:0040E8F0 loc_40E8F0:                             ; CODE XREF: sub_40E820+C1↑j
.text:0040E8F0                                         ; sub_40E820+FC↓j ...
.text:0040E8F0                 mov     eax, ebx
.text:0040E8F2                 mov     esi, [esp+2Ch+var_C]
.text:0040E8F6                 mov     ebx, [esp+2Ch+var_10]
.text:0040E8FA                 mov     edi, [esp+2Ch+var_8]
.text:0040E8FE                 mov     ebp, [esp+2Ch+var_4]
.text:0040E902                 add     esp, 2Ch
.text:0040E905                 retn
.text:0040E906 ; ---------------------------------------------------------------------------
.text:0040E906
.text:0040E906 loc_40E906:                             ; CODE XREF: sub_40E820+48↑j
.text:0040E906                 call    sub_410780
.text:0040E90B                 mov     ds:dword_416454, edx
.text:0040E911                 mov     edi, eax
.text:0040E913                 mov     ebp, edx
.text:0040E915                 mov     ds:dword_416450, eax
.text:0040E91A                 or      edx, edi
.text:0040E91C                 jz      short loc_40E8F0
.text:0040E91E                 jmp     loc_40E86E
.text:0040E923 ; ---------------------------------------------------------------------------
.text:0040E923
.text:0040E923 loc_40E923:                             ; CODE XREF: sub_40E820+26↑j
.text:0040E923                                         ; sub_40E820+32↑j
.text:0040E923                 call    _errno
.text:0040E928                 mov     dword ptr [eax], 16h
.text:0040E92E                 jmp     short loc_40E8F0
.text:0040E930 ; ---------------------------------------------------------------------------
.text:0040E930
.text:0040E930 loc_40E930:                             ; CODE XREF: sub_40E820+1E↑j
.text:0040E930                 mov     [esp+2Ch+var_28], 0
.text:0040E938                 mov     edx, [esp+2Ch+arg_4]
.text:0040E93C                 mov     [esp+2Ch+var_2C], edx
.text:0040E93F                 call    sub_410690
.text:0040E944                 mov     ebx, eax
.text:0040E946                 jmp     short loc_40E8F0
.text:0040E946 sub_40E820      endp
.text:0040E946
.text:0040E946 ; ---------------------------------------------------------------------------
.text:0040E948                 align 10h
.text:0040E950                 xor     eax, eax
.text:0040E952                 retn
.text:0040E952 ; ---------------------------------------------------------------------------
.text:0040E953                 align 10h
.text:0040E960
.text:0040E960 ; =============== S U B R O U T I N E =======================================
.text:0040E960
.text:0040E960 ; Attributes: info_from_lumina
.text:0040E960
.text:0040E960 ___get_errno    proc near               ; CODE XREF: sub_40EBF0+B↓p
.text:0040E960
.text:0040E960 arg_0           = dword ptr  4
.text:0040E960
.text:0040E960                 mov     eax, [esp+arg_0]
.text:0040E964                 cmp     eax, 53h ; 'S'
.text:0040E967                 jg      loc_40EA60
.text:0040E96D                 cmp     eax, 52h ; 'R'
.text:0040E970                 jge     short loc_40E9C2
.text:0040E972                 cmp     eax, 0Fh
.text:0040E975                 jz      short loc_40E990
.text:0040E977                 cmp     eax, 0Fh
.text:0040E97A                 jg      short loc_40E9F0
.text:0040E97C                 cmp     eax, 9
.text:0040E97F                 jg      short loc_40E9D0
.text:0040E981                 cmp     eax, 7
.text:0040E984                 jge     short loc_40E9C9
.text:0040E986                 cmp     eax, 3
.text:0040E989                 jg      short loc_40E9AA
.text:0040E98B                 cmp     eax, 2
.text:0040E98E                 jl      short loc_40E9A3
.text:0040E990
.text:0040E990 loc_40E990:                             ; CODE XREF: ___get_errno+15↑j
.text:0040E990                                         ; ___get_errno+9D↓j ...
.text:0040E990                 mov     edx, 2
.text:0040E995                 lea     esi, [esi+0]
.text:0040E999                 lea     edi, [edi+0]
.text:0040E9A0
.text:0040E9A0 loc_40E9A0:                             ; CODE XREF: ___get_errno+48↓j
.text:0040E9A0                                         ; ___get_errno+59↓j ...
.text:0040E9A0                 mov     eax, edx
.text:0040E9A2                 retn
.text:0040E9A3 ; ---------------------------------------------------------------------------
.text:0040E9A3
.text:0040E9A3 loc_40E9A3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040E9A3                                         ; ___get_errno+78↓j ...
.text:0040E9A3                 mov     edx, 16h
.text:0040E9A8                 jmp     short loc_40E9A0
.text:0040E9AA ; ---------------------------------------------------------------------------
.text:0040E9AA
.text:0040E9AA loc_40E9AA:                             ; CODE XREF: ___get_errno+29↑j
.text:0040E9AA                 cmp     eax, 5
.text:0040E9AD                 jz      short loc_40E9C2
.text:0040E9AF                 cmp     eax, 5
.text:0040E9B2                 jg      short loc_40E9BB
.text:0040E9B4                 mov     edx, 18h
.text:0040E9B9                 jmp     short loc_40E9A0
.text:0040E9BB ; ---------------------------------------------------------------------------
.text:0040E9BB
.text:0040E9BB loc_40E9BB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040E9BB                                         ; ___get_errno+180↓j
.text:0040E9BB                 mov     edx, 9
.text:0040E9C0                 jmp     short loc_40E9A0
.text:0040E9C2 ; ---------------------------------------------------------------------------
.text:0040E9C2
.text:0040E9C2 loc_40E9C2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040E9C2                                         ; ___get_errno+4D↑j ...
.text:0040E9C2                 mov     edx, 0Dh
.text:0040E9C7                 jmp     short loc_40E9A0
.text:0040E9C9 ; ---------------------------------------------------------------------------
.text:0040E9C9
.text:0040E9C9 loc_40E9C9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040E9C9                                         ; ___get_errno+73↓j ...
.text:0040E9C9                 mov     edx, 0Ch
.text:0040E9CE                 jmp     short loc_40E9A0
.text:0040E9D0 ; ---------------------------------------------------------------------------
.text:0040E9D0
.text:0040E9D0 loc_40E9D0:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040E9D0                 cmp     eax, 0Dh
.text:0040E9D3                 jg      short loc_40E9C9
.text:0040E9D5                 cmp     eax, 0Ch
.text:0040E9D8                 jge     short loc_40E9A3
.text:0040E9DA                 cmp     eax, 0Ah
.text:0040E9DD                 mov     edx, 7
.text:0040E9E2                 jz      short loc_40E9A0
.text:0040E9E4                 cmp     eax, 0Bh
.text:0040E9E7                 jnz     short loc_40E9A3
.text:0040E9E9
.text:0040E9E9 loc_40E9E9:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040E9E9                 mov     edx, 8
.text:0040E9EE                 jmp     short loc_40E9A0
.text:0040E9F0 ; ---------------------------------------------------------------------------
.text:0040E9F0
.text:0040E9F0 loc_40E9F0:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040E9F0                 cmp     eax, 22h ; '"'
.text:0040E9F3                 jg      short loc_40EA24
.text:0040E9F5                 cmp     eax, 16h
.text:0040E9F8                 jge     short loc_40E9C2
.text:0040E9FA                 cmp     eax, 12h
.text:0040E9FD                 jz      short loc_40E990
.text:0040E9FF                 cmp     eax, 12h
.text:0040EA02                 jg      short loc_40EA15
.text:0040EA04                 cmp     eax, 10h
.text:0040EA07                 jz      short loc_40E9C2
.text:0040EA09                 mov     edx, 12h
.text:0040EA0E                 cmp     eax, 11h
.text:0040EA11
.text:0040EA11 loc_40EA11:                             ; CODE XREF: ___get_errno+172↓j
.text:0040EA11                                         ; ___get_errno+24C↓j ...
.text:0040EA11                 jnz     short loc_40E9A3
.text:0040EA13                 jmp     short loc_40E9A0
.text:0040EA15 ; ---------------------------------------------------------------------------
.text:0040EA15
.text:0040EA15 loc_40EA15:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040EA15                 cmp     eax, 14h
.text:0040EA18                 jle     short loc_40E9C2
.text:0040EA1A
.text:0040EA1A loc_40EA1A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040EA1A                 mov     edx, 10h
.text:0040EA1F                 jmp     loc_40E9A0
.text:0040EA24 ; ---------------------------------------------------------------------------
.text:0040EA24
.text:0040EA24 loc_40EA24:                             ; CODE XREF: ___get_errno+93↑j
.text:0040EA24                 cmp     eax, 41h ; 'A'
.text:0040EA27                 jz      short loc_40E9C2
.text:0040EA29                 cmp     eax, 41h ; 'A'
.text:0040EA2C                 jg      short loc_40EA41
.text:0040EA2E                 cmp     eax, 24h ; '$'
.text:0040EA31                 jz      short loc_40E9C2
.text:0040EA33                 cmp     eax, 35h ; '5'
.text:0040EA36                 jnz     loc_40E9A3
.text:0040EA3C                 jmp     loc_40E990
.text:0040EA41 ; ---------------------------------------------------------------------------
.text:0040EA41
.text:0040EA41 loc_40EA41:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040EA41                 cmp     eax, 43h ; 'C'
.text:0040EA44                 jz      loc_40E990
.text:0040EA4A                 cmp     eax, 50h ; 'P'
.text:0040EA4D                 jnz     loc_40E9A3
.text:0040EA53
.text:0040EA53 loc_40EA53:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040EA53                 mov     edx, 11h
.text:0040EA58                 jmp     loc_40E9A0
.text:0040EA58 ; ---------------------------------------------------------------------------
.text:0040EA5D                 align 10h
.text:0040EA60
.text:0040EA60 loc_40EA60:                             ; CODE XREF: ___get_errno+7↑j
.text:0040EA60                 cmp     eax, 0A1h ; '¡'
.text:0040EA65                 jz      loc_40E990
.text:0040EA6B                 cmp     eax, 0A1h ; '¡'
.text:0040EA70                 jg      loc_40EB20
.text:0040EA76                 cmp     eax, 81h
.text:0040EA7B                 jg      short loc_40EAE5
.text:0040EA7D                 cmp     eax, 80h ; '€'
.text:0040EA82                 mov     edx, 0Ah
.text:0040EA87                 jge     loc_40E9A0
.text:0040EA8D                 cmp     eax, 6Ch ; 'l'
.text:0040EA90                 jz      loc_40E9C2
.text:0040EA96                 cmp     eax, 6Ch ; 'l'
.text:0040EA99                 jg      short loc_40EAB7
.text:0040EA9B                 cmp     eax, 57h ; 'W'
.text:0040EA9E                 jz      loc_40E9A3
.text:0040EAA4                 cmp     eax, 59h ; 'Y'
.text:0040EAA7                 jnz     loc_40E9A3
.text:0040EAAD
.text:0040EAAD loc_40EAAD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040EAAD                                         ; ___get_errno+23C↓j
.text:0040EAAD                 mov     edx, 0Bh
.text:0040EAB2                 jmp     loc_40E9A0
.text:0040EAB7 ; ---------------------------------------------------------------------------
.text:0040EAB7
.text:0040EAB7 loc_40EAB7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040EAB7                 cmp     eax, 70h ; 'p'
.text:0040EABA                 mov     edx, 1Ch
.text:0040EABF                 jz      loc_40E9A0
.text:0040EAC5                 cmp     eax, 70h ; 'p'
.text:0040EAC8                 jg      short loc_40EAD7
.text:0040EACA                 mov     edx, 20h ; ' '
.text:0040EACF                 cmp     eax, 6Dh ; 'm'
.text:0040EAD2                 jmp     loc_40EA11
.text:0040EAD7 ; ---------------------------------------------------------------------------
.text:0040EAD7
.text:0040EAD7 loc_40EAD7:                             ; CODE XREF: ___get_errno+168↑j
.text:0040EAD7                 cmp     eax, 72h ; 'r'
.text:0040EADA
.text:0040EADA loc_40EADA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040EADA                 jnz     loc_40E9A3
.text:0040EAE0                 jmp     loc_40E9BB
.text:0040EAE5 ; ---------------------------------------------------------------------------
.text:0040EAE5
.text:0040EAE5 loc_40EAE5:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040EAE5                 cmp     eax, 84h ; '„'
.text:0040EAEA                 jz      loc_40E9C2
.text:0040EAF0                 cmp     eax, 84h ; '„'
.text:0040EAF5                 jg      short loc_40EAFE
.text:0040EAF7                 cmp     eax, 82h ; '‚'
.text:0040EAFC                 jmp     short loc_40EADA
.text:0040EAFE ; ---------------------------------------------------------------------------
.text:0040EAFE
.text:0040EAFE loc_40EAFE:                             ; CODE XREF: ___get_errno+195↑j
.text:0040EAFE                 cmp     eax, 91h ; '‘'
.text:0040EB03                 mov     edx, 29h ; ')'
.text:0040EB08                 jz      loc_40E9A0
.text:0040EB0E                 cmp     eax, 9Eh ; 'ž'
.text:0040EB13
.text:0040EB13 loc_40EB13:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040EB13                 jnz     loc_40E9A3
.text:0040EB19                 jmp     loc_40E9C2
.text:0040EB19 ; ---------------------------------------------------------------------------
.text:0040EB1E                 align 10h
.text:0040EB20
.text:0040EB20 loc_40EB20:                             ; CODE XREF: ___get_errno+110↑j
.text:0040EB20                 cmp     eax, 0CEh ; 'Î'
.text:0040EB25                 jz      loc_40E990
.text:0040EB2B                 cmp     eax, 0CEh ; 'Î'
.text:0040EB30                 jg      short loc_40EB80
.text:0040EB32                 cmp     eax, 0AAh ; 'ª'
.text:0040EB37                 jz      loc_40EA1A
.text:0040EB3D                 cmp     eax, 0AAh ; 'ª'
.text:0040EB42                 jg      short loc_40EB56
.text:0040EB44                 cmp     eax, 0A4h ; '¤'
.text:0040EB49                 jz      loc_40EAAD
.text:0040EB4F                 cmp     eax, 0A7h ; '§'
.text:0040EB54                 jmp     short loc_40EB13
.text:0040EB56 ; ---------------------------------------------------------------------------
.text:0040EB56
.text:0040EB56 loc_40EB56:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040EB56                 cmp     eax, 0B7h ; '·'
.text:0040EB5B                 jz      loc_40EA53
.text:0040EB61                 cmp     eax, 0B7h ; '·'
.text:0040EB66                 jl      loc_40E9A3
.text:0040EB6C                 sub     eax, 0BCh ; '¼'
.text:0040EB71                 cmp     eax, 0Eh
.text:0040EB74                 ja      loc_40E9A3
.text:0040EB7A                 jmp     loc_40E9E9
.text:0040EB7A ; ---------------------------------------------------------------------------
.text:0040EB7F                 align 10h
.text:0040EB80
.text:0040EB80 loc_40EB80:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040EB80                 cmp     eax, 46Bh
.text:0040EB85                 mov     edx, 24h ; '$'
.text:0040EB8A                 jz      loc_40E9A0
.text:0040EB90                 cmp     eax, 46Bh
.text:0040EB95                 jg      short loc_40EBB1
.text:0040EB97                 cmp     eax, 0D7h ; '×'
.text:0040EB9C                 jz      loc_40EAAD
.text:0040EBA2                 mov     edx, 5
.text:0040EBA7                 cmp     eax, 45Dh
.text:0040EBAC                 jmp     loc_40EA11
.text:0040EBB1 ; ---------------------------------------------------------------------------
.text:0040EBB1
.text:0040EBB1 loc_40EBB1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040EBB1                 cmp     eax, 4D5h
.text:0040EBB6                 mov     edx, 4
.text:0040EBBB                 jz      loc_40E9A0
.text:0040EBC1                 cmp     eax, 4D5h
.text:0040EBC6                 jg      short loc_40EBD7
.text:0040EBC8                 mov     edx, 13h
.text:0040EBCD                 cmp     eax, 4B0h
.text:0040EBD2                 jmp     loc_40EA11
.text:0040EBD7 ; ---------------------------------------------------------------------------
.text:0040EBD7
.text:0040EBD7 loc_40EBD7:                             ; CODE XREF: ___get_errno+266↑j
.text:0040EBD7                 cmp     eax, 718h
.text:0040EBDC                 jnz     loc_40E9A3
.text:0040EBE2                 jmp     loc_40E9C9
.text:0040EBE2 ___get_errno    endp
.text:0040EBE2
.text:0040EBE2 ; ---------------------------------------------------------------------------
.text:0040EBE7                 align 10h
.text:0040EBF0
.text:0040EBF0 ; =============== S U B R O U T I N E =======================================
.text:0040EBF0
.text:0040EBF0
.text:0040EBF0 sub_40EBF0      proc near               ; CODE XREF: sub_411210:loc_40CC3D↑p
.text:0040EBF0                                         ; sub_40D1E0:loc_40D248↑p ...
.text:0040EBF0
.text:0040EBF0 var_C           = dword ptr -0Ch
.text:0040EBF0
.text:0040EBF0                 sub     esp, 0Ch
.text:0040EBF3                 call    GetLastError
.text:0040EBF8                 mov     [esp+0Ch+var_C], eax
.text:0040EBFB                 call    ___get_errno
.text:0040EC00                 add     esp, 0Ch
.text:0040EC03                 retn
.text:0040EC03 sub_40EBF0      endp
.text:0040EC03
.text:0040EC03 ; ---------------------------------------------------------------------------
.text:0040EC04                 align 10h
.text:0040EC10
.text:0040EC10 ; =============== S U B R O U T I N E =======================================
.text:0040EC10
.text:0040EC10
.text:0040EC10 sub_40EC10      proc near               ; CODE XREF: .text:0040D153↑p
.text:0040EC10                                         ; .text:0040D1A3↑p
.text:0040EC10
.text:0040EC10 arg_4           = dword ptr  8
.text:0040EC10
.text:0040EC10                 sub     esp, 0Ch
.text:0040EC13                 mov     edx, [esp+0Ch+arg_4]
.text:0040EC17                 test    edx, edx
.text:0040EC19                 jz      short loc_40EC20
.text:0040EC1B                 add     esp, 0Ch
.text:0040EC1E                 jmp     short sub_40EC60
.text:0040EC20 ; ---------------------------------------------------------------------------
.text:0040EC20
.text:0040EC20 loc_40EC20:                             ; CODE XREF: sub_40EC10+9↑j
.text:0040EC20                 call    _errno
.text:0040EC25                 mov     dword ptr [eax], 16h
.text:0040EC2B                 xor     eax, eax
.text:0040EC2D                 add     esp, 0Ch
.text:0040EC30                 retn
.text:0040EC30 sub_40EC10      endp
.text:0040EC30
.text:0040EC31 ; ---------------------------------------------------------------------------
.text:0040EC31                 jmp     short sub_40EC40
.text:0040EC31 ; ---------------------------------------------------------------------------
.text:0040EC33                 align 10h
.text:0040EC40
.text:0040EC40 ; =============== S U B R O U T I N E =======================================
.text:0040EC40
.text:0040EC40
.text:0040EC40 ; int __cdecl sub_40EC40(LPCSTR)
.text:0040EC40 sub_40EC40      proc near               ; CODE XREF: sub_411210-467C↑p
.text:0040EC40                                         ; .text:0040D348↑p ...
.text:0040EC40
.text:0040EC40 lpFileName      = dword ptr -0Ch
.text:0040EC40 Destination     = dword ptr -8
.text:0040EC40 arg_0           = dword ptr  4
.text:0040EC40
.text:0040EC40                 sub     esp, 0Ch
.text:0040EC43                 mov     edx, [esp+0Ch+arg_0]
.text:0040EC47                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040EC4F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040EC52                 call    sub_40EC60
.text:0040EC57                 add     esp, 0Ch
.text:0040EC5A                 retn
.text:0040EC5A sub_40EC40      endp
.text:0040EC5A
.text:0040EC5A ; ---------------------------------------------------------------------------
.text:0040EC5B                 align 10h
.text:0040EC60
.text:0040EC60 ; =============== S U B R O U T I N E =======================================
.text:0040EC60
.text:0040EC60
.text:0040EC60 ; int __cdecl sub_40EC60(LPCSTR lpFileName, char *Destination)
.text:0040EC60 sub_40EC60      proc near               ; CODE XREF: sub_40EC10+E↑j
.text:0040EC60                                         ; sub_40EC40+12↑p
.text:0040EC60
.text:0040EC60 Size            = dword ptr -2Ch
.text:0040EC60 nBufferLength   = dword ptr -28h
.text:0040EC60 lpBuffer        = dword ptr -24h
.text:0040EC60 lpFilePart      = dword ptr -20h
.text:0040EC60 FilePart        = dword ptr -14h
.text:0040EC60 lpFileName      = dword ptr  4
.text:0040EC60 Destination     = dword ptr  8
.text:0040EC60
.text:0040EC60                 push    ebp
.text:0040EC61                 push    edi
.text:0040EC62                 push    esi
.text:0040EC63                 push    ebx
.text:0040EC64                 sub     esp, 1Ch
.text:0040EC67                 mov     edi, [esp+2Ch+lpFileName]
.text:0040EC6B                 mov     ebp, [esp+2Ch+Destination]
.text:0040EC6F                 test    edi, edi
.text:0040EC71                 jz      loc_40ED79
.text:0040EC77                 cmp     byte ptr [edi], 0
.text:0040EC7A                 jz      loc_40ED6C
.text:0040EC80                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040EC87                 call    malloc
.text:0040EC8C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040EC90                 lea     edx, [esp+2Ch+FilePart]
.text:0040EC94                 mov     ebx, eax
.text:0040EC96                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040EC9A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040ECA2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040ECA5                 call    GetFullPathNameA
.text:0040ECAA                 sub     esp, 10h
.text:0040ECAD                 mov     esi, eax
.text:0040ECAF                 test    eax, eax
.text:0040ECB1                 jz      loc_40ED5A
.text:0040ECB7                 cmp     eax, 104h
.text:0040ECBC                 jle     short loc_40ECCD
.text:0040ECBE                 test    ebp, ebp
.text:0040ECC0                 jz      short loc_40ED29
.text:0040ECC2                 call    _errno
.text:0040ECC7                 mov     dword ptr [eax], 26h ; '&'
.text:0040ECCD
.text:0040ECCD loc_40ECCD:                             ; CODE XREF: sub_40EC60+5C↑j
.text:0040ECCD                                         ; sub_40EC60+F5↓j
.text:0040ECCD                 call    _errno
.text:0040ECD2                 mov     edi, [eax]
.text:0040ECD4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040ECDC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040ECDF                 call    sub_40ED90
.text:0040ECE4                 test    eax, eax
.text:0040ECE6                 jnz     short loc_40ED00
.text:0040ECE8                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040ECED                 cmp     al, 2Fh ; '/'
.text:0040ECEF                 jz      short loc_40ED00
.text:0040ECF1                 cmp     al, 5Ch ; '\'
.text:0040ECF3                 jz      short loc_40ED00
.text:0040ECF5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040ECF9                 mov     byte ptr [esi+ebx+1], 0
.text:0040ECFE                 mov     esi, esi
.text:0040ED00
.text:0040ED00 loc_40ED00:                             ; CODE XREF: sub_40EC60+86↑j
.text:0040ED00                                         ; sub_40EC60+8F↑j ...
.text:0040ED00                 call    _errno
.text:0040ED05                 mov     [eax], edi
.text:0040ED07                 mov     [esp+2Ch+Size], ebx
.text:0040ED0A                 call    sub_40D040
.text:0040ED0F                 test    ebp, ebp
.text:0040ED11                 mov     eax, ebx
.text:0040ED13                 jz      short loc_40ED21
.text:0040ED15                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040ED19                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040ED1C                 call    strcpy
.text:0040ED21
.text:0040ED21 loc_40ED21:                             ; CODE XREF: sub_40EC60+B3↑j
.text:0040ED21                                         ; sub_40EC60+10A↓j
.text:0040ED21                 add     esp, 1Ch
.text:0040ED24                 pop     ebx
.text:0040ED25                 pop     esi
.text:0040ED26                 pop     edi
.text:0040ED27                 pop     ebp
.text:0040ED28                 retn
.text:0040ED29 ; ---------------------------------------------------------------------------
.text:0040ED29
.text:0040ED29 loc_40ED29:                             ; CODE XREF: sub_40EC60+60↑j
.text:0040ED29                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040ED2C                 lea     ecx, [eax+2]
.text:0040ED2F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040ED33                 call    realloc
.text:0040ED38                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040ED3C                 lea     edx, [esp+2Ch+FilePart]
.text:0040ED40                 mov     ebx, eax
.text:0040ED42                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040ED46                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040ED4A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040ED4D                 call    GetFullPathNameA
.text:0040ED52                 sub     esp, 10h
.text:0040ED55                 jmp     loc_40ECCD
.text:0040ED5A ; ---------------------------------------------------------------------------
.text:0040ED5A
.text:0040ED5A loc_40ED5A:                             ; CODE XREF: sub_40EC60+51↑j
.text:0040ED5A                 call    sub_40EBF0
.text:0040ED5F                 mov     esi, eax
.text:0040ED61                 call    _errno
.text:0040ED66                 mov     [eax], esi
.text:0040ED68
.text:0040ED68 loc_40ED68:                             ; CODE XREF: sub_40EC60+117↓j
.text:0040ED68                                         ; sub_40EC60+124↓j
.text:0040ED68                 xor     eax, eax
.text:0040ED6A                 jmp     short loc_40ED21
.text:0040ED6C ; ---------------------------------------------------------------------------
.text:0040ED6C
.text:0040ED6C loc_40ED6C:                             ; CODE XREF: sub_40EC60+1A↑j
.text:0040ED6C                 call    _errno
.text:0040ED71                 mov     dword ptr [eax], 2
.text:0040ED77                 jmp     short loc_40ED68
.text:0040ED79 ; ---------------------------------------------------------------------------
.text:0040ED79
.text:0040ED79 loc_40ED79:                             ; CODE XREF: sub_40EC60+11↑j
.text:0040ED79                 call    _errno
.text:0040ED7E                 mov     dword ptr [eax], 16h
.text:0040ED84                 jmp     short loc_40ED68
.text:0040ED84 sub_40EC60      endp
.text:0040ED84
.text:0040ED84 ; ---------------------------------------------------------------------------
.text:0040ED86                 align 10h
.text:0040ED90
.text:0040ED90 ; =============== S U B R O U T I N E =======================================
.text:0040ED90
.text:0040ED90
.text:0040ED90 ; int __cdecl sub_40ED90(LPCSTR lpFileName, int)
.text:0040ED90 sub_40ED90      proc near               ; CODE XREF: sub_411210-468D↑p
.text:0040ED90                                         ; .text:0040D022↑p ...
.text:0040ED90
.text:0040ED90 uMode           = dword ptr -1Ch
.text:0040ED90 var_10          = dword ptr -10h
.text:0040ED90 var_C           = dword ptr -0Ch
.text:0040ED90 var_8           = dword ptr -8
.text:0040ED90 var_4           = dword ptr -4
.text:0040ED90 lpFileName      = dword ptr  4
.text:0040ED90 arg_4           = dword ptr  8
.text:0040ED90
.text:0040ED90                 sub     esp, 1Ch
.text:0040ED93                 mov     [esp+1Ch+var_10], ebx
.text:0040ED97                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040ED9B                 mov     [esp+1Ch+var_4], ebp
.text:0040ED9F                 xor     ebp, ebp
.text:0040EDA1                 test    ebx, ebx
.text:0040EDA3                 mov     [esp+1Ch+var_C], esi
.text:0040EDA7                 mov     esi, [esp+1Ch+arg_4]
.text:0040EDAB                 mov     [esp+1Ch+var_8], edi
.text:0040EDAF                 jz      short loc_40EDB9
.text:0040EDB1                 test    esi, 0FFFFFFE8h
.text:0040EDB7                 jz      short loc_40EDE0
.text:0040EDB9
.text:0040EDB9 loc_40EDB9:                             ; CODE XREF: sub_40ED90+1F↑j
.text:0040EDB9                 call    _errno
.text:0040EDBE                 mov     dword ptr [eax], 16h
.text:0040EDC4
.text:0040EDC4 loc_40EDC4:                             ; CODE XREF: sub_40ED90+B1↓j
.text:0040EDC4                 mov     eax, 0FFFFFFFFh
.text:0040EDC9
.text:0040EDC9 loc_40EDC9:                             ; CODE XREF: sub_40ED90+86↓j
.text:0040EDC9                                         ; sub_40ED90+A4↓j
.text:0040EDC9                 mov     ebx, [esp+1Ch+var_10]
.text:0040EDCD                 mov     esi, [esp+1Ch+var_C]
.text:0040EDD1                 mov     edi, [esp+1Ch+var_8]
.text:0040EDD5                 mov     ebp, [esp+1Ch+var_4]
.text:0040EDD9                 add     esp, 1Ch
.text:0040EDDC                 retn
.text:0040EDDC ; ---------------------------------------------------------------------------
.text:0040EDDD                 align 10h
.text:0040EDE0
.text:0040EDE0 loc_40EDE0:                             ; CODE XREF: sub_40ED90+27↑j
.text:0040EDE0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040EDE7                 call    SetErrorMode
.text:0040EDEC                 sub     esp, 4
.text:0040EDEF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040EDF2                 call    GetFileAttributesA
.text:0040EDF7                 sub     esp, 4
.text:0040EDFA                 mov     edi, eax
.text:0040EDFC                 cmp     eax, 0FFFFFFFFh
.text:0040EDFF                 jz      short loc_40EE43
.text:0040EE01
.text:0040EE01 loc_40EE01:                             ; CODE XREF: sub_40ED90+C6↓j
.text:0040EE01                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040EE08                 call    SetErrorMode
.text:0040EE0D                 sub     esp, 4
.text:0040EE10                 mov     eax, 0FFFFFFFFh
.text:0040EE15                 inc     ebp
.text:0040EE16                 jz      short loc_40EDC9
.text:0040EE18                 test    esi, 10h
.text:0040EE1E                 jz      short loc_40EE28
.text:0040EE20                 test    edi, 10h
.text:0040EE26                 jz      short loc_40EE36
.text:0040EE28
.text:0040EE28 loc_40EE28:                             ; CODE XREF: sub_40ED90+8E↑j
.text:0040EE28                 and     esi, 2
.text:0040EE2B                 jz      short loc_40EE32
.text:0040EE2D                 and     edi, 1
.text:0040EE30                 jnz     short loc_40EE36
.text:0040EE32
.text:0040EE32 loc_40EE32:                             ; CODE XREF: sub_40ED90+9B↑j
.text:0040EE32                 xor     eax, eax
.text:0040EE34                 jmp     short loc_40EDC9
.text:0040EE36 ; ---------------------------------------------------------------------------
.text:0040EE36
.text:0040EE36 loc_40EE36:                             ; CODE XREF: sub_40ED90+96↑j
.text:0040EE36                                         ; sub_40ED90+A0↑j
.text:0040EE36                 call    _errno
.text:0040EE3B                 mov     dword ptr [eax], 0Dh
.text:0040EE41                 jmp     short loc_40EDC4
.text:0040EE43 ; ---------------------------------------------------------------------------
.text:0040EE43
.text:0040EE43 loc_40EE43:                             ; CODE XREF: sub_40ED90+6F↑j
.text:0040EE43                 call    sub_40EBF0
.text:0040EE48                 mov     ebp, eax
.text:0040EE4A                 call    _errno
.text:0040EE4F                 mov     [eax], ebp
.text:0040EE51                 mov     ebp, 0FFFFFFFFh
.text:0040EE56                 jmp     short loc_40EE01
.text:0040EE56 sub_40ED90      endp
.text:0040EE56
.text:0040EE56 ; ---------------------------------------------------------------------------
.text:0040EE58                 align 10h
.text:0040EE60 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040F07F↓o
.text:0040EE6C aLu             db '%lu',0              ; DATA XREF: .text:0040F08F↓o
.text:0040EE70 asc_40EE70      db ' ',0                ; DATA XREF: .text:loc_40F178↓o
.text:0040EE72                 align 10h
.text:0040EE80 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040EE80                                         ; DATA XREF: .text:0040F1AF↓o
.text:0040EEA0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40F1BD↓o
.text:0040EEAC aServer         db ' Server',0          ; DATA XREF: .text:0040F1E6↓o
.text:0040EEAC                                         ; .text:loc_40F35E↓o
.text:0040EEB4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40F1F8↓o
.text:0040EEC5 aDatacenterServ db ' Datacenter Server',0
.text:0040EEC5                                         ; DATA XREF: .text:loc_40F202↓o
.text:0040EED8 aStandardEditio db ' Standard Edition',0
.text:0040EED8                                         ; DATA XREF: .text:0040F22A↓o
.text:0040EEEA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40F234↓o
.text:0040EEF7 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040EEF7                                         ; DATA XREF: .text:loc_40F23E↓o
.text:0040EF0B aDatacenterEdit db ' Datacenter Edition',0
.text:0040EF0B                                         ; DATA XREF: .text:loc_40F248↓o
.text:0040EF1F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040F25B↓o
.text:0040EF2D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40F265↓o
.text:0040EF2D                                         ; .text:loc_40F370↓o
.text:0040EF3B                 align 10h
.text:0040EF40 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040EF40                                         ; DATA XREF: .text:0040F292↓o
.text:0040EF70 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040F2D9↓o
.text:0040EF7C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040F314↓o
.text:0040EF82 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040F32B↓o
.text:0040EF8B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040F342↓o
.text:0040EF94                 align 10h
.text:0040EFA0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040EFA0                                         ; DATA XREF: .text:0040F4B7↓o
.text:0040EFC3                 align 20h
.text:0040EFE0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040EFE0                                         ; DATA XREF: .text:0040F516↓o
.text:0040F006 ; ---------------------------------------------------------------------------
.text:0040F006
.text:0040F006 loc_40F006:                             ; DATA XREF: .text:loc_40F581↓o
.text:0040F006                 and     [ebx+45h], dl
.text:0040F009                 add     [eax], ah
.text:0040F00B                 push    ebx
.text:0040F00C                 push    eax
.text:0040F00D                 xor     [eax], eax
.text:0040F00F
.text:0040F00F loc_40F00F:                             ; DATA XREF: .text:loc_40F5FB↓o
.text:0040F00F                 and     [edi+53h], cl
.text:0040F012                 push    edx
.text:0040F013                 xor     al, [eax]
.text:0040F015                 lea     esi, [esi+0]
.text:0040F019                 lea     edi, [edi+0]
.text:0040F020                 push    edi
.text:0040F021                 push    esi
.text:0040F022                 push    ebx
.text:0040F023                 sub     esp, 130h
.text:0040F029                 mov     ebx, [esp+140h]
.text:0040F030                 call    sub_40F730
.text:0040F035                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F03A                 cmp     eax, 1
.text:0040F03D                 jz      loc_40F4E0
.text:0040F043                 cmp     eax, 1
.text:0040F046                 jb      loc_40F4B6
.text:0040F04C                 cmp     eax, 2
.text:0040F04F                 jz      loc_40F100
.text:0040F055                 cmp     eax, 3
.text:0040F058                 jz      short loc_40F0BF
.text:0040F05A                 lea     esi, [esi+0]
.text:0040F060
.text:0040F060 loc_40F060:                             ; CODE XREF: .text:0040F0F5↓j
.text:0040F060                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F066                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F06C
.text:0040F06C loc_40F06C:                             ; CODE XREF: .text:0040F4FF↓j
.text:0040F06C                 mov     [esp+10h], edx
.text:0040F070                 mov     ebx, [esp+144h]
.text:0040F077                 mov     [esp+0Ch], ecx
.text:0040F07B                 mov     [esp+8], eax
.text:0040F07F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040F087                 mov     [esp], ebx
.text:0040F08A                 call    sprintf
.text:0040F08F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040F097                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040F09D                 mov     ecx, [esp+148h]
.text:0040F0A4                 mov     [esp+8], edi
.text:0040F0A8                 mov     [esp], ecx
.text:0040F0AB                 call    sprintf
.text:0040F0B0                 mov     eax, 1
.text:0040F0B5
.text:0040F0B5 loc_40F0B5:                             ; CODE XREF: .text:0040F2AF↓j
.text:0040F0B5                                         ; .text:0040F2FC↓j
.text:0040F0B5                 add     esp, 130h
.text:0040F0BB                 pop     ebx
.text:0040F0BC                 pop     esi
.text:0040F0BD                 pop     edi
.text:0040F0BE                 retn
.text:0040F0BF ; ---------------------------------------------------------------------------
.text:0040F0BF
.text:0040F0BF loc_40F0BF:                             ; CODE XREF: .text:0040F058↑j
.text:0040F0BF                 mov     dword ptr [ebx], 7263694Dh
.text:0040F0C5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F0CC                 mov     dword ptr [ebx+8], 69572074h
.text:0040F0D3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F0DA                 mov     dword ptr [ebx+10h], 45432073h
.text:0040F0E1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040F0E7                 mov     esi, esi
.text:0040F0E9                 lea     edi, [edi+0]
.text:0040F0F0
.text:0040F0F0 loc_40F0F0:                             ; CODE XREF: .text:0040F198↓j
.text:0040F0F0                                         ; .text:0040F4D9↓j ...
.text:0040F0F0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F0F5                 jmp     loc_40F060
.text:0040F0F5 ; ---------------------------------------------------------------------------
.text:0040F0FA                 align 10h
.text:0040F100
.text:0040F100 loc_40F100:                             ; CODE XREF: .text:0040F04F↑j
.text:0040F100                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040F106                 cmp     edx, 3
.text:0040F109                 mov     eax, edx
.text:0040F10B                 jz      loc_40F475
.text:0040F111
.text:0040F111 loc_40F111:                             ; CODE XREF: .text:0040F47C↓j
.text:0040F111                 cmp     eax, 4
.text:0040F114                 jz      loc_40F435
.text:0040F11A
.text:0040F11A loc_40F11A:                             ; CODE XREF: .text:0040F43D↓j
.text:0040F11A                 cmp     eax, 4
.text:0040F11D                 ja      loc_40F382
.text:0040F123                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040F129                 test    ecx, ecx
.text:0040F12B                 jnz     loc_40F382
.text:0040F131                 mov     dword ptr [ebx], 7263694Dh
.text:0040F137                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F13E                 mov     dword ptr [ebx+8], 69572074h
.text:0040F145                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F14C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040F153
.text:0040F153 loc_40F153:                             ; CODE XREF: .text:0040F3F5↓j
.text:0040F153                 mov     byte ptr [ebx+14h], 0
.text:0040F157
.text:0040F157 loc_40F157:                             ; CODE XREF: .text:0040F385↓j
.text:0040F157                                         ; .text:0040F39C↓j ...
.text:0040F157                 mov     esi, dword_4150A0
.text:0040F15D                 test    esi, esi
.text:0040F15F                 jz      loc_40F272
.text:0040F165                 movzx   eax, ds:byte_41650A
.text:0040F16C                 cmp     al, 1
.text:0040F16E                 jz      loc_40F252
.text:0040F174                 cmp     al, 3
.text:0040F176                 jz      short loc_40F19D
.text:0040F178
.text:0040F178 loc_40F178:                             ; CODE XREF: .text:0040F1BB↓j
.text:0040F178                                         ; .text:0040F1F6↓j ...
.text:0040F178                 mov     dword ptr [esp+4], offset asc_40EE70 ; " "
.text:0040F180                 mov     [esp], ebx
.text:0040F183                 call    strcat
.text:0040F188                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040F190                 mov     [esp], ebx
.text:0040F193                 call    strcat
.text:0040F198                 jmp     loc_40F0F0
.text:0040F19D ; ---------------------------------------------------------------------------
.text:0040F19D
.text:0040F19D loc_40F19D:                             ; CODE XREF: .text:0040F176↑j
.text:0040F19D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040F1A4                 jz      short loc_40F1C6
.text:0040F1A6
.text:0040F1A6 loc_40F1A6:                             ; CODE XREF: .text:0040F1D2↓j
.text:0040F1A6                 test    byte ptr ds:word_416508, 2
.text:0040F1AD                 jz      short loc_40F1BD
.text:0040F1AF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040F1B6
.text:0040F1B6 loc_40F1B6:                             ; CODE XREF: .text:0040F1C4↓j
.text:0040F1B6                 call    printf
.text:0040F1BB                 jmp     short loc_40F178
.text:0040F1BD ; ---------------------------------------------------------------------------
.text:0040F1BD
.text:0040F1BD loc_40F1BD:                             ; CODE XREF: .text:0040F1AD↑j
.text:0040F1BD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040F1C4                 jmp     short loc_40F1B6
.text:0040F1C6 ; ---------------------------------------------------------------------------
.text:0040F1C6
.text:0040F1C6 loc_40F1C6:                             ; CODE XREF: .text:0040F1A4↑j
.text:0040F1C6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F1CB                 cmp     eax, 2
.text:0040F1CE                 jz      short loc_40F210
.text:0040F1D0                 test    eax, eax
.text:0040F1D2                 jnz     short loc_40F1A6
.text:0040F1D4                 cmp     byte ptr ds:word_416508, 0
.text:0040F1DB                 js      short loc_40F202
.text:0040F1DD                 test    byte ptr ds:word_416508, 2
.text:0040F1E4                 jnz     short loc_40F1F8
.text:0040F1E6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040F1EE
.text:0040F1EE loc_40F1EE:                             ; CODE XREF: .text:0040F200↓j
.text:0040F1EE                                         ; .text:0040F20A↓j ...
.text:0040F1EE                 mov     [esp], ebx
.text:0040F1F1                 call    strcat
.text:0040F1F6                 jmp     short loc_40F178
.text:0040F1F8 ; ---------------------------------------------------------------------------
.text:0040F1F8
.text:0040F1F8 loc_40F1F8:                             ; CODE XREF: .text:0040F1E4↑j
.text:0040F1F8                                         ; .text:0040F359↓j
.text:0040F1F8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040F200                 jmp     short loc_40F1EE
.text:0040F202 ; ---------------------------------------------------------------------------
.text:0040F202
.text:0040F202 loc_40F202:                             ; CODE XREF: .text:0040F1DB↑j
.text:0040F202                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040F20A                 jmp     short loc_40F1EE
.text:0040F20A ; ---------------------------------------------------------------------------
.text:0040F20C                 align 10h
.text:0040F210
.text:0040F210 loc_40F210:                             ; CODE XREF: .text:0040F1CE↑j
.text:0040F210                 cmp     byte ptr ds:word_416508, 0
.text:0040F217                 js      short loc_40F248
.text:0040F219                 movzx   eax, ds:word_416508
.text:0040F220                 test    al, 2
.text:0040F222                 jnz     short loc_40F23E
.text:0040F224                 cmp     ax, 400h
.text:0040F228                 jz      short loc_40F234
.text:0040F22A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040F232                 jmp     short loc_40F1EE
.text:0040F234 ; ---------------------------------------------------------------------------
.text:0040F234
.text:0040F234 loc_40F234:                             ; CODE XREF: .text:0040F228↑j
.text:0040F234                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040F23C                 jmp     short loc_40F1EE
.text:0040F23E ; ---------------------------------------------------------------------------
.text:0040F23E
.text:0040F23E loc_40F23E:                             ; CODE XREF: .text:0040F222↑j
.text:0040F23E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040F246                 jmp     short loc_40F1EE
.text:0040F248 ; ---------------------------------------------------------------------------
.text:0040F248
.text:0040F248 loc_40F248:                             ; CODE XREF: .text:0040F217↑j
.text:0040F248                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040F250                 jmp     short loc_40F1EE
.text:0040F252 ; ---------------------------------------------------------------------------
.text:0040F252
.text:0040F252 loc_40F252:                             ; CODE XREF: .text:0040F16E↑j
.text:0040F252                 test    byte ptr ds:word_416508+1, 2
.text:0040F259                 jz      short loc_40F265
.text:0040F25B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040F263                 jmp     short loc_40F1EE
.text:0040F265 ; ---------------------------------------------------------------------------
.text:0040F265
.text:0040F265 loc_40F265:                             ; CODE XREF: .text:0040F259↑j
.text:0040F265                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040F26D                 jmp     loc_40F1EE
.text:0040F272 ; ---------------------------------------------------------------------------
.text:0040F272
.text:0040F272 loc_40F272:                             ; CODE XREF: .text:0040F15F↑j
.text:0040F272                 mov     dword ptr [esp+28h], 0FFh
.text:0040F27A                 lea     edx, [esp+2Ch]
.text:0040F27E                 mov     [esp+10h], edx
.text:0040F282                 mov     dword ptr [esp+0Ch], 1
.text:0040F28A                 mov     dword ptr [esp+8], 0
.text:0040F292                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040F29A                 mov     dword ptr [esp], 80000002h
.text:0040F2A1                 call    RegOpenKeyExA
.text:0040F2A6                 mov     edi, eax
.text:0040F2A8                 sub     esp, 14h
.text:0040F2AB                 xor     eax, eax
.text:0040F2AD                 test    edi, edi
.text:0040F2AF                 jnz     loc_40F0B5
.text:0040F2B5                 mov     dword ptr [esp+0Ch], 0
.text:0040F2BD                 mov     edi, [esp+2Ch]
.text:0040F2C1                 lea     esi, [esp+28h]
.text:0040F2C5                 mov     [esp+14h], esi
.text:0040F2C9                 lea     esi, [esp+30h]
.text:0040F2CD                 mov     [esp+10h], esi
.text:0040F2D1                 mov     dword ptr [esp+8], 0
.text:0040F2D9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040F2E1                 mov     [esp], edi
.text:0040F2E4                 call    RegQueryValueExA
.text:0040F2E9                 sub     esp, 18h
.text:0040F2EC                 test    eax, eax
.text:0040F2EE                 jnz     short loc_40F2FA
.text:0040F2F0                 cmp     dword ptr [esp+28h], 0FFh
.text:0040F2F8                 jbe     short loc_40F301
.text:0040F2FA
.text:0040F2FA loc_40F2FA:                             ; CODE XREF: .text:0040F2EE↑j
.text:0040F2FA                 xor     eax, eax
.text:0040F2FC                 jmp     loc_40F0B5
.text:0040F301 ; ---------------------------------------------------------------------------
.text:0040F301
.text:0040F301 loc_40F301:                             ; CODE XREF: .text:0040F2F8↑j
.text:0040F301                 mov     edx, [esp+2Ch]
.text:0040F305                 mov     [esp], edx
.text:0040F308                 call    RegCloseKey
.text:0040F30D                 sub     esp, 4
.text:0040F310                 mov     [esp+4], esi
.text:0040F314                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040F31B                 call    lstrcmpiA
.text:0040F320                 sub     esp, 8
.text:0040F323                 test    eax, eax
.text:0040F325                 jz      short loc_40F370
.text:0040F327
.text:0040F327 loc_40F327:                             ; CODE XREF: .text:0040F380↓j
.text:0040F327                 mov     [esp+4], esi
.text:0040F32B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040F332                 call    lstrcmpiA
.text:0040F337                 sub     esp, 8
.text:0040F33A                 test    eax, eax
.text:0040F33C                 jz      short loc_40F35E
.text:0040F33E
.text:0040F33E loc_40F33E:                             ; CODE XREF: .text:0040F36E↓j
.text:0040F33E                 mov     [esp+4], esi
.text:0040F342                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040F349                 call    lstrcmpiA
.text:0040F34E                 sub     esp, 8
.text:0040F351                 test    eax, eax
.text:0040F353                 jnz     loc_40F178
.text:0040F359                 jmp     loc_40F1F8
.text:0040F35E ; ---------------------------------------------------------------------------
.text:0040F35E
.text:0040F35E loc_40F35E:                             ; CODE XREF: .text:0040F33C↑j
.text:0040F35E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040F366                 mov     [esp], ebx
.text:0040F369                 call    strcat
.text:0040F36E                 jmp     short loc_40F33E
.text:0040F370 ; ---------------------------------------------------------------------------
.text:0040F370
.text:0040F370 loc_40F370:                             ; CODE XREF: .text:0040F325↑j
.text:0040F370                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040F378                 mov     [esp], ebx
.text:0040F37B                 call    strcat
.text:0040F380                 jmp     short loc_40F327
.text:0040F382 ; ---------------------------------------------------------------------------
.text:0040F382
.text:0040F382 loc_40F382:                             ; CODE XREF: .text:0040F11D↑j
.text:0040F382                                         ; .text:0040F12B↑j
.text:0040F382                 cmp     eax, 5
.text:0040F385                 jnz     loc_40F157
.text:0040F38B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F390                 cmp     eax, 2
.text:0040F393                 jz      short loc_40F3FA
.text:0040F395                 cmp     eax, 1
.text:0040F398                 jz      short loc_40F3D3
.text:0040F39A                 test    eax, eax
.text:0040F39C                 jnz     loc_40F157
.text:0040F3A2                 mov     dword ptr [ebx], 7263694Dh
.text:0040F3A8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F3AF                 mov     dword ptr [ebx+8], 69572074h
.text:0040F3B6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F3BD                 mov     dword ptr [ebx+10h], 30322073h
.text:0040F3C4                 mov     word ptr [ebx+14h], 3030h
.text:0040F3CA                 mov     byte ptr [ebx+16h], 0
.text:0040F3CE                 jmp     loc_40F157
.text:0040F3D3 ; ---------------------------------------------------------------------------
.text:0040F3D3
.text:0040F3D3 loc_40F3D3:                             ; CODE XREF: .text:0040F398↑j
.text:0040F3D3                 mov     dword ptr [ebx], 7263694Dh
.text:0040F3D9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F3E0                 mov     dword ptr [ebx+8], 69572074h
.text:0040F3E7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F3EE                 mov     dword ptr [ebx+10h], 50582073h
.text:0040F3F5                 jmp     loc_40F153
.text:0040F3FA ; ---------------------------------------------------------------------------
.text:0040F3FA
.text:0040F3FA loc_40F3FA:                             ; CODE XREF: .text:0040F393↑j
.text:0040F3FA                 mov     dword ptr [ebx], 7263694Dh
.text:0040F400                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F407                 mov     dword ptr [ebx+8], 69572074h
.text:0040F40E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F415                 mov     dword ptr [ebx+10h], 65532073h
.text:0040F41C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040F423                 mov     dword ptr [ebx+18h], 30303220h
.text:0040F42A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040F430                 jmp     loc_40F157
.text:0040F435 ; ---------------------------------------------------------------------------
.text:0040F435
.text:0040F435 loc_40F435:                             ; CODE XREF: .text:0040F114↑j
.text:0040F435                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F43B                 test    edx, edx
.text:0040F43D                 jnz     loc_40F11A
.text:0040F443                 mov     dword ptr [ebx], 7263694Dh
.text:0040F449                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F450                 mov     dword ptr [ebx+8], 69572074h
.text:0040F457                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F45E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040F465                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040F46C                 mov     byte ptr [ebx+18h], 0
.text:0040F470                 jmp     loc_40F157
.text:0040F475 ; ---------------------------------------------------------------------------
.text:0040F475
.text:0040F475 loc_40F475:                             ; CODE XREF: .text:0040F10B↑j
.text:0040F475                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040F47C                 jnz     loc_40F111
.text:0040F482                 mov     dword ptr [ebx], 7263694Dh
.text:0040F488                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F48F                 mov     dword ptr [ebx+8], 69572074h
.text:0040F496                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F49D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040F4A4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040F4AB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040F4B1                 jmp     loc_40F157
.text:0040F4B6 ; ---------------------------------------------------------------------------
.text:0040F4B6
.text:0040F4B6 loc_40F4B6:                             ; CODE XREF: .text:0040F046↑j
.text:0040F4B6                 cld
.text:0040F4B7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040F4BC                 mov     ecx, 8
.text:0040F4C1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040F4C8                 mov     edi, ebx
.text:0040F4CA                 rep movsd
.text:0040F4CC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040F4D3                 mov     [edi+2], dl
.text:0040F4D6                 mov     [edi], si
.text:0040F4D9                 jmp     loc_40F0F0
.text:0040F4D9 ; ---------------------------------------------------------------------------
.text:0040F4DE                 align 10h
.text:0040F4E0
.text:0040F4E0 loc_40F4E0:                             ; CODE XREF: .text:0040F03D↑j
.text:0040F4E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F4E6                 cmp     ecx, 4
.text:0040F4E9                 jz      loc_40F5A0
.text:0040F4EF
.text:0040F4EF loc_40F4EF:                             ; CODE XREF: .text:0040F5F6↓j
.text:0040F4EF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F4F5
.text:0040F4F5 loc_40F4F5:                             ; CODE XREF: .text:0040F5A8↓j
.text:0040F4F5                 cmp     ecx, 4
.text:0040F4F8                 jz      short loc_40F504
.text:0040F4FA
.text:0040F4FA loc_40F4FA:                             ; CODE XREF: .text:0040F50C↓j
.text:0040F4FA                                         ; .text:0040F511↓j
.text:0040F4FA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F4FF                 jmp     loc_40F06C
.text:0040F504 ; ---------------------------------------------------------------------------
.text:0040F504
.text:0040F504 loc_40F504:                             ; CODE XREF: .text:0040F4F8↑j
.text:0040F504                 cmp     edx, 0Ah
.text:0040F507                 jz      short loc_40F531
.text:0040F509
.text:0040F509 loc_40F509:                             ; CODE XREF: .text:0040F57F↓j
.text:0040F509                 cmp     ecx, 4
.text:0040F50C                 jnz     short loc_40F4FA
.text:0040F50E                 cmp     edx, 5Ah ; 'Z'
.text:0040F511                 jnz     short loc_40F4FA
.text:0040F513                 cld
.text:0040F514                 mov     edi, ebx
.text:0040F516                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040F51B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040F522                 mov     ecx, 9
.text:0040F527                 rep movsd
.text:0040F529                 mov     [edi], bx
.text:0040F52C                 jmp     loc_40F0F0
.text:0040F531 ; ---------------------------------------------------------------------------
.text:0040F531
.text:0040F531 loc_40F531:                             ; CODE XREF: .text:0040F507↑j
.text:0040F531                 mov     dword ptr [ebx], 7263694Dh
.text:0040F537                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F53E                 mov     dword ptr [ebx+8], 69572074h
.text:0040F545                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F54C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040F553                 mov     byte ptr [ebx+14h], 0
.text:0040F557                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F55D                 lea     edi, [edx-7CFh]
.text:0040F563                 cmp     edi, 0B7h ; '·'
.text:0040F569                 jbe     short loc_40F593
.text:0040F56B                 cmp     edx, 886h
.text:0040F571                 ja      short loc_40F581
.text:0040F573
.text:0040F573 loc_40F573:                             ; CODE XREF: .text:0040F591↓j
.text:0040F573                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F579                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F57F                 jmp     short loc_40F509
.text:0040F581 ; ---------------------------------------------------------------------------
.text:0040F581
.text:0040F581 loc_40F581:                             ; CODE XREF: .text:0040F571↑j
.text:0040F581                 mov     dword ptr [esp+4], offset loc_40F006
.text:0040F589
.text:0040F589 loc_40F589:                             ; CODE XREF: .text:0040F59B↓j
.text:0040F589                 mov     [esp], ebx
.text:0040F58C                 call    strcat
.text:0040F591                 jmp     short loc_40F573
.text:0040F593 ; ---------------------------------------------------------------------------
.text:0040F593
.text:0040F593 loc_40F593:                             ; CODE XREF: .text:0040F569↑j
.text:0040F593                 mov     dword ptr [esp+4], 40F00Ah
.text:0040F59B                 jmp     short loc_40F589
.text:0040F59B ; ---------------------------------------------------------------------------
.text:0040F59D                 align 10h
.text:0040F5A0
.text:0040F5A0 loc_40F5A0:                             ; CODE XREF: .text:0040F4E9↑j
.text:0040F5A0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F5A6                 test    edx, edx
.text:0040F5A8                 jnz     loc_40F4F5
.text:0040F5AE                 mov     dword ptr [ebx], 7263694Dh
.text:0040F5B4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F5BB                 mov     dword ptr [ebx+8], 69572074h
.text:0040F5C2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F5C9                 mov     dword ptr [ebx+10h], 35392073h
.text:0040F5D0                 mov     byte ptr [ebx+14h], 0
.text:0040F5D4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F5DA                 lea     ecx, [edx-3B7h]
.text:0040F5E0                 cmp     ecx, 81h
.text:0040F5E6                 jbe     short loc_40F60D
.text:0040F5E8                 cmp     edx, 438h
.text:0040F5EE                 ja      short loc_40F5FB
.text:0040F5F0
.text:0040F5F0 loc_40F5F0:                             ; CODE XREF: .text:0040F60B↓j
.text:0040F5F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F5F6                 jmp     loc_40F4EF
.text:0040F5FB ; ---------------------------------------------------------------------------
.text:0040F5FB
.text:0040F5FB loc_40F5FB:                             ; CODE XREF: .text:0040F5EE↑j
.text:0040F5FB                 mov     dword ptr [esp+4], offset loc_40F00F
.text:0040F603
.text:0040F603 loc_40F603:                             ; CODE XREF: .text:0040F615↓j
.text:0040F603                 mov     [esp], ebx
.text:0040F606                 call    strcat
.text:0040F60B                 jmp     short loc_40F5F0
.text:0040F60D ; ---------------------------------------------------------------------------
.text:0040F60D
.text:0040F60D loc_40F60D:                             ; CODE XREF: .text:0040F5E6↑j
.text:0040F60D                 mov     dword ptr [esp+4], 40F00Ah
.text:0040F615                 jmp     short loc_40F603
.text:0040F615 ; ---------------------------------------------------------------------------
.text:0040F617                 align 10h
.text:0040F620
.text:0040F620 ; =============== S U B R O U T I N E =======================================
.text:0040F620
.text:0040F620
.text:0040F620 sub_40F620      proc near               ; CODE XREF: .text:0040DA8E↑p
.text:0040F620                                         ; sub_40DF10+12A↑p
.text:0040F620                 sub     esp, 0Ch
.text:0040F623                 call    sub_40F730
.text:0040F628                 mov     eax, ds:dword_416460
.text:0040F62D                 add     esp, 0Ch
.text:0040F630                 retn
.text:0040F630 sub_40F620      endp
.text:0040F630
.text:0040F631 ; ---------------------------------------------------------------------------
.text:0040F631                 jmp     short loc_40F640
.text:0040F631 ; ---------------------------------------------------------------------------
.text:0040F633                 align 10h
.text:0040F640
.text:0040F640 loc_40F640:                             ; CODE XREF: .text:0040F631↑j
.text:0040F640                 sub     esp, 0Ch
.text:0040F643                 call    sub_40F730
.text:0040F648                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F64D                 add     esp, 0Ch
.text:0040F650                 retn
.text:0040F651 ; ---------------------------------------------------------------------------
.text:0040F651                 jmp     short loc_40F660
.text:0040F651 ; ---------------------------------------------------------------------------
.text:0040F653                 align 10h
.text:0040F660
.text:0040F660 loc_40F660:                             ; CODE XREF: .text:0040F651↑j
.text:0040F660                 sub     esp, 0Ch
.text:0040F663                 call    sub_40F730
.text:0040F668                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040F66D                 add     esp, 0Ch
.text:0040F670                 retn
.text:0040F671 ; ---------------------------------------------------------------------------
.text:0040F671                 jmp     short loc_40F680
.text:0040F671 ; ---------------------------------------------------------------------------
.text:0040F673                 align 10h
.text:0040F680
.text:0040F680 loc_40F680:                             ; CODE XREF: .text:0040F671↑j
.text:0040F680                 sub     esp, 0Ch
.text:0040F683                 call    sub_40F730
.text:0040F688                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F68D                 add     esp, 0Ch
.text:0040F690                 retn
.text:0040F691 ; ---------------------------------------------------------------------------
.text:0040F691                 jmp     short loc_40F6A0
.text:0040F691 ; ---------------------------------------------------------------------------
.text:0040F693                 align 10h
.text:0040F6A0
.text:0040F6A0 loc_40F6A0:                             ; CODE XREF: .text:0040F691↑j
.text:0040F6A0                 sub     esp, 0Ch
.text:0040F6A3                 call    GetVersion
.text:0040F6A8                 shr     eax, 10h
.text:0040F6AB                 add     esp, 0Ch
.text:0040F6AE                 retn
.text:0040F6AE ; ---------------------------------------------------------------------------
.text:0040F6AF                 align 10h
.text:0040F6B0                 sub     esp, 0Ch
.text:0040F6B3                 call    sub_40F730
.text:0040F6B8                 xor     eax, eax
.text:0040F6BA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040F6C1                 setz    al
.text:0040F6C4                 add     esp, 0Ch
.text:0040F6C7                 retn
.text:0040F6C7 ; ---------------------------------------------------------------------------
.text:0040F6C8                 align 10h
.text:0040F6D0
.text:0040F6D0 ; =============== S U B R O U T I N E =======================================
.text:0040F6D0
.text:0040F6D0
.text:0040F6D0 sub_40F6D0      proc near               ; CODE XREF: .text:loc_40D420↑p
.text:0040F6D0                                         ; .text:loc_40DA74↑p ...
.text:0040F6D0                 sub     esp, 0Ch
.text:0040F6D3                 call    sub_40F730
.text:0040F6D8                 xor     eax, eax
.text:0040F6DA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040F6E1                 setz    al
.text:0040F6E4                 add     esp, 0Ch
.text:0040F6E7                 retn
.text:0040F6E7 sub_40F6D0      endp
.text:0040F6E7
.text:0040F6E7 ; ---------------------------------------------------------------------------
.text:0040F6E8                 align 10h
.text:0040F6F0                 sub     esp, 0Ch
.text:0040F6F3                 call    sub_40F730
.text:0040F6F8                 xor     eax, eax
.text:0040F6FA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040F701                 setz    al
.text:0040F704                 add     esp, 0Ch
.text:0040F707                 retn
.text:0040F707 ; ---------------------------------------------------------------------------
.text:0040F708                 align 10h
.text:0040F710                 sub     esp, 0Ch
.text:0040F713                 call    sub_40F730
.text:0040F718                 xor     eax, eax
.text:0040F71A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040F721                 setz    al
.text:0040F724                 add     esp, 0Ch
.text:0040F727                 retn
.text:0040F727 ; ---------------------------------------------------------------------------
.text:0040F728                 align 10h
.text:0040F730
.text:0040F730 ; =============== S U B R O U T I N E =======================================
.text:0040F730
.text:0040F730
.text:0040F730 sub_40F730      proc near               ; CODE XREF: .text:0040F030↑p
.text:0040F730                                         ; sub_40F620+3↑p ...
.text:0040F730
.text:0040F730 lpVersionInformation= dword ptr -0BCh
.text:0040F730 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040F730
.text:0040F730                 sub     esp, 0BCh
.text:0040F736                 mov     edx, ds:dword_416510
.text:0040F73C                 test    edx, edx
.text:0040F73E                 jz      short loc_40F750
.text:0040F740
.text:0040F740 loc_40F740:                             ; CODE XREF: sub_40F730+7B↓j
.text:0040F740                 mov     edx, 1
.text:0040F745
.text:0040F745 loc_40F745:                             ; CODE XREF: sub_40F730+217↓j
.text:0040F745                 mov     eax, edx
.text:0040F747                 add     esp, 0BCh
.text:0040F74D                 retn
.text:0040F74D ; ---------------------------------------------------------------------------
.text:0040F74E                 align 10h
.text:0040F750
.text:0040F750 loc_40F750:                             ; CODE XREF: sub_40F730+E↑j
.text:0040F750                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040F757                 mov     edx, 9Ch ; 'œ'
.text:0040F75C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040F762                 call    GetVersionExA
.text:0040F767                 sub     esp, 4
.text:0040F76A                 test    eax, eax
.text:0040F76C                 jz      loc_40F924
.text:0040F772
.text:0040F772 loc_40F772:                             ; CODE XREF: sub_40F730+245↓j
.text:0040F772                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040F779                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F77E                 cmp     eax, 1
.text:0040F781                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040F787                 jz      loc_40F870
.text:0040F78D                 cmp     eax, 1
.text:0040F790                 jb      loc_40F860
.text:0040F796                 cmp     eax, 2
.text:0040F799                 jz      short loc_40F7BA
.text:0040F79B                 cmp     eax, 3
.text:0040F79E                 jz      short loc_40F7AD
.text:0040F7A0
.text:0040F7A0 loc_40F7A0:                             ; CODE XREF: sub_40F730+88↓j
.text:0040F7A0                                         ; sub_40F730+C0↓j ...
.text:0040F7A0                 mov     edx, 1
.text:0040F7A5                 mov     ds:dword_416510, edx
.text:0040F7AB                 jmp     short loc_40F740
.text:0040F7AD ; ---------------------------------------------------------------------------
.text:0040F7AD
.text:0040F7AD loc_40F7AD:                             ; CODE XREF: sub_40F730+6E↑j
.text:0040F7AD                 mov     ecx, 17h
.text:0040F7B2
.text:0040F7B2 loc_40F7B2:                             ; CODE XREF: sub_40F730+1A7↓j
.text:0040F7B2                 mov     ds:dword_416460, ecx
.text:0040F7B8                 jmp     short loc_40F7A0
.text:0040F7BA ; ---------------------------------------------------------------------------
.text:0040F7BA
.text:0040F7BA loc_40F7BA:                             ; CODE XREF: sub_40F730+69↑j
.text:0040F7BA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040F7BF                 cmp     eax, 3
.text:0040F7C2                 jz      short loc_40F83B
.text:0040F7C4                 cmp     eax, 4
.text:0040F7C7                 jz      short loc_40F82A
.text:0040F7C9
.text:0040F7C9 loc_40F7C9:                             ; CODE XREF: sub_40F730+102↓j
.text:0040F7C9                 cmp     eax, 4
.text:0040F7CC                 ja      short loc_40F7F2
.text:0040F7CE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040F7D4                 test    ecx, ecx
.text:0040F7D6                 jnz     short loc_40F7F2
.text:0040F7D8                 mov     edx, 1Eh
.text:0040F7DD
.text:0040F7DD loc_40F7DD:                             ; CODE XREF: sub_40F730+DF↓j
.text:0040F7DD                 mov     ds:dword_416460, edx
.text:0040F7E3
.text:0040F7E3 loc_40F7E3:                             ; CODE XREF: sub_40F730+C5↓j
.text:0040F7E3                                         ; sub_40F730+D8↓j ...
.text:0040F7E3                 movzx   ecx, ds:word_416504
.text:0040F7EA                 add     ds:dword_416460, ecx
.text:0040F7F0                 jmp     short loc_40F7A0
.text:0040F7F2 ; ---------------------------------------------------------------------------
.text:0040F7F2
.text:0040F7F2 loc_40F7F2:                             ; CODE XREF: sub_40F730+9C↑j
.text:0040F7F2                                         ; sub_40F730+A6↑j
.text:0040F7F2                 cmp     eax, 5
.text:0040F7F5                 jnz     short loc_40F7E3
.text:0040F7F7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F7FC                 cmp     eax, 2
.text:0040F7FF                 jz      short loc_40F81E
.text:0040F801                 cmp     eax, 1
.text:0040F804                 jz      short loc_40F811
.text:0040F806                 test    eax, eax
.text:0040F808                 jnz     short loc_40F7E3
.text:0040F80A                 mov     edx, 32h ; '2'
.text:0040F80F                 jmp     short loc_40F7DD
.text:0040F811 ; ---------------------------------------------------------------------------
.text:0040F811
.text:0040F811 loc_40F811:                             ; CODE XREF: sub_40F730+D4↑j
.text:0040F811                 mov     ecx, 3Ch ; '<'
.text:0040F816
.text:0040F816 loc_40F816:                             ; CODE XREF: sub_40F730+122↓j
.text:0040F816                 mov     ds:dword_416460, ecx
.text:0040F81C                 jmp     short loc_40F7E3
.text:0040F81E ; ---------------------------------------------------------------------------
.text:0040F81E
.text:0040F81E loc_40F81E:                             ; CODE XREF: sub_40F730+CF↑j
.text:0040F81E                 mov     eax, 46h ; 'F'
.text:0040F823
.text:0040F823 loc_40F823:                             ; CODE XREF: sub_40F730+109↓j
.text:0040F823                                         ; sub_40F730+129↓j
.text:0040F823                 mov     ds:dword_416460, eax
.text:0040F828                 jmp     short loc_40F7E3
.text:0040F82A ; ---------------------------------------------------------------------------
.text:0040F82A
.text:0040F82A loc_40F82A:                             ; CODE XREF: sub_40F730+97↑j
.text:0040F82A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040F830                 test    ecx, ecx
.text:0040F832                 jnz     short loc_40F7C9
.text:0040F834                 mov     eax, 28h ; '('
.text:0040F839                 jmp     short loc_40F823
.text:0040F83B ; ---------------------------------------------------------------------------
.text:0040F83B
.text:0040F83B loc_40F83B:                             ; CODE XREF: sub_40F730+92↑j
.text:0040F83B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F840                 cmp     eax, 33h ; '3'
.text:0040F843                 jz      short loc_40F854
.text:0040F845                 cmp     eax, 5
.text:0040F848                 setz    cl
.text:0040F84B                 movzx   edx, cl
.text:0040F84E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040F852                 jmp     short loc_40F816
.text:0040F854 ; ---------------------------------------------------------------------------
.text:0040F854
.text:0040F854 loc_40F854:                             ; CODE XREF: sub_40F730+113↑j
.text:0040F854                 mov     eax, 24h ; '$'
.text:0040F859                 jmp     short loc_40F823
.text:0040F859 ; ---------------------------------------------------------------------------
.text:0040F85B                 align 10h
.text:0040F860
.text:0040F860 loc_40F860:                             ; CODE XREF: sub_40F730+60↑j
.text:0040F860                 mov     edx, 2
.text:0040F865                 mov     ds:dword_416460, edx
.text:0040F86B                 jmp     loc_40F7A0
.text:0040F870 ; ---------------------------------------------------------------------------
.text:0040F870
.text:0040F870 loc_40F870:                             ; CODE XREF: sub_40F730+57↑j
.text:0040F870                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F876                 cmp     ecx, 4
.text:0040F879                 jnz     loc_40F7A0
.text:0040F87F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F884                 test    eax, eax
.text:0040F886                 jnz     short loc_40F8AA
.text:0040F888                 mov     eax, 0Ah
.text:0040F88D                 mov     ds:dword_416460, eax
.text:0040F892                 lea     eax, [edx-3B7h]
.text:0040F898                 cmp     eax, 81h
.text:0040F89D                 ja      short loc_40F915
.text:0040F89F                 mov     edx, 0Bh
.text:0040F8A4
.text:0040F8A4 loc_40F8A4:                             ; CODE XREF: sub_40F730+1F2↓j
.text:0040F8A4                 mov     ds:dword_416460, edx
.text:0040F8AA
.text:0040F8AA loc_40F8AA:                             ; CODE XREF: sub_40F730+156↑j
.text:0040F8AA                                         ; sub_40F730+1EB↓j
.text:0040F8AA                 cmp     ecx, 4
.text:0040F8AD                 jnz     loc_40F7A0
.text:0040F8B3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040F8BA                 jz      short loc_40F8DC
.text:0040F8BC
.text:0040F8BC loc_40F8BC:                             ; CODE XREF: sub_40F730+1D4↓j
.text:0040F8BC                                         ; sub_40F730+1DC↓j
.text:0040F8BC                 cmp     ecx, 4
.text:0040F8BF                 jnz     loc_40F7A0
.text:0040F8C5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040F8CC                 jnz     loc_40F7A0
.text:0040F8D2                 mov     ecx, 12h
.text:0040F8D7                 jmp     loc_40F7B2
.text:0040F8DC ; ---------------------------------------------------------------------------
.text:0040F8DC
.text:0040F8DC loc_40F8DC:                             ; CODE XREF: sub_40F730+18A↑j
.text:0040F8DC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F8E2                 mov     eax, 0Eh
.text:0040F8E7                 mov     ds:dword_416460, eax
.text:0040F8EC                 lea     eax, [edx-7CFh]
.text:0040F8F2                 cmp     eax, 0B7h ; '·'
.text:0040F8F7                 ja      short loc_40F906
.text:0040F8F9                 mov     edx, 0Fh
.text:0040F8FE
.text:0040F8FE loc_40F8FE:                             ; CODE XREF: sub_40F730+1E3↓j
.text:0040F8FE                 mov     ds:dword_416460, edx
.text:0040F904                 jmp     short loc_40F8BC
.text:0040F906 ; ---------------------------------------------------------------------------
.text:0040F906
.text:0040F906 loc_40F906:                             ; CODE XREF: sub_40F730+1C7↑j
.text:0040F906                 cmp     edx, 886h
.text:0040F90C                 jbe     short loc_40F8BC
.text:0040F90E                 mov     edx, 10h
.text:0040F913                 jmp     short loc_40F8FE
.text:0040F915 ; ---------------------------------------------------------------------------
.text:0040F915
.text:0040F915 loc_40F915:                             ; CODE XREF: sub_40F730+16D↑j
.text:0040F915                 cmp     edx, 438h
.text:0040F91B                 jbe     short loc_40F8AA
.text:0040F91D                 mov     edx, 0Ch
.text:0040F922                 jmp     short loc_40F8A4
.text:0040F924 ; ---------------------------------------------------------------------------
.text:0040F924
.text:0040F924 loc_40F924:                             ; CODE XREF: sub_40F730+3C↑j
.text:0040F924                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040F92C                 xor     edx, edx
.text:0040F92E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040F932                 mov     dword_4150A0, edx
.text:0040F938                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040F93B                 call    GetVersionExA
.text:0040F940                 sub     esp, 4
.text:0040F943                 xor     edx, edx
.text:0040F945                 test    eax, eax
.text:0040F947                 jz      loc_40F745
.text:0040F94D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040F951                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040F955                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040F95B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040F95F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040F965                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040F969                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040F96F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040F975                 jmp     loc_40F772
.text:0040F975 sub_40F730      endp
.text:0040F975
.text:0040F975 ; ---------------------------------------------------------------------------
.text:0040F97A                 align 10h
.text:0040F980 aNotset         db 'notset',0           ; DATA XREF: .data:off_4150B0↓o
.text:0040F980                                         ; .data:off_4150B4↓o
.text:0040F987 ; ---------------------------------------------------------------------------
.text:0040F987
.text:0040F987 loc_40F987:                             ; DATA XREF: .text:loc_40FA25↓o
.text:0040F987                 jb      short loc_40FA00
.text:0040F989                 add     [eax], ah
.text:0040F98B                 or      [eax], eax
.text:0040F98D
.text:0040F98D loc_40F98D:                             ; DATA XREF: .text:0040FA78↓o
.text:0040F98D                                         ; .text:0040FADE↓o ...
.text:0040F98D                 add     [eax], ah
.text:0040F98F                 and     eax, 64252064h
.text:0040F994                 and     [eax], al
.text:0040F996                 lea     esi, [esi+0]
.text:0040F999                 lea     edi, [edi+0]
.text:0040F9A0                 push    ebp
.text:0040F9A1                 push    edi
.text:0040F9A2                 push    esi
.text:0040F9A3                 push    ebx
.text:0040F9A4                 sub     esp, 14Ch
.text:0040F9AA                 mov     edx, off_4150B0 ; "notset"
.text:0040F9B0                 mov     edi, [esp+164h]
.text:0040F9B7                 mov     ebp, [esp+168h]
.text:0040F9BE                 mov     [esp+4], edx
.text:0040F9C2                 mov     edx, off_4150B4 ; "notset"
.text:0040F9C8                 mov     [esp], edx
.text:0040F9CB                 call    strcmp
.text:0040F9D0                 test    eax, eax
.text:0040F9D2                 jz      loc_40FDC0
.text:0040F9D8
.text:0040F9D8 loc_40F9D8:                             ; CODE XREF: .text:0040FE0C↓j
.text:0040F9D8                 lea     ebx, [esp+20h]
.text:0040F9DC                 lea     esi, [esi+0]
.text:0040F9E0
.text:0040F9E0 loc_40F9E0:                             ; CODE XREF: .text:0040FA16↓j
.text:0040F9E0                 mov     [esp+4], ebx
.text:0040F9E4                 mov     ecx, off_4150B4 ; "notset"
.text:0040F9EA                 mov     [esp], ecx
.text:0040F9ED                 call    loc_40DFB0
.text:0040F9F2                 test    eax, eax
.text:0040F9F4                 jns     short loc_40FA25
.text:0040F9F6                 mov     eax, off_4150B4 ; "notset"
.text:0040F9FB                 cmp     byte ptr [eax], 0
.text:0040F9FE                 jz      short loc_40FA18
.text:0040FA00
.text:0040FA00 loc_40FA00:                             ; CODE XREF: .text:loc_40F987↑j
.text:0040FA00                 mov     dword ptr [esp+4], 0
.text:0040FA08                 mov     [esp], eax
.text:0040FA0B                 call    strchr
.text:0040FA10                 inc     eax
.text:0040FA11                 mov     off_4150B4, eax ; "notset"
.text:0040FA16                 jmp     short loc_40F9E0
.text:0040FA18 ; ---------------------------------------------------------------------------
.text:0040FA18
.text:0040FA18 loc_40FA18:                             ; CODE XREF: .text:0040F9FE↑j
.text:0040FA18                 xor     eax, eax
.text:0040FA1A
.text:0040FA1A loc_40FA1A:                             ; CODE XREF: .text:0040FBDC↓j
.text:0040FA1A                 add     esp, 14Ch
.text:0040FA20                 pop     ebx
.text:0040FA21                 pop     esi
.text:0040FA22                 pop     edi
.text:0040FA23                 pop     ebp
.text:0040FA24                 retn
.text:0040FA25 ; ---------------------------------------------------------------------------
.text:0040FA25
.text:0040FA25 loc_40FA25:                             ; CODE XREF: .text:0040F9F4↑j
.text:0040FA25                 mov     dword ptr [edi+0Ch], offset loc_40F987
.text:0040FA2C                 lea     ecx, [esp+0D6h]
.text:0040FA33                 lea     edx, [esp+6Ch]
.text:0040FA37                 mov     [edi+4], ecx
.text:0040FA3A                 lea     ebx, [esp+7Ch]
.text:0040FA3E                 mov     [edi+8], edx
.text:0040FA41                 mov     [edi], ebx
.text:0040FA43                 mov     [esp], ebp
.text:0040FA46                 mov     [esp+4], edi
.text:0040FA4A                 call    ___addmntentstr
.text:0040FA4F                 mov     [esp], ebp
.text:0040FA52                 mov     dword ptr [esp+4], 40F98Ah
.text:0040FA5A                 call    strspn
.text:0040FA5F                 mov     dword ptr [esp+4], 0
.text:0040FA67                 mov     ebx, off_4150B4 ; "notset"
.text:0040FA6D                 lea     esi, [eax+ebp]
.text:0040FA70                 mov     [esp+1Ch], esi
.text:0040FA74                 lea     ebp, [esp+1Ch]
.text:0040FA78                 mov     esi, offset loc_40F98D
.text:0040FA7D                 mov     [esp], ebx
.text:0040FA80                 call    strchr
.text:0040FA85                 mov     dword ptr [esp+4], 40F98Ah
.text:0040FA8D                 inc     eax
.text:0040FA8E                 mov     off_4150B4, eax ; "notset"
.text:0040FA93                 mov     [esp], ebp
.text:0040FA96                 call    sub_410850
.text:0040FA9B                 test    eax, eax
.text:0040FA9D                 mov     ebx, eax
.text:0040FA9F                 jz      short loc_40FAC8
.text:0040FAA1                 mov     edx, eax
.text:0040FAA3                 mov     ecx, eax
.text:0040FAA5                 lea     esi, [esi+0]
.text:0040FAA9                 lea     edi, [edi+0]
.text:0040FAB0
.text:0040FAB0 loc_40FAB0:                             ; CODE XREF: .text:0040FAC6↓j
.text:0040FAB0                 movzx   eax, byte ptr [edx]
.text:0040FAB3                 cmp     al, 5Ch ; '\'
.text:0040FAB5                 jz      loc_40FD64
.text:0040FABB
.text:0040FABB loc_40FABB:                             ; CODE XREF: .text:0040FD6C↓j
.text:0040FABB                                         ; .text:0040FD7A↓j ...
.text:0040FABB                 mov     [ecx], al
.text:0040FABD
.text:0040FABD loc_40FABD:                             ; CODE XREF: .text:0040FD8E↓j
.text:0040FABD                 inc     ecx
.text:0040FABE
.text:0040FABE loc_40FABE:                             ; CODE XREF: .text:0040FDA6↓j
.text:0040FABE                 movzx   eax, byte ptr [edx]
.text:0040FAC1                 mov     esi, ebx
.text:0040FAC3                 inc     edx
.text:0040FAC4                 test    al, al
.text:0040FAC6                 jnz     short loc_40FAB0
.text:0040FAC8
.text:0040FAC8 loc_40FAC8:                             ; CODE XREF: .text:0040FA9F↑j
.text:0040FAC8                 mov     [edi], esi
.text:0040FACA                 mov     eax, [esp+1Ch]
.text:0040FACE                 test    eax, eax
.text:0040FAD0                 jnz     loc_40FD4B
.text:0040FAD6
.text:0040FAD6 loc_40FAD6:                             ; CODE XREF: .text:0040FD5F↓j
.text:0040FAD6                 mov     dword ptr [esp+4], 40F98Ah
.text:0040FADE                 mov     esi, offset loc_40F98D
.text:0040FAE3                 mov     [esp], ebp
.text:0040FAE6                 call    sub_410850
.text:0040FAEB                 test    eax, eax
.text:0040FAED                 mov     ebx, eax
.text:0040FAEF                 jz      short loc_40FB18
.text:0040FAF1                 mov     edx, eax
.text:0040FAF3                 mov     ecx, eax
.text:0040FAF5                 lea     esi, [esi+0]
.text:0040FAF9                 lea     edi, [edi+0]
.text:0040FB00
.text:0040FB00 loc_40FB00:                             ; CODE XREF: .text:0040FB16↓j
.text:0040FB00                 movzx   eax, byte ptr [edx]
.text:0040FB03                 cmp     al, 5Ch ; '\'
.text:0040FB05                 jz      loc_40FCF3
.text:0040FB0B
.text:0040FB0B loc_40FB0B:                             ; CODE XREF: .text:0040FCFB↓j
.text:0040FB0B                                         ; .text:0040FD09↓j ...
.text:0040FB0B                 mov     [ecx], al
.text:0040FB0D
.text:0040FB0D loc_40FB0D:                             ; CODE XREF: .text:0040FD1D↓j
.text:0040FB0D                 inc     ecx
.text:0040FB0E
.text:0040FB0E loc_40FB0E:                             ; CODE XREF: .text:0040FD35↓j
.text:0040FB0E                 movzx   eax, byte ptr [edx]
.text:0040FB11                 mov     esi, ebx
.text:0040FB13                 inc     edx
.text:0040FB14                 test    al, al
.text:0040FB16                 jnz     short loc_40FB00
.text:0040FB18
.text:0040FB18 loc_40FB18:                             ; CODE XREF: .text:0040FAEF↑j
.text:0040FB18                 mov     [edi+4], esi
.text:0040FB1B                 mov     eax, [esp+1Ch]
.text:0040FB1F                 test    eax, eax
.text:0040FB21                 jnz     loc_40FCDA
.text:0040FB27
.text:0040FB27 loc_40FB27:                             ; CODE XREF: .text:0040FCEE↓j
.text:0040FB27                 mov     dword ptr [esp+4], 40F98Ah
.text:0040FB2F                 mov     esi, offset loc_40F98D
.text:0040FB34                 mov     [esp], ebp
.text:0040FB37                 call    sub_410850
.text:0040FB3C                 test    eax, eax
.text:0040FB3E                 mov     ebx, eax
.text:0040FB40                 jz      short loc_40FB68
.text:0040FB42                 mov     edx, eax
.text:0040FB44                 mov     ecx, eax
.text:0040FB46                 lea     esi, [esi+0]
.text:0040FB49                 lea     edi, [edi+0]
.text:0040FB50
.text:0040FB50 loc_40FB50:                             ; CODE XREF: .text:0040FB66↓j
.text:0040FB50                 movzx   eax, byte ptr [edx]
.text:0040FB53                 cmp     al, 5Ch ; '\'
.text:0040FB55                 jz      loc_40FC82
.text:0040FB5B
.text:0040FB5B loc_40FB5B:                             ; CODE XREF: .text:0040FC8A↓j
.text:0040FB5B                                         ; .text:0040FC98↓j ...
.text:0040FB5B                 mov     [ecx], al
.text:0040FB5D
.text:0040FB5D loc_40FB5D:                             ; CODE XREF: .text:0040FCAC↓j
.text:0040FB5D                 inc     ecx
.text:0040FB5E
.text:0040FB5E loc_40FB5E:                             ; CODE XREF: .text:0040FCC4↓j
.text:0040FB5E                 movzx   eax, byte ptr [edx]
.text:0040FB61                 mov     esi, ebx
.text:0040FB63                 inc     edx
.text:0040FB64                 test    al, al
.text:0040FB66                 jnz     short loc_40FB50
.text:0040FB68
.text:0040FB68 loc_40FB68:                             ; CODE XREF: .text:0040FB40↑j
.text:0040FB68                 mov     [edi+8], esi
.text:0040FB6B                 mov     eax, [esp+1Ch]
.text:0040FB6F                 test    eax, eax
.text:0040FB71                 jnz     loc_40FC69
.text:0040FB77
.text:0040FB77 loc_40FB77:                             ; CODE XREF: .text:0040FC7D↓j
.text:0040FB77                 mov     dword ptr [esp+4], 40F98Ah
.text:0040FB7F                 mov     esi, offset loc_40F98D
.text:0040FB84                 mov     [esp], ebp
.text:0040FB87                 call    sub_410850
.text:0040FB8C                 test    eax, eax
.text:0040FB8E                 mov     ebx, eax
.text:0040FB90                 jz      short loc_40FBB4
.text:0040FB92                 mov     edx, eax
.text:0040FB94                 mov     ecx, eax
.text:0040FB96                 lea     esi, [esi+0]
.text:0040FB99                 lea     edi, [edi+0]
.text:0040FBA0
.text:0040FBA0 loc_40FBA0:                             ; CODE XREF: .text:0040FBB2↓j
.text:0040FBA0                 movzx   eax, byte ptr [edx]
.text:0040FBA3                 cmp     al, 5Ch ; '\'
.text:0040FBA5                 jz      short loc_40FC15
.text:0040FBA7
.text:0040FBA7 loc_40FBA7:                             ; CODE XREF: .text:0040FC1D↓j
.text:0040FBA7                                         ; .text:0040FC27↓j ...
.text:0040FBA7                 mov     [ecx], al
.text:0040FBA9
.text:0040FBA9 loc_40FBA9:                             ; CODE XREF: .text:0040FC3B↓j
.text:0040FBA9                 inc     ecx
.text:0040FBAA
.text:0040FBAA loc_40FBAA:                             ; CODE XREF: .text:0040FC53↓j
.text:0040FBAA                 movzx   eax, byte ptr [edx]
.text:0040FBAD                 mov     esi, ebx
.text:0040FBAF                 inc     edx
.text:0040FBB0                 test    al, al
.text:0040FBB2                 jnz     short loc_40FBA0
.text:0040FBB4
.text:0040FBB4 loc_40FBB4:                             ; CODE XREF: .text:0040FB90↑j
.text:0040FBB4                 mov     [edi+0Ch], esi
.text:0040FBB7                 xor     eax, eax
.text:0040FBB9                 mov     edx, [esp+1Ch]
.text:0040FBBD                 test    edx, edx
.text:0040FBBF                 jnz     short loc_40FBF5
.text:0040FBC1
.text:0040FBC1 loc_40FBC1:                             ; CODE XREF: .text:0040FC13↓j
.text:0040FBC1                 cmp     eax, 1
.text:0040FBC4                 jz      short loc_40FBEC
.text:0040FBC6                 cmp     eax, 1
.text:0040FBC9                 jle     short loc_40FBE1
.text:0040FBCB
.text:0040FBCB loc_40FBCB:                             ; CODE XREF: .text:0040FBE3↓j
.text:0040FBCB                                         ; .text:0040FBF3↓j
.text:0040FBCB                 mov     edx, [esp+160h]
.text:0040FBD2                 mov     [esp], edx
.text:0040FBD5                 call    sub_4107F0
.text:0040FBDA                 mov     eax, edi
.text:0040FBDC                 jmp     loc_40FA1A
.text:0040FBE1 ; ---------------------------------------------------------------------------
.text:0040FBE1
.text:0040FBE1 loc_40FBE1:                             ; CODE XREF: .text:0040FBC9↑j
.text:0040FBE1                 test    eax, eax
.text:0040FBE3                 jnz     short loc_40FBCB
.text:0040FBE5                 mov     dword ptr [edi+10h], 0
.text:0040FBEC
.text:0040FBEC loc_40FBEC:                             ; CODE XREF: .text:0040FBC4↑j
.text:0040FBEC                 mov     dword ptr [edi+14h], 0
.text:0040FBF3                 jmp     short loc_40FBCB
.text:0040FBF5 ; ---------------------------------------------------------------------------
.text:0040FBF5
.text:0040FBF5 loc_40FBF5:                             ; CODE XREF: .text:0040FBBF↑j
.text:0040FBF5                 mov     dword ptr [esp+4], 40F98Eh
.text:0040FBFD                 lea     esi, [edi+14h]
.text:0040FC00                 lea     ebp, [edi+10h]
.text:0040FC03                 mov     [esp+0Ch], esi
.text:0040FC07                 mov     [esp+8], ebp
.text:0040FC0B                 mov     [esp], edx
.text:0040FC0E                 call    sscanf
.text:0040FC13                 jmp     short loc_40FBC1
.text:0040FC15 ; ---------------------------------------------------------------------------
.text:0040FC15
.text:0040FC15 loc_40FC15:                             ; CODE XREF: .text:0040FBA5↑j
.text:0040FC15                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FC19                 jz      short loc_40FC58
.text:0040FC1B
.text:0040FC1B loc_40FC1B:                             ; CODE XREF: .text:0040FC5C↓j
.text:0040FC1B                                         ; .text:0040FC62↓j
.text:0040FC1B                 cmp     al, 5Ch ; '\'
.text:0040FC1D                 jnz     short loc_40FBA7
.text:0040FC1F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FC23                 jz      short loc_40FC40
.text:0040FC25
.text:0040FC25 loc_40FC25:                             ; CODE XREF: .text:0040FC44↓j
.text:0040FC25                                         ; .text:0040FC4A↓j
.text:0040FC25                 cmp     al, 5Ch ; '\'
.text:0040FC27                 jnz     loc_40FBA7
.text:0040FC2D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040FC31                 jnz     loc_40FBA7
.text:0040FC37                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040FC3A                 inc     edx
.text:0040FC3B                 jmp     loc_40FBA9
.text:0040FC40 ; ---------------------------------------------------------------------------
.text:0040FC40
.text:0040FC40 loc_40FC40:                             ; CODE XREF: .text:0040FC23↑j
.text:0040FC40                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040FC44                 jnz     short loc_40FC25
.text:0040FC46                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040FC4A                 jnz     short loc_40FC25
.text:0040FC4C                 mov     byte ptr [ecx], 9
.text:0040FC4F
.text:0040FC4F loc_40FC4F:                             ; CODE XREF: .text:0040FC67↓j
.text:0040FC4F                 inc     ecx
.text:0040FC50                 add     edx, 3
.text:0040FC53                 jmp     loc_40FBAA
.text:0040FC58 ; ---------------------------------------------------------------------------
.text:0040FC58
.text:0040FC58 loc_40FC58:                             ; CODE XREF: .text:0040FC19↑j
.text:0040FC58                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040FC5C                 jnz     short loc_40FC1B
.text:0040FC5E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040FC62                 jnz     short loc_40FC1B
.text:0040FC64                 mov     byte ptr [ecx], 20h ; ' '
.text:0040FC67                 jmp     short loc_40FC4F
.text:0040FC69 ; ---------------------------------------------------------------------------
.text:0040FC69
.text:0040FC69 loc_40FC69:                             ; CODE XREF: .text:0040FB71↑j
.text:0040FC69                 mov     dword ptr [esp+4], 40F98Ah
.text:0040FC71                 mov     [esp], eax
.text:0040FC74                 call    strspn
.text:0040FC79                 add     [esp+1Ch], eax
.text:0040FC7D                 jmp     loc_40FB77
.text:0040FC82 ; ---------------------------------------------------------------------------
.text:0040FC82
.text:0040FC82 loc_40FC82:                             ; CODE XREF: .text:0040FB55↑j
.text:0040FC82                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FC86                 jz      short loc_40FCC9
.text:0040FC88
.text:0040FC88 loc_40FC88:                             ; CODE XREF: .text:0040FCCD↓j
.text:0040FC88                                         ; .text:0040FCD3↓j
.text:0040FC88                 cmp     al, 5Ch ; '\'
.text:0040FC8A                 jnz     loc_40FB5B
.text:0040FC90                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FC94                 jz      short loc_40FCB1
.text:0040FC96
.text:0040FC96 loc_40FC96:                             ; CODE XREF: .text:0040FCB5↓j
.text:0040FC96                                         ; .text:0040FCBB↓j
.text:0040FC96                 cmp     al, 5Ch ; '\'
.text:0040FC98                 jnz     loc_40FB5B
.text:0040FC9E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040FCA2                 jnz     loc_40FB5B
.text:0040FCA8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040FCAB                 inc     edx
.text:0040FCAC                 jmp     loc_40FB5D
.text:0040FCB1 ; ---------------------------------------------------------------------------
.text:0040FCB1
.text:0040FCB1 loc_40FCB1:                             ; CODE XREF: .text:0040FC94↑j
.text:0040FCB1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040FCB5                 jnz     short loc_40FC96
.text:0040FCB7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040FCBB                 jnz     short loc_40FC96
.text:0040FCBD                 mov     byte ptr [ecx], 9
.text:0040FCC0
.text:0040FCC0 loc_40FCC0:                             ; CODE XREF: .text:0040FCD8↓j
.text:0040FCC0                 inc     ecx
.text:0040FCC1                 add     edx, 3
.text:0040FCC4                 jmp     loc_40FB5E
.text:0040FCC9 ; ---------------------------------------------------------------------------
.text:0040FCC9
.text:0040FCC9 loc_40FCC9:                             ; CODE XREF: .text:0040FC86↑j
.text:0040FCC9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040FCCD                 jnz     short loc_40FC88
.text:0040FCCF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040FCD3                 jnz     short loc_40FC88
.text:0040FCD5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040FCD8                 jmp     short loc_40FCC0
.text:0040FCDA ; ---------------------------------------------------------------------------
.text:0040FCDA
.text:0040FCDA loc_40FCDA:                             ; CODE XREF: .text:0040FB21↑j
.text:0040FCDA                 mov     dword ptr [esp+4], 40F98Ah
.text:0040FCE2                 mov     [esp], eax
.text:0040FCE5                 call    strspn
.text:0040FCEA                 add     [esp+1Ch], eax
.text:0040FCEE                 jmp     loc_40FB27
.text:0040FCF3 ; ---------------------------------------------------------------------------
.text:0040FCF3
.text:0040FCF3 loc_40FCF3:                             ; CODE XREF: .text:0040FB05↑j
.text:0040FCF3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FCF7                 jz      short loc_40FD3A
.text:0040FCF9
.text:0040FCF9 loc_40FCF9:                             ; CODE XREF: .text:0040FD3E↓j
.text:0040FCF9                                         ; .text:0040FD44↓j
.text:0040FCF9                 cmp     al, 5Ch ; '\'
.text:0040FCFB                 jnz     loc_40FB0B
.text:0040FD01                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FD05                 jz      short loc_40FD22
.text:0040FD07
.text:0040FD07 loc_40FD07:                             ; CODE XREF: .text:0040FD26↓j
.text:0040FD07                                         ; .text:0040FD2C↓j
.text:0040FD07                 cmp     al, 5Ch ; '\'
.text:0040FD09                 jnz     loc_40FB0B
.text:0040FD0F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040FD13                 jnz     loc_40FB0B
.text:0040FD19                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040FD1C                 inc     edx
.text:0040FD1D                 jmp     loc_40FB0D
.text:0040FD22 ; ---------------------------------------------------------------------------
.text:0040FD22
.text:0040FD22 loc_40FD22:                             ; CODE XREF: .text:0040FD05↑j
.text:0040FD22                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040FD26                 jnz     short loc_40FD07
.text:0040FD28                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040FD2C                 jnz     short loc_40FD07
.text:0040FD2E                 mov     byte ptr [ecx], 9
.text:0040FD31
.text:0040FD31 loc_40FD31:                             ; CODE XREF: .text:0040FD49↓j
.text:0040FD31                 inc     ecx
.text:0040FD32                 add     edx, 3
.text:0040FD35                 jmp     loc_40FB0E
.text:0040FD3A ; ---------------------------------------------------------------------------
.text:0040FD3A
.text:0040FD3A loc_40FD3A:                             ; CODE XREF: .text:0040FCF7↑j
.text:0040FD3A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040FD3E                 jnz     short loc_40FCF9
.text:0040FD40                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040FD44                 jnz     short loc_40FCF9
.text:0040FD46                 mov     byte ptr [ecx], 20h ; ' '
.text:0040FD49                 jmp     short loc_40FD31
.text:0040FD4B ; ---------------------------------------------------------------------------
.text:0040FD4B
.text:0040FD4B loc_40FD4B:                             ; CODE XREF: .text:0040FAD0↑j
.text:0040FD4B                 mov     dword ptr [esp+4], 40F98Ah
.text:0040FD53                 mov     [esp], eax
.text:0040FD56                 call    strspn
.text:0040FD5B                 add     [esp+1Ch], eax
.text:0040FD5F                 jmp     loc_40FAD6
.text:0040FD64 ; ---------------------------------------------------------------------------
.text:0040FD64
.text:0040FD64 loc_40FD64:                             ; CODE XREF: .text:0040FAB5↑j
.text:0040FD64                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FD68                 jz      short loc_40FDAB
.text:0040FD6A
.text:0040FD6A loc_40FD6A:                             ; CODE XREF: .text:0040FDAF↓j
.text:0040FD6A                                         ; .text:0040FDB5↓j
.text:0040FD6A                 cmp     al, 5Ch ; '\'
.text:0040FD6C                 jnz     loc_40FABB
.text:0040FD72                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040FD76                 jz      short loc_40FD93
.text:0040FD78
.text:0040FD78 loc_40FD78:                             ; CODE XREF: .text:0040FD97↓j
.text:0040FD78                                         ; .text:0040FD9D↓j
.text:0040FD78                 cmp     al, 5Ch ; '\'
.text:0040FD7A                 jnz     loc_40FABB
.text:0040FD80                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040FD84                 jnz     loc_40FABB
.text:0040FD8A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040FD8D                 inc     edx
.text:0040FD8E                 jmp     loc_40FABD
.text:0040FD93 ; ---------------------------------------------------------------------------
.text:0040FD93
.text:0040FD93 loc_40FD93:                             ; CODE XREF: .text:0040FD76↑j
.text:0040FD93                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040FD97                 jnz     short loc_40FD78
.text:0040FD99                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040FD9D                 jnz     short loc_40FD78
.text:0040FD9F                 mov     byte ptr [ecx], 9
.text:0040FDA2
.text:0040FDA2 loc_40FDA2:                             ; CODE XREF: .text:0040FDBA↓j
.text:0040FDA2                 inc     ecx
.text:0040FDA3                 add     edx, 3
.text:0040FDA6                 jmp     loc_40FABE
.text:0040FDAB ; ---------------------------------------------------------------------------
.text:0040FDAB
.text:0040FDAB loc_40FDAB:                             ; CODE XREF: .text:0040FD68↑j
.text:0040FDAB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040FDAF                 jnz     short loc_40FD6A
.text:0040FDB1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040FDB5                 jnz     short loc_40FD6A
.text:0040FDB7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040FDBA                 jmp     short loc_40FDA2
.text:0040FDBA ; ---------------------------------------------------------------------------
.text:0040FDBC                 align 10h
.text:0040FDC0
.text:0040FDC0 loc_40FDC0:                             ; CODE XREF: .text:0040F9D2↑j
.text:0040FDC0                 mov     dword ptr [esp+4], 0
.text:0040FDC8                 mov     dword ptr [esp], 0
.text:0040FDCF                 call    GetLogicalDriveStringsA
.text:0040FDD4                 sub     esp, 8
.text:0040FDD7                 mov     ebx, eax
.text:0040FDD9                 call    GetProcessHeap
.text:0040FDDE                 mov     [esp], eax
.text:0040FDE1                 mov     [esp+8], ebx
.text:0040FDE5                 mov     dword ptr [esp+4], 0
.text:0040FDED                 call    HeapAlloc
.text:0040FDF2                 sub     esp, 0Ch
.text:0040FDF5                 mov     esi, eax
.text:0040FDF7                 mov     [esp+4], eax
.text:0040FDFB                 mov     [esp], ebx
.text:0040FDFE                 call    GetLogicalDriveStringsA
.text:0040FE03                 mov     off_4150B4, esi ; "notset"
.text:0040FE09                 sub     esp, 8
.text:0040FE0C                 jmp     loc_40F9D8
.text:0040FE0C ; ---------------------------------------------------------------------------
.text:0040FE11 ; const char aSSSSDD[]
.text:0040FE11 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040FE11                                         ; DATA XREF: .text:0040FF50↓o
.text:0040FE11                                         ; ___addmntentstr+F0↓o
.text:0040FE24                 align 10h
.text:0040FE30                 push    esi
.text:0040FE31                 push    ebx
.text:0040FE32                 sub     esp, 44h
.text:0040FE35                 mov     ebx, [esp+54h]
.text:0040FE39                 mov     esi, [esp+50h]
.text:0040FE3D                 mov     edx, [ebx]
.text:0040FE3F                 mov     [esp+20h], edx
.text:0040FE43                 mov     ecx, [ebx+4]
.text:0040FE46                 mov     [esp+24h], ecx
.text:0040FE4A                 mov     edx, [ebx+8]
.text:0040FE4D                 mov     [esp+28h], edx
.text:0040FE51                 mov     ecx, [ebx+0Ch]
.text:0040FE54                 mov     [esp+2Ch], ecx
.text:0040FE58                 mov     edx, [ebx+10h]
.text:0040FE5B                 mov     [esp+30h], edx
.text:0040FE5F                 mov     ecx, [ebx+14h]
.text:0040FE62                 mov     dword ptr [esp+8], 2
.text:0040FE6A                 mov     dword ptr [esp+4], 0
.text:0040FE72                 mov     [esp+34h], ecx
.text:0040FE76                 mov     [esp], esi
.text:0040FE79                 call    sub_4107E0
.text:0040FE7E ; ---------------------------------------------------------------------------
.text:0040FE7E                 test    eax, eax
.text:0040FE80                 mov     edx, 1
.text:0040FE85                 jnz     loc_40FF85
.text:0040FE8B                 mov     ebx, [esp+20h]
.text:0040FE8F                 mov     edx, ebx
.text:0040FE91                 movzx   eax, byte ptr [ebx]
.text:0040FE94                 test    al, al
.text:0040FE96                 jz      short loc_40FEC0
.text:0040FE98                 nop
.text:0040FE99                 lea     esi, [esi+0]
.text:0040FEA0
.text:0040FEA0 loc_40FEA0:                             ; CODE XREF: .text:0040FEBE↓j
.text:0040FEA0                 cmp     al, 20h ; ' '
.text:0040FEA2                 jz      loc_4100FA
.text:0040FEA8                 cmp     al, 9
.text:0040FEAA                 jz      loc_4100FA
.text:0040FEB0                 cmp     al, 5Ch ; '\'
.text:0040FEB2                 jz      loc_4100FA
.text:0040FEB8                 inc     ebx
.text:0040FEB9                 movzx   eax, byte ptr [ebx]
.text:0040FEBC                 test    al, al
.text:0040FEBE                 jnz     short loc_40FEA0
.text:0040FEC0
.text:0040FEC0 loc_40FEC0:                             ; CODE XREF: .text:0040FE96↑j
.text:0040FEC0                                         ; .text:004100FC↓j ...
.text:0040FEC0                 mov     ebx, [esp+24h]
.text:0040FEC4                 mov     edx, ebx
.text:0040FEC6                 movzx   eax, byte ptr [ebx]
.text:0040FEC9                 test    al, al
.text:0040FECB                 jz      short loc_40FEF0
.text:0040FECD                 lea     esi, [esi+0]
.text:0040FED0
.text:0040FED0 loc_40FED0:                             ; CODE XREF: .text:0040FEEE↓j
.text:0040FED0                 cmp     al, 20h ; ' '
.text:0040FED2                 jz      loc_41007A
.text:0040FED8                 cmp     al, 9
.text:0040FEDA                 jz      loc_41007A
.text:0040FEE0                 cmp     al, 5Ch ; '\'
.text:0040FEE2                 jz      loc_41007A
.text:0040FEE8                 inc     ebx
.text:0040FEE9                 movzx   eax, byte ptr [ebx]
.text:0040FEEC                 test    al, al
.text:0040FEEE                 jnz     short loc_40FED0
.text:0040FEF0
.text:0040FEF0 loc_40FEF0:                             ; CODE XREF: .text:0040FECB↑j
.text:0040FEF0                                         ; .text:0041007C↓j ...
.text:0040FEF0                 mov     ebx, [esp+28h]
.text:0040FEF4                 mov     edx, ebx
.text:0040FEF6                 movzx   eax, byte ptr [ebx]
.text:0040FEF9                 test    al, al
.text:0040FEFB                 jz      short loc_40FF20
.text:0040FEFD                 lea     esi, [esi+0]
.text:0040FF00
.text:0040FF00 loc_40FF00:                             ; CODE XREF: .text:0040FF1E↓j
.text:0040FF00                 cmp     al, 20h ; ' '
.text:0040FF02                 jz      loc_40FFFE
.text:0040FF08                 cmp     al, 9
.text:0040FF0A                 jz      loc_40FFFE
.text:0040FF10                 cmp     al, 5Ch ; '\'
.text:0040FF12                 jz      loc_40FFFE
.text:0040FF18                 inc     ebx
.text:0040FF19                 movzx   eax, byte ptr [ebx]
.text:0040FF1C                 test    al, al
.text:0040FF1E                 jnz     short loc_40FF00
.text:0040FF20
.text:0040FF20 loc_40FF20:                             ; CODE XREF: .text:0040FEFB↑j
.text:0040FF20                                         ; .text:00410000↓j ...
.text:0040FF20                 mov     edx, [esp+2Ch]
.text:0040FF24                 mov     ebx, edx
.text:0040FF26                 movzx   eax, byte ptr [edx]
.text:0040FF29                 test    al, al
.text:0040FF2B                 jz      short loc_40FF44
.text:0040FF2D                 lea     esi, [esi+0]
.text:0040FF30
.text:0040FF30 loc_40FF30:                             ; CODE XREF: .text:0040FF42↓j
.text:0040FF30                 cmp     al, 20h ; ' '
.text:0040FF32                 jz      short loc_40FF8D
.text:0040FF34                 cmp     al, 9
.text:0040FF36                 jz      short loc_40FF8D
.text:0040FF38                 cmp     al, 5Ch ; '\'
.text:0040FF3A                 jz      short loc_40FF8D
.text:0040FF3C                 inc     ebx
.text:0040FF3D                 movzx   eax, byte ptr [ebx]
.text:0040FF40                 test    al, al
.text:0040FF42                 jnz     short loc_40FF30
.text:0040FF44
.text:0040FF44 loc_40FF44:                             ; CODE XREF: .text:0040FF2B↑j
.text:0040FF44                                         ; .text:0040FF8F↓j ...
.text:0040FF44                 mov     [esp+14h], edx
.text:0040FF48                 mov     ecx, [esp+34h]
.text:0040FF4C                 mov     ebx, [esp+30h]
.text:0040FF50                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040FF58                 mov     edx, [esp+24h]
.text:0040FF5C                 mov     [esp+1Ch], ecx
.text:0040FF60                 mov     ecx, [esp+28h]
.text:0040FF64                 mov     [esp+18h], ebx
.text:0040FF68                 mov     ebx, [esp+20h]
.text:0040FF6C                 mov     [esp+0Ch], edx
.text:0040FF70                 mov     [esp+10h], ecx
.text:0040FF74                 mov     [esp+8], ebx
.text:0040FF78                 mov     [esp], esi
.text:0040FF7B                 call    fprintf
.text:0040FF80                 mov     edx, eax
.text:0040FF82                 shr     edx, 1Fh
.text:0040FF85
.text:0040FF85 loc_40FF85:                             ; CODE XREF: .text:0040FE85↑j
.text:0040FF85                 add     esp, 44h
.text:0040FF88                 mov     eax, edx
.text:0040FF8A                 pop     ebx
.text:0040FF8B                 pop     esi
.text:0040FF8C                 retn
.text:0040FF8D ; ---------------------------------------------------------------------------
.text:0040FF8D
.text:0040FF8D loc_40FF8D:                             ; CODE XREF: .text:0040FF32↑j
.text:0040FF8D                                         ; .text:0040FF36↑j ...
.text:0040FF8D                 test    al, al
.text:0040FF8F                 jz      short loc_40FF44
.text:0040FF91                 mov     [esp], edx
.text:0040FF94                 mov     ebx, edx
.text:0040FF96                 call    strlen
.text:0040FF9B                 lea     edx, ds:1[eax*4]
.text:0040FFA2                 mov     [esp], edx
.text:0040FFA5                 call    malloc
.text:0040FFAA                 mov     [esp+2Ch], eax
.text:0040FFAE                 mov     edx, eax
.text:0040FFB0
.text:0040FFB0 loc_40FFB0:                             ; CODE XREF: .text:0040FFC8↓j
.text:0040FFB0                 movzx   eax, byte ptr [ebx]
.text:0040FFB3                 cmp     al, 20h ; ' '
.text:0040FFB5                 jz      short loc_40FFED
.text:0040FFB7                 cmp     al, 9
.text:0040FFB9                 jz      short loc_40FFDC
.text:0040FFBB                 cmp     al, 5Ch ; '\'
.text:0040FFBD                 jz      short loc_40FFD3
.text:0040FFBF                 mov     [edx], al
.text:0040FFC1
.text:0040FFC1 loc_40FFC1:                             ; CODE XREF: .text:0040FFDA↓j
.text:0040FFC1                                         ; .text:0040FFEB↓j ...
.text:0040FFC1                 movzx   ecx, byte ptr [ebx]
.text:0040FFC4                 inc     edx
.text:0040FFC5                 inc     ebx
.text:0040FFC6                 test    cl, cl
.text:0040FFC8                 jnz     short loc_40FFB0
.text:0040FFCA                 mov     edx, [esp+2Ch]
.text:0040FFCE                 jmp     loc_40FF44
.text:0040FFD3 ; ---------------------------------------------------------------------------
.text:0040FFD3
.text:0040FFD3 loc_40FFD3:                             ; CODE XREF: .text:0040FFBD↑j
.text:0040FFD3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FFD6                 inc     edx
.text:0040FFD7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FFDA                 jmp     short loc_40FFC1
.text:0040FFDC ; ---------------------------------------------------------------------------
.text:0040FFDC
.text:0040FFDC loc_40FFDC:                             ; CODE XREF: .text:0040FFB9↑j
.text:0040FFDC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FFDF                 inc     edx
.text:0040FFE0                 mov     byte ptr [edx], 30h ; '0'
.text:0040FFE3                 inc     edx
.text:0040FFE4                 mov     byte ptr [edx], 31h ; '1'
.text:0040FFE7                 inc     edx
.text:0040FFE8                 mov     byte ptr [edx], 32h ; '2'
.text:0040FFEB                 jmp     short loc_40FFC1
.text:0040FFED ; ---------------------------------------------------------------------------
.text:0040FFED
.text:0040FFED loc_40FFED:                             ; CODE XREF: .text:0040FFB5↑j
.text:0040FFED                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FFF0                 inc     edx
.text:0040FFF1                 mov     byte ptr [edx], 30h ; '0'
.text:0040FFF4                 inc     edx
.text:0040FFF5                 mov     byte ptr [edx], 34h ; '4'
.text:0040FFF8                 inc     edx
.text:0040FFF9                 mov     byte ptr [edx], 30h ; '0'
.text:0040FFFC                 jmp     short loc_40FFC1
.text:0040FFFE ; ---------------------------------------------------------------------------
.text:0040FFFE
.text:0040FFFE loc_40FFFE:                             ; CODE XREF: .text:0040FF02↑j
.text:0040FFFE                                         ; .text:0040FF0A↑j ...
.text:0040FFFE                 test    al, al
.text:00410000                 jz      loc_40FF20
.text:00410006                 mov     [esp], edx
.text:00410009                 mov     ebx, edx
.text:0041000B                 call    strlen
.text:00410010                 lea     edx, ds:1[eax*4]
.text:00410017                 mov     [esp], edx
.text:0041001A                 call    malloc
.text:0041001F                 mov     [esp+28h], eax
.text:00410023                 mov     edx, eax
.text:00410025                 lea     esi, [esi+0]
.text:00410029                 lea     edi, [edi+0]
.text:00410030
.text:00410030 loc_410030:                             ; CODE XREF: .text:00410048↓j
.text:00410030                 movzx   eax, byte ptr [ebx]
.text:00410033                 cmp     al, 20h ; ' '
.text:00410035                 jz      short loc_410069
.text:00410037                 cmp     al, 9
.text:00410039                 jz      short loc_410058
.text:0041003B                 cmp     al, 5Ch ; '\'
.text:0041003D                 jz      short loc_41004F
.text:0041003F                 mov     [edx], al
.text:00410041
.text:00410041 loc_410041:                             ; CODE XREF: .text:00410056↓j
.text:00410041                                         ; .text:00410067↓j ...
.text:00410041                 movzx   ecx, byte ptr [ebx]
.text:00410044                 inc     edx
.text:00410045                 inc     ebx
.text:00410046                 test    cl, cl
.text:00410048                 jnz     short loc_410030
.text:0041004A                 jmp     loc_40FF20
.text:0041004F ; ---------------------------------------------------------------------------
.text:0041004F
.text:0041004F loc_41004F:                             ; CODE XREF: .text:0041003D↑j
.text:0041004F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410052                 inc     edx
.text:00410053                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410056                 jmp     short loc_410041
.text:00410058 ; ---------------------------------------------------------------------------
.text:00410058
.text:00410058 loc_410058:                             ; CODE XREF: .text:00410039↑j
.text:00410058                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041005B                 inc     edx
.text:0041005C                 mov     byte ptr [edx], 30h ; '0'
.text:0041005F                 inc     edx
.text:00410060                 mov     byte ptr [edx], 31h ; '1'
.text:00410063                 inc     edx
.text:00410064                 mov     byte ptr [edx], 32h ; '2'
.text:00410067                 jmp     short loc_410041
.text:00410069 ; ---------------------------------------------------------------------------
.text:00410069
.text:00410069 loc_410069:                             ; CODE XREF: .text:00410035↑j
.text:00410069                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041006C                 inc     edx
.text:0041006D                 mov     byte ptr [edx], 30h ; '0'
.text:00410070                 inc     edx
.text:00410071                 mov     byte ptr [edx], 34h ; '4'
.text:00410074                 inc     edx
.text:00410075                 mov     byte ptr [edx], 30h ; '0'
.text:00410078                 jmp     short loc_410041
.text:0041007A ; ---------------------------------------------------------------------------
.text:0041007A
.text:0041007A loc_41007A:                             ; CODE XREF: .text:0040FED2↑j
.text:0041007A                                         ; .text:0040FEDA↑j ...
.text:0041007A                 test    al, al
.text:0041007C                 jz      loc_40FEF0
.text:00410082                 mov     [esp], edx
.text:00410085                 mov     ebx, edx
.text:00410087                 call    strlen
.text:0041008C                 lea     edx, ds:1[eax*4]
.text:00410093                 mov     [esp], edx
.text:00410096                 call    malloc
.text:0041009B                 mov     [esp+24h], eax
.text:0041009F                 mov     edx, eax
.text:004100A1                 jmp     short loc_4100B0
.text:004100A1 ; ---------------------------------------------------------------------------
.text:004100A3                 align 10h
.text:004100B0
.text:004100B0 loc_4100B0:                             ; CODE XREF: .text:004100A1↑j
.text:004100B0                                         ; .text:004100C8↓j
.text:004100B0                 movzx   eax, byte ptr [ebx]
.text:004100B3                 cmp     al, 20h ; ' '
.text:004100B5                 jz      short loc_4100E9
.text:004100B7                 cmp     al, 9
.text:004100B9                 jz      short loc_4100D8
.text:004100BB                 cmp     al, 5Ch ; '\'
.text:004100BD                 jz      short loc_4100CF
.text:004100BF                 mov     [edx], al
.text:004100C1
.text:004100C1 loc_4100C1:                             ; CODE XREF: .text:004100D6↓j
.text:004100C1                                         ; .text:004100E7↓j ...
.text:004100C1                 movzx   ecx, byte ptr [ebx]
.text:004100C4                 inc     edx
.text:004100C5                 inc     ebx
.text:004100C6                 test    cl, cl
.text:004100C8                 jnz     short loc_4100B0
.text:004100CA                 jmp     loc_40FEF0
.text:004100CF ; ---------------------------------------------------------------------------
.text:004100CF
.text:004100CF loc_4100CF:                             ; CODE XREF: .text:004100BD↑j
.text:004100CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004100D2                 inc     edx
.text:004100D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004100D6                 jmp     short loc_4100C1
.text:004100D8 ; ---------------------------------------------------------------------------
.text:004100D8
.text:004100D8 loc_4100D8:                             ; CODE XREF: .text:004100B9↑j
.text:004100D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004100DB                 inc     edx
.text:004100DC                 mov     byte ptr [edx], 30h ; '0'
.text:004100DF                 inc     edx
.text:004100E0                 mov     byte ptr [edx], 31h ; '1'
.text:004100E3                 inc     edx
.text:004100E4                 mov     byte ptr [edx], 32h ; '2'
.text:004100E7                 jmp     short loc_4100C1
.text:004100E9 ; ---------------------------------------------------------------------------
.text:004100E9
.text:004100E9 loc_4100E9:                             ; CODE XREF: .text:004100B5↑j
.text:004100E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004100EC                 inc     edx
.text:004100ED                 mov     byte ptr [edx], 30h ; '0'
.text:004100F0                 inc     edx
.text:004100F1                 mov     byte ptr [edx], 34h ; '4'
.text:004100F4                 inc     edx
.text:004100F5                 mov     byte ptr [edx], 30h ; '0'
.text:004100F8                 jmp     short loc_4100C1
.text:004100FA ; ---------------------------------------------------------------------------
.text:004100FA
.text:004100FA loc_4100FA:                             ; CODE XREF: .text:0040FEA2↑j
.text:004100FA                                         ; .text:0040FEAA↑j ...
.text:004100FA                 test    al, al
.text:004100FC                 jz      loc_40FEC0
.text:00410102                 mov     [esp], edx
.text:00410105                 mov     ebx, edx
.text:00410107                 call    strlen
.text:0041010C                 lea     ecx, ds:1[eax*4]
.text:00410113                 mov     [esp], ecx
.text:00410116                 call    malloc
.text:0041011B                 mov     [esp+20h], eax
.text:0041011F                 mov     edx, eax
.text:00410121                 jmp     short loc_410130
.text:00410121 ; ---------------------------------------------------------------------------
.text:00410123                 align 10h
.text:00410130
.text:00410130 loc_410130:                             ; CODE XREF: .text:00410121↑j
.text:00410130                                         ; .text:00410148↓j
.text:00410130                 movzx   eax, byte ptr [ebx]
.text:00410133                 cmp     al, 20h ; ' '
.text:00410135                 jz      short loc_410169
.text:00410137                 cmp     al, 9
.text:00410139                 jz      short loc_410158
.text:0041013B                 cmp     al, 5Ch ; '\'
.text:0041013D                 jz      short loc_41014F
.text:0041013F                 mov     [edx], al
.text:00410141
.text:00410141 loc_410141:                             ; CODE XREF: .text:00410156↓j
.text:00410141                                         ; .text:00410167↓j ...
.text:00410141                 movzx   ecx, byte ptr [ebx]
.text:00410144                 inc     edx
.text:00410145                 inc     ebx
.text:00410146                 test    cl, cl
.text:00410148                 jnz     short loc_410130
.text:0041014A                 jmp     loc_40FEC0
.text:0041014F ; ---------------------------------------------------------------------------
.text:0041014F
.text:0041014F loc_41014F:                             ; CODE XREF: .text:0041013D↑j
.text:0041014F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410152                 inc     edx
.text:00410153                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410156                 jmp     short loc_410141
.text:00410158 ; ---------------------------------------------------------------------------
.text:00410158
.text:00410158 loc_410158:                             ; CODE XREF: .text:00410139↑j
.text:00410158                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041015B                 inc     edx
.text:0041015C                 mov     byte ptr [edx], 30h ; '0'
.text:0041015F                 inc     edx
.text:00410160                 mov     byte ptr [edx], 31h ; '1'
.text:00410163                 inc     edx
.text:00410164                 mov     byte ptr [edx], 32h ; '2'
.text:00410167                 jmp     short loc_410141
.text:00410169 ; ---------------------------------------------------------------------------
.text:00410169
.text:00410169 loc_410169:                             ; CODE XREF: .text:00410135↑j
.text:00410169                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041016C                 inc     edx
.text:0041016D                 mov     byte ptr [edx], 30h ; '0'
.text:00410170                 inc     edx
.text:00410171                 mov     byte ptr [edx], 34h ; '4'
.text:00410174                 inc     edx
.text:00410175                 mov     byte ptr [edx], 30h ; '0'
.text:00410178                 jmp     short loc_410141
.text:00410178 ; ---------------------------------------------------------------------------
.text:0041017A                 align 10h
.text:00410180
.text:00410180 ; =============== S U B R O U T I N E =======================================
.text:00410180
.text:00410180 ; Attributes: info_from_lumina
.text:00410180
.text:00410180 ; int __cdecl __addmntentstr(char *, int)
.text:00410180 ___addmntentstr proc near               ; CODE XREF: .text:0040FA4A↑p
.text:00410180
.text:00410180 Buffer          = dword ptr -4Ch
.text:00410180 Format          = dword ptr -48h
.text:00410180 var_44          = dword ptr -44h
.text:00410180 var_40          = dword ptr -40h
.text:00410180 var_3C          = dword ptr -3Ch
.text:00410180 var_38          = dword ptr -38h
.text:00410180 var_34          = dword ptr -34h
.text:00410180 var_30          = dword ptr -30h
.text:00410180 var_2C          = dword ptr -2Ch
.text:00410180 var_28          = dword ptr -28h
.text:00410180 var_24          = dword ptr -24h
.text:00410180 Str             = dword ptr -20h
.text:00410180 var_1C          = dword ptr -1Ch
.text:00410180 var_18          = dword ptr -18h
.text:00410180 arg_0           = dword ptr  4
.text:00410180 arg_4           = dword ptr  8
.text:00410180
.text:00410180                 push    ebx
.text:00410181                 sub     esp, 48h
.text:00410184                 mov     edx, [esp+4Ch+arg_4]
.text:00410188                 mov     ecx, [edx]
.text:0041018A                 mov     [esp+4Ch+var_2C], ecx
.text:0041018E                 mov     ebx, [edx+4]
.text:00410191                 mov     [esp+4Ch+var_28], ebx
.text:00410195                 mov     ebx, [edx+8]
.text:00410198                 mov     [esp+4Ch+var_24], ebx
.text:0041019C                 mov     ebx, [edx+0Ch]
.text:0041019F                 mov     [esp+4Ch+Str], ebx
.text:004101A3                 mov     ebx, [edx+10h]
.text:004101A6                 mov     [esp+4Ch+var_1C], ebx
.text:004101AA                 mov     ebx, [edx+14h]
.text:004101AD                 mov     [esp+4Ch+var_18], ebx
.text:004101B1                 mov     ebx, ecx
.text:004101B3                 movzx   eax, byte ptr [ecx]
.text:004101B6                 test    al, al
.text:004101B8                 jz      loc_4104A1
.text:004101BE                 mov     esi, esi
.text:004101C0
.text:004101C0 loc_4101C0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:004101C0                 cmp     al, 20h ; ' '
.text:004101C2                 jz      loc_410420
.text:004101C8                 cmp     al, 9
.text:004101CA                 jz      loc_410420
.text:004101D0                 cmp     al, 5Ch ; '\'
.text:004101D2                 jz      loc_410420
.text:004101D8                 inc     ebx
.text:004101D9                 movzx   eax, byte ptr [ebx]
.text:004101DC                 test    al, al
.text:004101DE                 jnz     short loc_4101C0
.text:004101E0
.text:004101E0 loc_4101E0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:004101E0                                         ; ___addmntentstr+2EA↓j
.text:004101E0                 mov     ebx, [esp+4Ch+var_28]
.text:004101E4                 mov     edx, ebx
.text:004101E6                 movzx   eax, byte ptr [ebx]
.text:004101E9                 test    al, al
.text:004101EB                 jz      short loc_410210
.text:004101ED                 lea     esi, [esi+0]
.text:004101F0
.text:004101F0 loc_4101F0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:004101F0                 cmp     al, 20h ; ' '
.text:004101F2                 jz      loc_41039A
.text:004101F8                 cmp     al, 9
.text:004101FA                 jz      loc_41039A
.text:00410200                 cmp     al, 5Ch ; '\'
.text:00410202                 jz      loc_41039A
.text:00410208                 inc     ebx
.text:00410209                 movzx   eax, byte ptr [ebx]
.text:0041020C                 test    al, al
.text:0041020E                 jnz     short loc_4101F0
.text:00410210
.text:00410210 loc_410210:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:00410210                                         ; ___addmntentstr+21C↓j ...
.text:00410210                 mov     ebx, [esp+4Ch+var_24]
.text:00410214                 mov     edx, ebx
.text:00410216                 movzx   eax, byte ptr [ebx]
.text:00410219                 test    al, al
.text:0041021B                 jz      short loc_410240
.text:0041021D                 lea     esi, [esi+0]
.text:00410220
.text:00410220 loc_410220:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:00410220                 cmp     al, 20h ; ' '
.text:00410222                 jz      loc_41031E
.text:00410228                 cmp     al, 9
.text:0041022A                 jz      loc_41031E
.text:00410230                 cmp     al, 5Ch ; '\'
.text:00410232                 jz      loc_41031E
.text:00410238                 inc     ebx
.text:00410239                 movzx   eax, byte ptr [ebx]
.text:0041023C                 test    al, al
.text:0041023E                 jnz     short loc_410220
.text:00410240
.text:00410240 loc_410240:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:00410240                                         ; ___addmntentstr+1A0↓j ...
.text:00410240                 mov     edx, [esp+4Ch+Str]
.text:00410244                 mov     ebx, edx
.text:00410246                 movzx   eax, byte ptr [edx]
.text:00410249                 test    al, al
.text:0041024B                 jz      short loc_410264
.text:0041024D                 lea     esi, [esi+0]
.text:00410250
.text:00410250 loc_410250:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:00410250                 cmp     al, 20h ; ' '
.text:00410252                 jz      short loc_4102AC
.text:00410254                 cmp     al, 9
.text:00410256                 jz      short loc_4102AC
.text:00410258                 cmp     al, 5Ch ; '\'
.text:0041025A                 jz      short loc_4102AC
.text:0041025C                 inc     ebx
.text:0041025D                 movzx   eax, byte ptr [ebx]
.text:00410260                 test    al, al
.text:00410262                 jnz     short loc_410250
.text:00410264
.text:00410264 loc_410264:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00410264                                         ; ___addmntentstr+12E↓j ...
.text:00410264                 mov     [esp+4Ch+var_38], edx
.text:00410268                 mov     ebx, [esp+4Ch+var_18]
.text:0041026C                 mov     ecx, [esp+4Ch+var_1C]
.text:00410270                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00410278                 mov     edx, [esp+4Ch+var_2C]
.text:0041027C                 mov     [esp+4Ch+var_30], ebx
.text:00410280                 mov     ebx, [esp+4Ch+var_24]
.text:00410284                 mov     [esp+4Ch+var_34], ecx
.text:00410288                 mov     ecx, [esp+4Ch+var_28]
.text:0041028C                 mov     [esp+4Ch+var_3C], ebx
.text:00410290                 mov     ebx, [esp+4Ch+arg_0]
.text:00410294                 mov     [esp+4Ch+var_40], ecx
.text:00410298                 mov     [esp+4Ch+var_44], edx
.text:0041029C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041029F                 call    sprintf
.text:004102A4                 add     esp, 48h
.text:004102A7                 shr     eax, 1Fh
.text:004102AA                 pop     ebx
.text:004102AB                 retn
.text:004102AC ; ---------------------------------------------------------------------------
.text:004102AC
.text:004102AC loc_4102AC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:004102AC                                         ; ___addmntentstr+D6↑j ...
.text:004102AC                 test    al, al
.text:004102AE                 jz      short loc_410264
.text:004102B0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:004102B3                 mov     ebx, edx
.text:004102B5                 call    strlen
.text:004102BA                 lea     edx, ds:1[eax*4]
.text:004102C1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004102C4                 call    malloc
.text:004102C9                 mov     [esp+4Ch+Str], eax
.text:004102CD                 mov     edx, eax
.text:004102CF                 nop
.text:004102D0
.text:004102D0 loc_4102D0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:004102D0                 movzx   eax, byte ptr [ebx]
.text:004102D3                 cmp     al, 20h ; ' '
.text:004102D5                 jz      short loc_41030D
.text:004102D7                 cmp     al, 9
.text:004102D9                 jz      short loc_4102FC
.text:004102DB                 cmp     al, 5Ch ; '\'
.text:004102DD                 jz      short loc_4102F3
.text:004102DF                 mov     [edx], al
.text:004102E1
.text:004102E1 loc_4102E1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:004102E1                                         ; ___addmntentstr+18B↓j ...
.text:004102E1                 movzx   ecx, byte ptr [ebx]
.text:004102E4                 inc     edx
.text:004102E5                 inc     ebx
.text:004102E6                 test    cl, cl
.text:004102E8                 jnz     short loc_4102D0
.text:004102EA                 mov     edx, [esp+4Ch+Str]
.text:004102EE                 jmp     loc_410264
.text:004102F3 ; ---------------------------------------------------------------------------
.text:004102F3
.text:004102F3 loc_4102F3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:004102F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004102F6                 inc     edx
.text:004102F7                 mov     byte ptr [edx], 5Ch ; '\'
.text:004102FA                 jmp     short loc_4102E1
.text:004102FC ; ---------------------------------------------------------------------------
.text:004102FC
.text:004102FC loc_4102FC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:004102FC                 mov     byte ptr [edx], 5Ch ; '\'
.text:004102FF                 inc     edx
.text:00410300                 mov     byte ptr [edx], 30h ; '0'
.text:00410303                 inc     edx
.text:00410304                 mov     byte ptr [edx], 31h ; '1'
.text:00410307                 inc     edx
.text:00410308                 mov     byte ptr [edx], 32h ; '2'
.text:0041030B                 jmp     short loc_4102E1
.text:0041030D ; ---------------------------------------------------------------------------
.text:0041030D
.text:0041030D loc_41030D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0041030D                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410310                 inc     edx
.text:00410311                 mov     byte ptr [edx], 30h ; '0'
.text:00410314                 inc     edx
.text:00410315                 mov     byte ptr [edx], 34h ; '4'
.text:00410318                 inc     edx
.text:00410319                 mov     byte ptr [edx], 30h ; '0'
.text:0041031C                 jmp     short loc_4102E1
.text:0041031E ; ---------------------------------------------------------------------------
.text:0041031E
.text:0041031E loc_41031E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0041031E                                         ; ___addmntentstr+AA↑j ...
.text:0041031E                 test    al, al
.text:00410320                 jz      loc_410240
.text:00410326                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00410329                 mov     ebx, edx
.text:0041032B                 call    strlen
.text:00410330                 lea     edx, ds:1[eax*4]
.text:00410337                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041033A                 call    malloc
.text:0041033F                 mov     [esp+4Ch+var_24], eax
.text:00410343                 mov     edx, eax
.text:00410345                 lea     esi, [esi+0]
.text:00410349                 lea     edi, [edi+0]
.text:00410350
.text:00410350 loc_410350:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:00410350                 movzx   eax, byte ptr [ebx]
.text:00410353                 cmp     al, 20h ; ' '
.text:00410355                 jz      short loc_410389
.text:00410357                 cmp     al, 9
.text:00410359                 jz      short loc_410378
.text:0041035B                 cmp     al, 5Ch ; '\'
.text:0041035D                 jz      short loc_41036F
.text:0041035F                 mov     [edx], al
.text:00410361
.text:00410361 loc_410361:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00410361                                         ; ___addmntentstr+207↓j ...
.text:00410361                 movzx   ecx, byte ptr [ebx]
.text:00410364                 inc     edx
.text:00410365                 inc     ebx
.text:00410366                 test    cl, cl
.text:00410368                 jnz     short loc_410350
.text:0041036A                 jmp     loc_410240
.text:0041036F ; ---------------------------------------------------------------------------
.text:0041036F
.text:0041036F loc_41036F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041036F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410372                 inc     edx
.text:00410373                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410376                 jmp     short loc_410361
.text:00410378 ; ---------------------------------------------------------------------------
.text:00410378
.text:00410378 loc_410378:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00410378                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041037B                 inc     edx
.text:0041037C                 mov     byte ptr [edx], 30h ; '0'
.text:0041037F                 inc     edx
.text:00410380                 mov     byte ptr [edx], 31h ; '1'
.text:00410383                 inc     edx
.text:00410384                 mov     byte ptr [edx], 32h ; '2'
.text:00410387                 jmp     short loc_410361
.text:00410389 ; ---------------------------------------------------------------------------
.text:00410389
.text:00410389 loc_410389:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00410389                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041038C                 inc     edx
.text:0041038D                 mov     byte ptr [edx], 30h ; '0'
.text:00410390                 inc     edx
.text:00410391                 mov     byte ptr [edx], 34h ; '4'
.text:00410394                 inc     edx
.text:00410395                 mov     byte ptr [edx], 30h ; '0'
.text:00410398                 jmp     short loc_410361
.text:0041039A ; ---------------------------------------------------------------------------
.text:0041039A
.text:0041039A loc_41039A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041039A                                         ; ___addmntentstr+7A↑j ...
.text:0041039A                 test    al, al
.text:0041039C                 jz      loc_410210
.text:004103A2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:004103A5                 mov     ebx, edx
.text:004103A7                 call    strlen
.text:004103AC                 lea     edx, ds:1[eax*4]
.text:004103B3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004103B6                 call    malloc
.text:004103BB                 mov     [esp+4Ch+var_28], eax
.text:004103BF                 mov     edx, eax
.text:004103C1                 jmp     short loc_4103D0
.text:004103C1 ; ---------------------------------------------------------------------------
.text:004103C3                 align 10h
.text:004103D0
.text:004103D0 loc_4103D0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:004103D0                                         ; ___addmntentstr+268↓j
.text:004103D0                 movzx   eax, byte ptr [ebx]
.text:004103D3                 cmp     al, 20h ; ' '
.text:004103D5                 jz      short loc_410409
.text:004103D7                 cmp     al, 9
.text:004103D9                 jz      short loc_4103F8
.text:004103DB                 cmp     al, 5Ch ; '\'
.text:004103DD                 jz      short loc_4103EF
.text:004103DF                 mov     [edx], al
.text:004103E1
.text:004103E1 loc_4103E1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:004103E1                                         ; ___addmntentstr+287↓j ...
.text:004103E1                 movzx   ecx, byte ptr [ebx]
.text:004103E4                 inc     edx
.text:004103E5                 inc     ebx
.text:004103E6                 test    cl, cl
.text:004103E8                 jnz     short loc_4103D0
.text:004103EA                 jmp     loc_410210
.text:004103EF ; ---------------------------------------------------------------------------
.text:004103EF
.text:004103EF loc_4103EF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:004103EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004103F2                 inc     edx
.text:004103F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004103F6                 jmp     short loc_4103E1
.text:004103F8 ; ---------------------------------------------------------------------------
.text:004103F8
.text:004103F8 loc_4103F8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:004103F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004103FB                 inc     edx
.text:004103FC                 mov     byte ptr [edx], 30h ; '0'
.text:004103FF                 inc     edx
.text:00410400                 mov     byte ptr [edx], 31h ; '1'
.text:00410403                 inc     edx
.text:00410404                 mov     byte ptr [edx], 32h ; '2'
.text:00410407                 jmp     short loc_4103E1
.text:00410409 ; ---------------------------------------------------------------------------
.text:00410409
.text:00410409 loc_410409:                             ; CODE XREF: ___addmntentstr+255↑j
.text:00410409                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041040C                 inc     edx
.text:0041040D                 mov     byte ptr [edx], 30h ; '0'
.text:00410410                 inc     edx
.text:00410411                 mov     byte ptr [edx], 34h ; '4'
.text:00410414                 inc     edx
.text:00410415                 mov     byte ptr [edx], 30h ; '0'
.text:00410418                 jmp     short loc_4103E1
.text:00410418 ; ---------------------------------------------------------------------------
.text:0041041A                 align 10h
.text:00410420
.text:00410420 loc_410420:                             ; CODE XREF: ___addmntentstr+42↑j
.text:00410420                                         ; ___addmntentstr+4A↑j ...
.text:00410420                 test    al, al
.text:00410422                 jz      loc_4101E0
.text:00410428                 mov     ebx, [esp+4Ch+var_2C]
.text:0041042C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0041042F                 call    strlen
.text:00410434                 lea     edx, ds:1[eax*4]
.text:0041043B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041043E                 call    malloc
.text:00410443                 mov     [esp+4Ch+var_2C], eax
.text:00410447                 mov     edx, eax
.text:00410449                 lea     esi, [esi+0]
.text:00410450
.text:00410450 loc_410450:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:00410450                 movzx   eax, byte ptr [ebx]
.text:00410453                 cmp     al, 20h ; ' '
.text:00410455                 jz      short loc_410490
.text:00410457                 cmp     al, 9
.text:00410459                 jz      short loc_410478
.text:0041045B                 cmp     al, 5Ch ; '\'
.text:0041045D                 jz      short loc_41046F
.text:0041045F                 mov     [edx], al
.text:00410461
.text:00410461 loc_410461:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00410461                                         ; ___addmntentstr+307↓j ...
.text:00410461                 movzx   ecx, byte ptr [ebx]
.text:00410464                 inc     edx
.text:00410465                 inc     ebx
.text:00410466                 test    cl, cl
.text:00410468                 jnz     short loc_410450
.text:0041046A                 jmp     loc_4101E0
.text:0041046F ; ---------------------------------------------------------------------------
.text:0041046F
.text:0041046F loc_41046F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041046F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410472                 inc     edx
.text:00410473                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410476                 jmp     short loc_410461
.text:00410478 ; ---------------------------------------------------------------------------
.text:00410478
.text:00410478 loc_410478:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00410478                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041047B                 inc     edx
.text:0041047C                 mov     byte ptr [edx], 30h ; '0'
.text:0041047F                 inc     edx
.text:00410480                 mov     byte ptr [edx], 31h ; '1'
.text:00410483                 inc     edx
.text:00410484                 mov     byte ptr [edx], 32h ; '2'
.text:00410487                 jmp     short loc_410461
.text:00410487 ; ---------------------------------------------------------------------------
.text:00410489                 align 10h
.text:00410490
.text:00410490 loc_410490:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00410490                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410493                 inc     edx
.text:00410494                 mov     byte ptr [edx], 30h ; '0'
.text:00410497                 inc     edx
.text:00410498                 mov     byte ptr [edx], 34h ; '4'
.text:0041049B                 inc     edx
.text:0041049C                 mov     byte ptr [edx], 30h ; '0'
.text:0041049F                 jmp     short loc_410461
.text:004104A1 ; ---------------------------------------------------------------------------
.text:004104A1
.text:004104A1 loc_4104A1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:004104A1                 movzx   eax, byte ptr [ecx]
.text:004104A4                 jmp     loc_410420
.text:004104A4 ___addmntentstr endp
.text:004104A4
.text:004104A4 ; ---------------------------------------------------------------------------
.text:004104A9                 align 10h
.text:004104B0
.text:004104B0 ; =============== S U B R O U T I N E =======================================
.text:004104B0
.text:004104B0
.text:004104B0 sub_4104B0      proc near               ; CODE XREF: sub_40D610+99↑p
.text:004104B0
.text:004104B0 nBufferLength   = dword ptr -1Ch
.text:004104B0 lpBuffer        = dword ptr -18h
.text:004104B0 dwBytes         = dword ptr -14h
.text:004104B0 var_8           = dword ptr -8
.text:004104B0 var_4           = dword ptr -4
.text:004104B0
.text:004104B0                 sub     esp, 1Ch
.text:004104B3                 mov     [esp+1Ch+var_8], ebx
.text:004104B7                 mov     [esp+1Ch+var_4], esi
.text:004104BB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:004104C3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:004104CA                 call    GetLogicalDriveStringsA
.text:004104CF                 sub     esp, 8
.text:004104D2                 mov     ebx, eax
.text:004104D4                 call    GetProcessHeap
.text:004104D9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:004104DC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:004104E0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:004104E8                 call    HeapAlloc
.text:004104ED                 sub     esp, 0Ch
.text:004104F0                 mov     esi, eax
.text:004104F2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:004104F5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:004104F9                 call    GetLogicalDriveStringsA
.text:004104FE                 sub     esp, 8
.text:00410501                 mov     eax, esi
.text:00410503                 mov     ebx, [esp+1Ch+var_8]
.text:00410507                 mov     esi, [esp+1Ch+var_4]
.text:0041050B                 add     esp, 1Ch
.text:0041050E                 retn
.text:0041050E sub_4104B0      endp
.text:0041050E
.text:0041050F
.text:0041050F ; =============== S U B R O U T I N E =======================================
.text:0041050F
.text:0041050F
.text:0041050F ; int __cdecl sub_41050F(char *, char *)
.text:0041050F sub_41050F      proc near               ; DATA XREF: sub_41050F:loc_41059D↓o
.text:0041050F
.text:0041050F FileName        = dword ptr -1Ch
.text:0041050F Mode            = dword ptr -18h
.text:0041050F dwBytes         = dword ptr -14h
.text:0041050F arg_0           = dword ptr  4
.text:0041050F arg_4           = dword ptr  8
.text:0041050F
.text:0041050F                 ja      short $+2
.text:00410511
.text:00410511 loc_410511:                             ; CODE XREF: sub_41050F↑j
.text:00410511                 jmp     short loc_410520
.text:00410511 ; ---------------------------------------------------------------------------
.text:00410513                 align 10h
.text:00410520
.text:00410520 loc_410520:                             ; CODE XREF: sub_41050F:loc_410511↑j
.text:00410520                 push    edi
.text:00410521                 push    esi
.text:00410522                 push    ebx
.text:00410523                 sub     esp, 10h
.text:00410526                 mov     ebx, [esp+1Ch+arg_0]
.text:0041052A                 mov     edx, [esp+1Ch+arg_4]
.text:0041052E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00410531                 mov     [esp+1Ch+Mode], edx ; Mode
.text:00410535                 call    fopen
.text:0041053A                 test    eax, eax
.text:0041053C                 mov     edi, eax
.text:0041053E                 jz      short loc_41059D
.text:00410540
.text:00410540 loc_410540:                             ; CODE XREF: sub_41050F+A2↓j
.text:00410540                                         ; sub_41050F+AB↓j
.text:00410540                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:00410548                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0041054F                 call    GetLogicalDriveStringsA
.text:00410554                 sub     esp, 8
.text:00410557                 mov     esi, eax
.text:00410559                 call    GetProcessHeap
.text:0041055E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00410561                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00410565                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041056D                 call    HeapAlloc
.text:00410572                 sub     esp, 0Ch
.text:00410575                 mov     ebx, eax
.text:00410577                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041057A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041057E                 call    GetLogicalDriveStringsA
.text:00410583                 mov     off_4150B4, ebx ; "notset"
.text:00410589                 sub     esp, 8
.text:0041058C                 xor     eax, eax
.text:0041058E                 test    ebx, ebx
.text:00410590                 setz    al
.text:00410593                 add     esp, 10h
.text:00410596                 pop     ebx
.text:00410597                 dec     eax
.text:00410598                 and     eax, edi
.text:0041059A                 pop     esi
.text:0041059B                 pop     edi
.text:0041059C                 retn
.text:0041059D ; ---------------------------------------------------------------------------
.text:0041059D
.text:0041059D loc_41059D:                             ; CODE XREF: sub_41050F+2F↑j
.text:0041059D                 mov     [esp+1Ch+Mode], offset sub_41050F ; Mode
.text:004105A5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:004105A8                 call    fopen
.text:004105AD                 test    eax, eax
.text:004105AF                 mov     edi, eax
.text:004105B1                 jnz     short loc_410540
.text:004105B3                 call    sub_4108F0
.text:004105B8                 mov     edi, eax
.text:004105BA                 jmp     short loc_410540
.text:004105BA sub_41050F      endp
.text:004105BA
.text:004105BA ; ---------------------------------------------------------------------------
.text:004105BC                 align 10h
.text:004105C0                 sub     esp, 0Ch
.text:004105C3                 mov     eax, [esp+10h]
.text:004105C7                 test    eax, eax
.text:004105C9                 jz      short loc_4105D3
.text:004105CB                 mov     [esp], eax
.text:004105CE                 call    fclose
.text:004105D3
.text:004105D3 loc_4105D3:                             ; CODE XREF: .text:004105C9↑j
.text:004105D3                 call    GetProcessHeap
.text:004105D8                 mov     [esp], eax
.text:004105DB                 mov     ecx, off_4150B4 ; "notset"
.text:004105E1                 mov     dword ptr [esp+4], 0
.text:004105E9                 mov     [esp+8], ecx
.text:004105ED                 call    HeapFree
.text:004105F2                 mov     edx, off_4150B0 ; "notset"
.text:004105F8                 sub     esp, 0Ch
.text:004105FB                 mov     eax, 1
.text:00410600                 mov     off_4150B4, edx ; "notset"
.text:00410606                 add     esp, 0Ch
.text:00410609                 retn
.text:00410609 ; ---------------------------------------------------------------------------
.text:0041060A                 align 10h
.text:00410610                 push    edi
.text:00410611                 push    esi
.text:00410612                 push    ebx
.text:00410613                 sub     esp, 10h
.text:00410616                 mov     edi, [esp+24h]
.text:0041061A                 mov     [esp], edi
.text:0041061D                 call    strlen
.text:00410622                 mov     edx, [esp+20h]
.text:00410626                 mov     esi, eax
.text:00410628                 mov     ebx, [edx+0Ch]
.text:0041062B                 nop
.text:0041062C                 lea     esi, [esi+0]
.text:00410630
.text:00410630 loc_410630:                             ; CODE XREF: .text:00410661↓j
.text:00410630                 mov     [esp+4], edi
.text:00410634                 mov     [esp], ebx
.text:00410637                 call    strstr
.text:0041063C                 test    eax, eax
.text:0041063E                 jz      short loc_410663
.text:00410640                 cmp     eax, ebx
.text:00410642                 jz      short loc_410665
.text:00410644                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:00410648                 jz      short loc_410670
.text:0041064A
.text:0041064A loc_41064A:                             ; CODE XREF: .text:00410680↓j
.text:0041064A                 mov     [esp], ebx
.text:0041064D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:00410655                 call    strchr
.text:0041065A                 test    eax, eax
.text:0041065C                 mov     ebx, eax
.text:0041065E                 jz      short loc_410663
.text:00410660                 inc     ebx
.text:00410661                 jmp     short loc_410630
.text:00410663 ; ---------------------------------------------------------------------------
.text:00410663
.text:00410663 loc_410663:                             ; CODE XREF: .text:0041063E↑j
.text:00410663                                         ; .text:0041065E↑j
.text:00410663                 xor     eax, eax
.text:00410665
.text:00410665 loc_410665:                             ; CODE XREF: .text:00410642↑j
.text:00410665                                         ; .text:00410676↓j ...
.text:00410665                 add     esp, 10h
.text:00410668                 pop     ebx
.text:00410669                 pop     esi
.text:0041066A                 pop     edi
.text:0041066B                 retn
.text:0041066B ; ---------------------------------------------------------------------------
.text:0041066C                 align 10h
.text:00410670
.text:00410670 loc_410670:                             ; CODE XREF: .text:00410648↑j
.text:00410670                 movzx   edx, byte ptr [esi+eax]
.text:00410674                 test    dl, dl
.text:00410676                 jz      short loc_410665
.text:00410678                 cmp     dl, 3Dh ; '='
.text:0041067B                 jz      short loc_410665
.text:0041067D                 cmp     dl, 2Ch ; ','
.text:00410680                 jnz     short loc_41064A
.text:00410682                 jmp     short loc_410665
.text:00410682 ; ---------------------------------------------------------------------------
.text:00410684                 align 10h
.text:00410690
.text:00410690 ; =============== S U B R O U T I N E =======================================
.text:00410690
.text:00410690
.text:00410690 sub_410690      proc near               ; CODE XREF: sub_40E7C0+1A↑p
.text:00410690                                         ; sub_40E820+11F↑p
.text:00410690
.text:00410690 lpTimeZoneInformation= dword ptr -0DCh
.text:00410690 var_D8          = dword ptr -0D8h
.text:00410690 var_D4          = dword ptr -0D4h
.text:00410690 var_D0          = dword ptr -0D0h
.text:00410690 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00410690 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00410690 arg_0           = dword ptr  4
.text:00410690 arg_4           = dword ptr  8
.text:00410690
.text:00410690                 push    edi
.text:00410691                 push    esi
.text:00410692                 push    ebx
.text:00410693                 sub     esp, 0D0h
.text:00410699                 mov     ebx, [esp+0DCh+arg_4]
.text:004106A0                 mov     edi, [esp+0DCh+arg_0]
.text:004106A7                 test    ebx, ebx
.text:004106A9                 jz      short loc_4106D4
.text:004106AB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:004106AF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:004106B2                 call    GetTimeZoneInformation
.text:004106B7                 sub     esp, 4
.text:004106BA                 cmp     eax, 0FFFFFFFFh
.text:004106BD                 jz      loc_410755
.text:004106C3                 xor     ecx, ecx
.text:004106C5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:004106C9                 cmp     eax, 2
.text:004106CC                 setz    cl
.text:004106CF                 mov     [ebx], esi
.text:004106D1                 mov     [ebx+4], ecx
.text:004106D4
.text:004106D4 loc_4106D4:                             ; CODE XREF: sub_410690+19↑j
.text:004106D4                                         ; sub_410690+E0↓j
.text:004106D4                 test    edi, edi
.text:004106D6                 jz      short loc_410749
.text:004106D8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:004106DC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:004106DF                 call    GetSystemTimeAsFileTime
.text:004106E4                 sub     esp, 4
.text:004106E7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:004106EB                 mov     [esp+0DCh+var_D4], 989680h
.text:004106F3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:004106F7                 mov     [esp+0DCh+var_D0], 0
.text:004106FF                 add     ebx, 2AC18000h
.text:00410705                 adc     esi, 0FE624E21h
.text:0041070B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041070F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410712                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00410716                 mov     [esp+0DCh+var_D8], esi
.text:0041071A                 call    sub_412C30
.text:0041071F                 mov     [edi], eax
.text:00410721                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410724                 mov     [esp+0DCh+var_D4], 989680h
.text:0041072C                 mov     [esp+0DCh+var_D0], 0
.text:00410734                 mov     [esp+0DCh+var_D8], esi
.text:00410738                 call    sub_413070
.text:0041073D                 lea     ebx, [eax+eax*4]
.text:00410740                 lea     edx, [ebx+ebx*4]
.text:00410743                 shl     edx, 2
.text:00410746                 mov     [edi+4], edx
.text:00410749
.text:00410749 loc_410749:                             ; CODE XREF: sub_410690+46↑j
.text:00410749                 add     esp, 0D0h
.text:0041074F                 xor     eax, eax
.text:00410751                 pop     ebx
.text:00410752                 pop     esi
.text:00410753                 pop     edi
.text:00410754                 retn
.text:00410755 ; ---------------------------------------------------------------------------
.text:00410755
.text:00410755 loc_410755:                             ; CODE XREF: sub_410690+2D↑j
.text:00410755                 mov     dword ptr [ebx], 0
.text:0041075B                 mov     dword ptr [ebx+4], 0
.text:00410762                 call    sub_40EBF0
.text:00410767                 mov     esi, eax
.text:00410769                 call    _errno
.text:0041076E                 mov     [eax], esi
.text:00410770                 jmp     loc_4106D4
.text:00410770 sub_410690      endp
.text:00410770
.text:00410770 ; ---------------------------------------------------------------------------
.text:00410775                 align 10h
.text:00410780
.text:00410780 ; =============== S U B R O U T I N E =======================================
.text:00410780
.text:00410780
.text:00410780 sub_410780      proc near               ; CODE XREF: sub_40E820:loc_40E906↑p
.text:00410780
.text:00410780 lpFrequency     = dword ptr -0Ch
.text:00410780 var_4           = dword ptr -4
.text:00410780
.text:00410780                 sub     esp, 0Ch
.text:00410783                 mov     edx, dword ptr ds:Frequency+4
.text:00410789                 mov     [esp+0Ch+var_4], ebx
.text:0041078D                 mov     eax, dword ptr ds:Frequency
.text:00410792                 mov     ebx, edx
.text:00410794                 or      ebx, eax
.text:00410796                 jz      short loc_4107A0
.text:00410798
.text:00410798 loc_410798:                             ; CODE XREF: sub_410780+3E↓j
.text:00410798                                         ; sub_410780+52↓j
.text:00410798                 mov     ebx, [esp+0Ch+var_4]
.text:0041079C                 add     esp, 0Ch
.text:0041079F                 retn
.text:004107A0 ; ---------------------------------------------------------------------------
.text:004107A0
.text:004107A0 loc_4107A0:                             ; CODE XREF: sub_410780+16↑j
.text:004107A0                 mov     [esp+0Ch+lpFrequency], offset Frequency ; lpFrequency
.text:004107A7                 call    QueryPerformanceFrequency
.text:004107AC                 sub     esp, 4
.text:004107AF                 test    eax, eax
.text:004107B1                 jz      short loc_4107C0
.text:004107B3                 mov     eax, dword ptr ds:Frequency
.text:004107B8                 mov     edx, dword ptr ds:Frequency+4
.text:004107BE                 jmp     short loc_410798
.text:004107C0 ; ---------------------------------------------------------------------------
.text:004107C0
.text:004107C0 loc_4107C0:                             ; CODE XREF: sub_410780+31↑j
.text:004107C0                 call    sub_40EBF0
.text:004107C5                 mov     ebx, eax
.text:004107C7                 call    _errno
.text:004107CC                 mov     [eax], ebx
.text:004107CE                 xor     edx, edx
.text:004107D0                 xor     eax, eax
.text:004107D2                 jmp     short loc_410798
.text:004107D2 sub_410780      endp
.text:004107D2
.text:004107D2 ; ---------------------------------------------------------------------------
.text:004107D4                 align 10h
.text:004107E0
.text:004107E0 ; =============== S U B R O U T I N E =======================================
.text:004107E0
.text:004107E0 ; Attributes: noreturn
.text:004107E0
.text:004107E0 sub_4107E0      proc near               ; CODE XREF: .text:0040FE79↑p
.text:004107E0                                         ; sub_4107E0↓j
.text:004107E0                 jmp     short sub_4107E0
.text:004107E0 sub_4107E0      endp
.text:004107E0
.text:004107E0 ; ---------------------------------------------------------------------------
.text:004107E2                 align 10h
.text:004107F0
.text:004107F0 ; =============== S U B R O U T I N E =======================================
.text:004107F0
.text:004107F0
.text:004107F0 sub_4107F0      proc near               ; CODE XREF: .text:0040FBD5↑p
.text:004107F0
.text:004107F0 FileHandle      = dword ptr -1Ch
.text:004107F0 dwFileOffsetLow = dword ptr -18h
.text:004107F0 dwFileOffsetHigh= dword ptr -14h
.text:004107F0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:004107F0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:004107F0 var_8           = dword ptr -8
.text:004107F0 var_4           = dword ptr -4
.text:004107F0 arg_0           = dword ptr  4
.text:004107F0
.text:004107F0                 sub     esp, 1Ch
.text:004107F3                 mov     edx, [esp+1Ch+arg_0]
.text:004107F7                 mov     [esp+1Ch+var_4], esi
.text:004107FB                 mov     [esp+1Ch+var_8], ebx
.text:004107FF                 mov     ebx, [edx+10h]
.text:00410802                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00410805                 call    _get_osfhandle
.text:0041080A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041080D                 mov     esi, eax
.text:0041080F                 call    _filelengthi64
.text:00410814                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:00410818                 cdq
.text:00410819                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041081C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00410820                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:00410828                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00410830                 call    UnlockFile
.text:00410835                 sub     esp, 14h
.text:00410838                 mov     ebx, [esp+1Ch+var_8]
.text:0041083C                 mov     esi, [esp+1Ch+var_4]
.text:00410840                 add     esp, 1Ch
.text:00410843                 retn
.text:00410843 sub_4107F0      endp
.text:00410843
.text:00410843 ; ---------------------------------------------------------------------------
.text:00410844                 align 10h
.text:00410850
.text:00410850 ; =============== S U B R O U T I N E =======================================
.text:00410850
.text:00410850
.text:00410850 ; int __cdecl sub_410850(int, char *Control)
.text:00410850 sub_410850      proc near               ; CODE XREF: .text:0040FA96↑p
.text:00410850                                         ; .text:0040FAE6↑p ...
.text:00410850
.text:00410850 Str             = dword ptr -1Ch
.text:00410850 Val             = dword ptr -18h
.text:00410850 var_8           = dword ptr -8
.text:00410850 var_4           = dword ptr -4
.text:00410850 arg_0           = dword ptr  4
.text:00410850 Control         = dword ptr  8
.text:00410850
.text:00410850                 sub     esp, 1Ch
.text:00410853                 xor     eax, eax
.text:00410855                 mov     edx, [esp+1Ch+Control]
.text:00410859                 mov     [esp+1Ch+var_4], esi
.text:0041085D                 mov     esi, [esp+1Ch+arg_0]
.text:00410861                 mov     [esp+1Ch+var_8], ebx
.text:00410865                 mov     ebx, [esi]
.text:00410867                 test    ebx, ebx
.text:00410869                 jz      short loc_410898
.text:0041086B                 movzx   eax, byte ptr [edx]
.text:0041086E                 test    al, al
.text:00410870                 jz      short loc_410890
.text:00410872                 cmp     byte ptr [edx+1], 0
.text:00410876                 jnz     short loc_4108D0
.text:00410878                 movzx   ecx, byte ptr [ebx]
.text:0041087B                 mov     edx, ebx
.text:0041087D                 cmp     cl, al
.text:0041087F                 jz      short loc_4108C2
.text:00410881                 test    cl, cl
.text:00410883                 jnz     short loc_4108A4
.text:00410885                 lea     esi, [esi+0]
.text:00410889                 lea     edi, [edi+0]
.text:00410890
.text:00410890 loc_410890:                             ; CODE XREF: sub_410850+20↑j
.text:00410890                                         ; sub_410850+74↓j
.text:00410890                 mov     dword ptr [esi], 0
.text:00410896
.text:00410896 loc_410896:                             ; CODE XREF: sub_410850+7C↓j
.text:00410896                 mov     eax, ebx
.text:00410898
.text:00410898 loc_410898:                             ; CODE XREF: sub_410850+19↑j
.text:00410898                 mov     ebx, [esp+1Ch+var_8]
.text:0041089C                 mov     esi, [esp+1Ch+var_4]
.text:004108A0                 add     esp, 1Ch
.text:004108A3                 retn
.text:004108A4 ; ---------------------------------------------------------------------------
.text:004108A4
.text:004108A4 loc_4108A4:                             ; CODE XREF: sub_410850+33↑j
.text:004108A4                 movsx   edx, al
.text:004108A7                 mov     [esp+1Ch+Val], edx ; Val
.text:004108AB                 lea     edx, [ebx+1]
.text:004108AE                 mov     [esp+1Ch+Str], edx ; Str
.text:004108B1                 call    strchr
.text:004108B6                 lea     esi, [esi+0]
.text:004108B9                 lea     edi, [edi+0]
.text:004108C0
.text:004108C0 loc_4108C0:                             ; CODE XREF: sub_410850+8C↓j
.text:004108C0                 mov     edx, eax
.text:004108C2
.text:004108C2 loc_4108C2:                             ; CODE XREF: sub_410850+2F↑j
.text:004108C2                 test    edx, edx
.text:004108C4                 jz      short loc_410890
.text:004108C6                 mov     byte ptr [edx], 0
.text:004108C9                 inc     edx
.text:004108CA                 mov     [esi], edx
.text:004108CC                 jmp     short loc_410896
.text:004108CC ; ---------------------------------------------------------------------------
.text:004108CE                 align 10h
.text:004108D0
.text:004108D0 loc_4108D0:                             ; CODE XREF: sub_410850+26↑j
.text:004108D0                 mov     [esp+1Ch+Val], edx ; Control
.text:004108D4                 mov     [esp+1Ch+Str], ebx ; Str
.text:004108D7                 call    strpbrk
.text:004108DC                 jmp     short loc_4108C0
.text:004108DC sub_410850      endp
.text:004108DC
.text:004108DC ; ---------------------------------------------------------------------------
.text:004108DE                 align 10h
.text:004108E0 ; const char aTmpf[]
.text:004108E0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_4108F0+20↓o
.text:004108E5 ; const char aWBd[]
.text:004108E5 aWBd            db 'w+bD',0             ; DATA XREF: sub_4108F0+5E↓o
.text:004108EA                 align 10h
.text:004108F0
.text:004108F0 ; =============== S U B R O U T I N E =======================================
.text:004108F0
.text:004108F0
.text:004108F0 sub_4108F0      proc near               ; CODE XREF: sub_41050F+A4↑p
.text:004108F0
.text:004108F0 FileHandle      = dword ptr -13Ch
.text:004108F0 Format          = dword ptr -138h
.text:004108F0 var_134         = dword ptr -134h
.text:004108F0 var_130         = dword ptr -130h
.text:004108F0 var_12C         = dword ptr -12Ch
.text:004108F0 Buffer          = byte ptr -11Ch
.text:004108F0 var_8           = dword ptr -8
.text:004108F0 var_4           = dword ptr -4
.text:004108F0
.text:004108F0                 sub     esp, 13Ch
.text:004108F6                 mov     [esp+13Ch+var_8], ebx
.text:004108FD                 lea     ebx, [esp+13Ch+Buffer]
.text:00410901                 mov     [esp+13Ch+var_4], esi
.text:00410908                 mov     [esp+13Ch+var_12C], 0 ; int
.text:00410910                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:00410918                 mov     [esp+13Ch+var_134], 0 ; char *
.text:00410920                 mov     [esp+13Ch+Format], 104h ; int
.text:00410928                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041092B                 call    sub_4109C0
.text:00410930                 xor     edx, edx
.text:00410932                 test    eax, eax
.text:00410934                 jnz     short loc_410966
.text:00410936                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00410939                 mov     [esp+13Ch+Format], 0 ; int
.text:00410941                 call    sub_410D40
.text:00410946                 xor     edx, edx
.text:00410948                 mov     ebx, eax
.text:0041094A                 test    eax, eax
.text:0041094C                 js      short loc_410966
.text:0041094E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:00410956                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:00410959                 call    _fdopen
.text:0041095E                 test    eax, eax
.text:00410960                 mov     esi, eax
.text:00410962                 jz      short loc_41097D
.text:00410964
.text:00410964 loc_410964:                             ; CODE XREF: sub_4108F0+95↓j
.text:00410964                 mov     edx, esi
.text:00410966
.text:00410966 loc_410966:                             ; CODE XREF: sub_4108F0+44↑j
.text:00410966                                         ; sub_4108F0+5C↑j
.text:00410966                 mov     ebx, [esp+13Ch+var_8]
.text:0041096D                 mov     eax, edx
.text:0041096F                 mov     esi, [esp+13Ch+var_4]
.text:00410976                 add     esp, 13Ch
.text:0041097C                 retn
.text:0041097D ; ---------------------------------------------------------------------------
.text:0041097D
.text:0041097D loc_41097D:                             ; CODE XREF: sub_4108F0+72↑j
.text:0041097D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:00410980                 call    _close_0
.text:00410985                 jmp     short loc_410964
.text:00410985 sub_4108F0      endp
.text:00410985
.text:00410985 ; ---------------------------------------------------------------------------
.text:00410987                 align 10h
.text:00410990 aFile           db 'file',0             ; DATA XREF: sub_4109C0:loc_4109EC↓o
.text:00410995 ; const char aSSxxxxxx[]
.text:00410995 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_4109C0+9B↓o
.text:004109A5 ; const char aTemp[]
.text:004109A5 aTemp           db 'TEMP',0             ; DATA XREF: sub_4109C0:loc_410AA2↓o
.text:004109A5                                         ; sub_4109C0:loc_410AE2↓o ...
.text:004109AA ; const char aTmp[]
.text:004109AA aTmp            db '/tmp',0             ; DATA XREF: sub_4109C0+12F↓o
.text:004109AA                                         ; sub_4109C0+141↓o ...
.text:004109AF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_4109C0:loc_410B60↓o
.text:004109B6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_4109C0:loc_410BF0↓o
.text:004109BA                 align 10h
.text:004109C0
.text:004109C0 ; =============== S U B R O U T I N E =======================================
.text:004109C0
.text:004109C0
.text:004109C0 ; int __cdecl sub_4109C0(char *Buffer, int, char *, char *, int)
.text:004109C0 sub_4109C0      proc near               ; CODE XREF: sub_4108F0+3B↑p
.text:004109C0
.text:004109C0 Str             = dword ptr -1BCh
.text:004109C0 Format          = dword ptr -1B8h
.text:004109C0 var_1B4         = dword ptr -1B4h
.text:004109C0 var_1B0         = dword ptr -1B0h
.text:004109C0 var_1AC         = dword ptr -1ACh
.text:004109C0 var_1A8         = dword ptr -1A8h
.text:004109C0 var_19C         = dword ptr -19Ch
.text:004109C0 var_13C         = dword ptr -13Ch
.text:004109C0 var_DC          = dword ptr -0DCh
.text:004109C0 var_7C          = dword ptr -7Ch
.text:004109C0 Buffer          = dword ptr  4
.text:004109C0 arg_4           = dword ptr  8
.text:004109C0 arg_8           = dword ptr  0Ch
.text:004109C0 arg_C           = dword ptr  10h
.text:004109C0 arg_10          = dword ptr  14h
.text:004109C0
.text:004109C0                 push    ebp
.text:004109C1                 push    edi
.text:004109C2                 push    esi
.text:004109C3                 push    ebx
.text:004109C4                 sub     esp, 1ACh
.text:004109CA                 mov     eax, [esp+1BCh+arg_C]
.text:004109D1                 mov     esi, [esp+1BCh+arg_8]
.text:004109D8                 test    eax, eax
.text:004109DA                 jz      short loc_4109EC
.text:004109DC                 mov     edx, [esp+1BCh+arg_C]
.text:004109E3                 cmp     byte ptr [edx], 0
.text:004109E6                 jnz     loc_410C20
.text:004109EC
.text:004109EC loc_4109EC:                             ; CODE XREF: sub_4109C0+1A↑j
.text:004109EC                 mov     eax, offset aFile ; "file"
.text:004109F1                 mov     ebp, 4
.text:004109F6                 mov     [esp+1BCh+arg_C], eax
.text:004109FD
.text:004109FD loc_4109FD:                             ; CODE XREF: sub_4109C0+274↓j
.text:004109FD                                         ; sub_4109C0+27F↓j
.text:004109FD                 mov     ebx, [esp+1BCh+arg_10]
.text:00410A04                 test    ebx, ebx
.text:00410A06                 jnz     loc_410B60
.text:00410A0C
.text:00410A0C loc_410A0C:                             ; CODE XREF: sub_4109C0+21C↓j
.text:00410A0C                                         ; sub_4109C0+224↓j ...
.text:00410A0C                 test    esi, esi
.text:00410A0E                 jz      loc_410AA2
.text:00410A14
.text:00410A14 loc_410A14:                             ; CODE XREF: sub_4109C0+176↓j
.text:00410A14                                         ; sub_4109C0+19A↓j
.text:00410A14                 mov     [esp+1BCh+Str], esi ; Str
.text:00410A17                 call    strlen
.text:00410A1C                 test    eax, eax
.text:00410A1E                 mov     edx, eax
.text:00410A20                 jz      short loc_410A30
.text:00410A22                 movzx   eax, byte ptr [eax+esi-1]
.text:00410A27                 cmp     al, 2Fh ; '/'
.text:00410A29                 jz      short loc_410A90
.text:00410A2B                 cmp     al, 5Ch ; '\'
.text:00410A2D                 jz      short loc_410A90
.text:00410A2F                 nop
.text:00410A30
.text:00410A30 loc_410A30:                             ; CODE XREF: sub_4109C0+60↑j
.text:00410A30                                         ; sub_4109C0+D1↓j ...
.text:00410A30                 lea     edi, [ebp+edx+8]
.text:00410A34                 cmp     [esp+1BCh+arg_4], edi
.text:00410A3B                 jb      short loc_410A78
.text:00410A3D                 mov     [esp+1BCh+var_1AC], ebp
.text:00410A41                 mov     ecx, [esp+1BCh+arg_C]
.text:00410A48                 mov     ebp, [esp+1BCh+Buffer]
.text:00410A4F                 mov     [esp+1BCh+var_1B0], esi
.text:00410A53                 mov     [esp+1BCh+var_1A8], ecx
.text:00410A57                 mov     [esp+1BCh+var_1B4], edx
.text:00410A5B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00410A63                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00410A66                 call    sprintf
.text:00410A6B                 xor     eax, eax
.text:00410A6D
.text:00410A6D loc_410A6D:                             ; CODE XREF: sub_4109C0+C8↓j
.text:00410A6D                 add     esp, 1ACh
.text:00410A73                 pop     ebx
.text:00410A74                 pop     esi
.text:00410A75                 pop     edi
.text:00410A76                 pop     ebp
.text:00410A77                 retn
.text:00410A78 ; ---------------------------------------------------------------------------
.text:00410A78
.text:00410A78 loc_410A78:                             ; CODE XREF: sub_4109C0+7B↑j
.text:00410A78                 call    _errno
.text:00410A7D                 mov     dword ptr [eax], 16h
.text:00410A83
.text:00410A83 loc_410A83:                             ; CODE XREF: sub_4109C0+187↓j
.text:00410A83                 mov     eax, 0FFFFFFFFh
.text:00410A88                 jmp     short loc_410A6D
.text:00410A88 ; ---------------------------------------------------------------------------
.text:00410A8A                 align 10h
.text:00410A90
.text:00410A90 loc_410A90:                             ; CODE XREF: sub_4109C0+69↑j
.text:00410A90                                         ; sub_4109C0+6D↑j ...
.text:00410A90                 dec     edx
.text:00410A91                 jz      short loc_410A30
.text:00410A93                 movzx   eax, byte ptr [edx+esi-1]
.text:00410A98                 cmp     al, 2Fh ; '/'
.text:00410A9A                 jz      short loc_410A90
.text:00410A9C                 cmp     al, 5Ch ; '\'
.text:00410A9E                 jz      short loc_410A90
.text:00410AA0                 jmp     short loc_410A30
.text:00410AA2 ; ---------------------------------------------------------------------------
.text:00410AA2
.text:00410AA2 loc_410AA2:                             ; CODE XREF: sub_4109C0+4E↑j
.text:00410AA2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410AA9                 lea     esi, [esp+1BCh+var_13C]
.text:00410AB0                 call    getenv
.text:00410AB5                 mov     [esp+1BCh+Format], eax ; char *
.text:00410AB9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:00410ABD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410AC4                 call    sub_411260
.text:00410AC9                 test    eax, eax
.text:00410ACB                 jnz     short loc_410AE2
.text:00410ACD                 mov     edi, [esp+1BCh+var_13C]
.text:00410AD4                 and     edi, 0F000h
.text:00410ADA                 cmp     edi, 4000h
.text:00410AE0                 jz      short loc_410B4C
.text:00410AE2
.text:00410AE2 loc_410AE2:                             ; CODE XREF: sub_4109C0+10B↑j
.text:00410AE2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410AE9                 call    getenv
.text:00410AEE                 cld
.text:00410AEF                 mov     edx, offset aTmp ; "/tmp"
.text:00410AF4                 mov     esi, eax
.text:00410AF6                 mov     ecx, 5
.text:00410AFB                 mov     edi, edx
.text:00410AFD                 repe cmpsb
.text:00410AFF                 jz      short loc_410B3C
.text:00410B01                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:00410B09                 lea     ecx, [esp+1BCh+var_19C]
.text:00410B0D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00410B11                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410B18                 call    sub_411260
.text:00410B1D                 test    eax, eax
.text:00410B1F                 jnz     short loc_410B3C
.text:00410B21                 mov     ebx, [esp+1BCh+var_19C]
.text:00410B25                 mov     esi, offset aTmp ; "/tmp"
.text:00410B2A                 and     ebx, 0F000h
.text:00410B30                 cmp     ebx, 4000h
.text:00410B36                 jz      loc_410A14
.text:00410B3C
.text:00410B3C loc_410B3C:                             ; CODE XREF: sub_4109C0+13F↑j
.text:00410B3C                                         ; sub_4109C0+15F↑j
.text:00410B3C                 call    _errno
.text:00410B41                 mov     dword ptr [eax], 2
.text:00410B47                 jmp     loc_410A83
.text:00410B4C ; ---------------------------------------------------------------------------
.text:00410B4C
.text:00410B4C loc_410B4C:                             ; CODE XREF: sub_4109C0+120↑j
.text:00410B4C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410B53                 call    getenv
.text:00410B58                 mov     esi, eax
.text:00410B5A                 jmp     loc_410A14
.text:00410B5A ; ---------------------------------------------------------------------------
.text:00410B5F                 align 10h
.text:00410B60
.text:00410B60 loc_410B60:                             ; CODE XREF: sub_4109C0+46↑j
.text:00410B60                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00410B67                 call    sub_4111F0
.text:00410B6C                 test    eax, eax
.text:00410B6E                 mov     ebx, eax
.text:00410B70                 jz      short loc_410BF0
.text:00410B72
.text:00410B72 loc_410B72:                             ; CODE XREF: sub_4109C0+240↓j
.text:00410B72                                         ; sub_4109C0+256↓j
.text:00410B72                 mov     [esp+1BCh+Format], ebx ; char *
.text:00410B76                 lea     edi, [esp+1BCh+var_7C]
.text:00410B7D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00410B81                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410B88                 call    sub_411260
.text:00410B8D                 test    eax, eax
.text:00410B8F                 jnz     short loc_410BA6
.text:00410B91                 mov     edx, [esp+1BCh+var_7C]
.text:00410B98                 and     edx, 0F000h
.text:00410B9E                 cmp     edx, 4000h
.text:00410BA4                 jz      short loc_410BE9
.text:00410BA6
.text:00410BA6 loc_410BA6:                             ; CODE XREF: sub_4109C0+1CF↑j
.text:00410BA6                                         ; sub_4109C0+25C↓j
.text:00410BA6                 test    esi, esi
.text:00410BA8                 jz      short loc_410BE2
.text:00410BAA                 mov     [esp+1BCh+Format], esi ; char *
.text:00410BAE                 lea     ecx, [esp+1BCh+var_DC]
.text:00410BB5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00410BB9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410BC0                 call    sub_411260
.text:00410BC5                 test    eax, eax
.text:00410BC7                 jnz     short loc_410BE2
.text:00410BC9                 mov     ebx, [esp+1BCh+var_DC]
.text:00410BD0                 and     ebx, 0F000h
.text:00410BD6                 cmp     ebx, 4000h
.text:00410BDC                 jz      loc_410A0C
.text:00410BE2
.text:00410BE2 loc_410BE2:                             ; CODE XREF: sub_4109C0+1E8↑j
.text:00410BE2                                         ; sub_4109C0+207↑j
.text:00410BE2                 xor     esi, esi
.text:00410BE4                 jmp     loc_410A0C
.text:00410BE9 ; ---------------------------------------------------------------------------
.text:00410BE9
.text:00410BE9 loc_410BE9:                             ; CODE XREF: sub_4109C0+1E4↑j
.text:00410BE9                 mov     esi, ebx
.text:00410BEB                 jmp     loc_410A0C
.text:00410BF0 ; ---------------------------------------------------------------------------
.text:00410BF0
.text:00410BF0 loc_410BF0:                             ; CODE XREF: sub_4109C0+1B0↑j
.text:00410BF0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00410BF7                 call    sub_4111F0
.text:00410BFC                 test    eax, eax
.text:00410BFE                 mov     ebx, eax
.text:00410C00                 jnz     loc_410B72
.text:00410C06                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410C0D                 call    sub_4111F0
.text:00410C12                 test    eax, eax
.text:00410C14                 mov     ebx, eax
.text:00410C16                 jnz     loc_410B72
.text:00410C1C                 jmp     short loc_410BA6
.text:00410C1C ; ---------------------------------------------------------------------------
.text:00410C1E                 align 10h
.text:00410C20
.text:00410C20 loc_410C20:                             ; CODE XREF: sub_4109C0+26↑j
.text:00410C20                 mov     ecx, [esp+1BCh+arg_C]
.text:00410C27                 mov     [esp+1BCh+Str], ecx ; Str
.text:00410C2A                 call    strlen
.text:00410C2F                 cmp     eax, 5
.text:00410C32                 mov     ebp, eax
.text:00410C34                 jbe     loc_4109FD
.text:00410C3A                 mov     ebp, 5
.text:00410C3F                 jmp     loc_4109FD
.text:00410C3F sub_4109C0      endp
.text:00410C3F
.text:00410C3F ; ---------------------------------------------------------------------------
.text:00410C44                 align 10h
.text:00410C50 byte_410C50     db 61h                  ; DATA XREF: sub_410D40+DC↓r
.text:00410C50                                         ; sub_410D40+122↓r ...
.text:00410C51 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:00410C8F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_410D40+39↓o
.text:00410C96                 db 1Ah dup(90h)
.text:00410CB0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00410CB0                                         ; DATA XREF: sub_410D40:loc_410FB8↓o
.text:00410CCF                 align 10h
.text:00410CD0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00410CD0                                         ; DATA XREF: sub_410D40+405↓o
.text:00410CFB                 db 15h dup(90h)
.text:00410D10 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00410D10                                         ; DATA XREF: sub_410D40+40D↓o
.text:00410D33                 align 10h
.text:00410D40
.text:00410D40 ; =============== S U B R O U T I N E =======================================
.text:00410D40
.text:00410D40
.text:00410D40 ; int __cdecl sub_410D40(char *FileName, int)
.text:00410D40 sub_410D40      proc near               ; CODE XREF: sub_4108F0+51↑p
.text:00410D40
.text:00410D40 Str             = dword ptr -9Ch
.text:00410D40 OpenFlag        = dword ptr -98h
.text:00410D40 var_94          = dword ptr -94h
.text:00410D40 var_90          = dword ptr -90h
.text:00410D40 var_8C          = dword ptr -8Ch
.text:00410D40 var_88          = dword ptr -88h
.text:00410D40 var_84          = dword ptr -84h
.text:00410D40 var_80          = dword ptr -80h
.text:00410D40 var_7C          = dword ptr -7Ch
.text:00410D40 FileName        = dword ptr  4
.text:00410D40 arg_4           = dword ptr  8
.text:00410D40
.text:00410D40                 push    ebp
.text:00410D41                 push    edi
.text:00410D42                 push    esi
.text:00410D43                 push    ebx
.text:00410D44                 sub     esp, 8Ch
.text:00410D4A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00410D52                 call    _errno
.text:00410D57                 mov     edx, [eax]
.text:00410D59                 mov     [esp+9Ch+var_8C], edx
.text:00410D5D                 mov     edx, [esp+9Ch+FileName]
.text:00410D64                 mov     [esp+9Ch+Str], edx ; Str
.text:00410D67                 call    strlen
.text:00410D6C                 cmp     eax, 5
.text:00410D6F                 jle     short loc_410D8D
.text:00410D71                 cld
.text:00410D72                 mov     ecx, [esp+9Ch+FileName]
.text:00410D79                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:00410D7E                 lea     esi, [eax+ecx-6]
.text:00410D82                 mov     ecx, 7
.text:00410D87                 mov     ebp, esi
.text:00410D89                 repe cmpsb
.text:00410D8B                 jz      short loc_410DA8
.text:00410D8D
.text:00410D8D loc_410D8D:                             ; CODE XREF: sub_410D40+2F↑j
.text:00410D8D                 call    _errno
.text:00410D92                 mov     dword ptr [eax], 16h
.text:00410D98
.text:00410D98 loc_410D98:                             ; CODE XREF: sub_410D40+295↓j
.text:00410D98                                         ; sub_410D40+2D8↓j ...
.text:00410D98                 mov     eax, 0FFFFFFFFh
.text:00410D9D
.text:00410D9D loc_410D9D:                             ; CODE XREF: sub_410D40+2EF↓j
.text:00410D9D                                         ; sub_410D40+332↓j
.text:00410D9D                 add     esp, 8Ch
.text:00410DA3                 pop     ebx
.text:00410DA4                 pop     esi
.text:00410DA5                 pop     edi
.text:00410DA6                 pop     ebp
.text:00410DA7                 retn
.text:00410DA8 ; ---------------------------------------------------------------------------
.text:00410DA8
.text:00410DA8 loc_410DA8:                             ; CODE XREF: sub_410D40+4B↑j
.text:00410DA8                 mov     ecx, ds:dword_416534
.text:00410DAE                 mov     edi, ds:dword_416530
.text:00410DB4                 mov     eax, ecx
.text:00410DB6                 or      eax, edi
.text:00410DB8                 jz      loc_4110F3
.text:00410DBE
.text:00410DBE loc_410DBE:                             ; CODE XREF: sub_410D40+3F8↓j
.text:00410DBE                 rdtsc
.text:00410DC0                 mov     edi, edx
.text:00410DC2                 mov     esi, eax
.text:00410DC4                 call    _getpid
.text:00410DC9                 mov     ebx, eax
.text:00410DCB                 mov     edx, esi
.text:00410DCD                 sar     ebx, 1Fh
.text:00410DD0                 xor     edx, eax
.text:00410DD2                 mov     ecx, edi
.text:00410DD4                 xor     ecx, ebx
.text:00410DD6                 mov     ebx, edx
.text:00410DD8                 mov     esi, ecx
.text:00410DDA                 add     ebx, ds:dword_416530
.text:00410DE0                 adc     esi, ds:dword_416534
.text:00410DE6                 xor     edi, edi
.text:00410DE8                 mov     ds:dword_416530, ebx
.text:00410DEE                 mov     ds:dword_416534, esi
.text:00410DF4                 lea     esi, [esi+0]
.text:00410DFA                 lea     edi, [edi+0]
.text:00410E00
.text:00410E00 loc_410E00:                             ; CODE XREF: sub_410D40+2C7↓j
.text:00410E00                 mov     [esp+9Ch+Str], ebx
.text:00410E03                 mov     [esp+9Ch+OpenFlag], esi
.text:00410E07                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410E0F                 mov     [esp+9Ch+var_90], 0
.text:00410E17                 call    sub_413070
.text:00410E1C                 movzx   ecx, ds:byte_410C50[eax]
.text:00410E23                 mov     [ebp+0], cl
.text:00410E26                 mov     [esp+9Ch+Str], ebx
.text:00410E29                 mov     [esp+9Ch+OpenFlag], esi
.text:00410E2D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410E35                 mov     [esp+9Ch+var_90], 0
.text:00410E3D                 call    sub_412C30
.text:00410E42                 mov     [esp+9Ch+Str], eax
.text:00410E45                 mov     ebx, eax
.text:00410E47                 mov     esi, edx
.text:00410E49                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410E51                 mov     [esp+9Ch+var_90], 0
.text:00410E59                 mov     [esp+9Ch+OpenFlag], edx
.text:00410E5D                 call    sub_413070
.text:00410E62                 movzx   edx, ds:byte_410C50[eax]
.text:00410E69                 mov     [ebp+1], dl
.text:00410E6C                 mov     [esp+9Ch+Str], ebx
.text:00410E6F                 mov     [esp+9Ch+OpenFlag], esi
.text:00410E73                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410E7B                 mov     [esp+9Ch+var_90], 0
.text:00410E83                 call    sub_412C30
.text:00410E88                 mov     [esp+9Ch+Str], eax
.text:00410E8B                 mov     ebx, eax
.text:00410E8D                 mov     esi, edx
.text:00410E8F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410E97                 mov     [esp+9Ch+var_90], 0
.text:00410E9F                 mov     [esp+9Ch+OpenFlag], edx
.text:00410EA3                 call    sub_413070
.text:00410EA8                 movzx   ecx, ds:byte_410C50[eax]
.text:00410EAF                 mov     [ebp+2], cl
.text:00410EB2                 mov     [esp+9Ch+Str], ebx
.text:00410EB5                 mov     [esp+9Ch+OpenFlag], esi
.text:00410EB9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410EC1                 mov     [esp+9Ch+var_90], 0
.text:00410EC9                 call    sub_412C30
.text:00410ECE                 mov     [esp+9Ch+Str], eax
.text:00410ED1                 mov     ebx, eax
.text:00410ED3                 mov     esi, edx
.text:00410ED5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410EDD                 mov     [esp+9Ch+var_90], 0
.text:00410EE5                 mov     [esp+9Ch+OpenFlag], edx
.text:00410EE9                 call    sub_413070
.text:00410EEE                 movzx   edx, ds:byte_410C50[eax]
.text:00410EF5                 mov     [ebp+3], dl
.text:00410EF8                 mov     [esp+9Ch+Str], ebx
.text:00410EFB                 mov     [esp+9Ch+OpenFlag], esi
.text:00410EFF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410F07                 mov     [esp+9Ch+var_90], 0
.text:00410F0F                 call    sub_412C30
.text:00410F14                 mov     [esp+9Ch+Str], eax
.text:00410F17                 mov     ebx, eax
.text:00410F19                 mov     esi, edx
.text:00410F1B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410F23                 mov     [esp+9Ch+var_90], 0
.text:00410F2B                 mov     [esp+9Ch+OpenFlag], edx
.text:00410F2F                 call    sub_413070
.text:00410F34                 movzx   ecx, ds:byte_410C50[eax]
.text:00410F3B                 mov     [ebp+4], cl
.text:00410F3E                 mov     [esp+9Ch+Str], ebx
.text:00410F41                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410F49                 mov     [esp+9Ch+var_90], 0
.text:00410F51                 mov     [esp+9Ch+OpenFlag], esi
.text:00410F55                 call    sub_412C30
.text:00410F5A                 mov     [esp+9Ch+Str], eax
.text:00410F5D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410F65                 mov     [esp+9Ch+var_90], 0
.text:00410F6D                 mov     [esp+9Ch+OpenFlag], edx
.text:00410F71                 call    sub_413070
.text:00410F76                 movzx   ebx, ds:byte_410C50[eax]
.text:00410F7D                 mov     [ebp+5], bl
.text:00410F80                 cmp     [esp+9Ch+arg_4], 1
.text:00410F88                 jz      loc_4110D7
.text:00410F8E                 cmp     [esp+9Ch+arg_4], 1
.text:00410F96                 jle     loc_4110A0
.text:00410F9C                 cmp     [esp+9Ch+arg_4], 2
.text:00410FA4                 jz      loc_411077
.text:00410FAA                 cmp     [esp+9Ch+arg_4], 3
.text:00410FB2                 jz      loc_411034
.text:00410FB8
.text:00410FB8 loc_410FB8:                             ; CODE XREF: sub_410D40+369↓j
.text:00410FB8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:00410FBD                 test    ebx, ebx
.text:00410FBF                 jnz     loc_41113D
.text:00410FC5
.text:00410FC5 loc_410FC5:                             ; CODE XREF: sub_410D40+354↓j
.text:00410FC5                 mov     eax, [esp+9Ch+var_88]
.text:00410FC9                 test    eax, eax
.text:00410FCB                 jns     short loc_411020
.text:00410FCD                 call    _errno
.text:00410FD2                 cmp     dword ptr [eax], 11h
.text:00410FD5                 jnz     loc_410D98
.text:00410FDB
.text:00410FDB loc_410FDB:                             ; CODE XREF: sub_410D40+315↓j
.text:00410FDB                 mov     edx, ds:dword_416530
.text:00410FE1                 mov     ecx, ds:dword_416534
.text:00410FE7                 add     edx, 1E61h
.text:00410FED                 adc     ecx, 0
.text:00410FF0                 mov     ebx, edx
.text:00410FF2                 inc     edi
.text:00410FF3                 mov     ds:dword_416530, edx
.text:00410FF9                 cmp     edi, 3A2F8h
.text:00410FFF                 mov     esi, ecx
.text:00411001                 mov     ds:dword_416534, ecx
.text:00411007                 jb      loc_410E00
.text:0041100D                 call    _errno
.text:00411012                 mov     dword ptr [eax], 11h
.text:00411018                 jmp     loc_410D98
.text:00411018 ; ---------------------------------------------------------------------------
.text:0041101D                 align 10h
.text:00411020
.text:00411020 loc_411020:                             ; CODE XREF: sub_410D40+28B↑j
.text:00411020                 call    _errno
.text:00411025                 mov     esi, [esp+9Ch+var_8C]
.text:00411029                 mov     [eax], esi
.text:0041102B                 mov     eax, [esp+9Ch+var_88]
.text:0041102F                 jmp     loc_410D9D
.text:00411034 ; ---------------------------------------------------------------------------
.text:00411034
.text:00411034 loc_411034:                             ; CODE XREF: sub_410D40+272↑j
.text:00411034                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041103B                 mov     ecx, [esp+9Ch+FileName]
.text:00411042                 lea     esi, [esp+9Ch+var_7C]
.text:00411046                 mov     [esp+9Ch+var_94], esi ; int
.text:0041104A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041104E                 call    sub_411210
.text:00411053                 test    eax, eax
.text:00411055                 jns     short loc_410FDB
.text:00411057                 call    _errno
.text:0041105C                 cmp     dword ptr [eax], 2
.text:0041105F                 jnz     loc_410D98
.text:00411065                 call    _errno
.text:0041106A                 mov     ebx, [esp+9Ch+var_8C]
.text:0041106E                 mov     [eax], ebx
.text:00411070                 xor     eax, eax
.text:00411072                 jmp     loc_410D9D
.text:00411077 ; ---------------------------------------------------------------------------
.text:00411077
.text:00411077 loc_411077:                             ; CODE XREF: sub_410D40+264↑j
.text:00411077                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0041107F                 mov     edx, [esp+9Ch+FileName]
.text:00411086                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00411089                 call    sub_411170
.text:0041108E                 mov     esi, esi
.text:00411090
.text:00411090 loc_411090:                             ; CODE XREF: sub_410D40+395↓j
.text:00411090                 mov     [esp+9Ch+var_88], eax
.text:00411094                 jmp     loc_410FC5
.text:00411094 ; ---------------------------------------------------------------------------
.text:00411099                 align 10h
.text:004110A0
.text:004110A0 loc_4110A0:                             ; CODE XREF: sub_410D40+256↑j
.text:004110A0                 mov     eax, [esp+9Ch+arg_4]
.text:004110A7                 test    eax, eax
.text:004110A9                 jnz     loc_410FB8
.text:004110AF                 mov     [esp+9Ch+var_94], 180h
.text:004110B7                 mov     esi, [esp+9Ch+FileName]
.text:004110BE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:004110C6                 mov     [esp+9Ch+Str], esi ; FileName
.text:004110C9                 lea     esi, [esi+0]
.text:004110D0
.text:004110D0 loc_4110D0:                             ; CODE XREF: sub_410D40+3B1↓j
.text:004110D0                 call    _open_0
.text:004110D5                 jmp     short loc_411090
.text:004110D7 ; ---------------------------------------------------------------------------
.text:004110D7
.text:004110D7 loc_4110D7:                             ; CODE XREF: sub_410D40+248↑j
.text:004110D7                 mov     [esp+9Ch+var_94], 180h
.text:004110DF                 mov     ebx, [esp+9Ch+FileName]
.text:004110E6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:004110EE                 mov     [esp+9Ch+Str], ebx
.text:004110F1                 jmp     short loc_4110D0
.text:004110F3 ; ---------------------------------------------------------------------------
.text:004110F3
.text:004110F3 loc_4110F3:                             ; CODE XREF: sub_410D40+78↑j
.text:004110F3                 mov     [esp+9Ch+OpenFlag], 0
.text:004110FB                 lea     ebx, [esp+9Ch+var_84]
.text:004110FF                 mov     [esp+9Ch+Str], ebx
.text:00411102                 call    sub_40E7C0
.text:00411107                 mov     edi, [esp+9Ch+var_80]
.text:0041110B                 mov     edx, [esp+9Ch+var_84]
.text:0041110F                 mov     ecx, edi
.text:00411111                 mov     ebx, edi
.text:00411113                 shl     ecx, 10h
.text:00411116                 sar     ebx, 1Fh
.text:00411119                 shld    ebx, edi, 10h
.text:0041111D                 mov     esi, edx
.text:0041111F                 mov     edi, edx
.text:00411121                 mov     edx, ecx
.text:00411123                 sar     edi, 1Fh
.text:00411126                 xor     edx, esi
.text:00411128                 mov     ds:dword_416530, edx
.text:0041112E                 mov     esi, ebx
.text:00411130                 xor     esi, edi
.text:00411132                 mov     ds:dword_416534, esi
.text:00411138                 jmp     loc_410DBE
.text:0041113D ; ---------------------------------------------------------------------------
.text:0041113D
.text:0041113D loc_41113D:                             ; CODE XREF: sub_410D40+27F↑j
.text:0041113D                 mov     [esp+9Ch+var_94], 151h
.text:00411145                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041114D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00411154                 call    _assert
.text:00411154 sub_410D40      endp
.text:00411154
.text:00411154 ; ---------------------------------------------------------------------------
.text:00411159                 db 17h dup(90h)
.text:00411170
.text:00411170 ; =============== S U B R O U T I N E =======================================
.text:00411170
.text:00411170
.text:00411170 ; int __cdecl sub_411170(LPCSTR, int AccessMode)
.text:00411170 sub_411170      proc near               ; CODE XREF: sub_410D40+349↑p
.text:00411170
.text:00411170 lpPathName      = dword ptr -1Ch
.text:00411170 lpSecurityAttributes= dword ptr -18h
.text:00411170 var_8           = dword ptr -8
.text:00411170 var_4           = dword ptr -4
.text:00411170 arg_0           = dword ptr  4
.text:00411170 AccessMode      = dword ptr  8
.text:00411170
.text:00411170                 sub     esp, 1Ch
.text:00411173                 mov     [esp+1Ch+var_8], ebx
.text:00411177                 mov     ebx, [esp+1Ch+arg_0]
.text:0041117B                 mov     [esp+1Ch+var_4], esi
.text:0041117F                 mov     esi, [esp+1Ch+AccessMode]
.text:00411183                 test    ebx, ebx
.text:00411185                 jz      short loc_4111D5
.text:00411187                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041118F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00411192                 call    CreateDirectoryA
.text:00411197                 sub     esp, 8
.text:0041119A                 test    eax, eax
.text:0041119C                 jz      short loc_4111B6
.text:0041119E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:004111A2                 mov     esi, [esp+1Ch+var_4]
.text:004111A6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:004111AA                 mov     ebx, [esp+1Ch+var_8]
.text:004111AE                 add     esp, 1Ch
.text:004111B1                 jmp     _chmod
.text:004111B6 ; ---------------------------------------------------------------------------
.text:004111B6
.text:004111B6 loc_4111B6:                             ; CODE XREF: sub_411170+2C↑j
.text:004111B6                 call    sub_40EBF0
.text:004111BB                 mov     esi, eax
.text:004111BD                 call    _errno
.text:004111C2                 mov     [eax], esi
.text:004111C4
.text:004111C4 loc_4111C4:                             ; CODE XREF: sub_411170+70↓j
.text:004111C4                 mov     ebx, [esp+1Ch+var_8]
.text:004111C8                 mov     eax, 0FFFFFFFFh
.text:004111CD                 mov     esi, [esp+1Ch+var_4]
.text:004111D1                 add     esp, 1Ch
.text:004111D4                 retn
.text:004111D5 ; ---------------------------------------------------------------------------
.text:004111D5
.text:004111D5 loc_4111D5:                             ; CODE XREF: sub_411170+15↑j
.text:004111D5                 call    _errno
.text:004111DA                 mov     dword ptr [eax], 16h
.text:004111E0                 jmp     short loc_4111C4
.text:004111E0 sub_411170      endp
.text:004111E0
.text:004111E0 ; ---------------------------------------------------------------------------
.text:004111E2                 align 10h
.text:004111F0
.text:004111F0 ; =============== S U B R O U T I N E =======================================
.text:004111F0
.text:004111F0
.text:004111F0 sub_4111F0      proc near               ; CODE XREF: sub_4109C0+1A7↑p
.text:004111F0                                         ; sub_4109C0+237↑p ...
.text:004111F0                 mov     edx, ds:dword_416540
.text:004111F6                 test    edx, edx
.text:004111F8                 jnz     short loc_411200
.text:004111FA                 jmp     getenv
.text:004111FA ; ---------------------------------------------------------------------------
.text:004111FF                 align 10h
.text:00411200
.text:00411200 loc_411200:                             ; CODE XREF: sub_4111F0+8↑j
.text:00411200                 xor     eax, eax
.text:00411202                 retn
.text:00411202 sub_4111F0      endp
.text:00411202
.text:00411202 ; ---------------------------------------------------------------------------
.text:00411203                 align 10h
.text:00411210
.text:00411210 ; =============== S U B R O U T I N E =======================================
.text:00411210
.text:00411210
.text:00411210 ; int __cdecl sub_411210(LPCSTR, int, int)
.text:00411210 sub_411210      proc near               ; CODE XREF: sub_410D40+30E↑p
.text:00411210                                         ; sub_411260+42↓p ...
.text:00411210
.text:00411210 lpFileName      = dword ptr -2Ch
.text:00411210 dwDesiredAccess = dword ptr -28h
.text:00411210 dwShareMode     = dword ptr -24h
.text:00411210 lpSecurityAttributes= dword ptr -20h
.text:00411210 dwCreationDisposition= dword ptr -1Ch
.text:00411210 dwFlagsAndAttributes= dword ptr -18h
.text:00411210 hTemplateFile   = dword ptr -14h
.text:00411210 var_10          = dword ptr -10h
.text:00411210 var_C           = dword ptr -0Ch
.text:00411210 var_8           = dword ptr -8
.text:00411210 var_4           = dword ptr -4
.text:00411210 arg_0           = dword ptr  4
.text:00411210 arg_4           = dword ptr  8
.text:00411210 arg_8           = dword ptr  0Ch
.text:00411210
.text:00411210 ; FUNCTION CHUNK AT .text:0040CB30 SIZE 0000013A BYTES
.text:00411210
.text:00411210                 sub     esp, 0Ch
.text:00411213                 mov     ecx, [esp+0Ch+arg_0]
.text:00411217                 mov     edx, [esp+0Ch+arg_4]
.text:0041121B                 mov     eax, [esp+0Ch+arg_8]
.text:0041121F                 test    ecx, ecx
.text:00411221                 jnz     short loc_411240
.text:00411223                 test    edx, edx
.text:00411225                 jz      short loc_411240
.text:00411227                 test    eax, eax
.text:00411229                 jz      short loc_411240
.text:0041122B                 mov     [esp+0Ch+arg_4], eax
.text:0041122F                 mov     [esp+0Ch+arg_0], edx
.text:00411233                 add     esp, 0Ch
.text:00411236                 jmp     loc_40CB30
.text:00411236 ; ---------------------------------------------------------------------------
.text:0041123B                 align 10h
.text:00411240
.text:00411240 loc_411240:                             ; CODE XREF: sub_411210+11↑j
.text:00411240                                         ; sub_411210+15↑j ...
.text:00411240                 call    _errno
.text:00411245                 mov     dword ptr [eax], 16h
.text:0041124B                 mov     eax, 0FFFFFFFFh
.text:00411250                 add     esp, 0Ch
.text:00411253                 retn
.text:00411253 sub_411210      endp
.text:00411253
.text:00411253 ; ---------------------------------------------------------------------------
.text:00411254                 align 10h
.text:00411260
.text:00411260 ; =============== S U B R O U T I N E =======================================
.text:00411260
.text:00411260
.text:00411260 ; int __cdecl sub_411260(LPCSTR, char *, int)
.text:00411260 sub_411260      proc near               ; CODE XREF: sub_4109C0+104↑p
.text:00411260                                         ; sub_4109C0+158↑p ...
.text:00411260
.text:00411260 var_13C         = dword ptr -13Ch
.text:00411260 lpString1       = dword ptr -138h
.text:00411260 var_134         = dword ptr -134h
.text:00411260 String1         = byte ptr -12Ch
.text:00411260 var_10          = dword ptr -10h
.text:00411260 var_C           = dword ptr -0Ch
.text:00411260 var_8           = dword ptr -8
.text:00411260 var_4           = dword ptr -4
.text:00411260 arg_0           = dword ptr  4
.text:00411260 arg_4           = dword ptr  8
.text:00411260 arg_8           = dword ptr  0Ch
.text:00411260
.text:00411260                 sub     esp, 13Ch
.text:00411266                 mov     [esp+13Ch+var_10], ebx
.text:0041126D                 mov     ebx, [esp+13Ch+arg_8]
.text:00411274                 mov     [esp+13Ch+var_C], esi
.text:0041127B                 mov     esi, [esp+13Ch+arg_4]
.text:00411282                 mov     [esp+13Ch+var_8], edi
.text:00411289                 mov     edi, [esp+13Ch+arg_0]
.text:00411290                 mov     [esp+13Ch+var_4], ebp
.text:00411297                 mov     [esp+13Ch+var_134], ebx ; int
.text:0041129B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0041129F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004112A2                 call    sub_411210
.text:004112A7                 cmp     eax, 0FFFFFFFFh
.text:004112AA                 mov     edx, eax
.text:004112AC                 jz      short loc_4112BE
.text:004112AE                 mov     ecx, [ebx]
.text:004112B0                 and     ecx, 0F000h
.text:004112B6                 cmp     ecx, 0A000h
.text:004112BC                 jz      short loc_4112E3
.text:004112BE
.text:004112BE loc_4112BE:                             ; CODE XREF: sub_411260+4C↑j
.text:004112BE                                         ; sub_411260+A1↓j ...
.text:004112BE                 mov     ebx, [esp+13Ch+var_10]
.text:004112C5                 mov     eax, edx
.text:004112C7                 mov     esi, [esp+13Ch+var_C]
.text:004112CE                 mov     edi, [esp+13Ch+var_8]
.text:004112D5                 mov     ebp, [esp+13Ch+var_4]
.text:004112DC                 add     esp, 13Ch
.text:004112E2                 retn
.text:004112E3 ; ---------------------------------------------------------------------------
.text:004112E3
.text:004112E3 loc_4112E3:                             ; CODE XREF: sub_411260+5C↑j
.text:004112E3                 mov     [esp+13Ch+var_134], 104h
.text:004112EB                 lea     ebp, [esp+13Ch+String1]
.text:004112EF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:004112F3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:004112F6                 call    sub_4114F0
.text:004112FB                 inc     eax
.text:004112FC                 mov     edx, 0FFFFFFFFh
.text:00411301                 jz      short loc_4112BE
.text:00411303                 mov     [esp+13Ch+var_134], ebx ; int
.text:00411307                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0041130B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0041130E                 call    sub_411210
.text:00411313                 mov     edx, eax
.text:00411315                 jmp     short loc_4112BE
.text:00411315 sub_411260      endp
.text:00411315
.text:00411315 ; ---------------------------------------------------------------------------
.text:00411317                 align 10h
.text:00411320                 sub     esp, 0Ch
.text:00411323                 mov     [esp+4], ebx
.text:00411327                 mov     [esp+8], esi
.text:0041132B                 xor     esi, esi
.text:0041132D                 call    sub_411600
.text:00411332                 mov     ebx, eax
.text:00411334                 call    sub_4115F0
.text:00411339                 cmp     ebx, eax
.text:0041133B                 jz      short loc_411354
.text:0041133D
.text:0041133D loc_41133D:                             ; CODE XREF: .text:00411362↓j
.text:0041133D                 mov     esi, 1
.text:00411342
.text:00411342 loc_411342:                             ; CODE XREF: .text:00411364↓j
.text:00411342                 mov     ds:dword_416540, esi
.text:00411348                 mov     ebx, [esp+4]
.text:0041134C                 mov     esi, [esp+8]
.text:00411350                 add     esp, 0Ch
.text:00411353                 retn
.text:00411354 ; ---------------------------------------------------------------------------
.text:00411354
.text:00411354 loc_411354:                             ; CODE XREF: .text:0041133B↑j
.text:00411354                 call    sub_4115E0
.text:00411359                 mov     ebx, eax
.text:0041135B                 call    sub_4115D0
.text:00411360                 cmp     ebx, eax
.text:00411362                 jnz     short loc_41133D
.text:00411364                 jmp     short loc_411342
.text:00411364 ; ---------------------------------------------------------------------------
.text:00411366                 align 10h
.text:00411370
.text:00411370 ; =============== S U B R O U T I N E =======================================
.text:00411370
.text:00411370
.text:00411370 ; int __cdecl sub_411370(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00411370 sub_411370      proc near               ; CODE XREF: sub_4114F0+93↓p
.text:00411370
.text:00411370 pvReserved      = dword ptr -35Ch
.text:00411370 pUnkOuter       = dword ptr -358h
.text:00411370 dwClsContext    = dword ptr -354h
.text:00411370 riid            = dword ptr -350h
.text:00411370 ppv             = dword ptr -34Ch
.text:00411370 cchWideChar     = dword ptr -348h
.text:00411370 var_334         = byte ptr -334h
.text:00411370 var_330         = dword ptr -330h
.text:00411370 String2         = byte ptr -32Ch
.text:00411370 WideCharStr     = word ptr -21Ch
.text:00411370 lpMultiByteStr  = dword ptr  4
.text:00411370 lpString1       = dword ptr  8
.text:00411370
.text:00411370                 push    edi
.text:00411371                 push    esi
.text:00411372                 push    ebx
.text:00411373                 sub     esp, 350h
.text:00411379                 mov     edi, [esp+35Ch+lpString1]
.text:00411380                 mov     byte ptr [edi], 0
.text:00411383                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0041138A                 call    OleInitialize
.text:0041138F                 sub     esp, 4
.text:00411392                 cmp     eax, 1
.text:00411395                 ja      loc_4114CF
.text:0041139B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:004113A3                 lea     ecx, [esp+35Ch+var_330]
.text:004113A7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:004113AB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:004113B3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:004113BB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:004113C2                 call    CoCreateInstance
.text:004113C7                 sub     esp, 14h
.text:004113CA                 test    eax, eax
.text:004113CC                 js      loc_4114CF
.text:004113D2                 mov     ebx, [esp+35Ch+var_330]
.text:004113D6                 lea     edx, [esp+35Ch+var_334]
.text:004113DA                 mov     esi, [ebx]
.text:004113DC                 mov     [esp+35Ch+dwClsContext], edx
.text:004113E0                 mov     [esp+35Ch+pvReserved], ebx
.text:004113E3                 xor     ebx, ebx
.text:004113E5                 mov     [esp+35Ch+pUnkOuter], offset dword_4123E0
.text:004113ED                 call    dword ptr [esi]
.text:004113EF                 sub     esp, 0Ch
.text:004113F2                 lea     esi, [esp+35Ch+WideCharStr]
.text:004113F9                 call    AreFileApisANSI
.text:004113FE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00411406                 test    eax, eax
.text:00411408                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0041140F                 setz    bl
.text:00411412                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00411416                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0041141E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00411422                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0041142A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0041142D                 call    MultiByteToWideChar
.text:00411432                 sub     esp, 18h
.text:00411435                 test    eax, eax
.text:00411437                 js      loc_4114CF
.text:0041143D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00411441                 mov     ebx, [edx]
.text:00411443                 mov     [esp+35Ch+dwClsContext], 0
.text:0041144B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0041144F                 mov     [esp+35Ch+pvReserved], edx
.text:00411452                 call    dword ptr [ebx+14h]
.text:00411455                 sub     esp, 0Ch
.text:00411458                 test    eax, eax
.text:0041145A                 js      short loc_4114CF
.text:0041145C                 mov     ebx, [esp+35Ch+var_330]
.text:00411460                 lea     esi, [esp+35Ch+String2]
.text:00411464                 mov     ecx, [ebx]
.text:00411466                 mov     [esp+35Ch+pvReserved], ebx
.text:00411469                 mov     [esp+35Ch+ppv], 0
.text:00411471                 mov     [esp+35Ch+riid], 0
.text:00411479                 mov     [esp+35Ch+dwClsContext], 104h
.text:00411481                 mov     [esp+35Ch+pUnkOuter], esi
.text:00411485                 call    dword ptr [ecx+0Ch]
.text:00411488                 sub     esp, 14h
.text:0041148B                 mov     ebx, eax
.text:0041148D                 test    eax, eax
.text:0041148F                 js      short loc_4114CF
.text:00411491                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00411495                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00411498                 call    lstrcpyA
.text:0041149D                 sub     esp, 8
.text:004114A0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:004114A4                 mov     ecx, [edi]
.text:004114A6                 mov     [esp+35Ch+pvReserved], edi
.text:004114A9                 call    dword ptr [ecx+8]
.text:004114AC                 sub     esp, 4
.text:004114AF                 mov     edx, [esp+35Ch+var_330]
.text:004114B3                 mov     esi, [edx]
.text:004114B5                 mov     [esp+35Ch+pvReserved], edx
.text:004114B8                 call    dword ptr [esi+8]
.text:004114BB                 sub     esp, 4
.text:004114BE                 call    CoUninitialize
.text:004114C3                 mov     eax, ebx
.text:004114C5
.text:004114C5 loc_4114C5:                             ; CODE XREF: sub_411370+177↓j
.text:004114C5                 add     esp, 350h
.text:004114CB                 pop     ebx
.text:004114CC                 pop     esi
.text:004114CD                 pop     edi
.text:004114CE                 retn
.text:004114CF ; ---------------------------------------------------------------------------
.text:004114CF
.text:004114CF loc_4114CF:                             ; CODE XREF: sub_411370+25↑j
.text:004114CF                                         ; sub_411370+5C↑j ...
.text:004114CF                 call    sub_40EBF0
.text:004114D4                 mov     edi, eax
.text:004114D6                 call    _errno
.text:004114DB                 mov     [eax], edi
.text:004114DD                 call    CoUninitialize
.text:004114E2                 mov     eax, 0FFFFFFFFh
.text:004114E7                 jmp     short loc_4114C5
.text:004114E7 sub_411370      endp
.text:004114E7
.text:004114E7 ; ---------------------------------------------------------------------------
.text:004114E9 ; const char Source[]
.text:004114E9 Source          db '.lnk',0             ; DATA XREF: sub_4114F0+53↓o
.text:004114E9                                         ; sub_4114F0:loc_411555↓o
.text:004114EE                 align 10h
.text:004114F0
.text:004114F0 ; =============== S U B R O U T I N E =======================================
.text:004114F0
.text:004114F0
.text:004114F0 ; int __cdecl sub_4114F0(char *, LPSTR lpString1)
.text:004114F0 sub_4114F0      proc near               ; CODE XREF: sub_411260+96↑p
.text:004114F0
.text:004114F0 Str             = dword ptr -1Ch
.text:004114F0 Source          = dword ptr -18h
.text:004114F0 Destination     = dword ptr -14h
.text:004114F0 arg_0           = dword ptr  4
.text:004114F0 lpString1       = dword ptr  8
.text:004114F0
.text:004114F0                 push    ebp
.text:004114F1                 push    edi
.text:004114F2                 push    esi
.text:004114F3                 push    ebx
.text:004114F4                 sub     esp, 0Ch
.text:004114F7                 mov     ebx, [esp+1Ch+arg_0]
.text:004114FB                 mov     ebp, [esp+1Ch+lpString1]
.text:004114FF                 mov     [esp+1Ch+Str], ebx ; Str
.text:00411502                 call    strlen
.text:00411507                 add     eax, 5
.text:0041150A                 mov     [esp+1Ch+Str], eax ; Size
.text:0041150D                 call    malloc
.text:00411512                 mov     [esp+1Ch+Destination], eax
.text:00411516                 test    eax, eax
.text:00411518                 jz      loc_4115C0
.text:0041151E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00411522                 mov     [esp+1Ch+Str], eax ; Destination
.text:00411525                 call    strcpy
.text:0041152A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00411532                 mov     eax, [esp+1Ch+Destination]
.text:00411536                 mov     [esp+1Ch+Str], eax ; Str
.text:00411539                 call    strrchr
.text:0041153E                 test    eax, eax
.text:00411540                 jz      short loc_411555
.text:00411542                 cld
.text:00411543                 mov     ebx, offset Source ; ".lnk"
.text:00411548                 mov     ecx, 5
.text:0041154D                 mov     esi, eax
.text:0041154F                 mov     edi, ebx
.text:00411551                 repe cmpsb
.text:00411553                 jz      short loc_411569
.text:00411555
.text:00411555 loc_411555:                             ; CODE XREF: sub_4114F0+50↑j
.text:00411555                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:0041155D                 mov     edx, [esp+1Ch+Destination]
.text:00411561                 mov     [esp+1Ch+Str], edx ; Destination
.text:00411564                 call    strcat
.text:00411569
.text:00411569 loc_411569:                             ; CODE XREF: sub_4114F0+63↑j
.text:00411569                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00411570                 call    SetErrorMode
.text:00411575                 sub     esp, 4
.text:00411578                 mov     ebx, [esp+1Ch+Destination]
.text:0041157C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00411580                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00411583                 call    sub_411370
.text:00411588                 mov     [esp+1Ch+Str], ebx ; Block
.text:0041158B                 mov     esi, eax
.text:0041158D                 call    free
.text:00411592                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00411599                 call    SetErrorMode
.text:0041159E                 sub     esp, 4
.text:004115A1                 mov     [esp+1Ch+Str], ebp
.text:004115A4                 call    sub_40D040
.text:004115A9                 inc     esi
.text:004115AA                 jz      short loc_4115C0
.text:004115AC                 mov     [esp+1Ch+arg_0], ebp
.text:004115B0                 add     esp, 0Ch
.text:004115B3                 pop     ebx
.text:004115B4                 pop     esi
.text:004115B5                 pop     edi
.text:004115B6                 pop     ebp
.text:004115B7                 jmp     strlen
.text:004115B7 ; ---------------------------------------------------------------------------
.text:004115BC                 align 10h
.text:004115C0
.text:004115C0 loc_4115C0:                             ; CODE XREF: sub_4114F0+28↑j
.text:004115C0                                         ; sub_4114F0+BA↑j
.text:004115C0                 add     esp, 0Ch
.text:004115C3                 mov     eax, 0FFFFFFFFh
.text:004115C8                 pop     ebx
.text:004115C9                 pop     esi
.text:004115CA                 pop     edi
.text:004115CB                 pop     ebp
.text:004115CC                 retn
.text:004115CC sub_4114F0      endp
.text:004115CC
.text:004115CC ; ---------------------------------------------------------------------------
.text:004115CD                 align 10h
.text:004115D0
.text:004115D0 ; =============== S U B R O U T I N E =======================================
.text:004115D0
.text:004115D0
.text:004115D0 sub_4115D0      proc near               ; CODE XREF: .text:0041135B↑p
.text:004115D0                 xor     eax, eax
.text:004115D2                 retn
.text:004115D2 sub_4115D0      endp
.text:004115D2
.text:004115D2 ; ---------------------------------------------------------------------------
.text:004115D3                 align 10h
.text:004115E0
.text:004115E0 ; =============== S U B R O U T I N E =======================================
.text:004115E0
.text:004115E0
.text:004115E0 sub_4115E0      proc near               ; CODE XREF: .text:loc_411354↑p
.text:004115E0                 xor     eax, eax
.text:004115E2                 retn
.text:004115E2 sub_4115E0      endp
.text:004115E2
.text:004115E2 ; ---------------------------------------------------------------------------
.text:004115E3                 align 10h
.text:004115F0
.text:004115F0 ; =============== S U B R O U T I N E =======================================
.text:004115F0
.text:004115F0
.text:004115F0 sub_4115F0      proc near               ; CODE XREF: .text:00411334↑p
.text:004115F0                 xor     eax, eax
.text:004115F2                 retn
.text:004115F2 sub_4115F0      endp
.text:004115F2
.text:004115F2 ; ---------------------------------------------------------------------------
.text:004115F3                 align 10h
.text:00411600
.text:00411600 ; =============== S U B R O U T I N E =======================================
.text:00411600
.text:00411600
.text:00411600 sub_411600      proc near               ; CODE XREF: .text:0041132D↑p
.text:00411600                 xor     eax, eax
.text:00411602                 retn
.text:00411602 sub_411600      endp
.text:00411602
.text:00411602 ; ---------------------------------------------------------------------------
.text:00411603                 align 10h
.text:00411610
.text:00411610 ; =============== S U B R O U T I N E =======================================
.text:00411610
.text:00411610 ; Attributes: thunk
.text:00411610
.text:00411610 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00411610 OleInitialize   proc near               ; CODE XREF: sub_411370+1A↑p
.text:00411610
.text:00411610 pvReserved      = dword ptr  4
.text:00411610
.text:00411610                 jmp     ds:__imp_OleInitialize
.text:00411610 OleInitialize   endp
.text:00411610
.text:00411610 ; ---------------------------------------------------------------------------
.text:00411616                 align 10h
.text:00411620
.text:00411620 ; =============== S U B R O U T I N E =======================================
.text:00411620
.text:00411620 ; Attributes: thunk
.text:00411620
.text:00411620 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00411620 CoCreateInstance proc near              ; CODE XREF: sub_411370+52↑p
.text:00411620
.text:00411620 rclsid          = dword ptr  4
.text:00411620 pUnkOuter       = dword ptr  8
.text:00411620 dwClsContext    = dword ptr  0Ch
.text:00411620 riid            = dword ptr  10h
.text:00411620 ppv             = dword ptr  14h
.text:00411620
.text:00411620                 jmp     ds:__imp_CoCreateInstance
.text:00411620 CoCreateInstance endp
.text:00411620
.text:00411620 ; ---------------------------------------------------------------------------
.text:00411626                 align 10h
.text:00411630
.text:00411630 ; =============== S U B R O U T I N E =======================================
.text:00411630
.text:00411630 ; Attributes: thunk
.text:00411630
.text:00411630 ; void __stdcall CoUninitialize()
.text:00411630 CoUninitialize  proc near               ; CODE XREF: sub_411370+14E↑p
.text:00411630                                         ; sub_411370+16D↑p
.text:00411630                 jmp     ds:__imp_CoUninitialize
.text:00411630 CoUninitialize  endp
.text:00411630
.text:00411630 ; ---------------------------------------------------------------------------
.text:00411636                 align 10h
.text:00411640                 add     al, 0BAh ; 'º'
.text:00411642                 retf
.text:00411642 ; ---------------------------------------------------------------------------
.text:00411643                 db 7Eh
.text:00411644                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00411644                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00411644                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00411644                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00411644                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00411644                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00411644                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00411644                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00411644                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00411644                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00411644                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00411644                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00411644                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00411644                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00411644                 dd 0C4426C00h, 330h, 0
.text:00411778                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411778                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00411778                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00411778                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:004117C8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004117C8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:004117C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:004117C8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:004117C8                 dd 0BA94B00h, 1Bh, 0
.text:00411828                 dd 0C0h, 46000000h, 1Ch, 0
.text:00411838                 dd 0C0h, 46000000h, 331h, 0
.text:00411848                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411848                 dd 312h, 0
.text:00411868                 dd 0C0h, 46000000h, 30Eh, 0
.text:00411878                 dd 0C0h, 46000000h, 30Dh, 0
.text:00411888                 dd 0C0h, 46000000h, 311h, 0
.text:00411898                 dd 0C0h, 46000000h, 313h, 0
.text:004118A8                 dd 0C0h, 46000000h, 30Ch, 0
.text:004118B8                 dd 0C0h, 46000000h, 30Fh, 0
.text:004118C8                 dd 0C0h, 46000000h, 310h, 0
.text:004118D8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004118D8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00411908                 dd 0C0h, 46000000h, 319h, 0
.text:00411918                 dd 0C0h, 46000000h, 315h, 0
.text:00411928                 dd 0C0h, 46000000h, 316h, 0
.text:00411938                 dd 0C0h, 46000000h, 315h, 0
.text:00411948                 dd 0C0h, 46000000h, 2E005h, 0
.text:00411958                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411958                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00411958                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00411998                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411998                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00411998                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00411998                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00411998                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00411998                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00411998                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00411998                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00411998                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00411998                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00411998                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00411998                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411998                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00411998                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00411998                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00411998                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411998                 dd 2DE81h, 0
.text:00411AE8                 dd 0C0h, 46000000h, 4 dup(0)
.text:00411B00                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00411B00                 dd 0
.text:00411B18                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411B18                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00411B18                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00411B18                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00411B18                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411B18                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00411B18                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00411B18                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00411B18                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00411B18                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00411B18                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00411B18                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00411B18                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00411B18                 dd 10Fh, 0
.text:00411C28                 dd 0C0h, 46000000h, 125h, 0
.text:00411C38                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00411C38                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00411C38                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00411C78                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00411C78                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411C78                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00411C78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00411C78                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00411CD8                 dd 0C0h, 46000000h, 2E012h, 0
.text:00411CE8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00411CE8                 dd 140h, 0
.text:00411D08                 dd 0C0h, 46000000h, 1, 0
.text:00411D18                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00411D18                 dd 71D3400h, 13Dh, 0
.text:00411D38                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411D38                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00411D38                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00411D38                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00411D88                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00411D88                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411D88                 dd 20405h, 0
.text:00411DB8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00411DC8                 dd 0C0h, 46000000h, 20406h, 0
.text:00411DD8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00411DE8                 dd 0C0h, 46000000h, 110h, 0
.text:00411DF8                 dd 0C0h, 46000000h, 10Eh, 0
.text:00411E08                 dd 0C0h, 46000000h, 123h, 0
.text:00411E18                 dd 0C0h, 46000000h, 124h, 0
.text:00411E28                 dd 0C0h, 46000000h, 13h, 0
.text:00411E38                 dd 0C0h, 46000000h, 14h, 0
.text:00411E48                 dd 0C0h, 46000000h, 15h, 0
.text:00411E58                 dd 0C0h, 46000000h, 20400h, 0
.text:00411E68                 dd 0C0h, 46000000h, 121h, 0
.text:00411E78                 dd 0C0h, 46000000h, 122h, 0
.text:00411E88                 dd 0C0h, 46000000h, 2E011h, 0
.text:00411E98                 dd 0C0h, 46000000h, 108h, 0
.text:00411EA8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00411EA8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411EA8                 dd 103h, 0
.text:00411ED8                 dd 0C0h, 46000000h, 2E000h, 0
.text:00411EE8                 dd 0C0h, 46000000h, 106h, 0
.text:00411EF8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411EF8                 dd 107h, 0
.text:00411F18                 dd 0C0h, 46000000h, 102h, 0
.text:00411F28                 dd 0C0h, 46000000h, 104h, 0
.text:00411F38                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00411F38                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00411F38                 dd 105h, 0
.text:00411F68                 dd 0C0h, 46000000h, 13Bh, 0
.text:00411F78                 dd 0C0h, 46000000h, 139h, 0
.text:00411F88                 dd 0C0h, 46000000h, 0Dh, 0
.text:00411F98                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00411F98                 dd 101h, 0
.text:00411FB8                 dd 0C0h, 46000000h, 100h, 0
.text:00411FC8                 dd 0C0h, 46000000h, 20404h, 0
.text:00411FD8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411FD8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00412008                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00412008                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00412008                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00412008                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00412058                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00412058                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00412058                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00412058                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00412058                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00412058                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:004120D8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:004120D8                 dd 0Ah, 0
.text:004120F8                 dd 0C0h, 46000000h, 2, 0
.text:00412108                 dd 0C0h, 46000000h, 1Dh, 0
.text:00412118                 dd 0C0h, 46000000h, 3, 0
.text:00412128                 dd 0C0h, 46000000h, 16h, 0
.text:00412138                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00412138                 dd 1608D74Fh, 0Fh, 0
.text:00412158                 dd 0C0h, 46000000h, 20h, 0
.text:00412168                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00412168                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00412168                 dd 0
.text:00412198                 dd 0C0h, 46000000h, 11Eh, 0
.text:004121A8                 dd 0C0h, 46000000h, 128h, 0
.text:004121B8                 dd 0C0h, 46000000h, 129h, 0
.text:004121C8                 dd 0C0h, 46000000h, 118h, 0
.text:004121D8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:004121D8                 dd 70474000h, 11Bh, 0
.text:004121F8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:004121F8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004121F8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:004121F8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:004121F8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00412258                 dd 0C0h, 46000000h, 116h, 0
.text:00412268                 dd 0C0h, 46000000h, 113h, 0
.text:00412278                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00412278                 dd 119h, 0
.text:00412298                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00412298                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00412298                 dd 0
.text:004122C8                 dd 0C0h, 46000000h, 11Ch, 0
.text:004122D8                 dd 0C0h, 46000000h, 11Dh, 0
.text:004122E8                 dd 0C0h, 46000000h, 11Fh, 0
.text:004122F8                 dd 0C0h, 46000000h, 112h, 0
.text:00412308                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00412308                 dd 18E6000h, 120h, 0
.text:00412328                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00412328                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00412328                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00412368                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00412368                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00412398                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412398                 dd 11Ah, 0
.text:004123B8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:004123B8                 dd 10Ch, 0
.text:004123D8                 dd 0C0h, 46000000h
.text:004123E0 dword_4123E0    dd 10Bh, 0              ; DATA XREF: sub_411370+75↑o
.text:004123E8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:004123E8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:004123E8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:004123E8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00412438                 dd 0C0h, 46000000h, 109h, 0
.text:00412448                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00412448                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00412448                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00412448                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00412448                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00412448                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00412448                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00412448                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00412448                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00412448                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00412448                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00412528                 dd 0C0h, 46000000h, 138h, 0
.text:00412538                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00412538                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00412538                 dd 27h, 0
.text:00412568                 dd 0C0h, 46000000h, 8, 0
.text:00412578                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00412578                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00412578                 dd 20D00h, 0
.text:004125A8                 dd 0C0h, 46000000h, 20D03h, 0
.text:004125B8                 dd 0C0h, 46000000h, 12h, 0
.text:004125C8                 dd 0C0h, 46000000h, 4, 0
.text:004125D8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004125D8                 dd 7, 0
.text:004125F8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004125F8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00412628                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412628                 dd 126h, 0
.text:00412648                 dd 0C0h, 46000000h, 10h, 0
.text:00412658                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00412658                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00412688                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00412688                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00412688                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:004126C8                 dd 0C0h, 46000000h, 0Bh, 0
.text:004126D8                 dd 0C0h, 46000000h, 0Ch, 0
.text:004126E8                 dd 0C0h, 46000000h, 26h, 0
.text:004126F8                 dd 0C0h, 46000000h, 6, 0
.text:00412708                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00412708                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00412708                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00412748                 dd 0C0h, 46000000h, 20403h, 0
.text:00412758                 dd 0C0h, 46000000h, 20401h, 0
.text:00412768                 dd 0C0h, 46000000h, 20412h, 0
.text:00412778                 dd 0C0h, 46000000h, 20402h, 0
.text:00412788                 dd 0C0h, 46000000h, 20411h, 0
.text:00412798                 dd 0C0h, 46000000h, 2 dup(0)
.text:004127A8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004127A8                 dd 10Dh, 0
.text:004127C8                 dd 0C0h, 46000000h, 127h, 0
.text:004127D8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:004127D8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:004127D8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00412818                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00412818                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00412818                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00412858                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00412868                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00412878                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00412888                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00412898                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:004128A8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:004128B8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:004128C8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:004128D8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:004128E8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:004128F8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00412908                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00412918                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00412928                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00412938                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00412948                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00412958                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00412968                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00412978                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00412988                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00412998                 dd 0C0h, 46000000h, 2DE09h, 0
.text:004129A8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:004129B8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:004129C8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:004129D8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:004129E8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:004129F8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00412A08                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00412A18                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00412A28                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00412A38                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00412A48                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00412A58                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00412A68                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00412A78                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00412A88                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00412A88                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00412AB0
.text:00412AB0 ; =============== S U B R O U T I N E =======================================
.text:00412AB0
.text:00412AB0 ; Attributes: thunk
.text:00412AB0
.text:00412AB0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00412AB0 mbrtowc         proc near               ; CODE XREF: sub_409710+757↑p
.text:00412AB0
.text:00412AB0 DstCh           = dword ptr  4
.text:00412AB0 SrcCh           = dword ptr  8
.text:00412AB0 SizeInBytes     = dword ptr  0Ch
.text:00412AB0 State           = dword ptr  10h
.text:00412AB0
.text:00412AB0                 jmp     ds:__imp_mbrtowc
.text:00412AB0 mbrtowc         endp
.text:00412AB0
.text:00412AB0 ; ---------------------------------------------------------------------------
.text:00412AB6                 align 10h
.text:00412AC0
.text:00412AC0 ; =============== S U B R O U T I N E =======================================
.text:00412AC0
.text:00412AC0 ; Attributes: bp-based frame
.text:00412AC0
.text:00412AC0 sub_412AC0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00412AC0                 push    ebp
.text:00412AC1                 mov     ecx, offset byte_416000
.text:00412AC6                 cmp     ecx, offset byte_416000
.text:00412ACC                 mov     ebp, esp
.text:00412ACE                 jnb     short loc_412AE6
.text:00412AD0
.text:00412AD0 loc_412AD0:                             ; CODE XREF: sub_412AC0+24↓j
.text:00412AD0                 mov     edx, [ecx+4]
.text:00412AD3                 mov     eax, [ecx]
.text:00412AD5                 add     ecx, 8
.text:00412AD8                 add     [edx+400000h], eax
.text:00412ADE                 cmp     ecx, offset byte_416000
.text:00412AE4                 jb      short loc_412AD0
.text:00412AE6
.text:00412AE6 loc_412AE6:                             ; CODE XREF: sub_412AC0+E↑j
.text:00412AE6                 pop     ebp
.text:00412AE7                 retn
.text:00412AE7 sub_412AC0      endp
.text:00412AE7
.text:00412AE7 ; ---------------------------------------------------------------------------
.text:00412AE8                 align 10h
.text:00412AF0
.text:00412AF0 ; =============== S U B R O U T I N E =======================================
.text:00412AF0
.text:00412AF0 ; Attributes: bp-based frame
.text:00412AF0
.text:00412AF0 sub_412AF0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00412AF0                                         ; TopLevelExceptionFilter+D7↑p
.text:00412AF0                 push    ebp
.text:00412AF1                 mov     ebp, esp
.text:00412AF3                 fninit
.text:00412AF5                 pop     ebp
.text:00412AF6                 retn
.text:00412AF6 sub_412AF0      endp
.text:00412AF6
.text:00412AF6 ; ---------------------------------------------------------------------------
.text:00412AF7                 align 10h
.text:00412B00
.text:00412B00 ; =============== S U B R O U T I N E =======================================
.text:00412B00
.text:00412B00 ; Attributes: bp-based frame
.text:00412B00
.text:00412B00 ; void __cdecl sub_412B00()
.text:00412B00 sub_412B00      proc near               ; DATA XREF: .text:loc_412B49↓o
.text:00412B00                                         ; sub_412B90:loc_412BBE↓o
.text:00412B00                 push    ebp
.text:00412B01                 mov     ebp, esp
.text:00412B03                 sub     esp, 8
.text:00412B06                 mov     eax, off_4150F4
.text:00412B0B                 mov     edx, [eax]
.text:00412B0D                 test    edx, edx
.text:00412B0F                 jnz     short loc_412B15
.text:00412B11
.text:00412B11 loc_412B11:                             ; CODE XREF: sub_412B00+2C↓j
.text:00412B11                 mov     esp, ebp
.text:00412B13                 pop     ebp
.text:00412B14                 retn
.text:00412B15 ; ---------------------------------------------------------------------------
.text:00412B15
.text:00412B15 loc_412B15:                             ; CODE XREF: sub_412B00+F↑j
.text:00412B15                                         ; sub_412B00+2A↓j
.text:00412B15                 call    dword ptr [eax]
.text:00412B17                 mov     edx, off_4150F4
.text:00412B1D                 mov     ecx, [edx+4]
.text:00412B20                 lea     eax, [edx+4]
.text:00412B23                 mov     off_4150F4, eax
.text:00412B28                 test    ecx, ecx
.text:00412B2A                 jnz     short loc_412B15
.text:00412B2C                 jmp     short loc_412B11
.text:00412B2C sub_412B00      endp
.text:00412B2C
.text:00412B2C ; ---------------------------------------------------------------------------
.text:00412B2E                 align 10h
.text:00412B30                 push    ebp
.text:00412B31                 mov     ebp, esp
.text:00412B33                 sub     esp, 8
.text:00412B36                 mov     [ebp-4], ebx
.text:00412B39                 mov     eax, ds:dword_414120
.text:00412B3E                 cmp     eax, 0FFFFFFFFh
.text:00412B41                 jz      short loc_412B6C
.text:00412B43
.text:00412B43 loc_412B43:                             ; CODE XREF: .text:00412B76↓j
.text:00412B43                                         ; .text:00412B89↓j
.text:00412B43                 test    eax, eax
.text:00412B45                 mov     ebx, eax
.text:00412B47                 jnz     short loc_412B60
.text:00412B49
.text:00412B49 loc_412B49:                             ; CODE XREF: .text:00412B6A↓j
.text:00412B49                 mov     dword ptr [esp], offset sub_412B00
.text:00412B50                 call    sub_401040
.text:00412B55                 mov     ebx, [ebp-4]
.text:00412B58                 mov     esp, ebp
.text:00412B5A                 pop     ebp
.text:00412B5B                 retn
.text:00412B5B ; ---------------------------------------------------------------------------
.text:00412B5C                 align 10h
.text:00412B60
.text:00412B60 loc_412B60:                             ; CODE XREF: .text:00412B47↑j
.text:00412B60                                         ; .text:00412B68↓j
.text:00412B60                 call    ds:dword_414120[ebx*4]
.text:00412B67                 dec     ebx
.text:00412B68                 jnz     short loc_412B60
.text:00412B6A                 jmp     short loc_412B49
.text:00412B6C ; ---------------------------------------------------------------------------
.text:00412B6C
.text:00412B6C loc_412B6C:                             ; CODE XREF: .text:00412B41↑j
.text:00412B6C                 mov     ecx, ds:dword_414124
.text:00412B72                 xor     eax, eax
.text:00412B74                 test    ecx, ecx
.text:00412B76                 jz      short loc_412B43
.text:00412B78                 mov     edx, offset dword_414120
.text:00412B7D                 lea     esi, [esi+0]
.text:00412B80
.text:00412B80 loc_412B80:                             ; CODE XREF: .text:00412B87↓j
.text:00412B80                 inc     eax
.text:00412B81                 mov     ecx, [edx+eax*4+4]
.text:00412B85                 test    ecx, ecx
.text:00412B87                 jnz     short loc_412B80
.text:00412B89                 jmp     short loc_412B43
.text:00412B89 ; ---------------------------------------------------------------------------
.text:00412B8B                 align 10h
.text:00412B90
.text:00412B90 ; =============== S U B R O U T I N E =======================================
.text:00412B90
.text:00412B90 ; Attributes: bp-based frame
.text:00412B90
.text:00412B90 sub_412B90      proc near               ; CODE XREF: sub_4014E0+1C↑p
.text:00412B90
.text:00412B90 var_8           = dword ptr -8
.text:00412B90 var_4           = dword ptr -4
.text:00412B90
.text:00412B90                 push    ebp
.text:00412B91                 mov     ebp, esp
.text:00412B93                 sub     esp, 8
.text:00412B96                 mov     [ebp+var_4], ebx
.text:00412B99                 mov     edx, dword_4150F0
.text:00412B9F                 test    edx, edx
.text:00412BA1                 jnz     short loc_412BCA
.text:00412BA3                 mov     eax, ds:dword_414120
.text:00412BA8                 mov     edx, 1
.text:00412BAD                 mov     dword_4150F0, edx
.text:00412BB3                 cmp     eax, 0FFFFFFFFh
.text:00412BB6                 jz      short loc_412BDD
.text:00412BB8
.text:00412BB8 loc_412BB8:                             ; CODE XREF: sub_412B90+57↓j
.text:00412BB8                                         ; sub_412B90+69↓j
.text:00412BB8                 test    eax, eax
.text:00412BBA                 mov     ebx, eax
.text:00412BBC                 jnz     short loc_412BD1
.text:00412BBE
.text:00412BBE loc_412BBE:                             ; CODE XREF: sub_412B90+4B↓j
.text:00412BBE                 mov     [esp+8+var_8], offset sub_412B00 ; void (__cdecl *)()
.text:00412BC5                 call    sub_401040
.text:00412BCA
.text:00412BCA loc_412BCA:                             ; CODE XREF: sub_412B90+11↑j
.text:00412BCA                 mov     ebx, [ebp+var_4]
.text:00412BCD                 mov     esp, ebp
.text:00412BCF                 pop     ebp
.text:00412BD0                 retn
.text:00412BD1 ; ---------------------------------------------------------------------------
.text:00412BD1
.text:00412BD1 loc_412BD1:                             ; CODE XREF: sub_412B90+2C↑j
.text:00412BD1                                         ; sub_412B90+49↓j
.text:00412BD1                 call    ds:dword_414120[ebx*4]
.text:00412BD8                 dec     ebx
.text:00412BD9                 jnz     short loc_412BD1
.text:00412BDB                 jmp     short loc_412BBE
.text:00412BDD ; ---------------------------------------------------------------------------
.text:00412BDD
.text:00412BDD loc_412BDD:                             ; CODE XREF: sub_412B90+26↑j
.text:00412BDD                 mov     ecx, ds:dword_414124
.text:00412BE3                 xor     eax, eax
.text:00412BE5                 test    ecx, ecx
.text:00412BE7                 jz      short loc_412BB8
.text:00412BE9                 mov     edx, offset dword_414120
.text:00412BEE                 mov     esi, esi
.text:00412BF0
.text:00412BF0 loc_412BF0:                             ; CODE XREF: sub_412B90+67↓j
.text:00412BF0                 inc     eax
.text:00412BF1                 mov     ebx, [edx+eax*4+4]
.text:00412BF5                 test    ebx, ebx
.text:00412BF7                 jnz     short loc_412BF0
.text:00412BF9                 jmp     short loc_412BB8
.text:00412BF9 sub_412B90      endp
.text:00412BF9
.text:00412BF9 ; ---------------------------------------------------------------------------
.text:00412BFB                 align 10h
.text:00412C00
.text:00412C00 ; =============== S U B R O U T I N E =======================================
.text:00412C00
.text:00412C00 ; Attributes: info_from_lumina
.text:00412C00
.text:00412C00 ; void *__cdecl _alloca(size_t Size)
.text:00412C00 __alloca        proc near               ; CODE XREF: sub_4014E0+17↑p
.text:00412C00                 push    ecx
.text:00412C01                 mov     ecx, esp
.text:00412C03                 add     ecx, 8
.text:00412C06
.text:00412C06 loc_412C06:                             ; CODE XREF: __alloca+1B↓j
.text:00412C06                 cmp     eax, 1000h
.text:00412C0B                 jb      short loc_412C1D
.text:00412C0D                 sub     ecx, 1000h
.text:00412C13                 or      dword ptr [ecx], 0
.text:00412C16                 sub     eax, 1000h
.text:00412C1B                 jmp     short loc_412C06
.text:00412C1D ; ---------------------------------------------------------------------------
.text:00412C1D
.text:00412C1D loc_412C1D:                             ; CODE XREF: __alloca+B↑j
.text:00412C1D                 sub     ecx, eax
.text:00412C1F                 or      dword ptr [ecx], 0
.text:00412C22                 mov     eax, esp
.text:00412C24                 mov     esp, ecx
.text:00412C26                 mov     ecx, [eax]
.text:00412C28                 mov     eax, [eax+4]
.text:00412C2B                 jmp     eax
.text:00412C2B __alloca        endp
.text:00412C2B
.text:00412C2B ; ---------------------------------------------------------------------------
.text:00412C2D                 align 10h
.text:00412C30
.text:00412C30 ; =============== S U B R O U T I N E =======================================
.text:00412C30
.text:00412C30 ; Attributes: bp-based frame
.text:00412C30
.text:00412C30 sub_412C30      proc near               ; CODE XREF: sub_4084F0+2BE↑p
.text:00412C30                                         ; sub_4084F0+36A↑p ...
.text:00412C30
.text:00412C30 var_24          = dword ptr -24h
.text:00412C30 var_20          = dword ptr -20h
.text:00412C30 var_1C          = dword ptr -1Ch
.text:00412C30 var_18          = dword ptr -18h
.text:00412C30 var_14          = dword ptr -14h
.text:00412C30 var_C           = dword ptr -0Ch
.text:00412C30 var_8           = dword ptr -8
.text:00412C30 var_4           = dword ptr -4
.text:00412C30 arg_0           = dword ptr  8
.text:00412C30 arg_4           = dword ptr  0Ch
.text:00412C30 arg_8           = dword ptr  10h
.text:00412C30 arg_C           = dword ptr  14h
.text:00412C30
.text:00412C30                 push    ebp
.text:00412C31                 mov     ebp, esp
.text:00412C33                 sub     esp, 28h
.text:00412C36                 mov     [ebp+var_C], ebx
.text:00412C39                 mov     edx, [ebp+arg_C]
.text:00412C3C                 mov     ecx, [ebp+arg_0]
.text:00412C3F                 mov     [ebp+var_8], esi
.text:00412C42                 mov     eax, [ebp+arg_8]
.text:00412C45                 test    edx, edx
.text:00412C47                 mov     [ebp+var_4], edi
.text:00412C4A                 mov     ebx, [ebp+arg_4]
.text:00412C4D                 mov     esi, eax
.text:00412C4F                 mov     [ebp+var_18], 0
.text:00412C56                 mov     [ebp+var_14], 0
.text:00412C5D                 mov     [ebp+var_1C], ecx
.text:00412C60                 jnz     short loc_412CB2
.text:00412C62                 cmp     eax, ebx
.text:00412C64                 jbe     short loc_412C90
.text:00412C66                 mov     eax, ecx
.text:00412C68                 mov     edx, ebx
.text:00412C6A                 div     esi
.text:00412C6C                 mov     edi, eax
.text:00412C6E                 mov     esi, esi
.text:00412C70
.text:00412C70 loc_412C70:                             ; CODE XREF: sub_412C30+88↓j
.text:00412C70                                         ; sub_412C30+A4↓j ...
.text:00412C70                 xor     ecx, ecx
.text:00412C72
.text:00412C72 loc_412C72:                             ; CODE XREF: sub_412C30+80↓j
.text:00412C72                 mov     [ebp+var_18], edi
.text:00412C75                 mov     ebx, [ebp+var_C]
.text:00412C78                 mov     eax, [ebp+var_18]
.text:00412C7B                 mov     [ebp+var_14], ecx
.text:00412C7E                 mov     esi, [ebp+var_8]
.text:00412C81                 mov     edx, [ebp+var_14]
.text:00412C84                 mov     edi, [ebp+var_4]
.text:00412C87                 mov     esp, ebp
.text:00412C89                 pop     ebp
.text:00412C8A                 retn
.text:00412C8A ; ---------------------------------------------------------------------------
.text:00412C8B                 align 10h
.text:00412C90
.text:00412C90 loc_412C90:                             ; CODE XREF: sub_412C30+34↑j
.text:00412C90                 test    eax, eax
.text:00412C92                 jnz     short loc_412CA1
.text:00412C94                 mov     eax, 1
.text:00412C99                 xor     ecx, ecx
.text:00412C9B                 xor     edx, edx
.text:00412C9D                 div     ecx
.text:00412C9F                 mov     esi, eax
.text:00412CA1
.text:00412CA1 loc_412CA1:                             ; CODE XREF: sub_412C30+62↑j
.text:00412CA1                 mov     eax, ebx
.text:00412CA3                 xor     edx, edx
.text:00412CA5                 div     esi
.text:00412CA7                 mov     ecx, eax
.text:00412CA9                 mov     eax, [ebp+var_1C]
.text:00412CAC                 div     esi
.text:00412CAE                 mov     edi, eax
.text:00412CB0                 jmp     short loc_412C72
.text:00412CB2 ; ---------------------------------------------------------------------------
.text:00412CB2
.text:00412CB2 loc_412CB2:                             ; CODE XREF: sub_412C30+30↑j
.text:00412CB2                 cmp     edx, ebx
.text:00412CB4                 jbe     short loc_412CC0
.text:00412CB6                 xor     edi, edi
.text:00412CB8                 jmp     short loc_412C70
.text:00412CB8 ; ---------------------------------------------------------------------------
.text:00412CBA                 align 10h
.text:00412CC0
.text:00412CC0 loc_412CC0:                             ; CODE XREF: sub_412C30+84↑j
.text:00412CC0                 bsr     eax, edx
.text:00412CC3                 xor     eax, 1Fh
.text:00412CC6                 mov     [ebp+var_20], eax
.text:00412CC9                 jnz     short loc_412CE0
.text:00412CCB                 cmp     ebx, edx
.text:00412CCD                 ja      short loc_412CD6
.text:00412CCF                 xor     edi, edi
.text:00412CD1                 cmp     [ebp+var_1C], esi
.text:00412CD4                 jb      short loc_412C70
.text:00412CD6
.text:00412CD6 loc_412CD6:                             ; CODE XREF: sub_412C30+9D↑j
.text:00412CD6                 mov     edi, 1
.text:00412CDB                 jmp     short loc_412C70
.text:00412CDB ; ---------------------------------------------------------------------------
.text:00412CDD                 align 10h
.text:00412CE0
.text:00412CE0 loc_412CE0:                             ; CODE XREF: sub_412C30+99↑j
.text:00412CE0                 mov     eax, [ebp+var_20]
.text:00412CE3                 mov     ecx, 20h ; ' '
.text:00412CE8                 sub     ecx, eax
.text:00412CEA                 mov     [ebp+var_24], ecx
.text:00412CED                 mov     eax, esi
.text:00412CEF                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412CF3                 shl     edx, cl
.text:00412CF5                 mov     edi, edx
.text:00412CF7                 movzx   ecx, byte ptr [ebp+var_24]
.text:00412CFB                 mov     edx, ebx
.text:00412CFD                 shr     eax, cl
.text:00412CFF                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412D03                 or      edi, eax
.text:00412D05                 mov     eax, [ebp+var_1C]
.text:00412D08                 shl     esi, cl
.text:00412D0A                 movzx   ecx, byte ptr [ebp+var_24]
.text:00412D0E                 shr     edx, cl
.text:00412D10                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412D14                 shl     ebx, cl
.text:00412D16                 movzx   ecx, byte ptr [ebp+var_24]
.text:00412D1A                 shr     eax, cl
.text:00412D1C                 or      ebx, eax
.text:00412D1E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412D22                 mov     eax, ebx
.text:00412D24                 div     edi
.text:00412D26                 mov     ebx, edx
.text:00412D28                 mov     edi, eax
.text:00412D2A                 shl     [ebp+var_1C], cl
.text:00412D2D                 mul     esi
.text:00412D2F                 cmp     edx, ebx
.text:00412D31                 ja      short loc_412D44
.text:00412D33                 cmp     edx, ebx
.text:00412D35                 jnz     loc_412C70
.text:00412D3B                 cmp     eax, [ebp+var_1C]
.text:00412D3E                 jbe     loc_412C70
.text:00412D44
.text:00412D44 loc_412D44:                             ; CODE XREF: sub_412C30+101↑j
.text:00412D44                 dec     edi
.text:00412D45                 jmp     loc_412C70
.text:00412D45 sub_412C30      endp
.text:00412D45
.text:00412D45 ; ---------------------------------------------------------------------------
.text:00412D4A                 align 10h
.text:00412D50
.text:00412D50 ; =============== S U B R O U T I N E =======================================
.text:00412D50
.text:00412D50 ; Attributes: bp-based frame
.text:00412D50
.text:00412D50 sub_412D50      proc near               ; CODE XREF: sub_4094F0+38↑p
.text:00412D50                                         ; sub_4094F0+88↑p
.text:00412D50
.text:00412D50 var_3C          = dword ptr -3Ch
.text:00412D50 var_34          = dword ptr -34h
.text:00412D50 var_30          = dword ptr -30h
.text:00412D50 var_2C          = dword ptr -2Ch
.text:00412D50 var_28          = dword ptr -28h
.text:00412D50 var_24          = dword ptr -24h
.text:00412D50 var_1C          = dword ptr -1Ch
.text:00412D50 var_18          = dword ptr -18h
.text:00412D50 var_14          = dword ptr -14h
.text:00412D50 arg_0           = dword ptr  8
.text:00412D50 arg_4           = dword ptr  0Ch
.text:00412D50 arg_8           = dword ptr  10h
.text:00412D50 arg_C           = dword ptr  14h
.text:00412D50
.text:00412D50                 push    ebp
.text:00412D51                 mov     ebp, esp
.text:00412D53                 push    edi
.text:00412D54                 push    esi
.text:00412D55                 push    ebx
.text:00412D56                 sub     esp, 34h
.text:00412D59                 mov     ebx, [ebp+arg_4]
.text:00412D5C                 mov     [ebp+var_28], 0
.text:00412D63                 mov     ecx, [ebp+arg_0]
.text:00412D66                 mov     eax, [ebp+arg_8]
.text:00412D69                 mov     [ebp+var_24], 0
.text:00412D70                 test    ebx, ebx
.text:00412D72                 mov     edx, [ebp+arg_C]
.text:00412D75                 mov     [ebp+var_1C], 0
.text:00412D7C                 js      loc_412EF4
.text:00412D82
.text:00412D82 loc_412D82:                             ; CODE XREF: sub_412D50+1B2↓j
.text:00412D82                 test    edx, edx
.text:00412D84                 js      loc_412EE8
.text:00412D8A
.text:00412D8A loc_412D8A:                             ; CODE XREF: sub_412D50+19F↓j
.text:00412D8A                 mov     [ebp+var_2C], edx
.text:00412D8D                 test    edx, edx
.text:00412D8F                 mov     esi, eax
.text:00412D91                 mov     [ebp+var_30], ecx
.text:00412D94                 mov     edi, ebx
.text:00412D96                 jnz     short loc_412E01
.text:00412D98                 cmp     eax, ebx
.text:00412D9A                 jbe     short loc_412DE4
.text:00412D9C                 mov     eax, ecx
.text:00412D9E                 mov     edx, ebx
.text:00412DA0                 div     esi
.text:00412DA2
.text:00412DA2 loc_412DA2:                             ; CODE XREF: sub_412D50+AF↓j
.text:00412DA2                 mov     [ebp+var_30], edx
.text:00412DA5                 lea     ecx, [ebp+var_18]
.text:00412DA8                 test    ecx, ecx
.text:00412DAA                 jz      short loc_412DC5
.text:00412DAC                 mov     [ebp+var_24], 0
.text:00412DB3
.text:00412DB3 loc_412DB3:                             ; CODE XREF: sub_412D50+FE↓j
.text:00412DB3                 mov     eax, [ebp+var_30]
.text:00412DB6                 mov     [ebp+var_28], eax
.text:00412DB9                 mov     edx, [ebp+var_28]
.text:00412DBC                 mov     ecx, [ebp+var_24]
.text:00412DBF                 mov     [ebp+var_18], edx
.text:00412DC2                 mov     [ebp+var_14], ecx
.text:00412DC5
.text:00412DC5 loc_412DC5:                             ; CODE XREF: sub_412D50+5A↑j
.text:00412DC5                                         ; sub_412D50+C8↓j ...
.text:00412DC5                 mov     eax, [ebp+var_1C]
.text:00412DC8                 test    eax, eax
.text:00412DCA                 jz      short loc_412DD6
.text:00412DCC                 neg     [ebp+var_18]
.text:00412DCF                 adc     [ebp+var_14], 0
.text:00412DD3                 neg     [ebp+var_14]
.text:00412DD6
.text:00412DD6 loc_412DD6:                             ; CODE XREF: sub_412D50+7A↑j
.text:00412DD6                 mov     eax, [ebp+var_18]
.text:00412DD9                 mov     edx, [ebp+var_14]
.text:00412DDC                 add     esp, 34h
.text:00412DDF                 pop     ebx
.text:00412DE0                 pop     esi
.text:00412DE1                 pop     edi
.text:00412DE2                 pop     ebp
.text:00412DE3                 retn
.text:00412DE4 ; ---------------------------------------------------------------------------
.text:00412DE4
.text:00412DE4 loc_412DE4:                             ; CODE XREF: sub_412D50+4A↑j
.text:00412DE4                 test    eax, eax
.text:00412DE6                 jnz     short loc_412DF3
.text:00412DE8                 mov     eax, 1
.text:00412DED                 xor     edx, edx
.text:00412DEF                 div     esi
.text:00412DF1                 mov     esi, eax
.text:00412DF3
.text:00412DF3 loc_412DF3:                             ; CODE XREF: sub_412D50+96↑j
.text:00412DF3                 mov     eax, edi
.text:00412DF5                 mov     edx, [ebp+var_2C]
.text:00412DF8                 div     esi
.text:00412DFA                 mov     eax, [ebp+var_30]
.text:00412DFD                 div     esi
.text:00412DFF                 jmp     short loc_412DA2
.text:00412E01 ; ---------------------------------------------------------------------------
.text:00412E01
.text:00412E01 loc_412E01:                             ; CODE XREF: sub_412D50+46↑j
.text:00412E01                 cmp     [ebp+var_2C], ebx
.text:00412E04                 jbe     short loc_412E20
.text:00412E06                 mov     [ebp+var_28], ecx
.text:00412E09
.text:00412E09 loc_412E09:                             ; CODE XREF: sub_412D50+17E↓j
.text:00412E09                 mov     [ebp+var_24], edi
.text:00412E0C                 mov     eax, [ebp+var_28]
.text:00412E0F                 mov     edx, [ebp+var_24]
.text:00412E12                 mov     [ebp+var_18], eax
.text:00412E15                 mov     [ebp+var_14], edx
.text:00412E18                 jmp     short loc_412DC5
.text:00412E18 ; ---------------------------------------------------------------------------
.text:00412E1A                 align 10h
.text:00412E20
.text:00412E20 loc_412E20:                             ; CODE XREF: sub_412D50+B4↑j
.text:00412E20                 bsr     eax, [ebp+var_2C]
.text:00412E24                 mov     ebx, eax
.text:00412E26                 xor     ebx, 1Fh
.text:00412E29                 jnz     short loc_412E53
.text:00412E2B                 cmp     edi, [ebp+var_2C]
.text:00412E2E                 ja      short loc_412E35
.text:00412E30                 cmp     [ebp+var_30], esi
.text:00412E33                 jb      short loc_412E40
.text:00412E35
.text:00412E35 loc_412E35:                             ; CODE XREF: sub_412D50+DE↑j
.text:00412E35                 mov     edx, [ebp+var_30]
.text:00412E38                 sub     edx, esi
.text:00412E3A                 sbb     edi, [ebp+var_2C]
.text:00412E3D                 mov     [ebp+var_30], edx
.text:00412E40
.text:00412E40 loc_412E40:                             ; CODE XREF: sub_412D50+E3↑j
.text:00412E40                 lea     ecx, [ebp+var_18]
.text:00412E43                 test    ecx, ecx
.text:00412E45                 jz      loc_412DC5
.text:00412E4B                 mov     [ebp+var_24], edi
.text:00412E4E                 jmp     loc_412DB3
.text:00412E53 ; ---------------------------------------------------------------------------
.text:00412E53
.text:00412E53 loc_412E53:                             ; CODE XREF: sub_412D50+D9↑j
.text:00412E53                 mov     edx, [ebp+var_2C]
.text:00412E56                 mov     eax, 20h ; ' '
.text:00412E5B                 mov     cl, bl
.text:00412E5D                 sub     eax, ebx
.text:00412E5F                 mov     [ebp+var_34], eax
.text:00412E62                 shl     edx, cl
.text:00412E64                 mov     eax, esi
.text:00412E66                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412E6A                 shr     eax, cl
.text:00412E6C                 mov     cl, bl
.text:00412E6E                 shl     esi, cl
.text:00412E70                 or      edx, eax
.text:00412E72                 mov     eax, [ebp+var_30]
.text:00412E75                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412E79                 mov     [ebp+var_2C], edx
.text:00412E7C                 mov     edx, edi
.text:00412E7E                 shr     edx, cl
.text:00412E80                 mov     cl, bl
.text:00412E82                 shl     edi, cl
.text:00412E84                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412E88                 shr     eax, cl
.text:00412E8A                 or      edi, eax
.text:00412E8C                 mov     eax, edi
.text:00412E8E                 mov     cl, bl
.text:00412E90                 div     [ebp+var_2C]
.text:00412E93                 shl     [ebp+var_30], cl
.text:00412E96                 mov     edi, edx
.text:00412E98                 mul     esi
.text:00412E9A                 mov     [ebp+var_3C], eax
.text:00412E9D                 cmp     edx, edi
.text:00412E9F                 ja      short loc_412EDB
.text:00412EA1                 cmp     edx, edi
.text:00412EA3                 jz      short loc_412ED3
.text:00412EA5
.text:00412EA5 loc_412EA5:                             ; CODE XREF: sub_412D50+189↓j
.text:00412EA5                                         ; sub_412D50+196↓j
.text:00412EA5                 lea     eax, [ebp+var_18]
.text:00412EA8                 test    eax, eax
.text:00412EAA                 jz      loc_412DC5
.text:00412EB0                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412EB4                 mov     eax, [ebp+var_30]
.text:00412EB7                 sub     eax, [ebp+var_3C]
.text:00412EBA                 sbb     edi, edx
.text:00412EBC                 mov     [ebp+var_30], eax
.text:00412EBF                 mov     edx, edi
.text:00412EC1                 shl     edx, cl
.text:00412EC3                 mov     cl, bl
.text:00412EC5                 shr     eax, cl
.text:00412EC7                 or      edx, eax
.text:00412EC9                 mov     [ebp+var_28], edx
.text:00412ECC                 shr     edi, cl
.text:00412ECE                 jmp     loc_412E09
.text:00412ED3 ; ---------------------------------------------------------------------------
.text:00412ED3
.text:00412ED3 loc_412ED3:                             ; CODE XREF: sub_412D50+153↑j
.text:00412ED3                 mov     eax, [ebp+var_30]
.text:00412ED6                 cmp     [ebp+var_3C], eax
.text:00412ED9                 jbe     short loc_412EA5
.text:00412EDB
.text:00412EDB loc_412EDB:                             ; CODE XREF: sub_412D50+14F↑j
.text:00412EDB                 mov     ecx, [ebp+var_3C]
.text:00412EDE                 sub     ecx, esi
.text:00412EE0                 sbb     edx, [ebp+var_2C]
.text:00412EE3                 mov     [ebp+var_3C], ecx
.text:00412EE6                 jmp     short loc_412EA5
.text:00412EE8 ; ---------------------------------------------------------------------------
.text:00412EE8
.text:00412EE8 loc_412EE8:                             ; CODE XREF: sub_412D50+34↑j
.text:00412EE8                 neg     eax
.text:00412EEA                 adc     edx, 0
.text:00412EED                 neg     edx
.text:00412EEF                 jmp     loc_412D8A
.text:00412EF4 ; ---------------------------------------------------------------------------
.text:00412EF4
.text:00412EF4 loc_412EF4:                             ; CODE XREF: sub_412D50+2C↑j
.text:00412EF4                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:00412EFB                 neg     ecx
.text:00412EFD                 adc     ebx, 0
.text:00412F00                 neg     ebx
.text:00412F02                 jmp     loc_412D82
.text:00412F02 sub_412D50      endp
.text:00412F02
.text:00412F02 ; ---------------------------------------------------------------------------
.text:00412F07                 align 10h
.text:00412F10
.text:00412F10 ; =============== S U B R O U T I N E =======================================
.text:00412F10
.text:00412F10 ; Attributes: bp-based frame
.text:00412F10
.text:00412F10 sub_412F10      proc near               ; CODE XREF: sub_4094F0+58↑p
.text:00412F10                                         ; sub_4094F0+AA↑p
.text:00412F10
.text:00412F10 var_2C          = dword ptr -2Ch
.text:00412F10 var_28          = dword ptr -28h
.text:00412F10 var_24          = dword ptr -24h
.text:00412F10 var_20          = dword ptr -20h
.text:00412F10 var_1C          = dword ptr -1Ch
.text:00412F10 var_14          = dword ptr -14h
.text:00412F10 arg_0           = dword ptr  8
.text:00412F10 arg_4           = dword ptr  0Ch
.text:00412F10 arg_8           = dword ptr  10h
.text:00412F10 arg_C           = dword ptr  14h
.text:00412F10
.text:00412F10                 push    ebp
.text:00412F11                 mov     ebp, esp
.text:00412F13                 push    edi
.text:00412F14                 push    esi
.text:00412F15                 push    ebx
.text:00412F16                 sub     esp, 24h
.text:00412F19                 mov     ebx, [ebp+arg_4]
.text:00412F1C                 mov     [ebp+var_20], 0
.text:00412F23                 mov     ecx, [ebp+arg_0]
.text:00412F26                 mov     eax, [ebp+arg_8]
.text:00412F29                 mov     [ebp+var_1C], 0
.text:00412F30                 test    ebx, ebx
.text:00412F32                 mov     edx, [ebp+arg_C]
.text:00412F35                 mov     [ebp+var_14], 0
.text:00412F3C                 js      loc_413050
.text:00412F42
.text:00412F42 loc_412F42:                             ; CODE XREF: sub_412F10+14E↓j
.text:00412F42                 test    edx, edx
.text:00412F44                 js      loc_413040
.text:00412F4A
.text:00412F4A loc_412F4A:                             ; CODE XREF: sub_412F10+13A↓j
.text:00412F4A                 mov     [ebp+var_24], ecx
.text:00412F4D                 test    edx, edx
.text:00412F4F                 mov     esi, eax
.text:00412F51                 jnz     short loc_412FA6
.text:00412F53                 cmp     eax, ebx
.text:00412F55                 jbe     short loc_412F84
.text:00412F57                 mov     eax, ecx
.text:00412F59                 mov     edx, ebx
.text:00412F5B                 div     esi
.text:00412F5D                 mov     edi, eax
.text:00412F5F                 nop
.text:00412F60
.text:00412F60 loc_412F60:                             ; CODE XREF: sub_412F10+9C↓j
.text:00412F60                                         ; sub_412F10+B4↓j ...
.text:00412F60                 xor     ecx, ecx
.text:00412F62
.text:00412F62 loc_412F62:                             ; CODE XREF: sub_412F10+94↓j
.text:00412F62                 mov     [ebp+var_1C], ecx
.text:00412F65                 mov     ecx, [ebp+var_14]
.text:00412F68                 mov     [ebp+var_20], edi
.text:00412F6B                 mov     eax, [ebp+var_20]
.text:00412F6E                 mov     edx, [ebp+var_1C]
.text:00412F71                 test    ecx, ecx
.text:00412F73                 jz      short loc_412F7C
.text:00412F75                 neg     eax
.text:00412F77                 adc     edx, 0
.text:00412F7A                 neg     edx
.text:00412F7C
.text:00412F7C loc_412F7C:                             ; CODE XREF: sub_412F10+63↑j
.text:00412F7C                 add     esp, 24h
.text:00412F7F                 pop     ebx
.text:00412F80                 pop     esi
.text:00412F81                 pop     edi
.text:00412F82                 pop     ebp
.text:00412F83                 retn
.text:00412F84 ; ---------------------------------------------------------------------------
.text:00412F84
.text:00412F84 loc_412F84:                             ; CODE XREF: sub_412F10+45↑j
.text:00412F84                 test    eax, eax
.text:00412F86                 jnz     short loc_412F95
.text:00412F88                 mov     eax, 1
.text:00412F8D                 xor     ecx, ecx
.text:00412F8F                 xor     edx, edx
.text:00412F91                 div     ecx
.text:00412F93                 mov     esi, eax
.text:00412F95
.text:00412F95 loc_412F95:                             ; CODE XREF: sub_412F10+76↑j
.text:00412F95                 mov     eax, ebx
.text:00412F97                 xor     edx, edx
.text:00412F99                 div     esi
.text:00412F9B                 mov     ecx, eax
.text:00412F9D                 mov     eax, [ebp+var_24]
.text:00412FA0                 div     esi
.text:00412FA2                 mov     edi, eax
.text:00412FA4                 jmp     short loc_412F62
.text:00412FA6 ; ---------------------------------------------------------------------------
.text:00412FA6
.text:00412FA6 loc_412FA6:                             ; CODE XREF: sub_412F10+41↑j
.text:00412FA6                 cmp     edx, ebx
.text:00412FA8                 jbe     short loc_412FB0
.text:00412FAA                 xor     edi, edi
.text:00412FAC                 jmp     short loc_412F60
.text:00412FAC ; ---------------------------------------------------------------------------
.text:00412FAE                 align 10h
.text:00412FB0
.text:00412FB0 loc_412FB0:                             ; CODE XREF: sub_412F10+98↑j
.text:00412FB0                 bsr     eax, edx
.text:00412FB3                 xor     eax, 1Fh
.text:00412FB6                 mov     [ebp+var_28], eax
.text:00412FB9                 jnz     short loc_412FD0
.text:00412FBB                 cmp     ebx, edx
.text:00412FBD                 ja      short loc_412FC6
.text:00412FBF                 xor     edi, edi
.text:00412FC1                 cmp     [ebp+var_24], esi
.text:00412FC4                 jb      short loc_412F60
.text:00412FC6
.text:00412FC6 loc_412FC6:                             ; CODE XREF: sub_412F10+AD↑j
.text:00412FC6                 mov     edi, 1
.text:00412FCB                 jmp     short loc_412F60
.text:00412FCB ; ---------------------------------------------------------------------------
.text:00412FCD                 align 10h
.text:00412FD0
.text:00412FD0 loc_412FD0:                             ; CODE XREF: sub_412F10+A9↑j
.text:00412FD0                 mov     eax, [ebp+var_28]
.text:00412FD3                 mov     ecx, 20h ; ' '
.text:00412FD8                 sub     ecx, eax
.text:00412FDA                 mov     [ebp+var_2C], ecx
.text:00412FDD                 mov     eax, esi
.text:00412FDF                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412FE3                 shl     edx, cl
.text:00412FE5                 mov     edi, edx
.text:00412FE7                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412FEB                 mov     edx, ebx
.text:00412FED                 shr     eax, cl
.text:00412FEF                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412FF3                 or      edi, eax
.text:00412FF5                 mov     eax, [ebp+var_24]
.text:00412FF8                 shl     esi, cl
.text:00412FFA                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412FFE                 shr     edx, cl
.text:00413000                 movzx   ecx, byte ptr [ebp+var_28]
.text:00413004                 shl     ebx, cl
.text:00413006                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041300A                 shr     eax, cl
.text:0041300C                 or      ebx, eax
.text:0041300E                 movzx   ecx, byte ptr [ebp+var_28]
.text:00413012                 mov     eax, ebx
.text:00413014                 div     edi
.text:00413016                 mov     ebx, edx
.text:00413018                 mov     edi, eax
.text:0041301A                 shl     [ebp+var_24], cl
.text:0041301D                 mul     esi
.text:0041301F                 cmp     edx, ebx
.text:00413021                 ja      short loc_413034
.text:00413023                 cmp     edx, ebx
.text:00413025                 jnz     loc_412F60
.text:0041302B                 cmp     eax, [ebp+var_24]
.text:0041302E                 jbe     loc_412F60
.text:00413034
.text:00413034 loc_413034:                             ; CODE XREF: sub_412F10+111↑j
.text:00413034                 dec     edi
.text:00413035                 jmp     loc_412F60
.text:00413035 ; ---------------------------------------------------------------------------
.text:0041303A                 align 10h
.text:00413040
.text:00413040 loc_413040:                             ; CODE XREF: sub_412F10+34↑j
.text:00413040                 not     [ebp+var_14]
.text:00413043                 neg     eax
.text:00413045                 adc     edx, 0
.text:00413048                 neg     edx
.text:0041304A                 jmp     loc_412F4A
.text:0041304A ; ---------------------------------------------------------------------------
.text:0041304F                 align 10h
.text:00413050
.text:00413050 loc_413050:                             ; CODE XREF: sub_412F10+2C↑j
.text:00413050                 mov     [ebp+var_14], 0FFFFFFFFh
.text:00413057                 neg     ecx
.text:00413059                 adc     ebx, 0
.text:0041305C                 neg     ebx
.text:0041305E                 jmp     loc_412F42
.text:0041305E sub_412F10      endp
.text:0041305E
.text:0041305E ; ---------------------------------------------------------------------------
.text:00413063                 align 10h
.text:00413070
.text:00413070 ; =============== S U B R O U T I N E =======================================
.text:00413070
.text:00413070 ; Attributes: bp-based frame
.text:00413070
.text:00413070 sub_413070      proc near               ; CODE XREF: sub_40B090+585↑p
.text:00413070                                         ; sub_40B090+5FE↑p ...
.text:00413070
.text:00413070 var_34          = dword ptr -34h
.text:00413070 var_2C          = dword ptr -2Ch
.text:00413070 var_28          = dword ptr -28h
.text:00413070 var_24          = dword ptr -24h
.text:00413070 var_20          = dword ptr -20h
.text:00413070 var_1C          = dword ptr -1Ch
.text:00413070 var_18          = dword ptr -18h
.text:00413070 var_14          = dword ptr -14h
.text:00413070 arg_0           = dword ptr  8
.text:00413070 arg_4           = dword ptr  0Ch
.text:00413070 arg_8           = dword ptr  10h
.text:00413070 arg_C           = dword ptr  14h
.text:00413070
.text:00413070                 push    ebp
.text:00413071                 mov     ebp, esp
.text:00413073                 push    edi
.text:00413074                 push    esi
.text:00413075                 push    ebx
.text:00413076                 sub     esp, 2Ch
.text:00413079                 mov     edx, [ebp+arg_C]
.text:0041307C                 mov     [ebp+var_20], 0
.text:00413083                 mov     ecx, [ebp+arg_0]
.text:00413086                 mov     ebx, [ebp+arg_4]
.text:00413089                 mov     [ebp+var_1C], 0
.text:00413090                 mov     eax, [ebp+arg_8]
.text:00413093                 test    edx, edx
.text:00413095                 mov     [ebp+var_24], edx
.text:00413098                 mov     edi, ebx
.text:0041309A                 mov     esi, eax
.text:0041309C                 mov     [ebp+var_28], ecx
.text:0041309F                 jnz     short loc_413100
.text:004130A1                 cmp     eax, ebx
.text:004130A3                 jbe     short loc_4130E0
.text:004130A5                 mov     eax, ecx
.text:004130A7                 mov     edx, ebx
.text:004130A9                 div     esi
.text:004130AB
.text:004130AB loc_4130AB:                             ; CODE XREF: sub_413070+8B↓j
.text:004130AB                 mov     [ebp+var_28], edx
.text:004130AE                 lea     ecx, [ebp+var_18]
.text:004130B1                 test    ecx, ecx
.text:004130B3                 jz      short loc_4130CE
.text:004130B5                 mov     [ebp+var_1C], 0
.text:004130BC
.text:004130BC loc_4130BC:                             ; CODE XREF: sub_413070+DA↓j
.text:004130BC                 mov     eax, [ebp+var_28]
.text:004130BF                 mov     [ebp+var_20], eax
.text:004130C2                 mov     edx, [ebp+var_20]
.text:004130C5                 mov     ecx, [ebp+var_1C]
.text:004130C8                 mov     [ebp+var_18], edx
.text:004130CB                 mov     [ebp+var_14], ecx
.text:004130CE
.text:004130CE loc_4130CE:                             ; CODE XREF: sub_413070+43↑j
.text:004130CE                                         ; sub_413070+A7↓j ...
.text:004130CE                 mov     eax, [ebp+var_18]
.text:004130D1                 mov     edx, [ebp+var_14]
.text:004130D4                 add     esp, 2Ch
.text:004130D7                 pop     ebx
.text:004130D8                 pop     esi
.text:004130D9                 pop     edi
.text:004130DA                 pop     ebp
.text:004130DB                 retn
.text:004130DB ; ---------------------------------------------------------------------------
.text:004130DC                 align 10h
.text:004130E0
.text:004130E0 loc_4130E0:                             ; CODE XREF: sub_413070+33↑j
.text:004130E0                 test    eax, eax
.text:004130E2                 jnz     short loc_4130EF
.text:004130E4                 mov     eax, 1
.text:004130E9                 xor     edx, edx
.text:004130EB                 div     esi
.text:004130ED                 mov     esi, eax
.text:004130EF
.text:004130EF loc_4130EF:                             ; CODE XREF: sub_413070+72↑j
.text:004130EF                 mov     eax, edi
.text:004130F1                 mov     edx, [ebp+var_24]
.text:004130F4                 div     esi
.text:004130F6                 mov     eax, [ebp+var_28]
.text:004130F9                 div     esi
.text:004130FB                 jmp     short loc_4130AB
.text:004130FB ; ---------------------------------------------------------------------------
.text:004130FD                 align 10h
.text:00413100
.text:00413100 loc_413100:                             ; CODE XREF: sub_413070+2F↑j
.text:00413100                 cmp     [ebp+var_24], ebx
.text:00413103                 jbe     short loc_413120
.text:00413105                 mov     [ebp+var_20], ecx
.text:00413108
.text:00413108 loc_413108:                             ; CODE XREF: sub_413070+15B↓j
.text:00413108                 mov     [ebp+var_1C], edi
.text:0041310B                 mov     eax, [ebp+var_20]
.text:0041310E                 mov     edx, [ebp+var_1C]
.text:00413111                 mov     [ebp+var_18], eax
.text:00413114                 mov     [ebp+var_14], edx
.text:00413117                 jmp     short loc_4130CE
.text:00413117 ; ---------------------------------------------------------------------------
.text:00413119                 align 10h
.text:00413120
.text:00413120 loc_413120:                             ; CODE XREF: sub_413070+93↑j
.text:00413120                 bsr     eax, [ebp+var_24]
.text:00413124                 mov     ebx, eax
.text:00413126                 xor     ebx, 1Fh
.text:00413129                 jnz     short loc_413150
.text:0041312B                 cmp     edi, [ebp+var_24]
.text:0041312E                 ja      short loc_413135
.text:00413130                 cmp     [ebp+var_28], esi
.text:00413133                 jb      short loc_413140
.text:00413135
.text:00413135 loc_413135:                             ; CODE XREF: sub_413070+BE↑j
.text:00413135                 mov     edx, [ebp+var_28]
.text:00413138                 sub     edx, esi
.text:0041313A                 sbb     edi, [ebp+var_24]
.text:0041313D                 mov     [ebp+var_28], edx
.text:00413140
.text:00413140 loc_413140:                             ; CODE XREF: sub_413070+C3↑j
.text:00413140                 lea     ecx, [ebp+var_18]
.text:00413143                 test    ecx, ecx
.text:00413145                 jz      short loc_4130CE
.text:00413147                 mov     [ebp+var_1C], edi
.text:0041314A                 jmp     loc_4130BC
.text:0041314A ; ---------------------------------------------------------------------------
.text:0041314F                 align 10h
.text:00413150
.text:00413150 loc_413150:                             ; CODE XREF: sub_413070+B9↑j
.text:00413150                 mov     edx, [ebp+var_24]
.text:00413153                 mov     eax, 20h ; ' '
.text:00413158                 mov     cl, bl
.text:0041315A                 sub     eax, ebx
.text:0041315C                 mov     [ebp+var_2C], eax
.text:0041315F                 shl     edx, cl
.text:00413161                 mov     eax, esi
.text:00413163                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00413167                 shr     eax, cl
.text:00413169                 mov     cl, bl
.text:0041316B                 shl     esi, cl
.text:0041316D                 or      edx, eax
.text:0041316F                 mov     eax, [ebp+var_28]
.text:00413172                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00413176                 mov     [ebp+var_24], edx
.text:00413179                 mov     edx, edi
.text:0041317B                 shr     edx, cl
.text:0041317D                 mov     cl, bl
.text:0041317F                 shl     edi, cl
.text:00413181                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00413185                 shr     eax, cl
.text:00413187                 or      edi, eax
.text:00413189                 mov     eax, edi
.text:0041318B                 mov     cl, bl
.text:0041318D                 div     [ebp+var_24]
.text:00413190                 shl     [ebp+var_28], cl
.text:00413193                 mov     edi, edx
.text:00413195                 mul     esi
.text:00413197                 mov     [ebp+var_34], eax
.text:0041319A                 cmp     edx, edi
.text:0041319C                 ja      short loc_4131D8
.text:0041319E                 cmp     edx, edi
.text:004131A0                 jz      short loc_4131D0
.text:004131A2
.text:004131A2 loc_4131A2:                             ; CODE XREF: sub_413070+166↓j
.text:004131A2                                         ; sub_413070+173↓j
.text:004131A2                 lea     eax, [ebp+var_18]
.text:004131A5                 test    eax, eax
.text:004131A7                 jz      loc_4130CE
.text:004131AD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004131B1                 mov     eax, [ebp+var_28]
.text:004131B4                 sub     eax, [ebp+var_34]
.text:004131B7                 sbb     edi, edx
.text:004131B9                 mov     [ebp+var_28], eax
.text:004131BC                 mov     edx, edi
.text:004131BE                 shl     edx, cl
.text:004131C0                 mov     cl, bl
.text:004131C2                 shr     eax, cl
.text:004131C4                 or      edx, eax
.text:004131C6                 mov     [ebp+var_20], edx
.text:004131C9                 shr     edi, cl
.text:004131CB                 jmp     loc_413108
.text:004131D0 ; ---------------------------------------------------------------------------
.text:004131D0
.text:004131D0 loc_4131D0:                             ; CODE XREF: sub_413070+130↑j
.text:004131D0                 mov     eax, [ebp+var_28]
.text:004131D3                 cmp     [ebp+var_34], eax
.text:004131D6                 jbe     short loc_4131A2
.text:004131D8
.text:004131D8 loc_4131D8:                             ; CODE XREF: sub_413070+12C↑j
.text:004131D8                 mov     ecx, [ebp+var_34]
.text:004131DB                 sub     ecx, esi
.text:004131DD                 sbb     edx, [ebp+var_24]
.text:004131E0                 mov     [ebp+var_34], ecx
.text:004131E3                 jmp     short loc_4131A2
.text:004131E3 sub_413070      endp
.text:004131E3
.text:004131E3 ; ---------------------------------------------------------------------------
.text:004131E5                 align 10h
.text:004131F0
.text:004131F0 ; =============== S U B R O U T I N E =======================================
.text:004131F0
.text:004131F0 ; Attributes: thunk
.text:004131F0
.text:004131F0 ; int __cdecl isatty(int FileHandle)
.text:004131F0 _isatty         proc near               ; CODE XREF: sub_4014E0+2FF↑p
.text:004131F0                                         ; sub_404880+22↑p ...
.text:004131F0
.text:004131F0 FileHandle      = dword ptr  4
.text:004131F0
.text:004131F0                 jmp     ds:__imp__isatty
.text:004131F0 _isatty         endp
.text:004131F0
.text:004131F0 ; ---------------------------------------------------------------------------
.text:004131F6                 align 10h
.text:00413200
.text:00413200 ; =============== S U B R O U T I N E =======================================
.text:00413200
.text:00413200 ; Attributes: thunk
.text:00413200
.text:00413200 ; int __cdecl close(int FileHandle)
.text:00413200 _close          proc near               ; CODE XREF: sub_4014E0+2B0↑p
.text:00413200                                         ; sub_402D60+16D↑p ...
.text:00413200
.text:00413200 FileHandle      = dword ptr  4
.text:00413200
.text:00413200                 jmp     ds:__imp__close
.text:00413200 _close          endp
.text:00413200
.text:00413200 ; ---------------------------------------------------------------------------
.text:00413206                 align 10h
.text:00413210
.text:00413210 ; =============== S U B R O U T I N E =======================================
.text:00413210
.text:00413210 ; Attributes: thunk
.text:00413210
.text:00413210 ; int open(const char *FileName, int OpenFlag, ...)
.text:00413210 _open           proc near               ; CODE XREF: sub_409470+2E↑p
.text:00413210
.text:00413210 FileName        = dword ptr  4
.text:00413210 OpenFlag        = dword ptr  8
.text:00413210
.text:00413210                 jmp     ds:__imp__open
.text:00413210 _open           endp
.text:00413210
.text:00413210 ; ---------------------------------------------------------------------------
.text:00413216                 align 10h
.text:00413220
.text:00413220 ; =============== S U B R O U T I N E =======================================
.text:00413220
.text:00413220 ; Attributes: thunk
.text:00413220
.text:00413220 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00413220 _read           proc near               ; CODE XREF: sub_409610+2B↑p
.text:00413220
.text:00413220 FileHandle      = dword ptr  4
.text:00413220 DstBuf          = dword ptr  8
.text:00413220 MaxCharCount    = dword ptr  0Ch
.text:00413220
.text:00413220                 jmp     ds:__imp__read
.text:00413220 _read           endp
.text:00413220
.text:00413220 ; ---------------------------------------------------------------------------
.text:00413226                 align 10h
.text:00413230
.text:00413230 ; =============== S U B R O U T I N E =======================================
.text:00413230
.text:00413230 ; Attributes: thunk
.text:00413230
.text:00413230 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00413230 _stricmp        proc near               ; CODE XREF: sub_40B940+46F↑p
.text:00413230                                         ; sub_40D8C0+2E↑p ...
.text:00413230
.text:00413230 String1         = dword ptr  4
.text:00413230 String2         = dword ptr  8
.text:00413230
.text:00413230                 jmp     ds:__imp__stricmp
.text:00413230 _stricmp        endp
.text:00413230
.text:00413230 ; ---------------------------------------------------------------------------
.text:00413236                 align 10h
.text:00413240
.text:00413240 ; =============== S U B R O U T I N E =======================================
.text:00413240
.text:00413240 ; Attributes: thunk
.text:00413240
.text:00413240 ; char *__cdecl strdup(const char *String)
.text:00413240 _strdup         proc near               ; CODE XREF: sub_40D4F0+101↑p
.text:00413240                                         ; .text:0040D75A↑p ...
.text:00413240
.text:00413240 String          = dword ptr  4
.text:00413240
.text:00413240                 jmp     ds:__imp__strdup
.text:00413240 _strdup         endp
.text:00413240
.text:00413240 ; ---------------------------------------------------------------------------
.text:00413246                 align 10h
.text:00413250
.text:00413250 ; =============== S U B R O U T I N E =======================================
.text:00413250
.text:00413250 ; Attributes: thunk
.text:00413250
.text:00413250 ; int __cdecl dup(int FileHandle)
.text:00413250 _dup            proc near               ; CODE XREF: sub_40E400+57↑p
.text:00413250
.text:00413250 FileHandle      = dword ptr  4
.text:00413250
.text:00413250                 jmp     ds:__imp__dup
.text:00413250 _dup            endp
.text:00413250
.text:00413250 ; ---------------------------------------------------------------------------
.text:00413256                 align 10h
.text:00413260
.text:00413260 ; =============== S U B R O U T I N E =======================================
.text:00413260
.text:00413260 ; Attributes: thunk
.text:00413260
.text:00413260 ; int __cdecl getpid()
.text:00413260 _getpid         proc near               ; CODE XREF: sub_410D40+84↑p
.text:00413260                 jmp     ds:__imp__getpid
.text:00413260 _getpid         endp
.text:00413260
.text:00413260 ; ---------------------------------------------------------------------------
.text:00413266                 align 10h
.text:00413270
.text:00413270 ; =============== S U B R O U T I N E =======================================
.text:00413270
.text:00413270 ; Attributes: thunk
.text:00413270
.text:00413270 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00413270 _chmod          proc near               ; CODE XREF: sub_411170+41↑j
.text:00413270
.text:00413270 FileName        = dword ptr  4
.text:00413270 AccessMode      = dword ptr  8
.text:00413270
.text:00413270                 jmp     ds:__imp__chmod
.text:00413270 _chmod          endp
.text:00413270
.text:00413270 ; ---------------------------------------------------------------------------
.text:00413276                 align 10h
.text:00413280
.text:00413280 ; =============== S U B R O U T I N E =======================================
.text:00413280
.text:00413280 ; Attributes: info_from_lumina
.text:00413280
.text:00413280 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00413280 _strtoull       proc near               ; CODE XREF: sub_4084F0+AD↑p
.text:00413280
.text:00413280 C               = dword ptr -3Ch
.text:00413280 Type            = dword ptr -38h
.text:00413280 var_34          = dword ptr -34h
.text:00413280 var_30          = dword ptr -30h
.text:00413280 var_2C          = dword ptr -2Ch
.text:00413280 var_28          = dword ptr -28h
.text:00413280 var_24          = dword ptr -24h
.text:00413280 var_20          = dword ptr -20h
.text:00413280 var_1C          = dword ptr -1Ch
.text:00413280 var_18          = dword ptr -18h
.text:00413280 String          = dword ptr  4
.text:00413280 EndPtr          = dword ptr  8
.text:00413280 Radix           = dword ptr  0Ch
.text:00413280
.text:00413280                 push    ebp
.text:00413281                 push    edi
.text:00413282                 push    esi
.text:00413283                 push    ebx
.text:00413284                 sub     esp, 2Ch
.text:00413287                 mov     edx, [esp+3Ch+EndPtr]
.text:0041328B                 test    edx, edx
.text:0041328D                 jz      short loc_413299
.text:0041328F                 mov     eax, [esp+3Ch+String]
.text:00413293                 mov     ecx, [esp+3Ch+EndPtr]
.text:00413297                 mov     [ecx], eax
.text:00413299
.text:00413299 loc_413299:                             ; CODE XREF: _strtoull+D↑j
.text:00413299                 mov     edx, [esp+3Ch+Radix]
.text:0041329D                 test    edx, edx
.text:0041329F                 js      short loc_4132AF
.text:004132A1                 cmp     [esp+3Ch+Radix], 1
.text:004132A6                 jz      short loc_4132AF
.text:004132A8                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:004132AD                 jle     short loc_4132C6
.text:004132AF
.text:004132AF loc_4132AF:                             ; CODE XREF: _strtoull+1F↑j
.text:004132AF                                         ; _strtoull+26↑j
.text:004132AF                 call    _errno
.text:004132B4                 mov     dword ptr [eax], 21h ; '!'
.text:004132BA
.text:004132BA loc_4132BA:                             ; CODE XREF: _strtoull+FF↓j
.text:004132BA                                         ; _strtoull+109↓j
.text:004132BA                 xor     eax, eax
.text:004132BC                 xor     edx, edx
.text:004132BE
.text:004132BE loc_4132BE:                             ; CODE XREF: _strtoull+244↓j
.text:004132BE                                         ; _strtoull+251↓j ...
.text:004132BE                 add     esp, 2Ch
.text:004132C1                 pop     ebx
.text:004132C2                 pop     esi
.text:004132C3                 pop     edi
.text:004132C4                 pop     ebp
.text:004132C5                 retn
.text:004132C6 ; ---------------------------------------------------------------------------
.text:004132C6
.text:004132C6 loc_4132C6:                             ; CODE XREF: _strtoull+2D↑j
.text:004132C6                 mov     ecx, ds:__mb_cur_max
.text:004132CC                 lea     esi, [esi+0]
.text:004132D0
.text:004132D0 loc_4132D0:                             ; CODE XREF: _strtoull+7E↓j
.text:004132D0                 cmp     dword ptr [ecx], 1
.text:004132D3                 mov     esi, [esp+3Ch+String]
.text:004132D7                 movsx   edx, byte ptr [esi]
.text:004132DA                 jz      loc_4136B2
.text:004132E0                 mov     [esp+3Ch+Type], 8 ; Type
.text:004132E8                 mov     [esp+3Ch+C], edx ; C
.text:004132EB                 call    _isctype
.text:004132F0                 mov     ecx, ds:__mb_cur_max
.text:004132F6
.text:004132F6 loc_4132F6:                             ; CODE XREF: _strtoull+445↓j
.text:004132F6                 test    eax, eax
.text:004132F8                 jz      short loc_413300
.text:004132FA                 inc     [esp+3Ch+String]
.text:004132FE                 jmp     short loc_4132D0
.text:00413300 ; ---------------------------------------------------------------------------
.text:00413300
.text:00413300 loc_413300:                             ; CODE XREF: _strtoull+78↑j
.text:00413300                 mov     esi, [esp+3Ch+String]
.text:00413304                 xor     ebx, ebx
.text:00413306                 movzx   edx, byte ptr [esi]
.text:00413309                 cmp     dl, 2Dh ; '-'
.text:0041330C                 setz    bl
.text:0041330F                 test    ebx, ebx
.text:00413311                 mov     [esp+3Ch+var_20], ebx
.text:00413315                 jnz     loc_4136A2
.text:0041331B                 cmp     dl, 2Bh ; '+'
.text:0041331E                 jz      loc_4136A2
.text:00413324
.text:00413324 loc_413324:                             ; CODE XREF: _strtoull+42D↓j
.text:00413324                 mov     ebp, [esp+3Ch+Radix]
.text:00413328                 test    ebp, ebp
.text:0041332A                 jnz     short loc_41333D
.text:0041332C                 cmp     dl, 30h ; '0'
.text:0041332F                 jz      loc_413679
.text:00413335                 mov     [esp+3Ch+Radix], 0Ah
.text:0041333D
.text:0041333D loc_41333D:                             ; CODE XREF: _strtoull+AA↑j
.text:0041333D                                         ; _strtoull+40F↓j ...
.text:0041333D                 cmp     [esp+3Ch+Radix], 10h
.text:00413342                 jz      loc_41364B
.text:00413348
.text:00413348 loc_413348:                             ; CODE XREF: _strtoull+3CE↓j
.text:00413348                                         ; _strtoull+3E2↓j ...
.text:00413348                 cmp     dword ptr [ecx], 1
.text:0041334B                 movsx   ebx, dl
.text:0041334E                 jz      loc_413633
.text:00413354                 mov     [esp+3Ch+Type], 4 ; Type
.text:0041335C                 mov     [esp+3Ch+C], ebx ; C
.text:0041335F                 call    _isctype
.text:00413364                 mov     esi, [esp+3Ch+String]
.text:00413368                 movzx   edx, byte ptr [esi]
.text:0041336B
.text:0041336B loc_41336B:                             ; CODE XREF: _strtoull+3C6↓j
.text:0041336B                 test    eax, eax
.text:0041336D                 jz      loc_41359C
.text:00413373                 movsx   eax, dl
.text:00413376                 sub     eax, 30h ; '0'
.text:00413379
.text:00413379 loc_413379:                             ; CODE XREF: _strtoull+34B↓j
.text:00413379                                         ; _strtoull+37C↓j ...
.text:00413379                 inc     [esp+3Ch+String]
.text:0041337D                 test    eax, eax
.text:0041337F                 js      loc_4132BA
.text:00413385                 cmp     eax, [esp+3Ch+Radix]
.text:00413389                 jge     loc_4132BA
.text:0041338F                 mov     [esp+3Ch+var_1C], eax
.text:00413393                 mov     edx, eax
.text:00413395                 sar     edx, 1Fh
.text:00413398                 mov     [esp+3Ch+var_18], edx
.text:0041339C                 mov     [esp+3Ch+var_24], 0
.text:004133A4                 lea     esi, [esi+0]
.text:004133AA                 lea     edi, [edi+0]
.text:004133B0
.text:004133B0 loc_4133B0:                             ; CODE XREF: _strtoull+20C↓j
.text:004133B0                 mov     ebp, [esp+3Ch+String]
.text:004133B4                 mov     ebx, ds:__mb_cur_max
.text:004133BA                 movzx   edx, byte ptr [ebp+0]
.text:004133BE                 cmp     dword ptr [ebx], 1
.text:004133C1                 movsx   ecx, dl
.text:004133C4                 jz      loc_413585
.text:004133CA                 mov     [esp+3Ch+C], ecx ; C
.text:004133CD                 mov     [esp+3Ch+Type], 4 ; Type
.text:004133D5                 call    _isctype
.text:004133DA                 mov     ecx, [esp+3Ch+String]
.text:004133DE                 movzx   edx, byte ptr [ecx]
.text:004133E1
.text:004133E1 loc_4133E1:                             ; CODE XREF: _strtoull+317↓j
.text:004133E1                 test    eax, eax
.text:004133E3                 jz      loc_4134F0
.text:004133E9                 movsx   edi, dl
.text:004133EC                 lea     ebp, [edi-30h]
.text:004133EF
.text:004133EF loc_4133EF:                             ; CODE XREF: _strtoull+2A3↓j
.text:004133EF                 test    ebp, ebp
.text:004133F1                 js      loc_41349B
.text:004133F7                 cmp     ebp, [esp+3Ch+Radix]
.text:004133FB                 jge     loc_41349B
.text:00413401                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00413408                 mov     eax, [esp+3Ch+Radix]
.text:0041340C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00413414                 cdq
.text:00413415                 mov     esi, eax
.text:00413417                 mov     [esp+3Ch+var_34], eax
.text:0041341B                 mov     edi, edx
.text:0041341D                 mov     [esp+3Ch+var_30], edx
.text:00413421                 call    sub_412C30
.text:00413426                 add     eax, 1
.text:00413429                 adc     edx, 0
.text:0041342C                 cmp     [esp+3Ch+var_18], edx
.text:00413430                 ja      short loc_413480
.text:00413432                 jb      short loc_41343A
.text:00413434                 cmp     [esp+3Ch+var_1C], eax
.text:00413438                 ja      short loc_413480
.text:0041343A
.text:0041343A loc_41343A:                             ; CODE XREF: _strtoull+1B2↑j
.text:0041343A                 mov     eax, [esp+3Ch+var_1C]
.text:0041343E                 mov     ebx, ebp
.text:00413440                 mul     esi
.text:00413442                 mov     ecx, edx
.text:00413444                 mov     [esp+3Ch+var_2C], eax
.text:00413448                 mov     eax, [esp+3Ch+var_18]
.text:0041344C                 mov     [esp+3Ch+var_28], edx
.text:00413450                 imul    eax, esi
.text:00413453                 mov     esi, [esp+3Ch+var_1C]
.text:00413457                 imul    esi, edi
.text:0041345A                 add     ecx, eax
.text:0041345C                 lea     edi, [esi+ecx]
.text:0041345F                 mov     esi, ebp
.text:00413461                 sar     esi, 1Fh
.text:00413464                 add     ebx, [esp+3Ch+var_2C]
.text:00413468                 mov     [esp+3Ch+var_28], edi
.text:0041346C                 adc     esi, [esp+3Ch+var_28]
.text:00413470                 cmp     esi, [esp+3Ch+var_18]
.text:00413474                 jb      short loc_413480
.text:00413476                 ja      short loc_413491
.text:00413478                 cmp     ebx, [esp+3Ch+var_1C]
.text:0041347C                 jnb     short loc_413491
.text:0041347E                 mov     esi, esi
.text:00413480
.text:00413480 loc_413480:                             ; CODE XREF: _strtoull+1B0↑j
.text:00413480                                         ; _strtoull+1B8↑j ...
.text:00413480                 mov     [esp+3Ch+var_24], 1
.text:00413488
.text:00413488 loc_413488:                             ; CODE XREF: _strtoull+219↓j
.text:00413488                 inc     [esp+3Ch+String]
.text:0041348C                 jmp     loc_4133B0
.text:00413491 ; ---------------------------------------------------------------------------
.text:00413491
.text:00413491 loc_413491:                             ; CODE XREF: _strtoull+1F6↑j
.text:00413491                                         ; _strtoull+1FC↑j
.text:00413491                 mov     [esp+3Ch+var_1C], ebx
.text:00413495                 mov     [esp+3Ch+var_18], esi
.text:00413499                 jmp     short loc_413488
.text:0041349B ; ---------------------------------------------------------------------------
.text:0041349B
.text:0041349B loc_41349B:                             ; CODE XREF: _strtoull+171↑j
.text:0041349B                                         ; _strtoull+17B↑j
.text:0041349B                 mov     eax, [esp+3Ch+EndPtr]
.text:0041349F                 test    eax, eax
.text:004134A1                 jz      short loc_4134AE
.text:004134A3                 mov     ecx, [esp+3Ch+String]
.text:004134A7                 mov     ebp, [esp+3Ch+EndPtr]
.text:004134AB                 mov     [ebp+0], ecx
.text:004134AE
.text:004134AE loc_4134AE:                             ; CODE XREF: _strtoull+221↑j
.text:004134AE                 mov     esi, [esp+3Ch+var_24]
.text:004134B2                 test    esi, esi
.text:004134B4                 jnz     short loc_4134D6
.text:004134B6                 mov     ebx, [esp+3Ch+var_20]
.text:004134BA                 mov     eax, [esp+3Ch+var_1C]
.text:004134BE                 mov     edx, [esp+3Ch+var_18]
.text:004134C2                 test    ebx, ebx
.text:004134C4                 jz      loc_4132BE
.text:004134CA                 neg     eax
.text:004134CC                 adc     edx, 0
.text:004134CF                 neg     edx
.text:004134D1                 jmp     loc_4132BE
.text:004134D6 ; ---------------------------------------------------------------------------
.text:004134D6
.text:004134D6 loc_4134D6:                             ; CODE XREF: _strtoull+234↑j
.text:004134D6                 call    _errno
.text:004134DB                 mov     edx, 0FFFFFFFFh
.text:004134E0                 mov     dword ptr [eax], 22h ; '"'
.text:004134E6                 mov     eax, 0FFFFFFFFh
.text:004134EB                 jmp     loc_4132BE
.text:004134F0 ; ---------------------------------------------------------------------------
.text:004134F0
.text:004134F0 loc_4134F0:                             ; CODE XREF: _strtoull+163↑j
.text:004134F0                 mov     ebp, ds:__mb_cur_max
.text:004134F6                 movsx   ecx, dl
.text:004134F9                 cmp     dword ptr [ebp+0], 1
.text:004134FD                 jz      short loc_413571
.text:004134FF                 mov     [esp+3Ch+Type], 1 ; Type
.text:00413507                 mov     [esp+3Ch+C], ecx ; C
.text:0041350A                 call    _isctype
.text:0041350F                 mov     ebp, [esp+3Ch+String]
.text:00413513                 movzx   edx, byte ptr [ebp+0]
.text:00413517
.text:00413517 loc_413517:                             ; CODE XREF: _strtoull+303↓j
.text:00413517                 test    eax, eax
.text:00413519                 jz      short loc_413528
.text:0041351B                 movsx   eax, dl
.text:0041351E                 sub     eax, 37h ; '7'
.text:00413521
.text:00413521 loc_413521:                             ; CODE XREF: _strtoull+2D4↓j
.text:00413521                                         ; _strtoull+2DB↓j
.text:00413521                 mov     ebp, eax
.text:00413523                 jmp     loc_4133EF
.text:00413528 ; ---------------------------------------------------------------------------
.text:00413528
.text:00413528 loc_413528:                             ; CODE XREF: _strtoull+299↑j
.text:00413528                 mov     ecx, ds:__mb_cur_max
.text:0041352E                 movsx   edx, dl
.text:00413531                 cmp     dword ptr [ecx], 1
.text:00413534                 jz      short loc_41355D
.text:00413536                 mov     [esp+3Ch+Type], 2 ; Type
.text:0041353E                 mov     [esp+3Ch+C], edx ; C
.text:00413541                 call    _isctype
.text:00413546
.text:00413546 loc_413546:                             ; CODE XREF: _strtoull+2EF↓j
.text:00413546                 test    eax, eax
.text:00413548                 jz      short loc_413556
.text:0041354A                 mov     edx, [esp+3Ch+String]
.text:0041354E                 movsx   eax, byte ptr [edx]
.text:00413551                 sub     eax, 57h ; 'W'
.text:00413554                 jmp     short loc_413521
.text:00413556 ; ---------------------------------------------------------------------------
.text:00413556
.text:00413556 loc_413556:                             ; CODE XREF: _strtoull+2C8↑j
.text:00413556                 mov     eax, 0FFFFFFFFh
.text:0041355B                 jmp     short loc_413521
.text:0041355D ; ---------------------------------------------------------------------------
.text:0041355D
.text:0041355D loc_41355D:                             ; CODE XREF: _strtoull+2B4↑j
.text:0041355D                 mov     edi, ds:_pctype
.text:00413563                 mov     ebx, [edi]
.text:00413565                 movzx   esi, word ptr [ebx+edx*2]
.text:00413569                 and     esi, 2
.text:0041356C                 movzx   eax, si
.text:0041356F                 jmp     short loc_413546
.text:00413571 ; ---------------------------------------------------------------------------
.text:00413571
.text:00413571 loc_413571:                             ; CODE XREF: _strtoull+27D↑j
.text:00413571                 mov     edi, ds:_pctype
.text:00413577                 mov     ebx, [edi]
.text:00413579                 movzx   esi, word ptr [ebx+ecx*2]
.text:0041357D                 and     esi, 1
.text:00413580                 movzx   eax, si
.text:00413583                 jmp     short loc_413517
.text:00413585 ; ---------------------------------------------------------------------------
.text:00413585
.text:00413585 loc_413585:                             ; CODE XREF: _strtoull+144↑j
.text:00413585                 mov     ebx, ds:_pctype
.text:0041358B                 mov     esi, [ebx]
.text:0041358D                 movzx   edi, word ptr [esi+ecx*2]
.text:00413591                 and     edi, 4
.text:00413594                 movzx   eax, di
.text:00413597                 jmp     loc_4133E1
.text:0041359C ; ---------------------------------------------------------------------------
.text:0041359C
.text:0041359C loc_41359C:                             ; CODE XREF: _strtoull+ED↑j
.text:0041359C                 mov     ebx, ds:__mb_cur_max
.text:004135A2                 movsx   ecx, dl
.text:004135A5                 cmp     dword ptr [ebx], 1
.text:004135A8                 jz      short loc_41361F
.text:004135AA                 mov     [esp+3Ch+C], ecx ; C
.text:004135AD                 mov     [esp+3Ch+Type], 1 ; Type
.text:004135B5                 call    _isctype
.text:004135BA                 mov     ecx, [esp+3Ch+String]
.text:004135BE                 movzx   edx, byte ptr [ecx]
.text:004135C1
.text:004135C1 loc_4135C1:                             ; CODE XREF: _strtoull+3B1↓j
.text:004135C1                 test    eax, eax
.text:004135C3                 jz      short loc_4135D0
.text:004135C5                 movsx   eax, dl
.text:004135C8                 sub     eax, 37h ; '7'
.text:004135CB                 jmp     loc_413379
.text:004135D0 ; ---------------------------------------------------------------------------
.text:004135D0
.text:004135D0 loc_4135D0:                             ; CODE XREF: _strtoull+343↑j
.text:004135D0                 mov     ebx, ds:__mb_cur_max
.text:004135D6                 movsx   edx, dl
.text:004135D9                 cmp     dword ptr [ebx], 1
.text:004135DC                 jz      short loc_41360B
.text:004135DE                 mov     [esp+3Ch+Type], 2 ; Type
.text:004135E6                 mov     [esp+3Ch+C], edx ; C
.text:004135E9                 call    _isctype
.text:004135EE
.text:004135EE loc_4135EE:                             ; CODE XREF: _strtoull+39D↓j
.text:004135EE                 test    eax, eax
.text:004135F0                 jz      short loc_413601
.text:004135F2                 mov     ecx, [esp+3Ch+String]
.text:004135F6                 movsx   eax, byte ptr [ecx]
.text:004135F9                 sub     eax, 57h ; 'W'
.text:004135FC                 jmp     loc_413379
.text:00413601 ; ---------------------------------------------------------------------------
.text:00413601
.text:00413601 loc_413601:                             ; CODE XREF: _strtoull+370↑j
.text:00413601                 mov     eax, 0FFFFFFFFh
.text:00413606                 jmp     loc_413379
.text:0041360B ; ---------------------------------------------------------------------------
.text:0041360B
.text:0041360B loc_41360B:                             ; CODE XREF: _strtoull+35C↑j
.text:0041360B                 mov     esi, ds:_pctype
.text:00413611                 mov     edi, [esi]
.text:00413613                 movzx   ebp, word ptr [edi+edx*2]
.text:00413617                 and     ebp, 2
.text:0041361A                 movzx   eax, bp
.text:0041361D                 jmp     short loc_4135EE
.text:0041361F ; ---------------------------------------------------------------------------
.text:0041361F
.text:0041361F loc_41361F:                             ; CODE XREF: _strtoull+328↑j
.text:0041361F                 mov     esi, ds:_pctype
.text:00413625                 mov     edi, [esi]
.text:00413627                 movzx   ebp, word ptr [edi+ecx*2]
.text:0041362B                 and     ebp, 1
.text:0041362E                 movzx   eax, bp
.text:00413631                 jmp     short loc_4135C1
.text:00413633 ; ---------------------------------------------------------------------------
.text:00413633
.text:00413633 loc_413633:                             ; CODE XREF: _strtoull+CE↑j
.text:00413633                 mov     edi, ds:_pctype
.text:00413639                 mov     ebp, [edi]
.text:0041363B                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00413640                 and     ecx, 4
.text:00413643                 movzx   eax, cx
.text:00413646                 jmp     loc_41336B
.text:0041364B ; ---------------------------------------------------------------------------
.text:0041364B
.text:0041364B loc_41364B:                             ; CODE XREF: _strtoull+C2↑j
.text:0041364B                 cmp     dl, 30h ; '0'
.text:0041364E                 jnz     loc_413348
.text:00413654                 mov     esi, [esp+3Ch+String]
.text:00413658                 movzx   eax, byte ptr [esi+1]
.text:0041365C                 cmp     al, 58h ; 'X'
.text:0041365E                 jz      short loc_413668
.text:00413660                 cmp     al, 78h ; 'x'
.text:00413662                 jnz     loc_413348
.text:00413668
.text:00413668 loc_413668:                             ; CODE XREF: _strtoull+3DE↑j
.text:00413668                 add     [esp+3Ch+String], 2
.text:0041366D                 mov     ebx, [esp+3Ch+String]
.text:00413671                 movzx   edx, byte ptr [ebx]
.text:00413674                 jmp     loc_413348
.text:00413679 ; ---------------------------------------------------------------------------
.text:00413679
.text:00413679 loc_413679:                             ; CODE XREF: _strtoull+AF↑j
.text:00413679                 mov     edi, [esp+3Ch+String]
.text:0041367D                 movzx   eax, byte ptr [edi+1]
.text:00413681                 cmp     al, 58h ; 'X'
.text:00413683                 jz      short loc_413695
.text:00413685                 mov     [esp+3Ch+Radix], 8
.text:0041368D                 cmp     al, 78h ; 'x'
.text:0041368F                 jnz     loc_41333D
.text:00413695
.text:00413695 loc_413695:                             ; CODE XREF: _strtoull+403↑j
.text:00413695                 mov     [esp+3Ch+Radix], 10h
.text:0041369D                 jmp     loc_41333D
.text:004136A2 ; ---------------------------------------------------------------------------
.text:004136A2
.text:004136A2 loc_4136A2:                             ; CODE XREF: _strtoull+95↑j
.text:004136A2                                         ; _strtoull+9E↑j
.text:004136A2                 inc     [esp+3Ch+String]
.text:004136A6                 mov     eax, [esp+3Ch+String]
.text:004136AA                 movzx   edx, byte ptr [eax]
.text:004136AD                 jmp     loc_413324
.text:004136B2 ; ---------------------------------------------------------------------------
.text:004136B2
.text:004136B2 loc_4136B2:                             ; CODE XREF: _strtoull+5A↑j
.text:004136B2                 mov     ebp, ds:_pctype
.text:004136B8                 mov     edi, [ebp+0]
.text:004136BB                 movzx   ebx, word ptr [edi+edx*2]
.text:004136BF                 and     ebx, 8
.text:004136C2                 movzx   eax, bx
.text:004136C5                 jmp     loc_4132F6
.text:004136C5 _strtoull       endp
.text:004136C5
.text:004136C5 ; ---------------------------------------------------------------------------
.text:004136CA                 align 10h
.text:004136D0                 jmp     ds:__set_app_type
.text:004136D0 ; ---------------------------------------------------------------------------
.text:004136D6                 align 10h
.text:004136E0
.text:004136E0 ; =============== S U B R O U T I N E =======================================
.text:004136E0
.text:004136E0 ; Attributes: thunk
.text:004136E0
.text:004136E0 ; void __cdecl cexit()
.text:004136E0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004136E0                 jmp     ds:__imp__cexit
.text:004136E0 _cexit          endp
.text:004136E0
.text:004136E0 ; ---------------------------------------------------------------------------
.text:004136E6                 align 10h
.text:004136F0
.text:004136F0 ; =============== S U B R O U T I N E =======================================
.text:004136F0
.text:004136F0 ; Attributes: thunk
.text:004136F0
.text:004136F0 ; char ***__cdecl _p__environ()
.text:004136F0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004136F0                 jmp     ds:__imp___p__environ
.text:004136F0 __p__environ    endp
.text:004136F0
.text:004136F0 ; ---------------------------------------------------------------------------
.text:004136F6                 align 10h
.text:00413700
.text:00413700 ; =============== S U B R O U T I N E =======================================
.text:00413700
.text:00413700 ; Attributes: thunk
.text:00413700
.text:00413700 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00413700 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00413700                                         ; TopLevelExceptionFilter+88↑p ...
.text:00413700
.text:00413700 Signal          = dword ptr  4
.text:00413700 Function        = dword ptr  8
.text:00413700
.text:00413700                 jmp     ds:__imp_signal
.text:00413700 signal          endp
.text:00413700
.text:00413700 ; ---------------------------------------------------------------------------
.text:00413706                 align 10h
.text:00413710
.text:00413710 ; =============== S U B R O U T I N E =======================================
.text:00413710
.text:00413710 ; Attributes: thunk
.text:00413710
.text:00413710 ; int *__cdecl _p__fmode()
.text:00413710 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00413710                 jmp     ds:__imp___p__fmode
.text:00413710 __p__fmode      endp
.text:00413710
.text:00413710 ; ---------------------------------------------------------------------------
.text:00413716                 align 10h
.text:00413720
.text:00413720 ; =============== S U B R O U T I N E =======================================
.text:00413720
.text:00413720 ; Attributes: thunk
.text:00413720
.text:00413720 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00413720 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00413720                                         ; sub_401080+90↑p ...
.text:00413720
.text:00413720 FileHandle      = dword ptr  4
.text:00413720 Mode            = dword ptr  8
.text:00413720
.text:00413720                 jmp     ds:__imp__setmode
.text:00413720 _setmode        endp
.text:00413720
.text:00413720 ; ---------------------------------------------------------------------------
.text:00413726                 align 10h
.text:00413730
.text:00413730 ; =============== S U B R O U T I N E =======================================
.text:00413730
.text:00413730 ; Attributes: thunk
.text:00413730
.text:00413730 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00413730                 jmp     ds:__imp___getmainargs
.text:00413730 __getmainargs   endp
.text:00413730
.text:00413730 ; ---------------------------------------------------------------------------
.text:00413736                 align 10h
.text:00413740
.text:00413740 ; =============== S U B R O U T I N E =======================================
.text:00413740
.text:00413740 ; Attributes: thunk
.text:00413740
.text:00413740 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00413740 setlocale       proc near               ; CODE XREF: sub_4014E0+68↑p
.text:00413740                                         ; sub_407C40+16↑p ...
.text:00413740
.text:00413740 Category        = dword ptr  4
.text:00413740 Locale          = dword ptr  8
.text:00413740
.text:00413740                 jmp     ds:__imp_setlocale
.text:00413740 setlocale       endp
.text:00413740
.text:00413740 ; ---------------------------------------------------------------------------
.text:00413746                 align 10h
.text:00413750
.text:00413750 ; =============== S U B R O U T I N E =======================================
.text:00413750
.text:00413750 ; Attributes: thunk
.text:00413750
.text:00413750 ; int __cdecl fflush(FILE *Stream)
.text:00413750 fflush          proc near               ; CODE XREF: sub_402620+FC↑p
.text:00413750                                         ; sub_40AB80+19↑p ...
.text:00413750
.text:00413750 Stream          = dword ptr  4
.text:00413750
.text:00413750                 jmp     ds:__imp_fflush
.text:00413750 fflush          endp
.text:00413750
.text:00413750 ; ---------------------------------------------------------------------------
.text:00413756                 align 10h
.text:00413760
.text:00413760 ; =============== S U B R O U T I N E =======================================
.text:00413760
.text:00413760 ; Attributes: thunk
.text:00413760
.text:00413760 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00413760 memcpy          proc near               ; CODE XREF: sub_405540+156↑p
.text:00413760                                         ; sub_405910+105↑p ...
.text:00413760
.text:00413760 Src             = dword ptr  8
.text:00413760 Size            = dword ptr  0Ch
.text:00413760
.text:00413760                 jmp     ds:__imp_memcpy
.text:00413760 memcpy          endp
.text:00413760
.text:00413760 ; ---------------------------------------------------------------------------
.text:00413766                 align 10h
.text:00413770
.text:00413770 ; =============== S U B R O U T I N E =======================================
.text:00413770
.text:00413770 ; Attributes: thunk
.text:00413770
.text:00413770 ; void __cdecl free(void *Block)
.text:00413770 free            proc near               ; CODE XREF: sub_405540+17F↑p
.text:00413770                                         ; sub_405540+265↑p ...
.text:00413770
.text:00413770 Block           = dword ptr  4
.text:00413770
.text:00413770                 jmp     ds:__imp_free
.text:00413770 free            endp
.text:00413770
.text:00413770 ; ---------------------------------------------------------------------------
.text:00413776                 align 10h
.text:00413780
.text:00413780 ; =============== S U B R O U T I N E =======================================
.text:00413780
.text:00413780 ; Attributes: thunk
.text:00413780
.text:00413780 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:00413780 memchr          proc near               ; CODE XREF: sub_405540+C3↑p
.text:00413780                                         ; sub_405540+345↑p ...
.text:00413780
.text:00413780 Buf             = dword ptr  4
.text:00413780 Val             = dword ptr  8
.text:00413780 MaxCount        = dword ptr  0Ch
.text:00413780
.text:00413780                 jmp     ds:__imp_memchr
.text:00413780 memchr          endp
.text:00413780
.text:00413780 ; ---------------------------------------------------------------------------
.text:00413786                 align 10h
.text:00413790
.text:00413790 ; =============== S U B R O U T I N E =======================================
.text:00413790
.text:00413790 ; Attributes: thunk
.text:00413790
.text:00413790 ; int *__cdecl errno()
.text:00413790 _errno          proc near               ; CODE XREF: sub_4014E0+2B9↑p
.text:00413790                                         ; sub_402620+153↑p ...
.text:00413790                 jmp     ds:__imp__errno
.text:00413790 _errno          endp
.text:00413790
.text:00413790 ; ---------------------------------------------------------------------------
.text:00413796                 align 10h
.text:004137A0
.text:004137A0 ; =============== S U B R O U T I N E =======================================
.text:004137A0
.text:004137A0 ; Attributes: thunk
.text:004137A0
.text:004137A0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:004137A0 fwrite          proc near               ; CODE XREF: sub_403E50+9E↑p
.text:004137A0                                         ; sub_404880+160↑p ...
.text:004137A0
.text:004137A0 Buffer          = dword ptr  4
.text:004137A0 ElementSize     = dword ptr  8
.text:004137A0 ElementCount    = dword ptr  0Ch
.text:004137A0 Stream          = dword ptr  10h
.text:004137A0
.text:004137A0                 jmp     ds:__imp_fwrite
.text:004137A0 fwrite          endp
.text:004137A0
.text:004137A0 ; ---------------------------------------------------------------------------
.text:004137A6                 align 10h
.text:004137B0
.text:004137B0 ; =============== S U B R O U T I N E =======================================
.text:004137B0
.text:004137B0 ; Attributes: noreturn thunk
.text:004137B0
.text:004137B0 _assert         proc near               ; CODE XREF: sub_404120:loc_4044E4↑p
.text:004137B0                                         ; sub_405540+3C9↑p ...
.text:004137B0                 jmp     ds:__imp__assert
.text:004137B0 _assert         endp
.text:004137B0
.text:004137B0 ; ---------------------------------------------------------------------------
.text:004137B6                 align 10h
.text:004137C0
.text:004137C0 ; =============== S U B R O U T I N E =======================================
.text:004137C0
.text:004137C0 ; Attributes: noreturn thunk
.text:004137C0
.text:004137C0 ; void __cdecl __noreturn exit(int Code)
.text:004137C0 exit            proc near               ; CODE XREF: sub_4014E0+2A4↑p
.text:004137C0                                         ; sub_402370+3B↑p ...
.text:004137C0
.text:004137C0 Code            = dword ptr  4
.text:004137C0
.text:004137C0                 jmp     ds:__imp_exit
.text:004137C0 exit            endp
.text:004137C0
.text:004137C0 ; ---------------------------------------------------------------------------
.text:004137C6                 align 10h
.text:004137D0
.text:004137D0 ; =============== S U B R O U T I N E =======================================
.text:004137D0
.text:004137D0 ; Attributes: thunk
.text:004137D0
.text:004137D0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004137D0 fputs           proc near               ; CODE XREF: sub_402370+99↑p
.text:004137D0                                         ; sub_402370+BB↑p ...
.text:004137D0
.text:004137D0 Buffer          = dword ptr  4
.text:004137D0 Stream          = dword ptr  8
.text:004137D0
.text:004137D0                 jmp     ds:__imp_fputs
.text:004137D0 fputs           endp
.text:004137D0
.text:004137D0 ; ---------------------------------------------------------------------------
.text:004137D6                 align 10h
.text:004137E0
.text:004137E0 ; =============== S U B R O U T I N E =======================================
.text:004137E0
.text:004137E0 ; Attributes: thunk
.text:004137E0
.text:004137E0 ; int printf(const char *const Format, ...)
.text:004137E0 printf          proc near               ; CODE XREF: sub_402370+5A↑p
.text:004137E0                                         ; sub_402370+77↑p ...
.text:004137E0
.text:004137E0 Format          = dword ptr  4
.text:004137E0
.text:004137E0                 jmp     ds:__imp_printf
.text:004137E0 printf          endp
.text:004137E0
.text:004137E0 ; ---------------------------------------------------------------------------
.text:004137E6                 align 10h
.text:004137F0
.text:004137F0 ; =============== S U B R O U T I N E =======================================
.text:004137F0
.text:004137F0 ; Attributes: thunk
.text:004137F0
.text:004137F0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004137F0 fprintf         proc near               ; CODE XREF: sub_402370+33↑p
.text:004137F0                                         ; sub_403270+1F3↑p ...
.text:004137F0
.text:004137F0 Stream          = dword ptr  4
.text:004137F0 Format          = dword ptr  8
.text:004137F0
.text:004137F0                 jmp     ds:__imp_fprintf
.text:004137F0 fprintf         endp
.text:004137F0
.text:004137F0 ; ---------------------------------------------------------------------------
.text:004137F6                 align 10h
.text:00413800
.text:00413800 ; =============== S U B R O U T I N E =======================================
.text:00413800
.text:00413800 ; Attributes: thunk
.text:00413800
.text:00413800 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:00413800 _lseeki64       proc near               ; CODE XREF: sub_402620+46B↑p
.text:00413800                                         ; sub_404120+39B↑p ...
.text:00413800
.text:00413800 FileHandle      = dword ptr  4
.text:00413800 Offset          = qword ptr  8
.text:00413800 Origin          = dword ptr  10h
.text:00413800
.text:00413800                 jmp     ds:__imp__lseeki64
.text:00413800 _lseeki64       endp
.text:00413800
.text:00413800 ; ---------------------------------------------------------------------------
.text:00413806                 align 10h
.text:00413810
.text:00413810 ; =============== S U B R O U T I N E =======================================
.text:00413810
.text:00413810 ; Attributes: thunk
.text:00413810
.text:00413810 ; size_t __cdecl strlen(const char *Str)
.text:00413810 strlen          proc near               ; CODE XREF: sub_405FD0+2A9↑p
.text:00413810                                         ; sub_405FD0+346↑p ...
.text:00413810
.text:00413810 Str             = dword ptr  4
.text:00413810
.text:00413810                 jmp     ds:__imp_strlen
.text:00413810 strlen          endp
.text:00413810
.text:00413810 ; ---------------------------------------------------------------------------
.text:00413816                 align 10h
.text:00413820
.text:00413820 ; =============== S U B R O U T I N E =======================================
.text:00413820
.text:00413820 ; Attributes: thunk
.text:00413820
.text:00413820 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00413820 strncmp         proc near               ; CODE XREF: sub_405FD0+23F↑p
.text:00413820                                         ; sub_405FD0+699↑p ...
.text:00413820
.text:00413820 Str1            = dword ptr  4
.text:00413820 Str2            = dword ptr  8
.text:00413820 MaxCount        = dword ptr  0Ch
.text:00413820
.text:00413820                 jmp     ds:__imp_strncmp
.text:00413820 strncmp         endp
.text:00413820
.text:00413820 ; ---------------------------------------------------------------------------
.text:00413826                 align 10h
.text:00413830
.text:00413830 ; =============== S U B R O U T I N E =======================================
.text:00413830
.text:00413830 ; Attributes: thunk
.text:00413830
.text:00413830 ; char *__cdecl getenv(const char *VarName)
.text:00413830 getenv          proc near               ; CODE XREF: sub_405FD0+B57↑p
.text:00413830                                         ; .text:004091A3↑p ...
.text:00413830
.text:00413830 VarName         = dword ptr  4
.text:00413830
.text:00413830                 jmp     ds:__imp_getenv
.text:00413830 getenv          endp
.text:00413830
.text:00413830 ; ---------------------------------------------------------------------------
.text:00413836                 align 10h
.text:00413840
.text:00413840 ; =============== S U B R O U T I N E =======================================
.text:00413840
.text:00413840 ; Attributes: thunk
.text:00413840
.text:00413840 ; char *__cdecl strchr(const char *Str, int Val)
.text:00413840 strchr          proc near               ; CODE XREF: sub_405FD0+469↑p
.text:00413840                                         ; sub_405FD0+53A↑p ...
.text:00413840
.text:00413840 Str             = dword ptr  4
.text:00413840 Val             = dword ptr  8
.text:00413840
.text:00413840                 jmp     ds:__imp_strchr
.text:00413840 strchr          endp
.text:00413840
.text:00413840 ; ---------------------------------------------------------------------------
.text:00413846                 align 10h
.text:00413850
.text:00413850 ; =============== S U B R O U T I N E =======================================
.text:00413850
.text:00413850 ; Attributes: thunk
.text:00413850
.text:00413850 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00413850 _flsbuf         proc near               ; CODE XREF: .text:00407089↑j
.text:00413850                                         ; sub_4070C0+1C3↑p ...
.text:00413850
.text:00413850 File            = dword ptr  8
.text:00413850
.text:00413850                 jmp     ds:__imp__flsbuf
.text:00413850 _flsbuf         endp
.text:00413850
.text:00413850 ; ---------------------------------------------------------------------------
.text:00413856                 align 10h
.text:00413860
.text:00413860 ; =============== S U B R O U T I N E =======================================
.text:00413860
.text:00413860 ; Attributes: thunk
.text:00413860
.text:00413860 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00413860 memset          proc near               ; CODE XREF: .text:004074B6↑p
.text:00413860
.text:00413860 Val             = dword ptr  8
.text:00413860 Size            = dword ptr  0Ch
.text:00413860
.text:00413860                 jmp     ds:__imp_memset
.text:00413860 memset          endp
.text:00413860
.text:00413860 ; ---------------------------------------------------------------------------
.text:00413866                 align 10h
.text:00413870
.text:00413870 ; =============== S U B R O U T I N E =======================================
.text:00413870
.text:00413870 ; Attributes: thunk
.text:00413870
.text:00413870 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00413870 calloc          proc near               ; CODE XREF: .text:004074F3↑p
.text:00413870                                         ; sub_40D4F0+AC↑p
.text:00413870
.text:00413870 Count           = dword ptr  4
.text:00413870 Size            = dword ptr  8
.text:00413870
.text:00413870                 jmp     ds:__imp_calloc
.text:00413870 calloc          endp
.text:00413870
.text:00413870 ; ---------------------------------------------------------------------------
.text:00413876                 align 10h
.text:00413880
.text:00413880 ; =============== S U B R O U T I N E =======================================
.text:00413880
.text:00413880 ; Attributes: thunk
.text:00413880
.text:00413880 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00413880 realloc         proc near               ; CODE XREF: .text:004073F0↑p
.text:00413880                                         ; sub_407420+16↑p ...
.text:00413880
.text:00413880 Block           = dword ptr  4
.text:00413880 Size            = dword ptr  8
.text:00413880
.text:00413880                 jmp     ds:__imp_realloc
.text:00413880 realloc         endp
.text:00413880
.text:00413880 ; ---------------------------------------------------------------------------
.text:00413886                 align 10h
.text:00413890
.text:00413890 ; =============== S U B R O U T I N E =======================================
.text:00413890
.text:00413890 ; Attributes: thunk
.text:00413890
.text:00413890 ; void *__cdecl malloc(size_t Size)
.text:00413890 malloc          proc near               ; CODE XREF: sub_407350+24↑p
.text:00413890                                         ; sub_407390+E↑p ...
.text:00413890
.text:00413890 Size            = dword ptr  4
.text:00413890
.text:00413890                 jmp     ds:__imp_malloc
.text:00413890 malloc          endp
.text:00413890
.text:00413890 ; ---------------------------------------------------------------------------
.text:00413896                 align 10h
.text:004138A0
.text:004138A0 ; =============== S U B R O U T I N E =======================================
.text:004138A0
.text:004138A0 ; Attributes: thunk
.text:004138A0
.text:004138A0 ; int __cdecl fclose(FILE *Stream)
.text:004138A0 fclose          proc near               ; CODE XREF: sub_407650+27↑p
.text:004138A0                                         ; .text:004105CE↑p
.text:004138A0
.text:004138A0 Stream          = dword ptr  4
.text:004138A0
.text:004138A0                 jmp     ds:__imp_fclose
.text:004138A0 fclose          endp
.text:004138A0
.text:004138A0 ; ---------------------------------------------------------------------------
.text:004138A6                 align 10h
.text:004138B0
.text:004138B0 ; =============== S U B R O U T I N E =======================================
.text:004138B0
.text:004138B0 ; Attributes: thunk
.text:004138B0
.text:004138B0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004138B0 vfprintf        proc near               ; CODE XREF: sub_407A20+C1↑p
.text:004138B0                                         ; sub_40AB80+49↑p ...
.text:004138B0
.text:004138B0 Stream          = dword ptr  4
.text:004138B0 Format          = dword ptr  8
.text:004138B0 ArgList         = dword ptr  0Ch
.text:004138B0
.text:004138B0                 jmp     ds:__imp_vfprintf
.text:004138B0 vfprintf        endp
.text:004138B0
.text:004138B0 ; ---------------------------------------------------------------------------
.text:004138B6                 align 10h
.text:004138C0
.text:004138C0 ; =============== S U B R O U T I N E =======================================
.text:004138C0
.text:004138C0 ; Attributes: noreturn thunk
.text:004138C0
.text:004138C0 ; void __cdecl __noreturn abort()
.text:004138C0 abort           proc near               ; CODE XREF: sub_407A20:loc_407ABC↑p
.text:004138C0                                         ; sub_40A850:loc_40AA0A↑p ...
.text:004138C0                 jmp     ds:__imp_abort
.text:004138C0 abort           endp
.text:004138C0
.text:004138C0 ; ---------------------------------------------------------------------------
.text:004138C6                 align 10h
.text:004138D0
.text:004138D0 ; =============== S U B R O U T I N E =======================================
.text:004138D0
.text:004138D0 ; Attributes: thunk
.text:004138D0
.text:004138D0 ; double __cdecl strtod(const char *String, char **EndPtr)
.text:004138D0 strtod          proc near               ; CODE XREF: sub_407C40+4E↑p
.text:004138D0
.text:004138D0 String          = dword ptr  4
.text:004138D0 EndPtr          = dword ptr  8
.text:004138D0
.text:004138D0                 jmp     ds:__imp_strtod
.text:004138D0 strtod          endp
.text:004138D0
.text:004138D0 ; ---------------------------------------------------------------------------
.text:004138D6                 align 10h
.text:004138E0
.text:004138E0 ; =============== S U B R O U T I N E =======================================
.text:004138E0
.text:004138E0 ; Attributes: thunk
.text:004138E0
.text:004138E0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:004138E0 strtoul         proc near               ; CODE XREF: sub_407DD0+94↑p
.text:004138E0
.text:004138E0 String          = dword ptr  4
.text:004138E0 EndPtr          = dword ptr  8
.text:004138E0 Radix           = dword ptr  0Ch
.text:004138E0
.text:004138E0                 jmp     ds:__imp_strtoul
.text:004138E0 strtoul         endp
.text:004138E0
.text:004138E0 ; ---------------------------------------------------------------------------
.text:004138E6                 align 10h
.text:004138F0
.text:004138F0 ; =============== S U B R O U T I N E =======================================
.text:004138F0
.text:004138F0 ; Attributes: thunk
.text:004138F0
.text:004138F0 ; int __cdecl isctype(int C, int Type)
.text:004138F0 _isctype        proc near               ; CODE XREF: sub_407DD0+5F↑p
.text:004138F0                                         ; sub_4084F0+72↑p ...
.text:004138F0
.text:004138F0 C               = dword ptr  4
.text:004138F0 Type            = dword ptr  8
.text:004138F0
.text:004138F0                 jmp     ds:__imp__isctype
.text:004138F0 _isctype        endp
.text:004138F0
.text:004138F0 ; ---------------------------------------------------------------------------
.text:004138F6                 align 10h
.text:00413900
.text:00413900 ; =============== S U B R O U T I N E =======================================
.text:00413900
.text:00413900 ; Attributes: thunk
.text:00413900
.text:00413900 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00413900 strtol          proc near               ; CODE XREF: .text:004091D3↑p
.text:00413900
.text:00413900 String          = dword ptr  4
.text:00413900 EndPtr          = dword ptr  8
.text:00413900 Radix           = dword ptr  0Ch
.text:00413900
.text:00413900                 jmp     ds:__imp_strtol
.text:00413900 strtol          endp
.text:00413900
.text:00413900 ; ---------------------------------------------------------------------------
.text:00413906                 align 10h
.text:00413910
.text:00413910 ; =============== S U B R O U T I N E =======================================
.text:00413910
.text:00413910 ; Attributes: thunk
.text:00413910
.text:00413910 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00413910 iswctype        proc near               ; CODE XREF: sub_409710+78B↑p
.text:00413910
.text:00413910 C               = word ptr  4
.text:00413910 Type            = word ptr  8
.text:00413910
.text:00413910                 jmp     ds:__imp_iswctype
.text:00413910 iswctype        endp
.text:00413910
.text:00413910 ; ---------------------------------------------------------------------------
.text:00413916                 align 10h
.text:00413920
.text:00413920 ; =============== S U B R O U T I N E =======================================
.text:00413920
.text:00413920 ; Attributes: thunk
.text:00413920
.text:00413920 ; __time32_t __cdecl time(__time32_t *const Time)
.text:00413920 time            proc near               ; CODE XREF: sub_40AA80+66↑p
.text:00413920
.text:00413920 Time            = dword ptr  4
.text:00413920
.text:00413920                 jmp     ds:__imp_time
.text:00413920 time            endp
.text:00413920
.text:00413920 ; ---------------------------------------------------------------------------
.text:00413926                 align 10h
.text:00413930
.text:00413930 ; =============== S U B R O U T I N E =======================================
.text:00413930
.text:00413930 ; Attributes: thunk
.text:00413930
.text:00413930 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00413930 strcmp          proc near               ; CODE XREF: sub_40AC84+180↑p
.text:00413930                                         ; .text:0040F9CB↑p
.text:00413930
.text:00413930 Str1            = dword ptr  4
.text:00413930 Str2            = dword ptr  8
.text:00413930
.text:00413930                 jmp     ds:__imp_strcmp
.text:00413930 strcmp          endp
.text:00413930
.text:00413930 ; ---------------------------------------------------------------------------
.text:00413936                 align 10h
.text:00413940
.text:00413940 ; =============== S U B R O U T I N E =======================================
.text:00413940
.text:00413940 ; Attributes: thunk
.text:00413940
.text:00413940 ; char *__cdecl strerror(int ErrorMessage)
.text:00413940 strerror        proc near               ; CODE XREF: sub_40AB80+A5↑p
.text:00413940                                         ; sub_40AC84+10F↑p
.text:00413940
.text:00413940 ErrorMessage    = dword ptr  4
.text:00413940
.text:00413940                 jmp     ds:__imp_strerror
.text:00413940 strerror        endp
.text:00413940
.text:00413940 ; ---------------------------------------------------------------------------
.text:00413946                 align 10h
.text:00413950
.text:00413950 ; =============== S U B R O U T I N E =======================================
.text:00413950
.text:00413950 ; Attributes: thunk
.text:00413950
.text:00413950 ; char *__cdecl ctime(const __time32_t *const Time)
.text:00413950 ctime           proc near               ; CODE XREF: .text:0040AFED↑p
.text:00413950                                         ; .text:0040B00F↑p ...
.text:00413950
.text:00413950 Time            = dword ptr  4
.text:00413950
.text:00413950                 jmp     ds:__imp_ctime
.text:00413950 ctime           endp
.text:00413950
.text:00413950 ; ---------------------------------------------------------------------------
.text:00413956                 align 10h
.text:00413960
.text:00413960 ; =============== S U B R O U T I N E =======================================
.text:00413960
.text:00413960 ; Attributes: thunk
.text:00413960
.text:00413960 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00413960 _get_osfhandle  proc near               ; CODE XREF: sub_40B090+3A↑p
.text:00413960                                         ; sub_40E2E0+12↑p ...
.text:00413960
.text:00413960 FileHandle      = dword ptr  4
.text:00413960
.text:00413960                 jmp     ds:__imp__get_osfhandle
.text:00413960 _get_osfhandle  endp
.text:00413960
.text:00413960 ; ---------------------------------------------------------------------------
.text:00413966                 align 10h
.text:00413970
.text:00413970 ; =============== S U B R O U T I N E =======================================
.text:00413970
.text:00413970 ; Attributes: thunk
.text:00413970
.text:00413970 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00413970 strcat          proc near               ; CODE XREF: sub_40B090+2F8↑p
.text:00413970                                         ; .text:0040F183↑p ...
.text:00413970
.text:00413970 Destination     = dword ptr  4
.text:00413970 Source          = dword ptr  8
.text:00413970
.text:00413970                 jmp     ds:__imp_strcat
.text:00413970 strcat          endp
.text:00413970
.text:00413970 ; ---------------------------------------------------------------------------
.text:00413976                 align 10h
.text:00413980
.text:00413980 ; =============== S U B R O U T I N E =======================================
.text:00413980
.text:00413980 ; Attributes: thunk
.text:00413980
.text:00413980 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00413980 strcpy          proc near               ; CODE XREF: sub_40B090+2D3↑p
.text:00413980                                         ; _win32_longpath+13C↑p ...
.text:00413980
.text:00413980 Destination     = dword ptr  4
.text:00413980 Source          = dword ptr  8
.text:00413980
.text:00413980                 jmp     ds:__imp_strcpy
.text:00413980 strcpy          endp
.text:00413980
.text:00413980 ; ---------------------------------------------------------------------------
.text:00413986                 align 10h
.text:00413990
.text:00413990 ; =============== S U B R O U T I N E =======================================
.text:00413990
.text:00413990 ; Attributes: thunk
.text:00413990
.text:00413990 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00413990 strstr          proc near               ; CODE XREF: sub_40B940+3BF↑p
.text:00413990                                         ; sub_40B940+3DC↑p ...
.text:00413990
.text:00413990 Str             = dword ptr  4
.text:00413990 SubStr          = dword ptr  8
.text:00413990
.text:00413990                 jmp     ds:__imp_strstr
.text:00413990 strstr          endp
.text:00413990
.text:00413990 ; ---------------------------------------------------------------------------
.text:00413996                 align 10h
.text:004139A0
.text:004139A0 ; =============== S U B R O U T I N E =======================================
.text:004139A0
.text:004139A0 ; Attributes: thunk
.text:004139A0
.text:004139A0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004139A0 strrchr         proc near               ; CODE XREF: sub_40B940+CB↑p
.text:004139A0                                         ; sub_40B940+3A7↑p ...
.text:004139A0
.text:004139A0 Str             = dword ptr  4
.text:004139A0
.text:004139A0                 jmp     ds:__imp_strrchr
.text:004139A0 strrchr         endp
.text:004139A0
.text:004139A0 ; ---------------------------------------------------------------------------
.text:004139A6                 align 10h
.text:004139B0
.text:004139B0 ; =============== S U B R O U T I N E =======================================
.text:004139B0
.text:004139B0 ; Attributes: thunk
.text:004139B0
.text:004139B0 ; int __cdecl isalpha(int C)
.text:004139B0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:004139B0
.text:004139B0 C               = dword ptr  4
.text:004139B0
.text:004139B0                 jmp     ds:__imp_isalpha
.text:004139B0 isalpha         endp
.text:004139B0
.text:004139B0 ; ---------------------------------------------------------------------------
.text:004139B6                 align 10h
.text:004139C0
.text:004139C0 ; =============== S U B R O U T I N E =======================================
.text:004139C0
.text:004139C0 ; Attributes: thunk
.text:004139C0
.text:004139C0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:004139C0 _stricmp_0      proc near               ; CODE XREF: .text:0040D364↑p
.text:004139C0
.text:004139C0 String1         = dword ptr  4
.text:004139C0 String2         = dword ptr  8
.text:004139C0
.text:004139C0                 jmp     ds:__imp__stricmp_0
.text:004139C0 _stricmp_0      endp
.text:004139C0
.text:004139C0 ; ---------------------------------------------------------------------------
.text:004139C6                 align 10h
.text:004139D0
.text:004139D0 ; =============== S U B R O U T I N E =======================================
.text:004139D0
.text:004139D0 ; Attributes: thunk
.text:004139D0
.text:004139D0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:004139D0 strncpy         proc near               ; CODE XREF: sub_40D4F0+BE↑p
.text:004139D0                                         ; .text:0040DD6A↑p ...
.text:004139D0
.text:004139D0 Destination     = dword ptr  4
.text:004139D0 Source          = dword ptr  8
.text:004139D0 Count           = dword ptr  0Ch
.text:004139D0
.text:004139D0                 jmp     ds:__imp_strncpy
.text:004139D0 strncpy         endp
.text:004139D0
.text:004139D0 ; ---------------------------------------------------------------------------
.text:004139D6                 align 10h
.text:004139E0
.text:004139E0 ; =============== S U B R O U T I N E =======================================
.text:004139E0
.text:004139E0 ; Attributes: thunk
.text:004139E0
.text:004139E0 ; int __cdecl toupper(int C)
.text:004139E0 toupper         proc near               ; CODE XREF: sub_40D4F0+10E↑p
.text:004139E0
.text:004139E0 C               = dword ptr  4
.text:004139E0
.text:004139E0                 jmp     ds:__imp_toupper
.text:004139E0 toupper         endp
.text:004139E0
.text:004139E0 ; ---------------------------------------------------------------------------
.text:004139E6                 align 10h
.text:004139F0
.text:004139F0 ; =============== S U B R O U T I N E =======================================
.text:004139F0
.text:004139F0 ; Attributes: thunk
.text:004139F0
.text:004139F0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:004139F0 _filelengthi64  proc near               ; CODE XREF: sub_40E2E0+113↑p
.text:004139F0                                         ; sub_4107F0+1F↑p
.text:004139F0
.text:004139F0 FileHandle      = dword ptr  4
.text:004139F0
.text:004139F0                 jmp     ds:__imp__filelengthi64
.text:004139F0 _filelengthi64  endp
.text:004139F0
.text:004139F0 ; ---------------------------------------------------------------------------
.text:004139F6                 align 10h
.text:00413A00
.text:00413A00 ; =============== S U B R O U T I N E =======================================
.text:00413A00
.text:00413A00 ; Attributes: thunk
.text:00413A00
.text:00413A00 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00413A00 sprintf         proc near               ; CODE XREF: .text:0040F08A↑p
.text:00413A00                                         ; .text:0040F0AB↑p ...
.text:00413A00
.text:00413A00 Buffer          = dword ptr  4
.text:00413A00 Format          = dword ptr  8
.text:00413A00
.text:00413A00                 jmp     ds:__imp_sprintf
.text:00413A00 sprintf         endp
.text:00413A00
.text:00413A00 ; ---------------------------------------------------------------------------
.text:00413A06                 align 10h
.text:00413A10
.text:00413A10 ; =============== S U B R O U T I N E =======================================
.text:00413A10
.text:00413A10 ; Attributes: thunk
.text:00413A10
.text:00413A10 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00413A10 sscanf          proc near               ; CODE XREF: .text:0040FC0E↑p
.text:00413A10
.text:00413A10 Buffer          = dword ptr  4
.text:00413A10 Format          = dword ptr  8
.text:00413A10
.text:00413A10                 jmp     ds:__imp_sscanf
.text:00413A10 sscanf          endp
.text:00413A10
.text:00413A10 ; ---------------------------------------------------------------------------
.text:00413A16                 align 10h
.text:00413A20
.text:00413A20 ; =============== S U B R O U T I N E =======================================
.text:00413A20
.text:00413A20 ; Attributes: thunk
.text:00413A20
.text:00413A20 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00413A20 strspn          proc near               ; CODE XREF: .text:0040FA5A↑p
.text:00413A20                                         ; .text:0040FC74↑p ...
.text:00413A20
.text:00413A20 Str             = dword ptr  4
.text:00413A20 Control         = dword ptr  8
.text:00413A20
.text:00413A20                 jmp     ds:__imp_strspn
.text:00413A20 strspn          endp
.text:00413A20
.text:00413A20 ; ---------------------------------------------------------------------------
.text:00413A26                 align 10h
.text:00413A30
.text:00413A30 ; =============== S U B R O U T I N E =======================================
.text:00413A30
.text:00413A30 ; Attributes: thunk
.text:00413A30
.text:00413A30 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00413A30 fopen           proc near               ; CODE XREF: sub_41050F+26↑p
.text:00413A30                                         ; sub_41050F+99↑p
.text:00413A30
.text:00413A30 FileName        = dword ptr  4
.text:00413A30 Mode            = dword ptr  8
.text:00413A30
.text:00413A30                 jmp     ds:__imp_fopen
.text:00413A30 fopen           endp
.text:00413A30
.text:00413A30 ; ---------------------------------------------------------------------------
.text:00413A36                 align 10h
.text:00413A40
.text:00413A40 ; =============== S U B R O U T I N E =======================================
.text:00413A40
.text:00413A40 ; Attributes: thunk
.text:00413A40
.text:00413A40 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00413A40 strpbrk         proc near               ; CODE XREF: sub_410850+87↑p
.text:00413A40
.text:00413A40 Str             = dword ptr  4
.text:00413A40 Control         = dword ptr  8
.text:00413A40
.text:00413A40                 jmp     ds:__imp_strpbrk
.text:00413A40 strpbrk         endp
.text:00413A40
.text:00413A40 ; ---------------------------------------------------------------------------
.text:00413A46                 align 10h
.text:00413A50
.text:00413A50 ; =============== S U B R O U T I N E =======================================
.text:00413A50
.text:00413A50 ; Attributes: thunk
.text:00413A50
.text:00413A50 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00413A50 _fdopen         proc near               ; CODE XREF: sub_4108F0+69↑p
.text:00413A50
.text:00413A50 FileHandle      = dword ptr  4
.text:00413A50 Format          = dword ptr  8
.text:00413A50
.text:00413A50                 jmp     ds:__imp__fdopen
.text:00413A50 _fdopen         endp
.text:00413A50
.text:00413A50 ; ---------------------------------------------------------------------------
.text:00413A56                 align 10h
.text:00413A60
.text:00413A60 ; =============== S U B R O U T I N E =======================================
.text:00413A60
.text:00413A60 ; Attributes: thunk
.text:00413A60
.text:00413A60 ; int __cdecl close_0(int FileHandle)
.text:00413A60 _close_0        proc near               ; CODE XREF: sub_4108F0+90↑p
.text:00413A60
.text:00413A60 FileHandle      = dword ptr  4
.text:00413A60
.text:00413A60                 jmp     ds:__imp__close_0
.text:00413A60 _close_0        endp
.text:00413A60
.text:00413A60 ; ---------------------------------------------------------------------------
.text:00413A66                 align 10h
.text:00413A70
.text:00413A70 ; =============== S U B R O U T I N E =======================================
.text:00413A70
.text:00413A70 ; Attributes: thunk
.text:00413A70
.text:00413A70 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:00413A70 _open_0         proc near               ; CODE XREF: sub_410D40:loc_4110D0↑p
.text:00413A70
.text:00413A70 FileName        = dword ptr  4
.text:00413A70 OpenFlag        = dword ptr  8
.text:00413A70
.text:00413A70                 jmp     ds:__imp__open_0
.text:00413A70 _open_0         endp
.text:00413A70
.text:00413A70 ; ---------------------------------------------------------------------------
.text:00413A76                 align 10h
.text:00413A80
.text:00413A80 ; =============== S U B R O U T I N E =======================================
.text:00413A80
.text:00413A80 ; Attributes: thunk
.text:00413A80
.text:00413A80 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00413A80 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00413A80
.text:00413A80 lpTopLevelExceptionFilter= dword ptr  4
.text:00413A80
.text:00413A80                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00413A80 SetUnhandledExceptionFilter endp
.text:00413A80
.text:00413A80 ; ---------------------------------------------------------------------------
.text:00413A86                 align 10h
.text:00413A90
.text:00413A90 ; =============== S U B R O U T I N E =======================================
.text:00413A90
.text:00413A90 ; Attributes: noreturn thunk
.text:00413A90
.text:00413A90 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00413A90 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00413A90
.text:00413A90 uExitCode       = dword ptr  4
.text:00413A90
.text:00413A90                 jmp     ds:__imp_ExitProcess
.text:00413A90 ExitProcess     endp
.text:00413A90
.text:00413A90 ; ---------------------------------------------------------------------------
.text:00413A96                 align 10h
.text:00413AA0
.text:00413AA0 ; =============== S U B R O U T I N E =======================================
.text:00413AA0
.text:00413AA0 ; Attributes: thunk
.text:00413AA0
.text:00413AA0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00413AA0 GetModuleHandleA proc near              ; CODE XREF: sub_40B090+108↑p
.text:00413AA0                                         ; sub_40B940+329↑p ...
.text:00413AA0
.text:00413AA0 lpModuleName    = dword ptr  4
.text:00413AA0
.text:00413AA0                 jmp     ds:__imp_GetModuleHandleA
.text:00413AA0 GetModuleHandleA endp
.text:00413AA0
.text:00413AA0 ; ---------------------------------------------------------------------------
.text:00413AA6                 align 10h
.text:00413AB0
.text:00413AB0 ; =============== S U B R O U T I N E =======================================
.text:00413AB0
.text:00413AB0 ; Attributes: thunk
.text:00413AB0
.text:00413AB0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00413AB0 GetProcAddress  proc near               ; CODE XREF: sub_40B090+123↑p
.text:00413AB0                                         ; sub_40B090+28E↑p ...
.text:00413AB0
.text:00413AB0 hModule         = dword ptr  4
.text:00413AB0 lpProcName      = dword ptr  8
.text:00413AB0
.text:00413AB0                 jmp     ds:__imp_GetProcAddress
.text:00413AB0 GetProcAddress  endp
.text:00413AB0
.text:00413AB0 ; ---------------------------------------------------------------------------
.text:00413AB6                 align 10h
.text:00413AC0
.text:00413AC0 ; =============== S U B R O U T I N E =======================================
.text:00413AC0
.text:00413AC0 ; Attributes: thunk
.text:00413AC0
.text:00413AC0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00413AC0 GetFileAttributesA proc near            ; CODE XREF: sub_40B090+137↑p
.text:00413AC0                                         ; sub_40ED90+62↑p
.text:00413AC0
.text:00413AC0 lpFileName      = dword ptr  4
.text:00413AC0
.text:00413AC0                 jmp     ds:__imp_GetFileAttributesA
.text:00413AC0 GetFileAttributesA endp
.text:00413AC0
.text:00413AC0 ; ---------------------------------------------------------------------------
.text:00413AC6                 align 10h
.text:00413AD0
.text:00413AD0 ; =============== S U B R O U T I N E =======================================
.text:00413AD0
.text:00413AD0 ; Attributes: thunk
.text:00413AD0
.text:00413AD0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00413AD0 FreeLibrary     proc near               ; CODE XREF: sub_40B090+194↑p
.text:00413AD0                                         ; sub_40B090+37D↑p ...
.text:00413AD0
.text:00413AD0 hLibModule      = dword ptr  4
.text:00413AD0
.text:00413AD0                 jmp     ds:__imp_FreeLibrary
.text:00413AD0 FreeLibrary     endp
.text:00413AD0
.text:00413AD0 ; ---------------------------------------------------------------------------
.text:00413AD6                 align 10h
.text:00413AE0
.text:00413AE0 ; =============== S U B R O U T I N E =======================================
.text:00413AE0
.text:00413AE0 ; Attributes: thunk
.text:00413AE0
.text:00413AE0 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00413AE0 FindFirstFileA  proc near               ; CODE XREF: sub_40B090+1BE↑p
.text:00413AE0                                         ; sub_40B090+3AF↑p ...
.text:00413AE0
.text:00413AE0 lpFileName      = dword ptr  4
.text:00413AE0 lpFindFileData  = dword ptr  8
.text:00413AE0
.text:00413AE0                 jmp     ds:__imp_FindFirstFileA
.text:00413AE0 FindFirstFileA  endp
.text:00413AE0
.text:00413AE0 ; ---------------------------------------------------------------------------
.text:00413AE6                 align 10h
.text:00413AF0
.text:00413AF0 ; =============== S U B R O U T I N E =======================================
.text:00413AF0
.text:00413AF0 ; Attributes: thunk
.text:00413AF0
.text:00413AF0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00413AF0 FindClose       proc near               ; CODE XREF: sub_40B090+213↑p
.text:00413AF0                                         ; sub_40B090+36E↑p ...
.text:00413AF0
.text:00413AF0 hFindFile       = dword ptr  4
.text:00413AF0
.text:00413AF0                 jmp     ds:__imp_FindClose
.text:00413AF0 FindClose       endp
.text:00413AF0
.text:00413AF0 ; ---------------------------------------------------------------------------
.text:00413AF6                 align 10h
.text:00413B00
.text:00413B00 ; =============== S U B R O U T I N E =======================================
.text:00413B00
.text:00413B00 ; Attributes: thunk
.text:00413B00
.text:00413B00 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00413B00 LoadLibraryA    proc near               ; CODE XREF: sub_40B090+273↑p
.text:00413B00                                         ; sub_40B940+134↑p ...
.text:00413B00
.text:00413B00 lpLibFileName   = dword ptr  4
.text:00413B00
.text:00413B00                 jmp     ds:__imp_LoadLibraryA
.text:00413B00 LoadLibraryA    endp
.text:00413B00
.text:00413B00 ; ---------------------------------------------------------------------------
.text:00413B06                 align 10h
.text:00413B10
.text:00413B10 ; =============== S U B R O U T I N E =======================================
.text:00413B10
.text:00413B10 ; Attributes: thunk
.text:00413B10
.text:00413B10 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00413B10 FindNextFileA   proc near               ; CODE XREF: sub_40B090+35F↑p
.text:00413B10
.text:00413B10 hFindFile       = dword ptr  4
.text:00413B10 lpFindFileData  = dword ptr  8
.text:00413B10
.text:00413B10                 jmp     ds:__imp_FindNextFileA
.text:00413B10 FindNextFileA   endp
.text:00413B10
.text:00413B10 ; ---------------------------------------------------------------------------
.text:00413B16                 align 10h
.text:00413B20
.text:00413B20 ; =============== S U B R O U T I N E =======================================
.text:00413B20
.text:00413B20 ; Attributes: thunk
.text:00413B20
.text:00413B20 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00413B20 GetFileType     proc near               ; CODE XREF: sub_40B090+423↑p
.text:00413B20                                         ; .text:0040C12A↑p
.text:00413B20
.text:00413B20 hFile           = dword ptr  4
.text:00413B20
.text:00413B20                 jmp     ds:__imp_GetFileType
.text:00413B20 GetFileType     endp
.text:00413B20
.text:00413B20 ; ---------------------------------------------------------------------------
.text:00413B26                 align 10h
.text:00413B30
.text:00413B30 ; =============== S U B R O U T I N E =======================================
.text:00413B30
.text:00413B30 ; Attributes: thunk
.text:00413B30
.text:00413B30 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00413B30 GetFileInformationByHandle proc near    ; CODE XREF: sub_40B090+449↑p
.text:00413B30
.text:00413B30 hFile           = dword ptr  4
.text:00413B30 lpFileInformation= dword ptr  8
.text:00413B30
.text:00413B30                 jmp     ds:__imp_GetFileInformationByHandle
.text:00413B30 GetFileInformationByHandle endp
.text:00413B30
.text:00413B30 ; ---------------------------------------------------------------------------
.text:00413B36                 align 10h
.text:00413B40
.text:00413B40 ; =============== S U B R O U T I N E =======================================
.text:00413B40
.text:00413B40 ; Attributes: thunk
.text:00413B40
.text:00413B40 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00413B40 GetFileSize     proc near               ; CODE XREF: sub_40B090+7D2↑p
.text:00413B40
.text:00413B40 hFile           = dword ptr  4
.text:00413B40 lpFileSizeHigh  = dword ptr  8
.text:00413B40
.text:00413B40                 jmp     ds:__imp_GetFileSize
.text:00413B40 GetFileSize     endp
.text:00413B40
.text:00413B40 ; ---------------------------------------------------------------------------
.text:00413B46                 align 10h
.text:00413B50
.text:00413B50 ; =============== S U B R O U T I N E =======================================
.text:00413B50
.text:00413B50 ; Attributes: thunk
.text:00413B50
.text:00413B50 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00413B50 PeekNamedPipe   proc near               ; CODE XREF: sub_40B090+819↑p
.text:00413B50
.text:00413B50 hNamedPipe      = dword ptr  4
.text:00413B50 lpBuffer        = dword ptr  8
.text:00413B50 nBufferSize     = dword ptr  0Ch
.text:00413B50 lpBytesRead     = dword ptr  10h
.text:00413B50 lpTotalBytesAvail= dword ptr  14h
.text:00413B50 lpBytesLeftThisMessage= dword ptr  18h
.text:00413B50
.text:00413B50                 jmp     ds:__imp_PeekNamedPipe
.text:00413B50 PeekNamedPipe   endp
.text:00413B50
.text:00413B50 ; ---------------------------------------------------------------------------
.text:00413B56                 align 10h
.text:00413B60
.text:00413B60 ; =============== S U B R O U T I N E =======================================
.text:00413B60
.text:00413B60 ; Attributes: thunk
.text:00413B60
.text:00413B60 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00413B60 GetDriveTypeA   proc near               ; CODE XREF: sub_40B940+4C↑p
.text:00413B60
.text:00413B60 lpRootPathName  = dword ptr  4
.text:00413B60
.text:00413B60                 jmp     ds:__imp_GetDriveTypeA
.text:00413B60 GetDriveTypeA   endp
.text:00413B60
.text:00413B60 ; ---------------------------------------------------------------------------
.text:00413B66                 align 10h
.text:00413B70
.text:00413B70 ; =============== S U B R O U T I N E =======================================
.text:00413B70
.text:00413B70 ; Attributes: thunk
.text:00413B70
.text:00413B70 ; DWORD __stdcall GetLastError()
.text:00413B70 GetLastError    proc near               ; CODE XREF: sub_40B940:loc_40BBC9↑p
.text:00413B70                                         ; .text:loc_40C70D↑p ...
.text:00413B70                 jmp     ds:__imp_GetLastError
.text:00413B70 GetLastError    endp
.text:00413B70
.text:00413B70 ; ---------------------------------------------------------------------------
.text:00413B76                 align 10h
.text:00413B80
.text:00413B80 ; =============== S U B R O U T I N E =======================================
.text:00413B80
.text:00413B80 ; Attributes: thunk
.text:00413B80
.text:00413B80 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00413B80 GetVolumeInformationA proc near         ; CODE XREF: sub_40BE40+64↑p
.text:00413B80                                         ; .text:0040C3EC↑p ...
.text:00413B80
.text:00413B80 lpRootPathName  = dword ptr  4
.text:00413B80 lpVolumeNameBuffer= dword ptr  8
.text:00413B80 nVolumeNameSize = dword ptr  0Ch
.text:00413B80 lpVolumeSerialNumber= dword ptr  10h
.text:00413B80 lpMaximumComponentLength= dword ptr  14h
.text:00413B80 lpFileSystemFlags= dword ptr  18h
.text:00413B80 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00413B80 nFileSystemNameSize= dword ptr  20h
.text:00413B80
.text:00413B80                 jmp     ds:__imp_GetVolumeInformationA
.text:00413B80 GetVolumeInformationA endp
.text:00413B80
.text:00413B80 ; ---------------------------------------------------------------------------
.text:00413B86                 align 10h
.text:00413B90
.text:00413B90 ; =============== S U B R O U T I N E =======================================
.text:00413B90
.text:00413B90 ; Attributes: thunk
.text:00413B90
.text:00413B90 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00413B90 CreateFileA     proc near               ; CODE XREF: sub_411210-463A↑p
.text:00413B90                                         ; .text:0040DAE3↑p ...
.text:00413B90
.text:00413B90 lpFileName      = dword ptr  4
.text:00413B90 dwDesiredAccess = dword ptr  8
.text:00413B90 dwShareMode     = dword ptr  0Ch
.text:00413B90 lpSecurityAttributes= dword ptr  10h
.text:00413B90 dwCreationDisposition= dword ptr  14h
.text:00413B90 dwFlagsAndAttributes= dword ptr  18h
.text:00413B90 hTemplateFile   = dword ptr  1Ch
.text:00413B90
.text:00413B90                 jmp     ds:__imp_CreateFileA
.text:00413B90 CreateFileA     endp
.text:00413B90
.text:00413B90 ; ---------------------------------------------------------------------------
.text:00413B96                 align 10h
.text:00413BA0
.text:00413BA0 ; =============== S U B R O U T I N E =======================================
.text:00413BA0
.text:00413BA0 ; Attributes: thunk
.text:00413BA0
.text:00413BA0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00413BA0 CloseHandle     proc near               ; CODE XREF: sub_411210-461F↑p
.text:00413BA0                                         ; .text:0040DB59↑p ...
.text:00413BA0
.text:00413BA0 hObject         = dword ptr  4
.text:00413BA0
.text:00413BA0                 jmp     ds:__imp_CloseHandle
.text:00413BA0 CloseHandle     endp
.text:00413BA0
.text:00413BA0 ; ---------------------------------------------------------------------------
.text:00413BA6                 align 10h
.text:00413BB0
.text:00413BB0 ; =============== S U B R O U T I N E =======================================
.text:00413BB0
.text:00413BB0 ; Attributes: thunk
.text:00413BB0
.text:00413BB0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00413BB0 SetErrorMode    proc near               ; CODE XREF: sub_411210-45EA↑p
.text:00413BB0                                         ; sub_40ED90+57↑p ...
.text:00413BB0
.text:00413BB0 uMode           = dword ptr  4
.text:00413BB0
.text:00413BB0                 jmp     ds:__imp_SetErrorMode
.text:00413BB0 SetErrorMode    endp
.text:00413BB0
.text:00413BB0 ; ---------------------------------------------------------------------------
.text:00413BB6                 align 10h
.text:00413BC0
.text:00413BC0 ; =============== S U B R O U T I N E =======================================
.text:00413BC0
.text:00413BC0 ; Attributes: thunk
.text:00413BC0
.text:00413BC0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00413BC0 GetModuleFileNameA proc near            ; CODE XREF: sub_40D1E0+1C↑p
.text:00413BC0
.text:00413BC0 hModule         = dword ptr  4
.text:00413BC0 lpFilename      = dword ptr  8
.text:00413BC0 nSize           = dword ptr  0Ch
.text:00413BC0
.text:00413BC0                 jmp     ds:__imp_GetModuleFileNameA
.text:00413BC0 GetModuleFileNameA endp
.text:00413BC0
.text:00413BC0 ; ---------------------------------------------------------------------------
.text:00413BC6                 align 10h
.text:00413BD0
.text:00413BD0 ; =============== S U B R O U T I N E =======================================
.text:00413BD0
.text:00413BD0 ; Attributes: thunk
.text:00413BD0
.text:00413BD0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00413BD0 GetShortPathNameA proc near             ; CODE XREF: .text:0040D466↑p
.text:00413BD0                                         ; .text:0040D490↑p
.text:00413BD0
.text:00413BD0 lpszLongPath    = dword ptr  4
.text:00413BD0 lpszShortPath   = dword ptr  8
.text:00413BD0 cchBuffer       = dword ptr  0Ch
.text:00413BD0
.text:00413BD0                 jmp     ds:__imp_GetShortPathNameA
.text:00413BD0 GetShortPathNameA endp
.text:00413BD0
.text:00413BD0 ; ---------------------------------------------------------------------------
.text:00413BD6                 align 10h
.text:00413BE0
.text:00413BE0 ; =============== S U B R O U T I N E =======================================
.text:00413BE0
.text:00413BE0 ; Attributes: thunk
.text:00413BE0
.text:00413BE0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00413BE0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040D798↑p
.text:00413BE0                                         ; .text:0040D7B4↑p ...
.text:00413BE0
.text:00413BE0 nBufferLength   = dword ptr  4
.text:00413BE0 lpBuffer        = dword ptr  8
.text:00413BE0
.text:00413BE0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00413BE0 GetCurrentDirectoryA endp
.text:00413BE0
.text:00413BE0 ; ---------------------------------------------------------------------------
.text:00413BE6                 align 10h
.text:00413BF0
.text:00413BF0 ; =============== S U B R O U T I N E =======================================
.text:00413BF0
.text:00413BF0 ; Attributes: thunk
.text:00413BF0
.text:00413BF0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00413BF0 DeviceIoControl proc near               ; CODE XREF: .text:0040DB4C↑p
.text:00413BF0                                         ; sub_40DF10+1E5↑p
.text:00413BF0
.text:00413BF0 hDevice         = dword ptr  4
.text:00413BF0 dwIoControlCode = dword ptr  8
.text:00413BF0 lpInBuffer      = dword ptr  0Ch
.text:00413BF0 nInBufferSize   = dword ptr  10h
.text:00413BF0 lpOutBuffer     = dword ptr  14h
.text:00413BF0 nOutBufferSize  = dword ptr  18h
.text:00413BF0 lpBytesReturned = dword ptr  1Ch
.text:00413BF0 lpOverlapped    = dword ptr  20h
.text:00413BF0
.text:00413BF0                 jmp     ds:__imp_DeviceIoControl
.text:00413BF0 DeviceIoControl endp
.text:00413BF0
.text:00413BF0 ; ---------------------------------------------------------------------------
.text:00413BF6                 align 10h
.text:00413C00
.text:00413C00 ; =============== S U B R O U T I N E =======================================
.text:00413C00
.text:00413C00 ; Attributes: thunk
.text:00413C00
.text:00413C00 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00413C00 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040DEA3↑p
.text:00413C00                                         ; sub_40DF10+7B↑p ...
.text:00413C00
.text:00413C00 lpRootPathName  = dword ptr  4
.text:00413C00 lpSectorsPerCluster= dword ptr  8
.text:00413C00 lpBytesPerSector= dword ptr  0Ch
.text:00413C00 lpNumberOfFreeClusters= dword ptr  10h
.text:00413C00 lpTotalNumberOfClusters= dword ptr  14h
.text:00413C00
.text:00413C00                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00413C00 GetDiskFreeSpaceA endp
.text:00413C00
.text:00413C00 ; ---------------------------------------------------------------------------
.text:00413C06                 align 10h
.text:00413C10
.text:00413C10 ; =============== S U B R O U T I N E =======================================
.text:00413C10
.text:00413C10 ; Attributes: thunk
.text:00413C10
.text:00413C10 ; HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
.text:00413C10 OpenProcess     proc near               ; CODE XREF: sub_40E1B0+2C↑p
.text:00413C10
.text:00413C10 dwDesiredAccess = dword ptr  4
.text:00413C10 bInheritHandle  = dword ptr  8
.text:00413C10 dwProcessId     = dword ptr  0Ch
.text:00413C10
.text:00413C10                 jmp     ds:__imp_OpenProcess
.text:00413C10 OpenProcess     endp
.text:00413C10
.text:00413C10 ; ---------------------------------------------------------------------------
.text:00413C16                 align 10h
.text:00413C20
.text:00413C20 ; =============== S U B R O U T I N E =======================================
.text:00413C20
.text:00413C20 ; Attributes: thunk
.text:00413C20
.text:00413C20 ; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT uExitCode)
.text:00413C20 TerminateProcess proc near              ; CODE XREF: sub_40E1B0+BB↑p
.text:00413C20
.text:00413C20 hProcess        = dword ptr  4
.text:00413C20 uExitCode       = dword ptr  8
.text:00413C20
.text:00413C20                 jmp     ds:__imp_TerminateProcess
.text:00413C20 TerminateProcess endp
.text:00413C20
.text:00413C20 ; ---------------------------------------------------------------------------
.text:00413C26                 align 10h
.text:00413C30
.text:00413C30 ; =============== S U B R O U T I N E =======================================
.text:00413C30
.text:00413C30 ; Attributes: thunk
.text:00413C30
.text:00413C30 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00413C30 UnlockFile      proc near               ; CODE XREF: sub_40E2E0+B4↑p
.text:00413C30                                         ; sub_4107F0+40↑p
.text:00413C30
.text:00413C30 hFile           = dword ptr  4
.text:00413C30 dwFileOffsetLow = dword ptr  8
.text:00413C30 dwFileOffsetHigh= dword ptr  0Ch
.text:00413C30 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00413C30 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00413C30
.text:00413C30                 jmp     ds:__imp_UnlockFile
.text:00413C30 UnlockFile      endp
.text:00413C30
.text:00413C30 ; ---------------------------------------------------------------------------
.text:00413C36                 align 10h
.text:00413C40
.text:00413C40 ; =============== S U B R O U T I N E =======================================
.text:00413C40
.text:00413C40 ; Attributes: thunk
.text:00413C40
.text:00413C40 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:00413C40 LockFile        proc near               ; CODE XREF: sub_40E2E0+F7↑p
.text:00413C40
.text:00413C40 hFile           = dword ptr  4
.text:00413C40 dwFileOffsetLow = dword ptr  8
.text:00413C40 dwFileOffsetHigh= dword ptr  0Ch
.text:00413C40 nNumberOfBytesToLockLow= dword ptr  10h
.text:00413C40 nNumberOfBytesToLockHigh= dword ptr  14h
.text:00413C40
.text:00413C40                 jmp     ds:__imp_LockFile
.text:00413C40 LockFile        endp
.text:00413C40
.text:00413C40 ; ---------------------------------------------------------------------------
.text:00413C46                 align 10h
.text:00413C50
.text:00413C50 ; =============== S U B R O U T I N E =======================================
.text:00413C50
.text:00413C50 ; Attributes: thunk
.text:00413C50
.text:00413C50 ; void __stdcall Sleep(DWORD dwMilliseconds)
.text:00413C50 Sleep           proc near               ; CODE XREF: sub_40E740+3D↑p
.text:00413C50
.text:00413C50 dwMilliseconds  = dword ptr  4
.text:00413C50
.text:00413C50                 jmp     ds:__imp_Sleep
.text:00413C50 Sleep           endp
.text:00413C50
.text:00413C50 ; ---------------------------------------------------------------------------
.text:00413C56                 align 10h
.text:00413C60
.text:00413C60 ; =============== S U B R O U T I N E =======================================
.text:00413C60
.text:00413C60 ; Attributes: thunk
.text:00413C60
.text:00413C60 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00413C60 GetFullPathNameA proc near              ; CODE XREF: sub_40EC60+45↑p
.text:00413C60                                         ; sub_40EC60+ED↑p
.text:00413C60
.text:00413C60 lpFileName      = dword ptr  4
.text:00413C60 nBufferLength   = dword ptr  8
.text:00413C60 lpBuffer        = dword ptr  0Ch
.text:00413C60 lpFilePart      = dword ptr  10h
.text:00413C60
.text:00413C60                 jmp     ds:__imp_GetFullPathNameA
.text:00413C60 GetFullPathNameA endp
.text:00413C60
.text:00413C60 ; ---------------------------------------------------------------------------
.text:00413C66                 align 10h
.text:00413C70
.text:00413C70 ; =============== S U B R O U T I N E =======================================
.text:00413C70
.text:00413C70 ; Attributes: thunk
.text:00413C70
.text:00413C70 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00413C70 lstrcmpiA       proc near               ; CODE XREF: .text:0040F31B↑p
.text:00413C70                                         ; .text:0040F332↑p ...
.text:00413C70
.text:00413C70 lpString1       = dword ptr  4
.text:00413C70 lpString2       = dword ptr  8
.text:00413C70
.text:00413C70                 jmp     ds:__imp_lstrcmpiA
.text:00413C70 lstrcmpiA       endp
.text:00413C70
.text:00413C70 ; ---------------------------------------------------------------------------
.text:00413C76                 align 10h
.text:00413C80
.text:00413C80 ; =============== S U B R O U T I N E =======================================
.text:00413C80
.text:00413C80 ; Attributes: thunk
.text:00413C80
.text:00413C80 ; DWORD __stdcall GetVersion()
.text:00413C80 GetVersion      proc near               ; CODE XREF: .text:0040F6A3↑p
.text:00413C80                 jmp     ds:__imp_GetVersion
.text:00413C80 GetVersion      endp
.text:00413C80
.text:00413C80 ; ---------------------------------------------------------------------------
.text:00413C86                 align 10h
.text:00413C90
.text:00413C90 ; =============== S U B R O U T I N E =======================================
.text:00413C90
.text:00413C90 ; Attributes: thunk
.text:00413C90
.text:00413C90 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00413C90 GetVersionExA   proc near               ; CODE XREF: sub_40F730+32↑p
.text:00413C90                                         ; sub_40F730+20B↑p
.text:00413C90
.text:00413C90 lpVersionInformation= dword ptr  4
.text:00413C90
.text:00413C90                 jmp     ds:__imp_GetVersionExA
.text:00413C90 GetVersionExA   endp
.text:00413C90
.text:00413C90 ; ---------------------------------------------------------------------------
.text:00413C96                 align 10h
.text:00413CA0
.text:00413CA0 ; =============== S U B R O U T I N E =======================================
.text:00413CA0
.text:00413CA0 ; Attributes: thunk
.text:00413CA0
.text:00413CA0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00413CA0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040FDCF↑p
.text:00413CA0                                         ; .text:0040FDFE↑p ...
.text:00413CA0
.text:00413CA0 nBufferLength   = dword ptr  4
.text:00413CA0 lpBuffer        = dword ptr  8
.text:00413CA0
.text:00413CA0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00413CA0 GetLogicalDriveStringsA endp
.text:00413CA0
.text:00413CA0 ; ---------------------------------------------------------------------------
.text:00413CA6                 align 10h
.text:00413CB0
.text:00413CB0 ; =============== S U B R O U T I N E =======================================
.text:00413CB0
.text:00413CB0 ; Attributes: thunk
.text:00413CB0
.text:00413CB0 ; HANDLE __stdcall GetProcessHeap()
.text:00413CB0 GetProcessHeap  proc near               ; CODE XREF: .text:0040FDD9↑p
.text:00413CB0                                         ; sub_4104B0+24↑p ...
.text:00413CB0                 jmp     ds:__imp_GetProcessHeap
.text:00413CB0 GetProcessHeap  endp
.text:00413CB0
.text:00413CB0 ; ---------------------------------------------------------------------------
.text:00413CB6                 align 10h
.text:00413CC0
.text:00413CC0 ; =============== S U B R O U T I N E =======================================
.text:00413CC0
.text:00413CC0 ; Attributes: thunk
.text:00413CC0
.text:00413CC0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00413CC0 HeapAlloc       proc near               ; CODE XREF: .text:0040FDED↑p
.text:00413CC0                                         ; sub_4104B0+38↑p ...
.text:00413CC0
.text:00413CC0 hHeap           = dword ptr  4
.text:00413CC0 dwFlags         = dword ptr  8
.text:00413CC0 dwBytes         = dword ptr  0Ch
.text:00413CC0
.text:00413CC0                 jmp     ds:__imp_HeapAlloc
.text:00413CC0 HeapAlloc       endp
.text:00413CC0
.text:00413CC0 ; ---------------------------------------------------------------------------
.text:00413CC6                 align 10h
.text:00413CD0
.text:00413CD0 ; =============== S U B R O U T I N E =======================================
.text:00413CD0
.text:00413CD0 ; Attributes: thunk
.text:00413CD0
.text:00413CD0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00413CD0 HeapFree        proc near               ; CODE XREF: .text:004105ED↑p
.text:00413CD0
.text:00413CD0 hHeap           = dword ptr  4
.text:00413CD0 dwFlags         = dword ptr  8
.text:00413CD0 lpMem           = dword ptr  0Ch
.text:00413CD0
.text:00413CD0                 jmp     ds:__imp_HeapFree
.text:00413CD0 HeapFree        endp
.text:00413CD0
.text:00413CD0 ; ---------------------------------------------------------------------------
.text:00413CD6                 align 10h
.text:00413CE0
.text:00413CE0 ; =============== S U B R O U T I N E =======================================
.text:00413CE0
.text:00413CE0 ; Attributes: thunk
.text:00413CE0
.text:00413CE0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00413CE0 GetTimeZoneInformation proc near        ; CODE XREF: sub_410690+22↑p
.text:00413CE0
.text:00413CE0 lpTimeZoneInformation= dword ptr  4
.text:00413CE0
.text:00413CE0                 jmp     ds:__imp_GetTimeZoneInformation
.text:00413CE0 GetTimeZoneInformation endp
.text:00413CE0
.text:00413CE0 ; ---------------------------------------------------------------------------
.text:00413CE6                 align 10h
.text:00413CF0
.text:00413CF0 ; =============== S U B R O U T I N E =======================================
.text:00413CF0
.text:00413CF0 ; Attributes: thunk
.text:00413CF0
.text:00413CF0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00413CF0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_410690+4F↑p
.text:00413CF0
.text:00413CF0 lpSystemTimeAsFileTime= dword ptr  4
.text:00413CF0
.text:00413CF0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00413CF0 GetSystemTimeAsFileTime endp
.text:00413CF0
.text:00413CF0 ; ---------------------------------------------------------------------------
.text:00413CF6                 align 10h
.text:00413D00
.text:00413D00 ; =============== S U B R O U T I N E =======================================
.text:00413D00
.text:00413D00 ; Attributes: thunk
.text:00413D00
.text:00413D00 ; BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency)
.text:00413D00 QueryPerformanceFrequency proc near     ; CODE XREF: sub_410780+27↑p
.text:00413D00
.text:00413D00 lpFrequency     = dword ptr  4
.text:00413D00
.text:00413D00                 jmp     ds:__imp_QueryPerformanceFrequency
.text:00413D00 QueryPerformanceFrequency endp
.text:00413D00
.text:00413D00 ; ---------------------------------------------------------------------------
.text:00413D06                 align 10h
.text:00413D10
.text:00413D10 ; =============== S U B R O U T I N E =======================================
.text:00413D10
.text:00413D10 ; Attributes: thunk
.text:00413D10
.text:00413D10 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00413D10 CreateDirectoryA proc near              ; CODE XREF: sub_411170+22↑p
.text:00413D10
.text:00413D10 lpPathName      = dword ptr  4
.text:00413D10 lpSecurityAttributes= dword ptr  8
.text:00413D10
.text:00413D10                 jmp     ds:__imp_CreateDirectoryA
.text:00413D10 CreateDirectoryA endp
.text:00413D10
.text:00413D10 ; ---------------------------------------------------------------------------
.text:00413D16                 align 10h
.text:00413D20
.text:00413D20 ; =============== S U B R O U T I N E =======================================
.text:00413D20
.text:00413D20 ; Attributes: thunk
.text:00413D20
.text:00413D20 ; BOOL __stdcall AreFileApisANSI()
.text:00413D20 AreFileApisANSI proc near               ; CODE XREF: sub_411370+89↑p
.text:00413D20                 jmp     ds:__imp_AreFileApisANSI
.text:00413D20 AreFileApisANSI endp
.text:00413D20
.text:00413D20 ; ---------------------------------------------------------------------------
.text:00413D26                 align 10h
.text:00413D30
.text:00413D30 ; =============== S U B R O U T I N E =======================================
.text:00413D30
.text:00413D30 ; Attributes: thunk
.text:00413D30
.text:00413D30 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00413D30 MultiByteToWideChar proc near           ; CODE XREF: sub_411370+BD↑p
.text:00413D30
.text:00413D30 CodePage        = dword ptr  4
.text:00413D30 dwFlags         = dword ptr  8
.text:00413D30 lpMultiByteStr  = dword ptr  0Ch
.text:00413D30 cbMultiByte     = dword ptr  10h
.text:00413D30 lpWideCharStr   = dword ptr  14h
.text:00413D30 cchWideChar     = dword ptr  18h
.text:00413D30
.text:00413D30                 jmp     ds:__imp_MultiByteToWideChar
.text:00413D30 MultiByteToWideChar endp
.text:00413D30
.text:00413D30 ; ---------------------------------------------------------------------------
.text:00413D36                 align 10h
.text:00413D40
.text:00413D40 ; =============== S U B R O U T I N E =======================================
.text:00413D40
.text:00413D40 ; Attributes: thunk
.text:00413D40
.text:00413D40 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00413D40 lstrcpyA        proc near               ; CODE XREF: sub_411370+128↑p
.text:00413D40
.text:00413D40 lpString1       = dword ptr  4
.text:00413D40 lpString2       = dword ptr  8
.text:00413D40
.text:00413D40                 jmp     ds:__imp_lstrcpyA
.text:00413D40 lstrcpyA        endp
.text:00413D40
.text:00413D40 ; ---------------------------------------------------------------------------
.text:00413D46                 align 10h
.text:00413D50
.text:00413D50 ; =============== S U B R O U T I N E =======================================
.text:00413D50
.text:00413D50 ; Attributes: thunk
.text:00413D50
.text:00413D50 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00413D50 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040F2A1↑p
.text:00413D50
.text:00413D50 hKey            = dword ptr  4
.text:00413D50 lpSubKey        = dword ptr  8
.text:00413D50 ulOptions       = dword ptr  0Ch
.text:00413D50 samDesired      = dword ptr  10h
.text:00413D50 phkResult       = dword ptr  14h
.text:00413D50
.text:00413D50                 jmp     ds:__imp_RegOpenKeyExA
.text:00413D50 RegOpenKeyExA   endp
.text:00413D50
.text:00413D50 ; ---------------------------------------------------------------------------
.text:00413D56                 align 10h
.text:00413D60
.text:00413D60 ; =============== S U B R O U T I N E =======================================
.text:00413D60
.text:00413D60 ; Attributes: thunk
.text:00413D60
.text:00413D60 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00413D60 RegQueryValueExA proc near              ; CODE XREF: .text:0040F2E4↑p
.text:00413D60
.text:00413D60 hKey            = dword ptr  4
.text:00413D60 lpValueName     = dword ptr  8
.text:00413D60 lpReserved      = dword ptr  0Ch
.text:00413D60 lpType          = dword ptr  10h
.text:00413D60 lpData          = dword ptr  14h
.text:00413D60 lpcbData        = dword ptr  18h
.text:00413D60
.text:00413D60                 jmp     ds:__imp_RegQueryValueExA
.text:00413D60 RegQueryValueExA endp
.text:00413D60
.text:00413D60 ; ---------------------------------------------------------------------------
.text:00413D66                 align 10h
.text:00413D70
.text:00413D70 ; =============== S U B R O U T I N E =======================================
.text:00413D70
.text:00413D70 ; Attributes: thunk
.text:00413D70
.text:00413D70 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00413D70 RegCloseKey     proc near               ; CODE XREF: .text:0040F308↑p
.text:00413D70
.text:00413D70 hKey            = dword ptr  4
.text:00413D70
.text:00413D70                 jmp     ds:__imp_RegCloseKey
.text:00413D70 RegCloseKey     endp
.text:00413D70
.text:00413D70 ; ---------------------------------------------------------------------------
.text:00413D76                 db 2 dup(90h)
.text:00413D78                 dd 2 dup(0)
.text:00413D80                 dd 21400h, 0
.text:00413D88                 dd 0C0h, 46000000h
.text:00413D90 ; const IID rclsid
.text:00413D90 rclsid          dd 21401h               ; Data1
.text:00413D90                                         ; DATA XREF: sub_411370+4B↑o
.text:00413D90                 dw 0                    ; Data2
.text:00413D90                 dw 0                    ; Data3
.text:00413D90                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413DA0                 dd 214A0h, 0
.text:00413DA8                 dd 0C0h, 46000000h, 214A1h, 0
.text:00413DB8                 dd 0C0h, 46000000h, 214D0h, 0
.text:00413DC8                 dd 0C0h, 46000000h, 214D1h, 0
.text:00413DD8                 dd 0C0h, 46000000h, 214D2h, 0
.text:00413DE8                 dd 0C0h, 46000000h, 214E1h, 0
.text:00413DF8                 dd 0C0h, 46000000h, 214E2h, 0
.text:00413E08                 dd 0C0h, 46000000h, 214E3h, 0
.text:00413E18                 dd 0C0h, 46000000h, 214E4h, 0
.text:00413E28                 dd 0C0h, 46000000h, 21500h, 0
.text:00413E38                 dd 0C0h, 46000000h, 214E5h, 0
.text:00413E48                 dd 0C0h, 46000000h, 214E6h, 0
.text:00413E58                 dd 0C0h, 46000000h, 214E8h, 0
.text:00413E68                 dd 0C0h, 46000000h, 214E9h, 0
.text:00413E78                 dd 0C0h, 46000000h, 214EAh, 0
.text:00413E88                 dd 0C0h, 46000000h, 214EBh, 0
.text:00413E98                 dd 0C0h, 46000000h
.text:00413EA0 ; const IID riid
.text:00413EA0 riid            dd 214EEh               ; Data1
.text:00413EA0                                         ; DATA XREF: sub_411370+2B↑o
.text:00413EA0                 dw 0                    ; Data2
.text:00413EA0                 dw 0                    ; Data3
.text:00413EA0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413EB0                 dd 214EFh, 0
.text:00413EB8                 dd 0C0h, 46000000h, 214F0h, 0
.text:00413EC8                 dd 0C0h, 46000000h, 214F1h, 0
.text:00413ED8                 dd 0C0h, 46000000h, 214F2h, 0
.text:00413EE8                 dd 0C0h, 46000000h, 214F3h, 0
.text:00413EF8                 dd 0C0h, 46000000h, 214F4h, 0
.text:00413F08                 dd 0C0h, 46000000h, 214F5h, 0
.text:00413F18                 dd 0C0h, 46000000h, 214F6h, 0
.text:00413F28                 dd 0C0h, 46000000h, 214F7h, 0
.text:00413F38                 dd 0C0h, 46000000h, 214F8h, 0
.text:00413F48                 dd 0C0h, 46000000h, 214F9h, 0
.text:00413F58                 dd 0C0h, 46000000h, 214FAh, 0
.text:00413F68                 dd 0C0h, 46000000h, 214FBh, 0
.text:00413F78                 dd 0C0h, 46000000h, 214FCh, 0
.text:00413F88                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00413F88                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00413F88                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00413F88                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00413F88                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413F88                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00413F88                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00413F88                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413F88                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00413F88                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00414058                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00414068                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00414078                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00414088                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00414098                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00414098                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00414098                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00414098                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00414098                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00414098                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00414098                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00414120 dword_414120    dd 0FFFFFFFFh           ; DATA XREF: .text:00412B39↑r
.text:00414120                                         ; .text:loc_412B60↑r ...
.text:00414124 dword_414124    dd 0                    ; DATA XREF: .text:loc_412B6C↑r
.text:00414124                                         ; sub_412B90:loc_412BDD↑r
.text:00414128                 dd 0FFFFFFFFh
.text:0041412C dword_41412C    dd 35h dup(0)           ; DATA XREF: .data:off_4150F4↓o
.text:00414200                 dd 380h dup(?)
.text:00414200 _text           ends
.text:00414200
.data:00415000 ; Section 2. (virtual address 00015000)
.data:00415000 ; Virtual size                  : 00000110 (    272.)
.data:00415000 ; Section size in file          : 00000200 (    512.)
.data:00415000 ; Offset to raw data for section: 00013600
.data:00415000 ; Flags C0000040: Data Readable Writable
.data:00415000 ; Alignment     : default
.data:00415000 ; ===========================================================================
.data:00415000
.data:00415000 ; Segment type: Pure data
.data:00415000 ; Segment permissions: Read/Write
.data:00415000 _data           segment para public 'DATA' use32
.data:00415000                 assume cs:_data
.data:00415000                 ;org 415000h
.data:00415000 dword_415000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00415000                                         ; sub_401080+CC↑r
.data:00415004 dword_415004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00415004                                         ; sub_401080+D4↑r
.data:00415008                 align 10h
.data:00415010 dword_415010    dd 2                    ; DATA XREF: sub_4014E0+190↑r
.data:00415010                                         ; sub_402620+23↑r ...
.data:00415014                 align 8
.data:00415018 dword_415018    dd 5                    ; DATA XREF: sub_402620+4CA↑r
.data:00415018                                         ; sub_403760+552↑o
.data:0041501C dword_41501C    dd 0                    ; DATA XREF: sub_402620+4DC↑r
.data:00415020 byte_415020     db 1                    ; DATA XREF: sub_402620+39D↑r
.data:00415020                                         ; sub_402620+3C3↑w ...
.data:00415021                 align 4
.data:00415024 off_415024      dd offset byte_401430   ; DATA XREF: sub_4014E0+37E↑o
.data:00415028                 align 10h
.data:00415030 dword_415030    dd 1                    ; DATA XREF: sub_4014E0:loc_401610↑r
.data:00415030                                         ; sub_406B60+3↑r ...
.data:00415034 dword_415034    dd 1                    ; DATA XREF: sub_406B60+11↑r
.data:00415034                                         ; .text:00406C01↑r
.data:00415038 dword_415038    dd 3Fh                  ; DATA XREF: sub_406B60+7D↑w
.data:00415038                                         ; .text:00406C6D↑w
.data:0041503C                 align 10h
.data:00415040 ; int off_415040
.data:00415040 off_415040      dd offset sub_407330    ; DATA XREF: sub_403760+331↑r
.data:00415044                 align 10h
.data:00415050 ; char *Buffer
.data:00415050 Buffer          dd offset aCopyrightC2005
.data:00415050                                         ; DATA XREF: sub_407A20+DC↑r
.data:00415050                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00415054                 align 10h
.data:00415060 dword_415060    dd 1                    ; DATA XREF: sub_40A850+22↑r
.data:00415060                                         ; sub_40A850+65↑r ...
.data:00415064 dword_415064    dd 100h                 ; DATA XREF: sub_40A850+3F↑o
.data:00415064                                         ; sub_40A850+1A2↑r ...
.data:00415068 off_415068      dd offset unk_4160C0    ; DATA XREF: sub_40A850+1AA↑r
.data:0041506C ; void *off_41506C
.data:0041506C off_41506C      dd offset dword_415064  ; DATA XREF: sub_40A850+39↑r
.data:0041506C                                         ; sub_40A850+60↑w ...
.data:00415070 ; int Code
.data:00415070 Code            dd 1                    ; DATA XREF: sub_407650+6D↑r
.data:00415070                                         ; sub_407650+9A↑r ...
.data:00415074                 align 10h
.data:00415080 dword_415080    dd 200h                 ; DATA XREF: sub_40B090+6CD↑r
.data:00415080                                         ; sub_40B090+6D8↑r ...
.data:00415084 ; char *off_415084
.data:00415084 off_415084      dd offset aComExeBatCmd ; DATA XREF: sub_40B940+3D3↑r
.data:00415084                                         ; sub_40B940+400↑r ...
.data:00415084                                         ; ".com;.exe;.bat;.cmd"
.data:00415088                 align 10h
.data:00415090 byte_415090     db 41h                  ; DATA XREF: sub_40D610+6B↑w
.data:00415090                                         ; sub_40D610:loc_40D724↑r
.data:00415091                 align 10h
.data:004150A0 dword_4150A0    dd 1                    ; DATA XREF: .text:loc_40F157↑r
.data:004150A0                                         ; sub_40F730+202↑w
.data:004150A4                 align 10h
.data:004150B0 off_4150B0      dd offset aNotset       ; DATA XREF: .text:0040F9AA↑r
.data:004150B0                                         ; .text:004105F2↑r
.data:004150B0                                         ; "notset"
.data:004150B4 off_4150B4      dd offset aNotset       ; DATA XREF: .text:0040F9C2↑r
.data:004150B4                                         ; .text:0040F9E4↑r ...
.data:004150B4                                         ; "notset"
.data:004150B8                 align 10h
.data:004150C0 dword_4150C0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004150C4                 align 10h
.data:004150D0 ; int Mode
.data:004150D0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004150D0                                         ; sub_401080+80↑r ...
.data:004150D4                 align 10h
.data:004150E0 dword_4150E0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004150E0                                         ; sub_401080+BA↑r
.data:004150E4                 align 10h
.data:004150F0 dword_4150F0    dd 0                    ; DATA XREF: sub_412B90+9↑r
.data:004150F0                                         ; sub_412B90+1D↑w
.data:004150F4 off_4150F4      dd offset dword_41412C  ; DATA XREF: sub_412B00+6↑r
.data:004150F4                                         ; sub_412B00+17↑r ...
.data:004150F8                 align 1000h
.data:004150F8 _data           ends
.data:004150F8
.bss:00416000 ; Section 3. (virtual address 00016000)
.bss:00416000 ; Virtual size                  : 000005F0 (   1520.)
.bss:00416000 ; Section size in file          : 00000000 (      0.)
.bss:00416000 ; Offset to raw data for section: 00000000
.bss:00416000 ; Flags C0000080: Bss Readable Writable
.bss:00416000 ; Alignment     : default
.bss:00416000 ; ===========================================================================
.bss:00416000
.bss:00416000 ; Segment type: Uninitialized
.bss:00416000 ; Segment permissions: Read/Write
.bss:00416000 _bss            segment para public 'BSS' use32
.bss:00416000                 assume cs:_bss
.bss:00416000                 ;org 416000h
.bss:00416000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00416000 byte_416000     db ?                    ; DATA XREF: sub_402620:loc_4026F3↑r
.bss:00416000                                         ; sub_402D60+5A↑r ...
.bss:00416001                 align 10h
.bss:00416010 byte_416010     db ?                    ; DATA XREF: sub_4014E0+A9↑w
.bss:00416010                                         ; sub_402D60:loc_402E56↑r ...
.bss:00416011                 align 10h
.bss:00416020 byte_416020     db ?                    ; DATA XREF: sub_4014E0+BE↑w
.bss:00416020                                         ; sub_4014E0:loc_401680↑r ...
.bss:00416021                 align 10h
.bss:00416030 byte_416030     db ?                    ; DATA XREF: sub_4014E0+B7↑w
.bss:00416030                                         ; sub_4014E0+FA↑r ...
.bss:00416031                 align 10h
.bss:00416040 byte_416040     db ?                    ; DATA XREF: sub_4014E0+B0↑w
.bss:00416040                                         ; sub_4014E0:loc_4016EF↑w ...
.bss:00416041                 align 10h
.bss:00416050 ; DWORD dword_416050
.bss:00416050 dword_416050    dd ?                    ; DATA XREF: sub_402620+A↑r
.bss:00416050                                         ; sub_402620:loc_40274B↑r ...
.bss:00416054                 align 10h
.bss:00416060 byte_416060     db ?                    ; DATA XREF: sub_4014E0+A2↑w
.bss:00416060                                         ; sub_4014E0:loc_40176C↑r ...
.bss:00416061                 align 10h
.bss:00416070 byte_416070     db ?                    ; DATA XREF: sub_403760:loc_403C98↑w
.bss:00416070                                         ; sub_404880+5E↑r ...
.bss:00416071                 align 10h
.bss:00416080 dword_416080    dd ?                    ; DATA XREF: sub_406B60+9↑o
.bss:00416080                                         ; sub_406B60+17↑w ...
.bss:00416084 dword_416084    dd ?                    ; DATA XREF: sub_406B60+21↑w
.bss:00416084                                         ; .text:00406C19↑w
.bss:00416088 dword_416088    dd ?                    ; DATA XREF: sub_406B60+77↑r
.bss:00416088                                         ; .text:00406C67↑r
.bss:0041608C dword_41608C    dd ?                    ; DATA XREF: sub_406B60+6B↑r
.bss:0041608C                                         ; .text:00406C5B↑r
.bss:00416090                 db    ? ;
.bss:00416091                 db    ? ;
.bss:00416092                 db    ? ;
.bss:00416093                 db    ? ;
.bss:00416094                 db    ? ;
.bss:00416095                 db    ? ;
.bss:00416096                 db    ? ;
.bss:00416097                 db    ? ;
.bss:00416098                 db    ? ;
.bss:00416099                 db    ? ;
.bss:0041609A                 db    ? ;
.bss:0041609B                 db    ? ;
.bss:0041609C                 db    ? ;
.bss:0041609D                 db    ? ;
.bss:0041609E                 db    ? ;
.bss:0041609F                 db    ? ;
.bss:004160A0                 db    ? ;
.bss:004160A1                 db    ? ;
.bss:004160A2                 db    ? ;
.bss:004160A3                 db    ? ;
.bss:004160A4                 db    ? ;
.bss:004160A5                 db    ? ;
.bss:004160A6                 db    ? ;
.bss:004160A7                 db    ? ;
.bss:004160A8                 db    ? ;
.bss:004160A9                 db    ? ;
.bss:004160AA                 db    ? ;
.bss:004160AB                 db    ? ;
.bss:004160AC                 db    ? ;
.bss:004160AD                 db    ? ;
.bss:004160AE                 db    ? ;
.bss:004160AF                 db    ? ;
.bss:004160B0 ; char *dword_4160B0
.bss:004160B0 dword_4160B0    dd ?                    ; DATA XREF: .text:00407624↑w
.bss:004160B0                                         ; sub_407650+58↑r
.bss:004160B4                 align 10h
.bss:004160C0 unk_4160C0      db    ? ;               ; DATA XREF: sub_40A850+100↑o
.bss:004160C0                                         ; .data:off_415068↑o
.bss:004160C1                 db    ? ;
.bss:004160C2                 db    ? ;
.bss:004160C3                 db    ? ;
.bss:004160C4                 db    ? ;
.bss:004160C5                 db    ? ;
.bss:004160C6                 db    ? ;
.bss:004160C7                 db    ? ;
.bss:004160C8                 db    ? ;
.bss:004160C9                 db    ? ;
.bss:004160CA                 db    ? ;
.bss:004160CB                 db    ? ;
.bss:004160CC                 db    ? ;
.bss:004160CD                 db    ? ;
.bss:004160CE                 db    ? ;
.bss:004160CF                 db    ? ;
.bss:004160D0                 db    ? ;
.bss:004160D1                 db    ? ;
.bss:004160D2                 db    ? ;
.bss:004160D3                 db    ? ;
.bss:004160D4                 db    ? ;
.bss:004160D5                 db    ? ;
.bss:004160D6                 db    ? ;
.bss:004160D7                 db    ? ;
.bss:004160D8                 db    ? ;
.bss:004160D9                 db    ? ;
.bss:004160DA                 db    ? ;
.bss:004160DB                 db    ? ;
.bss:004160DC                 db    ? ;
.bss:004160DD                 db    ? ;
.bss:004160DE                 db    ? ;
.bss:004160DF                 db    ? ;
.bss:004160E0                 db    ? ;
.bss:004160E1                 db    ? ;
.bss:004160E2                 db    ? ;
.bss:004160E3                 db    ? ;
.bss:004160E4                 db    ? ;
.bss:004160E5                 db    ? ;
.bss:004160E6                 db    ? ;
.bss:004160E7                 db    ? ;
.bss:004160E8                 db    ? ;
.bss:004160E9                 db    ? ;
.bss:004160EA                 db    ? ;
.bss:004160EB                 db    ? ;
.bss:004160EC                 db    ? ;
.bss:004160ED                 db    ? ;
.bss:004160EE                 db    ? ;
.bss:004160EF                 db    ? ;
.bss:004160F0                 db    ? ;
.bss:004160F1                 db    ? ;
.bss:004160F2                 db    ? ;
.bss:004160F3                 db    ? ;
.bss:004160F4                 db    ? ;
.bss:004160F5                 db    ? ;
.bss:004160F6                 db    ? ;
.bss:004160F7                 db    ? ;
.bss:004160F8                 db    ? ;
.bss:004160F9                 db    ? ;
.bss:004160FA                 db    ? ;
.bss:004160FB                 db    ? ;
.bss:004160FC                 db    ? ;
.bss:004160FD                 db    ? ;
.bss:004160FE                 db    ? ;
.bss:004160FF                 db    ? ;
.bss:00416100                 db    ? ;
.bss:00416101                 db    ? ;
.bss:00416102                 db    ? ;
.bss:00416103                 db    ? ;
.bss:00416104                 db    ? ;
.bss:00416105                 db    ? ;
.bss:00416106                 db    ? ;
.bss:00416107                 db    ? ;
.bss:00416108                 db    ? ;
.bss:00416109                 db    ? ;
.bss:0041610A                 db    ? ;
.bss:0041610B                 db    ? ;
.bss:0041610C                 db    ? ;
.bss:0041610D                 db    ? ;
.bss:0041610E                 db    ? ;
.bss:0041610F                 db    ? ;
.bss:00416110                 db    ? ;
.bss:00416111                 db    ? ;
.bss:00416112                 db    ? ;
.bss:00416113                 db    ? ;
.bss:00416114                 db    ? ;
.bss:00416115                 db    ? ;
.bss:00416116                 db    ? ;
.bss:00416117                 db    ? ;
.bss:00416118                 db    ? ;
.bss:00416119                 db    ? ;
.bss:0041611A                 db    ? ;
.bss:0041611B                 db    ? ;
.bss:0041611C                 db    ? ;
.bss:0041611D                 db    ? ;
.bss:0041611E                 db    ? ;
.bss:0041611F                 db    ? ;
.bss:00416120                 db    ? ;
.bss:00416121                 db    ? ;
.bss:00416122                 db    ? ;
.bss:00416123                 db    ? ;
.bss:00416124                 db    ? ;
.bss:00416125                 db    ? ;
.bss:00416126                 db    ? ;
.bss:00416127                 db    ? ;
.bss:00416128                 db    ? ;
.bss:00416129                 db    ? ;
.bss:0041612A                 db    ? ;
.bss:0041612B                 db    ? ;
.bss:0041612C                 db    ? ;
.bss:0041612D                 db    ? ;
.bss:0041612E                 db    ? ;
.bss:0041612F                 db    ? ;
.bss:00416130                 db    ? ;
.bss:00416131                 db    ? ;
.bss:00416132                 db    ? ;
.bss:00416133                 db    ? ;
.bss:00416134                 db    ? ;
.bss:00416135                 db    ? ;
.bss:00416136                 db    ? ;
.bss:00416137                 db    ? ;
.bss:00416138                 db    ? ;
.bss:00416139                 db    ? ;
.bss:0041613A                 db    ? ;
.bss:0041613B                 db    ? ;
.bss:0041613C                 db    ? ;
.bss:0041613D                 db    ? ;
.bss:0041613E                 db    ? ;
.bss:0041613F                 db    ? ;
.bss:00416140                 db    ? ;
.bss:00416141                 db    ? ;
.bss:00416142                 db    ? ;
.bss:00416143                 db    ? ;
.bss:00416144                 db    ? ;
.bss:00416145                 db    ? ;
.bss:00416146                 db    ? ;
.bss:00416147                 db    ? ;
.bss:00416148                 db    ? ;
.bss:00416149                 db    ? ;
.bss:0041614A                 db    ? ;
.bss:0041614B                 db    ? ;
.bss:0041614C                 db    ? ;
.bss:0041614D                 db    ? ;
.bss:0041614E                 db    ? ;
.bss:0041614F                 db    ? ;
.bss:00416150                 db    ? ;
.bss:00416151                 db    ? ;
.bss:00416152                 db    ? ;
.bss:00416153                 db    ? ;
.bss:00416154                 db    ? ;
.bss:00416155                 db    ? ;
.bss:00416156                 db    ? ;
.bss:00416157                 db    ? ;
.bss:00416158                 db    ? ;
.bss:00416159                 db    ? ;
.bss:0041615A                 db    ? ;
.bss:0041615B                 db    ? ;
.bss:0041615C                 db    ? ;
.bss:0041615D                 db    ? ;
.bss:0041615E                 db    ? ;
.bss:0041615F                 db    ? ;
.bss:00416160                 db    ? ;
.bss:00416161                 db    ? ;
.bss:00416162                 db    ? ;
.bss:00416163                 db    ? ;
.bss:00416164                 db    ? ;
.bss:00416165                 db    ? ;
.bss:00416166                 db    ? ;
.bss:00416167                 db    ? ;
.bss:00416168                 db    ? ;
.bss:00416169                 db    ? ;
.bss:0041616A                 db    ? ;
.bss:0041616B                 db    ? ;
.bss:0041616C                 db    ? ;
.bss:0041616D                 db    ? ;
.bss:0041616E                 db    ? ;
.bss:0041616F                 db    ? ;
.bss:00416170                 db    ? ;
.bss:00416171                 db    ? ;
.bss:00416172                 db    ? ;
.bss:00416173                 db    ? ;
.bss:00416174                 db    ? ;
.bss:00416175                 db    ? ;
.bss:00416176                 db    ? ;
.bss:00416177                 db    ? ;
.bss:00416178                 db    ? ;
.bss:00416179                 db    ? ;
.bss:0041617A                 db    ? ;
.bss:0041617B                 db    ? ;
.bss:0041617C                 db    ? ;
.bss:0041617D                 db    ? ;
.bss:0041617E                 db    ? ;
.bss:0041617F                 db    ? ;
.bss:00416180                 db    ? ;
.bss:00416181                 db    ? ;
.bss:00416182                 db    ? ;
.bss:00416183                 db    ? ;
.bss:00416184                 db    ? ;
.bss:00416185                 db    ? ;
.bss:00416186                 db    ? ;
.bss:00416187                 db    ? ;
.bss:00416188                 db    ? ;
.bss:00416189                 db    ? ;
.bss:0041618A                 db    ? ;
.bss:0041618B                 db    ? ;
.bss:0041618C                 db    ? ;
.bss:0041618D                 db    ? ;
.bss:0041618E                 db    ? ;
.bss:0041618F                 db    ? ;
.bss:00416190                 db    ? ;
.bss:00416191                 db    ? ;
.bss:00416192                 db    ? ;
.bss:00416193                 db    ? ;
.bss:00416194                 db    ? ;
.bss:00416195                 db    ? ;
.bss:00416196                 db    ? ;
.bss:00416197                 db    ? ;
.bss:00416198                 db    ? ;
.bss:00416199                 db    ? ;
.bss:0041619A                 db    ? ;
.bss:0041619B                 db    ? ;
.bss:0041619C                 db    ? ;
.bss:0041619D                 db    ? ;
.bss:0041619E                 db    ? ;
.bss:0041619F                 db    ? ;
.bss:004161A0                 db    ? ;
.bss:004161A1                 db    ? ;
.bss:004161A2                 db    ? ;
.bss:004161A3                 db    ? ;
.bss:004161A4                 db    ? ;
.bss:004161A5                 db    ? ;
.bss:004161A6                 db    ? ;
.bss:004161A7                 db    ? ;
.bss:004161A8                 db    ? ;
.bss:004161A9                 db    ? ;
.bss:004161AA                 db    ? ;
.bss:004161AB                 db    ? ;
.bss:004161AC                 db    ? ;
.bss:004161AD                 db    ? ;
.bss:004161AE                 db    ? ;
.bss:004161AF                 db    ? ;
.bss:004161B0                 db    ? ;
.bss:004161B1                 db    ? ;
.bss:004161B2                 db    ? ;
.bss:004161B3                 db    ? ;
.bss:004161B4                 db    ? ;
.bss:004161B5                 db    ? ;
.bss:004161B6                 db    ? ;
.bss:004161B7                 db    ? ;
.bss:004161B8                 db    ? ;
.bss:004161B9                 db    ? ;
.bss:004161BA                 db    ? ;
.bss:004161BB                 db    ? ;
.bss:004161BC                 db    ? ;
.bss:004161BD                 db    ? ;
.bss:004161BE                 db    ? ;
.bss:004161BF                 db    ? ;
.bss:004161C0 dword_4161C0    dd ?                    ; DATA XREF: .text:loc_40A1E1↑o
.bss:004161C0                                         ; .text:loc_40A200↑o ...
.bss:004161C4 dword_4161C4    dd ?                    ; DATA XREF: .text:loc_40A280↑o
.bss:004161C4                                         ; .text:0040A708↑r ...
.bss:004161C8 dword_4161C8    dd ?                    ; DATA XREF: .text:0040A702↑r
.bss:004161C8                                         ; sub_40A7B0+2C↑r
.bss:004161CC dword_4161CC    dd ?                    ; DATA XREF: .text:0040A6F6↑r
.bss:004161CC                                         ; sub_40A7B0+22↑r
.bss:004161D0 dword_4161D0    dd ?                    ; DATA XREF: .text:0040A712↑r
.bss:004161D0                                         ; sub_40A7B0+36↑r
.bss:004161D4 dword_4161D4    dd ?                    ; DATA XREF: .text:0040A722↑r
.bss:004161D4                                         ; sub_40A7B0+4E↑r
.bss:004161D8 dword_4161D8    dd ?                    ; DATA XREF: .text:0040A73F↑r
.bss:004161D8                                         ; sub_40A7B0+62↑r
.bss:004161DC dword_4161DC    dd ?                    ; DATA XREF: .text:0040A735↑r
.bss:004161DC                                         ; sub_40A7B0+70↑r
.bss:004161E0 dword_4161E0    dd ?                    ; DATA XREF: .text:0040A718↑r
.bss:004161E0                                         ; sub_40A7B0+7A↑r
.bss:004161E4                 align 10h
.bss:004161F0 ; char *Str1
.bss:004161F0 Str1            dd ?                    ; DATA XREF: sub_40AC84:loc_40ACBD↑w
.bss:004161F0                                         ; sub_40AC84:loc_40ADF0↑r
.bss:004161F4                 align 10h
.bss:00416200 dword_416200    dd ?                    ; DATA XREF: sub_40AC84+2D↑r
.bss:00416200                                         ; sub_40AC84+3F↑w
.bss:00416204                 align 10h
.bss:00416210 dword_416210    dd ?                    ; DATA XREF: sub_40B940+100↑r
.bss:00416210                                         ; sub_40B940+308↑w
.bss:00416214                 align 10h
.bss:00416220 ; char *Str
.bss:00416220 Str             dd ?                    ; DATA XREF: sub_40B940:loc_40BCA4↑r
.bss:00416220                                         ; sub_40B940+3B6↑r ...
.bss:00416224                 align 10h
.bss:00416230 dword_416230    dd ?                    ; DATA XREF: sub_40D610+1C↑r
.bss:00416230                                         ; sub_40D610+104↑w
.bss:00416234                 align 10h
.bss:00416240 dword_416240    dd ?                    ; DATA XREF: sub_40D610+B↑r
.bss:00416240                                         ; sub_40D610+71↑w
.bss:00416244                 align 10h
.bss:00416250 dword_416250    dd ?                    ; DATA XREF: sub_40D610+85↑r
.bss:00416250                                         ; sub_40D610+B9↑w
.bss:00416254 dword_416254    dd ?                    ; DATA XREF: sub_40D610+C4↑w
.bss:00416258 dword_416258    dd ?                    ; DATA XREF: sub_40D610+2E↑o
.bss:00416258                                         ; sub_40D610+CF↑w
.bss:0041625C dword_41625C    dd ?                    ; DATA XREF: sub_40D610+DA↑w
.bss:00416260                 db    ? ;
.bss:00416261                 db    ? ;
.bss:00416262                 db    ? ;
.bss:00416263                 db    ? ;
.bss:00416264                 db    ? ;
.bss:00416265                 db    ? ;
.bss:00416266                 db    ? ;
.bss:00416267                 db    ? ;
.bss:00416268                 db    ? ;
.bss:00416269                 db    ? ;
.bss:0041626A                 db    ? ;
.bss:0041626B                 db    ? ;
.bss:0041626C                 db    ? ;
.bss:0041626D                 db    ? ;
.bss:0041626E                 db    ? ;
.bss:0041626F                 db    ? ;
.bss:00416270                 db    ? ;
.bss:00416271                 db    ? ;
.bss:00416272                 db    ? ;
.bss:00416273                 db    ? ;
.bss:00416274                 db    ? ;
.bss:00416275                 db    ? ;
.bss:00416276                 db    ? ;
.bss:00416277                 db    ? ;
.bss:00416278                 db    ? ;
.bss:00416279                 db    ? ;
.bss:0041627A                 db    ? ;
.bss:0041627B                 db    ? ;
.bss:0041627C                 db    ? ;
.bss:0041627D                 db    ? ;
.bss:0041627E                 db    ? ;
.bss:0041627F                 db    ? ;
.bss:00416280                 db    ? ;
.bss:00416281                 db    ? ;
.bss:00416282                 db    ? ;
.bss:00416283                 db    ? ;
.bss:00416284                 db    ? ;
.bss:00416285                 db    ? ;
.bss:00416286                 db    ? ;
.bss:00416287                 db    ? ;
.bss:00416288                 db    ? ;
.bss:00416289                 db    ? ;
.bss:0041628A                 db    ? ;
.bss:0041628B                 db    ? ;
.bss:0041628C                 db    ? ;
.bss:0041628D                 db    ? ;
.bss:0041628E                 db    ? ;
.bss:0041628F                 db    ? ;
.bss:00416290                 db    ? ;
.bss:00416291                 db    ? ;
.bss:00416292                 db    ? ;
.bss:00416293                 db    ? ;
.bss:00416294                 db    ? ;
.bss:00416295                 db    ? ;
.bss:00416296                 db    ? ;
.bss:00416297                 db    ? ;
.bss:00416298                 db    ? ;
.bss:00416299                 db    ? ;
.bss:0041629A                 db    ? ;
.bss:0041629B                 db    ? ;
.bss:0041629C                 db    ? ;
.bss:0041629D                 db    ? ;
.bss:0041629E                 db    ? ;
.bss:0041629F                 db    ? ;
.bss:004162A0                 db    ? ;
.bss:004162A1                 db    ? ;
.bss:004162A2                 db    ? ;
.bss:004162A3                 db    ? ;
.bss:004162A4                 db    ? ;
.bss:004162A5                 db    ? ;
.bss:004162A6                 db    ? ;
.bss:004162A7                 db    ? ;
.bss:004162A8                 db    ? ;
.bss:004162A9                 db    ? ;
.bss:004162AA                 db    ? ;
.bss:004162AB                 db    ? ;
.bss:004162AC                 db    ? ;
.bss:004162AD                 db    ? ;
.bss:004162AE                 db    ? ;
.bss:004162AF                 db    ? ;
.bss:004162B0                 db    ? ;
.bss:004162B1                 db    ? ;
.bss:004162B2                 db    ? ;
.bss:004162B3                 db    ? ;
.bss:004162B4                 db    ? ;
.bss:004162B5                 db    ? ;
.bss:004162B6                 db    ? ;
.bss:004162B7                 db    ? ;
.bss:004162B8                 db    ? ;
.bss:004162B9                 db    ? ;
.bss:004162BA                 db    ? ;
.bss:004162BB                 db    ? ;
.bss:004162BC                 db    ? ;
.bss:004162BD                 db    ? ;
.bss:004162BE                 db    ? ;
.bss:004162BF                 db    ? ;
.bss:004162C0                 db    ? ;
.bss:004162C1                 db    ? ;
.bss:004162C2                 db    ? ;
.bss:004162C3                 db    ? ;
.bss:004162C4                 db    ? ;
.bss:004162C5                 db    ? ;
.bss:004162C6                 db    ? ;
.bss:004162C7                 db    ? ;
.bss:004162C8                 db    ? ;
.bss:004162C9                 db    ? ;
.bss:004162CA                 db    ? ;
.bss:004162CB                 db    ? ;
.bss:004162CC                 db    ? ;
.bss:004162CD                 db    ? ;
.bss:004162CE                 db    ? ;
.bss:004162CF                 db    ? ;
.bss:004162D0                 db    ? ;
.bss:004162D1                 db    ? ;
.bss:004162D2                 db    ? ;
.bss:004162D3                 db    ? ;
.bss:004162D4                 db    ? ;
.bss:004162D5                 db    ? ;
.bss:004162D6                 db    ? ;
.bss:004162D7                 db    ? ;
.bss:004162D8                 db    ? ;
.bss:004162D9                 db    ? ;
.bss:004162DA                 db    ? ;
.bss:004162DB                 db    ? ;
.bss:004162DC                 db    ? ;
.bss:004162DD                 db    ? ;
.bss:004162DE                 db    ? ;
.bss:004162DF                 db    ? ;
.bss:004162E0                 db    ? ;
.bss:004162E1                 db    ? ;
.bss:004162E2                 db    ? ;
.bss:004162E3                 db    ? ;
.bss:004162E4                 db    ? ;
.bss:004162E5                 db    ? ;
.bss:004162E6                 db    ? ;
.bss:004162E7                 db    ? ;
.bss:004162E8                 db    ? ;
.bss:004162E9                 db    ? ;
.bss:004162EA                 db    ? ;
.bss:004162EB                 db    ? ;
.bss:004162EC                 db    ? ;
.bss:004162ED                 db    ? ;
.bss:004162EE                 db    ? ;
.bss:004162EF                 db    ? ;
.bss:004162F0                 db    ? ;
.bss:004162F1                 db    ? ;
.bss:004162F2                 db    ? ;
.bss:004162F3                 db    ? ;
.bss:004162F4                 db    ? ;
.bss:004162F5                 db    ? ;
.bss:004162F6                 db    ? ;
.bss:004162F7                 db    ? ;
.bss:004162F8                 db    ? ;
.bss:004162F9                 db    ? ;
.bss:004162FA                 db    ? ;
.bss:004162FB                 db    ? ;
.bss:004162FC                 db    ? ;
.bss:004162FD                 db    ? ;
.bss:004162FE                 db    ? ;
.bss:004162FF                 db    ? ;
.bss:00416300                 db    ? ;
.bss:00416301                 db    ? ;
.bss:00416302                 db    ? ;
.bss:00416303                 db    ? ;
.bss:00416304                 db    ? ;
.bss:00416305                 db    ? ;
.bss:00416306                 db    ? ;
.bss:00416307                 db    ? ;
.bss:00416308                 db    ? ;
.bss:00416309                 db    ? ;
.bss:0041630A                 db    ? ;
.bss:0041630B                 db    ? ;
.bss:0041630C                 db    ? ;
.bss:0041630D                 db    ? ;
.bss:0041630E                 db    ? ;
.bss:0041630F                 db    ? ;
.bss:00416310                 db    ? ;
.bss:00416311                 db    ? ;
.bss:00416312                 db    ? ;
.bss:00416313                 db    ? ;
.bss:00416314                 db    ? ;
.bss:00416315                 db    ? ;
.bss:00416316                 db    ? ;
.bss:00416317                 db    ? ;
.bss:00416318                 db    ? ;
.bss:00416319                 db    ? ;
.bss:0041631A                 db    ? ;
.bss:0041631B                 db    ? ;
.bss:0041631C                 db    ? ;
.bss:0041631D                 db    ? ;
.bss:0041631E                 db    ? ;
.bss:0041631F                 db    ? ;
.bss:00416320                 db    ? ;
.bss:00416321                 db    ? ;
.bss:00416322                 db    ? ;
.bss:00416323                 db    ? ;
.bss:00416324                 db    ? ;
.bss:00416325                 db    ? ;
.bss:00416326                 db    ? ;
.bss:00416327                 db    ? ;
.bss:00416328                 db    ? ;
.bss:00416329                 db    ? ;
.bss:0041632A                 db    ? ;
.bss:0041632B                 db    ? ;
.bss:0041632C                 db    ? ;
.bss:0041632D                 db    ? ;
.bss:0041632E                 db    ? ;
.bss:0041632F                 db    ? ;
.bss:00416330                 db    ? ;
.bss:00416331                 db    ? ;
.bss:00416332                 db    ? ;
.bss:00416333                 db    ? ;
.bss:00416334                 db    ? ;
.bss:00416335                 db    ? ;
.bss:00416336                 db    ? ;
.bss:00416337                 db    ? ;
.bss:00416338                 db    ? ;
.bss:00416339                 db    ? ;
.bss:0041633A                 db    ? ;
.bss:0041633B                 db    ? ;
.bss:0041633C                 db    ? ;
.bss:0041633D                 db    ? ;
.bss:0041633E                 db    ? ;
.bss:0041633F                 db    ? ;
.bss:00416340                 db    ? ;
.bss:00416341                 db    ? ;
.bss:00416342                 db    ? ;
.bss:00416343                 db    ? ;
.bss:00416344                 db    ? ;
.bss:00416345                 db    ? ;
.bss:00416346                 db    ? ;
.bss:00416347                 db    ? ;
.bss:00416348                 db    ? ;
.bss:00416349                 db    ? ;
.bss:0041634A                 db    ? ;
.bss:0041634B                 db    ? ;
.bss:0041634C                 db    ? ;
.bss:0041634D                 db    ? ;
.bss:0041634E                 db    ? ;
.bss:0041634F                 db    ? ;
.bss:00416350                 db    ? ;
.bss:00416351                 db    ? ;
.bss:00416352                 db    ? ;
.bss:00416353                 db    ? ;
.bss:00416354                 db    ? ;
.bss:00416355                 db    ? ;
.bss:00416356                 db    ? ;
.bss:00416357                 db    ? ;
.bss:00416358                 db    ? ;
.bss:00416359                 db    ? ;
.bss:0041635A                 db    ? ;
.bss:0041635B                 db    ? ;
.bss:0041635C                 db    ? ;
.bss:0041635D                 db    ? ;
.bss:0041635E                 db    ? ;
.bss:0041635F                 db    ? ;
.bss:00416360                 db    ? ;
.bss:00416361                 db    ? ;
.bss:00416362                 db    ? ;
.bss:00416363                 db    ? ;
.bss:00416364                 db    ? ;
.bss:00416365                 db    ? ;
.bss:00416366                 db    ? ;
.bss:00416367                 db    ? ;
.bss:00416368                 db    ? ;
.bss:00416369                 db    ? ;
.bss:0041636A                 db    ? ;
.bss:0041636B                 db    ? ;
.bss:0041636C                 db    ? ;
.bss:0041636D                 db    ? ;
.bss:0041636E                 db    ? ;
.bss:0041636F                 db    ? ;
.bss:00416370                 db    ? ;
.bss:00416371                 db    ? ;
.bss:00416372                 db    ? ;
.bss:00416373                 db    ? ;
.bss:00416374                 db    ? ;
.bss:00416375                 db    ? ;
.bss:00416376                 db    ? ;
.bss:00416377                 db    ? ;
.bss:00416378                 db    ? ;
.bss:00416379                 db    ? ;
.bss:0041637A                 db    ? ;
.bss:0041637B                 db    ? ;
.bss:0041637C                 db    ? ;
.bss:0041637D                 db    ? ;
.bss:0041637E                 db    ? ;
.bss:0041637F                 db    ? ;
.bss:00416380                 db    ? ;
.bss:00416381                 db    ? ;
.bss:00416382                 db    ? ;
.bss:00416383                 db    ? ;
.bss:00416384                 db    ? ;
.bss:00416385                 db    ? ;
.bss:00416386                 db    ? ;
.bss:00416387                 db    ? ;
.bss:00416388                 db    ? ;
.bss:00416389                 db    ? ;
.bss:0041638A                 db    ? ;
.bss:0041638B                 db    ? ;
.bss:0041638C                 db    ? ;
.bss:0041638D                 db    ? ;
.bss:0041638E                 db    ? ;
.bss:0041638F                 db    ? ;
.bss:00416390                 db    ? ;
.bss:00416391                 db    ? ;
.bss:00416392                 db    ? ;
.bss:00416393                 db    ? ;
.bss:00416394                 db    ? ;
.bss:00416395                 db    ? ;
.bss:00416396                 db    ? ;
.bss:00416397                 db    ? ;
.bss:00416398                 db    ? ;
.bss:00416399                 db    ? ;
.bss:0041639A                 db    ? ;
.bss:0041639B                 db    ? ;
.bss:0041639C                 db    ? ;
.bss:0041639D                 db    ? ;
.bss:0041639E                 db    ? ;
.bss:0041639F                 db    ? ;
.bss:004163A0                 db    ? ;
.bss:004163A1                 db    ? ;
.bss:004163A2                 db    ? ;
.bss:004163A3                 db    ? ;
.bss:004163A4                 db    ? ;
.bss:004163A5                 db    ? ;
.bss:004163A6                 db    ? ;
.bss:004163A7                 db    ? ;
.bss:004163A8                 db    ? ;
.bss:004163A9                 db    ? ;
.bss:004163AA                 db    ? ;
.bss:004163AB                 db    ? ;
.bss:004163AC                 db    ? ;
.bss:004163AD                 db    ? ;
.bss:004163AE                 db    ? ;
.bss:004163AF                 db    ? ;
.bss:004163B0                 db    ? ;
.bss:004163B1                 db    ? ;
.bss:004163B2                 db    ? ;
.bss:004163B3                 db    ? ;
.bss:004163B4                 db    ? ;
.bss:004163B5                 db    ? ;
.bss:004163B6                 db    ? ;
.bss:004163B7                 db    ? ;
.bss:004163B8                 db    ? ;
.bss:004163B9                 db    ? ;
.bss:004163BA                 db    ? ;
.bss:004163BB                 db    ? ;
.bss:004163BC                 db    ? ;
.bss:004163BD                 db    ? ;
.bss:004163BE                 db    ? ;
.bss:004163BF                 db    ? ;
.bss:004163C0                 db    ? ;
.bss:004163C1                 db    ? ;
.bss:004163C2                 db    ? ;
.bss:004163C3                 db    ? ;
.bss:004163C4                 db    ? ;
.bss:004163C5                 db    ? ;
.bss:004163C6                 db    ? ;
.bss:004163C7                 db    ? ;
.bss:004163C8                 db    ? ;
.bss:004163C9                 db    ? ;
.bss:004163CA                 db    ? ;
.bss:004163CB                 db    ? ;
.bss:004163CC                 db    ? ;
.bss:004163CD                 db    ? ;
.bss:004163CE                 db    ? ;
.bss:004163CF                 db    ? ;
.bss:004163D0                 db    ? ;
.bss:004163D1                 db    ? ;
.bss:004163D2                 db    ? ;
.bss:004163D3                 db    ? ;
.bss:004163D4                 db    ? ;
.bss:004163D5                 db    ? ;
.bss:004163D6                 db    ? ;
.bss:004163D7                 db    ? ;
.bss:004163D8                 db    ? ;
.bss:004163D9                 db    ? ;
.bss:004163DA                 db    ? ;
.bss:004163DB                 db    ? ;
.bss:004163DC                 db    ? ;
.bss:004163DD                 db    ? ;
.bss:004163DE                 db    ? ;
.bss:004163DF                 db    ? ;
.bss:004163E0                 db    ? ;
.bss:004163E1                 db    ? ;
.bss:004163E2                 db    ? ;
.bss:004163E3                 db    ? ;
.bss:004163E4                 db    ? ;
.bss:004163E5                 db    ? ;
.bss:004163E6                 db    ? ;
.bss:004163E7                 db    ? ;
.bss:004163E8                 db    ? ;
.bss:004163E9                 db    ? ;
.bss:004163EA                 db    ? ;
.bss:004163EB                 db    ? ;
.bss:004163EC                 db    ? ;
.bss:004163ED                 db    ? ;
.bss:004163EE                 db    ? ;
.bss:004163EF                 db    ? ;
.bss:004163F0                 db    ? ;
.bss:004163F1                 db    ? ;
.bss:004163F2                 db    ? ;
.bss:004163F3                 db    ? ;
.bss:004163F4                 db    ? ;
.bss:004163F5                 db    ? ;
.bss:004163F6                 db    ? ;
.bss:004163F7                 db    ? ;
.bss:004163F8                 db    ? ;
.bss:004163F9                 db    ? ;
.bss:004163FA                 db    ? ;
.bss:004163FB                 db    ? ;
.bss:004163FC                 db    ? ;
.bss:004163FD                 db    ? ;
.bss:004163FE                 db    ? ;
.bss:004163FF                 db    ? ;
.bss:00416400                 db    ? ;
.bss:00416401                 db    ? ;
.bss:00416402                 db    ? ;
.bss:00416403                 db    ? ;
.bss:00416404                 db    ? ;
.bss:00416405                 db    ? ;
.bss:00416406                 db    ? ;
.bss:00416407                 db    ? ;
.bss:00416408                 db    ? ;
.bss:00416409                 db    ? ;
.bss:0041640A                 db    ? ;
.bss:0041640B                 db    ? ;
.bss:0041640C                 db    ? ;
.bss:0041640D                 db    ? ;
.bss:0041640E                 db    ? ;
.bss:0041640F                 db    ? ;
.bss:00416410                 db    ? ;
.bss:00416411                 db    ? ;
.bss:00416412                 db    ? ;
.bss:00416413                 db    ? ;
.bss:00416414                 db    ? ;
.bss:00416415                 db    ? ;
.bss:00416416                 db    ? ;
.bss:00416417                 db    ? ;
.bss:00416418                 db    ? ;
.bss:00416419                 db    ? ;
.bss:0041641A                 db    ? ;
.bss:0041641B                 db    ? ;
.bss:0041641C                 db    ? ;
.bss:0041641D                 db    ? ;
.bss:0041641E                 db    ? ;
.bss:0041641F                 db    ? ;
.bss:00416420                 db    ? ;
.bss:00416421                 db    ? ;
.bss:00416422                 db    ? ;
.bss:00416423                 db    ? ;
.bss:00416424                 db    ? ;
.bss:00416425                 db    ? ;
.bss:00416426                 db    ? ;
.bss:00416427                 db    ? ;
.bss:00416428                 db    ? ;
.bss:00416429                 db    ? ;
.bss:0041642A                 db    ? ;
.bss:0041642B                 db    ? ;
.bss:0041642C                 db    ? ;
.bss:0041642D                 db    ? ;
.bss:0041642E                 db    ? ;
.bss:0041642F                 db    ? ;
.bss:00416430                 db    ? ;
.bss:00416431                 db    ? ;
.bss:00416432                 db    ? ;
.bss:00416433                 db    ? ;
.bss:00416434                 db    ? ;
.bss:00416435                 db    ? ;
.bss:00416436                 db    ? ;
.bss:00416437                 db    ? ;
.bss:00416438                 db    ? ;
.bss:00416439                 db    ? ;
.bss:0041643A                 db    ? ;
.bss:0041643B                 db    ? ;
.bss:0041643C                 db    ? ;
.bss:0041643D                 db    ? ;
.bss:0041643E                 db    ? ;
.bss:0041643F                 db    ? ;
.bss:00416440                 db    ? ;
.bss:00416441                 db    ? ;
.bss:00416442                 db    ? ;
.bss:00416443                 db    ? ;
.bss:00416444                 db    ? ;
.bss:00416445                 db    ? ;
.bss:00416446                 db    ? ;
.bss:00416447                 db    ? ;
.bss:00416448                 db    ? ;
.bss:00416449                 db    ? ;
.bss:0041644A                 db    ? ;
.bss:0041644B                 db    ? ;
.bss:0041644C                 db    ? ;
.bss:0041644D                 db    ? ;
.bss:0041644E                 db    ? ;
.bss:0041644F                 db    ? ;
.bss:00416450 dword_416450    dd ?                    ; DATA XREF: sub_40E820+3E↑r
.bss:00416450                                         ; sub_40E820+F5↑w
.bss:00416454 dword_416454    dd ?                    ; DATA XREF: sub_40E820+38↑r
.bss:00416454                                         ; sub_40E820+EB↑w
.bss:00416458                 align 10h
.bss:00416460 dword_416460    dd ?                    ; DATA XREF: sub_40F620+8↑r
.bss:00416460                                         ; sub_40F730:loc_40F7B2↑w ...
.bss:00416464                 align 10h
.bss:00416470 ; struct _OSVERSIONINFOA VersionInformation
.bss:00416470 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40F730:loc_40F750↑o
.bss:00416470                                         ; sub_40F730+2C↑w ...
.bss:00416504 word_416504     dw ?                    ; DATA XREF: sub_40F730:loc_40F7E3↑r
.bss:00416506                 align 4
.bss:00416508 word_416508     dw ?                    ; DATA XREF: .text:loc_40F1A6↑r
.bss:00416508                                         ; .text:0040F1D4↑r ...
.bss:0041650A byte_41650A     db ?                    ; DATA XREF: .text:0040F165↑r
.bss:0041650B                 align 10h
.bss:00416510 dword_416510    dd ?                    ; DATA XREF: sub_40F730+6↑r
.bss:00416510                                         ; sub_40F730+75↑w
.bss:00416514                 align 10h
.bss:00416520 ; LARGE_INTEGER Frequency
.bss:00416520 Frequency       LARGE_INTEGER <?>       ; DATA XREF: sub_410780+D↑r
.bss:00416520                                         ; sub_410780:loc_4107A0↑o ...
.bss:00416528                 align 10h
.bss:00416530 dword_416530    dd ?                    ; DATA XREF: sub_410D40+6E↑r
.bss:00416530                                         ; sub_410D40+9A↑r ...
.bss:00416534 dword_416534    dd ?                    ; DATA XREF: sub_410D40:loc_410DA8↑r
.bss:00416534                                         ; sub_410D40+A0↑r ...
.bss:00416538                 align 10h
.bss:00416540 dword_416540    dd ?                    ; DATA XREF: sub_4111F0↑r
.bss:00416540                                         ; .text:loc_411342↑w
.bss:00416544                 align 10h
.bss:00416550 dword_416550    dd ?                    ; DATA XREF: sub_4014E0+4F↑w
.bss:00416550                                         ; sub_402370+1F↑r ...
.bss:00416554                 db    ? ;
.bss:00416555                 db    ? ;
.bss:00416556                 db    ? ;
.bss:00416557                 db    ? ;
.bss:00416558                 db    ? ;
.bss:00416559                 db    ? ;
.bss:0041655A                 db    ? ;
.bss:0041655B                 db    ? ;
.bss:0041655C                 db    ? ;
.bss:0041655D                 db    ? ;
.bss:0041655E                 db    ? ;
.bss:0041655F                 db    ? ;
.bss:00416560                 db    ? ;
.bss:00416561                 db    ? ;
.bss:00416562                 db    ? ;
.bss:00416563                 db    ? ;
.bss:00416564                 db    ? ;
.bss:00416565                 db    ? ;
.bss:00416566                 db    ? ;
.bss:00416567                 db    ? ;
.bss:00416568                 db    ? ;
.bss:00416569                 db    ? ;
.bss:0041656A                 db    ? ;
.bss:0041656B                 db    ? ;
.bss:0041656C                 db    ? ;
.bss:0041656D                 db    ? ;
.bss:0041656E                 db    ? ;
.bss:0041656F                 db    ? ;
.bss:00416570 ; char dword_416570[]
.bss:00416570 dword_416570    dd ?                    ; DATA XREF: sub_403760+30F↑r
.bss:00416570                                         ; sub_403760+388↑r ...
.bss:00416574                 align 10h
.bss:00416580 dword_416580    dd ?                    ; CODE XREF: sub_40AC84+63↑p
.bss:00416580                                         ; DATA XREF: sub_40AB80+1E↑r ...
.bss:00416584                 align 10h
.bss:00416590 dword_416590    dd ?                    ; DATA XREF: sub_40AB80+4E↑w
.bss:00416590                                         ; sub_40AC84+AB↑w
.bss:00416594                 align 40h
.bss:004165C0 dword_4165C0    dd ?                    ; DATA XREF: sub_40AC84+13↑r
.bss:004165C4                 align 1000h
.bss:004165C4 _bss            ends
.bss:004165C4
.idata:00417000 ; Section 4. (virtual address 00017000)
.idata:00417000 ; Virtual size                  : 00000F00 (   3840.)
.idata:00417000 ; Section size in file          : 00001000 (   4096.)
.idata:00417000 ; Offset to raw data for section: 00013800
.idata:00417000 ; Flags C0000040: Data Readable Writable
.idata:00417000 ; Alignment     : default
.idata:00417000 ; ===========================================================================
.idata:00417000
.idata:00417000 ; Segment type: Externs
.idata:00417000 ; _idata
.idata:00417000
.idata:00417001
.idata:004172E0 ;
.idata:004172E0 ; Imports from libintl3.dll
.idata:004172E0 ;
.idata:004172E0                 extrn libintl_bindtextdomain:dword
.idata:004172E0                                         ; CODE XREF: sub_4014E0+7C↑p
.idata:004172E0                                         ; DATA XREF: sub_4014E0+7C↑r ...
.idata:004172E4                 extrn libintl_gettext:dword
.idata:004172E4                                         ; CODE XREF: sub_4014E0+313↑p
.idata:004172E4                                         ; sub_4014E0+34B↑p ...
.idata:004172E8                 extrn libintl_textdomain:dword
.idata:004172E8                                         ; CODE XREF: sub_4014E0+89↑p
.idata:004172E8                                         ; DATA XREF: sub_4014E0+89↑r ...
.idata:004172EC
.idata:004172F4 ;
.idata:004172F4 ; Imports from ADVAPI32.DLL
.idata:004172F4 ;
.idata:004172F4 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004172F4                 extrn __imp_RegCloseKey:dword
.idata:004172F4                                         ; DATA XREF: RegCloseKey↑r
.idata:004172F8 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004172F8                 extrn __imp_RegOpenKeyExA:dword
.idata:004172F8                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004172FC ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004172FC                 extrn __imp_RegQueryValueExA:dword
.idata:004172FC                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00417300
.idata:00417308 ;
.idata:00417308 ; Imports from KERNEL32.dll
.idata:00417308 ;
.idata:00417308 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:00417308                 extrn __imp_AreFileApisANSI:dword
.idata:00417308                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041730C ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041730C                 extrn __imp_CloseHandle:dword
.idata:0041730C                                         ; DATA XREF: CloseHandle↑r
.idata:00417310 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00417310                 extrn __imp_CreateDirectoryA:dword
.idata:00417310                                         ; DATA XREF: CreateDirectoryA↑r
.idata:00417314 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:00417314                 extrn __imp_CreateFileA:dword
.idata:00417314                                         ; DATA XREF: CreateFileA↑r
.idata:00417318 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:00417318                 extrn __imp_DeviceIoControl:dword
.idata:00417318                                         ; DATA XREF: DeviceIoControl↑r
.idata:0041731C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0041731C                 extrn __imp_ExitProcess:dword
.idata:0041731C                                         ; DATA XREF: ExitProcess↑r
.idata:00417320 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00417320                 extrn __imp_FindClose:dword
.idata:00417320                                         ; DATA XREF: FindClose↑r
.idata:00417324 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00417324                 extrn __imp_FindFirstFileA:dword
.idata:00417324                                         ; DATA XREF: FindFirstFileA↑r
.idata:00417328 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00417328                 extrn __imp_FindNextFileA:dword
.idata:00417328                                         ; DATA XREF: FindNextFileA↑r
.idata:0041732C ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041732C                 extrn __imp_FreeLibrary:dword
.idata:0041732C                                         ; DATA XREF: FreeLibrary↑r
.idata:00417330 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00417330                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00417330                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00417334 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00417334                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00417334                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00417338 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00417338                 extrn __imp_GetDriveTypeA:dword
.idata:00417338                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041733C ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041733C                 extrn __imp_GetFileAttributesA:dword
.idata:0041733C                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00417340 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00417340                 extrn __imp_GetFileInformationByHandle:dword
.idata:00417340                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00417344 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00417344                 extrn __imp_GetFileSize:dword
.idata:00417344                                         ; DATA XREF: GetFileSize↑r
.idata:00417348 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00417348                 extrn __imp_GetFileType:dword
.idata:00417348                                         ; DATA XREF: GetFileType↑r
.idata:0041734C ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041734C                 extrn __imp_GetFullPathNameA:dword
.idata:0041734C                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00417350 ; DWORD (__stdcall *GetLastError)()
.idata:00417350                 extrn __imp_GetLastError:dword
.idata:00417350                                         ; DATA XREF: GetLastError↑r
.idata:00417354 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00417354                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00417354                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00417358 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00417358                 extrn __imp_GetModuleFileNameA:dword
.idata:00417358                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041735C ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041735C                 extrn __imp_GetModuleHandleA:dword
.idata:0041735C                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00417360 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00417360                 extrn __imp_GetProcAddress:dword
.idata:00417360                                         ; DATA XREF: GetProcAddress↑r
.idata:00417364 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00417364                 extrn __imp_GetProcessHeap:dword
.idata:00417364                                         ; DATA XREF: GetProcessHeap↑r
.idata:00417368 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00417368                 extrn __imp_GetShortPathNameA:dword
.idata:00417368                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041736C ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041736C                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041736C                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00417370 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00417370                 extrn __imp_GetTimeZoneInformation:dword
.idata:00417370                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00417374 ; DWORD (__stdcall *GetVersion)()
.idata:00417374                 extrn __imp_GetVersion:dword
.idata:00417374                                         ; DATA XREF: GetVersion↑r
.idata:00417378 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00417378                 extrn __imp_GetVersionExA:dword
.idata:00417378                                         ; DATA XREF: GetVersionExA↑r
.idata:0041737C ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041737C                 extrn __imp_GetVolumeInformationA:dword
.idata:0041737C                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00417380 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00417380                 extrn __imp_HeapAlloc:dword
.idata:00417380                                         ; DATA XREF: HeapAlloc↑r
.idata:00417384 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00417384                 extrn __imp_HeapFree:dword
.idata:00417384                                         ; DATA XREF: HeapFree↑r
.idata:00417388 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00417388                 extrn __imp_LoadLibraryA:dword
.idata:00417388                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041738C ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:0041738C                 extrn __imp_LockFile:dword
.idata:0041738C                                         ; DATA XREF: LockFile↑r
.idata:00417390 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00417390                 extrn __imp_MultiByteToWideChar:dword
.idata:00417390                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00417394 ; HANDLE (__stdcall *OpenProcess)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
.idata:00417394                 extrn __imp_OpenProcess:dword
.idata:00417394                                         ; DATA XREF: OpenProcess↑r
.idata:00417398 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00417398                 extrn __imp_PeekNamedPipe:dword
.idata:00417398                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041739C ; BOOL (__stdcall *QueryPerformanceFrequency)(LARGE_INTEGER *lpFrequency)
.idata:0041739C                 extrn __imp_QueryPerformanceFrequency:dword
.idata:0041739C                                         ; DATA XREF: QueryPerformanceFrequency↑r
.idata:004173A0 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:004173A0                 extrn __imp_SetErrorMode:dword
.idata:004173A0                                         ; DATA XREF: SetErrorMode↑r
.idata:004173A4 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004173A4                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004173A4                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004173A8 ; void (__stdcall *Sleep)(DWORD dwMilliseconds)
.idata:004173A8                 extrn __imp_Sleep:dword ; DATA XREF: Sleep↑r
.idata:004173AC ; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
.idata:004173AC                 extrn __imp_TerminateProcess:dword
.idata:004173AC                                         ; DATA XREF: TerminateProcess↑r
.idata:004173B0 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004173B0                 extrn __imp_UnlockFile:dword
.idata:004173B0                                         ; DATA XREF: UnlockFile↑r
.idata:004173B4 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:004173B4                 extrn __imp_lstrcmpiA:dword
.idata:004173B4                                         ; DATA XREF: lstrcmpiA↑r
.idata:004173B8 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:004173B8                 extrn __imp_lstrcpyA:dword
.idata:004173B8                                         ; DATA XREF: lstrcpyA↑r
.idata:004173BC
.idata:004173C4 ;
.idata:004173C4 ; Imports from msvcrt.dll
.idata:004173C4 ;
.idata:004173C4 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:004173C4                 extrn __imp__chmod:dword
.idata:004173C4                                         ; DATA XREF: _chmod↑r
.idata:004173C8 ; int (__cdecl *_close)(int FileHandle)
.idata:004173C8                 extrn __imp__close:dword
.idata:004173C8                                         ; DATA XREF: _close↑r
.idata:004173CC ; int (__cdecl *_dup)(int FileHandle)
.idata:004173CC                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:004173D0 ; int (__cdecl *_getpid)()
.idata:004173D0                 extrn __imp__getpid:dword
.idata:004173D0                                         ; DATA XREF: _getpid↑r
.idata:004173D4 ; int (__cdecl *_isatty)(int FileHandle)
.idata:004173D4                 extrn __imp__isatty:dword
.idata:004173D4                                         ; DATA XREF: _isatty↑r
.idata:004173D8 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004173D8                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004173DC ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:004173DC                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:004173E0 ; char *(__cdecl *_strdup)(const char *String)
.idata:004173E0                 extrn __imp__strdup:dword
.idata:004173E0                                         ; DATA XREF: _strdup↑r
.idata:004173E4 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004173E4                 extrn __imp__stricmp:dword
.idata:004173E4                                         ; DATA XREF: _stricmp↑r
.idata:004173E8
.idata:004173F0 ;
.idata:004173F0 ; Imports from MSVCP60.DLL
.idata:004173F0 ;
.idata:004173F0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004173F0                 extrn __imp_mbrtowc:dword
.idata:004173F0                                         ; DATA XREF: mbrtowc↑r
.idata:004173F4
.idata:004173FC ;
.idata:004173FC ; Imports from msvcrt.dll
.idata:004173FC ;
.idata:004173FC                 extrn __imp___getmainargs:dword
.idata:004173FC                                         ; DATA XREF: __getmainargs↑r
.idata:00417400 ; int _mb_cur_max
.idata:00417400                 extrn __mb_cur_max:dword
.idata:00417400                                         ; DATA XREF: sub_407DD0+45↑r
.idata:00417400                                         ; sub_4084F0+58↑r ...
.idata:00417404 ; char ***(__cdecl *__p__environ)()
.idata:00417404                 extrn __imp___p__environ:dword
.idata:00417404                                         ; DATA XREF: __p__environ↑r
.idata:00417408 ; int *(__cdecl *__p__fmode)()
.idata:00417408                 extrn __imp___p__fmode:dword
.idata:00417408                                         ; DATA XREF: __p__fmode↑r
.idata:0041740C                 extrn __pioinfo:dword   ; DATA XREF: sub_40E400:loc_40E468↑r
.idata:0041740C                                         ; sub_40E400:loc_40E493↑r ...
.idata:00417410 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00417410                 extrn __set_app_type:dword
.idata:00417410                                         ; CODE XREF: start+D↑p
.idata:00417410                                         ; .text:0040102D↑p
.idata:00417410                                         ; DATA XREF: ...
.idata:00417414                 extrn __imp__assert:dword
.idata:00417414                                         ; DATA XREF: _assert↑r
.idata:00417418 ; void (__cdecl *_cexit)()
.idata:00417418                 extrn __imp__cexit:dword
.idata:00417418                                         ; DATA XREF: _cexit↑r
.idata:0041741C ; int (__cdecl *_close_0)(int FileHandle)
.idata:0041741C                 extrn __imp__close_0:dword
.idata:0041741C                                         ; DATA XREF: _close_0↑r
.idata:00417420 ; int *(__cdecl *_errno)()
.idata:00417420                 extrn __imp__errno:dword
.idata:00417420                                         ; DATA XREF: _errno↑r
.idata:00417424 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00417424                 extrn __imp__fdopen:dword
.idata:00417424                                         ; DATA XREF: _fdopen↑r
.idata:00417428 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:00417428                 extrn __imp__filelengthi64:dword
.idata:00417428                                         ; DATA XREF: _filelengthi64↑r
.idata:0041742C ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041742C                 extrn __imp__flsbuf:dword
.idata:0041742C                                         ; DATA XREF: _flsbuf↑r
.idata:00417430 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:00417430                 extrn __imp__get_osfhandle:dword
.idata:00417430                                         ; DATA XREF: _get_osfhandle↑r
.idata:00417434 ; FILE iob[]
.idata:00417434                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00417434                                         ; sub_401080+75↑r ...
.idata:00417438 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00417438                 extrn __imp__isctype:dword
.idata:00417438                                         ; DATA XREF: _isctype↑r
.idata:0041743C ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:0041743C                 extrn __imp__lseeki64:dword
.idata:0041743C                                         ; DATA XREF: _lseeki64↑r
.idata:00417440 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00417440                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00417440                                         ; DATA XREF: .text:0040106C↑r
.idata:00417444 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:00417444                 extrn __imp__open_0:dword
.idata:00417444                                         ; DATA XREF: _open_0↑r
.idata:00417448 ; const unsigned __int16 *pctype
.idata:00417448                 extrn _pctype:dword     ; DATA XREF: sub_407DD0:loc_4082F0↑r
.idata:00417448                                         ; sub_4084F0:loc_409142↑r ...
.idata:0041744C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041744C                 extrn __imp__setmode:dword
.idata:0041744C                                         ; DATA XREF: _setmode↑r
.idata:00417450 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00417450                 extrn __imp__stricmp_0:dword
.idata:00417450                                         ; DATA XREF: _stricmp_0↑r
.idata:00417454 ; void (__cdecl __noreturn *abort)()
.idata:00417454                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00417458 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00417458                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00417458                                         ; DATA XREF: sub_401040+C↑r
.idata:0041745C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041745C                 extrn __imp_calloc:dword
.idata:0041745C                                         ; DATA XREF: calloc↑r
.idata:00417460 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00417460                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00417464 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00417464                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00417468 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00417468                 extrn __imp_fclose:dword
.idata:00417468                                         ; DATA XREF: fclose↑r
.idata:0041746C ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041746C                 extrn __imp_fflush:dword
.idata:0041746C                                         ; DATA XREF: fflush↑r
.idata:00417470 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00417470                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00417474 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00417474                 extrn __imp_fprintf:dword
.idata:00417474                                         ; DATA XREF: fprintf↑r
.idata:00417478 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00417478                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041747C ; void (__cdecl *free)(void *Block)
.idata:0041747C                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00417480 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00417480                 extrn __imp_fwrite:dword
.idata:00417480                                         ; DATA XREF: fwrite↑r
.idata:00417484 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00417484                 extrn __imp_getenv:dword
.idata:00417484                                         ; DATA XREF: getenv↑r
.idata:00417488 ; int (__cdecl *isalpha)(int C)
.idata:00417488                 extrn __imp_isalpha:dword
.idata:00417488                                         ; DATA XREF: isalpha↑r
.idata:0041748C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041748C                 extrn __imp_iswctype:dword
.idata:0041748C                                         ; DATA XREF: iswctype↑r
.idata:00417490 ; void *(__cdecl *malloc)(size_t Size)
.idata:00417490                 extrn __imp_malloc:dword
.idata:00417490                                         ; DATA XREF: malloc↑r
.idata:00417494 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:00417494                 extrn __imp_memchr:dword
.idata:00417494                                         ; DATA XREF: memchr↑r
.idata:00417498 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00417498                 extrn __imp_memcpy:dword
.idata:00417498                                         ; DATA XREF: memcpy↑r
.idata:0041749C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041749C                 extrn __imp_memset:dword
.idata:0041749C                                         ; DATA XREF: memset↑r
.idata:004174A0 ; int (*printf)(const char *const Format, ...)
.idata:004174A0                 extrn __imp_printf:dword
.idata:004174A0                                         ; DATA XREF: printf↑r
.idata:004174A4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004174A4                 extrn __imp_realloc:dword
.idata:004174A4                                         ; DATA XREF: realloc↑r
.idata:004174A8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004174A8                 extrn __imp_setlocale:dword
.idata:004174A8                                         ; DATA XREF: setlocale↑r
.idata:004174AC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004174AC                 extrn __imp_signal:dword
.idata:004174AC                                         ; DATA XREF: signal↑r
.idata:004174B0 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004174B0                 extrn __imp_sprintf:dword
.idata:004174B0                                         ; DATA XREF: sprintf↑r
.idata:004174B4 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:004174B4                 extrn __imp_sscanf:dword
.idata:004174B4                                         ; DATA XREF: sscanf↑r
.idata:004174B8 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:004174B8                 extrn __imp_strcat:dword
.idata:004174B8                                         ; DATA XREF: strcat↑r
.idata:004174BC ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004174BC                 extrn __imp_strchr:dword
.idata:004174BC                                         ; DATA XREF: strchr↑r
.idata:004174C0 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004174C0                 extrn __imp_strcmp:dword
.idata:004174C0                                         ; DATA XREF: strcmp↑r
.idata:004174C4 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:004174C4                 extrn __imp_strcpy:dword
.idata:004174C4                                         ; DATA XREF: strcpy↑r
.idata:004174C8 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004174C8                 extrn __imp_strerror:dword
.idata:004174C8                                         ; DATA XREF: strerror↑r
.idata:004174CC ; size_t (__cdecl *strlen)(const char *Str)
.idata:004174CC                 extrn __imp_strlen:dword
.idata:004174CC                                         ; DATA XREF: strlen↑r
.idata:004174D0 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004174D0                 extrn __imp_strncmp:dword
.idata:004174D0                                         ; DATA XREF: strncmp↑r
.idata:004174D4 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004174D4                 extrn __imp_strncpy:dword
.idata:004174D4                                         ; DATA XREF: strncpy↑r
.idata:004174D8 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004174D8                 extrn __imp_strpbrk:dword
.idata:004174D8                                         ; DATA XREF: strpbrk↑r
.idata:004174DC ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004174DC                 extrn __imp_strrchr:dword
.idata:004174DC                                         ; DATA XREF: strrchr↑r
.idata:004174E0 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004174E0                 extrn __imp_strspn:dword
.idata:004174E0                                         ; DATA XREF: strspn↑r
.idata:004174E4 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004174E4                 extrn __imp_strstr:dword
.idata:004174E4                                         ; DATA XREF: strstr↑r
.idata:004174E8 ; double (__cdecl *strtod)(const char *String, char **EndPtr)
.idata:004174E8                 extrn __imp_strtod:dword
.idata:004174E8                                         ; DATA XREF: strtod↑r
.idata:004174EC ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:004174EC                 extrn __imp_strtol:dword
.idata:004174EC                                         ; DATA XREF: strtol↑r
.idata:004174F0 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:004174F0                 extrn __imp_strtoul:dword
.idata:004174F0                                         ; DATA XREF: strtoul↑r
.idata:004174F4 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:004174F4                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:004174F8 ; int (__cdecl *toupper)(int C)
.idata:004174F8                 extrn __imp_toupper:dword
.idata:004174F8                                         ; DATA XREF: toupper↑r
.idata:004174FC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004174FC                 extrn __imp_vfprintf:dword
.idata:004174FC                                         ; DATA XREF: vfprintf↑r
.idata:00417500
.idata:00417508 ;
.idata:00417508 ; Imports from OLE32.dll
.idata:00417508 ;
.idata:00417508 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00417508                 extrn __imp_CoCreateInstance:dword
.idata:00417508                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041750C ; void (__stdcall *CoUninitialize)()
.idata:0041750C                 extrn __imp_CoUninitialize:dword
.idata:0041750C                                         ; DATA XREF: CoUninitialize↑r
.idata:00417510 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00417510                 extrn __imp_OleInitialize:dword
.idata:00417510                                         ; DATA XREF: OleInitialize↑r
.idata:00417514
.idata:00417514
.idata:00417514
.idata:00417514                 end start
