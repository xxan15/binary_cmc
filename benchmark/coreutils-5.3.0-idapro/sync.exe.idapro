.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : E9C65FBAB16C5FA21222F5DBBC6A251E47735145712AA52332A168E9B87576DD
.text:00401000 ; Input MD5    : B76E2711C6000D172D5969F1E065C87D
.text:00401000 ; Input CRC32  : 2400260E
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/sync.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24F (Wed Apr 20 18:41:19 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00003CA0 (  15520.)
.text:00401000 ; Section size in file          : 00003E00 (  15872.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401340+62↓p
.text:00401040                                         ; .text:00404980↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404920
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_405000
.text:004010A2                 mov     edx, dword_405050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_405004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_405070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_405070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4048F0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_405000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_405004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401340
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404920
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401340+1F↓o
.text:00401280                                         ; sub_401340+B3↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401340+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401340+41↓o
.text:004012C3                                         ; sub_401340+4E↓o ...
.text:004012CD aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401340+6F↓o
.text:004012DA a530            db '5.3.0',0            ; DATA XREF: sub_401340+7F↓o
.text:004012E0 ; const FILE stru_4012E0
.text:004012E0 stru_4012E0     FILE <636E7973h, 90909000h, 90909090h, 90909090h, 90909090h, \
.text:004012E0                                         ; DATA XREF: sub_401340+8F↓o
.text:004012E0                       90909090h, 90909090h, 90909090h>
.text:00401300 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401300                                         ; DATA XREF: sub_401340+CA↓o
.text:00401300                                         ; sub_401590+F↓o
.text:00401327 aIgnoringAllArg db 'ignoring all arguments',0
.text:00401327                                         ; DATA XREF: sub_401340:loc_401458↓o
.text:0040133E                 align 10h
.text:00401340
.text:00401340 ; =============== S U B R O U T I N E =======================================
.text:00401340
.text:00401340 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401340
.text:00401340 sub_401340      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401340
.text:00401340 Category        = dword ptr -28h
.text:00401340 Locale          = dword ptr -24h
.text:00401340 var_20          = dword ptr -20h
.text:00401340 var_1C          = byte ptr -1Ch
.text:00401340 var_18          = dword ptr -18h
.text:00401340 var_14          = dword ptr -14h
.text:00401340 var_10          = byte ptr -10h
.text:00401340 var_C           = dword ptr -0Ch
.text:00401340 arg_0           = dword ptr  8
.text:00401340 arg_4           = dword ptr  0Ch
.text:00401340
.text:00401340                 push    ebp
.text:00401341                 xor     eax, eax
.text:00401343                 mov     ebp, esp
.text:00401345                 push    esi
.text:00401346                 push    ebx
.text:00401347                 sub     esp, 20h
.text:0040134A                 mov     ebx, [ebp+arg_4]
.text:0040134D                 and     esp, 0FFFFFFF0h
.text:00401350                 mov     esi, [ebp+arg_0]
.text:00401353                 call    __alloca
.text:00401358                 call    sub_4049C0
.text:0040135D                 mov     edx, [ebx]
.text:0040135F                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:00401367                 mov     [esp+28h+Category], 0 ; Category
.text:0040136E                 mov     ds:dword_406190, edx
.text:00401374                 call    setlocale
.text:00401379                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401381                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:00401388                 call    ds:__imp_libintl_bindtextdomain
.text:0040138E                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:00401395                 call    ds:libintl_textdomain
.text:0040139B                 mov     [esp+28h+Category], offset sub_402930 ; void (__cdecl *)()
.text:004013A2                 call    sub_401040
.text:004013A7                 mov     [esp+28h+var_C], 0
.text:004013AF                 mov     dword ptr [esp+28h+var_10], offset aJimMeyering ; "Jim Meyering"
.text:004013B7                 mov     [esp+28h+var_14], offset sub_401590 ; int
.text:004013BF                 mov     [esp+28h+var_18], offset a530 ; "5.3.0"
.text:004013C7                 mov     dword ptr [esp+28h+var_1C], offset aCoreutils ; "coreutils"
.text:004013CF                 mov     [esp+28h+var_20], offset stru_4012E0 ; FILE *
.text:004013D7                 mov     [esp+28h+Locale], ebx ; int
.text:004013DB                 mov     [esp+28h+Category], esi ; int
.text:004013DE                 call    sub_402840
.text:004013E3                 mov     [esp+28h+var_18], 0 ; int
.text:004013EB                 mov     dword ptr [esp+28h+var_1C], 0 ; char
.text:004013F3                 mov     [esp+28h+var_20], offset Locale ; char *
.text:004013FB                 mov     [esp+28h+Locale], ebx ; int
.text:004013FF                 mov     [esp+28h+Category], esi ; int
.text:00401402                 call    sub_4026A0
.text:00401407                 inc     eax
.text:00401408                 jz      short loc_401442
.text:0040140A                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401411                 call    ds:libintl_gettext
.text:00401417                 mov     edx, ds:_iob
.text:0040141D                 mov     ecx, ds:dword_406190
.text:00401423                 add     edx, 40h ; '@'
.text:00401426                 mov     [esp+28h+var_20], ecx
.text:0040142A                 mov     [esp+28h+Locale], eax ; Format
.text:0040142E                 mov     [esp+28h+Category], edx ; Stream
.text:00401431                 call    fprintf
.text:00401436                 mov     [esp+28h+Category], 1 ; Code
.text:0040143D
.text:0040143D loc_40143D:                             ; CODE XREF: sub_401340+116↓j
.text:0040143D                 call    exit
.text:00401442 ; ---------------------------------------------------------------------------
.text:00401442
.text:00401442 loc_401442:                             ; CODE XREF: sub_401340+C8↑j
.text:00401442                 cmp     dword_405010, esi
.text:00401448                 jl      short loc_401458
.text:0040144A
.text:0040144A loc_40144A:                             ; CODE XREF: sub_401340+13D↓j
.text:0040144A                 call    j__flushall
.text:0040144F                 mov     [esp+28h+Category], 0
.text:00401456                 jmp     short loc_40143D
.text:00401458 ; ---------------------------------------------------------------------------
.text:00401458
.text:00401458 loc_401458:                             ; CODE XREF: sub_401340+108↑j
.text:00401458                 mov     [esp+28h+Category], offset aIgnoringAllArg ; "ignoring all arguments"
.text:0040145F                 call    ds:libintl_gettext
.text:00401465                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:0040146D                 mov     [esp+28h+Category], 0 ; Code
.text:00401474                 mov     [esp+28h+var_20], eax ; char *
.text:00401478                 call    sub_404630
.text:0040147D                 jmp     short loc_40144A
.text:0040147D sub_401340      endp
.text:0040147D
.text:0040147D ; ---------------------------------------------------------------------------
.text:0040147F aUsageSOption   db 'Usage: %s [OPTION]',0Ah,0
.text:0040147F                                         ; DATA XREF: sub_401590:loc_4015D3↓o
.text:00401493                 align 10h
.text:004014A0 aForceChangedBl db 'Force changed blocks to disk, update the super block.',0Ah
.text:004014A0                                         ; DATA XREF: sub_401590+62↓o
.text:004014A0                 db 0Ah,0
.text:004014D8                 align 10h
.text:004014E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004014E0                                         ; DATA XREF: sub_401590+84↓o
.text:0040150D                 align 20h
.text:00401520 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401520                                         ; DATA XREF: sub_401590+A6↓o
.text:00401556 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401590+C8↓o
.text:00401556                 db 'Report bugs to <%s>.',0Ah,0
.text:0040156D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040156D                                         ; DATA XREF: sub_401590+D5↓o
.text:00401583                 align 10h
.text:00401590
.text:00401590 ; =============== S U B R O U T I N E =======================================
.text:00401590
.text:00401590 ; Attributes: noreturn
.text:00401590
.text:00401590 ; void __cdecl __noreturn sub_401590(int Code)
.text:00401590 sub_401590      proc near               ; DATA XREF: sub_401340+77↑o
.text:00401590
.text:00401590 Stream          = dword ptr -1Ch
.text:00401590 Format          = dword ptr -18h
.text:00401590 var_14          = dword ptr -14h
.text:00401590 var_4           = dword ptr -4
.text:00401590 Code            = dword ptr  4
.text:00401590
.text:00401590                 sub     esp, 1Ch
.text:00401593                 mov     [esp+1Ch+var_4], ebx
.text:00401597                 mov     ebx, [esp+1Ch+Code]
.text:0040159B                 test    ebx, ebx
.text:0040159D                 jz      short loc_4015D3
.text:0040159F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004015A6                 call    ds:libintl_gettext
.text:004015AC                 mov     edx, ds:_iob
.text:004015B2                 mov     ecx, ds:dword_406190
.text:004015B8                 add     edx, 40h ; '@'
.text:004015BB                 mov     [esp+1Ch+var_14], ecx
.text:004015BF                 mov     [esp+1Ch+Format], eax ; Format
.text:004015C3                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004015C6                 call    fprintf
.text:004015CB
.text:004015CB loc_4015CB:                             ; CODE XREF: sub_401590+E5↓j
.text:004015CB                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004015CE                 call    exit
.text:004015D3 ; ---------------------------------------------------------------------------
.text:004015D3
.text:004015D3 loc_4015D3:                             ; CODE XREF: sub_401590+D↑j
.text:004015D3                 mov     [esp+1Ch+Stream], offset aUsageSOption ; "Usage: %s [OPTION]\n"
.text:004015DA                 call    ds:libintl_gettext
.text:004015E0                 mov     ecx, ds:dword_406190
.text:004015E6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004015E9                 mov     [esp+1Ch+Format], ecx
.text:004015ED                 call    printf
.text:004015F2                 mov     [esp+1Ch+Stream], offset aForceChangedBl ; "Force changed blocks to disk, update th"...
.text:004015F9                 call    ds:libintl_gettext
.text:004015FF                 mov     ecx, ds:_iob
.text:00401605                 add     ecx, 20h ; ' '
.text:00401608                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040160C                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040160F                 call    fputs
.text:00401614                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040161B                 call    ds:libintl_gettext
.text:00401621                 mov     ecx, ds:_iob
.text:00401627                 add     ecx, 20h ; ' '
.text:0040162A                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040162E                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401631                 call    fputs
.text:00401636                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040163D                 call    ds:libintl_gettext
.text:00401643                 mov     ecx, ds:_iob
.text:00401649                 add     ecx, 20h ; ' '
.text:0040164C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401650                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401653                 call    fputs
.text:00401658                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040165F                 call    ds:libintl_gettext
.text:00401665                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040166D                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401670                 call    printf
.text:00401675                 jmp     loc_4015CB
.text:00401675 sub_401590      endp
.text:00401675
.text:00401675 ; ---------------------------------------------------------------------------
.text:0040167A                 align 10h
.text:00401680 dword_401680    dd 90002D2Dh, 7 dup(90909090h)
.text:00401680                                         ; DATA XREF: sub_4018D0+E4↓o
.text:004016A0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004016A0                                         ; DATA XREF: sub_4018D0+2FC↓o
.text:004016CD                 align 20h
.text:004016E0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004016E0                                         ; DATA XREF: sub_4018D0:loc_401C32↓o
.text:0040170D                 align 20h
.text:00401720 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401720                                         ; DATA XREF: sub_4018D0:loc_401CD0↓o
.text:00401720                                         ; sub_4018D0:loc_402097↓o
.text:00401746                 align 20h
.text:00401760 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401760                                         ; DATA XREF: sub_4018D0+48E↓o
.text:00401780 dword_401780    dd 90909000h, 7 dup(90909090h)
.text:00401780                                         ; DATA XREF: sub_4018D0:loc_401DA1↓o
.text:004017A0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004017A0                                         ; DATA XREF: sub_4018D0:loc_401DBA↓o
.text:004017C0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004017C0                                         ; DATA XREF: sub_4018D0:loc_401E9F↓o
.text:004017C0                                         ; sub_4018D0:loc_4021CC↓o
.text:004017E7                 align 20h
.text:00401800 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401800                                         ; DATA XREF: sub_4018D0:loc_402013↓o
.text:0040182E                 align 20h
.text:00401840 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401840                                         ; DATA XREF: sub_4018D0:loc_4020FF↓o
.text:00401861 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401861                                         ; DATA XREF: sub_4018D0+93F↓o
.text:0040187B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040187B                                         ; DATA XREF: sub_4018D0:loc_402247↓o
.text:00401895 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401895                                         ; DATA XREF: sub_4018D0:loc_40226E↓o
.text:004018B3 ; const char VarName[]
.text:004018B3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4018D0:loc_402420↓o
.text:004018C3                 align 10h
.text:004018D0
.text:004018D0 ; =============== S U B R O U T I N E =======================================
.text:004018D0
.text:004018D0
.text:004018D0 ; int __cdecl sub_4018D0(int, int, char *Str, int, int, int, int, int)
.text:004018D0 sub_4018D0      proc near               ; CODE XREF: sub_402460+5A↓p
.text:004018D0                                         ; .text:0040254A↓p ...
.text:004018D0
.text:004018D0 Str1            = dword ptr -5Ch
.text:004018D0 Str2            = dword ptr -58h
.text:004018D0 MaxCount        = dword ptr -54h
.text:004018D0 var_50          = dword ptr -50h
.text:004018D0 var_4C          = dword ptr -4Ch
.text:004018D0 var_3C          = dword ptr -3Ch
.text:004018D0 var_38          = dword ptr -38h
.text:004018D0 var_34          = dword ptr -34h
.text:004018D0 var_30          = dword ptr -30h
.text:004018D0 var_2C          = dword ptr -2Ch
.text:004018D0 var_28          = dword ptr -28h
.text:004018D0 var_24          = dword ptr -24h
.text:004018D0 var_20          = dword ptr -20h
.text:004018D0 var_1C          = dword ptr -1Ch
.text:004018D0 var_18          = dword ptr -18h
.text:004018D0 var_14          = dword ptr -14h
.text:004018D0 arg_0           = dword ptr  4
.text:004018D0 arg_4           = dword ptr  8
.text:004018D0 Str             = dword ptr  0Ch
.text:004018D0 arg_C           = dword ptr  10h
.text:004018D0 arg_10          = dword ptr  14h
.text:004018D0 arg_14          = dword ptr  18h
.text:004018D0 arg_18          = dword ptr  1Ch
.text:004018D0 arg_1C          = dword ptr  20h
.text:004018D0
.text:004018D0                 push    ebp
.text:004018D1                 mov     eax, 0FFFFFFFFh
.text:004018D6                 push    edi
.text:004018D7                 push    esi
.text:004018D8                 push    ebx
.text:004018D9                 sub     esp, 4Ch
.text:004018DC                 mov     esi, [esp+5Ch+Str]
.text:004018E0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004018E4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004018E7                 mov     ebx, [ebp+4]
.text:004018EA                 setz    dl
.text:004018ED                 movzx   ecx, dl
.text:004018F0                 dec     ecx
.text:004018F1                 and     ecx, ebx
.text:004018F3                 mov     [esp+5Ch+var_14], ecx
.text:004018F7                 mov     ecx, [esp+5Ch+arg_0]
.text:004018FB                 test    ecx, ecx
.text:004018FD                 jle     loc_401A27
.text:00401903                 mov     dword ptr [ebp+0Ch], 0
.text:0040190A                 mov     ebx, [ebp+0]
.text:0040190D                 test    ebx, ebx
.text:0040190F                 jz      loc_402440
.text:00401915                 mov     edi, [ebp+10h]
.text:00401918                 test    edi, edi
.text:0040191A                 jnz     short loc_401973
.text:0040191C                 lea     esi, [esi+0]
.text:00401920
.text:00401920 loc_401920:                             ; CODE XREF: sub_4018D0+B7C↓j
.text:00401920                 mov     [ebp+24h], ebx
.text:00401923                 mov     esi, [esp+5Ch+Str]
.text:00401927                 mov     [ebp+20h], ebx
.text:0040192A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040192E                 xor     ebx, ebx
.text:00401930                 mov     dword ptr [ebp+14h], 0
.text:00401937                 test    ecx, ecx
.text:00401939                 jz      loc_402420
.text:0040193F
.text:0040193F loc_40193F:                             ; CODE XREF: sub_4018D0+B64↓j
.text:0040193F                 mov     ebx, 1
.text:00401944
.text:00401944 loc_401944:                             ; CODE XREF: sub_4018D0+B5E↓j
.text:00401944                 mov     [ebp+1Ch], ebx
.text:00401947                 mov     ecx, [esp+5Ch+Str]
.text:0040194B                 movzx   eax, byte ptr [ecx]
.text:0040194E                 cmp     al, 2Dh ; '-'
.text:00401950                 jz      loc_402410
.text:00401956                 cmp     al, 2Bh ; '+'
.text:00401958                 jz      loc_4023F9
.text:0040195E                 xor     edx, edx
.text:00401960                 test    ebx, ebx
.text:00401962                 setz    dl
.text:00401965                 mov     [ebp+18h], edx
.text:00401968
.text:00401968 loc_401968:                             ; CODE XREF: sub_4018D0+B35↓j
.text:00401968                 mov     [esp+5Ch+Str], esi
.text:0040196C                 mov     dword ptr [ebp+10h], 1
.text:00401973
.text:00401973 loc_401973:                             ; CODE XREF: sub_4018D0+4A↑j
.text:00401973                 mov     eax, [ebp+14h]
.text:00401976                 test    eax, eax
.text:00401978                 jz      short loc_401983
.text:0040197A                 cmp     byte ptr [eax], 0
.text:0040197D                 jnz     loc_401A60
.text:00401983
.text:00401983 loc_401983:                             ; CODE XREF: sub_4018D0+A8↑j
.text:00401983                 mov     ebx, [ebp+0]
.text:00401986                 cmp     [ebp+24h], ebx
.text:00401989                 jle     short loc_40198E
.text:0040198B                 mov     [ebp+24h], ebx
.text:0040198E
.text:0040198E loc_40198E:                             ; CODE XREF: sub_4018D0+B9↑j
.text:0040198E                 cmp     [ebp+20h], ebx
.text:00401991                 jle     short loc_401996
.text:00401993                 mov     [ebp+20h], ebx
.text:00401996
.text:00401996 loc_401996:                             ; CODE XREF: sub_4018D0+C1↑j
.text:00401996                 cmp     dword ptr [ebp+18h], 1
.text:0040199A                 jz      loc_402370
.text:004019A0
.text:004019A0 loc_4019A0:                             ; CODE XREF: sub_4018D0+B13↓j
.text:004019A0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004019A4                 jz      loc_402354
.text:004019AA                 cld
.text:004019AB                 mov     ecx, [esp+5Ch+arg_4]
.text:004019AF                 mov     edx, 3
.text:004019B4                 mov     edi, offset dword_401680
.text:004019B9                 mov     esi, [ecx+ebx*4]
.text:004019BC                 mov     ecx, edx
.text:004019BE                 repe cmpsb
.text:004019C0                 jnz     short loc_4019FC
.text:004019C2                 mov     edx, [ebp+24h]
.text:004019C5                 lea     eax, [ebx+1]
.text:004019C8                 cmp     [ebp+20h], edx
.text:004019CB                 mov     [ebp+0], eax
.text:004019CE                 jz      loc_402368
.text:004019D4                 cmp     edx, eax
.text:004019D6                 jz      short loc_4019F0
.text:004019D8                 mov     [esp+5Ch+Str2], ebp
.text:004019DC                 mov     ebx, [esp+5Ch+arg_4]
.text:004019E0                 mov     [esp+5Ch+Str1], ebx
.text:004019E3                 call    sub_402580
.text:004019E8                 nop
.text:004019E9                 lea     esi, [esi+0]
.text:004019F0
.text:004019F0 loc_4019F0:                             ; CODE XREF: sub_4018D0+106↑j
.text:004019F0                                         ; sub_4018D0+A9B↓j
.text:004019F0                 mov     eax, [esp+5Ch+arg_0]
.text:004019F4                 mov     ebx, eax
.text:004019F6                 mov     [ebp+24h], eax
.text:004019F9                 mov     [ebp+0], eax
.text:004019FC
.text:004019FC loc_4019FC:                             ; CODE XREF: sub_4018D0+F0↑j
.text:004019FC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401A00                 jz      loc_402354
.text:00401A06                 mov     esi, [esp+5Ch+arg_4]
.text:00401A0A                 mov     eax, [esi+ebx*4]
.text:00401A0D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401A10                 jz      short loc_401A37
.text:00401A12
.text:00401A12 loc_401A12:                             ; CODE XREF: sub_4018D0+16D↓j
.text:00401A12                 mov     edx, [ebp+18h]
.text:00401A15                 test    edx, edx
.text:00401A17                 jz      short loc_401A30
.text:00401A19                 mov     [ebp+0Ch], eax
.text:00401A1C                 lea     edi, [ebx+1]
.text:00401A1F                 mov     eax, 1
.text:00401A24                 mov     [ebp+0], edi
.text:00401A27
.text:00401A27 loc_401A27:                             ; CODE XREF: sub_4018D0+2D↑j
.text:00401A27                                         ; sub_4018D0+165↓j ...
.text:00401A27                 add     esp, 4Ch
.text:00401A2A                 pop     ebx
.text:00401A2B                 pop     esi
.text:00401A2C                 pop     edi
.text:00401A2D                 pop     ebp
.text:00401A2E                 retn
.text:00401A2E ; ---------------------------------------------------------------------------
.text:00401A2F                 align 10h
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: sub_4018D0+147↑j
.text:00401A30                                         ; sub_4018D0+A8A↓j ...
.text:00401A30                 mov     eax, 0FFFFFFFFh
.text:00401A35                 jmp     short loc_401A27
.text:00401A37 ; ---------------------------------------------------------------------------
.text:00401A37
.text:00401A37 loc_401A37:                             ; CODE XREF: sub_4018D0+140↑j
.text:00401A37                 movzx   edx, byte ptr [eax+1]
.text:00401A3B                 test    dl, dl
.text:00401A3D                 jz      short loc_401A12
.text:00401A3F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401A43                 xor     ecx, ecx
.text:00401A45                 test    ebx, ebx
.text:00401A47                 jz      short loc_401A52
.text:00401A49                 cmp     dl, 2Dh ; '-'
.text:00401A4C                 jz      loc_40234A
.text:00401A52
.text:00401A52 loc_401A52:                             ; CODE XREF: sub_4018D0+177↑j
.text:00401A52                                         ; sub_4018D0+A7F↓j
.text:00401A52                 lea     esi, [ecx+eax+1]
.text:00401A56                 mov     [ebp+14h], esi
.text:00401A59                 lea     esi, [esi+0]
.text:00401A60
.text:00401A60 loc_401A60:                             ; CODE XREF: sub_4018D0+AD↑j
.text:00401A60                 mov     ecx, [esp+5Ch+arg_C]
.text:00401A64                 test    ecx, ecx
.text:00401A66                 jz      loc_401DF0
.text:00401A6C                 mov     edx, [ebp+0]
.text:00401A6F                 mov     edi, [esp+5Ch+arg_4]
.text:00401A73                 mov     eax, [edi+edx*4]
.text:00401A76                 movzx   edx, byte ptr [eax+1]
.text:00401A7A                 cmp     dl, 2Dh ; '-'
.text:00401A7D                 jz      short loc_401A95
.text:00401A7F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401A83                 test    ebx, ebx
.text:00401A85                 jz      loc_401DF0
.text:00401A8B                 cmp     byte ptr [eax+2], 0
.text:00401A8F                 jz      loc_40232A
.text:00401A95
.text:00401A95 loc_401A95:                             ; CODE XREF: sub_4018D0+1AD↑j
.text:00401A95                                         ; sub_4018D0+A75↓j
.text:00401A95                 mov     [esp+5Ch+var_18], 0
.text:00401A9D                 mov     ecx, [ebp+14h]
.text:00401AA0                 mov     [esp+5Ch+var_1C], 0
.text:00401AA8                 mov     [esp+5Ch+var_20], 0
.text:00401AB0                 mov     edi, ecx
.text:00401AB2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401ABA                 movzx   eax, byte ptr [ecx]
.text:00401ABD                 test    al, al
.text:00401ABF                 jz      short loc_401ADC
.text:00401AC1                 cmp     al, 3Dh ; '='
.text:00401AC3                 jz      short loc_401ADC
.text:00401AC5                 lea     esi, [esi+0]
.text:00401AC9                 lea     edi, [edi+0]
.text:00401AD0
.text:00401AD0 loc_401AD0:                             ; CODE XREF: sub_4018D0+20A↓j
.text:00401AD0                 inc     edi
.text:00401AD1                 movzx   eax, byte ptr [edi]
.text:00401AD4                 test    al, al
.text:00401AD6                 jz      short loc_401ADC
.text:00401AD8                 cmp     al, 3Dh ; '='
.text:00401ADA                 jnz     short loc_401AD0
.text:00401ADC
.text:00401ADC loc_401ADC:                             ; CODE XREF: sub_4018D0+1EF↑j
.text:00401ADC                                         ; sub_4018D0+1F3↑j ...
.text:00401ADC                 mov     [esp+5Ch+var_28], 0
.text:00401AE4                 mov     esi, [esp+5Ch+arg_C]
.text:00401AE8                 mov     ebx, [esi]
.text:00401AEA                 test    ebx, ebx
.text:00401AEC                 mov     edx, ebx
.text:00401AEE                 jz      loc_401D10
.text:00401AF4                 lea     esi, [esi+0]
.text:00401AFA                 lea     edi, [edi+0]
.text:00401B00
.text:00401B00 loc_401B00:                             ; CODE XREF: sub_4018D0+25E↓j
.text:00401B00                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401B04                 mov     ebx, edi
.text:00401B06                 sub     ebx, ecx
.text:00401B08                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401B0C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401B0F                 call    strncmp
.text:00401B14                 test    eax, eax
.text:00401B16                 jz      loc_4022A6
.text:00401B1C
.text:00401B1C loc_401B1C:                             ; CODE XREF: sub_4018D0+A0F↓j
.text:00401B1C                                         ; sub_4018D0+A24↓j ...
.text:00401B1C                 inc     [esp+5Ch+var_28]
.text:00401B20                 add     esi, 10h
.text:00401B23                 mov     ecx, [esi]
.text:00401B25                 test    ecx, ecx
.text:00401B27                 mov     edx, ecx
.text:00401B29                 jz      short loc_401B30
.text:00401B2B                 mov     ecx, [ebp+14h]
.text:00401B2E                 jmp     short loc_401B00
.text:00401B30 ; ---------------------------------------------------------------------------
.text:00401B30
.text:00401B30 loc_401B30:                             ; CODE XREF: sub_4018D0+259↑j
.text:00401B30                                         ; sub_4018D0+A55↓j
.text:00401B30                 mov     esi, [esp+5Ch+var_20]
.text:00401B34                 test    esi, esi
.text:00401B36                 jz      short loc_401B44
.text:00401B38                 mov     edx, [esp+5Ch+var_1C]
.text:00401B3C                 test    edx, edx
.text:00401B3E                 jz      loc_402250
.text:00401B44
.text:00401B44 loc_401B44:                             ; CODE XREF: sub_4018D0+266↑j
.text:00401B44                 mov     eax, [esp+5Ch+var_18]
.text:00401B48                 test    eax, eax
.text:00401B4A                 jz      loc_401D10
.text:00401B50                 mov     ecx, [ebp+0]
.text:00401B53                 lea     eax, [ecx+1]
.text:00401B56                 mov     [ebp+0], eax
.text:00401B59                 cmp     byte ptr [edi], 0
.text:00401B5C                 jz      loc_401C70
.text:00401B62                 mov     ecx, [esp+5Ch+var_18]
.text:00401B66                 mov     esi, [ecx+4]
.text:00401B69                 test    esi, esi
.text:00401B6B                 jz      short loc_401BB6
.text:00401B6D                 lea     ebx, [edi+1]
.text:00401B70                 mov     [ebp+0Ch], ebx
.text:00401B73
.text:00401B73 loc_401B73:                             ; CODE XREF: sub_4018D0+3A8↓j
.text:00401B73                                         ; sub_4018D0+3C4↓j
.text:00401B73                 mov     ebx, [ebp+14h]
.text:00401B76                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401B79                 call    strlen
.text:00401B7E                 add     [ebp+14h], eax
.text:00401B81                 mov     esi, [esp+5Ch+arg_10]
.text:00401B85                 test    esi, esi
.text:00401B87                 jz      short loc_401B93
.text:00401B89                 mov     ebp, [esp+5Ch+var_24]
.text:00401B8D                 mov     ecx, [esp+5Ch+arg_10]
.text:00401B91                 mov     [ecx], ebp
.text:00401B93
.text:00401B93 loc_401B93:                             ; CODE XREF: sub_4018D0+2B7↑j
.text:00401B93                 mov     eax, [esp+5Ch+var_18]
.text:00401B97                 mov     ecx, [eax+8]
.text:00401B9A                 test    ecx, ecx
.text:00401B9C                 jnz     short loc_401BAA
.text:00401B9E                 mov     ecx, [esp+5Ch+var_18]
.text:00401BA2
.text:00401BA2 loc_401BA2:                             ; CODE XREF: sub_4018D0+723↓j
.text:00401BA2                 mov     eax, [ecx+0Ch]
.text:00401BA5                 jmp     loc_401A27
.text:00401BAA ; ---------------------------------------------------------------------------
.text:00401BAA
.text:00401BAA loc_401BAA:                             ; CODE XREF: sub_4018D0+2CC↑j
.text:00401BAA                                         ; sub_4018D0+719↓j
.text:00401BAA                 mov     esi, [eax+0Ch]
.text:00401BAD                 xor     eax, eax
.text:00401BAF                 mov     [ecx], esi
.text:00401BB1                 jmp     loc_401A27
.text:00401BB6 ; ---------------------------------------------------------------------------
.text:00401BB6
.text:00401BB6 loc_401BB6:                             ; CODE XREF: sub_4018D0+29B↑j
.text:00401BB6                 mov     edi, [esp+5Ch+var_14]
.text:00401BBA                 test    edi, edi
.text:00401BBC                 jz      short loc_401C10
.text:00401BBE                 mov     esi, [esp+5Ch+arg_4]
.text:00401BC2                 mov     edx, [esi+eax*4-4]
.text:00401BC6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401BCA                 jz      short loc_401C32
.text:00401BCC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401BD3                 call    ds:libintl_gettext
.text:00401BD9                 mov     edx, [esp+5Ch+var_18]
.text:00401BDD                 mov     edi, [edx]
.text:00401BDF                 mov     [esp+5Ch+var_4C], edi
.text:00401BE3                 mov     ebx, [ebp+0]
.text:00401BE6                 mov     edi, [esp+5Ch+arg_4]
.text:00401BEA                 mov     ecx, [edi+ebx*4-4]
.text:00401BEE                 movsx   esi, byte ptr [ecx]
.text:00401BF1                 mov     ecx, ds:_iob
.text:00401BF7                 add     ecx, 40h ; '@'
.text:00401BFA                 mov     [esp+5Ch+var_50], esi
.text:00401BFE                 mov     ebx, [edi]
.text:00401C00                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401C04                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401C07                 mov     [esp+5Ch+MaxCount], ebx
.text:00401C0B                 call    fprintf
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_4018D0+2EC↑j
.text:00401C10                                         ; sub_4018D0+398↓j
.text:00401C10                 mov     ecx, [ebp+14h]
.text:00401C13                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401C16                 call    strlen
.text:00401C1B                 add     [ebp+14h], eax
.text:00401C1E                 mov     eax, [esp+5Ch+var_18]
.text:00401C22                 mov     esi, [eax+0Ch]
.text:00401C25                 mov     [ebp+8], esi
.text:00401C28
.text:00401C28 loc_401C28:                             ; CODE XREF: sub_4018D0+4E5↓j
.text:00401C28                                         ; sub_4018D0+73E↓j ...
.text:00401C28                 mov     eax, 3Fh ; '?'
.text:00401C2D                 jmp     loc_401A27
.text:00401C32 ; ---------------------------------------------------------------------------
.text:00401C32
.text:00401C32 loc_401C32:                             ; CODE XREF: sub_4018D0+2FA↑j
.text:00401C32                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401C39                 call    ds:libintl_gettext
.text:00401C3F                 mov     edx, [esp+5Ch+var_18]
.text:00401C43                 mov     edi, [esp+5Ch+arg_4]
.text:00401C47                 mov     ecx, ds:_iob
.text:00401C4D                 mov     esi, [edx]
.text:00401C4F                 add     ecx, 40h ; '@'
.text:00401C52                 mov     [esp+5Ch+var_50], esi
.text:00401C56                 mov     ebx, [edi]
.text:00401C58                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401C5C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401C5F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401C63                 call    fprintf
.text:00401C68                 jmp     short loc_401C10
.text:00401C68 ; ---------------------------------------------------------------------------
.text:00401C6A                 align 10h
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_4018D0+28C↑j
.text:00401C70                 mov     ebx, [esp+5Ch+var_18]
.text:00401C74                 cmp     dword ptr [ebx+4], 1
.text:00401C78                 jnz     loc_401B73
.text:00401C7E                 cmp     eax, [esp+5Ch+arg_0]
.text:00401C82                 jge     short loc_401C99
.text:00401C84                 mov     ebx, [esp+5Ch+arg_4]
.text:00401C88                 lea     edi, [ecx+2]
.text:00401C8B                 mov     [ebp+0], edi
.text:00401C8E                 mov     esi, [ebx+eax*4]
.text:00401C91                 mov     [ebp+0Ch], esi
.text:00401C94                 jmp     loc_401B73
.text:00401C99 ; ---------------------------------------------------------------------------
.text:00401C99
.text:00401C99 loc_401C99:                             ; CODE XREF: sub_4018D0+3B2↑j
.text:00401C99                 mov     edx, [esp+5Ch+var_14]
.text:00401C9D                 test    edx, edx
.text:00401C9F                 jnz     short loc_401CD0
.text:00401CA1
.text:00401CA1 loc_401CA1:                             ; CODE XREF: sub_4018D0+437↓j
.text:00401CA1                 mov     edx, [ebp+14h]
.text:00401CA4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401CA7                 call    strlen
.text:00401CAC                 add     [ebp+14h], eax
.text:00401CAF                 mov     eax, [esp+5Ch+var_18]
.text:00401CB3                 mov     edi, [eax+0Ch]
.text:00401CB6                 mov     [ebp+8], edi
.text:00401CB9
.text:00401CB9 loc_401CB9:                             ; CODE XREF: sub_4018D0+7C2↓j
.text:00401CB9                 mov     ebp, [esp+5Ch+Str]
.text:00401CBD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401CC1                 setnz   bl
.text:00401CC4                 movzx   esi, bl
.text:00401CC7                 lea     eax, [esi+esi*4+3Ah]
.text:00401CCB                 jmp     loc_401A27
.text:00401CD0 ; ---------------------------------------------------------------------------
.text:00401CD0
.text:00401CD0 loc_401CD0:                             ; CODE XREF: sub_4018D0+3CF↑j
.text:00401CD0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401CD7                 call    ds:libintl_gettext
.text:00401CDD                 mov     ecx, [ebp+0]
.text:00401CE0                 mov     esi, [esp+5Ch+arg_4]
.text:00401CE4                 mov     ebx, [esi+ecx*4-4]
.text:00401CE8                 mov     ecx, ds:_iob
.text:00401CEE                 mov     [esp+5Ch+var_50], ebx
.text:00401CF2                 mov     edi, [esi]
.text:00401CF4                 add     ecx, 40h ; '@'
.text:00401CF7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401CFB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401CFE                 mov     [esp+5Ch+MaxCount], edi
.text:00401D02                 call    fprintf
.text:00401D07                 jmp     short loc_401CA1
.text:00401D07 ; ---------------------------------------------------------------------------
.text:00401D09                 align 10h
.text:00401D10
.text:00401D10 loc_401D10:                             ; CODE XREF: sub_4018D0+21E↑j
.text:00401D10                                         ; sub_4018D0+27A↑j
.text:00401D10                 mov     eax, [esp+5Ch+arg_14]
.text:00401D14                 test    eax, eax
.text:00401D16                 jz      short loc_401D46
.text:00401D18                 mov     ebx, [ebp+0]
.text:00401D1B                 mov     esi, [esp+5Ch+arg_4]
.text:00401D1F                 mov     edi, [esi+ebx*4]
.text:00401D22                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401D26                 jz      short loc_401D49
.text:00401D28                 mov     ecx, [ebp+14h]
.text:00401D2B                 mov     edx, [esp+5Ch+Str]
.text:00401D2F                 movsx   ebx, byte ptr [ecx]
.text:00401D32                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401D35                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401D39                 call    strchr
.text:00401D3E                 test    eax, eax
.text:00401D40                 jnz     loc_401DF0
.text:00401D46
.text:00401D46 loc_401D46:                             ; CODE XREF: sub_4018D0+446↑j
.text:00401D46                 mov     ebx, [ebp+0]
.text:00401D49
.text:00401D49 loc_401D49:                             ; CODE XREF: sub_4018D0+456↑j
.text:00401D49                 mov     eax, [esp+5Ch+var_14]
.text:00401D4D                 test    eax, eax
.text:00401D4F                 jz      short loc_401DA1
.text:00401D51                 mov     esi, [esp+5Ch+arg_4]
.text:00401D55                 mov     edi, [esi+ebx*4]
.text:00401D58                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401D5C                 jz      short loc_401DBA
.text:00401D5E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401D65                 call    ds:libintl_gettext
.text:00401D6B                 mov     edi, [ebp+14h]
.text:00401D6E                 mov     [esp+5Ch+var_4C], edi
.text:00401D72                 mov     ebx, [ebp+0]
.text:00401D75                 mov     edi, [esp+5Ch+arg_4]
.text:00401D79                 mov     esi, [edi+ebx*4]
.text:00401D7C                 movsx   ecx, byte ptr [esi]
.text:00401D7F                 mov     esi, ds:_iob
.text:00401D85                 add     esi, 40h ; '@'
.text:00401D88                 mov     [esp+5Ch+var_50], ecx
.text:00401D8C                 mov     ebx, [edi]
.text:00401D8E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D92                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401D95                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D99                 call    fprintf
.text:00401D9E
.text:00401D9E loc_401D9E:                             ; CODE XREF: sub_4018D0+51D↓j
.text:00401D9E                 mov     ebx, [ebp+0]
.text:00401DA1
.text:00401DA1 loc_401DA1:                             ; CODE XREF: sub_4018D0+47F↑j
.text:00401DA1                 mov     dword ptr [ebp+14h], offset dword_401780
.text:00401DA8                 lea     edx, [ebx+1]
.text:00401DAB                 mov     [ebp+0], edx
.text:00401DAE
.text:00401DAE loc_401DAE:                             ; CODE XREF: sub_4018D0+999↓j
.text:00401DAE                 mov     dword ptr [ebp+8], 0
.text:00401DB5                 jmp     loc_401C28
.text:00401DBA ; ---------------------------------------------------------------------------
.text:00401DBA
.text:00401DBA loc_401DBA:                             ; CODE XREF: sub_4018D0+48C↑j
.text:00401DBA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401DC1                 call    ds:libintl_gettext
.text:00401DC7                 mov     ecx, [ebp+14h]
.text:00401DCA                 mov     edi, [esp+5Ch+arg_4]
.text:00401DCE                 mov     edx, ds:_iob
.text:00401DD4                 mov     [esp+5Ch+var_50], ecx
.text:00401DD8                 mov     ebx, [edi]
.text:00401DDA                 add     edx, 40h ; '@'
.text:00401DDD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401DE1                 mov     [esp+5Ch+MaxCount], ebx
.text:00401DE5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401DE8                 call    fprintf
.text:00401DED                 jmp     short loc_401D9E
.text:00401DED ; ---------------------------------------------------------------------------
.text:00401DEF                 align 10h
.text:00401DF0
.text:00401DF0 loc_401DF0:                             ; CODE XREF: sub_4018D0+196↑j
.text:00401DF0                                         ; sub_4018D0+1B5↑j ...
.text:00401DF0                 mov     esi, [ebp+14h]
.text:00401DF3                 movzx   ebx, byte ptr [esi]
.text:00401DF6                 inc     esi
.text:00401DF7                 mov     [ebp+14h], esi
.text:00401DFA                 mov     ecx, [esp+5Ch+Str]
.text:00401DFE                 movsx   esi, bl
.text:00401E01                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401E05                 mov     edi, esi
.text:00401E07                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401E0A                 call    strchr
.text:00401E0F                 mov     ecx, [ebp+14h]
.text:00401E12                 cmp     byte ptr [ecx], 0
.text:00401E15                 jnz     short loc_401E1A
.text:00401E17                 inc     dword ptr [ebp+0]
.text:00401E1A
.text:00401E1A loc_401E1A:                             ; CODE XREF: sub_4018D0+545↑j
.text:00401E1A                 test    eax, eax
.text:00401E1C                 jz      loc_402200
.text:00401E22                 cmp     bl, 3Ah ; ':'
.text:00401E25                 jz      loc_402200
.text:00401E2B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401E2E                 jz      loc_401EE6
.text:00401E34                 movzx   edx, byte ptr [eax+1]
.text:00401E38
.text:00401E38 loc_401E38:                             ; CODE XREF: sub_4018D0+61D↓j
.text:00401E38                 cmp     dl, 3Ah ; ':'
.text:00401E3B                 jz      short loc_401E44
.text:00401E3D
.text:00401E3D loc_401E3D:                             ; CODE XREF: sub_4018D0+590↓j
.text:00401E3D                 mov     eax, esi
.text:00401E3F                 jmp     loc_401A27
.text:00401E44 ; ---------------------------------------------------------------------------
.text:00401E44
.text:00401E44 loc_401E44:                             ; CODE XREF: sub_4018D0+56B↑j
.text:00401E44                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401E48                 jz      loc_401ED1
.text:00401E4E                 cmp     byte ptr [ecx], 0
.text:00401E51                 jz      short loc_401E62
.text:00401E53
.text:00401E53 loc_401E53:                             ; CODE XREF: sub_4018D0+604↓j
.text:00401E53                 inc     dword ptr [ebp+0]
.text:00401E56                 mov     [ebp+0Ch], ecx
.text:00401E59
.text:00401E59 loc_401E59:                             ; CODE XREF: sub_4018D0+5AB↓j
.text:00401E59                                         ; sub_4018D0+5C6↓j ...
.text:00401E59                 mov     dword ptr [ebp+14h], 0
.text:00401E60                 jmp     short loc_401E3D
.text:00401E62 ; ---------------------------------------------------------------------------
.text:00401E62
.text:00401E62 loc_401E62:                             ; CODE XREF: sub_4018D0+581↑j
.text:00401E62                 mov     ecx, [ebp+0]
.text:00401E65                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401E69                 jz      short loc_401E7D
.text:00401E6B                 mov     eax, [esp+5Ch+arg_4]
.text:00401E6F                 lea     edx, [ecx+1]
.text:00401E72                 mov     [ebp+0], edx
.text:00401E75                 mov     ebx, [eax+ecx*4]
.text:00401E78                 mov     [ebp+0Ch], ebx
.text:00401E7B                 jmp     short loc_401E59
.text:00401E7D ; ---------------------------------------------------------------------------
.text:00401E7D
.text:00401E7D loc_401E7D:                             ; CODE XREF: sub_4018D0+599↑j
.text:00401E7D                 mov     ecx, [esp+5Ch+var_14]
.text:00401E81                 test    ecx, ecx
.text:00401E83                 jnz     short loc_401E9F
.text:00401E85
.text:00401E85 loc_401E85:                             ; CODE XREF: sub_4018D0+5FF↓j
.text:00401E85                 mov     [ebp+8], edi
.text:00401E88                 mov     edi, [esp+5Ch+Str]
.text:00401E8C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401E8F                 jz      short loc_401E98
.text:00401E91                 mov     esi, 3Fh ; '?'
.text:00401E96                 jmp     short loc_401E59
.text:00401E98 ; ---------------------------------------------------------------------------
.text:00401E98
.text:00401E98 loc_401E98:                             ; CODE XREF: sub_4018D0+5BF↑j
.text:00401E98                 mov     esi, 3Ah ; ':'
.text:00401E9D                 jmp     short loc_401E59
.text:00401E9F ; ---------------------------------------------------------------------------
.text:00401E9F
.text:00401E9F loc_401E9F:                             ; CODE XREF: sub_4018D0+5B3↑j
.text:00401E9F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401EA6                 call    ds:libintl_gettext
.text:00401EAC                 mov     [esp+5Ch+var_50], edi
.text:00401EB0                 mov     ebx, [esp+5Ch+arg_4]
.text:00401EB4                 mov     edx, ds:_iob
.text:00401EBA                 mov     esi, [ebx]
.text:00401EBC                 add     edx, 40h ; '@'
.text:00401EBF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401EC3                 mov     [esp+5Ch+MaxCount], esi
.text:00401EC7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401ECA                 call    fprintf
.text:00401ECF                 jmp     short loc_401E85
.text:00401ED1 ; ---------------------------------------------------------------------------
.text:00401ED1
.text:00401ED1 loc_401ED1:                             ; CODE XREF: sub_4018D0+578↑j
.text:00401ED1                 cmp     byte ptr [ecx], 0
.text:00401ED4                 jnz     loc_401E53
.text:00401EDA                 mov     dword ptr [ebp+0Ch], 0
.text:00401EE1                 jmp     loc_401E59
.text:00401EE6 ; ---------------------------------------------------------------------------
.text:00401EE6
.text:00401EE6 loc_401EE6:                             ; CODE XREF: sub_4018D0+55E↑j
.text:00401EE6                 movzx   edx, byte ptr [eax+1]
.text:00401EEA                 cmp     dl, 3Bh ; ';'
.text:00401EED                 jnz     loc_401E38
.text:00401EF3                 mov     [esp+5Ch+var_2C], 0
.text:00401EFB                 mov     [esp+5Ch+var_30], 0
.text:00401F03                 mov     [esp+5Ch+var_34], 0
.text:00401F0B                 mov     [esp+5Ch+var_38], 0
.text:00401F13                 cmp     byte ptr [ecx], 0
.text:00401F16                 jz      loc_40218B
.text:00401F1C                 inc     dword ptr [ebp+0]
.text:00401F1F                 mov     [ebp+0Ch], ecx
.text:00401F22
.text:00401F22 loc_401F22:                             ; CODE XREF: sub_4018D0+8D4↓j
.text:00401F22                 mov     edi, [ebp+0Ch]
.text:00401F25                 mov     [ebp+14h], edi
.text:00401F28                 movzx   eax, byte ptr [edi]
.text:00401F2B                 test    al, al
.text:00401F2D                 jz      short loc_401F3F
.text:00401F2F                 cmp     al, 3Dh ; '='
.text:00401F31                 jz      short loc_401F3F
.text:00401F33
.text:00401F33 loc_401F33:                             ; CODE XREF: sub_4018D0+66D↓j
.text:00401F33                 inc     edi
.text:00401F34                 movzx   eax, byte ptr [edi]
.text:00401F37                 test    al, al
.text:00401F39                 jz      short loc_401F3F
.text:00401F3B                 cmp     al, 3Dh ; '='
.text:00401F3D                 jnz     short loc_401F33
.text:00401F3F
.text:00401F3F loc_401F3F:                             ; CODE XREF: sub_4018D0+65D↑j
.text:00401F3F                                         ; sub_4018D0+661↑j ...
.text:00401F3F                 mov     [esp+5Ch+var_3C], 0
.text:00401F47                 mov     esi, [esp+5Ch+arg_C]
.text:00401F4B                 mov     eax, [esi]
.text:00401F4D                 test    eax, eax
.text:00401F4F                 jz      loc_4020D0
.text:00401F55                 mov     ecx, eax
.text:00401F57
.text:00401F57 loc_401F57:                             ; CODE XREF: sub_4018D0+6B3↓j
.text:00401F57                 mov     ebx, [ebp+14h]
.text:00401F5A                 mov     eax, edi
.text:00401F5C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00401F5F                 sub     eax, ebx
.text:00401F61                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00401F65                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00401F69                 call    strncmp
.text:00401F6E                 test    eax, eax
.text:00401F70                 jz      loc_402137
.text:00401F76
.text:00401F76 loc_401F76:                             ; CODE XREF: sub_4018D0+88C↓j
.text:00401F76                                         ; sub_4018D0+89D↓j
.text:00401F76                 inc     [esp+5Ch+var_3C]
.text:00401F7A                 add     esi, 10h
.text:00401F7D                 mov     edx, [esi]
.text:00401F7F                 test    edx, edx
.text:00401F81                 mov     ecx, edx
.text:00401F83                 jnz     short loc_401F57
.text:00401F85
.text:00401F85 loc_401F85:                             ; CODE XREF: sub_4018D0+8B6↓j
.text:00401F85                 mov     esi, [esp+5Ch+var_34]
.text:00401F89                 test    esi, esi
.text:00401F8B                 jz      short loc_401F99
.text:00401F8D                 mov     ebx, [esp+5Ch+var_30]
.text:00401F91                 test    ebx, ebx
.text:00401F93                 jz      loc_4020E1
.text:00401F99
.text:00401F99 loc_401F99:                             ; CODE XREF: sub_4018D0+6BB↑j
.text:00401F99                 mov     esi, [esp+5Ch+var_2C]
.text:00401F9D                 test    esi, esi
.text:00401F9F                 jz      loc_4020D0
.text:00401FA5                 cmp     byte ptr [edi], 0
.text:00401FA8                 jz      loc_402050
.text:00401FAE                 mov     ecx, [esp+5Ch+var_2C]
.text:00401FB2                 mov     ebx, [ecx+4]
.text:00401FB5                 test    ebx, ebx
.text:00401FB7                 jz      short loc_401FF8
.text:00401FB9                 lea     edx, [edi+1]
.text:00401FBC                 mov     [ebp+0Ch], edx
.text:00401FBF
.text:00401FBF loc_401FBF:                             ; CODE XREF: sub_4018D0+788↓j
.text:00401FBF                                         ; sub_4018D0+7A7↓j
.text:00401FBF                 mov     edi, [ebp+14h]
.text:00401FC2                 mov     [esp+5Ch+Str1], edi ; Str
.text:00401FC5                 call    strlen
.text:00401FCA                 add     [ebp+14h], eax
.text:00401FCD                 mov     eax, [esp+5Ch+arg_10]
.text:00401FD1                 test    eax, eax
.text:00401FD3                 jz      short loc_401FE0
.text:00401FD5                 mov     edx, [esp+5Ch+var_38]
.text:00401FD9                 mov     ebp, [esp+5Ch+arg_10]
.text:00401FDD                 mov     [ebp+0], edx
.text:00401FE0
.text:00401FE0 loc_401FE0:                             ; CODE XREF: sub_4018D0+703↑j
.text:00401FE0                 mov     eax, [esp+5Ch+var_2C]
.text:00401FE4                 mov     ecx, [eax+8]
.text:00401FE7                 test    ecx, ecx
.text:00401FE9                 jnz     loc_401BAA
.text:00401FEF                 mov     ecx, [esp+5Ch+var_2C]
.text:00401FF3                 jmp     loc_401BA2
.text:00401FF8 ; ---------------------------------------------------------------------------
.text:00401FF8
.text:00401FF8 loc_401FF8:                             ; CODE XREF: sub_4018D0+6E7↑j
.text:00401FF8                 mov     eax, [esp+5Ch+var_14]
.text:00401FFC                 test    eax, eax
.text:00401FFE                 jnz     short loc_402013
.text:00402000
.text:00402000 loc_402000:                             ; CODE XREF: sub_4018D0+779↓j
.text:00402000                 mov     ecx, [ebp+14h]
.text:00402003                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402006                 call    strlen
.text:0040200B                 add     [ebp+14h], eax
.text:0040200E                 jmp     loc_401C28
.text:00402013 ; ---------------------------------------------------------------------------
.text:00402013
.text:00402013 loc_402013:                             ; CODE XREF: sub_4018D0+72E↑j
.text:00402013                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040201A                 call    ds:libintl_gettext
.text:00402020                 mov     edx, [esp+5Ch+var_2C]
.text:00402024                 mov     ebx, [esp+5Ch+arg_4]
.text:00402028                 mov     edi, [edx]
.text:0040202A                 mov     [esp+5Ch+var_50], edi
.text:0040202E                 mov     edi, ds:_iob
.text:00402034                 mov     esi, [ebx]
.text:00402036                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040203A                 add     edi, 40h ; '@'
.text:0040203D                 mov     [esp+5Ch+MaxCount], esi
.text:00402041                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402044                 call    fprintf
.text:00402049                 jmp     short loc_402000
.text:00402049 ; ---------------------------------------------------------------------------
.text:0040204B                 align 10h
.text:00402050
.text:00402050 loc_402050:                             ; CODE XREF: sub_4018D0+6D8↑j
.text:00402050                 mov     esi, [esp+5Ch+var_2C]
.text:00402054                 cmp     dword ptr [esi+4], 1
.text:00402058                 jnz     loc_401FBF
.text:0040205E                 mov     ecx, [ebp+0]
.text:00402061                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402065                 jge     short loc_40207C
.text:00402067                 mov     eax, [esp+5Ch+arg_4]
.text:0040206B                 lea     ebx, [ecx+1]
.text:0040206E                 mov     [ebp+0], ebx
.text:00402071                 mov     edi, [eax+ecx*4]
.text:00402074                 mov     [ebp+0Ch], edi
.text:00402077                 jmp     loc_401FBF
.text:0040207C ; ---------------------------------------------------------------------------
.text:0040207C
.text:0040207C loc_40207C:                             ; CODE XREF: sub_4018D0+795↑j
.text:0040207C                 mov     edx, [esp+5Ch+var_14]
.text:00402080                 test    edx, edx
.text:00402082                 jnz     short loc_402097
.text:00402084
.text:00402084 loc_402084:                             ; CODE XREF: sub_4018D0+7FE↓j
.text:00402084                 mov     edx, [ebp+14h]
.text:00402087                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040208A                 call    strlen
.text:0040208F                 add     [ebp+14h], eax
.text:00402092                 jmp     loc_401CB9
.text:00402097 ; ---------------------------------------------------------------------------
.text:00402097
.text:00402097 loc_402097:                             ; CODE XREF: sub_4018D0+7B2↑j
.text:00402097                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040209E                 call    ds:libintl_gettext
.text:004020A4                 mov     ecx, [ebp+0]
.text:004020A7                 mov     ebx, [esp+5Ch+arg_4]
.text:004020AB                 mov     edi, [ebx+ecx*4-4]
.text:004020AF                 mov     ecx, ds:_iob
.text:004020B5                 mov     [esp+5Ch+var_50], edi
.text:004020B9                 mov     esi, [ebx]
.text:004020BB                 add     ecx, 40h ; '@'
.text:004020BE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004020C2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004020C5                 mov     [esp+5Ch+MaxCount], esi
.text:004020C9                 call    fprintf
.text:004020CE                 jmp     short loc_402084
.text:004020D0 ; ---------------------------------------------------------------------------
.text:004020D0
.text:004020D0 loc_4020D0:                             ; CODE XREF: sub_4018D0+67F↑j
.text:004020D0                                         ; sub_4018D0+6CF↑j
.text:004020D0                 mov     dword ptr [ebp+14h], 0
.text:004020D7                 mov     eax, 57h ; 'W'
.text:004020DC                 jmp     loc_401A27
.text:004020E1 ; ---------------------------------------------------------------------------
.text:004020E1
.text:004020E1 loc_4020E1:                             ; CODE XREF: sub_4018D0+6C3↑j
.text:004020E1                 mov     edi, [esp+5Ch+var_14]
.text:004020E5                 test    edi, edi
.text:004020E7                 jnz     short loc_4020FF
.text:004020E9
.text:004020E9 loc_4020E9:                             ; CODE XREF: sub_4018D0+865↓j
.text:004020E9                 mov     edx, [ebp+14h]
.text:004020EC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004020EF                 call    strlen
.text:004020F4                 add     [ebp+14h], eax
.text:004020F7                 inc     dword ptr [ebp+0]
.text:004020FA                 jmp     loc_401C28
.text:004020FF ; ---------------------------------------------------------------------------
.text:004020FF
.text:004020FF loc_4020FF:                             ; CODE XREF: sub_4018D0+817↑j
.text:004020FF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402106                 call    ds:libintl_gettext
.text:0040210C                 mov     ecx, [ebp+0]
.text:0040210F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402113                 mov     edi, [ebx+ecx*4]
.text:00402116                 mov     ecx, ds:_iob
.text:0040211C                 mov     [esp+5Ch+var_50], edi
.text:00402120                 mov     esi, [ebx]
.text:00402122                 add     ecx, 40h ; '@'
.text:00402125                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402129                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040212C                 mov     [esp+5Ch+MaxCount], esi
.text:00402130                 call    fprintf
.text:00402135                 jmp     short loc_4020E9
.text:00402137 ; ---------------------------------------------------------------------------
.text:00402137
.text:00402137 loc_402137:                             ; CODE XREF: sub_4018D0+6A0↑j
.text:00402137                 mov     edx, [ebp+14h]
.text:0040213A                 mov     ebx, edi
.text:0040213C                 mov     ecx, [esi]
.text:0040213E                 sub     ebx, edx
.text:00402140                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402143                 call    strlen
.text:00402148                 cmp     ebx, eax
.text:0040214A                 jz      short loc_402172
.text:0040214C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402150                 test    ebx, ebx
.text:00402152                 jz      short loc_402161
.text:00402154                 mov     [esp+5Ch+var_34], 1
.text:0040215C                 jmp     loc_401F76
.text:00402161 ; ---------------------------------------------------------------------------
.text:00402161
.text:00402161 loc_402161:                             ; CODE XREF: sub_4018D0+882↑j
.text:00402161                 mov     [esp+5Ch+var_2C], esi
.text:00402165                 mov     ecx, [esp+5Ch+var_3C]
.text:00402169                 mov     [esp+5Ch+var_38], ecx
.text:0040216D                 jmp     loc_401F76
.text:00402172 ; ---------------------------------------------------------------------------
.text:00402172
.text:00402172 loc_402172:                             ; CODE XREF: sub_4018D0+87A↑j
.text:00402172                 mov     [esp+5Ch+var_2C], esi
.text:00402176                 mov     eax, [esp+5Ch+var_3C]
.text:0040217A                 mov     [esp+5Ch+var_30], 1
.text:00402182                 mov     [esp+5Ch+var_38], eax
.text:00402186                 jmp     loc_401F85
.text:0040218B ; ---------------------------------------------------------------------------
.text:0040218B
.text:0040218B loc_40218B:                             ; CODE XREF: sub_4018D0+646↑j
.text:0040218B                 mov     edx, [ebp+0]
.text:0040218E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402192                 jz      short loc_4021A9
.text:00402194                 mov     ebx, [esp+5Ch+arg_4]
.text:00402198                 lea     esi, [edx+1]
.text:0040219B                 mov     [ebp+0], esi
.text:0040219E                 mov     edi, [ebx+edx*4]
.text:004021A1                 mov     [ebp+0Ch], edi
.text:004021A4                 jmp     loc_401F22
.text:004021A9 ; ---------------------------------------------------------------------------
.text:004021A9
.text:004021A9 loc_4021A9:                             ; CODE XREF: sub_4018D0+8C2↑j
.text:004021A9                 mov     edi, [esp+5Ch+var_14]
.text:004021AD                 test    edi, edi
.text:004021AF                 jnz     short loc_4021CC
.text:004021B1
.text:004021B1 loc_4021B1:                             ; CODE XREF: sub_4018D0+92C↓j
.text:004021B1                 mov     [ebp+8], esi
.text:004021B4                 mov     ebp, [esp+5Ch+Str]
.text:004021B8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004021BC                 jz      short loc_4021C8
.text:004021BE                 mov     bl, 3Fh ; '?'
.text:004021C0
.text:004021C0 loc_4021C0:                             ; CODE XREF: sub_4018D0+8FA↓j
.text:004021C0                 movsx   eax, bl
.text:004021C3                 jmp     loc_401A27
.text:004021C8 ; ---------------------------------------------------------------------------
.text:004021C8
.text:004021C8 loc_4021C8:                             ; CODE XREF: sub_4018D0+8EC↑j
.text:004021C8                 mov     bl, 3Ah ; ':'
.text:004021CA                 jmp     short loc_4021C0
.text:004021CC ; ---------------------------------------------------------------------------
.text:004021CC
.text:004021CC loc_4021CC:                             ; CODE XREF: sub_4018D0+8DF↑j
.text:004021CC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004021D3                 call    ds:libintl_gettext
.text:004021D9                 mov     [esp+5Ch+var_50], esi
.text:004021DD                 mov     edx, [esp+5Ch+arg_4]
.text:004021E1                 mov     ecx, ds:_iob
.text:004021E7                 mov     ebx, [edx]
.text:004021E9                 add     ecx, 40h ; '@'
.text:004021EC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021F0                 mov     [esp+5Ch+MaxCount], ebx
.text:004021F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004021F7                 call    fprintf
.text:004021FC                 jmp     short loc_4021B1
.text:004021FC ; ---------------------------------------------------------------------------
.text:004021FE                 align 10h
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_4018D0+54C↑j
.text:00402200                                         ; sub_4018D0+555↑j
.text:00402200                 mov     eax, [esp+5Ch+var_14]
.text:00402204                 test    eax, eax
.text:00402206                 jz      short loc_40223F
.text:00402208                 mov     ebx, [ebp+1Ch]
.text:0040220B                 test    ebx, ebx
.text:0040220D                 jz      short loc_402247
.text:0040220F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402216
.text:00402216 loc_402216:                             ; CODE XREF: sub_4018D0+97E↓j
.text:00402216                 call    ds:libintl_gettext
.text:0040221C                 mov     [esp+5Ch+var_50], esi
.text:00402220                 mov     ebx, [esp+5Ch+arg_4]
.text:00402224                 mov     edx, ds:_iob
.text:0040222A                 mov     esi, [ebx]
.text:0040222C                 add     edx, 40h ; '@'
.text:0040222F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402233                 mov     [esp+5Ch+MaxCount], esi
.text:00402237                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040223A                 call    fprintf
.text:0040223F
.text:0040223F loc_40223F:                             ; CODE XREF: sub_4018D0+936↑j
.text:0040223F                 mov     [ebp+8], edi
.text:00402242                 jmp     loc_401C28
.text:00402247 ; ---------------------------------------------------------------------------
.text:00402247
.text:00402247 loc_402247:                             ; CODE XREF: sub_4018D0+93D↑j
.text:00402247                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040224E                 jmp     short loc_402216
.text:00402250 ; ---------------------------------------------------------------------------
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_4018D0+26E↑j
.text:00402250                 mov     edi, [esp+5Ch+var_14]
.text:00402254                 test    edi, edi
.text:00402256                 jnz     short loc_40226E
.text:00402258
.text:00402258 loc_402258:                             ; CODE XREF: sub_4018D0+9D4↓j
.text:00402258                 mov     edx, [ebp+14h]
.text:0040225B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040225E                 call    strlen
.text:00402263                 add     [ebp+14h], eax
.text:00402266                 inc     dword ptr [ebp+0]
.text:00402269                 jmp     loc_401DAE
.text:0040226E ; ---------------------------------------------------------------------------
.text:0040226E
.text:0040226E loc_40226E:                             ; CODE XREF: sub_4018D0+986↑j
.text:0040226E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402275                 call    ds:libintl_gettext
.text:0040227B                 mov     ebx, [ebp+0]
.text:0040227E                 mov     edi, [esp+5Ch+arg_4]
.text:00402282                 mov     ecx, [edi+ebx*4]
.text:00402285                 mov     ebx, ds:_iob
.text:0040228B                 mov     [esp+5Ch+var_50], ecx
.text:0040228F                 mov     esi, [edi]
.text:00402291                 add     ebx, 40h ; '@'
.text:00402294                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402298                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040229B                 mov     [esp+5Ch+MaxCount], esi
.text:0040229F                 call    fprintf
.text:004022A4                 jmp     short loc_402258
.text:004022A6 ; ---------------------------------------------------------------------------
.text:004022A6
.text:004022A6 loc_4022A6:                             ; CODE XREF: sub_4018D0+246↑j
.text:004022A6                 mov     ecx, [ebp+14h]
.text:004022A9                 mov     ebx, edi
.text:004022AB                 mov     edx, [esi]
.text:004022AD                 sub     ebx, ecx
.text:004022AF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004022B2                 call    strlen
.text:004022B7                 cmp     ebx, eax
.text:004022B9                 jz      short loc_402311
.text:004022BB                 mov     ebx, [esp+5Ch+var_18]
.text:004022BF                 test    ebx, ebx
.text:004022C1                 jz      short loc_402300
.text:004022C3                 mov     edx, [esp+5Ch+arg_14]
.text:004022C7                 test    edx, edx
.text:004022C9                 jnz     short loc_4022D7
.text:004022CB                 mov     ecx, [esp+5Ch+var_18]
.text:004022CF                 mov     ebx, [esi+4]
.text:004022D2                 cmp     [ecx+4], ebx
.text:004022D5                 jz      short loc_4022E4
.text:004022D7
.text:004022D7 loc_4022D7:                             ; CODE XREF: sub_4018D0+9F9↑j
.text:004022D7                                         ; sub_4018D0+A1A↓j ...
.text:004022D7                 mov     [esp+5Ch+var_20], 1
.text:004022DF                 jmp     loc_401B1C
.text:004022E4 ; ---------------------------------------------------------------------------
.text:004022E4
.text:004022E4 loc_4022E4:                             ; CODE XREF: sub_4018D0+A05↑j
.text:004022E4                 mov     edx, [esi+8]
.text:004022E7                 cmp     [ecx+8], edx
.text:004022EA                 jnz     short loc_4022D7
.text:004022EC                 mov     ebx, [esi+0Ch]
.text:004022EF                 cmp     [ecx+0Ch], ebx
.text:004022F2                 jnz     short loc_4022D7
.text:004022F4                 jmp     loc_401B1C
.text:004022F4 ; ---------------------------------------------------------------------------
.text:004022F9                 align 10h
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_4018D0+9F1↑j
.text:00402300                 mov     [esp+5Ch+var_18], esi
.text:00402304                 mov     eax, [esp+5Ch+var_28]
.text:00402308                 mov     [esp+5Ch+var_24], eax
.text:0040230C                 jmp     loc_401B1C
.text:00402311 ; ---------------------------------------------------------------------------
.text:00402311
.text:00402311 loc_402311:                             ; CODE XREF: sub_4018D0+9E9↑j
.text:00402311                 mov     [esp+5Ch+var_18], esi
.text:00402315                 mov     ecx, [esp+5Ch+var_28]
.text:00402319                 mov     [esp+5Ch+var_1C], 1
.text:00402321                 mov     [esp+5Ch+var_24], ecx
.text:00402325                 jmp     loc_401B30
.text:0040232A ; ---------------------------------------------------------------------------
.text:0040232A
.text:0040232A loc_40232A:                             ; CODE XREF: sub_4018D0+1BF↑j
.text:0040232A                 mov     eax, [esp+5Ch+Str]
.text:0040232E                 movsx   esi, dl
.text:00402331                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402335                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402338                 call    strchr
.text:0040233D                 test    eax, eax
.text:0040233F                 jnz     loc_401DF0
.text:00402345                 jmp     loc_401A95
.text:0040234A ; ---------------------------------------------------------------------------
.text:0040234A
.text:0040234A loc_40234A:                             ; CODE XREF: sub_4018D0+17C↑j
.text:0040234A                 mov     ecx, 1
.text:0040234F                 jmp     loc_401A52
.text:00402354 ; ---------------------------------------------------------------------------
.text:00402354
.text:00402354 loc_402354:                             ; CODE XREF: sub_4018D0+D4↑j
.text:00402354                                         ; sub_4018D0+130↑j
.text:00402354                 mov     eax, [ebp+20h]
.text:00402357                 cmp     eax, [ebp+24h]
.text:0040235A                 jz      loc_401A30
.text:00402360                 mov     [ebp+0], eax
.text:00402363                 jmp     loc_401A30
.text:00402368 ; ---------------------------------------------------------------------------
.text:00402368
.text:00402368 loc_402368:                             ; CODE XREF: sub_4018D0+FE↑j
.text:00402368                 mov     [ebp+20h], eax
.text:0040236B                 jmp     loc_4019F0
.text:00402370 ; ---------------------------------------------------------------------------
.text:00402370
.text:00402370 loc_402370:                             ; CODE XREF: sub_4018D0+CA↑j
.text:00402370                 mov     edx, [ebp+20h]
.text:00402373                 mov     eax, [ebp+24h]
.text:00402376                 cmp     edx, eax
.text:00402378                 jz      short loc_4023F0
.text:0040237A                 cmp     eax, ebx
.text:0040237C                 jz      short loc_402391
.text:0040237E                 mov     [esp+5Ch+Str2], ebp
.text:00402382                 mov     ebx, [esp+5Ch+arg_4]
.text:00402386                 mov     [esp+5Ch+Str1], ebx
.text:00402389                 call    sub_402580
.text:0040238E                 mov     ebx, [ebp+0]
.text:00402391
.text:00402391 loc_402391:                             ; CODE XREF: sub_4018D0+AAC↑j
.text:00402391                                         ; sub_4018D0+B22↓j ...
.text:00402391                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402395                 jge     short loc_4023E0
.text:00402397                 mov     esi, [esp+5Ch+arg_4]
.text:0040239B                 mov     eax, [esi+ebx*4]
.text:0040239E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004023A1                 jz      short loc_4023E8
.text:004023A3                 lea     esi, [esi+0]
.text:004023A9                 lea     edi, [edi+0]
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_4018D0+AFC↓j
.text:004023B0                                         ; sub_4018D0+B1C↓j
.text:004023B0                 lea     eax, [ebx+1]
.text:004023B3                 mov     ebx, eax
.text:004023B5                 mov     [ebp+0], eax
.text:004023B8                 cmp     eax, [esp+5Ch+arg_0]
.text:004023BC                 jge     short loc_4023E0
.text:004023BE                 mov     edi, [esp+5Ch+arg_4]
.text:004023C2                 mov     edx, [edi+eax*4]
.text:004023C5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004023C8                 jz      short loc_4023D0
.text:004023CA
.text:004023CA loc_4023CA:                             ; CODE XREF: sub_4018D0+B04↓j
.text:004023CA                 mov     ebx, eax
.text:004023CC                 jmp     short loc_4023B0
.text:004023CC ; ---------------------------------------------------------------------------
.text:004023CE                 align 10h
.text:004023D0
.text:004023D0 loc_4023D0:                             ; CODE XREF: sub_4018D0+AF8↑j
.text:004023D0                 cmp     byte ptr [edx+1], 0
.text:004023D4                 jz      short loc_4023CA
.text:004023D6                 lea     esi, [esi+0]
.text:004023D9                 lea     edi, [edi+0]
.text:004023E0
.text:004023E0 loc_4023E0:                             ; CODE XREF: sub_4018D0+AC5↑j
.text:004023E0                                         ; sub_4018D0+AEC↑j ...
.text:004023E0                 mov     [ebp+24h], ebx
.text:004023E3                 jmp     loc_4019A0
.text:004023E8 ; ---------------------------------------------------------------------------
.text:004023E8
.text:004023E8 loc_4023E8:                             ; CODE XREF: sub_4018D0+AD1↑j
.text:004023E8                 cmp     byte ptr [eax+1], 0
.text:004023EC                 jz      short loc_4023B0
.text:004023EE                 jmp     short loc_4023E0
.text:004023F0 ; ---------------------------------------------------------------------------
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_4018D0+AA8↑j
.text:004023F0                 cmp     edx, ebx
.text:004023F2                 jz      short loc_402391
.text:004023F4                 mov     [ebp+20h], ebx
.text:004023F7                 jmp     short loc_402391
.text:004023F9 ; ---------------------------------------------------------------------------
.text:004023F9
.text:004023F9 loc_4023F9:                             ; CODE XREF: sub_4018D0+88↑j
.text:004023F9                 mov     dword ptr [ebp+18h], 0
.text:00402400                 mov     esi, [esp+5Ch+Str]
.text:00402404
.text:00402404 loc_402404:                             ; CODE XREF: sub_4018D0+B49↓j
.text:00402404                 inc     esi
.text:00402405                 jmp     loc_401968
.text:00402405 ; ---------------------------------------------------------------------------
.text:0040240A                 align 10h
.text:00402410
.text:00402410 loc_402410:                             ; CODE XREF: sub_4018D0+80↑j
.text:00402410                 mov     dword ptr [ebp+18h], 2
.text:00402417                 mov     esi, ecx
.text:00402419                 jmp     short loc_402404
.text:00402419 ; ---------------------------------------------------------------------------
.text:0040241B                 align 10h
.text:00402420
.text:00402420 loc_402420:                             ; CODE XREF: sub_4018D0+69↑j
.text:00402420                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402427                 call    getenv
.text:0040242C                 test    eax, eax
.text:0040242E                 jz      loc_401944
.text:00402434                 jmp     loc_40193F
.text:00402434 ; ---------------------------------------------------------------------------
.text:00402439                 align 10h
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_4018D0+3F↑j
.text:00402440                 mov     dword ptr [ebp+0], 1
.text:00402447                 mov     ebx, 1
.text:0040244C                 jmp     loc_401920
.text:0040244C sub_4018D0      endp
.text:0040244C
.text:00402451 ; ---------------------------------------------------------------------------
.text:00402451                 jmp     short sub_402460
.text:00402451 ; ---------------------------------------------------------------------------
.text:00402453                 align 10h
.text:00402460
.text:00402460 ; =============== S U B R O U T I N E =======================================
.text:00402460
.text:00402460
.text:00402460 ; int __cdecl sub_402460(int, int, char *, int, int, int, int)
.text:00402460 sub_402460      proc near               ; CODE XREF: .text:00402451↑j
.text:00402460                                         ; sub_4026A0+3A↓p ...
.text:00402460
.text:00402460 var_2C          = dword ptr -2Ch
.text:00402460 var_28          = dword ptr -28h
.text:00402460 Str             = dword ptr -24h
.text:00402460 var_20          = dword ptr -20h
.text:00402460 var_1C          = dword ptr -1Ch
.text:00402460 var_18          = dword ptr -18h
.text:00402460 var_14          = dword ptr -14h
.text:00402460 var_10          = dword ptr -10h
.text:00402460 arg_0           = dword ptr  4
.text:00402460 arg_4           = dword ptr  8
.text:00402460 arg_8           = dword ptr  0Ch
.text:00402460 arg_C           = dword ptr  10h
.text:00402460 arg_10          = dword ptr  14h
.text:00402460 arg_14          = dword ptr  18h
.text:00402460 arg_18          = dword ptr  1Ch
.text:00402460
.text:00402460                 sub     esp, 2Ch
.text:00402463                 mov     edx, dword_405010
.text:00402469                 mov     [esp+2Ch+var_10], offset dword_406000 ; int
.text:00402471                 mov     ecx, dword_405014
.text:00402477                 mov     ds:dword_406000, edx
.text:0040247D                 mov     edx, [esp+2Ch+arg_18]
.text:00402481                 mov     ds:dword_406004, ecx
.text:00402487                 mov     ecx, [esp+2Ch+arg_14]
.text:0040248B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040248F                 mov     edx, [esp+2Ch+arg_10]
.text:00402493                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402497                 mov     ecx, [esp+2Ch+arg_C]
.text:0040249B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040249F                 mov     edx, [esp+2Ch+arg_8]
.text:004024A3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004024A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004024AB                 mov     [esp+2Ch+Str], edx ; Str
.text:004024AF                 mov     edx, [esp+2Ch+arg_0]
.text:004024B3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004024B7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004024BA                 call    sub_4018D0
.text:004024BF                 mov     ecx, ds:dword_406000
.text:004024C5                 mov     dword_405010, ecx
.text:004024CB                 mov     ecx, ds:dword_40600C
.text:004024D1                 mov     ds:dword_4061B0, ecx
.text:004024D7                 mov     ecx, ds:dword_406008
.text:004024DD                 mov     dword_405018, ecx
.text:004024E3                 add     esp, 2Ch
.text:004024E6                 retn
.text:004024E6 sub_402460      endp
.text:004024E6
.text:004024E6 ; ---------------------------------------------------------------------------
.text:004024E7                 align 10h
.text:004024F0                 sub     esp, 2Ch
.text:004024F3                 mov     edx, dword_405010
.text:004024F9                 mov     dword ptr [esp+1Ch], offset dword_406000
.text:00402501                 mov     ecx, dword_405014
.text:00402507                 mov     dword ptr [esp+18h], 1
.text:0040250F                 mov     ds:dword_406000, edx
.text:00402515                 mov     edx, [esp+38h]
.text:00402519                 mov     ds:dword_406004, ecx
.text:0040251F                 mov     ecx, [esp+34h]
.text:00402523                 mov     [esp+8], edx
.text:00402527                 mov     edx, [esp+30h]
.text:0040252B                 mov     [esp+4], ecx
.text:0040252F                 mov     dword ptr [esp+14h], 0
.text:00402537                 mov     dword ptr [esp+10h], 0
.text:0040253F                 mov     dword ptr [esp+0Ch], 0
.text:00402547                 mov     [esp], edx
.text:0040254A                 call    sub_4018D0
.text:0040254F                 mov     ecx, ds:dword_406000
.text:00402555                 mov     dword_405010, ecx
.text:0040255B                 mov     ecx, ds:dword_40600C
.text:00402561                 mov     ds:dword_4061B0, ecx
.text:00402567                 mov     ecx, ds:dword_406008
.text:0040256D                 mov     dword_405018, ecx
.text:00402573                 add     esp, 2Ch
.text:00402576                 retn
.text:00402576 ; ---------------------------------------------------------------------------
.text:00402577                 align 10h
.text:00402580
.text:00402580 ; =============== S U B R O U T I N E =======================================
.text:00402580
.text:00402580
.text:00402580 sub_402580      proc near               ; CODE XREF: sub_4018D0+113↑p
.text:00402580                                         ; sub_4018D0+AB9↑p
.text:00402580
.text:00402580 var_2C          = dword ptr -2Ch
.text:00402580 var_28          = dword ptr -28h
.text:00402580 var_24          = dword ptr -24h
.text:00402580 var_20          = dword ptr -20h
.text:00402580 var_1C          = dword ptr -1Ch
.text:00402580 var_18          = dword ptr -18h
.text:00402580 var_14          = dword ptr -14h
.text:00402580 arg_0           = dword ptr  4
.text:00402580 arg_4           = dword ptr  8
.text:00402580
.text:00402580                 push    ebp
.text:00402581                 push    edi
.text:00402582                 push    esi
.text:00402583                 push    ebx
.text:00402584                 sub     esp, 1Ch
.text:00402587                 mov     ecx, [esp+2Ch+arg_4]
.text:0040258B                 mov     eax, [esp+2Ch+arg_4]
.text:0040258F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402593                 mov     edx, [ecx+20h]
.text:00402596                 mov     edi, [esp+2Ch+arg_0]
.text:0040259A                 mov     ecx, [ebx]
.text:0040259C                 mov     [esp+2Ch+var_2C], edx
.text:0040259F                 mov     [esp+2Ch+var_14], edx
.text:004025A3                 mov     edx, [eax+24h]
.text:004025A6                 mov     [esp+2Ch+var_28], ecx
.text:004025AA                 mov     [esp+2Ch+var_1C], ecx
.text:004025AE                 cmp     ecx, edx
.text:004025B0                 mov     [esp+2Ch+var_18], edx
.text:004025B4                 jle     short loc_402630
.text:004025B6                 mov     esi, [esp+2Ch+var_2C]
.text:004025B9                 cmp     edx, esi
.text:004025BB                 jle     short loc_402630
.text:004025BD                 lea     esi, [esi+0]
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_402580+A1↓j
.text:004025C0                 mov     ebx, [esp+2Ch+var_1C]
.text:004025C4                 mov     edx, [esp+2Ch+var_18]
.text:004025C8                 mov     ebp, [esp+2Ch+var_18]
.text:004025CC                 mov     eax, [esp+2Ch+var_14]
.text:004025D0                 sub     ebx, edx
.text:004025D2                 mov     [esp+2Ch+var_20], ebx
.text:004025D6                 sub     ebp, eax
.text:004025D8                 cmp     ebx, ebp
.text:004025DA                 jle     short loc_402655
.text:004025DC                 xor     esi, esi
.text:004025DE                 cmp     esi, ebp
.text:004025E0                 jge     short loc_40260D
.text:004025E2                 mov     ecx, [esp+2Ch+var_1C]
.text:004025E6                 sub     ecx, ebp
.text:004025E8                 mov     [esp+2Ch+var_24], ecx
.text:004025EC                 lea     esi, [esi+0]
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_402580+8B↓j
.text:004025F0                 mov     ecx, [esp+2Ch+var_14]
.text:004025F4                 mov     edx, [esp+2Ch+var_24]
.text:004025F8                 add     ecx, esi
.text:004025FA                 add     edx, esi
.text:004025FC                 mov     ebx, [edi+ecx*4]
.text:004025FF                 mov     eax, [edi+edx*4]
.text:00402602                 inc     esi
.text:00402603                 cmp     esi, ebp
.text:00402605                 mov     [edi+ecx*4], eax
.text:00402608                 mov     [edi+edx*4], ebx
.text:0040260B                 jl      short loc_4025F0
.text:0040260D
.text:0040260D loc_40260D:                             ; CODE XREF: sub_402580+60↑j
.text:0040260D                 sub     [esp+2Ch+var_1C], ebp
.text:00402611
.text:00402611 loc_402611:                             ; CODE XREF: sub_402580+107↓j
.text:00402611                 mov     eax, [esp+2Ch+var_18]
.text:00402615                 cmp     [esp+2Ch+var_1C], eax
.text:00402619                 jle     short loc_402630
.text:0040261B                 mov     ebp, [esp+2Ch+var_14]
.text:0040261F                 cmp     eax, ebp
.text:00402621                 jg      short loc_4025C0
.text:00402623                 lea     esi, [esi+0]
.text:00402629                 lea     edi, [edi+0]
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_402580+34↑j
.text:00402630                                         ; sub_402580+3B↑j ...
.text:00402630                 mov     esi, [esp+2Ch+var_28]
.text:00402634                 mov     ecx, [esp+2Ch+var_18]
.text:00402638                 mov     eax, [esp+2Ch+var_2C]
.text:0040263B                 mov     edi, [esp+2Ch+arg_4]
.text:0040263F                 mov     edx, [esp+2Ch+var_28]
.text:00402643                 sub     esi, ecx
.text:00402645                 add     esi, eax
.text:00402647                 mov     [edi+20h], esi
.text:0040264A                 mov     [edi+24h], edx
.text:0040264D                 add     esp, 1Ch
.text:00402650                 pop     ebx
.text:00402651                 pop     esi
.text:00402652                 pop     edi
.text:00402653                 pop     ebp
.text:00402654                 retn
.text:00402655 ; ---------------------------------------------------------------------------
.text:00402655
.text:00402655 loc_402655:                             ; CODE XREF: sub_402580+5A↑j
.text:00402655                 xor     esi, esi
.text:00402657                 cmp     esi, [esp+2Ch+var_20]
.text:0040265B                 jge     short loc_40267F
.text:0040265D                 lea     esi, [esi+0]
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_402580+FD↓j
.text:00402660                 mov     ebx, [esp+2Ch+var_14]
.text:00402664                 mov     ebp, [esp+2Ch+var_18]
.text:00402668                 add     ebx, esi
.text:0040266A                 add     ebp, esi
.text:0040266C                 mov     edx, [edi+ebx*4]
.text:0040266F                 inc     esi
.text:00402670                 cmp     esi, [esp+2Ch+var_20]
.text:00402674                 mov     ecx, [edi+ebp*4]
.text:00402677                 mov     [edi+ebx*4], ecx
.text:0040267A                 mov     [edi+ebp*4], edx
.text:0040267D                 jl      short loc_402660
.text:0040267F
.text:0040267F loc_40267F:                             ; CODE XREF: sub_402580+DB↑j
.text:0040267F                 mov     esi, [esp+2Ch+var_20]
.text:00402683                 add     [esp+2Ch+var_14], esi
.text:00402687                 jmp     short loc_402611
.text:00402687 sub_402580      endp
.text:00402687
.text:00402687 ; ---------------------------------------------------------------------------
.text:00402689                 align 20h
.text:004026A0
.text:004026A0 ; =============== S U B R O U T I N E =======================================
.text:004026A0
.text:004026A0
.text:004026A0 ; int __cdecl sub_4026A0(int, int, char *, int, int)
.text:004026A0 sub_4026A0      proc near               ; CODE XREF: sub_401340+C2↑p
.text:004026A0                                         ; sub_402840+58↓p
.text:004026A0
.text:004026A0 var_1C          = dword ptr -1Ch
.text:004026A0 var_18          = dword ptr -18h
.text:004026A0 var_14          = dword ptr -14h
.text:004026A0 var_10          = dword ptr -10h
.text:004026A0 var_C           = dword ptr -0Ch
.text:004026A0 var_8           = dword ptr -8
.text:004026A0 var_4           = dword ptr -4
.text:004026A0 arg_0           = dword ptr  4
.text:004026A0 arg_4           = dword ptr  8
.text:004026A0 arg_8           = dword ptr  0Ch
.text:004026A0 arg_C           = dword ptr  10h
.text:004026A0 arg_10          = dword ptr  14h
.text:004026A0
.text:004026A0                 sub     esp, 1Ch
.text:004026A3                 mov     edx, [esp+1Ch+arg_C]
.text:004026A7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004026AF                 mov     ecx, [esp+1Ch+arg_10]
.text:004026B3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004026BB                 mov     [esp+1Ch+var_10], edx ; int
.text:004026BF                 mov     edx, [esp+1Ch+arg_4]
.text:004026C3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004026C7                 mov     ecx, [esp+1Ch+arg_8]
.text:004026CB                 mov     [esp+1Ch+var_18], edx ; int
.text:004026CF                 mov     edx, [esp+1Ch+arg_0]
.text:004026D3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004026D7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004026DA                 call    sub_402460
.text:004026DF                 add     esp, 1Ch
.text:004026E2                 retn
.text:004026E2 sub_4026A0      endp
.text:004026E2
.text:004026E2 ; ---------------------------------------------------------------------------
.text:004026E3                 align 10h
.text:004026F0                 sub     esp, 2Ch
.text:004026F3                 mov     edx, [esp+44h]
.text:004026F7                 mov     dword ptr [esp+18h], 0
.text:004026FF                 mov     ecx, [esp+40h]
.text:00402703                 mov     dword ptr [esp+14h], 0
.text:0040270B                 mov     [esp+1Ch], edx
.text:0040270F                 mov     edx, [esp+3Ch]
.text:00402713                 mov     [esp+10h], ecx
.text:00402717                 mov     ecx, [esp+38h]
.text:0040271B                 mov     [esp+0Ch], edx
.text:0040271F                 mov     edx, [esp+34h]
.text:00402723                 mov     [esp+8], ecx
.text:00402727                 mov     [esp+4], edx
.text:0040272B                 mov     edx, [esp+30h]
.text:0040272F                 mov     [esp], edx
.text:00402732                 call    sub_4018D0
.text:00402737                 add     esp, 2Ch
.text:0040273A                 retn
.text:0040273A ; ---------------------------------------------------------------------------
.text:0040273B                 align 10h
.text:00402740                 sub     esp, 1Ch
.text:00402743                 mov     edx, [esp+2Ch]
.text:00402747                 mov     dword ptr [esp+18h], 0
.text:0040274F                 mov     ecx, [esp+30h]
.text:00402753                 mov     dword ptr [esp+14h], 1
.text:0040275B                 mov     [esp+0Ch], edx
.text:0040275F                 mov     edx, [esp+24h]
.text:00402763                 mov     [esp+10h], ecx
.text:00402767                 mov     ecx, [esp+28h]
.text:0040276B                 mov     [esp+4], edx
.text:0040276F                 mov     edx, [esp+20h]
.text:00402773                 mov     [esp+8], ecx
.text:00402777                 mov     [esp], edx
.text:0040277A                 call    sub_402460
.text:0040277F                 add     esp, 1Ch
.text:00402782                 retn
.text:00402782 ; ---------------------------------------------------------------------------
.text:00402783                 align 10h
.text:00402790                 sub     esp, 2Ch
.text:00402793                 mov     edx, [esp+44h]
.text:00402797                 mov     dword ptr [esp+18h], 0
.text:0040279F                 mov     ecx, [esp+40h]
.text:004027A3                 mov     dword ptr [esp+14h], 1
.text:004027AB                 mov     [esp+1Ch], edx
.text:004027AF                 mov     edx, [esp+3Ch]
.text:004027B3                 mov     [esp+10h], ecx
.text:004027B7                 mov     ecx, [esp+38h]
.text:004027BB                 mov     [esp+0Ch], edx
.text:004027BF                 mov     edx, [esp+34h]
.text:004027C3                 mov     [esp+8], ecx
.text:004027C7                 mov     [esp+4], edx
.text:004027CB                 mov     edx, [esp+30h]
.text:004027CF                 mov     [esp], edx
.text:004027D2                 call    sub_4018D0
.text:004027D7                 add     esp, 2Ch
.text:004027DA                 retn
.text:004027DA ; ---------------------------------------------------------------------------
.text:004027DB                 align 10h
.text:004027E0 aHelp           db 'help',0             ; DATA XREF: .text:off_402800↓o
.text:004027E5 aVersion        db 'version',0          ; DATA XREF: .text:00402810↓o
.text:004027ED                 align 20h
.text:00402800 off_402800      dd offset aHelp         ; DATA XREF: sub_402840+3D↓o
.text:00402800                                         ; "help"
.text:00402804                 dd 2 dup(0)
.text:0040280C                 dd 68h
.text:00402810                 dd offset aVersion      ; "version"
.text:00402814                 dd 2 dup(0)
.text:0040281C                 dd 76h, 4 dup(0)
.text:00402830 ; ---------------------------------------------------------------------------
.text:00402830
.text:00402830 loc_402830:                             ; DATA XREF: sub_402840+45↓o
.text:00402830                 sub     eax, [eax]
.text:00402832                 lea     esi, [esi+0]
.text:00402839                 lea     edi, [edi+0]
.text:00402840
.text:00402840 ; =============== S U B R O U T I N E =======================================
.text:00402840
.text:00402840
.text:00402840 ; int __cdecl sub_402840(int, int, FILE *, int, int, int, char)
.text:00402840 sub_402840      proc near               ; CODE XREF: sub_401340+9E↑p
.text:00402840
.text:00402840 Code            = dword ptr -1Ch
.text:00402840 var_18          = dword ptr -18h
.text:00402840 var_14          = dword ptr -14h
.text:00402840 var_10          = dword ptr -10h
.text:00402840 var_C           = dword ptr -0Ch
.text:00402840 var_4           = dword ptr -4
.text:00402840 arg_0           = dword ptr  4
.text:00402840 arg_4           = dword ptr  8
.text:00402840 arg_8           = dword ptr  0Ch
.text:00402840 arg_C           = dword ptr  10h
.text:00402840 arg_10          = dword ptr  14h
.text:00402840 arg_14          = dword ptr  18h
.text:00402840 arg_18          = byte ptr  1Ch
.text:00402840
.text:00402840                 sub     esp, 1Ch
.text:00402843                 xor     eax, eax
.text:00402845                 cmp     [esp+1Ch+arg_0], 2
.text:0040284A                 mov     [esp+1Ch+var_4], ebx
.text:0040284E                 mov     ebx, dword_405014
.text:00402854                 mov     dword_405014, eax
.text:00402859                 jz      short loc_402871
.text:0040285B
.text:0040285B loc_40285B:                             ; CODE XREF: sub_402840+60↓j
.text:0040285B                                         ; sub_402840+6A↓j
.text:0040285B                 mov     dword_405014, ebx
.text:00402861                 xor     edx, edx
.text:00402863                 mov     ebx, [esp+1Ch+var_4]
.text:00402867                 mov     dword_405010, edx
.text:0040286D                 add     esp, 1Ch
.text:00402870                 retn
.text:00402871 ; ---------------------------------------------------------------------------
.text:00402871
.text:00402871 loc_402871:                             ; CODE XREF: sub_402840+19↑j
.text:00402871                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402879                 mov     edx, [esp+1Ch+arg_4]
.text:0040287D                 mov     [esp+1Ch+var_10], offset off_402800 ; int
.text:00402885                 mov     [esp+1Ch+var_14], offset loc_402830 ; char *
.text:0040288D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402891                 mov     [esp+1Ch+Code], 2 ; int
.text:00402898                 call    sub_4026A0
.text:0040289D                 cmp     eax, 0FFFFFFFFh
.text:004028A0                 jz      short loc_40285B
.text:004028A2                 cmp     eax, 68h ; 'h'
.text:004028A5                 jz      short loc_4028AE
.text:004028A7                 cmp     eax, 76h ; 'v'
.text:004028AA                 jnz     short loc_40285B
.text:004028AC                 jmp     short loc_4028B9
.text:004028AE ; ---------------------------------------------------------------------------
.text:004028AE
.text:004028AE loc_4028AE:                             ; CODE XREF: sub_402840+65↑j
.text:004028AE                 mov     [esp+1Ch+Code], 0
.text:004028B5                 call    [esp+1Ch+arg_14]
.text:004028B9
.text:004028B9 loc_4028B9:                             ; CODE XREF: sub_402840+6C↑j
.text:004028B9                 mov     ecx, [esp+1Ch+arg_10]
.text:004028BD                 lea     ebx, [esp+1Ch+arg_18]
.text:004028C1                 mov     edx, [esp+1Ch+arg_C]
.text:004028C5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:004028C9                 mov     ebx, [esp+1Ch+arg_8]
.text:004028CD                 mov     [esp+1Ch+var_10], ecx ; int
.text:004028D1                 mov     ecx, ds:_iob
.text:004028D7                 mov     [esp+1Ch+var_14], edx ; int
.text:004028DB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:004028DF                 add     ecx, 20h ; ' '
.text:004028E2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:004028E5                 call    sub_402D00
.text:004028EA                 mov     [esp+1Ch+Code], 0 ; Code
.text:004028F1                 call    exit
.text:004028F1 sub_402840      endp
.text:004028F1
.text:004028F1 ; ---------------------------------------------------------------------------
.text:004028F6                 align 10h
.text:00402900                 mov     edx, [esp+4]
.text:00402904                 mov     ds:dword_406030, edx
.text:0040290A                 retn
.text:0040290A ; ---------------------------------------------------------------------------
.text:0040290B aWriteError     db 'write error',0      ; DATA XREF: sub_402930:loc_402979↓o
.text:00402917 ; const char aSS_0[]
.text:00402917 aSS_0           db '%s: %s',0           ; DATA XREF: sub_402930+77↓o
.text:0040291E ; const char aS_1[]
.text:0040291E aS_1            db '%s',0               ; DATA XREF: sub_402930+A0↓o
.text:00402921 ; ---------------------------------------------------------------------------
.text:00402921                 jmp     short sub_402930
.text:00402921 ; ---------------------------------------------------------------------------
.text:00402923                 align 10h
.text:00402930
.text:00402930 ; =============== S U B R O U T I N E =======================================
.text:00402930
.text:00402930
.text:00402930 ; void __cdecl sub_402930()
.text:00402930 sub_402930      proc near               ; CODE XREF: .text:00402921↑j
.text:00402930                                         ; DATA XREF: sub_401340+5B↑o
.text:00402930
.text:00402930 Stream          = dword ptr -2Ch
.text:00402930 ErrorMessage    = dword ptr -28h
.text:00402930 var_24          = dword ptr -24h
.text:00402930 var_20          = byte ptr -20h
.text:00402930 var_1C          = dword ptr -1Ch
.text:00402930 var_9           = byte ptr -9
.text:00402930
.text:00402930                 push    esi
.text:00402931                 push    ebx
.text:00402932                 sub     esp, 24h
.text:00402935                 mov     edx, ds:_iob
.text:0040293B                 mov     ecx, [edx+2Ch]
.text:0040293E                 lea     esi, [edx+20h]
.text:00402941                 shr     ecx, 5
.text:00402944                 mov     bl, cl
.text:00402946                 mov     ecx, [edx+20h]
.text:00402949                 and     bl, 1
.text:0040294C                 cmp     ecx, [esi+8]
.text:0040294F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402952                 setz    [esp+2Ch+var_9]
.text:00402957                 call    fclose
.text:0040295C                 test    eax, eax
.text:0040295E                 setnz   al
.text:00402961                 test    bl, bl
.text:00402963                 jnz     loc_4029F3
.text:00402969                 test    al, al
.text:0040296B                 jz      short loc_4029C0
.text:0040296D
.text:0040296D loc_40296D:                             ; CODE XREF: sub_402930+CD↓j
.text:0040296D                 call    _errno
.text:00402972                 mov     esi, [eax]
.text:00402974
.text:00402974 loc_402974:                             ; CODE XREF: sub_402930+C7↓j
.text:00402974                 cmp     esi, 9
.text:00402977                 jz      short loc_4029E6
.text:00402979
.text:00402979 loc_402979:                             ; CODE XREF: sub_402930+B8↓j
.text:00402979                                         ; sub_402930+C1↓j
.text:00402979                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402980                 call    ds:libintl_gettext
.text:00402986                 mov     ebx, eax
.text:00402988                 mov     eax, ds:dword_406030
.text:0040298D                 test    eax, eax
.text:0040298F                 jz      short loc_4029C6
.text:00402991                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402994                 call    sub_404040
.text:00402999                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040299D                 mov     edx, Code
.text:004029A3                 mov     [esp+2Ch+var_1C], ebx
.text:004029A7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004029AF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004029B3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004029B6                 call    sub_404630
.text:004029BB                 nop
.text:004029BC                 lea     esi, [esi+0]
.text:004029C0
.text:004029C0 loc_4029C0:                             ; CODE XREF: sub_402930+3B↑j
.text:004029C0                                         ; sub_402930+B4↓j ...
.text:004029C0                 add     esp, 24h
.text:004029C3                 pop     ebx
.text:004029C4                 pop     esi
.text:004029C5                 retn
.text:004029C6 ; ---------------------------------------------------------------------------
.text:004029C6
.text:004029C6 loc_4029C6:                             ; CODE XREF: sub_402930+5F↑j
.text:004029C6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004029CA                 mov     ebx, Code
.text:004029D0                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:004029D8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004029DC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004029DF                 call    sub_404630
.text:004029E4                 jmp     short loc_4029C0
.text:004029E6 ; ---------------------------------------------------------------------------
.text:004029E6
.text:004029E6 loc_4029E6:                             ; CODE XREF: sub_402930+47↑j
.text:004029E6                 test    bl, bl
.text:004029E8                 jnz     short loc_402979
.text:004029EA                 cmp     [esp+2Ch+var_9], 0
.text:004029EF                 jnz     short loc_4029C0
.text:004029F1                 jmp     short loc_402979
.text:004029F3 ; ---------------------------------------------------------------------------
.text:004029F3
.text:004029F3 loc_4029F3:                             ; CODE XREF: sub_402930+33↑j
.text:004029F3                 xor     esi, esi
.text:004029F5                 test    al, al
.text:004029F7                 jz      loc_402974
.text:004029FD                 jmp     loc_40296D
.text:004029FD sub_402930      endp
.text:004029FD
.text:004029FD ; ---------------------------------------------------------------------------
.text:00402A02                 align 10h
.text:00402A10 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00402A10                                         ; DATA XREF: .data:Buffer↓o
.text:00402A42 ; const char Format[]
.text:00402A42 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_402D00+50↓o
.text:00402A4E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00402A4E                                         ; DATA XREF: sub_402D00:loc_402DA1↓o
.text:00402A5E                 db 12h dup(90h)
.text:00402A70 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00402A70                                         ; DATA XREF: sub_402D00+100↓o
.text:00402A70                 db 'ere is NO',0Ah
.text:00402A70                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00402A70                 db 'R PURPOSE.',0Ah,0
.text:00402B08 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00402B08                                         ; DATA XREF: sub_402D00:loc_402E41↓o
.text:00402B1F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00402B1F                                         ; DATA XREF: sub_402D00:loc_402E4D↓o
.text:00402B3B                 db 15h dup(90h)
.text:00402B50 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00402B50                                         ; DATA XREF: sub_402D00:loc_402E59↓o
.text:00402B50                 db 'and %s.',0Ah,0
.text:00402B70 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00402B70                                         ; DATA XREF: sub_402D00:loc_402E65↓o
.text:00402B70                 db '%s, and %s.',0Ah,0
.text:00402B94                 db 1Ch dup(90h)
.text:00402BB0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00402BB0                                         ; DATA XREF: sub_402D00:loc_402E71↓o
.text:00402BB0                 db '%s, %s, and %s.',0Ah,0
.text:00402BD8                 db 18h dup(90h)
.text:00402BF0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00402BF0                                         ; DATA XREF: sub_402D00:loc_402E7D↓o
.text:00402BF0                 db '%s, %s, %s, and %s.',0Ah,0
.text:00402C1C                 db 14h dup(90h)
.text:00402C30 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00402C30                                         ; DATA XREF: sub_402D00:loc_402E89↓o
.text:00402C30                 db '%s, %s, %s, %s,',0Ah
.text:00402C30                 db 'and %s.',0Ah,0
.text:00402C60                 db 10h dup(90h)
.text:00402C70 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00402C70                                         ; DATA XREF: sub_402D00:loc_402E95↓o
.text:00402C70                 db '%s, %s, %s, %s,',0Ah
.text:00402C70                 db '%s, and %s.',0Ah,0
.text:00402CA4                 align 10h
.text:00402CB0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00402CB0                                         ; DATA XREF: sub_402D00:def_402D6D↓o
.text:00402CB0                 db '%s, %s, %s, %s,',0Ah
.text:00402CB0                 db '%s, %s, and others.',0Ah,0
.text:00402CEC ; const char aSS[]
.text:00402CEC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_402D00+1B5↓o
.text:00402CF3                 align 10h
.text:00402D00
.text:00402D00 ; =============== S U B R O U T I N E =======================================
.text:00402D00
.text:00402D00
.text:00402D00 ; int __cdecl sub_402D00(FILE *, FILE *, int, int, va_list)
.text:00402D00 sub_402D00      proc near               ; CODE XREF: sub_402840+A5↑p
.text:00402D00                                         ; .text:00402EFA↓p
.text:00402D00
.text:00402D00 Stream          = dword ptr -2Ch
.text:00402D00 Format          = dword ptr -28h
.text:00402D00 ArgList         = dword ptr -24h
.text:00402D00 var_20          = dword ptr -20h
.text:00402D00 var_1C          = dword ptr -1Ch
.text:00402D00 var_14          = dword ptr -14h
.text:00402D00 arg_0           = dword ptr  4
.text:00402D00 arg_4           = dword ptr  8
.text:00402D00 arg_8           = dword ptr  0Ch
.text:00402D00 arg_C           = dword ptr  10h
.text:00402D00 arg_10          = dword ptr  14h
.text:00402D00
.text:00402D00                 push    ebp
.text:00402D01                 push    edi
.text:00402D02                 push    esi
.text:00402D03                 push    ebx
.text:00402D04                 sub     esp, 1Ch
.text:00402D07                 xor     ebx, ebx
.text:00402D09                 mov     edi, [esp+2Ch+arg_10]
.text:00402D0D                 mov     edx, [esp+2Ch+arg_8]
.text:00402D11                 mov     esi, [esp+2Ch+arg_0]
.text:00402D15                 mov     eax, [edi]
.text:00402D17                 mov     ecx, [esp+2Ch+arg_4]
.text:00402D1B                 mov     [esp+2Ch+var_14], edx
.text:00402D1F                 mov     ebp, [esp+2Ch+arg_C]
.text:00402D23                 lea     edx, [edi+4]
.text:00402D26                 test    eax, eax
.text:00402D28                 jz      short loc_402D3C
.text:00402D2A                 lea     esi, [esi+0]
.text:00402D30
.text:00402D30 loc_402D30:                             ; CODE XREF: sub_402D00+3A↓j
.text:00402D30                 mov     eax, edx
.text:00402D32                 inc     ebx
.text:00402D33                 mov     eax, [eax]
.text:00402D35                 add     edx, 4
.text:00402D38                 test    eax, eax
.text:00402D3A                 jnz     short loc_402D30
.text:00402D3C
.text:00402D3C loc_402D3C:                             ; CODE XREF: sub_402D00+28↑j
.text:00402D3C                 test    ecx, ecx
.text:00402D3E                 jz      loc_402EAD
.text:00402D44                 mov     [esp+2Ch+var_1C], ebp
.text:00402D48                 mov     edx, [esp+2Ch+var_14]
.text:00402D4C                 mov     [esp+2Ch+ArgList], ecx
.text:00402D50                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00402D58                 mov     [esp+2Ch+var_20], edx
.text:00402D5C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402D5F                 call    fprintf
.text:00402D64
.text:00402D64 loc_402D64:                             ; CODE XREF: sub_402D00+1C9↓j
.text:00402D64                 cmp     ebx, 9          ; switch 10 cases
.text:00402D67                 ja      def_402D6D      ; jumptable 00402D6D default case
.text:00402D6D                 jmp     ds:jpt_402D6D[ebx*4] ; switch jump
.text:00402D6D ; ---------------------------------------------------------------------------
.text:00402D74 jpt_402D6D      dd offset loc_402D9C    ; DATA XREF: sub_402D00+6D↑r
.text:00402D74                 dd offset loc_402DA1    ; jump table for switch statement
.text:00402D74                 dd offset loc_402E41
.text:00402D74                 dd offset loc_402E4D
.text:00402D74                 dd offset loc_402E59
.text:00402D74                 dd offset loc_402E65
.text:00402D74                 dd offset loc_402E71
.text:00402D74                 dd offset loc_402E7D
.text:00402D74                 dd offset loc_402E89
.text:00402D74                 dd offset loc_402E95
.text:00402D9C ; ---------------------------------------------------------------------------
.text:00402D9C
.text:00402D9C loc_402D9C:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402D9C                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402D9C                 call    abort           ; jumptable 00402D6D case 0
.text:00402DA1 ; ---------------------------------------------------------------------------
.text:00402DA1
.text:00402DA1 loc_402DA1:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402DA1                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402DA1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00402D6D case 1
.text:00402DA8                 nop
.text:00402DA9                 lea     esi, [esi+0]
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_402D00+148↓j
.text:00402DB0                                         ; sub_402D00+154↓j ...
.text:00402DB0                 call    ds:libintl_gettext
.text:00402DB6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00402DBA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402DBD                 mov     [esp+2Ch+Format], eax ; Format
.text:00402DC1                 call    vfprintf
.text:00402DC6                 mov     ebx, [esi+4]
.text:00402DC9                 dec     ebx
.text:00402DCA                 test    ebx, ebx
.text:00402DCC                 mov     [esi+4], ebx
.text:00402DCF                 js      short loc_402E2F
.text:00402DD1                 mov     edi, [esi]
.text:00402DD3                 mov     byte ptr [edi], 0Ah
.text:00402DD6                 inc     dword ptr [esi]
.text:00402DD8
.text:00402DD8 loc_402DD8:                             ; CODE XREF: sub_402D00+13F↓j
.text:00402DD8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00402DDC                 mov     edx, Buffer
.text:00402DE2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00402DE5                 call    fputs
.text:00402DEA                 mov     ebp, [esi+4]
.text:00402DED                 dec     ebp
.text:00402DEE                 test    ebp, ebp
.text:00402DF0                 mov     [esi+4], ebp
.text:00402DF3                 js      short loc_402E1D
.text:00402DF5                 mov     ecx, [esi]
.text:00402DF7                 mov     byte ptr [ecx], 0Ah
.text:00402DFA                 inc     dword ptr [esi]
.text:00402DFC
.text:00402DFC loc_402DFC:                             ; CODE XREF: sub_402D00+12D↓j
.text:00402DFC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00402E00                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00402E07                 call    ds:libintl_gettext
.text:00402E0D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00402E11                 add     esp, 1Ch
.text:00402E14                 pop     ebx
.text:00402E15                 pop     esi
.text:00402E16                 pop     edi
.text:00402E17                 pop     ebp
.text:00402E18                 jmp     fputs
.text:00402E1D ; ---------------------------------------------------------------------------
.text:00402E1D
.text:00402E1D loc_402E1D:                             ; CODE XREF: sub_402D00+F3↑j
.text:00402E1D                 mov     [esp+2Ch+Format], esi ; File
.text:00402E21                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402E28                 call    _flsbuf
.text:00402E2D                 jmp     short loc_402DFC
.text:00402E2F ; ---------------------------------------------------------------------------
.text:00402E2F
.text:00402E2F loc_402E2F:                             ; CODE XREF: sub_402D00+CF↑j
.text:00402E2F                 mov     [esp+2Ch+Format], esi ; File
.text:00402E33                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402E3A                 call    _flsbuf
.text:00402E3F                 jmp     short loc_402DD8
.text:00402E41 ; ---------------------------------------------------------------------------
.text:00402E41
.text:00402E41 loc_402E41:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402E41                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402E41                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00402D6D case 2
.text:00402E48                 jmp     loc_402DB0
.text:00402E4D ; ---------------------------------------------------------------------------
.text:00402E4D
.text:00402E4D loc_402E4D:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402E4D                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402E4D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00402D6D case 3
.text:00402E54                 jmp     loc_402DB0
.text:00402E59 ; ---------------------------------------------------------------------------
.text:00402E59
.text:00402E59 loc_402E59:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402E59                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402E59                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00402D6D case 4
.text:00402E60                 jmp     loc_402DB0
.text:00402E65 ; ---------------------------------------------------------------------------
.text:00402E65
.text:00402E65 loc_402E65:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402E65                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402E65                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00402D6D case 5
.text:00402E6C                 jmp     loc_402DB0
.text:00402E71 ; ---------------------------------------------------------------------------
.text:00402E71
.text:00402E71 loc_402E71:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402E71                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402E71                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00402D6D case 6
.text:00402E78                 jmp     loc_402DB0
.text:00402E7D ; ---------------------------------------------------------------------------
.text:00402E7D
.text:00402E7D loc_402E7D:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402E7D                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402E7D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00402D6D case 7
.text:00402E84                 jmp     loc_402DB0
.text:00402E89 ; ---------------------------------------------------------------------------
.text:00402E89
.text:00402E89 loc_402E89:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402E89                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402E89                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00402D6D case 8
.text:00402E90                 jmp     loc_402DB0
.text:00402E95 ; ---------------------------------------------------------------------------
.text:00402E95
.text:00402E95 loc_402E95:                             ; CODE XREF: sub_402D00+6D↑j
.text:00402E95                                         ; DATA XREF: sub_402D00:jpt_402D6D↑o
.text:00402E95                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00402D6D case 9
.text:00402E9C                 jmp     loc_402DB0
.text:00402EA1 ; ---------------------------------------------------------------------------
.text:00402EA1
.text:00402EA1 def_402D6D:                             ; CODE XREF: sub_402D00+67↑j
.text:00402EA1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00402D6D default case
.text:00402EA8                 jmp     loc_402DB0
.text:00402EAD ; ---------------------------------------------------------------------------
.text:00402EAD
.text:00402EAD loc_402EAD:                             ; CODE XREF: sub_402D00+3E↑j
.text:00402EAD                 mov     [esp+2Ch+var_20], ebp
.text:00402EB1                 mov     ecx, [esp+2Ch+var_14]
.text:00402EB5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00402EBD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402EC0                 mov     [esp+2Ch+ArgList], ecx
.text:00402EC4                 call    fprintf
.text:00402EC9                 jmp     loc_402D64
.text:00402EC9 sub_402D00      endp
.text:00402EC9
.text:00402EC9 ; ---------------------------------------------------------------------------
.text:00402ECE                 align 10h
.text:00402ED0                 sub     esp, 1Ch
.text:00402ED3                 mov     edx, [esp+2Ch]
.text:00402ED7                 lea     ecx, [esp+30h]
.text:00402EDB                 mov     [esp+10h], ecx
.text:00402EDF                 mov     ecx, [esp+28h]
.text:00402EE3                 mov     [esp+0Ch], edx
.text:00402EE7                 mov     edx, [esp+24h]
.text:00402EEB                 mov     [esp+8], ecx
.text:00402EEF                 mov     [esp+4], edx
.text:00402EF3                 mov     edx, [esp+20h]
.text:00402EF7                 mov     [esp], edx
.text:00402EFA                 call    sub_402D00
.text:00402EFF                 add     esp, 1Ch
.text:00402F02                 retn
.text:00402F02 ; ---------------------------------------------------------------------------
.text:00402F03                 align 10h
.text:00402F10 aLiteral        db 'literal',0          ; DATA XREF: .text:00402F50↓o
.text:00402F18 aShell          db 'shell',0            ; DATA XREF: .text:00402F54↓o
.text:00402F1E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402F58↓o
.text:00402F2B aC              db 'c',0                ; DATA XREF: .text:00402F5C↓o
.text:00402F2D aEscape         db 'escape',0           ; DATA XREF: .text:00402F60↓o
.text:00402F34 aLocale         db 'locale',0           ; DATA XREF: .text:00402F64↓o
.text:00402F3B aClocale        db 'clocale',0          ; DATA XREF: .text:00402F68↓o
.text:00402F43                 align 10h
.text:00402F50                 dd offset aLiteral      ; "literal"
.text:00402F54                 dd offset aShell        ; "shell"
.text:00402F58                 dd offset aShellAlways  ; "shell-always"
.text:00402F5C                 dd offset aC            ; "c"
.text:00402F60                 dd offset aEscape       ; "escape"
.text:00402F64                 dd offset aLocale       ; "locale"
.text:00402F68                 dd offset aClocale      ; "clocale"
.text:00402F6C                 dd 2 dup(0)
.text:00402F74                 dd 1, 2, 3, 4, 5, 6
.text:00402F8C asc_402F8C:                             ; DATA XREF: sub_402FA0+7E↓o
.text:00402F8C                                         ; sub_402FA0+A39↓o ...
.text:00402F8C                 text "UTF-16LE", '"',27h,'`'
.text:00402F92                 align 10h
.text:00402FA0
.text:00402FA0 ; =============== S U B R O U T I N E =======================================
.text:00402FA0
.text:00402FA0
.text:00402FA0 ; int __cdecl sub_402FA0(int, int, char *Str, int, int, int)
.text:00402FA0 sub_402FA0      proc near               ; CODE XREF: sub_402FA0+43A↓p
.text:00402FA0                                         ; .text:00403B63↓p ...
.text:00402FA0
.text:00402FA0 C               = dword ptr -4Ch
.text:00402FA0 Type            = dword ptr -48h
.text:00402FA0 SizeInBytes     = dword ptr -44h
.text:00402FA0 State           = dword ptr -40h
.text:00402FA0 var_3C          = dword ptr -3Ch
.text:00402FA0 var_38          = dword ptr -38h
.text:00402FA0 var_34          = dword ptr -34h
.text:00402FA0 var_30          = dword ptr -30h
.text:00402FA0 var_29          = byte ptr -29h
.text:00402FA0 var_28          = dword ptr -28h
.text:00402FA0 var_22          = byte ptr -22h
.text:00402FA0 var_21          = byte ptr -21h
.text:00402FA0 var_20          = dword ptr -20h
.text:00402FA0 var_1C          = dword ptr -1Ch
.text:00402FA0 var_18          = mbstate_t ptr -18h
.text:00402FA0 arg_0           = dword ptr  4
.text:00402FA0 arg_4           = dword ptr  8
.text:00402FA0 Str             = dword ptr  0Ch
.text:00402FA0 arg_C           = dword ptr  10h
.text:00402FA0 arg_10          = dword ptr  14h
.text:00402FA0 arg_14          = dword ptr  18h
.text:00402FA0
.text:00402FA0                 push    ebp
.text:00402FA1                 push    edi
.text:00402FA2                 push    esi
.text:00402FA3                 push    ebx
.text:00402FA4                 sub     esp, 3Ch
.text:00402FA7                 mov     edx, ds:__mb_cur_max
.text:00402FAD                 mov     [esp+4Ch+var_34], 0
.text:00402FB5                 mov     [esp+4Ch+var_1C], 0
.text:00402FBD                 cmp     dword ptr [edx], 1
.text:00402FC0                 mov     [esp+4Ch+var_20], 0
.text:00402FC8                 mov     [esp+4Ch+var_21], 0
.text:00402FCD                 setz    [esp+4Ch+var_22]
.text:00402FD2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402FD7                 ja      short def_402FDD ; jumptable 00402FDD default case, cases 0,1
.text:00402FD9                 mov     edx, [esp+4Ch+arg_10]
.text:00402FDD                 jmp     ds:jpt_402FDD[edx*4] ; switch jump
.text:00402FDD ; ---------------------------------------------------------------------------
.text:00402FE4 jpt_402FDD      dd offset def_402FDD    ; DATA XREF: sub_402FA0+3D↑r
.text:00402FE4                 dd offset def_402FDD    ; jump table for switch statement
.text:00402FE4                 dd offset loc_403925
.text:00402FE4                 dd offset loc_403000
.text:00402FE4                 dd offset loc_40394B
.text:00402FE4                 dd offset loc_403955
.text:00402FE4                 dd offset loc_403955
.text:00403000 ; ---------------------------------------------------------------------------
.text:00403000
.text:00403000 loc_403000:                             ; CODE XREF: sub_402FA0+3D↑j
.text:00403000                                         ; DATA XREF: sub_402FA0:jpt_402FDD↑o
.text:00403000                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402FDD case 3
.text:00403004                 cmp     [esp+4Ch+var_34], eax
.text:00403008                 jnb     short loc_403011
.text:0040300A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040300E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403011
.text:00403011 loc_403011:                             ; CODE XREF: sub_402FA0+68↑j
.text:00403011                 mov     [esp+4Ch+var_34], 1
.text:00403019                 mov     [esp+4Ch+var_21], 1
.text:0040301E                 mov     [esp+4Ch+var_1C], offset asc_402F8C ; "\"'`"
.text:00403026
.text:00403026 loc_403026:                             ; CODE XREF: sub_402FA0+9A6↓j
.text:00403026                 mov     [esp+4Ch+var_20], 1
.text:0040302E
.text:0040302E def_402FDD:                             ; CODE XREF: sub_402FA0+37↑j
.text:0040302E                                         ; sub_402FA0+3D↑j ...
.text:0040302E                 xor     ebp, ebp        ; jumptable 00402FDD default case, cases 0,1
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: sub_402FA0+3DB↓j
.text:00403030                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403035                 jz      loc_403917
.text:0040303B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040303F
.text:0040303F loc_40303F:                             ; CODE XREF: sub_402FA0+980↓j
.text:0040303F                 jz      loc_4038AE
.text:00403045                 cmp     [esp+4Ch+var_21], 0
.text:0040304A                 jz      short loc_403090
.text:0040304C                 mov     esi, [esp+4Ch+var_20]
.text:00403050                 test    esi, esi
.text:00403052                 jz      short loc_403090
.text:00403054                 mov     ecx, [esp+4Ch+var_20]
.text:00403058                 lea     edi, [ecx+ebp]
.text:0040305B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040305F                 ja      short loc_403090
.text:00403061                 cld
.text:00403062                 mov     ebx, [esp+4Ch+Str]
.text:00403066                 mov     edi, [esp+4Ch+var_1C]
.text:0040306A                 add     ebx, ebp
.text:0040306C                 mov     esi, ebx
.text:0040306E                 cmp     ecx, ecx
.text:00403070                 repe cmpsb
.text:00403072                 jnz     short loc_403090
.text:00403074                 mov     edx, [esp+4Ch+arg_4]
.text:00403078                 cmp     [esp+4Ch+var_34], edx
.text:0040307C                 jnb     short loc_40308A
.text:0040307E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403082                 mov     eax, [esp+4Ch+var_34]
.text:00403086                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040308A
.text:0040308A loc_40308A:                             ; CODE XREF: sub_402FA0+DC↑j
.text:0040308A                 inc     [esp+4Ch+var_34]
.text:0040308E                 mov     esi, esi
.text:00403090
.text:00403090 loc_403090:                             ; CODE XREF: sub_402FA0+AA↑j
.text:00403090                                         ; sub_402FA0+B2↑j ...
.text:00403090                 mov     edi, [esp+4Ch+Str]
.text:00403094                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403099                 movzx   eax, bl
.text:0040309C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040309F                 ja      def_4030A5      ; jumptable 004030A5 default case, cases 1-6,14-31,64
.text:004030A5                 jmp     ds:jpt_4030A5[eax*4] ; switch jump
.text:004030A5 ; ---------------------------------------------------------------------------
.text:004030AC jpt_4030A5      dd offset loc_4032A8, offset def_4030A5, offset def_4030A5
.text:004030AC                                         ; DATA XREF: sub_402FA0+105↑r
.text:004030AC                 dd offset def_4030A5, offset def_4030A5, offset def_4030A5 ; jump table for switch statement
.text:004030AC                 dd offset def_4030A5, offset loc_403380, offset loc_40339E
.text:004030AC                 dd offset loc_4033A2, offset loc_4033E7, offset loc_4033EB
.text:004030AC                 dd offset loc_4033EF, offset loc_4033F3, offset def_4030A5
.text:004030AC                 dd offset def_4030A5, offset def_4030A5, offset def_4030A5
.text:004030AC                 dd offset def_4030A5, offset def_4030A5, offset def_4030A5
.text:004030AC                 dd offset def_4030A5, offset def_4030A5, offset def_4030A5
.text:004030AC                 dd offset def_4030A5, offset def_4030A5, offset def_4030A5
.text:004030AC                 dd offset def_4030A5, offset def_4030A5, offset def_4030A5
.text:004030AC                 dd offset def_4030A5, offset def_4030A5, offset loc_403878
.text:004030AC                 dd offset loc_403878, offset loc_403878, offset loc_40389A
.text:004030AC                 dd offset loc_403878, offset def_4034A2, offset loc_403878
.text:004030AC                 dd offset loc_4033F7, offset loc_403878, offset loc_403878
.text:004030AC                 dd offset loc_403878, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset loc_403878
.text:004030AC                 dd offset loc_403878, offset loc_403878, offset loc_403878
.text:004030AC                 dd offset loc_40345C, offset def_4030A5, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset loc_403878, offset loc_403871
.text:004030AC                 dd offset def_4034A2, offset loc_403878, offset def_4034A2
.text:004030AC                 dd offset loc_403878, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset def_4034A2, offset def_4034A2, offset def_4034A2
.text:004030AC                 dd offset loc_403888, offset loc_403878, offset loc_403888
.text:004030AC                 dd offset loc_40389A
.text:004032A8 ; ---------------------------------------------------------------------------
.text:004032A8
.text:004032A8 loc_4032A8:                             ; CODE XREF: sub_402FA0+105↑j
.text:004032A8                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:004032A8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004030A5 case 0
.text:004032AD                 lea     eax, [ebp+1]
.text:004032B0                 jz      loc_403360
.text:004032B6                 mov     esi, [esp+4Ch+arg_4]
.text:004032BA                 cmp     [esp+4Ch+var_34], esi
.text:004032BE                 jnb     short loc_4032CC
.text:004032C0                 mov     eax, [esp+4Ch+arg_0]
.text:004032C4                 mov     ebx, [esp+4Ch+var_34]
.text:004032C8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004032CC
.text:004032CC loc_4032CC:                             ; CODE XREF: sub_402FA0+31E↑j
.text:004032CC                 inc     [esp+4Ch+var_34]
.text:004032D0                 mov     edx, [esp+4Ch+arg_4]
.text:004032D4                 cmp     [esp+4Ch+var_34], edx
.text:004032D8                 jnb     short loc_4032E6
.text:004032DA                 mov     edi, [esp+4Ch+arg_0]
.text:004032DE                 mov     ecx, [esp+4Ch+var_34]
.text:004032E2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004032E6
.text:004032E6 loc_4032E6:                             ; CODE XREF: sub_402FA0+338↑j
.text:004032E6                 inc     [esp+4Ch+var_34]
.text:004032EA                 mov     esi, [esp+4Ch+arg_4]
.text:004032EE                 cmp     [esp+4Ch+var_34], esi
.text:004032F2                 jnb     short loc_403300
.text:004032F4                 mov     ebx, [esp+4Ch+arg_0]
.text:004032F8                 mov     eax, [esp+4Ch+var_34]
.text:004032FC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_402FA0+352↑j
.text:00403300                 inc     [esp+4Ch+var_34]
.text:00403304                 mov     bl, 30h ; '0'
.text:00403306                 lea     esi, [esi+0]
.text:00403309                 lea     edi, [edi+0]
.text:00403310
.text:00403310 def_4034A2:                             ; CODE XREF: sub_402FA0+105↑j
.text:00403310                                         ; sub_402FA0+463↓j ...
.text:00403310                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:00403310                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:00403315                 lea     eax, [ebp+1]
.text:00403318                 jz      short loc_403360
.text:0040331A                 mov     cl, bl
.text:0040331C                 mov     edi, [esp+4Ch+arg_14]
.text:00403320                 mov     esi, 1
.text:00403325                 shr     cl, 5
.text:00403328                 movzx   edx, cl
.text:0040332B                 mov     ecx, ebx
.text:0040332D                 and     ecx, 1Fh
.text:00403330                 shl     esi, cl
.text:00403332                 test    [edi+edx*4+4], esi
.text:00403336                 jz      short loc_403352
.text:00403338
.text:00403338 loc_403338:                             ; CODE XREF: sub_402FA0+3FC↓j
.text:00403338                 mov     edx, [esp+4Ch+arg_4]
.text:0040333C                 cmp     [esp+4Ch+var_34], edx
.text:00403340                 jnb     short loc_40334E
.text:00403342                 mov     edi, [esp+4Ch+arg_0]
.text:00403346                 mov     esi, [esp+4Ch+var_34]
.text:0040334A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040334E
.text:0040334E loc_40334E:                             ; CODE XREF: sub_402FA0+3A0↑j
.text:0040334E                 inc     [esp+4Ch+var_34]
.text:00403352
.text:00403352 loc_403352:                             ; CODE XREF: sub_402FA0+396↑j
.text:00403352                 lea     eax, [ebp+1]
.text:00403355                 lea     esi, [esi+0]
.text:00403359                 lea     edi, [edi+0]
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_402FA0+310↑j
.text:00403360                                         ; sub_402FA0+378↑j ...
.text:00403360                 mov     ebp, [esp+4Ch+arg_4]
.text:00403364                 cmp     [esp+4Ch+var_34], ebp
.text:00403368                 jnb     short loc_403375
.text:0040336A                 mov     edx, [esp+4Ch+arg_0]
.text:0040336E                 mov     ecx, [esp+4Ch+var_34]
.text:00403372                 mov     [ecx+edx], bl
.text:00403375
.text:00403375 loc_403375:                             ; CODE XREF: sub_402FA0+3C8↑j
.text:00403375                 inc     [esp+4Ch+var_34]
.text:00403379                 mov     ebp, eax
.text:0040337B                 jmp     loc_403030
.text:00403380 ; ---------------------------------------------------------------------------
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_402FA0+105↑j
.text:00403380                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:00403380                 mov     dl, 61h ; 'a'   ; jumptable 004030A5 case 7
.text:00403382                 lea     esi, [esi+0]
.text:00403389                 lea     edi, [edi+0]
.text:00403390
.text:00403390 loc_403390:                             ; CODE XREF: sub_402FA0+400↓j
.text:00403390                                         ; sub_402FA0+409↓j ...
.text:00403390                 cmp     [esp+4Ch+var_21], 0
.text:00403395                 lea     eax, [ebp+1]
.text:00403398                 jz      short loc_403360
.text:0040339A                 mov     bl, dl
.text:0040339C                 jmp     short loc_403338
.text:0040339E ; ---------------------------------------------------------------------------
.text:0040339E
.text:0040339E loc_40339E:                             ; CODE XREF: sub_402FA0+105↑j
.text:0040339E                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:0040339E                 mov     dl, 62h ; 'b'   ; jumptable 004030A5 case 8
.text:004033A0                 jmp     short loc_403390
.text:004033A2 ; ---------------------------------------------------------------------------
.text:004033A2
.text:004033A2 loc_4033A2:                             ; CODE XREF: sub_402FA0+105↑j
.text:004033A2                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:004033A2                 mov     dl, 74h ; 't'   ; jumptable 004030A5 case 9
.text:004033A4
.text:004033A4 loc_4033A4:                             ; CODE XREF: sub_402FA0+449↓j
.text:004033A4                                         ; sub_402FA0+455↓j ...
.text:004033A4                 cmp     [esp+4Ch+arg_10], 1
.text:004033A9                 jnz     short loc_403390
.text:004033AB
.text:004033AB loc_4033AB:                             ; CODE XREF: sub_402FA0+45C↓j
.text:004033AB                                         ; sub_402FA0+4C1↓j ...
.text:004033AB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403772 cases 91,92,94,96,124
.text:004033B3                 mov     eax, [esp+4Ch+arg_14]
.text:004033B7                 mov     edx, [esp+4Ch+arg_C]
.text:004033BB                 mov     ecx, [esp+4Ch+Str]
.text:004033BF                 mov     ebx, [esp+4Ch+arg_4]
.text:004033C3                 mov     [esp+4Ch+var_38], eax ; int
.text:004033C7                 mov     ebp, [esp+4Ch+arg_0]
.text:004033CB                 mov     [esp+4Ch+State], edx ; int
.text:004033CF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004033D3                 mov     [esp+4Ch+Type], ebx ; int
.text:004033D7                 mov     [esp+4Ch+C], ebp ; int
.text:004033DA                 call    sub_402FA0
.text:004033DF
.text:004033DF loc_4033DF:                             ; CODE XREF: sub_402FA0+972↓j
.text:004033DF                 add     esp, 3Ch
.text:004033E2                 pop     ebx
.text:004033E3                 pop     esi
.text:004033E4                 pop     edi
.text:004033E5                 pop     ebp
.text:004033E6                 retn
.text:004033E7 ; ---------------------------------------------------------------------------
.text:004033E7
.text:004033E7 loc_4033E7:                             ; CODE XREF: sub_402FA0+105↑j
.text:004033E7                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:004033E7                 mov     dl, 6Eh ; 'n'   ; jumptable 004030A5 case 10
.text:004033E9                 jmp     short loc_4033A4
.text:004033EB ; ---------------------------------------------------------------------------
.text:004033EB
.text:004033EB loc_4033EB:                             ; CODE XREF: sub_402FA0+105↑j
.text:004033EB                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:004033EB                 mov     dl, 76h ; 'v'   ; jumptable 004030A5 case 11
.text:004033ED                 jmp     short loc_403390
.text:004033EF ; ---------------------------------------------------------------------------
.text:004033EF
.text:004033EF loc_4033EF:                             ; CODE XREF: sub_402FA0+105↑j
.text:004033EF                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:004033EF                 mov     dl, 66h ; 'f'   ; jumptable 004030A5 case 12
.text:004033F1                 jmp     short loc_403390
.text:004033F3 ; ---------------------------------------------------------------------------
.text:004033F3
.text:004033F3 loc_4033F3:                             ; CODE XREF: sub_402FA0+105↑j
.text:004033F3                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:004033F3                 mov     dl, 72h ; 'r'   ; jumptable 004030A5 case 13
.text:004033F5                 jmp     short loc_4033A4
.text:004033F7 ; ---------------------------------------------------------------------------
.text:004033F7
.text:004033F7 loc_4033F7:                             ; CODE XREF: sub_402FA0+105↑j
.text:004033F7                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:004033F7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004030A5 case 39
.text:004033FC                 jz      short loc_4033AB ; jumptable 00403772 cases 91,92,94,96,124
.text:004033FE                 cmp     [esp+4Ch+arg_10], 2
.text:00403403                 jnz     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:00403403                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:00403409                 mov     edx, [esp+4Ch+arg_4]
.text:0040340D                 cmp     [esp+4Ch+var_34], edx
.text:00403411                 jnb     short loc_40341F
.text:00403413                 mov     ecx, [esp+4Ch+arg_0]
.text:00403417                 mov     edi, [esp+4Ch+var_34]
.text:0040341B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040341F
.text:0040341F loc_40341F:                             ; CODE XREF: sub_402FA0+471↑j
.text:0040341F                 inc     [esp+4Ch+var_34]
.text:00403423                 mov     eax, [esp+4Ch+arg_4]
.text:00403427                 cmp     [esp+4Ch+var_34], eax
.text:0040342B                 jnb     short loc_403439
.text:0040342D                 mov     esi, [esp+4Ch+arg_0]
.text:00403431                 mov     edx, [esp+4Ch+var_34]
.text:00403435                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403439
.text:00403439 loc_403439:                             ; CODE XREF: sub_402FA0+48B↑j
.text:00403439                 inc     [esp+4Ch+var_34]
.text:0040343D                 mov     edi, [esp+4Ch+arg_4]
.text:00403441                 cmp     [esp+4Ch+var_34], edi
.text:00403445                 jnb     short loc_403453
.text:00403447                 mov     ecx, [esp+4Ch+arg_0]
.text:0040344B                 mov     eax, [esp+4Ch+var_34]
.text:0040344F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403453
.text:00403453 loc_403453:                             ; CODE XREF: sub_402FA0+4A5↑j
.text:00403453                                         ; sub_402FA0+5C4↓j ...
.text:00403453                 inc     [esp+4Ch+var_34]
.text:00403457                 jmp     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:00403457                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:0040345C ; ---------------------------------------------------------------------------
.text:0040345C
.text:0040345C loc_40345C:                             ; CODE XREF: sub_402FA0+105↑j
.text:0040345C                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:0040345C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004030A5 case 63
.text:00403461                 jz      loc_4033AB      ; jumptable 00403772 cases 91,92,94,96,124
.text:00403467                 cmp     [esp+4Ch+arg_10], 3
.text:0040346C                 jnz     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:0040346C                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:00403472                 lea     edx, [ebp+2]
.text:00403475                 cmp     edx, [esp+4Ch+arg_C]
.text:00403479                 jnb     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:00403479                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:0040347F                 mov     esi, [esp+4Ch+Str]
.text:00403483                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403488                 jnz     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:00403488                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:0040348E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403493                 movsx   eax, cl
.text:00403496                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403499                 cmp     eax, 1Dh
.text:0040349C                 ja      def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:0040349C                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:004034A2                 jmp     ds:jpt_4034A2[eax*4] ; switch jump
.text:004034A2 ; ---------------------------------------------------------------------------
.text:004034A9                 align 4
.text:004034AC jpt_4034A2      dd offset loc_403524    ; DATA XREF: sub_402FA0+502↑r
.text:004034AC                 dd offset def_4034A2    ; jump table for switch statement
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset loc_403524
.text:004034AC                 dd offset loc_403524
.text:004034AC                 dd offset loc_403524
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset loc_403524
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset loc_403524
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset def_4034A2
.text:004034AC                 dd offset loc_403524
.text:004034AC                 dd offset loc_403524
.text:004034AC                 dd offset loc_403524
.text:00403524 ; ---------------------------------------------------------------------------
.text:00403524
.text:00403524 loc_403524:                             ; CODE XREF: sub_402FA0+502↑j
.text:00403524                                         ; DATA XREF: sub_402FA0:jpt_4034A2↑o
.text:00403524                 mov     ebp, edx        ; jumptable 004034A2 cases 33,39-41,45,47,60-62
.text:00403526                 mov     bl, cl
.text:00403528                 mov     edx, [esp+4Ch+arg_4]
.text:0040352C                 cmp     [esp+4Ch+var_34], edx
.text:00403530                 jnb     short loc_40353E
.text:00403532                 mov     ecx, [esp+4Ch+arg_0]
.text:00403536                 mov     edi, [esp+4Ch+var_34]
.text:0040353A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040353E
.text:0040353E loc_40353E:                             ; CODE XREF: sub_402FA0+590↑j
.text:0040353E                 inc     [esp+4Ch+var_34]
.text:00403542                 mov     eax, [esp+4Ch+arg_4]
.text:00403546                 cmp     [esp+4Ch+var_34], eax
.text:0040354A                 jnb     short loc_403558
.text:0040354C                 mov     edx, [esp+4Ch+arg_0]
.text:00403550                 mov     esi, [esp+4Ch+var_34]
.text:00403554                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403558
.text:00403558 loc_403558:                             ; CODE XREF: sub_402FA0+5AA↑j
.text:00403558                 inc     [esp+4Ch+var_34]
.text:0040355C                 mov     edi, [esp+4Ch+arg_4]
.text:00403560                 cmp     [esp+4Ch+var_34], edi
.text:00403564                 jnb     loc_403453
.text:0040356A                 mov     eax, [esp+4Ch+arg_0]
.text:0040356E                 mov     ecx, [esp+4Ch+var_34]
.text:00403572                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403576                 jmp     loc_403453
.text:00403576 ; ---------------------------------------------------------------------------
.text:0040357B                 align 10h
.text:00403580
.text:00403580 def_4030A5:                             ; CODE XREF: sub_402FA0+FF↑j
.text:00403580                                         ; sub_402FA0+105↑j
.text:00403580                                         ; DATA XREF: ...
.text:00403580                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004030A5 default case, cases 1-6,14-31,64
.text:00403585                 jz      loc_4036B0
.text:0040358B                 mov     [esp+4Ch+var_28], 1
.text:00403593                 mov     esi, ds:__mb_cur_max
.text:00403599                 movzx   edx, bl
.text:0040359C                 cmp     dword ptr [esi], 1
.text:0040359F                 jz      loc_403694
.text:004035A5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004035AD                 mov     [esp+4Ch+C], edx ; C
.text:004035B0                 call    _isctype
.text:004035B5
.text:004035B5 loc_4035B5:                             ; CODE XREF: sub_402FA0+705↓j
.text:004035B5                 test    eax, eax
.text:004035B7                 setnz   [esp+4Ch+var_29]
.text:004035BC
.text:004035BC loc_4035BC:                             ; CODE XREF: sub_402FA0+7A5↓j
.text:004035BC                 cmp     [esp+4Ch+var_21], 0
.text:004035C1                 lea     eax, [ebp+1]
.text:004035C4                 jz      loc_403360
.text:004035CA                 cmp     [esp+4Ch+var_29], 0
.text:004035CF                 jnz     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:004035CF                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:004035D5
.text:004035D5 loc_4035D5:                             ; CODE XREF: sub_402FA0+7AB↓j
.text:004035D5                 mov     eax, [esp+4Ch+var_28]
.text:004035D9                 lea     edx, [eax+ebp]
.text:004035DC                 lea     esi, [esi+0]
.text:004035E0
.text:004035E0 loc_4035E0:                             ; CODE XREF: sub_402FA0+6EF↓j
.text:004035E0                 cmp     [esp+4Ch+var_21], 0
.text:004035E5                 jz      short loc_403660
.text:004035E7                 cmp     [esp+4Ch+var_29], 0
.text:004035EC                 jnz     short loc_403660
.text:004035EE                 mov     edi, [esp+4Ch+arg_4]
.text:004035F2                 cmp     [esp+4Ch+var_34], edi
.text:004035F6                 jnb     short loc_403604
.text:004035F8                 mov     esi, [esp+4Ch+arg_0]
.text:004035FC                 mov     eax, [esp+4Ch+var_34]
.text:00403600                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403604
.text:00403604 loc_403604:                             ; CODE XREF: sub_402FA0+656↑j
.text:00403604                 inc     [esp+4Ch+var_34]
.text:00403608                 mov     ecx, [esp+4Ch+arg_4]
.text:0040360C                 cmp     [esp+4Ch+var_34], ecx
.text:00403610                 jnb     short loc_403625
.text:00403612                 mov     cl, bl
.text:00403614                 mov     esi, [esp+4Ch+arg_0]
.text:00403618                 mov     edi, [esp+4Ch+var_34]
.text:0040361C                 shr     cl, 6
.text:0040361F                 add     cl, 30h ; '0'
.text:00403622                 mov     [edi+esi], cl
.text:00403625
.text:00403625 loc_403625:                             ; CODE XREF: sub_402FA0+670↑j
.text:00403625                 inc     [esp+4Ch+var_34]
.text:00403629                 mov     edi, [esp+4Ch+arg_4]
.text:0040362D                 cmp     [esp+4Ch+var_34], edi
.text:00403631                 jnb     short loc_403649
.text:00403633                 mov     cl, bl
.text:00403635                 mov     esi, [esp+4Ch+arg_0]
.text:00403639                 shr     cl, 3
.text:0040363C                 mov     edi, [esp+4Ch+var_34]
.text:00403640                 and     cl, 7
.text:00403643                 add     cl, 30h ; '0'
.text:00403646                 mov     [edi+esi], cl
.text:00403649
.text:00403649 loc_403649:                             ; CODE XREF: sub_402FA0+691↑j
.text:00403649                 inc     [esp+4Ch+var_34]
.text:0040364D                 and     bl, 7
.text:00403650                 add     bl, 30h ; '0'
.text:00403653                 lea     esi, [esi+0]
.text:00403659                 lea     edi, [edi+0]
.text:00403660
.text:00403660 loc_403660:                             ; CODE XREF: sub_402FA0+645↑j
.text:00403660                                         ; sub_402FA0+64C↑j
.text:00403660                 lea     eax, [ebp+1]
.text:00403663                 cmp     edx, eax
.text:00403665                 jbe     loc_403360
.text:0040366B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040366F                 cmp     [esp+4Ch+var_34], ebp
.text:00403673                 jnb     short loc_403680
.text:00403675                 mov     ecx, [esp+4Ch+arg_0]
.text:00403679                 mov     edi, [esp+4Ch+var_34]
.text:0040367D                 mov     [edi+ecx], bl
.text:00403680
.text:00403680 loc_403680:                             ; CODE XREF: sub_402FA0+6D3↑j
.text:00403680                 inc     [esp+4Ch+var_34]
.text:00403684                 mov     ebp, eax
.text:00403686                 mov     eax, [esp+4Ch+Str]
.text:0040368A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040368F                 jmp     loc_4035E0
.text:00403694 ; ---------------------------------------------------------------------------
.text:00403694
.text:00403694 loc_403694:                             ; CODE XREF: sub_402FA0+5FF↑j
.text:00403694                 mov     ecx, ds:_pctype
.text:0040369A                 mov     edi, [ecx]
.text:0040369C                 movzx   eax, word ptr [edi+edx*2]
.text:004036A0                 and     eax, 157h
.text:004036A5                 jmp     loc_4035B5
.text:004036A5 ; ---------------------------------------------------------------------------
.text:004036AA                 align 10h
.text:004036B0
.text:004036B0 loc_4036B0:                             ; CODE XREF: sub_402FA0+5E5↑j
.text:004036B0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004036B5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004036BD                 mov     [esp+4Ch+var_28], 0
.text:004036C5                 mov     [esp+4Ch+var_29], 1
.text:004036CA                 jz      loc_40385C
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: sub_402FA0+8CC↓j
.text:004036D0                 mov     ecx, [esp+4Ch+arg_C]
.text:004036D4                 lea     edx, [esp+4Ch+var_18]
.text:004036D8                 mov     edi, [esp+4Ch+Str]
.text:004036DC                 mov     [esp+4Ch+State], edx ; State
.text:004036E0                 lea     esi, [esp+4Ch+var_18._State]
.text:004036E4                 sub     ecx, ebp
.text:004036E6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004036EA                 add     edi, ebp
.text:004036EC                 mov     [esp+4Ch+var_30], edi
.text:004036F0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004036F4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004036F7                 call    mbrtowc
.text:004036FC                 test    eax, eax
.text:004036FE                 mov     edi, eax
.text:00403700                 jz      short loc_403740
.text:00403702                 cmp     eax, 0FFFFFFFFh
.text:00403705                 jz      loc_403852
.text:0040370B                 cmp     eax, 0FFFFFFFEh
.text:0040370E                 jz      loc_403812
.text:00403714                 cmp     [esp+4Ch+arg_10], 1
.text:00403719                 jz      short loc_403750
.text:0040371B
.text:0040371B loc_40371B:                             ; CODE XREF: sub_402FA0+7B9↓j
.text:0040371B                                         ; sub_402FA0+86D↓j
.text:0040371B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403720                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403728                 mov     [esp+4Ch+C], ecx ; C
.text:0040372B                 call    iswctype
.text:00403730                 test    eax, eax
.text:00403732                 jnz     short loc_403739
.text:00403734                 mov     [esp+4Ch+var_29], 0
.text:00403739
.text:00403739 loc_403739:                             ; CODE XREF: sub_402FA0+792↑j
.text:00403739                 mov     [esp+4Ch+var_28], edi
.text:0040373D                 lea     esi, [esi+0]
.text:00403740
.text:00403740 loc_403740:                             ; CODE XREF: sub_402FA0+760↑j
.text:00403740                                         ; sub_402FA0+87B↓j ...
.text:00403740                 cmp     [esp+4Ch+var_28], 1
.text:00403745                 jbe     loc_4035BC
.text:0040374B                 jmp     loc_4035D5
.text:00403750 ; ---------------------------------------------------------------------------
.text:00403750
.text:00403750 loc_403750:                             ; CODE XREF: sub_402FA0+779↑j
.text:00403750                 cmp     [esp+4Ch+arg_10], eax
.text:00403754                 mov     edx, 1
.text:00403759                 jnb     short loc_40371B
.text:0040375B
.text:0040375B loc_40375B:                             ; CODE XREF: sub_402FA0+867↓j
.text:0040375B                 mov     ecx, [esp+4Ch+Str]
.text:0040375F                 lea     esi, [edx+ebp]
.text:00403762                 movsx   eax, byte ptr [esi+ecx]
.text:00403766                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403769                 cmp     eax, 21h
.text:0040376C                 ja      def_403772      ; jumptable 00403772 default case, cases 93,95,97-123
.text:00403772                 jmp     ds:jpt_403772[eax*4] ; switch jump
.text:00403772 ; ---------------------------------------------------------------------------
.text:00403779                 align 4
.text:0040377C jpt_403772      dd offset loc_4033AB    ; DATA XREF: sub_402FA0+7D2↑r
.text:0040377C                 dd offset loc_4033AB    ; jump table for switch statement
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset loc_4033AB
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset loc_4033AB
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset def_403772
.text:0040377C                 dd offset loc_4033AB
.text:00403804 ; ---------------------------------------------------------------------------
.text:00403804
.text:00403804 def_403772:                             ; CODE XREF: sub_402FA0+7CC↑j
.text:00403804                                         ; sub_402FA0+7D2↑j
.text:00403804                                         ; DATA XREF: ...
.text:00403804                 inc     edx             ; jumptable 00403772 default case, cases 93,95,97-123
.text:00403805                 cmp     edx, edi
.text:00403807                 jb      loc_40375B
.text:0040380D                 jmp     loc_40371B
.text:00403812 ; ---------------------------------------------------------------------------
.text:00403812
.text:00403812 loc_403812:                             ; CODE XREF: sub_402FA0+76E↑j
.text:00403812                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403816                 mov     [esp+4Ch+var_29], 0
.text:0040381B                 jnb     loc_403740
.text:00403821                 mov     eax, [esp+4Ch+var_30]
.text:00403825                 cmp     byte ptr [eax], 0
.text:00403828                 jz      loc_403740
.text:0040382E
.text:0040382E loc_40382E:                             ; CODE XREF: sub_402FA0+8AB↓j
.text:0040382E                 inc     [esp+4Ch+var_28]
.text:00403832                 mov     esi, [esp+4Ch+var_28]
.text:00403836                 lea     eax, [esi+ebp]
.text:00403839                 cmp     eax, [esp+4Ch+arg_C]
.text:0040383D                 jnb     loc_403740
.text:00403843                 mov     edi, [esp+4Ch+Str]
.text:00403847                 cmp     byte ptr [eax+edi], 0
.text:0040384B                 jnz     short loc_40382E
.text:0040384D                 jmp     loc_403740
.text:00403852 ; ---------------------------------------------------------------------------
.text:00403852
.text:00403852 loc_403852:                             ; CODE XREF: sub_402FA0+765↑j
.text:00403852                 mov     [esp+4Ch+var_29], 0
.text:00403857                 jmp     loc_403740
.text:0040385C ; ---------------------------------------------------------------------------
.text:0040385C
.text:0040385C loc_40385C:                             ; CODE XREF: sub_402FA0+72A↑j
.text:0040385C                 mov     edx, [esp+4Ch+Str]
.text:00403860                 mov     [esp+4Ch+C], edx ; Str
.text:00403863                 call    strlen
.text:00403868                 mov     [esp+4Ch+arg_C], eax
.text:0040386C                 jmp     loc_4036D0
.text:00403871 ; ---------------------------------------------------------------------------
.text:00403871
.text:00403871 loc_403871:                             ; CODE XREF: sub_402FA0+105↑j
.text:00403871                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:00403871                 mov     dl, bl          ; jumptable 004030A5 case 92
.text:00403873                 jmp     loc_4033A4
.text:00403878 ; ---------------------------------------------------------------------------
.text:00403878
.text:00403878 loc_403878:                             ; CODE XREF: sub_402FA0+105↑j
.text:00403878                                         ; sub_402FA0+902↓j
.text:00403878                                         ; DATA XREF: ...
.text:00403878                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004030A5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040387D                 jnz     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:0040387D                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:00403883                 jmp     loc_4033AB      ; jumptable 00403772 cases 91,92,94,96,124
.text:00403888 ; ---------------------------------------------------------------------------
.text:00403888
.text:00403888 loc_403888:                             ; CODE XREF: sub_402FA0+105↑j
.text:00403888                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:00403888                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004030A5 cases 123,125
.text:0040388D                 jz      short loc_4038A4
.text:0040388F                 cmp     [esp+4Ch+arg_C], 1
.text:00403894
.text:00403894 loc_403894:                             ; CODE XREF: sub_402FA0+90C↓j
.text:00403894                 jnz     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:00403894                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:0040389A
.text:0040389A loc_40389A:                             ; CODE XREF: sub_402FA0+105↑j
.text:0040389A                                         ; DATA XREF: sub_402FA0:jpt_4030A5↑o
.text:0040389A                 test    ebp, ebp        ; jumptable 004030A5 cases 35,126
.text:0040389C                 jnz     def_4034A2      ; jumptable 004030A5 cases 37,43-58,65-90,93,95,97-122
.text:0040389C                                         ; jumptable 004034A2 default case, cases 34-38,42-44,46,48-59
.text:004038A2                 jmp     short loc_403878 ; jumptable 004030A5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004038A4 ; ---------------------------------------------------------------------------
.text:004038A4
.text:004038A4 loc_4038A4:                             ; CODE XREF: sub_402FA0+8ED↑j
.text:004038A4                 mov     esi, [esp+4Ch+Str]
.text:004038A8                 cmp     byte ptr [esi+1], 0
.text:004038AC                 jmp     short loc_403894
.text:004038AE ; ---------------------------------------------------------------------------
.text:004038AE
.text:004038AE loc_4038AE:                             ; CODE XREF: sub_402FA0:loc_40303F↑j
.text:004038AE                 test    ebp, ebp
.text:004038B0                 jnz     short loc_4038BD
.text:004038B2                 cmp     [esp+4Ch+arg_10], 1
.text:004038B7                 jz      loc_4033AB      ; jumptable 00403772 cases 91,92,94,96,124
.text:004038BD
.text:004038BD loc_4038BD:                             ; CODE XREF: sub_402FA0+910↑j
.text:004038BD                 mov     esi, [esp+4Ch+var_1C]
.text:004038C1                 test    esi, esi
.text:004038C3                 jz      short loc_4038F8
.text:004038C5                 mov     edi, [esp+4Ch+var_1C]
.text:004038C9                 movzx   eax, byte ptr [edi]
.text:004038CC                 test    al, al
.text:004038CE                 jz      short loc_4038F8
.text:004038D0
.text:004038D0 loc_4038D0:                             ; CODE XREF: sub_402FA0+956↓j
.text:004038D0                 mov     ebp, [esp+4Ch+arg_4]
.text:004038D4                 cmp     [esp+4Ch+var_34], ebp
.text:004038D8                 jnb     short loc_4038E5
.text:004038DA                 mov     ecx, [esp+4Ch+arg_0]
.text:004038DE                 mov     ebx, [esp+4Ch+var_34]
.text:004038E2                 mov     [ebx+ecx], al
.text:004038E5
.text:004038E5 loc_4038E5:                             ; CODE XREF: sub_402FA0+938↑j
.text:004038E5                 inc     [esp+4Ch+var_1C]
.text:004038E9                 inc     [esp+4Ch+var_34]
.text:004038ED                 mov     edx, [esp+4Ch+var_1C]
.text:004038F1                 movzx   eax, byte ptr [edx]
.text:004038F4                 test    al, al
.text:004038F6                 jnz     short loc_4038D0
.text:004038F8
.text:004038F8 loc_4038F8:                             ; CODE XREF: sub_402FA0+923↑j
.text:004038F8                                         ; sub_402FA0+92E↑j
.text:004038F8                 mov     eax, [esp+4Ch+arg_4]
.text:004038FC                 cmp     [esp+4Ch+var_34], eax
.text:00403900                 jnb     short loc_40390E
.text:00403902                 mov     edi, [esp+4Ch+arg_0]
.text:00403906                 mov     esi, [esp+4Ch+var_34]
.text:0040390A                 mov     byte ptr [esi+edi], 0
.text:0040390E
.text:0040390E loc_40390E:                             ; CODE XREF: sub_402FA0+960↑j
.text:0040390E                 mov     eax, [esp+4Ch+var_34]
.text:00403912                 jmp     loc_4033DF
.text:00403917 ; ---------------------------------------------------------------------------
.text:00403917
.text:00403917 loc_403917:                             ; CODE XREF: sub_402FA0+95↑j
.text:00403917                 mov     ebx, [esp+4Ch+Str]
.text:0040391B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403920                 jmp     loc_40303F
.text:00403925 ; ---------------------------------------------------------------------------
.text:00403925
.text:00403925 loc_403925:                             ; CODE XREF: sub_402FA0+3D↑j
.text:00403925                                         ; DATA XREF: sub_402FA0:jpt_402FDD↑o
.text:00403925                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402FDD case 2
.text:00403929                 cmp     [esp+4Ch+var_34], edx
.text:0040392D                 jnb     short loc_403936
.text:0040392F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403933                 mov     byte ptr [ecx], 27h ; '''
.text:00403936
.text:00403936 loc_403936:                             ; CODE XREF: sub_402FA0+98D↑j
.text:00403936                 mov     [esp+4Ch+var_34], 1
.text:0040393E                 mov     [esp+4Ch+var_1C], 402F8Eh
.text:00403946                 jmp     loc_403026
.text:0040394B ; ---------------------------------------------------------------------------
.text:0040394B
.text:0040394B loc_40394B:                             ; CODE XREF: sub_402FA0+3D↑j
.text:0040394B                                         ; DATA XREF: sub_402FA0:jpt_402FDD↑o
.text:0040394B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402FDD case 4
.text:00403950                 jmp     def_402FDD      ; jumptable 00402FDD default case, cases 0,1
.text:00403955 ; ---------------------------------------------------------------------------
.text:00403955
.text:00403955 loc_403955:                             ; CODE XREF: sub_402FA0+3D↑j
.text:00403955                                         ; DATA XREF: sub_402FA0:jpt_402FDD↑o
.text:00403955                 mov     [esp+4Ch+C], 402F90h ; jumptable 00402FDD cases 5,6
.text:0040395C                 call    ds:libintl_gettext
.text:00403962                 cmp     eax, 402F90h
.text:00403967                 mov     edi, eax
.text:00403969                 jz      short loc_4039E0
.text:0040396B
.text:0040396B loc_40396B:                             ; CODE XREF: sub_402FA0+A45↓j
.text:0040396B                                         ; sub_402FA0+A4C↓j
.text:0040396B                 mov     [esp+4Ch+C], 402F8Eh
.text:00403972                 call    ds:libintl_gettext
.text:00403978                 cmp     eax, 402F8Eh
.text:0040397D                 mov     edx, eax
.text:0040397F                 jz      short loc_4039D2
.text:00403981
.text:00403981 loc_403981:                             ; CODE XREF: sub_402FA0+A37↓j
.text:00403981                                         ; sub_402FA0+A3E↓j
.text:00403981                 mov     [esp+4Ch+var_1C], edi
.text:00403985                 cmp     byte ptr [edi], 0
.text:00403988                 jz      short loc_4039B8
.text:0040398A
.text:0040398A loc_40398A:                             ; CODE XREF: sub_402FA0+A16↓j
.text:0040398A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040398E                 cmp     [esp+4Ch+var_34], ecx
.text:00403992                 jnb     short loc_4039A7
.text:00403994                 mov     ebp, [esp+4Ch+var_1C]
.text:00403998                 mov     edi, [esp+4Ch+arg_0]
.text:0040399C                 mov     esi, [esp+4Ch+var_34]
.text:004039A0                 movzx   ebx, byte ptr [ebp+0]
.text:004039A4                 mov     [esi+edi], bl
.text:004039A7
.text:004039A7 loc_4039A7:                             ; CODE XREF: sub_402FA0+9F2↑j
.text:004039A7                 inc     [esp+4Ch+var_1C]
.text:004039AB                 inc     [esp+4Ch+var_34]
.text:004039AF                 mov     eax, [esp+4Ch+var_1C]
.text:004039B3                 cmp     byte ptr [eax], 0
.text:004039B6                 jnz     short loc_40398A
.text:004039B8
.text:004039B8 loc_4039B8:                             ; CODE XREF: sub_402FA0+9E8↑j
.text:004039B8                 mov     [esp+4Ch+var_21], 1
.text:004039BD                 mov     [esp+4Ch+var_1C], edx
.text:004039C1                 mov     [esp+4Ch+C], edx ; Str
.text:004039C4                 call    strlen
.text:004039C9                 mov     [esp+4Ch+var_20], eax
.text:004039CD                 jmp     def_402FDD      ; jumptable 00402FDD default case, cases 0,1
.text:004039D2 ; ---------------------------------------------------------------------------
.text:004039D2
.text:004039D2 loc_4039D2:                             ; CODE XREF: sub_402FA0+9DF↑j
.text:004039D2                 cmp     [esp+4Ch+arg_10], 6
.text:004039D7                 jnz     short loc_403981
.text:004039D9                 mov     edx, offset asc_402F8C ; "\"'`"
.text:004039DE                 jmp     short loc_403981
.text:004039E0 ; ---------------------------------------------------------------------------
.text:004039E0
.text:004039E0 loc_4039E0:                             ; CODE XREF: sub_402FA0+9C9↑j
.text:004039E0                 cmp     [esp+4Ch+arg_10], 6
.text:004039E5                 jnz     short loc_40396B
.text:004039E7                 mov     edi, offset asc_402F8C ; "\"'`"
.text:004039EC                 jmp     loc_40396B
.text:004039EC sub_402FA0      endp
.text:004039EC
.text:004039F1 ; ---------------------------------------------------------------------------
.text:004039F1                 jmp     short loc_403A00
.text:004039F1 ; ---------------------------------------------------------------------------
.text:004039F3                 align 10h
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: .text:004039F1↑j
.text:00403A00                 sub     esp, 0Ch
.text:00403A03                 mov     [esp+4], ebx
.text:00403A07                 mov     [esp+8], esi
.text:00403A0B                 call    _errno
.text:00403A10                 mov     esi, [eax]
.text:00403A12                 mov     dword ptr [esp], 24h ; '$'
.text:00403A19                 call    sub_4042F0
.text:00403A1E                 mov     edx, [esp+10h]
.text:00403A22                 mov     ebx, eax
.text:00403A24                 test    edx, edx
.text:00403A26                 jz      short loc_403A71
.text:00403A28
.text:00403A28 loc_403A28:                             ; CODE XREF: .text:00403A76↓j
.text:00403A28                 mov     ecx, [edx]
.text:00403A2A                 mov     [ebx], ecx
.text:00403A2C                 mov     ecx, [edx+4]
.text:00403A2F                 mov     [ebx+4], ecx
.text:00403A32                 mov     ecx, [edx+8]
.text:00403A35                 mov     [ebx+8], ecx
.text:00403A38                 mov     ecx, [edx+0Ch]
.text:00403A3B                 mov     [ebx+0Ch], ecx
.text:00403A3E                 mov     ecx, [edx+10h]
.text:00403A41                 mov     [ebx+10h], ecx
.text:00403A44                 mov     ecx, [edx+14h]
.text:00403A47                 mov     [ebx+14h], ecx
.text:00403A4A                 mov     ecx, [edx+18h]
.text:00403A4D                 mov     [ebx+18h], ecx
.text:00403A50                 mov     ecx, [edx+1Ch]
.text:00403A53                 mov     [ebx+1Ch], ecx
.text:00403A56                 mov     ecx, [edx+20h]
.text:00403A59                 mov     [ebx+20h], ecx
.text:00403A5C                 call    _errno
.text:00403A61                 mov     [eax], esi
.text:00403A63                 mov     esi, [esp+8]
.text:00403A67                 mov     eax, ebx
.text:00403A69                 mov     ebx, [esp+4]
.text:00403A6D                 add     esp, 0Ch
.text:00403A70                 retn
.text:00403A71 ; ---------------------------------------------------------------------------
.text:00403A71
.text:00403A71 loc_403A71:                             ; CODE XREF: .text:00403A26↑j
.text:00403A71                 mov     edx, offset dword_406140
.text:00403A76                 jmp     short loc_403A28
.text:00403A76 ; ---------------------------------------------------------------------------
.text:00403A78                 align 10h
.text:00403A80                 mov     eax, [esp+4]
.text:00403A84                 test    eax, eax
.text:00403A86                 jz      short loc_403A90
.text:00403A88
.text:00403A88 loc_403A88:                             ; CODE XREF: .text:00403A95↓j
.text:00403A88                 mov     eax, [eax]
.text:00403A8A                 retn
.text:00403A8A ; ---------------------------------------------------------------------------
.text:00403A8B                 align 10h
.text:00403A90
.text:00403A90 loc_403A90:                             ; CODE XREF: .text:00403A86↑j
.text:00403A90                 mov     eax, offset dword_406140
.text:00403A95                 jmp     short loc_403A88
.text:00403A95 ; ---------------------------------------------------------------------------
.text:00403A97                 align 10h
.text:00403AA0                 mov     edx, [esp+4]
.text:00403AA4                 test    edx, edx
.text:00403AA6                 jz      short loc_403AB0
.text:00403AA8
.text:00403AA8 loc_403AA8:                             ; CODE XREF: .text:00403AB5↓j
.text:00403AA8                 mov     ecx, [esp+8]
.text:00403AAC                 mov     [edx], ecx
.text:00403AAE                 retn
.text:00403AAE ; ---------------------------------------------------------------------------
.text:00403AAF                 align 10h
.text:00403AB0
.text:00403AB0 loc_403AB0:                             ; CODE XREF: .text:00403AA6↑j
.text:00403AB0                 mov     edx, offset dword_406140
.text:00403AB5                 jmp     short loc_403AA8
.text:00403AB5 ; ---------------------------------------------------------------------------
.text:00403AB7                 align 10h
.text:00403AC0                 sub     esp, 8
.text:00403AC3                 mov     eax, [esp+0Ch]
.text:00403AC7                 movzx   ecx, byte ptr [esp+10h]
.text:00403ACC                 mov     [esp], ebx
.text:00403ACF                 mov     ebx, [esp+14h]
.text:00403AD3                 mov     [esp+4], esi
.text:00403AD7                 mov     dl, cl
.text:00403AD9                 shr     dl, 5
.text:00403ADC                 movzx   edx, dl
.text:00403ADF                 shl     edx, 2
.text:00403AE2                 test    eax, eax
.text:00403AE4                 lea     esi, [edx+eax+4]
.text:00403AE8                 jz      short loc_403B10
.text:00403AEA
.text:00403AEA loc_403AEA:                             ; CODE XREF: .text:00403B16↓j
.text:00403AEA                 mov     edx, [esi]
.text:00403AEC                 and     ecx, 1Fh
.text:00403AEF                 and     ebx, 1
.text:00403AF2                 mov     eax, edx
.text:00403AF4                 shr     eax, cl
.text:00403AF6                 and     eax, 1
.text:00403AF9                 xor     ebx, eax
.text:00403AFB                 shl     ebx, cl
.text:00403AFD                 xor     edx, ebx
.text:00403AFF                 mov     [esi], edx
.text:00403B01                 mov     ebx, [esp]
.text:00403B04                 mov     esi, [esp+4]
.text:00403B08                 add     esp, 8
.text:00403B0B                 retn
.text:00403B0B ; ---------------------------------------------------------------------------
.text:00403B0C                 align 10h
.text:00403B10
.text:00403B10 loc_403B10:                             ; CODE XREF: .text:00403AE8↑j
.text:00403B10                 lea     esi, dword_406144[edx]
.text:00403B16                 jmp     short loc_403AEA
.text:00403B16 ; ---------------------------------------------------------------------------
.text:00403B18                 align 10h
.text:00403B20                 sub     esp, 2Ch
.text:00403B23                 mov     [esp+24h], ebx
.text:00403B27                 mov     ebx, [esp+40h]
.text:00403B2B                 mov     [esp+28h], esi
.text:00403B2F                 test    ebx, ebx
.text:00403B31                 jz      short loc_403B80
.text:00403B33
.text:00403B33 loc_403B33:                             ; CODE XREF: .text:00403B85↓j
.text:00403B33                 call    _errno
.text:00403B38                 mov     esi, [eax]
.text:00403B3A                 mov     [esp+14h], ebx
.text:00403B3E                 mov     edx, [ebx]
.text:00403B40                 mov     ecx, [esp+38h]
.text:00403B44                 mov     ebx, [esp+3Ch]
.text:00403B48                 mov     [esp+10h], edx
.text:00403B4C                 mov     edx, [esp+34h]
.text:00403B50                 mov     [esp+0Ch], ebx
.text:00403B54                 mov     [esp+8], ecx
.text:00403B58                 mov     [esp+4], edx
.text:00403B5C                 mov     edx, [esp+30h]
.text:00403B60                 mov     [esp], edx
.text:00403B63                 call    sub_402FA0
.text:00403B68                 mov     ebx, eax
.text:00403B6A                 call    _errno
.text:00403B6F                 mov     [eax], esi
.text:00403B71                 mov     esi, [esp+28h]
.text:00403B75                 mov     eax, ebx
.text:00403B77                 mov     ebx, [esp+24h]
.text:00403B7B                 add     esp, 2Ch
.text:00403B7E                 retn
.text:00403B7E ; ---------------------------------------------------------------------------
.text:00403B7F                 align 10h
.text:00403B80
.text:00403B80 loc_403B80:                             ; CODE XREF: .text:00403B31↑j
.text:00403B80                 mov     ebx, offset dword_406140
.text:00403B85                 jmp     short loc_403B33
.text:00403B85 ; ---------------------------------------------------------------------------
.text:00403B87                 align 10h
.text:00403B90                 push    ebp
.text:00403B91                 push    edi
.text:00403B92                 push    esi
.text:00403B93                 push    ebx
.text:00403B94                 sub     esp, 2Ch
.text:00403B97                 mov     ebp, [esp+48h]
.text:00403B9B                 call    _errno
.text:00403BA0                 mov     edx, [eax]
.text:00403BA2                 test    ebp, ebp
.text:00403BA4                 mov     ebx, ebp
.text:00403BA6                 mov     [esp+28h], edx
.text:00403BAA                 jz      loc_403C60
.text:00403BB0
.text:00403BB0 loc_403BB0:                             ; CODE XREF: .text:00403C65↓j
.text:00403BB0                 call    _errno
.text:00403BB5                 mov     edi, [eax]
.text:00403BB7                 mov     esi, ebp
.text:00403BB9                 mov     [esp+14h], ebx
.text:00403BBD                 mov     ecx, [ebx]
.text:00403BBF                 mov     dword ptr [esp], 0
.text:00403BC6                 mov     edx, [esp+44h]
.text:00403BCA                 mov     dword ptr [esp+4], 0
.text:00403BD2                 mov     eax, [esp+40h]
.text:00403BD6                 mov     [esp+10h], ecx
.text:00403BDA                 mov     [esp+0Ch], edx
.text:00403BDE                 mov     [esp+8], eax
.text:00403BE2                 call    sub_402FA0
.text:00403BE7                 mov     ebx, eax
.text:00403BE9                 call    _errno
.text:00403BEE                 mov     [eax], edi
.text:00403BF0                 lea     edi, [ebx+1]
.text:00403BF3                 mov     [esp], edi
.text:00403BF6                 call    sub_4042F0
.text:00403BFB                 mov     [esp+24h], eax
.text:00403BFF                 test    ebp, ebp
.text:00403C01                 jz      short loc_403C52
.text:00403C03
.text:00403C03 loc_403C03:                             ; CODE XREF: .text:00403C57↓j
.text:00403C03                 call    _errno
.text:00403C08                 mov     ebp, [eax]
.text:00403C0A                 mov     [esp+14h], esi
.text:00403C0E                 mov     ecx, [esi]
.text:00403C10                 mov     [esp+4], edi
.text:00403C14                 mov     edx, [esp+44h]
.text:00403C18                 mov     esi, [esp+24h]
.text:00403C1C                 mov     [esp+10h], ecx
.text:00403C20                 mov     eax, [esp+40h]
.text:00403C24                 mov     [esp+0Ch], edx
.text:00403C28                 mov     [esp], esi
.text:00403C2B                 mov     [esp+8], eax
.text:00403C2F                 call    sub_402FA0
.text:00403C34                 call    _errno
.text:00403C39                 mov     [eax], ebp
.text:00403C3B                 call    _errno
.text:00403C40                 mov     ebx, [esp+28h]
.text:00403C44                 mov     [eax], ebx
.text:00403C46                 mov     eax, [esp+24h]
.text:00403C4A                 add     esp, 2Ch
.text:00403C4D                 pop     ebx
.text:00403C4E                 pop     esi
.text:00403C4F                 pop     edi
.text:00403C50                 pop     ebp
.text:00403C51                 retn
.text:00403C52 ; ---------------------------------------------------------------------------
.text:00403C52
.text:00403C52 loc_403C52:                             ; CODE XREF: .text:00403C01↑j
.text:00403C52                 mov     esi, offset dword_406140
.text:00403C57                 jmp     short loc_403C03
.text:00403C57 ; ---------------------------------------------------------------------------
.text:00403C59                 align 10h
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: .text:00403BAA↑j
.text:00403C60                 mov     ebx, offset dword_406140
.text:00403C65                 jmp     loc_403BB0
.text:00403C65 ; ---------------------------------------------------------------------------
.text:00403C6A                 align 10h
.text:00403C70                 sub     esp, 1Ch
.text:00403C73                 mov     edx, [esp+24h]
.text:00403C77                 mov     dword ptr [esp+0Ch], offset dword_406140
.text:00403C7F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403C87                 mov     [esp+4], edx
.text:00403C8B                 mov     edx, [esp+20h]
.text:00403C8F                 mov     [esp], edx
.text:00403C92                 call    sub_4040E0
.text:00403C97                 add     esp, 1Ch
.text:00403C9A                 retn
.text:00403C9A ; ---------------------------------------------------------------------------
.text:00403C9B                 align 10h
.text:00403CA0                 sub     esp, 1Ch
.text:00403CA3                 mov     edx, [esp+20h]
.text:00403CA7                 mov     dword ptr [esp+0Ch], offset dword_406140
.text:00403CAF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403CB7                 mov     [esp+4], edx
.text:00403CBB                 mov     dword ptr [esp], 0
.text:00403CC2                 call    sub_4040E0
.text:00403CC7                 add     esp, 1Ch
.text:00403CCA                 retn
.text:00403CCA ; ---------------------------------------------------------------------------
.text:00403CCB                 align 10h
.text:00403CD0                 push    ebp
.text:00403CD1                 xor     eax, eax
.text:00403CD3                 mov     ecx, 8
.text:00403CD8                 push    edi
.text:00403CD9                 push    esi
.text:00403CDA                 push    ebx
.text:00403CDB                 sub     esp, 0ACh
.text:00403CE1                 mov     ebp, [esp+0C4h]
.text:00403CE8                 cld
.text:00403CE9                 lea     edi, [esp+14h]
.text:00403CED                 mov     [esp+10h], ebp
.text:00403CF1                 rep stosd
.text:00403CF3                 mov     eax, [esp+30h]
.text:00403CF7                 mov     edi, [esp+10h]
.text:00403CFB                 mov     esi, [esp+14h]
.text:00403CFF                 mov     [esp+60h], eax
.text:00403D03                 mov     ebp, [esp+18h]
.text:00403D07                 mov     eax, [esp+10h]
.text:00403D0B                 mov     [esp+40h], edi
.text:00403D0F                 mov     ecx, [esp+28h]
.text:00403D13                 mov     edi, [esp+1Ch]
.text:00403D17                 mov     [esp+44h], esi
.text:00403D1B                 mov     edx, [esp+2Ch]
.text:00403D1F                 mov     esi, [esp+20h]
.text:00403D23                 mov     [esp+70h], eax
.text:00403D27                 mov     ebx, [esp+24h]
.text:00403D2B                 mov     eax, [esp+14h]
.text:00403D2F                 mov     [esp+48h], ebp
.text:00403D33                 mov     [esp+4Ch], edi
.text:00403D37                 mov     [esp+50h], esi
.text:00403D3B                 mov     [esp+54h], ebx
.text:00403D3F                 mov     [esp+58h], ecx
.text:00403D43                 mov     [esp+5Ch], edx
.text:00403D47                 mov     [esp+74h], eax
.text:00403D4B                 mov     [esp+78h], ebp
.text:00403D4F                 mov     [esp+7Ch], edi
.text:00403D53                 mov     [esp+80h], esi
.text:00403D5A                 mov     [esp+84h], ebx
.text:00403D61                 mov     ebx, [esp+30h]
.text:00403D65                 mov     [esp+8Ch], edx
.text:00403D6C                 mov     edx, [esp+0C8h]
.text:00403D73                 mov     [esp+88h], ecx
.text:00403D7A                 lea     ecx, [esp+70h]
.text:00403D7E                 mov     [esp+4], edx
.text:00403D82                 mov     edx, [esp+0C0h]
.text:00403D89                 mov     [esp+90h], ebx
.text:00403D90                 mov     [esp+0Ch], ecx
.text:00403D94                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403D9C                 mov     [esp], edx
.text:00403D9F                 call    sub_4040E0
.text:00403DA4                 add     esp, 0ACh
.text:00403DAA                 pop     ebx
.text:00403DAB                 pop     esi
.text:00403DAC                 pop     edi
.text:00403DAD                 pop     ebp
.text:00403DAE                 retn
.text:00403DAE ; ---------------------------------------------------------------------------
.text:00403DAF                 align 10h
.text:00403DB0                 push    ebp
.text:00403DB1                 xor     eax, eax
.text:00403DB3                 mov     ecx, 8
.text:00403DB8                 push    edi
.text:00403DB9                 push    esi
.text:00403DBA                 push    ebx
.text:00403DBB                 sub     esp, 0ACh
.text:00403DC1                 mov     edx, [esp+0C4h]
.text:00403DC8                 cld
.text:00403DC9                 lea     edi, [esp+14h]
.text:00403DCD                 mov     [esp+10h], edx
.text:00403DD1                 rep stosd
.text:00403DD3                 mov     eax, [esp+30h]
.text:00403DD7                 mov     ebp, [esp+10h]
.text:00403DDB                 mov     edi, [esp+14h]
.text:00403DDF                 mov     [esp+60h], eax
.text:00403DE3                 mov     esi, [esp+20h]
.text:00403DE7                 mov     eax, [esp+10h]
.text:00403DEB                 mov     [esp+40h], ebp
.text:00403DEF                 mov     ecx, [esp+28h]
.text:00403DF3                 mov     ebp, [esp+18h]
.text:00403DF7                 mov     [esp+44h], edi
.text:00403DFB                 mov     edx, [esp+2Ch]
.text:00403DFF                 mov     edi, [esp+1Ch]
.text:00403E03                 mov     [esp+70h], eax
.text:00403E07                 mov     ebx, [esp+24h]
.text:00403E0B                 mov     eax, [esp+14h]
.text:00403E0F                 mov     [esp+48h], ebp
.text:00403E13                 mov     [esp+4Ch], edi
.text:00403E17                 mov     [esp+50h], esi
.text:00403E1B                 mov     [esp+54h], ebx
.text:00403E1F                 mov     [esp+58h], ecx
.text:00403E23                 mov     [esp+5Ch], edx
.text:00403E27                 mov     [esp+74h], eax
.text:00403E2B                 mov     [esp+78h], ebp
.text:00403E2F                 mov     [esp+7Ch], edi
.text:00403E33                 mov     [esp+80h], esi
.text:00403E3A                 mov     [esp+84h], ebx
.text:00403E41                 mov     esi, [esp+30h]
.text:00403E45                 lea     ebx, [esp+70h]
.text:00403E49                 mov     [esp+8Ch], edx
.text:00403E50                 mov     edx, [esp+0C8h]
.text:00403E57                 mov     [esp+88h], ecx
.text:00403E5E                 mov     ecx, [esp+0CCh]
.text:00403E65                 mov     [esp+4], edx
.text:00403E69                 mov     edx, [esp+0C0h]
.text:00403E70                 mov     [esp+90h], esi
.text:00403E77                 mov     [esp+0Ch], ebx
.text:00403E7B                 mov     [esp+8], ecx
.text:00403E7F                 mov     [esp], edx
.text:00403E82                 call    sub_4040E0
.text:00403E87                 add     esp, 0ACh
.text:00403E8D                 pop     ebx
.text:00403E8E                 pop     esi
.text:00403E8F                 pop     edi
.text:00403E90                 pop     ebp
.text:00403E91                 retn
.text:00403E91 ; ---------------------------------------------------------------------------
.text:00403E92                 align 10h
.text:00403EA0                 push    ebp
.text:00403EA1                 xor     eax, eax
.text:00403EA3                 mov     ecx, 8
.text:00403EA8                 push    edi
.text:00403EA9                 push    esi
.text:00403EAA                 push    ebx
.text:00403EAB                 sub     esp, 0ACh
.text:00403EB1                 mov     edi, [esp+0C0h]
.text:00403EB8                 cld
.text:00403EB9                 mov     [esp+10h], edi
.text:00403EBD                 lea     edi, [esp+14h]
.text:00403EC1                 rep stosd
.text:00403EC3                 mov     eax, [esp+30h]
.text:00403EC7                 mov     esi, [esp+10h]
.text:00403ECB                 mov     ebx, [esp+14h]
.text:00403ECF                 mov     [esp+60h], eax
.text:00403ED3                 mov     ebp, [esp+18h]
.text:00403ED7                 mov     eax, [esp+10h]
.text:00403EDB                 mov     [esp+40h], esi
.text:00403EDF                 mov     edi, [esp+1Ch]
.text:00403EE3                 mov     esi, [esp+20h]
.text:00403EE7                 mov     [esp+44h], ebx
.text:00403EEB                 mov     ecx, [esp+28h]
.text:00403EEF                 mov     edx, [esp+2Ch]
.text:00403EF3                 mov     [esp+70h], eax
.text:00403EF7                 mov     ebx, [esp+24h]
.text:00403EFB                 mov     eax, [esp+14h]
.text:00403EFF                 mov     [esp+48h], ebp
.text:00403F03                 mov     [esp+4Ch], edi
.text:00403F07                 mov     [esp+50h], esi
.text:00403F0B                 mov     [esp+54h], ebx
.text:00403F0F                 mov     [esp+58h], ecx
.text:00403F13                 mov     [esp+5Ch], edx
.text:00403F17                 mov     [esp+74h], eax
.text:00403F1B                 mov     [esp+78h], ebp
.text:00403F1F                 mov     [esp+7Ch], edi
.text:00403F23                 mov     [esp+80h], esi
.text:00403F2A                 mov     [esp+84h], ebx
.text:00403F31                 mov     [esp+8Ch], edx
.text:00403F38                 lea     edx, [esp+70h]
.text:00403F3C                 mov     [esp+88h], ecx
.text:00403F43                 mov     ecx, [esp+30h]
.text:00403F47                 mov     [esp+0Ch], edx
.text:00403F4B                 mov     edx, [esp+0C4h]
.text:00403F52                 mov     [esp+90h], ecx
.text:00403F59                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403F61                 mov     [esp+4], edx
.text:00403F65                 mov     dword ptr [esp], 0
.text:00403F6C                 call    sub_4040E0
.text:00403F71                 add     esp, 0ACh
.text:00403F77                 pop     ebx
.text:00403F78                 pop     esi
.text:00403F79                 pop     edi
.text:00403F7A                 pop     ebp
.text:00403F7B                 retn
.text:00403F7B ; ---------------------------------------------------------------------------
.text:00403F7C                 align 10h
.text:00403F80                 push    edi
.text:00403F81                 push    esi
.text:00403F82                 push    ebx
.text:00403F83                 sub     esp, 40h
.text:00403F86                 mov     edx, ds:dword_40614C
.text:00403F8C                 mov     ebx, ds:dword_406140
.text:00403F92                 mov     esi, ds:dword_406148
.text:00403F98                 mov     edi, ds:dword_406144
.text:00403F9E                 mov     [esp+1Ch], edx
.text:00403FA2                 mov     ecx, ds:dword_406150
.text:00403FA8                 mov     edx, ds:dword_406160
.text:00403FAE                 mov     [esp+10h], ebx
.text:00403FB2                 mov     ebx, ds:dword_406154
.text:00403FB8                 mov     [esp+30h], edx
.text:00403FBC                 movzx   edx, byte ptr [esp+54h]
.text:00403FC1                 mov     [esp+18h], esi
.text:00403FC5                 mov     esi, ds:dword_40615C
.text:00403FCB                 mov     [esp+14h], edi
.text:00403FCF                 mov     edi, ds:dword_406158
.text:00403FD5                 mov     [esp+20h], ecx
.text:00403FD9                 mov     cl, dl
.text:00403FDB                 shr     cl, 5
.text:00403FDE                 mov     [esp+24h], ebx
.text:00403FE2                 movzx   ebx, cl
.text:00403FE5                 mov     [esp+2Ch], esi
.text:00403FE9                 lea     esi, [esp+10h]
.text:00403FED                 mov     [esp+28h], edi
.text:00403FF1                 lea     edi, [esi+ebx*4]
.text:00403FF4                 mov     ebx, edx
.text:00403FF6                 mov     edx, [edi+4]
.text:00403FF9                 and     ebx, 1Fh
.text:00403FFC                 mov     cl, bl
.text:00403FFE                 mov     eax, edx
.text:00404000                 shr     eax, cl
.text:00404002                 and     eax, 1
.text:00404005                 xor     eax, 1
.text:00404008                 shl     eax, cl
.text:0040400A                 xor     edx, eax
.text:0040400C                 mov     [edi+4], edx
.text:0040400F                 mov     edx, [esp+50h]
.text:00404013                 mov     [esp+0Ch], esi
.text:00404017                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040401F                 mov     [esp+4], edx
.text:00404023                 mov     dword ptr [esp], 0
.text:0040402A                 call    sub_4040E0
.text:0040402F                 add     esp, 40h
.text:00404032                 pop     ebx
.text:00404033                 pop     esi
.text:00404034                 pop     edi
.text:00404035                 retn
.text:00404035 ; ---------------------------------------------------------------------------
.text:00404036                 align 10h
.text:00404040
.text:00404040 ; =============== S U B R O U T I N E =======================================
.text:00404040
.text:00404040
.text:00404040 ; int __cdecl sub_404040(char *)
.text:00404040 sub_404040      proc near               ; CODE XREF: sub_402930+64↑p
.text:00404040
.text:00404040 var_4C          = dword ptr -4Ch
.text:00404040 var_48          = dword ptr -48h
.text:00404040 var_44          = dword ptr -44h
.text:00404040 var_40          = dword ptr -40h
.text:00404040 var_3C          = dword ptr -3Ch
.text:00404040 var_38          = dword ptr -38h
.text:00404040 var_34          = dword ptr -34h
.text:00404040 var_30          = dword ptr -30h
.text:00404040 var_2C          = dword ptr -2Ch
.text:00404040 var_28          = dword ptr -28h
.text:00404040 var_24          = dword ptr -24h
.text:00404040 var_20          = dword ptr -20h
.text:00404040 var_1C          = dword ptr -1Ch
.text:00404040 arg_0           = dword ptr  4
.text:00404040
.text:00404040                 sub     esp, 4Ch
.text:00404043                 mov     ecx, ds:dword_406140
.text:00404049                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404051                 mov     edx, ds:dword_406144
.text:00404057                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040405E                 mov     [esp+4Ch+var_3C], ecx
.text:00404062                 mov     ecx, ds:dword_40614C
.text:00404068                 mov     [esp+4Ch+var_38], edx
.text:0040406C                 mov     edx, ds:dword_406148
.text:00404072                 mov     [esp+4Ch+var_30], ecx
.text:00404076                 mov     ecx, ds:dword_406150
.text:0040407C                 mov     eax, edx
.text:0040407E                 shr     eax, 1Ah
.text:00404081                 and     eax, 1
.text:00404084                 xor     eax, 1
.text:00404087                 mov     [esp+4Ch+var_2C], ecx
.text:0040408B                 shl     eax, 1Ah
.text:0040408E                 mov     ecx, ds:dword_406154
.text:00404094                 xor     edx, eax
.text:00404096                 mov     [esp+4Ch+var_34], edx
.text:0040409A                 mov     edx, [esp+4Ch+arg_0]
.text:0040409E                 mov     [esp+4Ch+var_28], ecx
.text:004040A2                 mov     ecx, ds:dword_406158
.text:004040A8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004040AC                 mov     [esp+4Ch+var_24], ecx
.text:004040B0                 mov     ecx, ds:dword_40615C
.text:004040B6                 mov     [esp+4Ch+var_20], ecx
.text:004040BA                 mov     ecx, ds:dword_406160
.text:004040C0                 mov     [esp+4Ch+var_1C], ecx
.text:004040C4                 lea     ecx, [esp+4Ch+var_3C]
.text:004040C8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004040CC                 call    sub_4040E0
.text:004040D1                 add     esp, 4Ch
.text:004040D4                 retn
.text:004040D4 sub_404040      endp
.text:004040D4
.text:004040D4 ; ---------------------------------------------------------------------------
.text:004040D5                 align 10h
.text:004040E0
.text:004040E0 ; =============== S U B R O U T I N E =======================================
.text:004040E0
.text:004040E0
.text:004040E0 ; int __cdecl sub_4040E0(int, char *, int, int)
.text:004040E0 sub_4040E0      proc near               ; CODE XREF: .text:00403C92↑p
.text:004040E0                                         ; .text:00403CC2↑p ...
.text:004040E0
.text:004040E0 Block           = dword ptr -2Ch
.text:004040E0 var_28          = dword ptr -28h
.text:004040E0 Str             = dword ptr -24h
.text:004040E0 var_20          = dword ptr -20h
.text:004040E0 var_1C          = dword ptr -1Ch
.text:004040E0 var_18          = dword ptr -18h
.text:004040E0 var_14          = dword ptr -14h
.text:004040E0 arg_0           = dword ptr  4
.text:004040E0 arg_4           = dword ptr  8
.text:004040E0 arg_8           = dword ptr  0Ch
.text:004040E0 arg_C           = dword ptr  10h
.text:004040E0
.text:004040E0                 push    ebp
.text:004040E1                 push    edi
.text:004040E2                 push    esi
.text:004040E3                 push    ebx
.text:004040E4                 sub     esp, 1Ch
.text:004040E7                 call    _errno
.text:004040EC                 mov     edx, [eax]
.text:004040EE                 mov     eax, [esp+2Ch+arg_0]
.text:004040F2                 mov     [esp+2Ch+var_14], edx
.text:004040F6                 test    eax, eax
.text:004040F8                 js      loc_40429A
.text:004040FE                 mov     eax, [esp+2Ch+arg_0]
.text:00404102                 cmp     dword_405040, eax
.text:00404108                 ja      short loc_404180
.text:0040410A                 mov     esi, eax
.text:0040410C                 inc     esi
.text:0040410D                 cmp     esi, 1FFFFFFFh
.text:00404113                 ja      loc_40429F
.text:00404119                 mov     ebx, off_40504C
.text:0040411F                 cmp     ebx, offset dword_405044
.text:00404125                 jz      loc_404271
.text:0040412B
.text:0040412B loc_40412B:                             ; CODE XREF: sub_4040E0+1B5↓j
.text:0040412B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040412E                 lea     ecx, ds:0[esi*8]
.text:00404135                 mov     ebp, esi
.text:00404137                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040413B                 call    sub_404380
.text:00404140                 mov     off_40504C, eax
.text:00404145                 mov     ebx, dword_405040
.text:0040414B                 sub     ebp, ebx
.text:0040414D                 lea     edi, [eax+ebx*8]
.text:00404150                 lea     eax, ds:0[ebp*8]
.text:00404157                 cmp     eax, 7
.text:0040415A                 jbe     short loc_404170
.text:0040415C                 test    edi, 4
.text:00404162                 jz      short loc_404170
.text:00404164                 mov     dword ptr [edi], 0
.text:0040416A                 sub     eax, 4
.text:0040416D                 add     edi, 4
.text:00404170
.text:00404170 loc_404170:                             ; CODE XREF: sub_4040E0+7A↑j
.text:00404170                                         ; sub_4040E0+82↑j
.text:00404170                 cld
.text:00404171                 mov     ecx, eax
.text:00404173                 shr     ecx, 2
.text:00404176                 xor     eax, eax
.text:00404178                 rep stosd
.text:0040417A                 mov     dword_405040, esi
.text:00404180
.text:00404180 loc_404180:                             ; CODE XREF: sub_4040E0+28↑j
.text:00404180                 mov     esi, off_40504C
.text:00404186                 mov     eax, [esp+2Ch+arg_0]
.text:0040418A                 mov     ebp, [esi+eax*8]
.text:0040418D                 mov     edi, [esi+eax*8+4]
.text:00404191                 mov     esi, [esp+2Ch+arg_C]
.text:00404195                 test    esi, esi
.text:00404197                 jz      loc_404267
.text:0040419D
.text:0040419D loc_40419D:                             ; CODE XREF: sub_4040E0+18C↓j
.text:0040419D                 call    _errno
.text:004041A2                 mov     ebx, [eax]
.text:004041A4                 mov     [esp+2Ch+var_18], esi ; int
.text:004041A8                 mov     ecx, [esi]
.text:004041AA                 mov     [esp+2Ch+Block], edi ; int
.text:004041AD                 mov     edx, [esp+2Ch+arg_8]
.text:004041B1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004041B5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004041B9                 mov     ecx, [esp+2Ch+arg_4]
.text:004041BD                 mov     [esp+2Ch+var_20], edx ; int
.text:004041C1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004041C5                 call    sub_402FA0
.text:004041CA                 mov     esi, eax
.text:004041CC                 call    _errno
.text:004041D1                 mov     [eax], ebx
.text:004041D3                 cmp     ebp, esi
.text:004041D5                 ja      short loc_40424B
.text:004041D7                 lea     ebp, [esi+1]
.text:004041DA                 mov     ebx, off_40504C
.text:004041E0                 cmp     edi, offset unk_406040
.text:004041E6                 mov     esi, [esp+2Ch+arg_0]
.text:004041EA                 mov     [ebx+esi*8], ebp
.text:004041ED                 jz      short loc_4041FD
.text:004041EF                 mov     [esp+2Ch+Block], edi ; Block
.text:004041F2                 call    free
.text:004041F7                 mov     ebx, off_40504C
.text:004041FD
.text:004041FD loc_4041FD:                             ; CODE XREF: sub_4040E0+10D↑j
.text:004041FD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404200                 call    sub_4042F0
.text:00404205                 mov     esi, [esp+2Ch+arg_C]
.text:00404209                 mov     edi, eax
.text:0040420B                 mov     eax, [esp+2Ch+arg_0]
.text:0040420F                 test    esi, esi
.text:00404211                 mov     [ebx+eax*8+4], edi
.text:00404215                 jz      short loc_404260
.text:00404217
.text:00404217 loc_404217:                             ; CODE XREF: sub_4040E0+185↓j
.text:00404217                 call    _errno
.text:0040421C                 mov     ebx, [eax]
.text:0040421E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404222                 mov     ecx, [esi]
.text:00404224                 mov     [esp+2Ch+Block], edi ; int
.text:00404227                 mov     edx, [esp+2Ch+arg_8]
.text:0040422B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040422F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404233                 mov     ecx, [esp+2Ch+arg_4]
.text:00404237                 mov     [esp+2Ch+var_20], edx ; int
.text:0040423B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040423F                 call    sub_402FA0
.text:00404244                 call    _errno
.text:00404249                 mov     [eax], ebx
.text:0040424B
.text:0040424B loc_40424B:                             ; CODE XREF: sub_4040E0+F5↑j
.text:0040424B                 call    _errno
.text:00404250                 mov     ebp, [esp+2Ch+var_14]
.text:00404254                 mov     [eax], ebp
.text:00404256                 add     esp, 1Ch
.text:00404259                 mov     eax, edi
.text:0040425B                 pop     ebx
.text:0040425C                 pop     esi
.text:0040425D                 pop     edi
.text:0040425E                 pop     ebp
.text:0040425F                 retn
.text:00404260 ; ---------------------------------------------------------------------------
.text:00404260
.text:00404260 loc_404260:                             ; CODE XREF: sub_4040E0+135↑j
.text:00404260                 mov     esi, offset dword_406140
.text:00404265                 jmp     short loc_404217
.text:00404267 ; ---------------------------------------------------------------------------
.text:00404267
.text:00404267 loc_404267:                             ; CODE XREF: sub_4040E0+B7↑j
.text:00404267                 mov     esi, offset dword_406140
.text:0040426C                 jmp     loc_40419D
.text:00404271 ; ---------------------------------------------------------------------------
.text:00404271
.text:00404271 loc_404271:                             ; CODE XREF: sub_4040E0+45↑j
.text:00404271                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404278                 call    sub_4042F0
.text:0040427D                 mov     off_40504C, eax
.text:00404282                 mov     edi, dword_405044
.text:00404288                 mov     ebx, eax
.text:0040428A                 mov     ecx, off_405048
.text:00404290                 mov     [eax], edi
.text:00404292                 mov     [eax+4], ecx
.text:00404295                 jmp     loc_40412B
.text:0040429A ; ---------------------------------------------------------------------------
.text:0040429A
.text:0040429A loc_40429A:                             ; CODE XREF: sub_4040E0+18↑j
.text:0040429A                 call    abort
.text:0040429F ; ---------------------------------------------------------------------------
.text:0040429F
.text:0040429F loc_40429F:                             ; CODE XREF: sub_4040E0+33↑j
.text:0040429F                 call    sub_4045A0
.text:0040429F sub_4040E0      endp
.text:0040429F
.text:0040429F ; ---------------------------------------------------------------------------
.text:004042A4                 align 10h
.text:004042B0
.text:004042B0 ; =============== S U B R O U T I N E =======================================
.text:004042B0
.text:004042B0
.text:004042B0 sub_4042B0      proc near
.text:004042B0
.text:004042B0 Size            = dword ptr -0Ch
.text:004042B0 var_4           = dword ptr -4
.text:004042B0 arg_0           = dword ptr  4
.text:004042B0 arg_4           = dword ptr  8
.text:004042B0
.text:004042B0                 sub     esp, 0Ch
.text:004042B3                 xor     edx, edx
.text:004042B5                 mov     ecx, [esp+0Ch+arg_4]
.text:004042B9                 mov     [esp+0Ch+var_4], ebx
.text:004042BD                 mov     eax, 0FFFFFFFFh
.text:004042C2                 mov     ebx, [esp+0Ch+arg_0]
.text:004042C6                 div     ecx
.text:004042C8                 cmp     eax, ebx
.text:004042CA                 jb      short loc_4042E9
.text:004042CC                 mov     edx, ebx
.text:004042CE                 imul    edx, ecx
.text:004042D1                 mov     [esp+0Ch+Size], edx ; Size
.text:004042D4                 call    malloc
.text:004042D9                 test    eax, eax
.text:004042DB                 jz      short loc_4042E5
.text:004042DD
.text:004042DD loc_4042DD:                             ; CODE XREF: sub_4042B0+37↓j
.text:004042DD                 mov     ebx, [esp+0Ch+var_4]
.text:004042E1                 add     esp, 0Ch
.text:004042E4                 retn
.text:004042E5 ; ---------------------------------------------------------------------------
.text:004042E5
.text:004042E5 loc_4042E5:                             ; CODE XREF: sub_4042B0+2B↑j
.text:004042E5                 test    ebx, ebx
.text:004042E7                 jz      short loc_4042DD
.text:004042E9
.text:004042E9 loc_4042E9:                             ; CODE XREF: sub_4042B0+1A↑j
.text:004042E9                 call    sub_4045A0
.text:004042E9 sub_4042B0      endp
.text:004042E9
.text:004042E9 ; ---------------------------------------------------------------------------
.text:004042EE                 align 10h
.text:004042F0
.text:004042F0 ; =============== S U B R O U T I N E =======================================
.text:004042F0
.text:004042F0
.text:004042F0 ; int __cdecl sub_4042F0(size_t)
.text:004042F0 sub_4042F0      proc near               ; CODE XREF: .text:00403A19↑p
.text:004042F0                                         ; .text:00403BF6↑p ...
.text:004042F0
.text:004042F0 Size            = dword ptr -0Ch
.text:004042F0 var_4           = dword ptr -4
.text:004042F0 arg_0           = dword ptr  4
.text:004042F0
.text:004042F0                 sub     esp, 0Ch
.text:004042F3                 mov     [esp+0Ch+var_4], ebx
.text:004042F7                 mov     ebx, [esp+0Ch+arg_0]
.text:004042FB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004042FE                 call    malloc
.text:00404303                 test    eax, eax
.text:00404305                 jz      short loc_404310
.text:00404307
.text:00404307 loc_404307:                             ; CODE XREF: sub_4042F0+22↓j
.text:00404307                 mov     ebx, [esp+0Ch+var_4]
.text:0040430B                 add     esp, 0Ch
.text:0040430E                 retn
.text:0040430E ; ---------------------------------------------------------------------------
.text:0040430F                 align 10h
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_4042F0+15↑j
.text:00404310                 test    ebx, ebx
.text:00404312                 jz      short loc_404307
.text:00404314                 call    sub_4045A0
.text:00404314 sub_4042F0      endp
.text:00404314
.text:00404314 ; ---------------------------------------------------------------------------
.text:00404319                 align 10h
.text:00404320                 sub     esp, 1Ch
.text:00404323                 xor     edx, edx
.text:00404325                 mov     eax, 0FFFFFFFFh
.text:0040432A                 mov     [esp+14h], ebx
.text:0040432E                 mov     ecx, [esp+20h]
.text:00404332                 mov     ebx, [esp+28h]
.text:00404336                 mov     [esp+18h], esi
.text:0040433A                 mov     esi, [esp+24h]
.text:0040433E                 div     ebx
.text:00404340                 cmp     eax, esi
.text:00404342                 jb      short loc_404374
.text:00404344                 mov     [esp], ecx
.text:00404347                 mov     edx, esi
.text:00404349                 imul    edx, ebx
.text:0040434C                 mov     [esp+4], edx
.text:00404350                 call    realloc
.text:00404355                 test    eax, eax
.text:00404357                 mov     ecx, eax
.text:00404359                 jz      short loc_404370
.text:0040435B
.text:0040435B loc_40435B:                             ; CODE XREF: .text:00404372↓j
.text:0040435B                 mov     ebx, [esp+14h]
.text:0040435F                 mov     eax, ecx
.text:00404361                 mov     esi, [esp+18h]
.text:00404365                 add     esp, 1Ch
.text:00404368                 retn
.text:00404368 ; ---------------------------------------------------------------------------
.text:00404369                 align 10h
.text:00404370
.text:00404370 loc_404370:                             ; CODE XREF: .text:00404359↑j
.text:00404370                 test    esi, esi
.text:00404372                 jz      short loc_40435B
.text:00404374
.text:00404374 loc_404374:                             ; CODE XREF: .text:00404342↑j
.text:00404374                 call    sub_4045A0
.text:00404374 ; ---------------------------------------------------------------------------
.text:00404379                 align 10h
.text:00404380
.text:00404380 ; =============== S U B R O U T I N E =======================================
.text:00404380
.text:00404380
.text:00404380 ; int __cdecl sub_404380(void *, size_t)
.text:00404380 sub_404380      proc near               ; CODE XREF: sub_4040E0+5B↑p
.text:00404380
.text:00404380 Block           = dword ptr -0Ch
.text:00404380 Size            = dword ptr -8
.text:00404380 var_4           = dword ptr -4
.text:00404380 arg_0           = dword ptr  4
.text:00404380 arg_4           = dword ptr  8
.text:00404380
.text:00404380                 sub     esp, 0Ch
.text:00404383                 mov     edx, [esp+0Ch+arg_0]
.text:00404387                 mov     [esp+0Ch+var_4], ebx
.text:0040438B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040438F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404392                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404396                 call    realloc
.text:0040439B                 test    eax, eax
.text:0040439D                 jz      short loc_4043A7
.text:0040439F
.text:0040439F loc_40439F:                             ; CODE XREF: sub_404380+29↓j
.text:0040439F                 mov     ebx, [esp+0Ch+var_4]
.text:004043A3                 add     esp, 0Ch
.text:004043A6                 retn
.text:004043A7 ; ---------------------------------------------------------------------------
.text:004043A7
.text:004043A7 loc_4043A7:                             ; CODE XREF: sub_404380+1D↑j
.text:004043A7                 test    ebx, ebx
.text:004043A9                 jz      short loc_40439F
.text:004043AB                 call    sub_4045A0
.text:004043AB sub_404380      endp
.text:004043AB
.text:004043B0 ; ---------------------------------------------------------------------------
.text:004043B0                 jmp     sub_404500
.text:004043B0 ; ---------------------------------------------------------------------------
.text:004043B5                 align 10h
.text:004043C0                 sub     esp, 0Ch
.text:004043C3                 mov     edx, [esp+14h]
.text:004043C7                 mov     dword ptr [esp+8], 1
.text:004043CF                 mov     [esp+4], edx
.text:004043D3                 mov     edx, [esp+10h]
.text:004043D7                 mov     [esp], edx
.text:004043DA                 call    sub_404500
.text:004043DF                 add     esp, 0Ch
.text:004043E2                 retn
.text:004043E2 ; ---------------------------------------------------------------------------
.text:004043E3                 align 10h
.text:004043F0                 sub     esp, 1Ch
.text:004043F3                 mov     [esp+18h], ebx
.text:004043F7                 mov     ebx, [esp+20h]
.text:004043FB                 mov     [esp], ebx
.text:004043FE                 call    malloc
.text:00404403                 test    eax, eax
.text:00404405                 jz      short loc_404423
.text:00404407
.text:00404407 loc_404407:                             ; CODE XREF: .text:00404425↓j
.text:00404407                 mov     [esp+8], ebx
.text:0040440B                 mov     dword ptr [esp+4], 0
.text:00404413                 mov     [esp], eax
.text:00404416                 call    memset
.text:0040441B                 mov     ebx, [esp+18h]
.text:0040441F                 add     esp, 1Ch
.text:00404422                 retn
.text:00404423 ; ---------------------------------------------------------------------------
.text:00404423
.text:00404423 loc_404423:                             ; CODE XREF: .text:00404405↑j
.text:00404423                 test    ebx, ebx
.text:00404425                 jz      short loc_404407
.text:00404427                 call    sub_4045A0
.text:00404427 ; ---------------------------------------------------------------------------
.text:0040442C                 align 10h
.text:00404430                 sub     esp, 0Ch
.text:00404433                 xor     edx, edx
.text:00404435                 mov     ecx, [esp+14h]
.text:00404439                 mov     [esp+8], ebx
.text:0040443D                 mov     eax, 0FFFFFFFFh
.text:00404442                 mov     ebx, [esp+10h]
.text:00404446                 div     ecx
.text:00404448                 cmp     eax, ebx
.text:0040444A                 jb      short loc_404468
.text:0040444C                 mov     [esp+4], ecx
.text:00404450                 mov     [esp], ebx
.text:00404453                 call    calloc
.text:00404458                 test    eax, eax
.text:0040445A                 jz      short loc_404464
.text:0040445C
.text:0040445C loc_40445C:                             ; CODE XREF: .text:00404466↓j
.text:0040445C                 mov     ebx, [esp+8]
.text:00404460                 add     esp, 0Ch
.text:00404463                 retn
.text:00404464 ; ---------------------------------------------------------------------------
.text:00404464
.text:00404464 loc_404464:                             ; CODE XREF: .text:0040445A↑j
.text:00404464                 test    ebx, ebx
.text:00404466                 jz      short loc_40445C
.text:00404468
.text:00404468 loc_404468:                             ; CODE XREF: .text:0040444A↑j
.text:00404468                 call    sub_4045A0
.text:00404468 ; ---------------------------------------------------------------------------
.text:0040446D                 align 10h
.text:00404470                 sub     esp, 1Ch
.text:00404473                 mov     [esp+18h], ebx
.text:00404477                 mov     ebx, [esp+24h]
.text:0040447B                 mov     [esp], ebx
.text:0040447E                 call    malloc
.text:00404483                 test    eax, eax
.text:00404485                 mov     edx, eax
.text:00404487                 jz      short loc_4044A5
.text:00404489
.text:00404489 loc_404489:                             ; CODE XREF: .text:004044A7↓j
.text:00404489                 mov     [esp+8], ebx
.text:0040448D                 mov     ecx, [esp+20h]
.text:00404491                 mov     [esp], edx
.text:00404494                 mov     [esp+4], ecx
.text:00404498                 call    memcpy
.text:0040449D                 mov     ebx, [esp+18h]
.text:004044A1                 add     esp, 1Ch
.text:004044A4                 retn
.text:004044A5 ; ---------------------------------------------------------------------------
.text:004044A5
.text:004044A5 loc_4044A5:                             ; CODE XREF: .text:00404487↑j
.text:004044A5                 test    ebx, ebx
.text:004044A7                 jz      short loc_404489
.text:004044A9                 call    sub_4045A0
.text:004044A9 ; ---------------------------------------------------------------------------
.text:004044AE                 align 10h
.text:004044B0                 sub     esp, 1Ch
.text:004044B3                 mov     [esp+18h], esi
.text:004044B7                 mov     esi, [esp+20h]
.text:004044BB                 mov     [esp+14h], ebx
.text:004044BF                 mov     [esp], esi
.text:004044C2                 call    strlen
.text:004044C7                 lea     ebx, [eax+1]
.text:004044CA                 mov     [esp], ebx
.text:004044CD                 call    malloc
.text:004044D2                 test    eax, eax
.text:004044D4                 jz      short loc_4044F2
.text:004044D6
.text:004044D6 loc_4044D6:                             ; CODE XREF: .text:004044F4↓j
.text:004044D6                 mov     [esp+8], ebx
.text:004044DA                 mov     [esp+4], esi
.text:004044DE                 mov     [esp], eax
.text:004044E1                 call    memcpy
.text:004044E6                 mov     ebx, [esp+14h]
.text:004044EA                 mov     esi, [esp+18h]
.text:004044EE                 add     esp, 1Ch
.text:004044F1                 retn
.text:004044F2 ; ---------------------------------------------------------------------------
.text:004044F2
.text:004044F2 loc_4044F2:                             ; CODE XREF: .text:004044D4↑j
.text:004044F2                 test    ebx, ebx
.text:004044F4                 jz      short loc_4044D6
.text:004044F6                 call    sub_4045A0
.text:004044F6 ; ---------------------------------------------------------------------------
.text:004044FB                 align 10h
.text:00404500
.text:00404500 ; =============== S U B R O U T I N E =======================================
.text:00404500
.text:00404500
.text:00404500 ; int __cdecl sub_404500(void *, int, int)
.text:00404500 sub_404500      proc near               ; CODE XREF: .text:004043B0↑j
.text:00404500                                         ; .text:004043DA↑p
.text:00404500
.text:00404500 Block           = dword ptr -1Ch
.text:00404500 Size            = dword ptr -18h
.text:00404500 var_C           = dword ptr -0Ch
.text:00404500 var_8           = dword ptr -8
.text:00404500 var_4           = dword ptr -4
.text:00404500 arg_0           = dword ptr  4
.text:00404500 arg_4           = dword ptr  8
.text:00404500 arg_8           = dword ptr  0Ch
.text:00404500
.text:00404500                 sub     esp, 1Ch
.text:00404503                 mov     [esp+1Ch+var_8], esi
.text:00404507                 mov     esi, [esp+1Ch+arg_0]
.text:0040450B                 mov     [esp+1Ch+var_4], edi
.text:0040450F                 mov     edi, [esp+1Ch+arg_4]
.text:00404513                 test    esi, esi
.text:00404515                 mov     [esp+1Ch+var_C], ebx
.text:00404519                 mov     ecx, [edi]
.text:0040451B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040451F                 jz      short loc_404560
.text:00404521                 xor     edx, edx
.text:00404523                 mov     eax, 7FFFFFFFh
.text:00404528                 div     ebx
.text:0040452A                 cmp     eax, ecx
.text:0040452C                 jb      short loc_404559
.text:0040452E                 add     ecx, ecx
.text:00404530
.text:00404530 loc_404530:                             ; CODE XREF: sub_404500+62↓j
.text:00404530                                         ; sub_404500+71↓j ...
.text:00404530                 mov     [edi], ecx
.text:00404532                 imul    ebx, ecx
.text:00404535                 mov     [esp+1Ch+Block], esi ; Block
.text:00404538                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040453C                 call    realloc
.text:00404541                 test    eax, eax
.text:00404543                 jz      short loc_404555
.text:00404545
.text:00404545 loc_404545:                             ; CODE XREF: sub_404500+57↓j
.text:00404545                 mov     ebx, [esp+1Ch+var_C]
.text:00404549                 mov     esi, [esp+1Ch+var_8]
.text:0040454D                 mov     edi, [esp+1Ch+var_4]
.text:00404551                 add     esp, 1Ch
.text:00404554                 retn
.text:00404555 ; ---------------------------------------------------------------------------
.text:00404555
.text:00404555 loc_404555:                             ; CODE XREF: sub_404500+43↑j
.text:00404555                 test    ebx, ebx
.text:00404557                 jz      short loc_404545
.text:00404559
.text:00404559 loc_404559:                             ; CODE XREF: sub_404500+2C↑j
.text:00404559                 call    sub_4045A0
.text:00404559 ; ---------------------------------------------------------------------------
.text:0040455E                 align 10h
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_404500+1F↑j
.text:00404560                 test    ecx, ecx
.text:00404562                 jnz     short loc_404530
.text:00404564                 xor     edx, edx
.text:00404566                 mov     eax, 40h ; '@'
.text:0040456B                 div     ebx
.text:0040456D                 test    eax, eax
.text:0040456F                 mov     ecx, eax
.text:00404571                 jnz     short loc_404530
.text:00404573                 mov     ecx, 1
.text:00404578                 jmp     short loc_404530
.text:00404578 sub_404500      endp
.text:00404578
.text:00404578 ; ---------------------------------------------------------------------------
.text:0040457A                 align 10h
.text:00404580 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4045A0+3↓o
.text:00404591 ; const char aS_2[]
.text:00404591 aS_2            db '%s',0               ; DATA XREF: sub_4045A0+10↓o
.text:00404594                 align 10h
.text:004045A0
.text:004045A0 ; =============== S U B R O U T I N E =======================================
.text:004045A0
.text:004045A0 ; Attributes: noreturn
.text:004045A0
.text:004045A0 sub_4045A0      proc near               ; CODE XREF: sub_4040E0:loc_40429F↑p
.text:004045A0                                         ; sub_4042B0:loc_4042E9↑p ...
.text:004045A0
.text:004045A0 Code            = dword ptr -1Ch
.text:004045A0 ErrorMessage    = dword ptr -18h
.text:004045A0 var_14          = dword ptr -14h
.text:004045A0 var_10          = byte ptr -10h
.text:004045A0
.text:004045A0                 sub     esp, 1Ch
.text:004045A3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004045AA                 call    ds:libintl_gettext
.text:004045B0                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:004045B8                 mov     edx, Code
.text:004045BE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004045C6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004045CA                 mov     [esp+1Ch+Code], edx ; Code
.text:004045CD                 call    sub_404630
.text:004045D2                 call    abort
.text:004045D2 sub_4045A0      endp
.text:004045D2
.text:004045D2 ; ---------------------------------------------------------------------------
.text:004045D7                 align 10h
.text:004045E0
.text:004045E0 ; =============== S U B R O U T I N E =======================================
.text:004045E0
.text:004045E0 ; Attributes: thunk
.text:004045E0
.text:004045E0 libintl_bindtextdomain proc near
.text:004045E0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004045E0 libintl_bindtextdomain endp
.text:004045E0
.text:004045E0 ; ---------------------------------------------------------------------------
.text:004045E6                 align 10h
.text:004045F0                 jmp     ds:libintl_textdomain
.text:004045F0 ; ---------------------------------------------------------------------------
.text:004045F6                 align 10h
.text:00404600                 jmp     ds:libintl_gettext
.text:00404600 ; ---------------------------------------------------------------------------
.text:00404606                 align 10h
.text:00404610 ; const char aS[]
.text:00404610 aS              db ': %s',0             ; DATA XREF: sub_404630+B8↓o
.text:00404610                                         ; sub_404734+122↓o
.text:00404615 aUnknownSystemE db 'Unknown system error',0
.text:00404615                                         ; DATA XREF: sub_404630:loc_4046FD↓o
.text:00404615                                         ; sub_404734:loc_40486E↓o
.text:0040462A ; const char aS_0[]
.text:0040462A aS_0            db '%s: ',0             ; DATA XREF: sub_404630:loc_404704↓o
.text:0040462F                 align 10h
.text:00404630
.text:00404630 ; =============== S U B R O U T I N E =======================================
.text:00404630
.text:00404630
.text:00404630 ; int __cdecl sub_404630(int Code, int ErrorMessage, char *, char)
.text:00404630 sub_404630      proc near               ; CODE XREF: sub_401340+138↑p
.text:00404630                                         ; sub_402930+86↑p ...
.text:00404630
.text:00404630 Stream          = dword ptr -1Ch
.text:00404630 Format          = dword ptr -18h
.text:00404630 ArgList         = dword ptr -14h
.text:00404630 Code            = dword ptr  4
.text:00404630 ErrorMessage    = dword ptr  8
.text:00404630 arg_8           = dword ptr  0Ch
.text:00404630 arg_C           = byte ptr  10h
.text:00404630
.text:00404630                 push    esi
.text:00404631                 push    ebx
.text:00404632                 sub     esp, 14h
.text:00404635                 mov     edx, ds:_iob
.text:0040463B                 mov     esi, [esp+1Ch+Code]
.text:0040463F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404643                 add     edx, 20h ; ' '
.text:00404646                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404649                 call    fflush
.text:0040464E                 mov     eax, ds:dword_4061C0
.text:00404653                 test    eax, eax
.text:00404655                 jz      loc_404704
.text:0040465B                 call    eax ; dword_4061C0
.text:0040465D
.text:0040465D loc_40465D:                             ; CODE XREF: sub_404630+F7↓j
.text:0040465D                 lea     edx, [esp+1Ch+arg_C]
.text:00404661                 mov     ecx, [esp+1Ch+arg_8]
.text:00404665                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404669                 mov     edx, ds:_iob
.text:0040466F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404673                 add     edx, 40h ; '@'
.text:00404676                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404679                 call    vfprintf
.text:0040467E                 inc     ds:dword_4061D0
.text:00404684                 test    ebx, ebx
.text:00404686                 jnz     short loc_4046D2
.text:00404688
.text:00404688 loc_404688:                             ; CODE XREF: sub_404630+CB↓j
.text:00404688                 mov     edx, ds:_iob
.text:0040468E                 lea     ecx, [edx+40h]
.text:00404691                 mov     ebx, [ecx+4]
.text:00404694                 dec     ebx
.text:00404695                 test    ebx, ebx
.text:00404697                 mov     [ecx+4], ebx
.text:0040469A                 js      short loc_4046C0
.text:0040469C                 mov     ecx, [edx+40h]
.text:0040469F                 mov     byte ptr [ecx], 0Ah
.text:004046A2                 inc     dword ptr [edx+40h]
.text:004046A5
.text:004046A5 loc_4046A5:                             ; CODE XREF: sub_404630+A0↓j
.text:004046A5                 mov     edx, ds:_iob
.text:004046AB                 add     edx, 40h ; '@'
.text:004046AE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004046B1                 call    fflush
.text:004046B6                 test    esi, esi
.text:004046B8                 jnz     short loc_40472C
.text:004046BA                 add     esp, 14h
.text:004046BD                 pop     ebx
.text:004046BE                 pop     esi
.text:004046BF                 retn
.text:004046C0 ; ---------------------------------------------------------------------------
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_404630+6A↑j
.text:004046C0                 mov     [esp+1Ch+Format], ecx ; File
.text:004046C4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004046CB                 call    _flsbuf
.text:004046D0                 jmp     short loc_4046A5
.text:004046D2 ; ---------------------------------------------------------------------------
.text:004046D2
.text:004046D2 loc_4046D2:                             ; CODE XREF: sub_404630+56↑j
.text:004046D2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004046D5                 call    strerror
.text:004046DA                 test    eax, eax
.text:004046DC                 jz      short loc_4046FD
.text:004046DE
.text:004046DE loc_4046DE:                             ; CODE XREF: sub_404630+D2↓j
.text:004046DE                 mov     [esp+1Ch+ArgList], eax
.text:004046E2                 mov     ebx, ds:_iob
.text:004046E8                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:004046F0                 add     ebx, 40h ; '@'
.text:004046F3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004046F6                 call    fprintf
.text:004046FB                 jmp     short loc_404688
.text:004046FD ; ---------------------------------------------------------------------------
.text:004046FD
.text:004046FD loc_4046FD:                             ; CODE XREF: sub_404630+AC↑j
.text:004046FD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404702                 jmp     short loc_4046DE
.text:00404704 ; ---------------------------------------------------------------------------
.text:00404704
.text:00404704 loc_404704:                             ; CODE XREF: sub_404630+25↑j
.text:00404704                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:0040470C                 mov     edx, ds:_iob
.text:00404712                 mov     ecx, ds:dword_406190
.text:00404718                 add     edx, 40h ; '@'
.text:0040471B                 mov     [esp+1Ch+ArgList], ecx
.text:0040471F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404722                 call    fprintf
.text:00404727                 jmp     loc_40465D
.text:0040472C ; ---------------------------------------------------------------------------
.text:0040472C
.text:0040472C loc_40472C:                             ; CODE XREF: sub_404630+88↑j
.text:0040472C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040472F                 call    exit
.text:0040472F sub_404630      endp
.text:0040472F
.text:00404734
.text:00404734 ; =============== S U B R O U T I N E =======================================
.text:00404734
.text:00404734
.text:00404734 ; int __cdecl sub_404734(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404734 sub_404734      proc near               ; DATA XREF: sub_404734+77↓o
.text:00404734
.text:00404734 Stream          = dword ptr -28h
.text:00404734 Format          = dword ptr -24h
.text:00404734 ArgList         = dword ptr -20h
.text:00404734 var_1C          = dword ptr -1Ch
.text:00404734 Code            = dword ptr  8
.text:00404734 ErrorMessage    = dword ptr  0Ch
.text:00404734 Str2            = dword ptr  10h
.text:00404734 arg_10          = dword ptr  14h
.text:00404734 arg_14          = dword ptr  18h
.text:00404734 arg_18          = byte ptr  1Ch
.text:00404734
.text:00404734                 and     eax, 64253A73h
.text:00404739                 cmp     ah, [eax]
.text:0040473B
.text:0040473B loc_40473B:                             ; DATA XREF: sub_404734:loc_404875↓o
.text:0040473B                 add     ds:55003A73h, ah
.text:00404741                 push    edi
.text:00404742                 push    esi
.text:00404743                 push    ebx
.text:00404744                 sub     esp, 1Ch
.text:00404747                 mov     edx, ds:dword_406200
.text:0040474D                 mov     ebp, [esp+28h+Code]
.text:00404751                 mov     edi, [esp+28h+ErrorMessage]
.text:00404755                 test    edx, edx
.text:00404757                 mov     ebx, [esp+28h+Str2]
.text:0040475B                 mov     esi, [esp+28h+arg_10]
.text:0040475F                 jz      short loc_404779
.text:00404761                 cmp     ds:dword_406180, esi
.text:00404767                 jz      loc_4048A0
.text:0040476D
.text:0040476D loc_40476D:                             ; CODE XREF: sub_404734+18D↓j
.text:0040476D                 mov     ds:Str1, ebx
.text:00404773                 mov     ds:dword_406180, esi
.text:00404779
.text:00404779 loc_404779:                             ; CODE XREF: sub_404734+2B↑j
.text:00404779                 mov     edx, ds:_iob
.text:0040477F                 add     edx, 20h ; ' '
.text:00404782                 mov     [esp+28h+Stream], edx ; Stream
.text:00404785                 call    fflush
.text:0040478A                 mov     eax, ds:dword_4061C0
.text:0040478F                 test    eax, eax
.text:00404791                 jz      loc_404875
.text:00404797                 call    eax ; dword_4061C0
.text:00404799
.text:00404799 loc_404799:                             ; CODE XREF: sub_404734+164↓j
.text:00404799                 test    ebx, ebx
.text:0040479B                 jz      short loc_4047BE
.text:0040479D                 mov     [esp+28h+ArgList], ebx
.text:004047A1                 mov     ebx, ds:_iob
.text:004047A7                 mov     [esp+28h+var_1C], esi
.text:004047AB                 mov     [esp+28h+Format], offset sub_404734 ; Format
.text:004047B3                 add     ebx, 40h ; '@'
.text:004047B6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004047B9                 call    fprintf
.text:004047BE
.text:004047BE loc_4047BE:                             ; CODE XREF: sub_404734+67↑j
.text:004047BE                 mov     esi, ds:_iob
.text:004047C4                 lea     edx, [esp+28h+arg_18]
.text:004047C8                 mov     ecx, [esp+28h+arg_14]
.text:004047CC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004047D0                 add     esi, 40h ; '@'
.text:004047D3                 mov     [esp+28h+Format], ecx ; Format
.text:004047D7                 mov     [esp+28h+Stream], esi ; Stream
.text:004047DA                 call    vfprintf
.text:004047DF                 inc     ds:dword_4061D0
.text:004047E5                 test    edi, edi
.text:004047E7                 jnz     short loc_404840
.text:004047E9
.text:004047E9 loc_4047E9:                             ; CODE XREF: sub_404734+135↓j
.text:004047E9                 mov     edx, ds:_iob
.text:004047EF                 lea     ecx, [edx+40h]
.text:004047F2                 mov     ebx, [ecx+4]
.text:004047F5                 dec     ebx
.text:004047F6                 test    ebx, ebx
.text:004047F8                 mov     [ecx+4], ebx
.text:004047FB                 js      short loc_404827
.text:004047FD                 mov     esi, [edx+40h]
.text:00404800                 mov     byte ptr [esi], 0Ah
.text:00404803                 inc     dword ptr [edx+40h]
.text:00404806
.text:00404806 loc_404806:                             ; CODE XREF: sub_404734+103↓j
.text:00404806                 mov     ecx, ds:_iob
.text:0040480C                 add     ecx, 40h ; '@'
.text:0040480F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404812                 call    fflush
.text:00404817                 test    ebp, ebp
.text:00404819                 jnz     loc_4048C6
.text:0040481F
.text:0040481F loc_40481F:                             ; CODE XREF: sub_404734+173↓j
.text:0040481F                                         ; sub_404734+187↓j
.text:0040481F                 add     esp, 1Ch
.text:00404822                 pop     ebx
.text:00404823                 pop     esi
.text:00404824                 pop     edi
.text:00404825                 pop     ebp
.text:00404826                 retn
.text:00404827 ; ---------------------------------------------------------------------------
.text:00404827
.text:00404827 loc_404827:                             ; CODE XREF: sub_404734+C7↑j
.text:00404827                 mov     [esp+28h+Format], ecx ; File
.text:0040482B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404832                 call    _flsbuf
.text:00404837                 jmp     short loc_404806
.text:00404837 ; ---------------------------------------------------------------------------
.text:00404839                 align 10h
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: sub_404734+B3↑j
.text:00404840                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404843                 call    strerror
.text:00404848                 test    eax, eax
.text:0040484A                 jz      short loc_40486E
.text:0040484C
.text:0040484C loc_40484C:                             ; CODE XREF: sub_404734+13F↓j
.text:0040484C                 mov     [esp+28h+ArgList], eax
.text:00404850                 mov     edi, ds:_iob
.text:00404856                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:0040485E                 add     edi, 40h ; '@'
.text:00404861                 mov     [esp+28h+Stream], edi ; Stream
.text:00404864                 call    fprintf
.text:00404869                 jmp     loc_4047E9
.text:0040486E ; ---------------------------------------------------------------------------
.text:0040486E
.text:0040486E loc_40486E:                             ; CODE XREF: sub_404734+116↑j
.text:0040486E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404873                 jmp     short loc_40484C
.text:00404875 ; ---------------------------------------------------------------------------
.text:00404875
.text:00404875 loc_404875:                             ; CODE XREF: sub_404734+5D↑j
.text:00404875                 mov     [esp+28h+Format], (offset loc_40473B+1) ; Format
.text:0040487D                 mov     ecx, ds:_iob
.text:00404883                 mov     edx, ds:dword_406190
.text:00404889                 add     ecx, 40h ; '@'
.text:0040488C                 mov     [esp+28h+ArgList], edx
.text:00404890                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404893                 call    fprintf
.text:00404898                 jmp     loc_404799
.text:00404898 ; ---------------------------------------------------------------------------
.text:0040489D                 align 10h
.text:004048A0
.text:004048A0 loc_4048A0:                             ; CODE XREF: sub_404734+33↑j
.text:004048A0                 mov     eax, ds:Str1
.text:004048A5                 cmp     ebx, eax
.text:004048A7                 jz      loc_40481F
.text:004048AD                 mov     [esp+28h+Format], ebx ; Str2
.text:004048B1                 mov     [esp+28h+Stream], eax ; Str1
.text:004048B4                 call    strcmp
.text:004048B9                 test    eax, eax
.text:004048BB                 jz      loc_40481F
.text:004048C1                 jmp     loc_40476D
.text:004048C6 ; ---------------------------------------------------------------------------
.text:004048C6
.text:004048C6 loc_4048C6:                             ; CODE XREF: sub_404734+E5↑j
.text:004048C6                 mov     [esp+28h+Stream], ebp ; Code
.text:004048C9                 call    exit
.text:004048C9 sub_404734      endp ; sp-analysis failed
.text:004048C9
.text:004048C9 ; ---------------------------------------------------------------------------
.text:004048CE                 align 10h
.text:004048D0
.text:004048D0 ; =============== S U B R O U T I N E =======================================
.text:004048D0
.text:004048D0 ; Attributes: thunk
.text:004048D0
.text:004048D0 ; int __cdecl j__flushall()
.text:004048D0 j__flushall     proc near               ; CODE XREF: sub_401340:loc_40144A↑p
.text:004048D0                 jmp     _flushall
.text:004048D0 j__flushall     endp
.text:004048D0
.text:004048D0 ; ---------------------------------------------------------------------------
.text:004048D5                 align 10h
.text:004048E0
.text:004048E0 ; =============== S U B R O U T I N E =======================================
.text:004048E0
.text:004048E0 ; Attributes: thunk
.text:004048E0
.text:004048E0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004048E0 mbrtowc         proc near               ; CODE XREF: sub_402FA0+757↑p
.text:004048E0
.text:004048E0 DstCh           = dword ptr  4
.text:004048E0 SrcCh           = dword ptr  8
.text:004048E0 SizeInBytes     = dword ptr  0Ch
.text:004048E0 State           = dword ptr  10h
.text:004048E0
.text:004048E0                 jmp     ds:__imp_mbrtowc
.text:004048E0 mbrtowc         endp
.text:004048E0
.text:004048E0 ; ---------------------------------------------------------------------------
.text:004048E6                 align 10h
.text:004048F0
.text:004048F0 ; =============== S U B R O U T I N E =======================================
.text:004048F0
.text:004048F0 ; Attributes: bp-based frame
.text:004048F0
.text:004048F0 sub_4048F0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004048F0                 push    ebp
.text:004048F1                 mov     ecx, offset dword_406000
.text:004048F6                 cmp     ecx, offset dword_406000
.text:004048FC                 mov     ebp, esp
.text:004048FE                 jnb     short loc_404916
.text:00404900
.text:00404900 loc_404900:                             ; CODE XREF: sub_4048F0+24↓j
.text:00404900                 mov     edx, [ecx+4]
.text:00404903                 mov     eax, [ecx]
.text:00404905                 add     ecx, 8
.text:00404908                 add     [edx+400000h], eax
.text:0040490E                 cmp     ecx, offset dword_406000
.text:00404914                 jb      short loc_404900
.text:00404916
.text:00404916 loc_404916:                             ; CODE XREF: sub_4048F0+E↑j
.text:00404916                 pop     ebp
.text:00404917                 retn
.text:00404917 sub_4048F0      endp
.text:00404917
.text:00404917 ; ---------------------------------------------------------------------------
.text:00404918                 align 10h
.text:00404920
.text:00404920 ; =============== S U B R O U T I N E =======================================
.text:00404920
.text:00404920 ; Attributes: bp-based frame
.text:00404920
.text:00404920 sub_404920      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404920                                         ; TopLevelExceptionFilter+D7↑p
.text:00404920                 push    ebp
.text:00404921                 mov     ebp, esp
.text:00404923                 fninit
.text:00404925                 pop     ebp
.text:00404926                 retn
.text:00404926 sub_404920      endp
.text:00404926
.text:00404926 ; ---------------------------------------------------------------------------
.text:00404927                 align 10h
.text:00404930
.text:00404930 ; =============== S U B R O U T I N E =======================================
.text:00404930
.text:00404930 ; Attributes: bp-based frame
.text:00404930
.text:00404930 ; void __cdecl sub_404930()
.text:00404930 sub_404930      proc near               ; DATA XREF: .text:loc_404979↓o
.text:00404930                                         ; sub_4049C0:loc_4049EE↓o
.text:00404930                 push    ebp
.text:00404931                 mov     ebp, esp
.text:00404933                 sub     esp, 8
.text:00404936                 mov     eax, off_405084
.text:0040493B                 mov     edx, [eax]
.text:0040493D                 test    edx, edx
.text:0040493F                 jnz     short loc_404945
.text:00404941
.text:00404941 loc_404941:                             ; CODE XREF: sub_404930+2C↓j
.text:00404941                 mov     esp, ebp
.text:00404943                 pop     ebp
.text:00404944                 retn
.text:00404945 ; ---------------------------------------------------------------------------
.text:00404945
.text:00404945 loc_404945:                             ; CODE XREF: sub_404930+F↑j
.text:00404945                                         ; sub_404930+2A↓j
.text:00404945                 call    dword ptr [eax]
.text:00404947                 mov     edx, off_405084
.text:0040494D                 mov     ecx, [edx+4]
.text:00404950                 lea     eax, [edx+4]
.text:00404953                 mov     off_405084, eax
.text:00404958                 test    ecx, ecx
.text:0040495A                 jnz     short loc_404945
.text:0040495C                 jmp     short loc_404941
.text:0040495C sub_404930      endp
.text:0040495C
.text:0040495C ; ---------------------------------------------------------------------------
.text:0040495E                 align 10h
.text:00404960                 push    ebp
.text:00404961                 mov     ebp, esp
.text:00404963                 sub     esp, 8
.text:00404966                 mov     [ebp-4], ebx
.text:00404969                 mov     eax, ds:dword_404C90
.text:0040496E                 cmp     eax, 0FFFFFFFFh
.text:00404971                 jz      short loc_40499C
.text:00404973
.text:00404973 loc_404973:                             ; CODE XREF: .text:004049A6↓j
.text:00404973                                         ; .text:004049B9↓j
.text:00404973                 test    eax, eax
.text:00404975                 mov     ebx, eax
.text:00404977                 jnz     short loc_404990
.text:00404979
.text:00404979 loc_404979:                             ; CODE XREF: .text:0040499A↓j
.text:00404979                 mov     dword ptr [esp], offset sub_404930
.text:00404980                 call    sub_401040
.text:00404985                 mov     ebx, [ebp-4]
.text:00404988                 mov     esp, ebp
.text:0040498A                 pop     ebp
.text:0040498B                 retn
.text:0040498B ; ---------------------------------------------------------------------------
.text:0040498C                 align 10h
.text:00404990
.text:00404990 loc_404990:                             ; CODE XREF: .text:00404977↑j
.text:00404990                                         ; .text:00404998↓j
.text:00404990                 call    ds:dword_404C90[ebx*4]
.text:00404997                 dec     ebx
.text:00404998                 jnz     short loc_404990
.text:0040499A                 jmp     short loc_404979
.text:0040499C ; ---------------------------------------------------------------------------
.text:0040499C
.text:0040499C loc_40499C:                             ; CODE XREF: .text:00404971↑j
.text:0040499C                 mov     ecx, ds:dword_404C94
.text:004049A2                 xor     eax, eax
.text:004049A4                 test    ecx, ecx
.text:004049A6                 jz      short loc_404973
.text:004049A8                 mov     edx, offset dword_404C90
.text:004049AD                 lea     esi, [esi+0]
.text:004049B0
.text:004049B0 loc_4049B0:                             ; CODE XREF: .text:004049B7↓j
.text:004049B0                 inc     eax
.text:004049B1                 mov     ecx, [edx+eax*4+4]
.text:004049B5                 test    ecx, ecx
.text:004049B7                 jnz     short loc_4049B0
.text:004049B9                 jmp     short loc_404973
.text:004049B9 ; ---------------------------------------------------------------------------
.text:004049BB                 align 10h
.text:004049C0
.text:004049C0 ; =============== S U B R O U T I N E =======================================
.text:004049C0
.text:004049C0 ; Attributes: bp-based frame
.text:004049C0
.text:004049C0 sub_4049C0      proc near               ; CODE XREF: sub_401340+18↑p
.text:004049C0
.text:004049C0 var_8           = dword ptr -8
.text:004049C0 var_4           = dword ptr -4
.text:004049C0
.text:004049C0                 push    ebp
.text:004049C1                 mov     ebp, esp
.text:004049C3                 sub     esp, 8
.text:004049C6                 mov     [ebp+var_4], ebx
.text:004049C9                 mov     edx, dword_405080
.text:004049CF                 test    edx, edx
.text:004049D1                 jnz     short loc_4049FA
.text:004049D3                 mov     eax, ds:dword_404C90
.text:004049D8                 mov     edx, 1
.text:004049DD                 mov     dword_405080, edx
.text:004049E3                 cmp     eax, 0FFFFFFFFh
.text:004049E6                 jz      short loc_404A0D
.text:004049E8
.text:004049E8 loc_4049E8:                             ; CODE XREF: sub_4049C0+57↓j
.text:004049E8                                         ; sub_4049C0+69↓j
.text:004049E8                 test    eax, eax
.text:004049EA                 mov     ebx, eax
.text:004049EC                 jnz     short loc_404A01
.text:004049EE
.text:004049EE loc_4049EE:                             ; CODE XREF: sub_4049C0+4B↓j
.text:004049EE                 mov     [esp+8+var_8], offset sub_404930 ; void (__cdecl *)()
.text:004049F5                 call    sub_401040
.text:004049FA
.text:004049FA loc_4049FA:                             ; CODE XREF: sub_4049C0+11↑j
.text:004049FA                 mov     ebx, [ebp+var_4]
.text:004049FD                 mov     esp, ebp
.text:004049FF                 pop     ebp
.text:00404A00                 retn
.text:00404A01 ; ---------------------------------------------------------------------------
.text:00404A01
.text:00404A01 loc_404A01:                             ; CODE XREF: sub_4049C0+2C↑j
.text:00404A01                                         ; sub_4049C0+49↓j
.text:00404A01                 call    ds:dword_404C90[ebx*4]
.text:00404A08                 dec     ebx
.text:00404A09                 jnz     short loc_404A01
.text:00404A0B                 jmp     short loc_4049EE
.text:00404A0D ; ---------------------------------------------------------------------------
.text:00404A0D
.text:00404A0D loc_404A0D:                             ; CODE XREF: sub_4049C0+26↑j
.text:00404A0D                 mov     ecx, ds:dword_404C94
.text:00404A13                 xor     eax, eax
.text:00404A15                 test    ecx, ecx
.text:00404A17                 jz      short loc_4049E8
.text:00404A19                 mov     edx, offset dword_404C90
.text:00404A1E                 mov     esi, esi
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_4049C0+67↓j
.text:00404A20                 inc     eax
.text:00404A21                 mov     ebx, [edx+eax*4+4]
.text:00404A25                 test    ebx, ebx
.text:00404A27                 jnz     short loc_404A20
.text:00404A29                 jmp     short loc_4049E8
.text:00404A29 sub_4049C0      endp
.text:00404A29
.text:00404A29 ; ---------------------------------------------------------------------------
.text:00404A2B                 align 10h
.text:00404A30
.text:00404A30 ; =============== S U B R O U T I N E =======================================
.text:00404A30
.text:00404A30 ; Attributes: info_from_lumina
.text:00404A30
.text:00404A30 ; void *__cdecl _alloca(size_t Size)
.text:00404A30 __alloca        proc near               ; CODE XREF: sub_401340+13↑p
.text:00404A30                 push    ecx
.text:00404A31                 mov     ecx, esp
.text:00404A33                 add     ecx, 8
.text:00404A36
.text:00404A36 loc_404A36:                             ; CODE XREF: __alloca+1B↓j
.text:00404A36                 cmp     eax, 1000h
.text:00404A3B                 jb      short loc_404A4D
.text:00404A3D                 sub     ecx, 1000h
.text:00404A43                 or      dword ptr [ecx], 0
.text:00404A46                 sub     eax, 1000h
.text:00404A4B                 jmp     short loc_404A36
.text:00404A4D ; ---------------------------------------------------------------------------
.text:00404A4D
.text:00404A4D loc_404A4D:                             ; CODE XREF: __alloca+B↑j
.text:00404A4D                 sub     ecx, eax
.text:00404A4F                 or      dword ptr [ecx], 0
.text:00404A52                 mov     eax, esp
.text:00404A54                 mov     esp, ecx
.text:00404A56                 mov     ecx, [eax]
.text:00404A58                 mov     eax, [eax+4]
.text:00404A5B                 jmp     eax
.text:00404A5B __alloca        endp
.text:00404A5B
.text:00404A5B ; ---------------------------------------------------------------------------
.text:00404A5D                 align 10h
.text:00404A60                 jmp     ds:__set_app_type
.text:00404A60 ; ---------------------------------------------------------------------------
.text:00404A66                 align 10h
.text:00404A70
.text:00404A70 ; =============== S U B R O U T I N E =======================================
.text:00404A70
.text:00404A70 ; Attributes: thunk
.text:00404A70
.text:00404A70 ; void __cdecl cexit()
.text:00404A70 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404A70                 jmp     ds:__imp__cexit
.text:00404A70 _cexit          endp
.text:00404A70
.text:00404A70 ; ---------------------------------------------------------------------------
.text:00404A76                 align 10h
.text:00404A80
.text:00404A80 ; =============== S U B R O U T I N E =======================================
.text:00404A80
.text:00404A80 ; Attributes: thunk
.text:00404A80
.text:00404A80 ; char ***__cdecl _p__environ()
.text:00404A80 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00404A80                 jmp     ds:__imp___p__environ
.text:00404A80 __p__environ    endp
.text:00404A80
.text:00404A80 ; ---------------------------------------------------------------------------
.text:00404A86                 align 10h
.text:00404A90
.text:00404A90 ; =============== S U B R O U T I N E =======================================
.text:00404A90
.text:00404A90 ; Attributes: thunk
.text:00404A90
.text:00404A90 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00404A90 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00404A90                                         ; TopLevelExceptionFilter+88↑p ...
.text:00404A90
.text:00404A90 Signal          = dword ptr  4
.text:00404A90 Function        = dword ptr  8
.text:00404A90
.text:00404A90                 jmp     ds:__imp_signal
.text:00404A90 signal          endp
.text:00404A90
.text:00404A90 ; ---------------------------------------------------------------------------
.text:00404A96                 align 10h
.text:00404AA0
.text:00404AA0 ; =============== S U B R O U T I N E =======================================
.text:00404AA0
.text:00404AA0 ; Attributes: thunk
.text:00404AA0
.text:00404AA0 ; int *__cdecl _p__fmode()
.text:00404AA0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00404AA0                 jmp     ds:__imp___p__fmode
.text:00404AA0 __p__fmode      endp
.text:00404AA0
.text:00404AA0 ; ---------------------------------------------------------------------------
.text:00404AA6                 align 10h
.text:00404AB0
.text:00404AB0 ; =============== S U B R O U T I N E =======================================
.text:00404AB0
.text:00404AB0 ; Attributes: thunk
.text:00404AB0
.text:00404AB0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00404AB0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00404AB0                                         ; sub_401080+90↑p ...
.text:00404AB0
.text:00404AB0 FileHandle      = dword ptr  4
.text:00404AB0 Mode            = dword ptr  8
.text:00404AB0
.text:00404AB0                 jmp     ds:__imp__setmode
.text:00404AB0 _setmode        endp
.text:00404AB0
.text:00404AB0 ; ---------------------------------------------------------------------------
.text:00404AB6                 align 10h
.text:00404AC0
.text:00404AC0 ; =============== S U B R O U T I N E =======================================
.text:00404AC0
.text:00404AC0 ; Attributes: thunk
.text:00404AC0
.text:00404AC0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00404AC0                 jmp     ds:__imp___getmainargs
.text:00404AC0 __getmainargs   endp
.text:00404AC0
.text:00404AC0 ; ---------------------------------------------------------------------------
.text:00404AC6                 align 10h
.text:00404AD0
.text:00404AD0 ; =============== S U B R O U T I N E =======================================
.text:00404AD0
.text:00404AD0 ; Attributes: thunk
.text:00404AD0
.text:00404AD0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00404AD0 setlocale       proc near               ; CODE XREF: sub_401340+34↑p
.text:00404AD0
.text:00404AD0 Category        = dword ptr  4
.text:00404AD0 Locale          = dword ptr  8
.text:00404AD0
.text:00404AD0                 jmp     ds:__imp_setlocale
.text:00404AD0 setlocale       endp
.text:00404AD0
.text:00404AD0 ; ---------------------------------------------------------------------------
.text:00404AD6                 align 10h
.text:00404AE0
.text:00404AE0 ; =============== S U B R O U T I N E =======================================
.text:00404AE0
.text:00404AE0 ; Attributes: noreturn thunk
.text:00404AE0
.text:00404AE0 ; void __cdecl __noreturn exit(int Code)
.text:00404AE0 exit            proc near               ; CODE XREF: sub_401340:loc_40143D↑p
.text:00404AE0                                         ; sub_401590+3E↑p ...
.text:00404AE0
.text:00404AE0 Code            = dword ptr  4
.text:00404AE0
.text:00404AE0                 jmp     ds:__imp_exit
.text:00404AE0 exit            endp
.text:00404AE0
.text:00404AE0 ; ---------------------------------------------------------------------------
.text:00404AE6                 align 10h
.text:00404AF0
.text:00404AF0 ; =============== S U B R O U T I N E =======================================
.text:00404AF0
.text:00404AF0 ; Attributes: thunk
.text:00404AF0
.text:00404AF0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00404AF0 fputs           proc near               ; CODE XREF: sub_401590+7F↑p
.text:00404AF0                                         ; sub_401590+A1↑p ...
.text:00404AF0
.text:00404AF0 Buffer          = dword ptr  4
.text:00404AF0 Stream          = dword ptr  8
.text:00404AF0
.text:00404AF0                 jmp     ds:__imp_fputs
.text:00404AF0 fputs           endp
.text:00404AF0
.text:00404AF0 ; ---------------------------------------------------------------------------
.text:00404AF6                 align 10h
.text:00404B00
.text:00404B00 ; =============== S U B R O U T I N E =======================================
.text:00404B00
.text:00404B00 ; Attributes: thunk
.text:00404B00
.text:00404B00 ; int printf(const char *const Format, ...)
.text:00404B00 printf          proc near               ; CODE XREF: sub_401590+5D↑p
.text:00404B00                                         ; sub_401590+E0↑p
.text:00404B00
.text:00404B00 Format          = dword ptr  4
.text:00404B00
.text:00404B00                 jmp     ds:__imp_printf
.text:00404B00 printf          endp
.text:00404B00
.text:00404B00 ; ---------------------------------------------------------------------------
.text:00404B06                 align 10h
.text:00404B10
.text:00404B10 ; =============== S U B R O U T I N E =======================================
.text:00404B10
.text:00404B10 ; Attributes: thunk
.text:00404B10
.text:00404B10 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00404B10 fprintf         proc near               ; CODE XREF: sub_401340+F1↑p
.text:00404B10                                         ; sub_401590+36↑p ...
.text:00404B10
.text:00404B10 Stream          = dword ptr  4
.text:00404B10 Format          = dword ptr  8
.text:00404B10
.text:00404B10                 jmp     ds:__imp_fprintf
.text:00404B10 fprintf         endp
.text:00404B10
.text:00404B10 ; ---------------------------------------------------------------------------
.text:00404B16                 align 10h
.text:00404B20
.text:00404B20 ; =============== S U B R O U T I N E =======================================
.text:00404B20
.text:00404B20 ; Attributes: thunk
.text:00404B20
.text:00404B20 ; size_t __cdecl strlen(const char *Str)
.text:00404B20 strlen          proc near               ; CODE XREF: sub_4018D0+2A9↑p
.text:00404B20                                         ; sub_4018D0+346↑p ...
.text:00404B20
.text:00404B20 Str             = dword ptr  4
.text:00404B20
.text:00404B20                 jmp     ds:__imp_strlen
.text:00404B20 strlen          endp
.text:00404B20
.text:00404B20 ; ---------------------------------------------------------------------------
.text:00404B26                 align 10h
.text:00404B30
.text:00404B30 ; =============== S U B R O U T I N E =======================================
.text:00404B30
.text:00404B30 ; Attributes: thunk
.text:00404B30
.text:00404B30 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00404B30 strncmp         proc near               ; CODE XREF: sub_4018D0+23F↑p
.text:00404B30                                         ; sub_4018D0+699↑p
.text:00404B30
.text:00404B30 Str1            = dword ptr  4
.text:00404B30 Str2            = dword ptr  8
.text:00404B30 MaxCount        = dword ptr  0Ch
.text:00404B30
.text:00404B30                 jmp     ds:__imp_strncmp
.text:00404B30 strncmp         endp
.text:00404B30
.text:00404B30 ; ---------------------------------------------------------------------------
.text:00404B36                 align 10h
.text:00404B40
.text:00404B40 ; =============== S U B R O U T I N E =======================================
.text:00404B40
.text:00404B40 ; Attributes: thunk
.text:00404B40
.text:00404B40 ; char *__cdecl getenv(const char *VarName)
.text:00404B40 getenv          proc near               ; CODE XREF: sub_4018D0+B57↑p
.text:00404B40
.text:00404B40 VarName         = dword ptr  4
.text:00404B40
.text:00404B40                 jmp     ds:__imp_getenv
.text:00404B40 getenv          endp
.text:00404B40
.text:00404B40 ; ---------------------------------------------------------------------------
.text:00404B46                 align 10h
.text:00404B50
.text:00404B50 ; =============== S U B R O U T I N E =======================================
.text:00404B50
.text:00404B50 ; Attributes: thunk
.text:00404B50
.text:00404B50 ; char *__cdecl strchr(const char *Str, int Val)
.text:00404B50 strchr          proc near               ; CODE XREF: sub_4018D0+469↑p
.text:00404B50                                         ; sub_4018D0+53A↑p ...
.text:00404B50
.text:00404B50 Str             = dword ptr  4
.text:00404B50 Val             = dword ptr  8
.text:00404B50
.text:00404B50                 jmp     ds:__imp_strchr
.text:00404B50 strchr          endp
.text:00404B50
.text:00404B50 ; ---------------------------------------------------------------------------
.text:00404B56                 align 10h
.text:00404B60
.text:00404B60 ; =============== S U B R O U T I N E =======================================
.text:00404B60
.text:00404B60 ; Attributes: thunk
.text:00404B60
.text:00404B60 ; int *__cdecl errno()
.text:00404B60 _errno          proc near               ; CODE XREF: sub_402930:loc_40296D↑p
.text:00404B60                                         ; .text:00403A0B↑p ...
.text:00404B60                 jmp     ds:__imp__errno
.text:00404B60 _errno          endp
.text:00404B60
.text:00404B60 ; ---------------------------------------------------------------------------
.text:00404B66                 align 10h
.text:00404B70
.text:00404B70 ; =============== S U B R O U T I N E =======================================
.text:00404B70
.text:00404B70 ; Attributes: thunk
.text:00404B70
.text:00404B70 ; int __cdecl fclose(FILE *Stream)
.text:00404B70 fclose          proc near               ; CODE XREF: sub_402930+27↑p
.text:00404B70
.text:00404B70 Stream          = dword ptr  4
.text:00404B70
.text:00404B70                 jmp     ds:__imp_fclose
.text:00404B70 fclose          endp
.text:00404B70
.text:00404B70 ; ---------------------------------------------------------------------------
.text:00404B76                 align 10h
.text:00404B80
.text:00404B80 ; =============== S U B R O U T I N E =======================================
.text:00404B80
.text:00404B80 ; Attributes: thunk
.text:00404B80
.text:00404B80 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00404B80 vfprintf        proc near               ; CODE XREF: sub_402D00+C1↑p
.text:00404B80                                         ; sub_404630+49↑p ...
.text:00404B80
.text:00404B80 Stream          = dword ptr  4
.text:00404B80 Format          = dword ptr  8
.text:00404B80 ArgList         = dword ptr  0Ch
.text:00404B80
.text:00404B80                 jmp     ds:__imp_vfprintf
.text:00404B80 vfprintf        endp
.text:00404B80
.text:00404B80 ; ---------------------------------------------------------------------------
.text:00404B86                 align 10h
.text:00404B90
.text:00404B90 ; =============== S U B R O U T I N E =======================================
.text:00404B90
.text:00404B90 ; Attributes: noreturn thunk
.text:00404B90
.text:00404B90 ; void __cdecl __noreturn abort()
.text:00404B90 abort           proc near               ; CODE XREF: sub_402D00:loc_402D9C↑p
.text:00404B90                                         ; sub_4040E0:loc_40429A↑p ...
.text:00404B90                 jmp     ds:__imp_abort
.text:00404B90 abort           endp
.text:00404B90
.text:00404B90 ; ---------------------------------------------------------------------------
.text:00404B96                 align 10h
.text:00404BA0
.text:00404BA0 ; =============== S U B R O U T I N E =======================================
.text:00404BA0
.text:00404BA0 ; Attributes: thunk
.text:00404BA0
.text:00404BA0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00404BA0 _flsbuf         proc near               ; CODE XREF: sub_402D00+128↑p
.text:00404BA0                                         ; sub_402D00+13A↑p ...
.text:00404BA0
.text:00404BA0 File            = dword ptr  8
.text:00404BA0
.text:00404BA0                 jmp     ds:__imp__flsbuf
.text:00404BA0 _flsbuf         endp
.text:00404BA0
.text:00404BA0 ; ---------------------------------------------------------------------------
.text:00404BA6                 align 10h
.text:00404BB0
.text:00404BB0 ; =============== S U B R O U T I N E =======================================
.text:00404BB0
.text:00404BB0 ; Attributes: thunk
.text:00404BB0
.text:00404BB0 ; void __cdecl free(void *Block)
.text:00404BB0 free            proc near               ; CODE XREF: sub_4040E0+112↑p
.text:00404BB0
.text:00404BB0 Block           = dword ptr  4
.text:00404BB0
.text:00404BB0                 jmp     ds:__imp_free
.text:00404BB0 free            endp
.text:00404BB0
.text:00404BB0 ; ---------------------------------------------------------------------------
.text:00404BB6                 align 10h
.text:00404BC0
.text:00404BC0 ; =============== S U B R O U T I N E =======================================
.text:00404BC0
.text:00404BC0 ; Attributes: thunk
.text:00404BC0
.text:00404BC0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00404BC0 iswctype        proc near               ; CODE XREF: sub_402FA0+78B↑p
.text:00404BC0
.text:00404BC0 C               = word ptr  4
.text:00404BC0 Type            = word ptr  8
.text:00404BC0
.text:00404BC0                 jmp     ds:__imp_iswctype
.text:00404BC0 iswctype        endp
.text:00404BC0
.text:00404BC0 ; ---------------------------------------------------------------------------
.text:00404BC6                 align 10h
.text:00404BD0
.text:00404BD0 ; =============== S U B R O U T I N E =======================================
.text:00404BD0
.text:00404BD0 ; Attributes: thunk
.text:00404BD0
.text:00404BD0 ; int __cdecl isctype(int C, int Type)
.text:00404BD0 _isctype        proc near               ; CODE XREF: sub_402FA0+610↑p
.text:00404BD0
.text:00404BD0 C               = dword ptr  4
.text:00404BD0 Type            = dword ptr  8
.text:00404BD0
.text:00404BD0                 jmp     ds:__imp__isctype
.text:00404BD0 _isctype        endp
.text:00404BD0
.text:00404BD0 ; ---------------------------------------------------------------------------
.text:00404BD6                 align 10h
.text:00404BE0
.text:00404BE0 ; =============== S U B R O U T I N E =======================================
.text:00404BE0
.text:00404BE0 ; Attributes: thunk
.text:00404BE0
.text:00404BE0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00404BE0 memcpy          proc near               ; CODE XREF: .text:00404498↑p
.text:00404BE0                                         ; .text:004044E1↑p
.text:00404BE0
.text:00404BE0 Src             = dword ptr  8
.text:00404BE0 Size            = dword ptr  0Ch
.text:00404BE0
.text:00404BE0                 jmp     ds:__imp_memcpy
.text:00404BE0 memcpy          endp
.text:00404BE0
.text:00404BE0 ; ---------------------------------------------------------------------------
.text:00404BE6                 align 10h
.text:00404BF0
.text:00404BF0 ; =============== S U B R O U T I N E =======================================
.text:00404BF0
.text:00404BF0 ; Attributes: thunk
.text:00404BF0
.text:00404BF0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00404BF0 memset          proc near               ; CODE XREF: .text:00404416↑p
.text:00404BF0
.text:00404BF0 Val             = dword ptr  8
.text:00404BF0 Size            = dword ptr  0Ch
.text:00404BF0
.text:00404BF0                 jmp     ds:__imp_memset
.text:00404BF0 memset          endp
.text:00404BF0
.text:00404BF0 ; ---------------------------------------------------------------------------
.text:00404BF6                 align 10h
.text:00404C00
.text:00404C00 ; =============== S U B R O U T I N E =======================================
.text:00404C00
.text:00404C00 ; Attributes: thunk
.text:00404C00
.text:00404C00 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00404C00 calloc          proc near               ; CODE XREF: .text:00404453↑p
.text:00404C00
.text:00404C00 Count           = dword ptr  4
.text:00404C00 Size            = dword ptr  8
.text:00404C00
.text:00404C00                 jmp     ds:__imp_calloc
.text:00404C00 calloc          endp
.text:00404C00
.text:00404C00 ; ---------------------------------------------------------------------------
.text:00404C06                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10 ; Attributes: thunk
.text:00404C10
.text:00404C10 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00404C10 realloc         proc near               ; CODE XREF: .text:00404350↑p
.text:00404C10                                         ; sub_404380+16↑p ...
.text:00404C10
.text:00404C10 Block           = dword ptr  4
.text:00404C10 Size            = dword ptr  8
.text:00404C10
.text:00404C10                 jmp     ds:__imp_realloc
.text:00404C10 realloc         endp
.text:00404C10
.text:00404C10 ; ---------------------------------------------------------------------------
.text:00404C16                 align 10h
.text:00404C20
.text:00404C20 ; =============== S U B R O U T I N E =======================================
.text:00404C20
.text:00404C20 ; Attributes: thunk
.text:00404C20
.text:00404C20 ; void *__cdecl malloc(size_t Size)
.text:00404C20 malloc          proc near               ; CODE XREF: sub_4042B0+24↑p
.text:00404C20                                         ; sub_4042F0+E↑p ...
.text:00404C20
.text:00404C20 Size            = dword ptr  4
.text:00404C20
.text:00404C20                 jmp     ds:__imp_malloc
.text:00404C20 malloc          endp
.text:00404C20
.text:00404C20 ; ---------------------------------------------------------------------------
.text:00404C26                 align 10h
.text:00404C30
.text:00404C30 ; =============== S U B R O U T I N E =======================================
.text:00404C30
.text:00404C30 ; Attributes: thunk
.text:00404C30
.text:00404C30 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00404C30 strcmp          proc near               ; CODE XREF: sub_404734+180↑p
.text:00404C30
.text:00404C30 Str1            = dword ptr  4
.text:00404C30 Str2            = dword ptr  8
.text:00404C30
.text:00404C30                 jmp     ds:__imp_strcmp
.text:00404C30 strcmp          endp
.text:00404C30
.text:00404C30 ; ---------------------------------------------------------------------------
.text:00404C36                 align 10h
.text:00404C40
.text:00404C40 ; =============== S U B R O U T I N E =======================================
.text:00404C40
.text:00404C40 ; Attributes: thunk
.text:00404C40
.text:00404C40 ; int __cdecl fflush(FILE *Stream)
.text:00404C40 fflush          proc near               ; CODE XREF: sub_404630+19↑p
.text:00404C40                                         ; sub_404630+81↑p ...
.text:00404C40
.text:00404C40 Stream          = dword ptr  4
.text:00404C40
.text:00404C40                 jmp     ds:__imp_fflush
.text:00404C40 fflush          endp
.text:00404C40
.text:00404C40 ; ---------------------------------------------------------------------------
.text:00404C46                 align 10h
.text:00404C50
.text:00404C50 ; =============== S U B R O U T I N E =======================================
.text:00404C50
.text:00404C50 ; Attributes: thunk
.text:00404C50
.text:00404C50 ; char *__cdecl strerror(int ErrorMessage)
.text:00404C50 strerror        proc near               ; CODE XREF: sub_404630+A5↑p
.text:00404C50                                         ; sub_404734+10F↑p
.text:00404C50
.text:00404C50 ErrorMessage    = dword ptr  4
.text:00404C50
.text:00404C50                 jmp     ds:__imp_strerror
.text:00404C50 strerror        endp
.text:00404C50
.text:00404C50 ; ---------------------------------------------------------------------------
.text:00404C56                 align 10h
.text:00404C60
.text:00404C60 ; =============== S U B R O U T I N E =======================================
.text:00404C60
.text:00404C60 ; Attributes: thunk
.text:00404C60
.text:00404C60 ; int __cdecl flushall()
.text:00404C60 _flushall       proc near               ; CODE XREF: j__flushall↑j
.text:00404C60                 jmp     ds:__imp__flushall
.text:00404C60 _flushall       endp
.text:00404C60
.text:00404C60 ; ---------------------------------------------------------------------------
.text:00404C66                 align 10h
.text:00404C70
.text:00404C70 ; =============== S U B R O U T I N E =======================================
.text:00404C70
.text:00404C70 ; Attributes: thunk
.text:00404C70
.text:00404C70 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00404C70 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00404C70
.text:00404C70 lpTopLevelExceptionFilter= dword ptr  4
.text:00404C70
.text:00404C70                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00404C70 SetUnhandledExceptionFilter endp
.text:00404C70
.text:00404C70 ; ---------------------------------------------------------------------------
.text:00404C76                 align 10h
.text:00404C80
.text:00404C80 ; =============== S U B R O U T I N E =======================================
.text:00404C80
.text:00404C80 ; Attributes: noreturn thunk
.text:00404C80
.text:00404C80 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00404C80 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00404C80
.text:00404C80 uExitCode       = dword ptr  4
.text:00404C80
.text:00404C80                 jmp     ds:__imp_ExitProcess
.text:00404C80 ExitProcess     endp
.text:00404C80
.text:00404C80 ; ---------------------------------------------------------------------------
.text:00404C86                 align 10h
.text:00404C90 dword_404C90    dd 0FFFFFFFFh           ; DATA XREF: .text:00404969↑r
.text:00404C90                                         ; .text:loc_404990↑r ...
.text:00404C94 dword_404C94    dd 0                    ; DATA XREF: .text:loc_40499C↑r
.text:00404C94                                         ; sub_4049C0:loc_404A0D↑r
.text:00404C98                 dd 0FFFFFFFFh
.text:00404C9C dword_404C9C    dd 59h dup(0)           ; DATA XREF: .data:off_405084↓o
.text:00404E00                 dd 80h dup(?)
.text:00404E00 _text           ends
.text:00404E00
.data:00405000 ; Section 2. (virtual address 00005000)
.data:00405000 ; Virtual size                  : 000000A0 (    160.)
.data:00405000 ; Section size in file          : 00000200 (    512.)
.data:00405000 ; Offset to raw data for section: 00004200
.data:00405000 ; Flags C0000040: Data Readable Writable
.data:00405000 ; Alignment     : default
.data:00405000 ; ===========================================================================
.data:00405000
.data:00405000 ; Segment type: Pure data
.data:00405000 ; Segment permissions: Read/Write
.data:00405000 _data           segment para public 'DATA' use32
.data:00405000                 assume cs:_data
.data:00405000                 ;org 405000h
.data:00405000 dword_405000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00405000                                         ; sub_401080+CC↑r
.data:00405004 dword_405004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00405004                                         ; sub_401080+D4↑r
.data:00405008                 align 10h
.data:00405010 dword_405010    dd 1                    ; DATA XREF: sub_401340:loc_401442↑r
.data:00405010                                         ; sub_402460+3↑r ...
.data:00405014 dword_405014    dd 1                    ; DATA XREF: sub_402460+11↑r
.data:00405014                                         ; .text:00402501↑r ...
.data:00405018 dword_405018    dd 3Fh                  ; DATA XREF: sub_402460+7D↑w
.data:00405018                                         ; .text:0040256D↑w
.data:0040501C                 align 10h
.data:00405020 ; char *Buffer
.data:00405020 Buffer          dd offset aCopyrightC2005
.data:00405020                                         ; DATA XREF: sub_402D00+DC↑r
.data:00405020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00405024                 align 10h
.data:00405030 ; int Code
.data:00405030 Code            dd 1                    ; DATA XREF: sub_402930+6D↑r
.data:00405030                                         ; sub_402930+9A↑r ...
.data:00405034                 align 10h
.data:00405040 dword_405040    dd 1                    ; DATA XREF: sub_4040E0+22↑r
.data:00405040                                         ; sub_4040E0+65↑r ...
.data:00405044 dword_405044    dd 100h                 ; DATA XREF: sub_4040E0+3F↑o
.data:00405044                                         ; sub_4040E0+1A2↑r ...
.data:00405048 off_405048      dd offset unk_406040    ; DATA XREF: sub_4040E0+1AA↑r
.data:0040504C ; void *off_40504C
.data:0040504C off_40504C      dd offset dword_405044  ; DATA XREF: sub_4040E0+39↑r
.data:0040504C                                         ; sub_4040E0+60↑w ...
.data:00405050 dword_405050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00405054                 align 10h
.data:00405060 ; int Mode
.data:00405060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00405060                                         ; sub_401080+80↑r ...
.data:00405064                 align 10h
.data:00405070 dword_405070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00405070                                         ; sub_401080+BA↑r
.data:00405074                 align 10h
.data:00405080 dword_405080    dd 0                    ; DATA XREF: sub_4049C0+9↑r
.data:00405080                                         ; sub_4049C0+1D↑w
.data:00405084 off_405084      dd offset dword_404C9C  ; DATA XREF: sub_404930+6↑r
.data:00405084                                         ; sub_404930+17↑r ...
.data:00405088                 align 1000h
.data:00405088 _data           ends
.data:00405088
.bss:00406000 ; Section 3. (virtual address 00006000)
.bss:00406000 ; Virtual size                  : 00000230 (    560.)
.bss:00406000 ; Section size in file          : 00000000 (      0.)
.bss:00406000 ; Offset to raw data for section: 00000000
.bss:00406000 ; Flags C0000080: Bss Readable Writable
.bss:00406000 ; Alignment     : default
.bss:00406000 ; ===========================================================================
.bss:00406000
.bss:00406000 ; Segment type: Uninitialized
.bss:00406000 ; Segment permissions: Read/Write
.bss:00406000 _bss            segment para public 'BSS' use32
.bss:00406000                 assume cs:_bss
.bss:00406000                 ;org 406000h
.bss:00406000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00406000 dword_406000    dd ?                    ; DATA XREF: sub_402460+9↑o
.bss:00406000                                         ; sub_402460+17↑w ...
.bss:00406004 dword_406004    dd ?                    ; DATA XREF: sub_402460+21↑w
.bss:00406004                                         ; .text:00402519↑w
.bss:00406008 dword_406008    dd ?                    ; DATA XREF: sub_402460+77↑r
.bss:00406008                                         ; .text:00402567↑r
.bss:0040600C dword_40600C    dd ?                    ; DATA XREF: sub_402460+6B↑r
.bss:0040600C                                         ; .text:0040255B↑r
.bss:00406010                 db    ? ;
.bss:00406011                 db    ? ;
.bss:00406012                 db    ? ;
.bss:00406013                 db    ? ;
.bss:00406014                 db    ? ;
.bss:00406015                 db    ? ;
.bss:00406016                 db    ? ;
.bss:00406017                 db    ? ;
.bss:00406018                 db    ? ;
.bss:00406019                 db    ? ;
.bss:0040601A                 db    ? ;
.bss:0040601B                 db    ? ;
.bss:0040601C                 db    ? ;
.bss:0040601D                 db    ? ;
.bss:0040601E                 db    ? ;
.bss:0040601F                 db    ? ;
.bss:00406020                 db    ? ;
.bss:00406021                 db    ? ;
.bss:00406022                 db    ? ;
.bss:00406023                 db    ? ;
.bss:00406024                 db    ? ;
.bss:00406025                 db    ? ;
.bss:00406026                 db    ? ;
.bss:00406027                 db    ? ;
.bss:00406028                 db    ? ;
.bss:00406029                 db    ? ;
.bss:0040602A                 db    ? ;
.bss:0040602B                 db    ? ;
.bss:0040602C                 db    ? ;
.bss:0040602D                 db    ? ;
.bss:0040602E                 db    ? ;
.bss:0040602F                 db    ? ;
.bss:00406030 ; char *dword_406030
.bss:00406030 dword_406030    dd ?                    ; DATA XREF: .text:00402904↑w
.bss:00406030                                         ; sub_402930+58↑r
.bss:00406034                 align 10h
.bss:00406040 unk_406040      db    ? ;               ; DATA XREF: sub_4040E0+100↑o
.bss:00406040                                         ; .data:off_405048↑o
.bss:00406041                 db    ? ;
.bss:00406042                 db    ? ;
.bss:00406043                 db    ? ;
.bss:00406044                 db    ? ;
.bss:00406045                 db    ? ;
.bss:00406046                 db    ? ;
.bss:00406047                 db    ? ;
.bss:00406048                 db    ? ;
.bss:00406049                 db    ? ;
.bss:0040604A                 db    ? ;
.bss:0040604B                 db    ? ;
.bss:0040604C                 db    ? ;
.bss:0040604D                 db    ? ;
.bss:0040604E                 db    ? ;
.bss:0040604F                 db    ? ;
.bss:00406050                 db    ? ;
.bss:00406051                 db    ? ;
.bss:00406052                 db    ? ;
.bss:00406053                 db    ? ;
.bss:00406054                 db    ? ;
.bss:00406055                 db    ? ;
.bss:00406056                 db    ? ;
.bss:00406057                 db    ? ;
.bss:00406058                 db    ? ;
.bss:00406059                 db    ? ;
.bss:0040605A                 db    ? ;
.bss:0040605B                 db    ? ;
.bss:0040605C                 db    ? ;
.bss:0040605D                 db    ? ;
.bss:0040605E                 db    ? ;
.bss:0040605F                 db    ? ;
.bss:00406060                 db    ? ;
.bss:00406061                 db    ? ;
.bss:00406062                 db    ? ;
.bss:00406063                 db    ? ;
.bss:00406064                 db    ? ;
.bss:00406065                 db    ? ;
.bss:00406066                 db    ? ;
.bss:00406067                 db    ? ;
.bss:00406068                 db    ? ;
.bss:00406069                 db    ? ;
.bss:0040606A                 db    ? ;
.bss:0040606B                 db    ? ;
.bss:0040606C                 db    ? ;
.bss:0040606D                 db    ? ;
.bss:0040606E                 db    ? ;
.bss:0040606F                 db    ? ;
.bss:00406070                 db    ? ;
.bss:00406071                 db    ? ;
.bss:00406072                 db    ? ;
.bss:00406073                 db    ? ;
.bss:00406074                 db    ? ;
.bss:00406075                 db    ? ;
.bss:00406076                 db    ? ;
.bss:00406077                 db    ? ;
.bss:00406078                 db    ? ;
.bss:00406079                 db    ? ;
.bss:0040607A                 db    ? ;
.bss:0040607B                 db    ? ;
.bss:0040607C                 db    ? ;
.bss:0040607D                 db    ? ;
.bss:0040607E                 db    ? ;
.bss:0040607F                 db    ? ;
.bss:00406080                 db    ? ;
.bss:00406081                 db    ? ;
.bss:00406082                 db    ? ;
.bss:00406083                 db    ? ;
.bss:00406084                 db    ? ;
.bss:00406085                 db    ? ;
.bss:00406086                 db    ? ;
.bss:00406087                 db    ? ;
.bss:00406088                 db    ? ;
.bss:00406089                 db    ? ;
.bss:0040608A                 db    ? ;
.bss:0040608B                 db    ? ;
.bss:0040608C                 db    ? ;
.bss:0040608D                 db    ? ;
.bss:0040608E                 db    ? ;
.bss:0040608F                 db    ? ;
.bss:00406090                 db    ? ;
.bss:00406091                 db    ? ;
.bss:00406092                 db    ? ;
.bss:00406093                 db    ? ;
.bss:00406094                 db    ? ;
.bss:00406095                 db    ? ;
.bss:00406096                 db    ? ;
.bss:00406097                 db    ? ;
.bss:00406098                 db    ? ;
.bss:00406099                 db    ? ;
.bss:0040609A                 db    ? ;
.bss:0040609B                 db    ? ;
.bss:0040609C                 db    ? ;
.bss:0040609D                 db    ? ;
.bss:0040609E                 db    ? ;
.bss:0040609F                 db    ? ;
.bss:004060A0                 db    ? ;
.bss:004060A1                 db    ? ;
.bss:004060A2                 db    ? ;
.bss:004060A3                 db    ? ;
.bss:004060A4                 db    ? ;
.bss:004060A5                 db    ? ;
.bss:004060A6                 db    ? ;
.bss:004060A7                 db    ? ;
.bss:004060A8                 db    ? ;
.bss:004060A9                 db    ? ;
.bss:004060AA                 db    ? ;
.bss:004060AB                 db    ? ;
.bss:004060AC                 db    ? ;
.bss:004060AD                 db    ? ;
.bss:004060AE                 db    ? ;
.bss:004060AF                 db    ? ;
.bss:004060B0                 db    ? ;
.bss:004060B1                 db    ? ;
.bss:004060B2                 db    ? ;
.bss:004060B3                 db    ? ;
.bss:004060B4                 db    ? ;
.bss:004060B5                 db    ? ;
.bss:004060B6                 db    ? ;
.bss:004060B7                 db    ? ;
.bss:004060B8                 db    ? ;
.bss:004060B9                 db    ? ;
.bss:004060BA                 db    ? ;
.bss:004060BB                 db    ? ;
.bss:004060BC                 db    ? ;
.bss:004060BD                 db    ? ;
.bss:004060BE                 db    ? ;
.bss:004060BF                 db    ? ;
.bss:004060C0                 db    ? ;
.bss:004060C1                 db    ? ;
.bss:004060C2                 db    ? ;
.bss:004060C3                 db    ? ;
.bss:004060C4                 db    ? ;
.bss:004060C5                 db    ? ;
.bss:004060C6                 db    ? ;
.bss:004060C7                 db    ? ;
.bss:004060C8                 db    ? ;
.bss:004060C9                 db    ? ;
.bss:004060CA                 db    ? ;
.bss:004060CB                 db    ? ;
.bss:004060CC                 db    ? ;
.bss:004060CD                 db    ? ;
.bss:004060CE                 db    ? ;
.bss:004060CF                 db    ? ;
.bss:004060D0                 db    ? ;
.bss:004060D1                 db    ? ;
.bss:004060D2                 db    ? ;
.bss:004060D3                 db    ? ;
.bss:004060D4                 db    ? ;
.bss:004060D5                 db    ? ;
.bss:004060D6                 db    ? ;
.bss:004060D7                 db    ? ;
.bss:004060D8                 db    ? ;
.bss:004060D9                 db    ? ;
.bss:004060DA                 db    ? ;
.bss:004060DB                 db    ? ;
.bss:004060DC                 db    ? ;
.bss:004060DD                 db    ? ;
.bss:004060DE                 db    ? ;
.bss:004060DF                 db    ? ;
.bss:004060E0                 db    ? ;
.bss:004060E1                 db    ? ;
.bss:004060E2                 db    ? ;
.bss:004060E3                 db    ? ;
.bss:004060E4                 db    ? ;
.bss:004060E5                 db    ? ;
.bss:004060E6                 db    ? ;
.bss:004060E7                 db    ? ;
.bss:004060E8                 db    ? ;
.bss:004060E9                 db    ? ;
.bss:004060EA                 db    ? ;
.bss:004060EB                 db    ? ;
.bss:004060EC                 db    ? ;
.bss:004060ED                 db    ? ;
.bss:004060EE                 db    ? ;
.bss:004060EF                 db    ? ;
.bss:004060F0                 db    ? ;
.bss:004060F1                 db    ? ;
.bss:004060F2                 db    ? ;
.bss:004060F3                 db    ? ;
.bss:004060F4                 db    ? ;
.bss:004060F5                 db    ? ;
.bss:004060F6                 db    ? ;
.bss:004060F7                 db    ? ;
.bss:004060F8                 db    ? ;
.bss:004060F9                 db    ? ;
.bss:004060FA                 db    ? ;
.bss:004060FB                 db    ? ;
.bss:004060FC                 db    ? ;
.bss:004060FD                 db    ? ;
.bss:004060FE                 db    ? ;
.bss:004060FF                 db    ? ;
.bss:00406100                 db    ? ;
.bss:00406101                 db    ? ;
.bss:00406102                 db    ? ;
.bss:00406103                 db    ? ;
.bss:00406104                 db    ? ;
.bss:00406105                 db    ? ;
.bss:00406106                 db    ? ;
.bss:00406107                 db    ? ;
.bss:00406108                 db    ? ;
.bss:00406109                 db    ? ;
.bss:0040610A                 db    ? ;
.bss:0040610B                 db    ? ;
.bss:0040610C                 db    ? ;
.bss:0040610D                 db    ? ;
.bss:0040610E                 db    ? ;
.bss:0040610F                 db    ? ;
.bss:00406110                 db    ? ;
.bss:00406111                 db    ? ;
.bss:00406112                 db    ? ;
.bss:00406113                 db    ? ;
.bss:00406114                 db    ? ;
.bss:00406115                 db    ? ;
.bss:00406116                 db    ? ;
.bss:00406117                 db    ? ;
.bss:00406118                 db    ? ;
.bss:00406119                 db    ? ;
.bss:0040611A                 db    ? ;
.bss:0040611B                 db    ? ;
.bss:0040611C                 db    ? ;
.bss:0040611D                 db    ? ;
.bss:0040611E                 db    ? ;
.bss:0040611F                 db    ? ;
.bss:00406120                 db    ? ;
.bss:00406121                 db    ? ;
.bss:00406122                 db    ? ;
.bss:00406123                 db    ? ;
.bss:00406124                 db    ? ;
.bss:00406125                 db    ? ;
.bss:00406126                 db    ? ;
.bss:00406127                 db    ? ;
.bss:00406128                 db    ? ;
.bss:00406129                 db    ? ;
.bss:0040612A                 db    ? ;
.bss:0040612B                 db    ? ;
.bss:0040612C                 db    ? ;
.bss:0040612D                 db    ? ;
.bss:0040612E                 db    ? ;
.bss:0040612F                 db    ? ;
.bss:00406130                 db    ? ;
.bss:00406131                 db    ? ;
.bss:00406132                 db    ? ;
.bss:00406133                 db    ? ;
.bss:00406134                 db    ? ;
.bss:00406135                 db    ? ;
.bss:00406136                 db    ? ;
.bss:00406137                 db    ? ;
.bss:00406138                 db    ? ;
.bss:00406139                 db    ? ;
.bss:0040613A                 db    ? ;
.bss:0040613B                 db    ? ;
.bss:0040613C                 db    ? ;
.bss:0040613D                 db    ? ;
.bss:0040613E                 db    ? ;
.bss:0040613F                 db    ? ;
.bss:00406140 dword_406140    dd ?                    ; DATA XREF: .text:loc_403A71↑o
.bss:00406140                                         ; .text:loc_403A90↑o ...
.bss:00406144 dword_406144    dd ?                    ; DATA XREF: .text:loc_403B10↑o
.bss:00406144                                         ; .text:00403F98↑r ...
.bss:00406148 dword_406148    dd ?                    ; DATA XREF: .text:00403F92↑r
.bss:00406148                                         ; sub_404040+2C↑r
.bss:0040614C dword_40614C    dd ?                    ; DATA XREF: .text:00403F86↑r
.bss:0040614C                                         ; sub_404040+22↑r
.bss:00406150 dword_406150    dd ?                    ; DATA XREF: .text:00403FA2↑r
.bss:00406150                                         ; sub_404040+36↑r
.bss:00406154 dword_406154    dd ?                    ; DATA XREF: .text:00403FB2↑r
.bss:00406154                                         ; sub_404040+4E↑r
.bss:00406158 dword_406158    dd ?                    ; DATA XREF: .text:00403FCF↑r
.bss:00406158                                         ; sub_404040+62↑r
.bss:0040615C dword_40615C    dd ?                    ; DATA XREF: .text:00403FC5↑r
.bss:0040615C                                         ; sub_404040+70↑r
.bss:00406160 dword_406160    dd ?                    ; DATA XREF: .text:00403FA8↑r
.bss:00406160                                         ; sub_404040+7A↑r
.bss:00406164                 align 10h
.bss:00406170 ; char *Str1
.bss:00406170 Str1            dd ?                    ; DATA XREF: sub_404734:loc_40476D↑w
.bss:00406170                                         ; sub_404734:loc_4048A0↑r
.bss:00406174                 align 10h
.bss:00406180 dword_406180    dd ?                    ; DATA XREF: sub_404734+2D↑r
.bss:00406180                                         ; sub_404734+3F↑w
.bss:00406184                 align 10h
.bss:00406190 dword_406190    dd ?                    ; DATA XREF: sub_401340+2E↑w
.bss:00406190                                         ; sub_401340+DD↑r ...
.bss:00406194                 db    ? ;
.bss:00406195                 db    ? ;
.bss:00406196                 db    ? ;
.bss:00406197                 db    ? ;
.bss:00406198                 db    ? ;
.bss:00406199                 db    ? ;
.bss:0040619A                 db    ? ;
.bss:0040619B                 db    ? ;
.bss:0040619C                 db    ? ;
.bss:0040619D                 db    ? ;
.bss:0040619E                 db    ? ;
.bss:0040619F                 db    ? ;
.bss:004061A0                 db    ? ;
.bss:004061A1                 db    ? ;
.bss:004061A2                 db    ? ;
.bss:004061A3                 db    ? ;
.bss:004061A4                 db    ? ;
.bss:004061A5                 db    ? ;
.bss:004061A6                 db    ? ;
.bss:004061A7                 db    ? ;
.bss:004061A8                 db    ? ;
.bss:004061A9                 db    ? ;
.bss:004061AA                 db    ? ;
.bss:004061AB                 db    ? ;
.bss:004061AC                 db    ? ;
.bss:004061AD                 db    ? ;
.bss:004061AE                 db    ? ;
.bss:004061AF                 db    ? ;
.bss:004061B0 dword_4061B0    dd ?                    ; DATA XREF: sub_402460+71↑w
.bss:004061B0                                         ; .text:00402561↑w
.bss:004061B4                 align 10h
.bss:004061C0 dword_4061C0    dd ?                    ; CODE XREF: sub_404734+63↑p
.bss:004061C0                                         ; DATA XREF: sub_404630+1E↑r ...
.bss:004061C4                 align 10h
.bss:004061D0 dword_4061D0    dd ?                    ; DATA XREF: sub_404630+4E↑w
.bss:004061D0                                         ; sub_404734+AB↑w
.bss:004061D4                 align 40h
.bss:00406200 dword_406200    dd ?                    ; DATA XREF: sub_404734+13↑r
.bss:00406204                 align 1000h
.bss:00406204 _bss            ends
.bss:00406204
.idata:00407000 ; Section 4. (virtual address 00007000)
.idata:00407000 ; Virtual size                  : 0000053C (   1340.)
.idata:00407000 ; Section size in file          : 00000600 (   1536.)
.idata:00407000 ; Offset to raw data for section: 00004400
.idata:00407000 ; Flags C0000040: Data Readable Writable
.idata:00407000 ; Alignment     : default
.idata:00407000 ; ===========================================================================
.idata:00407000
.idata:00407000 ; Segment type: Externs
.idata:00407000 ; _idata
.idata:00407000
.idata:00407001
.idata:00407138 ;
.idata:00407138 ; Imports from libintl3.dll
.idata:00407138 ;
.idata:00407138                 extrn __imp_libintl_bindtextdomain:dword
.idata:00407138                                         ; CODE XREF: sub_401340+48↑p
.idata:00407138                                         ; DATA XREF: sub_401340+48↑r ...
.idata:0040713C                 extrn libintl_gettext:dword
.idata:0040713C                                         ; CODE XREF: sub_401340+D1↑p
.idata:0040713C                                         ; sub_401340+11F↑p ...
.idata:00407140                 extrn libintl_textdomain:dword
.idata:00407140                                         ; CODE XREF: sub_401340+55↑p
.idata:00407140                                         ; DATA XREF: sub_401340+55↑r ...
.idata:00407144
.idata:0040714C ;
.idata:0040714C ; Imports from KERNEL32.dll
.idata:0040714C ;
.idata:0040714C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040714C                 extrn __imp_ExitProcess:dword
.idata:0040714C                                         ; DATA XREF: ExitProcess↑r
.idata:00407150 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00407150                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00407150                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00407154
.idata:0040715C ;
.idata:0040715C ; Imports from MSVCP60.DLL
.idata:0040715C ;
.idata:0040715C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040715C                 extrn __imp_mbrtowc:dword
.idata:0040715C                                         ; DATA XREF: mbrtowc↑r
.idata:00407160
.idata:00407168 ;
.idata:00407168 ; Imports from msvcrt.dll
.idata:00407168 ;
.idata:00407168                 extrn __imp___getmainargs:dword
.idata:00407168                                         ; DATA XREF: __getmainargs↑r
.idata:0040716C ; int _mb_cur_max
.idata:0040716C                 extrn __mb_cur_max:dword
.idata:0040716C                                         ; DATA XREF: sub_402FA0+7↑r
.idata:0040716C                                         ; sub_402FA0+5F3↑r
.idata:00407170 ; char ***(__cdecl *__p__environ)()
.idata:00407170                 extrn __imp___p__environ:dword
.idata:00407170                                         ; DATA XREF: __p__environ↑r
.idata:00407174 ; int *(__cdecl *__p__fmode)()
.idata:00407174                 extrn __imp___p__fmode:dword
.idata:00407174                                         ; DATA XREF: __p__fmode↑r
.idata:00407178 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00407178                 extrn __set_app_type:dword
.idata:00407178                                         ; CODE XREF: start+D↑p
.idata:00407178                                         ; .text:0040102D↑p
.idata:00407178                                         ; DATA XREF: ...
.idata:0040717C ; void (__cdecl *_cexit)()
.idata:0040717C                 extrn __imp__cexit:dword
.idata:0040717C                                         ; DATA XREF: _cexit↑r
.idata:00407180 ; int *(__cdecl *_errno)()
.idata:00407180                 extrn __imp__errno:dword
.idata:00407180                                         ; DATA XREF: _errno↑r
.idata:00407184 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00407184                 extrn __imp__flsbuf:dword
.idata:00407184                                         ; DATA XREF: _flsbuf↑r
.idata:00407188 ; int (__cdecl *_flushall)()
.idata:00407188                 extrn __imp__flushall:dword
.idata:00407188                                         ; DATA XREF: _flushall↑r
.idata:0040718C ; FILE iob[]
.idata:0040718C                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040718C                                         ; sub_401080+75↑r ...
.idata:00407190 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00407190                 extrn __imp__isctype:dword
.idata:00407190                                         ; DATA XREF: _isctype↑r
.idata:00407194 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00407194                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00407194                                         ; DATA XREF: .text:0040106C↑r
.idata:00407198 ; const unsigned __int16 *pctype
.idata:00407198                 extrn _pctype:dword     ; DATA XREF: sub_402FA0:loc_403694↑r
.idata:0040719C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040719C                 extrn __imp__setmode:dword
.idata:0040719C                                         ; DATA XREF: _setmode↑r
.idata:004071A0 ; void (__cdecl __noreturn *abort)()
.idata:004071A0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004071A4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004071A4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004071A4                                         ; DATA XREF: sub_401040+C↑r
.idata:004071A8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004071A8                 extrn __imp_calloc:dword
.idata:004071A8                                         ; DATA XREF: calloc↑r
.idata:004071AC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004071AC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004071B0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004071B0                 extrn __imp_fclose:dword
.idata:004071B0                                         ; DATA XREF: fclose↑r
.idata:004071B4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004071B4                 extrn __imp_fflush:dword
.idata:004071B4                                         ; DATA XREF: fflush↑r
.idata:004071B8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004071B8                 extrn __imp_fprintf:dword
.idata:004071B8                                         ; DATA XREF: fprintf↑r
.idata:004071BC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004071BC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004071C0 ; void (__cdecl *free)(void *Block)
.idata:004071C0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004071C4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004071C4                 extrn __imp_getenv:dword
.idata:004071C4                                         ; DATA XREF: getenv↑r
.idata:004071C8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004071C8                 extrn __imp_iswctype:dword
.idata:004071C8                                         ; DATA XREF: iswctype↑r
.idata:004071CC ; void *(__cdecl *malloc)(size_t Size)
.idata:004071CC                 extrn __imp_malloc:dword
.idata:004071CC                                         ; DATA XREF: malloc↑r
.idata:004071D0 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004071D0                 extrn __imp_memcpy:dword
.idata:004071D0                                         ; DATA XREF: memcpy↑r
.idata:004071D4 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004071D4                 extrn __imp_memset:dword
.idata:004071D4                                         ; DATA XREF: memset↑r
.idata:004071D8 ; int (*printf)(const char *const Format, ...)
.idata:004071D8                 extrn __imp_printf:dword
.idata:004071D8                                         ; DATA XREF: printf↑r
.idata:004071DC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004071DC                 extrn __imp_realloc:dword
.idata:004071DC                                         ; DATA XREF: realloc↑r
.idata:004071E0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004071E0                 extrn __imp_setlocale:dword
.idata:004071E0                                         ; DATA XREF: setlocale↑r
.idata:004071E4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004071E4                 extrn __imp_signal:dword
.idata:004071E4                                         ; DATA XREF: signal↑r
.idata:004071E8 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004071E8                 extrn __imp_strchr:dword
.idata:004071E8                                         ; DATA XREF: strchr↑r
.idata:004071EC ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004071EC                 extrn __imp_strcmp:dword
.idata:004071EC                                         ; DATA XREF: strcmp↑r
.idata:004071F0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004071F0                 extrn __imp_strerror:dword
.idata:004071F0                                         ; DATA XREF: strerror↑r
.idata:004071F4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004071F4                 extrn __imp_strlen:dword
.idata:004071F4                                         ; DATA XREF: strlen↑r
.idata:004071F8 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004071F8                 extrn __imp_strncmp:dword
.idata:004071F8                                         ; DATA XREF: strncmp↑r
.idata:004071FC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004071FC                 extrn __imp_vfprintf:dword
.idata:004071FC                                         ; DATA XREF: vfprintf↑r
.idata:00407200
.idata:00407200
.idata:00407200
.idata:00407200                 end start
