.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : E4BE668A8D0795E9D522B12F2E1B09476E9FF80E62C43267E15DE6373ABE1A91
.text:00401000 ; Input MD5    : 554E518E415888B9176797EB96B44412
.text:00401000 ; Input CRC32  : 0499709E
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/factor.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A268 (Wed Apr 20 18:41:44 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00005CB0 (  23728.)
.text:00401000 ; Section size in file          : 00005E00 (  24064.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401560+63↓p
.text:00401040                                         ; .text:00406290↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_406230
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_407000
.text:004010A2                 mov     edx, dword_407050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_407004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_407070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_407070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_406200
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_407000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_407004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401560
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_406230
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 dword_401280    dd 4020201h             ; DATA XREF: sub_401D10+D↓o
.text:00401284                 db 2
.text:00401285                 db 4, 2, 4              ; DATA XREF: sub_401D10:loc_401ED8↓o
.text:00401288                 dd 4060206h, 6060402h, 2040602h, 8060406h, 2040204h, 6040E04h
.text:00401288                 dd 6020A02h, 4020406h, 20A0206h, 0A0C0204h, 4020402h, 4060206h
.text:00401288                 dd 2060606h, 6020406h, 4080604h, 8060402h, 4020A06h, 6060206h
.text:00401288                 dd 6040204h, 2040602h, 0A020A06h, 4020402h, 2040806h, 6020C04h
.text:00401288                 dd 4060204h, 4020C06h, 6080402h, 4020604h, 0A060206h, 2060402h
.text:00401288                 dd 4020406h, 0A020A02h, 6060402h, 4060602h, 6020606h, 4060204h
.text:00401288                 dd 2040806h, 6080406h, 4020604h, 4060806h, 6020A02h, 2040204h
.text:00401288                 dd 20A020Ah, 8040204h, 4020406h, 6020606h, 6040804h, 4020408h
.text:00401288                 dd 6080402h, 6060604h, 4060602h, 2060402h, 4020406h, 0A020A02h
.text:00401288                 dd 6040602h, 2040602h, 8060604h, 0A060204h, 4020408h, 0A080402h
.text:00401288                 dd 8040206h, 2040606h, 6020604h, 0A020604h, 4020A02h, 2060402h
.text:00401288                 dd 4020406h, 6020606h, 6040606h, 4020408h, 6080402h, 6040804h
.text:00401288                 dd 4060602h, 8060402h, 2040204h, 20A020Ah, 6040204h, 4020A02h
.text:00401288                 dd 4060806h, 6040602h, 2060408h, 4060804h, 6040206h, 4060602h
.text:00401288                 dd 6020606h, 0A020406h, 4020A02h, 2060402h, 0A020406h
.text:00401288                 dd 4060206h, 6040602h, 4020408h, 4060C02h, 6040206h, 2040C02h
.text:00401288                 dd 4060804h, 0A020402h, 2060A02h, 6020604h, 6040204h, 4060206h
.text:00401288                 dd 8060A02h, 4020406h, 6040608h, 2060402h, 4060606h, 4060206h
.text:00401288                 dd 0A020402h, 204020Ch, 406020Ah, 6060402h, 6020A02h, 2040E04h
.text:00401288                 dd 8040204h, 2060406h, 6020604h, 4020406h, 4060206h, 20C0402h
.text:00401464                 db 0Ch
.text:00401465 ; const char Str
.text:00401465 Str             db 0                    ; DATA XREF: sub_401560+20↓o
.text:00401465                                         ; sub_401560+C0↓o ...
.text:00401466                 align 20h
.text:00401480 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401480                                         ; DATA XREF: sub_401560+3A↓o
.text:004014A3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401560+42↓o
.text:004014A3                                         ; sub_401560+4F↓o
.text:004014AD aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: sub_401560+76↓o
.text:004014B8 a530            db '5.3.0',0            ; DATA XREF: sub_401560+8D↓o
.text:004014BE aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401560+95↓o
.text:004014CC ; const FILE stru_4014CC
.text:004014CC stru_4014CC     FILE <74636166h, 2500726Fh, 20003A73h, 90007325h, 26748Dh, 27732560h, \
.text:004014CC                                         ; DATA XREF: sub_401560+9D↓o
.text:004014CC                                         ; sub_401560+18C↓o ...
.text:004014CC                       20736920h, 20746F6Eh>
.text:004014EC                 db  61h ; a
.text:004014ED                 db  20h
.text:004014EE                 db  76h ; v
.text:004014EF                 db  61h ; a
.text:004014F0                 db  6Ch ; l
.text:004014F1                 db  69h ; i
.text:004014F2                 db  64h ; d
.text:004014F3                 db  20h
.text:004014F4                 db  70h ; p
.text:004014F5                 db  6Fh ; o
.text:004014F6                 db  73h ; s
.text:004014F7                 db  69h ; i
.text:004014F8                 db  74h ; t
.text:004014F9                 db  69h ; i
.text:004014FA                 db  76h ; v
.text:004014FB                 db  65h ; e
.text:004014FC                 db  20h
.text:004014FD                 db  69h ; i
.text:004014FE                 db  6Eh ; n
.text:004014FF                 db  74h ; t
.text:00401500                 db  65h ; e
.text:00401501                 db  67h ; g
.text:00401502                 db  65h ; e
.text:00401503                 db  72h ; r
.text:00401504                 db    0
.text:00401505                 align 20h
.text:00401520 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401520                                         ; DATA XREF: sub_401560:loc_4017BD↓o
.text:00401520                                         ; sub_401BB0+F↓o
.text:00401547 aSIsTooLarge    db '`%s',27h,' is too large',0
.text:00401547                                         ; DATA XREF: sub_401560:loc_4017F5↓o
.text:00401547                                         ; sub_401560:loc_4018BB↓o
.text:00401559 asc_401559      db 0Ah                  ; DATA XREF: sub_401560+2CB↓o
.text:00401559                 db 9,' ',0
.text:0040155D                 align 10h
.text:00401560
.text:00401560 ; =============== S U B R O U T I N E =======================================
.text:00401560
.text:00401560 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401560
.text:00401560 sub_401560      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401560
.text:00401560 Category        = dword ptr -898h
.text:00401560 Locale          = dword ptr -894h
.text:00401560 var_890         = dword ptr -890h
.text:00401560 var_88C         = byte ptr -88Ch
.text:00401560 Str             = dword ptr -888h
.text:00401560 var_884         = dword ptr -884h
.text:00401560 var_880         = byte ptr -880h
.text:00401560 var_87C         = dword ptr -87Ch
.text:00401560 var_872         = byte ptr -872h
.text:00401560 var_871         = byte ptr -871h
.text:00401560 var_870         = dword ptr -870h
.text:00401560 var_86C         = dword ptr -86Ch
.text:00401560 var_868         = dword ptr -868h
.text:00401560 var_864         = dword ptr -864h
.text:00401560 var_860         = dword ptr -860h
.text:00401560 Block           = dword ptr -85Ch
.text:00401560 var_858         = byte ptr -858h
.text:00401560 var_838         = dword ptr -838h
.text:00401560 var_834         = dword ptr -834h
.text:00401560 var_438         = byte ptr -438h
.text:00401560 var_418         = dword ptr -418h
.text:00401560 var_414         = dword ptr -414h
.text:00401560 arg_0           = dword ptr  8
.text:00401560 arg_4           = dword ptr  0Ch
.text:00401560
.text:00401560                 push    ebp
.text:00401561                 xor     eax, eax
.text:00401563                 mov     ebp, esp
.text:00401565                 push    edi
.text:00401566                 push    esi
.text:00401567                 push    ebx
.text:00401568                 sub     esp, 88Ch
.text:0040156E                 and     esp, 0FFFFFFF0h
.text:00401571                 call    __alloca
.text:00401576                 call    sub_4062D0
.text:0040157B                 mov     esi, [ebp+arg_4]
.text:0040157E                 mov     ebx, [esi]
.text:00401580                 mov     [esp+898h+Locale], offset Str ; Locale
.text:00401588                 mov     [esp+898h+Category], 0 ; Category
.text:0040158F                 mov     ds:dword_4082A0, ebx
.text:00401595                 call    setlocale
.text:0040159A                 mov     [esp+898h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004015A2                 mov     [esp+898h+Category], offset aCoreutils ; "coreutils"
.text:004015A9                 call    ds:__imp_libintl_bindtextdomain
.text:004015AF                 mov     [esp+898h+Category], offset aCoreutils ; "coreutils"
.text:004015B6                 call    ds:libintl_textdomain
.text:004015BC                 mov     [esp+898h+Category], offset sub_4031B0 ; void (__cdecl *)()
.text:004015C3                 call    sub_401040
.text:004015C8                 mov     [esp+898h+var_87C], 0
.text:004015D0                 mov     ecx, [ebp+arg_4]
.text:004015D3                 mov     eax, [ebp+arg_0]
.text:004015D6                 mov     dword ptr [esp+898h+var_880], offset aPaulRubin ; "Paul Rubin"
.text:004015DE                 mov     [esp+898h+Locale], ecx ; int
.text:004015E2                 mov     [esp+898h+Category], eax ; int
.text:004015E5                 mov     [esp+898h+var_884], offset sub_401BB0 ; int
.text:004015ED                 mov     [esp+898h+Str], offset a530 ; "5.3.0"
.text:004015F5                 mov     dword ptr [esp+898h+var_88C], offset aGnuCoreutils ; "GNU coreutils"
.text:004015FD                 mov     [esp+898h+var_890], offset stru_4014CC ; FILE *
.text:00401605                 call    sub_4030C0
.text:0040160A                 mov     [esp+898h+Str], 0 ; int
.text:00401612                 mov     edx, [ebp+arg_4]
.text:00401615                 mov     eax, [ebp+arg_0]
.text:00401618                 mov     dword ptr [esp+898h+var_88C], 0 ; int
.text:00401620                 mov     [esp+898h+var_890], offset Str ; char *
.text:00401628                 mov     [esp+898h+Locale], edx ; int
.text:0040162C                 mov     [esp+898h+Category], eax ; int
.text:0040162F                 call    sub_402F20
.text:00401634                 inc     eax
.text:00401635                 jnz     loc_4017BD
.text:0040163B                 mov     eax, dword_407010
.text:00401640                 cmp     [ebp+arg_0], eax
.text:00401643                 jle     loc_4017FE
.text:00401649                 cmp     eax, [ebp+arg_0]
.text:0040164C                 mov     edi, eax
.text:0040164E                 jge     loc_401726
.text:00401654                 lea     esi, [esi+0]
.text:0040165A                 lea     edi, [edi+0]
.text:00401660
.text:00401660 loc_401660:                             ; CODE XREF: sub_401560+1C0↓j
.text:00401660                 mov     eax, [ebp+arg_4]
.text:00401663                 lea     esi, [ebp+var_870]
.text:00401669                 mov     ebx, [eax+edi*4]
.text:0040166C                 mov     [esp+898h+Str], offset Str ; Str
.text:00401674                 mov     dword ptr [esp+898h+var_88C], esi ; int
.text:00401678                 mov     [esp+898h+var_890], 0Ah ; int
.text:00401680                 mov     [esp+898h+Locale], 0 ; int
.text:00401688                 mov     [esp+898h+Category], ebx ; int
.text:0040168B                 call    sub_4036A0
.text:00401690                 test    eax, eax
.text:00401692                 jnz     loc_401791
.text:00401698                 mov     [esp+898h+var_890], 80h ; '€'
.text:004016A0                 mov     ecx, [ebp+var_870]
.text:004016A6                 lea     ebx, [ebp+var_838]
.text:004016AC                 mov     dword ptr [esp+898h+var_88C], ebx
.text:004016B0                 mov     esi, [ebp+var_86C]
.text:004016B6                 mov     [esp+898h+Category], ecx
.text:004016B9                 mov     [esp+898h+Locale], esi
.text:004016BD                 call    sub_401D10
.text:004016C2                 mov     edx, [ebp+var_870]
.text:004016C8                 mov     esi, eax
.text:004016CA                 lea     eax, [ebp+var_858]
.text:004016D0                 mov     [esp+898h+var_890], eax
.text:004016D4                 mov     ebx, [ebp+var_86C]
.text:004016DA                 mov     [esp+898h+Category], edx
.text:004016DD                 mov     [esp+898h+Locale], ebx
.text:004016E1                 xor     ebx, ebx
.text:004016E3                 call    sub_4035C0
.text:004016E8                 mov     [esp+898h+Locale], eax
.text:004016EC                 mov     [esp+898h+Category], (offset stru_4014CC._cnt+3) ; Format
.text:004016F3                 call    printf
.text:004016F8                 cmp     ebx, esi
.text:004016FA                 jb      short loc_401753
.text:004016FC
.text:004016FC loc_4016FC:                             ; CODE XREF: sub_401560+22C↓j
.text:004016FC                 mov     ebx, ds:_iob
.text:00401702                 mov     esi, [ebx+24h]
.text:00401705                 dec     esi
.text:00401706                 mov     [ebx+24h], esi
.text:00401709                 test    esi, esi
.text:0040170B                 js      short loc_401738
.text:0040170D                 mov     ecx, ds:_iob
.text:00401713                 mov     eax, [ecx+20h]
.text:00401716                 mov     byte ptr [eax], 0Ah
.text:00401719                 inc     dword ptr [ecx+20h]
.text:0040171C
.text:0040171C loc_40171C:                             ; CODE XREF: sub_401560+1F1↓j
.text:0040171C                 inc     edi
.text:0040171D                 cmp     edi, [ebp+arg_0]
.text:00401720                 jl      loc_401660
.text:00401726
.text:00401726 loc_401726:                             ; CODE XREF: sub_401560+EE↑j
.text:00401726                 mov     al, 1
.text:00401728
.text:00401728 loc_401728:                             ; CODE XREF: sub_401560+46D↓j
.text:00401728                 test    al, al
.text:0040172A                 setz    bl
.text:0040172D                 movzx   edi, bl
.text:00401730                 mov     [esp+898h+Category], edi ; Code
.text:00401733
.text:00401733 loc_401733:                             ; CODE XREF: sub_401560+290↓j
.text:00401733                 call    exit
.text:00401738 ; ---------------------------------------------------------------------------
.text:00401738
.text:00401738 loc_401738:                             ; CODE XREF: sub_401560+1AB↑j
.text:00401738                 mov     [esp+898h+Category], 0Ah ; Ch
.text:0040173F                 mov     edx, ds:_iob
.text:00401745                 add     edx, 20h ; ' '
.text:00401748                 mov     [esp+898h+Locale], edx ; File
.text:0040174C                 call    _flsbuf
.text:00401751                 jmp     short loc_40171C
.text:00401753 ; ---------------------------------------------------------------------------
.text:00401753
.text:00401753 loc_401753:                             ; CODE XREF: sub_401560+19A↑j
.text:00401753                                         ; sub_401560+22A↓j
.text:00401753                 lea     ecx, [ebp+var_858]
.text:00401759                 mov     edx, [ebp+ebx*8+var_838]
.text:00401760                 mov     [esp+898h+var_890], ecx
.text:00401764                 mov     ecx, [ebp+ebx*8+var_834]
.text:0040176B                 inc     ebx
.text:0040176C                 mov     [esp+898h+Category], edx
.text:0040176F                 mov     [esp+898h+Locale], ecx
.text:00401773                 call    sub_4035C0
.text:00401778                 mov     [esp+898h+Locale], eax
.text:0040177C                 mov     [esp+898h+Category], (offset stru_4014CC._base+3) ; Format
.text:00401783                 call    printf
.text:00401788                 cmp     ebx, esi
.text:0040178A                 jb      short loc_401753
.text:0040178C                 jmp     loc_4016FC
.text:00401791 ; ---------------------------------------------------------------------------
.text:00401791
.text:00401791 loc_401791:                             ; CODE XREF: sub_401560+132↑j
.text:00401791                 dec     eax
.text:00401792                 jz      short loc_4017F5
.text:00401794                 mov     [esp+898h+Category], offset stru_4014CC._charbuf
.text:0040179B
.text:0040179B loc_40179B:                             ; CODE XREF: sub_401560+29C↓j
.text:0040179B                 call    ds:libintl_gettext
.text:004017A1                 mov     dword ptr [esp+898h+var_88C], ebx ; char
.text:004017A5                 mov     [esp+898h+Locale], 0 ; ErrorMessage
.text:004017AD                 mov     [esp+898h+Category], 0 ; Code
.text:004017B4                 mov     [esp+898h+var_890], eax ; char *
.text:004017B8                 call    sub_405F50
.text:004017BD
.text:004017BD loc_4017BD:                             ; CODE XREF: sub_401560+D5↑j
.text:004017BD                 mov     [esp+898h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017C4                 call    ds:libintl_gettext
.text:004017CA                 mov     edi, ds:_iob
.text:004017D0                 mov     ecx, ds:dword_4082A0
.text:004017D6                 add     edi, 40h ; '@'
.text:004017D9                 mov     [esp+898h+var_890], ecx
.text:004017DD                 mov     [esp+898h+Locale], eax ; Format
.text:004017E1                 mov     [esp+898h+Category], edi ; Stream
.text:004017E4                 call    fprintf
.text:004017E9                 mov     [esp+898h+Category], 1
.text:004017F0                 jmp     loc_401733
.text:004017F5 ; ---------------------------------------------------------------------------
.text:004017F5
.text:004017F5 loc_4017F5:                             ; CODE XREF: sub_401560+232↑j
.text:004017F5                 mov     [esp+898h+Category], offset aSIsTooLarge ; "`%s' is too large"
.text:004017FC                 jmp     short loc_40179B
.text:004017FE ; ---------------------------------------------------------------------------
.text:004017FE
.text:004017FE loc_4017FE:                             ; CODE XREF: sub_401560+E3↑j
.text:004017FE                 mov     [ebp+var_871], 1
.text:00401805                 lea     edi, [ebp+var_860]
.text:0040180B                 mov     [esp+898h+Category], edi
.text:0040180E                 call    sub_4035A0
.text:00401813
.text:00401813 loc_401813:                             ; CODE XREF: sub_401560+356↓j
.text:00401813                 mov     [esp+898h+var_890], 3 ; int
.text:0040181B                 mov     edx, ds:_iob
.text:00401821                 lea     eax, [ebp+var_860]
.text:00401827                 mov     dword ptr [esp+898h+var_88C], eax ; int
.text:0040182B                 mov     [esp+898h+Locale], offset asc_401559 ; "\n\t "
.text:00401833                 mov     [esp+898h+Category], edx ; FILE *
.text:00401836                 call    sub_403290
.text:0040183B                 inc     eax
.text:0040183C                 jz      loc_4019B8
.text:00401842                 mov     [ebp+var_872], 0
.text:00401849                 mov     ebx, [ebp+Block]
.text:0040184F                 lea     ecx, [ebp+var_868]
.text:00401855                 mov     [esp+898h+Str], offset Str ; Str
.text:0040185D                 mov     dword ptr [esp+898h+var_88C], ecx ; int
.text:00401861                 mov     [esp+898h+var_890], 0Ah ; int
.text:00401869                 mov     [esp+898h+Locale], 0 ; int
.text:00401871                 mov     [esp+898h+Category], ebx ; int
.text:00401874                 call    sub_4036A0
.text:00401879                 test    eax, eax
.text:0040187B                 jz      short loc_4018C4
.text:0040187D                 dec     eax
.text:0040187E                 jz      short loc_4018BB
.text:00401880                 mov     [esp+898h+Category], offset stru_4014CC._charbuf
.text:00401887
.text:00401887 loc_401887:                             ; CODE XREF: sub_401560+362↓j
.text:00401887                 call    ds:libintl_gettext
.text:0040188D                 mov     dword ptr [esp+898h+var_88C], ebx ; char
.text:00401891                 mov     [esp+898h+Locale], 0 ; ErrorMessage
.text:00401899                 mov     [esp+898h+Category], 0 ; Code
.text:004018A0                 mov     [esp+898h+var_890], eax ; char *
.text:004018A4                 call    sub_405F50
.text:004018A9
.text:004018A9 loc_4018A9:                             ; CODE XREF: sub_401560+3EF↓j
.text:004018A9                                         ; sub_401560+3FC↓j
.text:004018A9                 movzx   edx, [ebp+var_872]
.text:004018B0                 mov     [ebp+var_871], dl
.text:004018B6                 jmp     loc_401813
.text:004018BB ; ---------------------------------------------------------------------------
.text:004018BB
.text:004018BB loc_4018BB:                             ; CODE XREF: sub_401560+31E↑j
.text:004018BB                 mov     [esp+898h+Category], offset aSIsTooLarge ; "`%s' is too large"
.text:004018C2                 jmp     short loc_401887
.text:004018C4 ; ---------------------------------------------------------------------------
.text:004018C4
.text:004018C4 loc_4018C4:                             ; CODE XREF: sub_401560+31B↑j
.text:004018C4                 mov     [esp+898h+var_890], 80h ; '€'
.text:004018CC                 mov     edi, [ebp+var_868]
.text:004018D2                 lea     ecx, [ebp+var_418]
.text:004018D8                 mov     dword ptr [esp+898h+var_88C], ecx
.text:004018DC                 mov     esi, [ebp+var_864]
.text:004018E2                 mov     [esp+898h+Category], edi
.text:004018E5                 lea     edi, [ebp+var_438]
.text:004018EB                 mov     [esp+898h+Locale], esi
.text:004018EF                 call    sub_401D10
.text:004018F4                 mov     [esp+898h+var_890], edi
.text:004018F8                 mov     edx, [ebp+var_868]
.text:004018FE                 mov     esi, eax
.text:00401900                 mov     ebx, [ebp+var_864]
.text:00401906                 mov     [esp+898h+Category], edx
.text:00401909                 mov     [esp+898h+Locale], ebx
.text:0040190D                 xor     ebx, ebx
.text:0040190F                 call    sub_4035C0
.text:00401914                 mov     [esp+898h+Locale], eax
.text:00401918                 mov     [esp+898h+Category], (offset stru_4014CC._cnt+3) ; Format
.text:0040191F                 call    printf
.text:00401924                 cmp     ebx, esi
.text:00401926                 jb      short loc_401980
.text:00401928
.text:00401928 loc_401928:                             ; CODE XREF: sub_401560+453↓j
.text:00401928                 mov     esi, ds:_iob
.text:0040192E                 mov     ebx, [esi+24h]
.text:00401931                 dec     ebx
.text:00401932                 mov     [esi+24h], ebx
.text:00401935                 test    ebx, ebx
.text:00401937                 js      short loc_401961
.text:00401939                 mov     edi, ds:_iob
.text:0040193F                 mov     eax, [edi+20h]
.text:00401942                 mov     byte ptr [eax], 0Ah
.text:00401945                 inc     dword ptr [edi+20h]
.text:00401948
.text:00401948 loc_401948:                             ; CODE XREF: sub_401560+41A↓j
.text:00401948                 cmp     [ebp+var_871], 0
.text:0040194F                 jz      loc_4018A9
.text:00401955                 mov     [ebp+var_872], 1
.text:0040195C                 jmp     loc_4018A9
.text:00401961 ; ---------------------------------------------------------------------------
.text:00401961
.text:00401961 loc_401961:                             ; CODE XREF: sub_401560+3D7↑j
.text:00401961                 mov     [esp+898h+Category], 0Ah ; Ch
.text:00401968                 mov     ecx, ds:_iob
.text:0040196E                 add     ecx, 20h ; ' '
.text:00401971                 mov     [esp+898h+Locale], ecx ; File
.text:00401975                 call    _flsbuf
.text:0040197A                 jmp     short loc_401948
.text:0040197A ; ---------------------------------------------------------------------------
.text:0040197C                 align 10h
.text:00401980
.text:00401980 loc_401980:                             ; CODE XREF: sub_401560+3C6↑j
.text:00401980                                         ; sub_401560+451↓j
.text:00401980                 mov     [esp+898h+var_890], edi
.text:00401984                 mov     edx, [ebp+ebx*8+var_418]
.text:0040198B                 mov     ecx, [ebp+ebx*8+var_414]
.text:00401992                 inc     ebx
.text:00401993                 mov     [esp+898h+Category], edx
.text:00401996                 mov     [esp+898h+Locale], ecx
.text:0040199A                 call    sub_4035C0
.text:0040199F                 mov     [esp+898h+Locale], eax
.text:004019A3                 mov     [esp+898h+Category], (offset stru_4014CC._base+3) ; Format
.text:004019AA                 call    printf
.text:004019AF                 cmp     ebx, esi
.text:004019B1                 jb      short loc_401980
.text:004019B3                 jmp     loc_401928
.text:004019B8 ; ---------------------------------------------------------------------------
.text:004019B8
.text:004019B8 loc_4019B8:                             ; CODE XREF: sub_401560+2DC↑j
.text:004019B8                 mov     ebx, [ebp+Block]
.text:004019BE                 mov     [esp+898h+Category], ebx ; Block
.text:004019C1                 call    free
.text:004019C6                 movzx   eax, [ebp+var_871]
.text:004019CD                 jmp     loc_401728
.text:004019CD sub_401560      endp
.text:004019CD
.text:004019CD ; ---------------------------------------------------------------------------
.text:004019D2                 align 10h
.text:004019E0 aUsageSNumberOr db 'Usage: %s [NUMBER]...',0Ah
.text:004019E0                                         ; DATA XREF: sub_401BB0:loc_401BF3↓o
.text:004019E0                 db '  or:  %s OPTION',0Ah,0
.text:00401A08                 align 20h
.text:00401A20 aPrintThePrimeF_0 db 'Print the prime factors of each NUMBER.',0Ah
.text:00401A20                                         ; DATA XREF: sub_401BB0+66↓o
.text:00401A20                 db 0Ah,0
.text:00401A4A                 align 20h
.text:00401A60 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401A60                                         ; DATA XREF: sub_401BB0+88↓o
.text:00401A8D                 align 20h
.text:00401AA0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401AA0                                         ; DATA XREF: sub_401BB0+AA↓o
.text:00401AD6                 align 10h
.text:00401AE0 aPrintThePrimeF db 0Ah                  ; DATA XREF: sub_401BB0+CC↓o
.text:00401AE0                 db '  Print the prime factors of all specified integer NUMBERs.  If n'
.text:00401AE0                 db 'o arguments',0Ah
.text:00401AE0                 db '  are specified on the command line, they are read from standard '
.text:00401AE0                 db 'input.',0Ah,0
.text:00401B77 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401BB0+EE↓o
.text:00401B77                 db 'Report bugs to <%s>.',0Ah,0
.text:00401B8E aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401B8E                                         ; DATA XREF: sub_401BB0+FB↓o
.text:00401BA4                 align 10h
.text:00401BB0
.text:00401BB0 ; =============== S U B R O U T I N E =======================================
.text:00401BB0
.text:00401BB0 ; Attributes: noreturn
.text:00401BB0
.text:00401BB0 ; void __cdecl __noreturn sub_401BB0(int Code)
.text:00401BB0 sub_401BB0      proc near               ; DATA XREF: sub_401560+85↑o
.text:00401BB0
.text:00401BB0 Stream          = dword ptr -1Ch
.text:00401BB0 Format          = dword ptr -18h
.text:00401BB0 var_14          = dword ptr -14h
.text:00401BB0 var_4           = dword ptr -4
.text:00401BB0 Code            = dword ptr  4
.text:00401BB0
.text:00401BB0                 sub     esp, 1Ch
.text:00401BB3                 mov     [esp+1Ch+var_4], ebx
.text:00401BB7                 mov     ebx, [esp+1Ch+Code]
.text:00401BBB                 test    ebx, ebx
.text:00401BBD                 jz      short loc_401BF3
.text:00401BBF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401BC6                 call    ds:libintl_gettext
.text:00401BCC                 mov     edx, ds:_iob
.text:00401BD2                 mov     ecx, ds:dword_4082A0
.text:00401BD8                 add     edx, 40h ; '@'
.text:00401BDB                 mov     [esp+1Ch+var_14], ecx
.text:00401BDF                 mov     [esp+1Ch+Format], eax ; Format
.text:00401BE3                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401BE6                 call    fprintf
.text:00401BEB
.text:00401BEB loc_401BEB:                             ; CODE XREF: sub_401BB0+10B↓j
.text:00401BEB                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00401BEE                 call    exit
.text:00401BF3 ; ---------------------------------------------------------------------------
.text:00401BF3
.text:00401BF3 loc_401BF3:                             ; CODE XREF: sub_401BB0+D↑j
.text:00401BF3                 mov     [esp+1Ch+Stream], offset aUsageSNumberOr ; "Usage: %s [NUMBER]...\n  or:  %s OPTION"...
.text:00401BFA                 call    ds:libintl_gettext
.text:00401C00                 mov     ecx, ds:dword_4082A0
.text:00401C06                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401C09                 mov     [esp+1Ch+var_14], ecx
.text:00401C0D                 mov     [esp+1Ch+Format], ecx
.text:00401C11                 call    printf
.text:00401C16                 mov     [esp+1Ch+Stream], offset aPrintThePrimeF_0 ; "Print the prime factors of each NUMBER."...
.text:00401C1D                 call    ds:libintl_gettext
.text:00401C23                 mov     ecx, ds:_iob
.text:00401C29                 add     ecx, 20h ; ' '
.text:00401C2C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401C30                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401C33                 call    fputs
.text:00401C38                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401C3F                 call    ds:libintl_gettext
.text:00401C45                 mov     ecx, ds:_iob
.text:00401C4B                 add     ecx, 20h ; ' '
.text:00401C4E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401C52                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401C55                 call    fputs
.text:00401C5A                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401C61                 call    ds:libintl_gettext
.text:00401C67                 mov     ecx, ds:_iob
.text:00401C6D                 add     ecx, 20h ; ' '
.text:00401C70                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401C74                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401C77                 call    fputs
.text:00401C7C                 mov     [esp+1Ch+Stream], offset aPrintThePrimeF ; "\n  Print the prime factors of all spec"...
.text:00401C83                 call    ds:libintl_gettext
.text:00401C89                 mov     ecx, ds:_iob
.text:00401C8F                 add     ecx, 20h ; ' '
.text:00401C92                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401C96                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401C99                 call    fputs
.text:00401C9E                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401CA5                 call    ds:libintl_gettext
.text:00401CAB                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401CB3                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401CB6                 call    printf
.text:00401CBB                 jmp     loc_401BEB
.text:00401CBB sub_401BB0      endp
.text:00401CBB
.text:00401CBB ; ---------------------------------------------------------------------------
.text:00401CC0 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/factor.c',0
.text:00401CC0                                         ; DATA XREF: sub_401D10:loc_401EC4↓o
.text:00401CE7 aNFactorsMaxNFa db 'n_factors < max_n_factors',0
.text:00401CE7                                         ; DATA XREF: sub_401D10+1BC↓o
.text:00401D01 ; ---------------------------------------------------------------------------
.text:00401D01                 jmp     short sub_401D10
.text:00401D01 ; ---------------------------------------------------------------------------
.text:00401D03                 align 10h
.text:00401D10
.text:00401D10 ; =============== S U B R O U T I N E =======================================
.text:00401D10
.text:00401D10
.text:00401D10 sub_401D10      proc near               ; CODE XREF: sub_401560+15D↑p
.text:00401D10                                         ; sub_401560+38F↑p ...
.text:00401D10
.text:00401D10 var_4C          = dword ptr -4Ch
.text:00401D10 var_48          = dword ptr -48h
.text:00401D10 var_44          = dword ptr -44h
.text:00401D10 var_40          = dword ptr -40h
.text:00401D10 var_3C          = dword ptr -3Ch
.text:00401D10 var_38          = dword ptr -38h
.text:00401D10 var_30          = dword ptr -30h
.text:00401D10 var_2C          = dword ptr -2Ch
.text:00401D10 var_28          = dword ptr -28h
.text:00401D10 var_24          = dword ptr -24h
.text:00401D10 var_20          = dword ptr -20h
.text:00401D10 var_1C          = dword ptr -1Ch
.text:00401D10 var_18          = dword ptr -18h
.text:00401D10 arg_0           = dword ptr  4
.text:00401D10 arg_4           = dword ptr  8
.text:00401D10 arg_8           = dword ptr  0Ch
.text:00401D10 arg_C           = dword ptr  10h
.text:00401D10
.text:00401D10                 push    ebp
.text:00401D11                 xor     ebp, ebp
.text:00401D13                 push    edi
.text:00401D14                 push    esi
.text:00401D15                 push    ebx
.text:00401D16                 sub     esp, 3Ch
.text:00401D19                 mov     ecx, [esp+4Ch+arg_4]
.text:00401D1D                 mov     [esp+4Ch+var_30], offset dword_401280
.text:00401D25                 mov     edx, [esp+4Ch+arg_0]
.text:00401D29                 mov     [esp+4Ch+var_20], ecx
.text:00401D2D                 cmp     [esp+4Ch+var_20], 0
.text:00401D32                 mov     [esp+4Ch+var_1C], edx
.text:00401D36                 mov     [esp+4Ch+var_18], ecx
.text:00401D3A                 mov     [esp+4Ch+var_24], edx
.text:00401D3E                 ja      short loc_401D4D
.text:00401D40                 xor     eax, eax
.text:00401D42                 cmp     [esp+4Ch+var_24], 1
.text:00401D47                 jbe     loc_401EB4
.text:00401D4D
.text:00401D4D loc_401D4D:                             ; CODE XREF: sub_401D10+2E↑j
.text:00401D4D                 mov     [esp+4Ch+var_2C], 2
.text:00401D55                 mov     [esp+4Ch+var_28], 0
.text:00401D5D                 lea     esi, [esi+0]
.text:00401D60
.text:00401D60 loc_401D60:                             ; CODE XREF: sub_401D10+15C↓j
.text:00401D60                                         ; sub_401D10+168↓j
.text:00401D60                 mov     eax, [esp+4Ch+var_2C]
.text:00401D64                 mov     ebx, [esp+4Ch+var_28]
.text:00401D68                 mov     edi, [esp+4Ch+var_24]
.text:00401D6C                 mov     [esp+4Ch+var_44], eax
.text:00401D70                 mov     esi, [esp+4Ch+var_20]
.text:00401D74                 mov     [esp+4Ch+var_40], ebx
.text:00401D78                 mov     [esp+4Ch+var_4C], edi
.text:00401D7B                 mov     [esp+4Ch+var_48], esi
.text:00401D7F                 call    sub_406340
.text:00401D84                 mov     esi, eax
.text:00401D86                 mov     ecx, [esp+4Ch+var_28]
.text:00401D8A                 mov     edi, edx
.text:00401D8C                 mov     eax, [esp+4Ch+var_2C]
.text:00401D90                 imul    ecx, esi
.text:00401D93                 mul     esi
.text:00401D95                 mov     [esp+4Ch+var_3C], eax
.text:00401D99                 mov     eax, edx
.text:00401D9B                 mov     ebx, [esp+4Ch+var_3C]
.text:00401D9F                 add     eax, ecx
.text:00401DA1                 mov     ecx, [esp+4Ch+var_2C]
.text:00401DA5                 imul    ecx, edi
.text:00401DA8                 add     eax, ecx
.text:00401DAA                 mov     ecx, [esp+4Ch+var_24]
.text:00401DAE                 mov     [esp+4Ch+var_38], eax
.text:00401DB2                 mov     edx, [esp+4Ch+var_38]
.text:00401DB6                 mov     eax, [esp+4Ch+var_20]
.text:00401DBA                 xor     ebx, ecx
.text:00401DBC                 xor     eax, edx
.text:00401DBE                 or      eax, ebx
.text:00401DC0                 jnz     loc_401E4A
.text:00401DC6                 lea     esi, [esi+0]
.text:00401DC9                 lea     edi, [edi+0]
.text:00401DD0
.text:00401DD0 loc_401DD0:                             ; CODE XREF: sub_401D10+138↓j
.text:00401DD0                 cmp     ebp, [esp+4Ch+arg_8]
.text:00401DD4                 jnb     loc_401EE2
.text:00401DDA                 mov     [esp+4Ch+var_24], esi
.text:00401DDE                 mov     ecx, [esp+4Ch+var_2C]
.text:00401DE2                 mov     ebx, [esp+4Ch+var_28]
.text:00401DE6                 mov     [esp+4Ch+var_20], edi
.text:00401DEA                 mov     edx, [esp+4Ch+arg_C]
.text:00401DEE                 mov     [edx+ebp*8], ecx
.text:00401DF1                 mov     [edx+ebp*8+4], ebx
.text:00401DF5                 inc     ebp
.text:00401DF6                 mov     [esp+4Ch+var_40], ebx
.text:00401DFA                 mov     ebx, esi
.text:00401DFC                 mov     [esp+4Ch+var_44], ecx
.text:00401E00                 mov     [esp+4Ch+var_4C], ebx
.text:00401E03                 mov     [esp+4Ch+var_48], edi
.text:00401E07                 call    sub_406340
.text:00401E0C                 mov     esi, eax
.text:00401E0E                 mov     ecx, [esp+4Ch+var_28]
.text:00401E12                 mov     edi, edx
.text:00401E14                 mov     eax, [esp+4Ch+var_2C]
.text:00401E18                 imul    ecx, esi
.text:00401E1B                 mul     esi
.text:00401E1D                 mov     [esp+4Ch+var_3C], eax
.text:00401E21                 mov     eax, edx
.text:00401E23                 mov     ebx, [esp+4Ch+var_3C]
.text:00401E27                 add     eax, ecx
.text:00401E29                 mov     ecx, [esp+4Ch+var_2C]
.text:00401E2D                 imul    ecx, edi
.text:00401E30                 add     eax, ecx
.text:00401E32                 mov     ecx, [esp+4Ch+var_24]
.text:00401E36                 mov     [esp+4Ch+var_38], eax
.text:00401E3A                 mov     edx, [esp+4Ch+var_38]
.text:00401E3E                 mov     eax, [esp+4Ch+var_20]
.text:00401E42                 xor     ebx, ecx
.text:00401E44                 xor     eax, edx
.text:00401E46                 or      eax, ebx
.text:00401E48                 jz      short loc_401DD0
.text:00401E4A
.text:00401E4A loc_401E4A:                             ; CODE XREF: sub_401D10+B0↑j
.text:00401E4A                 mov     ebx, [esp+4Ch+var_30]
.text:00401E4E                 xor     ecx, ecx
.text:00401E50                 movzx   edx, byte ptr [ebx]
.text:00401E53                 add     [esp+4Ch+var_2C], edx
.text:00401E57                 adc     [esp+4Ch+var_28], ecx
.text:00401E5B                 inc     ebx
.text:00401E5C                 cmp     ebx, offset Str
.text:00401E62                 mov     [esp+4Ch+var_30], ebx
.text:00401E66                 jz      short loc_401ED8
.text:00401E68
.text:00401E68 loc_401E68:                             ; CODE XREF: sub_401D10+1D0↓j
.text:00401E68                 cmp     [esp+4Ch+var_28], edi
.text:00401E6C                 jb      loc_401D60
.text:00401E72                 ja      short loc_401E7E
.text:00401E74                 cmp     [esp+4Ch+var_2C], esi
.text:00401E78                 jbe     loc_401D60
.text:00401E7E
.text:00401E7E loc_401E7E:                             ; CODE XREF: sub_401D10+162↑j
.text:00401E7E                 mov     edi, [esp+4Ch+var_24]
.text:00401E82                 xor     edi, 1
.text:00401E85                 or      edi, [esp+4Ch+var_20]
.text:00401E89                 jnz     short loc_401E98
.text:00401E8B                 mov     esi, [esp+4Ch+var_1C]
.text:00401E8F                 xor     esi, 1
.text:00401E92                 or      esi, [esp+4Ch+var_18]
.text:00401E96                 jnz     short loc_401EB2
.text:00401E98
.text:00401E98 loc_401E98:                             ; CODE XREF: sub_401D10+179↑j
.text:00401E98                 cmp     ebp, [esp+4Ch+arg_8]
.text:00401E9C                 jnb     short loc_401EBC
.text:00401E9E                 mov     ebx, [esp+4Ch+arg_C]
.text:00401EA2                 mov     edx, [esp+4Ch+var_24]
.text:00401EA6                 mov     ecx, [esp+4Ch+var_20]
.text:00401EAA                 mov     [ebx+ebp*8], edx
.text:00401EAD                 mov     [ebx+ebp*8+4], ecx
.text:00401EB1                 inc     ebp
.text:00401EB2
.text:00401EB2 loc_401EB2:                             ; CODE XREF: sub_401D10+186↑j
.text:00401EB2                 mov     eax, ebp
.text:00401EB4
.text:00401EB4 loc_401EB4:                             ; CODE XREF: sub_401D10+37↑j
.text:00401EB4                 add     esp, 3Ch
.text:00401EB7                 pop     ebx
.text:00401EB8                 pop     esi
.text:00401EB9                 pop     edi
.text:00401EBA                 pop     ebp
.text:00401EBB                 retn
.text:00401EBC ; ---------------------------------------------------------------------------
.text:00401EBC
.text:00401EBC loc_401EBC:                             ; CODE XREF: sub_401D10+18C↑j
.text:00401EBC                 mov     [esp+4Ch+var_44], 86h ; '†'
.text:00401EC4
.text:00401EC4 loc_401EC4:                             ; CODE XREF: sub_401D10+1DA↓j
.text:00401EC4                 mov     [esp+4Ch+var_48], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/factor.c"
.text:00401ECC                 mov     [esp+4Ch+var_4C], offset aNFactorsMaxNFa ; "n_factors < max_n_factors"
.text:00401ED3                 call    _assert
.text:00401ED8 ; ---------------------------------------------------------------------------
.text:00401ED8
.text:00401ED8 loc_401ED8:                             ; CODE XREF: sub_401D10+156↑j
.text:00401ED8                 mov     [esp+4Ch+var_30], offset byte_401285
.text:00401EE0                 jmp     short loc_401E68
.text:00401EE2 ; ---------------------------------------------------------------------------
.text:00401EE2
.text:00401EE2 loc_401EE2:                             ; CODE XREF: sub_401D10+C4↑j
.text:00401EE2                 mov     [esp+4Ch+var_44], 79h ; 'y'
.text:00401EEA                 jmp     short loc_401EC4
.text:00401EEA sub_401D10      endp
.text:00401EEA
.text:00401EEA ; ---------------------------------------------------------------------------
.text:00401EEC                 align 20h
.text:00401F00 dword_401F00    dd 90002D2Dh, 7 dup(90909090h)
.text:00401F00                                         ; DATA XREF: sub_402150+E4↓o
.text:00401F20 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401F20                                         ; DATA XREF: sub_402150+2FC↓o
.text:00401F4D                 align 20h
.text:00401F60 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401F60                                         ; DATA XREF: sub_402150:loc_4024B2↓o
.text:00401F8D                 align 20h
.text:00401FA0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401FA0                                         ; DATA XREF: sub_402150:loc_402550↓o
.text:00401FA0                                         ; sub_402150:loc_402917↓o
.text:00401FC6                 align 20h
.text:00401FE0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401FE0                                         ; DATA XREF: sub_402150+48E↓o
.text:00402000 dword_402000    dd 90909000h, 7 dup(90909090h)
.text:00402000                                         ; DATA XREF: sub_402150:loc_402621↓o
.text:00402020 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402020                                         ; DATA XREF: sub_402150:loc_40263A↓o
.text:00402040 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402040                                         ; DATA XREF: sub_402150:loc_40271F↓o
.text:00402040                                         ; sub_402150:loc_402A4C↓o
.text:00402067                 align 20h
.text:00402080 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402080                                         ; DATA XREF: sub_402150:loc_402893↓o
.text:004020AE                 align 20h
.text:004020C0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004020C0                                         ; DATA XREF: sub_402150:loc_40297F↓o
.text:004020E1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004020E1                                         ; DATA XREF: sub_402150+93F↓o
.text:004020FB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004020FB                                         ; DATA XREF: sub_402150:loc_402AC7↓o
.text:00402115 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402115                                         ; DATA XREF: sub_402150:loc_402AEE↓o
.text:00402133 ; const char VarName[]
.text:00402133 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402150:loc_402CA0↓o
.text:00402143                 align 10h
.text:00402150
.text:00402150 ; =============== S U B R O U T I N E =======================================
.text:00402150
.text:00402150
.text:00402150 ; int __cdecl sub_402150(int, int, char *Str, int, int, int, int, int)
.text:00402150 sub_402150      proc near               ; CODE XREF: sub_402CE0+5A↓p
.text:00402150                                         ; .text:00402DCA↓p ...
.text:00402150
.text:00402150 Str1            = dword ptr -5Ch
.text:00402150 Str2            = dword ptr -58h
.text:00402150 MaxCount        = dword ptr -54h
.text:00402150 var_50          = dword ptr -50h
.text:00402150 var_4C          = dword ptr -4Ch
.text:00402150 var_3C          = dword ptr -3Ch
.text:00402150 var_38          = dword ptr -38h
.text:00402150 var_34          = dword ptr -34h
.text:00402150 var_30          = dword ptr -30h
.text:00402150 var_2C          = dword ptr -2Ch
.text:00402150 var_28          = dword ptr -28h
.text:00402150 var_24          = dword ptr -24h
.text:00402150 var_20          = dword ptr -20h
.text:00402150 var_1C          = dword ptr -1Ch
.text:00402150 var_18          = dword ptr -18h
.text:00402150 var_14          = dword ptr -14h
.text:00402150 arg_0           = dword ptr  4
.text:00402150 arg_4           = dword ptr  8
.text:00402150 Str             = dword ptr  0Ch
.text:00402150 arg_C           = dword ptr  10h
.text:00402150 arg_10          = dword ptr  14h
.text:00402150 arg_14          = dword ptr  18h
.text:00402150 arg_18          = dword ptr  1Ch
.text:00402150 arg_1C          = dword ptr  20h
.text:00402150
.text:00402150                 push    ebp
.text:00402151                 mov     eax, 0FFFFFFFFh
.text:00402156                 push    edi
.text:00402157                 push    esi
.text:00402158                 push    ebx
.text:00402159                 sub     esp, 4Ch
.text:0040215C                 mov     esi, [esp+5Ch+Str]
.text:00402160                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402164                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402167                 mov     ebx, [ebp+4]
.text:0040216A                 setz    dl
.text:0040216D                 movzx   ecx, dl
.text:00402170                 dec     ecx
.text:00402171                 and     ecx, ebx
.text:00402173                 mov     [esp+5Ch+var_14], ecx
.text:00402177                 mov     ecx, [esp+5Ch+arg_0]
.text:0040217B                 test    ecx, ecx
.text:0040217D                 jle     loc_4022A7
.text:00402183                 mov     dword ptr [ebp+0Ch], 0
.text:0040218A                 mov     ebx, [ebp+0]
.text:0040218D                 test    ebx, ebx
.text:0040218F                 jz      loc_402CC0
.text:00402195                 mov     edi, [ebp+10h]
.text:00402198                 test    edi, edi
.text:0040219A                 jnz     short loc_4021F3
.text:0040219C                 lea     esi, [esi+0]
.text:004021A0
.text:004021A0 loc_4021A0:                             ; CODE XREF: sub_402150+B7C↓j
.text:004021A0                 mov     [ebp+24h], ebx
.text:004021A3                 mov     esi, [esp+5Ch+Str]
.text:004021A7                 mov     [ebp+20h], ebx
.text:004021AA                 mov     ecx, [esp+5Ch+arg_18]
.text:004021AE                 xor     ebx, ebx
.text:004021B0                 mov     dword ptr [ebp+14h], 0
.text:004021B7                 test    ecx, ecx
.text:004021B9                 jz      loc_402CA0
.text:004021BF
.text:004021BF loc_4021BF:                             ; CODE XREF: sub_402150+B64↓j
.text:004021BF                 mov     ebx, 1
.text:004021C4
.text:004021C4 loc_4021C4:                             ; CODE XREF: sub_402150+B5E↓j
.text:004021C4                 mov     [ebp+1Ch], ebx
.text:004021C7                 mov     ecx, [esp+5Ch+Str]
.text:004021CB                 movzx   eax, byte ptr [ecx]
.text:004021CE                 cmp     al, 2Dh ; '-'
.text:004021D0                 jz      loc_402C90
.text:004021D6                 cmp     al, 2Bh ; '+'
.text:004021D8                 jz      loc_402C79
.text:004021DE                 xor     edx, edx
.text:004021E0                 test    ebx, ebx
.text:004021E2                 setz    dl
.text:004021E5                 mov     [ebp+18h], edx
.text:004021E8
.text:004021E8 loc_4021E8:                             ; CODE XREF: sub_402150+B35↓j
.text:004021E8                 mov     [esp+5Ch+Str], esi
.text:004021EC                 mov     dword ptr [ebp+10h], 1
.text:004021F3
.text:004021F3 loc_4021F3:                             ; CODE XREF: sub_402150+4A↑j
.text:004021F3                 mov     eax, [ebp+14h]
.text:004021F6                 test    eax, eax
.text:004021F8                 jz      short loc_402203
.text:004021FA                 cmp     byte ptr [eax], 0
.text:004021FD                 jnz     loc_4022E0
.text:00402203
.text:00402203 loc_402203:                             ; CODE XREF: sub_402150+A8↑j
.text:00402203                 mov     ebx, [ebp+0]
.text:00402206                 cmp     [ebp+24h], ebx
.text:00402209                 jle     short loc_40220E
.text:0040220B                 mov     [ebp+24h], ebx
.text:0040220E
.text:0040220E loc_40220E:                             ; CODE XREF: sub_402150+B9↑j
.text:0040220E                 cmp     [ebp+20h], ebx
.text:00402211                 jle     short loc_402216
.text:00402213                 mov     [ebp+20h], ebx
.text:00402216
.text:00402216 loc_402216:                             ; CODE XREF: sub_402150+C1↑j
.text:00402216                 cmp     dword ptr [ebp+18h], 1
.text:0040221A                 jz      loc_402BF0
.text:00402220
.text:00402220 loc_402220:                             ; CODE XREF: sub_402150+B13↓j
.text:00402220                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402224                 jz      loc_402BD4
.text:0040222A                 cld
.text:0040222B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040222F                 mov     edx, 3
.text:00402234                 mov     edi, offset dword_401F00
.text:00402239                 mov     esi, [ecx+ebx*4]
.text:0040223C                 mov     ecx, edx
.text:0040223E                 repe cmpsb
.text:00402240                 jnz     short loc_40227C
.text:00402242                 mov     edx, [ebp+24h]
.text:00402245                 lea     eax, [ebx+1]
.text:00402248                 cmp     [ebp+20h], edx
.text:0040224B                 mov     [ebp+0], eax
.text:0040224E                 jz      loc_402BE8
.text:00402254                 cmp     edx, eax
.text:00402256                 jz      short loc_402270
.text:00402258                 mov     [esp+5Ch+Str2], ebp
.text:0040225C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402260                 mov     [esp+5Ch+Str1], ebx
.text:00402263                 call    sub_402E00
.text:00402268                 nop
.text:00402269                 lea     esi, [esi+0]
.text:00402270
.text:00402270 loc_402270:                             ; CODE XREF: sub_402150+106↑j
.text:00402270                                         ; sub_402150+A9B↓j
.text:00402270                 mov     eax, [esp+5Ch+arg_0]
.text:00402274                 mov     ebx, eax
.text:00402276                 mov     [ebp+24h], eax
.text:00402279                 mov     [ebp+0], eax
.text:0040227C
.text:0040227C loc_40227C:                             ; CODE XREF: sub_402150+F0↑j
.text:0040227C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402280                 jz      loc_402BD4
.text:00402286                 mov     esi, [esp+5Ch+arg_4]
.text:0040228A                 mov     eax, [esi+ebx*4]
.text:0040228D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402290                 jz      short loc_4022B7
.text:00402292
.text:00402292 loc_402292:                             ; CODE XREF: sub_402150+16D↓j
.text:00402292                 mov     edx, [ebp+18h]
.text:00402295                 test    edx, edx
.text:00402297                 jz      short loc_4022B0
.text:00402299                 mov     [ebp+0Ch], eax
.text:0040229C                 lea     edi, [ebx+1]
.text:0040229F                 mov     eax, 1
.text:004022A4                 mov     [ebp+0], edi
.text:004022A7
.text:004022A7 loc_4022A7:                             ; CODE XREF: sub_402150+2D↑j
.text:004022A7                                         ; sub_402150+165↓j ...
.text:004022A7                 add     esp, 4Ch
.text:004022AA                 pop     ebx
.text:004022AB                 pop     esi
.text:004022AC                 pop     edi
.text:004022AD                 pop     ebp
.text:004022AE                 retn
.text:004022AE ; ---------------------------------------------------------------------------
.text:004022AF                 align 10h
.text:004022B0
.text:004022B0 loc_4022B0:                             ; CODE XREF: sub_402150+147↑j
.text:004022B0                                         ; sub_402150+A8A↓j ...
.text:004022B0                 mov     eax, 0FFFFFFFFh
.text:004022B5                 jmp     short loc_4022A7
.text:004022B7 ; ---------------------------------------------------------------------------
.text:004022B7
.text:004022B7 loc_4022B7:                             ; CODE XREF: sub_402150+140↑j
.text:004022B7                 movzx   edx, byte ptr [eax+1]
.text:004022BB                 test    dl, dl
.text:004022BD                 jz      short loc_402292
.text:004022BF                 mov     ebx, [esp+5Ch+arg_C]
.text:004022C3                 xor     ecx, ecx
.text:004022C5                 test    ebx, ebx
.text:004022C7                 jz      short loc_4022D2
.text:004022C9                 cmp     dl, 2Dh ; '-'
.text:004022CC                 jz      loc_402BCA
.text:004022D2
.text:004022D2 loc_4022D2:                             ; CODE XREF: sub_402150+177↑j
.text:004022D2                                         ; sub_402150+A7F↓j
.text:004022D2                 lea     esi, [ecx+eax+1]
.text:004022D6                 mov     [ebp+14h], esi
.text:004022D9                 lea     esi, [esi+0]
.text:004022E0
.text:004022E0 loc_4022E0:                             ; CODE XREF: sub_402150+AD↑j
.text:004022E0                 mov     ecx, [esp+5Ch+arg_C]
.text:004022E4                 test    ecx, ecx
.text:004022E6                 jz      loc_402670
.text:004022EC                 mov     edx, [ebp+0]
.text:004022EF                 mov     edi, [esp+5Ch+arg_4]
.text:004022F3                 mov     eax, [edi+edx*4]
.text:004022F6                 movzx   edx, byte ptr [eax+1]
.text:004022FA                 cmp     dl, 2Dh ; '-'
.text:004022FD                 jz      short loc_402315
.text:004022FF                 mov     ebx, [esp+5Ch+arg_14]
.text:00402303                 test    ebx, ebx
.text:00402305                 jz      loc_402670
.text:0040230B                 cmp     byte ptr [eax+2], 0
.text:0040230F                 jz      loc_402BAA
.text:00402315
.text:00402315 loc_402315:                             ; CODE XREF: sub_402150+1AD↑j
.text:00402315                                         ; sub_402150+A75↓j
.text:00402315                 mov     [esp+5Ch+var_18], 0
.text:0040231D                 mov     ecx, [ebp+14h]
.text:00402320                 mov     [esp+5Ch+var_1C], 0
.text:00402328                 mov     [esp+5Ch+var_20], 0
.text:00402330                 mov     edi, ecx
.text:00402332                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040233A                 movzx   eax, byte ptr [ecx]
.text:0040233D                 test    al, al
.text:0040233F                 jz      short loc_40235C
.text:00402341                 cmp     al, 3Dh ; '='
.text:00402343                 jz      short loc_40235C
.text:00402345                 lea     esi, [esi+0]
.text:00402349                 lea     edi, [edi+0]
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_402150+20A↓j
.text:00402350                 inc     edi
.text:00402351                 movzx   eax, byte ptr [edi]
.text:00402354                 test    al, al
.text:00402356                 jz      short loc_40235C
.text:00402358                 cmp     al, 3Dh ; '='
.text:0040235A                 jnz     short loc_402350
.text:0040235C
.text:0040235C loc_40235C:                             ; CODE XREF: sub_402150+1EF↑j
.text:0040235C                                         ; sub_402150+1F3↑j ...
.text:0040235C                 mov     [esp+5Ch+var_28], 0
.text:00402364                 mov     esi, [esp+5Ch+arg_C]
.text:00402368                 mov     ebx, [esi]
.text:0040236A                 test    ebx, ebx
.text:0040236C                 mov     edx, ebx
.text:0040236E                 jz      loc_402590
.text:00402374                 lea     esi, [esi+0]
.text:0040237A                 lea     edi, [edi+0]
.text:00402380
.text:00402380 loc_402380:                             ; CODE XREF: sub_402150+25E↓j
.text:00402380                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402384                 mov     ebx, edi
.text:00402386                 sub     ebx, ecx
.text:00402388                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040238C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040238F                 call    strncmp
.text:00402394                 test    eax, eax
.text:00402396                 jz      loc_402B26
.text:0040239C
.text:0040239C loc_40239C:                             ; CODE XREF: sub_402150+A0F↓j
.text:0040239C                                         ; sub_402150+A24↓j ...
.text:0040239C                 inc     [esp+5Ch+var_28]
.text:004023A0                 add     esi, 10h
.text:004023A3                 mov     ecx, [esi]
.text:004023A5                 test    ecx, ecx
.text:004023A7                 mov     edx, ecx
.text:004023A9                 jz      short loc_4023B0
.text:004023AB                 mov     ecx, [ebp+14h]
.text:004023AE                 jmp     short loc_402380
.text:004023B0 ; ---------------------------------------------------------------------------
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_402150+259↑j
.text:004023B0                                         ; sub_402150+A55↓j
.text:004023B0                 mov     esi, [esp+5Ch+var_20]
.text:004023B4                 test    esi, esi
.text:004023B6                 jz      short loc_4023C4
.text:004023B8                 mov     edx, [esp+5Ch+var_1C]
.text:004023BC                 test    edx, edx
.text:004023BE                 jz      loc_402AD0
.text:004023C4
.text:004023C4 loc_4023C4:                             ; CODE XREF: sub_402150+266↑j
.text:004023C4                 mov     eax, [esp+5Ch+var_18]
.text:004023C8                 test    eax, eax
.text:004023CA                 jz      loc_402590
.text:004023D0                 mov     ecx, [ebp+0]
.text:004023D3                 lea     eax, [ecx+1]
.text:004023D6                 mov     [ebp+0], eax
.text:004023D9                 cmp     byte ptr [edi], 0
.text:004023DC                 jz      loc_4024F0
.text:004023E2                 mov     ecx, [esp+5Ch+var_18]
.text:004023E6                 mov     esi, [ecx+4]
.text:004023E9                 test    esi, esi
.text:004023EB                 jz      short loc_402436
.text:004023ED                 lea     ebx, [edi+1]
.text:004023F0                 mov     [ebp+0Ch], ebx
.text:004023F3
.text:004023F3 loc_4023F3:                             ; CODE XREF: sub_402150+3A8↓j
.text:004023F3                                         ; sub_402150+3C4↓j
.text:004023F3                 mov     ebx, [ebp+14h]
.text:004023F6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:004023F9                 call    strlen
.text:004023FE                 add     [ebp+14h], eax
.text:00402401                 mov     esi, [esp+5Ch+arg_10]
.text:00402405                 test    esi, esi
.text:00402407                 jz      short loc_402413
.text:00402409                 mov     ebp, [esp+5Ch+var_24]
.text:0040240D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402411                 mov     [ecx], ebp
.text:00402413
.text:00402413 loc_402413:                             ; CODE XREF: sub_402150+2B7↑j
.text:00402413                 mov     eax, [esp+5Ch+var_18]
.text:00402417                 mov     ecx, [eax+8]
.text:0040241A                 test    ecx, ecx
.text:0040241C                 jnz     short loc_40242A
.text:0040241E                 mov     ecx, [esp+5Ch+var_18]
.text:00402422
.text:00402422 loc_402422:                             ; CODE XREF: sub_402150+723↓j
.text:00402422                 mov     eax, [ecx+0Ch]
.text:00402425                 jmp     loc_4022A7
.text:0040242A ; ---------------------------------------------------------------------------
.text:0040242A
.text:0040242A loc_40242A:                             ; CODE XREF: sub_402150+2CC↑j
.text:0040242A                                         ; sub_402150+719↓j
.text:0040242A                 mov     esi, [eax+0Ch]
.text:0040242D                 xor     eax, eax
.text:0040242F                 mov     [ecx], esi
.text:00402431                 jmp     loc_4022A7
.text:00402436 ; ---------------------------------------------------------------------------
.text:00402436
.text:00402436 loc_402436:                             ; CODE XREF: sub_402150+29B↑j
.text:00402436                 mov     edi, [esp+5Ch+var_14]
.text:0040243A                 test    edi, edi
.text:0040243C                 jz      short loc_402490
.text:0040243E                 mov     esi, [esp+5Ch+arg_4]
.text:00402442                 mov     edx, [esi+eax*4-4]
.text:00402446                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040244A                 jz      short loc_4024B2
.text:0040244C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402453                 call    ds:libintl_gettext
.text:00402459                 mov     edx, [esp+5Ch+var_18]
.text:0040245D                 mov     edi, [edx]
.text:0040245F                 mov     [esp+5Ch+var_4C], edi
.text:00402463                 mov     ebx, [ebp+0]
.text:00402466                 mov     edi, [esp+5Ch+arg_4]
.text:0040246A                 mov     ecx, [edi+ebx*4-4]
.text:0040246E                 movsx   esi, byte ptr [ecx]
.text:00402471                 mov     ecx, ds:_iob
.text:00402477                 add     ecx, 40h ; '@'
.text:0040247A                 mov     [esp+5Ch+var_50], esi
.text:0040247E                 mov     ebx, [edi]
.text:00402480                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402484                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402487                 mov     [esp+5Ch+MaxCount], ebx
.text:0040248B                 call    fprintf
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_402150+2EC↑j
.text:00402490                                         ; sub_402150+398↓j
.text:00402490                 mov     ecx, [ebp+14h]
.text:00402493                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402496                 call    strlen
.text:0040249B                 add     [ebp+14h], eax
.text:0040249E                 mov     eax, [esp+5Ch+var_18]
.text:004024A2                 mov     esi, [eax+0Ch]
.text:004024A5                 mov     [ebp+8], esi
.text:004024A8
.text:004024A8 loc_4024A8:                             ; CODE XREF: sub_402150+4E5↓j
.text:004024A8                                         ; sub_402150+73E↓j ...
.text:004024A8                 mov     eax, 3Fh ; '?'
.text:004024AD                 jmp     loc_4022A7
.text:004024B2 ; ---------------------------------------------------------------------------
.text:004024B2
.text:004024B2 loc_4024B2:                             ; CODE XREF: sub_402150+2FA↑j
.text:004024B2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004024B9                 call    ds:libintl_gettext
.text:004024BF                 mov     edx, [esp+5Ch+var_18]
.text:004024C3                 mov     edi, [esp+5Ch+arg_4]
.text:004024C7                 mov     ecx, ds:_iob
.text:004024CD                 mov     esi, [edx]
.text:004024CF                 add     ecx, 40h ; '@'
.text:004024D2                 mov     [esp+5Ch+var_50], esi
.text:004024D6                 mov     ebx, [edi]
.text:004024D8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024DC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004024DF                 mov     [esp+5Ch+MaxCount], ebx
.text:004024E3                 call    fprintf
.text:004024E8                 jmp     short loc_402490
.text:004024E8 ; ---------------------------------------------------------------------------
.text:004024EA                 align 10h
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_402150+28C↑j
.text:004024F0                 mov     ebx, [esp+5Ch+var_18]
.text:004024F4                 cmp     dword ptr [ebx+4], 1
.text:004024F8                 jnz     loc_4023F3
.text:004024FE                 cmp     eax, [esp+5Ch+arg_0]
.text:00402502                 jge     short loc_402519
.text:00402504                 mov     ebx, [esp+5Ch+arg_4]
.text:00402508                 lea     edi, [ecx+2]
.text:0040250B                 mov     [ebp+0], edi
.text:0040250E                 mov     esi, [ebx+eax*4]
.text:00402511                 mov     [ebp+0Ch], esi
.text:00402514                 jmp     loc_4023F3
.text:00402519 ; ---------------------------------------------------------------------------
.text:00402519
.text:00402519 loc_402519:                             ; CODE XREF: sub_402150+3B2↑j
.text:00402519                 mov     edx, [esp+5Ch+var_14]
.text:0040251D                 test    edx, edx
.text:0040251F                 jnz     short loc_402550
.text:00402521
.text:00402521 loc_402521:                             ; CODE XREF: sub_402150+437↓j
.text:00402521                 mov     edx, [ebp+14h]
.text:00402524                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402527                 call    strlen
.text:0040252C                 add     [ebp+14h], eax
.text:0040252F                 mov     eax, [esp+5Ch+var_18]
.text:00402533                 mov     edi, [eax+0Ch]
.text:00402536                 mov     [ebp+8], edi
.text:00402539
.text:00402539 loc_402539:                             ; CODE XREF: sub_402150+7C2↓j
.text:00402539                 mov     ebp, [esp+5Ch+Str]
.text:0040253D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402541                 setnz   bl
.text:00402544                 movzx   esi, bl
.text:00402547                 lea     eax, [esi+esi*4+3Ah]
.text:0040254B                 jmp     loc_4022A7
.text:00402550 ; ---------------------------------------------------------------------------
.text:00402550
.text:00402550 loc_402550:                             ; CODE XREF: sub_402150+3CF↑j
.text:00402550                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402557                 call    ds:libintl_gettext
.text:0040255D                 mov     ecx, [ebp+0]
.text:00402560                 mov     esi, [esp+5Ch+arg_4]
.text:00402564                 mov     ebx, [esi+ecx*4-4]
.text:00402568                 mov     ecx, ds:_iob
.text:0040256E                 mov     [esp+5Ch+var_50], ebx
.text:00402572                 mov     edi, [esi]
.text:00402574                 add     ecx, 40h ; '@'
.text:00402577                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040257B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040257E                 mov     [esp+5Ch+MaxCount], edi
.text:00402582                 call    fprintf
.text:00402587                 jmp     short loc_402521
.text:00402587 ; ---------------------------------------------------------------------------
.text:00402589                 align 10h
.text:00402590
.text:00402590 loc_402590:                             ; CODE XREF: sub_402150+21E↑j
.text:00402590                                         ; sub_402150+27A↑j
.text:00402590                 mov     eax, [esp+5Ch+arg_14]
.text:00402594                 test    eax, eax
.text:00402596                 jz      short loc_4025C6
.text:00402598                 mov     ebx, [ebp+0]
.text:0040259B                 mov     esi, [esp+5Ch+arg_4]
.text:0040259F                 mov     edi, [esi+ebx*4]
.text:004025A2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004025A6                 jz      short loc_4025C9
.text:004025A8                 mov     ecx, [ebp+14h]
.text:004025AB                 mov     edx, [esp+5Ch+Str]
.text:004025AF                 movsx   ebx, byte ptr [ecx]
.text:004025B2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004025B5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004025B9                 call    strchr
.text:004025BE                 test    eax, eax
.text:004025C0                 jnz     loc_402670
.text:004025C6
.text:004025C6 loc_4025C6:                             ; CODE XREF: sub_402150+446↑j
.text:004025C6                 mov     ebx, [ebp+0]
.text:004025C9
.text:004025C9 loc_4025C9:                             ; CODE XREF: sub_402150+456↑j
.text:004025C9                 mov     eax, [esp+5Ch+var_14]
.text:004025CD                 test    eax, eax
.text:004025CF                 jz      short loc_402621
.text:004025D1                 mov     esi, [esp+5Ch+arg_4]
.text:004025D5                 mov     edi, [esi+ebx*4]
.text:004025D8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004025DC                 jz      short loc_40263A
.text:004025DE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004025E5                 call    ds:libintl_gettext
.text:004025EB                 mov     edi, [ebp+14h]
.text:004025EE                 mov     [esp+5Ch+var_4C], edi
.text:004025F2                 mov     ebx, [ebp+0]
.text:004025F5                 mov     edi, [esp+5Ch+arg_4]
.text:004025F9                 mov     esi, [edi+ebx*4]
.text:004025FC                 movsx   ecx, byte ptr [esi]
.text:004025FF                 mov     esi, ds:_iob
.text:00402605                 add     esi, 40h ; '@'
.text:00402608                 mov     [esp+5Ch+var_50], ecx
.text:0040260C                 mov     ebx, [edi]
.text:0040260E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402612                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402615                 mov     [esp+5Ch+MaxCount], ebx
.text:00402619                 call    fprintf
.text:0040261E
.text:0040261E loc_40261E:                             ; CODE XREF: sub_402150+51D↓j
.text:0040261E                 mov     ebx, [ebp+0]
.text:00402621
.text:00402621 loc_402621:                             ; CODE XREF: sub_402150+47F↑j
.text:00402621                 mov     dword ptr [ebp+14h], offset dword_402000
.text:00402628                 lea     edx, [ebx+1]
.text:0040262B                 mov     [ebp+0], edx
.text:0040262E
.text:0040262E loc_40262E:                             ; CODE XREF: sub_402150+999↓j
.text:0040262E                 mov     dword ptr [ebp+8], 0
.text:00402635                 jmp     loc_4024A8
.text:0040263A ; ---------------------------------------------------------------------------
.text:0040263A
.text:0040263A loc_40263A:                             ; CODE XREF: sub_402150+48C↑j
.text:0040263A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402641                 call    ds:libintl_gettext
.text:00402647                 mov     ecx, [ebp+14h]
.text:0040264A                 mov     edi, [esp+5Ch+arg_4]
.text:0040264E                 mov     edx, ds:_iob
.text:00402654                 mov     [esp+5Ch+var_50], ecx
.text:00402658                 mov     ebx, [edi]
.text:0040265A                 add     edx, 40h ; '@'
.text:0040265D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402661                 mov     [esp+5Ch+MaxCount], ebx
.text:00402665                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402668                 call    fprintf
.text:0040266D                 jmp     short loc_40261E
.text:0040266D ; ---------------------------------------------------------------------------
.text:0040266F                 align 10h
.text:00402670
.text:00402670 loc_402670:                             ; CODE XREF: sub_402150+196↑j
.text:00402670                                         ; sub_402150+1B5↑j ...
.text:00402670                 mov     esi, [ebp+14h]
.text:00402673                 movzx   ebx, byte ptr [esi]
.text:00402676                 inc     esi
.text:00402677                 mov     [ebp+14h], esi
.text:0040267A                 mov     ecx, [esp+5Ch+Str]
.text:0040267E                 movsx   esi, bl
.text:00402681                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402685                 mov     edi, esi
.text:00402687                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040268A                 call    strchr
.text:0040268F                 mov     ecx, [ebp+14h]
.text:00402692                 cmp     byte ptr [ecx], 0
.text:00402695                 jnz     short loc_40269A
.text:00402697                 inc     dword ptr [ebp+0]
.text:0040269A
.text:0040269A loc_40269A:                             ; CODE XREF: sub_402150+545↑j
.text:0040269A                 test    eax, eax
.text:0040269C                 jz      loc_402A80
.text:004026A2                 cmp     bl, 3Ah ; ':'
.text:004026A5                 jz      loc_402A80
.text:004026AB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004026AE                 jz      loc_402766
.text:004026B4                 movzx   edx, byte ptr [eax+1]
.text:004026B8
.text:004026B8 loc_4026B8:                             ; CODE XREF: sub_402150+61D↓j
.text:004026B8                 cmp     dl, 3Ah ; ':'
.text:004026BB                 jz      short loc_4026C4
.text:004026BD
.text:004026BD loc_4026BD:                             ; CODE XREF: sub_402150+590↓j
.text:004026BD                 mov     eax, esi
.text:004026BF                 jmp     loc_4022A7
.text:004026C4 ; ---------------------------------------------------------------------------
.text:004026C4
.text:004026C4 loc_4026C4:                             ; CODE XREF: sub_402150+56B↑j
.text:004026C4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004026C8                 jz      loc_402751
.text:004026CE                 cmp     byte ptr [ecx], 0
.text:004026D1                 jz      short loc_4026E2
.text:004026D3
.text:004026D3 loc_4026D3:                             ; CODE XREF: sub_402150+604↓j
.text:004026D3                 inc     dword ptr [ebp+0]
.text:004026D6                 mov     [ebp+0Ch], ecx
.text:004026D9
.text:004026D9 loc_4026D9:                             ; CODE XREF: sub_402150+5AB↓j
.text:004026D9                                         ; sub_402150+5C6↓j ...
.text:004026D9                 mov     dword ptr [ebp+14h], 0
.text:004026E0                 jmp     short loc_4026BD
.text:004026E2 ; ---------------------------------------------------------------------------
.text:004026E2
.text:004026E2 loc_4026E2:                             ; CODE XREF: sub_402150+581↑j
.text:004026E2                 mov     ecx, [ebp+0]
.text:004026E5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004026E9                 jz      short loc_4026FD
.text:004026EB                 mov     eax, [esp+5Ch+arg_4]
.text:004026EF                 lea     edx, [ecx+1]
.text:004026F2                 mov     [ebp+0], edx
.text:004026F5                 mov     ebx, [eax+ecx*4]
.text:004026F8                 mov     [ebp+0Ch], ebx
.text:004026FB                 jmp     short loc_4026D9
.text:004026FD ; ---------------------------------------------------------------------------
.text:004026FD
.text:004026FD loc_4026FD:                             ; CODE XREF: sub_402150+599↑j
.text:004026FD                 mov     ecx, [esp+5Ch+var_14]
.text:00402701                 test    ecx, ecx
.text:00402703                 jnz     short loc_40271F
.text:00402705
.text:00402705 loc_402705:                             ; CODE XREF: sub_402150+5FF↓j
.text:00402705                 mov     [ebp+8], edi
.text:00402708                 mov     edi, [esp+5Ch+Str]
.text:0040270C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040270F                 jz      short loc_402718
.text:00402711                 mov     esi, 3Fh ; '?'
.text:00402716                 jmp     short loc_4026D9
.text:00402718 ; ---------------------------------------------------------------------------
.text:00402718
.text:00402718 loc_402718:                             ; CODE XREF: sub_402150+5BF↑j
.text:00402718                 mov     esi, 3Ah ; ':'
.text:0040271D                 jmp     short loc_4026D9
.text:0040271F ; ---------------------------------------------------------------------------
.text:0040271F
.text:0040271F loc_40271F:                             ; CODE XREF: sub_402150+5B3↑j
.text:0040271F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402726                 call    ds:libintl_gettext
.text:0040272C                 mov     [esp+5Ch+var_50], edi
.text:00402730                 mov     ebx, [esp+5Ch+arg_4]
.text:00402734                 mov     edx, ds:_iob
.text:0040273A                 mov     esi, [ebx]
.text:0040273C                 add     edx, 40h ; '@'
.text:0040273F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402743                 mov     [esp+5Ch+MaxCount], esi
.text:00402747                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040274A                 call    fprintf
.text:0040274F                 jmp     short loc_402705
.text:00402751 ; ---------------------------------------------------------------------------
.text:00402751
.text:00402751 loc_402751:                             ; CODE XREF: sub_402150+578↑j
.text:00402751                 cmp     byte ptr [ecx], 0
.text:00402754                 jnz     loc_4026D3
.text:0040275A                 mov     dword ptr [ebp+0Ch], 0
.text:00402761                 jmp     loc_4026D9
.text:00402766 ; ---------------------------------------------------------------------------
.text:00402766
.text:00402766 loc_402766:                             ; CODE XREF: sub_402150+55E↑j
.text:00402766                 movzx   edx, byte ptr [eax+1]
.text:0040276A                 cmp     dl, 3Bh ; ';'
.text:0040276D                 jnz     loc_4026B8
.text:00402773                 mov     [esp+5Ch+var_2C], 0
.text:0040277B                 mov     [esp+5Ch+var_30], 0
.text:00402783                 mov     [esp+5Ch+var_34], 0
.text:0040278B                 mov     [esp+5Ch+var_38], 0
.text:00402793                 cmp     byte ptr [ecx], 0
.text:00402796                 jz      loc_402A0B
.text:0040279C                 inc     dword ptr [ebp+0]
.text:0040279F                 mov     [ebp+0Ch], ecx
.text:004027A2
.text:004027A2 loc_4027A2:                             ; CODE XREF: sub_402150+8D4↓j
.text:004027A2                 mov     edi, [ebp+0Ch]
.text:004027A5                 mov     [ebp+14h], edi
.text:004027A8                 movzx   eax, byte ptr [edi]
.text:004027AB                 test    al, al
.text:004027AD                 jz      short loc_4027BF
.text:004027AF                 cmp     al, 3Dh ; '='
.text:004027B1                 jz      short loc_4027BF
.text:004027B3
.text:004027B3 loc_4027B3:                             ; CODE XREF: sub_402150+66D↓j
.text:004027B3                 inc     edi
.text:004027B4                 movzx   eax, byte ptr [edi]
.text:004027B7                 test    al, al
.text:004027B9                 jz      short loc_4027BF
.text:004027BB                 cmp     al, 3Dh ; '='
.text:004027BD                 jnz     short loc_4027B3
.text:004027BF
.text:004027BF loc_4027BF:                             ; CODE XREF: sub_402150+65D↑j
.text:004027BF                                         ; sub_402150+661↑j ...
.text:004027BF                 mov     [esp+5Ch+var_3C], 0
.text:004027C7                 mov     esi, [esp+5Ch+arg_C]
.text:004027CB                 mov     eax, [esi]
.text:004027CD                 test    eax, eax
.text:004027CF                 jz      loc_402950
.text:004027D5                 mov     ecx, eax
.text:004027D7
.text:004027D7 loc_4027D7:                             ; CODE XREF: sub_402150+6B3↓j
.text:004027D7                 mov     ebx, [ebp+14h]
.text:004027DA                 mov     eax, edi
.text:004027DC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004027DF                 sub     eax, ebx
.text:004027E1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004027E5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004027E9                 call    strncmp
.text:004027EE                 test    eax, eax
.text:004027F0                 jz      loc_4029B7
.text:004027F6
.text:004027F6 loc_4027F6:                             ; CODE XREF: sub_402150+88C↓j
.text:004027F6                                         ; sub_402150+89D↓j
.text:004027F6                 inc     [esp+5Ch+var_3C]
.text:004027FA                 add     esi, 10h
.text:004027FD                 mov     edx, [esi]
.text:004027FF                 test    edx, edx
.text:00402801                 mov     ecx, edx
.text:00402803                 jnz     short loc_4027D7
.text:00402805
.text:00402805 loc_402805:                             ; CODE XREF: sub_402150+8B6↓j
.text:00402805                 mov     esi, [esp+5Ch+var_34]
.text:00402809                 test    esi, esi
.text:0040280B                 jz      short loc_402819
.text:0040280D                 mov     ebx, [esp+5Ch+var_30]
.text:00402811                 test    ebx, ebx
.text:00402813                 jz      loc_402961
.text:00402819
.text:00402819 loc_402819:                             ; CODE XREF: sub_402150+6BB↑j
.text:00402819                 mov     esi, [esp+5Ch+var_2C]
.text:0040281D                 test    esi, esi
.text:0040281F                 jz      loc_402950
.text:00402825                 cmp     byte ptr [edi], 0
.text:00402828                 jz      loc_4028D0
.text:0040282E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402832                 mov     ebx, [ecx+4]
.text:00402835                 test    ebx, ebx
.text:00402837                 jz      short loc_402878
.text:00402839                 lea     edx, [edi+1]
.text:0040283C                 mov     [ebp+0Ch], edx
.text:0040283F
.text:0040283F loc_40283F:                             ; CODE XREF: sub_402150+788↓j
.text:0040283F                                         ; sub_402150+7A7↓j
.text:0040283F                 mov     edi, [ebp+14h]
.text:00402842                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402845                 call    strlen
.text:0040284A                 add     [ebp+14h], eax
.text:0040284D                 mov     eax, [esp+5Ch+arg_10]
.text:00402851                 test    eax, eax
.text:00402853                 jz      short loc_402860
.text:00402855                 mov     edx, [esp+5Ch+var_38]
.text:00402859                 mov     ebp, [esp+5Ch+arg_10]
.text:0040285D                 mov     [ebp+0], edx
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_402150+703↑j
.text:00402860                 mov     eax, [esp+5Ch+var_2C]
.text:00402864                 mov     ecx, [eax+8]
.text:00402867                 test    ecx, ecx
.text:00402869                 jnz     loc_40242A
.text:0040286F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402873                 jmp     loc_402422
.text:00402878 ; ---------------------------------------------------------------------------
.text:00402878
.text:00402878 loc_402878:                             ; CODE XREF: sub_402150+6E7↑j
.text:00402878                 mov     eax, [esp+5Ch+var_14]
.text:0040287C                 test    eax, eax
.text:0040287E                 jnz     short loc_402893
.text:00402880
.text:00402880 loc_402880:                             ; CODE XREF: sub_402150+779↓j
.text:00402880                 mov     ecx, [ebp+14h]
.text:00402883                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402886                 call    strlen
.text:0040288B                 add     [ebp+14h], eax
.text:0040288E                 jmp     loc_4024A8
.text:00402893 ; ---------------------------------------------------------------------------
.text:00402893
.text:00402893 loc_402893:                             ; CODE XREF: sub_402150+72E↑j
.text:00402893                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040289A                 call    ds:libintl_gettext
.text:004028A0                 mov     edx, [esp+5Ch+var_2C]
.text:004028A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004028A8                 mov     edi, [edx]
.text:004028AA                 mov     [esp+5Ch+var_50], edi
.text:004028AE                 mov     edi, ds:_iob
.text:004028B4                 mov     esi, [ebx]
.text:004028B6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004028BA                 add     edi, 40h ; '@'
.text:004028BD                 mov     [esp+5Ch+MaxCount], esi
.text:004028C1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004028C4                 call    fprintf
.text:004028C9                 jmp     short loc_402880
.text:004028C9 ; ---------------------------------------------------------------------------
.text:004028CB                 align 10h
.text:004028D0
.text:004028D0 loc_4028D0:                             ; CODE XREF: sub_402150+6D8↑j
.text:004028D0                 mov     esi, [esp+5Ch+var_2C]
.text:004028D4                 cmp     dword ptr [esi+4], 1
.text:004028D8                 jnz     loc_40283F
.text:004028DE                 mov     ecx, [ebp+0]
.text:004028E1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004028E5                 jge     short loc_4028FC
.text:004028E7                 mov     eax, [esp+5Ch+arg_4]
.text:004028EB                 lea     ebx, [ecx+1]
.text:004028EE                 mov     [ebp+0], ebx
.text:004028F1                 mov     edi, [eax+ecx*4]
.text:004028F4                 mov     [ebp+0Ch], edi
.text:004028F7                 jmp     loc_40283F
.text:004028FC ; ---------------------------------------------------------------------------
.text:004028FC
.text:004028FC loc_4028FC:                             ; CODE XREF: sub_402150+795↑j
.text:004028FC                 mov     edx, [esp+5Ch+var_14]
.text:00402900                 test    edx, edx
.text:00402902                 jnz     short loc_402917
.text:00402904
.text:00402904 loc_402904:                             ; CODE XREF: sub_402150+7FE↓j
.text:00402904                 mov     edx, [ebp+14h]
.text:00402907                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040290A                 call    strlen
.text:0040290F                 add     [ebp+14h], eax
.text:00402912                 jmp     loc_402539
.text:00402917 ; ---------------------------------------------------------------------------
.text:00402917
.text:00402917 loc_402917:                             ; CODE XREF: sub_402150+7B2↑j
.text:00402917                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040291E                 call    ds:libintl_gettext
.text:00402924                 mov     ecx, [ebp+0]
.text:00402927                 mov     ebx, [esp+5Ch+arg_4]
.text:0040292B                 mov     edi, [ebx+ecx*4-4]
.text:0040292F                 mov     ecx, ds:_iob
.text:00402935                 mov     [esp+5Ch+var_50], edi
.text:00402939                 mov     esi, [ebx]
.text:0040293B                 add     ecx, 40h ; '@'
.text:0040293E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402942                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402945                 mov     [esp+5Ch+MaxCount], esi
.text:00402949                 call    fprintf
.text:0040294E                 jmp     short loc_402904
.text:00402950 ; ---------------------------------------------------------------------------
.text:00402950
.text:00402950 loc_402950:                             ; CODE XREF: sub_402150+67F↑j
.text:00402950                                         ; sub_402150+6CF↑j
.text:00402950                 mov     dword ptr [ebp+14h], 0
.text:00402957                 mov     eax, 57h ; 'W'
.text:0040295C                 jmp     loc_4022A7
.text:00402961 ; ---------------------------------------------------------------------------
.text:00402961
.text:00402961 loc_402961:                             ; CODE XREF: sub_402150+6C3↑j
.text:00402961                 mov     edi, [esp+5Ch+var_14]
.text:00402965                 test    edi, edi
.text:00402967                 jnz     short loc_40297F
.text:00402969
.text:00402969 loc_402969:                             ; CODE XREF: sub_402150+865↓j
.text:00402969                 mov     edx, [ebp+14h]
.text:0040296C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040296F                 call    strlen
.text:00402974                 add     [ebp+14h], eax
.text:00402977                 inc     dword ptr [ebp+0]
.text:0040297A                 jmp     loc_4024A8
.text:0040297F ; ---------------------------------------------------------------------------
.text:0040297F
.text:0040297F loc_40297F:                             ; CODE XREF: sub_402150+817↑j
.text:0040297F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402986                 call    ds:libintl_gettext
.text:0040298C                 mov     ecx, [ebp+0]
.text:0040298F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402993                 mov     edi, [ebx+ecx*4]
.text:00402996                 mov     ecx, ds:_iob
.text:0040299C                 mov     [esp+5Ch+var_50], edi
.text:004029A0                 mov     esi, [ebx]
.text:004029A2                 add     ecx, 40h ; '@'
.text:004029A5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004029A9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004029AC                 mov     [esp+5Ch+MaxCount], esi
.text:004029B0                 call    fprintf
.text:004029B5                 jmp     short loc_402969
.text:004029B7 ; ---------------------------------------------------------------------------
.text:004029B7
.text:004029B7 loc_4029B7:                             ; CODE XREF: sub_402150+6A0↑j
.text:004029B7                 mov     edx, [ebp+14h]
.text:004029BA                 mov     ebx, edi
.text:004029BC                 mov     ecx, [esi]
.text:004029BE                 sub     ebx, edx
.text:004029C0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004029C3                 call    strlen
.text:004029C8                 cmp     ebx, eax
.text:004029CA                 jz      short loc_4029F2
.text:004029CC                 mov     ebx, [esp+5Ch+var_2C]
.text:004029D0                 test    ebx, ebx
.text:004029D2                 jz      short loc_4029E1
.text:004029D4                 mov     [esp+5Ch+var_34], 1
.text:004029DC                 jmp     loc_4027F6
.text:004029E1 ; ---------------------------------------------------------------------------
.text:004029E1
.text:004029E1 loc_4029E1:                             ; CODE XREF: sub_402150+882↑j
.text:004029E1                 mov     [esp+5Ch+var_2C], esi
.text:004029E5                 mov     ecx, [esp+5Ch+var_3C]
.text:004029E9                 mov     [esp+5Ch+var_38], ecx
.text:004029ED                 jmp     loc_4027F6
.text:004029F2 ; ---------------------------------------------------------------------------
.text:004029F2
.text:004029F2 loc_4029F2:                             ; CODE XREF: sub_402150+87A↑j
.text:004029F2                 mov     [esp+5Ch+var_2C], esi
.text:004029F6                 mov     eax, [esp+5Ch+var_3C]
.text:004029FA                 mov     [esp+5Ch+var_30], 1
.text:00402A02                 mov     [esp+5Ch+var_38], eax
.text:00402A06                 jmp     loc_402805
.text:00402A0B ; ---------------------------------------------------------------------------
.text:00402A0B
.text:00402A0B loc_402A0B:                             ; CODE XREF: sub_402150+646↑j
.text:00402A0B                 mov     edx, [ebp+0]
.text:00402A0E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402A12                 jz      short loc_402A29
.text:00402A14                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A18                 lea     esi, [edx+1]
.text:00402A1B                 mov     [ebp+0], esi
.text:00402A1E                 mov     edi, [ebx+edx*4]
.text:00402A21                 mov     [ebp+0Ch], edi
.text:00402A24                 jmp     loc_4027A2
.text:00402A29 ; ---------------------------------------------------------------------------
.text:00402A29
.text:00402A29 loc_402A29:                             ; CODE XREF: sub_402150+8C2↑j
.text:00402A29                 mov     edi, [esp+5Ch+var_14]
.text:00402A2D                 test    edi, edi
.text:00402A2F                 jnz     short loc_402A4C
.text:00402A31
.text:00402A31 loc_402A31:                             ; CODE XREF: sub_402150+92C↓j
.text:00402A31                 mov     [ebp+8], esi
.text:00402A34                 mov     ebp, [esp+5Ch+Str]
.text:00402A38                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402A3C                 jz      short loc_402A48
.text:00402A3E                 mov     bl, 3Fh ; '?'
.text:00402A40
.text:00402A40 loc_402A40:                             ; CODE XREF: sub_402150+8FA↓j
.text:00402A40                 movsx   eax, bl
.text:00402A43                 jmp     loc_4022A7
.text:00402A48 ; ---------------------------------------------------------------------------
.text:00402A48
.text:00402A48 loc_402A48:                             ; CODE XREF: sub_402150+8EC↑j
.text:00402A48                 mov     bl, 3Ah ; ':'
.text:00402A4A                 jmp     short loc_402A40
.text:00402A4C ; ---------------------------------------------------------------------------
.text:00402A4C
.text:00402A4C loc_402A4C:                             ; CODE XREF: sub_402150+8DF↑j
.text:00402A4C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402A53                 call    ds:libintl_gettext
.text:00402A59                 mov     [esp+5Ch+var_50], esi
.text:00402A5D                 mov     edx, [esp+5Ch+arg_4]
.text:00402A61                 mov     ecx, ds:_iob
.text:00402A67                 mov     ebx, [edx]
.text:00402A69                 add     ecx, 40h ; '@'
.text:00402A6C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A70                 mov     [esp+5Ch+MaxCount], ebx
.text:00402A74                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402A77                 call    fprintf
.text:00402A7C                 jmp     short loc_402A31
.text:00402A7C ; ---------------------------------------------------------------------------
.text:00402A7E                 align 10h
.text:00402A80
.text:00402A80 loc_402A80:                             ; CODE XREF: sub_402150+54C↑j
.text:00402A80                                         ; sub_402150+555↑j
.text:00402A80                 mov     eax, [esp+5Ch+var_14]
.text:00402A84                 test    eax, eax
.text:00402A86                 jz      short loc_402ABF
.text:00402A88                 mov     ebx, [ebp+1Ch]
.text:00402A8B                 test    ebx, ebx
.text:00402A8D                 jz      short loc_402AC7
.text:00402A8F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402A96
.text:00402A96 loc_402A96:                             ; CODE XREF: sub_402150+97E↓j
.text:00402A96                 call    ds:libintl_gettext
.text:00402A9C                 mov     [esp+5Ch+var_50], esi
.text:00402AA0                 mov     ebx, [esp+5Ch+arg_4]
.text:00402AA4                 mov     edx, ds:_iob
.text:00402AAA                 mov     esi, [ebx]
.text:00402AAC                 add     edx, 40h ; '@'
.text:00402AAF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AB3                 mov     [esp+5Ch+MaxCount], esi
.text:00402AB7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402ABA                 call    fprintf
.text:00402ABF
.text:00402ABF loc_402ABF:                             ; CODE XREF: sub_402150+936↑j
.text:00402ABF                 mov     [ebp+8], edi
.text:00402AC2                 jmp     loc_4024A8
.text:00402AC7 ; ---------------------------------------------------------------------------
.text:00402AC7
.text:00402AC7 loc_402AC7:                             ; CODE XREF: sub_402150+93D↑j
.text:00402AC7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402ACE                 jmp     short loc_402A96
.text:00402AD0 ; ---------------------------------------------------------------------------
.text:00402AD0
.text:00402AD0 loc_402AD0:                             ; CODE XREF: sub_402150+26E↑j
.text:00402AD0                 mov     edi, [esp+5Ch+var_14]
.text:00402AD4                 test    edi, edi
.text:00402AD6                 jnz     short loc_402AEE
.text:00402AD8
.text:00402AD8 loc_402AD8:                             ; CODE XREF: sub_402150+9D4↓j
.text:00402AD8                 mov     edx, [ebp+14h]
.text:00402ADB                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402ADE                 call    strlen
.text:00402AE3                 add     [ebp+14h], eax
.text:00402AE6                 inc     dword ptr [ebp+0]
.text:00402AE9                 jmp     loc_40262E
.text:00402AEE ; ---------------------------------------------------------------------------
.text:00402AEE
.text:00402AEE loc_402AEE:                             ; CODE XREF: sub_402150+986↑j
.text:00402AEE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402AF5                 call    ds:libintl_gettext
.text:00402AFB                 mov     ebx, [ebp+0]
.text:00402AFE                 mov     edi, [esp+5Ch+arg_4]
.text:00402B02                 mov     ecx, [edi+ebx*4]
.text:00402B05                 mov     ebx, ds:_iob
.text:00402B0B                 mov     [esp+5Ch+var_50], ecx
.text:00402B0F                 mov     esi, [edi]
.text:00402B11                 add     ebx, 40h ; '@'
.text:00402B14                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B18                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402B1B                 mov     [esp+5Ch+MaxCount], esi
.text:00402B1F                 call    fprintf
.text:00402B24                 jmp     short loc_402AD8
.text:00402B26 ; ---------------------------------------------------------------------------
.text:00402B26
.text:00402B26 loc_402B26:                             ; CODE XREF: sub_402150+246↑j
.text:00402B26                 mov     ecx, [ebp+14h]
.text:00402B29                 mov     ebx, edi
.text:00402B2B                 mov     edx, [esi]
.text:00402B2D                 sub     ebx, ecx
.text:00402B2F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402B32                 call    strlen
.text:00402B37                 cmp     ebx, eax
.text:00402B39                 jz      short loc_402B91
.text:00402B3B                 mov     ebx, [esp+5Ch+var_18]
.text:00402B3F                 test    ebx, ebx
.text:00402B41                 jz      short loc_402B80
.text:00402B43                 mov     edx, [esp+5Ch+arg_14]
.text:00402B47                 test    edx, edx
.text:00402B49                 jnz     short loc_402B57
.text:00402B4B                 mov     ecx, [esp+5Ch+var_18]
.text:00402B4F                 mov     ebx, [esi+4]
.text:00402B52                 cmp     [ecx+4], ebx
.text:00402B55                 jz      short loc_402B64
.text:00402B57
.text:00402B57 loc_402B57:                             ; CODE XREF: sub_402150+9F9↑j
.text:00402B57                                         ; sub_402150+A1A↓j ...
.text:00402B57                 mov     [esp+5Ch+var_20], 1
.text:00402B5F                 jmp     loc_40239C
.text:00402B64 ; ---------------------------------------------------------------------------
.text:00402B64
.text:00402B64 loc_402B64:                             ; CODE XREF: sub_402150+A05↑j
.text:00402B64                 mov     edx, [esi+8]
.text:00402B67                 cmp     [ecx+8], edx
.text:00402B6A                 jnz     short loc_402B57
.text:00402B6C                 mov     ebx, [esi+0Ch]
.text:00402B6F                 cmp     [ecx+0Ch], ebx
.text:00402B72                 jnz     short loc_402B57
.text:00402B74                 jmp     loc_40239C
.text:00402B74 ; ---------------------------------------------------------------------------
.text:00402B79                 align 10h
.text:00402B80
.text:00402B80 loc_402B80:                             ; CODE XREF: sub_402150+9F1↑j
.text:00402B80                 mov     [esp+5Ch+var_18], esi
.text:00402B84                 mov     eax, [esp+5Ch+var_28]
.text:00402B88                 mov     [esp+5Ch+var_24], eax
.text:00402B8C                 jmp     loc_40239C
.text:00402B91 ; ---------------------------------------------------------------------------
.text:00402B91
.text:00402B91 loc_402B91:                             ; CODE XREF: sub_402150+9E9↑j
.text:00402B91                 mov     [esp+5Ch+var_18], esi
.text:00402B95                 mov     ecx, [esp+5Ch+var_28]
.text:00402B99                 mov     [esp+5Ch+var_1C], 1
.text:00402BA1                 mov     [esp+5Ch+var_24], ecx
.text:00402BA5                 jmp     loc_4023B0
.text:00402BAA ; ---------------------------------------------------------------------------
.text:00402BAA
.text:00402BAA loc_402BAA:                             ; CODE XREF: sub_402150+1BF↑j
.text:00402BAA                 mov     eax, [esp+5Ch+Str]
.text:00402BAE                 movsx   esi, dl
.text:00402BB1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402BB5                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402BB8                 call    strchr
.text:00402BBD                 test    eax, eax
.text:00402BBF                 jnz     loc_402670
.text:00402BC5                 jmp     loc_402315
.text:00402BCA ; ---------------------------------------------------------------------------
.text:00402BCA
.text:00402BCA loc_402BCA:                             ; CODE XREF: sub_402150+17C↑j
.text:00402BCA                 mov     ecx, 1
.text:00402BCF                 jmp     loc_4022D2
.text:00402BD4 ; ---------------------------------------------------------------------------
.text:00402BD4
.text:00402BD4 loc_402BD4:                             ; CODE XREF: sub_402150+D4↑j
.text:00402BD4                                         ; sub_402150+130↑j
.text:00402BD4                 mov     eax, [ebp+20h]
.text:00402BD7                 cmp     eax, [ebp+24h]
.text:00402BDA                 jz      loc_4022B0
.text:00402BE0                 mov     [ebp+0], eax
.text:00402BE3                 jmp     loc_4022B0
.text:00402BE8 ; ---------------------------------------------------------------------------
.text:00402BE8
.text:00402BE8 loc_402BE8:                             ; CODE XREF: sub_402150+FE↑j
.text:00402BE8                 mov     [ebp+20h], eax
.text:00402BEB                 jmp     loc_402270
.text:00402BF0 ; ---------------------------------------------------------------------------
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_402150+CA↑j
.text:00402BF0                 mov     edx, [ebp+20h]
.text:00402BF3                 mov     eax, [ebp+24h]
.text:00402BF6                 cmp     edx, eax
.text:00402BF8                 jz      short loc_402C70
.text:00402BFA                 cmp     eax, ebx
.text:00402BFC                 jz      short loc_402C11
.text:00402BFE                 mov     [esp+5Ch+Str2], ebp
.text:00402C02                 mov     ebx, [esp+5Ch+arg_4]
.text:00402C06                 mov     [esp+5Ch+Str1], ebx
.text:00402C09                 call    sub_402E00
.text:00402C0E                 mov     ebx, [ebp+0]
.text:00402C11
.text:00402C11 loc_402C11:                             ; CODE XREF: sub_402150+AAC↑j
.text:00402C11                                         ; sub_402150+B22↓j ...
.text:00402C11                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402C15                 jge     short loc_402C60
.text:00402C17                 mov     esi, [esp+5Ch+arg_4]
.text:00402C1B                 mov     eax, [esi+ebx*4]
.text:00402C1E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402C21                 jz      short loc_402C68
.text:00402C23                 lea     esi, [esi+0]
.text:00402C29                 lea     edi, [edi+0]
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_402150+AFC↓j
.text:00402C30                                         ; sub_402150+B1C↓j
.text:00402C30                 lea     eax, [ebx+1]
.text:00402C33                 mov     ebx, eax
.text:00402C35                 mov     [ebp+0], eax
.text:00402C38                 cmp     eax, [esp+5Ch+arg_0]
.text:00402C3C                 jge     short loc_402C60
.text:00402C3E                 mov     edi, [esp+5Ch+arg_4]
.text:00402C42                 mov     edx, [edi+eax*4]
.text:00402C45                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402C48                 jz      short loc_402C50
.text:00402C4A
.text:00402C4A loc_402C4A:                             ; CODE XREF: sub_402150+B04↓j
.text:00402C4A                 mov     ebx, eax
.text:00402C4C                 jmp     short loc_402C30
.text:00402C4C ; ---------------------------------------------------------------------------
.text:00402C4E                 align 10h
.text:00402C50
.text:00402C50 loc_402C50:                             ; CODE XREF: sub_402150+AF8↑j
.text:00402C50                 cmp     byte ptr [edx+1], 0
.text:00402C54                 jz      short loc_402C4A
.text:00402C56                 lea     esi, [esi+0]
.text:00402C59                 lea     edi, [edi+0]
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_402150+AC5↑j
.text:00402C60                                         ; sub_402150+AEC↑j ...
.text:00402C60                 mov     [ebp+24h], ebx
.text:00402C63                 jmp     loc_402220
.text:00402C68 ; ---------------------------------------------------------------------------
.text:00402C68
.text:00402C68 loc_402C68:                             ; CODE XREF: sub_402150+AD1↑j
.text:00402C68                 cmp     byte ptr [eax+1], 0
.text:00402C6C                 jz      short loc_402C30
.text:00402C6E                 jmp     short loc_402C60
.text:00402C70 ; ---------------------------------------------------------------------------
.text:00402C70
.text:00402C70 loc_402C70:                             ; CODE XREF: sub_402150+AA8↑j
.text:00402C70                 cmp     edx, ebx
.text:00402C72                 jz      short loc_402C11
.text:00402C74                 mov     [ebp+20h], ebx
.text:00402C77                 jmp     short loc_402C11
.text:00402C79 ; ---------------------------------------------------------------------------
.text:00402C79
.text:00402C79 loc_402C79:                             ; CODE XREF: sub_402150+88↑j
.text:00402C79                 mov     dword ptr [ebp+18h], 0
.text:00402C80                 mov     esi, [esp+5Ch+Str]
.text:00402C84
.text:00402C84 loc_402C84:                             ; CODE XREF: sub_402150+B49↓j
.text:00402C84                 inc     esi
.text:00402C85                 jmp     loc_4021E8
.text:00402C85 ; ---------------------------------------------------------------------------
.text:00402C8A                 align 10h
.text:00402C90
.text:00402C90 loc_402C90:                             ; CODE XREF: sub_402150+80↑j
.text:00402C90                 mov     dword ptr [ebp+18h], 2
.text:00402C97                 mov     esi, ecx
.text:00402C99                 jmp     short loc_402C84
.text:00402C99 ; ---------------------------------------------------------------------------
.text:00402C9B                 align 10h
.text:00402CA0
.text:00402CA0 loc_402CA0:                             ; CODE XREF: sub_402150+69↑j
.text:00402CA0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402CA7                 call    getenv
.text:00402CAC                 test    eax, eax
.text:00402CAE                 jz      loc_4021C4
.text:00402CB4                 jmp     loc_4021BF
.text:00402CB4 ; ---------------------------------------------------------------------------
.text:00402CB9                 align 10h
.text:00402CC0
.text:00402CC0 loc_402CC0:                             ; CODE XREF: sub_402150+3F↑j
.text:00402CC0                 mov     dword ptr [ebp+0], 1
.text:00402CC7                 mov     ebx, 1
.text:00402CCC                 jmp     loc_4021A0
.text:00402CCC sub_402150      endp
.text:00402CCC
.text:00402CD1 ; ---------------------------------------------------------------------------
.text:00402CD1                 jmp     short sub_402CE0
.text:00402CD1 ; ---------------------------------------------------------------------------
.text:00402CD3                 align 10h
.text:00402CE0
.text:00402CE0 ; =============== S U B R O U T I N E =======================================
.text:00402CE0
.text:00402CE0
.text:00402CE0 ; int __cdecl sub_402CE0(int, int, char *, int, int, int, int)
.text:00402CE0 sub_402CE0      proc near               ; CODE XREF: .text:00402CD1↑j
.text:00402CE0                                         ; sub_402F20+3A↓p ...
.text:00402CE0
.text:00402CE0 var_2C          = dword ptr -2Ch
.text:00402CE0 var_28          = dword ptr -28h
.text:00402CE0 Str             = dword ptr -24h
.text:00402CE0 var_20          = dword ptr -20h
.text:00402CE0 var_1C          = dword ptr -1Ch
.text:00402CE0 var_18          = dword ptr -18h
.text:00402CE0 var_14          = dword ptr -14h
.text:00402CE0 var_10          = dword ptr -10h
.text:00402CE0 arg_0           = dword ptr  4
.text:00402CE0 arg_4           = dword ptr  8
.text:00402CE0 arg_8           = dword ptr  0Ch
.text:00402CE0 arg_C           = dword ptr  10h
.text:00402CE0 arg_10          = dword ptr  14h
.text:00402CE0 arg_14          = dword ptr  18h
.text:00402CE0 arg_18          = dword ptr  1Ch
.text:00402CE0
.text:00402CE0                 sub     esp, 2Ch
.text:00402CE3                 mov     edx, dword_407010
.text:00402CE9                 mov     [esp+2Ch+var_10], offset dword_408000 ; int
.text:00402CF1                 mov     ecx, dword_407014
.text:00402CF7                 mov     ds:dword_408000, edx
.text:00402CFD                 mov     edx, [esp+2Ch+arg_18]
.text:00402D01                 mov     ds:dword_408004, ecx
.text:00402D07                 mov     ecx, [esp+2Ch+arg_14]
.text:00402D0B                 mov     [esp+2Ch+var_14], edx ; int
.text:00402D0F                 mov     edx, [esp+2Ch+arg_10]
.text:00402D13                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402D17                 mov     ecx, [esp+2Ch+arg_C]
.text:00402D1B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402D1F                 mov     edx, [esp+2Ch+arg_8]
.text:00402D23                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402D27                 mov     ecx, [esp+2Ch+arg_4]
.text:00402D2B                 mov     [esp+2Ch+Str], edx ; Str
.text:00402D2F                 mov     edx, [esp+2Ch+arg_0]
.text:00402D33                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402D37                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402D3A                 call    sub_402150
.text:00402D3F                 mov     ecx, ds:dword_408000
.text:00402D45                 mov     dword_407010, ecx
.text:00402D4B                 mov     ecx, ds:dword_40800C
.text:00402D51                 mov     ds:dword_4082C0, ecx
.text:00402D57                 mov     ecx, ds:dword_408008
.text:00402D5D                 mov     dword_407018, ecx
.text:00402D63                 add     esp, 2Ch
.text:00402D66                 retn
.text:00402D66 sub_402CE0      endp
.text:00402D66
.text:00402D66 ; ---------------------------------------------------------------------------
.text:00402D67                 align 10h
.text:00402D70                 sub     esp, 2Ch
.text:00402D73                 mov     edx, dword_407010
.text:00402D79                 mov     dword ptr [esp+1Ch], offset dword_408000
.text:00402D81                 mov     ecx, dword_407014
.text:00402D87                 mov     dword ptr [esp+18h], 1
.text:00402D8F                 mov     ds:dword_408000, edx
.text:00402D95                 mov     edx, [esp+38h]
.text:00402D99                 mov     ds:dword_408004, ecx
.text:00402D9F                 mov     ecx, [esp+34h]
.text:00402DA3                 mov     [esp+8], edx
.text:00402DA7                 mov     edx, [esp+30h]
.text:00402DAB                 mov     [esp+4], ecx
.text:00402DAF                 mov     dword ptr [esp+14h], 0
.text:00402DB7                 mov     dword ptr [esp+10h], 0
.text:00402DBF                 mov     dword ptr [esp+0Ch], 0
.text:00402DC7                 mov     [esp], edx
.text:00402DCA                 call    sub_402150
.text:00402DCF                 mov     ecx, ds:dword_408000
.text:00402DD5                 mov     dword_407010, ecx
.text:00402DDB                 mov     ecx, ds:dword_40800C
.text:00402DE1                 mov     ds:dword_4082C0, ecx
.text:00402DE7                 mov     ecx, ds:dword_408008
.text:00402DED                 mov     dword_407018, ecx
.text:00402DF3                 add     esp, 2Ch
.text:00402DF6                 retn
.text:00402DF6 ; ---------------------------------------------------------------------------
.text:00402DF7                 align 10h
.text:00402E00
.text:00402E00 ; =============== S U B R O U T I N E =======================================
.text:00402E00
.text:00402E00
.text:00402E00 sub_402E00      proc near               ; CODE XREF: sub_402150+113↑p
.text:00402E00                                         ; sub_402150+AB9↑p
.text:00402E00
.text:00402E00 var_2C          = dword ptr -2Ch
.text:00402E00 var_28          = dword ptr -28h
.text:00402E00 var_24          = dword ptr -24h
.text:00402E00 var_20          = dword ptr -20h
.text:00402E00 var_1C          = dword ptr -1Ch
.text:00402E00 var_18          = dword ptr -18h
.text:00402E00 var_14          = dword ptr -14h
.text:00402E00 arg_0           = dword ptr  4
.text:00402E00 arg_4           = dword ptr  8
.text:00402E00
.text:00402E00                 push    ebp
.text:00402E01                 push    edi
.text:00402E02                 push    esi
.text:00402E03                 push    ebx
.text:00402E04                 sub     esp, 1Ch
.text:00402E07                 mov     ecx, [esp+2Ch+arg_4]
.text:00402E0B                 mov     eax, [esp+2Ch+arg_4]
.text:00402E0F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402E13                 mov     edx, [ecx+20h]
.text:00402E16                 mov     edi, [esp+2Ch+arg_0]
.text:00402E1A                 mov     ecx, [ebx]
.text:00402E1C                 mov     [esp+2Ch+var_2C], edx
.text:00402E1F                 mov     [esp+2Ch+var_14], edx
.text:00402E23                 mov     edx, [eax+24h]
.text:00402E26                 mov     [esp+2Ch+var_28], ecx
.text:00402E2A                 mov     [esp+2Ch+var_1C], ecx
.text:00402E2E                 cmp     ecx, edx
.text:00402E30                 mov     [esp+2Ch+var_18], edx
.text:00402E34                 jle     short loc_402EB0
.text:00402E36                 mov     esi, [esp+2Ch+var_2C]
.text:00402E39                 cmp     edx, esi
.text:00402E3B                 jle     short loc_402EB0
.text:00402E3D                 lea     esi, [esi+0]
.text:00402E40
.text:00402E40 loc_402E40:                             ; CODE XREF: sub_402E00+A1↓j
.text:00402E40                 mov     ebx, [esp+2Ch+var_1C]
.text:00402E44                 mov     edx, [esp+2Ch+var_18]
.text:00402E48                 mov     ebp, [esp+2Ch+var_18]
.text:00402E4C                 mov     eax, [esp+2Ch+var_14]
.text:00402E50                 sub     ebx, edx
.text:00402E52                 mov     [esp+2Ch+var_20], ebx
.text:00402E56                 sub     ebp, eax
.text:00402E58                 cmp     ebx, ebp
.text:00402E5A                 jle     short loc_402ED5
.text:00402E5C                 xor     esi, esi
.text:00402E5E                 cmp     esi, ebp
.text:00402E60                 jge     short loc_402E8D
.text:00402E62                 mov     ecx, [esp+2Ch+var_1C]
.text:00402E66                 sub     ecx, ebp
.text:00402E68                 mov     [esp+2Ch+var_24], ecx
.text:00402E6C                 lea     esi, [esi+0]
.text:00402E70
.text:00402E70 loc_402E70:                             ; CODE XREF: sub_402E00+8B↓j
.text:00402E70                 mov     ecx, [esp+2Ch+var_14]
.text:00402E74                 mov     edx, [esp+2Ch+var_24]
.text:00402E78                 add     ecx, esi
.text:00402E7A                 add     edx, esi
.text:00402E7C                 mov     ebx, [edi+ecx*4]
.text:00402E7F                 mov     eax, [edi+edx*4]
.text:00402E82                 inc     esi
.text:00402E83                 cmp     esi, ebp
.text:00402E85                 mov     [edi+ecx*4], eax
.text:00402E88                 mov     [edi+edx*4], ebx
.text:00402E8B                 jl      short loc_402E70
.text:00402E8D
.text:00402E8D loc_402E8D:                             ; CODE XREF: sub_402E00+60↑j
.text:00402E8D                 sub     [esp+2Ch+var_1C], ebp
.text:00402E91
.text:00402E91 loc_402E91:                             ; CODE XREF: sub_402E00+107↓j
.text:00402E91                 mov     eax, [esp+2Ch+var_18]
.text:00402E95                 cmp     [esp+2Ch+var_1C], eax
.text:00402E99                 jle     short loc_402EB0
.text:00402E9B                 mov     ebp, [esp+2Ch+var_14]
.text:00402E9F                 cmp     eax, ebp
.text:00402EA1                 jg      short loc_402E40
.text:00402EA3                 lea     esi, [esi+0]
.text:00402EA9                 lea     edi, [edi+0]
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402E00+34↑j
.text:00402EB0                                         ; sub_402E00+3B↑j ...
.text:00402EB0                 mov     esi, [esp+2Ch+var_28]
.text:00402EB4                 mov     ecx, [esp+2Ch+var_18]
.text:00402EB8                 mov     eax, [esp+2Ch+var_2C]
.text:00402EBB                 mov     edi, [esp+2Ch+arg_4]
.text:00402EBF                 mov     edx, [esp+2Ch+var_28]
.text:00402EC3                 sub     esi, ecx
.text:00402EC5                 add     esi, eax
.text:00402EC7                 mov     [edi+20h], esi
.text:00402ECA                 mov     [edi+24h], edx
.text:00402ECD                 add     esp, 1Ch
.text:00402ED0                 pop     ebx
.text:00402ED1                 pop     esi
.text:00402ED2                 pop     edi
.text:00402ED3                 pop     ebp
.text:00402ED4                 retn
.text:00402ED5 ; ---------------------------------------------------------------------------
.text:00402ED5
.text:00402ED5 loc_402ED5:                             ; CODE XREF: sub_402E00+5A↑j
.text:00402ED5                 xor     esi, esi
.text:00402ED7                 cmp     esi, [esp+2Ch+var_20]
.text:00402EDB                 jge     short loc_402EFF
.text:00402EDD                 lea     esi, [esi+0]
.text:00402EE0
.text:00402EE0 loc_402EE0:                             ; CODE XREF: sub_402E00+FD↓j
.text:00402EE0                 mov     ebx, [esp+2Ch+var_14]
.text:00402EE4                 mov     ebp, [esp+2Ch+var_18]
.text:00402EE8                 add     ebx, esi
.text:00402EEA                 add     ebp, esi
.text:00402EEC                 mov     edx, [edi+ebx*4]
.text:00402EEF                 inc     esi
.text:00402EF0                 cmp     esi, [esp+2Ch+var_20]
.text:00402EF4                 mov     ecx, [edi+ebp*4]
.text:00402EF7                 mov     [edi+ebx*4], ecx
.text:00402EFA                 mov     [edi+ebp*4], edx
.text:00402EFD                 jl      short loc_402EE0
.text:00402EFF
.text:00402EFF loc_402EFF:                             ; CODE XREF: sub_402E00+DB↑j
.text:00402EFF                 mov     esi, [esp+2Ch+var_20]
.text:00402F03                 add     [esp+2Ch+var_14], esi
.text:00402F07                 jmp     short loc_402E91
.text:00402F07 sub_402E00      endp
.text:00402F07
.text:00402F07 ; ---------------------------------------------------------------------------
.text:00402F09                 align 20h
.text:00402F20
.text:00402F20 ; =============== S U B R O U T I N E =======================================
.text:00402F20
.text:00402F20
.text:00402F20 ; int __cdecl sub_402F20(int, int, char *, int, int)
.text:00402F20 sub_402F20      proc near               ; CODE XREF: sub_401560+CF↑p
.text:00402F20                                         ; sub_4030C0+58↓p
.text:00402F20
.text:00402F20 var_1C          = dword ptr -1Ch
.text:00402F20 var_18          = dword ptr -18h
.text:00402F20 var_14          = dword ptr -14h
.text:00402F20 var_10          = dword ptr -10h
.text:00402F20 var_C           = dword ptr -0Ch
.text:00402F20 var_8           = dword ptr -8
.text:00402F20 var_4           = dword ptr -4
.text:00402F20 arg_0           = dword ptr  4
.text:00402F20 arg_4           = dword ptr  8
.text:00402F20 arg_8           = dword ptr  0Ch
.text:00402F20 arg_C           = dword ptr  10h
.text:00402F20 arg_10          = dword ptr  14h
.text:00402F20
.text:00402F20                 sub     esp, 1Ch
.text:00402F23                 mov     edx, [esp+1Ch+arg_C]
.text:00402F27                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402F2F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402F33                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402F3B                 mov     [esp+1Ch+var_10], edx ; int
.text:00402F3F                 mov     edx, [esp+1Ch+arg_4]
.text:00402F43                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402F47                 mov     ecx, [esp+1Ch+arg_8]
.text:00402F4B                 mov     [esp+1Ch+var_18], edx ; int
.text:00402F4F                 mov     edx, [esp+1Ch+arg_0]
.text:00402F53                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402F57                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402F5A                 call    sub_402CE0
.text:00402F5F                 add     esp, 1Ch
.text:00402F62                 retn
.text:00402F62 sub_402F20      endp
.text:00402F62
.text:00402F62 ; ---------------------------------------------------------------------------
.text:00402F63                 align 10h
.text:00402F70                 sub     esp, 2Ch
.text:00402F73                 mov     edx, [esp+44h]
.text:00402F77                 mov     dword ptr [esp+18h], 0
.text:00402F7F                 mov     ecx, [esp+40h]
.text:00402F83                 mov     dword ptr [esp+14h], 0
.text:00402F8B                 mov     [esp+1Ch], edx
.text:00402F8F                 mov     edx, [esp+3Ch]
.text:00402F93                 mov     [esp+10h], ecx
.text:00402F97                 mov     ecx, [esp+38h]
.text:00402F9B                 mov     [esp+0Ch], edx
.text:00402F9F                 mov     edx, [esp+34h]
.text:00402FA3                 mov     [esp+8], ecx
.text:00402FA7                 mov     [esp+4], edx
.text:00402FAB                 mov     edx, [esp+30h]
.text:00402FAF                 mov     [esp], edx
.text:00402FB2                 call    sub_402150
.text:00402FB7                 add     esp, 2Ch
.text:00402FBA                 retn
.text:00402FBA ; ---------------------------------------------------------------------------
.text:00402FBB                 align 10h
.text:00402FC0                 sub     esp, 1Ch
.text:00402FC3                 mov     edx, [esp+2Ch]
.text:00402FC7                 mov     dword ptr [esp+18h], 0
.text:00402FCF                 mov     ecx, [esp+30h]
.text:00402FD3                 mov     dword ptr [esp+14h], 1
.text:00402FDB                 mov     [esp+0Ch], edx
.text:00402FDF                 mov     edx, [esp+24h]
.text:00402FE3                 mov     [esp+10h], ecx
.text:00402FE7                 mov     ecx, [esp+28h]
.text:00402FEB                 mov     [esp+4], edx
.text:00402FEF                 mov     edx, [esp+20h]
.text:00402FF3                 mov     [esp+8], ecx
.text:00402FF7                 mov     [esp], edx
.text:00402FFA                 call    sub_402CE0
.text:00402FFF                 add     esp, 1Ch
.text:00403002                 retn
.text:00403002 ; ---------------------------------------------------------------------------
.text:00403003                 align 10h
.text:00403010                 sub     esp, 2Ch
.text:00403013                 mov     edx, [esp+44h]
.text:00403017                 mov     dword ptr [esp+18h], 0
.text:0040301F                 mov     ecx, [esp+40h]
.text:00403023                 mov     dword ptr [esp+14h], 1
.text:0040302B                 mov     [esp+1Ch], edx
.text:0040302F                 mov     edx, [esp+3Ch]
.text:00403033                 mov     [esp+10h], ecx
.text:00403037                 mov     ecx, [esp+38h]
.text:0040303B                 mov     [esp+0Ch], edx
.text:0040303F                 mov     edx, [esp+34h]
.text:00403043                 mov     [esp+8], ecx
.text:00403047                 mov     [esp+4], edx
.text:0040304B                 mov     edx, [esp+30h]
.text:0040304F                 mov     [esp], edx
.text:00403052                 call    sub_402150
.text:00403057                 add     esp, 2Ch
.text:0040305A                 retn
.text:0040305A ; ---------------------------------------------------------------------------
.text:0040305B                 align 10h
.text:00403060 aHelp           db 'help',0             ; DATA XREF: .text:off_403080↓o
.text:00403065 aVersion        db 'version',0          ; DATA XREF: .text:00403090↓o
.text:0040306D                 align 20h
.text:00403080 off_403080      dd offset aHelp         ; DATA XREF: sub_4030C0+3D↓o
.text:00403080                                         ; "help"
.text:00403084                 dd 2 dup(0)
.text:0040308C                 dd 68h
.text:00403090                 dd offset aVersion      ; "version"
.text:00403094                 dd 2 dup(0)
.text:0040309C                 dd 76h, 4 dup(0)
.text:004030B0 ; ---------------------------------------------------------------------------
.text:004030B0
.text:004030B0 loc_4030B0:                             ; DATA XREF: sub_4030C0+45↓o
.text:004030B0                 sub     eax, [eax]
.text:004030B2                 lea     esi, [esi+0]
.text:004030B9                 lea     edi, [edi+0]
.text:004030C0
.text:004030C0 ; =============== S U B R O U T I N E =======================================
.text:004030C0
.text:004030C0
.text:004030C0 ; int __cdecl sub_4030C0(int, int, FILE *, int, int, int, char)
.text:004030C0 sub_4030C0      proc near               ; CODE XREF: sub_401560+A5↑p
.text:004030C0
.text:004030C0 Code            = dword ptr -1Ch
.text:004030C0 var_18          = dword ptr -18h
.text:004030C0 var_14          = dword ptr -14h
.text:004030C0 var_10          = dword ptr -10h
.text:004030C0 var_C           = dword ptr -0Ch
.text:004030C0 var_4           = dword ptr -4
.text:004030C0 arg_0           = dword ptr  4
.text:004030C0 arg_4           = dword ptr  8
.text:004030C0 arg_8           = dword ptr  0Ch
.text:004030C0 arg_C           = dword ptr  10h
.text:004030C0 arg_10          = dword ptr  14h
.text:004030C0 arg_14          = dword ptr  18h
.text:004030C0 arg_18          = byte ptr  1Ch
.text:004030C0
.text:004030C0                 sub     esp, 1Ch
.text:004030C3                 xor     eax, eax
.text:004030C5                 cmp     [esp+1Ch+arg_0], 2
.text:004030CA                 mov     [esp+1Ch+var_4], ebx
.text:004030CE                 mov     ebx, dword_407014
.text:004030D4                 mov     dword_407014, eax
.text:004030D9                 jz      short loc_4030F1
.text:004030DB
.text:004030DB loc_4030DB:                             ; CODE XREF: sub_4030C0+60↓j
.text:004030DB                                         ; sub_4030C0+6A↓j
.text:004030DB                 mov     dword_407014, ebx
.text:004030E1                 xor     edx, edx
.text:004030E3                 mov     ebx, [esp+1Ch+var_4]
.text:004030E7                 mov     dword_407010, edx
.text:004030ED                 add     esp, 1Ch
.text:004030F0                 retn
.text:004030F1 ; ---------------------------------------------------------------------------
.text:004030F1
.text:004030F1 loc_4030F1:                             ; CODE XREF: sub_4030C0+19↑j
.text:004030F1                 mov     [esp+1Ch+var_C], 0 ; int
.text:004030F9                 mov     edx, [esp+1Ch+arg_4]
.text:004030FD                 mov     [esp+1Ch+var_10], offset off_403080 ; int
.text:00403105                 mov     [esp+1Ch+var_14], offset loc_4030B0 ; char *
.text:0040310D                 mov     [esp+1Ch+var_18], edx ; int
.text:00403111                 mov     [esp+1Ch+Code], 2 ; int
.text:00403118                 call    sub_402F20
.text:0040311D                 cmp     eax, 0FFFFFFFFh
.text:00403120                 jz      short loc_4030DB
.text:00403122                 cmp     eax, 68h ; 'h'
.text:00403125                 jz      short loc_40312E
.text:00403127                 cmp     eax, 76h ; 'v'
.text:0040312A                 jnz     short loc_4030DB
.text:0040312C                 jmp     short loc_403139
.text:0040312E ; ---------------------------------------------------------------------------
.text:0040312E
.text:0040312E loc_40312E:                             ; CODE XREF: sub_4030C0+65↑j
.text:0040312E                 mov     [esp+1Ch+Code], 0
.text:00403135                 call    [esp+1Ch+arg_14]
.text:00403139
.text:00403139 loc_403139:                             ; CODE XREF: sub_4030C0+6C↑j
.text:00403139                 mov     ecx, [esp+1Ch+arg_10]
.text:0040313D                 lea     ebx, [esp+1Ch+arg_18]
.text:00403141                 mov     edx, [esp+1Ch+arg_C]
.text:00403145                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00403149                 mov     ebx, [esp+1Ch+arg_8]
.text:0040314D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00403151                 mov     ecx, ds:_iob
.text:00403157                 mov     [esp+1Ch+var_14], edx ; int
.text:0040315B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040315F                 add     ecx, 20h ; ' '
.text:00403162                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00403165                 call    sub_404620
.text:0040316A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00403171                 call    exit
.text:00403171 sub_4030C0      endp
.text:00403171
.text:00403171 ; ---------------------------------------------------------------------------
.text:00403176                 align 10h
.text:00403180                 mov     edx, [esp+4]
.text:00403184                 mov     ds:dword_408030, edx
.text:0040318A                 retn
.text:0040318A ; ---------------------------------------------------------------------------
.text:0040318B aWriteError     db 'write error',0      ; DATA XREF: sub_4031B0:loc_4031F9↓o
.text:00403197 ; const char aSS[]
.text:00403197 aSS             db '%s: %s',0           ; DATA XREF: sub_4031B0+77↓o
.text:0040319E ; const char aS_4[]
.text:0040319E aS_4            db '%s',0               ; DATA XREF: sub_4031B0+A0↓o
.text:004031A1 ; ---------------------------------------------------------------------------
.text:004031A1                 jmp     short sub_4031B0
.text:004031A1 ; ---------------------------------------------------------------------------
.text:004031A3                 align 10h
.text:004031B0
.text:004031B0 ; =============== S U B R O U T I N E =======================================
.text:004031B0
.text:004031B0
.text:004031B0 ; void __cdecl sub_4031B0()
.text:004031B0 sub_4031B0      proc near               ; CODE XREF: .text:004031A1↑j
.text:004031B0                                         ; DATA XREF: sub_401560+5C↑o
.text:004031B0
.text:004031B0 Stream          = dword ptr -2Ch
.text:004031B0 ErrorMessage    = dword ptr -28h
.text:004031B0 var_24          = dword ptr -24h
.text:004031B0 var_20          = byte ptr -20h
.text:004031B0 var_1C          = dword ptr -1Ch
.text:004031B0 var_9           = byte ptr -9
.text:004031B0
.text:004031B0                 push    esi
.text:004031B1                 push    ebx
.text:004031B2                 sub     esp, 24h
.text:004031B5                 mov     edx, ds:_iob
.text:004031BB                 mov     ecx, [edx+2Ch]
.text:004031BE                 lea     esi, [edx+20h]
.text:004031C1                 shr     ecx, 5
.text:004031C4                 mov     bl, cl
.text:004031C6                 mov     ecx, [edx+20h]
.text:004031C9                 and     bl, 1
.text:004031CC                 cmp     ecx, [esi+8]
.text:004031CF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004031D2                 setz    [esp+2Ch+var_9]
.text:004031D7                 call    fclose
.text:004031DC                 test    eax, eax
.text:004031DE                 setnz   al
.text:004031E1                 test    bl, bl
.text:004031E3                 jnz     loc_403273
.text:004031E9                 test    al, al
.text:004031EB                 jz      short loc_403240
.text:004031ED
.text:004031ED loc_4031ED:                             ; CODE XREF: sub_4031B0+CD↓j
.text:004031ED                 call    _errno
.text:004031F2                 mov     esi, [eax]
.text:004031F4
.text:004031F4 loc_4031F4:                             ; CODE XREF: sub_4031B0+C7↓j
.text:004031F4                 cmp     esi, 9
.text:004031F7                 jz      short loc_403266
.text:004031F9
.text:004031F9 loc_4031F9:                             ; CODE XREF: sub_4031B0+B8↓j
.text:004031F9                                         ; sub_4031B0+C1↓j
.text:004031F9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403200                 call    ds:libintl_gettext
.text:00403206                 mov     ebx, eax
.text:00403208                 mov     eax, ds:dword_408030
.text:0040320D                 test    eax, eax
.text:0040320F                 jz      short loc_403246
.text:00403211                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403214                 call    sub_405960
.text:00403219                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040321D                 mov     edx, Code
.text:00403223                 mov     [esp+2Ch+var_1C], ebx
.text:00403227                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:0040322F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403233                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403236                 call    sub_405F50
.text:0040323B                 nop
.text:0040323C                 lea     esi, [esi+0]
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_4031B0+3B↑j
.text:00403240                                         ; sub_4031B0+B4↓j ...
.text:00403240                 add     esp, 24h
.text:00403243                 pop     ebx
.text:00403244                 pop     esi
.text:00403245                 retn
.text:00403246 ; ---------------------------------------------------------------------------
.text:00403246
.text:00403246 loc_403246:                             ; CODE XREF: sub_4031B0+5F↑j
.text:00403246                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040324A                 mov     ebx, Code
.text:00403250                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:00403258                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040325C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040325F                 call    sub_405F50
.text:00403264                 jmp     short loc_403240
.text:00403266 ; ---------------------------------------------------------------------------
.text:00403266
.text:00403266 loc_403266:                             ; CODE XREF: sub_4031B0+47↑j
.text:00403266                 test    bl, bl
.text:00403268                 jnz     short loc_4031F9
.text:0040326A                 cmp     [esp+2Ch+var_9], 0
.text:0040326F                 jnz     short loc_403240
.text:00403271                 jmp     short loc_4031F9
.text:00403273 ; ---------------------------------------------------------------------------
.text:00403273
.text:00403273 loc_403273:                             ; CODE XREF: sub_4031B0+33↑j
.text:00403273                 xor     esi, esi
.text:00403275                 test    al, al
.text:00403277                 jz      loc_4031F4
.text:0040327D                 jmp     loc_4031ED
.text:0040327D sub_4031B0      endp
.text:0040327D
.text:0040327D ; ---------------------------------------------------------------------------
.text:00403282                 align 10h
.text:00403290
.text:00403290 ; =============== S U B R O U T I N E =======================================
.text:00403290
.text:00403290
.text:00403290 ; int __cdecl sub_403290(FILE *, int, int, int)
.text:00403290 sub_403290      proc near               ; CODE XREF: sub_401560+2D6↑p
.text:00403290                                         ; .text:004034CF↓p
.text:00403290
.text:00403290 File            = dword ptr -2Ch
.text:00403290 var_28          = dword ptr -28h
.text:00403290 var_24          = dword ptr -24h
.text:00403290 var_14          = dword ptr -14h
.text:00403290 arg_0           = dword ptr  4
.text:00403290 arg_4           = dword ptr  8
.text:00403290 arg_8           = dword ptr  0Ch
.text:00403290 arg_C           = dword ptr  10h
.text:00403290
.text:00403290                 push    ebp
.text:00403291                 push    edi
.text:00403292                 push    esi
.text:00403293                 push    ebx
.text:00403294                 sub     esp, 1Ch
.text:00403297                 mov     ebp, [esp+2Ch+arg_4]
.text:0040329B                 mov     esi, [esp+2Ch+arg_0]
.text:0040329F                 test    ebp, ebp
.text:004032A1                 jz      loc_403434
.text:004032A7                 mov     edx, ds:dword_408040
.text:004032AD
.text:004032AD loc_4032AD:                             ; CODE XREF: sub_403290+1AC↓j
.text:004032AD                 cmp     ebp, edx
.text:004032AF                 jz      short loc_4032D8
.text:004032B1                 test    edx, edx
.text:004032B3                 jz      short loc_4032D8
.text:004032B5                 xor     ebx, ebx
.text:004032B7                 mov     cl, 1
.text:004032B9                 cmp     ebx, [esp+2Ch+arg_8]
.text:004032BD                 jnb     short loc_4032D4
.text:004032BF                 nop
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_403290+42↓j
.text:004032C0                 movzx   eax, byte ptr [ebx+edx]
.text:004032C4                 cmp     [ebx+ebp], al
.text:004032C7                 jnz     loc_40342D
.text:004032CD                 inc     ebx
.text:004032CE                 cmp     ebx, [esp+2Ch+arg_8]
.text:004032D2                 jb      short loc_4032C0
.text:004032D4
.text:004032D4 loc_4032D4:                             ; CODE XREF: sub_403290+2D↑j
.text:004032D4                                         ; sub_403290+19F↓j
.text:004032D4                 test    cl, cl
.text:004032D6                 jnz     short loc_403312
.text:004032D8
.text:004032D8 loc_4032D8:                             ; CODE XREF: sub_403290+1F↑j
.text:004032D8                                         ; sub_403290+23↑j
.text:004032D8                 cld
.text:004032D9                 xor     eax, eax
.text:004032DB                 mov     ds:dword_408040, ebp
.text:004032E1                 mov     edi, offset byte_408050
.text:004032E6                 mov     ecx, 40h ; '@'
.text:004032EB                 rep stosd
.text:004032ED                 xor     edx, edx
.text:004032EF                 cmp     eax, [esp+2Ch+arg_8]
.text:004032F3                 jnb     short loc_403312
.text:004032F5                 lea     esi, [esi+0]
.text:004032F9                 lea     edi, [edi+0]
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_403290+80↓j
.text:00403300                 movzx   ecx, byte ptr [edx+ebp]
.text:00403304                 inc     edx
.text:00403305                 cmp     edx, [esp+2Ch+arg_8]
.text:00403309                 mov     ds:byte_408050[ecx], 1
.text:00403310                 jb      short loc_403300
.text:00403312
.text:00403312 loc_403312:                             ; CODE XREF: sub_403290+46↑j
.text:00403312                                         ; sub_403290+63↑j
.text:00403312                 mov     edx, [esi+4]
.text:00403315                 dec     edx
.text:00403316                 test    edx, edx
.text:00403318                 mov     [esi+4], edx
.text:0040331B                 js      loc_40341E
.text:00403321                 mov     ecx, [esi]
.text:00403323                 movzx   edi, byte ptr [ecx]
.text:00403326                 inc     ecx
.text:00403327                 mov     [esi], ecx
.text:00403329
.text:00403329 loc_403329:                             ; CODE XREF: sub_403290+198↓j
.text:00403329                 test    edi, edi
.text:0040332B                 js      short loc_403365
.text:0040332D                 cmp     ds:byte_408050[edi], 0
.text:00403334                 jz      short loc_403365
.text:00403336                 lea     esi, [esi+0]
.text:00403339                 lea     edi, [edi+0]
.text:00403340
.text:00403340 loc_403340:                             ; CODE XREF: sub_403290+D3↓j
.text:00403340                 mov     ebx, [esi+4]
.text:00403343                 dec     ebx
.text:00403344                 test    ebx, ebx
.text:00403346                 mov     [esi+4], ebx
.text:00403349                 js      loc_40340F
.text:0040334F                 mov     ebp, [esi]
.text:00403351                 movzx   edi, byte ptr [ebp+0]
.text:00403355                 inc     ebp
.text:00403356                 mov     [esi], ebp
.text:00403358
.text:00403358 loc_403358:                             ; CODE XREF: sub_403290+189↓j
.text:00403358                 test    edi, edi
.text:0040335A                 js      short loc_403365
.text:0040335C                 cmp     ds:byte_408050[edi], 0
.text:00403363                 jnz     short loc_403340
.text:00403365
.text:00403365 loc_403365:                             ; CODE XREF: sub_403290+9B↑j
.text:00403365                                         ; sub_403290+A4↑j ...
.text:00403365                 mov     edx, [esp+2Ch+arg_C]
.text:00403369                 xor     ebx, ebx
.text:0040336B                 mov     ecx, [edx]
.text:0040336D                 mov     ebp, [edx+4]
.text:00403370                 mov     [esp+2Ch+var_14], ecx
.text:00403374                 lea     esi, [esi+0]
.text:0040337A                 lea     edi, [edi+0]
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_403290+120↓j
.text:00403380                                         ; sub_403290+12C↓j
.text:00403380                 test    edi, edi
.text:00403382                 js      short loc_403400
.text:00403384
.text:00403384 loc_403384:                             ; CODE XREF: sub_403290+177↓j
.text:00403384                 cmp     ebx, [esp+2Ch+var_14]
.text:00403388                 jz      short loc_4033E0
.text:0040338A
.text:0040338A loc_40338A:                             ; CODE XREF: sub_403290+16A↓j
.text:0040338A                 test    edi, edi
.text:0040338C                 js      short loc_4033BE
.text:0040338E                 cmp     ds:byte_408050[edi], 0
.text:00403395                 jnz     short loc_4033BE
.text:00403397                 mov     edx, edi
.text:00403399                 mov     [ebx+ebp], dl
.text:0040339C                 mov     edi, [esi+4]
.text:0040339F                 inc     ebx
.text:004033A0                 dec     edi
.text:004033A1                 test    edi, edi
.text:004033A3                 mov     [esi+4], edi
.text:004033A6                 js      short loc_4033B2
.text:004033A8                 mov     ecx, [esi]
.text:004033AA                 movzx   edi, byte ptr [ecx]
.text:004033AD                 inc     ecx
.text:004033AE                 mov     [esi], ecx
.text:004033B0                 jmp     short loc_403380
.text:004033B2 ; ---------------------------------------------------------------------------
.text:004033B2
.text:004033B2 loc_4033B2:                             ; CODE XREF: sub_403290+116↑j
.text:004033B2                 mov     [esp+2Ch+File], esi ; File
.text:004033B5                 call    _filbuf
.text:004033BA                 mov     edi, eax
.text:004033BC                 jmp     short loc_403380
.text:004033BE ; ---------------------------------------------------------------------------
.text:004033BE
.text:004033BE loc_4033BE:                             ; CODE XREF: sub_403290+FC↑j
.text:004033BE                                         ; sub_403290+105↑j
.text:004033BE                 mov     byte ptr [ebx+ebp], 0
.text:004033C2                 mov     eax, ebx
.text:004033C4                 mov     esi, [esp+2Ch+arg_C]
.text:004033C8                 mov     [esi+4], ebp
.text:004033CB                 mov     ebp, [esp+2Ch+var_14]
.text:004033CF                 mov     [esi], ebp
.text:004033D1
.text:004033D1 loc_4033D1:                             ; CODE XREF: sub_403290+17D↓j
.text:004033D1                 add     esp, 1Ch
.text:004033D4                 pop     ebx
.text:004033D5                 pop     esi
.text:004033D6                 pop     edi
.text:004033D7                 pop     ebp
.text:004033D8                 retn
.text:004033D8 ; ---------------------------------------------------------------------------
.text:004033D9                 align 10h
.text:004033E0
.text:004033E0 loc_4033E0:                             ; CODE XREF: sub_403290+F8↑j
.text:004033E0                 mov     [esp+2Ch+File], ebp ; void *
.text:004033E3                 lea     ecx, [esp+2Ch+var_14]
.text:004033E7                 mov     [esp+2Ch+var_24], 1 ; int
.text:004033EF                 mov     [esp+2Ch+var_28], ecx ; int
.text:004033F3                 call    sub_405CD0
.text:004033F8                 mov     ebp, eax
.text:004033FA                 jmp     short loc_40338A
.text:004033FA ; ---------------------------------------------------------------------------
.text:004033FC                 align 10h
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_403290+F2↑j
.text:00403400                 test    ebx, ebx
.text:00403402                 mov     eax, 0FFFFFFFFh
.text:00403407                 jnz     loc_403384
.text:0040340D                 jmp     short loc_4033D1
.text:0040340F ; ---------------------------------------------------------------------------
.text:0040340F
.text:0040340F loc_40340F:                             ; CODE XREF: sub_403290+B9↑j
.text:0040340F                 mov     [esp+2Ch+File], esi ; File
.text:00403412                 call    _filbuf
.text:00403417                 mov     edi, eax
.text:00403419                 jmp     loc_403358
.text:0040341E ; ---------------------------------------------------------------------------
.text:0040341E
.text:0040341E loc_40341E:                             ; CODE XREF: sub_403290+8B↑j
.text:0040341E                 mov     [esp+2Ch+File], esi ; File
.text:00403421                 call    _filbuf
.text:00403426                 mov     edi, eax
.text:00403428                 jmp     loc_403329
.text:0040342D ; ---------------------------------------------------------------------------
.text:0040342D
.text:0040342D loc_40342D:                             ; CODE XREF: sub_403290+37↑j
.text:0040342D                 xor     ecx, ecx
.text:0040342F                 jmp     loc_4032D4
.text:00403434 ; ---------------------------------------------------------------------------
.text:00403434
.text:00403434 loc_403434:                             ; CODE XREF: sub_403290+11↑j
.text:00403434                 mov     edx, ds:dword_408040
.text:0040343A                 test    edx, edx
.text:0040343C                 jnz     loc_4032AD
.text:00403442                 call    abort
.text:00403442 sub_403290      endp
.text:00403442
.text:00403442 ; ---------------------------------------------------------------------------
.text:00403447                 align 10h
.text:00403450                 push    ebp
.text:00403451                 push    edi
.text:00403452                 push    esi
.text:00403453                 push    ebx
.text:00403454                 sub     esp, 2Ch
.text:00403457                 mov     eax, [esp+44h]
.text:0040345B                 test    eax, eax
.text:0040345D                 jnz     loc_403596
.text:00403463                 mov     eax, 40h ; '@'
.text:00403468
.text:00403468 loc_403468:                             ; CODE XREF: .text:00403597↓j
.text:00403468                 mov     [esp+1Ch], eax
.text:0040346C                 xor     edi, edi
.text:0040346E                 mov     dword ptr [esp+4], 4
.text:00403476                 mov     [esp], eax
.text:00403479                 call    sub_405BD0
.text:0040347E                 mov     [esp+18h], eax
.text:00403482                 mov     edx, [esp+1Ch]
.text:00403486                 mov     dword ptr [esp+4], 4
.text:0040348E                 mov     [esp], edx
.text:00403491                 call    sub_405BD0
.text:00403496                 mov     dword ptr [esp+20h], 0
.text:0040349E                 mov     ebp, eax
.text:004034A0                 mov     dword ptr [esp+24h], 0
.text:004034A8                 nop
.text:004034A9                 lea     esi, [esi+0]
.text:004034B0
.text:004034B0 loc_4034B0:                             ; CODE XREF: .text:00403514↓j
.text:004034B0                 mov     ecx, [esp+4Ch]
.text:004034B4                 lea     ebx, [esp+20h]
.text:004034B8                 mov     edx, [esp+48h]
.text:004034BC                 mov     [esp+0Ch], ebx
.text:004034C0                 mov     eax, [esp+40h]
.text:004034C4                 mov     [esp+8], ecx
.text:004034C8                 mov     [esp+4], edx
.text:004034CC                 mov     [esp], eax
.text:004034CF                 call    sub_403290
.text:004034D4                 cmp     edi, [esp+1Ch]
.text:004034D8                 mov     esi, eax
.text:004034DA                 jnb     short loc_403557
.text:004034DC
.text:004034DC loc_4034DC:                             ; CODE XREF: .text:00403591↓j
.text:004034DC                 cmp     esi, 0FFFFFFFFh
.text:004034DF                 jz      short loc_403516
.text:004034E1                 mov     dword ptr [esp+4], 1
.text:004034E9                 lea     ebx, [esi+1]
.text:004034EC                 mov     [esp], ebx
.text:004034EF                 call    sub_405BD0
.text:004034F4                 mov     [ebp+edi*4+0], esi
.text:004034F8                 mov     ecx, [esp+24h]
.text:004034FC                 mov     [esp+8], ebx
.text:00403500                 mov     [esp], eax
.text:00403503                 mov     [esp+4], ecx
.text:00403507                 call    memcpy
.text:0040350C                 mov     esi, [esp+18h]
.text:00403510                 mov     [esi+edi*4], eax
.text:00403513                 inc     edi
.text:00403514                 jmp     short loc_4034B0
.text:00403516 ; ---------------------------------------------------------------------------
.text:00403516
.text:00403516 loc_403516:                             ; CODE XREF: .text:004034DF↑j
.text:00403516                 mov     dword ptr [ebp+edi*4+0], 0
.text:0040351E                 mov     ecx, [esp+18h]
.text:00403522                 mov     dword ptr [ecx+edi*4], 0
.text:00403529                 mov     esi, [esp+24h]
.text:0040352D                 mov     [esp], esi
.text:00403530                 call    free
.text:00403535                 mov     edx, [esp+54h]
.text:00403539                 mov     ebx, [esp+50h]
.text:0040353D                 mov     eax, [esp+18h]
.text:00403541                 test    edx, edx
.text:00403543                 mov     [ebx], eax
.text:00403545                 jz      short loc_40354D
.text:00403547                 mov     edx, [esp+54h]
.text:0040354B                 mov     [edx], ebp
.text:0040354D
.text:0040354D loc_40354D:                             ; CODE XREF: .text:00403545↑j
.text:0040354D                 add     esp, 2Ch
.text:00403550                 mov     eax, edi
.text:00403552                 pop     ebx
.text:00403553                 pop     esi
.text:00403554                 pop     edi
.text:00403555                 pop     ebp
.text:00403556                 retn
.text:00403557 ; ---------------------------------------------------------------------------
.text:00403557
.text:00403557 loc_403557:                             ; CODE XREF: .text:004034DA↑j
.text:00403557                 mov     dword ptr [esp+8], 4
.text:0040355F                 mov     ecx, [esp+18h]
.text:00403563                 lea     ebx, [esp+1Ch]
.text:00403567                 mov     [esp+4], ebx
.text:0040356B                 mov     [esp], ecx
.text:0040356E                 call    sub_405CD0
.text:00403573                 mov     [esp+18h], eax
.text:00403577                 mov     edx, [esp+1Ch]
.text:0040357B                 mov     [esp], ebp
.text:0040357E                 mov     dword ptr [esp+8], 4
.text:00403586                 mov     [esp+4], edx
.text:0040358A                 call    sub_405C40
.text:0040358F                 mov     ebp, eax
.text:00403591                 jmp     loc_4034DC
.text:00403596 ; ---------------------------------------------------------------------------
.text:00403596
.text:00403596 loc_403596:                             ; CODE XREF: .text:0040345D↑j
.text:00403596                 inc     eax
.text:00403597                 jmp     loc_403468
.text:00403597 ; ---------------------------------------------------------------------------
.text:0040359C                 align 10h
.text:004035A0
.text:004035A0 ; =============== S U B R O U T I N E =======================================
.text:004035A0
.text:004035A0
.text:004035A0 sub_4035A0      proc near               ; CODE XREF: sub_401560+2AE↑p
.text:004035A0
.text:004035A0 arg_0           = dword ptr  4
.text:004035A0
.text:004035A0                 mov     edx, [esp+arg_0]
.text:004035A4                 mov     dword ptr [edx], 0
.text:004035AA                 mov     dword ptr [edx+4], 0
.text:004035B1                 retn
.text:004035B1 sub_4035A0      endp
.text:004035B1
.text:004035B1 ; ---------------------------------------------------------------------------
.text:004035B2                 align 10h
.text:004035C0
.text:004035C0 ; =============== S U B R O U T I N E =======================================
.text:004035C0
.text:004035C0
.text:004035C0 sub_4035C0      proc near               ; CODE XREF: sub_401560+183↑p
.text:004035C0                                         ; sub_401560+213↑p ...
.text:004035C0
.text:004035C0 var_1C          = dword ptr -1Ch
.text:004035C0 var_18          = dword ptr -18h
.text:004035C0 var_14          = dword ptr -14h
.text:004035C0 var_10          = dword ptr -10h
.text:004035C0 arg_0           = dword ptr  4
.text:004035C0 arg_4           = dword ptr  8
.text:004035C0 arg_8           = dword ptr  0Ch
.text:004035C0
.text:004035C0                 push    edi
.text:004035C1                 push    esi
.text:004035C2                 push    ebx
.text:004035C3                 sub     esp, 10h
.text:004035C6                 mov     edx, [esp+1Ch+arg_8]
.text:004035CA                 mov     ebx, [esp+1Ch+arg_0]
.text:004035CE                 mov     esi, [esp+1Ch+arg_4]
.text:004035D2                 lea     edi, [edx+15h]
.text:004035D5                 mov     byte ptr [edx+15h], 0
.text:004035D9                 lea     esi, [esi+0]
.text:004035E0
.text:004035E0 loc_4035E0:                             ; CODE XREF: sub_4035C0+63↓j
.text:004035E0                 mov     [esp+1Ch+var_1C], ebx
.text:004035E3                 dec     edi
.text:004035E4                 mov     [esp+1Ch+var_18], esi
.text:004035E8                 mov     [esp+1Ch+var_14], 0Ah
.text:004035F0                 mov     [esp+1Ch+var_10], 0
.text:004035F8                 call    sub_406490
.text:004035FD                 add     al, 30h ; '0'
.text:004035FF                 mov     [edi], al
.text:00403601                 mov     [esp+1Ch+var_1C], ebx
.text:00403604                 mov     [esp+1Ch+var_18], esi
.text:00403608                 mov     [esp+1Ch+var_14], 0Ah
.text:00403610                 mov     [esp+1Ch+var_10], 0
.text:00403618                 call    sub_406340
.text:0040361D                 mov     ebx, eax
.text:0040361F                 mov     esi, edx
.text:00403621                 or      edx, ebx
.text:00403623                 jnz     short loc_4035E0
.text:00403625                 add     esp, 10h
.text:00403628                 mov     eax, edi
.text:0040362A                 pop     ebx
.text:0040362B                 pop     esi
.text:0040362C                 pop     edi
.text:0040362D                 retn
.text:0040362D sub_4035C0      endp
.text:0040362D
.text:0040362D ; ---------------------------------------------------------------------------
.text:0040362E                 align 10h
.text:00403630 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00403630                                         ; DATA XREF: sub_4036A0+C79↓o
.text:00403658                 db 18h dup(90h)
.text:00403670 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00403670                                         ; DATA XREF: sub_4036A0+C81↓o
.text:00403696                 align 10h
.text:004036A0
.text:004036A0 ; =============== S U B R O U T I N E =======================================
.text:004036A0
.text:004036A0
.text:004036A0 ; int __cdecl sub_4036A0(int, int, int, int, char *Str)
.text:004036A0 sub_4036A0      proc near               ; CODE XREF: sub_401560+12B↑p
.text:004036A0                                         ; sub_401560+314↑p
.text:004036A0
.text:004036A0 C               = dword ptr -13Ch
.text:004036A0 Type            = dword ptr -138h
.text:004036A0 Radix           = dword ptr -134h
.text:004036A0 var_130         = dword ptr -130h
.text:004036A0 var_124         = dword ptr -124h
.text:004036A0 var_120         = dword ptr -120h
.text:004036A0 var_11C         = dword ptr -11Ch
.text:004036A0 var_118         = dword ptr -118h
.text:004036A0 var_114         = dword ptr -114h
.text:004036A0 var_110         = dword ptr -110h
.text:004036A0 var_10C         = dword ptr -10Ch
.text:004036A0 var_108         = dword ptr -108h
.text:004036A0 var_104         = dword ptr -104h
.text:004036A0 var_100         = dword ptr -100h
.text:004036A0 var_F8          = dword ptr -0F8h
.text:004036A0 var_F4          = dword ptr -0F4h
.text:004036A0 var_F0          = dword ptr -0F0h
.text:004036A0 var_EC          = dword ptr -0ECh
.text:004036A0 var_E8          = dword ptr -0E8h
.text:004036A0 var_E4          = dword ptr -0E4h
.text:004036A0 var_E0          = dword ptr -0E0h
.text:004036A0 var_D8          = dword ptr -0D8h
.text:004036A0 var_D4          = dword ptr -0D4h
.text:004036A0 var_D0          = dword ptr -0D0h
.text:004036A0 var_CC          = dword ptr -0CCh
.text:004036A0 var_C8          = dword ptr -0C8h
.text:004036A0 var_C4          = dword ptr -0C4h
.text:004036A0 var_C0          = dword ptr -0C0h
.text:004036A0 var_B8          = dword ptr -0B8h
.text:004036A0 var_B4          = dword ptr -0B4h
.text:004036A0 var_B0          = dword ptr -0B0h
.text:004036A0 var_AC          = dword ptr -0ACh
.text:004036A0 var_A8          = dword ptr -0A8h
.text:004036A0 var_A4          = dword ptr -0A4h
.text:004036A0 var_A0          = dword ptr -0A0h
.text:004036A0 var_98          = dword ptr -98h
.text:004036A0 var_94          = dword ptr -94h
.text:004036A0 var_90          = dword ptr -90h
.text:004036A0 var_8C          = dword ptr -8Ch
.text:004036A0 var_88          = dword ptr -88h
.text:004036A0 var_84          = dword ptr -84h
.text:004036A0 var_80          = dword ptr -80h
.text:004036A0 var_78          = dword ptr -78h
.text:004036A0 var_74          = dword ptr -74h
.text:004036A0 var_70          = dword ptr -70h
.text:004036A0 var_6C          = dword ptr -6Ch
.text:004036A0 var_68          = dword ptr -68h
.text:004036A0 var_64          = dword ptr -64h
.text:004036A0 var_60          = dword ptr -60h
.text:004036A0 var_5C          = dword ptr -5Ch
.text:004036A0 var_58          = dword ptr -58h
.text:004036A0 var_50          = dword ptr -50h
.text:004036A0 var_4C          = dword ptr -4Ch
.text:004036A0 var_48          = dword ptr -48h
.text:004036A0 var_44          = dword ptr -44h
.text:004036A0 var_40          = dword ptr -40h
.text:004036A0 var_3C          = dword ptr -3Ch
.text:004036A0 var_38          = dword ptr -38h
.text:004036A0 var_34          = dword ptr -34h
.text:004036A0 var_30          = dword ptr -30h
.text:004036A0 var_29          = byte ptr -29h
.text:004036A0 var_28          = dword ptr -28h
.text:004036A0 var_24          = dword ptr -24h
.text:004036A0 var_20          = dword ptr -20h
.text:004036A0 var_18          = byte ptr -18h
.text:004036A0 arg_0           = dword ptr  4
.text:004036A0 arg_4           = dword ptr  8
.text:004036A0 arg_8           = dword ptr  0Ch
.text:004036A0 arg_C           = dword ptr  10h
.text:004036A0 Str             = dword ptr  14h
.text:004036A0
.text:004036A0                 push    ebp
.text:004036A1                 xor     eax, eax
.text:004036A3                 push    edi
.text:004036A4                 push    esi
.text:004036A5                 push    ebx
.text:004036A6                 sub     esp, 12Ch
.text:004036AC                 mov     ebp, [esp+13Ch+arg_8]
.text:004036B3                 mov     [esp+13Ch+var_28], eax
.text:004036BA                 mov     esi, [esp+13Ch+arg_0]
.text:004036C1                 cmp     ebp, 24h ; '$'
.text:004036C4                 ja      loc_404311
.text:004036CA                 mov     edi, [esp+13Ch+arg_4]
.text:004036D1                 test    edi, edi
.text:004036D3                 jz      loc_404305
.text:004036D9
.text:004036D9 loc_4036D9:                             ; CODE XREF: sub_4036A0+C6C↓j
.text:004036D9                 movzx   edx, byte ptr [esi]
.text:004036DC                 mov     ebx, esi
.text:004036DE                 mov     [esp+13Ch+var_29], dl
.text:004036E5                 lea     esi, [esi+0]
.text:004036E9                 lea     edi, [edi+0]
.text:004036F0
.text:004036F0 loc_4036F0:                             ; CODE XREF: sub_4036A0+86↓j
.text:004036F0                 movzx   edx, [esp+13Ch+var_29]
.text:004036F8                 mov     ecx, ds:__mb_cur_max
.text:004036FE                 cmp     dword ptr [ecx], 1
.text:00403701                 jz      loc_4042F2
.text:00403707                 mov     [esp+13Ch+Type], 8 ; Type
.text:0040370F                 mov     [esp+13Ch+C], edx ; C
.text:00403712                 call    _isctype
.text:00403717
.text:00403717 loc_403717:                             ; CODE XREF: sub_4036A0+C60↓j
.text:00403717                 test    eax, eax
.text:00403719                 jz      short loc_403728
.text:0040371B                 inc     ebx
.text:0040371C                 movzx   eax, byte ptr [ebx]
.text:0040371F                 mov     [esp+13Ch+var_29], al
.text:00403726                 jmp     short loc_4036F0
.text:00403728 ; ---------------------------------------------------------------------------
.text:00403728
.text:00403728 loc_403728:                             ; CODE XREF: sub_4036A0+79↑j
.text:00403728                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00403730                 mov     eax, 4
.text:00403735                 jz      short loc_4037B2
.text:00403737                 call    _errno
.text:0040373C                 mov     dword ptr [eax], 0
.text:00403742                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00403746                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0040374A                 mov     [esp+13Ch+C], esi ; String
.text:0040374D                 call    _strtoull
.text:00403752                 mov     [esp+13Ch+var_24], eax
.text:00403759                 mov     eax, [edi]
.text:0040375B                 mov     [esp+13Ch+var_20], edx
.text:00403762                 cmp     eax, esi
.text:00403764                 jz      loc_4042AC
.text:0040376A                 call    _errno
.text:0040376F                 mov     ebx, [eax]
.text:00403771                 test    ebx, ebx
.text:00403773                 jnz     loc_404287
.text:00403779
.text:00403779 loc_403779:                             ; CODE XREF: sub_4036A0+BFD↓j
.text:00403779                                         ; sub_4036A0+C4D↓j
.text:00403779                 mov     ebp, [esp+13Ch+Str]
.text:00403780                 test    ebp, ebp
.text:00403782                 jz      loc_404268
.text:00403788                 mov     ebx, [edi]
.text:0040378A                 movzx   eax, byte ptr [ebx]
.text:0040378D                 test    al, al
.text:0040378F                 jnz     short loc_4037BD
.text:00403791
.text:00403791 loc_403791:                             ; CODE XREF: sub_4036A0+312↓j
.text:00403791                                         ; sub_4036A0+320↓j
.text:00403791                 mov     edx, [esp+13Ch+var_24]
.text:00403798                 mov     edi, [esp+13Ch+var_20]
.text:0040379F                 mov     ebx, [esp+13Ch+arg_C]
.text:004037A6                 mov     [ebx], edx
.text:004037A8                 mov     [ebx+4], edi
.text:004037AB
.text:004037AB loc_4037AB:                             ; CODE XREF: sub_4036A0+BE2↓j
.text:004037AB                 mov     eax, [esp+13Ch+var_28]
.text:004037B2
.text:004037B2 loc_4037B2:                             ; CODE XREF: sub_4036A0+95↑j
.text:004037B2                                         ; sub_4036A0+16C↓j ...
.text:004037B2                 add     esp, 12Ch
.text:004037B8                 pop     ebx
.text:004037B9                 pop     esi
.text:004037BA                 pop     edi
.text:004037BB                 pop     ebp
.text:004037BC                 retn
.text:004037BD ; ---------------------------------------------------------------------------
.text:004037BD
.text:004037BD loc_4037BD:                             ; CODE XREF: sub_4036A0+EF↑j
.text:004037BD                 mov     esi, [esp+13Ch+Str]
.text:004037C4                 mov     ecx, 1
.text:004037C9                 movsx   ebp, al
.text:004037CC                 mov     [esp+13Ch+var_30], ecx
.text:004037D3                 mov     ebx, 400h
.text:004037D8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004037DC                 mov     [esp+13Ch+C], esi ; Str
.text:004037DF                 call    strchr
.text:004037E4                 test    eax, eax
.text:004037E6                 jnz     short loc_40380E
.text:004037E8
.text:004037E8 def_403859:                             ; CODE XREF: sub_4036A0+1B7↓j
.text:004037E8                                         ; sub_4036A0+1B9↓j
.text:004037E8                                         ; DATA XREF: ...
.text:004037E8                 mov     eax, [esp+13Ch+var_28] ; jumptable 00403859 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004037EF                 mov     esi, [esp+13Ch+var_24]
.text:004037F6                 mov     ebp, [esp+13Ch+var_20]
.text:004037FD                 mov     edi, [esp+13Ch+arg_C]
.text:00403804                 or      eax, 2
.text:00403807                 mov     [edi], esi
.text:00403809                 mov     [edi+4], ebp
.text:0040380C                 jmp     short loc_4037B2
.text:0040380E ; ---------------------------------------------------------------------------
.text:0040380E
.text:0040380E loc_40380E:                             ; CODE XREF: sub_4036A0+146↑j
.text:0040380E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00403816                 mov     edx, [esp+13Ch+Str]
.text:0040381D                 mov     [esp+13Ch+C], edx ; Str
.text:00403820                 call    strchr
.text:00403825                 test    eax, eax
.text:00403827                 jz      loc_404261
.text:0040382D                 mov     edx, [edi]
.text:0040382F                 movsx   eax, byte ptr [edx+1]
.text:00403833                 cmp     eax, 44h ; 'D'
.text:00403836                 jz      loc_404227
.text:0040383C                 cmp     eax, 44h ; 'D'
.text:0040383F                 jg      loc_40423D
.text:00403845                 cmp     eax, 42h ; 'B'
.text:00403848                 jz      loc_404227
.text:0040384E
.text:0040384E loc_40384E:                             ; CODE XREF: sub_4036A0+B98↓j
.text:0040384E                                         ; sub_4036A0+BA0↓j ...
.text:0040384E                 movsx   eax, byte ptr [edx]
.text:00403851                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00403854                 cmp     eax, 35h
.text:00403857                 ja      short def_403859 ; jumptable 00403859 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00403859                 jmp     ds:jpt_403859[eax*4] ; switch jump
.text:00403859 ; ---------------------------------------------------------------------------
.text:00403860 jpt_403859      dd offset loc_4039E4, offset def_403859, offset def_403859
.text:00403860                                         ; DATA XREF: sub_4036A0+1B9↑r
.text:00403860                 dd offset loc_403A3E, offset def_403859, offset loc_403E07 ; jump table for switch statement
.text:00403860                 dd offset def_403859, offset def_403859, offset def_403859
.text:00403860                 dd offset loc_403F16, offset def_403859, offset loc_403FDF
.text:00403860                 dd offset def_403859, offset def_403859, offset loc_403B4D
.text:00403860                 dd offset def_403859, offset def_403859, offset def_403859
.text:00403860                 dd offset loc_4040EE, offset def_403859, offset def_403859
.text:00403860                 dd offset def_403859, offset def_403859, offset loc_403C5C
.text:00403860                 dd offset loc_403D2E, offset def_403859, offset def_403859
.text:00403860                 dd offset def_403859, offset def_403859, offset def_403859
.text:00403860                 dd offset def_403859, offset def_403859, offset loc_403938
.text:00403860                 dd offset loc_403E00, offset def_403859, offset def_403859
.text:00403860                 dd offset def_403859, offset loc_403E07, offset def_403859
.text:00403860                 dd offset def_403859, offset def_403859, offset loc_403F16
.text:00403860                 dd offset def_403859, offset loc_403FDF, offset def_403859
.text:00403860                 dd offset def_403859, offset def_403859, offset def_403859
.text:00403860                 dd offset def_403859, offset def_403859, offset loc_4040EE
.text:00403860                 dd offset def_403859, offset def_403859, offset loc_4041C7
.text:00403938 ; ---------------------------------------------------------------------------
.text:00403938
.text:00403938 loc_403938:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403938                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403938                 mov     [esp+13Ch+Radix], 200h ; jumptable 00403859 case 98
.text:00403940                 lea     ebp, [esp+13Ch+var_24]
.text:00403947                 mov     [esp+13Ch+var_130], 0
.text:0040394F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403956                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040395E                 call    sub_406340
.text:00403963                 mov     esi, [esp+13Ch+var_20]
.text:0040396A                 mov     ecx, [esp+13Ch+var_24]
.text:00403971                 cmp     edx, esi
.text:00403973                 ja      short loc_40397B
.text:00403975                 jb      short loc_4039C5
.text:00403977                 cmp     eax, ecx
.text:00403979                 jb      short loc_4039C5
.text:0040397B
.text:0040397B loc_40397B:                             ; CODE XREF: sub_4036A0+2D3↑j
.text:0040397B                 mov     esi, [ebp+0]
.text:0040397E                 mov     eax, 200h
.text:00403983                 mov     ebx, [ebp+4]
.text:00403986                 mul     esi
.text:00403988                 mov     ecx, ebx
.text:0040398A                 shl     ecx, 9
.text:0040398D
.text:0040398D loc_40398D:                             ; CODE XREF: sub_4036A0+399↓j
.text:0040398D                 mov     esi, edx
.text:0040398F                 lea     edx, [ecx+esi]
.text:00403992
.text:00403992 loc_403992:                             ; CODE XREF: sub_4036A0+B82↓j
.text:00403992                 mov     [ebp+0], eax
.text:00403995                 xor     eax, eax
.text:00403997                 mov     [ebp+4], edx
.text:0040399A
.text:0040399A loc_40399A:                             ; CODE XREF: sub_4036A0+342↓j
.text:0040399A                                         ; sub_4036A0+459↓j ...
.text:0040399A                 mov     edx, [edi]
.text:0040399C
.text:0040399C loc_40399C:                             ; CODE XREF: sub_4036A0+762↓j
.text:0040399C                 or      [esp+13Ch+var_28], eax
.text:004039A3                 mov     eax, [esp+13Ch+var_30]
.text:004039AA                 lea     ecx, [eax+edx]
.text:004039AD                 mov     [edi], ecx
.text:004039AF                 cmp     byte ptr [ecx], 0
.text:004039B2                 jz      loc_403791
.text:004039B8                 or      [esp+13Ch+var_28], 2
.text:004039C0                 jmp     loc_403791
.text:004039C5 ; ---------------------------------------------------------------------------
.text:004039C5
.text:004039C5 loc_4039C5:                             ; CODE XREF: sub_4036A0+2D5↑j
.text:004039C5                                         ; sub_4036A0+2D9↑j ...
.text:004039C5                 mov     edx, 0FFFFFFFFh
.text:004039CA                 mov     ebp, 0FFFFFFFFh
.text:004039CF                 mov     eax, 1
.text:004039D4                 mov     [esp+13Ch+var_24], edx
.text:004039DB                 mov     [esp+13Ch+var_20], ebp
.text:004039E2                 jmp     short loc_40399A
.text:004039E4 ; ---------------------------------------------------------------------------
.text:004039E4
.text:004039E4 loc_4039E4:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:004039E4                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:004039E4                 mov     [esp+13Ch+Radix], 400h ; jumptable 00403859 case 66
.text:004039EC                 lea     ebp, [esp+13Ch+var_24]
.text:004039F3                 mov     [esp+13Ch+var_130], 0
.text:004039FB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403A02                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403A0A                 call    sub_406340
.text:00403A0F                 mov     esi, [esp+13Ch+var_20]
.text:00403A16                 mov     ecx, [esp+13Ch+var_24]
.text:00403A1D                 cmp     edx, esi
.text:00403A1F                 ja      short loc_403A27
.text:00403A21                 jb      short loc_4039C5
.text:00403A23                 cmp     eax, ecx
.text:00403A25                 jb      short loc_4039C5
.text:00403A27
.text:00403A27 loc_403A27:                             ; CODE XREF: sub_4036A0+37F↑j
.text:00403A27                 mov     esi, [ebp+0]
.text:00403A2A                 mov     eax, 400h
.text:00403A2F                 mov     ebx, [ebp+4]
.text:00403A32                 mul     esi
.text:00403A34                 mov     ecx, ebx
.text:00403A36                 shl     ecx, 0Ah
.text:00403A39                 jmp     loc_40398D
.text:00403A3E ; ---------------------------------------------------------------------------
.text:00403A3E
.text:00403A3E loc_403A3E:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403A3E                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403A3E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00403859 case 69
.text:00403A45                 mov     ecx, ebx
.text:00403A47                 xor     ebp, ebp
.text:00403A49                 mov     [esp+13Ch+var_34], ebp
.text:00403A50                 sar     ecx, 1Fh
.text:00403A53                 mov     ebx, [esp+13Ch+var_3C]
.text:00403A5A                 mov     [esp+13Ch+var_38], ecx
.text:00403A61                 lea     esi, [esp+13Ch+var_24]
.text:00403A68                 mov     ebp, 5
.text:00403A6D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403A74                 mov     edx, [esp+13Ch+var_38]
.text:00403A7B                 mov     [esp+13Ch+Radix], ebx
.text:00403A7F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403A87                 mov     [esp+13Ch+var_130], edx
.text:00403A8B                 call    sub_406340
.text:00403A90                 mov     [esp+13Ch+var_44], eax
.text:00403A97                 mov     [esp+13Ch+var_40], edx
.text:00403A9E
.text:00403A9E loc_403A9E:                             ; CODE XREF: sub_4036A0+450↓j
.text:00403A9E                 mov     ebx, [esi+4]
.text:00403AA1                 mov     eax, [esi]
.text:00403AA3                 cmp     [esp+13Ch+var_40], ebx
.text:00403AAA                 mov     [esp+13Ch+var_48], ebx
.text:00403AB1                 mov     [esp+13Ch+var_4C], eax
.text:00403AB8                 ja      short loc_403AFE
.text:00403ABA                 mov     ecx, [esp+13Ch+var_48]
.text:00403AC1                 cmp     [esp+13Ch+var_40], ecx
.text:00403AC8                 jb      short loc_403AD3
.text:00403ACA                 cmp     [esp+13Ch+var_44], eax
.text:00403AD1                 jnb     short loc_403AFE
.text:00403AD3
.text:00403AD3 loc_403AD3:                             ; CODE XREF: sub_4036A0+428↑j
.text:00403AD3                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403AD9                 mov     eax, 1
.text:00403ADE                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403AE5
.text:00403AE5 loc_403AE5:                             ; CODE XREF: sub_4036A0+4AB↓j
.text:00403AE5                 or      [esp+13Ch+var_34], eax
.text:00403AEC                 dec     ebp
.text:00403AED                 cmp     ebp, 0FFFFFFFFh
.text:00403AF0                 jnz     short loc_403A9E
.text:00403AF2                 mov     eax, [esp+13Ch+var_34]
.text:00403AF9                 jmp     loc_40399A
.text:00403AFE ; ---------------------------------------------------------------------------
.text:00403AFE
.text:00403AFE loc_403AFE:                             ; CODE XREF: sub_4036A0+418↑j
.text:00403AFE                                         ; sub_4036A0+431↑j
.text:00403AFE                 mov     ecx, [esp+13Ch+var_38]
.text:00403B05                 mov     eax, [esp+13Ch+var_4C]
.text:00403B0C                 mov     ebx, [esp+13Ch+var_4C]
.text:00403B13                 mul     [esp+13Ch+var_3C]
.text:00403B1A                 imul    ebx, ecx
.text:00403B1D                 mov     ecx, edx
.text:00403B1F                 mov     [esp+13Ch+var_124], eax
.text:00403B23                 add     ecx, ebx
.text:00403B25                 mov     edx, [esp+13Ch+var_3C]
.text:00403B2C                 mov     ebx, [esp+13Ch+var_48]
.text:00403B33                 imul    edx, ebx
.text:00403B36                 mov     ebx, [esp+13Ch+var_124]
.text:00403B3A                 mov     [esi], ebx
.text:00403B3C                 add     ecx, edx
.text:00403B3E                 mov     [esp+13Ch+var_120], ecx
.text:00403B42                 mov     eax, [esp+13Ch+var_120]
.text:00403B46                 mov     [esi+4], eax
.text:00403B49                 xor     eax, eax
.text:00403B4B                 jmp     short loc_403AE5
.text:00403B4D ; ---------------------------------------------------------------------------
.text:00403B4D
.text:00403B4D loc_403B4D:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403B4D                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403B4D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00403859 case 80
.text:00403B54                 mov     eax, ebx
.text:00403B56                 xor     ebp, ebp
.text:00403B58                 mov     [esp+13Ch+var_98], ebp
.text:00403B5F                 sar     eax, 1Fh
.text:00403B62                 mov     edx, [esp+13Ch+var_A4]
.text:00403B69                 mov     [esp+13Ch+var_A0], eax
.text:00403B70                 lea     esi, [esp+13Ch+var_24]
.text:00403B77                 mov     ebp, 4
.text:00403B7C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403B83                 mov     ebx, [esp+13Ch+var_A0]
.text:00403B8A                 mov     [esp+13Ch+Radix], edx
.text:00403B8E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403B96                 mov     [esp+13Ch+var_130], ebx
.text:00403B9A                 call    sub_406340
.text:00403B9F                 mov     [esp+13Ch+var_AC], eax
.text:00403BA6                 mov     [esp+13Ch+var_A8], edx
.text:00403BAD
.text:00403BAD loc_403BAD:                             ; CODE XREF: sub_4036A0+55F↓j
.text:00403BAD                 mov     ebx, [esi+4]
.text:00403BB0                 mov     edx, [esi]
.text:00403BB2                 cmp     [esp+13Ch+var_A8], ebx
.text:00403BB9                 mov     [esp+13Ch+var_B0], ebx
.text:00403BC0                 mov     [esp+13Ch+var_B4], edx
.text:00403BC7                 ja      short loc_403C0D
.text:00403BC9                 mov     eax, [esp+13Ch+var_B0]
.text:00403BD0                 cmp     [esp+13Ch+var_A8], eax
.text:00403BD7                 jb      short loc_403BE2
.text:00403BD9                 cmp     [esp+13Ch+var_AC], edx
.text:00403BE0                 jnb     short loc_403C0D
.text:00403BE2
.text:00403BE2 loc_403BE2:                             ; CODE XREF: sub_4036A0+537↑j
.text:00403BE2                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403BE8                 mov     eax, 1
.text:00403BED                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403BF4
.text:00403BF4 loc_403BF4:                             ; CODE XREF: sub_4036A0+5BA↓j
.text:00403BF4                 or      [esp+13Ch+var_98], eax
.text:00403BFB                 dec     ebp
.text:00403BFC                 cmp     ebp, 0FFFFFFFFh
.text:00403BFF                 jnz     short loc_403BAD
.text:00403C01                 mov     eax, [esp+13Ch+var_98]
.text:00403C08                 jmp     loc_40399A
.text:00403C0D ; ---------------------------------------------------------------------------
.text:00403C0D
.text:00403C0D loc_403C0D:                             ; CODE XREF: sub_4036A0+527↑j
.text:00403C0D                                         ; sub_4036A0+540↑j
.text:00403C0D                 mov     ecx, [esp+13Ch+var_A0]
.text:00403C14                 mov     eax, [esp+13Ch+var_B4]
.text:00403C1B                 mov     ebx, [esp+13Ch+var_B4]
.text:00403C22                 mul     [esp+13Ch+var_A4]
.text:00403C29                 imul    ebx, ecx
.text:00403C2C                 mov     ecx, edx
.text:00403C2E                 mov     [esp+13Ch+var_124], eax
.text:00403C32                 add     ecx, ebx
.text:00403C34                 mov     edx, [esp+13Ch+var_A4]
.text:00403C3B                 mov     ebx, [esp+13Ch+var_B0]
.text:00403C42                 xor     eax, eax
.text:00403C44                 imul    edx, ebx
.text:00403C47                 add     ecx, edx
.text:00403C49                 mov     [esp+13Ch+var_120], ecx
.text:00403C4D                 mov     ebx, [esp+13Ch+var_120]
.text:00403C51                 mov     ecx, [esp+13Ch+var_124]
.text:00403C55                 mov     [esi+4], ebx
.text:00403C58                 mov     [esi], ecx
.text:00403C5A                 jmp     short loc_403BF4
.text:00403C5C ; ---------------------------------------------------------------------------
.text:00403C5C
.text:00403C5C loc_403C5C:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403C5C                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403C5C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00403859 case 89
.text:00403C60                 mov     eax, ebx
.text:00403C62                 lea     esi, [esp+13Ch+var_24]
.text:00403C69                 mov     [esp+13Ch+var_D8], 0
.text:00403C71                 sar     eax, 1Fh
.text:00403C74                 mov     edx, [esp+13Ch+var_E4]
.text:00403C78                 mov     [esp+13Ch+var_E0], eax
.text:00403C7C                 mov     ebp, 7
.text:00403C81                 mov     ebx, [esp+13Ch+var_E0]
.text:00403C85                 mov     [esp+13Ch+Radix], edx
.text:00403C89                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403C90                 mov     [esp+13Ch+var_130], ebx
.text:00403C94                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403C9C                 call    sub_406340
.text:00403CA1                 mov     [esp+13Ch+var_EC], eax
.text:00403CA5                 mov     [esp+13Ch+var_E8], edx
.text:00403CA9
.text:00403CA9 loc_403CA9:                             ; CODE XREF: sub_4036A0+646↓j
.text:00403CA9                 mov     ebx, [esi+4]
.text:00403CAC                 mov     edx, [esi]
.text:00403CAE                 cmp     [esp+13Ch+var_E8], ebx
.text:00403CB2                 mov     [esp+13Ch+var_F0], ebx
.text:00403CB6                 mov     [esp+13Ch+var_F4], edx
.text:00403CBA                 ja      short loc_403CF1
.text:00403CBC                 mov     eax, [esp+13Ch+var_F0]
.text:00403CC0                 cmp     [esp+13Ch+var_E8], eax
.text:00403CC4                 jb      short loc_403CCC
.text:00403CC6                 cmp     [esp+13Ch+var_EC], edx
.text:00403CCA                 jnb     short loc_403CF1
.text:00403CCC
.text:00403CCC loc_403CCC:                             ; CODE XREF: sub_4036A0+624↑j
.text:00403CCC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403CD2                 mov     eax, 1
.text:00403CD7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403CDE
.text:00403CDE loc_403CDE:                             ; CODE XREF: sub_4036A0+68C↓j
.text:00403CDE                 or      [esp+13Ch+var_D8], eax
.text:00403CE2                 dec     ebp
.text:00403CE3                 cmp     ebp, 0FFFFFFFFh
.text:00403CE6                 jnz     short loc_403CA9
.text:00403CE8                 mov     eax, [esp+13Ch+var_D8]
.text:00403CEC                 jmp     loc_40399A
.text:00403CF1 ; ---------------------------------------------------------------------------
.text:00403CF1
.text:00403CF1 loc_403CF1:                             ; CODE XREF: sub_4036A0+61A↑j
.text:00403CF1                                         ; sub_4036A0+62A↑j
.text:00403CF1                 mov     ecx, [esp+13Ch+var_E0]
.text:00403CF5                 mov     eax, [esp+13Ch+var_F4]
.text:00403CF9                 mov     ebx, [esp+13Ch+var_F4]
.text:00403CFD                 mul     [esp+13Ch+var_E4]
.text:00403D01                 imul    ebx, ecx
.text:00403D04                 mov     ecx, edx
.text:00403D06                 mov     [esp+13Ch+var_124], eax
.text:00403D0A                 add     ecx, ebx
.text:00403D0C                 mov     edx, [esp+13Ch+var_E4]
.text:00403D10                 mov     ebx, [esp+13Ch+var_F0]
.text:00403D14                 xor     eax, eax
.text:00403D16                 imul    edx, ebx
.text:00403D19                 add     ecx, edx
.text:00403D1B                 mov     [esp+13Ch+var_120], ecx
.text:00403D1F                 mov     ebx, [esp+13Ch+var_120]
.text:00403D23                 mov     ecx, [esp+13Ch+var_124]
.text:00403D27                 mov     [esi+4], ebx
.text:00403D2A                 mov     [esi], ecx
.text:00403D2C                 jmp     short loc_403CDE
.text:00403D2E ; ---------------------------------------------------------------------------
.text:00403D2E
.text:00403D2E loc_403D2E:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403D2E                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403D2E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00403859 case 90
.text:00403D32                 mov     eax, ebx
.text:00403D34                 lea     esi, [esp+13Ch+var_24]
.text:00403D3B                 mov     [esp+13Ch+var_F8], 0
.text:00403D43                 sar     eax, 1Fh
.text:00403D46                 mov     edx, [esp+13Ch+var_104]
.text:00403D4A                 mov     [esp+13Ch+var_100], eax
.text:00403D4E                 mov     ebp, 6
.text:00403D53                 mov     ebx, [esp+13Ch+var_100]
.text:00403D57                 mov     [esp+13Ch+Radix], edx
.text:00403D5B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403D62                 mov     [esp+13Ch+var_130], ebx
.text:00403D66                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403D6E                 call    sub_406340
.text:00403D73                 mov     [esp+13Ch+var_10C], eax
.text:00403D77                 mov     [esp+13Ch+var_108], edx
.text:00403D7B
.text:00403D7B loc_403D7B:                             ; CODE XREF: sub_4036A0+718↓j
.text:00403D7B                 mov     ebx, [esi+4]
.text:00403D7E                 mov     edx, [esi]
.text:00403D80                 cmp     [esp+13Ch+var_108], ebx
.text:00403D84                 mov     [esp+13Ch+var_110], ebx
.text:00403D88                 mov     [esp+13Ch+var_114], edx
.text:00403D8C                 ja      short loc_403DC3
.text:00403D8E                 mov     eax, [esp+13Ch+var_110]
.text:00403D92                 cmp     [esp+13Ch+var_108], eax
.text:00403D96                 jb      short loc_403D9E
.text:00403D98                 cmp     [esp+13Ch+var_10C], edx
.text:00403D9C                 jnb     short loc_403DC3
.text:00403D9E
.text:00403D9E loc_403D9E:                             ; CODE XREF: sub_4036A0+6F6↑j
.text:00403D9E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403DA4                 mov     eax, 1
.text:00403DA9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_4036A0+75E↓j
.text:00403DB0                 or      [esp+13Ch+var_F8], eax
.text:00403DB4                 dec     ebp
.text:00403DB5                 cmp     ebp, 0FFFFFFFFh
.text:00403DB8                 jnz     short loc_403D7B
.text:00403DBA                 mov     eax, [esp+13Ch+var_F8]
.text:00403DBE                 jmp     loc_40399A
.text:00403DC3 ; ---------------------------------------------------------------------------
.text:00403DC3
.text:00403DC3 loc_403DC3:                             ; CODE XREF: sub_4036A0+6EC↑j
.text:00403DC3                                         ; sub_4036A0+6FC↑j
.text:00403DC3                 mov     eax, [esp+13Ch+var_114]
.text:00403DC7                 mov     ebx, [esp+13Ch+var_100]
.text:00403DCB                 mul     [esp+13Ch+var_104]
.text:00403DCF                 mov     ecx, edx
.text:00403DD1                 mov     edx, [esp+13Ch+var_104]
.text:00403DD5                 mov     [esp+13Ch+var_124], eax
.text:00403DD9                 mov     eax, [esp+13Ch+var_114]
.text:00403DDD                 imul    eax, ebx
.text:00403DE0                 mov     ebx, [esp+13Ch+var_110]
.text:00403DE4                 imul    edx, ebx
.text:00403DE7                 add     ecx, eax
.text:00403DE9                 xor     eax, eax
.text:00403DEB                 add     ecx, edx
.text:00403DED                 mov     [esp+13Ch+var_120], ecx
.text:00403DF1                 mov     ebx, [esp+13Ch+var_120]
.text:00403DF5                 mov     ecx, [esp+13Ch+var_124]
.text:00403DF9                 mov     [esi+4], ebx
.text:00403DFC                 mov     [esi], ecx
.text:00403DFE                 jmp     short loc_403DB0
.text:00403E00 ; ---------------------------------------------------------------------------
.text:00403E00
.text:00403E00 loc_403E00:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403E00                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403E00                 xor     eax, eax        ; jumptable 00403859 case 99
.text:00403E02                 jmp     loc_40399C
.text:00403E07 ; ---------------------------------------------------------------------------
.text:00403E07
.text:00403E07 loc_403E07:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403E07                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403E07                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00403859 cases 71,103
.text:00403E0E                 mov     eax, ebx
.text:00403E10                 xor     ebp, ebp
.text:00403E12                 mov     [esp+13Ch+var_50], ebp
.text:00403E19                 sar     eax, 1Fh
.text:00403E1C                 mov     edx, [esp+13Ch+var_5C]
.text:00403E23                 mov     [esp+13Ch+var_58], eax
.text:00403E2A                 lea     esi, [esp+13Ch+var_24]
.text:00403E31                 mov     ebp, 2
.text:00403E36                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403E3D                 mov     ebx, [esp+13Ch+var_58]
.text:00403E44                 mov     [esp+13Ch+Radix], edx
.text:00403E48                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403E50                 mov     [esp+13Ch+var_130], ebx
.text:00403E54                 call    sub_406340
.text:00403E59                 mov     [esp+13Ch+var_64], eax
.text:00403E60                 mov     [esp+13Ch+var_60], edx
.text:00403E67
.text:00403E67 loc_403E67:                             ; CODE XREF: sub_4036A0+819↓j
.text:00403E67                 mov     ebx, [esi+4]
.text:00403E6A                 mov     edx, [esi]
.text:00403E6C                 cmp     [esp+13Ch+var_60], ebx
.text:00403E73                 mov     [esp+13Ch+var_68], ebx
.text:00403E7A                 mov     [esp+13Ch+var_6C], edx
.text:00403E81                 ja      short loc_403EC7
.text:00403E83                 mov     eax, [esp+13Ch+var_68]
.text:00403E8A                 cmp     [esp+13Ch+var_60], eax
.text:00403E91                 jb      short loc_403E9C
.text:00403E93                 cmp     [esp+13Ch+var_64], edx
.text:00403E9A                 jnb     short loc_403EC7
.text:00403E9C
.text:00403E9C loc_403E9C:                             ; CODE XREF: sub_4036A0+7F1↑j
.text:00403E9C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403EA2                 mov     eax, 1
.text:00403EA7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403EAE
.text:00403EAE loc_403EAE:                             ; CODE XREF: sub_4036A0+874↓j
.text:00403EAE                 or      [esp+13Ch+var_50], eax
.text:00403EB5                 dec     ebp
.text:00403EB6                 cmp     ebp, 0FFFFFFFFh
.text:00403EB9                 jnz     short loc_403E67
.text:00403EBB                 mov     eax, [esp+13Ch+var_50]
.text:00403EC2                 jmp     loc_40399A
.text:00403EC7 ; ---------------------------------------------------------------------------
.text:00403EC7
.text:00403EC7 loc_403EC7:                             ; CODE XREF: sub_4036A0+7E1↑j
.text:00403EC7                                         ; sub_4036A0+7FA↑j
.text:00403EC7                 mov     ecx, [esp+13Ch+var_58]
.text:00403ECE                 mov     eax, [esp+13Ch+var_6C]
.text:00403ED5                 mov     ebx, [esp+13Ch+var_6C]
.text:00403EDC                 mul     [esp+13Ch+var_5C]
.text:00403EE3                 imul    ebx, ecx
.text:00403EE6                 mov     ecx, edx
.text:00403EE8                 mov     [esp+13Ch+var_124], eax
.text:00403EEC                 add     ecx, ebx
.text:00403EEE                 mov     edx, [esp+13Ch+var_5C]
.text:00403EF5                 mov     ebx, [esp+13Ch+var_68]
.text:00403EFC                 xor     eax, eax
.text:00403EFE                 imul    edx, ebx
.text:00403F01                 add     ecx, edx
.text:00403F03                 mov     [esp+13Ch+var_120], ecx
.text:00403F07                 mov     ebx, [esp+13Ch+var_120]
.text:00403F0B                 mov     ecx, [esp+13Ch+var_124]
.text:00403F0F                 mov     [esi+4], ebx
.text:00403F12                 mov     [esi], ecx
.text:00403F14                 jmp     short loc_403EAE
.text:00403F16 ; ---------------------------------------------------------------------------
.text:00403F16
.text:00403F16 loc_403F16:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403F16                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403F16                 mov     [esp+13Ch+var_74], ebx ; jumptable 00403859 cases 75,107
.text:00403F1D                 mov     eax, ebx
.text:00403F1F                 lea     esi, [esp+13Ch+var_24]
.text:00403F26                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00403F2D                 sar     eax, 1Fh
.text:00403F30                 mov     edx, [esp+13Ch+var_74]
.text:00403F37                 mov     [esp+13Ch+var_70], eax
.text:00403F3E                 mov     ebx, [esp+13Ch+var_70]
.text:00403F45                 mov     [esp+13Ch+Radix], edx
.text:00403F49                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00403F51                 mov     [esp+13Ch+var_130], ebx
.text:00403F55                 call    sub_406340
.text:00403F5A                 mov     ebp, [esp+13Ch+var_20]
.text:00403F61                 mov     ecx, [esp+13Ch+var_24]
.text:00403F68                 cmp     edx, ebp
.text:00403F6A                 mov     [esp+13Ch+var_11C], ecx
.text:00403F6E                 mov     [esp+13Ch+var_118], ebp
.text:00403F72                 ja      short loc_403F99
.text:00403F74                 cmp     edx, [esp+13Ch+var_118]
.text:00403F78                 jb      short loc_403F7E
.text:00403F7A                 cmp     eax, ecx
.text:00403F7C                 jnb     short loc_403F99
.text:00403F7E
.text:00403F7E loc_403F7E:                             ; CODE XREF: sub_4036A0+8D8↑j
.text:00403F7E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00403F84                 mov     edx, 1
.text:00403F89                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00403F90
.text:00403F90 loc_403F90:                             ; CODE XREF: sub_4036A0+93D↓j
.text:00403F90                 xor     eax, eax
.text:00403F92                 or      eax, edx
.text:00403F94                 jmp     loc_40399A
.text:00403F99 ; ---------------------------------------------------------------------------
.text:00403F99
.text:00403F99 loc_403F99:                             ; CODE XREF: sub_4036A0+8D2↑j
.text:00403F99                                         ; sub_4036A0+8DC↑j
.text:00403F99                 mov     eax, [esp+13Ch+var_11C]
.text:00403F9D                 mov     ebp, [esp+13Ch+var_11C]
.text:00403FA1                 mov     ebx, [esp+13Ch+var_118]
.text:00403FA5                 mul     [esp+13Ch+var_74]
.text:00403FAC                 mov     [esp+13Ch+var_124], eax
.text:00403FB0                 mov     eax, [esp+13Ch+var_70]
.text:00403FB7                 mov     ecx, [esp+13Ch+var_124]
.text:00403FBB                 imul    ebp, eax
.text:00403FBE                 mov     eax, edx
.text:00403FC0                 xor     edx, edx
.text:00403FC2                 mov     [esi], ecx
.text:00403FC4                 add     eax, ebp
.text:00403FC6                 mov     ebp, [esp+13Ch+var_74]
.text:00403FCD                 imul    ebp, ebx
.text:00403FD0                 add     eax, ebp
.text:00403FD2                 mov     [esp+13Ch+var_120], eax
.text:00403FD6                 mov     ebp, [esp+13Ch+var_120]
.text:00403FDA                 mov     [esi+4], ebp
.text:00403FDD                 jmp     short loc_403F90
.text:00403FDF ; ---------------------------------------------------------------------------
.text:00403FDF
.text:00403FDF loc_403FDF:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:00403FDF                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:00403FDF                 mov     [esp+13Ch+var_84], ebx ; jumptable 00403859 cases 77,109
.text:00403FE6                 mov     eax, ebx
.text:00403FE8                 xor     ebp, ebp
.text:00403FEA                 mov     [esp+13Ch+var_78], ebp
.text:00403FF1                 sar     eax, 1Fh
.text:00403FF4                 mov     edx, [esp+13Ch+var_84]
.text:00403FFB                 mov     [esp+13Ch+var_80], eax
.text:00404002                 lea     esi, [esp+13Ch+var_24]
.text:00404009                 mov     ebp, 1
.text:0040400E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404015                 mov     ecx, [esp+13Ch+var_80]
.text:0040401C                 mov     [esp+13Ch+Radix], edx
.text:00404020                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404028                 mov     [esp+13Ch+var_130], ecx
.text:0040402C                 call    sub_406340
.text:00404031                 mov     [esp+13Ch+var_8C], eax
.text:00404038                 mov     [esp+13Ch+var_88], edx
.text:0040403F
.text:0040403F loc_40403F:                             ; CODE XREF: sub_4036A0+9F1↓j
.text:0040403F                 mov     ebx, [esi+4]
.text:00404042                 mov     edx, [esi]
.text:00404044                 cmp     [esp+13Ch+var_88], ebx
.text:0040404B                 mov     [esp+13Ch+var_90], ebx
.text:00404052                 mov     [esp+13Ch+var_94], edx
.text:00404059                 ja      short loc_40409F
.text:0040405B                 mov     eax, [esp+13Ch+var_90]
.text:00404062                 cmp     [esp+13Ch+var_88], eax
.text:00404069                 jb      short loc_404074
.text:0040406B                 cmp     [esp+13Ch+var_8C], edx
.text:00404072                 jnb     short loc_40409F
.text:00404074
.text:00404074 loc_404074:                             ; CODE XREF: sub_4036A0+9C9↑j
.text:00404074                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040407A                 mov     eax, 1
.text:0040407F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00404086
.text:00404086 loc_404086:                             ; CODE XREF: sub_4036A0+A4C↓j
.text:00404086                 or      [esp+13Ch+var_78], eax
.text:0040408D                 dec     ebp
.text:0040408E                 cmp     ebp, 0FFFFFFFFh
.text:00404091                 jnz     short loc_40403F
.text:00404093                 mov     eax, [esp+13Ch+var_78]
.text:0040409A                 jmp     loc_40399A
.text:0040409F ; ---------------------------------------------------------------------------
.text:0040409F
.text:0040409F loc_40409F:                             ; CODE XREF: sub_4036A0+9B9↑j
.text:0040409F                                         ; sub_4036A0+9D2↑j
.text:0040409F                 mov     ecx, [esp+13Ch+var_80]
.text:004040A6                 mov     eax, [esp+13Ch+var_94]
.text:004040AD                 mov     ebx, [esp+13Ch+var_94]
.text:004040B4                 mul     [esp+13Ch+var_84]
.text:004040BB                 imul    ebx, ecx
.text:004040BE                 mov     ecx, edx
.text:004040C0                 mov     [esp+13Ch+var_124], eax
.text:004040C4                 add     ecx, ebx
.text:004040C6                 mov     edx, [esp+13Ch+var_84]
.text:004040CD                 mov     ebx, [esp+13Ch+var_90]
.text:004040D4                 xor     eax, eax
.text:004040D6                 imul    edx, ebx
.text:004040D9                 add     ecx, edx
.text:004040DB                 mov     [esp+13Ch+var_120], ecx
.text:004040DF                 mov     ebx, [esp+13Ch+var_120]
.text:004040E3                 mov     ecx, [esp+13Ch+var_124]
.text:004040E7                 mov     [esi+4], ebx
.text:004040EA                 mov     [esi], ecx
.text:004040EC                 jmp     short loc_404086
.text:004040EE ; ---------------------------------------------------------------------------
.text:004040EE
.text:004040EE loc_4040EE:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:004040EE                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:004040EE                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00403859 cases 84,116
.text:004040F2                 mov     eax, ebx
.text:004040F4                 xor     ebp, ebp
.text:004040F6                 mov     [esp+13Ch+var_B8], ebp
.text:004040FD                 sar     eax, 1Fh
.text:00404100                 mov     edx, [esp+13Ch+var_C4]
.text:00404104                 mov     [esp+13Ch+var_C0], eax
.text:00404108                 lea     esi, [esp+13Ch+var_24]
.text:0040410F                 mov     ebp, 3
.text:00404114                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040411B                 mov     ebx, [esp+13Ch+var_C0]
.text:0040411F                 mov     [esp+13Ch+Radix], edx
.text:00404123                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040412B                 mov     [esp+13Ch+var_130], ebx
.text:0040412F                 call    sub_406340
.text:00404134                 mov     [esp+13Ch+var_CC], eax
.text:00404138                 mov     [esp+13Ch+var_C8], edx
.text:0040413C
.text:0040413C loc_40413C:                             ; CODE XREF: sub_4036A0+ADC↓j
.text:0040413C                 mov     ebx, [esi+4]
.text:0040413F                 mov     edx, [esi]
.text:00404141                 cmp     [esp+13Ch+var_C8], ebx
.text:00404145                 mov     [esp+13Ch+var_D0], ebx
.text:00404149                 mov     [esp+13Ch+var_D4], edx
.text:0040414D                 ja      short loc_40418A
.text:0040414F                 mov     eax, [esp+13Ch+var_D0]
.text:00404153                 cmp     [esp+13Ch+var_C8], eax
.text:00404157                 jb      short loc_40415F
.text:00404159                 cmp     [esp+13Ch+var_CC], edx
.text:0040415D                 jnb     short loc_40418A
.text:0040415F
.text:0040415F loc_40415F:                             ; CODE XREF: sub_4036A0+AB7↑j
.text:0040415F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00404165                 mov     eax, 1
.text:0040416A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00404171
.text:00404171 loc_404171:                             ; CODE XREF: sub_4036A0+B25↓j
.text:00404171                 or      [esp+13Ch+var_B8], eax
.text:00404178                 dec     ebp
.text:00404179                 cmp     ebp, 0FFFFFFFFh
.text:0040417C                 jnz     short loc_40413C
.text:0040417E                 mov     eax, [esp+13Ch+var_B8]
.text:00404185                 jmp     loc_40399A
.text:0040418A ; ---------------------------------------------------------------------------
.text:0040418A
.text:0040418A loc_40418A:                             ; CODE XREF: sub_4036A0+AAD↑j
.text:0040418A                                         ; sub_4036A0+ABD↑j
.text:0040418A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040418E                 mov     eax, [esp+13Ch+var_D4]
.text:00404192                 mov     ebx, [esp+13Ch+var_D4]
.text:00404196                 mul     [esp+13Ch+var_C4]
.text:0040419A                 imul    ebx, ecx
.text:0040419D                 mov     ecx, edx
.text:0040419F                 mov     [esp+13Ch+var_124], eax
.text:004041A3                 add     ecx, ebx
.text:004041A5                 mov     edx, [esp+13Ch+var_C4]
.text:004041A9                 mov     ebx, [esp+13Ch+var_D0]
.text:004041AD                 xor     eax, eax
.text:004041AF                 imul    edx, ebx
.text:004041B2                 add     ecx, edx
.text:004041B4                 mov     [esp+13Ch+var_120], ecx
.text:004041B8                 mov     ebx, [esp+13Ch+var_120]
.text:004041BC                 mov     ecx, [esp+13Ch+var_124]
.text:004041C0                 mov     [esi+4], ebx
.text:004041C3                 mov     [esi], ecx
.text:004041C5                 jmp     short loc_404171
.text:004041C7 ; ---------------------------------------------------------------------------
.text:004041C7
.text:004041C7 loc_4041C7:                             ; CODE XREF: sub_4036A0+1B9↑j
.text:004041C7                                         ; DATA XREF: sub_4036A0:jpt_403859↑o
.text:004041C7                 mov     [esp+13Ch+Radix], 2 ; jumptable 00403859 case 119
.text:004041CF                 lea     ebp, [esp+13Ch+var_24]
.text:004041D6                 mov     [esp+13Ch+var_130], 0
.text:004041DE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004041E5                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004041ED                 call    sub_406340
.text:004041F2                 mov     esi, [esp+13Ch+var_20]
.text:004041F9                 mov     ecx, [esp+13Ch+var_24]
.text:00404200                 cmp     edx, esi
.text:00404202                 ja      short loc_404212
.text:00404204                 jb      loc_4039C5
.text:0040420A                 cmp     eax, ecx
.text:0040420C                 jb      loc_4039C5
.text:00404212
.text:00404212 loc_404212:                             ; CODE XREF: sub_4036A0+B62↑j
.text:00404212                 mov     esi, [ebp+0]
.text:00404215                 mov     eax, 2
.text:0040421A                 mov     ecx, [ebp+4]
.text:0040421D                 mul     esi
.text:0040421F                 lea     edx, [edx+ecx*2]
.text:00404222                 jmp     loc_403992
.text:00404227 ; ---------------------------------------------------------------------------
.text:00404227
.text:00404227 loc_404227:                             ; CODE XREF: sub_4036A0+196↑j
.text:00404227                                         ; sub_4036A0+1A8↑j
.text:00404227                 mov     esi, 2
.text:0040422C                 mov     ebx, 3E8h
.text:00404231                 mov     [esp+13Ch+var_30], esi
.text:00404238                 jmp     loc_40384E
.text:0040423D ; ---------------------------------------------------------------------------
.text:0040423D
.text:0040423D loc_40423D:                             ; CODE XREF: sub_4036A0+19F↑j
.text:0040423D                 cmp     eax, 69h ; 'i'
.text:00404240                 jnz     loc_40384E
.text:00404246                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040424A                 jnz     loc_40384E
.text:00404250                 mov     eax, 3
.text:00404255                 mov     [esp+13Ch+var_30], eax
.text:0040425C                 jmp     loc_40384E
.text:00404261 ; ---------------------------------------------------------------------------
.text:00404261
.text:00404261 loc_404261:                             ; CODE XREF: sub_4036A0+187↑j
.text:00404261                 mov     edx, [edi]
.text:00404263                 jmp     loc_40384E
.text:00404268 ; ---------------------------------------------------------------------------
.text:00404268
.text:00404268 loc_404268:                             ; CODE XREF: sub_4036A0+E2↑j
.text:00404268                 mov     edx, [esp+13Ch+var_24]
.text:0040426F                 mov     ecx, [esp+13Ch+var_20]
.text:00404276                 mov     edi, [esp+13Ch+arg_C]
.text:0040427D                 mov     [edi], edx
.text:0040427F                 mov     [edi+4], ecx
.text:00404282                 jmp     loc_4037AB
.text:00404287 ; ---------------------------------------------------------------------------
.text:00404287
.text:00404287 loc_404287:                             ; CODE XREF: sub_4036A0+D3↑j
.text:00404287                 call    _errno
.text:0040428C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040428F                 jnz     short loc_4042A2
.text:00404291                 mov     esi, 1
.text:00404296                 mov     [esp+13Ch+var_28], esi
.text:0040429D                 jmp     loc_403779
.text:004042A2 ; ---------------------------------------------------------------------------
.text:004042A2
.text:004042A2 loc_4042A2:                             ; CODE XREF: sub_4036A0+BEF↑j
.text:004042A2                                         ; sub_4036A0+C15↓j ...
.text:004042A2                 mov     eax, 4
.text:004042A7                 jmp     loc_4037B2
.text:004042AC ; ---------------------------------------------------------------------------
.text:004042AC
.text:004042AC loc_4042AC:                             ; CODE XREF: sub_4036A0+C4↑j
.text:004042AC                 mov     ebx, [esp+13Ch+Str]
.text:004042B3                 test    ebx, ebx
.text:004042B5                 jz      short loc_4042A2
.text:004042B7                 movzx   eax, byte ptr [eax]
.text:004042BA                 test    al, al
.text:004042BC                 jz      short loc_4042A2
.text:004042BE                 mov     esi, [esp+13Ch+Str]
.text:004042C5                 movsx   ebp, al
.text:004042C8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004042CC                 mov     [esp+13Ch+C], esi ; Str
.text:004042CF                 call    strchr
.text:004042D4                 test    eax, eax
.text:004042D6                 jz      short loc_4042A2
.text:004042D8                 mov     ecx, 1
.text:004042DD                 xor     edx, edx
.text:004042DF                 mov     [esp+13Ch+var_24], ecx
.text:004042E6                 mov     [esp+13Ch+var_20], edx
.text:004042ED                 jmp     loc_403779
.text:004042F2 ; ---------------------------------------------------------------------------
.text:004042F2
.text:004042F2 loc_4042F2:                             ; CODE XREF: sub_4036A0+61↑j
.text:004042F2                 mov     eax, ds:_pctype
.text:004042F7                 mov     ecx, [eax]
.text:004042F9                 movzx   eax, word ptr [ecx+edx*2]
.text:004042FD                 and     eax, 8
.text:00404300                 jmp     loc_403717
.text:00404305 ; ---------------------------------------------------------------------------
.text:00404305
.text:00404305 loc_404305:                             ; CODE XREF: sub_4036A0+33↑j
.text:00404305                 lea     edi, [esp+13Ch+var_18]
.text:0040430C                 jmp     loc_4036D9
.text:00404311 ; ---------------------------------------------------------------------------
.text:00404311
.text:00404311 loc_404311:                             ; CODE XREF: sub_4036A0+24↑j
.text:00404311                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00404319                 mov     [esp+13Ch+Type], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00404321                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00404328                 call    _assert
.text:00404328 sub_4036A0      endp
.text:00404328
.text:00404328 ; ---------------------------------------------------------------------------
.text:0040432D                 align 10h
.text:00404330 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404330                                         ; DATA XREF: .data:Buffer↓o
.text:00404362 ; const char aSSS[12]
.text:00404362 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404620+50↓o
.text:0040436E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040437E                 db 12h dup(90h)
.text:00404390
.text:00404390 ; =============== S U B R O U T I N E =======================================
.text:00404390
.text:00404390
.text:00404390 sub_404390      proc near               ; DATA XREF: sub_404620+100↓o
.text:00404390                 push    esp
.text:00404391                 push    69207369h
.text:00404396                 jnb     short loc_4043B8
.text:00404398                 db      66h
.text:00404398                 jb      short near ptr 4400h
.text:0040439B                 and     gs:[ebx+6Fh], dh
.text:0040439F                 db      66h
.text:0040439F                 jz      short near ptr 4419h
.text:004043A2                 popa
.text:004043A3                 jb      short loc_40440A
.text:004043A5                 cmp     esp, [eax]
.text:004043A7                 jnb     short near ptr loc_40440C+2
.text:004043A9                 and     gs:[eax+ebp*2+65h], dh
.text:004043AE                 and     [ebx+6Fh], dh
.text:004043B1                 jnz     short loc_404425
.text:004043B3                 arpl    [ebp+20h], sp
.text:004043B6                 outsw
.text:004043B8
.text:004043B8 loc_4043B8:                             ; CODE XREF: sub_404390+6↑j
.text:004043B8                 jb      short loc_4043DA
.text:004043BA                 arpl    [edi+70h], bp
.text:004043BD                 jns     short loc_404428
.text:004043BF                 outsb
.text:004043C0                 and     [bp+di+6Fh], ah
.text:004043C4                 outsb
.text:004043C5                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:004043CE                 and     [eax+ebp*2+65h], dl
.text:004043D2                 jb      short near ptr loc_404438+1
.text:004043D4                 and     [ecx+73h], ch
.text:004043D7                 and     [esi+4Fh], cl
.text:004043DA
.text:004043DA loc_4043DA:                             ; CODE XREF: sub_404390:loc_4043B8↑j
.text:004043DA                 or      dh, [edi+61h]
.text:004043DD                 jb      short loc_404451
.text:004043DF                 popa
.text:004043E0                 outsb
.text:004043E1                 jz      short loc_40445C
.text:004043E3                 cmp     esp, [eax]
.text:004043E5                 outsb
.text:004043E6                 outsd
.text:004043E7                 jz      short loc_404409
.text:004043E9                 db      65h
.text:004043E9                 jbe     short loc_404451
.text:004043EC                 outsb
.text:004043ED                 and     [esi+6Fh], ah
.text:004043F0                 jb      short near ptr loc_404410+2
.text:004043F2                 dec     ebp
.text:004043F3                 inc     ebp
.text:004043F4                 push    edx
.text:004043F5                 inc     ebx
.text:004043F6                 dec     eax
.text:004043F7                 inc     ecx
.text:004043F8                 dec     esi
.text:004043F9                 push    esp
.text:004043FA                 inc     ecx
.text:004043FB                 inc     edx
.text:004043FC                 dec     ecx
.text:004043FD                 dec     esp
.text:004043FE                 dec     ecx
.text:004043FF                 push    esp
.text:00404400                 pop     ecx
.text:00404401                 and     [edi+72h], ch
.text:00404404                 and     [esi+49h], al
.text:00404407                 push    esp
.text:00404408                 dec     esi
.text:00404409
.text:00404409 loc_404409:                             ; CODE XREF: sub_404390+57↑j
.text:00404409                 inc     ebp
.text:0040440A
.text:0040440A loc_40440A:                             ; CODE XREF: sub_404390+13↑j
.text:0040440A                 push    ebx
.text:0040440B                 push    ebx
.text:0040440C
.text:0040440C loc_40440C:                             ; CODE XREF: sub_404390+17↑j
.text:0040440C                 and     [esi+4Fh], al
.text:0040440F                 push    edx
.text:00404410
.text:00404410 loc_404410:                             ; CODE XREF: sub_404390+60↑j
.text:00404410                 and     [ecx+20h], al
.text:00404413                 push    eax
.text:00404414                 inc     ecx
.text:00404415                 push    edx
.text:00404416                 push    esp
.text:00404417                 dec     ecx
.text:00404418                 inc     ebx
.text:00404419                 push    ebp
.text:0040441A                 dec     esp
.text:0040441B                 inc     ecx
.text:0040441C                 push    edx
.text:0040441D                 and     [eax+55h], dl
.text:00404420                 push    edx
.text:00404421                 push    eax
.text:00404422                 dec     edi
.text:00404423                 push    ebx
.text:00404424                 inc     ebp
.text:00404425
.text:00404425 loc_404425:                             ; CODE XREF: sub_404390+21↑j
.text:00404425                 or      al, cs:[eax]
.text:00404428
.text:00404428 loc_404428:                             ; CODE XREF: sub_404390+2D↑j
.text:00404428                                         ; DATA XREF: sub_404620:loc_404761↓o
.text:00404428                 push    edi
.text:00404429                 jb      short near ptr loc_404493+1
.text:0040442B                 jz      short near ptr loc_4044A0+1
.text:0040442D                 outs    dx, byte ptr gs:[esi]
.text:0040442F                 and     [edx+79h], ah
.text:00404432                 and     ds:6E612073h, ah
.text:00404438
.text:00404438 loc_404438:                             ; CODE XREF: sub_404390+42↑j
.text:00404438                 and     fs:0A2E73h, ah
.text:0040443F
.text:0040443F loc_40443F:                             ; DATA XREF: sub_404620:loc_40476D↓o
.text:0040443F                 push    edi
.text:00404440                 jb      short near ptr loc_4044AA+1
.text:00404442                 jz      short loc_4044B8
.text:00404444                 outs    dx, byte ptr gs:[esi]
.text:00404446                 and     [edx+79h], ah
.text:00404449                 and     ds:25202C73h, ah
.text:0040444F                 jnb     short near ptr loc_40447A+3
.text:00404451
.text:00404451 loc_404451:                             ; CODE XREF: sub_404390+4D↑j
.text:00404451                                         ; sub_404390+59↑j
.text:00404451                 and     [ecx+6Eh], ah
.text:00404454                 and     fs:0A2E73h, ah
.text:0040445B                 nop
.text:0040445C
.text:0040445C loc_40445C:                             ; CODE XREF: sub_404390+51↑j
.text:0040445C                 nop
.text:0040445D                 nop
.text:0040445E                 nop
.text:0040445F                 nop
.text:00404460                 nop
.text:00404461                 nop
.text:00404462                 nop
.text:00404463                 nop
.text:00404464                 nop
.text:00404465                 nop
.text:00404466                 nop
.text:00404467                 nop
.text:00404468                 nop
.text:00404469                 nop
.text:0040446A                 nop
.text:0040446B                 nop
.text:0040446C                 nop
.text:0040446D                 nop
.text:0040446E                 nop
.text:0040446F                 nop
.text:0040446F sub_404390      endp ; sp-analysis failed
.text:0040446F
.text:00404470
.text:00404470 ; =============== S U B R O U T I N E =======================================
.text:00404470
.text:00404470
.text:00404470 sub_404470      proc near               ; DATA XREF: sub_404620:loc_404779↓o
.text:00404470                 push    edi
.text:00404471                 jb      short near ptr loc_4044DA+2
.text:00404473                 jz      short near ptr loc_4044E8+1
.text:00404475                 outs    dx, byte ptr gs:[esi]
.text:00404477                 and     [edx+79h], ah
.text:0040447A
.text:0040447A loc_40447A:                             ; CODE XREF: sub_404390+BF↑j
.text:0040447A                 and     ds:25202C73h, ah
.text:00404480                 jnb     short near ptr loc_4044AD+1
.text:00404482                 and     ds:610A2C73h, ah
.text:00404488                 outsb
.text:00404489                 and     fs:0A2E73h, ah
.text:00404490
.text:00404490 loc_404490:                             ; DATA XREF: sub_404620:loc_404785↓o
.text:00404490                 push    edi
.text:00404491                 jb      short loc_4044FC
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: sub_404390+99↑j
.text:00404493                 jz      short loc_404509
.text:00404495                 outs    dx, byte ptr gs:[esi]
.text:00404497                 and     [edx+79h], ah
.text:0040449A                 and     ds:25202C73h, ah
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: sub_404390+9B↑j
.text:004044A0                 jnb     short loc_4044CE
.text:004044A2                 and     ds:250A2C73h, ah
.text:004044A8                 jnb     short near ptr loc_4044D5+1
.text:004044AA
.text:004044AA loc_4044AA:                             ; CODE XREF: sub_404390+B0↑j
.text:004044AA                 and     [ecx+6Eh], ah
.text:004044AD
.text:004044AD loc_4044AD:                             ; CODE XREF: sub_404470+10↑j
.text:004044AD                 and     fs:0A2E73h, ah
.text:004044B4                 nop
.text:004044B5                 nop
.text:004044B6                 nop
.text:004044B7                 nop
.text:004044B8
.text:004044B8 loc_4044B8:                             ; CODE XREF: sub_404390+B2↑j
.text:004044B8                 nop
.text:004044B9                 nop
.text:004044BA                 nop
.text:004044BB                 nop
.text:004044BC                 nop
.text:004044BD                 nop
.text:004044BE                 nop
.text:004044BF                 nop
.text:004044C0                 nop
.text:004044C1                 nop
.text:004044C2                 nop
.text:004044C3                 nop
.text:004044C4                 nop
.text:004044C5                 nop
.text:004044C6                 nop
.text:004044C7                 nop
.text:004044C8                 nop
.text:004044C9                 nop
.text:004044CA                 nop
.text:004044CB                 nop
.text:004044CC                 nop
.text:004044CD                 nop
.text:004044CE
.text:004044CE loc_4044CE:                             ; CODE XREF: sub_404470:loc_4044A0↑j
.text:004044CE                 nop
.text:004044CF                 nop
.text:004044CF sub_404470      endp ; sp-analysis failed
.text:004044CF
.text:004044D0
.text:004044D0 ; =============== S U B R O U T I N E =======================================
.text:004044D0
.text:004044D0
.text:004044D0 sub_4044D0      proc near               ; DATA XREF: sub_404620:loc_404791↓o
.text:004044D0                 push    edi
.text:004044D1                 jb      short loc_40453C
.text:004044D3                 jz      short loc_404549
.text:004044D5
.text:004044D5 loc_4044D5:                             ; CODE XREF: sub_404470+38↑j
.text:004044D5                 outs    dx, byte ptr gs:[esi]
.text:004044D7                 and     [edx+79h], ah
.text:004044DA
.text:004044DA loc_4044DA:                             ; CODE XREF: sub_404470+1↑j
.text:004044DA                 and     ds:25202C73h, ah
.text:004044E0                 jnb     short loc_40450E
.text:004044E2                 and     ds:250A2C73h, ah
.text:004044E8
.text:004044E8 loc_4044E8:                             ; CODE XREF: sub_404470+3↑j
.text:004044E8                 jnb     short near ptr loc_404515+1
.text:004044EA                 and     ds:61202C73h, ah
.text:004044F0                 outsb
.text:004044F1                 and     fs:0A2E73h, ah
.text:004044F8                 nop
.text:004044F9                 nop
.text:004044FA                 nop
.text:004044FB                 nop
.text:004044FC
.text:004044FC loc_4044FC:                             ; CODE XREF: sub_404470+21↑j
.text:004044FC                 nop
.text:004044FD                 nop
.text:004044FE                 nop
.text:004044FF                 nop
.text:00404500                 nop
.text:00404501                 nop
.text:00404502                 nop
.text:00404503                 nop
.text:00404504                 nop
.text:00404505                 nop
.text:00404506                 nop
.text:00404507                 nop
.text:00404508                 nop
.text:00404509
.text:00404509 loc_404509:                             ; CODE XREF: sub_404470:loc_404493↑j
.text:00404509                 nop
.text:0040450A                 nop
.text:0040450B                 nop
.text:0040450C                 nop
.text:0040450D                 nop
.text:0040450E
.text:0040450E loc_40450E:                             ; CODE XREF: sub_4044D0+10↑j
.text:0040450E                 nop
.text:0040450F                 nop
.text:0040450F sub_4044D0      endp ; sp-analysis failed
.text:0040450F
.text:00404510
.text:00404510 ; =============== S U B R O U T I N E =======================================
.text:00404510
.text:00404510
.text:00404510 sub_404510      proc near               ; DATA XREF: sub_404620:loc_40479D↓o
.text:00404510                 push    edi
.text:00404511                 jb      short near ptr loc_404579+3
.text:00404513                 jz      short loc_404589
.text:00404515
.text:00404515 loc_404515:                             ; CODE XREF: sub_4044D0:loc_4044E8↑j
.text:00404515                 outs    dx, byte ptr gs:[esi]
.text:00404517                 and     [edx+79h], ah
.text:0040451A                 and     ds:25202C73h, ah
.text:00404520                 jnb     short loc_40454E
.text:00404522                 and     ds:250A2C73h, ah
.text:00404528                 jnb     short near ptr loc_404555+1
.text:0040452A                 and     ds:25202C73h, ah
.text:00404530                 jnb     short near ptr loc_40455A+4
.text:00404532                 and     [ecx+6Eh], ah
.text:00404535                 and     fs:0A2E73h, ah
.text:0040453C
.text:0040453C loc_40453C:                             ; CODE XREF: sub_4044D0+1↑j
.text:0040453C                 nop
.text:0040453D                 nop
.text:0040453E                 nop
.text:0040453F                 nop
.text:00404540                 nop
.text:00404541                 nop
.text:00404542                 nop
.text:00404543                 nop
.text:00404544                 nop
.text:00404545                 nop
.text:00404546                 nop
.text:00404547                 nop
.text:00404548                 nop
.text:00404549
.text:00404549 loc_404549:                             ; CODE XREF: sub_4044D0+3↑j
.text:00404549                 nop
.text:0040454A                 nop
.text:0040454B                 nop
.text:0040454C                 nop
.text:0040454D                 nop
.text:0040454E
.text:0040454E loc_40454E:                             ; CODE XREF: sub_404510+10↑j
.text:0040454E                 nop
.text:0040454F                 nop
.text:0040454F sub_404510      endp ; sp-analysis failed
.text:0040454F
.text:00404550
.text:00404550 ; =============== S U B R O U T I N E =======================================
.text:00404550
.text:00404550
.text:00404550 sub_404550      proc near               ; DATA XREF: sub_404620:loc_4047A9↓o
.text:00404550                 push    edi
.text:00404551                 jb      short near ptr loc_4045BA+2
.text:00404553                 jz      short near ptr loc_4045C4+5
.text:00404555
.text:00404555 loc_404555:                             ; CODE XREF: sub_404510+18↑j
.text:00404555                 outs    dx, byte ptr gs:[esi]
.text:00404557                 and     [edx+79h], ah
.text:0040455A
.text:0040455A loc_40455A:                             ; CODE XREF: sub_404510+20↑j
.text:0040455A                 and     ds:25202C73h, ah
.text:00404560                 jnb     short loc_40458E
.text:00404562                 and     ds:250A2C73h, ah
.text:00404568                 jnb     short near ptr loc_404595+1
.text:0040456A                 and     ds:25202C73h, ah
.text:00404570                 jnb     short near ptr loc_40459A+4
.text:00404572                 and     ds:610A2C73h, ah
.text:00404578                 outsb
.text:00404579
.text:00404579 loc_404579:                             ; CODE XREF: sub_404510+1↑j
.text:00404579                 and     fs:0A2E73h, ah
.text:00404580                 nop
.text:00404581                 nop
.text:00404582                 nop
.text:00404583                 nop
.text:00404584                 nop
.text:00404585                 nop
.text:00404586                 nop
.text:00404587                 nop
.text:00404588                 nop
.text:00404589
.text:00404589 loc_404589:                             ; CODE XREF: sub_404510+3↑j
.text:00404589                 nop
.text:0040458A                 nop
.text:0040458B                 nop
.text:0040458C                 nop
.text:0040458D                 nop
.text:0040458E
.text:0040458E loc_40458E:                             ; CODE XREF: sub_404550+10↑j
.text:0040458E                 nop
.text:0040458F                 nop
.text:0040458F sub_404550      endp ; sp-analysis failed
.text:0040458F
.text:00404590
.text:00404590 ; =============== S U B R O U T I N E =======================================
.text:00404590
.text:00404590
.text:00404590 sub_404590      proc near               ; DATA XREF: sub_404620:loc_4047B5↓o
.text:00404590                 push    edi
.text:00404591                 jb      short near ptr loc_4045FA+2
.text:00404593                 jz      short near ptr loc_404605+4
.text:00404595
.text:00404595 loc_404595:                             ; CODE XREF: sub_404550+18↑j
.text:00404595                 outs    dx, byte ptr gs:[esi]
.text:00404597                 and     [edx+79h], ah
.text:0040459A
.text:0040459A loc_40459A:                             ; CODE XREF: sub_404550+20↑j
.text:0040459A                 and     ds:25202C73h, ah
.text:004045A0                 jnb     short near ptr loc_4045CA+4
.text:004045A2                 and     ds:250A2C73h, ah
.text:004045A8                 jnb     short near ptr loc_4045D5+1
.text:004045AA                 and     ds:25202C73h, ah
.text:004045B0                 jnb     short near ptr loc_4045DA+4
.text:004045B2                 and     ds:250A2C73h, ah
.text:004045B8                 jnb     short near ptr loc_4045E2+4
.text:004045BA
.text:004045BA loc_4045BA:                             ; CODE XREF: sub_404550+1↑j
.text:004045BA                 and     [ecx+6Eh], ah
.text:004045BD                 and     fs:0A2E73h, ah
.text:004045C4
.text:004045C4 loc_4045C4:                             ; CODE XREF: sub_404550+3↑j
.text:004045C4                 lea     esi, [esi+0]
.text:004045CA
.text:004045CA loc_4045CA:                             ; CODE XREF: sub_404590+10↑j
.text:004045CA                 lea     edi, [edi+0]
.text:004045D0
.text:004045D0 loc_4045D0:                             ; DATA XREF: sub_404620:def_40468D↓o
.text:004045D0                 push    edi
.text:004045D1                 jb      short near ptr loc_40463B+1
.text:004045D3                 jz      short near ptr loc_404648+1
.text:004045D5
.text:004045D5 loc_4045D5:                             ; CODE XREF: sub_404590+18↑j
.text:004045D5                 outs    dx, byte ptr gs:[esi]
.text:004045D7                 and     [edx+79h], ah
.text:004045DA
.text:004045DA loc_4045DA:                             ; CODE XREF: sub_404590+20↑j
.text:004045DA                 and     ds:25202C73h, ah
.text:004045E0                 jnb     short near ptr loc_40460C+2
.text:004045E2
.text:004045E2 loc_4045E2:                             ; CODE XREF: sub_404590+28↑j
.text:004045E2                 and     ds:250A2C73h, ah
.text:004045E8                 jnb     short near ptr loc_404613+3
.text:004045EA                 and     ds:25202C73h, ah
.text:004045F0                 jnb     short near ptr loc_404619+5
.text:004045F2                 and     ds:250A2C73h, ah
.text:004045F8                 jnb     short near ptr loc_404624+2
.text:004045FA
.text:004045FA loc_4045FA:                             ; CODE XREF: sub_404590+1↑j
.text:004045FA                 and     ds:61202C73h, ah
.text:00404600                 outsb
.text:00404601                 and     fs:[edi+74h], ch
.text:00404605
.text:00404605 loc_404605:                             ; CODE XREF: sub_404590+3↑j
.text:00404605                 push    2E737265h
.text:0040460A                 or      al, [eax]
.text:0040460C
.text:0040460C loc_40460C:                             ; CODE XREF: sub_404590+50↑j
.text:0040460C                                         ; DATA XREF: sub_404620+1B5↓o
.text:0040460C                 and     eax, 73252073h
.text:00404611                 or      al, [eax]
.text:00404613
.text:00404613 loc_404613:                             ; CODE XREF: sub_404590+58↑j
.text:00404613                 lea     esi, [esi+0]
.text:00404619
.text:00404619 loc_404619:                             ; CODE XREF: sub_404590+60↑j
.text:00404619                 lea     edi, [edi+0]
.text:00404619 sub_404590      endp ; sp-analysis failed
.text:00404619
.text:00404620
.text:00404620 ; =============== S U B R O U T I N E =======================================
.text:00404620
.text:00404620
.text:00404620 ; int __cdecl sub_404620(FILE *, FILE *, int, int, va_list)
.text:00404620 sub_404620      proc near               ; CODE XREF: sub_4030C0+A5↑p
.text:00404620                                         ; .text:0040481A↓p
.text:00404620
.text:00404620 Stream          = dword ptr -2Ch
.text:00404620 Format          = dword ptr -28h
.text:00404620 ArgList         = dword ptr -24h
.text:00404620 var_20          = dword ptr -20h
.text:00404620 var_1C          = dword ptr -1Ch
.text:00404620 var_14          = dword ptr -14h
.text:00404620 arg_0           = dword ptr  4
.text:00404620 arg_4           = dword ptr  8
.text:00404620 arg_8           = dword ptr  0Ch
.text:00404620 arg_C           = dword ptr  10h
.text:00404620 arg_10          = dword ptr  14h
.text:00404620
.text:00404620                 push    ebp
.text:00404621                 push    edi
.text:00404622                 push    esi
.text:00404623                 push    ebx
.text:00404624
.text:00404624 loc_404624:                             ; CODE XREF: sub_404590+68↑j
.text:00404624                 sub     esp, 1Ch
.text:00404627                 xor     ebx, ebx
.text:00404629                 mov     edi, [esp+2Ch+arg_10]
.text:0040462D                 mov     edx, [esp+2Ch+arg_8]
.text:00404631                 mov     esi, [esp+2Ch+arg_0]
.text:00404635                 mov     eax, [edi]
.text:00404637                 mov     ecx, [esp+2Ch+arg_4]
.text:0040463B
.text:0040463B loc_40463B:                             ; CODE XREF: sub_404590+41↑j
.text:0040463B                 mov     [esp+2Ch+var_14], edx
.text:0040463F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404643                 lea     edx, [edi+4]
.text:00404646                 test    eax, eax
.text:00404648
.text:00404648 loc_404648:                             ; CODE XREF: sub_404590+43↑j
.text:00404648                 jz      short loc_40465C
.text:0040464A                 lea     esi, [esi+0]
.text:00404650
.text:00404650 loc_404650:                             ; CODE XREF: sub_404620+3A↓j
.text:00404650                 mov     eax, edx
.text:00404652                 inc     ebx
.text:00404653                 mov     eax, [eax]
.text:00404655                 add     edx, 4
.text:00404658                 test    eax, eax
.text:0040465A                 jnz     short loc_404650
.text:0040465C
.text:0040465C loc_40465C:                             ; CODE XREF: sub_404620:loc_404648↑j
.text:0040465C                 test    ecx, ecx
.text:0040465E                 jz      loc_4047CD
.text:00404664                 mov     [esp+2Ch+var_1C], ebp
.text:00404668                 mov     edx, [esp+2Ch+var_14]
.text:0040466C                 mov     [esp+2Ch+ArgList], ecx
.text:00404670                 mov     [esp+2Ch+Format], offset aSSS ; Format
.text:00404678                 mov     [esp+2Ch+var_20], edx
.text:0040467C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040467F                 call    fprintf
.text:00404684
.text:00404684 loc_404684:                             ; CODE XREF: sub_404620+1C9↓j
.text:00404684                 cmp     ebx, 9          ; switch 10 cases
.text:00404687                 ja      def_40468D      ; jumptable 0040468D default case
.text:0040468D                 jmp     ds:jpt_40468D[ebx*4] ; switch jump
.text:0040468D ; ---------------------------------------------------------------------------
.text:00404694 jpt_40468D      dd offset loc_4046BC    ; DATA XREF: sub_404620+6D↑r
.text:00404694                 dd offset loc_4046C1    ; jump table for switch statement
.text:00404694                 dd offset loc_404761
.text:00404694                 dd offset loc_40476D
.text:00404694                 dd offset loc_404779
.text:00404694                 dd offset loc_404785
.text:00404694                 dd offset loc_404791
.text:00404694                 dd offset loc_40479D
.text:00404694                 dd offset loc_4047A9
.text:00404694                 dd offset loc_4047B5
.text:004046BC ; ---------------------------------------------------------------------------
.text:004046BC
.text:004046BC loc_4046BC:                             ; CODE XREF: sub_404620+6D↑j
.text:004046BC                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:004046BC                 call    abort           ; jumptable 0040468D case 0
.text:004046C1 ; ---------------------------------------------------------------------------
.text:004046C1
.text:004046C1 loc_4046C1:                             ; CODE XREF: sub_404620+6D↑j
.text:004046C1                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:004046C1                 mov     [esp+2Ch+Stream], 40436Eh ; jumptable 0040468D case 1
.text:004046C8                 nop
.text:004046C9                 lea     esi, [esi+0]
.text:004046D0
.text:004046D0 loc_4046D0:                             ; CODE XREF: sub_404620+148↓j
.text:004046D0                                         ; sub_404620+154↓j ...
.text:004046D0                 call    ds:libintl_gettext
.text:004046D6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004046DA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004046DD                 mov     [esp+2Ch+Format], eax ; Format
.text:004046E1                 call    vfprintf
.text:004046E6                 mov     ebx, [esi+4]
.text:004046E9                 dec     ebx
.text:004046EA                 test    ebx, ebx
.text:004046EC                 mov     [esi+4], ebx
.text:004046EF                 js      short loc_40474F
.text:004046F1                 mov     edi, [esi]
.text:004046F3                 mov     byte ptr [edi], 0Ah
.text:004046F6                 inc     dword ptr [esi]
.text:004046F8
.text:004046F8 loc_4046F8:                             ; CODE XREF: sub_404620+13F↓j
.text:004046F8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004046FC                 mov     edx, Buffer
.text:00404702                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404705                 call    fputs
.text:0040470A                 mov     ebp, [esi+4]
.text:0040470D                 dec     ebp
.text:0040470E                 test    ebp, ebp
.text:00404710                 mov     [esi+4], ebp
.text:00404713                 js      short loc_40473D
.text:00404715                 mov     ecx, [esi]
.text:00404717                 mov     byte ptr [ecx], 0Ah
.text:0040471A                 inc     dword ptr [esi]
.text:0040471C
.text:0040471C loc_40471C:                             ; CODE XREF: sub_404620+12D↓j
.text:0040471C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404720                 mov     [esp+2Ch+Stream], offset sub_404390
.text:00404727                 call    ds:libintl_gettext
.text:0040472D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404731                 add     esp, 1Ch
.text:00404734                 pop     ebx
.text:00404735                 pop     esi
.text:00404736                 pop     edi
.text:00404737                 pop     ebp
.text:00404738                 jmp     fputs
.text:0040473D ; ---------------------------------------------------------------------------
.text:0040473D
.text:0040473D loc_40473D:                             ; CODE XREF: sub_404620+F3↑j
.text:0040473D                 mov     [esp+2Ch+Format], esi ; File
.text:00404741                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404748                 call    _flsbuf
.text:0040474D                 jmp     short loc_40471C
.text:0040474F ; ---------------------------------------------------------------------------
.text:0040474F
.text:0040474F loc_40474F:                             ; CODE XREF: sub_404620+CF↑j
.text:0040474F                 mov     [esp+2Ch+Format], esi ; File
.text:00404753                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040475A                 call    _flsbuf
.text:0040475F                 jmp     short loc_4046F8
.text:00404761 ; ---------------------------------------------------------------------------
.text:00404761
.text:00404761 loc_404761:                             ; CODE XREF: sub_404620+6D↑j
.text:00404761                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:00404761                 mov     [esp+2Ch+Stream], offset loc_404428 ; jumptable 0040468D case 2
.text:00404768                 jmp     loc_4046D0
.text:0040476D ; ---------------------------------------------------------------------------
.text:0040476D
.text:0040476D loc_40476D:                             ; CODE XREF: sub_404620+6D↑j
.text:0040476D                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:0040476D                 mov     [esp+2Ch+Stream], offset loc_40443F ; jumptable 0040468D case 3
.text:00404774                 jmp     loc_4046D0
.text:00404779 ; ---------------------------------------------------------------------------
.text:00404779
.text:00404779 loc_404779:                             ; CODE XREF: sub_404620+6D↑j
.text:00404779                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:00404779                 mov     [esp+2Ch+Stream], offset sub_404470 ; jumptable 0040468D case 4
.text:00404780                 jmp     loc_4046D0
.text:00404785 ; ---------------------------------------------------------------------------
.text:00404785
.text:00404785 loc_404785:                             ; CODE XREF: sub_404620+6D↑j
.text:00404785                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:00404785                 mov     [esp+2Ch+Stream], offset loc_404490 ; jumptable 0040468D case 5
.text:0040478C                 jmp     loc_4046D0
.text:00404791 ; ---------------------------------------------------------------------------
.text:00404791
.text:00404791 loc_404791:                             ; CODE XREF: sub_404620+6D↑j
.text:00404791                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:00404791                 mov     [esp+2Ch+Stream], offset sub_4044D0 ; jumptable 0040468D case 6
.text:00404798                 jmp     loc_4046D0
.text:0040479D ; ---------------------------------------------------------------------------
.text:0040479D
.text:0040479D loc_40479D:                             ; CODE XREF: sub_404620+6D↑j
.text:0040479D                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:0040479D                 mov     [esp+2Ch+Stream], offset sub_404510 ; jumptable 0040468D case 7
.text:004047A4                 jmp     loc_4046D0
.text:004047A9 ; ---------------------------------------------------------------------------
.text:004047A9
.text:004047A9 loc_4047A9:                             ; CODE XREF: sub_404620+6D↑j
.text:004047A9                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:004047A9                 mov     [esp+2Ch+Stream], offset sub_404550 ; jumptable 0040468D case 8
.text:004047B0                 jmp     loc_4046D0
.text:004047B5 ; ---------------------------------------------------------------------------
.text:004047B5
.text:004047B5 loc_4047B5:                             ; CODE XREF: sub_404620+6D↑j
.text:004047B5                                         ; DATA XREF: sub_404620:jpt_40468D↑o
.text:004047B5                 mov     [esp+2Ch+Stream], offset sub_404590 ; jumptable 0040468D case 9
.text:004047BC                 jmp     loc_4046D0
.text:004047C1 ; ---------------------------------------------------------------------------
.text:004047C1
.text:004047C1 def_40468D:                             ; CODE XREF: sub_404620+67↑j
.text:004047C1                 mov     [esp+2Ch+Stream], offset loc_4045D0 ; jumptable 0040468D default case
.text:004047C8                 jmp     loc_4046D0
.text:004047CD ; ---------------------------------------------------------------------------
.text:004047CD
.text:004047CD loc_4047CD:                             ; CODE XREF: sub_404620+3E↑j
.text:004047CD                 mov     [esp+2Ch+var_20], ebp
.text:004047D1                 mov     ecx, [esp+2Ch+var_14]
.text:004047D5                 mov     [esp+2Ch+Format], offset loc_40460C ; Format
.text:004047DD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004047E0                 mov     [esp+2Ch+ArgList], ecx
.text:004047E4                 call    fprintf
.text:004047E9                 jmp     loc_404684
.text:004047E9 sub_404620      endp
.text:004047E9
.text:004047E9 ; ---------------------------------------------------------------------------
.text:004047EE                 align 10h
.text:004047F0                 sub     esp, 1Ch
.text:004047F3                 mov     edx, [esp+2Ch]
.text:004047F7                 lea     ecx, [esp+30h]
.text:004047FB                 mov     [esp+10h], ecx
.text:004047FF                 mov     ecx, [esp+28h]
.text:00404803                 mov     [esp+0Ch], edx
.text:00404807                 mov     edx, [esp+24h]
.text:0040480B                 mov     [esp+8], ecx
.text:0040480F                 mov     [esp+4], edx
.text:00404813                 mov     edx, [esp+20h]
.text:00404817                 mov     [esp], edx
.text:0040481A                 call    sub_404620
.text:0040481F                 add     esp, 1Ch
.text:00404822                 retn
.text:00404822 ; ---------------------------------------------------------------------------
.text:00404823                 align 10h
.text:00404830 aLiteral        db 'literal',0          ; DATA XREF: .text:00404870↓o
.text:00404838 aShell          db 'shell',0            ; DATA XREF: .text:00404874↓o
.text:0040483E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404878↓o
.text:0040484B aC              db 'c',0                ; DATA XREF: .text:0040487C↓o
.text:0040484D aEscape         db 'escape',0           ; DATA XREF: .text:00404880↓o
.text:00404854 aLocale         db 'locale',0           ; DATA XREF: .text:00404884↓o
.text:0040485B aClocale        db 'clocale',0          ; DATA XREF: .text:00404888↓o
.text:00404863                 align 10h
.text:00404870                 dd offset aLiteral      ; "literal"
.text:00404874                 dd offset aShell        ; "shell"
.text:00404878                 dd offset aShellAlways  ; "shell-always"
.text:0040487C                 dd offset aC            ; "c"
.text:00404880                 dd offset aEscape       ; "escape"
.text:00404884                 dd offset aLocale       ; "locale"
.text:00404888                 dd offset aClocale      ; "clocale"
.text:0040488C                 dd 2 dup(0)
.text:00404894                 dd 1, 2, 3, 4, 5, 6
.text:004048AC asc_4048AC:                             ; DATA XREF: sub_4048C0+7E↓o
.text:004048AC                                         ; sub_4048C0+A39↓o ...
.text:004048AC                 text "UTF-16LE", '"',27h,'`'
.text:004048B2                 align 10h
.text:004048C0
.text:004048C0 ; =============== S U B R O U T I N E =======================================
.text:004048C0
.text:004048C0
.text:004048C0 ; int __cdecl sub_4048C0(int, int, char *Str, int, int, int)
.text:004048C0 sub_4048C0      proc near               ; CODE XREF: sub_4048C0+43A↓p
.text:004048C0                                         ; .text:00405483↓p ...
.text:004048C0
.text:004048C0 C               = dword ptr -4Ch
.text:004048C0 Type            = dword ptr -48h
.text:004048C0 SizeInBytes     = dword ptr -44h
.text:004048C0 State           = dword ptr -40h
.text:004048C0 var_3C          = dword ptr -3Ch
.text:004048C0 var_38          = dword ptr -38h
.text:004048C0 var_34          = dword ptr -34h
.text:004048C0 var_30          = dword ptr -30h
.text:004048C0 var_29          = byte ptr -29h
.text:004048C0 var_28          = dword ptr -28h
.text:004048C0 var_22          = byte ptr -22h
.text:004048C0 var_21          = byte ptr -21h
.text:004048C0 var_20          = dword ptr -20h
.text:004048C0 var_1C          = dword ptr -1Ch
.text:004048C0 var_18          = mbstate_t ptr -18h
.text:004048C0 arg_0           = dword ptr  4
.text:004048C0 arg_4           = dword ptr  8
.text:004048C0 Str             = dword ptr  0Ch
.text:004048C0 arg_C           = dword ptr  10h
.text:004048C0 arg_10          = dword ptr  14h
.text:004048C0 arg_14          = dword ptr  18h
.text:004048C0
.text:004048C0                 push    ebp
.text:004048C1                 push    edi
.text:004048C2                 push    esi
.text:004048C3                 push    ebx
.text:004048C4                 sub     esp, 3Ch
.text:004048C7                 mov     edx, ds:__mb_cur_max
.text:004048CD                 mov     [esp+4Ch+var_34], 0
.text:004048D5                 mov     [esp+4Ch+var_1C], 0
.text:004048DD                 cmp     dword ptr [edx], 1
.text:004048E0                 mov     [esp+4Ch+var_20], 0
.text:004048E8                 mov     [esp+4Ch+var_21], 0
.text:004048ED                 setz    [esp+4Ch+var_22]
.text:004048F2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004048F7                 ja      short def_4048FD ; jumptable 004048FD default case, cases 0,1
.text:004048F9                 mov     edx, [esp+4Ch+arg_10]
.text:004048FD                 jmp     ds:jpt_4048FD[edx*4] ; switch jump
.text:004048FD ; ---------------------------------------------------------------------------
.text:00404904 jpt_4048FD      dd offset def_4048FD    ; DATA XREF: sub_4048C0+3D↑r
.text:00404904                 dd offset def_4048FD    ; jump table for switch statement
.text:00404904                 dd offset loc_405245
.text:00404904                 dd offset loc_404920
.text:00404904                 dd offset loc_40526B
.text:00404904                 dd offset loc_405275
.text:00404904                 dd offset loc_405275
.text:00404920 ; ---------------------------------------------------------------------------
.text:00404920
.text:00404920 loc_404920:                             ; CODE XREF: sub_4048C0+3D↑j
.text:00404920                                         ; DATA XREF: sub_4048C0:jpt_4048FD↑o
.text:00404920                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004048FD case 3
.text:00404924                 cmp     [esp+4Ch+var_34], eax
.text:00404928                 jnb     short loc_404931
.text:0040492A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040492E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404931
.text:00404931 loc_404931:                             ; CODE XREF: sub_4048C0+68↑j
.text:00404931                 mov     [esp+4Ch+var_34], 1
.text:00404939                 mov     [esp+4Ch+var_21], 1
.text:0040493E                 mov     [esp+4Ch+var_1C], offset asc_4048AC ; "\"'`"
.text:00404946
.text:00404946 loc_404946:                             ; CODE XREF: sub_4048C0+9A6↓j
.text:00404946                 mov     [esp+4Ch+var_20], 1
.text:0040494E
.text:0040494E def_4048FD:                             ; CODE XREF: sub_4048C0+37↑j
.text:0040494E                                         ; sub_4048C0+3D↑j ...
.text:0040494E                 xor     ebp, ebp        ; jumptable 004048FD default case, cases 0,1
.text:00404950
.text:00404950 loc_404950:                             ; CODE XREF: sub_4048C0+3DB↓j
.text:00404950                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404955                 jz      loc_405237
.text:0040495B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040495F
.text:0040495F loc_40495F:                             ; CODE XREF: sub_4048C0+980↓j
.text:0040495F                 jz      loc_4051CE
.text:00404965                 cmp     [esp+4Ch+var_21], 0
.text:0040496A                 jz      short loc_4049B0
.text:0040496C                 mov     esi, [esp+4Ch+var_20]
.text:00404970                 test    esi, esi
.text:00404972                 jz      short loc_4049B0
.text:00404974                 mov     ecx, [esp+4Ch+var_20]
.text:00404978                 lea     edi, [ecx+ebp]
.text:0040497B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040497F                 ja      short loc_4049B0
.text:00404981                 cld
.text:00404982                 mov     ebx, [esp+4Ch+Str]
.text:00404986                 mov     edi, [esp+4Ch+var_1C]
.text:0040498A                 add     ebx, ebp
.text:0040498C                 mov     esi, ebx
.text:0040498E                 cmp     ecx, ecx
.text:00404990                 repe cmpsb
.text:00404992                 jnz     short loc_4049B0
.text:00404994                 mov     edx, [esp+4Ch+arg_4]
.text:00404998                 cmp     [esp+4Ch+var_34], edx
.text:0040499C                 jnb     short loc_4049AA
.text:0040499E                 mov     ecx, [esp+4Ch+arg_0]
.text:004049A2                 mov     eax, [esp+4Ch+var_34]
.text:004049A6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004049AA
.text:004049AA loc_4049AA:                             ; CODE XREF: sub_4048C0+DC↑j
.text:004049AA                 inc     [esp+4Ch+var_34]
.text:004049AE                 mov     esi, esi
.text:004049B0
.text:004049B0 loc_4049B0:                             ; CODE XREF: sub_4048C0+AA↑j
.text:004049B0                                         ; sub_4048C0+B2↑j ...
.text:004049B0                 mov     edi, [esp+4Ch+Str]
.text:004049B4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004049B9                 movzx   eax, bl
.text:004049BC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004049BF                 ja      def_4049C5      ; jumptable 004049C5 default case, cases 1-6,14-31,64
.text:004049C5                 jmp     ds:jpt_4049C5[eax*4] ; switch jump
.text:004049C5 ; ---------------------------------------------------------------------------
.text:004049CC jpt_4049C5      dd offset loc_404BC8, offset def_4049C5, offset def_4049C5
.text:004049CC                                         ; DATA XREF: sub_4048C0+105↑r
.text:004049CC                 dd offset def_4049C5, offset def_4049C5, offset def_4049C5 ; jump table for switch statement
.text:004049CC                 dd offset def_4049C5, offset loc_404CA0, offset loc_404CBE
.text:004049CC                 dd offset loc_404CC2, offset loc_404D07, offset loc_404D0B
.text:004049CC                 dd offset loc_404D0F, offset loc_404D13, offset def_4049C5
.text:004049CC                 dd offset def_4049C5, offset def_4049C5, offset def_4049C5
.text:004049CC                 dd offset def_4049C5, offset def_4049C5, offset def_4049C5
.text:004049CC                 dd offset def_4049C5, offset def_4049C5, offset def_4049C5
.text:004049CC                 dd offset def_4049C5, offset def_4049C5, offset def_4049C5
.text:004049CC                 dd offset def_4049C5, offset def_4049C5, offset def_4049C5
.text:004049CC                 dd offset def_4049C5, offset def_4049C5, offset loc_405198
.text:004049CC                 dd offset loc_405198, offset loc_405198, offset loc_4051BA
.text:004049CC                 dd offset loc_405198, offset def_404DC2, offset loc_405198
.text:004049CC                 dd offset loc_404D17, offset loc_405198, offset loc_405198
.text:004049CC                 dd offset loc_405198, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset loc_405198
.text:004049CC                 dd offset loc_405198, offset loc_405198, offset loc_405198
.text:004049CC                 dd offset loc_404D7C, offset def_4049C5, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset loc_405198, offset loc_405191
.text:004049CC                 dd offset def_404DC2, offset loc_405198, offset def_404DC2
.text:004049CC                 dd offset loc_405198, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset def_404DC2, offset def_404DC2, offset def_404DC2
.text:004049CC                 dd offset loc_4051A8, offset loc_405198, offset loc_4051A8
.text:004049CC                 dd offset loc_4051BA
.text:00404BC8 ; ---------------------------------------------------------------------------
.text:00404BC8
.text:00404BC8 loc_404BC8:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404BC8                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404BC8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004049C5 case 0
.text:00404BCD                 lea     eax, [ebp+1]
.text:00404BD0                 jz      loc_404C80
.text:00404BD6                 mov     esi, [esp+4Ch+arg_4]
.text:00404BDA                 cmp     [esp+4Ch+var_34], esi
.text:00404BDE                 jnb     short loc_404BEC
.text:00404BE0                 mov     eax, [esp+4Ch+arg_0]
.text:00404BE4                 mov     ebx, [esp+4Ch+var_34]
.text:00404BE8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00404BEC
.text:00404BEC loc_404BEC:                             ; CODE XREF: sub_4048C0+31E↑j
.text:00404BEC                 inc     [esp+4Ch+var_34]
.text:00404BF0                 mov     edx, [esp+4Ch+arg_4]
.text:00404BF4                 cmp     [esp+4Ch+var_34], edx
.text:00404BF8                 jnb     short loc_404C06
.text:00404BFA                 mov     edi, [esp+4Ch+arg_0]
.text:00404BFE                 mov     ecx, [esp+4Ch+var_34]
.text:00404C02                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404C06
.text:00404C06 loc_404C06:                             ; CODE XREF: sub_4048C0+338↑j
.text:00404C06                 inc     [esp+4Ch+var_34]
.text:00404C0A                 mov     esi, [esp+4Ch+arg_4]
.text:00404C0E                 cmp     [esp+4Ch+var_34], esi
.text:00404C12                 jnb     short loc_404C20
.text:00404C14                 mov     ebx, [esp+4Ch+arg_0]
.text:00404C18                 mov     eax, [esp+4Ch+var_34]
.text:00404C1C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404C20
.text:00404C20 loc_404C20:                             ; CODE XREF: sub_4048C0+352↑j
.text:00404C20                 inc     [esp+4Ch+var_34]
.text:00404C24                 mov     bl, 30h ; '0'
.text:00404C26                 lea     esi, [esi+0]
.text:00404C29                 lea     edi, [edi+0]
.text:00404C30
.text:00404C30 def_404DC2:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404C30                                         ; sub_4048C0+463↓j ...
.text:00404C30                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:00404C30                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:00404C35                 lea     eax, [ebp+1]
.text:00404C38                 jz      short loc_404C80
.text:00404C3A                 mov     cl, bl
.text:00404C3C                 mov     edi, [esp+4Ch+arg_14]
.text:00404C40                 mov     esi, 1
.text:00404C45                 shr     cl, 5
.text:00404C48                 movzx   edx, cl
.text:00404C4B                 mov     ecx, ebx
.text:00404C4D                 and     ecx, 1Fh
.text:00404C50                 shl     esi, cl
.text:00404C52                 test    [edi+edx*4+4], esi
.text:00404C56                 jz      short loc_404C72
.text:00404C58
.text:00404C58 loc_404C58:                             ; CODE XREF: sub_4048C0+3FC↓j
.text:00404C58                 mov     edx, [esp+4Ch+arg_4]
.text:00404C5C                 cmp     [esp+4Ch+var_34], edx
.text:00404C60                 jnb     short loc_404C6E
.text:00404C62                 mov     edi, [esp+4Ch+arg_0]
.text:00404C66                 mov     esi, [esp+4Ch+var_34]
.text:00404C6A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00404C6E
.text:00404C6E loc_404C6E:                             ; CODE XREF: sub_4048C0+3A0↑j
.text:00404C6E                 inc     [esp+4Ch+var_34]
.text:00404C72
.text:00404C72 loc_404C72:                             ; CODE XREF: sub_4048C0+396↑j
.text:00404C72                 lea     eax, [ebp+1]
.text:00404C75                 lea     esi, [esi+0]
.text:00404C79                 lea     edi, [edi+0]
.text:00404C80
.text:00404C80 loc_404C80:                             ; CODE XREF: sub_4048C0+310↑j
.text:00404C80                                         ; sub_4048C0+378↑j ...
.text:00404C80                 mov     ebp, [esp+4Ch+arg_4]
.text:00404C84                 cmp     [esp+4Ch+var_34], ebp
.text:00404C88                 jnb     short loc_404C95
.text:00404C8A                 mov     edx, [esp+4Ch+arg_0]
.text:00404C8E                 mov     ecx, [esp+4Ch+var_34]
.text:00404C92                 mov     [ecx+edx], bl
.text:00404C95
.text:00404C95 loc_404C95:                             ; CODE XREF: sub_4048C0+3C8↑j
.text:00404C95                 inc     [esp+4Ch+var_34]
.text:00404C99                 mov     ebp, eax
.text:00404C9B                 jmp     loc_404950
.text:00404CA0 ; ---------------------------------------------------------------------------
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404CA0                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404CA0                 mov     dl, 61h ; 'a'   ; jumptable 004049C5 case 7
.text:00404CA2                 lea     esi, [esi+0]
.text:00404CA9                 lea     edi, [edi+0]
.text:00404CB0
.text:00404CB0 loc_404CB0:                             ; CODE XREF: sub_4048C0+400↓j
.text:00404CB0                                         ; sub_4048C0+409↓j ...
.text:00404CB0                 cmp     [esp+4Ch+var_21], 0
.text:00404CB5                 lea     eax, [ebp+1]
.text:00404CB8                 jz      short loc_404C80
.text:00404CBA                 mov     bl, dl
.text:00404CBC                 jmp     short loc_404C58
.text:00404CBE ; ---------------------------------------------------------------------------
.text:00404CBE
.text:00404CBE loc_404CBE:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404CBE                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404CBE                 mov     dl, 62h ; 'b'   ; jumptable 004049C5 case 8
.text:00404CC0                 jmp     short loc_404CB0
.text:00404CC2 ; ---------------------------------------------------------------------------
.text:00404CC2
.text:00404CC2 loc_404CC2:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404CC2                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404CC2                 mov     dl, 74h ; 't'   ; jumptable 004049C5 case 9
.text:00404CC4
.text:00404CC4 loc_404CC4:                             ; CODE XREF: sub_4048C0+449↓j
.text:00404CC4                                         ; sub_4048C0+455↓j ...
.text:00404CC4                 cmp     [esp+4Ch+arg_10], 1
.text:00404CC9                 jnz     short loc_404CB0
.text:00404CCB
.text:00404CCB loc_404CCB:                             ; CODE XREF: sub_4048C0+45C↓j
.text:00404CCB                                         ; sub_4048C0+4C1↓j ...
.text:00404CCB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00405092 cases 91,92,94,96,124
.text:00404CD3                 mov     eax, [esp+4Ch+arg_14]
.text:00404CD7                 mov     edx, [esp+4Ch+arg_C]
.text:00404CDB                 mov     ecx, [esp+4Ch+Str]
.text:00404CDF                 mov     ebx, [esp+4Ch+arg_4]
.text:00404CE3                 mov     [esp+4Ch+var_38], eax ; int
.text:00404CE7                 mov     ebp, [esp+4Ch+arg_0]
.text:00404CEB                 mov     [esp+4Ch+State], edx ; int
.text:00404CEF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404CF3                 mov     [esp+4Ch+Type], ebx ; int
.text:00404CF7                 mov     [esp+4Ch+C], ebp ; int
.text:00404CFA                 call    sub_4048C0
.text:00404CFF
.text:00404CFF loc_404CFF:                             ; CODE XREF: sub_4048C0+972↓j
.text:00404CFF                 add     esp, 3Ch
.text:00404D02                 pop     ebx
.text:00404D03                 pop     esi
.text:00404D04                 pop     edi
.text:00404D05                 pop     ebp
.text:00404D06                 retn
.text:00404D07 ; ---------------------------------------------------------------------------
.text:00404D07
.text:00404D07 loc_404D07:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404D07                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404D07                 mov     dl, 6Eh ; 'n'   ; jumptable 004049C5 case 10
.text:00404D09                 jmp     short loc_404CC4
.text:00404D0B ; ---------------------------------------------------------------------------
.text:00404D0B
.text:00404D0B loc_404D0B:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404D0B                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404D0B                 mov     dl, 76h ; 'v'   ; jumptable 004049C5 case 11
.text:00404D0D                 jmp     short loc_404CB0
.text:00404D0F ; ---------------------------------------------------------------------------
.text:00404D0F
.text:00404D0F loc_404D0F:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404D0F                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404D0F                 mov     dl, 66h ; 'f'   ; jumptable 004049C5 case 12
.text:00404D11                 jmp     short loc_404CB0
.text:00404D13 ; ---------------------------------------------------------------------------
.text:00404D13
.text:00404D13 loc_404D13:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404D13                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404D13                 mov     dl, 72h ; 'r'   ; jumptable 004049C5 case 13
.text:00404D15                 jmp     short loc_404CC4
.text:00404D17 ; ---------------------------------------------------------------------------
.text:00404D17
.text:00404D17 loc_404D17:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404D17                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404D17                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004049C5 case 39
.text:00404D1C                 jz      short loc_404CCB ; jumptable 00405092 cases 91,92,94,96,124
.text:00404D1E                 cmp     [esp+4Ch+arg_10], 2
.text:00404D23                 jnz     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:00404D23                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:00404D29                 mov     edx, [esp+4Ch+arg_4]
.text:00404D2D                 cmp     [esp+4Ch+var_34], edx
.text:00404D31                 jnb     short loc_404D3F
.text:00404D33                 mov     ecx, [esp+4Ch+arg_0]
.text:00404D37                 mov     edi, [esp+4Ch+var_34]
.text:00404D3B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00404D3F
.text:00404D3F loc_404D3F:                             ; CODE XREF: sub_4048C0+471↑j
.text:00404D3F                 inc     [esp+4Ch+var_34]
.text:00404D43                 mov     eax, [esp+4Ch+arg_4]
.text:00404D47                 cmp     [esp+4Ch+var_34], eax
.text:00404D4B                 jnb     short loc_404D59
.text:00404D4D                 mov     esi, [esp+4Ch+arg_0]
.text:00404D51                 mov     edx, [esp+4Ch+var_34]
.text:00404D55                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404D59
.text:00404D59 loc_404D59:                             ; CODE XREF: sub_4048C0+48B↑j
.text:00404D59                 inc     [esp+4Ch+var_34]
.text:00404D5D                 mov     edi, [esp+4Ch+arg_4]
.text:00404D61                 cmp     [esp+4Ch+var_34], edi
.text:00404D65                 jnb     short loc_404D73
.text:00404D67                 mov     ecx, [esp+4Ch+arg_0]
.text:00404D6B                 mov     eax, [esp+4Ch+var_34]
.text:00404D6F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404D73
.text:00404D73 loc_404D73:                             ; CODE XREF: sub_4048C0+4A5↑j
.text:00404D73                                         ; sub_4048C0+5C4↓j ...
.text:00404D73                 inc     [esp+4Ch+var_34]
.text:00404D77                 jmp     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:00404D77                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:00404D7C ; ---------------------------------------------------------------------------
.text:00404D7C
.text:00404D7C loc_404D7C:                             ; CODE XREF: sub_4048C0+105↑j
.text:00404D7C                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00404D7C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004049C5 case 63
.text:00404D81                 jz      loc_404CCB      ; jumptable 00405092 cases 91,92,94,96,124
.text:00404D87                 cmp     [esp+4Ch+arg_10], 3
.text:00404D8C                 jnz     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:00404D8C                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:00404D92                 lea     edx, [ebp+2]
.text:00404D95                 cmp     edx, [esp+4Ch+arg_C]
.text:00404D99                 jnb     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:00404D99                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:00404D9F                 mov     esi, [esp+4Ch+Str]
.text:00404DA3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404DA8                 jnz     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:00404DA8                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:00404DAE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404DB3                 movsx   eax, cl
.text:00404DB6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404DB9                 cmp     eax, 1Dh
.text:00404DBC                 ja      def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:00404DBC                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:00404DC2                 jmp     ds:jpt_404DC2[eax*4] ; switch jump
.text:00404DC2 ; ---------------------------------------------------------------------------
.text:00404DC9                 align 4
.text:00404DCC jpt_404DC2      dd offset loc_404E44    ; DATA XREF: sub_4048C0+502↑r
.text:00404DCC                 dd offset def_404DC2    ; jump table for switch statement
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset loc_404E44
.text:00404DCC                 dd offset loc_404E44
.text:00404DCC                 dd offset loc_404E44
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset loc_404E44
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset loc_404E44
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset def_404DC2
.text:00404DCC                 dd offset loc_404E44
.text:00404DCC                 dd offset loc_404E44
.text:00404DCC                 dd offset loc_404E44
.text:00404E44 ; ---------------------------------------------------------------------------
.text:00404E44
.text:00404E44 loc_404E44:                             ; CODE XREF: sub_4048C0+502↑j
.text:00404E44                                         ; DATA XREF: sub_4048C0:jpt_404DC2↑o
.text:00404E44                 mov     ebp, edx        ; jumptable 00404DC2 cases 33,39-41,45,47,60-62
.text:00404E46                 mov     bl, cl
.text:00404E48                 mov     edx, [esp+4Ch+arg_4]
.text:00404E4C                 cmp     [esp+4Ch+var_34], edx
.text:00404E50                 jnb     short loc_404E5E
.text:00404E52                 mov     ecx, [esp+4Ch+arg_0]
.text:00404E56                 mov     edi, [esp+4Ch+var_34]
.text:00404E5A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00404E5E
.text:00404E5E loc_404E5E:                             ; CODE XREF: sub_4048C0+590↑j
.text:00404E5E                 inc     [esp+4Ch+var_34]
.text:00404E62                 mov     eax, [esp+4Ch+arg_4]
.text:00404E66                 cmp     [esp+4Ch+var_34], eax
.text:00404E6A                 jnb     short loc_404E78
.text:00404E6C                 mov     edx, [esp+4Ch+arg_0]
.text:00404E70                 mov     esi, [esp+4Ch+var_34]
.text:00404E74                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404E78
.text:00404E78 loc_404E78:                             ; CODE XREF: sub_4048C0+5AA↑j
.text:00404E78                 inc     [esp+4Ch+var_34]
.text:00404E7C                 mov     edi, [esp+4Ch+arg_4]
.text:00404E80                 cmp     [esp+4Ch+var_34], edi
.text:00404E84                 jnb     loc_404D73
.text:00404E8A                 mov     eax, [esp+4Ch+arg_0]
.text:00404E8E                 mov     ecx, [esp+4Ch+var_34]
.text:00404E92                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404E96                 jmp     loc_404D73
.text:00404E96 ; ---------------------------------------------------------------------------
.text:00404E9B                 align 10h
.text:00404EA0
.text:00404EA0 def_4049C5:                             ; CODE XREF: sub_4048C0+FF↑j
.text:00404EA0                                         ; sub_4048C0+105↑j
.text:00404EA0                                         ; DATA XREF: ...
.text:00404EA0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004049C5 default case, cases 1-6,14-31,64
.text:00404EA5                 jz      loc_404FD0
.text:00404EAB                 mov     [esp+4Ch+var_28], 1
.text:00404EB3                 mov     esi, ds:__mb_cur_max
.text:00404EB9                 movzx   edx, bl
.text:00404EBC                 cmp     dword ptr [esi], 1
.text:00404EBF                 jz      loc_404FB4
.text:00404EC5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404ECD                 mov     [esp+4Ch+C], edx ; C
.text:00404ED0                 call    _isctype
.text:00404ED5
.text:00404ED5 loc_404ED5:                             ; CODE XREF: sub_4048C0+705↓j
.text:00404ED5                 test    eax, eax
.text:00404ED7                 setnz   [esp+4Ch+var_29]
.text:00404EDC
.text:00404EDC loc_404EDC:                             ; CODE XREF: sub_4048C0+7A5↓j
.text:00404EDC                 cmp     [esp+4Ch+var_21], 0
.text:00404EE1                 lea     eax, [ebp+1]
.text:00404EE4                 jz      loc_404C80
.text:00404EEA                 cmp     [esp+4Ch+var_29], 0
.text:00404EEF                 jnz     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:00404EEF                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:00404EF5
.text:00404EF5 loc_404EF5:                             ; CODE XREF: sub_4048C0+7AB↓j
.text:00404EF5                 mov     eax, [esp+4Ch+var_28]
.text:00404EF9                 lea     edx, [eax+ebp]
.text:00404EFC                 lea     esi, [esi+0]
.text:00404F00
.text:00404F00 loc_404F00:                             ; CODE XREF: sub_4048C0+6EF↓j
.text:00404F00                 cmp     [esp+4Ch+var_21], 0
.text:00404F05                 jz      short loc_404F80
.text:00404F07                 cmp     [esp+4Ch+var_29], 0
.text:00404F0C                 jnz     short loc_404F80
.text:00404F0E                 mov     edi, [esp+4Ch+arg_4]
.text:00404F12                 cmp     [esp+4Ch+var_34], edi
.text:00404F16                 jnb     short loc_404F24
.text:00404F18                 mov     esi, [esp+4Ch+arg_0]
.text:00404F1C                 mov     eax, [esp+4Ch+var_34]
.text:00404F20                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404F24
.text:00404F24 loc_404F24:                             ; CODE XREF: sub_4048C0+656↑j
.text:00404F24                 inc     [esp+4Ch+var_34]
.text:00404F28                 mov     ecx, [esp+4Ch+arg_4]
.text:00404F2C                 cmp     [esp+4Ch+var_34], ecx
.text:00404F30                 jnb     short loc_404F45
.text:00404F32                 mov     cl, bl
.text:00404F34                 mov     esi, [esp+4Ch+arg_0]
.text:00404F38                 mov     edi, [esp+4Ch+var_34]
.text:00404F3C                 shr     cl, 6
.text:00404F3F                 add     cl, 30h ; '0'
.text:00404F42                 mov     [edi+esi], cl
.text:00404F45
.text:00404F45 loc_404F45:                             ; CODE XREF: sub_4048C0+670↑j
.text:00404F45                 inc     [esp+4Ch+var_34]
.text:00404F49                 mov     edi, [esp+4Ch+arg_4]
.text:00404F4D                 cmp     [esp+4Ch+var_34], edi
.text:00404F51                 jnb     short loc_404F69
.text:00404F53                 mov     cl, bl
.text:00404F55                 mov     esi, [esp+4Ch+arg_0]
.text:00404F59                 shr     cl, 3
.text:00404F5C                 mov     edi, [esp+4Ch+var_34]
.text:00404F60                 and     cl, 7
.text:00404F63                 add     cl, 30h ; '0'
.text:00404F66                 mov     [edi+esi], cl
.text:00404F69
.text:00404F69 loc_404F69:                             ; CODE XREF: sub_4048C0+691↑j
.text:00404F69                 inc     [esp+4Ch+var_34]
.text:00404F6D                 and     bl, 7
.text:00404F70                 add     bl, 30h ; '0'
.text:00404F73                 lea     esi, [esi+0]
.text:00404F79                 lea     edi, [edi+0]
.text:00404F80
.text:00404F80 loc_404F80:                             ; CODE XREF: sub_4048C0+645↑j
.text:00404F80                                         ; sub_4048C0+64C↑j
.text:00404F80                 lea     eax, [ebp+1]
.text:00404F83                 cmp     edx, eax
.text:00404F85                 jbe     loc_404C80
.text:00404F8B                 mov     ebp, [esp+4Ch+arg_4]
.text:00404F8F                 cmp     [esp+4Ch+var_34], ebp
.text:00404F93                 jnb     short loc_404FA0
.text:00404F95                 mov     ecx, [esp+4Ch+arg_0]
.text:00404F99                 mov     edi, [esp+4Ch+var_34]
.text:00404F9D                 mov     [edi+ecx], bl
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: sub_4048C0+6D3↑j
.text:00404FA0                 inc     [esp+4Ch+var_34]
.text:00404FA4                 mov     ebp, eax
.text:00404FA6                 mov     eax, [esp+4Ch+Str]
.text:00404FAA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00404FAF                 jmp     loc_404F00
.text:00404FB4 ; ---------------------------------------------------------------------------
.text:00404FB4
.text:00404FB4 loc_404FB4:                             ; CODE XREF: sub_4048C0+5FF↑j
.text:00404FB4                 mov     ecx, ds:_pctype
.text:00404FBA                 mov     edi, [ecx]
.text:00404FBC                 movzx   eax, word ptr [edi+edx*2]
.text:00404FC0                 and     eax, 157h
.text:00404FC5                 jmp     loc_404ED5
.text:00404FC5 ; ---------------------------------------------------------------------------
.text:00404FCA                 align 10h
.text:00404FD0
.text:00404FD0 loc_404FD0:                             ; CODE XREF: sub_4048C0+5E5↑j
.text:00404FD0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404FD5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00404FDD                 mov     [esp+4Ch+var_28], 0
.text:00404FE5                 mov     [esp+4Ch+var_29], 1
.text:00404FEA                 jz      loc_40517C
.text:00404FF0
.text:00404FF0 loc_404FF0:                             ; CODE XREF: sub_4048C0+8CC↓j
.text:00404FF0                 mov     ecx, [esp+4Ch+arg_C]
.text:00404FF4                 lea     edx, [esp+4Ch+var_18]
.text:00404FF8                 mov     edi, [esp+4Ch+Str]
.text:00404FFC                 mov     [esp+4Ch+State], edx ; State
.text:00405000                 lea     esi, [esp+4Ch+var_18._State]
.text:00405004                 sub     ecx, ebp
.text:00405006                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040500A                 add     edi, ebp
.text:0040500C                 mov     [esp+4Ch+var_30], edi
.text:00405010                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00405014                 mov     [esp+4Ch+C], esi ; DstCh
.text:00405017                 call    mbrtowc
.text:0040501C                 test    eax, eax
.text:0040501E                 mov     edi, eax
.text:00405020                 jz      short loc_405060
.text:00405022                 cmp     eax, 0FFFFFFFFh
.text:00405025                 jz      loc_405172
.text:0040502B                 cmp     eax, 0FFFFFFFEh
.text:0040502E                 jz      loc_405132
.text:00405034                 cmp     [esp+4Ch+arg_10], 1
.text:00405039                 jz      short loc_405070
.text:0040503B
.text:0040503B loc_40503B:                             ; CODE XREF: sub_4048C0+7B9↓j
.text:0040503B                                         ; sub_4048C0+86D↓j
.text:0040503B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00405040                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405048                 mov     [esp+4Ch+C], ecx ; C
.text:0040504B                 call    iswctype
.text:00405050                 test    eax, eax
.text:00405052                 jnz     short loc_405059
.text:00405054                 mov     [esp+4Ch+var_29], 0
.text:00405059
.text:00405059 loc_405059:                             ; CODE XREF: sub_4048C0+792↑j
.text:00405059                 mov     [esp+4Ch+var_28], edi
.text:0040505D                 lea     esi, [esi+0]
.text:00405060
.text:00405060 loc_405060:                             ; CODE XREF: sub_4048C0+760↑j
.text:00405060                                         ; sub_4048C0+87B↓j ...
.text:00405060                 cmp     [esp+4Ch+var_28], 1
.text:00405065                 jbe     loc_404EDC
.text:0040506B                 jmp     loc_404EF5
.text:00405070 ; ---------------------------------------------------------------------------
.text:00405070
.text:00405070 loc_405070:                             ; CODE XREF: sub_4048C0+779↑j
.text:00405070                 cmp     [esp+4Ch+arg_10], eax
.text:00405074                 mov     edx, 1
.text:00405079                 jnb     short loc_40503B
.text:0040507B
.text:0040507B loc_40507B:                             ; CODE XREF: sub_4048C0+867↓j
.text:0040507B                 mov     ecx, [esp+4Ch+Str]
.text:0040507F                 lea     esi, [edx+ebp]
.text:00405082                 movsx   eax, byte ptr [esi+ecx]
.text:00405086                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00405089                 cmp     eax, 21h
.text:0040508C                 ja      def_405092      ; jumptable 00405092 default case, cases 93,95,97-123
.text:00405092                 jmp     ds:jpt_405092[eax*4] ; switch jump
.text:00405092 ; ---------------------------------------------------------------------------
.text:00405099                 align 4
.text:0040509C jpt_405092      dd offset loc_404CCB    ; DATA XREF: sub_4048C0+7D2↑r
.text:0040509C                 dd offset loc_404CCB    ; jump table for switch statement
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset loc_404CCB
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset loc_404CCB
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset def_405092
.text:0040509C                 dd offset loc_404CCB
.text:00405124 ; ---------------------------------------------------------------------------
.text:00405124
.text:00405124 def_405092:                             ; CODE XREF: sub_4048C0+7CC↑j
.text:00405124                                         ; sub_4048C0+7D2↑j
.text:00405124                                         ; DATA XREF: ...
.text:00405124                 inc     edx             ; jumptable 00405092 default case, cases 93,95,97-123
.text:00405125                 cmp     edx, edi
.text:00405127                 jb      loc_40507B
.text:0040512D                 jmp     loc_40503B
.text:00405132 ; ---------------------------------------------------------------------------
.text:00405132
.text:00405132 loc_405132:                             ; CODE XREF: sub_4048C0+76E↑j
.text:00405132                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405136                 mov     [esp+4Ch+var_29], 0
.text:0040513B                 jnb     loc_405060
.text:00405141                 mov     eax, [esp+4Ch+var_30]
.text:00405145                 cmp     byte ptr [eax], 0
.text:00405148                 jz      loc_405060
.text:0040514E
.text:0040514E loc_40514E:                             ; CODE XREF: sub_4048C0+8AB↓j
.text:0040514E                 inc     [esp+4Ch+var_28]
.text:00405152                 mov     esi, [esp+4Ch+var_28]
.text:00405156                 lea     eax, [esi+ebp]
.text:00405159                 cmp     eax, [esp+4Ch+arg_C]
.text:0040515D                 jnb     loc_405060
.text:00405163                 mov     edi, [esp+4Ch+Str]
.text:00405167                 cmp     byte ptr [eax+edi], 0
.text:0040516B                 jnz     short loc_40514E
.text:0040516D                 jmp     loc_405060
.text:00405172 ; ---------------------------------------------------------------------------
.text:00405172
.text:00405172 loc_405172:                             ; CODE XREF: sub_4048C0+765↑j
.text:00405172                 mov     [esp+4Ch+var_29], 0
.text:00405177                 jmp     loc_405060
.text:0040517C ; ---------------------------------------------------------------------------
.text:0040517C
.text:0040517C loc_40517C:                             ; CODE XREF: sub_4048C0+72A↑j
.text:0040517C                 mov     edx, [esp+4Ch+Str]
.text:00405180                 mov     [esp+4Ch+C], edx ; Str
.text:00405183                 call    strlen
.text:00405188                 mov     [esp+4Ch+arg_C], eax
.text:0040518C                 jmp     loc_404FF0
.text:00405191 ; ---------------------------------------------------------------------------
.text:00405191
.text:00405191 loc_405191:                             ; CODE XREF: sub_4048C0+105↑j
.text:00405191                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:00405191                 mov     dl, bl          ; jumptable 004049C5 case 92
.text:00405193                 jmp     loc_404CC4
.text:00405198 ; ---------------------------------------------------------------------------
.text:00405198
.text:00405198 loc_405198:                             ; CODE XREF: sub_4048C0+105↑j
.text:00405198                                         ; sub_4048C0+902↓j
.text:00405198                                         ; DATA XREF: ...
.text:00405198                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004049C5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040519D                 jnz     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:0040519D                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:004051A3                 jmp     loc_404CCB      ; jumptable 00405092 cases 91,92,94,96,124
.text:004051A8 ; ---------------------------------------------------------------------------
.text:004051A8
.text:004051A8 loc_4051A8:                             ; CODE XREF: sub_4048C0+105↑j
.text:004051A8                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:004051A8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004049C5 cases 123,125
.text:004051AD                 jz      short loc_4051C4
.text:004051AF                 cmp     [esp+4Ch+arg_C], 1
.text:004051B4
.text:004051B4 loc_4051B4:                             ; CODE XREF: sub_4048C0+90C↓j
.text:004051B4                 jnz     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:004051B4                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:004051BA
.text:004051BA loc_4051BA:                             ; CODE XREF: sub_4048C0+105↑j
.text:004051BA                                         ; DATA XREF: sub_4048C0:jpt_4049C5↑o
.text:004051BA                 test    ebp, ebp        ; jumptable 004049C5 cases 35,126
.text:004051BC                 jnz     def_404DC2      ; jumptable 004049C5 cases 37,43-58,65-90,93,95,97-122
.text:004051BC                                         ; jumptable 00404DC2 default case, cases 34-38,42-44,46,48-59
.text:004051C2                 jmp     short loc_405198 ; jumptable 004049C5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004051C4 ; ---------------------------------------------------------------------------
.text:004051C4
.text:004051C4 loc_4051C4:                             ; CODE XREF: sub_4048C0+8ED↑j
.text:004051C4                 mov     esi, [esp+4Ch+Str]
.text:004051C8                 cmp     byte ptr [esi+1], 0
.text:004051CC                 jmp     short loc_4051B4
.text:004051CE ; ---------------------------------------------------------------------------
.text:004051CE
.text:004051CE loc_4051CE:                             ; CODE XREF: sub_4048C0:loc_40495F↑j
.text:004051CE                 test    ebp, ebp
.text:004051D0                 jnz     short loc_4051DD
.text:004051D2                 cmp     [esp+4Ch+arg_10], 1
.text:004051D7                 jz      loc_404CCB      ; jumptable 00405092 cases 91,92,94,96,124
.text:004051DD
.text:004051DD loc_4051DD:                             ; CODE XREF: sub_4048C0+910↑j
.text:004051DD                 mov     esi, [esp+4Ch+var_1C]
.text:004051E1                 test    esi, esi
.text:004051E3                 jz      short loc_405218
.text:004051E5                 mov     edi, [esp+4Ch+var_1C]
.text:004051E9                 movzx   eax, byte ptr [edi]
.text:004051EC                 test    al, al
.text:004051EE                 jz      short loc_405218
.text:004051F0
.text:004051F0 loc_4051F0:                             ; CODE XREF: sub_4048C0+956↓j
.text:004051F0                 mov     ebp, [esp+4Ch+arg_4]
.text:004051F4                 cmp     [esp+4Ch+var_34], ebp
.text:004051F8                 jnb     short loc_405205
.text:004051FA                 mov     ecx, [esp+4Ch+arg_0]
.text:004051FE                 mov     ebx, [esp+4Ch+var_34]
.text:00405202                 mov     [ebx+ecx], al
.text:00405205
.text:00405205 loc_405205:                             ; CODE XREF: sub_4048C0+938↑j
.text:00405205                 inc     [esp+4Ch+var_1C]
.text:00405209                 inc     [esp+4Ch+var_34]
.text:0040520D                 mov     edx, [esp+4Ch+var_1C]
.text:00405211                 movzx   eax, byte ptr [edx]
.text:00405214                 test    al, al
.text:00405216                 jnz     short loc_4051F0
.text:00405218
.text:00405218 loc_405218:                             ; CODE XREF: sub_4048C0+923↑j
.text:00405218                                         ; sub_4048C0+92E↑j
.text:00405218                 mov     eax, [esp+4Ch+arg_4]
.text:0040521C                 cmp     [esp+4Ch+var_34], eax
.text:00405220                 jnb     short loc_40522E
.text:00405222                 mov     edi, [esp+4Ch+arg_0]
.text:00405226                 mov     esi, [esp+4Ch+var_34]
.text:0040522A                 mov     byte ptr [esi+edi], 0
.text:0040522E
.text:0040522E loc_40522E:                             ; CODE XREF: sub_4048C0+960↑j
.text:0040522E                 mov     eax, [esp+4Ch+var_34]
.text:00405232                 jmp     loc_404CFF
.text:00405237 ; ---------------------------------------------------------------------------
.text:00405237
.text:00405237 loc_405237:                             ; CODE XREF: sub_4048C0+95↑j
.text:00405237                 mov     ebx, [esp+4Ch+Str]
.text:0040523B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405240                 jmp     loc_40495F
.text:00405245 ; ---------------------------------------------------------------------------
.text:00405245
.text:00405245 loc_405245:                             ; CODE XREF: sub_4048C0+3D↑j
.text:00405245                                         ; DATA XREF: sub_4048C0:jpt_4048FD↑o
.text:00405245                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004048FD case 2
.text:00405249                 cmp     [esp+4Ch+var_34], edx
.text:0040524D                 jnb     short loc_405256
.text:0040524F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405253                 mov     byte ptr [ecx], 27h ; '''
.text:00405256
.text:00405256 loc_405256:                             ; CODE XREF: sub_4048C0+98D↑j
.text:00405256                 mov     [esp+4Ch+var_34], 1
.text:0040525E                 mov     [esp+4Ch+var_1C], 4048AEh
.text:00405266                 jmp     loc_404946
.text:0040526B ; ---------------------------------------------------------------------------
.text:0040526B
.text:0040526B loc_40526B:                             ; CODE XREF: sub_4048C0+3D↑j
.text:0040526B                                         ; DATA XREF: sub_4048C0:jpt_4048FD↑o
.text:0040526B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004048FD case 4
.text:00405270                 jmp     def_4048FD      ; jumptable 004048FD default case, cases 0,1
.text:00405275 ; ---------------------------------------------------------------------------
.text:00405275
.text:00405275 loc_405275:                             ; CODE XREF: sub_4048C0+3D↑j
.text:00405275                                         ; DATA XREF: sub_4048C0:jpt_4048FD↑o
.text:00405275                 mov     [esp+4Ch+C], 4048B0h ; jumptable 004048FD cases 5,6
.text:0040527C                 call    ds:libintl_gettext
.text:00405282                 cmp     eax, 4048B0h
.text:00405287                 mov     edi, eax
.text:00405289                 jz      short loc_405300
.text:0040528B
.text:0040528B loc_40528B:                             ; CODE XREF: sub_4048C0+A45↓j
.text:0040528B                                         ; sub_4048C0+A4C↓j
.text:0040528B                 mov     [esp+4Ch+C], 4048AEh
.text:00405292                 call    ds:libintl_gettext
.text:00405298                 cmp     eax, 4048AEh
.text:0040529D                 mov     edx, eax
.text:0040529F                 jz      short loc_4052F2
.text:004052A1
.text:004052A1 loc_4052A1:                             ; CODE XREF: sub_4048C0+A37↓j
.text:004052A1                                         ; sub_4048C0+A3E↓j
.text:004052A1                 mov     [esp+4Ch+var_1C], edi
.text:004052A5                 cmp     byte ptr [edi], 0
.text:004052A8                 jz      short loc_4052D8
.text:004052AA
.text:004052AA loc_4052AA:                             ; CODE XREF: sub_4048C0+A16↓j
.text:004052AA                 mov     ecx, [esp+4Ch+arg_4]
.text:004052AE                 cmp     [esp+4Ch+var_34], ecx
.text:004052B2                 jnb     short loc_4052C7
.text:004052B4                 mov     ebp, [esp+4Ch+var_1C]
.text:004052B8                 mov     edi, [esp+4Ch+arg_0]
.text:004052BC                 mov     esi, [esp+4Ch+var_34]
.text:004052C0                 movzx   ebx, byte ptr [ebp+0]
.text:004052C4                 mov     [esi+edi], bl
.text:004052C7
.text:004052C7 loc_4052C7:                             ; CODE XREF: sub_4048C0+9F2↑j
.text:004052C7                 inc     [esp+4Ch+var_1C]
.text:004052CB                 inc     [esp+4Ch+var_34]
.text:004052CF                 mov     eax, [esp+4Ch+var_1C]
.text:004052D3                 cmp     byte ptr [eax], 0
.text:004052D6                 jnz     short loc_4052AA
.text:004052D8
.text:004052D8 loc_4052D8:                             ; CODE XREF: sub_4048C0+9E8↑j
.text:004052D8                 mov     [esp+4Ch+var_21], 1
.text:004052DD                 mov     [esp+4Ch+var_1C], edx
.text:004052E1                 mov     [esp+4Ch+C], edx ; Str
.text:004052E4                 call    strlen
.text:004052E9                 mov     [esp+4Ch+var_20], eax
.text:004052ED                 jmp     def_4048FD      ; jumptable 004048FD default case, cases 0,1
.text:004052F2 ; ---------------------------------------------------------------------------
.text:004052F2
.text:004052F2 loc_4052F2:                             ; CODE XREF: sub_4048C0+9DF↑j
.text:004052F2                 cmp     [esp+4Ch+arg_10], 6
.text:004052F7                 jnz     short loc_4052A1
.text:004052F9                 mov     edx, offset asc_4048AC ; "\"'`"
.text:004052FE                 jmp     short loc_4052A1
.text:00405300 ; ---------------------------------------------------------------------------
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: sub_4048C0+9C9↑j
.text:00405300                 cmp     [esp+4Ch+arg_10], 6
.text:00405305                 jnz     short loc_40528B
.text:00405307                 mov     edi, offset asc_4048AC ; "\"'`"
.text:0040530C                 jmp     loc_40528B
.text:0040530C sub_4048C0      endp
.text:0040530C
.text:00405311 ; ---------------------------------------------------------------------------
.text:00405311                 jmp     short loc_405320
.text:00405311 ; ---------------------------------------------------------------------------
.text:00405313                 align 10h
.text:00405320
.text:00405320 loc_405320:                             ; CODE XREF: .text:00405311↑j
.text:00405320                 sub     esp, 0Ch
.text:00405323                 mov     [esp+4], ebx
.text:00405327                 mov     [esp+8], esi
.text:0040532B                 call    _errno
.text:00405330                 mov     esi, [eax]
.text:00405332                 mov     dword ptr [esp], 24h ; '$'
.text:00405339                 call    sub_405C10
.text:0040533E                 mov     edx, [esp+10h]
.text:00405342                 mov     ebx, eax
.text:00405344                 test    edx, edx
.text:00405346                 jz      short loc_405391
.text:00405348
.text:00405348 loc_405348:                             ; CODE XREF: .text:00405396↓j
.text:00405348                 mov     ecx, [edx]
.text:0040534A                 mov     [ebx], ecx
.text:0040534C                 mov     ecx, [edx+4]
.text:0040534F                 mov     [ebx+4], ecx
.text:00405352                 mov     ecx, [edx+8]
.text:00405355                 mov     [ebx+8], ecx
.text:00405358                 mov     ecx, [edx+0Ch]
.text:0040535B                 mov     [ebx+0Ch], ecx
.text:0040535E                 mov     ecx, [edx+10h]
.text:00405361                 mov     [ebx+10h], ecx
.text:00405364                 mov     ecx, [edx+14h]
.text:00405367                 mov     [ebx+14h], ecx
.text:0040536A                 mov     ecx, [edx+18h]
.text:0040536D                 mov     [ebx+18h], ecx
.text:00405370                 mov     ecx, [edx+1Ch]
.text:00405373                 mov     [ebx+1Ch], ecx
.text:00405376                 mov     ecx, [edx+20h]
.text:00405379                 mov     [ebx+20h], ecx
.text:0040537C                 call    _errno
.text:00405381                 mov     [eax], esi
.text:00405383                 mov     esi, [esp+8]
.text:00405387                 mov     eax, ebx
.text:00405389                 mov     ebx, [esp+4]
.text:0040538D                 add     esp, 0Ch
.text:00405390                 retn
.text:00405391 ; ---------------------------------------------------------------------------
.text:00405391
.text:00405391 loc_405391:                             ; CODE XREF: .text:00405346↑j
.text:00405391                 mov     edx, offset dword_408250
.text:00405396                 jmp     short loc_405348
.text:00405396 ; ---------------------------------------------------------------------------
.text:00405398                 align 10h
.text:004053A0                 mov     eax, [esp+4]
.text:004053A4                 test    eax, eax
.text:004053A6                 jz      short loc_4053B0
.text:004053A8
.text:004053A8 loc_4053A8:                             ; CODE XREF: .text:004053B5↓j
.text:004053A8                 mov     eax, [eax]
.text:004053AA                 retn
.text:004053AA ; ---------------------------------------------------------------------------
.text:004053AB                 align 10h
.text:004053B0
.text:004053B0 loc_4053B0:                             ; CODE XREF: .text:004053A6↑j
.text:004053B0                 mov     eax, offset dword_408250
.text:004053B5                 jmp     short loc_4053A8
.text:004053B5 ; ---------------------------------------------------------------------------
.text:004053B7                 align 10h
.text:004053C0                 mov     edx, [esp+4]
.text:004053C4                 test    edx, edx
.text:004053C6                 jz      short loc_4053D0
.text:004053C8
.text:004053C8 loc_4053C8:                             ; CODE XREF: .text:004053D5↓j
.text:004053C8                 mov     ecx, [esp+8]
.text:004053CC                 mov     [edx], ecx
.text:004053CE                 retn
.text:004053CE ; ---------------------------------------------------------------------------
.text:004053CF                 align 10h
.text:004053D0
.text:004053D0 loc_4053D0:                             ; CODE XREF: .text:004053C6↑j
.text:004053D0                 mov     edx, offset dword_408250
.text:004053D5                 jmp     short loc_4053C8
.text:004053D5 ; ---------------------------------------------------------------------------
.text:004053D7                 align 10h
.text:004053E0                 sub     esp, 8
.text:004053E3                 mov     eax, [esp+0Ch]
.text:004053E7                 movzx   ecx, byte ptr [esp+10h]
.text:004053EC                 mov     [esp], ebx
.text:004053EF                 mov     ebx, [esp+14h]
.text:004053F3                 mov     [esp+4], esi
.text:004053F7                 mov     dl, cl
.text:004053F9                 shr     dl, 5
.text:004053FC                 movzx   edx, dl
.text:004053FF                 shl     edx, 2
.text:00405402                 test    eax, eax
.text:00405404                 lea     esi, [edx+eax+4]
.text:00405408                 jz      short loc_405430
.text:0040540A
.text:0040540A loc_40540A:                             ; CODE XREF: .text:00405436↓j
.text:0040540A                 mov     edx, [esi]
.text:0040540C                 and     ecx, 1Fh
.text:0040540F                 and     ebx, 1
.text:00405412                 mov     eax, edx
.text:00405414                 shr     eax, cl
.text:00405416                 and     eax, 1
.text:00405419                 xor     ebx, eax
.text:0040541B                 shl     ebx, cl
.text:0040541D                 xor     edx, ebx
.text:0040541F                 mov     [esi], edx
.text:00405421                 mov     ebx, [esp]
.text:00405424                 mov     esi, [esp+4]
.text:00405428                 add     esp, 8
.text:0040542B                 retn
.text:0040542B ; ---------------------------------------------------------------------------
.text:0040542C                 align 10h
.text:00405430
.text:00405430 loc_405430:                             ; CODE XREF: .text:00405408↑j
.text:00405430                 lea     esi, dword_408254[edx]
.text:00405436                 jmp     short loc_40540A
.text:00405436 ; ---------------------------------------------------------------------------
.text:00405438                 align 10h
.text:00405440                 sub     esp, 2Ch
.text:00405443                 mov     [esp+24h], ebx
.text:00405447                 mov     ebx, [esp+40h]
.text:0040544B                 mov     [esp+28h], esi
.text:0040544F                 test    ebx, ebx
.text:00405451                 jz      short loc_4054A0
.text:00405453
.text:00405453 loc_405453:                             ; CODE XREF: .text:004054A5↓j
.text:00405453                 call    _errno
.text:00405458                 mov     esi, [eax]
.text:0040545A                 mov     [esp+14h], ebx
.text:0040545E                 mov     edx, [ebx]
.text:00405460                 mov     ecx, [esp+38h]
.text:00405464                 mov     ebx, [esp+3Ch]
.text:00405468                 mov     [esp+10h], edx
.text:0040546C                 mov     edx, [esp+34h]
.text:00405470                 mov     [esp+0Ch], ebx
.text:00405474                 mov     [esp+8], ecx
.text:00405478                 mov     [esp+4], edx
.text:0040547C                 mov     edx, [esp+30h]
.text:00405480                 mov     [esp], edx
.text:00405483                 call    sub_4048C0
.text:00405488                 mov     ebx, eax
.text:0040548A                 call    _errno
.text:0040548F                 mov     [eax], esi
.text:00405491                 mov     esi, [esp+28h]
.text:00405495                 mov     eax, ebx
.text:00405497                 mov     ebx, [esp+24h]
.text:0040549B                 add     esp, 2Ch
.text:0040549E                 retn
.text:0040549E ; ---------------------------------------------------------------------------
.text:0040549F                 align 10h
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: .text:00405451↑j
.text:004054A0                 mov     ebx, offset dword_408250
.text:004054A5                 jmp     short loc_405453
.text:004054A5 ; ---------------------------------------------------------------------------
.text:004054A7                 align 10h
.text:004054B0                 push    ebp
.text:004054B1                 push    edi
.text:004054B2                 push    esi
.text:004054B3                 push    ebx
.text:004054B4                 sub     esp, 2Ch
.text:004054B7                 mov     ebp, [esp+48h]
.text:004054BB                 call    _errno
.text:004054C0                 mov     edx, [eax]
.text:004054C2                 test    ebp, ebp
.text:004054C4                 mov     ebx, ebp
.text:004054C6                 mov     [esp+28h], edx
.text:004054CA                 jz      loc_405580
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: .text:00405585↓j
.text:004054D0                 call    _errno
.text:004054D5                 mov     edi, [eax]
.text:004054D7                 mov     esi, ebp
.text:004054D9                 mov     [esp+14h], ebx
.text:004054DD                 mov     ecx, [ebx]
.text:004054DF                 mov     dword ptr [esp], 0
.text:004054E6                 mov     edx, [esp+44h]
.text:004054EA                 mov     dword ptr [esp+4], 0
.text:004054F2                 mov     eax, [esp+40h]
.text:004054F6                 mov     [esp+10h], ecx
.text:004054FA                 mov     [esp+0Ch], edx
.text:004054FE                 mov     [esp+8], eax
.text:00405502                 call    sub_4048C0
.text:00405507                 mov     ebx, eax
.text:00405509                 call    _errno
.text:0040550E                 mov     [eax], edi
.text:00405510                 lea     edi, [ebx+1]
.text:00405513                 mov     [esp], edi
.text:00405516                 call    sub_405C10
.text:0040551B                 mov     [esp+24h], eax
.text:0040551F                 test    ebp, ebp
.text:00405521                 jz      short loc_405572
.text:00405523
.text:00405523 loc_405523:                             ; CODE XREF: .text:00405577↓j
.text:00405523                 call    _errno
.text:00405528                 mov     ebp, [eax]
.text:0040552A                 mov     [esp+14h], esi
.text:0040552E                 mov     ecx, [esi]
.text:00405530                 mov     [esp+4], edi
.text:00405534                 mov     edx, [esp+44h]
.text:00405538                 mov     esi, [esp+24h]
.text:0040553C                 mov     [esp+10h], ecx
.text:00405540                 mov     eax, [esp+40h]
.text:00405544                 mov     [esp+0Ch], edx
.text:00405548                 mov     [esp], esi
.text:0040554B                 mov     [esp+8], eax
.text:0040554F                 call    sub_4048C0
.text:00405554                 call    _errno
.text:00405559                 mov     [eax], ebp
.text:0040555B                 call    _errno
.text:00405560                 mov     ebx, [esp+28h]
.text:00405564                 mov     [eax], ebx
.text:00405566                 mov     eax, [esp+24h]
.text:0040556A                 add     esp, 2Ch
.text:0040556D                 pop     ebx
.text:0040556E                 pop     esi
.text:0040556F                 pop     edi
.text:00405570                 pop     ebp
.text:00405571                 retn
.text:00405572 ; ---------------------------------------------------------------------------
.text:00405572
.text:00405572 loc_405572:                             ; CODE XREF: .text:00405521↑j
.text:00405572                 mov     esi, offset dword_408250
.text:00405577                 jmp     short loc_405523
.text:00405577 ; ---------------------------------------------------------------------------
.text:00405579                 align 10h
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: .text:004054CA↑j
.text:00405580                 mov     ebx, offset dword_408250
.text:00405585                 jmp     loc_4054D0
.text:00405585 ; ---------------------------------------------------------------------------
.text:0040558A                 align 10h
.text:00405590                 sub     esp, 1Ch
.text:00405593                 mov     edx, [esp+24h]
.text:00405597                 mov     dword ptr [esp+0Ch], offset dword_408250
.text:0040559F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004055A7                 mov     [esp+4], edx
.text:004055AB                 mov     edx, [esp+20h]
.text:004055AF                 mov     [esp], edx
.text:004055B2                 call    sub_405A00
.text:004055B7                 add     esp, 1Ch
.text:004055BA                 retn
.text:004055BA ; ---------------------------------------------------------------------------
.text:004055BB                 align 10h
.text:004055C0                 sub     esp, 1Ch
.text:004055C3                 mov     edx, [esp+20h]
.text:004055C7                 mov     dword ptr [esp+0Ch], offset dword_408250
.text:004055CF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004055D7                 mov     [esp+4], edx
.text:004055DB                 mov     dword ptr [esp], 0
.text:004055E2                 call    sub_405A00
.text:004055E7                 add     esp, 1Ch
.text:004055EA                 retn
.text:004055EA ; ---------------------------------------------------------------------------
.text:004055EB                 align 10h
.text:004055F0                 push    ebp
.text:004055F1                 xor     eax, eax
.text:004055F3                 mov     ecx, 8
.text:004055F8                 push    edi
.text:004055F9                 push    esi
.text:004055FA                 push    ebx
.text:004055FB                 sub     esp, 0ACh
.text:00405601                 mov     ebp, [esp+0C4h]
.text:00405608                 cld
.text:00405609                 lea     edi, [esp+14h]
.text:0040560D                 mov     [esp+10h], ebp
.text:00405611                 rep stosd
.text:00405613                 mov     eax, [esp+30h]
.text:00405617                 mov     edi, [esp+10h]
.text:0040561B                 mov     esi, [esp+14h]
.text:0040561F                 mov     [esp+60h], eax
.text:00405623                 mov     ebp, [esp+18h]
.text:00405627                 mov     eax, [esp+10h]
.text:0040562B                 mov     [esp+40h], edi
.text:0040562F                 mov     ecx, [esp+28h]
.text:00405633                 mov     edi, [esp+1Ch]
.text:00405637                 mov     [esp+44h], esi
.text:0040563B                 mov     edx, [esp+2Ch]
.text:0040563F                 mov     esi, [esp+20h]
.text:00405643                 mov     [esp+70h], eax
.text:00405647                 mov     ebx, [esp+24h]
.text:0040564B                 mov     eax, [esp+14h]
.text:0040564F                 mov     [esp+48h], ebp
.text:00405653                 mov     [esp+4Ch], edi
.text:00405657                 mov     [esp+50h], esi
.text:0040565B                 mov     [esp+54h], ebx
.text:0040565F                 mov     [esp+58h], ecx
.text:00405663                 mov     [esp+5Ch], edx
.text:00405667                 mov     [esp+74h], eax
.text:0040566B                 mov     [esp+78h], ebp
.text:0040566F                 mov     [esp+7Ch], edi
.text:00405673                 mov     [esp+80h], esi
.text:0040567A                 mov     [esp+84h], ebx
.text:00405681                 mov     ebx, [esp+30h]
.text:00405685                 mov     [esp+8Ch], edx
.text:0040568C                 mov     edx, [esp+0C8h]
.text:00405693                 mov     [esp+88h], ecx
.text:0040569A                 lea     ecx, [esp+70h]
.text:0040569E                 mov     [esp+4], edx
.text:004056A2                 mov     edx, [esp+0C0h]
.text:004056A9                 mov     [esp+90h], ebx
.text:004056B0                 mov     [esp+0Ch], ecx
.text:004056B4                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004056BC                 mov     [esp], edx
.text:004056BF                 call    sub_405A00
.text:004056C4                 add     esp, 0ACh
.text:004056CA                 pop     ebx
.text:004056CB                 pop     esi
.text:004056CC                 pop     edi
.text:004056CD                 pop     ebp
.text:004056CE                 retn
.text:004056CE ; ---------------------------------------------------------------------------
.text:004056CF                 align 10h
.text:004056D0                 push    ebp
.text:004056D1                 xor     eax, eax
.text:004056D3                 mov     ecx, 8
.text:004056D8                 push    edi
.text:004056D9                 push    esi
.text:004056DA                 push    ebx
.text:004056DB                 sub     esp, 0ACh
.text:004056E1                 mov     edx, [esp+0C4h]
.text:004056E8                 cld
.text:004056E9                 lea     edi, [esp+14h]
.text:004056ED                 mov     [esp+10h], edx
.text:004056F1                 rep stosd
.text:004056F3                 mov     eax, [esp+30h]
.text:004056F7                 mov     ebp, [esp+10h]
.text:004056FB                 mov     edi, [esp+14h]
.text:004056FF                 mov     [esp+60h], eax
.text:00405703                 mov     esi, [esp+20h]
.text:00405707                 mov     eax, [esp+10h]
.text:0040570B                 mov     [esp+40h], ebp
.text:0040570F                 mov     ecx, [esp+28h]
.text:00405713                 mov     ebp, [esp+18h]
.text:00405717                 mov     [esp+44h], edi
.text:0040571B                 mov     edx, [esp+2Ch]
.text:0040571F                 mov     edi, [esp+1Ch]
.text:00405723                 mov     [esp+70h], eax
.text:00405727                 mov     ebx, [esp+24h]
.text:0040572B                 mov     eax, [esp+14h]
.text:0040572F                 mov     [esp+48h], ebp
.text:00405733                 mov     [esp+4Ch], edi
.text:00405737                 mov     [esp+50h], esi
.text:0040573B                 mov     [esp+54h], ebx
.text:0040573F                 mov     [esp+58h], ecx
.text:00405743                 mov     [esp+5Ch], edx
.text:00405747                 mov     [esp+74h], eax
.text:0040574B                 mov     [esp+78h], ebp
.text:0040574F                 mov     [esp+7Ch], edi
.text:00405753                 mov     [esp+80h], esi
.text:0040575A                 mov     [esp+84h], ebx
.text:00405761                 mov     esi, [esp+30h]
.text:00405765                 lea     ebx, [esp+70h]
.text:00405769                 mov     [esp+8Ch], edx
.text:00405770                 mov     edx, [esp+0C8h]
.text:00405777                 mov     [esp+88h], ecx
.text:0040577E                 mov     ecx, [esp+0CCh]
.text:00405785                 mov     [esp+4], edx
.text:00405789                 mov     edx, [esp+0C0h]
.text:00405790                 mov     [esp+90h], esi
.text:00405797                 mov     [esp+0Ch], ebx
.text:0040579B                 mov     [esp+8], ecx
.text:0040579F                 mov     [esp], edx
.text:004057A2                 call    sub_405A00
.text:004057A7                 add     esp, 0ACh
.text:004057AD                 pop     ebx
.text:004057AE                 pop     esi
.text:004057AF                 pop     edi
.text:004057B0                 pop     ebp
.text:004057B1                 retn
.text:004057B1 ; ---------------------------------------------------------------------------
.text:004057B2                 align 10h
.text:004057C0                 push    ebp
.text:004057C1                 xor     eax, eax
.text:004057C3                 mov     ecx, 8
.text:004057C8                 push    edi
.text:004057C9                 push    esi
.text:004057CA                 push    ebx
.text:004057CB                 sub     esp, 0ACh
.text:004057D1                 mov     edi, [esp+0C0h]
.text:004057D8                 cld
.text:004057D9                 mov     [esp+10h], edi
.text:004057DD                 lea     edi, [esp+14h]
.text:004057E1                 rep stosd
.text:004057E3                 mov     eax, [esp+30h]
.text:004057E7                 mov     esi, [esp+10h]
.text:004057EB                 mov     ebx, [esp+14h]
.text:004057EF                 mov     [esp+60h], eax
.text:004057F3                 mov     ebp, [esp+18h]
.text:004057F7                 mov     eax, [esp+10h]
.text:004057FB                 mov     [esp+40h], esi
.text:004057FF                 mov     edi, [esp+1Ch]
.text:00405803                 mov     esi, [esp+20h]
.text:00405807                 mov     [esp+44h], ebx
.text:0040580B                 mov     ecx, [esp+28h]
.text:0040580F                 mov     edx, [esp+2Ch]
.text:00405813                 mov     [esp+70h], eax
.text:00405817                 mov     ebx, [esp+24h]
.text:0040581B                 mov     eax, [esp+14h]
.text:0040581F                 mov     [esp+48h], ebp
.text:00405823                 mov     [esp+4Ch], edi
.text:00405827                 mov     [esp+50h], esi
.text:0040582B                 mov     [esp+54h], ebx
.text:0040582F                 mov     [esp+58h], ecx
.text:00405833                 mov     [esp+5Ch], edx
.text:00405837                 mov     [esp+74h], eax
.text:0040583B                 mov     [esp+78h], ebp
.text:0040583F                 mov     [esp+7Ch], edi
.text:00405843                 mov     [esp+80h], esi
.text:0040584A                 mov     [esp+84h], ebx
.text:00405851                 mov     [esp+8Ch], edx
.text:00405858                 lea     edx, [esp+70h]
.text:0040585C                 mov     [esp+88h], ecx
.text:00405863                 mov     ecx, [esp+30h]
.text:00405867                 mov     [esp+0Ch], edx
.text:0040586B                 mov     edx, [esp+0C4h]
.text:00405872                 mov     [esp+90h], ecx
.text:00405879                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405881                 mov     [esp+4], edx
.text:00405885                 mov     dword ptr [esp], 0
.text:0040588C                 call    sub_405A00
.text:00405891                 add     esp, 0ACh
.text:00405897                 pop     ebx
.text:00405898                 pop     esi
.text:00405899                 pop     edi
.text:0040589A                 pop     ebp
.text:0040589B                 retn
.text:0040589B ; ---------------------------------------------------------------------------
.text:0040589C                 align 10h
.text:004058A0                 push    edi
.text:004058A1                 push    esi
.text:004058A2                 push    ebx
.text:004058A3                 sub     esp, 40h
.text:004058A6                 mov     edx, ds:dword_40825C
.text:004058AC                 mov     ebx, ds:dword_408250
.text:004058B2                 mov     esi, ds:dword_408258
.text:004058B8                 mov     edi, ds:dword_408254
.text:004058BE                 mov     [esp+1Ch], edx
.text:004058C2                 mov     ecx, ds:dword_408260
.text:004058C8                 mov     edx, ds:dword_408270
.text:004058CE                 mov     [esp+10h], ebx
.text:004058D2                 mov     ebx, ds:dword_408264
.text:004058D8                 mov     [esp+30h], edx
.text:004058DC                 movzx   edx, byte ptr [esp+54h]
.text:004058E1                 mov     [esp+18h], esi
.text:004058E5                 mov     esi, ds:dword_40826C
.text:004058EB                 mov     [esp+14h], edi
.text:004058EF                 mov     edi, ds:dword_408268
.text:004058F5                 mov     [esp+20h], ecx
.text:004058F9                 mov     cl, dl
.text:004058FB                 shr     cl, 5
.text:004058FE                 mov     [esp+24h], ebx
.text:00405902                 movzx   ebx, cl
.text:00405905                 mov     [esp+2Ch], esi
.text:00405909                 lea     esi, [esp+10h]
.text:0040590D                 mov     [esp+28h], edi
.text:00405911                 lea     edi, [esi+ebx*4]
.text:00405914                 mov     ebx, edx
.text:00405916                 mov     edx, [edi+4]
.text:00405919                 and     ebx, 1Fh
.text:0040591C                 mov     cl, bl
.text:0040591E                 mov     eax, edx
.text:00405920                 shr     eax, cl
.text:00405922                 and     eax, 1
.text:00405925                 xor     eax, 1
.text:00405928                 shl     eax, cl
.text:0040592A                 xor     edx, eax
.text:0040592C                 mov     [edi+4], edx
.text:0040592F                 mov     edx, [esp+50h]
.text:00405933                 mov     [esp+0Ch], esi
.text:00405937                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040593F                 mov     [esp+4], edx
.text:00405943                 mov     dword ptr [esp], 0
.text:0040594A                 call    sub_405A00
.text:0040594F                 add     esp, 40h
.text:00405952                 pop     ebx
.text:00405953                 pop     esi
.text:00405954                 pop     edi
.text:00405955                 retn
.text:00405955 ; ---------------------------------------------------------------------------
.text:00405956                 align 10h
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960
.text:00405960 ; int __cdecl sub_405960(char *)
.text:00405960 sub_405960      proc near               ; CODE XREF: sub_4031B0+64↑p
.text:00405960
.text:00405960 var_4C          = dword ptr -4Ch
.text:00405960 var_48          = dword ptr -48h
.text:00405960 var_44          = dword ptr -44h
.text:00405960 var_40          = dword ptr -40h
.text:00405960 var_3C          = dword ptr -3Ch
.text:00405960 var_38          = dword ptr -38h
.text:00405960 var_34          = dword ptr -34h
.text:00405960 var_30          = dword ptr -30h
.text:00405960 var_2C          = dword ptr -2Ch
.text:00405960 var_28          = dword ptr -28h
.text:00405960 var_24          = dword ptr -24h
.text:00405960 var_20          = dword ptr -20h
.text:00405960 var_1C          = dword ptr -1Ch
.text:00405960 arg_0           = dword ptr  4
.text:00405960
.text:00405960                 sub     esp, 4Ch
.text:00405963                 mov     ecx, ds:dword_408250
.text:00405969                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405971                 mov     edx, ds:dword_408254
.text:00405977                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040597E                 mov     [esp+4Ch+var_3C], ecx
.text:00405982                 mov     ecx, ds:dword_40825C
.text:00405988                 mov     [esp+4Ch+var_38], edx
.text:0040598C                 mov     edx, ds:dword_408258
.text:00405992                 mov     [esp+4Ch+var_30], ecx
.text:00405996                 mov     ecx, ds:dword_408260
.text:0040599C                 mov     eax, edx
.text:0040599E                 shr     eax, 1Ah
.text:004059A1                 and     eax, 1
.text:004059A4                 xor     eax, 1
.text:004059A7                 mov     [esp+4Ch+var_2C], ecx
.text:004059AB                 shl     eax, 1Ah
.text:004059AE                 mov     ecx, ds:dword_408264
.text:004059B4                 xor     edx, eax
.text:004059B6                 mov     [esp+4Ch+var_34], edx
.text:004059BA                 mov     edx, [esp+4Ch+arg_0]
.text:004059BE                 mov     [esp+4Ch+var_28], ecx
.text:004059C2                 mov     ecx, ds:dword_408268
.text:004059C8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004059CC                 mov     [esp+4Ch+var_24], ecx
.text:004059D0                 mov     ecx, ds:dword_40826C
.text:004059D6                 mov     [esp+4Ch+var_20], ecx
.text:004059DA                 mov     ecx, ds:dword_408270
.text:004059E0                 mov     [esp+4Ch+var_1C], ecx
.text:004059E4                 lea     ecx, [esp+4Ch+var_3C]
.text:004059E8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004059EC                 call    sub_405A00
.text:004059F1                 add     esp, 4Ch
.text:004059F4                 retn
.text:004059F4 sub_405960      endp
.text:004059F4
.text:004059F4 ; ---------------------------------------------------------------------------
.text:004059F5                 align 10h
.text:00405A00
.text:00405A00 ; =============== S U B R O U T I N E =======================================
.text:00405A00
.text:00405A00
.text:00405A00 ; int __cdecl sub_405A00(int, char *, int, int)
.text:00405A00 sub_405A00      proc near               ; CODE XREF: .text:004055B2↑p
.text:00405A00                                         ; .text:004055E2↑p ...
.text:00405A00
.text:00405A00 Block           = dword ptr -2Ch
.text:00405A00 var_28          = dword ptr -28h
.text:00405A00 Str             = dword ptr -24h
.text:00405A00 var_20          = dword ptr -20h
.text:00405A00 var_1C          = dword ptr -1Ch
.text:00405A00 var_18          = dword ptr -18h
.text:00405A00 var_14          = dword ptr -14h
.text:00405A00 arg_0           = dword ptr  4
.text:00405A00 arg_4           = dword ptr  8
.text:00405A00 arg_8           = dword ptr  0Ch
.text:00405A00 arg_C           = dword ptr  10h
.text:00405A00
.text:00405A00                 push    ebp
.text:00405A01                 push    edi
.text:00405A02                 push    esi
.text:00405A03                 push    ebx
.text:00405A04                 sub     esp, 1Ch
.text:00405A07                 call    _errno
.text:00405A0C                 mov     edx, [eax]
.text:00405A0E                 mov     eax, [esp+2Ch+arg_0]
.text:00405A12                 mov     [esp+2Ch+var_14], edx
.text:00405A16                 test    eax, eax
.text:00405A18                 js      loc_405BBA
.text:00405A1E                 mov     eax, [esp+2Ch+arg_0]
.text:00405A22                 cmp     dword_407040, eax
.text:00405A28                 ja      short loc_405AA0
.text:00405A2A                 mov     esi, eax
.text:00405A2C                 inc     esi
.text:00405A2D                 cmp     esi, 1FFFFFFFh
.text:00405A33                 ja      loc_405BBF
.text:00405A39                 mov     ebx, off_40704C
.text:00405A3F                 cmp     ebx, offset dword_407044
.text:00405A45                 jz      loc_405B91
.text:00405A4B
.text:00405A4B loc_405A4B:                             ; CODE XREF: sub_405A00+1B5↓j
.text:00405A4B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00405A4E                 lea     ecx, ds:0[esi*8]
.text:00405A55                 mov     ebp, esi
.text:00405A57                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00405A5B                 call    sub_405CA0
.text:00405A60                 mov     off_40704C, eax
.text:00405A65                 mov     ebx, dword_407040
.text:00405A6B                 sub     ebp, ebx
.text:00405A6D                 lea     edi, [eax+ebx*8]
.text:00405A70                 lea     eax, ds:0[ebp*8]
.text:00405A77                 cmp     eax, 7
.text:00405A7A                 jbe     short loc_405A90
.text:00405A7C                 test    edi, 4
.text:00405A82                 jz      short loc_405A90
.text:00405A84                 mov     dword ptr [edi], 0
.text:00405A8A                 sub     eax, 4
.text:00405A8D                 add     edi, 4
.text:00405A90
.text:00405A90 loc_405A90:                             ; CODE XREF: sub_405A00+7A↑j
.text:00405A90                                         ; sub_405A00+82↑j
.text:00405A90                 cld
.text:00405A91                 mov     ecx, eax
.text:00405A93                 shr     ecx, 2
.text:00405A96                 xor     eax, eax
.text:00405A98                 rep stosd
.text:00405A9A                 mov     dword_407040, esi
.text:00405AA0
.text:00405AA0 loc_405AA0:                             ; CODE XREF: sub_405A00+28↑j
.text:00405AA0                 mov     esi, off_40704C
.text:00405AA6                 mov     eax, [esp+2Ch+arg_0]
.text:00405AAA                 mov     ebp, [esi+eax*8]
.text:00405AAD                 mov     edi, [esi+eax*8+4]
.text:00405AB1                 mov     esi, [esp+2Ch+arg_C]
.text:00405AB5                 test    esi, esi
.text:00405AB7                 jz      loc_405B87
.text:00405ABD
.text:00405ABD loc_405ABD:                             ; CODE XREF: sub_405A00+18C↓j
.text:00405ABD                 call    _errno
.text:00405AC2                 mov     ebx, [eax]
.text:00405AC4                 mov     [esp+2Ch+var_18], esi ; int
.text:00405AC8                 mov     ecx, [esi]
.text:00405ACA                 mov     [esp+2Ch+Block], edi ; int
.text:00405ACD                 mov     edx, [esp+2Ch+arg_8]
.text:00405AD1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405AD5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405AD9                 mov     ecx, [esp+2Ch+arg_4]
.text:00405ADD                 mov     [esp+2Ch+var_20], edx ; int
.text:00405AE1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405AE5                 call    sub_4048C0
.text:00405AEA                 mov     esi, eax
.text:00405AEC                 call    _errno
.text:00405AF1                 mov     [eax], ebx
.text:00405AF3                 cmp     ebp, esi
.text:00405AF5                 ja      short loc_405B6B
.text:00405AF7                 lea     ebp, [esi+1]
.text:00405AFA                 mov     ebx, off_40704C
.text:00405B00                 cmp     edi, offset unk_408150
.text:00405B06                 mov     esi, [esp+2Ch+arg_0]
.text:00405B0A                 mov     [ebx+esi*8], ebp
.text:00405B0D                 jz      short loc_405B1D
.text:00405B0F                 mov     [esp+2Ch+Block], edi ; Block
.text:00405B12                 call    free
.text:00405B17                 mov     ebx, off_40704C
.text:00405B1D
.text:00405B1D loc_405B1D:                             ; CODE XREF: sub_405A00+10D↑j
.text:00405B1D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405B20                 call    sub_405C10
.text:00405B25                 mov     esi, [esp+2Ch+arg_C]
.text:00405B29                 mov     edi, eax
.text:00405B2B                 mov     eax, [esp+2Ch+arg_0]
.text:00405B2F                 test    esi, esi
.text:00405B31                 mov     [ebx+eax*8+4], edi
.text:00405B35                 jz      short loc_405B80
.text:00405B37
.text:00405B37 loc_405B37:                             ; CODE XREF: sub_405A00+185↓j
.text:00405B37                 call    _errno
.text:00405B3C                 mov     ebx, [eax]
.text:00405B3E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405B42                 mov     ecx, [esi]
.text:00405B44                 mov     [esp+2Ch+Block], edi ; int
.text:00405B47                 mov     edx, [esp+2Ch+arg_8]
.text:00405B4B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405B4F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405B53                 mov     ecx, [esp+2Ch+arg_4]
.text:00405B57                 mov     [esp+2Ch+var_20], edx ; int
.text:00405B5B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405B5F                 call    sub_4048C0
.text:00405B64                 call    _errno
.text:00405B69                 mov     [eax], ebx
.text:00405B6B
.text:00405B6B loc_405B6B:                             ; CODE XREF: sub_405A00+F5↑j
.text:00405B6B                 call    _errno
.text:00405B70                 mov     ebp, [esp+2Ch+var_14]
.text:00405B74                 mov     [eax], ebp
.text:00405B76                 add     esp, 1Ch
.text:00405B79                 mov     eax, edi
.text:00405B7B                 pop     ebx
.text:00405B7C                 pop     esi
.text:00405B7D                 pop     edi
.text:00405B7E                 pop     ebp
.text:00405B7F                 retn
.text:00405B80 ; ---------------------------------------------------------------------------
.text:00405B80
.text:00405B80 loc_405B80:                             ; CODE XREF: sub_405A00+135↑j
.text:00405B80                 mov     esi, offset dword_408250
.text:00405B85                 jmp     short loc_405B37
.text:00405B87 ; ---------------------------------------------------------------------------
.text:00405B87
.text:00405B87 loc_405B87:                             ; CODE XREF: sub_405A00+B7↑j
.text:00405B87                 mov     esi, offset dword_408250
.text:00405B8C                 jmp     loc_405ABD
.text:00405B91 ; ---------------------------------------------------------------------------
.text:00405B91
.text:00405B91 loc_405B91:                             ; CODE XREF: sub_405A00+45↑j
.text:00405B91                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405B98                 call    sub_405C10
.text:00405B9D                 mov     off_40704C, eax
.text:00405BA2                 mov     edi, dword_407044
.text:00405BA8                 mov     ebx, eax
.text:00405BAA                 mov     ecx, off_407048
.text:00405BB0                 mov     [eax], edi
.text:00405BB2                 mov     [eax+4], ecx
.text:00405BB5                 jmp     loc_405A4B
.text:00405BBA ; ---------------------------------------------------------------------------
.text:00405BBA
.text:00405BBA loc_405BBA:                             ; CODE XREF: sub_405A00+18↑j
.text:00405BBA                 call    abort
.text:00405BBF ; ---------------------------------------------------------------------------
.text:00405BBF
.text:00405BBF loc_405BBF:                             ; CODE XREF: sub_405A00+33↑j
.text:00405BBF                 call    sub_405EC0
.text:00405BBF sub_405A00      endp
.text:00405BBF
.text:00405BBF ; ---------------------------------------------------------------------------
.text:00405BC4                 align 10h
.text:00405BD0
.text:00405BD0 ; =============== S U B R O U T I N E =======================================
.text:00405BD0
.text:00405BD0
.text:00405BD0 sub_405BD0      proc near               ; CODE XREF: .text:00403479↑p
.text:00405BD0                                         ; .text:00403491↑p ...
.text:00405BD0
.text:00405BD0 Size            = dword ptr -0Ch
.text:00405BD0 var_4           = dword ptr -4
.text:00405BD0 arg_0           = dword ptr  4
.text:00405BD0 arg_4           = dword ptr  8
.text:00405BD0
.text:00405BD0                 sub     esp, 0Ch
.text:00405BD3                 xor     edx, edx
.text:00405BD5                 mov     ecx, [esp+0Ch+arg_4]
.text:00405BD9                 mov     [esp+0Ch+var_4], ebx
.text:00405BDD                 mov     eax, 0FFFFFFFFh
.text:00405BE2                 mov     ebx, [esp+0Ch+arg_0]
.text:00405BE6                 div     ecx
.text:00405BE8                 cmp     eax, ebx
.text:00405BEA                 jb      short loc_405C09
.text:00405BEC                 mov     edx, ebx
.text:00405BEE                 imul    edx, ecx
.text:00405BF1                 mov     [esp+0Ch+Size], edx ; Size
.text:00405BF4                 call    malloc
.text:00405BF9                 test    eax, eax
.text:00405BFB                 jz      short loc_405C05
.text:00405BFD
.text:00405BFD loc_405BFD:                             ; CODE XREF: sub_405BD0+37↓j
.text:00405BFD                 mov     ebx, [esp+0Ch+var_4]
.text:00405C01                 add     esp, 0Ch
.text:00405C04                 retn
.text:00405C05 ; ---------------------------------------------------------------------------
.text:00405C05
.text:00405C05 loc_405C05:                             ; CODE XREF: sub_405BD0+2B↑j
.text:00405C05                 test    ebx, ebx
.text:00405C07                 jz      short loc_405BFD
.text:00405C09
.text:00405C09 loc_405C09:                             ; CODE XREF: sub_405BD0+1A↑j
.text:00405C09                 call    sub_405EC0
.text:00405C09 sub_405BD0      endp
.text:00405C09
.text:00405C09 ; ---------------------------------------------------------------------------
.text:00405C0E                 align 10h
.text:00405C10
.text:00405C10 ; =============== S U B R O U T I N E =======================================
.text:00405C10
.text:00405C10
.text:00405C10 ; int __cdecl sub_405C10(size_t)
.text:00405C10 sub_405C10      proc near               ; CODE XREF: .text:00405339↑p
.text:00405C10                                         ; .text:00405516↑p ...
.text:00405C10
.text:00405C10 Size            = dword ptr -0Ch
.text:00405C10 var_4           = dword ptr -4
.text:00405C10 arg_0           = dword ptr  4
.text:00405C10
.text:00405C10                 sub     esp, 0Ch
.text:00405C13                 mov     [esp+0Ch+var_4], ebx
.text:00405C17                 mov     ebx, [esp+0Ch+arg_0]
.text:00405C1B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405C1E                 call    malloc
.text:00405C23                 test    eax, eax
.text:00405C25                 jz      short loc_405C30
.text:00405C27
.text:00405C27 loc_405C27:                             ; CODE XREF: sub_405C10+22↓j
.text:00405C27                 mov     ebx, [esp+0Ch+var_4]
.text:00405C2B                 add     esp, 0Ch
.text:00405C2E                 retn
.text:00405C2E ; ---------------------------------------------------------------------------
.text:00405C2F                 align 10h
.text:00405C30
.text:00405C30 loc_405C30:                             ; CODE XREF: sub_405C10+15↑j
.text:00405C30                 test    ebx, ebx
.text:00405C32                 jz      short loc_405C27
.text:00405C34                 call    sub_405EC0
.text:00405C34 sub_405C10      endp
.text:00405C34
.text:00405C34 ; ---------------------------------------------------------------------------
.text:00405C39                 align 10h
.text:00405C40
.text:00405C40 ; =============== S U B R O U T I N E =======================================
.text:00405C40
.text:00405C40
.text:00405C40 ; int __cdecl sub_405C40(void *, int, int)
.text:00405C40 sub_405C40      proc near               ; CODE XREF: .text:0040358A↑p
.text:00405C40
.text:00405C40 Block           = dword ptr -1Ch
.text:00405C40 Size            = dword ptr -18h
.text:00405C40 var_8           = dword ptr -8
.text:00405C40 var_4           = dword ptr -4
.text:00405C40 arg_0           = dword ptr  4
.text:00405C40 arg_4           = dword ptr  8
.text:00405C40 arg_8           = dword ptr  0Ch
.text:00405C40
.text:00405C40                 sub     esp, 1Ch
.text:00405C43                 xor     edx, edx
.text:00405C45                 mov     eax, 0FFFFFFFFh
.text:00405C4A                 mov     [esp+1Ch+var_8], ebx
.text:00405C4E                 mov     ecx, [esp+1Ch+arg_0]
.text:00405C52                 mov     ebx, [esp+1Ch+arg_8]
.text:00405C56                 mov     [esp+1Ch+var_4], esi
.text:00405C5A                 mov     esi, [esp+1Ch+arg_4]
.text:00405C5E                 div     ebx
.text:00405C60                 cmp     eax, esi
.text:00405C62                 jb      short loc_405C94
.text:00405C64                 mov     [esp+1Ch+Block], ecx ; Block
.text:00405C67                 mov     edx, esi
.text:00405C69                 imul    edx, ebx
.text:00405C6C                 mov     [esp+1Ch+Size], edx ; Size
.text:00405C70                 call    realloc
.text:00405C75                 test    eax, eax
.text:00405C77                 mov     ecx, eax
.text:00405C79                 jz      short loc_405C90
.text:00405C7B
.text:00405C7B loc_405C7B:                             ; CODE XREF: sub_405C40+52↓j
.text:00405C7B                 mov     ebx, [esp+1Ch+var_8]
.text:00405C7F                 mov     eax, ecx
.text:00405C81                 mov     esi, [esp+1Ch+var_4]
.text:00405C85                 add     esp, 1Ch
.text:00405C88                 retn
.text:00405C88 ; ---------------------------------------------------------------------------
.text:00405C89                 align 10h
.text:00405C90
.text:00405C90 loc_405C90:                             ; CODE XREF: sub_405C40+39↑j
.text:00405C90                 test    esi, esi
.text:00405C92                 jz      short loc_405C7B
.text:00405C94
.text:00405C94 loc_405C94:                             ; CODE XREF: sub_405C40+22↑j
.text:00405C94                 call    sub_405EC0
.text:00405C94 sub_405C40      endp
.text:00405C94
.text:00405C94 ; ---------------------------------------------------------------------------
.text:00405C99                 align 10h
.text:00405CA0
.text:00405CA0 ; =============== S U B R O U T I N E =======================================
.text:00405CA0
.text:00405CA0
.text:00405CA0 ; int __cdecl sub_405CA0(void *, size_t)
.text:00405CA0 sub_405CA0      proc near               ; CODE XREF: sub_405A00+5B↑p
.text:00405CA0
.text:00405CA0 Block           = dword ptr -0Ch
.text:00405CA0 Size            = dword ptr -8
.text:00405CA0 var_4           = dword ptr -4
.text:00405CA0 arg_0           = dword ptr  4
.text:00405CA0 arg_4           = dword ptr  8
.text:00405CA0
.text:00405CA0                 sub     esp, 0Ch
.text:00405CA3                 mov     edx, [esp+0Ch+arg_0]
.text:00405CA7                 mov     [esp+0Ch+var_4], ebx
.text:00405CAB                 mov     ebx, [esp+0Ch+arg_4]
.text:00405CAF                 mov     [esp+0Ch+Block], edx ; Block
.text:00405CB2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405CB6                 call    realloc
.text:00405CBB                 test    eax, eax
.text:00405CBD                 jz      short loc_405CC7
.text:00405CBF
.text:00405CBF loc_405CBF:                             ; CODE XREF: sub_405CA0+29↓j
.text:00405CBF                 mov     ebx, [esp+0Ch+var_4]
.text:00405CC3                 add     esp, 0Ch
.text:00405CC6                 retn
.text:00405CC7 ; ---------------------------------------------------------------------------
.text:00405CC7
.text:00405CC7 loc_405CC7:                             ; CODE XREF: sub_405CA0+1D↑j
.text:00405CC7                 test    ebx, ebx
.text:00405CC9                 jz      short loc_405CBF
.text:00405CCB                 call    sub_405EC0
.text:00405CCB sub_405CA0      endp
.text:00405CCB
.text:00405CD0
.text:00405CD0 ; =============== S U B R O U T I N E =======================================
.text:00405CD0
.text:00405CD0 ; Attributes: thunk
.text:00405CD0
.text:00405CD0 ; int __cdecl sub_405CD0(void *, int, int)
.text:00405CD0 sub_405CD0      proc near               ; CODE XREF: sub_403290+163↑p
.text:00405CD0                                         ; .text:0040356E↑p
.text:00405CD0                 jmp     sub_405E20
.text:00405CD0 sub_405CD0      endp
.text:00405CD0
.text:00405CD0 ; ---------------------------------------------------------------------------
.text:00405CD5                 align 10h
.text:00405CE0                 sub     esp, 0Ch
.text:00405CE3                 mov     edx, [esp+14h]
.text:00405CE7                 mov     dword ptr [esp+8], 1
.text:00405CEF                 mov     [esp+4], edx
.text:00405CF3                 mov     edx, [esp+10h]
.text:00405CF7                 mov     [esp], edx
.text:00405CFA                 call    sub_405E20
.text:00405CFF                 add     esp, 0Ch
.text:00405D02                 retn
.text:00405D02 ; ---------------------------------------------------------------------------
.text:00405D03                 align 10h
.text:00405D10                 sub     esp, 1Ch
.text:00405D13                 mov     [esp+18h], ebx
.text:00405D17                 mov     ebx, [esp+20h]
.text:00405D1B                 mov     [esp], ebx
.text:00405D1E                 call    malloc
.text:00405D23                 test    eax, eax
.text:00405D25                 jz      short loc_405D43
.text:00405D27
.text:00405D27 loc_405D27:                             ; CODE XREF: .text:00405D45↓j
.text:00405D27                 mov     [esp+8], ebx
.text:00405D2B                 mov     dword ptr [esp+4], 0
.text:00405D33                 mov     [esp], eax
.text:00405D36                 call    memset
.text:00405D3B                 mov     ebx, [esp+18h]
.text:00405D3F                 add     esp, 1Ch
.text:00405D42                 retn
.text:00405D43 ; ---------------------------------------------------------------------------
.text:00405D43
.text:00405D43 loc_405D43:                             ; CODE XREF: .text:00405D25↑j
.text:00405D43                 test    ebx, ebx
.text:00405D45                 jz      short loc_405D27
.text:00405D47                 call    sub_405EC0
.text:00405D47 ; ---------------------------------------------------------------------------
.text:00405D4C                 align 10h
.text:00405D50                 sub     esp, 0Ch
.text:00405D53                 xor     edx, edx
.text:00405D55                 mov     ecx, [esp+14h]
.text:00405D59                 mov     [esp+8], ebx
.text:00405D5D                 mov     eax, 0FFFFFFFFh
.text:00405D62                 mov     ebx, [esp+10h]
.text:00405D66                 div     ecx
.text:00405D68                 cmp     eax, ebx
.text:00405D6A                 jb      short loc_405D88
.text:00405D6C                 mov     [esp+4], ecx
.text:00405D70                 mov     [esp], ebx
.text:00405D73                 call    calloc
.text:00405D78                 test    eax, eax
.text:00405D7A                 jz      short loc_405D84
.text:00405D7C
.text:00405D7C loc_405D7C:                             ; CODE XREF: .text:00405D86↓j
.text:00405D7C                 mov     ebx, [esp+8]
.text:00405D80                 add     esp, 0Ch
.text:00405D83                 retn
.text:00405D84 ; ---------------------------------------------------------------------------
.text:00405D84
.text:00405D84 loc_405D84:                             ; CODE XREF: .text:00405D7A↑j
.text:00405D84                 test    ebx, ebx
.text:00405D86                 jz      short loc_405D7C
.text:00405D88
.text:00405D88 loc_405D88:                             ; CODE XREF: .text:00405D6A↑j
.text:00405D88                 call    sub_405EC0
.text:00405D88 ; ---------------------------------------------------------------------------
.text:00405D8D                 align 10h
.text:00405D90                 sub     esp, 1Ch
.text:00405D93                 mov     [esp+18h], ebx
.text:00405D97                 mov     ebx, [esp+24h]
.text:00405D9B                 mov     [esp], ebx
.text:00405D9E                 call    malloc
.text:00405DA3                 test    eax, eax
.text:00405DA5                 mov     edx, eax
.text:00405DA7                 jz      short loc_405DC5
.text:00405DA9
.text:00405DA9 loc_405DA9:                             ; CODE XREF: .text:00405DC7↓j
.text:00405DA9                 mov     [esp+8], ebx
.text:00405DAD                 mov     ecx, [esp+20h]
.text:00405DB1                 mov     [esp], edx
.text:00405DB4                 mov     [esp+4], ecx
.text:00405DB8                 call    memcpy
.text:00405DBD                 mov     ebx, [esp+18h]
.text:00405DC1                 add     esp, 1Ch
.text:00405DC4                 retn
.text:00405DC5 ; ---------------------------------------------------------------------------
.text:00405DC5
.text:00405DC5 loc_405DC5:                             ; CODE XREF: .text:00405DA7↑j
.text:00405DC5                 test    ebx, ebx
.text:00405DC7                 jz      short loc_405DA9
.text:00405DC9                 call    sub_405EC0
.text:00405DC9 ; ---------------------------------------------------------------------------
.text:00405DCE                 align 10h
.text:00405DD0                 sub     esp, 1Ch
.text:00405DD3                 mov     [esp+18h], esi
.text:00405DD7                 mov     esi, [esp+20h]
.text:00405DDB                 mov     [esp+14h], ebx
.text:00405DDF                 mov     [esp], esi
.text:00405DE2                 call    strlen
.text:00405DE7                 lea     ebx, [eax+1]
.text:00405DEA                 mov     [esp], ebx
.text:00405DED                 call    malloc
.text:00405DF2                 test    eax, eax
.text:00405DF4                 jz      short loc_405E12
.text:00405DF6
.text:00405DF6 loc_405DF6:                             ; CODE XREF: .text:00405E14↓j
.text:00405DF6                 mov     [esp+8], ebx
.text:00405DFA                 mov     [esp+4], esi
.text:00405DFE                 mov     [esp], eax
.text:00405E01                 call    memcpy
.text:00405E06                 mov     ebx, [esp+14h]
.text:00405E0A                 mov     esi, [esp+18h]
.text:00405E0E                 add     esp, 1Ch
.text:00405E11                 retn
.text:00405E12 ; ---------------------------------------------------------------------------
.text:00405E12
.text:00405E12 loc_405E12:                             ; CODE XREF: .text:00405DF4↑j
.text:00405E12                 test    ebx, ebx
.text:00405E14                 jz      short loc_405DF6
.text:00405E16                 call    sub_405EC0
.text:00405E16 ; ---------------------------------------------------------------------------
.text:00405E1B                 align 10h
.text:00405E20
.text:00405E20 ; =============== S U B R O U T I N E =======================================
.text:00405E20
.text:00405E20
.text:00405E20 ; int __cdecl sub_405E20(void *, int, int)
.text:00405E20 sub_405E20      proc near               ; CODE XREF: sub_405CD0↑j
.text:00405E20                                         ; .text:00405CFA↑p
.text:00405E20
.text:00405E20 Block           = dword ptr -1Ch
.text:00405E20 Size            = dword ptr -18h
.text:00405E20 var_C           = dword ptr -0Ch
.text:00405E20 var_8           = dword ptr -8
.text:00405E20 var_4           = dword ptr -4
.text:00405E20 arg_0           = dword ptr  4
.text:00405E20 arg_4           = dword ptr  8
.text:00405E20 arg_8           = dword ptr  0Ch
.text:00405E20
.text:00405E20                 sub     esp, 1Ch
.text:00405E23                 mov     [esp+1Ch+var_8], esi
.text:00405E27                 mov     esi, [esp+1Ch+arg_0]
.text:00405E2B                 mov     [esp+1Ch+var_4], edi
.text:00405E2F                 mov     edi, [esp+1Ch+arg_4]
.text:00405E33                 test    esi, esi
.text:00405E35                 mov     [esp+1Ch+var_C], ebx
.text:00405E39                 mov     ecx, [edi]
.text:00405E3B                 mov     ebx, [esp+1Ch+arg_8]
.text:00405E3F                 jz      short loc_405E80
.text:00405E41                 xor     edx, edx
.text:00405E43                 mov     eax, 7FFFFFFFh
.text:00405E48                 div     ebx
.text:00405E4A                 cmp     eax, ecx
.text:00405E4C                 jb      short loc_405E79
.text:00405E4E                 add     ecx, ecx
.text:00405E50
.text:00405E50 loc_405E50:                             ; CODE XREF: sub_405E20+62↓j
.text:00405E50                                         ; sub_405E20+71↓j ...
.text:00405E50                 mov     [edi], ecx
.text:00405E52                 imul    ebx, ecx
.text:00405E55                 mov     [esp+1Ch+Block], esi ; Block
.text:00405E58                 mov     [esp+1Ch+Size], ebx ; Size
.text:00405E5C                 call    realloc
.text:00405E61                 test    eax, eax
.text:00405E63                 jz      short loc_405E75
.text:00405E65
.text:00405E65 loc_405E65:                             ; CODE XREF: sub_405E20+57↓j
.text:00405E65                 mov     ebx, [esp+1Ch+var_C]
.text:00405E69                 mov     esi, [esp+1Ch+var_8]
.text:00405E6D                 mov     edi, [esp+1Ch+var_4]
.text:00405E71                 add     esp, 1Ch
.text:00405E74                 retn
.text:00405E75 ; ---------------------------------------------------------------------------
.text:00405E75
.text:00405E75 loc_405E75:                             ; CODE XREF: sub_405E20+43↑j
.text:00405E75                 test    ebx, ebx
.text:00405E77                 jz      short loc_405E65
.text:00405E79
.text:00405E79 loc_405E79:                             ; CODE XREF: sub_405E20+2C↑j
.text:00405E79                 call    sub_405EC0
.text:00405E79 ; ---------------------------------------------------------------------------
.text:00405E7E                 align 10h
.text:00405E80
.text:00405E80 loc_405E80:                             ; CODE XREF: sub_405E20+1F↑j
.text:00405E80                 test    ecx, ecx
.text:00405E82                 jnz     short loc_405E50
.text:00405E84                 xor     edx, edx
.text:00405E86                 mov     eax, 40h ; '@'
.text:00405E8B                 div     ebx
.text:00405E8D                 test    eax, eax
.text:00405E8F                 mov     ecx, eax
.text:00405E91                 jnz     short loc_405E50
.text:00405E93                 mov     ecx, 1
.text:00405E98                 jmp     short loc_405E50
.text:00405E98 sub_405E20      endp
.text:00405E98
.text:00405E98 ; ---------------------------------------------------------------------------
.text:00405E9A                 align 10h
.text:00405EA0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405EC0+3↓o
.text:00405EB1 ; const char aS_1[]
.text:00405EB1 aS_1            db '%s',0               ; DATA XREF: sub_405EC0+10↓o
.text:00405EB4                 align 10h
.text:00405EC0
.text:00405EC0 ; =============== S U B R O U T I N E =======================================
.text:00405EC0
.text:00405EC0 ; Attributes: noreturn
.text:00405EC0
.text:00405EC0 sub_405EC0      proc near               ; CODE XREF: sub_405A00:loc_405BBF↑p
.text:00405EC0                                         ; sub_405BD0:loc_405C09↑p ...
.text:00405EC0
.text:00405EC0 Code            = dword ptr -1Ch
.text:00405EC0 ErrorMessage    = dword ptr -18h
.text:00405EC0 var_14          = dword ptr -14h
.text:00405EC0 var_10          = byte ptr -10h
.text:00405EC0
.text:00405EC0                 sub     esp, 1Ch
.text:00405EC3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00405ECA                 call    ds:libintl_gettext
.text:00405ED0                 mov     [esp+1Ch+var_14], offset aS_1 ; "%s"
.text:00405ED8                 mov     edx, Code
.text:00405EDE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405EE6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00405EEA                 mov     [esp+1Ch+Code], edx ; Code
.text:00405EED                 call    sub_405F50
.text:00405EF2                 call    abort
.text:00405EF2 sub_405EC0      endp
.text:00405EF2
.text:00405EF2 ; ---------------------------------------------------------------------------
.text:00405EF7                 align 10h
.text:00405F00
.text:00405F00 ; =============== S U B R O U T I N E =======================================
.text:00405F00
.text:00405F00 ; Attributes: thunk
.text:00405F00
.text:00405F00 libintl_bindtextdomain proc near
.text:00405F00                 jmp     ds:__imp_libintl_bindtextdomain
.text:00405F00 libintl_bindtextdomain endp
.text:00405F00
.text:00405F00 ; ---------------------------------------------------------------------------
.text:00405F06                 align 10h
.text:00405F10                 jmp     ds:libintl_textdomain
.text:00405F10 ; ---------------------------------------------------------------------------
.text:00405F16                 align 10h
.text:00405F20                 jmp     ds:libintl_gettext
.text:00405F20 ; ---------------------------------------------------------------------------
.text:00405F26                 align 10h
.text:00405F30 ; const char aS_2[]
.text:00405F30 aS_2            db ': %s',0             ; DATA XREF: sub_405F50+B8↓o
.text:00405F30                                         ; sub_406054+122↓o
.text:00405F35 aUnknownSystemE db 'Unknown system error',0
.text:00405F35                                         ; DATA XREF: sub_405F50:loc_40601D↓o
.text:00405F35                                         ; sub_406054:loc_40618E↓o
.text:00405F4A ; const char aS_3[]
.text:00405F4A aS_3            db '%s: ',0             ; DATA XREF: sub_405F50:loc_406024↓o
.text:00405F4F                 align 10h
.text:00405F50
.text:00405F50 ; =============== S U B R O U T I N E =======================================
.text:00405F50
.text:00405F50
.text:00405F50 ; int __cdecl sub_405F50(int Code, int ErrorMessage, char *, char)
.text:00405F50 sub_405F50      proc near               ; CODE XREF: sub_401560+258↑p
.text:00405F50                                         ; sub_401560+344↑p ...
.text:00405F50
.text:00405F50 Stream          = dword ptr -1Ch
.text:00405F50 Format          = dword ptr -18h
.text:00405F50 ArgList         = dword ptr -14h
.text:00405F50 Code            = dword ptr  4
.text:00405F50 ErrorMessage    = dword ptr  8
.text:00405F50 arg_8           = dword ptr  0Ch
.text:00405F50 arg_C           = byte ptr  10h
.text:00405F50
.text:00405F50                 push    esi
.text:00405F51                 push    ebx
.text:00405F52                 sub     esp, 14h
.text:00405F55                 mov     edx, ds:_iob
.text:00405F5B                 mov     esi, [esp+1Ch+Code]
.text:00405F5F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405F63                 add     edx, 20h ; ' '
.text:00405F66                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405F69                 call    fflush
.text:00405F6E                 mov     eax, ds:dword_4082D0
.text:00405F73                 test    eax, eax
.text:00405F75                 jz      loc_406024
.text:00405F7B                 call    eax ; dword_4082D0
.text:00405F7D
.text:00405F7D loc_405F7D:                             ; CODE XREF: sub_405F50+F7↓j
.text:00405F7D                 lea     edx, [esp+1Ch+arg_C]
.text:00405F81                 mov     ecx, [esp+1Ch+arg_8]
.text:00405F85                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405F89                 mov     edx, ds:_iob
.text:00405F8F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405F93                 add     edx, 40h ; '@'
.text:00405F96                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405F99                 call    vfprintf
.text:00405F9E                 inc     ds:dword_4082E0
.text:00405FA4                 test    ebx, ebx
.text:00405FA6                 jnz     short loc_405FF2
.text:00405FA8
.text:00405FA8 loc_405FA8:                             ; CODE XREF: sub_405F50+CB↓j
.text:00405FA8                 mov     edx, ds:_iob
.text:00405FAE                 lea     ecx, [edx+40h]
.text:00405FB1                 mov     ebx, [ecx+4]
.text:00405FB4                 dec     ebx
.text:00405FB5                 test    ebx, ebx
.text:00405FB7                 mov     [ecx+4], ebx
.text:00405FBA                 js      short loc_405FE0
.text:00405FBC                 mov     ecx, [edx+40h]
.text:00405FBF                 mov     byte ptr [ecx], 0Ah
.text:00405FC2                 inc     dword ptr [edx+40h]
.text:00405FC5
.text:00405FC5 loc_405FC5:                             ; CODE XREF: sub_405F50+A0↓j
.text:00405FC5                 mov     edx, ds:_iob
.text:00405FCB                 add     edx, 40h ; '@'
.text:00405FCE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405FD1                 call    fflush
.text:00405FD6                 test    esi, esi
.text:00405FD8                 jnz     short loc_40604C
.text:00405FDA                 add     esp, 14h
.text:00405FDD                 pop     ebx
.text:00405FDE                 pop     esi
.text:00405FDF                 retn
.text:00405FE0 ; ---------------------------------------------------------------------------
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: sub_405F50+6A↑j
.text:00405FE0                 mov     [esp+1Ch+Format], ecx ; File
.text:00405FE4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00405FEB                 call    _flsbuf
.text:00405FF0                 jmp     short loc_405FC5
.text:00405FF2 ; ---------------------------------------------------------------------------
.text:00405FF2
.text:00405FF2 loc_405FF2:                             ; CODE XREF: sub_405F50+56↑j
.text:00405FF2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405FF5                 call    strerror
.text:00405FFA                 test    eax, eax
.text:00405FFC                 jz      short loc_40601D
.text:00405FFE
.text:00405FFE loc_405FFE:                             ; CODE XREF: sub_405F50+D2↓j
.text:00405FFE                 mov     [esp+1Ch+ArgList], eax
.text:00406002                 mov     ebx, ds:_iob
.text:00406008                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:00406010                 add     ebx, 40h ; '@'
.text:00406013                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00406016                 call    fprintf
.text:0040601B                 jmp     short loc_405FA8
.text:0040601D ; ---------------------------------------------------------------------------
.text:0040601D
.text:0040601D loc_40601D:                             ; CODE XREF: sub_405F50+AC↑j
.text:0040601D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406022                 jmp     short loc_405FFE
.text:00406024 ; ---------------------------------------------------------------------------
.text:00406024
.text:00406024 loc_406024:                             ; CODE XREF: sub_405F50+25↑j
.text:00406024                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:0040602C                 mov     edx, ds:_iob
.text:00406032                 mov     ecx, ds:dword_4082A0
.text:00406038                 add     edx, 40h ; '@'
.text:0040603B                 mov     [esp+1Ch+ArgList], ecx
.text:0040603F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406042                 call    fprintf
.text:00406047                 jmp     loc_405F7D
.text:0040604C ; ---------------------------------------------------------------------------
.text:0040604C
.text:0040604C loc_40604C:                             ; CODE XREF: sub_405F50+88↑j
.text:0040604C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040604F                 call    exit
.text:0040604F sub_405F50      endp
.text:0040604F
.text:00406054
.text:00406054 ; =============== S U B R O U T I N E =======================================
.text:00406054
.text:00406054
.text:00406054 ; int __cdecl sub_406054(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00406054 sub_406054      proc near               ; DATA XREF: sub_406054+77↓o
.text:00406054
.text:00406054 Stream          = dword ptr -28h
.text:00406054 Format          = dword ptr -24h
.text:00406054 ArgList         = dword ptr -20h
.text:00406054 var_1C          = dword ptr -1Ch
.text:00406054 Code            = dword ptr  8
.text:00406054 ErrorMessage    = dword ptr  0Ch
.text:00406054 Str2            = dword ptr  10h
.text:00406054 arg_10          = dword ptr  14h
.text:00406054 arg_14          = dword ptr  18h
.text:00406054 arg_18          = byte ptr  1Ch
.text:00406054
.text:00406054                 and     eax, 64253A73h
.text:00406059                 cmp     ah, [eax]
.text:0040605B
.text:0040605B loc_40605B:                             ; DATA XREF: sub_406054:loc_406195↓o
.text:0040605B                 add     ds:55003A73h, ah
.text:00406061                 push    edi
.text:00406062                 push    esi
.text:00406063                 push    ebx
.text:00406064                 sub     esp, 1Ch
.text:00406067                 mov     edx, ds:dword_408310
.text:0040606D                 mov     ebp, [esp+28h+Code]
.text:00406071                 mov     edi, [esp+28h+ErrorMessage]
.text:00406075                 test    edx, edx
.text:00406077                 mov     ebx, [esp+28h+Str2]
.text:0040607B                 mov     esi, [esp+28h+arg_10]
.text:0040607F                 jz      short loc_406099
.text:00406081                 cmp     ds:dword_408290, esi
.text:00406087                 jz      loc_4061C0
.text:0040608D
.text:0040608D loc_40608D:                             ; CODE XREF: sub_406054+18D↓j
.text:0040608D                 mov     ds:Str1, ebx
.text:00406093                 mov     ds:dword_408290, esi
.text:00406099
.text:00406099 loc_406099:                             ; CODE XREF: sub_406054+2B↑j
.text:00406099                 mov     edx, ds:_iob
.text:0040609F                 add     edx, 20h ; ' '
.text:004060A2                 mov     [esp+28h+Stream], edx ; Stream
.text:004060A5                 call    fflush
.text:004060AA                 mov     eax, ds:dword_4082D0
.text:004060AF                 test    eax, eax
.text:004060B1                 jz      loc_406195
.text:004060B7                 call    eax ; dword_4082D0
.text:004060B9
.text:004060B9 loc_4060B9:                             ; CODE XREF: sub_406054+164↓j
.text:004060B9                 test    ebx, ebx
.text:004060BB                 jz      short loc_4060DE
.text:004060BD                 mov     [esp+28h+ArgList], ebx
.text:004060C1                 mov     ebx, ds:_iob
.text:004060C7                 mov     [esp+28h+var_1C], esi
.text:004060CB                 mov     [esp+28h+Format], offset sub_406054 ; Format
.text:004060D3                 add     ebx, 40h ; '@'
.text:004060D6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004060D9                 call    fprintf
.text:004060DE
.text:004060DE loc_4060DE:                             ; CODE XREF: sub_406054+67↑j
.text:004060DE                 mov     esi, ds:_iob
.text:004060E4                 lea     edx, [esp+28h+arg_18]
.text:004060E8                 mov     ecx, [esp+28h+arg_14]
.text:004060EC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004060F0                 add     esi, 40h ; '@'
.text:004060F3                 mov     [esp+28h+Format], ecx ; Format
.text:004060F7                 mov     [esp+28h+Stream], esi ; Stream
.text:004060FA                 call    vfprintf
.text:004060FF                 inc     ds:dword_4082E0
.text:00406105                 test    edi, edi
.text:00406107                 jnz     short loc_406160
.text:00406109
.text:00406109 loc_406109:                             ; CODE XREF: sub_406054+135↓j
.text:00406109                 mov     edx, ds:_iob
.text:0040610F                 lea     ecx, [edx+40h]
.text:00406112                 mov     ebx, [ecx+4]
.text:00406115                 dec     ebx
.text:00406116                 test    ebx, ebx
.text:00406118                 mov     [ecx+4], ebx
.text:0040611B                 js      short loc_406147
.text:0040611D                 mov     esi, [edx+40h]
.text:00406120                 mov     byte ptr [esi], 0Ah
.text:00406123                 inc     dword ptr [edx+40h]
.text:00406126
.text:00406126 loc_406126:                             ; CODE XREF: sub_406054+103↓j
.text:00406126                 mov     ecx, ds:_iob
.text:0040612C                 add     ecx, 40h ; '@'
.text:0040612F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406132                 call    fflush
.text:00406137                 test    ebp, ebp
.text:00406139                 jnz     loc_4061E6
.text:0040613F
.text:0040613F loc_40613F:                             ; CODE XREF: sub_406054+173↓j
.text:0040613F                                         ; sub_406054+187↓j
.text:0040613F                 add     esp, 1Ch
.text:00406142                 pop     ebx
.text:00406143                 pop     esi
.text:00406144                 pop     edi
.text:00406145                 pop     ebp
.text:00406146                 retn
.text:00406147 ; ---------------------------------------------------------------------------
.text:00406147
.text:00406147 loc_406147:                             ; CODE XREF: sub_406054+C7↑j
.text:00406147                 mov     [esp+28h+Format], ecx ; File
.text:0040614B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00406152                 call    _flsbuf
.text:00406157                 jmp     short loc_406126
.text:00406157 ; ---------------------------------------------------------------------------
.text:00406159                 align 10h
.text:00406160
.text:00406160 loc_406160:                             ; CODE XREF: sub_406054+B3↑j
.text:00406160                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00406163                 call    strerror
.text:00406168                 test    eax, eax
.text:0040616A                 jz      short loc_40618E
.text:0040616C
.text:0040616C loc_40616C:                             ; CODE XREF: sub_406054+13F↓j
.text:0040616C                 mov     [esp+28h+ArgList], eax
.text:00406170                 mov     edi, ds:_iob
.text:00406176                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:0040617E                 add     edi, 40h ; '@'
.text:00406181                 mov     [esp+28h+Stream], edi ; Stream
.text:00406184                 call    fprintf
.text:00406189                 jmp     loc_406109
.text:0040618E ; ---------------------------------------------------------------------------
.text:0040618E
.text:0040618E loc_40618E:                             ; CODE XREF: sub_406054+116↑j
.text:0040618E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406193                 jmp     short loc_40616C
.text:00406195 ; ---------------------------------------------------------------------------
.text:00406195
.text:00406195 loc_406195:                             ; CODE XREF: sub_406054+5D↑j
.text:00406195                 mov     [esp+28h+Format], (offset loc_40605B+1) ; Format
.text:0040619D                 mov     ecx, ds:_iob
.text:004061A3                 mov     edx, ds:dword_4082A0
.text:004061A9                 add     ecx, 40h ; '@'
.text:004061AC                 mov     [esp+28h+ArgList], edx
.text:004061B0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004061B3                 call    fprintf
.text:004061B8                 jmp     loc_4060B9
.text:004061B8 ; ---------------------------------------------------------------------------
.text:004061BD                 align 10h
.text:004061C0
.text:004061C0 loc_4061C0:                             ; CODE XREF: sub_406054+33↑j
.text:004061C0                 mov     eax, ds:Str1
.text:004061C5                 cmp     ebx, eax
.text:004061C7                 jz      loc_40613F
.text:004061CD                 mov     [esp+28h+Format], ebx ; Str2
.text:004061D1                 mov     [esp+28h+Stream], eax ; Str1
.text:004061D4                 call    strcmp
.text:004061D9                 test    eax, eax
.text:004061DB                 jz      loc_40613F
.text:004061E1                 jmp     loc_40608D
.text:004061E6 ; ---------------------------------------------------------------------------
.text:004061E6
.text:004061E6 loc_4061E6:                             ; CODE XREF: sub_406054+E5↑j
.text:004061E6                 mov     [esp+28h+Stream], ebp ; Code
.text:004061E9                 call    exit
.text:004061E9 sub_406054      endp ; sp-analysis failed
.text:004061E9
.text:004061E9 ; ---------------------------------------------------------------------------
.text:004061EE                 align 10h
.text:004061F0
.text:004061F0 ; =============== S U B R O U T I N E =======================================
.text:004061F0
.text:004061F0 ; Attributes: thunk
.text:004061F0
.text:004061F0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004061F0 mbrtowc         proc near               ; CODE XREF: sub_4048C0+757↑p
.text:004061F0                 jmp     ds:__imp_mbrtowc
.text:004061F0 mbrtowc         endp
.text:004061F0
.text:004061F0 ; ---------------------------------------------------------------------------
.text:004061F6                 align 10h
.text:00406200
.text:00406200 ; =============== S U B R O U T I N E =======================================
.text:00406200
.text:00406200 ; Attributes: bp-based frame
.text:00406200
.text:00406200 sub_406200      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00406200                 push    ebp
.text:00406201                 mov     ecx, offset dword_408000
.text:00406206                 cmp     ecx, offset dword_408000
.text:0040620C                 mov     ebp, esp
.text:0040620E                 jnb     short loc_406226
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: sub_406200+24↓j
.text:00406210                 mov     edx, [ecx+4]
.text:00406213                 mov     eax, [ecx]
.text:00406215                 add     ecx, 8
.text:00406218                 add     [edx+400000h], eax
.text:0040621E                 cmp     ecx, offset dword_408000
.text:00406224                 jb      short loc_406210
.text:00406226
.text:00406226 loc_406226:                             ; CODE XREF: sub_406200+E↑j
.text:00406226                 pop     ebp
.text:00406227                 retn
.text:00406227 sub_406200      endp
.text:00406227
.text:00406227 ; ---------------------------------------------------------------------------
.text:00406228                 align 10h
.text:00406230
.text:00406230 ; =============== S U B R O U T I N E =======================================
.text:00406230
.text:00406230 ; Attributes: bp-based frame
.text:00406230
.text:00406230 sub_406230      proc near               ; CODE XREF: sub_401080+16↑p
.text:00406230                                         ; TopLevelExceptionFilter+D7↑p
.text:00406230                 push    ebp
.text:00406231                 mov     ebp, esp
.text:00406233                 fninit
.text:00406235                 pop     ebp
.text:00406236                 retn
.text:00406236 sub_406230      endp
.text:00406236
.text:00406236 ; ---------------------------------------------------------------------------
.text:00406237                 align 10h
.text:00406240
.text:00406240 ; =============== S U B R O U T I N E =======================================
.text:00406240
.text:00406240 ; Attributes: bp-based frame
.text:00406240
.text:00406240 ; void __cdecl sub_406240()
.text:00406240 sub_406240      proc near               ; DATA XREF: .text:loc_406289↓o
.text:00406240                                         ; sub_4062D0:loc_4062FE↓o
.text:00406240                 push    ebp
.text:00406241                 mov     ebp, esp
.text:00406243                 sub     esp, 8
.text:00406246                 mov     eax, off_407084
.text:0040624B                 mov     edx, [eax]
.text:0040624D                 test    edx, edx
.text:0040624F                 jnz     short loc_406255
.text:00406251
.text:00406251 loc_406251:                             ; CODE XREF: sub_406240+2C↓j
.text:00406251                 mov     esp, ebp
.text:00406253                 pop     ebp
.text:00406254                 retn
.text:00406255 ; ---------------------------------------------------------------------------
.text:00406255
.text:00406255 loc_406255:                             ; CODE XREF: sub_406240+F↑j
.text:00406255                                         ; sub_406240+2A↓j
.text:00406255                 call    dword ptr [eax]
.text:00406257                 mov     edx, off_407084
.text:0040625D                 mov     ecx, [edx+4]
.text:00406260                 lea     eax, [edx+4]
.text:00406263                 mov     off_407084, eax
.text:00406268                 test    ecx, ecx
.text:0040626A                 jnz     short loc_406255
.text:0040626C                 jmp     short loc_406251
.text:0040626C sub_406240      endp
.text:0040626C
.text:0040626C ; ---------------------------------------------------------------------------
.text:0040626E                 align 10h
.text:00406270                 push    ebp
.text:00406271                 mov     ebp, esp
.text:00406273                 sub     esp, 8
.text:00406276                 mov     [ebp-4], ebx
.text:00406279                 mov     eax, ds:dword_406CA0
.text:0040627E                 cmp     eax, 0FFFFFFFFh
.text:00406281                 jz      short loc_4062AC
.text:00406283
.text:00406283 loc_406283:                             ; CODE XREF: .text:004062B6↓j
.text:00406283                                         ; .text:004062C9↓j
.text:00406283                 test    eax, eax
.text:00406285                 mov     ebx, eax
.text:00406287                 jnz     short loc_4062A0
.text:00406289
.text:00406289 loc_406289:                             ; CODE XREF: .text:004062AA↓j
.text:00406289                 mov     dword ptr [esp], offset sub_406240
.text:00406290                 call    sub_401040
.text:00406295                 mov     ebx, [ebp-4]
.text:00406298                 mov     esp, ebp
.text:0040629A                 pop     ebp
.text:0040629B                 retn
.text:0040629B ; ---------------------------------------------------------------------------
.text:0040629C                 align 10h
.text:004062A0
.text:004062A0 loc_4062A0:                             ; CODE XREF: .text:00406287↑j
.text:004062A0                                         ; .text:004062A8↓j
.text:004062A0                 call    ds:dword_406CA0[ebx*4]
.text:004062A7                 dec     ebx
.text:004062A8                 jnz     short loc_4062A0
.text:004062AA                 jmp     short loc_406289
.text:004062AC ; ---------------------------------------------------------------------------
.text:004062AC
.text:004062AC loc_4062AC:                             ; CODE XREF: .text:00406281↑j
.text:004062AC                 mov     ecx, ds:dword_406CA4
.text:004062B2                 xor     eax, eax
.text:004062B4                 test    ecx, ecx
.text:004062B6                 jz      short loc_406283
.text:004062B8                 mov     edx, offset dword_406CA0
.text:004062BD                 lea     esi, [esi+0]
.text:004062C0
.text:004062C0 loc_4062C0:                             ; CODE XREF: .text:004062C7↓j
.text:004062C0                 inc     eax
.text:004062C1                 mov     ecx, [edx+eax*4+4]
.text:004062C5                 test    ecx, ecx
.text:004062C7                 jnz     short loc_4062C0
.text:004062C9                 jmp     short loc_406283
.text:004062C9 ; ---------------------------------------------------------------------------
.text:004062CB                 align 10h
.text:004062D0
.text:004062D0 ; =============== S U B R O U T I N E =======================================
.text:004062D0
.text:004062D0 ; Attributes: bp-based frame
.text:004062D0
.text:004062D0 sub_4062D0      proc near               ; CODE XREF: sub_401560+16↑p
.text:004062D0
.text:004062D0 var_8           = dword ptr -8
.text:004062D0 var_4           = dword ptr -4
.text:004062D0
.text:004062D0                 push    ebp
.text:004062D1                 mov     ebp, esp
.text:004062D3                 sub     esp, 8
.text:004062D6                 mov     [ebp+var_4], ebx
.text:004062D9                 mov     edx, dword_407080
.text:004062DF                 test    edx, edx
.text:004062E1                 jnz     short loc_40630A
.text:004062E3                 mov     eax, ds:dword_406CA0
.text:004062E8                 mov     edx, 1
.text:004062ED                 mov     dword_407080, edx
.text:004062F3                 cmp     eax, 0FFFFFFFFh
.text:004062F6                 jz      short loc_40631D
.text:004062F8
.text:004062F8 loc_4062F8:                             ; CODE XREF: sub_4062D0+57↓j
.text:004062F8                                         ; sub_4062D0+69↓j
.text:004062F8                 test    eax, eax
.text:004062FA                 mov     ebx, eax
.text:004062FC                 jnz     short loc_406311
.text:004062FE
.text:004062FE loc_4062FE:                             ; CODE XREF: sub_4062D0+4B↓j
.text:004062FE                 mov     [esp+8+var_8], offset sub_406240 ; void (__cdecl *)()
.text:00406305                 call    sub_401040
.text:0040630A
.text:0040630A loc_40630A:                             ; CODE XREF: sub_4062D0+11↑j
.text:0040630A                 mov     ebx, [ebp+var_4]
.text:0040630D                 mov     esp, ebp
.text:0040630F                 pop     ebp
.text:00406310                 retn
.text:00406311 ; ---------------------------------------------------------------------------
.text:00406311
.text:00406311 loc_406311:                             ; CODE XREF: sub_4062D0+2C↑j
.text:00406311                                         ; sub_4062D0+49↓j
.text:00406311                 call    ds:dword_406CA0[ebx*4]
.text:00406318                 dec     ebx
.text:00406319                 jnz     short loc_406311
.text:0040631B                 jmp     short loc_4062FE
.text:0040631D ; ---------------------------------------------------------------------------
.text:0040631D
.text:0040631D loc_40631D:                             ; CODE XREF: sub_4062D0+26↑j
.text:0040631D                 mov     ecx, ds:dword_406CA4
.text:00406323                 xor     eax, eax
.text:00406325                 test    ecx, ecx
.text:00406327                 jz      short loc_4062F8
.text:00406329                 mov     edx, offset dword_406CA0
.text:0040632E                 mov     esi, esi
.text:00406330
.text:00406330 loc_406330:                             ; CODE XREF: sub_4062D0+67↓j
.text:00406330                 inc     eax
.text:00406331                 mov     ebx, [edx+eax*4+4]
.text:00406335                 test    ebx, ebx
.text:00406337                 jnz     short loc_406330
.text:00406339                 jmp     short loc_4062F8
.text:00406339 sub_4062D0      endp
.text:00406339
.text:00406339 ; ---------------------------------------------------------------------------
.text:0040633B                 align 10h
.text:00406340
.text:00406340 ; =============== S U B R O U T I N E =======================================
.text:00406340
.text:00406340 ; Attributes: bp-based frame
.text:00406340
.text:00406340 sub_406340      proc near               ; CODE XREF: sub_401D10+6F↑p
.text:00406340                                         ; sub_401D10+F7↑p ...
.text:00406340
.text:00406340 var_24          = dword ptr -24h
.text:00406340 var_20          = dword ptr -20h
.text:00406340 var_1C          = dword ptr -1Ch
.text:00406340 var_18          = dword ptr -18h
.text:00406340 var_14          = dword ptr -14h
.text:00406340 var_C           = dword ptr -0Ch
.text:00406340 var_8           = dword ptr -8
.text:00406340 var_4           = dword ptr -4
.text:00406340 arg_0           = dword ptr  8
.text:00406340 arg_4           = dword ptr  0Ch
.text:00406340 arg_8           = dword ptr  10h
.text:00406340 arg_C           = dword ptr  14h
.text:00406340
.text:00406340                 push    ebp
.text:00406341                 mov     ebp, esp
.text:00406343                 sub     esp, 28h
.text:00406346                 mov     [ebp+var_C], ebx
.text:00406349                 mov     edx, [ebp+arg_C]
.text:0040634C                 mov     ecx, [ebp+arg_0]
.text:0040634F                 mov     [ebp+var_8], esi
.text:00406352                 mov     eax, [ebp+arg_8]
.text:00406355                 test    edx, edx
.text:00406357                 mov     [ebp+var_4], edi
.text:0040635A                 mov     ebx, [ebp+arg_4]
.text:0040635D                 mov     esi, eax
.text:0040635F                 mov     [ebp+var_18], 0
.text:00406366                 mov     [ebp+var_14], 0
.text:0040636D                 mov     [ebp+var_1C], ecx
.text:00406370                 jnz     short loc_4063C2
.text:00406372                 cmp     eax, ebx
.text:00406374                 jbe     short loc_4063A0
.text:00406376                 mov     eax, ecx
.text:00406378                 mov     edx, ebx
.text:0040637A                 div     esi
.text:0040637C                 mov     edi, eax
.text:0040637E                 mov     esi, esi
.text:00406380
.text:00406380 loc_406380:                             ; CODE XREF: sub_406340+88↓j
.text:00406380                                         ; sub_406340+A4↓j ...
.text:00406380                 xor     ecx, ecx
.text:00406382
.text:00406382 loc_406382:                             ; CODE XREF: sub_406340+80↓j
.text:00406382                 mov     [ebp+var_18], edi
.text:00406385                 mov     ebx, [ebp+var_C]
.text:00406388                 mov     eax, [ebp+var_18]
.text:0040638B                 mov     [ebp+var_14], ecx
.text:0040638E                 mov     esi, [ebp+var_8]
.text:00406391                 mov     edx, [ebp+var_14]
.text:00406394                 mov     edi, [ebp+var_4]
.text:00406397                 mov     esp, ebp
.text:00406399                 pop     ebp
.text:0040639A                 retn
.text:0040639A ; ---------------------------------------------------------------------------
.text:0040639B                 align 10h
.text:004063A0
.text:004063A0 loc_4063A0:                             ; CODE XREF: sub_406340+34↑j
.text:004063A0                 test    eax, eax
.text:004063A2                 jnz     short loc_4063B1
.text:004063A4                 mov     eax, 1
.text:004063A9                 xor     ecx, ecx
.text:004063AB                 xor     edx, edx
.text:004063AD                 div     ecx
.text:004063AF                 mov     esi, eax
.text:004063B1
.text:004063B1 loc_4063B1:                             ; CODE XREF: sub_406340+62↑j
.text:004063B1                 mov     eax, ebx
.text:004063B3                 xor     edx, edx
.text:004063B5                 div     esi
.text:004063B7                 mov     ecx, eax
.text:004063B9                 mov     eax, [ebp+var_1C]
.text:004063BC                 div     esi
.text:004063BE                 mov     edi, eax
.text:004063C0                 jmp     short loc_406382
.text:004063C2 ; ---------------------------------------------------------------------------
.text:004063C2
.text:004063C2 loc_4063C2:                             ; CODE XREF: sub_406340+30↑j
.text:004063C2                 cmp     edx, ebx
.text:004063C4                 jbe     short loc_4063D0
.text:004063C6                 xor     edi, edi
.text:004063C8                 jmp     short loc_406380
.text:004063C8 ; ---------------------------------------------------------------------------
.text:004063CA                 align 10h
.text:004063D0
.text:004063D0 loc_4063D0:                             ; CODE XREF: sub_406340+84↑j
.text:004063D0                 bsr     eax, edx
.text:004063D3                 xor     eax, 1Fh
.text:004063D6                 mov     [ebp+var_20], eax
.text:004063D9                 jnz     short loc_4063F0
.text:004063DB                 cmp     ebx, edx
.text:004063DD                 ja      short loc_4063E6
.text:004063DF                 xor     edi, edi
.text:004063E1                 cmp     [ebp+var_1C], esi
.text:004063E4                 jb      short loc_406380
.text:004063E6
.text:004063E6 loc_4063E6:                             ; CODE XREF: sub_406340+9D↑j
.text:004063E6                 mov     edi, 1
.text:004063EB                 jmp     short loc_406380
.text:004063EB ; ---------------------------------------------------------------------------
.text:004063ED                 align 10h
.text:004063F0
.text:004063F0 loc_4063F0:                             ; CODE XREF: sub_406340+99↑j
.text:004063F0                 mov     eax, [ebp+var_20]
.text:004063F3                 mov     ecx, 20h ; ' '
.text:004063F8                 sub     ecx, eax
.text:004063FA                 mov     [ebp+var_24], ecx
.text:004063FD                 mov     eax, esi
.text:004063FF                 movzx   ecx, byte ptr [ebp+var_20]
.text:00406403                 shl     edx, cl
.text:00406405                 mov     edi, edx
.text:00406407                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040640B                 mov     edx, ebx
.text:0040640D                 shr     eax, cl
.text:0040640F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00406413                 or      edi, eax
.text:00406415                 mov     eax, [ebp+var_1C]
.text:00406418                 shl     esi, cl
.text:0040641A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040641E                 shr     edx, cl
.text:00406420                 movzx   ecx, byte ptr [ebp+var_20]
.text:00406424                 shl     ebx, cl
.text:00406426                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040642A                 shr     eax, cl
.text:0040642C                 or      ebx, eax
.text:0040642E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00406432                 mov     eax, ebx
.text:00406434                 div     edi
.text:00406436                 mov     ebx, edx
.text:00406438                 mov     edi, eax
.text:0040643A                 shl     [ebp+var_1C], cl
.text:0040643D                 mul     esi
.text:0040643F                 cmp     edx, ebx
.text:00406441                 ja      short loc_406454
.text:00406443                 cmp     edx, ebx
.text:00406445                 jnz     loc_406380
.text:0040644B                 cmp     eax, [ebp+var_1C]
.text:0040644E                 jbe     loc_406380
.text:00406454
.text:00406454 loc_406454:                             ; CODE XREF: sub_406340+101↑j
.text:00406454                 dec     edi
.text:00406455                 jmp     loc_406380
.text:00406455 sub_406340      endp
.text:00406455
.text:00406455 ; ---------------------------------------------------------------------------
.text:0040645A                 align 10h
.text:00406460
.text:00406460 ; =============== S U B R O U T I N E =======================================
.text:00406460
.text:00406460 ; Attributes: info_from_lumina
.text:00406460
.text:00406460 ; void *__cdecl _alloca(size_t Size)
.text:00406460 __alloca        proc near               ; CODE XREF: sub_401560+11↑p
.text:00406460                 push    ecx
.text:00406461                 mov     ecx, esp
.text:00406463                 add     ecx, 8
.text:00406466
.text:00406466 loc_406466:                             ; CODE XREF: __alloca+1B↓j
.text:00406466                 cmp     eax, 1000h
.text:0040646B                 jb      short loc_40647D
.text:0040646D                 sub     ecx, 1000h
.text:00406473                 or      dword ptr [ecx], 0
.text:00406476                 sub     eax, 1000h
.text:0040647B                 jmp     short loc_406466
.text:0040647D ; ---------------------------------------------------------------------------
.text:0040647D
.text:0040647D loc_40647D:                             ; CODE XREF: __alloca+B↑j
.text:0040647D                 sub     ecx, eax
.text:0040647F                 or      dword ptr [ecx], 0
.text:00406482                 mov     eax, esp
.text:00406484                 mov     esp, ecx
.text:00406486                 mov     ecx, [eax]
.text:00406488                 mov     eax, [eax+4]
.text:0040648B                 jmp     eax
.text:0040648B __alloca        endp
.text:0040648B
.text:0040648B ; ---------------------------------------------------------------------------
.text:0040648D                 align 10h
.text:00406490
.text:00406490 ; =============== S U B R O U T I N E =======================================
.text:00406490
.text:00406490 ; Attributes: bp-based frame
.text:00406490
.text:00406490 sub_406490      proc near               ; CODE XREF: sub_4035C0+38↑p
.text:00406490
.text:00406490 var_34          = dword ptr -34h
.text:00406490 var_2C          = dword ptr -2Ch
.text:00406490 var_28          = dword ptr -28h
.text:00406490 var_24          = dword ptr -24h
.text:00406490 var_20          = dword ptr -20h
.text:00406490 var_1C          = dword ptr -1Ch
.text:00406490 var_18          = dword ptr -18h
.text:00406490 var_14          = dword ptr -14h
.text:00406490 arg_0           = dword ptr  8
.text:00406490 arg_4           = dword ptr  0Ch
.text:00406490 arg_8           = dword ptr  10h
.text:00406490 arg_C           = dword ptr  14h
.text:00406490
.text:00406490                 push    ebp
.text:00406491                 mov     ebp, esp
.text:00406493                 push    edi
.text:00406494                 push    esi
.text:00406495                 push    ebx
.text:00406496                 sub     esp, 2Ch
.text:00406499                 mov     edx, [ebp+arg_C]
.text:0040649C                 mov     [ebp+var_20], 0
.text:004064A3                 mov     ecx, [ebp+arg_0]
.text:004064A6                 mov     ebx, [ebp+arg_4]
.text:004064A9                 mov     [ebp+var_1C], 0
.text:004064B0                 mov     eax, [ebp+arg_8]
.text:004064B3                 test    edx, edx
.text:004064B5                 mov     [ebp+var_24], edx
.text:004064B8                 mov     edi, ebx
.text:004064BA                 mov     esi, eax
.text:004064BC                 mov     [ebp+var_28], ecx
.text:004064BF                 jnz     short loc_406520
.text:004064C1                 cmp     eax, ebx
.text:004064C3                 jbe     short loc_406500
.text:004064C5                 mov     eax, ecx
.text:004064C7                 mov     edx, ebx
.text:004064C9                 div     esi
.text:004064CB
.text:004064CB loc_4064CB:                             ; CODE XREF: sub_406490+8B↓j
.text:004064CB                 mov     [ebp+var_28], edx
.text:004064CE                 lea     ecx, [ebp+var_18]
.text:004064D1                 test    ecx, ecx
.text:004064D3                 jz      short loc_4064EE
.text:004064D5                 mov     [ebp+var_1C], 0
.text:004064DC
.text:004064DC loc_4064DC:                             ; CODE XREF: sub_406490+DA↓j
.text:004064DC                 mov     eax, [ebp+var_28]
.text:004064DF                 mov     [ebp+var_20], eax
.text:004064E2                 mov     edx, [ebp+var_20]
.text:004064E5                 mov     ecx, [ebp+var_1C]
.text:004064E8                 mov     [ebp+var_18], edx
.text:004064EB                 mov     [ebp+var_14], ecx
.text:004064EE
.text:004064EE loc_4064EE:                             ; CODE XREF: sub_406490+43↑j
.text:004064EE                                         ; sub_406490+A7↓j ...
.text:004064EE                 mov     eax, [ebp+var_18]
.text:004064F1                 mov     edx, [ebp+var_14]
.text:004064F4                 add     esp, 2Ch
.text:004064F7                 pop     ebx
.text:004064F8                 pop     esi
.text:004064F9                 pop     edi
.text:004064FA                 pop     ebp
.text:004064FB                 retn
.text:004064FB ; ---------------------------------------------------------------------------
.text:004064FC                 align 10h
.text:00406500
.text:00406500 loc_406500:                             ; CODE XREF: sub_406490+33↑j
.text:00406500                 test    eax, eax
.text:00406502                 jnz     short loc_40650F
.text:00406504                 mov     eax, 1
.text:00406509                 xor     edx, edx
.text:0040650B                 div     esi
.text:0040650D                 mov     esi, eax
.text:0040650F
.text:0040650F loc_40650F:                             ; CODE XREF: sub_406490+72↑j
.text:0040650F                 mov     eax, edi
.text:00406511                 mov     edx, [ebp+var_24]
.text:00406514                 div     esi
.text:00406516                 mov     eax, [ebp+var_28]
.text:00406519                 div     esi
.text:0040651B                 jmp     short loc_4064CB
.text:0040651B ; ---------------------------------------------------------------------------
.text:0040651D                 align 10h
.text:00406520
.text:00406520 loc_406520:                             ; CODE XREF: sub_406490+2F↑j
.text:00406520                 cmp     [ebp+var_24], ebx
.text:00406523                 jbe     short loc_406540
.text:00406525                 mov     [ebp+var_20], ecx
.text:00406528
.text:00406528 loc_406528:                             ; CODE XREF: sub_406490+15B↓j
.text:00406528                 mov     [ebp+var_1C], edi
.text:0040652B                 mov     eax, [ebp+var_20]
.text:0040652E                 mov     edx, [ebp+var_1C]
.text:00406531                 mov     [ebp+var_18], eax
.text:00406534                 mov     [ebp+var_14], edx
.text:00406537                 jmp     short loc_4064EE
.text:00406537 ; ---------------------------------------------------------------------------
.text:00406539                 align 10h
.text:00406540
.text:00406540 loc_406540:                             ; CODE XREF: sub_406490+93↑j
.text:00406540                 bsr     eax, [ebp+var_24]
.text:00406544                 mov     ebx, eax
.text:00406546                 xor     ebx, 1Fh
.text:00406549                 jnz     short loc_406570
.text:0040654B                 cmp     edi, [ebp+var_24]
.text:0040654E                 ja      short loc_406555
.text:00406550                 cmp     [ebp+var_28], esi
.text:00406553                 jb      short loc_406560
.text:00406555
.text:00406555 loc_406555:                             ; CODE XREF: sub_406490+BE↑j
.text:00406555                 mov     edx, [ebp+var_28]
.text:00406558                 sub     edx, esi
.text:0040655A                 sbb     edi, [ebp+var_24]
.text:0040655D                 mov     [ebp+var_28], edx
.text:00406560
.text:00406560 loc_406560:                             ; CODE XREF: sub_406490+C3↑j
.text:00406560                 lea     ecx, [ebp+var_18]
.text:00406563                 test    ecx, ecx
.text:00406565                 jz      short loc_4064EE
.text:00406567                 mov     [ebp+var_1C], edi
.text:0040656A                 jmp     loc_4064DC
.text:0040656A ; ---------------------------------------------------------------------------
.text:0040656F                 align 10h
.text:00406570
.text:00406570 loc_406570:                             ; CODE XREF: sub_406490+B9↑j
.text:00406570                 mov     edx, [ebp+var_24]
.text:00406573                 mov     eax, 20h ; ' '
.text:00406578                 mov     cl, bl
.text:0040657A                 sub     eax, ebx
.text:0040657C                 mov     [ebp+var_2C], eax
.text:0040657F                 shl     edx, cl
.text:00406581                 mov     eax, esi
.text:00406583                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00406587                 shr     eax, cl
.text:00406589                 mov     cl, bl
.text:0040658B                 shl     esi, cl
.text:0040658D                 or      edx, eax
.text:0040658F                 mov     eax, [ebp+var_28]
.text:00406592                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00406596                 mov     [ebp+var_24], edx
.text:00406599                 mov     edx, edi
.text:0040659B                 shr     edx, cl
.text:0040659D                 mov     cl, bl
.text:0040659F                 shl     edi, cl
.text:004065A1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004065A5                 shr     eax, cl
.text:004065A7                 or      edi, eax
.text:004065A9                 mov     eax, edi
.text:004065AB                 mov     cl, bl
.text:004065AD                 div     [ebp+var_24]
.text:004065B0                 shl     [ebp+var_28], cl
.text:004065B3                 mov     edi, edx
.text:004065B5                 mul     esi
.text:004065B7                 mov     [ebp+var_34], eax
.text:004065BA                 cmp     edx, edi
.text:004065BC                 ja      short loc_4065F8
.text:004065BE                 cmp     edx, edi
.text:004065C0                 jz      short loc_4065F0
.text:004065C2
.text:004065C2 loc_4065C2:                             ; CODE XREF: sub_406490+166↓j
.text:004065C2                                         ; sub_406490+173↓j
.text:004065C2                 lea     eax, [ebp+var_18]
.text:004065C5                 test    eax, eax
.text:004065C7                 jz      loc_4064EE
.text:004065CD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004065D1                 mov     eax, [ebp+var_28]
.text:004065D4                 sub     eax, [ebp+var_34]
.text:004065D7                 sbb     edi, edx
.text:004065D9                 mov     [ebp+var_28], eax
.text:004065DC                 mov     edx, edi
.text:004065DE                 shl     edx, cl
.text:004065E0                 mov     cl, bl
.text:004065E2                 shr     eax, cl
.text:004065E4                 or      edx, eax
.text:004065E6                 mov     [ebp+var_20], edx
.text:004065E9                 shr     edi, cl
.text:004065EB                 jmp     loc_406528
.text:004065F0 ; ---------------------------------------------------------------------------
.text:004065F0
.text:004065F0 loc_4065F0:                             ; CODE XREF: sub_406490+130↑j
.text:004065F0                 mov     eax, [ebp+var_28]
.text:004065F3                 cmp     [ebp+var_34], eax
.text:004065F6                 jbe     short loc_4065C2
.text:004065F8
.text:004065F8 loc_4065F8:                             ; CODE XREF: sub_406490+12C↑j
.text:004065F8                 mov     ecx, [ebp+var_34]
.text:004065FB                 sub     ecx, esi
.text:004065FD                 sbb     edx, [ebp+var_24]
.text:00406600                 mov     [ebp+var_34], ecx
.text:00406603                 jmp     short loc_4065C2
.text:00406603 sub_406490      endp
.text:00406603
.text:00406603 ; ---------------------------------------------------------------------------
.text:00406605                 align 10h
.text:00406610
.text:00406610 ; =============== S U B R O U T I N E =======================================
.text:00406610
.text:00406610 ; Attributes: info_from_lumina
.text:00406610
.text:00406610 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00406610 _strtoull       proc near               ; CODE XREF: sub_4036A0+AD↑p
.text:00406610
.text:00406610 C               = dword ptr -3Ch
.text:00406610 Type            = dword ptr -38h
.text:00406610 var_34          = dword ptr -34h
.text:00406610 var_30          = dword ptr -30h
.text:00406610 var_2C          = dword ptr -2Ch
.text:00406610 var_28          = dword ptr -28h
.text:00406610 var_24          = dword ptr -24h
.text:00406610 var_20          = dword ptr -20h
.text:00406610 var_1C          = dword ptr -1Ch
.text:00406610 var_18          = dword ptr -18h
.text:00406610 String          = dword ptr  4
.text:00406610 EndPtr          = dword ptr  8
.text:00406610 Radix           = dword ptr  0Ch
.text:00406610
.text:00406610                 push    ebp
.text:00406611                 push    edi
.text:00406612                 push    esi
.text:00406613                 push    ebx
.text:00406614                 sub     esp, 2Ch
.text:00406617                 mov     edx, [esp+3Ch+EndPtr]
.text:0040661B                 test    edx, edx
.text:0040661D                 jz      short loc_406629
.text:0040661F                 mov     eax, [esp+3Ch+String]
.text:00406623                 mov     ecx, [esp+3Ch+EndPtr]
.text:00406627                 mov     [ecx], eax
.text:00406629
.text:00406629 loc_406629:                             ; CODE XREF: _strtoull+D↑j
.text:00406629                 mov     edx, [esp+3Ch+Radix]
.text:0040662D                 test    edx, edx
.text:0040662F                 js      short loc_40663F
.text:00406631                 cmp     [esp+3Ch+Radix], 1
.text:00406636                 jz      short loc_40663F
.text:00406638                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0040663D                 jle     short loc_406656
.text:0040663F
.text:0040663F loc_40663F:                             ; CODE XREF: _strtoull+1F↑j
.text:0040663F                                         ; _strtoull+26↑j
.text:0040663F                 call    _errno
.text:00406644                 mov     dword ptr [eax], 21h ; '!'
.text:0040664A
.text:0040664A loc_40664A:                             ; CODE XREF: _strtoull+FF↓j
.text:0040664A                                         ; _strtoull+109↓j
.text:0040664A                 xor     eax, eax
.text:0040664C                 xor     edx, edx
.text:0040664E
.text:0040664E loc_40664E:                             ; CODE XREF: _strtoull+244↓j
.text:0040664E                                         ; _strtoull+251↓j ...
.text:0040664E                 add     esp, 2Ch
.text:00406651                 pop     ebx
.text:00406652                 pop     esi
.text:00406653                 pop     edi
.text:00406654                 pop     ebp
.text:00406655                 retn
.text:00406656 ; ---------------------------------------------------------------------------
.text:00406656
.text:00406656 loc_406656:                             ; CODE XREF: _strtoull+2D↑j
.text:00406656                 mov     ecx, ds:__mb_cur_max
.text:0040665C                 lea     esi, [esi+0]
.text:00406660
.text:00406660 loc_406660:                             ; CODE XREF: _strtoull+7E↓j
.text:00406660                 cmp     dword ptr [ecx], 1
.text:00406663                 mov     esi, [esp+3Ch+String]
.text:00406667                 movsx   edx, byte ptr [esi]
.text:0040666A                 jz      loc_406A42
.text:00406670                 mov     [esp+3Ch+Type], 8 ; Type
.text:00406678                 mov     [esp+3Ch+C], edx ; C
.text:0040667B                 call    _isctype
.text:00406680                 mov     ecx, ds:__mb_cur_max
.text:00406686
.text:00406686 loc_406686:                             ; CODE XREF: _strtoull+445↓j
.text:00406686                 test    eax, eax
.text:00406688                 jz      short loc_406690
.text:0040668A                 inc     [esp+3Ch+String]
.text:0040668E                 jmp     short loc_406660
.text:00406690 ; ---------------------------------------------------------------------------
.text:00406690
.text:00406690 loc_406690:                             ; CODE XREF: _strtoull+78↑j
.text:00406690                 mov     esi, [esp+3Ch+String]
.text:00406694                 xor     ebx, ebx
.text:00406696                 movzx   edx, byte ptr [esi]
.text:00406699                 cmp     dl, 2Dh ; '-'
.text:0040669C                 setz    bl
.text:0040669F                 test    ebx, ebx
.text:004066A1                 mov     [esp+3Ch+var_20], ebx
.text:004066A5                 jnz     loc_406A32
.text:004066AB                 cmp     dl, 2Bh ; '+'
.text:004066AE                 jz      loc_406A32
.text:004066B4
.text:004066B4 loc_4066B4:                             ; CODE XREF: _strtoull+42D↓j
.text:004066B4                 mov     ebp, [esp+3Ch+Radix]
.text:004066B8                 test    ebp, ebp
.text:004066BA                 jnz     short loc_4066CD
.text:004066BC                 cmp     dl, 30h ; '0'
.text:004066BF                 jz      loc_406A09
.text:004066C5                 mov     [esp+3Ch+Radix], 0Ah
.text:004066CD
.text:004066CD loc_4066CD:                             ; CODE XREF: _strtoull+AA↑j
.text:004066CD                                         ; _strtoull+40F↓j ...
.text:004066CD                 cmp     [esp+3Ch+Radix], 10h
.text:004066D2                 jz      loc_4069DB
.text:004066D8
.text:004066D8 loc_4066D8:                             ; CODE XREF: _strtoull+3CE↓j
.text:004066D8                                         ; _strtoull+3E2↓j ...
.text:004066D8                 cmp     dword ptr [ecx], 1
.text:004066DB                 movsx   ebx, dl
.text:004066DE                 jz      loc_4069C3
.text:004066E4                 mov     [esp+3Ch+Type], 4 ; Type
.text:004066EC                 mov     [esp+3Ch+C], ebx ; C
.text:004066EF                 call    _isctype
.text:004066F4                 mov     esi, [esp+3Ch+String]
.text:004066F8                 movzx   edx, byte ptr [esi]
.text:004066FB
.text:004066FB loc_4066FB:                             ; CODE XREF: _strtoull+3C6↓j
.text:004066FB                 test    eax, eax
.text:004066FD                 jz      loc_40692C
.text:00406703                 movsx   eax, dl
.text:00406706                 sub     eax, 30h ; '0'
.text:00406709
.text:00406709 loc_406709:                             ; CODE XREF: _strtoull+34B↓j
.text:00406709                                         ; _strtoull+37C↓j ...
.text:00406709                 inc     [esp+3Ch+String]
.text:0040670D                 test    eax, eax
.text:0040670F                 js      loc_40664A
.text:00406715                 cmp     eax, [esp+3Ch+Radix]
.text:00406719                 jge     loc_40664A
.text:0040671F                 mov     [esp+3Ch+var_1C], eax
.text:00406723                 mov     edx, eax
.text:00406725                 sar     edx, 1Fh
.text:00406728                 mov     [esp+3Ch+var_18], edx
.text:0040672C                 mov     [esp+3Ch+var_24], 0
.text:00406734                 lea     esi, [esi+0]
.text:0040673A                 lea     edi, [edi+0]
.text:00406740
.text:00406740 loc_406740:                             ; CODE XREF: _strtoull+20C↓j
.text:00406740                 mov     ebp, [esp+3Ch+String]
.text:00406744                 mov     ebx, ds:__mb_cur_max
.text:0040674A                 movzx   edx, byte ptr [ebp+0]
.text:0040674E                 cmp     dword ptr [ebx], 1
.text:00406751                 movsx   ecx, dl
.text:00406754                 jz      loc_406915
.text:0040675A                 mov     [esp+3Ch+C], ecx ; C
.text:0040675D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00406765                 call    _isctype
.text:0040676A                 mov     ecx, [esp+3Ch+String]
.text:0040676E                 movzx   edx, byte ptr [ecx]
.text:00406771
.text:00406771 loc_406771:                             ; CODE XREF: _strtoull+317↓j
.text:00406771                 test    eax, eax
.text:00406773                 jz      loc_406880
.text:00406779                 movsx   edi, dl
.text:0040677C                 lea     ebp, [edi-30h]
.text:0040677F
.text:0040677F loc_40677F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0040677F                 test    ebp, ebp
.text:00406781                 js      loc_40682B
.text:00406787                 cmp     ebp, [esp+3Ch+Radix]
.text:0040678B                 jge     loc_40682B
.text:00406791                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00406798                 mov     eax, [esp+3Ch+Radix]
.text:0040679C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:004067A4                 cdq
.text:004067A5                 mov     esi, eax
.text:004067A7                 mov     [esp+3Ch+var_34], eax
.text:004067AB                 mov     edi, edx
.text:004067AD                 mov     [esp+3Ch+var_30], edx
.text:004067B1                 call    sub_406340
.text:004067B6                 add     eax, 1
.text:004067B9                 adc     edx, 0
.text:004067BC                 cmp     [esp+3Ch+var_18], edx
.text:004067C0                 ja      short loc_406810
.text:004067C2                 jb      short loc_4067CA
.text:004067C4                 cmp     [esp+3Ch+var_1C], eax
.text:004067C8                 ja      short loc_406810
.text:004067CA
.text:004067CA loc_4067CA:                             ; CODE XREF: _strtoull+1B2↑j
.text:004067CA                 mov     eax, [esp+3Ch+var_1C]
.text:004067CE                 mov     ebx, ebp
.text:004067D0                 mul     esi
.text:004067D2                 mov     ecx, edx
.text:004067D4                 mov     [esp+3Ch+var_2C], eax
.text:004067D8                 mov     eax, [esp+3Ch+var_18]
.text:004067DC                 mov     [esp+3Ch+var_28], edx
.text:004067E0                 imul    eax, esi
.text:004067E3                 mov     esi, [esp+3Ch+var_1C]
.text:004067E7                 imul    esi, edi
.text:004067EA                 add     ecx, eax
.text:004067EC                 lea     edi, [esi+ecx]
.text:004067EF                 mov     esi, ebp
.text:004067F1                 sar     esi, 1Fh
.text:004067F4                 add     ebx, [esp+3Ch+var_2C]
.text:004067F8                 mov     [esp+3Ch+var_28], edi
.text:004067FC                 adc     esi, [esp+3Ch+var_28]
.text:00406800                 cmp     esi, [esp+3Ch+var_18]
.text:00406804                 jb      short loc_406810
.text:00406806                 ja      short loc_406821
.text:00406808                 cmp     ebx, [esp+3Ch+var_1C]
.text:0040680C                 jnb     short loc_406821
.text:0040680E                 mov     esi, esi
.text:00406810
.text:00406810 loc_406810:                             ; CODE XREF: _strtoull+1B0↑j
.text:00406810                                         ; _strtoull+1B8↑j ...
.text:00406810                 mov     [esp+3Ch+var_24], 1
.text:00406818
.text:00406818 loc_406818:                             ; CODE XREF: _strtoull+219↓j
.text:00406818                 inc     [esp+3Ch+String]
.text:0040681C                 jmp     loc_406740
.text:00406821 ; ---------------------------------------------------------------------------
.text:00406821
.text:00406821 loc_406821:                             ; CODE XREF: _strtoull+1F6↑j
.text:00406821                                         ; _strtoull+1FC↑j
.text:00406821                 mov     [esp+3Ch+var_1C], ebx
.text:00406825                 mov     [esp+3Ch+var_18], esi
.text:00406829                 jmp     short loc_406818
.text:0040682B ; ---------------------------------------------------------------------------
.text:0040682B
.text:0040682B loc_40682B:                             ; CODE XREF: _strtoull+171↑j
.text:0040682B                                         ; _strtoull+17B↑j
.text:0040682B                 mov     eax, [esp+3Ch+EndPtr]
.text:0040682F                 test    eax, eax
.text:00406831                 jz      short loc_40683E
.text:00406833                 mov     ecx, [esp+3Ch+String]
.text:00406837                 mov     ebp, [esp+3Ch+EndPtr]
.text:0040683B                 mov     [ebp+0], ecx
.text:0040683E
.text:0040683E loc_40683E:                             ; CODE XREF: _strtoull+221↑j
.text:0040683E                 mov     esi, [esp+3Ch+var_24]
.text:00406842                 test    esi, esi
.text:00406844                 jnz     short loc_406866
.text:00406846                 mov     ebx, [esp+3Ch+var_20]
.text:0040684A                 mov     eax, [esp+3Ch+var_1C]
.text:0040684E                 mov     edx, [esp+3Ch+var_18]
.text:00406852                 test    ebx, ebx
.text:00406854                 jz      loc_40664E
.text:0040685A                 neg     eax
.text:0040685C                 adc     edx, 0
.text:0040685F                 neg     edx
.text:00406861                 jmp     loc_40664E
.text:00406866 ; ---------------------------------------------------------------------------
.text:00406866
.text:00406866 loc_406866:                             ; CODE XREF: _strtoull+234↑j
.text:00406866                 call    _errno
.text:0040686B                 mov     edx, 0FFFFFFFFh
.text:00406870                 mov     dword ptr [eax], 22h ; '"'
.text:00406876                 mov     eax, 0FFFFFFFFh
.text:0040687B                 jmp     loc_40664E
.text:00406880 ; ---------------------------------------------------------------------------
.text:00406880
.text:00406880 loc_406880:                             ; CODE XREF: _strtoull+163↑j
.text:00406880                 mov     ebp, ds:__mb_cur_max
.text:00406886                 movsx   ecx, dl
.text:00406889                 cmp     dword ptr [ebp+0], 1
.text:0040688D                 jz      short loc_406901
.text:0040688F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00406897                 mov     [esp+3Ch+C], ecx ; C
.text:0040689A                 call    _isctype
.text:0040689F                 mov     ebp, [esp+3Ch+String]
.text:004068A3                 movzx   edx, byte ptr [ebp+0]
.text:004068A7
.text:004068A7 loc_4068A7:                             ; CODE XREF: _strtoull+303↓j
.text:004068A7                 test    eax, eax
.text:004068A9                 jz      short loc_4068B8
.text:004068AB                 movsx   eax, dl
.text:004068AE                 sub     eax, 37h ; '7'
.text:004068B1
.text:004068B1 loc_4068B1:                             ; CODE XREF: _strtoull+2D4↓j
.text:004068B1                                         ; _strtoull+2DB↓j
.text:004068B1                 mov     ebp, eax
.text:004068B3                 jmp     loc_40677F
.text:004068B8 ; ---------------------------------------------------------------------------
.text:004068B8
.text:004068B8 loc_4068B8:                             ; CODE XREF: _strtoull+299↑j
.text:004068B8                 mov     ecx, ds:__mb_cur_max
.text:004068BE                 movsx   edx, dl
.text:004068C1                 cmp     dword ptr [ecx], 1
.text:004068C4                 jz      short loc_4068ED
.text:004068C6                 mov     [esp+3Ch+Type], 2 ; Type
.text:004068CE                 mov     [esp+3Ch+C], edx ; C
.text:004068D1                 call    _isctype
.text:004068D6
.text:004068D6 loc_4068D6:                             ; CODE XREF: _strtoull+2EF↓j
.text:004068D6                 test    eax, eax
.text:004068D8                 jz      short loc_4068E6
.text:004068DA                 mov     edx, [esp+3Ch+String]
.text:004068DE                 movsx   eax, byte ptr [edx]
.text:004068E1                 sub     eax, 57h ; 'W'
.text:004068E4                 jmp     short loc_4068B1
.text:004068E6 ; ---------------------------------------------------------------------------
.text:004068E6
.text:004068E6 loc_4068E6:                             ; CODE XREF: _strtoull+2C8↑j
.text:004068E6                 mov     eax, 0FFFFFFFFh
.text:004068EB                 jmp     short loc_4068B1
.text:004068ED ; ---------------------------------------------------------------------------
.text:004068ED
.text:004068ED loc_4068ED:                             ; CODE XREF: _strtoull+2B4↑j
.text:004068ED                 mov     edi, ds:_pctype
.text:004068F3                 mov     ebx, [edi]
.text:004068F5                 movzx   esi, word ptr [ebx+edx*2]
.text:004068F9                 and     esi, 2
.text:004068FC                 movzx   eax, si
.text:004068FF                 jmp     short loc_4068D6
.text:00406901 ; ---------------------------------------------------------------------------
.text:00406901
.text:00406901 loc_406901:                             ; CODE XREF: _strtoull+27D↑j
.text:00406901                 mov     edi, ds:_pctype
.text:00406907                 mov     ebx, [edi]
.text:00406909                 movzx   esi, word ptr [ebx+ecx*2]
.text:0040690D                 and     esi, 1
.text:00406910                 movzx   eax, si
.text:00406913                 jmp     short loc_4068A7
.text:00406915 ; ---------------------------------------------------------------------------
.text:00406915
.text:00406915 loc_406915:                             ; CODE XREF: _strtoull+144↑j
.text:00406915                 mov     ebx, ds:_pctype
.text:0040691B                 mov     esi, [ebx]
.text:0040691D                 movzx   edi, word ptr [esi+ecx*2]
.text:00406921                 and     edi, 4
.text:00406924                 movzx   eax, di
.text:00406927                 jmp     loc_406771
.text:0040692C ; ---------------------------------------------------------------------------
.text:0040692C
.text:0040692C loc_40692C:                             ; CODE XREF: _strtoull+ED↑j
.text:0040692C                 mov     ebx, ds:__mb_cur_max
.text:00406932                 movsx   ecx, dl
.text:00406935                 cmp     dword ptr [ebx], 1
.text:00406938                 jz      short loc_4069AF
.text:0040693A                 mov     [esp+3Ch+C], ecx ; C
.text:0040693D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00406945                 call    _isctype
.text:0040694A                 mov     ecx, [esp+3Ch+String]
.text:0040694E                 movzx   edx, byte ptr [ecx]
.text:00406951
.text:00406951 loc_406951:                             ; CODE XREF: _strtoull+3B1↓j
.text:00406951                 test    eax, eax
.text:00406953                 jz      short loc_406960
.text:00406955                 movsx   eax, dl
.text:00406958                 sub     eax, 37h ; '7'
.text:0040695B                 jmp     loc_406709
.text:00406960 ; ---------------------------------------------------------------------------
.text:00406960
.text:00406960 loc_406960:                             ; CODE XREF: _strtoull+343↑j
.text:00406960                 mov     ebx, ds:__mb_cur_max
.text:00406966                 movsx   edx, dl
.text:00406969                 cmp     dword ptr [ebx], 1
.text:0040696C                 jz      short loc_40699B
.text:0040696E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00406976                 mov     [esp+3Ch+C], edx ; C
.text:00406979                 call    _isctype
.text:0040697E
.text:0040697E loc_40697E:                             ; CODE XREF: _strtoull+39D↓j
.text:0040697E                 test    eax, eax
.text:00406980                 jz      short loc_406991
.text:00406982                 mov     ecx, [esp+3Ch+String]
.text:00406986                 movsx   eax, byte ptr [ecx]
.text:00406989                 sub     eax, 57h ; 'W'
.text:0040698C                 jmp     loc_406709
.text:00406991 ; ---------------------------------------------------------------------------
.text:00406991
.text:00406991 loc_406991:                             ; CODE XREF: _strtoull+370↑j
.text:00406991                 mov     eax, 0FFFFFFFFh
.text:00406996                 jmp     loc_406709
.text:0040699B ; ---------------------------------------------------------------------------
.text:0040699B
.text:0040699B loc_40699B:                             ; CODE XREF: _strtoull+35C↑j
.text:0040699B                 mov     esi, ds:_pctype
.text:004069A1                 mov     edi, [esi]
.text:004069A3                 movzx   ebp, word ptr [edi+edx*2]
.text:004069A7                 and     ebp, 2
.text:004069AA                 movzx   eax, bp
.text:004069AD                 jmp     short loc_40697E
.text:004069AF ; ---------------------------------------------------------------------------
.text:004069AF
.text:004069AF loc_4069AF:                             ; CODE XREF: _strtoull+328↑j
.text:004069AF                 mov     esi, ds:_pctype
.text:004069B5                 mov     edi, [esi]
.text:004069B7                 movzx   ebp, word ptr [edi+ecx*2]
.text:004069BB                 and     ebp, 1
.text:004069BE                 movzx   eax, bp
.text:004069C1                 jmp     short loc_406951
.text:004069C3 ; ---------------------------------------------------------------------------
.text:004069C3
.text:004069C3 loc_4069C3:                             ; CODE XREF: _strtoull+CE↑j
.text:004069C3                 mov     edi, ds:_pctype
.text:004069C9                 mov     ebp, [edi]
.text:004069CB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:004069D0                 and     ecx, 4
.text:004069D3                 movzx   eax, cx
.text:004069D6                 jmp     loc_4066FB
.text:004069DB ; ---------------------------------------------------------------------------
.text:004069DB
.text:004069DB loc_4069DB:                             ; CODE XREF: _strtoull+C2↑j
.text:004069DB                 cmp     dl, 30h ; '0'
.text:004069DE                 jnz     loc_4066D8
.text:004069E4                 mov     esi, [esp+3Ch+String]
.text:004069E8                 movzx   eax, byte ptr [esi+1]
.text:004069EC                 cmp     al, 58h ; 'X'
.text:004069EE                 jz      short loc_4069F8
.text:004069F0                 cmp     al, 78h ; 'x'
.text:004069F2                 jnz     loc_4066D8
.text:004069F8
.text:004069F8 loc_4069F8:                             ; CODE XREF: _strtoull+3DE↑j
.text:004069F8                 add     [esp+3Ch+String], 2
.text:004069FD                 mov     ebx, [esp+3Ch+String]
.text:00406A01                 movzx   edx, byte ptr [ebx]
.text:00406A04                 jmp     loc_4066D8
.text:00406A09 ; ---------------------------------------------------------------------------
.text:00406A09
.text:00406A09 loc_406A09:                             ; CODE XREF: _strtoull+AF↑j
.text:00406A09                 mov     edi, [esp+3Ch+String]
.text:00406A0D                 movzx   eax, byte ptr [edi+1]
.text:00406A11                 cmp     al, 58h ; 'X'
.text:00406A13                 jz      short loc_406A25
.text:00406A15                 mov     [esp+3Ch+Radix], 8
.text:00406A1D                 cmp     al, 78h ; 'x'
.text:00406A1F                 jnz     loc_4066CD
.text:00406A25
.text:00406A25 loc_406A25:                             ; CODE XREF: _strtoull+403↑j
.text:00406A25                 mov     [esp+3Ch+Radix], 10h
.text:00406A2D                 jmp     loc_4066CD
.text:00406A32 ; ---------------------------------------------------------------------------
.text:00406A32
.text:00406A32 loc_406A32:                             ; CODE XREF: _strtoull+95↑j
.text:00406A32                                         ; _strtoull+9E↑j
.text:00406A32                 inc     [esp+3Ch+String]
.text:00406A36                 mov     eax, [esp+3Ch+String]
.text:00406A3A                 movzx   edx, byte ptr [eax]
.text:00406A3D                 jmp     loc_4066B4
.text:00406A42 ; ---------------------------------------------------------------------------
.text:00406A42
.text:00406A42 loc_406A42:                             ; CODE XREF: _strtoull+5A↑j
.text:00406A42                 mov     ebp, ds:_pctype
.text:00406A48                 mov     edi, [ebp+0]
.text:00406A4B                 movzx   ebx, word ptr [edi+edx*2]
.text:00406A4F                 and     ebx, 8
.text:00406A52                 movzx   eax, bx
.text:00406A55                 jmp     loc_406686
.text:00406A55 _strtoull       endp
.text:00406A55
.text:00406A55 ; ---------------------------------------------------------------------------
.text:00406A5A                 align 10h
.text:00406A60                 jmp     ds:__set_app_type
.text:00406A60 ; ---------------------------------------------------------------------------
.text:00406A66                 align 10h
.text:00406A70
.text:00406A70 ; =============== S U B R O U T I N E =======================================
.text:00406A70
.text:00406A70 ; Attributes: thunk
.text:00406A70
.text:00406A70 ; void __cdecl cexit()
.text:00406A70 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00406A70                 jmp     ds:__imp__cexit
.text:00406A70 _cexit          endp
.text:00406A70
.text:00406A70 ; ---------------------------------------------------------------------------
.text:00406A76                 align 10h
.text:00406A80
.text:00406A80 ; =============== S U B R O U T I N E =======================================
.text:00406A80
.text:00406A80 ; Attributes: thunk
.text:00406A80
.text:00406A80 ; char ***__cdecl _p__environ()
.text:00406A80 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00406A80                 jmp     ds:__imp___p__environ
.text:00406A80 __p__environ    endp
.text:00406A80
.text:00406A80 ; ---------------------------------------------------------------------------
.text:00406A86                 align 10h
.text:00406A90
.text:00406A90 ; =============== S U B R O U T I N E =======================================
.text:00406A90
.text:00406A90 ; Attributes: thunk
.text:00406A90
.text:00406A90 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00406A90 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00406A90                                         ; TopLevelExceptionFilter+88↑p ...
.text:00406A90
.text:00406A90 Signal          = dword ptr  4
.text:00406A90 Function        = dword ptr  8
.text:00406A90
.text:00406A90                 jmp     ds:__imp_signal
.text:00406A90 signal          endp
.text:00406A90
.text:00406A90 ; ---------------------------------------------------------------------------
.text:00406A96                 align 10h
.text:00406AA0
.text:00406AA0 ; =============== S U B R O U T I N E =======================================
.text:00406AA0
.text:00406AA0 ; Attributes: thunk
.text:00406AA0
.text:00406AA0 ; int *__cdecl _p__fmode()
.text:00406AA0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00406AA0                 jmp     ds:__imp___p__fmode
.text:00406AA0 __p__fmode      endp
.text:00406AA0
.text:00406AA0 ; ---------------------------------------------------------------------------
.text:00406AA6                 align 10h
.text:00406AB0
.text:00406AB0 ; =============== S U B R O U T I N E =======================================
.text:00406AB0
.text:00406AB0 ; Attributes: thunk
.text:00406AB0
.text:00406AB0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00406AB0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00406AB0                                         ; sub_401080+90↑p ...
.text:00406AB0
.text:00406AB0 FileHandle      = dword ptr  4
.text:00406AB0 Mode            = dword ptr  8
.text:00406AB0
.text:00406AB0                 jmp     ds:__imp__setmode
.text:00406AB0 _setmode        endp
.text:00406AB0
.text:00406AB0 ; ---------------------------------------------------------------------------
.text:00406AB6                 align 10h
.text:00406AC0
.text:00406AC0 ; =============== S U B R O U T I N E =======================================
.text:00406AC0
.text:00406AC0 ; Attributes: thunk
.text:00406AC0
.text:00406AC0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00406AC0                 jmp     ds:__imp___getmainargs
.text:00406AC0 __getmainargs   endp
.text:00406AC0
.text:00406AC0 ; ---------------------------------------------------------------------------
.text:00406AC6                 align 10h
.text:00406AD0
.text:00406AD0 ; =============== S U B R O U T I N E =======================================
.text:00406AD0
.text:00406AD0 ; Attributes: thunk
.text:00406AD0
.text:00406AD0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00406AD0 setlocale       proc near               ; CODE XREF: sub_401560+35↑p
.text:00406AD0
.text:00406AD0 Category        = dword ptr  4
.text:00406AD0 Locale          = dword ptr  8
.text:00406AD0
.text:00406AD0                 jmp     ds:__imp_setlocale
.text:00406AD0 setlocale       endp
.text:00406AD0
.text:00406AD0 ; ---------------------------------------------------------------------------
.text:00406AD6                 align 10h
.text:00406AE0
.text:00406AE0 ; =============== S U B R O U T I N E =======================================
.text:00406AE0
.text:00406AE0 ; Attributes: thunk
.text:00406AE0
.text:00406AE0 ; void __cdecl free(void *Block)
.text:00406AE0 free            proc near               ; CODE XREF: sub_401560+461↑p
.text:00406AE0                                         ; .text:00403530↑p ...
.text:00406AE0
.text:00406AE0 Block           = dword ptr  4
.text:00406AE0
.text:00406AE0                 jmp     ds:__imp_free
.text:00406AE0 free            endp
.text:00406AE0
.text:00406AE0 ; ---------------------------------------------------------------------------
.text:00406AE6                 align 10h
.text:00406AF0
.text:00406AF0 ; =============== S U B R O U T I N E =======================================
.text:00406AF0
.text:00406AF0 ; Attributes: noreturn thunk
.text:00406AF0
.text:00406AF0 _assert         proc near               ; CODE XREF: sub_401D10+1C3↑p
.text:00406AF0                                         ; sub_4036A0+C88↑p
.text:00406AF0                 jmp     ds:__imp__assert
.text:00406AF0 _assert         endp
.text:00406AF0
.text:00406AF0 ; ---------------------------------------------------------------------------
.text:00406AF6                 align 10h
.text:00406B00
.text:00406B00 ; =============== S U B R O U T I N E =======================================
.text:00406B00
.text:00406B00 ; Attributes: noreturn thunk
.text:00406B00
.text:00406B00 ; void __cdecl __noreturn exit(int Code)
.text:00406B00 exit            proc near               ; CODE XREF: sub_401560:loc_401733↑p
.text:00406B00                                         ; sub_401BB0+3E↑p ...
.text:00406B00
.text:00406B00 Code            = dword ptr  4
.text:00406B00
.text:00406B00                 jmp     ds:__imp_exit
.text:00406B00 exit            endp
.text:00406B00
.text:00406B00 ; ---------------------------------------------------------------------------
.text:00406B06                 align 10h
.text:00406B10
.text:00406B10 ; =============== S U B R O U T I N E =======================================
.text:00406B10
.text:00406B10 ; Attributes: thunk
.text:00406B10
.text:00406B10 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00406B10 fputs           proc near               ; CODE XREF: sub_401BB0+83↑p
.text:00406B10                                         ; sub_401BB0+A5↑p ...
.text:00406B10
.text:00406B10 Buffer          = dword ptr  4
.text:00406B10 Stream          = dword ptr  8
.text:00406B10
.text:00406B10                 jmp     ds:__imp_fputs
.text:00406B10 fputs           endp
.text:00406B10
.text:00406B10 ; ---------------------------------------------------------------------------
.text:00406B16                 align 10h
.text:00406B20
.text:00406B20 ; =============== S U B R O U T I N E =======================================
.text:00406B20
.text:00406B20 ; Attributes: thunk
.text:00406B20
.text:00406B20 ; int printf(const char *const Format, ...)
.text:00406B20 printf          proc near               ; CODE XREF: sub_401560+193↑p
.text:00406B20                                         ; sub_401560+223↑p ...
.text:00406B20
.text:00406B20 Format          = dword ptr  4
.text:00406B20
.text:00406B20                 jmp     ds:__imp_printf
.text:00406B20 printf          endp
.text:00406B20
.text:00406B20 ; ---------------------------------------------------------------------------
.text:00406B26                 align 10h
.text:00406B30
.text:00406B30 ; =============== S U B R O U T I N E =======================================
.text:00406B30
.text:00406B30 ; Attributes: thunk
.text:00406B30
.text:00406B30 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00406B30 fprintf         proc near               ; CODE XREF: sub_401560+284↑p
.text:00406B30                                         ; sub_401BB0+36↑p ...
.text:00406B30
.text:00406B30 Stream          = dword ptr  4
.text:00406B30 Format          = dword ptr  8
.text:00406B30
.text:00406B30                 jmp     ds:__imp_fprintf
.text:00406B30 fprintf         endp
.text:00406B30
.text:00406B30 ; ---------------------------------------------------------------------------
.text:00406B36                 align 10h
.text:00406B40
.text:00406B40 ; =============== S U B R O U T I N E =======================================
.text:00406B40
.text:00406B40 ; Attributes: thunk
.text:00406B40
.text:00406B40 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00406B40 _flsbuf         proc near               ; CODE XREF: sub_401560+1EC↑p
.text:00406B40                                         ; sub_401560+415↑p ...
.text:00406B40
.text:00406B40 File            = dword ptr  8
.text:00406B40
.text:00406B40                 jmp     ds:__imp__flsbuf
.text:00406B40 _flsbuf         endp
.text:00406B40
.text:00406B40 ; ---------------------------------------------------------------------------
.text:00406B46                 align 10h
.text:00406B50
.text:00406B50 ; =============== S U B R O U T I N E =======================================
.text:00406B50
.text:00406B50 ; Attributes: thunk
.text:00406B50
.text:00406B50 ; size_t __cdecl strlen(const char *Str)
.text:00406B50 strlen          proc near               ; CODE XREF: sub_402150+2A9↑p
.text:00406B50                                         ; sub_402150+346↑p ...
.text:00406B50
.text:00406B50 Str             = dword ptr  4
.text:00406B50
.text:00406B50                 jmp     ds:__imp_strlen
.text:00406B50 strlen          endp
.text:00406B50
.text:00406B50 ; ---------------------------------------------------------------------------
.text:00406B56                 align 10h
.text:00406B60
.text:00406B60 ; =============== S U B R O U T I N E =======================================
.text:00406B60
.text:00406B60 ; Attributes: thunk
.text:00406B60
.text:00406B60 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00406B60 strncmp         proc near               ; CODE XREF: sub_402150+23F↑p
.text:00406B60                                         ; sub_402150+699↑p
.text:00406B60
.text:00406B60 Str1            = dword ptr  4
.text:00406B60 Str2            = dword ptr  8
.text:00406B60 MaxCount        = dword ptr  0Ch
.text:00406B60
.text:00406B60                 jmp     ds:__imp_strncmp
.text:00406B60 strncmp         endp
.text:00406B60
.text:00406B60 ; ---------------------------------------------------------------------------
.text:00406B66                 align 10h
.text:00406B70
.text:00406B70 ; =============== S U B R O U T I N E =======================================
.text:00406B70
.text:00406B70 ; Attributes: thunk
.text:00406B70
.text:00406B70 ; char *__cdecl getenv(const char *VarName)
.text:00406B70 getenv          proc near               ; CODE XREF: sub_402150+B57↑p
.text:00406B70
.text:00406B70 VarName         = dword ptr  4
.text:00406B70
.text:00406B70                 jmp     ds:__imp_getenv
.text:00406B70 getenv          endp
.text:00406B70
.text:00406B70 ; ---------------------------------------------------------------------------
.text:00406B76                 align 10h
.text:00406B80
.text:00406B80 ; =============== S U B R O U T I N E =======================================
.text:00406B80
.text:00406B80 ; Attributes: thunk
.text:00406B80
.text:00406B80 ; char *__cdecl strchr(const char *Str, int Val)
.text:00406B80 strchr          proc near               ; CODE XREF: sub_402150+469↑p
.text:00406B80                                         ; sub_402150+53A↑p ...
.text:00406B80
.text:00406B80 Str             = dword ptr  4
.text:00406B80 Val             = dword ptr  8
.text:00406B80
.text:00406B80                 jmp     ds:__imp_strchr
.text:00406B80 strchr          endp
.text:00406B80
.text:00406B80 ; ---------------------------------------------------------------------------
.text:00406B86                 align 10h
.text:00406B90
.text:00406B90 ; =============== S U B R O U T I N E =======================================
.text:00406B90
.text:00406B90 ; Attributes: thunk
.text:00406B90
.text:00406B90 ; int *__cdecl errno()
.text:00406B90 _errno          proc near               ; CODE XREF: sub_4031B0:loc_4031ED↑p
.text:00406B90                                         ; sub_4036A0+97↑p ...
.text:00406B90                 jmp     ds:__imp__errno
.text:00406B90 _errno          endp
.text:00406B90
.text:00406B90 ; ---------------------------------------------------------------------------
.text:00406B96                 align 10h
.text:00406BA0
.text:00406BA0 ; =============== S U B R O U T I N E =======================================
.text:00406BA0
.text:00406BA0 ; Attributes: thunk
.text:00406BA0
.text:00406BA0 ; int __cdecl fclose(FILE *Stream)
.text:00406BA0 fclose          proc near               ; CODE XREF: sub_4031B0+27↑p
.text:00406BA0
.text:00406BA0 Stream          = dword ptr  4
.text:00406BA0
.text:00406BA0                 jmp     ds:__imp_fclose
.text:00406BA0 fclose          endp
.text:00406BA0
.text:00406BA0 ; ---------------------------------------------------------------------------
.text:00406BA6                 align 10h
.text:00406BB0
.text:00406BB0 ; =============== S U B R O U T I N E =======================================
.text:00406BB0
.text:00406BB0 ; Attributes: thunk
.text:00406BB0
.text:00406BB0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00406BB0 memcpy          proc near               ; CODE XREF: .text:00403507↑p
.text:00406BB0                                         ; .text:00405DB8↑p ...
.text:00406BB0
.text:00406BB0 Src             = dword ptr  8
.text:00406BB0 Size            = dword ptr  0Ch
.text:00406BB0
.text:00406BB0                 jmp     ds:__imp_memcpy
.text:00406BB0 memcpy          endp
.text:00406BB0
.text:00406BB0 ; ---------------------------------------------------------------------------
.text:00406BB6                 align 10h
.text:00406BC0
.text:00406BC0 ; =============== S U B R O U T I N E =======================================
.text:00406BC0
.text:00406BC0 ; Attributes: noreturn thunk
.text:00406BC0
.text:00406BC0 ; void __cdecl __noreturn abort()
.text:00406BC0 abort           proc near               ; CODE XREF: sub_403290+1B2↑p
.text:00406BC0                                         ; sub_404620:loc_4046BC↑p ...
.text:00406BC0                 jmp     ds:__imp_abort
.text:00406BC0 abort           endp
.text:00406BC0
.text:00406BC0 ; ---------------------------------------------------------------------------
.text:00406BC6                 align 10h
.text:00406BD0
.text:00406BD0 ; =============== S U B R O U T I N E =======================================
.text:00406BD0
.text:00406BD0 ; Attributes: thunk
.text:00406BD0
.text:00406BD0 ; int __cdecl filbuf(FILE *File)
.text:00406BD0 _filbuf         proc near               ; CODE XREF: sub_403290+125↑p
.text:00406BD0                                         ; sub_403290+182↑p ...
.text:00406BD0
.text:00406BD0 File            = dword ptr  4
.text:00406BD0
.text:00406BD0                 jmp     ds:__imp__filbuf
.text:00406BD0 _filbuf         endp
.text:00406BD0
.text:00406BD0 ; ---------------------------------------------------------------------------
.text:00406BD6                 align 10h
.text:00406BE0
.text:00406BE0 ; =============== S U B R O U T I N E =======================================
.text:00406BE0
.text:00406BE0 ; Attributes: thunk
.text:00406BE0
.text:00406BE0 ; int __cdecl isctype(int C, int Type)
.text:00406BE0 _isctype        proc near               ; CODE XREF: sub_4036A0+72↑p
.text:00406BE0                                         ; sub_4048C0+610↑p ...
.text:00406BE0
.text:00406BE0 C               = dword ptr  4
.text:00406BE0 Type            = dword ptr  8
.text:00406BE0
.text:00406BE0                 jmp     ds:__imp__isctype
.text:00406BE0 _isctype        endp
.text:00406BE0
.text:00406BE0 ; ---------------------------------------------------------------------------
.text:00406BE6                 align 10h
.text:00406BF0
.text:00406BF0 ; =============== S U B R O U T I N E =======================================
.text:00406BF0
.text:00406BF0 ; Attributes: thunk
.text:00406BF0
.text:00406BF0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00406BF0 vfprintf        proc near               ; CODE XREF: sub_404620+C1↑p
.text:00406BF0                                         ; sub_405F50+49↑p ...
.text:00406BF0
.text:00406BF0 Stream          = dword ptr  4
.text:00406BF0 Format          = dword ptr  8
.text:00406BF0 ArgList         = dword ptr  0Ch
.text:00406BF0
.text:00406BF0                 jmp     ds:__imp_vfprintf
.text:00406BF0 vfprintf        endp
.text:00406BF0
.text:00406BF0 ; ---------------------------------------------------------------------------
.text:00406BF6                 align 10h
.text:00406C00
.text:00406C00 ; =============== S U B R O U T I N E =======================================
.text:00406C00
.text:00406C00 ; Attributes: thunk
.text:00406C00
.text:00406C00 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00406C00 iswctype        proc near               ; CODE XREF: sub_4048C0+78B↑p
.text:00406C00
.text:00406C00 C               = word ptr  4
.text:00406C00 Type            = word ptr  8
.text:00406C00
.text:00406C00                 jmp     ds:__imp_iswctype
.text:00406C00 iswctype        endp
.text:00406C00
.text:00406C00 ; ---------------------------------------------------------------------------
.text:00406C06                 align 10h
.text:00406C10
.text:00406C10 ; =============== S U B R O U T I N E =======================================
.text:00406C10
.text:00406C10 ; Attributes: thunk
.text:00406C10
.text:00406C10 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00406C10 memset          proc near               ; CODE XREF: .text:00405D36↑p
.text:00406C10
.text:00406C10 Val             = dword ptr  8
.text:00406C10 Size            = dword ptr  0Ch
.text:00406C10
.text:00406C10                 jmp     ds:__imp_memset
.text:00406C10 memset          endp
.text:00406C10
.text:00406C10 ; ---------------------------------------------------------------------------
.text:00406C16                 align 10h
.text:00406C20
.text:00406C20 ; =============== S U B R O U T I N E =======================================
.text:00406C20
.text:00406C20 ; Attributes: thunk
.text:00406C20
.text:00406C20 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00406C20 calloc          proc near               ; CODE XREF: .text:00405D73↑p
.text:00406C20
.text:00406C20 Count           = dword ptr  4
.text:00406C20 Size            = dword ptr  8
.text:00406C20
.text:00406C20                 jmp     ds:__imp_calloc
.text:00406C20 calloc          endp
.text:00406C20
.text:00406C20 ; ---------------------------------------------------------------------------
.text:00406C26                 align 10h
.text:00406C30
.text:00406C30 ; =============== S U B R O U T I N E =======================================
.text:00406C30
.text:00406C30 ; Attributes: thunk
.text:00406C30
.text:00406C30 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00406C30 realloc         proc near               ; CODE XREF: sub_405C40+30↑p
.text:00406C30                                         ; sub_405CA0+16↑p ...
.text:00406C30
.text:00406C30 Block           = dword ptr  4
.text:00406C30 Size            = dword ptr  8
.text:00406C30
.text:00406C30                 jmp     ds:__imp_realloc
.text:00406C30 realloc         endp
.text:00406C30
.text:00406C30 ; ---------------------------------------------------------------------------
.text:00406C36                 align 10h
.text:00406C40
.text:00406C40 ; =============== S U B R O U T I N E =======================================
.text:00406C40
.text:00406C40 ; Attributes: thunk
.text:00406C40
.text:00406C40 ; void *__cdecl malloc(size_t Size)
.text:00406C40 malloc          proc near               ; CODE XREF: sub_405BD0+24↑p
.text:00406C40                                         ; sub_405C10+E↑p ...
.text:00406C40
.text:00406C40 Size            = dword ptr  4
.text:00406C40
.text:00406C40                 jmp     ds:__imp_malloc
.text:00406C40 malloc          endp
.text:00406C40
.text:00406C40 ; ---------------------------------------------------------------------------
.text:00406C46                 align 10h
.text:00406C50
.text:00406C50 ; =============== S U B R O U T I N E =======================================
.text:00406C50
.text:00406C50 ; Attributes: thunk
.text:00406C50
.text:00406C50 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00406C50 strcmp          proc near               ; CODE XREF: sub_406054+180↑p
.text:00406C50
.text:00406C50 Str1            = dword ptr  4
.text:00406C50 Str2            = dword ptr  8
.text:00406C50
.text:00406C50                 jmp     ds:__imp_strcmp
.text:00406C50 strcmp          endp
.text:00406C50
.text:00406C50 ; ---------------------------------------------------------------------------
.text:00406C56                 align 10h
.text:00406C60
.text:00406C60 ; =============== S U B R O U T I N E =======================================
.text:00406C60
.text:00406C60 ; Attributes: thunk
.text:00406C60
.text:00406C60 ; int __cdecl fflush(FILE *Stream)
.text:00406C60 fflush          proc near               ; CODE XREF: sub_405F50+19↑p
.text:00406C60                                         ; sub_405F50+81↑p ...
.text:00406C60
.text:00406C60 Stream          = dword ptr  4
.text:00406C60
.text:00406C60                 jmp     ds:__imp_fflush
.text:00406C60 fflush          endp
.text:00406C60
.text:00406C60 ; ---------------------------------------------------------------------------
.text:00406C66                 align 10h
.text:00406C70
.text:00406C70 ; =============== S U B R O U T I N E =======================================
.text:00406C70
.text:00406C70 ; Attributes: thunk
.text:00406C70
.text:00406C70 ; char *__cdecl strerror(int ErrorMessage)
.text:00406C70 strerror        proc near               ; CODE XREF: sub_405F50+A5↑p
.text:00406C70                                         ; sub_406054+10F↑p
.text:00406C70
.text:00406C70 ErrorMessage    = dword ptr  4
.text:00406C70
.text:00406C70                 jmp     ds:__imp_strerror
.text:00406C70 strerror        endp
.text:00406C70
.text:00406C70 ; ---------------------------------------------------------------------------
.text:00406C76                 align 10h
.text:00406C80
.text:00406C80 ; =============== S U B R O U T I N E =======================================
.text:00406C80
.text:00406C80 ; Attributes: thunk
.text:00406C80
.text:00406C80 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00406C80 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00406C80
.text:00406C80 lpTopLevelExceptionFilter= dword ptr  4
.text:00406C80
.text:00406C80                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00406C80 SetUnhandledExceptionFilter endp
.text:00406C80
.text:00406C80 ; ---------------------------------------------------------------------------
.text:00406C86                 align 10h
.text:00406C90
.text:00406C90 ; =============== S U B R O U T I N E =======================================
.text:00406C90
.text:00406C90 ; Attributes: noreturn thunk
.text:00406C90
.text:00406C90 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00406C90 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00406C90
.text:00406C90 uExitCode       = dword ptr  4
.text:00406C90
.text:00406C90                 jmp     ds:__imp_ExitProcess
.text:00406C90 ExitProcess     endp
.text:00406C90
.text:00406C90 ; ---------------------------------------------------------------------------
.text:00406C96                 align 10h
.text:00406CA0 dword_406CA0    dd 0FFFFFFFFh           ; DATA XREF: .text:00406279↑r
.text:00406CA0                                         ; .text:loc_4062A0↑r ...
.text:00406CA4 dword_406CA4    dd 0                    ; DATA XREF: .text:loc_4062AC↑r
.text:00406CA4                                         ; sub_4062D0:loc_40631D↑r
.text:00406CA8                 dd 0FFFFFFFFh
.text:00406CAC dword_406CAC    dd 55h dup(0)           ; DATA XREF: .data:off_407084↓o
.text:00406E00                 dd 80h dup(?)
.text:00406E00 _text           ends
.text:00406E00
.data:00407000 ; Section 2. (virtual address 00007000)
.data:00407000 ; Virtual size                  : 000000A0 (    160.)
.data:00407000 ; Section size in file          : 00000200 (    512.)
.data:00407000 ; Offset to raw data for section: 00006200
.data:00407000 ; Flags C0000040: Data Readable Writable
.data:00407000 ; Alignment     : default
.data:00407000 ; ===========================================================================
.data:00407000
.data:00407000 ; Segment type: Pure data
.data:00407000 ; Segment permissions: Read/Write
.data:00407000 _data           segment para public 'DATA' use32
.data:00407000                 assume cs:_data
.data:00407000                 ;org 407000h
.data:00407000 dword_407000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00407000                                         ; sub_401080+CC↑r
.data:00407004 dword_407004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00407004                                         ; sub_401080+D4↑r
.data:00407008                 align 10h
.data:00407010 dword_407010    dd 1                    ; DATA XREF: sub_401560+DB↑r
.data:00407010                                         ; sub_402CE0+3↑r ...
.data:00407014 dword_407014    dd 1                    ; DATA XREF: sub_402CE0+11↑r
.data:00407014                                         ; .text:00402D81↑r ...
.data:00407018 dword_407018    dd 3Fh                  ; DATA XREF: sub_402CE0+7D↑w
.data:00407018                                         ; .text:00402DED↑w
.data:0040701C                 align 10h
.data:00407020 ; char *Buffer
.data:00407020 Buffer          dd offset aCopyrightC2005
.data:00407020                                         ; DATA XREF: sub_404620+DC↑r
.data:00407020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00407024                 align 10h
.data:00407030 ; int Code
.data:00407030 Code            dd 1                    ; DATA XREF: sub_4031B0+6D↑r
.data:00407030                                         ; sub_4031B0+9A↑r ...
.data:00407034                 align 10h
.data:00407040 dword_407040    dd 1                    ; DATA XREF: sub_405A00+22↑r
.data:00407040                                         ; sub_405A00+65↑r ...
.data:00407044 dword_407044    dd 100h                 ; DATA XREF: sub_405A00+3F↑o
.data:00407044                                         ; sub_405A00+1A2↑r ...
.data:00407048 off_407048      dd offset unk_408150    ; DATA XREF: sub_405A00+1AA↑r
.data:0040704C ; void *off_40704C
.data:0040704C off_40704C      dd offset dword_407044  ; DATA XREF: sub_405A00+39↑r
.data:0040704C                                         ; sub_405A00+60↑w ...
.data:00407050 dword_407050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00407054                 align 10h
.data:00407060 ; int Mode
.data:00407060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00407060                                         ; sub_401080+80↑r ...
.data:00407064                 align 10h
.data:00407070 dword_407070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00407070                                         ; sub_401080+BA↑r
.data:00407074                 align 10h
.data:00407080 dword_407080    dd 0                    ; DATA XREF: sub_4062D0+9↑r
.data:00407080                                         ; sub_4062D0+1D↑w
.data:00407084 off_407084      dd offset dword_406CAC  ; DATA XREF: sub_406240+6↑r
.data:00407084                                         ; sub_406240+17↑r ...
.data:00407088                 align 1000h
.data:00407088 _data           ends
.data:00407088
.bss:00408000 ; Section 3. (virtual address 00008000)
.bss:00408000 ; Virtual size                  : 00000340 (    832.)
.bss:00408000 ; Section size in file          : 00000000 (      0.)
.bss:00408000 ; Offset to raw data for section: 00000000
.bss:00408000 ; Flags C0000080: Bss Readable Writable
.bss:00408000 ; Alignment     : default
.bss:00408000 ; ===========================================================================
.bss:00408000
.bss:00408000 ; Segment type: Uninitialized
.bss:00408000 ; Segment permissions: Read/Write
.bss:00408000 _bss            segment para public 'BSS' use32
.bss:00408000                 assume cs:_bss
.bss:00408000                 ;org 408000h
.bss:00408000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00408000 dword_408000    dd ?                    ; DATA XREF: sub_402CE0+9↑o
.bss:00408000                                         ; sub_402CE0+17↑w ...
.bss:00408004 dword_408004    dd ?                    ; DATA XREF: sub_402CE0+21↑w
.bss:00408004                                         ; .text:00402D99↑w
.bss:00408008 dword_408008    dd ?                    ; DATA XREF: sub_402CE0+77↑r
.bss:00408008                                         ; .text:00402DE7↑r
.bss:0040800C dword_40800C    dd ?                    ; DATA XREF: sub_402CE0+6B↑r
.bss:0040800C                                         ; .text:00402DDB↑r
.bss:00408010                 db    ? ;
.bss:00408011                 db    ? ;
.bss:00408012                 db    ? ;
.bss:00408013                 db    ? ;
.bss:00408014                 db    ? ;
.bss:00408015                 db    ? ;
.bss:00408016                 db    ? ;
.bss:00408017                 db    ? ;
.bss:00408018                 db    ? ;
.bss:00408019                 db    ? ;
.bss:0040801A                 db    ? ;
.bss:0040801B                 db    ? ;
.bss:0040801C                 db    ? ;
.bss:0040801D                 db    ? ;
.bss:0040801E                 db    ? ;
.bss:0040801F                 db    ? ;
.bss:00408020                 db    ? ;
.bss:00408021                 db    ? ;
.bss:00408022                 db    ? ;
.bss:00408023                 db    ? ;
.bss:00408024                 db    ? ;
.bss:00408025                 db    ? ;
.bss:00408026                 db    ? ;
.bss:00408027                 db    ? ;
.bss:00408028                 db    ? ;
.bss:00408029                 db    ? ;
.bss:0040802A                 db    ? ;
.bss:0040802B                 db    ? ;
.bss:0040802C                 db    ? ;
.bss:0040802D                 db    ? ;
.bss:0040802E                 db    ? ;
.bss:0040802F                 db    ? ;
.bss:00408030 ; char *dword_408030
.bss:00408030 dword_408030    dd ?                    ; DATA XREF: .text:00403184↑w
.bss:00408030                                         ; sub_4031B0+58↑r
.bss:00408034                 align 10h
.bss:00408040 dword_408040    dd ?                    ; DATA XREF: sub_403290+17↑r
.bss:00408040                                         ; sub_403290+4B↑w ...
.bss:00408044                 align 10h
.bss:00408050 byte_408050     db ?                    ; DATA XREF: sub_403290+51↑o
.bss:00408050                                         ; sub_403290+79↑w ...
.bss:00408051                 db    ? ;
.bss:00408052                 db    ? ;
.bss:00408053                 db    ? ;
.bss:00408054                 db    ? ;
.bss:00408055                 db    ? ;
.bss:00408056                 db    ? ;
.bss:00408057                 db    ? ;
.bss:00408058                 db    ? ;
.bss:00408059                 db    ? ;
.bss:0040805A                 db    ? ;
.bss:0040805B                 db    ? ;
.bss:0040805C                 db    ? ;
.bss:0040805D                 db    ? ;
.bss:0040805E                 db    ? ;
.bss:0040805F                 db    ? ;
.bss:00408060                 db    ? ;
.bss:00408061                 db    ? ;
.bss:00408062                 db    ? ;
.bss:00408063                 db    ? ;
.bss:00408064                 db    ? ;
.bss:00408065                 db    ? ;
.bss:00408066                 db    ? ;
.bss:00408067                 db    ? ;
.bss:00408068                 db    ? ;
.bss:00408069                 db    ? ;
.bss:0040806A                 db    ? ;
.bss:0040806B                 db    ? ;
.bss:0040806C                 db    ? ;
.bss:0040806D                 db    ? ;
.bss:0040806E                 db    ? ;
.bss:0040806F                 db    ? ;
.bss:00408070                 db    ? ;
.bss:00408071                 db    ? ;
.bss:00408072                 db    ? ;
.bss:00408073                 db    ? ;
.bss:00408074                 db    ? ;
.bss:00408075                 db    ? ;
.bss:00408076                 db    ? ;
.bss:00408077                 db    ? ;
.bss:00408078                 db    ? ;
.bss:00408079                 db    ? ;
.bss:0040807A                 db    ? ;
.bss:0040807B                 db    ? ;
.bss:0040807C                 db    ? ;
.bss:0040807D                 db    ? ;
.bss:0040807E                 db    ? ;
.bss:0040807F                 db    ? ;
.bss:00408080                 db    ? ;
.bss:00408081                 db    ? ;
.bss:00408082                 db    ? ;
.bss:00408083                 db    ? ;
.bss:00408084                 db    ? ;
.bss:00408085                 db    ? ;
.bss:00408086                 db    ? ;
.bss:00408087                 db    ? ;
.bss:00408088                 db    ? ;
.bss:00408089                 db    ? ;
.bss:0040808A                 db    ? ;
.bss:0040808B                 db    ? ;
.bss:0040808C                 db    ? ;
.bss:0040808D                 db    ? ;
.bss:0040808E                 db    ? ;
.bss:0040808F                 db    ? ;
.bss:00408090                 db    ? ;
.bss:00408091                 db    ? ;
.bss:00408092                 db    ? ;
.bss:00408093                 db    ? ;
.bss:00408094                 db    ? ;
.bss:00408095                 db    ? ;
.bss:00408096                 db    ? ;
.bss:00408097                 db    ? ;
.bss:00408098                 db    ? ;
.bss:00408099                 db    ? ;
.bss:0040809A                 db    ? ;
.bss:0040809B                 db    ? ;
.bss:0040809C                 db    ? ;
.bss:0040809D                 db    ? ;
.bss:0040809E                 db    ? ;
.bss:0040809F                 db    ? ;
.bss:004080A0                 db    ? ;
.bss:004080A1                 db    ? ;
.bss:004080A2                 db    ? ;
.bss:004080A3                 db    ? ;
.bss:004080A4                 db    ? ;
.bss:004080A5                 db    ? ;
.bss:004080A6                 db    ? ;
.bss:004080A7                 db    ? ;
.bss:004080A8                 db    ? ;
.bss:004080A9                 db    ? ;
.bss:004080AA                 db    ? ;
.bss:004080AB                 db    ? ;
.bss:004080AC                 db    ? ;
.bss:004080AD                 db    ? ;
.bss:004080AE                 db    ? ;
.bss:004080AF                 db    ? ;
.bss:004080B0                 db    ? ;
.bss:004080B1                 db    ? ;
.bss:004080B2                 db    ? ;
.bss:004080B3                 db    ? ;
.bss:004080B4                 db    ? ;
.bss:004080B5                 db    ? ;
.bss:004080B6                 db    ? ;
.bss:004080B7                 db    ? ;
.bss:004080B8                 db    ? ;
.bss:004080B9                 db    ? ;
.bss:004080BA                 db    ? ;
.bss:004080BB                 db    ? ;
.bss:004080BC                 db    ? ;
.bss:004080BD                 db    ? ;
.bss:004080BE                 db    ? ;
.bss:004080BF                 db    ? ;
.bss:004080C0                 db    ? ;
.bss:004080C1                 db    ? ;
.bss:004080C2                 db    ? ;
.bss:004080C3                 db    ? ;
.bss:004080C4                 db    ? ;
.bss:004080C5                 db    ? ;
.bss:004080C6                 db    ? ;
.bss:004080C7                 db    ? ;
.bss:004080C8                 db    ? ;
.bss:004080C9                 db    ? ;
.bss:004080CA                 db    ? ;
.bss:004080CB                 db    ? ;
.bss:004080CC                 db    ? ;
.bss:004080CD                 db    ? ;
.bss:004080CE                 db    ? ;
.bss:004080CF                 db    ? ;
.bss:004080D0                 db    ? ;
.bss:004080D1                 db    ? ;
.bss:004080D2                 db    ? ;
.bss:004080D3                 db    ? ;
.bss:004080D4                 db    ? ;
.bss:004080D5                 db    ? ;
.bss:004080D6                 db    ? ;
.bss:004080D7                 db    ? ;
.bss:004080D8                 db    ? ;
.bss:004080D9                 db    ? ;
.bss:004080DA                 db    ? ;
.bss:004080DB                 db    ? ;
.bss:004080DC                 db    ? ;
.bss:004080DD                 db    ? ;
.bss:004080DE                 db    ? ;
.bss:004080DF                 db    ? ;
.bss:004080E0                 db    ? ;
.bss:004080E1                 db    ? ;
.bss:004080E2                 db    ? ;
.bss:004080E3                 db    ? ;
.bss:004080E4                 db    ? ;
.bss:004080E5                 db    ? ;
.bss:004080E6                 db    ? ;
.bss:004080E7                 db    ? ;
.bss:004080E8                 db    ? ;
.bss:004080E9                 db    ? ;
.bss:004080EA                 db    ? ;
.bss:004080EB                 db    ? ;
.bss:004080EC                 db    ? ;
.bss:004080ED                 db    ? ;
.bss:004080EE                 db    ? ;
.bss:004080EF                 db    ? ;
.bss:004080F0                 db    ? ;
.bss:004080F1                 db    ? ;
.bss:004080F2                 db    ? ;
.bss:004080F3                 db    ? ;
.bss:004080F4                 db    ? ;
.bss:004080F5                 db    ? ;
.bss:004080F6                 db    ? ;
.bss:004080F7                 db    ? ;
.bss:004080F8                 db    ? ;
.bss:004080F9                 db    ? ;
.bss:004080FA                 db    ? ;
.bss:004080FB                 db    ? ;
.bss:004080FC                 db    ? ;
.bss:004080FD                 db    ? ;
.bss:004080FE                 db    ? ;
.bss:004080FF                 db    ? ;
.bss:00408100                 db    ? ;
.bss:00408101                 db    ? ;
.bss:00408102                 db    ? ;
.bss:00408103                 db    ? ;
.bss:00408104                 db    ? ;
.bss:00408105                 db    ? ;
.bss:00408106                 db    ? ;
.bss:00408107                 db    ? ;
.bss:00408108                 db    ? ;
.bss:00408109                 db    ? ;
.bss:0040810A                 db    ? ;
.bss:0040810B                 db    ? ;
.bss:0040810C                 db    ? ;
.bss:0040810D                 db    ? ;
.bss:0040810E                 db    ? ;
.bss:0040810F                 db    ? ;
.bss:00408110                 db    ? ;
.bss:00408111                 db    ? ;
.bss:00408112                 db    ? ;
.bss:00408113                 db    ? ;
.bss:00408114                 db    ? ;
.bss:00408115                 db    ? ;
.bss:00408116                 db    ? ;
.bss:00408117                 db    ? ;
.bss:00408118                 db    ? ;
.bss:00408119                 db    ? ;
.bss:0040811A                 db    ? ;
.bss:0040811B                 db    ? ;
.bss:0040811C                 db    ? ;
.bss:0040811D                 db    ? ;
.bss:0040811E                 db    ? ;
.bss:0040811F                 db    ? ;
.bss:00408120                 db    ? ;
.bss:00408121                 db    ? ;
.bss:00408122                 db    ? ;
.bss:00408123                 db    ? ;
.bss:00408124                 db    ? ;
.bss:00408125                 db    ? ;
.bss:00408126                 db    ? ;
.bss:00408127                 db    ? ;
.bss:00408128                 db    ? ;
.bss:00408129                 db    ? ;
.bss:0040812A                 db    ? ;
.bss:0040812B                 db    ? ;
.bss:0040812C                 db    ? ;
.bss:0040812D                 db    ? ;
.bss:0040812E                 db    ? ;
.bss:0040812F                 db    ? ;
.bss:00408130                 db    ? ;
.bss:00408131                 db    ? ;
.bss:00408132                 db    ? ;
.bss:00408133                 db    ? ;
.bss:00408134                 db    ? ;
.bss:00408135                 db    ? ;
.bss:00408136                 db    ? ;
.bss:00408137                 db    ? ;
.bss:00408138                 db    ? ;
.bss:00408139                 db    ? ;
.bss:0040813A                 db    ? ;
.bss:0040813B                 db    ? ;
.bss:0040813C                 db    ? ;
.bss:0040813D                 db    ? ;
.bss:0040813E                 db    ? ;
.bss:0040813F                 db    ? ;
.bss:00408140                 db    ? ;
.bss:00408141                 db    ? ;
.bss:00408142                 db    ? ;
.bss:00408143                 db    ? ;
.bss:00408144                 db    ? ;
.bss:00408145                 db    ? ;
.bss:00408146                 db    ? ;
.bss:00408147                 db    ? ;
.bss:00408148                 db    ? ;
.bss:00408149                 db    ? ;
.bss:0040814A                 db    ? ;
.bss:0040814B                 db    ? ;
.bss:0040814C                 db    ? ;
.bss:0040814D                 db    ? ;
.bss:0040814E                 db    ? ;
.bss:0040814F                 db    ? ;
.bss:00408150 unk_408150      db    ? ;               ; DATA XREF: sub_405A00+100↑o
.bss:00408150                                         ; .data:off_407048↑o
.bss:00408151                 db    ? ;
.bss:00408152                 db    ? ;
.bss:00408153                 db    ? ;
.bss:00408154                 db    ? ;
.bss:00408155                 db    ? ;
.bss:00408156                 db    ? ;
.bss:00408157                 db    ? ;
.bss:00408158                 db    ? ;
.bss:00408159                 db    ? ;
.bss:0040815A                 db    ? ;
.bss:0040815B                 db    ? ;
.bss:0040815C                 db    ? ;
.bss:0040815D                 db    ? ;
.bss:0040815E                 db    ? ;
.bss:0040815F                 db    ? ;
.bss:00408160                 db    ? ;
.bss:00408161                 db    ? ;
.bss:00408162                 db    ? ;
.bss:00408163                 db    ? ;
.bss:00408164                 db    ? ;
.bss:00408165                 db    ? ;
.bss:00408166                 db    ? ;
.bss:00408167                 db    ? ;
.bss:00408168                 db    ? ;
.bss:00408169                 db    ? ;
.bss:0040816A                 db    ? ;
.bss:0040816B                 db    ? ;
.bss:0040816C                 db    ? ;
.bss:0040816D                 db    ? ;
.bss:0040816E                 db    ? ;
.bss:0040816F                 db    ? ;
.bss:00408170                 db    ? ;
.bss:00408171                 db    ? ;
.bss:00408172                 db    ? ;
.bss:00408173                 db    ? ;
.bss:00408174                 db    ? ;
.bss:00408175                 db    ? ;
.bss:00408176                 db    ? ;
.bss:00408177                 db    ? ;
.bss:00408178                 db    ? ;
.bss:00408179                 db    ? ;
.bss:0040817A                 db    ? ;
.bss:0040817B                 db    ? ;
.bss:0040817C                 db    ? ;
.bss:0040817D                 db    ? ;
.bss:0040817E                 db    ? ;
.bss:0040817F                 db    ? ;
.bss:00408180                 db    ? ;
.bss:00408181                 db    ? ;
.bss:00408182                 db    ? ;
.bss:00408183                 db    ? ;
.bss:00408184                 db    ? ;
.bss:00408185                 db    ? ;
.bss:00408186                 db    ? ;
.bss:00408187                 db    ? ;
.bss:00408188                 db    ? ;
.bss:00408189                 db    ? ;
.bss:0040818A                 db    ? ;
.bss:0040818B                 db    ? ;
.bss:0040818C                 db    ? ;
.bss:0040818D                 db    ? ;
.bss:0040818E                 db    ? ;
.bss:0040818F                 db    ? ;
.bss:00408190                 db    ? ;
.bss:00408191                 db    ? ;
.bss:00408192                 db    ? ;
.bss:00408193                 db    ? ;
.bss:00408194                 db    ? ;
.bss:00408195                 db    ? ;
.bss:00408196                 db    ? ;
.bss:00408197                 db    ? ;
.bss:00408198                 db    ? ;
.bss:00408199                 db    ? ;
.bss:0040819A                 db    ? ;
.bss:0040819B                 db    ? ;
.bss:0040819C                 db    ? ;
.bss:0040819D                 db    ? ;
.bss:0040819E                 db    ? ;
.bss:0040819F                 db    ? ;
.bss:004081A0                 db    ? ;
.bss:004081A1                 db    ? ;
.bss:004081A2                 db    ? ;
.bss:004081A3                 db    ? ;
.bss:004081A4                 db    ? ;
.bss:004081A5                 db    ? ;
.bss:004081A6                 db    ? ;
.bss:004081A7                 db    ? ;
.bss:004081A8                 db    ? ;
.bss:004081A9                 db    ? ;
.bss:004081AA                 db    ? ;
.bss:004081AB                 db    ? ;
.bss:004081AC                 db    ? ;
.bss:004081AD                 db    ? ;
.bss:004081AE                 db    ? ;
.bss:004081AF                 db    ? ;
.bss:004081B0                 db    ? ;
.bss:004081B1                 db    ? ;
.bss:004081B2                 db    ? ;
.bss:004081B3                 db    ? ;
.bss:004081B4                 db    ? ;
.bss:004081B5                 db    ? ;
.bss:004081B6                 db    ? ;
.bss:004081B7                 db    ? ;
.bss:004081B8                 db    ? ;
.bss:004081B9                 db    ? ;
.bss:004081BA                 db    ? ;
.bss:004081BB                 db    ? ;
.bss:004081BC                 db    ? ;
.bss:004081BD                 db    ? ;
.bss:004081BE                 db    ? ;
.bss:004081BF                 db    ? ;
.bss:004081C0                 db    ? ;
.bss:004081C1                 db    ? ;
.bss:004081C2                 db    ? ;
.bss:004081C3                 db    ? ;
.bss:004081C4                 db    ? ;
.bss:004081C5                 db    ? ;
.bss:004081C6                 db    ? ;
.bss:004081C7                 db    ? ;
.bss:004081C8                 db    ? ;
.bss:004081C9                 db    ? ;
.bss:004081CA                 db    ? ;
.bss:004081CB                 db    ? ;
.bss:004081CC                 db    ? ;
.bss:004081CD                 db    ? ;
.bss:004081CE                 db    ? ;
.bss:004081CF                 db    ? ;
.bss:004081D0                 db    ? ;
.bss:004081D1                 db    ? ;
.bss:004081D2                 db    ? ;
.bss:004081D3                 db    ? ;
.bss:004081D4                 db    ? ;
.bss:004081D5                 db    ? ;
.bss:004081D6                 db    ? ;
.bss:004081D7                 db    ? ;
.bss:004081D8                 db    ? ;
.bss:004081D9                 db    ? ;
.bss:004081DA                 db    ? ;
.bss:004081DB                 db    ? ;
.bss:004081DC                 db    ? ;
.bss:004081DD                 db    ? ;
.bss:004081DE                 db    ? ;
.bss:004081DF                 db    ? ;
.bss:004081E0                 db    ? ;
.bss:004081E1                 db    ? ;
.bss:004081E2                 db    ? ;
.bss:004081E3                 db    ? ;
.bss:004081E4                 db    ? ;
.bss:004081E5                 db    ? ;
.bss:004081E6                 db    ? ;
.bss:004081E7                 db    ? ;
.bss:004081E8                 db    ? ;
.bss:004081E9                 db    ? ;
.bss:004081EA                 db    ? ;
.bss:004081EB                 db    ? ;
.bss:004081EC                 db    ? ;
.bss:004081ED                 db    ? ;
.bss:004081EE                 db    ? ;
.bss:004081EF                 db    ? ;
.bss:004081F0                 db    ? ;
.bss:004081F1                 db    ? ;
.bss:004081F2                 db    ? ;
.bss:004081F3                 db    ? ;
.bss:004081F4                 db    ? ;
.bss:004081F5                 db    ? ;
.bss:004081F6                 db    ? ;
.bss:004081F7                 db    ? ;
.bss:004081F8                 db    ? ;
.bss:004081F9                 db    ? ;
.bss:004081FA                 db    ? ;
.bss:004081FB                 db    ? ;
.bss:004081FC                 db    ? ;
.bss:004081FD                 db    ? ;
.bss:004081FE                 db    ? ;
.bss:004081FF                 db    ? ;
.bss:00408200                 db    ? ;
.bss:00408201                 db    ? ;
.bss:00408202                 db    ? ;
.bss:00408203                 db    ? ;
.bss:00408204                 db    ? ;
.bss:00408205                 db    ? ;
.bss:00408206                 db    ? ;
.bss:00408207                 db    ? ;
.bss:00408208                 db    ? ;
.bss:00408209                 db    ? ;
.bss:0040820A                 db    ? ;
.bss:0040820B                 db    ? ;
.bss:0040820C                 db    ? ;
.bss:0040820D                 db    ? ;
.bss:0040820E                 db    ? ;
.bss:0040820F                 db    ? ;
.bss:00408210                 db    ? ;
.bss:00408211                 db    ? ;
.bss:00408212                 db    ? ;
.bss:00408213                 db    ? ;
.bss:00408214                 db    ? ;
.bss:00408215                 db    ? ;
.bss:00408216                 db    ? ;
.bss:00408217                 db    ? ;
.bss:00408218                 db    ? ;
.bss:00408219                 db    ? ;
.bss:0040821A                 db    ? ;
.bss:0040821B                 db    ? ;
.bss:0040821C                 db    ? ;
.bss:0040821D                 db    ? ;
.bss:0040821E                 db    ? ;
.bss:0040821F                 db    ? ;
.bss:00408220                 db    ? ;
.bss:00408221                 db    ? ;
.bss:00408222                 db    ? ;
.bss:00408223                 db    ? ;
.bss:00408224                 db    ? ;
.bss:00408225                 db    ? ;
.bss:00408226                 db    ? ;
.bss:00408227                 db    ? ;
.bss:00408228                 db    ? ;
.bss:00408229                 db    ? ;
.bss:0040822A                 db    ? ;
.bss:0040822B                 db    ? ;
.bss:0040822C                 db    ? ;
.bss:0040822D                 db    ? ;
.bss:0040822E                 db    ? ;
.bss:0040822F                 db    ? ;
.bss:00408230                 db    ? ;
.bss:00408231                 db    ? ;
.bss:00408232                 db    ? ;
.bss:00408233                 db    ? ;
.bss:00408234                 db    ? ;
.bss:00408235                 db    ? ;
.bss:00408236                 db    ? ;
.bss:00408237                 db    ? ;
.bss:00408238                 db    ? ;
.bss:00408239                 db    ? ;
.bss:0040823A                 db    ? ;
.bss:0040823B                 db    ? ;
.bss:0040823C                 db    ? ;
.bss:0040823D                 db    ? ;
.bss:0040823E                 db    ? ;
.bss:0040823F                 db    ? ;
.bss:00408240                 db    ? ;
.bss:00408241                 db    ? ;
.bss:00408242                 db    ? ;
.bss:00408243                 db    ? ;
.bss:00408244                 db    ? ;
.bss:00408245                 db    ? ;
.bss:00408246                 db    ? ;
.bss:00408247                 db    ? ;
.bss:00408248                 db    ? ;
.bss:00408249                 db    ? ;
.bss:0040824A                 db    ? ;
.bss:0040824B                 db    ? ;
.bss:0040824C                 db    ? ;
.bss:0040824D                 db    ? ;
.bss:0040824E                 db    ? ;
.bss:0040824F                 db    ? ;
.bss:00408250 dword_408250    dd ?                    ; DATA XREF: .text:loc_405391↑o
.bss:00408250                                         ; .text:loc_4053B0↑o ...
.bss:00408254 dword_408254    dd ?                    ; DATA XREF: .text:loc_405430↑o
.bss:00408254                                         ; .text:004058B8↑r ...
.bss:00408258 dword_408258    dd ?                    ; DATA XREF: .text:004058B2↑r
.bss:00408258                                         ; sub_405960+2C↑r
.bss:0040825C dword_40825C    dd ?                    ; DATA XREF: .text:004058A6↑r
.bss:0040825C                                         ; sub_405960+22↑r
.bss:00408260 dword_408260    dd ?                    ; DATA XREF: .text:004058C2↑r
.bss:00408260                                         ; sub_405960+36↑r
.bss:00408264 dword_408264    dd ?                    ; DATA XREF: .text:004058D2↑r
.bss:00408264                                         ; sub_405960+4E↑r
.bss:00408268 dword_408268    dd ?                    ; DATA XREF: .text:004058EF↑r
.bss:00408268                                         ; sub_405960+62↑r
.bss:0040826C dword_40826C    dd ?                    ; DATA XREF: .text:004058E5↑r
.bss:0040826C                                         ; sub_405960+70↑r
.bss:00408270 dword_408270    dd ?                    ; DATA XREF: .text:004058C8↑r
.bss:00408270                                         ; sub_405960+7A↑r
.bss:00408274                 align 10h
.bss:00408280 ; char *Str1
.bss:00408280 Str1            dd ?                    ; DATA XREF: sub_406054:loc_40608D↑w
.bss:00408280                                         ; sub_406054:loc_4061C0↑r
.bss:00408284                 align 10h
.bss:00408290 dword_408290    dd ?                    ; DATA XREF: sub_406054+2D↑r
.bss:00408290                                         ; sub_406054+3F↑w
.bss:00408294                 align 10h
.bss:004082A0 dword_4082A0    dd ?                    ; DATA XREF: sub_401560+2F↑w
.bss:004082A0                                         ; sub_401560+270↑r ...
.bss:004082A4                 align 20h
.bss:004082C0 dword_4082C0    dd ?                    ; DATA XREF: sub_402CE0+71↑w
.bss:004082C0                                         ; .text:00402DE1↑w
.bss:004082C4                 align 10h
.bss:004082D0 dword_4082D0    dd ?                    ; CODE XREF: sub_406054+63↑p
.bss:004082D0                                         ; DATA XREF: sub_405F50+1E↑r ...
.bss:004082D4                 align 10h
.bss:004082E0 dword_4082E0    dd ?                    ; DATA XREF: sub_405F50+4E↑w
.bss:004082E0                                         ; sub_406054+AB↑w
.bss:004082E4                 db    ? ;
.bss:004082E5                 db    ? ;
.bss:004082E6                 db    ? ;
.bss:004082E7                 db    ? ;
.bss:004082E8                 db    ? ;
.bss:004082E9                 db    ? ;
.bss:004082EA                 db    ? ;
.bss:004082EB                 db    ? ;
.bss:004082EC                 db    ? ;
.bss:004082ED                 db    ? ;
.bss:004082EE                 db    ? ;
.bss:004082EF                 db    ? ;
.bss:004082F0                 db    ? ;
.bss:004082F1                 db    ? ;
.bss:004082F2                 db    ? ;
.bss:004082F3                 db    ? ;
.bss:004082F4                 db    ? ;
.bss:004082F5                 db    ? ;
.bss:004082F6                 db    ? ;
.bss:004082F7                 db    ? ;
.bss:004082F8                 db    ? ;
.bss:004082F9                 db    ? ;
.bss:004082FA                 db    ? ;
.bss:004082FB                 db    ? ;
.bss:004082FC                 db    ? ;
.bss:004082FD                 db    ? ;
.bss:004082FE                 db    ? ;
.bss:004082FF                 db    ? ;
.bss:00408300                 db    ? ;
.bss:00408301                 db    ? ;
.bss:00408302                 db    ? ;
.bss:00408303                 db    ? ;
.bss:00408304                 db    ? ;
.bss:00408305                 db    ? ;
.bss:00408306                 db    ? ;
.bss:00408307                 db    ? ;
.bss:00408308                 db    ? ;
.bss:00408309                 db    ? ;
.bss:0040830A                 db    ? ;
.bss:0040830B                 db    ? ;
.bss:0040830C                 db    ? ;
.bss:0040830D                 db    ? ;
.bss:0040830E                 db    ? ;
.bss:0040830F                 db    ? ;
.bss:00408310 dword_408310    dd ?                    ; DATA XREF: sub_406054+13↑r
.bss:00408314                 align 1000h
.bss:00408314 _bss            ends
.bss:00408314
.idata:00409000 ; Section 4. (virtual address 00009000)
.idata:00409000 ; Virtual size                  : 00000554 (   1364.)
.idata:00409000 ; Section size in file          : 00000600 (   1536.)
.idata:00409000 ; Offset to raw data for section: 00006400
.idata:00409000 ; Flags C0000040: Data Readable Writable
.idata:00409000 ; Alignment     : default
.idata:00409000 ; ===========================================================================
.idata:00409000
.idata:00409000 ; Segment type: Externs
.idata:00409000 ; _idata
.idata:00409000
.idata:00409001
.idata:0040913C ;
.idata:0040913C ; Imports from libintl3.dll
.idata:0040913C ;
.idata:0040913C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040913C                                         ; CODE XREF: sub_401560+49↑p
.idata:0040913C                                         ; DATA XREF: sub_401560+49↑r ...
.idata:00409140                 extrn libintl_gettext:dword
.idata:00409140                                         ; CODE XREF: sub_401560:loc_40179B↑p
.idata:00409140                                         ; sub_401560+264↑p ...
.idata:00409144                 extrn libintl_textdomain:dword
.idata:00409144                                         ; CODE XREF: sub_401560+56↑p
.idata:00409144                                         ; DATA XREF: sub_401560+56↑r ...
.idata:00409148
.idata:00409150 ;
.idata:00409150 ; Imports from KERNEL32.dll
.idata:00409150 ;
.idata:00409150 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00409150                 extrn __imp_ExitProcess:dword
.idata:00409150                                         ; DATA XREF: ExitProcess↑r
.idata:00409154 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00409154                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00409154                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00409158
.idata:00409160 ;
.idata:00409160 ; Imports from MSVCP60.DLL
.idata:00409160 ;
.idata:00409160 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00409160                 extrn __imp_mbrtowc:dword
.idata:00409160                                         ; DATA XREF: mbrtowc↑r
.idata:00409164
.idata:0040916C ;
.idata:0040916C ; Imports from msvcrt.dll
.idata:0040916C ;
.idata:0040916C                 extrn __imp___getmainargs:dword
.idata:0040916C                                         ; DATA XREF: __getmainargs↑r
.idata:00409170 ; int _mb_cur_max
.idata:00409170                 extrn __mb_cur_max:dword
.idata:00409170                                         ; DATA XREF: sub_4036A0+58↑r
.idata:00409170                                         ; sub_4048C0+7↑r ...
.idata:00409174 ; char ***(__cdecl *__p__environ)()
.idata:00409174                 extrn __imp___p__environ:dword
.idata:00409174                                         ; DATA XREF: __p__environ↑r
.idata:00409178 ; int *(__cdecl *__p__fmode)()
.idata:00409178                 extrn __imp___p__fmode:dword
.idata:00409178                                         ; DATA XREF: __p__fmode↑r
.idata:0040917C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040917C                 extrn __set_app_type:dword
.idata:0040917C                                         ; CODE XREF: start+D↑p
.idata:0040917C                                         ; .text:0040102D↑p
.idata:0040917C                                         ; DATA XREF: ...
.idata:00409180                 extrn __imp__assert:dword
.idata:00409180                                         ; DATA XREF: _assert↑r
.idata:00409184 ; void (__cdecl *_cexit)()
.idata:00409184                 extrn __imp__cexit:dword
.idata:00409184                                         ; DATA XREF: _cexit↑r
.idata:00409188 ; int *(__cdecl *_errno)()
.idata:00409188                 extrn __imp__errno:dword
.idata:00409188                                         ; DATA XREF: _errno↑r
.idata:0040918C ; int (__cdecl *_filbuf)(FILE *File)
.idata:0040918C                 extrn __imp__filbuf:dword
.idata:0040918C                                         ; DATA XREF: _filbuf↑r
.idata:00409190 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00409190                 extrn __imp__flsbuf:dword
.idata:00409190                                         ; DATA XREF: _flsbuf↑r
.idata:00409194 ; FILE iob[]
.idata:00409194                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00409194                                         ; sub_401080+75↑r ...
.idata:00409198 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00409198                 extrn __imp__isctype:dword
.idata:00409198                                         ; DATA XREF: _isctype↑r
.idata:0040919C ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040919C                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040919C                                         ; DATA XREF: .text:0040106C↑r
.idata:004091A0 ; const unsigned __int16 *pctype
.idata:004091A0                 extrn _pctype:dword     ; DATA XREF: sub_4036A0:loc_4042F2↑r
.idata:004091A0                                         ; sub_4048C0:loc_404FB4↑r ...
.idata:004091A4 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004091A4                 extrn __imp__setmode:dword
.idata:004091A4                                         ; DATA XREF: _setmode↑r
.idata:004091A8 ; void (__cdecl __noreturn *abort)()
.idata:004091A8                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004091AC ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004091AC                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004091AC                                         ; DATA XREF: sub_401040+C↑r
.idata:004091B0 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004091B0                 extrn __imp_calloc:dword
.idata:004091B0                                         ; DATA XREF: calloc↑r
.idata:004091B4 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004091B4                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004091B8 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004091B8                 extrn __imp_fclose:dword
.idata:004091B8                                         ; DATA XREF: fclose↑r
.idata:004091BC ; int (__cdecl *fflush)(FILE *Stream)
.idata:004091BC                 extrn __imp_fflush:dword
.idata:004091BC                                         ; DATA XREF: fflush↑r
.idata:004091C0 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004091C0                 extrn __imp_fprintf:dword
.idata:004091C0                                         ; DATA XREF: fprintf↑r
.idata:004091C4 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004091C4                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004091C8 ; void (__cdecl *free)(void *Block)
.idata:004091C8                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004091CC ; char *(__cdecl *getenv)(const char *VarName)
.idata:004091CC                 extrn __imp_getenv:dword
.idata:004091CC                                         ; DATA XREF: getenv↑r
.idata:004091D0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004091D0                 extrn __imp_iswctype:dword
.idata:004091D0                                         ; DATA XREF: iswctype↑r
.idata:004091D4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004091D4                 extrn __imp_malloc:dword
.idata:004091D4                                         ; DATA XREF: malloc↑r
.idata:004091D8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004091D8                 extrn __imp_memcpy:dword
.idata:004091D8                                         ; DATA XREF: memcpy↑r
.idata:004091DC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004091DC                 extrn __imp_memset:dword
.idata:004091DC                                         ; DATA XREF: memset↑r
.idata:004091E0 ; int (*printf)(const char *const Format, ...)
.idata:004091E0                 extrn __imp_printf:dword
.idata:004091E0                                         ; DATA XREF: printf↑r
.idata:004091E4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004091E4                 extrn __imp_realloc:dword
.idata:004091E4                                         ; DATA XREF: realloc↑r
.idata:004091E8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004091E8                 extrn __imp_setlocale:dword
.idata:004091E8                                         ; DATA XREF: setlocale↑r
.idata:004091EC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004091EC                 extrn __imp_signal:dword
.idata:004091EC                                         ; DATA XREF: signal↑r
.idata:004091F0 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004091F0                 extrn __imp_strchr:dword
.idata:004091F0                                         ; DATA XREF: strchr↑r
.idata:004091F4 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004091F4                 extrn __imp_strcmp:dword
.idata:004091F4                                         ; DATA XREF: strcmp↑r
.idata:004091F8 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004091F8                 extrn __imp_strerror:dword
.idata:004091F8                                         ; DATA XREF: strerror↑r
.idata:004091FC ; size_t (__cdecl *strlen)(const char *Str)
.idata:004091FC                 extrn __imp_strlen:dword
.idata:004091FC                                         ; DATA XREF: strlen↑r
.idata:00409200 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00409200                 extrn __imp_strncmp:dword
.idata:00409200                                         ; DATA XREF: strncmp↑r
.idata:00409204 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00409204                 extrn __imp_vfprintf:dword
.idata:00409204                                         ; DATA XREF: vfprintf↑r
.idata:00409208
.idata:00409208
.idata:00409208
.idata:00409208                 end start
