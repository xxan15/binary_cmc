.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : D32C1A3B65B4A313F6EC22706AD5DFD8B210ED40DEC8DCA53590496FFE9E16FC
.text:00401000 ; Input MD5    : DCA67F39D4A7D644AC52BC533E81B3E6
.text:00401000 ; Input CRC32  : D056B614
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/link.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A245 (Wed Apr 20 18:41:09 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00005BB0 (  23472.)
.text:00401000 ; Section size in file          : 00005C00 (  23552.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401390+63↓p
.text:00401040                                         ; .text:004066E0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_406680
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_407000
.text:004010A2                 mov     edx, dword_407060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_407004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_407080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_407080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_406650
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_407000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_407004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401390
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_406680
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401390+20↓o
.text:00401280                                         ; sub_401390+B4↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401390+3A↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401390+42↓o
.text:004012C3                                         ; sub_401390+4F↓o
.text:004012CD aMichaelStone   db 'Michael Stone',0    ; DATA XREF: sub_401390+70↓o
.text:004012DB a530            db '5.3.0',0            ; DATA XREF: sub_401390+80↓o
.text:004012E1 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401390+88↓o
.text:004012EF ; const FILE stru_4012EF
.text:004012EF stru_4012EF     FILE <6B6E696Ch, 74786500h, 6F206172h, 61726570h, 2520646Eh, \
.text:004012EF                                         ; DATA XREF: sub_401390+90↓o
.text:004012EF                                         ; sub_401390+EC↓o
.text:004012EF                       90900073h, 90909090h, 90909090h>
.text:0040130F                 db  90h
.text:00401310                 db  90h
.text:00401311                 db  90h
.text:00401312                 db  90h
.text:00401313                 db  90h
.text:00401314                 db  90h
.text:00401315                 db  90h
.text:00401316                 db  90h
.text:00401317                 db  90h
.text:00401318                 db  90h
.text:00401319                 db  90h
.text:0040131A                 db  90h
.text:0040131B                 db  90h
.text:0040131C                 db  90h
.text:0040131D                 db  90h
.text:0040131E                 db  90h
.text:0040131F                 db  90h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401390:loc_4014A7↓o
.text:00401320                                         ; sub_401710+F↓o
.text:00401347 aCannotCreateLi db 'cannot create link %s to %s',0
.text:00401347                                         ; DATA XREF: sub_401390+1A4↓o
.text:00401363 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401390+1E1↓o
.text:00401373 aMissingOperand_0 db 'missing operand after %s',0
.text:00401373                                         ; DATA XREF: sub_401390+216↓o
.text:0040138C                 align 10h
.text:00401390
.text:00401390 ; =============== S U B R O U T I N E =======================================
.text:00401390
.text:00401390 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401390
.text:00401390 sub_401390      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401390
.text:00401390 Category        = dword ptr -38h
.text:00401390 Locale          = dword ptr -34h
.text:00401390 var_30          = dword ptr -30h
.text:00401390 var_2C          = byte ptr -2Ch
.text:00401390 var_28          = dword ptr -28h
.text:00401390 var_24          = dword ptr -24h
.text:00401390 var_20          = byte ptr -20h
.text:00401390 var_1C          = dword ptr -1Ch
.text:00401390 arg_0           = dword ptr  8
.text:00401390 arg_4           = dword ptr  0Ch
.text:00401390
.text:00401390                 push    ebp
.text:00401391                 xor     eax, eax
.text:00401393                 mov     ebp, esp
.text:00401395                 push    edi
.text:00401396                 push    esi
.text:00401397                 push    ebx
.text:00401398                 sub     esp, 2Ch
.text:0040139B                 mov     ebx, [ebp+arg_4]
.text:0040139E                 and     esp, 0FFFFFFF0h
.text:004013A1                 mov     esi, [ebp+arg_0]
.text:004013A4                 call    __alloca
.text:004013A9                 call    sub_406720
.text:004013AE                 mov     edx, [ebx]
.text:004013B0                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:004013B8                 mov     [esp+38h+Category], 0 ; Category
.text:004013BF                 mov     ds:dword_408250, edx
.text:004013C5                 call    setlocale
.text:004013CA                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013D2                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013D9                 call    ds:__imp_libintl_bindtextdomain
.text:004013DF                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013E6                 call    ds:libintl_textdomain
.text:004013EC                 mov     [esp+38h+Category], offset sub_402B10 ; void (__cdecl *)()
.text:004013F3                 call    sub_401040
.text:004013F8                 mov     [esp+38h+var_1C], 0
.text:00401400                 mov     dword ptr [esp+38h+var_20], offset aMichaelStone ; "Michael Stone"
.text:00401408                 mov     [esp+38h+var_24], offset sub_401710 ; int
.text:00401410                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:00401418                 mov     dword ptr [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:00401420                 mov     [esp+38h+var_30], offset stru_4012EF ; FILE *
.text:00401428                 mov     [esp+38h+Locale], ebx ; int
.text:0040142C                 mov     [esp+38h+Category], esi ; int
.text:0040142F                 call    sub_402A20
.text:00401434                 mov     [esp+38h+var_28], 0 ; int
.text:0040143C                 mov     dword ptr [esp+38h+var_2C], 0 ; char
.text:00401444                 mov     [esp+38h+var_30], offset Locale ; char *
.text:0040144C                 mov     [esp+38h+Locale], ebx ; int
.text:00401450                 mov     [esp+38h+Category], esi ; int
.text:00401453                 call    sub_402880
.text:00401458                 inc     eax
.text:00401459                 jnz     short loc_4014A7
.text:0040145B                 mov     edx, dword_407010
.text:00401461                 lea     eax, [edx+2]
.text:00401464                 cmp     esi, eax
.text:00401466                 jl      loc_40156A
.text:0040146C                 cmp     eax, esi
.text:0040146E                 jge     short loc_4014DF
.text:00401470                 mov     edi, [ebx+edx*4+8]
.text:00401474                 mov     [esp+38h+Category], edi ; char *
.text:00401477                 call    sub_402850
.text:0040147C                 mov     [esp+38h+Category], (offset stru_4012EF._cnt+1)
.text:00401483
.text:00401483 loc_401483:                             ; CODE XREF: sub_401390+21D↓j
.text:00401483                 mov     ebx, eax
.text:00401485                 call    ds:libintl_gettext
.text:0040148B                 mov     dword ptr [esp+38h+var_2C], ebx ; char
.text:0040148F                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401497                 mov     [esp+38h+Category], 0 ; Code
.text:0040149E                 mov     [esp+38h+var_30], eax ; char *
.text:004014A2                 call    sub_404810
.text:004014A7
.text:004014A7 loc_4014A7:                             ; CODE XREF: sub_401390+C9↑j
.text:004014A7                                         ; sub_401390+206↓j
.text:004014A7                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004014AE                 call    ds:libintl_gettext
.text:004014B4                 mov     edx, ds:_iob
.text:004014BA                 mov     ebx, ds:dword_408250
.text:004014C0                 add     edx, 40h ; '@'
.text:004014C3                 mov     [esp+38h+var_30], ebx
.text:004014C7                 mov     [esp+38h+Locale], eax ; Format
.text:004014CB                 mov     [esp+38h+Category], edx ; Stream
.text:004014CE                 call    fprintf
.text:004014D3                 mov     [esp+38h+Category], 1 ; Code
.text:004014DA
.text:004014DA loc_4014DA:                             ; CODE XREF: sub_401390+16D↓j
.text:004014DA                 call    exit
.text:004014DF ; ---------------------------------------------------------------------------
.text:004014DF
.text:004014DF loc_4014DF:                             ; CODE XREF: sub_401390+DE↑j
.text:004014DF                 mov     esi, [ebx+edx*4+4]
.text:004014E3                 mov     [esp+38h+Locale], esi ; lpNewFileName
.text:004014E7                 mov     ecx, [ebx+edx*4]
.text:004014EA                 mov     [esp+38h+Category], ecx ; lpExistingFileName
.text:004014ED                 call    sub_404C90
.text:004014F2                 test    eax, eax
.text:004014F4                 jnz     short loc_4014FF
.text:004014F6
.text:004014F6 loc_4014F6:                             ; CODE XREF: sub_401390+1D8↓j
.text:004014F6                 mov     [esp+38h+Category], 0
.text:004014FD                 jmp     short loc_4014DA
.text:004014FF ; ---------------------------------------------------------------------------
.text:004014FF
.text:004014FF loc_4014FF:                             ; CODE XREF: sub_401390+164↑j
.text:004014FF                 mov     edi, dword_407010
.text:00401505                 mov     esi, [ebx+edi*4]
.text:00401508                 mov     [esp+38h+Category], 1 ; int
.text:0040150F                 mov     [esp+38h+Locale], esi ; char *
.text:00401513                 call    sub_402820
.text:00401518                 mov     ecx, dword_407010
.text:0040151E                 mov     edi, eax
.text:00401520                 mov     edx, [ebx+ecx*4+4]
.text:00401524                 mov     [esp+38h+Category], 0 ; int
.text:0040152B                 mov     [esp+38h+Locale], edx ; char *
.text:0040152F                 call    sub_402820
.text:00401534                 mov     [esp+38h+Category], offset aCannotCreateLi ; "cannot create link %s to %s"
.text:0040153B                 mov     esi, eax
.text:0040153D                 call    ds:libintl_gettext
.text:00401543                 mov     ebx, eax
.text:00401545                 call    _errno
.text:0040154A                 mov     [esp+38h+var_28], edi
.text:0040154E                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:00401552                 mov     [esp+38h+var_30], ebx ; char *
.text:00401556                 mov     edi, [eax]
.text:00401558                 mov     [esp+38h+Category], 1 ; Code
.text:0040155F                 mov     [esp+38h+Locale], edi ; ErrorMessage
.text:00401563                 call    sub_404810
.text:00401568                 jmp     short loc_4014F6
.text:0040156A ; ---------------------------------------------------------------------------
.text:0040156A
.text:0040156A loc_40156A:                             ; CODE XREF: sub_401390+D6↑j
.text:0040156A                 lea     ecx, [edx+1]
.text:0040156D                 cmp     esi, ecx
.text:0040156F                 jge     short loc_40159B
.text:00401571                 mov     [esp+38h+Category], offset aMissingOperand ; "missing operand"
.text:00401578                 call    ds:libintl_gettext
.text:0040157E                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401586                 mov     [esp+38h+Category], 0 ; Code
.text:0040158D                 mov     [esp+38h+var_30], eax ; char *
.text:00401591                 call    sub_404810
.text:00401596                 jmp     loc_4014A7
.text:0040159B ; ---------------------------------------------------------------------------
.text:0040159B
.text:0040159B loc_40159B:                             ; CODE XREF: sub_401390+1DF↑j
.text:0040159B                 mov     esi, [ebx+edx*4]
.text:0040159E                 mov     [esp+38h+Category], esi ; char *
.text:004015A1                 call    sub_402850
.text:004015A6                 mov     [esp+38h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:004015AD                 jmp     loc_401483
.text:004015AD sub_401390      endp
.text:004015AD
.text:004015AD ; ---------------------------------------------------------------------------
.text:004015B2                 align 10h
.text:004015C0 aUsageSFile1Fil db 'Usage: %s FILE1 FILE2',0Ah
.text:004015C0                                         ; DATA XREF: sub_401710:loc_401753↓o
.text:004015C0                 db '  or:  %s OPTION',0Ah,0
.text:004015E8                 align 20h
.text:00401600 aCallTheLinkFun db 'Call the link function to create a link named FILE2 to an existin'
.text:00401600                                         ; DATA XREF: sub_401710+66↓o
.text:00401600                 db 'g FILE1.',0Ah
.text:00401600                 db 0Ah,0
.text:0040164C                 align 20h
.text:00401660 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401660                                         ; DATA XREF: sub_401710+88↓o
.text:0040168D                 align 20h
.text:004016A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004016A0                                         ; DATA XREF: sub_401710+AA↓o
.text:004016D6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401710+CC↓o
.text:004016D6                 db 'Report bugs to <%s>.',0Ah,0
.text:004016ED aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004016ED                                         ; DATA XREF: sub_401710+D9↓o
.text:00401703                 align 10h
.text:00401710
.text:00401710 ; =============== S U B R O U T I N E =======================================
.text:00401710
.text:00401710 ; Attributes: noreturn
.text:00401710
.text:00401710 ; void __cdecl __noreturn sub_401710(int Code)
.text:00401710 sub_401710      proc near               ; DATA XREF: sub_401390+78↑o
.text:00401710
.text:00401710 Stream          = dword ptr -1Ch
.text:00401710 Format          = dword ptr -18h
.text:00401710 var_14          = dword ptr -14h
.text:00401710 var_4           = dword ptr -4
.text:00401710 Code            = dword ptr  4
.text:00401710
.text:00401710                 sub     esp, 1Ch
.text:00401713                 mov     [esp+1Ch+var_4], ebx
.text:00401717                 mov     ebx, [esp+1Ch+Code]
.text:0040171B                 test    ebx, ebx
.text:0040171D                 jz      short loc_401753
.text:0040171F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401726                 call    ds:libintl_gettext
.text:0040172C                 mov     edx, ds:_iob
.text:00401732                 mov     ecx, ds:dword_408250
.text:00401738                 add     edx, 40h ; '@'
.text:0040173B                 mov     [esp+1Ch+var_14], ecx
.text:0040173F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401743                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401746                 call    fprintf
.text:0040174B
.text:0040174B loc_40174B:                             ; CODE XREF: sub_401710+E9↓j
.text:0040174B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040174E                 call    exit
.text:00401753 ; ---------------------------------------------------------------------------
.text:00401753
.text:00401753 loc_401753:                             ; CODE XREF: sub_401710+D↑j
.text:00401753                 mov     [esp+1Ch+Stream], offset aUsageSFile1Fil ; "Usage: %s FILE1 FILE2\n  or:  %s OPTION"...
.text:0040175A                 call    ds:libintl_gettext
.text:00401760                 mov     ecx, ds:dword_408250
.text:00401766                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401769                 mov     [esp+1Ch+var_14], ecx
.text:0040176D                 mov     [esp+1Ch+Format], ecx
.text:00401771                 call    printf
.text:00401776                 mov     [esp+1Ch+Stream], offset aCallTheLinkFun ; "Call the link function to create a link"...
.text:0040177D                 call    ds:libintl_gettext
.text:00401783                 mov     ecx, ds:_iob
.text:00401789                 add     ecx, 20h ; ' '
.text:0040178C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401790                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401793                 call    fputs
.text:00401798                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040179F                 call    ds:libintl_gettext
.text:004017A5                 mov     ecx, ds:_iob
.text:004017AB                 add     ecx, 20h ; ' '
.text:004017AE                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004017B2                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004017B5                 call    fputs
.text:004017BA                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004017C1                 call    ds:libintl_gettext
.text:004017C7                 mov     ecx, ds:_iob
.text:004017CD                 add     ecx, 20h ; ' '
.text:004017D0                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004017D4                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004017D7                 call    fputs
.text:004017DC                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004017E3                 call    ds:libintl_gettext
.text:004017E9                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004017F1                 mov     [esp+1Ch+Stream], eax ; Format
.text:004017F4                 call    printf
.text:004017F9                 jmp     loc_40174B
.text:004017F9 sub_401710      endp
.text:004017F9
.text:004017F9 ; ---------------------------------------------------------------------------
.text:004017FE                 align 10h
.text:00401800 dword_401800    dd 90002D2Dh, 7 dup(90909090h)
.text:00401800                                         ; DATA XREF: sub_401A50+E4↓o
.text:00401820 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401820                                         ; DATA XREF: sub_401A50+2FC↓o
.text:0040184D                 align 20h
.text:00401860 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401860                                         ; DATA XREF: sub_401A50:loc_401DB2↓o
.text:0040188D                 align 20h
.text:004018A0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004018A0                                         ; DATA XREF: sub_401A50:loc_401E50↓o
.text:004018A0                                         ; sub_401A50:loc_402217↓o
.text:004018C6                 align 20h
.text:004018E0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004018E0                                         ; DATA XREF: sub_401A50+48E↓o
.text:00401900 dword_401900    dd 90909000h, 7 dup(90909090h)
.text:00401900                                         ; DATA XREF: sub_401A50:loc_401F21↓o
.text:00401920 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401920                                         ; DATA XREF: sub_401A50:loc_401F3A↓o
.text:00401940 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401940                                         ; DATA XREF: sub_401A50:loc_40201F↓o
.text:00401940                                         ; sub_401A50:loc_40234C↓o
.text:00401967                 align 20h
.text:00401980 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401980                                         ; DATA XREF: sub_401A50:loc_402193↓o
.text:004019AE                 align 20h
.text:004019C0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004019C0                                         ; DATA XREF: sub_401A50:loc_40227F↓o
.text:004019E1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004019E1                                         ; DATA XREF: sub_401A50+93F↓o
.text:004019FB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004019FB                                         ; DATA XREF: sub_401A50:loc_4023C7↓o
.text:00401A15 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401A15                                         ; DATA XREF: sub_401A50:loc_4023EE↓o
.text:00401A33 ; const char VarName[]
.text:00401A33 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401A50:loc_4025A0↓o
.text:00401A43                 align 10h
.text:00401A50
.text:00401A50 ; =============== S U B R O U T I N E =======================================
.text:00401A50
.text:00401A50
.text:00401A50 ; int __cdecl sub_401A50(int, int, char *Str, int, int, int, int, int)
.text:00401A50 sub_401A50      proc near               ; CODE XREF: sub_4025E0+5A↓p
.text:00401A50                                         ; .text:004026CA↓p ...
.text:00401A50
.text:00401A50 Str1            = dword ptr -5Ch
.text:00401A50 Str2            = dword ptr -58h
.text:00401A50 MaxCount        = dword ptr -54h
.text:00401A50 var_50          = dword ptr -50h
.text:00401A50 var_4C          = dword ptr -4Ch
.text:00401A50 var_3C          = dword ptr -3Ch
.text:00401A50 var_38          = dword ptr -38h
.text:00401A50 var_34          = dword ptr -34h
.text:00401A50 var_30          = dword ptr -30h
.text:00401A50 var_2C          = dword ptr -2Ch
.text:00401A50 var_28          = dword ptr -28h
.text:00401A50 var_24          = dword ptr -24h
.text:00401A50 var_20          = dword ptr -20h
.text:00401A50 var_1C          = dword ptr -1Ch
.text:00401A50 var_18          = dword ptr -18h
.text:00401A50 var_14          = dword ptr -14h
.text:00401A50 arg_0           = dword ptr  4
.text:00401A50 arg_4           = dword ptr  8
.text:00401A50 Str             = dword ptr  0Ch
.text:00401A50 arg_C           = dword ptr  10h
.text:00401A50 arg_10          = dword ptr  14h
.text:00401A50 arg_14          = dword ptr  18h
.text:00401A50 arg_18          = dword ptr  1Ch
.text:00401A50 arg_1C          = dword ptr  20h
.text:00401A50
.text:00401A50                 push    ebp
.text:00401A51                 mov     eax, 0FFFFFFFFh
.text:00401A56                 push    edi
.text:00401A57                 push    esi
.text:00401A58                 push    ebx
.text:00401A59                 sub     esp, 4Ch
.text:00401A5C                 mov     esi, [esp+5Ch+Str]
.text:00401A60                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401A64                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401A67                 mov     ebx, [ebp+4]
.text:00401A6A                 setz    dl
.text:00401A6D                 movzx   ecx, dl
.text:00401A70                 dec     ecx
.text:00401A71                 and     ecx, ebx
.text:00401A73                 mov     [esp+5Ch+var_14], ecx
.text:00401A77                 mov     ecx, [esp+5Ch+arg_0]
.text:00401A7B                 test    ecx, ecx
.text:00401A7D                 jle     loc_401BA7
.text:00401A83                 mov     dword ptr [ebp+0Ch], 0
.text:00401A8A                 mov     ebx, [ebp+0]
.text:00401A8D                 test    ebx, ebx
.text:00401A8F                 jz      loc_4025C0
.text:00401A95                 mov     edi, [ebp+10h]
.text:00401A98                 test    edi, edi
.text:00401A9A                 jnz     short loc_401AF3
.text:00401A9C                 lea     esi, [esi+0]
.text:00401AA0
.text:00401AA0 loc_401AA0:                             ; CODE XREF: sub_401A50+B7C↓j
.text:00401AA0                 mov     [ebp+24h], ebx
.text:00401AA3                 mov     esi, [esp+5Ch+Str]
.text:00401AA7                 mov     [ebp+20h], ebx
.text:00401AAA                 mov     ecx, [esp+5Ch+arg_18]
.text:00401AAE                 xor     ebx, ebx
.text:00401AB0                 mov     dword ptr [ebp+14h], 0
.text:00401AB7                 test    ecx, ecx
.text:00401AB9                 jz      loc_4025A0
.text:00401ABF
.text:00401ABF loc_401ABF:                             ; CODE XREF: sub_401A50+B64↓j
.text:00401ABF                 mov     ebx, 1
.text:00401AC4
.text:00401AC4 loc_401AC4:                             ; CODE XREF: sub_401A50+B5E↓j
.text:00401AC4                 mov     [ebp+1Ch], ebx
.text:00401AC7                 mov     ecx, [esp+5Ch+Str]
.text:00401ACB                 movzx   eax, byte ptr [ecx]
.text:00401ACE                 cmp     al, 2Dh ; '-'
.text:00401AD0                 jz      loc_402590
.text:00401AD6                 cmp     al, 2Bh ; '+'
.text:00401AD8                 jz      loc_402579
.text:00401ADE                 xor     edx, edx
.text:00401AE0                 test    ebx, ebx
.text:00401AE2                 setz    dl
.text:00401AE5                 mov     [ebp+18h], edx
.text:00401AE8
.text:00401AE8 loc_401AE8:                             ; CODE XREF: sub_401A50+B35↓j
.text:00401AE8                 mov     [esp+5Ch+Str], esi
.text:00401AEC                 mov     dword ptr [ebp+10h], 1
.text:00401AF3
.text:00401AF3 loc_401AF3:                             ; CODE XREF: sub_401A50+4A↑j
.text:00401AF3                 mov     eax, [ebp+14h]
.text:00401AF6                 test    eax, eax
.text:00401AF8                 jz      short loc_401B03
.text:00401AFA                 cmp     byte ptr [eax], 0
.text:00401AFD                 jnz     loc_401BE0
.text:00401B03
.text:00401B03 loc_401B03:                             ; CODE XREF: sub_401A50+A8↑j
.text:00401B03                 mov     ebx, [ebp+0]
.text:00401B06                 cmp     [ebp+24h], ebx
.text:00401B09                 jle     short loc_401B0E
.text:00401B0B                 mov     [ebp+24h], ebx
.text:00401B0E
.text:00401B0E loc_401B0E:                             ; CODE XREF: sub_401A50+B9↑j
.text:00401B0E                 cmp     [ebp+20h], ebx
.text:00401B11                 jle     short loc_401B16
.text:00401B13                 mov     [ebp+20h], ebx
.text:00401B16
.text:00401B16 loc_401B16:                             ; CODE XREF: sub_401A50+C1↑j
.text:00401B16                 cmp     dword ptr [ebp+18h], 1
.text:00401B1A                 jz      loc_4024F0
.text:00401B20
.text:00401B20 loc_401B20:                             ; CODE XREF: sub_401A50+B13↓j
.text:00401B20                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401B24                 jz      loc_4024D4
.text:00401B2A                 cld
.text:00401B2B                 mov     ecx, [esp+5Ch+arg_4]
.text:00401B2F                 mov     edx, 3
.text:00401B34                 mov     edi, offset dword_401800
.text:00401B39                 mov     esi, [ecx+ebx*4]
.text:00401B3C                 mov     ecx, edx
.text:00401B3E                 repe cmpsb
.text:00401B40                 jnz     short loc_401B7C
.text:00401B42                 mov     edx, [ebp+24h]
.text:00401B45                 lea     eax, [ebx+1]
.text:00401B48                 cmp     [ebp+20h], edx
.text:00401B4B                 mov     [ebp+0], eax
.text:00401B4E                 jz      loc_4024E8
.text:00401B54                 cmp     edx, eax
.text:00401B56                 jz      short loc_401B70
.text:00401B58                 mov     [esp+5Ch+Str2], ebp
.text:00401B5C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401B60                 mov     [esp+5Ch+Str1], ebx
.text:00401B63                 call    sub_402700
.text:00401B68                 nop
.text:00401B69                 lea     esi, [esi+0]
.text:00401B70
.text:00401B70 loc_401B70:                             ; CODE XREF: sub_401A50+106↑j
.text:00401B70                                         ; sub_401A50+A9B↓j
.text:00401B70                 mov     eax, [esp+5Ch+arg_0]
.text:00401B74                 mov     ebx, eax
.text:00401B76                 mov     [ebp+24h], eax
.text:00401B79                 mov     [ebp+0], eax
.text:00401B7C
.text:00401B7C loc_401B7C:                             ; CODE XREF: sub_401A50+F0↑j
.text:00401B7C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401B80                 jz      loc_4024D4
.text:00401B86                 mov     esi, [esp+5Ch+arg_4]
.text:00401B8A                 mov     eax, [esi+ebx*4]
.text:00401B8D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401B90                 jz      short loc_401BB7
.text:00401B92
.text:00401B92 loc_401B92:                             ; CODE XREF: sub_401A50+16D↓j
.text:00401B92                 mov     edx, [ebp+18h]
.text:00401B95                 test    edx, edx
.text:00401B97                 jz      short loc_401BB0
.text:00401B99                 mov     [ebp+0Ch], eax
.text:00401B9C                 lea     edi, [ebx+1]
.text:00401B9F                 mov     eax, 1
.text:00401BA4                 mov     [ebp+0], edi
.text:00401BA7
.text:00401BA7 loc_401BA7:                             ; CODE XREF: sub_401A50+2D↑j
.text:00401BA7                                         ; sub_401A50+165↓j ...
.text:00401BA7                 add     esp, 4Ch
.text:00401BAA                 pop     ebx
.text:00401BAB                 pop     esi
.text:00401BAC                 pop     edi
.text:00401BAD                 pop     ebp
.text:00401BAE                 retn
.text:00401BAE ; ---------------------------------------------------------------------------
.text:00401BAF                 align 10h
.text:00401BB0
.text:00401BB0 loc_401BB0:                             ; CODE XREF: sub_401A50+147↑j
.text:00401BB0                                         ; sub_401A50+A8A↓j ...
.text:00401BB0                 mov     eax, 0FFFFFFFFh
.text:00401BB5                 jmp     short loc_401BA7
.text:00401BB7 ; ---------------------------------------------------------------------------
.text:00401BB7
.text:00401BB7 loc_401BB7:                             ; CODE XREF: sub_401A50+140↑j
.text:00401BB7                 movzx   edx, byte ptr [eax+1]
.text:00401BBB                 test    dl, dl
.text:00401BBD                 jz      short loc_401B92
.text:00401BBF                 mov     ebx, [esp+5Ch+arg_C]
.text:00401BC3                 xor     ecx, ecx
.text:00401BC5                 test    ebx, ebx
.text:00401BC7                 jz      short loc_401BD2
.text:00401BC9                 cmp     dl, 2Dh ; '-'
.text:00401BCC                 jz      loc_4024CA
.text:00401BD2
.text:00401BD2 loc_401BD2:                             ; CODE XREF: sub_401A50+177↑j
.text:00401BD2                                         ; sub_401A50+A7F↓j
.text:00401BD2                 lea     esi, [ecx+eax+1]
.text:00401BD6                 mov     [ebp+14h], esi
.text:00401BD9                 lea     esi, [esi+0]
.text:00401BE0
.text:00401BE0 loc_401BE0:                             ; CODE XREF: sub_401A50+AD↑j
.text:00401BE0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401BE4                 test    ecx, ecx
.text:00401BE6                 jz      loc_401F70
.text:00401BEC                 mov     edx, [ebp+0]
.text:00401BEF                 mov     edi, [esp+5Ch+arg_4]
.text:00401BF3                 mov     eax, [edi+edx*4]
.text:00401BF6                 movzx   edx, byte ptr [eax+1]
.text:00401BFA                 cmp     dl, 2Dh ; '-'
.text:00401BFD                 jz      short loc_401C15
.text:00401BFF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401C03                 test    ebx, ebx
.text:00401C05                 jz      loc_401F70
.text:00401C0B                 cmp     byte ptr [eax+2], 0
.text:00401C0F                 jz      loc_4024AA
.text:00401C15
.text:00401C15 loc_401C15:                             ; CODE XREF: sub_401A50+1AD↑j
.text:00401C15                                         ; sub_401A50+A75↓j
.text:00401C15                 mov     [esp+5Ch+var_18], 0
.text:00401C1D                 mov     ecx, [ebp+14h]
.text:00401C20                 mov     [esp+5Ch+var_1C], 0
.text:00401C28                 mov     [esp+5Ch+var_20], 0
.text:00401C30                 mov     edi, ecx
.text:00401C32                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401C3A                 movzx   eax, byte ptr [ecx]
.text:00401C3D                 test    al, al
.text:00401C3F                 jz      short loc_401C5C
.text:00401C41                 cmp     al, 3Dh ; '='
.text:00401C43                 jz      short loc_401C5C
.text:00401C45                 lea     esi, [esi+0]
.text:00401C49                 lea     edi, [edi+0]
.text:00401C50
.text:00401C50 loc_401C50:                             ; CODE XREF: sub_401A50+20A↓j
.text:00401C50                 inc     edi
.text:00401C51                 movzx   eax, byte ptr [edi]
.text:00401C54                 test    al, al
.text:00401C56                 jz      short loc_401C5C
.text:00401C58                 cmp     al, 3Dh ; '='
.text:00401C5A                 jnz     short loc_401C50
.text:00401C5C
.text:00401C5C loc_401C5C:                             ; CODE XREF: sub_401A50+1EF↑j
.text:00401C5C                                         ; sub_401A50+1F3↑j ...
.text:00401C5C                 mov     [esp+5Ch+var_28], 0
.text:00401C64                 mov     esi, [esp+5Ch+arg_C]
.text:00401C68                 mov     ebx, [esi]
.text:00401C6A                 test    ebx, ebx
.text:00401C6C                 mov     edx, ebx
.text:00401C6E                 jz      loc_401E90
.text:00401C74                 lea     esi, [esi+0]
.text:00401C7A                 lea     edi, [edi+0]
.text:00401C80
.text:00401C80 loc_401C80:                             ; CODE XREF: sub_401A50+25E↓j
.text:00401C80                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401C84                 mov     ebx, edi
.text:00401C86                 sub     ebx, ecx
.text:00401C88                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401C8C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401C8F                 call    strncmp
.text:00401C94                 test    eax, eax
.text:00401C96                 jz      loc_402426
.text:00401C9C
.text:00401C9C loc_401C9C:                             ; CODE XREF: sub_401A50+A0F↓j
.text:00401C9C                                         ; sub_401A50+A24↓j ...
.text:00401C9C                 inc     [esp+5Ch+var_28]
.text:00401CA0                 add     esi, 10h
.text:00401CA3                 mov     ecx, [esi]
.text:00401CA5                 test    ecx, ecx
.text:00401CA7                 mov     edx, ecx
.text:00401CA9                 jz      short loc_401CB0
.text:00401CAB                 mov     ecx, [ebp+14h]
.text:00401CAE                 jmp     short loc_401C80
.text:00401CB0 ; ---------------------------------------------------------------------------
.text:00401CB0
.text:00401CB0 loc_401CB0:                             ; CODE XREF: sub_401A50+259↑j
.text:00401CB0                                         ; sub_401A50+A55↓j
.text:00401CB0                 mov     esi, [esp+5Ch+var_20]
.text:00401CB4                 test    esi, esi
.text:00401CB6                 jz      short loc_401CC4
.text:00401CB8                 mov     edx, [esp+5Ch+var_1C]
.text:00401CBC                 test    edx, edx
.text:00401CBE                 jz      loc_4023D0
.text:00401CC4
.text:00401CC4 loc_401CC4:                             ; CODE XREF: sub_401A50+266↑j
.text:00401CC4                 mov     eax, [esp+5Ch+var_18]
.text:00401CC8                 test    eax, eax
.text:00401CCA                 jz      loc_401E90
.text:00401CD0                 mov     ecx, [ebp+0]
.text:00401CD3                 lea     eax, [ecx+1]
.text:00401CD6                 mov     [ebp+0], eax
.text:00401CD9                 cmp     byte ptr [edi], 0
.text:00401CDC                 jz      loc_401DF0
.text:00401CE2                 mov     ecx, [esp+5Ch+var_18]
.text:00401CE6                 mov     esi, [ecx+4]
.text:00401CE9                 test    esi, esi
.text:00401CEB                 jz      short loc_401D36
.text:00401CED                 lea     ebx, [edi+1]
.text:00401CF0                 mov     [ebp+0Ch], ebx
.text:00401CF3
.text:00401CF3 loc_401CF3:                             ; CODE XREF: sub_401A50+3A8↓j
.text:00401CF3                                         ; sub_401A50+3C4↓j
.text:00401CF3                 mov     ebx, [ebp+14h]
.text:00401CF6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401CF9                 call    strlen
.text:00401CFE                 add     [ebp+14h], eax
.text:00401D01                 mov     esi, [esp+5Ch+arg_10]
.text:00401D05                 test    esi, esi
.text:00401D07                 jz      short loc_401D13
.text:00401D09                 mov     ebp, [esp+5Ch+var_24]
.text:00401D0D                 mov     ecx, [esp+5Ch+arg_10]
.text:00401D11                 mov     [ecx], ebp
.text:00401D13
.text:00401D13 loc_401D13:                             ; CODE XREF: sub_401A50+2B7↑j
.text:00401D13                 mov     eax, [esp+5Ch+var_18]
.text:00401D17                 mov     ecx, [eax+8]
.text:00401D1A                 test    ecx, ecx
.text:00401D1C                 jnz     short loc_401D2A
.text:00401D1E                 mov     ecx, [esp+5Ch+var_18]
.text:00401D22
.text:00401D22 loc_401D22:                             ; CODE XREF: sub_401A50+723↓j
.text:00401D22                 mov     eax, [ecx+0Ch]
.text:00401D25                 jmp     loc_401BA7
.text:00401D2A ; ---------------------------------------------------------------------------
.text:00401D2A
.text:00401D2A loc_401D2A:                             ; CODE XREF: sub_401A50+2CC↑j
.text:00401D2A                                         ; sub_401A50+719↓j
.text:00401D2A                 mov     esi, [eax+0Ch]
.text:00401D2D                 xor     eax, eax
.text:00401D2F                 mov     [ecx], esi
.text:00401D31                 jmp     loc_401BA7
.text:00401D36 ; ---------------------------------------------------------------------------
.text:00401D36
.text:00401D36 loc_401D36:                             ; CODE XREF: sub_401A50+29B↑j
.text:00401D36                 mov     edi, [esp+5Ch+var_14]
.text:00401D3A                 test    edi, edi
.text:00401D3C                 jz      short loc_401D90
.text:00401D3E                 mov     esi, [esp+5Ch+arg_4]
.text:00401D42                 mov     edx, [esi+eax*4-4]
.text:00401D46                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401D4A                 jz      short loc_401DB2
.text:00401D4C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401D53                 call    ds:libintl_gettext
.text:00401D59                 mov     edx, [esp+5Ch+var_18]
.text:00401D5D                 mov     edi, [edx]
.text:00401D5F                 mov     [esp+5Ch+var_4C], edi
.text:00401D63                 mov     ebx, [ebp+0]
.text:00401D66                 mov     edi, [esp+5Ch+arg_4]
.text:00401D6A                 mov     ecx, [edi+ebx*4-4]
.text:00401D6E                 movsx   esi, byte ptr [ecx]
.text:00401D71                 mov     ecx, ds:_iob
.text:00401D77                 add     ecx, 40h ; '@'
.text:00401D7A                 mov     [esp+5Ch+var_50], esi
.text:00401D7E                 mov     ebx, [edi]
.text:00401D80                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D84                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D87                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D8B                 call    fprintf
.text:00401D90
.text:00401D90 loc_401D90:                             ; CODE XREF: sub_401A50+2EC↑j
.text:00401D90                                         ; sub_401A50+398↓j
.text:00401D90                 mov     ecx, [ebp+14h]
.text:00401D93                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401D96                 call    strlen
.text:00401D9B                 add     [ebp+14h], eax
.text:00401D9E                 mov     eax, [esp+5Ch+var_18]
.text:00401DA2                 mov     esi, [eax+0Ch]
.text:00401DA5                 mov     [ebp+8], esi
.text:00401DA8
.text:00401DA8 loc_401DA8:                             ; CODE XREF: sub_401A50+4E5↓j
.text:00401DA8                                         ; sub_401A50+73E↓j ...
.text:00401DA8                 mov     eax, 3Fh ; '?'
.text:00401DAD                 jmp     loc_401BA7
.text:00401DB2 ; ---------------------------------------------------------------------------
.text:00401DB2
.text:00401DB2 loc_401DB2:                             ; CODE XREF: sub_401A50+2FA↑j
.text:00401DB2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401DB9                 call    ds:libintl_gettext
.text:00401DBF                 mov     edx, [esp+5Ch+var_18]
.text:00401DC3                 mov     edi, [esp+5Ch+arg_4]
.text:00401DC7                 mov     ecx, ds:_iob
.text:00401DCD                 mov     esi, [edx]
.text:00401DCF                 add     ecx, 40h ; '@'
.text:00401DD2                 mov     [esp+5Ch+var_50], esi
.text:00401DD6                 mov     ebx, [edi]
.text:00401DD8                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401DDC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401DDF                 mov     [esp+5Ch+MaxCount], ebx
.text:00401DE3                 call    fprintf
.text:00401DE8                 jmp     short loc_401D90
.text:00401DE8 ; ---------------------------------------------------------------------------
.text:00401DEA                 align 10h
.text:00401DF0
.text:00401DF0 loc_401DF0:                             ; CODE XREF: sub_401A50+28C↑j
.text:00401DF0                 mov     ebx, [esp+5Ch+var_18]
.text:00401DF4                 cmp     dword ptr [ebx+4], 1
.text:00401DF8                 jnz     loc_401CF3
.text:00401DFE                 cmp     eax, [esp+5Ch+arg_0]
.text:00401E02                 jge     short loc_401E19
.text:00401E04                 mov     ebx, [esp+5Ch+arg_4]
.text:00401E08                 lea     edi, [ecx+2]
.text:00401E0B                 mov     [ebp+0], edi
.text:00401E0E                 mov     esi, [ebx+eax*4]
.text:00401E11                 mov     [ebp+0Ch], esi
.text:00401E14                 jmp     loc_401CF3
.text:00401E19 ; ---------------------------------------------------------------------------
.text:00401E19
.text:00401E19 loc_401E19:                             ; CODE XREF: sub_401A50+3B2↑j
.text:00401E19                 mov     edx, [esp+5Ch+var_14]
.text:00401E1D                 test    edx, edx
.text:00401E1F                 jnz     short loc_401E50
.text:00401E21
.text:00401E21 loc_401E21:                             ; CODE XREF: sub_401A50+437↓j
.text:00401E21                 mov     edx, [ebp+14h]
.text:00401E24                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401E27                 call    strlen
.text:00401E2C                 add     [ebp+14h], eax
.text:00401E2F                 mov     eax, [esp+5Ch+var_18]
.text:00401E33                 mov     edi, [eax+0Ch]
.text:00401E36                 mov     [ebp+8], edi
.text:00401E39
.text:00401E39 loc_401E39:                             ; CODE XREF: sub_401A50+7C2↓j
.text:00401E39                 mov     ebp, [esp+5Ch+Str]
.text:00401E3D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401E41                 setnz   bl
.text:00401E44                 movzx   esi, bl
.text:00401E47                 lea     eax, [esi+esi*4+3Ah]
.text:00401E4B                 jmp     loc_401BA7
.text:00401E50 ; ---------------------------------------------------------------------------
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401A50+3CF↑j
.text:00401E50                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401E57                 call    ds:libintl_gettext
.text:00401E5D                 mov     ecx, [ebp+0]
.text:00401E60                 mov     esi, [esp+5Ch+arg_4]
.text:00401E64                 mov     ebx, [esi+ecx*4-4]
.text:00401E68                 mov     ecx, ds:_iob
.text:00401E6E                 mov     [esp+5Ch+var_50], ebx
.text:00401E72                 mov     edi, [esi]
.text:00401E74                 add     ecx, 40h ; '@'
.text:00401E77                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E7B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E7E                 mov     [esp+5Ch+MaxCount], edi
.text:00401E82                 call    fprintf
.text:00401E87                 jmp     short loc_401E21
.text:00401E87 ; ---------------------------------------------------------------------------
.text:00401E89                 align 10h
.text:00401E90
.text:00401E90 loc_401E90:                             ; CODE XREF: sub_401A50+21E↑j
.text:00401E90                                         ; sub_401A50+27A↑j
.text:00401E90                 mov     eax, [esp+5Ch+arg_14]
.text:00401E94                 test    eax, eax
.text:00401E96                 jz      short loc_401EC6
.text:00401E98                 mov     ebx, [ebp+0]
.text:00401E9B                 mov     esi, [esp+5Ch+arg_4]
.text:00401E9F                 mov     edi, [esi+ebx*4]
.text:00401EA2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401EA6                 jz      short loc_401EC9
.text:00401EA8                 mov     ecx, [ebp+14h]
.text:00401EAB                 mov     edx, [esp+5Ch+Str]
.text:00401EAF                 movsx   ebx, byte ptr [ecx]
.text:00401EB2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401EB5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401EB9                 call    strchr
.text:00401EBE                 test    eax, eax
.text:00401EC0                 jnz     loc_401F70
.text:00401EC6
.text:00401EC6 loc_401EC6:                             ; CODE XREF: sub_401A50+446↑j
.text:00401EC6                 mov     ebx, [ebp+0]
.text:00401EC9
.text:00401EC9 loc_401EC9:                             ; CODE XREF: sub_401A50+456↑j
.text:00401EC9                 mov     eax, [esp+5Ch+var_14]
.text:00401ECD                 test    eax, eax
.text:00401ECF                 jz      short loc_401F21
.text:00401ED1                 mov     esi, [esp+5Ch+arg_4]
.text:00401ED5                 mov     edi, [esi+ebx*4]
.text:00401ED8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401EDC                 jz      short loc_401F3A
.text:00401EDE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401EE5                 call    ds:libintl_gettext
.text:00401EEB                 mov     edi, [ebp+14h]
.text:00401EEE                 mov     [esp+5Ch+var_4C], edi
.text:00401EF2                 mov     ebx, [ebp+0]
.text:00401EF5                 mov     edi, [esp+5Ch+arg_4]
.text:00401EF9                 mov     esi, [edi+ebx*4]
.text:00401EFC                 movsx   ecx, byte ptr [esi]
.text:00401EFF                 mov     esi, ds:_iob
.text:00401F05                 add     esi, 40h ; '@'
.text:00401F08                 mov     [esp+5Ch+var_50], ecx
.text:00401F0C                 mov     ebx, [edi]
.text:00401F0E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F12                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401F15                 mov     [esp+5Ch+MaxCount], ebx
.text:00401F19                 call    fprintf
.text:00401F1E
.text:00401F1E loc_401F1E:                             ; CODE XREF: sub_401A50+51D↓j
.text:00401F1E                 mov     ebx, [ebp+0]
.text:00401F21
.text:00401F21 loc_401F21:                             ; CODE XREF: sub_401A50+47F↑j
.text:00401F21                 mov     dword ptr [ebp+14h], offset dword_401900
.text:00401F28                 lea     edx, [ebx+1]
.text:00401F2B                 mov     [ebp+0], edx
.text:00401F2E
.text:00401F2E loc_401F2E:                             ; CODE XREF: sub_401A50+999↓j
.text:00401F2E                 mov     dword ptr [ebp+8], 0
.text:00401F35                 jmp     loc_401DA8
.text:00401F3A ; ---------------------------------------------------------------------------
.text:00401F3A
.text:00401F3A loc_401F3A:                             ; CODE XREF: sub_401A50+48C↑j
.text:00401F3A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401F41                 call    ds:libintl_gettext
.text:00401F47                 mov     ecx, [ebp+14h]
.text:00401F4A                 mov     edi, [esp+5Ch+arg_4]
.text:00401F4E                 mov     edx, ds:_iob
.text:00401F54                 mov     [esp+5Ch+var_50], ecx
.text:00401F58                 mov     ebx, [edi]
.text:00401F5A                 add     edx, 40h ; '@'
.text:00401F5D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F61                 mov     [esp+5Ch+MaxCount], ebx
.text:00401F65                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401F68                 call    fprintf
.text:00401F6D                 jmp     short loc_401F1E
.text:00401F6D ; ---------------------------------------------------------------------------
.text:00401F6F                 align 10h
.text:00401F70
.text:00401F70 loc_401F70:                             ; CODE XREF: sub_401A50+196↑j
.text:00401F70                                         ; sub_401A50+1B5↑j ...
.text:00401F70                 mov     esi, [ebp+14h]
.text:00401F73                 movzx   ebx, byte ptr [esi]
.text:00401F76                 inc     esi
.text:00401F77                 mov     [ebp+14h], esi
.text:00401F7A                 mov     ecx, [esp+5Ch+Str]
.text:00401F7E                 movsx   esi, bl
.text:00401F81                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401F85                 mov     edi, esi
.text:00401F87                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401F8A                 call    strchr
.text:00401F8F                 mov     ecx, [ebp+14h]
.text:00401F92                 cmp     byte ptr [ecx], 0
.text:00401F95                 jnz     short loc_401F9A
.text:00401F97                 inc     dword ptr [ebp+0]
.text:00401F9A
.text:00401F9A loc_401F9A:                             ; CODE XREF: sub_401A50+545↑j
.text:00401F9A                 test    eax, eax
.text:00401F9C                 jz      loc_402380
.text:00401FA2                 cmp     bl, 3Ah ; ':'
.text:00401FA5                 jz      loc_402380
.text:00401FAB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401FAE                 jz      loc_402066
.text:00401FB4                 movzx   edx, byte ptr [eax+1]
.text:00401FB8
.text:00401FB8 loc_401FB8:                             ; CODE XREF: sub_401A50+61D↓j
.text:00401FB8                 cmp     dl, 3Ah ; ':'
.text:00401FBB                 jz      short loc_401FC4
.text:00401FBD
.text:00401FBD loc_401FBD:                             ; CODE XREF: sub_401A50+590↓j
.text:00401FBD                 mov     eax, esi
.text:00401FBF                 jmp     loc_401BA7
.text:00401FC4 ; ---------------------------------------------------------------------------
.text:00401FC4
.text:00401FC4 loc_401FC4:                             ; CODE XREF: sub_401A50+56B↑j
.text:00401FC4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401FC8                 jz      loc_402051
.text:00401FCE                 cmp     byte ptr [ecx], 0
.text:00401FD1                 jz      short loc_401FE2
.text:00401FD3
.text:00401FD3 loc_401FD3:                             ; CODE XREF: sub_401A50+604↓j
.text:00401FD3                 inc     dword ptr [ebp+0]
.text:00401FD6                 mov     [ebp+0Ch], ecx
.text:00401FD9
.text:00401FD9 loc_401FD9:                             ; CODE XREF: sub_401A50+5AB↓j
.text:00401FD9                                         ; sub_401A50+5C6↓j ...
.text:00401FD9                 mov     dword ptr [ebp+14h], 0
.text:00401FE0                 jmp     short loc_401FBD
.text:00401FE2 ; ---------------------------------------------------------------------------
.text:00401FE2
.text:00401FE2 loc_401FE2:                             ; CODE XREF: sub_401A50+581↑j
.text:00401FE2                 mov     ecx, [ebp+0]
.text:00401FE5                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401FE9                 jz      short loc_401FFD
.text:00401FEB                 mov     eax, [esp+5Ch+arg_4]
.text:00401FEF                 lea     edx, [ecx+1]
.text:00401FF2                 mov     [ebp+0], edx
.text:00401FF5                 mov     ebx, [eax+ecx*4]
.text:00401FF8                 mov     [ebp+0Ch], ebx
.text:00401FFB                 jmp     short loc_401FD9
.text:00401FFD ; ---------------------------------------------------------------------------
.text:00401FFD
.text:00401FFD loc_401FFD:                             ; CODE XREF: sub_401A50+599↑j
.text:00401FFD                 mov     ecx, [esp+5Ch+var_14]
.text:00402001                 test    ecx, ecx
.text:00402003                 jnz     short loc_40201F
.text:00402005
.text:00402005 loc_402005:                             ; CODE XREF: sub_401A50+5FF↓j
.text:00402005                 mov     [ebp+8], edi
.text:00402008                 mov     edi, [esp+5Ch+Str]
.text:0040200C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040200F                 jz      short loc_402018
.text:00402011                 mov     esi, 3Fh ; '?'
.text:00402016                 jmp     short loc_401FD9
.text:00402018 ; ---------------------------------------------------------------------------
.text:00402018
.text:00402018 loc_402018:                             ; CODE XREF: sub_401A50+5BF↑j
.text:00402018                 mov     esi, 3Ah ; ':'
.text:0040201D                 jmp     short loc_401FD9
.text:0040201F ; ---------------------------------------------------------------------------
.text:0040201F
.text:0040201F loc_40201F:                             ; CODE XREF: sub_401A50+5B3↑j
.text:0040201F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402026                 call    ds:libintl_gettext
.text:0040202C                 mov     [esp+5Ch+var_50], edi
.text:00402030                 mov     ebx, [esp+5Ch+arg_4]
.text:00402034                 mov     edx, ds:_iob
.text:0040203A                 mov     esi, [ebx]
.text:0040203C                 add     edx, 40h ; '@'
.text:0040203F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402043                 mov     [esp+5Ch+MaxCount], esi
.text:00402047                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040204A                 call    fprintf
.text:0040204F                 jmp     short loc_402005
.text:00402051 ; ---------------------------------------------------------------------------
.text:00402051
.text:00402051 loc_402051:                             ; CODE XREF: sub_401A50+578↑j
.text:00402051                 cmp     byte ptr [ecx], 0
.text:00402054                 jnz     loc_401FD3
.text:0040205A                 mov     dword ptr [ebp+0Ch], 0
.text:00402061                 jmp     loc_401FD9
.text:00402066 ; ---------------------------------------------------------------------------
.text:00402066
.text:00402066 loc_402066:                             ; CODE XREF: sub_401A50+55E↑j
.text:00402066                 movzx   edx, byte ptr [eax+1]
.text:0040206A                 cmp     dl, 3Bh ; ';'
.text:0040206D                 jnz     loc_401FB8
.text:00402073                 mov     [esp+5Ch+var_2C], 0
.text:0040207B                 mov     [esp+5Ch+var_30], 0
.text:00402083                 mov     [esp+5Ch+var_34], 0
.text:0040208B                 mov     [esp+5Ch+var_38], 0
.text:00402093                 cmp     byte ptr [ecx], 0
.text:00402096                 jz      loc_40230B
.text:0040209C                 inc     dword ptr [ebp+0]
.text:0040209F                 mov     [ebp+0Ch], ecx
.text:004020A2
.text:004020A2 loc_4020A2:                             ; CODE XREF: sub_401A50+8D4↓j
.text:004020A2                 mov     edi, [ebp+0Ch]
.text:004020A5                 mov     [ebp+14h], edi
.text:004020A8                 movzx   eax, byte ptr [edi]
.text:004020AB                 test    al, al
.text:004020AD                 jz      short loc_4020BF
.text:004020AF                 cmp     al, 3Dh ; '='
.text:004020B1                 jz      short loc_4020BF
.text:004020B3
.text:004020B3 loc_4020B3:                             ; CODE XREF: sub_401A50+66D↓j
.text:004020B3                 inc     edi
.text:004020B4                 movzx   eax, byte ptr [edi]
.text:004020B7                 test    al, al
.text:004020B9                 jz      short loc_4020BF
.text:004020BB                 cmp     al, 3Dh ; '='
.text:004020BD                 jnz     short loc_4020B3
.text:004020BF
.text:004020BF loc_4020BF:                             ; CODE XREF: sub_401A50+65D↑j
.text:004020BF                                         ; sub_401A50+661↑j ...
.text:004020BF                 mov     [esp+5Ch+var_3C], 0
.text:004020C7                 mov     esi, [esp+5Ch+arg_C]
.text:004020CB                 mov     eax, [esi]
.text:004020CD                 test    eax, eax
.text:004020CF                 jz      loc_402250
.text:004020D5                 mov     ecx, eax
.text:004020D7
.text:004020D7 loc_4020D7:                             ; CODE XREF: sub_401A50+6B3↓j
.text:004020D7                 mov     ebx, [ebp+14h]
.text:004020DA                 mov     eax, edi
.text:004020DC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004020DF                 sub     eax, ebx
.text:004020E1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004020E5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004020E9                 call    strncmp
.text:004020EE                 test    eax, eax
.text:004020F0                 jz      loc_4022B7
.text:004020F6
.text:004020F6 loc_4020F6:                             ; CODE XREF: sub_401A50+88C↓j
.text:004020F6                                         ; sub_401A50+89D↓j
.text:004020F6                 inc     [esp+5Ch+var_3C]
.text:004020FA                 add     esi, 10h
.text:004020FD                 mov     edx, [esi]
.text:004020FF                 test    edx, edx
.text:00402101                 mov     ecx, edx
.text:00402103                 jnz     short loc_4020D7
.text:00402105
.text:00402105 loc_402105:                             ; CODE XREF: sub_401A50+8B6↓j
.text:00402105                 mov     esi, [esp+5Ch+var_34]
.text:00402109                 test    esi, esi
.text:0040210B                 jz      short loc_402119
.text:0040210D                 mov     ebx, [esp+5Ch+var_30]
.text:00402111                 test    ebx, ebx
.text:00402113                 jz      loc_402261
.text:00402119
.text:00402119 loc_402119:                             ; CODE XREF: sub_401A50+6BB↑j
.text:00402119                 mov     esi, [esp+5Ch+var_2C]
.text:0040211D                 test    esi, esi
.text:0040211F                 jz      loc_402250
.text:00402125                 cmp     byte ptr [edi], 0
.text:00402128                 jz      loc_4021D0
.text:0040212E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402132                 mov     ebx, [ecx+4]
.text:00402135                 test    ebx, ebx
.text:00402137                 jz      short loc_402178
.text:00402139                 lea     edx, [edi+1]
.text:0040213C                 mov     [ebp+0Ch], edx
.text:0040213F
.text:0040213F loc_40213F:                             ; CODE XREF: sub_401A50+788↓j
.text:0040213F                                         ; sub_401A50+7A7↓j
.text:0040213F                 mov     edi, [ebp+14h]
.text:00402142                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402145                 call    strlen
.text:0040214A                 add     [ebp+14h], eax
.text:0040214D                 mov     eax, [esp+5Ch+arg_10]
.text:00402151                 test    eax, eax
.text:00402153                 jz      short loc_402160
.text:00402155                 mov     edx, [esp+5Ch+var_38]
.text:00402159                 mov     ebp, [esp+5Ch+arg_10]
.text:0040215D                 mov     [ebp+0], edx
.text:00402160
.text:00402160 loc_402160:                             ; CODE XREF: sub_401A50+703↑j
.text:00402160                 mov     eax, [esp+5Ch+var_2C]
.text:00402164                 mov     ecx, [eax+8]
.text:00402167                 test    ecx, ecx
.text:00402169                 jnz     loc_401D2A
.text:0040216F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402173                 jmp     loc_401D22
.text:00402178 ; ---------------------------------------------------------------------------
.text:00402178
.text:00402178 loc_402178:                             ; CODE XREF: sub_401A50+6E7↑j
.text:00402178                 mov     eax, [esp+5Ch+var_14]
.text:0040217C                 test    eax, eax
.text:0040217E                 jnz     short loc_402193
.text:00402180
.text:00402180 loc_402180:                             ; CODE XREF: sub_401A50+779↓j
.text:00402180                 mov     ecx, [ebp+14h]
.text:00402183                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402186                 call    strlen
.text:0040218B                 add     [ebp+14h], eax
.text:0040218E                 jmp     loc_401DA8
.text:00402193 ; ---------------------------------------------------------------------------
.text:00402193
.text:00402193 loc_402193:                             ; CODE XREF: sub_401A50+72E↑j
.text:00402193                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040219A                 call    ds:libintl_gettext
.text:004021A0                 mov     edx, [esp+5Ch+var_2C]
.text:004021A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004021A8                 mov     edi, [edx]
.text:004021AA                 mov     [esp+5Ch+var_50], edi
.text:004021AE                 mov     edi, ds:_iob
.text:004021B4                 mov     esi, [ebx]
.text:004021B6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021BA                 add     edi, 40h ; '@'
.text:004021BD                 mov     [esp+5Ch+MaxCount], esi
.text:004021C1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004021C4                 call    fprintf
.text:004021C9                 jmp     short loc_402180
.text:004021C9 ; ---------------------------------------------------------------------------
.text:004021CB                 align 10h
.text:004021D0
.text:004021D0 loc_4021D0:                             ; CODE XREF: sub_401A50+6D8↑j
.text:004021D0                 mov     esi, [esp+5Ch+var_2C]
.text:004021D4                 cmp     dword ptr [esi+4], 1
.text:004021D8                 jnz     loc_40213F
.text:004021DE                 mov     ecx, [ebp+0]
.text:004021E1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004021E5                 jge     short loc_4021FC
.text:004021E7                 mov     eax, [esp+5Ch+arg_4]
.text:004021EB                 lea     ebx, [ecx+1]
.text:004021EE                 mov     [ebp+0], ebx
.text:004021F1                 mov     edi, [eax+ecx*4]
.text:004021F4                 mov     [ebp+0Ch], edi
.text:004021F7                 jmp     loc_40213F
.text:004021FC ; ---------------------------------------------------------------------------
.text:004021FC
.text:004021FC loc_4021FC:                             ; CODE XREF: sub_401A50+795↑j
.text:004021FC                 mov     edx, [esp+5Ch+var_14]
.text:00402200                 test    edx, edx
.text:00402202                 jnz     short loc_402217
.text:00402204
.text:00402204 loc_402204:                             ; CODE XREF: sub_401A50+7FE↓j
.text:00402204                 mov     edx, [ebp+14h]
.text:00402207                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040220A                 call    strlen
.text:0040220F                 add     [ebp+14h], eax
.text:00402212                 jmp     loc_401E39
.text:00402217 ; ---------------------------------------------------------------------------
.text:00402217
.text:00402217 loc_402217:                             ; CODE XREF: sub_401A50+7B2↑j
.text:00402217                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040221E                 call    ds:libintl_gettext
.text:00402224                 mov     ecx, [ebp+0]
.text:00402227                 mov     ebx, [esp+5Ch+arg_4]
.text:0040222B                 mov     edi, [ebx+ecx*4-4]
.text:0040222F                 mov     ecx, ds:_iob
.text:00402235                 mov     [esp+5Ch+var_50], edi
.text:00402239                 mov     esi, [ebx]
.text:0040223B                 add     ecx, 40h ; '@'
.text:0040223E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402242                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402245                 mov     [esp+5Ch+MaxCount], esi
.text:00402249                 call    fprintf
.text:0040224E                 jmp     short loc_402204
.text:00402250 ; ---------------------------------------------------------------------------
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_401A50+67F↑j
.text:00402250                                         ; sub_401A50+6CF↑j
.text:00402250                 mov     dword ptr [ebp+14h], 0
.text:00402257                 mov     eax, 57h ; 'W'
.text:0040225C                 jmp     loc_401BA7
.text:00402261 ; ---------------------------------------------------------------------------
.text:00402261
.text:00402261 loc_402261:                             ; CODE XREF: sub_401A50+6C3↑j
.text:00402261                 mov     edi, [esp+5Ch+var_14]
.text:00402265                 test    edi, edi
.text:00402267                 jnz     short loc_40227F
.text:00402269
.text:00402269 loc_402269:                             ; CODE XREF: sub_401A50+865↓j
.text:00402269                 mov     edx, [ebp+14h]
.text:0040226C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040226F                 call    strlen
.text:00402274                 add     [ebp+14h], eax
.text:00402277                 inc     dword ptr [ebp+0]
.text:0040227A                 jmp     loc_401DA8
.text:0040227F ; ---------------------------------------------------------------------------
.text:0040227F
.text:0040227F loc_40227F:                             ; CODE XREF: sub_401A50+817↑j
.text:0040227F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402286                 call    ds:libintl_gettext
.text:0040228C                 mov     ecx, [ebp+0]
.text:0040228F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402293                 mov     edi, [ebx+ecx*4]
.text:00402296                 mov     ecx, ds:_iob
.text:0040229C                 mov     [esp+5Ch+var_50], edi
.text:004022A0                 mov     esi, [ebx]
.text:004022A2                 add     ecx, 40h ; '@'
.text:004022A5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022A9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004022AC                 mov     [esp+5Ch+MaxCount], esi
.text:004022B0                 call    fprintf
.text:004022B5                 jmp     short loc_402269
.text:004022B7 ; ---------------------------------------------------------------------------
.text:004022B7
.text:004022B7 loc_4022B7:                             ; CODE XREF: sub_401A50+6A0↑j
.text:004022B7                 mov     edx, [ebp+14h]
.text:004022BA                 mov     ebx, edi
.text:004022BC                 mov     ecx, [esi]
.text:004022BE                 sub     ebx, edx
.text:004022C0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004022C3                 call    strlen
.text:004022C8                 cmp     ebx, eax
.text:004022CA                 jz      short loc_4022F2
.text:004022CC                 mov     ebx, [esp+5Ch+var_2C]
.text:004022D0                 test    ebx, ebx
.text:004022D2                 jz      short loc_4022E1
.text:004022D4                 mov     [esp+5Ch+var_34], 1
.text:004022DC                 jmp     loc_4020F6
.text:004022E1 ; ---------------------------------------------------------------------------
.text:004022E1
.text:004022E1 loc_4022E1:                             ; CODE XREF: sub_401A50+882↑j
.text:004022E1                 mov     [esp+5Ch+var_2C], esi
.text:004022E5                 mov     ecx, [esp+5Ch+var_3C]
.text:004022E9                 mov     [esp+5Ch+var_38], ecx
.text:004022ED                 jmp     loc_4020F6
.text:004022F2 ; ---------------------------------------------------------------------------
.text:004022F2
.text:004022F2 loc_4022F2:                             ; CODE XREF: sub_401A50+87A↑j
.text:004022F2                 mov     [esp+5Ch+var_2C], esi
.text:004022F6                 mov     eax, [esp+5Ch+var_3C]
.text:004022FA                 mov     [esp+5Ch+var_30], 1
.text:00402302                 mov     [esp+5Ch+var_38], eax
.text:00402306                 jmp     loc_402105
.text:0040230B ; ---------------------------------------------------------------------------
.text:0040230B
.text:0040230B loc_40230B:                             ; CODE XREF: sub_401A50+646↑j
.text:0040230B                 mov     edx, [ebp+0]
.text:0040230E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402312                 jz      short loc_402329
.text:00402314                 mov     ebx, [esp+5Ch+arg_4]
.text:00402318                 lea     esi, [edx+1]
.text:0040231B                 mov     [ebp+0], esi
.text:0040231E                 mov     edi, [ebx+edx*4]
.text:00402321                 mov     [ebp+0Ch], edi
.text:00402324                 jmp     loc_4020A2
.text:00402329 ; ---------------------------------------------------------------------------
.text:00402329
.text:00402329 loc_402329:                             ; CODE XREF: sub_401A50+8C2↑j
.text:00402329                 mov     edi, [esp+5Ch+var_14]
.text:0040232D                 test    edi, edi
.text:0040232F                 jnz     short loc_40234C
.text:00402331
.text:00402331 loc_402331:                             ; CODE XREF: sub_401A50+92C↓j
.text:00402331                 mov     [ebp+8], esi
.text:00402334                 mov     ebp, [esp+5Ch+Str]
.text:00402338                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040233C                 jz      short loc_402348
.text:0040233E                 mov     bl, 3Fh ; '?'
.text:00402340
.text:00402340 loc_402340:                             ; CODE XREF: sub_401A50+8FA↓j
.text:00402340                 movsx   eax, bl
.text:00402343                 jmp     loc_401BA7
.text:00402348 ; ---------------------------------------------------------------------------
.text:00402348
.text:00402348 loc_402348:                             ; CODE XREF: sub_401A50+8EC↑j
.text:00402348                 mov     bl, 3Ah ; ':'
.text:0040234A                 jmp     short loc_402340
.text:0040234C ; ---------------------------------------------------------------------------
.text:0040234C
.text:0040234C loc_40234C:                             ; CODE XREF: sub_401A50+8DF↑j
.text:0040234C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402353                 call    ds:libintl_gettext
.text:00402359                 mov     [esp+5Ch+var_50], esi
.text:0040235D                 mov     edx, [esp+5Ch+arg_4]
.text:00402361                 mov     ecx, ds:_iob
.text:00402367                 mov     ebx, [edx]
.text:00402369                 add     ecx, 40h ; '@'
.text:0040236C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402370                 mov     [esp+5Ch+MaxCount], ebx
.text:00402374                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402377                 call    fprintf
.text:0040237C                 jmp     short loc_402331
.text:0040237C ; ---------------------------------------------------------------------------
.text:0040237E                 align 10h
.text:00402380
.text:00402380 loc_402380:                             ; CODE XREF: sub_401A50+54C↑j
.text:00402380                                         ; sub_401A50+555↑j
.text:00402380                 mov     eax, [esp+5Ch+var_14]
.text:00402384                 test    eax, eax
.text:00402386                 jz      short loc_4023BF
.text:00402388                 mov     ebx, [ebp+1Ch]
.text:0040238B                 test    ebx, ebx
.text:0040238D                 jz      short loc_4023C7
.text:0040238F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402396
.text:00402396 loc_402396:                             ; CODE XREF: sub_401A50+97E↓j
.text:00402396                 call    ds:libintl_gettext
.text:0040239C                 mov     [esp+5Ch+var_50], esi
.text:004023A0                 mov     ebx, [esp+5Ch+arg_4]
.text:004023A4                 mov     edx, ds:_iob
.text:004023AA                 mov     esi, [ebx]
.text:004023AC                 add     edx, 40h ; '@'
.text:004023AF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004023B3                 mov     [esp+5Ch+MaxCount], esi
.text:004023B7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004023BA                 call    fprintf
.text:004023BF
.text:004023BF loc_4023BF:                             ; CODE XREF: sub_401A50+936↑j
.text:004023BF                 mov     [ebp+8], edi
.text:004023C2                 jmp     loc_401DA8
.text:004023C7 ; ---------------------------------------------------------------------------
.text:004023C7
.text:004023C7 loc_4023C7:                             ; CODE XREF: sub_401A50+93D↑j
.text:004023C7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004023CE                 jmp     short loc_402396
.text:004023D0 ; ---------------------------------------------------------------------------
.text:004023D0
.text:004023D0 loc_4023D0:                             ; CODE XREF: sub_401A50+26E↑j
.text:004023D0                 mov     edi, [esp+5Ch+var_14]
.text:004023D4                 test    edi, edi
.text:004023D6                 jnz     short loc_4023EE
.text:004023D8
.text:004023D8 loc_4023D8:                             ; CODE XREF: sub_401A50+9D4↓j
.text:004023D8                 mov     edx, [ebp+14h]
.text:004023DB                 mov     [esp+5Ch+Str1], edx ; Str
.text:004023DE                 call    strlen
.text:004023E3                 add     [ebp+14h], eax
.text:004023E6                 inc     dword ptr [ebp+0]
.text:004023E9                 jmp     loc_401F2E
.text:004023EE ; ---------------------------------------------------------------------------
.text:004023EE
.text:004023EE loc_4023EE:                             ; CODE XREF: sub_401A50+986↑j
.text:004023EE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004023F5                 call    ds:libintl_gettext
.text:004023FB                 mov     ebx, [ebp+0]
.text:004023FE                 mov     edi, [esp+5Ch+arg_4]
.text:00402402                 mov     ecx, [edi+ebx*4]
.text:00402405                 mov     ebx, ds:_iob
.text:0040240B                 mov     [esp+5Ch+var_50], ecx
.text:0040240F                 mov     esi, [edi]
.text:00402411                 add     ebx, 40h ; '@'
.text:00402414                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402418                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040241B                 mov     [esp+5Ch+MaxCount], esi
.text:0040241F                 call    fprintf
.text:00402424                 jmp     short loc_4023D8
.text:00402426 ; ---------------------------------------------------------------------------
.text:00402426
.text:00402426 loc_402426:                             ; CODE XREF: sub_401A50+246↑j
.text:00402426                 mov     ecx, [ebp+14h]
.text:00402429                 mov     ebx, edi
.text:0040242B                 mov     edx, [esi]
.text:0040242D                 sub     ebx, ecx
.text:0040242F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402432                 call    strlen
.text:00402437                 cmp     ebx, eax
.text:00402439                 jz      short loc_402491
.text:0040243B                 mov     ebx, [esp+5Ch+var_18]
.text:0040243F                 test    ebx, ebx
.text:00402441                 jz      short loc_402480
.text:00402443                 mov     edx, [esp+5Ch+arg_14]
.text:00402447                 test    edx, edx
.text:00402449                 jnz     short loc_402457
.text:0040244B                 mov     ecx, [esp+5Ch+var_18]
.text:0040244F                 mov     ebx, [esi+4]
.text:00402452                 cmp     [ecx+4], ebx
.text:00402455                 jz      short loc_402464
.text:00402457
.text:00402457 loc_402457:                             ; CODE XREF: sub_401A50+9F9↑j
.text:00402457                                         ; sub_401A50+A1A↓j ...
.text:00402457                 mov     [esp+5Ch+var_20], 1
.text:0040245F                 jmp     loc_401C9C
.text:00402464 ; ---------------------------------------------------------------------------
.text:00402464
.text:00402464 loc_402464:                             ; CODE XREF: sub_401A50+A05↑j
.text:00402464                 mov     edx, [esi+8]
.text:00402467                 cmp     [ecx+8], edx
.text:0040246A                 jnz     short loc_402457
.text:0040246C                 mov     ebx, [esi+0Ch]
.text:0040246F                 cmp     [ecx+0Ch], ebx
.text:00402472                 jnz     short loc_402457
.text:00402474                 jmp     loc_401C9C
.text:00402474 ; ---------------------------------------------------------------------------
.text:00402479                 align 10h
.text:00402480
.text:00402480 loc_402480:                             ; CODE XREF: sub_401A50+9F1↑j
.text:00402480                 mov     [esp+5Ch+var_18], esi
.text:00402484                 mov     eax, [esp+5Ch+var_28]
.text:00402488                 mov     [esp+5Ch+var_24], eax
.text:0040248C                 jmp     loc_401C9C
.text:00402491 ; ---------------------------------------------------------------------------
.text:00402491
.text:00402491 loc_402491:                             ; CODE XREF: sub_401A50+9E9↑j
.text:00402491                 mov     [esp+5Ch+var_18], esi
.text:00402495                 mov     ecx, [esp+5Ch+var_28]
.text:00402499                 mov     [esp+5Ch+var_1C], 1
.text:004024A1                 mov     [esp+5Ch+var_24], ecx
.text:004024A5                 jmp     loc_401CB0
.text:004024AA ; ---------------------------------------------------------------------------
.text:004024AA
.text:004024AA loc_4024AA:                             ; CODE XREF: sub_401A50+1BF↑j
.text:004024AA                 mov     eax, [esp+5Ch+Str]
.text:004024AE                 movsx   esi, dl
.text:004024B1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004024B5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004024B8                 call    strchr
.text:004024BD                 test    eax, eax
.text:004024BF                 jnz     loc_401F70
.text:004024C5                 jmp     loc_401C15
.text:004024CA ; ---------------------------------------------------------------------------
.text:004024CA
.text:004024CA loc_4024CA:                             ; CODE XREF: sub_401A50+17C↑j
.text:004024CA                 mov     ecx, 1
.text:004024CF                 jmp     loc_401BD2
.text:004024D4 ; ---------------------------------------------------------------------------
.text:004024D4
.text:004024D4 loc_4024D4:                             ; CODE XREF: sub_401A50+D4↑j
.text:004024D4                                         ; sub_401A50+130↑j
.text:004024D4                 mov     eax, [ebp+20h]
.text:004024D7                 cmp     eax, [ebp+24h]
.text:004024DA                 jz      loc_401BB0
.text:004024E0                 mov     [ebp+0], eax
.text:004024E3                 jmp     loc_401BB0
.text:004024E8 ; ---------------------------------------------------------------------------
.text:004024E8
.text:004024E8 loc_4024E8:                             ; CODE XREF: sub_401A50+FE↑j
.text:004024E8                 mov     [ebp+20h], eax
.text:004024EB                 jmp     loc_401B70
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_401A50+CA↑j
.text:004024F0                 mov     edx, [ebp+20h]
.text:004024F3                 mov     eax, [ebp+24h]
.text:004024F6                 cmp     edx, eax
.text:004024F8                 jz      short loc_402570
.text:004024FA                 cmp     eax, ebx
.text:004024FC                 jz      short loc_402511
.text:004024FE                 mov     [esp+5Ch+Str2], ebp
.text:00402502                 mov     ebx, [esp+5Ch+arg_4]
.text:00402506                 mov     [esp+5Ch+Str1], ebx
.text:00402509                 call    sub_402700
.text:0040250E                 mov     ebx, [ebp+0]
.text:00402511
.text:00402511 loc_402511:                             ; CODE XREF: sub_401A50+AAC↑j
.text:00402511                                         ; sub_401A50+B22↓j ...
.text:00402511                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402515                 jge     short loc_402560
.text:00402517                 mov     esi, [esp+5Ch+arg_4]
.text:0040251B                 mov     eax, [esi+ebx*4]
.text:0040251E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402521                 jz      short loc_402568
.text:00402523                 lea     esi, [esi+0]
.text:00402529                 lea     edi, [edi+0]
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_401A50+AFC↓j
.text:00402530                                         ; sub_401A50+B1C↓j
.text:00402530                 lea     eax, [ebx+1]
.text:00402533                 mov     ebx, eax
.text:00402535                 mov     [ebp+0], eax
.text:00402538                 cmp     eax, [esp+5Ch+arg_0]
.text:0040253C                 jge     short loc_402560
.text:0040253E                 mov     edi, [esp+5Ch+arg_4]
.text:00402542                 mov     edx, [edi+eax*4]
.text:00402545                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402548                 jz      short loc_402550
.text:0040254A
.text:0040254A loc_40254A:                             ; CODE XREF: sub_401A50+B04↓j
.text:0040254A                 mov     ebx, eax
.text:0040254C                 jmp     short loc_402530
.text:0040254C ; ---------------------------------------------------------------------------
.text:0040254E                 align 10h
.text:00402550
.text:00402550 loc_402550:                             ; CODE XREF: sub_401A50+AF8↑j
.text:00402550                 cmp     byte ptr [edx+1], 0
.text:00402554                 jz      short loc_40254A
.text:00402556                 lea     esi, [esi+0]
.text:00402559                 lea     edi, [edi+0]
.text:00402560
.text:00402560 loc_402560:                             ; CODE XREF: sub_401A50+AC5↑j
.text:00402560                                         ; sub_401A50+AEC↑j ...
.text:00402560                 mov     [ebp+24h], ebx
.text:00402563                 jmp     loc_401B20
.text:00402568 ; ---------------------------------------------------------------------------
.text:00402568
.text:00402568 loc_402568:                             ; CODE XREF: sub_401A50+AD1↑j
.text:00402568                 cmp     byte ptr [eax+1], 0
.text:0040256C                 jz      short loc_402530
.text:0040256E                 jmp     short loc_402560
.text:00402570 ; ---------------------------------------------------------------------------
.text:00402570
.text:00402570 loc_402570:                             ; CODE XREF: sub_401A50+AA8↑j
.text:00402570                 cmp     edx, ebx
.text:00402572                 jz      short loc_402511
.text:00402574                 mov     [ebp+20h], ebx
.text:00402577                 jmp     short loc_402511
.text:00402579 ; ---------------------------------------------------------------------------
.text:00402579
.text:00402579 loc_402579:                             ; CODE XREF: sub_401A50+88↑j
.text:00402579                 mov     dword ptr [ebp+18h], 0
.text:00402580                 mov     esi, [esp+5Ch+Str]
.text:00402584
.text:00402584 loc_402584:                             ; CODE XREF: sub_401A50+B49↓j
.text:00402584                 inc     esi
.text:00402585                 jmp     loc_401AE8
.text:00402585 ; ---------------------------------------------------------------------------
.text:0040258A                 align 10h
.text:00402590
.text:00402590 loc_402590:                             ; CODE XREF: sub_401A50+80↑j
.text:00402590                 mov     dword ptr [ebp+18h], 2
.text:00402597                 mov     esi, ecx
.text:00402599                 jmp     short loc_402584
.text:00402599 ; ---------------------------------------------------------------------------
.text:0040259B                 align 10h
.text:004025A0
.text:004025A0 loc_4025A0:                             ; CODE XREF: sub_401A50+69↑j
.text:004025A0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004025A7                 call    getenv
.text:004025AC                 test    eax, eax
.text:004025AE                 jz      loc_401AC4
.text:004025B4                 jmp     loc_401ABF
.text:004025B4 ; ---------------------------------------------------------------------------
.text:004025B9                 align 10h
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_401A50+3F↑j
.text:004025C0                 mov     dword ptr [ebp+0], 1
.text:004025C7                 mov     ebx, 1
.text:004025CC                 jmp     loc_401AA0
.text:004025CC sub_401A50      endp
.text:004025CC
.text:004025D1 ; ---------------------------------------------------------------------------
.text:004025D1                 jmp     short sub_4025E0
.text:004025D1 ; ---------------------------------------------------------------------------
.text:004025D3                 align 10h
.text:004025E0
.text:004025E0 ; =============== S U B R O U T I N E =======================================
.text:004025E0
.text:004025E0
.text:004025E0 ; int __cdecl sub_4025E0(int, int, char *, int, int, int, int)
.text:004025E0 sub_4025E0      proc near               ; CODE XREF: .text:004025D1↑j
.text:004025E0                                         ; sub_402880+3A↓p ...
.text:004025E0
.text:004025E0 var_2C          = dword ptr -2Ch
.text:004025E0 var_28          = dword ptr -28h
.text:004025E0 Str             = dword ptr -24h
.text:004025E0 var_20          = dword ptr -20h
.text:004025E0 var_1C          = dword ptr -1Ch
.text:004025E0 var_18          = dword ptr -18h
.text:004025E0 var_14          = dword ptr -14h
.text:004025E0 var_10          = dword ptr -10h
.text:004025E0 arg_0           = dword ptr  4
.text:004025E0 arg_4           = dword ptr  8
.text:004025E0 arg_8           = dword ptr  0Ch
.text:004025E0 arg_C           = dword ptr  10h
.text:004025E0 arg_10          = dword ptr  14h
.text:004025E0 arg_14          = dword ptr  18h
.text:004025E0 arg_18          = dword ptr  1Ch
.text:004025E0
.text:004025E0                 sub     esp, 2Ch
.text:004025E3                 mov     edx, dword_407010
.text:004025E9                 mov     [esp+2Ch+var_10], offset dword_408000 ; int
.text:004025F1                 mov     ecx, dword_407014
.text:004025F7                 mov     ds:dword_408000, edx
.text:004025FD                 mov     edx, [esp+2Ch+arg_18]
.text:00402601                 mov     ds:dword_408004, ecx
.text:00402607                 mov     ecx, [esp+2Ch+arg_14]
.text:0040260B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040260F                 mov     edx, [esp+2Ch+arg_10]
.text:00402613                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402617                 mov     ecx, [esp+2Ch+arg_C]
.text:0040261B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040261F                 mov     edx, [esp+2Ch+arg_8]
.text:00402623                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402627                 mov     ecx, [esp+2Ch+arg_4]
.text:0040262B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040262F                 mov     edx, [esp+2Ch+arg_0]
.text:00402633                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402637                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040263A                 call    sub_401A50
.text:0040263F                 mov     ecx, ds:dword_408000
.text:00402645                 mov     dword_407010, ecx
.text:0040264B                 mov     ecx, ds:dword_40800C
.text:00402651                 mov     ds:dword_408270, ecx
.text:00402657                 mov     ecx, ds:dword_408008
.text:0040265D                 mov     dword_407018, ecx
.text:00402663                 add     esp, 2Ch
.text:00402666                 retn
.text:00402666 sub_4025E0      endp
.text:00402666
.text:00402666 ; ---------------------------------------------------------------------------
.text:00402667                 align 10h
.text:00402670                 sub     esp, 2Ch
.text:00402673                 mov     edx, dword_407010
.text:00402679                 mov     dword ptr [esp+1Ch], offset dword_408000
.text:00402681                 mov     ecx, dword_407014
.text:00402687                 mov     dword ptr [esp+18h], 1
.text:0040268F                 mov     ds:dword_408000, edx
.text:00402695                 mov     edx, [esp+38h]
.text:00402699                 mov     ds:dword_408004, ecx
.text:0040269F                 mov     ecx, [esp+34h]
.text:004026A3                 mov     [esp+8], edx
.text:004026A7                 mov     edx, [esp+30h]
.text:004026AB                 mov     [esp+4], ecx
.text:004026AF                 mov     dword ptr [esp+14h], 0
.text:004026B7                 mov     dword ptr [esp+10h], 0
.text:004026BF                 mov     dword ptr [esp+0Ch], 0
.text:004026C7                 mov     [esp], edx
.text:004026CA                 call    sub_401A50
.text:004026CF                 mov     ecx, ds:dword_408000
.text:004026D5                 mov     dword_407010, ecx
.text:004026DB                 mov     ecx, ds:dword_40800C
.text:004026E1                 mov     ds:dword_408270, ecx
.text:004026E7                 mov     ecx, ds:dword_408008
.text:004026ED                 mov     dword_407018, ecx
.text:004026F3                 add     esp, 2Ch
.text:004026F6                 retn
.text:004026F6 ; ---------------------------------------------------------------------------
.text:004026F7                 align 10h
.text:00402700
.text:00402700 ; =============== S U B R O U T I N E =======================================
.text:00402700
.text:00402700
.text:00402700 sub_402700      proc near               ; CODE XREF: sub_401A50+113↑p
.text:00402700                                         ; sub_401A50+AB9↑p
.text:00402700
.text:00402700 var_2C          = dword ptr -2Ch
.text:00402700 var_28          = dword ptr -28h
.text:00402700 var_24          = dword ptr -24h
.text:00402700 var_20          = dword ptr -20h
.text:00402700 var_1C          = dword ptr -1Ch
.text:00402700 var_18          = dword ptr -18h
.text:00402700 var_14          = dword ptr -14h
.text:00402700 arg_0           = dword ptr  4
.text:00402700 arg_4           = dword ptr  8
.text:00402700
.text:00402700                 push    ebp
.text:00402701                 push    edi
.text:00402702                 push    esi
.text:00402703                 push    ebx
.text:00402704                 sub     esp, 1Ch
.text:00402707                 mov     ecx, [esp+2Ch+arg_4]
.text:0040270B                 mov     eax, [esp+2Ch+arg_4]
.text:0040270F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402713                 mov     edx, [ecx+20h]
.text:00402716                 mov     edi, [esp+2Ch+arg_0]
.text:0040271A                 mov     ecx, [ebx]
.text:0040271C                 mov     [esp+2Ch+var_2C], edx
.text:0040271F                 mov     [esp+2Ch+var_14], edx
.text:00402723                 mov     edx, [eax+24h]
.text:00402726                 mov     [esp+2Ch+var_28], ecx
.text:0040272A                 mov     [esp+2Ch+var_1C], ecx
.text:0040272E                 cmp     ecx, edx
.text:00402730                 mov     [esp+2Ch+var_18], edx
.text:00402734                 jle     short loc_4027B0
.text:00402736                 mov     esi, [esp+2Ch+var_2C]
.text:00402739                 cmp     edx, esi
.text:0040273B                 jle     short loc_4027B0
.text:0040273D                 lea     esi, [esi+0]
.text:00402740
.text:00402740 loc_402740:                             ; CODE XREF: sub_402700+A1↓j
.text:00402740                 mov     ebx, [esp+2Ch+var_1C]
.text:00402744                 mov     edx, [esp+2Ch+var_18]
.text:00402748                 mov     ebp, [esp+2Ch+var_18]
.text:0040274C                 mov     eax, [esp+2Ch+var_14]
.text:00402750                 sub     ebx, edx
.text:00402752                 mov     [esp+2Ch+var_20], ebx
.text:00402756                 sub     ebp, eax
.text:00402758                 cmp     ebx, ebp
.text:0040275A                 jle     short loc_4027D5
.text:0040275C                 xor     esi, esi
.text:0040275E                 cmp     esi, ebp
.text:00402760                 jge     short loc_40278D
.text:00402762                 mov     ecx, [esp+2Ch+var_1C]
.text:00402766                 sub     ecx, ebp
.text:00402768                 mov     [esp+2Ch+var_24], ecx
.text:0040276C                 lea     esi, [esi+0]
.text:00402770
.text:00402770 loc_402770:                             ; CODE XREF: sub_402700+8B↓j
.text:00402770                 mov     ecx, [esp+2Ch+var_14]
.text:00402774                 mov     edx, [esp+2Ch+var_24]
.text:00402778                 add     ecx, esi
.text:0040277A                 add     edx, esi
.text:0040277C                 mov     ebx, [edi+ecx*4]
.text:0040277F                 mov     eax, [edi+edx*4]
.text:00402782                 inc     esi
.text:00402783                 cmp     esi, ebp
.text:00402785                 mov     [edi+ecx*4], eax
.text:00402788                 mov     [edi+edx*4], ebx
.text:0040278B                 jl      short loc_402770
.text:0040278D
.text:0040278D loc_40278D:                             ; CODE XREF: sub_402700+60↑j
.text:0040278D                 sub     [esp+2Ch+var_1C], ebp
.text:00402791
.text:00402791 loc_402791:                             ; CODE XREF: sub_402700+107↓j
.text:00402791                 mov     eax, [esp+2Ch+var_18]
.text:00402795                 cmp     [esp+2Ch+var_1C], eax
.text:00402799                 jle     short loc_4027B0
.text:0040279B                 mov     ebp, [esp+2Ch+var_14]
.text:0040279F                 cmp     eax, ebp
.text:004027A1                 jg      short loc_402740
.text:004027A3                 lea     esi, [esi+0]
.text:004027A9                 lea     edi, [edi+0]
.text:004027B0
.text:004027B0 loc_4027B0:                             ; CODE XREF: sub_402700+34↑j
.text:004027B0                                         ; sub_402700+3B↑j ...
.text:004027B0                 mov     esi, [esp+2Ch+var_28]
.text:004027B4                 mov     ecx, [esp+2Ch+var_18]
.text:004027B8                 mov     eax, [esp+2Ch+var_2C]
.text:004027BB                 mov     edi, [esp+2Ch+arg_4]
.text:004027BF                 mov     edx, [esp+2Ch+var_28]
.text:004027C3                 sub     esi, ecx
.text:004027C5                 add     esi, eax
.text:004027C7                 mov     [edi+20h], esi
.text:004027CA                 mov     [edi+24h], edx
.text:004027CD                 add     esp, 1Ch
.text:004027D0                 pop     ebx
.text:004027D1                 pop     esi
.text:004027D2                 pop     edi
.text:004027D3                 pop     ebp
.text:004027D4                 retn
.text:004027D5 ; ---------------------------------------------------------------------------
.text:004027D5
.text:004027D5 loc_4027D5:                             ; CODE XREF: sub_402700+5A↑j
.text:004027D5                 xor     esi, esi
.text:004027D7                 cmp     esi, [esp+2Ch+var_20]
.text:004027DB                 jge     short loc_4027FF
.text:004027DD                 lea     esi, [esi+0]
.text:004027E0
.text:004027E0 loc_4027E0:                             ; CODE XREF: sub_402700+FD↓j
.text:004027E0                 mov     ebx, [esp+2Ch+var_14]
.text:004027E4                 mov     ebp, [esp+2Ch+var_18]
.text:004027E8                 add     ebx, esi
.text:004027EA                 add     ebp, esi
.text:004027EC                 mov     edx, [edi+ebx*4]
.text:004027EF                 inc     esi
.text:004027F0                 cmp     esi, [esp+2Ch+var_20]
.text:004027F4                 mov     ecx, [edi+ebp*4]
.text:004027F7                 mov     [edi+ebx*4], ecx
.text:004027FA                 mov     [edi+ebp*4], edx
.text:004027FD                 jl      short loc_4027E0
.text:004027FF
.text:004027FF loc_4027FF:                             ; CODE XREF: sub_402700+DB↑j
.text:004027FF                 mov     esi, [esp+2Ch+var_20]
.text:00402803                 add     [esp+2Ch+var_14], esi
.text:00402807                 jmp     short loc_402791
.text:00402807 sub_402700      endp
.text:00402807
.text:00402807 ; ---------------------------------------------------------------------------
.text:00402809                 align 20h
.text:00402820
.text:00402820 ; =============== S U B R O U T I N E =======================================
.text:00402820
.text:00402820
.text:00402820 ; int __cdecl sub_402820(int, char *)
.text:00402820 sub_402820      proc near               ; CODE XREF: sub_401390+183↑p
.text:00402820                                         ; sub_401390+19F↑p
.text:00402820
.text:00402820 var_C           = dword ptr -0Ch
.text:00402820 var_8           = dword ptr -8
.text:00402820 var_4           = dword ptr -4
.text:00402820 arg_0           = dword ptr  4
.text:00402820 arg_4           = dword ptr  8
.text:00402820
.text:00402820                 sub     esp, 0Ch
.text:00402823                 mov     edx, [esp+0Ch+arg_4]
.text:00402827                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040282F                 mov     [esp+0Ch+var_4], edx ; char *
.text:00402833                 mov     edx, [esp+0Ch+arg_0]
.text:00402837                 mov     [esp+0Ch+var_C], edx ; int
.text:0040283A                 call    sub_4039B0
.text:0040283F                 add     esp, 0Ch
.text:00402842                 retn
.text:00402842 sub_402820      endp
.text:00402842
.text:00402842 ; ---------------------------------------------------------------------------
.text:00402843                 align 10h
.text:00402850
.text:00402850 ; =============== S U B R O U T I N E =======================================
.text:00402850
.text:00402850
.text:00402850 ; int __cdecl sub_402850(char *)
.text:00402850 sub_402850      proc near               ; CODE XREF: sub_401390+E7↑p
.text:00402850                                         ; sub_401390+211↑p
.text:00402850
.text:00402850 var_C           = dword ptr -0Ch
.text:00402850 var_8           = dword ptr -8
.text:00402850 var_4           = dword ptr -4
.text:00402850 arg_0           = dword ptr  4
.text:00402850
.text:00402850                 sub     esp, 0Ch
.text:00402853                 mov     edx, [esp+0Ch+arg_0]
.text:00402857                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040285F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402866                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040286A                 call    sub_4039B0
.text:0040286F                 add     esp, 0Ch
.text:00402872                 retn
.text:00402872 sub_402850      endp
.text:00402872
.text:00402872 ; ---------------------------------------------------------------------------
.text:00402873                 align 10h
.text:00402880
.text:00402880 ; =============== S U B R O U T I N E =======================================
.text:00402880
.text:00402880
.text:00402880 ; int __cdecl sub_402880(int, int, char *, int, int)
.text:00402880 sub_402880      proc near               ; CODE XREF: sub_401390+C3↑p
.text:00402880                                         ; sub_402A20+58↓p
.text:00402880
.text:00402880 var_1C          = dword ptr -1Ch
.text:00402880 var_18          = dword ptr -18h
.text:00402880 var_14          = dword ptr -14h
.text:00402880 var_10          = dword ptr -10h
.text:00402880 var_C           = dword ptr -0Ch
.text:00402880 var_8           = dword ptr -8
.text:00402880 var_4           = dword ptr -4
.text:00402880 arg_0           = dword ptr  4
.text:00402880 arg_4           = dword ptr  8
.text:00402880 arg_8           = dword ptr  0Ch
.text:00402880 arg_C           = dword ptr  10h
.text:00402880 arg_10          = dword ptr  14h
.text:00402880
.text:00402880                 sub     esp, 1Ch
.text:00402883                 mov     edx, [esp+1Ch+arg_C]
.text:00402887                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040288F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402893                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040289B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040289F                 mov     edx, [esp+1Ch+arg_4]
.text:004028A3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004028A7                 mov     ecx, [esp+1Ch+arg_8]
.text:004028AB                 mov     [esp+1Ch+var_18], edx ; int
.text:004028AF                 mov     edx, [esp+1Ch+arg_0]
.text:004028B3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004028B7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004028BA                 call    sub_4025E0
.text:004028BF                 add     esp, 1Ch
.text:004028C2                 retn
.text:004028C2 sub_402880      endp
.text:004028C2
.text:004028C2 ; ---------------------------------------------------------------------------
.text:004028C3                 align 10h
.text:004028D0                 sub     esp, 2Ch
.text:004028D3                 mov     edx, [esp+44h]
.text:004028D7                 mov     dword ptr [esp+18h], 0
.text:004028DF                 mov     ecx, [esp+40h]
.text:004028E3                 mov     dword ptr [esp+14h], 0
.text:004028EB                 mov     [esp+1Ch], edx
.text:004028EF                 mov     edx, [esp+3Ch]
.text:004028F3                 mov     [esp+10h], ecx
.text:004028F7                 mov     ecx, [esp+38h]
.text:004028FB                 mov     [esp+0Ch], edx
.text:004028FF                 mov     edx, [esp+34h]
.text:00402903                 mov     [esp+8], ecx
.text:00402907                 mov     [esp+4], edx
.text:0040290B                 mov     edx, [esp+30h]
.text:0040290F                 mov     [esp], edx
.text:00402912                 call    sub_401A50
.text:00402917                 add     esp, 2Ch
.text:0040291A                 retn
.text:0040291A ; ---------------------------------------------------------------------------
.text:0040291B                 align 10h
.text:00402920                 sub     esp, 1Ch
.text:00402923                 mov     edx, [esp+2Ch]
.text:00402927                 mov     dword ptr [esp+18h], 0
.text:0040292F                 mov     ecx, [esp+30h]
.text:00402933                 mov     dword ptr [esp+14h], 1
.text:0040293B                 mov     [esp+0Ch], edx
.text:0040293F                 mov     edx, [esp+24h]
.text:00402943                 mov     [esp+10h], ecx
.text:00402947                 mov     ecx, [esp+28h]
.text:0040294B                 mov     [esp+4], edx
.text:0040294F                 mov     edx, [esp+20h]
.text:00402953                 mov     [esp+8], ecx
.text:00402957                 mov     [esp], edx
.text:0040295A                 call    sub_4025E0
.text:0040295F                 add     esp, 1Ch
.text:00402962                 retn
.text:00402962 ; ---------------------------------------------------------------------------
.text:00402963                 align 10h
.text:00402970                 sub     esp, 2Ch
.text:00402973                 mov     edx, [esp+44h]
.text:00402977                 mov     dword ptr [esp+18h], 0
.text:0040297F                 mov     ecx, [esp+40h]
.text:00402983                 mov     dword ptr [esp+14h], 1
.text:0040298B                 mov     [esp+1Ch], edx
.text:0040298F                 mov     edx, [esp+3Ch]
.text:00402993                 mov     [esp+10h], ecx
.text:00402997                 mov     ecx, [esp+38h]
.text:0040299B                 mov     [esp+0Ch], edx
.text:0040299F                 mov     edx, [esp+34h]
.text:004029A3                 mov     [esp+8], ecx
.text:004029A7                 mov     [esp+4], edx
.text:004029AB                 mov     edx, [esp+30h]
.text:004029AF                 mov     [esp], edx
.text:004029B2                 call    sub_401A50
.text:004029B7                 add     esp, 2Ch
.text:004029BA                 retn
.text:004029BA ; ---------------------------------------------------------------------------
.text:004029BB                 align 10h
.text:004029C0 aHelp           db 'help',0             ; DATA XREF: .text:off_4029E0↓o
.text:004029C5 aVersion        db 'version',0          ; DATA XREF: .text:004029F0↓o
.text:004029CD                 align 20h
.text:004029E0 off_4029E0      dd offset aHelp         ; DATA XREF: sub_402A20+3D↓o
.text:004029E0                                         ; "help"
.text:004029E4                 dd 2 dup(0)
.text:004029EC                 dd 68h
.text:004029F0                 dd offset aVersion      ; "version"
.text:004029F4                 dd 2 dup(0)
.text:004029FC                 dd 76h, 4 dup(0)
.text:00402A10 ; ---------------------------------------------------------------------------
.text:00402A10
.text:00402A10 loc_402A10:                             ; DATA XREF: sub_402A20+45↓o
.text:00402A10                 sub     eax, [eax]
.text:00402A12                 lea     esi, [esi+0]
.text:00402A19                 lea     edi, [edi+0]
.text:00402A20
.text:00402A20 ; =============== S U B R O U T I N E =======================================
.text:00402A20
.text:00402A20
.text:00402A20 ; int __cdecl sub_402A20(int, int, FILE *, int, int, int, char)
.text:00402A20 sub_402A20      proc near               ; CODE XREF: sub_401390+9F↑p
.text:00402A20
.text:00402A20 Code            = dword ptr -1Ch
.text:00402A20 var_18          = dword ptr -18h
.text:00402A20 var_14          = dword ptr -14h
.text:00402A20 var_10          = dword ptr -10h
.text:00402A20 var_C           = dword ptr -0Ch
.text:00402A20 var_4           = dword ptr -4
.text:00402A20 arg_0           = dword ptr  4
.text:00402A20 arg_4           = dword ptr  8
.text:00402A20 arg_8           = dword ptr  0Ch
.text:00402A20 arg_C           = dword ptr  10h
.text:00402A20 arg_10          = dword ptr  14h
.text:00402A20 arg_14          = dword ptr  18h
.text:00402A20 arg_18          = byte ptr  1Ch
.text:00402A20
.text:00402A20                 sub     esp, 1Ch
.text:00402A23                 xor     eax, eax
.text:00402A25                 cmp     [esp+1Ch+arg_0], 2
.text:00402A2A                 mov     [esp+1Ch+var_4], ebx
.text:00402A2E                 mov     ebx, dword_407014
.text:00402A34                 mov     dword_407014, eax
.text:00402A39                 jz      short loc_402A51
.text:00402A3B
.text:00402A3B loc_402A3B:                             ; CODE XREF: sub_402A20+60↓j
.text:00402A3B                                         ; sub_402A20+6A↓j
.text:00402A3B                 mov     dword_407014, ebx
.text:00402A41                 xor     edx, edx
.text:00402A43                 mov     ebx, [esp+1Ch+var_4]
.text:00402A47                 mov     dword_407010, edx
.text:00402A4D                 add     esp, 1Ch
.text:00402A50                 retn
.text:00402A51 ; ---------------------------------------------------------------------------
.text:00402A51
.text:00402A51 loc_402A51:                             ; CODE XREF: sub_402A20+19↑j
.text:00402A51                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402A59                 mov     edx, [esp+1Ch+arg_4]
.text:00402A5D                 mov     [esp+1Ch+var_10], offset off_4029E0 ; int
.text:00402A65                 mov     [esp+1Ch+var_14], offset loc_402A10 ; char *
.text:00402A6D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402A71                 mov     [esp+1Ch+Code], 2 ; int
.text:00402A78                 call    sub_402880
.text:00402A7D                 cmp     eax, 0FFFFFFFFh
.text:00402A80                 jz      short loc_402A3B
.text:00402A82                 cmp     eax, 68h ; 'h'
.text:00402A85                 jz      short loc_402A8E
.text:00402A87                 cmp     eax, 76h ; 'v'
.text:00402A8A                 jnz     short loc_402A3B
.text:00402A8C                 jmp     short loc_402A99
.text:00402A8E ; ---------------------------------------------------------------------------
.text:00402A8E
.text:00402A8E loc_402A8E:                             ; CODE XREF: sub_402A20+65↑j
.text:00402A8E                 mov     [esp+1Ch+Code], 0
.text:00402A95                 call    [esp+1Ch+arg_14]
.text:00402A99
.text:00402A99 loc_402A99:                             ; CODE XREF: sub_402A20+6C↑j
.text:00402A99                 mov     ecx, [esp+1Ch+arg_10]
.text:00402A9D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402AA1                 mov     edx, [esp+1Ch+arg_C]
.text:00402AA5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402AA9                 mov     ebx, [esp+1Ch+arg_8]
.text:00402AAD                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402AB1                 mov     ecx, ds:_iob
.text:00402AB7                 mov     [esp+1Ch+var_14], edx ; int
.text:00402ABB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402ABF                 add     ecx, 20h ; ' '
.text:00402AC2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402AC5                 call    sub_404280
.text:00402ACA                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402AD1                 call    exit
.text:00402AD1 sub_402A20      endp
.text:00402AD1
.text:00402AD1 ; ---------------------------------------------------------------------------
.text:00402AD6                 align 10h
.text:00402AE0                 mov     edx, [esp+4]
.text:00402AE4                 mov     ds:dword_408030, edx
.text:00402AEA                 retn
.text:00402AEA ; ---------------------------------------------------------------------------
.text:00402AEB aWriteError     db 'write error',0      ; DATA XREF: sub_402B10:loc_402B59↓o
.text:00402AF7 ; const char aSS[]
.text:00402AF7 aSS             db '%s: %s',0           ; DATA XREF: sub_402B10+77↓o
.text:00402AFE ; const char aS_2[]
.text:00402AFE aS_2            db '%s',0               ; DATA XREF: sub_402B10+A0↓o
.text:00402B01 ; ---------------------------------------------------------------------------
.text:00402B01                 jmp     short sub_402B10
.text:00402B01 ; ---------------------------------------------------------------------------
.text:00402B03                 align 10h
.text:00402B10
.text:00402B10 ; =============== S U B R O U T I N E =======================================
.text:00402B10
.text:00402B10
.text:00402B10 ; void __cdecl sub_402B10()
.text:00402B10 sub_402B10      proc near               ; CODE XREF: .text:00402B01↑j
.text:00402B10                                         ; DATA XREF: sub_401390+5C↑o
.text:00402B10
.text:00402B10 Stream          = dword ptr -2Ch
.text:00402B10 ErrorMessage    = dword ptr -28h
.text:00402B10 var_24          = dword ptr -24h
.text:00402B10 var_20          = byte ptr -20h
.text:00402B10 var_1C          = dword ptr -1Ch
.text:00402B10 var_9           = byte ptr -9
.text:00402B10
.text:00402B10                 push    esi
.text:00402B11                 push    ebx
.text:00402B12                 sub     esp, 24h
.text:00402B15                 mov     edx, ds:_iob
.text:00402B1B                 mov     ecx, [edx+2Ch]
.text:00402B1E                 lea     esi, [edx+20h]
.text:00402B21                 shr     ecx, 5
.text:00402B24                 mov     bl, cl
.text:00402B26                 mov     ecx, [edx+20h]
.text:00402B29                 and     bl, 1
.text:00402B2C                 cmp     ecx, [esi+8]
.text:00402B2F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402B32                 setz    [esp+2Ch+var_9]
.text:00402B37                 call    fclose
.text:00402B3C                 test    eax, eax
.text:00402B3E                 setnz   al
.text:00402B41                 test    bl, bl
.text:00402B43                 jnz     loc_402BD3
.text:00402B49                 test    al, al
.text:00402B4B                 jz      short loc_402BA0
.text:00402B4D
.text:00402B4D loc_402B4D:                             ; CODE XREF: sub_402B10+CD↓j
.text:00402B4D                 call    _errno
.text:00402B52                 mov     esi, [eax]
.text:00402B54
.text:00402B54 loc_402B54:                             ; CODE XREF: sub_402B10+C7↓j
.text:00402B54                 cmp     esi, 9
.text:00402B57                 jz      short loc_402BC6
.text:00402B59
.text:00402B59 loc_402B59:                             ; CODE XREF: sub_402B10+B8↓j
.text:00402B59                                         ; sub_402B10+C1↓j
.text:00402B59                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402B60                 call    ds:libintl_gettext
.text:00402B66                 mov     ebx, eax
.text:00402B68                 mov     eax, ds:dword_408030
.text:00402B6D                 test    eax, eax
.text:00402B6F                 jz      short loc_402BA6
.text:00402B71                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402B74                 call    sub_403D20
.text:00402B79                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402B7D                 mov     edx, Code
.text:00402B83                 mov     [esp+2Ch+var_1C], ebx
.text:00402B87                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402B8F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402B93                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402B96                 call    sub_404810
.text:00402B9B                 nop
.text:00402B9C                 lea     esi, [esi+0]
.text:00402BA0
.text:00402BA0 loc_402BA0:                             ; CODE XREF: sub_402B10+3B↑j
.text:00402BA0                                         ; sub_402B10+B4↓j ...
.text:00402BA0                 add     esp, 24h
.text:00402BA3                 pop     ebx
.text:00402BA4                 pop     esi
.text:00402BA5                 retn
.text:00402BA6 ; ---------------------------------------------------------------------------
.text:00402BA6
.text:00402BA6 loc_402BA6:                             ; CODE XREF: sub_402B10+5F↑j
.text:00402BA6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402BAA                 mov     ebx, Code
.text:00402BB0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402BB8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402BBC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402BBF                 call    sub_404810
.text:00402BC4                 jmp     short loc_402BA0
.text:00402BC6 ; ---------------------------------------------------------------------------
.text:00402BC6
.text:00402BC6 loc_402BC6:                             ; CODE XREF: sub_402B10+47↑j
.text:00402BC6                 test    bl, bl
.text:00402BC8                 jnz     short loc_402B59
.text:00402BCA                 cmp     [esp+2Ch+var_9], 0
.text:00402BCF                 jnz     short loc_402BA0
.text:00402BD1                 jmp     short loc_402B59
.text:00402BD3 ; ---------------------------------------------------------------------------
.text:00402BD3
.text:00402BD3 loc_402BD3:                             ; CODE XREF: sub_402B10+33↑j
.text:00402BD3                 xor     esi, esi
.text:00402BD5                 test    al, al
.text:00402BD7                 jz      loc_402B54
.text:00402BDD                 jmp     loc_402B4D
.text:00402BDD sub_402B10      endp
.text:00402BDD
.text:00402BDD ; ---------------------------------------------------------------------------
.text:00402BE2                 align 10h
.text:00402BF0 aLiteral        db 'literal',0          ; DATA XREF: .text:00402C30↓o
.text:00402BF8 aShell          db 'shell',0            ; DATA XREF: .text:00402C34↓o
.text:00402BFE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402C38↓o
.text:00402C0B aC              db 'c',0                ; DATA XREF: .text:00402C3C↓o
.text:00402C0D aEscape         db 'escape',0           ; DATA XREF: .text:00402C40↓o
.text:00402C14 aLocale         db 'locale',0           ; DATA XREF: .text:00402C44↓o
.text:00402C1B aClocale        db 'clocale',0          ; DATA XREF: .text:00402C48↓o
.text:00402C23                 align 10h
.text:00402C30                 dd offset aLiteral      ; "literal"
.text:00402C34                 dd offset aShell        ; "shell"
.text:00402C38                 dd offset aShellAlways  ; "shell-always"
.text:00402C3C                 dd offset aC            ; "c"
.text:00402C40                 dd offset aEscape       ; "escape"
.text:00402C44                 dd offset aLocale       ; "locale"
.text:00402C48                 dd offset aClocale      ; "clocale"
.text:00402C4C                 dd 2 dup(0)
.text:00402C54                 dd 1, 2, 3, 4, 5, 6
.text:00402C6C asc_402C6C:                             ; DATA XREF: sub_402C80+7E↓o
.text:00402C6C                                         ; sub_402C80+A39↓o ...
.text:00402C6C                 text "UTF-16LE", '"',27h,'`'
.text:00402C72                 align 10h
.text:00402C80
.text:00402C80 ; =============== S U B R O U T I N E =======================================
.text:00402C80
.text:00402C80
.text:00402C80 ; int __cdecl sub_402C80(int, int, char *Str, int, int, int)
.text:00402C80 sub_402C80      proc near               ; CODE XREF: sub_402C80+43A↓p
.text:00402C80                                         ; .text:00403843↓p ...
.text:00402C80
.text:00402C80 C               = dword ptr -4Ch
.text:00402C80 Type            = dword ptr -48h
.text:00402C80 SizeInBytes     = dword ptr -44h
.text:00402C80 State           = dword ptr -40h
.text:00402C80 var_3C          = dword ptr -3Ch
.text:00402C80 var_38          = dword ptr -38h
.text:00402C80 var_34          = dword ptr -34h
.text:00402C80 var_30          = dword ptr -30h
.text:00402C80 var_29          = byte ptr -29h
.text:00402C80 var_28          = dword ptr -28h
.text:00402C80 var_22          = byte ptr -22h
.text:00402C80 var_21          = byte ptr -21h
.text:00402C80 var_20          = dword ptr -20h
.text:00402C80 var_1C          = dword ptr -1Ch
.text:00402C80 var_18          = mbstate_t ptr -18h
.text:00402C80 arg_0           = dword ptr  4
.text:00402C80 arg_4           = dword ptr  8
.text:00402C80 Str             = dword ptr  0Ch
.text:00402C80 arg_C           = dword ptr  10h
.text:00402C80 arg_10          = dword ptr  14h
.text:00402C80 arg_14          = dword ptr  18h
.text:00402C80
.text:00402C80                 push    ebp
.text:00402C81                 push    edi
.text:00402C82                 push    esi
.text:00402C83                 push    ebx
.text:00402C84                 sub     esp, 3Ch
.text:00402C87                 mov     edx, ds:__mb_cur_max
.text:00402C8D                 mov     [esp+4Ch+var_34], 0
.text:00402C95                 mov     [esp+4Ch+var_1C], 0
.text:00402C9D                 cmp     dword ptr [edx], 1
.text:00402CA0                 mov     [esp+4Ch+var_20], 0
.text:00402CA8                 mov     [esp+4Ch+var_21], 0
.text:00402CAD                 setz    [esp+4Ch+var_22]
.text:00402CB2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402CB7                 ja      short def_402CBD ; jumptable 00402CBD default case, cases 0,1
.text:00402CB9                 mov     edx, [esp+4Ch+arg_10]
.text:00402CBD                 jmp     ds:jpt_402CBD[edx*4] ; switch jump
.text:00402CBD ; ---------------------------------------------------------------------------
.text:00402CC4 jpt_402CBD      dd offset def_402CBD    ; DATA XREF: sub_402C80+3D↑r
.text:00402CC4                 dd offset def_402CBD    ; jump table for switch statement
.text:00402CC4                 dd offset loc_403605
.text:00402CC4                 dd offset loc_402CE0
.text:00402CC4                 dd offset loc_40362B
.text:00402CC4                 dd offset loc_403635
.text:00402CC4                 dd offset loc_403635
.text:00402CE0 ; ---------------------------------------------------------------------------
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_402C80+3D↑j
.text:00402CE0                                         ; DATA XREF: sub_402C80:jpt_402CBD↑o
.text:00402CE0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402CBD case 3
.text:00402CE4                 cmp     [esp+4Ch+var_34], eax
.text:00402CE8                 jnb     short loc_402CF1
.text:00402CEA                 mov     ebx, [esp+4Ch+arg_0]
.text:00402CEE                 mov     byte ptr [ebx], 22h ; '"'
.text:00402CF1
.text:00402CF1 loc_402CF1:                             ; CODE XREF: sub_402C80+68↑j
.text:00402CF1                 mov     [esp+4Ch+var_34], 1
.text:00402CF9                 mov     [esp+4Ch+var_21], 1
.text:00402CFE                 mov     [esp+4Ch+var_1C], offset asc_402C6C ; "\"'`"
.text:00402D06
.text:00402D06 loc_402D06:                             ; CODE XREF: sub_402C80+9A6↓j
.text:00402D06                 mov     [esp+4Ch+var_20], 1
.text:00402D0E
.text:00402D0E def_402CBD:                             ; CODE XREF: sub_402C80+37↑j
.text:00402D0E                                         ; sub_402C80+3D↑j ...
.text:00402D0E                 xor     ebp, ebp        ; jumptable 00402CBD default case, cases 0,1
.text:00402D10
.text:00402D10 loc_402D10:                             ; CODE XREF: sub_402C80+3DB↓j
.text:00402D10                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402D15                 jz      loc_4035F7
.text:00402D1B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402D1F
.text:00402D1F loc_402D1F:                             ; CODE XREF: sub_402C80+980↓j
.text:00402D1F                 jz      loc_40358E
.text:00402D25                 cmp     [esp+4Ch+var_21], 0
.text:00402D2A                 jz      short loc_402D70
.text:00402D2C                 mov     esi, [esp+4Ch+var_20]
.text:00402D30                 test    esi, esi
.text:00402D32                 jz      short loc_402D70
.text:00402D34                 mov     ecx, [esp+4Ch+var_20]
.text:00402D38                 lea     edi, [ecx+ebp]
.text:00402D3B                 cmp     edi, [esp+4Ch+arg_C]
.text:00402D3F                 ja      short loc_402D70
.text:00402D41                 cld
.text:00402D42                 mov     ebx, [esp+4Ch+Str]
.text:00402D46                 mov     edi, [esp+4Ch+var_1C]
.text:00402D4A                 add     ebx, ebp
.text:00402D4C                 mov     esi, ebx
.text:00402D4E                 cmp     ecx, ecx
.text:00402D50                 repe cmpsb
.text:00402D52                 jnz     short loc_402D70
.text:00402D54                 mov     edx, [esp+4Ch+arg_4]
.text:00402D58                 cmp     [esp+4Ch+var_34], edx
.text:00402D5C                 jnb     short loc_402D6A
.text:00402D5E                 mov     ecx, [esp+4Ch+arg_0]
.text:00402D62                 mov     eax, [esp+4Ch+var_34]
.text:00402D66                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402D6A
.text:00402D6A loc_402D6A:                             ; CODE XREF: sub_402C80+DC↑j
.text:00402D6A                 inc     [esp+4Ch+var_34]
.text:00402D6E                 mov     esi, esi
.text:00402D70
.text:00402D70 loc_402D70:                             ; CODE XREF: sub_402C80+AA↑j
.text:00402D70                                         ; sub_402C80+B2↑j ...
.text:00402D70                 mov     edi, [esp+4Ch+Str]
.text:00402D74                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402D79                 movzx   eax, bl
.text:00402D7C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402D7F                 ja      def_402D85      ; jumptable 00402D85 default case, cases 1-6,14-31,64
.text:00402D85                 jmp     ds:jpt_402D85[eax*4] ; switch jump
.text:00402D85 ; ---------------------------------------------------------------------------
.text:00402D8C jpt_402D85      dd offset loc_402F88, offset def_402D85, offset def_402D85
.text:00402D8C                                         ; DATA XREF: sub_402C80+105↑r
.text:00402D8C                 dd offset def_402D85, offset def_402D85, offset def_402D85 ; jump table for switch statement
.text:00402D8C                 dd offset def_402D85, offset loc_403060, offset loc_40307E
.text:00402D8C                 dd offset loc_403082, offset loc_4030C7, offset loc_4030CB
.text:00402D8C                 dd offset loc_4030CF, offset loc_4030D3, offset def_402D85
.text:00402D8C                 dd offset def_402D85, offset def_402D85, offset def_402D85
.text:00402D8C                 dd offset def_402D85, offset def_402D85, offset def_402D85
.text:00402D8C                 dd offset def_402D85, offset def_402D85, offset def_402D85
.text:00402D8C                 dd offset def_402D85, offset def_402D85, offset def_402D85
.text:00402D8C                 dd offset def_402D85, offset def_402D85, offset def_402D85
.text:00402D8C                 dd offset def_402D85, offset def_402D85, offset loc_403558
.text:00402D8C                 dd offset loc_403558, offset loc_403558, offset loc_40357A
.text:00402D8C                 dd offset loc_403558, offset def_403182, offset loc_403558
.text:00402D8C                 dd offset loc_4030D7, offset loc_403558, offset loc_403558
.text:00402D8C                 dd offset loc_403558, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset loc_403558
.text:00402D8C                 dd offset loc_403558, offset loc_403558, offset loc_403558
.text:00402D8C                 dd offset loc_40313C, offset def_402D85, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset loc_403558, offset loc_403551
.text:00402D8C                 dd offset def_403182, offset loc_403558, offset def_403182
.text:00402D8C                 dd offset loc_403558, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset def_403182, offset def_403182, offset def_403182
.text:00402D8C                 dd offset loc_403568, offset loc_403558, offset loc_403568
.text:00402D8C                 dd offset loc_40357A
.text:00402F88 ; ---------------------------------------------------------------------------
.text:00402F88
.text:00402F88 loc_402F88:                             ; CODE XREF: sub_402C80+105↑j
.text:00402F88                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:00402F88                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402D85 case 0
.text:00402F8D                 lea     eax, [ebp+1]
.text:00402F90                 jz      loc_403040
.text:00402F96                 mov     esi, [esp+4Ch+arg_4]
.text:00402F9A                 cmp     [esp+4Ch+var_34], esi
.text:00402F9E                 jnb     short loc_402FAC
.text:00402FA0                 mov     eax, [esp+4Ch+arg_0]
.text:00402FA4                 mov     ebx, [esp+4Ch+var_34]
.text:00402FA8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00402FAC
.text:00402FAC loc_402FAC:                             ; CODE XREF: sub_402C80+31E↑j
.text:00402FAC                 inc     [esp+4Ch+var_34]
.text:00402FB0                 mov     edx, [esp+4Ch+arg_4]
.text:00402FB4                 cmp     [esp+4Ch+var_34], edx
.text:00402FB8                 jnb     short loc_402FC6
.text:00402FBA                 mov     edi, [esp+4Ch+arg_0]
.text:00402FBE                 mov     ecx, [esp+4Ch+var_34]
.text:00402FC2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00402FC6
.text:00402FC6 loc_402FC6:                             ; CODE XREF: sub_402C80+338↑j
.text:00402FC6                 inc     [esp+4Ch+var_34]
.text:00402FCA                 mov     esi, [esp+4Ch+arg_4]
.text:00402FCE                 cmp     [esp+4Ch+var_34], esi
.text:00402FD2                 jnb     short loc_402FE0
.text:00402FD4                 mov     ebx, [esp+4Ch+arg_0]
.text:00402FD8                 mov     eax, [esp+4Ch+var_34]
.text:00402FDC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00402FE0
.text:00402FE0 loc_402FE0:                             ; CODE XREF: sub_402C80+352↑j
.text:00402FE0                 inc     [esp+4Ch+var_34]
.text:00402FE4                 mov     bl, 30h ; '0'
.text:00402FE6                 lea     esi, [esi+0]
.text:00402FE9                 lea     edi, [edi+0]
.text:00402FF0
.text:00402FF0 def_403182:                             ; CODE XREF: sub_402C80+105↑j
.text:00402FF0                                         ; sub_402C80+463↓j ...
.text:00402FF0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:00402FF0                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:00402FF5                 lea     eax, [ebp+1]
.text:00402FF8                 jz      short loc_403040
.text:00402FFA                 mov     cl, bl
.text:00402FFC                 mov     edi, [esp+4Ch+arg_14]
.text:00403000                 mov     esi, 1
.text:00403005                 shr     cl, 5
.text:00403008                 movzx   edx, cl
.text:0040300B                 mov     ecx, ebx
.text:0040300D                 and     ecx, 1Fh
.text:00403010                 shl     esi, cl
.text:00403012                 test    [edi+edx*4+4], esi
.text:00403016                 jz      short loc_403032
.text:00403018
.text:00403018 loc_403018:                             ; CODE XREF: sub_402C80+3FC↓j
.text:00403018                 mov     edx, [esp+4Ch+arg_4]
.text:0040301C                 cmp     [esp+4Ch+var_34], edx
.text:00403020                 jnb     short loc_40302E
.text:00403022                 mov     edi, [esp+4Ch+arg_0]
.text:00403026                 mov     esi, [esp+4Ch+var_34]
.text:0040302A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040302E
.text:0040302E loc_40302E:                             ; CODE XREF: sub_402C80+3A0↑j
.text:0040302E                 inc     [esp+4Ch+var_34]
.text:00403032
.text:00403032 loc_403032:                             ; CODE XREF: sub_402C80+396↑j
.text:00403032                 lea     eax, [ebp+1]
.text:00403035                 lea     esi, [esi+0]
.text:00403039                 lea     edi, [edi+0]
.text:00403040
.text:00403040 loc_403040:                             ; CODE XREF: sub_402C80+310↑j
.text:00403040                                         ; sub_402C80+378↑j ...
.text:00403040                 mov     ebp, [esp+4Ch+arg_4]
.text:00403044                 cmp     [esp+4Ch+var_34], ebp
.text:00403048                 jnb     short loc_403055
.text:0040304A                 mov     edx, [esp+4Ch+arg_0]
.text:0040304E                 mov     ecx, [esp+4Ch+var_34]
.text:00403052                 mov     [ecx+edx], bl
.text:00403055
.text:00403055 loc_403055:                             ; CODE XREF: sub_402C80+3C8↑j
.text:00403055                 inc     [esp+4Ch+var_34]
.text:00403059                 mov     ebp, eax
.text:0040305B                 jmp     loc_402D10
.text:00403060 ; ---------------------------------------------------------------------------
.text:00403060
.text:00403060 loc_403060:                             ; CODE XREF: sub_402C80+105↑j
.text:00403060                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:00403060                 mov     dl, 61h ; 'a'   ; jumptable 00402D85 case 7
.text:00403062                 lea     esi, [esi+0]
.text:00403069                 lea     edi, [edi+0]
.text:00403070
.text:00403070 loc_403070:                             ; CODE XREF: sub_402C80+400↓j
.text:00403070                                         ; sub_402C80+409↓j ...
.text:00403070                 cmp     [esp+4Ch+var_21], 0
.text:00403075                 lea     eax, [ebp+1]
.text:00403078                 jz      short loc_403040
.text:0040307A                 mov     bl, dl
.text:0040307C                 jmp     short loc_403018
.text:0040307E ; ---------------------------------------------------------------------------
.text:0040307E
.text:0040307E loc_40307E:                             ; CODE XREF: sub_402C80+105↑j
.text:0040307E                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:0040307E                 mov     dl, 62h ; 'b'   ; jumptable 00402D85 case 8
.text:00403080                 jmp     short loc_403070
.text:00403082 ; ---------------------------------------------------------------------------
.text:00403082
.text:00403082 loc_403082:                             ; CODE XREF: sub_402C80+105↑j
.text:00403082                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:00403082                 mov     dl, 74h ; 't'   ; jumptable 00402D85 case 9
.text:00403084
.text:00403084 loc_403084:                             ; CODE XREF: sub_402C80+449↓j
.text:00403084                                         ; sub_402C80+455↓j ...
.text:00403084                 cmp     [esp+4Ch+arg_10], 1
.text:00403089                 jnz     short loc_403070
.text:0040308B
.text:0040308B loc_40308B:                             ; CODE XREF: sub_402C80+45C↓j
.text:0040308B                                         ; sub_402C80+4C1↓j ...
.text:0040308B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403452 cases 91,92,94,96,124
.text:00403093                 mov     eax, [esp+4Ch+arg_14]
.text:00403097                 mov     edx, [esp+4Ch+arg_C]
.text:0040309B                 mov     ecx, [esp+4Ch+Str]
.text:0040309F                 mov     ebx, [esp+4Ch+arg_4]
.text:004030A3                 mov     [esp+4Ch+var_38], eax ; int
.text:004030A7                 mov     ebp, [esp+4Ch+arg_0]
.text:004030AB                 mov     [esp+4Ch+State], edx ; int
.text:004030AF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004030B3                 mov     [esp+4Ch+Type], ebx ; int
.text:004030B7                 mov     [esp+4Ch+C], ebp ; int
.text:004030BA                 call    sub_402C80
.text:004030BF
.text:004030BF loc_4030BF:                             ; CODE XREF: sub_402C80+972↓j
.text:004030BF                 add     esp, 3Ch
.text:004030C2                 pop     ebx
.text:004030C3                 pop     esi
.text:004030C4                 pop     edi
.text:004030C5                 pop     ebp
.text:004030C6                 retn
.text:004030C7 ; ---------------------------------------------------------------------------
.text:004030C7
.text:004030C7 loc_4030C7:                             ; CODE XREF: sub_402C80+105↑j
.text:004030C7                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:004030C7                 mov     dl, 6Eh ; 'n'   ; jumptable 00402D85 case 10
.text:004030C9                 jmp     short loc_403084
.text:004030CB ; ---------------------------------------------------------------------------
.text:004030CB
.text:004030CB loc_4030CB:                             ; CODE XREF: sub_402C80+105↑j
.text:004030CB                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:004030CB                 mov     dl, 76h ; 'v'   ; jumptable 00402D85 case 11
.text:004030CD                 jmp     short loc_403070
.text:004030CF ; ---------------------------------------------------------------------------
.text:004030CF
.text:004030CF loc_4030CF:                             ; CODE XREF: sub_402C80+105↑j
.text:004030CF                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:004030CF                 mov     dl, 66h ; 'f'   ; jumptable 00402D85 case 12
.text:004030D1                 jmp     short loc_403070
.text:004030D3 ; ---------------------------------------------------------------------------
.text:004030D3
.text:004030D3 loc_4030D3:                             ; CODE XREF: sub_402C80+105↑j
.text:004030D3                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:004030D3                 mov     dl, 72h ; 'r'   ; jumptable 00402D85 case 13
.text:004030D5                 jmp     short loc_403084
.text:004030D7 ; ---------------------------------------------------------------------------
.text:004030D7
.text:004030D7 loc_4030D7:                             ; CODE XREF: sub_402C80+105↑j
.text:004030D7                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:004030D7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402D85 case 39
.text:004030DC                 jz      short loc_40308B ; jumptable 00403452 cases 91,92,94,96,124
.text:004030DE                 cmp     [esp+4Ch+arg_10], 2
.text:004030E3                 jnz     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:004030E3                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:004030E9                 mov     edx, [esp+4Ch+arg_4]
.text:004030ED                 cmp     [esp+4Ch+var_34], edx
.text:004030F1                 jnb     short loc_4030FF
.text:004030F3                 mov     ecx, [esp+4Ch+arg_0]
.text:004030F7                 mov     edi, [esp+4Ch+var_34]
.text:004030FB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004030FF
.text:004030FF loc_4030FF:                             ; CODE XREF: sub_402C80+471↑j
.text:004030FF                 inc     [esp+4Ch+var_34]
.text:00403103                 mov     eax, [esp+4Ch+arg_4]
.text:00403107                 cmp     [esp+4Ch+var_34], eax
.text:0040310B                 jnb     short loc_403119
.text:0040310D                 mov     esi, [esp+4Ch+arg_0]
.text:00403111                 mov     edx, [esp+4Ch+var_34]
.text:00403115                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403119
.text:00403119 loc_403119:                             ; CODE XREF: sub_402C80+48B↑j
.text:00403119                 inc     [esp+4Ch+var_34]
.text:0040311D                 mov     edi, [esp+4Ch+arg_4]
.text:00403121                 cmp     [esp+4Ch+var_34], edi
.text:00403125                 jnb     short loc_403133
.text:00403127                 mov     ecx, [esp+4Ch+arg_0]
.text:0040312B                 mov     eax, [esp+4Ch+var_34]
.text:0040312F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403133
.text:00403133 loc_403133:                             ; CODE XREF: sub_402C80+4A5↑j
.text:00403133                                         ; sub_402C80+5C4↓j ...
.text:00403133                 inc     [esp+4Ch+var_34]
.text:00403137                 jmp     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:00403137                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:0040313C ; ---------------------------------------------------------------------------
.text:0040313C
.text:0040313C loc_40313C:                             ; CODE XREF: sub_402C80+105↑j
.text:0040313C                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:0040313C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402D85 case 63
.text:00403141                 jz      loc_40308B      ; jumptable 00403452 cases 91,92,94,96,124
.text:00403147                 cmp     [esp+4Ch+arg_10], 3
.text:0040314C                 jnz     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:0040314C                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:00403152                 lea     edx, [ebp+2]
.text:00403155                 cmp     edx, [esp+4Ch+arg_C]
.text:00403159                 jnb     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:00403159                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:0040315F                 mov     esi, [esp+4Ch+Str]
.text:00403163                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403168                 jnz     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:00403168                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:0040316E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403173                 movsx   eax, cl
.text:00403176                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403179                 cmp     eax, 1Dh
.text:0040317C                 ja      def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:0040317C                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:00403182                 jmp     ds:jpt_403182[eax*4] ; switch jump
.text:00403182 ; ---------------------------------------------------------------------------
.text:00403189                 align 4
.text:0040318C jpt_403182      dd offset loc_403204    ; DATA XREF: sub_402C80+502↑r
.text:0040318C                 dd offset def_403182    ; jump table for switch statement
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset loc_403204
.text:0040318C                 dd offset loc_403204
.text:0040318C                 dd offset loc_403204
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset loc_403204
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset loc_403204
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset def_403182
.text:0040318C                 dd offset loc_403204
.text:0040318C                 dd offset loc_403204
.text:0040318C                 dd offset loc_403204
.text:00403204 ; ---------------------------------------------------------------------------
.text:00403204
.text:00403204 loc_403204:                             ; CODE XREF: sub_402C80+502↑j
.text:00403204                                         ; DATA XREF: sub_402C80:jpt_403182↑o
.text:00403204                 mov     ebp, edx        ; jumptable 00403182 cases 33,39-41,45,47,60-62
.text:00403206                 mov     bl, cl
.text:00403208                 mov     edx, [esp+4Ch+arg_4]
.text:0040320C                 cmp     [esp+4Ch+var_34], edx
.text:00403210                 jnb     short loc_40321E
.text:00403212                 mov     ecx, [esp+4Ch+arg_0]
.text:00403216                 mov     edi, [esp+4Ch+var_34]
.text:0040321A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040321E
.text:0040321E loc_40321E:                             ; CODE XREF: sub_402C80+590↑j
.text:0040321E                 inc     [esp+4Ch+var_34]
.text:00403222                 mov     eax, [esp+4Ch+arg_4]
.text:00403226                 cmp     [esp+4Ch+var_34], eax
.text:0040322A                 jnb     short loc_403238
.text:0040322C                 mov     edx, [esp+4Ch+arg_0]
.text:00403230                 mov     esi, [esp+4Ch+var_34]
.text:00403234                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403238
.text:00403238 loc_403238:                             ; CODE XREF: sub_402C80+5AA↑j
.text:00403238                 inc     [esp+4Ch+var_34]
.text:0040323C                 mov     edi, [esp+4Ch+arg_4]
.text:00403240                 cmp     [esp+4Ch+var_34], edi
.text:00403244                 jnb     loc_403133
.text:0040324A                 mov     eax, [esp+4Ch+arg_0]
.text:0040324E                 mov     ecx, [esp+4Ch+var_34]
.text:00403252                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403256                 jmp     loc_403133
.text:00403256 ; ---------------------------------------------------------------------------
.text:0040325B                 align 10h
.text:00403260
.text:00403260 def_402D85:                             ; CODE XREF: sub_402C80+FF↑j
.text:00403260                                         ; sub_402C80+105↑j
.text:00403260                                         ; DATA XREF: ...
.text:00403260                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402D85 default case, cases 1-6,14-31,64
.text:00403265                 jz      loc_403390
.text:0040326B                 mov     [esp+4Ch+var_28], 1
.text:00403273                 mov     esi, ds:__mb_cur_max
.text:00403279                 movzx   edx, bl
.text:0040327C                 cmp     dword ptr [esi], 1
.text:0040327F                 jz      loc_403374
.text:00403285                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040328D                 mov     [esp+4Ch+C], edx ; C
.text:00403290                 call    _isctype
.text:00403295
.text:00403295 loc_403295:                             ; CODE XREF: sub_402C80+705↓j
.text:00403295                 test    eax, eax
.text:00403297                 setnz   [esp+4Ch+var_29]
.text:0040329C
.text:0040329C loc_40329C:                             ; CODE XREF: sub_402C80+7A5↓j
.text:0040329C                 cmp     [esp+4Ch+var_21], 0
.text:004032A1                 lea     eax, [ebp+1]
.text:004032A4                 jz      loc_403040
.text:004032AA                 cmp     [esp+4Ch+var_29], 0
.text:004032AF                 jnz     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:004032AF                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:004032B5
.text:004032B5 loc_4032B5:                             ; CODE XREF: sub_402C80+7AB↓j
.text:004032B5                 mov     eax, [esp+4Ch+var_28]
.text:004032B9                 lea     edx, [eax+ebp]
.text:004032BC                 lea     esi, [esi+0]
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_402C80+6EF↓j
.text:004032C0                 cmp     [esp+4Ch+var_21], 0
.text:004032C5                 jz      short loc_403340
.text:004032C7                 cmp     [esp+4Ch+var_29], 0
.text:004032CC                 jnz     short loc_403340
.text:004032CE                 mov     edi, [esp+4Ch+arg_4]
.text:004032D2                 cmp     [esp+4Ch+var_34], edi
.text:004032D6                 jnb     short loc_4032E4
.text:004032D8                 mov     esi, [esp+4Ch+arg_0]
.text:004032DC                 mov     eax, [esp+4Ch+var_34]
.text:004032E0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004032E4
.text:004032E4 loc_4032E4:                             ; CODE XREF: sub_402C80+656↑j
.text:004032E4                 inc     [esp+4Ch+var_34]
.text:004032E8                 mov     ecx, [esp+4Ch+arg_4]
.text:004032EC                 cmp     [esp+4Ch+var_34], ecx
.text:004032F0                 jnb     short loc_403305
.text:004032F2                 mov     cl, bl
.text:004032F4                 mov     esi, [esp+4Ch+arg_0]
.text:004032F8                 mov     edi, [esp+4Ch+var_34]
.text:004032FC                 shr     cl, 6
.text:004032FF                 add     cl, 30h ; '0'
.text:00403302                 mov     [edi+esi], cl
.text:00403305
.text:00403305 loc_403305:                             ; CODE XREF: sub_402C80+670↑j
.text:00403305                 inc     [esp+4Ch+var_34]
.text:00403309                 mov     edi, [esp+4Ch+arg_4]
.text:0040330D                 cmp     [esp+4Ch+var_34], edi
.text:00403311                 jnb     short loc_403329
.text:00403313                 mov     cl, bl
.text:00403315                 mov     esi, [esp+4Ch+arg_0]
.text:00403319                 shr     cl, 3
.text:0040331C                 mov     edi, [esp+4Ch+var_34]
.text:00403320                 and     cl, 7
.text:00403323                 add     cl, 30h ; '0'
.text:00403326                 mov     [edi+esi], cl
.text:00403329
.text:00403329 loc_403329:                             ; CODE XREF: sub_402C80+691↑j
.text:00403329                 inc     [esp+4Ch+var_34]
.text:0040332D                 and     bl, 7
.text:00403330                 add     bl, 30h ; '0'
.text:00403333                 lea     esi, [esi+0]
.text:00403339                 lea     edi, [edi+0]
.text:00403340
.text:00403340 loc_403340:                             ; CODE XREF: sub_402C80+645↑j
.text:00403340                                         ; sub_402C80+64C↑j
.text:00403340                 lea     eax, [ebp+1]
.text:00403343                 cmp     edx, eax
.text:00403345                 jbe     loc_403040
.text:0040334B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040334F                 cmp     [esp+4Ch+var_34], ebp
.text:00403353                 jnb     short loc_403360
.text:00403355                 mov     ecx, [esp+4Ch+arg_0]
.text:00403359                 mov     edi, [esp+4Ch+var_34]
.text:0040335D                 mov     [edi+ecx], bl
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_402C80+6D3↑j
.text:00403360                 inc     [esp+4Ch+var_34]
.text:00403364                 mov     ebp, eax
.text:00403366                 mov     eax, [esp+4Ch+Str]
.text:0040336A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040336F                 jmp     loc_4032C0
.text:00403374 ; ---------------------------------------------------------------------------
.text:00403374
.text:00403374 loc_403374:                             ; CODE XREF: sub_402C80+5FF↑j
.text:00403374                 mov     ecx, ds:_pctype
.text:0040337A                 mov     edi, [ecx]
.text:0040337C                 movzx   eax, word ptr [edi+edx*2]
.text:00403380                 and     eax, 157h
.text:00403385                 jmp     loc_403295
.text:00403385 ; ---------------------------------------------------------------------------
.text:0040338A                 align 10h
.text:00403390
.text:00403390 loc_403390:                             ; CODE XREF: sub_402C80+5E5↑j
.text:00403390                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403395                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040339D                 mov     [esp+4Ch+var_28], 0
.text:004033A5                 mov     [esp+4Ch+var_29], 1
.text:004033AA                 jz      loc_40353C
.text:004033B0
.text:004033B0 loc_4033B0:                             ; CODE XREF: sub_402C80+8CC↓j
.text:004033B0                 mov     ecx, [esp+4Ch+arg_C]
.text:004033B4                 lea     edx, [esp+4Ch+var_18]
.text:004033B8                 mov     edi, [esp+4Ch+Str]
.text:004033BC                 mov     [esp+4Ch+State], edx ; State
.text:004033C0                 lea     esi, [esp+4Ch+var_18._State]
.text:004033C4                 sub     ecx, ebp
.text:004033C6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004033CA                 add     edi, ebp
.text:004033CC                 mov     [esp+4Ch+var_30], edi
.text:004033D0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004033D4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004033D7                 call    mbrtowc
.text:004033DC                 test    eax, eax
.text:004033DE                 mov     edi, eax
.text:004033E0                 jz      short loc_403420
.text:004033E2                 cmp     eax, 0FFFFFFFFh
.text:004033E5                 jz      loc_403532
.text:004033EB                 cmp     eax, 0FFFFFFFEh
.text:004033EE                 jz      loc_4034F2
.text:004033F4                 cmp     [esp+4Ch+arg_10], 1
.text:004033F9                 jz      short loc_403430
.text:004033FB
.text:004033FB loc_4033FB:                             ; CODE XREF: sub_402C80+7B9↓j
.text:004033FB                                         ; sub_402C80+86D↓j
.text:004033FB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403400                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403408                 mov     [esp+4Ch+C], ecx ; C
.text:0040340B                 call    iswctype
.text:00403410                 test    eax, eax
.text:00403412                 jnz     short loc_403419
.text:00403414                 mov     [esp+4Ch+var_29], 0
.text:00403419
.text:00403419 loc_403419:                             ; CODE XREF: sub_402C80+792↑j
.text:00403419                 mov     [esp+4Ch+var_28], edi
.text:0040341D                 lea     esi, [esi+0]
.text:00403420
.text:00403420 loc_403420:                             ; CODE XREF: sub_402C80+760↑j
.text:00403420                                         ; sub_402C80+87B↓j ...
.text:00403420                 cmp     [esp+4Ch+var_28], 1
.text:00403425                 jbe     loc_40329C
.text:0040342B                 jmp     loc_4032B5
.text:00403430 ; ---------------------------------------------------------------------------
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_402C80+779↑j
.text:00403430                 cmp     [esp+4Ch+arg_10], eax
.text:00403434                 mov     edx, 1
.text:00403439                 jnb     short loc_4033FB
.text:0040343B
.text:0040343B loc_40343B:                             ; CODE XREF: sub_402C80+867↓j
.text:0040343B                 mov     ecx, [esp+4Ch+Str]
.text:0040343F                 lea     esi, [edx+ebp]
.text:00403442                 movsx   eax, byte ptr [esi+ecx]
.text:00403446                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403449                 cmp     eax, 21h
.text:0040344C                 ja      def_403452      ; jumptable 00403452 default case, cases 93,95,97-123
.text:00403452                 jmp     ds:jpt_403452[eax*4] ; switch jump
.text:00403452 ; ---------------------------------------------------------------------------
.text:00403459                 align 4
.text:0040345C jpt_403452      dd offset loc_40308B    ; DATA XREF: sub_402C80+7D2↑r
.text:0040345C                 dd offset loc_40308B    ; jump table for switch statement
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset loc_40308B
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset loc_40308B
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset def_403452
.text:0040345C                 dd offset loc_40308B
.text:004034E4 ; ---------------------------------------------------------------------------
.text:004034E4
.text:004034E4 def_403452:                             ; CODE XREF: sub_402C80+7CC↑j
.text:004034E4                                         ; sub_402C80+7D2↑j
.text:004034E4                                         ; DATA XREF: ...
.text:004034E4                 inc     edx             ; jumptable 00403452 default case, cases 93,95,97-123
.text:004034E5                 cmp     edx, edi
.text:004034E7                 jb      loc_40343B
.text:004034ED                 jmp     loc_4033FB
.text:004034F2 ; ---------------------------------------------------------------------------
.text:004034F2
.text:004034F2 loc_4034F2:                             ; CODE XREF: sub_402C80+76E↑j
.text:004034F2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004034F6                 mov     [esp+4Ch+var_29], 0
.text:004034FB                 jnb     loc_403420
.text:00403501                 mov     eax, [esp+4Ch+var_30]
.text:00403505                 cmp     byte ptr [eax], 0
.text:00403508                 jz      loc_403420
.text:0040350E
.text:0040350E loc_40350E:                             ; CODE XREF: sub_402C80+8AB↓j
.text:0040350E                 inc     [esp+4Ch+var_28]
.text:00403512                 mov     esi, [esp+4Ch+var_28]
.text:00403516                 lea     eax, [esi+ebp]
.text:00403519                 cmp     eax, [esp+4Ch+arg_C]
.text:0040351D                 jnb     loc_403420
.text:00403523                 mov     edi, [esp+4Ch+Str]
.text:00403527                 cmp     byte ptr [eax+edi], 0
.text:0040352B                 jnz     short loc_40350E
.text:0040352D                 jmp     loc_403420
.text:00403532 ; ---------------------------------------------------------------------------
.text:00403532
.text:00403532 loc_403532:                             ; CODE XREF: sub_402C80+765↑j
.text:00403532                 mov     [esp+4Ch+var_29], 0
.text:00403537                 jmp     loc_403420
.text:0040353C ; ---------------------------------------------------------------------------
.text:0040353C
.text:0040353C loc_40353C:                             ; CODE XREF: sub_402C80+72A↑j
.text:0040353C                 mov     edx, [esp+4Ch+Str]
.text:00403540                 mov     [esp+4Ch+C], edx ; Str
.text:00403543                 call    strlen
.text:00403548                 mov     [esp+4Ch+arg_C], eax
.text:0040354C                 jmp     loc_4033B0
.text:00403551 ; ---------------------------------------------------------------------------
.text:00403551
.text:00403551 loc_403551:                             ; CODE XREF: sub_402C80+105↑j
.text:00403551                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:00403551                 mov     dl, bl          ; jumptable 00402D85 case 92
.text:00403553                 jmp     loc_403084
.text:00403558 ; ---------------------------------------------------------------------------
.text:00403558
.text:00403558 loc_403558:                             ; CODE XREF: sub_402C80+105↑j
.text:00403558                                         ; sub_402C80+902↓j
.text:00403558                                         ; DATA XREF: ...
.text:00403558                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402D85 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040355D                 jnz     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:0040355D                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:00403563                 jmp     loc_40308B      ; jumptable 00403452 cases 91,92,94,96,124
.text:00403568 ; ---------------------------------------------------------------------------
.text:00403568
.text:00403568 loc_403568:                             ; CODE XREF: sub_402C80+105↑j
.text:00403568                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:00403568                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402D85 cases 123,125
.text:0040356D                 jz      short loc_403584
.text:0040356F                 cmp     [esp+4Ch+arg_C], 1
.text:00403574
.text:00403574 loc_403574:                             ; CODE XREF: sub_402C80+90C↓j
.text:00403574                 jnz     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:00403574                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:0040357A
.text:0040357A loc_40357A:                             ; CODE XREF: sub_402C80+105↑j
.text:0040357A                                         ; DATA XREF: sub_402C80:jpt_402D85↑o
.text:0040357A                 test    ebp, ebp        ; jumptable 00402D85 cases 35,126
.text:0040357C                 jnz     def_403182      ; jumptable 00402D85 cases 37,43-58,65-90,93,95,97-122
.text:0040357C                                         ; jumptable 00403182 default case, cases 34-38,42-44,46,48-59
.text:00403582                 jmp     short loc_403558 ; jumptable 00402D85 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403584 ; ---------------------------------------------------------------------------
.text:00403584
.text:00403584 loc_403584:                             ; CODE XREF: sub_402C80+8ED↑j
.text:00403584                 mov     esi, [esp+4Ch+Str]
.text:00403588                 cmp     byte ptr [esi+1], 0
.text:0040358C                 jmp     short loc_403574
.text:0040358E ; ---------------------------------------------------------------------------
.text:0040358E
.text:0040358E loc_40358E:                             ; CODE XREF: sub_402C80:loc_402D1F↑j
.text:0040358E                 test    ebp, ebp
.text:00403590                 jnz     short loc_40359D
.text:00403592                 cmp     [esp+4Ch+arg_10], 1
.text:00403597                 jz      loc_40308B      ; jumptable 00403452 cases 91,92,94,96,124
.text:0040359D
.text:0040359D loc_40359D:                             ; CODE XREF: sub_402C80+910↑j
.text:0040359D                 mov     esi, [esp+4Ch+var_1C]
.text:004035A1                 test    esi, esi
.text:004035A3                 jz      short loc_4035D8
.text:004035A5                 mov     edi, [esp+4Ch+var_1C]
.text:004035A9                 movzx   eax, byte ptr [edi]
.text:004035AC                 test    al, al
.text:004035AE                 jz      short loc_4035D8
.text:004035B0
.text:004035B0 loc_4035B0:                             ; CODE XREF: sub_402C80+956↓j
.text:004035B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004035B4                 cmp     [esp+4Ch+var_34], ebp
.text:004035B8                 jnb     short loc_4035C5
.text:004035BA                 mov     ecx, [esp+4Ch+arg_0]
.text:004035BE                 mov     ebx, [esp+4Ch+var_34]
.text:004035C2                 mov     [ebx+ecx], al
.text:004035C5
.text:004035C5 loc_4035C5:                             ; CODE XREF: sub_402C80+938↑j
.text:004035C5                 inc     [esp+4Ch+var_1C]
.text:004035C9                 inc     [esp+4Ch+var_34]
.text:004035CD                 mov     edx, [esp+4Ch+var_1C]
.text:004035D1                 movzx   eax, byte ptr [edx]
.text:004035D4                 test    al, al
.text:004035D6                 jnz     short loc_4035B0
.text:004035D8
.text:004035D8 loc_4035D8:                             ; CODE XREF: sub_402C80+923↑j
.text:004035D8                                         ; sub_402C80+92E↑j
.text:004035D8                 mov     eax, [esp+4Ch+arg_4]
.text:004035DC                 cmp     [esp+4Ch+var_34], eax
.text:004035E0                 jnb     short loc_4035EE
.text:004035E2                 mov     edi, [esp+4Ch+arg_0]
.text:004035E6                 mov     esi, [esp+4Ch+var_34]
.text:004035EA                 mov     byte ptr [esi+edi], 0
.text:004035EE
.text:004035EE loc_4035EE:                             ; CODE XREF: sub_402C80+960↑j
.text:004035EE                 mov     eax, [esp+4Ch+var_34]
.text:004035F2                 jmp     loc_4030BF
.text:004035F7 ; ---------------------------------------------------------------------------
.text:004035F7
.text:004035F7 loc_4035F7:                             ; CODE XREF: sub_402C80+95↑j
.text:004035F7                 mov     ebx, [esp+4Ch+Str]
.text:004035FB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403600                 jmp     loc_402D1F
.text:00403605 ; ---------------------------------------------------------------------------
.text:00403605
.text:00403605 loc_403605:                             ; CODE XREF: sub_402C80+3D↑j
.text:00403605                                         ; DATA XREF: sub_402C80:jpt_402CBD↑o
.text:00403605                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402CBD case 2
.text:00403609                 cmp     [esp+4Ch+var_34], edx
.text:0040360D                 jnb     short loc_403616
.text:0040360F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403613                 mov     byte ptr [ecx], 27h ; '''
.text:00403616
.text:00403616 loc_403616:                             ; CODE XREF: sub_402C80+98D↑j
.text:00403616                 mov     [esp+4Ch+var_34], 1
.text:0040361E                 mov     [esp+4Ch+var_1C], 402C6Eh
.text:00403626                 jmp     loc_402D06
.text:0040362B ; ---------------------------------------------------------------------------
.text:0040362B
.text:0040362B loc_40362B:                             ; CODE XREF: sub_402C80+3D↑j
.text:0040362B                                         ; DATA XREF: sub_402C80:jpt_402CBD↑o
.text:0040362B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402CBD case 4
.text:00403630                 jmp     def_402CBD      ; jumptable 00402CBD default case, cases 0,1
.text:00403635 ; ---------------------------------------------------------------------------
.text:00403635
.text:00403635 loc_403635:                             ; CODE XREF: sub_402C80+3D↑j
.text:00403635                                         ; DATA XREF: sub_402C80:jpt_402CBD↑o
.text:00403635                 mov     [esp+4Ch+C], 402C70h ; jumptable 00402CBD cases 5,6
.text:0040363C                 call    ds:libintl_gettext
.text:00403642                 cmp     eax, 402C70h
.text:00403647                 mov     edi, eax
.text:00403649                 jz      short loc_4036C0
.text:0040364B
.text:0040364B loc_40364B:                             ; CODE XREF: sub_402C80+A45↓j
.text:0040364B                                         ; sub_402C80+A4C↓j
.text:0040364B                 mov     [esp+4Ch+C], 402C6Eh
.text:00403652                 call    ds:libintl_gettext
.text:00403658                 cmp     eax, 402C6Eh
.text:0040365D                 mov     edx, eax
.text:0040365F                 jz      short loc_4036B2
.text:00403661
.text:00403661 loc_403661:                             ; CODE XREF: sub_402C80+A37↓j
.text:00403661                                         ; sub_402C80+A3E↓j
.text:00403661                 mov     [esp+4Ch+var_1C], edi
.text:00403665                 cmp     byte ptr [edi], 0
.text:00403668                 jz      short loc_403698
.text:0040366A
.text:0040366A loc_40366A:                             ; CODE XREF: sub_402C80+A16↓j
.text:0040366A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040366E                 cmp     [esp+4Ch+var_34], ecx
.text:00403672                 jnb     short loc_403687
.text:00403674                 mov     ebp, [esp+4Ch+var_1C]
.text:00403678                 mov     edi, [esp+4Ch+arg_0]
.text:0040367C                 mov     esi, [esp+4Ch+var_34]
.text:00403680                 movzx   ebx, byte ptr [ebp+0]
.text:00403684                 mov     [esi+edi], bl
.text:00403687
.text:00403687 loc_403687:                             ; CODE XREF: sub_402C80+9F2↑j
.text:00403687                 inc     [esp+4Ch+var_1C]
.text:0040368B                 inc     [esp+4Ch+var_34]
.text:0040368F                 mov     eax, [esp+4Ch+var_1C]
.text:00403693                 cmp     byte ptr [eax], 0
.text:00403696                 jnz     short loc_40366A
.text:00403698
.text:00403698 loc_403698:                             ; CODE XREF: sub_402C80+9E8↑j
.text:00403698                 mov     [esp+4Ch+var_21], 1
.text:0040369D                 mov     [esp+4Ch+var_1C], edx
.text:004036A1                 mov     [esp+4Ch+C], edx ; Str
.text:004036A4                 call    strlen
.text:004036A9                 mov     [esp+4Ch+var_20], eax
.text:004036AD                 jmp     def_402CBD      ; jumptable 00402CBD default case, cases 0,1
.text:004036B2 ; ---------------------------------------------------------------------------
.text:004036B2
.text:004036B2 loc_4036B2:                             ; CODE XREF: sub_402C80+9DF↑j
.text:004036B2                 cmp     [esp+4Ch+arg_10], 6
.text:004036B7                 jnz     short loc_403661
.text:004036B9                 mov     edx, offset asc_402C6C ; "\"'`"
.text:004036BE                 jmp     short loc_403661
.text:004036C0 ; ---------------------------------------------------------------------------
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_402C80+9C9↑j
.text:004036C0                 cmp     [esp+4Ch+arg_10], 6
.text:004036C5                 jnz     short loc_40364B
.text:004036C7                 mov     edi, offset asc_402C6C ; "\"'`"
.text:004036CC                 jmp     loc_40364B
.text:004036CC sub_402C80      endp
.text:004036CC
.text:004036D1 ; ---------------------------------------------------------------------------
.text:004036D1                 jmp     short loc_4036E0
.text:004036D1 ; ---------------------------------------------------------------------------
.text:004036D3                 align 10h
.text:004036E0
.text:004036E0 loc_4036E0:                             ; CODE XREF: .text:004036D1↑j
.text:004036E0                 sub     esp, 0Ch
.text:004036E3                 mov     [esp+4], ebx
.text:004036E7                 mov     [esp+8], esi
.text:004036EB                 call    _errno
.text:004036F0                 mov     esi, [eax]
.text:004036F2                 mov     dword ptr [esp], 24h ; '$'
.text:004036F9                 call    sub_4044D0
.text:004036FE                 mov     edx, [esp+10h]
.text:00403702                 mov     ebx, eax
.text:00403704                 test    edx, edx
.text:00403706                 jz      short loc_403751
.text:00403708
.text:00403708 loc_403708:                             ; CODE XREF: .text:00403756↓j
.text:00403708                 mov     ecx, [edx]
.text:0040370A                 mov     [ebx], ecx
.text:0040370C                 mov     ecx, [edx+4]
.text:0040370F                 mov     [ebx+4], ecx
.text:00403712                 mov     ecx, [edx+8]
.text:00403715                 mov     [ebx+8], ecx
.text:00403718                 mov     ecx, [edx+0Ch]
.text:0040371B                 mov     [ebx+0Ch], ecx
.text:0040371E                 mov     ecx, [edx+10h]
.text:00403721                 mov     [ebx+10h], ecx
.text:00403724                 mov     ecx, [edx+14h]
.text:00403727                 mov     [ebx+14h], ecx
.text:0040372A                 mov     ecx, [edx+18h]
.text:0040372D                 mov     [ebx+18h], ecx
.text:00403730                 mov     ecx, [edx+1Ch]
.text:00403733                 mov     [ebx+1Ch], ecx
.text:00403736                 mov     ecx, [edx+20h]
.text:00403739                 mov     [ebx+20h], ecx
.text:0040373C                 call    _errno
.text:00403741                 mov     [eax], esi
.text:00403743                 mov     esi, [esp+8]
.text:00403747                 mov     eax, ebx
.text:00403749                 mov     ebx, [esp+4]
.text:0040374D                 add     esp, 0Ch
.text:00403750                 retn
.text:00403751 ; ---------------------------------------------------------------------------
.text:00403751
.text:00403751 loc_403751:                             ; CODE XREF: .text:00403706↑j
.text:00403751                 mov     edx, offset dword_408140
.text:00403756                 jmp     short loc_403708
.text:00403756 ; ---------------------------------------------------------------------------
.text:00403758                 align 10h
.text:00403760                 mov     eax, [esp+4]
.text:00403764                 test    eax, eax
.text:00403766                 jz      short loc_403770
.text:00403768
.text:00403768 loc_403768:                             ; CODE XREF: .text:00403775↓j
.text:00403768                 mov     eax, [eax]
.text:0040376A                 retn
.text:0040376A ; ---------------------------------------------------------------------------
.text:0040376B                 align 10h
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: .text:00403766↑j
.text:00403770                 mov     eax, offset dword_408140
.text:00403775                 jmp     short loc_403768
.text:00403775 ; ---------------------------------------------------------------------------
.text:00403777                 align 10h
.text:00403780                 mov     edx, [esp+4]
.text:00403784                 test    edx, edx
.text:00403786                 jz      short loc_403790
.text:00403788
.text:00403788 loc_403788:                             ; CODE XREF: .text:00403795↓j
.text:00403788                 mov     ecx, [esp+8]
.text:0040378C                 mov     [edx], ecx
.text:0040378E                 retn
.text:0040378E ; ---------------------------------------------------------------------------
.text:0040378F                 align 10h
.text:00403790
.text:00403790 loc_403790:                             ; CODE XREF: .text:00403786↑j
.text:00403790                 mov     edx, offset dword_408140
.text:00403795                 jmp     short loc_403788
.text:00403795 ; ---------------------------------------------------------------------------
.text:00403797                 align 10h
.text:004037A0                 sub     esp, 8
.text:004037A3                 mov     eax, [esp+0Ch]
.text:004037A7                 movzx   ecx, byte ptr [esp+10h]
.text:004037AC                 mov     [esp], ebx
.text:004037AF                 mov     ebx, [esp+14h]
.text:004037B3                 mov     [esp+4], esi
.text:004037B7                 mov     dl, cl
.text:004037B9                 shr     dl, 5
.text:004037BC                 movzx   edx, dl
.text:004037BF                 shl     edx, 2
.text:004037C2                 test    eax, eax
.text:004037C4                 lea     esi, [edx+eax+4]
.text:004037C8                 jz      short loc_4037F0
.text:004037CA
.text:004037CA loc_4037CA:                             ; CODE XREF: .text:004037F6↓j
.text:004037CA                 mov     edx, [esi]
.text:004037CC                 and     ecx, 1Fh
.text:004037CF                 and     ebx, 1
.text:004037D2                 mov     eax, edx
.text:004037D4                 shr     eax, cl
.text:004037D6                 and     eax, 1
.text:004037D9                 xor     ebx, eax
.text:004037DB                 shl     ebx, cl
.text:004037DD                 xor     edx, ebx
.text:004037DF                 mov     [esi], edx
.text:004037E1                 mov     ebx, [esp]
.text:004037E4                 mov     esi, [esp+4]
.text:004037E8                 add     esp, 8
.text:004037EB                 retn
.text:004037EB ; ---------------------------------------------------------------------------
.text:004037EC                 align 10h
.text:004037F0
.text:004037F0 loc_4037F0:                             ; CODE XREF: .text:004037C8↑j
.text:004037F0                 lea     esi, dword_408144[edx]
.text:004037F6                 jmp     short loc_4037CA
.text:004037F6 ; ---------------------------------------------------------------------------
.text:004037F8                 align 10h
.text:00403800                 sub     esp, 2Ch
.text:00403803                 mov     [esp+24h], ebx
.text:00403807                 mov     ebx, [esp+40h]
.text:0040380B                 mov     [esp+28h], esi
.text:0040380F                 test    ebx, ebx
.text:00403811                 jz      short loc_403860
.text:00403813
.text:00403813 loc_403813:                             ; CODE XREF: .text:00403865↓j
.text:00403813                 call    _errno
.text:00403818                 mov     esi, [eax]
.text:0040381A                 mov     [esp+14h], ebx
.text:0040381E                 mov     edx, [ebx]
.text:00403820                 mov     ecx, [esp+38h]
.text:00403824                 mov     ebx, [esp+3Ch]
.text:00403828                 mov     [esp+10h], edx
.text:0040382C                 mov     edx, [esp+34h]
.text:00403830                 mov     [esp+0Ch], ebx
.text:00403834                 mov     [esp+8], ecx
.text:00403838                 mov     [esp+4], edx
.text:0040383C                 mov     edx, [esp+30h]
.text:00403840                 mov     [esp], edx
.text:00403843                 call    sub_402C80
.text:00403848                 mov     ebx, eax
.text:0040384A                 call    _errno
.text:0040384F                 mov     [eax], esi
.text:00403851                 mov     esi, [esp+28h]
.text:00403855                 mov     eax, ebx
.text:00403857                 mov     ebx, [esp+24h]
.text:0040385B                 add     esp, 2Ch
.text:0040385E                 retn
.text:0040385E ; ---------------------------------------------------------------------------
.text:0040385F                 align 10h
.text:00403860
.text:00403860 loc_403860:                             ; CODE XREF: .text:00403811↑j
.text:00403860                 mov     ebx, offset dword_408140
.text:00403865                 jmp     short loc_403813
.text:00403865 ; ---------------------------------------------------------------------------
.text:00403867                 align 10h
.text:00403870                 push    ebp
.text:00403871                 push    edi
.text:00403872                 push    esi
.text:00403873                 push    ebx
.text:00403874                 sub     esp, 2Ch
.text:00403877                 mov     ebp, [esp+48h]
.text:0040387B                 call    _errno
.text:00403880                 mov     edx, [eax]
.text:00403882                 test    ebp, ebp
.text:00403884                 mov     ebx, ebp
.text:00403886                 mov     [esp+28h], edx
.text:0040388A                 jz      loc_403940
.text:00403890
.text:00403890 loc_403890:                             ; CODE XREF: .text:00403945↓j
.text:00403890                 call    _errno
.text:00403895                 mov     edi, [eax]
.text:00403897                 mov     esi, ebp
.text:00403899                 mov     [esp+14h], ebx
.text:0040389D                 mov     ecx, [ebx]
.text:0040389F                 mov     dword ptr [esp], 0
.text:004038A6                 mov     edx, [esp+44h]
.text:004038AA                 mov     dword ptr [esp+4], 0
.text:004038B2                 mov     eax, [esp+40h]
.text:004038B6                 mov     [esp+10h], ecx
.text:004038BA                 mov     [esp+0Ch], edx
.text:004038BE                 mov     [esp+8], eax
.text:004038C2                 call    sub_402C80
.text:004038C7                 mov     ebx, eax
.text:004038C9                 call    _errno
.text:004038CE                 mov     [eax], edi
.text:004038D0                 lea     edi, [ebx+1]
.text:004038D3                 mov     [esp], edi
.text:004038D6                 call    sub_4044D0
.text:004038DB                 mov     [esp+24h], eax
.text:004038DF                 test    ebp, ebp
.text:004038E1                 jz      short loc_403932
.text:004038E3
.text:004038E3 loc_4038E3:                             ; CODE XREF: .text:00403937↓j
.text:004038E3                 call    _errno
.text:004038E8                 mov     ebp, [eax]
.text:004038EA                 mov     [esp+14h], esi
.text:004038EE                 mov     ecx, [esi]
.text:004038F0                 mov     [esp+4], edi
.text:004038F4                 mov     edx, [esp+44h]
.text:004038F8                 mov     esi, [esp+24h]
.text:004038FC                 mov     [esp+10h], ecx
.text:00403900                 mov     eax, [esp+40h]
.text:00403904                 mov     [esp+0Ch], edx
.text:00403908                 mov     [esp], esi
.text:0040390B                 mov     [esp+8], eax
.text:0040390F                 call    sub_402C80
.text:00403914                 call    _errno
.text:00403919                 mov     [eax], ebp
.text:0040391B                 call    _errno
.text:00403920                 mov     ebx, [esp+28h]
.text:00403924                 mov     [eax], ebx
.text:00403926                 mov     eax, [esp+24h]
.text:0040392A                 add     esp, 2Ch
.text:0040392D                 pop     ebx
.text:0040392E                 pop     esi
.text:0040392F                 pop     edi
.text:00403930                 pop     ebp
.text:00403931                 retn
.text:00403932 ; ---------------------------------------------------------------------------
.text:00403932
.text:00403932 loc_403932:                             ; CODE XREF: .text:004038E1↑j
.text:00403932                 mov     esi, offset dword_408140
.text:00403937                 jmp     short loc_4038E3
.text:00403937 ; ---------------------------------------------------------------------------
.text:00403939                 align 10h
.text:00403940
.text:00403940 loc_403940:                             ; CODE XREF: .text:0040388A↑j
.text:00403940                 mov     ebx, offset dword_408140
.text:00403945                 jmp     loc_403890
.text:00403945 ; ---------------------------------------------------------------------------
.text:0040394A                 align 10h
.text:00403950                 sub     esp, 1Ch
.text:00403953                 mov     edx, [esp+24h]
.text:00403957                 mov     dword ptr [esp+0Ch], offset dword_408140
.text:0040395F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403967                 mov     [esp+4], edx
.text:0040396B                 mov     edx, [esp+20h]
.text:0040396F                 mov     [esp], edx
.text:00403972                 call    sub_403DC0
.text:00403977                 add     esp, 1Ch
.text:0040397A                 retn
.text:0040397A ; ---------------------------------------------------------------------------
.text:0040397B                 align 10h
.text:00403980                 sub     esp, 1Ch
.text:00403983                 mov     edx, [esp+20h]
.text:00403987                 mov     dword ptr [esp+0Ch], offset dword_408140
.text:0040398F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403997                 mov     [esp+4], edx
.text:0040399B                 mov     dword ptr [esp], 0
.text:004039A2                 call    sub_403DC0
.text:004039A7                 add     esp, 1Ch
.text:004039AA                 retn
.text:004039AA ; ---------------------------------------------------------------------------
.text:004039AB                 align 10h
.text:004039B0
.text:004039B0 ; =============== S U B R O U T I N E =======================================
.text:004039B0
.text:004039B0
.text:004039B0 ; int __cdecl sub_4039B0(int, int, char *)
.text:004039B0 sub_4039B0      proc near               ; CODE XREF: sub_402820+1A↑p
.text:004039B0                                         ; sub_402850+1A↑p
.text:004039B0
.text:004039B0 var_BC          = dword ptr -0BCh
.text:004039B0 var_B8          = dword ptr -0B8h
.text:004039B0 var_B4          = dword ptr -0B4h
.text:004039B0 var_B0          = dword ptr -0B0h
.text:004039B0 var_AC          = dword ptr -0ACh
.text:004039B0 var_A8          = dword ptr -0A8h
.text:004039B0 var_A4          = dword ptr -0A4h
.text:004039B0 var_A0          = dword ptr -0A0h
.text:004039B0 var_9C          = dword ptr -9Ch
.text:004039B0 var_98          = dword ptr -98h
.text:004039B0 var_94          = dword ptr -94h
.text:004039B0 var_90          = dword ptr -90h
.text:004039B0 var_8C          = dword ptr -8Ch
.text:004039B0 var_7C          = dword ptr -7Ch
.text:004039B0 var_78          = dword ptr -78h
.text:004039B0 var_74          = dword ptr -74h
.text:004039B0 var_70          = dword ptr -70h
.text:004039B0 var_6C          = dword ptr -6Ch
.text:004039B0 var_68          = dword ptr -68h
.text:004039B0 var_64          = dword ptr -64h
.text:004039B0 var_60          = dword ptr -60h
.text:004039B0 var_5C          = dword ptr -5Ch
.text:004039B0 var_4C          = dword ptr -4Ch
.text:004039B0 var_48          = dword ptr -48h
.text:004039B0 var_44          = dword ptr -44h
.text:004039B0 var_40          = dword ptr -40h
.text:004039B0 var_3C          = dword ptr -3Ch
.text:004039B0 var_38          = dword ptr -38h
.text:004039B0 var_34          = dword ptr -34h
.text:004039B0 var_30          = dword ptr -30h
.text:004039B0 var_2C          = dword ptr -2Ch
.text:004039B0 arg_0           = dword ptr  4
.text:004039B0 arg_4           = dword ptr  8
.text:004039B0 arg_8           = dword ptr  0Ch
.text:004039B0
.text:004039B0                 push    ebp
.text:004039B1                 xor     eax, eax
.text:004039B3                 mov     ecx, 8
.text:004039B8                 push    edi
.text:004039B9                 push    esi
.text:004039BA                 push    ebx
.text:004039BB                 sub     esp, 0ACh
.text:004039C1                 mov     ebp, [esp+0BCh+arg_4]
.text:004039C8                 cld
.text:004039C9                 lea     edi, [esp+0BCh+var_A8]
.text:004039CD                 mov     [esp+0BCh+var_AC], ebp
.text:004039D1                 rep stosd
.text:004039D3                 mov     eax, [esp+0BCh+var_8C]
.text:004039D7                 mov     edi, [esp+0BCh+var_AC]
.text:004039DB                 mov     esi, [esp+0BCh+var_A8]
.text:004039DF                 mov     [esp+0BCh+var_5C], eax
.text:004039E3                 mov     ebp, [esp+0BCh+var_A4]
.text:004039E7                 mov     eax, [esp+0BCh+var_AC]
.text:004039EB                 mov     [esp+0BCh+var_7C], edi
.text:004039EF                 mov     ecx, [esp+0BCh+var_94]
.text:004039F3                 mov     edi, [esp+0BCh+var_A0]
.text:004039F7                 mov     [esp+0BCh+var_78], esi
.text:004039FB                 mov     edx, [esp+0BCh+var_90]
.text:004039FF                 mov     esi, [esp+0BCh+var_9C]
.text:00403A03                 mov     [esp+0BCh+var_4C], eax
.text:00403A07                 mov     ebx, [esp+0BCh+var_98]
.text:00403A0B                 mov     eax, [esp+0BCh+var_A8]
.text:00403A0F                 mov     [esp+0BCh+var_74], ebp
.text:00403A13                 mov     [esp+0BCh+var_70], edi
.text:00403A17                 mov     [esp+0BCh+var_6C], esi
.text:00403A1B                 mov     [esp+0BCh+var_68], ebx
.text:00403A1F                 mov     [esp+0BCh+var_64], ecx
.text:00403A23                 mov     [esp+0BCh+var_60], edx
.text:00403A27                 mov     [esp+0BCh+var_48], eax
.text:00403A2B                 mov     [esp+0BCh+var_44], ebp
.text:00403A2F                 mov     [esp+0BCh+var_40], edi
.text:00403A33                 mov     [esp+0BCh+var_3C], esi
.text:00403A3A                 mov     [esp+0BCh+var_38], ebx
.text:00403A41                 mov     ebx, [esp+0BCh+var_8C]
.text:00403A45                 mov     [esp+0BCh+var_30], edx
.text:00403A4C                 mov     edx, [esp+0BCh+arg_8]
.text:00403A53                 mov     [esp+0BCh+var_34], ecx
.text:00403A5A                 lea     ecx, [esp+0BCh+var_4C]
.text:00403A5E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403A62                 mov     edx, [esp+0BCh+arg_0]
.text:00403A69                 mov     [esp+0BCh+var_2C], ebx
.text:00403A70                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403A74                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403A7C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403A7F                 call    sub_403DC0
.text:00403A84                 add     esp, 0ACh
.text:00403A8A                 pop     ebx
.text:00403A8B                 pop     esi
.text:00403A8C                 pop     edi
.text:00403A8D                 pop     ebp
.text:00403A8E                 retn
.text:00403A8E sub_4039B0      endp
.text:00403A8E
.text:00403A8E ; ---------------------------------------------------------------------------
.text:00403A8F                 align 10h
.text:00403A90                 push    ebp
.text:00403A91                 xor     eax, eax
.text:00403A93                 mov     ecx, 8
.text:00403A98                 push    edi
.text:00403A99                 push    esi
.text:00403A9A                 push    ebx
.text:00403A9B                 sub     esp, 0ACh
.text:00403AA1                 mov     edx, [esp+0C4h]
.text:00403AA8                 cld
.text:00403AA9                 lea     edi, [esp+14h]
.text:00403AAD                 mov     [esp+10h], edx
.text:00403AB1                 rep stosd
.text:00403AB3                 mov     eax, [esp+30h]
.text:00403AB7                 mov     ebp, [esp+10h]
.text:00403ABB                 mov     edi, [esp+14h]
.text:00403ABF                 mov     [esp+60h], eax
.text:00403AC3                 mov     esi, [esp+20h]
.text:00403AC7                 mov     eax, [esp+10h]
.text:00403ACB                 mov     [esp+40h], ebp
.text:00403ACF                 mov     ecx, [esp+28h]
.text:00403AD3                 mov     ebp, [esp+18h]
.text:00403AD7                 mov     [esp+44h], edi
.text:00403ADB                 mov     edx, [esp+2Ch]
.text:00403ADF                 mov     edi, [esp+1Ch]
.text:00403AE3                 mov     [esp+70h], eax
.text:00403AE7                 mov     ebx, [esp+24h]
.text:00403AEB                 mov     eax, [esp+14h]
.text:00403AEF                 mov     [esp+48h], ebp
.text:00403AF3                 mov     [esp+4Ch], edi
.text:00403AF7                 mov     [esp+50h], esi
.text:00403AFB                 mov     [esp+54h], ebx
.text:00403AFF                 mov     [esp+58h], ecx
.text:00403B03                 mov     [esp+5Ch], edx
.text:00403B07                 mov     [esp+74h], eax
.text:00403B0B                 mov     [esp+78h], ebp
.text:00403B0F                 mov     [esp+7Ch], edi
.text:00403B13                 mov     [esp+80h], esi
.text:00403B1A                 mov     [esp+84h], ebx
.text:00403B21                 mov     esi, [esp+30h]
.text:00403B25                 lea     ebx, [esp+70h]
.text:00403B29                 mov     [esp+8Ch], edx
.text:00403B30                 mov     edx, [esp+0C8h]
.text:00403B37                 mov     [esp+88h], ecx
.text:00403B3E                 mov     ecx, [esp+0CCh]
.text:00403B45                 mov     [esp+4], edx
.text:00403B49                 mov     edx, [esp+0C0h]
.text:00403B50                 mov     [esp+90h], esi
.text:00403B57                 mov     [esp+0Ch], ebx
.text:00403B5B                 mov     [esp+8], ecx
.text:00403B5F                 mov     [esp], edx
.text:00403B62                 call    sub_403DC0
.text:00403B67                 add     esp, 0ACh
.text:00403B6D                 pop     ebx
.text:00403B6E                 pop     esi
.text:00403B6F                 pop     edi
.text:00403B70                 pop     ebp
.text:00403B71                 retn
.text:00403B71 ; ---------------------------------------------------------------------------
.text:00403B72                 align 10h
.text:00403B80                 push    ebp
.text:00403B81                 xor     eax, eax
.text:00403B83                 mov     ecx, 8
.text:00403B88                 push    edi
.text:00403B89                 push    esi
.text:00403B8A                 push    ebx
.text:00403B8B                 sub     esp, 0ACh
.text:00403B91                 mov     edi, [esp+0C0h]
.text:00403B98                 cld
.text:00403B99                 mov     [esp+10h], edi
.text:00403B9D                 lea     edi, [esp+14h]
.text:00403BA1                 rep stosd
.text:00403BA3                 mov     eax, [esp+30h]
.text:00403BA7                 mov     esi, [esp+10h]
.text:00403BAB                 mov     ebx, [esp+14h]
.text:00403BAF                 mov     [esp+60h], eax
.text:00403BB3                 mov     ebp, [esp+18h]
.text:00403BB7                 mov     eax, [esp+10h]
.text:00403BBB                 mov     [esp+40h], esi
.text:00403BBF                 mov     edi, [esp+1Ch]
.text:00403BC3                 mov     esi, [esp+20h]
.text:00403BC7                 mov     [esp+44h], ebx
.text:00403BCB                 mov     ecx, [esp+28h]
.text:00403BCF                 mov     edx, [esp+2Ch]
.text:00403BD3                 mov     [esp+70h], eax
.text:00403BD7                 mov     ebx, [esp+24h]
.text:00403BDB                 mov     eax, [esp+14h]
.text:00403BDF                 mov     [esp+48h], ebp
.text:00403BE3                 mov     [esp+4Ch], edi
.text:00403BE7                 mov     [esp+50h], esi
.text:00403BEB                 mov     [esp+54h], ebx
.text:00403BEF                 mov     [esp+58h], ecx
.text:00403BF3                 mov     [esp+5Ch], edx
.text:00403BF7                 mov     [esp+74h], eax
.text:00403BFB                 mov     [esp+78h], ebp
.text:00403BFF                 mov     [esp+7Ch], edi
.text:00403C03                 mov     [esp+80h], esi
.text:00403C0A                 mov     [esp+84h], ebx
.text:00403C11                 mov     [esp+8Ch], edx
.text:00403C18                 lea     edx, [esp+70h]
.text:00403C1C                 mov     [esp+88h], ecx
.text:00403C23                 mov     ecx, [esp+30h]
.text:00403C27                 mov     [esp+0Ch], edx
.text:00403C2B                 mov     edx, [esp+0C4h]
.text:00403C32                 mov     [esp+90h], ecx
.text:00403C39                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403C41                 mov     [esp+4], edx
.text:00403C45                 mov     dword ptr [esp], 0
.text:00403C4C                 call    sub_403DC0
.text:00403C51                 add     esp, 0ACh
.text:00403C57                 pop     ebx
.text:00403C58                 pop     esi
.text:00403C59                 pop     edi
.text:00403C5A                 pop     ebp
.text:00403C5B                 retn
.text:00403C5B ; ---------------------------------------------------------------------------
.text:00403C5C                 align 10h
.text:00403C60                 push    edi
.text:00403C61                 push    esi
.text:00403C62                 push    ebx
.text:00403C63                 sub     esp, 40h
.text:00403C66                 mov     edx, ds:dword_40814C
.text:00403C6C                 mov     ebx, ds:dword_408140
.text:00403C72                 mov     esi, ds:dword_408148
.text:00403C78                 mov     edi, ds:dword_408144
.text:00403C7E                 mov     [esp+1Ch], edx
.text:00403C82                 mov     ecx, ds:dword_408150
.text:00403C88                 mov     edx, ds:dword_408160
.text:00403C8E                 mov     [esp+10h], ebx
.text:00403C92                 mov     ebx, ds:dword_408154
.text:00403C98                 mov     [esp+30h], edx
.text:00403C9C                 movzx   edx, byte ptr [esp+54h]
.text:00403CA1                 mov     [esp+18h], esi
.text:00403CA5                 mov     esi, ds:dword_40815C
.text:00403CAB                 mov     [esp+14h], edi
.text:00403CAF                 mov     edi, ds:dword_408158
.text:00403CB5                 mov     [esp+20h], ecx
.text:00403CB9                 mov     cl, dl
.text:00403CBB                 shr     cl, 5
.text:00403CBE                 mov     [esp+24h], ebx
.text:00403CC2                 movzx   ebx, cl
.text:00403CC5                 mov     [esp+2Ch], esi
.text:00403CC9                 lea     esi, [esp+10h]
.text:00403CCD                 mov     [esp+28h], edi
.text:00403CD1                 lea     edi, [esi+ebx*4]
.text:00403CD4                 mov     ebx, edx
.text:00403CD6                 mov     edx, [edi+4]
.text:00403CD9                 and     ebx, 1Fh
.text:00403CDC                 mov     cl, bl
.text:00403CDE                 mov     eax, edx
.text:00403CE0                 shr     eax, cl
.text:00403CE2                 and     eax, 1
.text:00403CE5                 xor     eax, 1
.text:00403CE8                 shl     eax, cl
.text:00403CEA                 xor     edx, eax
.text:00403CEC                 mov     [edi+4], edx
.text:00403CEF                 mov     edx, [esp+50h]
.text:00403CF3                 mov     [esp+0Ch], esi
.text:00403CF7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403CFF                 mov     [esp+4], edx
.text:00403D03                 mov     dword ptr [esp], 0
.text:00403D0A                 call    sub_403DC0
.text:00403D0F                 add     esp, 40h
.text:00403D12                 pop     ebx
.text:00403D13                 pop     esi
.text:00403D14                 pop     edi
.text:00403D15                 retn
.text:00403D15 ; ---------------------------------------------------------------------------
.text:00403D16                 align 10h
.text:00403D20
.text:00403D20 ; =============== S U B R O U T I N E =======================================
.text:00403D20
.text:00403D20
.text:00403D20 ; int __cdecl sub_403D20(char *)
.text:00403D20 sub_403D20      proc near               ; CODE XREF: sub_402B10+64↑p
.text:00403D20
.text:00403D20 var_4C          = dword ptr -4Ch
.text:00403D20 var_48          = dword ptr -48h
.text:00403D20 var_44          = dword ptr -44h
.text:00403D20 var_40          = dword ptr -40h
.text:00403D20 var_3C          = dword ptr -3Ch
.text:00403D20 var_38          = dword ptr -38h
.text:00403D20 var_34          = dword ptr -34h
.text:00403D20 var_30          = dword ptr -30h
.text:00403D20 var_2C          = dword ptr -2Ch
.text:00403D20 var_28          = dword ptr -28h
.text:00403D20 var_24          = dword ptr -24h
.text:00403D20 var_20          = dword ptr -20h
.text:00403D20 var_1C          = dword ptr -1Ch
.text:00403D20 arg_0           = dword ptr  4
.text:00403D20
.text:00403D20                 sub     esp, 4Ch
.text:00403D23                 mov     ecx, ds:dword_408140
.text:00403D29                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403D31                 mov     edx, ds:dword_408144
.text:00403D37                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403D3E                 mov     [esp+4Ch+var_3C], ecx
.text:00403D42                 mov     ecx, ds:dword_40814C
.text:00403D48                 mov     [esp+4Ch+var_38], edx
.text:00403D4C                 mov     edx, ds:dword_408148
.text:00403D52                 mov     [esp+4Ch+var_30], ecx
.text:00403D56                 mov     ecx, ds:dword_408150
.text:00403D5C                 mov     eax, edx
.text:00403D5E                 shr     eax, 1Ah
.text:00403D61                 and     eax, 1
.text:00403D64                 xor     eax, 1
.text:00403D67                 mov     [esp+4Ch+var_2C], ecx
.text:00403D6B                 shl     eax, 1Ah
.text:00403D6E                 mov     ecx, ds:dword_408154
.text:00403D74                 xor     edx, eax
.text:00403D76                 mov     [esp+4Ch+var_34], edx
.text:00403D7A                 mov     edx, [esp+4Ch+arg_0]
.text:00403D7E                 mov     [esp+4Ch+var_28], ecx
.text:00403D82                 mov     ecx, ds:dword_408158
.text:00403D88                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403D8C                 mov     [esp+4Ch+var_24], ecx
.text:00403D90                 mov     ecx, ds:dword_40815C
.text:00403D96                 mov     [esp+4Ch+var_20], ecx
.text:00403D9A                 mov     ecx, ds:dword_408160
.text:00403DA0                 mov     [esp+4Ch+var_1C], ecx
.text:00403DA4                 lea     ecx, [esp+4Ch+var_3C]
.text:00403DA8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403DAC                 call    sub_403DC0
.text:00403DB1                 add     esp, 4Ch
.text:00403DB4                 retn
.text:00403DB4 sub_403D20      endp
.text:00403DB4
.text:00403DB4 ; ---------------------------------------------------------------------------
.text:00403DB5                 align 10h
.text:00403DC0
.text:00403DC0 ; =============== S U B R O U T I N E =======================================
.text:00403DC0
.text:00403DC0
.text:00403DC0 ; int __cdecl sub_403DC0(int, char *, int, int)
.text:00403DC0 sub_403DC0      proc near               ; CODE XREF: .text:00403972↑p
.text:00403DC0                                         ; .text:004039A2↑p ...
.text:00403DC0
.text:00403DC0 Block           = dword ptr -2Ch
.text:00403DC0 var_28          = dword ptr -28h
.text:00403DC0 Str             = dword ptr -24h
.text:00403DC0 var_20          = dword ptr -20h
.text:00403DC0 var_1C          = dword ptr -1Ch
.text:00403DC0 var_18          = dword ptr -18h
.text:00403DC0 var_14          = dword ptr -14h
.text:00403DC0 arg_0           = dword ptr  4
.text:00403DC0 arg_4           = dword ptr  8
.text:00403DC0 arg_8           = dword ptr  0Ch
.text:00403DC0 arg_C           = dword ptr  10h
.text:00403DC0
.text:00403DC0                 push    ebp
.text:00403DC1                 push    edi
.text:00403DC2                 push    esi
.text:00403DC3                 push    ebx
.text:00403DC4                 sub     esp, 1Ch
.text:00403DC7                 call    _errno
.text:00403DCC                 mov     edx, [eax]
.text:00403DCE                 mov     eax, [esp+2Ch+arg_0]
.text:00403DD2                 mov     [esp+2Ch+var_14], edx
.text:00403DD6                 test    eax, eax
.text:00403DD8                 js      loc_403F7A
.text:00403DDE                 mov     eax, [esp+2Ch+arg_0]
.text:00403DE2                 cmp     dword_407020, eax
.text:00403DE8                 ja      short loc_403E60
.text:00403DEA                 mov     esi, eax
.text:00403DEC                 inc     esi
.text:00403DED                 cmp     esi, 1FFFFFFFh
.text:00403DF3                 ja      loc_403F7F
.text:00403DF9                 mov     ebx, off_40702C
.text:00403DFF                 cmp     ebx, offset dword_407024
.text:00403E05                 jz      loc_403F51
.text:00403E0B
.text:00403E0B loc_403E0B:                             ; CODE XREF: sub_403DC0+1B5↓j
.text:00403E0B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403E0E                 lea     ecx, ds:0[esi*8]
.text:00403E15                 mov     ebp, esi
.text:00403E17                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403E1B                 call    sub_404560
.text:00403E20                 mov     off_40702C, eax
.text:00403E25                 mov     ebx, dword_407020
.text:00403E2B                 sub     ebp, ebx
.text:00403E2D                 lea     edi, [eax+ebx*8]
.text:00403E30                 lea     eax, ds:0[ebp*8]
.text:00403E37                 cmp     eax, 7
.text:00403E3A                 jbe     short loc_403E50
.text:00403E3C                 test    edi, 4
.text:00403E42                 jz      short loc_403E50
.text:00403E44                 mov     dword ptr [edi], 0
.text:00403E4A                 sub     eax, 4
.text:00403E4D                 add     edi, 4
.text:00403E50
.text:00403E50 loc_403E50:                             ; CODE XREF: sub_403DC0+7A↑j
.text:00403E50                                         ; sub_403DC0+82↑j
.text:00403E50                 cld
.text:00403E51                 mov     ecx, eax
.text:00403E53                 shr     ecx, 2
.text:00403E56                 xor     eax, eax
.text:00403E58                 rep stosd
.text:00403E5A                 mov     dword_407020, esi
.text:00403E60
.text:00403E60 loc_403E60:                             ; CODE XREF: sub_403DC0+28↑j
.text:00403E60                 mov     esi, off_40702C
.text:00403E66                 mov     eax, [esp+2Ch+arg_0]
.text:00403E6A                 mov     ebp, [esi+eax*8]
.text:00403E6D                 mov     edi, [esi+eax*8+4]
.text:00403E71                 mov     esi, [esp+2Ch+arg_C]
.text:00403E75                 test    esi, esi
.text:00403E77                 jz      loc_403F47
.text:00403E7D
.text:00403E7D loc_403E7D:                             ; CODE XREF: sub_403DC0+18C↓j
.text:00403E7D                 call    _errno
.text:00403E82                 mov     ebx, [eax]
.text:00403E84                 mov     [esp+2Ch+var_18], esi ; int
.text:00403E88                 mov     ecx, [esi]
.text:00403E8A                 mov     [esp+2Ch+Block], edi ; int
.text:00403E8D                 mov     edx, [esp+2Ch+arg_8]
.text:00403E91                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403E95                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403E99                 mov     ecx, [esp+2Ch+arg_4]
.text:00403E9D                 mov     [esp+2Ch+var_20], edx ; int
.text:00403EA1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403EA5                 call    sub_402C80
.text:00403EAA                 mov     esi, eax
.text:00403EAC                 call    _errno
.text:00403EB1                 mov     [eax], ebx
.text:00403EB3                 cmp     ebp, esi
.text:00403EB5                 ja      short loc_403F2B
.text:00403EB7                 lea     ebp, [esi+1]
.text:00403EBA                 mov     ebx, off_40702C
.text:00403EC0                 cmp     edi, offset unk_408040
.text:00403EC6                 mov     esi, [esp+2Ch+arg_0]
.text:00403ECA                 mov     [ebx+esi*8], ebp
.text:00403ECD                 jz      short loc_403EDD
.text:00403ECF                 mov     [esp+2Ch+Block], edi ; Block
.text:00403ED2                 call    free
.text:00403ED7                 mov     ebx, off_40702C
.text:00403EDD
.text:00403EDD loc_403EDD:                             ; CODE XREF: sub_403DC0+10D↑j
.text:00403EDD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403EE0                 call    sub_4044D0
.text:00403EE5                 mov     esi, [esp+2Ch+arg_C]
.text:00403EE9                 mov     edi, eax
.text:00403EEB                 mov     eax, [esp+2Ch+arg_0]
.text:00403EEF                 test    esi, esi
.text:00403EF1                 mov     [ebx+eax*8+4], edi
.text:00403EF5                 jz      short loc_403F40
.text:00403EF7
.text:00403EF7 loc_403EF7:                             ; CODE XREF: sub_403DC0+185↓j
.text:00403EF7                 call    _errno
.text:00403EFC                 mov     ebx, [eax]
.text:00403EFE                 mov     [esp+2Ch+var_18], esi ; int
.text:00403F02                 mov     ecx, [esi]
.text:00403F04                 mov     [esp+2Ch+Block], edi ; int
.text:00403F07                 mov     edx, [esp+2Ch+arg_8]
.text:00403F0B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403F0F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403F13                 mov     ecx, [esp+2Ch+arg_4]
.text:00403F17                 mov     [esp+2Ch+var_20], edx ; int
.text:00403F1B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403F1F                 call    sub_402C80
.text:00403F24                 call    _errno
.text:00403F29                 mov     [eax], ebx
.text:00403F2B
.text:00403F2B loc_403F2B:                             ; CODE XREF: sub_403DC0+F5↑j
.text:00403F2B                 call    _errno
.text:00403F30                 mov     ebp, [esp+2Ch+var_14]
.text:00403F34                 mov     [eax], ebp
.text:00403F36                 add     esp, 1Ch
.text:00403F39                 mov     eax, edi
.text:00403F3B                 pop     ebx
.text:00403F3C                 pop     esi
.text:00403F3D                 pop     edi
.text:00403F3E                 pop     ebp
.text:00403F3F                 retn
.text:00403F40 ; ---------------------------------------------------------------------------
.text:00403F40
.text:00403F40 loc_403F40:                             ; CODE XREF: sub_403DC0+135↑j
.text:00403F40                 mov     esi, offset dword_408140
.text:00403F45                 jmp     short loc_403EF7
.text:00403F47 ; ---------------------------------------------------------------------------
.text:00403F47
.text:00403F47 loc_403F47:                             ; CODE XREF: sub_403DC0+B7↑j
.text:00403F47                 mov     esi, offset dword_408140
.text:00403F4C                 jmp     loc_403E7D
.text:00403F51 ; ---------------------------------------------------------------------------
.text:00403F51
.text:00403F51 loc_403F51:                             ; CODE XREF: sub_403DC0+45↑j
.text:00403F51                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00403F58                 call    sub_4044D0
.text:00403F5D                 mov     off_40702C, eax
.text:00403F62                 mov     edi, dword_407024
.text:00403F68                 mov     ebx, eax
.text:00403F6A                 mov     ecx, off_407028
.text:00403F70                 mov     [eax], edi
.text:00403F72                 mov     [eax+4], ecx
.text:00403F75                 jmp     loc_403E0B
.text:00403F7A ; ---------------------------------------------------------------------------
.text:00403F7A
.text:00403F7A loc_403F7A:                             ; CODE XREF: sub_403DC0+18↑j
.text:00403F7A                 call    abort
.text:00403F7F ; ---------------------------------------------------------------------------
.text:00403F7F
.text:00403F7F loc_403F7F:                             ; CODE XREF: sub_403DC0+33↑j
.text:00403F7F                 call    sub_404780
.text:00403F7F sub_403DC0      endp
.text:00403F7F
.text:00403F7F ; ---------------------------------------------------------------------------
.text:00403F84                 align 10h
.text:00403F90 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403F90                                         ; DATA XREF: .data:Buffer↓o
.text:00403FC2 ; const char Format[12]
.text:00403FC2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404280+50↓o
.text:00403FCE aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403FDE                 db 12h dup(90h)
.text:00403FF0
.text:00403FF0 ; =============== S U B R O U T I N E =======================================
.text:00403FF0
.text:00403FF0
.text:00403FF0 sub_403FF0      proc near               ; DATA XREF: sub_404280+100↓o
.text:00403FF0                 push    esp
.text:00403FF1                 push    69207369h
.text:00403FF6                 jnb     short loc_404018
.text:00403FF8                 db      66h
.text:00403FF8                 jb      short near ptr 4060h
.text:00403FFB                 and     gs:[ebx+6Fh], dh
.text:00403FFF                 db      66h
.text:00403FFF                 jz      short near ptr 4079h
.text:00404002                 popa
.text:00404003                 jb      short loc_40406A
.text:00404005                 cmp     esp, [eax]
.text:00404007                 jnb     short near ptr loc_40406C+2
.text:00404009                 and     gs:[eax+ebp*2+65h], dh
.text:0040400E                 and     [ebx+6Fh], dh
.text:00404011                 jnz     short loc_404085
.text:00404013                 arpl    [ebp+20h], sp
.text:00404016                 outsw
.text:00404018
.text:00404018 loc_404018:                             ; CODE XREF: sub_403FF0+6↑j
.text:00404018                 jb      short loc_40403A
.text:0040401A                 arpl    [edi+70h], bp
.text:0040401D                 jns     short loc_404088
.text:0040401F                 outsb
.text:00404020                 and     [bp+di+6Fh], ah
.text:00404024                 outsb
.text:00404025                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040402E                 and     [eax+ebp*2+65h], dl
.text:00404032                 jb      short near ptr loc_404098+1
.text:00404034                 and     [ecx+73h], ch
.text:00404037                 and     [esi+4Fh], cl
.text:0040403A
.text:0040403A loc_40403A:                             ; CODE XREF: sub_403FF0:loc_404018↑j
.text:0040403A                 or      dh, [edi+61h]
.text:0040403D                 jb      short loc_4040B1
.text:0040403F                 popa
.text:00404040                 outsb
.text:00404041                 jz      short loc_4040BC
.text:00404043                 cmp     esp, [eax]
.text:00404045                 outsb
.text:00404046                 outsd
.text:00404047                 jz      short loc_404069
.text:00404049                 db      65h
.text:00404049                 jbe     short loc_4040B1
.text:0040404C                 outsb
.text:0040404D                 and     [esi+6Fh], ah
.text:00404050                 jb      short near ptr loc_404070+2
.text:00404052                 dec     ebp
.text:00404053                 inc     ebp
.text:00404054                 push    edx
.text:00404055                 inc     ebx
.text:00404056                 dec     eax
.text:00404057                 inc     ecx
.text:00404058                 dec     esi
.text:00404059                 push    esp
.text:0040405A                 inc     ecx
.text:0040405B                 inc     edx
.text:0040405C                 dec     ecx
.text:0040405D                 dec     esp
.text:0040405E                 dec     ecx
.text:0040405F                 push    esp
.text:00404060                 pop     ecx
.text:00404061                 and     [edi+72h], ch
.text:00404064                 and     [esi+49h], al
.text:00404067                 push    esp
.text:00404068                 dec     esi
.text:00404069
.text:00404069 loc_404069:                             ; CODE XREF: sub_403FF0+57↑j
.text:00404069                 inc     ebp
.text:0040406A
.text:0040406A loc_40406A:                             ; CODE XREF: sub_403FF0+13↑j
.text:0040406A                 push    ebx
.text:0040406B                 push    ebx
.text:0040406C
.text:0040406C loc_40406C:                             ; CODE XREF: sub_403FF0+17↑j
.text:0040406C                 and     [esi+4Fh], al
.text:0040406F                 push    edx
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_403FF0+60↑j
.text:00404070                 and     [ecx+20h], al
.text:00404073                 push    eax
.text:00404074                 inc     ecx
.text:00404075                 push    edx
.text:00404076                 push    esp
.text:00404077                 dec     ecx
.text:00404078                 inc     ebx
.text:00404079                 push    ebp
.text:0040407A                 dec     esp
.text:0040407B                 inc     ecx
.text:0040407C                 push    edx
.text:0040407D                 and     [eax+55h], dl
.text:00404080                 push    edx
.text:00404081                 push    eax
.text:00404082                 dec     edi
.text:00404083                 push    ebx
.text:00404084                 inc     ebp
.text:00404085
.text:00404085 loc_404085:                             ; CODE XREF: sub_403FF0+21↑j
.text:00404085                 or      al, cs:[eax]
.text:00404088
.text:00404088 loc_404088:                             ; CODE XREF: sub_403FF0+2D↑j
.text:00404088                                         ; DATA XREF: sub_404280:loc_4043C1↓o
.text:00404088                 push    edi
.text:00404089                 jb      short near ptr loc_4040F3+1
.text:0040408B                 jz      short near ptr loc_404100+1
.text:0040408D                 outs    dx, byte ptr gs:[esi]
.text:0040408F                 and     [edx+79h], ah
.text:00404092                 and     ds:6E612073h, ah
.text:00404098
.text:00404098 loc_404098:                             ; CODE XREF: sub_403FF0+42↑j
.text:00404098                 and     fs:0A2E73h, ah
.text:0040409F
.text:0040409F loc_40409F:                             ; DATA XREF: sub_404280:loc_4043CD↓o
.text:0040409F                 push    edi
.text:004040A0                 jb      short near ptr loc_40410A+1
.text:004040A2                 jz      short loc_404118
.text:004040A4                 outs    dx, byte ptr gs:[esi]
.text:004040A6                 and     [edx+79h], ah
.text:004040A9                 and     ds:25202C73h, ah
.text:004040AF                 jnb     short near ptr loc_4040DA+3
.text:004040B1
.text:004040B1 loc_4040B1:                             ; CODE XREF: sub_403FF0+4D↑j
.text:004040B1                                         ; sub_403FF0+59↑j
.text:004040B1                 and     [ecx+6Eh], ah
.text:004040B4                 and     fs:0A2E73h, ah
.text:004040BB                 nop
.text:004040BC
.text:004040BC loc_4040BC:                             ; CODE XREF: sub_403FF0+51↑j
.text:004040BC                 nop
.text:004040BD                 nop
.text:004040BE                 nop
.text:004040BF                 nop
.text:004040C0                 nop
.text:004040C1                 nop
.text:004040C2                 nop
.text:004040C3                 nop
.text:004040C4                 nop
.text:004040C5                 nop
.text:004040C6                 nop
.text:004040C7                 nop
.text:004040C8                 nop
.text:004040C9                 nop
.text:004040CA                 nop
.text:004040CB                 nop
.text:004040CC                 nop
.text:004040CD                 nop
.text:004040CE                 nop
.text:004040CF                 nop
.text:004040CF sub_403FF0      endp ; sp-analysis failed
.text:004040CF
.text:004040D0
.text:004040D0 ; =============== S U B R O U T I N E =======================================
.text:004040D0
.text:004040D0
.text:004040D0 sub_4040D0      proc near               ; DATA XREF: sub_404280:loc_4043D9↓o
.text:004040D0                 push    edi
.text:004040D1                 jb      short near ptr loc_40413A+2
.text:004040D3                 jz      short near ptr loc_404148+1
.text:004040D5                 outs    dx, byte ptr gs:[esi]
.text:004040D7                 and     [edx+79h], ah
.text:004040DA
.text:004040DA loc_4040DA:                             ; CODE XREF: sub_403FF0+BF↑j
.text:004040DA                 and     ds:25202C73h, ah
.text:004040E0                 jnb     short near ptr loc_40410D+1
.text:004040E2                 and     ds:610A2C73h, ah
.text:004040E8                 outsb
.text:004040E9                 and     fs:0A2E73h, ah
.text:004040F0
.text:004040F0 loc_4040F0:                             ; DATA XREF: sub_404280:loc_4043E5↓o
.text:004040F0                 push    edi
.text:004040F1                 jb      short loc_40415C
.text:004040F3
.text:004040F3 loc_4040F3:                             ; CODE XREF: sub_403FF0+99↑j
.text:004040F3                 jz      short loc_404169
.text:004040F5                 outs    dx, byte ptr gs:[esi]
.text:004040F7                 and     [edx+79h], ah
.text:004040FA                 and     ds:25202C73h, ah
.text:00404100
.text:00404100 loc_404100:                             ; CODE XREF: sub_403FF0+9B↑j
.text:00404100                 jnb     short loc_40412E
.text:00404102                 and     ds:250A2C73h, ah
.text:00404108                 jnb     short near ptr loc_404135+1
.text:0040410A
.text:0040410A loc_40410A:                             ; CODE XREF: sub_403FF0+B0↑j
.text:0040410A                 and     [ecx+6Eh], ah
.text:0040410D
.text:0040410D loc_40410D:                             ; CODE XREF: sub_4040D0+10↑j
.text:0040410D                 and     fs:0A2E73h, ah
.text:00404114                 nop
.text:00404115                 nop
.text:00404116                 nop
.text:00404117                 nop
.text:00404118
.text:00404118 loc_404118:                             ; CODE XREF: sub_403FF0+B2↑j
.text:00404118                 nop
.text:00404119                 nop
.text:0040411A                 nop
.text:0040411B                 nop
.text:0040411C                 nop
.text:0040411D                 nop
.text:0040411E                 nop
.text:0040411F                 nop
.text:00404120                 nop
.text:00404121                 nop
.text:00404122                 nop
.text:00404123                 nop
.text:00404124                 nop
.text:00404125                 nop
.text:00404126                 nop
.text:00404127                 nop
.text:00404128                 nop
.text:00404129                 nop
.text:0040412A                 nop
.text:0040412B                 nop
.text:0040412C                 nop
.text:0040412D                 nop
.text:0040412E
.text:0040412E loc_40412E:                             ; CODE XREF: sub_4040D0:loc_404100↑j
.text:0040412E                 nop
.text:0040412F                 nop
.text:0040412F sub_4040D0      endp ; sp-analysis failed
.text:0040412F
.text:00404130
.text:00404130 ; =============== S U B R O U T I N E =======================================
.text:00404130
.text:00404130
.text:00404130 sub_404130      proc near               ; DATA XREF: sub_404280:loc_4043F1↓o
.text:00404130                 push    edi
.text:00404131                 jb      short loc_40419C
.text:00404133                 jz      short loc_4041A9
.text:00404135
.text:00404135 loc_404135:                             ; CODE XREF: sub_4040D0+38↑j
.text:00404135                 outs    dx, byte ptr gs:[esi]
.text:00404137                 and     [edx+79h], ah
.text:0040413A
.text:0040413A loc_40413A:                             ; CODE XREF: sub_4040D0+1↑j
.text:0040413A                 and     ds:25202C73h, ah
.text:00404140                 jnb     short loc_40416E
.text:00404142                 and     ds:250A2C73h, ah
.text:00404148
.text:00404148 loc_404148:                             ; CODE XREF: sub_4040D0+3↑j
.text:00404148                 jnb     short near ptr loc_404175+1
.text:0040414A                 and     ds:61202C73h, ah
.text:00404150                 outsb
.text:00404151                 and     fs:0A2E73h, ah
.text:00404158                 nop
.text:00404159                 nop
.text:0040415A                 nop
.text:0040415B                 nop
.text:0040415C
.text:0040415C loc_40415C:                             ; CODE XREF: sub_4040D0+21↑j
.text:0040415C                 nop
.text:0040415D                 nop
.text:0040415E                 nop
.text:0040415F                 nop
.text:00404160                 nop
.text:00404161                 nop
.text:00404162                 nop
.text:00404163                 nop
.text:00404164                 nop
.text:00404165                 nop
.text:00404166                 nop
.text:00404167                 nop
.text:00404168                 nop
.text:00404169
.text:00404169 loc_404169:                             ; CODE XREF: sub_4040D0:loc_4040F3↑j
.text:00404169                 nop
.text:0040416A                 nop
.text:0040416B                 nop
.text:0040416C                 nop
.text:0040416D                 nop
.text:0040416E
.text:0040416E loc_40416E:                             ; CODE XREF: sub_404130+10↑j
.text:0040416E                 nop
.text:0040416F                 nop
.text:0040416F sub_404130      endp ; sp-analysis failed
.text:0040416F
.text:00404170
.text:00404170 ; =============== S U B R O U T I N E =======================================
.text:00404170
.text:00404170
.text:00404170 sub_404170      proc near               ; DATA XREF: sub_404280:loc_4043FD↓o
.text:00404170                 push    edi
.text:00404171                 jb      short near ptr loc_4041D9+3
.text:00404173                 jz      short loc_4041E9
.text:00404175
.text:00404175 loc_404175:                             ; CODE XREF: sub_404130:loc_404148↑j
.text:00404175                 outs    dx, byte ptr gs:[esi]
.text:00404177                 and     [edx+79h], ah
.text:0040417A                 and     ds:25202C73h, ah
.text:00404180                 jnb     short loc_4041AE
.text:00404182                 and     ds:250A2C73h, ah
.text:00404188                 jnb     short near ptr loc_4041B5+1
.text:0040418A                 and     ds:25202C73h, ah
.text:00404190                 jnb     short near ptr loc_4041BA+4
.text:00404192                 and     [ecx+6Eh], ah
.text:00404195                 and     fs:0A2E73h, ah
.text:0040419C
.text:0040419C loc_40419C:                             ; CODE XREF: sub_404130+1↑j
.text:0040419C                 nop
.text:0040419D                 nop
.text:0040419E                 nop
.text:0040419F                 nop
.text:004041A0                 nop
.text:004041A1                 nop
.text:004041A2                 nop
.text:004041A3                 nop
.text:004041A4                 nop
.text:004041A5                 nop
.text:004041A6                 nop
.text:004041A7                 nop
.text:004041A8                 nop
.text:004041A9
.text:004041A9 loc_4041A9:                             ; CODE XREF: sub_404130+3↑j
.text:004041A9                 nop
.text:004041AA                 nop
.text:004041AB                 nop
.text:004041AC                 nop
.text:004041AD                 nop
.text:004041AE
.text:004041AE loc_4041AE:                             ; CODE XREF: sub_404170+10↑j
.text:004041AE                 nop
.text:004041AF                 nop
.text:004041AF sub_404170      endp ; sp-analysis failed
.text:004041AF
.text:004041B0
.text:004041B0 ; =============== S U B R O U T I N E =======================================
.text:004041B0
.text:004041B0
.text:004041B0 sub_4041B0      proc near               ; DATA XREF: sub_404280:loc_404409↓o
.text:004041B0                 push    edi
.text:004041B1                 jb      short near ptr loc_40421A+2
.text:004041B3                 jz      short near ptr loc_404224+5
.text:004041B5
.text:004041B5 loc_4041B5:                             ; CODE XREF: sub_404170+18↑j
.text:004041B5                 outs    dx, byte ptr gs:[esi]
.text:004041B7                 and     [edx+79h], ah
.text:004041BA
.text:004041BA loc_4041BA:                             ; CODE XREF: sub_404170+20↑j
.text:004041BA                 and     ds:25202C73h, ah
.text:004041C0                 jnb     short loc_4041EE
.text:004041C2                 and     ds:250A2C73h, ah
.text:004041C8                 jnb     short near ptr loc_4041F5+1
.text:004041CA                 and     ds:25202C73h, ah
.text:004041D0                 jnb     short near ptr loc_4041FA+4
.text:004041D2                 and     ds:610A2C73h, ah
.text:004041D8                 outsb
.text:004041D9
.text:004041D9 loc_4041D9:                             ; CODE XREF: sub_404170+1↑j
.text:004041D9                 and     fs:0A2E73h, ah
.text:004041E0                 nop
.text:004041E1                 nop
.text:004041E2                 nop
.text:004041E3                 nop
.text:004041E4                 nop
.text:004041E5                 nop
.text:004041E6                 nop
.text:004041E7                 nop
.text:004041E8                 nop
.text:004041E9
.text:004041E9 loc_4041E9:                             ; CODE XREF: sub_404170+3↑j
.text:004041E9                 nop
.text:004041EA                 nop
.text:004041EB                 nop
.text:004041EC                 nop
.text:004041ED                 nop
.text:004041EE
.text:004041EE loc_4041EE:                             ; CODE XREF: sub_4041B0+10↑j
.text:004041EE                 nop
.text:004041EF                 nop
.text:004041EF sub_4041B0      endp ; sp-analysis failed
.text:004041EF
.text:004041F0
.text:004041F0 ; =============== S U B R O U T I N E =======================================
.text:004041F0
.text:004041F0
.text:004041F0 sub_4041F0      proc near               ; DATA XREF: sub_404280:loc_404415↓o
.text:004041F0                 push    edi
.text:004041F1                 jb      short near ptr loc_40425A+2
.text:004041F3                 jz      short near ptr loc_404265+4
.text:004041F5
.text:004041F5 loc_4041F5:                             ; CODE XREF: sub_4041B0+18↑j
.text:004041F5                 outs    dx, byte ptr gs:[esi]
.text:004041F7                 and     [edx+79h], ah
.text:004041FA
.text:004041FA loc_4041FA:                             ; CODE XREF: sub_4041B0+20↑j
.text:004041FA                 and     ds:25202C73h, ah
.text:00404200                 jnb     short near ptr loc_40422A+4
.text:00404202                 and     ds:250A2C73h, ah
.text:00404208                 jnb     short near ptr loc_404235+1
.text:0040420A                 and     ds:25202C73h, ah
.text:00404210                 jnb     short near ptr loc_40423A+4
.text:00404212                 and     ds:250A2C73h, ah
.text:00404218                 jnb     short near ptr loc_404242+4
.text:0040421A
.text:0040421A loc_40421A:                             ; CODE XREF: sub_4041B0+1↑j
.text:0040421A                 and     [ecx+6Eh], ah
.text:0040421D                 and     fs:0A2E73h, ah
.text:00404224
.text:00404224 loc_404224:                             ; CODE XREF: sub_4041B0+3↑j
.text:00404224                 lea     esi, [esi+0]
.text:0040422A
.text:0040422A loc_40422A:                             ; CODE XREF: sub_4041F0+10↑j
.text:0040422A                 lea     edi, [edi+0]
.text:00404230
.text:00404230 loc_404230:                             ; DATA XREF: sub_404280:def_4042ED↓o
.text:00404230                 push    edi
.text:00404231                 jb      short near ptr loc_40429B+1
.text:00404233                 jz      short near ptr loc_4042A8+1
.text:00404235
.text:00404235 loc_404235:                             ; CODE XREF: sub_4041F0+18↑j
.text:00404235                 outs    dx, byte ptr gs:[esi]
.text:00404237                 and     [edx+79h], ah
.text:0040423A
.text:0040423A loc_40423A:                             ; CODE XREF: sub_4041F0+20↑j
.text:0040423A                 and     ds:25202C73h, ah
.text:00404240                 jnb     short near ptr loc_40426C+2
.text:00404242
.text:00404242 loc_404242:                             ; CODE XREF: sub_4041F0+28↑j
.text:00404242                 and     ds:250A2C73h, ah
.text:00404248                 jnb     short near ptr loc_404273+3
.text:0040424A                 and     ds:25202C73h, ah
.text:00404250                 jnb     short near ptr loc_404279+5
.text:00404252                 and     ds:250A2C73h, ah
.text:00404258                 jnb     short near ptr loc_404284+2
.text:0040425A
.text:0040425A loc_40425A:                             ; CODE XREF: sub_4041F0+1↑j
.text:0040425A                 and     ds:61202C73h, ah
.text:00404260                 outsb
.text:00404261                 and     fs:[edi+74h], ch
.text:00404265
.text:00404265 loc_404265:                             ; CODE XREF: sub_4041F0+3↑j
.text:00404265                 push    2E737265h
.text:0040426A                 or      al, [eax]
.text:0040426C
.text:0040426C loc_40426C:                             ; CODE XREF: sub_4041F0+50↑j
.text:0040426C                                         ; DATA XREF: sub_404280+1B5↓o
.text:0040426C                 and     eax, 73252073h
.text:00404271                 or      al, [eax]
.text:00404273
.text:00404273 loc_404273:                             ; CODE XREF: sub_4041F0+58↑j
.text:00404273                 lea     esi, [esi+0]
.text:00404279
.text:00404279 loc_404279:                             ; CODE XREF: sub_4041F0+60↑j
.text:00404279                 lea     edi, [edi+0]
.text:00404279 sub_4041F0      endp ; sp-analysis failed
.text:00404279
.text:00404280
.text:00404280 ; =============== S U B R O U T I N E =======================================
.text:00404280
.text:00404280
.text:00404280 ; int __cdecl sub_404280(FILE *, FILE *, int, int, va_list)
.text:00404280 sub_404280      proc near               ; CODE XREF: sub_402A20+A5↑p
.text:00404280                                         ; .text:0040447A↓p
.text:00404280
.text:00404280 Stream          = dword ptr -2Ch
.text:00404280 Format          = dword ptr -28h
.text:00404280 ArgList         = dword ptr -24h
.text:00404280 var_20          = dword ptr -20h
.text:00404280 var_1C          = dword ptr -1Ch
.text:00404280 var_14          = dword ptr -14h
.text:00404280 arg_0           = dword ptr  4
.text:00404280 arg_4           = dword ptr  8
.text:00404280 arg_8           = dword ptr  0Ch
.text:00404280 arg_C           = dword ptr  10h
.text:00404280 arg_10          = dword ptr  14h
.text:00404280
.text:00404280                 push    ebp
.text:00404281                 push    edi
.text:00404282                 push    esi
.text:00404283                 push    ebx
.text:00404284
.text:00404284 loc_404284:                             ; CODE XREF: sub_4041F0+68↑j
.text:00404284                 sub     esp, 1Ch
.text:00404287                 xor     ebx, ebx
.text:00404289                 mov     edi, [esp+2Ch+arg_10]
.text:0040428D                 mov     edx, [esp+2Ch+arg_8]
.text:00404291                 mov     esi, [esp+2Ch+arg_0]
.text:00404295                 mov     eax, [edi]
.text:00404297                 mov     ecx, [esp+2Ch+arg_4]
.text:0040429B
.text:0040429B loc_40429B:                             ; CODE XREF: sub_4041F0+41↑j
.text:0040429B                 mov     [esp+2Ch+var_14], edx
.text:0040429F                 mov     ebp, [esp+2Ch+arg_C]
.text:004042A3                 lea     edx, [edi+4]
.text:004042A6                 test    eax, eax
.text:004042A8
.text:004042A8 loc_4042A8:                             ; CODE XREF: sub_4041F0+43↑j
.text:004042A8                 jz      short loc_4042BC
.text:004042AA                 lea     esi, [esi+0]
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_404280+3A↓j
.text:004042B0                 mov     eax, edx
.text:004042B2                 inc     ebx
.text:004042B3                 mov     eax, [eax]
.text:004042B5                 add     edx, 4
.text:004042B8                 test    eax, eax
.text:004042BA                 jnz     short loc_4042B0
.text:004042BC
.text:004042BC loc_4042BC:                             ; CODE XREF: sub_404280:loc_4042A8↑j
.text:004042BC                 test    ecx, ecx
.text:004042BE                 jz      loc_40442D
.text:004042C4                 mov     [esp+2Ch+var_1C], ebp
.text:004042C8                 mov     edx, [esp+2Ch+var_14]
.text:004042CC                 mov     [esp+2Ch+ArgList], ecx
.text:004042D0                 mov     [esp+2Ch+Format], offset Format ; Format
.text:004042D8                 mov     [esp+2Ch+var_20], edx
.text:004042DC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004042DF                 call    fprintf
.text:004042E4
.text:004042E4 loc_4042E4:                             ; CODE XREF: sub_404280+1C9↓j
.text:004042E4                 cmp     ebx, 9          ; switch 10 cases
.text:004042E7                 ja      def_4042ED      ; jumptable 004042ED default case
.text:004042ED                 jmp     ds:jpt_4042ED[ebx*4] ; switch jump
.text:004042ED ; ---------------------------------------------------------------------------
.text:004042F4 jpt_4042ED      dd offset loc_40431C    ; DATA XREF: sub_404280+6D↑r
.text:004042F4                 dd offset loc_404321    ; jump table for switch statement
.text:004042F4                 dd offset loc_4043C1
.text:004042F4                 dd offset loc_4043CD
.text:004042F4                 dd offset loc_4043D9
.text:004042F4                 dd offset loc_4043E5
.text:004042F4                 dd offset loc_4043F1
.text:004042F4                 dd offset loc_4043FD
.text:004042F4                 dd offset loc_404409
.text:004042F4                 dd offset loc_404415
.text:0040431C ; ---------------------------------------------------------------------------
.text:0040431C
.text:0040431C loc_40431C:                             ; CODE XREF: sub_404280+6D↑j
.text:0040431C                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:0040431C                 call    abort           ; jumptable 004042ED case 0
.text:00404321 ; ---------------------------------------------------------------------------
.text:00404321
.text:00404321 loc_404321:                             ; CODE XREF: sub_404280+6D↑j
.text:00404321                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:00404321                 mov     [esp+2Ch+Stream], 403FCEh ; jumptable 004042ED case 1
.text:00404328                 nop
.text:00404329                 lea     esi, [esi+0]
.text:00404330
.text:00404330 loc_404330:                             ; CODE XREF: sub_404280+148↓j
.text:00404330                                         ; sub_404280+154↓j ...
.text:00404330                 call    ds:libintl_gettext
.text:00404336                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040433A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040433D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404341                 call    vfprintf
.text:00404346                 mov     ebx, [esi+4]
.text:00404349                 dec     ebx
.text:0040434A                 test    ebx, ebx
.text:0040434C                 mov     [esi+4], ebx
.text:0040434F                 js      short loc_4043AF
.text:00404351                 mov     edi, [esi]
.text:00404353                 mov     byte ptr [edi], 0Ah
.text:00404356                 inc     dword ptr [esi]
.text:00404358
.text:00404358 loc_404358:                             ; CODE XREF: sub_404280+13F↓j
.text:00404358                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040435C                 mov     edx, Buffer
.text:00404362                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404365                 call    fputs
.text:0040436A                 mov     ebp, [esi+4]
.text:0040436D                 dec     ebp
.text:0040436E                 test    ebp, ebp
.text:00404370                 mov     [esi+4], ebp
.text:00404373                 js      short loc_40439D
.text:00404375                 mov     ecx, [esi]
.text:00404377                 mov     byte ptr [ecx], 0Ah
.text:0040437A                 inc     dword ptr [esi]
.text:0040437C
.text:0040437C loc_40437C:                             ; CODE XREF: sub_404280+12D↓j
.text:0040437C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404380                 mov     [esp+2Ch+Stream], offset sub_403FF0
.text:00404387                 call    ds:libintl_gettext
.text:0040438D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404391                 add     esp, 1Ch
.text:00404394                 pop     ebx
.text:00404395                 pop     esi
.text:00404396                 pop     edi
.text:00404397                 pop     ebp
.text:00404398                 jmp     fputs
.text:0040439D ; ---------------------------------------------------------------------------
.text:0040439D
.text:0040439D loc_40439D:                             ; CODE XREF: sub_404280+F3↑j
.text:0040439D                 mov     [esp+2Ch+Format], esi ; File
.text:004043A1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004043A8                 call    _flsbuf
.text:004043AD                 jmp     short loc_40437C
.text:004043AF ; ---------------------------------------------------------------------------
.text:004043AF
.text:004043AF loc_4043AF:                             ; CODE XREF: sub_404280+CF↑j
.text:004043AF                 mov     [esp+2Ch+Format], esi ; File
.text:004043B3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004043BA                 call    _flsbuf
.text:004043BF                 jmp     short loc_404358
.text:004043C1 ; ---------------------------------------------------------------------------
.text:004043C1
.text:004043C1 loc_4043C1:                             ; CODE XREF: sub_404280+6D↑j
.text:004043C1                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:004043C1                 mov     [esp+2Ch+Stream], offset loc_404088 ; jumptable 004042ED case 2
.text:004043C8                 jmp     loc_404330
.text:004043CD ; ---------------------------------------------------------------------------
.text:004043CD
.text:004043CD loc_4043CD:                             ; CODE XREF: sub_404280+6D↑j
.text:004043CD                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:004043CD                 mov     [esp+2Ch+Stream], offset loc_40409F ; jumptable 004042ED case 3
.text:004043D4                 jmp     loc_404330
.text:004043D9 ; ---------------------------------------------------------------------------
.text:004043D9
.text:004043D9 loc_4043D9:                             ; CODE XREF: sub_404280+6D↑j
.text:004043D9                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:004043D9                 mov     [esp+2Ch+Stream], offset sub_4040D0 ; jumptable 004042ED case 4
.text:004043E0                 jmp     loc_404330
.text:004043E5 ; ---------------------------------------------------------------------------
.text:004043E5
.text:004043E5 loc_4043E5:                             ; CODE XREF: sub_404280+6D↑j
.text:004043E5                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:004043E5                 mov     [esp+2Ch+Stream], offset loc_4040F0 ; jumptable 004042ED case 5
.text:004043EC                 jmp     loc_404330
.text:004043F1 ; ---------------------------------------------------------------------------
.text:004043F1
.text:004043F1 loc_4043F1:                             ; CODE XREF: sub_404280+6D↑j
.text:004043F1                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:004043F1                 mov     [esp+2Ch+Stream], offset sub_404130 ; jumptable 004042ED case 6
.text:004043F8                 jmp     loc_404330
.text:004043FD ; ---------------------------------------------------------------------------
.text:004043FD
.text:004043FD loc_4043FD:                             ; CODE XREF: sub_404280+6D↑j
.text:004043FD                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:004043FD                 mov     [esp+2Ch+Stream], offset sub_404170 ; jumptable 004042ED case 7
.text:00404404                 jmp     loc_404330
.text:00404409 ; ---------------------------------------------------------------------------
.text:00404409
.text:00404409 loc_404409:                             ; CODE XREF: sub_404280+6D↑j
.text:00404409                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:00404409                 mov     [esp+2Ch+Stream], offset sub_4041B0 ; jumptable 004042ED case 8
.text:00404410                 jmp     loc_404330
.text:00404415 ; ---------------------------------------------------------------------------
.text:00404415
.text:00404415 loc_404415:                             ; CODE XREF: sub_404280+6D↑j
.text:00404415                                         ; DATA XREF: sub_404280:jpt_4042ED↑o
.text:00404415                 mov     [esp+2Ch+Stream], offset sub_4041F0 ; jumptable 004042ED case 9
.text:0040441C                 jmp     loc_404330
.text:00404421 ; ---------------------------------------------------------------------------
.text:00404421
.text:00404421 def_4042ED:                             ; CODE XREF: sub_404280+67↑j
.text:00404421                 mov     [esp+2Ch+Stream], offset loc_404230 ; jumptable 004042ED default case
.text:00404428                 jmp     loc_404330
.text:0040442D ; ---------------------------------------------------------------------------
.text:0040442D
.text:0040442D loc_40442D:                             ; CODE XREF: sub_404280+3E↑j
.text:0040442D                 mov     [esp+2Ch+var_20], ebp
.text:00404431                 mov     ecx, [esp+2Ch+var_14]
.text:00404435                 mov     [esp+2Ch+Format], offset loc_40426C ; Format
.text:0040443D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404440                 mov     [esp+2Ch+ArgList], ecx
.text:00404444                 call    fprintf
.text:00404449                 jmp     loc_4042E4
.text:00404449 sub_404280      endp
.text:00404449
.text:00404449 ; ---------------------------------------------------------------------------
.text:0040444E                 align 10h
.text:00404450                 sub     esp, 1Ch
.text:00404453                 mov     edx, [esp+2Ch]
.text:00404457                 lea     ecx, [esp+30h]
.text:0040445B                 mov     [esp+10h], ecx
.text:0040445F                 mov     ecx, [esp+28h]
.text:00404463                 mov     [esp+0Ch], edx
.text:00404467                 mov     edx, [esp+24h]
.text:0040446B                 mov     [esp+8], ecx
.text:0040446F                 mov     [esp+4], edx
.text:00404473                 mov     edx, [esp+20h]
.text:00404477                 mov     [esp], edx
.text:0040447A                 call    sub_404280
.text:0040447F                 add     esp, 1Ch
.text:00404482                 retn
.text:00404482 ; ---------------------------------------------------------------------------
.text:00404483                 align 10h
.text:00404490                 sub     esp, 0Ch
.text:00404493                 xor     edx, edx
.text:00404495                 mov     ecx, [esp+14h]
.text:00404499                 mov     [esp+8], ebx
.text:0040449D                 mov     eax, 0FFFFFFFFh
.text:004044A2                 mov     ebx, [esp+10h]
.text:004044A6                 div     ecx
.text:004044A8                 cmp     eax, ebx
.text:004044AA                 jb      short loc_4044C9
.text:004044AC                 mov     edx, ebx
.text:004044AE                 imul    edx, ecx
.text:004044B1                 mov     [esp], edx
.text:004044B4                 call    malloc
.text:004044B9                 test    eax, eax
.text:004044BB                 jz      short loc_4044C5
.text:004044BD
.text:004044BD loc_4044BD:                             ; CODE XREF: .text:004044C7↓j
.text:004044BD                 mov     ebx, [esp+8]
.text:004044C1                 add     esp, 0Ch
.text:004044C4                 retn
.text:004044C5 ; ---------------------------------------------------------------------------
.text:004044C5
.text:004044C5 loc_4044C5:                             ; CODE XREF: .text:004044BB↑j
.text:004044C5                 test    ebx, ebx
.text:004044C7                 jz      short loc_4044BD
.text:004044C9
.text:004044C9 loc_4044C9:                             ; CODE XREF: .text:004044AA↑j
.text:004044C9                 call    sub_404780
.text:004044C9 ; ---------------------------------------------------------------------------
.text:004044CE                 align 10h
.text:004044D0
.text:004044D0 ; =============== S U B R O U T I N E =======================================
.text:004044D0
.text:004044D0
.text:004044D0 ; int __cdecl sub_4044D0(size_t)
.text:004044D0 sub_4044D0      proc near               ; CODE XREF: .text:004036F9↑p
.text:004044D0                                         ; .text:004038D6↑p ...
.text:004044D0
.text:004044D0 Size            = dword ptr -0Ch
.text:004044D0 var_4           = dword ptr -4
.text:004044D0 arg_0           = dword ptr  4
.text:004044D0
.text:004044D0                 sub     esp, 0Ch
.text:004044D3                 mov     [esp+0Ch+var_4], ebx
.text:004044D7                 mov     ebx, [esp+0Ch+arg_0]
.text:004044DB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004044DE                 call    malloc
.text:004044E3                 test    eax, eax
.text:004044E5                 jz      short loc_4044F0
.text:004044E7
.text:004044E7 loc_4044E7:                             ; CODE XREF: sub_4044D0+22↓j
.text:004044E7                 mov     ebx, [esp+0Ch+var_4]
.text:004044EB                 add     esp, 0Ch
.text:004044EE                 retn
.text:004044EE ; ---------------------------------------------------------------------------
.text:004044EF                 align 10h
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: sub_4044D0+15↑j
.text:004044F0                 test    ebx, ebx
.text:004044F2                 jz      short loc_4044E7
.text:004044F4                 call    sub_404780
.text:004044F4 sub_4044D0      endp
.text:004044F4
.text:004044F4 ; ---------------------------------------------------------------------------
.text:004044F9                 align 10h
.text:00404500                 sub     esp, 1Ch
.text:00404503                 xor     edx, edx
.text:00404505                 mov     eax, 0FFFFFFFFh
.text:0040450A                 mov     [esp+14h], ebx
.text:0040450E                 mov     ecx, [esp+20h]
.text:00404512                 mov     ebx, [esp+28h]
.text:00404516                 mov     [esp+18h], esi
.text:0040451A                 mov     esi, [esp+24h]
.text:0040451E                 div     ebx
.text:00404520                 cmp     eax, esi
.text:00404522                 jb      short loc_404554
.text:00404524                 mov     [esp], ecx
.text:00404527                 mov     edx, esi
.text:00404529                 imul    edx, ebx
.text:0040452C                 mov     [esp+4], edx
.text:00404530                 call    realloc
.text:00404535                 test    eax, eax
.text:00404537                 mov     ecx, eax
.text:00404539                 jz      short loc_404550
.text:0040453B
.text:0040453B loc_40453B:                             ; CODE XREF: .text:00404552↓j
.text:0040453B                 mov     ebx, [esp+14h]
.text:0040453F                 mov     eax, ecx
.text:00404541                 mov     esi, [esp+18h]
.text:00404545                 add     esp, 1Ch
.text:00404548                 retn
.text:00404548 ; ---------------------------------------------------------------------------
.text:00404549                 align 10h
.text:00404550
.text:00404550 loc_404550:                             ; CODE XREF: .text:00404539↑j
.text:00404550                 test    esi, esi
.text:00404552                 jz      short loc_40453B
.text:00404554
.text:00404554 loc_404554:                             ; CODE XREF: .text:00404522↑j
.text:00404554                 call    sub_404780
.text:00404554 ; ---------------------------------------------------------------------------
.text:00404559                 align 10h
.text:00404560
.text:00404560 ; =============== S U B R O U T I N E =======================================
.text:00404560
.text:00404560
.text:00404560 ; int __cdecl sub_404560(void *, size_t)
.text:00404560 sub_404560      proc near               ; CODE XREF: sub_403DC0+5B↑p
.text:00404560
.text:00404560 Block           = dword ptr -0Ch
.text:00404560 Size            = dword ptr -8
.text:00404560 var_4           = dword ptr -4
.text:00404560 arg_0           = dword ptr  4
.text:00404560 arg_4           = dword ptr  8
.text:00404560
.text:00404560                 sub     esp, 0Ch
.text:00404563                 mov     edx, [esp+0Ch+arg_0]
.text:00404567                 mov     [esp+0Ch+var_4], ebx
.text:0040456B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040456F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404572                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404576                 call    realloc
.text:0040457B                 test    eax, eax
.text:0040457D                 jz      short loc_404587
.text:0040457F
.text:0040457F loc_40457F:                             ; CODE XREF: sub_404560+29↓j
.text:0040457F                 mov     ebx, [esp+0Ch+var_4]
.text:00404583                 add     esp, 0Ch
.text:00404586                 retn
.text:00404587 ; ---------------------------------------------------------------------------
.text:00404587
.text:00404587 loc_404587:                             ; CODE XREF: sub_404560+1D↑j
.text:00404587                 test    ebx, ebx
.text:00404589                 jz      short loc_40457F
.text:0040458B                 call    sub_404780
.text:0040458B sub_404560      endp
.text:0040458B
.text:00404590 ; ---------------------------------------------------------------------------
.text:00404590                 jmp     sub_4046E0
.text:00404590 ; ---------------------------------------------------------------------------
.text:00404595                 align 10h
.text:004045A0                 sub     esp, 0Ch
.text:004045A3                 mov     edx, [esp+14h]
.text:004045A7                 mov     dword ptr [esp+8], 1
.text:004045AF                 mov     [esp+4], edx
.text:004045B3                 mov     edx, [esp+10h]
.text:004045B7                 mov     [esp], edx
.text:004045BA                 call    sub_4046E0
.text:004045BF                 add     esp, 0Ch
.text:004045C2                 retn
.text:004045C2 ; ---------------------------------------------------------------------------
.text:004045C3                 align 10h
.text:004045D0                 sub     esp, 1Ch
.text:004045D3                 mov     [esp+18h], ebx
.text:004045D7                 mov     ebx, [esp+20h]
.text:004045DB                 mov     [esp], ebx
.text:004045DE                 call    malloc
.text:004045E3                 test    eax, eax
.text:004045E5                 jz      short loc_404603
.text:004045E7
.text:004045E7 loc_4045E7:                             ; CODE XREF: .text:00404605↓j
.text:004045E7                 mov     [esp+8], ebx
.text:004045EB                 mov     dword ptr [esp+4], 0
.text:004045F3                 mov     [esp], eax
.text:004045F6                 call    memset
.text:004045FB                 mov     ebx, [esp+18h]
.text:004045FF                 add     esp, 1Ch
.text:00404602                 retn
.text:00404603 ; ---------------------------------------------------------------------------
.text:00404603
.text:00404603 loc_404603:                             ; CODE XREF: .text:004045E5↑j
.text:00404603                 test    ebx, ebx
.text:00404605                 jz      short loc_4045E7
.text:00404607                 call    sub_404780
.text:00404607 ; ---------------------------------------------------------------------------
.text:0040460C                 align 10h
.text:00404610                 sub     esp, 0Ch
.text:00404613                 xor     edx, edx
.text:00404615                 mov     ecx, [esp+14h]
.text:00404619                 mov     [esp+8], ebx
.text:0040461D                 mov     eax, 0FFFFFFFFh
.text:00404622                 mov     ebx, [esp+10h]
.text:00404626                 div     ecx
.text:00404628                 cmp     eax, ebx
.text:0040462A                 jb      short loc_404648
.text:0040462C                 mov     [esp+4], ecx
.text:00404630                 mov     [esp], ebx
.text:00404633                 call    calloc
.text:00404638                 test    eax, eax
.text:0040463A                 jz      short loc_404644
.text:0040463C
.text:0040463C loc_40463C:                             ; CODE XREF: .text:00404646↓j
.text:0040463C                 mov     ebx, [esp+8]
.text:00404640                 add     esp, 0Ch
.text:00404643                 retn
.text:00404644 ; ---------------------------------------------------------------------------
.text:00404644
.text:00404644 loc_404644:                             ; CODE XREF: .text:0040463A↑j
.text:00404644                 test    ebx, ebx
.text:00404646                 jz      short loc_40463C
.text:00404648
.text:00404648 loc_404648:                             ; CODE XREF: .text:0040462A↑j
.text:00404648                 call    sub_404780
.text:00404648 ; ---------------------------------------------------------------------------
.text:0040464D                 align 10h
.text:00404650                 sub     esp, 1Ch
.text:00404653                 mov     [esp+18h], ebx
.text:00404657                 mov     ebx, [esp+24h]
.text:0040465B                 mov     [esp], ebx
.text:0040465E                 call    malloc
.text:00404663                 test    eax, eax
.text:00404665                 mov     edx, eax
.text:00404667                 jz      short loc_404685
.text:00404669
.text:00404669 loc_404669:                             ; CODE XREF: .text:00404687↓j
.text:00404669                 mov     [esp+8], ebx
.text:0040466D                 mov     ecx, [esp+20h]
.text:00404671                 mov     [esp], edx
.text:00404674                 mov     [esp+4], ecx
.text:00404678                 call    memcpy
.text:0040467D                 mov     ebx, [esp+18h]
.text:00404681                 add     esp, 1Ch
.text:00404684                 retn
.text:00404685 ; ---------------------------------------------------------------------------
.text:00404685
.text:00404685 loc_404685:                             ; CODE XREF: .text:00404667↑j
.text:00404685                 test    ebx, ebx
.text:00404687                 jz      short loc_404669
.text:00404689                 call    sub_404780
.text:00404689 ; ---------------------------------------------------------------------------
.text:0040468E                 align 10h
.text:00404690                 sub     esp, 1Ch
.text:00404693                 mov     [esp+18h], esi
.text:00404697                 mov     esi, [esp+20h]
.text:0040469B                 mov     [esp+14h], ebx
.text:0040469F                 mov     [esp], esi
.text:004046A2                 call    strlen
.text:004046A7                 lea     ebx, [eax+1]
.text:004046AA                 mov     [esp], ebx
.text:004046AD                 call    malloc
.text:004046B2                 test    eax, eax
.text:004046B4                 jz      short loc_4046D2
.text:004046B6
.text:004046B6 loc_4046B6:                             ; CODE XREF: .text:004046D4↓j
.text:004046B6                 mov     [esp+8], ebx
.text:004046BA                 mov     [esp+4], esi
.text:004046BE                 mov     [esp], eax
.text:004046C1                 call    memcpy
.text:004046C6                 mov     ebx, [esp+14h]
.text:004046CA                 mov     esi, [esp+18h]
.text:004046CE                 add     esp, 1Ch
.text:004046D1                 retn
.text:004046D2 ; ---------------------------------------------------------------------------
.text:004046D2
.text:004046D2 loc_4046D2:                             ; CODE XREF: .text:004046B4↑j
.text:004046D2                 test    ebx, ebx
.text:004046D4                 jz      short loc_4046B6
.text:004046D6                 call    sub_404780
.text:004046D6 ; ---------------------------------------------------------------------------
.text:004046DB                 align 10h
.text:004046E0
.text:004046E0 ; =============== S U B R O U T I N E =======================================
.text:004046E0
.text:004046E0
.text:004046E0 ; int __cdecl sub_4046E0(void *, int, int)
.text:004046E0 sub_4046E0      proc near               ; CODE XREF: .text:00404590↑j
.text:004046E0                                         ; .text:004045BA↑p
.text:004046E0
.text:004046E0 Block           = dword ptr -1Ch
.text:004046E0 Size            = dword ptr -18h
.text:004046E0 var_C           = dword ptr -0Ch
.text:004046E0 var_8           = dword ptr -8
.text:004046E0 var_4           = dword ptr -4
.text:004046E0 arg_0           = dword ptr  4
.text:004046E0 arg_4           = dword ptr  8
.text:004046E0 arg_8           = dword ptr  0Ch
.text:004046E0
.text:004046E0                 sub     esp, 1Ch
.text:004046E3                 mov     [esp+1Ch+var_8], esi
.text:004046E7                 mov     esi, [esp+1Ch+arg_0]
.text:004046EB                 mov     [esp+1Ch+var_4], edi
.text:004046EF                 mov     edi, [esp+1Ch+arg_4]
.text:004046F3                 test    esi, esi
.text:004046F5                 mov     [esp+1Ch+var_C], ebx
.text:004046F9                 mov     ecx, [edi]
.text:004046FB                 mov     ebx, [esp+1Ch+arg_8]
.text:004046FF                 jz      short loc_404740
.text:00404701                 xor     edx, edx
.text:00404703                 mov     eax, 7FFFFFFFh
.text:00404708                 div     ebx
.text:0040470A                 cmp     eax, ecx
.text:0040470C                 jb      short loc_404739
.text:0040470E                 add     ecx, ecx
.text:00404710
.text:00404710 loc_404710:                             ; CODE XREF: sub_4046E0+62↓j
.text:00404710                                         ; sub_4046E0+71↓j ...
.text:00404710                 mov     [edi], ecx
.text:00404712                 imul    ebx, ecx
.text:00404715                 mov     [esp+1Ch+Block], esi ; Block
.text:00404718                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040471C                 call    realloc
.text:00404721                 test    eax, eax
.text:00404723                 jz      short loc_404735
.text:00404725
.text:00404725 loc_404725:                             ; CODE XREF: sub_4046E0+57↓j
.text:00404725                 mov     ebx, [esp+1Ch+var_C]
.text:00404729                 mov     esi, [esp+1Ch+var_8]
.text:0040472D                 mov     edi, [esp+1Ch+var_4]
.text:00404731                 add     esp, 1Ch
.text:00404734                 retn
.text:00404735 ; ---------------------------------------------------------------------------
.text:00404735
.text:00404735 loc_404735:                             ; CODE XREF: sub_4046E0+43↑j
.text:00404735                 test    ebx, ebx
.text:00404737                 jz      short loc_404725
.text:00404739
.text:00404739 loc_404739:                             ; CODE XREF: sub_4046E0+2C↑j
.text:00404739                 call    sub_404780
.text:00404739 ; ---------------------------------------------------------------------------
.text:0040473E                 align 10h
.text:00404740
.text:00404740 loc_404740:                             ; CODE XREF: sub_4046E0+1F↑j
.text:00404740                 test    ecx, ecx
.text:00404742                 jnz     short loc_404710
.text:00404744                 xor     edx, edx
.text:00404746                 mov     eax, 40h ; '@'
.text:0040474B                 div     ebx
.text:0040474D                 test    eax, eax
.text:0040474F                 mov     ecx, eax
.text:00404751                 jnz     short loc_404710
.text:00404753                 mov     ecx, 1
.text:00404758                 jmp     short loc_404710
.text:00404758 sub_4046E0      endp
.text:00404758
.text:00404758 ; ---------------------------------------------------------------------------
.text:0040475A                 align 10h
.text:00404760 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404780+3↓o
.text:00404771 ; const char aS[]
.text:00404771 aS              db '%s',0               ; DATA XREF: sub_404780+10↓o
.text:00404774                 align 10h
.text:00404780
.text:00404780 ; =============== S U B R O U T I N E =======================================
.text:00404780
.text:00404780 ; Attributes: noreturn
.text:00404780
.text:00404780 sub_404780      proc near               ; CODE XREF: sub_403DC0:loc_403F7F↑p
.text:00404780                                         ; .text:loc_4044C9↑p ...
.text:00404780
.text:00404780 Code            = dword ptr -1Ch
.text:00404780 ErrorMessage    = dword ptr -18h
.text:00404780 var_14          = dword ptr -14h
.text:00404780 var_10          = byte ptr -10h
.text:00404780
.text:00404780                 sub     esp, 1Ch
.text:00404783                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040478A                 call    ds:libintl_gettext
.text:00404790                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404798                 mov     edx, Code
.text:0040479E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004047A6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004047AA                 mov     [esp+1Ch+Code], edx ; Code
.text:004047AD                 call    sub_404810
.text:004047B2                 call    abort
.text:004047B2 sub_404780      endp
.text:004047B2
.text:004047B2 ; ---------------------------------------------------------------------------
.text:004047B7                 align 10h
.text:004047C0
.text:004047C0 ; =============== S U B R O U T I N E =======================================
.text:004047C0
.text:004047C0 ; Attributes: thunk
.text:004047C0
.text:004047C0 libintl_bindtextdomain proc near
.text:004047C0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004047C0 libintl_bindtextdomain endp
.text:004047C0
.text:004047C0 ; ---------------------------------------------------------------------------
.text:004047C6                 align 10h
.text:004047D0                 jmp     ds:libintl_textdomain
.text:004047D0 ; ---------------------------------------------------------------------------
.text:004047D6                 align 10h
.text:004047E0                 jmp     ds:libintl_gettext
.text:004047E0 ; ---------------------------------------------------------------------------
.text:004047E6                 align 10h
.text:004047F0 ; const char aS_0[]
.text:004047F0 aS_0            db ': %s',0             ; DATA XREF: sub_404810+B8↓o
.text:004047F0                                         ; sub_404914+122↓o
.text:004047F5 aUnknownSystemE db 'Unknown system error',0
.text:004047F5                                         ; DATA XREF: sub_404810:loc_4048DD↓o
.text:004047F5                                         ; sub_404914:loc_404A4E↓o
.text:0040480A ; const char aS_1[]
.text:0040480A aS_1            db '%s: ',0             ; DATA XREF: sub_404810:loc_4048E4↓o
.text:0040480F                 align 10h
.text:00404810
.text:00404810 ; =============== S U B R O U T I N E =======================================
.text:00404810
.text:00404810
.text:00404810 ; int __cdecl sub_404810(int Code, int ErrorMessage, char *, char)
.text:00404810 sub_404810      proc near               ; CODE XREF: sub_401390+112↑p
.text:00404810                                         ; sub_401390+1D3↑p ...
.text:00404810
.text:00404810 Stream          = dword ptr -1Ch
.text:00404810 Format          = dword ptr -18h
.text:00404810 ArgList         = dword ptr -14h
.text:00404810 Code            = dword ptr  4
.text:00404810 ErrorMessage    = dword ptr  8
.text:00404810 arg_8           = dword ptr  0Ch
.text:00404810 arg_C           = byte ptr  10h
.text:00404810
.text:00404810                 push    esi
.text:00404811                 push    ebx
.text:00404812                 sub     esp, 14h
.text:00404815                 mov     edx, ds:_iob
.text:0040481B                 mov     esi, [esp+1Ch+Code]
.text:0040481F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404823                 add     edx, 20h ; ' '
.text:00404826                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404829                 call    fflush
.text:0040482E                 mov     eax, ds:dword_408280
.text:00404833                 test    eax, eax
.text:00404835                 jz      loc_4048E4
.text:0040483B                 call    eax ; dword_408280
.text:0040483D
.text:0040483D loc_40483D:                             ; CODE XREF: sub_404810+F7↓j
.text:0040483D                 lea     edx, [esp+1Ch+arg_C]
.text:00404841                 mov     ecx, [esp+1Ch+arg_8]
.text:00404845                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404849                 mov     edx, ds:_iob
.text:0040484F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404853                 add     edx, 40h ; '@'
.text:00404856                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404859                 call    vfprintf
.text:0040485E                 inc     ds:dword_408290
.text:00404864                 test    ebx, ebx
.text:00404866                 jnz     short loc_4048B2
.text:00404868
.text:00404868 loc_404868:                             ; CODE XREF: sub_404810+CB↓j
.text:00404868                 mov     edx, ds:_iob
.text:0040486E                 lea     ecx, [edx+40h]
.text:00404871                 mov     ebx, [ecx+4]
.text:00404874                 dec     ebx
.text:00404875                 test    ebx, ebx
.text:00404877                 mov     [ecx+4], ebx
.text:0040487A                 js      short loc_4048A0
.text:0040487C                 mov     ecx, [edx+40h]
.text:0040487F                 mov     byte ptr [ecx], 0Ah
.text:00404882                 inc     dword ptr [edx+40h]
.text:00404885
.text:00404885 loc_404885:                             ; CODE XREF: sub_404810+A0↓j
.text:00404885                 mov     edx, ds:_iob
.text:0040488B                 add     edx, 40h ; '@'
.text:0040488E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404891                 call    fflush
.text:00404896                 test    esi, esi
.text:00404898                 jnz     short loc_40490C
.text:0040489A                 add     esp, 14h
.text:0040489D                 pop     ebx
.text:0040489E                 pop     esi
.text:0040489F                 retn
.text:004048A0 ; ---------------------------------------------------------------------------
.text:004048A0
.text:004048A0 loc_4048A0:                             ; CODE XREF: sub_404810+6A↑j
.text:004048A0                 mov     [esp+1Ch+Format], ecx ; File
.text:004048A4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004048AB                 call    _flsbuf
.text:004048B0                 jmp     short loc_404885
.text:004048B2 ; ---------------------------------------------------------------------------
.text:004048B2
.text:004048B2 loc_4048B2:                             ; CODE XREF: sub_404810+56↑j
.text:004048B2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004048B5                 call    strerror
.text:004048BA                 test    eax, eax
.text:004048BC                 jz      short loc_4048DD
.text:004048BE
.text:004048BE loc_4048BE:                             ; CODE XREF: sub_404810+D2↓j
.text:004048BE                 mov     [esp+1Ch+ArgList], eax
.text:004048C2                 mov     ebx, ds:_iob
.text:004048C8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:004048D0                 add     ebx, 40h ; '@'
.text:004048D3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004048D6                 call    fprintf
.text:004048DB                 jmp     short loc_404868
.text:004048DD ; ---------------------------------------------------------------------------
.text:004048DD
.text:004048DD loc_4048DD:                             ; CODE XREF: sub_404810+AC↑j
.text:004048DD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004048E2                 jmp     short loc_4048BE
.text:004048E4 ; ---------------------------------------------------------------------------
.text:004048E4
.text:004048E4 loc_4048E4:                             ; CODE XREF: sub_404810+25↑j
.text:004048E4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004048EC                 mov     edx, ds:_iob
.text:004048F2                 mov     ecx, ds:dword_408250
.text:004048F8                 add     edx, 40h ; '@'
.text:004048FB                 mov     [esp+1Ch+ArgList], ecx
.text:004048FF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404902                 call    fprintf
.text:00404907                 jmp     loc_40483D
.text:0040490C ; ---------------------------------------------------------------------------
.text:0040490C
.text:0040490C loc_40490C:                             ; CODE XREF: sub_404810+88↑j
.text:0040490C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040490F                 call    exit
.text:0040490F sub_404810      endp
.text:0040490F
.text:00404914
.text:00404914 ; =============== S U B R O U T I N E =======================================
.text:00404914
.text:00404914
.text:00404914 ; int __cdecl sub_404914(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404914 sub_404914      proc near               ; DATA XREF: sub_404914+77↓o
.text:00404914
.text:00404914 Stream          = dword ptr -28h
.text:00404914 Format          = dword ptr -24h
.text:00404914 ArgList         = dword ptr -20h
.text:00404914 var_1C          = dword ptr -1Ch
.text:00404914 Code            = dword ptr  8
.text:00404914 ErrorMessage    = dword ptr  0Ch
.text:00404914 Str2            = dword ptr  10h
.text:00404914 arg_10          = dword ptr  14h
.text:00404914 arg_14          = dword ptr  18h
.text:00404914 arg_18          = byte ptr  1Ch
.text:00404914
.text:00404914                 and     eax, 64253A73h
.text:00404919                 cmp     ah, [eax]
.text:0040491B
.text:0040491B loc_40491B:                             ; DATA XREF: sub_404914:loc_404A55↓o
.text:0040491B                 add     ds:55003A73h, ah
.text:00404921                 push    edi
.text:00404922                 push    esi
.text:00404923                 push    ebx
.text:00404924                 sub     esp, 1Ch
.text:00404927                 mov     edx, ds:dword_4082C0
.text:0040492D                 mov     ebp, [esp+28h+Code]
.text:00404931                 mov     edi, [esp+28h+ErrorMessage]
.text:00404935                 test    edx, edx
.text:00404937                 mov     ebx, [esp+28h+Str2]
.text:0040493B                 mov     esi, [esp+28h+arg_10]
.text:0040493F                 jz      short loc_404959
.text:00404941                 cmp     ds:dword_408180, esi
.text:00404947                 jz      loc_404A80
.text:0040494D
.text:0040494D loc_40494D:                             ; CODE XREF: sub_404914+18D↓j
.text:0040494D                 mov     ds:Str1, ebx
.text:00404953                 mov     ds:dword_408180, esi
.text:00404959
.text:00404959 loc_404959:                             ; CODE XREF: sub_404914+2B↑j
.text:00404959                 mov     edx, ds:_iob
.text:0040495F                 add     edx, 20h ; ' '
.text:00404962                 mov     [esp+28h+Stream], edx ; Stream
.text:00404965                 call    fflush
.text:0040496A                 mov     eax, ds:dword_408280
.text:0040496F                 test    eax, eax
.text:00404971                 jz      loc_404A55
.text:00404977                 call    eax ; dword_408280
.text:00404979
.text:00404979 loc_404979:                             ; CODE XREF: sub_404914+164↓j
.text:00404979                 test    ebx, ebx
.text:0040497B                 jz      short loc_40499E
.text:0040497D                 mov     [esp+28h+ArgList], ebx
.text:00404981                 mov     ebx, ds:_iob
.text:00404987                 mov     [esp+28h+var_1C], esi
.text:0040498B                 mov     [esp+28h+Format], offset sub_404914 ; Format
.text:00404993                 add     ebx, 40h ; '@'
.text:00404996                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404999                 call    fprintf
.text:0040499E
.text:0040499E loc_40499E:                             ; CODE XREF: sub_404914+67↑j
.text:0040499E                 mov     esi, ds:_iob
.text:004049A4                 lea     edx, [esp+28h+arg_18]
.text:004049A8                 mov     ecx, [esp+28h+arg_14]
.text:004049AC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004049B0                 add     esi, 40h ; '@'
.text:004049B3                 mov     [esp+28h+Format], ecx ; Format
.text:004049B7                 mov     [esp+28h+Stream], esi ; Stream
.text:004049BA                 call    vfprintf
.text:004049BF                 inc     ds:dword_408290
.text:004049C5                 test    edi, edi
.text:004049C7                 jnz     short loc_404A20
.text:004049C9
.text:004049C9 loc_4049C9:                             ; CODE XREF: sub_404914+135↓j
.text:004049C9                 mov     edx, ds:_iob
.text:004049CF                 lea     ecx, [edx+40h]
.text:004049D2                 mov     ebx, [ecx+4]
.text:004049D5                 dec     ebx
.text:004049D6                 test    ebx, ebx
.text:004049D8                 mov     [ecx+4], ebx
.text:004049DB                 js      short loc_404A07
.text:004049DD                 mov     esi, [edx+40h]
.text:004049E0                 mov     byte ptr [esi], 0Ah
.text:004049E3                 inc     dword ptr [edx+40h]
.text:004049E6
.text:004049E6 loc_4049E6:                             ; CODE XREF: sub_404914+103↓j
.text:004049E6                 mov     ecx, ds:_iob
.text:004049EC                 add     ecx, 40h ; '@'
.text:004049EF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004049F2                 call    fflush
.text:004049F7                 test    ebp, ebp
.text:004049F9                 jnz     loc_404AA6
.text:004049FF
.text:004049FF loc_4049FF:                             ; CODE XREF: sub_404914+173↓j
.text:004049FF                                         ; sub_404914+187↓j
.text:004049FF                 add     esp, 1Ch
.text:00404A02                 pop     ebx
.text:00404A03                 pop     esi
.text:00404A04                 pop     edi
.text:00404A05                 pop     ebp
.text:00404A06                 retn
.text:00404A07 ; ---------------------------------------------------------------------------
.text:00404A07
.text:00404A07 loc_404A07:                             ; CODE XREF: sub_404914+C7↑j
.text:00404A07                 mov     [esp+28h+Format], ecx ; File
.text:00404A0B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404A12                 call    _flsbuf
.text:00404A17                 jmp     short loc_4049E6
.text:00404A17 ; ---------------------------------------------------------------------------
.text:00404A19                 align 10h
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_404914+B3↑j
.text:00404A20                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404A23                 call    strerror
.text:00404A28                 test    eax, eax
.text:00404A2A                 jz      short loc_404A4E
.text:00404A2C
.text:00404A2C loc_404A2C:                             ; CODE XREF: sub_404914+13F↓j
.text:00404A2C                 mov     [esp+28h+ArgList], eax
.text:00404A30                 mov     edi, ds:_iob
.text:00404A36                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00404A3E                 add     edi, 40h ; '@'
.text:00404A41                 mov     [esp+28h+Stream], edi ; Stream
.text:00404A44                 call    fprintf
.text:00404A49                 jmp     loc_4049C9
.text:00404A4E ; ---------------------------------------------------------------------------
.text:00404A4E
.text:00404A4E loc_404A4E:                             ; CODE XREF: sub_404914+116↑j
.text:00404A4E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404A53                 jmp     short loc_404A2C
.text:00404A55 ; ---------------------------------------------------------------------------
.text:00404A55
.text:00404A55 loc_404A55:                             ; CODE XREF: sub_404914+5D↑j
.text:00404A55                 mov     [esp+28h+Format], (offset loc_40491B+1) ; Format
.text:00404A5D                 mov     ecx, ds:_iob
.text:00404A63                 mov     edx, ds:dword_408250
.text:00404A69                 add     ecx, 40h ; '@'
.text:00404A6C                 mov     [esp+28h+ArgList], edx
.text:00404A70                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404A73                 call    fprintf
.text:00404A78                 jmp     loc_404979
.text:00404A78 ; ---------------------------------------------------------------------------
.text:00404A7D                 align 10h
.text:00404A80
.text:00404A80 loc_404A80:                             ; CODE XREF: sub_404914+33↑j
.text:00404A80                 mov     eax, ds:Str1
.text:00404A85                 cmp     ebx, eax
.text:00404A87                 jz      loc_4049FF
.text:00404A8D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404A91                 mov     [esp+28h+Stream], eax ; Str1
.text:00404A94                 call    strcmp
.text:00404A99                 test    eax, eax
.text:00404A9B                 jz      loc_4049FF
.text:00404AA1                 jmp     loc_40494D
.text:00404AA6 ; ---------------------------------------------------------------------------
.text:00404AA6
.text:00404AA6 loc_404AA6:                             ; CODE XREF: sub_404914+E5↑j
.text:00404AA6                 mov     [esp+28h+Stream], ebp ; Code
.text:00404AA9                 call    exit
.text:00404AA9 sub_404914      endp ; sp-analysis failed
.text:00404AA9
.text:00404AA9 ; ---------------------------------------------------------------------------
.text:00404AAE                 align 10h
.text:00404AB0
.text:00404AB0 ; =============== S U B R O U T I N E =======================================
.text:00404AB0
.text:00404AB0
.text:00404AB0 ; int __cdecl sub_404AB0(LPCSTR, LPCSTR)
.text:00404AB0 sub_404AB0      proc near               ; CODE XREF: sub_404C90+A7↓p
.text:00404AB0
.text:00404AB0 lpFileName      = dword ptr -27Ch
.text:00404AB0 dwDesiredAccess = dword ptr -278h
.text:00404AB0 dwShareMode     = dword ptr -274h
.text:00404AB0 lpSecurityAttributes= dword ptr -270h
.text:00404AB0 dwCreationDisposition= dword ptr -26Ch
.text:00404AB0 dwFlagsAndAttributes= dword ptr -268h
.text:00404AB0 hTemplateFile   = dword ptr -264h
.text:00404AB0 NumberOfBytesWritten= dword ptr -254h
.text:00404AB0 Context         = dword ptr -250h
.text:00404AB0 Dest            = word ptr -24Ch
.text:00404AB0 Buffer          = byte ptr -3Ch
.text:00404AB0 var_38          = dword ptr -38h
.text:00404AB0 var_34          = dword ptr -34h
.text:00404AB0 var_30          = dword ptr -30h
.text:00404AB0 var_2C          = dword ptr -2Ch
.text:00404AB0 arg_0           = dword ptr  4
.text:00404AB0 arg_4           = dword ptr  8
.text:00404AB0
.text:00404AB0                 push    ebp
.text:00404AB1                 push    edi
.text:00404AB2                 push    esi
.text:00404AB3                 push    ebx
.text:00404AB4                 sub     esp, 26Ch
.text:00404ABA                 mov     edx, [esp+27Ch+arg_0]
.text:00404AC1                 mov     [esp+27Ch+Context], 0
.text:00404AC9                 mov     [esp+27Ch+hTemplateFile], 0 ; hTemplateFile
.text:00404AD1                 mov     [esp+27Ch+dwFlagsAndAttributes], 3000000h ; dwFlagsAndAttributes
.text:00404AD9                 mov     [esp+27Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00404AE1                 mov     [esp+27Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00404AE9                 mov     [esp+27Ch+dwShareMode], 0 ; dwShareMode
.text:00404AF1                 mov     [esp+27Ch+dwDesiredAccess], 40000000h ; dwDesiredAccess
.text:00404AF9                 mov     [esp+27Ch+lpFileName], edx ; lpFileName
.text:00404AFC                 call    CreateFileA
.text:00404B01                 sub     esp, 1Ch
.text:00404B04                 mov     ebx, eax
.text:00404B06                 cmp     eax, 0FFFFFFFFh
.text:00404B09                 jz      loc_404C67
.text:00404B0F                 mov     edx, [esp+27Ch+arg_4]
.text:00404B16                 lea     esi, [esp+27Ch+Dest]
.text:00404B1A                 xor     edi, edi
.text:00404B1C                 mov     ebp, 5
.text:00404B21                 mov     [esp+27Ch+lpFileName], edx ; LPCSTR
.text:00404B24                 call    sub_405650
.text:00404B29                 mov     [esp+27Ch+lpFileName], eax
.text:00404B2C                 call    sub_405200
.text:00404B31                 mov     [esp+27Ch+dwDesiredAccess], eax ; Source
.text:00404B35                 mov     [esp+27Ch+lpFileName], esi ; Dest
.text:00404B38                 mov     [esp+27Ch+dwShareMode], 104h ; MaxCount
.text:00404B40                 call    mbstowcs
.text:00404B45                 mov     dword ptr [esp+27Ch+Buffer], ebp
.text:00404B4C                 lea     esi, [eax+eax]
.text:00404B4F                 xor     eax, eax
.text:00404B51                 mov     [esp+27Ch+var_2C], edi
.text:00404B58                 mov     ecx, esi
.text:00404B5A                 lea     ebp, [esp+27Ch+Context]
.text:00404B5E                 mov     [esp+27Ch+var_38], eax
.text:00404B65                 sar     ecx, 1Fh
.text:00404B68                 lea     edi, [esp+27Ch+NumberOfBytesWritten]
.text:00404B6C                 mov     [esp+27Ch+var_34], esi
.text:00404B73                 lea     edx, [esp+27Ch+Buffer]
.text:00404B7A                 mov     [esp+27Ch+var_30], ecx
.text:00404B81                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00404B85                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:00404B8D                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:00404B95                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:00404B99                 mov     [esp+27Ch+dwShareMode], 14h ; nNumberOfBytesToWrite
.text:00404BA1                 mov     [esp+27Ch+dwDesiredAccess], edx ; lpBuffer
.text:00404BA5                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:00404BA8                 call    BackupWrite
.text:00404BAD                 sub     esp, 1Ch
.text:00404BB0                 test    eax, eax
.text:00404BB2                 jz      loc_404C47
.text:00404BB8                 cmp     [esp+27Ch+NumberOfBytesWritten], 14h
.text:00404BBD                 jnz     loc_404C47
.text:00404BC3                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00404BC7                 lea     ecx, [esp+27Ch+Dest]
.text:00404BCB                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:00404BD3                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:00404BDB                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:00404BDF                 mov     [esp+27Ch+dwShareMode], esi ; nNumberOfBytesToWrite
.text:00404BE3                 mov     [esp+27Ch+dwDesiredAccess], ecx ; lpBuffer
.text:00404BE7                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:00404BEA                 call    BackupWrite
.text:00404BEF                 sub     esp, 1Ch
.text:00404BF2                 test    eax, eax
.text:00404BF4                 jz      short loc_404C47
.text:00404BF6                 cmp     [esp+27Ch+NumberOfBytesWritten], esi
.text:00404BFA                 jnz     short loc_404C47
.text:00404BFC                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00404C00                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:00404C08                 mov     [esp+27Ch+dwCreationDisposition], 1 ; bAbort
.text:00404C10                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:00404C14                 mov     [esp+27Ch+dwShareMode], 0 ; nNumberOfBytesToWrite
.text:00404C1C                 mov     [esp+27Ch+dwDesiredAccess], 0 ; lpBuffer
.text:00404C24                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:00404C27                 call    BackupWrite
.text:00404C2C                 sub     esp, 1Ch
.text:00404C2F                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:00404C32                 call    CloseHandle
.text:00404C37                 sub     esp, 4
.text:00404C3A                 xor     eax, eax
.text:00404C3C
.text:00404C3C loc_404C3C:                             ; CODE XREF: sub_404AB0+1B5↓j
.text:00404C3C                 add     esp, 26Ch
.text:00404C42                 pop     ebx
.text:00404C43                 pop     esi
.text:00404C44                 pop     edi
.text:00404C45                 pop     ebp
.text:00404C46                 retn
.text:00404C47 ; ---------------------------------------------------------------------------
.text:00404C47
.text:00404C47 loc_404C47:                             ; CODE XREF: sub_404AB0+102↑j
.text:00404C47                                         ; sub_404AB0+10D↑j ...
.text:00404C47                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:00404C4A
.text:00404C4A loc_404C4A:                             ; CODE XREF: sub_404AB0+1BE↓j
.text:00404C4A                 call    CloseHandle
.text:00404C4F                 sub     esp, 4
.text:00404C52                 call    sub_405A30
.text:00404C57                 mov     edi, eax
.text:00404C59                 call    _errno
.text:00404C5E                 mov     [eax], edi
.text:00404C60                 mov     eax, 0FFFFFFFFh
.text:00404C65                 jmp     short loc_404C3C
.text:00404C67 ; ---------------------------------------------------------------------------
.text:00404C67
.text:00404C67 loc_404C67:                             ; CODE XREF: sub_404AB0+59↑j
.text:00404C67                 mov     [esp+27Ch+lpFileName], 0FFFFFFFFh
.text:00404C6E                 jmp     short loc_404C4A
.text:00404C6E sub_404AB0      endp
.text:00404C6E
.text:00404C6E ; ---------------------------------------------------------------------------
.text:00404C70 ; const CHAR LibFileName[]
.text:00404C70 LibFileName     db 'KERNEL32',0         ; DATA XREF: sub_404C90+2C↓o
.text:00404C79 ; const CHAR ProcName[]
.text:00404C79 ProcName        db 'CreateHardLinkA',0  ; DATA XREF: sub_404C90+41↓o
.text:00404C89                 align 10h
.text:00404C90
.text:00404C90 ; =============== S U B R O U T I N E =======================================
.text:00404C90
.text:00404C90
.text:00404C90 ; int __cdecl sub_404C90(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:00404C90 sub_404C90      proc near               ; CODE XREF: sub_401390+15D↑p
.text:00404C90
.text:00404C90 lpLibFileName   = dword ptr -1Ch
.text:00404C90 lpProcName      = dword ptr -18h
.text:00404C90 bFailIfExists   = dword ptr -14h
.text:00404C90 var_C           = dword ptr -0Ch
.text:00404C90 var_8           = dword ptr -8
.text:00404C90 var_4           = dword ptr -4
.text:00404C90 lpExistingFileName= dword ptr  4
.text:00404C90 lpNewFileName   = dword ptr  8
.text:00404C90
.text:00404C90                 sub     esp, 1Ch
.text:00404C93                 mov     [esp+1Ch+var_4], edi
.text:00404C97                 mov     edi, [esp+1Ch+lpExistingFileName]
.text:00404C9B                 mov     [esp+1Ch+var_C], ebx
.text:00404C9F                 mov     ebx, [esp+1Ch+lpNewFileName]
.text:00404CA3                 test    edi, edi
.text:00404CA5                 mov     [esp+1Ch+var_8], esi
.text:00404CA9                 mov     esi, 0FFFFFFFFh
.text:00404CAE                 jz      loc_404D80
.text:00404CB4                 test    ebx, ebx
.text:00404CB6                 jz      loc_404D80
.text:00404CBC                 mov     [esp+1Ch+lpLibFileName], offset LibFileName ; "KERNEL32"
.text:00404CC3                 call    LoadLibraryA
.text:00404CC8                 sub     esp, 4
.text:00404CCB                 xor     edx, edx
.text:00404CCD                 test    eax, eax
.text:00404CCF                 jz      short loc_404CE6
.text:00404CD1                 mov     [esp+1Ch+lpProcName], offset ProcName ; "CreateHardLinkA"
.text:00404CD9                 mov     [esp+1Ch+lpLibFileName], eax ; hModule
.text:00404CDC                 call    GetProcAddress
.text:00404CE1                 sub     esp, 8
.text:00404CE4                 mov     edx, eax
.text:00404CE6
.text:00404CE6 loc_404CE6:                             ; CODE XREF: sub_404C90+3F↑j
.text:00404CE6                 test    edx, edx
.text:00404CE8                 jz      short loc_404D30
.text:00404CEA                 mov     [esp+1Ch+bFailIfExists], 0
.text:00404CF2                 mov     [esp+1Ch+lpProcName], edi
.text:00404CF6                 mov     [esp+1Ch+lpLibFileName], ebx
.text:00404CF9                 call    edx
.text:00404CFB                 sub     esp, 0Ch
.text:00404CFE                 test    eax, eax
.text:00404D00                 jz      short loc_404D22
.text:00404D02                 xor     esi, esi
.text:00404D04                 lea     esi, [esi+0]
.text:00404D0A                 lea     edi, [edi+0]
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: sub_404C90+95↓j
.text:00404D10                                         ; sub_404C90+B1↓j ...
.text:00404D10                 mov     eax, esi
.text:00404D12
.text:00404D12 loc_404D12:                             ; CODE XREF: sub_404C90+100↓j
.text:00404D12                 mov     ebx, [esp+1Ch+var_C]
.text:00404D16                 mov     esi, [esp+1Ch+var_8]
.text:00404D1A                 mov     edi, [esp+1Ch+var_4]
.text:00404D1E                 add     esp, 1Ch
.text:00404D21                 retn
.text:00404D22 ; ---------------------------------------------------------------------------
.text:00404D22
.text:00404D22 loc_404D22:                             ; CODE XREF: sub_404C90+70↑j
.text:00404D22                 cmp     esi, 0FFFFFFFFh
.text:00404D25                 jnz     short loc_404D10
.text:00404D27                 mov     esi, esi
.text:00404D29                 lea     edi, [edi+0]
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: sub_404C90+58↑j
.text:00404D30                 mov     [esp+1Ch+lpProcName], ebx ; LPCSTR
.text:00404D34                 mov     [esp+1Ch+lpLibFileName], edi ; LPCSTR
.text:00404D37                 call    sub_404AB0
.text:00404D3C                 cmp     eax, 0FFFFFFFFh
.text:00404D3F                 mov     esi, eax
.text:00404D41                 jnz     short loc_404D10
.text:00404D43                 mov     [esp+1Ch+bFailIfExists], 1 ; bFailIfExists
.text:00404D4B                 mov     [esp+1Ch+lpProcName], ebx ; lpNewFileName
.text:00404D4F                 mov     [esp+1Ch+lpLibFileName], edi ; lpExistingFileName
.text:00404D52                 call    CopyFileA
.text:00404D57                 sub     esp, 0Ch
.text:00404D5A                 test    eax, eax
.text:00404D5C                 setnz   cl
.text:00404D5F                 movzx   edx, cl
.text:00404D62                 lea     esi, [edx-1]
.text:00404D65                 cmp     esi, 0FFFFFFFFh
.text:00404D68                 jnz     short loc_404D10
.text:00404D6A                 call    sub_405A30
.text:00404D6F                 mov     edi, eax
.text:00404D71                 call    _errno
.text:00404D76                 mov     [eax], edi
.text:00404D78                 jmp     short loc_404D10
.text:00404D78 ; ---------------------------------------------------------------------------
.text:00404D7A                 align 10h
.text:00404D80
.text:00404D80 loc_404D80:                             ; CODE XREF: sub_404C90+1E↑j
.text:00404D80                                         ; sub_404C90+26↑j
.text:00404D80                 call    _errno
.text:00404D85                 mov     dword ptr [eax], 16h
.text:00404D8B                 mov     eax, 0FFFFFFFFh
.text:00404D90                 jmp     short loc_404D12
.text:00404D90 sub_404C90      endp
.text:00404D90
.text:00404D90 ; ---------------------------------------------------------------------------
.text:00404D92                 align 10h
.text:00404DA0                 retn
.text:00404DA0 ; ---------------------------------------------------------------------------
.text:00404DA1                 align 10h
.text:00404DB0
.text:00404DB0 ; =============== S U B R O U T I N E =======================================
.text:00404DB0
.text:00404DB0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00404DB0
.text:00404DB0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00404DB0 _win32_longpath proc near               ; CODE XREF: .text:00405574↓p
.text:00404DB0
.text:00404DB0 C               = dword ptr -278h
.text:00404DB0 lpFindFileData  = dword ptr -274h
.text:00404DB0 Destination     = byte ptr -268h
.text:00404DB0 var_267         = byte ptr -267h
.text:00404DB0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00404DB0 lpFileName      = dword ptr  8
.text:00404DB0
.text:00404DB0                 push    ebp
.text:00404DB1                 xor     eax, eax
.text:00404DB3                 push    edi
.text:00404DB4                 push    esi
.text:00404DB5                 push    ebx
.text:00404DB6                 sub     esp, 26Ch
.text:00404DBC                 mov     esi, [esp+278h+lpFileName]
.text:00404DC3                 lea     ebp, [esp+278h+Destination]
.text:00404DC7                 test    esi, esi
.text:00404DC9                 jz      loc_404F27
.text:00404DCF                 movsx   edx, byte ptr [esi]
.text:00404DD2                 mov     [esp+278h+C], edx ; C
.text:00404DD5                 call    isalpha
.text:00404DDA                 test    eax, eax
.text:00404DDC                 jz      short loc_404DEF
.text:00404DDE                 mov     eax, [esp+278h+lpFileName]
.text:00404DE5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00404DE9                 jz      loc_40512B
.text:00404DEF
.text:00404DEF loc_404DEF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:00404DEF                 mov     edx, [esp+278h+lpFileName]
.text:00404DF6                 movzx   eax, byte ptr [edx]
.text:00404DF9                 cmp     al, 2Fh ; '/'
.text:00404DFB                 jz      loc_40500B
.text:00404E01                 cmp     al, 5Ch ; '\'
.text:00404E03                 jz      loc_40500B
.text:00404E09
.text:00404E09 loc_404E09:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00404E09                                         ; _win32_longpath+2B1↓j ...
.text:00404E09                 mov     [ebp+268h+Destination], 0
.text:00404E0D                 movzx   ebx, byte ptr [esi]
.text:00404E10                 test    bl, bl
.text:00404E12                 jz      loc_404F09
.text:00404E18                 nop
.text:00404E19                 lea     esi, [esi+0]
.text:00404E20
.text:00404E20 loc_404E20:                             ; CODE XREF: _win32_longpath+153↓j
.text:00404E20                 cmp     bl, 2Fh ; '/'
.text:00404E23                 jz      loc_404FC0
.text:00404E29                 cmp     bl, 5Ch ; '\'
.text:00404E2C                 jz      loc_404FC0
.text:00404E32
.text:00404E32 loc_404E32:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00404E32                                         ; _win32_longpath+22C↓j ...
.text:00404E32                 cmp     bl, 2Eh ; '.'
.text:00404E35                 jz      loc_404F60
.text:00404E3B
.text:00404E3B loc_404E3B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:00404E3B                                         ; _win32_longpath+203↓j
.text:00404E3B                 test    bl, bl
.text:00404E3D                 jz      loc_404F09
.text:00404E43                 cmp     bl, 2Fh ; '/'
.text:00404E46                 jz      short loc_404E62
.text:00404E48                 cmp     bl, 5Ch ; '\'
.text:00404E4B                 jz      short loc_404E62
.text:00404E4D                 lea     esi, [esi+0]
.text:00404E50
.text:00404E50 loc_404E50:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00404E50                 inc     esi
.text:00404E51                 movzx   ebx, byte ptr [esi]
.text:00404E54                 test    bl, bl
.text:00404E56                 jz      short loc_404E62
.text:00404E58                 cmp     bl, 2Fh ; '/'
.text:00404E5B                 jz      short loc_404E62
.text:00404E5D                 cmp     bl, 5Ch ; '\'
.text:00404E60                 jnz     short loc_404E50
.text:00404E62
.text:00404E62 loc_404E62:                             ; CODE XREF: _win32_longpath+96↑j
.text:00404E62                                         ; _win32_longpath+9B↑j ...
.text:00404E62                 mov     byte ptr [esi], 0
.text:00404E65                 lea     edx, [esp+278h+FindFileData]
.text:00404E6C                 mov     eax, [esp+278h+lpFileName]
.text:00404E73                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00404E77                 mov     [esp+278h+C], eax ; lpFileName
.text:00404E7A                 call    FindFirstFileA
.text:00404E7F                 mov     [esi], bl
.text:00404E81                 sub     esp, 8
.text:00404E84                 mov     edi, eax
.text:00404E86                 cmp     eax, 0FFFFFFFFh
.text:00404E89                 jz      loc_404F4C
.text:00404E8F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00404E96                 mov     ecx, ebx
.text:00404E98                 nop
.text:00404E99                 lea     esi, [esi+0]
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: _win32_longpath+105↓j
.text:00404EA0                 mov     eax, [ebx]
.text:00404EA2                 add     ebx, 4
.text:00404EA5                 lea     edx, [eax-1010101h]
.text:00404EAB                 not     eax
.text:00404EAD                 and     edx, eax
.text:00404EAF                 and     edx, 80808080h
.text:00404EB5                 jz      short loc_404EA0
.text:00404EB7                 test    edx, 8080h
.text:00404EBD                 jnz     short loc_404EC5
.text:00404EBF                 shr     edx, 10h
.text:00404EC2                 add     ebx, 2
.text:00404EC5
.text:00404EC5 loc_404EC5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00404EC5                 add     dl, dl
.text:00404EC7                 sbb     ebx, 3
.text:00404ECA                 sub     ebx, ecx
.text:00404ECC                 lea     ecx, [esp+278h+Destination]
.text:00404ED0                 sub     ecx, ebp
.text:00404ED2                 add     ecx, 105h
.text:00404ED8                 cmp     ecx, ebx
.text:00404EDA                 jle     short loc_404F32
.text:00404EDC                 mov     [esp+278h+C], ebp ; Destination
.text:00404EDF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00404EE6                 add     ebp, ebx
.text:00404EE8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00404EEC                 call    strcpy
.text:00404EF1                 mov     [esp+278h+C], edi ; hFindFile
.text:00404EF4                 call    FindClose
.text:00404EF9                 sub     esp, 4
.text:00404EFC
.text:00404EFC loc_404EFC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00404EFC                 movzx   ecx, byte ptr [esi]
.text:00404EFF                 test    cl, cl
.text:00404F01                 mov     bl, cl
.text:00404F03                 jnz     loc_404E20
.text:00404F09
.text:00404F09 loc_404F09:                             ; CODE XREF: _win32_longpath+62↑j
.text:00404F09                                         ; _win32_longpath+8D↑j
.text:00404F09                 mov     esi, [esp+278h+lpFileName]
.text:00404F10                 lea     ebp, [esp+278h+Destination]
.text:00404F14                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00404F18                 mov     [esp+278h+C], esi ; Destination
.text:00404F1B                 call    strcpy
.text:00404F20                 mov     eax, [esp+278h+lpFileName]
.text:00404F27
.text:00404F27 loc_404F27:                             ; CODE XREF: _win32_longpath+19↑j
.text:00404F27                                         ; _win32_longpath+19A↓j
.text:00404F27                 add     esp, 26Ch
.text:00404F2D                 pop     ebx
.text:00404F2E                 pop     esi
.text:00404F2F                 pop     edi
.text:00404F30                 pop     ebp
.text:00404F31                 retn
.text:00404F32 ; ---------------------------------------------------------------------------
.text:00404F32
.text:00404F32 loc_404F32:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00404F32                 mov     [esp+278h+C], edi ; hFindFile
.text:00404F35                 call    FindClose
.text:00404F3A                 sub     esp, 4
.text:00404F3D                 call    _errno
.text:00404F42                 mov     dword ptr [eax], 22h ; '"'
.text:00404F48
.text:00404F48 loc_404F48:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00404F48                 xor     eax, eax
.text:00404F4A                 jmp     short loc_404F27
.text:00404F4C ; ---------------------------------------------------------------------------
.text:00404F4C
.text:00404F4C loc_404F4C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00404F4C                 call    _errno
.text:00404F51                 mov     dword ptr [eax], 16h
.text:00404F57                 jmp     short loc_404F48
.text:00404F57 ; ---------------------------------------------------------------------------
.text:00404F59                 align 10h
.text:00404F60
.text:00404F60 loc_404F60:                             ; CODE XREF: _win32_longpath+85↑j
.text:00404F60                 movzx   eax, byte ptr [esi+1]
.text:00404F64                 test    al, al
.text:00404F66                 jnz     short loc_404F95
.text:00404F68
.text:00404F68 loc_404F68:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00404F68                                         ; _win32_longpath+1EB↓j ...
.text:00404F68                 test    bl, bl
.text:00404F6A                 jz      short loc_404F8C
.text:00404F6C                 cmp     bl, 2Fh ; '/'
.text:00404F6F                 jz      short loc_404F8C
.text:00404F71                 cmp     bl, 5Ch ; '\'
.text:00404F74                 jz      short loc_404F8C
.text:00404F76
.text:00404F76 loc_404F76:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00404F76                 mov     [ebp+268h+Destination], bl
.text:00404F79                 inc     esi
.text:00404F7A                 inc     ebp
.text:00404F7B                 movzx   ebx, byte ptr [esi]
.text:00404F7E                 test    bl, bl
.text:00404F80                 jz      short loc_404F8C
.text:00404F82                 cmp     bl, 2Fh ; '/'
.text:00404F85                 jz      short loc_404F8C
.text:00404F87                 cmp     bl, 5Ch ; '\'
.text:00404F8A                 jnz     short loc_404F76
.text:00404F8C
.text:00404F8C loc_404F8C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00404F8C                                         ; _win32_longpath+1BF↑j ...
.text:00404F8C                 mov     [ebp+268h+Destination], 0
.text:00404F90                 jmp     loc_404EFC
.text:00404F95 ; ---------------------------------------------------------------------------
.text:00404F95
.text:00404F95 loc_404F95:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00404F95                 cmp     al, 2Fh ; '/'
.text:00404F97                 jz      short loc_404F68
.text:00404F99                 cmp     al, 5Ch ; '\'
.text:00404F9B                 jz      short loc_404F68
.text:00404F9D                 cmp     al, 2Eh ; '.'
.text:00404F9F                 jnz     loc_404E3B
.text:00404FA5                 movzx   eax, byte ptr [esi+2]
.text:00404FA9                 test    al, al
.text:00404FAB                 jz      short loc_404F68
.text:00404FAD                 cmp     al, 2Fh ; '/'
.text:00404FAF                 jz      short loc_404F68
.text:00404FB1                 cmp     al, 5Ch ; '\'
.text:00404FB3                 jnz     loc_404E3B
.text:00404FB9                 jmp     short loc_404F68
.text:00404FB9 ; ---------------------------------------------------------------------------
.text:00404FBB                 align 10h
.text:00404FC0
.text:00404FC0 loc_404FC0:                             ; CODE XREF: _win32_longpath+73↑j
.text:00404FC0                                         ; _win32_longpath+7C↑j
.text:00404FC0                 mov     [ebp+268h+Destination], bl
.text:00404FC3                 inc     esi
.text:00404FC4                 inc     ebp
.text:00404FC5                 mov     [ebp+268h+Destination], 0
.text:00404FC9                 movzx   ebx, byte ptr [esi]
.text:00404FCC                 test    bl, bl
.text:00404FCE                 jz      loc_404E32
.text:00404FD4                 cmp     bl, 2Fh ; '/'
.text:00404FD7                 jz      short loc_404FF0
.text:00404FD9                 cmp     bl, 5Ch ; '\'
.text:00404FDC                 jnz     loc_404E32
.text:00404FE2                 lea     esi, [esi+0]
.text:00404FE9                 lea     edi, [edi+0]
.text:00404FF0
.text:00404FF0 loc_404FF0:                             ; CODE XREF: _win32_longpath+227↑j
.text:00404FF0                                         ; _win32_longpath+24F↓j ...
.text:00404FF0                 inc     esi
.text:00404FF1                 movzx   ebx, byte ptr [esi]
.text:00404FF4                 test    bl, bl
.text:00404FF6                 jz      loc_404E32
.text:00404FFC                 cmp     bl, 2Fh ; '/'
.text:00404FFF                 jz      short loc_404FF0
.text:00405001                 cmp     bl, 5Ch ; '\'
.text:00405004                 jz      short loc_404FF0
.text:00405006                 jmp     loc_404E32
.text:0040500B ; ---------------------------------------------------------------------------
.text:0040500B
.text:0040500B loc_40500B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040500B                                         ; _win32_longpath+53↑j
.text:0040500B                 mov     edi, [esp+278h+lpFileName]
.text:00405012                 movzx   edx, byte ptr [edi+1]
.text:00405016                 cmp     dl, 2Fh ; '/'
.text:00405019                 jz      short loc_405024
.text:0040501B                 cmp     dl, 5Ch ; '\'
.text:0040501E                 jnz     loc_404E09
.text:00405024
.text:00405024 loc_405024:                             ; CODE XREF: _win32_longpath+269↑j
.text:00405024                 mov     esi, [esp+278h+lpFileName]
.text:0040502B                 mov     [ebp+268h+Destination], al
.text:0040502E                 mov     ecx, [esp+278h+lpFileName]
.text:00405035                 inc     ebp
.text:00405036                 add     esi, 2
.text:00405039                 movzx   ebx, byte ptr [ecx+1]
.text:0040503D                 mov     [ebp+268h+Destination], bl
.text:00405040                 inc     ebp
.text:00405041                 movzx   eax, byte ptr [ecx+2]
.text:00405045                 test    al, al
.text:00405047                 jz      loc_405123
.text:0040504D                 cmp     al, 2Fh ; '/'
.text:0040504F                 jz      loc_405108
.text:00405055                 cmp     al, 5Ch ; '\'
.text:00405057                 mov     bl, al
.text:00405059                 jz      loc_405108
.text:0040505F
.text:0040505F loc_40505F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040505F                                         ; _win32_longpath+376↓j
.text:0040505F                 test    bl, bl
.text:00405061                 jz      loc_404E09
.text:00405067                 cmp     bl, 2Fh ; '/'
.text:0040506A                 jz      short loc_40508B
.text:0040506C                 cmp     bl, 5Ch ; '\'
.text:0040506F                 jz      short loc_40508B
.text:00405071
.text:00405071 loc_405071:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00405071                 mov     [ebp+268h+Destination], bl
.text:00405074                 inc     esi
.text:00405075                 inc     ebp
.text:00405076                 movzx   ebx, byte ptr [esi]
.text:00405079                 test    bl, bl
.text:0040507B                 jz      loc_404E09
.text:00405081                 cmp     bl, 2Fh ; '/'
.text:00405084                 jz      short loc_40508B
.text:00405086                 cmp     bl, 5Ch ; '\'
.text:00405089                 jnz     short loc_405071
.text:0040508B
.text:0040508B loc_40508B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040508B                                         ; _win32_longpath+2BF↑j ...
.text:0040508B                 test    bl, bl
.text:0040508D                 jz      loc_404E09
.text:00405093                 mov     [ebp+268h+Destination], bl
.text:00405096                 inc     esi
.text:00405097                 inc     ebp
.text:00405098                 movzx   ebx, byte ptr [esi]
.text:0040509B                 test    bl, bl
.text:0040509D                 jz      loc_404E09
.text:004050A3                 cmp     bl, 2Fh ; '/'
.text:004050A6                 jz      short loc_4050F0
.text:004050A8                 cmp     bl, 5Ch ; '\'
.text:004050AB                 jz      short loc_4050F0
.text:004050AD
.text:004050AD loc_4050AD:                             ; CODE XREF: _win32_longpath+356↓j
.text:004050AD                 test    bl, bl
.text:004050AF                 jz      loc_404E09
.text:004050B5                 cmp     bl, 2Fh ; '/'
.text:004050B8                 jz      loc_404E09
.text:004050BE                 cmp     bl, 5Ch ; '\'
.text:004050C1                 jz      loc_404E09
.text:004050C7
.text:004050C7 loc_4050C7:                             ; CODE XREF: _win32_longpath+333↓j
.text:004050C7                 mov     [ebp+268h+Destination], bl
.text:004050CA                 inc     esi
.text:004050CB                 inc     ebp
.text:004050CC                 movzx   ebx, byte ptr [esi]
.text:004050CF                 test    bl, bl
.text:004050D1                 jz      loc_404E09
.text:004050D7                 cmp     bl, 2Fh ; '/'
.text:004050DA                 jz      loc_404E09
.text:004050E0                 cmp     bl, 5Ch ; '\'
.text:004050E3                 jnz     short loc_4050C7
.text:004050E5                 jmp     loc_404E09
.text:004050E5 ; ---------------------------------------------------------------------------
.text:004050EA                 align 10h
.text:004050F0
.text:004050F0 loc_4050F0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:004050F0                                         ; _win32_longpath+2FB↑j ...
.text:004050F0                 inc     esi
.text:004050F1                 movzx   ebx, byte ptr [esi]
.text:004050F4                 test    bl, bl
.text:004050F6                 jz      loc_404E09
.text:004050FC                 cmp     bl, 2Fh ; '/'
.text:004050FF                 jz      short loc_4050F0
.text:00405101                 cmp     bl, 5Ch ; '\'
.text:00405104                 jz      short loc_4050F0
.text:00405106                 jmp     short loc_4050AD
.text:00405108 ; ---------------------------------------------------------------------------
.text:00405108
.text:00405108 loc_405108:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00405108                                         ; _win32_longpath+2A9↑j ...
.text:00405108                 inc     esi
.text:00405109                 movzx   ebx, byte ptr [esi]
.text:0040510C                 test    bl, bl
.text:0040510E                 jz      loc_404E09
.text:00405114                 cmp     bl, 2Fh ; '/'
.text:00405117                 jz      short loc_405108
.text:00405119                 cmp     bl, 5Ch ; '\'
.text:0040511C                 jz      short loc_405108
.text:0040511E                 jmp     loc_40505F
.text:00405123 ; ---------------------------------------------------------------------------
.text:00405123
.text:00405123 loc_405123:                             ; CODE XREF: _win32_longpath+297↑j
.text:00405123                 movzx   ebx, byte ptr [esi]
.text:00405126                 jmp     loc_40505F
.text:0040512B ; ---------------------------------------------------------------------------
.text:0040512B
.text:0040512B loc_40512B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040512B                 movzx   ecx, byte ptr [eax]
.text:0040512E                 mov     esi, eax
.text:00405130                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00405135                 add     esi, 2
.text:00405138                 lea     ebp, [esp+12h]
.text:0040513C                 mov     [esp+278h+Destination], cl
.text:00405140                 jmp     loc_404E09
.text:00405140 _win32_longpath endp
.text:00405140
.text:00405140 ; ---------------------------------------------------------------------------
.text:00405145                 align 10h
.text:00405150                 sub     esp, 0Ch
.text:00405153                 mov     edx, [esp+10h]
.text:00405157                 mov     dword ptr [esp+4], 0
.text:0040515F                 mov     [esp], edx
.text:00405162                 call    sub_406570
.text:00405167                 inc     eax
.text:00405168                 setnz   dl
.text:0040516B                 add     esp, 0Ch
.text:0040516E                 movzx   eax, dl
.text:00405171                 retn
.text:00405171 ; ---------------------------------------------------------------------------
.text:00405172                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180
.text:00405180 sub_405180      proc near               ; CODE XREF: sub_405670+AA↓p
.text:00405180
.text:00405180 arg_0           = dword ptr  4
.text:00405180
.text:00405180                 mov     ecx, [esp+arg_0]
.text:00405184                 mov     edx, ecx
.text:00405186                 movzx   eax, byte ptr [ecx]
.text:00405189                 test    al, al
.text:0040518B                 jz      short loc_40519C
.text:0040518D                 lea     esi, [esi+0]
.text:00405190
.text:00405190 loc_405190:                             ; CODE XREF: sub_405180+1A↓j
.text:00405190                 cmp     al, 5Ch ; '\'
.text:00405192                 jz      short loc_4051A0
.text:00405194
.text:00405194 loc_405194:                             ; CODE XREF: sub_405180+23↓j
.text:00405194                 inc     edx
.text:00405195                 movzx   eax, byte ptr [edx]
.text:00405198                 test    al, al
.text:0040519A                 jnz     short loc_405190
.text:0040519C
.text:0040519C loc_40519C:                             ; CODE XREF: sub_405180+B↑j
.text:0040519C                 mov     eax, ecx
.text:0040519E                 retn
.text:0040519E ; ---------------------------------------------------------------------------
.text:0040519F                 align 10h
.text:004051A0
.text:004051A0 loc_4051A0:                             ; CODE XREF: sub_405180+12↑j
.text:004051A0                 mov     byte ptr [edx], 2Fh ; '/'
.text:004051A3                 jmp     short loc_405194
.text:004051A3 sub_405180      endp
.text:004051A3
.text:004051A3 ; ---------------------------------------------------------------------------
.text:004051A5                 align 10h
.text:004051B0                 push    ebx
.text:004051B1                 sub     esp, 8
.text:004051B4                 mov     ebx, [esp+14h]
.text:004051B8                 mov     edx, [esp+10h]
.text:004051BC                 mov     [esp], ebx
.text:004051BF                 mov     [esp+4], edx
.text:004051C3                 call    strcpy
.text:004051C8                 movzx   eax, byte ptr [ebx]
.text:004051CB                 mov     edx, ebx
.text:004051CD                 test    al, al
.text:004051CF                 jz      short loc_4051EC
.text:004051D1                 jmp     short loc_4051E0
.text:004051D1 ; ---------------------------------------------------------------------------
.text:004051D3                 align 10h
.text:004051E0
.text:004051E0 loc_4051E0:                             ; CODE XREF: .text:004051D1↑j
.text:004051E0                                         ; .text:004051EA↓j
.text:004051E0                 cmp     al, 5Ch ; '\'
.text:004051E2                 jz      short loc_4051F3
.text:004051E4
.text:004051E4 loc_4051E4:                             ; CODE XREF: .text:004051F6↓j
.text:004051E4                 inc     edx
.text:004051E5                 movzx   eax, byte ptr [edx]
.text:004051E8                 test    al, al
.text:004051EA                 jnz     short loc_4051E0
.text:004051EC
.text:004051EC loc_4051EC:                             ; CODE XREF: .text:004051CF↑j
.text:004051EC                 add     esp, 8
.text:004051EF                 xor     eax, eax
.text:004051F1                 pop     ebx
.text:004051F2                 retn
.text:004051F3 ; ---------------------------------------------------------------------------
.text:004051F3
.text:004051F3 loc_4051F3:                             ; CODE XREF: .text:004051E2↑j
.text:004051F3                 mov     byte ptr [edx], 2Fh ; '/'
.text:004051F6                 jmp     short loc_4051E4
.text:004051F6 ; ---------------------------------------------------------------------------
.text:004051F8                 align 10h
.text:00405200
.text:00405200 ; =============== S U B R O U T I N E =======================================
.text:00405200
.text:00405200
.text:00405200 sub_405200      proc near               ; CODE XREF: sub_404AB0+7C↑p
.text:00405200
.text:00405200 arg_0           = dword ptr  4
.text:00405200
.text:00405200                 mov     ecx, [esp+arg_0]
.text:00405204                 mov     edx, ecx
.text:00405206                 movzx   eax, byte ptr [ecx]
.text:00405209                 test    al, al
.text:0040520B                 jz      short loc_40521C
.text:0040520D                 lea     esi, [esi+0]
.text:00405210
.text:00405210 loc_405210:                             ; CODE XREF: sub_405200+1A↓j
.text:00405210                 cmp     al, 2Fh ; '/'
.text:00405212                 jz      short loc_405220
.text:00405214
.text:00405214 loc_405214:                             ; CODE XREF: sub_405200+23↓j
.text:00405214                 inc     edx
.text:00405215                 movzx   eax, byte ptr [edx]
.text:00405218                 test    al, al
.text:0040521A                 jnz     short loc_405210
.text:0040521C
.text:0040521C loc_40521C:                             ; CODE XREF: sub_405200+B↑j
.text:0040521C                 mov     eax, ecx
.text:0040521E                 retn
.text:0040521E ; ---------------------------------------------------------------------------
.text:0040521F                 align 10h
.text:00405220
.text:00405220 loc_405220:                             ; CODE XREF: sub_405200+12↑j
.text:00405220                 mov     byte ptr [edx], 5Ch ; '\'
.text:00405223                 jmp     short loc_405214
.text:00405223 sub_405200      endp
.text:00405223
.text:00405223 ; ---------------------------------------------------------------------------
.text:00405225                 align 10h
.text:00405230                 push    ebx
.text:00405231                 sub     esp, 8
.text:00405234                 mov     ebx, [esp+14h]
.text:00405238                 mov     edx, [esp+10h]
.text:0040523C                 mov     [esp], ebx
.text:0040523F                 mov     [esp+4], edx
.text:00405243                 call    strcpy
.text:00405248                 movzx   eax, byte ptr [ebx]
.text:0040524B                 mov     edx, ebx
.text:0040524D                 test    al, al
.text:0040524F                 jz      short loc_40526C
.text:00405251                 jmp     short loc_405260
.text:00405251 ; ---------------------------------------------------------------------------
.text:00405253                 align 10h
.text:00405260
.text:00405260 loc_405260:                             ; CODE XREF: .text:00405251↑j
.text:00405260                                         ; .text:0040526A↓j
.text:00405260                 cmp     al, 2Fh ; '/'
.text:00405262                 jz      short loc_405273
.text:00405264
.text:00405264 loc_405264:                             ; CODE XREF: .text:00405276↓j
.text:00405264                 inc     edx
.text:00405265                 movzx   eax, byte ptr [edx]
.text:00405268                 test    al, al
.text:0040526A                 jnz     short loc_405260
.text:0040526C
.text:0040526C loc_40526C:                             ; CODE XREF: .text:0040524F↑j
.text:0040526C                 add     esp, 8
.text:0040526F                 xor     eax, eax
.text:00405271                 pop     ebx
.text:00405272                 retn
.text:00405273 ; ---------------------------------------------------------------------------
.text:00405273
.text:00405273 loc_405273:                             ; CODE XREF: .text:00405262↑j
.text:00405273                 mov     byte ptr [edx], 5Ch ; '\'
.text:00405276                 jmp     short loc_405264
.text:00405276 ; ---------------------------------------------------------------------------
.text:00405278                 align 10h
.text:00405280                 push    ebx
.text:00405281                 sub     esp, 8
.text:00405284                 mov     ebx, [esp+14h]
.text:00405288                 mov     edx, [esp+10h]
.text:0040528C                 mov     [esp+4], ebx
.text:00405290                 mov     [esp], edx
.text:00405293                 call    sub_405620
.text:00405298                 movzx   eax, byte ptr [ebx]
.text:0040529B                 mov     edx, ebx
.text:0040529D                 test    al, al
.text:0040529F                 jz      short loc_4052BC
.text:004052A1                 jmp     short loc_4052B0
.text:004052A1 ; ---------------------------------------------------------------------------
.text:004052A3                 align 10h
.text:004052B0
.text:004052B0 loc_4052B0:                             ; CODE XREF: .text:004052A1↑j
.text:004052B0                                         ; .text:004052BA↓j
.text:004052B0                 cmp     al, 2Fh ; '/'
.text:004052B2                 jz      short loc_4052C3
.text:004052B4
.text:004052B4 loc_4052B4:                             ; CODE XREF: .text:004052C6↓j
.text:004052B4                 inc     edx
.text:004052B5                 movzx   eax, byte ptr [edx]
.text:004052B8                 test    al, al
.text:004052BA                 jnz     short loc_4052B0
.text:004052BC
.text:004052BC loc_4052BC:                             ; CODE XREF: .text:0040529F↑j
.text:004052BC                 add     esp, 8
.text:004052BF                 xor     eax, eax
.text:004052C1                 pop     ebx
.text:004052C2                 retn
.text:004052C3 ; ---------------------------------------------------------------------------
.text:004052C3
.text:004052C3 loc_4052C3:                             ; CODE XREF: .text:004052B2↑j
.text:004052C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004052C6                 jmp     short loc_4052B4
.text:004052C6 ; ---------------------------------------------------------------------------
.text:004052C8                 align 10h
.text:004052D0                 push    ebx
.text:004052D1                 sub     esp, 8
.text:004052D4                 mov     ebx, [esp+14h]
.text:004052D8                 mov     edx, [esp+10h]
.text:004052DC                 mov     [esp], ebx
.text:004052DF                 mov     [esp+4], edx
.text:004052E3                 call    sub_405620
.text:004052E8                 movzx   eax, byte ptr [ebx]
.text:004052EB                 mov     edx, ebx
.text:004052ED                 test    al, al
.text:004052EF                 jz      short loc_40530C
.text:004052F1                 jmp     short loc_405300
.text:004052F1 ; ---------------------------------------------------------------------------
.text:004052F3                 align 10h
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: .text:004052F1↑j
.text:00405300                                         ; .text:0040530A↓j
.text:00405300                 cmp     al, 5Ch ; '\'
.text:00405302                 jz      short loc_405311
.text:00405304
.text:00405304 loc_405304:                             ; CODE XREF: .text:00405314↓j
.text:00405304                 inc     edx
.text:00405305                 movzx   eax, byte ptr [edx]
.text:00405308                 test    al, al
.text:0040530A                 jnz     short loc_405300
.text:0040530C
.text:0040530C loc_40530C:                             ; CODE XREF: .text:004052EF↑j
.text:0040530C                 add     esp, 8
.text:0040530F                 pop     ebx
.text:00405310                 retn
.text:00405311 ; ---------------------------------------------------------------------------
.text:00405311
.text:00405311 loc_405311:                             ; CODE XREF: .text:00405302↑j
.text:00405311                 mov     byte ptr [edx], 2Fh ; '/'
.text:00405314                 jmp     short loc_405304
.text:00405314 ; ---------------------------------------------------------------------------
.text:00405316                 align 10h
.text:00405320
.text:00405320 ; =============== S U B R O U T I N E =======================================
.text:00405320
.text:00405320
.text:00405320 ; int __cdecl sub_405320(LPSTR)
.text:00405320 sub_405320      proc near               ; CODE XREF: .text:004053AE↓p
.text:00405320                                         ; .text:004053EE↓p ...
.text:00405320
.text:00405320 hModule         = dword ptr -1Ch
.text:00405320 lpFilename      = dword ptr -18h
.text:00405320 nSize           = dword ptr -14h
.text:00405320 arg_0           = dword ptr  4
.text:00405320
.text:00405320                 push    esi
.text:00405321                 push    ebx
.text:00405322                 sub     esp, 14h
.text:00405325                 mov     esi, [esp+1Ch+arg_0]
.text:00405329                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00405331                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00405338                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040533C                 call    GetModuleFileNameA
.text:00405341                 sub     esp, 0Ch
.text:00405344                 test    eax, eax
.text:00405346                 jz      short loc_405388
.text:00405348                 cmp     eax, 104h
.text:0040534D                 jg      short loc_405379
.text:0040534F
.text:0040534F loc_40534F:                             ; CODE XREF: sub_405320+66↓j
.text:0040534F                                         ; sub_405320+78↓j
.text:0040534F                 movzx   eax, byte ptr [esi]
.text:00405352                 mov     edx, esi
.text:00405354                 test    al, al
.text:00405356                 jz      short loc_40536C
.text:00405358                 nop
.text:00405359                 lea     esi, [esi+0]
.text:00405360
.text:00405360 loc_405360:                             ; CODE XREF: sub_405320+4A↓j
.text:00405360                 cmp     al, 5Ch ; '\'
.text:00405362                 jz      short loc_405374
.text:00405364
.text:00405364 loc_405364:                             ; CODE XREF: sub_405320+57↓j
.text:00405364                 inc     edx
.text:00405365                 movzx   eax, byte ptr [edx]
.text:00405368                 test    al, al
.text:0040536A                 jnz     short loc_405360
.text:0040536C
.text:0040536C loc_40536C:                             ; CODE XREF: sub_405320+36↑j
.text:0040536C                 add     esp, 14h
.text:0040536F                 mov     eax, esi
.text:00405371                 pop     ebx
.text:00405372                 pop     esi
.text:00405373                 retn
.text:00405374 ; ---------------------------------------------------------------------------
.text:00405374
.text:00405374 loc_405374:                             ; CODE XREF: sub_405320+42↑j
.text:00405374                 mov     byte ptr [edx], 2Fh ; '/'
.text:00405377                 jmp     short loc_405364
.text:00405379 ; ---------------------------------------------------------------------------
.text:00405379
.text:00405379 loc_405379:                             ; CODE XREF: sub_405320+2D↑j
.text:00405379                 call    _errno
.text:0040537E                 mov     dword ptr [eax], 26h ; '&'
.text:00405384                 xor     esi, esi
.text:00405386                 jmp     short loc_40534F
.text:00405388 ; ---------------------------------------------------------------------------
.text:00405388
.text:00405388 loc_405388:                             ; CODE XREF: sub_405320+26↑j
.text:00405388                 call    sub_405A30
.text:0040538D                 mov     ebx, eax
.text:0040538F                 xor     esi, esi
.text:00405391                 call    _errno
.text:00405396                 mov     [eax], ebx
.text:00405398                 jmp     short loc_40534F
.text:00405398 sub_405320      endp
.text:00405398
.text:00405398 ; ---------------------------------------------------------------------------
.text:0040539A                 align 10h
.text:004053A0                 sub     esp, 0Ch
.text:004053A3                 mov     [esp+8], ebx
.text:004053A7                 mov     ebx, [esp+10h]
.text:004053AB                 mov     [esp], ebx
.text:004053AE                 call    sub_405320
.text:004053B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004053BB                 mov     [esp], ebx
.text:004053BE                 call    strrchr
.text:004053C3                 test    eax, eax
.text:004053C5                 jz      short loc_4053CA
.text:004053C7                 lea     ebx, [eax+1]
.text:004053CA
.text:004053CA loc_4053CA:                             ; CODE XREF: .text:004053C5↑j
.text:004053CA                 mov     eax, ebx
.text:004053CC                 mov     ebx, [esp+8]
.text:004053D0                 add     esp, 0Ch
.text:004053D3                 retn
.text:004053D3 ; ---------------------------------------------------------------------------
.text:004053D4                 align 10h
.text:004053E0                 sub     esp, 0Ch
.text:004053E3                 mov     [esp+8], ebx
.text:004053E7                 mov     ebx, [esp+10h]
.text:004053EB                 mov     [esp], ebx
.text:004053EE                 call    sub_405320
.text:004053F3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004053FB                 mov     [esp], ebx
.text:004053FE                 call    strrchr
.text:00405403                 test    eax, eax
.text:00405405                 jz      short loc_40540A
.text:00405407                 mov     byte ptr [eax], 0
.text:0040540A
.text:0040540A loc_40540A:                             ; CODE XREF: .text:00405405↑j
.text:0040540A                 mov     eax, ebx
.text:0040540C                 mov     ebx, [esp+8]
.text:00405410                 add     esp, 0Ch
.text:00405413                 retn
.text:00405413 ; ---------------------------------------------------------------------------
.text:00405414                 align 10h
.text:00405420                 sub     esp, 0Ch
.text:00405423                 mov     [esp+8], ebx
.text:00405427                 mov     ebx, [esp+10h]
.text:0040542B                 mov     [esp], ebx
.text:0040542E                 call    sub_405320
.text:00405433                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040543B                 mov     [esp], ebx
.text:0040543E                 call    strrchr
.text:00405443                 test    eax, eax
.text:00405445                 jz      short loc_40544A
.text:00405447                 mov     byte ptr [eax], 0
.text:0040544A
.text:0040544A loc_40544A:                             ; CODE XREF: .text:00405445↑j
.text:0040544A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00405452                 mov     [esp], ebx
.text:00405455                 call    strrchr
.text:0040545A                 test    eax, eax
.text:0040545C                 jz      short loc_405461
.text:0040545E                 mov     byte ptr [eax], 0
.text:00405461
.text:00405461 loc_405461:                             ; CODE XREF: .text:0040545C↑j
.text:00405461                 mov     eax, ebx
.text:00405463                 mov     ebx, [esp+8]
.text:00405467                 add     esp, 0Ch
.text:0040546A                 retn
.text:0040546A ; ---------------------------------------------------------------------------
.text:0040546B                 align 10h
.text:00405470                 sub     esp, 1Ch
.text:00405473                 mov     edx, [esp+20h]
.text:00405477                 mov     [esp+10h], ebx
.text:0040547B                 xor     ebx, ebx
.text:0040547D                 mov     [esp+14h], esi
.text:00405481                 mov     [esp+18h], edi
.text:00405485                 mov     [esp], edx
.text:00405488                 call    sub_405650
.text:0040548D                 mov     edx, [esp+24h]
.text:00405491                 mov     edi, eax
.text:00405493                 mov     [esp], edx
.text:00405496                 call    sub_405650
.text:0040549B                 mov     [esp+4], eax
.text:0040549F                 mov     esi, eax
.text:004054A1                 mov     [esp], edi
.text:004054A4                 call    _stricmp
.text:004054A9                 mov     [esp], edi
.text:004054AC                 test    eax, eax
.text:004054AE                 setz    bl
.text:004054B1                 call    free
.text:004054B6                 mov     [esp], esi
.text:004054B9                 call    free
.text:004054BE                 mov     eax, ebx
.text:004054C0                 mov     esi, [esp+14h]
.text:004054C4                 mov     ebx, [esp+10h]
.text:004054C8                 mov     edi, [esp+18h]
.text:004054CC                 add     esp, 1Ch
.text:004054CF                 retn
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D0                 xor     eax, eax
.text:004054D2                 retn
.text:004054D2 ; ---------------------------------------------------------------------------
.text:004054D3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00405507↓o
.text:004054E0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00405516↓o
.text:004054F0 ; ---------------------------------------------------------------------------
.text:004054F0                 sub     esp, 1Ch
.text:004054F3                 mov     [esp+10h], ebx
.text:004054F7                 mov     ebx, [esp+20h]
.text:004054FB                 mov     [esp+18h], edi
.text:004054FF                 mov     edi, [esp+24h]
.text:00405503                 mov     [esp+14h], esi
.text:00405507                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040550E                 call    GetModuleHandleA
.text:00405513                 sub     esp, 4
.text:00405516                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040551E                 mov     [esp], eax
.text:00405521                 call    GetProcAddress
.text:00405526                 sub     esp, 8
.text:00405529                 test    eax, eax
.text:0040552B                 jz      short loc_405543
.text:0040552D                 mov     dword ptr [esp+8], 104h
.text:00405535                 mov     [esp+4], ebx
.text:00405539                 mov     [esp], edi
.text:0040553C                 call    eax
.text:0040553E                 sub     esp, 0Ch
.text:00405541                 mov     esi, eax
.text:00405543
.text:00405543 loc_405543:                             ; CODE XREF: .text:0040552B↑j
.text:00405543                 test    esi, esi
.text:00405545                 jz      short loc_405560
.text:00405547
.text:00405547 loc_405547:                             ; CODE XREF: .text:0040557B↓j
.text:00405547                 mov     eax, ebx
.text:00405549                 mov     esi, [esp+14h]
.text:0040554D                 mov     ebx, [esp+10h]
.text:00405551                 mov     edi, [esp+18h]
.text:00405555                 add     esp, 1Ch
.text:00405558                 retn
.text:00405558 ; ---------------------------------------------------------------------------
.text:00405559                 align 10h
.text:00405560
.text:00405560 loc_405560:                             ; CODE XREF: .text:00405545↑j
.text:00405560                 call    sub_4062C0
.text:00405565                 mov     [esp], ebx
.text:00405568                 mov     [esp+4], edi
.text:0040556C                 call    strcpy
.text:00405571                 mov     [esp], ebx
.text:00405574                 call    _win32_longpath
.text:00405579                 mov     ebx, eax
.text:0040557B                 jmp     short loc_405547
.text:0040557B ; ---------------------------------------------------------------------------
.text:0040557D                 align 10h
.text:00405580                 sub     esp, 1Ch
.text:00405583                 mov     [esp+18h], edi
.text:00405587                 mov     edi, [esp+20h]
.text:0040558B                 mov     [esp+10h], ebx
.text:0040558F                 mov     [esp+14h], esi
.text:00405593                 mov     dword ptr [esp+8], 0
.text:0040559B                 mov     dword ptr [esp+4], 0
.text:004055A3                 mov     [esp], edi
.text:004055A6                 call    GetShortPathNameA
.text:004055AB                 sub     esp, 0Ch
.text:004055AE                 mov     ebx, eax
.text:004055B0                 test    eax, eax
.text:004055B2                 jz      short loc_405600
.text:004055B4                 lea     edx, [eax+1]
.text:004055B7                 mov     [esp], edx
.text:004055BA                 call    malloc
.text:004055BF                 test    eax, eax
.text:004055C1                 mov     esi, eax
.text:004055C3                 jz      short loc_405600
.text:004055C5                 mov     [esp+8], ebx
.text:004055C9                 mov     [esp+4], eax
.text:004055CD                 mov     [esp], edi
.text:004055D0                 call    GetShortPathNameA
.text:004055D5                 sub     esp, 0Ch
.text:004055D8                 mov     edx, esi
.text:004055DA                 test    eax, eax
.text:004055DC                 jz      short loc_4055F2
.text:004055DE                 mov     esi, esi
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: .text:00405610↓j
.text:004055E0                 mov     ebx, [esp+10h]
.text:004055E4                 mov     eax, edx
.text:004055E6                 mov     esi, [esp+14h]
.text:004055EA                 mov     edi, [esp+18h]
.text:004055EE                 add     esp, 1Ch
.text:004055F1                 retn
.text:004055F2 ; ---------------------------------------------------------------------------
.text:004055F2
.text:004055F2 loc_4055F2:                             ; CODE XREF: .text:004055DC↑j
.text:004055F2                 mov     [esp], esi
.text:004055F5                 call    free
.text:004055FA                 lea     esi, [esi+0]
.text:00405600
.text:00405600 loc_405600:                             ; CODE XREF: .text:004055B2↑j
.text:00405600                                         ; .text:004055C3↑j
.text:00405600                 call    sub_405A30
.text:00405605                 mov     esi, eax
.text:00405607                 call    _errno
.text:0040560C                 mov     [eax], esi
.text:0040560E                 mov     edx, edi
.text:00405610                 jmp     short loc_4055E0
.text:00405610 ; ---------------------------------------------------------------------------
.text:00405612                 align 10h
.text:00405620
.text:00405620 ; =============== S U B R O U T I N E =======================================
.text:00405620
.text:00405620
.text:00405620 sub_405620      proc near               ; CODE XREF: .text:00405293↑p
.text:00405620                                         ; .text:004052E3↑p
.text:00405620
.text:00405620 arg_4           = dword ptr  8
.text:00405620
.text:00405620                 sub     esp, 0Ch
.text:00405623                 mov     edx, [esp+0Ch+arg_4]
.text:00405627                 test    edx, edx
.text:00405629                 jz      short loc_405630
.text:0040562B                 add     esp, 0Ch
.text:0040562E                 jmp     short sub_405670
.text:00405630 ; ---------------------------------------------------------------------------
.text:00405630
.text:00405630 loc_405630:                             ; CODE XREF: sub_405620+9↑j
.text:00405630                 call    _errno
.text:00405635                 mov     dword ptr [eax], 16h
.text:0040563B                 xor     eax, eax
.text:0040563D                 add     esp, 0Ch
.text:00405640                 retn
.text:00405640 sub_405620      endp
.text:00405640
.text:00405641 ; ---------------------------------------------------------------------------
.text:00405641                 jmp     short sub_405650
.text:00405641 ; ---------------------------------------------------------------------------
.text:00405643                 align 10h
.text:00405650
.text:00405650 ; =============== S U B R O U T I N E =======================================
.text:00405650
.text:00405650
.text:00405650 ; int __cdecl sub_405650(LPCSTR)
.text:00405650 sub_405650      proc near               ; CODE XREF: sub_404AB0+74↑p
.text:00405650                                         ; .text:00405488↑p ...
.text:00405650
.text:00405650 lpFileName      = dword ptr -0Ch
.text:00405650 Destination     = dword ptr -8
.text:00405650 arg_0           = dword ptr  4
.text:00405650
.text:00405650                 sub     esp, 0Ch
.text:00405653                 mov     edx, [esp+0Ch+arg_0]
.text:00405657                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040565F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00405662                 call    sub_405670
.text:00405667                 add     esp, 0Ch
.text:0040566A                 retn
.text:0040566A sub_405650      endp
.text:0040566A
.text:0040566A ; ---------------------------------------------------------------------------
.text:0040566B                 align 10h
.text:00405670
.text:00405670 ; =============== S U B R O U T I N E =======================================
.text:00405670
.text:00405670
.text:00405670 ; int __cdecl sub_405670(LPCSTR lpFileName, char *Destination)
.text:00405670 sub_405670      proc near               ; CODE XREF: sub_405620+E↑j
.text:00405670                                         ; sub_405650+12↑p
.text:00405670
.text:00405670 Size            = dword ptr -2Ch
.text:00405670 nBufferLength   = dword ptr -28h
.text:00405670 lpBuffer        = dword ptr -24h
.text:00405670 lpFilePart      = dword ptr -20h
.text:00405670 FilePart        = dword ptr -14h
.text:00405670 lpFileName      = dword ptr  4
.text:00405670 Destination     = dword ptr  8
.text:00405670
.text:00405670                 push    ebp
.text:00405671                 push    edi
.text:00405672                 push    esi
.text:00405673                 push    ebx
.text:00405674                 sub     esp, 1Ch
.text:00405677                 mov     edi, [esp+2Ch+lpFileName]
.text:0040567B                 mov     ebp, [esp+2Ch+Destination]
.text:0040567F                 test    edi, edi
.text:00405681                 jz      loc_405789
.text:00405687                 cmp     byte ptr [edi], 0
.text:0040568A                 jz      loc_40577C
.text:00405690                 mov     [esp+2Ch+Size], 104h ; Size
.text:00405697                 call    malloc
.text:0040569C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:004056A0                 lea     edx, [esp+2Ch+FilePart]
.text:004056A4                 mov     ebx, eax
.text:004056A6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:004056AA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:004056B2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:004056B5                 call    GetFullPathNameA
.text:004056BA                 sub     esp, 10h
.text:004056BD                 mov     esi, eax
.text:004056BF                 test    eax, eax
.text:004056C1                 jz      loc_40576A
.text:004056C7                 cmp     eax, 104h
.text:004056CC                 jle     short loc_4056DD
.text:004056CE                 test    ebp, ebp
.text:004056D0                 jz      short loc_405739
.text:004056D2                 call    _errno
.text:004056D7                 mov     dword ptr [eax], 26h ; '&'
.text:004056DD
.text:004056DD loc_4056DD:                             ; CODE XREF: sub_405670+5C↑j
.text:004056DD                                         ; sub_405670+F5↓j
.text:004056DD                 call    _errno
.text:004056E2                 mov     edi, [eax]
.text:004056E4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:004056EC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:004056EF                 call    sub_406570
.text:004056F4                 test    eax, eax
.text:004056F6                 jnz     short loc_405710
.text:004056F8                 movzx   eax, byte ptr [esi+ebx-1]
.text:004056FD                 cmp     al, 2Fh ; '/'
.text:004056FF                 jz      short loc_405710
.text:00405701                 cmp     al, 5Ch ; '\'
.text:00405703                 jz      short loc_405710
.text:00405705                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00405709                 mov     byte ptr [esi+ebx+1], 0
.text:0040570E                 mov     esi, esi
.text:00405710
.text:00405710 loc_405710:                             ; CODE XREF: sub_405670+86↑j
.text:00405710                                         ; sub_405670+8F↑j ...
.text:00405710                 call    _errno
.text:00405715                 mov     [eax], edi
.text:00405717                 mov     [esp+2Ch+Size], ebx
.text:0040571A                 call    sub_405180
.text:0040571F                 test    ebp, ebp
.text:00405721                 mov     eax, ebx
.text:00405723                 jz      short loc_405731
.text:00405725                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00405729                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040572C                 call    strcpy
.text:00405731
.text:00405731 loc_405731:                             ; CODE XREF: sub_405670+B3↑j
.text:00405731                                         ; sub_405670+10A↓j
.text:00405731                 add     esp, 1Ch
.text:00405734                 pop     ebx
.text:00405735                 pop     esi
.text:00405736                 pop     edi
.text:00405737                 pop     ebp
.text:00405738                 retn
.text:00405739 ; ---------------------------------------------------------------------------
.text:00405739
.text:00405739 loc_405739:                             ; CODE XREF: sub_405670+60↑j
.text:00405739                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040573C                 lea     ecx, [eax+2]
.text:0040573F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00405743                 call    realloc
.text:00405748                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040574C                 lea     edx, [esp+2Ch+FilePart]
.text:00405750                 mov     ebx, eax
.text:00405752                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00405756                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040575A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040575D                 call    GetFullPathNameA
.text:00405762                 sub     esp, 10h
.text:00405765                 jmp     loc_4056DD
.text:0040576A ; ---------------------------------------------------------------------------
.text:0040576A
.text:0040576A loc_40576A:                             ; CODE XREF: sub_405670+51↑j
.text:0040576A                 call    sub_405A30
.text:0040576F                 mov     esi, eax
.text:00405771                 call    _errno
.text:00405776                 mov     [eax], esi
.text:00405778
.text:00405778 loc_405778:                             ; CODE XREF: sub_405670+117↓j
.text:00405778                                         ; sub_405670+124↓j
.text:00405778                 xor     eax, eax
.text:0040577A                 jmp     short loc_405731
.text:0040577C ; ---------------------------------------------------------------------------
.text:0040577C
.text:0040577C loc_40577C:                             ; CODE XREF: sub_405670+1A↑j
.text:0040577C                 call    _errno
.text:00405781                 mov     dword ptr [eax], 2
.text:00405787                 jmp     short loc_405778
.text:00405789 ; ---------------------------------------------------------------------------
.text:00405789
.text:00405789 loc_405789:                             ; CODE XREF: sub_405670+11↑j
.text:00405789                 call    _errno
.text:0040578E                 mov     dword ptr [eax], 16h
.text:00405794                 jmp     short loc_405778
.text:00405794 sub_405670      endp
.text:00405794
.text:00405794 ; ---------------------------------------------------------------------------
.text:00405796                 align 10h
.text:004057A0
.text:004057A0 ; =============== S U B R O U T I N E =======================================
.text:004057A0
.text:004057A0 ; Attributes: info_from_lumina
.text:004057A0
.text:004057A0 ___get_errno    proc near               ; CODE XREF: sub_405A30+B↓p
.text:004057A0
.text:004057A0 arg_0           = dword ptr  4
.text:004057A0
.text:004057A0                 mov     eax, [esp+arg_0]
.text:004057A4                 cmp     eax, 53h ; 'S'
.text:004057A7                 jg      loc_4058A0
.text:004057AD                 cmp     eax, 52h ; 'R'
.text:004057B0                 jge     short loc_405802
.text:004057B2                 cmp     eax, 0Fh
.text:004057B5                 jz      short loc_4057D0
.text:004057B7                 cmp     eax, 0Fh
.text:004057BA                 jg      short loc_405830
.text:004057BC                 cmp     eax, 9
.text:004057BF                 jg      short loc_405810
.text:004057C1                 cmp     eax, 7
.text:004057C4                 jge     short loc_405809
.text:004057C6                 cmp     eax, 3
.text:004057C9                 jg      short loc_4057EA
.text:004057CB                 cmp     eax, 2
.text:004057CE                 jl      short loc_4057E3
.text:004057D0
.text:004057D0 loc_4057D0:                             ; CODE XREF: ___get_errno+15↑j
.text:004057D0                                         ; ___get_errno+9D↓j ...
.text:004057D0                 mov     edx, 2
.text:004057D5                 lea     esi, [esi+0]
.text:004057D9                 lea     edi, [edi+0]
.text:004057E0
.text:004057E0 loc_4057E0:                             ; CODE XREF: ___get_errno+48↓j
.text:004057E0                                         ; ___get_errno+59↓j ...
.text:004057E0                 mov     eax, edx
.text:004057E2                 retn
.text:004057E3 ; ---------------------------------------------------------------------------
.text:004057E3
.text:004057E3 loc_4057E3:                             ; CODE XREF: ___get_errno+2E↑j
.text:004057E3                                         ; ___get_errno+78↓j ...
.text:004057E3                 mov     edx, 16h
.text:004057E8                 jmp     short loc_4057E0
.text:004057EA ; ---------------------------------------------------------------------------
.text:004057EA
.text:004057EA loc_4057EA:                             ; CODE XREF: ___get_errno+29↑j
.text:004057EA                 cmp     eax, 5
.text:004057ED                 jz      short loc_405802
.text:004057EF                 cmp     eax, 5
.text:004057F2                 jg      short loc_4057FB
.text:004057F4                 mov     edx, 18h
.text:004057F9                 jmp     short loc_4057E0
.text:004057FB ; ---------------------------------------------------------------------------
.text:004057FB
.text:004057FB loc_4057FB:                             ; CODE XREF: ___get_errno+52↑j
.text:004057FB                                         ; ___get_errno+180↓j
.text:004057FB                 mov     edx, 9
.text:00405800                 jmp     short loc_4057E0
.text:00405802 ; ---------------------------------------------------------------------------
.text:00405802
.text:00405802 loc_405802:                             ; CODE XREF: ___get_errno+10↑j
.text:00405802                                         ; ___get_errno+4D↑j ...
.text:00405802                 mov     edx, 0Dh
.text:00405807                 jmp     short loc_4057E0
.text:00405809 ; ---------------------------------------------------------------------------
.text:00405809
.text:00405809 loc_405809:                             ; CODE XREF: ___get_errno+24↑j
.text:00405809                                         ; ___get_errno+73↓j ...
.text:00405809                 mov     edx, 0Ch
.text:0040580E                 jmp     short loc_4057E0
.text:00405810 ; ---------------------------------------------------------------------------
.text:00405810
.text:00405810 loc_405810:                             ; CODE XREF: ___get_errno+1F↑j
.text:00405810                 cmp     eax, 0Dh
.text:00405813                 jg      short loc_405809
.text:00405815                 cmp     eax, 0Ch
.text:00405818                 jge     short loc_4057E3
.text:0040581A                 cmp     eax, 0Ah
.text:0040581D                 mov     edx, 7
.text:00405822                 jz      short loc_4057E0
.text:00405824                 cmp     eax, 0Bh
.text:00405827                 jnz     short loc_4057E3
.text:00405829
.text:00405829 loc_405829:                             ; CODE XREF: ___get_errno+21A↓j
.text:00405829                 mov     edx, 8
.text:0040582E                 jmp     short loc_4057E0
.text:00405830 ; ---------------------------------------------------------------------------
.text:00405830
.text:00405830 loc_405830:                             ; CODE XREF: ___get_errno+1A↑j
.text:00405830                 cmp     eax, 22h ; '"'
.text:00405833                 jg      short loc_405864
.text:00405835                 cmp     eax, 16h
.text:00405838                 jge     short loc_405802
.text:0040583A                 cmp     eax, 12h
.text:0040583D                 jz      short loc_4057D0
.text:0040583F                 cmp     eax, 12h
.text:00405842                 jg      short loc_405855
.text:00405844                 cmp     eax, 10h
.text:00405847                 jz      short loc_405802
.text:00405849                 mov     edx, 12h
.text:0040584E                 cmp     eax, 11h
.text:00405851
.text:00405851 loc_405851:                             ; CODE XREF: ___get_errno+172↓j
.text:00405851                                         ; ___get_errno+24C↓j ...
.text:00405851                 jnz     short loc_4057E3
.text:00405853                 jmp     short loc_4057E0
.text:00405855 ; ---------------------------------------------------------------------------
.text:00405855
.text:00405855 loc_405855:                             ; CODE XREF: ___get_errno+A2↑j
.text:00405855                 cmp     eax, 14h
.text:00405858                 jle     short loc_405802
.text:0040585A
.text:0040585A loc_40585A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040585A                 mov     edx, 10h
.text:0040585F                 jmp     loc_4057E0
.text:00405864 ; ---------------------------------------------------------------------------
.text:00405864
.text:00405864 loc_405864:                             ; CODE XREF: ___get_errno+93↑j
.text:00405864                 cmp     eax, 41h ; 'A'
.text:00405867                 jz      short loc_405802
.text:00405869                 cmp     eax, 41h ; 'A'
.text:0040586C                 jg      short loc_405881
.text:0040586E                 cmp     eax, 24h ; '$'
.text:00405871                 jz      short loc_405802
.text:00405873                 cmp     eax, 35h ; '5'
.text:00405876                 jnz     loc_4057E3
.text:0040587C                 jmp     loc_4057D0
.text:00405881 ; ---------------------------------------------------------------------------
.text:00405881
.text:00405881 loc_405881:                             ; CODE XREF: ___get_errno+CC↑j
.text:00405881                 cmp     eax, 43h ; 'C'
.text:00405884                 jz      loc_4057D0
.text:0040588A                 cmp     eax, 50h ; 'P'
.text:0040588D                 jnz     loc_4057E3
.text:00405893
.text:00405893 loc_405893:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00405893                 mov     edx, 11h
.text:00405898                 jmp     loc_4057E0
.text:00405898 ; ---------------------------------------------------------------------------
.text:0040589D                 align 10h
.text:004058A0
.text:004058A0 loc_4058A0:                             ; CODE XREF: ___get_errno+7↑j
.text:004058A0                 cmp     eax, 0A1h ; '¡'
.text:004058A5                 jz      loc_4057D0
.text:004058AB                 cmp     eax, 0A1h ; '¡'
.text:004058B0                 jg      loc_405960
.text:004058B6                 cmp     eax, 81h
.text:004058BB                 jg      short loc_405925
.text:004058BD                 cmp     eax, 80h ; '€'
.text:004058C2                 mov     edx, 0Ah
.text:004058C7                 jge     loc_4057E0
.text:004058CD                 cmp     eax, 6Ch ; 'l'
.text:004058D0                 jz      loc_405802
.text:004058D6                 cmp     eax, 6Ch ; 'l'
.text:004058D9                 jg      short loc_4058F7
.text:004058DB                 cmp     eax, 57h ; 'W'
.text:004058DE                 jz      loc_4057E3
.text:004058E4                 cmp     eax, 59h ; 'Y'
.text:004058E7                 jnz     loc_4057E3
.text:004058ED
.text:004058ED loc_4058ED:                             ; CODE XREF: ___get_errno+1E9↓j
.text:004058ED                                         ; ___get_errno+23C↓j
.text:004058ED                 mov     edx, 0Bh
.text:004058F2                 jmp     loc_4057E0
.text:004058F7 ; ---------------------------------------------------------------------------
.text:004058F7
.text:004058F7 loc_4058F7:                             ; CODE XREF: ___get_errno+139↑j
.text:004058F7                 cmp     eax, 70h ; 'p'
.text:004058FA                 mov     edx, 1Ch
.text:004058FF                 jz      loc_4057E0
.text:00405905                 cmp     eax, 70h ; 'p'
.text:00405908                 jg      short loc_405917
.text:0040590A                 mov     edx, 20h ; ' '
.text:0040590F                 cmp     eax, 6Dh ; 'm'
.text:00405912                 jmp     loc_405851
.text:00405917 ; ---------------------------------------------------------------------------
.text:00405917
.text:00405917 loc_405917:                             ; CODE XREF: ___get_errno+168↑j
.text:00405917                 cmp     eax, 72h ; 'r'
.text:0040591A
.text:0040591A loc_40591A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040591A                 jnz     loc_4057E3
.text:00405920                 jmp     loc_4057FB
.text:00405925 ; ---------------------------------------------------------------------------
.text:00405925
.text:00405925 loc_405925:                             ; CODE XREF: ___get_errno+11B↑j
.text:00405925                 cmp     eax, 84h ; '„'
.text:0040592A                 jz      loc_405802
.text:00405930                 cmp     eax, 84h ; '„'
.text:00405935                 jg      short loc_40593E
.text:00405937                 cmp     eax, 82h ; '‚'
.text:0040593C                 jmp     short loc_40591A
.text:0040593E ; ---------------------------------------------------------------------------
.text:0040593E
.text:0040593E loc_40593E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040593E                 cmp     eax, 91h ; '‘'
.text:00405943                 mov     edx, 29h ; ')'
.text:00405948                 jz      loc_4057E0
.text:0040594E                 cmp     eax, 9Eh ; 'ž'
.text:00405953
.text:00405953 loc_405953:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00405953                 jnz     loc_4057E3
.text:00405959                 jmp     loc_405802
.text:00405959 ; ---------------------------------------------------------------------------
.text:0040595E                 align 10h
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: ___get_errno+110↑j
.text:00405960                 cmp     eax, 0CEh ; 'Î'
.text:00405965                 jz      loc_4057D0
.text:0040596B                 cmp     eax, 0CEh ; 'Î'
.text:00405970                 jg      short loc_4059C0
.text:00405972                 cmp     eax, 0AAh ; 'ª'
.text:00405977                 jz      loc_40585A
.text:0040597D                 cmp     eax, 0AAh ; 'ª'
.text:00405982                 jg      short loc_405996
.text:00405984                 cmp     eax, 0A4h ; '¤'
.text:00405989                 jz      loc_4058ED
.text:0040598F                 cmp     eax, 0A7h ; '§'
.text:00405994                 jmp     short loc_405953
.text:00405996 ; ---------------------------------------------------------------------------
.text:00405996
.text:00405996 loc_405996:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00405996                 cmp     eax, 0B7h ; '·'
.text:0040599B                 jz      loc_405893
.text:004059A1                 cmp     eax, 0B7h ; '·'
.text:004059A6                 jl      loc_4057E3
.text:004059AC                 sub     eax, 0BCh ; '¼'
.text:004059B1                 cmp     eax, 0Eh
.text:004059B4                 ja      loc_4057E3
.text:004059BA                 jmp     loc_405829
.text:004059BA ; ---------------------------------------------------------------------------
.text:004059BF                 align 10h
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:004059C0                 cmp     eax, 46Bh
.text:004059C5                 mov     edx, 24h ; '$'
.text:004059CA                 jz      loc_4057E0
.text:004059D0                 cmp     eax, 46Bh
.text:004059D5                 jg      short loc_4059F1
.text:004059D7                 cmp     eax, 0D7h ; '×'
.text:004059DC                 jz      loc_4058ED
.text:004059E2                 mov     edx, 5
.text:004059E7                 cmp     eax, 45Dh
.text:004059EC                 jmp     loc_405851
.text:004059F1 ; ---------------------------------------------------------------------------
.text:004059F1
.text:004059F1 loc_4059F1:                             ; CODE XREF: ___get_errno+235↑j
.text:004059F1                 cmp     eax, 4D5h
.text:004059F6                 mov     edx, 4
.text:004059FB                 jz      loc_4057E0
.text:00405A01                 cmp     eax, 4D5h
.text:00405A06                 jg      short loc_405A17
.text:00405A08                 mov     edx, 13h
.text:00405A0D                 cmp     eax, 4B0h
.text:00405A12                 jmp     loc_405851
.text:00405A17 ; ---------------------------------------------------------------------------
.text:00405A17
.text:00405A17 loc_405A17:                             ; CODE XREF: ___get_errno+266↑j
.text:00405A17                 cmp     eax, 718h
.text:00405A1C                 jnz     loc_4057E3
.text:00405A22                 jmp     loc_405809
.text:00405A22 ___get_errno    endp
.text:00405A22
.text:00405A22 ; ---------------------------------------------------------------------------
.text:00405A27                 align 10h
.text:00405A30
.text:00405A30 ; =============== S U B R O U T I N E =======================================
.text:00405A30
.text:00405A30
.text:00405A30 sub_405A30      proc near               ; CODE XREF: sub_404AB0+1A2↑p
.text:00405A30                                         ; sub_404C90+DA↑p ...
.text:00405A30
.text:00405A30 var_C           = dword ptr -0Ch
.text:00405A30
.text:00405A30                 sub     esp, 0Ch
.text:00405A33                 call    GetLastError
.text:00405A38                 mov     [esp+0Ch+var_C], eax
.text:00405A3B                 call    ___get_errno
.text:00405A40                 add     esp, 0Ch
.text:00405A43                 retn
.text:00405A43 sub_405A30      endp
.text:00405A43
.text:00405A43 ; ---------------------------------------------------------------------------
.text:00405A44                 align 10h
.text:00405A50 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:00405C6F↓o
.text:00405A5C aLu             db '%lu',0              ; DATA XREF: .text:00405C7F↓o
.text:00405A60 asc_405A60      db ' ',0                ; DATA XREF: .text:loc_405D68↓o
.text:00405A62                 align 10h
.text:00405A70 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00405A70                                         ; DATA XREF: .text:00405D9F↓o
.text:00405A90 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_405DAD↓o
.text:00405A9C aServer         db ' Server',0          ; DATA XREF: .text:00405DD6↓o
.text:00405A9C                                         ; .text:loc_405F4E↓o
.text:00405AA4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_405DE8↓o
.text:00405AB5 aDatacenterServ db ' Datacenter Server',0
.text:00405AB5                                         ; DATA XREF: .text:loc_405DF2↓o
.text:00405AC8 aStandardEditio db ' Standard Edition',0
.text:00405AC8                                         ; DATA XREF: .text:00405E1A↓o
.text:00405ADA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_405E24↓o
.text:00405AE7 aEnterpriseEdit db ' Enterprise Edition',0
.text:00405AE7                                         ; DATA XREF: .text:loc_405E2E↓o
.text:00405AFB aDatacenterEdit db ' Datacenter Edition',0
.text:00405AFB                                         ; DATA XREF: .text:loc_405E38↓o
.text:00405B0F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:00405E4B↓o
.text:00405B1D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_405E55↓o
.text:00405B1D                                         ; .text:loc_405F60↓o
.text:00405B2B                 align 10h
.text:00405B30 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00405B30                                         ; DATA XREF: .text:00405E82↓o
.text:00405B60 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00405EC9↓o
.text:00405B6C aWinnt          db 'WINNT',0            ; DATA XREF: .text:00405F04↓o
.text:00405B72 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:00405F1B↓o
.text:00405B7B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00405F32↓o
.text:00405B84                 align 10h
.text:00405B90 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00405B90                                         ; DATA XREF: .text:004060A7↓o
.text:00405BB3                 db 1Dh dup(90h)
.text:00405BD0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00405BD0                                         ; DATA XREF: .text:00406106↓o
.text:00405BF6 ; ---------------------------------------------------------------------------
.text:00405BF6
.text:00405BF6 loc_405BF6:                             ; DATA XREF: .text:loc_406171↓o
.text:00405BF6                 and     [ebx+45h], dl
.text:00405BF9                 add     [eax], ah
.text:00405BFB                 push    ebx
.text:00405BFC                 push    eax
.text:00405BFD                 xor     [eax], eax
.text:00405BFF
.text:00405BFF loc_405BFF:                             ; DATA XREF: .text:loc_4061EB↓o
.text:00405BFF                 and     [edi+53h], cl
.text:00405C02                 push    edx
.text:00405C03                 xor     al, [eax]
.text:00405C05                 lea     esi, [esi+0]
.text:00405C09                 lea     edi, [edi+0]
.text:00405C10                 push    edi
.text:00405C11                 push    esi
.text:00405C12                 push    ebx
.text:00405C13                 sub     esp, 130h
.text:00405C19                 mov     ebx, [esp+140h]
.text:00405C20                 call    sub_406320
.text:00405C25                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00405C2A                 cmp     eax, 1
.text:00405C2D                 jz      loc_4060D0
.text:00405C33                 cmp     eax, 1
.text:00405C36                 jb      loc_4060A6
.text:00405C3C                 cmp     eax, 2
.text:00405C3F                 jz      loc_405CF0
.text:00405C45                 cmp     eax, 3
.text:00405C48                 jz      short loc_405CAF
.text:00405C4A                 lea     esi, [esi+0]
.text:00405C50
.text:00405C50 loc_405C50:                             ; CODE XREF: .text:00405CE5↓j
.text:00405C50                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00405C56                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00405C5C
.text:00405C5C loc_405C5C:                             ; CODE XREF: .text:004060EF↓j
.text:00405C5C                 mov     [esp+10h], edx
.text:00405C60                 mov     ebx, [esp+144h]
.text:00405C67                 mov     [esp+0Ch], ecx
.text:00405C6B                 mov     [esp+8], eax
.text:00405C6F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00405C77                 mov     [esp], ebx
.text:00405C7A                 call    sprintf
.text:00405C7F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00405C87                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:00405C8D                 mov     ecx, [esp+148h]
.text:00405C94                 mov     [esp+8], edi
.text:00405C98                 mov     [esp], ecx
.text:00405C9B                 call    sprintf
.text:00405CA0                 mov     eax, 1
.text:00405CA5
.text:00405CA5 loc_405CA5:                             ; CODE XREF: .text:00405E9F↓j
.text:00405CA5                                         ; .text:00405EEC↓j
.text:00405CA5                 add     esp, 130h
.text:00405CAB                 pop     ebx
.text:00405CAC                 pop     esi
.text:00405CAD                 pop     edi
.text:00405CAE                 retn
.text:00405CAF ; ---------------------------------------------------------------------------
.text:00405CAF
.text:00405CAF loc_405CAF:                             ; CODE XREF: .text:00405C48↑j
.text:00405CAF                 mov     dword ptr [ebx], 7263694Dh
.text:00405CB5                 mov     dword ptr [ebx+4], 666F736Fh
.text:00405CBC                 mov     dword ptr [ebx+8], 69572074h
.text:00405CC3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00405CCA                 mov     dword ptr [ebx+10h], 45432073h
.text:00405CD1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00405CD7                 mov     esi, esi
.text:00405CD9                 lea     edi, [edi+0]
.text:00405CE0
.text:00405CE0 loc_405CE0:                             ; CODE XREF: .text:00405D88↓j
.text:00405CE0                                         ; .text:004060C9↓j ...
.text:00405CE0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00405CE5                 jmp     loc_405C50
.text:00405CE5 ; ---------------------------------------------------------------------------
.text:00405CEA                 align 10h
.text:00405CF0
.text:00405CF0 loc_405CF0:                             ; CODE XREF: .text:00405C3F↑j
.text:00405CF0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00405CF6                 cmp     edx, 3
.text:00405CF9                 mov     eax, edx
.text:00405CFB                 jz      loc_406065
.text:00405D01
.text:00405D01 loc_405D01:                             ; CODE XREF: .text:0040606C↓j
.text:00405D01                 cmp     eax, 4
.text:00405D04                 jz      loc_406025
.text:00405D0A
.text:00405D0A loc_405D0A:                             ; CODE XREF: .text:0040602D↓j
.text:00405D0A                 cmp     eax, 4
.text:00405D0D                 ja      loc_405F72
.text:00405D13                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00405D19                 test    ecx, ecx
.text:00405D1B                 jnz     loc_405F72
.text:00405D21                 mov     dword ptr [ebx], 7263694Dh
.text:00405D27                 mov     dword ptr [ebx+4], 666F736Fh
.text:00405D2E                 mov     dword ptr [ebx+8], 69572074h
.text:00405D35                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00405D3C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00405D43
.text:00405D43 loc_405D43:                             ; CODE XREF: .text:00405FE5↓j
.text:00405D43                 mov     byte ptr [ebx+14h], 0
.text:00405D47
.text:00405D47 loc_405D47:                             ; CODE XREF: .text:00405F75↓j
.text:00405D47                                         ; .text:00405F8C↓j ...
.text:00405D47                 mov     esi, dword_407050
.text:00405D4D                 test    esi, esi
.text:00405D4F                 jz      loc_405E62
.text:00405D55                 movzx   eax, ds:byte_40823A
.text:00405D5C                 cmp     al, 1
.text:00405D5E                 jz      loc_405E42
.text:00405D64                 cmp     al, 3
.text:00405D66                 jz      short loc_405D8D
.text:00405D68
.text:00405D68 loc_405D68:                             ; CODE XREF: .text:00405DAB↓j
.text:00405D68                                         ; .text:00405DE6↓j ...
.text:00405D68                 mov     dword ptr [esp+4], offset asc_405A60 ; " "
.text:00405D70                 mov     [esp], ebx
.text:00405D73                 call    strcat
.text:00405D78                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00405D80                 mov     [esp], ebx
.text:00405D83                 call    strcat
.text:00405D88                 jmp     loc_405CE0
.text:00405D8D ; ---------------------------------------------------------------------------
.text:00405D8D
.text:00405D8D loc_405D8D:                             ; CODE XREF: .text:00405D66↑j
.text:00405D8D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00405D94                 jz      short loc_405DB6
.text:00405D96
.text:00405D96 loc_405D96:                             ; CODE XREF: .text:00405DC2↓j
.text:00405D96                 test    byte ptr ds:word_408238, 2
.text:00405D9D                 jz      short loc_405DAD
.text:00405D9F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00405DA6
.text:00405DA6 loc_405DA6:                             ; CODE XREF: .text:00405DB4↓j
.text:00405DA6                 call    printf
.text:00405DAB                 jmp     short loc_405D68
.text:00405DAD ; ---------------------------------------------------------------------------
.text:00405DAD
.text:00405DAD loc_405DAD:                             ; CODE XREF: .text:00405D9D↑j
.text:00405DAD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00405DB4                 jmp     short loc_405DA6
.text:00405DB6 ; ---------------------------------------------------------------------------
.text:00405DB6
.text:00405DB6 loc_405DB6:                             ; CODE XREF: .text:00405D94↑j
.text:00405DB6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00405DBB                 cmp     eax, 2
.text:00405DBE                 jz      short loc_405E00
.text:00405DC0                 test    eax, eax
.text:00405DC2                 jnz     short loc_405D96
.text:00405DC4                 cmp     byte ptr ds:word_408238, 0
.text:00405DCB                 js      short loc_405DF2
.text:00405DCD                 test    byte ptr ds:word_408238, 2
.text:00405DD4                 jnz     short loc_405DE8
.text:00405DD6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00405DDE
.text:00405DDE loc_405DDE:                             ; CODE XREF: .text:00405DF0↓j
.text:00405DDE                                         ; .text:00405DFA↓j ...
.text:00405DDE                 mov     [esp], ebx
.text:00405DE1                 call    strcat
.text:00405DE6                 jmp     short loc_405D68
.text:00405DE8 ; ---------------------------------------------------------------------------
.text:00405DE8
.text:00405DE8 loc_405DE8:                             ; CODE XREF: .text:00405DD4↑j
.text:00405DE8                                         ; .text:00405F49↓j
.text:00405DE8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00405DF0                 jmp     short loc_405DDE
.text:00405DF2 ; ---------------------------------------------------------------------------
.text:00405DF2
.text:00405DF2 loc_405DF2:                             ; CODE XREF: .text:00405DCB↑j
.text:00405DF2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:00405DFA                 jmp     short loc_405DDE
.text:00405DFA ; ---------------------------------------------------------------------------
.text:00405DFC                 align 10h
.text:00405E00
.text:00405E00 loc_405E00:                             ; CODE XREF: .text:00405DBE↑j
.text:00405E00                 cmp     byte ptr ds:word_408238, 0
.text:00405E07                 js      short loc_405E38
.text:00405E09                 movzx   eax, ds:word_408238
.text:00405E10                 test    al, 2
.text:00405E12                 jnz     short loc_405E2E
.text:00405E14                 cmp     ax, 400h
.text:00405E18                 jz      short loc_405E24
.text:00405E1A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00405E22                 jmp     short loc_405DDE
.text:00405E24 ; ---------------------------------------------------------------------------
.text:00405E24
.text:00405E24 loc_405E24:                             ; CODE XREF: .text:00405E18↑j
.text:00405E24                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:00405E2C                 jmp     short loc_405DDE
.text:00405E2E ; ---------------------------------------------------------------------------
.text:00405E2E
.text:00405E2E loc_405E2E:                             ; CODE XREF: .text:00405E12↑j
.text:00405E2E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00405E36                 jmp     short loc_405DDE
.text:00405E38 ; ---------------------------------------------------------------------------
.text:00405E38
.text:00405E38 loc_405E38:                             ; CODE XREF: .text:00405E07↑j
.text:00405E38                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00405E40                 jmp     short loc_405DDE
.text:00405E42 ; ---------------------------------------------------------------------------
.text:00405E42
.text:00405E42 loc_405E42:                             ; CODE XREF: .text:00405D5E↑j
.text:00405E42                 test    byte ptr ds:word_408238+1, 2
.text:00405E49                 jz      short loc_405E55
.text:00405E4B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00405E53                 jmp     short loc_405DDE
.text:00405E55 ; ---------------------------------------------------------------------------
.text:00405E55
.text:00405E55 loc_405E55:                             ; CODE XREF: .text:00405E49↑j
.text:00405E55                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00405E5D                 jmp     loc_405DDE
.text:00405E62 ; ---------------------------------------------------------------------------
.text:00405E62
.text:00405E62 loc_405E62:                             ; CODE XREF: .text:00405D4F↑j
.text:00405E62                 mov     dword ptr [esp+28h], 0FFh
.text:00405E6A                 lea     edx, [esp+2Ch]
.text:00405E6E                 mov     [esp+10h], edx
.text:00405E72                 mov     dword ptr [esp+0Ch], 1
.text:00405E7A                 mov     dword ptr [esp+8], 0
.text:00405E82                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:00405E8A                 mov     dword ptr [esp], 80000002h
.text:00405E91                 call    RegOpenKeyExA
.text:00405E96                 mov     edi, eax
.text:00405E98                 sub     esp, 14h
.text:00405E9B                 xor     eax, eax
.text:00405E9D                 test    edi, edi
.text:00405E9F                 jnz     loc_405CA5
.text:00405EA5                 mov     dword ptr [esp+0Ch], 0
.text:00405EAD                 mov     edi, [esp+2Ch]
.text:00405EB1                 lea     esi, [esp+28h]
.text:00405EB5                 mov     [esp+14h], esi
.text:00405EB9                 lea     esi, [esp+30h]
.text:00405EBD                 mov     [esp+10h], esi
.text:00405EC1                 mov     dword ptr [esp+8], 0
.text:00405EC9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00405ED1                 mov     [esp], edi
.text:00405ED4                 call    RegQueryValueExA
.text:00405ED9                 sub     esp, 18h
.text:00405EDC                 test    eax, eax
.text:00405EDE                 jnz     short loc_405EEA
.text:00405EE0                 cmp     dword ptr [esp+28h], 0FFh
.text:00405EE8                 jbe     short loc_405EF1
.text:00405EEA
.text:00405EEA loc_405EEA:                             ; CODE XREF: .text:00405EDE↑j
.text:00405EEA                 xor     eax, eax
.text:00405EEC                 jmp     loc_405CA5
.text:00405EF1 ; ---------------------------------------------------------------------------
.text:00405EF1
.text:00405EF1 loc_405EF1:                             ; CODE XREF: .text:00405EE8↑j
.text:00405EF1                 mov     edx, [esp+2Ch]
.text:00405EF5                 mov     [esp], edx
.text:00405EF8                 call    RegCloseKey
.text:00405EFD                 sub     esp, 4
.text:00405F00                 mov     [esp+4], esi
.text:00405F04                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:00405F0B                 call    lstrcmpiA
.text:00405F10                 sub     esp, 8
.text:00405F13                 test    eax, eax
.text:00405F15                 jz      short loc_405F60
.text:00405F17
.text:00405F17 loc_405F17:                             ; CODE XREF: .text:00405F70↓j
.text:00405F17                 mov     [esp+4], esi
.text:00405F1B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00405F22                 call    lstrcmpiA
.text:00405F27                 sub     esp, 8
.text:00405F2A                 test    eax, eax
.text:00405F2C                 jz      short loc_405F4E
.text:00405F2E
.text:00405F2E loc_405F2E:                             ; CODE XREF: .text:00405F5E↓j
.text:00405F2E                 mov     [esp+4], esi
.text:00405F32                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00405F39                 call    lstrcmpiA
.text:00405F3E                 sub     esp, 8
.text:00405F41                 test    eax, eax
.text:00405F43                 jnz     loc_405D68
.text:00405F49                 jmp     loc_405DE8
.text:00405F4E ; ---------------------------------------------------------------------------
.text:00405F4E
.text:00405F4E loc_405F4E:                             ; CODE XREF: .text:00405F2C↑j
.text:00405F4E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00405F56                 mov     [esp], ebx
.text:00405F59                 call    strcat
.text:00405F5E                 jmp     short loc_405F2E
.text:00405F60 ; ---------------------------------------------------------------------------
.text:00405F60
.text:00405F60 loc_405F60:                             ; CODE XREF: .text:00405F15↑j
.text:00405F60                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00405F68                 mov     [esp], ebx
.text:00405F6B                 call    strcat
.text:00405F70                 jmp     short loc_405F17
.text:00405F72 ; ---------------------------------------------------------------------------
.text:00405F72
.text:00405F72 loc_405F72:                             ; CODE XREF: .text:00405D0D↑j
.text:00405F72                                         ; .text:00405D1B↑j
.text:00405F72                 cmp     eax, 5
.text:00405F75                 jnz     loc_405D47
.text:00405F7B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00405F80                 cmp     eax, 2
.text:00405F83                 jz      short loc_405FEA
.text:00405F85                 cmp     eax, 1
.text:00405F88                 jz      short loc_405FC3
.text:00405F8A                 test    eax, eax
.text:00405F8C                 jnz     loc_405D47
.text:00405F92                 mov     dword ptr [ebx], 7263694Dh
.text:00405F98                 mov     dword ptr [ebx+4], 666F736Fh
.text:00405F9F                 mov     dword ptr [ebx+8], 69572074h
.text:00405FA6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00405FAD                 mov     dword ptr [ebx+10h], 30322073h
.text:00405FB4                 mov     word ptr [ebx+14h], 3030h
.text:00405FBA                 mov     byte ptr [ebx+16h], 0
.text:00405FBE                 jmp     loc_405D47
.text:00405FC3 ; ---------------------------------------------------------------------------
.text:00405FC3
.text:00405FC3 loc_405FC3:                             ; CODE XREF: .text:00405F88↑j
.text:00405FC3                 mov     dword ptr [ebx], 7263694Dh
.text:00405FC9                 mov     dword ptr [ebx+4], 666F736Fh
.text:00405FD0                 mov     dword ptr [ebx+8], 69572074h
.text:00405FD7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00405FDE                 mov     dword ptr [ebx+10h], 50582073h
.text:00405FE5                 jmp     loc_405D43
.text:00405FEA ; ---------------------------------------------------------------------------
.text:00405FEA
.text:00405FEA loc_405FEA:                             ; CODE XREF: .text:00405F83↑j
.text:00405FEA                 mov     dword ptr [ebx], 7263694Dh
.text:00405FF0                 mov     dword ptr [ebx+4], 666F736Fh
.text:00405FF7                 mov     dword ptr [ebx+8], 69572074h
.text:00405FFE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00406005                 mov     dword ptr [ebx+10h], 65532073h
.text:0040600C                 mov     dword ptr [ebx+14h], 72657672h
.text:00406013                 mov     dword ptr [ebx+18h], 30303220h
.text:0040601A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00406020                 jmp     loc_405D47
.text:00406025 ; ---------------------------------------------------------------------------
.text:00406025
.text:00406025 loc_406025:                             ; CODE XREF: .text:00405D04↑j
.text:00406025                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040602B                 test    edx, edx
.text:0040602D                 jnz     loc_405D0A
.text:00406033                 mov     dword ptr [ebx], 7263694Dh
.text:00406039                 mov     dword ptr [ebx+4], 666F736Fh
.text:00406040                 mov     dword ptr [ebx+8], 69572074h
.text:00406047                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040604E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00406055                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040605C                 mov     byte ptr [ebx+18h], 0
.text:00406060                 jmp     loc_405D47
.text:00406065 ; ---------------------------------------------------------------------------
.text:00406065
.text:00406065 loc_406065:                             ; CODE XREF: .text:00405CFB↑j
.text:00406065                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040606C                 jnz     loc_405D01
.text:00406072                 mov     dword ptr [ebx], 7263694Dh
.text:00406078                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040607F                 mov     dword ptr [ebx+8], 69572074h
.text:00406086                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040608D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00406094                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040609B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:004060A1                 jmp     loc_405D47
.text:004060A6 ; ---------------------------------------------------------------------------
.text:004060A6
.text:004060A6 loc_4060A6:                             ; CODE XREF: .text:00405C36↑j
.text:004060A6                 cld
.text:004060A7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:004060AC                 mov     ecx, 8
.text:004060B1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:004060B8                 mov     edi, ebx
.text:004060BA                 rep movsd
.text:004060BC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:004060C3                 mov     [edi+2], dl
.text:004060C6                 mov     [edi], si
.text:004060C9                 jmp     loc_405CE0
.text:004060C9 ; ---------------------------------------------------------------------------
.text:004060CE                 align 10h
.text:004060D0
.text:004060D0 loc_4060D0:                             ; CODE XREF: .text:00405C2D↑j
.text:004060D0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004060D6                 cmp     ecx, 4
.text:004060D9                 jz      loc_406190
.text:004060DF
.text:004060DF loc_4060DF:                             ; CODE XREF: .text:004061E6↓j
.text:004060DF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004060E5
.text:004060E5 loc_4060E5:                             ; CODE XREF: .text:00406198↓j
.text:004060E5                 cmp     ecx, 4
.text:004060E8                 jz      short loc_4060F4
.text:004060EA
.text:004060EA loc_4060EA:                             ; CODE XREF: .text:004060FC↓j
.text:004060EA                                         ; .text:00406101↓j
.text:004060EA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004060EF                 jmp     loc_405C5C
.text:004060F4 ; ---------------------------------------------------------------------------
.text:004060F4
.text:004060F4 loc_4060F4:                             ; CODE XREF: .text:004060E8↑j
.text:004060F4                 cmp     edx, 0Ah
.text:004060F7                 jz      short loc_406121
.text:004060F9
.text:004060F9 loc_4060F9:                             ; CODE XREF: .text:0040616F↓j
.text:004060F9                 cmp     ecx, 4
.text:004060FC                 jnz     short loc_4060EA
.text:004060FE                 cmp     edx, 5Ah ; 'Z'
.text:00406101                 jnz     short loc_4060EA
.text:00406103                 cld
.text:00406104                 mov     edi, ebx
.text:00406106                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040610B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00406112                 mov     ecx, 9
.text:00406117                 rep movsd
.text:00406119                 mov     [edi], bx
.text:0040611C                 jmp     loc_405CE0
.text:00406121 ; ---------------------------------------------------------------------------
.text:00406121
.text:00406121 loc_406121:                             ; CODE XREF: .text:004060F7↑j
.text:00406121                 mov     dword ptr [ebx], 7263694Dh
.text:00406127                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040612E                 mov     dword ptr [ebx+8], 69572074h
.text:00406135                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040613C                 mov     dword ptr [ebx+10h], 38392073h
.text:00406143                 mov     byte ptr [ebx+14h], 0
.text:00406147                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040614D                 lea     edi, [edx-7CFh]
.text:00406153                 cmp     edi, 0B7h ; '·'
.text:00406159                 jbe     short loc_406183
.text:0040615B                 cmp     edx, 886h
.text:00406161                 ja      short loc_406171
.text:00406163
.text:00406163 loc_406163:                             ; CODE XREF: .text:00406181↓j
.text:00406163                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00406169                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040616F                 jmp     short loc_4060F9
.text:00406171 ; ---------------------------------------------------------------------------
.text:00406171
.text:00406171 loc_406171:                             ; CODE XREF: .text:00406161↑j
.text:00406171                 mov     dword ptr [esp+4], offset loc_405BF6
.text:00406179
.text:00406179 loc_406179:                             ; CODE XREF: .text:0040618B↓j
.text:00406179                 mov     [esp], ebx
.text:0040617C                 call    strcat
.text:00406181                 jmp     short loc_406163
.text:00406183 ; ---------------------------------------------------------------------------
.text:00406183
.text:00406183 loc_406183:                             ; CODE XREF: .text:00406159↑j
.text:00406183                 mov     dword ptr [esp+4], 405BFAh
.text:0040618B                 jmp     short loc_406179
.text:0040618B ; ---------------------------------------------------------------------------
.text:0040618D                 align 10h
.text:00406190
.text:00406190 loc_406190:                             ; CODE XREF: .text:004060D9↑j
.text:00406190                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00406196                 test    edx, edx
.text:00406198                 jnz     loc_4060E5
.text:0040619E                 mov     dword ptr [ebx], 7263694Dh
.text:004061A4                 mov     dword ptr [ebx+4], 666F736Fh
.text:004061AB                 mov     dword ptr [ebx+8], 69572074h
.text:004061B2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004061B9                 mov     dword ptr [ebx+10h], 35392073h
.text:004061C0                 mov     byte ptr [ebx+14h], 0
.text:004061C4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004061CA                 lea     ecx, [edx-3B7h]
.text:004061D0                 cmp     ecx, 81h
.text:004061D6                 jbe     short loc_4061FD
.text:004061D8                 cmp     edx, 438h
.text:004061DE                 ja      short loc_4061EB
.text:004061E0
.text:004061E0 loc_4061E0:                             ; CODE XREF: .text:004061FB↓j
.text:004061E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004061E6                 jmp     loc_4060DF
.text:004061EB ; ---------------------------------------------------------------------------
.text:004061EB
.text:004061EB loc_4061EB:                             ; CODE XREF: .text:004061DE↑j
.text:004061EB                 mov     dword ptr [esp+4], offset loc_405BFF
.text:004061F3
.text:004061F3 loc_4061F3:                             ; CODE XREF: .text:00406205↓j
.text:004061F3                 mov     [esp], ebx
.text:004061F6                 call    strcat
.text:004061FB                 jmp     short loc_4061E0
.text:004061FD ; ---------------------------------------------------------------------------
.text:004061FD
.text:004061FD loc_4061FD:                             ; CODE XREF: .text:004061D6↑j
.text:004061FD                 mov     dword ptr [esp+4], 405BFAh
.text:00406205                 jmp     short loc_4061F3
.text:00406205 ; ---------------------------------------------------------------------------
.text:00406207                 align 10h
.text:00406210                 sub     esp, 0Ch
.text:00406213                 call    sub_406320
.text:00406218                 mov     eax, ds:dword_408190
.text:0040621D                 add     esp, 0Ch
.text:00406220                 retn
.text:00406221 ; ---------------------------------------------------------------------------
.text:00406221                 jmp     short loc_406230
.text:00406221 ; ---------------------------------------------------------------------------
.text:00406223                 align 10h
.text:00406230
.text:00406230 loc_406230:                             ; CODE XREF: .text:00406221↑j
.text:00406230                 sub     esp, 0Ch
.text:00406233                 call    sub_406320
.text:00406238                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040623D                 add     esp, 0Ch
.text:00406240                 retn
.text:00406241 ; ---------------------------------------------------------------------------
.text:00406241                 jmp     short loc_406250
.text:00406241 ; ---------------------------------------------------------------------------
.text:00406243                 align 10h
.text:00406250
.text:00406250 loc_406250:                             ; CODE XREF: .text:00406241↑j
.text:00406250                 sub     esp, 0Ch
.text:00406253                 call    sub_406320
.text:00406258                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040625D                 add     esp, 0Ch
.text:00406260                 retn
.text:00406261 ; ---------------------------------------------------------------------------
.text:00406261                 jmp     short loc_406270
.text:00406261 ; ---------------------------------------------------------------------------
.text:00406263                 align 10h
.text:00406270
.text:00406270 loc_406270:                             ; CODE XREF: .text:00406261↑j
.text:00406270                 sub     esp, 0Ch
.text:00406273                 call    sub_406320
.text:00406278                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040627D                 add     esp, 0Ch
.text:00406280                 retn
.text:00406281 ; ---------------------------------------------------------------------------
.text:00406281                 jmp     short loc_406290
.text:00406281 ; ---------------------------------------------------------------------------
.text:00406283                 align 10h
.text:00406290
.text:00406290 loc_406290:                             ; CODE XREF: .text:00406281↑j
.text:00406290                 sub     esp, 0Ch
.text:00406293                 call    GetVersion
.text:00406298                 shr     eax, 10h
.text:0040629B                 add     esp, 0Ch
.text:0040629E                 retn
.text:0040629E ; ---------------------------------------------------------------------------
.text:0040629F                 align 10h
.text:004062A0                 sub     esp, 0Ch
.text:004062A3                 call    sub_406320
.text:004062A8                 xor     eax, eax
.text:004062AA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:004062B1                 setz    al
.text:004062B4                 add     esp, 0Ch
.text:004062B7                 retn
.text:004062B7 ; ---------------------------------------------------------------------------
.text:004062B8                 align 10h
.text:004062C0
.text:004062C0 ; =============== S U B R O U T I N E =======================================
.text:004062C0
.text:004062C0
.text:004062C0 sub_4062C0      proc near               ; CODE XREF: .text:loc_405560↑p
.text:004062C0                 sub     esp, 0Ch
.text:004062C3                 call    sub_406320
.text:004062C8                 xor     eax, eax
.text:004062CA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:004062D1                 setz    al
.text:004062D4                 add     esp, 0Ch
.text:004062D7                 retn
.text:004062D7 sub_4062C0      endp
.text:004062D7
.text:004062D7 ; ---------------------------------------------------------------------------
.text:004062D8                 align 10h
.text:004062E0                 sub     esp, 0Ch
.text:004062E3                 call    sub_406320
.text:004062E8                 xor     eax, eax
.text:004062EA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:004062F1                 setz    al
.text:004062F4                 add     esp, 0Ch
.text:004062F7                 retn
.text:004062F7 ; ---------------------------------------------------------------------------
.text:004062F8                 align 10h
.text:00406300                 sub     esp, 0Ch
.text:00406303                 call    sub_406320
.text:00406308                 xor     eax, eax
.text:0040630A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00406311                 setz    al
.text:00406314                 add     esp, 0Ch
.text:00406317                 retn
.text:00406317 ; ---------------------------------------------------------------------------
.text:00406318                 align 10h
.text:00406320
.text:00406320 ; =============== S U B R O U T I N E =======================================
.text:00406320
.text:00406320
.text:00406320 sub_406320      proc near               ; CODE XREF: .text:00405C20↑p
.text:00406320                                         ; .text:00406213↑p ...
.text:00406320
.text:00406320 lpVersionInformation= dword ptr -0BCh
.text:00406320 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00406320
.text:00406320                 sub     esp, 0BCh
.text:00406326                 mov     edx, ds:dword_408240
.text:0040632C                 test    edx, edx
.text:0040632E                 jz      short loc_406340
.text:00406330
.text:00406330 loc_406330:                             ; CODE XREF: sub_406320+7B↓j
.text:00406330                 mov     edx, 1
.text:00406335
.text:00406335 loc_406335:                             ; CODE XREF: sub_406320+217↓j
.text:00406335                 mov     eax, edx
.text:00406337                 add     esp, 0BCh
.text:0040633D                 retn
.text:0040633D ; ---------------------------------------------------------------------------
.text:0040633E                 align 10h
.text:00406340
.text:00406340 loc_406340:                             ; CODE XREF: sub_406320+E↑j
.text:00406340                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00406347                 mov     edx, 9Ch ; 'œ'
.text:0040634C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00406352                 call    GetVersionExA
.text:00406357                 sub     esp, 4
.text:0040635A                 test    eax, eax
.text:0040635C                 jz      loc_406514
.text:00406362
.text:00406362 loc_406362:                             ; CODE XREF: sub_406320+245↓j
.text:00406362                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00406369                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040636E                 cmp     eax, 1
.text:00406371                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00406377                 jz      loc_406460
.text:0040637D                 cmp     eax, 1
.text:00406380                 jb      loc_406450
.text:00406386                 cmp     eax, 2
.text:00406389                 jz      short loc_4063AA
.text:0040638B                 cmp     eax, 3
.text:0040638E                 jz      short loc_40639D
.text:00406390
.text:00406390 loc_406390:                             ; CODE XREF: sub_406320+88↓j
.text:00406390                                         ; sub_406320+C0↓j ...
.text:00406390                 mov     edx, 1
.text:00406395                 mov     ds:dword_408240, edx
.text:0040639B                 jmp     short loc_406330
.text:0040639D ; ---------------------------------------------------------------------------
.text:0040639D
.text:0040639D loc_40639D:                             ; CODE XREF: sub_406320+6E↑j
.text:0040639D                 mov     ecx, 17h
.text:004063A2
.text:004063A2 loc_4063A2:                             ; CODE XREF: sub_406320+1A7↓j
.text:004063A2                 mov     ds:dword_408190, ecx
.text:004063A8                 jmp     short loc_406390
.text:004063AA ; ---------------------------------------------------------------------------
.text:004063AA
.text:004063AA loc_4063AA:                             ; CODE XREF: sub_406320+69↑j
.text:004063AA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:004063AF                 cmp     eax, 3
.text:004063B2                 jz      short loc_40642B
.text:004063B4                 cmp     eax, 4
.text:004063B7                 jz      short loc_40641A
.text:004063B9
.text:004063B9 loc_4063B9:                             ; CODE XREF: sub_406320+102↓j
.text:004063B9                 cmp     eax, 4
.text:004063BC                 ja      short loc_4063E2
.text:004063BE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004063C4                 test    ecx, ecx
.text:004063C6                 jnz     short loc_4063E2
.text:004063C8                 mov     edx, 1Eh
.text:004063CD
.text:004063CD loc_4063CD:                             ; CODE XREF: sub_406320+DF↓j
.text:004063CD                 mov     ds:dword_408190, edx
.text:004063D3
.text:004063D3 loc_4063D3:                             ; CODE XREF: sub_406320+C5↓j
.text:004063D3                                         ; sub_406320+D8↓j ...
.text:004063D3                 movzx   ecx, ds:word_408234
.text:004063DA                 add     ds:dword_408190, ecx
.text:004063E0                 jmp     short loc_406390
.text:004063E2 ; ---------------------------------------------------------------------------
.text:004063E2
.text:004063E2 loc_4063E2:                             ; CODE XREF: sub_406320+9C↑j
.text:004063E2                                         ; sub_406320+A6↑j
.text:004063E2                 cmp     eax, 5
.text:004063E5                 jnz     short loc_4063D3
.text:004063E7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004063EC                 cmp     eax, 2
.text:004063EF                 jz      short loc_40640E
.text:004063F1                 cmp     eax, 1
.text:004063F4                 jz      short loc_406401
.text:004063F6                 test    eax, eax
.text:004063F8                 jnz     short loc_4063D3
.text:004063FA                 mov     edx, 32h ; '2'
.text:004063FF                 jmp     short loc_4063CD
.text:00406401 ; ---------------------------------------------------------------------------
.text:00406401
.text:00406401 loc_406401:                             ; CODE XREF: sub_406320+D4↑j
.text:00406401                 mov     ecx, 3Ch ; '<'
.text:00406406
.text:00406406 loc_406406:                             ; CODE XREF: sub_406320+122↓j
.text:00406406                 mov     ds:dword_408190, ecx
.text:0040640C                 jmp     short loc_4063D3
.text:0040640E ; ---------------------------------------------------------------------------
.text:0040640E
.text:0040640E loc_40640E:                             ; CODE XREF: sub_406320+CF↑j
.text:0040640E                 mov     eax, 46h ; 'F'
.text:00406413
.text:00406413 loc_406413:                             ; CODE XREF: sub_406320+109↓j
.text:00406413                                         ; sub_406320+129↓j
.text:00406413                 mov     ds:dword_408190, eax
.text:00406418                 jmp     short loc_4063D3
.text:0040641A ; ---------------------------------------------------------------------------
.text:0040641A
.text:0040641A loc_40641A:                             ; CODE XREF: sub_406320+97↑j
.text:0040641A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00406420                 test    ecx, ecx
.text:00406422                 jnz     short loc_4063B9
.text:00406424                 mov     eax, 28h ; '('
.text:00406429                 jmp     short loc_406413
.text:0040642B ; ---------------------------------------------------------------------------
.text:0040642B
.text:0040642B loc_40642B:                             ; CODE XREF: sub_406320+92↑j
.text:0040642B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00406430                 cmp     eax, 33h ; '3'
.text:00406433                 jz      short loc_406444
.text:00406435                 cmp     eax, 5
.text:00406438                 setz    cl
.text:0040643B                 movzx   edx, cl
.text:0040643E                 lea     ecx, [edx+edx*4+1Eh]
.text:00406442                 jmp     short loc_406406
.text:00406444 ; ---------------------------------------------------------------------------
.text:00406444
.text:00406444 loc_406444:                             ; CODE XREF: sub_406320+113↑j
.text:00406444                 mov     eax, 24h ; '$'
.text:00406449                 jmp     short loc_406413
.text:00406449 ; ---------------------------------------------------------------------------
.text:0040644B                 align 10h
.text:00406450
.text:00406450 loc_406450:                             ; CODE XREF: sub_406320+60↑j
.text:00406450                 mov     edx, 2
.text:00406455                 mov     ds:dword_408190, edx
.text:0040645B                 jmp     loc_406390
.text:00406460 ; ---------------------------------------------------------------------------
.text:00406460
.text:00406460 loc_406460:                             ; CODE XREF: sub_406320+57↑j
.text:00406460                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00406466                 cmp     ecx, 4
.text:00406469                 jnz     loc_406390
.text:0040646F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00406474                 test    eax, eax
.text:00406476                 jnz     short loc_40649A
.text:00406478                 mov     eax, 0Ah
.text:0040647D                 mov     ds:dword_408190, eax
.text:00406482                 lea     eax, [edx-3B7h]
.text:00406488                 cmp     eax, 81h
.text:0040648D                 ja      short loc_406505
.text:0040648F                 mov     edx, 0Bh
.text:00406494
.text:00406494 loc_406494:                             ; CODE XREF: sub_406320+1F2↓j
.text:00406494                 mov     ds:dword_408190, edx
.text:0040649A
.text:0040649A loc_40649A:                             ; CODE XREF: sub_406320+156↑j
.text:0040649A                                         ; sub_406320+1EB↓j
.text:0040649A                 cmp     ecx, 4
.text:0040649D                 jnz     loc_406390
.text:004064A3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:004064AA                 jz      short loc_4064CC
.text:004064AC
.text:004064AC loc_4064AC:                             ; CODE XREF: sub_406320+1D4↓j
.text:004064AC                                         ; sub_406320+1DC↓j
.text:004064AC                 cmp     ecx, 4
.text:004064AF                 jnz     loc_406390
.text:004064B5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:004064BC                 jnz     loc_406390
.text:004064C2                 mov     ecx, 12h
.text:004064C7                 jmp     loc_4063A2
.text:004064CC ; ---------------------------------------------------------------------------
.text:004064CC
.text:004064CC loc_4064CC:                             ; CODE XREF: sub_406320+18A↑j
.text:004064CC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004064D2                 mov     eax, 0Eh
.text:004064D7                 mov     ds:dword_408190, eax
.text:004064DC                 lea     eax, [edx-7CFh]
.text:004064E2                 cmp     eax, 0B7h ; '·'
.text:004064E7                 ja      short loc_4064F6
.text:004064E9                 mov     edx, 0Fh
.text:004064EE
.text:004064EE loc_4064EE:                             ; CODE XREF: sub_406320+1E3↓j
.text:004064EE                 mov     ds:dword_408190, edx
.text:004064F4                 jmp     short loc_4064AC
.text:004064F6 ; ---------------------------------------------------------------------------
.text:004064F6
.text:004064F6 loc_4064F6:                             ; CODE XREF: sub_406320+1C7↑j
.text:004064F6                 cmp     edx, 886h
.text:004064FC                 jbe     short loc_4064AC
.text:004064FE                 mov     edx, 10h
.text:00406503                 jmp     short loc_4064EE
.text:00406505 ; ---------------------------------------------------------------------------
.text:00406505
.text:00406505 loc_406505:                             ; CODE XREF: sub_406320+16D↑j
.text:00406505                 cmp     edx, 438h
.text:0040650B                 jbe     short loc_40649A
.text:0040650D                 mov     edx, 0Ch
.text:00406512                 jmp     short loc_406494
.text:00406514 ; ---------------------------------------------------------------------------
.text:00406514
.text:00406514 loc_406514:                             ; CODE XREF: sub_406320+3C↑j
.text:00406514                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040651C                 xor     edx, edx
.text:0040651E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00406522                 mov     dword_407050, edx
.text:00406528                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040652B                 call    GetVersionExA
.text:00406530                 sub     esp, 4
.text:00406533                 xor     edx, edx
.text:00406535                 test    eax, eax
.text:00406537                 jz      loc_406335
.text:0040653D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00406541                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00406545                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040654B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040654F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00406555                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00406559                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040655F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00406565                 jmp     loc_406362
.text:00406565 sub_406320      endp
.text:00406565
.text:00406565 ; ---------------------------------------------------------------------------
.text:0040656A                 align 10h
.text:00406570
.text:00406570 ; =============== S U B R O U T I N E =======================================
.text:00406570
.text:00406570
.text:00406570 ; int __cdecl sub_406570(LPCSTR lpFileName, int)
.text:00406570 sub_406570      proc near               ; CODE XREF: .text:00405162↑p
.text:00406570                                         ; sub_405670+7F↑p
.text:00406570
.text:00406570 uMode           = dword ptr -1Ch
.text:00406570 var_10          = dword ptr -10h
.text:00406570 var_C           = dword ptr -0Ch
.text:00406570 var_8           = dword ptr -8
.text:00406570 var_4           = dword ptr -4
.text:00406570 lpFileName      = dword ptr  4
.text:00406570 arg_4           = dword ptr  8
.text:00406570
.text:00406570                 sub     esp, 1Ch
.text:00406573                 mov     [esp+1Ch+var_10], ebx
.text:00406577                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040657B                 mov     [esp+1Ch+var_4], ebp
.text:0040657F                 xor     ebp, ebp
.text:00406581                 test    ebx, ebx
.text:00406583                 mov     [esp+1Ch+var_C], esi
.text:00406587                 mov     esi, [esp+1Ch+arg_4]
.text:0040658B                 mov     [esp+1Ch+var_8], edi
.text:0040658F                 jz      short loc_406599
.text:00406591                 test    esi, 0FFFFFFE8h
.text:00406597                 jz      short loc_4065C0
.text:00406599
.text:00406599 loc_406599:                             ; CODE XREF: sub_406570+1F↑j
.text:00406599                 call    _errno
.text:0040659E                 mov     dword ptr [eax], 16h
.text:004065A4
.text:004065A4 loc_4065A4:                             ; CODE XREF: sub_406570+B1↓j
.text:004065A4                 mov     eax, 0FFFFFFFFh
.text:004065A9
.text:004065A9 loc_4065A9:                             ; CODE XREF: sub_406570+86↓j
.text:004065A9                                         ; sub_406570+A4↓j
.text:004065A9                 mov     ebx, [esp+1Ch+var_10]
.text:004065AD                 mov     esi, [esp+1Ch+var_C]
.text:004065B1                 mov     edi, [esp+1Ch+var_8]
.text:004065B5                 mov     ebp, [esp+1Ch+var_4]
.text:004065B9                 add     esp, 1Ch
.text:004065BC                 retn
.text:004065BC ; ---------------------------------------------------------------------------
.text:004065BD                 align 10h
.text:004065C0
.text:004065C0 loc_4065C0:                             ; CODE XREF: sub_406570+27↑j
.text:004065C0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:004065C7                 call    SetErrorMode
.text:004065CC                 sub     esp, 4
.text:004065CF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:004065D2                 call    GetFileAttributesA
.text:004065D7                 sub     esp, 4
.text:004065DA                 mov     edi, eax
.text:004065DC                 cmp     eax, 0FFFFFFFFh
.text:004065DF                 jz      short loc_406623
.text:004065E1
.text:004065E1 loc_4065E1:                             ; CODE XREF: sub_406570+C6↓j
.text:004065E1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:004065E8                 call    SetErrorMode
.text:004065ED                 sub     esp, 4
.text:004065F0                 mov     eax, 0FFFFFFFFh
.text:004065F5                 inc     ebp
.text:004065F6                 jz      short loc_4065A9
.text:004065F8                 test    esi, 10h
.text:004065FE                 jz      short loc_406608
.text:00406600                 test    edi, 10h
.text:00406606                 jz      short loc_406616
.text:00406608
.text:00406608 loc_406608:                             ; CODE XREF: sub_406570+8E↑j
.text:00406608                 and     esi, 2
.text:0040660B                 jz      short loc_406612
.text:0040660D                 and     edi, 1
.text:00406610                 jnz     short loc_406616
.text:00406612
.text:00406612 loc_406612:                             ; CODE XREF: sub_406570+9B↑j
.text:00406612                 xor     eax, eax
.text:00406614                 jmp     short loc_4065A9
.text:00406616 ; ---------------------------------------------------------------------------
.text:00406616
.text:00406616 loc_406616:                             ; CODE XREF: sub_406570+96↑j
.text:00406616                                         ; sub_406570+A0↑j
.text:00406616                 call    _errno
.text:0040661B                 mov     dword ptr [eax], 0Dh
.text:00406621                 jmp     short loc_4065A4
.text:00406623 ; ---------------------------------------------------------------------------
.text:00406623
.text:00406623 loc_406623:                             ; CODE XREF: sub_406570+6F↑j
.text:00406623                 call    sub_405A30
.text:00406628                 mov     ebp, eax
.text:0040662A                 call    _errno
.text:0040662F                 mov     [eax], ebp
.text:00406631                 mov     ebp, 0FFFFFFFFh
.text:00406636                 jmp     short loc_4065E1
.text:00406636 sub_406570      endp
.text:00406636
.text:00406636 ; ---------------------------------------------------------------------------
.text:00406638                 align 10h
.text:00406640
.text:00406640 ; =============== S U B R O U T I N E =======================================
.text:00406640
.text:00406640 ; Attributes: thunk
.text:00406640
.text:00406640 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00406640 mbrtowc         proc near               ; CODE XREF: sub_402C80+757↑p
.text:00406640
.text:00406640 DstCh           = dword ptr  4
.text:00406640 SrcCh           = dword ptr  8
.text:00406640 SizeInBytes     = dword ptr  0Ch
.text:00406640 State           = dword ptr  10h
.text:00406640
.text:00406640                 jmp     ds:__imp_mbrtowc
.text:00406640 mbrtowc         endp
.text:00406640
.text:00406640 ; ---------------------------------------------------------------------------
.text:00406646                 align 10h
.text:00406650
.text:00406650 ; =============== S U B R O U T I N E =======================================
.text:00406650
.text:00406650 ; Attributes: bp-based frame
.text:00406650
.text:00406650 sub_406650      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00406650                 push    ebp
.text:00406651                 mov     ecx, offset dword_408000
.text:00406656                 cmp     ecx, offset dword_408000
.text:0040665C                 mov     ebp, esp
.text:0040665E                 jnb     short loc_406676
.text:00406660
.text:00406660 loc_406660:                             ; CODE XREF: sub_406650+24↓j
.text:00406660                 mov     edx, [ecx+4]
.text:00406663                 mov     eax, [ecx]
.text:00406665                 add     ecx, 8
.text:00406668                 add     [edx+400000h], eax
.text:0040666E                 cmp     ecx, offset dword_408000
.text:00406674                 jb      short loc_406660
.text:00406676
.text:00406676 loc_406676:                             ; CODE XREF: sub_406650+E↑j
.text:00406676                 pop     ebp
.text:00406677                 retn
.text:00406677 sub_406650      endp
.text:00406677
.text:00406677 ; ---------------------------------------------------------------------------
.text:00406678                 align 10h
.text:00406680
.text:00406680 ; =============== S U B R O U T I N E =======================================
.text:00406680
.text:00406680 ; Attributes: bp-based frame
.text:00406680
.text:00406680 sub_406680      proc near               ; CODE XREF: sub_401080+16↑p
.text:00406680                                         ; TopLevelExceptionFilter+D7↑p
.text:00406680                 push    ebp
.text:00406681                 mov     ebp, esp
.text:00406683                 fninit
.text:00406685                 pop     ebp
.text:00406686                 retn
.text:00406686 sub_406680      endp
.text:00406686
.text:00406686 ; ---------------------------------------------------------------------------
.text:00406687                 align 10h
.text:00406690
.text:00406690 ; =============== S U B R O U T I N E =======================================
.text:00406690
.text:00406690 ; Attributes: bp-based frame
.text:00406690
.text:00406690 ; void __cdecl sub_406690()
.text:00406690 sub_406690      proc near               ; DATA XREF: .text:loc_4066D9↓o
.text:00406690                                         ; sub_406720:loc_40674E↓o
.text:00406690                 push    ebp
.text:00406691                 mov     ebp, esp
.text:00406693                 sub     esp, 8
.text:00406696                 mov     eax, off_407094
.text:0040669B                 mov     edx, [eax]
.text:0040669D                 test    edx, edx
.text:0040669F                 jnz     short loc_4066A5
.text:004066A1
.text:004066A1 loc_4066A1:                             ; CODE XREF: sub_406690+2C↓j
.text:004066A1                 mov     esp, ebp
.text:004066A3                 pop     ebp
.text:004066A4                 retn
.text:004066A5 ; ---------------------------------------------------------------------------
.text:004066A5
.text:004066A5 loc_4066A5:                             ; CODE XREF: sub_406690+F↑j
.text:004066A5                                         ; sub_406690+2A↓j
.text:004066A5                 call    dword ptr [eax]
.text:004066A7                 mov     edx, off_407094
.text:004066AD                 mov     ecx, [edx+4]
.text:004066B0                 lea     eax, [edx+4]
.text:004066B3                 mov     off_407094, eax
.text:004066B8                 test    ecx, ecx
.text:004066BA                 jnz     short loc_4066A5
.text:004066BC                 jmp     short loc_4066A1
.text:004066BC sub_406690      endp
.text:004066BC
.text:004066BC ; ---------------------------------------------------------------------------
.text:004066BE                 align 10h
.text:004066C0                 push    ebp
.text:004066C1                 mov     ebp, esp
.text:004066C3                 sub     esp, 8
.text:004066C6                 mov     [ebp-4], ebx
.text:004066C9                 mov     eax, ds:dword_406BA0
.text:004066CE                 cmp     eax, 0FFFFFFFFh
.text:004066D1                 jz      short loc_4066FC
.text:004066D3
.text:004066D3 loc_4066D3:                             ; CODE XREF: .text:00406706↓j
.text:004066D3                                         ; .text:00406719↓j
.text:004066D3                 test    eax, eax
.text:004066D5                 mov     ebx, eax
.text:004066D7                 jnz     short loc_4066F0
.text:004066D9
.text:004066D9 loc_4066D9:                             ; CODE XREF: .text:004066FA↓j
.text:004066D9                 mov     dword ptr [esp], offset sub_406690
.text:004066E0                 call    sub_401040
.text:004066E5                 mov     ebx, [ebp-4]
.text:004066E8                 mov     esp, ebp
.text:004066EA                 pop     ebp
.text:004066EB                 retn
.text:004066EB ; ---------------------------------------------------------------------------
.text:004066EC                 align 10h
.text:004066F0
.text:004066F0 loc_4066F0:                             ; CODE XREF: .text:004066D7↑j
.text:004066F0                                         ; .text:004066F8↓j
.text:004066F0                 call    ds:dword_406BA0[ebx*4]
.text:004066F7                 dec     ebx
.text:004066F8                 jnz     short loc_4066F0
.text:004066FA                 jmp     short loc_4066D9
.text:004066FC ; ---------------------------------------------------------------------------
.text:004066FC
.text:004066FC loc_4066FC:                             ; CODE XREF: .text:004066D1↑j
.text:004066FC                 mov     ecx, ds:dword_406BA4
.text:00406702                 xor     eax, eax
.text:00406704                 test    ecx, ecx
.text:00406706                 jz      short loc_4066D3
.text:00406708                 mov     edx, offset dword_406BA0
.text:0040670D                 lea     esi, [esi+0]
.text:00406710
.text:00406710 loc_406710:                             ; CODE XREF: .text:00406717↓j
.text:00406710                 inc     eax
.text:00406711                 mov     ecx, [edx+eax*4+4]
.text:00406715                 test    ecx, ecx
.text:00406717                 jnz     short loc_406710
.text:00406719                 jmp     short loc_4066D3
.text:00406719 ; ---------------------------------------------------------------------------
.text:0040671B                 align 10h
.text:00406720
.text:00406720 ; =============== S U B R O U T I N E =======================================
.text:00406720
.text:00406720 ; Attributes: bp-based frame
.text:00406720
.text:00406720 sub_406720      proc near               ; CODE XREF: sub_401390+19↑p
.text:00406720
.text:00406720 var_8           = dword ptr -8
.text:00406720 var_4           = dword ptr -4
.text:00406720
.text:00406720                 push    ebp
.text:00406721                 mov     ebp, esp
.text:00406723                 sub     esp, 8
.text:00406726                 mov     [ebp+var_4], ebx
.text:00406729                 mov     edx, dword_407090
.text:0040672F                 test    edx, edx
.text:00406731                 jnz     short loc_40675A
.text:00406733                 mov     eax, ds:dword_406BA0
.text:00406738                 mov     edx, 1
.text:0040673D                 mov     dword_407090, edx
.text:00406743                 cmp     eax, 0FFFFFFFFh
.text:00406746                 jz      short loc_40676D
.text:00406748
.text:00406748 loc_406748:                             ; CODE XREF: sub_406720+57↓j
.text:00406748                                         ; sub_406720+69↓j
.text:00406748                 test    eax, eax
.text:0040674A                 mov     ebx, eax
.text:0040674C                 jnz     short loc_406761
.text:0040674E
.text:0040674E loc_40674E:                             ; CODE XREF: sub_406720+4B↓j
.text:0040674E                 mov     [esp+8+var_8], offset sub_406690 ; void (__cdecl *)()
.text:00406755                 call    sub_401040
.text:0040675A
.text:0040675A loc_40675A:                             ; CODE XREF: sub_406720+11↑j
.text:0040675A                 mov     ebx, [ebp+var_4]
.text:0040675D                 mov     esp, ebp
.text:0040675F                 pop     ebp
.text:00406760                 retn
.text:00406761 ; ---------------------------------------------------------------------------
.text:00406761
.text:00406761 loc_406761:                             ; CODE XREF: sub_406720+2C↑j
.text:00406761                                         ; sub_406720+49↓j
.text:00406761                 call    ds:dword_406BA0[ebx*4]
.text:00406768                 dec     ebx
.text:00406769                 jnz     short loc_406761
.text:0040676B                 jmp     short loc_40674E
.text:0040676D ; ---------------------------------------------------------------------------
.text:0040676D
.text:0040676D loc_40676D:                             ; CODE XREF: sub_406720+26↑j
.text:0040676D                 mov     ecx, ds:dword_406BA4
.text:00406773                 xor     eax, eax
.text:00406775                 test    ecx, ecx
.text:00406777                 jz      short loc_406748
.text:00406779                 mov     edx, offset dword_406BA0
.text:0040677E                 mov     esi, esi
.text:00406780
.text:00406780 loc_406780:                             ; CODE XREF: sub_406720+67↓j
.text:00406780                 inc     eax
.text:00406781                 mov     ebx, [edx+eax*4+4]
.text:00406785                 test    ebx, ebx
.text:00406787                 jnz     short loc_406780
.text:00406789                 jmp     short loc_406748
.text:00406789 sub_406720      endp
.text:00406789
.text:00406789 ; ---------------------------------------------------------------------------
.text:0040678B                 align 10h
.text:00406790
.text:00406790 ; =============== S U B R O U T I N E =======================================
.text:00406790
.text:00406790 ; Attributes: info_from_lumina
.text:00406790
.text:00406790 ; void *__cdecl _alloca(size_t Size)
.text:00406790 __alloca        proc near               ; CODE XREF: sub_401390+14↑p
.text:00406790                 push    ecx
.text:00406791                 mov     ecx, esp
.text:00406793                 add     ecx, 8
.text:00406796
.text:00406796 loc_406796:                             ; CODE XREF: __alloca+1B↓j
.text:00406796                 cmp     eax, 1000h
.text:0040679B                 jb      short loc_4067AD
.text:0040679D                 sub     ecx, 1000h
.text:004067A3                 or      dword ptr [ecx], 0
.text:004067A6                 sub     eax, 1000h
.text:004067AB                 jmp     short loc_406796
.text:004067AD ; ---------------------------------------------------------------------------
.text:004067AD
.text:004067AD loc_4067AD:                             ; CODE XREF: __alloca+B↑j
.text:004067AD                 sub     ecx, eax
.text:004067AF                 or      dword ptr [ecx], 0
.text:004067B2                 mov     eax, esp
.text:004067B4                 mov     esp, ecx
.text:004067B6                 mov     ecx, [eax]
.text:004067B8                 mov     eax, [eax+4]
.text:004067BB                 jmp     eax
.text:004067BB __alloca        endp
.text:004067BB
.text:004067BB ; ---------------------------------------------------------------------------
.text:004067BD                 align 10h
.text:004067C0                 jmp     ds:__set_app_type
.text:004067C0 ; ---------------------------------------------------------------------------
.text:004067C6                 align 10h
.text:004067D0
.text:004067D0 ; =============== S U B R O U T I N E =======================================
.text:004067D0
.text:004067D0 ; Attributes: thunk
.text:004067D0
.text:004067D0 ; void __cdecl cexit()
.text:004067D0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004067D0                 jmp     ds:__imp__cexit
.text:004067D0 _cexit          endp
.text:004067D0
.text:004067D0 ; ---------------------------------------------------------------------------
.text:004067D6                 align 10h
.text:004067E0
.text:004067E0 ; =============== S U B R O U T I N E =======================================
.text:004067E0
.text:004067E0 ; Attributes: thunk
.text:004067E0
.text:004067E0 ; char ***__cdecl _p__environ()
.text:004067E0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004067E0                 jmp     ds:__imp___p__environ
.text:004067E0 __p__environ    endp
.text:004067E0
.text:004067E0 ; ---------------------------------------------------------------------------
.text:004067E6                 align 10h
.text:004067F0
.text:004067F0 ; =============== S U B R O U T I N E =======================================
.text:004067F0
.text:004067F0 ; Attributes: thunk
.text:004067F0
.text:004067F0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004067F0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004067F0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004067F0
.text:004067F0 Signal          = dword ptr  4
.text:004067F0 Function        = dword ptr  8
.text:004067F0
.text:004067F0                 jmp     ds:__imp_signal
.text:004067F0 signal          endp
.text:004067F0
.text:004067F0 ; ---------------------------------------------------------------------------
.text:004067F6                 align 10h
.text:00406800
.text:00406800 ; =============== S U B R O U T I N E =======================================
.text:00406800
.text:00406800 ; Attributes: thunk
.text:00406800
.text:00406800 ; int *__cdecl _p__fmode()
.text:00406800 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00406800                 jmp     ds:__imp___p__fmode
.text:00406800 __p__fmode      endp
.text:00406800
.text:00406800 ; ---------------------------------------------------------------------------
.text:00406806                 align 10h
.text:00406810
.text:00406810 ; =============== S U B R O U T I N E =======================================
.text:00406810
.text:00406810 ; Attributes: thunk
.text:00406810
.text:00406810 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00406810 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00406810                                         ; sub_401080+90↑p ...
.text:00406810
.text:00406810 FileHandle      = dword ptr  4
.text:00406810 Mode            = dword ptr  8
.text:00406810
.text:00406810                 jmp     ds:__imp__setmode
.text:00406810 _setmode        endp
.text:00406810
.text:00406810 ; ---------------------------------------------------------------------------
.text:00406816                 align 10h
.text:00406820
.text:00406820 ; =============== S U B R O U T I N E =======================================
.text:00406820
.text:00406820 ; Attributes: thunk
.text:00406820
.text:00406820 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00406820                 jmp     ds:__imp___getmainargs
.text:00406820 __getmainargs   endp
.text:00406820
.text:00406820 ; ---------------------------------------------------------------------------
.text:00406826                 align 10h
.text:00406830
.text:00406830 ; =============== S U B R O U T I N E =======================================
.text:00406830
.text:00406830 ; Attributes: thunk
.text:00406830
.text:00406830 ; int *__cdecl errno()
.text:00406830 _errno          proc near               ; CODE XREF: sub_401390+1B5↑p
.text:00406830                                         ; sub_402B10:loc_402B4D↑p ...
.text:00406830                 jmp     ds:__imp__errno
.text:00406830 _errno          endp
.text:00406830
.text:00406830 ; ---------------------------------------------------------------------------
.text:00406836                 align 10h
.text:00406840
.text:00406840 ; =============== S U B R O U T I N E =======================================
.text:00406840
.text:00406840 ; Attributes: thunk
.text:00406840
.text:00406840 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00406840 setlocale       proc near               ; CODE XREF: sub_401390+35↑p
.text:00406840
.text:00406840 Category        = dword ptr  4
.text:00406840 Locale          = dword ptr  8
.text:00406840
.text:00406840                 jmp     ds:__imp_setlocale
.text:00406840 setlocale       endp
.text:00406840
.text:00406840 ; ---------------------------------------------------------------------------
.text:00406846                 align 10h
.text:00406850
.text:00406850 ; =============== S U B R O U T I N E =======================================
.text:00406850
.text:00406850 ; Attributes: noreturn thunk
.text:00406850
.text:00406850 ; void __cdecl __noreturn exit(int Code)
.text:00406850 exit            proc near               ; CODE XREF: sub_401390:loc_4014DA↑p
.text:00406850                                         ; sub_401710+3E↑p ...
.text:00406850
.text:00406850 Code            = dword ptr  4
.text:00406850
.text:00406850                 jmp     ds:__imp_exit
.text:00406850 exit            endp
.text:00406850
.text:00406850 ; ---------------------------------------------------------------------------
.text:00406856                 align 10h
.text:00406860
.text:00406860 ; =============== S U B R O U T I N E =======================================
.text:00406860
.text:00406860 ; Attributes: thunk
.text:00406860
.text:00406860 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00406860 fputs           proc near               ; CODE XREF: sub_401710+83↑p
.text:00406860                                         ; sub_401710+A5↑p ...
.text:00406860
.text:00406860 Buffer          = dword ptr  4
.text:00406860 Stream          = dword ptr  8
.text:00406860
.text:00406860                 jmp     ds:__imp_fputs
.text:00406860 fputs           endp
.text:00406860
.text:00406860 ; ---------------------------------------------------------------------------
.text:00406866                 align 10h
.text:00406870
.text:00406870 ; =============== S U B R O U T I N E =======================================
.text:00406870
.text:00406870 ; Attributes: thunk
.text:00406870
.text:00406870 ; int printf(const char *const Format, ...)
.text:00406870 printf          proc near               ; CODE XREF: sub_401710+61↑p
.text:00406870                                         ; sub_401710+E4↑p ...
.text:00406870
.text:00406870 Format          = dword ptr  4
.text:00406870
.text:00406870                 jmp     ds:__imp_printf
.text:00406870 printf          endp
.text:00406870
.text:00406870 ; ---------------------------------------------------------------------------
.text:00406876                 align 10h
.text:00406880
.text:00406880 ; =============== S U B R O U T I N E =======================================
.text:00406880
.text:00406880 ; Attributes: thunk
.text:00406880
.text:00406880 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00406880 fprintf         proc near               ; CODE XREF: sub_401390+13E↑p
.text:00406880                                         ; sub_401710+36↑p ...
.text:00406880
.text:00406880 Stream          = dword ptr  4
.text:00406880 Format          = dword ptr  8
.text:00406880
.text:00406880                 jmp     ds:__imp_fprintf
.text:00406880 fprintf         endp
.text:00406880
.text:00406880 ; ---------------------------------------------------------------------------
.text:00406886                 align 10h
.text:00406890
.text:00406890 ; =============== S U B R O U T I N E =======================================
.text:00406890
.text:00406890 ; Attributes: thunk
.text:00406890
.text:00406890 ; size_t __cdecl strlen(const char *Str)
.text:00406890 strlen          proc near               ; CODE XREF: sub_401A50+2A9↑p
.text:00406890                                         ; sub_401A50+346↑p ...
.text:00406890
.text:00406890 Str             = dword ptr  4
.text:00406890
.text:00406890                 jmp     ds:__imp_strlen
.text:00406890 strlen          endp
.text:00406890
.text:00406890 ; ---------------------------------------------------------------------------
.text:00406896                 align 10h
.text:004068A0
.text:004068A0 ; =============== S U B R O U T I N E =======================================
.text:004068A0
.text:004068A0 ; Attributes: thunk
.text:004068A0
.text:004068A0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004068A0 strncmp         proc near               ; CODE XREF: sub_401A50+23F↑p
.text:004068A0                                         ; sub_401A50+699↑p
.text:004068A0
.text:004068A0 Str1            = dword ptr  4
.text:004068A0 Str2            = dword ptr  8
.text:004068A0 MaxCount        = dword ptr  0Ch
.text:004068A0
.text:004068A0                 jmp     ds:__imp_strncmp
.text:004068A0 strncmp         endp
.text:004068A0
.text:004068A0 ; ---------------------------------------------------------------------------
.text:004068A6                 align 10h
.text:004068B0
.text:004068B0 ; =============== S U B R O U T I N E =======================================
.text:004068B0
.text:004068B0 ; Attributes: thunk
.text:004068B0
.text:004068B0 ; char *__cdecl getenv(const char *VarName)
.text:004068B0 getenv          proc near               ; CODE XREF: sub_401A50+B57↑p
.text:004068B0
.text:004068B0 VarName         = dword ptr  4
.text:004068B0
.text:004068B0                 jmp     ds:__imp_getenv
.text:004068B0 getenv          endp
.text:004068B0
.text:004068B0 ; ---------------------------------------------------------------------------
.text:004068B6                 align 10h
.text:004068C0
.text:004068C0 ; =============== S U B R O U T I N E =======================================
.text:004068C0
.text:004068C0 ; Attributes: thunk
.text:004068C0
.text:004068C0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004068C0 strchr          proc near               ; CODE XREF: sub_401A50+469↑p
.text:004068C0                                         ; sub_401A50+53A↑p ...
.text:004068C0
.text:004068C0 Str             = dword ptr  4
.text:004068C0 Val             = dword ptr  8
.text:004068C0
.text:004068C0                 jmp     ds:__imp_strchr
.text:004068C0 strchr          endp
.text:004068C0
.text:004068C0 ; ---------------------------------------------------------------------------
.text:004068C6                 align 10h
.text:004068D0
.text:004068D0 ; =============== S U B R O U T I N E =======================================
.text:004068D0
.text:004068D0 ; Attributes: thunk
.text:004068D0
.text:004068D0 ; int __cdecl fclose(FILE *Stream)
.text:004068D0 fclose          proc near               ; CODE XREF: sub_402B10+27↑p
.text:004068D0
.text:004068D0 Stream          = dword ptr  4
.text:004068D0
.text:004068D0                 jmp     ds:__imp_fclose
.text:004068D0 fclose          endp
.text:004068D0
.text:004068D0 ; ---------------------------------------------------------------------------
.text:004068D6                 align 10h
.text:004068E0
.text:004068E0 ; =============== S U B R O U T I N E =======================================
.text:004068E0
.text:004068E0 ; Attributes: thunk
.text:004068E0
.text:004068E0 ; void __cdecl free(void *Block)
.text:004068E0 free            proc near               ; CODE XREF: sub_403DC0+112↑p
.text:004068E0                                         ; .text:004054B1↑p ...
.text:004068E0
.text:004068E0 Block           = dword ptr  4
.text:004068E0
.text:004068E0                 jmp     ds:__imp_free
.text:004068E0 free            endp
.text:004068E0
.text:004068E0 ; ---------------------------------------------------------------------------
.text:004068E6                 align 10h
.text:004068F0
.text:004068F0 ; =============== S U B R O U T I N E =======================================
.text:004068F0
.text:004068F0 ; Attributes: noreturn thunk
.text:004068F0
.text:004068F0 ; void __cdecl __noreturn abort()
.text:004068F0 abort           proc near               ; CODE XREF: sub_403DC0:loc_403F7A↑p
.text:004068F0                                         ; sub_404280:loc_40431C↑p ...
.text:004068F0                 jmp     ds:__imp_abort
.text:004068F0 abort           endp
.text:004068F0
.text:004068F0 ; ---------------------------------------------------------------------------
.text:004068F6                 align 10h
.text:00406900
.text:00406900 ; =============== S U B R O U T I N E =======================================
.text:00406900
.text:00406900 ; Attributes: thunk
.text:00406900
.text:00406900 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00406900 iswctype        proc near               ; CODE XREF: sub_402C80+78B↑p
.text:00406900
.text:00406900 C               = word ptr  4
.text:00406900 Type            = word ptr  8
.text:00406900
.text:00406900                 jmp     ds:__imp_iswctype
.text:00406900 iswctype        endp
.text:00406900
.text:00406900 ; ---------------------------------------------------------------------------
.text:00406906                 align 10h
.text:00406910
.text:00406910 ; =============== S U B R O U T I N E =======================================
.text:00406910
.text:00406910 ; Attributes: thunk
.text:00406910
.text:00406910 ; int __cdecl isctype(int C, int Type)
.text:00406910 _isctype        proc near               ; CODE XREF: sub_402C80+610↑p
.text:00406910
.text:00406910 C               = dword ptr  4
.text:00406910 Type            = dword ptr  8
.text:00406910
.text:00406910                 jmp     ds:__imp__isctype
.text:00406910 _isctype        endp
.text:00406910
.text:00406910 ; ---------------------------------------------------------------------------
.text:00406916                 align 10h
.text:00406920
.text:00406920 ; =============== S U B R O U T I N E =======================================
.text:00406920
.text:00406920 ; Attributes: thunk
.text:00406920
.text:00406920 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00406920 vfprintf        proc near               ; CODE XREF: sub_404280+C1↑p
.text:00406920                                         ; sub_404810+49↑p ...
.text:00406920
.text:00406920 Stream          = dword ptr  4
.text:00406920 Format          = dword ptr  8
.text:00406920 ArgList         = dword ptr  0Ch
.text:00406920
.text:00406920                 jmp     ds:__imp_vfprintf
.text:00406920 vfprintf        endp
.text:00406920
.text:00406920 ; ---------------------------------------------------------------------------
.text:00406926                 align 10h
.text:00406930
.text:00406930 ; =============== S U B R O U T I N E =======================================
.text:00406930
.text:00406930 ; Attributes: thunk
.text:00406930
.text:00406930 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00406930 _flsbuf         proc near               ; CODE XREF: sub_404280+128↑p
.text:00406930                                         ; sub_404280+13A↑p ...
.text:00406930
.text:00406930 File            = dword ptr  8
.text:00406930
.text:00406930                 jmp     ds:__imp__flsbuf
.text:00406930 _flsbuf         endp
.text:00406930
.text:00406930 ; ---------------------------------------------------------------------------
.text:00406936                 align 10h
.text:00406940
.text:00406940 ; =============== S U B R O U T I N E =======================================
.text:00406940
.text:00406940 ; Attributes: thunk
.text:00406940
.text:00406940 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00406940 memcpy          proc near               ; CODE XREF: .text:00404678↑p
.text:00406940                                         ; .text:004046C1↑p
.text:00406940
.text:00406940 Src             = dword ptr  8
.text:00406940 Size            = dword ptr  0Ch
.text:00406940
.text:00406940                 jmp     ds:__imp_memcpy
.text:00406940 memcpy          endp
.text:00406940
.text:00406940 ; ---------------------------------------------------------------------------
.text:00406946                 align 10h
.text:00406950
.text:00406950 ; =============== S U B R O U T I N E =======================================
.text:00406950
.text:00406950 ; Attributes: thunk
.text:00406950
.text:00406950 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00406950 memset          proc near               ; CODE XREF: .text:004045F6↑p
.text:00406950
.text:00406950 Val             = dword ptr  8
.text:00406950 Size            = dword ptr  0Ch
.text:00406950
.text:00406950                 jmp     ds:__imp_memset
.text:00406950 memset          endp
.text:00406950
.text:00406950 ; ---------------------------------------------------------------------------
.text:00406956                 align 10h
.text:00406960
.text:00406960 ; =============== S U B R O U T I N E =======================================
.text:00406960
.text:00406960 ; Attributes: thunk
.text:00406960
.text:00406960 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00406960 calloc          proc near               ; CODE XREF: .text:00404633↑p
.text:00406960
.text:00406960 Count           = dword ptr  4
.text:00406960 Size            = dword ptr  8
.text:00406960
.text:00406960                 jmp     ds:__imp_calloc
.text:00406960 calloc          endp
.text:00406960
.text:00406960 ; ---------------------------------------------------------------------------
.text:00406966                 align 10h
.text:00406970
.text:00406970 ; =============== S U B R O U T I N E =======================================
.text:00406970
.text:00406970 ; Attributes: thunk
.text:00406970
.text:00406970 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00406970 realloc         proc near               ; CODE XREF: .text:00404530↑p
.text:00406970                                         ; sub_404560+16↑p ...
.text:00406970
.text:00406970 Block           = dword ptr  4
.text:00406970 Size            = dword ptr  8
.text:00406970
.text:00406970                 jmp     ds:__imp_realloc
.text:00406970 realloc         endp
.text:00406970
.text:00406970 ; ---------------------------------------------------------------------------
.text:00406976                 align 10h
.text:00406980
.text:00406980 ; =============== S U B R O U T I N E =======================================
.text:00406980
.text:00406980 ; Attributes: thunk
.text:00406980
.text:00406980 ; void *__cdecl malloc(size_t Size)
.text:00406980 malloc          proc near               ; CODE XREF: .text:004044B4↑p
.text:00406980                                         ; sub_4044D0+E↑p ...
.text:00406980
.text:00406980 Size            = dword ptr  4
.text:00406980
.text:00406980                 jmp     ds:__imp_malloc
.text:00406980 malloc          endp
.text:00406980
.text:00406980 ; ---------------------------------------------------------------------------
.text:00406986                 align 10h
.text:00406990
.text:00406990 ; =============== S U B R O U T I N E =======================================
.text:00406990
.text:00406990 ; Attributes: thunk
.text:00406990
.text:00406990 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00406990 strcmp          proc near               ; CODE XREF: sub_404914+180↑p
.text:00406990
.text:00406990 Str1            = dword ptr  4
.text:00406990 Str2            = dword ptr  8
.text:00406990
.text:00406990                 jmp     ds:__imp_strcmp
.text:00406990 strcmp          endp
.text:00406990
.text:00406990 ; ---------------------------------------------------------------------------
.text:00406996                 align 10h
.text:004069A0
.text:004069A0 ; =============== S U B R O U T I N E =======================================
.text:004069A0
.text:004069A0 ; Attributes: thunk
.text:004069A0
.text:004069A0 ; int __cdecl fflush(FILE *Stream)
.text:004069A0 fflush          proc near               ; CODE XREF: sub_404810+19↑p
.text:004069A0                                         ; sub_404810+81↑p ...
.text:004069A0
.text:004069A0 Stream          = dword ptr  4
.text:004069A0
.text:004069A0                 jmp     ds:__imp_fflush
.text:004069A0 fflush          endp
.text:004069A0
.text:004069A0 ; ---------------------------------------------------------------------------
.text:004069A6                 align 10h
.text:004069B0
.text:004069B0 ; =============== S U B R O U T I N E =======================================
.text:004069B0
.text:004069B0 ; Attributes: thunk
.text:004069B0
.text:004069B0 ; char *__cdecl strerror(int ErrorMessage)
.text:004069B0 strerror        proc near               ; CODE XREF: sub_404810+A5↑p
.text:004069B0                                         ; sub_404914+10F↑p
.text:004069B0
.text:004069B0 ErrorMessage    = dword ptr  4
.text:004069B0
.text:004069B0                 jmp     ds:__imp_strerror
.text:004069B0 strerror        endp
.text:004069B0
.text:004069B0 ; ---------------------------------------------------------------------------
.text:004069B6                 align 10h
.text:004069C0
.text:004069C0 ; =============== S U B R O U T I N E =======================================
.text:004069C0
.text:004069C0 ; Attributes: thunk
.text:004069C0
.text:004069C0 ; size_t __cdecl mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount)
.text:004069C0 mbstowcs        proc near               ; CODE XREF: sub_404AB0+90↑p
.text:004069C0
.text:004069C0 Dest            = dword ptr  4
.text:004069C0 Source          = dword ptr  8
.text:004069C0 MaxCount        = dword ptr  0Ch
.text:004069C0
.text:004069C0                 jmp     ds:__imp_mbstowcs
.text:004069C0 mbstowcs        endp
.text:004069C0
.text:004069C0 ; ---------------------------------------------------------------------------
.text:004069C6                 align 10h
.text:004069D0
.text:004069D0 ; =============== S U B R O U T I N E =======================================
.text:004069D0
.text:004069D0 ; Attributes: thunk
.text:004069D0
.text:004069D0 ; int __cdecl isalpha(int C)
.text:004069D0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:004069D0
.text:004069D0 C               = dword ptr  4
.text:004069D0
.text:004069D0                 jmp     ds:__imp_isalpha
.text:004069D0 isalpha         endp
.text:004069D0
.text:004069D0 ; ---------------------------------------------------------------------------
.text:004069D6                 align 10h
.text:004069E0
.text:004069E0 ; =============== S U B R O U T I N E =======================================
.text:004069E0
.text:004069E0 ; Attributes: thunk
.text:004069E0
.text:004069E0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004069E0 strcpy          proc near               ; CODE XREF: _win32_longpath+13C↑p
.text:004069E0                                         ; _win32_longpath+16B↑p ...
.text:004069E0
.text:004069E0 Destination     = dword ptr  4
.text:004069E0 Source          = dword ptr  8
.text:004069E0
.text:004069E0                 jmp     ds:__imp_strcpy
.text:004069E0 strcpy          endp
.text:004069E0
.text:004069E0 ; ---------------------------------------------------------------------------
.text:004069E6                 align 10h
.text:004069F0
.text:004069F0 ; =============== S U B R O U T I N E =======================================
.text:004069F0
.text:004069F0 ; Attributes: thunk
.text:004069F0
.text:004069F0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004069F0 strrchr         proc near               ; CODE XREF: .text:004053BE↑p
.text:004069F0                                         ; .text:004053FE↑p ...
.text:004069F0
.text:004069F0 Str             = dword ptr  4
.text:004069F0
.text:004069F0                 jmp     ds:__imp_strrchr
.text:004069F0 strrchr         endp
.text:004069F0
.text:004069F0 ; ---------------------------------------------------------------------------
.text:004069F6                 align 10h
.text:00406A00
.text:00406A00 ; =============== S U B R O U T I N E =======================================
.text:00406A00
.text:00406A00 ; Attributes: thunk
.text:00406A00
.text:00406A00 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00406A00 _stricmp        proc near               ; CODE XREF: .text:004054A4↑p
.text:00406A00
.text:00406A00 String1         = dword ptr  4
.text:00406A00 String2         = dword ptr  8
.text:00406A00
.text:00406A00                 jmp     ds:__imp__stricmp
.text:00406A00 _stricmp        endp
.text:00406A00
.text:00406A00 ; ---------------------------------------------------------------------------
.text:00406A06                 align 10h
.text:00406A10
.text:00406A10 ; =============== S U B R O U T I N E =======================================
.text:00406A10
.text:00406A10 ; Attributes: thunk
.text:00406A10
.text:00406A10 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00406A10 sprintf         proc near               ; CODE XREF: .text:00405C7A↑p
.text:00406A10                                         ; .text:00405C9B↑p
.text:00406A10
.text:00406A10 Buffer          = dword ptr  4
.text:00406A10 Format          = dword ptr  8
.text:00406A10
.text:00406A10                 jmp     ds:__imp_sprintf
.text:00406A10 sprintf         endp
.text:00406A10
.text:00406A10 ; ---------------------------------------------------------------------------
.text:00406A16                 align 10h
.text:00406A20
.text:00406A20 ; =============== S U B R O U T I N E =======================================
.text:00406A20
.text:00406A20 ; Attributes: thunk
.text:00406A20
.text:00406A20 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00406A20 strcat          proc near               ; CODE XREF: .text:00405D73↑p
.text:00406A20                                         ; .text:00405D83↑p ...
.text:00406A20
.text:00406A20 Destination     = dword ptr  4
.text:00406A20 Source          = dword ptr  8
.text:00406A20
.text:00406A20                 jmp     ds:__imp_strcat
.text:00406A20 strcat          endp
.text:00406A20
.text:00406A20 ; ---------------------------------------------------------------------------
.text:00406A26                 align 10h
.text:00406A30
.text:00406A30 ; =============== S U B R O U T I N E =======================================
.text:00406A30
.text:00406A30 ; Attributes: thunk
.text:00406A30
.text:00406A30 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00406A30 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00406A30
.text:00406A30 lpTopLevelExceptionFilter= dword ptr  4
.text:00406A30
.text:00406A30                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00406A30 SetUnhandledExceptionFilter endp
.text:00406A30
.text:00406A30 ; ---------------------------------------------------------------------------
.text:00406A36                 align 10h
.text:00406A40
.text:00406A40 ; =============== S U B R O U T I N E =======================================
.text:00406A40
.text:00406A40 ; Attributes: noreturn thunk
.text:00406A40
.text:00406A40 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00406A40 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00406A40
.text:00406A40 uExitCode       = dword ptr  4
.text:00406A40
.text:00406A40                 jmp     ds:__imp_ExitProcess
.text:00406A40 ExitProcess     endp
.text:00406A40
.text:00406A40 ; ---------------------------------------------------------------------------
.text:00406A46                 align 10h
.text:00406A50
.text:00406A50 ; =============== S U B R O U T I N E =======================================
.text:00406A50
.text:00406A50 ; Attributes: thunk
.text:00406A50
.text:00406A50 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00406A50 CreateFileA     proc near               ; CODE XREF: sub_404AB0+4C↑p
.text:00406A50
.text:00406A50 lpFileName      = dword ptr  4
.text:00406A50 dwDesiredAccess = dword ptr  8
.text:00406A50 dwShareMode     = dword ptr  0Ch
.text:00406A50 lpSecurityAttributes= dword ptr  10h
.text:00406A50 dwCreationDisposition= dword ptr  14h
.text:00406A50 dwFlagsAndAttributes= dword ptr  18h
.text:00406A50 hTemplateFile   = dword ptr  1Ch
.text:00406A50
.text:00406A50                 jmp     ds:__imp_CreateFileA
.text:00406A50 CreateFileA     endp
.text:00406A50
.text:00406A50 ; ---------------------------------------------------------------------------
.text:00406A56                 align 10h
.text:00406A60
.text:00406A60 ; =============== S U B R O U T I N E =======================================
.text:00406A60
.text:00406A60 ; Attributes: thunk
.text:00406A60
.text:00406A60 ; BOOL __stdcall BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.text:00406A60 BackupWrite     proc near               ; CODE XREF: sub_404AB0+F8↑p
.text:00406A60                                         ; sub_404AB0+13A↑p ...
.text:00406A60
.text:00406A60 hFile           = dword ptr  4
.text:00406A60 lpBuffer        = dword ptr  8
.text:00406A60 nNumberOfBytesToWrite= dword ptr  0Ch
.text:00406A60 lpNumberOfBytesWritten= dword ptr  10h
.text:00406A60 bAbort          = dword ptr  14h
.text:00406A60 bProcessSecurity= dword ptr  18h
.text:00406A60 lpContext       = dword ptr  1Ch
.text:00406A60
.text:00406A60                 jmp     ds:__imp_BackupWrite
.text:00406A60 BackupWrite     endp
.text:00406A60
.text:00406A60 ; ---------------------------------------------------------------------------
.text:00406A66                 align 10h
.text:00406A70
.text:00406A70 ; =============== S U B R O U T I N E =======================================
.text:00406A70
.text:00406A70 ; Attributes: thunk
.text:00406A70
.text:00406A70 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00406A70 CloseHandle     proc near               ; CODE XREF: sub_404AB0+182↑p
.text:00406A70                                         ; sub_404AB0:loc_404C4A↑p
.text:00406A70
.text:00406A70 hObject         = dword ptr  4
.text:00406A70
.text:00406A70                 jmp     ds:__imp_CloseHandle
.text:00406A70 CloseHandle     endp
.text:00406A70
.text:00406A70 ; ---------------------------------------------------------------------------
.text:00406A76                 align 10h
.text:00406A80
.text:00406A80 ; =============== S U B R O U T I N E =======================================
.text:00406A80
.text:00406A80 ; Attributes: thunk
.text:00406A80
.text:00406A80 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00406A80 LoadLibraryA    proc near               ; CODE XREF: sub_404C90+33↑p
.text:00406A80
.text:00406A80 lpLibFileName   = dword ptr  4
.text:00406A80
.text:00406A80                 jmp     ds:__imp_LoadLibraryA
.text:00406A80 LoadLibraryA    endp
.text:00406A80
.text:00406A80 ; ---------------------------------------------------------------------------
.text:00406A86                 align 10h
.text:00406A90
.text:00406A90 ; =============== S U B R O U T I N E =======================================
.text:00406A90
.text:00406A90 ; Attributes: thunk
.text:00406A90
.text:00406A90 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00406A90 GetProcAddress  proc near               ; CODE XREF: sub_404C90+4C↑p
.text:00406A90                                         ; .text:00405521↑p
.text:00406A90
.text:00406A90 hModule         = dword ptr  4
.text:00406A90 lpProcName      = dword ptr  8
.text:00406A90
.text:00406A90                 jmp     ds:__imp_GetProcAddress
.text:00406A90 GetProcAddress  endp
.text:00406A90
.text:00406A90 ; ---------------------------------------------------------------------------
.text:00406A96                 align 10h
.text:00406AA0
.text:00406AA0 ; =============== S U B R O U T I N E =======================================
.text:00406AA0
.text:00406AA0 ; Attributes: thunk
.text:00406AA0
.text:00406AA0 ; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.text:00406AA0 CopyFileA       proc near               ; CODE XREF: sub_404C90+C2↑p
.text:00406AA0
.text:00406AA0 lpExistingFileName= dword ptr  4
.text:00406AA0 lpNewFileName   = dword ptr  8
.text:00406AA0 bFailIfExists   = dword ptr  0Ch
.text:00406AA0
.text:00406AA0                 jmp     ds:__imp_CopyFileA
.text:00406AA0 CopyFileA       endp
.text:00406AA0
.text:00406AA0 ; ---------------------------------------------------------------------------
.text:00406AA6                 align 10h
.text:00406AB0
.text:00406AB0 ; =============== S U B R O U T I N E =======================================
.text:00406AB0
.text:00406AB0 ; Attributes: thunk
.text:00406AB0
.text:00406AB0 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00406AB0 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:00406AB0
.text:00406AB0 lpFileName      = dword ptr  4
.text:00406AB0 lpFindFileData  = dword ptr  8
.text:00406AB0
.text:00406AB0                 jmp     ds:__imp_FindFirstFileA
.text:00406AB0 FindFirstFileA  endp
.text:00406AB0
.text:00406AB0 ; ---------------------------------------------------------------------------
.text:00406AB6                 align 10h
.text:00406AC0
.text:00406AC0 ; =============== S U B R O U T I N E =======================================
.text:00406AC0
.text:00406AC0 ; Attributes: thunk
.text:00406AC0
.text:00406AC0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00406AC0 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:00406AC0                                         ; _win32_longpath+185↑p
.text:00406AC0
.text:00406AC0 hFindFile       = dword ptr  4
.text:00406AC0
.text:00406AC0                 jmp     ds:__imp_FindClose
.text:00406AC0 FindClose       endp
.text:00406AC0
.text:00406AC0 ; ---------------------------------------------------------------------------
.text:00406AC6                 align 10h
.text:00406AD0
.text:00406AD0 ; =============== S U B R O U T I N E =======================================
.text:00406AD0
.text:00406AD0 ; Attributes: thunk
.text:00406AD0
.text:00406AD0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00406AD0 GetModuleFileNameA proc near            ; CODE XREF: sub_405320+1C↑p
.text:00406AD0
.text:00406AD0 hModule         = dword ptr  4
.text:00406AD0 lpFilename      = dword ptr  8
.text:00406AD0 nSize           = dword ptr  0Ch
.text:00406AD0
.text:00406AD0                 jmp     ds:__imp_GetModuleFileNameA
.text:00406AD0 GetModuleFileNameA endp
.text:00406AD0
.text:00406AD0 ; ---------------------------------------------------------------------------
.text:00406AD6                 align 10h
.text:00406AE0
.text:00406AE0 ; =============== S U B R O U T I N E =======================================
.text:00406AE0
.text:00406AE0 ; Attributes: thunk
.text:00406AE0
.text:00406AE0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00406AE0 GetModuleHandleA proc near              ; CODE XREF: .text:0040550E↑p
.text:00406AE0
.text:00406AE0 lpModuleName    = dword ptr  4
.text:00406AE0
.text:00406AE0                 jmp     ds:__imp_GetModuleHandleA
.text:00406AE0 GetModuleHandleA endp
.text:00406AE0
.text:00406AE0 ; ---------------------------------------------------------------------------
.text:00406AE6                 align 10h
.text:00406AF0
.text:00406AF0 ; =============== S U B R O U T I N E =======================================
.text:00406AF0
.text:00406AF0 ; Attributes: thunk
.text:00406AF0
.text:00406AF0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00406AF0 GetShortPathNameA proc near             ; CODE XREF: .text:004055A6↑p
.text:00406AF0                                         ; .text:004055D0↑p
.text:00406AF0
.text:00406AF0 lpszLongPath    = dword ptr  4
.text:00406AF0 lpszShortPath   = dword ptr  8
.text:00406AF0 cchBuffer       = dword ptr  0Ch
.text:00406AF0
.text:00406AF0                 jmp     ds:__imp_GetShortPathNameA
.text:00406AF0 GetShortPathNameA endp
.text:00406AF0
.text:00406AF0 ; ---------------------------------------------------------------------------
.text:00406AF6                 align 10h
.text:00406B00
.text:00406B00 ; =============== S U B R O U T I N E =======================================
.text:00406B00
.text:00406B00 ; Attributes: thunk
.text:00406B00
.text:00406B00 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00406B00 GetFullPathNameA proc near              ; CODE XREF: sub_405670+45↑p
.text:00406B00                                         ; sub_405670+ED↑p
.text:00406B00
.text:00406B00 lpFileName      = dword ptr  4
.text:00406B00 nBufferLength   = dword ptr  8
.text:00406B00 lpBuffer        = dword ptr  0Ch
.text:00406B00 lpFilePart      = dword ptr  10h
.text:00406B00
.text:00406B00                 jmp     ds:__imp_GetFullPathNameA
.text:00406B00 GetFullPathNameA endp
.text:00406B00
.text:00406B00 ; ---------------------------------------------------------------------------
.text:00406B06                 align 10h
.text:00406B10
.text:00406B10 ; =============== S U B R O U T I N E =======================================
.text:00406B10
.text:00406B10 ; Attributes: thunk
.text:00406B10
.text:00406B10 ; DWORD __stdcall GetLastError()
.text:00406B10 GetLastError    proc near               ; CODE XREF: sub_405A30+3↑p
.text:00406B10                 jmp     ds:__imp_GetLastError
.text:00406B10 GetLastError    endp
.text:00406B10
.text:00406B10 ; ---------------------------------------------------------------------------
.text:00406B16                 align 10h
.text:00406B20
.text:00406B20 ; =============== S U B R O U T I N E =======================================
.text:00406B20
.text:00406B20 ; Attributes: thunk
.text:00406B20
.text:00406B20 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00406B20 lstrcmpiA       proc near               ; CODE XREF: .text:00405F0B↑p
.text:00406B20                                         ; .text:00405F22↑p ...
.text:00406B20
.text:00406B20 lpString1       = dword ptr  4
.text:00406B20 lpString2       = dword ptr  8
.text:00406B20
.text:00406B20                 jmp     ds:__imp_lstrcmpiA
.text:00406B20 lstrcmpiA       endp
.text:00406B20
.text:00406B20 ; ---------------------------------------------------------------------------
.text:00406B26                 align 10h
.text:00406B30
.text:00406B30 ; =============== S U B R O U T I N E =======================================
.text:00406B30
.text:00406B30 ; Attributes: thunk
.text:00406B30
.text:00406B30 ; DWORD __stdcall GetVersion()
.text:00406B30 GetVersion      proc near               ; CODE XREF: .text:00406293↑p
.text:00406B30                 jmp     ds:__imp_GetVersion
.text:00406B30 GetVersion      endp
.text:00406B30
.text:00406B30 ; ---------------------------------------------------------------------------
.text:00406B36                 align 10h
.text:00406B40
.text:00406B40 ; =============== S U B R O U T I N E =======================================
.text:00406B40
.text:00406B40 ; Attributes: thunk
.text:00406B40
.text:00406B40 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00406B40 GetVersionExA   proc near               ; CODE XREF: sub_406320+32↑p
.text:00406B40                                         ; sub_406320+20B↑p
.text:00406B40
.text:00406B40 lpVersionInformation= dword ptr  4
.text:00406B40
.text:00406B40                 jmp     ds:__imp_GetVersionExA
.text:00406B40 GetVersionExA   endp
.text:00406B40
.text:00406B40 ; ---------------------------------------------------------------------------
.text:00406B46                 align 10h
.text:00406B50
.text:00406B50 ; =============== S U B R O U T I N E =======================================
.text:00406B50
.text:00406B50 ; Attributes: thunk
.text:00406B50
.text:00406B50 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00406B50 SetErrorMode    proc near               ; CODE XREF: sub_406570+57↑p
.text:00406B50                                         ; sub_406570+78↑p
.text:00406B50
.text:00406B50 uMode           = dword ptr  4
.text:00406B50
.text:00406B50                 jmp     ds:__imp_SetErrorMode
.text:00406B50 SetErrorMode    endp
.text:00406B50
.text:00406B50 ; ---------------------------------------------------------------------------
.text:00406B56                 align 10h
.text:00406B60
.text:00406B60 ; =============== S U B R O U T I N E =======================================
.text:00406B60
.text:00406B60 ; Attributes: thunk
.text:00406B60
.text:00406B60 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00406B60 GetFileAttributesA proc near            ; CODE XREF: sub_406570+62↑p
.text:00406B60
.text:00406B60 lpFileName      = dword ptr  4
.text:00406B60
.text:00406B60                 jmp     ds:__imp_GetFileAttributesA
.text:00406B60 GetFileAttributesA endp
.text:00406B60
.text:00406B60 ; ---------------------------------------------------------------------------
.text:00406B66                 align 10h
.text:00406B70
.text:00406B70 ; =============== S U B R O U T I N E =======================================
.text:00406B70
.text:00406B70 ; Attributes: thunk
.text:00406B70
.text:00406B70 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00406B70 RegOpenKeyExA   proc near               ; CODE XREF: .text:00405E91↑p
.text:00406B70
.text:00406B70 hKey            = dword ptr  4
.text:00406B70 lpSubKey        = dword ptr  8
.text:00406B70 ulOptions       = dword ptr  0Ch
.text:00406B70 samDesired      = dword ptr  10h
.text:00406B70 phkResult       = dword ptr  14h
.text:00406B70
.text:00406B70                 jmp     ds:__imp_RegOpenKeyExA
.text:00406B70 RegOpenKeyExA   endp
.text:00406B70
.text:00406B70 ; ---------------------------------------------------------------------------
.text:00406B76                 align 10h
.text:00406B80
.text:00406B80 ; =============== S U B R O U T I N E =======================================
.text:00406B80
.text:00406B80 ; Attributes: thunk
.text:00406B80
.text:00406B80 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00406B80 RegQueryValueExA proc near              ; CODE XREF: .text:00405ED4↑p
.text:00406B80
.text:00406B80 hKey            = dword ptr  4
.text:00406B80 lpValueName     = dword ptr  8
.text:00406B80 lpReserved      = dword ptr  0Ch
.text:00406B80 lpType          = dword ptr  10h
.text:00406B80 lpData          = dword ptr  14h
.text:00406B80 lpcbData        = dword ptr  18h
.text:00406B80
.text:00406B80                 jmp     ds:__imp_RegQueryValueExA
.text:00406B80 RegQueryValueExA endp
.text:00406B80
.text:00406B80 ; ---------------------------------------------------------------------------
.text:00406B86                 align 10h
.text:00406B90
.text:00406B90 ; =============== S U B R O U T I N E =======================================
.text:00406B90
.text:00406B90 ; Attributes: thunk
.text:00406B90
.text:00406B90 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00406B90 RegCloseKey     proc near               ; CODE XREF: .text:00405EF8↑p
.text:00406B90
.text:00406B90 hKey            = dword ptr  4
.text:00406B90
.text:00406B90                 jmp     ds:__imp_RegCloseKey
.text:00406B90 RegCloseKey     endp
.text:00406B90
.text:00406B90 ; ---------------------------------------------------------------------------
.text:00406B96                 align 10h
.text:00406BA0 dword_406BA0    dd 0FFFFFFFFh           ; DATA XREF: .text:004066C9↑r
.text:00406BA0                                         ; .text:loc_4066F0↑r ...
.text:00406BA4 dword_406BA4    dd 0                    ; DATA XREF: .text:loc_4066FC↑r
.text:00406BA4                                         ; sub_406720:loc_40676D↑r
.text:00406BA8                 dd 0FFFFFFFFh
.text:00406BAC dword_406BAC    dd 15h dup(0)           ; DATA XREF: .data:off_407094↓o
.text:00406C00                 dd 100h dup(?)
.text:00406C00 _text           ends
.text:00406C00
.data:00407000 ; Section 2. (virtual address 00007000)
.data:00407000 ; Virtual size                  : 000000B0 (    176.)
.data:00407000 ; Section size in file          : 00000200 (    512.)
.data:00407000 ; Offset to raw data for section: 00006000
.data:00407000 ; Flags C0000040: Data Readable Writable
.data:00407000 ; Alignment     : default
.data:00407000 ; ===========================================================================
.data:00407000
.data:00407000 ; Segment type: Pure data
.data:00407000 ; Segment permissions: Read/Write
.data:00407000 _data           segment para public 'DATA' use32
.data:00407000                 assume cs:_data
.data:00407000                 ;org 407000h
.data:00407000 dword_407000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00407000                                         ; sub_401080+CC↑r
.data:00407004 dword_407004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00407004                                         ; sub_401080+D4↑r
.data:00407008                 align 10h
.data:00407010 dword_407010    dd 1                    ; DATA XREF: sub_401390+CB↑r
.data:00407010                                         ; sub_401390:loc_4014FF↑r ...
.data:00407014 dword_407014    dd 1                    ; DATA XREF: sub_4025E0+11↑r
.data:00407014                                         ; .text:00402681↑r ...
.data:00407018 dword_407018    dd 3Fh                  ; DATA XREF: sub_4025E0+7D↑w
.data:00407018                                         ; .text:004026ED↑w
.data:0040701C                 align 10h
.data:00407020 dword_407020    dd 1                    ; DATA XREF: sub_403DC0+22↑r
.data:00407020                                         ; sub_403DC0+65↑r ...
.data:00407024 dword_407024    dd 100h                 ; DATA XREF: sub_403DC0+3F↑o
.data:00407024                                         ; sub_403DC0+1A2↑r ...
.data:00407028 off_407028      dd offset unk_408040    ; DATA XREF: sub_403DC0+1AA↑r
.data:0040702C ; void *off_40702C
.data:0040702C off_40702C      dd offset dword_407024  ; DATA XREF: sub_403DC0+39↑r
.data:0040702C                                         ; sub_403DC0+60↑w ...
.data:00407030 ; char *Buffer
.data:00407030 Buffer          dd offset aCopyrightC2005
.data:00407030                                         ; DATA XREF: sub_404280+DC↑r
.data:00407030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00407034                 align 10h
.data:00407040 ; int Code
.data:00407040 Code            dd 1                    ; DATA XREF: sub_402B10+6D↑r
.data:00407040                                         ; sub_402B10+9A↑r ...
.data:00407044                 align 10h
.data:00407050 dword_407050    dd 1                    ; DATA XREF: .text:loc_405D47↑r
.data:00407050                                         ; sub_406320+202↑w
.data:00407054                 align 10h
.data:00407060 dword_407060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00407064                 align 10h
.data:00407070 ; int Mode
.data:00407070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00407070                                         ; sub_401080+80↑r ...
.data:00407074                 align 10h
.data:00407080 dword_407080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00407080                                         ; sub_401080+BA↑r
.data:00407084                 align 10h
.data:00407090 dword_407090    dd 0                    ; DATA XREF: sub_406720+9↑r
.data:00407090                                         ; sub_406720+1D↑w
.data:00407094 off_407094      dd offset dword_406BAC  ; DATA XREF: sub_406690+6↑r
.data:00407094                                         ; sub_406690+17↑r ...
.data:00407098                 align 1000h
.data:00407098 _data           ends
.data:00407098
.bss:00408000 ; Section 3. (virtual address 00008000)
.bss:00408000 ; Virtual size                  : 000002F0 (    752.)
.bss:00408000 ; Section size in file          : 00000000 (      0.)
.bss:00408000 ; Offset to raw data for section: 00000000
.bss:00408000 ; Flags C0000080: Bss Readable Writable
.bss:00408000 ; Alignment     : default
.bss:00408000 ; ===========================================================================
.bss:00408000
.bss:00408000 ; Segment type: Uninitialized
.bss:00408000 ; Segment permissions: Read/Write
.bss:00408000 _bss            segment para public 'BSS' use32
.bss:00408000                 assume cs:_bss
.bss:00408000                 ;org 408000h
.bss:00408000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00408000 dword_408000    dd ?                    ; DATA XREF: sub_4025E0+9↑o
.bss:00408000                                         ; sub_4025E0+17↑w ...
.bss:00408004 dword_408004    dd ?                    ; DATA XREF: sub_4025E0+21↑w
.bss:00408004                                         ; .text:00402699↑w
.bss:00408008 dword_408008    dd ?                    ; DATA XREF: sub_4025E0+77↑r
.bss:00408008                                         ; .text:004026E7↑r
.bss:0040800C dword_40800C    dd ?                    ; DATA XREF: sub_4025E0+6B↑r
.bss:0040800C                                         ; .text:004026DB↑r
.bss:00408010                 db    ? ;
.bss:00408011                 db    ? ;
.bss:00408012                 db    ? ;
.bss:00408013                 db    ? ;
.bss:00408014                 db    ? ;
.bss:00408015                 db    ? ;
.bss:00408016                 db    ? ;
.bss:00408017                 db    ? ;
.bss:00408018                 db    ? ;
.bss:00408019                 db    ? ;
.bss:0040801A                 db    ? ;
.bss:0040801B                 db    ? ;
.bss:0040801C                 db    ? ;
.bss:0040801D                 db    ? ;
.bss:0040801E                 db    ? ;
.bss:0040801F                 db    ? ;
.bss:00408020                 db    ? ;
.bss:00408021                 db    ? ;
.bss:00408022                 db    ? ;
.bss:00408023                 db    ? ;
.bss:00408024                 db    ? ;
.bss:00408025                 db    ? ;
.bss:00408026                 db    ? ;
.bss:00408027                 db    ? ;
.bss:00408028                 db    ? ;
.bss:00408029                 db    ? ;
.bss:0040802A                 db    ? ;
.bss:0040802B                 db    ? ;
.bss:0040802C                 db    ? ;
.bss:0040802D                 db    ? ;
.bss:0040802E                 db    ? ;
.bss:0040802F                 db    ? ;
.bss:00408030 ; char *dword_408030
.bss:00408030 dword_408030    dd ?                    ; DATA XREF: .text:00402AE4↑w
.bss:00408030                                         ; sub_402B10+58↑r
.bss:00408034                 align 10h
.bss:00408040 unk_408040      db    ? ;               ; DATA XREF: sub_403DC0+100↑o
.bss:00408040                                         ; .data:off_407028↑o
.bss:00408041                 db    ? ;
.bss:00408042                 db    ? ;
.bss:00408043                 db    ? ;
.bss:00408044                 db    ? ;
.bss:00408045                 db    ? ;
.bss:00408046                 db    ? ;
.bss:00408047                 db    ? ;
.bss:00408048                 db    ? ;
.bss:00408049                 db    ? ;
.bss:0040804A                 db    ? ;
.bss:0040804B                 db    ? ;
.bss:0040804C                 db    ? ;
.bss:0040804D                 db    ? ;
.bss:0040804E                 db    ? ;
.bss:0040804F                 db    ? ;
.bss:00408050                 db    ? ;
.bss:00408051                 db    ? ;
.bss:00408052                 db    ? ;
.bss:00408053                 db    ? ;
.bss:00408054                 db    ? ;
.bss:00408055                 db    ? ;
.bss:00408056                 db    ? ;
.bss:00408057                 db    ? ;
.bss:00408058                 db    ? ;
.bss:00408059                 db    ? ;
.bss:0040805A                 db    ? ;
.bss:0040805B                 db    ? ;
.bss:0040805C                 db    ? ;
.bss:0040805D                 db    ? ;
.bss:0040805E                 db    ? ;
.bss:0040805F                 db    ? ;
.bss:00408060                 db    ? ;
.bss:00408061                 db    ? ;
.bss:00408062                 db    ? ;
.bss:00408063                 db    ? ;
.bss:00408064                 db    ? ;
.bss:00408065                 db    ? ;
.bss:00408066                 db    ? ;
.bss:00408067                 db    ? ;
.bss:00408068                 db    ? ;
.bss:00408069                 db    ? ;
.bss:0040806A                 db    ? ;
.bss:0040806B                 db    ? ;
.bss:0040806C                 db    ? ;
.bss:0040806D                 db    ? ;
.bss:0040806E                 db    ? ;
.bss:0040806F                 db    ? ;
.bss:00408070                 db    ? ;
.bss:00408071                 db    ? ;
.bss:00408072                 db    ? ;
.bss:00408073                 db    ? ;
.bss:00408074                 db    ? ;
.bss:00408075                 db    ? ;
.bss:00408076                 db    ? ;
.bss:00408077                 db    ? ;
.bss:00408078                 db    ? ;
.bss:00408079                 db    ? ;
.bss:0040807A                 db    ? ;
.bss:0040807B                 db    ? ;
.bss:0040807C                 db    ? ;
.bss:0040807D                 db    ? ;
.bss:0040807E                 db    ? ;
.bss:0040807F                 db    ? ;
.bss:00408080                 db    ? ;
.bss:00408081                 db    ? ;
.bss:00408082                 db    ? ;
.bss:00408083                 db    ? ;
.bss:00408084                 db    ? ;
.bss:00408085                 db    ? ;
.bss:00408086                 db    ? ;
.bss:00408087                 db    ? ;
.bss:00408088                 db    ? ;
.bss:00408089                 db    ? ;
.bss:0040808A                 db    ? ;
.bss:0040808B                 db    ? ;
.bss:0040808C                 db    ? ;
.bss:0040808D                 db    ? ;
.bss:0040808E                 db    ? ;
.bss:0040808F                 db    ? ;
.bss:00408090                 db    ? ;
.bss:00408091                 db    ? ;
.bss:00408092                 db    ? ;
.bss:00408093                 db    ? ;
.bss:00408094                 db    ? ;
.bss:00408095                 db    ? ;
.bss:00408096                 db    ? ;
.bss:00408097                 db    ? ;
.bss:00408098                 db    ? ;
.bss:00408099                 db    ? ;
.bss:0040809A                 db    ? ;
.bss:0040809B                 db    ? ;
.bss:0040809C                 db    ? ;
.bss:0040809D                 db    ? ;
.bss:0040809E                 db    ? ;
.bss:0040809F                 db    ? ;
.bss:004080A0                 db    ? ;
.bss:004080A1                 db    ? ;
.bss:004080A2                 db    ? ;
.bss:004080A3                 db    ? ;
.bss:004080A4                 db    ? ;
.bss:004080A5                 db    ? ;
.bss:004080A6                 db    ? ;
.bss:004080A7                 db    ? ;
.bss:004080A8                 db    ? ;
.bss:004080A9                 db    ? ;
.bss:004080AA                 db    ? ;
.bss:004080AB                 db    ? ;
.bss:004080AC                 db    ? ;
.bss:004080AD                 db    ? ;
.bss:004080AE                 db    ? ;
.bss:004080AF                 db    ? ;
.bss:004080B0                 db    ? ;
.bss:004080B1                 db    ? ;
.bss:004080B2                 db    ? ;
.bss:004080B3                 db    ? ;
.bss:004080B4                 db    ? ;
.bss:004080B5                 db    ? ;
.bss:004080B6                 db    ? ;
.bss:004080B7                 db    ? ;
.bss:004080B8                 db    ? ;
.bss:004080B9                 db    ? ;
.bss:004080BA                 db    ? ;
.bss:004080BB                 db    ? ;
.bss:004080BC                 db    ? ;
.bss:004080BD                 db    ? ;
.bss:004080BE                 db    ? ;
.bss:004080BF                 db    ? ;
.bss:004080C0                 db    ? ;
.bss:004080C1                 db    ? ;
.bss:004080C2                 db    ? ;
.bss:004080C3                 db    ? ;
.bss:004080C4                 db    ? ;
.bss:004080C5                 db    ? ;
.bss:004080C6                 db    ? ;
.bss:004080C7                 db    ? ;
.bss:004080C8                 db    ? ;
.bss:004080C9                 db    ? ;
.bss:004080CA                 db    ? ;
.bss:004080CB                 db    ? ;
.bss:004080CC                 db    ? ;
.bss:004080CD                 db    ? ;
.bss:004080CE                 db    ? ;
.bss:004080CF                 db    ? ;
.bss:004080D0                 db    ? ;
.bss:004080D1                 db    ? ;
.bss:004080D2                 db    ? ;
.bss:004080D3                 db    ? ;
.bss:004080D4                 db    ? ;
.bss:004080D5                 db    ? ;
.bss:004080D6                 db    ? ;
.bss:004080D7                 db    ? ;
.bss:004080D8                 db    ? ;
.bss:004080D9                 db    ? ;
.bss:004080DA                 db    ? ;
.bss:004080DB                 db    ? ;
.bss:004080DC                 db    ? ;
.bss:004080DD                 db    ? ;
.bss:004080DE                 db    ? ;
.bss:004080DF                 db    ? ;
.bss:004080E0                 db    ? ;
.bss:004080E1                 db    ? ;
.bss:004080E2                 db    ? ;
.bss:004080E3                 db    ? ;
.bss:004080E4                 db    ? ;
.bss:004080E5                 db    ? ;
.bss:004080E6                 db    ? ;
.bss:004080E7                 db    ? ;
.bss:004080E8                 db    ? ;
.bss:004080E9                 db    ? ;
.bss:004080EA                 db    ? ;
.bss:004080EB                 db    ? ;
.bss:004080EC                 db    ? ;
.bss:004080ED                 db    ? ;
.bss:004080EE                 db    ? ;
.bss:004080EF                 db    ? ;
.bss:004080F0                 db    ? ;
.bss:004080F1                 db    ? ;
.bss:004080F2                 db    ? ;
.bss:004080F3                 db    ? ;
.bss:004080F4                 db    ? ;
.bss:004080F5                 db    ? ;
.bss:004080F6                 db    ? ;
.bss:004080F7                 db    ? ;
.bss:004080F8                 db    ? ;
.bss:004080F9                 db    ? ;
.bss:004080FA                 db    ? ;
.bss:004080FB                 db    ? ;
.bss:004080FC                 db    ? ;
.bss:004080FD                 db    ? ;
.bss:004080FE                 db    ? ;
.bss:004080FF                 db    ? ;
.bss:00408100                 db    ? ;
.bss:00408101                 db    ? ;
.bss:00408102                 db    ? ;
.bss:00408103                 db    ? ;
.bss:00408104                 db    ? ;
.bss:00408105                 db    ? ;
.bss:00408106                 db    ? ;
.bss:00408107                 db    ? ;
.bss:00408108                 db    ? ;
.bss:00408109                 db    ? ;
.bss:0040810A                 db    ? ;
.bss:0040810B                 db    ? ;
.bss:0040810C                 db    ? ;
.bss:0040810D                 db    ? ;
.bss:0040810E                 db    ? ;
.bss:0040810F                 db    ? ;
.bss:00408110                 db    ? ;
.bss:00408111                 db    ? ;
.bss:00408112                 db    ? ;
.bss:00408113                 db    ? ;
.bss:00408114                 db    ? ;
.bss:00408115                 db    ? ;
.bss:00408116                 db    ? ;
.bss:00408117                 db    ? ;
.bss:00408118                 db    ? ;
.bss:00408119                 db    ? ;
.bss:0040811A                 db    ? ;
.bss:0040811B                 db    ? ;
.bss:0040811C                 db    ? ;
.bss:0040811D                 db    ? ;
.bss:0040811E                 db    ? ;
.bss:0040811F                 db    ? ;
.bss:00408120                 db    ? ;
.bss:00408121                 db    ? ;
.bss:00408122                 db    ? ;
.bss:00408123                 db    ? ;
.bss:00408124                 db    ? ;
.bss:00408125                 db    ? ;
.bss:00408126                 db    ? ;
.bss:00408127                 db    ? ;
.bss:00408128                 db    ? ;
.bss:00408129                 db    ? ;
.bss:0040812A                 db    ? ;
.bss:0040812B                 db    ? ;
.bss:0040812C                 db    ? ;
.bss:0040812D                 db    ? ;
.bss:0040812E                 db    ? ;
.bss:0040812F                 db    ? ;
.bss:00408130                 db    ? ;
.bss:00408131                 db    ? ;
.bss:00408132                 db    ? ;
.bss:00408133                 db    ? ;
.bss:00408134                 db    ? ;
.bss:00408135                 db    ? ;
.bss:00408136                 db    ? ;
.bss:00408137                 db    ? ;
.bss:00408138                 db    ? ;
.bss:00408139                 db    ? ;
.bss:0040813A                 db    ? ;
.bss:0040813B                 db    ? ;
.bss:0040813C                 db    ? ;
.bss:0040813D                 db    ? ;
.bss:0040813E                 db    ? ;
.bss:0040813F                 db    ? ;
.bss:00408140 dword_408140    dd ?                    ; DATA XREF: .text:loc_403751↑o
.bss:00408140                                         ; .text:loc_403770↑o ...
.bss:00408144 dword_408144    dd ?                    ; DATA XREF: .text:loc_4037F0↑o
.bss:00408144                                         ; .text:00403C78↑r ...
.bss:00408148 dword_408148    dd ?                    ; DATA XREF: .text:00403C72↑r
.bss:00408148                                         ; sub_403D20+2C↑r
.bss:0040814C dword_40814C    dd ?                    ; DATA XREF: .text:00403C66↑r
.bss:0040814C                                         ; sub_403D20+22↑r
.bss:00408150 dword_408150    dd ?                    ; DATA XREF: .text:00403C82↑r
.bss:00408150                                         ; sub_403D20+36↑r
.bss:00408154 dword_408154    dd ?                    ; DATA XREF: .text:00403C92↑r
.bss:00408154                                         ; sub_403D20+4E↑r
.bss:00408158 dword_408158    dd ?                    ; DATA XREF: .text:00403CAF↑r
.bss:00408158                                         ; sub_403D20+62↑r
.bss:0040815C dword_40815C    dd ?                    ; DATA XREF: .text:00403CA5↑r
.bss:0040815C                                         ; sub_403D20+70↑r
.bss:00408160 dword_408160    dd ?                    ; DATA XREF: .text:00403C88↑r
.bss:00408160                                         ; sub_403D20+7A↑r
.bss:00408164                 align 10h
.bss:00408170 ; char *Str1
.bss:00408170 Str1            dd ?                    ; DATA XREF: sub_404914:loc_40494D↑w
.bss:00408170                                         ; sub_404914:loc_404A80↑r
.bss:00408174                 align 10h
.bss:00408180 dword_408180    dd ?                    ; DATA XREF: sub_404914+2D↑r
.bss:00408180                                         ; sub_404914+3F↑w
.bss:00408184                 align 10h
.bss:00408190 dword_408190    dd ?                    ; DATA XREF: .text:00406218↑r
.bss:00408190                                         ; sub_406320:loc_4063A2↑w ...
.bss:00408194                 align 10h
.bss:004081A0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004081A0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_406320:loc_406340↑o
.bss:004081A0                                         ; sub_406320+2C↑w ...
.bss:00408234 word_408234     dw ?                    ; DATA XREF: sub_406320:loc_4063D3↑r
.bss:00408236                 align 4
.bss:00408238 word_408238     dw ?                    ; DATA XREF: .text:loc_405D96↑r
.bss:00408238                                         ; .text:00405DC4↑r ...
.bss:0040823A byte_40823A     db ?                    ; DATA XREF: .text:00405D55↑r
.bss:0040823B                 align 10h
.bss:00408240 dword_408240    dd ?                    ; DATA XREF: sub_406320+6↑r
.bss:00408240                                         ; sub_406320+75↑w
.bss:00408244                 align 10h
.bss:00408250 dword_408250    dd ?                    ; DATA XREF: sub_401390+2F↑w
.bss:00408250                                         ; sub_401390+12A↑r ...
.bss:00408254                 db    ? ;
.bss:00408255                 db    ? ;
.bss:00408256                 db    ? ;
.bss:00408257                 db    ? ;
.bss:00408258                 db    ? ;
.bss:00408259                 db    ? ;
.bss:0040825A                 db    ? ;
.bss:0040825B                 db    ? ;
.bss:0040825C                 db    ? ;
.bss:0040825D                 db    ? ;
.bss:0040825E                 db    ? ;
.bss:0040825F                 db    ? ;
.bss:00408260                 db    ? ;
.bss:00408261                 db    ? ;
.bss:00408262                 db    ? ;
.bss:00408263                 db    ? ;
.bss:00408264                 db    ? ;
.bss:00408265                 db    ? ;
.bss:00408266                 db    ? ;
.bss:00408267                 db    ? ;
.bss:00408268                 db    ? ;
.bss:00408269                 db    ? ;
.bss:0040826A                 db    ? ;
.bss:0040826B                 db    ? ;
.bss:0040826C                 db    ? ;
.bss:0040826D                 db    ? ;
.bss:0040826E                 db    ? ;
.bss:0040826F                 db    ? ;
.bss:00408270 dword_408270    dd ?                    ; DATA XREF: sub_4025E0+71↑w
.bss:00408270                                         ; .text:004026E1↑w
.bss:00408274                 align 10h
.bss:00408280 dword_408280    dd ?                    ; CODE XREF: sub_404914+63↑p
.bss:00408280                                         ; DATA XREF: sub_404810+1E↑r ...
.bss:00408284                 align 10h
.bss:00408290 dword_408290    dd ?                    ; DATA XREF: sub_404810+4E↑w
.bss:00408290                                         ; sub_404914+AB↑w
.bss:00408294                 align 40h
.bss:004082C0 dword_4082C0    dd ?                    ; DATA XREF: sub_404914+13↑r
.bss:004082C4                 align 1000h
.bss:004082C4 _bss            ends
.bss:004082C4
.idata:00409000 ; Section 4. (virtual address 00009000)
.idata:00409000 ; Virtual size                  : 00000868 (   2152.)
.idata:00409000 ; Section size in file          : 00000A00 (   2560.)
.idata:00409000 ; Offset to raw data for section: 00006200
.idata:00409000 ; Flags C0000040: Data Readable Writable
.idata:00409000 ; Alignment     : default
.idata:00409000 ; ===========================================================================
.idata:00409000
.idata:00409000 ; Segment type: Externs
.idata:00409000 ; _idata
.idata:00409000
.idata:00409001
.idata:004091C0 ;
.idata:004091C0 ; Imports from libintl3.dll
.idata:004091C0 ;
.idata:004091C0                 extrn __imp_libintl_bindtextdomain:dword
.idata:004091C0                                         ; CODE XREF: sub_401390+49↑p
.idata:004091C0                                         ; DATA XREF: sub_401390+49↑r ...
.idata:004091C4                 extrn libintl_gettext:dword
.idata:004091C4                                         ; CODE XREF: sub_401390+F5↑p
.idata:004091C4                                         ; sub_401390+11E↑p ...
.idata:004091C8                 extrn libintl_textdomain:dword
.idata:004091C8                                         ; CODE XREF: sub_401390+56↑p
.idata:004091C8                                         ; DATA XREF: sub_401390+56↑r ...
.idata:004091CC
.idata:004091D4 ;
.idata:004091D4 ; Imports from ADVAPI32.DLL
.idata:004091D4 ;
.idata:004091D4 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004091D4                 extrn __imp_RegCloseKey:dword
.idata:004091D4                                         ; DATA XREF: RegCloseKey↑r
.idata:004091D8 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004091D8                 extrn __imp_RegOpenKeyExA:dword
.idata:004091D8                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004091DC ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004091DC                 extrn __imp_RegQueryValueExA:dword
.idata:004091DC                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004091E0
.idata:004091E8 ;
.idata:004091E8 ; Imports from KERNEL32.dll
.idata:004091E8 ;
.idata:004091E8 ; BOOL (__stdcall *BackupWrite)(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.idata:004091E8                 extrn __imp_BackupWrite:dword
.idata:004091E8                                         ; DATA XREF: BackupWrite↑r
.idata:004091EC ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004091EC                 extrn __imp_CloseHandle:dword
.idata:004091EC                                         ; DATA XREF: CloseHandle↑r
.idata:004091F0 ; BOOL (__stdcall *CopyFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.idata:004091F0                 extrn __imp_CopyFileA:dword
.idata:004091F0                                         ; DATA XREF: CopyFileA↑r
.idata:004091F4 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004091F4                 extrn __imp_CreateFileA:dword
.idata:004091F4                                         ; DATA XREF: CreateFileA↑r
.idata:004091F8 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004091F8                 extrn __imp_ExitProcess:dword
.idata:004091F8                                         ; DATA XREF: ExitProcess↑r
.idata:004091FC ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004091FC                 extrn __imp_FindClose:dword
.idata:004091FC                                         ; DATA XREF: FindClose↑r
.idata:00409200 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00409200                 extrn __imp_FindFirstFileA:dword
.idata:00409200                                         ; DATA XREF: FindFirstFileA↑r
.idata:00409204 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00409204                 extrn __imp_GetFileAttributesA:dword
.idata:00409204                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00409208 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00409208                 extrn __imp_GetFullPathNameA:dword
.idata:00409208                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0040920C ; DWORD (__stdcall *GetLastError)()
.idata:0040920C                 extrn __imp_GetLastError:dword
.idata:0040920C                                         ; DATA XREF: GetLastError↑r
.idata:00409210 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00409210                 extrn __imp_GetModuleFileNameA:dword
.idata:00409210                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00409214 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00409214                 extrn __imp_GetModuleHandleA:dword
.idata:00409214                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00409218 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00409218                 extrn __imp_GetProcAddress:dword
.idata:00409218                                         ; DATA XREF: GetProcAddress↑r
.idata:0040921C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0040921C                 extrn __imp_GetShortPathNameA:dword
.idata:0040921C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00409220 ; DWORD (__stdcall *GetVersion)()
.idata:00409220                 extrn __imp_GetVersion:dword
.idata:00409220                                         ; DATA XREF: GetVersion↑r
.idata:00409224 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00409224                 extrn __imp_GetVersionExA:dword
.idata:00409224                                         ; DATA XREF: GetVersionExA↑r
.idata:00409228 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00409228                 extrn __imp_LoadLibraryA:dword
.idata:00409228                                         ; DATA XREF: LoadLibraryA↑r
.idata:0040922C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0040922C                 extrn __imp_SetErrorMode:dword
.idata:0040922C                                         ; DATA XREF: SetErrorMode↑r
.idata:00409230 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00409230                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00409230                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00409234 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00409234                 extrn __imp_lstrcmpiA:dword
.idata:00409234                                         ; DATA XREF: lstrcmpiA↑r
.idata:00409238
.idata:00409240 ;
.idata:00409240 ; Imports from MSVCP60.DLL
.idata:00409240 ;
.idata:00409240 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00409240                 extrn __imp_mbrtowc:dword
.idata:00409240                                         ; DATA XREF: mbrtowc↑r
.idata:00409244
.idata:0040924C ;
.idata:0040924C ; Imports from msvcrt.dll
.idata:0040924C ;
.idata:0040924C                 extrn __imp___getmainargs:dword
.idata:0040924C                                         ; DATA XREF: __getmainargs↑r
.idata:00409250 ; int _mb_cur_max
.idata:00409250                 extrn __mb_cur_max:dword
.idata:00409250                                         ; DATA XREF: sub_402C80+7↑r
.idata:00409250                                         ; sub_402C80+5F3↑r
.idata:00409254 ; char ***(__cdecl *__p__environ)()
.idata:00409254                 extrn __imp___p__environ:dword
.idata:00409254                                         ; DATA XREF: __p__environ↑r
.idata:00409258 ; int *(__cdecl *__p__fmode)()
.idata:00409258                 extrn __imp___p__fmode:dword
.idata:00409258                                         ; DATA XREF: __p__fmode↑r
.idata:0040925C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040925C                 extrn __set_app_type:dword
.idata:0040925C                                         ; CODE XREF: start+D↑p
.idata:0040925C                                         ; .text:0040102D↑p
.idata:0040925C                                         ; DATA XREF: ...
.idata:00409260 ; void (__cdecl *_cexit)()
.idata:00409260                 extrn __imp__cexit:dword
.idata:00409260                                         ; DATA XREF: _cexit↑r
.idata:00409264 ; int *(__cdecl *_errno)()
.idata:00409264                 extrn __imp__errno:dword
.idata:00409264                                         ; DATA XREF: _errno↑r
.idata:00409268 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00409268                 extrn __imp__flsbuf:dword
.idata:00409268                                         ; DATA XREF: _flsbuf↑r
.idata:0040926C ; FILE iob[]
.idata:0040926C                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040926C                                         ; sub_401080+75↑r ...
.idata:00409270 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00409270                 extrn __imp__isctype:dword
.idata:00409270                                         ; DATA XREF: _isctype↑r
.idata:00409274 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00409274                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00409274                                         ; DATA XREF: .text:0040106C↑r
.idata:00409278 ; const unsigned __int16 *pctype
.idata:00409278                 extrn _pctype:dword     ; DATA XREF: sub_402C80:loc_403374↑r
.idata:0040927C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040927C                 extrn __imp__setmode:dword
.idata:0040927C                                         ; DATA XREF: _setmode↑r
.idata:00409280 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00409280                 extrn __imp__stricmp:dword
.idata:00409280                                         ; DATA XREF: _stricmp↑r
.idata:00409284 ; void (__cdecl __noreturn *abort)()
.idata:00409284                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00409288 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00409288                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00409288                                         ; DATA XREF: sub_401040+C↑r
.idata:0040928C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040928C                 extrn __imp_calloc:dword
.idata:0040928C                                         ; DATA XREF: calloc↑r
.idata:00409290 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00409290                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00409294 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00409294                 extrn __imp_fclose:dword
.idata:00409294                                         ; DATA XREF: fclose↑r
.idata:00409298 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00409298                 extrn __imp_fflush:dword
.idata:00409298                                         ; DATA XREF: fflush↑r
.idata:0040929C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040929C                 extrn __imp_fprintf:dword
.idata:0040929C                                         ; DATA XREF: fprintf↑r
.idata:004092A0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004092A0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004092A4 ; void (__cdecl *free)(void *Block)
.idata:004092A4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004092A8 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004092A8                 extrn __imp_getenv:dword
.idata:004092A8                                         ; DATA XREF: getenv↑r
.idata:004092AC ; int (__cdecl *isalpha)(int C)
.idata:004092AC                 extrn __imp_isalpha:dword
.idata:004092AC                                         ; DATA XREF: isalpha↑r
.idata:004092B0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004092B0                 extrn __imp_iswctype:dword
.idata:004092B0                                         ; DATA XREF: iswctype↑r
.idata:004092B4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004092B4                 extrn __imp_malloc:dword
.idata:004092B4                                         ; DATA XREF: malloc↑r
.idata:004092B8 ; size_t (__cdecl *mbstowcs)(wchar_t *Dest, const char *Source, size_t MaxCount)
.idata:004092B8                 extrn __imp_mbstowcs:dword
.idata:004092B8                                         ; DATA XREF: mbstowcs↑r
.idata:004092BC ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004092BC                 extrn __imp_memcpy:dword
.idata:004092BC                                         ; DATA XREF: memcpy↑r
.idata:004092C0 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004092C0                 extrn __imp_memset:dword
.idata:004092C0                                         ; DATA XREF: memset↑r
.idata:004092C4 ; int (*printf)(const char *const Format, ...)
.idata:004092C4                 extrn __imp_printf:dword
.idata:004092C4                                         ; DATA XREF: printf↑r
.idata:004092C8 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004092C8                 extrn __imp_realloc:dword
.idata:004092C8                                         ; DATA XREF: realloc↑r
.idata:004092CC ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004092CC                 extrn __imp_setlocale:dword
.idata:004092CC                                         ; DATA XREF: setlocale↑r
.idata:004092D0 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004092D0                 extrn __imp_signal:dword
.idata:004092D0                                         ; DATA XREF: signal↑r
.idata:004092D4 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004092D4                 extrn __imp_sprintf:dword
.idata:004092D4                                         ; DATA XREF: sprintf↑r
.idata:004092D8 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:004092D8                 extrn __imp_strcat:dword
.idata:004092D8                                         ; DATA XREF: strcat↑r
.idata:004092DC ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004092DC                 extrn __imp_strchr:dword
.idata:004092DC                                         ; DATA XREF: strchr↑r
.idata:004092E0 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004092E0                 extrn __imp_strcmp:dword
.idata:004092E0                                         ; DATA XREF: strcmp↑r
.idata:004092E4 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:004092E4                 extrn __imp_strcpy:dword
.idata:004092E4                                         ; DATA XREF: strcpy↑r
.idata:004092E8 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004092E8                 extrn __imp_strerror:dword
.idata:004092E8                                         ; DATA XREF: strerror↑r
.idata:004092EC ; size_t (__cdecl *strlen)(const char *Str)
.idata:004092EC                 extrn __imp_strlen:dword
.idata:004092EC                                         ; DATA XREF: strlen↑r
.idata:004092F0 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004092F0                 extrn __imp_strncmp:dword
.idata:004092F0                                         ; DATA XREF: strncmp↑r
.idata:004092F4 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004092F4                 extrn __imp_strrchr:dword
.idata:004092F4                                         ; DATA XREF: strrchr↑r
.idata:004092F8 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004092F8                 extrn __imp_vfprintf:dword
.idata:004092F8                                         ; DATA XREF: vfprintf↑r
.idata:004092FC
.idata:004092FC
.idata:004092FC
.idata:004092FC                 end start
