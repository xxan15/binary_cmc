.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : AE024C5D44F1518BD24E7203ABA846E7B8B3E76634BEADFDB040EF1C4C29BAC7
.text:00401000 ; Input MD5    : EDBF40CB46AF9B8D3237391E5A91466E
.text:00401000 ; Input CRC32  : A1990A97
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/dircolors.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A242 (Wed Apr 20 18:41:06 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00005AB0 (  23216.)
.text:00401000 ; Section size in file          : 00005C00 (  23552.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401F10+6F↓p
.text:00401040                                         ; .text:00406760↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_406700
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_407000
.text:004010A2                 mov     edx, dword_407060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_407004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_407080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_407080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4066D0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_407000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_407004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401F10
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_406700
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 byte_401280     db 0Ah                  ; DATA XREF: sub_401F10:loc_4021FC↓r
.text:00401281                 db 0Ch, 0Fh, 0Ch
.text:00401284                 dd 0E0E0E0Eh, 0D0D0D0Dh, 0A0B0D0Dh, 911100Ah, 0A0D0F0Bh
.text:00401284                 dd 907090Ah, 0A0A0A0Ah, 0A0F0C0Ch, 3 dup(0A0A0A0Ah), 0A0B0A0Ah
.text:00401284                 dd 2 dup(0A0A0A0Ah), 0A0A0A0Bh, 90A0A0Bh, 0B0A0A09h, 0A0A0A0Ah
.text:004012CC aTermLinux      db 'TERM linux',0       ; DATA XREF: .text:Buffer↓o
.text:004012D7 aTermLinuxC     db 'TERM linux-c',0     ; DATA XREF: .text:00401664↓o
.text:004012E4 aTermMachColor  db 'TERM mach-color',0  ; DATA XREF: .text:00401668↓o
.text:004012F4 aTermConsole    db 'TERM console',0     ; DATA XREF: .text:0040166C↓o
.text:00401301 aTermCon132x25  db 'TERM con132x25',0   ; DATA XREF: .text:00401670↓o
.text:00401310 aTermCon132x30  db 'TERM con132x30',0   ; DATA XREF: .text:00401674↓o
.text:0040131F aTermCon132x43  db 'TERM con132x43',0   ; DATA XREF: .text:00401678↓o
.text:0040132E aTermCon132x60  db 'TERM con132x60',0   ; DATA XREF: .text:0040167C↓o
.text:0040133D aTermCon80x25   db 'TERM con80x25',0    ; DATA XREF: .text:00401680↓o
.text:0040134B aTermCon80x28   db 'TERM con80x28',0    ; DATA XREF: .text:00401684↓o
.text:00401359 aTermCon80x30   db 'TERM con80x30',0    ; DATA XREF: .text:00401688↓o
.text:00401367 aTermCon80x43   db 'TERM con80x43',0    ; DATA XREF: .text:0040168C↓o
.text:00401375 aTermCon80x50   db 'TERM con80x50',0    ; DATA XREF: .text:00401690↓o
.text:00401383 aTermCon80x60   db 'TERM con80x60',0    ; DATA XREF: .text:00401694↓o
.text:00401391 aTermDtterm     db 'TERM dtterm',0      ; DATA XREF: .text:00401698↓o
.text:0040139D aTermPutty      db 'TERM putty',0       ; DATA XREF: .text:0040169C↓o
.text:004013A8 aTermXterm      db 'TERM xterm',0       ; DATA XREF: .text:004016A0↓o
.text:004013B3 aTermXtermColor db 'TERM xterm-color',0 ; DATA XREF: .text:004016A4↓o
.text:004013C4 aTermXtermDebia db 'TERM xterm-debian',0
.text:004013C4                                         ; DATA XREF: .text:004016A8↓o
.text:004013D6 aTermRxvt       db 'TERM rxvt',0        ; DATA XREF: .text:004016AC↓o
.text:004013E0 aTermScreen     db 'TERM screen',0      ; DATA XREF: .text:004016B0↓o
.text:004013EC aTermScreenBce  db 'TERM screen-bce',0  ; DATA XREF: .text:004016B4↓o
.text:004013FC aTermScreenW    db 'TERM screen-w',0    ; DATA XREF: .text:004016B8↓o
.text:0040140A aTermVt100      db 'TERM vt100',0       ; DATA XREF: .text:004016BC↓o
.text:00401415 aTermEterm      db 'TERM Eterm',0       ; DATA XREF: .text:004016C0↓o
.text:00401420 aNormal00       db 'NORMAL 00',0        ; DATA XREF: .text:004016C4↓o
.text:0040142A aFile00         db 'FILE 00',0          ; DATA XREF: .text:004016C8↓o
.text:00401432 aDir0134        db 'DIR 01;34',0        ; DATA XREF: .text:004016CC↓o
.text:0040143C aLink0136       db 'LINK 01;36',0       ; DATA XREF: .text:004016D0↓o
.text:00401447 aFifo4033       db 'FIFO 40;33',0       ; DATA XREF: .text:004016D4↓o
.text:00401452 aSock0135       db 'SOCK 01;35',0       ; DATA XREF: .text:004016D8↓o
.text:0040145D aDoor0135       db 'DOOR 01;35',0       ; DATA XREF: .text:004016DC↓o
.text:00401468 aBlk403301      db 'BLK 40;33;01',0     ; DATA XREF: .text:004016E0↓o
.text:00401475 aChr403301      db 'CHR 40;33;01',0     ; DATA XREF: .text:004016E4↓o
.text:00401482 aOrphan403101   db 'ORPHAN 40;31;01',0  ; DATA XREF: .text:004016E8↓o
.text:00401492 aExec0132       db 'EXEC 01;32',0       ; DATA XREF: .text:004016EC↓o
.text:0040149D aTar0131        db '.tar 01;31',0       ; DATA XREF: .text:004016F0↓o
.text:004014A8 aTgz0131        db '.tgz 01;31',0       ; DATA XREF: .text:004016F4↓o
.text:004014B3 aArj0131        db '.arj 01;31',0       ; DATA XREF: .text:004016F8↓o
.text:004014BE aTaz0131        db '.taz 01;31',0       ; DATA XREF: .text:004016FC↓o
.text:004014C9 aLzh0131        db '.lzh 01;31',0       ; DATA XREF: .text:00401700↓o
.text:004014D4 aZip0131        db '.zip 01;31',0       ; DATA XREF: .text:00401704↓o
.text:004014DF aZ0131          db '.z   01;31',0       ; DATA XREF: .text:00401708↓o
.text:004014EA aZ0131_0        db '.Z   01;31',0       ; DATA XREF: .text:0040170C↓o
.text:004014F5 aGz0131         db '.gz  01;31',0       ; DATA XREF: .text:00401710↓o
.text:00401500 aBz20131        db '.bz2 01;31',0       ; DATA XREF: .text:00401714↓o
.text:0040150B aDeb0131        db '.deb 01;31',0       ; DATA XREF: .text:00401718↓o
.text:00401516 aRpm0131        db '.rpm 01;31',0       ; DATA XREF: .text:0040171C↓o
.text:00401521 aJar0131        db '.jar 01;31',0       ; DATA XREF: .text:00401720↓o
.text:0040152C aJpg0135        db '.jpg 01;35',0       ; DATA XREF: .text:00401724↓o
.text:00401537 aJpeg0135       db '.jpeg 01;35',0      ; DATA XREF: .text:00401728↓o
.text:00401543 aGif0135        db '.gif 01;35',0       ; DATA XREF: .text:0040172C↓o
.text:0040154E aBmp0135        db '.bmp 01;35',0       ; DATA XREF: .text:00401730↓o
.text:00401559 aPbm0135        db '.pbm 01;35',0       ; DATA XREF: .text:00401734↓o
.text:00401564 aPgm0135        db '.pgm 01;35',0       ; DATA XREF: .text:00401738↓o
.text:0040156F aPpm0135        db '.ppm 01;35',0       ; DATA XREF: .text:0040173C↓o
.text:0040157A aTga0135        db '.tga 01;35',0       ; DATA XREF: .text:00401740↓o
.text:00401585 aXbm0135        db '.xbm 01;35',0       ; DATA XREF: .text:00401744↓o
.text:00401590 aXpm0135        db '.xpm 01;35',0       ; DATA XREF: .text:00401748↓o
.text:0040159B aTif0135        db '.tif 01;35',0       ; DATA XREF: .text:0040174C↓o
.text:004015A6 aTiff0135       db '.tiff 01;35',0      ; DATA XREF: .text:00401750↓o
.text:004015B2 aPng0135        db '.png 01;35',0       ; DATA XREF: .text:00401754↓o
.text:004015BD aMov0135        db '.mov 01;35',0       ; DATA XREF: .text:00401758↓o
.text:004015C8 aMpg0135        db '.mpg 01;35',0       ; DATA XREF: .text:0040175C↓o
.text:004015D3 aMpeg0135       db '.mpeg 01;35',0      ; DATA XREF: .text:00401760↓o
.text:004015DF aAvi0135        db '.avi 01;35',0       ; DATA XREF: .text:00401764↓o
.text:004015EA aFli0135        db '.fli 01;35',0       ; DATA XREF: .text:00401768↓o
.text:004015F5 aGl0135         db '.gl 01;35',0        ; DATA XREF: .text:0040176C↓o
.text:004015FF aDl0135         db '.dl 01;35',0        ; DATA XREF: .text:00401770↓o
.text:00401609 aXcf0135        db '.xcf 01;35',0       ; DATA XREF: .text:00401774↓o
.text:00401614 aXwd0135        db '.xwd 01;35',0       ; DATA XREF: .text:00401778↓o
.text:0040161F aFlac0135       db '.flac 01;35',0      ; DATA XREF: .text:0040177C↓o
.text:0040162B aMp30135        db '.mp3 01;35',0       ; DATA XREF: .text:00401780↓o
.text:00401636 aMpc0135        db '.mpc 01;35',0       ; DATA XREF: .text:00401784↓o
.text:00401641 aOgg0135        db '.ogg 01;35',0       ; DATA XREF: .text:00401788↓o
.text:0040164C aWav0135        db '.wav 01;35',0       ; DATA XREF: .text:0040178C↓o
.text:00401657                 align 10h               ; DATA XREF: sub_402730:loc_402B41↓r
.text:00401660 ; void *const Buffer
.text:00401660 Buffer          dd offset aTermLinux    ; DATA XREF: sub_401F10+301↓r
.text:00401660                                         ; "TERM linux"
.text:00401664                 dd offset aTermLinuxC   ; "TERM linux-c"
.text:00401668                 dd offset aTermMachColor ; "TERM mach-color"
.text:0040166C                 dd offset aTermConsole  ; "TERM console"
.text:00401670                 dd offset aTermCon132x25 ; "TERM con132x25"
.text:00401674                 dd offset aTermCon132x30 ; "TERM con132x30"
.text:00401678                 dd offset aTermCon132x43 ; "TERM con132x43"
.text:0040167C                 dd offset aTermCon132x60 ; "TERM con132x60"
.text:00401680                 dd offset aTermCon80x25 ; "TERM con80x25"
.text:00401684                 dd offset aTermCon80x28 ; "TERM con80x28"
.text:00401688                 dd offset aTermCon80x30 ; "TERM con80x30"
.text:0040168C                 dd offset aTermCon80x43 ; "TERM con80x43"
.text:00401690                 dd offset aTermCon80x50 ; "TERM con80x50"
.text:00401694                 dd offset aTermCon80x60 ; "TERM con80x60"
.text:00401698                 dd offset aTermDtterm   ; "TERM dtterm"
.text:0040169C                 dd offset aTermPutty    ; "TERM putty"
.text:004016A0                 dd offset aTermXterm    ; "TERM xterm"
.text:004016A4                 dd offset aTermXtermColor ; "TERM xterm-color"
.text:004016A8                 dd offset aTermXtermDebia ; "TERM xterm-debian"
.text:004016AC                 dd offset aTermRxvt     ; "TERM rxvt"
.text:004016B0                 dd offset aTermScreen   ; "TERM screen"
.text:004016B4                 dd offset aTermScreenBce ; "TERM screen-bce"
.text:004016B8                 dd offset aTermScreenW  ; "TERM screen-w"
.text:004016BC                 dd offset aTermVt100    ; "TERM vt100"
.text:004016C0                 dd offset aTermEterm    ; "TERM Eterm"
.text:004016C4                 dd offset aNormal00     ; "NORMAL 00"
.text:004016C8                 dd offset aFile00       ; "FILE 00"
.text:004016CC                 dd offset aDir0134      ; "DIR 01;34"
.text:004016D0                 dd offset aLink0136     ; "LINK 01;36"
.text:004016D4                 dd offset aFifo4033     ; "FIFO 40;33"
.text:004016D8                 dd offset aSock0135     ; "SOCK 01;35"
.text:004016DC                 dd offset aDoor0135     ; "DOOR 01;35"
.text:004016E0                 dd offset aBlk403301    ; "BLK 40;33;01"
.text:004016E4                 dd offset aChr403301    ; "CHR 40;33;01"
.text:004016E8                 dd offset aOrphan403101 ; "ORPHAN 40;31;01"
.text:004016EC                 dd offset aExec0132     ; "EXEC 01;32"
.text:004016F0                 dd offset aTar0131      ; ".tar 01;31"
.text:004016F4                 dd offset aTgz0131      ; ".tgz 01;31"
.text:004016F8                 dd offset aArj0131      ; ".arj 01;31"
.text:004016FC                 dd offset aTaz0131      ; ".taz 01;31"
.text:00401700                 dd offset aLzh0131      ; ".lzh 01;31"
.text:00401704                 dd offset aZip0131      ; ".zip 01;31"
.text:00401708                 dd offset aZ0131        ; ".z   01;31"
.text:0040170C                 dd offset aZ0131_0      ; ".Z   01;31"
.text:00401710                 dd offset aGz0131       ; ".gz  01;31"
.text:00401714                 dd offset aBz20131      ; ".bz2 01;31"
.text:00401718                 dd offset aDeb0131      ; ".deb 01;31"
.text:0040171C                 dd offset aRpm0131      ; ".rpm 01;31"
.text:00401720                 dd offset aJar0131      ; ".jar 01;31"
.text:00401724                 dd offset aJpg0135      ; ".jpg 01;35"
.text:00401728                 dd offset aJpeg0135     ; ".jpeg 01;35"
.text:0040172C                 dd offset aGif0135      ; ".gif 01;35"
.text:00401730                 dd offset aBmp0135      ; ".bmp 01;35"
.text:00401734                 dd offset aPbm0135      ; ".pbm 01;35"
.text:00401738                 dd offset aPgm0135      ; ".pgm 01;35"
.text:0040173C                 dd offset aPpm0135      ; ".ppm 01;35"
.text:00401740                 dd offset aTga0135      ; ".tga 01;35"
.text:00401744                 dd offset aXbm0135      ; ".xbm 01;35"
.text:00401748                 dd offset aXpm0135      ; ".xpm 01;35"
.text:0040174C                 dd offset aTif0135      ; ".tif 01;35"
.text:00401750                 dd offset aTiff0135     ; ".tiff 01;35"
.text:00401754                 dd offset aPng0135      ; ".png 01;35"
.text:00401758                 dd offset aMov0135      ; ".mov 01;35"
.text:0040175C                 dd offset aMpg0135      ; ".mpg 01;35"
.text:00401760                 dd offset aMpeg0135     ; ".mpeg 01;35"
.text:00401764                 dd offset aAvi0135      ; ".avi 01;35"
.text:00401768                 dd offset aFli0135      ; ".fli 01;35"
.text:0040176C                 dd offset aGl0135       ; ".gl 01;35"
.text:00401770                 dd offset aDl0135       ; ".dl 01;35"
.text:00401774                 dd offset aXcf0135      ; ".xcf 01;35"
.text:00401778                 dd offset aXwd0135      ; ".xwd 01;35"
.text:0040177C                 dd offset aFlac0135     ; ".flac 01;35"
.text:00401780                 dd offset aMp30135      ; ".mp3 01;35"
.text:00401784                 dd offset aMpc0135      ; ".mpc 01;35"
.text:00401788                 dd offset aOgg0135      ; ".ogg 01;35"
.text:0040178C                 dd offset aWav0135      ; ".wav 01;35"
.text:00401790 aNormal         db 'NORMAL',0           ; DATA XREF: .text:off_401820↓o
.text:00401797 aNorm           db 'NORM',0             ; DATA XREF: .text:00401824↓o
.text:0040179C aFile           db 'FILE',0             ; DATA XREF: .text:00401828↓o
.text:004017A1 aDir            db 'DIR',0              ; DATA XREF: .text:0040182C↓o
.text:004017A5 aLnk            db 'LNK',0              ; DATA XREF: .text:00401830↓o
.text:004017A9 aLink           db 'LINK',0             ; DATA XREF: .text:00401834↓o
.text:004017AE aSymlink        db 'SYMLINK',0          ; DATA XREF: .text:00401838↓o
.text:004017B6 aOrphan         db 'ORPHAN',0           ; DATA XREF: .text:0040183C↓o
.text:004017BD aMissing        db 'MISSING',0          ; DATA XREF: .text:00401840↓o
.text:004017C5 aFifo           db 'FIFO',0             ; DATA XREF: .text:00401844↓o
.text:004017CA aPipe           db 'PIPE',0             ; DATA XREF: .text:00401848↓o
.text:004017CF aSock           db 'SOCK',0             ; DATA XREF: .text:0040184C↓o
.text:004017D4 aBlk            db 'BLK',0              ; DATA XREF: .text:00401850↓o
.text:004017D8 aBlock          db 'BLOCK',0            ; DATA XREF: .text:00401854↓o
.text:004017DE aChr            db 'CHR',0              ; DATA XREF: .text:00401858↓o
.text:004017E2 aChar           db 'CHAR',0             ; DATA XREF: .text:0040185C↓o
.text:004017E7 aDoor           db 'DOOR',0             ; DATA XREF: .text:00401860↓o
.text:004017EC aExec           db 'EXEC',0             ; DATA XREF: .text:00401864↓o
.text:004017F1 aLeft           db 'LEFT',0             ; DATA XREF: .text:00401868↓o
.text:004017F6 aLeftcode       db 'LEFTCODE',0         ; DATA XREF: .text:0040186C↓o
.text:004017FF aRight          db 'RIGHT',0            ; DATA XREF: .text:00401870↓o
.text:00401805 aRightcode      db 'RIGHTCODE',0        ; DATA XREF: .text:00401874↓o
.text:0040180F aEnd            db 'END',0              ; DATA XREF: .text:00401878↓o
.text:00401813 aEndcode        db 'ENDCODE',0          ; DATA XREF: .text:0040187C↓o
.text:0040181B                 align 10h
.text:00401820 ; char *const off_401820
.text:00401820 off_401820      dd offset aNormal       ; DATA XREF: sub_402730+19D↓r
.text:00401820                                         ; sub_402730+1C1↓r ...
.text:00401820                                         ; "NORMAL"
.text:00401824                 dd offset aNorm         ; "NORM"
.text:00401828                 dd offset aFile         ; "FILE"
.text:0040182C                 dd offset aDir          ; "DIR"
.text:00401830                 dd offset aLnk          ; "LNK"
.text:00401834                 dd offset aLink         ; "LINK"
.text:00401838                 dd offset aSymlink      ; "SYMLINK"
.text:0040183C                 dd offset aOrphan       ; "ORPHAN"
.text:00401840                 dd offset aMissing      ; "MISSING"
.text:00401844                 dd offset aFifo         ; "FIFO"
.text:00401848                 dd offset aPipe         ; "PIPE"
.text:0040184C                 dd offset aSock         ; "SOCK"
.text:00401850                 dd offset aBlk          ; "BLK"
.text:00401854                 dd offset aBlock        ; "BLOCK"
.text:00401858                 dd offset aChr          ; "CHR"
.text:0040185C                 dd offset aChar         ; "CHAR"
.text:00401860                 dd offset aDoor         ; "DOOR"
.text:00401864                 dd offset aExec         ; "EXEC"
.text:00401868                 dd offset aLeft         ; "LEFT"
.text:0040186C                 dd offset aLeftcode     ; "LEFTCODE"
.text:00401870                 dd offset aRight        ; "RIGHT"
.text:00401874                 dd offset aRightcode    ; "RIGHTCODE"
.text:00401878                 dd offset aEnd          ; "END"
.text:0040187C                 dd offset aEndcode      ; "ENDCODE"
.text:00401880                 dd 0
.text:00401884 dword_401884    dd 66006F6Eh, 69640069h, 6E6C00h, 6D00726Fh, 69700069h
.text:00401884                                         ; DATA XREF: .text:off_4018C0↓o
.text:00401884                                         ; .text:004018C4↓o ...
.text:00401884                 dd 6F7300h, 63006462h, 6F640064h, 786500h, 7200636Ch, 63650063h
.text:00401884                 dd 900DEB00h, 3 dup(90909090h)
.text:004018C0 off_4018C0      dd offset dword_401884  ; DATA XREF: sub_402730:loc_40298C↓r
.text:004018C4                 dd offset dword_401884
.text:004018C8                 dd offset dword_401884+3
.text:004018CC                 dd offset dword_401884+6
.text:004018D0                 dd offset dword_401884+9
.text:004018D4                 dd offset dword_401884+9
.text:004018D8                 dd offset dword_401884+9
.text:004018DC                 dd offset dword_401884+0Ch
.text:004018E0                 dd offset dword_401884+0Fh
.text:004018E4                 dd offset dword_401884+12h
.text:004018E8                 dd offset dword_401884+12h
.text:004018EC                 dd offset dword_401884+15h
.text:004018F0                 dd offset dword_401884+18h
.text:004018F4                 dd offset dword_401884+18h
.text:004018F8                 dd offset dword_401884+1Bh
.text:004018FC                 dd offset dword_401884+1Bh
.text:00401900                 dd offset dword_401884+1Eh
.text:00401904                 dd offset dword_401884+21h
.text:00401908                 dd offset dword_401884+24h
.text:0040190C                 dd offset dword_401884+24h
.text:00401910                 dd offset dword_401884+27h
.text:00401914                 dd offset dword_401884+27h
.text:00401918                 dd offset dword_401884+2Ah
.text:0040191C                 dd offset dword_401884+2Ah
.text:00401920 aBourneShell    db 'bourne-shell',0     ; DATA XREF: .text:off_401960↓o
.text:0040192D aSh             db 'sh',0               ; DATA XREF: .text:00401970↓o
.text:00401930 aCsh            db 'csh',0              ; DATA XREF: .text:00401980↓o
.text:00401930                                         ; sub_401F10+5F4↓o
.text:00401934 aCShell         db 'c-shell',0          ; DATA XREF: .text:00401990↓o
.text:0040193C aPrintDatabase  db 'print-database',0   ; DATA XREF: .text:004019A0↓o
.text:0040194B aHelp           db 'help',0             ; DATA XREF: .text:004019B0↓o
.text:00401950 aVersion        db 'version',0          ; DATA XREF: .text:004019C0↓o
.text:00401958                 align 10h
.text:00401960 off_401960      dd offset aBourneShell  ; DATA XREF: sub_401F10+8B↓o
.text:00401960                                         ; "bourne-shell"
.text:00401964                 dd 2 dup(0)
.text:0040196C                 dd 62h
.text:00401970                 dd offset aSh           ; "sh"
.text:00401974                 dd 2 dup(0)
.text:0040197C                 dd 62h
.text:00401980                 dd offset aCsh          ; "csh"
.text:00401984                 dd 2 dup(0)
.text:0040198C                 dd 63h
.text:00401990                 dd offset aCShell       ; "c-shell"
.text:00401994                 dd 2 dup(0)
.text:0040199C                 dd 63h
.text:004019A0                 dd offset aPrintDatabase ; "print-database"
.text:004019A4                 dd 2 dup(0)
.text:004019AC                 dd 70h
.text:004019B0                 dd offset aHelp         ; "help"
.text:004019B4                 dd 2 dup(0)
.text:004019BC                 dd 0FFFFFF7Eh
.text:004019C0                 dd offset aVersion      ; "version"
.text:004019C4                 dd 2 dup(0)
.text:004019CC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004019E0 ; const char Locale
.text:004019E0 Locale          db 0                    ; DATA XREF: sub_401F10+32↓o
.text:004019E1                 align 20h
.text:00401A00 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401A00                                         ; DATA XREF: sub_401F10+46↓o
.text:00401A23 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401F10+4E↓o
.text:00401A23                                         ; sub_401F10+5B↓o
.text:00401A2D ; const char aBcp[]
.text:00401A2D aBcp            db 'bcp',0              ; DATA XREF: sub_401F10+93↓o
.text:00401A31                 db 0EBh, 0Dh, 90h
.text:00401A34                 align 10h
.text:00401A40 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401A40                                         ; DATA XREF: sub_401F10:loc_401FDC↓o
.text:00401A40                                         ; .text:0040257F↓o
.text:00401A67 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]',0Ah,0
.text:00401A67                                         ; DATA XREF: sub_401F10+122↓o
.text:00401A67                                         ; .text:loc_4025B3↓o
.text:00401A85                 align 20h
.text:00401AA0 aOutputCommands db 'Output commands to set the LS_COLORS environment variable.',0Ah
.text:00401AA0                                         ; DATA XREF: sub_401F10+141↓o
.text:00401AA0                                         ; .text:004025D2↓o
.text:00401AA0                 db 0Ah
.text:00401AA0                 db 'Determine format of output:',0Ah
.text:00401AA0                 db '  -b, --sh, --bourne-shell    output Bourne shell code to set LS_'
.text:00401AA0                 db 'COLORS',0Ah
.text:00401AA0                 db '  -c, --csh, --c-shell        output C shell code to set LS_COLOR'
.text:00401AA0                 db 'S',0Ah
.text:00401AA0                 db '  -p, --print-database        output defaults',0Ah,0
.text:00401BB2                 align 10h
.text:00401BC0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401BC0                                         ; DATA XREF: sub_401F10+163↓o
.text:00401BC0                                         ; .text:004025F4↓o
.text:00401BED                 align 20h
.text:00401C00 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401C00                                         ; DATA XREF: sub_401F10+185↓o
.text:00401C00                                         ; .text:00402616↓o
.text:00401C36                 align 10h
.text:00401C40 aIfFileIsSpecif db 0Ah                  ; DATA XREF: sub_401F10+1A7↓o
.text:00401C40                                         ; .text:00402638↓o
.text:00401C40                 db 'If FILE is specified, read it to determine which colors to use fo'
.text:00401C40                 db 'r which',0Ah
.text:00401C40                 db 'file types and extensions.  Otherwise, a precompiled database is '
.text:00401C40                 db 'used.',0Ah
.text:00401C40                 db 'For details on the format of these files, run `dircolors --print-'
.text:00401C40                 db 'database',27h,'.',0Ah,0
.text:00401D1E aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401F10+1C9↓o
.text:00401D1E                                         ; .text:0040265A↓o
.text:00401D1E                 db 'Report bugs to <%s>.',0Ah,0
.text:00401D35 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401D35                                         ; DATA XREF: sub_401F10+1D6↓o
.text:00401D35                                         ; .text:00402667↓o
.text:00401D4B aHPeterAnvin    db 'H. Peter Anvin',0   ; DATA XREF: sub_401F10+200↓o
.text:00401D5A a530            db '5.3.0',0            ; DATA XREF: sub_401F10+208↓o
.text:00401D60 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401F10+213↓o
.text:00401D6E ; const FILE stru_401D6E
.text:00401D6E stru_401D6E     FILE <63726964h, 726F6C6Fh, 78650073h, 20617274h, 7265706Fh, \
.text:00401D6E                                         ; DATA XREF: sub_401F10+21B↓o
.text:00401D6E                                         ; sub_401F10+27C↓o
.text:00401D6E                       20646E61h, 90007325h, 90909090h>
.text:00401D8E                 db  90h
.text:00401D8F                 db  90h
.text:00401D90                 db  90h
.text:00401D91                 db  90h
.text:00401D92                 db  90h
.text:00401D93                 db  90h
.text:00401D94                 db  90h
.text:00401D95                 db  90h
.text:00401D96                 db  90h
.text:00401D97                 db  90h
.text:00401D98                 db  90h
.text:00401D99                 db  90h
.text:00401D9A                 db  90h
.text:00401D9B                 db  90h
.text:00401D9C                 db  90h
.text:00401D9D                 db  90h
.text:00401D9E                 db  90h
.text:00401D9F                 db  90h
.text:00401DA0 aFileOperandsCa db 'File operands cannot be combined with --print-database (-p).',0
.text:00401DA0                                         ; DATA XREF: sub_401F10+2B1↓o
.text:00401DDD ; const char Format[]
.text:00401DDD Format          db '%s',0Ah,0           ; DATA XREF: sub_401F10+2BE↓o
.text:00401DE1 aStandardInput  db 'standard input',0   ; DATA XREF: sub_401F10+36C↓o
.text:00401DF0 asc_401DF0      db '-',0                ; DATA XREF: sub_401F10+3F7↓o
.text:00401DF2 ; const char aLsColors[]
.text:00401DF2 aLsColors       db 'LS_COLORS=',27h,0   ; DATA XREF: sub_401F10+4AF↓o
.text:00401DFE ; const char aExportLsColors[]
.text:00401DFE aExportLsColors db 27h,';',0Ah          ; DATA XREF: sub_401F10+4B4↓o
.text:00401DFE                 db 'export LS_COLORS',0Ah,0
.text:00401E13 aSetenvLsColors db 'setenv LS_COLORS ',27h,0
.text:00401E13                                         ; DATA XREF: sub_401F10:loc_402419↓o
.text:00401E26 asc_401E26      db 27h,0Ah,0            ; DATA XREF: sub_401F10+50E↓o
.text:00401E29 ; const char aS[]
.text:00401E29 aS              db '%s',0               ; DATA XREF: sub_401F10+534↓o
.text:00401E2C ; const char aR[]
.text:00401E2C aR              db 'r',0                ; DATA XREF: sub_401F10:loc_402465↓o
.text:00401E2E ; const char VarName[]
.text:00401E2E VarName         db 'SHELL',0            ; DATA XREF: sub_401F10:loc_4024A3↓o
.text:00401E34                 align 10h
.text:00401E40 aNoShellEnviron db 'no SHELL environment variable, and no shell type option given',0
.text:00401E40                                         ; DATA XREF: sub_401F10+5BC↓o
.text:00401E7E aTcsh           db 'tcsh',0             ; DATA XREF: sub_401F10+60D↓o
.text:00401E83                 align 20h
.text:00401EA0 aTheOptionsToOu db 'the options to output dircolors',27h,' internal database and',0Ah
.text:00401EA0                                         ; DATA XREF: sub_401F10:loc_402540↓o
.text:00401EA0                 db 'to select a shell syntax are mutually exclusive',0
.text:00401F07                 align 10h
.text:00401F10
.text:00401F10 ; =============== S U B R O U T I N E =======================================
.text:00401F10
.text:00401F10 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401F10
.text:00401F10 sub_401F10      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401F10
.text:00401F10 Category        = dword ptr -48h
.text:00401F10 Locale          = dword ptr -44h
.text:00401F10 ElementCount    = dword ptr -40h
.text:00401F10 Stream          = dword ptr -3Ch
.text:00401F10 var_38          = byte ptr -38h
.text:00401F10 var_34          = dword ptr -34h
.text:00401F10 FileName        = dword ptr -28h
.text:00401F10 var_24          = dword ptr -24h
.text:00401F10 var_20          = dword ptr -20h
.text:00401F10 var_19          = byte ptr -19h
.text:00401F10 var_E           = byte ptr -0Eh
.text:00401F10 var_D           = byte ptr -0Dh
.text:00401F10 arg_0           = dword ptr  8
.text:00401F10 arg_4           = dword ptr  0Ch
.text:00401F10
.text:00401F10                 push    ebp
.text:00401F11                 xor     eax, eax
.text:00401F13                 mov     ebp, esp
.text:00401F15                 push    edi
.text:00401F16                 push    esi
.text:00401F17                 push    ebx
.text:00401F18                 sub     esp, 3Ch
.text:00401F1B                 mov     ebx, [ebp+arg_4]
.text:00401F1E                 and     esp, 0FFFFFFF0h
.text:00401F21                 call    __alloca
.text:00401F26                 call    sub_4067A0
.text:00401F2B                 mov     [ebp+var_D], 1
.text:00401F2F                 mov     edx, [ebx]
.text:00401F31                 mov     [ebp+var_20], 2
.text:00401F38                 mov     [ebp+var_E], 0
.text:00401F3C                 mov     ds:dword_4081D0, edx
.text:00401F42                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:00401F4A                 mov     [esp+48h+Category], 0 ; Category
.text:00401F51                 call    setlocale
.text:00401F56                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401F5E                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:00401F65                 call    ds:libintl_bindtextdomain
.text:00401F6B                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:00401F72                 call    ds:libintl_textdomain
.text:00401F78                 mov     [esp+48h+Category], offset sub_404470 ; void (__cdecl *)()
.text:00401F7F                 call    sub_401040
.text:00401F84                 lea     esi, [esi+0]
.text:00401F8A                 lea     edi, [edi+0]
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_401F10+CA↓j
.text:00401F90                                         ; sub_401F10+10B↓j ...
.text:00401F90                 mov     dword ptr [esp+48h+var_38], 0 ; int
.text:00401F98                 mov     esi, [ebp+arg_0]
.text:00401F9B                 mov     [esp+48h+Stream], offset off_401960 ; char
.text:00401FA3                 mov     [esp+48h+ElementCount], offset aBcp ; "bcp"
.text:00401FAB                 mov     [esp+48h+Locale], ebx ; int
.text:00401FAF                 mov     [esp+48h+Category], esi ; int
.text:00401FB2                 call    sub_404300
.text:00401FB7                 cmp     eax, 0FFFFFFFFh
.text:00401FBA                 jz      loc_40214C
.text:00401FC0                 cmp     eax, 62h ; 'b'
.text:00401FC3                 jz      loc_402140
.text:00401FC9                 cmp     eax, 62h ; 'b'
.text:00401FCC                 jle     short loc_402020
.text:00401FCE                 cmp     eax, 63h ; 'c'
.text:00401FD1                 jz      short loc_402014
.text:00401FD3                 mov     [ebp+var_E], 1
.text:00401FD7                 cmp     eax, 70h ; 'p'
.text:00401FDA                 jz      short loc_401F90
.text:00401FDC
.text:00401FDC loc_401FDC:                             ; CODE XREF: sub_401F10+120↓j
.text:00401FDC                                         ; sub_401F10+2AB↓j ...
.text:00401FDC                 mov     [esp+48h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401FE3                 call    ds:libintl_gettext
.text:00401FE9                 mov     ebx, ds:_iob
.text:00401FEF                 mov     ecx, ds:dword_4081D0
.text:00401FF5                 add     ebx, 40h ; '@'
.text:00401FF8                 mov     [esp+48h+ElementCount], ecx
.text:00401FFC                 mov     [esp+48h+Locale], eax ; Format
.text:00402000                 mov     [esp+48h+Category], ebx ; Stream
.text:00402003                 call    fprintf
.text:00402008                 mov     [esp+48h+Category], 1 ; Code
.text:0040200F
.text:0040200F loc_40200F:                             ; CODE XREF: sub_401F10+1ED↓j
.text:0040200F                                         ; sub_401F10+356↓j
.text:0040200F                 call    exit
.text:00402014 ; ---------------------------------------------------------------------------
.text:00402014
.text:00402014 loc_402014:                             ; CODE XREF: sub_401F10+C1↑j
.text:00402014                 mov     [ebp+var_20], 1
.text:0040201B                 jmp     loc_401F90
.text:00402020 ; ---------------------------------------------------------------------------
.text:00402020
.text:00402020 loc_402020:                             ; CODE XREF: sub_401F10+BC↑j
.text:00402020                 cmp     eax, 0FFFFFF7Dh
.text:00402025                 jz      loc_402102
.text:0040202B                 cmp     eax, 0FFFFFF7Eh
.text:00402030                 jnz     short loc_401FDC
.text:00402032                 mov     [esp+48h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n"
.text:00402039                 call    ds:libintl_gettext
.text:0040203F                 mov     ecx, ds:dword_4081D0
.text:00402045                 mov     [esp+48h+Category], eax ; Format
.text:00402048                 mov     [esp+48h+Locale], ecx
.text:0040204C                 call    printf
.text:00402051                 mov     [esp+48h+Category], offset aOutputCommands ; "Output commands to set the LS_COLORS en"...
.text:00402058                 call    ds:libintl_gettext
.text:0040205E                 mov     edi, ds:_iob
.text:00402064                 add     edi, 20h ; ' '
.text:00402067                 mov     [esp+48h+Locale], edi ; Stream
.text:0040206B                 mov     [esp+48h+Category], eax ; Buffer
.text:0040206E                 call    fputs
.text:00402073                 mov     [esp+48h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040207A                 call    ds:libintl_gettext
.text:00402080                 mov     esi, ds:_iob
.text:00402086                 add     esi, 20h ; ' '
.text:00402089                 mov     [esp+48h+Locale], esi ; Stream
.text:0040208D                 mov     [esp+48h+Category], eax ; Buffer
.text:00402090                 call    fputs
.text:00402095                 mov     [esp+48h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040209C                 call    ds:libintl_gettext
.text:004020A2                 mov     ebx, ds:_iob
.text:004020A8                 add     ebx, 20h ; ' '
.text:004020AB                 mov     [esp+48h+Locale], ebx ; Stream
.text:004020AF                 mov     [esp+48h+Category], eax ; Buffer
.text:004020B2                 call    fputs
.text:004020B7                 mov     [esp+48h+Category], offset aIfFileIsSpecif ; "\nIf FILE is specified, read it to dete"...
.text:004020BE                 call    ds:libintl_gettext
.text:004020C4                 mov     ecx, ds:_iob
.text:004020CA                 add     ecx, 20h ; ' '
.text:004020CD                 mov     [esp+48h+Locale], ecx ; Stream
.text:004020D1                 mov     [esp+48h+Category], eax ; Buffer
.text:004020D4                 call    fputs
.text:004020D9                 mov     [esp+48h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004020E0                 call    ds:libintl_gettext
.text:004020E6                 mov     [esp+48h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004020EE                 mov     [esp+48h+Category], eax ; Format
.text:004020F1                 call    printf
.text:004020F6
.text:004020F6 loc_4020F6:                             ; CODE XREF: sub_401F10+22B↓j
.text:004020F6                 mov     [esp+48h+Category], 0
.text:004020FD                 jmp     loc_40200F
.text:00402102 ; ---------------------------------------------------------------------------
.text:00402102
.text:00402102 loc_402102:                             ; CODE XREF: sub_401F10+115↑j
.text:00402102                 mov     [esp+48h+var_34], 0
.text:0040210A                 mov     edx, ds:_iob
.text:00402110                 mov     dword ptr [esp+48h+var_38], offset aHPeterAnvin ; "H. Peter Anvin"
.text:00402118                 mov     [esp+48h+Stream], offset a530 ; "5.3.0"
.text:00402120                 add     edx, 20h ; ' '
.text:00402123                 mov     [esp+48h+ElementCount], offset aGnuCoreutils ; "GNU coreutils"
.text:0040212B                 mov     [esp+48h+Locale], offset stru_401D6E ; FILE *
.text:00402133                 mov     [esp+48h+Category], edx ; FILE *
.text:00402136                 call    sub_4042C0
.text:0040213B                 jmp     short loc_4020F6
.text:0040213B ; ---------------------------------------------------------------------------
.text:0040213D                 align 10h
.text:00402140
.text:00402140 loc_402140:                             ; CODE XREF: sub_401F10+B3↑j
.text:00402140                 mov     [ebp+var_20], 0
.text:00402147                 jmp     loc_401F90
.text:0040214C ; ---------------------------------------------------------------------------
.text:0040214C
.text:0040214C loc_40214C:                             ; CODE XREF: sub_401F10+AA↑j
.text:0040214C                 mov     edi, dword_407010
.text:00402152                 sub     [ebp+arg_0], edi
.text:00402155                 cmp     [ebp+var_E], 0
.text:00402159                 lea     ebx, [ebx+edi*4]
.text:0040215C                 jz      short loc_402168
.text:0040215E                 cmp     [ebp+var_20], 2
.text:00402162                 jnz     loc_402540
.text:00402168
.text:00402168 loc_402168:                             ; CODE XREF: sub_401F10+24C↑j
.text:00402168                 movzx   ecx, [ebp+var_E]
.text:0040216C                 xor     cl, 1
.text:0040216F                 movzx   edx, cl
.text:00402172                 cmp     edx, [ebp+arg_0]
.text:00402175                 jge     short loc_4021F0
.text:00402177                 cmp     [ebp+var_E], 0
.text:0040217B                 mov     eax, ebx
.text:0040217D                 jnz     short loc_402182
.text:0040217F                 lea     eax, [ebx+4]
.text:00402182
.text:00402182 loc_402182:                             ; CODE XREF: sub_401F10+26D↑j
.text:00402182                 mov     edi, [eax]
.text:00402184                 mov     [esp+48h+Category], edi ; char *
.text:00402187                 call    sub_404580
.text:0040218C                 mov     [esp+48h+Category], (offset stru_401D6E._base+2)
.text:00402193                 mov     esi, eax
.text:00402195                 call    ds:libintl_gettext
.text:0040219B                 mov     [esp+48h+Stream], esi ; char
.text:0040219F                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:004021A7                 mov     [esp+48h+Category], 0 ; Code
.text:004021AE                 mov     [esp+48h+ElementCount], eax ; char *
.text:004021B2                 call    sub_405DB0
.text:004021B7                 cmp     [ebp+var_E], 0
.text:004021BB                 jz      loc_401FDC
.text:004021C1                 mov     [esp+48h+Category], offset aFileOperandsCa ; "File operands cannot be combined with -"...
.text:004021C8                 call    ds:libintl_gettext
.text:004021CE                 mov     [esp+48h+Locale], offset Format ; "%s\n"
.text:004021D6                 mov     ebx, ds:_iob
.text:004021DC                 add     ebx, 40h ; '@'
.text:004021DF                 mov     [esp+48h+ElementCount], eax
.text:004021E3                 mov     [esp+48h+Category], ebx ; Stream
.text:004021E6                 call    fprintf
.text:004021EB                 jmp     loc_401FDC
.text:004021F0 ; ---------------------------------------------------------------------------
.text:004021F0
.text:004021F0 loc_4021F0:                             ; CODE XREF: sub_401F10+265↑j
.text:004021F0                 cmp     [ebp+var_E], 0
.text:004021F4                 jz      loc_4022C3
.text:004021FA                 xor     ebx, ebx
.text:004021FC
.text:004021FC loc_4021FC:                             ; CODE XREF: sub_401F10+33F↓j
.text:004021FC                 movzx   edi, ds:byte_401280[ebx]
.text:00402203                 mov     [esp+48h+Locale], 1 ; ElementSize
.text:0040220B                 mov     ecx, ds:_iob
.text:00402211                 mov     esi, ds:Buffer[ebx*4]
.text:00402218                 mov     [esp+48h+ElementCount], edi ; ElementCount
.text:0040221C                 add     ecx, 20h ; ' '
.text:0040221F                 mov     [esp+48h+Stream], ecx ; char
.text:00402223                 mov     [esp+48h+Category], esi ; Buffer
.text:00402226                 call    fwrite
.text:0040222B                 mov     edx, ds:_iob
.text:00402231                 mov     ecx, [edx+24h]
.text:00402234                 dec     ecx
.text:00402235                 mov     [edx+24h], ecx
.text:00402238                 test    ecx, ecx
.text:0040223A                 js      short loc_4022A8
.text:0040223C                 mov     esi, ds:_iob
.text:00402242                 mov     eax, [esi+20h]
.text:00402245                 mov     byte ptr [eax], 0Ah
.text:00402248                 inc     dword ptr [esi+20h]
.text:0040224B
.text:0040224B loc_40224B:                             ; CODE XREF: sub_401F10+3B1↓j
.text:0040224B                 inc     ebx
.text:0040224C                 cmp     ebx, 4Bh ; 'K'
.text:0040224F                 jle     short loc_4021FC
.text:00402251
.text:00402251 loc_402251:                             ; CODE XREF: sub_401F10+451↓j
.text:00402251                                         ; sub_401F10+504↓j
.text:00402251                 cmp     ds:byte_408030, 0
.text:00402258                 jnz     short loc_40226B
.text:0040225A
.text:0040225A loc_40225A:                             ; CODE XREF: sub_401F10+36A↓j
.text:0040225A                                         ; sub_401F10+396↓j
.text:0040225A                 xor     ebx, ebx
.text:0040225C                 cmp     [ebp+var_D], 0
.text:00402260                 setz    bl
.text:00402263                 mov     [esp+48h+Category], ebx
.text:00402266                 jmp     loc_40200F
.text:0040226B ; ---------------------------------------------------------------------------
.text:0040226B
.text:0040226B loc_40226B:                             ; CODE XREF: sub_401F10+348↑j
.text:0040226B                 mov     edi, ds:_iob
.text:00402271                 mov     [esp+48h+Category], edi ; Stream
.text:00402274                 call    fclose
.text:00402279                 inc     eax
.text:0040227A                 jnz     short loc_40225A
.text:0040227C                 mov     [esp+48h+Category], offset aStandardInput ; "standard input"
.text:00402283                 call    ds:libintl_gettext
.text:00402289                 mov     esi, eax
.text:0040228B                 call    _errno
.text:00402290                 mov     [esp+48h+ElementCount], esi ; char *
.text:00402294                 mov     edx, [eax]
.text:00402296                 mov     [esp+48h+Category], 1 ; Code
.text:0040229D                 mov     [esp+48h+Locale], edx ; ErrorMessage
.text:004022A1                 call    sub_405DB0
.text:004022A6                 jmp     short loc_40225A
.text:004022A8 ; ---------------------------------------------------------------------------
.text:004022A8
.text:004022A8 loc_4022A8:                             ; CODE XREF: sub_401F10+32A↑j
.text:004022A8                 mov     [esp+48h+Category], 0Ah ; Ch
.text:004022AF                 mov     edx, ds:_iob
.text:004022B5                 add     edx, 20h ; ' '
.text:004022B8                 mov     [esp+48h+Locale], edx ; File
.text:004022BC                 call    _flsbuf
.text:004022C1                 jmp     short loc_40224B
.text:004022C3 ; ---------------------------------------------------------------------------
.text:004022C3
.text:004022C3 loc_4022C3:                             ; CODE XREF: sub_401F10+2E4↑j
.text:004022C3                 cmp     [ebp+var_20], 2
.text:004022C7                 jz      loc_4024A3
.text:004022CD
.text:004022CD loc_4022CD:                             ; CODE XREF: sub_401F10+5B6↓j
.text:004022CD                                         ; sub_401F10+5E1↓j
.text:004022CD                 mov     dword ptr [esp+48h+var_38], offset free
.text:004022D5                 mov     [esp+48h+Stream], offset malloc
.text:004022DD                 mov     [esp+48h+ElementCount], 0
.text:004022E5                 mov     [esp+48h+Locale], 0
.text:004022ED                 mov     [esp+48h+Category], offset unk_408000
.text:004022F4                 call    sub_4062B0
.text:004022F9                 mov     esi, [ebp+arg_0]
.text:004022FC                 test    esi, esi
.text:004022FE                 jz      loc_40248A
.text:00402304                 cld
.text:00402305                 mov     eax, [ebx]
.text:00402307                 mov     edx, offset asc_401DF0 ; "-"
.text:0040230C                 mov     ecx, 2
.text:00402311                 mov     edi, edx
.text:00402313                 mov     esi, eax
.text:00402315                 mov     [ebp+FileName], eax
.text:00402318                 repe cmpsb
.text:0040231A                 jnz     loc_402465
.text:00402320                 mov     ds:byte_408030, 1
.text:00402327                 mov     ebx, ds:_iob
.text:0040232D
.text:0040232D loc_40232D:                             ; CODE XREF: sub_401F10+56C↓j
.text:0040232D                 mov     [esp+48h+Category], ebx ; FILE *
.text:00402330                 mov     esi, [ebp+FileName]
.text:00402333                 mov     [esp+48h+Locale], esi ; char *
.text:00402337                 call    sub_402730
.text:0040233C                 cmp     ebx, ds:_iob
.text:00402342                 mov     [ebp+var_19], al
.text:00402345                 jz      short loc_402356
.text:00402347                 mov     [esp+48h+Category], ebx ; Stream
.text:0040234A                 call    fclose
.text:0040234F                 inc     eax
.text:00402350                 jz      loc_402431
.text:00402356
.text:00402356 loc_402356:                             ; CODE XREF: sub_401F10+435↑j
.text:00402356                 movzx   eax, [ebp+var_19]
.text:0040235A
.text:0040235A loc_40235A:                             ; CODE XREF: sub_401F10+550↓j
.text:0040235A                                         ; sub_401F10+58E↓j
.text:0040235A                 mov     [ebp+var_D], al
.text:0040235D                 cmp     [ebp+var_D], 0
.text:00402361                 jz      loc_402251
.text:00402367                 mov     edx, ds:dword_40800C
.text:0040236D                 mov     ebx, ds:dword_408008
.text:00402373                 mov     edi, edx
.text:00402375                 sub     edi, ebx
.text:00402377                 cmp     edx, ebx
.text:00402379                 jz      loc_402425
.text:0040237F
.text:0040237F loc_40237F:                             ; CODE XREF: sub_401F10+51C↓j
.text:0040237F                 mov     ecx, ds:dword_408018
.text:00402385                 mov     eax, ds:dword_408004
.text:0040238A                 add     edx, ecx
.text:0040238C                 not     ecx
.text:0040238E                 and     edx, ecx
.text:00402390                 mov     ecx, ds:dword_408010
.text:00402396                 mov     ds:dword_40800C, edx
.text:0040239C                 sub     edx, eax
.text:0040239E                 mov     esi, ecx
.text:004023A0                 sub     esi, eax
.text:004023A2                 cmp     edx, esi
.text:004023A4                 jle     short loc_4023AC
.text:004023A6                 mov     ds:dword_40800C, ecx
.text:004023AC
.text:004023AC loc_4023AC:                             ; CODE XREF: sub_401F10+494↑j
.text:004023AC                 mov     edx, [ebp+var_20]
.text:004023AF                 mov     esi, ds:dword_40800C
.text:004023B5                 test    edx, edx
.text:004023B7                 mov     ds:dword_408008, esi
.text:004023BD                 jnz     short loc_402419
.text:004023BF                 mov     edx, offset aLsColors ; "LS_COLORS='"
.text:004023C4                 mov     esi, offset aExportLsColors ; "';\nexport LS_COLORS\n"
.text:004023C9
.text:004023C9 loc_4023C9:                             ; CODE XREF: sub_401F10+513↓j
.text:004023C9                 mov     [esp+48h+Category], edx ; Buffer
.text:004023CC                 mov     ecx, ds:_iob
.text:004023D2                 add     ecx, 20h ; ' '
.text:004023D5                 mov     [esp+48h+Locale], ecx ; Stream
.text:004023D9                 call    fputs
.text:004023DE                 mov     [esp+48h+Category], ebx ; Buffer
.text:004023E1                 mov     ecx, ds:_iob
.text:004023E7                 mov     [esp+48h+ElementCount], edi ; ElementCount
.text:004023EB                 mov     [esp+48h+Locale], 1 ; ElementSize
.text:004023F3                 add     ecx, 20h ; ' '
.text:004023F6                 mov     [esp+48h+Stream], ecx ; Stream
.text:004023FA                 call    fwrite
.text:004023FF                 mov     [esp+48h+Category], esi ; Buffer
.text:00402402                 mov     ebx, ds:_iob
.text:00402408                 add     ebx, 20h ; ' '
.text:0040240B                 mov     [esp+48h+Locale], ebx ; Stream
.text:0040240F                 call    fputs
.text:00402414                 jmp     loc_402251
.text:00402419 ; ---------------------------------------------------------------------------
.text:00402419
.text:00402419 loc_402419:                             ; CODE XREF: sub_401F10+4AD↑j
.text:00402419                 mov     edx, offset aSetenvLsColors ; "setenv LS_COLORS '"
.text:0040241E                 mov     esi, offset asc_401E26 ; "'\n"
.text:00402423                 jmp     short loc_4023C9
.text:00402425 ; ---------------------------------------------------------------------------
.text:00402425
.text:00402425 loc_402425:                             ; CODE XREF: sub_401F10+469↑j
.text:00402425                 or      ds:byte_408028, 2
.text:0040242C                 jmp     loc_40237F
.text:00402431 ; ---------------------------------------------------------------------------
.text:00402431
.text:00402431 loc_402431:                             ; CODE XREF: sub_401F10+440↑j
.text:00402431                 mov     [esp+48h+Category], esi ; char *
.text:00402434
.text:00402434 loc_402434:                             ; CODE XREF: sub_401F10+578↓j
.text:00402434                 call    sub_404580
.text:00402439                 mov     esi, eax
.text:0040243B                 call    _errno
.text:00402440                 mov     [esp+48h+Stream], esi ; char
.text:00402444                 mov     [esp+48h+ElementCount], offset aS ; "%s"
.text:0040244C                 mov     ecx, [eax]
.text:0040244E                 mov     [esp+48h+Category], 0 ; Code
.text:00402455                 mov     [esp+48h+Locale], ecx ; ErrorMessage
.text:00402459                 call    sub_405DB0
.text:0040245E                 xor     eax, eax
.text:00402460                 jmp     loc_40235A
.text:00402465 ; ---------------------------------------------------------------------------
.text:00402465
.text:00402465 loc_402465:                             ; CODE XREF: sub_401F10+40A↑j
.text:00402465                 mov     [esp+48h+Locale], offset aR ; "r"
.text:0040246D                 mov     ebx, [ebp+FileName]
.text:00402470                 mov     [esp+48h+Category], ebx ; FileName
.text:00402473                 call    fopen
.text:00402478                 test    eax, eax
.text:0040247A                 mov     ebx, eax
.text:0040247C                 jnz     loc_40232D
.text:00402482                 mov     edi, [ebp+FileName]
.text:00402485                 mov     [esp+48h+Category], edi
.text:00402488                 jmp     short loc_402434
.text:0040248A ; ---------------------------------------------------------------------------
.text:0040248A
.text:0040248A loc_40248A:                             ; CODE XREF: sub_401F10+3EE↑j
.text:0040248A                 mov     [esp+48h+Locale], 0 ; char *
.text:00402492                 mov     [esp+48h+Category], 0 ; FILE *
.text:00402499                 call    sub_402730
.text:0040249E                 jmp     loc_40235A
.text:004024A3 ; ---------------------------------------------------------------------------
.text:004024A3
.text:004024A3 loc_4024A3:                             ; CODE XREF: sub_401F10+3B7↑j
.text:004024A3                 mov     [esp+48h+Category], offset VarName ; "SHELL"
.text:004024AA                 call    getenv
.text:004024AF                 mov     [ebp+var_24], eax
.text:004024B2                 test    eax, eax
.text:004024B4                 jz      short loc_4024BB
.text:004024B6                 cmp     byte ptr [eax], 0
.text:004024B9                 jnz     short loc_4024F6
.text:004024BB
.text:004024BB loc_4024BB:                             ; CODE XREF: sub_401F10+5A4↑j
.text:004024BB                 mov     ecx, 2
.text:004024C0
.text:004024C0 loc_4024C0:                             ; CODE XREF: sub_401F10+627↓j
.text:004024C0                                         ; sub_401F10+62E↓j
.text:004024C0                 mov     [ebp+var_20], ecx
.text:004024C3                 cmp     ecx, 2
.text:004024C6                 jnz     loc_4022CD
.text:004024CC                 mov     [esp+48h+Category], offset aNoShellEnviron ; "no SHELL environment variable, and no s"...
.text:004024D3                 call    ds:libintl_gettext
.text:004024D9                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:004024E1                 mov     [esp+48h+Category], 1 ; Code
.text:004024E8                 mov     [esp+48h+ElementCount], eax ; char *
.text:004024EC                 call    sub_405DB0
.text:004024F1                 jmp     loc_4022CD
.text:004024F6 ; ---------------------------------------------------------------------------
.text:004024F6
.text:004024F6 loc_4024F6:                             ; CODE XREF: sub_401F10+5A9↑j
.text:004024F6                 mov     edi, [ebp+var_24]
.text:004024F9                 mov     [esp+48h+Category], edi
.text:004024FC                 call    sub_4045E0
.text:00402501                 mov     [ebp+var_24], eax
.text:00402504                 mov     ecx, offset aCsh ; "csh"
.text:00402509                 mov     esi, [ebp+var_24]
.text:0040250C                 cld
.text:0040250D                 mov     eax, 4
.text:00402512                 mov     edi, ecx
.text:00402514                 mov     ecx, eax
.text:00402516                 repe cmpsb
.text:00402518                 jz      short loc_402539
.text:0040251A                 mov     esi, [ebp+var_24]
.text:0040251D                 mov     ecx, offset aTcsh ; "tcsh"
.text:00402522                 mov     eax, 5
.text:00402527                 mov     edi, ecx
.text:00402529                 mov     ecx, eax
.text:0040252B                 repe cmpsb
.text:0040252D                 setnbe  dl
.text:00402530                 setb    al
.text:00402533                 xor     ecx, ecx
.text:00402535                 cmp     dl, al
.text:00402537                 jnz     short loc_4024C0
.text:00402539
.text:00402539 loc_402539:                             ; CODE XREF: sub_401F10+608↑j
.text:00402539                 mov     ecx, 1
.text:0040253E                 jmp     short loc_4024C0
.text:00402540 ; ---------------------------------------------------------------------------
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_401F10+252↑j
.text:00402540                 mov     [esp+48h+Category], offset aTheOptionsToOu ; "the options to output dircolors' intern"...
.text:00402547                 call    ds:libintl_gettext
.text:0040254D                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00402555                 mov     [esp+48h+Category], 0 ; Code
.text:0040255C                 mov     [esp+48h+ElementCount], eax ; char *
.text:00402560                 call    sub_405DB0
.text:00402565                 jmp     loc_401FDC
.text:00402565 sub_401F10      endp
.text:00402565
.text:00402565 ; ---------------------------------------------------------------------------
.text:0040256A                 align 10h
.text:00402570                 sub     esp, 1Ch
.text:00402573                 mov     [esp+18h], ebx
.text:00402577                 mov     ebx, [esp+20h]
.text:0040257B                 test    ebx, ebx
.text:0040257D                 jz      short loc_4025B3
.text:0040257F                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402586                 call    ds:libintl_gettext
.text:0040258C                 mov     edx, ds:_iob
.text:00402592                 mov     ecx, ds:dword_4081D0
.text:00402598                 add     edx, 40h ; '@'
.text:0040259B                 mov     [esp+8], ecx
.text:0040259F                 mov     [esp+4], eax
.text:004025A3                 mov     [esp], edx
.text:004025A6                 call    fprintf
.text:004025AB
.text:004025AB loc_4025AB:                             ; CODE XREF: .text:00402677↓j
.text:004025AB                 mov     [esp], ebx
.text:004025AE                 call    exit
.text:004025B3 ; ---------------------------------------------------------------------------
.text:004025B3
.text:004025B3 loc_4025B3:                             ; CODE XREF: .text:0040257D↑j
.text:004025B3                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n"
.text:004025BA                 call    ds:libintl_gettext
.text:004025C0                 mov     ecx, ds:dword_4081D0
.text:004025C6                 mov     [esp], eax
.text:004025C9                 mov     [esp+4], ecx
.text:004025CD                 call    printf
.text:004025D2                 mov     dword ptr [esp], offset aOutputCommands ; "Output commands to set the LS_COLORS en"...
.text:004025D9                 call    ds:libintl_gettext
.text:004025DF                 mov     ecx, ds:_iob
.text:004025E5                 add     ecx, 20h ; ' '
.text:004025E8                 mov     [esp+4], ecx
.text:004025EC                 mov     [esp], eax
.text:004025EF                 call    fputs
.text:004025F4                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004025FB                 call    ds:libintl_gettext
.text:00402601                 mov     ecx, ds:_iob
.text:00402607                 add     ecx, 20h ; ' '
.text:0040260A                 mov     [esp+4], ecx
.text:0040260E                 mov     [esp], eax
.text:00402611                 call    fputs
.text:00402616                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040261D                 call    ds:libintl_gettext
.text:00402623                 mov     ecx, ds:_iob
.text:00402629                 add     ecx, 20h ; ' '
.text:0040262C                 mov     [esp+4], ecx
.text:00402630                 mov     [esp], eax
.text:00402633                 call    fputs
.text:00402638                 mov     dword ptr [esp], offset aIfFileIsSpecif ; "\nIf FILE is specified, read it to dete"...
.text:0040263F                 call    ds:libintl_gettext
.text:00402645                 mov     ecx, ds:_iob
.text:0040264B                 add     ecx, 20h ; ' '
.text:0040264E                 mov     [esp+4], ecx
.text:00402652                 mov     [esp], eax
.text:00402655                 call    fputs
.text:0040265A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402661                 call    ds:libintl_gettext
.text:00402667                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040266F                 mov     [esp], eax
.text:00402672                 call    printf
.text:00402677                 jmp     loc_4025AB
.text:00402677 ; ---------------------------------------------------------------------------
.text:0040267C ; const char String2[]
.text:0040267C String2         db 'TERM',0             ; DATA XREF: sub_402730+27↓o
.text:0040267C                                         ; sub_402730:loc_402820↓o
.text:00402681 aNone           db 'none',0             ; DATA XREF: sub_402730:loc_402770↓o
.text:00402686                 align 20h
.text:004026A0 aSLuInvalidLine db '%s:%lu: invalid line;  missing second token',0
.text:004026A0                                         ; DATA XREF: sub_402730+A5↓o
.text:004026CC ; const char aOptions[]
.text:004026CC aOptions        db 'OPTIONS',0          ; DATA XREF: sub_402730+130↓o
.text:004026D4 ; const char aColor[]
.text:004026D4 aColor          db 'COLOR',0            ; DATA XREF: sub_402730:loc_40289D↓o
.text:004026DA ; const char aEightbit[]
.text:004026DA aEightbit       db 'EIGHTBIT',0         ; DATA XREF: sub_402730+185↓o
.text:004026E3                 align 20h
.text:00402700 aSLuUnrecognize db '%s:%lu: unrecognized keyword %s',0
.text:00402700                                         ; DATA XREF: sub_402730:loc_40291C↓o
.text:00402720 aInternal       db '<internal>',0       ; DATA XREF: sub_402730:loc_40295D↓o
.text:0040272B                 align 10h
.text:00402730
.text:00402730 ; =============== S U B R O U T I N E =======================================
.text:00402730
.text:00402730
.text:00402730 ; int __cdecl sub_402730(FILE *, char *)
.text:00402730 sub_402730      proc near               ; CODE XREF: sub_401F10+427↑p
.text:00402730                                         ; sub_401F10+589↑p
.text:00402730
.text:00402730 VarName         = dword ptr -4Ch
.text:00402730 String2         = dword ptr -48h
.text:00402730 File            = dword ptr -44h
.text:00402730 var_40          = byte ptr -40h
.text:00402730 var_3C          = dword ptr -3Ch
.text:00402730 var_38          = dword ptr -38h
.text:00402730 var_25          = byte ptr -25h
.text:00402730 Str2            = dword ptr -24h
.text:00402730 Block           = dword ptr -20h
.text:00402730 Str1            = dword ptr -1Ch
.text:00402730 var_18          = dword ptr -18h
.text:00402730 var_14          = dword ptr -14h
.text:00402730 arg_0           = dword ptr  4
.text:00402730 arg_4           = dword ptr  8
.text:00402730
.text:00402730                 push    ebp
.text:00402731                 mov     ebp, 3
.text:00402736                 push    edi
.text:00402737                 push    esi
.text:00402738                 push    ebx
.text:00402739                 sub     esp, 3Ch
.text:0040273C                 xor     ebx, ebx
.text:0040273E                 mov     [esp+4Ch+var_18], 0
.text:00402746                 mov     edi, [esp+4Ch+arg_0]
.text:0040274A                 mov     [esp+4Ch+var_14], 0
.text:00402752                 mov     [esp+4Ch+var_25], 1
.text:00402757                 mov     [esp+4Ch+VarName], offset String2 ; "TERM"
.text:0040275E                 call    getenv
.text:00402763                 mov     [esp+4Ch+Str2], eax
.text:00402767                 test    eax, eax
.text:00402769                 jz      short loc_402770
.text:0040276B                 cmp     byte ptr [eax], 0
.text:0040276E                 jnz     short loc_402780
.text:00402770
.text:00402770 loc_402770:                             ; CODE XREF: sub_402730+39↑j
.text:00402770                 mov     [esp+4Ch+Str2], offset aNone ; "none"
.text:00402778                 nop
.text:00402779                 lea     esi, [esi+0]
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: sub_402730+3E↑j
.text:00402780                                         ; sub_402730+9B↓j ...
.text:00402780                 inc     ebx
.text:00402781                 test    edi, edi
.text:00402783                 jz      loc_402B41
.text:00402789                 mov     [esp+4Ch+File], edi ; File
.text:0040278D                 lea     edx, [esp+4Ch+var_14]
.text:00402791                 mov     [esp+4Ch+String2], edx ; int
.text:00402795                 lea     edx, [esp+4Ch+var_18]
.text:00402799                 mov     [esp+4Ch+VarName], edx ; int
.text:0040279C                 call    sub_406050
.text:004027A1                 test    eax, eax
.text:004027A3                 jle     loc_402B22
.text:004027A9
.text:004027A9 loc_4027A9:                             ; CODE XREF: sub_402730+41F↓j
.text:004027A9                 mov     esi, [esp+4Ch+var_18]
.text:004027AD                 lea     ecx, [esp+4Ch+Str1]
.text:004027B1                 lea     edx, [esp+4Ch+Block]
.text:004027B5                 mov     [esp+4Ch+File], ecx ; int
.text:004027B9                 mov     [esp+4Ch+String2], edx ; int
.text:004027BD                 mov     [esp+4Ch+VarName], esi ; void *
.text:004027C0                 call    sub_402B60
.text:004027C5                 mov     eax, [esp+4Ch+Block]
.text:004027C9                 test    eax, eax
.text:004027CB                 jz      short loc_402780
.text:004027CD                 mov     edx, [esp+4Ch+Str1]
.text:004027D1                 test    edx, edx
.text:004027D3                 jnz     short loc_402820
.text:004027D5                 mov     [esp+4Ch+VarName], offset aSLuInvalidLine ; "%s:%lu: invalid line;  missing second t"...
.text:004027DC                 call    ds:libintl_gettext
.text:004027E2                 mov     [esp+4Ch+var_3C], ebx
.text:004027E6                 mov     esi, [esp+4Ch+arg_4]
.text:004027EA                 mov     [esp+4Ch+String2], 0 ; ErrorMessage
.text:004027F2                 mov     [esp+4Ch+VarName], 0 ; Code
.text:004027F9                 mov     [esp+4Ch+File], eax ; char *
.text:004027FD                 mov     dword ptr [esp+4Ch+var_40], esi ; char
.text:00402801                 call    sub_405DB0
.text:00402806                 mov     [esp+4Ch+var_25], 0
.text:0040280B                 mov     eax, [esp+4Ch+Block]
.text:0040280F
.text:0040280F loc_40280F:                             ; CODE XREF: sub_402730+168↓j
.text:0040280F                 mov     [esp+4Ch+VarName], eax ; Block
.text:00402812                 call    free
.text:00402817                 jmp     loc_402780
.text:00402817 ; ---------------------------------------------------------------------------
.text:0040281C                 align 10h
.text:00402820
.text:00402820 loc_402820:                             ; CODE XREF: sub_402730+A3↑j
.text:00402820                 mov     [esp+4Ch+String2], offset String2 ; "TERM"
.text:00402828                 mov     [esp+4Ch+VarName], eax ; String1
.text:0040282B                 call    _stricmp
.text:00402830                 test    eax, eax
.text:00402832                 jz      loc_402AF0
.text:00402838                 cmp     ebp, 2
.text:0040283B                 jz      loc_402AE6
.text:00402841
.text:00402841 loc_402841:                             ; CODE XREF: sub_402730+3BB↓j
.text:00402841                 test    ebp, ebp
.text:00402843                 jz      loc_4028FC
.text:00402849                 mov     edx, [esp+4Ch+Block]
.text:0040284D                 movzx   eax, byte ptr [edx]
.text:00402850                 cmp     al, 2Eh ; '.'
.text:00402852                 jz      loc_402AA7
.text:00402858                 cmp     al, 2Ah ; '*'
.text:0040285A                 jz      loc_402A88
.text:00402860                 mov     [esp+4Ch+String2], offset aOptions ; "OPTIONS"
.text:00402868                 mov     [esp+4Ch+VarName], edx ; String1
.text:0040286B                 call    _stricmp
.text:00402870                 test    eax, eax
.text:00402872                 jnz     short loc_40289D
.text:00402874                 lea     esi, [esi+0]
.text:0040287A                 lea     edi, [edi+0]
.text:00402880
.text:00402880 loc_402880:                             ; CODE XREF: sub_402730+183↓j
.text:00402880                                         ; sub_402730+19B↓j ...
.text:00402880                 mov     edx, [esp+4Ch+Block]
.text:00402884                 mov     [esp+4Ch+VarName], edx ; Block
.text:00402887                 call    free
.text:0040288C                 mov     eax, [esp+4Ch+Str1]
.text:00402890                 test    eax, eax
.text:00402892                 jz      loc_402780
.text:00402898                 jmp     loc_40280F
.text:0040289D ; ---------------------------------------------------------------------------
.text:0040289D
.text:0040289D loc_40289D:                             ; CODE XREF: sub_402730+142↑j
.text:0040289D                 mov     [esp+4Ch+String2], offset aColor ; "COLOR"
.text:004028A5                 mov     edx, [esp+4Ch+Block]
.text:004028A9                 mov     [esp+4Ch+VarName], edx ; String1
.text:004028AC                 call    _stricmp
.text:004028B1                 test    eax, eax
.text:004028B3                 jz      short loc_402880
.text:004028B5                 mov     [esp+4Ch+String2], offset aEightbit ; "EIGHTBIT"
.text:004028BD                 mov     ecx, [esp+4Ch+Block]
.text:004028C1                 mov     [esp+4Ch+VarName], ecx ; String1
.text:004028C4                 call    _stricmp
.text:004028C9                 test    eax, eax
.text:004028CB                 jz      short loc_402880
.text:004028CD                 mov     eax, ds:off_401820 ; "NORMAL"
.text:004028D2                 xor     esi, esi
.text:004028D4                 test    eax, eax
.text:004028D6                 jz      loc_402A7E
.text:004028DC
.text:004028DC loc_4028DC:                             ; CODE XREF: sub_402730+1CA↓j
.text:004028DC                 mov     [esp+4Ch+String2], eax ; String2
.text:004028E0                 mov     edx, [esp+4Ch+Block]
.text:004028E4                 mov     [esp+4Ch+VarName], edx ; String1
.text:004028E7                 call    _stricmp
.text:004028EC                 test    eax, eax
.text:004028EE                 jz      short loc_40296C
.text:004028F0                 inc     esi
.text:004028F1                 mov     eax, ds:off_401820[esi*4] ; "NORMAL"
.text:004028F8                 test    eax, eax
.text:004028FA                 jnz     short loc_4028DC
.text:004028FC
.text:004028FC loc_4028FC:                             ; CODE XREF: sub_402730+113↑j
.text:004028FC                                         ; sub_402730+245↓j
.text:004028FC                 lea     edx, [ebp-1]
.text:004028FF                 cmp     edx, 1
.text:00402902                 ja      loc_402880
.text:00402908                 mov     eax, [esp+4Ch+arg_4]
.text:0040290C                 test    eax, eax
.text:0040290E                 jz      short loc_40295D
.text:00402910                 mov     esi, [esp+4Ch+arg_4]
.text:00402914                 mov     [esp+4Ch+VarName], esi ; char *
.text:00402917                 call    sub_404580
.text:0040291C
.text:0040291C loc_40291C:                             ; CODE XREF: sub_402730+23A↓j
.text:0040291C                 mov     [esp+4Ch+VarName], offset aSLuUnrecognize ; "%s:%lu: unrecognized keyword %s"
.text:00402923                 mov     esi, eax
.text:00402925                 call    ds:libintl_gettext
.text:0040292B                 mov     [esp+4Ch+var_3C], ebx
.text:0040292F                 mov     ecx, [esp+4Ch+Block]
.text:00402933                 mov     dword ptr [esp+4Ch+var_40], esi ; char
.text:00402937                 mov     [esp+4Ch+String2], 0 ; ErrorMessage
.text:0040293F                 mov     [esp+4Ch+var_38], ecx
.text:00402943                 mov     [esp+4Ch+File], eax ; char *
.text:00402947                 mov     [esp+4Ch+VarName], 0 ; Code
.text:0040294E                 call    sub_405DB0
.text:00402953                 mov     [esp+4Ch+var_25], 0
.text:00402958                 jmp     loc_402880
.text:0040295D ; ---------------------------------------------------------------------------
.text:0040295D
.text:0040295D loc_40295D:                             ; CODE XREF: sub_402730+1DE↑j
.text:0040295D                 mov     [esp+4Ch+VarName], offset aInternal ; "<internal>"
.text:00402964                 call    ds:libintl_gettext
.text:0040296A                 jmp     short loc_40291C
.text:0040296C ; ---------------------------------------------------------------------------
.text:0040296C
.text:0040296C loc_40296C:                             ; CODE XREF: sub_402730+1BE↑j
.text:0040296C                 mov     eax, ds:off_401820[esi*4] ; "NORMAL"
.text:00402973
.text:00402973 loc_402973:                             ; CODE XREF: sub_402730+353↓j
.text:00402973                 test    eax, eax
.text:00402975                 jz      short loc_4028FC
.text:00402977                 mov     edx, ds:dword_40800C
.text:0040297D                 lea     ecx, [edx+1]
.text:00402980                 cmp     ecx, ds:dword_408010
.text:00402986                 ja      loc_402A5F
.text:0040298C
.text:0040298C loc_40298C:                             ; CODE XREF: sub_402730+349↓j
.text:0040298C                 mov     esi, ds:off_4018C0[esi*4]
.text:00402993                 movzx   ecx, byte ptr [esi]
.text:00402996                 mov     [edx], cl
.text:00402998                 mov     ecx, ds:dword_40800C
.text:0040299E                 lea     eax, [ecx+1]
.text:004029A1                 mov     ds:dword_40800C, eax
.text:004029A6                 add     ecx, 2
.text:004029A9                 cmp     ecx, ds:dword_408010
.text:004029AF                 ja      loc_402A46
.text:004029B5
.text:004029B5 loc_4029B5:                             ; CODE XREF: sub_402730+32A↓j
.text:004029B5                 movzx   eax, byte ptr [esi+1]
.text:004029B9                 mov     ecx, ds:dword_40800C
.text:004029BF                 mov     [ecx], al
.text:004029C1                 mov     esi, ds:dword_40800C
.text:004029C7                 lea     eax, [esi+1]
.text:004029CA                 mov     ds:dword_40800C, eax
.text:004029CF                 add     esi, 2
.text:004029D2                 cmp     esi, ds:dword_408010
.text:004029D8                 ja      short loc_402A30
.text:004029DA
.text:004029DA loc_4029DA:                             ; CODE XREF: sub_402730+314↓j
.text:004029DA                 mov     edx, ds:dword_40800C
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_402730+36F↓j
.text:004029E0                 mov     byte ptr [edx], 3Dh ; '='
.text:004029E3                 inc     ds:dword_40800C
.text:004029E9                 mov     ecx, [esp+4Ch+Str1]
.text:004029ED                 mov     [esp+4Ch+VarName], ecx
.text:004029F0                 call    sub_402CF0
.text:004029F5                 mov     edx, ds:dword_40800C
.text:004029FB                 lea     esi, [edx+1]
.text:004029FE                 cmp     esi, ds:dword_408010
.text:00402A04                 ja      short loc_402A14
.text:00402A06
.text:00402A06 loc_402A06:                             ; CODE XREF: sub_402730+2FE↓j
.text:00402A06                 mov     byte ptr [edx], 3Ah ; ':'
.text:00402A09                 inc     ds:dword_40800C
.text:00402A0F                 jmp     loc_402880
.text:00402A14 ; ---------------------------------------------------------------------------
.text:00402A14
.text:00402A14 loc_402A14:                             ; CODE XREF: sub_402730+2D4↑j
.text:00402A14                 mov     [esp+4Ch+String2], 1
.text:00402A1C                 mov     [esp+4Ch+VarName], offset unk_408000
.text:00402A23                 call    sub_4063E0
.text:00402A28                 mov     edx, ds:dword_40800C
.text:00402A2E                 jmp     short loc_402A06
.text:00402A30 ; ---------------------------------------------------------------------------
.text:00402A30
.text:00402A30 loc_402A30:                             ; CODE XREF: sub_402730+2A8↑j
.text:00402A30                                         ; sub_402730+375↓j
.text:00402A30                 mov     [esp+4Ch+String2], 1
.text:00402A38                 mov     [esp+4Ch+VarName], offset unk_408000
.text:00402A3F                 call    sub_4063E0
.text:00402A44                 jmp     short loc_4029DA
.text:00402A46 ; ---------------------------------------------------------------------------
.text:00402A46
.text:00402A46 loc_402A46:                             ; CODE XREF: sub_402730+27F↑j
.text:00402A46                 mov     [esp+4Ch+String2], 1
.text:00402A4E                 mov     [esp+4Ch+VarName], offset unk_408000
.text:00402A55                 call    sub_4063E0
.text:00402A5A                 jmp     loc_4029B5
.text:00402A5F ; ---------------------------------------------------------------------------
.text:00402A5F
.text:00402A5F loc_402A5F:                             ; CODE XREF: sub_402730+256↑j
.text:00402A5F                 mov     [esp+4Ch+String2], 1
.text:00402A67                 mov     [esp+4Ch+VarName], offset unk_408000
.text:00402A6E                 call    sub_4063E0
.text:00402A73                 mov     edx, ds:dword_40800C
.text:00402A79                 jmp     loc_40298C
.text:00402A7E ; ---------------------------------------------------------------------------
.text:00402A7E
.text:00402A7E loc_402A7E:                             ; CODE XREF: sub_402730+1A6↑j
.text:00402A7E                 mov     eax, ds:off_401820 ; "NORMAL"
.text:00402A83                 jmp     loc_402973
.text:00402A88 ; ---------------------------------------------------------------------------
.text:00402A88
.text:00402A88 loc_402A88:                             ; CODE XREF: sub_402730+12A↑j
.text:00402A88                 mov     [esp+4Ch+VarName], edx
.text:00402A8B
.text:00402A8B loc_402A8B:                             ; CODE XREF: sub_402730+398↓j
.text:00402A8B                 call    sub_402CF0
.text:00402A90                 mov     edx, ds:dword_40800C
.text:00402A96                 lea     esi, [edx+1]
.text:00402A99                 cmp     esi, ds:dword_408010
.text:00402A9F                 jbe     loc_4029E0
.text:00402AA5                 jmp     short loc_402A30
.text:00402AA7 ; ---------------------------------------------------------------------------
.text:00402AA7
.text:00402AA7 loc_402AA7:                             ; CODE XREF: sub_402730+122↑j
.text:00402AA7                 mov     edx, ds:dword_40800C
.text:00402AAD                 lea     esi, [edx+1]
.text:00402AB0                 cmp     esi, ds:dword_408010
.text:00402AB6                 ja      short loc_402ACA
.text:00402AB8
.text:00402AB8 loc_402AB8:                             ; CODE XREF: sub_402730+3B4↓j
.text:00402AB8                 mov     byte ptr [edx], 2Ah ; '*'
.text:00402ABB                 mov     ecx, [esp+4Ch+Block]
.text:00402ABF                 inc     ds:dword_40800C
.text:00402AC5                 mov     [esp+4Ch+VarName], ecx
.text:00402AC8                 jmp     short loc_402A8B
.text:00402ACA ; ---------------------------------------------------------------------------
.text:00402ACA
.text:00402ACA loc_402ACA:                             ; CODE XREF: sub_402730+386↑j
.text:00402ACA                 mov     [esp+4Ch+String2], 1
.text:00402AD2                 mov     [esp+4Ch+VarName], offset unk_408000
.text:00402AD9                 call    sub_4063E0
.text:00402ADE                 mov     edx, ds:dword_40800C
.text:00402AE4                 jmp     short loc_402AB8
.text:00402AE6 ; ---------------------------------------------------------------------------
.text:00402AE6
.text:00402AE6 loc_402AE6:                             ; CODE XREF: sub_402730+10B↑j
.text:00402AE6                 mov     ebp, 1
.text:00402AEB                 jmp     loc_402841
.text:00402AF0 ; ---------------------------------------------------------------------------
.text:00402AF0
.text:00402AF0 loc_402AF0:                             ; CODE XREF: sub_402730+102↑j
.text:00402AF0                 mov     edx, [esp+4Ch+Str2]
.text:00402AF4                 mov     ecx, [esp+4Ch+Str1]
.text:00402AF8                 mov     [esp+4Ch+String2], edx ; Str2
.text:00402AFC                 mov     [esp+4Ch+VarName], ecx ; Str1
.text:00402AFF                 call    strcmp
.text:00402B04                 test    eax, eax
.text:00402B06                 jnz     short loc_402B12
.text:00402B08                 mov     ebp, 2
.text:00402B0D                 jmp     loc_402880
.text:00402B12 ; ---------------------------------------------------------------------------
.text:00402B12
.text:00402B12 loc_402B12:                             ; CODE XREF: sub_402730+3D6↑j
.text:00402B12                 cmp     ebp, 2
.text:00402B15                 jz      loc_402880
.text:00402B1B                 xor     ebp, ebp
.text:00402B1D                 jmp     loc_402880
.text:00402B22 ; ---------------------------------------------------------------------------
.text:00402B22
.text:00402B22 loc_402B22:                             ; CODE XREF: sub_402730+73↑j
.text:00402B22                 mov     eax, [esp+4Ch+var_18]
.text:00402B26                 test    eax, eax
.text:00402B28                 jnz     short loc_402B37
.text:00402B2A
.text:00402B2A loc_402B2A:                             ; CODE XREF: sub_402730+40F↓j
.text:00402B2A                                         ; sub_402730+425↓j
.text:00402B2A                 movzx   eax, [esp+4Ch+var_25]
.text:00402B2F                 add     esp, 3Ch
.text:00402B32                 pop     ebx
.text:00402B33                 pop     esi
.text:00402B34                 pop     edi
.text:00402B35                 pop     ebp
.text:00402B36                 retn
.text:00402B37 ; ---------------------------------------------------------------------------
.text:00402B37
.text:00402B37 loc_402B37:                             ; CODE XREF: sub_402730+3F8↑j
.text:00402B37                 mov     [esp+4Ch+VarName], eax ; Block
.text:00402B3A                 call    free
.text:00402B3F                 jmp     short loc_402B2A
.text:00402B41 ; ---------------------------------------------------------------------------
.text:00402B41
.text:00402B41 loc_402B41:                             ; CODE XREF: sub_402730+53↑j
.text:00402B41                 mov     ecx, dword ptr ds:algn_401657+5[ebx*4]
.text:00402B48                 cmp     ebx, 4Ch ; 'L'
.text:00402B4B                 mov     [esp+4Ch+var_18], ecx
.text:00402B4F                 jbe     loc_4027A9
.text:00402B55                 jmp     short loc_402B2A
.text:00402B55 sub_402730      endp
.text:00402B55
.text:00402B55 ; ---------------------------------------------------------------------------
.text:00402B57                 align 10h
.text:00402B60
.text:00402B60 ; =============== S U B R O U T I N E =======================================
.text:00402B60
.text:00402B60
.text:00402B60 ; int __cdecl sub_402B60(void *, int, int)
.text:00402B60 sub_402B60      proc near               ; CODE XREF: sub_402730+90↑p
.text:00402B60
.text:00402B60 C               = dword ptr -1Ch
.text:00402B60 Type            = dword ptr -18h
.text:00402B60 arg_0           = dword ptr  4
.text:00402B60 arg_4           = dword ptr  8
.text:00402B60 arg_8           = dword ptr  0Ch
.text:00402B60
.text:00402B60                 push    ebp
.text:00402B61                 push    edi
.text:00402B62                 push    esi
.text:00402B63                 push    ebx
.text:00402B64                 sub     esp, 0Ch
.text:00402B67                 mov     edi, [esp+1Ch+arg_4]
.text:00402B6B                 mov     ebp, [esp+1Ch+arg_8]
.text:00402B6F                 mov     ebx, [esp+1Ch+arg_0]
.text:00402B73                 mov     dword ptr [edi], 0
.text:00402B79                 mov     dword ptr [ebp+0], 0
.text:00402B80
.text:00402B80 loc_402B80:                             ; CODE XREF: sub_402B60+47↓j
.text:00402B80                 movzx   edx, byte ptr [ebx]
.text:00402B83                 mov     ecx, ds:__mb_cur_max
.text:00402B89                 cmp     dword ptr [ecx], 1
.text:00402B8C                 jz      loc_402CD3
.text:00402B92                 mov     [esp+1Ch+Type], 8 ; Type
.text:00402B9A                 mov     [esp+1Ch+C], edx ; C
.text:00402B9D                 call    _isctype
.text:00402BA2
.text:00402BA2 loc_402BA2:                             ; CODE XREF: sub_402B60+182↓j
.text:00402BA2                 test    eax, eax
.text:00402BA4                 jz      short loc_402BA9
.text:00402BA6                 inc     ebx
.text:00402BA7                 jmp     short loc_402B80
.text:00402BA9 ; ---------------------------------------------------------------------------
.text:00402BA9
.text:00402BA9 loc_402BA9:                             ; CODE XREF: sub_402B60+44↑j
.text:00402BA9                 movzx   eax, byte ptr [ebx]
.text:00402BAC                 test    al, al
.text:00402BAE                 jz      loc_402C90
.text:00402BB4                 cmp     al, 23h ; '#'
.text:00402BB6                 mov     esi, ebx
.text:00402BB8                 jz      loc_402C90
.text:00402BBE                 mov     esi, esi
.text:00402BC0
.text:00402BC0 loc_402BC0:                             ; CODE XREF: sub_402B60+8F↓j
.text:00402BC0                 mov     ecx, ds:__mb_cur_max
.text:00402BC6                 movzx   edx, al
.text:00402BC9                 cmp     dword ptr [ecx], 1
.text:00402BCC                 jz      loc_402CC0
.text:00402BD2                 mov     [esp+1Ch+Type], 8 ; Type
.text:00402BDA                 mov     [esp+1Ch+C], edx ; C
.text:00402BDD                 call    _isctype
.text:00402BE2
.text:00402BE2 loc_402BE2:                             ; CODE XREF: sub_402B60+16E↓j
.text:00402BE2                 test    eax, eax
.text:00402BE4                 jnz     short loc_402BF1
.text:00402BE6                 cmp     byte ptr [ebx], 0
.text:00402BE9                 jz      short loc_402BF1
.text:00402BEB                 inc     ebx
.text:00402BEC                 movzx   eax, byte ptr [ebx]
.text:00402BEF                 jmp     short loc_402BC0
.text:00402BF1 ; ---------------------------------------------------------------------------
.text:00402BF1
.text:00402BF1 loc_402BF1:                             ; CODE XREF: sub_402B60+84↑j
.text:00402BF1                                         ; sub_402B60+89↑j
.text:00402BF1                 mov     [esp+1Ch+C], esi ; void *
.text:00402BF4                 mov     edx, ebx
.text:00402BF6                 sub     edx, esi
.text:00402BF8                 mov     [esp+1Ch+Type], edx ; int
.text:00402BFC                 call    sub_4045B0
.text:00402C01                 mov     [edi], eax
.text:00402C03                 cmp     byte ptr [ebx], 0
.text:00402C06                 jz      loc_402C90
.text:00402C0C                 lea     esi, [esi+0]
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_402B60+D5↓j
.text:00402C10                 mov     edi, ds:__mb_cur_max
.text:00402C16                 inc     ebx
.text:00402C17                 movzx   edx, byte ptr [ebx]
.text:00402C1A                 cmp     dword ptr [edi], 1
.text:00402C1D                 jz      loc_402CA9
.text:00402C23                 mov     [esp+1Ch+Type], 8 ; Type
.text:00402C2B                 mov     [esp+1Ch+C], edx ; C
.text:00402C2E                 call    _isctype
.text:00402C33
.text:00402C33 loc_402C33:                             ; CODE XREF: sub_402B60+158↓j
.text:00402C33                 test    eax, eax
.text:00402C35                 jnz     short loc_402C10
.text:00402C37                 movzx   eax, byte ptr [ebx]
.text:00402C3A                 test    al, al
.text:00402C3C                 jz      short loc_402C90
.text:00402C3E                 cmp     al, 23h ; '#'
.text:00402C40                 jz      short loc_402C90
.text:00402C42                 test    al, al
.text:00402C44                 mov     esi, ebx
.text:00402C46                 jz      short loc_402C58
.text:00402C48                 cmp     al, 23h ; '#'
.text:00402C4A                 jz      short loc_402C58
.text:00402C4C
.text:00402C4C loc_402C4C:                             ; CODE XREF: sub_402B60+F6↓j
.text:00402C4C                 inc     ebx
.text:00402C4D                 movzx   eax, byte ptr [ebx]
.text:00402C50                 test    al, al
.text:00402C52                 jz      short loc_402C58
.text:00402C54                 cmp     al, 23h ; '#'
.text:00402C56                 jnz     short loc_402C4C
.text:00402C58
.text:00402C58 loc_402C58:                             ; CODE XREF: sub_402B60+E6↑j
.text:00402C58                                         ; sub_402B60+EA↑j ...
.text:00402C58                 mov     edi, ds:__mb_cur_max
.text:00402C5E                 dec     ebx
.text:00402C5F                 movzx   edx, byte ptr [ebx]
.text:00402C62                 cmp     dword ptr [edi], 1
.text:00402C65                 jz      short loc_402C98
.text:00402C67                 mov     [esp+1Ch+Type], 8 ; Type
.text:00402C6F                 mov     [esp+1Ch+C], edx ; C
.text:00402C72                 call    _isctype
.text:00402C77
.text:00402C77 loc_402C77:                             ; CODE XREF: sub_402B60+147↓j
.text:00402C77                 test    eax, eax
.text:00402C79                 jnz     short loc_402C58
.text:00402C7B                 mov     [esp+1Ch+C], esi ; void *
.text:00402C7E                 inc     ebx
.text:00402C7F                 sub     ebx, esi
.text:00402C81                 mov     [esp+1Ch+Type], ebx ; int
.text:00402C85                 call    sub_4045B0
.text:00402C8A                 mov     [ebp+0], eax
.text:00402C8D                 lea     esi, [esi+0]
.text:00402C90
.text:00402C90 loc_402C90:                             ; CODE XREF: sub_402B60+4E↑j
.text:00402C90                                         ; sub_402B60+58↑j ...
.text:00402C90                 add     esp, 0Ch
.text:00402C93                 pop     ebx
.text:00402C94                 pop     esi
.text:00402C95                 pop     edi
.text:00402C96                 pop     ebp
.text:00402C97                 retn
.text:00402C98 ; ---------------------------------------------------------------------------
.text:00402C98
.text:00402C98 loc_402C98:                             ; CODE XREF: sub_402B60+105↑j
.text:00402C98                 mov     edi, ds:_pctype
.text:00402C9E                 mov     ecx, [edi]
.text:00402CA0                 movzx   eax, word ptr [ecx+edx*2]
.text:00402CA4                 and     eax, 8
.text:00402CA7                 jmp     short loc_402C77
.text:00402CA9 ; ---------------------------------------------------------------------------
.text:00402CA9
.text:00402CA9 loc_402CA9:                             ; CODE XREF: sub_402B60+BD↑j
.text:00402CA9                 mov     ecx, ds:_pctype
.text:00402CAF                 mov     esi, [ecx]
.text:00402CB1                 movzx   eax, word ptr [esi+edx*2]
.text:00402CB5                 and     eax, 8
.text:00402CB8                 jmp     loc_402C33
.text:00402CB8 ; ---------------------------------------------------------------------------
.text:00402CBD                 align 10h
.text:00402CC0
.text:00402CC0 loc_402CC0:                             ; CODE XREF: sub_402B60+6C↑j
.text:00402CC0                 mov     eax, ds:_pctype
.text:00402CC5                 mov     ecx, [eax]
.text:00402CC7                 movzx   eax, word ptr [ecx+edx*2]
.text:00402CCB                 and     eax, 8
.text:00402CCE                 jmp     loc_402BE2
.text:00402CD3 ; ---------------------------------------------------------------------------
.text:00402CD3
.text:00402CD3 loc_402CD3:                             ; CODE XREF: sub_402B60+2C↑j
.text:00402CD3                 mov     esi, ds:_pctype
.text:00402CD9                 mov     ecx, [esi]
.text:00402CDB                 movzx   eax, word ptr [ecx+edx*2]
.text:00402CDF                 and     eax, 8
.text:00402CE2                 jmp     loc_402BA2
.text:00402CE2 sub_402B60      endp
.text:00402CE2
.text:00402CE2 ; ---------------------------------------------------------------------------
.text:00402CE7                 align 10h
.text:00402CF0
.text:00402CF0 ; =============== S U B R O U T I N E =======================================
.text:00402CF0
.text:00402CF0
.text:00402CF0 sub_402CF0      proc near               ; CODE XREF: sub_402730+2C0↑p
.text:00402CF0                                         ; sub_402730:loc_402A8B↑p
.text:00402CF0
.text:00402CF0 var_1C          = dword ptr -1Ch
.text:00402CF0 var_18          = dword ptr -18h
.text:00402CF0 var_5           = byte ptr -5
.text:00402CF0 arg_0           = dword ptr  4
.text:00402CF0
.text:00402CF0                 push    ebx
.text:00402CF1                 sub     esp, 18h
.text:00402CF4                 mov     ebx, [esp+1Ch+arg_0]
.text:00402CF8                 mov     [esp+1Ch+var_5], 1
.text:00402CFD                 movzx   eax, byte ptr [ebx]
.text:00402D00                 test    al, al
.text:00402D02                 jz      short loc_402D59
.text:00402D04                 lea     esi, [esi+0]
.text:00402D0A                 lea     edi, [edi+0]
.text:00402D10
.text:00402D10 loc_402D10:                             ; CODE XREF: sub_402CF0+67↓j
.text:00402D10                 movsx   eax, al
.text:00402D13                 cmp     eax, 3Dh ; '='
.text:00402D16                 jz      short loc_402D80
.text:00402D18                 cmp     eax, 3Dh ; '='
.text:00402D1B                 jg      loc_402DC0
.text:00402D21                 cmp     eax, 3Ah ; ':'
.text:00402D24                 jz      short loc_402D80
.text:00402D26                 lea     esi, [esi+0]
.text:00402D29                 lea     edi, [edi+0]
.text:00402D30
.text:00402D30 loc_402D30:                             ; CODE XREF: sub_402CF0+95↓j
.text:00402D30                                         ; sub_402CF0+B1↓j ...
.text:00402D30                 mov     [esp+1Ch+var_5], 1
.text:00402D35
.text:00402D35 loc_402D35:                             ; CODE XREF: sub_402CF0+E3↓j
.text:00402D35                 mov     edx, ds:dword_40800C
.text:00402D3B                 lea     ecx, [edx+1]
.text:00402D3E                 cmp     ecx, ds:dword_408010
.text:00402D44                 ja      short loc_402D60
.text:00402D46
.text:00402D46 loc_402D46:                             ; CODE XREF: sub_402CF0+8A↓j
.text:00402D46                 movzx   ecx, byte ptr [ebx]
.text:00402D49                 inc     ebx
.text:00402D4A                 mov     [edx], cl
.text:00402D4C                 inc     ds:dword_40800C
.text:00402D52                 movzx   eax, byte ptr [ebx]
.text:00402D55                 test    al, al
.text:00402D57                 jnz     short loc_402D10
.text:00402D59
.text:00402D59 loc_402D59:                             ; CODE XREF: sub_402CF0+12↑j
.text:00402D59                 add     esp, 18h
.text:00402D5C                 pop     ebx
.text:00402D5D                 retn
.text:00402D5D ; ---------------------------------------------------------------------------
.text:00402D5E                 align 10h
.text:00402D60
.text:00402D60 loc_402D60:                             ; CODE XREF: sub_402CF0+54↑j
.text:00402D60                 mov     [esp+1Ch+var_18], 1
.text:00402D68                 mov     [esp+1Ch+var_1C], offset unk_408000
.text:00402D6F                 call    sub_4063E0
.text:00402D74                 mov     edx, ds:dword_40800C
.text:00402D7A                 jmp     short loc_402D46
.text:00402D7A ; ---------------------------------------------------------------------------
.text:00402D7C                 align 10h
.text:00402D80
.text:00402D80 loc_402D80:                             ; CODE XREF: sub_402CF0+26↑j
.text:00402D80                                         ; sub_402CF0+34↑j
.text:00402D80                 cmp     [esp+1Ch+var_5], 0
.text:00402D85                 jz      short loc_402D30
.text:00402D87                 mov     edx, ds:dword_40800C
.text:00402D8D                 lea     ecx, [edx+1]
.text:00402D90                 cmp     ecx, ds:dword_408010
.text:00402D96                 ja      short loc_402DA3
.text:00402D98
.text:00402D98 loc_402D98:                             ; CODE XREF: sub_402CF0+CD↓j
.text:00402D98                 mov     byte ptr [edx], 5Ch ; '\'
.text:00402D9B                 inc     ds:dword_40800C
.text:00402DA1                 jmp     short loc_402D30
.text:00402DA3 ; ---------------------------------------------------------------------------
.text:00402DA3
.text:00402DA3 loc_402DA3:                             ; CODE XREF: sub_402CF0+A6↑j
.text:00402DA3                 mov     [esp+1Ch+var_18], 1
.text:00402DAB                 mov     [esp+1Ch+var_1C], offset unk_408000
.text:00402DB2                 call    sub_4063E0
.text:00402DB7                 mov     edx, ds:dword_40800C
.text:00402DBD                 jmp     short loc_402D98
.text:00402DBD ; ---------------------------------------------------------------------------
.text:00402DBF                 align 10h
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: sub_402CF0+2B↑j
.text:00402DC0                 cmp     eax, 5Ch ; '\'
.text:00402DC3                 jz      short loc_402DCE
.text:00402DC5                 cmp     eax, 5Eh ; '^'
.text:00402DC8                 jnz     loc_402D30
.text:00402DCE
.text:00402DCE loc_402DCE:                             ; CODE XREF: sub_402CF0+D3↑j
.text:00402DCE                 xor     [esp+1Ch+var_5], 1
.text:00402DD3                 jmp     loc_402D35
.text:00402DD3 sub_402CF0      endp
.text:00402DD3
.text:00402DD3 ; ---------------------------------------------------------------------------
.text:00402DD8                 align 10h
.text:00402DE0 dword_402DE0    dd 90002D2Dh, 7 dup(90909090h)
.text:00402DE0                                         ; DATA XREF: sub_403030+E4↓o
.text:00402E00 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402E00                                         ; DATA XREF: sub_403030+2FC↓o
.text:00402E2D                 align 20h
.text:00402E40 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402E40                                         ; DATA XREF: sub_403030:loc_403392↓o
.text:00402E6D                 align 20h
.text:00402E80 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402E80                                         ; DATA XREF: sub_403030:loc_403430↓o
.text:00402E80                                         ; sub_403030:loc_4037F7↓o
.text:00402EA6                 align 20h
.text:00402EC0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402EC0                                         ; DATA XREF: sub_403030+48E↓o
.text:00402EE0 dword_402EE0    dd 90909000h, 7 dup(90909090h)
.text:00402EE0                                         ; DATA XREF: sub_403030:loc_403501↓o
.text:00402F00 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402F00                                         ; DATA XREF: sub_403030:loc_40351A↓o
.text:00402F20 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402F20                                         ; DATA XREF: sub_403030:loc_4035FF↓o
.text:00402F20                                         ; sub_403030:loc_40392C↓o
.text:00402F47                 align 20h
.text:00402F60 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402F60                                         ; DATA XREF: sub_403030:loc_403773↓o
.text:00402F8E                 align 20h
.text:00402FA0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402FA0                                         ; DATA XREF: sub_403030:loc_40385F↓o
.text:00402FC1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402FC1                                         ; DATA XREF: sub_403030+93F↓o
.text:00402FDB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00402FDB                                         ; DATA XREF: sub_403030:loc_4039A7↓o
.text:00402FF5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402FF5                                         ; DATA XREF: sub_403030:loc_4039CE↓o
.text:00403013 ; const char aPosixlyCorrect[]
.text:00403013 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_403030:loc_403B80↓o
.text:00403023                 align 10h
.text:00403030
.text:00403030 ; =============== S U B R O U T I N E =======================================
.text:00403030
.text:00403030
.text:00403030 ; int __cdecl sub_403030(int, int, char *Str, int, int, int, int, int)
.text:00403030 sub_403030      proc near               ; CODE XREF: sub_403BC0+5A↓p
.text:00403030                                         ; .text:00403CAA↓p ...
.text:00403030
.text:00403030 Str1            = dword ptr -5Ch
.text:00403030 Str2            = dword ptr -58h
.text:00403030 MaxCount        = dword ptr -54h
.text:00403030 var_50          = dword ptr -50h
.text:00403030 var_4C          = dword ptr -4Ch
.text:00403030 var_3C          = dword ptr -3Ch
.text:00403030 var_38          = dword ptr -38h
.text:00403030 var_34          = dword ptr -34h
.text:00403030 var_30          = dword ptr -30h
.text:00403030 var_2C          = dword ptr -2Ch
.text:00403030 var_28          = dword ptr -28h
.text:00403030 var_24          = dword ptr -24h
.text:00403030 var_20          = dword ptr -20h
.text:00403030 var_1C          = dword ptr -1Ch
.text:00403030 var_18          = dword ptr -18h
.text:00403030 var_14          = dword ptr -14h
.text:00403030 arg_0           = dword ptr  4
.text:00403030 arg_4           = dword ptr  8
.text:00403030 Str             = dword ptr  0Ch
.text:00403030 arg_C           = dword ptr  10h
.text:00403030 arg_10          = dword ptr  14h
.text:00403030 arg_14          = dword ptr  18h
.text:00403030 arg_18          = dword ptr  1Ch
.text:00403030 arg_1C          = dword ptr  20h
.text:00403030
.text:00403030                 push    ebp
.text:00403031                 mov     eax, 0FFFFFFFFh
.text:00403036                 push    edi
.text:00403037                 push    esi
.text:00403038                 push    ebx
.text:00403039                 sub     esp, 4Ch
.text:0040303C                 mov     esi, [esp+5Ch+Str]
.text:00403040                 mov     ebp, [esp+5Ch+arg_1C]
.text:00403044                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403047                 mov     ebx, [ebp+4]
.text:0040304A                 setz    dl
.text:0040304D                 movzx   ecx, dl
.text:00403050                 dec     ecx
.text:00403051                 and     ecx, ebx
.text:00403053                 mov     [esp+5Ch+var_14], ecx
.text:00403057                 mov     ecx, [esp+5Ch+arg_0]
.text:0040305B                 test    ecx, ecx
.text:0040305D                 jle     loc_403187
.text:00403063                 mov     dword ptr [ebp+0Ch], 0
.text:0040306A                 mov     ebx, [ebp+0]
.text:0040306D                 test    ebx, ebx
.text:0040306F                 jz      loc_403BA0
.text:00403075                 mov     edi, [ebp+10h]
.text:00403078                 test    edi, edi
.text:0040307A                 jnz     short loc_4030D3
.text:0040307C                 lea     esi, [esi+0]
.text:00403080
.text:00403080 loc_403080:                             ; CODE XREF: sub_403030+B7C↓j
.text:00403080                 mov     [ebp+24h], ebx
.text:00403083                 mov     esi, [esp+5Ch+Str]
.text:00403087                 mov     [ebp+20h], ebx
.text:0040308A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040308E                 xor     ebx, ebx
.text:00403090                 mov     dword ptr [ebp+14h], 0
.text:00403097                 test    ecx, ecx
.text:00403099                 jz      loc_403B80
.text:0040309F
.text:0040309F loc_40309F:                             ; CODE XREF: sub_403030+B64↓j
.text:0040309F                 mov     ebx, 1
.text:004030A4
.text:004030A4 loc_4030A4:                             ; CODE XREF: sub_403030+B5E↓j
.text:004030A4                 mov     [ebp+1Ch], ebx
.text:004030A7                 mov     ecx, [esp+5Ch+Str]
.text:004030AB                 movzx   eax, byte ptr [ecx]
.text:004030AE                 cmp     al, 2Dh ; '-'
.text:004030B0                 jz      loc_403B70
.text:004030B6                 cmp     al, 2Bh ; '+'
.text:004030B8                 jz      loc_403B59
.text:004030BE                 xor     edx, edx
.text:004030C0                 test    ebx, ebx
.text:004030C2                 setz    dl
.text:004030C5                 mov     [ebp+18h], edx
.text:004030C8
.text:004030C8 loc_4030C8:                             ; CODE XREF: sub_403030+B35↓j
.text:004030C8                 mov     [esp+5Ch+Str], esi
.text:004030CC                 mov     dword ptr [ebp+10h], 1
.text:004030D3
.text:004030D3 loc_4030D3:                             ; CODE XREF: sub_403030+4A↑j
.text:004030D3                 mov     eax, [ebp+14h]
.text:004030D6                 test    eax, eax
.text:004030D8                 jz      short loc_4030E3
.text:004030DA                 cmp     byte ptr [eax], 0
.text:004030DD                 jnz     loc_4031C0
.text:004030E3
.text:004030E3 loc_4030E3:                             ; CODE XREF: sub_403030+A8↑j
.text:004030E3                 mov     ebx, [ebp+0]
.text:004030E6                 cmp     [ebp+24h], ebx
.text:004030E9                 jle     short loc_4030EE
.text:004030EB                 mov     [ebp+24h], ebx
.text:004030EE
.text:004030EE loc_4030EE:                             ; CODE XREF: sub_403030+B9↑j
.text:004030EE                 cmp     [ebp+20h], ebx
.text:004030F1                 jle     short loc_4030F6
.text:004030F3                 mov     [ebp+20h], ebx
.text:004030F6
.text:004030F6 loc_4030F6:                             ; CODE XREF: sub_403030+C1↑j
.text:004030F6                 cmp     dword ptr [ebp+18h], 1
.text:004030FA                 jz      loc_403AD0
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_403030+B13↓j
.text:00403100                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403104                 jz      loc_403AB4
.text:0040310A                 cld
.text:0040310B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040310F                 mov     edx, 3
.text:00403114                 mov     edi, offset dword_402DE0
.text:00403119                 mov     esi, [ecx+ebx*4]
.text:0040311C                 mov     ecx, edx
.text:0040311E                 repe cmpsb
.text:00403120                 jnz     short loc_40315C
.text:00403122                 mov     edx, [ebp+24h]
.text:00403125                 lea     eax, [ebx+1]
.text:00403128                 cmp     [ebp+20h], edx
.text:0040312B                 mov     [ebp+0], eax
.text:0040312E                 jz      loc_403AC8
.text:00403134                 cmp     edx, eax
.text:00403136                 jz      short loc_403150
.text:00403138                 mov     [esp+5Ch+Str2], ebp
.text:0040313C                 mov     ebx, [esp+5Ch+arg_4]
.text:00403140                 mov     [esp+5Ch+Str1], ebx
.text:00403143                 call    sub_403CE0
.text:00403148                 nop
.text:00403149                 lea     esi, [esi+0]
.text:00403150
.text:00403150 loc_403150:                             ; CODE XREF: sub_403030+106↑j
.text:00403150                                         ; sub_403030+A9B↓j
.text:00403150                 mov     eax, [esp+5Ch+arg_0]
.text:00403154                 mov     ebx, eax
.text:00403156                 mov     [ebp+24h], eax
.text:00403159                 mov     [ebp+0], eax
.text:0040315C
.text:0040315C loc_40315C:                             ; CODE XREF: sub_403030+F0↑j
.text:0040315C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403160                 jz      loc_403AB4
.text:00403166                 mov     esi, [esp+5Ch+arg_4]
.text:0040316A                 mov     eax, [esi+ebx*4]
.text:0040316D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403170                 jz      short loc_403197
.text:00403172
.text:00403172 loc_403172:                             ; CODE XREF: sub_403030+16D↓j
.text:00403172                 mov     edx, [ebp+18h]
.text:00403175                 test    edx, edx
.text:00403177                 jz      short loc_403190
.text:00403179                 mov     [ebp+0Ch], eax
.text:0040317C                 lea     edi, [ebx+1]
.text:0040317F                 mov     eax, 1
.text:00403184                 mov     [ebp+0], edi
.text:00403187
.text:00403187 loc_403187:                             ; CODE XREF: sub_403030+2D↑j
.text:00403187                                         ; sub_403030+165↓j ...
.text:00403187                 add     esp, 4Ch
.text:0040318A                 pop     ebx
.text:0040318B                 pop     esi
.text:0040318C                 pop     edi
.text:0040318D                 pop     ebp
.text:0040318E                 retn
.text:0040318E ; ---------------------------------------------------------------------------
.text:0040318F                 align 10h
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_403030+147↑j
.text:00403190                                         ; sub_403030+A8A↓j ...
.text:00403190                 mov     eax, 0FFFFFFFFh
.text:00403195                 jmp     short loc_403187
.text:00403197 ; ---------------------------------------------------------------------------
.text:00403197
.text:00403197 loc_403197:                             ; CODE XREF: sub_403030+140↑j
.text:00403197                 movzx   edx, byte ptr [eax+1]
.text:0040319B                 test    dl, dl
.text:0040319D                 jz      short loc_403172
.text:0040319F                 mov     ebx, [esp+5Ch+arg_C]
.text:004031A3                 xor     ecx, ecx
.text:004031A5                 test    ebx, ebx
.text:004031A7                 jz      short loc_4031B2
.text:004031A9                 cmp     dl, 2Dh ; '-'
.text:004031AC                 jz      loc_403AAA
.text:004031B2
.text:004031B2 loc_4031B2:                             ; CODE XREF: sub_403030+177↑j
.text:004031B2                                         ; sub_403030+A7F↓j
.text:004031B2                 lea     esi, [ecx+eax+1]
.text:004031B6                 mov     [ebp+14h], esi
.text:004031B9                 lea     esi, [esi+0]
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_403030+AD↑j
.text:004031C0                 mov     ecx, [esp+5Ch+arg_C]
.text:004031C4                 test    ecx, ecx
.text:004031C6                 jz      loc_403550
.text:004031CC                 mov     edx, [ebp+0]
.text:004031CF                 mov     edi, [esp+5Ch+arg_4]
.text:004031D3                 mov     eax, [edi+edx*4]
.text:004031D6                 movzx   edx, byte ptr [eax+1]
.text:004031DA                 cmp     dl, 2Dh ; '-'
.text:004031DD                 jz      short loc_4031F5
.text:004031DF                 mov     ebx, [esp+5Ch+arg_14]
.text:004031E3                 test    ebx, ebx
.text:004031E5                 jz      loc_403550
.text:004031EB                 cmp     byte ptr [eax+2], 0
.text:004031EF                 jz      loc_403A8A
.text:004031F5
.text:004031F5 loc_4031F5:                             ; CODE XREF: sub_403030+1AD↑j
.text:004031F5                                         ; sub_403030+A75↓j
.text:004031F5                 mov     [esp+5Ch+var_18], 0
.text:004031FD                 mov     ecx, [ebp+14h]
.text:00403200                 mov     [esp+5Ch+var_1C], 0
.text:00403208                 mov     [esp+5Ch+var_20], 0
.text:00403210                 mov     edi, ecx
.text:00403212                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040321A                 movzx   eax, byte ptr [ecx]
.text:0040321D                 test    al, al
.text:0040321F                 jz      short loc_40323C
.text:00403221                 cmp     al, 3Dh ; '='
.text:00403223                 jz      short loc_40323C
.text:00403225                 lea     esi, [esi+0]
.text:00403229                 lea     edi, [edi+0]
.text:00403230
.text:00403230 loc_403230:                             ; CODE XREF: sub_403030+20A↓j
.text:00403230                 inc     edi
.text:00403231                 movzx   eax, byte ptr [edi]
.text:00403234                 test    al, al
.text:00403236                 jz      short loc_40323C
.text:00403238                 cmp     al, 3Dh ; '='
.text:0040323A                 jnz     short loc_403230
.text:0040323C
.text:0040323C loc_40323C:                             ; CODE XREF: sub_403030+1EF↑j
.text:0040323C                                         ; sub_403030+1F3↑j ...
.text:0040323C                 mov     [esp+5Ch+var_28], 0
.text:00403244                 mov     esi, [esp+5Ch+arg_C]
.text:00403248                 mov     ebx, [esi]
.text:0040324A                 test    ebx, ebx
.text:0040324C                 mov     edx, ebx
.text:0040324E                 jz      loc_403470
.text:00403254                 lea     esi, [esi+0]
.text:0040325A                 lea     edi, [edi+0]
.text:00403260
.text:00403260 loc_403260:                             ; CODE XREF: sub_403030+25E↓j
.text:00403260                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00403264                 mov     ebx, edi
.text:00403266                 sub     ebx, ecx
.text:00403268                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040326C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040326F                 call    strncmp
.text:00403274                 test    eax, eax
.text:00403276                 jz      loc_403A06
.text:0040327C
.text:0040327C loc_40327C:                             ; CODE XREF: sub_403030+A0F↓j
.text:0040327C                                         ; sub_403030+A24↓j ...
.text:0040327C                 inc     [esp+5Ch+var_28]
.text:00403280                 add     esi, 10h
.text:00403283                 mov     ecx, [esi]
.text:00403285                 test    ecx, ecx
.text:00403287                 mov     edx, ecx
.text:00403289                 jz      short loc_403290
.text:0040328B                 mov     ecx, [ebp+14h]
.text:0040328E                 jmp     short loc_403260
.text:00403290 ; ---------------------------------------------------------------------------
.text:00403290
.text:00403290 loc_403290:                             ; CODE XREF: sub_403030+259↑j
.text:00403290                                         ; sub_403030+A55↓j
.text:00403290                 mov     esi, [esp+5Ch+var_20]
.text:00403294                 test    esi, esi
.text:00403296                 jz      short loc_4032A4
.text:00403298                 mov     edx, [esp+5Ch+var_1C]
.text:0040329C                 test    edx, edx
.text:0040329E                 jz      loc_4039B0
.text:004032A4
.text:004032A4 loc_4032A4:                             ; CODE XREF: sub_403030+266↑j
.text:004032A4                 mov     eax, [esp+5Ch+var_18]
.text:004032A8                 test    eax, eax
.text:004032AA                 jz      loc_403470
.text:004032B0                 mov     ecx, [ebp+0]
.text:004032B3                 lea     eax, [ecx+1]
.text:004032B6                 mov     [ebp+0], eax
.text:004032B9                 cmp     byte ptr [edi], 0
.text:004032BC                 jz      loc_4033D0
.text:004032C2                 mov     ecx, [esp+5Ch+var_18]
.text:004032C6                 mov     esi, [ecx+4]
.text:004032C9                 test    esi, esi
.text:004032CB                 jz      short loc_403316
.text:004032CD                 lea     ebx, [edi+1]
.text:004032D0                 mov     [ebp+0Ch], ebx
.text:004032D3
.text:004032D3 loc_4032D3:                             ; CODE XREF: sub_403030+3A8↓j
.text:004032D3                                         ; sub_403030+3C4↓j
.text:004032D3                 mov     ebx, [ebp+14h]
.text:004032D6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:004032D9                 call    strlen
.text:004032DE                 add     [ebp+14h], eax
.text:004032E1                 mov     esi, [esp+5Ch+arg_10]
.text:004032E5                 test    esi, esi
.text:004032E7                 jz      short loc_4032F3
.text:004032E9                 mov     ebp, [esp+5Ch+var_24]
.text:004032ED                 mov     ecx, [esp+5Ch+arg_10]
.text:004032F1                 mov     [ecx], ebp
.text:004032F3
.text:004032F3 loc_4032F3:                             ; CODE XREF: sub_403030+2B7↑j
.text:004032F3                 mov     eax, [esp+5Ch+var_18]
.text:004032F7                 mov     ecx, [eax+8]
.text:004032FA                 test    ecx, ecx
.text:004032FC                 jnz     short loc_40330A
.text:004032FE                 mov     ecx, [esp+5Ch+var_18]
.text:00403302
.text:00403302 loc_403302:                             ; CODE XREF: sub_403030+723↓j
.text:00403302                 mov     eax, [ecx+0Ch]
.text:00403305                 jmp     loc_403187
.text:0040330A ; ---------------------------------------------------------------------------
.text:0040330A
.text:0040330A loc_40330A:                             ; CODE XREF: sub_403030+2CC↑j
.text:0040330A                                         ; sub_403030+719↓j
.text:0040330A                 mov     esi, [eax+0Ch]
.text:0040330D                 xor     eax, eax
.text:0040330F                 mov     [ecx], esi
.text:00403311                 jmp     loc_403187
.text:00403316 ; ---------------------------------------------------------------------------
.text:00403316
.text:00403316 loc_403316:                             ; CODE XREF: sub_403030+29B↑j
.text:00403316                 mov     edi, [esp+5Ch+var_14]
.text:0040331A                 test    edi, edi
.text:0040331C                 jz      short loc_403370
.text:0040331E                 mov     esi, [esp+5Ch+arg_4]
.text:00403322                 mov     edx, [esi+eax*4-4]
.text:00403326                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040332A                 jz      short loc_403392
.text:0040332C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00403333                 call    ds:libintl_gettext
.text:00403339                 mov     edx, [esp+5Ch+var_18]
.text:0040333D                 mov     edi, [edx]
.text:0040333F                 mov     [esp+5Ch+var_4C], edi
.text:00403343                 mov     ebx, [ebp+0]
.text:00403346                 mov     edi, [esp+5Ch+arg_4]
.text:0040334A                 mov     ecx, [edi+ebx*4-4]
.text:0040334E                 movsx   esi, byte ptr [ecx]
.text:00403351                 mov     ecx, ds:_iob
.text:00403357                 add     ecx, 40h ; '@'
.text:0040335A                 mov     [esp+5Ch+var_50], esi
.text:0040335E                 mov     ebx, [edi]
.text:00403360                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403364                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403367                 mov     [esp+5Ch+MaxCount], ebx
.text:0040336B                 call    fprintf
.text:00403370
.text:00403370 loc_403370:                             ; CODE XREF: sub_403030+2EC↑j
.text:00403370                                         ; sub_403030+398↓j
.text:00403370                 mov     ecx, [ebp+14h]
.text:00403373                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403376                 call    strlen
.text:0040337B                 add     [ebp+14h], eax
.text:0040337E                 mov     eax, [esp+5Ch+var_18]
.text:00403382                 mov     esi, [eax+0Ch]
.text:00403385                 mov     [ebp+8], esi
.text:00403388
.text:00403388 loc_403388:                             ; CODE XREF: sub_403030+4E5↓j
.text:00403388                                         ; sub_403030+73E↓j ...
.text:00403388                 mov     eax, 3Fh ; '?'
.text:0040338D                 jmp     loc_403187
.text:00403392 ; ---------------------------------------------------------------------------
.text:00403392
.text:00403392 loc_403392:                             ; CODE XREF: sub_403030+2FA↑j
.text:00403392                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00403399                 call    ds:libintl_gettext
.text:0040339F                 mov     edx, [esp+5Ch+var_18]
.text:004033A3                 mov     edi, [esp+5Ch+arg_4]
.text:004033A7                 mov     ecx, ds:_iob
.text:004033AD                 mov     esi, [edx]
.text:004033AF                 add     ecx, 40h ; '@'
.text:004033B2                 mov     [esp+5Ch+var_50], esi
.text:004033B6                 mov     ebx, [edi]
.text:004033B8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004033BC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004033BF                 mov     [esp+5Ch+MaxCount], ebx
.text:004033C3                 call    fprintf
.text:004033C8                 jmp     short loc_403370
.text:004033C8 ; ---------------------------------------------------------------------------
.text:004033CA                 align 10h
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_403030+28C↑j
.text:004033D0                 mov     ebx, [esp+5Ch+var_18]
.text:004033D4                 cmp     dword ptr [ebx+4], 1
.text:004033D8                 jnz     loc_4032D3
.text:004033DE                 cmp     eax, [esp+5Ch+arg_0]
.text:004033E2                 jge     short loc_4033F9
.text:004033E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004033E8                 lea     edi, [ecx+2]
.text:004033EB                 mov     [ebp+0], edi
.text:004033EE                 mov     esi, [ebx+eax*4]
.text:004033F1                 mov     [ebp+0Ch], esi
.text:004033F4                 jmp     loc_4032D3
.text:004033F9 ; ---------------------------------------------------------------------------
.text:004033F9
.text:004033F9 loc_4033F9:                             ; CODE XREF: sub_403030+3B2↑j
.text:004033F9                 mov     edx, [esp+5Ch+var_14]
.text:004033FD                 test    edx, edx
.text:004033FF                 jnz     short loc_403430
.text:00403401
.text:00403401 loc_403401:                             ; CODE XREF: sub_403030+437↓j
.text:00403401                 mov     edx, [ebp+14h]
.text:00403404                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403407                 call    strlen
.text:0040340C                 add     [ebp+14h], eax
.text:0040340F                 mov     eax, [esp+5Ch+var_18]
.text:00403413                 mov     edi, [eax+0Ch]
.text:00403416                 mov     [ebp+8], edi
.text:00403419
.text:00403419 loc_403419:                             ; CODE XREF: sub_403030+7C2↓j
.text:00403419                 mov     ebp, [esp+5Ch+Str]
.text:0040341D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403421                 setnz   bl
.text:00403424                 movzx   esi, bl
.text:00403427                 lea     eax, [esi+esi*4+3Ah]
.text:0040342B                 jmp     loc_403187
.text:00403430 ; ---------------------------------------------------------------------------
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_403030+3CF↑j
.text:00403430                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00403437                 call    ds:libintl_gettext
.text:0040343D                 mov     ecx, [ebp+0]
.text:00403440                 mov     esi, [esp+5Ch+arg_4]
.text:00403444                 mov     ebx, [esi+ecx*4-4]
.text:00403448                 mov     ecx, ds:_iob
.text:0040344E                 mov     [esp+5Ch+var_50], ebx
.text:00403452                 mov     edi, [esi]
.text:00403454                 add     ecx, 40h ; '@'
.text:00403457                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040345B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040345E                 mov     [esp+5Ch+MaxCount], edi
.text:00403462                 call    fprintf
.text:00403467                 jmp     short loc_403401
.text:00403467 ; ---------------------------------------------------------------------------
.text:00403469                 align 10h
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: sub_403030+21E↑j
.text:00403470                                         ; sub_403030+27A↑j
.text:00403470                 mov     eax, [esp+5Ch+arg_14]
.text:00403474                 test    eax, eax
.text:00403476                 jz      short loc_4034A6
.text:00403478                 mov     ebx, [ebp+0]
.text:0040347B                 mov     esi, [esp+5Ch+arg_4]
.text:0040347F                 mov     edi, [esi+ebx*4]
.text:00403482                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403486                 jz      short loc_4034A9
.text:00403488                 mov     ecx, [ebp+14h]
.text:0040348B                 mov     edx, [esp+5Ch+Str]
.text:0040348F                 movsx   ebx, byte ptr [ecx]
.text:00403492                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403495                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00403499                 call    strchr
.text:0040349E                 test    eax, eax
.text:004034A0                 jnz     loc_403550
.text:004034A6
.text:004034A6 loc_4034A6:                             ; CODE XREF: sub_403030+446↑j
.text:004034A6                 mov     ebx, [ebp+0]
.text:004034A9
.text:004034A9 loc_4034A9:                             ; CODE XREF: sub_403030+456↑j
.text:004034A9                 mov     eax, [esp+5Ch+var_14]
.text:004034AD                 test    eax, eax
.text:004034AF                 jz      short loc_403501
.text:004034B1                 mov     esi, [esp+5Ch+arg_4]
.text:004034B5                 mov     edi, [esi+ebx*4]
.text:004034B8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004034BC                 jz      short loc_40351A
.text:004034BE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004034C5                 call    ds:libintl_gettext
.text:004034CB                 mov     edi, [ebp+14h]
.text:004034CE                 mov     [esp+5Ch+var_4C], edi
.text:004034D2                 mov     ebx, [ebp+0]
.text:004034D5                 mov     edi, [esp+5Ch+arg_4]
.text:004034D9                 mov     esi, [edi+ebx*4]
.text:004034DC                 movsx   ecx, byte ptr [esi]
.text:004034DF                 mov     esi, ds:_iob
.text:004034E5                 add     esi, 40h ; '@'
.text:004034E8                 mov     [esp+5Ch+var_50], ecx
.text:004034EC                 mov     ebx, [edi]
.text:004034EE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004034F2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004034F5                 mov     [esp+5Ch+MaxCount], ebx
.text:004034F9                 call    fprintf
.text:004034FE
.text:004034FE loc_4034FE:                             ; CODE XREF: sub_403030+51D↓j
.text:004034FE                 mov     ebx, [ebp+0]
.text:00403501
.text:00403501 loc_403501:                             ; CODE XREF: sub_403030+47F↑j
.text:00403501                 mov     dword ptr [ebp+14h], offset dword_402EE0
.text:00403508                 lea     edx, [ebx+1]
.text:0040350B                 mov     [ebp+0], edx
.text:0040350E
.text:0040350E loc_40350E:                             ; CODE XREF: sub_403030+999↓j
.text:0040350E                 mov     dword ptr [ebp+8], 0
.text:00403515                 jmp     loc_403388
.text:0040351A ; ---------------------------------------------------------------------------
.text:0040351A
.text:0040351A loc_40351A:                             ; CODE XREF: sub_403030+48C↑j
.text:0040351A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00403521                 call    ds:libintl_gettext
.text:00403527                 mov     ecx, [ebp+14h]
.text:0040352A                 mov     edi, [esp+5Ch+arg_4]
.text:0040352E                 mov     edx, ds:_iob
.text:00403534                 mov     [esp+5Ch+var_50], ecx
.text:00403538                 mov     ebx, [edi]
.text:0040353A                 add     edx, 40h ; '@'
.text:0040353D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403541                 mov     [esp+5Ch+MaxCount], ebx
.text:00403545                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00403548                 call    fprintf
.text:0040354D                 jmp     short loc_4034FE
.text:0040354D ; ---------------------------------------------------------------------------
.text:0040354F                 align 10h
.text:00403550
.text:00403550 loc_403550:                             ; CODE XREF: sub_403030+196↑j
.text:00403550                                         ; sub_403030+1B5↑j ...
.text:00403550                 mov     esi, [ebp+14h]
.text:00403553                 movzx   ebx, byte ptr [esi]
.text:00403556                 inc     esi
.text:00403557                 mov     [ebp+14h], esi
.text:0040355A                 mov     ecx, [esp+5Ch+Str]
.text:0040355E                 movsx   esi, bl
.text:00403561                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403565                 mov     edi, esi
.text:00403567                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040356A                 call    strchr
.text:0040356F                 mov     ecx, [ebp+14h]
.text:00403572                 cmp     byte ptr [ecx], 0
.text:00403575                 jnz     short loc_40357A
.text:00403577                 inc     dword ptr [ebp+0]
.text:0040357A
.text:0040357A loc_40357A:                             ; CODE XREF: sub_403030+545↑j
.text:0040357A                 test    eax, eax
.text:0040357C                 jz      loc_403960
.text:00403582                 cmp     bl, 3Ah ; ':'
.text:00403585                 jz      loc_403960
.text:0040358B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040358E                 jz      loc_403646
.text:00403594                 movzx   edx, byte ptr [eax+1]
.text:00403598
.text:00403598 loc_403598:                             ; CODE XREF: sub_403030+61D↓j
.text:00403598                 cmp     dl, 3Ah ; ':'
.text:0040359B                 jz      short loc_4035A4
.text:0040359D
.text:0040359D loc_40359D:                             ; CODE XREF: sub_403030+590↓j
.text:0040359D                 mov     eax, esi
.text:0040359F                 jmp     loc_403187
.text:004035A4 ; ---------------------------------------------------------------------------
.text:004035A4
.text:004035A4 loc_4035A4:                             ; CODE XREF: sub_403030+56B↑j
.text:004035A4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004035A8                 jz      loc_403631
.text:004035AE                 cmp     byte ptr [ecx], 0
.text:004035B1                 jz      short loc_4035C2
.text:004035B3
.text:004035B3 loc_4035B3:                             ; CODE XREF: sub_403030+604↓j
.text:004035B3                 inc     dword ptr [ebp+0]
.text:004035B6                 mov     [ebp+0Ch], ecx
.text:004035B9
.text:004035B9 loc_4035B9:                             ; CODE XREF: sub_403030+5AB↓j
.text:004035B9                                         ; sub_403030+5C6↓j ...
.text:004035B9                 mov     dword ptr [ebp+14h], 0
.text:004035C0                 jmp     short loc_40359D
.text:004035C2 ; ---------------------------------------------------------------------------
.text:004035C2
.text:004035C2 loc_4035C2:                             ; CODE XREF: sub_403030+581↑j
.text:004035C2                 mov     ecx, [ebp+0]
.text:004035C5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004035C9                 jz      short loc_4035DD
.text:004035CB                 mov     eax, [esp+5Ch+arg_4]
.text:004035CF                 lea     edx, [ecx+1]
.text:004035D2                 mov     [ebp+0], edx
.text:004035D5                 mov     ebx, [eax+ecx*4]
.text:004035D8                 mov     [ebp+0Ch], ebx
.text:004035DB                 jmp     short loc_4035B9
.text:004035DD ; ---------------------------------------------------------------------------
.text:004035DD
.text:004035DD loc_4035DD:                             ; CODE XREF: sub_403030+599↑j
.text:004035DD                 mov     ecx, [esp+5Ch+var_14]
.text:004035E1                 test    ecx, ecx
.text:004035E3                 jnz     short loc_4035FF
.text:004035E5
.text:004035E5 loc_4035E5:                             ; CODE XREF: sub_403030+5FF↓j
.text:004035E5                 mov     [ebp+8], edi
.text:004035E8                 mov     edi, [esp+5Ch+Str]
.text:004035EC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004035EF                 jz      short loc_4035F8
.text:004035F1                 mov     esi, 3Fh ; '?'
.text:004035F6                 jmp     short loc_4035B9
.text:004035F8 ; ---------------------------------------------------------------------------
.text:004035F8
.text:004035F8 loc_4035F8:                             ; CODE XREF: sub_403030+5BF↑j
.text:004035F8                 mov     esi, 3Ah ; ':'
.text:004035FD                 jmp     short loc_4035B9
.text:004035FF ; ---------------------------------------------------------------------------
.text:004035FF
.text:004035FF loc_4035FF:                             ; CODE XREF: sub_403030+5B3↑j
.text:004035FF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403606                 call    ds:libintl_gettext
.text:0040360C                 mov     [esp+5Ch+var_50], edi
.text:00403610                 mov     ebx, [esp+5Ch+arg_4]
.text:00403614                 mov     edx, ds:_iob
.text:0040361A                 mov     esi, [ebx]
.text:0040361C                 add     edx, 40h ; '@'
.text:0040361F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403623                 mov     [esp+5Ch+MaxCount], esi
.text:00403627                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040362A                 call    fprintf
.text:0040362F                 jmp     short loc_4035E5
.text:00403631 ; ---------------------------------------------------------------------------
.text:00403631
.text:00403631 loc_403631:                             ; CODE XREF: sub_403030+578↑j
.text:00403631                 cmp     byte ptr [ecx], 0
.text:00403634                 jnz     loc_4035B3
.text:0040363A                 mov     dword ptr [ebp+0Ch], 0
.text:00403641                 jmp     loc_4035B9
.text:00403646 ; ---------------------------------------------------------------------------
.text:00403646
.text:00403646 loc_403646:                             ; CODE XREF: sub_403030+55E↑j
.text:00403646                 movzx   edx, byte ptr [eax+1]
.text:0040364A                 cmp     dl, 3Bh ; ';'
.text:0040364D                 jnz     loc_403598
.text:00403653                 mov     [esp+5Ch+var_2C], 0
.text:0040365B                 mov     [esp+5Ch+var_30], 0
.text:00403663                 mov     [esp+5Ch+var_34], 0
.text:0040366B                 mov     [esp+5Ch+var_38], 0
.text:00403673                 cmp     byte ptr [ecx], 0
.text:00403676                 jz      loc_4038EB
.text:0040367C                 inc     dword ptr [ebp+0]
.text:0040367F                 mov     [ebp+0Ch], ecx
.text:00403682
.text:00403682 loc_403682:                             ; CODE XREF: sub_403030+8D4↓j
.text:00403682                 mov     edi, [ebp+0Ch]
.text:00403685                 mov     [ebp+14h], edi
.text:00403688                 movzx   eax, byte ptr [edi]
.text:0040368B                 test    al, al
.text:0040368D                 jz      short loc_40369F
.text:0040368F                 cmp     al, 3Dh ; '='
.text:00403691                 jz      short loc_40369F
.text:00403693
.text:00403693 loc_403693:                             ; CODE XREF: sub_403030+66D↓j
.text:00403693                 inc     edi
.text:00403694                 movzx   eax, byte ptr [edi]
.text:00403697                 test    al, al
.text:00403699                 jz      short loc_40369F
.text:0040369B                 cmp     al, 3Dh ; '='
.text:0040369D                 jnz     short loc_403693
.text:0040369F
.text:0040369F loc_40369F:                             ; CODE XREF: sub_403030+65D↑j
.text:0040369F                                         ; sub_403030+661↑j ...
.text:0040369F                 mov     [esp+5Ch+var_3C], 0
.text:004036A7                 mov     esi, [esp+5Ch+arg_C]
.text:004036AB                 mov     eax, [esi]
.text:004036AD                 test    eax, eax
.text:004036AF                 jz      loc_403830
.text:004036B5                 mov     ecx, eax
.text:004036B7
.text:004036B7 loc_4036B7:                             ; CODE XREF: sub_403030+6B3↓j
.text:004036B7                 mov     ebx, [ebp+14h]
.text:004036BA                 mov     eax, edi
.text:004036BC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004036BF                 sub     eax, ebx
.text:004036C1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004036C5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004036C9                 call    strncmp
.text:004036CE                 test    eax, eax
.text:004036D0                 jz      loc_403897
.text:004036D6
.text:004036D6 loc_4036D6:                             ; CODE XREF: sub_403030+88C↓j
.text:004036D6                                         ; sub_403030+89D↓j
.text:004036D6                 inc     [esp+5Ch+var_3C]
.text:004036DA                 add     esi, 10h
.text:004036DD                 mov     edx, [esi]
.text:004036DF                 test    edx, edx
.text:004036E1                 mov     ecx, edx
.text:004036E3                 jnz     short loc_4036B7
.text:004036E5
.text:004036E5 loc_4036E5:                             ; CODE XREF: sub_403030+8B6↓j
.text:004036E5                 mov     esi, [esp+5Ch+var_34]
.text:004036E9                 test    esi, esi
.text:004036EB                 jz      short loc_4036F9
.text:004036ED                 mov     ebx, [esp+5Ch+var_30]
.text:004036F1                 test    ebx, ebx
.text:004036F3                 jz      loc_403841
.text:004036F9
.text:004036F9 loc_4036F9:                             ; CODE XREF: sub_403030+6BB↑j
.text:004036F9                 mov     esi, [esp+5Ch+var_2C]
.text:004036FD                 test    esi, esi
.text:004036FF                 jz      loc_403830
.text:00403705                 cmp     byte ptr [edi], 0
.text:00403708                 jz      loc_4037B0
.text:0040370E                 mov     ecx, [esp+5Ch+var_2C]
.text:00403712                 mov     ebx, [ecx+4]
.text:00403715                 test    ebx, ebx
.text:00403717                 jz      short loc_403758
.text:00403719                 lea     edx, [edi+1]
.text:0040371C                 mov     [ebp+0Ch], edx
.text:0040371F
.text:0040371F loc_40371F:                             ; CODE XREF: sub_403030+788↓j
.text:0040371F                                         ; sub_403030+7A7↓j
.text:0040371F                 mov     edi, [ebp+14h]
.text:00403722                 mov     [esp+5Ch+Str1], edi ; Str
.text:00403725                 call    strlen
.text:0040372A                 add     [ebp+14h], eax
.text:0040372D                 mov     eax, [esp+5Ch+arg_10]
.text:00403731                 test    eax, eax
.text:00403733                 jz      short loc_403740
.text:00403735                 mov     edx, [esp+5Ch+var_38]
.text:00403739                 mov     ebp, [esp+5Ch+arg_10]
.text:0040373D                 mov     [ebp+0], edx
.text:00403740
.text:00403740 loc_403740:                             ; CODE XREF: sub_403030+703↑j
.text:00403740                 mov     eax, [esp+5Ch+var_2C]
.text:00403744                 mov     ecx, [eax+8]
.text:00403747                 test    ecx, ecx
.text:00403749                 jnz     loc_40330A
.text:0040374F                 mov     ecx, [esp+5Ch+var_2C]
.text:00403753                 jmp     loc_403302
.text:00403758 ; ---------------------------------------------------------------------------
.text:00403758
.text:00403758 loc_403758:                             ; CODE XREF: sub_403030+6E7↑j
.text:00403758                 mov     eax, [esp+5Ch+var_14]
.text:0040375C                 test    eax, eax
.text:0040375E                 jnz     short loc_403773
.text:00403760
.text:00403760 loc_403760:                             ; CODE XREF: sub_403030+779↓j
.text:00403760                 mov     ecx, [ebp+14h]
.text:00403763                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403766                 call    strlen
.text:0040376B                 add     [ebp+14h], eax
.text:0040376E                 jmp     loc_403388
.text:00403773 ; ---------------------------------------------------------------------------
.text:00403773
.text:00403773 loc_403773:                             ; CODE XREF: sub_403030+72E↑j
.text:00403773                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040377A                 call    ds:libintl_gettext
.text:00403780                 mov     edx, [esp+5Ch+var_2C]
.text:00403784                 mov     ebx, [esp+5Ch+arg_4]
.text:00403788                 mov     edi, [edx]
.text:0040378A                 mov     [esp+5Ch+var_50], edi
.text:0040378E                 mov     edi, ds:_iob
.text:00403794                 mov     esi, [ebx]
.text:00403796                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040379A                 add     edi, 40h ; '@'
.text:0040379D                 mov     [esp+5Ch+MaxCount], esi
.text:004037A1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004037A4                 call    fprintf
.text:004037A9                 jmp     short loc_403760
.text:004037A9 ; ---------------------------------------------------------------------------
.text:004037AB                 align 10h
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: sub_403030+6D8↑j
.text:004037B0                 mov     esi, [esp+5Ch+var_2C]
.text:004037B4                 cmp     dword ptr [esi+4], 1
.text:004037B8                 jnz     loc_40371F
.text:004037BE                 mov     ecx, [ebp+0]
.text:004037C1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004037C5                 jge     short loc_4037DC
.text:004037C7                 mov     eax, [esp+5Ch+arg_4]
.text:004037CB                 lea     ebx, [ecx+1]
.text:004037CE                 mov     [ebp+0], ebx
.text:004037D1                 mov     edi, [eax+ecx*4]
.text:004037D4                 mov     [ebp+0Ch], edi
.text:004037D7                 jmp     loc_40371F
.text:004037DC ; ---------------------------------------------------------------------------
.text:004037DC
.text:004037DC loc_4037DC:                             ; CODE XREF: sub_403030+795↑j
.text:004037DC                 mov     edx, [esp+5Ch+var_14]
.text:004037E0                 test    edx, edx
.text:004037E2                 jnz     short loc_4037F7
.text:004037E4
.text:004037E4 loc_4037E4:                             ; CODE XREF: sub_403030+7FE↓j
.text:004037E4                 mov     edx, [ebp+14h]
.text:004037E7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004037EA                 call    strlen
.text:004037EF                 add     [ebp+14h], eax
.text:004037F2                 jmp     loc_403419
.text:004037F7 ; ---------------------------------------------------------------------------
.text:004037F7
.text:004037F7 loc_4037F7:                             ; CODE XREF: sub_403030+7B2↑j
.text:004037F7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004037FE                 call    ds:libintl_gettext
.text:00403804                 mov     ecx, [ebp+0]
.text:00403807                 mov     ebx, [esp+5Ch+arg_4]
.text:0040380B                 mov     edi, [ebx+ecx*4-4]
.text:0040380F                 mov     ecx, ds:_iob
.text:00403815                 mov     [esp+5Ch+var_50], edi
.text:00403819                 mov     esi, [ebx]
.text:0040381B                 add     ecx, 40h ; '@'
.text:0040381E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403822                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403825                 mov     [esp+5Ch+MaxCount], esi
.text:00403829                 call    fprintf
.text:0040382E                 jmp     short loc_4037E4
.text:00403830 ; ---------------------------------------------------------------------------
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_403030+67F↑j
.text:00403830                                         ; sub_403030+6CF↑j
.text:00403830                 mov     dword ptr [ebp+14h], 0
.text:00403837                 mov     eax, 57h ; 'W'
.text:0040383C                 jmp     loc_403187
.text:00403841 ; ---------------------------------------------------------------------------
.text:00403841
.text:00403841 loc_403841:                             ; CODE XREF: sub_403030+6C3↑j
.text:00403841                 mov     edi, [esp+5Ch+var_14]
.text:00403845                 test    edi, edi
.text:00403847                 jnz     short loc_40385F
.text:00403849
.text:00403849 loc_403849:                             ; CODE XREF: sub_403030+865↓j
.text:00403849                 mov     edx, [ebp+14h]
.text:0040384C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040384F                 call    strlen
.text:00403854                 add     [ebp+14h], eax
.text:00403857                 inc     dword ptr [ebp+0]
.text:0040385A                 jmp     loc_403388
.text:0040385F ; ---------------------------------------------------------------------------
.text:0040385F
.text:0040385F loc_40385F:                             ; CODE XREF: sub_403030+817↑j
.text:0040385F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00403866                 call    ds:libintl_gettext
.text:0040386C                 mov     ecx, [ebp+0]
.text:0040386F                 mov     ebx, [esp+5Ch+arg_4]
.text:00403873                 mov     edi, [ebx+ecx*4]
.text:00403876                 mov     ecx, ds:_iob
.text:0040387C                 mov     [esp+5Ch+var_50], edi
.text:00403880                 mov     esi, [ebx]
.text:00403882                 add     ecx, 40h ; '@'
.text:00403885                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403889                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040388C                 mov     [esp+5Ch+MaxCount], esi
.text:00403890                 call    fprintf
.text:00403895                 jmp     short loc_403849
.text:00403897 ; ---------------------------------------------------------------------------
.text:00403897
.text:00403897 loc_403897:                             ; CODE XREF: sub_403030+6A0↑j
.text:00403897                 mov     edx, [ebp+14h]
.text:0040389A                 mov     ebx, edi
.text:0040389C                 mov     ecx, [esi]
.text:0040389E                 sub     ebx, edx
.text:004038A0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004038A3                 call    strlen
.text:004038A8                 cmp     ebx, eax
.text:004038AA                 jz      short loc_4038D2
.text:004038AC                 mov     ebx, [esp+5Ch+var_2C]
.text:004038B0                 test    ebx, ebx
.text:004038B2                 jz      short loc_4038C1
.text:004038B4                 mov     [esp+5Ch+var_34], 1
.text:004038BC                 jmp     loc_4036D6
.text:004038C1 ; ---------------------------------------------------------------------------
.text:004038C1
.text:004038C1 loc_4038C1:                             ; CODE XREF: sub_403030+882↑j
.text:004038C1                 mov     [esp+5Ch+var_2C], esi
.text:004038C5                 mov     ecx, [esp+5Ch+var_3C]
.text:004038C9                 mov     [esp+5Ch+var_38], ecx
.text:004038CD                 jmp     loc_4036D6
.text:004038D2 ; ---------------------------------------------------------------------------
.text:004038D2
.text:004038D2 loc_4038D2:                             ; CODE XREF: sub_403030+87A↑j
.text:004038D2                 mov     [esp+5Ch+var_2C], esi
.text:004038D6                 mov     eax, [esp+5Ch+var_3C]
.text:004038DA                 mov     [esp+5Ch+var_30], 1
.text:004038E2                 mov     [esp+5Ch+var_38], eax
.text:004038E6                 jmp     loc_4036E5
.text:004038EB ; ---------------------------------------------------------------------------
.text:004038EB
.text:004038EB loc_4038EB:                             ; CODE XREF: sub_403030+646↑j
.text:004038EB                 mov     edx, [ebp+0]
.text:004038EE                 cmp     edx, [esp+5Ch+arg_0]
.text:004038F2                 jz      short loc_403909
.text:004038F4                 mov     ebx, [esp+5Ch+arg_4]
.text:004038F8                 lea     esi, [edx+1]
.text:004038FB                 mov     [ebp+0], esi
.text:004038FE                 mov     edi, [ebx+edx*4]
.text:00403901                 mov     [ebp+0Ch], edi
.text:00403904                 jmp     loc_403682
.text:00403909 ; ---------------------------------------------------------------------------
.text:00403909
.text:00403909 loc_403909:                             ; CODE XREF: sub_403030+8C2↑j
.text:00403909                 mov     edi, [esp+5Ch+var_14]
.text:0040390D                 test    edi, edi
.text:0040390F                 jnz     short loc_40392C
.text:00403911
.text:00403911 loc_403911:                             ; CODE XREF: sub_403030+92C↓j
.text:00403911                 mov     [ebp+8], esi
.text:00403914                 mov     ebp, [esp+5Ch+Str]
.text:00403918                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040391C                 jz      short loc_403928
.text:0040391E                 mov     bl, 3Fh ; '?'
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: sub_403030+8FA↓j
.text:00403920                 movsx   eax, bl
.text:00403923                 jmp     loc_403187
.text:00403928 ; ---------------------------------------------------------------------------
.text:00403928
.text:00403928 loc_403928:                             ; CODE XREF: sub_403030+8EC↑j
.text:00403928                 mov     bl, 3Ah ; ':'
.text:0040392A                 jmp     short loc_403920
.text:0040392C ; ---------------------------------------------------------------------------
.text:0040392C
.text:0040392C loc_40392C:                             ; CODE XREF: sub_403030+8DF↑j
.text:0040392C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403933                 call    ds:libintl_gettext
.text:00403939                 mov     [esp+5Ch+var_50], esi
.text:0040393D                 mov     edx, [esp+5Ch+arg_4]
.text:00403941                 mov     ecx, ds:_iob
.text:00403947                 mov     ebx, [edx]
.text:00403949                 add     ecx, 40h ; '@'
.text:0040394C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403950                 mov     [esp+5Ch+MaxCount], ebx
.text:00403954                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403957                 call    fprintf
.text:0040395C                 jmp     short loc_403911
.text:0040395C ; ---------------------------------------------------------------------------
.text:0040395E                 align 10h
.text:00403960
.text:00403960 loc_403960:                             ; CODE XREF: sub_403030+54C↑j
.text:00403960                                         ; sub_403030+555↑j
.text:00403960                 mov     eax, [esp+5Ch+var_14]
.text:00403964                 test    eax, eax
.text:00403966                 jz      short loc_40399F
.text:00403968                 mov     ebx, [ebp+1Ch]
.text:0040396B                 test    ebx, ebx
.text:0040396D                 jz      short loc_4039A7
.text:0040396F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00403976
.text:00403976 loc_403976:                             ; CODE XREF: sub_403030+97E↓j
.text:00403976                 call    ds:libintl_gettext
.text:0040397C                 mov     [esp+5Ch+var_50], esi
.text:00403980                 mov     ebx, [esp+5Ch+arg_4]
.text:00403984                 mov     edx, ds:_iob
.text:0040398A                 mov     esi, [ebx]
.text:0040398C                 add     edx, 40h ; '@'
.text:0040398F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403993                 mov     [esp+5Ch+MaxCount], esi
.text:00403997                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040399A                 call    fprintf
.text:0040399F
.text:0040399F loc_40399F:                             ; CODE XREF: sub_403030+936↑j
.text:0040399F                 mov     [ebp+8], edi
.text:004039A2                 jmp     loc_403388
.text:004039A7 ; ---------------------------------------------------------------------------
.text:004039A7
.text:004039A7 loc_4039A7:                             ; CODE XREF: sub_403030+93D↑j
.text:004039A7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004039AE                 jmp     short loc_403976
.text:004039B0 ; ---------------------------------------------------------------------------
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_403030+26E↑j
.text:004039B0                 mov     edi, [esp+5Ch+var_14]
.text:004039B4                 test    edi, edi
.text:004039B6                 jnz     short loc_4039CE
.text:004039B8
.text:004039B8 loc_4039B8:                             ; CODE XREF: sub_403030+9D4↓j
.text:004039B8                 mov     edx, [ebp+14h]
.text:004039BB                 mov     [esp+5Ch+Str1], edx ; Str
.text:004039BE                 call    strlen
.text:004039C3                 add     [ebp+14h], eax
.text:004039C6                 inc     dword ptr [ebp+0]
.text:004039C9                 jmp     loc_40350E
.text:004039CE ; ---------------------------------------------------------------------------
.text:004039CE
.text:004039CE loc_4039CE:                             ; CODE XREF: sub_403030+986↑j
.text:004039CE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004039D5                 call    ds:libintl_gettext
.text:004039DB                 mov     ebx, [ebp+0]
.text:004039DE                 mov     edi, [esp+5Ch+arg_4]
.text:004039E2                 mov     ecx, [edi+ebx*4]
.text:004039E5                 mov     ebx, ds:_iob
.text:004039EB                 mov     [esp+5Ch+var_50], ecx
.text:004039EF                 mov     esi, [edi]
.text:004039F1                 add     ebx, 40h ; '@'
.text:004039F4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004039F8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004039FB                 mov     [esp+5Ch+MaxCount], esi
.text:004039FF                 call    fprintf
.text:00403A04                 jmp     short loc_4039B8
.text:00403A06 ; ---------------------------------------------------------------------------
.text:00403A06
.text:00403A06 loc_403A06:                             ; CODE XREF: sub_403030+246↑j
.text:00403A06                 mov     ecx, [ebp+14h]
.text:00403A09                 mov     ebx, edi
.text:00403A0B                 mov     edx, [esi]
.text:00403A0D                 sub     ebx, ecx
.text:00403A0F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403A12                 call    strlen
.text:00403A17                 cmp     ebx, eax
.text:00403A19                 jz      short loc_403A71
.text:00403A1B                 mov     ebx, [esp+5Ch+var_18]
.text:00403A1F                 test    ebx, ebx
.text:00403A21                 jz      short loc_403A60
.text:00403A23                 mov     edx, [esp+5Ch+arg_14]
.text:00403A27                 test    edx, edx
.text:00403A29                 jnz     short loc_403A37
.text:00403A2B                 mov     ecx, [esp+5Ch+var_18]
.text:00403A2F                 mov     ebx, [esi+4]
.text:00403A32                 cmp     [ecx+4], ebx
.text:00403A35                 jz      short loc_403A44
.text:00403A37
.text:00403A37 loc_403A37:                             ; CODE XREF: sub_403030+9F9↑j
.text:00403A37                                         ; sub_403030+A1A↓j ...
.text:00403A37                 mov     [esp+5Ch+var_20], 1
.text:00403A3F                 jmp     loc_40327C
.text:00403A44 ; ---------------------------------------------------------------------------
.text:00403A44
.text:00403A44 loc_403A44:                             ; CODE XREF: sub_403030+A05↑j
.text:00403A44                 mov     edx, [esi+8]
.text:00403A47                 cmp     [ecx+8], edx
.text:00403A4A                 jnz     short loc_403A37
.text:00403A4C                 mov     ebx, [esi+0Ch]
.text:00403A4F                 cmp     [ecx+0Ch], ebx
.text:00403A52                 jnz     short loc_403A37
.text:00403A54                 jmp     loc_40327C
.text:00403A54 ; ---------------------------------------------------------------------------
.text:00403A59                 align 10h
.text:00403A60
.text:00403A60 loc_403A60:                             ; CODE XREF: sub_403030+9F1↑j
.text:00403A60                 mov     [esp+5Ch+var_18], esi
.text:00403A64                 mov     eax, [esp+5Ch+var_28]
.text:00403A68                 mov     [esp+5Ch+var_24], eax
.text:00403A6C                 jmp     loc_40327C
.text:00403A71 ; ---------------------------------------------------------------------------
.text:00403A71
.text:00403A71 loc_403A71:                             ; CODE XREF: sub_403030+9E9↑j
.text:00403A71                 mov     [esp+5Ch+var_18], esi
.text:00403A75                 mov     ecx, [esp+5Ch+var_28]
.text:00403A79                 mov     [esp+5Ch+var_1C], 1
.text:00403A81                 mov     [esp+5Ch+var_24], ecx
.text:00403A85                 jmp     loc_403290
.text:00403A8A ; ---------------------------------------------------------------------------
.text:00403A8A
.text:00403A8A loc_403A8A:                             ; CODE XREF: sub_403030+1BF↑j
.text:00403A8A                 mov     eax, [esp+5Ch+Str]
.text:00403A8E                 movsx   esi, dl
.text:00403A91                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403A95                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403A98                 call    strchr
.text:00403A9D                 test    eax, eax
.text:00403A9F                 jnz     loc_403550
.text:00403AA5                 jmp     loc_4031F5
.text:00403AAA ; ---------------------------------------------------------------------------
.text:00403AAA
.text:00403AAA loc_403AAA:                             ; CODE XREF: sub_403030+17C↑j
.text:00403AAA                 mov     ecx, 1
.text:00403AAF                 jmp     loc_4031B2
.text:00403AB4 ; ---------------------------------------------------------------------------
.text:00403AB4
.text:00403AB4 loc_403AB4:                             ; CODE XREF: sub_403030+D4↑j
.text:00403AB4                                         ; sub_403030+130↑j
.text:00403AB4                 mov     eax, [ebp+20h]
.text:00403AB7                 cmp     eax, [ebp+24h]
.text:00403ABA                 jz      loc_403190
.text:00403AC0                 mov     [ebp+0], eax
.text:00403AC3                 jmp     loc_403190
.text:00403AC8 ; ---------------------------------------------------------------------------
.text:00403AC8
.text:00403AC8 loc_403AC8:                             ; CODE XREF: sub_403030+FE↑j
.text:00403AC8                 mov     [ebp+20h], eax
.text:00403ACB                 jmp     loc_403150
.text:00403AD0 ; ---------------------------------------------------------------------------
.text:00403AD0
.text:00403AD0 loc_403AD0:                             ; CODE XREF: sub_403030+CA↑j
.text:00403AD0                 mov     edx, [ebp+20h]
.text:00403AD3                 mov     eax, [ebp+24h]
.text:00403AD6                 cmp     edx, eax
.text:00403AD8                 jz      short loc_403B50
.text:00403ADA                 cmp     eax, ebx
.text:00403ADC                 jz      short loc_403AF1
.text:00403ADE                 mov     [esp+5Ch+Str2], ebp
.text:00403AE2                 mov     ebx, [esp+5Ch+arg_4]
.text:00403AE6                 mov     [esp+5Ch+Str1], ebx
.text:00403AE9                 call    sub_403CE0
.text:00403AEE                 mov     ebx, [ebp+0]
.text:00403AF1
.text:00403AF1 loc_403AF1:                             ; CODE XREF: sub_403030+AAC↑j
.text:00403AF1                                         ; sub_403030+B22↓j ...
.text:00403AF1                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403AF5                 jge     short loc_403B40
.text:00403AF7                 mov     esi, [esp+5Ch+arg_4]
.text:00403AFB                 mov     eax, [esi+ebx*4]
.text:00403AFE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403B01                 jz      short loc_403B48
.text:00403B03                 lea     esi, [esi+0]
.text:00403B09                 lea     edi, [edi+0]
.text:00403B10
.text:00403B10 loc_403B10:                             ; CODE XREF: sub_403030+AFC↓j
.text:00403B10                                         ; sub_403030+B1C↓j
.text:00403B10                 lea     eax, [ebx+1]
.text:00403B13                 mov     ebx, eax
.text:00403B15                 mov     [ebp+0], eax
.text:00403B18                 cmp     eax, [esp+5Ch+arg_0]
.text:00403B1C                 jge     short loc_403B40
.text:00403B1E                 mov     edi, [esp+5Ch+arg_4]
.text:00403B22                 mov     edx, [edi+eax*4]
.text:00403B25                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403B28                 jz      short loc_403B30
.text:00403B2A
.text:00403B2A loc_403B2A:                             ; CODE XREF: sub_403030+B04↓j
.text:00403B2A                 mov     ebx, eax
.text:00403B2C                 jmp     short loc_403B10
.text:00403B2C ; ---------------------------------------------------------------------------
.text:00403B2E                 align 10h
.text:00403B30
.text:00403B30 loc_403B30:                             ; CODE XREF: sub_403030+AF8↑j
.text:00403B30                 cmp     byte ptr [edx+1], 0
.text:00403B34                 jz      short loc_403B2A
.text:00403B36                 lea     esi, [esi+0]
.text:00403B39                 lea     edi, [edi+0]
.text:00403B40
.text:00403B40 loc_403B40:                             ; CODE XREF: sub_403030+AC5↑j
.text:00403B40                                         ; sub_403030+AEC↑j ...
.text:00403B40                 mov     [ebp+24h], ebx
.text:00403B43                 jmp     loc_403100
.text:00403B48 ; ---------------------------------------------------------------------------
.text:00403B48
.text:00403B48 loc_403B48:                             ; CODE XREF: sub_403030+AD1↑j
.text:00403B48                 cmp     byte ptr [eax+1], 0
.text:00403B4C                 jz      short loc_403B10
.text:00403B4E                 jmp     short loc_403B40
.text:00403B50 ; ---------------------------------------------------------------------------
.text:00403B50
.text:00403B50 loc_403B50:                             ; CODE XREF: sub_403030+AA8↑j
.text:00403B50                 cmp     edx, ebx
.text:00403B52                 jz      short loc_403AF1
.text:00403B54                 mov     [ebp+20h], ebx
.text:00403B57                 jmp     short loc_403AF1
.text:00403B59 ; ---------------------------------------------------------------------------
.text:00403B59
.text:00403B59 loc_403B59:                             ; CODE XREF: sub_403030+88↑j
.text:00403B59                 mov     dword ptr [ebp+18h], 0
.text:00403B60                 mov     esi, [esp+5Ch+Str]
.text:00403B64
.text:00403B64 loc_403B64:                             ; CODE XREF: sub_403030+B49↓j
.text:00403B64                 inc     esi
.text:00403B65                 jmp     loc_4030C8
.text:00403B65 ; ---------------------------------------------------------------------------
.text:00403B6A                 align 10h
.text:00403B70
.text:00403B70 loc_403B70:                             ; CODE XREF: sub_403030+80↑j
.text:00403B70                 mov     dword ptr [ebp+18h], 2
.text:00403B77                 mov     esi, ecx
.text:00403B79                 jmp     short loc_403B64
.text:00403B79 ; ---------------------------------------------------------------------------
.text:00403B7B                 align 10h
.text:00403B80
.text:00403B80 loc_403B80:                             ; CODE XREF: sub_403030+69↑j
.text:00403B80                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00403B87                 call    getenv
.text:00403B8C                 test    eax, eax
.text:00403B8E                 jz      loc_4030A4
.text:00403B94                 jmp     loc_40309F
.text:00403B94 ; ---------------------------------------------------------------------------
.text:00403B99                 align 10h
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_403030+3F↑j
.text:00403BA0                 mov     dword ptr [ebp+0], 1
.text:00403BA7                 mov     ebx, 1
.text:00403BAC                 jmp     loc_403080
.text:00403BAC sub_403030      endp
.text:00403BAC
.text:00403BB1 ; ---------------------------------------------------------------------------
.text:00403BB1                 jmp     short sub_403BC0
.text:00403BB1 ; ---------------------------------------------------------------------------
.text:00403BB3                 align 10h
.text:00403BC0
.text:00403BC0 ; =============== S U B R O U T I N E =======================================
.text:00403BC0
.text:00403BC0
.text:00403BC0 ; int __cdecl sub_403BC0(int, int, char *, int, int, int, int)
.text:00403BC0 sub_403BC0      proc near               ; CODE XREF: .text:00403BB1↑j
.text:00403BC0                                         ; sub_404300+3A↓p ...
.text:00403BC0
.text:00403BC0 var_2C          = dword ptr -2Ch
.text:00403BC0 var_28          = dword ptr -28h
.text:00403BC0 Str             = dword ptr -24h
.text:00403BC0 var_20          = dword ptr -20h
.text:00403BC0 var_1C          = dword ptr -1Ch
.text:00403BC0 var_18          = dword ptr -18h
.text:00403BC0 var_14          = dword ptr -14h
.text:00403BC0 var_10          = dword ptr -10h
.text:00403BC0 arg_0           = dword ptr  4
.text:00403BC0 arg_4           = dword ptr  8
.text:00403BC0 arg_8           = dword ptr  0Ch
.text:00403BC0 arg_C           = dword ptr  10h
.text:00403BC0 arg_10          = dword ptr  14h
.text:00403BC0 arg_14          = dword ptr  18h
.text:00403BC0 arg_18          = dword ptr  1Ch
.text:00403BC0
.text:00403BC0                 sub     esp, 2Ch
.text:00403BC3                 mov     edx, dword_407010
.text:00403BC9                 mov     [esp+2Ch+var_10], offset dword_408040 ; int
.text:00403BD1                 mov     ecx, dword_407014
.text:00403BD7                 mov     ds:dword_408040, edx
.text:00403BDD                 mov     edx, [esp+2Ch+arg_18]
.text:00403BE1                 mov     ds:dword_408044, ecx
.text:00403BE7                 mov     ecx, [esp+2Ch+arg_14]
.text:00403BEB                 mov     [esp+2Ch+var_14], edx ; int
.text:00403BEF                 mov     edx, [esp+2Ch+arg_10]
.text:00403BF3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403BF7                 mov     ecx, [esp+2Ch+arg_C]
.text:00403BFB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00403BFF                 mov     edx, [esp+2Ch+arg_8]
.text:00403C03                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403C07                 mov     ecx, [esp+2Ch+arg_4]
.text:00403C0B                 mov     [esp+2Ch+Str], edx ; Str
.text:00403C0F                 mov     edx, [esp+2Ch+arg_0]
.text:00403C13                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403C17                 mov     [esp+2Ch+var_2C], edx ; int
.text:00403C1A                 call    sub_403030
.text:00403C1F                 mov     ecx, ds:dword_408040
.text:00403C25                 mov     dword_407010, ecx
.text:00403C2B                 mov     ecx, ds:dword_40804C
.text:00403C31                 mov     ds:dword_4081F0, ecx
.text:00403C37                 mov     ecx, ds:dword_408048
.text:00403C3D                 mov     dword_407018, ecx
.text:00403C43                 add     esp, 2Ch
.text:00403C46                 retn
.text:00403C46 sub_403BC0      endp
.text:00403C46
.text:00403C46 ; ---------------------------------------------------------------------------
.text:00403C47                 align 10h
.text:00403C50                 sub     esp, 2Ch
.text:00403C53                 mov     edx, dword_407010
.text:00403C59                 mov     dword ptr [esp+1Ch], offset dword_408040
.text:00403C61                 mov     ecx, dword_407014
.text:00403C67                 mov     dword ptr [esp+18h], 1
.text:00403C6F                 mov     ds:dword_408040, edx
.text:00403C75                 mov     edx, [esp+38h]
.text:00403C79                 mov     ds:dword_408044, ecx
.text:00403C7F                 mov     ecx, [esp+34h]
.text:00403C83                 mov     [esp+8], edx
.text:00403C87                 mov     edx, [esp+30h]
.text:00403C8B                 mov     [esp+4], ecx
.text:00403C8F                 mov     dword ptr [esp+14h], 0
.text:00403C97                 mov     dword ptr [esp+10h], 0
.text:00403C9F                 mov     dword ptr [esp+0Ch], 0
.text:00403CA7                 mov     [esp], edx
.text:00403CAA                 call    sub_403030
.text:00403CAF                 mov     ecx, ds:dword_408040
.text:00403CB5                 mov     dword_407010, ecx
.text:00403CBB                 mov     ecx, ds:dword_40804C
.text:00403CC1                 mov     ds:dword_4081F0, ecx
.text:00403CC7                 mov     ecx, ds:dword_408048
.text:00403CCD                 mov     dword_407018, ecx
.text:00403CD3                 add     esp, 2Ch
.text:00403CD6                 retn
.text:00403CD6 ; ---------------------------------------------------------------------------
.text:00403CD7                 align 10h
.text:00403CE0
.text:00403CE0 ; =============== S U B R O U T I N E =======================================
.text:00403CE0
.text:00403CE0
.text:00403CE0 sub_403CE0      proc near               ; CODE XREF: sub_403030+113↑p
.text:00403CE0                                         ; sub_403030+AB9↑p
.text:00403CE0
.text:00403CE0 var_2C          = dword ptr -2Ch
.text:00403CE0 var_28          = dword ptr -28h
.text:00403CE0 var_24          = dword ptr -24h
.text:00403CE0 var_20          = dword ptr -20h
.text:00403CE0 var_1C          = dword ptr -1Ch
.text:00403CE0 var_18          = dword ptr -18h
.text:00403CE0 var_14          = dword ptr -14h
.text:00403CE0 arg_0           = dword ptr  4
.text:00403CE0 arg_4           = dword ptr  8
.text:00403CE0
.text:00403CE0                 push    ebp
.text:00403CE1                 push    edi
.text:00403CE2                 push    esi
.text:00403CE3                 push    ebx
.text:00403CE4                 sub     esp, 1Ch
.text:00403CE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00403CEB                 mov     eax, [esp+2Ch+arg_4]
.text:00403CEF                 mov     ebx, [esp+2Ch+arg_4]
.text:00403CF3                 mov     edx, [ecx+20h]
.text:00403CF6                 mov     edi, [esp+2Ch+arg_0]
.text:00403CFA                 mov     ecx, [ebx]
.text:00403CFC                 mov     [esp+2Ch+var_2C], edx
.text:00403CFF                 mov     [esp+2Ch+var_14], edx
.text:00403D03                 mov     edx, [eax+24h]
.text:00403D06                 mov     [esp+2Ch+var_28], ecx
.text:00403D0A                 mov     [esp+2Ch+var_1C], ecx
.text:00403D0E                 cmp     ecx, edx
.text:00403D10                 mov     [esp+2Ch+var_18], edx
.text:00403D14                 jle     short loc_403D90
.text:00403D16                 mov     esi, [esp+2Ch+var_2C]
.text:00403D19                 cmp     edx, esi
.text:00403D1B                 jle     short loc_403D90
.text:00403D1D                 lea     esi, [esi+0]
.text:00403D20
.text:00403D20 loc_403D20:                             ; CODE XREF: sub_403CE0+A1↓j
.text:00403D20                 mov     ebx, [esp+2Ch+var_1C]
.text:00403D24                 mov     edx, [esp+2Ch+var_18]
.text:00403D28                 mov     ebp, [esp+2Ch+var_18]
.text:00403D2C                 mov     eax, [esp+2Ch+var_14]
.text:00403D30                 sub     ebx, edx
.text:00403D32                 mov     [esp+2Ch+var_20], ebx
.text:00403D36                 sub     ebp, eax
.text:00403D38                 cmp     ebx, ebp
.text:00403D3A                 jle     short loc_403DB5
.text:00403D3C                 xor     esi, esi
.text:00403D3E                 cmp     esi, ebp
.text:00403D40                 jge     short loc_403D6D
.text:00403D42                 mov     ecx, [esp+2Ch+var_1C]
.text:00403D46                 sub     ecx, ebp
.text:00403D48                 mov     [esp+2Ch+var_24], ecx
.text:00403D4C                 lea     esi, [esi+0]
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403CE0+8B↓j
.text:00403D50                 mov     ecx, [esp+2Ch+var_14]
.text:00403D54                 mov     edx, [esp+2Ch+var_24]
.text:00403D58                 add     ecx, esi
.text:00403D5A                 add     edx, esi
.text:00403D5C                 mov     ebx, [edi+ecx*4]
.text:00403D5F                 mov     eax, [edi+edx*4]
.text:00403D62                 inc     esi
.text:00403D63                 cmp     esi, ebp
.text:00403D65                 mov     [edi+ecx*4], eax
.text:00403D68                 mov     [edi+edx*4], ebx
.text:00403D6B                 jl      short loc_403D50
.text:00403D6D
.text:00403D6D loc_403D6D:                             ; CODE XREF: sub_403CE0+60↑j
.text:00403D6D                 sub     [esp+2Ch+var_1C], ebp
.text:00403D71
.text:00403D71 loc_403D71:                             ; CODE XREF: sub_403CE0+107↓j
.text:00403D71                 mov     eax, [esp+2Ch+var_18]
.text:00403D75                 cmp     [esp+2Ch+var_1C], eax
.text:00403D79                 jle     short loc_403D90
.text:00403D7B                 mov     ebp, [esp+2Ch+var_14]
.text:00403D7F                 cmp     eax, ebp
.text:00403D81                 jg      short loc_403D20
.text:00403D83                 lea     esi, [esi+0]
.text:00403D89                 lea     edi, [edi+0]
.text:00403D90
.text:00403D90 loc_403D90:                             ; CODE XREF: sub_403CE0+34↑j
.text:00403D90                                         ; sub_403CE0+3B↑j ...
.text:00403D90                 mov     esi, [esp+2Ch+var_28]
.text:00403D94                 mov     ecx, [esp+2Ch+var_18]
.text:00403D98                 mov     eax, [esp+2Ch+var_2C]
.text:00403D9B                 mov     edi, [esp+2Ch+arg_4]
.text:00403D9F                 mov     edx, [esp+2Ch+var_28]
.text:00403DA3                 sub     esi, ecx
.text:00403DA5                 add     esi, eax
.text:00403DA7                 mov     [edi+20h], esi
.text:00403DAA                 mov     [edi+24h], edx
.text:00403DAD                 add     esp, 1Ch
.text:00403DB0                 pop     ebx
.text:00403DB1                 pop     esi
.text:00403DB2                 pop     edi
.text:00403DB3                 pop     ebp
.text:00403DB4                 retn
.text:00403DB5 ; ---------------------------------------------------------------------------
.text:00403DB5
.text:00403DB5 loc_403DB5:                             ; CODE XREF: sub_403CE0+5A↑j
.text:00403DB5                 xor     esi, esi
.text:00403DB7                 cmp     esi, [esp+2Ch+var_20]
.text:00403DBB                 jge     short loc_403DDF
.text:00403DBD                 lea     esi, [esi+0]
.text:00403DC0
.text:00403DC0 loc_403DC0:                             ; CODE XREF: sub_403CE0+FD↓j
.text:00403DC0                 mov     ebx, [esp+2Ch+var_14]
.text:00403DC4                 mov     ebp, [esp+2Ch+var_18]
.text:00403DC8                 add     ebx, esi
.text:00403DCA                 add     ebp, esi
.text:00403DCC                 mov     edx, [edi+ebx*4]
.text:00403DCF                 inc     esi
.text:00403DD0                 cmp     esi, [esp+2Ch+var_20]
.text:00403DD4                 mov     ecx, [edi+ebp*4]
.text:00403DD7                 mov     [edi+ebx*4], ecx
.text:00403DDA                 mov     [edi+ebp*4], edx
.text:00403DDD                 jl      short loc_403DC0
.text:00403DDF
.text:00403DDF loc_403DDF:                             ; CODE XREF: sub_403CE0+DB↑j
.text:00403DDF                 mov     esi, [esp+2Ch+var_20]
.text:00403DE3                 add     [esp+2Ch+var_14], esi
.text:00403DE7                 jmp     short loc_403D71
.text:00403DE7 sub_403CE0      endp
.text:00403DE7
.text:00403DE7 ; ---------------------------------------------------------------------------
.text:00403DE9                 align 20h
.text:00403E00 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403E00                                         ; DATA XREF: .data:off_407020↓o
.text:00403E32 ; const char aSSS[]
.text:00403E32 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4040F0+50↓o
.text:00403E3E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403E3E                                         ; DATA XREF: sub_4040F0:loc_404191↓o
.text:00403E4E                 align 20h
.text:00403E60 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403E60                                         ; DATA XREF: sub_4040F0+100↓o
.text:00403E60                 db 'ere is NO',0Ah
.text:00403E60                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403E60                 db 'R PURPOSE.',0Ah,0
.text:00403EF8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403EF8                                         ; DATA XREF: sub_4040F0:loc_404231↓o
.text:00403F0F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00403F0F                                         ; DATA XREF: sub_4040F0:loc_40423D↓o
.text:00403F2B                 align 20h
.text:00403F40 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403F40                                         ; DATA XREF: sub_4040F0:loc_404249↓o
.text:00403F40                 db 'and %s.',0Ah,0
.text:00403F60 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403F60                                         ; DATA XREF: sub_4040F0:loc_404255↓o
.text:00403F60                 db '%s, and %s.',0Ah,0
.text:00403F84                 align 20h
.text:00403FA0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403FA0                                         ; DATA XREF: sub_4040F0:loc_404261↓o
.text:00403FA0                 db '%s, %s, and %s.',0Ah,0
.text:00403FC8                 align 20h
.text:00403FE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403FE0                                         ; DATA XREF: sub_4040F0:loc_40426D↓o
.text:00403FE0                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040400C                 align 20h
.text:00404020 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404020                                         ; DATA XREF: sub_4040F0:loc_404279↓o
.text:00404020                 db '%s, %s, %s, %s,',0Ah
.text:00404020                 db 'and %s.',0Ah,0
.text:00404050                 align 20h
.text:00404060 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00404060                                         ; DATA XREF: sub_4040F0:loc_404285↓o
.text:00404060                 db '%s, %s, %s, %s,',0Ah
.text:00404060                 db '%s, and %s.',0Ah,0
.text:00404094                 align 10h
.text:004040A0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004040A0                                         ; DATA XREF: sub_4040F0:def_40415D↓o
.text:004040A0                 db '%s, %s, %s, %s,',0Ah
.text:004040A0                 db '%s, %s, and others.',0Ah,0
.text:004040DC ; const char aSS[]
.text:004040DC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4040F0+1B5↓o
.text:004040E3                 align 10h
.text:004040F0
.text:004040F0 ; =============== S U B R O U T I N E =======================================
.text:004040F0
.text:004040F0
.text:004040F0 ; int __cdecl sub_4040F0(FILE *, FILE *, int, int, va_list)
.text:004040F0 sub_4040F0      proc near               ; CODE XREF: sub_4042C0+2A↓p
.text:004040F0
.text:004040F0 Stream          = dword ptr -2Ch
.text:004040F0 Format          = dword ptr -28h
.text:004040F0 ArgList         = dword ptr -24h
.text:004040F0 var_20          = dword ptr -20h
.text:004040F0 var_1C          = dword ptr -1Ch
.text:004040F0 var_14          = dword ptr -14h
.text:004040F0 arg_0           = dword ptr  4
.text:004040F0 arg_4           = dword ptr  8
.text:004040F0 arg_8           = dword ptr  0Ch
.text:004040F0 arg_C           = dword ptr  10h
.text:004040F0 arg_10          = dword ptr  14h
.text:004040F0
.text:004040F0                 push    ebp
.text:004040F1                 push    edi
.text:004040F2                 push    esi
.text:004040F3                 push    ebx
.text:004040F4                 sub     esp, 1Ch
.text:004040F7                 xor     ebx, ebx
.text:004040F9                 mov     edi, [esp+2Ch+arg_10]
.text:004040FD                 mov     edx, [esp+2Ch+arg_8]
.text:00404101                 mov     esi, [esp+2Ch+arg_0]
.text:00404105                 mov     eax, [edi]
.text:00404107                 mov     ecx, [esp+2Ch+arg_4]
.text:0040410B                 mov     [esp+2Ch+var_14], edx
.text:0040410F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404113                 lea     edx, [edi+4]
.text:00404116                 test    eax, eax
.text:00404118                 jz      short loc_40412C
.text:0040411A                 lea     esi, [esi+0]
.text:00404120
.text:00404120 loc_404120:                             ; CODE XREF: sub_4040F0+3A↓j
.text:00404120                 mov     eax, edx
.text:00404122                 inc     ebx
.text:00404123                 mov     eax, [eax]
.text:00404125                 add     edx, 4
.text:00404128                 test    eax, eax
.text:0040412A                 jnz     short loc_404120
.text:0040412C
.text:0040412C loc_40412C:                             ; CODE XREF: sub_4040F0+28↑j
.text:0040412C                 test    ecx, ecx
.text:0040412E                 jz      loc_40429D
.text:00404134                 mov     [esp+2Ch+var_1C], ebp
.text:00404138                 mov     edx, [esp+2Ch+var_14]
.text:0040413C                 mov     [esp+2Ch+ArgList], ecx
.text:00404140                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00404148                 mov     [esp+2Ch+var_20], edx
.text:0040414C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040414F                 call    fprintf
.text:00404154
.text:00404154 loc_404154:                             ; CODE XREF: sub_4040F0+1C9↓j
.text:00404154                 cmp     ebx, 9          ; switch 10 cases
.text:00404157                 ja      def_40415D      ; jumptable 0040415D default case
.text:0040415D                 jmp     ds:jpt_40415D[ebx*4] ; switch jump
.text:0040415D ; ---------------------------------------------------------------------------
.text:00404164 jpt_40415D      dd offset loc_40418C    ; DATA XREF: sub_4040F0+6D↑r
.text:00404164                 dd offset loc_404191    ; jump table for switch statement
.text:00404164                 dd offset loc_404231
.text:00404164                 dd offset loc_40423D
.text:00404164                 dd offset loc_404249
.text:00404164                 dd offset loc_404255
.text:00404164                 dd offset loc_404261
.text:00404164                 dd offset loc_40426D
.text:00404164                 dd offset loc_404279
.text:00404164                 dd offset loc_404285
.text:0040418C ; ---------------------------------------------------------------------------
.text:0040418C
.text:0040418C loc_40418C:                             ; CODE XREF: sub_4040F0+6D↑j
.text:0040418C                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:0040418C                 call    abort           ; jumptable 0040415D case 0
.text:00404191 ; ---------------------------------------------------------------------------
.text:00404191
.text:00404191 loc_404191:                             ; CODE XREF: sub_4040F0+6D↑j
.text:00404191                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:00404191                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040415D case 1
.text:00404198                 nop
.text:00404199                 lea     esi, [esi+0]
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: sub_4040F0+148↓j
.text:004041A0                                         ; sub_4040F0+154↓j ...
.text:004041A0                 call    ds:libintl_gettext
.text:004041A6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004041AA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004041AD                 mov     [esp+2Ch+Format], eax ; Format
.text:004041B1                 call    vfprintf
.text:004041B6                 mov     ebx, [esi+4]
.text:004041B9                 dec     ebx
.text:004041BA                 test    ebx, ebx
.text:004041BC                 mov     [esi+4], ebx
.text:004041BF                 js      short loc_40421F
.text:004041C1                 mov     edi, [esi]
.text:004041C3                 mov     byte ptr [edi], 0Ah
.text:004041C6                 inc     dword ptr [esi]
.text:004041C8
.text:004041C8 loc_4041C8:                             ; CODE XREF: sub_4040F0+13F↓j
.text:004041C8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004041CC                 mov     edx, off_407020 ; "Copyright (C) 2005 Free Software Founda"...
.text:004041D2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004041D5                 call    fputs
.text:004041DA                 mov     ebp, [esi+4]
.text:004041DD                 dec     ebp
.text:004041DE                 test    ebp, ebp
.text:004041E0                 mov     [esi+4], ebp
.text:004041E3                 js      short loc_40420D
.text:004041E5                 mov     ecx, [esi]
.text:004041E7                 mov     byte ptr [ecx], 0Ah
.text:004041EA                 inc     dword ptr [esi]
.text:004041EC
.text:004041EC loc_4041EC:                             ; CODE XREF: sub_4040F0+12D↓j
.text:004041EC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004041F0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004041F7                 call    ds:libintl_gettext
.text:004041FD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404201                 add     esp, 1Ch
.text:00404204                 pop     ebx
.text:00404205                 pop     esi
.text:00404206                 pop     edi
.text:00404207                 pop     ebp
.text:00404208                 jmp     fputs
.text:0040420D ; ---------------------------------------------------------------------------
.text:0040420D
.text:0040420D loc_40420D:                             ; CODE XREF: sub_4040F0+F3↑j
.text:0040420D                 mov     [esp+2Ch+Format], esi ; File
.text:00404211                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404218                 call    _flsbuf
.text:0040421D                 jmp     short loc_4041EC
.text:0040421F ; ---------------------------------------------------------------------------
.text:0040421F
.text:0040421F loc_40421F:                             ; CODE XREF: sub_4040F0+CF↑j
.text:0040421F                 mov     [esp+2Ch+Format], esi ; File
.text:00404223                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040422A                 call    _flsbuf
.text:0040422F                 jmp     short loc_4041C8
.text:00404231 ; ---------------------------------------------------------------------------
.text:00404231
.text:00404231 loc_404231:                             ; CODE XREF: sub_4040F0+6D↑j
.text:00404231                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:00404231                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040415D case 2
.text:00404238                 jmp     loc_4041A0
.text:0040423D ; ---------------------------------------------------------------------------
.text:0040423D
.text:0040423D loc_40423D:                             ; CODE XREF: sub_4040F0+6D↑j
.text:0040423D                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:0040423D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040415D case 3
.text:00404244                 jmp     loc_4041A0
.text:00404249 ; ---------------------------------------------------------------------------
.text:00404249
.text:00404249 loc_404249:                             ; CODE XREF: sub_4040F0+6D↑j
.text:00404249                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:00404249                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040415D case 4
.text:00404250                 jmp     loc_4041A0
.text:00404255 ; ---------------------------------------------------------------------------
.text:00404255
.text:00404255 loc_404255:                             ; CODE XREF: sub_4040F0+6D↑j
.text:00404255                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:00404255                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040415D case 5
.text:0040425C                 jmp     loc_4041A0
.text:00404261 ; ---------------------------------------------------------------------------
.text:00404261
.text:00404261 loc_404261:                             ; CODE XREF: sub_4040F0+6D↑j
.text:00404261                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:00404261                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040415D case 6
.text:00404268                 jmp     loc_4041A0
.text:0040426D ; ---------------------------------------------------------------------------
.text:0040426D
.text:0040426D loc_40426D:                             ; CODE XREF: sub_4040F0+6D↑j
.text:0040426D                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:0040426D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040415D case 7
.text:00404274                 jmp     loc_4041A0
.text:00404279 ; ---------------------------------------------------------------------------
.text:00404279
.text:00404279 loc_404279:                             ; CODE XREF: sub_4040F0+6D↑j
.text:00404279                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:00404279                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040415D case 8
.text:00404280                 jmp     loc_4041A0
.text:00404285 ; ---------------------------------------------------------------------------
.text:00404285
.text:00404285 loc_404285:                             ; CODE XREF: sub_4040F0+6D↑j
.text:00404285                                         ; DATA XREF: sub_4040F0:jpt_40415D↑o
.text:00404285                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040415D case 9
.text:0040428C                 jmp     loc_4041A0
.text:00404291 ; ---------------------------------------------------------------------------
.text:00404291
.text:00404291 def_40415D:                             ; CODE XREF: sub_4040F0+67↑j
.text:00404291                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040415D default case
.text:00404298                 jmp     loc_4041A0
.text:0040429D ; ---------------------------------------------------------------------------
.text:0040429D
.text:0040429D loc_40429D:                             ; CODE XREF: sub_4040F0+3E↑j
.text:0040429D                 mov     [esp+2Ch+var_20], ebp
.text:004042A1                 mov     ecx, [esp+2Ch+var_14]
.text:004042A5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004042AD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004042B0                 mov     [esp+2Ch+ArgList], ecx
.text:004042B4                 call    fprintf
.text:004042B9                 jmp     loc_404154
.text:004042B9 sub_4040F0      endp
.text:004042B9
.text:004042B9 ; ---------------------------------------------------------------------------
.text:004042BE                 align 10h
.text:004042C0
.text:004042C0 ; =============== S U B R O U T I N E =======================================
.text:004042C0
.text:004042C0
.text:004042C0 ; int __cdecl sub_4042C0(FILE *, FILE *, int, int, char)
.text:004042C0 sub_4042C0      proc near               ; CODE XREF: sub_401F10+226↑p
.text:004042C0
.text:004042C0 var_1C          = dword ptr -1Ch
.text:004042C0 var_18          = dword ptr -18h
.text:004042C0 var_14          = dword ptr -14h
.text:004042C0 var_10          = dword ptr -10h
.text:004042C0 var_C           = dword ptr -0Ch
.text:004042C0 arg_0           = dword ptr  4
.text:004042C0 arg_4           = dword ptr  8
.text:004042C0 arg_8           = dword ptr  0Ch
.text:004042C0 arg_C           = dword ptr  10h
.text:004042C0 arg_10          = byte ptr  14h
.text:004042C0
.text:004042C0                 sub     esp, 1Ch
.text:004042C3                 mov     edx, [esp+1Ch+arg_C]
.text:004042C7                 lea     ecx, [esp+1Ch+arg_10]
.text:004042CB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004042CF                 mov     ecx, [esp+1Ch+arg_8]
.text:004042D3                 mov     [esp+1Ch+var_10], edx ; int
.text:004042D7                 mov     edx, [esp+1Ch+arg_4]
.text:004042DB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004042DF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004042E3                 mov     edx, [esp+1Ch+arg_0]
.text:004042E7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004042EA                 call    sub_4040F0
.text:004042EF                 add     esp, 1Ch
.text:004042F2                 retn
.text:004042F2 sub_4042C0      endp
.text:004042F2
.text:004042F2 ; ---------------------------------------------------------------------------
.text:004042F3                 align 10h
.text:00404300
.text:00404300 ; =============== S U B R O U T I N E =======================================
.text:00404300
.text:00404300
.text:00404300 ; int __cdecl sub_404300(int, int, char *, int, int)
.text:00404300 sub_404300      proc near               ; CODE XREF: sub_401F10+A2↑p
.text:00404300
.text:00404300 var_1C          = dword ptr -1Ch
.text:00404300 var_18          = dword ptr -18h
.text:00404300 var_14          = dword ptr -14h
.text:00404300 var_10          = dword ptr -10h
.text:00404300 var_C           = dword ptr -0Ch
.text:00404300 var_8           = dword ptr -8
.text:00404300 var_4           = dword ptr -4
.text:00404300 arg_0           = dword ptr  4
.text:00404300 arg_4           = dword ptr  8
.text:00404300 arg_8           = dword ptr  0Ch
.text:00404300 arg_C           = dword ptr  10h
.text:00404300 arg_10          = dword ptr  14h
.text:00404300
.text:00404300                 sub     esp, 1Ch
.text:00404303                 mov     edx, [esp+1Ch+arg_C]
.text:00404307                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040430F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404313                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040431B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040431F                 mov     edx, [esp+1Ch+arg_4]
.text:00404323                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404327                 mov     ecx, [esp+1Ch+arg_8]
.text:0040432B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040432F                 mov     edx, [esp+1Ch+arg_0]
.text:00404333                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404337                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040433A                 call    sub_403BC0
.text:0040433F                 add     esp, 1Ch
.text:00404342                 retn
.text:00404342 sub_404300      endp
.text:00404342
.text:00404342 ; ---------------------------------------------------------------------------
.text:00404343                 align 10h
.text:00404350                 sub     esp, 2Ch
.text:00404353                 mov     edx, [esp+44h]
.text:00404357                 mov     dword ptr [esp+18h], 0
.text:0040435F                 mov     ecx, [esp+40h]
.text:00404363                 mov     dword ptr [esp+14h], 0
.text:0040436B                 mov     [esp+1Ch], edx
.text:0040436F                 mov     edx, [esp+3Ch]
.text:00404373                 mov     [esp+10h], ecx
.text:00404377                 mov     ecx, [esp+38h]
.text:0040437B                 mov     [esp+0Ch], edx
.text:0040437F                 mov     edx, [esp+34h]
.text:00404383                 mov     [esp+8], ecx
.text:00404387                 mov     [esp+4], edx
.text:0040438B                 mov     edx, [esp+30h]
.text:0040438F                 mov     [esp], edx
.text:00404392                 call    sub_403030
.text:00404397                 add     esp, 2Ch
.text:0040439A                 retn
.text:0040439A ; ---------------------------------------------------------------------------
.text:0040439B                 align 10h
.text:004043A0                 sub     esp, 1Ch
.text:004043A3                 mov     edx, [esp+2Ch]
.text:004043A7                 mov     dword ptr [esp+18h], 0
.text:004043AF                 mov     ecx, [esp+30h]
.text:004043B3                 mov     dword ptr [esp+14h], 1
.text:004043BB                 mov     [esp+0Ch], edx
.text:004043BF                 mov     edx, [esp+24h]
.text:004043C3                 mov     [esp+10h], ecx
.text:004043C7                 mov     ecx, [esp+28h]
.text:004043CB                 mov     [esp+4], edx
.text:004043CF                 mov     edx, [esp+20h]
.text:004043D3                 mov     [esp+8], ecx
.text:004043D7                 mov     [esp], edx
.text:004043DA                 call    sub_403BC0
.text:004043DF                 add     esp, 1Ch
.text:004043E2                 retn
.text:004043E2 ; ---------------------------------------------------------------------------
.text:004043E3                 align 10h
.text:004043F0                 sub     esp, 2Ch
.text:004043F3                 mov     edx, [esp+44h]
.text:004043F7                 mov     dword ptr [esp+18h], 0
.text:004043FF                 mov     ecx, [esp+40h]
.text:00404403                 mov     dword ptr [esp+14h], 1
.text:0040440B                 mov     [esp+1Ch], edx
.text:0040440F                 mov     edx, [esp+3Ch]
.text:00404413                 mov     [esp+10h], ecx
.text:00404417                 mov     ecx, [esp+38h]
.text:0040441B                 mov     [esp+0Ch], edx
.text:0040441F                 mov     edx, [esp+34h]
.text:00404423                 mov     [esp+8], ecx
.text:00404427                 mov     [esp+4], edx
.text:0040442B                 mov     edx, [esp+30h]
.text:0040442F                 mov     [esp], edx
.text:00404432                 call    sub_403030
.text:00404437                 add     esp, 2Ch
.text:0040443A                 retn
.text:0040443A ; ---------------------------------------------------------------------------
.text:0040443B                 align 10h
.text:00404440                 mov     edx, [esp+4]
.text:00404444                 mov     ds:dword_408070, edx
.text:0040444A                 retn
.text:0040444A ; ---------------------------------------------------------------------------
.text:0040444B aWriteError     db 'write error',0      ; DATA XREF: sub_404470:loc_4044B9↓o
.text:00404457 ; const char aSS_0[]
.text:00404457 aSS_0           db '%s: %s',0           ; DATA XREF: sub_404470+77↓o
.text:0040445E ; const char aS_2[]
.text:0040445E aS_2            db '%s',0               ; DATA XREF: sub_404470+A0↓o
.text:00404461 ; ---------------------------------------------------------------------------
.text:00404461                 jmp     short sub_404470
.text:00404461 ; ---------------------------------------------------------------------------
.text:00404463                 align 10h
.text:00404470
.text:00404470 ; =============== S U B R O U T I N E =======================================
.text:00404470
.text:00404470
.text:00404470 ; void __cdecl sub_404470()
.text:00404470 sub_404470      proc near               ; CODE XREF: .text:00404461↑j
.text:00404470                                         ; DATA XREF: sub_401F10+68↑o
.text:00404470
.text:00404470 Stream          = dword ptr -2Ch
.text:00404470 ErrorMessage    = dword ptr -28h
.text:00404470 var_24          = dword ptr -24h
.text:00404470 var_20          = byte ptr -20h
.text:00404470 var_1C          = dword ptr -1Ch
.text:00404470 var_9           = byte ptr -9
.text:00404470
.text:00404470                 push    esi
.text:00404471                 push    ebx
.text:00404472                 sub     esp, 24h
.text:00404475                 mov     edx, ds:_iob
.text:0040447B                 mov     ecx, [edx+2Ch]
.text:0040447E                 lea     esi, [edx+20h]
.text:00404481                 shr     ecx, 5
.text:00404484                 mov     bl, cl
.text:00404486                 mov     ecx, [edx+20h]
.text:00404489                 and     bl, 1
.text:0040448C                 cmp     ecx, [esi+8]
.text:0040448F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404492                 setz    [esp+2Ch+var_9]
.text:00404497                 call    fclose
.text:0040449C                 test    eax, eax
.text:0040449E                 setnz   al
.text:004044A1                 test    bl, bl
.text:004044A3                 jnz     loc_404533
.text:004044A9                 test    al, al
.text:004044AB                 jz      short loc_404500
.text:004044AD
.text:004044AD loc_4044AD:                             ; CODE XREF: sub_404470+CD↓j
.text:004044AD                 call    _errno
.text:004044B2                 mov     esi, [eax]
.text:004044B4
.text:004044B4 loc_4044B4:                             ; CODE XREF: sub_404470+C7↓j
.text:004044B4                 cmp     esi, 9
.text:004044B7                 jz      short loc_404526
.text:004044B9
.text:004044B9 loc_4044B9:                             ; CODE XREF: sub_404470+B8↓j
.text:004044B9                                         ; sub_404470+C1↓j
.text:004044B9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:004044C0                 call    ds:libintl_gettext
.text:004044C6                 mov     ebx, eax
.text:004044C8                 mov     eax, ds:dword_408070
.text:004044CD                 test    eax, eax
.text:004044CF                 jz      short loc_404506
.text:004044D1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004044D4                 call    sub_4057C0
.text:004044D9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004044DD                 mov     edx, dword_407030
.text:004044E3                 mov     [esp+2Ch+var_1C], ebx
.text:004044E7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004044EF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004044F3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004044F6                 call    sub_405DB0
.text:004044FB                 nop
.text:004044FC                 lea     esi, [esi+0]
.text:00404500
.text:00404500 loc_404500:                             ; CODE XREF: sub_404470+3B↑j
.text:00404500                                         ; sub_404470+B4↓j ...
.text:00404500                 add     esp, 24h
.text:00404503                 pop     ebx
.text:00404504                 pop     esi
.text:00404505                 retn
.text:00404506 ; ---------------------------------------------------------------------------
.text:00404506
.text:00404506 loc_404506:                             ; CODE XREF: sub_404470+5F↑j
.text:00404506                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040450A                 mov     ebx, dword_407030
.text:00404510                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00404518                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040451C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040451F                 call    sub_405DB0
.text:00404524                 jmp     short loc_404500
.text:00404526 ; ---------------------------------------------------------------------------
.text:00404526
.text:00404526 loc_404526:                             ; CODE XREF: sub_404470+47↑j
.text:00404526                 test    bl, bl
.text:00404528                 jnz     short loc_4044B9
.text:0040452A                 cmp     [esp+2Ch+var_9], 0
.text:0040452F                 jnz     short loc_404500
.text:00404531                 jmp     short loc_4044B9
.text:00404533 ; ---------------------------------------------------------------------------
.text:00404533
.text:00404533 loc_404533:                             ; CODE XREF: sub_404470+33↑j
.text:00404533                 xor     esi, esi
.text:00404535                 test    al, al
.text:00404537                 jz      loc_4044B4
.text:0040453D                 jmp     loc_4044AD
.text:0040453D sub_404470      endp
.text:0040453D
.text:0040453D ; ---------------------------------------------------------------------------
.text:00404542                 align 10h
.text:00404550                 sub     esp, 0Ch
.text:00404553                 mov     edx, [esp+14h]
.text:00404557                 mov     dword ptr [esp+4], 5
.text:0040455F                 mov     [esp+8], edx
.text:00404563                 mov     edx, [esp+10h]
.text:00404567                 mov     [esp], edx
.text:0040456A                 call    sub_405450
.text:0040456F                 add     esp, 0Ch
.text:00404572                 retn
.text:00404572 ; ---------------------------------------------------------------------------
.text:00404573                 align 10h
.text:00404580
.text:00404580 ; =============== S U B R O U T I N E =======================================
.text:00404580
.text:00404580
.text:00404580 ; int __cdecl sub_404580(char *)
.text:00404580 sub_404580      proc near               ; CODE XREF: sub_401F10+277↑p
.text:00404580                                         ; sub_401F10:loc_402434↑p ...
.text:00404580
.text:00404580 var_C           = dword ptr -0Ch
.text:00404580 var_8           = dword ptr -8
.text:00404580 var_4           = dword ptr -4
.text:00404580 arg_0           = dword ptr  4
.text:00404580
.text:00404580                 sub     esp, 0Ch
.text:00404583                 mov     edx, [esp+0Ch+arg_0]
.text:00404587                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040458F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00404596                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040459A                 call    sub_405450
.text:0040459F                 add     esp, 0Ch
.text:004045A2                 retn
.text:004045A2 sub_404580      endp
.text:004045A2
.text:004045A2 ; ---------------------------------------------------------------------------
.text:004045A3                 align 10h
.text:004045B0
.text:004045B0 ; =============== S U B R O U T I N E =======================================
.text:004045B0
.text:004045B0
.text:004045B0 ; int __cdecl sub_4045B0(void *, int)
.text:004045B0 sub_4045B0      proc near               ; CODE XREF: sub_402B60+9C↑p
.text:004045B0                                         ; sub_402B60+125↑p
.text:004045B0
.text:004045B0 var_C           = dword ptr -0Ch
.text:004045B0 var_8           = dword ptr -8
.text:004045B0 arg_0           = dword ptr  4
.text:004045B0 arg_4           = dword ptr  8
.text:004045B0
.text:004045B0                 sub     esp, 0Ch
.text:004045B3                 mov     edx, [esp+0Ch+arg_4]
.text:004045B7                 mov     [esp+0Ch+var_8], edx ; int
.text:004045BB                 mov     edx, [esp+0Ch+arg_0]
.text:004045BF                 mov     [esp+0Ch+var_C], edx ; void *
.text:004045C2                 call    sub_4061C0
.text:004045C7                 test    eax, eax
.text:004045C9                 jz      short loc_4045CF
.text:004045CB                 add     esp, 0Ch
.text:004045CE                 retn
.text:004045CF ; ---------------------------------------------------------------------------
.text:004045CF
.text:004045CF loc_4045CF:                             ; CODE XREF: sub_4045B0+19↑j
.text:004045CF                 call    sub_405A50
.text:004045CF sub_4045B0      endp
.text:004045CF
.text:004045CF ; ---------------------------------------------------------------------------
.text:004045D4                 align 10h
.text:004045E0
.text:004045E0 ; =============== S U B R O U T I N E =======================================
.text:004045E0
.text:004045E0
.text:004045E0 sub_4045E0      proc near               ; CODE XREF: sub_401F10+5EC↑p
.text:004045E0
.text:004045E0 arg_0           = dword ptr  4
.text:004045E0
.text:004045E0                 mov     ecx, [esp+arg_0]
.text:004045E4                 movzx   eax, byte ptr [ecx]
.text:004045E7                 test    al, al
.text:004045E9                 jz      short loc_4045F1
.text:004045EB                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:004045EF                 jz      short loc_404637
.text:004045F1
.text:004045F1 loc_4045F1:                             ; CODE XREF: sub_4045E0+9↑j
.text:004045F1                                         ; sub_4045E0+5D↓j
.text:004045F1                 test    al, al
.text:004045F3                 mov     edx, ecx
.text:004045F5                 jz      short loc_404610
.text:004045F7                 movzx   eax, byte ptr [ecx]
.text:004045FA                 lea     esi, [esi+0]
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_4045E0+2E↓j
.text:00404600                 cmp     al, 2Fh ; '/'
.text:00404602                 jz      short loc_404613
.text:00404604                 cmp     al, 5Ch ; '\'
.text:00404606                 jz      short loc_404613
.text:00404608
.text:00404608 loc_404608:                             ; CODE XREF: sub_4045E0+45↓j
.text:00404608                 inc     edx
.text:00404609                 movzx   eax, byte ptr [edx]
.text:0040460C                 test    al, al
.text:0040460E                 jnz     short loc_404600
.text:00404610
.text:00404610 loc_404610:                             ; CODE XREF: sub_4045E0+15↑j
.text:00404610                                         ; sub_4045E0+50↓j ...
.text:00404610                 mov     eax, ecx
.text:00404612                 retn
.text:00404613 ; ---------------------------------------------------------------------------
.text:00404613
.text:00404613 loc_404613:                             ; CODE XREF: sub_4045E0+22↑j
.text:00404613                                         ; sub_4045E0+26↑j ...
.text:00404613                 inc     edx
.text:00404614                 movzx   eax, byte ptr [edx]
.text:00404617                 cmp     al, 2Fh ; '/'
.text:00404619                 jz      short loc_404613
.text:0040461B                 cmp     al, 5Ch ; '\'
.text:0040461D                 jz      short loc_404613
.text:0040461F                 test    al, al
.text:00404621                 jz      short loc_404627
.text:00404623                 mov     ecx, edx
.text:00404625                 jmp     short loc_404608
.text:00404627 ; ---------------------------------------------------------------------------
.text:00404627
.text:00404627 loc_404627:                             ; CODE XREF: sub_4045E0+41↑j
.text:00404627                 movzx   eax, byte ptr [ecx]
.text:0040462A                 cmp     al, 2Fh ; '/'
.text:0040462C                 jz      short loc_404632
.text:0040462E                 cmp     al, 5Ch ; '\'
.text:00404630                 jnz     short loc_404610
.text:00404632
.text:00404632 loc_404632:                             ; CODE XREF: sub_4045E0+4C↑j
.text:00404632                 lea     ecx, [edx-1]
.text:00404635                 jmp     short loc_404610
.text:00404637 ; ---------------------------------------------------------------------------
.text:00404637
.text:00404637 loc_404637:                             ; CODE XREF: sub_4045E0+F↑j
.text:00404637                 add     ecx, 2
.text:0040463A                 movzx   eax, byte ptr [ecx]
.text:0040463D                 jmp     short loc_4045F1
.text:0040463D sub_4045E0      endp
.text:0040463D
.text:0040463D ; ---------------------------------------------------------------------------
.text:0040463F                 align 10h
.text:00404640                 push    ebx
.text:00404641                 sub     esp, 8
.text:00404644                 mov     ebx, [esp+10h]
.text:00404648                 mov     [esp], ebx
.text:0040464B                 call    strlen
.text:00404650                 cmp     eax, 1
.text:00404653                 jbe     short loc_404670
.text:00404655                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040465A                 cmp     dl, 2Fh ; '/'
.text:0040465D                 jz      short loc_404675
.text:0040465F                 cmp     dl, 5Ch ; '\'
.text:00404662                 jz      short loc_404675
.text:00404664                 lea     esi, [esi+0]
.text:0040466A                 lea     edi, [edi+0]
.text:00404670
.text:00404670 loc_404670:                             ; CODE XREF: .text:00404653↑j
.text:00404670                                         ; .text:00404679↓j ...
.text:00404670                 add     esp, 8
.text:00404673                 pop     ebx
.text:00404674                 retn
.text:00404675 ; ---------------------------------------------------------------------------
.text:00404675
.text:00404675 loc_404675:                             ; CODE XREF: .text:0040465D↑j
.text:00404675                                         ; .text:00404662↑j ...
.text:00404675                 dec     eax
.text:00404676                 cmp     eax, 1
.text:00404679                 jbe     short loc_404670
.text:0040467B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00404680                 cmp     dl, 2Fh ; '/'
.text:00404683                 jz      short loc_404675
.text:00404685                 cmp     dl, 5Ch ; '\'
.text:00404688                 jz      short loc_404675
.text:0040468A                 jmp     short loc_404670
.text:0040468A ; ---------------------------------------------------------------------------
.text:0040468C                 align 10h
.text:00404690 aLiteral        db 'literal',0          ; DATA XREF: .text:004046D0↓o
.text:00404698 aShell          db 'shell',0            ; DATA XREF: .text:004046D4↓o
.text:0040469E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004046D8↓o
.text:004046AB aC              db 'c',0                ; DATA XREF: .text:004046DC↓o
.text:004046AD aEscape         db 'escape',0           ; DATA XREF: .text:004046E0↓o
.text:004046B4 aLocale         db 'locale',0           ; DATA XREF: .text:004046E4↓o
.text:004046BB aClocale        db 'clocale',0          ; DATA XREF: .text:004046E8↓o
.text:004046C3                 db 8Dh, 0B6h, 4 dup(0)
.text:004046C9                 db 8Dh, 0BCh, 27h, 4 dup(0)
.text:004046D0                 dd offset aLiteral      ; "literal"
.text:004046D4                 dd offset aShell        ; "shell"
.text:004046D8                 dd offset aShellAlways  ; "shell-always"
.text:004046DC                 dd offset aC            ; "c"
.text:004046E0                 dd offset aEscape       ; "escape"
.text:004046E4                 dd offset aLocale       ; "locale"
.text:004046E8                 dd offset aClocale      ; "clocale"
.text:004046EC                 dd 2 dup(0)
.text:004046F4                 dd 1, 2, 3, 4, 5, 6
.text:0040470C asc_40470C:                             ; DATA XREF: sub_404720+7E↓o
.text:0040470C                                         ; sub_404720+A39↓o ...
.text:0040470C                 text "UTF-16LE", '"',27h,'`'
.text:00404712                 align 10h
.text:00404720
.text:00404720 ; =============== S U B R O U T I N E =======================================
.text:00404720
.text:00404720
.text:00404720 ; int __cdecl sub_404720(int, int, char *Str, int, int, int)
.text:00404720 sub_404720      proc near               ; CODE XREF: sub_404720+43A↓p
.text:00404720                                         ; .text:004052E3↓p ...
.text:00404720
.text:00404720 C               = dword ptr -4Ch
.text:00404720 Type            = dword ptr -48h
.text:00404720 SizeInBytes     = dword ptr -44h
.text:00404720 State           = dword ptr -40h
.text:00404720 var_3C          = dword ptr -3Ch
.text:00404720 var_38          = dword ptr -38h
.text:00404720 var_34          = dword ptr -34h
.text:00404720 var_30          = dword ptr -30h
.text:00404720 var_29          = byte ptr -29h
.text:00404720 var_28          = dword ptr -28h
.text:00404720 var_22          = byte ptr -22h
.text:00404720 var_21          = byte ptr -21h
.text:00404720 var_20          = dword ptr -20h
.text:00404720 var_1C          = dword ptr -1Ch
.text:00404720 var_18          = mbstate_t ptr -18h
.text:00404720 arg_0           = dword ptr  4
.text:00404720 arg_4           = dword ptr  8
.text:00404720 Str             = dword ptr  0Ch
.text:00404720 arg_C           = dword ptr  10h
.text:00404720 arg_10          = dword ptr  14h
.text:00404720 arg_14          = dword ptr  18h
.text:00404720
.text:00404720                 push    ebp
.text:00404721                 push    edi
.text:00404722                 push    esi
.text:00404723                 push    ebx
.text:00404724                 sub     esp, 3Ch
.text:00404727                 mov     edx, ds:__mb_cur_max
.text:0040472D                 mov     [esp+4Ch+var_34], 0
.text:00404735                 mov     [esp+4Ch+var_1C], 0
.text:0040473D                 cmp     dword ptr [edx], 1
.text:00404740                 mov     [esp+4Ch+var_20], 0
.text:00404748                 mov     [esp+4Ch+var_21], 0
.text:0040474D                 setz    [esp+4Ch+var_22]
.text:00404752                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00404757                 ja      short def_40475D ; jumptable 0040475D default case, cases 0,1
.text:00404759                 mov     edx, [esp+4Ch+arg_10]
.text:0040475D                 jmp     ds:jpt_40475D[edx*4] ; switch jump
.text:0040475D ; ---------------------------------------------------------------------------
.text:00404764 jpt_40475D      dd offset def_40475D    ; DATA XREF: sub_404720+3D↑r
.text:00404764                 dd offset def_40475D    ; jump table for switch statement
.text:00404764                 dd offset loc_4050A5
.text:00404764                 dd offset loc_404780
.text:00404764                 dd offset loc_4050CB
.text:00404764                 dd offset loc_4050D5
.text:00404764                 dd offset loc_4050D5
.text:00404780 ; ---------------------------------------------------------------------------
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_404720+3D↑j
.text:00404780                                         ; DATA XREF: sub_404720:jpt_40475D↑o
.text:00404780                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040475D case 3
.text:00404784                 cmp     [esp+4Ch+var_34], eax
.text:00404788                 jnb     short loc_404791
.text:0040478A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040478E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404791
.text:00404791 loc_404791:                             ; CODE XREF: sub_404720+68↑j
.text:00404791                 mov     [esp+4Ch+var_34], 1
.text:00404799                 mov     [esp+4Ch+var_21], 1
.text:0040479E                 mov     [esp+4Ch+var_1C], offset asc_40470C ; "\"'`"
.text:004047A6
.text:004047A6 loc_4047A6:                             ; CODE XREF: sub_404720+9A6↓j
.text:004047A6                 mov     [esp+4Ch+var_20], 1
.text:004047AE
.text:004047AE def_40475D:                             ; CODE XREF: sub_404720+37↑j
.text:004047AE                                         ; sub_404720+3D↑j ...
.text:004047AE                 xor     ebp, ebp        ; jumptable 0040475D default case, cases 0,1
.text:004047B0
.text:004047B0 loc_4047B0:                             ; CODE XREF: sub_404720+3DB↓j
.text:004047B0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004047B5                 jz      loc_405097
.text:004047BB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004047BF
.text:004047BF loc_4047BF:                             ; CODE XREF: sub_404720+980↓j
.text:004047BF                 jz      loc_40502E
.text:004047C5                 cmp     [esp+4Ch+var_21], 0
.text:004047CA                 jz      short loc_404810
.text:004047CC                 mov     esi, [esp+4Ch+var_20]
.text:004047D0                 test    esi, esi
.text:004047D2                 jz      short loc_404810
.text:004047D4                 mov     ecx, [esp+4Ch+var_20]
.text:004047D8                 lea     edi, [ecx+ebp]
.text:004047DB                 cmp     edi, [esp+4Ch+arg_C]
.text:004047DF                 ja      short loc_404810
.text:004047E1                 cld
.text:004047E2                 mov     ebx, [esp+4Ch+Str]
.text:004047E6                 mov     edi, [esp+4Ch+var_1C]
.text:004047EA                 add     ebx, ebp
.text:004047EC                 mov     esi, ebx
.text:004047EE                 cmp     ecx, ecx
.text:004047F0                 repe cmpsb
.text:004047F2                 jnz     short loc_404810
.text:004047F4                 mov     edx, [esp+4Ch+arg_4]
.text:004047F8                 cmp     [esp+4Ch+var_34], edx
.text:004047FC                 jnb     short loc_40480A
.text:004047FE                 mov     ecx, [esp+4Ch+arg_0]
.text:00404802                 mov     eax, [esp+4Ch+var_34]
.text:00404806                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040480A
.text:0040480A loc_40480A:                             ; CODE XREF: sub_404720+DC↑j
.text:0040480A                 inc     [esp+4Ch+var_34]
.text:0040480E                 mov     esi, esi
.text:00404810
.text:00404810 loc_404810:                             ; CODE XREF: sub_404720+AA↑j
.text:00404810                                         ; sub_404720+B2↑j ...
.text:00404810                 mov     edi, [esp+4Ch+Str]
.text:00404814                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00404819                 movzx   eax, bl
.text:0040481C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040481F                 ja      def_404825      ; jumptable 00404825 default case, cases 1-6,14-31,64
.text:00404825                 jmp     ds:jpt_404825[eax*4] ; switch jump
.text:00404825 ; ---------------------------------------------------------------------------
.text:0040482C jpt_404825      dd offset loc_404A28, offset def_404825, offset def_404825
.text:0040482C                                         ; DATA XREF: sub_404720+105↑r
.text:0040482C                 dd offset def_404825, offset def_404825, offset def_404825 ; jump table for switch statement
.text:0040482C                 dd offset def_404825, offset loc_404B00, offset loc_404B1E
.text:0040482C                 dd offset loc_404B22, offset loc_404B67, offset loc_404B6B
.text:0040482C                 dd offset loc_404B6F, offset loc_404B73, offset def_404825
.text:0040482C                 dd offset def_404825, offset def_404825, offset def_404825
.text:0040482C                 dd offset def_404825, offset def_404825, offset def_404825
.text:0040482C                 dd offset def_404825, offset def_404825, offset def_404825
.text:0040482C                 dd offset def_404825, offset def_404825, offset def_404825
.text:0040482C                 dd offset def_404825, offset def_404825, offset def_404825
.text:0040482C                 dd offset def_404825, offset def_404825, offset loc_404FF8
.text:0040482C                 dd offset loc_404FF8, offset loc_404FF8, offset loc_40501A
.text:0040482C                 dd offset loc_404FF8, offset def_404C22, offset loc_404FF8
.text:0040482C                 dd offset loc_404B77, offset loc_404FF8, offset loc_404FF8
.text:0040482C                 dd offset loc_404FF8, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset loc_404FF8
.text:0040482C                 dd offset loc_404FF8, offset loc_404FF8, offset loc_404FF8
.text:0040482C                 dd offset loc_404BDC, offset def_404825, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset loc_404FF8, offset loc_404FF1
.text:0040482C                 dd offset def_404C22, offset loc_404FF8, offset def_404C22
.text:0040482C                 dd offset loc_404FF8, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset def_404C22, offset def_404C22, offset def_404C22
.text:0040482C                 dd offset loc_405008, offset loc_404FF8, offset loc_405008
.text:0040482C                 dd offset loc_40501A
.text:00404A28 ; ---------------------------------------------------------------------------
.text:00404A28
.text:00404A28 loc_404A28:                             ; CODE XREF: sub_404720+105↑j
.text:00404A28                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404A28                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404825 case 0
.text:00404A2D                 lea     eax, [ebp+1]
.text:00404A30                 jz      loc_404AE0
.text:00404A36                 mov     esi, [esp+4Ch+arg_4]
.text:00404A3A                 cmp     [esp+4Ch+var_34], esi
.text:00404A3E                 jnb     short loc_404A4C
.text:00404A40                 mov     eax, [esp+4Ch+arg_0]
.text:00404A44                 mov     ebx, [esp+4Ch+var_34]
.text:00404A48                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00404A4C
.text:00404A4C loc_404A4C:                             ; CODE XREF: sub_404720+31E↑j
.text:00404A4C                 inc     [esp+4Ch+var_34]
.text:00404A50                 mov     edx, [esp+4Ch+arg_4]
.text:00404A54                 cmp     [esp+4Ch+var_34], edx
.text:00404A58                 jnb     short loc_404A66
.text:00404A5A                 mov     edi, [esp+4Ch+arg_0]
.text:00404A5E                 mov     ecx, [esp+4Ch+var_34]
.text:00404A62                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404A66
.text:00404A66 loc_404A66:                             ; CODE XREF: sub_404720+338↑j
.text:00404A66                 inc     [esp+4Ch+var_34]
.text:00404A6A                 mov     esi, [esp+4Ch+arg_4]
.text:00404A6E                 cmp     [esp+4Ch+var_34], esi
.text:00404A72                 jnb     short loc_404A80
.text:00404A74                 mov     ebx, [esp+4Ch+arg_0]
.text:00404A78                 mov     eax, [esp+4Ch+var_34]
.text:00404A7C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404A80
.text:00404A80 loc_404A80:                             ; CODE XREF: sub_404720+352↑j
.text:00404A80                 inc     [esp+4Ch+var_34]
.text:00404A84                 mov     bl, 30h ; '0'
.text:00404A86                 lea     esi, [esi+0]
.text:00404A89                 lea     edi, [edi+0]
.text:00404A90
.text:00404A90 def_404C22:                             ; CODE XREF: sub_404720+105↑j
.text:00404A90                                         ; sub_404720+463↓j ...
.text:00404A90                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404A90                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00404A95                 lea     eax, [ebp+1]
.text:00404A98                 jz      short loc_404AE0
.text:00404A9A                 mov     cl, bl
.text:00404A9C                 mov     edi, [esp+4Ch+arg_14]
.text:00404AA0                 mov     esi, 1
.text:00404AA5                 shr     cl, 5
.text:00404AA8                 movzx   edx, cl
.text:00404AAB                 mov     ecx, ebx
.text:00404AAD                 and     ecx, 1Fh
.text:00404AB0                 shl     esi, cl
.text:00404AB2                 test    [edi+edx*4+4], esi
.text:00404AB6                 jz      short loc_404AD2
.text:00404AB8
.text:00404AB8 loc_404AB8:                             ; CODE XREF: sub_404720+3FC↓j
.text:00404AB8                 mov     edx, [esp+4Ch+arg_4]
.text:00404ABC                 cmp     [esp+4Ch+var_34], edx
.text:00404AC0                 jnb     short loc_404ACE
.text:00404AC2                 mov     edi, [esp+4Ch+arg_0]
.text:00404AC6                 mov     esi, [esp+4Ch+var_34]
.text:00404ACA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00404ACE
.text:00404ACE loc_404ACE:                             ; CODE XREF: sub_404720+3A0↑j
.text:00404ACE                 inc     [esp+4Ch+var_34]
.text:00404AD2
.text:00404AD2 loc_404AD2:                             ; CODE XREF: sub_404720+396↑j
.text:00404AD2                 lea     eax, [ebp+1]
.text:00404AD5                 lea     esi, [esi+0]
.text:00404AD9                 lea     edi, [edi+0]
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: sub_404720+310↑j
.text:00404AE0                                         ; sub_404720+378↑j ...
.text:00404AE0                 mov     ebp, [esp+4Ch+arg_4]
.text:00404AE4                 cmp     [esp+4Ch+var_34], ebp
.text:00404AE8                 jnb     short loc_404AF5
.text:00404AEA                 mov     edx, [esp+4Ch+arg_0]
.text:00404AEE                 mov     ecx, [esp+4Ch+var_34]
.text:00404AF2                 mov     [ecx+edx], bl
.text:00404AF5
.text:00404AF5 loc_404AF5:                             ; CODE XREF: sub_404720+3C8↑j
.text:00404AF5                 inc     [esp+4Ch+var_34]
.text:00404AF9                 mov     ebp, eax
.text:00404AFB                 jmp     loc_4047B0
.text:00404B00 ; ---------------------------------------------------------------------------
.text:00404B00
.text:00404B00 loc_404B00:                             ; CODE XREF: sub_404720+105↑j
.text:00404B00                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404B00                 mov     dl, 61h ; 'a'   ; jumptable 00404825 case 7
.text:00404B02                 lea     esi, [esi+0]
.text:00404B09                 lea     edi, [edi+0]
.text:00404B10
.text:00404B10 loc_404B10:                             ; CODE XREF: sub_404720+400↓j
.text:00404B10                                         ; sub_404720+409↓j ...
.text:00404B10                 cmp     [esp+4Ch+var_21], 0
.text:00404B15                 lea     eax, [ebp+1]
.text:00404B18                 jz      short loc_404AE0
.text:00404B1A                 mov     bl, dl
.text:00404B1C                 jmp     short loc_404AB8
.text:00404B1E ; ---------------------------------------------------------------------------
.text:00404B1E
.text:00404B1E loc_404B1E:                             ; CODE XREF: sub_404720+105↑j
.text:00404B1E                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404B1E                 mov     dl, 62h ; 'b'   ; jumptable 00404825 case 8
.text:00404B20                 jmp     short loc_404B10
.text:00404B22 ; ---------------------------------------------------------------------------
.text:00404B22
.text:00404B22 loc_404B22:                             ; CODE XREF: sub_404720+105↑j
.text:00404B22                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404B22                 mov     dl, 74h ; 't'   ; jumptable 00404825 case 9
.text:00404B24
.text:00404B24 loc_404B24:                             ; CODE XREF: sub_404720+449↓j
.text:00404B24                                         ; sub_404720+455↓j ...
.text:00404B24                 cmp     [esp+4Ch+arg_10], 1
.text:00404B29                 jnz     short loc_404B10
.text:00404B2B
.text:00404B2B loc_404B2B:                             ; CODE XREF: sub_404720+45C↓j
.text:00404B2B                                         ; sub_404720+4C1↓j ...
.text:00404B2B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404EF2 cases 91,92,94,96,124
.text:00404B33                 mov     eax, [esp+4Ch+arg_14]
.text:00404B37                 mov     edx, [esp+4Ch+arg_C]
.text:00404B3B                 mov     ecx, [esp+4Ch+Str]
.text:00404B3F                 mov     ebx, [esp+4Ch+arg_4]
.text:00404B43                 mov     [esp+4Ch+var_38], eax ; int
.text:00404B47                 mov     ebp, [esp+4Ch+arg_0]
.text:00404B4B                 mov     [esp+4Ch+State], edx ; int
.text:00404B4F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404B53                 mov     [esp+4Ch+Type], ebx ; int
.text:00404B57                 mov     [esp+4Ch+C], ebp ; int
.text:00404B5A                 call    sub_404720
.text:00404B5F
.text:00404B5F loc_404B5F:                             ; CODE XREF: sub_404720+972↓j
.text:00404B5F                 add     esp, 3Ch
.text:00404B62                 pop     ebx
.text:00404B63                 pop     esi
.text:00404B64                 pop     edi
.text:00404B65                 pop     ebp
.text:00404B66                 retn
.text:00404B67 ; ---------------------------------------------------------------------------
.text:00404B67
.text:00404B67 loc_404B67:                             ; CODE XREF: sub_404720+105↑j
.text:00404B67                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404B67                 mov     dl, 6Eh ; 'n'   ; jumptable 00404825 case 10
.text:00404B69                 jmp     short loc_404B24
.text:00404B6B ; ---------------------------------------------------------------------------
.text:00404B6B
.text:00404B6B loc_404B6B:                             ; CODE XREF: sub_404720+105↑j
.text:00404B6B                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404B6B                 mov     dl, 76h ; 'v'   ; jumptable 00404825 case 11
.text:00404B6D                 jmp     short loc_404B10
.text:00404B6F ; ---------------------------------------------------------------------------
.text:00404B6F
.text:00404B6F loc_404B6F:                             ; CODE XREF: sub_404720+105↑j
.text:00404B6F                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404B6F                 mov     dl, 66h ; 'f'   ; jumptable 00404825 case 12
.text:00404B71                 jmp     short loc_404B10
.text:00404B73 ; ---------------------------------------------------------------------------
.text:00404B73
.text:00404B73 loc_404B73:                             ; CODE XREF: sub_404720+105↑j
.text:00404B73                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404B73                 mov     dl, 72h ; 'r'   ; jumptable 00404825 case 13
.text:00404B75                 jmp     short loc_404B24
.text:00404B77 ; ---------------------------------------------------------------------------
.text:00404B77
.text:00404B77 loc_404B77:                             ; CODE XREF: sub_404720+105↑j
.text:00404B77                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404B77                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404825 case 39
.text:00404B7C                 jz      short loc_404B2B ; jumptable 00404EF2 cases 91,92,94,96,124
.text:00404B7E                 cmp     [esp+4Ch+arg_10], 2
.text:00404B83                 jnz     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404B83                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00404B89                 mov     edx, [esp+4Ch+arg_4]
.text:00404B8D                 cmp     [esp+4Ch+var_34], edx
.text:00404B91                 jnb     short loc_404B9F
.text:00404B93                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B97                 mov     edi, [esp+4Ch+var_34]
.text:00404B9B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00404B9F
.text:00404B9F loc_404B9F:                             ; CODE XREF: sub_404720+471↑j
.text:00404B9F                 inc     [esp+4Ch+var_34]
.text:00404BA3                 mov     eax, [esp+4Ch+arg_4]
.text:00404BA7                 cmp     [esp+4Ch+var_34], eax
.text:00404BAB                 jnb     short loc_404BB9
.text:00404BAD                 mov     esi, [esp+4Ch+arg_0]
.text:00404BB1                 mov     edx, [esp+4Ch+var_34]
.text:00404BB5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404BB9
.text:00404BB9 loc_404BB9:                             ; CODE XREF: sub_404720+48B↑j
.text:00404BB9                 inc     [esp+4Ch+var_34]
.text:00404BBD                 mov     edi, [esp+4Ch+arg_4]
.text:00404BC1                 cmp     [esp+4Ch+var_34], edi
.text:00404BC5                 jnb     short loc_404BD3
.text:00404BC7                 mov     ecx, [esp+4Ch+arg_0]
.text:00404BCB                 mov     eax, [esp+4Ch+var_34]
.text:00404BCF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404BD3
.text:00404BD3 loc_404BD3:                             ; CODE XREF: sub_404720+4A5↑j
.text:00404BD3                                         ; sub_404720+5C4↓j ...
.text:00404BD3                 inc     [esp+4Ch+var_34]
.text:00404BD7                 jmp     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404BD7                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00404BDC ; ---------------------------------------------------------------------------
.text:00404BDC
.text:00404BDC loc_404BDC:                             ; CODE XREF: sub_404720+105↑j
.text:00404BDC                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404BDC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404825 case 63
.text:00404BE1                 jz      loc_404B2B      ; jumptable 00404EF2 cases 91,92,94,96,124
.text:00404BE7                 cmp     [esp+4Ch+arg_10], 3
.text:00404BEC                 jnz     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404BEC                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00404BF2                 lea     edx, [ebp+2]
.text:00404BF5                 cmp     edx, [esp+4Ch+arg_C]
.text:00404BF9                 jnb     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404BF9                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00404BFF                 mov     esi, [esp+4Ch+Str]
.text:00404C03                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404C08                 jnz     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404C08                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00404C0E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404C13                 movsx   eax, cl
.text:00404C16                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404C19                 cmp     eax, 1Dh
.text:00404C1C                 ja      def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404C1C                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00404C22                 jmp     ds:jpt_404C22[eax*4] ; switch jump
.text:00404C22 ; ---------------------------------------------------------------------------
.text:00404C29                 align 4
.text:00404C2C jpt_404C22      dd offset loc_404CA4    ; DATA XREF: sub_404720+502↑r
.text:00404C2C                 dd offset def_404C22    ; jump table for switch statement
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset loc_404CA4
.text:00404C2C                 dd offset loc_404CA4
.text:00404C2C                 dd offset loc_404CA4
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset loc_404CA4
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset loc_404CA4
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset def_404C22
.text:00404C2C                 dd offset loc_404CA4
.text:00404C2C                 dd offset loc_404CA4
.text:00404C2C                 dd offset loc_404CA4
.text:00404CA4 ; ---------------------------------------------------------------------------
.text:00404CA4
.text:00404CA4 loc_404CA4:                             ; CODE XREF: sub_404720+502↑j
.text:00404CA4                                         ; DATA XREF: sub_404720:jpt_404C22↑o
.text:00404CA4                 mov     ebp, edx        ; jumptable 00404C22 cases 33,39-41,45,47,60-62
.text:00404CA6                 mov     bl, cl
.text:00404CA8                 mov     edx, [esp+4Ch+arg_4]
.text:00404CAC                 cmp     [esp+4Ch+var_34], edx
.text:00404CB0                 jnb     short loc_404CBE
.text:00404CB2                 mov     ecx, [esp+4Ch+arg_0]
.text:00404CB6                 mov     edi, [esp+4Ch+var_34]
.text:00404CBA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00404CBE
.text:00404CBE loc_404CBE:                             ; CODE XREF: sub_404720+590↑j
.text:00404CBE                 inc     [esp+4Ch+var_34]
.text:00404CC2                 mov     eax, [esp+4Ch+arg_4]
.text:00404CC6                 cmp     [esp+4Ch+var_34], eax
.text:00404CCA                 jnb     short loc_404CD8
.text:00404CCC                 mov     edx, [esp+4Ch+arg_0]
.text:00404CD0                 mov     esi, [esp+4Ch+var_34]
.text:00404CD4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404CD8
.text:00404CD8 loc_404CD8:                             ; CODE XREF: sub_404720+5AA↑j
.text:00404CD8                 inc     [esp+4Ch+var_34]
.text:00404CDC                 mov     edi, [esp+4Ch+arg_4]
.text:00404CE0                 cmp     [esp+4Ch+var_34], edi
.text:00404CE4                 jnb     loc_404BD3
.text:00404CEA                 mov     eax, [esp+4Ch+arg_0]
.text:00404CEE                 mov     ecx, [esp+4Ch+var_34]
.text:00404CF2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404CF6                 jmp     loc_404BD3
.text:00404CF6 ; ---------------------------------------------------------------------------
.text:00404CFB                 align 10h
.text:00404D00
.text:00404D00 def_404825:                             ; CODE XREF: sub_404720+FF↑j
.text:00404D00                                         ; sub_404720+105↑j
.text:00404D00                                         ; DATA XREF: ...
.text:00404D00                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00404825 default case, cases 1-6,14-31,64
.text:00404D05                 jz      loc_404E30
.text:00404D0B                 mov     [esp+4Ch+var_28], 1
.text:00404D13                 mov     esi, ds:__mb_cur_max
.text:00404D19                 movzx   edx, bl
.text:00404D1C                 cmp     dword ptr [esi], 1
.text:00404D1F                 jz      loc_404E14
.text:00404D25                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404D2D                 mov     [esp+4Ch+C], edx ; C
.text:00404D30                 call    _isctype
.text:00404D35
.text:00404D35 loc_404D35:                             ; CODE XREF: sub_404720+705↓j
.text:00404D35                 test    eax, eax
.text:00404D37                 setnz   [esp+4Ch+var_29]
.text:00404D3C
.text:00404D3C loc_404D3C:                             ; CODE XREF: sub_404720+7A5↓j
.text:00404D3C                 cmp     [esp+4Ch+var_21], 0
.text:00404D41                 lea     eax, [ebp+1]
.text:00404D44                 jz      loc_404AE0
.text:00404D4A                 cmp     [esp+4Ch+var_29], 0
.text:00404D4F                 jnz     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404D4F                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00404D55
.text:00404D55 loc_404D55:                             ; CODE XREF: sub_404720+7AB↓j
.text:00404D55                 mov     eax, [esp+4Ch+var_28]
.text:00404D59                 lea     edx, [eax+ebp]
.text:00404D5C                 lea     esi, [esi+0]
.text:00404D60
.text:00404D60 loc_404D60:                             ; CODE XREF: sub_404720+6EF↓j
.text:00404D60                 cmp     [esp+4Ch+var_21], 0
.text:00404D65                 jz      short loc_404DE0
.text:00404D67                 cmp     [esp+4Ch+var_29], 0
.text:00404D6C                 jnz     short loc_404DE0
.text:00404D6E                 mov     edi, [esp+4Ch+arg_4]
.text:00404D72                 cmp     [esp+4Ch+var_34], edi
.text:00404D76                 jnb     short loc_404D84
.text:00404D78                 mov     esi, [esp+4Ch+arg_0]
.text:00404D7C                 mov     eax, [esp+4Ch+var_34]
.text:00404D80                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404D84
.text:00404D84 loc_404D84:                             ; CODE XREF: sub_404720+656↑j
.text:00404D84                 inc     [esp+4Ch+var_34]
.text:00404D88                 mov     ecx, [esp+4Ch+arg_4]
.text:00404D8C                 cmp     [esp+4Ch+var_34], ecx
.text:00404D90                 jnb     short loc_404DA5
.text:00404D92                 mov     cl, bl
.text:00404D94                 mov     esi, [esp+4Ch+arg_0]
.text:00404D98                 mov     edi, [esp+4Ch+var_34]
.text:00404D9C                 shr     cl, 6
.text:00404D9F                 add     cl, 30h ; '0'
.text:00404DA2                 mov     [edi+esi], cl
.text:00404DA5
.text:00404DA5 loc_404DA5:                             ; CODE XREF: sub_404720+670↑j
.text:00404DA5                 inc     [esp+4Ch+var_34]
.text:00404DA9                 mov     edi, [esp+4Ch+arg_4]
.text:00404DAD                 cmp     [esp+4Ch+var_34], edi
.text:00404DB1                 jnb     short loc_404DC9
.text:00404DB3                 mov     cl, bl
.text:00404DB5                 mov     esi, [esp+4Ch+arg_0]
.text:00404DB9                 shr     cl, 3
.text:00404DBC                 mov     edi, [esp+4Ch+var_34]
.text:00404DC0                 and     cl, 7
.text:00404DC3                 add     cl, 30h ; '0'
.text:00404DC6                 mov     [edi+esi], cl
.text:00404DC9
.text:00404DC9 loc_404DC9:                             ; CODE XREF: sub_404720+691↑j
.text:00404DC9                 inc     [esp+4Ch+var_34]
.text:00404DCD                 and     bl, 7
.text:00404DD0                 add     bl, 30h ; '0'
.text:00404DD3                 lea     esi, [esi+0]
.text:00404DD9                 lea     edi, [edi+0]
.text:00404DE0
.text:00404DE0 loc_404DE0:                             ; CODE XREF: sub_404720+645↑j
.text:00404DE0                                         ; sub_404720+64C↑j
.text:00404DE0                 lea     eax, [ebp+1]
.text:00404DE3                 cmp     edx, eax
.text:00404DE5                 jbe     loc_404AE0
.text:00404DEB                 mov     ebp, [esp+4Ch+arg_4]
.text:00404DEF                 cmp     [esp+4Ch+var_34], ebp
.text:00404DF3                 jnb     short loc_404E00
.text:00404DF5                 mov     ecx, [esp+4Ch+arg_0]
.text:00404DF9                 mov     edi, [esp+4Ch+var_34]
.text:00404DFD                 mov     [edi+ecx], bl
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_404720+6D3↑j
.text:00404E00                 inc     [esp+4Ch+var_34]
.text:00404E04                 mov     ebp, eax
.text:00404E06                 mov     eax, [esp+4Ch+Str]
.text:00404E0A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00404E0F                 jmp     loc_404D60
.text:00404E14 ; ---------------------------------------------------------------------------
.text:00404E14
.text:00404E14 loc_404E14:                             ; CODE XREF: sub_404720+5FF↑j
.text:00404E14                 mov     ecx, ds:_pctype
.text:00404E1A                 mov     edi, [ecx]
.text:00404E1C                 movzx   eax, word ptr [edi+edx*2]
.text:00404E20                 and     eax, 157h
.text:00404E25                 jmp     loc_404D35
.text:00404E25 ; ---------------------------------------------------------------------------
.text:00404E2A                 align 10h
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404720+5E5↑j
.text:00404E30                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404E35                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00404E3D                 mov     [esp+4Ch+var_28], 0
.text:00404E45                 mov     [esp+4Ch+var_29], 1
.text:00404E4A                 jz      loc_404FDC
.text:00404E50
.text:00404E50 loc_404E50:                             ; CODE XREF: sub_404720+8CC↓j
.text:00404E50                 mov     ecx, [esp+4Ch+arg_C]
.text:00404E54                 lea     edx, [esp+4Ch+var_18]
.text:00404E58                 mov     edi, [esp+4Ch+Str]
.text:00404E5C                 mov     [esp+4Ch+State], edx ; State
.text:00404E60                 lea     esi, [esp+4Ch+var_18._State]
.text:00404E64                 sub     ecx, ebp
.text:00404E66                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00404E6A                 add     edi, ebp
.text:00404E6C                 mov     [esp+4Ch+var_30], edi
.text:00404E70                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404E74                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404E77                 call    mbrtowc
.text:00404E7C                 test    eax, eax
.text:00404E7E                 mov     edi, eax
.text:00404E80                 jz      short loc_404EC0
.text:00404E82                 cmp     eax, 0FFFFFFFFh
.text:00404E85                 jz      loc_404FD2
.text:00404E8B                 cmp     eax, 0FFFFFFFEh
.text:00404E8E                 jz      loc_404F92
.text:00404E94                 cmp     [esp+4Ch+arg_10], 1
.text:00404E99                 jz      short loc_404ED0
.text:00404E9B
.text:00404E9B loc_404E9B:                             ; CODE XREF: sub_404720+7B9↓j
.text:00404E9B                                         ; sub_404720+86D↓j
.text:00404E9B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404EA0                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404EA8                 mov     [esp+4Ch+C], ecx ; C
.text:00404EAB                 call    iswctype
.text:00404EB0                 test    eax, eax
.text:00404EB2                 jnz     short loc_404EB9
.text:00404EB4                 mov     [esp+4Ch+var_29], 0
.text:00404EB9
.text:00404EB9 loc_404EB9:                             ; CODE XREF: sub_404720+792↑j
.text:00404EB9                 mov     [esp+4Ch+var_28], edi
.text:00404EBD                 lea     esi, [esi+0]
.text:00404EC0
.text:00404EC0 loc_404EC0:                             ; CODE XREF: sub_404720+760↑j
.text:00404EC0                                         ; sub_404720+87B↓j ...
.text:00404EC0                 cmp     [esp+4Ch+var_28], 1
.text:00404EC5                 jbe     loc_404D3C
.text:00404ECB                 jmp     loc_404D55
.text:00404ED0 ; ---------------------------------------------------------------------------
.text:00404ED0
.text:00404ED0 loc_404ED0:                             ; CODE XREF: sub_404720+779↑j
.text:00404ED0                 cmp     [esp+4Ch+arg_10], eax
.text:00404ED4                 mov     edx, 1
.text:00404ED9                 jnb     short loc_404E9B
.text:00404EDB
.text:00404EDB loc_404EDB:                             ; CODE XREF: sub_404720+867↓j
.text:00404EDB                 mov     ecx, [esp+4Ch+Str]
.text:00404EDF                 lea     esi, [edx+ebp]
.text:00404EE2                 movsx   eax, byte ptr [esi+ecx]
.text:00404EE6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404EE9                 cmp     eax, 21h
.text:00404EEC                 ja      def_404EF2      ; jumptable 00404EF2 default case, cases 93,95,97-123
.text:00404EF2                 jmp     ds:jpt_404EF2[eax*4] ; switch jump
.text:00404EF2 ; ---------------------------------------------------------------------------
.text:00404EF9                 align 4
.text:00404EFC jpt_404EF2      dd offset loc_404B2B    ; DATA XREF: sub_404720+7D2↑r
.text:00404EFC                 dd offset loc_404B2B    ; jump table for switch statement
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset loc_404B2B
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset loc_404B2B
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset def_404EF2
.text:00404EFC                 dd offset loc_404B2B
.text:00404F84 ; ---------------------------------------------------------------------------
.text:00404F84
.text:00404F84 def_404EF2:                             ; CODE XREF: sub_404720+7CC↑j
.text:00404F84                                         ; sub_404720+7D2↑j
.text:00404F84                                         ; DATA XREF: ...
.text:00404F84                 inc     edx             ; jumptable 00404EF2 default case, cases 93,95,97-123
.text:00404F85                 cmp     edx, edi
.text:00404F87                 jb      loc_404EDB
.text:00404F8D                 jmp     loc_404E9B
.text:00404F92 ; ---------------------------------------------------------------------------
.text:00404F92
.text:00404F92 loc_404F92:                             ; CODE XREF: sub_404720+76E↑j
.text:00404F92                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404F96                 mov     [esp+4Ch+var_29], 0
.text:00404F9B                 jnb     loc_404EC0
.text:00404FA1                 mov     eax, [esp+4Ch+var_30]
.text:00404FA5                 cmp     byte ptr [eax], 0
.text:00404FA8                 jz      loc_404EC0
.text:00404FAE
.text:00404FAE loc_404FAE:                             ; CODE XREF: sub_404720+8AB↓j
.text:00404FAE                 inc     [esp+4Ch+var_28]
.text:00404FB2                 mov     esi, [esp+4Ch+var_28]
.text:00404FB6                 lea     eax, [esi+ebp]
.text:00404FB9                 cmp     eax, [esp+4Ch+arg_C]
.text:00404FBD                 jnb     loc_404EC0
.text:00404FC3                 mov     edi, [esp+4Ch+Str]
.text:00404FC7                 cmp     byte ptr [eax+edi], 0
.text:00404FCB                 jnz     short loc_404FAE
.text:00404FCD                 jmp     loc_404EC0
.text:00404FD2 ; ---------------------------------------------------------------------------
.text:00404FD2
.text:00404FD2 loc_404FD2:                             ; CODE XREF: sub_404720+765↑j
.text:00404FD2                 mov     [esp+4Ch+var_29], 0
.text:00404FD7                 jmp     loc_404EC0
.text:00404FDC ; ---------------------------------------------------------------------------
.text:00404FDC
.text:00404FDC loc_404FDC:                             ; CODE XREF: sub_404720+72A↑j
.text:00404FDC                 mov     edx, [esp+4Ch+Str]
.text:00404FE0                 mov     [esp+4Ch+C], edx ; Str
.text:00404FE3                 call    strlen
.text:00404FE8                 mov     [esp+4Ch+arg_C], eax
.text:00404FEC                 jmp     loc_404E50
.text:00404FF1 ; ---------------------------------------------------------------------------
.text:00404FF1
.text:00404FF1 loc_404FF1:                             ; CODE XREF: sub_404720+105↑j
.text:00404FF1                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00404FF1                 mov     dl, bl          ; jumptable 00404825 case 92
.text:00404FF3                 jmp     loc_404B24
.text:00404FF8 ; ---------------------------------------------------------------------------
.text:00404FF8
.text:00404FF8 loc_404FF8:                             ; CODE XREF: sub_404720+105↑j
.text:00404FF8                                         ; sub_404720+902↓j
.text:00404FF8                                         ; DATA XREF: ...
.text:00404FF8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404825 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404FFD                 jnz     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00404FFD                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00405003                 jmp     loc_404B2B      ; jumptable 00404EF2 cases 91,92,94,96,124
.text:00405008 ; ---------------------------------------------------------------------------
.text:00405008
.text:00405008 loc_405008:                             ; CODE XREF: sub_404720+105↑j
.text:00405008                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:00405008                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00404825 cases 123,125
.text:0040500D                 jz      short loc_405024
.text:0040500F                 cmp     [esp+4Ch+arg_C], 1
.text:00405014
.text:00405014 loc_405014:                             ; CODE XREF: sub_404720+90C↓j
.text:00405014                 jnz     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:00405014                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:0040501A
.text:0040501A loc_40501A:                             ; CODE XREF: sub_404720+105↑j
.text:0040501A                                         ; DATA XREF: sub_404720:jpt_404825↑o
.text:0040501A                 test    ebp, ebp        ; jumptable 00404825 cases 35,126
.text:0040501C                 jnz     def_404C22      ; jumptable 00404825 cases 37,43-58,65-90,93,95,97-122
.text:0040501C                                         ; jumptable 00404C22 default case, cases 34-38,42-44,46,48-59
.text:00405022                 jmp     short loc_404FF8 ; jumptable 00404825 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405024 ; ---------------------------------------------------------------------------
.text:00405024
.text:00405024 loc_405024:                             ; CODE XREF: sub_404720+8ED↑j
.text:00405024                 mov     esi, [esp+4Ch+Str]
.text:00405028                 cmp     byte ptr [esi+1], 0
.text:0040502C                 jmp     short loc_405014
.text:0040502E ; ---------------------------------------------------------------------------
.text:0040502E
.text:0040502E loc_40502E:                             ; CODE XREF: sub_404720:loc_4047BF↑j
.text:0040502E                 test    ebp, ebp
.text:00405030                 jnz     short loc_40503D
.text:00405032                 cmp     [esp+4Ch+arg_10], 1
.text:00405037                 jz      loc_404B2B      ; jumptable 00404EF2 cases 91,92,94,96,124
.text:0040503D
.text:0040503D loc_40503D:                             ; CODE XREF: sub_404720+910↑j
.text:0040503D                 mov     esi, [esp+4Ch+var_1C]
.text:00405041                 test    esi, esi
.text:00405043                 jz      short loc_405078
.text:00405045                 mov     edi, [esp+4Ch+var_1C]
.text:00405049                 movzx   eax, byte ptr [edi]
.text:0040504C                 test    al, al
.text:0040504E                 jz      short loc_405078
.text:00405050
.text:00405050 loc_405050:                             ; CODE XREF: sub_404720+956↓j
.text:00405050                 mov     ebp, [esp+4Ch+arg_4]
.text:00405054                 cmp     [esp+4Ch+var_34], ebp
.text:00405058                 jnb     short loc_405065
.text:0040505A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040505E                 mov     ebx, [esp+4Ch+var_34]
.text:00405062                 mov     [ebx+ecx], al
.text:00405065
.text:00405065 loc_405065:                             ; CODE XREF: sub_404720+938↑j
.text:00405065                 inc     [esp+4Ch+var_1C]
.text:00405069                 inc     [esp+4Ch+var_34]
.text:0040506D                 mov     edx, [esp+4Ch+var_1C]
.text:00405071                 movzx   eax, byte ptr [edx]
.text:00405074                 test    al, al
.text:00405076                 jnz     short loc_405050
.text:00405078
.text:00405078 loc_405078:                             ; CODE XREF: sub_404720+923↑j
.text:00405078                                         ; sub_404720+92E↑j
.text:00405078                 mov     eax, [esp+4Ch+arg_4]
.text:0040507C                 cmp     [esp+4Ch+var_34], eax
.text:00405080                 jnb     short loc_40508E
.text:00405082                 mov     edi, [esp+4Ch+arg_0]
.text:00405086                 mov     esi, [esp+4Ch+var_34]
.text:0040508A                 mov     byte ptr [esi+edi], 0
.text:0040508E
.text:0040508E loc_40508E:                             ; CODE XREF: sub_404720+960↑j
.text:0040508E                 mov     eax, [esp+4Ch+var_34]
.text:00405092                 jmp     loc_404B5F
.text:00405097 ; ---------------------------------------------------------------------------
.text:00405097
.text:00405097 loc_405097:                             ; CODE XREF: sub_404720+95↑j
.text:00405097                 mov     ebx, [esp+4Ch+Str]
.text:0040509B                 cmp     byte ptr [ebp+ebx+0], 0
.text:004050A0                 jmp     loc_4047BF
.text:004050A5 ; ---------------------------------------------------------------------------
.text:004050A5
.text:004050A5 loc_4050A5:                             ; CODE XREF: sub_404720+3D↑j
.text:004050A5                                         ; DATA XREF: sub_404720:jpt_40475D↑o
.text:004050A5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040475D case 2
.text:004050A9                 cmp     [esp+4Ch+var_34], edx
.text:004050AD                 jnb     short loc_4050B6
.text:004050AF                 mov     ecx, [esp+4Ch+arg_0]
.text:004050B3                 mov     byte ptr [ecx], 27h ; '''
.text:004050B6
.text:004050B6 loc_4050B6:                             ; CODE XREF: sub_404720+98D↑j
.text:004050B6                 mov     [esp+4Ch+var_34], 1
.text:004050BE                 mov     [esp+4Ch+var_1C], 40470Eh
.text:004050C6                 jmp     loc_4047A6
.text:004050CB ; ---------------------------------------------------------------------------
.text:004050CB
.text:004050CB loc_4050CB:                             ; CODE XREF: sub_404720+3D↑j
.text:004050CB                                         ; DATA XREF: sub_404720:jpt_40475D↑o
.text:004050CB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040475D case 4
.text:004050D0                 jmp     def_40475D      ; jumptable 0040475D default case, cases 0,1
.text:004050D5 ; ---------------------------------------------------------------------------
.text:004050D5
.text:004050D5 loc_4050D5:                             ; CODE XREF: sub_404720+3D↑j
.text:004050D5                                         ; DATA XREF: sub_404720:jpt_40475D↑o
.text:004050D5                 mov     [esp+4Ch+C], 404710h ; jumptable 0040475D cases 5,6
.text:004050DC                 call    ds:libintl_gettext
.text:004050E2                 cmp     eax, 404710h
.text:004050E7                 mov     edi, eax
.text:004050E9                 jz      short loc_405160
.text:004050EB
.text:004050EB loc_4050EB:                             ; CODE XREF: sub_404720+A45↓j
.text:004050EB                                         ; sub_404720+A4C↓j
.text:004050EB                 mov     [esp+4Ch+C], 40470Eh
.text:004050F2                 call    ds:libintl_gettext
.text:004050F8                 cmp     eax, 40470Eh
.text:004050FD                 mov     edx, eax
.text:004050FF                 jz      short loc_405152
.text:00405101
.text:00405101 loc_405101:                             ; CODE XREF: sub_404720+A37↓j
.text:00405101                                         ; sub_404720+A3E↓j
.text:00405101                 mov     [esp+4Ch+var_1C], edi
.text:00405105                 cmp     byte ptr [edi], 0
.text:00405108                 jz      short loc_405138
.text:0040510A
.text:0040510A loc_40510A:                             ; CODE XREF: sub_404720+A16↓j
.text:0040510A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040510E                 cmp     [esp+4Ch+var_34], ecx
.text:00405112                 jnb     short loc_405127
.text:00405114                 mov     ebp, [esp+4Ch+var_1C]
.text:00405118                 mov     edi, [esp+4Ch+arg_0]
.text:0040511C                 mov     esi, [esp+4Ch+var_34]
.text:00405120                 movzx   ebx, byte ptr [ebp+0]
.text:00405124                 mov     [esi+edi], bl
.text:00405127
.text:00405127 loc_405127:                             ; CODE XREF: sub_404720+9F2↑j
.text:00405127                 inc     [esp+4Ch+var_1C]
.text:0040512B                 inc     [esp+4Ch+var_34]
.text:0040512F                 mov     eax, [esp+4Ch+var_1C]
.text:00405133                 cmp     byte ptr [eax], 0
.text:00405136                 jnz     short loc_40510A
.text:00405138
.text:00405138 loc_405138:                             ; CODE XREF: sub_404720+9E8↑j
.text:00405138                 mov     [esp+4Ch+var_21], 1
.text:0040513D                 mov     [esp+4Ch+var_1C], edx
.text:00405141                 mov     [esp+4Ch+C], edx ; Str
.text:00405144                 call    strlen
.text:00405149                 mov     [esp+4Ch+var_20], eax
.text:0040514D                 jmp     def_40475D      ; jumptable 0040475D default case, cases 0,1
.text:00405152 ; ---------------------------------------------------------------------------
.text:00405152
.text:00405152 loc_405152:                             ; CODE XREF: sub_404720+9DF↑j
.text:00405152                 cmp     [esp+4Ch+arg_10], 6
.text:00405157                 jnz     short loc_405101
.text:00405159                 mov     edx, offset asc_40470C ; "\"'`"
.text:0040515E                 jmp     short loc_405101
.text:00405160 ; ---------------------------------------------------------------------------
.text:00405160
.text:00405160 loc_405160:                             ; CODE XREF: sub_404720+9C9↑j
.text:00405160                 cmp     [esp+4Ch+arg_10], 6
.text:00405165                 jnz     short loc_4050EB
.text:00405167                 mov     edi, offset asc_40470C ; "\"'`"
.text:0040516C                 jmp     loc_4050EB
.text:0040516C sub_404720      endp
.text:0040516C
.text:00405171 ; ---------------------------------------------------------------------------
.text:00405171                 jmp     short loc_405180
.text:00405171 ; ---------------------------------------------------------------------------
.text:00405173                 align 10h
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: .text:00405171↑j
.text:00405180                 sub     esp, 0Ch
.text:00405183                 mov     [esp+4], ebx
.text:00405187                 mov     [esp+8], esi
.text:0040518B                 call    _errno
.text:00405190                 mov     esi, [eax]
.text:00405192                 mov     dword ptr [esp], 24h ; '$'
.text:00405199                 call    sub_405AD0
.text:0040519E                 mov     edx, [esp+10h]
.text:004051A2                 mov     ebx, eax
.text:004051A4                 test    edx, edx
.text:004051A6                 jz      short loc_4051F1
.text:004051A8
.text:004051A8 loc_4051A8:                             ; CODE XREF: .text:004051F6↓j
.text:004051A8                 mov     ecx, [edx]
.text:004051AA                 mov     [ebx], ecx
.text:004051AC                 mov     ecx, [edx+4]
.text:004051AF                 mov     [ebx+4], ecx
.text:004051B2                 mov     ecx, [edx+8]
.text:004051B5                 mov     [ebx+8], ecx
.text:004051B8                 mov     ecx, [edx+0Ch]
.text:004051BB                 mov     [ebx+0Ch], ecx
.text:004051BE                 mov     ecx, [edx+10h]
.text:004051C1                 mov     [ebx+10h], ecx
.text:004051C4                 mov     ecx, [edx+14h]
.text:004051C7                 mov     [ebx+14h], ecx
.text:004051CA                 mov     ecx, [edx+18h]
.text:004051CD                 mov     [ebx+18h], ecx
.text:004051D0                 mov     ecx, [edx+1Ch]
.text:004051D3                 mov     [ebx+1Ch], ecx
.text:004051D6                 mov     ecx, [edx+20h]
.text:004051D9                 mov     [ebx+20h], ecx
.text:004051DC                 call    _errno
.text:004051E1                 mov     [eax], esi
.text:004051E3                 mov     esi, [esp+8]
.text:004051E7                 mov     eax, ebx
.text:004051E9                 mov     ebx, [esp+4]
.text:004051ED                 add     esp, 0Ch
.text:004051F0                 retn
.text:004051F1 ; ---------------------------------------------------------------------------
.text:004051F1
.text:004051F1 loc_4051F1:                             ; CODE XREF: .text:004051A6↑j
.text:004051F1                 mov     edx, offset dword_408180
.text:004051F6                 jmp     short loc_4051A8
.text:004051F6 ; ---------------------------------------------------------------------------
.text:004051F8                 align 10h
.text:00405200                 mov     eax, [esp+4]
.text:00405204                 test    eax, eax
.text:00405206                 jz      short loc_405210
.text:00405208
.text:00405208 loc_405208:                             ; CODE XREF: .text:00405215↓j
.text:00405208                 mov     eax, [eax]
.text:0040520A                 retn
.text:0040520A ; ---------------------------------------------------------------------------
.text:0040520B                 align 10h
.text:00405210
.text:00405210 loc_405210:                             ; CODE XREF: .text:00405206↑j
.text:00405210                 mov     eax, offset dword_408180
.text:00405215                 jmp     short loc_405208
.text:00405215 ; ---------------------------------------------------------------------------
.text:00405217                 align 10h
.text:00405220                 mov     edx, [esp+4]
.text:00405224                 test    edx, edx
.text:00405226                 jz      short loc_405230
.text:00405228
.text:00405228 loc_405228:                             ; CODE XREF: .text:00405235↓j
.text:00405228                 mov     ecx, [esp+8]
.text:0040522C                 mov     [edx], ecx
.text:0040522E                 retn
.text:0040522E ; ---------------------------------------------------------------------------
.text:0040522F                 align 10h
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: .text:00405226↑j
.text:00405230                 mov     edx, offset dword_408180
.text:00405235                 jmp     short loc_405228
.text:00405235 ; ---------------------------------------------------------------------------
.text:00405237                 align 10h
.text:00405240                 sub     esp, 8
.text:00405243                 mov     eax, [esp+0Ch]
.text:00405247                 movzx   ecx, byte ptr [esp+10h]
.text:0040524C                 mov     [esp], ebx
.text:0040524F                 mov     ebx, [esp+14h]
.text:00405253                 mov     [esp+4], esi
.text:00405257                 mov     dl, cl
.text:00405259                 shr     dl, 5
.text:0040525C                 movzx   edx, dl
.text:0040525F                 shl     edx, 2
.text:00405262                 test    eax, eax
.text:00405264                 lea     esi, [edx+eax+4]
.text:00405268                 jz      short loc_405290
.text:0040526A
.text:0040526A loc_40526A:                             ; CODE XREF: .text:00405296↓j
.text:0040526A                 mov     edx, [esi]
.text:0040526C                 and     ecx, 1Fh
.text:0040526F                 and     ebx, 1
.text:00405272                 mov     eax, edx
.text:00405274                 shr     eax, cl
.text:00405276                 and     eax, 1
.text:00405279                 xor     ebx, eax
.text:0040527B                 shl     ebx, cl
.text:0040527D                 xor     edx, ebx
.text:0040527F                 mov     [esi], edx
.text:00405281                 mov     ebx, [esp]
.text:00405284                 mov     esi, [esp+4]
.text:00405288                 add     esp, 8
.text:0040528B                 retn
.text:0040528B ; ---------------------------------------------------------------------------
.text:0040528C                 align 10h
.text:00405290
.text:00405290 loc_405290:                             ; CODE XREF: .text:00405268↑j
.text:00405290                 lea     esi, dword_408184[edx]
.text:00405296                 jmp     short loc_40526A
.text:00405296 ; ---------------------------------------------------------------------------
.text:00405298                 align 10h
.text:004052A0                 sub     esp, 2Ch
.text:004052A3                 mov     [esp+24h], ebx
.text:004052A7                 mov     ebx, [esp+40h]
.text:004052AB                 mov     [esp+28h], esi
.text:004052AF                 test    ebx, ebx
.text:004052B1                 jz      short loc_405300
.text:004052B3
.text:004052B3 loc_4052B3:                             ; CODE XREF: .text:00405305↓j
.text:004052B3                 call    _errno
.text:004052B8                 mov     esi, [eax]
.text:004052BA                 mov     [esp+14h], ebx
.text:004052BE                 mov     edx, [ebx]
.text:004052C0                 mov     ecx, [esp+38h]
.text:004052C4                 mov     ebx, [esp+3Ch]
.text:004052C8                 mov     [esp+10h], edx
.text:004052CC                 mov     edx, [esp+34h]
.text:004052D0                 mov     [esp+0Ch], ebx
.text:004052D4                 mov     [esp+8], ecx
.text:004052D8                 mov     [esp+4], edx
.text:004052DC                 mov     edx, [esp+30h]
.text:004052E0                 mov     [esp], edx
.text:004052E3                 call    sub_404720
.text:004052E8                 mov     ebx, eax
.text:004052EA                 call    _errno
.text:004052EF                 mov     [eax], esi
.text:004052F1                 mov     esi, [esp+28h]
.text:004052F5                 mov     eax, ebx
.text:004052F7                 mov     ebx, [esp+24h]
.text:004052FB                 add     esp, 2Ch
.text:004052FE                 retn
.text:004052FE ; ---------------------------------------------------------------------------
.text:004052FF                 align 10h
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: .text:004052B1↑j
.text:00405300                 mov     ebx, offset dword_408180
.text:00405305                 jmp     short loc_4052B3
.text:00405305 ; ---------------------------------------------------------------------------
.text:00405307                 align 10h
.text:00405310                 push    ebp
.text:00405311                 push    edi
.text:00405312                 push    esi
.text:00405313                 push    ebx
.text:00405314                 sub     esp, 2Ch
.text:00405317                 mov     ebp, [esp+48h]
.text:0040531B                 call    _errno
.text:00405320                 mov     edx, [eax]
.text:00405322                 test    ebp, ebp
.text:00405324                 mov     ebx, ebp
.text:00405326                 mov     [esp+28h], edx
.text:0040532A                 jz      loc_4053E0
.text:00405330
.text:00405330 loc_405330:                             ; CODE XREF: .text:004053E5↓j
.text:00405330                 call    _errno
.text:00405335                 mov     edi, [eax]
.text:00405337                 mov     esi, ebp
.text:00405339                 mov     [esp+14h], ebx
.text:0040533D                 mov     ecx, [ebx]
.text:0040533F                 mov     dword ptr [esp], 0
.text:00405346                 mov     edx, [esp+44h]
.text:0040534A                 mov     dword ptr [esp+4], 0
.text:00405352                 mov     eax, [esp+40h]
.text:00405356                 mov     [esp+10h], ecx
.text:0040535A                 mov     [esp+0Ch], edx
.text:0040535E                 mov     [esp+8], eax
.text:00405362                 call    sub_404720
.text:00405367                 mov     ebx, eax
.text:00405369                 call    _errno
.text:0040536E                 mov     [eax], edi
.text:00405370                 lea     edi, [ebx+1]
.text:00405373                 mov     [esp], edi
.text:00405376                 call    sub_405AD0
.text:0040537B                 mov     [esp+24h], eax
.text:0040537F                 test    ebp, ebp
.text:00405381                 jz      short loc_4053D2
.text:00405383
.text:00405383 loc_405383:                             ; CODE XREF: .text:004053D7↓j
.text:00405383                 call    _errno
.text:00405388                 mov     ebp, [eax]
.text:0040538A                 mov     [esp+14h], esi
.text:0040538E                 mov     ecx, [esi]
.text:00405390                 mov     [esp+4], edi
.text:00405394                 mov     edx, [esp+44h]
.text:00405398                 mov     esi, [esp+24h]
.text:0040539C                 mov     [esp+10h], ecx
.text:004053A0                 mov     eax, [esp+40h]
.text:004053A4                 mov     [esp+0Ch], edx
.text:004053A8                 mov     [esp], esi
.text:004053AB                 mov     [esp+8], eax
.text:004053AF                 call    sub_404720
.text:004053B4                 call    _errno
.text:004053B9                 mov     [eax], ebp
.text:004053BB                 call    _errno
.text:004053C0                 mov     ebx, [esp+28h]
.text:004053C4                 mov     [eax], ebx
.text:004053C6                 mov     eax, [esp+24h]
.text:004053CA                 add     esp, 2Ch
.text:004053CD                 pop     ebx
.text:004053CE                 pop     esi
.text:004053CF                 pop     edi
.text:004053D0                 pop     ebp
.text:004053D1                 retn
.text:004053D2 ; ---------------------------------------------------------------------------
.text:004053D2
.text:004053D2 loc_4053D2:                             ; CODE XREF: .text:00405381↑j
.text:004053D2                 mov     esi, offset dword_408180
.text:004053D7                 jmp     short loc_405383
.text:004053D7 ; ---------------------------------------------------------------------------
.text:004053D9                 align 10h
.text:004053E0
.text:004053E0 loc_4053E0:                             ; CODE XREF: .text:0040532A↑j
.text:004053E0                 mov     ebx, offset dword_408180
.text:004053E5                 jmp     loc_405330
.text:004053E5 ; ---------------------------------------------------------------------------
.text:004053EA                 align 10h
.text:004053F0                 sub     esp, 1Ch
.text:004053F3                 mov     edx, [esp+24h]
.text:004053F7                 mov     dword ptr [esp+0Ch], offset dword_408180
.text:004053FF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405407                 mov     [esp+4], edx
.text:0040540B                 mov     edx, [esp+20h]
.text:0040540F                 mov     [esp], edx
.text:00405412                 call    sub_405860
.text:00405417                 add     esp, 1Ch
.text:0040541A                 retn
.text:0040541A ; ---------------------------------------------------------------------------
.text:0040541B                 align 10h
.text:00405420                 sub     esp, 1Ch
.text:00405423                 mov     edx, [esp+20h]
.text:00405427                 mov     dword ptr [esp+0Ch], offset dword_408180
.text:0040542F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405437                 mov     [esp+4], edx
.text:0040543B                 mov     dword ptr [esp], 0
.text:00405442                 call    sub_405860
.text:00405447                 add     esp, 1Ch
.text:0040544A                 retn
.text:0040544A ; ---------------------------------------------------------------------------
.text:0040544B                 align 10h
.text:00405450
.text:00405450 ; =============== S U B R O U T I N E =======================================
.text:00405450
.text:00405450
.text:00405450 ; int __cdecl sub_405450(int, int, char *)
.text:00405450 sub_405450      proc near               ; CODE XREF: .text:0040456A↑p
.text:00405450                                         ; sub_404580+1A↑p
.text:00405450
.text:00405450 var_BC          = dword ptr -0BCh
.text:00405450 var_B8          = dword ptr -0B8h
.text:00405450 var_B4          = dword ptr -0B4h
.text:00405450 var_B0          = dword ptr -0B0h
.text:00405450 var_AC          = dword ptr -0ACh
.text:00405450 var_A8          = dword ptr -0A8h
.text:00405450 var_A4          = dword ptr -0A4h
.text:00405450 var_A0          = dword ptr -0A0h
.text:00405450 var_9C          = dword ptr -9Ch
.text:00405450 var_98          = dword ptr -98h
.text:00405450 var_94          = dword ptr -94h
.text:00405450 var_90          = dword ptr -90h
.text:00405450 var_8C          = dword ptr -8Ch
.text:00405450 var_7C          = dword ptr -7Ch
.text:00405450 var_78          = dword ptr -78h
.text:00405450 var_74          = dword ptr -74h
.text:00405450 var_70          = dword ptr -70h
.text:00405450 var_6C          = dword ptr -6Ch
.text:00405450 var_68          = dword ptr -68h
.text:00405450 var_64          = dword ptr -64h
.text:00405450 var_60          = dword ptr -60h
.text:00405450 var_5C          = dword ptr -5Ch
.text:00405450 var_4C          = dword ptr -4Ch
.text:00405450 var_48          = dword ptr -48h
.text:00405450 var_44          = dword ptr -44h
.text:00405450 var_40          = dword ptr -40h
.text:00405450 var_3C          = dword ptr -3Ch
.text:00405450 var_38          = dword ptr -38h
.text:00405450 var_34          = dword ptr -34h
.text:00405450 var_30          = dword ptr -30h
.text:00405450 var_2C          = dword ptr -2Ch
.text:00405450 arg_0           = dword ptr  4
.text:00405450 arg_4           = dword ptr  8
.text:00405450 arg_8           = dword ptr  0Ch
.text:00405450
.text:00405450                 push    ebp
.text:00405451                 xor     eax, eax
.text:00405453                 mov     ecx, 8
.text:00405458                 push    edi
.text:00405459                 push    esi
.text:0040545A                 push    ebx
.text:0040545B                 sub     esp, 0ACh
.text:00405461                 mov     ebp, [esp+0BCh+arg_4]
.text:00405468                 cld
.text:00405469                 lea     edi, [esp+0BCh+var_A8]
.text:0040546D                 mov     [esp+0BCh+var_AC], ebp
.text:00405471                 rep stosd
.text:00405473                 mov     eax, [esp+0BCh+var_8C]
.text:00405477                 mov     edi, [esp+0BCh+var_AC]
.text:0040547B                 mov     esi, [esp+0BCh+var_A8]
.text:0040547F                 mov     [esp+0BCh+var_5C], eax
.text:00405483                 mov     ebp, [esp+0BCh+var_A4]
.text:00405487                 mov     eax, [esp+0BCh+var_AC]
.text:0040548B                 mov     [esp+0BCh+var_7C], edi
.text:0040548F                 mov     ecx, [esp+0BCh+var_94]
.text:00405493                 mov     edi, [esp+0BCh+var_A0]
.text:00405497                 mov     [esp+0BCh+var_78], esi
.text:0040549B                 mov     edx, [esp+0BCh+var_90]
.text:0040549F                 mov     esi, [esp+0BCh+var_9C]
.text:004054A3                 mov     [esp+0BCh+var_4C], eax
.text:004054A7                 mov     ebx, [esp+0BCh+var_98]
.text:004054AB                 mov     eax, [esp+0BCh+var_A8]
.text:004054AF                 mov     [esp+0BCh+var_74], ebp
.text:004054B3                 mov     [esp+0BCh+var_70], edi
.text:004054B7                 mov     [esp+0BCh+var_6C], esi
.text:004054BB                 mov     [esp+0BCh+var_68], ebx
.text:004054BF                 mov     [esp+0BCh+var_64], ecx
.text:004054C3                 mov     [esp+0BCh+var_60], edx
.text:004054C7                 mov     [esp+0BCh+var_48], eax
.text:004054CB                 mov     [esp+0BCh+var_44], ebp
.text:004054CF                 mov     [esp+0BCh+var_40], edi
.text:004054D3                 mov     [esp+0BCh+var_3C], esi
.text:004054DA                 mov     [esp+0BCh+var_38], ebx
.text:004054E1                 mov     ebx, [esp+0BCh+var_8C]
.text:004054E5                 mov     [esp+0BCh+var_30], edx
.text:004054EC                 mov     edx, [esp+0BCh+arg_8]
.text:004054F3                 mov     [esp+0BCh+var_34], ecx
.text:004054FA                 lea     ecx, [esp+0BCh+var_4C]
.text:004054FE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00405502                 mov     edx, [esp+0BCh+arg_0]
.text:00405509                 mov     [esp+0BCh+var_2C], ebx
.text:00405510                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00405514                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040551C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040551F                 call    sub_405860
.text:00405524                 add     esp, 0ACh
.text:0040552A                 pop     ebx
.text:0040552B                 pop     esi
.text:0040552C                 pop     edi
.text:0040552D                 pop     ebp
.text:0040552E                 retn
.text:0040552E sub_405450      endp
.text:0040552E
.text:0040552E ; ---------------------------------------------------------------------------
.text:0040552F                 align 10h
.text:00405530                 push    ebp
.text:00405531                 xor     eax, eax
.text:00405533                 mov     ecx, 8
.text:00405538                 push    edi
.text:00405539                 push    esi
.text:0040553A                 push    ebx
.text:0040553B                 sub     esp, 0ACh
.text:00405541                 mov     edx, [esp+0C4h]
.text:00405548                 cld
.text:00405549                 lea     edi, [esp+14h]
.text:0040554D                 mov     [esp+10h], edx
.text:00405551                 rep stosd
.text:00405553                 mov     eax, [esp+30h]
.text:00405557                 mov     ebp, [esp+10h]
.text:0040555B                 mov     edi, [esp+14h]
.text:0040555F                 mov     [esp+60h], eax
.text:00405563                 mov     esi, [esp+20h]
.text:00405567                 mov     eax, [esp+10h]
.text:0040556B                 mov     [esp+40h], ebp
.text:0040556F                 mov     ecx, [esp+28h]
.text:00405573                 mov     ebp, [esp+18h]
.text:00405577                 mov     [esp+44h], edi
.text:0040557B                 mov     edx, [esp+2Ch]
.text:0040557F                 mov     edi, [esp+1Ch]
.text:00405583                 mov     [esp+70h], eax
.text:00405587                 mov     ebx, [esp+24h]
.text:0040558B                 mov     eax, [esp+14h]
.text:0040558F                 mov     [esp+48h], ebp
.text:00405593                 mov     [esp+4Ch], edi
.text:00405597                 mov     [esp+50h], esi
.text:0040559B                 mov     [esp+54h], ebx
.text:0040559F                 mov     [esp+58h], ecx
.text:004055A3                 mov     [esp+5Ch], edx
.text:004055A7                 mov     [esp+74h], eax
.text:004055AB                 mov     [esp+78h], ebp
.text:004055AF                 mov     [esp+7Ch], edi
.text:004055B3                 mov     [esp+80h], esi
.text:004055BA                 mov     [esp+84h], ebx
.text:004055C1                 mov     esi, [esp+30h]
.text:004055C5                 lea     ebx, [esp+70h]
.text:004055C9                 mov     [esp+8Ch], edx
.text:004055D0                 mov     edx, [esp+0C8h]
.text:004055D7                 mov     [esp+88h], ecx
.text:004055DE                 mov     ecx, [esp+0CCh]
.text:004055E5                 mov     [esp+4], edx
.text:004055E9                 mov     edx, [esp+0C0h]
.text:004055F0                 mov     [esp+90h], esi
.text:004055F7                 mov     [esp+0Ch], ebx
.text:004055FB                 mov     [esp+8], ecx
.text:004055FF                 mov     [esp], edx
.text:00405602                 call    sub_405860
.text:00405607                 add     esp, 0ACh
.text:0040560D                 pop     ebx
.text:0040560E                 pop     esi
.text:0040560F                 pop     edi
.text:00405610                 pop     ebp
.text:00405611                 retn
.text:00405611 ; ---------------------------------------------------------------------------
.text:00405612                 align 10h
.text:00405620                 push    ebp
.text:00405621                 xor     eax, eax
.text:00405623                 mov     ecx, 8
.text:00405628                 push    edi
.text:00405629                 push    esi
.text:0040562A                 push    ebx
.text:0040562B                 sub     esp, 0ACh
.text:00405631                 mov     edi, [esp+0C0h]
.text:00405638                 cld
.text:00405639                 mov     [esp+10h], edi
.text:0040563D                 lea     edi, [esp+14h]
.text:00405641                 rep stosd
.text:00405643                 mov     eax, [esp+30h]
.text:00405647                 mov     esi, [esp+10h]
.text:0040564B                 mov     ebx, [esp+14h]
.text:0040564F                 mov     [esp+60h], eax
.text:00405653                 mov     ebp, [esp+18h]
.text:00405657                 mov     eax, [esp+10h]
.text:0040565B                 mov     [esp+40h], esi
.text:0040565F                 mov     edi, [esp+1Ch]
.text:00405663                 mov     esi, [esp+20h]
.text:00405667                 mov     [esp+44h], ebx
.text:0040566B                 mov     ecx, [esp+28h]
.text:0040566F                 mov     edx, [esp+2Ch]
.text:00405673                 mov     [esp+70h], eax
.text:00405677                 mov     ebx, [esp+24h]
.text:0040567B                 mov     eax, [esp+14h]
.text:0040567F                 mov     [esp+48h], ebp
.text:00405683                 mov     [esp+4Ch], edi
.text:00405687                 mov     [esp+50h], esi
.text:0040568B                 mov     [esp+54h], ebx
.text:0040568F                 mov     [esp+58h], ecx
.text:00405693                 mov     [esp+5Ch], edx
.text:00405697                 mov     [esp+74h], eax
.text:0040569B                 mov     [esp+78h], ebp
.text:0040569F                 mov     [esp+7Ch], edi
.text:004056A3                 mov     [esp+80h], esi
.text:004056AA                 mov     [esp+84h], ebx
.text:004056B1                 mov     [esp+8Ch], edx
.text:004056B8                 lea     edx, [esp+70h]
.text:004056BC                 mov     [esp+88h], ecx
.text:004056C3                 mov     ecx, [esp+30h]
.text:004056C7                 mov     [esp+0Ch], edx
.text:004056CB                 mov     edx, [esp+0C4h]
.text:004056D2                 mov     [esp+90h], ecx
.text:004056D9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004056E1                 mov     [esp+4], edx
.text:004056E5                 mov     dword ptr [esp], 0
.text:004056EC                 call    sub_405860
.text:004056F1                 add     esp, 0ACh
.text:004056F7                 pop     ebx
.text:004056F8                 pop     esi
.text:004056F9                 pop     edi
.text:004056FA                 pop     ebp
.text:004056FB                 retn
.text:004056FB ; ---------------------------------------------------------------------------
.text:004056FC                 align 10h
.text:00405700                 push    edi
.text:00405701                 push    esi
.text:00405702                 push    ebx
.text:00405703                 sub     esp, 40h
.text:00405706                 mov     edx, ds:dword_40818C
.text:0040570C                 mov     ebx, ds:dword_408180
.text:00405712                 mov     esi, ds:dword_408188
.text:00405718                 mov     edi, ds:dword_408184
.text:0040571E                 mov     [esp+1Ch], edx
.text:00405722                 mov     ecx, ds:dword_408190
.text:00405728                 mov     edx, ds:dword_4081A0
.text:0040572E                 mov     [esp+10h], ebx
.text:00405732                 mov     ebx, ds:dword_408194
.text:00405738                 mov     [esp+30h], edx
.text:0040573C                 movzx   edx, byte ptr [esp+54h]
.text:00405741                 mov     [esp+18h], esi
.text:00405745                 mov     esi, ds:dword_40819C
.text:0040574B                 mov     [esp+14h], edi
.text:0040574F                 mov     edi, ds:dword_408198
.text:00405755                 mov     [esp+20h], ecx
.text:00405759                 mov     cl, dl
.text:0040575B                 shr     cl, 5
.text:0040575E                 mov     [esp+24h], ebx
.text:00405762                 movzx   ebx, cl
.text:00405765                 mov     [esp+2Ch], esi
.text:00405769                 lea     esi, [esp+10h]
.text:0040576D                 mov     [esp+28h], edi
.text:00405771                 lea     edi, [esi+ebx*4]
.text:00405774                 mov     ebx, edx
.text:00405776                 mov     edx, [edi+4]
.text:00405779                 and     ebx, 1Fh
.text:0040577C                 mov     cl, bl
.text:0040577E                 mov     eax, edx
.text:00405780                 shr     eax, cl
.text:00405782                 and     eax, 1
.text:00405785                 xor     eax, 1
.text:00405788                 shl     eax, cl
.text:0040578A                 xor     edx, eax
.text:0040578C                 mov     [edi+4], edx
.text:0040578F                 mov     edx, [esp+50h]
.text:00405793                 mov     [esp+0Ch], esi
.text:00405797                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040579F                 mov     [esp+4], edx
.text:004057A3                 mov     dword ptr [esp], 0
.text:004057AA                 call    sub_405860
.text:004057AF                 add     esp, 40h
.text:004057B2                 pop     ebx
.text:004057B3                 pop     esi
.text:004057B4                 pop     edi
.text:004057B5                 retn
.text:004057B5 ; ---------------------------------------------------------------------------
.text:004057B6                 align 10h
.text:004057C0
.text:004057C0 ; =============== S U B R O U T I N E =======================================
.text:004057C0
.text:004057C0
.text:004057C0 ; int __cdecl sub_4057C0(char *)
.text:004057C0 sub_4057C0      proc near               ; CODE XREF: sub_404470+64↑p
.text:004057C0
.text:004057C0 var_4C          = dword ptr -4Ch
.text:004057C0 var_48          = dword ptr -48h
.text:004057C0 var_44          = dword ptr -44h
.text:004057C0 var_40          = dword ptr -40h
.text:004057C0 var_3C          = dword ptr -3Ch
.text:004057C0 var_38          = dword ptr -38h
.text:004057C0 var_34          = dword ptr -34h
.text:004057C0 var_30          = dword ptr -30h
.text:004057C0 var_2C          = dword ptr -2Ch
.text:004057C0 var_28          = dword ptr -28h
.text:004057C0 var_24          = dword ptr -24h
.text:004057C0 var_20          = dword ptr -20h
.text:004057C0 var_1C          = dword ptr -1Ch
.text:004057C0 arg_0           = dword ptr  4
.text:004057C0
.text:004057C0                 sub     esp, 4Ch
.text:004057C3                 mov     ecx, ds:dword_408180
.text:004057C9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004057D1                 mov     edx, ds:dword_408184
.text:004057D7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004057DE                 mov     [esp+4Ch+var_3C], ecx
.text:004057E2                 mov     ecx, ds:dword_40818C
.text:004057E8                 mov     [esp+4Ch+var_38], edx
.text:004057EC                 mov     edx, ds:dword_408188
.text:004057F2                 mov     [esp+4Ch+var_30], ecx
.text:004057F6                 mov     ecx, ds:dword_408190
.text:004057FC                 mov     eax, edx
.text:004057FE                 shr     eax, 1Ah
.text:00405801                 and     eax, 1
.text:00405804                 xor     eax, 1
.text:00405807                 mov     [esp+4Ch+var_2C], ecx
.text:0040580B                 shl     eax, 1Ah
.text:0040580E                 mov     ecx, ds:dword_408194
.text:00405814                 xor     edx, eax
.text:00405816                 mov     [esp+4Ch+var_34], edx
.text:0040581A                 mov     edx, [esp+4Ch+arg_0]
.text:0040581E                 mov     [esp+4Ch+var_28], ecx
.text:00405822                 mov     ecx, ds:dword_408198
.text:00405828                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040582C                 mov     [esp+4Ch+var_24], ecx
.text:00405830                 mov     ecx, ds:dword_40819C
.text:00405836                 mov     [esp+4Ch+var_20], ecx
.text:0040583A                 mov     ecx, ds:dword_4081A0
.text:00405840                 mov     [esp+4Ch+var_1C], ecx
.text:00405844                 lea     ecx, [esp+4Ch+var_3C]
.text:00405848                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040584C                 call    sub_405860
.text:00405851                 add     esp, 4Ch
.text:00405854                 retn
.text:00405854 sub_4057C0      endp
.text:00405854
.text:00405854 ; ---------------------------------------------------------------------------
.text:00405855                 align 10h
.text:00405860
.text:00405860 ; =============== S U B R O U T I N E =======================================
.text:00405860
.text:00405860
.text:00405860 ; int __cdecl sub_405860(int, char *, int, int)
.text:00405860 sub_405860      proc near               ; CODE XREF: .text:00405412↑p
.text:00405860                                         ; .text:00405442↑p ...
.text:00405860
.text:00405860 Block           = dword ptr -2Ch
.text:00405860 var_28          = dword ptr -28h
.text:00405860 Str             = dword ptr -24h
.text:00405860 var_20          = dword ptr -20h
.text:00405860 var_1C          = dword ptr -1Ch
.text:00405860 var_18          = dword ptr -18h
.text:00405860 var_14          = dword ptr -14h
.text:00405860 arg_0           = dword ptr  4
.text:00405860 arg_4           = dword ptr  8
.text:00405860 arg_8           = dword ptr  0Ch
.text:00405860 arg_C           = dword ptr  10h
.text:00405860
.text:00405860                 push    ebp
.text:00405861                 push    edi
.text:00405862                 push    esi
.text:00405863                 push    ebx
.text:00405864                 sub     esp, 1Ch
.text:00405867                 call    _errno
.text:0040586C                 mov     edx, [eax]
.text:0040586E                 mov     eax, [esp+2Ch+arg_0]
.text:00405872                 mov     [esp+2Ch+var_14], edx
.text:00405876                 test    eax, eax
.text:00405878                 js      loc_405A1A
.text:0040587E                 mov     eax, [esp+2Ch+arg_0]
.text:00405882                 cmp     dword_407040, eax
.text:00405888                 ja      short loc_405900
.text:0040588A                 mov     esi, eax
.text:0040588C                 inc     esi
.text:0040588D                 cmp     esi, 1FFFFFFFh
.text:00405893                 ja      loc_405A1F
.text:00405899                 mov     ebx, off_40704C
.text:0040589F                 cmp     ebx, offset dword_407044
.text:004058A5                 jz      loc_4059F1
.text:004058AB
.text:004058AB loc_4058AB:                             ; CODE XREF: sub_405860+1B5↓j
.text:004058AB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004058AE                 lea     ecx, ds:0[esi*8]
.text:004058B5                 mov     ebp, esi
.text:004058B7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004058BB                 call    sub_405B60
.text:004058C0                 mov     off_40704C, eax
.text:004058C5                 mov     ebx, dword_407040
.text:004058CB                 sub     ebp, ebx
.text:004058CD                 lea     edi, [eax+ebx*8]
.text:004058D0                 lea     eax, ds:0[ebp*8]
.text:004058D7                 cmp     eax, 7
.text:004058DA                 jbe     short loc_4058F0
.text:004058DC                 test    edi, 4
.text:004058E2                 jz      short loc_4058F0
.text:004058E4                 mov     dword ptr [edi], 0
.text:004058EA                 sub     eax, 4
.text:004058ED                 add     edi, 4
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_405860+7A↑j
.text:004058F0                                         ; sub_405860+82↑j
.text:004058F0                 cld
.text:004058F1                 mov     ecx, eax
.text:004058F3                 shr     ecx, 2
.text:004058F6                 xor     eax, eax
.text:004058F8                 rep stosd
.text:004058FA                 mov     dword_407040, esi
.text:00405900
.text:00405900 loc_405900:                             ; CODE XREF: sub_405860+28↑j
.text:00405900                 mov     esi, off_40704C
.text:00405906                 mov     eax, [esp+2Ch+arg_0]
.text:0040590A                 mov     ebp, [esi+eax*8]
.text:0040590D                 mov     edi, [esi+eax*8+4]
.text:00405911                 mov     esi, [esp+2Ch+arg_C]
.text:00405915                 test    esi, esi
.text:00405917                 jz      loc_4059E7
.text:0040591D
.text:0040591D loc_40591D:                             ; CODE XREF: sub_405860+18C↓j
.text:0040591D                 call    _errno
.text:00405922                 mov     ebx, [eax]
.text:00405924                 mov     [esp+2Ch+var_18], esi ; int
.text:00405928                 mov     ecx, [esi]
.text:0040592A                 mov     [esp+2Ch+Block], edi ; int
.text:0040592D                 mov     edx, [esp+2Ch+arg_8]
.text:00405931                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405935                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405939                 mov     ecx, [esp+2Ch+arg_4]
.text:0040593D                 mov     [esp+2Ch+var_20], edx ; int
.text:00405941                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405945                 call    sub_404720
.text:0040594A                 mov     esi, eax
.text:0040594C                 call    _errno
.text:00405951                 mov     [eax], ebx
.text:00405953                 cmp     ebp, esi
.text:00405955                 ja      short loc_4059CB
.text:00405957                 lea     ebp, [esi+1]
.text:0040595A                 mov     ebx, off_40704C
.text:00405960                 cmp     edi, offset unk_408080
.text:00405966                 mov     esi, [esp+2Ch+arg_0]
.text:0040596A                 mov     [ebx+esi*8], ebp
.text:0040596D                 jz      short loc_40597D
.text:0040596F                 mov     [esp+2Ch+Block], edi ; Block
.text:00405972                 call    free
.text:00405977                 mov     ebx, off_40704C
.text:0040597D
.text:0040597D loc_40597D:                             ; CODE XREF: sub_405860+10D↑j
.text:0040597D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405980                 call    sub_405AD0
.text:00405985                 mov     esi, [esp+2Ch+arg_C]
.text:00405989                 mov     edi, eax
.text:0040598B                 mov     eax, [esp+2Ch+arg_0]
.text:0040598F                 test    esi, esi
.text:00405991                 mov     [ebx+eax*8+4], edi
.text:00405995                 jz      short loc_4059E0
.text:00405997
.text:00405997 loc_405997:                             ; CODE XREF: sub_405860+185↓j
.text:00405997                 call    _errno
.text:0040599C                 mov     ebx, [eax]
.text:0040599E                 mov     [esp+2Ch+var_18], esi ; int
.text:004059A2                 mov     ecx, [esi]
.text:004059A4                 mov     [esp+2Ch+Block], edi ; int
.text:004059A7                 mov     edx, [esp+2Ch+arg_8]
.text:004059AB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004059AF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004059B3                 mov     ecx, [esp+2Ch+arg_4]
.text:004059B7                 mov     [esp+2Ch+var_20], edx ; int
.text:004059BB                 mov     [esp+2Ch+Str], ecx ; Str
.text:004059BF                 call    sub_404720
.text:004059C4                 call    _errno
.text:004059C9                 mov     [eax], ebx
.text:004059CB
.text:004059CB loc_4059CB:                             ; CODE XREF: sub_405860+F5↑j
.text:004059CB                 call    _errno
.text:004059D0                 mov     ebp, [esp+2Ch+var_14]
.text:004059D4                 mov     [eax], ebp
.text:004059D6                 add     esp, 1Ch
.text:004059D9                 mov     eax, edi
.text:004059DB                 pop     ebx
.text:004059DC                 pop     esi
.text:004059DD                 pop     edi
.text:004059DE                 pop     ebp
.text:004059DF                 retn
.text:004059E0 ; ---------------------------------------------------------------------------
.text:004059E0
.text:004059E0 loc_4059E0:                             ; CODE XREF: sub_405860+135↑j
.text:004059E0                 mov     esi, offset dword_408180
.text:004059E5                 jmp     short loc_405997
.text:004059E7 ; ---------------------------------------------------------------------------
.text:004059E7
.text:004059E7 loc_4059E7:                             ; CODE XREF: sub_405860+B7↑j
.text:004059E7                 mov     esi, offset dword_408180
.text:004059EC                 jmp     loc_40591D
.text:004059F1 ; ---------------------------------------------------------------------------
.text:004059F1
.text:004059F1 loc_4059F1:                             ; CODE XREF: sub_405860+45↑j
.text:004059F1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004059F8                 call    sub_405AD0
.text:004059FD                 mov     off_40704C, eax
.text:00405A02                 mov     edi, dword_407044
.text:00405A08                 mov     ebx, eax
.text:00405A0A                 mov     ecx, off_407048
.text:00405A10                 mov     [eax], edi
.text:00405A12                 mov     [eax+4], ecx
.text:00405A15                 jmp     loc_4058AB
.text:00405A1A ; ---------------------------------------------------------------------------
.text:00405A1A
.text:00405A1A loc_405A1A:                             ; CODE XREF: sub_405860+18↑j
.text:00405A1A                 call    abort
.text:00405A1F ; ---------------------------------------------------------------------------
.text:00405A1F
.text:00405A1F loc_405A1F:                             ; CODE XREF: sub_405860+33↑j
.text:00405A1F                 call    sub_405A50
.text:00405A1F sub_405860      endp
.text:00405A1F
.text:00405A1F ; ---------------------------------------------------------------------------
.text:00405A24                 align 10h
.text:00405A30
.text:00405A30 loc_405A30:                             ; DATA XREF: sub_405A50+3↓o
.text:00405A30                 insd
.text:00405A31                 db      65h
.text:00405A31                 insd
.text:00405A33                 outsd
.text:00405A34                 jb      short near ptr loc_405AAE+1
.text:00405A36                 and     [ebp+78h], ah
.text:00405A39                 push    74737561h
.text:00405A3E
.text:00405A3E loc_405A3E:                             ; DATA XREF: sub_405A50+10↓o
.text:00405A3E                 db      65h
.text:00405A3E                 add     fs:0B68D0073h, ah
.text:00405A3E ; ---------------------------------------------------------------------------
.text:00405A46                 dw 0
.text:00405A48                 align 10h
.text:00405A50
.text:00405A50 ; =============== S U B R O U T I N E =======================================
.text:00405A50
.text:00405A50 ; Attributes: noreturn
.text:00405A50
.text:00405A50 sub_405A50      proc near               ; CODE XREF: sub_4045B0:loc_4045CF↑p
.text:00405A50                                         ; sub_405860:loc_405A1F↑p ...
.text:00405A50
.text:00405A50 Code            = dword ptr -1Ch
.text:00405A50 ErrorMessage    = dword ptr -18h
.text:00405A50 var_14          = dword ptr -14h
.text:00405A50 var_10          = byte ptr -10h
.text:00405A50
.text:00405A50                 sub     esp, 1Ch
.text:00405A53                 mov     [esp+1Ch+Code], offset loc_405A30
.text:00405A5A                 call    ds:libintl_gettext
.text:00405A60                 mov     [esp+1Ch+var_14], (offset loc_405A3E+3) ; char *
.text:00405A68                 mov     edx, dword_407030
.text:00405A6E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405A76                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00405A7A                 mov     [esp+1Ch+Code], edx ; Code
.text:00405A7D                 call    sub_405DB0
.text:00405A82                 call    abort
.text:00405A82 sub_405A50      endp
.text:00405A82
.text:00405A82 ; ---------------------------------------------------------------------------
.text:00405A87                 align 10h
.text:00405A90
.text:00405A90 ; =============== S U B R O U T I N E =======================================
.text:00405A90
.text:00405A90
.text:00405A90 sub_405A90      proc near
.text:00405A90
.text:00405A90 Size            = dword ptr -0Ch
.text:00405A90 var_4           = dword ptr -4
.text:00405A90 arg_0           = dword ptr  4
.text:00405A90 arg_4           = dword ptr  8
.text:00405A90
.text:00405A90                 sub     esp, 0Ch
.text:00405A93                 xor     edx, edx
.text:00405A95                 mov     ecx, [esp+0Ch+arg_4]
.text:00405A99                 mov     [esp+0Ch+var_4], ebx
.text:00405A9D                 mov     eax, 0FFFFFFFFh
.text:00405AA2                 mov     ebx, [esp+0Ch+arg_0]
.text:00405AA6                 div     ecx
.text:00405AA8                 cmp     eax, ebx
.text:00405AAA                 jb      short loc_405AC9
.text:00405AAC                 mov     edx, ebx
.text:00405AAE
.text:00405AAE loc_405AAE:                             ; CODE XREF: .text:00405A34↑j
.text:00405AAE                 imul    edx, ecx
.text:00405AB1                 mov     [esp+0Ch+Size], edx ; Size
.text:00405AB4                 call    malloc
.text:00405AB9                 test    eax, eax
.text:00405ABB                 jz      short loc_405AC5
.text:00405ABD
.text:00405ABD loc_405ABD:                             ; CODE XREF: sub_405A90+37↓j
.text:00405ABD                 mov     ebx, [esp+0Ch+var_4]
.text:00405AC1                 add     esp, 0Ch
.text:00405AC4                 retn
.text:00405AC5 ; ---------------------------------------------------------------------------
.text:00405AC5
.text:00405AC5 loc_405AC5:                             ; CODE XREF: sub_405A90+2B↑j
.text:00405AC5                 test    ebx, ebx
.text:00405AC7                 jz      short loc_405ABD
.text:00405AC9
.text:00405AC9 loc_405AC9:                             ; CODE XREF: sub_405A90+1A↑j
.text:00405AC9                 call    sub_405A50
.text:00405AC9 sub_405A90      endp
.text:00405AC9
.text:00405AC9 ; ---------------------------------------------------------------------------
.text:00405ACE                 align 10h
.text:00405AD0
.text:00405AD0 ; =============== S U B R O U T I N E =======================================
.text:00405AD0
.text:00405AD0
.text:00405AD0 ; int __cdecl sub_405AD0(size_t)
.text:00405AD0 sub_405AD0      proc near               ; CODE XREF: .text:00405199↑p
.text:00405AD0                                         ; .text:00405376↑p ...
.text:00405AD0
.text:00405AD0 Size            = dword ptr -0Ch
.text:00405AD0 var_4           = dword ptr -4
.text:00405AD0 arg_0           = dword ptr  4
.text:00405AD0
.text:00405AD0                 sub     esp, 0Ch
.text:00405AD3                 mov     [esp+0Ch+var_4], ebx
.text:00405AD7                 mov     ebx, [esp+0Ch+arg_0]
.text:00405ADB                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405ADE                 call    malloc
.text:00405AE3                 test    eax, eax
.text:00405AE5                 jz      short loc_405AF0
.text:00405AE7
.text:00405AE7 loc_405AE7:                             ; CODE XREF: sub_405AD0+22↓j
.text:00405AE7                 mov     ebx, [esp+0Ch+var_4]
.text:00405AEB                 add     esp, 0Ch
.text:00405AEE                 retn
.text:00405AEE ; ---------------------------------------------------------------------------
.text:00405AEF                 align 10h
.text:00405AF0
.text:00405AF0 loc_405AF0:                             ; CODE XREF: sub_405AD0+15↑j
.text:00405AF0                 test    ebx, ebx
.text:00405AF2                 jz      short loc_405AE7
.text:00405AF4                 call    sub_405A50
.text:00405AF4 sub_405AD0      endp
.text:00405AF4
.text:00405AF4 ; ---------------------------------------------------------------------------
.text:00405AF9                 align 10h
.text:00405B00                 sub     esp, 1Ch
.text:00405B03                 xor     edx, edx
.text:00405B05                 mov     eax, 0FFFFFFFFh
.text:00405B0A                 mov     [esp+14h], ebx
.text:00405B0E                 mov     ecx, [esp+20h]
.text:00405B12                 mov     ebx, [esp+28h]
.text:00405B16                 mov     [esp+18h], esi
.text:00405B1A                 mov     esi, [esp+24h]
.text:00405B1E                 div     ebx
.text:00405B20                 cmp     eax, esi
.text:00405B22                 jb      short loc_405B54
.text:00405B24                 mov     [esp], ecx
.text:00405B27                 mov     edx, esi
.text:00405B29                 imul    edx, ebx
.text:00405B2C                 mov     [esp+4], edx
.text:00405B30                 call    realloc
.text:00405B35                 test    eax, eax
.text:00405B37                 mov     ecx, eax
.text:00405B39                 jz      short loc_405B50
.text:00405B3B
.text:00405B3B loc_405B3B:                             ; CODE XREF: .text:00405B52↓j
.text:00405B3B                 mov     ebx, [esp+14h]
.text:00405B3F                 mov     eax, ecx
.text:00405B41                 mov     esi, [esp+18h]
.text:00405B45                 add     esp, 1Ch
.text:00405B48                 retn
.text:00405B48 ; ---------------------------------------------------------------------------
.text:00405B49                 align 10h
.text:00405B50
.text:00405B50 loc_405B50:                             ; CODE XREF: .text:00405B39↑j
.text:00405B50                 test    esi, esi
.text:00405B52                 jz      short loc_405B3B
.text:00405B54
.text:00405B54 loc_405B54:                             ; CODE XREF: .text:00405B22↑j
.text:00405B54                 call    sub_405A50
.text:00405B54 ; ---------------------------------------------------------------------------
.text:00405B59                 align 10h
.text:00405B60
.text:00405B60 ; =============== S U B R O U T I N E =======================================
.text:00405B60
.text:00405B60
.text:00405B60 ; int __cdecl sub_405B60(void *, size_t)
.text:00405B60 sub_405B60      proc near               ; CODE XREF: sub_405860+5B↑p
.text:00405B60
.text:00405B60 Block           = dword ptr -0Ch
.text:00405B60 Size            = dword ptr -8
.text:00405B60 var_4           = dword ptr -4
.text:00405B60 arg_0           = dword ptr  4
.text:00405B60 arg_4           = dword ptr  8
.text:00405B60
.text:00405B60                 sub     esp, 0Ch
.text:00405B63                 mov     edx, [esp+0Ch+arg_0]
.text:00405B67                 mov     [esp+0Ch+var_4], ebx
.text:00405B6B                 mov     ebx, [esp+0Ch+arg_4]
.text:00405B6F                 mov     [esp+0Ch+Block], edx ; Block
.text:00405B72                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405B76                 call    realloc
.text:00405B7B                 test    eax, eax
.text:00405B7D                 jz      short loc_405B87
.text:00405B7F
.text:00405B7F loc_405B7F:                             ; CODE XREF: sub_405B60+29↓j
.text:00405B7F                 mov     ebx, [esp+0Ch+var_4]
.text:00405B83                 add     esp, 0Ch
.text:00405B86                 retn
.text:00405B87 ; ---------------------------------------------------------------------------
.text:00405B87
.text:00405B87 loc_405B87:                             ; CODE XREF: sub_405B60+1D↑j
.text:00405B87                 test    ebx, ebx
.text:00405B89                 jz      short loc_405B7F
.text:00405B8B                 call    sub_405A50
.text:00405B8B sub_405B60      endp
.text:00405B8B
.text:00405B90 ; ---------------------------------------------------------------------------
.text:00405B90                 jmp     sub_405CE0
.text:00405B90 ; ---------------------------------------------------------------------------
.text:00405B95                 align 10h
.text:00405BA0                 sub     esp, 0Ch
.text:00405BA3                 mov     edx, [esp+14h]
.text:00405BA7                 mov     dword ptr [esp+8], 1
.text:00405BAF                 mov     [esp+4], edx
.text:00405BB3                 mov     edx, [esp+10h]
.text:00405BB7                 mov     [esp], edx
.text:00405BBA                 call    sub_405CE0
.text:00405BBF                 add     esp, 0Ch
.text:00405BC2                 retn
.text:00405BC2 ; ---------------------------------------------------------------------------
.text:00405BC3                 align 10h
.text:00405BD0                 sub     esp, 1Ch
.text:00405BD3                 mov     [esp+18h], ebx
.text:00405BD7                 mov     ebx, [esp+20h]
.text:00405BDB                 mov     [esp], ebx
.text:00405BDE                 call    malloc
.text:00405BE3                 test    eax, eax
.text:00405BE5                 jz      short loc_405C03
.text:00405BE7
.text:00405BE7 loc_405BE7:                             ; CODE XREF: .text:00405C05↓j
.text:00405BE7                 mov     [esp+8], ebx
.text:00405BEB                 mov     dword ptr [esp+4], 0
.text:00405BF3                 mov     [esp], eax
.text:00405BF6                 call    memset
.text:00405BFB                 mov     ebx, [esp+18h]
.text:00405BFF                 add     esp, 1Ch
.text:00405C02                 retn
.text:00405C03 ; ---------------------------------------------------------------------------
.text:00405C03
.text:00405C03 loc_405C03:                             ; CODE XREF: .text:00405BE5↑j
.text:00405C03                 test    ebx, ebx
.text:00405C05                 jz      short loc_405BE7
.text:00405C07                 call    sub_405A50
.text:00405C07 ; ---------------------------------------------------------------------------
.text:00405C0C                 align 10h
.text:00405C10                 sub     esp, 0Ch
.text:00405C13                 xor     edx, edx
.text:00405C15                 mov     ecx, [esp+14h]
.text:00405C19                 mov     [esp+8], ebx
.text:00405C1D                 mov     eax, 0FFFFFFFFh
.text:00405C22                 mov     ebx, [esp+10h]
.text:00405C26                 div     ecx
.text:00405C28                 cmp     eax, ebx
.text:00405C2A                 jb      short loc_405C48
.text:00405C2C                 mov     [esp+4], ecx
.text:00405C30                 mov     [esp], ebx
.text:00405C33                 call    calloc
.text:00405C38                 test    eax, eax
.text:00405C3A                 jz      short loc_405C44
.text:00405C3C
.text:00405C3C loc_405C3C:                             ; CODE XREF: .text:00405C46↓j
.text:00405C3C                 mov     ebx, [esp+8]
.text:00405C40                 add     esp, 0Ch
.text:00405C43                 retn
.text:00405C44 ; ---------------------------------------------------------------------------
.text:00405C44
.text:00405C44 loc_405C44:                             ; CODE XREF: .text:00405C3A↑j
.text:00405C44                 test    ebx, ebx
.text:00405C46                 jz      short loc_405C3C
.text:00405C48
.text:00405C48 loc_405C48:                             ; CODE XREF: .text:00405C2A↑j
.text:00405C48                 call    sub_405A50
.text:00405C48 ; ---------------------------------------------------------------------------
.text:00405C4D                 align 10h
.text:00405C50                 sub     esp, 1Ch
.text:00405C53                 mov     [esp+18h], ebx
.text:00405C57                 mov     ebx, [esp+24h]
.text:00405C5B                 mov     [esp], ebx
.text:00405C5E                 call    malloc
.text:00405C63                 test    eax, eax
.text:00405C65                 mov     edx, eax
.text:00405C67                 jz      short loc_405C85
.text:00405C69
.text:00405C69 loc_405C69:                             ; CODE XREF: .text:00405C87↓j
.text:00405C69                 mov     [esp+8], ebx
.text:00405C6D                 mov     ecx, [esp+20h]
.text:00405C71                 mov     [esp], edx
.text:00405C74                 mov     [esp+4], ecx
.text:00405C78                 call    memcpy
.text:00405C7D                 mov     ebx, [esp+18h]
.text:00405C81                 add     esp, 1Ch
.text:00405C84                 retn
.text:00405C85 ; ---------------------------------------------------------------------------
.text:00405C85
.text:00405C85 loc_405C85:                             ; CODE XREF: .text:00405C67↑j
.text:00405C85                 test    ebx, ebx
.text:00405C87                 jz      short loc_405C69
.text:00405C89                 call    sub_405A50
.text:00405C89 ; ---------------------------------------------------------------------------
.text:00405C8E                 align 10h
.text:00405C90                 sub     esp, 1Ch
.text:00405C93                 mov     [esp+18h], esi
.text:00405C97                 mov     esi, [esp+20h]
.text:00405C9B                 mov     [esp+14h], ebx
.text:00405C9F                 mov     [esp], esi
.text:00405CA2                 call    strlen
.text:00405CA7                 lea     ebx, [eax+1]
.text:00405CAA                 mov     [esp], ebx
.text:00405CAD                 call    malloc
.text:00405CB2                 test    eax, eax
.text:00405CB4                 jz      short loc_405CD2
.text:00405CB6
.text:00405CB6 loc_405CB6:                             ; CODE XREF: .text:00405CD4↓j
.text:00405CB6                 mov     [esp+8], ebx
.text:00405CBA                 mov     [esp+4], esi
.text:00405CBE                 mov     [esp], eax
.text:00405CC1                 call    memcpy
.text:00405CC6                 mov     ebx, [esp+14h]
.text:00405CCA                 mov     esi, [esp+18h]
.text:00405CCE                 add     esp, 1Ch
.text:00405CD1                 retn
.text:00405CD2 ; ---------------------------------------------------------------------------
.text:00405CD2
.text:00405CD2 loc_405CD2:                             ; CODE XREF: .text:00405CB4↑j
.text:00405CD2                 test    ebx, ebx
.text:00405CD4                 jz      short loc_405CB6
.text:00405CD6                 call    sub_405A50
.text:00405CD6 ; ---------------------------------------------------------------------------
.text:00405CDB                 align 10h
.text:00405CE0
.text:00405CE0 ; =============== S U B R O U T I N E =======================================
.text:00405CE0
.text:00405CE0
.text:00405CE0 ; int __cdecl sub_405CE0(void *, int, int)
.text:00405CE0 sub_405CE0      proc near               ; CODE XREF: .text:00405B90↑j
.text:00405CE0                                         ; .text:00405BBA↑p
.text:00405CE0
.text:00405CE0 Block           = dword ptr -1Ch
.text:00405CE0 Size            = dword ptr -18h
.text:00405CE0 var_C           = dword ptr -0Ch
.text:00405CE0 var_8           = dword ptr -8
.text:00405CE0 var_4           = dword ptr -4
.text:00405CE0 arg_0           = dword ptr  4
.text:00405CE0 arg_4           = dword ptr  8
.text:00405CE0 arg_8           = dword ptr  0Ch
.text:00405CE0
.text:00405CE0                 sub     esp, 1Ch
.text:00405CE3                 mov     [esp+1Ch+var_8], esi
.text:00405CE7                 mov     esi, [esp+1Ch+arg_0]
.text:00405CEB                 mov     [esp+1Ch+var_4], edi
.text:00405CEF                 mov     edi, [esp+1Ch+arg_4]
.text:00405CF3                 test    esi, esi
.text:00405CF5                 mov     [esp+1Ch+var_C], ebx
.text:00405CF9                 mov     ecx, [edi]
.text:00405CFB                 mov     ebx, [esp+1Ch+arg_8]
.text:00405CFF                 jz      short loc_405D40
.text:00405D01                 xor     edx, edx
.text:00405D03                 mov     eax, 7FFFFFFFh
.text:00405D08                 div     ebx
.text:00405D0A                 cmp     eax, ecx
.text:00405D0C                 jb      short loc_405D39
.text:00405D0E                 add     ecx, ecx
.text:00405D10
.text:00405D10 loc_405D10:                             ; CODE XREF: sub_405CE0+62↓j
.text:00405D10                                         ; sub_405CE0+71↓j ...
.text:00405D10                 mov     [edi], ecx
.text:00405D12                 imul    ebx, ecx
.text:00405D15                 mov     [esp+1Ch+Block], esi ; Block
.text:00405D18                 mov     [esp+1Ch+Size], ebx ; Size
.text:00405D1C                 call    realloc
.text:00405D21                 test    eax, eax
.text:00405D23                 jz      short loc_405D35
.text:00405D25
.text:00405D25 loc_405D25:                             ; CODE XREF: sub_405CE0+57↓j
.text:00405D25                 mov     ebx, [esp+1Ch+var_C]
.text:00405D29                 mov     esi, [esp+1Ch+var_8]
.text:00405D2D                 mov     edi, [esp+1Ch+var_4]
.text:00405D31                 add     esp, 1Ch
.text:00405D34                 retn
.text:00405D35 ; ---------------------------------------------------------------------------
.text:00405D35
.text:00405D35 loc_405D35:                             ; CODE XREF: sub_405CE0+43↑j
.text:00405D35                 test    ebx, ebx
.text:00405D37                 jz      short loc_405D25
.text:00405D39
.text:00405D39 loc_405D39:                             ; CODE XREF: sub_405CE0+2C↑j
.text:00405D39                 call    sub_405A50
.text:00405D39 ; ---------------------------------------------------------------------------
.text:00405D3E                 align 10h
.text:00405D40
.text:00405D40 loc_405D40:                             ; CODE XREF: sub_405CE0+1F↑j
.text:00405D40                 test    ecx, ecx
.text:00405D42                 jnz     short loc_405D10
.text:00405D44                 xor     edx, edx
.text:00405D46                 mov     eax, 40h ; '@'
.text:00405D4B                 div     ebx
.text:00405D4D                 test    eax, eax
.text:00405D4F                 mov     ecx, eax
.text:00405D51                 jnz     short loc_405D10
.text:00405D53                 mov     ecx, 1
.text:00405D58                 jmp     short loc_405D10
.text:00405D58 sub_405CE0      endp
.text:00405D58
.text:00405D58 ; ---------------------------------------------------------------------------
.text:00405D5A                 align 10h
.text:00405D60                 jmp     ds:libintl_bindtextdomain
.text:00405D60 ; ---------------------------------------------------------------------------
.text:00405D66                 align 10h
.text:00405D70                 jmp     ds:libintl_textdomain
.text:00405D70 ; ---------------------------------------------------------------------------
.text:00405D76                 align 10h
.text:00405D80                 jmp     ds:libintl_gettext
.text:00405D80 ; ---------------------------------------------------------------------------
.text:00405D86                 align 10h
.text:00405D90 ; const char aS_0[]
.text:00405D90 aS_0            db ': %s',0             ; DATA XREF: sub_405DB0+B8↓o
.text:00405D90                                         ; sub_405EB4+122↓o
.text:00405D95 aUnknownSystemE db 'Unknown system error',0
.text:00405D95                                         ; DATA XREF: sub_405DB0:loc_405E7D↓o
.text:00405D95                                         ; sub_405EB4:loc_405FEE↓o
.text:00405DAA ; const char aS_1[]
.text:00405DAA aS_1            db '%s: ',0             ; DATA XREF: sub_405DB0:loc_405E84↓o
.text:00405DAF                 align 10h
.text:00405DB0
.text:00405DB0 ; =============== S U B R O U T I N E =======================================
.text:00405DB0
.text:00405DB0
.text:00405DB0 ; int __cdecl sub_405DB0(int Code, int ErrorMessage, char *, char)
.text:00405DB0 sub_405DB0      proc near               ; CODE XREF: sub_401F10+2A2↑p
.text:00405DB0                                         ; sub_401F10+391↑p ...
.text:00405DB0
.text:00405DB0 Stream          = dword ptr -1Ch
.text:00405DB0 Format          = dword ptr -18h
.text:00405DB0 ArgList         = dword ptr -14h
.text:00405DB0 Code            = dword ptr  4
.text:00405DB0 ErrorMessage    = dword ptr  8
.text:00405DB0 arg_8           = dword ptr  0Ch
.text:00405DB0 arg_C           = byte ptr  10h
.text:00405DB0
.text:00405DB0                 push    esi
.text:00405DB1                 push    ebx
.text:00405DB2                 sub     esp, 14h
.text:00405DB5                 mov     edx, ds:_iob
.text:00405DBB                 mov     esi, [esp+1Ch+Code]
.text:00405DBF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405DC3                 add     edx, 20h ; ' '
.text:00405DC6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405DC9                 call    fflush
.text:00405DCE                 mov     eax, ds:dword_408200
.text:00405DD3                 test    eax, eax
.text:00405DD5                 jz      loc_405E84
.text:00405DDB                 call    eax ; dword_408200
.text:00405DDD
.text:00405DDD loc_405DDD:                             ; CODE XREF: sub_405DB0+F7↓j
.text:00405DDD                 lea     edx, [esp+1Ch+arg_C]
.text:00405DE1                 mov     ecx, [esp+1Ch+arg_8]
.text:00405DE5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405DE9                 mov     edx, ds:_iob
.text:00405DEF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405DF3                 add     edx, 40h ; '@'
.text:00405DF6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405DF9                 call    vfprintf
.text:00405DFE                 inc     ds:dword_408210
.text:00405E04                 test    ebx, ebx
.text:00405E06                 jnz     short loc_405E52
.text:00405E08
.text:00405E08 loc_405E08:                             ; CODE XREF: sub_405DB0+CB↓j
.text:00405E08                 mov     edx, ds:_iob
.text:00405E0E                 lea     ecx, [edx+40h]
.text:00405E11                 mov     ebx, [ecx+4]
.text:00405E14                 dec     ebx
.text:00405E15                 test    ebx, ebx
.text:00405E17                 mov     [ecx+4], ebx
.text:00405E1A                 js      short loc_405E40
.text:00405E1C                 mov     ecx, [edx+40h]
.text:00405E1F                 mov     byte ptr [ecx], 0Ah
.text:00405E22                 inc     dword ptr [edx+40h]
.text:00405E25
.text:00405E25 loc_405E25:                             ; CODE XREF: sub_405DB0+A0↓j
.text:00405E25                 mov     edx, ds:_iob
.text:00405E2B                 add     edx, 40h ; '@'
.text:00405E2E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405E31                 call    fflush
.text:00405E36                 test    esi, esi
.text:00405E38                 jnz     short loc_405EAC
.text:00405E3A                 add     esp, 14h
.text:00405E3D                 pop     ebx
.text:00405E3E                 pop     esi
.text:00405E3F                 retn
.text:00405E40 ; ---------------------------------------------------------------------------
.text:00405E40
.text:00405E40 loc_405E40:                             ; CODE XREF: sub_405DB0+6A↑j
.text:00405E40                 mov     [esp+1Ch+Format], ecx ; File
.text:00405E44                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00405E4B                 call    _flsbuf
.text:00405E50                 jmp     short loc_405E25
.text:00405E52 ; ---------------------------------------------------------------------------
.text:00405E52
.text:00405E52 loc_405E52:                             ; CODE XREF: sub_405DB0+56↑j
.text:00405E52                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405E55                 call    strerror
.text:00405E5A                 test    eax, eax
.text:00405E5C                 jz      short loc_405E7D
.text:00405E5E
.text:00405E5E loc_405E5E:                             ; CODE XREF: sub_405DB0+D2↓j
.text:00405E5E                 mov     [esp+1Ch+ArgList], eax
.text:00405E62                 mov     ebx, ds:_iob
.text:00405E68                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00405E70                 add     ebx, 40h ; '@'
.text:00405E73                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405E76                 call    fprintf
.text:00405E7B                 jmp     short loc_405E08
.text:00405E7D ; ---------------------------------------------------------------------------
.text:00405E7D
.text:00405E7D loc_405E7D:                             ; CODE XREF: sub_405DB0+AC↑j
.text:00405E7D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405E82                 jmp     short loc_405E5E
.text:00405E84 ; ---------------------------------------------------------------------------
.text:00405E84
.text:00405E84 loc_405E84:                             ; CODE XREF: sub_405DB0+25↑j
.text:00405E84                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:00405E8C                 mov     edx, ds:_iob
.text:00405E92                 mov     ecx, ds:dword_4081D0
.text:00405E98                 add     edx, 40h ; '@'
.text:00405E9B                 mov     [esp+1Ch+ArgList], ecx
.text:00405E9F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405EA2                 call    fprintf
.text:00405EA7                 jmp     loc_405DDD
.text:00405EAC ; ---------------------------------------------------------------------------
.text:00405EAC
.text:00405EAC loc_405EAC:                             ; CODE XREF: sub_405DB0+88↑j
.text:00405EAC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00405EAF                 call    exit
.text:00405EAF sub_405DB0      endp
.text:00405EAF
.text:00405EB4
.text:00405EB4 ; =============== S U B R O U T I N E =======================================
.text:00405EB4
.text:00405EB4
.text:00405EB4 ; int __cdecl sub_405EB4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405EB4 sub_405EB4      proc near               ; DATA XREF: sub_405EB4+77↓o
.text:00405EB4
.text:00405EB4 Stream          = dword ptr -28h
.text:00405EB4 Format          = dword ptr -24h
.text:00405EB4 ArgList         = dword ptr -20h
.text:00405EB4 var_1C          = dword ptr -1Ch
.text:00405EB4 Code            = dword ptr  8
.text:00405EB4 ErrorMessage    = dword ptr  0Ch
.text:00405EB4 Str2            = dword ptr  10h
.text:00405EB4 arg_10          = dword ptr  14h
.text:00405EB4 arg_14          = dword ptr  18h
.text:00405EB4 arg_18          = byte ptr  1Ch
.text:00405EB4
.text:00405EB4                 and     eax, 64253A73h
.text:00405EB9                 cmp     ah, [eax]
.text:00405EBB
.text:00405EBB loc_405EBB:                             ; DATA XREF: sub_405EB4:loc_405FF5↓o
.text:00405EBB                 add     ds:55003A73h, ah
.text:00405EC1                 push    edi
.text:00405EC2                 push    esi
.text:00405EC3                 push    ebx
.text:00405EC4                 sub     esp, 1Ch
.text:00405EC7                 mov     edx, ds:dword_408240
.text:00405ECD                 mov     ebp, [esp+28h+Code]
.text:00405ED1                 mov     edi, [esp+28h+ErrorMessage]
.text:00405ED5                 test    edx, edx
.text:00405ED7                 mov     ebx, [esp+28h+Str2]
.text:00405EDB                 mov     esi, [esp+28h+arg_10]
.text:00405EDF                 jz      short loc_405EF9
.text:00405EE1                 cmp     ds:dword_4081C0, esi
.text:00405EE7                 jz      loc_406020
.text:00405EED
.text:00405EED loc_405EED:                             ; CODE XREF: sub_405EB4+18D↓j
.text:00405EED                 mov     ds:Str1, ebx
.text:00405EF3                 mov     ds:dword_4081C0, esi
.text:00405EF9
.text:00405EF9 loc_405EF9:                             ; CODE XREF: sub_405EB4+2B↑j
.text:00405EF9                 mov     edx, ds:_iob
.text:00405EFF                 add     edx, 20h ; ' '
.text:00405F02                 mov     [esp+28h+Stream], edx ; Stream
.text:00405F05                 call    fflush
.text:00405F0A                 mov     eax, ds:dword_408200
.text:00405F0F                 test    eax, eax
.text:00405F11                 jz      loc_405FF5
.text:00405F17                 call    eax ; dword_408200
.text:00405F19
.text:00405F19 loc_405F19:                             ; CODE XREF: sub_405EB4+164↓j
.text:00405F19                 test    ebx, ebx
.text:00405F1B                 jz      short loc_405F3E
.text:00405F1D                 mov     [esp+28h+ArgList], ebx
.text:00405F21                 mov     ebx, ds:_iob
.text:00405F27                 mov     [esp+28h+var_1C], esi
.text:00405F2B                 mov     [esp+28h+Format], offset sub_405EB4 ; Format
.text:00405F33                 add     ebx, 40h ; '@'
.text:00405F36                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405F39                 call    fprintf
.text:00405F3E
.text:00405F3E loc_405F3E:                             ; CODE XREF: sub_405EB4+67↑j
.text:00405F3E                 mov     esi, ds:_iob
.text:00405F44                 lea     edx, [esp+28h+arg_18]
.text:00405F48                 mov     ecx, [esp+28h+arg_14]
.text:00405F4C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405F50                 add     esi, 40h ; '@'
.text:00405F53                 mov     [esp+28h+Format], ecx ; Format
.text:00405F57                 mov     [esp+28h+Stream], esi ; Stream
.text:00405F5A                 call    vfprintf
.text:00405F5F                 inc     ds:dword_408210
.text:00405F65                 test    edi, edi
.text:00405F67                 jnz     short loc_405FC0
.text:00405F69
.text:00405F69 loc_405F69:                             ; CODE XREF: sub_405EB4+135↓j
.text:00405F69                 mov     edx, ds:_iob
.text:00405F6F                 lea     ecx, [edx+40h]
.text:00405F72                 mov     ebx, [ecx+4]
.text:00405F75                 dec     ebx
.text:00405F76                 test    ebx, ebx
.text:00405F78                 mov     [ecx+4], ebx
.text:00405F7B                 js      short loc_405FA7
.text:00405F7D                 mov     esi, [edx+40h]
.text:00405F80                 mov     byte ptr [esi], 0Ah
.text:00405F83                 inc     dword ptr [edx+40h]
.text:00405F86
.text:00405F86 loc_405F86:                             ; CODE XREF: sub_405EB4+103↓j
.text:00405F86                 mov     ecx, ds:_iob
.text:00405F8C                 add     ecx, 40h ; '@'
.text:00405F8F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405F92                 call    fflush
.text:00405F97                 test    ebp, ebp
.text:00405F99                 jnz     loc_406046
.text:00405F9F
.text:00405F9F loc_405F9F:                             ; CODE XREF: sub_405EB4+173↓j
.text:00405F9F                                         ; sub_405EB4+187↓j
.text:00405F9F                 add     esp, 1Ch
.text:00405FA2                 pop     ebx
.text:00405FA3                 pop     esi
.text:00405FA4                 pop     edi
.text:00405FA5                 pop     ebp
.text:00405FA6                 retn
.text:00405FA7 ; ---------------------------------------------------------------------------
.text:00405FA7
.text:00405FA7 loc_405FA7:                             ; CODE XREF: sub_405EB4+C7↑j
.text:00405FA7                 mov     [esp+28h+Format], ecx ; File
.text:00405FAB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405FB2                 call    _flsbuf
.text:00405FB7                 jmp     short loc_405F86
.text:00405FB7 ; ---------------------------------------------------------------------------
.text:00405FB9                 align 10h
.text:00405FC0
.text:00405FC0 loc_405FC0:                             ; CODE XREF: sub_405EB4+B3↑j
.text:00405FC0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405FC3                 call    strerror
.text:00405FC8                 test    eax, eax
.text:00405FCA                 jz      short loc_405FEE
.text:00405FCC
.text:00405FCC loc_405FCC:                             ; CODE XREF: sub_405EB4+13F↓j
.text:00405FCC                 mov     [esp+28h+ArgList], eax
.text:00405FD0                 mov     edi, ds:_iob
.text:00405FD6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00405FDE                 add     edi, 40h ; '@'
.text:00405FE1                 mov     [esp+28h+Stream], edi ; Stream
.text:00405FE4                 call    fprintf
.text:00405FE9                 jmp     loc_405F69
.text:00405FEE ; ---------------------------------------------------------------------------
.text:00405FEE
.text:00405FEE loc_405FEE:                             ; CODE XREF: sub_405EB4+116↑j
.text:00405FEE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405FF3                 jmp     short loc_405FCC
.text:00405FF5 ; ---------------------------------------------------------------------------
.text:00405FF5
.text:00405FF5 loc_405FF5:                             ; CODE XREF: sub_405EB4+5D↑j
.text:00405FF5                 mov     [esp+28h+Format], (offset loc_405EBB+1) ; Format
.text:00405FFD                 mov     ecx, ds:_iob
.text:00406003                 mov     edx, ds:dword_4081D0
.text:00406009                 add     ecx, 40h ; '@'
.text:0040600C                 mov     [esp+28h+ArgList], edx
.text:00406010                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406013                 call    fprintf
.text:00406018                 jmp     loc_405F19
.text:00406018 ; ---------------------------------------------------------------------------
.text:0040601D                 align 10h
.text:00406020
.text:00406020 loc_406020:                             ; CODE XREF: sub_405EB4+33↑j
.text:00406020                 mov     eax, ds:Str1
.text:00406025                 cmp     ebx, eax
.text:00406027                 jz      loc_405F9F
.text:0040602D                 mov     [esp+28h+Format], ebx ; Str2
.text:00406031                 mov     [esp+28h+Stream], eax ; Str1
.text:00406034                 call    strcmp
.text:00406039                 test    eax, eax
.text:0040603B                 jz      loc_405F9F
.text:00406041                 jmp     loc_405EED
.text:00406046 ; ---------------------------------------------------------------------------
.text:00406046
.text:00406046 loc_406046:                             ; CODE XREF: sub_405EB4+E5↑j
.text:00406046                 mov     [esp+28h+Stream], ebp ; Code
.text:00406049                 call    exit
.text:00406049 sub_405EB4      endp ; sp-analysis failed
.text:00406049
.text:00406049 ; ---------------------------------------------------------------------------
.text:0040604E                 align 10h
.text:00406050
.text:00406050 ; =============== S U B R O U T I N E =======================================
.text:00406050
.text:00406050
.text:00406050 ; int __cdecl sub_406050(int, int, FILE *File)
.text:00406050 sub_406050      proc near               ; CODE XREF: sub_402730+6C↑p
.text:00406050
.text:00406050 Block           = dword ptr -2Ch
.text:00406050 Size            = dword ptr -28h
.text:00406050 var_18          = dword ptr -18h
.text:00406050 var_14          = dword ptr -14h
.text:00406050 arg_0           = dword ptr  4
.text:00406050 arg_4           = dword ptr  8
.text:00406050 File            = dword ptr  0Ch
.text:00406050
.text:00406050                 push    ebp
.text:00406051                 push    edi
.text:00406052                 push    esi
.text:00406053                 push    ebx
.text:00406054                 sub     esp, 1Ch
.text:00406057                 mov     eax, [esp+2Ch+arg_0]
.text:0040605B                 mov     edi, [esp+2Ch+File]
.text:0040605F                 test    eax, eax
.text:00406061                 jz      loc_4061AF
.text:00406067                 mov     eax, [esp+2Ch+arg_4]
.text:0040606B                 test    eax, eax
.text:0040606D                 jz      loc_4061AF
.text:00406073                 test    byte ptr [edi+0Ch], 20h
.text:00406077                 jnz     loc_4061A8
.text:0040607D                 mov     ecx, [esp+2Ch+arg_0]
.text:00406081                 mov     edx, [ecx]
.text:00406083                 test    edx, edx
.text:00406085                 jz      loc_406197
.text:0040608B                 mov     ebx, [esp+2Ch+arg_4]
.text:0040608F                 mov     eax, [ebx]
.text:00406091                 cmp     eax, 1
.text:00406094                 ja      short loc_4060CC
.text:00406096                 mov     [esp+2Ch+Size], 100h ; Size
.text:0040609E                 mov     [esp+2Ch+Block], edx ; Block
.text:004060A1                 call    realloc
.text:004060A6
.text:004060A6 loc_4060A6:                             ; CODE XREF: sub_406050+153↓j
.text:004060A6                 mov     ebp, eax
.text:004060A8                 test    ebp, ebp
.text:004060AA                 mov     eax, 0FFFFFFFFh
.text:004060AF                 jz      loc_40616D
.text:004060B5                 mov     edx, [esp+2Ch+arg_0]
.text:004060B9                 mov     eax, 100h
.text:004060BE                 mov     esi, [esp+2Ch+arg_4]
.text:004060C2                 mov     [edx], ebp
.text:004060C4                 mov     edx, ebp
.text:004060C6                 mov     dword ptr [esi], 100h
.text:004060CC
.text:004060CC loc_4060CC:                             ; CODE XREF: sub_406050+44↑j
.text:004060CC                 mov     [esp+2Ch+var_14], eax
.text:004060D0                 mov     ebp, edx
.text:004060D2                 mov     ebx, eax
.text:004060D4                 mov     esi, edx
.text:004060D6
.text:004060D6 loc_4060D6:                             ; CODE XREF: sub_406050+F2↓j
.text:004060D6                 dec     ebx
.text:004060D7                 test    ebx, ebx
.text:004060D9                 jle     short loc_406109
.text:004060DB                 nop
.text:004060DC                 lea     esi, [esi+0]
.text:004060E0
.text:004060E0 loc_4060E0:                             ; CODE XREF: sub_406050+B7↓j
.text:004060E0                 mov     ecx, [edi+4]
.text:004060E3                 dec     ecx
.text:004060E4                 test    ecx, ecx
.text:004060E6                 mov     [edi+4], ecx
.text:004060E9                 js      loc_406188
.text:004060EF                 mov     ecx, [edi]
.text:004060F1                 movzx   edx, byte ptr [ecx]
.text:004060F4                 inc     ecx
.text:004060F5                 mov     [edi], ecx
.text:004060F7
.text:004060F7 loc_4060F7:                             ; CODE XREF: sub_406050+142↓j
.text:004060F7                 cmp     edx, 0FFFFFFFFh
.text:004060FA                 jz      short loc_406144
.text:004060FC                 mov     [esi], dl
.text:004060FE                 inc     esi
.text:004060FF                 cmp     dl, 0Ah
.text:00406102                 jz      short loc_40617F
.text:00406104                 dec     ebx
.text:00406105                 test    ebx, ebx
.text:00406107                 jg      short loc_4060E0
.text:00406109
.text:00406109 loc_406109:                             ; CODE XREF: sub_406050+89↑j
.text:00406109                 mov     [esp+2Ch+Block], ebp ; Block
.text:0040610C                 mov     ebx, [esp+2Ch+var_14]
.text:00406110                 mov     eax, esi
.text:00406112                 sub     eax, ebp
.text:00406114                 mov     [esp+2Ch+var_18], eax
.text:00406118                 add     ebx, ebx
.text:0040611A                 mov     [esp+2Ch+var_14], ebx
.text:0040611E                 mov     [esp+2Ch+Size], ebx ; Size
.text:00406122                 call    realloc
.text:00406127                 test    eax, eax
.text:00406129                 mov     ebp, eax
.text:0040612B                 jz      short loc_406144
.text:0040612D                 mov     esi, [esp+2Ch+arg_4]
.text:00406131                 mov     edx, [esp+2Ch+var_18]
.text:00406135                 mov     ecx, [esp+2Ch+arg_0]
.text:00406139                 mov     [esi], ebx
.text:0040613B                 lea     esi, [edx+eax]
.text:0040613E                 sub     ebx, edx
.text:00406140                 mov     [ecx], eax
.text:00406142                 jmp     short loc_4060D6
.text:00406144 ; ---------------------------------------------------------------------------
.text:00406144
.text:00406144 loc_406144:                             ; CODE XREF: sub_406050+AA↑j
.text:00406144                                         ; sub_406050+DB↑j
.text:00406144                 mov     edi, [esp+2Ch+arg_0]
.text:00406148                 mov     eax, 0FFFFFFFFh
.text:0040614D                 mov     edx, [edi]
.text:0040614F                 cmp     esi, edx
.text:00406151                 jz      short loc_40616D
.text:00406153
.text:00406153 loc_406153:                             ; CODE XREF: sub_406050+136↓j
.text:00406153                 lea     ebx, [esi-2]
.text:00406156                 cmp     ebx, edx
.text:00406158                 jb      short loc_406160
.text:0040615A                 cmp     byte ptr [esi-2], 0Dh
.text:0040615E                 jz      short loc_406175
.text:00406160
.text:00406160 loc_406160:                             ; CODE XREF: sub_406050+108↑j
.text:00406160                                         ; sub_406050+12D↓j
.text:00406160                 mov     byte ptr [esi], 0
.text:00406163                 mov     eax, esi
.text:00406165                 mov     ecx, [esp+2Ch+arg_0]
.text:00406169                 mov     esi, [ecx]
.text:0040616B                 sub     eax, esi
.text:0040616D
.text:0040616D loc_40616D:                             ; CODE XREF: sub_406050+5F↑j
.text:0040616D                                         ; sub_406050+101↑j ...
.text:0040616D                 add     esp, 1Ch
.text:00406170                 pop     ebx
.text:00406171                 pop     esi
.text:00406172                 pop     edi
.text:00406173                 pop     ebp
.text:00406174                 retn
.text:00406175 ; ---------------------------------------------------------------------------
.text:00406175
.text:00406175 loc_406175:                             ; CODE XREF: sub_406050+10E↑j
.text:00406175                 movzx   edx, byte ptr [esi-1]
.text:00406179                 mov     [esi-2], dl
.text:0040617C                 dec     esi
.text:0040617D                 jmp     short loc_406160
.text:0040617F ; ---------------------------------------------------------------------------
.text:0040617F
.text:0040617F loc_40617F:                             ; CODE XREF: sub_406050+B2↑j
.text:0040617F                 mov     ebp, [esp+2Ch+arg_0]
.text:00406183                 mov     edx, [ebp+0]
.text:00406186                 jmp     short loc_406153
.text:00406188 ; ---------------------------------------------------------------------------
.text:00406188
.text:00406188 loc_406188:                             ; CODE XREF: sub_406050+99↑j
.text:00406188                 mov     [esp+2Ch+Block], edi ; File
.text:0040618B                 call    _filbuf
.text:00406190                 mov     edx, eax
.text:00406192                 jmp     loc_4060F7
.text:00406197 ; ---------------------------------------------------------------------------
.text:00406197
.text:00406197 loc_406197:                             ; CODE XREF: sub_406050+35↑j
.text:00406197                 mov     [esp+2Ch+Block], 100h ; Size
.text:0040619E                 call    malloc
.text:004061A3                 jmp     loc_4060A6
.text:004061A8 ; ---------------------------------------------------------------------------
.text:004061A8
.text:004061A8 loc_4061A8:                             ; CODE XREF: sub_406050+27↑j
.text:004061A8                                         ; sub_406050+16A↓j
.text:004061A8                 mov     eax, 0FFFFFFFFh
.text:004061AD                 jmp     short loc_40616D
.text:004061AF ; ---------------------------------------------------------------------------
.text:004061AF
.text:004061AF loc_4061AF:                             ; CODE XREF: sub_406050+11↑j
.text:004061AF                                         ; sub_406050+1D↑j
.text:004061AF                 call    _errno
.text:004061B4                 mov     dword ptr [eax], 16h
.text:004061BA                 jmp     short loc_4061A8
.text:004061BA sub_406050      endp
.text:004061BA
.text:004061BA ; ---------------------------------------------------------------------------
.text:004061BC                 align 10h
.text:004061C0
.text:004061C0 ; =============== S U B R O U T I N E =======================================
.text:004061C0
.text:004061C0
.text:004061C0 ; int __cdecl sub_4061C0(void *, int)
.text:004061C0 sub_4061C0      proc near               ; CODE XREF: sub_4045B0+12↑p
.text:004061C0
.text:004061C0 Size            = dword ptr -1Ch
.text:004061C0 Src             = dword ptr -18h
.text:004061C0 var_14          = dword ptr -14h
.text:004061C0 var_8           = dword ptr -8
.text:004061C0 var_4           = dword ptr -4
.text:004061C0 arg_0           = dword ptr  4
.text:004061C0 arg_4           = dword ptr  8
.text:004061C0
.text:004061C0                 sub     esp, 1Ch
.text:004061C3                 mov     edx, [esp+1Ch+arg_4]
.text:004061C7                 mov     [esp+1Ch+var_4], esi
.text:004061CB                 mov     esi, [esp+1Ch+arg_0]
.text:004061CF                 mov     [esp+1Ch+var_8], ebx
.text:004061D3                 mov     [esp+1Ch+Src], edx
.text:004061D7                 mov     [esp+1Ch+Size], esi
.text:004061DA                 call    sub_406220
.text:004061DF                 lea     edx, [eax+1]
.text:004061E2                 mov     ebx, eax
.text:004061E4                 mov     [esp+1Ch+Size], edx ; Size
.text:004061E7                 call    malloc
.text:004061EC                 xor     edx, edx
.text:004061EE                 test    eax, eax
.text:004061F0                 jz      short loc_406208
.text:004061F2                 mov     byte ptr [ebx+eax], 0
.text:004061F6                 mov     [esp+1Ch+var_14], ebx ; Size
.text:004061FA                 mov     [esp+1Ch+Src], esi ; Src
.text:004061FE                 mov     [esp+1Ch+Size], eax ; void *
.text:00406201                 call    memcpy
.text:00406206                 mov     edx, eax
.text:00406208
.text:00406208 loc_406208:                             ; CODE XREF: sub_4061C0+30↑j
.text:00406208                 mov     ebx, [esp+1Ch+var_8]
.text:0040620C                 mov     eax, edx
.text:0040620E                 mov     esi, [esp+1Ch+var_4]
.text:00406212                 add     esp, 1Ch
.text:00406215                 retn
.text:00406215 sub_4061C0      endp
.text:00406215
.text:00406215 ; ---------------------------------------------------------------------------
.text:00406216                 align 10h
.text:00406220
.text:00406220 ; =============== S U B R O U T I N E =======================================
.text:00406220
.text:00406220
.text:00406220 sub_406220      proc near               ; CODE XREF: sub_4061C0+1A↑p
.text:00406220
.text:00406220 arg_0           = dword ptr  4
.text:00406220 arg_4           = dword ptr  8
.text:00406220
.text:00406220                 push    esi
.text:00406221                 xor     edx, edx
.text:00406223                 push    ebx
.text:00406224                 mov     ecx, [esp+8+arg_4]
.text:00406228                 mov     esi, [esp+8+arg_0]
.text:0040622C                 test    ecx, ecx
.text:0040622E                 lea     ebx, [ecx+esi]
.text:00406231                 jz      short loc_4062A7
.text:00406233                 cmp     ebx, esi
.text:00406235                 mov     eax, esi
.text:00406237                 sbb     edx, edx
.text:00406239                 or      ebx, edx
.text:0040623B                 test    esi, 3
.text:00406241                 jz      short loc_40625A
.text:00406243                 lea     esi, [esi+0]
.text:00406249                 lea     edi, [edi+0]
.text:00406250
.text:00406250 loc_406250:                             ; CODE XREF: sub_406220+38↓j
.text:00406250                 cmp     byte ptr [eax], 0
.text:00406253                 jz      short loc_40629D
.text:00406255                 inc     eax
.text:00406256                 test    al, 3
.text:00406258                 jnz     short loc_406250
.text:0040625A
.text:0040625A loc_40625A:                             ; CODE XREF: sub_406220+21↑j
.text:0040625A                 cmp     eax, ebx
.text:0040625C                 mov     edx, eax
.text:0040625E                 jnb     short loc_40629D
.text:00406260
.text:00406260 loc_406260:                             ; CODE XREF: sub_406220+7B↓j
.text:00406260                 mov     eax, [edx]
.text:00406262                 add     edx, 4
.text:00406265                 sub     eax, 1010101h
.text:0040626A                 test    eax, 80808080h
.text:0040626F                 jz      short loc_406297
.text:00406271                 cmp     byte ptr [edx-4], 0
.text:00406275                 lea     ecx, [edx-4]
.text:00406278                 mov     eax, ecx
.text:0040627A                 jz      short loc_40629D
.text:0040627C                 cmp     byte ptr [ecx+1], 0
.text:00406280                 lea     eax, [edx-3]
.text:00406283                 jz      short loc_40629D
.text:00406285                 cmp     byte ptr [ecx+2], 0
.text:00406289                 lea     eax, [edx-2]
.text:0040628C                 jz      short loc_40629D
.text:0040628E                 cmp     byte ptr [ecx+3], 0
.text:00406292                 lea     eax, [edx-1]
.text:00406295                 jz      short loc_40629D
.text:00406297
.text:00406297 loc_406297:                             ; CODE XREF: sub_406220+4F↑j
.text:00406297                 cmp     edx, ebx
.text:00406299                 mov     eax, ebx
.text:0040629B                 jb      short loc_406260
.text:0040629D
.text:0040629D loc_40629D:                             ; CODE XREF: sub_406220+33↑j
.text:0040629D                                         ; sub_406220+3E↑j ...
.text:0040629D                 cmp     eax, ebx
.text:0040629F                 jbe     short loc_4062A3
.text:004062A1                 mov     eax, ebx
.text:004062A3
.text:004062A3 loc_4062A3:                             ; CODE XREF: sub_406220+7F↑j
.text:004062A3                 mov     edx, eax
.text:004062A5                 sub     edx, esi
.text:004062A7
.text:004062A7 loc_4062A7:                             ; CODE XREF: sub_406220+11↑j
.text:004062A7                 pop     ebx
.text:004062A8                 mov     eax, edx
.text:004062AA                 pop     esi
.text:004062AB                 retn
.text:004062AB sub_406220      endp
.text:004062AB
.text:004062AB ; ---------------------------------------------------------------------------
.text:004062AC                 align 10h
.text:004062B0
.text:004062B0 ; =============== S U B R O U T I N E =======================================
.text:004062B0
.text:004062B0 ; Attributes: bp-based frame
.text:004062B0
.text:004062B0 sub_4062B0      proc near               ; CODE XREF: sub_401F10+3E4↑p
.text:004062B0
.text:004062B0 arg_0           = dword ptr  8
.text:004062B0 arg_4           = dword ptr  0Ch
.text:004062B0 arg_8           = dword ptr  10h
.text:004062B0 arg_C           = dword ptr  14h
.text:004062B0 arg_10          = dword ptr  18h
.text:004062B0
.text:004062B0                 push    ebp
.text:004062B1                 mov     ebp, esp
.text:004062B3                 push    esi
.text:004062B4                 push    ebx
.text:004062B5                 mov     edx, [ebp+arg_8]
.text:004062B8                 mov     esi, [ebp+arg_0]
.text:004062BB                 mov     ecx, [ebp+arg_4]
.text:004062BE                 mov     ebx, [ebp+arg_C]
.text:004062C1                 test    edx, edx
.text:004062C3                 jnz     short loc_4062CA
.text:004062C5                 mov     edx, 8
.text:004062CA
.text:004062CA loc_4062CA:                             ; CODE XREF: sub_4062B0+13↑j
.text:004062CA                 test    ecx, ecx
.text:004062CC                 jnz     short loc_4062D3
.text:004062CE                 mov     ecx, 0FE8h
.text:004062D3
.text:004062D3 loc_4062D3:                             ; CODE XREF: sub_4062B0+1C↑j
.text:004062D3                 mov     eax, [ebp+arg_10]
.text:004062D6                 sub     esp, 0Ch
.text:004062D9                 mov     [esi+20h], eax
.text:004062DC                 mov     [esi+1Ch], ebx
.text:004062DF                 lea     eax, [edx-1]
.text:004062E2                 mov     [esi], ecx
.text:004062E4                 mov     [esi+18h], eax
.text:004062E7                 mov     al, [esi+28h]
.text:004062EA                 and     eax, 0FFFFFFFEh
.text:004062ED                 mov     [esi+28h], al
.text:004062F0                 push    ecx
.text:004062F1                 call    ebx
.text:004062F3                 mov     ebx, eax
.text:004062F5                 add     esp, 10h
.text:004062F8                 mov     [esi+4], eax
.text:004062FB                 test    eax, eax
.text:004062FD                 jz      short loc_406330
.text:004062FF
.text:004062FF loc_4062FF:                             ; CODE XREF: .text:00406336↓j
.text:004062FF                 lea     eax, [ebx+8]
.text:00406302                 mov     edx, [esi]
.text:00406304                 mov     [esi+8], eax
.text:00406307                 mov     [esi+0Ch], eax
.text:0040630A                 mov     eax, ebx
.text:0040630C                 add     eax, edx
.text:0040630E                 mov     [ebx], eax
.text:00406310                 mov     [esi+10h], eax
.text:00406313                 mov     dword ptr [ebx+4], 0
.text:0040631A                 and     byte ptr [esi+28h], 0F9h
.text:0040631E                 lea     esp, [ebp-8]
.text:00406321                 mov     eax, 1
.text:00406326                 pop     ebx
.text:00406327                 pop     esi
.text:00406328                 pop     ebp
.text:00406329                 retn
.text:00406329 ; ---------------------------------------------------------------------------
.text:0040632A                 align 10h
.text:00406330
.text:00406330 loc_406330:                             ; CODE XREF: sub_4062B0+4D↑j
.text:00406330                 call    off_407050
.text:00406330 sub_4062B0      endp
.text:00406330
.text:00406336 ; ---------------------------------------------------------------------------
.text:00406336                 jmp     short loc_4062FF
.text:00406336 ; ---------------------------------------------------------------------------
.text:00406338                 align 10h
.text:00406340                 push    ebp
.text:00406341                 mov     ebp, esp
.text:00406343                 push    edi
.text:00406344                 push    esi
.text:00406345                 push    ebx
.text:00406346                 sub     esp, 0Ch
.text:00406349                 mov     edx, [ebp+10h]
.text:0040634C                 mov     esi, [ebp+8]
.text:0040634F                 mov     ecx, [ebp+0Ch]
.text:00406352                 mov     ebx, [ebp+14h]
.text:00406355                 mov     edi, [ebp+1Ch]
.text:00406358                 test    edx, edx
.text:0040635A                 jnz     short loc_406361
.text:0040635C                 mov     edx, 8
.text:00406361
.text:00406361 loc_406361:                             ; CODE XREF: .text:0040635A↑j
.text:00406361                 test    ecx, ecx
.text:00406363                 jnz     short loc_40636A
.text:00406365                 mov     ecx, 0FE8h
.text:0040636A
.text:0040636A loc_40636A:                             ; CODE XREF: .text:00406363↑j
.text:0040636A                 mov     eax, [ebp+18h]
.text:0040636D                 mov     [esi+1Ch], ebx
.text:00406370                 mov     [esi+20h], eax
.text:00406373                 mov     [esi], ecx
.text:00406375                 lea     eax, [edx-1]
.text:00406378                 mov     [esi+24h], edi
.text:0040637B                 mov     [esi+18h], eax
.text:0040637E                 mov     al, [esi+28h]
.text:00406381                 or      eax, 1
.text:00406384                 mov     [esi+28h], al
.text:00406387                 and     eax, 1
.text:0040638A                 jz      short loc_4063D8
.text:0040638C                 push    eax
.text:0040638D                 push    eax
.text:0040638E                 push    ecx
.text:0040638F                 push    edi
.text:00406390
.text:00406390 loc_406390:                             ; CODE XREF: .text:004063DC↓j
.text:00406390                 call    ebx
.text:00406392                 mov     ebx, eax
.text:00406394                 add     esp, 10h
.text:00406397                 mov     [esi+4], eax
.text:0040639A                 test    eax, eax
.text:0040639C                 jz      short loc_4063D0
.text:0040639E
.text:0040639E loc_40639E:                             ; CODE XREF: .text:004063D6↓j
.text:0040639E                 lea     eax, [ebx+8]
.text:004063A1                 mov     ecx, [esi]
.text:004063A3                 mov     [esi+8], eax
.text:004063A6                 mov     [esi+0Ch], eax
.text:004063A9                 mov     eax, ebx
.text:004063AB                 add     eax, ecx
.text:004063AD                 mov     [ebx], eax
.text:004063AF                 mov     [esi+10h], eax
.text:004063B2                 mov     dword ptr [ebx+4], 0
.text:004063B9                 and     byte ptr [esi+28h], 0F9h
.text:004063BD                 lea     esp, [ebp-0Ch]
.text:004063C0                 mov     eax, 1
.text:004063C5                 pop     ebx
.text:004063C6                 pop     esi
.text:004063C7                 pop     edi
.text:004063C8                 pop     ebp
.text:004063C9                 retn
.text:004063C9 ; ---------------------------------------------------------------------------
.text:004063CA                 align 10h
.text:004063D0
.text:004063D0 loc_4063D0:                             ; CODE XREF: .text:0040639C↑j
.text:004063D0                 call    off_407050
.text:004063D6 ; ---------------------------------------------------------------------------
.text:004063D6                 jmp     short loc_40639E
.text:004063D8 ; ---------------------------------------------------------------------------
.text:004063D8
.text:004063D8 loc_4063D8:                             ; CODE XREF: .text:0040638A↑j
.text:004063D8                 sub     esp, 0Ch
.text:004063DB                 push    ecx
.text:004063DC                 jmp     short loc_406390
.text:004063DC ; ---------------------------------------------------------------------------
.text:004063DE                 align 10h
.text:004063E0
.text:004063E0 ; =============== S U B R O U T I N E =======================================
.text:004063E0
.text:004063E0 ; Attributes: bp-based frame
.text:004063E0
.text:004063E0 sub_4063E0      proc near               ; CODE XREF: sub_402730+2F3↑p
.text:004063E0                                         ; sub_402730+30F↑p ...
.text:004063E0
.text:004063E0 var_14          = dword ptr -14h
.text:004063E0 var_10          = dword ptr -10h
.text:004063E0 arg_0           = dword ptr  8
.text:004063E0 arg_4           = dword ptr  0Ch
.text:004063E0
.text:004063E0                 push    ebp
.text:004063E1                 mov     ebp, esp
.text:004063E3                 push    edi
.text:004063E4                 push    esi
.text:004063E5                 push    ebx
.text:004063E6                 sub     esp, 0Ch
.text:004063E9                 mov     esi, [ebp+arg_0]
.text:004063EC                 mov     ebx, [ebp+arg_4]
.text:004063EF                 mov     eax, [esi+4]
.text:004063F2                 mov     edi, [esi+0Ch]
.text:004063F5                 mov     [ebp+var_10], eax
.text:004063F8                 mov     eax, [esi+8]
.text:004063FB                 sub     edi, eax
.text:004063FD                 mov     edx, edi
.text:004063FF                 mov     eax, edi
.text:00406401                 sar     eax, 3
.text:00406404                 add     edx, ebx
.text:00406406                 lea     eax, [eax+edx+64h]
.text:0040640A                 mov     [ebp+var_14], eax
.text:0040640D                 mov     eax, [esi]
.text:0040640F                 cmp     [ebp+var_14], eax
.text:00406412                 jge     short loc_406417
.text:00406414                 mov     [ebp+var_14], eax
.text:00406417
.text:00406417 loc_406417:                             ; CODE XREF: sub_4063E0+32↑j
.text:00406417                 test    byte ptr [esi+28h], 1
.text:0040641B                 jz      loc_4064FE
.text:00406421                 mov     edx, [ebp+var_14]
.text:00406424                 push    ecx
.text:00406425                 push    ecx
.text:00406426                 push    edx
.text:00406427                 mov     eax, [esi+24h]
.text:0040642A                 push    eax
.text:0040642B
.text:0040642B loc_40642B:                             ; CODE XREF: sub_4063E0+125↓j
.text:0040642B                 call    dword ptr [esi+1Ch]
.text:0040642E                 mov     ebx, eax
.text:00406430                 add     esp, 10h
.text:00406433                 test    eax, eax
.text:00406435                 jz      loc_4064F3
.text:0040643B
.text:0040643B loc_40643B:                             ; CODE XREF: sub_4063E0+119↓j
.text:0040643B                 mov     edx, [ebp+var_10]
.text:0040643E                 mov     [esi+4], ebx
.text:00406441                 mov     [ebx+4], edx
.text:00406444                 mov     edx, [ebp+var_14]
.text:00406447                 lea     eax, [edx+ebx]
.text:0040644A                 mov     [esi+10h], eax
.text:0040644D                 mov     [ebx], eax
.text:0040644F                 mov     eax, [esi+18h]
.text:00406452                 inc     eax
.text:00406453                 cmp     eax, 7
.text:00406456                 jle     loc_4064EC
.text:0040645C                 mov     eax, edi
.text:0040645E                 shr     eax, 2
.text:00406461                 mov     edx, eax
.text:00406463                 dec     edx
.text:00406464                 js      loc_4064E7
.text:0040646A                 mov     ecx, [esi+8]
.text:0040646D                 lea     esi, [esi+0]
.text:00406470
.text:00406470 loc_406470:                             ; CODE XREF: sub_4063E0+98↓j
.text:00406470                 mov     eax, [ecx+edx*4]
.text:00406473                 mov     [ebx+edx*4+8], eax
.text:00406477                 dec     edx
.text:00406478                 jns     short loc_406470
.text:0040647A
.text:0040647A loc_40647A:                             ; CODE XREF: sub_4063E0+10A↓j
.text:0040647A                 mov     eax, edi
.text:0040647C                 and     eax, 0FFFFFFFCh
.text:0040647F
.text:0040647F loc_40647F:                             ; CODE XREF: sub_4063E0+111↓j
.text:0040647F                 mov     edx, eax
.text:00406481                 cmp     eax, edi
.text:00406483                 jge     short loc_406499
.text:00406485
.text:00406485 loc_406485:                             ; CODE XREF: sub_4063E0+B4↓j
.text:00406485                 mov     al, [edx+ecx]
.text:00406488                 mov     [ebx+edx+8], al
.text:0040648C                 inc     edx
.text:0040648D                 cmp     edx, edi
.text:0040648F                 jge     short loc_406496
.text:00406491                 mov     ecx, [esi+8]
.text:00406494                 jmp     short loc_406485
.text:00406496 ; ---------------------------------------------------------------------------
.text:00406496
.text:00406496 loc_406496:                             ; CODE XREF: sub_4063E0+AF↑j
.text:00406496                 mov     ecx, [esi+8]
.text:00406499
.text:00406499 loc_406499:                             ; CODE XREF: sub_4063E0+A3↑j
.text:00406499                 mov     eax, [ebp+var_10]
.text:0040649C                 add     eax, 8
.text:0040649F                 cmp     ecx, eax
.text:004064A1                 jz      short loc_4064BA
.text:004064A3
.text:004064A3 loc_4064A3:                             ; CODE XREF: sub_4063E0+DE↓j
.text:004064A3                                         ; sub_4063E0+FC↓j
.text:004064A3                 and     byte ptr [esi+28h], 0FDh
.text:004064A7                 lea     eax, [ebx+8]
.text:004064AA                 mov     [esi+8], eax
.text:004064AD                 add     eax, edi
.text:004064AF                 mov     [esi+0Ch], eax
.text:004064B2                 lea     esp, [ebp-0Ch]
.text:004064B5                 pop     ebx
.text:004064B6                 pop     esi
.text:004064B7                 pop     edi
.text:004064B8                 pop     ebp
.text:004064B9                 retn
.text:004064BA ; ---------------------------------------------------------------------------
.text:004064BA
.text:004064BA loc_4064BA:                             ; CODE XREF: sub_4063E0+C1↑j
.text:004064BA                 test    byte ptr [esi+28h], 2
.text:004064BE                 jnz     short loc_4064A3
.text:004064C0                 mov     edx, [ebp+var_10]
.text:004064C3                 mov     eax, [edx+4]
.text:004064C6                 mov     [ebx+4], eax
.text:004064C9                 test    byte ptr [esi+28h], 1
.text:004064CD                 jz      short loc_4064DE
.text:004064CF                 push    eax
.text:004064D0                 push    eax
.text:004064D1                 push    edx
.text:004064D2                 mov     eax, [esi+24h]
.text:004064D5                 push    eax
.text:004064D6
.text:004064D6 loc_4064D6:                             ; CODE XREF: sub_4063E0+105↓j
.text:004064D6                 call    dword ptr [esi+20h]
.text:004064D9                 add     esp, 10h
.text:004064DC                 jmp     short loc_4064A3
.text:004064DE ; ---------------------------------------------------------------------------
.text:004064DE
.text:004064DE loc_4064DE:                             ; CODE XREF: sub_4063E0+ED↑j
.text:004064DE                 sub     esp, 0Ch
.text:004064E1                 mov     eax, [ebp+var_10]
.text:004064E4                 push    eax
.text:004064E5                 jmp     short loc_4064D6
.text:004064E7 ; ---------------------------------------------------------------------------
.text:004064E7
.text:004064E7 loc_4064E7:                             ; CODE XREF: sub_4063E0+84↑j
.text:004064E7                 mov     ecx, [esi+8]
.text:004064EA                 jmp     short loc_40647A
.text:004064EC ; ---------------------------------------------------------------------------
.text:004064EC
.text:004064EC loc_4064EC:                             ; CODE XREF: sub_4063E0+76↑j
.text:004064EC                 xor     eax, eax
.text:004064EE                 mov     ecx, [esi+8]
.text:004064F1                 jmp     short loc_40647F
.text:004064F3 ; ---------------------------------------------------------------------------
.text:004064F3
.text:004064F3 loc_4064F3:                             ; CODE XREF: sub_4063E0+55↑j
.text:004064F3                 call    off_407050
.text:004064F9 ; ---------------------------------------------------------------------------
.text:004064F9                 jmp     loc_40643B
.text:004064FE ; ---------------------------------------------------------------------------
.text:004064FE
.text:004064FE loc_4064FE:                             ; CODE XREF: sub_4063E0+3B↑j
.text:004064FE                 sub     esp, 0Ch
.text:00406501                 mov     eax, [ebp+var_14]
.text:00406504                 push    eax
.text:00406505                 jmp     loc_40642B
.text:00406505 sub_4063E0      endp
.text:00406505
.text:00406505 ; ---------------------------------------------------------------------------
.text:0040650A                 align 10h
.text:00406510                 push    ebp
.text:00406511                 mov     ebp, esp
.text:00406513                 mov     eax, [ebp+8]
.text:00406516                 mov     edx, [ebp+0Ch]
.text:00406519                 mov     eax, [eax+4]
.text:0040651C                 test    eax, eax
.text:0040651E                 jz      short loc_406533
.text:00406520                 cmp     eax, edx
.text:00406522                 jb      short loc_40653F
.text:00406524
.text:00406524 loc_406524:                             ; CODE XREF: .text:0040652D↓j
.text:00406524                                         ; .text:00406531↓j ...
.text:00406524                 mov     eax, [eax+4]
.text:00406527                 test    eax, eax
.text:00406529                 jz      short loc_406533
.text:0040652B                 cmp     eax, edx
.text:0040652D                 jnb     short loc_406524
.text:0040652F                 cmp     [eax], edx
.text:00406531                 jb      short loc_406524
.text:00406533
.text:00406533 loc_406533:                             ; CODE XREF: .text:0040651E↑j
.text:00406533                                         ; .text:00406529↑j ...
.text:00406533                 test    eax, eax
.text:00406535                 pop     ebp
.text:00406536                 setnz   al
.text:00406539                 and     eax, 0FFh
.text:0040653E                 retn
.text:0040653F ; ---------------------------------------------------------------------------
.text:0040653F
.text:0040653F loc_40653F:                             ; CODE XREF: .text:00406522↑j
.text:0040653F                 cmp     [eax], edx
.text:00406541                 jb      short loc_406524
.text:00406543                 jmp     short loc_406533
.text:00406543 ; ---------------------------------------------------------------------------
.text:00406545                 align 10h
.text:00406550                 push    ebp
.text:00406551                 mov     ebp, esp
.text:00406553                 push    edi
.text:00406554                 push    esi
.text:00406555                 push    ebx
.text:00406556                 sub     esp, 0Ch
.text:00406559                 mov     ebx, [ebp+8]
.text:0040655C                 mov     edi, [ebp+0Ch]
.text:0040655F                 mov     edx, [ebx+4]
.text:00406562                 test    edx, edx
.text:00406564                 jz      short loc_4065AE
.text:00406566                 cmp     edx, edi
.text:00406568                 jb      short loc_4065BA
.text:0040656A                 lea     esi, [esi+0]
.text:00406570
.text:00406570 loc_406570:                             ; CODE XREF: .text:00406592↓j
.text:00406570                                         ; .text:00406596↓j ...
.text:00406570                 mov     esi, [edx+4]
.text:00406573                 test    byte ptr [ebx+28h], 1
.text:00406577                 jz      short loc_4065B4
.text:00406579                 push    eax
.text:0040657A                 push    eax
.text:0040657B                 push    edx
.text:0040657C                 mov     eax, [ebx+24h]
.text:0040657F                 push    eax
.text:00406580
.text:00406580 loc_406580:                             ; CODE XREF: .text:004065B8↓j
.text:00406580                 call    dword ptr [ebx+20h]
.text:00406583                 add     esp, 10h
.text:00406586                 mov     edx, esi
.text:00406588                 or      byte ptr [ebx+28h], 2
.text:0040658C                 test    esi, esi
.text:0040658E                 jz      short loc_4065AE
.text:00406590                 cmp     esi, edi
.text:00406592                 jnb     short loc_406570
.text:00406594                 cmp     [esi], edi
.text:00406596                 jb      short loc_406570
.text:00406598
.text:00406598 loc_406598:                             ; CODE XREF: .text:004065BE↓j
.text:00406598                 mov     [ebx+0Ch], edi
.text:0040659B                 mov     [ebx+8], edi
.text:0040659E                 mov     eax, [edx]
.text:004065A0                 mov     [ebx+4], edx
.text:004065A3                 mov     [ebx+10h], eax
.text:004065A6
.text:004065A6 loc_4065A6:                             ; CODE XREF: .text:004065B0↓j
.text:004065A6                 lea     esp, [ebp-0Ch]
.text:004065A9                 pop     ebx
.text:004065AA                 pop     esi
.text:004065AB                 pop     edi
.text:004065AC                 pop     ebp
.text:004065AD                 retn
.text:004065AE ; ---------------------------------------------------------------------------
.text:004065AE
.text:004065AE loc_4065AE:                             ; CODE XREF: .text:00406564↑j
.text:004065AE                                         ; .text:0040658E↑j
.text:004065AE                 test    edi, edi
.text:004065B0                 jz      short loc_4065A6
.text:004065B2                 jmp     short loc_4065C0
.text:004065B4 ; ---------------------------------------------------------------------------
.text:004065B4
.text:004065B4 loc_4065B4:                             ; CODE XREF: .text:00406577↑j
.text:004065B4                 sub     esp, 0Ch
.text:004065B7                 push    edx
.text:004065B8                 jmp     short loc_406580
.text:004065BA ; ---------------------------------------------------------------------------
.text:004065BA
.text:004065BA loc_4065BA:                             ; CODE XREF: .text:00406568↑j
.text:004065BA                 cmp     [edx], edi
.text:004065BC                 jb      short loc_406570
.text:004065BE                 jmp     short loc_406598
.text:004065C0 ; ---------------------------------------------------------------------------
.text:004065C0
.text:004065C0 loc_4065C0:                             ; CODE XREF: .text:004065B2↑j
.text:004065C0                 call    abort
.text:004065C0 ; ---------------------------------------------------------------------------
.text:004065C5                 align 10h
.text:004065D0                 push    ebp
.text:004065D1                 mov     ebp, esp
.text:004065D3                 push    edi
.text:004065D4                 push    esi
.text:004065D5                 push    ebx
.text:004065D6                 sub     esp, 0Ch
.text:004065D9                 mov     ebx, [ebp+8]
.text:004065DC                 mov     edi, [ebp+0Ch]
.text:004065DF                 mov     edx, [ebx+4]
.text:004065E2                 test    edx, edx
.text:004065E4                 jz      short loc_40662E
.text:004065E6                 cmp     edx, edi
.text:004065E8                 jb      short loc_40663A
.text:004065EA                 lea     esi, [esi+0]
.text:004065F0
.text:004065F0 loc_4065F0:                             ; CODE XREF: .text:00406612↓j
.text:004065F0                                         ; .text:00406616↓j ...
.text:004065F0                 mov     esi, [edx+4]
.text:004065F3                 test    byte ptr [ebx+28h], 1
.text:004065F7                 jz      short loc_406634
.text:004065F9                 push    eax
.text:004065FA                 push    eax
.text:004065FB                 push    edx
.text:004065FC                 mov     eax, [ebx+24h]
.text:004065FF                 push    eax
.text:00406600
.text:00406600 loc_406600:                             ; CODE XREF: .text:00406638↓j
.text:00406600                 call    dword ptr [ebx+20h]
.text:00406603                 add     esp, 10h
.text:00406606                 mov     edx, esi
.text:00406608                 or      byte ptr [ebx+28h], 2
.text:0040660C                 test    esi, esi
.text:0040660E                 jz      short loc_40662E
.text:00406610                 cmp     esi, edi
.text:00406612                 jnb     short loc_4065F0
.text:00406614                 cmp     [esi], edi
.text:00406616                 jb      short loc_4065F0
.text:00406618
.text:00406618 loc_406618:                             ; CODE XREF: .text:0040663E↓j
.text:00406618                 mov     [ebx+0Ch], edi
.text:0040661B                 mov     [ebx+8], edi
.text:0040661E                 mov     eax, [edx]
.text:00406620                 mov     [ebx+4], edx
.text:00406623                 mov     [ebx+10h], eax
.text:00406626
.text:00406626 loc_406626:                             ; CODE XREF: .text:00406630↓j
.text:00406626                 lea     esp, [ebp-0Ch]
.text:00406629                 pop     ebx
.text:0040662A                 pop     esi
.text:0040662B                 pop     edi
.text:0040662C                 pop     ebp
.text:0040662D                 retn
.text:0040662E ; ---------------------------------------------------------------------------
.text:0040662E
.text:0040662E loc_40662E:                             ; CODE XREF: .text:004065E4↑j
.text:0040662E                                         ; .text:0040660E↑j
.text:0040662E                 test    edi, edi
.text:00406630                 jz      short loc_406626
.text:00406632                 jmp     short loc_406640
.text:00406634 ; ---------------------------------------------------------------------------
.text:00406634
.text:00406634 loc_406634:                             ; CODE XREF: .text:004065F7↑j
.text:00406634                 sub     esp, 0Ch
.text:00406637                 push    edx
.text:00406638                 jmp     short loc_406600
.text:0040663A ; ---------------------------------------------------------------------------
.text:0040663A
.text:0040663A loc_40663A:                             ; CODE XREF: .text:004065E8↑j
.text:0040663A                 cmp     [edx], edi
.text:0040663C                 jb      short loc_4065F0
.text:0040663E                 jmp     short loc_406618
.text:00406640 ; ---------------------------------------------------------------------------
.text:00406640
.text:00406640 loc_406640:                             ; CODE XREF: .text:00406632↑j
.text:00406640                 call    abort
.text:00406640 ; ---------------------------------------------------------------------------
.text:00406645                 align 10h
.text:00406650                 push    ebp
.text:00406651                 xor     ecx, ecx
.text:00406653                 mov     ebp, esp
.text:00406655                 mov     eax, [ebp+8]
.text:00406658                 mov     edx, [eax+4]
.text:0040665B                 test    edx, edx
.text:0040665D                 jz      short loc_40666D
.text:0040665F                 nop
.text:00406660
.text:00406660 loc_406660:                             ; CODE XREF: .text:0040666B↓j
.text:00406660                 mov     eax, [edx]
.text:00406662                 sub     eax, edx
.text:00406664                 mov     edx, [edx+4]
.text:00406667                 add     ecx, eax
.text:00406669                 test    edx, edx
.text:0040666B                 jnz     short loc_406660
.text:0040666D
.text:0040666D loc_40666D:                             ; CODE XREF: .text:0040665D↑j
.text:0040666D                 mov     eax, ecx
.text:0040666F                 pop     ebp
.text:00406670                 retn
.text:00406670 ; ---------------------------------------------------------------------------
.text:00406671 aMemoryExhauste db 'memory exhausted',0Ah,0
.text:00406671                                         ; DATA XREF: sub_406690+12↓o
.text:00406683                 align 10h
.text:00406690
.text:00406690 ; =============== S U B R O U T I N E =======================================
.text:00406690
.text:00406690 ; Attributes: noreturn bp-based frame
.text:00406690
.text:00406690 sub_406690      proc near               ; CODE XREF: sub_4062B0:loc_406330↑p
.text:00406690                                         ; .text:loc_4063D0↑p ...
.text:00406690                 push    ebp
.text:00406691                 mov     ebp, esp
.text:00406693                 push    ecx
.text:00406694                 push    ecx
.text:00406695                 mov     eax, ds:_iob
.text:0040669A                 add     eax, 40h ; '@'
.text:0040669D                 push    eax             ; Stream
.text:0040669E                 push    11h             ; ElementCount
.text:004066A0                 push    1               ; ElementSize
.text:004066A2                 push    offset aMemoryExhauste ; "memory exhausted\n"
.text:004066A7                 call    fwrite
.text:004066AC                 mov     eax, Code
.text:004066B1                 pop     edx
.text:004066B2                 push    eax             ; Code
.text:004066B3                 call    exit
.text:004066B3 sub_406690      endp
.text:004066B3
.text:004066B3 ; ---------------------------------------------------------------------------
.text:004066B8                 align 10h
.text:004066C0
.text:004066C0 ; =============== S U B R O U T I N E =======================================
.text:004066C0
.text:004066C0 ; Attributes: thunk
.text:004066C0
.text:004066C0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004066C0 mbrtowc         proc near               ; CODE XREF: sub_404720+757↑p
.text:004066C0                 jmp     ds:__imp_mbrtowc
.text:004066C0 mbrtowc         endp
.text:004066C0
.text:004066C0 ; ---------------------------------------------------------------------------
.text:004066C6                 align 10h
.text:004066D0
.text:004066D0 ; =============== S U B R O U T I N E =======================================
.text:004066D0
.text:004066D0 ; Attributes: bp-based frame
.text:004066D0
.text:004066D0 sub_4066D0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004066D0                 push    ebp
.text:004066D1                 mov     ecx, offset unk_408000
.text:004066D6                 cmp     ecx, offset unk_408000
.text:004066DC                 mov     ebp, esp
.text:004066DE                 jnb     short loc_4066F6
.text:004066E0
.text:004066E0 loc_4066E0:                             ; CODE XREF: sub_4066D0+24↓j
.text:004066E0                 mov     edx, [ecx+4]
.text:004066E3                 mov     eax, [ecx]
.text:004066E5                 add     ecx, 8
.text:004066E8                 add     [edx+400000h], eax
.text:004066EE                 cmp     ecx, offset unk_408000
.text:004066F4                 jb      short loc_4066E0
.text:004066F6
.text:004066F6 loc_4066F6:                             ; CODE XREF: sub_4066D0+E↑j
.text:004066F6                 pop     ebp
.text:004066F7                 retn
.text:004066F7 sub_4066D0      endp
.text:004066F7
.text:004066F7 ; ---------------------------------------------------------------------------
.text:004066F8                 align 10h
.text:00406700
.text:00406700 ; =============== S U B R O U T I N E =======================================
.text:00406700
.text:00406700 ; Attributes: bp-based frame
.text:00406700
.text:00406700 sub_406700      proc near               ; CODE XREF: sub_401080+16↑p
.text:00406700                                         ; TopLevelExceptionFilter+D7↑p
.text:00406700                 push    ebp
.text:00406701                 mov     ebp, esp
.text:00406703                 fninit
.text:00406705                 pop     ebp
.text:00406706                 retn
.text:00406706 sub_406700      endp
.text:00406706
.text:00406706 ; ---------------------------------------------------------------------------
.text:00406707                 align 10h
.text:00406710
.text:00406710 ; =============== S U B R O U T I N E =======================================
.text:00406710
.text:00406710 ; Attributes: bp-based frame
.text:00406710
.text:00406710 ; void __cdecl sub_406710()
.text:00406710 sub_406710      proc near               ; DATA XREF: .text:loc_406759↓o
.text:00406710                                         ; sub_4067A0:loc_4067CE↓o
.text:00406710                 push    ebp
.text:00406711                 mov     ebp, esp
.text:00406713                 sub     esp, 8
.text:00406716                 mov     eax, off_407094
.text:0040671B                 mov     edx, [eax]
.text:0040671D                 test    edx, edx
.text:0040671F                 jnz     short loc_406725
.text:00406721
.text:00406721 loc_406721:                             ; CODE XREF: sub_406710+2C↓j
.text:00406721                 mov     esp, ebp
.text:00406723                 pop     ebp
.text:00406724                 retn
.text:00406725 ; ---------------------------------------------------------------------------
.text:00406725
.text:00406725 loc_406725:                             ; CODE XREF: sub_406710+F↑j
.text:00406725                                         ; sub_406710+2A↓j
.text:00406725                 call    dword ptr [eax]
.text:00406727                 mov     edx, off_407094
.text:0040672D                 mov     ecx, [edx+4]
.text:00406730                 lea     eax, [edx+4]
.text:00406733                 mov     off_407094, eax
.text:00406738                 test    ecx, ecx
.text:0040673A                 jnz     short loc_406725
.text:0040673C                 jmp     short loc_406721
.text:0040673C sub_406710      endp
.text:0040673C
.text:0040673C ; ---------------------------------------------------------------------------
.text:0040673E                 align 10h
.text:00406740                 push    ebp
.text:00406741                 mov     ebp, esp
.text:00406743                 sub     esp, 8
.text:00406746                 mov     [ebp-4], ebx
.text:00406749                 mov     eax, ds:dword_406AA0
.text:0040674E                 cmp     eax, 0FFFFFFFFh
.text:00406751                 jz      short loc_40677C
.text:00406753
.text:00406753 loc_406753:                             ; CODE XREF: .text:00406786↓j
.text:00406753                                         ; .text:00406799↓j
.text:00406753                 test    eax, eax
.text:00406755                 mov     ebx, eax
.text:00406757                 jnz     short loc_406770
.text:00406759
.text:00406759 loc_406759:                             ; CODE XREF: .text:0040677A↓j
.text:00406759                 mov     dword ptr [esp], offset sub_406710
.text:00406760                 call    sub_401040
.text:00406765                 mov     ebx, [ebp-4]
.text:00406768                 mov     esp, ebp
.text:0040676A                 pop     ebp
.text:0040676B                 retn
.text:0040676B ; ---------------------------------------------------------------------------
.text:0040676C                 align 10h
.text:00406770
.text:00406770 loc_406770:                             ; CODE XREF: .text:00406757↑j
.text:00406770                                         ; .text:00406778↓j
.text:00406770                 call    ds:dword_406AA0[ebx*4]
.text:00406777                 dec     ebx
.text:00406778                 jnz     short loc_406770
.text:0040677A                 jmp     short loc_406759
.text:0040677C ; ---------------------------------------------------------------------------
.text:0040677C
.text:0040677C loc_40677C:                             ; CODE XREF: .text:00406751↑j
.text:0040677C                 mov     ecx, ds:dword_406AA4
.text:00406782                 xor     eax, eax
.text:00406784                 test    ecx, ecx
.text:00406786                 jz      short loc_406753
.text:00406788                 mov     edx, offset dword_406AA0
.text:0040678D                 lea     esi, [esi+0]
.text:00406790
.text:00406790 loc_406790:                             ; CODE XREF: .text:00406797↓j
.text:00406790                 inc     eax
.text:00406791                 mov     ecx, [edx+eax*4+4]
.text:00406795                 test    ecx, ecx
.text:00406797                 jnz     short loc_406790
.text:00406799                 jmp     short loc_406753
.text:00406799 ; ---------------------------------------------------------------------------
.text:0040679B                 align 10h
.text:004067A0
.text:004067A0 ; =============== S U B R O U T I N E =======================================
.text:004067A0
.text:004067A0 ; Attributes: bp-based frame
.text:004067A0
.text:004067A0 sub_4067A0      proc near               ; CODE XREF: sub_401F10+16↑p
.text:004067A0
.text:004067A0 var_8           = dword ptr -8
.text:004067A0 var_4           = dword ptr -4
.text:004067A0
.text:004067A0                 push    ebp
.text:004067A1                 mov     ebp, esp
.text:004067A3                 sub     esp, 8
.text:004067A6                 mov     [ebp+var_4], ebx
.text:004067A9                 mov     edx, dword_407090
.text:004067AF                 test    edx, edx
.text:004067B1                 jnz     short loc_4067DA
.text:004067B3                 mov     eax, ds:dword_406AA0
.text:004067B8                 mov     edx, 1
.text:004067BD                 mov     dword_407090, edx
.text:004067C3                 cmp     eax, 0FFFFFFFFh
.text:004067C6                 jz      short loc_4067ED
.text:004067C8
.text:004067C8 loc_4067C8:                             ; CODE XREF: sub_4067A0+57↓j
.text:004067C8                                         ; sub_4067A0+69↓j
.text:004067C8                 test    eax, eax
.text:004067CA                 mov     ebx, eax
.text:004067CC                 jnz     short loc_4067E1
.text:004067CE
.text:004067CE loc_4067CE:                             ; CODE XREF: sub_4067A0+4B↓j
.text:004067CE                 mov     [esp+8+var_8], offset sub_406710 ; void (__cdecl *)()
.text:004067D5                 call    sub_401040
.text:004067DA
.text:004067DA loc_4067DA:                             ; CODE XREF: sub_4067A0+11↑j
.text:004067DA                 mov     ebx, [ebp+var_4]
.text:004067DD                 mov     esp, ebp
.text:004067DF                 pop     ebp
.text:004067E0                 retn
.text:004067E1 ; ---------------------------------------------------------------------------
.text:004067E1
.text:004067E1 loc_4067E1:                             ; CODE XREF: sub_4067A0+2C↑j
.text:004067E1                                         ; sub_4067A0+49↓j
.text:004067E1                 call    ds:dword_406AA0[ebx*4]
.text:004067E8                 dec     ebx
.text:004067E9                 jnz     short loc_4067E1
.text:004067EB                 jmp     short loc_4067CE
.text:004067ED ; ---------------------------------------------------------------------------
.text:004067ED
.text:004067ED loc_4067ED:                             ; CODE XREF: sub_4067A0+26↑j
.text:004067ED                 mov     ecx, ds:dword_406AA4
.text:004067F3                 xor     eax, eax
.text:004067F5                 test    ecx, ecx
.text:004067F7                 jz      short loc_4067C8
.text:004067F9                 mov     edx, offset dword_406AA0
.text:004067FE                 mov     esi, esi
.text:00406800
.text:00406800 loc_406800:                             ; CODE XREF: sub_4067A0+67↓j
.text:00406800                 inc     eax
.text:00406801                 mov     ebx, [edx+eax*4+4]
.text:00406805                 test    ebx, ebx
.text:00406807                 jnz     short loc_406800
.text:00406809                 jmp     short loc_4067C8
.text:00406809 sub_4067A0      endp
.text:00406809
.text:00406809 ; ---------------------------------------------------------------------------
.text:0040680B                 align 10h
.text:00406810
.text:00406810 ; =============== S U B R O U T I N E =======================================
.text:00406810
.text:00406810 ; Attributes: info_from_lumina
.text:00406810
.text:00406810 ; void *__cdecl _alloca(size_t Size)
.text:00406810 __alloca        proc near               ; CODE XREF: sub_401F10+11↑p
.text:00406810                 push    ecx
.text:00406811                 mov     ecx, esp
.text:00406813                 add     ecx, 8
.text:00406816
.text:00406816 loc_406816:                             ; CODE XREF: __alloca+1B↓j
.text:00406816                 cmp     eax, 1000h
.text:0040681B                 jb      short loc_40682D
.text:0040681D                 sub     ecx, 1000h
.text:00406823                 or      dword ptr [ecx], 0
.text:00406826                 sub     eax, 1000h
.text:0040682B                 jmp     short loc_406816
.text:0040682D ; ---------------------------------------------------------------------------
.text:0040682D
.text:0040682D loc_40682D:                             ; CODE XREF: __alloca+B↑j
.text:0040682D                 sub     ecx, eax
.text:0040682F                 or      dword ptr [ecx], 0
.text:00406832                 mov     eax, esp
.text:00406834                 mov     esp, ecx
.text:00406836                 mov     ecx, [eax]
.text:00406838                 mov     eax, [eax+4]
.text:0040683B                 jmp     eax
.text:0040683B __alloca        endp
.text:0040683B
.text:0040683B ; ---------------------------------------------------------------------------
.text:0040683D                 align 10h
.text:00406840                 jmp     ds:__set_app_type
.text:00406840 ; ---------------------------------------------------------------------------
.text:00406846                 align 10h
.text:00406850
.text:00406850 ; =============== S U B R O U T I N E =======================================
.text:00406850
.text:00406850 ; Attributes: thunk
.text:00406850
.text:00406850 ; void __cdecl cexit()
.text:00406850 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00406850                 jmp     ds:__imp__cexit
.text:00406850 _cexit          endp
.text:00406850
.text:00406850 ; ---------------------------------------------------------------------------
.text:00406856                 align 10h
.text:00406860
.text:00406860 ; =============== S U B R O U T I N E =======================================
.text:00406860
.text:00406860 ; Attributes: thunk
.text:00406860
.text:00406860 ; char ***__cdecl _p__environ()
.text:00406860 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00406860                 jmp     ds:__imp___p__environ
.text:00406860 __p__environ    endp
.text:00406860
.text:00406860 ; ---------------------------------------------------------------------------
.text:00406866                 align 10h
.text:00406870
.text:00406870 ; =============== S U B R O U T I N E =======================================
.text:00406870
.text:00406870 ; Attributes: thunk
.text:00406870
.text:00406870 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00406870 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00406870                                         ; TopLevelExceptionFilter+88↑p ...
.text:00406870
.text:00406870 Signal          = dword ptr  4
.text:00406870 Function        = dword ptr  8
.text:00406870
.text:00406870                 jmp     ds:__imp_signal
.text:00406870 signal          endp
.text:00406870
.text:00406870 ; ---------------------------------------------------------------------------
.text:00406876                 align 10h
.text:00406880
.text:00406880 ; =============== S U B R O U T I N E =======================================
.text:00406880
.text:00406880 ; Attributes: thunk
.text:00406880
.text:00406880 ; int *__cdecl _p__fmode()
.text:00406880 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00406880                 jmp     ds:__imp___p__fmode
.text:00406880 __p__fmode      endp
.text:00406880
.text:00406880 ; ---------------------------------------------------------------------------
.text:00406886                 align 10h
.text:00406890
.text:00406890 ; =============== S U B R O U T I N E =======================================
.text:00406890
.text:00406890 ; Attributes: thunk
.text:00406890
.text:00406890 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00406890 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00406890                                         ; sub_401080+90↑p ...
.text:00406890
.text:00406890 FileHandle      = dword ptr  4
.text:00406890 Mode            = dword ptr  8
.text:00406890
.text:00406890                 jmp     ds:__imp__setmode
.text:00406890 _setmode        endp
.text:00406890
.text:00406890 ; ---------------------------------------------------------------------------
.text:00406896                 align 10h
.text:004068A0
.text:004068A0 ; =============== S U B R O U T I N E =======================================
.text:004068A0
.text:004068A0 ; Attributes: thunk
.text:004068A0
.text:004068A0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004068A0                 jmp     ds:__imp___getmainargs
.text:004068A0 __getmainargs   endp
.text:004068A0
.text:004068A0 ; ---------------------------------------------------------------------------
.text:004068A6                 align 10h
.text:004068B0
.text:004068B0 ; =============== S U B R O U T I N E =======================================
.text:004068B0
.text:004068B0 ; Attributes: thunk
.text:004068B0
.text:004068B0 ; void *__cdecl malloc(size_t Size)
.text:004068B0 malloc          proc near               ; CODE XREF: sub_405A90+24↑p
.text:004068B0                                         ; sub_405AD0+E↑p ...
.text:004068B0
.text:004068B0 Size            = dword ptr  4
.text:004068B0
.text:004068B0                 jmp     ds:__imp_malloc
.text:004068B0 malloc          endp
.text:004068B0
.text:004068B0 ; ---------------------------------------------------------------------------
.text:004068B6                 align 10h
.text:004068C0
.text:004068C0 ; =============== S U B R O U T I N E =======================================
.text:004068C0
.text:004068C0 ; Attributes: thunk
.text:004068C0
.text:004068C0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:004068C0 fwrite          proc near               ; CODE XREF: sub_401F10+316↑p
.text:004068C0                                         ; sub_401F10+4EA↑p ...
.text:004068C0
.text:004068C0 Buffer          = dword ptr  4
.text:004068C0 ElementSize     = dword ptr  8
.text:004068C0 ElementCount    = dword ptr  0Ch
.text:004068C0 Stream          = dword ptr  10h
.text:004068C0
.text:004068C0                 jmp     ds:__imp_fwrite
.text:004068C0 fwrite          endp
.text:004068C0
.text:004068C0 ; ---------------------------------------------------------------------------
.text:004068C6                 align 10h
.text:004068D0
.text:004068D0 ; =============== S U B R O U T I N E =======================================
.text:004068D0
.text:004068D0 ; Attributes: thunk
.text:004068D0
.text:004068D0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004068D0 setlocale       proc near               ; CODE XREF: sub_401F10+41↑p
.text:004068D0
.text:004068D0 Category        = dword ptr  4
.text:004068D0 Locale          = dword ptr  8
.text:004068D0
.text:004068D0                 jmp     ds:__imp_setlocale
.text:004068D0 setlocale       endp
.text:004068D0
.text:004068D0 ; ---------------------------------------------------------------------------
.text:004068D6                 align 10h
.text:004068E0
.text:004068E0 ; =============== S U B R O U T I N E =======================================
.text:004068E0
.text:004068E0 ; Attributes: thunk
.text:004068E0
.text:004068E0 ; int __cdecl fclose(FILE *Stream)
.text:004068E0 fclose          proc near               ; CODE XREF: sub_401F10+364↑p
.text:004068E0                                         ; sub_401F10+43A↑p ...
.text:004068E0
.text:004068E0 Stream          = dword ptr  4
.text:004068E0
.text:004068E0                 jmp     ds:__imp_fclose
.text:004068E0 fclose          endp
.text:004068E0
.text:004068E0 ; ---------------------------------------------------------------------------
.text:004068E6                 align 10h
.text:004068F0
.text:004068F0 ; =============== S U B R O U T I N E =======================================
.text:004068F0
.text:004068F0 ; Attributes: thunk
.text:004068F0
.text:004068F0 ; int *__cdecl errno()
.text:004068F0 _errno          proc near               ; CODE XREF: sub_401F10+37B↑p
.text:004068F0                                         ; sub_401F10+52B↑p ...
.text:004068F0                 jmp     ds:__imp__errno
.text:004068F0 _errno          endp
.text:004068F0
.text:004068F0 ; ---------------------------------------------------------------------------
.text:004068F6                 align 10h
.text:00406900
.text:00406900 ; =============== S U B R O U T I N E =======================================
.text:00406900
.text:00406900 ; Attributes: thunk
.text:00406900
.text:00406900 ; void __cdecl free(void *Block)
.text:00406900 free            proc near               ; CODE XREF: sub_402730+E2↑p
.text:00406900                                         ; sub_402730+157↑p ...
.text:00406900
.text:00406900 Block           = dword ptr  4
.text:00406900
.text:00406900                 jmp     ds:__imp_free
.text:00406900 free            endp
.text:00406900
.text:00406900 ; ---------------------------------------------------------------------------
.text:00406906                 align 10h
.text:00406910
.text:00406910 ; =============== S U B R O U T I N E =======================================
.text:00406910
.text:00406910 ; Attributes: thunk
.text:00406910
.text:00406910 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00406910 strcmp          proc near               ; CODE XREF: sub_402730+3CF↑p
.text:00406910                                         ; sub_405EB4+180↑p
.text:00406910
.text:00406910 Str1            = dword ptr  4
.text:00406910 Str2            = dword ptr  8
.text:00406910
.text:00406910                 jmp     ds:__imp_strcmp
.text:00406910 strcmp          endp
.text:00406910
.text:00406910 ; ---------------------------------------------------------------------------
.text:00406916                 align 10h
.text:00406920
.text:00406920 ; =============== S U B R O U T I N E =======================================
.text:00406920
.text:00406920 ; Attributes: thunk
.text:00406920
.text:00406920 ; char *__cdecl getenv(const char *VarName)
.text:00406920 getenv          proc near               ; CODE XREF: sub_401F10+59A↑p
.text:00406920                                         ; sub_402730+2E↑p ...
.text:00406920
.text:00406920 VarName         = dword ptr  4
.text:00406920
.text:00406920                 jmp     ds:__imp_getenv
.text:00406920 getenv          endp
.text:00406920
.text:00406920 ; ---------------------------------------------------------------------------
.text:00406926                 align 10h
.text:00406930
.text:00406930 ; =============== S U B R O U T I N E =======================================
.text:00406930
.text:00406930 ; Attributes: noreturn thunk
.text:00406930
.text:00406930 ; void __cdecl __noreturn exit(int Code)
.text:00406930 exit            proc near               ; CODE XREF: sub_401F10:loc_40200F↑p
.text:00406930                                         ; .text:004025AE↑p ...
.text:00406930
.text:00406930 Code            = dword ptr  4
.text:00406930
.text:00406930                 jmp     ds:__imp_exit
.text:00406930 exit            endp
.text:00406930
.text:00406930 ; ---------------------------------------------------------------------------
.text:00406936                 align 10h
.text:00406940
.text:00406940 ; =============== S U B R O U T I N E =======================================
.text:00406940
.text:00406940 ; Attributes: thunk
.text:00406940
.text:00406940 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00406940 fputs           proc near               ; CODE XREF: sub_401F10+15E↑p
.text:00406940                                         ; sub_401F10+180↑p ...
.text:00406940
.text:00406940 Buffer          = dword ptr  4
.text:00406940 Stream          = dword ptr  8
.text:00406940
.text:00406940                 jmp     ds:__imp_fputs
.text:00406940 fputs           endp
.text:00406940
.text:00406940 ; ---------------------------------------------------------------------------
.text:00406946                 align 10h
.text:00406950
.text:00406950 ; =============== S U B R O U T I N E =======================================
.text:00406950
.text:00406950 ; Attributes: thunk
.text:00406950
.text:00406950 ; int printf(const char *const Format, ...)
.text:00406950 printf          proc near               ; CODE XREF: sub_401F10+13C↑p
.text:00406950                                         ; sub_401F10+1E1↑p ...
.text:00406950
.text:00406950 Format          = dword ptr  4
.text:00406950
.text:00406950                 jmp     ds:__imp_printf
.text:00406950 printf          endp
.text:00406950
.text:00406950 ; ---------------------------------------------------------------------------
.text:00406956                 align 10h
.text:00406960
.text:00406960 ; =============== S U B R O U T I N E =======================================
.text:00406960
.text:00406960 ; Attributes: thunk
.text:00406960
.text:00406960 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00406960 fprintf         proc near               ; CODE XREF: sub_401F10+F3↑p
.text:00406960                                         ; sub_401F10+2D6↑p ...
.text:00406960
.text:00406960 Stream          = dword ptr  4
.text:00406960 Format          = dword ptr  8
.text:00406960
.text:00406960                 jmp     ds:__imp_fprintf
.text:00406960 fprintf         endp
.text:00406960
.text:00406960 ; ---------------------------------------------------------------------------
.text:00406966                 align 10h
.text:00406970
.text:00406970 ; =============== S U B R O U T I N E =======================================
.text:00406970
.text:00406970 ; Attributes: thunk
.text:00406970
.text:00406970 ; int __cdecl isctype(int C, int Type)
.text:00406970 _isctype        proc near               ; CODE XREF: sub_402B60+3D↑p
.text:00406970                                         ; sub_402B60+7D↑p ...
.text:00406970
.text:00406970 C               = dword ptr  4
.text:00406970 Type            = dword ptr  8
.text:00406970
.text:00406970                 jmp     ds:__imp__isctype
.text:00406970 _isctype        endp
.text:00406970
.text:00406970 ; ---------------------------------------------------------------------------
.text:00406976                 align 10h
.text:00406980
.text:00406980 ; =============== S U B R O U T I N E =======================================
.text:00406980
.text:00406980 ; Attributes: thunk
.text:00406980
.text:00406980 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00406980 _stricmp        proc near               ; CODE XREF: sub_402730+FB↑p
.text:00406980                                         ; sub_402730+13B↑p ...
.text:00406980
.text:00406980 String1         = dword ptr  4
.text:00406980 String2         = dword ptr  8
.text:00406980
.text:00406980                 jmp     ds:__imp__stricmp
.text:00406980 _stricmp        endp
.text:00406980
.text:00406980 ; ---------------------------------------------------------------------------
.text:00406986                 align 10h
.text:00406990
.text:00406990 ; =============== S U B R O U T I N E =======================================
.text:00406990
.text:00406990 ; Attributes: thunk
.text:00406990
.text:00406990 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00406990 fopen           proc near               ; CODE XREF: sub_401F10+563↑p
.text:00406990
.text:00406990 FileName        = dword ptr  4
.text:00406990 Mode            = dword ptr  8
.text:00406990
.text:00406990                 jmp     ds:__imp_fopen
.text:00406990 fopen           endp
.text:00406990
.text:00406990 ; ---------------------------------------------------------------------------
.text:00406996                 align 10h
.text:004069A0
.text:004069A0 ; =============== S U B R O U T I N E =======================================
.text:004069A0
.text:004069A0 ; Attributes: thunk
.text:004069A0
.text:004069A0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004069A0 _flsbuf         proc near               ; CODE XREF: sub_401F10+3AC↑p
.text:004069A0                                         ; sub_4040F0+128↑p ...
.text:004069A0
.text:004069A0 File            = dword ptr  8
.text:004069A0
.text:004069A0                 jmp     ds:__imp__flsbuf
.text:004069A0 _flsbuf         endp
.text:004069A0
.text:004069A0 ; ---------------------------------------------------------------------------
.text:004069A6                 align 10h
.text:004069B0
.text:004069B0 ; =============== S U B R O U T I N E =======================================
.text:004069B0
.text:004069B0 ; Attributes: thunk
.text:004069B0
.text:004069B0 ; size_t __cdecl strlen(const char *Str)
.text:004069B0 strlen          proc near               ; CODE XREF: sub_403030+2A9↑p
.text:004069B0                                         ; sub_403030+346↑p ...
.text:004069B0
.text:004069B0 Str             = dword ptr  4
.text:004069B0
.text:004069B0                 jmp     ds:__imp_strlen
.text:004069B0 strlen          endp
.text:004069B0
.text:004069B0 ; ---------------------------------------------------------------------------
.text:004069B6                 align 10h
.text:004069C0
.text:004069C0 ; =============== S U B R O U T I N E =======================================
.text:004069C0
.text:004069C0 ; Attributes: thunk
.text:004069C0
.text:004069C0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004069C0 strncmp         proc near               ; CODE XREF: sub_403030+23F↑p
.text:004069C0                                         ; sub_403030+699↑p
.text:004069C0
.text:004069C0 Str1            = dword ptr  4
.text:004069C0 Str2            = dword ptr  8
.text:004069C0 MaxCount        = dword ptr  0Ch
.text:004069C0
.text:004069C0                 jmp     ds:__imp_strncmp
.text:004069C0 strncmp         endp
.text:004069C0
.text:004069C0 ; ---------------------------------------------------------------------------
.text:004069C6                 align 10h
.text:004069D0
.text:004069D0 ; =============== S U B R O U T I N E =======================================
.text:004069D0
.text:004069D0 ; Attributes: thunk
.text:004069D0
.text:004069D0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004069D0 strchr          proc near               ; CODE XREF: sub_403030+469↑p
.text:004069D0                                         ; sub_403030+53A↑p ...
.text:004069D0
.text:004069D0 Str             = dword ptr  4
.text:004069D0 Val             = dword ptr  8
.text:004069D0
.text:004069D0                 jmp     ds:__imp_strchr
.text:004069D0 strchr          endp
.text:004069D0
.text:004069D0 ; ---------------------------------------------------------------------------
.text:004069D6                 align 10h
.text:004069E0
.text:004069E0 ; =============== S U B R O U T I N E =======================================
.text:004069E0
.text:004069E0 ; Attributes: thunk
.text:004069E0
.text:004069E0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004069E0 vfprintf        proc near               ; CODE XREF: sub_4040F0+C1↑p
.text:004069E0                                         ; sub_405DB0+49↑p ...
.text:004069E0
.text:004069E0 Stream          = dword ptr  4
.text:004069E0 Format          = dword ptr  8
.text:004069E0 ArgList         = dword ptr  0Ch
.text:004069E0
.text:004069E0                 jmp     ds:__imp_vfprintf
.text:004069E0 vfprintf        endp
.text:004069E0
.text:004069E0 ; ---------------------------------------------------------------------------
.text:004069E6                 align 10h
.text:004069F0
.text:004069F0 ; =============== S U B R O U T I N E =======================================
.text:004069F0
.text:004069F0 ; Attributes: noreturn thunk
.text:004069F0
.text:004069F0 ; void __cdecl __noreturn abort()
.text:004069F0 abort           proc near               ; CODE XREF: sub_4040F0:loc_40418C↑p
.text:004069F0                                         ; sub_405860:loc_405A1A↑p ...
.text:004069F0                 jmp     ds:__imp_abort
.text:004069F0 abort           endp
.text:004069F0
.text:004069F0 ; ---------------------------------------------------------------------------
.text:004069F6                 align 10h
.text:00406A00
.text:00406A00 ; =============== S U B R O U T I N E =======================================
.text:00406A00
.text:00406A00 ; Attributes: thunk
.text:00406A00
.text:00406A00 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00406A00 iswctype        proc near               ; CODE XREF: sub_404720+78B↑p
.text:00406A00
.text:00406A00 C               = word ptr  4
.text:00406A00 Type            = word ptr  8
.text:00406A00
.text:00406A00                 jmp     ds:__imp_iswctype
.text:00406A00 iswctype        endp
.text:00406A00
.text:00406A00 ; ---------------------------------------------------------------------------
.text:00406A06                 align 10h
.text:00406A10
.text:00406A10 ; =============== S U B R O U T I N E =======================================
.text:00406A10
.text:00406A10 ; Attributes: thunk
.text:00406A10
.text:00406A10 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00406A10 memcpy          proc near               ; CODE XREF: .text:00405C78↑p
.text:00406A10                                         ; .text:00405CC1↑p ...
.text:00406A10
.text:00406A10 Src             = dword ptr  8
.text:00406A10 Size            = dword ptr  0Ch
.text:00406A10
.text:00406A10                 jmp     ds:__imp_memcpy
.text:00406A10 memcpy          endp
.text:00406A10
.text:00406A10 ; ---------------------------------------------------------------------------
.text:00406A16                 align 10h
.text:00406A20
.text:00406A20 ; =============== S U B R O U T I N E =======================================
.text:00406A20
.text:00406A20 ; Attributes: thunk
.text:00406A20
.text:00406A20 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00406A20 memset          proc near               ; CODE XREF: .text:00405BF6↑p
.text:00406A20
.text:00406A20 Val             = dword ptr  8
.text:00406A20 Size            = dword ptr  0Ch
.text:00406A20
.text:00406A20                 jmp     ds:__imp_memset
.text:00406A20 memset          endp
.text:00406A20
.text:00406A20 ; ---------------------------------------------------------------------------
.text:00406A26                 align 10h
.text:00406A30
.text:00406A30 ; =============== S U B R O U T I N E =======================================
.text:00406A30
.text:00406A30 ; Attributes: thunk
.text:00406A30
.text:00406A30 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00406A30 calloc          proc near               ; CODE XREF: .text:00405C33↑p
.text:00406A30
.text:00406A30 Count           = dword ptr  4
.text:00406A30 Size            = dword ptr  8
.text:00406A30
.text:00406A30                 jmp     ds:__imp_calloc
.text:00406A30 calloc          endp
.text:00406A30
.text:00406A30 ; ---------------------------------------------------------------------------
.text:00406A36                 align 10h
.text:00406A40
.text:00406A40 ; =============== S U B R O U T I N E =======================================
.text:00406A40
.text:00406A40 ; Attributes: thunk
.text:00406A40
.text:00406A40 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00406A40 realloc         proc near               ; CODE XREF: .text:00405B30↑p
.text:00406A40                                         ; sub_405B60+16↑p ...
.text:00406A40
.text:00406A40 Block           = dword ptr  4
.text:00406A40 Size            = dword ptr  8
.text:00406A40
.text:00406A40                 jmp     ds:__imp_realloc
.text:00406A40 realloc         endp
.text:00406A40
.text:00406A40 ; ---------------------------------------------------------------------------
.text:00406A46                 align 10h
.text:00406A50
.text:00406A50 ; =============== S U B R O U T I N E =======================================
.text:00406A50
.text:00406A50 ; Attributes: thunk
.text:00406A50
.text:00406A50 ; int __cdecl fflush(FILE *Stream)
.text:00406A50 fflush          proc near               ; CODE XREF: sub_405DB0+19↑p
.text:00406A50                                         ; sub_405DB0+81↑p ...
.text:00406A50
.text:00406A50 Stream          = dword ptr  4
.text:00406A50
.text:00406A50                 jmp     ds:__imp_fflush
.text:00406A50 fflush          endp
.text:00406A50
.text:00406A50 ; ---------------------------------------------------------------------------
.text:00406A56                 align 10h
.text:00406A60
.text:00406A60 ; =============== S U B R O U T I N E =======================================
.text:00406A60
.text:00406A60 ; Attributes: thunk
.text:00406A60
.text:00406A60 ; char *__cdecl strerror(int ErrorMessage)
.text:00406A60 strerror        proc near               ; CODE XREF: sub_405DB0+A5↑p
.text:00406A60                                         ; sub_405EB4+10F↑p
.text:00406A60
.text:00406A60 ErrorMessage    = dword ptr  4
.text:00406A60
.text:00406A60                 jmp     ds:__imp_strerror
.text:00406A60 strerror        endp
.text:00406A60
.text:00406A60 ; ---------------------------------------------------------------------------
.text:00406A66                 align 10h
.text:00406A70
.text:00406A70 ; =============== S U B R O U T I N E =======================================
.text:00406A70
.text:00406A70 ; Attributes: thunk
.text:00406A70
.text:00406A70 ; int __cdecl filbuf(FILE *File)
.text:00406A70 _filbuf         proc near               ; CODE XREF: sub_406050+13B↑p
.text:00406A70
.text:00406A70 File            = dword ptr  4
.text:00406A70
.text:00406A70                 jmp     ds:__imp__filbuf
.text:00406A70 _filbuf         endp
.text:00406A70
.text:00406A70 ; ---------------------------------------------------------------------------
.text:00406A76                 align 10h
.text:00406A80
.text:00406A80 ; =============== S U B R O U T I N E =======================================
.text:00406A80
.text:00406A80 ; Attributes: thunk
.text:00406A80
.text:00406A80 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00406A80 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00406A80
.text:00406A80 lpTopLevelExceptionFilter= dword ptr  4
.text:00406A80
.text:00406A80                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00406A80 SetUnhandledExceptionFilter endp
.text:00406A80
.text:00406A80 ; ---------------------------------------------------------------------------
.text:00406A86                 align 10h
.text:00406A90
.text:00406A90 ; =============== S U B R O U T I N E =======================================
.text:00406A90
.text:00406A90 ; Attributes: noreturn thunk
.text:00406A90
.text:00406A90 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00406A90 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00406A90
.text:00406A90 uExitCode       = dword ptr  4
.text:00406A90
.text:00406A90                 jmp     ds:__imp_ExitProcess
.text:00406A90 ExitProcess     endp
.text:00406A90
.text:00406A90 ; ---------------------------------------------------------------------------
.text:00406A96                 align 10h
.text:00406AA0 dword_406AA0    dd 0FFFFFFFFh           ; DATA XREF: .text:00406749↑r
.text:00406AA0                                         ; .text:loc_406770↑r ...
.text:00406AA4 dword_406AA4    dd 0                    ; DATA XREF: .text:loc_40677C↑r
.text:00406AA4                                         ; sub_4067A0:loc_4067ED↑r
.text:00406AA8                 dd 0FFFFFFFFh
.text:00406AAC dword_406AAC    dd 55h dup(0)           ; DATA XREF: .data:off_407094↓o
.text:00406C00                 dd 100h dup(?)
.text:00406C00 _text           ends
.text:00406C00
.data:00407000 ; Section 2. (virtual address 00007000)
.data:00407000 ; Virtual size                  : 000000B0 (    176.)
.data:00407000 ; Section size in file          : 00000200 (    512.)
.data:00407000 ; Offset to raw data for section: 00006000
.data:00407000 ; Flags C0000040: Data Readable Writable
.data:00407000 ; Alignment     : default
.data:00407000 ; ===========================================================================
.data:00407000
.data:00407000 ; Segment type: Pure data
.data:00407000 ; Segment permissions: Read/Write
.data:00407000 _data           segment para public 'DATA' use32
.data:00407000                 assume cs:_data
.data:00407000                 ;org 407000h
.data:00407000 dword_407000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00407000                                         ; sub_401080+CC↑r
.data:00407004 dword_407004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00407004                                         ; sub_401080+D4↑r
.data:00407008                 align 10h
.data:00407010 dword_407010    dd 1                    ; DATA XREF: sub_401F10:loc_40214C↑r
.data:00407010                                         ; sub_403BC0+3↑r ...
.data:00407014 dword_407014    dd 1                    ; DATA XREF: sub_403BC0+11↑r
.data:00407014                                         ; .text:00403C61↑r
.data:00407018 dword_407018    dd 3Fh                  ; DATA XREF: sub_403BC0+7D↑w
.data:00407018                                         ; .text:00403CCD↑w
.data:0040701C                 align 10h
.data:00407020 ; char *off_407020
.data:00407020 off_407020      dd offset aCopyrightC2005
.data:00407020                                         ; DATA XREF: sub_4040F0+DC↑r
.data:00407020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00407024                 align 10h
.data:00407030 ; int dword_407030
.data:00407030 dword_407030    dd 1                    ; DATA XREF: sub_404470+6D↑r
.data:00407030                                         ; sub_404470+9A↑r ...
.data:00407034                 align 10h
.data:00407040 dword_407040    dd 1                    ; DATA XREF: sub_405860+22↑r
.data:00407040                                         ; sub_405860+65↑r ...
.data:00407044 dword_407044    dd 100h                 ; DATA XREF: sub_405860+3F↑o
.data:00407044                                         ; sub_405860+1A2↑r ...
.data:00407048 off_407048      dd offset unk_408080    ; DATA XREF: sub_405860+1AA↑r
.data:0040704C ; void *off_40704C
.data:0040704C off_40704C      dd offset dword_407044  ; DATA XREF: sub_405860+39↑r
.data:0040704C                                         ; sub_405860+60↑w ...
.data:00407050 off_407050      dd offset sub_406690    ; DATA XREF: sub_4062B0:loc_406330↑r
.data:00407050                                         ; .text:loc_4063D0↑r ...
.data:00407054 ; int Code
.data:00407054 Code            dd 1                    ; DATA XREF: sub_406690+1C↑r
.data:00407058                 align 10h
.data:00407060 dword_407060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00407064                 align 10h
.data:00407070 ; int Mode
.data:00407070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00407070                                         ; sub_401080+80↑r ...
.data:00407074                 align 10h
.data:00407080 dword_407080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00407080                                         ; sub_401080+BA↑r
.data:00407084                 align 10h
.data:00407090 dword_407090    dd 0                    ; DATA XREF: sub_4067A0+9↑r
.data:00407090                                         ; sub_4067A0+1D↑w
.data:00407094 off_407094      dd offset dword_406AAC  ; DATA XREF: sub_406710+6↑r
.data:00407094                                         ; sub_406710+17↑r ...
.data:00407098                 align 1000h
.data:00407098 _data           ends
.data:00407098
.bss:00408000 ; Section 3. (virtual address 00008000)
.bss:00408000 ; Virtual size                  : 00000280 (    640.)
.bss:00408000 ; Section size in file          : 00000000 (      0.)
.bss:00408000 ; Offset to raw data for section: 00000000
.bss:00408000 ; Flags C0000080: Bss Readable Writable
.bss:00408000 ; Alignment     : default
.bss:00408000 ; ===========================================================================
.bss:00408000
.bss:00408000 ; Segment type: Uninitialized
.bss:00408000 ; Segment permissions: Read/Write
.bss:00408000 _bss            segment para public 'BSS' use32
.bss:00408000                 assume cs:_bss
.bss:00408000                 ;org 408000h
.bss:00408000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00408000 unk_408000      db    ? ;               ; DATA XREF: sub_401F10+3DD↑o
.bss:00408000                                         ; sub_402730+2EC↑o ...
.bss:00408001                 db    ? ;
.bss:00408002                 db    ? ;
.bss:00408003                 db    ? ;
.bss:00408004 dword_408004    dd ?                    ; DATA XREF: sub_401F10+475↑r
.bss:00408008 ; void *dword_408008
.bss:00408008 dword_408008    dd ?                    ; DATA XREF: sub_401F10+45D↑r
.bss:00408008                                         ; sub_401F10+4A7↑w
.bss:0040800C dword_40800C    dd ?                    ; DATA XREF: sub_401F10+457↑r
.bss:0040800C                                         ; sub_401F10+486↑w ...
.bss:00408010 dword_408010    dd ?                    ; DATA XREF: sub_401F10+480↑r
.bss:00408010                                         ; sub_402730+250↑r ...
.bss:00408014                 align 8
.bss:00408018 dword_408018    dd ?                    ; DATA XREF: sub_401F10:loc_40237F↑r
.bss:0040801C                 db    ? ;
.bss:0040801D                 db    ? ;
.bss:0040801E                 db    ? ;
.bss:0040801F                 db    ? ;
.bss:00408020                 db    ? ;
.bss:00408021                 db    ? ;
.bss:00408022                 db    ? ;
.bss:00408023                 db    ? ;
.bss:00408024                 db    ? ;
.bss:00408025                 db    ? ;
.bss:00408026                 db    ? ;
.bss:00408027                 db    ? ;
.bss:00408028 byte_408028     db ?                    ; DATA XREF: sub_401F10:loc_402425↑w
.bss:00408029                 align 10h
.bss:00408030 byte_408030     db ?                    ; DATA XREF: sub_401F10:loc_402251↑r
.bss:00408030                                         ; sub_401F10+410↑w
.bss:00408031                 align 10h
.bss:00408040 dword_408040    dd ?                    ; DATA XREF: sub_403BC0+9↑o
.bss:00408040                                         ; sub_403BC0+17↑w ...
.bss:00408044 dword_408044    dd ?                    ; DATA XREF: sub_403BC0+21↑w
.bss:00408044                                         ; .text:00403C79↑w
.bss:00408048 dword_408048    dd ?                    ; DATA XREF: sub_403BC0+77↑r
.bss:00408048                                         ; .text:00403CC7↑r
.bss:0040804C dword_40804C    dd ?                    ; DATA XREF: sub_403BC0+6B↑r
.bss:0040804C                                         ; .text:00403CBB↑r
.bss:00408050                 db    ? ;
.bss:00408051                 db    ? ;
.bss:00408052                 db    ? ;
.bss:00408053                 db    ? ;
.bss:00408054                 db    ? ;
.bss:00408055                 db    ? ;
.bss:00408056                 db    ? ;
.bss:00408057                 db    ? ;
.bss:00408058                 db    ? ;
.bss:00408059                 db    ? ;
.bss:0040805A                 db    ? ;
.bss:0040805B                 db    ? ;
.bss:0040805C                 db    ? ;
.bss:0040805D                 db    ? ;
.bss:0040805E                 db    ? ;
.bss:0040805F                 db    ? ;
.bss:00408060                 db    ? ;
.bss:00408061                 db    ? ;
.bss:00408062                 db    ? ;
.bss:00408063                 db    ? ;
.bss:00408064                 db    ? ;
.bss:00408065                 db    ? ;
.bss:00408066                 db    ? ;
.bss:00408067                 db    ? ;
.bss:00408068                 db    ? ;
.bss:00408069                 db    ? ;
.bss:0040806A                 db    ? ;
.bss:0040806B                 db    ? ;
.bss:0040806C                 db    ? ;
.bss:0040806D                 db    ? ;
.bss:0040806E                 db    ? ;
.bss:0040806F                 db    ? ;
.bss:00408070 ; char *dword_408070
.bss:00408070 dword_408070    dd ?                    ; DATA XREF: .text:00404444↑w
.bss:00408070                                         ; sub_404470+58↑r
.bss:00408074                 align 10h
.bss:00408080 unk_408080      db    ? ;               ; DATA XREF: sub_405860+100↑o
.bss:00408080                                         ; .data:off_407048↑o
.bss:00408081                 db    ? ;
.bss:00408082                 db    ? ;
.bss:00408083                 db    ? ;
.bss:00408084                 db    ? ;
.bss:00408085                 db    ? ;
.bss:00408086                 db    ? ;
.bss:00408087                 db    ? ;
.bss:00408088                 db    ? ;
.bss:00408089                 db    ? ;
.bss:0040808A                 db    ? ;
.bss:0040808B                 db    ? ;
.bss:0040808C                 db    ? ;
.bss:0040808D                 db    ? ;
.bss:0040808E                 db    ? ;
.bss:0040808F                 db    ? ;
.bss:00408090                 db    ? ;
.bss:00408091                 db    ? ;
.bss:00408092                 db    ? ;
.bss:00408093                 db    ? ;
.bss:00408094                 db    ? ;
.bss:00408095                 db    ? ;
.bss:00408096                 db    ? ;
.bss:00408097                 db    ? ;
.bss:00408098                 db    ? ;
.bss:00408099                 db    ? ;
.bss:0040809A                 db    ? ;
.bss:0040809B                 db    ? ;
.bss:0040809C                 db    ? ;
.bss:0040809D                 db    ? ;
.bss:0040809E                 db    ? ;
.bss:0040809F                 db    ? ;
.bss:004080A0                 db    ? ;
.bss:004080A1                 db    ? ;
.bss:004080A2                 db    ? ;
.bss:004080A3                 db    ? ;
.bss:004080A4                 db    ? ;
.bss:004080A5                 db    ? ;
.bss:004080A6                 db    ? ;
.bss:004080A7                 db    ? ;
.bss:004080A8                 db    ? ;
.bss:004080A9                 db    ? ;
.bss:004080AA                 db    ? ;
.bss:004080AB                 db    ? ;
.bss:004080AC                 db    ? ;
.bss:004080AD                 db    ? ;
.bss:004080AE                 db    ? ;
.bss:004080AF                 db    ? ;
.bss:004080B0                 db    ? ;
.bss:004080B1                 db    ? ;
.bss:004080B2                 db    ? ;
.bss:004080B3                 db    ? ;
.bss:004080B4                 db    ? ;
.bss:004080B5                 db    ? ;
.bss:004080B6                 db    ? ;
.bss:004080B7                 db    ? ;
.bss:004080B8                 db    ? ;
.bss:004080B9                 db    ? ;
.bss:004080BA                 db    ? ;
.bss:004080BB                 db    ? ;
.bss:004080BC                 db    ? ;
.bss:004080BD                 db    ? ;
.bss:004080BE                 db    ? ;
.bss:004080BF                 db    ? ;
.bss:004080C0                 db    ? ;
.bss:004080C1                 db    ? ;
.bss:004080C2                 db    ? ;
.bss:004080C3                 db    ? ;
.bss:004080C4                 db    ? ;
.bss:004080C5                 db    ? ;
.bss:004080C6                 db    ? ;
.bss:004080C7                 db    ? ;
.bss:004080C8                 db    ? ;
.bss:004080C9                 db    ? ;
.bss:004080CA                 db    ? ;
.bss:004080CB                 db    ? ;
.bss:004080CC                 db    ? ;
.bss:004080CD                 db    ? ;
.bss:004080CE                 db    ? ;
.bss:004080CF                 db    ? ;
.bss:004080D0                 db    ? ;
.bss:004080D1                 db    ? ;
.bss:004080D2                 db    ? ;
.bss:004080D3                 db    ? ;
.bss:004080D4                 db    ? ;
.bss:004080D5                 db    ? ;
.bss:004080D6                 db    ? ;
.bss:004080D7                 db    ? ;
.bss:004080D8                 db    ? ;
.bss:004080D9                 db    ? ;
.bss:004080DA                 db    ? ;
.bss:004080DB                 db    ? ;
.bss:004080DC                 db    ? ;
.bss:004080DD                 db    ? ;
.bss:004080DE                 db    ? ;
.bss:004080DF                 db    ? ;
.bss:004080E0                 db    ? ;
.bss:004080E1                 db    ? ;
.bss:004080E2                 db    ? ;
.bss:004080E3                 db    ? ;
.bss:004080E4                 db    ? ;
.bss:004080E5                 db    ? ;
.bss:004080E6                 db    ? ;
.bss:004080E7                 db    ? ;
.bss:004080E8                 db    ? ;
.bss:004080E9                 db    ? ;
.bss:004080EA                 db    ? ;
.bss:004080EB                 db    ? ;
.bss:004080EC                 db    ? ;
.bss:004080ED                 db    ? ;
.bss:004080EE                 db    ? ;
.bss:004080EF                 db    ? ;
.bss:004080F0                 db    ? ;
.bss:004080F1                 db    ? ;
.bss:004080F2                 db    ? ;
.bss:004080F3                 db    ? ;
.bss:004080F4                 db    ? ;
.bss:004080F5                 db    ? ;
.bss:004080F6                 db    ? ;
.bss:004080F7                 db    ? ;
.bss:004080F8                 db    ? ;
.bss:004080F9                 db    ? ;
.bss:004080FA                 db    ? ;
.bss:004080FB                 db    ? ;
.bss:004080FC                 db    ? ;
.bss:004080FD                 db    ? ;
.bss:004080FE                 db    ? ;
.bss:004080FF                 db    ? ;
.bss:00408100                 db    ? ;
.bss:00408101                 db    ? ;
.bss:00408102                 db    ? ;
.bss:00408103                 db    ? ;
.bss:00408104                 db    ? ;
.bss:00408105                 db    ? ;
.bss:00408106                 db    ? ;
.bss:00408107                 db    ? ;
.bss:00408108                 db    ? ;
.bss:00408109                 db    ? ;
.bss:0040810A                 db    ? ;
.bss:0040810B                 db    ? ;
.bss:0040810C                 db    ? ;
.bss:0040810D                 db    ? ;
.bss:0040810E                 db    ? ;
.bss:0040810F                 db    ? ;
.bss:00408110                 db    ? ;
.bss:00408111                 db    ? ;
.bss:00408112                 db    ? ;
.bss:00408113                 db    ? ;
.bss:00408114                 db    ? ;
.bss:00408115                 db    ? ;
.bss:00408116                 db    ? ;
.bss:00408117                 db    ? ;
.bss:00408118                 db    ? ;
.bss:00408119                 db    ? ;
.bss:0040811A                 db    ? ;
.bss:0040811B                 db    ? ;
.bss:0040811C                 db    ? ;
.bss:0040811D                 db    ? ;
.bss:0040811E                 db    ? ;
.bss:0040811F                 db    ? ;
.bss:00408120                 db    ? ;
.bss:00408121                 db    ? ;
.bss:00408122                 db    ? ;
.bss:00408123                 db    ? ;
.bss:00408124                 db    ? ;
.bss:00408125                 db    ? ;
.bss:00408126                 db    ? ;
.bss:00408127                 db    ? ;
.bss:00408128                 db    ? ;
.bss:00408129                 db    ? ;
.bss:0040812A                 db    ? ;
.bss:0040812B                 db    ? ;
.bss:0040812C                 db    ? ;
.bss:0040812D                 db    ? ;
.bss:0040812E                 db    ? ;
.bss:0040812F                 db    ? ;
.bss:00408130                 db    ? ;
.bss:00408131                 db    ? ;
.bss:00408132                 db    ? ;
.bss:00408133                 db    ? ;
.bss:00408134                 db    ? ;
.bss:00408135                 db    ? ;
.bss:00408136                 db    ? ;
.bss:00408137                 db    ? ;
.bss:00408138                 db    ? ;
.bss:00408139                 db    ? ;
.bss:0040813A                 db    ? ;
.bss:0040813B                 db    ? ;
.bss:0040813C                 db    ? ;
.bss:0040813D                 db    ? ;
.bss:0040813E                 db    ? ;
.bss:0040813F                 db    ? ;
.bss:00408140                 db    ? ;
.bss:00408141                 db    ? ;
.bss:00408142                 db    ? ;
.bss:00408143                 db    ? ;
.bss:00408144                 db    ? ;
.bss:00408145                 db    ? ;
.bss:00408146                 db    ? ;
.bss:00408147                 db    ? ;
.bss:00408148                 db    ? ;
.bss:00408149                 db    ? ;
.bss:0040814A                 db    ? ;
.bss:0040814B                 db    ? ;
.bss:0040814C                 db    ? ;
.bss:0040814D                 db    ? ;
.bss:0040814E                 db    ? ;
.bss:0040814F                 db    ? ;
.bss:00408150                 db    ? ;
.bss:00408151                 db    ? ;
.bss:00408152                 db    ? ;
.bss:00408153                 db    ? ;
.bss:00408154                 db    ? ;
.bss:00408155                 db    ? ;
.bss:00408156                 db    ? ;
.bss:00408157                 db    ? ;
.bss:00408158                 db    ? ;
.bss:00408159                 db    ? ;
.bss:0040815A                 db    ? ;
.bss:0040815B                 db    ? ;
.bss:0040815C                 db    ? ;
.bss:0040815D                 db    ? ;
.bss:0040815E                 db    ? ;
.bss:0040815F                 db    ? ;
.bss:00408160                 db    ? ;
.bss:00408161                 db    ? ;
.bss:00408162                 db    ? ;
.bss:00408163                 db    ? ;
.bss:00408164                 db    ? ;
.bss:00408165                 db    ? ;
.bss:00408166                 db    ? ;
.bss:00408167                 db    ? ;
.bss:00408168                 db    ? ;
.bss:00408169                 db    ? ;
.bss:0040816A                 db    ? ;
.bss:0040816B                 db    ? ;
.bss:0040816C                 db    ? ;
.bss:0040816D                 db    ? ;
.bss:0040816E                 db    ? ;
.bss:0040816F                 db    ? ;
.bss:00408170                 db    ? ;
.bss:00408171                 db    ? ;
.bss:00408172                 db    ? ;
.bss:00408173                 db    ? ;
.bss:00408174                 db    ? ;
.bss:00408175                 db    ? ;
.bss:00408176                 db    ? ;
.bss:00408177                 db    ? ;
.bss:00408178                 db    ? ;
.bss:00408179                 db    ? ;
.bss:0040817A                 db    ? ;
.bss:0040817B                 db    ? ;
.bss:0040817C                 db    ? ;
.bss:0040817D                 db    ? ;
.bss:0040817E                 db    ? ;
.bss:0040817F                 db    ? ;
.bss:00408180 dword_408180    dd ?                    ; DATA XREF: .text:loc_4051F1↑o
.bss:00408180                                         ; .text:loc_405210↑o ...
.bss:00408184 dword_408184    dd ?                    ; DATA XREF: .text:loc_405290↑o
.bss:00408184                                         ; .text:00405718↑r ...
.bss:00408188 dword_408188    dd ?                    ; DATA XREF: .text:00405712↑r
.bss:00408188                                         ; sub_4057C0+2C↑r
.bss:0040818C dword_40818C    dd ?                    ; DATA XREF: .text:00405706↑r
.bss:0040818C                                         ; sub_4057C0+22↑r
.bss:00408190 dword_408190    dd ?                    ; DATA XREF: .text:00405722↑r
.bss:00408190                                         ; sub_4057C0+36↑r
.bss:00408194 dword_408194    dd ?                    ; DATA XREF: .text:00405732↑r
.bss:00408194                                         ; sub_4057C0+4E↑r
.bss:00408198 dword_408198    dd ?                    ; DATA XREF: .text:0040574F↑r
.bss:00408198                                         ; sub_4057C0+62↑r
.bss:0040819C dword_40819C    dd ?                    ; DATA XREF: .text:00405745↑r
.bss:0040819C                                         ; sub_4057C0+70↑r
.bss:004081A0 dword_4081A0    dd ?                    ; DATA XREF: .text:00405728↑r
.bss:004081A0                                         ; sub_4057C0+7A↑r
.bss:004081A4                 align 10h
.bss:004081B0 ; char *Str1
.bss:004081B0 Str1            dd ?                    ; DATA XREF: sub_405EB4:loc_405EED↑w
.bss:004081B0                                         ; sub_405EB4:loc_406020↑r
.bss:004081B4                 align 10h
.bss:004081C0 dword_4081C0    dd ?                    ; DATA XREF: sub_405EB4+2D↑r
.bss:004081C0                                         ; sub_405EB4+3F↑w
.bss:004081C4                 align 10h
.bss:004081D0 dword_4081D0    dd ?                    ; DATA XREF: sub_401F10+2C↑w
.bss:004081D0                                         ; sub_401F10+DF↑r ...
.bss:004081D4                 db    ? ;
.bss:004081D5                 db    ? ;
.bss:004081D6                 db    ? ;
.bss:004081D7                 db    ? ;
.bss:004081D8                 db    ? ;
.bss:004081D9                 db    ? ;
.bss:004081DA                 db    ? ;
.bss:004081DB                 db    ? ;
.bss:004081DC                 db    ? ;
.bss:004081DD                 db    ? ;
.bss:004081DE                 db    ? ;
.bss:004081DF                 db    ? ;
.bss:004081E0                 db    ? ;
.bss:004081E1                 db    ? ;
.bss:004081E2                 db    ? ;
.bss:004081E3                 db    ? ;
.bss:004081E4                 db    ? ;
.bss:004081E5                 db    ? ;
.bss:004081E6                 db    ? ;
.bss:004081E7                 db    ? ;
.bss:004081E8                 db    ? ;
.bss:004081E9                 db    ? ;
.bss:004081EA                 db    ? ;
.bss:004081EB                 db    ? ;
.bss:004081EC                 db    ? ;
.bss:004081ED                 db    ? ;
.bss:004081EE                 db    ? ;
.bss:004081EF                 db    ? ;
.bss:004081F0 dword_4081F0    dd ?                    ; DATA XREF: sub_403BC0+71↑w
.bss:004081F0                                         ; .text:00403CC1↑w
.bss:004081F4                 align 10h
.bss:00408200 dword_408200    dd ?                    ; CODE XREF: sub_405EB4+63↑p
.bss:00408200                                         ; DATA XREF: sub_405DB0+1E↑r ...
.bss:00408204                 align 10h
.bss:00408210 dword_408210    dd ?                    ; DATA XREF: sub_405DB0+4E↑w
.bss:00408210                                         ; sub_405EB4+AB↑w
.bss:00408214                 align 40h
.bss:00408240 dword_408240    dd ?                    ; DATA XREF: sub_405EB4+13↑r
.bss:00408244                 align 1000h
.bss:00408244 _bss            ends
.bss:00408244
.idata:00409000 ; Section 4. (virtual address 00009000)
.idata:00409000 ; Virtual size                  : 00000580 (   1408.)
.idata:00409000 ; Section size in file          : 00000600 (   1536.)
.idata:00409000 ; Offset to raw data for section: 00006200
.idata:00409000 ; Flags C0000040: Data Readable Writable
.idata:00409000 ; Alignment     : default
.idata:00409000 ; ===========================================================================
.idata:00409000
.idata:00409000 ; Segment type: Externs
.idata:00409000 ; _idata
.idata:00409000
.idata:00409001
.idata:00409144 ;
.idata:00409144 ; Imports from libintl3.dll
.idata:00409144 ;
.idata:00409144                 extrn libintl_bindtextdomain:dword
.idata:00409144                                         ; CODE XREF: sub_401F10+55↑p
.idata:00409144                                         ; DATA XREF: sub_401F10+55↑r ...
.idata:00409148                 extrn libintl_gettext:dword
.idata:00409148                                         ; CODE XREF: sub_401F10+D3↑p
.idata:00409148                                         ; sub_401F10+129↑p ...
.idata:0040914C                 extrn libintl_textdomain:dword
.idata:0040914C                                         ; CODE XREF: sub_401F10+62↑p
.idata:0040914C                                         ; DATA XREF: sub_401F10+62↑r ...
.idata:00409150
.idata:00409158 ;
.idata:00409158 ; Imports from KERNEL32.dll
.idata:00409158 ;
.idata:00409158 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00409158                 extrn __imp_ExitProcess:dword
.idata:00409158                                         ; DATA XREF: ExitProcess↑r
.idata:0040915C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040915C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040915C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00409160
.idata:00409168 ;
.idata:00409168 ; Imports from MSVCP60.DLL
.idata:00409168 ;
.idata:00409168 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00409168                 extrn __imp_mbrtowc:dword
.idata:00409168                                         ; DATA XREF: mbrtowc↑r
.idata:0040916C
.idata:00409174 ;
.idata:00409174 ; Imports from msvcrt.dll
.idata:00409174 ;
.idata:00409174                 extrn __imp___getmainargs:dword
.idata:00409174                                         ; DATA XREF: __getmainargs↑r
.idata:00409178 ; int _mb_cur_max
.idata:00409178                 extrn __mb_cur_max:dword
.idata:00409178                                         ; DATA XREF: sub_402B60+23↑r
.idata:00409178                                         ; sub_402B60:loc_402BC0↑r ...
.idata:0040917C ; char ***(__cdecl *__p__environ)()
.idata:0040917C                 extrn __imp___p__environ:dword
.idata:0040917C                                         ; DATA XREF: __p__environ↑r
.idata:00409180 ; int *(__cdecl *__p__fmode)()
.idata:00409180                 extrn __imp___p__fmode:dword
.idata:00409180                                         ; DATA XREF: __p__fmode↑r
.idata:00409184 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00409184                 extrn __set_app_type:dword
.idata:00409184                                         ; CODE XREF: start+D↑p
.idata:00409184                                         ; .text:0040102D↑p
.idata:00409184                                         ; DATA XREF: ...
.idata:00409188 ; void (__cdecl *_cexit)()
.idata:00409188                 extrn __imp__cexit:dword
.idata:00409188                                         ; DATA XREF: _cexit↑r
.idata:0040918C ; int *(__cdecl *_errno)()
.idata:0040918C                 extrn __imp__errno:dword
.idata:0040918C                                         ; DATA XREF: _errno↑r
.idata:00409190 ; int (__cdecl *_filbuf)(FILE *File)
.idata:00409190                 extrn __imp__filbuf:dword
.idata:00409190                                         ; DATA XREF: _filbuf↑r
.idata:00409194 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00409194                 extrn __imp__flsbuf:dword
.idata:00409194                                         ; DATA XREF: _flsbuf↑r
.idata:00409198 ; FILE iob[]
.idata:00409198                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00409198                                         ; sub_401080+75↑r ...
.idata:0040919C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040919C                 extrn __imp__isctype:dword
.idata:0040919C                                         ; DATA XREF: _isctype↑r
.idata:004091A0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004091A0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004091A0                                         ; DATA XREF: .text:0040106C↑r
.idata:004091A4 ; const unsigned __int16 *pctype
.idata:004091A4                 extrn _pctype:dword     ; DATA XREF: sub_402B60:loc_402C98↑r
.idata:004091A4                                         ; sub_402B60:loc_402CA9↑r ...
.idata:004091A8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004091A8                 extrn __imp__setmode:dword
.idata:004091A8                                         ; DATA XREF: _setmode↑r
.idata:004091AC ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004091AC                 extrn __imp__stricmp:dword
.idata:004091AC                                         ; DATA XREF: _stricmp↑r
.idata:004091B0 ; void (__cdecl __noreturn *abort)()
.idata:004091B0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004091B4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004091B4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004091B4                                         ; DATA XREF: sub_401040+C↑r
.idata:004091B8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004091B8                 extrn __imp_calloc:dword
.idata:004091B8                                         ; DATA XREF: calloc↑r
.idata:004091BC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004091BC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004091C0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004091C0                 extrn __imp_fclose:dword
.idata:004091C0                                         ; DATA XREF: fclose↑r
.idata:004091C4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004091C4                 extrn __imp_fflush:dword
.idata:004091C4                                         ; DATA XREF: fflush↑r
.idata:004091C8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004091C8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004091CC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004091CC                 extrn __imp_fprintf:dword
.idata:004091CC                                         ; DATA XREF: fprintf↑r
.idata:004091D0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004091D0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004091D4 ; void (__cdecl *free)(void *Block)
.idata:004091D4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004091D8 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:004091D8                 extrn __imp_fwrite:dword
.idata:004091D8                                         ; DATA XREF: fwrite↑r
.idata:004091DC ; char *(__cdecl *getenv)(const char *VarName)
.idata:004091DC                 extrn __imp_getenv:dword
.idata:004091DC                                         ; DATA XREF: getenv↑r
.idata:004091E0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004091E0                 extrn __imp_iswctype:dword
.idata:004091E0                                         ; DATA XREF: iswctype↑r
.idata:004091E4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004091E4                 extrn __imp_malloc:dword
.idata:004091E4                                         ; DATA XREF: malloc↑r
.idata:004091E8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004091E8                 extrn __imp_memcpy:dword
.idata:004091E8                                         ; DATA XREF: memcpy↑r
.idata:004091EC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004091EC                 extrn __imp_memset:dword
.idata:004091EC                                         ; DATA XREF: memset↑r
.idata:004091F0 ; int (*printf)(const char *const Format, ...)
.idata:004091F0                 extrn __imp_printf:dword
.idata:004091F0                                         ; DATA XREF: printf↑r
.idata:004091F4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004091F4                 extrn __imp_realloc:dword
.idata:004091F4                                         ; DATA XREF: realloc↑r
.idata:004091F8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004091F8                 extrn __imp_setlocale:dword
.idata:004091F8                                         ; DATA XREF: setlocale↑r
.idata:004091FC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004091FC                 extrn __imp_signal:dword
.idata:004091FC                                         ; DATA XREF: signal↑r
.idata:00409200 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00409200                 extrn __imp_strchr:dword
.idata:00409200                                         ; DATA XREF: strchr↑r
.idata:00409204 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00409204                 extrn __imp_strcmp:dword
.idata:00409204                                         ; DATA XREF: strcmp↑r
.idata:00409208 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00409208                 extrn __imp_strerror:dword
.idata:00409208                                         ; DATA XREF: strerror↑r
.idata:0040920C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040920C                 extrn __imp_strlen:dword
.idata:0040920C                                         ; DATA XREF: strlen↑r
.idata:00409210 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00409210                 extrn __imp_strncmp:dword
.idata:00409210                                         ; DATA XREF: strncmp↑r
.idata:00409214 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00409214                 extrn __imp_vfprintf:dword
.idata:00409214                                         ; DATA XREF: vfprintf↑r
.idata:00409218
.idata:00409218
.idata:00409218
.idata:00409218                 end start
