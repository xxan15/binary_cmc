.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 1B2FFA15879884E98088DBD058323958D4725919FD323361FAD863BCA98CC3D3
.text:00401000 ; Input MD5    : C083CCB54D65550E2A45AEC4B8351045
.text:00401000 ; Input CRC32  : 05650244
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/cksum.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A252 (Wed Apr 20 18:41:22 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000047E0 (  18400.)
.text:00401000 ; Section size in file          : 00004800 (  18432.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401730+63↓p
.text:00401040                                         ; .text:00405200↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4051A0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405170
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401730
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4051A0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 dword_401280    dd 0                    ; DATA XREF: sub_401B60+121↓r
.text:00401280                                         ; sub_401B60+1B7↓r
.text:00401284                 dd 4C11DB7h, 9823B6Eh, 0D4326D9h, 130476DCh, 17C56B6Bh
.text:00401284                 dd 1A864DB2h, 1E475005h, 2608EDB8h, 22C9F00Fh, 2F8AD6D6h
.text:00401284                 dd 2B4BCB61h, 350C9B64h, 31CD86D3h, 3C8EA00Ah, 384FBDBDh
.text:00401284                 dd 4C11DB70h, 48D0C6C7h, 4593E01Eh, 4152FDA9h, 5F15ADACh
.text:00401284                 dd 5BD4B01Bh, 569796C2h, 52568B75h, 6A1936C8h, 6ED82B7Fh
.text:00401284                 dd 639B0DA6h, 675A1011h, 791D4014h, 7DDC5DA3h, 709F7B7Ah
.text:00401284                 dd 745E66CDh, 9823B6E0h, 9CE2AB57h, 91A18D8Eh, 95609039h
.text:00401284                 dd 8B27C03Ch, 8FE6DD8Bh, 82A5FB52h, 8664E6E5h, 0BE2B5B58h
.text:00401284                 dd 0BAEA46EFh, 0B7A96036h, 0B3687D81h, 0AD2F2D84h, 0A9EE3033h
.text:00401284                 dd 0A4AD16EAh, 0A06C0B5Dh, 0D4326D90h, 0D0F37027h, 0DDB056FEh
.text:00401284                 dd 0D9714B49h, 0C7361B4Ch, 0C3F706FBh, 0CEB42022h, 0CA753D95h
.text:00401284                 dd 0F23A8028h, 0F6FB9D9Fh, 0FBB8BB46h, 0FF79A6F1h, 0E13EF6F4h
.text:00401284                 dd 0E5FFEB43h, 0E8BCCD9Ah, 0EC7DD02Dh, 34867077h, 30476DC0h
.text:00401284                 dd 3D044B19h, 39C556AEh, 278206ABh, 23431B1Ch, 2E003DC5h
.text:00401284                 dd 2AC12072h, 128E9DCFh, 164F8078h, 1B0CA6A1h, 1FCDBB16h
.text:00401284                 dd 18AEB13h, 54BF6A4h, 808D07Dh, 0CC9CDCAh, 7897AB07h
.text:00401284                 dd 7C56B6B0h, 71159069h, 75D48DDEh, 6B93DDDBh, 6F52C06Ch
.text:00401284                 dd 6211E6B5h, 66D0FB02h, 5E9F46BFh, 5A5E5B08h, 571D7DD1h
.text:00401284                 dd 53DC6066h, 4D9B3063h, 495A2DD4h, 44190B0Dh, 40D816BAh
.text:00401284                 dd 0ACA5C697h, 0A864DB20h, 0A527FDF9h, 0A1E6E04Eh, 0BFA1B04Bh
.text:00401284                 dd 0BB60ADFCh, 0B6238B25h, 0B2E29692h, 8AAD2B2Fh, 8E6C3698h
.text:00401284                 dd 832F1041h, 87EE0DF6h, 99A95DF3h, 9D684044h, 902B669Dh
.text:00401284                 dd 94EA7B2Ah, 0E0B41DE7h, 0E4750050h, 0E9362689h, 0EDF73B3Eh
.text:00401284                 dd 0F3B06B3Bh, 0F771768Ch, 0FA325055h, 0FEF34DE2h, 0C6BCF05Fh
.text:00401284                 dd 0C27DEDE8h, 0CF3ECB31h, 0CBFFD686h, 0D5B88683h, 0D1799B34h
.text:00401284                 dd 0DC3ABDEDh, 0D8FBA05Ah, 690CE0EEh, 6DCDFD59h, 608EDB80h
.text:00401284                 dd 644FC637h, 7A089632h, 7EC98B85h, 738AAD5Ch, 774BB0EBh
.text:00401284                 dd 4F040D56h, 4BC510E1h, 46863638h, 42472B8Fh, 5C007B8Ah
.text:00401284                 dd 58C1663Dh, 558240E4h, 51435D53h, 251D3B9Eh, 21DC2629h
.text:00401284                 dd 2C9F00F0h, 285E1D47h, 36194D42h, 32D850F5h, 3F9B762Ch
.text:00401284                 dd 3B5A6B9Bh, 315D626h, 7D4CB91h, 0A97ED48h, 0E56F0FFh
.text:00401284                 dd 1011A0FAh, 14D0BD4Dh, 19939B94h, 1D528623h, 0F12F560Eh
.text:00401284                 dd 0F5EE4BB9h, 0F8AD6D60h, 0FC6C70D7h, 0E22B20D2h, 0E6EA3D65h
.text:00401284                 dd 0EBA91BBCh, 0EF68060Bh, 0D727BBB6h, 0D3E6A601h, 0DEA580D8h
.text:00401284                 dd 0DA649D6Fh, 0C423CD6Ah, 0C0E2D0DDh, 0CDA1F604h, 0C960EBB3h
.text:00401284                 dd 0BD3E8D7Eh, 0B9FF90C9h, 0B4BCB610h, 0B07DABA7h, 0AE3AFBA2h
.text:00401284                 dd 0AAFBE615h, 0A7B8C0CCh, 0A379DD7Bh, 9B3660C6h, 9FF77D71h
.text:00401284                 dd 92B45BA8h, 9675461Fh, 8832161Ah, 8CF30BADh, 81B02D74h
.text:00401284                 dd 857130C3h, 5D8A9099h, 594B8D2Eh, 5408ABF7h, 50C9B640h
.text:00401284                 dd 4E8EE645h, 4A4FFBF2h, 470CDD2Bh, 43CDC09Ch, 7B827D21h
.text:00401284                 dd 7F436096h, 7200464Fh, 76C15BF8h, 68860BFDh, 6C47164Ah
.text:00401284                 dd 61043093h, 65C52D24h, 119B4BE9h, 155A565Eh, 18197087h
.text:00401284                 dd 1CD86D30h, 29F3D35h, 65E2082h, 0B1D065Bh, 0FDC1BECh
.text:00401284                 dd 3793A651h, 3352BBE6h, 3E119D3Fh, 3AD08088h, 2497D08Dh
.text:00401284                 dd 2056CD3Ah, 2D15EBE3h, 29D4F654h, 0C5A92679h, 0C1683BCEh
.text:00401284                 dd 0CC2B1D17h, 0C8EA00A0h, 0D6AD50A5h, 0D26C4D12h, 0DF2F6BCBh
.text:00401284                 dd 0DBEE767Ch, 0E3A1CBC1h, 0E760D676h, 0EA23F0AFh, 0EEE2ED18h
.text:00401284                 dd 0F0A5BD1Dh, 0F464A0AAh, 0F9278673h, 0FDE69BC4h, 89B8FD09h
.text:00401284                 dd 8D79E0BEh, 803AC667h, 84FBDBD0h, 9ABC8BD5h, 9E7D9662h
.text:00401284                 dd 933EB0BBh, 97FFAD0Ch, 0AFB010B1h, 0AB710D06h, 0A6322BDFh
.text:00401284                 dd 0A2F33668h, 0BCB4666Dh, 0B8757BDAh, 0B5365D03h, 0B1F740B4h
.text:00401680 ; const char Locale
.text:00401680 Locale          db 0                    ; DATA XREF: sub_401730+20↓o
.text:00401680                                         ; sub_401730+B4↓o
.text:00401681                 align 20h
.text:004016A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004016A0                                         ; DATA XREF: sub_401730+3A↓o
.text:004016C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401730+42↓o
.text:004016C3                                         ; sub_401730+4F↓o ...
.text:004016CD aQFrankXia      db 'Q. Frank Xia',0     ; DATA XREF: sub_401730+70↓o
.text:004016DA a530            db '5.3.0',0            ; DATA XREF: sub_401730+80↓o
.text:004016E0 ; const FILE stru_4016E0
.text:004016E0 stru_4016E0     FILE <75736B63h, 9090006Dh, 90909090h, 90909090h, 90909090h, \
.text:004016E0                                         ; DATA XREF: sub_401730+90↓o
.text:004016E0                       90909090h, 90909090h, 90909090h>
.text:00401700 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401700                                         ; DATA XREF: sub_401730+CB↓o
.text:00401700                                         ; sub_401A30+F↓o
.text:00401727 ; const char asc_401727[]
.text:00401727 asc_401727      db '-',0                ; DATA XREF: sub_401730+14E↓o
.text:00401727                                         ; sub_401730+1AE↓o ...
.text:00401729                 align 10h
.text:00401730
.text:00401730 ; =============== S U B R O U T I N E =======================================
.text:00401730
.text:00401730 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401730
.text:00401730 sub_401730      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401730
.text:00401730 Category        = dword ptr -38h
.text:00401730 Locale          = dword ptr -34h
.text:00401730 var_30          = dword ptr -30h
.text:00401730 var_2C          = byte ptr -2Ch
.text:00401730 var_28          = dword ptr -28h
.text:00401730 var_24          = dword ptr -24h
.text:00401730 var_20          = byte ptr -20h
.text:00401730 var_1C          = dword ptr -1Ch
.text:00401730 var_E           = byte ptr -0Eh
.text:00401730 var_D           = byte ptr -0Dh
.text:00401730 arg_0           = dword ptr  8
.text:00401730 arg_4           = dword ptr  0Ch
.text:00401730
.text:00401730                 push    ebp
.text:00401731                 xor     eax, eax
.text:00401733                 mov     ebp, esp
.text:00401735                 push    edi
.text:00401736                 push    esi
.text:00401737                 push    ebx
.text:00401738                 sub     esp, 2Ch
.text:0040173B                 mov     ebx, [ebp+arg_4]
.text:0040173E                 and     esp, 0FFFFFFF0h
.text:00401741                 mov     esi, [ebp+arg_0]
.text:00401744                 call    __alloca
.text:00401749                 call    sub_405240
.text:0040174E                 mov     edx, [ebx]
.text:00401750                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401758                 mov     [esp+38h+Category], 0 ; Category
.text:0040175F                 mov     ds:dword_4071A0, edx
.text:00401765                 call    setlocale
.text:0040176A                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401772                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401779                 call    ds:__imp_libintl_bindtextdomain
.text:0040177F                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401786                 call    ds:libintl_textdomain
.text:0040178C                 mov     [esp+38h+Category], offset sub_403150 ; void (__cdecl *)()
.text:00401793                 call    sub_401040
.text:00401798                 mov     [esp+38h+var_1C], 0
.text:004017A0                 mov     dword ptr [esp+38h+var_20], offset aQFrankXia ; "Q. Frank Xia"
.text:004017A8                 mov     [esp+38h+var_24], offset sub_401A30 ; int
.text:004017B0                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:004017B8                 mov     dword ptr [esp+38h+var_2C], offset aCoreutils ; "coreutils"
.text:004017C0                 mov     [esp+38h+var_30], offset stru_4016E0 ; FILE *
.text:004017C8                 mov     [esp+38h+Locale], ebx ; int
.text:004017CC                 mov     [esp+38h+Category], esi ; int
.text:004017CF                 call    sub_403060
.text:004017D4                 mov     [esp+38h+var_28], 0 ; int
.text:004017DC                 mov     dword ptr [esp+38h+var_2C], 0 ; char
.text:004017E4                 mov     [esp+38h+var_30], offset Locale ; char *
.text:004017EC                 mov     [esp+38h+Locale], ebx ; int
.text:004017F0                 mov     [esp+38h+Category], esi ; int
.text:004017F3                 call    sub_402EC0
.text:004017F8                 inc     eax
.text:004017F9                 jz      short loc_401833
.text:004017FB                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401802                 call    ds:libintl_gettext
.text:00401808                 mov     edx, ds:_iob
.text:0040180E                 mov     ecx, ds:dword_4071A0
.text:00401814                 add     edx, 40h ; '@'
.text:00401817                 mov     [esp+38h+var_30], ecx
.text:0040181B                 mov     [esp+38h+Locale], eax ; Format
.text:0040181F                 mov     [esp+38h+Category], edx ; Stream
.text:00401822                 call    fprintf
.text:00401827                 mov     [esp+38h+Category], 1 ; Code
.text:0040182E
.text:0040182E loc_40182E:                             ; CODE XREF: sub_401730+136↓j
.text:0040182E                 call    exit
.text:00401833 ; ---------------------------------------------------------------------------
.text:00401833
.text:00401833 loc_401833:                             ; CODE XREF: sub_401730+C9↑j
.text:00401833                 mov     ds:byte_407000, 0
.text:0040183A                 mov     eax, dword_406010
.text:0040183F                 cmp     eax, esi
.text:00401841                 jz      loc_4018D6
.text:00401847                 mov     [ebp+var_D], 1
.text:0040184B                 cmp     eax, esi
.text:0040184D                 mov     edi, eax
.text:0040184F                 jl      short loc_4018A0
.text:00401851
.text:00401851 loc_401851:                             ; CODE XREF: sub_401730+1A1↓j
.text:00401851                                         ; sub_401730+1BD↓j
.text:00401851                 cmp     ds:byte_407000, 0
.text:00401858                 jnz     short loc_401868
.text:0040185A
.text:0040185A loc_40185A:                             ; CODE XREF: sub_401730+147↓j
.text:0040185A                                         ; sub_401730+168↓j
.text:0040185A                 xor     edx, edx
.text:0040185C                 cmp     [ebp+var_D], 0
.text:00401860                 setz    dl
.text:00401863                 mov     [esp+38h+Category], edx
.text:00401866                 jmp     short loc_40182E
.text:00401868 ; ---------------------------------------------------------------------------
.text:00401868
.text:00401868 loc_401868:                             ; CODE XREF: sub_401730+128↑j
.text:00401868                 mov     ebx, ds:_iob
.text:0040186E                 mov     [esp+38h+Category], ebx ; Stream
.text:00401871                 call    fclose
.text:00401876                 inc     eax
.text:00401877                 jnz     short loc_40185A
.text:00401879                 call    _errno
.text:0040187E                 mov     [esp+38h+var_30], offset asc_401727 ; "-"
.text:00401886                 mov     esi, [eax]
.text:00401888                 mov     [esp+38h+Category], 1 ; Code
.text:0040188F                 mov     [esp+38h+Locale], esi ; ErrorMessage
.text:00401893                 call    sub_404EC0
.text:00401898                 jmp     short loc_40185A
.text:00401898 ; ---------------------------------------------------------------------------
.text:0040189A                 align 10h
.text:004018A0
.text:004018A0 loc_4018A0:                             ; CODE XREF: sub_401730+11F↑j
.text:004018A0                                         ; sub_401730+19F↓j
.text:004018A0                 mov     [esp+38h+Locale], 1
.text:004018A8                 mov     edx, [ebx+edi*4]
.text:004018AB                 mov     [ebp+var_E], 0
.text:004018AF                 mov     [esp+38h+Category], edx
.text:004018B2                 call    sub_401B60
.text:004018B7                 test    al, al
.text:004018B9                 jz      short loc_4018C5
.text:004018BB                 cmp     [ebp+var_D], 0
.text:004018BF                 jz      short loc_4018C5
.text:004018C1                 mov     [ebp+var_E], 1
.text:004018C5
.text:004018C5 loc_4018C5:                             ; CODE XREF: sub_401730+189↑j
.text:004018C5                                         ; sub_401730+18F↑j
.text:004018C5                 movzx   ecx, [ebp+var_E]
.text:004018C9                 inc     edi
.text:004018CA                 cmp     edi, esi
.text:004018CC                 mov     [ebp+var_D], cl
.text:004018CF                 jl      short loc_4018A0
.text:004018D1                 jmp     loc_401851
.text:004018D6 ; ---------------------------------------------------------------------------
.text:004018D6
.text:004018D6 loc_4018D6:                             ; CODE XREF: sub_401730+111↑j
.text:004018D6                 mov     [esp+38h+Locale], 0
.text:004018DE                 mov     [esp+38h+Category], offset asc_401727 ; "-"
.text:004018E5                 call    sub_401B60
.text:004018EA                 mov     [ebp+var_D], al
.text:004018ED                 jmp     loc_401851
.text:004018ED sub_401730      endp
.text:004018ED
.text:004018ED ; ---------------------------------------------------------------------------
.text:004018F2                 align 10h
.text:00401900 aUsageSFileOrSO db 'Usage: %s [FILE]...',0Ah
.text:00401900                                         ; DATA XREF: sub_401A30:loc_401A73↓o
.text:00401900                 db '  or:  %s [OPTION]',0Ah,0
.text:00401928                 align 20h
.text:00401940 aPrintCrcChecks db 'Print CRC checksum and byte counts of each FILE.',0Ah
.text:00401940                                         ; DATA XREF: sub_401A30+66↓o
.text:00401940                 db 0Ah,0
.text:00401973                 align 10h
.text:00401980 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401980                                         ; DATA XREF: sub_401A30+88↓o
.text:004019AD                 align 20h
.text:004019C0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004019C0                                         ; DATA XREF: sub_401A30+AA↓o
.text:004019F6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401A30+CC↓o
.text:004019F6                 db 'Report bugs to <%s>.',0Ah,0
.text:00401A0D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401A0D                                         ; DATA XREF: sub_401A30+D9↓o
.text:00401A23                 align 10h
.text:00401A30
.text:00401A30 ; =============== S U B R O U T I N E =======================================
.text:00401A30
.text:00401A30 ; Attributes: noreturn
.text:00401A30
.text:00401A30 ; void __cdecl __noreturn sub_401A30(int Code)
.text:00401A30 sub_401A30      proc near               ; DATA XREF: sub_401730+78↑o
.text:00401A30
.text:00401A30 Stream          = dword ptr -1Ch
.text:00401A30 Format          = dword ptr -18h
.text:00401A30 var_14          = dword ptr -14h
.text:00401A30 var_4           = dword ptr -4
.text:00401A30 Code            = dword ptr  4
.text:00401A30
.text:00401A30                 sub     esp, 1Ch
.text:00401A33                 mov     [esp+1Ch+var_4], ebx
.text:00401A37                 mov     ebx, [esp+1Ch+Code]
.text:00401A3B                 test    ebx, ebx
.text:00401A3D                 jz      short loc_401A73
.text:00401A3F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401A46                 call    ds:libintl_gettext
.text:00401A4C                 mov     edx, ds:_iob
.text:00401A52                 mov     ecx, ds:dword_4071A0
.text:00401A58                 add     edx, 40h ; '@'
.text:00401A5B                 mov     [esp+1Ch+var_14], ecx
.text:00401A5F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401A63                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401A66                 call    fprintf
.text:00401A6B
.text:00401A6B loc_401A6B:                             ; CODE XREF: sub_401A30+E9↓j
.text:00401A6B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00401A6E                 call    exit
.text:00401A73 ; ---------------------------------------------------------------------------
.text:00401A73
.text:00401A73 loc_401A73:                             ; CODE XREF: sub_401A30+D↑j
.text:00401A73                 mov     [esp+1Ch+Stream], offset aUsageSFileOrSO ; "Usage: %s [FILE]...\n  or:  %s [OPTION]"...
.text:00401A7A                 call    ds:libintl_gettext
.text:00401A80                 mov     ecx, ds:dword_4071A0
.text:00401A86                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401A89                 mov     [esp+1Ch+var_14], ecx
.text:00401A8D                 mov     [esp+1Ch+Format], ecx
.text:00401A91                 call    printf
.text:00401A96                 mov     [esp+1Ch+Stream], offset aPrintCrcChecks ; "Print CRC checksum and byte counts of e"...
.text:00401A9D                 call    ds:libintl_gettext
.text:00401AA3                 mov     ecx, ds:_iob
.text:00401AA9                 add     ecx, 20h ; ' '
.text:00401AAC                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401AB0                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401AB3                 call    fputs
.text:00401AB8                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401ABF                 call    ds:libintl_gettext
.text:00401AC5                 mov     ecx, ds:_iob
.text:00401ACB                 add     ecx, 20h ; ' '
.text:00401ACE                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401AD2                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401AD5                 call    fputs
.text:00401ADA                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401AE1                 call    ds:libintl_gettext
.text:00401AE7                 mov     ecx, ds:_iob
.text:00401AED                 add     ecx, 20h ; ' '
.text:00401AF0                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401AF4                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401AF7                 call    fputs
.text:00401AFC                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401B03                 call    ds:libintl_gettext
.text:00401B09                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401B11                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401B14                 call    printf
.text:00401B19                 jmp     loc_401A6B
.text:00401B19 sub_401A30      endp
.text:00401B19
.text:00401B19 ; ---------------------------------------------------------------------------
.text:00401B1E aSFileTooLong   db '%s: file too long',0
.text:00401B1E                                         ; DATA XREF: sub_401B60:loc_401C26↓o
.text:00401B30 ; const char Format[]
.text:00401B30 Format          db '%u %s %s',0Ah,0     ; DATA XREF: sub_401B60+1EB↓o
.text:00401B3A aWriteError     db 'write error',0      ; DATA XREF: sub_401B60:loc_401D77↓o
.text:00401B46 ; const char aS[]
.text:00401B46 aS              db '-: %s',0            ; DATA XREF: sub_401B60+22F↓o
.text:00401B4C ; const char aUS[]
.text:00401B4C aUS             db '%u %s',0Ah,0        ; DATA XREF: sub_401B60+253↓o
.text:00401B53 ; const char aS_0[]
.text:00401B53 aS_0            db '%s',0               ; DATA XREF: sub_401B60+266↓o
.text:00401B53                                         ; sub_401B60+297↓o
.text:00401B56 ; const char aR[]
.text:00401B56 aR              db 'r',0                ; DATA XREF: sub_401B60:loc_401E6C↓o
.text:00401B58                 align 10h
.text:00401B60
.text:00401B60 ; =============== S U B R O U T I N E =======================================
.text:00401B60
.text:00401B60
.text:00401B60 sub_401B60      proc near               ; CODE XREF: sub_401730+182↑p
.text:00401B60                                         ; sub_401730+1B5↑p
.text:00401B60
.text:00401B60 FileHandle      = dword ptr -1006Ch
.text:00401B60 ElementSize     = dword ptr -10068h
.text:00401B60 ElementCount    = dword ptr -10064h
.text:00401B60 Stream          = dword ptr -10060h
.text:00401B60 var_10050       = dword ptr -10050h
.text:00401B60 var_1004C       = dword ptr -1004Ch
.text:00401B60 var_10048       = dword ptr -10048h
.text:00401B60 var_1003D       = byte ptr -1003Dh
.text:00401B60 var_1003C       = byte ptr -1003Ch
.text:00401B60 Buffer          = byte ptr -1001Ch
.text:00401B60 FileName        = dword ptr  4
.text:00401B60 arg_4           = byte ptr  8
.text:00401B60
.text:00401B60                 push    ebp
.text:00401B61                 mov     eax, 1005Ch
.text:00401B66                 push    edi
.text:00401B67                 push    esi
.text:00401B68                 push    ebx             ; Size
.text:00401B69                 call    __alloca
.text:00401B6E                 movzx   edx, [esp+1006Ch+arg_4]
.text:00401B76                 mov     edi, offset asc_401727 ; "-"
.text:00401B7B                 mov     [esp+1006Ch+var_1004C], 0
.text:00401B83                 mov     esi, [esp+1006Ch+FileName]
.text:00401B8A                 mov     ecx, 2
.text:00401B8F                 mov     [esp+1006Ch+var_10048], 0
.text:00401B97                 xor     ebp, ebp
.text:00401B99                 cld
.text:00401B9A                 mov     [esp+1006Ch+var_1003D], dl
.text:00401B9E                 repe cmpsb
.text:00401BA0                 jnz     loc_401E6C
.text:00401BA6                 mov     ds:byte_407000, 1
.text:00401BAD                 mov     eax, ds:_iob
.text:00401BB2                 mov     [esp+1006Ch+var_10050], eax
.text:00401BB6
.text:00401BB6 loc_401BB6:                             ; CODE XREF: sub_401B60+329↓j
.text:00401BB6                 mov     ebx, [esp+1006Ch+var_10050]
.text:00401BBA                 lea     edi, [esp+1006Ch+Buffer]
.text:00401BBE                 mov     ecx, [ebx+10h]
.text:00401BC1                 mov     [esp+1006Ch+FileHandle], ecx ; FileHandle
.text:00401BC4                 call    _isatty
.text:00401BC9                 test    eax, eax
.text:00401BCB                 jz      loc_401E4C
.text:00401BD1                 jmp     short loc_401BE0
.text:00401BD1 ; ---------------------------------------------------------------------------
.text:00401BD3                 align 10h
.text:00401BE0
.text:00401BE0 loc_401BE0:                             ; CODE XREF: sub_401B60+71↑j
.text:00401BE0                                         ; sub_401B60+138↓j ...
.text:00401BE0                 mov     [esp+1006Ch+ElementCount], 10000h ; ElementCount
.text:00401BE8                 mov     esi, [esp+1006Ch+var_10050]
.text:00401BEC                 mov     [esp+1006Ch+ElementSize], 1 ; ElementSize
.text:00401BF4                 mov     [esp+1006Ch+FileHandle], edi ; Buffer
.text:00401BF7                 mov     [esp+1006Ch+Stream], esi ; Stream
.text:00401BFB                 call    fread
.text:00401C00                 test    eax, eax
.text:00401C02                 mov     ebx, eax
.text:00401C04                 jz      loc_401E40
.text:00401C0A                 mov     eax, ebx
.text:00401C0C                 xor     ecx, ecx
.text:00401C0E                 mov     esi, edi
.text:00401C10                 add     eax, [esp+1006Ch+var_1004C]
.text:00401C14                 adc     ecx, [esp+1006Ch+var_10048]
.text:00401C18                 cmp     ecx, [esp+1006Ch+var_10048]
.text:00401C1C                 ja      short loc_401C60
.text:00401C1E                 jb      short loc_401C26
.text:00401C20                 cmp     eax, [esp+1006Ch+var_1004C]
.text:00401C24                 jnb     short loc_401C60
.text:00401C26
.text:00401C26 loc_401C26:                             ; CODE XREF: sub_401B60+BE↑j
.text:00401C26                 mov     [esp+1006Ch+FileHandle], offset aSFileTooLong ; "%s: file too long"
.text:00401C2D                 call    ds:libintl_gettext
.text:00401C33                 mov     [esp+1006Ch+ElementSize], 0 ; ErrorMessage
.text:00401C3B                 mov     ecx, [esp+1006Ch+FileName]
.text:00401C42                 mov     [esp+1006Ch+FileHandle], 1 ; Code
.text:00401C49                 mov     [esp+1006Ch+Stream], ecx ; char
.text:00401C4D                 mov     [esp+1006Ch+ElementCount], eax ; char *
.text:00401C51                 call    sub_404EC0
.text:00401C56                 lea     esi, [esi+0]
.text:00401C59                 lea     edi, [edi+0]
.text:00401C60
.text:00401C60 loc_401C60:                             ; CODE XREF: sub_401B60+BC↑j
.text:00401C60                                         ; sub_401B60+C4↑j
.text:00401C60                 xor     ecx, ecx
.text:00401C62                 add     [esp+1006Ch+var_1004C], ebx
.text:00401C66                 adc     [esp+1006Ch+var_10048], ecx
.text:00401C6A                 dec     ebx
.text:00401C6B                 cmp     ebx, 0FFFFFFFFh
.text:00401C6E                 jz      short loc_401C8F
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401B60+12D↓j
.text:00401C70                 movzx   eax, byte ptr [esi]
.text:00401C73                 mov     ecx, ebp
.text:00401C75                 shr     ebp, 18h
.text:00401C78                 shl     ecx, 8
.text:00401C7B                 dec     ebx
.text:00401C7C                 inc     esi
.text:00401C7D                 xor     eax, ebp
.text:00401C7F                 mov     ebp, ecx
.text:00401C81                 mov     ecx, ds:dword_401280[eax*4]
.text:00401C88                 xor     ebp, ecx
.text:00401C8A                 cmp     ebx, 0FFFFFFFFh
.text:00401C8D                 jnz     short loc_401C70
.text:00401C8F
.text:00401C8F loc_401C8F:                             ; CODE XREF: sub_401B60+10E↑j
.text:00401C8F                 mov     ebx, [esp+1006Ch+var_10050]
.text:00401C93                 mov     eax, [ebx+0Ch]
.text:00401C96                 test    al, 10h
.text:00401C98                 jz      loc_401BE0
.text:00401C9E
.text:00401C9E loc_401C9E:                             ; CODE XREF: sub_401B60+2E7↓j
.text:00401C9E                 test    al, 20h
.text:00401CA0                 jnz     loc_401DF2
.text:00401CA6                 cld
.text:00401CA7                 mov     esi, [esp+1006Ch+FileName]
.text:00401CAE                 mov     ecx, 2
.text:00401CB3                 mov     edi, offset asc_401727 ; "-"
.text:00401CB8                 repe cmpsb
.text:00401CBA                 jz      short loc_401CCF
.text:00401CBC                 mov     eax, [esp+1006Ch+var_10050]
.text:00401CC0                 mov     [esp+1006Ch+FileHandle], eax ; Stream
.text:00401CC3                 call    fclose
.text:00401CC8                 inc     eax
.text:00401CC9                 jz      loc_401DC1
.text:00401CCF
.text:00401CCF loc_401CCF:                             ; CODE XREF: sub_401B60+15A↑j
.text:00401CCF                 mov     ecx, [esp+1006Ch+var_10048]
.text:00401CD3                 lea     ebx, [esp+1006Ch+var_1003C]
.text:00401CD7                 mov     edx, [esp+1006Ch+var_1004C]
.text:00401CDB                 mov     [esp+1006Ch+ElementCount], ebx
.text:00401CDF                 mov     [esp+1006Ch+ElementSize], ecx
.text:00401CE3                 mov     [esp+1006Ch+FileHandle], edx
.text:00401CE6                 call    sub_403230
.text:00401CEB                 mov     edi, [esp+1006Ch+var_10048]
.text:00401CEF                 mov     ecx, eax
.text:00401CF1                 or      edi, [esp+1006Ch+var_1004C]
.text:00401CF5                 jz      short loc_401D33
.text:00401CF7
.text:00401CF7 loc_401CF7:                             ; CODE XREF: sub_401B60+1D1↓j
.text:00401CF7                 mov     edx, [esp+1006Ch+var_1004C]
.text:00401CFB                 mov     esi, ebp
.text:00401CFD                 shr     ebp, 18h
.text:00401D00                 shl     esi, 8
.text:00401D03                 mov     eax, [esp+1006Ch+var_10048]
.text:00401D07                 xor     ebp, edx
.text:00401D09                 mov     ebx, ebp
.text:00401D0B                 and     ebx, 0FFh
.text:00401D11                 mov     ebp, esi
.text:00401D13                 mov     esi, [esp+1006Ch+var_1004C]
.text:00401D17                 mov     edi, ds:dword_401280[ebx*4]
.text:00401D1E                 shrd    esi, eax, 8
.text:00401D22                 shr     eax, 8
.text:00401D25                 xor     ebp, edi
.text:00401D27                 mov     [esp+1006Ch+var_10048], eax
.text:00401D2B                 or      eax, esi
.text:00401D2D                 mov     [esp+1006Ch+var_1004C], esi
.text:00401D31                 jnz     short loc_401CF7
.text:00401D33
.text:00401D33 loc_401D33:                             ; CODE XREF: sub_401B60+195↑j
.text:00401D33                 cmp     [esp+1006Ch+var_1003D], 0
.text:00401D38                 not     ebp
.text:00401D3A                 jz      short loc_401DAB
.text:00401D3C                 mov     [esp+1006Ch+ElementCount], ecx
.text:00401D40                 mov     eax, [esp+1006Ch+FileName]
.text:00401D47                 mov     [esp+1006Ch+ElementSize], ebp
.text:00401D4B                 mov     [esp+1006Ch+FileHandle], offset Format ; "%u %s %s\n"
.text:00401D52                 mov     [esp+1006Ch+Stream], eax
.text:00401D56                 call    printf
.text:00401D5B
.text:00401D5B loc_401D5B:                             ; CODE XREF: sub_401B60+25F↓j
.text:00401D5B                 mov     ebp, ds:_iob
.text:00401D61                 test    byte ptr [ebp+2Ch], 20h
.text:00401D65                 jnz     short loc_401D77
.text:00401D67
.text:00401D67 loc_401D67:                             ; CODE XREF: sub_401B60+249↓j
.text:00401D67                 mov     eax, 1
.text:00401D6C
.text:00401D6C loc_401D6C:                             ; CODE XREF: sub_401B60+28D↓j
.text:00401D6C                 add     esp, 1005Ch
.text:00401D72                 pop     ebx
.text:00401D73                 pop     esi
.text:00401D74                 pop     edi
.text:00401D75                 pop     ebp
.text:00401D76                 retn
.text:00401D77 ; ---------------------------------------------------------------------------
.text:00401D77
.text:00401D77 loc_401D77:                             ; CODE XREF: sub_401B60+205↑j
.text:00401D77                 mov     [esp+1006Ch+FileHandle], offset aWriteError ; "write error"
.text:00401D7E                 call    ds:libintl_gettext
.text:00401D84                 mov     edi, eax
.text:00401D86                 call    _errno
.text:00401D8B                 mov     [esp+1006Ch+Stream], edi ; char
.text:00401D8F                 mov     [esp+1006Ch+ElementCount], offset aS ; "-: %s"
.text:00401D97                 mov     ecx, [eax]
.text:00401D99                 mov     [esp+1006Ch+FileHandle], 1 ; Code
.text:00401DA0                 mov     [esp+1006Ch+ElementSize], ecx ; ErrorMessage
.text:00401DA4                 call    sub_404EC0
.text:00401DA9                 jmp     short loc_401D67
.text:00401DAB ; ---------------------------------------------------------------------------
.text:00401DAB
.text:00401DAB loc_401DAB:                             ; CODE XREF: sub_401B60+1DA↑j
.text:00401DAB                 mov     [esp+1006Ch+ElementCount], ecx
.text:00401DAF                 mov     [esp+1006Ch+ElementSize], ebp
.text:00401DB3                 mov     [esp+1006Ch+FileHandle], offset aUS ; "%u %s\n"
.text:00401DBA                 call    printf
.text:00401DBF                 jmp     short loc_401D5B
.text:00401DC1 ; ---------------------------------------------------------------------------
.text:00401DC1
.text:00401DC1 loc_401DC1:                             ; CODE XREF: sub_401B60+169↑j
.text:00401DC1                                         ; sub_401B60+32F↓j
.text:00401DC1                 call    _errno
.text:00401DC6                 mov     [esp+1006Ch+ElementCount], offset aS_0 ; "%s"
.text:00401DCE                 mov     esi, [esp+1006Ch+FileName]
.text:00401DD5                 mov     [esp+1006Ch+Stream], esi ; char
.text:00401DD9                 mov     ebx, [eax]
.text:00401DDB                 mov     [esp+1006Ch+FileHandle], 0 ; Code
.text:00401DE2                 mov     [esp+1006Ch+ElementSize], ebx ; ErrorMessage
.text:00401DE6                 call    sub_404EC0
.text:00401DEB
.text:00401DEB loc_401DEB:                             ; CODE XREF: sub_401B60+2D0↓j
.text:00401DEB                                         ; sub_401B60+2DE↓j
.text:00401DEB                 xor     eax, eax
.text:00401DED                 jmp     loc_401D6C
.text:00401DF2 ; ---------------------------------------------------------------------------
.text:00401DF2
.text:00401DF2 loc_401DF2:                             ; CODE XREF: sub_401B60+140↑j
.text:00401DF2                 call    _errno
.text:00401DF7                 mov     [esp+1006Ch+ElementCount], offset aS_0 ; "%s"
.text:00401DFF                 mov     ecx, [esp+1006Ch+FileName]
.text:00401E06                 mov     edi, offset asc_401727 ; "-"
.text:00401E0B                 mov     [esp+1006Ch+Stream], ecx ; char
.text:00401E0F                 mov     ebp, [eax]
.text:00401E11                 mov     [esp+1006Ch+FileHandle], 0 ; Code
.text:00401E18                 mov     [esp+1006Ch+ElementSize], ebp ; ErrorMessage
.text:00401E1C                 call    sub_404EC0
.text:00401E21                 cld
.text:00401E22                 mov     esi, [esp+1006Ch+FileName]
.text:00401E29                 mov     ecx, 2
.text:00401E2E                 repe cmpsb
.text:00401E30                 jz      short loc_401DEB
.text:00401E32                 mov     edx, [esp+1006Ch+var_10050]
.text:00401E36                 mov     [esp+1006Ch+FileHandle], edx ; Stream
.text:00401E39                 call    fclose
.text:00401E3E                 jmp     short loc_401DEB
.text:00401E40 ; ---------------------------------------------------------------------------
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_401B60+A4↑j
.text:00401E40                 mov     edi, [esp+1006Ch+var_10050]
.text:00401E44                 mov     eax, [edi+0Ch]
.text:00401E47                 jmp     loc_401C9E
.text:00401E4C ; ---------------------------------------------------------------------------
.text:00401E4C
.text:00401E4C loc_401E4C:                             ; CODE XREF: sub_401B60+6B↑j
.text:00401E4C                 mov     [esp+1006Ch+ElementSize], 8000h ; Mode
.text:00401E54                 mov     edi, [esp+1006Ch+var_10050]
.text:00401E58                 mov     esi, [edi+10h]
.text:00401E5B                 lea     edi, [esp+1006Ch+Buffer]
.text:00401E5F                 mov     [esp+1006Ch+FileHandle], esi ; FileHandle
.text:00401E62                 call    _setmode
.text:00401E67                 jmp     loc_401BE0
.text:00401E6C ; ---------------------------------------------------------------------------
.text:00401E6C
.text:00401E6C loc_401E6C:                             ; CODE XREF: sub_401B60+40↑j
.text:00401E6C                 mov     [esp+1006Ch+ElementSize], offset aR ; "r"
.text:00401E74                 mov     edx, [esp+1006Ch+FileName]
.text:00401E7B                 mov     [esp+1006Ch+FileHandle], edx ; FileName
.text:00401E7E                 call    fopen
.text:00401E83                 mov     [esp+1006Ch+var_10050], eax
.text:00401E87                 test    eax, eax
.text:00401E89                 jnz     loc_401BB6
.text:00401E8F                 jmp     loc_401DC1
.text:00401E8F sub_401B60      endp
.text:00401E8F
.text:00401E8F ; ---------------------------------------------------------------------------
.text:00401E94                 align 10h
.text:00401EA0 dword_401EA0    dd 90002D2Dh, 7 dup(90909090h)
.text:00401EA0                                         ; DATA XREF: sub_4020F0+E4↓o
.text:00401EC0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401EC0                                         ; DATA XREF: sub_4020F0+2FC↓o
.text:00401EED                 align 20h
.text:00401F00 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401F00                                         ; DATA XREF: sub_4020F0:loc_402452↓o
.text:00401F2D                 align 20h
.text:00401F40 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401F40                                         ; DATA XREF: sub_4020F0:loc_4024F0↓o
.text:00401F40                                         ; sub_4020F0:loc_4028B7↓o
.text:00401F66                 align 20h
.text:00401F80 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401F80                                         ; DATA XREF: sub_4020F0+48E↓o
.text:00401FA0 dword_401FA0    dd 90909000h, 7 dup(90909090h)
.text:00401FA0                                         ; DATA XREF: sub_4020F0:loc_4025C1↓o
.text:00401FC0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401FC0                                         ; DATA XREF: sub_4020F0:loc_4025DA↓o
.text:00401FE0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401FE0                                         ; DATA XREF: sub_4020F0:loc_4026BF↓o
.text:00401FE0                                         ; sub_4020F0:loc_4029EC↓o
.text:00402007                 align 20h
.text:00402020 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402020                                         ; DATA XREF: sub_4020F0:loc_402833↓o
.text:0040204E                 align 20h
.text:00402060 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402060                                         ; DATA XREF: sub_4020F0:loc_40291F↓o
.text:00402081 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402081                                         ; DATA XREF: sub_4020F0+93F↓o
.text:0040209B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040209B                                         ; DATA XREF: sub_4020F0:loc_402A67↓o
.text:004020B5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004020B5                                         ; DATA XREF: sub_4020F0:loc_402A8E↓o
.text:004020D3 ; const char VarName[]
.text:004020D3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4020F0:loc_402C40↓o
.text:004020E3                 align 10h
.text:004020F0
.text:004020F0 ; =============== S U B R O U T I N E =======================================
.text:004020F0
.text:004020F0
.text:004020F0 ; int __cdecl sub_4020F0(int, int, char *Str, int, int, int, int, int)
.text:004020F0 sub_4020F0      proc near               ; CODE XREF: sub_402C80+5A↓p
.text:004020F0                                         ; .text:00402D6A↓p ...
.text:004020F0
.text:004020F0 Str1            = dword ptr -5Ch
.text:004020F0 Str2            = dword ptr -58h
.text:004020F0 MaxCount        = dword ptr -54h
.text:004020F0 var_50          = dword ptr -50h
.text:004020F0 var_4C          = dword ptr -4Ch
.text:004020F0 var_3C          = dword ptr -3Ch
.text:004020F0 var_38          = dword ptr -38h
.text:004020F0 var_34          = dword ptr -34h
.text:004020F0 var_30          = dword ptr -30h
.text:004020F0 var_2C          = dword ptr -2Ch
.text:004020F0 var_28          = dword ptr -28h
.text:004020F0 var_24          = dword ptr -24h
.text:004020F0 var_20          = dword ptr -20h
.text:004020F0 var_1C          = dword ptr -1Ch
.text:004020F0 var_18          = dword ptr -18h
.text:004020F0 var_14          = dword ptr -14h
.text:004020F0 arg_0           = dword ptr  4
.text:004020F0 arg_4           = dword ptr  8
.text:004020F0 Str             = dword ptr  0Ch
.text:004020F0 arg_C           = dword ptr  10h
.text:004020F0 arg_10          = dword ptr  14h
.text:004020F0 arg_14          = dword ptr  18h
.text:004020F0 arg_18          = dword ptr  1Ch
.text:004020F0 arg_1C          = dword ptr  20h
.text:004020F0
.text:004020F0                 push    ebp
.text:004020F1                 mov     eax, 0FFFFFFFFh
.text:004020F6                 push    edi
.text:004020F7                 push    esi
.text:004020F8                 push    ebx
.text:004020F9                 sub     esp, 4Ch
.text:004020FC                 mov     esi, [esp+5Ch+Str]
.text:00402100                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402104                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402107                 mov     ebx, [ebp+4]
.text:0040210A                 setz    dl
.text:0040210D                 movzx   ecx, dl
.text:00402110                 dec     ecx
.text:00402111                 and     ecx, ebx
.text:00402113                 mov     [esp+5Ch+var_14], ecx
.text:00402117                 mov     ecx, [esp+5Ch+arg_0]
.text:0040211B                 test    ecx, ecx
.text:0040211D                 jle     loc_402247
.text:00402123                 mov     dword ptr [ebp+0Ch], 0
.text:0040212A                 mov     ebx, [ebp+0]
.text:0040212D                 test    ebx, ebx
.text:0040212F                 jz      loc_402C60
.text:00402135                 mov     edi, [ebp+10h]
.text:00402138                 test    edi, edi
.text:0040213A                 jnz     short loc_402193
.text:0040213C                 lea     esi, [esi+0]
.text:00402140
.text:00402140 loc_402140:                             ; CODE XREF: sub_4020F0+B7C↓j
.text:00402140                 mov     [ebp+24h], ebx
.text:00402143                 mov     esi, [esp+5Ch+Str]
.text:00402147                 mov     [ebp+20h], ebx
.text:0040214A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040214E                 xor     ebx, ebx
.text:00402150                 mov     dword ptr [ebp+14h], 0
.text:00402157                 test    ecx, ecx
.text:00402159                 jz      loc_402C40
.text:0040215F
.text:0040215F loc_40215F:                             ; CODE XREF: sub_4020F0+B64↓j
.text:0040215F                 mov     ebx, 1
.text:00402164
.text:00402164 loc_402164:                             ; CODE XREF: sub_4020F0+B5E↓j
.text:00402164                 mov     [ebp+1Ch], ebx
.text:00402167                 mov     ecx, [esp+5Ch+Str]
.text:0040216B                 movzx   eax, byte ptr [ecx]
.text:0040216E                 cmp     al, 2Dh ; '-'
.text:00402170                 jz      loc_402C30
.text:00402176                 cmp     al, 2Bh ; '+'
.text:00402178                 jz      loc_402C19
.text:0040217E                 xor     edx, edx
.text:00402180                 test    ebx, ebx
.text:00402182                 setz    dl
.text:00402185                 mov     [ebp+18h], edx
.text:00402188
.text:00402188 loc_402188:                             ; CODE XREF: sub_4020F0+B35↓j
.text:00402188                 mov     [esp+5Ch+Str], esi
.text:0040218C                 mov     dword ptr [ebp+10h], 1
.text:00402193
.text:00402193 loc_402193:                             ; CODE XREF: sub_4020F0+4A↑j
.text:00402193                 mov     eax, [ebp+14h]
.text:00402196                 test    eax, eax
.text:00402198                 jz      short loc_4021A3
.text:0040219A                 cmp     byte ptr [eax], 0
.text:0040219D                 jnz     loc_402280
.text:004021A3
.text:004021A3 loc_4021A3:                             ; CODE XREF: sub_4020F0+A8↑j
.text:004021A3                 mov     ebx, [ebp+0]
.text:004021A6                 cmp     [ebp+24h], ebx
.text:004021A9                 jle     short loc_4021AE
.text:004021AB                 mov     [ebp+24h], ebx
.text:004021AE
.text:004021AE loc_4021AE:                             ; CODE XREF: sub_4020F0+B9↑j
.text:004021AE                 cmp     [ebp+20h], ebx
.text:004021B1                 jle     short loc_4021B6
.text:004021B3                 mov     [ebp+20h], ebx
.text:004021B6
.text:004021B6 loc_4021B6:                             ; CODE XREF: sub_4020F0+C1↑j
.text:004021B6                 cmp     dword ptr [ebp+18h], 1
.text:004021BA                 jz      loc_402B90
.text:004021C0
.text:004021C0 loc_4021C0:                             ; CODE XREF: sub_4020F0+B13↓j
.text:004021C0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004021C4                 jz      loc_402B74
.text:004021CA                 cld
.text:004021CB                 mov     ecx, [esp+5Ch+arg_4]
.text:004021CF                 mov     edx, 3
.text:004021D4                 mov     edi, offset dword_401EA0
.text:004021D9                 mov     esi, [ecx+ebx*4]
.text:004021DC                 mov     ecx, edx
.text:004021DE                 repe cmpsb
.text:004021E0                 jnz     short loc_40221C
.text:004021E2                 mov     edx, [ebp+24h]
.text:004021E5                 lea     eax, [ebx+1]
.text:004021E8                 cmp     [ebp+20h], edx
.text:004021EB                 mov     [ebp+0], eax
.text:004021EE                 jz      loc_402B88
.text:004021F4                 cmp     edx, eax
.text:004021F6                 jz      short loc_402210
.text:004021F8                 mov     [esp+5Ch+Str2], ebp
.text:004021FC                 mov     ebx, [esp+5Ch+arg_4]
.text:00402200                 mov     [esp+5Ch+Str1], ebx
.text:00402203                 call    sub_402DA0
.text:00402208                 nop
.text:00402209                 lea     esi, [esi+0]
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_4020F0+106↑j
.text:00402210                                         ; sub_4020F0+A9B↓j
.text:00402210                 mov     eax, [esp+5Ch+arg_0]
.text:00402214                 mov     ebx, eax
.text:00402216                 mov     [ebp+24h], eax
.text:00402219                 mov     [ebp+0], eax
.text:0040221C
.text:0040221C loc_40221C:                             ; CODE XREF: sub_4020F0+F0↑j
.text:0040221C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402220                 jz      loc_402B74
.text:00402226                 mov     esi, [esp+5Ch+arg_4]
.text:0040222A                 mov     eax, [esi+ebx*4]
.text:0040222D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402230                 jz      short loc_402257
.text:00402232
.text:00402232 loc_402232:                             ; CODE XREF: sub_4020F0+16D↓j
.text:00402232                 mov     edx, [ebp+18h]
.text:00402235                 test    edx, edx
.text:00402237                 jz      short loc_402250
.text:00402239                 mov     [ebp+0Ch], eax
.text:0040223C                 lea     edi, [ebx+1]
.text:0040223F                 mov     eax, 1
.text:00402244                 mov     [ebp+0], edi
.text:00402247
.text:00402247 loc_402247:                             ; CODE XREF: sub_4020F0+2D↑j
.text:00402247                                         ; sub_4020F0+165↓j ...
.text:00402247                 add     esp, 4Ch
.text:0040224A                 pop     ebx
.text:0040224B                 pop     esi
.text:0040224C                 pop     edi
.text:0040224D                 pop     ebp
.text:0040224E                 retn
.text:0040224E ; ---------------------------------------------------------------------------
.text:0040224F                 align 10h
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_4020F0+147↑j
.text:00402250                                         ; sub_4020F0+A8A↓j ...
.text:00402250                 mov     eax, 0FFFFFFFFh
.text:00402255                 jmp     short loc_402247
.text:00402257 ; ---------------------------------------------------------------------------
.text:00402257
.text:00402257 loc_402257:                             ; CODE XREF: sub_4020F0+140↑j
.text:00402257                 movzx   edx, byte ptr [eax+1]
.text:0040225B                 test    dl, dl
.text:0040225D                 jz      short loc_402232
.text:0040225F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402263                 xor     ecx, ecx
.text:00402265                 test    ebx, ebx
.text:00402267                 jz      short loc_402272
.text:00402269                 cmp     dl, 2Dh ; '-'
.text:0040226C                 jz      loc_402B6A
.text:00402272
.text:00402272 loc_402272:                             ; CODE XREF: sub_4020F0+177↑j
.text:00402272                                         ; sub_4020F0+A7F↓j
.text:00402272                 lea     esi, [ecx+eax+1]
.text:00402276                 mov     [ebp+14h], esi
.text:00402279                 lea     esi, [esi+0]
.text:00402280
.text:00402280 loc_402280:                             ; CODE XREF: sub_4020F0+AD↑j
.text:00402280                 mov     ecx, [esp+5Ch+arg_C]
.text:00402284                 test    ecx, ecx
.text:00402286                 jz      loc_402610
.text:0040228C                 mov     edx, [ebp+0]
.text:0040228F                 mov     edi, [esp+5Ch+arg_4]
.text:00402293                 mov     eax, [edi+edx*4]
.text:00402296                 movzx   edx, byte ptr [eax+1]
.text:0040229A                 cmp     dl, 2Dh ; '-'
.text:0040229D                 jz      short loc_4022B5
.text:0040229F                 mov     ebx, [esp+5Ch+arg_14]
.text:004022A3                 test    ebx, ebx
.text:004022A5                 jz      loc_402610
.text:004022AB                 cmp     byte ptr [eax+2], 0
.text:004022AF                 jz      loc_402B4A
.text:004022B5
.text:004022B5 loc_4022B5:                             ; CODE XREF: sub_4020F0+1AD↑j
.text:004022B5                                         ; sub_4020F0+A75↓j
.text:004022B5                 mov     [esp+5Ch+var_18], 0
.text:004022BD                 mov     ecx, [ebp+14h]
.text:004022C0                 mov     [esp+5Ch+var_1C], 0
.text:004022C8                 mov     [esp+5Ch+var_20], 0
.text:004022D0                 mov     edi, ecx
.text:004022D2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004022DA                 movzx   eax, byte ptr [ecx]
.text:004022DD                 test    al, al
.text:004022DF                 jz      short loc_4022FC
.text:004022E1                 cmp     al, 3Dh ; '='
.text:004022E3                 jz      short loc_4022FC
.text:004022E5                 lea     esi, [esi+0]
.text:004022E9                 lea     edi, [edi+0]
.text:004022F0
.text:004022F0 loc_4022F0:                             ; CODE XREF: sub_4020F0+20A↓j
.text:004022F0                 inc     edi
.text:004022F1                 movzx   eax, byte ptr [edi]
.text:004022F4                 test    al, al
.text:004022F6                 jz      short loc_4022FC
.text:004022F8                 cmp     al, 3Dh ; '='
.text:004022FA                 jnz     short loc_4022F0
.text:004022FC
.text:004022FC loc_4022FC:                             ; CODE XREF: sub_4020F0+1EF↑j
.text:004022FC                                         ; sub_4020F0+1F3↑j ...
.text:004022FC                 mov     [esp+5Ch+var_28], 0
.text:00402304                 mov     esi, [esp+5Ch+arg_C]
.text:00402308                 mov     ebx, [esi]
.text:0040230A                 test    ebx, ebx
.text:0040230C                 mov     edx, ebx
.text:0040230E                 jz      loc_402530
.text:00402314                 lea     esi, [esi+0]
.text:0040231A                 lea     edi, [edi+0]
.text:00402320
.text:00402320 loc_402320:                             ; CODE XREF: sub_4020F0+25E↓j
.text:00402320                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402324                 mov     ebx, edi
.text:00402326                 sub     ebx, ecx
.text:00402328                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040232C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040232F                 call    strncmp
.text:00402334                 test    eax, eax
.text:00402336                 jz      loc_402AC6
.text:0040233C
.text:0040233C loc_40233C:                             ; CODE XREF: sub_4020F0+A0F↓j
.text:0040233C                                         ; sub_4020F0+A24↓j ...
.text:0040233C                 inc     [esp+5Ch+var_28]
.text:00402340                 add     esi, 10h
.text:00402343                 mov     ecx, [esi]
.text:00402345                 test    ecx, ecx
.text:00402347                 mov     edx, ecx
.text:00402349                 jz      short loc_402350
.text:0040234B                 mov     ecx, [ebp+14h]
.text:0040234E                 jmp     short loc_402320
.text:00402350 ; ---------------------------------------------------------------------------
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_4020F0+259↑j
.text:00402350                                         ; sub_4020F0+A55↓j
.text:00402350                 mov     esi, [esp+5Ch+var_20]
.text:00402354                 test    esi, esi
.text:00402356                 jz      short loc_402364
.text:00402358                 mov     edx, [esp+5Ch+var_1C]
.text:0040235C                 test    edx, edx
.text:0040235E                 jz      loc_402A70
.text:00402364
.text:00402364 loc_402364:                             ; CODE XREF: sub_4020F0+266↑j
.text:00402364                 mov     eax, [esp+5Ch+var_18]
.text:00402368                 test    eax, eax
.text:0040236A                 jz      loc_402530
.text:00402370                 mov     ecx, [ebp+0]
.text:00402373                 lea     eax, [ecx+1]
.text:00402376                 mov     [ebp+0], eax
.text:00402379                 cmp     byte ptr [edi], 0
.text:0040237C                 jz      loc_402490
.text:00402382                 mov     ecx, [esp+5Ch+var_18]
.text:00402386                 mov     esi, [ecx+4]
.text:00402389                 test    esi, esi
.text:0040238B                 jz      short loc_4023D6
.text:0040238D                 lea     ebx, [edi+1]
.text:00402390                 mov     [ebp+0Ch], ebx
.text:00402393
.text:00402393 loc_402393:                             ; CODE XREF: sub_4020F0+3A8↓j
.text:00402393                                         ; sub_4020F0+3C4↓j
.text:00402393                 mov     ebx, [ebp+14h]
.text:00402396                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402399                 call    strlen
.text:0040239E                 add     [ebp+14h], eax
.text:004023A1                 mov     esi, [esp+5Ch+arg_10]
.text:004023A5                 test    esi, esi
.text:004023A7                 jz      short loc_4023B3
.text:004023A9                 mov     ebp, [esp+5Ch+var_24]
.text:004023AD                 mov     ecx, [esp+5Ch+arg_10]
.text:004023B1                 mov     [ecx], ebp
.text:004023B3
.text:004023B3 loc_4023B3:                             ; CODE XREF: sub_4020F0+2B7↑j
.text:004023B3                 mov     eax, [esp+5Ch+var_18]
.text:004023B7                 mov     ecx, [eax+8]
.text:004023BA                 test    ecx, ecx
.text:004023BC                 jnz     short loc_4023CA
.text:004023BE                 mov     ecx, [esp+5Ch+var_18]
.text:004023C2
.text:004023C2 loc_4023C2:                             ; CODE XREF: sub_4020F0+723↓j
.text:004023C2                 mov     eax, [ecx+0Ch]
.text:004023C5                 jmp     loc_402247
.text:004023CA ; ---------------------------------------------------------------------------
.text:004023CA
.text:004023CA loc_4023CA:                             ; CODE XREF: sub_4020F0+2CC↑j
.text:004023CA                                         ; sub_4020F0+719↓j
.text:004023CA                 mov     esi, [eax+0Ch]
.text:004023CD                 xor     eax, eax
.text:004023CF                 mov     [ecx], esi
.text:004023D1                 jmp     loc_402247
.text:004023D6 ; ---------------------------------------------------------------------------
.text:004023D6
.text:004023D6 loc_4023D6:                             ; CODE XREF: sub_4020F0+29B↑j
.text:004023D6                 mov     edi, [esp+5Ch+var_14]
.text:004023DA                 test    edi, edi
.text:004023DC                 jz      short loc_402430
.text:004023DE                 mov     esi, [esp+5Ch+arg_4]
.text:004023E2                 mov     edx, [esi+eax*4-4]
.text:004023E6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004023EA                 jz      short loc_402452
.text:004023EC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004023F3                 call    ds:libintl_gettext
.text:004023F9                 mov     edx, [esp+5Ch+var_18]
.text:004023FD                 mov     edi, [edx]
.text:004023FF                 mov     [esp+5Ch+var_4C], edi
.text:00402403                 mov     ebx, [ebp+0]
.text:00402406                 mov     edi, [esp+5Ch+arg_4]
.text:0040240A                 mov     ecx, [edi+ebx*4-4]
.text:0040240E                 movsx   esi, byte ptr [ecx]
.text:00402411                 mov     ecx, ds:_iob
.text:00402417                 add     ecx, 40h ; '@'
.text:0040241A                 mov     [esp+5Ch+var_50], esi
.text:0040241E                 mov     ebx, [edi]
.text:00402420                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402424                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402427                 mov     [esp+5Ch+MaxCount], ebx
.text:0040242B                 call    fprintf
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_4020F0+2EC↑j
.text:00402430                                         ; sub_4020F0+398↓j
.text:00402430                 mov     ecx, [ebp+14h]
.text:00402433                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402436                 call    strlen
.text:0040243B                 add     [ebp+14h], eax
.text:0040243E                 mov     eax, [esp+5Ch+var_18]
.text:00402442                 mov     esi, [eax+0Ch]
.text:00402445                 mov     [ebp+8], esi
.text:00402448
.text:00402448 loc_402448:                             ; CODE XREF: sub_4020F0+4E5↓j
.text:00402448                                         ; sub_4020F0+73E↓j ...
.text:00402448                 mov     eax, 3Fh ; '?'
.text:0040244D                 jmp     loc_402247
.text:00402452 ; ---------------------------------------------------------------------------
.text:00402452
.text:00402452 loc_402452:                             ; CODE XREF: sub_4020F0+2FA↑j
.text:00402452                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402459                 call    ds:libintl_gettext
.text:0040245F                 mov     edx, [esp+5Ch+var_18]
.text:00402463                 mov     edi, [esp+5Ch+arg_4]
.text:00402467                 mov     ecx, ds:_iob
.text:0040246D                 mov     esi, [edx]
.text:0040246F                 add     ecx, 40h ; '@'
.text:00402472                 mov     [esp+5Ch+var_50], esi
.text:00402476                 mov     ebx, [edi]
.text:00402478                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040247C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040247F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402483                 call    fprintf
.text:00402488                 jmp     short loc_402430
.text:00402488 ; ---------------------------------------------------------------------------
.text:0040248A                 align 10h
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_4020F0+28C↑j
.text:00402490                 mov     ebx, [esp+5Ch+var_18]
.text:00402494                 cmp     dword ptr [ebx+4], 1
.text:00402498                 jnz     loc_402393
.text:0040249E                 cmp     eax, [esp+5Ch+arg_0]
.text:004024A2                 jge     short loc_4024B9
.text:004024A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004024A8                 lea     edi, [ecx+2]
.text:004024AB                 mov     [ebp+0], edi
.text:004024AE                 mov     esi, [ebx+eax*4]
.text:004024B1                 mov     [ebp+0Ch], esi
.text:004024B4                 jmp     loc_402393
.text:004024B9 ; ---------------------------------------------------------------------------
.text:004024B9
.text:004024B9 loc_4024B9:                             ; CODE XREF: sub_4020F0+3B2↑j
.text:004024B9                 mov     edx, [esp+5Ch+var_14]
.text:004024BD                 test    edx, edx
.text:004024BF                 jnz     short loc_4024F0
.text:004024C1
.text:004024C1 loc_4024C1:                             ; CODE XREF: sub_4020F0+437↓j
.text:004024C1                 mov     edx, [ebp+14h]
.text:004024C4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024C7                 call    strlen
.text:004024CC                 add     [ebp+14h], eax
.text:004024CF                 mov     eax, [esp+5Ch+var_18]
.text:004024D3                 mov     edi, [eax+0Ch]
.text:004024D6                 mov     [ebp+8], edi
.text:004024D9
.text:004024D9 loc_4024D9:                             ; CODE XREF: sub_4020F0+7C2↓j
.text:004024D9                 mov     ebp, [esp+5Ch+Str]
.text:004024DD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004024E1                 setnz   bl
.text:004024E4                 movzx   esi, bl
.text:004024E7                 lea     eax, [esi+esi*4+3Ah]
.text:004024EB                 jmp     loc_402247
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_4020F0+3CF↑j
.text:004024F0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004024F7                 call    ds:libintl_gettext
.text:004024FD                 mov     ecx, [ebp+0]
.text:00402500                 mov     esi, [esp+5Ch+arg_4]
.text:00402504                 mov     ebx, [esi+ecx*4-4]
.text:00402508                 mov     ecx, ds:_iob
.text:0040250E                 mov     [esp+5Ch+var_50], ebx
.text:00402512                 mov     edi, [esi]
.text:00402514                 add     ecx, 40h ; '@'
.text:00402517                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040251B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040251E                 mov     [esp+5Ch+MaxCount], edi
.text:00402522                 call    fprintf
.text:00402527                 jmp     short loc_4024C1
.text:00402527 ; ---------------------------------------------------------------------------
.text:00402529                 align 10h
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_4020F0+21E↑j
.text:00402530                                         ; sub_4020F0+27A↑j
.text:00402530                 mov     eax, [esp+5Ch+arg_14]
.text:00402534                 test    eax, eax
.text:00402536                 jz      short loc_402566
.text:00402538                 mov     ebx, [ebp+0]
.text:0040253B                 mov     esi, [esp+5Ch+arg_4]
.text:0040253F                 mov     edi, [esi+ebx*4]
.text:00402542                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402546                 jz      short loc_402569
.text:00402548                 mov     ecx, [ebp+14h]
.text:0040254B                 mov     edx, [esp+5Ch+Str]
.text:0040254F                 movsx   ebx, byte ptr [ecx]
.text:00402552                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402555                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402559                 call    strchr
.text:0040255E                 test    eax, eax
.text:00402560                 jnz     loc_402610
.text:00402566
.text:00402566 loc_402566:                             ; CODE XREF: sub_4020F0+446↑j
.text:00402566                 mov     ebx, [ebp+0]
.text:00402569
.text:00402569 loc_402569:                             ; CODE XREF: sub_4020F0+456↑j
.text:00402569                 mov     eax, [esp+5Ch+var_14]
.text:0040256D                 test    eax, eax
.text:0040256F                 jz      short loc_4025C1
.text:00402571                 mov     esi, [esp+5Ch+arg_4]
.text:00402575                 mov     edi, [esi+ebx*4]
.text:00402578                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040257C                 jz      short loc_4025DA
.text:0040257E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402585                 call    ds:libintl_gettext
.text:0040258B                 mov     edi, [ebp+14h]
.text:0040258E                 mov     [esp+5Ch+var_4C], edi
.text:00402592                 mov     ebx, [ebp+0]
.text:00402595                 mov     edi, [esp+5Ch+arg_4]
.text:00402599                 mov     esi, [edi+ebx*4]
.text:0040259C                 movsx   ecx, byte ptr [esi]
.text:0040259F                 mov     esi, ds:_iob
.text:004025A5                 add     esi, 40h ; '@'
.text:004025A8                 mov     [esp+5Ch+var_50], ecx
.text:004025AC                 mov     ebx, [edi]
.text:004025AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025B2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004025B5                 mov     [esp+5Ch+MaxCount], ebx
.text:004025B9                 call    fprintf
.text:004025BE
.text:004025BE loc_4025BE:                             ; CODE XREF: sub_4020F0+51D↓j
.text:004025BE                 mov     ebx, [ebp+0]
.text:004025C1
.text:004025C1 loc_4025C1:                             ; CODE XREF: sub_4020F0+47F↑j
.text:004025C1                 mov     dword ptr [ebp+14h], offset dword_401FA0
.text:004025C8                 lea     edx, [ebx+1]
.text:004025CB                 mov     [ebp+0], edx
.text:004025CE
.text:004025CE loc_4025CE:                             ; CODE XREF: sub_4020F0+999↓j
.text:004025CE                 mov     dword ptr [ebp+8], 0
.text:004025D5                 jmp     loc_402448
.text:004025DA ; ---------------------------------------------------------------------------
.text:004025DA
.text:004025DA loc_4025DA:                             ; CODE XREF: sub_4020F0+48C↑j
.text:004025DA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004025E1                 call    ds:libintl_gettext
.text:004025E7                 mov     ecx, [ebp+14h]
.text:004025EA                 mov     edi, [esp+5Ch+arg_4]
.text:004025EE                 mov     edx, ds:_iob
.text:004025F4                 mov     [esp+5Ch+var_50], ecx
.text:004025F8                 mov     ebx, [edi]
.text:004025FA                 add     edx, 40h ; '@'
.text:004025FD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402601                 mov     [esp+5Ch+MaxCount], ebx
.text:00402605                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402608                 call    fprintf
.text:0040260D                 jmp     short loc_4025BE
.text:0040260D ; ---------------------------------------------------------------------------
.text:0040260F                 align 10h
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_4020F0+196↑j
.text:00402610                                         ; sub_4020F0+1B5↑j ...
.text:00402610                 mov     esi, [ebp+14h]
.text:00402613                 movzx   ebx, byte ptr [esi]
.text:00402616                 inc     esi
.text:00402617                 mov     [ebp+14h], esi
.text:0040261A                 mov     ecx, [esp+5Ch+Str]
.text:0040261E                 movsx   esi, bl
.text:00402621                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402625                 mov     edi, esi
.text:00402627                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040262A                 call    strchr
.text:0040262F                 mov     ecx, [ebp+14h]
.text:00402632                 cmp     byte ptr [ecx], 0
.text:00402635                 jnz     short loc_40263A
.text:00402637                 inc     dword ptr [ebp+0]
.text:0040263A
.text:0040263A loc_40263A:                             ; CODE XREF: sub_4020F0+545↑j
.text:0040263A                 test    eax, eax
.text:0040263C                 jz      loc_402A20
.text:00402642                 cmp     bl, 3Ah ; ':'
.text:00402645                 jz      loc_402A20
.text:0040264B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040264E                 jz      loc_402706
.text:00402654                 movzx   edx, byte ptr [eax+1]
.text:00402658
.text:00402658 loc_402658:                             ; CODE XREF: sub_4020F0+61D↓j
.text:00402658                 cmp     dl, 3Ah ; ':'
.text:0040265B                 jz      short loc_402664
.text:0040265D
.text:0040265D loc_40265D:                             ; CODE XREF: sub_4020F0+590↓j
.text:0040265D                 mov     eax, esi
.text:0040265F                 jmp     loc_402247
.text:00402664 ; ---------------------------------------------------------------------------
.text:00402664
.text:00402664 loc_402664:                             ; CODE XREF: sub_4020F0+56B↑j
.text:00402664                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402668                 jz      loc_4026F1
.text:0040266E                 cmp     byte ptr [ecx], 0
.text:00402671                 jz      short loc_402682
.text:00402673
.text:00402673 loc_402673:                             ; CODE XREF: sub_4020F0+604↓j
.text:00402673                 inc     dword ptr [ebp+0]
.text:00402676                 mov     [ebp+0Ch], ecx
.text:00402679
.text:00402679 loc_402679:                             ; CODE XREF: sub_4020F0+5AB↓j
.text:00402679                                         ; sub_4020F0+5C6↓j ...
.text:00402679                 mov     dword ptr [ebp+14h], 0
.text:00402680                 jmp     short loc_40265D
.text:00402682 ; ---------------------------------------------------------------------------
.text:00402682
.text:00402682 loc_402682:                             ; CODE XREF: sub_4020F0+581↑j
.text:00402682                 mov     ecx, [ebp+0]
.text:00402685                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402689                 jz      short loc_40269D
.text:0040268B                 mov     eax, [esp+5Ch+arg_4]
.text:0040268F                 lea     edx, [ecx+1]
.text:00402692                 mov     [ebp+0], edx
.text:00402695                 mov     ebx, [eax+ecx*4]
.text:00402698                 mov     [ebp+0Ch], ebx
.text:0040269B                 jmp     short loc_402679
.text:0040269D ; ---------------------------------------------------------------------------
.text:0040269D
.text:0040269D loc_40269D:                             ; CODE XREF: sub_4020F0+599↑j
.text:0040269D                 mov     ecx, [esp+5Ch+var_14]
.text:004026A1                 test    ecx, ecx
.text:004026A3                 jnz     short loc_4026BF
.text:004026A5
.text:004026A5 loc_4026A5:                             ; CODE XREF: sub_4020F0+5FF↓j
.text:004026A5                 mov     [ebp+8], edi
.text:004026A8                 mov     edi, [esp+5Ch+Str]
.text:004026AC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004026AF                 jz      short loc_4026B8
.text:004026B1                 mov     esi, 3Fh ; '?'
.text:004026B6                 jmp     short loc_402679
.text:004026B8 ; ---------------------------------------------------------------------------
.text:004026B8
.text:004026B8 loc_4026B8:                             ; CODE XREF: sub_4020F0+5BF↑j
.text:004026B8                 mov     esi, 3Ah ; ':'
.text:004026BD                 jmp     short loc_402679
.text:004026BF ; ---------------------------------------------------------------------------
.text:004026BF
.text:004026BF loc_4026BF:                             ; CODE XREF: sub_4020F0+5B3↑j
.text:004026BF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004026C6                 call    ds:libintl_gettext
.text:004026CC                 mov     [esp+5Ch+var_50], edi
.text:004026D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004026D4                 mov     edx, ds:_iob
.text:004026DA                 mov     esi, [ebx]
.text:004026DC                 add     edx, 40h ; '@'
.text:004026DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026E3                 mov     [esp+5Ch+MaxCount], esi
.text:004026E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004026EA                 call    fprintf
.text:004026EF                 jmp     short loc_4026A5
.text:004026F1 ; ---------------------------------------------------------------------------
.text:004026F1
.text:004026F1 loc_4026F1:                             ; CODE XREF: sub_4020F0+578↑j
.text:004026F1                 cmp     byte ptr [ecx], 0
.text:004026F4                 jnz     loc_402673
.text:004026FA                 mov     dword ptr [ebp+0Ch], 0
.text:00402701                 jmp     loc_402679
.text:00402706 ; ---------------------------------------------------------------------------
.text:00402706
.text:00402706 loc_402706:                             ; CODE XREF: sub_4020F0+55E↑j
.text:00402706                 movzx   edx, byte ptr [eax+1]
.text:0040270A                 cmp     dl, 3Bh ; ';'
.text:0040270D                 jnz     loc_402658
.text:00402713                 mov     [esp+5Ch+var_2C], 0
.text:0040271B                 mov     [esp+5Ch+var_30], 0
.text:00402723                 mov     [esp+5Ch+var_34], 0
.text:0040272B                 mov     [esp+5Ch+var_38], 0
.text:00402733                 cmp     byte ptr [ecx], 0
.text:00402736                 jz      loc_4029AB
.text:0040273C                 inc     dword ptr [ebp+0]
.text:0040273F                 mov     [ebp+0Ch], ecx
.text:00402742
.text:00402742 loc_402742:                             ; CODE XREF: sub_4020F0+8D4↓j
.text:00402742                 mov     edi, [ebp+0Ch]
.text:00402745                 mov     [ebp+14h], edi
.text:00402748                 movzx   eax, byte ptr [edi]
.text:0040274B                 test    al, al
.text:0040274D                 jz      short loc_40275F
.text:0040274F                 cmp     al, 3Dh ; '='
.text:00402751                 jz      short loc_40275F
.text:00402753
.text:00402753 loc_402753:                             ; CODE XREF: sub_4020F0+66D↓j
.text:00402753                 inc     edi
.text:00402754                 movzx   eax, byte ptr [edi]
.text:00402757                 test    al, al
.text:00402759                 jz      short loc_40275F
.text:0040275B                 cmp     al, 3Dh ; '='
.text:0040275D                 jnz     short loc_402753
.text:0040275F
.text:0040275F loc_40275F:                             ; CODE XREF: sub_4020F0+65D↑j
.text:0040275F                                         ; sub_4020F0+661↑j ...
.text:0040275F                 mov     [esp+5Ch+var_3C], 0
.text:00402767                 mov     esi, [esp+5Ch+arg_C]
.text:0040276B                 mov     eax, [esi]
.text:0040276D                 test    eax, eax
.text:0040276F                 jz      loc_4028F0
.text:00402775                 mov     ecx, eax
.text:00402777
.text:00402777 loc_402777:                             ; CODE XREF: sub_4020F0+6B3↓j
.text:00402777                 mov     ebx, [ebp+14h]
.text:0040277A                 mov     eax, edi
.text:0040277C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040277F                 sub     eax, ebx
.text:00402781                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402785                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402789                 call    strncmp
.text:0040278E                 test    eax, eax
.text:00402790                 jz      loc_402957
.text:00402796
.text:00402796 loc_402796:                             ; CODE XREF: sub_4020F0+88C↓j
.text:00402796                                         ; sub_4020F0+89D↓j
.text:00402796                 inc     [esp+5Ch+var_3C]
.text:0040279A                 add     esi, 10h
.text:0040279D                 mov     edx, [esi]
.text:0040279F                 test    edx, edx
.text:004027A1                 mov     ecx, edx
.text:004027A3                 jnz     short loc_402777
.text:004027A5
.text:004027A5 loc_4027A5:                             ; CODE XREF: sub_4020F0+8B6↓j
.text:004027A5                 mov     esi, [esp+5Ch+var_34]
.text:004027A9                 test    esi, esi
.text:004027AB                 jz      short loc_4027B9
.text:004027AD                 mov     ebx, [esp+5Ch+var_30]
.text:004027B1                 test    ebx, ebx
.text:004027B3                 jz      loc_402901
.text:004027B9
.text:004027B9 loc_4027B9:                             ; CODE XREF: sub_4020F0+6BB↑j
.text:004027B9                 mov     esi, [esp+5Ch+var_2C]
.text:004027BD                 test    esi, esi
.text:004027BF                 jz      loc_4028F0
.text:004027C5                 cmp     byte ptr [edi], 0
.text:004027C8                 jz      loc_402870
.text:004027CE                 mov     ecx, [esp+5Ch+var_2C]
.text:004027D2                 mov     ebx, [ecx+4]
.text:004027D5                 test    ebx, ebx
.text:004027D7                 jz      short loc_402818
.text:004027D9                 lea     edx, [edi+1]
.text:004027DC                 mov     [ebp+0Ch], edx
.text:004027DF
.text:004027DF loc_4027DF:                             ; CODE XREF: sub_4020F0+788↓j
.text:004027DF                                         ; sub_4020F0+7A7↓j
.text:004027DF                 mov     edi, [ebp+14h]
.text:004027E2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004027E5                 call    strlen
.text:004027EA                 add     [ebp+14h], eax
.text:004027ED                 mov     eax, [esp+5Ch+arg_10]
.text:004027F1                 test    eax, eax
.text:004027F3                 jz      short loc_402800
.text:004027F5                 mov     edx, [esp+5Ch+var_38]
.text:004027F9                 mov     ebp, [esp+5Ch+arg_10]
.text:004027FD                 mov     [ebp+0], edx
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4020F0+703↑j
.text:00402800                 mov     eax, [esp+5Ch+var_2C]
.text:00402804                 mov     ecx, [eax+8]
.text:00402807                 test    ecx, ecx
.text:00402809                 jnz     loc_4023CA
.text:0040280F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402813                 jmp     loc_4023C2
.text:00402818 ; ---------------------------------------------------------------------------
.text:00402818
.text:00402818 loc_402818:                             ; CODE XREF: sub_4020F0+6E7↑j
.text:00402818                 mov     eax, [esp+5Ch+var_14]
.text:0040281C                 test    eax, eax
.text:0040281E                 jnz     short loc_402833
.text:00402820
.text:00402820 loc_402820:                             ; CODE XREF: sub_4020F0+779↓j
.text:00402820                 mov     ecx, [ebp+14h]
.text:00402823                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402826                 call    strlen
.text:0040282B                 add     [ebp+14h], eax
.text:0040282E                 jmp     loc_402448
.text:00402833 ; ---------------------------------------------------------------------------
.text:00402833
.text:00402833 loc_402833:                             ; CODE XREF: sub_4020F0+72E↑j
.text:00402833                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040283A                 call    ds:libintl_gettext
.text:00402840                 mov     edx, [esp+5Ch+var_2C]
.text:00402844                 mov     ebx, [esp+5Ch+arg_4]
.text:00402848                 mov     edi, [edx]
.text:0040284A                 mov     [esp+5Ch+var_50], edi
.text:0040284E                 mov     edi, ds:_iob
.text:00402854                 mov     esi, [ebx]
.text:00402856                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040285A                 add     edi, 40h ; '@'
.text:0040285D                 mov     [esp+5Ch+MaxCount], esi
.text:00402861                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402864                 call    fprintf
.text:00402869                 jmp     short loc_402820
.text:00402869 ; ---------------------------------------------------------------------------
.text:0040286B                 align 10h
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_4020F0+6D8↑j
.text:00402870                 mov     esi, [esp+5Ch+var_2C]
.text:00402874                 cmp     dword ptr [esi+4], 1
.text:00402878                 jnz     loc_4027DF
.text:0040287E                 mov     ecx, [ebp+0]
.text:00402881                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402885                 jge     short loc_40289C
.text:00402887                 mov     eax, [esp+5Ch+arg_4]
.text:0040288B                 lea     ebx, [ecx+1]
.text:0040288E                 mov     [ebp+0], ebx
.text:00402891                 mov     edi, [eax+ecx*4]
.text:00402894                 mov     [ebp+0Ch], edi
.text:00402897                 jmp     loc_4027DF
.text:0040289C ; ---------------------------------------------------------------------------
.text:0040289C
.text:0040289C loc_40289C:                             ; CODE XREF: sub_4020F0+795↑j
.text:0040289C                 mov     edx, [esp+5Ch+var_14]
.text:004028A0                 test    edx, edx
.text:004028A2                 jnz     short loc_4028B7
.text:004028A4
.text:004028A4 loc_4028A4:                             ; CODE XREF: sub_4020F0+7FE↓j
.text:004028A4                 mov     edx, [ebp+14h]
.text:004028A7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004028AA                 call    strlen
.text:004028AF                 add     [ebp+14h], eax
.text:004028B2                 jmp     loc_4024D9
.text:004028B7 ; ---------------------------------------------------------------------------
.text:004028B7
.text:004028B7 loc_4028B7:                             ; CODE XREF: sub_4020F0+7B2↑j
.text:004028B7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004028BE                 call    ds:libintl_gettext
.text:004028C4                 mov     ecx, [ebp+0]
.text:004028C7                 mov     ebx, [esp+5Ch+arg_4]
.text:004028CB                 mov     edi, [ebx+ecx*4-4]
.text:004028CF                 mov     ecx, ds:_iob
.text:004028D5                 mov     [esp+5Ch+var_50], edi
.text:004028D9                 mov     esi, [ebx]
.text:004028DB                 add     ecx, 40h ; '@'
.text:004028DE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004028E2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004028E5                 mov     [esp+5Ch+MaxCount], esi
.text:004028E9                 call    fprintf
.text:004028EE                 jmp     short loc_4028A4
.text:004028F0 ; ---------------------------------------------------------------------------
.text:004028F0
.text:004028F0 loc_4028F0:                             ; CODE XREF: sub_4020F0+67F↑j
.text:004028F0                                         ; sub_4020F0+6CF↑j
.text:004028F0                 mov     dword ptr [ebp+14h], 0
.text:004028F7                 mov     eax, 57h ; 'W'
.text:004028FC                 jmp     loc_402247
.text:00402901 ; ---------------------------------------------------------------------------
.text:00402901
.text:00402901 loc_402901:                             ; CODE XREF: sub_4020F0+6C3↑j
.text:00402901                 mov     edi, [esp+5Ch+var_14]
.text:00402905                 test    edi, edi
.text:00402907                 jnz     short loc_40291F
.text:00402909
.text:00402909 loc_402909:                             ; CODE XREF: sub_4020F0+865↓j
.text:00402909                 mov     edx, [ebp+14h]
.text:0040290C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040290F                 call    strlen
.text:00402914                 add     [ebp+14h], eax
.text:00402917                 inc     dword ptr [ebp+0]
.text:0040291A                 jmp     loc_402448
.text:0040291F ; ---------------------------------------------------------------------------
.text:0040291F
.text:0040291F loc_40291F:                             ; CODE XREF: sub_4020F0+817↑j
.text:0040291F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402926                 call    ds:libintl_gettext
.text:0040292C                 mov     ecx, [ebp+0]
.text:0040292F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402933                 mov     edi, [ebx+ecx*4]
.text:00402936                 mov     ecx, ds:_iob
.text:0040293C                 mov     [esp+5Ch+var_50], edi
.text:00402940                 mov     esi, [ebx]
.text:00402942                 add     ecx, 40h ; '@'
.text:00402945                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402949                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040294C                 mov     [esp+5Ch+MaxCount], esi
.text:00402950                 call    fprintf
.text:00402955                 jmp     short loc_402909
.text:00402957 ; ---------------------------------------------------------------------------
.text:00402957
.text:00402957 loc_402957:                             ; CODE XREF: sub_4020F0+6A0↑j
.text:00402957                 mov     edx, [ebp+14h]
.text:0040295A                 mov     ebx, edi
.text:0040295C                 mov     ecx, [esi]
.text:0040295E                 sub     ebx, edx
.text:00402960                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402963                 call    strlen
.text:00402968                 cmp     ebx, eax
.text:0040296A                 jz      short loc_402992
.text:0040296C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402970                 test    ebx, ebx
.text:00402972                 jz      short loc_402981
.text:00402974                 mov     [esp+5Ch+var_34], 1
.text:0040297C                 jmp     loc_402796
.text:00402981 ; ---------------------------------------------------------------------------
.text:00402981
.text:00402981 loc_402981:                             ; CODE XREF: sub_4020F0+882↑j
.text:00402981                 mov     [esp+5Ch+var_2C], esi
.text:00402985                 mov     ecx, [esp+5Ch+var_3C]
.text:00402989                 mov     [esp+5Ch+var_38], ecx
.text:0040298D                 jmp     loc_402796
.text:00402992 ; ---------------------------------------------------------------------------
.text:00402992
.text:00402992 loc_402992:                             ; CODE XREF: sub_4020F0+87A↑j
.text:00402992                 mov     [esp+5Ch+var_2C], esi
.text:00402996                 mov     eax, [esp+5Ch+var_3C]
.text:0040299A                 mov     [esp+5Ch+var_30], 1
.text:004029A2                 mov     [esp+5Ch+var_38], eax
.text:004029A6                 jmp     loc_4027A5
.text:004029AB ; ---------------------------------------------------------------------------
.text:004029AB
.text:004029AB loc_4029AB:                             ; CODE XREF: sub_4020F0+646↑j
.text:004029AB                 mov     edx, [ebp+0]
.text:004029AE                 cmp     edx, [esp+5Ch+arg_0]
.text:004029B2                 jz      short loc_4029C9
.text:004029B4                 mov     ebx, [esp+5Ch+arg_4]
.text:004029B8                 lea     esi, [edx+1]
.text:004029BB                 mov     [ebp+0], esi
.text:004029BE                 mov     edi, [ebx+edx*4]
.text:004029C1                 mov     [ebp+0Ch], edi
.text:004029C4                 jmp     loc_402742
.text:004029C9 ; ---------------------------------------------------------------------------
.text:004029C9
.text:004029C9 loc_4029C9:                             ; CODE XREF: sub_4020F0+8C2↑j
.text:004029C9                 mov     edi, [esp+5Ch+var_14]
.text:004029CD                 test    edi, edi
.text:004029CF                 jnz     short loc_4029EC
.text:004029D1
.text:004029D1 loc_4029D1:                             ; CODE XREF: sub_4020F0+92C↓j
.text:004029D1                 mov     [ebp+8], esi
.text:004029D4                 mov     ebp, [esp+5Ch+Str]
.text:004029D8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004029DC                 jz      short loc_4029E8
.text:004029DE                 mov     bl, 3Fh ; '?'
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4020F0+8FA↓j
.text:004029E0                 movsx   eax, bl
.text:004029E3                 jmp     loc_402247
.text:004029E8 ; ---------------------------------------------------------------------------
.text:004029E8
.text:004029E8 loc_4029E8:                             ; CODE XREF: sub_4020F0+8EC↑j
.text:004029E8                 mov     bl, 3Ah ; ':'
.text:004029EA                 jmp     short loc_4029E0
.text:004029EC ; ---------------------------------------------------------------------------
.text:004029EC
.text:004029EC loc_4029EC:                             ; CODE XREF: sub_4020F0+8DF↑j
.text:004029EC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004029F3                 call    ds:libintl_gettext
.text:004029F9                 mov     [esp+5Ch+var_50], esi
.text:004029FD                 mov     edx, [esp+5Ch+arg_4]
.text:00402A01                 mov     ecx, ds:_iob
.text:00402A07                 mov     ebx, [edx]
.text:00402A09                 add     ecx, 40h ; '@'
.text:00402A0C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A10                 mov     [esp+5Ch+MaxCount], ebx
.text:00402A14                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402A17                 call    fprintf
.text:00402A1C                 jmp     short loc_4029D1
.text:00402A1C ; ---------------------------------------------------------------------------
.text:00402A1E                 align 10h
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_4020F0+54C↑j
.text:00402A20                                         ; sub_4020F0+555↑j
.text:00402A20                 mov     eax, [esp+5Ch+var_14]
.text:00402A24                 test    eax, eax
.text:00402A26                 jz      short loc_402A5F
.text:00402A28                 mov     ebx, [ebp+1Ch]
.text:00402A2B                 test    ebx, ebx
.text:00402A2D                 jz      short loc_402A67
.text:00402A2F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402A36
.text:00402A36 loc_402A36:                             ; CODE XREF: sub_4020F0+97E↓j
.text:00402A36                 call    ds:libintl_gettext
.text:00402A3C                 mov     [esp+5Ch+var_50], esi
.text:00402A40                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A44                 mov     edx, ds:_iob
.text:00402A4A                 mov     esi, [ebx]
.text:00402A4C                 add     edx, 40h ; '@'
.text:00402A4F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A53                 mov     [esp+5Ch+MaxCount], esi
.text:00402A57                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402A5A                 call    fprintf
.text:00402A5F
.text:00402A5F loc_402A5F:                             ; CODE XREF: sub_4020F0+936↑j
.text:00402A5F                 mov     [ebp+8], edi
.text:00402A62                 jmp     loc_402448
.text:00402A67 ; ---------------------------------------------------------------------------
.text:00402A67
.text:00402A67 loc_402A67:                             ; CODE XREF: sub_4020F0+93D↑j
.text:00402A67                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402A6E                 jmp     short loc_402A36
.text:00402A70 ; ---------------------------------------------------------------------------
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_4020F0+26E↑j
.text:00402A70                 mov     edi, [esp+5Ch+var_14]
.text:00402A74                 test    edi, edi
.text:00402A76                 jnz     short loc_402A8E
.text:00402A78
.text:00402A78 loc_402A78:                             ; CODE XREF: sub_4020F0+9D4↓j
.text:00402A78                 mov     edx, [ebp+14h]
.text:00402A7B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402A7E                 call    strlen
.text:00402A83                 add     [ebp+14h], eax
.text:00402A86                 inc     dword ptr [ebp+0]
.text:00402A89                 jmp     loc_4025CE
.text:00402A8E ; ---------------------------------------------------------------------------
.text:00402A8E
.text:00402A8E loc_402A8E:                             ; CODE XREF: sub_4020F0+986↑j
.text:00402A8E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402A95                 call    ds:libintl_gettext
.text:00402A9B                 mov     ebx, [ebp+0]
.text:00402A9E                 mov     edi, [esp+5Ch+arg_4]
.text:00402AA2                 mov     ecx, [edi+ebx*4]
.text:00402AA5                 mov     ebx, ds:_iob
.text:00402AAB                 mov     [esp+5Ch+var_50], ecx
.text:00402AAF                 mov     esi, [edi]
.text:00402AB1                 add     ebx, 40h ; '@'
.text:00402AB4                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AB8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402ABB                 mov     [esp+5Ch+MaxCount], esi
.text:00402ABF                 call    fprintf
.text:00402AC4                 jmp     short loc_402A78
.text:00402AC6 ; ---------------------------------------------------------------------------
.text:00402AC6
.text:00402AC6 loc_402AC6:                             ; CODE XREF: sub_4020F0+246↑j
.text:00402AC6                 mov     ecx, [ebp+14h]
.text:00402AC9                 mov     ebx, edi
.text:00402ACB                 mov     edx, [esi]
.text:00402ACD                 sub     ebx, ecx
.text:00402ACF                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402AD2                 call    strlen
.text:00402AD7                 cmp     ebx, eax
.text:00402AD9                 jz      short loc_402B31
.text:00402ADB                 mov     ebx, [esp+5Ch+var_18]
.text:00402ADF                 test    ebx, ebx
.text:00402AE1                 jz      short loc_402B20
.text:00402AE3                 mov     edx, [esp+5Ch+arg_14]
.text:00402AE7                 test    edx, edx
.text:00402AE9                 jnz     short loc_402AF7
.text:00402AEB                 mov     ecx, [esp+5Ch+var_18]
.text:00402AEF                 mov     ebx, [esi+4]
.text:00402AF2                 cmp     [ecx+4], ebx
.text:00402AF5                 jz      short loc_402B04
.text:00402AF7
.text:00402AF7 loc_402AF7:                             ; CODE XREF: sub_4020F0+9F9↑j
.text:00402AF7                                         ; sub_4020F0+A1A↓j ...
.text:00402AF7                 mov     [esp+5Ch+var_20], 1
.text:00402AFF                 jmp     loc_40233C
.text:00402B04 ; ---------------------------------------------------------------------------
.text:00402B04
.text:00402B04 loc_402B04:                             ; CODE XREF: sub_4020F0+A05↑j
.text:00402B04                 mov     edx, [esi+8]
.text:00402B07                 cmp     [ecx+8], edx
.text:00402B0A                 jnz     short loc_402AF7
.text:00402B0C                 mov     ebx, [esi+0Ch]
.text:00402B0F                 cmp     [ecx+0Ch], ebx
.text:00402B12                 jnz     short loc_402AF7
.text:00402B14                 jmp     loc_40233C
.text:00402B14 ; ---------------------------------------------------------------------------
.text:00402B19                 align 10h
.text:00402B20
.text:00402B20 loc_402B20:                             ; CODE XREF: sub_4020F0+9F1↑j
.text:00402B20                 mov     [esp+5Ch+var_18], esi
.text:00402B24                 mov     eax, [esp+5Ch+var_28]
.text:00402B28                 mov     [esp+5Ch+var_24], eax
.text:00402B2C                 jmp     loc_40233C
.text:00402B31 ; ---------------------------------------------------------------------------
.text:00402B31
.text:00402B31 loc_402B31:                             ; CODE XREF: sub_4020F0+9E9↑j
.text:00402B31                 mov     [esp+5Ch+var_18], esi
.text:00402B35                 mov     ecx, [esp+5Ch+var_28]
.text:00402B39                 mov     [esp+5Ch+var_1C], 1
.text:00402B41                 mov     [esp+5Ch+var_24], ecx
.text:00402B45                 jmp     loc_402350
.text:00402B4A ; ---------------------------------------------------------------------------
.text:00402B4A
.text:00402B4A loc_402B4A:                             ; CODE XREF: sub_4020F0+1BF↑j
.text:00402B4A                 mov     eax, [esp+5Ch+Str]
.text:00402B4E                 movsx   esi, dl
.text:00402B51                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402B55                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402B58                 call    strchr
.text:00402B5D                 test    eax, eax
.text:00402B5F                 jnz     loc_402610
.text:00402B65                 jmp     loc_4022B5
.text:00402B6A ; ---------------------------------------------------------------------------
.text:00402B6A
.text:00402B6A loc_402B6A:                             ; CODE XREF: sub_4020F0+17C↑j
.text:00402B6A                 mov     ecx, 1
.text:00402B6F                 jmp     loc_402272
.text:00402B74 ; ---------------------------------------------------------------------------
.text:00402B74
.text:00402B74 loc_402B74:                             ; CODE XREF: sub_4020F0+D4↑j
.text:00402B74                                         ; sub_4020F0+130↑j
.text:00402B74                 mov     eax, [ebp+20h]
.text:00402B77                 cmp     eax, [ebp+24h]
.text:00402B7A                 jz      loc_402250
.text:00402B80                 mov     [ebp+0], eax
.text:00402B83                 jmp     loc_402250
.text:00402B88 ; ---------------------------------------------------------------------------
.text:00402B88
.text:00402B88 loc_402B88:                             ; CODE XREF: sub_4020F0+FE↑j
.text:00402B88                 mov     [ebp+20h], eax
.text:00402B8B                 jmp     loc_402210
.text:00402B90 ; ---------------------------------------------------------------------------
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: sub_4020F0+CA↑j
.text:00402B90                 mov     edx, [ebp+20h]
.text:00402B93                 mov     eax, [ebp+24h]
.text:00402B96                 cmp     edx, eax
.text:00402B98                 jz      short loc_402C10
.text:00402B9A                 cmp     eax, ebx
.text:00402B9C                 jz      short loc_402BB1
.text:00402B9E                 mov     [esp+5Ch+Str2], ebp
.text:00402BA2                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BA6                 mov     [esp+5Ch+Str1], ebx
.text:00402BA9                 call    sub_402DA0
.text:00402BAE                 mov     ebx, [ebp+0]
.text:00402BB1
.text:00402BB1 loc_402BB1:                             ; CODE XREF: sub_4020F0+AAC↑j
.text:00402BB1                                         ; sub_4020F0+B22↓j ...
.text:00402BB1                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402BB5                 jge     short loc_402C00
.text:00402BB7                 mov     esi, [esp+5Ch+arg_4]
.text:00402BBB                 mov     eax, [esi+ebx*4]
.text:00402BBE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402BC1                 jz      short loc_402C08
.text:00402BC3                 lea     esi, [esi+0]
.text:00402BC9                 lea     edi, [edi+0]
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_4020F0+AFC↓j
.text:00402BD0                                         ; sub_4020F0+B1C↓j
.text:00402BD0                 lea     eax, [ebx+1]
.text:00402BD3                 mov     ebx, eax
.text:00402BD5                 mov     [ebp+0], eax
.text:00402BD8                 cmp     eax, [esp+5Ch+arg_0]
.text:00402BDC                 jge     short loc_402C00
.text:00402BDE                 mov     edi, [esp+5Ch+arg_4]
.text:00402BE2                 mov     edx, [edi+eax*4]
.text:00402BE5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402BE8                 jz      short loc_402BF0
.text:00402BEA
.text:00402BEA loc_402BEA:                             ; CODE XREF: sub_4020F0+B04↓j
.text:00402BEA                 mov     ebx, eax
.text:00402BEC                 jmp     short loc_402BD0
.text:00402BEC ; ---------------------------------------------------------------------------
.text:00402BEE                 align 10h
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_4020F0+AF8↑j
.text:00402BF0                 cmp     byte ptr [edx+1], 0
.text:00402BF4                 jz      short loc_402BEA
.text:00402BF6                 lea     esi, [esi+0]
.text:00402BF9                 lea     edi, [edi+0]
.text:00402C00
.text:00402C00 loc_402C00:                             ; CODE XREF: sub_4020F0+AC5↑j
.text:00402C00                                         ; sub_4020F0+AEC↑j ...
.text:00402C00                 mov     [ebp+24h], ebx
.text:00402C03                 jmp     loc_4021C0
.text:00402C08 ; ---------------------------------------------------------------------------
.text:00402C08
.text:00402C08 loc_402C08:                             ; CODE XREF: sub_4020F0+AD1↑j
.text:00402C08                 cmp     byte ptr [eax+1], 0
.text:00402C0C                 jz      short loc_402BD0
.text:00402C0E                 jmp     short loc_402C00
.text:00402C10 ; ---------------------------------------------------------------------------
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_4020F0+AA8↑j
.text:00402C10                 cmp     edx, ebx
.text:00402C12                 jz      short loc_402BB1
.text:00402C14                 mov     [ebp+20h], ebx
.text:00402C17                 jmp     short loc_402BB1
.text:00402C19 ; ---------------------------------------------------------------------------
.text:00402C19
.text:00402C19 loc_402C19:                             ; CODE XREF: sub_4020F0+88↑j
.text:00402C19                 mov     dword ptr [ebp+18h], 0
.text:00402C20                 mov     esi, [esp+5Ch+Str]
.text:00402C24
.text:00402C24 loc_402C24:                             ; CODE XREF: sub_4020F0+B49↓j
.text:00402C24                 inc     esi
.text:00402C25                 jmp     loc_402188
.text:00402C25 ; ---------------------------------------------------------------------------
.text:00402C2A                 align 10h
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_4020F0+80↑j
.text:00402C30                 mov     dword ptr [ebp+18h], 2
.text:00402C37                 mov     esi, ecx
.text:00402C39                 jmp     short loc_402C24
.text:00402C39 ; ---------------------------------------------------------------------------
.text:00402C3B                 align 10h
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_4020F0+69↑j
.text:00402C40                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402C47                 call    getenv
.text:00402C4C                 test    eax, eax
.text:00402C4E                 jz      loc_402164
.text:00402C54                 jmp     loc_40215F
.text:00402C54 ; ---------------------------------------------------------------------------
.text:00402C59                 align 10h
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_4020F0+3F↑j
.text:00402C60                 mov     dword ptr [ebp+0], 1
.text:00402C67                 mov     ebx, 1
.text:00402C6C                 jmp     loc_402140
.text:00402C6C sub_4020F0      endp
.text:00402C6C
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C71                 jmp     short sub_402C80
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C73                 align 10h
.text:00402C80
.text:00402C80 ; =============== S U B R O U T I N E =======================================
.text:00402C80
.text:00402C80
.text:00402C80 ; int __cdecl sub_402C80(int, int, char *, int, int, int, int)
.text:00402C80 sub_402C80      proc near               ; CODE XREF: .text:00402C71↑j
.text:00402C80                                         ; sub_402EC0+3A↓p ...
.text:00402C80
.text:00402C80 var_2C          = dword ptr -2Ch
.text:00402C80 var_28          = dword ptr -28h
.text:00402C80 Str             = dword ptr -24h
.text:00402C80 var_20          = dword ptr -20h
.text:00402C80 var_1C          = dword ptr -1Ch
.text:00402C80 var_18          = dword ptr -18h
.text:00402C80 var_14          = dword ptr -14h
.text:00402C80 var_10          = dword ptr -10h
.text:00402C80 arg_0           = dword ptr  4
.text:00402C80 arg_4           = dword ptr  8
.text:00402C80 arg_8           = dword ptr  0Ch
.text:00402C80 arg_C           = dword ptr  10h
.text:00402C80 arg_10          = dword ptr  14h
.text:00402C80 arg_14          = dword ptr  18h
.text:00402C80 arg_18          = dword ptr  1Ch
.text:00402C80
.text:00402C80                 sub     esp, 2Ch
.text:00402C83                 mov     edx, dword_406010
.text:00402C89                 mov     [esp+2Ch+var_10], offset dword_407010 ; int
.text:00402C91                 mov     ecx, dword_406014
.text:00402C97                 mov     ds:dword_407010, edx
.text:00402C9D                 mov     edx, [esp+2Ch+arg_18]
.text:00402CA1                 mov     ds:dword_407014, ecx
.text:00402CA7                 mov     ecx, [esp+2Ch+arg_14]
.text:00402CAB                 mov     [esp+2Ch+var_14], edx ; int
.text:00402CAF                 mov     edx, [esp+2Ch+arg_10]
.text:00402CB3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402CB7                 mov     ecx, [esp+2Ch+arg_C]
.text:00402CBB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402CBF                 mov     edx, [esp+2Ch+arg_8]
.text:00402CC3                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402CC7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402CCB                 mov     [esp+2Ch+Str], edx ; Str
.text:00402CCF                 mov     edx, [esp+2Ch+arg_0]
.text:00402CD3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402CD7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402CDA                 call    sub_4020F0
.text:00402CDF                 mov     ecx, ds:dword_407010
.text:00402CE5                 mov     dword_406010, ecx
.text:00402CEB                 mov     ecx, ds:dword_40701C
.text:00402CF1                 mov     ds:dword_4071C0, ecx
.text:00402CF7                 mov     ecx, ds:dword_407018
.text:00402CFD                 mov     dword_406018, ecx
.text:00402D03                 add     esp, 2Ch
.text:00402D06                 retn
.text:00402D06 sub_402C80      endp
.text:00402D06
.text:00402D06 ; ---------------------------------------------------------------------------
.text:00402D07                 align 10h
.text:00402D10                 sub     esp, 2Ch
.text:00402D13                 mov     edx, dword_406010
.text:00402D19                 mov     dword ptr [esp+1Ch], offset dword_407010
.text:00402D21                 mov     ecx, dword_406014
.text:00402D27                 mov     dword ptr [esp+18h], 1
.text:00402D2F                 mov     ds:dword_407010, edx
.text:00402D35                 mov     edx, [esp+38h]
.text:00402D39                 mov     ds:dword_407014, ecx
.text:00402D3F                 mov     ecx, [esp+34h]
.text:00402D43                 mov     [esp+8], edx
.text:00402D47                 mov     edx, [esp+30h]
.text:00402D4B                 mov     [esp+4], ecx
.text:00402D4F                 mov     dword ptr [esp+14h], 0
.text:00402D57                 mov     dword ptr [esp+10h], 0
.text:00402D5F                 mov     dword ptr [esp+0Ch], 0
.text:00402D67                 mov     [esp], edx
.text:00402D6A                 call    sub_4020F0
.text:00402D6F                 mov     ecx, ds:dword_407010
.text:00402D75                 mov     dword_406010, ecx
.text:00402D7B                 mov     ecx, ds:dword_40701C
.text:00402D81                 mov     ds:dword_4071C0, ecx
.text:00402D87                 mov     ecx, ds:dword_407018
.text:00402D8D                 mov     dword_406018, ecx
.text:00402D93                 add     esp, 2Ch
.text:00402D96                 retn
.text:00402D96 ; ---------------------------------------------------------------------------
.text:00402D97                 align 10h
.text:00402DA0
.text:00402DA0 ; =============== S U B R O U T I N E =======================================
.text:00402DA0
.text:00402DA0
.text:00402DA0 sub_402DA0      proc near               ; CODE XREF: sub_4020F0+113↑p
.text:00402DA0                                         ; sub_4020F0+AB9↑p
.text:00402DA0
.text:00402DA0 var_2C          = dword ptr -2Ch
.text:00402DA0 var_28          = dword ptr -28h
.text:00402DA0 var_24          = dword ptr -24h
.text:00402DA0 var_20          = dword ptr -20h
.text:00402DA0 var_1C          = dword ptr -1Ch
.text:00402DA0 var_18          = dword ptr -18h
.text:00402DA0 var_14          = dword ptr -14h
.text:00402DA0 arg_0           = dword ptr  4
.text:00402DA0 arg_4           = dword ptr  8
.text:00402DA0
.text:00402DA0                 push    ebp
.text:00402DA1                 push    edi
.text:00402DA2                 push    esi
.text:00402DA3                 push    ebx
.text:00402DA4                 sub     esp, 1Ch
.text:00402DA7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402DAB                 mov     eax, [esp+2Ch+arg_4]
.text:00402DAF                 mov     ebx, [esp+2Ch+arg_4]
.text:00402DB3                 mov     edx, [ecx+20h]
.text:00402DB6                 mov     edi, [esp+2Ch+arg_0]
.text:00402DBA                 mov     ecx, [ebx]
.text:00402DBC                 mov     [esp+2Ch+var_2C], edx
.text:00402DBF                 mov     [esp+2Ch+var_14], edx
.text:00402DC3                 mov     edx, [eax+24h]
.text:00402DC6                 mov     [esp+2Ch+var_28], ecx
.text:00402DCA                 mov     [esp+2Ch+var_1C], ecx
.text:00402DCE                 cmp     ecx, edx
.text:00402DD0                 mov     [esp+2Ch+var_18], edx
.text:00402DD4                 jle     short loc_402E50
.text:00402DD6                 mov     esi, [esp+2Ch+var_2C]
.text:00402DD9                 cmp     edx, esi
.text:00402DDB                 jle     short loc_402E50
.text:00402DDD                 lea     esi, [esi+0]
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402DA0+A1↓j
.text:00402DE0                 mov     ebx, [esp+2Ch+var_1C]
.text:00402DE4                 mov     edx, [esp+2Ch+var_18]
.text:00402DE8                 mov     ebp, [esp+2Ch+var_18]
.text:00402DEC                 mov     eax, [esp+2Ch+var_14]
.text:00402DF0                 sub     ebx, edx
.text:00402DF2                 mov     [esp+2Ch+var_20], ebx
.text:00402DF6                 sub     ebp, eax
.text:00402DF8                 cmp     ebx, ebp
.text:00402DFA                 jle     short loc_402E75
.text:00402DFC                 xor     esi, esi
.text:00402DFE                 cmp     esi, ebp
.text:00402E00                 jge     short loc_402E2D
.text:00402E02                 mov     ecx, [esp+2Ch+var_1C]
.text:00402E06                 sub     ecx, ebp
.text:00402E08                 mov     [esp+2Ch+var_24], ecx
.text:00402E0C                 lea     esi, [esi+0]
.text:00402E10
.text:00402E10 loc_402E10:                             ; CODE XREF: sub_402DA0+8B↓j
.text:00402E10                 mov     ecx, [esp+2Ch+var_14]
.text:00402E14                 mov     edx, [esp+2Ch+var_24]
.text:00402E18                 add     ecx, esi
.text:00402E1A                 add     edx, esi
.text:00402E1C                 mov     ebx, [edi+ecx*4]
.text:00402E1F                 mov     eax, [edi+edx*4]
.text:00402E22                 inc     esi
.text:00402E23                 cmp     esi, ebp
.text:00402E25                 mov     [edi+ecx*4], eax
.text:00402E28                 mov     [edi+edx*4], ebx
.text:00402E2B                 jl      short loc_402E10
.text:00402E2D
.text:00402E2D loc_402E2D:                             ; CODE XREF: sub_402DA0+60↑j
.text:00402E2D                 sub     [esp+2Ch+var_1C], ebp
.text:00402E31
.text:00402E31 loc_402E31:                             ; CODE XREF: sub_402DA0+107↓j
.text:00402E31                 mov     eax, [esp+2Ch+var_18]
.text:00402E35                 cmp     [esp+2Ch+var_1C], eax
.text:00402E39                 jle     short loc_402E50
.text:00402E3B                 mov     ebp, [esp+2Ch+var_14]
.text:00402E3F                 cmp     eax, ebp
.text:00402E41                 jg      short loc_402DE0
.text:00402E43                 lea     esi, [esi+0]
.text:00402E49                 lea     edi, [edi+0]
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402DA0+34↑j
.text:00402E50                                         ; sub_402DA0+3B↑j ...
.text:00402E50                 mov     esi, [esp+2Ch+var_28]
.text:00402E54                 mov     ecx, [esp+2Ch+var_18]
.text:00402E58                 mov     eax, [esp+2Ch+var_2C]
.text:00402E5B                 mov     edi, [esp+2Ch+arg_4]
.text:00402E5F                 mov     edx, [esp+2Ch+var_28]
.text:00402E63                 sub     esi, ecx
.text:00402E65                 add     esi, eax
.text:00402E67                 mov     [edi+20h], esi
.text:00402E6A                 mov     [edi+24h], edx
.text:00402E6D                 add     esp, 1Ch
.text:00402E70                 pop     ebx
.text:00402E71                 pop     esi
.text:00402E72                 pop     edi
.text:00402E73                 pop     ebp
.text:00402E74                 retn
.text:00402E75 ; ---------------------------------------------------------------------------
.text:00402E75
.text:00402E75 loc_402E75:                             ; CODE XREF: sub_402DA0+5A↑j
.text:00402E75                 xor     esi, esi
.text:00402E77                 cmp     esi, [esp+2Ch+var_20]
.text:00402E7B                 jge     short loc_402E9F
.text:00402E7D                 lea     esi, [esi+0]
.text:00402E80
.text:00402E80 loc_402E80:                             ; CODE XREF: sub_402DA0+FD↓j
.text:00402E80                 mov     ebx, [esp+2Ch+var_14]
.text:00402E84                 mov     ebp, [esp+2Ch+var_18]
.text:00402E88                 add     ebx, esi
.text:00402E8A                 add     ebp, esi
.text:00402E8C                 mov     edx, [edi+ebx*4]
.text:00402E8F                 inc     esi
.text:00402E90                 cmp     esi, [esp+2Ch+var_20]
.text:00402E94                 mov     ecx, [edi+ebp*4]
.text:00402E97                 mov     [edi+ebx*4], ecx
.text:00402E9A                 mov     [edi+ebp*4], edx
.text:00402E9D                 jl      short loc_402E80
.text:00402E9F
.text:00402E9F loc_402E9F:                             ; CODE XREF: sub_402DA0+DB↑j
.text:00402E9F                 mov     esi, [esp+2Ch+var_20]
.text:00402EA3                 add     [esp+2Ch+var_14], esi
.text:00402EA7                 jmp     short loc_402E31
.text:00402EA7 sub_402DA0      endp
.text:00402EA7
.text:00402EA7 ; ---------------------------------------------------------------------------
.text:00402EA9                 align 20h
.text:00402EC0
.text:00402EC0 ; =============== S U B R O U T I N E =======================================
.text:00402EC0
.text:00402EC0
.text:00402EC0 ; int __cdecl sub_402EC0(int, int, char *, int, int)
.text:00402EC0 sub_402EC0      proc near               ; CODE XREF: sub_401730+C3↑p
.text:00402EC0                                         ; sub_403060+58↓p
.text:00402EC0
.text:00402EC0 var_1C          = dword ptr -1Ch
.text:00402EC0 var_18          = dword ptr -18h
.text:00402EC0 var_14          = dword ptr -14h
.text:00402EC0 var_10          = dword ptr -10h
.text:00402EC0 var_C           = dword ptr -0Ch
.text:00402EC0 var_8           = dword ptr -8
.text:00402EC0 var_4           = dword ptr -4
.text:00402EC0 arg_0           = dword ptr  4
.text:00402EC0 arg_4           = dword ptr  8
.text:00402EC0 arg_8           = dword ptr  0Ch
.text:00402EC0 arg_C           = dword ptr  10h
.text:00402EC0 arg_10          = dword ptr  14h
.text:00402EC0
.text:00402EC0                 sub     esp, 1Ch
.text:00402EC3                 mov     edx, [esp+1Ch+arg_C]
.text:00402EC7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402ECF                 mov     ecx, [esp+1Ch+arg_10]
.text:00402ED3                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402EDB                 mov     [esp+1Ch+var_10], edx ; int
.text:00402EDF                 mov     edx, [esp+1Ch+arg_4]
.text:00402EE3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402EE7                 mov     ecx, [esp+1Ch+arg_8]
.text:00402EEB                 mov     [esp+1Ch+var_18], edx ; int
.text:00402EEF                 mov     edx, [esp+1Ch+arg_0]
.text:00402EF3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402EF7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402EFA                 call    sub_402C80
.text:00402EFF                 add     esp, 1Ch
.text:00402F02                 retn
.text:00402F02 sub_402EC0      endp
.text:00402F02
.text:00402F02 ; ---------------------------------------------------------------------------
.text:00402F03                 align 10h
.text:00402F10                 sub     esp, 2Ch
.text:00402F13                 mov     edx, [esp+44h]
.text:00402F17                 mov     dword ptr [esp+18h], 0
.text:00402F1F                 mov     ecx, [esp+40h]
.text:00402F23                 mov     dword ptr [esp+14h], 0
.text:00402F2B                 mov     [esp+1Ch], edx
.text:00402F2F                 mov     edx, [esp+3Ch]
.text:00402F33                 mov     [esp+10h], ecx
.text:00402F37                 mov     ecx, [esp+38h]
.text:00402F3B                 mov     [esp+0Ch], edx
.text:00402F3F                 mov     edx, [esp+34h]
.text:00402F43                 mov     [esp+8], ecx
.text:00402F47                 mov     [esp+4], edx
.text:00402F4B                 mov     edx, [esp+30h]
.text:00402F4F                 mov     [esp], edx
.text:00402F52                 call    sub_4020F0
.text:00402F57                 add     esp, 2Ch
.text:00402F5A                 retn
.text:00402F5A ; ---------------------------------------------------------------------------
.text:00402F5B                 align 10h
.text:00402F60                 sub     esp, 1Ch
.text:00402F63                 mov     edx, [esp+2Ch]
.text:00402F67                 mov     dword ptr [esp+18h], 0
.text:00402F6F                 mov     ecx, [esp+30h]
.text:00402F73                 mov     dword ptr [esp+14h], 1
.text:00402F7B                 mov     [esp+0Ch], edx
.text:00402F7F                 mov     edx, [esp+24h]
.text:00402F83                 mov     [esp+10h], ecx
.text:00402F87                 mov     ecx, [esp+28h]
.text:00402F8B                 mov     [esp+4], edx
.text:00402F8F                 mov     edx, [esp+20h]
.text:00402F93                 mov     [esp+8], ecx
.text:00402F97                 mov     [esp], edx
.text:00402F9A                 call    sub_402C80
.text:00402F9F                 add     esp, 1Ch
.text:00402FA2                 retn
.text:00402FA2 ; ---------------------------------------------------------------------------
.text:00402FA3                 align 10h
.text:00402FB0                 sub     esp, 2Ch
.text:00402FB3                 mov     edx, [esp+44h]
.text:00402FB7                 mov     dword ptr [esp+18h], 0
.text:00402FBF                 mov     ecx, [esp+40h]
.text:00402FC3                 mov     dword ptr [esp+14h], 1
.text:00402FCB                 mov     [esp+1Ch], edx
.text:00402FCF                 mov     edx, [esp+3Ch]
.text:00402FD3                 mov     [esp+10h], ecx
.text:00402FD7                 mov     ecx, [esp+38h]
.text:00402FDB                 mov     [esp+0Ch], edx
.text:00402FDF                 mov     edx, [esp+34h]
.text:00402FE3                 mov     [esp+8], ecx
.text:00402FE7                 mov     [esp+4], edx
.text:00402FEB                 mov     edx, [esp+30h]
.text:00402FEF                 mov     [esp], edx
.text:00402FF2                 call    sub_4020F0
.text:00402FF7                 add     esp, 2Ch
.text:00402FFA                 retn
.text:00402FFA ; ---------------------------------------------------------------------------
.text:00402FFB                 align 10h
.text:00403000 aHelp           db 'help',0             ; DATA XREF: .text:off_403020↓o
.text:00403005 aVersion        db 'version',0          ; DATA XREF: .text:00403030↓o
.text:0040300D                 align 20h
.text:00403020 off_403020      dd offset aHelp         ; DATA XREF: sub_403060+3D↓o
.text:00403020                                         ; "help"
.text:00403024                 dd 2 dup(0)
.text:0040302C                 dd 68h
.text:00403030                 dd offset aVersion      ; "version"
.text:00403034                 dd 2 dup(0)
.text:0040303C                 dd 76h, 4 dup(0)
.text:00403050 ; ---------------------------------------------------------------------------
.text:00403050
.text:00403050 loc_403050:                             ; DATA XREF: sub_403060+45↓o
.text:00403050                 sub     eax, [eax]
.text:00403052                 lea     esi, [esi+0]
.text:00403059                 lea     edi, [edi+0]
.text:00403060
.text:00403060 ; =============== S U B R O U T I N E =======================================
.text:00403060
.text:00403060
.text:00403060 ; int __cdecl sub_403060(int, int, FILE *, int, int, int, char)
.text:00403060 sub_403060      proc near               ; CODE XREF: sub_401730+9F↑p
.text:00403060
.text:00403060 Code            = dword ptr -1Ch
.text:00403060 var_18          = dword ptr -18h
.text:00403060 var_14          = dword ptr -14h
.text:00403060 var_10          = dword ptr -10h
.text:00403060 var_C           = dword ptr -0Ch
.text:00403060 var_4           = dword ptr -4
.text:00403060 arg_0           = dword ptr  4
.text:00403060 arg_4           = dword ptr  8
.text:00403060 arg_8           = dword ptr  0Ch
.text:00403060 arg_C           = dword ptr  10h
.text:00403060 arg_10          = dword ptr  14h
.text:00403060 arg_14          = dword ptr  18h
.text:00403060 arg_18          = byte ptr  1Ch
.text:00403060
.text:00403060                 sub     esp, 1Ch
.text:00403063                 xor     eax, eax
.text:00403065                 cmp     [esp+1Ch+arg_0], 2
.text:0040306A                 mov     [esp+1Ch+var_4], ebx
.text:0040306E                 mov     ebx, dword_406014
.text:00403074                 mov     dword_406014, eax
.text:00403079                 jz      short loc_403091
.text:0040307B
.text:0040307B loc_40307B:                             ; CODE XREF: sub_403060+60↓j
.text:0040307B                                         ; sub_403060+6A↓j
.text:0040307B                 mov     dword_406014, ebx
.text:00403081                 xor     edx, edx
.text:00403083                 mov     ebx, [esp+1Ch+var_4]
.text:00403087                 mov     dword_406010, edx
.text:0040308D                 add     esp, 1Ch
.text:00403090                 retn
.text:00403091 ; ---------------------------------------------------------------------------
.text:00403091
.text:00403091 loc_403091:                             ; CODE XREF: sub_403060+19↑j
.text:00403091                 mov     [esp+1Ch+var_C], 0 ; int
.text:00403099                 mov     edx, [esp+1Ch+arg_4]
.text:0040309D                 mov     [esp+1Ch+var_10], offset off_403020 ; int
.text:004030A5                 mov     [esp+1Ch+var_14], offset loc_403050 ; char *
.text:004030AD                 mov     [esp+1Ch+var_18], edx ; int
.text:004030B1                 mov     [esp+1Ch+Code], 2 ; int
.text:004030B8                 call    sub_402EC0
.text:004030BD                 cmp     eax, 0FFFFFFFFh
.text:004030C0                 jz      short loc_40307B
.text:004030C2                 cmp     eax, 68h ; 'h'
.text:004030C5                 jz      short loc_4030CE
.text:004030C7                 cmp     eax, 76h ; 'v'
.text:004030CA                 jnz     short loc_40307B
.text:004030CC                 jmp     short loc_4030D9
.text:004030CE ; ---------------------------------------------------------------------------
.text:004030CE
.text:004030CE loc_4030CE:                             ; CODE XREF: sub_403060+65↑j
.text:004030CE                 mov     [esp+1Ch+Code], 0
.text:004030D5                 call    [esp+1Ch+arg_14]
.text:004030D9
.text:004030D9 loc_4030D9:                             ; CODE XREF: sub_403060+6C↑j
.text:004030D9                 mov     ecx, [esp+1Ch+arg_10]
.text:004030DD                 lea     ebx, [esp+1Ch+arg_18]
.text:004030E1                 mov     edx, [esp+1Ch+arg_C]
.text:004030E5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:004030E9                 mov     ebx, [esp+1Ch+arg_8]
.text:004030ED                 mov     [esp+1Ch+var_10], ecx ; int
.text:004030F1                 mov     ecx, ds:_iob
.text:004030F7                 mov     [esp+1Ch+var_14], edx ; int
.text:004030FB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:004030FF                 add     ecx, 20h ; ' '
.text:00403102                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00403105                 call    sub_403590
.text:0040310A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00403111                 call    exit
.text:00403111 sub_403060      endp
.text:00403111
.text:00403111 ; ---------------------------------------------------------------------------
.text:00403116                 align 10h
.text:00403120                 mov     edx, [esp+4]
.text:00403124                 mov     ds:dword_407040, edx
.text:0040312A                 retn
.text:0040312A ; ---------------------------------------------------------------------------
.text:0040312B aWriteError_0   db 'write error',0      ; DATA XREF: sub_403150:loc_403199↓o
.text:00403137 ; const char aSS_0[]
.text:00403137 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403150+77↓o
.text:0040313E ; const char aS_3[]
.text:0040313E aS_3            db '%s',0               ; DATA XREF: sub_403150+A0↓o
.text:00403141 ; ---------------------------------------------------------------------------
.text:00403141                 jmp     short sub_403150
.text:00403141 ; ---------------------------------------------------------------------------
.text:00403143                 align 10h
.text:00403150
.text:00403150 ; =============== S U B R O U T I N E =======================================
.text:00403150
.text:00403150
.text:00403150 ; void __cdecl sub_403150()
.text:00403150 sub_403150      proc near               ; CODE XREF: .text:00403141↑j
.text:00403150                                         ; DATA XREF: sub_401730+5C↑o
.text:00403150
.text:00403150 Stream          = dword ptr -2Ch
.text:00403150 ErrorMessage    = dword ptr -28h
.text:00403150 var_24          = dword ptr -24h
.text:00403150 var_20          = byte ptr -20h
.text:00403150 var_1C          = dword ptr -1Ch
.text:00403150 var_9           = byte ptr -9
.text:00403150
.text:00403150                 push    esi
.text:00403151                 push    ebx
.text:00403152                 sub     esp, 24h
.text:00403155                 mov     edx, ds:_iob
.text:0040315B                 mov     ecx, [edx+2Ch]
.text:0040315E                 lea     esi, [edx+20h]
.text:00403161                 shr     ecx, 5
.text:00403164                 mov     bl, cl
.text:00403166                 mov     ecx, [edx+20h]
.text:00403169                 and     bl, 1
.text:0040316C                 cmp     ecx, [esi+8]
.text:0040316F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403172                 setz    [esp+2Ch+var_9]
.text:00403177                 call    fclose
.text:0040317C                 test    eax, eax
.text:0040317E                 setnz   al
.text:00403181                 test    bl, bl
.text:00403183                 jnz     loc_403213
.text:00403189                 test    al, al
.text:0040318B                 jz      short loc_4031E0
.text:0040318D
.text:0040318D loc_40318D:                             ; CODE XREF: sub_403150+CD↓j
.text:0040318D                 call    _errno
.text:00403192                 mov     esi, [eax]
.text:00403194
.text:00403194 loc_403194:                             ; CODE XREF: sub_403150+C7↓j
.text:00403194                 cmp     esi, 9
.text:00403197                 jz      short loc_403206
.text:00403199
.text:00403199 loc_403199:                             ; CODE XREF: sub_403150+B8↓j
.text:00403199                                         ; sub_403150+C1↓j
.text:00403199                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:004031A0                 call    ds:libintl_gettext
.text:004031A6                 mov     ebx, eax
.text:004031A8                 mov     eax, ds:dword_407040
.text:004031AD                 test    eax, eax
.text:004031AF                 jz      short loc_4031E6
.text:004031B1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004031B4                 call    sub_4048D0
.text:004031B9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004031BD                 mov     edx, Code
.text:004031C3                 mov     [esp+2Ch+var_1C], ebx
.text:004031C7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004031CF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004031D3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004031D6                 call    sub_404EC0
.text:004031DB                 nop
.text:004031DC                 lea     esi, [esi+0]
.text:004031E0
.text:004031E0 loc_4031E0:                             ; CODE XREF: sub_403150+3B↑j
.text:004031E0                                         ; sub_403150+B4↓j ...
.text:004031E0                 add     esp, 24h
.text:004031E3                 pop     ebx
.text:004031E4                 pop     esi
.text:004031E5                 retn
.text:004031E6 ; ---------------------------------------------------------------------------
.text:004031E6
.text:004031E6 loc_4031E6:                             ; CODE XREF: sub_403150+5F↑j
.text:004031E6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004031EA                 mov     ebx, Code
.text:004031F0                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:004031F8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004031FC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004031FF                 call    sub_404EC0
.text:00403204                 jmp     short loc_4031E0
.text:00403206 ; ---------------------------------------------------------------------------
.text:00403206
.text:00403206 loc_403206:                             ; CODE XREF: sub_403150+47↑j
.text:00403206                 test    bl, bl
.text:00403208                 jnz     short loc_403199
.text:0040320A                 cmp     [esp+2Ch+var_9], 0
.text:0040320F                 jnz     short loc_4031E0
.text:00403211                 jmp     short loc_403199
.text:00403213 ; ---------------------------------------------------------------------------
.text:00403213
.text:00403213 loc_403213:                             ; CODE XREF: sub_403150+33↑j
.text:00403213                 xor     esi, esi
.text:00403215                 test    al, al
.text:00403217                 jz      loc_403194
.text:0040321D                 jmp     loc_40318D
.text:0040321D sub_403150      endp
.text:0040321D
.text:0040321D ; ---------------------------------------------------------------------------
.text:00403222                 align 10h
.text:00403230
.text:00403230 ; =============== S U B R O U T I N E =======================================
.text:00403230
.text:00403230
.text:00403230 sub_403230      proc near               ; CODE XREF: sub_401B60+186↑p
.text:00403230
.text:00403230 var_1C          = dword ptr -1Ch
.text:00403230 var_18          = dword ptr -18h
.text:00403230 var_14          = dword ptr -14h
.text:00403230 var_10          = dword ptr -10h
.text:00403230 arg_0           = dword ptr  4
.text:00403230 arg_4           = dword ptr  8
.text:00403230 arg_8           = dword ptr  0Ch
.text:00403230
.text:00403230                 push    edi
.text:00403231                 push    esi
.text:00403232                 push    ebx
.text:00403233                 sub     esp, 10h
.text:00403236                 mov     edx, [esp+1Ch+arg_8]
.text:0040323A                 mov     ebx, [esp+1Ch+arg_0]
.text:0040323E                 mov     esi, [esp+1Ch+arg_4]
.text:00403242                 lea     edi, [edx+15h]
.text:00403245                 mov     byte ptr [edx+15h], 0
.text:00403249                 lea     esi, [esi+0]
.text:00403250
.text:00403250 loc_403250:                             ; CODE XREF: sub_403230+63↓j
.text:00403250                 mov     [esp+1Ch+var_1C], ebx
.text:00403253                 dec     edi
.text:00403254                 mov     [esp+1Ch+var_18], esi
.text:00403258                 mov     [esp+1Ch+var_14], 0Ah
.text:00403260                 mov     [esp+1Ch+var_10], 0
.text:00403268                 call    sub_4052E0
.text:0040326D                 add     al, 30h ; '0'
.text:0040326F                 mov     [edi], al
.text:00403271                 mov     [esp+1Ch+var_1C], ebx
.text:00403274                 mov     [esp+1Ch+var_18], esi
.text:00403278                 mov     [esp+1Ch+var_14], 0Ah
.text:00403280                 mov     [esp+1Ch+var_10], 0
.text:00403288                 call    sub_405460
.text:0040328D                 mov     ebx, eax
.text:0040328F                 mov     esi, edx
.text:00403291                 or      edx, ebx
.text:00403293                 jnz     short loc_403250
.text:00403295                 add     esp, 10h
.text:00403298                 mov     eax, edi
.text:0040329A                 pop     ebx
.text:0040329B                 pop     esi
.text:0040329C                 pop     edi
.text:0040329D                 retn
.text:0040329D sub_403230      endp
.text:0040329D
.text:0040329D ; ---------------------------------------------------------------------------
.text:0040329E                 align 10h
.text:004032A0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004032A0                                         ; DATA XREF: .data:Buffer↓o
.text:004032D2 ; const char aSSS[]
.text:004032D2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403590+50↓o
.text:004032DE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004032DE                                         ; DATA XREF: sub_403590:loc_403631↓o
.text:004032EE                 align 20h
.text:00403300 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403300                                         ; DATA XREF: sub_403590+100↓o
.text:00403300                 db 'ere is NO',0Ah
.text:00403300                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403300                 db 'R PURPOSE.',0Ah,0
.text:00403398 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403398                                         ; DATA XREF: sub_403590:loc_4036D1↓o
.text:004033AF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004033AF                                         ; DATA XREF: sub_403590:loc_4036DD↓o
.text:004033CB                 align 20h
.text:004033E0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004033E0                                         ; DATA XREF: sub_403590:loc_4036E9↓o
.text:004033E0                 db 'and %s.',0Ah,0
.text:00403400 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403400                                         ; DATA XREF: sub_403590:loc_4036F5↓o
.text:00403400                 db '%s, and %s.',0Ah,0
.text:00403424                 align 20h
.text:00403440 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403440                                         ; DATA XREF: sub_403590:loc_403701↓o
.text:00403440                 db '%s, %s, and %s.',0Ah,0
.text:00403468                 align 20h
.text:00403480 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403480                                         ; DATA XREF: sub_403590:loc_40370D↓o
.text:00403480                 db '%s, %s, %s, and %s.',0Ah,0
.text:004034AC                 align 20h
.text:004034C0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004034C0                                         ; DATA XREF: sub_403590:loc_403719↓o
.text:004034C0                 db '%s, %s, %s, %s,',0Ah
.text:004034C0                 db 'and %s.',0Ah,0
.text:004034F0                 align 20h
.text:00403500 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403500                                         ; DATA XREF: sub_403590:loc_403725↓o
.text:00403500                 db '%s, %s, %s, %s,',0Ah
.text:00403500                 db '%s, and %s.',0Ah,0
.text:00403534                 align 10h
.text:00403540 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403540                                         ; DATA XREF: sub_403590:def_4035FD↓o
.text:00403540                 db '%s, %s, %s, %s,',0Ah
.text:00403540                 db '%s, %s, and others.',0Ah,0
.text:0040357C ; const char aSS[]
.text:0040357C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403590+1B5↓o
.text:00403583                 align 10h
.text:00403590
.text:00403590 ; =============== S U B R O U T I N E =======================================
.text:00403590
.text:00403590
.text:00403590 ; int __cdecl sub_403590(FILE *, FILE *, int, int, va_list)
.text:00403590 sub_403590      proc near               ; CODE XREF: sub_403060+A5↑p
.text:00403590                                         ; .text:0040378A↓p
.text:00403590
.text:00403590 Stream          = dword ptr -2Ch
.text:00403590 Format          = dword ptr -28h
.text:00403590 ArgList         = dword ptr -24h
.text:00403590 var_20          = dword ptr -20h
.text:00403590 var_1C          = dword ptr -1Ch
.text:00403590 var_14          = dword ptr -14h
.text:00403590 arg_0           = dword ptr  4
.text:00403590 arg_4           = dword ptr  8
.text:00403590 arg_8           = dword ptr  0Ch
.text:00403590 arg_C           = dword ptr  10h
.text:00403590 arg_10          = dword ptr  14h
.text:00403590
.text:00403590                 push    ebp
.text:00403591                 push    edi
.text:00403592                 push    esi
.text:00403593                 push    ebx
.text:00403594                 sub     esp, 1Ch
.text:00403597                 xor     ebx, ebx
.text:00403599                 mov     edi, [esp+2Ch+arg_10]
.text:0040359D                 mov     edx, [esp+2Ch+arg_8]
.text:004035A1                 mov     esi, [esp+2Ch+arg_0]
.text:004035A5                 mov     eax, [edi]
.text:004035A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004035AB                 mov     [esp+2Ch+var_14], edx
.text:004035AF                 mov     ebp, [esp+2Ch+arg_C]
.text:004035B3                 lea     edx, [edi+4]
.text:004035B6                 test    eax, eax
.text:004035B8                 jz      short loc_4035CC
.text:004035BA                 lea     esi, [esi+0]
.text:004035C0
.text:004035C0 loc_4035C0:                             ; CODE XREF: sub_403590+3A↓j
.text:004035C0                 mov     eax, edx
.text:004035C2                 inc     ebx
.text:004035C3                 mov     eax, [eax]
.text:004035C5                 add     edx, 4
.text:004035C8                 test    eax, eax
.text:004035CA                 jnz     short loc_4035C0
.text:004035CC
.text:004035CC loc_4035CC:                             ; CODE XREF: sub_403590+28↑j
.text:004035CC                 test    ecx, ecx
.text:004035CE                 jz      loc_40373D
.text:004035D4                 mov     [esp+2Ch+var_1C], ebp
.text:004035D8                 mov     edx, [esp+2Ch+var_14]
.text:004035DC                 mov     [esp+2Ch+ArgList], ecx
.text:004035E0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:004035E8                 mov     [esp+2Ch+var_20], edx
.text:004035EC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004035EF                 call    fprintf
.text:004035F4
.text:004035F4 loc_4035F4:                             ; CODE XREF: sub_403590+1C9↓j
.text:004035F4                 cmp     ebx, 9          ; switch 10 cases
.text:004035F7                 ja      def_4035FD      ; jumptable 004035FD default case
.text:004035FD                 jmp     ds:jpt_4035FD[ebx*4] ; switch jump
.text:004035FD ; ---------------------------------------------------------------------------
.text:00403604 jpt_4035FD      dd offset loc_40362C    ; DATA XREF: sub_403590+6D↑r
.text:00403604                 dd offset loc_403631    ; jump table for switch statement
.text:00403604                 dd offset loc_4036D1
.text:00403604                 dd offset loc_4036DD
.text:00403604                 dd offset loc_4036E9
.text:00403604                 dd offset loc_4036F5
.text:00403604                 dd offset loc_403701
.text:00403604                 dd offset loc_40370D
.text:00403604                 dd offset loc_403719
.text:00403604                 dd offset loc_403725
.text:0040362C ; ---------------------------------------------------------------------------
.text:0040362C
.text:0040362C loc_40362C:                             ; CODE XREF: sub_403590+6D↑j
.text:0040362C                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:0040362C                 call    abort           ; jumptable 004035FD case 0
.text:00403631 ; ---------------------------------------------------------------------------
.text:00403631
.text:00403631 loc_403631:                             ; CODE XREF: sub_403590+6D↑j
.text:00403631                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:00403631                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004035FD case 1
.text:00403638                 nop
.text:00403639                 lea     esi, [esi+0]
.text:00403640
.text:00403640 loc_403640:                             ; CODE XREF: sub_403590+148↓j
.text:00403640                                         ; sub_403590+154↓j ...
.text:00403640                 call    ds:libintl_gettext
.text:00403646                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040364A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040364D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403651                 call    vfprintf
.text:00403656                 mov     ebx, [esi+4]
.text:00403659                 dec     ebx
.text:0040365A                 test    ebx, ebx
.text:0040365C                 mov     [esi+4], ebx
.text:0040365F                 js      short loc_4036BF
.text:00403661                 mov     edi, [esi]
.text:00403663                 mov     byte ptr [edi], 0Ah
.text:00403666                 inc     dword ptr [esi]
.text:00403668
.text:00403668 loc_403668:                             ; CODE XREF: sub_403590+13F↓j
.text:00403668                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040366C                 mov     edx, Buffer
.text:00403672                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403675                 call    fputs
.text:0040367A                 mov     ebp, [esi+4]
.text:0040367D                 dec     ebp
.text:0040367E                 test    ebp, ebp
.text:00403680                 mov     [esi+4], ebp
.text:00403683                 js      short loc_4036AD
.text:00403685                 mov     ecx, [esi]
.text:00403687                 mov     byte ptr [ecx], 0Ah
.text:0040368A                 inc     dword ptr [esi]
.text:0040368C
.text:0040368C loc_40368C:                             ; CODE XREF: sub_403590+12D↓j
.text:0040368C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403690                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403697                 call    ds:libintl_gettext
.text:0040369D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004036A1                 add     esp, 1Ch
.text:004036A4                 pop     ebx
.text:004036A5                 pop     esi
.text:004036A6                 pop     edi
.text:004036A7                 pop     ebp
.text:004036A8                 jmp     fputs
.text:004036AD ; ---------------------------------------------------------------------------
.text:004036AD
.text:004036AD loc_4036AD:                             ; CODE XREF: sub_403590+F3↑j
.text:004036AD                 mov     [esp+2Ch+Format], esi ; File
.text:004036B1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004036B8                 call    _flsbuf
.text:004036BD                 jmp     short loc_40368C
.text:004036BF ; ---------------------------------------------------------------------------
.text:004036BF
.text:004036BF loc_4036BF:                             ; CODE XREF: sub_403590+CF↑j
.text:004036BF                 mov     [esp+2Ch+Format], esi ; File
.text:004036C3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004036CA                 call    _flsbuf
.text:004036CF                 jmp     short loc_403668
.text:004036D1 ; ---------------------------------------------------------------------------
.text:004036D1
.text:004036D1 loc_4036D1:                             ; CODE XREF: sub_403590+6D↑j
.text:004036D1                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:004036D1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004035FD case 2
.text:004036D8                 jmp     loc_403640
.text:004036DD ; ---------------------------------------------------------------------------
.text:004036DD
.text:004036DD loc_4036DD:                             ; CODE XREF: sub_403590+6D↑j
.text:004036DD                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:004036DD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004035FD case 3
.text:004036E4                 jmp     loc_403640
.text:004036E9 ; ---------------------------------------------------------------------------
.text:004036E9
.text:004036E9 loc_4036E9:                             ; CODE XREF: sub_403590+6D↑j
.text:004036E9                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:004036E9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004035FD case 4
.text:004036F0                 jmp     loc_403640
.text:004036F5 ; ---------------------------------------------------------------------------
.text:004036F5
.text:004036F5 loc_4036F5:                             ; CODE XREF: sub_403590+6D↑j
.text:004036F5                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:004036F5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004035FD case 5
.text:004036FC                 jmp     loc_403640
.text:00403701 ; ---------------------------------------------------------------------------
.text:00403701
.text:00403701 loc_403701:                             ; CODE XREF: sub_403590+6D↑j
.text:00403701                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:00403701                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004035FD case 6
.text:00403708                 jmp     loc_403640
.text:0040370D ; ---------------------------------------------------------------------------
.text:0040370D
.text:0040370D loc_40370D:                             ; CODE XREF: sub_403590+6D↑j
.text:0040370D                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:0040370D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004035FD case 7
.text:00403714                 jmp     loc_403640
.text:00403719 ; ---------------------------------------------------------------------------
.text:00403719
.text:00403719 loc_403719:                             ; CODE XREF: sub_403590+6D↑j
.text:00403719                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:00403719                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004035FD case 8
.text:00403720                 jmp     loc_403640
.text:00403725 ; ---------------------------------------------------------------------------
.text:00403725
.text:00403725 loc_403725:                             ; CODE XREF: sub_403590+6D↑j
.text:00403725                                         ; DATA XREF: sub_403590:jpt_4035FD↑o
.text:00403725                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004035FD case 9
.text:0040372C                 jmp     loc_403640
.text:00403731 ; ---------------------------------------------------------------------------
.text:00403731
.text:00403731 def_4035FD:                             ; CODE XREF: sub_403590+67↑j
.text:00403731                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004035FD default case
.text:00403738                 jmp     loc_403640
.text:0040373D ; ---------------------------------------------------------------------------
.text:0040373D
.text:0040373D loc_40373D:                             ; CODE XREF: sub_403590+3E↑j
.text:0040373D                 mov     [esp+2Ch+var_20], ebp
.text:00403741                 mov     ecx, [esp+2Ch+var_14]
.text:00403745                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040374D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403750                 mov     [esp+2Ch+ArgList], ecx
.text:00403754                 call    fprintf
.text:00403759                 jmp     loc_4035F4
.text:00403759 sub_403590      endp
.text:00403759
.text:00403759 ; ---------------------------------------------------------------------------
.text:0040375E                 align 10h
.text:00403760                 sub     esp, 1Ch
.text:00403763                 mov     edx, [esp+2Ch]
.text:00403767                 lea     ecx, [esp+30h]
.text:0040376B                 mov     [esp+10h], ecx
.text:0040376F                 mov     ecx, [esp+28h]
.text:00403773                 mov     [esp+0Ch], edx
.text:00403777                 mov     edx, [esp+24h]
.text:0040377B                 mov     [esp+8], ecx
.text:0040377F                 mov     [esp+4], edx
.text:00403783                 mov     edx, [esp+20h]
.text:00403787                 mov     [esp], edx
.text:0040378A                 call    sub_403590
.text:0040378F                 add     esp, 1Ch
.text:00403792                 retn
.text:00403792 ; ---------------------------------------------------------------------------
.text:00403793                 align 10h
.text:004037A0 aLiteral        db 'literal',0          ; DATA XREF: .text:004037E0↓o
.text:004037A8 aShell          db 'shell',0            ; DATA XREF: .text:004037E4↓o
.text:004037AE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004037E8↓o
.text:004037BB aC              db 'c',0                ; DATA XREF: .text:004037EC↓o
.text:004037BD aEscape         db 'escape',0           ; DATA XREF: .text:004037F0↓o
.text:004037C4 aLocale         db 'locale',0           ; DATA XREF: .text:004037F4↓o
.text:004037CB aClocale        db 'clocale',0
.text:004037D3                 align 10h
.text:004037E0                 dd offset aLiteral      ; "literal"
.text:004037E4                 dd offset aShell        ; "shell"
.text:004037E8                 dd offset aShellAlways  ; "shell-always"
.text:004037EC                 dd offset aC            ; "c"
.text:004037F0                 dd offset aEscape       ; "escape"
.text:004037F4                 dd offset aLocale       ; "locale"
.text:004037F8 ; ---------------------------------------------------------------------------
.text:004037F8                 retf
.text:004037F8 ; ---------------------------------------------------------------------------
.text:004037F9                 db 37h, 40h, 0
.text:004037FC                 dd 2 dup(0)
.text:00403804                 dd 1, 2, 3, 4, 5, 6
.text:0040381C asc_40381C:                             ; DATA XREF: sub_403830+7E↓o
.text:0040381C                                         ; sub_403830+A39↓o ...
.text:0040381C                 text "UTF-16LE", '"',27h,'`'
.text:00403822                 align 10h
.text:00403830
.text:00403830 ; =============== S U B R O U T I N E =======================================
.text:00403830
.text:00403830
.text:00403830 ; int __cdecl sub_403830(int, int, char *Str, int, int, int)
.text:00403830 sub_403830      proc near               ; CODE XREF: sub_403830+43A↓p
.text:00403830                                         ; .text:004043F3↓p ...
.text:00403830
.text:00403830 C               = dword ptr -4Ch
.text:00403830 Type            = dword ptr -48h
.text:00403830 SizeInBytes     = dword ptr -44h
.text:00403830 State           = dword ptr -40h
.text:00403830 var_3C          = dword ptr -3Ch
.text:00403830 var_38          = dword ptr -38h
.text:00403830 var_34          = dword ptr -34h
.text:00403830 var_30          = dword ptr -30h
.text:00403830 var_29          = byte ptr -29h
.text:00403830 var_28          = dword ptr -28h
.text:00403830 var_22          = byte ptr -22h
.text:00403830 var_21          = byte ptr -21h
.text:00403830 var_20          = dword ptr -20h
.text:00403830 var_1C          = dword ptr -1Ch
.text:00403830 var_18          = mbstate_t ptr -18h
.text:00403830 arg_0           = dword ptr  4
.text:00403830 arg_4           = dword ptr  8
.text:00403830 Str             = dword ptr  0Ch
.text:00403830 arg_C           = dword ptr  10h
.text:00403830 arg_10          = dword ptr  14h
.text:00403830 arg_14          = dword ptr  18h
.text:00403830
.text:00403830                 push    ebp
.text:00403831                 push    edi
.text:00403832                 push    esi
.text:00403833                 push    ebx
.text:00403834                 sub     esp, 3Ch
.text:00403837                 mov     edx, ds:__mb_cur_max
.text:0040383D                 mov     [esp+4Ch+var_34], 0
.text:00403845                 mov     [esp+4Ch+var_1C], 0
.text:0040384D                 cmp     dword ptr [edx], 1
.text:00403850                 mov     [esp+4Ch+var_20], 0
.text:00403858                 mov     [esp+4Ch+var_21], 0
.text:0040385D                 setz    [esp+4Ch+var_22]
.text:00403862                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403867                 ja      short def_40386D ; jumptable 0040386D default case, cases 0,1
.text:00403869                 mov     edx, [esp+4Ch+arg_10]
.text:0040386D                 jmp     ds:jpt_40386D[edx*4] ; switch jump
.text:0040386D ; ---------------------------------------------------------------------------
.text:00403874 jpt_40386D      dd offset def_40386D    ; DATA XREF: sub_403830+3D↑r
.text:00403874                 dd offset def_40386D    ; jump table for switch statement
.text:00403874                 dd offset loc_4041B5
.text:00403874                 dd offset loc_403890
.text:00403874                 dd offset loc_4041DB
.text:00403874                 dd offset loc_4041E5
.text:00403874                 dd offset loc_4041E5
.text:00403890 ; ---------------------------------------------------------------------------
.text:00403890
.text:00403890 loc_403890:                             ; CODE XREF: sub_403830+3D↑j
.text:00403890                                         ; DATA XREF: sub_403830:jpt_40386D↑o
.text:00403890                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040386D case 3
.text:00403894                 cmp     [esp+4Ch+var_34], eax
.text:00403898                 jnb     short loc_4038A1
.text:0040389A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040389E                 mov     byte ptr [ebx], 22h ; '"'
.text:004038A1
.text:004038A1 loc_4038A1:                             ; CODE XREF: sub_403830+68↑j
.text:004038A1                 mov     [esp+4Ch+var_34], 1
.text:004038A9                 mov     [esp+4Ch+var_21], 1
.text:004038AE                 mov     [esp+4Ch+var_1C], offset asc_40381C ; "\"'`"
.text:004038B6
.text:004038B6 loc_4038B6:                             ; CODE XREF: sub_403830+9A6↓j
.text:004038B6                 mov     [esp+4Ch+var_20], 1
.text:004038BE
.text:004038BE def_40386D:                             ; CODE XREF: sub_403830+37↑j
.text:004038BE                                         ; sub_403830+3D↑j ...
.text:004038BE                 xor     ebp, ebp        ; jumptable 0040386D default case, cases 0,1
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: sub_403830+3DB↓j
.text:004038C0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004038C5                 jz      loc_4041A7
.text:004038CB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004038CF
.text:004038CF loc_4038CF:                             ; CODE XREF: sub_403830+980↓j
.text:004038CF                 jz      loc_40413E
.text:004038D5                 cmp     [esp+4Ch+var_21], 0
.text:004038DA                 jz      short loc_403920
.text:004038DC                 mov     esi, [esp+4Ch+var_20]
.text:004038E0                 test    esi, esi
.text:004038E2                 jz      short loc_403920
.text:004038E4                 mov     ecx, [esp+4Ch+var_20]
.text:004038E8                 lea     edi, [ecx+ebp]
.text:004038EB                 cmp     edi, [esp+4Ch+arg_C]
.text:004038EF                 ja      short loc_403920
.text:004038F1                 cld
.text:004038F2                 mov     ebx, [esp+4Ch+Str]
.text:004038F6                 mov     edi, [esp+4Ch+var_1C]
.text:004038FA                 add     ebx, ebp
.text:004038FC                 mov     esi, ebx
.text:004038FE                 cmp     ecx, ecx
.text:00403900                 repe cmpsb
.text:00403902                 jnz     short loc_403920
.text:00403904                 mov     edx, [esp+4Ch+arg_4]
.text:00403908                 cmp     [esp+4Ch+var_34], edx
.text:0040390C                 jnb     short loc_40391A
.text:0040390E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403912                 mov     eax, [esp+4Ch+var_34]
.text:00403916                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040391A
.text:0040391A loc_40391A:                             ; CODE XREF: sub_403830+DC↑j
.text:0040391A                 inc     [esp+4Ch+var_34]
.text:0040391E                 mov     esi, esi
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: sub_403830+AA↑j
.text:00403920                                         ; sub_403830+B2↑j ...
.text:00403920                 mov     edi, [esp+4Ch+Str]
.text:00403924                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403929                 movzx   eax, bl
.text:0040392C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040392F                 ja      def_403935      ; jumptable 00403935 default case, cases 1-6,14-31,64
.text:00403935                 jmp     ds:jpt_403935[eax*4] ; switch jump
.text:00403935 ; ---------------------------------------------------------------------------
.text:0040393C jpt_403935      dd offset loc_403B38, offset def_403935, offset def_403935
.text:0040393C                                         ; DATA XREF: sub_403830+105↑r
.text:0040393C                 dd offset def_403935, offset def_403935, offset def_403935 ; jump table for switch statement
.text:0040393C                 dd offset def_403935, offset loc_403C10, offset loc_403C2E
.text:0040393C                 dd offset loc_403C32, offset loc_403C77, offset loc_403C7B
.text:0040393C                 dd offset loc_403C7F, offset loc_403C83, offset def_403935
.text:0040393C                 dd offset def_403935, offset def_403935, offset def_403935
.text:0040393C                 dd offset def_403935, offset def_403935, offset def_403935
.text:0040393C                 dd offset def_403935, offset def_403935, offset def_403935
.text:0040393C                 dd offset def_403935, offset def_403935, offset def_403935
.text:0040393C                 dd offset def_403935, offset def_403935, offset def_403935
.text:0040393C                 dd offset def_403935, offset def_403935, offset loc_404108
.text:0040393C                 dd offset loc_404108, offset loc_404108, offset loc_40412A
.text:0040393C                 dd offset loc_404108, offset def_403D32, offset loc_404108
.text:0040393C                 dd offset loc_403C87, offset loc_404108, offset loc_404108
.text:0040393C                 dd offset loc_404108, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset loc_404108
.text:0040393C                 dd offset loc_404108, offset loc_404108, offset loc_404108
.text:0040393C                 dd offset loc_403CEC, offset def_403935, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset loc_404108, offset loc_404101
.text:0040393C                 dd offset def_403D32, offset loc_404108, offset def_403D32
.text:0040393C                 dd offset loc_404108, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset def_403D32, offset def_403D32, offset def_403D32
.text:0040393C                 dd offset loc_404118, offset loc_404108, offset loc_404118
.text:0040393C                 dd offset loc_40412A
.text:00403B38 ; ---------------------------------------------------------------------------
.text:00403B38
.text:00403B38 loc_403B38:                             ; CODE XREF: sub_403830+105↑j
.text:00403B38                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403B38                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403935 case 0
.text:00403B3D                 lea     eax, [ebp+1]
.text:00403B40                 jz      loc_403BF0
.text:00403B46                 mov     esi, [esp+4Ch+arg_4]
.text:00403B4A                 cmp     [esp+4Ch+var_34], esi
.text:00403B4E                 jnb     short loc_403B5C
.text:00403B50                 mov     eax, [esp+4Ch+arg_0]
.text:00403B54                 mov     ebx, [esp+4Ch+var_34]
.text:00403B58                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403B5C
.text:00403B5C loc_403B5C:                             ; CODE XREF: sub_403830+31E↑j
.text:00403B5C                 inc     [esp+4Ch+var_34]
.text:00403B60                 mov     edx, [esp+4Ch+arg_4]
.text:00403B64                 cmp     [esp+4Ch+var_34], edx
.text:00403B68                 jnb     short loc_403B76
.text:00403B6A                 mov     edi, [esp+4Ch+arg_0]
.text:00403B6E                 mov     ecx, [esp+4Ch+var_34]
.text:00403B72                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403B76
.text:00403B76 loc_403B76:                             ; CODE XREF: sub_403830+338↑j
.text:00403B76                 inc     [esp+4Ch+var_34]
.text:00403B7A                 mov     esi, [esp+4Ch+arg_4]
.text:00403B7E                 cmp     [esp+4Ch+var_34], esi
.text:00403B82                 jnb     short loc_403B90
.text:00403B84                 mov     ebx, [esp+4Ch+arg_0]
.text:00403B88                 mov     eax, [esp+4Ch+var_34]
.text:00403B8C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: sub_403830+352↑j
.text:00403B90                 inc     [esp+4Ch+var_34]
.text:00403B94                 mov     bl, 30h ; '0'
.text:00403B96                 lea     esi, [esi+0]
.text:00403B99                 lea     edi, [edi+0]
.text:00403BA0
.text:00403BA0 def_403D32:                             ; CODE XREF: sub_403830+105↑j
.text:00403BA0                                         ; sub_403830+463↓j ...
.text:00403BA0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00403BA0                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00403BA5                 lea     eax, [ebp+1]
.text:00403BA8                 jz      short loc_403BF0
.text:00403BAA                 mov     cl, bl
.text:00403BAC                 mov     edi, [esp+4Ch+arg_14]
.text:00403BB0                 mov     esi, 1
.text:00403BB5                 shr     cl, 5
.text:00403BB8                 movzx   edx, cl
.text:00403BBB                 mov     ecx, ebx
.text:00403BBD                 and     ecx, 1Fh
.text:00403BC0                 shl     esi, cl
.text:00403BC2                 test    [edi+edx*4+4], esi
.text:00403BC6                 jz      short loc_403BE2
.text:00403BC8
.text:00403BC8 loc_403BC8:                             ; CODE XREF: sub_403830+3FC↓j
.text:00403BC8                 mov     edx, [esp+4Ch+arg_4]
.text:00403BCC                 cmp     [esp+4Ch+var_34], edx
.text:00403BD0                 jnb     short loc_403BDE
.text:00403BD2                 mov     edi, [esp+4Ch+arg_0]
.text:00403BD6                 mov     esi, [esp+4Ch+var_34]
.text:00403BDA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403BDE
.text:00403BDE loc_403BDE:                             ; CODE XREF: sub_403830+3A0↑j
.text:00403BDE                 inc     [esp+4Ch+var_34]
.text:00403BE2
.text:00403BE2 loc_403BE2:                             ; CODE XREF: sub_403830+396↑j
.text:00403BE2                 lea     eax, [ebp+1]
.text:00403BE5                 lea     esi, [esi+0]
.text:00403BE9                 lea     edi, [edi+0]
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: sub_403830+310↑j
.text:00403BF0                                         ; sub_403830+378↑j ...
.text:00403BF0                 mov     ebp, [esp+4Ch+arg_4]
.text:00403BF4                 cmp     [esp+4Ch+var_34], ebp
.text:00403BF8                 jnb     short loc_403C05
.text:00403BFA                 mov     edx, [esp+4Ch+arg_0]
.text:00403BFE                 mov     ecx, [esp+4Ch+var_34]
.text:00403C02                 mov     [ecx+edx], bl
.text:00403C05
.text:00403C05 loc_403C05:                             ; CODE XREF: sub_403830+3C8↑j
.text:00403C05                 inc     [esp+4Ch+var_34]
.text:00403C09                 mov     ebp, eax
.text:00403C0B                 jmp     loc_4038C0
.text:00403C10 ; ---------------------------------------------------------------------------
.text:00403C10
.text:00403C10 loc_403C10:                             ; CODE XREF: sub_403830+105↑j
.text:00403C10                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403C10                 mov     dl, 61h ; 'a'   ; jumptable 00403935 case 7
.text:00403C12                 lea     esi, [esi+0]
.text:00403C19                 lea     edi, [edi+0]
.text:00403C20
.text:00403C20 loc_403C20:                             ; CODE XREF: sub_403830+400↓j
.text:00403C20                                         ; sub_403830+409↓j ...
.text:00403C20                 cmp     [esp+4Ch+var_21], 0
.text:00403C25                 lea     eax, [ebp+1]
.text:00403C28                 jz      short loc_403BF0
.text:00403C2A                 mov     bl, dl
.text:00403C2C                 jmp     short loc_403BC8
.text:00403C2E ; ---------------------------------------------------------------------------
.text:00403C2E
.text:00403C2E loc_403C2E:                             ; CODE XREF: sub_403830+105↑j
.text:00403C2E                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403C2E                 mov     dl, 62h ; 'b'   ; jumptable 00403935 case 8
.text:00403C30                 jmp     short loc_403C20
.text:00403C32 ; ---------------------------------------------------------------------------
.text:00403C32
.text:00403C32 loc_403C32:                             ; CODE XREF: sub_403830+105↑j
.text:00403C32                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403C32                 mov     dl, 74h ; 't'   ; jumptable 00403935 case 9
.text:00403C34
.text:00403C34 loc_403C34:                             ; CODE XREF: sub_403830+449↓j
.text:00403C34                                         ; sub_403830+455↓j ...
.text:00403C34                 cmp     [esp+4Ch+arg_10], 1
.text:00403C39                 jnz     short loc_403C20
.text:00403C3B
.text:00403C3B loc_403C3B:                             ; CODE XREF: sub_403830+45C↓j
.text:00403C3B                                         ; sub_403830+4C1↓j ...
.text:00403C3B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404002 cases 91,92,94,96,124
.text:00403C43                 mov     eax, [esp+4Ch+arg_14]
.text:00403C47                 mov     edx, [esp+4Ch+arg_C]
.text:00403C4B                 mov     ecx, [esp+4Ch+Str]
.text:00403C4F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403C53                 mov     [esp+4Ch+var_38], eax ; int
.text:00403C57                 mov     ebp, [esp+4Ch+arg_0]
.text:00403C5B                 mov     [esp+4Ch+State], edx ; int
.text:00403C5F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403C63                 mov     [esp+4Ch+Type], ebx ; int
.text:00403C67                 mov     [esp+4Ch+C], ebp ; int
.text:00403C6A                 call    sub_403830
.text:00403C6F
.text:00403C6F loc_403C6F:                             ; CODE XREF: sub_403830+972↓j
.text:00403C6F                 add     esp, 3Ch
.text:00403C72                 pop     ebx
.text:00403C73                 pop     esi
.text:00403C74                 pop     edi
.text:00403C75                 pop     ebp
.text:00403C76                 retn
.text:00403C77 ; ---------------------------------------------------------------------------
.text:00403C77
.text:00403C77 loc_403C77:                             ; CODE XREF: sub_403830+105↑j
.text:00403C77                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403C77                 mov     dl, 6Eh ; 'n'   ; jumptable 00403935 case 10
.text:00403C79                 jmp     short loc_403C34
.text:00403C7B ; ---------------------------------------------------------------------------
.text:00403C7B
.text:00403C7B loc_403C7B:                             ; CODE XREF: sub_403830+105↑j
.text:00403C7B                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403C7B                 mov     dl, 76h ; 'v'   ; jumptable 00403935 case 11
.text:00403C7D                 jmp     short loc_403C20
.text:00403C7F ; ---------------------------------------------------------------------------
.text:00403C7F
.text:00403C7F loc_403C7F:                             ; CODE XREF: sub_403830+105↑j
.text:00403C7F                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403C7F                 mov     dl, 66h ; 'f'   ; jumptable 00403935 case 12
.text:00403C81                 jmp     short loc_403C20
.text:00403C83 ; ---------------------------------------------------------------------------
.text:00403C83
.text:00403C83 loc_403C83:                             ; CODE XREF: sub_403830+105↑j
.text:00403C83                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403C83                 mov     dl, 72h ; 'r'   ; jumptable 00403935 case 13
.text:00403C85                 jmp     short loc_403C34
.text:00403C87 ; ---------------------------------------------------------------------------
.text:00403C87
.text:00403C87 loc_403C87:                             ; CODE XREF: sub_403830+105↑j
.text:00403C87                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403C87                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403935 case 39
.text:00403C8C                 jz      short loc_403C3B ; jumptable 00404002 cases 91,92,94,96,124
.text:00403C8E                 cmp     [esp+4Ch+arg_10], 2
.text:00403C93                 jnz     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00403C93                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00403C99                 mov     edx, [esp+4Ch+arg_4]
.text:00403C9D                 cmp     [esp+4Ch+var_34], edx
.text:00403CA1                 jnb     short loc_403CAF
.text:00403CA3                 mov     ecx, [esp+4Ch+arg_0]
.text:00403CA7                 mov     edi, [esp+4Ch+var_34]
.text:00403CAB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403CAF
.text:00403CAF loc_403CAF:                             ; CODE XREF: sub_403830+471↑j
.text:00403CAF                 inc     [esp+4Ch+var_34]
.text:00403CB3                 mov     eax, [esp+4Ch+arg_4]
.text:00403CB7                 cmp     [esp+4Ch+var_34], eax
.text:00403CBB                 jnb     short loc_403CC9
.text:00403CBD                 mov     esi, [esp+4Ch+arg_0]
.text:00403CC1                 mov     edx, [esp+4Ch+var_34]
.text:00403CC5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403CC9
.text:00403CC9 loc_403CC9:                             ; CODE XREF: sub_403830+48B↑j
.text:00403CC9                 inc     [esp+4Ch+var_34]
.text:00403CCD                 mov     edi, [esp+4Ch+arg_4]
.text:00403CD1                 cmp     [esp+4Ch+var_34], edi
.text:00403CD5                 jnb     short loc_403CE3
.text:00403CD7                 mov     ecx, [esp+4Ch+arg_0]
.text:00403CDB                 mov     eax, [esp+4Ch+var_34]
.text:00403CDF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403CE3
.text:00403CE3 loc_403CE3:                             ; CODE XREF: sub_403830+4A5↑j
.text:00403CE3                                         ; sub_403830+5C4↓j ...
.text:00403CE3                 inc     [esp+4Ch+var_34]
.text:00403CE7                 jmp     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00403CE7                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00403CEC ; ---------------------------------------------------------------------------
.text:00403CEC
.text:00403CEC loc_403CEC:                             ; CODE XREF: sub_403830+105↑j
.text:00403CEC                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00403CEC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403935 case 63
.text:00403CF1                 jz      loc_403C3B      ; jumptable 00404002 cases 91,92,94,96,124
.text:00403CF7                 cmp     [esp+4Ch+arg_10], 3
.text:00403CFC                 jnz     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00403CFC                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00403D02                 lea     edx, [ebp+2]
.text:00403D05                 cmp     edx, [esp+4Ch+arg_C]
.text:00403D09                 jnb     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00403D09                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00403D0F                 mov     esi, [esp+4Ch+Str]
.text:00403D13                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403D18                 jnz     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00403D18                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00403D1E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403D23                 movsx   eax, cl
.text:00403D26                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403D29                 cmp     eax, 1Dh
.text:00403D2C                 ja      def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00403D2C                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00403D32                 jmp     ds:jpt_403D32[eax*4] ; switch jump
.text:00403D32 ; ---------------------------------------------------------------------------
.text:00403D39                 align 4
.text:00403D3C jpt_403D32      dd offset loc_403DB4    ; DATA XREF: sub_403830+502↑r
.text:00403D3C                 dd offset def_403D32    ; jump table for switch statement
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset loc_403DB4
.text:00403D3C                 dd offset loc_403DB4
.text:00403D3C                 dd offset loc_403DB4
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset loc_403DB4
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset loc_403DB4
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset def_403D32
.text:00403D3C                 dd offset loc_403DB4
.text:00403D3C                 dd offset loc_403DB4
.text:00403D3C                 dd offset loc_403DB4
.text:00403DB4 ; ---------------------------------------------------------------------------
.text:00403DB4
.text:00403DB4 loc_403DB4:                             ; CODE XREF: sub_403830+502↑j
.text:00403DB4                                         ; DATA XREF: sub_403830:jpt_403D32↑o
.text:00403DB4                 mov     ebp, edx        ; jumptable 00403D32 cases 33,39-41,45,47,60-62
.text:00403DB6                 mov     bl, cl
.text:00403DB8                 mov     edx, [esp+4Ch+arg_4]
.text:00403DBC                 cmp     [esp+4Ch+var_34], edx
.text:00403DC0                 jnb     short loc_403DCE
.text:00403DC2                 mov     ecx, [esp+4Ch+arg_0]
.text:00403DC6                 mov     edi, [esp+4Ch+var_34]
.text:00403DCA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00403DCE
.text:00403DCE loc_403DCE:                             ; CODE XREF: sub_403830+590↑j
.text:00403DCE                 inc     [esp+4Ch+var_34]
.text:00403DD2                 mov     eax, [esp+4Ch+arg_4]
.text:00403DD6                 cmp     [esp+4Ch+var_34], eax
.text:00403DDA                 jnb     short loc_403DE8
.text:00403DDC                 mov     edx, [esp+4Ch+arg_0]
.text:00403DE0                 mov     esi, [esp+4Ch+var_34]
.text:00403DE4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403DE8
.text:00403DE8 loc_403DE8:                             ; CODE XREF: sub_403830+5AA↑j
.text:00403DE8                 inc     [esp+4Ch+var_34]
.text:00403DEC                 mov     edi, [esp+4Ch+arg_4]
.text:00403DF0                 cmp     [esp+4Ch+var_34], edi
.text:00403DF4                 jnb     loc_403CE3
.text:00403DFA                 mov     eax, [esp+4Ch+arg_0]
.text:00403DFE                 mov     ecx, [esp+4Ch+var_34]
.text:00403E02                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403E06                 jmp     loc_403CE3
.text:00403E06 ; ---------------------------------------------------------------------------
.text:00403E0B                 align 10h
.text:00403E10
.text:00403E10 def_403935:                             ; CODE XREF: sub_403830+FF↑j
.text:00403E10                                         ; sub_403830+105↑j
.text:00403E10                                         ; DATA XREF: ...
.text:00403E10                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403935 default case, cases 1-6,14-31,64
.text:00403E15                 jz      loc_403F40
.text:00403E1B                 mov     [esp+4Ch+var_28], 1
.text:00403E23                 mov     esi, ds:__mb_cur_max
.text:00403E29                 movzx   edx, bl
.text:00403E2C                 cmp     dword ptr [esi], 1
.text:00403E2F                 jz      loc_403F24
.text:00403E35                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403E3D                 mov     [esp+4Ch+C], edx ; C
.text:00403E40                 call    _isctype
.text:00403E45
.text:00403E45 loc_403E45:                             ; CODE XREF: sub_403830+705↓j
.text:00403E45                 test    eax, eax
.text:00403E47                 setnz   [esp+4Ch+var_29]
.text:00403E4C
.text:00403E4C loc_403E4C:                             ; CODE XREF: sub_403830+7A5↓j
.text:00403E4C                 cmp     [esp+4Ch+var_21], 0
.text:00403E51                 lea     eax, [ebp+1]
.text:00403E54                 jz      loc_403BF0
.text:00403E5A                 cmp     [esp+4Ch+var_29], 0
.text:00403E5F                 jnz     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00403E5F                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00403E65
.text:00403E65 loc_403E65:                             ; CODE XREF: sub_403830+7AB↓j
.text:00403E65                 mov     eax, [esp+4Ch+var_28]
.text:00403E69                 lea     edx, [eax+ebp]
.text:00403E6C                 lea     esi, [esi+0]
.text:00403E70
.text:00403E70 loc_403E70:                             ; CODE XREF: sub_403830+6EF↓j
.text:00403E70                 cmp     [esp+4Ch+var_21], 0
.text:00403E75                 jz      short loc_403EF0
.text:00403E77                 cmp     [esp+4Ch+var_29], 0
.text:00403E7C                 jnz     short loc_403EF0
.text:00403E7E                 mov     edi, [esp+4Ch+arg_4]
.text:00403E82                 cmp     [esp+4Ch+var_34], edi
.text:00403E86                 jnb     short loc_403E94
.text:00403E88                 mov     esi, [esp+4Ch+arg_0]
.text:00403E8C                 mov     eax, [esp+4Ch+var_34]
.text:00403E90                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403E94
.text:00403E94 loc_403E94:                             ; CODE XREF: sub_403830+656↑j
.text:00403E94                 inc     [esp+4Ch+var_34]
.text:00403E98                 mov     ecx, [esp+4Ch+arg_4]
.text:00403E9C                 cmp     [esp+4Ch+var_34], ecx
.text:00403EA0                 jnb     short loc_403EB5
.text:00403EA2                 mov     cl, bl
.text:00403EA4                 mov     esi, [esp+4Ch+arg_0]
.text:00403EA8                 mov     edi, [esp+4Ch+var_34]
.text:00403EAC                 shr     cl, 6
.text:00403EAF                 add     cl, 30h ; '0'
.text:00403EB2                 mov     [edi+esi], cl
.text:00403EB5
.text:00403EB5 loc_403EB5:                             ; CODE XREF: sub_403830+670↑j
.text:00403EB5                 inc     [esp+4Ch+var_34]
.text:00403EB9                 mov     edi, [esp+4Ch+arg_4]
.text:00403EBD                 cmp     [esp+4Ch+var_34], edi
.text:00403EC1                 jnb     short loc_403ED9
.text:00403EC3                 mov     cl, bl
.text:00403EC5                 mov     esi, [esp+4Ch+arg_0]
.text:00403EC9                 shr     cl, 3
.text:00403ECC                 mov     edi, [esp+4Ch+var_34]
.text:00403ED0                 and     cl, 7
.text:00403ED3                 add     cl, 30h ; '0'
.text:00403ED6                 mov     [edi+esi], cl
.text:00403ED9
.text:00403ED9 loc_403ED9:                             ; CODE XREF: sub_403830+691↑j
.text:00403ED9                 inc     [esp+4Ch+var_34]
.text:00403EDD                 and     bl, 7
.text:00403EE0                 add     bl, 30h ; '0'
.text:00403EE3                 lea     esi, [esi+0]
.text:00403EE9                 lea     edi, [edi+0]
.text:00403EF0
.text:00403EF0 loc_403EF0:                             ; CODE XREF: sub_403830+645↑j
.text:00403EF0                                         ; sub_403830+64C↑j
.text:00403EF0                 lea     eax, [ebp+1]
.text:00403EF3                 cmp     edx, eax
.text:00403EF5                 jbe     loc_403BF0
.text:00403EFB                 mov     ebp, [esp+4Ch+arg_4]
.text:00403EFF                 cmp     [esp+4Ch+var_34], ebp
.text:00403F03                 jnb     short loc_403F10
.text:00403F05                 mov     ecx, [esp+4Ch+arg_0]
.text:00403F09                 mov     edi, [esp+4Ch+var_34]
.text:00403F0D                 mov     [edi+ecx], bl
.text:00403F10
.text:00403F10 loc_403F10:                             ; CODE XREF: sub_403830+6D3↑j
.text:00403F10                 inc     [esp+4Ch+var_34]
.text:00403F14                 mov     ebp, eax
.text:00403F16                 mov     eax, [esp+4Ch+Str]
.text:00403F1A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00403F1F                 jmp     loc_403E70
.text:00403F24 ; ---------------------------------------------------------------------------
.text:00403F24
.text:00403F24 loc_403F24:                             ; CODE XREF: sub_403830+5FF↑j
.text:00403F24                 mov     ecx, ds:_pctype
.text:00403F2A                 mov     edi, [ecx]
.text:00403F2C                 movzx   eax, word ptr [edi+edx*2]
.text:00403F30                 and     eax, 157h
.text:00403F35                 jmp     loc_403E45
.text:00403F35 ; ---------------------------------------------------------------------------
.text:00403F3A                 align 10h
.text:00403F40
.text:00403F40 loc_403F40:                             ; CODE XREF: sub_403830+5E5↑j
.text:00403F40                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403F45                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00403F4D                 mov     [esp+4Ch+var_28], 0
.text:00403F55                 mov     [esp+4Ch+var_29], 1
.text:00403F5A                 jz      loc_4040EC
.text:00403F60
.text:00403F60 loc_403F60:                             ; CODE XREF: sub_403830+8CC↓j
.text:00403F60                 mov     ecx, [esp+4Ch+arg_C]
.text:00403F64                 lea     edx, [esp+4Ch+var_18]
.text:00403F68                 mov     edi, [esp+4Ch+Str]
.text:00403F6C                 mov     [esp+4Ch+State], edx ; State
.text:00403F70                 lea     esi, [esp+4Ch+var_18._State]
.text:00403F74                 sub     ecx, ebp
.text:00403F76                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00403F7A                 add     edi, ebp
.text:00403F7C                 mov     [esp+4Ch+var_30], edi
.text:00403F80                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403F84                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403F87                 call    mbrtowc
.text:00403F8C                 test    eax, eax
.text:00403F8E                 mov     edi, eax
.text:00403F90                 jz      short loc_403FD0
.text:00403F92                 cmp     eax, 0FFFFFFFFh
.text:00403F95                 jz      loc_4040E2
.text:00403F9B                 cmp     eax, 0FFFFFFFEh
.text:00403F9E                 jz      loc_4040A2
.text:00403FA4                 cmp     [esp+4Ch+arg_10], 1
.text:00403FA9                 jz      short loc_403FE0
.text:00403FAB
.text:00403FAB loc_403FAB:                             ; CODE XREF: sub_403830+7B9↓j
.text:00403FAB                                         ; sub_403830+86D↓j
.text:00403FAB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403FB0                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403FB8                 mov     [esp+4Ch+C], ecx ; C
.text:00403FBB                 call    iswctype
.text:00403FC0                 test    eax, eax
.text:00403FC2                 jnz     short loc_403FC9
.text:00403FC4                 mov     [esp+4Ch+var_29], 0
.text:00403FC9
.text:00403FC9 loc_403FC9:                             ; CODE XREF: sub_403830+792↑j
.text:00403FC9                 mov     [esp+4Ch+var_28], edi
.text:00403FCD                 lea     esi, [esi+0]
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; CODE XREF: sub_403830+760↑j
.text:00403FD0                                         ; sub_403830+87B↓j ...
.text:00403FD0                 cmp     [esp+4Ch+var_28], 1
.text:00403FD5                 jbe     loc_403E4C
.text:00403FDB                 jmp     loc_403E65
.text:00403FE0 ; ---------------------------------------------------------------------------
.text:00403FE0
.text:00403FE0 loc_403FE0:                             ; CODE XREF: sub_403830+779↑j
.text:00403FE0                 cmp     [esp+4Ch+arg_10], eax
.text:00403FE4                 mov     edx, 1
.text:00403FE9                 jnb     short loc_403FAB
.text:00403FEB
.text:00403FEB loc_403FEB:                             ; CODE XREF: sub_403830+867↓j
.text:00403FEB                 mov     ecx, [esp+4Ch+Str]
.text:00403FEF                 lea     esi, [edx+ebp]
.text:00403FF2                 movsx   eax, byte ptr [esi+ecx]
.text:00403FF6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403FF9                 cmp     eax, 21h
.text:00403FFC                 ja      def_404002      ; jumptable 00404002 default case, cases 93,95,97-123
.text:00404002                 jmp     ds:jpt_404002[eax*4] ; switch jump
.text:00404002 ; ---------------------------------------------------------------------------
.text:00404009                 align 4
.text:0040400C jpt_404002      dd offset loc_403C3B    ; DATA XREF: sub_403830+7D2↑r
.text:0040400C                 dd offset loc_403C3B    ; jump table for switch statement
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset loc_403C3B
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset loc_403C3B
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset def_404002
.text:0040400C                 dd offset loc_403C3B
.text:00404094 ; ---------------------------------------------------------------------------
.text:00404094
.text:00404094 def_404002:                             ; CODE XREF: sub_403830+7CC↑j
.text:00404094                                         ; sub_403830+7D2↑j
.text:00404094                                         ; DATA XREF: ...
.text:00404094                 inc     edx             ; jumptable 00404002 default case, cases 93,95,97-123
.text:00404095                 cmp     edx, edi
.text:00404097                 jb      loc_403FEB
.text:0040409D                 jmp     loc_403FAB
.text:004040A2 ; ---------------------------------------------------------------------------
.text:004040A2
.text:004040A2 loc_4040A2:                             ; CODE XREF: sub_403830+76E↑j
.text:004040A2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004040A6                 mov     [esp+4Ch+var_29], 0
.text:004040AB                 jnb     loc_403FD0
.text:004040B1                 mov     eax, [esp+4Ch+var_30]
.text:004040B5                 cmp     byte ptr [eax], 0
.text:004040B8                 jz      loc_403FD0
.text:004040BE
.text:004040BE loc_4040BE:                             ; CODE XREF: sub_403830+8AB↓j
.text:004040BE                 inc     [esp+4Ch+var_28]
.text:004040C2                 mov     esi, [esp+4Ch+var_28]
.text:004040C6                 lea     eax, [esi+ebp]
.text:004040C9                 cmp     eax, [esp+4Ch+arg_C]
.text:004040CD                 jnb     loc_403FD0
.text:004040D3                 mov     edi, [esp+4Ch+Str]
.text:004040D7                 cmp     byte ptr [eax+edi], 0
.text:004040DB                 jnz     short loc_4040BE
.text:004040DD                 jmp     loc_403FD0
.text:004040E2 ; ---------------------------------------------------------------------------
.text:004040E2
.text:004040E2 loc_4040E2:                             ; CODE XREF: sub_403830+765↑j
.text:004040E2                 mov     [esp+4Ch+var_29], 0
.text:004040E7                 jmp     loc_403FD0
.text:004040EC ; ---------------------------------------------------------------------------
.text:004040EC
.text:004040EC loc_4040EC:                             ; CODE XREF: sub_403830+72A↑j
.text:004040EC                 mov     edx, [esp+4Ch+Str]
.text:004040F0                 mov     [esp+4Ch+C], edx ; Str
.text:004040F3                 call    strlen
.text:004040F8                 mov     [esp+4Ch+arg_C], eax
.text:004040FC                 jmp     loc_403F60
.text:00404101 ; ---------------------------------------------------------------------------
.text:00404101
.text:00404101 loc_404101:                             ; CODE XREF: sub_403830+105↑j
.text:00404101                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00404101                 mov     dl, bl          ; jumptable 00403935 case 92
.text:00404103                 jmp     loc_403C34
.text:00404108 ; ---------------------------------------------------------------------------
.text:00404108
.text:00404108 loc_404108:                             ; CODE XREF: sub_403830+105↑j
.text:00404108                                         ; sub_403830+902↓j
.text:00404108                                         ; DATA XREF: ...
.text:00404108                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403935 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040410D                 jnz     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:0040410D                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00404113                 jmp     loc_403C3B      ; jumptable 00404002 cases 91,92,94,96,124
.text:00404118 ; ---------------------------------------------------------------------------
.text:00404118
.text:00404118 loc_404118:                             ; CODE XREF: sub_403830+105↑j
.text:00404118                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:00404118                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403935 cases 123,125
.text:0040411D                 jz      short loc_404134
.text:0040411F                 cmp     [esp+4Ch+arg_C], 1
.text:00404124
.text:00404124 loc_404124:                             ; CODE XREF: sub_403830+90C↓j
.text:00404124                 jnz     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:00404124                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:0040412A
.text:0040412A loc_40412A:                             ; CODE XREF: sub_403830+105↑j
.text:0040412A                                         ; DATA XREF: sub_403830:jpt_403935↑o
.text:0040412A                 test    ebp, ebp        ; jumptable 00403935 cases 35,126
.text:0040412C                 jnz     def_403D32      ; jumptable 00403935 cases 37,43-58,65-90,93,95,97-122
.text:0040412C                                         ; jumptable 00403D32 default case, cases 34-38,42-44,46,48-59
.text:00404132                 jmp     short loc_404108 ; jumptable 00403935 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404134 ; ---------------------------------------------------------------------------
.text:00404134
.text:00404134 loc_404134:                             ; CODE XREF: sub_403830+8ED↑j
.text:00404134                 mov     esi, [esp+4Ch+Str]
.text:00404138                 cmp     byte ptr [esi+1], 0
.text:0040413C                 jmp     short loc_404124
.text:0040413E ; ---------------------------------------------------------------------------
.text:0040413E
.text:0040413E loc_40413E:                             ; CODE XREF: sub_403830:loc_4038CF↑j
.text:0040413E                 test    ebp, ebp
.text:00404140                 jnz     short loc_40414D
.text:00404142                 cmp     [esp+4Ch+arg_10], 1
.text:00404147                 jz      loc_403C3B      ; jumptable 00404002 cases 91,92,94,96,124
.text:0040414D
.text:0040414D loc_40414D:                             ; CODE XREF: sub_403830+910↑j
.text:0040414D                 mov     esi, [esp+4Ch+var_1C]
.text:00404151                 test    esi, esi
.text:00404153                 jz      short loc_404188
.text:00404155                 mov     edi, [esp+4Ch+var_1C]
.text:00404159                 movzx   eax, byte ptr [edi]
.text:0040415C                 test    al, al
.text:0040415E                 jz      short loc_404188
.text:00404160
.text:00404160 loc_404160:                             ; CODE XREF: sub_403830+956↓j
.text:00404160                 mov     ebp, [esp+4Ch+arg_4]
.text:00404164                 cmp     [esp+4Ch+var_34], ebp
.text:00404168                 jnb     short loc_404175
.text:0040416A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040416E                 mov     ebx, [esp+4Ch+var_34]
.text:00404172                 mov     [ebx+ecx], al
.text:00404175
.text:00404175 loc_404175:                             ; CODE XREF: sub_403830+938↑j
.text:00404175                 inc     [esp+4Ch+var_1C]
.text:00404179                 inc     [esp+4Ch+var_34]
.text:0040417D                 mov     edx, [esp+4Ch+var_1C]
.text:00404181                 movzx   eax, byte ptr [edx]
.text:00404184                 test    al, al
.text:00404186                 jnz     short loc_404160
.text:00404188
.text:00404188 loc_404188:                             ; CODE XREF: sub_403830+923↑j
.text:00404188                                         ; sub_403830+92E↑j
.text:00404188                 mov     eax, [esp+4Ch+arg_4]
.text:0040418C                 cmp     [esp+4Ch+var_34], eax
.text:00404190                 jnb     short loc_40419E
.text:00404192                 mov     edi, [esp+4Ch+arg_0]
.text:00404196                 mov     esi, [esp+4Ch+var_34]
.text:0040419A                 mov     byte ptr [esi+edi], 0
.text:0040419E
.text:0040419E loc_40419E:                             ; CODE XREF: sub_403830+960↑j
.text:0040419E                 mov     eax, [esp+4Ch+var_34]
.text:004041A2                 jmp     loc_403C6F
.text:004041A7 ; ---------------------------------------------------------------------------
.text:004041A7
.text:004041A7 loc_4041A7:                             ; CODE XREF: sub_403830+95↑j
.text:004041A7                 mov     ebx, [esp+4Ch+Str]
.text:004041AB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004041B0                 jmp     loc_4038CF
.text:004041B5 ; ---------------------------------------------------------------------------
.text:004041B5
.text:004041B5 loc_4041B5:                             ; CODE XREF: sub_403830+3D↑j
.text:004041B5                                         ; DATA XREF: sub_403830:jpt_40386D↑o
.text:004041B5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040386D case 2
.text:004041B9                 cmp     [esp+4Ch+var_34], edx
.text:004041BD                 jnb     short loc_4041C6
.text:004041BF                 mov     ecx, [esp+4Ch+arg_0]
.text:004041C3                 mov     byte ptr [ecx], 27h ; '''
.text:004041C6
.text:004041C6 loc_4041C6:                             ; CODE XREF: sub_403830+98D↑j
.text:004041C6                 mov     [esp+4Ch+var_34], 1
.text:004041CE                 mov     [esp+4Ch+var_1C], 40381Eh
.text:004041D6                 jmp     loc_4038B6
.text:004041DB ; ---------------------------------------------------------------------------
.text:004041DB
.text:004041DB loc_4041DB:                             ; CODE XREF: sub_403830+3D↑j
.text:004041DB                                         ; DATA XREF: sub_403830:jpt_40386D↑o
.text:004041DB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040386D case 4
.text:004041E0                 jmp     def_40386D      ; jumptable 0040386D default case, cases 0,1
.text:004041E5 ; ---------------------------------------------------------------------------
.text:004041E5
.text:004041E5 loc_4041E5:                             ; CODE XREF: sub_403830+3D↑j
.text:004041E5                                         ; DATA XREF: sub_403830:jpt_40386D↑o
.text:004041E5                 mov     [esp+4Ch+C], 403820h ; jumptable 0040386D cases 5,6
.text:004041EC                 call    ds:libintl_gettext
.text:004041F2                 cmp     eax, 403820h
.text:004041F7                 mov     edi, eax
.text:004041F9                 jz      short loc_404270
.text:004041FB
.text:004041FB loc_4041FB:                             ; CODE XREF: sub_403830+A45↓j
.text:004041FB                                         ; sub_403830+A4C↓j
.text:004041FB                 mov     [esp+4Ch+C], 40381Eh
.text:00404202                 call    ds:libintl_gettext
.text:00404208                 cmp     eax, 40381Eh
.text:0040420D                 mov     edx, eax
.text:0040420F                 jz      short loc_404262
.text:00404211
.text:00404211 loc_404211:                             ; CODE XREF: sub_403830+A37↓j
.text:00404211                                         ; sub_403830+A3E↓j
.text:00404211                 mov     [esp+4Ch+var_1C], edi
.text:00404215                 cmp     byte ptr [edi], 0
.text:00404218                 jz      short loc_404248
.text:0040421A
.text:0040421A loc_40421A:                             ; CODE XREF: sub_403830+A16↓j
.text:0040421A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040421E                 cmp     [esp+4Ch+var_34], ecx
.text:00404222                 jnb     short loc_404237
.text:00404224                 mov     ebp, [esp+4Ch+var_1C]
.text:00404228                 mov     edi, [esp+4Ch+arg_0]
.text:0040422C                 mov     esi, [esp+4Ch+var_34]
.text:00404230                 movzx   ebx, byte ptr [ebp+0]
.text:00404234                 mov     [esi+edi], bl
.text:00404237
.text:00404237 loc_404237:                             ; CODE XREF: sub_403830+9F2↑j
.text:00404237                 inc     [esp+4Ch+var_1C]
.text:0040423B                 inc     [esp+4Ch+var_34]
.text:0040423F                 mov     eax, [esp+4Ch+var_1C]
.text:00404243                 cmp     byte ptr [eax], 0
.text:00404246                 jnz     short loc_40421A
.text:00404248
.text:00404248 loc_404248:                             ; CODE XREF: sub_403830+9E8↑j
.text:00404248                 mov     [esp+4Ch+var_21], 1
.text:0040424D                 mov     [esp+4Ch+var_1C], edx
.text:00404251                 mov     [esp+4Ch+C], edx ; Str
.text:00404254                 call    strlen
.text:00404259                 mov     [esp+4Ch+var_20], eax
.text:0040425D                 jmp     def_40386D      ; jumptable 0040386D default case, cases 0,1
.text:00404262 ; ---------------------------------------------------------------------------
.text:00404262
.text:00404262 loc_404262:                             ; CODE XREF: sub_403830+9DF↑j
.text:00404262                 cmp     [esp+4Ch+arg_10], 6
.text:00404267                 jnz     short loc_404211
.text:00404269                 mov     edx, offset asc_40381C ; "\"'`"
.text:0040426E                 jmp     short loc_404211
.text:00404270 ; ---------------------------------------------------------------------------
.text:00404270
.text:00404270 loc_404270:                             ; CODE XREF: sub_403830+9C9↑j
.text:00404270                 cmp     [esp+4Ch+arg_10], 6
.text:00404275                 jnz     short loc_4041FB
.text:00404277                 mov     edi, offset asc_40381C ; "\"'`"
.text:0040427C                 jmp     loc_4041FB
.text:0040427C sub_403830      endp
.text:0040427C
.text:00404281 ; ---------------------------------------------------------------------------
.text:00404281                 jmp     short loc_404290
.text:00404281 ; ---------------------------------------------------------------------------
.text:00404283                 align 10h
.text:00404290
.text:00404290 loc_404290:                             ; CODE XREF: .text:00404281↑j
.text:00404290                 sub     esp, 0Ch
.text:00404293                 mov     [esp+4], ebx
.text:00404297                 mov     [esp+8], esi
.text:0040429B                 call    _errno
.text:004042A0                 mov     esi, [eax]
.text:004042A2                 mov     dword ptr [esp], 24h ; '$'
.text:004042A9                 call    sub_404B80
.text:004042AE                 mov     edx, [esp+10h]
.text:004042B2                 mov     ebx, eax
.text:004042B4                 test    edx, edx
.text:004042B6                 jz      short loc_404301
.text:004042B8
.text:004042B8 loc_4042B8:                             ; CODE XREF: .text:00404306↓j
.text:004042B8                 mov     ecx, [edx]
.text:004042BA                 mov     [ebx], ecx
.text:004042BC                 mov     ecx, [edx+4]
.text:004042BF                 mov     [ebx+4], ecx
.text:004042C2                 mov     ecx, [edx+8]
.text:004042C5                 mov     [ebx+8], ecx
.text:004042C8                 mov     ecx, [edx+0Ch]
.text:004042CB                 mov     [ebx+0Ch], ecx
.text:004042CE                 mov     ecx, [edx+10h]
.text:004042D1                 mov     [ebx+10h], ecx
.text:004042D4                 mov     ecx, [edx+14h]
.text:004042D7                 mov     [ebx+14h], ecx
.text:004042DA                 mov     ecx, [edx+18h]
.text:004042DD                 mov     [ebx+18h], ecx
.text:004042E0                 mov     ecx, [edx+1Ch]
.text:004042E3                 mov     [ebx+1Ch], ecx
.text:004042E6                 mov     ecx, [edx+20h]
.text:004042E9                 mov     [ebx+20h], ecx
.text:004042EC                 call    _errno
.text:004042F1                 mov     [eax], esi
.text:004042F3                 mov     esi, [esp+8]
.text:004042F7                 mov     eax, ebx
.text:004042F9                 mov     ebx, [esp+4]
.text:004042FD                 add     esp, 0Ch
.text:00404300                 retn
.text:00404301 ; ---------------------------------------------------------------------------
.text:00404301
.text:00404301 loc_404301:                             ; CODE XREF: .text:004042B6↑j
.text:00404301                 mov     edx, offset dword_407150
.text:00404306                 jmp     short loc_4042B8
.text:00404306 ; ---------------------------------------------------------------------------
.text:00404308                 align 10h
.text:00404310                 mov     eax, [esp+4]
.text:00404314                 test    eax, eax
.text:00404316                 jz      short loc_404320
.text:00404318
.text:00404318 loc_404318:                             ; CODE XREF: .text:00404325↓j
.text:00404318                 mov     eax, [eax]
.text:0040431A                 retn
.text:0040431A ; ---------------------------------------------------------------------------
.text:0040431B                 align 10h
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: .text:00404316↑j
.text:00404320                 mov     eax, offset dword_407150
.text:00404325                 jmp     short loc_404318
.text:00404325 ; ---------------------------------------------------------------------------
.text:00404327                 align 10h
.text:00404330                 mov     edx, [esp+4]
.text:00404334                 test    edx, edx
.text:00404336                 jz      short loc_404340
.text:00404338
.text:00404338 loc_404338:                             ; CODE XREF: .text:00404345↓j
.text:00404338                 mov     ecx, [esp+8]
.text:0040433C                 mov     [edx], ecx
.text:0040433E                 retn
.text:0040433E ; ---------------------------------------------------------------------------
.text:0040433F                 align 10h
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: .text:00404336↑j
.text:00404340                 mov     edx, offset dword_407150
.text:00404345                 jmp     short loc_404338
.text:00404345 ; ---------------------------------------------------------------------------
.text:00404347                 align 10h
.text:00404350                 sub     esp, 8
.text:00404353                 mov     eax, [esp+0Ch]
.text:00404357                 movzx   ecx, byte ptr [esp+10h]
.text:0040435C                 mov     [esp], ebx
.text:0040435F                 mov     ebx, [esp+14h]
.text:00404363                 mov     [esp+4], esi
.text:00404367                 mov     dl, cl
.text:00404369                 shr     dl, 5
.text:0040436C                 movzx   edx, dl
.text:0040436F                 shl     edx, 2
.text:00404372                 test    eax, eax
.text:00404374                 lea     esi, [edx+eax+4]
.text:00404378                 jz      short loc_4043A0
.text:0040437A
.text:0040437A loc_40437A:                             ; CODE XREF: .text:004043A6↓j
.text:0040437A                 mov     edx, [esi]
.text:0040437C                 and     ecx, 1Fh
.text:0040437F                 and     ebx, 1
.text:00404382                 mov     eax, edx
.text:00404384                 shr     eax, cl
.text:00404386                 and     eax, 1
.text:00404389                 xor     ebx, eax
.text:0040438B                 shl     ebx, cl
.text:0040438D                 xor     edx, ebx
.text:0040438F                 mov     [esi], edx
.text:00404391                 mov     ebx, [esp]
.text:00404394                 mov     esi, [esp+4]
.text:00404398                 add     esp, 8
.text:0040439B                 retn
.text:0040439B ; ---------------------------------------------------------------------------
.text:0040439C                 align 10h
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: .text:00404378↑j
.text:004043A0                 lea     esi, dword_407154[edx]
.text:004043A6                 jmp     short loc_40437A
.text:004043A6 ; ---------------------------------------------------------------------------
.text:004043A8                 align 10h
.text:004043B0                 sub     esp, 2Ch
.text:004043B3                 mov     [esp+24h], ebx
.text:004043B7                 mov     ebx, [esp+40h]
.text:004043BB                 mov     [esp+28h], esi
.text:004043BF                 test    ebx, ebx
.text:004043C1                 jz      short loc_404410
.text:004043C3
.text:004043C3 loc_4043C3:                             ; CODE XREF: .text:00404415↓j
.text:004043C3                 call    _errno
.text:004043C8                 mov     esi, [eax]
.text:004043CA                 mov     [esp+14h], ebx
.text:004043CE                 mov     edx, [ebx]
.text:004043D0                 mov     ecx, [esp+38h]
.text:004043D4                 mov     ebx, [esp+3Ch]
.text:004043D8                 mov     [esp+10h], edx
.text:004043DC                 mov     edx, [esp+34h]
.text:004043E0                 mov     [esp+0Ch], ebx
.text:004043E4                 mov     [esp+8], ecx
.text:004043E8                 mov     [esp+4], edx
.text:004043EC                 mov     edx, [esp+30h]
.text:004043F0                 mov     [esp], edx
.text:004043F3                 call    sub_403830
.text:004043F8                 mov     ebx, eax
.text:004043FA                 call    _errno
.text:004043FF                 mov     [eax], esi
.text:00404401                 mov     esi, [esp+28h]
.text:00404405                 mov     eax, ebx
.text:00404407                 mov     ebx, [esp+24h]
.text:0040440B                 add     esp, 2Ch
.text:0040440E                 retn
.text:0040440E ; ---------------------------------------------------------------------------
.text:0040440F                 align 10h
.text:00404410
.text:00404410 loc_404410:                             ; CODE XREF: .text:004043C1↑j
.text:00404410                 mov     ebx, offset dword_407150
.text:00404415                 jmp     short loc_4043C3
.text:00404415 ; ---------------------------------------------------------------------------
.text:00404417                 align 10h
.text:00404420                 push    ebp
.text:00404421                 push    edi
.text:00404422                 push    esi
.text:00404423                 push    ebx
.text:00404424                 sub     esp, 2Ch
.text:00404427                 mov     ebp, [esp+48h]
.text:0040442B                 call    _errno
.text:00404430                 mov     edx, [eax]
.text:00404432                 test    ebp, ebp
.text:00404434                 mov     ebx, ebp
.text:00404436                 mov     [esp+28h], edx
.text:0040443A                 jz      loc_4044F0
.text:00404440
.text:00404440 loc_404440:                             ; CODE XREF: .text:004044F5↓j
.text:00404440                 call    _errno
.text:00404445                 mov     edi, [eax]
.text:00404447                 mov     esi, ebp
.text:00404449                 mov     [esp+14h], ebx
.text:0040444D                 mov     ecx, [ebx]
.text:0040444F                 mov     dword ptr [esp], 0
.text:00404456                 mov     edx, [esp+44h]
.text:0040445A                 mov     dword ptr [esp+4], 0
.text:00404462                 mov     eax, [esp+40h]
.text:00404466                 mov     [esp+10h], ecx
.text:0040446A                 mov     [esp+0Ch], edx
.text:0040446E                 mov     [esp+8], eax
.text:00404472                 call    sub_403830
.text:00404477                 mov     ebx, eax
.text:00404479                 call    _errno
.text:0040447E                 mov     [eax], edi
.text:00404480                 lea     edi, [ebx+1]
.text:00404483                 mov     [esp], edi
.text:00404486                 call    sub_404B80
.text:0040448B                 mov     [esp+24h], eax
.text:0040448F                 test    ebp, ebp
.text:00404491                 jz      short loc_4044E2
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: .text:004044E7↓j
.text:00404493                 call    _errno
.text:00404498                 mov     ebp, [eax]
.text:0040449A                 mov     [esp+14h], esi
.text:0040449E                 mov     ecx, [esi]
.text:004044A0                 mov     [esp+4], edi
.text:004044A4                 mov     edx, [esp+44h]
.text:004044A8                 mov     esi, [esp+24h]
.text:004044AC                 mov     [esp+10h], ecx
.text:004044B0                 mov     eax, [esp+40h]
.text:004044B4                 mov     [esp+0Ch], edx
.text:004044B8                 mov     [esp], esi
.text:004044BB                 mov     [esp+8], eax
.text:004044BF                 call    sub_403830
.text:004044C4                 call    _errno
.text:004044C9                 mov     [eax], ebp
.text:004044CB                 call    _errno
.text:004044D0                 mov     ebx, [esp+28h]
.text:004044D4                 mov     [eax], ebx
.text:004044D6                 mov     eax, [esp+24h]
.text:004044DA                 add     esp, 2Ch
.text:004044DD                 pop     ebx
.text:004044DE                 pop     esi
.text:004044DF                 pop     edi
.text:004044E0                 pop     ebp
.text:004044E1                 retn
.text:004044E2 ; ---------------------------------------------------------------------------
.text:004044E2
.text:004044E2 loc_4044E2:                             ; CODE XREF: .text:00404491↑j
.text:004044E2                 mov     esi, offset dword_407150
.text:004044E7                 jmp     short loc_404493
.text:004044E7 ; ---------------------------------------------------------------------------
.text:004044E9                 align 10h
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: .text:0040443A↑j
.text:004044F0                 mov     ebx, offset dword_407150
.text:004044F5                 jmp     loc_404440
.text:004044F5 ; ---------------------------------------------------------------------------
.text:004044FA                 align 10h
.text:00404500                 sub     esp, 1Ch
.text:00404503                 mov     edx, [esp+24h]
.text:00404507                 mov     dword ptr [esp+0Ch], offset dword_407150
.text:0040450F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404517                 mov     [esp+4], edx
.text:0040451B                 mov     edx, [esp+20h]
.text:0040451F                 mov     [esp], edx
.text:00404522                 call    sub_404970
.text:00404527                 add     esp, 1Ch
.text:0040452A                 retn
.text:0040452A ; ---------------------------------------------------------------------------
.text:0040452B                 align 10h
.text:00404530                 sub     esp, 1Ch
.text:00404533                 mov     edx, [esp+20h]
.text:00404537                 mov     dword ptr [esp+0Ch], offset dword_407150
.text:0040453F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404547                 mov     [esp+4], edx
.text:0040454B                 mov     dword ptr [esp], 0
.text:00404552                 call    sub_404970
.text:00404557                 add     esp, 1Ch
.text:0040455A                 retn
.text:0040455A ; ---------------------------------------------------------------------------
.text:0040455B                 align 10h
.text:00404560                 push    ebp
.text:00404561                 xor     eax, eax
.text:00404563                 mov     ecx, 8
.text:00404568                 push    edi
.text:00404569                 push    esi
.text:0040456A                 push    ebx
.text:0040456B                 sub     esp, 0ACh
.text:00404571                 mov     ebp, [esp+0C4h]
.text:00404578                 cld
.text:00404579                 lea     edi, [esp+14h]
.text:0040457D                 mov     [esp+10h], ebp
.text:00404581                 rep stosd
.text:00404583                 mov     eax, [esp+30h]
.text:00404587                 mov     edi, [esp+10h]
.text:0040458B                 mov     esi, [esp+14h]
.text:0040458F                 mov     [esp+60h], eax
.text:00404593                 mov     ebp, [esp+18h]
.text:00404597                 mov     eax, [esp+10h]
.text:0040459B                 mov     [esp+40h], edi
.text:0040459F                 mov     ecx, [esp+28h]
.text:004045A3                 mov     edi, [esp+1Ch]
.text:004045A7                 mov     [esp+44h], esi
.text:004045AB                 mov     edx, [esp+2Ch]
.text:004045AF                 mov     esi, [esp+20h]
.text:004045B3                 mov     [esp+70h], eax
.text:004045B7                 mov     ebx, [esp+24h]
.text:004045BB                 mov     eax, [esp+14h]
.text:004045BF                 mov     [esp+48h], ebp
.text:004045C3                 mov     [esp+4Ch], edi
.text:004045C7                 mov     [esp+50h], esi
.text:004045CB                 mov     [esp+54h], ebx
.text:004045CF                 mov     [esp+58h], ecx
.text:004045D3                 mov     [esp+5Ch], edx
.text:004045D7                 mov     [esp+74h], eax
.text:004045DB                 mov     [esp+78h], ebp
.text:004045DF                 mov     [esp+7Ch], edi
.text:004045E3                 mov     [esp+80h], esi
.text:004045EA                 mov     [esp+84h], ebx
.text:004045F1                 mov     ebx, [esp+30h]
.text:004045F5                 mov     [esp+8Ch], edx
.text:004045FC                 mov     edx, [esp+0C8h]
.text:00404603                 mov     [esp+88h], ecx
.text:0040460A                 lea     ecx, [esp+70h]
.text:0040460E                 mov     [esp+4], edx
.text:00404612                 mov     edx, [esp+0C0h]
.text:00404619                 mov     [esp+90h], ebx
.text:00404620                 mov     [esp+0Ch], ecx
.text:00404624                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040462C                 mov     [esp], edx
.text:0040462F                 call    sub_404970
.text:00404634                 add     esp, 0ACh
.text:0040463A                 pop     ebx
.text:0040463B                 pop     esi
.text:0040463C                 pop     edi
.text:0040463D                 pop     ebp
.text:0040463E                 retn
.text:0040463E ; ---------------------------------------------------------------------------
.text:0040463F                 align 10h
.text:00404640                 push    ebp
.text:00404641                 xor     eax, eax
.text:00404643                 mov     ecx, 8
.text:00404648                 push    edi
.text:00404649                 push    esi
.text:0040464A                 push    ebx
.text:0040464B                 sub     esp, 0ACh
.text:00404651                 mov     edx, [esp+0C4h]
.text:00404658                 cld
.text:00404659                 lea     edi, [esp+14h]
.text:0040465D                 mov     [esp+10h], edx
.text:00404661                 rep stosd
.text:00404663                 mov     eax, [esp+30h]
.text:00404667                 mov     ebp, [esp+10h]
.text:0040466B                 mov     edi, [esp+14h]
.text:0040466F                 mov     [esp+60h], eax
.text:00404673                 mov     esi, [esp+20h]
.text:00404677                 mov     eax, [esp+10h]
.text:0040467B                 mov     [esp+40h], ebp
.text:0040467F                 mov     ecx, [esp+28h]
.text:00404683                 mov     ebp, [esp+18h]
.text:00404687                 mov     [esp+44h], edi
.text:0040468B                 mov     edx, [esp+2Ch]
.text:0040468F                 mov     edi, [esp+1Ch]
.text:00404693                 mov     [esp+70h], eax
.text:00404697                 mov     ebx, [esp+24h]
.text:0040469B                 mov     eax, [esp+14h]
.text:0040469F                 mov     [esp+48h], ebp
.text:004046A3                 mov     [esp+4Ch], edi
.text:004046A7                 mov     [esp+50h], esi
.text:004046AB                 mov     [esp+54h], ebx
.text:004046AF                 mov     [esp+58h], ecx
.text:004046B3                 mov     [esp+5Ch], edx
.text:004046B7                 mov     [esp+74h], eax
.text:004046BB                 mov     [esp+78h], ebp
.text:004046BF                 mov     [esp+7Ch], edi
.text:004046C3                 mov     [esp+80h], esi
.text:004046CA                 mov     [esp+84h], ebx
.text:004046D1                 mov     esi, [esp+30h]
.text:004046D5                 lea     ebx, [esp+70h]
.text:004046D9                 mov     [esp+8Ch], edx
.text:004046E0                 mov     edx, [esp+0C8h]
.text:004046E7                 mov     [esp+88h], ecx
.text:004046EE                 mov     ecx, [esp+0CCh]
.text:004046F5                 mov     [esp+4], edx
.text:004046F9                 mov     edx, [esp+0C0h]
.text:00404700                 mov     [esp+90h], esi
.text:00404707                 mov     [esp+0Ch], ebx
.text:0040470B                 mov     [esp+8], ecx
.text:0040470F                 mov     [esp], edx
.text:00404712                 call    sub_404970
.text:00404717                 add     esp, 0ACh
.text:0040471D                 pop     ebx
.text:0040471E                 pop     esi
.text:0040471F                 pop     edi
.text:00404720                 pop     ebp
.text:00404721                 retn
.text:00404721 ; ---------------------------------------------------------------------------
.text:00404722                 align 10h
.text:00404730                 push    ebp
.text:00404731                 xor     eax, eax
.text:00404733                 mov     ecx, 8
.text:00404738                 push    edi
.text:00404739                 push    esi
.text:0040473A                 push    ebx
.text:0040473B                 sub     esp, 0ACh
.text:00404741                 mov     edi, [esp+0C0h]
.text:00404748                 cld
.text:00404749                 mov     [esp+10h], edi
.text:0040474D                 lea     edi, [esp+14h]
.text:00404751                 rep stosd
.text:00404753                 mov     eax, [esp+30h]
.text:00404757                 mov     esi, [esp+10h]
.text:0040475B                 mov     ebx, [esp+14h]
.text:0040475F                 mov     [esp+60h], eax
.text:00404763                 mov     ebp, [esp+18h]
.text:00404767                 mov     eax, [esp+10h]
.text:0040476B                 mov     [esp+40h], esi
.text:0040476F                 mov     edi, [esp+1Ch]
.text:00404773                 mov     esi, [esp+20h]
.text:00404777                 mov     [esp+44h], ebx
.text:0040477B                 mov     ecx, [esp+28h]
.text:0040477F                 mov     edx, [esp+2Ch]
.text:00404783                 mov     [esp+70h], eax
.text:00404787                 mov     ebx, [esp+24h]
.text:0040478B                 mov     eax, [esp+14h]
.text:0040478F                 mov     [esp+48h], ebp
.text:00404793                 mov     [esp+4Ch], edi
.text:00404797                 mov     [esp+50h], esi
.text:0040479B                 mov     [esp+54h], ebx
.text:0040479F                 mov     [esp+58h], ecx
.text:004047A3                 mov     [esp+5Ch], edx
.text:004047A7                 mov     [esp+74h], eax
.text:004047AB                 mov     [esp+78h], ebp
.text:004047AF                 mov     [esp+7Ch], edi
.text:004047B3                 mov     [esp+80h], esi
.text:004047BA                 mov     [esp+84h], ebx
.text:004047C1                 mov     [esp+8Ch], edx
.text:004047C8                 lea     edx, [esp+70h]
.text:004047CC                 mov     [esp+88h], ecx
.text:004047D3                 mov     ecx, [esp+30h]
.text:004047D7                 mov     [esp+0Ch], edx
.text:004047DB                 mov     edx, [esp+0C4h]
.text:004047E2                 mov     [esp+90h], ecx
.text:004047E9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004047F1                 mov     [esp+4], edx
.text:004047F5                 mov     dword ptr [esp], 0
.text:004047FC                 call    sub_404970
.text:00404801                 add     esp, 0ACh
.text:00404807                 pop     ebx
.text:00404808                 pop     esi
.text:00404809                 pop     edi
.text:0040480A                 pop     ebp
.text:0040480B                 retn
.text:0040480B ; ---------------------------------------------------------------------------
.text:0040480C                 align 10h
.text:00404810                 push    edi
.text:00404811                 push    esi
.text:00404812                 push    ebx
.text:00404813                 sub     esp, 40h
.text:00404816                 mov     edx, ds:dword_40715C
.text:0040481C                 mov     ebx, ds:dword_407150
.text:00404822                 mov     esi, ds:dword_407158
.text:00404828                 mov     edi, ds:dword_407154
.text:0040482E                 mov     [esp+1Ch], edx
.text:00404832                 mov     ecx, ds:dword_407160
.text:00404838                 mov     edx, ds:dword_407170
.text:0040483E                 mov     [esp+10h], ebx
.text:00404842                 mov     ebx, ds:dword_407164
.text:00404848                 mov     [esp+30h], edx
.text:0040484C                 movzx   edx, byte ptr [esp+54h]
.text:00404851                 mov     [esp+18h], esi
.text:00404855                 mov     esi, ds:dword_40716C
.text:0040485B                 mov     [esp+14h], edi
.text:0040485F                 mov     edi, ds:dword_407168
.text:00404865                 mov     [esp+20h], ecx
.text:00404869                 mov     cl, dl
.text:0040486B                 shr     cl, 5
.text:0040486E                 mov     [esp+24h], ebx
.text:00404872                 movzx   ebx, cl
.text:00404875                 mov     [esp+2Ch], esi
.text:00404879                 lea     esi, [esp+10h]
.text:0040487D                 mov     [esp+28h], edi
.text:00404881                 lea     edi, [esi+ebx*4]
.text:00404884                 mov     ebx, edx
.text:00404886                 mov     edx, [edi+4]
.text:00404889                 and     ebx, 1Fh
.text:0040488C                 mov     cl, bl
.text:0040488E                 mov     eax, edx
.text:00404890                 shr     eax, cl
.text:00404892                 and     eax, 1
.text:00404895                 xor     eax, 1
.text:00404898                 shl     eax, cl
.text:0040489A                 xor     edx, eax
.text:0040489C                 mov     [edi+4], edx
.text:0040489F                 mov     edx, [esp+50h]
.text:004048A3                 mov     [esp+0Ch], esi
.text:004048A7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004048AF                 mov     [esp+4], edx
.text:004048B3                 mov     dword ptr [esp], 0
.text:004048BA                 call    sub_404970
.text:004048BF                 add     esp, 40h
.text:004048C2                 pop     ebx
.text:004048C3                 pop     esi
.text:004048C4                 pop     edi
.text:004048C5                 retn
.text:004048C5 ; ---------------------------------------------------------------------------
.text:004048C6                 align 10h
.text:004048D0
.text:004048D0 ; =============== S U B R O U T I N E =======================================
.text:004048D0
.text:004048D0
.text:004048D0 ; int __cdecl sub_4048D0(char *)
.text:004048D0 sub_4048D0      proc near               ; CODE XREF: sub_403150+64↑p
.text:004048D0
.text:004048D0 var_4C          = dword ptr -4Ch
.text:004048D0 var_48          = dword ptr -48h
.text:004048D0 var_44          = dword ptr -44h
.text:004048D0 var_40          = dword ptr -40h
.text:004048D0 var_3C          = dword ptr -3Ch
.text:004048D0 var_38          = dword ptr -38h
.text:004048D0 var_34          = dword ptr -34h
.text:004048D0 var_30          = dword ptr -30h
.text:004048D0 var_2C          = dword ptr -2Ch
.text:004048D0 var_28          = dword ptr -28h
.text:004048D0 var_24          = dword ptr -24h
.text:004048D0 var_20          = dword ptr -20h
.text:004048D0 var_1C          = dword ptr -1Ch
.text:004048D0 arg_0           = dword ptr  4
.text:004048D0
.text:004048D0                 sub     esp, 4Ch
.text:004048D3                 mov     ecx, ds:dword_407150
.text:004048D9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004048E1                 mov     edx, ds:dword_407154
.text:004048E7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004048EE                 mov     [esp+4Ch+var_3C], ecx
.text:004048F2                 mov     ecx, ds:dword_40715C
.text:004048F8                 mov     [esp+4Ch+var_38], edx
.text:004048FC                 mov     edx, ds:dword_407158
.text:00404902                 mov     [esp+4Ch+var_30], ecx
.text:00404906                 mov     ecx, ds:dword_407160
.text:0040490C                 mov     eax, edx
.text:0040490E                 shr     eax, 1Ah
.text:00404911                 and     eax, 1
.text:00404914                 xor     eax, 1
.text:00404917                 mov     [esp+4Ch+var_2C], ecx
.text:0040491B                 shl     eax, 1Ah
.text:0040491E                 mov     ecx, ds:dword_407164
.text:00404924                 xor     edx, eax
.text:00404926                 mov     [esp+4Ch+var_34], edx
.text:0040492A                 mov     edx, [esp+4Ch+arg_0]
.text:0040492E                 mov     [esp+4Ch+var_28], ecx
.text:00404932                 mov     ecx, ds:dword_407168
.text:00404938                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040493C                 mov     [esp+4Ch+var_24], ecx
.text:00404940                 mov     ecx, ds:dword_40716C
.text:00404946                 mov     [esp+4Ch+var_20], ecx
.text:0040494A                 mov     ecx, ds:dword_407170
.text:00404950                 mov     [esp+4Ch+var_1C], ecx
.text:00404954                 lea     ecx, [esp+4Ch+var_3C]
.text:00404958                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040495C                 call    sub_404970
.text:00404961                 add     esp, 4Ch
.text:00404964                 retn
.text:00404964 sub_4048D0      endp
.text:00404964
.text:00404964 ; ---------------------------------------------------------------------------
.text:00404965                 align 10h
.text:00404970
.text:00404970 ; =============== S U B R O U T I N E =======================================
.text:00404970
.text:00404970
.text:00404970 ; int __cdecl sub_404970(int, char *, int, int)
.text:00404970 sub_404970      proc near               ; CODE XREF: .text:00404522↑p
.text:00404970                                         ; .text:00404552↑p ...
.text:00404970
.text:00404970 Block           = dword ptr -2Ch
.text:00404970 var_28          = dword ptr -28h
.text:00404970 Str             = dword ptr -24h
.text:00404970 var_20          = dword ptr -20h
.text:00404970 var_1C          = dword ptr -1Ch
.text:00404970 var_18          = dword ptr -18h
.text:00404970 var_14          = dword ptr -14h
.text:00404970 arg_0           = dword ptr  4
.text:00404970 arg_4           = dword ptr  8
.text:00404970 arg_8           = dword ptr  0Ch
.text:00404970 arg_C           = dword ptr  10h
.text:00404970
.text:00404970                 push    ebp
.text:00404971                 push    edi
.text:00404972                 push    esi
.text:00404973                 push    ebx
.text:00404974                 sub     esp, 1Ch
.text:00404977                 call    _errno
.text:0040497C                 mov     edx, [eax]
.text:0040497E                 mov     eax, [esp+2Ch+arg_0]
.text:00404982                 mov     [esp+2Ch+var_14], edx
.text:00404986                 test    eax, eax
.text:00404988                 js      loc_404B2A
.text:0040498E                 mov     eax, [esp+2Ch+arg_0]
.text:00404992                 cmp     dword_406040, eax
.text:00404998                 ja      short loc_404A10
.text:0040499A                 mov     esi, eax
.text:0040499C                 inc     esi
.text:0040499D                 cmp     esi, 1FFFFFFFh
.text:004049A3                 ja      loc_404B2F
.text:004049A9                 mov     ebx, off_40604C
.text:004049AF                 cmp     ebx, offset dword_406044
.text:004049B5                 jz      loc_404B01
.text:004049BB
.text:004049BB loc_4049BB:                             ; CODE XREF: sub_404970+1B5↓j
.text:004049BB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004049BE                 lea     ecx, ds:0[esi*8]
.text:004049C5                 mov     ebp, esi
.text:004049C7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004049CB                 call    sub_404C10
.text:004049D0                 mov     off_40604C, eax
.text:004049D5                 mov     ebx, dword_406040
.text:004049DB                 sub     ebp, ebx
.text:004049DD                 lea     edi, [eax+ebx*8]
.text:004049E0                 lea     eax, ds:0[ebp*8]
.text:004049E7                 cmp     eax, 7
.text:004049EA                 jbe     short loc_404A00
.text:004049EC                 test    edi, 4
.text:004049F2                 jz      short loc_404A00
.text:004049F4                 mov     dword ptr [edi], 0
.text:004049FA                 sub     eax, 4
.text:004049FD                 add     edi, 4
.text:00404A00
.text:00404A00 loc_404A00:                             ; CODE XREF: sub_404970+7A↑j
.text:00404A00                                         ; sub_404970+82↑j
.text:00404A00                 cld
.text:00404A01                 mov     ecx, eax
.text:00404A03                 shr     ecx, 2
.text:00404A06                 xor     eax, eax
.text:00404A08                 rep stosd
.text:00404A0A                 mov     dword_406040, esi
.text:00404A10
.text:00404A10 loc_404A10:                             ; CODE XREF: sub_404970+28↑j
.text:00404A10                 mov     esi, off_40604C
.text:00404A16                 mov     eax, [esp+2Ch+arg_0]
.text:00404A1A                 mov     ebp, [esi+eax*8]
.text:00404A1D                 mov     edi, [esi+eax*8+4]
.text:00404A21                 mov     esi, [esp+2Ch+arg_C]
.text:00404A25                 test    esi, esi
.text:00404A27                 jz      loc_404AF7
.text:00404A2D
.text:00404A2D loc_404A2D:                             ; CODE XREF: sub_404970+18C↓j
.text:00404A2D                 call    _errno
.text:00404A32                 mov     ebx, [eax]
.text:00404A34                 mov     [esp+2Ch+var_18], esi ; int
.text:00404A38                 mov     ecx, [esi]
.text:00404A3A                 mov     [esp+2Ch+Block], edi ; int
.text:00404A3D                 mov     edx, [esp+2Ch+arg_8]
.text:00404A41                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404A45                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404A49                 mov     ecx, [esp+2Ch+arg_4]
.text:00404A4D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404A51                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404A55                 call    sub_403830
.text:00404A5A                 mov     esi, eax
.text:00404A5C                 call    _errno
.text:00404A61                 mov     [eax], ebx
.text:00404A63                 cmp     ebp, esi
.text:00404A65                 ja      short loc_404ADB
.text:00404A67                 lea     ebp, [esi+1]
.text:00404A6A                 mov     ebx, off_40604C
.text:00404A70                 cmp     edi, offset unk_407050
.text:00404A76                 mov     esi, [esp+2Ch+arg_0]
.text:00404A7A                 mov     [ebx+esi*8], ebp
.text:00404A7D                 jz      short loc_404A8D
.text:00404A7F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404A82                 call    free
.text:00404A87                 mov     ebx, off_40604C
.text:00404A8D
.text:00404A8D loc_404A8D:                             ; CODE XREF: sub_404970+10D↑j
.text:00404A8D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404A90                 call    sub_404B80
.text:00404A95                 mov     esi, [esp+2Ch+arg_C]
.text:00404A99                 mov     edi, eax
.text:00404A9B                 mov     eax, [esp+2Ch+arg_0]
.text:00404A9F                 test    esi, esi
.text:00404AA1                 mov     [ebx+eax*8+4], edi
.text:00404AA5                 jz      short loc_404AF0
.text:00404AA7
.text:00404AA7 loc_404AA7:                             ; CODE XREF: sub_404970+185↓j
.text:00404AA7                 call    _errno
.text:00404AAC                 mov     ebx, [eax]
.text:00404AAE                 mov     [esp+2Ch+var_18], esi ; int
.text:00404AB2                 mov     ecx, [esi]
.text:00404AB4                 mov     [esp+2Ch+Block], edi ; int
.text:00404AB7                 mov     edx, [esp+2Ch+arg_8]
.text:00404ABB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404ABF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404AC3                 mov     ecx, [esp+2Ch+arg_4]
.text:00404AC7                 mov     [esp+2Ch+var_20], edx ; int
.text:00404ACB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404ACF                 call    sub_403830
.text:00404AD4                 call    _errno
.text:00404AD9                 mov     [eax], ebx
.text:00404ADB
.text:00404ADB loc_404ADB:                             ; CODE XREF: sub_404970+F5↑j
.text:00404ADB                 call    _errno
.text:00404AE0                 mov     ebp, [esp+2Ch+var_14]
.text:00404AE4                 mov     [eax], ebp
.text:00404AE6                 add     esp, 1Ch
.text:00404AE9                 mov     eax, edi
.text:00404AEB                 pop     ebx
.text:00404AEC                 pop     esi
.text:00404AED                 pop     edi
.text:00404AEE                 pop     ebp
.text:00404AEF                 retn
.text:00404AF0 ; ---------------------------------------------------------------------------
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: sub_404970+135↑j
.text:00404AF0                 mov     esi, offset dword_407150
.text:00404AF5                 jmp     short loc_404AA7
.text:00404AF7 ; ---------------------------------------------------------------------------
.text:00404AF7
.text:00404AF7 loc_404AF7:                             ; CODE XREF: sub_404970+B7↑j
.text:00404AF7                 mov     esi, offset dword_407150
.text:00404AFC                 jmp     loc_404A2D
.text:00404B01 ; ---------------------------------------------------------------------------
.text:00404B01
.text:00404B01 loc_404B01:                             ; CODE XREF: sub_404970+45↑j
.text:00404B01                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404B08                 call    sub_404B80
.text:00404B0D                 mov     off_40604C, eax
.text:00404B12                 mov     edi, dword_406044
.text:00404B18                 mov     ebx, eax
.text:00404B1A                 mov     ecx, off_406048
.text:00404B20                 mov     [eax], edi
.text:00404B22                 mov     [eax+4], ecx
.text:00404B25                 jmp     loc_4049BB
.text:00404B2A ; ---------------------------------------------------------------------------
.text:00404B2A
.text:00404B2A loc_404B2A:                             ; CODE XREF: sub_404970+18↑j
.text:00404B2A                 call    abort
.text:00404B2F ; ---------------------------------------------------------------------------
.text:00404B2F
.text:00404B2F loc_404B2F:                             ; CODE XREF: sub_404970+33↑j
.text:00404B2F                 call    sub_404E30
.text:00404B2F sub_404970      endp
.text:00404B2F
.text:00404B2F ; ---------------------------------------------------------------------------
.text:00404B34                 align 10h
.text:00404B40
.text:00404B40 ; =============== S U B R O U T I N E =======================================
.text:00404B40
.text:00404B40
.text:00404B40 sub_404B40      proc near
.text:00404B40
.text:00404B40 Size            = dword ptr -0Ch
.text:00404B40 var_4           = dword ptr -4
.text:00404B40 arg_0           = dword ptr  4
.text:00404B40 arg_4           = dword ptr  8
.text:00404B40
.text:00404B40                 sub     esp, 0Ch
.text:00404B43                 xor     edx, edx
.text:00404B45                 mov     ecx, [esp+0Ch+arg_4]
.text:00404B49                 mov     [esp+0Ch+var_4], ebx
.text:00404B4D                 mov     eax, 0FFFFFFFFh
.text:00404B52                 mov     ebx, [esp+0Ch+arg_0]
.text:00404B56                 div     ecx
.text:00404B58                 cmp     eax, ebx
.text:00404B5A                 jb      short loc_404B79
.text:00404B5C                 mov     edx, ebx
.text:00404B5E                 imul    edx, ecx
.text:00404B61                 mov     [esp+0Ch+Size], edx ; Size
.text:00404B64                 call    malloc
.text:00404B69                 test    eax, eax
.text:00404B6B                 jz      short loc_404B75
.text:00404B6D
.text:00404B6D loc_404B6D:                             ; CODE XREF: sub_404B40+37↓j
.text:00404B6D                 mov     ebx, [esp+0Ch+var_4]
.text:00404B71                 add     esp, 0Ch
.text:00404B74                 retn
.text:00404B75 ; ---------------------------------------------------------------------------
.text:00404B75
.text:00404B75 loc_404B75:                             ; CODE XREF: sub_404B40+2B↑j
.text:00404B75                 test    ebx, ebx
.text:00404B77                 jz      short loc_404B6D
.text:00404B79
.text:00404B79 loc_404B79:                             ; CODE XREF: sub_404B40+1A↑j
.text:00404B79                 call    sub_404E30
.text:00404B79 sub_404B40      endp
.text:00404B79
.text:00404B79 ; ---------------------------------------------------------------------------
.text:00404B7E                 align 10h
.text:00404B80
.text:00404B80 ; =============== S U B R O U T I N E =======================================
.text:00404B80
.text:00404B80
.text:00404B80 ; int __cdecl sub_404B80(size_t)
.text:00404B80 sub_404B80      proc near               ; CODE XREF: .text:004042A9↑p
.text:00404B80                                         ; .text:00404486↑p ...
.text:00404B80
.text:00404B80 Size            = dword ptr -0Ch
.text:00404B80 var_4           = dword ptr -4
.text:00404B80 arg_0           = dword ptr  4
.text:00404B80
.text:00404B80                 sub     esp, 0Ch
.text:00404B83                 mov     [esp+0Ch+var_4], ebx
.text:00404B87                 mov     ebx, [esp+0Ch+arg_0]
.text:00404B8B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404B8E                 call    malloc
.text:00404B93                 test    eax, eax
.text:00404B95                 jz      short loc_404BA0
.text:00404B97
.text:00404B97 loc_404B97:                             ; CODE XREF: sub_404B80+22↓j
.text:00404B97                 mov     ebx, [esp+0Ch+var_4]
.text:00404B9B                 add     esp, 0Ch
.text:00404B9E                 retn
.text:00404B9E ; ---------------------------------------------------------------------------
.text:00404B9F                 align 10h
.text:00404BA0
.text:00404BA0 loc_404BA0:                             ; CODE XREF: sub_404B80+15↑j
.text:00404BA0                 test    ebx, ebx
.text:00404BA2                 jz      short loc_404B97
.text:00404BA4                 call    sub_404E30
.text:00404BA4 sub_404B80      endp
.text:00404BA4
.text:00404BA4 ; ---------------------------------------------------------------------------
.text:00404BA9                 align 10h
.text:00404BB0                 sub     esp, 1Ch
.text:00404BB3                 xor     edx, edx
.text:00404BB5                 mov     eax, 0FFFFFFFFh
.text:00404BBA                 mov     [esp+14h], ebx
.text:00404BBE                 mov     ecx, [esp+20h]
.text:00404BC2                 mov     ebx, [esp+28h]
.text:00404BC6                 mov     [esp+18h], esi
.text:00404BCA                 mov     esi, [esp+24h]
.text:00404BCE                 div     ebx
.text:00404BD0                 cmp     eax, esi
.text:00404BD2                 jb      short loc_404C04
.text:00404BD4                 mov     [esp], ecx
.text:00404BD7                 mov     edx, esi
.text:00404BD9                 imul    edx, ebx
.text:00404BDC                 mov     [esp+4], edx
.text:00404BE0                 call    realloc
.text:00404BE5                 test    eax, eax
.text:00404BE7                 mov     ecx, eax
.text:00404BE9                 jz      short loc_404C00
.text:00404BEB
.text:00404BEB loc_404BEB:                             ; CODE XREF: .text:00404C02↓j
.text:00404BEB                 mov     ebx, [esp+14h]
.text:00404BEF                 mov     eax, ecx
.text:00404BF1                 mov     esi, [esp+18h]
.text:00404BF5                 add     esp, 1Ch
.text:00404BF8                 retn
.text:00404BF8 ; ---------------------------------------------------------------------------
.text:00404BF9                 align 10h
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: .text:00404BE9↑j
.text:00404C00                 test    esi, esi
.text:00404C02                 jz      short loc_404BEB
.text:00404C04
.text:00404C04 loc_404C04:                             ; CODE XREF: .text:00404BD2↑j
.text:00404C04                 call    sub_404E30
.text:00404C04 ; ---------------------------------------------------------------------------
.text:00404C09                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10
.text:00404C10 ; int __cdecl sub_404C10(void *, size_t)
.text:00404C10 sub_404C10      proc near               ; CODE XREF: sub_404970+5B↑p
.text:00404C10
.text:00404C10 Block           = dword ptr -0Ch
.text:00404C10 Size            = dword ptr -8
.text:00404C10 var_4           = dword ptr -4
.text:00404C10 arg_0           = dword ptr  4
.text:00404C10 arg_4           = dword ptr  8
.text:00404C10
.text:00404C10                 sub     esp, 0Ch
.text:00404C13                 mov     edx, [esp+0Ch+arg_0]
.text:00404C17                 mov     [esp+0Ch+var_4], ebx
.text:00404C1B                 mov     ebx, [esp+0Ch+arg_4]
.text:00404C1F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404C22                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404C26                 call    realloc
.text:00404C2B                 test    eax, eax
.text:00404C2D                 jz      short loc_404C37
.text:00404C2F
.text:00404C2F loc_404C2F:                             ; CODE XREF: sub_404C10+29↓j
.text:00404C2F                 mov     ebx, [esp+0Ch+var_4]
.text:00404C33                 add     esp, 0Ch
.text:00404C36                 retn
.text:00404C37 ; ---------------------------------------------------------------------------
.text:00404C37
.text:00404C37 loc_404C37:                             ; CODE XREF: sub_404C10+1D↑j
.text:00404C37                 test    ebx, ebx
.text:00404C39                 jz      short loc_404C2F
.text:00404C3B                 call    sub_404E30
.text:00404C3B sub_404C10      endp
.text:00404C3B
.text:00404C40 ; ---------------------------------------------------------------------------
.text:00404C40                 jmp     sub_404D90
.text:00404C40 ; ---------------------------------------------------------------------------
.text:00404C45                 align 10h
.text:00404C50                 sub     esp, 0Ch
.text:00404C53                 mov     edx, [esp+14h]
.text:00404C57                 mov     dword ptr [esp+8], 1
.text:00404C5F                 mov     [esp+4], edx
.text:00404C63                 mov     edx, [esp+10h]
.text:00404C67                 mov     [esp], edx
.text:00404C6A                 call    sub_404D90
.text:00404C6F                 add     esp, 0Ch
.text:00404C72                 retn
.text:00404C72 ; ---------------------------------------------------------------------------
.text:00404C73                 align 10h
.text:00404C80                 sub     esp, 1Ch
.text:00404C83                 mov     [esp+18h], ebx
.text:00404C87                 mov     ebx, [esp+20h]
.text:00404C8B                 mov     [esp], ebx
.text:00404C8E                 call    malloc
.text:00404C93                 test    eax, eax
.text:00404C95                 jz      short loc_404CB3
.text:00404C97
.text:00404C97 loc_404C97:                             ; CODE XREF: .text:00404CB5↓j
.text:00404C97                 mov     [esp+8], ebx
.text:00404C9B                 mov     dword ptr [esp+4], 0
.text:00404CA3                 mov     [esp], eax
.text:00404CA6                 call    memset
.text:00404CAB                 mov     ebx, [esp+18h]
.text:00404CAF                 add     esp, 1Ch
.text:00404CB2                 retn
.text:00404CB3 ; ---------------------------------------------------------------------------
.text:00404CB3
.text:00404CB3 loc_404CB3:                             ; CODE XREF: .text:00404C95↑j
.text:00404CB3                 test    ebx, ebx
.text:00404CB5                 jz      short loc_404C97
.text:00404CB7                 call    sub_404E30
.text:00404CB7 ; ---------------------------------------------------------------------------
.text:00404CBC                 align 10h
.text:00404CC0                 sub     esp, 0Ch
.text:00404CC3                 xor     edx, edx
.text:00404CC5                 mov     ecx, [esp+14h]
.text:00404CC9                 mov     [esp+8], ebx
.text:00404CCD                 mov     eax, 0FFFFFFFFh
.text:00404CD2                 mov     ebx, [esp+10h]
.text:00404CD6                 div     ecx
.text:00404CD8                 cmp     eax, ebx
.text:00404CDA                 jb      short loc_404CF8
.text:00404CDC                 mov     [esp+4], ecx
.text:00404CE0                 mov     [esp], ebx
.text:00404CE3                 call    calloc
.text:00404CE8                 test    eax, eax
.text:00404CEA                 jz      short loc_404CF4
.text:00404CEC
.text:00404CEC loc_404CEC:                             ; CODE XREF: .text:00404CF6↓j
.text:00404CEC                 mov     ebx, [esp+8]
.text:00404CF0                 add     esp, 0Ch
.text:00404CF3                 retn
.text:00404CF4 ; ---------------------------------------------------------------------------
.text:00404CF4
.text:00404CF4 loc_404CF4:                             ; CODE XREF: .text:00404CEA↑j
.text:00404CF4                 test    ebx, ebx
.text:00404CF6                 jz      short loc_404CEC
.text:00404CF8
.text:00404CF8 loc_404CF8:                             ; CODE XREF: .text:00404CDA↑j
.text:00404CF8                 call    sub_404E30
.text:00404CF8 ; ---------------------------------------------------------------------------
.text:00404CFD                 align 10h
.text:00404D00                 sub     esp, 1Ch
.text:00404D03                 mov     [esp+18h], ebx
.text:00404D07                 mov     ebx, [esp+24h]
.text:00404D0B                 mov     [esp], ebx
.text:00404D0E                 call    malloc
.text:00404D13                 test    eax, eax
.text:00404D15                 mov     edx, eax
.text:00404D17                 jz      short loc_404D35
.text:00404D19
.text:00404D19 loc_404D19:                             ; CODE XREF: .text:00404D37↓j
.text:00404D19                 mov     [esp+8], ebx
.text:00404D1D                 mov     ecx, [esp+20h]
.text:00404D21                 mov     [esp], edx
.text:00404D24                 mov     [esp+4], ecx
.text:00404D28                 call    memcpy
.text:00404D2D                 mov     ebx, [esp+18h]
.text:00404D31                 add     esp, 1Ch
.text:00404D34                 retn
.text:00404D35 ; ---------------------------------------------------------------------------
.text:00404D35
.text:00404D35 loc_404D35:                             ; CODE XREF: .text:00404D17↑j
.text:00404D35                 test    ebx, ebx
.text:00404D37                 jz      short loc_404D19
.text:00404D39                 call    sub_404E30
.text:00404D39 ; ---------------------------------------------------------------------------
.text:00404D3E                 align 10h
.text:00404D40                 sub     esp, 1Ch
.text:00404D43                 mov     [esp+18h], esi
.text:00404D47                 mov     esi, [esp+20h]
.text:00404D4B                 mov     [esp+14h], ebx
.text:00404D4F                 mov     [esp], esi
.text:00404D52                 call    strlen
.text:00404D57                 lea     ebx, [eax+1]
.text:00404D5A                 mov     [esp], ebx
.text:00404D5D                 call    malloc
.text:00404D62                 test    eax, eax
.text:00404D64                 jz      short loc_404D82
.text:00404D66
.text:00404D66 loc_404D66:                             ; CODE XREF: .text:00404D84↓j
.text:00404D66                 mov     [esp+8], ebx
.text:00404D6A                 mov     [esp+4], esi
.text:00404D6E                 mov     [esp], eax
.text:00404D71                 call    memcpy
.text:00404D76                 mov     ebx, [esp+14h]
.text:00404D7A                 mov     esi, [esp+18h]
.text:00404D7E                 add     esp, 1Ch
.text:00404D81                 retn
.text:00404D82 ; ---------------------------------------------------------------------------
.text:00404D82
.text:00404D82 loc_404D82:                             ; CODE XREF: .text:00404D64↑j
.text:00404D82                 test    ebx, ebx
.text:00404D84                 jz      short loc_404D66
.text:00404D86                 call    sub_404E30
.text:00404D86 ; ---------------------------------------------------------------------------
.text:00404D8B                 align 10h
.text:00404D90
.text:00404D90 ; =============== S U B R O U T I N E =======================================
.text:00404D90
.text:00404D90
.text:00404D90 ; int __cdecl sub_404D90(void *, int, int)
.text:00404D90 sub_404D90      proc near               ; CODE XREF: .text:00404C40↑j
.text:00404D90                                         ; .text:00404C6A↑p
.text:00404D90
.text:00404D90 Block           = dword ptr -1Ch
.text:00404D90 Size            = dword ptr -18h
.text:00404D90 var_C           = dword ptr -0Ch
.text:00404D90 var_8           = dword ptr -8
.text:00404D90 var_4           = dword ptr -4
.text:00404D90 arg_0           = dword ptr  4
.text:00404D90 arg_4           = dword ptr  8
.text:00404D90 arg_8           = dword ptr  0Ch
.text:00404D90
.text:00404D90                 sub     esp, 1Ch
.text:00404D93                 mov     [esp+1Ch+var_8], esi
.text:00404D97                 mov     esi, [esp+1Ch+arg_0]
.text:00404D9B                 mov     [esp+1Ch+var_4], edi
.text:00404D9F                 mov     edi, [esp+1Ch+arg_4]
.text:00404DA3                 test    esi, esi
.text:00404DA5                 mov     [esp+1Ch+var_C], ebx
.text:00404DA9                 mov     ecx, [edi]
.text:00404DAB                 mov     ebx, [esp+1Ch+arg_8]
.text:00404DAF                 jz      short loc_404DF0
.text:00404DB1                 xor     edx, edx
.text:00404DB3                 mov     eax, 7FFFFFFFh
.text:00404DB8                 div     ebx
.text:00404DBA                 cmp     eax, ecx
.text:00404DBC                 jb      short loc_404DE9
.text:00404DBE                 add     ecx, ecx
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404D90+62↓j
.text:00404DC0                                         ; sub_404D90+71↓j ...
.text:00404DC0                 mov     [edi], ecx
.text:00404DC2                 imul    ebx, ecx
.text:00404DC5                 mov     [esp+1Ch+Block], esi ; Block
.text:00404DC8                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404DCC                 call    realloc
.text:00404DD1                 test    eax, eax
.text:00404DD3                 jz      short loc_404DE5
.text:00404DD5
.text:00404DD5 loc_404DD5:                             ; CODE XREF: sub_404D90+57↓j
.text:00404DD5                 mov     ebx, [esp+1Ch+var_C]
.text:00404DD9                 mov     esi, [esp+1Ch+var_8]
.text:00404DDD                 mov     edi, [esp+1Ch+var_4]
.text:00404DE1                 add     esp, 1Ch
.text:00404DE4                 retn
.text:00404DE5 ; ---------------------------------------------------------------------------
.text:00404DE5
.text:00404DE5 loc_404DE5:                             ; CODE XREF: sub_404D90+43↑j
.text:00404DE5                 test    ebx, ebx
.text:00404DE7                 jz      short loc_404DD5
.text:00404DE9
.text:00404DE9 loc_404DE9:                             ; CODE XREF: sub_404D90+2C↑j
.text:00404DE9                 call    sub_404E30
.text:00404DE9 ; ---------------------------------------------------------------------------
.text:00404DEE                 align 10h
.text:00404DF0
.text:00404DF0 loc_404DF0:                             ; CODE XREF: sub_404D90+1F↑j
.text:00404DF0                 test    ecx, ecx
.text:00404DF2                 jnz     short loc_404DC0
.text:00404DF4                 xor     edx, edx
.text:00404DF6                 mov     eax, 40h ; '@'
.text:00404DFB                 div     ebx
.text:00404DFD                 test    eax, eax
.text:00404DFF                 mov     ecx, eax
.text:00404E01                 jnz     short loc_404DC0
.text:00404E03                 mov     ecx, 1
.text:00404E08                 jmp     short loc_404DC0
.text:00404E08 sub_404D90      endp
.text:00404E08
.text:00404E08 ; ---------------------------------------------------------------------------
.text:00404E0A                 align 10h
.text:00404E10 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404E30+3↓o
.text:00404E21 ; const char aS_4[]
.text:00404E21 aS_4            db '%s',0               ; DATA XREF: sub_404E30+10↓o
.text:00404E24                 align 10h
.text:00404E30
.text:00404E30 ; =============== S U B R O U T I N E =======================================
.text:00404E30
.text:00404E30 ; Attributes: noreturn
.text:00404E30
.text:00404E30 sub_404E30      proc near               ; CODE XREF: sub_404970:loc_404B2F↑p
.text:00404E30                                         ; sub_404B40:loc_404B79↑p ...
.text:00404E30
.text:00404E30 Code            = dword ptr -1Ch
.text:00404E30 ErrorMessage    = dword ptr -18h
.text:00404E30 var_14          = dword ptr -14h
.text:00404E30 var_10          = byte ptr -10h
.text:00404E30
.text:00404E30                 sub     esp, 1Ch
.text:00404E33                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404E3A                 call    ds:libintl_gettext
.text:00404E40                 mov     [esp+1Ch+var_14], offset aS_4 ; "%s"
.text:00404E48                 mov     edx, Code
.text:00404E4E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404E56                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404E5A                 mov     [esp+1Ch+Code], edx ; Code
.text:00404E5D                 call    sub_404EC0
.text:00404E62                 call    abort
.text:00404E62 sub_404E30      endp
.text:00404E62
.text:00404E62 ; ---------------------------------------------------------------------------
.text:00404E67                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70 ; Attributes: thunk
.text:00404E70
.text:00404E70 libintl_bindtextdomain proc near
.text:00404E70                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404E70 libintl_bindtextdomain endp
.text:00404E70
.text:00404E70 ; ---------------------------------------------------------------------------
.text:00404E76                 align 10h
.text:00404E80                 jmp     ds:libintl_textdomain
.text:00404E80 ; ---------------------------------------------------------------------------
.text:00404E86                 align 10h
.text:00404E90                 jmp     ds:libintl_gettext
.text:00404E90 ; ---------------------------------------------------------------------------
.text:00404E96                 align 10h
.text:00404EA0 ; const char aS_1[]
.text:00404EA0 aS_1            db ': %s',0             ; DATA XREF: sub_404EC0+B8↓o
.text:00404EA0                                         ; sub_404FC4+122↓o
.text:00404EA5 aUnknownSystemE db 'Unknown system error',0
.text:00404EA5                                         ; DATA XREF: sub_404EC0:loc_404F8D↓o
.text:00404EA5                                         ; sub_404FC4:loc_4050FE↓o
.text:00404EBA ; const char aS_2[]
.text:00404EBA aS_2            db '%s: ',0             ; DATA XREF: sub_404EC0:loc_404F94↓o
.text:00404EBF                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0
.text:00404EC0 ; int __cdecl sub_404EC0(int Code, int ErrorMessage, char *, char)
.text:00404EC0 sub_404EC0      proc near               ; CODE XREF: sub_401730+163↑p
.text:00404EC0                                         ; sub_401B60+F1↑p ...
.text:00404EC0
.text:00404EC0 Stream          = dword ptr -1Ch
.text:00404EC0 Format          = dword ptr -18h
.text:00404EC0 ArgList         = dword ptr -14h
.text:00404EC0 Code            = dword ptr  4
.text:00404EC0 ErrorMessage    = dword ptr  8
.text:00404EC0 arg_8           = dword ptr  0Ch
.text:00404EC0 arg_C           = byte ptr  10h
.text:00404EC0
.text:00404EC0                 push    esi
.text:00404EC1                 push    ebx
.text:00404EC2                 sub     esp, 14h
.text:00404EC5                 mov     edx, ds:_iob
.text:00404ECB                 mov     esi, [esp+1Ch+Code]
.text:00404ECF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404ED3                 add     edx, 20h ; ' '
.text:00404ED6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404ED9                 call    fflush
.text:00404EDE                 mov     eax, ds:dword_4071D0
.text:00404EE3                 test    eax, eax
.text:00404EE5                 jz      loc_404F94
.text:00404EEB                 call    eax ; dword_4071D0
.text:00404EED
.text:00404EED loc_404EED:                             ; CODE XREF: sub_404EC0+F7↓j
.text:00404EED                 lea     edx, [esp+1Ch+arg_C]
.text:00404EF1                 mov     ecx, [esp+1Ch+arg_8]
.text:00404EF5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404EF9                 mov     edx, ds:_iob
.text:00404EFF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404F03                 add     edx, 40h ; '@'
.text:00404F06                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404F09                 call    vfprintf
.text:00404F0E                 inc     ds:dword_4071E0
.text:00404F14                 test    ebx, ebx
.text:00404F16                 jnz     short loc_404F62
.text:00404F18
.text:00404F18 loc_404F18:                             ; CODE XREF: sub_404EC0+CB↓j
.text:00404F18                 mov     edx, ds:_iob
.text:00404F1E                 lea     ecx, [edx+40h]
.text:00404F21                 mov     ebx, [ecx+4]
.text:00404F24                 dec     ebx
.text:00404F25                 test    ebx, ebx
.text:00404F27                 mov     [ecx+4], ebx
.text:00404F2A                 js      short loc_404F50
.text:00404F2C                 mov     ecx, [edx+40h]
.text:00404F2F                 mov     byte ptr [ecx], 0Ah
.text:00404F32                 inc     dword ptr [edx+40h]
.text:00404F35
.text:00404F35 loc_404F35:                             ; CODE XREF: sub_404EC0+A0↓j
.text:00404F35                 mov     edx, ds:_iob
.text:00404F3B                 add     edx, 40h ; '@'
.text:00404F3E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404F41                 call    fflush
.text:00404F46                 test    esi, esi
.text:00404F48                 jnz     short loc_404FBC
.text:00404F4A                 add     esp, 14h
.text:00404F4D                 pop     ebx
.text:00404F4E                 pop     esi
.text:00404F4F                 retn
.text:00404F50 ; ---------------------------------------------------------------------------
.text:00404F50
.text:00404F50 loc_404F50:                             ; CODE XREF: sub_404EC0+6A↑j
.text:00404F50                 mov     [esp+1Ch+Format], ecx ; File
.text:00404F54                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404F5B                 call    _flsbuf
.text:00404F60                 jmp     short loc_404F35
.text:00404F62 ; ---------------------------------------------------------------------------
.text:00404F62
.text:00404F62 loc_404F62:                             ; CODE XREF: sub_404EC0+56↑j
.text:00404F62                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404F65                 call    strerror
.text:00404F6A                 test    eax, eax
.text:00404F6C                 jz      short loc_404F8D
.text:00404F6E
.text:00404F6E loc_404F6E:                             ; CODE XREF: sub_404EC0+D2↓j
.text:00404F6E                 mov     [esp+1Ch+ArgList], eax
.text:00404F72                 mov     ebx, ds:_iob
.text:00404F78                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00404F80                 add     ebx, 40h ; '@'
.text:00404F83                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404F86                 call    fprintf
.text:00404F8B                 jmp     short loc_404F18
.text:00404F8D ; ---------------------------------------------------------------------------
.text:00404F8D
.text:00404F8D loc_404F8D:                             ; CODE XREF: sub_404EC0+AC↑j
.text:00404F8D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404F92                 jmp     short loc_404F6E
.text:00404F94 ; ---------------------------------------------------------------------------
.text:00404F94
.text:00404F94 loc_404F94:                             ; CODE XREF: sub_404EC0+25↑j
.text:00404F94                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:00404F9C                 mov     edx, ds:_iob
.text:00404FA2                 mov     ecx, ds:dword_4071A0
.text:00404FA8                 add     edx, 40h ; '@'
.text:00404FAB                 mov     [esp+1Ch+ArgList], ecx
.text:00404FAF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404FB2                 call    fprintf
.text:00404FB7                 jmp     loc_404EED
.text:00404FBC ; ---------------------------------------------------------------------------
.text:00404FBC
.text:00404FBC loc_404FBC:                             ; CODE XREF: sub_404EC0+88↑j
.text:00404FBC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404FBF                 call    exit
.text:00404FBF sub_404EC0      endp
.text:00404FBF
.text:00404FC4
.text:00404FC4 ; =============== S U B R O U T I N E =======================================
.text:00404FC4
.text:00404FC4
.text:00404FC4 ; int __cdecl sub_404FC4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404FC4 sub_404FC4      proc near               ; DATA XREF: sub_404FC4+77↓o
.text:00404FC4
.text:00404FC4 Stream          = dword ptr -28h
.text:00404FC4 Format          = dword ptr -24h
.text:00404FC4 ArgList         = dword ptr -20h
.text:00404FC4 var_1C          = dword ptr -1Ch
.text:00404FC4 Code            = dword ptr  8
.text:00404FC4 ErrorMessage    = dword ptr  0Ch
.text:00404FC4 Str2            = dword ptr  10h
.text:00404FC4 arg_10          = dword ptr  14h
.text:00404FC4 arg_14          = dword ptr  18h
.text:00404FC4 arg_18          = byte ptr  1Ch
.text:00404FC4
.text:00404FC4                 and     eax, 64253A73h
.text:00404FC9                 cmp     ah, [eax]
.text:00404FCB
.text:00404FCB loc_404FCB:                             ; DATA XREF: sub_404FC4:loc_405105↓o
.text:00404FCB                 add     ds:55003A73h, ah
.text:00404FD1                 push    edi
.text:00404FD2                 push    esi
.text:00404FD3                 push    ebx
.text:00404FD4                 sub     esp, 1Ch
.text:00404FD7                 mov     edx, ds:dword_407210
.text:00404FDD                 mov     ebp, [esp+28h+Code]
.text:00404FE1                 mov     edi, [esp+28h+ErrorMessage]
.text:00404FE5                 test    edx, edx
.text:00404FE7                 mov     ebx, [esp+28h+Str2]
.text:00404FEB                 mov     esi, [esp+28h+arg_10]
.text:00404FEF                 jz      short loc_405009
.text:00404FF1                 cmp     ds:dword_407190, esi
.text:00404FF7                 jz      loc_405130
.text:00404FFD
.text:00404FFD loc_404FFD:                             ; CODE XREF: sub_404FC4+18D↓j
.text:00404FFD                 mov     ds:Str1, ebx
.text:00405003                 mov     ds:dword_407190, esi
.text:00405009
.text:00405009 loc_405009:                             ; CODE XREF: sub_404FC4+2B↑j
.text:00405009                 mov     edx, ds:_iob
.text:0040500F                 add     edx, 20h ; ' '
.text:00405012                 mov     [esp+28h+Stream], edx ; Stream
.text:00405015                 call    fflush
.text:0040501A                 mov     eax, ds:dword_4071D0
.text:0040501F                 test    eax, eax
.text:00405021                 jz      loc_405105
.text:00405027                 call    eax ; dword_4071D0
.text:00405029
.text:00405029 loc_405029:                             ; CODE XREF: sub_404FC4+164↓j
.text:00405029                 test    ebx, ebx
.text:0040502B                 jz      short loc_40504E
.text:0040502D                 mov     [esp+28h+ArgList], ebx
.text:00405031                 mov     ebx, ds:_iob
.text:00405037                 mov     [esp+28h+var_1C], esi
.text:0040503B                 mov     [esp+28h+Format], offset sub_404FC4 ; Format
.text:00405043                 add     ebx, 40h ; '@'
.text:00405046                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405049                 call    fprintf
.text:0040504E
.text:0040504E loc_40504E:                             ; CODE XREF: sub_404FC4+67↑j
.text:0040504E                 mov     esi, ds:_iob
.text:00405054                 lea     edx, [esp+28h+arg_18]
.text:00405058                 mov     ecx, [esp+28h+arg_14]
.text:0040505C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405060                 add     esi, 40h ; '@'
.text:00405063                 mov     [esp+28h+Format], ecx ; Format
.text:00405067                 mov     [esp+28h+Stream], esi ; Stream
.text:0040506A                 call    vfprintf
.text:0040506F                 inc     ds:dword_4071E0
.text:00405075                 test    edi, edi
.text:00405077                 jnz     short loc_4050D0
.text:00405079
.text:00405079 loc_405079:                             ; CODE XREF: sub_404FC4+135↓j
.text:00405079                 mov     edx, ds:_iob
.text:0040507F                 lea     ecx, [edx+40h]
.text:00405082                 mov     ebx, [ecx+4]
.text:00405085                 dec     ebx
.text:00405086                 test    ebx, ebx
.text:00405088                 mov     [ecx+4], ebx
.text:0040508B                 js      short loc_4050B7
.text:0040508D                 mov     esi, [edx+40h]
.text:00405090                 mov     byte ptr [esi], 0Ah
.text:00405093                 inc     dword ptr [edx+40h]
.text:00405096
.text:00405096 loc_405096:                             ; CODE XREF: sub_404FC4+103↓j
.text:00405096                 mov     ecx, ds:_iob
.text:0040509C                 add     ecx, 40h ; '@'
.text:0040509F                 mov     [esp+28h+Stream], ecx ; Stream
.text:004050A2                 call    fflush
.text:004050A7                 test    ebp, ebp
.text:004050A9                 jnz     loc_405156
.text:004050AF
.text:004050AF loc_4050AF:                             ; CODE XREF: sub_404FC4+173↓j
.text:004050AF                                         ; sub_404FC4+187↓j
.text:004050AF                 add     esp, 1Ch
.text:004050B2                 pop     ebx
.text:004050B3                 pop     esi
.text:004050B4                 pop     edi
.text:004050B5                 pop     ebp
.text:004050B6                 retn
.text:004050B7 ; ---------------------------------------------------------------------------
.text:004050B7
.text:004050B7 loc_4050B7:                             ; CODE XREF: sub_404FC4+C7↑j
.text:004050B7                 mov     [esp+28h+Format], ecx ; File
.text:004050BB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004050C2                 call    _flsbuf
.text:004050C7                 jmp     short loc_405096
.text:004050C7 ; ---------------------------------------------------------------------------
.text:004050C9                 align 10h
.text:004050D0
.text:004050D0 loc_4050D0:                             ; CODE XREF: sub_404FC4+B3↑j
.text:004050D0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004050D3                 call    strerror
.text:004050D8                 test    eax, eax
.text:004050DA                 jz      short loc_4050FE
.text:004050DC
.text:004050DC loc_4050DC:                             ; CODE XREF: sub_404FC4+13F↓j
.text:004050DC                 mov     [esp+28h+ArgList], eax
.text:004050E0                 mov     edi, ds:_iob
.text:004050E6                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:004050EE                 add     edi, 40h ; '@'
.text:004050F1                 mov     [esp+28h+Stream], edi ; Stream
.text:004050F4                 call    fprintf
.text:004050F9                 jmp     loc_405079
.text:004050FE ; ---------------------------------------------------------------------------
.text:004050FE
.text:004050FE loc_4050FE:                             ; CODE XREF: sub_404FC4+116↑j
.text:004050FE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405103                 jmp     short loc_4050DC
.text:00405105 ; ---------------------------------------------------------------------------
.text:00405105
.text:00405105 loc_405105:                             ; CODE XREF: sub_404FC4+5D↑j
.text:00405105                 mov     [esp+28h+Format], (offset loc_404FCB+1) ; Format
.text:0040510D                 mov     ecx, ds:_iob
.text:00405113                 mov     edx, ds:dword_4071A0
.text:00405119                 add     ecx, 40h ; '@'
.text:0040511C                 mov     [esp+28h+ArgList], edx
.text:00405120                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405123                 call    fprintf
.text:00405128                 jmp     loc_405029
.text:00405128 ; ---------------------------------------------------------------------------
.text:0040512D                 align 10h
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: sub_404FC4+33↑j
.text:00405130                 mov     eax, ds:Str1
.text:00405135                 cmp     ebx, eax
.text:00405137                 jz      loc_4050AF
.text:0040513D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405141                 mov     [esp+28h+Stream], eax ; Str1
.text:00405144                 call    strcmp
.text:00405149                 test    eax, eax
.text:0040514B                 jz      loc_4050AF
.text:00405151                 jmp     loc_404FFD
.text:00405156 ; ---------------------------------------------------------------------------
.text:00405156
.text:00405156 loc_405156:                             ; CODE XREF: sub_404FC4+E5↑j
.text:00405156                 mov     [esp+28h+Stream], ebp ; Code
.text:00405159                 call    exit
.text:00405159 sub_404FC4      endp ; sp-analysis failed
.text:00405159
.text:00405159 ; ---------------------------------------------------------------------------
.text:0040515E                 align 10h
.text:00405160
.text:00405160 ; =============== S U B R O U T I N E =======================================
.text:00405160
.text:00405160 ; Attributes: thunk
.text:00405160
.text:00405160 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405160 mbrtowc         proc near               ; CODE XREF: sub_403830+757↑p
.text:00405160                 jmp     ds:__imp_mbrtowc
.text:00405160 mbrtowc         endp
.text:00405160
.text:00405160 ; ---------------------------------------------------------------------------
.text:00405166                 align 10h
.text:00405170
.text:00405170 ; =============== S U B R O U T I N E =======================================
.text:00405170
.text:00405170 ; Attributes: bp-based frame
.text:00405170
.text:00405170 sub_405170      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405170                 push    ebp
.text:00405171                 mov     ecx, offset byte_407000
.text:00405176                 cmp     ecx, offset byte_407000
.text:0040517C                 mov     ebp, esp
.text:0040517E                 jnb     short loc_405196
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: sub_405170+24↓j
.text:00405180                 mov     edx, [ecx+4]
.text:00405183                 mov     eax, [ecx]
.text:00405185                 add     ecx, 8
.text:00405188                 add     [edx+400000h], eax
.text:0040518E                 cmp     ecx, offset byte_407000
.text:00405194                 jb      short loc_405180
.text:00405196
.text:00405196 loc_405196:                             ; CODE XREF: sub_405170+E↑j
.text:00405196                 pop     ebp
.text:00405197                 retn
.text:00405197 sub_405170      endp
.text:00405197
.text:00405197 ; ---------------------------------------------------------------------------
.text:00405198                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0 ; Attributes: bp-based frame
.text:004051A0
.text:004051A0 sub_4051A0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004051A0                                         ; TopLevelExceptionFilter+D7↑p
.text:004051A0                 push    ebp
.text:004051A1                 mov     ebp, esp
.text:004051A3                 fninit
.text:004051A5                 pop     ebp
.text:004051A6                 retn
.text:004051A6 sub_4051A0      endp
.text:004051A6
.text:004051A6 ; ---------------------------------------------------------------------------
.text:004051A7                 align 10h
.text:004051B0
.text:004051B0 ; =============== S U B R O U T I N E =======================================
.text:004051B0
.text:004051B0 ; Attributes: bp-based frame
.text:004051B0
.text:004051B0 ; void __cdecl sub_4051B0()
.text:004051B0 sub_4051B0      proc near               ; DATA XREF: .text:loc_4051F9↓o
.text:004051B0                                         ; sub_405240:loc_40526E↓o
.text:004051B0                 push    ebp
.text:004051B1                 mov     ebp, esp
.text:004051B3                 sub     esp, 8
.text:004051B6                 mov     eax, off_406084
.text:004051BB                 mov     edx, [eax]
.text:004051BD                 test    edx, edx
.text:004051BF                 jnz     short loc_4051C5
.text:004051C1
.text:004051C1 loc_4051C1:                             ; CODE XREF: sub_4051B0+2C↓j
.text:004051C1                 mov     esp, ebp
.text:004051C3                 pop     ebp
.text:004051C4                 retn
.text:004051C5 ; ---------------------------------------------------------------------------
.text:004051C5
.text:004051C5 loc_4051C5:                             ; CODE XREF: sub_4051B0+F↑j
.text:004051C5                                         ; sub_4051B0+2A↓j
.text:004051C5                 call    dword ptr [eax]
.text:004051C7                 mov     edx, off_406084
.text:004051CD                 mov     ecx, [edx+4]
.text:004051D0                 lea     eax, [edx+4]
.text:004051D3                 mov     off_406084, eax
.text:004051D8                 test    ecx, ecx
.text:004051DA                 jnz     short loc_4051C5
.text:004051DC                 jmp     short loc_4051C1
.text:004051DC sub_4051B0      endp
.text:004051DC
.text:004051DC ; ---------------------------------------------------------------------------
.text:004051DE                 align 10h
.text:004051E0                 push    ebp
.text:004051E1                 mov     ebp, esp
.text:004051E3                 sub     esp, 8
.text:004051E6                 mov     [ebp-4], ebx
.text:004051E9                 mov     eax, ds:dword_4057D0
.text:004051EE                 cmp     eax, 0FFFFFFFFh
.text:004051F1                 jz      short loc_40521C
.text:004051F3
.text:004051F3 loc_4051F3:                             ; CODE XREF: .text:00405226↓j
.text:004051F3                                         ; .text:00405239↓j
.text:004051F3                 test    eax, eax
.text:004051F5                 mov     ebx, eax
.text:004051F7                 jnz     short loc_405210
.text:004051F9
.text:004051F9 loc_4051F9:                             ; CODE XREF: .text:0040521A↓j
.text:004051F9                 mov     dword ptr [esp], offset sub_4051B0
.text:00405200                 call    sub_401040
.text:00405205                 mov     ebx, [ebp-4]
.text:00405208                 mov     esp, ebp
.text:0040520A                 pop     ebp
.text:0040520B                 retn
.text:0040520B ; ---------------------------------------------------------------------------
.text:0040520C                 align 10h
.text:00405210
.text:00405210 loc_405210:                             ; CODE XREF: .text:004051F7↑j
.text:00405210                                         ; .text:00405218↓j
.text:00405210                 call    ds:dword_4057D0[ebx*4]
.text:00405217                 dec     ebx
.text:00405218                 jnz     short loc_405210
.text:0040521A                 jmp     short loc_4051F9
.text:0040521C ; ---------------------------------------------------------------------------
.text:0040521C
.text:0040521C loc_40521C:                             ; CODE XREF: .text:004051F1↑j
.text:0040521C                 mov     ecx, ds:dword_4057D4
.text:00405222                 xor     eax, eax
.text:00405224                 test    ecx, ecx
.text:00405226                 jz      short loc_4051F3
.text:00405228                 mov     edx, offset dword_4057D0
.text:0040522D                 lea     esi, [esi+0]
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: .text:00405237↓j
.text:00405230                 inc     eax
.text:00405231                 mov     ecx, [edx+eax*4+4]
.text:00405235                 test    ecx, ecx
.text:00405237                 jnz     short loc_405230
.text:00405239                 jmp     short loc_4051F3
.text:00405239 ; ---------------------------------------------------------------------------
.text:0040523B                 align 10h
.text:00405240
.text:00405240 ; =============== S U B R O U T I N E =======================================
.text:00405240
.text:00405240 ; Attributes: bp-based frame
.text:00405240
.text:00405240 sub_405240      proc near               ; CODE XREF: sub_401730+19↑p
.text:00405240
.text:00405240 var_8           = dword ptr -8
.text:00405240 var_4           = dword ptr -4
.text:00405240
.text:00405240                 push    ebp
.text:00405241                 mov     ebp, esp
.text:00405243                 sub     esp, 8
.text:00405246                 mov     [ebp+var_4], ebx
.text:00405249                 mov     edx, dword_406080
.text:0040524F                 test    edx, edx
.text:00405251                 jnz     short loc_40527A
.text:00405253                 mov     eax, ds:dword_4057D0
.text:00405258                 mov     edx, 1
.text:0040525D                 mov     dword_406080, edx
.text:00405263                 cmp     eax, 0FFFFFFFFh
.text:00405266                 jz      short loc_40528D
.text:00405268
.text:00405268 loc_405268:                             ; CODE XREF: sub_405240+57↓j
.text:00405268                                         ; sub_405240+69↓j
.text:00405268                 test    eax, eax
.text:0040526A                 mov     ebx, eax
.text:0040526C                 jnz     short loc_405281
.text:0040526E
.text:0040526E loc_40526E:                             ; CODE XREF: sub_405240+4B↓j
.text:0040526E                 mov     [esp+8+var_8], offset sub_4051B0 ; void (__cdecl *)()
.text:00405275                 call    sub_401040
.text:0040527A
.text:0040527A loc_40527A:                             ; CODE XREF: sub_405240+11↑j
.text:0040527A                 mov     ebx, [ebp+var_4]
.text:0040527D                 mov     esp, ebp
.text:0040527F                 pop     ebp
.text:00405280                 retn
.text:00405281 ; ---------------------------------------------------------------------------
.text:00405281
.text:00405281 loc_405281:                             ; CODE XREF: sub_405240+2C↑j
.text:00405281                                         ; sub_405240+49↓j
.text:00405281                 call    ds:dword_4057D0[ebx*4]
.text:00405288                 dec     ebx
.text:00405289                 jnz     short loc_405281
.text:0040528B                 jmp     short loc_40526E
.text:0040528D ; ---------------------------------------------------------------------------
.text:0040528D
.text:0040528D loc_40528D:                             ; CODE XREF: sub_405240+26↑j
.text:0040528D                 mov     ecx, ds:dword_4057D4
.text:00405293                 xor     eax, eax
.text:00405295                 test    ecx, ecx
.text:00405297                 jz      short loc_405268
.text:00405299                 mov     edx, offset dword_4057D0
.text:0040529E                 mov     esi, esi
.text:004052A0
.text:004052A0 loc_4052A0:                             ; CODE XREF: sub_405240+67↓j
.text:004052A0                 inc     eax
.text:004052A1                 mov     ebx, [edx+eax*4+4]
.text:004052A5                 test    ebx, ebx
.text:004052A7                 jnz     short loc_4052A0
.text:004052A9                 jmp     short loc_405268
.text:004052A9 sub_405240      endp
.text:004052A9
.text:004052A9 ; ---------------------------------------------------------------------------
.text:004052AB                 align 10h
.text:004052B0
.text:004052B0 ; =============== S U B R O U T I N E =======================================
.text:004052B0
.text:004052B0 ; Attributes: info_from_lumina
.text:004052B0
.text:004052B0 ; void *__cdecl _alloca(size_t Size)
.text:004052B0 __alloca        proc near               ; CODE XREF: sub_401730+14↑p
.text:004052B0                                         ; sub_401B60+9↑p
.text:004052B0                 push    ecx
.text:004052B1                 mov     ecx, esp
.text:004052B3                 add     ecx, 8
.text:004052B6
.text:004052B6 loc_4052B6:                             ; CODE XREF: __alloca+1B↓j
.text:004052B6                 cmp     eax, 1000h
.text:004052BB                 jb      short loc_4052CD
.text:004052BD                 sub     ecx, 1000h
.text:004052C3                 or      dword ptr [ecx], 0
.text:004052C6                 sub     eax, 1000h
.text:004052CB                 jmp     short loc_4052B6
.text:004052CD ; ---------------------------------------------------------------------------
.text:004052CD
.text:004052CD loc_4052CD:                             ; CODE XREF: __alloca+B↑j
.text:004052CD                 sub     ecx, eax
.text:004052CF                 or      dword ptr [ecx], 0
.text:004052D2                 mov     eax, esp
.text:004052D4                 mov     esp, ecx
.text:004052D6                 mov     ecx, [eax]
.text:004052D8                 mov     eax, [eax+4]
.text:004052DB                 jmp     eax
.text:004052DB __alloca        endp
.text:004052DB
.text:004052DB ; ---------------------------------------------------------------------------
.text:004052DD                 align 10h
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0 ; Attributes: bp-based frame
.text:004052E0
.text:004052E0 sub_4052E0      proc near               ; CODE XREF: sub_403230+38↑p
.text:004052E0
.text:004052E0 var_34          = dword ptr -34h
.text:004052E0 var_2C          = dword ptr -2Ch
.text:004052E0 var_28          = dword ptr -28h
.text:004052E0 var_24          = dword ptr -24h
.text:004052E0 var_20          = dword ptr -20h
.text:004052E0 var_1C          = dword ptr -1Ch
.text:004052E0 var_18          = dword ptr -18h
.text:004052E0 var_14          = dword ptr -14h
.text:004052E0 arg_0           = dword ptr  8
.text:004052E0 arg_4           = dword ptr  0Ch
.text:004052E0 arg_8           = dword ptr  10h
.text:004052E0 arg_C           = dword ptr  14h
.text:004052E0
.text:004052E0                 push    ebp
.text:004052E1                 mov     ebp, esp
.text:004052E3                 push    edi
.text:004052E4                 push    esi
.text:004052E5                 push    ebx
.text:004052E6                 sub     esp, 2Ch
.text:004052E9                 mov     edx, [ebp+arg_C]
.text:004052EC                 mov     [ebp+var_20], 0
.text:004052F3                 mov     ecx, [ebp+arg_0]
.text:004052F6                 mov     ebx, [ebp+arg_4]
.text:004052F9                 mov     [ebp+var_1C], 0
.text:00405300                 mov     eax, [ebp+arg_8]
.text:00405303                 test    edx, edx
.text:00405305                 mov     [ebp+var_24], edx
.text:00405308                 mov     edi, ebx
.text:0040530A                 mov     esi, eax
.text:0040530C                 mov     [ebp+var_28], ecx
.text:0040530F                 jnz     short loc_405370
.text:00405311                 cmp     eax, ebx
.text:00405313                 jbe     short loc_405350
.text:00405315                 mov     eax, ecx
.text:00405317                 mov     edx, ebx
.text:00405319                 div     esi
.text:0040531B
.text:0040531B loc_40531B:                             ; CODE XREF: sub_4052E0+8B↓j
.text:0040531B                 mov     [ebp+var_28], edx
.text:0040531E                 lea     ecx, [ebp+var_18]
.text:00405321                 test    ecx, ecx
.text:00405323                 jz      short loc_40533E
.text:00405325                 mov     [ebp+var_1C], 0
.text:0040532C
.text:0040532C loc_40532C:                             ; CODE XREF: sub_4052E0+DA↓j
.text:0040532C                 mov     eax, [ebp+var_28]
.text:0040532F                 mov     [ebp+var_20], eax
.text:00405332                 mov     edx, [ebp+var_20]
.text:00405335                 mov     ecx, [ebp+var_1C]
.text:00405338                 mov     [ebp+var_18], edx
.text:0040533B                 mov     [ebp+var_14], ecx
.text:0040533E
.text:0040533E loc_40533E:                             ; CODE XREF: sub_4052E0+43↑j
.text:0040533E                                         ; sub_4052E0+A7↓j ...
.text:0040533E                 mov     eax, [ebp+var_18]
.text:00405341                 mov     edx, [ebp+var_14]
.text:00405344                 add     esp, 2Ch
.text:00405347                 pop     ebx
.text:00405348                 pop     esi
.text:00405349                 pop     edi
.text:0040534A                 pop     ebp
.text:0040534B                 retn
.text:0040534B ; ---------------------------------------------------------------------------
.text:0040534C                 align 10h
.text:00405350
.text:00405350 loc_405350:                             ; CODE XREF: sub_4052E0+33↑j
.text:00405350                 test    eax, eax
.text:00405352                 jnz     short loc_40535F
.text:00405354                 mov     eax, 1
.text:00405359                 xor     edx, edx
.text:0040535B                 div     esi
.text:0040535D                 mov     esi, eax
.text:0040535F
.text:0040535F loc_40535F:                             ; CODE XREF: sub_4052E0+72↑j
.text:0040535F                 mov     eax, edi
.text:00405361                 mov     edx, [ebp+var_24]
.text:00405364                 div     esi
.text:00405366                 mov     eax, [ebp+var_28]
.text:00405369                 div     esi
.text:0040536B                 jmp     short loc_40531B
.text:0040536B ; ---------------------------------------------------------------------------
.text:0040536D                 align 10h
.text:00405370
.text:00405370 loc_405370:                             ; CODE XREF: sub_4052E0+2F↑j
.text:00405370                 cmp     [ebp+var_24], ebx
.text:00405373                 jbe     short loc_405390
.text:00405375                 mov     [ebp+var_20], ecx
.text:00405378
.text:00405378 loc_405378:                             ; CODE XREF: sub_4052E0+15B↓j
.text:00405378                 mov     [ebp+var_1C], edi
.text:0040537B                 mov     eax, [ebp+var_20]
.text:0040537E                 mov     edx, [ebp+var_1C]
.text:00405381                 mov     [ebp+var_18], eax
.text:00405384                 mov     [ebp+var_14], edx
.text:00405387                 jmp     short loc_40533E
.text:00405387 ; ---------------------------------------------------------------------------
.text:00405389                 align 10h
.text:00405390
.text:00405390 loc_405390:                             ; CODE XREF: sub_4052E0+93↑j
.text:00405390                 bsr     eax, [ebp+var_24]
.text:00405394                 mov     ebx, eax
.text:00405396                 xor     ebx, 1Fh
.text:00405399                 jnz     short loc_4053C0
.text:0040539B                 cmp     edi, [ebp+var_24]
.text:0040539E                 ja      short loc_4053A5
.text:004053A0                 cmp     [ebp+var_28], esi
.text:004053A3                 jb      short loc_4053B0
.text:004053A5
.text:004053A5 loc_4053A5:                             ; CODE XREF: sub_4052E0+BE↑j
.text:004053A5                 mov     edx, [ebp+var_28]
.text:004053A8                 sub     edx, esi
.text:004053AA                 sbb     edi, [ebp+var_24]
.text:004053AD                 mov     [ebp+var_28], edx
.text:004053B0
.text:004053B0 loc_4053B0:                             ; CODE XREF: sub_4052E0+C3↑j
.text:004053B0                 lea     ecx, [ebp+var_18]
.text:004053B3                 test    ecx, ecx
.text:004053B5                 jz      short loc_40533E
.text:004053B7                 mov     [ebp+var_1C], edi
.text:004053BA                 jmp     loc_40532C
.text:004053BA ; ---------------------------------------------------------------------------
.text:004053BF                 align 10h
.text:004053C0
.text:004053C0 loc_4053C0:                             ; CODE XREF: sub_4052E0+B9↑j
.text:004053C0                 mov     edx, [ebp+var_24]
.text:004053C3                 mov     eax, 20h ; ' '
.text:004053C8                 mov     cl, bl
.text:004053CA                 sub     eax, ebx
.text:004053CC                 mov     [ebp+var_2C], eax
.text:004053CF                 shl     edx, cl
.text:004053D1                 mov     eax, esi
.text:004053D3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004053D7                 shr     eax, cl
.text:004053D9                 mov     cl, bl
.text:004053DB                 shl     esi, cl
.text:004053DD                 or      edx, eax
.text:004053DF                 mov     eax, [ebp+var_28]
.text:004053E2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004053E6                 mov     [ebp+var_24], edx
.text:004053E9                 mov     edx, edi
.text:004053EB                 shr     edx, cl
.text:004053ED                 mov     cl, bl
.text:004053EF                 shl     edi, cl
.text:004053F1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004053F5                 shr     eax, cl
.text:004053F7                 or      edi, eax
.text:004053F9                 mov     eax, edi
.text:004053FB                 mov     cl, bl
.text:004053FD                 div     [ebp+var_24]
.text:00405400                 shl     [ebp+var_28], cl
.text:00405403                 mov     edi, edx
.text:00405405                 mul     esi
.text:00405407                 mov     [ebp+var_34], eax
.text:0040540A                 cmp     edx, edi
.text:0040540C                 ja      short loc_405448
.text:0040540E                 cmp     edx, edi
.text:00405410                 jz      short loc_405440
.text:00405412
.text:00405412 loc_405412:                             ; CODE XREF: sub_4052E0+166↓j
.text:00405412                                         ; sub_4052E0+173↓j
.text:00405412                 lea     eax, [ebp+var_18]
.text:00405415                 test    eax, eax
.text:00405417                 jz      loc_40533E
.text:0040541D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405421                 mov     eax, [ebp+var_28]
.text:00405424                 sub     eax, [ebp+var_34]
.text:00405427                 sbb     edi, edx
.text:00405429                 mov     [ebp+var_28], eax
.text:0040542C                 mov     edx, edi
.text:0040542E                 shl     edx, cl
.text:00405430                 mov     cl, bl
.text:00405432                 shr     eax, cl
.text:00405434                 or      edx, eax
.text:00405436                 mov     [ebp+var_20], edx
.text:00405439                 shr     edi, cl
.text:0040543B                 jmp     loc_405378
.text:00405440 ; ---------------------------------------------------------------------------
.text:00405440
.text:00405440 loc_405440:                             ; CODE XREF: sub_4052E0+130↑j
.text:00405440                 mov     eax, [ebp+var_28]
.text:00405443                 cmp     [ebp+var_34], eax
.text:00405446                 jbe     short loc_405412
.text:00405448
.text:00405448 loc_405448:                             ; CODE XREF: sub_4052E0+12C↑j
.text:00405448                 mov     ecx, [ebp+var_34]
.text:0040544B                 sub     ecx, esi
.text:0040544D                 sbb     edx, [ebp+var_24]
.text:00405450                 mov     [ebp+var_34], ecx
.text:00405453                 jmp     short loc_405412
.text:00405453 sub_4052E0      endp
.text:00405453
.text:00405453 ; ---------------------------------------------------------------------------
.text:00405455                 align 10h
.text:00405460
.text:00405460 ; =============== S U B R O U T I N E =======================================
.text:00405460
.text:00405460 ; Attributes: bp-based frame
.text:00405460
.text:00405460 sub_405460      proc near               ; CODE XREF: sub_403230+58↑p
.text:00405460
.text:00405460 var_24          = dword ptr -24h
.text:00405460 var_20          = dword ptr -20h
.text:00405460 var_1C          = dword ptr -1Ch
.text:00405460 var_18          = dword ptr -18h
.text:00405460 var_14          = dword ptr -14h
.text:00405460 var_C           = dword ptr -0Ch
.text:00405460 var_8           = dword ptr -8
.text:00405460 var_4           = dword ptr -4
.text:00405460 arg_0           = dword ptr  8
.text:00405460 arg_4           = dword ptr  0Ch
.text:00405460 arg_8           = dword ptr  10h
.text:00405460 arg_C           = dword ptr  14h
.text:00405460
.text:00405460                 push    ebp
.text:00405461                 mov     ebp, esp
.text:00405463                 sub     esp, 28h
.text:00405466                 mov     [ebp+var_C], ebx
.text:00405469                 mov     edx, [ebp+arg_C]
.text:0040546C                 mov     ecx, [ebp+arg_0]
.text:0040546F                 mov     [ebp+var_8], esi
.text:00405472                 mov     eax, [ebp+arg_8]
.text:00405475                 test    edx, edx
.text:00405477                 mov     [ebp+var_4], edi
.text:0040547A                 mov     ebx, [ebp+arg_4]
.text:0040547D                 mov     esi, eax
.text:0040547F                 mov     [ebp+var_18], 0
.text:00405486                 mov     [ebp+var_14], 0
.text:0040548D                 mov     [ebp+var_1C], ecx
.text:00405490                 jnz     short loc_4054E2
.text:00405492                 cmp     eax, ebx
.text:00405494                 jbe     short loc_4054C0
.text:00405496                 mov     eax, ecx
.text:00405498                 mov     edx, ebx
.text:0040549A                 div     esi
.text:0040549C                 mov     edi, eax
.text:0040549E                 mov     esi, esi
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: sub_405460+88↓j
.text:004054A0                                         ; sub_405460+A4↓j ...
.text:004054A0                 xor     ecx, ecx
.text:004054A2
.text:004054A2 loc_4054A2:                             ; CODE XREF: sub_405460+80↓j
.text:004054A2                 mov     [ebp+var_18], edi
.text:004054A5                 mov     ebx, [ebp+var_C]
.text:004054A8                 mov     eax, [ebp+var_18]
.text:004054AB                 mov     [ebp+var_14], ecx
.text:004054AE                 mov     esi, [ebp+var_8]
.text:004054B1                 mov     edx, [ebp+var_14]
.text:004054B4                 mov     edi, [ebp+var_4]
.text:004054B7                 mov     esp, ebp
.text:004054B9                 pop     ebp
.text:004054BA                 retn
.text:004054BA ; ---------------------------------------------------------------------------
.text:004054BB                 align 10h
.text:004054C0
.text:004054C0 loc_4054C0:                             ; CODE XREF: sub_405460+34↑j
.text:004054C0                 test    eax, eax
.text:004054C2                 jnz     short loc_4054D1
.text:004054C4                 mov     eax, 1
.text:004054C9                 xor     ecx, ecx
.text:004054CB                 xor     edx, edx
.text:004054CD                 div     ecx
.text:004054CF                 mov     esi, eax
.text:004054D1
.text:004054D1 loc_4054D1:                             ; CODE XREF: sub_405460+62↑j
.text:004054D1                 mov     eax, ebx
.text:004054D3                 xor     edx, edx
.text:004054D5                 div     esi
.text:004054D7                 mov     ecx, eax
.text:004054D9                 mov     eax, [ebp+var_1C]
.text:004054DC                 div     esi
.text:004054DE                 mov     edi, eax
.text:004054E0                 jmp     short loc_4054A2
.text:004054E2 ; ---------------------------------------------------------------------------
.text:004054E2
.text:004054E2 loc_4054E2:                             ; CODE XREF: sub_405460+30↑j
.text:004054E2                 cmp     edx, ebx
.text:004054E4                 jbe     short loc_4054F0
.text:004054E6                 xor     edi, edi
.text:004054E8                 jmp     short loc_4054A0
.text:004054E8 ; ---------------------------------------------------------------------------
.text:004054EA                 align 10h
.text:004054F0
.text:004054F0 loc_4054F0:                             ; CODE XREF: sub_405460+84↑j
.text:004054F0                 bsr     eax, edx
.text:004054F3                 xor     eax, 1Fh
.text:004054F6                 mov     [ebp+var_20], eax
.text:004054F9                 jnz     short loc_405510
.text:004054FB                 cmp     ebx, edx
.text:004054FD                 ja      short loc_405506
.text:004054FF                 xor     edi, edi
.text:00405501                 cmp     [ebp+var_1C], esi
.text:00405504                 jb      short loc_4054A0
.text:00405506
.text:00405506 loc_405506:                             ; CODE XREF: sub_405460+9D↑j
.text:00405506                 mov     edi, 1
.text:0040550B                 jmp     short loc_4054A0
.text:0040550B ; ---------------------------------------------------------------------------
.text:0040550D                 align 10h
.text:00405510
.text:00405510 loc_405510:                             ; CODE XREF: sub_405460+99↑j
.text:00405510                 mov     eax, [ebp+var_20]
.text:00405513                 mov     ecx, 20h ; ' '
.text:00405518                 sub     ecx, eax
.text:0040551A                 mov     [ebp+var_24], ecx
.text:0040551D                 mov     eax, esi
.text:0040551F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00405523                 shl     edx, cl
.text:00405525                 mov     edi, edx
.text:00405527                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040552B                 mov     edx, ebx
.text:0040552D                 shr     eax, cl
.text:0040552F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00405533                 or      edi, eax
.text:00405535                 mov     eax, [ebp+var_1C]
.text:00405538                 shl     esi, cl
.text:0040553A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040553E                 shr     edx, cl
.text:00405540                 movzx   ecx, byte ptr [ebp+var_20]
.text:00405544                 shl     ebx, cl
.text:00405546                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040554A                 shr     eax, cl
.text:0040554C                 or      ebx, eax
.text:0040554E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00405552                 mov     eax, ebx
.text:00405554                 div     edi
.text:00405556                 mov     ebx, edx
.text:00405558                 mov     edi, eax
.text:0040555A                 shl     [ebp+var_1C], cl
.text:0040555D                 mul     esi
.text:0040555F                 cmp     edx, ebx
.text:00405561                 ja      short loc_405574
.text:00405563                 cmp     edx, ebx
.text:00405565                 jnz     loc_4054A0
.text:0040556B                 cmp     eax, [ebp+var_1C]
.text:0040556E                 jbe     loc_4054A0
.text:00405574
.text:00405574 loc_405574:                             ; CODE XREF: sub_405460+101↑j
.text:00405574                 dec     edi
.text:00405575                 jmp     loc_4054A0
.text:00405575 sub_405460      endp
.text:00405575
.text:00405575 ; ---------------------------------------------------------------------------
.text:0040557A                 align 10h
.text:00405580
.text:00405580 ; =============== S U B R O U T I N E =======================================
.text:00405580
.text:00405580 ; Attributes: thunk
.text:00405580
.text:00405580 ; int __cdecl isatty(int FileHandle)
.text:00405580 _isatty         proc near               ; CODE XREF: sub_401B60+64↑p
.text:00405580
.text:00405580 FileHandle      = dword ptr  4
.text:00405580
.text:00405580                 jmp     ds:__imp__isatty
.text:00405580 _isatty         endp
.text:00405580
.text:00405580 ; ---------------------------------------------------------------------------
.text:00405586                 align 10h
.text:00405590                 jmp     ds:__set_app_type
.text:00405590 ; ---------------------------------------------------------------------------
.text:00405596                 align 10h
.text:004055A0
.text:004055A0 ; =============== S U B R O U T I N E =======================================
.text:004055A0
.text:004055A0 ; Attributes: thunk
.text:004055A0
.text:004055A0 ; void __cdecl cexit()
.text:004055A0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004055A0                 jmp     ds:__imp__cexit
.text:004055A0 _cexit          endp
.text:004055A0
.text:004055A0 ; ---------------------------------------------------------------------------
.text:004055A6                 align 10h
.text:004055B0
.text:004055B0 ; =============== S U B R O U T I N E =======================================
.text:004055B0
.text:004055B0 ; Attributes: thunk
.text:004055B0
.text:004055B0 ; char ***__cdecl _p__environ()
.text:004055B0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004055B0                 jmp     ds:__imp___p__environ
.text:004055B0 __p__environ    endp
.text:004055B0
.text:004055B0 ; ---------------------------------------------------------------------------
.text:004055B6                 align 10h
.text:004055C0
.text:004055C0 ; =============== S U B R O U T I N E =======================================
.text:004055C0
.text:004055C0 ; Attributes: thunk
.text:004055C0
.text:004055C0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004055C0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004055C0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004055C0
.text:004055C0 Signal          = dword ptr  4
.text:004055C0 Function        = dword ptr  8
.text:004055C0
.text:004055C0                 jmp     ds:__imp_signal
.text:004055C0 signal          endp
.text:004055C0
.text:004055C0 ; ---------------------------------------------------------------------------
.text:004055C6                 align 10h
.text:004055D0
.text:004055D0 ; =============== S U B R O U T I N E =======================================
.text:004055D0
.text:004055D0 ; Attributes: thunk
.text:004055D0
.text:004055D0 ; int *__cdecl _p__fmode()
.text:004055D0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004055D0                 jmp     ds:__imp___p__fmode
.text:004055D0 __p__fmode      endp
.text:004055D0
.text:004055D0 ; ---------------------------------------------------------------------------
.text:004055D6                 align 10h
.text:004055E0
.text:004055E0 ; =============== S U B R O U T I N E =======================================
.text:004055E0
.text:004055E0 ; Attributes: thunk
.text:004055E0
.text:004055E0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004055E0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004055E0                                         ; sub_401080+90↑p ...
.text:004055E0
.text:004055E0 FileHandle      = dword ptr  4
.text:004055E0 Mode            = dword ptr  8
.text:004055E0
.text:004055E0                 jmp     ds:__imp__setmode
.text:004055E0 _setmode        endp
.text:004055E0
.text:004055E0 ; ---------------------------------------------------------------------------
.text:004055E6                 align 10h
.text:004055F0
.text:004055F0 ; =============== S U B R O U T I N E =======================================
.text:004055F0
.text:004055F0 ; Attributes: thunk
.text:004055F0
.text:004055F0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004055F0                 jmp     ds:__imp___getmainargs
.text:004055F0 __getmainargs   endp
.text:004055F0
.text:004055F0 ; ---------------------------------------------------------------------------
.text:004055F6                 align 10h
.text:00405600
.text:00405600 ; =============== S U B R O U T I N E =======================================
.text:00405600
.text:00405600 ; Attributes: thunk
.text:00405600
.text:00405600 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405600 setlocale       proc near               ; CODE XREF: sub_401730+35↑p
.text:00405600
.text:00405600 Category        = dword ptr  4
.text:00405600 Locale          = dword ptr  8
.text:00405600
.text:00405600                 jmp     ds:__imp_setlocale
.text:00405600 setlocale       endp
.text:00405600
.text:00405600 ; ---------------------------------------------------------------------------
.text:00405606                 align 10h
.text:00405610
.text:00405610 ; =============== S U B R O U T I N E =======================================
.text:00405610
.text:00405610 ; Attributes: noreturn thunk
.text:00405610
.text:00405610 ; void __cdecl __noreturn exit(int Code)
.text:00405610 exit            proc near               ; CODE XREF: sub_401730:loc_40182E↑p
.text:00405610                                         ; sub_401A30+3E↑p ...
.text:00405610
.text:00405610 Code            = dword ptr  4
.text:00405610
.text:00405610                 jmp     ds:__imp_exit
.text:00405610 exit            endp
.text:00405610
.text:00405610 ; ---------------------------------------------------------------------------
.text:00405616                 align 10h
.text:00405620
.text:00405620 ; =============== S U B R O U T I N E =======================================
.text:00405620
.text:00405620 ; Attributes: thunk
.text:00405620
.text:00405620 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405620 fputs           proc near               ; CODE XREF: sub_401A30+83↑p
.text:00405620                                         ; sub_401A30+A5↑p ...
.text:00405620
.text:00405620 Buffer          = dword ptr  4
.text:00405620 Stream          = dword ptr  8
.text:00405620
.text:00405620                 jmp     ds:__imp_fputs
.text:00405620 fputs           endp
.text:00405620
.text:00405620 ; ---------------------------------------------------------------------------
.text:00405626                 align 10h
.text:00405630
.text:00405630 ; =============== S U B R O U T I N E =======================================
.text:00405630
.text:00405630 ; Attributes: thunk
.text:00405630
.text:00405630 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405630 fprintf         proc near               ; CODE XREF: sub_401730+F2↑p
.text:00405630                                         ; sub_401A30+36↑p ...
.text:00405630
.text:00405630 Stream          = dword ptr  4
.text:00405630 Format          = dword ptr  8
.text:00405630
.text:00405630                 jmp     ds:__imp_fprintf
.text:00405630 fprintf         endp
.text:00405630
.text:00405630 ; ---------------------------------------------------------------------------
.text:00405636                 align 10h
.text:00405640
.text:00405640 ; =============== S U B R O U T I N E =======================================
.text:00405640
.text:00405640 ; Attributes: thunk
.text:00405640
.text:00405640 ; int printf(const char *const Format, ...)
.text:00405640 printf          proc near               ; CODE XREF: sub_401A30+61↑p
.text:00405640                                         ; sub_401A30+E4↑p ...
.text:00405640
.text:00405640 Format          = dword ptr  4
.text:00405640
.text:00405640                 jmp     ds:__imp_printf
.text:00405640 printf          endp
.text:00405640
.text:00405640 ; ---------------------------------------------------------------------------
.text:00405646                 align 10h
.text:00405650
.text:00405650 ; =============== S U B R O U T I N E =======================================
.text:00405650
.text:00405650 ; Attributes: thunk
.text:00405650
.text:00405650 ; int __cdecl fclose(FILE *Stream)
.text:00405650 fclose          proc near               ; CODE XREF: sub_401730+141↑p
.text:00405650                                         ; sub_401B60+163↑p ...
.text:00405650
.text:00405650 Stream          = dword ptr  4
.text:00405650
.text:00405650                 jmp     ds:__imp_fclose
.text:00405650 fclose          endp
.text:00405650
.text:00405650 ; ---------------------------------------------------------------------------
.text:00405656                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660 ; Attributes: thunk
.text:00405660
.text:00405660 ; size_t __cdecl fread(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00405660 fread           proc near               ; CODE XREF: sub_401B60+9B↑p
.text:00405660
.text:00405660 Buffer          = dword ptr  4
.text:00405660 ElementSize     = dword ptr  8
.text:00405660 ElementCount    = dword ptr  0Ch
.text:00405660 Stream          = dword ptr  10h
.text:00405660
.text:00405660                 jmp     ds:__imp_fread
.text:00405660 fread           endp
.text:00405660
.text:00405660 ; ---------------------------------------------------------------------------
.text:00405666                 align 10h
.text:00405670
.text:00405670 ; =============== S U B R O U T I N E =======================================
.text:00405670
.text:00405670 ; Attributes: thunk
.text:00405670
.text:00405670 ; int *__cdecl errno()
.text:00405670 _errno          proc near               ; CODE XREF: sub_401730+149↑p
.text:00405670                                         ; sub_401B60+226↑p ...
.text:00405670                 jmp     ds:__imp__errno
.text:00405670 _errno          endp
.text:00405670
.text:00405670 ; ---------------------------------------------------------------------------
.text:00405676                 align 10h
.text:00405680
.text:00405680 ; =============== S U B R O U T I N E =======================================
.text:00405680
.text:00405680 ; Attributes: thunk
.text:00405680
.text:00405680 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00405680 fopen           proc near               ; CODE XREF: sub_401B60+31E↑p
.text:00405680
.text:00405680 FileName        = dword ptr  4
.text:00405680 Mode            = dword ptr  8
.text:00405680
.text:00405680                 jmp     ds:__imp_fopen
.text:00405680 fopen           endp
.text:00405680
.text:00405680 ; ---------------------------------------------------------------------------
.text:00405686                 align 10h
.text:00405690
.text:00405690 ; =============== S U B R O U T I N E =======================================
.text:00405690
.text:00405690 ; Attributes: thunk
.text:00405690
.text:00405690 ; size_t __cdecl strlen(const char *Str)
.text:00405690 strlen          proc near               ; CODE XREF: sub_4020F0+2A9↑p
.text:00405690                                         ; sub_4020F0+346↑p ...
.text:00405690
.text:00405690 Str             = dword ptr  4
.text:00405690
.text:00405690                 jmp     ds:__imp_strlen
.text:00405690 strlen          endp
.text:00405690
.text:00405690 ; ---------------------------------------------------------------------------
.text:00405696                 align 10h
.text:004056A0
.text:004056A0 ; =============== S U B R O U T I N E =======================================
.text:004056A0
.text:004056A0 ; Attributes: thunk
.text:004056A0
.text:004056A0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004056A0 strncmp         proc near               ; CODE XREF: sub_4020F0+23F↑p
.text:004056A0                                         ; sub_4020F0+699↑p
.text:004056A0
.text:004056A0 Str1            = dword ptr  4
.text:004056A0 Str2            = dword ptr  8
.text:004056A0 MaxCount        = dword ptr  0Ch
.text:004056A0
.text:004056A0                 jmp     ds:__imp_strncmp
.text:004056A0 strncmp         endp
.text:004056A0
.text:004056A0 ; ---------------------------------------------------------------------------
.text:004056A6                 align 10h
.text:004056B0
.text:004056B0 ; =============== S U B R O U T I N E =======================================
.text:004056B0
.text:004056B0 ; Attributes: thunk
.text:004056B0
.text:004056B0 ; char *__cdecl getenv(const char *VarName)
.text:004056B0 getenv          proc near               ; CODE XREF: sub_4020F0+B57↑p
.text:004056B0
.text:004056B0 VarName         = dword ptr  4
.text:004056B0
.text:004056B0                 jmp     ds:__imp_getenv
.text:004056B0 getenv          endp
.text:004056B0
.text:004056B0 ; ---------------------------------------------------------------------------
.text:004056B6                 align 10h
.text:004056C0
.text:004056C0 ; =============== S U B R O U T I N E =======================================
.text:004056C0
.text:004056C0 ; Attributes: thunk
.text:004056C0
.text:004056C0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004056C0 strchr          proc near               ; CODE XREF: sub_4020F0+469↑p
.text:004056C0                                         ; sub_4020F0+53A↑p ...
.text:004056C0
.text:004056C0 Str             = dword ptr  4
.text:004056C0 Val             = dword ptr  8
.text:004056C0
.text:004056C0                 jmp     ds:__imp_strchr
.text:004056C0 strchr          endp
.text:004056C0
.text:004056C0 ; ---------------------------------------------------------------------------
.text:004056C6                 align 10h
.text:004056D0
.text:004056D0 ; =============== S U B R O U T I N E =======================================
.text:004056D0
.text:004056D0 ; Attributes: thunk
.text:004056D0
.text:004056D0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004056D0 vfprintf        proc near               ; CODE XREF: sub_403590+C1↑p
.text:004056D0                                         ; sub_404EC0+49↑p ...
.text:004056D0
.text:004056D0 Stream          = dword ptr  4
.text:004056D0 Format          = dword ptr  8
.text:004056D0 ArgList         = dword ptr  0Ch
.text:004056D0
.text:004056D0                 jmp     ds:__imp_vfprintf
.text:004056D0 vfprintf        endp
.text:004056D0
.text:004056D0 ; ---------------------------------------------------------------------------
.text:004056D6                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0 ; Attributes: noreturn thunk
.text:004056E0
.text:004056E0 ; void __cdecl __noreturn abort()
.text:004056E0 abort           proc near               ; CODE XREF: sub_403590:loc_40362C↑p
.text:004056E0                                         ; sub_404970:loc_404B2A↑p ...
.text:004056E0                 jmp     ds:__imp_abort
.text:004056E0 abort           endp
.text:004056E0
.text:004056E0 ; ---------------------------------------------------------------------------
.text:004056E6                 align 10h
.text:004056F0
.text:004056F0 ; =============== S U B R O U T I N E =======================================
.text:004056F0
.text:004056F0 ; Attributes: thunk
.text:004056F0
.text:004056F0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004056F0 _flsbuf         proc near               ; CODE XREF: sub_403590+128↑p
.text:004056F0                                         ; sub_403590+13A↑p ...
.text:004056F0
.text:004056F0 File            = dword ptr  8
.text:004056F0
.text:004056F0                 jmp     ds:__imp__flsbuf
.text:004056F0 _flsbuf         endp
.text:004056F0
.text:004056F0 ; ---------------------------------------------------------------------------
.text:004056F6                 align 10h
.text:00405700
.text:00405700 ; =============== S U B R O U T I N E =======================================
.text:00405700
.text:00405700 ; Attributes: thunk
.text:00405700
.text:00405700 ; void __cdecl free(void *Block)
.text:00405700 free            proc near               ; CODE XREF: sub_404970+112↑p
.text:00405700
.text:00405700 Block           = dword ptr  4
.text:00405700
.text:00405700                 jmp     ds:__imp_free
.text:00405700 free            endp
.text:00405700
.text:00405700 ; ---------------------------------------------------------------------------
.text:00405706                 align 10h
.text:00405710
.text:00405710 ; =============== S U B R O U T I N E =======================================
.text:00405710
.text:00405710 ; Attributes: thunk
.text:00405710
.text:00405710 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405710 iswctype        proc near               ; CODE XREF: sub_403830+78B↑p
.text:00405710
.text:00405710 C               = word ptr  4
.text:00405710 Type            = word ptr  8
.text:00405710
.text:00405710                 jmp     ds:__imp_iswctype
.text:00405710 iswctype        endp
.text:00405710
.text:00405710 ; ---------------------------------------------------------------------------
.text:00405716                 align 10h
.text:00405720
.text:00405720 ; =============== S U B R O U T I N E =======================================
.text:00405720
.text:00405720 ; Attributes: thunk
.text:00405720
.text:00405720 ; int __cdecl isctype(int C, int Type)
.text:00405720 _isctype        proc near               ; CODE XREF: sub_403830+610↑p
.text:00405720
.text:00405720 C               = dword ptr  4
.text:00405720 Type            = dword ptr  8
.text:00405720
.text:00405720                 jmp     ds:__imp__isctype
.text:00405720 _isctype        endp
.text:00405720
.text:00405720 ; ---------------------------------------------------------------------------
.text:00405726                 align 10h
.text:00405730
.text:00405730 ; =============== S U B R O U T I N E =======================================
.text:00405730
.text:00405730 ; Attributes: thunk
.text:00405730
.text:00405730 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405730 memcpy          proc near               ; CODE XREF: .text:00404D28↑p
.text:00405730                                         ; .text:00404D71↑p
.text:00405730
.text:00405730 Src             = dword ptr  8
.text:00405730 Size            = dword ptr  0Ch
.text:00405730
.text:00405730                 jmp     ds:__imp_memcpy
.text:00405730 memcpy          endp
.text:00405730
.text:00405730 ; ---------------------------------------------------------------------------
.text:00405736                 align 10h
.text:00405740
.text:00405740 ; =============== S U B R O U T I N E =======================================
.text:00405740
.text:00405740 ; Attributes: thunk
.text:00405740
.text:00405740 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405740 memset          proc near               ; CODE XREF: .text:00404CA6↑p
.text:00405740
.text:00405740 Val             = dword ptr  8
.text:00405740 Size            = dword ptr  0Ch
.text:00405740
.text:00405740                 jmp     ds:__imp_memset
.text:00405740 memset          endp
.text:00405740
.text:00405740 ; ---------------------------------------------------------------------------
.text:00405746                 align 10h
.text:00405750
.text:00405750 ; =============== S U B R O U T I N E =======================================
.text:00405750
.text:00405750 ; Attributes: thunk
.text:00405750
.text:00405750 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405750 calloc          proc near               ; CODE XREF: .text:00404CE3↑p
.text:00405750
.text:00405750 Count           = dword ptr  4
.text:00405750 Size            = dword ptr  8
.text:00405750
.text:00405750                 jmp     ds:__imp_calloc
.text:00405750 calloc          endp
.text:00405750
.text:00405750 ; ---------------------------------------------------------------------------
.text:00405756                 align 10h
.text:00405760
.text:00405760 ; =============== S U B R O U T I N E =======================================
.text:00405760
.text:00405760 ; Attributes: thunk
.text:00405760
.text:00405760 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405760 realloc         proc near               ; CODE XREF: .text:00404BE0↑p
.text:00405760                                         ; sub_404C10+16↑p ...
.text:00405760
.text:00405760 Block           = dword ptr  4
.text:00405760 Size            = dword ptr  8
.text:00405760
.text:00405760                 jmp     ds:__imp_realloc
.text:00405760 realloc         endp
.text:00405760
.text:00405760 ; ---------------------------------------------------------------------------
.text:00405766                 align 10h
.text:00405770
.text:00405770 ; =============== S U B R O U T I N E =======================================
.text:00405770
.text:00405770 ; Attributes: thunk
.text:00405770
.text:00405770 ; void *__cdecl malloc(size_t Size)
.text:00405770 malloc          proc near               ; CODE XREF: sub_404B40+24↑p
.text:00405770                                         ; sub_404B80+E↑p ...
.text:00405770
.text:00405770 Size            = dword ptr  4
.text:00405770
.text:00405770                 jmp     ds:__imp_malloc
.text:00405770 malloc          endp
.text:00405770
.text:00405770 ; ---------------------------------------------------------------------------
.text:00405776                 align 10h
.text:00405780
.text:00405780 ; =============== S U B R O U T I N E =======================================
.text:00405780
.text:00405780 ; Attributes: thunk
.text:00405780
.text:00405780 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405780 strcmp          proc near               ; CODE XREF: sub_404FC4+180↑p
.text:00405780
.text:00405780 Str1            = dword ptr  4
.text:00405780 Str2            = dword ptr  8
.text:00405780
.text:00405780                 jmp     ds:__imp_strcmp
.text:00405780 strcmp          endp
.text:00405780
.text:00405780 ; ---------------------------------------------------------------------------
.text:00405786                 align 10h
.text:00405790
.text:00405790 ; =============== S U B R O U T I N E =======================================
.text:00405790
.text:00405790 ; Attributes: thunk
.text:00405790
.text:00405790 ; int __cdecl fflush(FILE *Stream)
.text:00405790 fflush          proc near               ; CODE XREF: sub_404EC0+19↑p
.text:00405790                                         ; sub_404EC0+81↑p ...
.text:00405790
.text:00405790 Stream          = dword ptr  4
.text:00405790
.text:00405790                 jmp     ds:__imp_fflush
.text:00405790 fflush          endp
.text:00405790
.text:00405790 ; ---------------------------------------------------------------------------
.text:00405796                 align 10h
.text:004057A0
.text:004057A0 ; =============== S U B R O U T I N E =======================================
.text:004057A0
.text:004057A0 ; Attributes: thunk
.text:004057A0
.text:004057A0 ; char *__cdecl strerror(int ErrorMessage)
.text:004057A0 strerror        proc near               ; CODE XREF: sub_404EC0+A5↑p
.text:004057A0                                         ; sub_404FC4+10F↑p
.text:004057A0
.text:004057A0 ErrorMessage    = dword ptr  4
.text:004057A0
.text:004057A0                 jmp     ds:__imp_strerror
.text:004057A0 strerror        endp
.text:004057A0
.text:004057A0 ; ---------------------------------------------------------------------------
.text:004057A6                 align 10h
.text:004057B0
.text:004057B0 ; =============== S U B R O U T I N E =======================================
.text:004057B0
.text:004057B0 ; Attributes: thunk
.text:004057B0
.text:004057B0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004057B0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004057B0
.text:004057B0 lpTopLevelExceptionFilter= dword ptr  4
.text:004057B0
.text:004057B0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004057B0 SetUnhandledExceptionFilter endp
.text:004057B0
.text:004057B0 ; ---------------------------------------------------------------------------
.text:004057B6                 align 10h
.text:004057C0
.text:004057C0 ; =============== S U B R O U T I N E =======================================
.text:004057C0
.text:004057C0 ; Attributes: noreturn thunk
.text:004057C0
.text:004057C0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004057C0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004057C0
.text:004057C0 uExitCode       = dword ptr  4
.text:004057C0
.text:004057C0                 jmp     ds:__imp_ExitProcess
.text:004057C0 ExitProcess     endp
.text:004057C0
.text:004057C0 ; ---------------------------------------------------------------------------
.text:004057C6                 align 10h
.text:004057D0 dword_4057D0    dd 0FFFFFFFFh           ; DATA XREF: .text:004051E9↑r
.text:004057D0                                         ; .text:loc_405210↑r ...
.text:004057D4 dword_4057D4    dd 0                    ; DATA XREF: .text:loc_40521C↑r
.text:004057D4                                         ; sub_405240:loc_40528D↑r
.text:004057D8                 dd 0FFFFFFFFh
.text:004057DC dword_4057DC    dd 9 dup(0)             ; DATA XREF: .data:off_406084↓o
.text:00405800                 dd 200h dup(?)
.text:00405800 _text           ends
.text:00405800
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004C00
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401730+10A↑r
.data:00406010                                         ; sub_402C80+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402C80+11↑r
.data:00406014                                         ; .text:00402D21↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402C80+7D↑w
.data:00406018                                         ; .text:00402D8D↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_403590+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_403150+6D↑r
.data:00406030                                         ; sub_403150+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_404970+22↑r
.data:00406040                                         ; sub_404970+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_404970+3F↑o
.data:00406044                                         ; sub_404970+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407050    ; DATA XREF: sub_404970+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_404970+39↑r
.data:0040604C                                         ; sub_404970+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_405240+9↑r
.data:00406080                                         ; sub_405240+1D↑w
.data:00406084 off_406084      dd offset dword_4057DC  ; DATA XREF: sub_4051B0+6↑r
.data:00406084                                         ; sub_4051B0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000240 (    576.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 byte_407000     db ?                    ; DATA XREF: sub_401730:loc_401833↑w
.bss:00407000                                         ; sub_401730:loc_401851↑r ...
.bss:00407001                 align 10h
.bss:00407010 dword_407010    dd ?                    ; DATA XREF: sub_402C80+9↑o
.bss:00407010                                         ; sub_402C80+17↑w ...
.bss:00407014 dword_407014    dd ?                    ; DATA XREF: sub_402C80+21↑w
.bss:00407014                                         ; .text:00402D39↑w
.bss:00407018 dword_407018    dd ?                    ; DATA XREF: sub_402C80+77↑r
.bss:00407018                                         ; .text:00402D87↑r
.bss:0040701C dword_40701C    dd ?                    ; DATA XREF: sub_402C80+6B↑r
.bss:0040701C                                         ; .text:00402D7B↑r
.bss:00407020                 align 40h
.bss:00407040 ; char *dword_407040
.bss:00407040 dword_407040    dd ?                    ; DATA XREF: .text:00403124↑w
.bss:00407040                                         ; sub_403150+58↑r
.bss:00407044                 align 10h
.bss:00407050 unk_407050      db    ? ;               ; DATA XREF: sub_404970+100↑o
.bss:00407050                                         ; .data:off_406048↑o
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:loc_404301↑o
.bss:00407150                                         ; .text:loc_404320↑o ...
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:loc_4043A0↑o
.bss:00407154                                         ; .text:00404828↑r ...
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00404822↑r
.bss:00407158                                         ; sub_4048D0+2C↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00404816↑r
.bss:0040715C                                         ; sub_4048D0+22↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00404832↑r
.bss:00407160                                         ; sub_4048D0+36↑r
.bss:00407164 dword_407164    dd ?                    ; DATA XREF: .text:00404842↑r
.bss:00407164                                         ; sub_4048D0+4E↑r
.bss:00407168 dword_407168    dd ?                    ; DATA XREF: .text:0040485F↑r
.bss:00407168                                         ; sub_4048D0+62↑r
.bss:0040716C dword_40716C    dd ?                    ; DATA XREF: .text:00404855↑r
.bss:0040716C                                         ; sub_4048D0+70↑r
.bss:00407170 dword_407170    dd ?                    ; DATA XREF: .text:00404838↑r
.bss:00407170                                         ; sub_4048D0+7A↑r
.bss:00407174                 align 10h
.bss:00407180 ; char *Str1
.bss:00407180 Str1            dd ?                    ; DATA XREF: sub_404FC4:loc_404FFD↑w
.bss:00407180                                         ; sub_404FC4:loc_405130↑r
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_404FC4+2D↑r
.bss:00407190                                         ; sub_404FC4+3F↑w
.bss:00407194                 align 10h
.bss:004071A0 dword_4071A0    dd ?                    ; DATA XREF: sub_401730+2F↑w
.bss:004071A0                                         ; sub_401730+DE↑r ...
.bss:004071A4                 align 20h
.bss:004071C0 dword_4071C0    dd ?                    ; DATA XREF: sub_402C80+71↑w
.bss:004071C0                                         ; .text:00402D81↑w
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; CODE XREF: sub_404FC4+63↑p
.bss:004071D0                                         ; DATA XREF: sub_404EC0+1E↑r ...
.bss:004071D4                 align 10h
.bss:004071E0 dword_4071E0    dd ?                    ; DATA XREF: sub_404EC0+4E↑w
.bss:004071E0                                         ; sub_404FC4+AB↑w
.bss:004071E4                 db    ? ;
.bss:004071E5                 db    ? ;
.bss:004071E6                 db    ? ;
.bss:004071E7                 db    ? ;
.bss:004071E8                 db    ? ;
.bss:004071E9                 db    ? ;
.bss:004071EA                 db    ? ;
.bss:004071EB                 db    ? ;
.bss:004071EC                 db    ? ;
.bss:004071ED                 db    ? ;
.bss:004071EE                 db    ? ;
.bss:004071EF                 db    ? ;
.bss:004071F0                 db    ? ;
.bss:004071F1                 db    ? ;
.bss:004071F2                 db    ? ;
.bss:004071F3                 db    ? ;
.bss:004071F4                 db    ? ;
.bss:004071F5                 db    ? ;
.bss:004071F6                 db    ? ;
.bss:004071F7                 db    ? ;
.bss:004071F8                 db    ? ;
.bss:004071F9                 db    ? ;
.bss:004071FA                 db    ? ;
.bss:004071FB                 db    ? ;
.bss:004071FC                 db    ? ;
.bss:004071FD                 db    ? ;
.bss:004071FE                 db    ? ;
.bss:004071FF                 db    ? ;
.bss:00407200                 db    ? ;
.bss:00407201                 db    ? ;
.bss:00407202                 db    ? ;
.bss:00407203                 db    ? ;
.bss:00407204                 db    ? ;
.bss:00407205                 db    ? ;
.bss:00407206                 db    ? ;
.bss:00407207                 db    ? ;
.bss:00407208                 db    ? ;
.bss:00407209                 db    ? ;
.bss:0040720A                 db    ? ;
.bss:0040720B                 db    ? ;
.bss:0040720C                 db    ? ;
.bss:0040720D                 db    ? ;
.bss:0040720E                 db    ? ;
.bss:0040720F                 db    ? ;
.bss:00407210 dword_407210    dd ?                    ; DATA XREF: sub_404FC4+13↑r
.bss:00407214                 align 1000h
.bss:00407214 _bss            ends
.bss:00407214
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 00000594 (   1428.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004E00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:0040815C ;
.idata:0040815C ; Imports from libintl3.dll
.idata:0040815C ;
.idata:0040815C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040815C                                         ; CODE XREF: sub_401730+49↑p
.idata:0040815C                                         ; DATA XREF: sub_401730+49↑r ...
.idata:00408160                 extrn libintl_gettext:dword
.idata:00408160                                         ; CODE XREF: sub_401730+D2↑p
.idata:00408160                                         ; sub_401A30+16↑p ...
.idata:00408164                 extrn libintl_textdomain:dword
.idata:00408164                                         ; CODE XREF: sub_401730+56↑p
.idata:00408164                                         ; DATA XREF: sub_401730+56↑r ...
.idata:00408168
.idata:00408170 ;
.idata:00408170 ; Imports from KERNEL32.dll
.idata:00408170 ;
.idata:00408170 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408170                 extrn __imp_ExitProcess:dword
.idata:00408170                                         ; DATA XREF: ExitProcess↑r
.idata:00408174 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408174                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408174                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408178
.idata:00408180 ;
.idata:00408180 ; Imports from msvcrt.dll
.idata:00408180 ;
.idata:00408180 ; int (__cdecl *_isatty)(int FileHandle)
.idata:00408180                 extrn __imp__isatty:dword
.idata:00408180                                         ; DATA XREF: _isatty↑r
.idata:00408184
.idata:0040818C ;
.idata:0040818C ; Imports from MSVCP60.DLL
.idata:0040818C ;
.idata:0040818C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040818C                 extrn __imp_mbrtowc:dword
.idata:0040818C                                         ; DATA XREF: mbrtowc↑r
.idata:00408190
.idata:00408198 ;
.idata:00408198 ; Imports from msvcrt.dll
.idata:00408198 ;
.idata:00408198                 extrn __imp___getmainargs:dword
.idata:00408198                                         ; DATA XREF: __getmainargs↑r
.idata:0040819C ; int _mb_cur_max
.idata:0040819C                 extrn __mb_cur_max:dword
.idata:0040819C                                         ; DATA XREF: sub_403830+7↑r
.idata:0040819C                                         ; sub_403830+5F3↑r
.idata:004081A0 ; char ***(__cdecl *__p__environ)()
.idata:004081A0                 extrn __imp___p__environ:dword
.idata:004081A0                                         ; DATA XREF: __p__environ↑r
.idata:004081A4 ; int *(__cdecl *__p__fmode)()
.idata:004081A4                 extrn __imp___p__fmode:dword
.idata:004081A4                                         ; DATA XREF: __p__fmode↑r
.idata:004081A8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081A8                 extrn __set_app_type:dword
.idata:004081A8                                         ; CODE XREF: start+D↑p
.idata:004081A8                                         ; .text:0040102D↑p
.idata:004081A8                                         ; DATA XREF: ...
.idata:004081AC ; void (__cdecl *_cexit)()
.idata:004081AC                 extrn __imp__cexit:dword
.idata:004081AC                                         ; DATA XREF: _cexit↑r
.idata:004081B0 ; int *(__cdecl *_errno)()
.idata:004081B0                 extrn __imp__errno:dword
.idata:004081B0                                         ; DATA XREF: _errno↑r
.idata:004081B4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081B4                 extrn __imp__flsbuf:dword
.idata:004081B4                                         ; DATA XREF: _flsbuf↑r
.idata:004081B8 ; FILE iob[]
.idata:004081B8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081B8                                         ; sub_401080+75↑r ...
.idata:004081BC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081BC                 extrn __imp__isctype:dword
.idata:004081BC                                         ; DATA XREF: _isctype↑r
.idata:004081C0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081C0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081C0                                         ; DATA XREF: .text:0040106C↑r
.idata:004081C4 ; const unsigned __int16 *pctype
.idata:004081C4                 extrn _pctype:dword     ; DATA XREF: sub_403830:loc_403F24↑r
.idata:004081C8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081C8                 extrn __imp__setmode:dword
.idata:004081C8                                         ; DATA XREF: _setmode↑r
.idata:004081CC ; void (__cdecl __noreturn *abort)()
.idata:004081CC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081D0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081D0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081D0                                         ; DATA XREF: sub_401040+C↑r
.idata:004081D4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081D4                 extrn __imp_calloc:dword
.idata:004081D4                                         ; DATA XREF: calloc↑r
.idata:004081D8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081D8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081DC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081DC                 extrn __imp_fclose:dword
.idata:004081DC                                         ; DATA XREF: fclose↑r
.idata:004081E0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081E0                 extrn __imp_fflush:dword
.idata:004081E0                                         ; DATA XREF: fflush↑r
.idata:004081E4 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004081E4                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004081E8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081E8                 extrn __imp_fprintf:dword
.idata:004081E8                                         ; DATA XREF: fprintf↑r
.idata:004081EC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081EC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081F0 ; size_t (__cdecl *fread)(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:004081F0                 extrn __imp_fread:dword ; DATA XREF: fread↑r
.idata:004081F4 ; void (__cdecl *free)(void *Block)
.idata:004081F4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081F8 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081F8                 extrn __imp_getenv:dword
.idata:004081F8                                         ; DATA XREF: getenv↑r
.idata:004081FC ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081FC                 extrn __imp_iswctype:dword
.idata:004081FC                                         ; DATA XREF: iswctype↑r
.idata:00408200 ; void *(__cdecl *malloc)(size_t Size)
.idata:00408200                 extrn __imp_malloc:dword
.idata:00408200                                         ; DATA XREF: malloc↑r
.idata:00408204 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408204                 extrn __imp_memcpy:dword
.idata:00408204                                         ; DATA XREF: memcpy↑r
.idata:00408208 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408208                 extrn __imp_memset:dword
.idata:00408208                                         ; DATA XREF: memset↑r
.idata:0040820C ; int (*printf)(const char *const Format, ...)
.idata:0040820C                 extrn __imp_printf:dword
.idata:0040820C                                         ; DATA XREF: printf↑r
.idata:00408210 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408210                 extrn __imp_realloc:dword
.idata:00408210                                         ; DATA XREF: realloc↑r
.idata:00408214 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408214                 extrn __imp_setlocale:dword
.idata:00408214                                         ; DATA XREF: setlocale↑r
.idata:00408218 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408218                 extrn __imp_signal:dword
.idata:00408218                                         ; DATA XREF: signal↑r
.idata:0040821C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040821C                 extrn __imp_strchr:dword
.idata:0040821C                                         ; DATA XREF: strchr↑r
.idata:00408220 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408220                 extrn __imp_strcmp:dword
.idata:00408220                                         ; DATA XREF: strcmp↑r
.idata:00408224 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408224                 extrn __imp_strerror:dword
.idata:00408224                                         ; DATA XREF: strerror↑r
.idata:00408228 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408228                 extrn __imp_strlen:dword
.idata:00408228                                         ; DATA XREF: strlen↑r
.idata:0040822C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040822C                 extrn __imp_strncmp:dword
.idata:0040822C                                         ; DATA XREF: strncmp↑r
.idata:00408230 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408230                 extrn __imp_vfprintf:dword
.idata:00408230                                         ; DATA XREF: vfprintf↑r
.idata:00408234
.idata:00408234
.idata:00408234
.idata:00408234                 end start
