.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 680329E37F7237ACE0DE136AD0A6C959E4C209AFD289A3E0D9175A222A0515E3
.text:00401000 ; Input MD5    : 2B50B2ED68B7D56A8841BDF5BA30D160
.text:00401000 ; Input CRC32  : D1B96DAC
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/kill.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26B (Wed Apr 20 18:41:47 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00005400 (  21504.)
.text:00401000 ; Section size in file          : 00005400 (  21504.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4018B0+6F↓p
.text:00401040                                         ; .text:00405A90↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405A30
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_407000
.text:004010A2                 mov     edx, dword_4070D0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_407004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4070F0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4070F0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405A00
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_407000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_407004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4018B0
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
.text:00401174                 call    ExitProcess
.text:00401174 sub_401080      endp
.text:00401174
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405A30
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char a0123456789ABCD[]
.text:00401280 a0123456789ABCD db '0::1::2::3::4::5::6::7::8::9::A::B::C::D::E::F::G::H::I::J::K::L:'
.text:00401280                                         ; DATA XREF: sub_4018B0+93↓o
.text:00401280                 db ':M::N::O::P::Q::R::S::T::U::V::W::X::Y::Z::ln:s:t',0
.text:004012F3 aList           db 'list',0             ; DATA XREF: .text:off_401320↓o
.text:004012F8 aSignal         db 'signal',0           ; DATA XREF: .text:00401330↓o
.text:004012FF aTable          db 'table',0            ; DATA XREF: .text:00401340↓o
.text:00401305 aHelp           db 'help',0             ; DATA XREF: .text:00401350↓o
.text:0040130A aVersion        db 'version',0          ; DATA XREF: .text:00401360↓o
.text:00401312                 align 10h
.text:00401320 off_401320      dd offset aList         ; DATA XREF: sub_4018B0+8B↓o
.text:00401320                                         ; "list"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 6Ch
.text:00401330                 dd offset aSignal       ; "signal"
.text:00401334                 dd 1, 0
.text:0040133C                 dd 73h
.text:00401340                 dd offset aTable        ; "table"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 74h
.text:00401350                 dd offset aHelp         ; "help"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 0FFFFFF7Eh
.text:00401360                 dd offset aVersion      ; "version"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401380 ; const char Locale
.text:00401380 Locale          db 0                    ; DATA XREF: sub_4018B0+32↓o
.text:00401381                 align 20h
.text:004013A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013A0                                         ; DATA XREF: sub_4018B0+46↓o
.text:004013C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4018B0+4E↓o
.text:004013C3                                         ; sub_4018B0+5B↓o
.text:004013CD                 align 20h
.text:004013E0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013E0                                         ; DATA XREF: sub_4018B0:loc_4019F0↓o
.text:004013E0                                         ; .text:00401DEC↓o
.text:00401407                 align 20h
.text:00401420 aSMultipleSigna db '%s: multiple signals specified',0
.text:00401420                                         ; DATA XREF: sub_4018B0:loc_401A28↓o
.text:0040143F aInvalidOptionC db 'invalid option -- %c',0
.text:0040143F                                         ; DATA XREF: sub_4018B0:loc_401A59↓o
.text:00401454 aSInvalidProces db '%s: invalid process id',0
.text:00401454                                         ; DATA XREF: sub_4018B0:loc_401B4C↓o
.text:0040146B aS              db '%s',0               ; DATA XREF: sub_4018B0+303↓o
.text:0040146E aNoProcessIdSpe db 'no process ID specified',0
.text:0040146E                                         ; DATA XREF: sub_4018B0:loc_401BCA↓o
.text:00401486                 align 20h
.text:004014A0 aCannotCombineS db 'cannot combine signal with -l or -t',0
.text:004014A0                                         ; DATA XREF: sub_4018B0:loc_401BF4↓o
.text:004014C4 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: sub_4018B0+386↓o
.text:004014D0 a530            db '5.3.0',0            ; DATA XREF: sub_4018B0+38E↓o
.text:004014D6 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4018B0+399↓o
.text:004014E4 ; const FILE stru_4014E4
.text:004014E4 stru_4014E4     FILE <6C6C696Bh, 90909000h, 90909090h, 90909090h, 90909090h, \
.text:004014E4                                         ; DATA XREF: sub_4018B0+3A1↓o
.text:004014E4                       90909090h, 90909090h, 67617355h>
.text:00401504                 db  65h ; e
.text:00401505                 db  3Ah ; :
.text:00401506                 db  20h
.text:00401507                 db  25h ; %
.text:00401508                 db  73h ; s
.text:00401509                 db  20h
.text:0040150A                 db  5Bh ; [
.text:0040150B                 db  2Dh ; -
.text:0040150C                 db  73h ; s
.text:0040150D                 db  20h
.text:0040150E                 db  53h ; S
.text:0040150F                 db  49h ; I
.text:00401510                 db  47h ; G
.text:00401511                 db  4Eh ; N
.text:00401512                 db  41h ; A
.text:00401513                 db  4Ch ; L
.text:00401514                 db  20h
.text:00401515                 db  7Ch ; |
.text:00401516                 db  20h
.text:00401517                 db  2Dh ; -
.text:00401518                 db  53h ; S
.text:00401519                 db  49h ; I
.text:0040151A                 db  47h ; G
.text:0040151B                 db  4Eh ; N
.text:0040151C                 db  41h ; A
.text:0040151D                 db  4Ch ; L
.text:0040151E                 db  5Dh ; ]
.text:0040151F                 db  20h
.text:00401520                 db  50h ; P
.text:00401521                 db  49h ; I
.text:00401522                 db  44h ; D
.text:00401523                 db  2Eh ; .
.text:00401524                 db  2Eh ; .
.text:00401525                 db  2Eh ; .
.text:00401526                 db  0Ah
.text:00401527                 db  20h
.text:00401528                 db  20h
.text:00401529                 db  6Fh ; o
.text:0040152A                 db  72h ; r
.text:0040152B                 db  3Ah ; :
.text:0040152C                 db  20h
.text:0040152D                 db  20h
.text:0040152E                 db  25h ; %
.text:0040152F                 db  73h ; s
.text:00401530                 db  20h
.text:00401531                 db  2Dh ; -
.text:00401532                 db  6Ch ; l
.text:00401533                 db  20h
.text:00401534                 db  5Bh ; [
.text:00401535                 db  53h ; S
.text:00401536                 db  49h ; I
.text:00401537                 db  47h ; G
.text:00401538                 db  4Eh ; N
.text:00401539                 db  41h ; A
.text:0040153A                 db  4Ch ; L
.text:0040153B                 db  5Dh ; ]
.text:0040153C                 db  2Eh ; .
.text:0040153D                 db  2Eh ; .
.text:0040153E                 db  2Eh ; .
.text:0040153F                 db  0Ah
.text:00401540                 db  20h
.text:00401541                 db  20h
.text:00401542                 db  6Fh ; o
.text:00401543                 db  72h ; r
.text:00401544                 db  3Ah ; :
.text:00401545                 db  20h
.text:00401546                 db  20h
.text:00401547                 db  25h ; %
.text:00401548                 db  73h ; s
.text:00401549                 db  20h
.text:0040154A                 db  2Dh ; -
.text:0040154B                 db  74h ; t
.text:0040154C                 db  20h
.text:0040154D                 db  5Bh ; [
.text:0040154E                 db  53h ; S
.text:0040154F                 db  49h ; I
.text:00401550                 db  47h ; G
.text:00401551                 db  4Eh ; N
.text:00401552                 db  41h ; A
.text:00401553                 db  4Ch ; L
.text:00401554                 db  5Dh ; ]
.text:00401555                 db  2Eh ; .
.text:00401556                 db  2Eh ; .
.text:00401557                 db  2Eh ; .
.text:00401558                 db  0Ah
.text:00401559                 db    0
.text:0040155A                 align 10h
.text:00401560 aSendSignalsToP db 'Send signals to processes, or list signals.',0Ah
.text:00401560                                         ; DATA XREF: sub_4018B0+3E4↓o
.text:00401560                                         ; .text:00401E47↓o
.text:00401560                 db 0Ah,0
.text:0040158E                 align 20h
.text:004015A0 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:004015A0                                         ; DATA XREF: sub_4018B0+406↓o
.text:004015A0                                         ; .text:00401E69↓o
.text:004015A0                 db 'ns too.',0Ah,0
.text:004015EA                 align 20h
.text:00401600 aSSignalSignalS db '  -s, --signal=SIGNAL, -SIGNAL',0Ah
.text:00401600                                         ; DATA XREF: sub_4018B0+428↓o
.text:00401600                                         ; .text:00401E8B↓o
.text:00401600                 db '                   specify the name or number of the signal to be'
.text:00401600                 db ' sent',0Ah
.text:00401600                 db '  -l, --list       list signal names, or convert signal names to/'
.text:00401600                 db 'from numbers',0Ah
.text:00401600                 db '  -t, --table      print a table of signal information',0Ah,0
.text:004016EC                 align 20h
.text:00401700 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401700                                         ; DATA XREF: sub_4018B0+44A↓o
.text:00401700                                         ; .text:00401EAD↓o
.text:0040172D                 align 20h
.text:00401740 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401740                                         ; DATA XREF: sub_4018B0+46C↓o
.text:00401740                                         ; .text:00401ECF↓o
.text:00401776                 align 10h
.text:00401780 aSignalMayBeASi db 0Ah                  ; DATA XREF: sub_4018B0+48E↓o
.text:00401780                                         ; .text:00401EF1↓o
.text:00401780                 db 'SIGNAL may be a signal name like `HUP',27h,', or a signal number '
.text:00401780                 db 'like `1',27h,',',0Ah
.text:00401780                 db 'or an exit status of a process terminated by a signal.',0Ah
.text:00401780                 db 'PID is an integer; if negative it identifies a process group.',0Ah
.text:00401780                 db 0
.text:0040183C aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4018B0+4B0↓o
.text:0040183C                                         ; .text:00401F13↓o
.text:0040183C                 db 'Report bugs to <%s>.',0Ah,0
.text:00401853 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401853                                         ; DATA XREF: sub_4018B0+4BD↓o
.text:00401853                                         ; .text:00401F20↓o
.text:00401869                 align 20h
.text:00401880 aMultipleLOrTOp db 'multiple -l or -t options specified',0
.text:00401880                                         ; DATA XREF: sub_4018B0:loc_401DB6↓o
.text:004018A4                 align 10h
.text:004018B0
.text:004018B0 ; =============== S U B R O U T I N E =======================================
.text:004018B0
.text:004018B0 ; Attributes: bp-based frame fuzzy-sp
.text:004018B0
.text:004018B0 sub_4018B0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004018B0
.text:004018B0 Category        = dword ptr -78h
.text:004018B0 Locale          = dword ptr -74h
.text:004018B0 var_70          = dword ptr -70h
.text:004018B0 var_6C          = byte ptr -6Ch
.text:004018B0 var_68          = byte ptr -68h
.text:004018B0 var_64          = dword ptr -64h
.text:004018B0 String          = dword ptr -50h
.text:004018B0 var_4C          = dword ptr -4Ch
.text:004018B0 var_48          = dword ptr -48h
.text:004018B0 var_44          = dword ptr -44h
.text:004018B0 var_3E          = byte ptr -3Eh
.text:004018B0 var_3D          = byte ptr -3Dh
.text:004018B0 EndPtr          = dword ptr -3Ch
.text:004018B0 var_38          = dword ptr -38h
.text:004018B0 arg_0           = dword ptr  8
.text:004018B0 arg_4           = dword ptr  0Ch
.text:004018B0
.text:004018B0                 push    ebp
.text:004018B1                 xor     eax, eax
.text:004018B3                 mov     ebp, esp
.text:004018B5                 push    edi
.text:004018B6                 push    esi
.text:004018B7                 push    ebx
.text:004018B8                 sub     esp, 6Ch
.text:004018BB                 mov     edi, [ebp+arg_4]
.text:004018BE                 and     esp, 0FFFFFFF0h
.text:004018C1                 call    __alloca
.text:004018C6                 call    sub_405AD0
.text:004018CB                 mov     [ebp+var_3D], 0
.text:004018CF                 mov     edx, [edi]
.text:004018D1                 mov     [ebp+var_3E], 0
.text:004018D5                 mov     [ebp+var_44], 0FFFFFFFFh
.text:004018DC                 mov     ds:dword_408190, edx
.text:004018E2                 mov     [esp+78h+Locale], offset Locale ; Locale
.text:004018EA                 mov     [esp+78h+Category], 0 ; Category
.text:004018F1                 call    setlocale
.text:004018F6                 mov     [esp+78h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004018FE                 mov     [esp+78h+Category], offset aCoreutils ; "coreutils"
.text:00401905                 call    ds:__imp_libintl_bindtextdomain
.text:0040190B                 mov     [esp+78h+Category], offset aCoreutils ; "coreutils"
.text:00401912                 call    ds:libintl_textdomain
.text:00401918                 mov     [esp+78h+Category], offset sub_403970 ; void (__cdecl *)()
.text:0040191F                 call    sub_401040
.text:00401924                 lea     esi, [esi+0]
.text:0040192A                 lea     edi, [edi+0]
.text:00401930
.text:00401930 loc_401930:                             ; CODE XREF: sub_4018B0+13A↓j
.text:00401930                                         ; sub_4018B0+501↓j
.text:00401930                 mov     dword ptr [esp+78h+var_68], 0 ; int
.text:00401938                 mov     ecx, [ebp+arg_0]
.text:0040193B                 mov     dword ptr [esp+78h+var_6C], offset off_401320 ; char
.text:00401943                 mov     [esp+78h+var_70], offset a0123456789ABCD ; "0::1::2::3::4::5::6::7::8::9::A::B::C::"...
.text:0040194B                 mov     [esp+78h+Locale], edi ; int
.text:0040194F                 mov     [esp+78h+Category], ecx ; int
.text:00401952                 call    sub_403800
.text:00401957                 cmp     eax, 0FFFFFFFFh
.text:0040195A                 mov     ebx, eax
.text:0040195C                 jz      loc_401A9C
.text:00401962                 cmp     ebx, 5Ah ; 'Z'
.text:00401965                 jg      loc_401D90
.text:0040196B                 cmp     ebx, 41h ; 'A'
.text:0040196E                 jge     loc_401D82
.text:00401974                 cmp     ebx, 0FFFFFF7Eh
.text:0040197A                 jz      loc_401C6D
.text:00401980                 cmp     ebx, 0FFFFFF7Eh
.text:00401986                 jle     loc_401C1C
.text:0040198C                 lea     edx, [ebx-30h]
.text:0040198F                 cmp     edx, 9
.text:00401992                 ja      short loc_4019F0
.text:00401994                 mov     esi, dword_407010
.text:0040199A                 cmp     esi, 2
.text:0040199D                 jnz     loc_401A95
.text:004019A3
.text:004019A3 loc_4019A3:                             ; CODE XREF: sub_4018B0+4D8↓j
.text:004019A3                 mov     edx, ds:dword_4081B0
.text:004019A9                 test    edx, edx
.text:004019AB                 jz      loc_401A70
.text:004019B1
.text:004019B1 loc_4019B1:                             ; CODE XREF: sub_4018B0+1E0↓j
.text:004019B1                 mov     ecx, [edi+esi*4-4]
.text:004019B5                 lea     esi, [ecx+2]
.text:004019B8                 cmp     edx, esi
.text:004019BA                 jnz     loc_401A59
.text:004019C0                 lea     ebx, [ecx+1]
.text:004019C3                 mov     ds:dword_4081B0, ebx
.text:004019C9
.text:004019C9 loc_4019C9:                             ; CODE XREF: sub_4018B0+4E3↓j
.text:004019C9                                         ; sub_4018B0+515↓j
.text:004019C9                 mov     eax, [ebp+var_44]
.text:004019CC                 test    eax, eax
.text:004019CE                 jns     short loc_401A28
.text:004019D0                 mov     edx, ds:dword_4081B0
.text:004019D6                 lea     ecx, [ebp+var_38]
.text:004019D9                 mov     [esp+78h+Locale], ecx ; int
.text:004019DD                 mov     [esp+78h+Category], edx ; char *
.text:004019E0                 call    sub_401F70
.text:004019E5                 mov     [ebp+var_44], eax
.text:004019E8                 test    eax, eax
.text:004019EA                 jns     loc_401930
.text:004019F0
.text:004019F0 loc_4019F0:                             ; CODE XREF: sub_4018B0+E2↑j
.text:004019F0                                         ; sub_4018B0+1A7↓j ...
.text:004019F0                 mov     [esp+78h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004019F7                 call    ds:libintl_gettext
.text:004019FD                 mov     ebx, ds:_iob
.text:00401A03                 mov     edi, ds:dword_408190
.text:00401A09                 add     ebx, 40h ; '@'
.text:00401A0C                 mov     [esp+78h+var_70], edi
.text:00401A10                 mov     [esp+78h+Locale], eax ; Format
.text:00401A14                 mov     [esp+78h+Category], ebx ; Stream
.text:00401A17                 call    fprintf
.text:00401A1C                 mov     [esp+78h+Category], 1 ; Code
.text:00401A23
.text:00401A23 loc_401A23:                             ; CODE XREF: sub_4018B0+3B8↓j
.text:00401A23                 call    exit
.text:00401A28 ; ---------------------------------------------------------------------------
.text:00401A28
.text:00401A28 loc_401A28:                             ; CODE XREF: sub_4018B0+11E↑j
.text:00401A28                 mov     [esp+78h+Category], offset aSMultipleSigna ; "%s: multiple signals specified"
.text:00401A2F                 call    ds:libintl_gettext
.text:00401A35                 mov     edi, ds:dword_4081B0
.text:00401A3B                 mov     dword ptr [esp+78h+var_6C], edi ; char
.text:00401A3F
.text:00401A3F loc_401A3F:                             ; CODE XREF: sub_4018B0+1BA↓j
.text:00401A3F                 mov     [esp+78h+var_70], eax ; char *
.text:00401A43                 mov     [esp+78h+Locale], 0 ; ErrorMessage
.text:00401A4B                 mov     [esp+78h+Category], 0 ; Code
.text:00401A52                 call    sub_405370
.text:00401A57                 jmp     short loc_4019F0
.text:00401A59 ; ---------------------------------------------------------------------------
.text:00401A59
.text:00401A59 loc_401A59:                             ; CODE XREF: sub_4018B0+10A↑j
.text:00401A59                 mov     [esp+78h+Category], offset aInvalidOptionC ; "invalid option -- %c"
.text:00401A60                 call    ds:libintl_gettext
.text:00401A66                 mov     dword ptr [esp+78h+var_6C], ebx
.text:00401A6A                 jmp     short loc_401A3F
.text:00401A6A ; ---------------------------------------------------------------------------
.text:00401A6C                 align 10h
.text:00401A70
.text:00401A70 loc_401A70:                             ; CODE XREF: sub_4018B0+FB↑j
.text:00401A70                 mov     ecx, [edi+esi*4-4]
.text:00401A74                 mov     [esp+78h+Category], ecx ; Str
.text:00401A77                 call    strlen
.text:00401A7C                 mov     edx, eax
.text:00401A7E                 mov     eax, [edi+esi*4-4]
.text:00401A82                 mov     esi, dword_407010
.text:00401A88                 add     edx, eax
.text:00401A8A                 mov     ds:dword_4081B0, edx
.text:00401A90                 jmp     loc_4019B1
.text:00401A95 ; ---------------------------------------------------------------------------
.text:00401A95
.text:00401A95 loc_401A95:                             ; CODE XREF: sub_4018B0+ED↑j
.text:00401A95                 dec     esi
.text:00401A96                 mov     dword_407010, esi
.text:00401A9C
.text:00401A9C loc_401A9C:                             ; CODE XREF: sub_4018B0+AC↑j
.text:00401A9C                 mov     esi, [ebp+var_44]
.text:00401A9F                 test    esi, esi
.text:00401AA1                 js      loc_401C00
.text:00401AA7                 cmp     [ebp+var_3D], 0
.text:00401AAB                 jnz     loc_401BF4
.text:00401AB1
.text:00401AB1 loc_401AB1:                             ; CODE XREF: sub_4018B0+35B↓j
.text:00401AB1                 mov     eax, dword_407010
.text:00401AB6                 cmp     [ebp+arg_0], eax
.text:00401AB9                 mov     esi, eax
.text:00401ABB                 jle     loc_401BCA
.text:00401AC1                 cmp     [ebp+var_3D], 0
.text:00401AC5                 jz      short loc_401AED
.text:00401AC7
.text:00401AC7 loc_401AC7:                             ; CODE XREF: sub_4018B0+367↓j
.text:00401AC7                 movzx   edx, [ebp+var_3E]
.text:00401ACB                 xor     ebx, ebx
.text:00401ACD                 lea     ecx, [edi+esi*4]
.text:00401AD0                 cmp     esi, [ebp+arg_0]
.text:00401AD3                 mov     [esp+78h+Category], edx
.text:00401AD6                 setnl   bl
.text:00401AD9                 dec     ebx
.text:00401ADA                 and     ecx, ebx
.text:00401ADC                 mov     [esp+78h+Locale], ecx
.text:00401AE0                 call    sub_4020F0
.text:00401AE5
.text:00401AE5 loc_401AE5:                             ; CODE XREF: sub_4018B0+2E6↓j
.text:00401AE5                 lea     esp, [ebp-0Ch]
.text:00401AE8                 pop     ebx
.text:00401AE9                 pop     esi
.text:00401AEA                 pop     edi
.text:00401AEB                 pop     ebp
.text:00401AEC                 retn
.text:00401AED ; ---------------------------------------------------------------------------
.text:00401AED
.text:00401AED loc_401AED:                             ; CODE XREF: sub_4018B0+215↑j
.text:00401AED                 mov     [ebp+var_4C], 0
.text:00401AF4                 lea     edx, [edi+eax*4]
.text:00401AF7                 mov     esi, [edx]
.text:00401AF9                 mov     [ebp+var_48], edx
.text:00401AFC                 mov     [ebp+String], esi
.text:00401AFF
.text:00401AFF loc_401AFF:                             ; CODE XREF: sub_4018B0+2DD↓j
.text:00401AFF                 call    _errno
.text:00401B04                 mov     dword ptr [eax], 0
.text:00401B0A                 lea     edi, [ebp+EndPtr]
.text:00401B0D                 mov     eax, [ebp+String]
.text:00401B10                 mov     [esp+78h+var_70], 0Ah ; Radix
.text:00401B18                 mov     [esp+78h+Locale], edi ; EndPtr
.text:00401B1C                 mov     [esp+78h+Category], eax ; String
.text:00401B1F                 call    _strtoll
.text:00401B24                 mov     ebx, eax
.text:00401B26                 mov     esi, edx
.text:00401B28                 call    _errno
.text:00401B2D                 cmp     dword ptr [eax], 22h ; '"'
.text:00401B30                 jz      short loc_401B4C
.text:00401B32                 mov     eax, ebx
.text:00401B34                 cdq
.text:00401B35                 mov     edi, edx
.text:00401B37                 xor     edi, esi
.text:00401B39                 xor     eax, ebx
.text:00401B3B                 or      edi, eax
.text:00401B3D                 jnz     short loc_401B4C
.text:00401B3F                 mov     eax, [ebp+EndPtr]
.text:00401B42                 cmp     [ebp+String], eax
.text:00401B45                 jz      short loc_401B4C
.text:00401B47                 cmp     byte ptr [eax], 0
.text:00401B4A                 jz      short loc_401B9B
.text:00401B4C
.text:00401B4C loc_401B4C:                             ; CODE XREF: sub_4018B0+280↑j
.text:00401B4C                                         ; sub_4018B0+28D↑j ...
.text:00401B4C                 mov     [esp+78h+Category], offset aSInvalidProces ; "%s: invalid process id"
.text:00401B53                 call    ds:libintl_gettext
.text:00401B59                 mov     [esp+78h+Locale], 0 ; ErrorMessage
.text:00401B61                 mov     ecx, [ebp+String]
.text:00401B64                 mov     [esp+78h+var_70], eax ; char *
.text:00401B68                 mov     dword ptr [esp+78h+var_6C], ecx ; char
.text:00401B6C
.text:00401B6C loc_401B6C:                             ; CODE XREF: sub_4018B0+318↓j
.text:00401B6C                 mov     [esp+78h+Category], 0 ; Code
.text:00401B73                 call    sub_405370
.text:00401B78                 mov     [ebp+var_4C], 1
.text:00401B7F
.text:00401B7F loc_401B7F:                             ; CODE XREF: sub_4018B0+2FC↓j
.text:00401B7F                 add     [ebp+var_48], 4
.text:00401B83                 mov     ecx, [ebp+var_48]
.text:00401B86                 mov     edx, [ecx]
.text:00401B88                 mov     [ebp+String], edx
.text:00401B8B                 test    edx, edx
.text:00401B8D                 jnz     loc_401AFF
.text:00401B93                 mov     eax, [ebp+var_4C]
.text:00401B96                 jmp     loc_401AE5
.text:00401B9B ; ---------------------------------------------------------------------------
.text:00401B9B
.text:00401B9B loc_401B9B:                             ; CODE XREF: sub_4018B0+29A↑j
.text:00401B9B                 mov     [esp+78h+Category], ebx ; DWORD
.text:00401B9E                 mov     esi, [ebp+var_44]
.text:00401BA1                 mov     [esp+78h+Locale], esi ; int
.text:00401BA5                 call    sub_405610
.text:00401BAA                 test    eax, eax
.text:00401BAC                 jz      short loc_401B7F
.text:00401BAE                 call    _errno
.text:00401BB3                 mov     [esp+78h+var_70], offset aS ; "%s"
.text:00401BBB                 mov     edi, [ebp+String]
.text:00401BBE                 mov     dword ptr [esp+78h+var_6C], edi
.text:00401BC2                 mov     ebx, [eax]
.text:00401BC4                 mov     [esp+78h+Locale], ebx
.text:00401BC8                 jmp     short loc_401B6C
.text:00401BCA ; ---------------------------------------------------------------------------
.text:00401BCA
.text:00401BCA loc_401BCA:                             ; CODE XREF: sub_4018B0+20B↑j
.text:00401BCA                 mov     [esp+78h+Category], offset aNoProcessIdSpe ; "no process ID specified"
.text:00401BD1
.text:00401BD1 loc_401BD1:                             ; CODE XREF: sub_4018B0+34B↓j
.text:00401BD1                                         ; sub_4018B0+50D↓j
.text:00401BD1                 call    ds:libintl_gettext
.text:00401BD7                 mov     [esp+78h+Locale], 0 ; ErrorMessage
.text:00401BDF                 mov     [esp+78h+Category], 0 ; Code
.text:00401BE6                 mov     [esp+78h+var_70], eax ; char *
.text:00401BEA                 call    sub_405370
.text:00401BEF                 jmp     loc_4019F0
.text:00401BF4 ; ---------------------------------------------------------------------------
.text:00401BF4
.text:00401BF4 loc_401BF4:                             ; CODE XREF: sub_4018B0+1FB↑j
.text:00401BF4                 mov     [esp+78h+Category], offset aCannotCombineS ; "cannot combine signal with -l or -t"
.text:00401BFB                 jmp     short loc_401BD1
.text:00401BFB ; ---------------------------------------------------------------------------
.text:00401BFD                 align 10h
.text:00401C00
.text:00401C00 loc_401C00:                             ; CODE XREF: sub_4018B0+1F1↑j
.text:00401C00                 cmp     [ebp+var_3D], 0
.text:00401C04                 mov     [ebp+var_44], 0Fh
.text:00401C0B                 jz      loc_401AB1
.text:00401C11                 mov     esi, dword_407010
.text:00401C17                 jmp     loc_401AC7
.text:00401C1C ; ---------------------------------------------------------------------------
.text:00401C1C
.text:00401C1C loc_401C1C:                             ; CODE XREF: sub_4018B0+D6↑j
.text:00401C1C                 cmp     ebx, 0FFFFFF7Dh
.text:00401C22                 jnz     loc_4019F0
.text:00401C28                 mov     [esp+78h+var_64], 0
.text:00401C30                 mov     edx, ds:_iob
.text:00401C36                 mov     dword ptr [esp+78h+var_68], offset aPaulEggert ; "Paul Eggert"
.text:00401C3E                 mov     dword ptr [esp+78h+var_6C], offset a530 ; "5.3.0"
.text:00401C46                 add     edx, 20h ; ' '
.text:00401C49                 mov     [esp+78h+var_70], offset aGnuCoreutils ; "GNU coreutils"
.text:00401C51                 mov     [esp+78h+Locale], offset stru_4014E4 ; FILE *
.text:00401C59                 mov     [esp+78h+Category], edx ; FILE *
.text:00401C5C                 call    sub_4037C0
.text:00401C61
.text:00401C61 loc_401C61:                             ; CODE XREF: sub_4018B0+4CD↓j
.text:00401C61                 mov     [esp+78h+Category], 0
.text:00401C68                 jmp     loc_401A23
.text:00401C6D ; ---------------------------------------------------------------------------
.text:00401C6D
.text:00401C6D loc_401C6D:                             ; CODE XREF: sub_4018B0+CA↑j
.text:00401C6D                 mov     [esp+78h+Category], offset stru_4014E4._tmpfname
.text:00401C74                 call    ds:libintl_gettext
.text:00401C7A                 mov     edi, ds:dword_408190
.text:00401C80                 mov     [esp+78h+Category], eax ; Format
.text:00401C83                 mov     dword ptr [esp+78h+var_6C], edi
.text:00401C87                 mov     [esp+78h+var_70], edi
.text:00401C8B                 mov     [esp+78h+Locale], edi
.text:00401C8F                 call    printf
.text:00401C94                 mov     [esp+78h+Category], offset aSendSignalsToP ; "Send signals to processes, or list sign"...
.text:00401C9B                 call    ds:libintl_gettext
.text:00401CA1                 mov     ebx, ds:_iob
.text:00401CA7                 add     ebx, 20h ; ' '
.text:00401CAA                 mov     [esp+78h+Locale], ebx ; Stream
.text:00401CAE                 mov     [esp+78h+Category], eax ; Buffer
.text:00401CB1                 call    fputs
.text:00401CB6                 mov     [esp+78h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401CBD                 call    ds:libintl_gettext
.text:00401CC3                 mov     esi, ds:_iob
.text:00401CC9                 add     esi, 20h ; ' '
.text:00401CCC                 mov     [esp+78h+Locale], esi ; Stream
.text:00401CD0                 mov     [esp+78h+Category], eax ; Buffer
.text:00401CD3                 call    fputs
.text:00401CD8                 mov     [esp+78h+Category], offset aSSignalSignalS ; "  -s, --signal=SIGNAL, -SIGNAL\n       "...
.text:00401CDF                 call    ds:libintl_gettext
.text:00401CE5                 mov     ecx, ds:_iob
.text:00401CEB                 add     ecx, 20h ; ' '
.text:00401CEE                 mov     [esp+78h+Locale], ecx ; Stream
.text:00401CF2                 mov     [esp+78h+Category], eax ; Buffer
.text:00401CF5                 call    fputs
.text:00401CFA                 mov     [esp+78h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401D01                 call    ds:libintl_gettext
.text:00401D07                 mov     edi, ds:_iob
.text:00401D0D                 add     edi, 20h ; ' '
.text:00401D10                 mov     [esp+78h+Locale], edi ; Stream
.text:00401D14                 mov     [esp+78h+Category], eax ; Buffer
.text:00401D17                 call    fputs
.text:00401D1C                 mov     [esp+78h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401D23                 call    ds:libintl_gettext
.text:00401D29                 mov     ebx, ds:_iob
.text:00401D2F                 add     ebx, 20h ; ' '
.text:00401D32                 mov     [esp+78h+Locale], ebx ; Stream
.text:00401D36                 mov     [esp+78h+Category], eax ; Buffer
.text:00401D39                 call    fputs
.text:00401D3E                 mov     [esp+78h+Category], offset aSignalMayBeASi ; "\nSIGNAL may be a signal name like `HUP"...
.text:00401D45                 call    ds:libintl_gettext
.text:00401D4B                 mov     esi, ds:_iob
.text:00401D51                 add     esi, 20h ; ' '
.text:00401D54                 mov     [esp+78h+Locale], esi ; Stream
.text:00401D58                 mov     [esp+78h+Category], eax ; Buffer
.text:00401D5B                 call    fputs
.text:00401D60                 mov     [esp+78h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401D67                 call    ds:libintl_gettext
.text:00401D6D                 mov     [esp+78h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401D75                 mov     [esp+78h+Category], eax ; Format
.text:00401D78                 call    printf
.text:00401D7D                 jmp     loc_401C61
.text:00401D82 ; ---------------------------------------------------------------------------
.text:00401D82
.text:00401D82 loc_401D82:                             ; CODE XREF: sub_4018B0+BE↑j
.text:00401D82                 mov     esi, dword_407010
.text:00401D88                 jmp     loc_4019A3
.text:00401D88 ; ---------------------------------------------------------------------------
.text:00401D8D                 align 10h
.text:00401D90
.text:00401D90 loc_401D90:                             ; CODE XREF: sub_4018B0+B5↑j
.text:00401D90                 cmp     ebx, 6Eh ; 'n'
.text:00401D93                 jz      loc_4019C9
.text:00401D99                 cmp     ebx, 6Eh ; 'n'
.text:00401D9C                 jg      short loc_401DC2
.text:00401D9E                 cmp     ebx, 6Ch ; 'l'
.text:00401DA1
.text:00401DA1 loc_401DA1:                             ; CODE XREF: sub_4018B0+522↓j
.text:00401DA1                 jnz     loc_4019F0
.text:00401DA7                 cmp     [ebp+var_3D], 0
.text:00401DAB                 jnz     short loc_401DB6
.text:00401DAD                 mov     [ebp+var_3D], 1
.text:00401DB1                 jmp     loc_401930
.text:00401DB6 ; ---------------------------------------------------------------------------
.text:00401DB6
.text:00401DB6 loc_401DB6:                             ; CODE XREF: sub_4018B0+4FB↑j
.text:00401DB6                 mov     [esp+78h+Category], offset aMultipleLOrTOp ; "multiple -l or -t options specified"
.text:00401DBD                 jmp     loc_401BD1
.text:00401DC2 ; ---------------------------------------------------------------------------
.text:00401DC2
.text:00401DC2 loc_401DC2:                             ; CODE XREF: sub_4018B0+4EC↑j
.text:00401DC2                 cmp     ebx, 73h ; 's'
.text:00401DC5                 jz      loc_4019C9
.text:00401DCB                 mov     [ebp+var_3E], 1
.text:00401DCF                 cmp     ebx, 74h ; 't'
.text:00401DD2                 jmp     short loc_401DA1
.text:00401DD2 sub_4018B0      endp
.text:00401DD2
.text:00401DD2 ; ---------------------------------------------------------------------------
.text:00401DD4                 align 10h
.text:00401DE0                 push    ebx
.text:00401DE1                 sub     esp, 18h
.text:00401DE4                 mov     ebx, [esp+20h]
.text:00401DE8                 test    ebx, ebx
.text:00401DEA                 jz      short loc_401E20
.text:00401DEC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401DF3                 call    ds:libintl_gettext
.text:00401DF9                 mov     edx, ds:_iob
.text:00401DFF                 mov     ecx, ds:dword_408190
.text:00401E05                 add     edx, 40h ; '@'
.text:00401E08                 mov     [esp+8], ecx
.text:00401E0C                 mov     [esp+4], eax
.text:00401E10                 mov     [esp], edx
.text:00401E13                 call    fprintf
.text:00401E18
.text:00401E18 loc_401E18:                             ; CODE XREF: .text:00401F30↓j
.text:00401E18                 mov     [esp], ebx
.text:00401E1B                 call    exit
.text:00401E20 ; ---------------------------------------------------------------------------
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: .text:00401DEA↑j
.text:00401E20                 mov     dword ptr [esp], offset stru_4014E4._tmpfname
.text:00401E27                 call    ds:libintl_gettext
.text:00401E2D                 mov     ecx, ds:dword_408190
.text:00401E33                 mov     [esp], eax
.text:00401E36                 mov     [esp+0Ch], ecx
.text:00401E3A                 mov     [esp+8], ecx
.text:00401E3E                 mov     [esp+4], ecx
.text:00401E42                 call    printf
.text:00401E47                 mov     dword ptr [esp], offset aSendSignalsToP ; "Send signals to processes, or list sign"...
.text:00401E4E                 call    ds:libintl_gettext
.text:00401E54                 mov     ecx, ds:_iob
.text:00401E5A                 add     ecx, 20h ; ' '
.text:00401E5D                 mov     [esp+4], ecx
.text:00401E61                 mov     [esp], eax
.text:00401E64                 call    fputs
.text:00401E69                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401E70                 call    ds:libintl_gettext
.text:00401E76                 mov     ecx, ds:_iob
.text:00401E7C                 add     ecx, 20h ; ' '
.text:00401E7F                 mov     [esp+4], ecx
.text:00401E83                 mov     [esp], eax
.text:00401E86                 call    fputs
.text:00401E8B                 mov     dword ptr [esp], offset aSSignalSignalS ; "  -s, --signal=SIGNAL, -SIGNAL\n       "...
.text:00401E92                 call    ds:libintl_gettext
.text:00401E98                 mov     ecx, ds:_iob
.text:00401E9E                 add     ecx, 20h ; ' '
.text:00401EA1                 mov     [esp+4], ecx
.text:00401EA5                 mov     [esp], eax
.text:00401EA8                 call    fputs
.text:00401EAD                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401EB4                 call    ds:libintl_gettext
.text:00401EBA                 mov     ecx, ds:_iob
.text:00401EC0                 add     ecx, 20h ; ' '
.text:00401EC3                 mov     [esp+4], ecx
.text:00401EC7                 mov     [esp], eax
.text:00401ECA                 call    fputs
.text:00401ECF                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401ED6                 call    ds:libintl_gettext
.text:00401EDC                 mov     ecx, ds:_iob
.text:00401EE2                 add     ecx, 20h ; ' '
.text:00401EE5                 mov     [esp+4], ecx
.text:00401EE9                 mov     [esp], eax
.text:00401EEC                 call    fputs
.text:00401EF1                 mov     dword ptr [esp], offset aSignalMayBeASi ; "\nSIGNAL may be a signal name like `HUP"...
.text:00401EF8                 call    ds:libintl_gettext
.text:00401EFE                 mov     ecx, ds:_iob
.text:00401F04                 add     ecx, 20h ; ' '
.text:00401F07                 mov     [esp+4], ecx
.text:00401F0B                 mov     [esp], eax
.text:00401F0E                 call    fputs
.text:00401F13                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401F1A                 call    ds:libintl_gettext
.text:00401F20                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401F28                 mov     [esp], eax
.text:00401F2B                 call    printf
.text:00401F30                 jmp     loc_401E18
.text:00401F30 ; ---------------------------------------------------------------------------
.text:00401F35 aSInvalidSignal db '%s: invalid signal',0
.text:00401F35                                         ; DATA XREF: sub_401F70:loc_401FE0↓o
.text:00401F48 ; const char Str[]
.text:00401F48 Str             db 'abcdefghijklmnopqrstuvwxyz',0
.text:00401F48                                         ; DATA XREF: sub_401F70:loc_402060↓o
.text:00401F63                 align 10h
.text:00401F70
.text:00401F70 ; =============== S U B R O U T I N E =======================================
.text:00401F70
.text:00401F70
.text:00401F70 ; int __cdecl sub_401F70(char *, int)
.text:00401F70 sub_401F70      proc near               ; CODE XREF: sub_4018B0+130↑p
.text:00401F70                                         ; sub_4020F0+C7↓p ...
.text:00401F70
.text:00401F70 String          = dword ptr -2Ch
.text:00401F70 EndPtr          = dword ptr -28h
.text:00401F70 Radix           = dword ptr -24h
.text:00401F70 var_20          = byte ptr -20h
.text:00401F70 var_14          = dword ptr -14h
.text:00401F70 var_10          = dword ptr -10h
.text:00401F70 arg_0           = dword ptr  4
.text:00401F70 arg_4           = dword ptr  8
.text:00401F70
.text:00401F70                 push    edi
.text:00401F71                 push    esi
.text:00401F72                 push    ebx
.text:00401F73                 sub     esp, 20h
.text:00401F76                 mov     edi, [esp+2Ch+arg_0]
.text:00401F7A                 movsx   edx, byte ptr [edi]
.text:00401F7D                 sub     edx, 30h ; '0'
.text:00401F80                 cmp     edx, 9
.text:00401F83                 ja      loc_402040
.text:00401F89                 call    _errno
.text:00401F8E                 mov     dword ptr [eax], 0
.text:00401F94                 lea     edx, [esp+2Ch+var_10]
.text:00401F98                 mov     [esp+2Ch+Radix], 0Ah ; Radix
.text:00401FA0                 mov     [esp+2Ch+EndPtr], edx ; EndPtr
.text:00401FA4                 mov     [esp+2Ch+String], edi ; String
.text:00401FA7                 call    strtol
.text:00401FAC                 mov     ebx, eax
.text:00401FAE                 mov     eax, [esp+2Ch+var_10]
.text:00401FB2                 cmp     edi, eax
.text:00401FB4                 jz      short loc_401FBB
.text:00401FB6                 cmp     byte ptr [eax], 0
.text:00401FB9                 jz      short loc_40201B
.text:00401FBB
.text:00401FBB loc_401FBB:                             ; CODE XREF: sub_401F70+44↑j
.text:00401FBB                                         ; sub_401F70+B4↓j
.text:00401FBB                 mov     eax, 0FFFFFFFFh
.text:00401FC0
.text:00401FC0 loc_401FC0:                             ; CODE XREF: sub_401F70+BE↓j
.text:00401FC0                                         ; sub_401F70+C8↓j
.text:00401FC0                 mov     [esp+2Ch+var_14], eax
.text:00401FC4
.text:00401FC4 loc_401FC4:                             ; CODE XREF: sub_401F70+13B↓j
.text:00401FC4                 mov     edx, [esp+2Ch+var_14]
.text:00401FC8                 test    edx, edx
.text:00401FCA                 js      short loc_401FE0
.text:00401FCC                 mov     [esp+2Ch+String], edx
.text:00401FCF                 mov     esi, [esp+2Ch+arg_4]
.text:00401FD3                 mov     [esp+2Ch+EndPtr], esi
.text:00401FD7                 call    sub_403A60
.text:00401FDC                 test    eax, eax
.text:00401FDE                 jz      short loc_402015
.text:00401FE0
.text:00401FE0 loc_401FE0:                             ; CODE XREF: sub_401F70+5A↑j
.text:00401FE0                 mov     [esp+2Ch+String], offset aSInvalidSignal ; "%s: invalid signal"
.text:00401FE7                 call    ds:libintl_gettext
.text:00401FED                 mov     dword ptr [esp+2Ch+var_20], edi ; char
.text:00401FF1                 mov     [esp+2Ch+EndPtr], 0 ; ErrorMessage
.text:00401FF9                 mov     [esp+2Ch+String], 0 ; Code
.text:00402000                 mov     [esp+2Ch+Radix], eax ; char *
.text:00402004                 call    sub_405370
.text:00402009                 mov     eax, 0FFFFFFFFh
.text:0040200E
.text:0040200E loc_40200E:                             ; CODE XREF: sub_401F70+A9↓j
.text:0040200E                 add     esp, 20h
.text:00402011                 pop     ebx
.text:00402012                 pop     esi
.text:00402013                 pop     edi
.text:00402014                 retn
.text:00402015 ; ---------------------------------------------------------------------------
.text:00402015
.text:00402015 loc_402015:                             ; CODE XREF: sub_401F70+6E↑j
.text:00402015                 mov     eax, [esp+2Ch+var_14]
.text:00402019                 jmp     short loc_40200E
.text:0040201B ; ---------------------------------------------------------------------------
.text:0040201B
.text:0040201B loc_40201B:                             ; CODE XREF: sub_401F70+49↑j
.text:0040201B                 call    _errno
.text:00402020                 mov     ecx, [eax]
.text:00402022                 test    ecx, ecx
.text:00402024                 jnz     short loc_401FBB
.text:00402026                 mov     eax, ebx
.text:00402028                 and     ebx, 3FF00h
.text:0040202E                 jz      short loc_401FC0
.text:00402030                 sar     eax, 8
.text:00402033                 and     eax, 3FFh
.text:00402038                 jmp     short loc_401FC0
.text:00402038 ; ---------------------------------------------------------------------------
.text:0040203A                 align 10h
.text:00402040
.text:00402040 loc_402040:                             ; CODE XREF: sub_401F70+13↑j
.text:00402040                 mov     [esp+2Ch+String], edi ; char *
.text:00402043                 call    sub_403E50
.text:00402048                 mov     esi, eax
.text:0040204A                 mov     ebx, eax
.text:0040204C                 movzx   eax, byte ptr [eax]
.text:0040204F                 test    al, al
.text:00402051                 jz      short loc_402082
.text:00402053                 lea     esi, [esi+0]
.text:00402059                 lea     edi, [edi+0]
.text:00402060
.text:00402060 loc_402060:                             ; CODE XREF: sub_401F70+110↓j
.text:00402060                 mov     [esp+2Ch+String], offset Str ; "abcdefghijklmnopqrstuvwxyz"
.text:00402067                 movsx   edx, al
.text:0040206A                 mov     [esp+2Ch+EndPtr], edx ; Val
.text:0040206E                 call    strchr
.text:00402073                 test    eax, eax
.text:00402075                 jz      short loc_40207A
.text:00402077                 sub     byte ptr [ebx], 20h ; ' '
.text:0040207A
.text:0040207A loc_40207A:                             ; CODE XREF: sub_401F70+105↑j
.text:0040207A                 inc     ebx
.text:0040207B                 movzx   eax, byte ptr [ebx]
.text:0040207E                 test    al, al
.text:00402080                 jnz     short loc_402060
.text:00402082
.text:00402082 loc_402082:                             ; CODE XREF: sub_401F70+E1↑j
.text:00402082                 mov     [esp+2Ch+String], esi ; char *
.text:00402085                 lea     ebx, [esp+2Ch+var_14]
.text:00402089                 mov     [esp+2Ch+EndPtr], ebx ; int
.text:0040208D                 call    sub_403AE0
.text:00402092                 test    eax, eax
.text:00402094                 jz      short loc_4020A3
.text:00402096                 cmp     byte ptr [esi], 53h ; 'S'
.text:00402099                 jz      short loc_4020B0
.text:0040209B
.text:0040209B loc_40209B:                             ; CODE XREF: sub_401F70+144↓j
.text:0040209B                                         ; sub_401F70+14A↓j ...
.text:0040209B                 mov     [esp+2Ch+var_14], 0FFFFFFFFh
.text:004020A3
.text:004020A3 loc_4020A3:                             ; CODE XREF: sub_401F70+124↑j
.text:004020A3                                         ; sub_401F70+15D↓j
.text:004020A3                 mov     [esp+2Ch+String], esi ; Block
.text:004020A6                 call    free
.text:004020AB                 jmp     loc_401FC4
.text:004020B0 ; ---------------------------------------------------------------------------
.text:004020B0
.text:004020B0 loc_4020B0:                             ; CODE XREF: sub_401F70+129↑j
.text:004020B0                 cmp     byte ptr [esi+1], 49h ; 'I'
.text:004020B4                 jnz     short loc_40209B
.text:004020B6                 cmp     byte ptr [esi+2], 47h ; 'G'
.text:004020BA                 jnz     short loc_40209B
.text:004020BC                 mov     [esp+2Ch+EndPtr], ebx ; int
.text:004020C0                 lea     ebx, [esi+3]
.text:004020C3                 mov     [esp+2Ch+String], ebx ; char *
.text:004020C6                 call    sub_403AE0
.text:004020CB                 test    eax, eax
.text:004020CD                 jz      short loc_4020A3
.text:004020CF                 jmp     short loc_40209B
.text:004020CF sub_401F70      endp
.text:004020CF
.text:004020CF ; ---------------------------------------------------------------------------
.text:004020D1 byte_4020D1     db 3Fh, 0               ; DATA XREF: sub_4020F0+D0↓o
.text:004020D1                                         ; sub_4020F0:loc_40221E↓o
.text:004020D3 ; const char Format[]
.text:004020D3 Format          db '%*d %-*s %s',0Ah,0  ; DATA XREF: sub_4020F0+EC↓o
.text:004020D3                                         ; sub_4020F0+14A↓o
.text:004020E0 ; const char aD[]
.text:004020E0 aD              db '%d',0Ah,0           ; DATA XREF: sub_4020F0+1A6↓o
.text:004020E4                 align 10h
.text:004020F0
.text:004020F0 ; =============== S U B R O U T I N E =======================================
.text:004020F0
.text:004020F0
.text:004020F0 sub_4020F0      proc near               ; CODE XREF: sub_4018B0+230↑p
.text:004020F0
.text:004020F0 Format          = dword ptr -6Ch
.text:004020F0 var_68          = dword ptr -68h
.text:004020F0 var_64          = dword ptr -64h
.text:004020F0 var_60          = dword ptr -60h
.text:004020F0 var_5C          = dword ptr -5Ch
.text:004020F0 var_58          = dword ptr -58h
.text:004020F0 var_40          = dword ptr -40h
.text:004020F0 Buffer          = byte ptr -3Ch
.text:004020F0 arg_0           = byte ptr  4
.text:004020F0 arg_4           = dword ptr  8
.text:004020F0
.text:004020F0                 push    ebp
.text:004020F1                 push    edi
.text:004020F2                 push    esi
.text:004020F3                 push    ebx
.text:004020F4                 sub     esp, 5Ch
.text:004020F7                 mov     esi, [esp+6Ch+arg_4]
.text:004020FB                 cmp     [esp+6Ch+arg_0], 0
.text:00402100                 mov     [esp+6Ch+var_40], 0
.text:00402108                 jz      loc_402248
.text:0040210E                 xor     ebp, ebp
.text:00402110                 mov     edi, 1
.text:00402115                 mov     ebx, 1
.text:0040211A
.text:0040211A loc_40211A:                             ; CODE XREF: sub_4020F0+34↓j
.text:0040211A                 lea     edx, [ebx+ebx*4]
.text:0040211D                 inc     edi
.text:0040211E                 lea     ebx, [edx+edx]
.text:00402121                 cmp     ebx, 2
.text:00402124                 jle     short loc_40211A
.text:00402126                 mov     ebx, 1
.text:0040212B                 nop
.text:0040212C                 lea     esi, [esi+0]
.text:00402130
.text:00402130 loc_402130:                             ; CODE XREF: sub_4020F0+A4↓j
.text:00402130                 mov     [esp+6Ch+Format], ebx
.text:00402133                 lea     edx, [esp+6Ch+Buffer]
.text:00402137                 mov     [esp+6Ch+var_68], edx
.text:0040213B                 call    sub_403A60
.text:00402140                 test    eax, eax
.text:00402142                 jnz     short loc_402190
.text:00402144                 lea     ecx, [esp+6Ch+Buffer]
.text:00402148                 nop
.text:00402149                 lea     esi, [esi+0]
.text:00402150
.text:00402150 loc_402150:                             ; CODE XREF: sub_4020F0+75↓j
.text:00402150                 mov     eax, [ecx]
.text:00402152                 add     ecx, 4
.text:00402155                 lea     edx, [eax-1010101h]
.text:0040215B                 not     eax
.text:0040215D                 and     edx, eax
.text:0040215F                 and     edx, 80808080h
.text:00402165                 jz      short loc_402150
.text:00402167                 test    edx, 8080h
.text:0040216D                 jnz     short loc_402175
.text:0040216F                 shr     edx, 10h
.text:00402172                 add     ecx, 2
.text:00402175
.text:00402175 loc_402175:                             ; CODE XREF: sub_4020F0+7D↑j
.text:00402175                 add     dl, dl
.text:00402177                 lea     eax, [esp+6Ch+Buffer]
.text:0040217B                 sbb     ecx, 3
.text:0040217E                 sub     ecx, eax
.text:00402180                 cmp     ebp, ecx
.text:00402182                 jnb     short loc_402190
.text:00402184                 mov     ebp, ecx
.text:00402186                 lea     esi, [esi+0]
.text:00402189                 lea     edi, [edi+0]
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_4020F0+52↑j
.text:00402190                                         ; sub_4020F0+92↑j
.text:00402190                 inc     ebx
.text:00402191                 cmp     ebx, 16h
.text:00402194                 jle     short loc_402130
.text:00402196                 test    esi, esi
.text:00402198                 jz      short loc_4021FD
.text:0040219A                 mov     eax, [esi]
.text:0040219C                 test    eax, eax
.text:0040219E                 jnz     short loc_4021AC
.text:004021A0
.text:004021A0 loc_4021A0:                             ; CODE XREF: sub_4020F0+101↓j
.text:004021A0                                         ; sub_4020F0+12C↓j ...
.text:004021A0                 mov     eax, [esp+6Ch+var_40]
.text:004021A4                 add     esp, 5Ch
.text:004021A7                 pop     ebx
.text:004021A8                 pop     esi
.text:004021A9                 pop     edi
.text:004021AA                 pop     ebp
.text:004021AB                 retn
.text:004021AC ; ---------------------------------------------------------------------------
.text:004021AC
.text:004021AC loc_4021AC:                             ; CODE XREF: sub_4020F0+AE↑j
.text:004021AC                                         ; sub_4020F0+FF↓j
.text:004021AC                 mov     [esp+6Ch+Format], eax ; char *
.text:004021AF                 lea     ecx, [esp+6Ch+Buffer]
.text:004021B3                 mov     [esp+6Ch+var_68], ecx ; int
.text:004021B7                 call    sub_401F70
.text:004021BC                 test    eax, eax
.text:004021BE                 js      short loc_4021F3
.text:004021C0                 mov     [esp+6Ch+var_58], offset byte_4020D1
.text:004021C8                 lea     edx, [esp+6Ch+Buffer]
.text:004021CC                 mov     [esp+6Ch+var_5C], edx
.text:004021D0                 mov     [esp+6Ch+var_60], ebp
.text:004021D4                 mov     [esp+6Ch+var_64], eax
.text:004021D8                 mov     [esp+6Ch+var_68], edi
.text:004021DC                 mov     [esp+6Ch+Format], offset Format ; "%*d %-*s %s\n"
.text:004021E3                 call    printf
.text:004021E8
.text:004021E8 loc_4021E8:                             ; CODE XREF: sub_4020F0+10B↓j
.text:004021E8                 add     esi, 4
.text:004021EB                 mov     eax, [esi]
.text:004021ED                 test    eax, eax
.text:004021EF                 jnz     short loc_4021AC
.text:004021F1                 jmp     short loc_4021A0
.text:004021F3 ; ---------------------------------------------------------------------------
.text:004021F3
.text:004021F3 loc_4021F3:                             ; CODE XREF: sub_4020F0+CE↑j
.text:004021F3                 mov     [esp+6Ch+var_40], 1
.text:004021FB                 jmp     short loc_4021E8
.text:004021FD ; ---------------------------------------------------------------------------
.text:004021FD
.text:004021FD loc_4021FD:                             ; CODE XREF: sub_4020F0+A8↑j
.text:004021FD                 mov     ebx, 1
.text:00402202
.text:00402202 loc_402202:                             ; CODE XREF: sub_4020F0+12A↓j
.text:00402202                 mov     [esp+6Ch+Format], ebx
.text:00402205                 lea     esi, [esp+6Ch+Buffer]
.text:00402209                 mov     [esp+6Ch+var_68], esi
.text:0040220D                 call    sub_403A60
.text:00402212                 test    eax, eax
.text:00402214                 jz      short loc_40221E
.text:00402216
.text:00402216 loc_402216:                             ; CODE XREF: sub_4020F0+156↓j
.text:00402216                 inc     ebx
.text:00402217                 cmp     ebx, 16h
.text:0040221A                 jle     short loc_402202
.text:0040221C                 jmp     short loc_4021A0
.text:0040221E ; ---------------------------------------------------------------------------
.text:0040221E
.text:0040221E loc_40221E:                             ; CODE XREF: sub_4020F0+124↑j
.text:0040221E                 mov     [esp+6Ch+var_58], offset byte_4020D1
.text:00402226                 lea     ecx, [esp+6Ch+Buffer]
.text:0040222A                 mov     [esp+6Ch+var_5C], ecx
.text:0040222E                 mov     [esp+6Ch+var_60], ebp
.text:00402232                 mov     [esp+6Ch+var_64], ebx
.text:00402236                 mov     [esp+6Ch+var_68], edi
.text:0040223A                 mov     [esp+6Ch+Format], offset Format ; "%*d %-*s %s\n"
.text:00402241                 call    printf
.text:00402246                 jmp     short loc_402216
.text:00402248 ; ---------------------------------------------------------------------------
.text:00402248
.text:00402248 loc_402248:                             ; CODE XREF: sub_4020F0+18↑j
.text:00402248                 test    esi, esi
.text:0040224A                 jz      short loc_4022AE
.text:0040224C                 mov     eax, [esi]
.text:0040224E                 test    eax, eax
.text:00402250                 jz      loc_4021A0
.text:00402256
.text:00402256 loc_402256:                             ; CODE XREF: sub_4020F0+19B↓j
.text:00402256                 mov     [esp+6Ch+Format], eax ; char *
.text:00402259                 lea     ebx, [esp+6Ch+Buffer]
.text:0040225D                 mov     [esp+6Ch+var_68], ebx ; int
.text:00402261                 call    sub_401F70
.text:00402266                 test    eax, eax
.text:00402268                 js      short loc_4022A4
.text:0040226A                 mov     ebp, [esi]
.text:0040226C                 movsx   edi, byte ptr [ebp+0]
.text:00402270                 sub     edi, 30h ; '0'
.text:00402273                 cmp     edi, 9
.text:00402276                 ja      short loc_402292
.text:00402278                 lea     edx, [esp+6Ch+Buffer]
.text:0040227C                 mov     [esp+6Ch+Format], edx ; Buffer
.text:0040227F                 call    puts
.text:00402284
.text:00402284 loc_402284:                             ; CODE XREF: sub_4020F0+1B2↓j
.text:00402284                                         ; sub_4020F0+1BC↓j
.text:00402284                 add     esi, 4
.text:00402287                 mov     eax, [esi]
.text:00402289                 test    eax, eax
.text:0040228B                 jnz     short loc_402256
.text:0040228D                 jmp     loc_4021A0
.text:00402292 ; ---------------------------------------------------------------------------
.text:00402292
.text:00402292 loc_402292:                             ; CODE XREF: sub_4020F0+186↑j
.text:00402292                 mov     [esp+6Ch+var_68], eax
.text:00402296                 mov     [esp+6Ch+Format], offset aD ; "%d\n"
.text:0040229D                 call    printf
.text:004022A2                 jmp     short loc_402284
.text:004022A4 ; ---------------------------------------------------------------------------
.text:004022A4
.text:004022A4 loc_4022A4:                             ; CODE XREF: sub_4020F0+178↑j
.text:004022A4                 mov     [esp+6Ch+var_40], 1
.text:004022AC                 jmp     short loc_402284
.text:004022AE ; ---------------------------------------------------------------------------
.text:004022AE
.text:004022AE loc_4022AE:                             ; CODE XREF: sub_4020F0+15A↑j
.text:004022AE                 mov     ebx, 1
.text:004022B3
.text:004022B3 loc_4022B3:                             ; CODE XREF: sub_4020F0+1DB↓j
.text:004022B3                 mov     [esp+6Ch+Format], ebx
.text:004022B6                 lea     eax, [esp+6Ch+Buffer]
.text:004022BA                 mov     [esp+6Ch+var_68], eax
.text:004022BE                 call    sub_403A60
.text:004022C3                 test    eax, eax
.text:004022C5                 jz      short loc_4022D2
.text:004022C7
.text:004022C7 loc_4022C7:                             ; CODE XREF: sub_4020F0+1EE↓j
.text:004022C7                 inc     ebx
.text:004022C8                 cmp     ebx, 16h
.text:004022CB                 jle     short loc_4022B3
.text:004022CD                 jmp     loc_4021A0
.text:004022D2 ; ---------------------------------------------------------------------------
.text:004022D2
.text:004022D2 loc_4022D2:                             ; CODE XREF: sub_4020F0+1D5↑j
.text:004022D2                 lea     esi, [esp+6Ch+Buffer]
.text:004022D6                 mov     [esp+6Ch+Format], esi ; Buffer
.text:004022D9                 call    puts
.text:004022DE                 jmp     short loc_4022C7
.text:004022DE sub_4020F0      endp
.text:004022DE
.text:004022DE ; ---------------------------------------------------------------------------
.text:004022E0 dword_4022E0    dd 90002D2Dh, 7 dup(90909090h)
.text:004022E0                                         ; DATA XREF: sub_402530+E4↓o
.text:00402300 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402300                                         ; DATA XREF: sub_402530+2FC↓o
.text:0040232D                 align 20h
.text:00402340 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402340                                         ; DATA XREF: sub_402530:loc_402892↓o
.text:0040236D                 align 20h
.text:00402380 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402380                                         ; DATA XREF: sub_402530:loc_402930↓o
.text:00402380                                         ; sub_402530:loc_402CF7↓o
.text:004023A6                 align 20h
.text:004023C0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004023C0                                         ; DATA XREF: sub_402530+48E↓o
.text:004023E0 dword_4023E0    dd 90909000h, 7 dup(90909090h)
.text:004023E0                                         ; DATA XREF: sub_402530:loc_402A01↓o
.text:00402400 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402400                                         ; DATA XREF: sub_402530:loc_402A1A↓o
.text:00402420 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402420                                         ; DATA XREF: sub_402530:loc_402AFF↓o
.text:00402420                                         ; sub_402530:loc_402E2C↓o
.text:00402447                 align 20h
.text:00402460 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402460                                         ; DATA XREF: sub_402530:loc_402C73↓o
.text:0040248E                 align 20h
.text:004024A0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004024A0                                         ; DATA XREF: sub_402530:loc_402D5F↓o
.text:004024C1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004024C1                                         ; DATA XREF: sub_402530+93F↓o
.text:004024DB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004024DB                                         ; DATA XREF: sub_402530:loc_402EA7↓o
.text:004024F5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004024F5                                         ; DATA XREF: sub_402530:loc_402ECE↓o
.text:00402513 ; const char VarName[]
.text:00402513 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402530:loc_403080↓o
.text:00402523                 align 10h
.text:00402530
.text:00402530 ; =============== S U B R O U T I N E =======================================
.text:00402530
.text:00402530
.text:00402530 ; int __cdecl sub_402530(int, int, char *Str, int, int, int, int, int)
.text:00402530 sub_402530      proc near               ; CODE XREF: sub_4030C0+5A↓p
.text:00402530                                         ; .text:004031AA↓p ...
.text:00402530
.text:00402530 Str1            = dword ptr -5Ch
.text:00402530 Str2            = dword ptr -58h
.text:00402530 MaxCount        = dword ptr -54h
.text:00402530 var_50          = dword ptr -50h
.text:00402530 var_4C          = dword ptr -4Ch
.text:00402530 var_3C          = dword ptr -3Ch
.text:00402530 var_38          = dword ptr -38h
.text:00402530 var_34          = dword ptr -34h
.text:00402530 var_30          = dword ptr -30h
.text:00402530 var_2C          = dword ptr -2Ch
.text:00402530 var_28          = dword ptr -28h
.text:00402530 var_24          = dword ptr -24h
.text:00402530 var_20          = dword ptr -20h
.text:00402530 var_1C          = dword ptr -1Ch
.text:00402530 var_18          = dword ptr -18h
.text:00402530 var_14          = dword ptr -14h
.text:00402530 arg_0           = dword ptr  4
.text:00402530 arg_4           = dword ptr  8
.text:00402530 Str             = dword ptr  0Ch
.text:00402530 arg_C           = dword ptr  10h
.text:00402530 arg_10          = dword ptr  14h
.text:00402530 arg_14          = dword ptr  18h
.text:00402530 arg_18          = dword ptr  1Ch
.text:00402530 arg_1C          = dword ptr  20h
.text:00402530
.text:00402530                 push    ebp
.text:00402531                 mov     eax, 0FFFFFFFFh
.text:00402536                 push    edi
.text:00402537                 push    esi
.text:00402538                 push    ebx
.text:00402539                 sub     esp, 4Ch
.text:0040253C                 mov     esi, [esp+5Ch+Str]
.text:00402540                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402544                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402547                 mov     ebx, [ebp+4]
.text:0040254A                 setz    dl
.text:0040254D                 movzx   ecx, dl
.text:00402550                 dec     ecx
.text:00402551                 and     ecx, ebx
.text:00402553                 mov     [esp+5Ch+var_14], ecx
.text:00402557                 mov     ecx, [esp+5Ch+arg_0]
.text:0040255B                 test    ecx, ecx
.text:0040255D                 jle     loc_402687
.text:00402563                 mov     dword ptr [ebp+0Ch], 0
.text:0040256A                 mov     ebx, [ebp+0]
.text:0040256D                 test    ebx, ebx
.text:0040256F                 jz      loc_4030A0
.text:00402575                 mov     edi, [ebp+10h]
.text:00402578                 test    edi, edi
.text:0040257A                 jnz     short loc_4025D3
.text:0040257C                 lea     esi, [esi+0]
.text:00402580
.text:00402580 loc_402580:                             ; CODE XREF: sub_402530+B7C↓j
.text:00402580                 mov     [ebp+24h], ebx
.text:00402583                 mov     esi, [esp+5Ch+Str]
.text:00402587                 mov     [ebp+20h], ebx
.text:0040258A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040258E                 xor     ebx, ebx
.text:00402590                 mov     dword ptr [ebp+14h], 0
.text:00402597                 test    ecx, ecx
.text:00402599                 jz      loc_403080
.text:0040259F
.text:0040259F loc_40259F:                             ; CODE XREF: sub_402530+B64↓j
.text:0040259F                 mov     ebx, 1
.text:004025A4
.text:004025A4 loc_4025A4:                             ; CODE XREF: sub_402530+B5E↓j
.text:004025A4                 mov     [ebp+1Ch], ebx
.text:004025A7                 mov     ecx, [esp+5Ch+Str]
.text:004025AB                 movzx   eax, byte ptr [ecx]
.text:004025AE                 cmp     al, 2Dh ; '-'
.text:004025B0                 jz      loc_403070
.text:004025B6                 cmp     al, 2Bh ; '+'
.text:004025B8                 jz      loc_403059
.text:004025BE                 xor     edx, edx
.text:004025C0                 test    ebx, ebx
.text:004025C2                 setz    dl
.text:004025C5                 mov     [ebp+18h], edx
.text:004025C8
.text:004025C8 loc_4025C8:                             ; CODE XREF: sub_402530+B35↓j
.text:004025C8                 mov     [esp+5Ch+Str], esi
.text:004025CC                 mov     dword ptr [ebp+10h], 1
.text:004025D3
.text:004025D3 loc_4025D3:                             ; CODE XREF: sub_402530+4A↑j
.text:004025D3                 mov     eax, [ebp+14h]
.text:004025D6                 test    eax, eax
.text:004025D8                 jz      short loc_4025E3
.text:004025DA                 cmp     byte ptr [eax], 0
.text:004025DD                 jnz     loc_4026C0
.text:004025E3
.text:004025E3 loc_4025E3:                             ; CODE XREF: sub_402530+A8↑j
.text:004025E3                 mov     ebx, [ebp+0]
.text:004025E6                 cmp     [ebp+24h], ebx
.text:004025E9                 jle     short loc_4025EE
.text:004025EB                 mov     [ebp+24h], ebx
.text:004025EE
.text:004025EE loc_4025EE:                             ; CODE XREF: sub_402530+B9↑j
.text:004025EE                 cmp     [ebp+20h], ebx
.text:004025F1                 jle     short loc_4025F6
.text:004025F3                 mov     [ebp+20h], ebx
.text:004025F6
.text:004025F6 loc_4025F6:                             ; CODE XREF: sub_402530+C1↑j
.text:004025F6                 cmp     dword ptr [ebp+18h], 1
.text:004025FA                 jz      loc_402FD0
.text:00402600
.text:00402600 loc_402600:                             ; CODE XREF: sub_402530+B13↓j
.text:00402600                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402604                 jz      loc_402FB4
.text:0040260A                 cld
.text:0040260B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040260F                 mov     edx, 3
.text:00402614                 mov     edi, offset dword_4022E0
.text:00402619                 mov     esi, [ecx+ebx*4]
.text:0040261C                 mov     ecx, edx
.text:0040261E                 repe cmpsb
.text:00402620                 jnz     short loc_40265C
.text:00402622                 mov     edx, [ebp+24h]
.text:00402625                 lea     eax, [ebx+1]
.text:00402628                 cmp     [ebp+20h], edx
.text:0040262B                 mov     [ebp+0], eax
.text:0040262E                 jz      loc_402FC8
.text:00402634                 cmp     edx, eax
.text:00402636                 jz      short loc_402650
.text:00402638                 mov     [esp+5Ch+Str2], ebp
.text:0040263C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402640                 mov     [esp+5Ch+Str1], ebx
.text:00402643                 call    sub_4031E0
.text:00402648                 nop
.text:00402649                 lea     esi, [esi+0]
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_402530+106↑j
.text:00402650                                         ; sub_402530+A9B↓j
.text:00402650                 mov     eax, [esp+5Ch+arg_0]
.text:00402654                 mov     ebx, eax
.text:00402656                 mov     [ebp+24h], eax
.text:00402659                 mov     [ebp+0], eax
.text:0040265C
.text:0040265C loc_40265C:                             ; CODE XREF: sub_402530+F0↑j
.text:0040265C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402660                 jz      loc_402FB4
.text:00402666                 mov     esi, [esp+5Ch+arg_4]
.text:0040266A                 mov     eax, [esi+ebx*4]
.text:0040266D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402670                 jz      short loc_402697
.text:00402672
.text:00402672 loc_402672:                             ; CODE XREF: sub_402530+16D↓j
.text:00402672                 mov     edx, [ebp+18h]
.text:00402675                 test    edx, edx
.text:00402677                 jz      short loc_402690
.text:00402679                 mov     [ebp+0Ch], eax
.text:0040267C                 lea     edi, [ebx+1]
.text:0040267F                 mov     eax, 1
.text:00402684                 mov     [ebp+0], edi
.text:00402687
.text:00402687 loc_402687:                             ; CODE XREF: sub_402530+2D↑j
.text:00402687                                         ; sub_402530+165↓j ...
.text:00402687                 add     esp, 4Ch
.text:0040268A                 pop     ebx
.text:0040268B                 pop     esi
.text:0040268C                 pop     edi
.text:0040268D                 pop     ebp
.text:0040268E                 retn
.text:0040268E ; ---------------------------------------------------------------------------
.text:0040268F                 align 10h
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_402530+147↑j
.text:00402690                                         ; sub_402530+A8A↓j ...
.text:00402690                 mov     eax, 0FFFFFFFFh
.text:00402695                 jmp     short loc_402687
.text:00402697 ; ---------------------------------------------------------------------------
.text:00402697
.text:00402697 loc_402697:                             ; CODE XREF: sub_402530+140↑j
.text:00402697                 movzx   edx, byte ptr [eax+1]
.text:0040269B                 test    dl, dl
.text:0040269D                 jz      short loc_402672
.text:0040269F                 mov     ebx, [esp+5Ch+arg_C]
.text:004026A3                 xor     ecx, ecx
.text:004026A5                 test    ebx, ebx
.text:004026A7                 jz      short loc_4026B2
.text:004026A9                 cmp     dl, 2Dh ; '-'
.text:004026AC                 jz      loc_402FAA
.text:004026B2
.text:004026B2 loc_4026B2:                             ; CODE XREF: sub_402530+177↑j
.text:004026B2                                         ; sub_402530+A7F↓j
.text:004026B2                 lea     esi, [ecx+eax+1]
.text:004026B6                 mov     [ebp+14h], esi
.text:004026B9                 lea     esi, [esi+0]
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_402530+AD↑j
.text:004026C0                 mov     ecx, [esp+5Ch+arg_C]
.text:004026C4                 test    ecx, ecx
.text:004026C6                 jz      loc_402A50
.text:004026CC                 mov     edx, [ebp+0]
.text:004026CF                 mov     edi, [esp+5Ch+arg_4]
.text:004026D3                 mov     eax, [edi+edx*4]
.text:004026D6                 movzx   edx, byte ptr [eax+1]
.text:004026DA                 cmp     dl, 2Dh ; '-'
.text:004026DD                 jz      short loc_4026F5
.text:004026DF                 mov     ebx, [esp+5Ch+arg_14]
.text:004026E3                 test    ebx, ebx
.text:004026E5                 jz      loc_402A50
.text:004026EB                 cmp     byte ptr [eax+2], 0
.text:004026EF                 jz      loc_402F8A
.text:004026F5
.text:004026F5 loc_4026F5:                             ; CODE XREF: sub_402530+1AD↑j
.text:004026F5                                         ; sub_402530+A75↓j
.text:004026F5                 mov     [esp+5Ch+var_18], 0
.text:004026FD                 mov     ecx, [ebp+14h]
.text:00402700                 mov     [esp+5Ch+var_1C], 0
.text:00402708                 mov     [esp+5Ch+var_20], 0
.text:00402710                 mov     edi, ecx
.text:00402712                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040271A                 movzx   eax, byte ptr [ecx]
.text:0040271D                 test    al, al
.text:0040271F                 jz      short loc_40273C
.text:00402721                 cmp     al, 3Dh ; '='
.text:00402723                 jz      short loc_40273C
.text:00402725                 lea     esi, [esi+0]
.text:00402729                 lea     edi, [edi+0]
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_402530+20A↓j
.text:00402730                 inc     edi
.text:00402731                 movzx   eax, byte ptr [edi]
.text:00402734                 test    al, al
.text:00402736                 jz      short loc_40273C
.text:00402738                 cmp     al, 3Dh ; '='
.text:0040273A                 jnz     short loc_402730
.text:0040273C
.text:0040273C loc_40273C:                             ; CODE XREF: sub_402530+1EF↑j
.text:0040273C                                         ; sub_402530+1F3↑j ...
.text:0040273C                 mov     [esp+5Ch+var_28], 0
.text:00402744                 mov     esi, [esp+5Ch+arg_C]
.text:00402748                 mov     ebx, [esi]
.text:0040274A                 test    ebx, ebx
.text:0040274C                 mov     edx, ebx
.text:0040274E                 jz      loc_402970
.text:00402754                 lea     esi, [esi+0]
.text:0040275A                 lea     edi, [edi+0]
.text:00402760
.text:00402760 loc_402760:                             ; CODE XREF: sub_402530+25E↓j
.text:00402760                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402764                 mov     ebx, edi
.text:00402766                 sub     ebx, ecx
.text:00402768                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040276C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040276F                 call    strncmp
.text:00402774                 test    eax, eax
.text:00402776                 jz      loc_402F06
.text:0040277C
.text:0040277C loc_40277C:                             ; CODE XREF: sub_402530+A0F↓j
.text:0040277C                                         ; sub_402530+A24↓j ...
.text:0040277C                 inc     [esp+5Ch+var_28]
.text:00402780                 add     esi, 10h
.text:00402783                 mov     ecx, [esi]
.text:00402785                 test    ecx, ecx
.text:00402787                 mov     edx, ecx
.text:00402789                 jz      short loc_402790
.text:0040278B                 mov     ecx, [ebp+14h]
.text:0040278E                 jmp     short loc_402760
.text:00402790 ; ---------------------------------------------------------------------------
.text:00402790
.text:00402790 loc_402790:                             ; CODE XREF: sub_402530+259↑j
.text:00402790                                         ; sub_402530+A55↓j
.text:00402790                 mov     esi, [esp+5Ch+var_20]
.text:00402794                 test    esi, esi
.text:00402796                 jz      short loc_4027A4
.text:00402798                 mov     edx, [esp+5Ch+var_1C]
.text:0040279C                 test    edx, edx
.text:0040279E                 jz      loc_402EB0
.text:004027A4
.text:004027A4 loc_4027A4:                             ; CODE XREF: sub_402530+266↑j
.text:004027A4                 mov     eax, [esp+5Ch+var_18]
.text:004027A8                 test    eax, eax
.text:004027AA                 jz      loc_402970
.text:004027B0                 mov     ecx, [ebp+0]
.text:004027B3                 lea     eax, [ecx+1]
.text:004027B6                 mov     [ebp+0], eax
.text:004027B9                 cmp     byte ptr [edi], 0
.text:004027BC                 jz      loc_4028D0
.text:004027C2                 mov     ecx, [esp+5Ch+var_18]
.text:004027C6                 mov     esi, [ecx+4]
.text:004027C9                 test    esi, esi
.text:004027CB                 jz      short loc_402816
.text:004027CD                 lea     ebx, [edi+1]
.text:004027D0                 mov     [ebp+0Ch], ebx
.text:004027D3
.text:004027D3 loc_4027D3:                             ; CODE XREF: sub_402530+3A8↓j
.text:004027D3                                         ; sub_402530+3C4↓j
.text:004027D3                 mov     ebx, [ebp+14h]
.text:004027D6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:004027D9                 call    strlen
.text:004027DE                 add     [ebp+14h], eax
.text:004027E1                 mov     esi, [esp+5Ch+arg_10]
.text:004027E5                 test    esi, esi
.text:004027E7                 jz      short loc_4027F3
.text:004027E9                 mov     ebp, [esp+5Ch+var_24]
.text:004027ED                 mov     ecx, [esp+5Ch+arg_10]
.text:004027F1                 mov     [ecx], ebp
.text:004027F3
.text:004027F3 loc_4027F3:                             ; CODE XREF: sub_402530+2B7↑j
.text:004027F3                 mov     eax, [esp+5Ch+var_18]
.text:004027F7                 mov     ecx, [eax+8]
.text:004027FA                 test    ecx, ecx
.text:004027FC                 jnz     short loc_40280A
.text:004027FE                 mov     ecx, [esp+5Ch+var_18]
.text:00402802
.text:00402802 loc_402802:                             ; CODE XREF: sub_402530+723↓j
.text:00402802                 mov     eax, [ecx+0Ch]
.text:00402805                 jmp     loc_402687
.text:0040280A ; ---------------------------------------------------------------------------
.text:0040280A
.text:0040280A loc_40280A:                             ; CODE XREF: sub_402530+2CC↑j
.text:0040280A                                         ; sub_402530+719↓j
.text:0040280A                 mov     esi, [eax+0Ch]
.text:0040280D                 xor     eax, eax
.text:0040280F                 mov     [ecx], esi
.text:00402811                 jmp     loc_402687
.text:00402816 ; ---------------------------------------------------------------------------
.text:00402816
.text:00402816 loc_402816:                             ; CODE XREF: sub_402530+29B↑j
.text:00402816                 mov     edi, [esp+5Ch+var_14]
.text:0040281A                 test    edi, edi
.text:0040281C                 jz      short loc_402870
.text:0040281E                 mov     esi, [esp+5Ch+arg_4]
.text:00402822                 mov     edx, [esi+eax*4-4]
.text:00402826                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040282A                 jz      short loc_402892
.text:0040282C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402833                 call    ds:libintl_gettext
.text:00402839                 mov     edx, [esp+5Ch+var_18]
.text:0040283D                 mov     edi, [edx]
.text:0040283F                 mov     [esp+5Ch+var_4C], edi
.text:00402843                 mov     ebx, [ebp+0]
.text:00402846                 mov     edi, [esp+5Ch+arg_4]
.text:0040284A                 mov     ecx, [edi+ebx*4-4]
.text:0040284E                 movsx   esi, byte ptr [ecx]
.text:00402851                 mov     ecx, ds:_iob
.text:00402857                 add     ecx, 40h ; '@'
.text:0040285A                 mov     [esp+5Ch+var_50], esi
.text:0040285E                 mov     ebx, [edi]
.text:00402860                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402864                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402867                 mov     [esp+5Ch+MaxCount], ebx
.text:0040286B                 call    fprintf
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_402530+2EC↑j
.text:00402870                                         ; sub_402530+398↓j
.text:00402870                 mov     ecx, [ebp+14h]
.text:00402873                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402876                 call    strlen
.text:0040287B                 add     [ebp+14h], eax
.text:0040287E                 mov     eax, [esp+5Ch+var_18]
.text:00402882                 mov     esi, [eax+0Ch]
.text:00402885                 mov     [ebp+8], esi
.text:00402888
.text:00402888 loc_402888:                             ; CODE XREF: sub_402530+4E5↓j
.text:00402888                                         ; sub_402530+73E↓j ...
.text:00402888                 mov     eax, 3Fh ; '?'
.text:0040288D                 jmp     loc_402687
.text:00402892 ; ---------------------------------------------------------------------------
.text:00402892
.text:00402892 loc_402892:                             ; CODE XREF: sub_402530+2FA↑j
.text:00402892                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402899                 call    ds:libintl_gettext
.text:0040289F                 mov     edx, [esp+5Ch+var_18]
.text:004028A3                 mov     edi, [esp+5Ch+arg_4]
.text:004028A7                 mov     ecx, ds:_iob
.text:004028AD                 mov     esi, [edx]
.text:004028AF                 add     ecx, 40h ; '@'
.text:004028B2                 mov     [esp+5Ch+var_50], esi
.text:004028B6                 mov     ebx, [edi]
.text:004028B8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004028BC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004028BF                 mov     [esp+5Ch+MaxCount], ebx
.text:004028C3                 call    fprintf
.text:004028C8                 jmp     short loc_402870
.text:004028C8 ; ---------------------------------------------------------------------------
.text:004028CA                 align 10h
.text:004028D0
.text:004028D0 loc_4028D0:                             ; CODE XREF: sub_402530+28C↑j
.text:004028D0                 mov     ebx, [esp+5Ch+var_18]
.text:004028D4                 cmp     dword ptr [ebx+4], 1
.text:004028D8                 jnz     loc_4027D3
.text:004028DE                 cmp     eax, [esp+5Ch+arg_0]
.text:004028E2                 jge     short loc_4028F9
.text:004028E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004028E8                 lea     edi, [ecx+2]
.text:004028EB                 mov     [ebp+0], edi
.text:004028EE                 mov     esi, [ebx+eax*4]
.text:004028F1                 mov     [ebp+0Ch], esi
.text:004028F4                 jmp     loc_4027D3
.text:004028F9 ; ---------------------------------------------------------------------------
.text:004028F9
.text:004028F9 loc_4028F9:                             ; CODE XREF: sub_402530+3B2↑j
.text:004028F9                 mov     edx, [esp+5Ch+var_14]
.text:004028FD                 test    edx, edx
.text:004028FF                 jnz     short loc_402930
.text:00402901
.text:00402901 loc_402901:                             ; CODE XREF: sub_402530+437↓j
.text:00402901                 mov     edx, [ebp+14h]
.text:00402904                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402907                 call    strlen
.text:0040290C                 add     [ebp+14h], eax
.text:0040290F                 mov     eax, [esp+5Ch+var_18]
.text:00402913                 mov     edi, [eax+0Ch]
.text:00402916                 mov     [ebp+8], edi
.text:00402919
.text:00402919 loc_402919:                             ; CODE XREF: sub_402530+7C2↓j
.text:00402919                 mov     ebp, [esp+5Ch+Str]
.text:0040291D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402921                 setnz   bl
.text:00402924                 movzx   esi, bl
.text:00402927                 lea     eax, [esi+esi*4+3Ah]
.text:0040292B                 jmp     loc_402687
.text:00402930 ; ---------------------------------------------------------------------------
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: sub_402530+3CF↑j
.text:00402930                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402937                 call    ds:libintl_gettext
.text:0040293D                 mov     ecx, [ebp+0]
.text:00402940                 mov     esi, [esp+5Ch+arg_4]
.text:00402944                 mov     ebx, [esi+ecx*4-4]
.text:00402948                 mov     ecx, ds:_iob
.text:0040294E                 mov     [esp+5Ch+var_50], ebx
.text:00402952                 mov     edi, [esi]
.text:00402954                 add     ecx, 40h ; '@'
.text:00402957                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040295B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040295E                 mov     [esp+5Ch+MaxCount], edi
.text:00402962                 call    fprintf
.text:00402967                 jmp     short loc_402901
.text:00402967 ; ---------------------------------------------------------------------------
.text:00402969                 align 10h
.text:00402970
.text:00402970 loc_402970:                             ; CODE XREF: sub_402530+21E↑j
.text:00402970                                         ; sub_402530+27A↑j
.text:00402970                 mov     eax, [esp+5Ch+arg_14]
.text:00402974                 test    eax, eax
.text:00402976                 jz      short loc_4029A6
.text:00402978                 mov     ebx, [ebp+0]
.text:0040297B                 mov     esi, [esp+5Ch+arg_4]
.text:0040297F                 mov     edi, [esi+ebx*4]
.text:00402982                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402986                 jz      short loc_4029A9
.text:00402988                 mov     ecx, [ebp+14h]
.text:0040298B                 mov     edx, [esp+5Ch+Str]
.text:0040298F                 movsx   ebx, byte ptr [ecx]
.text:00402992                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402995                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402999                 call    strchr
.text:0040299E                 test    eax, eax
.text:004029A0                 jnz     loc_402A50
.text:004029A6
.text:004029A6 loc_4029A6:                             ; CODE XREF: sub_402530+446↑j
.text:004029A6                 mov     ebx, [ebp+0]
.text:004029A9
.text:004029A9 loc_4029A9:                             ; CODE XREF: sub_402530+456↑j
.text:004029A9                 mov     eax, [esp+5Ch+var_14]
.text:004029AD                 test    eax, eax
.text:004029AF                 jz      short loc_402A01
.text:004029B1                 mov     esi, [esp+5Ch+arg_4]
.text:004029B5                 mov     edi, [esi+ebx*4]
.text:004029B8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004029BC                 jz      short loc_402A1A
.text:004029BE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004029C5                 call    ds:libintl_gettext
.text:004029CB                 mov     edi, [ebp+14h]
.text:004029CE                 mov     [esp+5Ch+var_4C], edi
.text:004029D2                 mov     ebx, [ebp+0]
.text:004029D5                 mov     edi, [esp+5Ch+arg_4]
.text:004029D9                 mov     esi, [edi+ebx*4]
.text:004029DC                 movsx   ecx, byte ptr [esi]
.text:004029DF                 mov     esi, ds:_iob
.text:004029E5                 add     esi, 40h ; '@'
.text:004029E8                 mov     [esp+5Ch+var_50], ecx
.text:004029EC                 mov     ebx, [edi]
.text:004029EE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004029F2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004029F5                 mov     [esp+5Ch+MaxCount], ebx
.text:004029F9                 call    fprintf
.text:004029FE
.text:004029FE loc_4029FE:                             ; CODE XREF: sub_402530+51D↓j
.text:004029FE                 mov     ebx, [ebp+0]
.text:00402A01
.text:00402A01 loc_402A01:                             ; CODE XREF: sub_402530+47F↑j
.text:00402A01                 mov     dword ptr [ebp+14h], offset dword_4023E0
.text:00402A08                 lea     edx, [ebx+1]
.text:00402A0B                 mov     [ebp+0], edx
.text:00402A0E
.text:00402A0E loc_402A0E:                             ; CODE XREF: sub_402530+999↓j
.text:00402A0E                 mov     dword ptr [ebp+8], 0
.text:00402A15                 jmp     loc_402888
.text:00402A1A ; ---------------------------------------------------------------------------
.text:00402A1A
.text:00402A1A loc_402A1A:                             ; CODE XREF: sub_402530+48C↑j
.text:00402A1A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402A21                 call    ds:libintl_gettext
.text:00402A27                 mov     ecx, [ebp+14h]
.text:00402A2A                 mov     edi, [esp+5Ch+arg_4]
.text:00402A2E                 mov     edx, ds:_iob
.text:00402A34                 mov     [esp+5Ch+var_50], ecx
.text:00402A38                 mov     ebx, [edi]
.text:00402A3A                 add     edx, 40h ; '@'
.text:00402A3D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A41                 mov     [esp+5Ch+MaxCount], ebx
.text:00402A45                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402A48                 call    fprintf
.text:00402A4D                 jmp     short loc_4029FE
.text:00402A4D ; ---------------------------------------------------------------------------
.text:00402A4F                 align 10h
.text:00402A50
.text:00402A50 loc_402A50:                             ; CODE XREF: sub_402530+196↑j
.text:00402A50                                         ; sub_402530+1B5↑j ...
.text:00402A50                 mov     esi, [ebp+14h]
.text:00402A53                 movzx   ebx, byte ptr [esi]
.text:00402A56                 inc     esi
.text:00402A57                 mov     [ebp+14h], esi
.text:00402A5A                 mov     ecx, [esp+5Ch+Str]
.text:00402A5E                 movsx   esi, bl
.text:00402A61                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402A65                 mov     edi, esi
.text:00402A67                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402A6A                 call    strchr
.text:00402A6F                 mov     ecx, [ebp+14h]
.text:00402A72                 cmp     byte ptr [ecx], 0
.text:00402A75                 jnz     short loc_402A7A
.text:00402A77                 inc     dword ptr [ebp+0]
.text:00402A7A
.text:00402A7A loc_402A7A:                             ; CODE XREF: sub_402530+545↑j
.text:00402A7A                 test    eax, eax
.text:00402A7C                 jz      loc_402E60
.text:00402A82                 cmp     bl, 3Ah ; ':'
.text:00402A85                 jz      loc_402E60
.text:00402A8B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00402A8E                 jz      loc_402B46
.text:00402A94                 movzx   edx, byte ptr [eax+1]
.text:00402A98
.text:00402A98 loc_402A98:                             ; CODE XREF: sub_402530+61D↓j
.text:00402A98                 cmp     dl, 3Ah ; ':'
.text:00402A9B                 jz      short loc_402AA4
.text:00402A9D
.text:00402A9D loc_402A9D:                             ; CODE XREF: sub_402530+590↓j
.text:00402A9D                 mov     eax, esi
.text:00402A9F                 jmp     loc_402687
.text:00402AA4 ; ---------------------------------------------------------------------------
.text:00402AA4
.text:00402AA4 loc_402AA4:                             ; CODE XREF: sub_402530+56B↑j
.text:00402AA4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402AA8                 jz      loc_402B31
.text:00402AAE                 cmp     byte ptr [ecx], 0
.text:00402AB1                 jz      short loc_402AC2
.text:00402AB3
.text:00402AB3 loc_402AB3:                             ; CODE XREF: sub_402530+604↓j
.text:00402AB3                 inc     dword ptr [ebp+0]
.text:00402AB6                 mov     [ebp+0Ch], ecx
.text:00402AB9
.text:00402AB9 loc_402AB9:                             ; CODE XREF: sub_402530+5AB↓j
.text:00402AB9                                         ; sub_402530+5C6↓j ...
.text:00402AB9                 mov     dword ptr [ebp+14h], 0
.text:00402AC0                 jmp     short loc_402A9D
.text:00402AC2 ; ---------------------------------------------------------------------------
.text:00402AC2
.text:00402AC2 loc_402AC2:                             ; CODE XREF: sub_402530+581↑j
.text:00402AC2                 mov     ecx, [ebp+0]
.text:00402AC5                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402AC9                 jz      short loc_402ADD
.text:00402ACB                 mov     eax, [esp+5Ch+arg_4]
.text:00402ACF                 lea     edx, [ecx+1]
.text:00402AD2                 mov     [ebp+0], edx
.text:00402AD5                 mov     ebx, [eax+ecx*4]
.text:00402AD8                 mov     [ebp+0Ch], ebx
.text:00402ADB                 jmp     short loc_402AB9
.text:00402ADD ; ---------------------------------------------------------------------------
.text:00402ADD
.text:00402ADD loc_402ADD:                             ; CODE XREF: sub_402530+599↑j
.text:00402ADD                 mov     ecx, [esp+5Ch+var_14]
.text:00402AE1                 test    ecx, ecx
.text:00402AE3                 jnz     short loc_402AFF
.text:00402AE5
.text:00402AE5 loc_402AE5:                             ; CODE XREF: sub_402530+5FF↓j
.text:00402AE5                 mov     [ebp+8], edi
.text:00402AE8                 mov     edi, [esp+5Ch+Str]
.text:00402AEC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00402AEF                 jz      short loc_402AF8
.text:00402AF1                 mov     esi, 3Fh ; '?'
.text:00402AF6                 jmp     short loc_402AB9
.text:00402AF8 ; ---------------------------------------------------------------------------
.text:00402AF8
.text:00402AF8 loc_402AF8:                             ; CODE XREF: sub_402530+5BF↑j
.text:00402AF8                 mov     esi, 3Ah ; ':'
.text:00402AFD                 jmp     short loc_402AB9
.text:00402AFF ; ---------------------------------------------------------------------------
.text:00402AFF
.text:00402AFF loc_402AFF:                             ; CODE XREF: sub_402530+5B3↑j
.text:00402AFF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402B06                 call    ds:libintl_gettext
.text:00402B0C                 mov     [esp+5Ch+var_50], edi
.text:00402B10                 mov     ebx, [esp+5Ch+arg_4]
.text:00402B14                 mov     edx, ds:_iob
.text:00402B1A                 mov     esi, [ebx]
.text:00402B1C                 add     edx, 40h ; '@'
.text:00402B1F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B23                 mov     [esp+5Ch+MaxCount], esi
.text:00402B27                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402B2A                 call    fprintf
.text:00402B2F                 jmp     short loc_402AE5
.text:00402B31 ; ---------------------------------------------------------------------------
.text:00402B31
.text:00402B31 loc_402B31:                             ; CODE XREF: sub_402530+578↑j
.text:00402B31                 cmp     byte ptr [ecx], 0
.text:00402B34                 jnz     loc_402AB3
.text:00402B3A                 mov     dword ptr [ebp+0Ch], 0
.text:00402B41                 jmp     loc_402AB9
.text:00402B46 ; ---------------------------------------------------------------------------
.text:00402B46
.text:00402B46 loc_402B46:                             ; CODE XREF: sub_402530+55E↑j
.text:00402B46                 movzx   edx, byte ptr [eax+1]
.text:00402B4A                 cmp     dl, 3Bh ; ';'
.text:00402B4D                 jnz     loc_402A98
.text:00402B53                 mov     [esp+5Ch+var_2C], 0
.text:00402B5B                 mov     [esp+5Ch+var_30], 0
.text:00402B63                 mov     [esp+5Ch+var_34], 0
.text:00402B6B                 mov     [esp+5Ch+var_38], 0
.text:00402B73                 cmp     byte ptr [ecx], 0
.text:00402B76                 jz      loc_402DEB
.text:00402B7C                 inc     dword ptr [ebp+0]
.text:00402B7F                 mov     [ebp+0Ch], ecx
.text:00402B82
.text:00402B82 loc_402B82:                             ; CODE XREF: sub_402530+8D4↓j
.text:00402B82                 mov     edi, [ebp+0Ch]
.text:00402B85                 mov     [ebp+14h], edi
.text:00402B88                 movzx   eax, byte ptr [edi]
.text:00402B8B                 test    al, al
.text:00402B8D                 jz      short loc_402B9F
.text:00402B8F                 cmp     al, 3Dh ; '='
.text:00402B91                 jz      short loc_402B9F
.text:00402B93
.text:00402B93 loc_402B93:                             ; CODE XREF: sub_402530+66D↓j
.text:00402B93                 inc     edi
.text:00402B94                 movzx   eax, byte ptr [edi]
.text:00402B97                 test    al, al
.text:00402B99                 jz      short loc_402B9F
.text:00402B9B                 cmp     al, 3Dh ; '='
.text:00402B9D                 jnz     short loc_402B93
.text:00402B9F
.text:00402B9F loc_402B9F:                             ; CODE XREF: sub_402530+65D↑j
.text:00402B9F                                         ; sub_402530+661↑j ...
.text:00402B9F                 mov     [esp+5Ch+var_3C], 0
.text:00402BA7                 mov     esi, [esp+5Ch+arg_C]
.text:00402BAB                 mov     eax, [esi]
.text:00402BAD                 test    eax, eax
.text:00402BAF                 jz      loc_402D30
.text:00402BB5                 mov     ecx, eax
.text:00402BB7
.text:00402BB7 loc_402BB7:                             ; CODE XREF: sub_402530+6B3↓j
.text:00402BB7                 mov     ebx, [ebp+14h]
.text:00402BBA                 mov     eax, edi
.text:00402BBC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00402BBF                 sub     eax, ebx
.text:00402BC1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402BC5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402BC9                 call    strncmp
.text:00402BCE                 test    eax, eax
.text:00402BD0                 jz      loc_402D97
.text:00402BD6
.text:00402BD6 loc_402BD6:                             ; CODE XREF: sub_402530+88C↓j
.text:00402BD6                                         ; sub_402530+89D↓j
.text:00402BD6                 inc     [esp+5Ch+var_3C]
.text:00402BDA                 add     esi, 10h
.text:00402BDD                 mov     edx, [esi]
.text:00402BDF                 test    edx, edx
.text:00402BE1                 mov     ecx, edx
.text:00402BE3                 jnz     short loc_402BB7
.text:00402BE5
.text:00402BE5 loc_402BE5:                             ; CODE XREF: sub_402530+8B6↓j
.text:00402BE5                 mov     esi, [esp+5Ch+var_34]
.text:00402BE9                 test    esi, esi
.text:00402BEB                 jz      short loc_402BF9
.text:00402BED                 mov     ebx, [esp+5Ch+var_30]
.text:00402BF1                 test    ebx, ebx
.text:00402BF3                 jz      loc_402D41
.text:00402BF9
.text:00402BF9 loc_402BF9:                             ; CODE XREF: sub_402530+6BB↑j
.text:00402BF9                 mov     esi, [esp+5Ch+var_2C]
.text:00402BFD                 test    esi, esi
.text:00402BFF                 jz      loc_402D30
.text:00402C05                 cmp     byte ptr [edi], 0
.text:00402C08                 jz      loc_402CB0
.text:00402C0E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402C12                 mov     ebx, [ecx+4]
.text:00402C15                 test    ebx, ebx
.text:00402C17                 jz      short loc_402C58
.text:00402C19                 lea     edx, [edi+1]
.text:00402C1C                 mov     [ebp+0Ch], edx
.text:00402C1F
.text:00402C1F loc_402C1F:                             ; CODE XREF: sub_402530+788↓j
.text:00402C1F                                         ; sub_402530+7A7↓j
.text:00402C1F                 mov     edi, [ebp+14h]
.text:00402C22                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402C25                 call    strlen
.text:00402C2A                 add     [ebp+14h], eax
.text:00402C2D                 mov     eax, [esp+5Ch+arg_10]
.text:00402C31                 test    eax, eax
.text:00402C33                 jz      short loc_402C40
.text:00402C35                 mov     edx, [esp+5Ch+var_38]
.text:00402C39                 mov     ebp, [esp+5Ch+arg_10]
.text:00402C3D                 mov     [ebp+0], edx
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_402530+703↑j
.text:00402C40                 mov     eax, [esp+5Ch+var_2C]
.text:00402C44                 mov     ecx, [eax+8]
.text:00402C47                 test    ecx, ecx
.text:00402C49                 jnz     loc_40280A
.text:00402C4F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402C53                 jmp     loc_402802
.text:00402C58 ; ---------------------------------------------------------------------------
.text:00402C58
.text:00402C58 loc_402C58:                             ; CODE XREF: sub_402530+6E7↑j
.text:00402C58                 mov     eax, [esp+5Ch+var_14]
.text:00402C5C                 test    eax, eax
.text:00402C5E                 jnz     short loc_402C73
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_402530+779↓j
.text:00402C60                 mov     ecx, [ebp+14h]
.text:00402C63                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402C66                 call    strlen
.text:00402C6B                 add     [ebp+14h], eax
.text:00402C6E                 jmp     loc_402888
.text:00402C73 ; ---------------------------------------------------------------------------
.text:00402C73
.text:00402C73 loc_402C73:                             ; CODE XREF: sub_402530+72E↑j
.text:00402C73                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00402C7A                 call    ds:libintl_gettext
.text:00402C80                 mov     edx, [esp+5Ch+var_2C]
.text:00402C84                 mov     ebx, [esp+5Ch+arg_4]
.text:00402C88                 mov     edi, [edx]
.text:00402C8A                 mov     [esp+5Ch+var_50], edi
.text:00402C8E                 mov     edi, ds:_iob
.text:00402C94                 mov     esi, [ebx]
.text:00402C96                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C9A                 add     edi, 40h ; '@'
.text:00402C9D                 mov     [esp+5Ch+MaxCount], esi
.text:00402CA1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402CA4                 call    fprintf
.text:00402CA9                 jmp     short loc_402C60
.text:00402CA9 ; ---------------------------------------------------------------------------
.text:00402CAB                 align 10h
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_402530+6D8↑j
.text:00402CB0                 mov     esi, [esp+5Ch+var_2C]
.text:00402CB4                 cmp     dword ptr [esi+4], 1
.text:00402CB8                 jnz     loc_402C1F
.text:00402CBE                 mov     ecx, [ebp+0]
.text:00402CC1                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402CC5                 jge     short loc_402CDC
.text:00402CC7                 mov     eax, [esp+5Ch+arg_4]
.text:00402CCB                 lea     ebx, [ecx+1]
.text:00402CCE                 mov     [ebp+0], ebx
.text:00402CD1                 mov     edi, [eax+ecx*4]
.text:00402CD4                 mov     [ebp+0Ch], edi
.text:00402CD7                 jmp     loc_402C1F
.text:00402CDC ; ---------------------------------------------------------------------------
.text:00402CDC
.text:00402CDC loc_402CDC:                             ; CODE XREF: sub_402530+795↑j
.text:00402CDC                 mov     edx, [esp+5Ch+var_14]
.text:00402CE0                 test    edx, edx
.text:00402CE2                 jnz     short loc_402CF7
.text:00402CE4
.text:00402CE4 loc_402CE4:                             ; CODE XREF: sub_402530+7FE↓j
.text:00402CE4                 mov     edx, [ebp+14h]
.text:00402CE7                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402CEA                 call    strlen
.text:00402CEF                 add     [ebp+14h], eax
.text:00402CF2                 jmp     loc_402919
.text:00402CF7 ; ---------------------------------------------------------------------------
.text:00402CF7
.text:00402CF7 loc_402CF7:                             ; CODE XREF: sub_402530+7B2↑j
.text:00402CF7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402CFE                 call    ds:libintl_gettext
.text:00402D04                 mov     ecx, [ebp+0]
.text:00402D07                 mov     ebx, [esp+5Ch+arg_4]
.text:00402D0B                 mov     edi, [ebx+ecx*4-4]
.text:00402D0F                 mov     ecx, ds:_iob
.text:00402D15                 mov     [esp+5Ch+var_50], edi
.text:00402D19                 mov     esi, [ebx]
.text:00402D1B                 add     ecx, 40h ; '@'
.text:00402D1E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402D22                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402D25                 mov     [esp+5Ch+MaxCount], esi
.text:00402D29                 call    fprintf
.text:00402D2E                 jmp     short loc_402CE4
.text:00402D30 ; ---------------------------------------------------------------------------
.text:00402D30
.text:00402D30 loc_402D30:                             ; CODE XREF: sub_402530+67F↑j
.text:00402D30                                         ; sub_402530+6CF↑j
.text:00402D30                 mov     dword ptr [ebp+14h], 0
.text:00402D37                 mov     eax, 57h ; 'W'
.text:00402D3C                 jmp     loc_402687
.text:00402D41 ; ---------------------------------------------------------------------------
.text:00402D41
.text:00402D41 loc_402D41:                             ; CODE XREF: sub_402530+6C3↑j
.text:00402D41                 mov     edi, [esp+5Ch+var_14]
.text:00402D45                 test    edi, edi
.text:00402D47                 jnz     short loc_402D5F
.text:00402D49
.text:00402D49 loc_402D49:                             ; CODE XREF: sub_402530+865↓j
.text:00402D49                 mov     edx, [ebp+14h]
.text:00402D4C                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402D4F                 call    strlen
.text:00402D54                 add     [ebp+14h], eax
.text:00402D57                 inc     dword ptr [ebp+0]
.text:00402D5A                 jmp     loc_402888
.text:00402D5F ; ---------------------------------------------------------------------------
.text:00402D5F
.text:00402D5F loc_402D5F:                             ; CODE XREF: sub_402530+817↑j
.text:00402D5F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402D66                 call    ds:libintl_gettext
.text:00402D6C                 mov     ecx, [ebp+0]
.text:00402D6F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402D73                 mov     edi, [ebx+ecx*4]
.text:00402D76                 mov     ecx, ds:_iob
.text:00402D7C                 mov     [esp+5Ch+var_50], edi
.text:00402D80                 mov     esi, [ebx]
.text:00402D82                 add     ecx, 40h ; '@'
.text:00402D85                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402D89                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402D8C                 mov     [esp+5Ch+MaxCount], esi
.text:00402D90                 call    fprintf
.text:00402D95                 jmp     short loc_402D49
.text:00402D97 ; ---------------------------------------------------------------------------
.text:00402D97
.text:00402D97 loc_402D97:                             ; CODE XREF: sub_402530+6A0↑j
.text:00402D97                 mov     edx, [ebp+14h]
.text:00402D9A                 mov     ebx, edi
.text:00402D9C                 mov     ecx, [esi]
.text:00402D9E                 sub     ebx, edx
.text:00402DA0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402DA3                 call    strlen
.text:00402DA8                 cmp     ebx, eax
.text:00402DAA                 jz      short loc_402DD2
.text:00402DAC                 mov     ebx, [esp+5Ch+var_2C]
.text:00402DB0                 test    ebx, ebx
.text:00402DB2                 jz      short loc_402DC1
.text:00402DB4                 mov     [esp+5Ch+var_34], 1
.text:00402DBC                 jmp     loc_402BD6
.text:00402DC1 ; ---------------------------------------------------------------------------
.text:00402DC1
.text:00402DC1 loc_402DC1:                             ; CODE XREF: sub_402530+882↑j
.text:00402DC1                 mov     [esp+5Ch+var_2C], esi
.text:00402DC5                 mov     ecx, [esp+5Ch+var_3C]
.text:00402DC9                 mov     [esp+5Ch+var_38], ecx
.text:00402DCD                 jmp     loc_402BD6
.text:00402DD2 ; ---------------------------------------------------------------------------
.text:00402DD2
.text:00402DD2 loc_402DD2:                             ; CODE XREF: sub_402530+87A↑j
.text:00402DD2                 mov     [esp+5Ch+var_2C], esi
.text:00402DD6                 mov     eax, [esp+5Ch+var_3C]
.text:00402DDA                 mov     [esp+5Ch+var_30], 1
.text:00402DE2                 mov     [esp+5Ch+var_38], eax
.text:00402DE6                 jmp     loc_402BE5
.text:00402DEB ; ---------------------------------------------------------------------------
.text:00402DEB
.text:00402DEB loc_402DEB:                             ; CODE XREF: sub_402530+646↑j
.text:00402DEB                 mov     edx, [ebp+0]
.text:00402DEE                 cmp     edx, [esp+5Ch+arg_0]
.text:00402DF2                 jz      short loc_402E09
.text:00402DF4                 mov     ebx, [esp+5Ch+arg_4]
.text:00402DF8                 lea     esi, [edx+1]
.text:00402DFB                 mov     [ebp+0], esi
.text:00402DFE                 mov     edi, [ebx+edx*4]
.text:00402E01                 mov     [ebp+0Ch], edi
.text:00402E04                 jmp     loc_402B82
.text:00402E09 ; ---------------------------------------------------------------------------
.text:00402E09
.text:00402E09 loc_402E09:                             ; CODE XREF: sub_402530+8C2↑j
.text:00402E09                 mov     edi, [esp+5Ch+var_14]
.text:00402E0D                 test    edi, edi
.text:00402E0F                 jnz     short loc_402E2C
.text:00402E11
.text:00402E11 loc_402E11:                             ; CODE XREF: sub_402530+92C↓j
.text:00402E11                 mov     [ebp+8], esi
.text:00402E14                 mov     ebp, [esp+5Ch+Str]
.text:00402E18                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402E1C                 jz      short loc_402E28
.text:00402E1E                 mov     bl, 3Fh ; '?'
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402530+8FA↓j
.text:00402E20                 movsx   eax, bl
.text:00402E23                 jmp     loc_402687
.text:00402E28 ; ---------------------------------------------------------------------------
.text:00402E28
.text:00402E28 loc_402E28:                             ; CODE XREF: sub_402530+8EC↑j
.text:00402E28                 mov     bl, 3Ah ; ':'
.text:00402E2A                 jmp     short loc_402E20
.text:00402E2C ; ---------------------------------------------------------------------------
.text:00402E2C
.text:00402E2C loc_402E2C:                             ; CODE XREF: sub_402530+8DF↑j
.text:00402E2C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402E33                 call    ds:libintl_gettext
.text:00402E39                 mov     [esp+5Ch+var_50], esi
.text:00402E3D                 mov     edx, [esp+5Ch+arg_4]
.text:00402E41                 mov     ecx, ds:_iob
.text:00402E47                 mov     ebx, [edx]
.text:00402E49                 add     ecx, 40h ; '@'
.text:00402E4C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402E50                 mov     [esp+5Ch+MaxCount], ebx
.text:00402E54                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402E57                 call    fprintf
.text:00402E5C                 jmp     short loc_402E11
.text:00402E5C ; ---------------------------------------------------------------------------
.text:00402E5E                 align 10h
.text:00402E60
.text:00402E60 loc_402E60:                             ; CODE XREF: sub_402530+54C↑j
.text:00402E60                                         ; sub_402530+555↑j
.text:00402E60                 mov     eax, [esp+5Ch+var_14]
.text:00402E64                 test    eax, eax
.text:00402E66                 jz      short loc_402E9F
.text:00402E68                 mov     ebx, [ebp+1Ch]
.text:00402E6B                 test    ebx, ebx
.text:00402E6D                 jz      short loc_402EA7
.text:00402E6F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402E76
.text:00402E76 loc_402E76:                             ; CODE XREF: sub_402530+97E↓j
.text:00402E76                 call    ds:libintl_gettext
.text:00402E7C                 mov     [esp+5Ch+var_50], esi
.text:00402E80                 mov     ebx, [esp+5Ch+arg_4]
.text:00402E84                 mov     edx, ds:_iob
.text:00402E8A                 mov     esi, [ebx]
.text:00402E8C                 add     edx, 40h ; '@'
.text:00402E8F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402E93                 mov     [esp+5Ch+MaxCount], esi
.text:00402E97                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402E9A                 call    fprintf
.text:00402E9F
.text:00402E9F loc_402E9F:                             ; CODE XREF: sub_402530+936↑j
.text:00402E9F                 mov     [ebp+8], edi
.text:00402EA2                 jmp     loc_402888
.text:00402EA7 ; ---------------------------------------------------------------------------
.text:00402EA7
.text:00402EA7 loc_402EA7:                             ; CODE XREF: sub_402530+93D↑j
.text:00402EA7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402EAE                 jmp     short loc_402E76
.text:00402EB0 ; ---------------------------------------------------------------------------
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402530+26E↑j
.text:00402EB0                 mov     edi, [esp+5Ch+var_14]
.text:00402EB4                 test    edi, edi
.text:00402EB6                 jnz     short loc_402ECE
.text:00402EB8
.text:00402EB8 loc_402EB8:                             ; CODE XREF: sub_402530+9D4↓j
.text:00402EB8                 mov     edx, [ebp+14h]
.text:00402EBB                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402EBE                 call    strlen
.text:00402EC3                 add     [ebp+14h], eax
.text:00402EC6                 inc     dword ptr [ebp+0]
.text:00402EC9                 jmp     loc_402A0E
.text:00402ECE ; ---------------------------------------------------------------------------
.text:00402ECE
.text:00402ECE loc_402ECE:                             ; CODE XREF: sub_402530+986↑j
.text:00402ECE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402ED5                 call    ds:libintl_gettext
.text:00402EDB                 mov     ebx, [ebp+0]
.text:00402EDE                 mov     edi, [esp+5Ch+arg_4]
.text:00402EE2                 mov     ecx, [edi+ebx*4]
.text:00402EE5                 mov     ebx, ds:_iob
.text:00402EEB                 mov     [esp+5Ch+var_50], ecx
.text:00402EEF                 mov     esi, [edi]
.text:00402EF1                 add     ebx, 40h ; '@'
.text:00402EF4                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402EF8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402EFB                 mov     [esp+5Ch+MaxCount], esi
.text:00402EFF                 call    fprintf
.text:00402F04                 jmp     short loc_402EB8
.text:00402F06 ; ---------------------------------------------------------------------------
.text:00402F06
.text:00402F06 loc_402F06:                             ; CODE XREF: sub_402530+246↑j
.text:00402F06                 mov     ecx, [ebp+14h]
.text:00402F09                 mov     ebx, edi
.text:00402F0B                 mov     edx, [esi]
.text:00402F0D                 sub     ebx, ecx
.text:00402F0F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402F12                 call    strlen
.text:00402F17                 cmp     ebx, eax
.text:00402F19                 jz      short loc_402F71
.text:00402F1B                 mov     ebx, [esp+5Ch+var_18]
.text:00402F1F                 test    ebx, ebx
.text:00402F21                 jz      short loc_402F60
.text:00402F23                 mov     edx, [esp+5Ch+arg_14]
.text:00402F27                 test    edx, edx
.text:00402F29                 jnz     short loc_402F37
.text:00402F2B                 mov     ecx, [esp+5Ch+var_18]
.text:00402F2F                 mov     ebx, [esi+4]
.text:00402F32                 cmp     [ecx+4], ebx
.text:00402F35                 jz      short loc_402F44
.text:00402F37
.text:00402F37 loc_402F37:                             ; CODE XREF: sub_402530+9F9↑j
.text:00402F37                                         ; sub_402530+A1A↓j ...
.text:00402F37                 mov     [esp+5Ch+var_20], 1
.text:00402F3F                 jmp     loc_40277C
.text:00402F44 ; ---------------------------------------------------------------------------
.text:00402F44
.text:00402F44 loc_402F44:                             ; CODE XREF: sub_402530+A05↑j
.text:00402F44                 mov     edx, [esi+8]
.text:00402F47                 cmp     [ecx+8], edx
.text:00402F4A                 jnz     short loc_402F37
.text:00402F4C                 mov     ebx, [esi+0Ch]
.text:00402F4F                 cmp     [ecx+0Ch], ebx
.text:00402F52                 jnz     short loc_402F37
.text:00402F54                 jmp     loc_40277C
.text:00402F54 ; ---------------------------------------------------------------------------
.text:00402F59                 align 10h
.text:00402F60
.text:00402F60 loc_402F60:                             ; CODE XREF: sub_402530+9F1↑j
.text:00402F60                 mov     [esp+5Ch+var_18], esi
.text:00402F64                 mov     eax, [esp+5Ch+var_28]
.text:00402F68                 mov     [esp+5Ch+var_24], eax
.text:00402F6C                 jmp     loc_40277C
.text:00402F71 ; ---------------------------------------------------------------------------
.text:00402F71
.text:00402F71 loc_402F71:                             ; CODE XREF: sub_402530+9E9↑j
.text:00402F71                 mov     [esp+5Ch+var_18], esi
.text:00402F75                 mov     ecx, [esp+5Ch+var_28]
.text:00402F79                 mov     [esp+5Ch+var_1C], 1
.text:00402F81                 mov     [esp+5Ch+var_24], ecx
.text:00402F85                 jmp     loc_402790
.text:00402F8A ; ---------------------------------------------------------------------------
.text:00402F8A
.text:00402F8A loc_402F8A:                             ; CODE XREF: sub_402530+1BF↑j
.text:00402F8A                 mov     eax, [esp+5Ch+Str]
.text:00402F8E                 movsx   esi, dl
.text:00402F91                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402F95                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402F98                 call    strchr
.text:00402F9D                 test    eax, eax
.text:00402F9F                 jnz     loc_402A50
.text:00402FA5                 jmp     loc_4026F5
.text:00402FAA ; ---------------------------------------------------------------------------
.text:00402FAA
.text:00402FAA loc_402FAA:                             ; CODE XREF: sub_402530+17C↑j
.text:00402FAA                 mov     ecx, 1
.text:00402FAF                 jmp     loc_4026B2
.text:00402FB4 ; ---------------------------------------------------------------------------
.text:00402FB4
.text:00402FB4 loc_402FB4:                             ; CODE XREF: sub_402530+D4↑j
.text:00402FB4                                         ; sub_402530+130↑j
.text:00402FB4                 mov     eax, [ebp+20h]
.text:00402FB7                 cmp     eax, [ebp+24h]
.text:00402FBA                 jz      loc_402690
.text:00402FC0                 mov     [ebp+0], eax
.text:00402FC3                 jmp     loc_402690
.text:00402FC8 ; ---------------------------------------------------------------------------
.text:00402FC8
.text:00402FC8 loc_402FC8:                             ; CODE XREF: sub_402530+FE↑j
.text:00402FC8                 mov     [ebp+20h], eax
.text:00402FCB                 jmp     loc_402650
.text:00402FD0 ; ---------------------------------------------------------------------------
.text:00402FD0
.text:00402FD0 loc_402FD0:                             ; CODE XREF: sub_402530+CA↑j
.text:00402FD0                 mov     edx, [ebp+20h]
.text:00402FD3                 mov     eax, [ebp+24h]
.text:00402FD6                 cmp     edx, eax
.text:00402FD8                 jz      short loc_403050
.text:00402FDA                 cmp     eax, ebx
.text:00402FDC                 jz      short loc_402FF1
.text:00402FDE                 mov     [esp+5Ch+Str2], ebp
.text:00402FE2                 mov     ebx, [esp+5Ch+arg_4]
.text:00402FE6                 mov     [esp+5Ch+Str1], ebx
.text:00402FE9                 call    sub_4031E0
.text:00402FEE                 mov     ebx, [ebp+0]
.text:00402FF1
.text:00402FF1 loc_402FF1:                             ; CODE XREF: sub_402530+AAC↑j
.text:00402FF1                                         ; sub_402530+B22↓j ...
.text:00402FF1                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402FF5                 jge     short loc_403040
.text:00402FF7                 mov     esi, [esp+5Ch+arg_4]
.text:00402FFB                 mov     eax, [esi+ebx*4]
.text:00402FFE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403001                 jz      short loc_403048
.text:00403003                 lea     esi, [esi+0]
.text:00403009                 lea     edi, [edi+0]
.text:00403010
.text:00403010 loc_403010:                             ; CODE XREF: sub_402530+AFC↓j
.text:00403010                                         ; sub_402530+B1C↓j
.text:00403010                 lea     eax, [ebx+1]
.text:00403013                 mov     ebx, eax
.text:00403015                 mov     [ebp+0], eax
.text:00403018                 cmp     eax, [esp+5Ch+arg_0]
.text:0040301C                 jge     short loc_403040
.text:0040301E                 mov     edi, [esp+5Ch+arg_4]
.text:00403022                 mov     edx, [edi+eax*4]
.text:00403025                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403028                 jz      short loc_403030
.text:0040302A
.text:0040302A loc_40302A:                             ; CODE XREF: sub_402530+B04↓j
.text:0040302A                 mov     ebx, eax
.text:0040302C                 jmp     short loc_403010
.text:0040302C ; ---------------------------------------------------------------------------
.text:0040302E                 align 10h
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: sub_402530+AF8↑j
.text:00403030                 cmp     byte ptr [edx+1], 0
.text:00403034                 jz      short loc_40302A
.text:00403036                 lea     esi, [esi+0]
.text:00403039                 lea     edi, [edi+0]
.text:00403040
.text:00403040 loc_403040:                             ; CODE XREF: sub_402530+AC5↑j
.text:00403040                                         ; sub_402530+AEC↑j ...
.text:00403040                 mov     [ebp+24h], ebx
.text:00403043                 jmp     loc_402600
.text:00403048 ; ---------------------------------------------------------------------------
.text:00403048
.text:00403048 loc_403048:                             ; CODE XREF: sub_402530+AD1↑j
.text:00403048                 cmp     byte ptr [eax+1], 0
.text:0040304C                 jz      short loc_403010
.text:0040304E                 jmp     short loc_403040
.text:00403050 ; ---------------------------------------------------------------------------
.text:00403050
.text:00403050 loc_403050:                             ; CODE XREF: sub_402530+AA8↑j
.text:00403050                 cmp     edx, ebx
.text:00403052                 jz      short loc_402FF1
.text:00403054                 mov     [ebp+20h], ebx
.text:00403057                 jmp     short loc_402FF1
.text:00403059 ; ---------------------------------------------------------------------------
.text:00403059
.text:00403059 loc_403059:                             ; CODE XREF: sub_402530+88↑j
.text:00403059                 mov     dword ptr [ebp+18h], 0
.text:00403060                 mov     esi, [esp+5Ch+Str]
.text:00403064
.text:00403064 loc_403064:                             ; CODE XREF: sub_402530+B49↓j
.text:00403064                 inc     esi
.text:00403065                 jmp     loc_4025C8
.text:00403065 ; ---------------------------------------------------------------------------
.text:0040306A                 align 10h
.text:00403070
.text:00403070 loc_403070:                             ; CODE XREF: sub_402530+80↑j
.text:00403070                 mov     dword ptr [ebp+18h], 2
.text:00403077                 mov     esi, ecx
.text:00403079                 jmp     short loc_403064
.text:00403079 ; ---------------------------------------------------------------------------
.text:0040307B                 align 10h
.text:00403080
.text:00403080 loc_403080:                             ; CODE XREF: sub_402530+69↑j
.text:00403080                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00403087                 call    getenv
.text:0040308C                 test    eax, eax
.text:0040308E                 jz      loc_4025A4
.text:00403094                 jmp     loc_40259F
.text:00403094 ; ---------------------------------------------------------------------------
.text:00403099                 align 10h
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_402530+3F↑j
.text:004030A0                 mov     dword ptr [ebp+0], 1
.text:004030A7                 mov     ebx, 1
.text:004030AC                 jmp     loc_402580
.text:004030AC sub_402530      endp
.text:004030AC
.text:004030B1 ; ---------------------------------------------------------------------------
.text:004030B1                 jmp     short sub_4030C0
.text:004030B1 ; ---------------------------------------------------------------------------
.text:004030B3                 align 10h
.text:004030C0
.text:004030C0 ; =============== S U B R O U T I N E =======================================
.text:004030C0
.text:004030C0
.text:004030C0 ; int __cdecl sub_4030C0(int, int, char *, int, int, int, int)
.text:004030C0 sub_4030C0      proc near               ; CODE XREF: .text:004030B1↑j
.text:004030C0                                         ; sub_403800+3A↓p ...
.text:004030C0
.text:004030C0 var_2C          = dword ptr -2Ch
.text:004030C0 var_28          = dword ptr -28h
.text:004030C0 Str             = dword ptr -24h
.text:004030C0 var_20          = dword ptr -20h
.text:004030C0 var_1C          = dword ptr -1Ch
.text:004030C0 var_18          = dword ptr -18h
.text:004030C0 var_14          = dword ptr -14h
.text:004030C0 var_10          = dword ptr -10h
.text:004030C0 arg_0           = dword ptr  4
.text:004030C0 arg_4           = dword ptr  8
.text:004030C0 arg_8           = dword ptr  0Ch
.text:004030C0 arg_C           = dword ptr  10h
.text:004030C0 arg_10          = dword ptr  14h
.text:004030C0 arg_14          = dword ptr  18h
.text:004030C0 arg_18          = dword ptr  1Ch
.text:004030C0
.text:004030C0                 sub     esp, 2Ch
.text:004030C3                 mov     edx, dword_407010
.text:004030C9                 mov     [esp+2Ch+var_10], offset dword_408000 ; int
.text:004030D1                 mov     ecx, dword_407014
.text:004030D7                 mov     ds:dword_408000, edx
.text:004030DD                 mov     edx, [esp+2Ch+arg_18]
.text:004030E1                 mov     ds:dword_408004, ecx
.text:004030E7                 mov     ecx, [esp+2Ch+arg_14]
.text:004030EB                 mov     [esp+2Ch+var_14], edx ; int
.text:004030EF                 mov     edx, [esp+2Ch+arg_10]
.text:004030F3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004030F7                 mov     ecx, [esp+2Ch+arg_C]
.text:004030FB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004030FF                 mov     edx, [esp+2Ch+arg_8]
.text:00403103                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403107                 mov     ecx, [esp+2Ch+arg_4]
.text:0040310B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040310F                 mov     edx, [esp+2Ch+arg_0]
.text:00403113                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403117                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040311A                 call    sub_402530
.text:0040311F                 mov     ecx, ds:dword_408000
.text:00403125                 mov     dword_407010, ecx
.text:0040312B                 mov     ecx, ds:dword_40800C
.text:00403131                 mov     ds:dword_4081B0, ecx
.text:00403137                 mov     ecx, ds:dword_408008
.text:0040313D                 mov     dword_407018, ecx
.text:00403143                 add     esp, 2Ch
.text:00403146                 retn
.text:00403146 sub_4030C0      endp
.text:00403146
.text:00403146 ; ---------------------------------------------------------------------------
.text:00403147                 align 10h
.text:00403150                 sub     esp, 2Ch
.text:00403153                 mov     edx, dword_407010
.text:00403159                 mov     dword ptr [esp+1Ch], offset dword_408000
.text:00403161                 mov     ecx, dword_407014
.text:00403167                 mov     dword ptr [esp+18h], 1
.text:0040316F                 mov     ds:dword_408000, edx
.text:00403175                 mov     edx, [esp+38h]
.text:00403179                 mov     ds:dword_408004, ecx
.text:0040317F                 mov     ecx, [esp+34h]
.text:00403183                 mov     [esp+8], edx
.text:00403187                 mov     edx, [esp+30h]
.text:0040318B                 mov     [esp+4], ecx
.text:0040318F                 mov     dword ptr [esp+14h], 0
.text:00403197                 mov     dword ptr [esp+10h], 0
.text:0040319F                 mov     dword ptr [esp+0Ch], 0
.text:004031A7                 mov     [esp], edx
.text:004031AA                 call    sub_402530
.text:004031AF                 mov     ecx, ds:dword_408000
.text:004031B5                 mov     dword_407010, ecx
.text:004031BB                 mov     ecx, ds:dword_40800C
.text:004031C1                 mov     ds:dword_4081B0, ecx
.text:004031C7                 mov     ecx, ds:dword_408008
.text:004031CD                 mov     dword_407018, ecx
.text:004031D3                 add     esp, 2Ch
.text:004031D6                 retn
.text:004031D6 ; ---------------------------------------------------------------------------
.text:004031D7                 align 10h
.text:004031E0
.text:004031E0 ; =============== S U B R O U T I N E =======================================
.text:004031E0
.text:004031E0
.text:004031E0 sub_4031E0      proc near               ; CODE XREF: sub_402530+113↑p
.text:004031E0                                         ; sub_402530+AB9↑p
.text:004031E0
.text:004031E0 var_2C          = dword ptr -2Ch
.text:004031E0 var_28          = dword ptr -28h
.text:004031E0 var_24          = dword ptr -24h
.text:004031E0 var_20          = dword ptr -20h
.text:004031E0 var_1C          = dword ptr -1Ch
.text:004031E0 var_18          = dword ptr -18h
.text:004031E0 var_14          = dword ptr -14h
.text:004031E0 arg_0           = dword ptr  4
.text:004031E0 arg_4           = dword ptr  8
.text:004031E0
.text:004031E0                 push    ebp
.text:004031E1                 push    edi
.text:004031E2                 push    esi
.text:004031E3                 push    ebx
.text:004031E4                 sub     esp, 1Ch
.text:004031E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004031EB                 mov     eax, [esp+2Ch+arg_4]
.text:004031EF                 mov     ebx, [esp+2Ch+arg_4]
.text:004031F3                 mov     edx, [ecx+20h]
.text:004031F6                 mov     edi, [esp+2Ch+arg_0]
.text:004031FA                 mov     ecx, [ebx]
.text:004031FC                 mov     [esp+2Ch+var_2C], edx
.text:004031FF                 mov     [esp+2Ch+var_14], edx
.text:00403203                 mov     edx, [eax+24h]
.text:00403206                 mov     [esp+2Ch+var_28], ecx
.text:0040320A                 mov     [esp+2Ch+var_1C], ecx
.text:0040320E                 cmp     ecx, edx
.text:00403210                 mov     [esp+2Ch+var_18], edx
.text:00403214                 jle     short loc_403290
.text:00403216                 mov     esi, [esp+2Ch+var_2C]
.text:00403219                 cmp     edx, esi
.text:0040321B                 jle     short loc_403290
.text:0040321D                 lea     esi, [esi+0]
.text:00403220
.text:00403220 loc_403220:                             ; CODE XREF: sub_4031E0+A1↓j
.text:00403220                 mov     ebx, [esp+2Ch+var_1C]
.text:00403224                 mov     edx, [esp+2Ch+var_18]
.text:00403228                 mov     ebp, [esp+2Ch+var_18]
.text:0040322C                 mov     eax, [esp+2Ch+var_14]
.text:00403230                 sub     ebx, edx
.text:00403232                 mov     [esp+2Ch+var_20], ebx
.text:00403236                 sub     ebp, eax
.text:00403238                 cmp     ebx, ebp
.text:0040323A                 jle     short loc_4032B5
.text:0040323C                 xor     esi, esi
.text:0040323E                 cmp     esi, ebp
.text:00403240                 jge     short loc_40326D
.text:00403242                 mov     ecx, [esp+2Ch+var_1C]
.text:00403246                 sub     ecx, ebp
.text:00403248                 mov     [esp+2Ch+var_24], ecx
.text:0040324C                 lea     esi, [esi+0]
.text:00403250
.text:00403250 loc_403250:                             ; CODE XREF: sub_4031E0+8B↓j
.text:00403250                 mov     ecx, [esp+2Ch+var_14]
.text:00403254                 mov     edx, [esp+2Ch+var_24]
.text:00403258                 add     ecx, esi
.text:0040325A                 add     edx, esi
.text:0040325C                 mov     ebx, [edi+ecx*4]
.text:0040325F                 mov     eax, [edi+edx*4]
.text:00403262                 inc     esi
.text:00403263                 cmp     esi, ebp
.text:00403265                 mov     [edi+ecx*4], eax
.text:00403268                 mov     [edi+edx*4], ebx
.text:0040326B                 jl      short loc_403250
.text:0040326D
.text:0040326D loc_40326D:                             ; CODE XREF: sub_4031E0+60↑j
.text:0040326D                 sub     [esp+2Ch+var_1C], ebp
.text:00403271
.text:00403271 loc_403271:                             ; CODE XREF: sub_4031E0+107↓j
.text:00403271                 mov     eax, [esp+2Ch+var_18]
.text:00403275                 cmp     [esp+2Ch+var_1C], eax
.text:00403279                 jle     short loc_403290
.text:0040327B                 mov     ebp, [esp+2Ch+var_14]
.text:0040327F                 cmp     eax, ebp
.text:00403281                 jg      short loc_403220
.text:00403283                 lea     esi, [esi+0]
.text:00403289                 lea     edi, [edi+0]
.text:00403290
.text:00403290 loc_403290:                             ; CODE XREF: sub_4031E0+34↑j
.text:00403290                                         ; sub_4031E0+3B↑j ...
.text:00403290                 mov     esi, [esp+2Ch+var_28]
.text:00403294                 mov     ecx, [esp+2Ch+var_18]
.text:00403298                 mov     eax, [esp+2Ch+var_2C]
.text:0040329B                 mov     edi, [esp+2Ch+arg_4]
.text:0040329F                 mov     edx, [esp+2Ch+var_28]
.text:004032A3                 sub     esi, ecx
.text:004032A5                 add     esi, eax
.text:004032A7                 mov     [edi+20h], esi
.text:004032AA                 mov     [edi+24h], edx
.text:004032AD                 add     esp, 1Ch
.text:004032B0                 pop     ebx
.text:004032B1                 pop     esi
.text:004032B2                 pop     edi
.text:004032B3                 pop     ebp
.text:004032B4                 retn
.text:004032B5 ; ---------------------------------------------------------------------------
.text:004032B5
.text:004032B5 loc_4032B5:                             ; CODE XREF: sub_4031E0+5A↑j
.text:004032B5                 xor     esi, esi
.text:004032B7                 cmp     esi, [esp+2Ch+var_20]
.text:004032BB                 jge     short loc_4032DF
.text:004032BD                 lea     esi, [esi+0]
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_4031E0+FD↓j
.text:004032C0                 mov     ebx, [esp+2Ch+var_14]
.text:004032C4                 mov     ebp, [esp+2Ch+var_18]
.text:004032C8                 add     ebx, esi
.text:004032CA                 add     ebp, esi
.text:004032CC                 mov     edx, [edi+ebx*4]
.text:004032CF                 inc     esi
.text:004032D0                 cmp     esi, [esp+2Ch+var_20]
.text:004032D4                 mov     ecx, [edi+ebp*4]
.text:004032D7                 mov     [edi+ebx*4], ecx
.text:004032DA                 mov     [edi+ebp*4], edx
.text:004032DD                 jl      short loc_4032C0
.text:004032DF
.text:004032DF loc_4032DF:                             ; CODE XREF: sub_4031E0+DB↑j
.text:004032DF                 mov     esi, [esp+2Ch+var_20]
.text:004032E3                 add     [esp+2Ch+var_14], esi
.text:004032E7                 jmp     short loc_403271
.text:004032E7 sub_4031E0      endp
.text:004032E7
.text:004032E7 ; ---------------------------------------------------------------------------
.text:004032E9                 align 20h
.text:00403300 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403300                                         ; DATA XREF: .data:Buffer↓o
.text:00403332 ; const char aSSS[]
.text:00403332 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4035F0+50↓o
.text:0040333E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040333E                                         ; DATA XREF: sub_4035F0:loc_403691↓o
.text:0040334E                 align 20h
.text:00403360 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403360                                         ; DATA XREF: sub_4035F0+100↓o
.text:00403360                 db 'ere is NO',0Ah
.text:00403360                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403360                 db 'R PURPOSE.',0Ah,0
.text:004033F8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004033F8                                         ; DATA XREF: sub_4035F0:loc_403731↓o
.text:0040340F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040340F                                         ; DATA XREF: sub_4035F0:loc_40373D↓o
.text:0040342B                 align 20h
.text:00403440 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403440                                         ; DATA XREF: sub_4035F0:loc_403749↓o
.text:00403440                 db 'and %s.',0Ah,0
.text:00403460 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403460                                         ; DATA XREF: sub_4035F0:loc_403755↓o
.text:00403460                 db '%s, and %s.',0Ah,0
.text:00403484                 align 20h
.text:004034A0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004034A0                                         ; DATA XREF: sub_4035F0:loc_403761↓o
.text:004034A0                 db '%s, %s, and %s.',0Ah,0
.text:004034C8                 align 20h
.text:004034E0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004034E0                                         ; DATA XREF: sub_4035F0:loc_40376D↓o
.text:004034E0                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040350C                 align 20h
.text:00403520 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403520                                         ; DATA XREF: sub_4035F0:loc_403779↓o
.text:00403520                 db '%s, %s, %s, %s,',0Ah
.text:00403520                 db 'and %s.',0Ah,0
.text:00403550                 align 20h
.text:00403560 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403560                                         ; DATA XREF: sub_4035F0:loc_403785↓o
.text:00403560                 db '%s, %s, %s, %s,',0Ah
.text:00403560                 db '%s, and %s.',0Ah,0
.text:00403594                 align 10h
.text:004035A0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004035A0                                         ; DATA XREF: sub_4035F0:def_40365D↓o
.text:004035A0                 db '%s, %s, %s, %s,',0Ah
.text:004035A0                 db '%s, %s, and others.',0Ah,0
.text:004035DC ; const char aSS[]
.text:004035DC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4035F0+1B5↓o
.text:004035E3                 align 10h
.text:004035F0
.text:004035F0 ; =============== S U B R O U T I N E =======================================
.text:004035F0
.text:004035F0
.text:004035F0 ; int __cdecl sub_4035F0(FILE *, FILE *, int, int, va_list)
.text:004035F0 sub_4035F0      proc near               ; CODE XREF: sub_4037C0+2A↓p
.text:004035F0
.text:004035F0 Stream          = dword ptr -2Ch
.text:004035F0 Format          = dword ptr -28h
.text:004035F0 ArgList         = dword ptr -24h
.text:004035F0 var_20          = dword ptr -20h
.text:004035F0 var_1C          = dword ptr -1Ch
.text:004035F0 var_14          = dword ptr -14h
.text:004035F0 arg_0           = dword ptr  4
.text:004035F0 arg_4           = dword ptr  8
.text:004035F0 arg_8           = dword ptr  0Ch
.text:004035F0 arg_C           = dword ptr  10h
.text:004035F0 arg_10          = dword ptr  14h
.text:004035F0
.text:004035F0                 push    ebp
.text:004035F1                 push    edi
.text:004035F2                 push    esi
.text:004035F3                 push    ebx
.text:004035F4                 sub     esp, 1Ch
.text:004035F7                 xor     ebx, ebx
.text:004035F9                 mov     edi, [esp+2Ch+arg_10]
.text:004035FD                 mov     edx, [esp+2Ch+arg_8]
.text:00403601                 mov     esi, [esp+2Ch+arg_0]
.text:00403605                 mov     eax, [edi]
.text:00403607                 mov     ecx, [esp+2Ch+arg_4]
.text:0040360B                 mov     [esp+2Ch+var_14], edx
.text:0040360F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403613                 lea     edx, [edi+4]
.text:00403616                 test    eax, eax
.text:00403618                 jz      short loc_40362C
.text:0040361A                 lea     esi, [esi+0]
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_4035F0+3A↓j
.text:00403620                 mov     eax, edx
.text:00403622                 inc     ebx
.text:00403623                 mov     eax, [eax]
.text:00403625                 add     edx, 4
.text:00403628                 test    eax, eax
.text:0040362A                 jnz     short loc_403620
.text:0040362C
.text:0040362C loc_40362C:                             ; CODE XREF: sub_4035F0+28↑j
.text:0040362C                 test    ecx, ecx
.text:0040362E                 jz      loc_40379D
.text:00403634                 mov     [esp+2Ch+var_1C], ebp
.text:00403638                 mov     edx, [esp+2Ch+var_14]
.text:0040363C                 mov     [esp+2Ch+ArgList], ecx
.text:00403640                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00403648                 mov     [esp+2Ch+var_20], edx
.text:0040364C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040364F                 call    fprintf
.text:00403654
.text:00403654 loc_403654:                             ; CODE XREF: sub_4035F0+1C9↓j
.text:00403654                 cmp     ebx, 9          ; switch 10 cases
.text:00403657                 ja      def_40365D      ; jumptable 0040365D default case
.text:0040365D                 jmp     ds:jpt_40365D[ebx*4] ; switch jump
.text:0040365D ; ---------------------------------------------------------------------------
.text:00403664 jpt_40365D      dd offset loc_40368C    ; DATA XREF: sub_4035F0+6D↑r
.text:00403664                 dd offset loc_403691    ; jump table for switch statement
.text:00403664                 dd offset loc_403731
.text:00403664                 dd offset loc_40373D
.text:00403664                 dd offset loc_403749
.text:00403664                 dd offset loc_403755
.text:00403664                 dd offset loc_403761
.text:00403664                 dd offset loc_40376D
.text:00403664                 dd offset loc_403779
.text:00403664                 dd offset loc_403785
.text:0040368C ; ---------------------------------------------------------------------------
.text:0040368C
.text:0040368C loc_40368C:                             ; CODE XREF: sub_4035F0+6D↑j
.text:0040368C                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:0040368C                 call    abort           ; jumptable 0040365D case 0
.text:00403691 ; ---------------------------------------------------------------------------
.text:00403691
.text:00403691 loc_403691:                             ; CODE XREF: sub_4035F0+6D↑j
.text:00403691                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:00403691                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040365D case 1
.text:00403698                 nop
.text:00403699                 lea     esi, [esi+0]
.text:004036A0
.text:004036A0 loc_4036A0:                             ; CODE XREF: sub_4035F0+148↓j
.text:004036A0                                         ; sub_4035F0+154↓j ...
.text:004036A0                 call    ds:libintl_gettext
.text:004036A6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004036AA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004036AD                 mov     [esp+2Ch+Format], eax ; Format
.text:004036B1                 call    vfprintf
.text:004036B6                 mov     ebx, [esi+4]
.text:004036B9                 dec     ebx
.text:004036BA                 test    ebx, ebx
.text:004036BC                 mov     [esi+4], ebx
.text:004036BF                 js      short loc_40371F
.text:004036C1                 mov     edi, [esi]
.text:004036C3                 mov     byte ptr [edi], 0Ah
.text:004036C6                 inc     dword ptr [esi]
.text:004036C8
.text:004036C8 loc_4036C8:                             ; CODE XREF: sub_4035F0+13F↓j
.text:004036C8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004036CC                 mov     edx, Buffer
.text:004036D2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004036D5                 call    fputs
.text:004036DA                 mov     ebp, [esi+4]
.text:004036DD                 dec     ebp
.text:004036DE                 test    ebp, ebp
.text:004036E0                 mov     [esi+4], ebp
.text:004036E3                 js      short loc_40370D
.text:004036E5                 mov     ecx, [esi]
.text:004036E7                 mov     byte ptr [ecx], 0Ah
.text:004036EA                 inc     dword ptr [esi]
.text:004036EC
.text:004036EC loc_4036EC:                             ; CODE XREF: sub_4035F0+12D↓j
.text:004036EC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004036F0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004036F7                 call    ds:libintl_gettext
.text:004036FD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403701                 add     esp, 1Ch
.text:00403704                 pop     ebx
.text:00403705                 pop     esi
.text:00403706                 pop     edi
.text:00403707                 pop     ebp
.text:00403708                 jmp     fputs
.text:0040370D ; ---------------------------------------------------------------------------
.text:0040370D
.text:0040370D loc_40370D:                             ; CODE XREF: sub_4035F0+F3↑j
.text:0040370D                 mov     [esp+2Ch+Format], esi ; File
.text:00403711                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403718                 call    _flsbuf
.text:0040371D                 jmp     short loc_4036EC
.text:0040371F ; ---------------------------------------------------------------------------
.text:0040371F
.text:0040371F loc_40371F:                             ; CODE XREF: sub_4035F0+CF↑j
.text:0040371F                 mov     [esp+2Ch+Format], esi ; File
.text:00403723                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040372A                 call    _flsbuf
.text:0040372F                 jmp     short loc_4036C8
.text:00403731 ; ---------------------------------------------------------------------------
.text:00403731
.text:00403731 loc_403731:                             ; CODE XREF: sub_4035F0+6D↑j
.text:00403731                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:00403731                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040365D case 2
.text:00403738                 jmp     loc_4036A0
.text:0040373D ; ---------------------------------------------------------------------------
.text:0040373D
.text:0040373D loc_40373D:                             ; CODE XREF: sub_4035F0+6D↑j
.text:0040373D                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:0040373D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040365D case 3
.text:00403744                 jmp     loc_4036A0
.text:00403749 ; ---------------------------------------------------------------------------
.text:00403749
.text:00403749 loc_403749:                             ; CODE XREF: sub_4035F0+6D↑j
.text:00403749                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:00403749                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040365D case 4
.text:00403750                 jmp     loc_4036A0
.text:00403755 ; ---------------------------------------------------------------------------
.text:00403755
.text:00403755 loc_403755:                             ; CODE XREF: sub_4035F0+6D↑j
.text:00403755                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:00403755                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040365D case 5
.text:0040375C                 jmp     loc_4036A0
.text:00403761 ; ---------------------------------------------------------------------------
.text:00403761
.text:00403761 loc_403761:                             ; CODE XREF: sub_4035F0+6D↑j
.text:00403761                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:00403761                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040365D case 6
.text:00403768                 jmp     loc_4036A0
.text:0040376D ; ---------------------------------------------------------------------------
.text:0040376D
.text:0040376D loc_40376D:                             ; CODE XREF: sub_4035F0+6D↑j
.text:0040376D                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:0040376D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040365D case 7
.text:00403774                 jmp     loc_4036A0
.text:00403779 ; ---------------------------------------------------------------------------
.text:00403779
.text:00403779 loc_403779:                             ; CODE XREF: sub_4035F0+6D↑j
.text:00403779                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:00403779                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040365D case 8
.text:00403780                 jmp     loc_4036A0
.text:00403785 ; ---------------------------------------------------------------------------
.text:00403785
.text:00403785 loc_403785:                             ; CODE XREF: sub_4035F0+6D↑j
.text:00403785                                         ; DATA XREF: sub_4035F0:jpt_40365D↑o
.text:00403785                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040365D case 9
.text:0040378C                 jmp     loc_4036A0
.text:00403791 ; ---------------------------------------------------------------------------
.text:00403791
.text:00403791 def_40365D:                             ; CODE XREF: sub_4035F0+67↑j
.text:00403791                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040365D default case
.text:00403798                 jmp     loc_4036A0
.text:0040379D ; ---------------------------------------------------------------------------
.text:0040379D
.text:0040379D loc_40379D:                             ; CODE XREF: sub_4035F0+3E↑j
.text:0040379D                 mov     [esp+2Ch+var_20], ebp
.text:004037A1                 mov     ecx, [esp+2Ch+var_14]
.text:004037A5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004037AD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004037B0                 mov     [esp+2Ch+ArgList], ecx
.text:004037B4                 call    fprintf
.text:004037B9                 jmp     loc_403654
.text:004037B9 sub_4035F0      endp
.text:004037B9
.text:004037B9 ; ---------------------------------------------------------------------------
.text:004037BE                 align 10h
.text:004037C0
.text:004037C0 ; =============== S U B R O U T I N E =======================================
.text:004037C0
.text:004037C0
.text:004037C0 ; int __cdecl sub_4037C0(FILE *, FILE *, int, int, char)
.text:004037C0 sub_4037C0      proc near               ; CODE XREF: sub_4018B0+3AC↑p
.text:004037C0
.text:004037C0 var_1C          = dword ptr -1Ch
.text:004037C0 var_18          = dword ptr -18h
.text:004037C0 var_14          = dword ptr -14h
.text:004037C0 var_10          = dword ptr -10h
.text:004037C0 var_C           = dword ptr -0Ch
.text:004037C0 arg_0           = dword ptr  4
.text:004037C0 arg_4           = dword ptr  8
.text:004037C0 arg_8           = dword ptr  0Ch
.text:004037C0 arg_C           = dword ptr  10h
.text:004037C0 arg_10          = byte ptr  14h
.text:004037C0
.text:004037C0                 sub     esp, 1Ch
.text:004037C3                 mov     edx, [esp+1Ch+arg_C]
.text:004037C7                 lea     ecx, [esp+1Ch+arg_10]
.text:004037CB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004037CF                 mov     ecx, [esp+1Ch+arg_8]
.text:004037D3                 mov     [esp+1Ch+var_10], edx ; int
.text:004037D7                 mov     edx, [esp+1Ch+arg_4]
.text:004037DB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004037DF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004037E3                 mov     edx, [esp+1Ch+arg_0]
.text:004037E7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004037EA                 call    sub_4035F0
.text:004037EF                 add     esp, 1Ch
.text:004037F2                 retn
.text:004037F2 sub_4037C0      endp
.text:004037F2
.text:004037F2 ; ---------------------------------------------------------------------------
.text:004037F3                 align 10h
.text:00403800
.text:00403800 ; =============== S U B R O U T I N E =======================================
.text:00403800
.text:00403800
.text:00403800 ; int __cdecl sub_403800(int, int, char *, int, int)
.text:00403800 sub_403800      proc near               ; CODE XREF: sub_4018B0+A2↑p
.text:00403800
.text:00403800 var_1C          = dword ptr -1Ch
.text:00403800 var_18          = dword ptr -18h
.text:00403800 var_14          = dword ptr -14h
.text:00403800 var_10          = dword ptr -10h
.text:00403800 var_C           = dword ptr -0Ch
.text:00403800 var_8           = dword ptr -8
.text:00403800 var_4           = dword ptr -4
.text:00403800 arg_0           = dword ptr  4
.text:00403800 arg_4           = dword ptr  8
.text:00403800 arg_8           = dword ptr  0Ch
.text:00403800 arg_C           = dword ptr  10h
.text:00403800 arg_10          = dword ptr  14h
.text:00403800
.text:00403800                 sub     esp, 1Ch
.text:00403803                 mov     edx, [esp+1Ch+arg_C]
.text:00403807                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040380F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403813                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040381B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040381F                 mov     edx, [esp+1Ch+arg_4]
.text:00403823                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403827                 mov     ecx, [esp+1Ch+arg_8]
.text:0040382B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040382F                 mov     edx, [esp+1Ch+arg_0]
.text:00403833                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403837                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040383A                 call    sub_4030C0
.text:0040383F                 add     esp, 1Ch
.text:00403842                 retn
.text:00403842 sub_403800      endp
.text:00403842
.text:00403842 ; ---------------------------------------------------------------------------
.text:00403843                 align 10h
.text:00403850                 sub     esp, 2Ch
.text:00403853                 mov     edx, [esp+44h]
.text:00403857                 mov     dword ptr [esp+18h], 0
.text:0040385F                 mov     ecx, [esp+40h]
.text:00403863                 mov     dword ptr [esp+14h], 0
.text:0040386B                 mov     [esp+1Ch], edx
.text:0040386F                 mov     edx, [esp+3Ch]
.text:00403873                 mov     [esp+10h], ecx
.text:00403877                 mov     ecx, [esp+38h]
.text:0040387B                 mov     [esp+0Ch], edx
.text:0040387F                 mov     edx, [esp+34h]
.text:00403883                 mov     [esp+8], ecx
.text:00403887                 mov     [esp+4], edx
.text:0040388B                 mov     edx, [esp+30h]
.text:0040388F                 mov     [esp], edx
.text:00403892                 call    sub_402530
.text:00403897                 add     esp, 2Ch
.text:0040389A                 retn
.text:0040389A ; ---------------------------------------------------------------------------
.text:0040389B                 align 10h
.text:004038A0                 sub     esp, 1Ch
.text:004038A3                 mov     edx, [esp+2Ch]
.text:004038A7                 mov     dword ptr [esp+18h], 0
.text:004038AF                 mov     ecx, [esp+30h]
.text:004038B3                 mov     dword ptr [esp+14h], 1
.text:004038BB                 mov     [esp+0Ch], edx
.text:004038BF                 mov     edx, [esp+24h]
.text:004038C3                 mov     [esp+10h], ecx
.text:004038C7                 mov     ecx, [esp+28h]
.text:004038CB                 mov     [esp+4], edx
.text:004038CF                 mov     edx, [esp+20h]
.text:004038D3                 mov     [esp+8], ecx
.text:004038D7                 mov     [esp], edx
.text:004038DA                 call    sub_4030C0
.text:004038DF                 add     esp, 1Ch
.text:004038E2                 retn
.text:004038E2 ; ---------------------------------------------------------------------------
.text:004038E3                 align 10h
.text:004038F0                 sub     esp, 2Ch
.text:004038F3                 mov     edx, [esp+44h]
.text:004038F7                 mov     dword ptr [esp+18h], 0
.text:004038FF                 mov     ecx, [esp+40h]
.text:00403903                 mov     dword ptr [esp+14h], 1
.text:0040390B                 mov     [esp+1Ch], edx
.text:0040390F                 mov     edx, [esp+3Ch]
.text:00403913                 mov     [esp+10h], ecx
.text:00403917                 mov     ecx, [esp+38h]
.text:0040391B                 mov     [esp+0Ch], edx
.text:0040391F                 mov     edx, [esp+34h]
.text:00403923                 mov     [esp+8], ecx
.text:00403927                 mov     [esp+4], edx
.text:0040392B                 mov     edx, [esp+30h]
.text:0040392F                 mov     [esp], edx
.text:00403932                 call    sub_402530
.text:00403937                 add     esp, 2Ch
.text:0040393A                 retn
.text:0040393A ; ---------------------------------------------------------------------------
.text:0040393B                 align 10h
.text:00403940                 mov     edx, [esp+4]
.text:00403944                 mov     ds:dword_408030, edx
.text:0040394A                 retn
.text:0040394A ; ---------------------------------------------------------------------------
.text:0040394B aWriteError     db 'write error',0      ; DATA XREF: sub_403970:loc_4039B9↓o
.text:00403957 ; const char aSS_0[]
.text:00403957 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403970+77↓o
.text:0040395E ; const char aS_3[]
.text:0040395E aS_3            db '%s',0               ; DATA XREF: sub_403970+A0↓o
.text:00403961 ; ---------------------------------------------------------------------------
.text:00403961                 jmp     short sub_403970
.text:00403961 ; ---------------------------------------------------------------------------
.text:00403963                 align 10h
.text:00403970
.text:00403970 ; =============== S U B R O U T I N E =======================================
.text:00403970
.text:00403970
.text:00403970 ; void __cdecl sub_403970()
.text:00403970 sub_403970      proc near               ; CODE XREF: .text:00403961↑j
.text:00403970                                         ; DATA XREF: sub_4018B0+68↑o
.text:00403970
.text:00403970 Stream          = dword ptr -2Ch
.text:00403970 ErrorMessage    = dword ptr -28h
.text:00403970 var_24          = dword ptr -24h
.text:00403970 var_20          = byte ptr -20h
.text:00403970 var_1C          = dword ptr -1Ch
.text:00403970 var_9           = byte ptr -9
.text:00403970
.text:00403970                 push    esi
.text:00403971                 push    ebx
.text:00403972                 sub     esp, 24h
.text:00403975                 mov     edx, ds:_iob
.text:0040397B                 mov     ecx, [edx+2Ch]
.text:0040397E                 lea     esi, [edx+20h]
.text:00403981                 shr     ecx, 5
.text:00403984                 mov     bl, cl
.text:00403986                 mov     ecx, [edx+20h]
.text:00403989                 and     bl, 1
.text:0040398C                 cmp     ecx, [esi+8]
.text:0040398F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403992                 setz    [esp+2Ch+var_9]
.text:00403997                 call    fclose
.text:0040399C                 test    eax, eax
.text:0040399E                 setnz   al
.text:004039A1                 test    bl, bl
.text:004039A3                 jnz     loc_403A33
.text:004039A9                 test    al, al
.text:004039AB                 jz      short loc_403A00
.text:004039AD
.text:004039AD loc_4039AD:                             ; CODE XREF: sub_403970+CD↓j
.text:004039AD                 call    _errno
.text:004039B2                 mov     esi, [eax]
.text:004039B4
.text:004039B4 loc_4039B4:                             ; CODE XREF: sub_403970+C7↓j
.text:004039B4                 cmp     esi, 9
.text:004039B7                 jz      short loc_403A26
.text:004039B9
.text:004039B9 loc_4039B9:                             ; CODE XREF: sub_403970+B8↓j
.text:004039B9                                         ; sub_403970+C1↓j
.text:004039B9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:004039C0                 call    ds:libintl_gettext
.text:004039C6                 mov     ebx, eax
.text:004039C8                 mov     eax, ds:dword_408030
.text:004039CD                 test    eax, eax
.text:004039CF                 jz      short loc_403A06
.text:004039D1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004039D4                 call    sub_405050
.text:004039D9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004039DD                 mov     edx, Code
.text:004039E3                 mov     [esp+2Ch+var_1C], ebx
.text:004039E7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004039EF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004039F3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004039F6                 call    sub_405370
.text:004039FB                 nop
.text:004039FC                 lea     esi, [esi+0]
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_403970+3B↑j
.text:00403A00                                         ; sub_403970+B4↓j ...
.text:00403A00                 add     esp, 24h
.text:00403A03                 pop     ebx
.text:00403A04                 pop     esi
.text:00403A05                 retn
.text:00403A06 ; ---------------------------------------------------------------------------
.text:00403A06
.text:00403A06 loc_403A06:                             ; CODE XREF: sub_403970+5F↑j
.text:00403A06                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00403A0A                 mov     ebx, Code
.text:00403A10                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00403A18                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403A1C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00403A1F                 call    sub_405370
.text:00403A24                 jmp     short loc_403A00
.text:00403A26 ; ---------------------------------------------------------------------------
.text:00403A26
.text:00403A26 loc_403A26:                             ; CODE XREF: sub_403970+47↑j
.text:00403A26                 test    bl, bl
.text:00403A28                 jnz     short loc_4039B9
.text:00403A2A                 cmp     [esp+2Ch+var_9], 0
.text:00403A2F                 jnz     short loc_403A00
.text:00403A31                 jmp     short loc_4039B9
.text:00403A33 ; ---------------------------------------------------------------------------
.text:00403A33
.text:00403A33 loc_403A33:                             ; CODE XREF: sub_403970+33↑j
.text:00403A33                 xor     esi, esi
.text:00403A35                 test    al, al
.text:00403A37                 jz      loc_4039B4
.text:00403A3D                 jmp     loc_4039AD
.text:00403A3D sub_403970      endp
.text:00403A3D
.text:00403A3D ; ---------------------------------------------------------------------------
.text:00403A42                 align 10h
.text:00403A50 ; const char aRtminD[]
.text:00403A50 aRtminD         db 'RTMIN+%d',0         ; DATA XREF: sub_403A60+49↓o
.text:00403A59 aRtmin          db 'RTMIN',0            ; DATA XREF: sub_403A60+56↓o
.text:00403A59                                         ; sub_403B10+59↓o
.text:00403A5F                 align 10h
.text:00403A60
.text:00403A60 ; =============== S U B R O U T I N E =======================================
.text:00403A60
.text:00403A60
.text:00403A60 sub_403A60      proc near               ; CODE XREF: sub_401F70+67↑p
.text:00403A60                                         ; sub_4020F0+4B↑p ...
.text:00403A60
.text:00403A60 Buffer          = dword ptr -1Ch
.text:00403A60 Format          = dword ptr -18h
.text:00403A60 var_14          = dword ptr -14h
.text:00403A60 arg_0           = dword ptr  4
.text:00403A60 arg_4           = dword ptr  8
.text:00403A60
.text:00403A60                 push    edi
.text:00403A61                 xor     eax, eax
.text:00403A63                 mov     ecx, offset dword_407030
.text:00403A68                 push    esi
.text:00403A69                 push    ebx
.text:00403A6A                 sub     esp, 10h
.text:00403A6D                 xor     ebx, ebx
.text:00403A6F                 mov     esi, [esp+1Ch+arg_0]
.text:00403A73                 mov     edi, [esp+1Ch+arg_4]
.text:00403A77                 mov     esi, esi
.text:00403A79                 lea     edi, [edi+0]
.text:00403A80
.text:00403A80 loc_403A80:                             ; CODE XREF: sub_403A60+2E↓j
.text:00403A80                 cmp     [ecx], esi
.text:00403A82                 jz      short loc_403ACB
.text:00403A84                 inc     eax
.text:00403A85                 add     ecx, 0Ch
.text:00403A88                 cmp     eax, 8
.text:00403A8B                 lea     ebx, [ebx+0Ch]
.text:00403A8E                 jbe     short loc_403A80
.text:00403A90                 cmp     esi, 16h
.text:00403A93                 jle     short loc_403A9A
.text:00403A95                 cmp     esi, 17h
.text:00403A98                 jle     short loc_403AA6
.text:00403A9A
.text:00403A9A loc_403A9A:                             ; CODE XREF: sub_403A60+33↑j
.text:00403A9A                 mov     eax, 0FFFFFFFFh
.text:00403A9F
.text:00403A9F loc_403A9F:                             ; CODE XREF: sub_403A60+69↓j
.text:00403A9F                 add     esp, 10h
.text:00403AA2                 pop     ebx
.text:00403AA3                 pop     esi
.text:00403AA4                 pop     edi
.text:00403AA5                 retn
.text:00403AA6 ; ---------------------------------------------------------------------------
.text:00403AA6
.text:00403AA6 loc_403AA6:                             ; CODE XREF: sub_403A60+38↑j
.text:00403AA6                 lea     ecx, [esi-17h]
.text:00403AA9                 mov     edx, offset aRtminD ; "RTMIN+%d"
.text:00403AAE                 test    ecx, ecx
.text:00403AB0                 mov     [esp+1Ch+var_14], ecx
.text:00403AB4                 jnz     short loc_403ABB
.text:00403AB6                 mov     edx, offset aRtmin ; "RTMIN"
.text:00403ABB
.text:00403ABB loc_403ABB:                             ; CODE XREF: sub_403A60+54↑j
.text:00403ABB                 mov     [esp+1Ch+Format], edx ; Format
.text:00403ABF                 mov     [esp+1Ch+Buffer], edi ; Buffer
.text:00403AC2                 call    sprintf
.text:00403AC7
.text:00403AC7 loc_403AC7:                             ; CODE XREF: sub_403A60+7D↓j
.text:00403AC7                 xor     eax, eax
.text:00403AC9                 jmp     short loc_403A9F
.text:00403ACB ; ---------------------------------------------------------------------------
.text:00403ACB
.text:00403ACB loc_403ACB:                             ; CODE XREF: sub_403A60+22↑j
.text:00403ACB                 mov     [esp+1Ch+Buffer], edi ; Destination
.text:00403ACE                 lea     edx, Str1[ebx]  ; "INT"
.text:00403AD4                 mov     [esp+1Ch+Format], edx ; Source
.text:00403AD8                 call    strcpy
.text:00403ADD                 jmp     short loc_403AC7
.text:00403ADD sub_403A60      endp
.text:00403ADD
.text:00403ADD ; ---------------------------------------------------------------------------
.text:00403ADF                 align 10h
.text:00403AE0
.text:00403AE0 ; =============== S U B R O U T I N E =======================================
.text:00403AE0
.text:00403AE0
.text:00403AE0 ; int __cdecl sub_403AE0(char *, int)
.text:00403AE0 sub_403AE0      proc near               ; CODE XREF: sub_401F70+11D↑p
.text:00403AE0                                         ; sub_401F70+156↑p
.text:00403AE0
.text:00403AE0 String          = dword ptr -0Ch
.text:00403AE0 arg_0           = dword ptr  4
.text:00403AE0 arg_4           = dword ptr  8
.text:00403AE0
.text:00403AE0                 sub     esp, 0Ch
.text:00403AE3                 mov     edx, [esp+0Ch+arg_0]
.text:00403AE7                 mov     [esp+0Ch+String], edx ; String
.text:00403AEA                 call    sub_403B10
.text:00403AEF                 mov     ecx, [esp+0Ch+arg_4]
.text:00403AF3                 mov     [ecx], eax
.text:00403AF5                 sar     eax, 1Fh
.text:00403AF8                 add     esp, 0Ch
.text:00403AFB                 retn
.text:00403AFB sub_403AE0      endp
.text:00403AFB
.text:00403AFB ; ---------------------------------------------------------------------------
.text:00403AFC aRtmax          db 'RTMAX',0            ; DATA XREF: sub_403B10+71↓o
.text:00403B02                 align 10h
.text:00403B10
.text:00403B10 ; =============== S U B R O U T I N E =======================================
.text:00403B10
.text:00403B10
.text:00403B10 ; int __cdecl sub_403B10(char *String)
.text:00403B10 sub_403B10      proc near               ; CODE XREF: sub_403AE0+A↑p
.text:00403B10
.text:00403B10 Str1            = dword ptr -2Ch
.text:00403B10 Str2            = dword ptr -28h
.text:00403B10 Radix           = dword ptr -24h
.text:00403B10 EndPtr          = dword ptr -18h
.text:00403B10 var_14          = dword ptr -14h
.text:00403B10 String          = dword ptr  4
.text:00403B10
.text:00403B10                 push    ebp
.text:00403B11                 push    edi
.text:00403B12                 push    esi
.text:00403B13                 push    ebx
.text:00403B14                 sub     esp, 1Ch
.text:00403B17                 mov     edx, [esp+2Ch+String]
.text:00403B1B                 movsx   ecx, byte ptr [edx]
.text:00403B1E                 sub     ecx, 30h ; '0'
.text:00403B21                 cmp     ecx, 9
.text:00403B24                 jbe     loc_403C1A
.text:00403B2A                 xor     edi, edi
.text:00403B2C                 mov     ebx, offset Str1 ; "INT"
.text:00403B31                 xor     ebp, ebp
.text:00403B33                 lea     esi, [esi+0]
.text:00403B39                 lea     edi, [edi+0]
.text:00403B40
.text:00403B40 loc_403B40:                             ; CODE XREF: sub_403B10+52↓j
.text:00403B40                 mov     [esp+2Ch+Str1], ebx ; Str1
.text:00403B43                 mov     edx, [esp+2Ch+String]
.text:00403B47                 mov     [esp+2Ch+Str2], edx ; Str2
.text:00403B4B                 call    strcmp
.text:00403B50                 test    eax, eax
.text:00403B52                 jz      loc_403C12
.text:00403B58                 inc     edi
.text:00403B59                 add     ebx, 0Ch
.text:00403B5C                 cmp     edi, 8
.text:00403B5F                 lea     ebp, [ebp+0Ch]
.text:00403B62                 jbe     short loc_403B40
.text:00403B64                 cld
.text:00403B65                 mov     esi, [esp+2Ch+String]
.text:00403B69                 mov     edi, offset aRtmin ; "RTMIN"
.text:00403B6E                 mov     ecx, 5
.text:00403B73                 repe cmpsb
.text:00403B75                 jz      short loc_403BDD
.text:00403B77                 cld
.text:00403B78                 mov     esi, [esp+2Ch+String]
.text:00403B7C                 mov     ecx, 5
.text:00403B81                 mov     edi, offset aRtmax ; "RTMAX"
.text:00403B86                 repe cmpsb
.text:00403B88                 setnbe  al
.text:00403B8B                 setb    bl
.text:00403B8E                 mov     cl, al
.text:00403B90                 sub     cl, bl
.text:00403B92                 movsx   ebx, cl
.text:00403B95                 test    ebx, ebx
.text:00403B97                 jz      short loc_403BA6
.text:00403B99
.text:00403B99 loc_403B99:                             ; CODE XREF: sub_403B10+BE↓j
.text:00403B99                                         ; sub_403B10+C2↓j ...
.text:00403B99                 mov     eax, 0FFFFFFFFh
.text:00403B9E
.text:00403B9E loc_403B9E:                             ; CODE XREF: sub_403B10+CB↓j
.text:00403B9E                                         ; sub_403B10+108↓j ...
.text:00403B9E                 add     esp, 1Ch
.text:00403BA1                 pop     ebx
.text:00403BA2                 pop     esi
.text:00403BA3                 pop     edi
.text:00403BA4                 pop     ebp
.text:00403BA5                 retn
.text:00403BA6 ; ---------------------------------------------------------------------------
.text:00403BA6
.text:00403BA6 loc_403BA6:                             ; CODE XREF: sub_403B10+87↑j
.text:00403BA6                 mov     [esp+2Ch+Radix], 0Ah ; Radix
.text:00403BAE                 mov     edx, [esp+2Ch+String]
.text:00403BB2                 lea     edi, [esp+2Ch+EndPtr]
.text:00403BB6                 mov     [esp+2Ch+Str2], edi ; EndPtr
.text:00403BBA                 add     edx, 5
.text:00403BBD                 mov     [esp+2Ch+Str1], edx ; String
.text:00403BC0                 call    strtol
.text:00403BC5                 mov     esi, [esp+2Ch+EndPtr]
.text:00403BC9                 mov     edx, eax
.text:00403BCB                 cmp     byte ptr [esi], 0
.text:00403BCE                 jnz     short loc_403B99
.text:00403BD0                 cmp     ebx, eax
.text:00403BD2                 jg      short loc_403B99
.text:00403BD4                 test    eax, eax
.text:00403BD6                 jg      short loc_403B99
.text:00403BD8
.text:00403BD8 loc_403BD8:                             ; CODE XREF: sub_403B10+100↓j
.text:00403BD8                 lea     eax, [edx+17h]
.text:00403BDB                 jmp     short loc_403B9E
.text:00403BDD ; ---------------------------------------------------------------------------
.text:00403BDD
.text:00403BDD loc_403BDD:                             ; CODE XREF: sub_403B10+65↑j
.text:00403BDD                 mov     [esp+2Ch+Radix], 0Ah ; Radix
.text:00403BE5                 mov     edi, [esp+2Ch+String]
.text:00403BE9                 lea     ebp, [esp+2Ch+EndPtr]
.text:00403BED                 mov     [esp+2Ch+Str2], ebp ; EndPtr
.text:00403BF1                 add     edi, 5
.text:00403BF4                 mov     [esp+2Ch+Str1], edi ; String
.text:00403BF7                 call    strtol
.text:00403BFC                 mov     esi, [esp+2Ch+EndPtr]
.text:00403C00                 mov     edx, eax
.text:00403C02                 cmp     byte ptr [esi], 0
.text:00403C05                 jnz     short loc_403B99
.text:00403C07                 test    eax, eax
.text:00403C09                 js      short loc_403B99
.text:00403C0B                 cmp     eax, 0
.text:00403C0E                 jg      short loc_403B99
.text:00403C10                 jmp     short loc_403BD8
.text:00403C12 ; ---------------------------------------------------------------------------
.text:00403C12
.text:00403C12 loc_403C12:                             ; CODE XREF: sub_403B10+42↑j
.text:00403C12                 mov     eax, ss:dword_407030[ebp]
.text:00403C18                 jmp     short loc_403B9E
.text:00403C1A ; ---------------------------------------------------------------------------
.text:00403C1A
.text:00403C1A loc_403C1A:                             ; CODE XREF: sub_403B10+14↑j
.text:00403C1A                 mov     [esp+2Ch+Radix], 0Ah ; Radix
.text:00403C22                 lea     ebx, [esp+2Ch+var_14]
.text:00403C26                 mov     [esp+2Ch+Str2], ebx ; EndPtr
.text:00403C2A                 mov     [esp+2Ch+Str1], edx ; String
.text:00403C2D                 call    strtol
.text:00403C32                 mov     ecx, [esp+2Ch+var_14]
.text:00403C36                 cmp     byte ptr [ecx], 0
.text:00403C39                 jnz     loc_403B99
.text:00403C3F                 cmp     eax, 16h
.text:00403C42                 jle     loc_403B9E
.text:00403C48                 jmp     loc_403B99
.text:00403C48 sub_403B10      endp
.text:00403C48
.text:00403C48 ; ---------------------------------------------------------------------------
.text:00403C4D                 align 10h
.text:00403C50                 sub     esp, 0Ch
.text:00403C53                 xor     edx, edx
.text:00403C55                 mov     ecx, [esp+14h]
.text:00403C59                 mov     [esp+8], ebx
.text:00403C5D                 mov     eax, 0FFFFFFFFh
.text:00403C62                 mov     ebx, [esp+10h]
.text:00403C66                 div     ecx
.text:00403C68                 cmp     eax, ebx
.text:00403C6A                 jb      short loc_403C89
.text:00403C6C                 mov     edx, ebx
.text:00403C6E                 imul    edx, ecx
.text:00403C71                 mov     [esp], edx
.text:00403C74                 call    malloc
.text:00403C79                 test    eax, eax
.text:00403C7B                 jz      short loc_403C85
.text:00403C7D
.text:00403C7D loc_403C7D:                             ; CODE XREF: .text:00403C87↓j
.text:00403C7D                 mov     ebx, [esp+8]
.text:00403C81                 add     esp, 0Ch
.text:00403C84                 retn
.text:00403C85 ; ---------------------------------------------------------------------------
.text:00403C85
.text:00403C85 loc_403C85:                             ; CODE XREF: .text:00403C7B↑j
.text:00403C85                 test    ebx, ebx
.text:00403C87                 jz      short loc_403C7D
.text:00403C89
.text:00403C89 loc_403C89:                             ; CODE XREF: .text:00403C6A↑j
.text:00403C89                 call    sub_4052E0
.text:00403C89 ; ---------------------------------------------------------------------------
.text:00403C8E                 align 10h
.text:00403C90
.text:00403C90 ; =============== S U B R O U T I N E =======================================
.text:00403C90
.text:00403C90
.text:00403C90 ; int __cdecl sub_403C90(size_t)
.text:00403C90 sub_403C90      proc near               ; CODE XREF: .text:00404A29↓p
.text:00403C90                                         ; .text:00404C06↓p ...
.text:00403C90
.text:00403C90 Size            = dword ptr -0Ch
.text:00403C90 var_4           = dword ptr -4
.text:00403C90 arg_0           = dword ptr  4
.text:00403C90
.text:00403C90                 sub     esp, 0Ch
.text:00403C93                 mov     [esp+0Ch+var_4], ebx
.text:00403C97                 mov     ebx, [esp+0Ch+arg_0]
.text:00403C9B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403C9E                 call    malloc
.text:00403CA3                 test    eax, eax
.text:00403CA5                 jz      short loc_403CB0
.text:00403CA7
.text:00403CA7 loc_403CA7:                             ; CODE XREF: sub_403C90+22↓j
.text:00403CA7                 mov     ebx, [esp+0Ch+var_4]
.text:00403CAB                 add     esp, 0Ch
.text:00403CAE                 retn
.text:00403CAE ; ---------------------------------------------------------------------------
.text:00403CAF                 align 10h
.text:00403CB0
.text:00403CB0 loc_403CB0:                             ; CODE XREF: sub_403C90+15↑j
.text:00403CB0                 test    ebx, ebx
.text:00403CB2                 jz      short loc_403CA7
.text:00403CB4                 call    sub_4052E0
.text:00403CB4 sub_403C90      endp
.text:00403CB4
.text:00403CB4 ; ---------------------------------------------------------------------------
.text:00403CB9                 align 10h
.text:00403CC0                 sub     esp, 1Ch
.text:00403CC3                 xor     edx, edx
.text:00403CC5                 mov     eax, 0FFFFFFFFh
.text:00403CCA                 mov     [esp+14h], ebx
.text:00403CCE                 mov     ecx, [esp+20h]
.text:00403CD2                 mov     ebx, [esp+28h]
.text:00403CD6                 mov     [esp+18h], esi
.text:00403CDA                 mov     esi, [esp+24h]
.text:00403CDE                 div     ebx
.text:00403CE0                 cmp     eax, esi
.text:00403CE2                 jb      short loc_403D14
.text:00403CE4                 mov     [esp], ecx
.text:00403CE7                 mov     edx, esi
.text:00403CE9                 imul    edx, ebx
.text:00403CEC                 mov     [esp+4], edx
.text:00403CF0                 call    realloc
.text:00403CF5                 test    eax, eax
.text:00403CF7                 mov     ecx, eax
.text:00403CF9                 jz      short loc_403D10
.text:00403CFB
.text:00403CFB loc_403CFB:                             ; CODE XREF: .text:00403D12↓j
.text:00403CFB                 mov     ebx, [esp+14h]
.text:00403CFF                 mov     eax, ecx
.text:00403D01                 mov     esi, [esp+18h]
.text:00403D05                 add     esp, 1Ch
.text:00403D08                 retn
.text:00403D08 ; ---------------------------------------------------------------------------
.text:00403D09                 align 10h
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: .text:00403CF9↑j
.text:00403D10                 test    esi, esi
.text:00403D12                 jz      short loc_403CFB
.text:00403D14
.text:00403D14 loc_403D14:                             ; CODE XREF: .text:00403CE2↑j
.text:00403D14                 call    sub_4052E0
.text:00403D14 ; ---------------------------------------------------------------------------
.text:00403D19                 align 10h
.text:00403D20
.text:00403D20 ; =============== S U B R O U T I N E =======================================
.text:00403D20
.text:00403D20
.text:00403D20 ; int __cdecl sub_403D20(void *, size_t)
.text:00403D20 sub_403D20      proc near               ; CODE XREF: sub_4050F0+5B↓p
.text:00403D20
.text:00403D20 Block           = dword ptr -0Ch
.text:00403D20 Size            = dword ptr -8
.text:00403D20 var_4           = dword ptr -4
.text:00403D20 arg_0           = dword ptr  4
.text:00403D20 arg_4           = dword ptr  8
.text:00403D20
.text:00403D20                 sub     esp, 0Ch
.text:00403D23                 mov     edx, [esp+0Ch+arg_0]
.text:00403D27                 mov     [esp+0Ch+var_4], ebx
.text:00403D2B                 mov     ebx, [esp+0Ch+arg_4]
.text:00403D2F                 mov     [esp+0Ch+Block], edx ; Block
.text:00403D32                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403D36                 call    realloc
.text:00403D3B                 test    eax, eax
.text:00403D3D                 jz      short loc_403D47
.text:00403D3F
.text:00403D3F loc_403D3F:                             ; CODE XREF: sub_403D20+29↓j
.text:00403D3F                 mov     ebx, [esp+0Ch+var_4]
.text:00403D43                 add     esp, 0Ch
.text:00403D46                 retn
.text:00403D47 ; ---------------------------------------------------------------------------
.text:00403D47
.text:00403D47 loc_403D47:                             ; CODE XREF: sub_403D20+1D↑j
.text:00403D47                 test    ebx, ebx
.text:00403D49                 jz      short loc_403D3F
.text:00403D4B                 call    sub_4052E0
.text:00403D4B sub_403D20      endp
.text:00403D4B
.text:00403D50 ; ---------------------------------------------------------------------------
.text:00403D50                 jmp     sub_403EA0
.text:00403D50 ; ---------------------------------------------------------------------------
.text:00403D55                 align 10h
.text:00403D60                 sub     esp, 0Ch
.text:00403D63                 mov     edx, [esp+14h]
.text:00403D67                 mov     dword ptr [esp+8], 1
.text:00403D6F                 mov     [esp+4], edx
.text:00403D73                 mov     edx, [esp+10h]
.text:00403D77                 mov     [esp], edx
.text:00403D7A                 call    sub_403EA0
.text:00403D7F                 add     esp, 0Ch
.text:00403D82                 retn
.text:00403D82 ; ---------------------------------------------------------------------------
.text:00403D83                 align 10h
.text:00403D90                 sub     esp, 1Ch
.text:00403D93                 mov     [esp+18h], ebx
.text:00403D97                 mov     ebx, [esp+20h]
.text:00403D9B                 mov     [esp], ebx
.text:00403D9E                 call    malloc
.text:00403DA3                 test    eax, eax
.text:00403DA5                 jz      short loc_403DC3
.text:00403DA7
.text:00403DA7 loc_403DA7:                             ; CODE XREF: .text:00403DC5↓j
.text:00403DA7                 mov     [esp+8], ebx
.text:00403DAB                 mov     dword ptr [esp+4], 0
.text:00403DB3                 mov     [esp], eax
.text:00403DB6                 call    memset
.text:00403DBB                 mov     ebx, [esp+18h]
.text:00403DBF                 add     esp, 1Ch
.text:00403DC2                 retn
.text:00403DC3 ; ---------------------------------------------------------------------------
.text:00403DC3
.text:00403DC3 loc_403DC3:                             ; CODE XREF: .text:00403DA5↑j
.text:00403DC3                 test    ebx, ebx
.text:00403DC5                 jz      short loc_403DA7
.text:00403DC7                 call    sub_4052E0
.text:00403DC7 ; ---------------------------------------------------------------------------
.text:00403DCC                 align 10h
.text:00403DD0                 sub     esp, 0Ch
.text:00403DD3                 xor     edx, edx
.text:00403DD5                 mov     ecx, [esp+14h]
.text:00403DD9                 mov     [esp+8], ebx
.text:00403DDD                 mov     eax, 0FFFFFFFFh
.text:00403DE2                 mov     ebx, [esp+10h]
.text:00403DE6                 div     ecx
.text:00403DE8                 cmp     eax, ebx
.text:00403DEA                 jb      short loc_403E08
.text:00403DEC                 mov     [esp+4], ecx
.text:00403DF0                 mov     [esp], ebx
.text:00403DF3                 call    calloc
.text:00403DF8                 test    eax, eax
.text:00403DFA                 jz      short loc_403E04
.text:00403DFC
.text:00403DFC loc_403DFC:                             ; CODE XREF: .text:00403E06↓j
.text:00403DFC                 mov     ebx, [esp+8]
.text:00403E00                 add     esp, 0Ch
.text:00403E03                 retn
.text:00403E04 ; ---------------------------------------------------------------------------
.text:00403E04
.text:00403E04 loc_403E04:                             ; CODE XREF: .text:00403DFA↑j
.text:00403E04                 test    ebx, ebx
.text:00403E06                 jz      short loc_403DFC
.text:00403E08
.text:00403E08 loc_403E08:                             ; CODE XREF: .text:00403DEA↑j
.text:00403E08                 call    sub_4052E0
.text:00403E08 ; ---------------------------------------------------------------------------
.text:00403E0D                 align 10h
.text:00403E10                 sub     esp, 1Ch
.text:00403E13                 mov     [esp+18h], ebx
.text:00403E17                 mov     ebx, [esp+24h]
.text:00403E1B                 mov     [esp], ebx
.text:00403E1E                 call    malloc
.text:00403E23                 test    eax, eax
.text:00403E25                 mov     edx, eax
.text:00403E27                 jz      short loc_403E45
.text:00403E29
.text:00403E29 loc_403E29:                             ; CODE XREF: .text:00403E47↓j
.text:00403E29                 mov     [esp+8], ebx
.text:00403E2D                 mov     ecx, [esp+20h]
.text:00403E31                 mov     [esp], edx
.text:00403E34                 mov     [esp+4], ecx
.text:00403E38                 call    memcpy
.text:00403E3D                 mov     ebx, [esp+18h]
.text:00403E41                 add     esp, 1Ch
.text:00403E44                 retn
.text:00403E45 ; ---------------------------------------------------------------------------
.text:00403E45
.text:00403E45 loc_403E45:                             ; CODE XREF: .text:00403E27↑j
.text:00403E45                 test    ebx, ebx
.text:00403E47                 jz      short loc_403E29
.text:00403E49                 call    sub_4052E0
.text:00403E49 ; ---------------------------------------------------------------------------
.text:00403E4E                 align 10h
.text:00403E50
.text:00403E50 ; =============== S U B R O U T I N E =======================================
.text:00403E50
.text:00403E50
.text:00403E50 ; int __cdecl sub_403E50(char *)
.text:00403E50 sub_403E50      proc near               ; CODE XREF: sub_401F70+D3↑p
.text:00403E50
.text:00403E50 Str             = dword ptr -1Ch
.text:00403E50 Src             = dword ptr -18h
.text:00403E50 Size            = dword ptr -14h
.text:00403E50 var_8           = dword ptr -8
.text:00403E50 var_4           = dword ptr -4
.text:00403E50 arg_0           = dword ptr  4
.text:00403E50
.text:00403E50                 sub     esp, 1Ch
.text:00403E53                 mov     [esp+1Ch+var_4], esi
.text:00403E57                 mov     esi, [esp+1Ch+arg_0]
.text:00403E5B                 mov     [esp+1Ch+var_8], ebx
.text:00403E5F                 mov     [esp+1Ch+Str], esi ; Str
.text:00403E62                 call    strlen
.text:00403E67                 lea     ebx, [eax+1]
.text:00403E6A                 mov     [esp+1Ch+Str], ebx ; Size
.text:00403E6D                 call    malloc
.text:00403E72                 test    eax, eax
.text:00403E74                 jz      short loc_403E92
.text:00403E76
.text:00403E76 loc_403E76:                             ; CODE XREF: sub_403E50+44↓j
.text:00403E76                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403E7A                 mov     [esp+1Ch+Src], esi ; Src
.text:00403E7E                 mov     [esp+1Ch+Str], eax ; void *
.text:00403E81                 call    memcpy
.text:00403E86                 mov     ebx, [esp+1Ch+var_8]
.text:00403E8A                 mov     esi, [esp+1Ch+var_4]
.text:00403E8E                 add     esp, 1Ch
.text:00403E91                 retn
.text:00403E92 ; ---------------------------------------------------------------------------
.text:00403E92
.text:00403E92 loc_403E92:                             ; CODE XREF: sub_403E50+24↑j
.text:00403E92                 test    ebx, ebx
.text:00403E94                 jz      short loc_403E76
.text:00403E96                 call    sub_4052E0
.text:00403E96 sub_403E50      endp
.text:00403E96
.text:00403E96 ; ---------------------------------------------------------------------------
.text:00403E9B                 align 10h
.text:00403EA0
.text:00403EA0 ; =============== S U B R O U T I N E =======================================
.text:00403EA0
.text:00403EA0
.text:00403EA0 ; int __cdecl sub_403EA0(void *, int, int)
.text:00403EA0 sub_403EA0      proc near               ; CODE XREF: .text:00403D50↑j
.text:00403EA0                                         ; .text:00403D7A↑p
.text:00403EA0
.text:00403EA0 Block           = dword ptr -1Ch
.text:00403EA0 Size            = dword ptr -18h
.text:00403EA0 var_C           = dword ptr -0Ch
.text:00403EA0 var_8           = dword ptr -8
.text:00403EA0 var_4           = dword ptr -4
.text:00403EA0 arg_0           = dword ptr  4
.text:00403EA0 arg_4           = dword ptr  8
.text:00403EA0 arg_8           = dword ptr  0Ch
.text:00403EA0
.text:00403EA0                 sub     esp, 1Ch
.text:00403EA3                 mov     [esp+1Ch+var_8], esi
.text:00403EA7                 mov     esi, [esp+1Ch+arg_0]
.text:00403EAB                 mov     [esp+1Ch+var_4], edi
.text:00403EAF                 mov     edi, [esp+1Ch+arg_4]
.text:00403EB3                 test    esi, esi
.text:00403EB5                 mov     [esp+1Ch+var_C], ebx
.text:00403EB9                 mov     ecx, [edi]
.text:00403EBB                 mov     ebx, [esp+1Ch+arg_8]
.text:00403EBF                 jz      short loc_403F00
.text:00403EC1                 xor     edx, edx
.text:00403EC3                 mov     eax, 7FFFFFFFh
.text:00403EC8                 div     ebx
.text:00403ECA                 cmp     eax, ecx
.text:00403ECC                 jb      short loc_403EF9
.text:00403ECE                 add     ecx, ecx
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403EA0+62↓j
.text:00403ED0                                         ; sub_403EA0+71↓j ...
.text:00403ED0                 mov     [edi], ecx
.text:00403ED2                 imul    ebx, ecx
.text:00403ED5                 mov     [esp+1Ch+Block], esi ; Block
.text:00403ED8                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403EDC                 call    realloc
.text:00403EE1                 test    eax, eax
.text:00403EE3                 jz      short loc_403EF5
.text:00403EE5
.text:00403EE5 loc_403EE5:                             ; CODE XREF: sub_403EA0+57↓j
.text:00403EE5                 mov     ebx, [esp+1Ch+var_C]
.text:00403EE9                 mov     esi, [esp+1Ch+var_8]
.text:00403EED                 mov     edi, [esp+1Ch+var_4]
.text:00403EF1                 add     esp, 1Ch
.text:00403EF4                 retn
.text:00403EF5 ; ---------------------------------------------------------------------------
.text:00403EF5
.text:00403EF5 loc_403EF5:                             ; CODE XREF: sub_403EA0+43↑j
.text:00403EF5                 test    ebx, ebx
.text:00403EF7                 jz      short loc_403EE5
.text:00403EF9
.text:00403EF9 loc_403EF9:                             ; CODE XREF: sub_403EA0+2C↑j
.text:00403EF9                 call    sub_4052E0
.text:00403EF9 ; ---------------------------------------------------------------------------
.text:00403EFE                 align 10h
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403EA0+1F↑j
.text:00403F00                 test    ecx, ecx
.text:00403F02                 jnz     short loc_403ED0
.text:00403F04                 xor     edx, edx
.text:00403F06                 mov     eax, 40h ; '@'
.text:00403F0B                 div     ebx
.text:00403F0D                 test    eax, eax
.text:00403F0F                 mov     ecx, eax
.text:00403F11                 jnz     short loc_403ED0
.text:00403F13                 mov     ecx, 1
.text:00403F18                 jmp     short loc_403ED0
.text:00403F18 sub_403EA0      endp
.text:00403F18
.text:00403F18 ; ---------------------------------------------------------------------------
.text:00403F1A                 align 10h
.text:00403F20 aLiteral        db 'literal',0          ; DATA XREF: .text:00403F60↓o
.text:00403F28 aShell          db 'shell',0            ; DATA XREF: .text:00403F64↓o
.text:00403F2E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403F68↓o
.text:00403F3B aC              db 'c',0                ; DATA XREF: .text:00403F6C↓o
.text:00403F3D aEscape         db 'escape',0           ; DATA XREF: .text:00403F70↓o
.text:00403F44 aLocale         db 'locale',0           ; DATA XREF: .text:00403F74↓o
.text:00403F4B aClocale        db 'clocale',0          ; DATA XREF: .text:00403F78↓o
.text:00403F53                 align 10h
.text:00403F60                 dd offset aLiteral      ; "literal"
.text:00403F64                 dd offset aShell        ; "shell"
.text:00403F68                 dd offset aShellAlways  ; "shell-always"
.text:00403F6C                 dd offset aC            ; "c"
.text:00403F70                 dd offset aEscape       ; "escape"
.text:00403F74                 dd offset aLocale       ; "locale"
.text:00403F78                 dd offset aClocale      ; "clocale"
.text:00403F7C                 dd 2 dup(0)
.text:00403F84                 dd 1, 2, 3, 4, 5, 6
.text:00403F9C asc_403F9C:                             ; DATA XREF: sub_403FB0+7E↓o
.text:00403F9C                                         ; sub_403FB0+A39↓o ...
.text:00403F9C                 text "UTF-16LE", '"',27h,'`'
.text:00403FA2                 align 10h
.text:00403FB0
.text:00403FB0 ; =============== S U B R O U T I N E =======================================
.text:00403FB0
.text:00403FB0
.text:00403FB0 ; int __cdecl sub_403FB0(int, int, char *Str, int, int, int)
.text:00403FB0 sub_403FB0      proc near               ; CODE XREF: sub_403FB0+43A↓p
.text:00403FB0                                         ; .text:00404B73↓p ...
.text:00403FB0
.text:00403FB0 C               = dword ptr -4Ch
.text:00403FB0 Type            = dword ptr -48h
.text:00403FB0 SizeInBytes     = dword ptr -44h
.text:00403FB0 State           = dword ptr -40h
.text:00403FB0 var_3C          = dword ptr -3Ch
.text:00403FB0 var_38          = dword ptr -38h
.text:00403FB0 var_34          = dword ptr -34h
.text:00403FB0 var_30          = dword ptr -30h
.text:00403FB0 var_29          = byte ptr -29h
.text:00403FB0 var_28          = dword ptr -28h
.text:00403FB0 var_22          = byte ptr -22h
.text:00403FB0 var_21          = byte ptr -21h
.text:00403FB0 var_20          = dword ptr -20h
.text:00403FB0 var_1C          = dword ptr -1Ch
.text:00403FB0 var_18          = mbstate_t ptr -18h
.text:00403FB0 arg_0           = dword ptr  4
.text:00403FB0 arg_4           = dword ptr  8
.text:00403FB0 Str             = dword ptr  0Ch
.text:00403FB0 arg_C           = dword ptr  10h
.text:00403FB0 arg_10          = dword ptr  14h
.text:00403FB0 arg_14          = dword ptr  18h
.text:00403FB0
.text:00403FB0                 push    ebp
.text:00403FB1                 push    edi
.text:00403FB2                 push    esi
.text:00403FB3                 push    ebx
.text:00403FB4                 sub     esp, 3Ch
.text:00403FB7                 mov     edx, ds:__mb_cur_max
.text:00403FBD                 mov     [esp+4Ch+var_34], 0
.text:00403FC5                 mov     [esp+4Ch+var_1C], 0
.text:00403FCD                 cmp     dword ptr [edx], 1
.text:00403FD0                 mov     [esp+4Ch+var_20], 0
.text:00403FD8                 mov     [esp+4Ch+var_21], 0
.text:00403FDD                 setz    [esp+4Ch+var_22]
.text:00403FE2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403FE7                 ja      short def_403FED ; jumptable 00403FED default case, cases 0,1
.text:00403FE9                 mov     edx, [esp+4Ch+arg_10]
.text:00403FED                 jmp     ds:jpt_403FED[edx*4] ; switch jump
.text:00403FED ; ---------------------------------------------------------------------------
.text:00403FF4 jpt_403FED      dd offset def_403FED    ; DATA XREF: sub_403FB0+3D↑r
.text:00403FF4                 dd offset def_403FED    ; jump table for switch statement
.text:00403FF4                 dd offset loc_404935
.text:00403FF4                 dd offset loc_404010
.text:00403FF4                 dd offset loc_40495B
.text:00403FF4                 dd offset loc_404965
.text:00403FF4                 dd offset loc_404965
.text:00404010 ; ---------------------------------------------------------------------------
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_403FB0+3D↑j
.text:00404010                                         ; DATA XREF: sub_403FB0:jpt_403FED↑o
.text:00404010                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403FED case 3
.text:00404014                 cmp     [esp+4Ch+var_34], eax
.text:00404018                 jnb     short loc_404021
.text:0040401A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040401E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404021
.text:00404021 loc_404021:                             ; CODE XREF: sub_403FB0+68↑j
.text:00404021                 mov     [esp+4Ch+var_34], 1
.text:00404029                 mov     [esp+4Ch+var_21], 1
.text:0040402E                 mov     [esp+4Ch+var_1C], offset asc_403F9C ; "\"'`"
.text:00404036
.text:00404036 loc_404036:                             ; CODE XREF: sub_403FB0+9A6↓j
.text:00404036                 mov     [esp+4Ch+var_20], 1
.text:0040403E
.text:0040403E def_403FED:                             ; CODE XREF: sub_403FB0+37↑j
.text:0040403E                                         ; sub_403FB0+3D↑j ...
.text:0040403E                 xor     ebp, ebp        ; jumptable 00403FED default case, cases 0,1
.text:00404040
.text:00404040 loc_404040:                             ; CODE XREF: sub_403FB0+3DB↓j
.text:00404040                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404045                 jz      loc_404927
.text:0040404B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040404F
.text:0040404F loc_40404F:                             ; CODE XREF: sub_403FB0+980↓j
.text:0040404F                 jz      loc_4048BE
.text:00404055                 cmp     [esp+4Ch+var_21], 0
.text:0040405A                 jz      short loc_4040A0
.text:0040405C                 mov     esi, [esp+4Ch+var_20]
.text:00404060                 test    esi, esi
.text:00404062                 jz      short loc_4040A0
.text:00404064                 mov     ecx, [esp+4Ch+var_20]
.text:00404068                 lea     edi, [ecx+ebp]
.text:0040406B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040406F                 ja      short loc_4040A0
.text:00404071                 cld
.text:00404072                 mov     ebx, [esp+4Ch+Str]
.text:00404076                 mov     edi, [esp+4Ch+var_1C]
.text:0040407A                 add     ebx, ebp
.text:0040407C                 mov     esi, ebx
.text:0040407E                 cmp     ecx, ecx
.text:00404080                 repe cmpsb
.text:00404082                 jnz     short loc_4040A0
.text:00404084                 mov     edx, [esp+4Ch+arg_4]
.text:00404088                 cmp     [esp+4Ch+var_34], edx
.text:0040408C                 jnb     short loc_40409A
.text:0040408E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404092                 mov     eax, [esp+4Ch+var_34]
.text:00404096                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040409A
.text:0040409A loc_40409A:                             ; CODE XREF: sub_403FB0+DC↑j
.text:0040409A                 inc     [esp+4Ch+var_34]
.text:0040409E                 mov     esi, esi
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_403FB0+AA↑j
.text:004040A0                                         ; sub_403FB0+B2↑j ...
.text:004040A0                 mov     edi, [esp+4Ch+Str]
.text:004040A4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004040A9                 movzx   eax, bl
.text:004040AC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004040AF                 ja      def_4040B5      ; jumptable 004040B5 default case, cases 1-6,14-31,64
.text:004040B5                 jmp     ds:jpt_4040B5[eax*4] ; switch jump
.text:004040B5 ; ---------------------------------------------------------------------------
.text:004040BC jpt_4040B5      dd offset loc_4042B8, offset def_4040B5, offset def_4040B5
.text:004040BC                                         ; DATA XREF: sub_403FB0+105↑r
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5 ; jump table for switch statement
.text:004040BC                 dd offset def_4040B5, offset loc_404390, offset loc_4043AE
.text:004040BC                 dd offset loc_4043B2, offset loc_4043F7, offset loc_4043FB
.text:004040BC                 dd offset loc_4043FF, offset loc_404403, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset loc_404888
.text:004040BC                 dd offset loc_404888, offset loc_404888, offset loc_4048AA
.text:004040BC                 dd offset loc_404888, offset def_4044B2, offset loc_404888
.text:004040BC                 dd offset loc_404407, offset loc_404888, offset loc_404888
.text:004040BC                 dd offset loc_404888, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset loc_404888
.text:004040BC                 dd offset loc_404888, offset loc_404888, offset loc_404888
.text:004040BC                 dd offset loc_40446C, offset def_4040B5, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset loc_404888, offset loc_404881
.text:004040BC                 dd offset def_4044B2, offset loc_404888, offset def_4044B2
.text:004040BC                 dd offset loc_404888, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset loc_404898, offset loc_404888, offset loc_404898
.text:004040BC                 dd offset loc_4048AA
.text:004042B8 ; ---------------------------------------------------------------------------
.text:004042B8
.text:004042B8 loc_4042B8:                             ; CODE XREF: sub_403FB0+105↑j
.text:004042B8                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004042B8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004040B5 case 0
.text:004042BD                 lea     eax, [ebp+1]
.text:004042C0                 jz      loc_404370
.text:004042C6                 mov     esi, [esp+4Ch+arg_4]
.text:004042CA                 cmp     [esp+4Ch+var_34], esi
.text:004042CE                 jnb     short loc_4042DC
.text:004042D0                 mov     eax, [esp+4Ch+arg_0]
.text:004042D4                 mov     ebx, [esp+4Ch+var_34]
.text:004042D8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004042DC
.text:004042DC loc_4042DC:                             ; CODE XREF: sub_403FB0+31E↑j
.text:004042DC                 inc     [esp+4Ch+var_34]
.text:004042E0                 mov     edx, [esp+4Ch+arg_4]
.text:004042E4                 cmp     [esp+4Ch+var_34], edx
.text:004042E8                 jnb     short loc_4042F6
.text:004042EA                 mov     edi, [esp+4Ch+arg_0]
.text:004042EE                 mov     ecx, [esp+4Ch+var_34]
.text:004042F2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004042F6
.text:004042F6 loc_4042F6:                             ; CODE XREF: sub_403FB0+338↑j
.text:004042F6                 inc     [esp+4Ch+var_34]
.text:004042FA                 mov     esi, [esp+4Ch+arg_4]
.text:004042FE                 cmp     [esp+4Ch+var_34], esi
.text:00404302                 jnb     short loc_404310
.text:00404304                 mov     ebx, [esp+4Ch+arg_0]
.text:00404308                 mov     eax, [esp+4Ch+var_34]
.text:0040430C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403FB0+352↑j
.text:00404310                 inc     [esp+4Ch+var_34]
.text:00404314                 mov     bl, 30h ; '0'
.text:00404316                 lea     esi, [esi+0]
.text:00404319                 lea     edi, [edi+0]
.text:00404320
.text:00404320 def_4044B2:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404320                                         ; sub_403FB0+463↓j ...
.text:00404320                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404320                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:00404325                 lea     eax, [ebp+1]
.text:00404328                 jz      short loc_404370
.text:0040432A                 mov     cl, bl
.text:0040432C                 mov     edi, [esp+4Ch+arg_14]
.text:00404330                 mov     esi, 1
.text:00404335                 shr     cl, 5
.text:00404338                 movzx   edx, cl
.text:0040433B                 mov     ecx, ebx
.text:0040433D                 and     ecx, 1Fh
.text:00404340                 shl     esi, cl
.text:00404342                 test    [edi+edx*4+4], esi
.text:00404346                 jz      short loc_404362
.text:00404348
.text:00404348 loc_404348:                             ; CODE XREF: sub_403FB0+3FC↓j
.text:00404348                 mov     edx, [esp+4Ch+arg_4]
.text:0040434C                 cmp     [esp+4Ch+var_34], edx
.text:00404350                 jnb     short loc_40435E
.text:00404352                 mov     edi, [esp+4Ch+arg_0]
.text:00404356                 mov     esi, [esp+4Ch+var_34]
.text:0040435A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040435E
.text:0040435E loc_40435E:                             ; CODE XREF: sub_403FB0+3A0↑j
.text:0040435E                 inc     [esp+4Ch+var_34]
.text:00404362
.text:00404362 loc_404362:                             ; CODE XREF: sub_403FB0+396↑j
.text:00404362                 lea     eax, [ebp+1]
.text:00404365                 lea     esi, [esi+0]
.text:00404369                 lea     edi, [edi+0]
.text:00404370
.text:00404370 loc_404370:                             ; CODE XREF: sub_403FB0+310↑j
.text:00404370                                         ; sub_403FB0+378↑j ...
.text:00404370                 mov     ebp, [esp+4Ch+arg_4]
.text:00404374                 cmp     [esp+4Ch+var_34], ebp
.text:00404378                 jnb     short loc_404385
.text:0040437A                 mov     edx, [esp+4Ch+arg_0]
.text:0040437E                 mov     ecx, [esp+4Ch+var_34]
.text:00404382                 mov     [ecx+edx], bl
.text:00404385
.text:00404385 loc_404385:                             ; CODE XREF: sub_403FB0+3C8↑j
.text:00404385                 inc     [esp+4Ch+var_34]
.text:00404389                 mov     ebp, eax
.text:0040438B                 jmp     loc_404040
.text:00404390 ; ---------------------------------------------------------------------------
.text:00404390
.text:00404390 loc_404390:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404390                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404390                 mov     dl, 61h ; 'a'   ; jumptable 004040B5 case 7
.text:00404392                 lea     esi, [esi+0]
.text:00404399                 lea     edi, [edi+0]
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_403FB0+400↓j
.text:004043A0                                         ; sub_403FB0+409↓j ...
.text:004043A0                 cmp     [esp+4Ch+var_21], 0
.text:004043A5                 lea     eax, [ebp+1]
.text:004043A8                 jz      short loc_404370
.text:004043AA                 mov     bl, dl
.text:004043AC                 jmp     short loc_404348
.text:004043AE ; ---------------------------------------------------------------------------
.text:004043AE
.text:004043AE loc_4043AE:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043AE                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043AE                 mov     dl, 62h ; 'b'   ; jumptable 004040B5 case 8
.text:004043B0                 jmp     short loc_4043A0
.text:004043B2 ; ---------------------------------------------------------------------------
.text:004043B2
.text:004043B2 loc_4043B2:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043B2                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043B2                 mov     dl, 74h ; 't'   ; jumptable 004040B5 case 9
.text:004043B4
.text:004043B4 loc_4043B4:                             ; CODE XREF: sub_403FB0+449↓j
.text:004043B4                                         ; sub_403FB0+455↓j ...
.text:004043B4                 cmp     [esp+4Ch+arg_10], 1
.text:004043B9                 jnz     short loc_4043A0
.text:004043BB
.text:004043BB loc_4043BB:                             ; CODE XREF: sub_403FB0+45C↓j
.text:004043BB                                         ; sub_403FB0+4C1↓j ...
.text:004043BB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404782 cases 91,92,94,96,124
.text:004043C3                 mov     eax, [esp+4Ch+arg_14]
.text:004043C7                 mov     edx, [esp+4Ch+arg_C]
.text:004043CB                 mov     ecx, [esp+4Ch+Str]
.text:004043CF                 mov     ebx, [esp+4Ch+arg_4]
.text:004043D3                 mov     [esp+4Ch+var_38], eax ; int
.text:004043D7                 mov     ebp, [esp+4Ch+arg_0]
.text:004043DB                 mov     [esp+4Ch+State], edx ; int
.text:004043DF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004043E3                 mov     [esp+4Ch+Type], ebx ; int
.text:004043E7                 mov     [esp+4Ch+C], ebp ; int
.text:004043EA                 call    sub_403FB0
.text:004043EF
.text:004043EF loc_4043EF:                             ; CODE XREF: sub_403FB0+972↓j
.text:004043EF                 add     esp, 3Ch
.text:004043F2                 pop     ebx
.text:004043F3                 pop     esi
.text:004043F4                 pop     edi
.text:004043F5                 pop     ebp
.text:004043F6                 retn
.text:004043F7 ; ---------------------------------------------------------------------------
.text:004043F7
.text:004043F7 loc_4043F7:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043F7                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043F7                 mov     dl, 6Eh ; 'n'   ; jumptable 004040B5 case 10
.text:004043F9                 jmp     short loc_4043B4
.text:004043FB ; ---------------------------------------------------------------------------
.text:004043FB
.text:004043FB loc_4043FB:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043FB                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043FB                 mov     dl, 76h ; 'v'   ; jumptable 004040B5 case 11
.text:004043FD                 jmp     short loc_4043A0
.text:004043FF ; ---------------------------------------------------------------------------
.text:004043FF
.text:004043FF loc_4043FF:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043FF                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043FF                 mov     dl, 66h ; 'f'   ; jumptable 004040B5 case 12
.text:00404401                 jmp     short loc_4043A0
.text:00404403 ; ---------------------------------------------------------------------------
.text:00404403
.text:00404403 loc_404403:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404403                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404403                 mov     dl, 72h ; 'r'   ; jumptable 004040B5 case 13
.text:00404405                 jmp     short loc_4043B4
.text:00404407 ; ---------------------------------------------------------------------------
.text:00404407
.text:00404407 loc_404407:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404407                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404407                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040B5 case 39
.text:0040440C                 jz      short loc_4043BB ; jumptable 00404782 cases 91,92,94,96,124
.text:0040440E                 cmp     [esp+4Ch+arg_10], 2
.text:00404413                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404413                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:00404419                 mov     edx, [esp+4Ch+arg_4]
.text:0040441D                 cmp     [esp+4Ch+var_34], edx
.text:00404421                 jnb     short loc_40442F
.text:00404423                 mov     ecx, [esp+4Ch+arg_0]
.text:00404427                 mov     edi, [esp+4Ch+var_34]
.text:0040442B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040442F
.text:0040442F loc_40442F:                             ; CODE XREF: sub_403FB0+471↑j
.text:0040442F                 inc     [esp+4Ch+var_34]
.text:00404433                 mov     eax, [esp+4Ch+arg_4]
.text:00404437                 cmp     [esp+4Ch+var_34], eax
.text:0040443B                 jnb     short loc_404449
.text:0040443D                 mov     esi, [esp+4Ch+arg_0]
.text:00404441                 mov     edx, [esp+4Ch+var_34]
.text:00404445                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404449
.text:00404449 loc_404449:                             ; CODE XREF: sub_403FB0+48B↑j
.text:00404449                 inc     [esp+4Ch+var_34]
.text:0040444D                 mov     edi, [esp+4Ch+arg_4]
.text:00404451                 cmp     [esp+4Ch+var_34], edi
.text:00404455                 jnb     short loc_404463
.text:00404457                 mov     ecx, [esp+4Ch+arg_0]
.text:0040445B                 mov     eax, [esp+4Ch+var_34]
.text:0040445F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404463
.text:00404463 loc_404463:                             ; CODE XREF: sub_403FB0+4A5↑j
.text:00404463                                         ; sub_403FB0+5C4↓j ...
.text:00404463                 inc     [esp+4Ch+var_34]
.text:00404467                 jmp     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404467                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:0040446C ; ---------------------------------------------------------------------------
.text:0040446C
.text:0040446C loc_40446C:                             ; CODE XREF: sub_403FB0+105↑j
.text:0040446C                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:0040446C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040B5 case 63
.text:00404471                 jz      loc_4043BB      ; jumptable 00404782 cases 91,92,94,96,124
.text:00404477                 cmp     [esp+4Ch+arg_10], 3
.text:0040447C                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:0040447C                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:00404482                 lea     edx, [ebp+2]
.text:00404485                 cmp     edx, [esp+4Ch+arg_C]
.text:00404489                 jnb     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404489                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:0040448F                 mov     esi, [esp+4Ch+Str]
.text:00404493                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404498                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404498                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:0040449E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004044A3                 movsx   eax, cl
.text:004044A6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004044A9                 cmp     eax, 1Dh
.text:004044AC                 ja      def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:004044AC                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:004044B2                 jmp     ds:jpt_4044B2[eax*4] ; switch jump
.text:004044B2 ; ---------------------------------------------------------------------------
.text:004044B9                 align 4
.text:004044BC jpt_4044B2      dd offset loc_404534    ; DATA XREF: sub_403FB0+502↑r
.text:004044BC                 dd offset def_4044B2    ; jump table for switch statement
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset loc_404534
.text:00404534 ; ---------------------------------------------------------------------------
.text:00404534
.text:00404534 loc_404534:                             ; CODE XREF: sub_403FB0+502↑j
.text:00404534                                         ; DATA XREF: sub_403FB0:jpt_4044B2↑o
.text:00404534                 mov     ebp, edx        ; jumptable 004044B2 cases 33,39-41,45,47,60-62
.text:00404536                 mov     bl, cl
.text:00404538                 mov     edx, [esp+4Ch+arg_4]
.text:0040453C                 cmp     [esp+4Ch+var_34], edx
.text:00404540                 jnb     short loc_40454E
.text:00404542                 mov     ecx, [esp+4Ch+arg_0]
.text:00404546                 mov     edi, [esp+4Ch+var_34]
.text:0040454A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040454E
.text:0040454E loc_40454E:                             ; CODE XREF: sub_403FB0+590↑j
.text:0040454E                 inc     [esp+4Ch+var_34]
.text:00404552                 mov     eax, [esp+4Ch+arg_4]
.text:00404556                 cmp     [esp+4Ch+var_34], eax
.text:0040455A                 jnb     short loc_404568
.text:0040455C                 mov     edx, [esp+4Ch+arg_0]
.text:00404560                 mov     esi, [esp+4Ch+var_34]
.text:00404564                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404568
.text:00404568 loc_404568:                             ; CODE XREF: sub_403FB0+5AA↑j
.text:00404568                 inc     [esp+4Ch+var_34]
.text:0040456C                 mov     edi, [esp+4Ch+arg_4]
.text:00404570                 cmp     [esp+4Ch+var_34], edi
.text:00404574                 jnb     loc_404463
.text:0040457A                 mov     eax, [esp+4Ch+arg_0]
.text:0040457E                 mov     ecx, [esp+4Ch+var_34]
.text:00404582                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404586                 jmp     loc_404463
.text:00404586 ; ---------------------------------------------------------------------------
.text:0040458B                 align 10h
.text:00404590
.text:00404590 def_4040B5:                             ; CODE XREF: sub_403FB0+FF↑j
.text:00404590                                         ; sub_403FB0+105↑j
.text:00404590                                         ; DATA XREF: ...
.text:00404590                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004040B5 default case, cases 1-6,14-31,64
.text:00404595                 jz      loc_4046C0
.text:0040459B                 mov     [esp+4Ch+var_28], 1
.text:004045A3                 mov     esi, ds:__mb_cur_max
.text:004045A9                 movzx   edx, bl
.text:004045AC                 cmp     dword ptr [esi], 1
.text:004045AF                 jz      loc_4046A4
.text:004045B5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004045BD                 mov     [esp+4Ch+C], edx ; C
.text:004045C0                 call    _isctype
.text:004045C5
.text:004045C5 loc_4045C5:                             ; CODE XREF: sub_403FB0+705↓j
.text:004045C5                 test    eax, eax
.text:004045C7                 setnz   [esp+4Ch+var_29]
.text:004045CC
.text:004045CC loc_4045CC:                             ; CODE XREF: sub_403FB0+7A5↓j
.text:004045CC                 cmp     [esp+4Ch+var_21], 0
.text:004045D1                 lea     eax, [ebp+1]
.text:004045D4                 jz      loc_404370
.text:004045DA                 cmp     [esp+4Ch+var_29], 0
.text:004045DF                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:004045DF                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:004045E5
.text:004045E5 loc_4045E5:                             ; CODE XREF: sub_403FB0+7AB↓j
.text:004045E5                 mov     eax, [esp+4Ch+var_28]
.text:004045E9                 lea     edx, [eax+ebp]
.text:004045EC                 lea     esi, [esi+0]
.text:004045F0
.text:004045F0 loc_4045F0:                             ; CODE XREF: sub_403FB0+6EF↓j
.text:004045F0                 cmp     [esp+4Ch+var_21], 0
.text:004045F5                 jz      short loc_404670
.text:004045F7                 cmp     [esp+4Ch+var_29], 0
.text:004045FC                 jnz     short loc_404670
.text:004045FE                 mov     edi, [esp+4Ch+arg_4]
.text:00404602                 cmp     [esp+4Ch+var_34], edi
.text:00404606                 jnb     short loc_404614
.text:00404608                 mov     esi, [esp+4Ch+arg_0]
.text:0040460C                 mov     eax, [esp+4Ch+var_34]
.text:00404610                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404614
.text:00404614 loc_404614:                             ; CODE XREF: sub_403FB0+656↑j
.text:00404614                 inc     [esp+4Ch+var_34]
.text:00404618                 mov     ecx, [esp+4Ch+arg_4]
.text:0040461C                 cmp     [esp+4Ch+var_34], ecx
.text:00404620                 jnb     short loc_404635
.text:00404622                 mov     cl, bl
.text:00404624                 mov     esi, [esp+4Ch+arg_0]
.text:00404628                 mov     edi, [esp+4Ch+var_34]
.text:0040462C                 shr     cl, 6
.text:0040462F                 add     cl, 30h ; '0'
.text:00404632                 mov     [edi+esi], cl
.text:00404635
.text:00404635 loc_404635:                             ; CODE XREF: sub_403FB0+670↑j
.text:00404635                 inc     [esp+4Ch+var_34]
.text:00404639                 mov     edi, [esp+4Ch+arg_4]
.text:0040463D                 cmp     [esp+4Ch+var_34], edi
.text:00404641                 jnb     short loc_404659
.text:00404643                 mov     cl, bl
.text:00404645                 mov     esi, [esp+4Ch+arg_0]
.text:00404649                 shr     cl, 3
.text:0040464C                 mov     edi, [esp+4Ch+var_34]
.text:00404650                 and     cl, 7
.text:00404653                 add     cl, 30h ; '0'
.text:00404656                 mov     [edi+esi], cl
.text:00404659
.text:00404659 loc_404659:                             ; CODE XREF: sub_403FB0+691↑j
.text:00404659                 inc     [esp+4Ch+var_34]
.text:0040465D                 and     bl, 7
.text:00404660                 add     bl, 30h ; '0'
.text:00404663                 lea     esi, [esi+0]
.text:00404669                 lea     edi, [edi+0]
.text:00404670
.text:00404670 loc_404670:                             ; CODE XREF: sub_403FB0+645↑j
.text:00404670                                         ; sub_403FB0+64C↑j
.text:00404670                 lea     eax, [ebp+1]
.text:00404673                 cmp     edx, eax
.text:00404675                 jbe     loc_404370
.text:0040467B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040467F                 cmp     [esp+4Ch+var_34], ebp
.text:00404683                 jnb     short loc_404690
.text:00404685                 mov     ecx, [esp+4Ch+arg_0]
.text:00404689                 mov     edi, [esp+4Ch+var_34]
.text:0040468D                 mov     [edi+ecx], bl
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_403FB0+6D3↑j
.text:00404690                 inc     [esp+4Ch+var_34]
.text:00404694                 mov     ebp, eax
.text:00404696                 mov     eax, [esp+4Ch+Str]
.text:0040469A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040469F                 jmp     loc_4045F0
.text:004046A4 ; ---------------------------------------------------------------------------
.text:004046A4
.text:004046A4 loc_4046A4:                             ; CODE XREF: sub_403FB0+5FF↑j
.text:004046A4                 mov     ecx, ds:_pctype
.text:004046AA                 mov     edi, [ecx]
.text:004046AC                 movzx   eax, word ptr [edi+edx*2]
.text:004046B0                 and     eax, 157h
.text:004046B5                 jmp     loc_4045C5
.text:004046B5 ; ---------------------------------------------------------------------------
.text:004046BA                 align 10h
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_403FB0+5E5↑j
.text:004046C0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004046C5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004046CD                 mov     [esp+4Ch+var_28], 0
.text:004046D5                 mov     [esp+4Ch+var_29], 1
.text:004046DA                 jz      loc_40486C
.text:004046E0
.text:004046E0 loc_4046E0:                             ; CODE XREF: sub_403FB0+8CC↓j
.text:004046E0                 mov     ecx, [esp+4Ch+arg_C]
.text:004046E4                 lea     edx, [esp+4Ch+var_18]
.text:004046E8                 mov     edi, [esp+4Ch+Str]
.text:004046EC                 mov     [esp+4Ch+State], edx ; State
.text:004046F0                 lea     esi, [esp+4Ch+var_18._State]
.text:004046F4                 sub     ecx, ebp
.text:004046F6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004046FA                 add     edi, ebp
.text:004046FC                 mov     [esp+4Ch+var_30], edi
.text:00404700                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404704                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404707                 call    mbrtowc
.text:0040470C                 test    eax, eax
.text:0040470E                 mov     edi, eax
.text:00404710                 jz      short loc_404750
.text:00404712                 cmp     eax, 0FFFFFFFFh
.text:00404715                 jz      loc_404862
.text:0040471B                 cmp     eax, 0FFFFFFFEh
.text:0040471E                 jz      loc_404822
.text:00404724                 cmp     [esp+4Ch+arg_10], 1
.text:00404729                 jz      short loc_404760
.text:0040472B
.text:0040472B loc_40472B:                             ; CODE XREF: sub_403FB0+7B9↓j
.text:0040472B                                         ; sub_403FB0+86D↓j
.text:0040472B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404730                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404738                 mov     [esp+4Ch+C], ecx ; C
.text:0040473B                 call    iswctype
.text:00404740                 test    eax, eax
.text:00404742                 jnz     short loc_404749
.text:00404744                 mov     [esp+4Ch+var_29], 0
.text:00404749
.text:00404749 loc_404749:                             ; CODE XREF: sub_403FB0+792↑j
.text:00404749                 mov     [esp+4Ch+var_28], edi
.text:0040474D                 lea     esi, [esi+0]
.text:00404750
.text:00404750 loc_404750:                             ; CODE XREF: sub_403FB0+760↑j
.text:00404750                                         ; sub_403FB0+87B↓j ...
.text:00404750                 cmp     [esp+4Ch+var_28], 1
.text:00404755                 jbe     loc_4045CC
.text:0040475B                 jmp     loc_4045E5
.text:00404760 ; ---------------------------------------------------------------------------
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_403FB0+779↑j
.text:00404760                 cmp     [esp+4Ch+arg_10], eax
.text:00404764                 mov     edx, 1
.text:00404769                 jnb     short loc_40472B
.text:0040476B
.text:0040476B loc_40476B:                             ; CODE XREF: sub_403FB0+867↓j
.text:0040476B                 mov     ecx, [esp+4Ch+Str]
.text:0040476F                 lea     esi, [edx+ebp]
.text:00404772                 movsx   eax, byte ptr [esi+ecx]
.text:00404776                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404779                 cmp     eax, 21h
.text:0040477C                 ja      def_404782      ; jumptable 00404782 default case, cases 93,95,97-123
.text:00404782                 jmp     ds:jpt_404782[eax*4] ; switch jump
.text:00404782 ; ---------------------------------------------------------------------------
.text:00404789                 align 4
.text:0040478C jpt_404782      dd offset loc_4043BB    ; DATA XREF: sub_403FB0+7D2↑r
.text:0040478C                 dd offset loc_4043BB    ; jump table for switch statement
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset loc_4043BB
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset loc_4043BB
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset loc_4043BB
.text:00404814 ; ---------------------------------------------------------------------------
.text:00404814
.text:00404814 def_404782:                             ; CODE XREF: sub_403FB0+7CC↑j
.text:00404814                                         ; sub_403FB0+7D2↑j
.text:00404814                                         ; DATA XREF: ...
.text:00404814                 inc     edx             ; jumptable 00404782 default case, cases 93,95,97-123
.text:00404815                 cmp     edx, edi
.text:00404817                 jb      loc_40476B
.text:0040481D                 jmp     loc_40472B
.text:00404822 ; ---------------------------------------------------------------------------
.text:00404822
.text:00404822 loc_404822:                             ; CODE XREF: sub_403FB0+76E↑j
.text:00404822                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404826                 mov     [esp+4Ch+var_29], 0
.text:0040482B                 jnb     loc_404750
.text:00404831                 mov     eax, [esp+4Ch+var_30]
.text:00404835                 cmp     byte ptr [eax], 0
.text:00404838                 jz      loc_404750
.text:0040483E
.text:0040483E loc_40483E:                             ; CODE XREF: sub_403FB0+8AB↓j
.text:0040483E                 inc     [esp+4Ch+var_28]
.text:00404842                 mov     esi, [esp+4Ch+var_28]
.text:00404846                 lea     eax, [esi+ebp]
.text:00404849                 cmp     eax, [esp+4Ch+arg_C]
.text:0040484D                 jnb     loc_404750
.text:00404853                 mov     edi, [esp+4Ch+Str]
.text:00404857                 cmp     byte ptr [eax+edi], 0
.text:0040485B                 jnz     short loc_40483E
.text:0040485D                 jmp     loc_404750
.text:00404862 ; ---------------------------------------------------------------------------
.text:00404862
.text:00404862 loc_404862:                             ; CODE XREF: sub_403FB0+765↑j
.text:00404862                 mov     [esp+4Ch+var_29], 0
.text:00404867                 jmp     loc_404750
.text:0040486C ; ---------------------------------------------------------------------------
.text:0040486C
.text:0040486C loc_40486C:                             ; CODE XREF: sub_403FB0+72A↑j
.text:0040486C                 mov     edx, [esp+4Ch+Str]
.text:00404870                 mov     [esp+4Ch+C], edx ; Str
.text:00404873                 call    strlen
.text:00404878                 mov     [esp+4Ch+arg_C], eax
.text:0040487C                 jmp     loc_4046E0
.text:00404881 ; ---------------------------------------------------------------------------
.text:00404881
.text:00404881 loc_404881:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404881                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404881                 mov     dl, bl          ; jumptable 004040B5 case 92
.text:00404883                 jmp     loc_4043B4
.text:00404888 ; ---------------------------------------------------------------------------
.text:00404888
.text:00404888 loc_404888:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404888                                         ; sub_403FB0+902↓j
.text:00404888                                         ; DATA XREF: ...
.text:00404888                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040488D                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:0040488D                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:00404893                 jmp     loc_4043BB      ; jumptable 00404782 cases 91,92,94,96,124
.text:00404898 ; ---------------------------------------------------------------------------
.text:00404898
.text:00404898 loc_404898:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404898                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404898                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004040B5 cases 123,125
.text:0040489D                 jz      short loc_4048B4
.text:0040489F                 cmp     [esp+4Ch+arg_C], 1
.text:004048A4
.text:004048A4 loc_4048A4:                             ; CODE XREF: sub_403FB0+90C↓j
.text:004048A4                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:004048A4                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:004048AA
.text:004048AA loc_4048AA:                             ; CODE XREF: sub_403FB0+105↑j
.text:004048AA                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004048AA                 test    ebp, ebp        ; jumptable 004040B5 cases 35,126
.text:004048AC                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:004048AC                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:004048B2                 jmp     short loc_404888 ; jumptable 004040B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004048B4 ; ---------------------------------------------------------------------------
.text:004048B4
.text:004048B4 loc_4048B4:                             ; CODE XREF: sub_403FB0+8ED↑j
.text:004048B4                 mov     esi, [esp+4Ch+Str]
.text:004048B8                 cmp     byte ptr [esi+1], 0
.text:004048BC                 jmp     short loc_4048A4
.text:004048BE ; ---------------------------------------------------------------------------
.text:004048BE
.text:004048BE loc_4048BE:                             ; CODE XREF: sub_403FB0:loc_40404F↑j
.text:004048BE                 test    ebp, ebp
.text:004048C0                 jnz     short loc_4048CD
.text:004048C2                 cmp     [esp+4Ch+arg_10], 1
.text:004048C7                 jz      loc_4043BB      ; jumptable 00404782 cases 91,92,94,96,124
.text:004048CD
.text:004048CD loc_4048CD:                             ; CODE XREF: sub_403FB0+910↑j
.text:004048CD                 mov     esi, [esp+4Ch+var_1C]
.text:004048D1                 test    esi, esi
.text:004048D3                 jz      short loc_404908
.text:004048D5                 mov     edi, [esp+4Ch+var_1C]
.text:004048D9                 movzx   eax, byte ptr [edi]
.text:004048DC                 test    al, al
.text:004048DE                 jz      short loc_404908
.text:004048E0
.text:004048E0 loc_4048E0:                             ; CODE XREF: sub_403FB0+956↓j
.text:004048E0                 mov     ebp, [esp+4Ch+arg_4]
.text:004048E4                 cmp     [esp+4Ch+var_34], ebp
.text:004048E8                 jnb     short loc_4048F5
.text:004048EA                 mov     ecx, [esp+4Ch+arg_0]
.text:004048EE                 mov     ebx, [esp+4Ch+var_34]
.text:004048F2                 mov     [ebx+ecx], al
.text:004048F5
.text:004048F5 loc_4048F5:                             ; CODE XREF: sub_403FB0+938↑j
.text:004048F5                 inc     [esp+4Ch+var_1C]
.text:004048F9                 inc     [esp+4Ch+var_34]
.text:004048FD                 mov     edx, [esp+4Ch+var_1C]
.text:00404901                 movzx   eax, byte ptr [edx]
.text:00404904                 test    al, al
.text:00404906                 jnz     short loc_4048E0
.text:00404908
.text:00404908 loc_404908:                             ; CODE XREF: sub_403FB0+923↑j
.text:00404908                                         ; sub_403FB0+92E↑j
.text:00404908                 mov     eax, [esp+4Ch+arg_4]
.text:0040490C                 cmp     [esp+4Ch+var_34], eax
.text:00404910                 jnb     short loc_40491E
.text:00404912                 mov     edi, [esp+4Ch+arg_0]
.text:00404916                 mov     esi, [esp+4Ch+var_34]
.text:0040491A                 mov     byte ptr [esi+edi], 0
.text:0040491E
.text:0040491E loc_40491E:                             ; CODE XREF: sub_403FB0+960↑j
.text:0040491E                 mov     eax, [esp+4Ch+var_34]
.text:00404922                 jmp     loc_4043EF
.text:00404927 ; ---------------------------------------------------------------------------
.text:00404927
.text:00404927 loc_404927:                             ; CODE XREF: sub_403FB0+95↑j
.text:00404927                 mov     ebx, [esp+4Ch+Str]
.text:0040492B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404930                 jmp     loc_40404F
.text:00404935 ; ---------------------------------------------------------------------------
.text:00404935
.text:00404935 loc_404935:                             ; CODE XREF: sub_403FB0+3D↑j
.text:00404935                                         ; DATA XREF: sub_403FB0:jpt_403FED↑o
.text:00404935                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403FED case 2
.text:00404939                 cmp     [esp+4Ch+var_34], edx
.text:0040493D                 jnb     short loc_404946
.text:0040493F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404943                 mov     byte ptr [ecx], 27h ; '''
.text:00404946
.text:00404946 loc_404946:                             ; CODE XREF: sub_403FB0+98D↑j
.text:00404946                 mov     [esp+4Ch+var_34], 1
.text:0040494E                 mov     [esp+4Ch+var_1C], 403F9Eh
.text:00404956                 jmp     loc_404036
.text:0040495B ; ---------------------------------------------------------------------------
.text:0040495B
.text:0040495B loc_40495B:                             ; CODE XREF: sub_403FB0+3D↑j
.text:0040495B                                         ; DATA XREF: sub_403FB0:jpt_403FED↑o
.text:0040495B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403FED case 4
.text:00404960                 jmp     def_403FED      ; jumptable 00403FED default case, cases 0,1
.text:00404965 ; ---------------------------------------------------------------------------
.text:00404965
.text:00404965 loc_404965:                             ; CODE XREF: sub_403FB0+3D↑j
.text:00404965                                         ; DATA XREF: sub_403FB0:jpt_403FED↑o
.text:00404965                 mov     [esp+4Ch+C], 403FA0h ; jumptable 00403FED cases 5,6
.text:0040496C                 call    ds:libintl_gettext
.text:00404972                 cmp     eax, 403FA0h
.text:00404977                 mov     edi, eax
.text:00404979                 jz      short loc_4049F0
.text:0040497B
.text:0040497B loc_40497B:                             ; CODE XREF: sub_403FB0+A45↓j
.text:0040497B                                         ; sub_403FB0+A4C↓j
.text:0040497B                 mov     [esp+4Ch+C], 403F9Eh
.text:00404982                 call    ds:libintl_gettext
.text:00404988                 cmp     eax, 403F9Eh
.text:0040498D                 mov     edx, eax
.text:0040498F                 jz      short loc_4049E2
.text:00404991
.text:00404991 loc_404991:                             ; CODE XREF: sub_403FB0+A37↓j
.text:00404991                                         ; sub_403FB0+A3E↓j
.text:00404991                 mov     [esp+4Ch+var_1C], edi
.text:00404995                 cmp     byte ptr [edi], 0
.text:00404998                 jz      short loc_4049C8
.text:0040499A
.text:0040499A loc_40499A:                             ; CODE XREF: sub_403FB0+A16↓j
.text:0040499A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040499E                 cmp     [esp+4Ch+var_34], ecx
.text:004049A2                 jnb     short loc_4049B7
.text:004049A4                 mov     ebp, [esp+4Ch+var_1C]
.text:004049A8                 mov     edi, [esp+4Ch+arg_0]
.text:004049AC                 mov     esi, [esp+4Ch+var_34]
.text:004049B0                 movzx   ebx, byte ptr [ebp+0]
.text:004049B4                 mov     [esi+edi], bl
.text:004049B7
.text:004049B7 loc_4049B7:                             ; CODE XREF: sub_403FB0+9F2↑j
.text:004049B7                 inc     [esp+4Ch+var_1C]
.text:004049BB                 inc     [esp+4Ch+var_34]
.text:004049BF                 mov     eax, [esp+4Ch+var_1C]
.text:004049C3                 cmp     byte ptr [eax], 0
.text:004049C6                 jnz     short loc_40499A
.text:004049C8
.text:004049C8 loc_4049C8:                             ; CODE XREF: sub_403FB0+9E8↑j
.text:004049C8                 mov     [esp+4Ch+var_21], 1
.text:004049CD                 mov     [esp+4Ch+var_1C], edx
.text:004049D1                 mov     [esp+4Ch+C], edx ; Str
.text:004049D4                 call    strlen
.text:004049D9                 mov     [esp+4Ch+var_20], eax
.text:004049DD                 jmp     def_403FED      ; jumptable 00403FED default case, cases 0,1
.text:004049E2 ; ---------------------------------------------------------------------------
.text:004049E2
.text:004049E2 loc_4049E2:                             ; CODE XREF: sub_403FB0+9DF↑j
.text:004049E2                 cmp     [esp+4Ch+arg_10], 6
.text:004049E7                 jnz     short loc_404991
.text:004049E9                 mov     edx, offset asc_403F9C ; "\"'`"
.text:004049EE                 jmp     short loc_404991
.text:004049F0 ; ---------------------------------------------------------------------------
.text:004049F0
.text:004049F0 loc_4049F0:                             ; CODE XREF: sub_403FB0+9C9↑j
.text:004049F0                 cmp     [esp+4Ch+arg_10], 6
.text:004049F5                 jnz     short loc_40497B
.text:004049F7                 mov     edi, offset asc_403F9C ; "\"'`"
.text:004049FC                 jmp     loc_40497B
.text:004049FC sub_403FB0      endp
.text:004049FC
.text:00404A01 ; ---------------------------------------------------------------------------
.text:00404A01                 jmp     short loc_404A10
.text:00404A01 ; ---------------------------------------------------------------------------
.text:00404A03                 align 10h
.text:00404A10
.text:00404A10 loc_404A10:                             ; CODE XREF: .text:00404A01↑j
.text:00404A10                 sub     esp, 0Ch
.text:00404A13                 mov     [esp+4], ebx
.text:00404A17                 mov     [esp+8], esi
.text:00404A1B                 call    _errno
.text:00404A20                 mov     esi, [eax]
.text:00404A22                 mov     dword ptr [esp], 24h ; '$'
.text:00404A29                 call    sub_403C90
.text:00404A2E                 mov     edx, [esp+10h]
.text:00404A32                 mov     ebx, eax
.text:00404A34                 test    edx, edx
.text:00404A36                 jz      short loc_404A81
.text:00404A38
.text:00404A38 loc_404A38:                             ; CODE XREF: .text:00404A86↓j
.text:00404A38                 mov     ecx, [edx]
.text:00404A3A                 mov     [ebx], ecx
.text:00404A3C                 mov     ecx, [edx+4]
.text:00404A3F                 mov     [ebx+4], ecx
.text:00404A42                 mov     ecx, [edx+8]
.text:00404A45                 mov     [ebx+8], ecx
.text:00404A48                 mov     ecx, [edx+0Ch]
.text:00404A4B                 mov     [ebx+0Ch], ecx
.text:00404A4E                 mov     ecx, [edx+10h]
.text:00404A51                 mov     [ebx+10h], ecx
.text:00404A54                 mov     ecx, [edx+14h]
.text:00404A57                 mov     [ebx+14h], ecx
.text:00404A5A                 mov     ecx, [edx+18h]
.text:00404A5D                 mov     [ebx+18h], ecx
.text:00404A60                 mov     ecx, [edx+1Ch]
.text:00404A63                 mov     [ebx+1Ch], ecx
.text:00404A66                 mov     ecx, [edx+20h]
.text:00404A69                 mov     [ebx+20h], ecx
.text:00404A6C                 call    _errno
.text:00404A71                 mov     [eax], esi
.text:00404A73                 mov     esi, [esp+8]
.text:00404A77                 mov     eax, ebx
.text:00404A79                 mov     ebx, [esp+4]
.text:00404A7D                 add     esp, 0Ch
.text:00404A80                 retn
.text:00404A81 ; ---------------------------------------------------------------------------
.text:00404A81
.text:00404A81 loc_404A81:                             ; CODE XREF: .text:00404A36↑j
.text:00404A81                 mov     edx, offset dword_408140
.text:00404A86                 jmp     short loc_404A38
.text:00404A86 ; ---------------------------------------------------------------------------
.text:00404A88                 align 10h
.text:00404A90                 mov     eax, [esp+4]
.text:00404A94                 test    eax, eax
.text:00404A96                 jz      short loc_404AA0
.text:00404A98
.text:00404A98 loc_404A98:                             ; CODE XREF: .text:00404AA5↓j
.text:00404A98                 mov     eax, [eax]
.text:00404A9A                 retn
.text:00404A9A ; ---------------------------------------------------------------------------
.text:00404A9B                 align 10h
.text:00404AA0
.text:00404AA0 loc_404AA0:                             ; CODE XREF: .text:00404A96↑j
.text:00404AA0                 mov     eax, offset dword_408140
.text:00404AA5                 jmp     short loc_404A98
.text:00404AA5 ; ---------------------------------------------------------------------------
.text:00404AA7                 align 10h
.text:00404AB0                 mov     edx, [esp+4]
.text:00404AB4                 test    edx, edx
.text:00404AB6                 jz      short loc_404AC0
.text:00404AB8
.text:00404AB8 loc_404AB8:                             ; CODE XREF: .text:00404AC5↓j
.text:00404AB8                 mov     ecx, [esp+8]
.text:00404ABC                 mov     [edx], ecx
.text:00404ABE                 retn
.text:00404ABE ; ---------------------------------------------------------------------------
.text:00404ABF                 align 10h
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: .text:00404AB6↑j
.text:00404AC0                 mov     edx, offset dword_408140
.text:00404AC5                 jmp     short loc_404AB8
.text:00404AC5 ; ---------------------------------------------------------------------------
.text:00404AC7                 align 10h
.text:00404AD0                 sub     esp, 8
.text:00404AD3                 mov     eax, [esp+0Ch]
.text:00404AD7                 movzx   ecx, byte ptr [esp+10h]
.text:00404ADC                 mov     [esp], ebx
.text:00404ADF                 mov     ebx, [esp+14h]
.text:00404AE3                 mov     [esp+4], esi
.text:00404AE7                 mov     dl, cl
.text:00404AE9                 shr     dl, 5
.text:00404AEC                 movzx   edx, dl
.text:00404AEF                 shl     edx, 2
.text:00404AF2                 test    eax, eax
.text:00404AF4                 lea     esi, [edx+eax+4]
.text:00404AF8                 jz      short loc_404B20
.text:00404AFA
.text:00404AFA loc_404AFA:                             ; CODE XREF: .text:00404B26↓j
.text:00404AFA                 mov     edx, [esi]
.text:00404AFC                 and     ecx, 1Fh
.text:00404AFF                 and     ebx, 1
.text:00404B02                 mov     eax, edx
.text:00404B04                 shr     eax, cl
.text:00404B06                 and     eax, 1
.text:00404B09                 xor     ebx, eax
.text:00404B0B                 shl     ebx, cl
.text:00404B0D                 xor     edx, ebx
.text:00404B0F                 mov     [esi], edx
.text:00404B11                 mov     ebx, [esp]
.text:00404B14                 mov     esi, [esp+4]
.text:00404B18                 add     esp, 8
.text:00404B1B                 retn
.text:00404B1B ; ---------------------------------------------------------------------------
.text:00404B1C                 align 10h
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: .text:00404AF8↑j
.text:00404B20                 lea     esi, dword_408144[edx]
.text:00404B26                 jmp     short loc_404AFA
.text:00404B26 ; ---------------------------------------------------------------------------
.text:00404B28                 align 10h
.text:00404B30                 sub     esp, 2Ch
.text:00404B33                 mov     [esp+24h], ebx
.text:00404B37                 mov     ebx, [esp+40h]
.text:00404B3B                 mov     [esp+28h], esi
.text:00404B3F                 test    ebx, ebx
.text:00404B41                 jz      short loc_404B90
.text:00404B43
.text:00404B43 loc_404B43:                             ; CODE XREF: .text:00404B95↓j
.text:00404B43                 call    _errno
.text:00404B48                 mov     esi, [eax]
.text:00404B4A                 mov     [esp+14h], ebx
.text:00404B4E                 mov     edx, [ebx]
.text:00404B50                 mov     ecx, [esp+38h]
.text:00404B54                 mov     ebx, [esp+3Ch]
.text:00404B58                 mov     [esp+10h], edx
.text:00404B5C                 mov     edx, [esp+34h]
.text:00404B60                 mov     [esp+0Ch], ebx
.text:00404B64                 mov     [esp+8], ecx
.text:00404B68                 mov     [esp+4], edx
.text:00404B6C                 mov     edx, [esp+30h]
.text:00404B70                 mov     [esp], edx
.text:00404B73                 call    sub_403FB0
.text:00404B78                 mov     ebx, eax
.text:00404B7A                 call    _errno
.text:00404B7F                 mov     [eax], esi
.text:00404B81                 mov     esi, [esp+28h]
.text:00404B85                 mov     eax, ebx
.text:00404B87                 mov     ebx, [esp+24h]
.text:00404B8B                 add     esp, 2Ch
.text:00404B8E                 retn
.text:00404B8E ; ---------------------------------------------------------------------------
.text:00404B8F                 align 10h
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: .text:00404B41↑j
.text:00404B90                 mov     ebx, offset dword_408140
.text:00404B95                 jmp     short loc_404B43
.text:00404B95 ; ---------------------------------------------------------------------------
.text:00404B97                 align 10h
.text:00404BA0                 push    ebp
.text:00404BA1                 push    edi
.text:00404BA2                 push    esi
.text:00404BA3                 push    ebx
.text:00404BA4                 sub     esp, 2Ch
.text:00404BA7                 mov     ebp, [esp+48h]
.text:00404BAB                 call    _errno
.text:00404BB0                 mov     edx, [eax]
.text:00404BB2                 test    ebp, ebp
.text:00404BB4                 mov     ebx, ebp
.text:00404BB6                 mov     [esp+28h], edx
.text:00404BBA                 jz      loc_404C70
.text:00404BC0
.text:00404BC0 loc_404BC0:                             ; CODE XREF: .text:00404C75↓j
.text:00404BC0                 call    _errno
.text:00404BC5                 mov     edi, [eax]
.text:00404BC7                 mov     esi, ebp
.text:00404BC9                 mov     [esp+14h], ebx
.text:00404BCD                 mov     ecx, [ebx]
.text:00404BCF                 mov     dword ptr [esp], 0
.text:00404BD6                 mov     edx, [esp+44h]
.text:00404BDA                 mov     dword ptr [esp+4], 0
.text:00404BE2                 mov     eax, [esp+40h]
.text:00404BE6                 mov     [esp+10h], ecx
.text:00404BEA                 mov     [esp+0Ch], edx
.text:00404BEE                 mov     [esp+8], eax
.text:00404BF2                 call    sub_403FB0
.text:00404BF7                 mov     ebx, eax
.text:00404BF9                 call    _errno
.text:00404BFE                 mov     [eax], edi
.text:00404C00                 lea     edi, [ebx+1]
.text:00404C03                 mov     [esp], edi
.text:00404C06                 call    sub_403C90
.text:00404C0B                 mov     [esp+24h], eax
.text:00404C0F                 test    ebp, ebp
.text:00404C11                 jz      short loc_404C62
.text:00404C13
.text:00404C13 loc_404C13:                             ; CODE XREF: .text:00404C67↓j
.text:00404C13                 call    _errno
.text:00404C18                 mov     ebp, [eax]
.text:00404C1A                 mov     [esp+14h], esi
.text:00404C1E                 mov     ecx, [esi]
.text:00404C20                 mov     [esp+4], edi
.text:00404C24                 mov     edx, [esp+44h]
.text:00404C28                 mov     esi, [esp+24h]
.text:00404C2C                 mov     [esp+10h], ecx
.text:00404C30                 mov     eax, [esp+40h]
.text:00404C34                 mov     [esp+0Ch], edx
.text:00404C38                 mov     [esp], esi
.text:00404C3B                 mov     [esp+8], eax
.text:00404C3F                 call    sub_403FB0
.text:00404C44                 call    _errno
.text:00404C49                 mov     [eax], ebp
.text:00404C4B                 call    _errno
.text:00404C50                 mov     ebx, [esp+28h]
.text:00404C54                 mov     [eax], ebx
.text:00404C56                 mov     eax, [esp+24h]
.text:00404C5A                 add     esp, 2Ch
.text:00404C5D                 pop     ebx
.text:00404C5E                 pop     esi
.text:00404C5F                 pop     edi
.text:00404C60                 pop     ebp
.text:00404C61                 retn
.text:00404C62 ; ---------------------------------------------------------------------------
.text:00404C62
.text:00404C62 loc_404C62:                             ; CODE XREF: .text:00404C11↑j
.text:00404C62                 mov     esi, offset dword_408140
.text:00404C67                 jmp     short loc_404C13
.text:00404C67 ; ---------------------------------------------------------------------------
.text:00404C69                 align 10h
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: .text:00404BBA↑j
.text:00404C70                 mov     ebx, offset dword_408140
.text:00404C75                 jmp     loc_404BC0
.text:00404C75 ; ---------------------------------------------------------------------------
.text:00404C7A                 align 10h
.text:00404C80                 sub     esp, 1Ch
.text:00404C83                 mov     edx, [esp+24h]
.text:00404C87                 mov     dword ptr [esp+0Ch], offset dword_408140
.text:00404C8F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404C97                 mov     [esp+4], edx
.text:00404C9B                 mov     edx, [esp+20h]
.text:00404C9F                 mov     [esp], edx
.text:00404CA2                 call    sub_4050F0
.text:00404CA7                 add     esp, 1Ch
.text:00404CAA                 retn
.text:00404CAA ; ---------------------------------------------------------------------------
.text:00404CAB                 align 10h
.text:00404CB0                 sub     esp, 1Ch
.text:00404CB3                 mov     edx, [esp+20h]
.text:00404CB7                 mov     dword ptr [esp+0Ch], offset dword_408140
.text:00404CBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404CC7                 mov     [esp+4], edx
.text:00404CCB                 mov     dword ptr [esp], 0
.text:00404CD2                 call    sub_4050F0
.text:00404CD7                 add     esp, 1Ch
.text:00404CDA                 retn
.text:00404CDA ; ---------------------------------------------------------------------------
.text:00404CDB                 align 10h
.text:00404CE0                 push    ebp
.text:00404CE1                 xor     eax, eax
.text:00404CE3                 mov     ecx, 8
.text:00404CE8                 push    edi
.text:00404CE9                 push    esi
.text:00404CEA                 push    ebx
.text:00404CEB                 sub     esp, 0ACh
.text:00404CF1                 mov     ebp, [esp+0C4h]
.text:00404CF8                 cld
.text:00404CF9                 lea     edi, [esp+14h]
.text:00404CFD                 mov     [esp+10h], ebp
.text:00404D01                 rep stosd
.text:00404D03                 mov     eax, [esp+30h]
.text:00404D07                 mov     edi, [esp+10h]
.text:00404D0B                 mov     esi, [esp+14h]
.text:00404D0F                 mov     [esp+60h], eax
.text:00404D13                 mov     ebp, [esp+18h]
.text:00404D17                 mov     eax, [esp+10h]
.text:00404D1B                 mov     [esp+40h], edi
.text:00404D1F                 mov     ecx, [esp+28h]
.text:00404D23                 mov     edi, [esp+1Ch]
.text:00404D27                 mov     [esp+44h], esi
.text:00404D2B                 mov     edx, [esp+2Ch]
.text:00404D2F                 mov     esi, [esp+20h]
.text:00404D33                 mov     [esp+70h], eax
.text:00404D37                 mov     ebx, [esp+24h]
.text:00404D3B                 mov     eax, [esp+14h]
.text:00404D3F                 mov     [esp+48h], ebp
.text:00404D43                 mov     [esp+4Ch], edi
.text:00404D47                 mov     [esp+50h], esi
.text:00404D4B                 mov     [esp+54h], ebx
.text:00404D4F                 mov     [esp+58h], ecx
.text:00404D53                 mov     [esp+5Ch], edx
.text:00404D57                 mov     [esp+74h], eax
.text:00404D5B                 mov     [esp+78h], ebp
.text:00404D5F                 mov     [esp+7Ch], edi
.text:00404D63                 mov     [esp+80h], esi
.text:00404D6A                 mov     [esp+84h], ebx
.text:00404D71                 mov     ebx, [esp+30h]
.text:00404D75                 mov     [esp+8Ch], edx
.text:00404D7C                 mov     edx, [esp+0C8h]
.text:00404D83                 mov     [esp+88h], ecx
.text:00404D8A                 lea     ecx, [esp+70h]
.text:00404D8E                 mov     [esp+4], edx
.text:00404D92                 mov     edx, [esp+0C0h]
.text:00404D99                 mov     [esp+90h], ebx
.text:00404DA0                 mov     [esp+0Ch], ecx
.text:00404DA4                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404DAC                 mov     [esp], edx
.text:00404DAF                 call    sub_4050F0
.text:00404DB4                 add     esp, 0ACh
.text:00404DBA                 pop     ebx
.text:00404DBB                 pop     esi
.text:00404DBC                 pop     edi
.text:00404DBD                 pop     ebp
.text:00404DBE                 retn
.text:00404DBE ; ---------------------------------------------------------------------------
.text:00404DBF                 align 10h
.text:00404DC0                 push    ebp
.text:00404DC1                 xor     eax, eax
.text:00404DC3                 mov     ecx, 8
.text:00404DC8                 push    edi
.text:00404DC9                 push    esi
.text:00404DCA                 push    ebx
.text:00404DCB                 sub     esp, 0ACh
.text:00404DD1                 mov     edx, [esp+0C4h]
.text:00404DD8                 cld
.text:00404DD9                 lea     edi, [esp+14h]
.text:00404DDD                 mov     [esp+10h], edx
.text:00404DE1                 rep stosd
.text:00404DE3                 mov     eax, [esp+30h]
.text:00404DE7                 mov     ebp, [esp+10h]
.text:00404DEB                 mov     edi, [esp+14h]
.text:00404DEF                 mov     [esp+60h], eax
.text:00404DF3                 mov     esi, [esp+20h]
.text:00404DF7                 mov     eax, [esp+10h]
.text:00404DFB                 mov     [esp+40h], ebp
.text:00404DFF                 mov     ecx, [esp+28h]
.text:00404E03                 mov     ebp, [esp+18h]
.text:00404E07                 mov     [esp+44h], edi
.text:00404E0B                 mov     edx, [esp+2Ch]
.text:00404E0F                 mov     edi, [esp+1Ch]
.text:00404E13                 mov     [esp+70h], eax
.text:00404E17                 mov     ebx, [esp+24h]
.text:00404E1B                 mov     eax, [esp+14h]
.text:00404E1F                 mov     [esp+48h], ebp
.text:00404E23                 mov     [esp+4Ch], edi
.text:00404E27                 mov     [esp+50h], esi
.text:00404E2B                 mov     [esp+54h], ebx
.text:00404E2F                 mov     [esp+58h], ecx
.text:00404E33                 mov     [esp+5Ch], edx
.text:00404E37                 mov     [esp+74h], eax
.text:00404E3B                 mov     [esp+78h], ebp
.text:00404E3F                 mov     [esp+7Ch], edi
.text:00404E43                 mov     [esp+80h], esi
.text:00404E4A                 mov     [esp+84h], ebx
.text:00404E51                 mov     esi, [esp+30h]
.text:00404E55                 lea     ebx, [esp+70h]
.text:00404E59                 mov     [esp+8Ch], edx
.text:00404E60                 mov     edx, [esp+0C8h]
.text:00404E67                 mov     [esp+88h], ecx
.text:00404E6E                 mov     ecx, [esp+0CCh]
.text:00404E75                 mov     [esp+4], edx
.text:00404E79                 mov     edx, [esp+0C0h]
.text:00404E80                 mov     [esp+90h], esi
.text:00404E87                 mov     [esp+0Ch], ebx
.text:00404E8B                 mov     [esp+8], ecx
.text:00404E8F                 mov     [esp], edx
.text:00404E92                 call    sub_4050F0
.text:00404E97                 add     esp, 0ACh
.text:00404E9D                 pop     ebx
.text:00404E9E                 pop     esi
.text:00404E9F                 pop     edi
.text:00404EA0                 pop     ebp
.text:00404EA1                 retn
.text:00404EA1 ; ---------------------------------------------------------------------------
.text:00404EA2                 align 10h
.text:00404EB0                 push    ebp
.text:00404EB1                 xor     eax, eax
.text:00404EB3                 mov     ecx, 8
.text:00404EB8                 push    edi
.text:00404EB9                 push    esi
.text:00404EBA                 push    ebx
.text:00404EBB                 sub     esp, 0ACh
.text:00404EC1                 mov     edi, [esp+0C0h]
.text:00404EC8                 cld
.text:00404EC9                 mov     [esp+10h], edi
.text:00404ECD                 lea     edi, [esp+14h]
.text:00404ED1                 rep stosd
.text:00404ED3                 mov     eax, [esp+30h]
.text:00404ED7                 mov     esi, [esp+10h]
.text:00404EDB                 mov     ebx, [esp+14h]
.text:00404EDF                 mov     [esp+60h], eax
.text:00404EE3                 mov     ebp, [esp+18h]
.text:00404EE7                 mov     eax, [esp+10h]
.text:00404EEB                 mov     [esp+40h], esi
.text:00404EEF                 mov     edi, [esp+1Ch]
.text:00404EF3                 mov     esi, [esp+20h]
.text:00404EF7                 mov     [esp+44h], ebx
.text:00404EFB                 mov     ecx, [esp+28h]
.text:00404EFF                 mov     edx, [esp+2Ch]
.text:00404F03                 mov     [esp+70h], eax
.text:00404F07                 mov     ebx, [esp+24h]
.text:00404F0B                 mov     eax, [esp+14h]
.text:00404F0F                 mov     [esp+48h], ebp
.text:00404F13                 mov     [esp+4Ch], edi
.text:00404F17                 mov     [esp+50h], esi
.text:00404F1B                 mov     [esp+54h], ebx
.text:00404F1F                 mov     [esp+58h], ecx
.text:00404F23                 mov     [esp+5Ch], edx
.text:00404F27                 mov     [esp+74h], eax
.text:00404F2B                 mov     [esp+78h], ebp
.text:00404F2F                 mov     [esp+7Ch], edi
.text:00404F33                 mov     [esp+80h], esi
.text:00404F3A                 mov     [esp+84h], ebx
.text:00404F41                 mov     [esp+8Ch], edx
.text:00404F48                 lea     edx, [esp+70h]
.text:00404F4C                 mov     [esp+88h], ecx
.text:00404F53                 mov     ecx, [esp+30h]
.text:00404F57                 mov     [esp+0Ch], edx
.text:00404F5B                 mov     edx, [esp+0C4h]
.text:00404F62                 mov     [esp+90h], ecx
.text:00404F69                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404F71                 mov     [esp+4], edx
.text:00404F75                 mov     dword ptr [esp], 0
.text:00404F7C                 call    sub_4050F0
.text:00404F81                 add     esp, 0ACh
.text:00404F87                 pop     ebx
.text:00404F88                 pop     esi
.text:00404F89                 pop     edi
.text:00404F8A                 pop     ebp
.text:00404F8B                 retn
.text:00404F8B ; ---------------------------------------------------------------------------
.text:00404F8C                 align 10h
.text:00404F90                 push    edi
.text:00404F91                 push    esi
.text:00404F92                 push    ebx
.text:00404F93                 sub     esp, 40h
.text:00404F96                 mov     edx, ds:dword_40814C
.text:00404F9C                 mov     ebx, ds:dword_408140
.text:00404FA2                 mov     esi, ds:dword_408148
.text:00404FA8                 mov     edi, ds:dword_408144
.text:00404FAE                 mov     [esp+1Ch], edx
.text:00404FB2                 mov     ecx, ds:dword_408150
.text:00404FB8                 mov     edx, ds:dword_408160
.text:00404FBE                 mov     [esp+10h], ebx
.text:00404FC2                 mov     ebx, ds:dword_408154
.text:00404FC8                 mov     [esp+30h], edx
.text:00404FCC                 movzx   edx, byte ptr [esp+54h]
.text:00404FD1                 mov     [esp+18h], esi
.text:00404FD5                 mov     esi, ds:dword_40815C
.text:00404FDB                 mov     [esp+14h], edi
.text:00404FDF                 mov     edi, ds:dword_408158
.text:00404FE5                 mov     [esp+20h], ecx
.text:00404FE9                 mov     cl, dl
.text:00404FEB                 shr     cl, 5
.text:00404FEE                 mov     [esp+24h], ebx
.text:00404FF2                 movzx   ebx, cl
.text:00404FF5                 mov     [esp+2Ch], esi
.text:00404FF9                 lea     esi, [esp+10h]
.text:00404FFD                 mov     [esp+28h], edi
.text:00405001                 lea     edi, [esi+ebx*4]
.text:00405004                 mov     ebx, edx
.text:00405006                 mov     edx, [edi+4]
.text:00405009                 and     ebx, 1Fh
.text:0040500C                 mov     cl, bl
.text:0040500E                 mov     eax, edx
.text:00405010                 shr     eax, cl
.text:00405012                 and     eax, 1
.text:00405015                 xor     eax, 1
.text:00405018                 shl     eax, cl
.text:0040501A                 xor     edx, eax
.text:0040501C                 mov     [edi+4], edx
.text:0040501F                 mov     edx, [esp+50h]
.text:00405023                 mov     [esp+0Ch], esi
.text:00405027                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040502F                 mov     [esp+4], edx
.text:00405033                 mov     dword ptr [esp], 0
.text:0040503A                 call    sub_4050F0
.text:0040503F                 add     esp, 40h
.text:00405042                 pop     ebx
.text:00405043                 pop     esi
.text:00405044                 pop     edi
.text:00405045                 retn
.text:00405045 ; ---------------------------------------------------------------------------
.text:00405046                 align 10h
.text:00405050
.text:00405050 ; =============== S U B R O U T I N E =======================================
.text:00405050
.text:00405050
.text:00405050 ; int __cdecl sub_405050(char *)
.text:00405050 sub_405050      proc near               ; CODE XREF: sub_403970+64↑p
.text:00405050
.text:00405050 var_4C          = dword ptr -4Ch
.text:00405050 var_48          = dword ptr -48h
.text:00405050 var_44          = dword ptr -44h
.text:00405050 var_40          = dword ptr -40h
.text:00405050 var_3C          = dword ptr -3Ch
.text:00405050 var_38          = dword ptr -38h
.text:00405050 var_34          = dword ptr -34h
.text:00405050 var_30          = dword ptr -30h
.text:00405050 var_2C          = dword ptr -2Ch
.text:00405050 var_28          = dword ptr -28h
.text:00405050 var_24          = dword ptr -24h
.text:00405050 var_20          = dword ptr -20h
.text:00405050 var_1C          = dword ptr -1Ch
.text:00405050 arg_0           = dword ptr  4
.text:00405050
.text:00405050                 sub     esp, 4Ch
.text:00405053                 mov     ecx, ds:dword_408140
.text:00405059                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405061                 mov     edx, ds:dword_408144
.text:00405067                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040506E                 mov     [esp+4Ch+var_3C], ecx
.text:00405072                 mov     ecx, ds:dword_40814C
.text:00405078                 mov     [esp+4Ch+var_38], edx
.text:0040507C                 mov     edx, ds:dword_408148
.text:00405082                 mov     [esp+4Ch+var_30], ecx
.text:00405086                 mov     ecx, ds:dword_408150
.text:0040508C                 mov     eax, edx
.text:0040508E                 shr     eax, 1Ah
.text:00405091                 and     eax, 1
.text:00405094                 xor     eax, 1
.text:00405097                 mov     [esp+4Ch+var_2C], ecx
.text:0040509B                 shl     eax, 1Ah
.text:0040509E                 mov     ecx, ds:dword_408154
.text:004050A4                 xor     edx, eax
.text:004050A6                 mov     [esp+4Ch+var_34], edx
.text:004050AA                 mov     edx, [esp+4Ch+arg_0]
.text:004050AE                 mov     [esp+4Ch+var_28], ecx
.text:004050B2                 mov     ecx, ds:dword_408158
.text:004050B8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004050BC                 mov     [esp+4Ch+var_24], ecx
.text:004050C0                 mov     ecx, ds:dword_40815C
.text:004050C6                 mov     [esp+4Ch+var_20], ecx
.text:004050CA                 mov     ecx, ds:dword_408160
.text:004050D0                 mov     [esp+4Ch+var_1C], ecx
.text:004050D4                 lea     ecx, [esp+4Ch+var_3C]
.text:004050D8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004050DC                 call    sub_4050F0
.text:004050E1                 add     esp, 4Ch
.text:004050E4                 retn
.text:004050E4 sub_405050      endp
.text:004050E4
.text:004050E4 ; ---------------------------------------------------------------------------
.text:004050E5                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0
.text:004050F0 ; int __cdecl sub_4050F0(int, char *, int, int)
.text:004050F0 sub_4050F0      proc near               ; CODE XREF: .text:00404CA2↑p
.text:004050F0                                         ; .text:00404CD2↑p ...
.text:004050F0
.text:004050F0 Block           = dword ptr -2Ch
.text:004050F0 var_28          = dword ptr -28h
.text:004050F0 Str             = dword ptr -24h
.text:004050F0 var_20          = dword ptr -20h
.text:004050F0 var_1C          = dword ptr -1Ch
.text:004050F0 var_18          = dword ptr -18h
.text:004050F0 var_14          = dword ptr -14h
.text:004050F0 arg_0           = dword ptr  4
.text:004050F0 arg_4           = dword ptr  8
.text:004050F0 arg_8           = dword ptr  0Ch
.text:004050F0 arg_C           = dword ptr  10h
.text:004050F0
.text:004050F0                 push    ebp
.text:004050F1                 push    edi
.text:004050F2                 push    esi
.text:004050F3                 push    ebx
.text:004050F4                 sub     esp, 1Ch
.text:004050F7                 call    _errno
.text:004050FC                 mov     edx, [eax]
.text:004050FE                 mov     eax, [esp+2Ch+arg_0]
.text:00405102                 mov     [esp+2Ch+var_14], edx
.text:00405106                 test    eax, eax
.text:00405108                 js      loc_4052AA
.text:0040510E                 mov     eax, [esp+2Ch+arg_0]
.text:00405112                 cmp     dword_4070C0, eax
.text:00405118                 ja      short loc_405190
.text:0040511A                 mov     esi, eax
.text:0040511C                 inc     esi
.text:0040511D                 cmp     esi, 1FFFFFFFh
.text:00405123                 ja      loc_4052AF
.text:00405129                 mov     ebx, off_4070CC
.text:0040512F                 cmp     ebx, offset dword_4070C4
.text:00405135                 jz      loc_405281
.text:0040513B
.text:0040513B loc_40513B:                             ; CODE XREF: sub_4050F0+1B5↓j
.text:0040513B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040513E                 lea     ecx, ds:0[esi*8]
.text:00405145                 mov     ebp, esi
.text:00405147                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040514B                 call    sub_403D20
.text:00405150                 mov     off_4070CC, eax
.text:00405155                 mov     ebx, dword_4070C0
.text:0040515B                 sub     ebp, ebx
.text:0040515D                 lea     edi, [eax+ebx*8]
.text:00405160                 lea     eax, ds:0[ebp*8]
.text:00405167                 cmp     eax, 7
.text:0040516A                 jbe     short loc_405180
.text:0040516C                 test    edi, 4
.text:00405172                 jz      short loc_405180
.text:00405174                 mov     dword ptr [edi], 0
.text:0040517A                 sub     eax, 4
.text:0040517D                 add     edi, 4
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: sub_4050F0+7A↑j
.text:00405180                                         ; sub_4050F0+82↑j
.text:00405180                 cld
.text:00405181                 mov     ecx, eax
.text:00405183                 shr     ecx, 2
.text:00405186                 xor     eax, eax
.text:00405188                 rep stosd
.text:0040518A                 mov     dword_4070C0, esi
.text:00405190
.text:00405190 loc_405190:                             ; CODE XREF: sub_4050F0+28↑j
.text:00405190                 mov     esi, off_4070CC
.text:00405196                 mov     eax, [esp+2Ch+arg_0]
.text:0040519A                 mov     ebp, [esi+eax*8]
.text:0040519D                 mov     edi, [esi+eax*8+4]
.text:004051A1                 mov     esi, [esp+2Ch+arg_C]
.text:004051A5                 test    esi, esi
.text:004051A7                 jz      loc_405277
.text:004051AD
.text:004051AD loc_4051AD:                             ; CODE XREF: sub_4050F0+18C↓j
.text:004051AD                 call    _errno
.text:004051B2                 mov     ebx, [eax]
.text:004051B4                 mov     [esp+2Ch+var_18], esi ; int
.text:004051B8                 mov     ecx, [esi]
.text:004051BA                 mov     [esp+2Ch+Block], edi ; int
.text:004051BD                 mov     edx, [esp+2Ch+arg_8]
.text:004051C1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004051C5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004051C9                 mov     ecx, [esp+2Ch+arg_4]
.text:004051CD                 mov     [esp+2Ch+var_20], edx ; int
.text:004051D1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004051D5                 call    sub_403FB0
.text:004051DA                 mov     esi, eax
.text:004051DC                 call    _errno
.text:004051E1                 mov     [eax], ebx
.text:004051E3                 cmp     ebp, esi
.text:004051E5                 ja      short loc_40525B
.text:004051E7                 lea     ebp, [esi+1]
.text:004051EA                 mov     ebx, off_4070CC
.text:004051F0                 cmp     edi, offset unk_408040
.text:004051F6                 mov     esi, [esp+2Ch+arg_0]
.text:004051FA                 mov     [ebx+esi*8], ebp
.text:004051FD                 jz      short loc_40520D
.text:004051FF                 mov     [esp+2Ch+Block], edi ; Block
.text:00405202                 call    free
.text:00405207                 mov     ebx, off_4070CC
.text:0040520D
.text:0040520D loc_40520D:                             ; CODE XREF: sub_4050F0+10D↑j
.text:0040520D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405210                 call    sub_403C90
.text:00405215                 mov     esi, [esp+2Ch+arg_C]
.text:00405219                 mov     edi, eax
.text:0040521B                 mov     eax, [esp+2Ch+arg_0]
.text:0040521F                 test    esi, esi
.text:00405221                 mov     [ebx+eax*8+4], edi
.text:00405225                 jz      short loc_405270
.text:00405227
.text:00405227 loc_405227:                             ; CODE XREF: sub_4050F0+185↓j
.text:00405227                 call    _errno
.text:0040522C                 mov     ebx, [eax]
.text:0040522E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405232                 mov     ecx, [esi]
.text:00405234                 mov     [esp+2Ch+Block], edi ; int
.text:00405237                 mov     edx, [esp+2Ch+arg_8]
.text:0040523B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040523F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405243                 mov     ecx, [esp+2Ch+arg_4]
.text:00405247                 mov     [esp+2Ch+var_20], edx ; int
.text:0040524B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040524F                 call    sub_403FB0
.text:00405254                 call    _errno
.text:00405259                 mov     [eax], ebx
.text:0040525B
.text:0040525B loc_40525B:                             ; CODE XREF: sub_4050F0+F5↑j
.text:0040525B                 call    _errno
.text:00405260                 mov     ebp, [esp+2Ch+var_14]
.text:00405264                 mov     [eax], ebp
.text:00405266                 add     esp, 1Ch
.text:00405269                 mov     eax, edi
.text:0040526B                 pop     ebx
.text:0040526C                 pop     esi
.text:0040526D                 pop     edi
.text:0040526E                 pop     ebp
.text:0040526F                 retn
.text:00405270 ; ---------------------------------------------------------------------------
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: sub_4050F0+135↑j
.text:00405270                 mov     esi, offset dword_408140
.text:00405275                 jmp     short loc_405227
.text:00405277 ; ---------------------------------------------------------------------------
.text:00405277
.text:00405277 loc_405277:                             ; CODE XREF: sub_4050F0+B7↑j
.text:00405277                 mov     esi, offset dword_408140
.text:0040527C                 jmp     loc_4051AD
.text:00405281 ; ---------------------------------------------------------------------------
.text:00405281
.text:00405281 loc_405281:                             ; CODE XREF: sub_4050F0+45↑j
.text:00405281                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405288                 call    sub_403C90
.text:0040528D                 mov     off_4070CC, eax
.text:00405292                 mov     edi, dword_4070C4
.text:00405298                 mov     ebx, eax
.text:0040529A                 mov     ecx, off_4070C8
.text:004052A0                 mov     [eax], edi
.text:004052A2                 mov     [eax+4], ecx
.text:004052A5                 jmp     loc_40513B
.text:004052AA ; ---------------------------------------------------------------------------
.text:004052AA
.text:004052AA loc_4052AA:                             ; CODE XREF: sub_4050F0+18↑j
.text:004052AA                 call    abort
.text:004052AF ; ---------------------------------------------------------------------------
.text:004052AF
.text:004052AF loc_4052AF:                             ; CODE XREF: sub_4050F0+33↑j
.text:004052AF                 call    sub_4052E0
.text:004052AF sub_4050F0      endp
.text:004052AF
.text:004052AF ; ---------------------------------------------------------------------------
.text:004052B4                 align 10h
.text:004052C0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4052E0+3↓o
.text:004052D1 ; const char aS_0[]
.text:004052D1 aS_0            db '%s',0               ; DATA XREF: sub_4052E0+10↓o
.text:004052D4                 align 10h
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0 ; Attributes: noreturn
.text:004052E0
.text:004052E0 sub_4052E0      proc near               ; CODE XREF: .text:loc_403C89↑p
.text:004052E0                                         ; sub_403C90+24↑p ...
.text:004052E0
.text:004052E0 Code            = dword ptr -1Ch
.text:004052E0 ErrorMessage    = dword ptr -18h
.text:004052E0 var_14          = dword ptr -14h
.text:004052E0 var_10          = byte ptr -10h
.text:004052E0
.text:004052E0                 sub     esp, 1Ch
.text:004052E3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004052EA                 call    ds:libintl_gettext
.text:004052F0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:004052F8                 mov     edx, Code
.text:004052FE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405306                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040530A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040530D                 call    sub_405370
.text:00405312                 call    abort
.text:00405312 sub_4052E0      endp
.text:00405312
.text:00405312 ; ---------------------------------------------------------------------------
.text:00405317                 align 10h
.text:00405320
.text:00405320 ; =============== S U B R O U T I N E =======================================
.text:00405320
.text:00405320 ; Attributes: thunk
.text:00405320
.text:00405320 libintl_bindtextdomain proc near
.text:00405320                 jmp     ds:__imp_libintl_bindtextdomain
.text:00405320 libintl_bindtextdomain endp
.text:00405320
.text:00405320 ; ---------------------------------------------------------------------------
.text:00405326                 align 10h
.text:00405330                 jmp     ds:libintl_textdomain
.text:00405330 ; ---------------------------------------------------------------------------
.text:00405336                 align 10h
.text:00405340                 jmp     ds:libintl_gettext
.text:00405340 ; ---------------------------------------------------------------------------
.text:00405346                 align 10h
.text:00405350 ; const char aS_1[]
.text:00405350 aS_1            db ': %s',0             ; DATA XREF: sub_405370+B8↓o
.text:00405350                                         ; sub_405474+122↓o
.text:00405355 aUnknownSystemE db 'Unknown system error',0
.text:00405355                                         ; DATA XREF: sub_405370:loc_40543D↓o
.text:00405355                                         ; sub_405474:loc_4055AE↓o
.text:0040536A ; const char aS_2[]
.text:0040536A aS_2            db '%s: ',0             ; DATA XREF: sub_405370:loc_405444↓o
.text:0040536F                 align 10h
.text:00405370
.text:00405370 ; =============== S U B R O U T I N E =======================================
.text:00405370
.text:00405370
.text:00405370 ; int __cdecl sub_405370(int Code, int ErrorMessage, char *, char)
.text:00405370 sub_405370      proc near               ; CODE XREF: sub_4018B0+1A2↑p
.text:00405370                                         ; sub_4018B0+2C3↑p ...
.text:00405370
.text:00405370 Stream          = dword ptr -1Ch
.text:00405370 Format          = dword ptr -18h
.text:00405370 ArgList         = dword ptr -14h
.text:00405370 Code            = dword ptr  4
.text:00405370 ErrorMessage    = dword ptr  8
.text:00405370 arg_8           = dword ptr  0Ch
.text:00405370 arg_C           = byte ptr  10h
.text:00405370
.text:00405370                 push    esi
.text:00405371                 push    ebx
.text:00405372                 sub     esp, 14h
.text:00405375                 mov     edx, ds:_iob
.text:0040537B                 mov     esi, [esp+1Ch+Code]
.text:0040537F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405383                 add     edx, 20h ; ' '
.text:00405386                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405389                 call    fflush
.text:0040538E                 mov     eax, ds:dword_4081C0
.text:00405393                 test    eax, eax
.text:00405395                 jz      loc_405444
.text:0040539B                 call    eax ; dword_4081C0
.text:0040539D
.text:0040539D loc_40539D:                             ; CODE XREF: sub_405370+F7↓j
.text:0040539D                 lea     edx, [esp+1Ch+arg_C]
.text:004053A1                 mov     ecx, [esp+1Ch+arg_8]
.text:004053A5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004053A9                 mov     edx, ds:_iob
.text:004053AF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004053B3                 add     edx, 40h ; '@'
.text:004053B6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004053B9                 call    vfprintf
.text:004053BE                 inc     ds:dword_4081D0
.text:004053C4                 test    ebx, ebx
.text:004053C6                 jnz     short loc_405412
.text:004053C8
.text:004053C8 loc_4053C8:                             ; CODE XREF: sub_405370+CB↓j
.text:004053C8                 mov     edx, ds:_iob
.text:004053CE                 lea     ecx, [edx+40h]
.text:004053D1                 mov     ebx, [ecx+4]
.text:004053D4                 dec     ebx
.text:004053D5                 test    ebx, ebx
.text:004053D7                 mov     [ecx+4], ebx
.text:004053DA                 js      short loc_405400
.text:004053DC                 mov     ecx, [edx+40h]
.text:004053DF                 mov     byte ptr [ecx], 0Ah
.text:004053E2                 inc     dword ptr [edx+40h]
.text:004053E5
.text:004053E5 loc_4053E5:                             ; CODE XREF: sub_405370+A0↓j
.text:004053E5                 mov     edx, ds:_iob
.text:004053EB                 add     edx, 40h ; '@'
.text:004053EE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004053F1                 call    fflush
.text:004053F6                 test    esi, esi
.text:004053F8                 jnz     short loc_40546C
.text:004053FA                 add     esp, 14h
.text:004053FD                 pop     ebx
.text:004053FE                 pop     esi
.text:004053FF                 retn
.text:00405400 ; ---------------------------------------------------------------------------
.text:00405400
.text:00405400 loc_405400:                             ; CODE XREF: sub_405370+6A↑j
.text:00405400                 mov     [esp+1Ch+Format], ecx ; File
.text:00405404                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040540B                 call    _flsbuf
.text:00405410                 jmp     short loc_4053E5
.text:00405412 ; ---------------------------------------------------------------------------
.text:00405412
.text:00405412 loc_405412:                             ; CODE XREF: sub_405370+56↑j
.text:00405412                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405415                 call    strerror
.text:0040541A                 test    eax, eax
.text:0040541C                 jz      short loc_40543D
.text:0040541E
.text:0040541E loc_40541E:                             ; CODE XREF: sub_405370+D2↓j
.text:0040541E                 mov     [esp+1Ch+ArgList], eax
.text:00405422                 mov     ebx, ds:_iob
.text:00405428                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00405430                 add     ebx, 40h ; '@'
.text:00405433                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405436                 call    fprintf
.text:0040543B                 jmp     short loc_4053C8
.text:0040543D ; ---------------------------------------------------------------------------
.text:0040543D
.text:0040543D loc_40543D:                             ; CODE XREF: sub_405370+AC↑j
.text:0040543D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405442                 jmp     short loc_40541E
.text:00405444 ; ---------------------------------------------------------------------------
.text:00405444
.text:00405444 loc_405444:                             ; CODE XREF: sub_405370+25↑j
.text:00405444                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040544C                 mov     edx, ds:_iob
.text:00405452                 mov     ecx, ds:dword_408190
.text:00405458                 add     edx, 40h ; '@'
.text:0040545B                 mov     [esp+1Ch+ArgList], ecx
.text:0040545F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405462                 call    fprintf
.text:00405467                 jmp     loc_40539D
.text:0040546C ; ---------------------------------------------------------------------------
.text:0040546C
.text:0040546C loc_40546C:                             ; CODE XREF: sub_405370+88↑j
.text:0040546C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040546F                 call    exit
.text:0040546F sub_405370      endp
.text:0040546F
.text:00405474
.text:00405474 ; =============== S U B R O U T I N E =======================================
.text:00405474
.text:00405474
.text:00405474 ; int __cdecl sub_405474(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405474 sub_405474      proc near               ; DATA XREF: sub_405474+77↓o
.text:00405474
.text:00405474 Stream          = dword ptr -28h
.text:00405474 Format          = dword ptr -24h
.text:00405474 ArgList         = dword ptr -20h
.text:00405474 var_1C          = dword ptr -1Ch
.text:00405474 Code            = dword ptr  8
.text:00405474 ErrorMessage    = dword ptr  0Ch
.text:00405474 Str2            = dword ptr  10h
.text:00405474 arg_10          = dword ptr  14h
.text:00405474 arg_14          = dword ptr  18h
.text:00405474 arg_18          = byte ptr  1Ch
.text:00405474
.text:00405474                 and     eax, 64253A73h
.text:00405479                 cmp     ah, [eax]
.text:0040547B
.text:0040547B loc_40547B:                             ; DATA XREF: sub_405474:loc_4055B5↓o
.text:0040547B                 add     ds:55003A73h, ah
.text:00405481                 push    edi
.text:00405482                 push    esi
.text:00405483                 push    ebx
.text:00405484                 sub     esp, 1Ch
.text:00405487                 mov     edx, ds:dword_408200
.text:0040548D                 mov     ebp, [esp+28h+Code]
.text:00405491                 mov     edi, [esp+28h+ErrorMessage]
.text:00405495                 test    edx, edx
.text:00405497                 mov     ebx, [esp+28h+Str2]
.text:0040549B                 mov     esi, [esp+28h+arg_10]
.text:0040549F                 jz      short loc_4054B9
.text:004054A1                 cmp     ds:dword_408180, esi
.text:004054A7                 jz      loc_4055E0
.text:004054AD
.text:004054AD loc_4054AD:                             ; CODE XREF: sub_405474+18D↓j
.text:004054AD                 mov     ds:dword_408170, ebx
.text:004054B3                 mov     ds:dword_408180, esi
.text:004054B9
.text:004054B9 loc_4054B9:                             ; CODE XREF: sub_405474+2B↑j
.text:004054B9                 mov     edx, ds:_iob
.text:004054BF                 add     edx, 20h ; ' '
.text:004054C2                 mov     [esp+28h+Stream], edx ; Stream
.text:004054C5                 call    fflush
.text:004054CA                 mov     eax, ds:dword_4081C0
.text:004054CF                 test    eax, eax
.text:004054D1                 jz      loc_4055B5
.text:004054D7                 call    eax ; dword_4081C0
.text:004054D9
.text:004054D9 loc_4054D9:                             ; CODE XREF: sub_405474+164↓j
.text:004054D9                 test    ebx, ebx
.text:004054DB                 jz      short loc_4054FE
.text:004054DD                 mov     [esp+28h+ArgList], ebx
.text:004054E1                 mov     ebx, ds:_iob
.text:004054E7                 mov     [esp+28h+var_1C], esi
.text:004054EB                 mov     [esp+28h+Format], offset sub_405474 ; Format
.text:004054F3                 add     ebx, 40h ; '@'
.text:004054F6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004054F9                 call    fprintf
.text:004054FE
.text:004054FE loc_4054FE:                             ; CODE XREF: sub_405474+67↑j
.text:004054FE                 mov     esi, ds:_iob
.text:00405504                 lea     edx, [esp+28h+arg_18]
.text:00405508                 mov     ecx, [esp+28h+arg_14]
.text:0040550C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405510                 add     esi, 40h ; '@'
.text:00405513                 mov     [esp+28h+Format], ecx ; Format
.text:00405517                 mov     [esp+28h+Stream], esi ; Stream
.text:0040551A                 call    vfprintf
.text:0040551F                 inc     ds:dword_4081D0
.text:00405525                 test    edi, edi
.text:00405527                 jnz     short loc_405580
.text:00405529
.text:00405529 loc_405529:                             ; CODE XREF: sub_405474+135↓j
.text:00405529                 mov     edx, ds:_iob
.text:0040552F                 lea     ecx, [edx+40h]
.text:00405532                 mov     ebx, [ecx+4]
.text:00405535                 dec     ebx
.text:00405536                 test    ebx, ebx
.text:00405538                 mov     [ecx+4], ebx
.text:0040553B                 js      short loc_405567
.text:0040553D                 mov     esi, [edx+40h]
.text:00405540                 mov     byte ptr [esi], 0Ah
.text:00405543                 inc     dword ptr [edx+40h]
.text:00405546
.text:00405546 loc_405546:                             ; CODE XREF: sub_405474+103↓j
.text:00405546                 mov     ecx, ds:_iob
.text:0040554C                 add     ecx, 40h ; '@'
.text:0040554F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405552                 call    fflush
.text:00405557                 test    ebp, ebp
.text:00405559                 jnz     loc_405606
.text:0040555F
.text:0040555F loc_40555F:                             ; CODE XREF: sub_405474+173↓j
.text:0040555F                                         ; sub_405474+187↓j
.text:0040555F                 add     esp, 1Ch
.text:00405562                 pop     ebx
.text:00405563                 pop     esi
.text:00405564                 pop     edi
.text:00405565                 pop     ebp
.text:00405566                 retn
.text:00405567 ; ---------------------------------------------------------------------------
.text:00405567
.text:00405567 loc_405567:                             ; CODE XREF: sub_405474+C7↑j
.text:00405567                 mov     [esp+28h+Format], ecx ; File
.text:0040556B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405572                 call    _flsbuf
.text:00405577                 jmp     short loc_405546
.text:00405577 ; ---------------------------------------------------------------------------
.text:00405579                 align 10h
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_405474+B3↑j
.text:00405580                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405583                 call    strerror
.text:00405588                 test    eax, eax
.text:0040558A                 jz      short loc_4055AE
.text:0040558C
.text:0040558C loc_40558C:                             ; CODE XREF: sub_405474+13F↓j
.text:0040558C                 mov     [esp+28h+ArgList], eax
.text:00405590                 mov     edi, ds:_iob
.text:00405596                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040559E                 add     edi, 40h ; '@'
.text:004055A1                 mov     [esp+28h+Stream], edi ; Stream
.text:004055A4                 call    fprintf
.text:004055A9                 jmp     loc_405529
.text:004055AE ; ---------------------------------------------------------------------------
.text:004055AE
.text:004055AE loc_4055AE:                             ; CODE XREF: sub_405474+116↑j
.text:004055AE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004055B3                 jmp     short loc_40558C
.text:004055B5 ; ---------------------------------------------------------------------------
.text:004055B5
.text:004055B5 loc_4055B5:                             ; CODE XREF: sub_405474+5D↑j
.text:004055B5                 mov     [esp+28h+Format], (offset loc_40547B+1) ; Format
.text:004055BD                 mov     ecx, ds:_iob
.text:004055C3                 mov     edx, ds:dword_408190
.text:004055C9                 add     ecx, 40h ; '@'
.text:004055CC                 mov     [esp+28h+ArgList], edx
.text:004055D0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004055D3                 call    fprintf
.text:004055D8                 jmp     loc_4054D9
.text:004055D8 ; ---------------------------------------------------------------------------
.text:004055DD                 align 10h
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_405474+33↑j
.text:004055E0                 mov     eax, ds:dword_408170
.text:004055E5                 cmp     ebx, eax
.text:004055E7                 jz      loc_40555F
.text:004055ED                 mov     [esp+28h+Format], ebx ; Str2
.text:004055F1                 mov     [esp+28h+Stream], eax ; Str1
.text:004055F4                 call    strcmp
.text:004055F9                 test    eax, eax
.text:004055FB                 jz      loc_40555F
.text:00405601                 jmp     loc_4054AD
.text:00405606 ; ---------------------------------------------------------------------------
.text:00405606
.text:00405606 loc_405606:                             ; CODE XREF: sub_405474+E5↑j
.text:00405606                 mov     [esp+28h+Stream], ebp ; Code
.text:00405609                 call    exit
.text:00405609 sub_405474      endp ; sp-analysis failed
.text:00405609
.text:00405609 ; ---------------------------------------------------------------------------
.text:0040560E                 align 10h
.text:00405610
.text:00405610 ; =============== S U B R O U T I N E =======================================
.text:00405610
.text:00405610
.text:00405610 ; int __cdecl sub_405610(DWORD, int)
.text:00405610 sub_405610      proc near               ; CODE XREF: sub_4018B0+2F5↑p
.text:00405610
.text:00405610 dwDesiredAccess = dword ptr -1Ch
.text:00405610 bInheritHandle  = dword ptr -18h
.text:00405610 dwProcessId     = dword ptr -14h
.text:00405610 var_C           = dword ptr -0Ch
.text:00405610 var_8           = dword ptr -8
.text:00405610 var_4           = dword ptr -4
.text:00405610 arg_0           = dword ptr  4
.text:00405610 arg_4           = dword ptr  8
.text:00405610
.text:00405610                 sub     esp, 1Ch
.text:00405613                 mov     edx, [esp+1Ch+arg_0]
.text:00405617                 mov     [esp+1Ch+var_C], ebx
.text:0040561B                 mov     ebx, [esp+1Ch+arg_4]
.text:0040561F                 mov     [esp+1Ch+var_8], esi
.text:00405623                 mov     [esp+1Ch+var_4], edi
.text:00405627                 xor     edi, edi
.text:00405629                 mov     [esp+1Ch+dwProcessId], edx ; dwProcessId
.text:0040562D                 mov     [esp+1Ch+bInheritHandle], 0 ; bInheritHandle
.text:00405635                 mov     [esp+1Ch+dwDesiredAccess], 1 ; dwDesiredAccess
.text:0040563C                 call    OpenProcess
.text:00405641                 sub     esp, 0Ch
.text:00405644                 mov     esi, eax
.text:00405646                 test    eax, eax
.text:00405648                 jz      loc_405724
.text:0040564E                 cmp     ebx, 16h        ; switch 23 cases
.text:00405651                 ja      def_405657      ; jumptable 00405657 default case, cases 1-8,10-21
.text:00405657                 jmp     ds:jpt_405657[ebx*4] ; switch jump
.text:00405657 ; ---------------------------------------------------------------------------
.text:0040565E                 align 10h
.text:00405660 jpt_405657      dd offset loc_4056E0    ; DATA XREF: sub_405610+47↑r
.text:00405660                 dd offset def_405657    ; jump table for switch statement
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset loc_4056C0
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset def_405657
.text:00405660                 dd offset loc_4056C0
.text:004056BC                 align 10h
.text:004056C0
.text:004056C0 loc_4056C0:                             ; CODE XREF: sub_405610+47↑j
.text:004056C0                                         ; DATA XREF: sub_405610:jpt_405657↑o
.text:004056C0                 mov     [esp+1Ch+bInheritHandle], 0FFFFFFFFh ; jumptable 00405657 cases 9,22
.text:004056C8                 mov     [esp+1Ch+dwDesiredAccess], eax ; hProcess
.text:004056CB                 call    TerminateProcess
.text:004056D0                 sub     esp, 8
.text:004056D3                 test    eax, eax
.text:004056D5                 jz      short loc_4056FD
.text:004056D7                 mov     esi, esi
.text:004056D9                 lea     edi, [edi+0]
.text:004056E0
.text:004056E0 loc_4056E0:                             ; CODE XREF: sub_405610+47↑j
.text:004056E0                                         ; sub_405610+105↓j
.text:004056E0                                         ; DATA XREF: ...
.text:004056E0                 mov     [esp+1Ch+dwDesiredAccess], esi ; jumptable 00405657 case 0
.text:004056E3                 call    CloseHandle
.text:004056E8                 sub     esp, 4
.text:004056EB                 mov     eax, edi
.text:004056ED
.text:004056ED loc_4056ED:                             ; CODE XREF: sub_405610+127↓j
.text:004056ED                 mov     ebx, [esp+1Ch+var_C]
.text:004056F1                 mov     esi, [esp+1Ch+var_8]
.text:004056F5                 mov     edi, [esp+1Ch+var_4]
.text:004056F9                 add     esp, 1Ch
.text:004056FC                 retn
.text:004056FD ; ---------------------------------------------------------------------------
.text:004056FD
.text:004056FD loc_4056FD:                             ; CODE XREF: sub_405610+C5↑j
.text:004056FD                 call    sub_4059D0
.text:00405702                 mov     edi, eax
.text:00405704                 call    _errno
.text:00405709                 mov     [eax], edi
.text:0040570B                 nop
.text:0040570C                 lea     esi, [esi+0]
.text:00405710
.text:00405710 loc_405710:                             ; CODE XREF: sub_405610+112↓j
.text:00405710                 mov     edi, 0FFFFFFFFh
.text:00405715                 jmp     short loc_4056E0 ; jumptable 00405657 case 0
.text:00405717 ; ---------------------------------------------------------------------------
.text:00405717
.text:00405717 def_405657:                             ; CODE XREF: sub_405610+41↑j
.text:00405717                                         ; sub_405610+47↑j
.text:00405717                                         ; DATA XREF: ...
.text:00405717                 call    _errno          ; jumptable 00405657 default case, cases 1-8,10-21
.text:0040571C                 mov     dword ptr [eax], 16h
.text:00405722                 jmp     short loc_405710
.text:00405724 ; ---------------------------------------------------------------------------
.text:00405724
.text:00405724 loc_405724:                             ; CODE XREF: sub_405610+38↑j
.text:00405724                 call    sub_4059D0
.text:00405729                 mov     esi, eax
.text:0040572B                 call    _errno
.text:00405730                 mov     [eax], esi
.text:00405732                 mov     eax, 0FFFFFFFFh
.text:00405737                 jmp     short loc_4056ED
.text:00405737 sub_405610      endp
.text:00405737
.text:00405737 ; ---------------------------------------------------------------------------
.text:00405739                 align 10h
.text:00405740
.text:00405740 ; =============== S U B R O U T I N E =======================================
.text:00405740
.text:00405740 ; Attributes: info_from_lumina
.text:00405740
.text:00405740 ___get_errno    proc near               ; CODE XREF: sub_4059D0+B↓p
.text:00405740
.text:00405740 arg_0           = dword ptr  4
.text:00405740
.text:00405740                 mov     eax, [esp+arg_0]
.text:00405744                 cmp     eax, 53h ; 'S'
.text:00405747                 jg      loc_405840
.text:0040574D                 cmp     eax, 52h ; 'R'
.text:00405750                 jge     short loc_4057A2
.text:00405752                 cmp     eax, 0Fh
.text:00405755                 jz      short loc_405770
.text:00405757                 cmp     eax, 0Fh
.text:0040575A                 jg      short loc_4057D0
.text:0040575C                 cmp     eax, 9
.text:0040575F                 jg      short loc_4057B0
.text:00405761                 cmp     eax, 7
.text:00405764                 jge     short loc_4057A9
.text:00405766                 cmp     eax, 3
.text:00405769                 jg      short loc_40578A
.text:0040576B                 cmp     eax, 2
.text:0040576E                 jl      short loc_405783
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: ___get_errno+15↑j
.text:00405770                                         ; ___get_errno+9D↓j ...
.text:00405770                 mov     edx, 2
.text:00405775                 lea     esi, [esi+0]
.text:00405779                 lea     edi, [edi+0]
.text:00405780
.text:00405780 loc_405780:                             ; CODE XREF: ___get_errno+48↓j
.text:00405780                                         ; ___get_errno+59↓j ...
.text:00405780                 mov     eax, edx
.text:00405782                 retn
.text:00405783 ; ---------------------------------------------------------------------------
.text:00405783
.text:00405783 loc_405783:                             ; CODE XREF: ___get_errno+2E↑j
.text:00405783                                         ; ___get_errno+78↓j ...
.text:00405783                 mov     edx, 16h
.text:00405788                 jmp     short loc_405780
.text:0040578A ; ---------------------------------------------------------------------------
.text:0040578A
.text:0040578A loc_40578A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040578A                 cmp     eax, 5
.text:0040578D                 jz      short loc_4057A2
.text:0040578F                 cmp     eax, 5
.text:00405792                 jg      short loc_40579B
.text:00405794                 mov     edx, 18h
.text:00405799                 jmp     short loc_405780
.text:0040579B ; ---------------------------------------------------------------------------
.text:0040579B
.text:0040579B loc_40579B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040579B                                         ; ___get_errno+180↓j
.text:0040579B                 mov     edx, 9
.text:004057A0                 jmp     short loc_405780
.text:004057A2 ; ---------------------------------------------------------------------------
.text:004057A2
.text:004057A2 loc_4057A2:                             ; CODE XREF: ___get_errno+10↑j
.text:004057A2                                         ; ___get_errno+4D↑j ...
.text:004057A2                 mov     edx, 0Dh
.text:004057A7                 jmp     short loc_405780
.text:004057A9 ; ---------------------------------------------------------------------------
.text:004057A9
.text:004057A9 loc_4057A9:                             ; CODE XREF: ___get_errno+24↑j
.text:004057A9                                         ; ___get_errno+73↓j ...
.text:004057A9                 mov     edx, 0Ch
.text:004057AE                 jmp     short loc_405780
.text:004057B0 ; ---------------------------------------------------------------------------
.text:004057B0
.text:004057B0 loc_4057B0:                             ; CODE XREF: ___get_errno+1F↑j
.text:004057B0                 cmp     eax, 0Dh
.text:004057B3                 jg      short loc_4057A9
.text:004057B5                 cmp     eax, 0Ch
.text:004057B8                 jge     short loc_405783
.text:004057BA                 cmp     eax, 0Ah
.text:004057BD                 mov     edx, 7
.text:004057C2                 jz      short loc_405780
.text:004057C4                 cmp     eax, 0Bh
.text:004057C7                 jnz     short loc_405783
.text:004057C9
.text:004057C9 loc_4057C9:                             ; CODE XREF: ___get_errno+21A↓j
.text:004057C9                 mov     edx, 8
.text:004057CE                 jmp     short loc_405780
.text:004057D0 ; ---------------------------------------------------------------------------
.text:004057D0
.text:004057D0 loc_4057D0:                             ; CODE XREF: ___get_errno+1A↑j
.text:004057D0                 cmp     eax, 22h ; '"'
.text:004057D3                 jg      short loc_405804
.text:004057D5                 cmp     eax, 16h
.text:004057D8                 jge     short loc_4057A2
.text:004057DA                 cmp     eax, 12h
.text:004057DD                 jz      short loc_405770
.text:004057DF                 cmp     eax, 12h
.text:004057E2                 jg      short loc_4057F5
.text:004057E4                 cmp     eax, 10h
.text:004057E7                 jz      short loc_4057A2
.text:004057E9                 mov     edx, 12h
.text:004057EE                 cmp     eax, 11h
.text:004057F1
.text:004057F1 loc_4057F1:                             ; CODE XREF: ___get_errno+172↓j
.text:004057F1                                         ; ___get_errno+24C↓j ...
.text:004057F1                 jnz     short loc_405783
.text:004057F3                 jmp     short loc_405780
.text:004057F5 ; ---------------------------------------------------------------------------
.text:004057F5
.text:004057F5 loc_4057F5:                             ; CODE XREF: ___get_errno+A2↑j
.text:004057F5                 cmp     eax, 14h
.text:004057F8                 jle     short loc_4057A2
.text:004057FA
.text:004057FA loc_4057FA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:004057FA                 mov     edx, 10h
.text:004057FF                 jmp     loc_405780
.text:00405804 ; ---------------------------------------------------------------------------
.text:00405804
.text:00405804 loc_405804:                             ; CODE XREF: ___get_errno+93↑j
.text:00405804                 cmp     eax, 41h ; 'A'
.text:00405807                 jz      short loc_4057A2
.text:00405809                 cmp     eax, 41h ; 'A'
.text:0040580C                 jg      short loc_405821
.text:0040580E                 cmp     eax, 24h ; '$'
.text:00405811                 jz      short loc_4057A2
.text:00405813                 cmp     eax, 35h ; '5'
.text:00405816                 jnz     loc_405783
.text:0040581C                 jmp     loc_405770
.text:00405821 ; ---------------------------------------------------------------------------
.text:00405821
.text:00405821 loc_405821:                             ; CODE XREF: ___get_errno+CC↑j
.text:00405821                 cmp     eax, 43h ; 'C'
.text:00405824                 jz      loc_405770
.text:0040582A                 cmp     eax, 50h ; 'P'
.text:0040582D                 jnz     loc_405783
.text:00405833
.text:00405833 loc_405833:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00405833                 mov     edx, 11h
.text:00405838                 jmp     loc_405780
.text:00405838 ; ---------------------------------------------------------------------------
.text:0040583D                 align 10h
.text:00405840
.text:00405840 loc_405840:                             ; CODE XREF: ___get_errno+7↑j
.text:00405840                 cmp     eax, 0A1h ; '¡'
.text:00405845                 jz      loc_405770
.text:0040584B                 cmp     eax, 0A1h ; '¡'
.text:00405850                 jg      loc_405900
.text:00405856                 cmp     eax, 81h
.text:0040585B                 jg      short loc_4058C5
.text:0040585D                 cmp     eax, 80h ; '€'
.text:00405862                 mov     edx, 0Ah
.text:00405867                 jge     loc_405780
.text:0040586D                 cmp     eax, 6Ch ; 'l'
.text:00405870                 jz      loc_4057A2
.text:00405876                 cmp     eax, 6Ch ; 'l'
.text:00405879                 jg      short loc_405897
.text:0040587B                 cmp     eax, 57h ; 'W'
.text:0040587E                 jz      loc_405783
.text:00405884                 cmp     eax, 59h ; 'Y'
.text:00405887                 jnz     loc_405783
.text:0040588D
.text:0040588D loc_40588D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040588D                                         ; ___get_errno+23C↓j
.text:0040588D                 mov     edx, 0Bh
.text:00405892                 jmp     loc_405780
.text:00405897 ; ---------------------------------------------------------------------------
.text:00405897
.text:00405897 loc_405897:                             ; CODE XREF: ___get_errno+139↑j
.text:00405897                 cmp     eax, 70h ; 'p'
.text:0040589A                 mov     edx, 1Ch
.text:0040589F                 jz      loc_405780
.text:004058A5                 cmp     eax, 70h ; 'p'
.text:004058A8                 jg      short loc_4058B7
.text:004058AA                 mov     edx, 20h ; ' '
.text:004058AF                 cmp     eax, 6Dh ; 'm'
.text:004058B2                 jmp     loc_4057F1
.text:004058B7 ; ---------------------------------------------------------------------------
.text:004058B7
.text:004058B7 loc_4058B7:                             ; CODE XREF: ___get_errno+168↑j
.text:004058B7                 cmp     eax, 72h ; 'r'
.text:004058BA
.text:004058BA loc_4058BA:                             ; CODE XREF: ___get_errno+19C↓j
.text:004058BA                 jnz     loc_405783
.text:004058C0                 jmp     loc_40579B
.text:004058C5 ; ---------------------------------------------------------------------------
.text:004058C5
.text:004058C5 loc_4058C5:                             ; CODE XREF: ___get_errno+11B↑j
.text:004058C5                 cmp     eax, 84h ; '„'
.text:004058CA                 jz      loc_4057A2
.text:004058D0                 cmp     eax, 84h ; '„'
.text:004058D5                 jg      short loc_4058DE
.text:004058D7                 cmp     eax, 82h ; '‚'
.text:004058DC                 jmp     short loc_4058BA
.text:004058DE ; ---------------------------------------------------------------------------
.text:004058DE
.text:004058DE loc_4058DE:                             ; CODE XREF: ___get_errno+195↑j
.text:004058DE                 cmp     eax, 91h ; '‘'
.text:004058E3                 mov     edx, 29h ; ')'
.text:004058E8                 jz      loc_405780
.text:004058EE                 cmp     eax, 9Eh ; 'ž'
.text:004058F3
.text:004058F3 loc_4058F3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:004058F3                 jnz     loc_405783
.text:004058F9                 jmp     loc_4057A2
.text:004058F9 ; ---------------------------------------------------------------------------
.text:004058FE                 align 10h
.text:00405900
.text:00405900 loc_405900:                             ; CODE XREF: ___get_errno+110↑j
.text:00405900                 cmp     eax, 0CEh ; 'Î'
.text:00405905                 jz      loc_405770
.text:0040590B                 cmp     eax, 0CEh ; 'Î'
.text:00405910                 jg      short loc_405960
.text:00405912                 cmp     eax, 0AAh ; 'ª'
.text:00405917                 jz      loc_4057FA
.text:0040591D                 cmp     eax, 0AAh ; 'ª'
.text:00405922                 jg      short loc_405936
.text:00405924                 cmp     eax, 0A4h ; '¤'
.text:00405929                 jz      loc_40588D
.text:0040592F                 cmp     eax, 0A7h ; '§'
.text:00405934                 jmp     short loc_4058F3
.text:00405936 ; ---------------------------------------------------------------------------
.text:00405936
.text:00405936 loc_405936:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00405936                 cmp     eax, 0B7h ; '·'
.text:0040593B                 jz      loc_405833
.text:00405941                 cmp     eax, 0B7h ; '·'
.text:00405946                 jl      loc_405783
.text:0040594C                 sub     eax, 0BCh ; '¼'
.text:00405951                 cmp     eax, 0Eh
.text:00405954                 ja      loc_405783
.text:0040595A                 jmp     loc_4057C9
.text:0040595A ; ---------------------------------------------------------------------------
.text:0040595F                 align 10h
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00405960                 cmp     eax, 46Bh
.text:00405965                 mov     edx, 24h ; '$'
.text:0040596A                 jz      loc_405780
.text:00405970                 cmp     eax, 46Bh
.text:00405975                 jg      short loc_405991
.text:00405977                 cmp     eax, 0D7h ; '×'
.text:0040597C                 jz      loc_40588D
.text:00405982                 mov     edx, 5
.text:00405987                 cmp     eax, 45Dh
.text:0040598C                 jmp     loc_4057F1
.text:00405991 ; ---------------------------------------------------------------------------
.text:00405991
.text:00405991 loc_405991:                             ; CODE XREF: ___get_errno+235↑j
.text:00405991                 cmp     eax, 4D5h
.text:00405996                 mov     edx, 4
.text:0040599B                 jz      loc_405780
.text:004059A1                 cmp     eax, 4D5h
.text:004059A6                 jg      short loc_4059B7
.text:004059A8                 mov     edx, 13h
.text:004059AD                 cmp     eax, 4B0h
.text:004059B2                 jmp     loc_4057F1
.text:004059B7 ; ---------------------------------------------------------------------------
.text:004059B7
.text:004059B7 loc_4059B7:                             ; CODE XREF: ___get_errno+266↑j
.text:004059B7                 cmp     eax, 718h
.text:004059BC                 jnz     loc_405783
.text:004059C2                 jmp     loc_4057A9
.text:004059C2 ___get_errno    endp
.text:004059C2
.text:004059C2 ; ---------------------------------------------------------------------------
.text:004059C7                 align 10h
.text:004059D0
.text:004059D0 ; =============== S U B R O U T I N E =======================================
.text:004059D0
.text:004059D0
.text:004059D0 sub_4059D0      proc near               ; CODE XREF: sub_405610:loc_4056FD↑p
.text:004059D0                                         ; sub_405610:loc_405724↑p
.text:004059D0
.text:004059D0 var_C           = dword ptr -0Ch
.text:004059D0
.text:004059D0                 sub     esp, 0Ch
.text:004059D3                 call    GetLastError
.text:004059D8                 mov     [esp+0Ch+var_C], eax
.text:004059DB                 call    ___get_errno
.text:004059E0                 add     esp, 0Ch
.text:004059E3                 retn
.text:004059E3 sub_4059D0      endp
.text:004059E3
.text:004059E3 ; ---------------------------------------------------------------------------
.text:004059E4                 align 10h
.text:004059F0
.text:004059F0 ; =============== S U B R O U T I N E =======================================
.text:004059F0
.text:004059F0 ; Attributes: thunk
.text:004059F0
.text:004059F0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004059F0 mbrtowc         proc near               ; CODE XREF: sub_403FB0+757↑p
.text:004059F0
.text:004059F0 DstCh           = dword ptr  4
.text:004059F0 SrcCh           = dword ptr  8
.text:004059F0 SizeInBytes     = dword ptr  0Ch
.text:004059F0 State           = dword ptr  10h
.text:004059F0
.text:004059F0                 jmp     ds:__imp_mbrtowc
.text:004059F0 mbrtowc         endp
.text:004059F0
.text:004059F0 ; ---------------------------------------------------------------------------
.text:004059F6                 align 10h
.text:00405A00
.text:00405A00 ; =============== S U B R O U T I N E =======================================
.text:00405A00
.text:00405A00 ; Attributes: bp-based frame
.text:00405A00
.text:00405A00 sub_405A00      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405A00                 push    ebp
.text:00405A01                 mov     ecx, offset dword_408000
.text:00405A06                 cmp     ecx, offset dword_408000
.text:00405A0C                 mov     ebp, esp
.text:00405A0E                 jnb     short loc_405A26
.text:00405A10
.text:00405A10 loc_405A10:                             ; CODE XREF: sub_405A00+24↓j
.text:00405A10                 mov     edx, [ecx+4]
.text:00405A13                 mov     eax, [ecx]
.text:00405A15                 add     ecx, 8
.text:00405A18                 add     [edx+400000h], eax
.text:00405A1E                 cmp     ecx, offset dword_408000
.text:00405A24                 jb      short loc_405A10
.text:00405A26
.text:00405A26 loc_405A26:                             ; CODE XREF: sub_405A00+E↑j
.text:00405A26                 pop     ebp
.text:00405A27                 retn
.text:00405A27 sub_405A00      endp
.text:00405A27
.text:00405A27 ; ---------------------------------------------------------------------------
.text:00405A28                 align 10h
.text:00405A30
.text:00405A30 ; =============== S U B R O U T I N E =======================================
.text:00405A30
.text:00405A30 ; Attributes: bp-based frame
.text:00405A30
.text:00405A30 sub_405A30      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405A30                                         ; TopLevelExceptionFilter+D7↑p
.text:00405A30                 push    ebp
.text:00405A31                 mov     ebp, esp
.text:00405A33                 fninit
.text:00405A35                 pop     ebp
.text:00405A36                 retn
.text:00405A36 sub_405A30      endp
.text:00405A36
.text:00405A36 ; ---------------------------------------------------------------------------
.text:00405A37                 align 10h
.text:00405A40
.text:00405A40 ; =============== S U B R O U T I N E =======================================
.text:00405A40
.text:00405A40 ; Attributes: bp-based frame
.text:00405A40
.text:00405A40 ; void __cdecl sub_405A40()
.text:00405A40 sub_405A40      proc near               ; DATA XREF: .text:loc_405A89↓o
.text:00405A40                                         ; sub_405AD0:loc_405AFE↓o
.text:00405A40                 push    ebp
.text:00405A41                 mov     ebp, esp
.text:00405A43                 sub     esp, 8
.text:00405A46                 mov     eax, off_407104
.text:00405A4B                 mov     edx, [eax]
.text:00405A4D                 test    edx, edx
.text:00405A4F                 jnz     short loc_405A55
.text:00405A51
.text:00405A51 loc_405A51:                             ; CODE XREF: sub_405A40+2C↓j
.text:00405A51                 mov     esp, ebp
.text:00405A53                 pop     ebp
.text:00405A54                 retn
.text:00405A55 ; ---------------------------------------------------------------------------
.text:00405A55
.text:00405A55 loc_405A55:                             ; CODE XREF: sub_405A40+F↑j
.text:00405A55                                         ; sub_405A40+2A↓j
.text:00405A55                 call    dword ptr [eax]
.text:00405A57                 mov     edx, off_407104
.text:00405A5D                 mov     ecx, [edx+4]
.text:00405A60                 lea     eax, [edx+4]
.text:00405A63                 mov     off_407104, eax
.text:00405A68                 test    ecx, ecx
.text:00405A6A                 jnz     short loc_405A55
.text:00405A6C                 jmp     short loc_405A51
.text:00405A6C sub_405A40      endp
.text:00405A6C
.text:00405A6C ; ---------------------------------------------------------------------------
.text:00405A6E                 align 10h
.text:00405A70                 push    ebp
.text:00405A71                 mov     ebp, esp
.text:00405A73                 sub     esp, 8
.text:00405A76                 mov     [ebp-4], ebx
.text:00405A79                 mov     eax, ds:dword_4063F0
.text:00405A7E                 cmp     eax, 0FFFFFFFFh
.text:00405A81                 jz      short loc_405AAC
.text:00405A83
.text:00405A83 loc_405A83:                             ; CODE XREF: .text:00405AB6↓j
.text:00405A83                                         ; .text:00405AC9↓j
.text:00405A83                 test    eax, eax
.text:00405A85                 mov     ebx, eax
.text:00405A87                 jnz     short loc_405AA0
.text:00405A89
.text:00405A89 loc_405A89:                             ; CODE XREF: .text:00405AAA↓j
.text:00405A89                 mov     dword ptr [esp], offset sub_405A40
.text:00405A90                 call    sub_401040
.text:00405A95                 mov     ebx, [ebp-4]
.text:00405A98                 mov     esp, ebp
.text:00405A9A                 pop     ebp
.text:00405A9B                 retn
.text:00405A9B ; ---------------------------------------------------------------------------
.text:00405A9C                 align 10h
.text:00405AA0
.text:00405AA0 loc_405AA0:                             ; CODE XREF: .text:00405A87↑j
.text:00405AA0                                         ; .text:00405AA8↓j
.text:00405AA0                 call    ds:dword_4063F0[ebx*4]
.text:00405AA7                 dec     ebx
.text:00405AA8                 jnz     short loc_405AA0
.text:00405AAA                 jmp     short loc_405A89
.text:00405AAC ; ---------------------------------------------------------------------------
.text:00405AAC
.text:00405AAC loc_405AAC:                             ; CODE XREF: .text:00405A81↑j
.text:00405AAC                 mov     ecx, ds:dword_4063F4
.text:00405AB2                 xor     eax, eax
.text:00405AB4                 test    ecx, ecx
.text:00405AB6                 jz      short loc_405A83
.text:00405AB8                 mov     edx, offset dword_4063F0
.text:00405ABD                 lea     esi, [esi+0]
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: .text:00405AC7↓j
.text:00405AC0                 inc     eax
.text:00405AC1                 mov     ecx, [edx+eax*4+4]
.text:00405AC5                 test    ecx, ecx
.text:00405AC7                 jnz     short loc_405AC0
.text:00405AC9                 jmp     short loc_405A83
.text:00405AC9 ; ---------------------------------------------------------------------------
.text:00405ACB                 align 10h
.text:00405AD0
.text:00405AD0 ; =============== S U B R O U T I N E =======================================
.text:00405AD0
.text:00405AD0 ; Attributes: bp-based frame
.text:00405AD0
.text:00405AD0 sub_405AD0      proc near               ; CODE XREF: sub_4018B0+16↑p
.text:00405AD0
.text:00405AD0 var_8           = dword ptr -8
.text:00405AD0 var_4           = dword ptr -4
.text:00405AD0
.text:00405AD0                 push    ebp
.text:00405AD1                 mov     ebp, esp
.text:00405AD3                 sub     esp, 8
.text:00405AD6                 mov     [ebp+var_4], ebx
.text:00405AD9                 mov     edx, dword_407100
.text:00405ADF                 test    edx, edx
.text:00405AE1                 jnz     short loc_405B0A
.text:00405AE3                 mov     eax, ds:dword_4063F0
.text:00405AE8                 mov     edx, 1
.text:00405AED                 mov     dword_407100, edx
.text:00405AF3                 cmp     eax, 0FFFFFFFFh
.text:00405AF6                 jz      short loc_405B1D
.text:00405AF8
.text:00405AF8 loc_405AF8:                             ; CODE XREF: sub_405AD0+57↓j
.text:00405AF8                                         ; sub_405AD0+69↓j
.text:00405AF8                 test    eax, eax
.text:00405AFA                 mov     ebx, eax
.text:00405AFC                 jnz     short loc_405B11
.text:00405AFE
.text:00405AFE loc_405AFE:                             ; CODE XREF: sub_405AD0+4B↓j
.text:00405AFE                 mov     [esp+8+var_8], offset sub_405A40 ; void (__cdecl *)()
.text:00405B05                 call    sub_401040
.text:00405B0A
.text:00405B0A loc_405B0A:                             ; CODE XREF: sub_405AD0+11↑j
.text:00405B0A                 mov     ebx, [ebp+var_4]
.text:00405B0D                 mov     esp, ebp
.text:00405B0F                 pop     ebp
.text:00405B10                 retn
.text:00405B11 ; ---------------------------------------------------------------------------
.text:00405B11
.text:00405B11 loc_405B11:                             ; CODE XREF: sub_405AD0+2C↑j
.text:00405B11                                         ; sub_405AD0+49↓j
.text:00405B11                 call    ds:dword_4063F0[ebx*4]
.text:00405B18                 dec     ebx
.text:00405B19                 jnz     short loc_405B11
.text:00405B1B                 jmp     short loc_405AFE
.text:00405B1D ; ---------------------------------------------------------------------------
.text:00405B1D
.text:00405B1D loc_405B1D:                             ; CODE XREF: sub_405AD0+26↑j
.text:00405B1D                 mov     ecx, ds:dword_4063F4
.text:00405B23                 xor     eax, eax
.text:00405B25                 test    ecx, ecx
.text:00405B27                 jz      short loc_405AF8
.text:00405B29                 mov     edx, offset dword_4063F0
.text:00405B2E                 mov     esi, esi
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: sub_405AD0+67↓j
.text:00405B30                 inc     eax
.text:00405B31                 mov     ebx, [edx+eax*4+4]
.text:00405B35                 test    ebx, ebx
.text:00405B37                 jnz     short loc_405B30
.text:00405B39                 jmp     short loc_405AF8
.text:00405B39 sub_405AD0      endp
.text:00405B39
.text:00405B39 ; ---------------------------------------------------------------------------
.text:00405B3B                 align 10h
.text:00405B40
.text:00405B40 ; =============== S U B R O U T I N E =======================================
.text:00405B40
.text:00405B40 ; Attributes: info_from_lumina
.text:00405B40
.text:00405B40 ; void *__cdecl _alloca(size_t Size)
.text:00405B40 __alloca        proc near               ; CODE XREF: sub_4018B0+11↑p
.text:00405B40                 push    ecx
.text:00405B41                 mov     ecx, esp
.text:00405B43                 add     ecx, 8
.text:00405B46
.text:00405B46 loc_405B46:                             ; CODE XREF: __alloca+1B↓j
.text:00405B46                 cmp     eax, 1000h
.text:00405B4B                 jb      short loc_405B5D
.text:00405B4D                 sub     ecx, 1000h
.text:00405B53                 or      dword ptr [ecx], 0
.text:00405B56                 sub     eax, 1000h
.text:00405B5B                 jmp     short loc_405B46
.text:00405B5D ; ---------------------------------------------------------------------------
.text:00405B5D
.text:00405B5D loc_405B5D:                             ; CODE XREF: __alloca+B↑j
.text:00405B5D                 sub     ecx, eax
.text:00405B5F                 or      dword ptr [ecx], 0
.text:00405B62                 mov     eax, esp
.text:00405B64                 mov     esp, ecx
.text:00405B66                 mov     ecx, [eax]
.text:00405B68                 mov     eax, [eax+4]
.text:00405B6B                 jmp     eax
.text:00405B6B __alloca        endp
.text:00405B6B
.text:00405B6B ; ---------------------------------------------------------------------------
.text:00405B6D                 align 10h
.text:00405B70
.text:00405B70 ; =============== S U B R O U T I N E =======================================
.text:00405B70
.text:00405B70 ; Attributes: info_from_lumina
.text:00405B70
.text:00405B70 ; __int64 __cdecl strtoll(const char *String, char **EndPtr, int Radix)
.text:00405B70 _strtoll        proc near               ; CODE XREF: sub_4018B0+26F↑p
.text:00405B70
.text:00405B70 C               = dword ptr -3Ch
.text:00405B70 Type            = dword ptr -38h
.text:00405B70 var_34          = dword ptr -34h
.text:00405B70 var_30          = dword ptr -30h
.text:00405B70 var_2C          = dword ptr -2Ch
.text:00405B70 var_28          = dword ptr -28h
.text:00405B70 var_24          = dword ptr -24h
.text:00405B70 var_20          = dword ptr -20h
.text:00405B70 var_1C          = dword ptr -1Ch
.text:00405B70 var_18          = dword ptr -18h
.text:00405B70 String          = dword ptr  4
.text:00405B70 EndPtr          = dword ptr  8
.text:00405B70 Radix           = dword ptr  0Ch
.text:00405B70
.text:00405B70                 push    ebp
.text:00405B71                 push    edi
.text:00405B72                 push    esi
.text:00405B73                 push    ebx
.text:00405B74                 sub     esp, 2Ch
.text:00405B77                 mov     edx, [esp+3Ch+EndPtr]
.text:00405B7B                 test    edx, edx
.text:00405B7D                 jz      short loc_405B89
.text:00405B7F                 mov     eax, [esp+3Ch+String]
.text:00405B83                 mov     ecx, [esp+3Ch+EndPtr]
.text:00405B87                 mov     [ecx], eax
.text:00405B89
.text:00405B89 loc_405B89:                             ; CODE XREF: _strtoll+D↑j
.text:00405B89                 mov     edx, [esp+3Ch+Radix]
.text:00405B8D                 test    edx, edx
.text:00405B8F                 js      short loc_405B9F
.text:00405B91                 cmp     [esp+3Ch+Radix], 1
.text:00405B96                 jz      short loc_405B9F
.text:00405B98                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:00405B9D                 jle     short loc_405BB6
.text:00405B9F
.text:00405B9F loc_405B9F:                             ; CODE XREF: _strtoll+1F↑j
.text:00405B9F                                         ; _strtoll+26↑j
.text:00405B9F                 call    _errno
.text:00405BA4                 mov     dword ptr [eax], 21h ; '!'
.text:00405BAA
.text:00405BAA loc_405BAA:                             ; CODE XREF: _strtoll+FF↓j
.text:00405BAA                                         ; _strtoll+109↓j
.text:00405BAA                 xor     eax, eax
.text:00405BAC                 xor     edx, edx
.text:00405BAE
.text:00405BAE loc_405BAE:                             ; CODE XREF: _strtoll+24B↓j
.text:00405BAE                                         ; _strtoll+258↓j ...
.text:00405BAE                 add     esp, 2Ch
.text:00405BB1                 pop     ebx
.text:00405BB2                 pop     esi
.text:00405BB3                 pop     edi
.text:00405BB4                 pop     ebp
.text:00405BB5                 retn
.text:00405BB6 ; ---------------------------------------------------------------------------
.text:00405BB6
.text:00405BB6 loc_405BB6:                             ; CODE XREF: _strtoll+2D↑j
.text:00405BB6                 mov     ecx, ds:__mb_cur_max
.text:00405BBC                 lea     esi, [esi+0]
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; CODE XREF: _strtoll+7E↓j
.text:00405BC0                 cmp     dword ptr [ecx], 1
.text:00405BC3                 mov     esi, [esp+3Ch+String]
.text:00405BC7                 movsx   edx, byte ptr [esi]
.text:00405BCA                 jz      loc_405FD0
.text:00405BD0                 mov     [esp+3Ch+Type], 8 ; Type
.text:00405BD8                 mov     [esp+3Ch+C], edx ; C
.text:00405BDB                 call    _isctype
.text:00405BE0                 mov     ecx, ds:__mb_cur_max
.text:00405BE6
.text:00405BE6 loc_405BE6:                             ; CODE XREF: _strtoll+473↓j
.text:00405BE6                 test    eax, eax
.text:00405BE8                 jz      short loc_405BF0
.text:00405BEA                 inc     [esp+3Ch+String]
.text:00405BEE                 jmp     short loc_405BC0
.text:00405BF0 ; ---------------------------------------------------------------------------
.text:00405BF0
.text:00405BF0 loc_405BF0:                             ; CODE XREF: _strtoll+78↑j
.text:00405BF0                 mov     eax, [esp+3Ch+String]
.text:00405BF4                 xor     ebx, ebx
.text:00405BF6                 movzx   edx, byte ptr [eax]
.text:00405BF9                 cmp     dl, 2Dh ; '-'
.text:00405BFC                 setz    bl
.text:00405BFF                 test    ebx, ebx
.text:00405C01                 mov     [esp+3Ch+var_20], ebx
.text:00405C05                 jnz     loc_405FC0
.text:00405C0B                 cmp     dl, 2Bh ; '+'
.text:00405C0E                 jz      loc_405FC0
.text:00405C14
.text:00405C14 loc_405C14:                             ; CODE XREF: _strtoll+45B↓j
.text:00405C14                 mov     edi, [esp+3Ch+Radix]
.text:00405C18                 test    edi, edi
.text:00405C1A                 jnz     short loc_405C2D
.text:00405C1C                 cmp     dl, 30h ; '0'
.text:00405C1F                 jz      loc_405F97
.text:00405C25                 mov     [esp+3Ch+Radix], 0Ah
.text:00405C2D
.text:00405C2D loc_405C2D:                             ; CODE XREF: _strtoll+AA↑j
.text:00405C2D                                         ; _strtoll+43D↓j ...
.text:00405C2D                 cmp     [esp+3Ch+Radix], 10h
.text:00405C32                 jz      loc_405F69
.text:00405C38
.text:00405C38 loc_405C38:                             ; CODE XREF: _strtoll+3FC↓j
.text:00405C38                                         ; _strtoll+410↓j ...
.text:00405C38                 cmp     dword ptr [ecx], 1
.text:00405C3B                 movsx   ebx, dl
.text:00405C3E                 jz      loc_405F51
.text:00405C44                 mov     [esp+3Ch+C], ebx ; C
.text:00405C47                 mov     [esp+3Ch+Type], 4 ; Type
.text:00405C4F                 call    _isctype
.text:00405C54                 mov     ebx, [esp+3Ch+String]
.text:00405C58                 movzx   edx, byte ptr [ebx]
.text:00405C5B
.text:00405C5B loc_405C5B:                             ; CODE XREF: _strtoll+3F4↓j
.text:00405C5B                 test    eax, eax
.text:00405C5D                 jz      loc_405EB8
.text:00405C63                 movsx   eax, dl
.text:00405C66                 sub     eax, 30h ; '0'
.text:00405C69
.text:00405C69 loc_405C69:                             ; CODE XREF: _strtoll+377↓j
.text:00405C69                                         ; _strtoll+3A8↓j ...
.text:00405C69                 inc     [esp+3Ch+String]
.text:00405C6D                 test    eax, eax
.text:00405C6F                 js      loc_405BAA
.text:00405C75                 cmp     eax, [esp+3Ch+Radix]
.text:00405C79                 jge     loc_405BAA
.text:00405C7F                 mov     [esp+3Ch+var_1C], eax
.text:00405C83                 cdq
.text:00405C84                 mov     [esp+3Ch+var_18], edx
.text:00405C88                 mov     [esp+3Ch+var_24], 0
.text:00405C90
.text:00405C90 loc_405C90:                             ; CODE XREF: _strtoll+1B2↓j
.text:00405C90                 mov     ebx, [esp+3Ch+String]
.text:00405C94                 mov     ebp, ds:__mb_cur_max
.text:00405C9A                 movzx   edx, byte ptr [ebx]
.text:00405C9D                 cmp     dword ptr [ebp+0], 1
.text:00405CA1                 movsx   ecx, dl
.text:00405CA4                 jz      loc_405EA0
.text:00405CAA                 mov     [esp+3Ch+C], ecx ; C
.text:00405CAD                 mov     [esp+3Ch+Type], 4 ; Type
.text:00405CB5                 call    _isctype
.text:00405CBA                 mov     ecx, [esp+3Ch+String]
.text:00405CBE                 movzx   edx, byte ptr [ecx]
.text:00405CC1
.text:00405CC1 loc_405CC1:                             ; CODE XREF: _strtoll+343↓j
.text:00405CC1                 test    eax, eax
.text:00405CC3                 jz      loc_405E06
.text:00405CC9                 movsx   ebx, dl
.text:00405CCC                 lea     ebp, [ebx-30h]
.text:00405CCF
.text:00405CCF loc_405CCF:                             ; CODE XREF: _strtoll+2C7↓j
.text:00405CCF                 test    ebp, ebp
.text:00405CD1                 js      loc_405D70
.text:00405CD7                 cmp     ebp, [esp+3Ch+Radix]
.text:00405CDB                 jge     loc_405D70
.text:00405CE1                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00405CE8                 mov     eax, [esp+3Ch+Radix]
.text:00405CEC                 mov     [esp+3Ch+Type], 7FFFFFFFh
.text:00405CF4                 cdq
.text:00405CF5                 mov     [esp+3Ch+var_34], eax
.text:00405CF9                 mov     [esp+3Ch+var_30], edx
.text:00405CFD                 call    sub_406290
.text:00405D02                 add     eax, 2
.text:00405D05                 adc     edx, 0
.text:00405D08                 cmp     [esp+3Ch+var_18], edx
.text:00405D0C                 jb      short loc_405D27
.text:00405D0E                 ja      short loc_405D16
.text:00405D10                 cmp     [esp+3Ch+var_1C], eax
.text:00405D14                 jbe     short loc_405D27
.text:00405D16
.text:00405D16 loc_405D16:                             ; CODE XREF: _strtoll+19E↑j
.text:00405D16                 mov     [esp+3Ch+var_24], 1
.text:00405D1E
.text:00405D1E loc_405D1E:                             ; CODE XREF: _strtoll+1FE↓j
.text:00405D1E                 inc     [esp+3Ch+String]
.text:00405D22                 jmp     loc_405C90
.text:00405D27 ; ---------------------------------------------------------------------------
.text:00405D27
.text:00405D27 loc_405D27:                             ; CODE XREF: _strtoll+19C↑j
.text:00405D27                                         ; _strtoll+1A4↑j
.text:00405D27                 mov     eax, [esp+3Ch+Radix]
.text:00405D2B                 mov     ecx, [esp+3Ch+var_18]
.text:00405D2F                 cdq
.text:00405D30                 mov     [esp+3Ch+var_2C], eax
.text:00405D34                 mov     esi, [esp+3Ch+var_2C]
.text:00405D38                 mov     [esp+3Ch+var_28], edx
.text:00405D3C                 mov     eax, [esp+3Ch+var_1C]
.text:00405D40                 mov     edi, [esp+3Ch+var_28]
.text:00405D44                 mul     [esp+3Ch+var_2C]
.text:00405D48                 imul    ecx, esi
.text:00405D4B                 mov     esi, [esp+3Ch+var_1C]
.text:00405D4F                 mov     [esp+3Ch+var_1C], ebp
.text:00405D53                 imul    esi, edi
.text:00405D56                 mov     ebx, eax
.text:00405D58                 mov     eax, ebp
.text:00405D5A                 add     edx, ecx
.text:00405D5C                 sar     eax, 1Fh
.text:00405D5F                 add     [esp+3Ch+var_1C], ebx
.text:00405D63                 lea     ecx, [esi+edx]
.text:00405D66                 mov     [esp+3Ch+var_18], eax
.text:00405D6A                 adc     [esp+3Ch+var_18], ecx
.text:00405D6E                 jmp     short loc_405D1E
.text:00405D70 ; ---------------------------------------------------------------------------
.text:00405D70
.text:00405D70 loc_405D70:                             ; CODE XREF: _strtoll+161↑j
.text:00405D70                                         ; _strtoll+16B↑j
.text:00405D70                 mov     eax, [esp+3Ch+EndPtr]
.text:00405D74                 test    eax, eax
.text:00405D76                 jz      short loc_405D82
.text:00405D78                 mov     edi, [esp+3Ch+String]
.text:00405D7C                 mov     edx, [esp+3Ch+EndPtr]
.text:00405D80                 mov     [edx], edi
.text:00405D82
.text:00405D82 loc_405D82:                             ; CODE XREF: _strtoll+206↑j
.text:00405D82                 mov     esi, [esp+3Ch+var_20]
.text:00405D86                 test    esi, esi
.text:00405D88                 jz      short loc_405DFA
.text:00405D8A                 cmp     [esp+3Ch+var_18], 80000000h
.text:00405D92                 jb      short loc_405DA5
.text:00405D94                 ja      short loc_405D9D
.text:00405D96                 cmp     [esp+3Ch+var_1C], 0
.text:00405D9B
.text:00405D9B loc_405D9B:                             ; CODE XREF: _strtoll+294↓j
.text:00405D9B                 jbe     short loc_405DA5
.text:00405D9D
.text:00405D9D loc_405D9D:                             ; CODE XREF: _strtoll+224↑j
.text:00405D9D                 mov     [esp+3Ch+var_24], 1
.text:00405DA5
.text:00405DA5 loc_405DA5:                             ; CODE XREF: _strtoll+222↑j
.text:00405DA5                                         ; _strtoll:loc_405D9B↑j ...
.text:00405DA5                 mov     ebp, [esp+3Ch+var_24]
.text:00405DA9                 test    ebp, ebp
.text:00405DAB                 jnz     short loc_405DCD
.text:00405DAD                 mov     ebx, [esp+3Ch+var_20]
.text:00405DB1                 mov     eax, [esp+3Ch+var_1C]
.text:00405DB5                 mov     edx, [esp+3Ch+var_18]
.text:00405DB9                 test    ebx, ebx
.text:00405DBB                 jz      loc_405BAE
.text:00405DC1                 neg     eax
.text:00405DC3                 adc     edx, 0
.text:00405DC6                 neg     edx
.text:00405DC8                 jmp     loc_405BAE
.text:00405DCD ; ---------------------------------------------------------------------------
.text:00405DCD
.text:00405DCD loc_405DCD:                             ; CODE XREF: _strtoll+23B↑j
.text:00405DCD                 call    _errno
.text:00405DD2                 mov     ecx, [esp+3Ch+var_20]
.text:00405DD6                 mov     edx, 80000000h
.text:00405DDB                 mov     dword ptr [eax], 22h ; '"'
.text:00405DE1                 xor     eax, eax
.text:00405DE3                 test    ecx, ecx
.text:00405DE5                 jnz     loc_405BAE
.text:00405DEB                 mov     eax, 0FFFFFFFFh
.text:00405DF0                 mov     edx, 7FFFFFFFh
.text:00405DF5                 jmp     loc_405BAE
.text:00405DFA ; ---------------------------------------------------------------------------
.text:00405DFA
.text:00405DFA loc_405DFA:                             ; CODE XREF: _strtoll+218↑j
.text:00405DFA                 cmp     [esp+3Ch+var_18], 7FFFFFFFh
.text:00405E02                 jb      short loc_405DA5
.text:00405E04                 jmp     short loc_405D9B
.text:00405E06 ; ---------------------------------------------------------------------------
.text:00405E06
.text:00405E06 loc_405E06:                             ; CODE XREF: _strtoll+153↑j
.text:00405E06                 mov     edi, ds:__mb_cur_max
.text:00405E0C                 movsx   ecx, dl
.text:00405E0F                 cmp     dword ptr [edi], 1
.text:00405E12                 jz      short loc_405E8A
.text:00405E14                 mov     [esp+3Ch+C], ecx ; C
.text:00405E17                 mov     [esp+3Ch+Type], 1 ; Type
.text:00405E1F                 call    _isctype
.text:00405E24                 mov     ecx, [esp+3Ch+String]
.text:00405E28                 movzx   edx, byte ptr [ecx]
.text:00405E2B
.text:00405E2B loc_405E2B:                             ; CODE XREF: _strtoll+32D↓j
.text:00405E2B                 test    eax, eax
.text:00405E2D                 jz      short loc_405E40
.text:00405E2F                 movsx   eax, dl
.text:00405E32                 sub     eax, 37h ; '7'
.text:00405E35
.text:00405E35 loc_405E35:                             ; CODE XREF: _strtoll+2FC↓j
.text:00405E35                                         ; _strtoll+303↓j
.text:00405E35                 mov     ebp, eax
.text:00405E37                 jmp     loc_405CCF
.text:00405E37 ; ---------------------------------------------------------------------------
.text:00405E3C                 align 10h
.text:00405E40
.text:00405E40 loc_405E40:                             ; CODE XREF: _strtoll+2BD↑j
.text:00405E40                 mov     edi, ds:__mb_cur_max
.text:00405E46                 movsx   edx, dl
.text:00405E49                 cmp     dword ptr [edi], 1
.text:00405E4C                 jz      short loc_405E75
.text:00405E4E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00405E56                 mov     [esp+3Ch+C], edx ; C
.text:00405E59                 call    _isctype
.text:00405E5E
.text:00405E5E loc_405E5E:                             ; CODE XREF: _strtoll+318↓j
.text:00405E5E                 test    eax, eax
.text:00405E60                 jz      short loc_405E6E
.text:00405E62                 mov     ecx, [esp+3Ch+String]
.text:00405E66                 movsx   eax, byte ptr [ecx]
.text:00405E69                 sub     eax, 57h ; 'W'
.text:00405E6C                 jmp     short loc_405E35
.text:00405E6E ; ---------------------------------------------------------------------------
.text:00405E6E
.text:00405E6E loc_405E6E:                             ; CODE XREF: _strtoll+2F0↑j
.text:00405E6E                 mov     eax, 0FFFFFFFFh
.text:00405E73                 jmp     short loc_405E35
.text:00405E75 ; ---------------------------------------------------------------------------
.text:00405E75
.text:00405E75 loc_405E75:                             ; CODE XREF: _strtoll+2DC↑j
.text:00405E75                 mov     ebx, ds:_pctype
.text:00405E7B                 mov     ebp, [ebx]
.text:00405E7D                 movzx   esi, word ptr [ebp+edx*2+0]
.text:00405E82                 and     esi, 2
.text:00405E85                 movzx   eax, si
.text:00405E88                 jmp     short loc_405E5E
.text:00405E8A ; ---------------------------------------------------------------------------
.text:00405E8A
.text:00405E8A loc_405E8A:                             ; CODE XREF: _strtoll+2A2↑j
.text:00405E8A                 mov     ebx, ds:_pctype
.text:00405E90                 mov     ebp, [ebx]
.text:00405E92                 movzx   esi, word ptr [ebp+ecx*2+0]
.text:00405E97                 and     esi, 1
.text:00405E9A                 movzx   eax, si
.text:00405E9D                 jmp     short loc_405E2B
.text:00405E9D ; ---------------------------------------------------------------------------
.text:00405E9F                 align 10h
.text:00405EA0
.text:00405EA0 loc_405EA0:                             ; CODE XREF: _strtoll+134↑j
.text:00405EA0                 mov     ebp, ds:_pctype
.text:00405EA6                 mov     esi, [ebp+0]
.text:00405EA9                 movzx   edi, word ptr [esi+ecx*2]
.text:00405EAD                 and     edi, 4
.text:00405EB0                 movzx   eax, di
.text:00405EB3                 jmp     loc_405CC1
.text:00405EB8 ; ---------------------------------------------------------------------------
.text:00405EB8
.text:00405EB8 loc_405EB8:                             ; CODE XREF: _strtoll+ED↑j
.text:00405EB8                 mov     esi, ds:__mb_cur_max
.text:00405EBE                 movsx   ecx, dl
.text:00405EC1                 cmp     dword ptr [esi], 1
.text:00405EC4                 jz      short loc_405F3C
.text:00405EC6                 mov     [esp+3Ch+C], ecx ; C
.text:00405EC9                 mov     [esp+3Ch+Type], 1 ; Type
.text:00405ED1                 call    _isctype
.text:00405ED6                 mov     ecx, [esp+3Ch+String]
.text:00405EDA                 movzx   edx, byte ptr [ecx]
.text:00405EDD
.text:00405EDD loc_405EDD:                             ; CODE XREF: _strtoll+3DF↓j
.text:00405EDD                 test    eax, eax
.text:00405EDF                 jz      short loc_405EEC
.text:00405EE1                 movsx   eax, dl
.text:00405EE4                 sub     eax, 37h ; '7'
.text:00405EE7                 jmp     loc_405C69
.text:00405EEC ; ---------------------------------------------------------------------------
.text:00405EEC
.text:00405EEC loc_405EEC:                             ; CODE XREF: _strtoll+36F↑j
.text:00405EEC                 mov     esi, ds:__mb_cur_max
.text:00405EF2                 movsx   edx, dl
.text:00405EF5                 cmp     dword ptr [esi], 1
.text:00405EF8                 jz      short loc_405F27
.text:00405EFA                 mov     [esp+3Ch+Type], 2 ; Type
.text:00405F02                 mov     [esp+3Ch+C], edx ; C
.text:00405F05                 call    _isctype
.text:00405F0A
.text:00405F0A loc_405F0A:                             ; CODE XREF: _strtoll+3CA↓j
.text:00405F0A                 test    eax, eax
.text:00405F0C                 jz      short loc_405F1D
.text:00405F0E                 mov     edx, [esp+3Ch+String]
.text:00405F12                 movsx   eax, byte ptr [edx]
.text:00405F15                 sub     eax, 57h ; 'W'
.text:00405F18                 jmp     loc_405C69
.text:00405F1D ; ---------------------------------------------------------------------------
.text:00405F1D
.text:00405F1D loc_405F1D:                             ; CODE XREF: _strtoll+39C↑j
.text:00405F1D                 mov     eax, 0FFFFFFFFh
.text:00405F22                 jmp     loc_405C69
.text:00405F27 ; ---------------------------------------------------------------------------
.text:00405F27
.text:00405F27 loc_405F27:                             ; CODE XREF: _strtoll+388↑j
.text:00405F27                 mov     ebx, ds:_pctype
.text:00405F2D                 mov     ebp, [ebx]
.text:00405F2F                 movzx   edi, word ptr [ebp+edx*2+0]
.text:00405F34                 and     edi, 2
.text:00405F37                 movzx   eax, di
.text:00405F3A                 jmp     short loc_405F0A
.text:00405F3C ; ---------------------------------------------------------------------------
.text:00405F3C
.text:00405F3C loc_405F3C:                             ; CODE XREF: _strtoll+354↑j
.text:00405F3C                 mov     ebx, ds:_pctype
.text:00405F42                 mov     ebp, [ebx]
.text:00405F44                 movzx   edi, word ptr [ebp+ecx*2+0]
.text:00405F49                 and     edi, 1
.text:00405F4C                 movzx   eax, di
.text:00405F4F                 jmp     short loc_405EDD
.text:00405F51 ; ---------------------------------------------------------------------------
.text:00405F51
.text:00405F51 loc_405F51:                             ; CODE XREF: _strtoll+CE↑j
.text:00405F51                 mov     ebp, ds:_pctype
.text:00405F57                 mov     edi, [ebp+0]
.text:00405F5A                 movzx   ecx, word ptr [edi+ebx*2]
.text:00405F5E                 and     ecx, 4
.text:00405F61                 movzx   eax, cx
.text:00405F64                 jmp     loc_405C5B
.text:00405F69 ; ---------------------------------------------------------------------------
.text:00405F69
.text:00405F69 loc_405F69:                             ; CODE XREF: _strtoll+C2↑j
.text:00405F69                 cmp     dl, 30h ; '0'
.text:00405F6C                 jnz     loc_405C38
.text:00405F72                 mov     ebx, [esp+3Ch+String]
.text:00405F76                 movzx   eax, byte ptr [ebx+1]
.text:00405F7A                 cmp     al, 58h ; 'X'
.text:00405F7C                 jz      short loc_405F86
.text:00405F7E                 cmp     al, 78h ; 'x'
.text:00405F80                 jnz     loc_405C38
.text:00405F86
.text:00405F86 loc_405F86:                             ; CODE XREF: _strtoll+40C↑j
.text:00405F86                 add     [esp+3Ch+String], 2
.text:00405F8B                 mov     esi, [esp+3Ch+String]
.text:00405F8F                 movzx   edx, byte ptr [esi]
.text:00405F92                 jmp     loc_405C38
.text:00405F97 ; ---------------------------------------------------------------------------
.text:00405F97
.text:00405F97 loc_405F97:                             ; CODE XREF: _strtoll+AF↑j
.text:00405F97                 mov     ebp, [esp+3Ch+String]
.text:00405F9B                 movzx   eax, byte ptr [ebp+1]
.text:00405F9F                 cmp     al, 58h ; 'X'
.text:00405FA1                 jz      short loc_405FB3
.text:00405FA3                 mov     [esp+3Ch+Radix], 8
.text:00405FAB                 cmp     al, 78h ; 'x'
.text:00405FAD                 jnz     loc_405C2D
.text:00405FB3
.text:00405FB3 loc_405FB3:                             ; CODE XREF: _strtoll+431↑j
.text:00405FB3                 mov     [esp+3Ch+Radix], 10h
.text:00405FBB                 jmp     loc_405C2D
.text:00405FC0 ; ---------------------------------------------------------------------------
.text:00405FC0
.text:00405FC0 loc_405FC0:                             ; CODE XREF: _strtoll+95↑j
.text:00405FC0                                         ; _strtoll+9E↑j
.text:00405FC0                 inc     [esp+3Ch+String]
.text:00405FC4                 mov     esi, [esp+3Ch+String]
.text:00405FC8                 movzx   edx, byte ptr [esi]
.text:00405FCB                 jmp     loc_405C14
.text:00405FD0 ; ---------------------------------------------------------------------------
.text:00405FD0
.text:00405FD0 loc_405FD0:                             ; CODE XREF: _strtoll+5A↑j
.text:00405FD0                 mov     ebp, ds:_pctype
.text:00405FD6                 mov     edi, [ebp+0]
.text:00405FD9                 movzx   ebx, word ptr [edi+edx*2]
.text:00405FDD                 and     ebx, 8
.text:00405FE0                 movzx   eax, bx
.text:00405FE3                 jmp     loc_405BE6
.text:00405FE3 _strtoll        endp
.text:00405FE3
.text:00405FE3 ; ---------------------------------------------------------------------------
.text:00405FE8                 align 10h
.text:00405FF0                 jmp     ds:__set_app_type
.text:00405FF0 ; ---------------------------------------------------------------------------
.text:00405FF6                 align 10h
.text:00406000
.text:00406000 ; =============== S U B R O U T I N E =======================================
.text:00406000
.text:00406000 ; Attributes: thunk
.text:00406000
.text:00406000 ; void __cdecl cexit()
.text:00406000 _cexit          proc near               ; CODE XREF: sub_401080+EC↑p
.text:00406000                 jmp     ds:__imp__cexit
.text:00406000 _cexit          endp
.text:00406000
.text:00406000 ; ---------------------------------------------------------------------------
.text:00406006                 align 10h
.text:00406010
.text:00406010 ; =============== S U B R O U T I N E =======================================
.text:00406010
.text:00406010 ; Attributes: thunk
.text:00406010
.text:00406010 ; char ***__cdecl _p__environ()
.text:00406010 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00406010                 jmp     ds:__imp___p__environ
.text:00406010 __p__environ    endp
.text:00406010
.text:00406010 ; ---------------------------------------------------------------------------
.text:00406016                 align 10h
.text:00406020
.text:00406020 ; =============== S U B R O U T I N E =======================================
.text:00406020
.text:00406020 ; Attributes: thunk
.text:00406020
.text:00406020 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00406020 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00406020                                         ; TopLevelExceptionFilter+88↑p ...
.text:00406020
.text:00406020 Signal          = dword ptr  4
.text:00406020 Function        = dword ptr  8
.text:00406020
.text:00406020                 jmp     ds:__imp_signal
.text:00406020 signal          endp
.text:00406020
.text:00406020 ; ---------------------------------------------------------------------------
.text:00406026                 align 10h
.text:00406030
.text:00406030 ; =============== S U B R O U T I N E =======================================
.text:00406030
.text:00406030 ; Attributes: thunk
.text:00406030
.text:00406030 ; int *__cdecl _p__fmode()
.text:00406030 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00406030                 jmp     ds:__imp___p__fmode
.text:00406030 __p__fmode      endp
.text:00406030
.text:00406030 ; ---------------------------------------------------------------------------
.text:00406036                 align 10h
.text:00406040
.text:00406040 ; =============== S U B R O U T I N E =======================================
.text:00406040
.text:00406040 ; Attributes: thunk
.text:00406040
.text:00406040 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00406040 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00406040                                         ; sub_401080+90↑p ...
.text:00406040
.text:00406040 FileHandle      = dword ptr  4
.text:00406040 Mode            = dword ptr  8
.text:00406040
.text:00406040                 jmp     ds:__imp__setmode
.text:00406040 _setmode        endp
.text:00406040
.text:00406040 ; ---------------------------------------------------------------------------
.text:00406046                 align 10h
.text:00406050
.text:00406050 ; =============== S U B R O U T I N E =======================================
.text:00406050
.text:00406050 ; Attributes: thunk
.text:00406050
.text:00406050 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00406050                 jmp     ds:__imp___getmainargs
.text:00406050 __getmainargs   endp
.text:00406050
.text:00406050 ; ---------------------------------------------------------------------------
.text:00406056                 align 10h
.text:00406060
.text:00406060 ; =============== S U B R O U T I N E =======================================
.text:00406060
.text:00406060 ; Attributes: thunk
.text:00406060
.text:00406060 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00406060 setlocale       proc near               ; CODE XREF: sub_4018B0+41↑p
.text:00406060
.text:00406060 Category        = dword ptr  4
.text:00406060 Locale          = dword ptr  8
.text:00406060
.text:00406060                 jmp     ds:__imp_setlocale
.text:00406060 setlocale       endp
.text:00406060
.text:00406060 ; ---------------------------------------------------------------------------
.text:00406066                 align 10h
.text:00406070
.text:00406070 ; =============== S U B R O U T I N E =======================================
.text:00406070
.text:00406070 ; Attributes: thunk
.text:00406070
.text:00406070 ; int __cdecl puts(const char *Buffer)
.text:00406070 puts            proc near               ; CODE XREF: sub_4020F0+18F↑p
.text:00406070                                         ; sub_4020F0+1E9↑p
.text:00406070
.text:00406070 Buffer          = dword ptr  4
.text:00406070
.text:00406070                 jmp     ds:__imp_puts
.text:00406070 puts            endp
.text:00406070
.text:00406070 ; ---------------------------------------------------------------------------
.text:00406076                 align 10h
.text:00406080
.text:00406080 ; =============== S U B R O U T I N E =======================================
.text:00406080
.text:00406080 ; Attributes: thunk
.text:00406080
.text:00406080 ; size_t __cdecl strlen(const char *Str)
.text:00406080 strlen          proc near               ; CODE XREF: sub_4018B0+1C7↑p
.text:00406080                                         ; sub_402530+2A9↑p ...
.text:00406080
.text:00406080 Str             = dword ptr  4
.text:00406080
.text:00406080                 jmp     ds:__imp_strlen
.text:00406080 strlen          endp
.text:00406080
.text:00406080 ; ---------------------------------------------------------------------------
.text:00406086                 align 10h
.text:00406090
.text:00406090 ; =============== S U B R O U T I N E =======================================
.text:00406090
.text:00406090 ; Attributes: thunk
.text:00406090
.text:00406090 ; void __cdecl free(void *Block)
.text:00406090 free            proc near               ; CODE XREF: sub_401F70+136↑p
.text:00406090                                         ; sub_4050F0+112↑p
.text:00406090
.text:00406090 Block           = dword ptr  4
.text:00406090
.text:00406090                 jmp     ds:__imp_free
.text:00406090 free            endp
.text:00406090
.text:00406090 ; ---------------------------------------------------------------------------
.text:00406096                 align 10h
.text:004060A0
.text:004060A0 ; =============== S U B R O U T I N E =======================================
.text:004060A0
.text:004060A0 ; Attributes: thunk
.text:004060A0
.text:004060A0 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:004060A0 strtol          proc near               ; CODE XREF: sub_401F70+37↑p
.text:004060A0                                         ; sub_403B10+B0↑p ...
.text:004060A0
.text:004060A0 String          = dword ptr  4
.text:004060A0 EndPtr          = dword ptr  8
.text:004060A0 Radix           = dword ptr  0Ch
.text:004060A0
.text:004060A0                 jmp     ds:__imp_strtol
.text:004060A0 strtol          endp
.text:004060A0
.text:004060A0 ; ---------------------------------------------------------------------------
.text:004060A6                 align 10h
.text:004060B0
.text:004060B0 ; =============== S U B R O U T I N E =======================================
.text:004060B0
.text:004060B0 ; Attributes: thunk
.text:004060B0
.text:004060B0 ; int *__cdecl errno()
.text:004060B0 _errno          proc near               ; CODE XREF: sub_4018B0:loc_401AFF↑p
.text:004060B0                                         ; sub_4018B0+278↑p ...
.text:004060B0                 jmp     ds:__imp__errno
.text:004060B0 _errno          endp
.text:004060B0
.text:004060B0 ; ---------------------------------------------------------------------------
.text:004060B6                 align 10h
.text:004060C0
.text:004060C0 ; =============== S U B R O U T I N E =======================================
.text:004060C0
.text:004060C0 ; Attributes: noreturn thunk
.text:004060C0
.text:004060C0 ; void __cdecl __noreturn exit(int Code)
.text:004060C0 exit            proc near               ; CODE XREF: sub_4018B0:loc_401A23↑p
.text:004060C0                                         ; .text:00401E1B↑p ...
.text:004060C0
.text:004060C0 Code            = dword ptr  4
.text:004060C0
.text:004060C0                 jmp     ds:__imp_exit
.text:004060C0 exit            endp
.text:004060C0
.text:004060C0 ; ---------------------------------------------------------------------------
.text:004060C6                 align 10h
.text:004060D0
.text:004060D0 ; =============== S U B R O U T I N E =======================================
.text:004060D0
.text:004060D0 ; Attributes: thunk
.text:004060D0
.text:004060D0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004060D0 fputs           proc near               ; CODE XREF: sub_4018B0+401↑p
.text:004060D0                                         ; sub_4018B0+423↑p ...
.text:004060D0
.text:004060D0 Buffer          = dword ptr  4
.text:004060D0 Stream          = dword ptr  8
.text:004060D0
.text:004060D0                 jmp     ds:__imp_fputs
.text:004060D0 fputs           endp
.text:004060D0
.text:004060D0 ; ---------------------------------------------------------------------------
.text:004060D6                 align 10h
.text:004060E0
.text:004060E0 ; =============== S U B R O U T I N E =======================================
.text:004060E0
.text:004060E0 ; Attributes: thunk
.text:004060E0
.text:004060E0 ; int printf(const char *const Format, ...)
.text:004060E0 printf          proc near               ; CODE XREF: sub_4018B0+3DF↑p
.text:004060E0                                         ; sub_4018B0+4C8↑p ...
.text:004060E0
.text:004060E0 Format          = dword ptr  4
.text:004060E0
.text:004060E0                 jmp     ds:__imp_printf
.text:004060E0 printf          endp
.text:004060E0
.text:004060E0 ; ---------------------------------------------------------------------------
.text:004060E6                 align 10h
.text:004060F0
.text:004060F0 ; =============== S U B R O U T I N E =======================================
.text:004060F0
.text:004060F0 ; Attributes: thunk
.text:004060F0
.text:004060F0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004060F0 fprintf         proc near               ; CODE XREF: sub_4018B0+167↑p
.text:004060F0                                         ; .text:00401E13↑p ...
.text:004060F0
.text:004060F0 Stream          = dword ptr  4
.text:004060F0 Format          = dword ptr  8
.text:004060F0
.text:004060F0                 jmp     ds:__imp_fprintf
.text:004060F0 fprintf         endp
.text:004060F0
.text:004060F0 ; ---------------------------------------------------------------------------
.text:004060F6                 align 10h
.text:00406100
.text:00406100 ; =============== S U B R O U T I N E =======================================
.text:00406100
.text:00406100 ; Attributes: thunk
.text:00406100
.text:00406100 ; char *__cdecl strchr(const char *Str, int Val)
.text:00406100 strchr          proc near               ; CODE XREF: sub_401F70+FE↑p
.text:00406100                                         ; sub_402530+469↑p ...
.text:00406100
.text:00406100 Str             = dword ptr  4
.text:00406100 Val             = dword ptr  8
.text:00406100
.text:00406100                 jmp     ds:__imp_strchr
.text:00406100 strchr          endp
.text:00406100
.text:00406100 ; ---------------------------------------------------------------------------
.text:00406106                 align 10h
.text:00406110
.text:00406110 ; =============== S U B R O U T I N E =======================================
.text:00406110
.text:00406110 ; Attributes: thunk
.text:00406110
.text:00406110 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00406110 strncmp         proc near               ; CODE XREF: sub_402530+23F↑p
.text:00406110                                         ; sub_402530+699↑p
.text:00406110
.text:00406110 Str1            = dword ptr  4
.text:00406110 Str2            = dword ptr  8
.text:00406110 MaxCount        = dword ptr  0Ch
.text:00406110
.text:00406110                 jmp     ds:__imp_strncmp
.text:00406110 strncmp         endp
.text:00406110
.text:00406110 ; ---------------------------------------------------------------------------
.text:00406116                 align 10h
.text:00406120
.text:00406120 ; =============== S U B R O U T I N E =======================================
.text:00406120
.text:00406120 ; Attributes: thunk
.text:00406120
.text:00406120 ; char *__cdecl getenv(const char *VarName)
.text:00406120 getenv          proc near               ; CODE XREF: sub_402530+B57↑p
.text:00406120
.text:00406120 VarName         = dword ptr  4
.text:00406120
.text:00406120                 jmp     ds:__imp_getenv
.text:00406120 getenv          endp
.text:00406120
.text:00406120 ; ---------------------------------------------------------------------------
.text:00406126                 align 10h
.text:00406130
.text:00406130 ; =============== S U B R O U T I N E =======================================
.text:00406130
.text:00406130 ; Attributes: thunk
.text:00406130
.text:00406130 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00406130 vfprintf        proc near               ; CODE XREF: sub_4035F0+C1↑p
.text:00406130                                         ; sub_405370+49↑p ...
.text:00406130
.text:00406130 Stream          = dword ptr  4
.text:00406130 Format          = dword ptr  8
.text:00406130 ArgList         = dword ptr  0Ch
.text:00406130
.text:00406130                 jmp     ds:__imp_vfprintf
.text:00406130 vfprintf        endp
.text:00406130
.text:00406130 ; ---------------------------------------------------------------------------
.text:00406136                 align 10h
.text:00406140
.text:00406140 ; =============== S U B R O U T I N E =======================================
.text:00406140
.text:00406140 ; Attributes: noreturn thunk
.text:00406140
.text:00406140 ; void __cdecl __noreturn abort()
.text:00406140 abort           proc near               ; CODE XREF: sub_4035F0:loc_40368C↑p
.text:00406140                                         ; sub_4050F0:loc_4052AA↑p ...
.text:00406140                 jmp     ds:__imp_abort
.text:00406140 abort           endp
.text:00406140
.text:00406140 ; ---------------------------------------------------------------------------
.text:00406146                 align 10h
.text:00406150
.text:00406150 ; =============== S U B R O U T I N E =======================================
.text:00406150
.text:00406150 ; Attributes: thunk
.text:00406150
.text:00406150 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00406150 _flsbuf         proc near               ; CODE XREF: sub_4035F0+128↑p
.text:00406150                                         ; sub_4035F0+13A↑p ...
.text:00406150
.text:00406150 File            = dword ptr  8
.text:00406150
.text:00406150                 jmp     ds:__imp__flsbuf
.text:00406150 _flsbuf         endp
.text:00406150
.text:00406150 ; ---------------------------------------------------------------------------
.text:00406156                 align 10h
.text:00406160
.text:00406160 ; =============== S U B R O U T I N E =======================================
.text:00406160
.text:00406160 ; Attributes: thunk
.text:00406160
.text:00406160 ; int __cdecl fclose(FILE *Stream)
.text:00406160 fclose          proc near               ; CODE XREF: sub_403970+27↑p
.text:00406160
.text:00406160 Stream          = dword ptr  4
.text:00406160
.text:00406160                 jmp     ds:__imp_fclose
.text:00406160 fclose          endp
.text:00406160
.text:00406160 ; ---------------------------------------------------------------------------
.text:00406166                 align 10h
.text:00406170
.text:00406170 ; =============== S U B R O U T I N E =======================================
.text:00406170
.text:00406170 ; Attributes: thunk
.text:00406170
.text:00406170 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00406170 sprintf         proc near               ; CODE XREF: sub_403A60+62↑p
.text:00406170
.text:00406170 Buffer          = dword ptr  4
.text:00406170 Format          = dword ptr  8
.text:00406170
.text:00406170                 jmp     ds:__imp_sprintf
.text:00406170 sprintf         endp
.text:00406170
.text:00406170 ; ---------------------------------------------------------------------------
.text:00406176                 align 10h
.text:00406180
.text:00406180 ; =============== S U B R O U T I N E =======================================
.text:00406180
.text:00406180 ; Attributes: thunk
.text:00406180
.text:00406180 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00406180 strcpy          proc near               ; CODE XREF: sub_403A60+78↑p
.text:00406180
.text:00406180 Destination     = dword ptr  4
.text:00406180 Source          = dword ptr  8
.text:00406180
.text:00406180                 jmp     ds:__imp_strcpy
.text:00406180 strcpy          endp
.text:00406180
.text:00406180 ; ---------------------------------------------------------------------------
.text:00406186                 align 10h
.text:00406190
.text:00406190 ; =============== S U B R O U T I N E =======================================
.text:00406190
.text:00406190 ; Attributes: thunk
.text:00406190
.text:00406190 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00406190 strcmp          proc near               ; CODE XREF: sub_403B10+3B↑p
.text:00406190                                         ; sub_405474+180↑p
.text:00406190
.text:00406190 Str1            = dword ptr  4
.text:00406190 Str2            = dword ptr  8
.text:00406190
.text:00406190                 jmp     ds:__imp_strcmp
.text:00406190 strcmp          endp
.text:00406190
.text:00406190 ; ---------------------------------------------------------------------------
.text:00406196                 align 10h
.text:004061A0
.text:004061A0 ; =============== S U B R O U T I N E =======================================
.text:004061A0
.text:004061A0 ; Attributes: thunk
.text:004061A0
.text:004061A0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004061A0 memcpy          proc near               ; CODE XREF: .text:00403E38↑p
.text:004061A0                                         ; sub_403E50+31↑p
.text:004061A0
.text:004061A0 Src             = dword ptr  8
.text:004061A0 Size            = dword ptr  0Ch
.text:004061A0
.text:004061A0                 jmp     ds:__imp_memcpy
.text:004061A0 memcpy          endp
.text:004061A0
.text:004061A0 ; ---------------------------------------------------------------------------
.text:004061A6                 align 10h
.text:004061B0
.text:004061B0 ; =============== S U B R O U T I N E =======================================
.text:004061B0
.text:004061B0 ; Attributes: thunk
.text:004061B0
.text:004061B0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004061B0 memset          proc near               ; CODE XREF: .text:00403DB6↑p
.text:004061B0
.text:004061B0 Val             = dword ptr  8
.text:004061B0 Size            = dword ptr  0Ch
.text:004061B0
.text:004061B0                 jmp     ds:__imp_memset
.text:004061B0 memset          endp
.text:004061B0
.text:004061B0 ; ---------------------------------------------------------------------------
.text:004061B6                 align 10h
.text:004061C0
.text:004061C0 ; =============== S U B R O U T I N E =======================================
.text:004061C0
.text:004061C0 ; Attributes: thunk
.text:004061C0
.text:004061C0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004061C0 calloc          proc near               ; CODE XREF: .text:00403DF3↑p
.text:004061C0
.text:004061C0 Count           = dword ptr  4
.text:004061C0 Size            = dword ptr  8
.text:004061C0
.text:004061C0                 jmp     ds:__imp_calloc
.text:004061C0 calloc          endp
.text:004061C0
.text:004061C0 ; ---------------------------------------------------------------------------
.text:004061C6                 align 10h
.text:004061D0
.text:004061D0 ; =============== S U B R O U T I N E =======================================
.text:004061D0
.text:004061D0 ; Attributes: thunk
.text:004061D0
.text:004061D0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004061D0 realloc         proc near               ; CODE XREF: .text:00403CF0↑p
.text:004061D0                                         ; sub_403D20+16↑p ...
.text:004061D0
.text:004061D0 Block           = dword ptr  4
.text:004061D0 Size            = dword ptr  8
.text:004061D0
.text:004061D0                 jmp     ds:__imp_realloc
.text:004061D0 realloc         endp
.text:004061D0
.text:004061D0 ; ---------------------------------------------------------------------------
.text:004061D6                 align 10h
.text:004061E0
.text:004061E0 ; =============== S U B R O U T I N E =======================================
.text:004061E0
.text:004061E0 ; Attributes: thunk
.text:004061E0
.text:004061E0 ; void *__cdecl malloc(size_t Size)
.text:004061E0 malloc          proc near               ; CODE XREF: .text:00403C74↑p
.text:004061E0                                         ; sub_403C90+E↑p ...
.text:004061E0
.text:004061E0 Size            = dword ptr  4
.text:004061E0
.text:004061E0                 jmp     ds:__imp_malloc
.text:004061E0 malloc          endp
.text:004061E0
.text:004061E0 ; ---------------------------------------------------------------------------
.text:004061E6                 align 10h
.text:004061F0
.text:004061F0 ; =============== S U B R O U T I N E =======================================
.text:004061F0
.text:004061F0 ; Attributes: thunk
.text:004061F0
.text:004061F0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004061F0 iswctype        proc near               ; CODE XREF: sub_403FB0+78B↑p
.text:004061F0
.text:004061F0 C               = word ptr  4
.text:004061F0 Type            = word ptr  8
.text:004061F0
.text:004061F0                 jmp     ds:__imp_iswctype
.text:004061F0 iswctype        endp
.text:004061F0
.text:004061F0 ; ---------------------------------------------------------------------------
.text:004061F6                 align 10h
.text:00406200
.text:00406200 ; =============== S U B R O U T I N E =======================================
.text:00406200
.text:00406200 ; Attributes: thunk
.text:00406200
.text:00406200 ; int __cdecl isctype(int C, int Type)
.text:00406200 _isctype        proc near               ; CODE XREF: sub_403FB0+610↑p
.text:00406200                                         ; _strtoll+6B↑p ...
.text:00406200
.text:00406200 C               = dword ptr  4
.text:00406200 Type            = dword ptr  8
.text:00406200
.text:00406200                 jmp     ds:__imp__isctype
.text:00406200 _isctype        endp
.text:00406200
.text:00406200 ; ---------------------------------------------------------------------------
.text:00406206                 align 10h
.text:00406210
.text:00406210 ; =============== S U B R O U T I N E =======================================
.text:00406210
.text:00406210 ; Attributes: thunk
.text:00406210
.text:00406210 ; int __cdecl fflush(FILE *Stream)
.text:00406210 fflush          proc near               ; CODE XREF: sub_405370+19↑p
.text:00406210                                         ; sub_405370+81↑p ...
.text:00406210
.text:00406210 Stream          = dword ptr  4
.text:00406210
.text:00406210                 jmp     ds:__imp_fflush
.text:00406210 fflush          endp
.text:00406210
.text:00406210 ; ---------------------------------------------------------------------------
.text:00406216                 align 10h
.text:00406220
.text:00406220 ; =============== S U B R O U T I N E =======================================
.text:00406220
.text:00406220 ; Attributes: thunk
.text:00406220
.text:00406220 ; char *__cdecl strerror(int ErrorMessage)
.text:00406220 strerror        proc near               ; CODE XREF: sub_405370+A5↑p
.text:00406220                                         ; sub_405474+10F↑p
.text:00406220
.text:00406220 ErrorMessage    = dword ptr  4
.text:00406220
.text:00406220                 jmp     ds:__imp_strerror
.text:00406220 strerror        endp
.text:00406220
.text:00406220 ; ---------------------------------------------------------------------------
.text:00406226                 align 10h
.text:00406230
.text:00406230 ; =============== S U B R O U T I N E =======================================
.text:00406230
.text:00406230 ; Attributes: thunk
.text:00406230
.text:00406230 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00406230 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00406230
.text:00406230 lpTopLevelExceptionFilter= dword ptr  4
.text:00406230
.text:00406230                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00406230 SetUnhandledExceptionFilter endp
.text:00406230
.text:00406230 ; ---------------------------------------------------------------------------
.text:00406236                 align 10h
.text:00406240
.text:00406240 ; =============== S U B R O U T I N E =======================================
.text:00406240
.text:00406240 ; Attributes: noreturn thunk
.text:00406240
.text:00406240 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00406240 ExitProcess     proc near               ; CODE XREF: sub_401080+F4↑p
.text:00406240
.text:00406240 uExitCode       = dword ptr  4
.text:00406240
.text:00406240                 jmp     ds:__imp_ExitProcess
.text:00406240 ExitProcess     endp
.text:00406240
.text:00406240 ; ---------------------------------------------------------------------------
.text:00406246                 align 10h
.text:00406250
.text:00406250 ; =============== S U B R O U T I N E =======================================
.text:00406250
.text:00406250 ; Attributes: thunk
.text:00406250
.text:00406250 ; HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
.text:00406250 OpenProcess     proc near               ; CODE XREF: sub_405610+2C↑p
.text:00406250
.text:00406250 dwDesiredAccess = dword ptr  4
.text:00406250 bInheritHandle  = dword ptr  8
.text:00406250 dwProcessId     = dword ptr  0Ch
.text:00406250
.text:00406250                 jmp     ds:__imp_OpenProcess
.text:00406250 OpenProcess     endp
.text:00406250
.text:00406250 ; ---------------------------------------------------------------------------
.text:00406256                 align 10h
.text:00406260
.text:00406260 ; =============== S U B R O U T I N E =======================================
.text:00406260
.text:00406260 ; Attributes: thunk
.text:00406260
.text:00406260 ; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT uExitCode)
.text:00406260 TerminateProcess proc near              ; CODE XREF: sub_405610+BB↑p
.text:00406260
.text:00406260 hProcess        = dword ptr  4
.text:00406260 uExitCode       = dword ptr  8
.text:00406260
.text:00406260                 jmp     ds:__imp_TerminateProcess
.text:00406260 TerminateProcess endp
.text:00406260
.text:00406260 ; ---------------------------------------------------------------------------
.text:00406266                 align 10h
.text:00406270
.text:00406270 ; =============== S U B R O U T I N E =======================================
.text:00406270
.text:00406270 ; Attributes: thunk
.text:00406270
.text:00406270 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00406270 CloseHandle     proc near               ; CODE XREF: sub_405610+D3↑p
.text:00406270
.text:00406270 hObject         = dword ptr  4
.text:00406270
.text:00406270                 jmp     ds:__imp_CloseHandle
.text:00406270 CloseHandle     endp
.text:00406270
.text:00406270 ; ---------------------------------------------------------------------------
.text:00406276                 align 10h
.text:00406280
.text:00406280 ; =============== S U B R O U T I N E =======================================
.text:00406280
.text:00406280 ; Attributes: thunk
.text:00406280
.text:00406280 ; DWORD __stdcall GetLastError()
.text:00406280 GetLastError    proc near               ; CODE XREF: sub_4059D0+3↑p
.text:00406280                 jmp     ds:__imp_GetLastError
.text:00406280 GetLastError    endp
.text:00406280
.text:00406280 ; ---------------------------------------------------------------------------
.text:00406286                 align 10h
.text:00406290
.text:00406290 ; =============== S U B R O U T I N E =======================================
.text:00406290
.text:00406290 ; Attributes: bp-based frame
.text:00406290
.text:00406290 sub_406290      proc near               ; CODE XREF: _strtoll+18D↑p
.text:00406290
.text:00406290 var_2C          = dword ptr -2Ch
.text:00406290 var_28          = dword ptr -28h
.text:00406290 var_24          = dword ptr -24h
.text:00406290 var_20          = dword ptr -20h
.text:00406290 var_1C          = dword ptr -1Ch
.text:00406290 var_14          = dword ptr -14h
.text:00406290 arg_0           = dword ptr  8
.text:00406290 arg_4           = dword ptr  0Ch
.text:00406290 arg_8           = dword ptr  10h
.text:00406290 arg_C           = dword ptr  14h
.text:00406290
.text:00406290                 push    ebp
.text:00406291                 mov     ebp, esp
.text:00406293                 push    edi
.text:00406294                 push    esi
.text:00406295                 push    ebx
.text:00406296                 sub     esp, 24h
.text:00406299                 mov     ebx, [ebp+arg_4]
.text:0040629C                 mov     [ebp+var_20], 0
.text:004062A3                 mov     ecx, [ebp+arg_0]
.text:004062A6                 mov     eax, [ebp+arg_8]
.text:004062A9                 mov     [ebp+var_1C], 0
.text:004062B0                 test    ebx, ebx
.text:004062B2                 mov     edx, [ebp+arg_C]
.text:004062B5                 mov     [ebp+var_14], 0
.text:004062BC                 js      loc_4063D0
.text:004062C2
.text:004062C2 loc_4062C2:                             ; CODE XREF: sub_406290+14E↓j
.text:004062C2                 test    edx, edx
.text:004062C4                 js      loc_4063C0
.text:004062CA
.text:004062CA loc_4062CA:                             ; CODE XREF: sub_406290+13A↓j
.text:004062CA                 mov     [ebp+var_24], ecx
.text:004062CD                 test    edx, edx
.text:004062CF                 mov     esi, eax
.text:004062D1                 jnz     short loc_406326
.text:004062D3                 cmp     eax, ebx
.text:004062D5                 jbe     short loc_406304
.text:004062D7                 mov     eax, ecx
.text:004062D9                 mov     edx, ebx
.text:004062DB                 div     esi
.text:004062DD                 mov     edi, eax
.text:004062DF                 nop
.text:004062E0
.text:004062E0 loc_4062E0:                             ; CODE XREF: sub_406290+9C↓j
.text:004062E0                                         ; sub_406290+B4↓j ...
.text:004062E0                 xor     ecx, ecx
.text:004062E2
.text:004062E2 loc_4062E2:                             ; CODE XREF: sub_406290+94↓j
.text:004062E2                 mov     [ebp+var_1C], ecx
.text:004062E5                 mov     ecx, [ebp+var_14]
.text:004062E8                 mov     [ebp+var_20], edi
.text:004062EB                 mov     eax, [ebp+var_20]
.text:004062EE                 mov     edx, [ebp+var_1C]
.text:004062F1                 test    ecx, ecx
.text:004062F3                 jz      short loc_4062FC
.text:004062F5                 neg     eax
.text:004062F7                 adc     edx, 0
.text:004062FA                 neg     edx
.text:004062FC
.text:004062FC loc_4062FC:                             ; CODE XREF: sub_406290+63↑j
.text:004062FC                 add     esp, 24h
.text:004062FF                 pop     ebx
.text:00406300                 pop     esi
.text:00406301                 pop     edi
.text:00406302                 pop     ebp
.text:00406303                 retn
.text:00406304 ; ---------------------------------------------------------------------------
.text:00406304
.text:00406304 loc_406304:                             ; CODE XREF: sub_406290+45↑j
.text:00406304                 test    eax, eax
.text:00406306                 jnz     short loc_406315
.text:00406308                 mov     eax, 1
.text:0040630D                 xor     ecx, ecx
.text:0040630F                 xor     edx, edx
.text:00406311                 div     ecx
.text:00406313                 mov     esi, eax
.text:00406315
.text:00406315 loc_406315:                             ; CODE XREF: sub_406290+76↑j
.text:00406315                 mov     eax, ebx
.text:00406317                 xor     edx, edx
.text:00406319                 div     esi
.text:0040631B                 mov     ecx, eax
.text:0040631D                 mov     eax, [ebp+var_24]
.text:00406320                 div     esi
.text:00406322                 mov     edi, eax
.text:00406324                 jmp     short loc_4062E2
.text:00406326 ; ---------------------------------------------------------------------------
.text:00406326
.text:00406326 loc_406326:                             ; CODE XREF: sub_406290+41↑j
.text:00406326                 cmp     edx, ebx
.text:00406328                 jbe     short loc_406330
.text:0040632A                 xor     edi, edi
.text:0040632C                 jmp     short loc_4062E0
.text:0040632C ; ---------------------------------------------------------------------------
.text:0040632E                 align 10h
.text:00406330
.text:00406330 loc_406330:                             ; CODE XREF: sub_406290+98↑j
.text:00406330                 bsr     eax, edx
.text:00406333                 xor     eax, 1Fh
.text:00406336                 mov     [ebp+var_28], eax
.text:00406339                 jnz     short loc_406350
.text:0040633B                 cmp     ebx, edx
.text:0040633D                 ja      short loc_406346
.text:0040633F                 xor     edi, edi
.text:00406341                 cmp     [ebp+var_24], esi
.text:00406344                 jb      short loc_4062E0
.text:00406346
.text:00406346 loc_406346:                             ; CODE XREF: sub_406290+AD↑j
.text:00406346                 mov     edi, 1
.text:0040634B                 jmp     short loc_4062E0
.text:0040634B ; ---------------------------------------------------------------------------
.text:0040634D                 align 10h
.text:00406350
.text:00406350 loc_406350:                             ; CODE XREF: sub_406290+A9↑j
.text:00406350                 mov     eax, [ebp+var_28]
.text:00406353                 mov     ecx, 20h ; ' '
.text:00406358                 sub     ecx, eax
.text:0040635A                 mov     [ebp+var_2C], ecx
.text:0040635D                 mov     eax, esi
.text:0040635F                 movzx   ecx, byte ptr [ebp+var_28]
.text:00406363                 shl     edx, cl
.text:00406365                 mov     edi, edx
.text:00406367                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040636B                 mov     edx, ebx
.text:0040636D                 shr     eax, cl
.text:0040636F                 movzx   ecx, byte ptr [ebp+var_28]
.text:00406373                 or      edi, eax
.text:00406375                 mov     eax, [ebp+var_24]
.text:00406378                 shl     esi, cl
.text:0040637A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040637E                 shr     edx, cl
.text:00406380                 movzx   ecx, byte ptr [ebp+var_28]
.text:00406384                 shl     ebx, cl
.text:00406386                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040638A                 shr     eax, cl
.text:0040638C                 or      ebx, eax
.text:0040638E                 movzx   ecx, byte ptr [ebp+var_28]
.text:00406392                 mov     eax, ebx
.text:00406394                 div     edi
.text:00406396                 mov     ebx, edx
.text:00406398                 mov     edi, eax
.text:0040639A                 shl     [ebp+var_24], cl
.text:0040639D                 mul     esi
.text:0040639F                 cmp     edx, ebx
.text:004063A1                 ja      short loc_4063B4
.text:004063A3                 cmp     edx, ebx
.text:004063A5                 jnz     loc_4062E0
.text:004063AB                 cmp     eax, [ebp+var_24]
.text:004063AE                 jbe     loc_4062E0
.text:004063B4
.text:004063B4 loc_4063B4:                             ; CODE XREF: sub_406290+111↑j
.text:004063B4                 dec     edi
.text:004063B5                 jmp     loc_4062E0
.text:004063B5 ; ---------------------------------------------------------------------------
.text:004063BA                 align 10h
.text:004063C0
.text:004063C0 loc_4063C0:                             ; CODE XREF: sub_406290+34↑j
.text:004063C0                 not     [ebp+var_14]
.text:004063C3                 neg     eax
.text:004063C5                 adc     edx, 0
.text:004063C8                 neg     edx
.text:004063CA                 jmp     loc_4062CA
.text:004063CA ; ---------------------------------------------------------------------------
.text:004063CF                 align 10h
.text:004063D0
.text:004063D0 loc_4063D0:                             ; CODE XREF: sub_406290+2C↑j
.text:004063D0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:004063D7                 neg     ecx
.text:004063D9                 adc     ebx, 0
.text:004063DC                 neg     ebx
.text:004063DE                 jmp     loc_4062C2
.text:004063DE sub_406290      endp
.text:004063DE
.text:004063DE ; ---------------------------------------------------------------------------
.text:004063E3                 align 10h
.text:004063F0 dword_4063F0    dd 0FFFFFFFFh           ; DATA XREF: .text:00405A79↑r
.text:004063F0                                         ; .text:loc_405AA0↑r ...
.text:004063F4 dword_4063F4    dd 0                    ; DATA XREF: .text:loc_405AAC↑r
.text:004063F4                                         ; sub_405AD0:loc_405B1D↑r
.text:004063F8                 dd 0FFFFFFFFh
.text:004063FC dword_4063FC    dd 0                    ; DATA XREF: .data:off_407104↓o
.text:00406400                 dd 300h dup(?)
.text:00406400 _text           ends
.text:00406400
.data:00407000 ; Section 2. (virtual address 00007000)
.data:00407000 ; Virtual size                  : 00000120 (    288.)
.data:00407000 ; Section size in file          : 00000200 (    512.)
.data:00407000 ; Offset to raw data for section: 00005800
.data:00407000 ; Flags C0000040: Data Readable Writable
.data:00407000 ; Alignment     : default
.data:00407000 ; ===========================================================================
.data:00407000
.data:00407000 ; Segment type: Pure data
.data:00407000 ; Segment permissions: Read/Write
.data:00407000 _data           segment para public 'DATA' use32
.data:00407000                 assume cs:_data
.data:00407000                 ;org 407000h
.data:00407000 dword_407000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00407000                                         ; sub_401080+CC↑r
.data:00407004 dword_407004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00407004                                         ; sub_401080+D4↑r
.data:00407008                 align 10h
.data:00407010 dword_407010    dd 1                    ; DATA XREF: sub_4018B0+E4↑r
.data:00407010                                         ; sub_4018B0+1D2↑r ...
.data:00407014 dword_407014    dd 1                    ; DATA XREF: sub_4030C0+11↑r
.data:00407014                                         ; .text:00403161↑r
.data:00407018 dword_407018    dd 3Fh                  ; DATA XREF: sub_4030C0+7D↑w
.data:00407018                                         ; .text:004031CD↑w
.data:0040701C                 align 10h
.data:00407020 ; char *Buffer
.data:00407020 Buffer          dd offset aCopyrightC2005
.data:00407020                                         ; DATA XREF: sub_4035F0+DC↑r
.data:00407020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00407024                 align 10h
.data:00407030 dword_407030    dd 2                    ; DATA XREF: sub_403A60+3↑o
.data:00407030                                         ; sub_403B10:loc_403C12↑r
.data:00407034 ; char Str1[4]
.data:00407034 Str1            db 'INT',0              ; DATA XREF: sub_403A60+6E↑o
.data:00407034                                         ; sub_403B10+1C↑o
.data:00407038                 db    0
.data:00407039                 db    0
.data:0040703A                 db    0
.data:0040703B                 db    0
.data:0040703C                 db    4
.data:0040703D                 db    0
.data:0040703E                 db    0
.data:0040703F                 db    0
.data:00407040                 db  49h ; I
.data:00407041                 db  4Ch ; L
.data:00407042                 db  4Ch ; L
.data:00407043                 db    0
.data:00407044                 db    0
.data:00407045                 db    0
.data:00407046                 db    0
.data:00407047                 db    0
.data:00407048                 db  16h
.data:00407049                 db    0
.data:0040704A                 db    0
.data:0040704B                 db    0
.data:0040704C                 db  41h ; A
.data:0040704D                 db  42h ; B
.data:0040704E                 db  52h ; R
.data:0040704F                 db  54h ; T
.data:00407050                 db    0
.data:00407051                 db    0
.data:00407052                 db    0
.data:00407053                 db    0
.data:00407054                 db    8
.data:00407055                 db    0
.data:00407056                 db    0
.data:00407057                 db    0
.data:00407058                 db  46h ; F
.data:00407059                 db  50h ; P
.data:0040705A                 db  45h ; E
.data:0040705B                 db    0
.data:0040705C                 db    0
.data:0040705D                 db    0
.data:0040705E                 db    0
.data:0040705F                 db    0
.data:00407060                 db    9
.data:00407061                 db    0
.data:00407062                 db    0
.data:00407063                 db    0
.data:00407064                 db  4Bh ; K
.data:00407065                 db  49h ; I
.data:00407066                 db  4Ch ; L
.data:00407067                 db  4Ch ; L
.data:00407068                 db    0
.data:00407069                 db    0
.data:0040706A                 db    0
.data:0040706B                 db    0
.data:0040706C                 db  0Bh
.data:0040706D                 db    0
.data:0040706E                 db    0
.data:0040706F                 db    0
.data:00407070                 db  53h ; S
.data:00407071                 db  45h ; E
.data:00407072                 db  47h ; G
.data:00407073                 db  56h ; V
.data:00407074                 db    0
.data:00407075                 db    0
.data:00407076                 db    0
.data:00407077                 db    0
.data:00407078                 db  0Fh
.data:00407079                 db    0
.data:0040707A                 db    0
.data:0040707B                 db    0
.data:0040707C                 db  54h ; T
.data:0040707D                 db  45h ; E
.data:0040707E                 db  52h ; R
.data:0040707F                 db  4Dh ; M
.data:00407080                 db    0
.data:00407081                 db    0
.data:00407082                 db    0
.data:00407083                 db    0
.data:00407084                 db  11h
.data:00407085                 db    0
.data:00407086                 db    0
.data:00407087                 db    0
.data:00407088                 db  43h ; C
.data:00407089                 db  48h ; H
.data:0040708A                 db  4Ch ; L
.data:0040708B                 db  44h ; D
.data:0040708C                 db    0
.data:0040708D                 db    0
.data:0040708E                 db    0
.data:0040708F                 db    0
.data:00407090                 db    0
.data:00407091                 db    0
.data:00407092                 db    0
.data:00407093                 db    0
.data:00407094                 db  45h ; E
.data:00407095                 db  58h ; X
.data:00407096                 db  49h ; I
.data:00407097                 db  54h ; T
.data:00407098                 db    0
.data:00407099                 db    0
.data:0040709A                 db    0
.data:0040709B                 db    0
.data:0040709C                 db    0
.data:0040709D                 db    0
.data:0040709E                 db    0
.data:0040709F                 db    0
.data:004070A0                 db    0
.data:004070A1                 db    0
.data:004070A2                 db    0
.data:004070A3                 db    0
.data:004070A4                 db    0
.data:004070A5                 db    0
.data:004070A6                 db    0
.data:004070A7                 db    0
.data:004070A8                 db    0
.data:004070A9                 db    0
.data:004070AA                 db    0
.data:004070AB                 db    0
.data:004070AC                 db    0
.data:004070AD                 db    0
.data:004070AE                 db    0
.data:004070AF                 db    0
.data:004070B0 ; int Code
.data:004070B0 Code            dd 1                    ; DATA XREF: sub_403970+6D↑r
.data:004070B0                                         ; sub_403970+9A↑r ...
.data:004070B4                 align 10h
.data:004070C0 dword_4070C0    dd 1                    ; DATA XREF: sub_4050F0+22↑r
.data:004070C0                                         ; sub_4050F0+65↑r ...
.data:004070C4 dword_4070C4    dd 100h                 ; DATA XREF: sub_4050F0+3F↑o
.data:004070C4                                         ; sub_4050F0+1A2↑r ...
.data:004070C8 off_4070C8      dd offset unk_408040    ; DATA XREF: sub_4050F0+1AA↑r
.data:004070CC ; void *off_4070CC
.data:004070CC off_4070CC      dd offset dword_4070C4  ; DATA XREF: sub_4050F0+39↑r
.data:004070CC                                         ; sub_4050F0+60↑w ...
.data:004070D0 dword_4070D0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004070D4                 align 10h
.data:004070E0 ; int Mode
.data:004070E0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004070E0                                         ; sub_401080+80↑r ...
.data:004070E4                 align 10h
.data:004070F0 dword_4070F0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004070F0                                         ; sub_401080+BA↑r
.data:004070F4                 align 10h
.data:00407100 dword_407100    dd 0                    ; DATA XREF: sub_405AD0+9↑r
.data:00407100                                         ; sub_405AD0+1D↑w
.data:00407104 off_407104      dd offset dword_4063FC  ; DATA XREF: sub_405A40+6↑r
.data:00407104                                         ; sub_405A40+17↑r ...
.data:00407108                 align 1000h
.data:00407108 _data           ends
.data:00407108
.bss:00408000 ; Section 3. (virtual address 00008000)
.bss:00408000 ; Virtual size                  : 00000230 (    560.)
.bss:00408000 ; Section size in file          : 00000000 (      0.)
.bss:00408000 ; Offset to raw data for section: 00000000
.bss:00408000 ; Flags C0000080: Bss Readable Writable
.bss:00408000 ; Alignment     : default
.bss:00408000 ; ===========================================================================
.bss:00408000
.bss:00408000 ; Segment type: Uninitialized
.bss:00408000 ; Segment permissions: Read/Write
.bss:00408000 _bss            segment para public 'BSS' use32
.bss:00408000                 assume cs:_bss
.bss:00408000                 ;org 408000h
.bss:00408000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00408000 dword_408000    dd ?                    ; DATA XREF: sub_4030C0+9↑o
.bss:00408000                                         ; sub_4030C0+17↑w ...
.bss:00408004 dword_408004    dd ?                    ; DATA XREF: sub_4030C0+21↑w
.bss:00408004                                         ; .text:00403179↑w
.bss:00408008 dword_408008    dd ?                    ; DATA XREF: sub_4030C0+77↑r
.bss:00408008                                         ; .text:004031C7↑r
.bss:0040800C dword_40800C    dd ?                    ; DATA XREF: sub_4030C0+6B↑r
.bss:0040800C                                         ; .text:004031BB↑r
.bss:00408010                 db    ? ;
.bss:00408011                 db    ? ;
.bss:00408012                 db    ? ;
.bss:00408013                 db    ? ;
.bss:00408014                 db    ? ;
.bss:00408015                 db    ? ;
.bss:00408016                 db    ? ;
.bss:00408017                 db    ? ;
.bss:00408018                 db    ? ;
.bss:00408019                 db    ? ;
.bss:0040801A                 db    ? ;
.bss:0040801B                 db    ? ;
.bss:0040801C                 db    ? ;
.bss:0040801D                 db    ? ;
.bss:0040801E                 db    ? ;
.bss:0040801F                 db    ? ;
.bss:00408020                 db    ? ;
.bss:00408021                 db    ? ;
.bss:00408022                 db    ? ;
.bss:00408023                 db    ? ;
.bss:00408024                 db    ? ;
.bss:00408025                 db    ? ;
.bss:00408026                 db    ? ;
.bss:00408027                 db    ? ;
.bss:00408028                 db    ? ;
.bss:00408029                 db    ? ;
.bss:0040802A                 db    ? ;
.bss:0040802B                 db    ? ;
.bss:0040802C                 db    ? ;
.bss:0040802D                 db    ? ;
.bss:0040802E                 db    ? ;
.bss:0040802F                 db    ? ;
.bss:00408030 ; char *dword_408030
.bss:00408030 dword_408030    dd ?                    ; DATA XREF: .text:00403944↑w
.bss:00408030                                         ; sub_403970+58↑r
.bss:00408034                 align 10h
.bss:00408040 unk_408040      db    ? ;               ; DATA XREF: sub_4050F0+100↑o
.bss:00408040                                         ; .data:off_4070C8↑o
.bss:00408041                 db    ? ;
.bss:00408042                 db    ? ;
.bss:00408043                 db    ? ;
.bss:00408044                 db    ? ;
.bss:00408045                 db    ? ;
.bss:00408046                 db    ? ;
.bss:00408047                 db    ? ;
.bss:00408048                 db    ? ;
.bss:00408049                 db    ? ;
.bss:0040804A                 db    ? ;
.bss:0040804B                 db    ? ;
.bss:0040804C                 db    ? ;
.bss:0040804D                 db    ? ;
.bss:0040804E                 db    ? ;
.bss:0040804F                 db    ? ;
.bss:00408050                 db    ? ;
.bss:00408051                 db    ? ;
.bss:00408052                 db    ? ;
.bss:00408053                 db    ? ;
.bss:00408054                 db    ? ;
.bss:00408055                 db    ? ;
.bss:00408056                 db    ? ;
.bss:00408057                 db    ? ;
.bss:00408058                 db    ? ;
.bss:00408059                 db    ? ;
.bss:0040805A                 db    ? ;
.bss:0040805B                 db    ? ;
.bss:0040805C                 db    ? ;
.bss:0040805D                 db    ? ;
.bss:0040805E                 db    ? ;
.bss:0040805F                 db    ? ;
.bss:00408060                 db    ? ;
.bss:00408061                 db    ? ;
.bss:00408062                 db    ? ;
.bss:00408063                 db    ? ;
.bss:00408064                 db    ? ;
.bss:00408065                 db    ? ;
.bss:00408066                 db    ? ;
.bss:00408067                 db    ? ;
.bss:00408068                 db    ? ;
.bss:00408069                 db    ? ;
.bss:0040806A                 db    ? ;
.bss:0040806B                 db    ? ;
.bss:0040806C                 db    ? ;
.bss:0040806D                 db    ? ;
.bss:0040806E                 db    ? ;
.bss:0040806F                 db    ? ;
.bss:00408070                 db    ? ;
.bss:00408071                 db    ? ;
.bss:00408072                 db    ? ;
.bss:00408073                 db    ? ;
.bss:00408074                 db    ? ;
.bss:00408075                 db    ? ;
.bss:00408076                 db    ? ;
.bss:00408077                 db    ? ;
.bss:00408078                 db    ? ;
.bss:00408079                 db    ? ;
.bss:0040807A                 db    ? ;
.bss:0040807B                 db    ? ;
.bss:0040807C                 db    ? ;
.bss:0040807D                 db    ? ;
.bss:0040807E                 db    ? ;
.bss:0040807F                 db    ? ;
.bss:00408080                 db    ? ;
.bss:00408081                 db    ? ;
.bss:00408082                 db    ? ;
.bss:00408083                 db    ? ;
.bss:00408084                 db    ? ;
.bss:00408085                 db    ? ;
.bss:00408086                 db    ? ;
.bss:00408087                 db    ? ;
.bss:00408088                 db    ? ;
.bss:00408089                 db    ? ;
.bss:0040808A                 db    ? ;
.bss:0040808B                 db    ? ;
.bss:0040808C                 db    ? ;
.bss:0040808D                 db    ? ;
.bss:0040808E                 db    ? ;
.bss:0040808F                 db    ? ;
.bss:00408090                 db    ? ;
.bss:00408091                 db    ? ;
.bss:00408092                 db    ? ;
.bss:00408093                 db    ? ;
.bss:00408094                 db    ? ;
.bss:00408095                 db    ? ;
.bss:00408096                 db    ? ;
.bss:00408097                 db    ? ;
.bss:00408098                 db    ? ;
.bss:00408099                 db    ? ;
.bss:0040809A                 db    ? ;
.bss:0040809B                 db    ? ;
.bss:0040809C                 db    ? ;
.bss:0040809D                 db    ? ;
.bss:0040809E                 db    ? ;
.bss:0040809F                 db    ? ;
.bss:004080A0                 db    ? ;
.bss:004080A1                 db    ? ;
.bss:004080A2                 db    ? ;
.bss:004080A3                 db    ? ;
.bss:004080A4                 db    ? ;
.bss:004080A5                 db    ? ;
.bss:004080A6                 db    ? ;
.bss:004080A7                 db    ? ;
.bss:004080A8                 db    ? ;
.bss:004080A9                 db    ? ;
.bss:004080AA                 db    ? ;
.bss:004080AB                 db    ? ;
.bss:004080AC                 db    ? ;
.bss:004080AD                 db    ? ;
.bss:004080AE                 db    ? ;
.bss:004080AF                 db    ? ;
.bss:004080B0                 db    ? ;
.bss:004080B1                 db    ? ;
.bss:004080B2                 db    ? ;
.bss:004080B3                 db    ? ;
.bss:004080B4                 db    ? ;
.bss:004080B5                 db    ? ;
.bss:004080B6                 db    ? ;
.bss:004080B7                 db    ? ;
.bss:004080B8                 db    ? ;
.bss:004080B9                 db    ? ;
.bss:004080BA                 db    ? ;
.bss:004080BB                 db    ? ;
.bss:004080BC                 db    ? ;
.bss:004080BD                 db    ? ;
.bss:004080BE                 db    ? ;
.bss:004080BF                 db    ? ;
.bss:004080C0                 db    ? ;
.bss:004080C1                 db    ? ;
.bss:004080C2                 db    ? ;
.bss:004080C3                 db    ? ;
.bss:004080C4                 db    ? ;
.bss:004080C5                 db    ? ;
.bss:004080C6                 db    ? ;
.bss:004080C7                 db    ? ;
.bss:004080C8                 db    ? ;
.bss:004080C9                 db    ? ;
.bss:004080CA                 db    ? ;
.bss:004080CB                 db    ? ;
.bss:004080CC                 db    ? ;
.bss:004080CD                 db    ? ;
.bss:004080CE                 db    ? ;
.bss:004080CF                 db    ? ;
.bss:004080D0                 db    ? ;
.bss:004080D1                 db    ? ;
.bss:004080D2                 db    ? ;
.bss:004080D3                 db    ? ;
.bss:004080D4                 db    ? ;
.bss:004080D5                 db    ? ;
.bss:004080D6                 db    ? ;
.bss:004080D7                 db    ? ;
.bss:004080D8                 db    ? ;
.bss:004080D9                 db    ? ;
.bss:004080DA                 db    ? ;
.bss:004080DB                 db    ? ;
.bss:004080DC                 db    ? ;
.bss:004080DD                 db    ? ;
.bss:004080DE                 db    ? ;
.bss:004080DF                 db    ? ;
.bss:004080E0                 db    ? ;
.bss:004080E1                 db    ? ;
.bss:004080E2                 db    ? ;
.bss:004080E3                 db    ? ;
.bss:004080E4                 db    ? ;
.bss:004080E5                 db    ? ;
.bss:004080E6                 db    ? ;
.bss:004080E7                 db    ? ;
.bss:004080E8                 db    ? ;
.bss:004080E9                 db    ? ;
.bss:004080EA                 db    ? ;
.bss:004080EB                 db    ? ;
.bss:004080EC                 db    ? ;
.bss:004080ED                 db    ? ;
.bss:004080EE                 db    ? ;
.bss:004080EF                 db    ? ;
.bss:004080F0                 db    ? ;
.bss:004080F1                 db    ? ;
.bss:004080F2                 db    ? ;
.bss:004080F3                 db    ? ;
.bss:004080F4                 db    ? ;
.bss:004080F5                 db    ? ;
.bss:004080F6                 db    ? ;
.bss:004080F7                 db    ? ;
.bss:004080F8                 db    ? ;
.bss:004080F9                 db    ? ;
.bss:004080FA                 db    ? ;
.bss:004080FB                 db    ? ;
.bss:004080FC                 db    ? ;
.bss:004080FD                 db    ? ;
.bss:004080FE                 db    ? ;
.bss:004080FF                 db    ? ;
.bss:00408100                 db    ? ;
.bss:00408101                 db    ? ;
.bss:00408102                 db    ? ;
.bss:00408103                 db    ? ;
.bss:00408104                 db    ? ;
.bss:00408105                 db    ? ;
.bss:00408106                 db    ? ;
.bss:00408107                 db    ? ;
.bss:00408108                 db    ? ;
.bss:00408109                 db    ? ;
.bss:0040810A                 db    ? ;
.bss:0040810B                 db    ? ;
.bss:0040810C                 db    ? ;
.bss:0040810D                 db    ? ;
.bss:0040810E                 db    ? ;
.bss:0040810F                 db    ? ;
.bss:00408110                 db    ? ;
.bss:00408111                 db    ? ;
.bss:00408112                 db    ? ;
.bss:00408113                 db    ? ;
.bss:00408114                 db    ? ;
.bss:00408115                 db    ? ;
.bss:00408116                 db    ? ;
.bss:00408117                 db    ? ;
.bss:00408118                 db    ? ;
.bss:00408119                 db    ? ;
.bss:0040811A                 db    ? ;
.bss:0040811B                 db    ? ;
.bss:0040811C                 db    ? ;
.bss:0040811D                 db    ? ;
.bss:0040811E                 db    ? ;
.bss:0040811F                 db    ? ;
.bss:00408120                 db    ? ;
.bss:00408121                 db    ? ;
.bss:00408122                 db    ? ;
.bss:00408123                 db    ? ;
.bss:00408124                 db    ? ;
.bss:00408125                 db    ? ;
.bss:00408126                 db    ? ;
.bss:00408127                 db    ? ;
.bss:00408128                 db    ? ;
.bss:00408129                 db    ? ;
.bss:0040812A                 db    ? ;
.bss:0040812B                 db    ? ;
.bss:0040812C                 db    ? ;
.bss:0040812D                 db    ? ;
.bss:0040812E                 db    ? ;
.bss:0040812F                 db    ? ;
.bss:00408130                 db    ? ;
.bss:00408131                 db    ? ;
.bss:00408132                 db    ? ;
.bss:00408133                 db    ? ;
.bss:00408134                 db    ? ;
.bss:00408135                 db    ? ;
.bss:00408136                 db    ? ;
.bss:00408137                 db    ? ;
.bss:00408138                 db    ? ;
.bss:00408139                 db    ? ;
.bss:0040813A                 db    ? ;
.bss:0040813B                 db    ? ;
.bss:0040813C                 db    ? ;
.bss:0040813D                 db    ? ;
.bss:0040813E                 db    ? ;
.bss:0040813F                 db    ? ;
.bss:00408140 dword_408140    dd ?                    ; DATA XREF: .text:loc_404A81↑o
.bss:00408140                                         ; .text:loc_404AA0↑o ...
.bss:00408144 dword_408144    dd ?                    ; DATA XREF: .text:loc_404B20↑o
.bss:00408144                                         ; .text:00404FA8↑r ...
.bss:00408148 dword_408148    dd ?                    ; DATA XREF: .text:00404FA2↑r
.bss:00408148                                         ; sub_405050+2C↑r
.bss:0040814C dword_40814C    dd ?                    ; DATA XREF: .text:00404F96↑r
.bss:0040814C                                         ; sub_405050+22↑r
.bss:00408150 dword_408150    dd ?                    ; DATA XREF: .text:00404FB2↑r
.bss:00408150                                         ; sub_405050+36↑r
.bss:00408154 dword_408154    dd ?                    ; DATA XREF: .text:00404FC2↑r
.bss:00408154                                         ; sub_405050+4E↑r
.bss:00408158 dword_408158    dd ?                    ; DATA XREF: .text:00404FDF↑r
.bss:00408158                                         ; sub_405050+62↑r
.bss:0040815C dword_40815C    dd ?                    ; DATA XREF: .text:00404FD5↑r
.bss:0040815C                                         ; sub_405050+70↑r
.bss:00408160 dword_408160    dd ?                    ; DATA XREF: .text:00404FB8↑r
.bss:00408160                                         ; sub_405050+7A↑r
.bss:00408164                 align 10h
.bss:00408170 ; char *dword_408170
.bss:00408170 dword_408170    dd ?                    ; DATA XREF: sub_405474:loc_4054AD↑w
.bss:00408170                                         ; sub_405474:loc_4055E0↑r
.bss:00408174                 align 10h
.bss:00408180 dword_408180    dd ?                    ; DATA XREF: sub_405474+2D↑r
.bss:00408180                                         ; sub_405474+3F↑w
.bss:00408184                 align 10h
.bss:00408190 dword_408190    dd ?                    ; DATA XREF: sub_4018B0+2C↑w
.bss:00408190                                         ; sub_4018B0+153↑r ...
.bss:00408194                 db    ? ;
.bss:00408195                 db    ? ;
.bss:00408196                 db    ? ;
.bss:00408197                 db    ? ;
.bss:00408198                 db    ? ;
.bss:00408199                 db    ? ;
.bss:0040819A                 db    ? ;
.bss:0040819B                 db    ? ;
.bss:0040819C                 db    ? ;
.bss:0040819D                 db    ? ;
.bss:0040819E                 db    ? ;
.bss:0040819F                 db    ? ;
.bss:004081A0                 db    ? ;
.bss:004081A1                 db    ? ;
.bss:004081A2                 db    ? ;
.bss:004081A3                 db    ? ;
.bss:004081A4                 db    ? ;
.bss:004081A5                 db    ? ;
.bss:004081A6                 db    ? ;
.bss:004081A7                 db    ? ;
.bss:004081A8                 db    ? ;
.bss:004081A9                 db    ? ;
.bss:004081AA                 db    ? ;
.bss:004081AB                 db    ? ;
.bss:004081AC                 db    ? ;
.bss:004081AD                 db    ? ;
.bss:004081AE                 db    ? ;
.bss:004081AF                 db    ? ;
.bss:004081B0 ; char dword_4081B0[]
.bss:004081B0 dword_4081B0    dd ?                    ; DATA XREF: sub_4018B0:loc_4019A3↑r
.bss:004081B0                                         ; sub_4018B0+113↑w ...
.bss:004081B4                 align 10h
.bss:004081C0 dword_4081C0    dd ?                    ; CODE XREF: sub_405474+63↑p
.bss:004081C0                                         ; DATA XREF: sub_405370+1E↑r ...
.bss:004081C4                 align 10h
.bss:004081D0 dword_4081D0    dd ?                    ; DATA XREF: sub_405370+4E↑w
.bss:004081D0                                         ; sub_405474+AB↑w
.bss:004081D4                 align 40h
.bss:00408200 dword_408200    dd ?                    ; DATA XREF: sub_405474+13↑r
.bss:00408204                 align 1000h
.bss:00408204 _bss            ends
.bss:00408204
.idata:00409000 ; Section 4. (virtual address 00009000)
.idata:00409000 ; Virtual size                  : 000005F4 (   1524.)
.idata:00409000 ; Section size in file          : 00000600 (   1536.)
.idata:00409000 ; Offset to raw data for section: 00005A00
.idata:00409000 ; Flags C0000040: Data Readable Writable
.idata:00409000 ; Alignment     : default
.idata:00409000 ; ===========================================================================
.idata:00409000
.idata:00409000 ; Segment type: Externs
.idata:00409000 ; _idata
.idata:00409000
.idata:00409001
.idata:00409154 ;
.idata:00409154 ; Imports from libintl3.dll
.idata:00409154 ;
.idata:00409154                 extrn __imp_libintl_bindtextdomain:dword
.idata:00409154                                         ; CODE XREF: sub_4018B0+55↑p
.idata:00409154                                         ; DATA XREF: sub_4018B0+55↑r ...
.idata:00409158                 extrn libintl_gettext:dword
.idata:00409158                                         ; CODE XREF: sub_4018B0+147↑p
.idata:00409158                                         ; sub_4018B0+17F↑p ...
.idata:0040915C                 extrn libintl_textdomain:dword
.idata:0040915C                                         ; CODE XREF: sub_4018B0+62↑p
.idata:0040915C                                         ; DATA XREF: sub_4018B0+62↑r ...
.idata:00409160
.idata:00409168 ;
.idata:00409168 ; Imports from KERNEL32.dll
.idata:00409168 ;
.idata:00409168 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:00409168                 extrn __imp_CloseHandle:dword
.idata:00409168                                         ; DATA XREF: CloseHandle↑r
.idata:0040916C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040916C                 extrn __imp_ExitProcess:dword
.idata:0040916C                                         ; DATA XREF: ExitProcess↑r
.idata:00409170 ; DWORD (__stdcall *GetLastError)()
.idata:00409170                 extrn __imp_GetLastError:dword
.idata:00409170                                         ; DATA XREF: GetLastError↑r
.idata:00409174 ; HANDLE (__stdcall *OpenProcess)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
.idata:00409174                 extrn __imp_OpenProcess:dword
.idata:00409174                                         ; DATA XREF: OpenProcess↑r
.idata:00409178 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00409178                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00409178                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040917C ; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
.idata:0040917C                 extrn __imp_TerminateProcess:dword
.idata:0040917C                                         ; DATA XREF: TerminateProcess↑r
.idata:00409180
.idata:00409188 ;
.idata:00409188 ; Imports from MSVCP60.DLL
.idata:00409188 ;
.idata:00409188 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00409188                 extrn __imp_mbrtowc:dword
.idata:00409188                                         ; DATA XREF: mbrtowc↑r
.idata:0040918C
.idata:00409194 ;
.idata:00409194 ; Imports from msvcrt.dll
.idata:00409194 ;
.idata:00409194                 extrn __imp___getmainargs:dword
.idata:00409194                                         ; DATA XREF: __getmainargs↑r
.idata:00409198 ; int _mb_cur_max
.idata:00409198                 extrn __mb_cur_max:dword
.idata:00409198                                         ; DATA XREF: sub_403FB0+7↑r
.idata:00409198                                         ; sub_403FB0+5F3↑r ...
.idata:0040919C ; char ***(__cdecl *__p__environ)()
.idata:0040919C                 extrn __imp___p__environ:dword
.idata:0040919C                                         ; DATA XREF: __p__environ↑r
.idata:004091A0 ; int *(__cdecl *__p__fmode)()
.idata:004091A0                 extrn __imp___p__fmode:dword
.idata:004091A0                                         ; DATA XREF: __p__fmode↑r
.idata:004091A4 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004091A4                 extrn __set_app_type:dword
.idata:004091A4                                         ; CODE XREF: start+D↑p
.idata:004091A4                                         ; .text:0040102D↑p
.idata:004091A4                                         ; DATA XREF: ...
.idata:004091A8 ; void (__cdecl *_cexit)()
.idata:004091A8                 extrn __imp__cexit:dword
.idata:004091A8                                         ; DATA XREF: _cexit↑r
.idata:004091AC ; int *(__cdecl *_errno)()
.idata:004091AC                 extrn __imp__errno:dword
.idata:004091AC                                         ; DATA XREF: _errno↑r
.idata:004091B0 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004091B0                 extrn __imp__flsbuf:dword
.idata:004091B0                                         ; DATA XREF: _flsbuf↑r
.idata:004091B4 ; FILE iob[]
.idata:004091B4                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004091B4                                         ; sub_401080+75↑r ...
.idata:004091B8 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004091B8                 extrn __imp__isctype:dword
.idata:004091B8                                         ; DATA XREF: _isctype↑r
.idata:004091BC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004091BC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004091BC                                         ; DATA XREF: .text:0040106C↑r
.idata:004091C0 ; const unsigned __int16 *pctype
.idata:004091C0                 extrn _pctype:dword     ; DATA XREF: sub_403FB0:loc_4046A4↑r
.idata:004091C0                                         ; _strtoll:loc_405E75↑r ...
.idata:004091C4 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004091C4                 extrn __imp__setmode:dword
.idata:004091C4                                         ; DATA XREF: _setmode↑r
.idata:004091C8 ; void (__cdecl __noreturn *abort)()
.idata:004091C8                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004091CC ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004091CC                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004091CC                                         ; DATA XREF: sub_401040+C↑r
.idata:004091D0 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004091D0                 extrn __imp_calloc:dword
.idata:004091D0                                         ; DATA XREF: calloc↑r
.idata:004091D4 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004091D4                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004091D8 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004091D8                 extrn __imp_fclose:dword
.idata:004091D8                                         ; DATA XREF: fclose↑r
.idata:004091DC ; int (__cdecl *fflush)(FILE *Stream)
.idata:004091DC                 extrn __imp_fflush:dword
.idata:004091DC                                         ; DATA XREF: fflush↑r
.idata:004091E0 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004091E0                 extrn __imp_fprintf:dword
.idata:004091E0                                         ; DATA XREF: fprintf↑r
.idata:004091E4 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004091E4                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004091E8 ; void (__cdecl *free)(void *Block)
.idata:004091E8                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004091EC ; char *(__cdecl *getenv)(const char *VarName)
.idata:004091EC                 extrn __imp_getenv:dword
.idata:004091EC                                         ; DATA XREF: getenv↑r
.idata:004091F0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004091F0                 extrn __imp_iswctype:dword
.idata:004091F0                                         ; DATA XREF: iswctype↑r
.idata:004091F4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004091F4                 extrn __imp_malloc:dword
.idata:004091F4                                         ; DATA XREF: malloc↑r
.idata:004091F8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004091F8                 extrn __imp_memcpy:dword
.idata:004091F8                                         ; DATA XREF: memcpy↑r
.idata:004091FC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004091FC                 extrn __imp_memset:dword
.idata:004091FC                                         ; DATA XREF: memset↑r
.idata:00409200 ; int (*printf)(const char *const Format, ...)
.idata:00409200                 extrn __imp_printf:dword
.idata:00409200                                         ; DATA XREF: printf↑r
.idata:00409204 ; int (__cdecl *puts)(const char *Buffer)
.idata:00409204                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:00409208 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00409208                 extrn __imp_realloc:dword
.idata:00409208                                         ; DATA XREF: realloc↑r
.idata:0040920C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040920C                 extrn __imp_setlocale:dword
.idata:0040920C                                         ; DATA XREF: setlocale↑r
.idata:00409210 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00409210                 extrn __imp_signal:dword
.idata:00409210                                         ; DATA XREF: signal↑r
.idata:00409214 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00409214                 extrn __imp_sprintf:dword
.idata:00409214                                         ; DATA XREF: sprintf↑r
.idata:00409218 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00409218                 extrn __imp_strchr:dword
.idata:00409218                                         ; DATA XREF: strchr↑r
.idata:0040921C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040921C                 extrn __imp_strcmp:dword
.idata:0040921C                                         ; DATA XREF: strcmp↑r
.idata:00409220 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00409220                 extrn __imp_strcpy:dword
.idata:00409220                                         ; DATA XREF: strcpy↑r
.idata:00409224 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00409224                 extrn __imp_strerror:dword
.idata:00409224                                         ; DATA XREF: strerror↑r
.idata:00409228 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00409228                 extrn __imp_strlen:dword
.idata:00409228                                         ; DATA XREF: strlen↑r
.idata:0040922C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040922C                 extrn __imp_strncmp:dword
.idata:0040922C                                         ; DATA XREF: strncmp↑r
.idata:00409230 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:00409230                 extrn __imp_strtol:dword
.idata:00409230                                         ; DATA XREF: strtol↑r
.idata:00409234 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00409234                 extrn __imp_vfprintf:dword
.idata:00409234                                         ; DATA XREF: vfprintf↑r
.idata:00409238
.idata:00409238
.idata:00409238
.idata:00409238                 end start
