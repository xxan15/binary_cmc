.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : ECCDCE9C43DD83AA506F6BF0F456936D5C455F7DDF5F23E7B4F6E356C0AAB928
.text:00401000 ; Input MD5    : 82264FB87BAA188752A95961AC475475
.text:00401000 ; Input CRC32  : C1B05E43
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/od.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A25A (Wed Apr 20 18:41:30 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000128B0 (  75952.)
.text:00401000 ; Section size in file          : 00012A00 (  76288.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4025D0+89↓p
.text:00401040                                         ; .text:00412670↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_412610
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_414000
.text:004010A2                 mov     edx, dword_4140A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_414004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4140C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4140C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4125E0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_414000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_414004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4025D0
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
.text:00401174                 call    ExitProcess
.text:00401174 sub_401080      endp
.text:00401174
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_412610
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 byte_401280     db 0                    ; DATA XREF: sub_404A80:loc_404E09↓r
.text:00401281                 db 3, 6, 8
.text:00401284                 dd 13100E0Bh, 1E1B1916h, 29262320h
.text:00401290                 db 2Bh
.text:00401291 byte_401291     db 1                    ; DATA XREF: sub_404A80:loc_404C46↓r
.text:00401292                 dw 604h
.text:00401294                 dd 100D0B08h, 19171412h, 23211E1Ch
.text:004012A0                 db 25h, 28h
.text:004012A2                 dw 300h                 ; DATA XREF: sub_404A80:loc_404DDC↓r
.text:004012A4                 dd 0D0A0805h, 1614110Fh, 201D1B19h
.text:004012B0                 db 22h, 25h, 27h
.text:004012B3 byte_4012B3     db 0                    ; DATA XREF: sub_404A80:loc_404D9F↓r
.text:004012B4                 dd 8060402h, 100E0C0Ah, 18161412h, 201E1C1Ah, 7 dup(90909090h)
.text:004012E0 dword_4012E0    dd 0FFFFFFFFh           ; DATA XREF: sub_4025D0+1A42↓r
.text:004012E0                                         ; sub_405980+197↓r ...
.text:004012E4 dword_4012E4    dd 1, 2, 2 dup(4), 8, 4, 8, 0Ch, 6C756Eh, 686F73h, 787473h
.text:004012E4                 dd 787465h, 746F65h, 716E65h, 6B6361h, 6C6562h, 68007362h
.text:004012E4                 dd 6C6E0074h, 747600h, 63006666h, 6F730072h, 697300h, 656C64h
.text:004012E4                 dd 316364h, 326364h, 336364h, 346364h, 6B616Eh, 6E7973h
.text:004012E4                 dd 627465h, 6E6163h, 73006D65h, 65006275h, 66006373h, 73670073h
.text:004012E4                 dd 737200h, 73007375h, 0B68D0070h, 0
.text:00401380 off_401380      dd offset dword_4012E4+20h
.text:00401380                                         ; DATA XREF: .text:00406CE6↓r
.text:00401384                 dd offset dword_4012E4+24h
.text:00401388                 dd offset dword_4012E4+28h
.text:0040138C                 dd offset dword_4012E4+2Ch
.text:00401390                 dd offset dword_4012E4+30h
.text:00401394                 dd offset dword_4012E4+34h
.text:00401398                 dd offset dword_4012E4+38h
.text:0040139C                 dd offset dword_4012E4+3Ch
.text:004013A0                 dd offset dword_4012E4+40h
.text:004013A4                 dd offset dword_4012E4+43h
.text:004013A8                 dd offset dword_4012E4+46h
.text:004013AC                 dd offset dword_4012E4+49h
.text:004013B0                 dd offset dword_4012E4+4Ch
.text:004013B4                 dd offset dword_4012E4+4Fh
.text:004013B8                 dd offset dword_4012E4+52h
.text:004013BC                 dd offset dword_4012E4+55h
.text:004013C0                 dd offset dword_4012E4+58h
.text:004013C4                 dd offset dword_4012E4+5Ch
.text:004013C8                 dd offset dword_4012E4+60h
.text:004013CC                 dd offset dword_4012E4+64h
.text:004013D0                 dd offset dword_4012E4+68h
.text:004013D4                 dd offset dword_4012E4+6Ch
.text:004013D8                 dd offset dword_4012E4+70h
.text:004013DC                 dd offset dword_4012E4+74h
.text:004013E0                 dd offset dword_4012E4+78h
.text:004013E4                 dd offset dword_4012E4+7Ch
.text:004013E8                 dd offset dword_4012E4+7Fh
.text:004013EC                 dd offset dword_4012E4+83h
.text:004013F0                 dd offset dword_4012E4+87h
.text:004013F4                 dd offset dword_4012E4+8Ah
.text:004013F8                 dd offset dword_4012E4+8Dh
.text:004013FC                 dd offset dword_4012E4+90h
.text:00401400                 dd offset dword_4012E4+93h
.text:00401404 dword_401404    dd 0F689002Dh           ; DATA XREF: .text:off_401408↓o
.text:00401404                                         ; sub_405070+2F↓o
.text:00401408 off_401408      dd offset dword_401404  ; DATA XREF: sub_4025D0:loc_40416E↓o
.text:0040140C                 align 10h
.text:00401410 aSkipBytes      db 'skip-bytes',0       ; DATA XREF: .text:off_401480↓o
.text:0040141B aAddressRadix   db 'address-radix',0    ; DATA XREF: .text:00401490↓o
.text:00401429 aReadBytes      db 'read-bytes',0       ; DATA XREF: .text:004014A0↓o
.text:00401434 aFormat         db 'format',0           ; DATA XREF: .text:004014B0↓o
.text:0040143B aOutputDuplicat db 'output-duplicates',0
.text:0040143B                                         ; DATA XREF: .text:004014C0↓o
.text:0040144D aStrings        db 'strings',0          ; DATA XREF: .text:004014D0↓o
.text:00401455 aTraditional    db 'traditional',0      ; DATA XREF: .text:004014E0↓o
.text:00401461 aWidth          db 'width',0            ; DATA XREF: .text:004014F0↓o
.text:00401467 aHelp           db 'help',0             ; DATA XREF: .text:00401500↓o
.text:0040146C aVersion        db 'version',0          ; DATA XREF: .text:00401510↓o
.text:00401474                 align 10h
.text:00401480 off_401480      dd offset aSkipBytes    ; DATA XREF: sub_4025D0+14E↓o
.text:00401480                                         ; "skip-bytes"
.text:00401484                 dd 1, 0
.text:0040148C                 dd 6Ah
.text:00401490                 dd offset aAddressRadix ; "address-radix"
.text:00401494                 dd 1, 0
.text:0040149C                 dd 41h
.text:004014A0                 dd offset aReadBytes    ; "read-bytes"
.text:004014A4                 dd 1, 0
.text:004014AC                 dd 4Eh
.text:004014B0                 dd offset aFormat       ; "format"
.text:004014B4                 dd 1, 0
.text:004014BC                 dd 74h
.text:004014C0                 dd offset aOutputDuplicat ; "output-duplicates"
.text:004014C4                 dd 2 dup(0)
.text:004014CC                 dd 76h
.text:004014D0                 dd offset aStrings      ; "strings"
.text:004014D4                 dd 2, 0
.text:004014DC                 dd 53h
.text:004014E0                 dd offset aTraditional  ; "traditional"
.text:004014E4                 dd 2 dup(0)
.text:004014EC                 dd 80h
.text:004014F0                 dd offset aWidth        ; "width"
.text:004014F4                 dd 2, 0
.text:004014FC                 dd 77h
.text:00401500                 dd offset aHelp         ; "help"
.text:00401504                 dd 2 dup(0)
.text:0040150C                 dd 0FFFFFF7Eh
.text:00401510                 dd offset aVersion      ; "version"
.text:00401514                 dd 2 dup(0)
.text:0040151C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401530                 align 20h
.text:00401540 aAAbbcddeffhhii db 'A:aBbcDdeFfHhIij:LlN:OoS:st:vXxw::',0
.text:00401540                                         ; DATA XREF: sub_4025D0+2F↓o
.text:00401563                 align 20h
.text:00401580 aAAbbcddeffhhii_0 db 'A:aBbcDdeFfHhIij:LlN:OoS:st:vXxw:',0
.text:00401580                                         ; DATA XREF: sub_4025D0+3D↓o
.text:004015A2 ; const char Locale
.text:004015A2 Locale          db 0                    ; DATA XREF: sub_4025D0+46↓o
.text:004015A2                                         ; sub_4025D0+15F1↓o ...
.text:004015A3                 align 20h
.text:004015C0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004015C0                                         ; DATA XREF: sub_4025D0+60↓o
.text:004015E3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4025D0+68↓o
.text:004015E3                                         ; sub_4025D0+75↓o
.text:004015ED                 align 20h
.text:00401600 aInvalidOutputA db 'invalid output address radix `%c',27h,'; it must be one character'
.text:00401600                                         ; DATA XREF: sub_4025D0:loc_402B88↓o
.text:00401600                 db ' from [doxn]',0
.text:00401648 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_4025D0+67C↓o
.text:00401655 a530            db '5.3.0',0            ; DATA XREF: sub_4025D0+684↓o
.text:0040165B aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4025D0+68F↓o
.text:00401669 ; const FILE stru_401669
.text:00401669 stru_401669     FILE <9000646Fh, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:00401669                                         ; DATA XREF: sub_4025D0+697↓o
.text:00401669                       55909090h, 65676173h, 7325203Ah>
.text:00401689                 db  20h
.text:0040168A                 db  5Bh ; [
.text:0040168B                 db  4Fh ; O
.text:0040168C                 db  50h ; P
.text:0040168D                 db  54h ; T
.text:0040168E                 db  49h ; I
.text:0040168F                 db  4Fh ; O
.text:00401690                 db  4Eh ; N
.text:00401691                 db  5Dh ; ]
.text:00401692                 db  2Eh ; .
.text:00401693                 db  2Eh ; .
.text:00401694                 db  2Eh ; .
.text:00401695                 db  20h
.text:00401696                 db  5Bh ; [
.text:00401697                 db  46h ; F
.text:00401698                 db  49h ; I
.text:00401699                 db  4Ch ; L
.text:0040169A                 db  45h ; E
.text:0040169B                 db  5Dh ; ]
.text:0040169C                 db  2Eh ; .
.text:0040169D                 db  2Eh ; .
.text:0040169E                 db  2Eh ; .
.text:0040169F                 db  0Ah
.text:004016A0                 db  20h
.text:004016A1                 db  20h
.text:004016A2                 db  6Fh ; o
.text:004016A3                 db  72h ; r
.text:004016A4                 db  3Ah ; :
.text:004016A5                 db  20h
.text:004016A6                 db  20h
.text:004016A7                 db  25h ; %
.text:004016A8                 db  73h ; s
.text:004016A9                 db  20h
.text:004016AA                 db  5Bh ; [
.text:004016AB                 db  2Dh ; -
.text:004016AC                 db  61h ; a
.text:004016AD                 db  62h ; b
.text:004016AE                 db  63h ; c
.text:004016AF                 db  64h ; d
.text:004016B0                 db  66h ; f
.text:004016B1                 db  69h ; i
.text:004016B2                 db  6Ch ; l
.text:004016B3                 db  6Fh ; o
.text:004016B4                 db  73h ; s
.text:004016B5                 db  78h ; x
.text:004016B6                 db  5Dh ; ]
.text:004016B7                 db  2Eh ; .
.text:004016B8                 db  2Eh ; .
.text:004016B9                 db  2Eh ; .
.text:004016BA                 db  20h
.text:004016BB                 db  5Bh ; [
.text:004016BC                 db  46h ; F
.text:004016BD                 db  49h ; I
.text:004016BE                 db  4Ch ; L
.text:004016BF                 db  45h ; E
.text:004016C0                 db  5Dh ; ]
.text:004016C1                 db  20h
.text:004016C2                 db  5Bh ; [
.text:004016C3                 db  5Bh ; [
.text:004016C4                 db  2Bh ; +
.text:004016C5                 db  5Dh ; ]
.text:004016C6                 db  4Fh ; O
.text:004016C7                 db  46h ; F
.text:004016C8                 db  46h ; F
.text:004016C9                 db  53h ; S
.text:004016CA                 db  45h ; E
.text:004016CB                 db  54h ; T
.text:004016CC                 db  5Bh ; [
.text:004016CD                 db  2Eh ; .
.text:004016CE                 db  5Dh ; ]
.text:004016CF                 db  5Bh ; [
.text:004016D0                 db  62h ; b
.text:004016D1                 db  5Dh ; ]
.text:004016D2                 db  5Dh ; ]
.text:004016D3                 db  0Ah
.text:004016D4                 db  20h
.text:004016D5                 db  20h
.text:004016D6                 db  6Fh ; o
.text:004016D7                 db  72h ; r
.text:004016D8                 db  3Ah ; :
.text:004016D9                 db  20h
.text:004016DA                 db  20h
.text:004016DB                 db  25h ; %
.text:004016DC                 db  73h ; s
.text:004016DD                 db  20h
.text:004016DE                 db  2Dh ; -
.text:004016DF                 db  2Dh ; -
.text:004016E0                 db  74h ; t
.text:004016E1                 db  72h ; r
.text:004016E2                 db  61h ; a
.text:004016E3                 db  64h ; d
.text:004016E4                 db  69h ; i
.text:004016E5                 db  74h ; t
.text:004016E6                 db  69h ; i
.text:004016E7                 db  6Fh ; o
.text:004016E8                 db  6Eh ; n
.text:004016E9                 db  61h ; a
.text:004016EA                 db  6Ch ; l
.text:004016EB                 db  20h
.text:004016EC                 db  5Bh ; [
.text:004016ED                 db  4Fh ; O
.text:004016EE                 db  50h ; P
.text:004016EF                 db  54h ; T
.text:004016F0                 db  49h ; I
.text:004016F1                 db  4Fh ; O
.text:004016F2                 db  4Eh ; N
.text:004016F3                 db  5Dh ; ]
.text:004016F4                 db  2Eh ; .
.text:004016F5                 db  2Eh ; .
.text:004016F6                 db  2Eh ; .
.text:004016F7                 db  20h
.text:004016F8                 db  5Bh ; [
.text:004016F9                 db  46h ; F
.text:004016FA                 db  49h ; I
.text:004016FB                 db  4Ch ; L
.text:004016FC                 db  45h ; E
.text:004016FD                 db  5Dh ; ]
.text:004016FE                 db  20h
.text:004016FF                 db  5Bh ; [
.text:00401700                 db  5Bh ; [
.text:00401701                 db  2Bh ; +
.text:00401702                 db  5Dh ; ]
.text:00401703                 db  4Fh ; O
.text:00401704                 db  46h ; F
.text:00401705                 db  46h ; F
.text:00401706                 db  53h ; S
.text:00401707                 db  45h ; E
.text:00401708                 db  54h ; T
.text:00401709                 db  5Bh ; [
.text:0040170A                 db  2Eh ; .
.text:0040170B                 db  5Dh ; ]
.text:0040170C                 db  5Bh ; [
.text:0040170D                 db  62h ; b
.text:0040170E                 db  5Dh ; ]
.text:0040170F                 db  20h
.text:00401710                 db  5Bh ; [
.text:00401711                 db  2Bh ; +
.text:00401712                 db  5Dh ; ]
.text:00401713                 db  5Bh ; [
.text:00401714                 db  4Ch ; L
.text:00401715                 db  41h ; A
.text:00401716                 db  42h ; B
.text:00401717                 db  45h ; E
.text:00401718                 db  4Ch ; L
.text:00401719                 db  5Dh ; ]
.text:0040171A                 db  5Bh ; [
.text:0040171B                 db  2Eh ; .
.text:0040171C                 db  5Dh ; ]
.text:0040171D                 db  5Bh ; [
.text:0040171E                 db  62h ; b
.text:0040171F                 db  5Dh ; ]
.text:00401720                 db  5Dh ; ]
.text:00401721                 db  0Ah
.text:00401722                 db    0
.text:00401723                 align 20h
.text:00401740 aWriteAnUnambig db 0Ah                  ; DATA XREF: sub_4025D0+6DA↓o
.text:00401740                                         ; .text:004046D7↓o
.text:00401740                 db 'Write an unambiguous representation, octal bytes by default,',0Ah
.text:00401740                 db 'of FILE to standard output.  With more than one FILE argument,',0Ah
.text:00401740                 db 'concatenate them in the listed order to form the input.',0Ah
.text:00401740                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:00401740                 db 0Ah,0
.text:0040182D                 align 20h
.text:00401840 aAllArgumentsTo db 'All arguments to long options are mandatory for short options.',0Ah
.text:00401840                                         ; DATA XREF: sub_4025D0+6FC↓o
.text:00401840                                         ; .text:004046F9↓o
.text:00401840                 db 0
.text:00401880 aAAddressRadixR db '  -A, --address-radix=RADIX   decide how file offsets are printed'
.text:00401880                                         ; DATA XREF: sub_4025D0+71E↓o
.text:00401880                                         ; .text:0040471B↓o
.text:00401880                 db 0Ah
.text:00401880                 db '  -j, --skip-bytes=BYTES      skip BYTES input bytes first',0Ah,0
.text:004018FE                 align 10h
.text:00401900 aNReadBytesByte db '  -N, --read-bytes=BYTES      limit dump to BYTES input bytes',0Ah
.text:00401900                                         ; DATA XREF: sub_4025D0+740↓o
.text:00401900                                         ; .text:0040473D↓o
.text:00401900                 db '  -S, --strings[=BYTES]       output strings of at least BYTES gr'
.text:00401900                 db 'aphic chars',0Ah
.text:00401900                 db '  -t, --format=TYPE           select output format or formats',0Ah
.text:00401900                 db '  -v, --output-duplicates     do not use * to mark line suppressi'
.text:00401900                 db 'on',0Ah
.text:00401900                 db '  -w, --width[=BYTES]         output BYTES bytes per output line',0Ah
.text:00401900                 db '      --traditional           accept arguments in traditional for'
.text:00401900                 db 'm',0Ah,0
.text:00401A92                 align 10h
.text:00401AA0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401AA0                                         ; DATA XREF: sub_4025D0+762↓o
.text:00401AA0                                         ; .text:0040475F↓o
.text:00401ACD                 align 20h
.text:00401AE0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401AE0                                         ; DATA XREF: sub_4025D0+784↓o
.text:00401AE0                                         ; .text:00404781↓o
.text:00401B16                 align 10h
.text:00401B20 aTraditionalFor db 0Ah                  ; DATA XREF: sub_4025D0+7A6↓o
.text:00401B20                                         ; .text:004047A3↓o
.text:00401B20                 db 'Traditional format specifications may be intermixed; they accumul'
.text:00401B20                 db 'ate:',0Ah
.text:00401B20                 db '  -a   same as -t a,  select named characters',0Ah
.text:00401B20                 db '  -b   same as -t o1, select octal bytes',0Ah
.text:00401B20                 db '  -c   same as -t c,  select ASCII characters or backslash escape'
.text:00401B20                 db 's',0Ah
.text:00401B20                 db '  -d   same as -t u2, select unsigned decimal 2-byte units',0Ah,0
.text:00401C3D                 align 10h
.text:00401C40 aFSameAsTFfSele db '  -f   same as -t fF, select floats',0Ah
.text:00401C40                                         ; DATA XREF: sub_4025D0+7C8↓o
.text:00401C40                                         ; .text:004047C5↓o
.text:00401C40                 db '  -i   same as -t dI, select decimal ints',0Ah
.text:00401C40                 db '  -l   same as -t dL, select decimal longs',0Ah
.text:00401C40                 db '  -o   same as -t o2, select octal 2-byte units',0Ah
.text:00401C40                 db '  -s   same as -t d2, select decimal 2-byte units',0Ah
.text:00401C40                 db '  -x   same as -t x2, select hexadecimal 2-byte units',0Ah,0
.text:00401D52                 align 10h
.text:00401D60 aIfFirstAndSeco db 0Ah                  ; DATA XREF: sub_4025D0+7EA↓o
.text:00401D60                                         ; .text:004047E7↓o
.text:00401D60                 db 'If first and second call formats both apply, the second format is'
.text:00401D60                 db ' assumed',0Ah
.text:00401D60                 db 'if the last operand begins with + or (if there are 2 operands) a '
.text:00401D60                 db 'digit.',0Ah
.text:00401D60                 db 'An OFFSET operand means -j OFFSET.  LABEL is the pseudo-address',0Ah
.text:00401D60                 db 'at first byte printed, incremented when dump is progressing.',0Ah
.text:00401D60                 db 'For OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal;',0Ah
.text:00401D60                 db 'suffixes may be . for octal and b for multiply by 512.',0Ah
.text:00401D60                 db 0Ah
.text:00401D60                 db 'TYPE is made up of one or more of these specifications:',0Ah
.text:00401D60                 db 0Ah
.text:00401D60                 db '  a          named character',0Ah
.text:00401D60                 db '  c          ASCII character or backslash escape',0Ah,0
.text:00401F6F                 align 20h
.text:00401F80 aDSizeSignedDec db '  d[SIZE]    signed decimal, SIZE bytes per integer',0Ah
.text:00401F80                                         ; DATA XREF: sub_4025D0+80C↓o
.text:00401F80                                         ; .text:00404809↓o
.text:00401F80                 db '  f[SIZE]    floating point, SIZE bytes per integer',0Ah
.text:00401F80                 db '  o[SIZE]    octal, SIZE bytes per integer',0Ah
.text:00401F80                 db '  u[SIZE]    unsigned decimal, SIZE bytes per integer',0Ah
.text:00401F80                 db '  x[SIZE]    hexadecimal, SIZE bytes per integer',0Ah,0
.text:0040207B                 align 10h
.text:00402080 aSizeIsANumberF db 0Ah                  ; DATA XREF: sub_4025D0+82E↓o
.text:00402080                                         ; .text:0040482B↓o
.text:00402080                 db 'SIZE is a number.  For TYPE in doux, SIZE may also be C for',0Ah
.text:00402080                 db 'sizeof(char), S for sizeof(short), I for sizeof(int) or L for',0Ah
.text:00402080                 db 'sizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float)'
.text:00402080                 db ', D',0Ah
.text:00402080                 db 'for sizeof(double) or L for sizeof(long double).',0Ah,0
.text:00402172                 align 10h
.text:00402180 aRadixIsDForDec db 0Ah                  ; DATA XREF: sub_4025D0+850↓o
.text:00402180                                         ; .text:0040484D↓o
.text:00402180                 db 'RADIX is d for decimal, o for octal, x for hexadecimal or n for n'
.text:00402180                 db 'one.',0Ah
.text:00402180                 db 'BYTES is hexadecimal with 0x or 0X prefix, it is multiplied by 51'
.text:00402180                 db '2',0Ah
.text:00402180                 db 'with b suffix, by 1024 with k and by 1048576 with m.  Adding a z '
.text:00402180                 db 'suffix to',0Ah
.text:00402180                 db 'any type adds a display of printable characters to the end of eac'
.text:00402180                 db 'h line',0Ah
.text:00402180                 db 'of output.  ',0
.text:004022AA                 align 20h
.text:004022C0 aStringWithoutA db '--string without a number implies 3.  --width without a number',0Ah
.text:004022C0                                         ; DATA XREF: sub_4025D0+872↓o
.text:004022C0                                         ; .text:0040486F↓o
.text:004022C0                 db 'implies 32.  By default, od uses -A o -t d2 -w 16.',0Ah,0
.text:00402333 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4025D0+894↓o
.text:00402333                                         ; .text:00404891↓o
.text:00402333                 db 'Report bugs to <%s>.',0Ah,0
.text:0040234A aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040234A                                         ; DATA XREF: sub_4025D0+8A1↓o
.text:0040234A                                         ; .text:0040489E↓o
.text:00402360 aU4             db 'u4',0               ; DATA XREF: sub_4025D0+8BD↓o
.text:00402360                                         ; sub_4025D0+8CA↓r ...
.text:00402363                 align 20h
.text:00402380 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/od.c',0
.text:00402380                                         ; DATA XREF: sub_4025D0+950↓o
.text:00402380                                         ; sub_4025D0+999↓o ...
.text:004023A3 aSNext          db 's != next',0        ; DATA XREF: sub_4025D0+958↓o
.text:004023AD aSNull          db 's != NULL',0        ; DATA XREF: sub_4025D0+9A1↓o
.text:004023B7 ; const char aBkm[]
.text:004023B7 aBkm            db 'bkm',0              ; DATA XREF: sub_4025D0+9BB↓o
.text:004023B7                                         ; sub_4025D0:loc_403149↓o ...
.text:004023BB aLimitArgument  db 'limit argument',0   ; DATA XREF: sub_4025D0+9FC↓o
.text:004023BB                                         ; sub_4025D0:loc_40300A↓o ...
.text:004023CA ; const char aSSTooLarge[]
.text:004023CA aSSTooLarge     db '%s `%s',27h,' too large',0
.text:004023CA                                         ; DATA XREF: sub_4025D0+A09↓o
.text:004023CA                                         ; sub_4025D0+BCA↓o ...
.text:004023DC                 align 10h
.text:004023E0 aInvalidCharact db 'invalid character following %s in `%s',27h,0
.text:004023E0                                         ; DATA XREF: sub_4025D0+A47↓o
.text:004023E0                                         ; sub_4025D0+C49↓o ...
.text:00402407 aInvalidSS      db 'invalid %s `%s',27h,0
.text:00402407                                         ; DATA XREF: sub_4025D0+A75↓o
.text:00402407                                         ; sub_4025D0+C7A↓o ...
.text:00402417 aO4             db 'o4',0               ; DATA XREF: sub_4025D0+A94↓o
.text:00402417                                         ; sub_4025D0+AA1↓r ...
.text:0040241A aMinimumStringL db 'minimum string length',0
.text:0040241A                                         ; DATA XREF: sub_4025D0+BBD↓o
.text:0040241A                                         ; sub_4025D0:loc_40320C↓o ...
.text:00402430 aSIsTooLarge    db '%s is too large',0  ; DATA XREF: sub_4025D0:loc_4031DB↓o
.text:00402430                                         ; sub_4025D0:loc_403C50↓o
.text:00402440 aX4             db 'x4',0               ; DATA XREF: sub_4025D0+C9C↓o
.text:00402440                                         ; sub_4025D0+CA9↓r ...
.text:00402443 aA              db 'a',0                ; DATA XREF: sub_4025D0+D56↓o
.text:00402443                                         ; sub_4025D0+D63↓r ...
.text:00402445 aO1             db 'o1',0               ; DATA XREF: sub_4025D0+E10↓o
.text:00402445                                         ; sub_4025D0+E1D↓r ...
.text:00402448 aC              db 'c',0                ; DATA XREF: sub_4025D0+ECA↓o
.text:00402448                                         ; sub_4025D0+ED7↓r ...
.text:0040244A aU2             db 'u2',0               ; DATA XREF: sub_4025D0+F84↓o
.text:0040244A                                         ; sub_4025D0+F91↓r ...
.text:0040244D aFd             db 'fD',0               ; DATA XREF: sub_4025D0+103E↓o
.text:0040244D                                         ; sub_4025D0+104B↓r ...
.text:00402450 aFf             db 'fF',0               ; DATA XREF: sub_4025D0+10F8↓o
.text:00402450                                         ; sub_4025D0+1105↓r ...
.text:00402453 aDi             db 'dI',0               ; DATA XREF: sub_4025D0+11B2↓o
.text:00402453                                         ; sub_4025D0+11BF↓r ...
.text:00402456 aSkipArgument   db 'skip argument',0    ; DATA XREF: sub_4025D0+12B0↓o
.text:00402456                                         ; sub_4025D0:loc_40388C↓o ...
.text:00402464 aDl             db 'dL',0               ; DATA XREF: sub_4025D0+12E4↓o
.text:00402464                                         ; sub_4025D0+12F1↓r ...
.text:00402467 aO2             db 'o2',0               ; DATA XREF: sub_4025D0+139E↓o
.text:00402467                                         ; sub_4025D0+13AB↓r ...
.text:0040246A aD2             db 'd2',0               ; DATA XREF: sub_4025D0+1458↓o
.text:0040246A                                         ; sub_4025D0+1465↓r ...
.text:0040246D aWidthSpecifica db 'width specification',0
.text:0040246D                                         ; DATA XREF: sub_4025D0+1635↓o
.text:0040246D                                         ; sub_4025D0:loc_403C81↓o ...
.text:00402481 aX2             db 'x2',0               ; DATA XREF: sub_4025D0+170E↓o
.text:00402481                                         ; sub_4025D0+171B↓r ...
.text:00402484                 align 20h
.text:004024A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004024A0                                         ; DATA XREF: sub_4025D0:def_40274F↓o
.text:004024A0                                         ; .text:0040467C↓o
.text:004024C7                 align 20h
.text:004024E0 aSkipBytesReadB db 'skip-bytes + read-bytes is too large',0
.text:004024E0                                         ; DATA XREF: sub_4025D0:loc_403EA2↓o
.text:00402505 byte_402505     db 6Fh                  ; DATA XREF: sub_4025D0+1900↓o
.text:00402505                                         ; sub_4025D0+190D↓r ...
.text:00402506                 dw 53h
.text:00402508 aStandardInput  db 'standard input',0   ; DATA XREF: sub_4025D0+1B0D↓o
.text:00402508                                         ; sub_405070+40↓o
.text:00402517                 align 10h
.text:00402520 aWarningInvalid db 'warning: invalid width %lu; using %d instead',0
.text:00402520                                         ; DATA XREF: sub_4025D0:loc_404117↓o
.text:0040254D aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_4025D0+1C12↓o
.text:0040255E                 align 10h
.text:00402560 aCompatibilityM db 'Compatibility mode supports at most one file.',0
.text:00402560                                         ; DATA XREF: sub_4025D0+1C3D↓o
.text:0040258E ; const char aS[]
.text:0040258E aS              db '%s',0Ah,0           ; DATA XREF: sub_4025D0+1C4A↓o
.text:00402592 ; const char aBb[]
.text:00402592 aBb             db 'Bb',0               ; DATA XREF: sub_4025D0:loc_404289↓o
.text:00402592                                         ; sub_4025D0:loc_40434F↓o ...
.text:00402595                 align 10h
.text:004025A0 aNoTypeMayBeSpe db 'no type may be specified when dumping strings',0
.text:004025A0                                         ; DATA XREF: sub_4025D0:loc_404638↓o
.text:004025CE                 align 10h
.text:004025D0
.text:004025D0 ; =============== S U B R O U T I N E =======================================
.text:004025D0
.text:004025D0 ; Attributes: bp-based frame fuzzy-sp
.text:004025D0
.text:004025D0 sub_4025D0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004025D0
.text:004025D0 Category        = dword ptr -0C8h
.text:004025D0 Locale          = dword ptr -0C4h
.text:004025D0 var_C0          = dword ptr -0C0h
.text:004025D0 var_BC          = byte ptr -0BCh
.text:004025D0 Str             = dword ptr -0B8h
.text:004025D0 var_B4          = dword ptr -0B4h
.text:004025D0 var_B0          = dword ptr -0B0h
.text:004025D0 var_AC          = dword ptr -0ACh
.text:004025D0 var_A1          = byte ptr -0A1h
.text:004025D0 var_A0          = dword ptr -0A0h
.text:004025D0 var_9C          = dword ptr -9Ch
.text:004025D0 var_98          = byte ptr -98h
.text:004025D0 var_97          = byte ptr -97h
.text:004025D0 var_96          = byte ptr -96h
.text:004025D0 var_95          = byte ptr -95h
.text:004025D0 var_94          = byte ptr -94h
.text:004025D0 var_93          = byte ptr -93h
.text:004025D0 var_92          = byte ptr -92h
.text:004025D0 var_91          = byte ptr -91h
.text:004025D0 var_90          = byte ptr -90h
.text:004025D0 var_8F          = byte ptr -8Fh
.text:004025D0 var_8E          = byte ptr -8Eh
.text:004025D0 var_8D          = byte ptr -8Dh
.text:004025D0 var_8C          = byte ptr -8Ch
.text:004025D0 var_8B          = byte ptr -8Bh
.text:004025D0 var_8A          = byte ptr -8Ah
.text:004025D0 var_89          = byte ptr -89h
.text:004025D0 var_88          = dword ptr -88h
.text:004025D0 var_84          = dword ptr -84h
.text:004025D0 var_80          = dword ptr -80h
.text:004025D0 var_7B          = byte ptr -7Bh
.text:004025D0 var_7A          = byte ptr -7Ah
.text:004025D0 var_79          = byte ptr -79h
.text:004025D0 var_78          = byte ptr -78h
.text:004025D0 var_74          = dword ptr -74h
.text:004025D0 var_70          = dword ptr -70h
.text:004025D0 var_6C          = dword ptr -6Ch
.text:004025D0 var_68          = dword ptr -68h
.text:004025D0 var_64          = dword ptr -64h
.text:004025D0 var_60          = dword ptr -60h
.text:004025D0 var_5C          = dword ptr -5Ch
.text:004025D0 var_54          = dword ptr -54h
.text:004025D0 var_50          = dword ptr -50h
.text:004025D0 var_4C          = dword ptr -4Ch
.text:004025D0 var_48          = dword ptr -48h
.text:004025D0 var_44          = dword ptr -44h
.text:004025D0 var_40          = dword ptr -40h
.text:004025D0 var_3C          = dword ptr -3Ch
.text:004025D0 var_38          = dword ptr -38h
.text:004025D0 var_34          = dword ptr -34h
.text:004025D0 var_30          = dword ptr -30h
.text:004025D0 var_2C          = dword ptr -2Ch
.text:004025D0 var_28          = dword ptr -28h
.text:004025D0 var_24          = dword ptr -24h
.text:004025D0 var_20          = dword ptr -20h
.text:004025D0 var_1C          = dword ptr -1Ch
.text:004025D0 var_18          = dword ptr -18h
.text:004025D0 var_14          = dword ptr -14h
.text:004025D0 arg_0           = dword ptr  8
.text:004025D0 arg_4           = dword ptr  0Ch
.text:004025D0
.text:004025D0                 push    ebp
.text:004025D1                 xor     eax, eax
.text:004025D3                 mov     ebp, esp
.text:004025D5                 push    edi
.text:004025D6                 push    esi
.text:004025D7                 push    ebx
.text:004025D8                 sub     esp, 0BCh
.text:004025DE                 and     esp, 0FFFFFFF0h
.text:004025E1                 call    __alloca
.text:004025E6                 mov     edi, [ebp+arg_4]
.text:004025E9                 call    sub_4126B0
.text:004025EE                 mov     [ebp+var_79], 0
.text:004025F2                 mov     [ebp+var_7A], 0
.text:004025F6                 mov     [ebp+var_7B], 1
.text:004025FA                 call    sub_408940
.text:004025FF                 mov     [ebp+var_80], offset aAAbbcddeffhhii ; "A:aBbcDdeFfHhIij:LlN:OoS:st:vXxw::"
.text:00402606                 cmp     eax, 30DAFh
.text:0040260B                 jle     short loc_402614
.text:0040260D                 mov     [ebp+var_80], offset aAAbbcddeffhhii_0 ; "A:aBbcDdeFfHhIij:LlN:OoS:st:vXxw:"
.text:00402614
.text:00402614 loc_402614:                             ; CODE XREF: sub_4025D0+3B↑j
.text:00402614                 mov     edx, [edi]
.text:00402616                 mov     [esp+0C8h+Locale], offset Locale ; Locale
.text:0040261E                 mov     [esp+0C8h+Category], 0 ; Category
.text:00402625                 mov     ds:dword_415670, edx
.text:0040262B                 call    setlocale
.text:00402630                 mov     [esp+0C8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00402638                 mov     [esp+0C8h+Category], offset aCoreutils ; "coreutils"
.text:0040263F                 call    ds:__imp_libintl_bindtextdomain
.text:00402645                 mov     [esp+0C8h+Category], offset aCoreutils ; "coreutils"
.text:0040264C                 call    ds:libintl_textdomain
.text:00402652                 mov     [esp+0C8h+Category], offset sub_408850 ; void (__cdecl *)()
.text:00402659                 call    sub_401040
.text:0040265E                 xor     eax, eax
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_4025D0+9D↓j
.text:00402660                 xor     ecx, ecx
.text:00402662                 mov     ds:dword_415150[eax*4], ecx
.text:00402669                 inc     eax
.text:0040266A                 cmp     eax, 8
.text:0040266D                 jbe     short loc_402660
.text:0040266F                 mov     eax, 5
.text:00402674                 mov     esi, 1
.text:00402679                 mov     ebx, 2
.text:0040267E                 mov     ds:dword_415170, eax
.text:00402683                 mov     edx, 4
.text:00402688                 xor     eax, eax
.text:0040268A                 mov     ds:dword_415154, esi
.text:00402690                 mov     ds:dword_415158, ebx
.text:00402696                 mov     ds:dword_415160, edx
.text:0040269C                 lea     esi, [esi+0]
.text:004026A0
.text:004026A0 loc_4026A0:                             ; CODE XREF: sub_4025D0+DD↓j
.text:004026A0                 xor     ecx, ecx
.text:004026A2                 mov     ds:dword_415180[eax*4], ecx
.text:004026A9                 inc     eax
.text:004026AA                 cmp     eax, 0Ch
.text:004026AD                 jbe     short loc_4026A0
.text:004026AF                 mov     ds:byte_415060, 0
.text:004026B6                 mov     esi, 6
.text:004026BB                 mov     eax, 8
.text:004026C0                 mov     ds:dword_415190, esi
.text:004026C6                 mov     ebx, 7
.text:004026CB                 xor     edx, edx
.text:004026CD                 mov     ds:dword_4151B0, eax
.text:004026D2                 xor     ecx, ecx
.text:004026D4                 xor     esi, esi
.text:004026D6                 mov     ds:dword_4151A0, ebx
.text:004026DC                 mov     eax, 7
.text:004026E1                 mov     ebx, offset sub_405560
.text:004026E6                 mov     ds:dword_4150E0, edx
.text:004026EC                 mov     edx, 8
.text:004026F1                 mov     ds:dword_4150F0, ecx
.text:004026F7                 mov     ds:dword_4150D0, esi
.text:004026FD                 mov     ds:dword_4150A0, ebx
.text:00402703                 mov     ds:dword_415030, edx
.text:00402709
.text:00402709 loc_402709:                             ; CODE XREF: sub_4025D0+669↓j
.text:00402709                 mov     ds:dword_415040, eax
.text:0040270E                 mov     esi, esi
.text:00402710
.text:00402710 loc_402710:                             ; CODE XREF: sub_4025D0+5EA↓j
.text:00402710                                         ; sub_4025D0+60F↓j ...
.text:00402710                 mov     [esp+0C8h+Str], 0 ; int
.text:00402718                 mov     eax, [ebp+var_80]
.text:0040271B                 mov     edx, [ebp+arg_0]
.text:0040271E                 mov     dword ptr [esp+0C8h+var_BC], offset off_401480 ; char
.text:00402726                 mov     [esp+0C8h+var_C0], eax ; char *
.text:0040272A                 mov     [esp+0C8h+Locale], edi ; int
.text:0040272E                 mov     [esp+0C8h+Category], edx ; int
.text:00402731                 call    sub_4086E0
.text:00402736                 cmp     eax, 0FFFFFFFFh
.text:00402739                 jz      loc_403DD5
.text:0040273F                 add     eax, 83h ; 'ƒ'  ; switch 260 cases
.text:00402744                 cmp     eax, 103h
.text:00402749                 ja      def_40274F      ; jumptable 0040274F default case, cases -129-64,67,69,71,74,75,77,80-82,84-87,89-96,103,107,109,110,112-114,117,121-127
.text:0040274F                 jmp     ds:jpt_40274F[eax*4] ; switch jump
.text:0040274F ; ---------------------------------------------------------------------------
.text:00402756                 align 4
.text:00402758 jpt_40274F      dd offset loc_402C3E, offset loc_402C83, offset def_40274F
.text:00402758                                         ; DATA XREF: sub_4025D0+17F↑r
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F ; jump table for switch statement
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset loc_402B68, offset loc_403967
.text:00402758                 dd offset def_40274F, offset loc_402E86, offset def_40274F
.text:00402758                 dd offset loc_403607, offset def_40274F, offset loc_403265
.text:00402758                 dd offset loc_4038AD, offset def_40274F, offset def_40274F
.text:00402758                 dd offset loc_4038AD, offset def_40274F, offset loc_402F7A
.text:00402758                 dd offset loc_40305D, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset loc_403125, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset loc_403265, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset loc_40331F, offset loc_4033D9, offset loc_403493
.text:00402758                 dd offset loc_40354D, offset loc_403607, offset loc_4036C1
.text:00402758                 dd offset def_40274F, offset loc_403CD7, offset loc_40377B
.text:00402758                 dd offset loc_403835, offset def_40274F, offset loc_4038AD
.text:00402758                 dd offset def_40274F, offset def_40274F, offset loc_403967
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset loc_403A21, offset loc_403ADB, offset def_40274F
.text:00402758                 dd offset loc_403B94, offset loc_403BA4, offset loc_403CD7
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset def_40274F, offset def_40274F
.text:00402758                 dd offset def_40274F, offset loc_403DC9
.text:00402B68 ; ---------------------------------------------------------------------------
.text:00402B68
.text:00402B68 loc_402B68:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00402B68                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00402B68                 mov     [ebp+var_79], 1 ; jumptable 0040274F case 65
.text:00402B6C                 mov     ecx, ds:dword_415690
.text:00402B72                 movsx   eax, byte ptr [ecx]
.text:00402B75                 cmp     eax, 6Eh ; 'n'
.text:00402B78                 jz      loc_402C2C
.text:00402B7E                 cmp     eax, 6Eh ; 'n'
.text:00402B81                 jg      short loc_402BE4
.text:00402B83                 cmp     eax, 64h ; 'd'
.text:00402B86                 jz      short loc_402BBF
.text:00402B88
.text:00402B88 loc_402B88:                             ; CODE XREF: sub_4025D0+61C↓j
.text:00402B88                 mov     [esp+0C8h+Category], offset aInvalidOutputA ; "invalid output address radix `%c'; it m"...
.text:00402B8F                 call    ds:libintl_gettext
.text:00402B95                 mov     ebx, ds:dword_415690
.text:00402B9B                 movsx   edx, byte ptr [ebx]
.text:00402B9E                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00402BA2                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00402BAA                 mov     [esp+0C8h+Category], 1 ; Code
.text:00402BB1                 mov     dword ptr [esp+0C8h+var_BC], edx ; char
.text:00402BB5                 call    sub_40ADC0
.text:00402BBA                 jmp     loc_402710
.text:00402BBF ; ---------------------------------------------------------------------------
.text:00402BBF
.text:00402BBF loc_402BBF:                             ; CODE XREF: sub_4025D0+5B6↑j
.text:00402BBF                 mov     eax, offset sub_405560
.text:00402BC4                 mov     edx, 0Ah
.text:00402BC9                 mov     ds:dword_4150A0, eax
.text:00402BCE                 mov     ds:dword_415030, edx
.text:00402BD4
.text:00402BD4 loc_402BD4:                             ; CODE XREF: sub_4025D0+65A↓j
.text:00402BD4                 mov     ecx, 7
.text:00402BD9                 mov     ds:dword_415040, ecx
.text:00402BDF                 jmp     loc_402710
.text:00402BE4 ; ---------------------------------------------------------------------------
.text:00402BE4
.text:00402BE4 loc_402BE4:                             ; CODE XREF: sub_4025D0+5B1↑j
.text:00402BE4                 cmp     eax, 6Fh ; 'o'
.text:00402BE7                 jz      short loc_402C14
.text:00402BE9                 cmp     eax, 78h ; 'x'
.text:00402BEC                 jnz     short loc_402B88
.text:00402BEE                 mov     esi, offset sub_405560
.text:00402BF3                 mov     ebx, 10h
.text:00402BF8                 mov     edx, 6
.text:00402BFD                 mov     ds:dword_4150A0, esi
.text:00402C03                 mov     ds:dword_415030, ebx
.text:00402C09                 mov     ds:dword_415040, edx
.text:00402C0F                 jmp     loc_402710
.text:00402C14 ; ---------------------------------------------------------------------------
.text:00402C14
.text:00402C14 loc_402C14:                             ; CODE XREF: sub_4025D0+617↑j
.text:00402C14                 mov     esi, offset sub_405560
.text:00402C19                 mov     ebx, 8
.text:00402C1E                 mov     ds:dword_4150A0, esi
.text:00402C24                 mov     ds:dword_415030, ebx
.text:00402C2A                 jmp     short loc_402BD4
.text:00402C2C ; ---------------------------------------------------------------------------
.text:00402C2C
.text:00402C2C loc_402C2C:                             ; CODE XREF: sub_4025D0+5A8↑j
.text:00402C2C                 mov     ecx, offset nullsub_1
.text:00402C31                 xor     eax, eax
.text:00402C33                 mov     ds:dword_4150A0, ecx
.text:00402C39                 jmp     loc_402709
.text:00402C3E ; ---------------------------------------------------------------------------
.text:00402C3E
.text:00402C3E loc_402C3E:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00402C3E                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00402C3E                 mov     [esp+0C8h+var_B4], 0 ; jumptable 0040274F case -131
.text:00402C46                 mov     ecx, ds:_iob
.text:00402C4C                 mov     [esp+0C8h+Str], offset aJimMeyering ; "Jim Meyering"
.text:00402C54                 mov     dword ptr [esp+0C8h+var_BC], offset a530 ; "5.3.0"
.text:00402C5C                 add     ecx, 20h ; ' '
.text:00402C5F                 mov     [esp+0C8h+var_C0], offset aGnuCoreutils ; "GNU coreutils"
.text:00402C67                 mov     [esp+0C8h+Locale], offset stru_401669 ; FILE *
.text:00402C6F                 mov     [esp+0C8h+Category], ecx ; FILE *
.text:00402C72                 call    sub_4086A0
.text:00402C77
.text:00402C77 loc_402C77:                             ; CODE XREF: sub_4025D0+8B1↓j
.text:00402C77                 mov     [esp+0C8h+Category], 0 ; Code
.text:00402C7E
.text:00402C7E loc_402C7E:                             ; CODE XREF: sub_4025D0+17F4↓j
.text:00402C7E                                         ; sub_4025D0+1AF7↓j
.text:00402C7E                 call    exit
.text:00402C83 ; ---------------------------------------------------------------------------
.text:00402C83
.text:00402C83 loc_402C83:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00402C83                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00402C83                 mov     [esp+0C8h+Category], (offset stru_401669._charbuf+3) ; jumptable 0040274F case -130
.text:00402C8A                 call    ds:libintl_gettext
.text:00402C90                 mov     esi, ds:dword_415670
.text:00402C96                 mov     [esp+0C8h+Category], eax ; Format
.text:00402C99                 mov     dword ptr [esp+0C8h+var_BC], esi
.text:00402C9D                 mov     [esp+0C8h+var_C0], esi
.text:00402CA1                 mov     [esp+0C8h+Locale], esi
.text:00402CA5                 call    printf
.text:00402CAA                 mov     [esp+0C8h+Category], offset aWriteAnUnambig ; "\nWrite an unambiguous representation, "...
.text:00402CB1                 call    ds:libintl_gettext
.text:00402CB7                 mov     edi, ds:_iob
.text:00402CBD                 add     edi, 20h ; ' '
.text:00402CC0                 mov     [esp+0C8h+Locale], edi ; Stream
.text:00402CC4                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402CC7                 call    fputs
.text:00402CCC                 mov     [esp+0C8h+Category], offset aAllArgumentsTo ; "All arguments to long options are manda"...
.text:00402CD3                 call    ds:libintl_gettext
.text:00402CD9                 mov     ebx, ds:_iob
.text:00402CDF                 add     ebx, 20h ; ' '
.text:00402CE2                 mov     [esp+0C8h+Locale], ebx ; Stream
.text:00402CE6                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402CE9                 call    fputs
.text:00402CEE                 mov     [esp+0C8h+Category], offset aAAddressRadixR ; "  -A, --address-radix=RADIX   decide ho"...
.text:00402CF5                 call    ds:libintl_gettext
.text:00402CFB                 mov     edx, ds:_iob
.text:00402D01                 add     edx, 20h ; ' '
.text:00402D04                 mov     [esp+0C8h+Locale], edx ; Stream
.text:00402D08                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402D0B                 call    fputs
.text:00402D10                 mov     [esp+0C8h+Category], offset aNReadBytesByte ; "  -N, --read-bytes=BYTES      limit dum"...
.text:00402D17                 call    ds:libintl_gettext
.text:00402D1D                 mov     esi, ds:_iob
.text:00402D23                 add     esi, 20h ; ' '
.text:00402D26                 mov     [esp+0C8h+Locale], esi ; Stream
.text:00402D2A                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402D2D                 call    fputs
.text:00402D32                 mov     [esp+0C8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402D39                 call    ds:libintl_gettext
.text:00402D3F                 mov     edi, ds:_iob
.text:00402D45                 add     edi, 20h ; ' '
.text:00402D48                 mov     [esp+0C8h+Locale], edi ; Stream
.text:00402D4C                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402D4F                 call    fputs
.text:00402D54                 mov     [esp+0C8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402D5B                 call    ds:libintl_gettext
.text:00402D61                 mov     ebx, ds:_iob
.text:00402D67                 add     ebx, 20h ; ' '
.text:00402D6A                 mov     [esp+0C8h+Locale], ebx ; Stream
.text:00402D6E                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402D71                 call    fputs
.text:00402D76                 mov     [esp+0C8h+Category], offset aTraditionalFor ; "\nTraditional format specifications may"...
.text:00402D7D                 call    ds:libintl_gettext
.text:00402D83                 mov     edx, ds:_iob
.text:00402D89                 add     edx, 20h ; ' '
.text:00402D8C                 mov     [esp+0C8h+Locale], edx ; Stream
.text:00402D90                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402D93                 call    fputs
.text:00402D98                 mov     [esp+0C8h+Category], offset aFSameAsTFfSele ; "  -f   same as -t fF, select floats\n  "...
.text:00402D9F                 call    ds:libintl_gettext
.text:00402DA5                 mov     esi, ds:_iob
.text:00402DAB                 add     esi, 20h ; ' '
.text:00402DAE                 mov     [esp+0C8h+Locale], esi ; Stream
.text:00402DB2                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402DB5                 call    fputs
.text:00402DBA                 mov     [esp+0C8h+Category], offset aIfFirstAndSeco ; "\nIf first and second call formats both"...
.text:00402DC1                 call    ds:libintl_gettext
.text:00402DC7                 mov     edi, ds:_iob
.text:00402DCD                 add     edi, 20h ; ' '
.text:00402DD0                 mov     [esp+0C8h+Locale], edi ; Stream
.text:00402DD4                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402DD7                 call    fputs
.text:00402DDC                 mov     [esp+0C8h+Category], offset aDSizeSignedDec ; "  d[SIZE]    signed decimal, SIZE bytes"...
.text:00402DE3                 call    ds:libintl_gettext
.text:00402DE9                 mov     ebx, ds:_iob
.text:00402DEF                 add     ebx, 20h ; ' '
.text:00402DF2                 mov     [esp+0C8h+Locale], ebx ; Stream
.text:00402DF6                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402DF9                 call    fputs
.text:00402DFE                 mov     [esp+0C8h+Category], offset aSizeIsANumberF ; "\nSIZE is a number.  For TYPE in doux, "...
.text:00402E05                 call    ds:libintl_gettext
.text:00402E0B                 mov     edx, ds:_iob
.text:00402E11                 add     edx, 20h ; ' '
.text:00402E14                 mov     [esp+0C8h+Locale], edx ; Stream
.text:00402E18                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402E1B                 call    fputs
.text:00402E20                 mov     [esp+0C8h+Category], offset aRadixIsDForDec ; "\nRADIX is d for decimal, o for octal, "...
.text:00402E27                 call    ds:libintl_gettext
.text:00402E2D                 mov     esi, ds:_iob
.text:00402E33                 add     esi, 20h ; ' '
.text:00402E36                 mov     [esp+0C8h+Locale], esi ; Stream
.text:00402E3A                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402E3D                 call    fputs
.text:00402E42                 mov     [esp+0C8h+Category], offset aStringWithoutA ; "--string without a number implies 3.  -"...
.text:00402E49                 call    ds:libintl_gettext
.text:00402E4F                 mov     edi, ds:_iob
.text:00402E55                 add     edi, 20h ; ' '
.text:00402E58                 mov     [esp+0C8h+Locale], edi ; Stream
.text:00402E5C                 mov     [esp+0C8h+Category], eax ; Buffer
.text:00402E5F                 call    fputs
.text:00402E64                 mov     [esp+0C8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402E6B                 call    ds:libintl_gettext
.text:00402E71                 mov     [esp+0C8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402E79                 mov     [esp+0C8h+Category], eax ; Format
.text:00402E7C                 call    printf
.text:00402E81                 jmp     loc_402C77
.text:00402E86 ; ---------------------------------------------------------------------------
.text:00402E86
.text:00402E86 loc_402E86:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00402E86                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00402E86                 mov     [ebp+var_8D], 0 ; jumptable 0040274F case 68
.text:00402E8D                 mov     ebx, offset aU4 ; "u4"
.text:00402E92                 test    ebx, ebx
.text:00402E94                 jz      loc_402F61
.text:00402E9A                 cmp     byte ptr ds:aU4, 0 ; "u4"
.text:00402EA1                 jz      short loc_402EFA
.text:00402EA3                 mov     eax, ds:dword_4150E0
.text:00402EA8                 lea     esi, [ebp+var_2C]
.text:00402EAB
.text:00402EAB loc_402EAB:                             ; CODE XREF: sub_4025D0+928↓j
.text:00402EAB                 cmp     ds:dword_4150F0, eax
.text:00402EB1                 jbe     loc_402F34
.text:00402EB7
.text:00402EB7 loc_402EB7:                             ; CODE XREF: sub_4025D0+98C↓j
.text:00402EB7                 mov     [esp+0C8h+var_C0], esi
.text:00402EBB                 mov     edx, ds:dword_4150D0
.text:00402EC1                 lea     ecx, [eax+eax*2]
.text:00402EC4                 mov     [esp+0C8h+Locale], ebx
.text:00402EC8                 shl     ecx, 4
.text:00402ECB                 mov     [esp+0C8h+Category], offset aU4 ; "u4"
.text:00402ED2                 add     ecx, edx
.text:00402ED4                 mov     dword ptr [esp+0C8h+var_BC], ecx
.text:00402ED8                 call    sub_404A80
.text:00402EDD                 test    al, al
.text:00402EDF                 jz      short loc_402F07
.text:00402EE1                 mov     eax, [ebp+var_2C]
.text:00402EE4                 cmp     ebx, eax
.text:00402EE6                 jz      short loc_402F18
.text:00402EE8                 mov     ebx, eax
.text:00402EEA                 mov     eax, ds:dword_4150E0
.text:00402EEF                 inc     eax
.text:00402EF0                 mov     ds:dword_4150E0, eax
.text:00402EF5                 cmp     byte ptr [ebx], 0
.text:00402EF8                 jnz     short loc_402EAB
.text:00402EFA
.text:00402EFA loc_402EFA:                             ; CODE XREF: sub_4025D0+8D1↑j
.text:00402EFA                 cmp     [ebp+var_7B], 0
.text:00402EFE                 jz      short loc_402F07
.text:00402F00                 mov     [ebp+var_8D], 1
.text:00402F07
.text:00402F07 loc_402F07:                             ; CODE XREF: sub_4025D0+90F↑j
.text:00402F07                                         ; sub_4025D0+92E↑j
.text:00402F07                 movzx   edx, [ebp+var_8D]
.text:00402F0E                 mov     esi, esi
.text:00402F10
.text:00402F10 loc_402F10:                             ; CODE XREF: sub_4025D0+D1D↓j
.text:00402F10                                         ; sub_4025D0+E91↓j ...
.text:00402F10                 mov     [ebp+var_7B], dl
.text:00402F13                 jmp     loc_402710
.text:00402F18 ; ---------------------------------------------------------------------------
.text:00402F18
.text:00402F18 loc_402F18:                             ; CODE XREF: sub_4025D0+916↑j
.text:00402F18                                         ; sub_4025D0+AE9↓j ...
.text:00402F18                 mov     [esp+0C8h+var_C0], 3D9h
.text:00402F20                 mov     [esp+0C8h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/od.c"
.text:00402F28                 mov     [esp+0C8h+Category], offset aSNext ; "s != next"
.text:00402F2F
.text:00402F2F loc_402F2F:                             ; CODE XREF: sub_4025D0+9A8↓j
.text:00402F2F                 call    _assert
.text:00402F34 ; ---------------------------------------------------------------------------
.text:00402F34
.text:00402F34 loc_402F34:                             ; CODE XREF: sub_4025D0+8E1↑j
.text:00402F34                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00402F3C                 mov     ecx, ds:dword_4150D0
.text:00402F42                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00402F4A                 mov     [esp+0C8h+Category], ecx ; void *
.text:00402F4D                 call    sub_408AA0
.text:00402F52                 mov     ds:dword_4150D0, eax
.text:00402F57                 mov     eax, ds:dword_4150E0
.text:00402F5C                 jmp     loc_402EB7
.text:00402F61 ; ---------------------------------------------------------------------------
.text:00402F61
.text:00402F61 loc_402F61:                             ; CODE XREF: sub_4025D0+8C4↑j
.text:00402F61                                         ; sub_4025D0+A9B↓j ...
.text:00402F61                 mov     [esp+0C8h+var_C0], 3CDh
.text:00402F69                 mov     [esp+0C8h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/od.c"
.text:00402F71                 mov     [esp+0C8h+Category], offset aSNull ; "s != NULL"
.text:00402F78                 jmp     short loc_402F2F
.text:00402F7A ; ---------------------------------------------------------------------------
.text:00402F7A
.text:00402F7A loc_402F7A:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00402F7A                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00402F7A                 mov     [ebp+var_79], 1 ; jumptable 0040274F case 78
.text:00402F7E                 mov     ecx, ds:dword_415690
.text:00402F84                 mov     ds:byte_415010, 1
.text:00402F8B                 mov     [esp+0C8h+Str], offset aBkm ; "bkm"
.text:00402F93                 mov     dword ptr [esp+0C8h+var_BC], offset dword_4150B0 ; int
.text:00402F9B                 mov     [esp+0C8h+var_C0], 0 ; int
.text:00402FA3                 mov     [esp+0C8h+Locale], 0 ; int
.text:00402FAB                 mov     [esp+0C8h+Category], ecx ; int
.text:00402FAE                 call    sub_408CE0
.text:00402FB3                 test    eax, eax
.text:00402FB5                 jz      loc_402710
.text:00402FBB                 cmp     eax, 3
.text:00402FBE                 ja      short loc_40302F
.text:00402FC0                 cmp     eax, 2
.text:00402FC3                 jnb     short loc_40300A
.text:00402FC5                 dec     eax
.text:00402FC6                 jnz     loc_404662
.text:00402FCC                 mov     [esp+0C8h+Category], offset aLimitArgument ; "limit argument"
.text:00402FD3
.text:00402FD3 loc_402FD3:                             ; CODE XREF: sub_4025D0+12B7↓j
.text:00402FD3                 call    ds:libintl_gettext
.text:00402FD9                 mov     [esp+0C8h+var_C0], offset aSSTooLarge ; "%s `%s' too large"
.text:00402FE1                 mov     esi, ds:dword_415690
.text:00402FE7                 mov     dword ptr [esp+0C8h+var_BC], eax ; char
.text:00402FEB                 mov     [esp+0C8h+Str], esi
.text:00402FEF
.text:00402FEF loc_402FEF:                             ; CODE XREF: sub_4025D0+A5D↓j
.text:00402FEF                                         ; sub_4025D0+A8B↓j
.text:00402FEF                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00402FF7                 mov     ecx, Code
.text:00402FFD                 mov     [esp+0C8h+Category], ecx ; Code
.text:00403000                 call    sub_40ADC0
.text:00403005                 jmp     loc_402710
.text:0040300A ; ---------------------------------------------------------------------------
.text:0040300A
.text:0040300A loc_40300A:                             ; CODE XREF: sub_4025D0+9F3↑j
.text:0040300A                 mov     [esp+0C8h+Category], offset aLimitArgument ; "limit argument"
.text:00403011
.text:00403011 loc_403011:                             ; CODE XREF: sub_4025D0+12C3↓j
.text:00403011                 call    ds:libintl_gettext
.text:00403017                 mov     [esp+0C8h+var_C0], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:0040301F                 mov     ebx, ds:dword_415690
.text:00403025                 mov     dword ptr [esp+0C8h+var_BC], eax
.text:00403029                 mov     [esp+0C8h+Str], ebx
.text:0040302D                 jmp     short loc_402FEF
.text:0040302F ; ---------------------------------------------------------------------------
.text:0040302F
.text:0040302F loc_40302F:                             ; CODE XREF: sub_4025D0+9EE↑j
.text:0040302F                 cmp     eax, 4
.text:00403032                 jnz     loc_404662
.text:00403038                 mov     [esp+0C8h+Category], offset aLimitArgument ; "limit argument"
.text:0040303F
.text:0040303F loc_40303F:                             ; CODE XREF: sub_4025D0+12D8↓j
.text:0040303F                 call    ds:libintl_gettext
.text:00403045                 mov     [esp+0C8h+var_C0], offset aInvalidSS ; "invalid %s `%s'"
.text:0040304D                 mov     edx, ds:dword_415690
.text:00403053                 mov     dword ptr [esp+0C8h+var_BC], eax
.text:00403057                 mov     [esp+0C8h+Str], edx
.text:0040305B                 jmp     short loc_402FEF
.text:0040305D ; ---------------------------------------------------------------------------
.text:0040305D
.text:0040305D loc_40305D:                             ; CODE XREF: sub_4025D0+17F↑j
.text:0040305D                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:0040305D                 mov     [ebp+var_94], 0 ; jumptable 0040274F case 79
.text:00403064                 mov     ebx, offset aO4 ; "o4"
.text:00403069                 test    ebx, ebx
.text:0040306B                 jz      loc_402F61
.text:00403071                 cmp     byte ptr ds:aO4, 0 ; "o4"
.text:00403078                 jz      short loc_4030D1
.text:0040307A                 mov     eax, ds:dword_4150E0
.text:0040307F                 lea     esi, [ebp+var_48]
.text:00403082
.text:00403082 loc_403082:                             ; CODE XREF: sub_4025D0+AFF↓j
.text:00403082                 cmp     ds:dword_4150F0, eax
.text:00403088                 jbe     short loc_4030F8
.text:0040308A
.text:0040308A loc_40308A:                             ; CODE XREF: sub_4025D0+B50↓j
.text:0040308A                 mov     [esp+0C8h+var_C0], esi
.text:0040308E                 mov     ecx, ds:dword_4150D0
.text:00403094                 lea     edx, [eax+eax*2]
.text:00403097                 mov     [esp+0C8h+Locale], ebx
.text:0040309B                 shl     edx, 4
.text:0040309E                 mov     [esp+0C8h+Category], offset aO4 ; "o4"
.text:004030A5                 add     edx, ecx
.text:004030A7                 mov     dword ptr [esp+0C8h+var_BC], edx
.text:004030AB                 call    sub_404A80
.text:004030B0                 test    al, al
.text:004030B2                 jz      short loc_4030DE
.text:004030B4                 mov     eax, [ebp+var_48]
.text:004030B7                 cmp     ebx, eax
.text:004030B9                 jz      loc_402F18
.text:004030BF                 mov     ebx, eax
.text:004030C1                 mov     eax, ds:dword_4150E0
.text:004030C6                 inc     eax
.text:004030C7                 mov     ds:dword_4150E0, eax
.text:004030CC                 cmp     byte ptr [ebx], 0
.text:004030CF                 jnz     short loc_403082
.text:004030D1
.text:004030D1 loc_4030D1:                             ; CODE XREF: sub_4025D0+AA8↑j
.text:004030D1                 cmp     [ebp+var_7B], 0
.text:004030D5                 jz      short loc_4030DE
.text:004030D7                 mov     [ebp+var_94], 1
.text:004030DE
.text:004030DE loc_4030DE:                             ; CODE XREF: sub_4025D0+AE2↑j
.text:004030DE                                         ; sub_4025D0+B05↑j
.text:004030DE                 movzx   eax, [ebp+var_94]
.text:004030E5                 lea     esi, [esi+0]
.text:004030E9                 lea     edi, [edi+0]
.text:004030F0
.text:004030F0 loc_4030F0:                             ; CODE XREF: sub_4025D0+DD7↓j
.text:004030F0                                         ; sub_4025D0+F4B↓j ...
.text:004030F0                 mov     [ebp+var_7B], al
.text:004030F3                 jmp     loc_402710
.text:004030F8 ; ---------------------------------------------------------------------------
.text:004030F8
.text:004030F8 loc_4030F8:                             ; CODE XREF: sub_4025D0+AB8↑j
.text:004030F8                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00403100                 mov     edx, ds:dword_4150D0
.text:00403106                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:0040310E                 mov     [esp+0C8h+Category], edx ; void *
.text:00403111                 call    sub_408AA0
.text:00403116                 mov     ds:dword_4150D0, eax
.text:0040311B                 mov     eax, ds:dword_4150E0
.text:00403120                 jmp     loc_40308A
.text:00403125 ; ---------------------------------------------------------------------------
.text:00403125
.text:00403125 loc_403125:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403125                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403125                 mov     [ebp+var_79], 1 ; jumptable 0040274F case 83
.text:00403129                 mov     edx, ds:dword_415690
.text:0040312F                 test    edx, edx
.text:00403131                 jnz     short loc_403149
.text:00403133                 mov     eax, 3
.text:00403138                 mov     ds:dword_415050, eax
.text:0040313D
.text:0040313D loc_40313D:                             ; CODE XREF: sub_4025D0+C06↓j
.text:0040313D                 mov     ds:byte_415060, 1
.text:00403144                 jmp     loc_402710
.text:00403149 ; ---------------------------------------------------------------------------
.text:00403149
.text:00403149 loc_403149:                             ; CODE XREF: sub_4025D0+B61↑j
.text:00403149                 mov     [esp+0C8h+Str], offset aBkm ; "bkm"
.text:00403151                 lea     ebx, [ebp+var_18]
.text:00403154                 mov     dword ptr [esp+0C8h+var_BC], ebx ; int
.text:00403158                 mov     [esp+0C8h+var_C0], 0 ; int
.text:00403160                 mov     [esp+0C8h+Locale], 0 ; int
.text:00403168                 mov     [esp+0C8h+Category], edx ; int
.text:0040316B                 call    sub_408CE0
.text:00403170                 test    eax, eax
.text:00403172                 jz      short loc_4031C6
.text:00403174                 cmp     eax, 3
.text:00403177                 ja      loc_403234
.text:0040317D                 cmp     eax, 2
.text:00403180                 jnb     loc_40320C
.text:00403186                 dec     eax
.text:00403187                 jnz     loc_404662
.text:0040318D                 mov     [esp+0C8h+Category], offset aMinimumStringL ; "minimum string length"
.text:00403194                 call    ds:libintl_gettext
.text:0040319A                 mov     [esp+0C8h+var_C0], offset aSSTooLarge ; "%s `%s' too large"
.text:004031A2                 mov     ebx, ds:dword_415690
.text:004031A8                 mov     dword ptr [esp+0C8h+var_BC], eax ; char
.text:004031AC                 mov     [esp+0C8h+Str], ebx
.text:004031B0
.text:004031B0 loc_4031B0:                             ; CODE XREF: sub_4025D0+C5F↓j
.text:004031B0                                         ; sub_4025D0+C90↓j
.text:004031B0                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:004031B8                 mov     ecx, Code
.text:004031BE                 mov     [esp+0C8h+Category], ecx ; Code
.text:004031C1                 call    sub_40ADC0
.text:004031C6
.text:004031C6 loc_4031C6:                             ; CODE XREF: sub_4025D0+BA2↑j
.text:004031C6                 mov     eax, [ebp+var_14]
.text:004031C9                 test    eax, eax
.text:004031CB                 jnz     short loc_4031DB
.text:004031CD
.text:004031CD loc_4031CD:                             ; CODE XREF: sub_4025D0+C3A↓j
.text:004031CD                 mov     esi, [ebp+var_18]
.text:004031D0                 mov     ds:dword_415050, esi
.text:004031D6                 jmp     loc_40313D
.text:004031DB ; ---------------------------------------------------------------------------
.text:004031DB
.text:004031DB loc_4031DB:                             ; CODE XREF: sub_4025D0+BFB↑j
.text:004031DB                 mov     [esp+0C8h+Category], offset aSIsTooLarge ; "%s is too large"
.text:004031E2                 call    ds:libintl_gettext
.text:004031E8                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:004031F0                 mov     edx, ds:dword_415690
.text:004031F6                 mov     [esp+0C8h+Category], 1 ; Code
.text:004031FD                 mov     dword ptr [esp+0C8h+var_BC], edx ; char
.text:00403201                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00403205                 call    sub_40ADC0
.text:0040320A                 jmp     short loc_4031CD
.text:0040320C ; ---------------------------------------------------------------------------
.text:0040320C
.text:0040320C loc_40320C:                             ; CODE XREF: sub_4025D0+BB0↑j
.text:0040320C                 mov     [esp+0C8h+Category], offset aMinimumStringL ; "minimum string length"
.text:00403213                 call    ds:libintl_gettext
.text:00403219                 mov     [esp+0C8h+var_C0], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:00403221                 mov     esi, ds:dword_415690
.text:00403227                 mov     dword ptr [esp+0C8h+var_BC], eax
.text:0040322B                 mov     [esp+0C8h+Str], esi
.text:0040322F                 jmp     loc_4031B0
.text:00403234 ; ---------------------------------------------------------------------------
.text:00403234
.text:00403234 loc_403234:                             ; CODE XREF: sub_4025D0+BA7↑j
.text:00403234                 cmp     eax, 4
.text:00403237                 jnz     loc_404662
.text:0040323D                 mov     [esp+0C8h+Category], offset aMinimumStringL ; "minimum string length"
.text:00403244                 call    ds:libintl_gettext
.text:0040324A                 mov     [esp+0C8h+var_C0], offset aInvalidSS ; "invalid %s `%s'"
.text:00403252                 mov     edx, ds:dword_415690
.text:00403258                 mov     dword ptr [esp+0C8h+var_BC], eax
.text:0040325C                 mov     [esp+0C8h+Str], edx
.text:00403260                 jmp     loc_4031B0
.text:00403265 ; ---------------------------------------------------------------------------
.text:00403265
.text:00403265 loc_403265:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403265                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403265                 mov     [ebp+var_91], 0 ; jumptable 0040274F cases 72,88
.text:0040326C                 mov     ebx, offset aX4 ; "x4"
.text:00403271                 test    ebx, ebx
.text:00403273                 jz      loc_402F61
.text:00403279                 cmp     byte ptr ds:aX4, 0 ; "x4"
.text:00403280                 jz      short loc_4032D9
.text:00403282                 mov     eax, ds:dword_4150E0
.text:00403287                 lea     esi, [ebp+var_3C]
.text:0040328A
.text:0040328A loc_40328A:                             ; CODE XREF: sub_4025D0+D07↓j
.text:0040328A                 cmp     ds:dword_4150F0, eax
.text:00403290                 jbe     short loc_4032F2
.text:00403292
.text:00403292 loc_403292:                             ; CODE XREF: sub_4025D0+D4A↓j
.text:00403292                 mov     [esp+0C8h+var_C0], esi
.text:00403296                 mov     edx, ds:dword_4150D0
.text:0040329C                 lea     ecx, [eax+eax*2]
.text:0040329F                 mov     [esp+0C8h+Locale], ebx
.text:004032A3                 shl     ecx, 4
.text:004032A6                 mov     [esp+0C8h+Category], offset aX4 ; "x4"
.text:004032AD                 add     ecx, edx
.text:004032AF                 mov     dword ptr [esp+0C8h+var_BC], ecx
.text:004032B3                 call    sub_404A80
.text:004032B8                 test    al, al
.text:004032BA                 jz      short loc_4032E6
.text:004032BC                 mov     eax, [ebp+var_3C]
.text:004032BF                 cmp     ebx, eax
.text:004032C1                 jz      loc_402F18
.text:004032C7                 mov     ebx, eax
.text:004032C9                 mov     eax, ds:dword_4150E0
.text:004032CE                 inc     eax
.text:004032CF                 mov     ds:dword_4150E0, eax
.text:004032D4                 cmp     byte ptr [ebx], 0
.text:004032D7                 jnz     short loc_40328A
.text:004032D9
.text:004032D9 loc_4032D9:                             ; CODE XREF: sub_4025D0+CB0↑j
.text:004032D9                 cmp     [ebp+var_7B], 0
.text:004032DD                 jz      short loc_4032E6
.text:004032DF                 mov     [ebp+var_91], 1
.text:004032E6
.text:004032E6 loc_4032E6:                             ; CODE XREF: sub_4025D0+CEA↑j
.text:004032E6                                         ; sub_4025D0+D0D↑j
.text:004032E6                 movzx   edx, [ebp+var_91]
.text:004032ED                 jmp     loc_402F10
.text:004032F2 ; ---------------------------------------------------------------------------
.text:004032F2
.text:004032F2 loc_4032F2:                             ; CODE XREF: sub_4025D0+CC0↑j
.text:004032F2                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:004032FA                 mov     ecx, ds:dword_4150D0
.text:00403300                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00403308                 mov     [esp+0C8h+Category], ecx ; void *
.text:0040330B                 call    sub_408AA0
.text:00403310                 mov     ds:dword_4150D0, eax
.text:00403315                 mov     eax, ds:dword_4150E0
.text:0040331A                 jmp     loc_403292
.text:0040331F ; ---------------------------------------------------------------------------
.text:0040331F
.text:0040331F loc_40331F:                             ; CODE XREF: sub_4025D0+17F↑j
.text:0040331F                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:0040331F                 mov     [ebp+var_8A], 0 ; jumptable 0040274F case 97
.text:00403326                 mov     ebx, offset aA  ; "a"
.text:0040332B                 test    ebx, ebx
.text:0040332D                 jz      loc_402F61
.text:00403333                 cmp     byte ptr ds:aA, 0 ; "a"
.text:0040333A                 jz      short loc_403393
.text:0040333C                 mov     eax, ds:dword_4150E0
.text:00403341                 lea     esi, [ebp+var_20]
.text:00403344
.text:00403344 loc_403344:                             ; CODE XREF: sub_4025D0+DC1↓j
.text:00403344                 cmp     ds:dword_4150F0, eax
.text:0040334A                 jbe     short loc_4033AC
.text:0040334C
.text:0040334C loc_40334C:                             ; CODE XREF: sub_4025D0+E04↓j
.text:0040334C                 mov     [esp+0C8h+var_C0], esi
.text:00403350                 mov     ecx, ds:dword_4150D0
.text:00403356                 lea     edx, [eax+eax*2]
.text:00403359                 mov     [esp+0C8h+Locale], ebx
.text:0040335D                 shl     edx, 4
.text:00403360                 mov     [esp+0C8h+Category], offset aA ; "a"
.text:00403367                 add     edx, ecx
.text:00403369                 mov     dword ptr [esp+0C8h+var_BC], edx
.text:0040336D                 call    sub_404A80
.text:00403372                 test    al, al
.text:00403374                 jz      short loc_4033A0
.text:00403376                 mov     eax, [ebp+var_20]
.text:00403379                 cmp     ebx, eax
.text:0040337B                 jz      loc_402F18
.text:00403381                 mov     ebx, eax
.text:00403383                 mov     eax, ds:dword_4150E0
.text:00403388                 inc     eax
.text:00403389                 mov     ds:dword_4150E0, eax
.text:0040338E                 cmp     byte ptr [ebx], 0
.text:00403391                 jnz     short loc_403344
.text:00403393
.text:00403393 loc_403393:                             ; CODE XREF: sub_4025D0+D6A↑j
.text:00403393                 cmp     [ebp+var_7B], 0
.text:00403397                 jz      short loc_4033A0
.text:00403399                 mov     [ebp+var_8A], 1
.text:004033A0
.text:004033A0 loc_4033A0:                             ; CODE XREF: sub_4025D0+DA4↑j
.text:004033A0                                         ; sub_4025D0+DC7↑j
.text:004033A0                 movzx   eax, [ebp+var_8A]
.text:004033A7                 jmp     loc_4030F0
.text:004033AC ; ---------------------------------------------------------------------------
.text:004033AC
.text:004033AC loc_4033AC:                             ; CODE XREF: sub_4025D0+D7A↑j
.text:004033AC                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:004033B4                 mov     edx, ds:dword_4150D0
.text:004033BA                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:004033C2                 mov     [esp+0C8h+Category], edx ; void *
.text:004033C5                 call    sub_408AA0
.text:004033CA                 mov     ds:dword_4150D0, eax
.text:004033CF                 mov     eax, ds:dword_4150E0
.text:004033D4                 jmp     loc_40334C
.text:004033D9 ; ---------------------------------------------------------------------------
.text:004033D9
.text:004033D9 loc_4033D9:                             ; CODE XREF: sub_4025D0+17F↑j
.text:004033D9                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:004033D9                 mov     [ebp+var_8B], 0 ; jumptable 0040274F case 98
.text:004033E0                 mov     ebx, offset aO1 ; "o1"
.text:004033E5                 test    ebx, ebx
.text:004033E7                 jz      loc_402F61
.text:004033ED                 cmp     byte ptr ds:aO1, 0 ; "o1"
.text:004033F4                 jz      short loc_40344D
.text:004033F6                 mov     eax, ds:dword_4150E0
.text:004033FB                 lea     esi, [ebp+var_24]
.text:004033FE
.text:004033FE loc_4033FE:                             ; CODE XREF: sub_4025D0+E7B↓j
.text:004033FE                 cmp     ds:dword_4150F0, eax
.text:00403404                 jbe     short loc_403466
.text:00403406
.text:00403406 loc_403406:                             ; CODE XREF: sub_4025D0+EBE↓j
.text:00403406                 mov     [esp+0C8h+var_C0], esi
.text:0040340A                 mov     edx, ds:dword_4150D0
.text:00403410                 lea     ecx, [eax+eax*2]
.text:00403413                 mov     [esp+0C8h+Locale], ebx
.text:00403417                 shl     ecx, 4
.text:0040341A                 mov     [esp+0C8h+Category], offset aO1 ; "o1"
.text:00403421                 add     ecx, edx
.text:00403423                 mov     dword ptr [esp+0C8h+var_BC], ecx
.text:00403427                 call    sub_404A80
.text:0040342C                 test    al, al
.text:0040342E                 jz      short loc_40345A
.text:00403430                 mov     eax, [ebp+var_24]
.text:00403433                 cmp     ebx, eax
.text:00403435                 jz      loc_402F18
.text:0040343B                 mov     ebx, eax
.text:0040343D                 mov     eax, ds:dword_4150E0
.text:00403442                 inc     eax
.text:00403443                 mov     ds:dword_4150E0, eax
.text:00403448                 cmp     byte ptr [ebx], 0
.text:0040344B                 jnz     short loc_4033FE
.text:0040344D
.text:0040344D loc_40344D:                             ; CODE XREF: sub_4025D0+E24↑j
.text:0040344D                 cmp     [ebp+var_7B], 0
.text:00403451                 jz      short loc_40345A
.text:00403453                 mov     [ebp+var_8B], 1
.text:0040345A
.text:0040345A loc_40345A:                             ; CODE XREF: sub_4025D0+E5E↑j
.text:0040345A                                         ; sub_4025D0+E81↑j
.text:0040345A                 movzx   edx, [ebp+var_8B]
.text:00403461                 jmp     loc_402F10
.text:00403466 ; ---------------------------------------------------------------------------
.text:00403466
.text:00403466 loc_403466:                             ; CODE XREF: sub_4025D0+E34↑j
.text:00403466                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:0040346E                 mov     ecx, ds:dword_4150D0
.text:00403474                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:0040347C                 mov     [esp+0C8h+Category], ecx ; void *
.text:0040347F                 call    sub_408AA0
.text:00403484                 mov     ds:dword_4150D0, eax
.text:00403489                 mov     eax, ds:dword_4150E0
.text:0040348E                 jmp     loc_403406
.text:00403493 ; ---------------------------------------------------------------------------
.text:00403493
.text:00403493 loc_403493:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403493                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403493                 mov     [ebp+var_8C], 0 ; jumptable 0040274F case 99
.text:0040349A                 mov     ebx, offset aC  ; "c"
.text:0040349F                 test    ebx, ebx
.text:004034A1                 jz      loc_402F61
.text:004034A7                 cmp     byte ptr ds:aC, 0 ; "c"
.text:004034AE                 jz      short loc_403507
.text:004034B0                 mov     eax, ds:dword_4150E0
.text:004034B5                 lea     esi, [ebp+var_28]
.text:004034B8
.text:004034B8 loc_4034B8:                             ; CODE XREF: sub_4025D0+F35↓j
.text:004034B8                 cmp     ds:dword_4150F0, eax
.text:004034BE                 jbe     short loc_403520
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_4025D0+F78↓j
.text:004034C0                 mov     [esp+0C8h+var_C0], esi
.text:004034C4                 mov     ecx, ds:dword_4150D0
.text:004034CA                 lea     edx, [eax+eax*2]
.text:004034CD                 mov     [esp+0C8h+Locale], ebx
.text:004034D1                 shl     edx, 4
.text:004034D4                 mov     [esp+0C8h+Category], offset aC ; "c"
.text:004034DB                 add     edx, ecx
.text:004034DD                 mov     dword ptr [esp+0C8h+var_BC], edx
.text:004034E1                 call    sub_404A80
.text:004034E6                 test    al, al
.text:004034E8                 jz      short loc_403514
.text:004034EA                 mov     eax, [ebp+var_28]
.text:004034ED                 cmp     ebx, eax
.text:004034EF                 jz      loc_402F18
.text:004034F5                 mov     ebx, eax
.text:004034F7                 mov     eax, ds:dword_4150E0
.text:004034FC                 inc     eax
.text:004034FD                 mov     ds:dword_4150E0, eax
.text:00403502                 cmp     byte ptr [ebx], 0
.text:00403505                 jnz     short loc_4034B8
.text:00403507
.text:00403507 loc_403507:                             ; CODE XREF: sub_4025D0+EDE↑j
.text:00403507                 cmp     [ebp+var_7B], 0
.text:0040350B                 jz      short loc_403514
.text:0040350D                 mov     [ebp+var_8C], 1
.text:00403514
.text:00403514 loc_403514:                             ; CODE XREF: sub_4025D0+F18↑j
.text:00403514                                         ; sub_4025D0+F3B↑j
.text:00403514                 movzx   eax, [ebp+var_8C]
.text:0040351B                 jmp     loc_4030F0
.text:00403520 ; ---------------------------------------------------------------------------
.text:00403520
.text:00403520 loc_403520:                             ; CODE XREF: sub_4025D0+EEE↑j
.text:00403520                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00403528                 mov     edx, ds:dword_4150D0
.text:0040352E                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00403536                 mov     [esp+0C8h+Category], edx ; void *
.text:00403539                 call    sub_408AA0
.text:0040353E                 mov     ds:dword_4150D0, eax
.text:00403543                 mov     eax, ds:dword_4150E0
.text:00403548                 jmp     loc_4034C0
.text:0040354D ; ---------------------------------------------------------------------------
.text:0040354D
.text:0040354D loc_40354D:                             ; CODE XREF: sub_4025D0+17F↑j
.text:0040354D                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:0040354D                 mov     [ebp+var_8E], 0 ; jumptable 0040274F case 100
.text:00403554                 mov     ebx, offset aU2 ; "u2"
.text:00403559                 test    ebx, ebx
.text:0040355B                 jz      loc_402F61
.text:00403561                 cmp     byte ptr ds:aU2, 0 ; "u2"
.text:00403568                 jz      short loc_4035C1
.text:0040356A                 mov     eax, ds:dword_4150E0
.text:0040356F                 lea     esi, [ebp+var_30]
.text:00403572
.text:00403572 loc_403572:                             ; CODE XREF: sub_4025D0+FEF↓j
.text:00403572                 cmp     ds:dword_4150F0, eax
.text:00403578                 jbe     short loc_4035DA
.text:0040357A
.text:0040357A loc_40357A:                             ; CODE XREF: sub_4025D0+1032↓j
.text:0040357A                 mov     [esp+0C8h+var_C0], esi
.text:0040357E                 mov     ecx, ds:dword_4150D0
.text:00403584                 lea     edx, [eax+eax*2]
.text:00403587                 mov     [esp+0C8h+Locale], ebx
.text:0040358B                 shl     edx, 4
.text:0040358E                 mov     [esp+0C8h+Category], offset aU2 ; "u2"
.text:00403595                 add     edx, ecx
.text:00403597                 mov     dword ptr [esp+0C8h+var_BC], edx
.text:0040359B                 call    sub_404A80
.text:004035A0                 test    al, al
.text:004035A2                 jz      short loc_4035CE
.text:004035A4                 mov     eax, [ebp+var_30]
.text:004035A7                 cmp     ebx, eax
.text:004035A9                 jz      loc_402F18
.text:004035AF                 mov     ebx, eax
.text:004035B1                 mov     eax, ds:dword_4150E0
.text:004035B6                 inc     eax
.text:004035B7                 mov     ds:dword_4150E0, eax
.text:004035BC                 cmp     byte ptr [ebx], 0
.text:004035BF                 jnz     short loc_403572
.text:004035C1
.text:004035C1 loc_4035C1:                             ; CODE XREF: sub_4025D0+F98↑j
.text:004035C1                 cmp     [ebp+var_7B], 0
.text:004035C5                 jz      short loc_4035CE
.text:004035C7                 mov     [ebp+var_8E], 1
.text:004035CE
.text:004035CE loc_4035CE:                             ; CODE XREF: sub_4025D0+FD2↑j
.text:004035CE                                         ; sub_4025D0+FF5↑j
.text:004035CE                 movzx   eax, [ebp+var_8E]
.text:004035D5                 jmp     loc_4030F0
.text:004035DA ; ---------------------------------------------------------------------------
.text:004035DA
.text:004035DA loc_4035DA:                             ; CODE XREF: sub_4025D0+FA8↑j
.text:004035DA                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:004035E2                 mov     edx, ds:dword_4150D0
.text:004035E8                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:004035F0                 mov     [esp+0C8h+Category], edx ; void *
.text:004035F3                 call    sub_408AA0
.text:004035F8                 mov     ds:dword_4150D0, eax
.text:004035FD                 mov     eax, ds:dword_4150E0
.text:00403602                 jmp     loc_40357A
.text:00403607 ; ---------------------------------------------------------------------------
.text:00403607
.text:00403607 loc_403607:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403607                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403607                 mov     [ebp+var_8F], 0 ; jumptable 0040274F cases 70,101
.text:0040360E                 mov     ebx, offset aFd ; "fD"
.text:00403613                 test    ebx, ebx
.text:00403615                 jz      loc_402F61
.text:0040361B                 cmp     byte ptr ds:aFd, 0 ; "fD"
.text:00403622                 jz      short loc_40367B
.text:00403624                 mov     eax, ds:dword_4150E0
.text:00403629                 lea     esi, [ebp+var_34]
.text:0040362C
.text:0040362C loc_40362C:                             ; CODE XREF: sub_4025D0+10A9↓j
.text:0040362C                 cmp     ds:dword_4150F0, eax
.text:00403632                 jbe     short loc_403694
.text:00403634
.text:00403634 loc_403634:                             ; CODE XREF: sub_4025D0+10EC↓j
.text:00403634                 mov     [esp+0C8h+var_C0], esi
.text:00403638                 mov     edx, ds:dword_4150D0
.text:0040363E                 lea     ecx, [eax+eax*2]
.text:00403641                 mov     [esp+0C8h+Locale], ebx
.text:00403645                 shl     ecx, 4
.text:00403648                 mov     [esp+0C8h+Category], offset aFd ; "fD"
.text:0040364F                 add     ecx, edx
.text:00403651                 mov     dword ptr [esp+0C8h+var_BC], ecx
.text:00403655                 call    sub_404A80
.text:0040365A                 test    al, al
.text:0040365C                 jz      short loc_403688
.text:0040365E                 mov     eax, [ebp+var_34]
.text:00403661                 cmp     ebx, eax
.text:00403663                 jz      loc_402F18
.text:00403669                 mov     ebx, eax
.text:0040366B                 mov     eax, ds:dword_4150E0
.text:00403670                 inc     eax
.text:00403671                 mov     ds:dword_4150E0, eax
.text:00403676                 cmp     byte ptr [ebx], 0
.text:00403679                 jnz     short loc_40362C
.text:0040367B
.text:0040367B loc_40367B:                             ; CODE XREF: sub_4025D0+1052↑j
.text:0040367B                 cmp     [ebp+var_7B], 0
.text:0040367F                 jz      short loc_403688
.text:00403681                 mov     [ebp+var_8F], 1
.text:00403688
.text:00403688 loc_403688:                             ; CODE XREF: sub_4025D0+108C↑j
.text:00403688                                         ; sub_4025D0+10AF↑j
.text:00403688                 movzx   edx, [ebp+var_8F]
.text:0040368F                 jmp     loc_402F10
.text:00403694 ; ---------------------------------------------------------------------------
.text:00403694
.text:00403694 loc_403694:                             ; CODE XREF: sub_4025D0+1062↑j
.text:00403694                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:0040369C                 mov     ecx, ds:dword_4150D0
.text:004036A2                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:004036AA                 mov     [esp+0C8h+Category], ecx ; void *
.text:004036AD                 call    sub_408AA0
.text:004036B2                 mov     ds:dword_4150D0, eax
.text:004036B7                 mov     eax, ds:dword_4150E0
.text:004036BC                 jmp     loc_403634
.text:004036C1 ; ---------------------------------------------------------------------------
.text:004036C1
.text:004036C1 loc_4036C1:                             ; CODE XREF: sub_4025D0+17F↑j
.text:004036C1                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:004036C1                 mov     [ebp+var_90], 0 ; jumptable 0040274F case 102
.text:004036C8                 mov     ebx, offset aFf ; "fF"
.text:004036CD                 test    ebx, ebx
.text:004036CF                 jz      loc_402F61
.text:004036D5                 cmp     byte ptr ds:aFf, 0 ; "fF"
.text:004036DC                 jz      short loc_403735
.text:004036DE                 mov     eax, ds:dword_4150E0
.text:004036E3                 lea     esi, [ebp+var_38]
.text:004036E6
.text:004036E6 loc_4036E6:                             ; CODE XREF: sub_4025D0+1163↓j
.text:004036E6                 cmp     ds:dword_4150F0, eax
.text:004036EC                 jbe     short loc_40374E
.text:004036EE
.text:004036EE loc_4036EE:                             ; CODE XREF: sub_4025D0+11A6↓j
.text:004036EE                 mov     [esp+0C8h+var_C0], esi
.text:004036F2                 mov     ecx, ds:dword_4150D0
.text:004036F8                 lea     edx, [eax+eax*2]
.text:004036FB                 mov     [esp+0C8h+Locale], ebx
.text:004036FF                 shl     edx, 4
.text:00403702                 mov     [esp+0C8h+Category], offset aFf ; "fF"
.text:00403709                 add     edx, ecx
.text:0040370B                 mov     dword ptr [esp+0C8h+var_BC], edx
.text:0040370F                 call    sub_404A80
.text:00403714                 test    al, al
.text:00403716                 jz      short loc_403742
.text:00403718                 mov     eax, [ebp+var_38]
.text:0040371B                 cmp     ebx, eax
.text:0040371D                 jz      loc_402F18
.text:00403723                 mov     ebx, eax
.text:00403725                 mov     eax, ds:dword_4150E0
.text:0040372A                 inc     eax
.text:0040372B                 mov     ds:dword_4150E0, eax
.text:00403730                 cmp     byte ptr [ebx], 0
.text:00403733                 jnz     short loc_4036E6
.text:00403735
.text:00403735 loc_403735:                             ; CODE XREF: sub_4025D0+110C↑j
.text:00403735                 cmp     [ebp+var_7B], 0
.text:00403739                 jz      short loc_403742
.text:0040373B                 mov     [ebp+var_90], 1
.text:00403742
.text:00403742 loc_403742:                             ; CODE XREF: sub_4025D0+1146↑j
.text:00403742                                         ; sub_4025D0+1169↑j
.text:00403742                 movzx   eax, [ebp+var_90]
.text:00403749                 jmp     loc_4030F0
.text:0040374E ; ---------------------------------------------------------------------------
.text:0040374E
.text:0040374E loc_40374E:                             ; CODE XREF: sub_4025D0+111C↑j
.text:0040374E                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00403756                 mov     edx, ds:dword_4150D0
.text:0040375C                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00403764                 mov     [esp+0C8h+Category], edx ; void *
.text:00403767                 call    sub_408AA0
.text:0040376C                 mov     ds:dword_4150D0, eax
.text:00403771                 mov     eax, ds:dword_4150E0
.text:00403776                 jmp     loc_4036EE
.text:0040377B ; ---------------------------------------------------------------------------
.text:0040377B
.text:0040377B loc_40377B:                             ; CODE XREF: sub_4025D0+17F↑j
.text:0040377B                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:0040377B                 mov     [ebp+var_92], 0 ; jumptable 0040274F case 105
.text:00403782                 mov     ebx, offset aDi ; "dI"
.text:00403787                 test    ebx, ebx
.text:00403789                 jz      loc_402F61
.text:0040378F                 cmp     byte ptr ds:aDi, 0 ; "dI"
.text:00403796                 jz      short loc_4037EF
.text:00403798                 mov     eax, ds:dword_4150E0
.text:0040379D                 lea     esi, [ebp+var_40]
.text:004037A0
.text:004037A0 loc_4037A0:                             ; CODE XREF: sub_4025D0+121D↓j
.text:004037A0                 cmp     ds:dword_4150F0, eax
.text:004037A6                 jbe     short loc_403808
.text:004037A8
.text:004037A8 loc_4037A8:                             ; CODE XREF: sub_4025D0+1260↓j
.text:004037A8                 mov     [esp+0C8h+var_C0], esi
.text:004037AC                 mov     ecx, ds:dword_4150D0
.text:004037B2                 lea     edx, [eax+eax*2]
.text:004037B5                 mov     [esp+0C8h+Locale], ebx
.text:004037B9                 shl     edx, 4
.text:004037BC                 mov     [esp+0C8h+Category], offset aDi ; "dI"
.text:004037C3                 add     edx, ecx
.text:004037C5                 mov     dword ptr [esp+0C8h+var_BC], edx
.text:004037C9                 call    sub_404A80
.text:004037CE                 test    al, al
.text:004037D0                 jz      short loc_4037FC
.text:004037D2                 mov     eax, [ebp+var_40]
.text:004037D5                 cmp     ebx, eax
.text:004037D7                 jz      loc_402F18
.text:004037DD                 mov     ebx, eax
.text:004037DF                 mov     eax, ds:dword_4150E0
.text:004037E4                 inc     eax
.text:004037E5                 mov     ds:dword_4150E0, eax
.text:004037EA                 cmp     byte ptr [ebx], 0
.text:004037ED                 jnz     short loc_4037A0
.text:004037EF
.text:004037EF loc_4037EF:                             ; CODE XREF: sub_4025D0+11C6↑j
.text:004037EF                 cmp     [ebp+var_7B], 0
.text:004037F3                 jz      short loc_4037FC
.text:004037F5                 mov     [ebp+var_92], 1
.text:004037FC
.text:004037FC loc_4037FC:                             ; CODE XREF: sub_4025D0+1200↑j
.text:004037FC                                         ; sub_4025D0+1223↑j
.text:004037FC                 movzx   eax, [ebp+var_92]
.text:00403803                 jmp     loc_4030F0
.text:00403808 ; ---------------------------------------------------------------------------
.text:00403808
.text:00403808 loc_403808:                             ; CODE XREF: sub_4025D0+11D6↑j
.text:00403808                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00403810                 mov     edx, ds:dword_4150D0
.text:00403816                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:0040381E                 mov     [esp+0C8h+Category], edx ; void *
.text:00403821                 call    sub_408AA0
.text:00403826                 mov     ds:dword_4150D0, eax
.text:0040382B                 mov     eax, ds:dword_4150E0
.text:00403830                 jmp     loc_4037A8
.text:00403835 ; ---------------------------------------------------------------------------
.text:00403835
.text:00403835 loc_403835:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403835                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403835                 mov     [ebp+var_79], 1 ; jumptable 0040274F case 106
.text:00403839                 mov     esi, ds:dword_415690
.text:0040383F                 mov     [esp+0C8h+Str], offset aBkm ; "bkm"
.text:00403847                 mov     dword ptr [esp+0C8h+var_BC], offset dword_415000 ; int
.text:0040384F                 mov     [esp+0C8h+var_C0], 0 ; int
.text:00403857                 mov     [esp+0C8h+Locale], 0 ; int
.text:0040385F                 mov     [esp+0C8h+Category], esi ; int
.text:00403862                 call    sub_408CE0
.text:00403867                 test    eax, eax
.text:00403869                 jz      loc_402710
.text:0040386F                 cmp     eax, 3
.text:00403872                 ja      short loc_403898
.text:00403874                 cmp     eax, 2
.text:00403877                 jnb     short loc_40388C
.text:00403879                 dec     eax
.text:0040387A                 jnz     loc_404662
.text:00403880                 mov     [esp+0C8h+Category], offset aSkipArgument ; "skip argument"
.text:00403887                 jmp     loc_402FD3
.text:0040388C ; ---------------------------------------------------------------------------
.text:0040388C
.text:0040388C loc_40388C:                             ; CODE XREF: sub_4025D0+12A7↑j
.text:0040388C                 mov     [esp+0C8h+Category], offset aSkipArgument ; "skip argument"
.text:00403893                 jmp     loc_403011
.text:00403898 ; ---------------------------------------------------------------------------
.text:00403898
.text:00403898 loc_403898:                             ; CODE XREF: sub_4025D0+12A2↑j
.text:00403898                 cmp     eax, 4
.text:0040389B                 jnz     loc_404662
.text:004038A1                 mov     [esp+0C8h+Category], offset aSkipArgument ; "skip argument"
.text:004038A8                 jmp     loc_40303F
.text:004038AD ; ---------------------------------------------------------------------------
.text:004038AD
.text:004038AD loc_4038AD:                             ; CODE XREF: sub_4025D0+17F↑j
.text:004038AD                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:004038AD                 mov     [ebp+var_93], 0 ; jumptable 0040274F cases 73,76,108
.text:004038B4                 mov     ebx, offset aDl ; "dL"
.text:004038B9                 test    ebx, ebx
.text:004038BB                 jz      loc_402F61
.text:004038C1                 cmp     byte ptr ds:aDl, 0 ; "dL"
.text:004038C8                 jz      short loc_403921
.text:004038CA                 mov     eax, ds:dword_4150E0
.text:004038CF                 lea     esi, [ebp+var_44]
.text:004038D2
.text:004038D2 loc_4038D2:                             ; CODE XREF: sub_4025D0+134F↓j
.text:004038D2                 cmp     ds:dword_4150F0, eax
.text:004038D8                 jbe     short loc_40393A
.text:004038DA
.text:004038DA loc_4038DA:                             ; CODE XREF: sub_4025D0+1392↓j
.text:004038DA                 mov     [esp+0C8h+var_C0], esi
.text:004038DE                 mov     edx, ds:dword_4150D0
.text:004038E4                 lea     ecx, [eax+eax*2]
.text:004038E7                 mov     [esp+0C8h+Locale], ebx
.text:004038EB                 shl     ecx, 4
.text:004038EE                 mov     [esp+0C8h+Category], offset aDl ; "dL"
.text:004038F5                 add     ecx, edx
.text:004038F7                 mov     dword ptr [esp+0C8h+var_BC], ecx
.text:004038FB                 call    sub_404A80
.text:00403900                 test    al, al
.text:00403902                 jz      short loc_40392E
.text:00403904                 mov     eax, [ebp+var_44]
.text:00403907                 cmp     ebx, eax
.text:00403909                 jz      loc_402F18
.text:0040390F                 mov     ebx, eax
.text:00403911                 mov     eax, ds:dword_4150E0
.text:00403916                 inc     eax
.text:00403917                 mov     ds:dword_4150E0, eax
.text:0040391C                 cmp     byte ptr [ebx], 0
.text:0040391F                 jnz     short loc_4038D2
.text:00403921
.text:00403921 loc_403921:                             ; CODE XREF: sub_4025D0+12F8↑j
.text:00403921                 cmp     [ebp+var_7B], 0
.text:00403925                 jz      short loc_40392E
.text:00403927                 mov     [ebp+var_93], 1
.text:0040392E
.text:0040392E loc_40392E:                             ; CODE XREF: sub_4025D0+1332↑j
.text:0040392E                                         ; sub_4025D0+1355↑j
.text:0040392E                 movzx   edx, [ebp+var_93]
.text:00403935                 jmp     loc_402F10
.text:0040393A ; ---------------------------------------------------------------------------
.text:0040393A
.text:0040393A loc_40393A:                             ; CODE XREF: sub_4025D0+1308↑j
.text:0040393A                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00403942                 mov     ecx, ds:dword_4150D0
.text:00403948                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00403950                 mov     [esp+0C8h+Category], ecx ; void *
.text:00403953                 call    sub_408AA0
.text:00403958                 mov     ds:dword_4150D0, eax
.text:0040395D                 mov     eax, ds:dword_4150E0
.text:00403962                 jmp     loc_4038DA
.text:00403967 ; ---------------------------------------------------------------------------
.text:00403967
.text:00403967 loc_403967:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403967                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403967                 mov     [ebp+var_95], 0 ; jumptable 0040274F cases 66,111
.text:0040396E                 mov     ebx, offset aO2 ; "o2"
.text:00403973                 test    ebx, ebx
.text:00403975                 jz      loc_402F61
.text:0040397B                 cmp     byte ptr ds:aO2, 0 ; "o2"
.text:00403982                 jz      short loc_4039DB
.text:00403984                 mov     eax, ds:dword_4150E0
.text:00403989                 lea     esi, [ebp+var_4C]
.text:0040398C
.text:0040398C loc_40398C:                             ; CODE XREF: sub_4025D0+1409↓j
.text:0040398C                 cmp     ds:dword_4150F0, eax
.text:00403992                 jbe     short loc_4039F4
.text:00403994
.text:00403994 loc_403994:                             ; CODE XREF: sub_4025D0+144C↓j
.text:00403994                 mov     [esp+0C8h+var_C0], esi
.text:00403998                 mov     edx, ds:dword_4150D0
.text:0040399E                 lea     ecx, [eax+eax*2]
.text:004039A1                 mov     [esp+0C8h+Locale], ebx
.text:004039A5                 shl     ecx, 4
.text:004039A8                 mov     [esp+0C8h+Category], offset aO2 ; "o2"
.text:004039AF                 add     ecx, edx
.text:004039B1                 mov     dword ptr [esp+0C8h+var_BC], ecx
.text:004039B5                 call    sub_404A80
.text:004039BA                 test    al, al
.text:004039BC                 jz      short loc_4039E8
.text:004039BE                 mov     eax, [ebp+var_4C]
.text:004039C1                 cmp     ebx, eax
.text:004039C3                 jz      loc_402F18
.text:004039C9                 mov     ebx, eax
.text:004039CB                 mov     eax, ds:dword_4150E0
.text:004039D0                 inc     eax
.text:004039D1                 mov     ds:dword_4150E0, eax
.text:004039D6                 cmp     byte ptr [ebx], 0
.text:004039D9                 jnz     short loc_40398C
.text:004039DB
.text:004039DB loc_4039DB:                             ; CODE XREF: sub_4025D0+13B2↑j
.text:004039DB                 cmp     [ebp+var_7B], 0
.text:004039DF                 jz      short loc_4039E8
.text:004039E1                 mov     [ebp+var_95], 1
.text:004039E8
.text:004039E8 loc_4039E8:                             ; CODE XREF: sub_4025D0+13EC↑j
.text:004039E8                                         ; sub_4025D0+140F↑j
.text:004039E8                 movzx   edx, [ebp+var_95]
.text:004039EF                 jmp     loc_402F10
.text:004039F4 ; ---------------------------------------------------------------------------
.text:004039F4
.text:004039F4 loc_4039F4:                             ; CODE XREF: sub_4025D0+13C2↑j
.text:004039F4                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:004039FC                 mov     ecx, ds:dword_4150D0
.text:00403A02                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00403A0A                 mov     [esp+0C8h+Category], ecx ; void *
.text:00403A0D                 call    sub_408AA0
.text:00403A12                 mov     ds:dword_4150D0, eax
.text:00403A17                 mov     eax, ds:dword_4150E0
.text:00403A1C                 jmp     loc_403994
.text:00403A21 ; ---------------------------------------------------------------------------
.text:00403A21
.text:00403A21 loc_403A21:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403A21                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403A21                 mov     [ebp+var_96], 0 ; jumptable 0040274F case 115
.text:00403A28                 mov     ebx, offset aD2 ; "d2"
.text:00403A2D                 test    ebx, ebx
.text:00403A2F                 jz      loc_402F61
.text:00403A35                 cmp     byte ptr ds:aD2, 0 ; "d2"
.text:00403A3C                 jz      short loc_403A95
.text:00403A3E                 mov     eax, ds:dword_4150E0
.text:00403A43                 lea     esi, [ebp+var_50]
.text:00403A46
.text:00403A46 loc_403A46:                             ; CODE XREF: sub_4025D0+14C3↓j
.text:00403A46                 cmp     ds:dword_4150F0, eax
.text:00403A4C                 jbe     short loc_403AAE
.text:00403A4E
.text:00403A4E loc_403A4E:                             ; CODE XREF: sub_4025D0+1506↓j
.text:00403A4E                 mov     [esp+0C8h+var_C0], esi
.text:00403A52                 mov     ecx, ds:dword_4150D0
.text:00403A58                 lea     edx, [eax+eax*2]
.text:00403A5B                 mov     [esp+0C8h+Locale], ebx
.text:00403A5F                 shl     edx, 4
.text:00403A62                 mov     [esp+0C8h+Category], offset aD2 ; "d2"
.text:00403A69                 add     edx, ecx
.text:00403A6B                 mov     dword ptr [esp+0C8h+var_BC], edx
.text:00403A6F                 call    sub_404A80
.text:00403A74                 test    al, al
.text:00403A76                 jz      short loc_403AA2
.text:00403A78                 mov     eax, [ebp+var_50]
.text:00403A7B                 cmp     ebx, eax
.text:00403A7D                 jz      loc_402F18
.text:00403A83                 mov     ebx, eax
.text:00403A85                 mov     eax, ds:dword_4150E0
.text:00403A8A                 inc     eax
.text:00403A8B                 mov     ds:dword_4150E0, eax
.text:00403A90                 cmp     byte ptr [ebx], 0
.text:00403A93                 jnz     short loc_403A46
.text:00403A95
.text:00403A95 loc_403A95:                             ; CODE XREF: sub_4025D0+146C↑j
.text:00403A95                 cmp     [ebp+var_7B], 0
.text:00403A99                 jz      short loc_403AA2
.text:00403A9B                 mov     [ebp+var_96], 1
.text:00403AA2
.text:00403AA2 loc_403AA2:                             ; CODE XREF: sub_4025D0+14A6↑j
.text:00403AA2                                         ; sub_4025D0+14C9↑j
.text:00403AA2                 movzx   eax, [ebp+var_96]
.text:00403AA9                 jmp     loc_4030F0
.text:00403AAE ; ---------------------------------------------------------------------------
.text:00403AAE
.text:00403AAE loc_403AAE:                             ; CODE XREF: sub_4025D0+147C↑j
.text:00403AAE                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00403AB6                 mov     edx, ds:dword_4150D0
.text:00403ABC                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00403AC4                 mov     [esp+0C8h+Category], edx ; void *
.text:00403AC7                 call    sub_408AA0
.text:00403ACC                 mov     ds:dword_4150D0, eax
.text:00403AD1                 mov     eax, ds:dword_4150E0
.text:00403AD6                 jmp     loc_403A4E
.text:00403ADB ; ---------------------------------------------------------------------------
.text:00403ADB
.text:00403ADB loc_403ADB:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403ADB                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403ADB                 mov     [ebp+var_79], 1 ; jumptable 0040274F case 116
.text:00403ADF                 mov     ebx, ds:dword_415690
.text:00403AE5                 mov     [ebp+var_89], 0
.text:00403AEC                 test    ebx, ebx
.text:00403AEE                 mov     esi, ebx
.text:00403AF0                 jz      loc_402F61
.text:00403AF6                 cmp     byte ptr [ebx], 0
.text:00403AF9                 jz      short loc_403B4E
.text:00403AFB                 mov     eax, ds:dword_4150E0
.text:00403B00
.text:00403B00 loc_403B00:                             ; CODE XREF: sub_4025D0+157C↓j
.text:00403B00                 cmp     ds:dword_4150F0, eax
.text:00403B06                 jbe     short loc_403B67
.text:00403B08
.text:00403B08 loc_403B08:                             ; CODE XREF: sub_4025D0+15BF↓j
.text:00403B08                 mov     [esp+0C8h+Locale], ebx
.text:00403B0C                 mov     edx, ds:dword_4150D0
.text:00403B12                 lea     ecx, [eax+eax*2]
.text:00403B15                 mov     [esp+0C8h+Category], esi
.text:00403B18                 shl     ecx, 4
.text:00403B1B                 add     ecx, edx
.text:00403B1D                 mov     dword ptr [esp+0C8h+var_BC], ecx
.text:00403B21                 lea     edx, [ebp+var_1C]
.text:00403B24                 mov     [esp+0C8h+var_C0], edx
.text:00403B28                 call    sub_404A80
.text:00403B2D                 test    al, al
.text:00403B2F                 jz      short loc_403B5B
.text:00403B31                 mov     eax, [ebp+var_1C]
.text:00403B34                 cmp     ebx, eax
.text:00403B36                 jz      loc_402F18
.text:00403B3C                 mov     ebx, eax
.text:00403B3E                 mov     eax, ds:dword_4150E0
.text:00403B43                 inc     eax
.text:00403B44                 mov     ds:dword_4150E0, eax
.text:00403B49                 cmp     byte ptr [ebx], 0
.text:00403B4C                 jnz     short loc_403B00
.text:00403B4E
.text:00403B4E loc_403B4E:                             ; CODE XREF: sub_4025D0+1529↑j
.text:00403B4E                 cmp     [ebp+var_7B], 0
.text:00403B52                 jz      short loc_403B5B
.text:00403B54                 mov     [ebp+var_89], 1
.text:00403B5B
.text:00403B5B loc_403B5B:                             ; CODE XREF: sub_4025D0+155F↑j
.text:00403B5B                                         ; sub_4025D0+1582↑j
.text:00403B5B                 movzx   edx, [ebp+var_89]
.text:00403B62                 jmp     loc_402F10
.text:00403B67 ; ---------------------------------------------------------------------------
.text:00403B67
.text:00403B67 loc_403B67:                             ; CODE XREF: sub_4025D0+1536↑j
.text:00403B67                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00403B6F                 mov     ecx, ds:dword_4150D0
.text:00403B75                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00403B7D                 mov     [esp+0C8h+Category], ecx ; void *
.text:00403B80                 call    sub_408AA0
.text:00403B85                 mov     ds:dword_4150D0, eax
.text:00403B8A                 mov     eax, ds:dword_4150E0
.text:00403B8F                 jmp     loc_403B08
.text:00403B94 ; ---------------------------------------------------------------------------
.text:00403B94
.text:00403B94 loc_403B94:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403B94                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403B94                 mov     [ebp+var_79], 1 ; jumptable 0040274F case 118
.text:00403B98                 mov     byte_414010, 0
.text:00403B9F                 jmp     loc_402710
.text:00403BA4 ; ---------------------------------------------------------------------------
.text:00403BA4
.text:00403BA4 loc_403BA4:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403BA4                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403BA4                 mov     [ebp+var_79], 1 ; jumptable 0040274F case 119
.text:00403BA8                 mov     edx, ds:dword_415690
.text:00403BAE                 mov     [ebp+var_7A], 1
.text:00403BB2                 mov     dword ptr [ebp+var_78], 20h ; ' '
.text:00403BB9                 test    edx, edx
.text:00403BBB                 jz      loc_402710
.text:00403BC1                 mov     [esp+0C8h+Str], offset Locale ; Str
.text:00403BC9                 lea     ebx, [ebp+var_60]
.text:00403BCC                 mov     dword ptr [esp+0C8h+var_BC], ebx ; int
.text:00403BD0                 mov     [esp+0C8h+var_C0], 0Ah ; int
.text:00403BD8                 mov     [esp+0C8h+Locale], 0 ; int
.text:00403BE0                 mov     [esp+0C8h+Category], edx ; int
.text:00403BE3                 call    sub_408CE0
.text:00403BE8                 test    eax, eax
.text:00403BEA                 jz      short loc_403C3E
.text:00403BEC                 cmp     eax, 3
.text:00403BEF                 ja      loc_403CA6
.text:00403BF5                 cmp     eax, 2
.text:00403BF8                 jnb     loc_403C81
.text:00403BFE                 dec     eax
.text:00403BFF                 jnz     loc_404662
.text:00403C05                 mov     [esp+0C8h+Category], offset aWidthSpecifica ; "width specification"
.text:00403C0C                 call    ds:libintl_gettext
.text:00403C12                 mov     [esp+0C8h+var_C0], offset aSSTooLarge ; "%s `%s' too large"
.text:00403C1A                 mov     ebx, ds:dword_415690
.text:00403C20                 mov     dword ptr [esp+0C8h+var_BC], eax ; char
.text:00403C24                 mov     [esp+0C8h+Str], ebx
.text:00403C28
.text:00403C28 loc_403C28:                             ; CODE XREF: sub_4025D0+16D4↓j
.text:00403C28                                         ; sub_4025D0+1702↓j
.text:00403C28                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00403C30                 mov     ecx, Code
.text:00403C36                 mov     [esp+0C8h+Category], ecx ; Code
.text:00403C39                 call    sub_40ADC0
.text:00403C3E
.text:00403C3E loc_403C3E:                             ; CODE XREF: sub_4025D0+161A↑j
.text:00403C3E                 mov     esi, [ebp+var_5C]
.text:00403C41                 test    esi, esi
.text:00403C43                 jnz     short loc_403C50
.text:00403C45
.text:00403C45 loc_403C45:                             ; CODE XREF: sub_4025D0+16AF↓j
.text:00403C45                 mov     ebx, [ebp+var_60]
.text:00403C48                 mov     dword ptr [ebp+var_78], ebx
.text:00403C4B                 jmp     loc_402710
.text:00403C50 ; ---------------------------------------------------------------------------
.text:00403C50
.text:00403C50 loc_403C50:                             ; CODE XREF: sub_4025D0+1673↑j
.text:00403C50                 mov     [esp+0C8h+Category], offset aSIsTooLarge ; "%s is too large"
.text:00403C57                 call    ds:libintl_gettext
.text:00403C5D                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00403C65                 mov     edx, ds:dword_415690
.text:00403C6B                 mov     [esp+0C8h+Category], 1 ; Code
.text:00403C72                 mov     dword ptr [esp+0C8h+var_BC], edx ; char
.text:00403C76                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00403C7A                 call    sub_40ADC0
.text:00403C7F                 jmp     short loc_403C45
.text:00403C81 ; ---------------------------------------------------------------------------
.text:00403C81
.text:00403C81 loc_403C81:                             ; CODE XREF: sub_4025D0+1628↑j
.text:00403C81                 mov     [esp+0C8h+Category], offset aWidthSpecifica ; "width specification"
.text:00403C88                 call    ds:libintl_gettext
.text:00403C8E                 mov     [esp+0C8h+var_C0], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:00403C96                 mov     edx, ds:dword_415690
.text:00403C9C                 mov     dword ptr [esp+0C8h+var_BC], eax
.text:00403CA0                 mov     [esp+0C8h+Str], edx
.text:00403CA4                 jmp     short loc_403C28
.text:00403CA6 ; ---------------------------------------------------------------------------
.text:00403CA6
.text:00403CA6 loc_403CA6:                             ; CODE XREF: sub_4025D0+161F↑j
.text:00403CA6                 cmp     eax, 4
.text:00403CA9                 jnz     loc_404662
.text:00403CAF                 mov     [esp+0C8h+Category], offset aWidthSpecifica ; "width specification"
.text:00403CB6                 call    ds:libintl_gettext
.text:00403CBC                 mov     [esp+0C8h+var_C0], offset aInvalidSS ; "invalid %s `%s'"
.text:00403CC4                 mov     esi, ds:dword_415690
.text:00403CCA                 mov     dword ptr [esp+0C8h+var_BC], eax
.text:00403CCE                 mov     [esp+0C8h+Str], esi
.text:00403CD2                 jmp     loc_403C28
.text:00403CD7 ; ---------------------------------------------------------------------------
.text:00403CD7
.text:00403CD7 loc_403CD7:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403CD7                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403CD7                 mov     [ebp+var_97], 0 ; jumptable 0040274F cases 104,120
.text:00403CDE                 mov     ebx, offset aX2 ; "x2"
.text:00403CE3                 test    ebx, ebx
.text:00403CE5                 jz      loc_402F61
.text:00403CEB                 cmp     byte ptr ds:aX2, 0 ; "x2"
.text:00403CF2                 jz      short loc_403D4B
.text:00403CF4                 mov     eax, ds:dword_4150E0
.text:00403CF9                 lea     esi, [ebp+var_54]
.text:00403CFC
.text:00403CFC loc_403CFC:                             ; CODE XREF: sub_4025D0+1779↓j
.text:00403CFC                 cmp     ds:dword_4150F0, eax
.text:00403D02                 jbe     short loc_403D64
.text:00403D04
.text:00403D04 loc_403D04:                             ; CODE XREF: sub_4025D0+17BC↓j
.text:00403D04                 mov     [esp+0C8h+var_C0], esi
.text:00403D08                 mov     edx, ds:dword_4150D0
.text:00403D0E                 lea     ecx, [eax+eax*2]
.text:00403D11                 mov     [esp+0C8h+Locale], ebx
.text:00403D15                 shl     ecx, 4
.text:00403D18                 mov     [esp+0C8h+Category], offset aX2 ; "x2"
.text:00403D1F                 add     ecx, edx
.text:00403D21                 mov     dword ptr [esp+0C8h+var_BC], ecx
.text:00403D25                 call    sub_404A80
.text:00403D2A                 test    al, al
.text:00403D2C                 jz      short loc_403D58
.text:00403D2E                 mov     eax, [ebp+var_54]
.text:00403D31                 cmp     ebx, eax
.text:00403D33                 jz      loc_402F18
.text:00403D39                 mov     ebx, eax
.text:00403D3B                 mov     eax, ds:dword_4150E0
.text:00403D40                 inc     eax
.text:00403D41                 mov     ds:dword_4150E0, eax
.text:00403D46                 cmp     byte ptr [ebx], 0
.text:00403D49                 jnz     short loc_403CFC
.text:00403D4B
.text:00403D4B loc_403D4B:                             ; CODE XREF: sub_4025D0+1722↑j
.text:00403D4B                 cmp     [ebp+var_7B], 0
.text:00403D4F                 jz      short loc_403D58
.text:00403D51                 mov     [ebp+var_97], 1
.text:00403D58
.text:00403D58 loc_403D58:                             ; CODE XREF: sub_4025D0+175C↑j
.text:00403D58                                         ; sub_4025D0+177F↑j
.text:00403D58                 movzx   edx, [ebp+var_97]
.text:00403D5F                 jmp     loc_402F10
.text:00403D64 ; ---------------------------------------------------------------------------
.text:00403D64
.text:00403D64 loc_403D64:                             ; CODE XREF: sub_4025D0+1732↑j
.text:00403D64                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00403D6C                 mov     ecx, ds:dword_4150D0
.text:00403D72                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00403D7A                 mov     [esp+0C8h+Category], ecx ; void *
.text:00403D7D                 call    sub_408AA0
.text:00403D82                 mov     ds:dword_4150D0, eax
.text:00403D87                 mov     eax, ds:dword_4150E0
.text:00403D8C                 jmp     loc_403D04
.text:00403D91 ; ---------------------------------------------------------------------------
.text:00403D91
.text:00403D91 def_40274F:                             ; CODE XREF: sub_4025D0+179↑j
.text:00403D91                                         ; sub_4025D0+17F↑j ...
.text:00403D91                 mov     [esp+0C8h+Category], offset aTrySHelpForMor ; jumptable 0040274F default case, cases -129-64,67,69,71,74,75,77,80-82,84-87,89-96,103,107,109,110,112-114,117,121-127
.text:00403D98                 call    ds:libintl_gettext
.text:00403D9E                 mov     ecx, ds:_iob
.text:00403DA4                 mov     ebx, ds:dword_415670
.text:00403DAA                 add     ecx, 40h ; '@'
.text:00403DAD                 mov     [esp+0C8h+var_C0], ebx
.text:00403DB1                 mov     [esp+0C8h+Locale], eax ; Format
.text:00403DB5                 mov     [esp+0C8h+Category], ecx ; Stream
.text:00403DB8                 call    fprintf
.text:00403DBD
.text:00403DBD loc_403DBD:                             ; CODE XREF: sub_4025D0+1809↓j
.text:00403DBD                 mov     [esp+0C8h+Category], 1
.text:00403DC4                 jmp     loc_402C7E
.text:00403DC9 ; ---------------------------------------------------------------------------
.text:00403DC9
.text:00403DC9 loc_403DC9:                             ; CODE XREF: sub_4025D0+17F↑j
.text:00403DC9                                         ; DATA XREF: sub_4025D0:jpt_40274F↑o
.text:00403DC9                 mov     ds:byte_415070, 1 ; jumptable 0040274F case 128
.text:00403DD0                 jmp     loc_402710
.text:00403DD5 ; ---------------------------------------------------------------------------
.text:00403DD5
.text:00403DD5 loc_403DD5:                             ; CODE XREF: sub_4025D0+169↑j
.text:00403DD5                 cmp     [ebp+var_7B], 0
.text:00403DD9                 jz      short loc_403DBD
.text:00403DDB                 cmp     ds:byte_415060, 0
.text:00403DE2                 jz      short loc_403DF2
.text:00403DE4                 mov     ebx, ds:dword_4150E0
.text:00403DEA                 test    ebx, ebx
.text:00403DEC                 jnz     loc_404638
.text:00403DF2
.text:00403DF2 loc_403DF2:                             ; CODE XREF: sub_4025D0+1812↑j
.text:00403DF2                                         ; sub_4025D0+208D↓j
.text:00403DF2                 movzx   edx, ds:byte_415070
.text:00403DF9                 mov     ecx, dword_414020
.text:00403DFF                 mov     esi, [ebp+arg_0]
.text:00403E02                 mov     [ebp+var_A1], dl
.text:00403E08                 movzx   eax, dl
.text:00403E0B                 sub     esi, ecx
.text:00403E0D                 cmp     [ebp+var_79], 0
.text:00403E11                 jz      short loc_403E17
.text:00403E13                 test    eax, eax
.text:00403E15                 jz      short loc_403E44
.text:00403E17
.text:00403E17 loc_403E17:                             ; CODE XREF: sub_4025D0+1841↑j
.text:00403E17                 cmp     esi, 2
.text:00403E1A                 jz      loc_404482
.text:00403E20                 cmp     esi, 2
.text:00403E23                 jg      loc_404300
.text:00403E29                 cmp     esi, 1
.text:00403E2C                 jz      loc_404240
.text:00403E32
.text:00403E32 loc_403E32:                             ; CODE XREF: sub_4025D0+1C7A↓j
.text:00403E32                                         ; sub_4025D0+1C88↓j ...
.text:00403E32                 cmp     [ebp+var_A1], 0
.text:00403E39                 jz      short loc_403E44
.text:00403E3B                 cmp     esi, 1
.text:00403E3E                 jg      loc_4041D0
.text:00403E44
.text:00403E44 loc_403E44:                             ; CODE XREF: sub_4025D0+1845↑j
.text:00403E44                                         ; sub_4025D0+1869↑j
.text:00403E44                 cmp     ds:byte_415080, 0
.text:00403E4B                 jz      short loc_403E68
.text:00403E4D                 cmp     ds:dword_4150A0, offset nullsub_1
.text:00403E57                 jz      loc_4041AB
.text:00403E5D                 mov     ebx, offset sub_4057E0
.text:00403E62                 mov     ds:dword_4150A0, ebx
.text:00403E68
.text:00403E68 loc_403E68:                             ; CODE XREF: sub_4025D0+187B↑j
.text:00403E68                                         ; sub_4025D0+1BFB↓j
.text:00403E68                 cmp     ds:byte_415010, 0
.text:00403E6F                 jz      short loc_403EC7
.text:00403E71                 mov     ecx, ds:dword_415000
.text:00403E77                 mov     ebx, ds:dword_415004
.text:00403E7D                 mov     eax, ecx
.text:00403E7F                 add     eax, ds:dword_4150B0
.text:00403E85                 mov     edx, ebx
.text:00403E87                 adc     edx, ds:dword_4150B4
.text:00403E8D                 mov     ds:dword_4150C0, eax
.text:00403E92                 cmp     edx, ebx
.text:00403E94                 mov     ds:dword_4150C4, edx
.text:00403E9A                 ja      short loc_403EC7
.text:00403E9C                 jb      short loc_403EA2
.text:00403E9E                 cmp     eax, ecx
.text:00403EA0                 jnb     short loc_403EC7
.text:00403EA2
.text:00403EA2 loc_403EA2:                             ; CODE XREF: sub_4025D0+18CC↑j
.text:00403EA2                 mov     [esp+0C8h+Category], offset aSkipBytesReadB ; "skip-bytes + read-bytes is too large"
.text:00403EA9                 call    ds:libintl_gettext
.text:00403EAF                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00403EB7                 mov     [esp+0C8h+Category], 1 ; Code
.text:00403EBE                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00403EC2                 call    sub_40ADC0
.text:00403EC7
.text:00403EC7 loc_403EC7:                             ; CODE XREF: sub_4025D0+189F↑j
.text:00403EC7                                         ; sub_4025D0+18CA↑j ...
.text:00403EC7                 mov     eax, ds:dword_4150E0
.text:00403ECC                 test    eax, eax
.text:00403ECE                 jnz     short loc_403F3C
.text:00403ED0                 mov     ebx, offset byte_402505
.text:00403ED5                 test    ebx, ebx
.text:00403ED7                 jz      loc_402F61
.text:00403EDD                 cmp     ds:byte_402505, 0
.text:00403EE4                 jz      short loc_403F3C
.text:00403EE6
.text:00403EE6 loc_403EE6:                             ; CODE XREF: sub_4025D0+196A↓j
.text:00403EE6                 cmp     ds:dword_4150F0, eax
.text:00403EEC                 jbe     loc_40417E
.text:00403EF2
.text:00403EF2 loc_403EF2:                             ; CODE XREF: sub_4025D0+1BD6↓j
.text:00403EF2                 mov     [esp+0C8h+Locale], ebx
.text:00403EF6                 mov     edx, ds:dword_4150D0
.text:00403EFC                 lea     ecx, [eax+eax*2]
.text:00403EFF                 mov     [esp+0C8h+Category], offset byte_402505
.text:00403F06                 shl     ecx, 4
.text:00403F09                 add     ecx, edx
.text:00403F0B                 mov     dword ptr [esp+0C8h+var_BC], ecx ; char
.text:00403F0F                 lea     ecx, [ebp+var_74]
.text:00403F12                 mov     [esp+0C8h+var_C0], ecx
.text:00403F16                 call    sub_404A80
.text:00403F1B                 test    al, al
.text:00403F1D                 jz      short loc_403F3C
.text:00403F1F                 mov     eax, [ebp+var_74]
.text:00403F22                 cmp     ebx, eax
.text:00403F24                 jz      loc_402F18
.text:00403F2A                 mov     ebx, eax
.text:00403F2C                 mov     eax, ds:dword_4150E0
.text:00403F31                 inc     eax
.text:00403F32                 mov     ds:dword_4150E0, eax
.text:00403F37                 cmp     byte ptr [ebx], 0
.text:00403F3A                 jnz     short loc_403EE6
.text:00403F3C
.text:00403F3C loc_403F3C:                             ; CODE XREF: sub_4025D0+18FE↑j
.text:00403F3C                                         ; sub_4025D0+1914↑j ...
.text:00403F3C                 test    esi, esi
.text:00403F3E                 jle     loc_40416E
.text:00403F44                 mov     ebx, dword_414020
.text:00403F4A                 lea     esi, [edi+ebx*4]
.text:00403F4D                 mov     ds:dword_415120, esi
.text:00403F53
.text:00403F53 loc_403F53:                             ; CODE XREF: sub_4025D0+1BA9↓j
.text:00403F53                 call    sub_405070
.text:00403F58                 mov     [ebp+var_7B], al
.text:00403F5B                 mov     eax, ds:Stream
.text:00403F60                 test    eax, eax
.text:00403F62                 jz      loc_4040B2
.text:00403F68                 mov     [ebp+var_98], 0
.text:00403F6F                 mov     esi, ds:dword_415000
.text:00403F75                 mov     edx, ds:dword_415004
.text:00403F7B                 mov     [esp+0C8h+Category], esi
.text:00403F7E                 mov     [esp+0C8h+Locale], edx
.text:00403F82                 call    sub_4051F0
.text:00403F87                 test    al, al
.text:00403F89                 jz      short loc_403F98
.text:00403F8B                 cmp     [ebp+var_7B], 0
.text:00403F8F                 jz      short loc_403F98
.text:00403F91                 mov     [ebp+var_98], 1
.text:00403F98
.text:00403F98 loc_403F98:                             ; CODE XREF: sub_4025D0+19B9↑j
.text:00403F98                                         ; sub_4025D0+19BF↑j
.text:00403F98                 movzx   ecx, [ebp+var_98]
.text:00403F9F                 mov     ebx, ds:Stream
.text:00403FA5                 test    ebx, ebx
.text:00403FA7                 mov     [ebp+var_7B], cl
.text:00403FAA                 jz      loc_4040B2
.text:00403FB0                 cmp     ds:byte_415080, 0
.text:00403FB7                 jz      loc_404165
.text:00403FBD                 mov     eax, [ebp+var_88]
.text:00403FC3                 mov     edx, [ebp+var_84]
.text:00403FC9                 sub     eax, ds:dword_415000
.text:00403FCF                 sbb     edx, ds:dword_415004
.text:00403FD5
.text:00403FD5 loc_403FD5:                             ; CODE XREF: sub_4025D0+1B99↓j
.text:00403FD5                 mov     ds:dword_415090, eax
.text:00403FDA                 mov     edi, 1
.text:00403FDF                 xor     eax, eax
.text:00403FE1                 mov     ds:dword_415094, edx
.text:00403FE7                 mov     edx, ds:dword_4150E0
.text:00403FED                 mov     [ebp+var_9C], eax
.text:00403FF3                 cmp     [ebp+var_9C], edx
.text:00403FF9                 mov     [ebp+var_A0], edx
.text:00403FFF                 jnb     short loc_404067
.text:00404001                 mov     esi, ds:dword_4150D0
.text:00404007                 add     esi, 4
.text:0040400A
.text:0040400A loc_40400A:                             ; CODE XREF: sub_4025D0+1A95↓j
.text:0040400A                 mov     [ebp+var_AC], edi
.text:00404010                 mov     ecx, [esi]
.text:00404012                 mov     ebx, ds:dword_4012E0[ecx*4]
.text:00404019                 mov     [ebp+var_B0], ebx
.text:0040401F
.text:0040401F loc_40401F:                             ; CODE XREF: sub_4025D0+1A71↓j
.text:0040401F                 mov     eax, [ebp+var_AC]
.text:00404025                 xor     edx, edx
.text:00404027                 div     [ebp+var_B0]
.text:0040402D                 mov     eax, [ebp+var_B0]
.text:00404033                 mov     [ebp+var_AC], eax
.text:00404039                 test    edx, edx
.text:0040403B                 mov     [ebp+var_B0], edx
.text:00404041                 jnz     short loc_40401F
.text:00404043                 inc     [ebp+var_9C]
.text:00404049                 mov     eax, ebx
.text:0040404B                 xor     edx, edx
.text:0040404D                 div     [ebp+var_AC]
.text:00404053                 add     esi, 30h ; '0'
.text:00404056                 mov     ebx, [ebp+var_A0]
.text:0040405C                 imul    edi, eax
.text:0040405F                 cmp     [ebp+var_9C], ebx
.text:00404065                 jb      short loc_40400A
.text:00404067
.text:00404067 loc_404067:                             ; CODE XREF: sub_4025D0+1A2F↑j
.text:00404067                 cmp     [ebp+var_7A], 0
.text:0040406B                 jz      loc_40414C
.text:00404071                 mov     esi, dword ptr [ebp+var_78]
.text:00404074                 test    esi, esi
.text:00404076                 jz      loc_404117
.text:0040407C                 mov     eax, dword ptr [ebp+var_78]
.text:0040407F                 xor     edx, edx
.text:00404081                 div     edi
.text:00404083                 test    edx, edx
.text:00404085                 jnz     loc_404117
.text:0040408B                 mov     edi, dword ptr [ebp+var_78]
.text:0040408E
.text:0040408E loc_40408E:                             ; CODE XREF: sub_4025D0+1B77↓j
.text:0040408E                                         ; sub_4025D0+1B7F↓j ...
.text:0040408E                 mov     ds:dword_415100, edi
.text:00404094                 cmp     ds:byte_415060, 0
.text:0040409B                 movzx   ebx, [ebp+var_98]
.text:004040A2                 jz      short loc_404110
.text:004040A4                 call    sub_406160
.text:004040A9
.text:004040A9 loc_4040A9:                             ; CODE XREF: sub_4025D0+1B45↓j
.text:004040A9                 movzx   edx, al
.text:004040AC                 test    edx, ebx
.text:004040AE                 setnz   [ebp+var_7B]
.text:004040B2
.text:004040B2 loc_4040B2:                             ; CODE XREF: sub_4025D0+1992↑j
.text:004040B2                                         ; sub_4025D0+19DA↑j
.text:004040B2                 cmp     ds:byte_415140, 0
.text:004040B9                 jnz     short loc_4040CC
.text:004040BB
.text:004040BB loc_4040BB:                             ; CODE XREF: sub_4025D0+1B0B↓j
.text:004040BB                                         ; sub_4025D0+1B37↓j
.text:004040BB                 xor     ecx, ecx
.text:004040BD                 cmp     [ebp+var_7B], 0
.text:004040C1                 setz    cl
.text:004040C4                 mov     [esp+0C8h+Category], ecx
.text:004040C7                 jmp     loc_402C7E
.text:004040CC ; ---------------------------------------------------------------------------
.text:004040CC
.text:004040CC loc_4040CC:                             ; CODE XREF: sub_4025D0+1AE9↑j
.text:004040CC                 mov     ebx, ds:_iob
.text:004040D2                 mov     [esp+0C8h+Category], ebx ; Stream
.text:004040D5                 call    fclose
.text:004040DA                 inc     eax
.text:004040DB                 jnz     short loc_4040BB
.text:004040DD                 mov     [esp+0C8h+Category], offset aStandardInput ; "standard input"
.text:004040E4                 call    ds:libintl_gettext
.text:004040EA                 mov     edi, eax
.text:004040EC                 call    _errno
.text:004040F1                 mov     [esp+0C8h+var_C0], edi ; char *
.text:004040F5                 mov     esi, [eax]
.text:004040F7                 mov     [esp+0C8h+Category], 1 ; Code
.text:004040FE                 mov     [esp+0C8h+Locale], esi ; ErrorMessage
.text:00404102                 call    sub_40ADC0
.text:00404107                 jmp     short loc_4040BB
.text:00404107 ; ---------------------------------------------------------------------------
.text:00404109                 align 10h
.text:00404110
.text:00404110 loc_404110:                             ; CODE XREF: sub_4025D0+1AD2↑j
.text:00404110                 call    sub_405980
.text:00404115                 jmp     short loc_4040A9
.text:00404117 ; ---------------------------------------------------------------------------
.text:00404117
.text:00404117 loc_404117:                             ; CODE XREF: sub_4025D0+1AA6↑j
.text:00404117                                         ; sub_4025D0+1AB5↑j
.text:00404117                 mov     [esp+0C8h+Category], offset aWarningInvalid ; "warning: invalid width %lu; using %d in"...
.text:0040411E                 call    ds:libintl_gettext
.text:00404124                 mov     [esp+0C8h+Str], edi
.text:00404128                 mov     ecx, dword ptr [ebp+var_78]
.text:0040412B                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00404133                 mov     [esp+0C8h+Category], 0 ; Code
.text:0040413A                 mov     dword ptr [esp+0C8h+var_BC], ecx ; char
.text:0040413E                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00404142                 call    sub_40ADC0
.text:00404147                 jmp     loc_40408E
.text:0040414C ; ---------------------------------------------------------------------------
.text:0040414C
.text:0040414C loc_40414C:                             ; CODE XREF: sub_4025D0+1A9B↑j
.text:0040414C                 cmp     edi, 0Fh
.text:0040414F                 jg      loc_40408E
.text:00404155                 mov     eax, 10h
.text:0040415A                 cdq
.text:0040415B                 idiv    edi
.text:0040415D                 imul    edi, eax
.text:00404160                 jmp     loc_40408E
.text:00404165 ; ---------------------------------------------------------------------------
.text:00404165
.text:00404165 loc_404165:                             ; CODE XREF: sub_4025D0+19E7↑j
.text:00404165                 xor     eax, eax
.text:00404167                 xor     edx, edx
.text:00404169                 jmp     loc_403FD5
.text:0040416E ; ---------------------------------------------------------------------------
.text:0040416E
.text:0040416E loc_40416E:                             ; CODE XREF: sub_4025D0+196E↑j
.text:0040416E                 mov     edi, offset off_401408
.text:00404173                 mov     ds:dword_415120, edi
.text:00404179                 jmp     loc_403F53
.text:0040417E ; ---------------------------------------------------------------------------
.text:0040417E
.text:0040417E loc_40417E:                             ; CODE XREF: sub_4025D0+191C↑j
.text:0040417E                 mov     [esp+0C8h+var_C0], 30h ; '0' ; int
.text:00404186                 mov     edx, ds:dword_4150D0
.text:0040418C                 mov     [esp+0C8h+Locale], offset dword_4150F0 ; int
.text:00404194                 mov     [esp+0C8h+Category], edx ; void *
.text:00404197                 call    sub_408AA0
.text:0040419C                 mov     ds:dword_4150D0, eax
.text:004041A1                 mov     eax, ds:dword_4150E0
.text:004041A6                 jmp     loc_403EF2
.text:004041AB ; ---------------------------------------------------------------------------
.text:004041AB
.text:004041AB loc_4041AB:                             ; CODE XREF: sub_4025D0+1887↑j
.text:004041AB                 mov     ecx, 8
.text:004041B0                 mov     edx, 7
.text:004041B5                 mov     eax, offset sub_405650
.text:004041BA                 mov     ds:dword_415030, ecx
.text:004041C0                 mov     ds:dword_415040, edx
.text:004041C6                 mov     ds:dword_4150A0, eax
.text:004041CB                 jmp     loc_403E68
.text:004041D0 ; ---------------------------------------------------------------------------
.text:004041D0
.text:004041D0 loc_4041D0:                             ; CODE XREF: sub_4025D0+186E↑j
.text:004041D0                 mov     edx, dword_414020
.text:004041D6                 mov     esi, [edi+edx*4+4]
.text:004041DA                 mov     [esp+0C8h+Category], esi ; char *
.text:004041DD                 call    sub_4081B0
.text:004041E2                 mov     [esp+0C8h+Category], offset aExtraOperandS ; "extra operand %s"
.text:004041E9                 mov     edi, eax
.text:004041EB                 call    ds:libintl_gettext
.text:004041F1                 mov     dword ptr [esp+0C8h+var_BC], edi ; char
.text:004041F5                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:004041FD                 mov     [esp+0C8h+Category], 0 ; Code
.text:00404204                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00404208                 call    sub_40ADC0
.text:0040420D                 mov     [esp+0C8h+Category], offset aCompatibilityM ; "Compatibility mode supports at most one"...
.text:00404214                 call    ds:libintl_gettext
.text:0040421A                 mov     [esp+0C8h+var_C0], offset aS ; "%s\n"
.text:00404222                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:0040422A                 mov     [esp+0C8h+Category], 0 ; Code
.text:00404231                 mov     dword ptr [esp+0C8h+var_BC], eax ; char
.text:00404235                 call    sub_40ADC0
.text:0040423A                 jmp     def_40274F      ; jumptable 0040274F default case, cases -129-64,67,69,71,74,75,77,80-82,84-87,89-96,103,107,109,110,112-114,117,121-127
.text:0040423A ; ---------------------------------------------------------------------------
.text:0040423F                 align 10h
.text:00404240
.text:00404240 loc_404240:                             ; CODE XREF: sub_4025D0+185C↑j
.text:00404240                 test    dl, dl
.text:00404242                 jnz     short loc_404250
.text:00404244                 mov     edx, [edi+ecx*4]
.text:00404247                 cmp     byte ptr [edx], 2Bh ; '+'
.text:0040424A                 jnz     loc_403E32
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_4025D0+1C72↑j
.text:00404250                 mov     ebx, [edi+ecx*4]
.text:00404253                 movzx   eax, byte ptr [ebx]
.text:00404256                 test    al, al
.text:00404258                 jz      loc_403E32
.text:0040425E                 cmp     al, 2Bh ; '+'
.text:00404260                 jz      loc_4042F4
.text:00404266
.text:00404266 loc_404266:                             ; CODE XREF: sub_4025D0+1D25↓j
.text:00404266                 mov     [esp+0C8h+Locale], 2Eh ; '.' ; Val
.text:0040426E                 mov     [esp+0C8h+Category], ebx ; Str
.text:00404271                 call    strchr
.text:00404276                 test    eax, eax
.text:00404278                 mov     edx, 0Ah
.text:0040427D                 jnz     short loc_404289
.text:0040427F                 cmp     byte ptr [ebx], 30h ; '0'
.text:00404282                 jz      short loc_4042E1
.text:00404284
.text:00404284 loc_404284:                             ; CODE XREF: sub_4025D0+1D1B↓j
.text:00404284                 mov     edx, 8
.text:00404289
.text:00404289 loc_404289:                             ; CODE XREF: sub_4025D0+1CAD↑j
.text:00404289                                         ; sub_4025D0+1D22↓j
.text:00404289                 mov     [esp+0C8h+Str], offset aBb ; "Bb"
.text:00404291                 lea     ecx, [ebp+var_68]
.text:00404294                 mov     dword ptr [esp+0C8h+var_BC], ecx ; int
.text:00404298                 mov     [esp+0C8h+var_C0], edx ; int
.text:0040429C                 mov     [esp+0C8h+Locale], 0 ; int
.text:004042A4                 mov     [esp+0C8h+Category], ebx ; int
.text:004042A7                 call    sub_408CE0
.text:004042AC                 test    eax, eax
.text:004042AE                 setz    cl
.text:004042B1                 movzx   eax, ds:byte_415070
.text:004042B8                 test    cl, cl
.text:004042BA                 mov     [ebp+var_A1], al
.text:004042C0                 jz      loc_403E32
.text:004042C6                 mov     ebx, [ebp+var_68]
.text:004042C9                 dec     esi
.text:004042CA                 mov     edx, [ebp+var_64]
.text:004042CD                 mov     ds:dword_415000, ebx
.text:004042D3                 mov     ds:dword_415004, edx
.text:004042D9
.text:004042D9 loc_4042D9:                             ; CODE XREF: sub_4025D0+2023↓j
.text:004042D9                 add     edi, 4
.text:004042DC                 jmp     loc_403E32
.text:004042E1 ; ---------------------------------------------------------------------------
.text:004042E1
.text:004042E1 loc_4042E1:                             ; CODE XREF: sub_4025D0+1CB2↑j
.text:004042E1                 movzx   eax, byte ptr [ebx+1]
.text:004042E5                 cmp     al, 78h ; 'x'
.text:004042E7                 jz      short loc_4042ED
.text:004042E9                 cmp     al, 58h ; 'X'
.text:004042EB                 jnz     short loc_404284
.text:004042ED
.text:004042ED loc_4042ED:                             ; CODE XREF: sub_4025D0+1D17↑j
.text:004042ED                 mov     edx, 10h
.text:004042F2                 jmp     short loc_404289
.text:004042F4 ; ---------------------------------------------------------------------------
.text:004042F4
.text:004042F4 loc_4042F4:                             ; CODE XREF: sub_4025D0+1C90↑j
.text:004042F4                 inc     ebx
.text:004042F5                 jmp     loc_404266
.text:004042F5 ; ---------------------------------------------------------------------------
.text:004042FA                 align 10h
.text:00404300
.text:00404300 loc_404300:                             ; CODE XREF: sub_4025D0+1853↑j
.text:00404300                 cmp     esi, 3
.text:00404303                 jnz     loc_403E32
.text:00404309                 test    dl, dl
.text:0040430B                 jz      loc_403E32
.text:00404311                 mov     ebx, [edi+ecx*4+4]
.text:00404315                 movzx   eax, byte ptr [ebx]
.text:00404318                 test    al, al
.text:0040431A                 jz      loc_404450
.text:00404320                 cmp     al, 2Bh ; '+'
.text:00404322                 jz      loc_40447C
.text:00404328
.text:00404328 loc_404328:                             ; CODE XREF: sub_4025D0+1EAD↓j
.text:00404328                 mov     [esp+0C8h+Locale], 2Eh ; '.' ; Val
.text:00404330                 mov     [esp+0C8h+Category], ebx ; Str
.text:00404333                 call    strchr
.text:00404338                 test    eax, eax
.text:0040433A                 mov     edx, 0Ah
.text:0040433F                 jnz     short loc_40434F
.text:00404341                 cmp     byte ptr [ebx], 30h ; '0'
.text:00404344                 jz      loc_404462
.text:0040434A
.text:0040434A loc_40434A:                             ; CODE XREF: sub_4025D0+1E9C↓j
.text:0040434A                 mov     edx, 8
.text:0040434F
.text:0040434F loc_40434F:                             ; CODE XREF: sub_4025D0+1D6F↑j
.text:0040434F                                         ; sub_4025D0+1EA7↓j
.text:0040434F                 mov     [esp+0C8h+Str], offset aBb ; "Bb"
.text:00404357                 lea     ecx, [ebp+var_68]
.text:0040435A                 mov     dword ptr [esp+0C8h+var_BC], ecx ; int
.text:0040435E                 mov     [esp+0C8h+var_C0], edx ; int
.text:00404362                 mov     [esp+0C8h+Locale], 0 ; int
.text:0040436A                 mov     [esp+0C8h+Category], ebx ; int
.text:0040436D                 call    sub_408CE0
.text:00404372                 test    eax, eax
.text:00404374                 jnz     loc_404450
.text:0040437A                 mov     edx, dword_414020
.text:00404380                 mov     ebx, [edi+edx*4+8]
.text:00404384                 movzx   eax, byte ptr [ebx]
.text:00404387                 test    al, al
.text:00404389                 jz      loc_40441E
.text:0040438F                 cmp     al, 2Bh ; '+'
.text:00404391                 jz      loc_40444A
.text:00404397
.text:00404397 loc_404397:                             ; CODE XREF: sub_4025D0+1E7B↓j
.text:00404397                 mov     [esp+0C8h+Locale], 2Eh ; '.' ; Val
.text:0040439F                 mov     [esp+0C8h+Category], ebx ; Str
.text:004043A2                 call    strchr
.text:004043A7                 test    eax, eax
.text:004043A9                 mov     edx, 0Ah
.text:004043AE                 jnz     short loc_4043BA
.text:004043B0                 cmp     byte ptr [ebx], 30h ; '0'
.text:004043B3                 jz      short loc_404430
.text:004043B5
.text:004043B5 loc_4043B5:                             ; CODE XREF: sub_4025D0+1E6A↓j
.text:004043B5                 mov     edx, 8
.text:004043BA
.text:004043BA loc_4043BA:                             ; CODE XREF: sub_4025D0+1DDE↑j
.text:004043BA                                         ; sub_4025D0+1E75↓j
.text:004043BA                 mov     [esp+0C8h+Str], offset aBb ; "Bb"
.text:004043C2                 lea     ecx, [ebp+var_70]
.text:004043C5                 mov     dword ptr [esp+0C8h+var_BC], ecx ; int
.text:004043C9                 mov     [esp+0C8h+var_C0], edx ; int
.text:004043CD                 mov     [esp+0C8h+Locale], 0 ; int
.text:004043D5                 mov     [esp+0C8h+Category], ebx ; int
.text:004043D8                 call    sub_408CE0
.text:004043DD                 test    eax, eax
.text:004043DF                 jnz     short loc_40441E
.text:004043E1                 mov     ds:byte_415080, 1
.text:004043E8                 mov     ebx, [ebp+var_70]
.text:004043EB                 sub     esi, 2
.text:004043EE                 mov     edx, [ebp+var_68]
.text:004043F1                 mov     eax, [ebp+var_64]
.text:004043F4                 mov     ecx, [ebp+var_6C]
.text:004043F7                 mov     [ebp+var_88], ebx
.text:004043FD                 mov     ebx, dword_414020
.text:00404403                 mov     ds:dword_415000, edx
.text:00404409                 mov     ds:dword_415004, eax
.text:0040440E                 mov     edx, [edi+ebx*4]
.text:00404411                 mov     [ebp+var_84], ecx
.text:00404417                 mov     [edi+ebx*4+8], edx
.text:0040441B                 add     edi, 8
.text:0040441E
.text:0040441E loc_40441E:                             ; CODE XREF: sub_4025D0+1DB9↑j
.text:0040441E                                         ; sub_4025D0+1E0F↑j
.text:0040441E                 movzx   ebx, ds:byte_415070
.text:00404425                 mov     [ebp+var_A1], bl
.text:0040442B                 jmp     loc_403E32
.text:00404430 ; ---------------------------------------------------------------------------
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: sub_4025D0+1DE3↑j
.text:00404430                 movzx   eax, byte ptr [ebx+1]
.text:00404434                 cmp     al, 78h ; 'x'
.text:00404436                 jz      short loc_404440
.text:00404438                 cmp     al, 58h ; 'X'
.text:0040443A                 jnz     loc_4043B5
.text:00404440
.text:00404440 loc_404440:                             ; CODE XREF: sub_4025D0+1E66↑j
.text:00404440                 mov     edx, 10h
.text:00404445                 jmp     loc_4043BA
.text:0040444A ; ---------------------------------------------------------------------------
.text:0040444A
.text:0040444A loc_40444A:                             ; CODE XREF: sub_4025D0+1DC1↑j
.text:0040444A                 inc     ebx
.text:0040444B                 jmp     loc_404397
.text:00404450 ; ---------------------------------------------------------------------------
.text:00404450
.text:00404450 loc_404450:                             ; CODE XREF: sub_4025D0+1D4A↑j
.text:00404450                                         ; sub_4025D0+1DA4↑j
.text:00404450                 movzx   ecx, ds:byte_415070
.text:00404457                 mov     [ebp+var_A1], cl
.text:0040445D                 jmp     loc_403E32
.text:00404462 ; ---------------------------------------------------------------------------
.text:00404462
.text:00404462 loc_404462:                             ; CODE XREF: sub_4025D0+1D74↑j
.text:00404462                 movzx   eax, byte ptr [ebx+1]
.text:00404466                 cmp     al, 78h ; 'x'
.text:00404468                 jz      short loc_404472
.text:0040446A                 cmp     al, 58h ; 'X'
.text:0040446C                 jnz     loc_40434A
.text:00404472
.text:00404472 loc_404472:                             ; CODE XREF: sub_4025D0+1E98↑j
.text:00404472                 mov     edx, 10h
.text:00404477                 jmp     loc_40434F
.text:0040447C ; ---------------------------------------------------------------------------
.text:0040447C
.text:0040447C loc_40447C:                             ; CODE XREF: sub_4025D0+1D52↑j
.text:0040447C                 inc     ebx
.text:0040447D                 jmp     loc_404328
.text:00404482 ; ---------------------------------------------------------------------------
.text:00404482
.text:00404482 loc_404482:                             ; CODE XREF: sub_4025D0+184A↑j
.text:00404482                 test    dl, dl
.text:00404484                 jnz     short loc_4044A0
.text:00404486                 mov     edx, [edi+ecx*4+4]
.text:0040448A                 movzx   eax, byte ptr [edx]
.text:0040448D                 cmp     al, 2Bh ; '+'
.text:0040448F                 jz      short loc_4044A0
.text:00404491                 movsx   ebx, al
.text:00404494                 sub     ebx, 30h ; '0'
.text:00404497                 cmp     ebx, 9
.text:0040449A                 ja      loc_403E32
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: sub_4025D0+1EB4↑j
.text:004044A0                                         ; sub_4025D0+1EBF↑j
.text:004044A0                 mov     ebx, [edi+ecx*4+4]
.text:004044A4                 movzx   eax, byte ptr [ebx]
.text:004044A7                 test    al, al
.text:004044A9                 jz      loc_403E32
.text:004044AF                 cmp     al, 2Bh ; '+'
.text:004044B1                 jz      loc_404632
.text:004044B7
.text:004044B7 loc_4044B7:                             ; CODE XREF: sub_4025D0+2063↓j
.text:004044B7                 mov     [esp+0C8h+Locale], 2Eh ; '.' ; Val
.text:004044BF                 mov     [esp+0C8h+Category], ebx ; Str
.text:004044C2                 call    strchr
.text:004044C7                 test    eax, eax
.text:004044C9                 mov     edx, 0Ah
.text:004044CE                 jnz     short loc_4044DE
.text:004044D0                 cmp     byte ptr [ebx], 30h ; '0'
.text:004044D3                 jz      loc_404618
.text:004044D9
.text:004044D9 loc_4044D9:                             ; CODE XREF: sub_4025D0+2052↓j
.text:004044D9                 mov     edx, 8
.text:004044DE
.text:004044DE loc_4044DE:                             ; CODE XREF: sub_4025D0+1EFE↑j
.text:004044DE                                         ; sub_4025D0+205D↓j
.text:004044DE                 mov     [esp+0C8h+var_C0], edx ; int
.text:004044E2                 lea     ecx, [ebp+var_70]
.text:004044E5                 mov     dword ptr [esp+0C8h+var_BC], ecx ; int
.text:004044E9                 mov     [esp+0C8h+Str], offset aBb ; "Bb"
.text:004044F1                 mov     [esp+0C8h+Locale], 0 ; int
.text:004044F9                 mov     [esp+0C8h+Category], ebx ; int
.text:004044FC                 call    sub_408CE0
.text:00404501                 movzx   edx, ds:byte_415070
.text:00404508                 test    eax, eax
.text:0040450A                 setz    cl
.text:0040450D                 mov     [ebp+var_A1], dl
.text:00404513                 test    cl, cl
.text:00404515                 jz      loc_403E32
.text:0040451B                 test    dl, dl
.text:0040451D                 jz      loc_4045D4
.text:00404523                 mov     edx, dword_414020
.text:00404529                 mov     ebx, [edi+edx*4]
.text:0040452C                 movzx   eax, byte ptr [ebx]
.text:0040452F                 test    al, al
.text:00404531                 jz      loc_4045D4
.text:00404537                 cmp     al, 2Bh ; '+'
.text:00404539                 jz      loc_404612
.text:0040453F
.text:0040453F loc_40453F:                             ; CODE XREF: sub_4025D0+2043↓j
.text:0040453F                 mov     [esp+0C8h+Locale], 2Eh ; '.' ; Val
.text:00404547                 mov     [esp+0C8h+Category], ebx ; Str
.text:0040454A                 call    strchr
.text:0040454F                 test    eax, eax
.text:00404551                 mov     edx, 0Ah
.text:00404556                 jnz     short loc_404566
.text:00404558                 cmp     byte ptr [ebx], 30h ; '0'
.text:0040455B                 jz      loc_4045F8
.text:00404561
.text:00404561 loc_404561:                             ; CODE XREF: sub_4025D0+2032↓j
.text:00404561                 mov     edx, 8
.text:00404566
.text:00404566 loc_404566:                             ; CODE XREF: sub_4025D0+1F86↑j
.text:00404566                                         ; sub_4025D0+203D↓j
.text:00404566                 mov     [esp+0C8h+Category], ebx ; int
.text:00404569                 lea     ecx, [ebp+var_68]
.text:0040456C                 mov     [esp+0C8h+Str], offset aBb ; "Bb"
.text:00404574                 mov     dword ptr [esp+0C8h+var_BC], ecx ; int
.text:00404578                 mov     [esp+0C8h+var_C0], edx ; int
.text:0040457C                 mov     [esp+0C8h+Locale], 0 ; int
.text:00404584                 call    sub_408CE0
.text:00404589                 test    eax, eax
.text:0040458B                 setz    bl
.text:0040458E                 movzx   eax, ds:byte_415070
.text:00404595                 test    bl, bl
.text:00404597                 mov     [ebp+var_A1], al
.text:0040459D                 jz      short loc_4045D4
.text:0040459F                 mov     ds:byte_415080, 1
.text:004045A6                 mov     ebx, [ebp+var_68]
.text:004045A9                 add     edi, 8
.text:004045AC                 mov     eax, [ebp+var_64]
.text:004045AF                 sub     esi, 2
.text:004045B2                 mov     edx, [ebp+var_70]
.text:004045B5                 mov     ds:dword_415000, ebx
.text:004045BB                 mov     ebx, [ebp+var_6C]
.text:004045BE                 mov     ds:dword_415004, eax
.text:004045C3                 mov     [ebp+var_88], edx
.text:004045C9                 mov     [ebp+var_84], ebx
.text:004045CF                 jmp     loc_403E32
.text:004045D4 ; ---------------------------------------------------------------------------
.text:004045D4
.text:004045D4 loc_4045D4:                             ; CODE XREF: sub_4025D0+1F4D↑j
.text:004045D4                                         ; sub_4025D0+1F61↑j ...
.text:004045D4                 mov     edx, dword_414020
.text:004045DA                 dec     esi
.text:004045DB                 mov     ebx, [ebp+var_70]
.text:004045DE                 mov     eax, [ebp+var_6C]
.text:004045E1                 mov     ecx, [edi+edx*4]
.text:004045E4                 mov     ds:dword_415000, ebx
.text:004045EA                 mov     ds:dword_415004, eax
.text:004045EF                 mov     [edi+edx*4+4], ecx
.text:004045F3                 jmp     loc_4042D9
.text:004045F8 ; ---------------------------------------------------------------------------
.text:004045F8
.text:004045F8 loc_4045F8:                             ; CODE XREF: sub_4025D0+1F8B↑j
.text:004045F8                 movzx   eax, byte ptr [ebx+1]
.text:004045FC                 cmp     al, 78h ; 'x'
.text:004045FE                 jz      short loc_404608
.text:00404600                 cmp     al, 58h ; 'X'
.text:00404602                 jnz     loc_404561
.text:00404608
.text:00404608 loc_404608:                             ; CODE XREF: sub_4025D0+202E↑j
.text:00404608                 mov     edx, 10h
.text:0040460D                 jmp     loc_404566
.text:00404612 ; ---------------------------------------------------------------------------
.text:00404612
.text:00404612 loc_404612:                             ; CODE XREF: sub_4025D0+1F69↑j
.text:00404612                 inc     ebx
.text:00404613                 jmp     loc_40453F
.text:00404618 ; ---------------------------------------------------------------------------
.text:00404618
.text:00404618 loc_404618:                             ; CODE XREF: sub_4025D0+1F03↑j
.text:00404618                 movzx   eax, byte ptr [ebx+1]
.text:0040461C                 cmp     al, 78h ; 'x'
.text:0040461E                 jz      short loc_404628
.text:00404620                 cmp     al, 58h ; 'X'
.text:00404622                 jnz     loc_4044D9
.text:00404628
.text:00404628 loc_404628:                             ; CODE XREF: sub_4025D0+204E↑j
.text:00404628                 mov     edx, 10h
.text:0040462D                 jmp     loc_4044DE
.text:00404632 ; ---------------------------------------------------------------------------
.text:00404632
.text:00404632 loc_404632:                             ; CODE XREF: sub_4025D0+1EE1↑j
.text:00404632                 inc     ebx
.text:00404633                 jmp     loc_4044B7
.text:00404638 ; ---------------------------------------------------------------------------
.text:00404638
.text:00404638 loc_404638:                             ; CODE XREF: sub_4025D0+181C↑j
.text:00404638                 mov     [esp+0C8h+Category], offset aNoTypeMayBeSpe ; "no type may be specified when dumping s"...
.text:0040463F                 call    ds:libintl_gettext
.text:00404645                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:0040464D                 mov     [esp+0C8h+Category], 1 ; Code
.text:00404654                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00404658                 call    sub_40ADC0
.text:0040465D                 jmp     loc_403DF2
.text:00404662 ; ---------------------------------------------------------------------------
.text:00404662
.text:00404662 loc_404662:                             ; CODE XREF: sub_4025D0+9F6↑j
.text:00404662                                         ; sub_4025D0+A62↑j ...
.text:00404662                 call    abort
.text:00404662 sub_4025D0      endp
.text:00404662
.text:00404662 ; ---------------------------------------------------------------------------
.text:00404667                 align 10h
.text:00404670                 push    ebx
.text:00404671                 sub     esp, 18h
.text:00404674                 mov     ebx, [esp+20h]
.text:00404678                 test    ebx, ebx
.text:0040467A                 jz      short loc_4046B0
.text:0040467C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00404683                 call    ds:libintl_gettext
.text:00404689                 mov     edx, ds:_iob
.text:0040468F                 mov     ecx, ds:dword_415670
.text:00404695                 add     edx, 40h ; '@'
.text:00404698                 mov     [esp+8], ecx
.text:0040469C                 mov     [esp+4], eax
.text:004046A0                 mov     [esp], edx
.text:004046A3                 call    fprintf
.text:004046A8
.text:004046A8 loc_4046A8:                             ; CODE XREF: .text:004048AE↓j
.text:004046A8                 mov     [esp], ebx
.text:004046AB                 call    exit
.text:004046B0 ; ---------------------------------------------------------------------------
.text:004046B0
.text:004046B0 loc_4046B0:                             ; CODE XREF: .text:0040467A↑j
.text:004046B0                 mov     dword ptr [esp], (offset stru_401669._charbuf+3)
.text:004046B7                 call    ds:libintl_gettext
.text:004046BD                 mov     ecx, ds:dword_415670
.text:004046C3                 mov     [esp], eax
.text:004046C6                 mov     [esp+0Ch], ecx
.text:004046CA                 mov     [esp+8], ecx
.text:004046CE                 mov     [esp+4], ecx
.text:004046D2                 call    printf
.text:004046D7                 mov     dword ptr [esp], offset aWriteAnUnambig ; "\nWrite an unambiguous representation, "...
.text:004046DE                 call    ds:libintl_gettext
.text:004046E4                 mov     ecx, ds:_iob
.text:004046EA                 add     ecx, 20h ; ' '
.text:004046ED                 mov     [esp+4], ecx
.text:004046F1                 mov     [esp], eax
.text:004046F4                 call    fputs
.text:004046F9                 mov     dword ptr [esp], offset aAllArgumentsTo ; "All arguments to long options are manda"...
.text:00404700                 call    ds:libintl_gettext
.text:00404706                 mov     ecx, ds:_iob
.text:0040470C                 add     ecx, 20h ; ' '
.text:0040470F                 mov     [esp+4], ecx
.text:00404713                 mov     [esp], eax
.text:00404716                 call    fputs
.text:0040471B                 mov     dword ptr [esp], offset aAAddressRadixR ; "  -A, --address-radix=RADIX   decide ho"...
.text:00404722                 call    ds:libintl_gettext
.text:00404728                 mov     ecx, ds:_iob
.text:0040472E                 add     ecx, 20h ; ' '
.text:00404731                 mov     [esp+4], ecx
.text:00404735                 mov     [esp], eax
.text:00404738                 call    fputs
.text:0040473D                 mov     dword ptr [esp], offset aNReadBytesByte ; "  -N, --read-bytes=BYTES      limit dum"...
.text:00404744                 call    ds:libintl_gettext
.text:0040474A                 mov     ecx, ds:_iob
.text:00404750                 add     ecx, 20h ; ' '
.text:00404753                 mov     [esp+4], ecx
.text:00404757                 mov     [esp], eax
.text:0040475A                 call    fputs
.text:0040475F                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00404766                 call    ds:libintl_gettext
.text:0040476C                 mov     ecx, ds:_iob
.text:00404772                 add     ecx, 20h ; ' '
.text:00404775                 mov     [esp+4], ecx
.text:00404779                 mov     [esp], eax
.text:0040477C                 call    fputs
.text:00404781                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00404788                 call    ds:libintl_gettext
.text:0040478E                 mov     ecx, ds:_iob
.text:00404794                 add     ecx, 20h ; ' '
.text:00404797                 mov     [esp+4], ecx
.text:0040479B                 mov     [esp], eax
.text:0040479E                 call    fputs
.text:004047A3                 mov     dword ptr [esp], offset aTraditionalFor ; "\nTraditional format specifications may"...
.text:004047AA                 call    ds:libintl_gettext
.text:004047B0                 mov     ecx, ds:_iob
.text:004047B6                 add     ecx, 20h ; ' '
.text:004047B9                 mov     [esp+4], ecx
.text:004047BD                 mov     [esp], eax
.text:004047C0                 call    fputs
.text:004047C5                 mov     dword ptr [esp], offset aFSameAsTFfSele ; "  -f   same as -t fF, select floats\n  "...
.text:004047CC                 call    ds:libintl_gettext
.text:004047D2                 mov     ecx, ds:_iob
.text:004047D8                 add     ecx, 20h ; ' '
.text:004047DB                 mov     [esp+4], ecx
.text:004047DF                 mov     [esp], eax
.text:004047E2                 call    fputs
.text:004047E7                 mov     dword ptr [esp], offset aIfFirstAndSeco ; "\nIf first and second call formats both"...
.text:004047EE                 call    ds:libintl_gettext
.text:004047F4                 mov     ecx, ds:_iob
.text:004047FA                 add     ecx, 20h ; ' '
.text:004047FD                 mov     [esp+4], ecx
.text:00404801                 mov     [esp], eax
.text:00404804                 call    fputs
.text:00404809                 mov     dword ptr [esp], offset aDSizeSignedDec ; "  d[SIZE]    signed decimal, SIZE bytes"...
.text:00404810                 call    ds:libintl_gettext
.text:00404816                 mov     ecx, ds:_iob
.text:0040481C                 add     ecx, 20h ; ' '
.text:0040481F                 mov     [esp+4], ecx
.text:00404823                 mov     [esp], eax
.text:00404826                 call    fputs
.text:0040482B                 mov     dword ptr [esp], offset aSizeIsANumberF ; "\nSIZE is a number.  For TYPE in doux, "...
.text:00404832                 call    ds:libintl_gettext
.text:00404838                 mov     ecx, ds:_iob
.text:0040483E                 add     ecx, 20h ; ' '
.text:00404841                 mov     [esp+4], ecx
.text:00404845                 mov     [esp], eax
.text:00404848                 call    fputs
.text:0040484D                 mov     dword ptr [esp], offset aRadixIsDForDec ; "\nRADIX is d for decimal, o for octal, "...
.text:00404854                 call    ds:libintl_gettext
.text:0040485A                 mov     ecx, ds:_iob
.text:00404860                 add     ecx, 20h ; ' '
.text:00404863                 mov     [esp+4], ecx
.text:00404867                 mov     [esp], eax
.text:0040486A                 call    fputs
.text:0040486F                 mov     dword ptr [esp], offset aStringWithoutA ; "--string without a number implies 3.  -"...
.text:00404876                 call    ds:libintl_gettext
.text:0040487C                 mov     ecx, ds:_iob
.text:00404882                 add     ecx, 20h ; ' '
.text:00404885                 mov     [esp+4], ecx
.text:00404889                 mov     [esp], eax
.text:0040488C                 call    fputs
.text:00404891                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00404898                 call    ds:libintl_gettext
.text:0040489E                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004048A6                 mov     [esp], eax
.text:004048A9                 call    printf
.text:004048AE                 jmp     loc_4046A8
.text:004048AE ; ---------------------------------------------------------------------------
.text:004048B3                 align 10h
.text:004048C0 aInvalidTypeStr db 'invalid type string `%s',27h,';',0Ah
.text:004048C0                                         ; DATA XREF: sub_404A80:loc_404BA7↓o
.text:004048C0                 db 'this system doesn',27h,'t provide a %lu-byte integral type',0
.text:0040490F aI64d           db 'I64d',0             ; DATA XREF: sub_404A80+1B0↓o
.text:00404914 aLd             db 'ld',0               ; DATA XREF: sub_404A80+1BA↓o
.text:00404917 aD              db 'd',0                ; DATA XREF: sub_404A80+1C1↓o
.text:00404919 ; const char Format[]
.text:00404919 Format          db ' %%%d%s',0          ; DATA XREF: sub_404A80+1D5↓o
.text:00404921                 align 20h
.text:00404940 aStrlenTspecFmt db 'strlen (tspec->fmt_string) < FMT_BYTES_ALLOCATED',0
.text:00404940                                         ; DATA XREF: sub_404A80+2E4↓o
.text:00404971 aI64x           db 'I64x',0             ; DATA XREF: sub_404A80+309↓o
.text:00404976 aLx             db 'lx',0               ; DATA XREF: sub_404A80+313↓o
.text:00404979 asc_404979      db 'x',0                ; DATA XREF: sub_404A80+31A↓o
.text:0040497B a0DS            db ' %%0%d%s',0         ; DATA XREF: sub_404A80+32E↓o
.text:00404984 aI64u           db 'I64u',0             ; DATA XREF: sub_404A80+346↓o
.text:00404989 aLu             db 'lu',0               ; DATA XREF: sub_404A80+350↓o
.text:0040498C aU              db 'u',0                ; DATA XREF: sub_404A80+357↓o
.text:0040498E aI64o           db 'I64o',0             ; DATA XREF: sub_404A80+373↓o
.text:00404993 aLo             db 'lo',0               ; DATA XREF: sub_404A80+37D↓o
.text:00404996 aO              db 'o',0                ; DATA XREF: sub_404A80+384↓o
.text:00404998 aInvalidTypeStr_0 db 'invalid type string `%s',27h,0
.text:00404998                                         ; DATA XREF: sub_404A80:loc_404E24↓o
.text:004049B1                 db 0EBh, 0Dh, 90h
.text:004049B4                 align 10h
.text:004049C0 aInvalidTypeStr_1 db 'invalid type string `%s',27h,';',0Ah
.text:004049C0                                         ; DATA XREF: sub_404A80:loc_404F69↓o
.text:004049C0                 db 'this system doesn',27h,'t provide a %lu-byte floating point type',0
.text:00404A15 ; const char aDDe[]
.text:00404A15 aDDe            db ' %%%d.%de',0        ; DATA XREF: sub_404A80+516↓o
.text:00404A15                                         ; sub_404A80+562↓o
.text:00404A1F aDDle           db ' %%%d.%dLe',0       ; DATA XREF: sub_404A80+551↓o
.text:00404A2A                 align 20h
.text:00404A40 aInvalidCharact_0 db 'invalid character `%c',27h,' in type string `%s',27h,0
.text:00404A40                                         ; DATA XREF: sub_404A80:def_404AAD↓o
.text:00404A6B aTspecNull      db 'tspec != NULL',0    ; DATA XREF: sub_404A80+5DF↓o
.text:00404A79                 align 10h
.text:00404A80
.text:00404A80 ; =============== S U B R O U T I N E =======================================
.text:00404A80
.text:00404A80
.text:00404A80 sub_404A80      proc near               ; CODE XREF: sub_4025D0+908↑p
.text:00404A80                                         ; sub_4025D0+ADB↑p ...
.text:00404A80
.text:00404A80 Buffer          = dword ptr -3Ch
.text:00404A80 Format          = dword ptr -38h
.text:00404A80 var_34          = dword ptr -34h
.text:00404A80 var_30          = byte ptr -30h
.text:00404A80 var_2C          = dword ptr -2Ch
.text:00404A80 var_1D          = byte ptr -1Dh
.text:00404A80 var_1C          = dword ptr -1Ch
.text:00404A80 var_18          = dword ptr -18h
.text:00404A80 var_14          = dword ptr -14h
.text:00404A80 arg_0           = byte ptr  4
.text:00404A80 arg_4           = dword ptr  8
.text:00404A80 arg_8           = dword ptr  0Ch
.text:00404A80 arg_C           = dword ptr  10h
.text:00404A80
.text:00404A80                 push    ebp
.text:00404A81                 push    edi
.text:00404A82                 push    esi
.text:00404A83                 push    ebx
.text:00404A84                 sub     esp, 2Ch
.text:00404A87                 mov     eax, [esp+3Ch+arg_C]
.text:00404A8B                 mov     ebp, dword ptr [esp+3Ch+arg_0]
.text:00404A8F                 mov     ebx, [esp+3Ch+arg_4]
.text:00404A93                 test    eax, eax
.text:00404A95                 jz      loc_40504F
.text:00404A9B                 movzx   edx, byte ptr [ebx]
.text:00404A9E                 movsx   eax, dl
.text:00404AA1                 sub     eax, 61h ; 'a'  ; switch 24 cases
.text:00404AA4                 cmp     eax, 17h
.text:00404AA7                 ja      def_404AAD      ; jumptable 00404AAD default case, cases 98,101,103-110,112-116,118,119
.text:00404AAD                 jmp     ds:jpt_404AAD[eax*4] ; switch jump
.text:00404AAD ; ---------------------------------------------------------------------------
.text:00404AB4 jpt_404AAD      dd offset loc_404E90    ; DATA XREF: sub_404A80+2D↑r
.text:00404AB4                 dd offset def_404AAD    ; jump table for switch statement
.text:00404AB4                 dd offset loc_404EB0
.text:00404AB4                 dd offset loc_404B14
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset loc_404EC5
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset loc_404B14
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset loc_404B14
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset def_404AAD
.text:00404AB4                 dd offset loc_404B14
.text:00404B14 ; ---------------------------------------------------------------------------
.text:00404B14
.text:00404B14 loc_404B14:                             ; CODE XREF: sub_404A80+2D↑j
.text:00404B14                                         ; DATA XREF: sub_404A80:jpt_404AAD↑o
.text:00404B14                 mov     [esp+3Ch+var_1D], dl ; jumptable 00404AAD cases 100,111,117,120
.text:00404B18                 inc     ebx
.text:00404B19                 movzx   eax, byte ptr [ebx]
.text:00404B1C                 movsx   edx, al
.text:00404B1F                 cmp     edx, 49h ; 'I'
.text:00404B22                 jz      loc_404E86
.text:00404B28                 cmp     edx, 49h ; 'I'
.text:00404B2B                 jg      loc_404E65
.text:00404B31                 cmp     edx, 43h ; 'C'
.text:00404B34                 jz      loc_404E52
.text:00404B3A
.text:00404B3A loc_404B3A:                             ; CODE XREF: sub_404A80+3ED↓j
.text:00404B3A                 movsx   edx, al
.text:00404B3D                 xor     edi, edi
.text:00404B3F                 sub     edx, 30h ; '0'
.text:00404B42                 cmp     edx, 9
.text:00404B45                 mov     esi, ebx
.text:00404B47                 ja      short loc_404B83
.text:00404B49                 movzx   edx, byte ptr [ebx]
.text:00404B4C                 lea     esi, [esi+0]
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: sub_404A80+101↓j
.text:00404B50                 movsx   eax, dl
.text:00404B53                 inc     esi
.text:00404B54                 lea     ecx, [eax-30h]
.text:00404B57                 mov     edx, ecx
.text:00404B59                 mov     eax, 0CCCCCCCDh
.text:00404B5E                 not     edx
.text:00404B60                 mul     edx
.text:00404B62                 shr     edx, 3
.text:00404B65                 cmp     edi, edx
.text:00404B67                 ja      loc_404E24
.text:00404B6D                 lea     edx, [edi+edi*4]
.text:00404B70                 lea     edi, [ecx+edx*2]
.text:00404B73                 movzx   ecx, byte ptr [esi]
.text:00404B76                 mov     dl, cl
.text:00404B78                 movsx   ecx, cl
.text:00404B7B                 sub     ecx, 30h ; '0'
.text:00404B7E                 cmp     ecx, 9
.text:00404B81                 jbe     short loc_404B50
.text:00404B83
.text:00404B83 loc_404B83:                             ; CODE XREF: sub_404A80+C7↑j
.text:00404B83                 mov     [esp+3Ch+var_14], esi
.text:00404B87                 cmp     esi, ebx
.text:00404B89                 mov     [esp+3Ch+var_18], edi
.text:00404B8D                 jz      loc_404E12
.text:00404B93                 mov     edx, [esp+3Ch+var_18]
.text:00404B97                 cmp     edx, 8
.text:00404B9A                 ja      short loc_404BA7
.text:00404B9C                 mov     ebx, ds:dword_415150[edx*4]
.text:00404BA3                 test    ebx, ebx
.text:00404BA5                 jnz     short loc_404BE2
.text:00404BA7
.text:00404BA7 loc_404BA7:                             ; CODE XREF: sub_404A80+11A↑j
.text:00404BA7                 mov     [esp+3Ch+Buffer], offset aInvalidTypeStr ; "invalid type string `%s';\nthis system "...
.text:00404BAE
.text:00404BAE loc_404BAE:                             ; CODE XREF: sub_404A80+4F0↓j
.text:00404BAE                 call    ds:libintl_gettext
.text:00404BB4                 mov     dword ptr [esp+3Ch+var_30], ebp ; char
.text:00404BB8                 mov     edi, [esp+3Ch+var_18]
.text:00404BBC                 mov     [esp+3Ch+var_2C], edi
.text:00404BC0
.text:00404BC0 loc_404BC0:                             ; CODE XREF: sub_404A80+5CA↓j
.text:00404BC0                 mov     [esp+3Ch+var_34], eax ; char *
.text:00404BC4                 mov     [esp+3Ch+Format], 0 ; ErrorMessage
.text:00404BCC                 mov     [esp+3Ch+Buffer], 0 ; Code
.text:00404BD3                 call    sub_40ADC0
.text:00404BD8
.text:00404BD8 loc_404BD8:                             ; CODE XREF: sub_404A80+3CD↓j
.text:00404BD8                 xor     eax, eax
.text:00404BDA
.text:00404BDA loc_404BDA:                             ; CODE XREF: sub_404A80+2A3↓j
.text:00404BDA                 add     esp, 2Ch
.text:00404BDD                 pop     ebx
.text:00404BDE                 pop     esi
.text:00404BDF                 pop     edi
.text:00404BE0                 pop     ebp
.text:00404BE1                 retn
.text:00404BE2 ; ---------------------------------------------------------------------------
.text:00404BE2
.text:00404BE2 loc_404BE2:                             ; CODE XREF: sub_404A80+125↑j
.text:00404BE2                 mov     ebx, esi
.text:00404BE4                 lea     esi, [esi+0]
.text:00404BEA                 lea     edi, [edi+0]
.text:00404BF0
.text:00404BF0 loc_404BF0:                             ; CODE XREF: sub_404A80+39F↓j
.text:00404BF0                                         ; sub_404A80+3E0↓j ...
.text:00404BF0                 movsx   eax, [esp+3Ch+var_1D]
.text:00404BF5                 mov     esi, ds:dword_415150[edx*4]
.text:00404BFC                 cmp     eax, 6Fh ; 'o'
.text:00404BFF                 jz      loc_404DE8
.text:00404C05                 cmp     eax, 6Fh ; 'o'
.text:00404C08                 jg      loc_404D70
.text:00404C0E                 cmp     eax, 64h ; 'd'
.text:00404C11                 jz      short loc_404C25
.text:00404C13                 lea     esi, [esi+0]
.text:00404C19                 lea     edi, [edi+0]
.text:00404C20
.text:00404C20 def_404CAE:                             ; CODE XREF: sub_404A80+228↓j
.text:00404C20                                         ; sub_404A80+22E↓j ...
.text:00404C20                 call    abort           ; jumptable 00404CAE default case, case 0
.text:00404C25 ; ---------------------------------------------------------------------------
.text:00404C25
.text:00404C25 loc_404C25:                             ; CODE XREF: sub_404A80+191↑j
.text:00404C25                 mov     [esp+3Ch+var_1C], 0
.text:00404C2D                 cmp     esi, 5
.text:00404C30                 mov     eax, offset aI64d ; "I64d"
.text:00404C35                 jz      short loc_404C46
.text:00404C37                 cmp     esi, 4
.text:00404C3A                 mov     eax, offset aLd ; "ld"
.text:00404C3F                 jz      short loc_404C46
.text:00404C41                 mov     eax, offset aD  ; "d"
.text:00404C46
.text:00404C46 loc_404C46:                             ; CODE XREF: sub_404A80+1B5↑j
.text:00404C46                                         ; sub_404A80+1BF↑j
.text:00404C46                 movsx   edi, ds:byte_401291[edx]
.text:00404C4D
.text:00404C4D loc_404C4D:                             ; CODE XREF: sub_404A80+363↓j
.text:00404C4D                 mov     dword ptr [esp+3Ch+var_30], eax
.text:00404C51                 mov     [esp+3Ch+var_34], edi
.text:00404C55                 mov     [esp+3Ch+Format], offset Format ; " %%%d%s"
.text:00404C5D
.text:00404C5D loc_404C5D:                             ; CODE XREF: sub_404A80+336↓j
.text:00404C5D                 mov     ebp, [esp+3Ch+arg_C]
.text:00404C61                 add     ebp, 0Ch
.text:00404C64                 mov     [esp+3Ch+Buffer], ebp ; Buffer
.text:00404C67                 call    sprintf
.text:00404C6C                 mov     ecx, ebp
.text:00404C6E                 mov     esi, esi
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: sub_404A80+205↓j
.text:00404C70                 mov     eax, [ecx]
.text:00404C72                 add     ecx, 4
.text:00404C75                 lea     edx, [eax-1010101h]
.text:00404C7B                 not     eax
.text:00404C7D                 and     edx, eax
.text:00404C7F                 and     edx, 80808080h
.text:00404C85                 jz      short loc_404C70
.text:00404C87                 test    edx, 8080h
.text:00404C8D                 jnz     short loc_404C95
.text:00404C8F                 shr     edx, 10h
.text:00404C92                 add     ecx, 2
.text:00404C95
.text:00404C95 loc_404C95:                             ; CODE XREF: sub_404A80+20D↑j
.text:00404C95                 add     dl, dl
.text:00404C97                 sbb     ecx, 3
.text:00404C9A                 sub     ecx, ebp
.text:00404C9C                 cmp     ecx, 1Bh
.text:00404C9F                 ja      loc_404D54
.text:00404CA5                 cmp     esi, 5          ; switch 6 cases
.text:00404CA8                 ja      def_404CAE      ; jumptable 00404CAE default case, case 0
.text:00404CAE                 jmp     ds:jpt_404CAE[esi*4] ; switch jump
.text:00404CAE ; ---------------------------------------------------------------------------
.text:00404CB5                 align 4
.text:00404CB8 jpt_404CAE      dd offset def_404CAE    ; DATA XREF: sub_404A80+22E↑r
.text:00404CB8                 dd offset loc_404CD0    ; jump table for switch statement
.text:00404CB8                 dd offset loc_404D2B
.text:00404CB8                 dd offset loc_404D3F
.text:00404CB8                 dd offset loc_404D46
.text:00404CB8                 dd offset loc_404D4D
.text:00404CD0 ; ---------------------------------------------------------------------------
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: sub_404A80+22E↑j
.text:00404CD0                                         ; DATA XREF: sub_404A80:jpt_404CAE↑o
.text:00404CD0                 mov     ecx, [esp+3Ch+var_1C] ; jumptable 00404CAE case 1
.text:00404CD4                 mov     ebp, offset loc_406A10
.text:00404CD9                 test    ecx, ecx
.text:00404CDB                 jz      short loc_404CF0
.text:00404CDD                 mov     ebp, offset loc_406A50
.text:00404CE2                 lea     esi, [esi+0]
.text:00404CE9                 lea     edi, [edi+0]
.text:00404CF0
.text:00404CF0 loc_404CF0:                             ; CODE XREF: sub_404A80+25B↑j
.text:00404CF0                                         ; sub_404A80+2B6↓j ...
.text:00404CF0                 mov     edx, [esp+3Ch+arg_C]
.text:00404CF4                 mov     [edx+4], esi
.text:00404CF7                 mov     esi, [esp+3Ch+var_1C]
.text:00404CFB                 mov     [edx+8], ebp
.text:00404CFE                 mov     [edx+2Ch], edi
.text:00404D01                 mov     [edx], esi
.text:00404D03                 cmp     byte ptr [ebx], 7Ah ; 'z'
.text:00404D06                 setz    cl
.text:00404D09                 test    cl, cl
.text:00404D0B                 mov     [edx+28h], cl
.text:00404D0E                 jnz     short loc_404D28
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: sub_404A80+2A9↓j
.text:00404D10                 mov     eax, [esp+3Ch+arg_8]
.text:00404D14                 test    eax, eax
.text:00404D16                 jz      short loc_404D1E
.text:00404D18                 mov     edi, [esp+3Ch+arg_8]
.text:00404D1C                 mov     [edi], ebx
.text:00404D1E
.text:00404D1E loc_404D1E:                             ; CODE XREF: sub_404A80+296↑j
.text:00404D1E                 mov     eax, 1
.text:00404D23                 jmp     loc_404BDA
.text:00404D28 ; ---------------------------------------------------------------------------
.text:00404D28
.text:00404D28 loc_404D28:                             ; CODE XREF: sub_404A80+28E↑j
.text:00404D28                 inc     ebx
.text:00404D29                 jmp     short loc_404D10
.text:00404D2B ; ---------------------------------------------------------------------------
.text:00404D2B
.text:00404D2B loc_404D2B:                             ; CODE XREF: sub_404A80+22E↑j
.text:00404D2B                                         ; DATA XREF: sub_404A80:jpt_404CAE↑o
.text:00404D2B                 mov     edx, [esp+3Ch+var_1C] ; jumptable 00404CAE case 2
.text:00404D2F                 mov     ebp, offset loc_406A90
.text:00404D34                 test    edx, edx
.text:00404D36                 jz      short loc_404CF0
.text:00404D38                 mov     ebp, offset loc_406AD0
.text:00404D3D                 jmp     short loc_404CF0
.text:00404D3F ; ---------------------------------------------------------------------------
.text:00404D3F
.text:00404D3F loc_404D3F:                             ; CODE XREF: sub_404A80+22E↑j
.text:00404D3F                                         ; DATA XREF: sub_404A80:jpt_404CAE↑o
.text:00404D3F                 mov     ebp, offset loc_406B10 ; jumptable 00404CAE case 3
.text:00404D44                 jmp     short loc_404CF0
.text:00404D46 ; ---------------------------------------------------------------------------
.text:00404D46
.text:00404D46 loc_404D46:                             ; CODE XREF: sub_404A80+22E↑j
.text:00404D46                                         ; DATA XREF: sub_404A80:jpt_404CAE↑o
.text:00404D46                 mov     ebp, offset loc_406B50 ; jumptable 00404CAE case 4
.text:00404D4B                 jmp     short loc_404CF0
.text:00404D4D ; ---------------------------------------------------------------------------
.text:00404D4D
.text:00404D4D loc_404D4D:                             ; CODE XREF: sub_404A80+22E↑j
.text:00404D4D                                         ; DATA XREF: sub_404A80:jpt_404CAE↑o
.text:00404D4D                 mov     ebp, offset loc_406B90 ; jumptable 00404CAE case 5
.text:00404D52                 jmp     short loc_404CF0
.text:00404D54 ; ---------------------------------------------------------------------------
.text:00404D54
.text:00404D54 loc_404D54:                             ; CODE XREF: sub_404A80+21F↑j
.text:00404D54                 mov     [esp+3Ch+var_34], 2DFh
.text:00404D5C                 mov     [esp+3Ch+Format], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/od.c"
.text:00404D64                 mov     [esp+3Ch+Buffer], offset aStrlenTspecFmt ; "strlen (tspec->fmt_string) < FMT_BYTES_"...
.text:00404D6B
.text:00404D6B loc_404D6B:                             ; CODE XREF: sub_404A80+5E6↓j
.text:00404D6B                 call    _assert
.text:00404D70 ; ---------------------------------------------------------------------------
.text:00404D70
.text:00404D70 loc_404D70:                             ; CODE XREF: sub_404A80+188↑j
.text:00404D70                 cmp     eax, 75h ; 'u'
.text:00404D73                 jz      short loc_404DBB
.text:00404D75                 cmp     eax, 78h ; 'x'
.text:00404D78                 jnz     def_404CAE      ; jumptable 00404CAE default case, case 0
.text:00404D7E                 mov     [esp+3Ch+var_1C], 3
.text:00404D86                 cmp     esi, 5
.text:00404D89                 mov     eax, offset aI64x ; "I64x"
.text:00404D8E                 jz      short loc_404D9F
.text:00404D90                 cmp     esi, 4
.text:00404D93                 mov     eax, offset aLx ; "lx"
.text:00404D98                 jz      short loc_404D9F
.text:00404D9A                 mov     eax, offset asc_404979 ; "x"
.text:00404D9F
.text:00404D9F loc_404D9F:                             ; CODE XREF: sub_404A80+30E↑j
.text:00404D9F                                         ; sub_404A80+318↑j
.text:00404D9F                 movsx   edi, ds:byte_4012B3[edx]
.text:00404DA6
.text:00404DA6 loc_404DA6:                             ; CODE XREF: sub_404A80+390↓j
.text:00404DA6                 mov     dword ptr [esp+3Ch+var_30], eax
.text:00404DAA                 mov     [esp+3Ch+var_34], edi
.text:00404DAE                 mov     [esp+3Ch+Format], offset a0DS ; " %%0%d%s"
.text:00404DB6                 jmp     loc_404C5D
.text:00404DBB ; ---------------------------------------------------------------------------
.text:00404DBB
.text:00404DBB loc_404DBB:                             ; CODE XREF: sub_404A80+2F3↑j
.text:00404DBB                 mov     [esp+3Ch+var_1C], 1
.text:00404DC3                 cmp     esi, 5
.text:00404DC6                 mov     eax, offset aI64u ; "I64u"
.text:00404DCB                 jz      short loc_404DDC
.text:00404DCD                 cmp     esi, 4
.text:00404DD0                 mov     eax, offset aLu ; "lu"
.text:00404DD5                 jz      short loc_404DDC
.text:00404DD7                 mov     eax, offset aU  ; "u"
.text:00404DDC
.text:00404DDC loc_404DDC:                             ; CODE XREF: sub_404A80+34B↑j
.text:00404DDC                                         ; sub_404A80+355↑j
.text:00404DDC                 movsx   edi, byte ptr ds:word_4012A2[edx]
.text:00404DE3                 jmp     loc_404C4D
.text:00404DE8 ; ---------------------------------------------------------------------------
.text:00404DE8
.text:00404DE8 loc_404DE8:                             ; CODE XREF: sub_404A80+17F↑j
.text:00404DE8                 mov     [esp+3Ch+var_1C], 2
.text:00404DF0                 cmp     esi, 5
.text:00404DF3                 mov     eax, offset aI64o ; "I64o"
.text:00404DF8                 jz      short loc_404E09
.text:00404DFA                 cmp     esi, 4
.text:00404DFD                 mov     eax, offset aLo ; "lo"
.text:00404E02                 jz      short loc_404E09
.text:00404E04                 mov     eax, offset aO  ; "o"
.text:00404E09
.text:00404E09 loc_404E09:                             ; CODE XREF: sub_404A80+378↑j
.text:00404E09                                         ; sub_404A80+382↑j
.text:00404E09                 movsx   edi, ds:byte_401280[edx]
.text:00404E10                 jmp     short loc_404DA6
.text:00404E12 ; ---------------------------------------------------------------------------
.text:00404E12
.text:00404E12 loc_404E12:                             ; CODE XREF: sub_404A80+10D↑j
.text:00404E12                                         ; sub_404A80+407↓j
.text:00404E12                 mov     [esp+3Ch+var_18], 4
.text:00404E1A                 mov     edx, 4
.text:00404E1F                 jmp     loc_404BF0
.text:00404E24 ; ---------------------------------------------------------------------------
.text:00404E24
.text:00404E24 loc_404E24:                             ; CODE XREF: sub_404A80+E7↑j
.text:00404E24                                         ; sub_404A80+4A7↓j
.text:00404E24                 mov     [esp+3Ch+Buffer], offset aInvalidTypeStr_0 ; "invalid type string `%s'"
.text:00404E2B                 call    ds:libintl_gettext
.text:00404E31                 mov     dword ptr [esp+3Ch+var_30], ebp ; char
.text:00404E35                 mov     [esp+3Ch+Format], 0 ; ErrorMessage
.text:00404E3D                 mov     [esp+3Ch+Buffer], 0 ; Code
.text:00404E44                 mov     [esp+3Ch+var_34], eax ; char *
.text:00404E48                 call    sub_40ADC0
.text:00404E4D                 jmp     loc_404BD8
.text:00404E52 ; ---------------------------------------------------------------------------
.text:00404E52
.text:00404E52 loc_404E52:                             ; CODE XREF: sub_404A80+B4↑j
.text:00404E52                 mov     [esp+3Ch+var_18], 1
.text:00404E5A                 inc     ebx
.text:00404E5B                 mov     edx, 1
.text:00404E60                 jmp     loc_404BF0
.text:00404E65 ; ---------------------------------------------------------------------------
.text:00404E65
.text:00404E65 loc_404E65:                             ; CODE XREF: sub_404A80+AB↑j
.text:00404E65                 cmp     edx, 4Ch ; 'L'
.text:00404E68                 jz      short loc_404E86
.text:00404E6A                 cmp     edx, 53h ; 'S'
.text:00404E6D                 jnz     loc_404B3A
.text:00404E73                 mov     [esp+3Ch+var_18], 2
.text:00404E7B                 inc     ebx
.text:00404E7C                 mov     edx, 2
.text:00404E81                 jmp     loc_404BF0
.text:00404E86 ; ---------------------------------------------------------------------------
.text:00404E86
.text:00404E86 loc_404E86:                             ; CODE XREF: sub_404A80+A2↑j
.text:00404E86                                         ; sub_404A80+3E8↑j
.text:00404E86                 inc     ebx
.text:00404E87                 jmp     short loc_404E12
.text:00404E87 ; ---------------------------------------------------------------------------
.text:00404E89                 align 10h
.text:00404E90
.text:00404E90 loc_404E90:                             ; CODE XREF: sub_404A80+2D↑j
.text:00404E90                                         ; DATA XREF: sub_404A80:jpt_404AAD↑o
.text:00404E90                 mov     [esp+3Ch+var_1C], 5 ; jumptable 00404AAD case 97
.text:00404E98                 inc     ebx
.text:00404E99                 mov     esi, 1
.text:00404E9E                 mov     ebp, offset loc_406CB0
.text:00404EA3
.text:00404EA3 loc_404EA3:                             ; CODE XREF: sub_404A80+443↓j
.text:00404EA3                 mov     edi, 3
.text:00404EA8                 jmp     loc_404CF0
.text:00404EA8 ; ---------------------------------------------------------------------------
.text:00404EAD                 align 10h
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404A80+2D↑j
.text:00404EB0                                         ; DATA XREF: sub_404A80:jpt_404AAD↑o
.text:00404EB0                 mov     [esp+3Ch+var_1C], 6 ; jumptable 00404AAD case 99
.text:00404EB8                 inc     ebx
.text:00404EB9                 mov     esi, 1
.text:00404EBE                 mov     ebp, offset loc_406D50
.text:00404EC3                 jmp     short loc_404EA3
.text:00404EC5 ; ---------------------------------------------------------------------------
.text:00404EC5
.text:00404EC5 loc_404EC5:                             ; CODE XREF: sub_404A80+2D↑j
.text:00404EC5                                         ; DATA XREF: sub_404A80:jpt_404AAD↑o
.text:00404EC5                 mov     [esp+3Ch+var_1C], 4 ; jumptable 00404AAD case 102
.text:00404ECD                 inc     ebx
.text:00404ECE                 movzx   eax, byte ptr [ebx]
.text:00404ED1                 movsx   edx, al
.text:00404ED4                 cmp     edx, 46h ; 'F'
.text:00404ED7                 jz      loc_40501F
.text:00404EDD                 cmp     edx, 46h ; 'F'
.text:00404EE0                 jg      loc_405003
.text:00404EE6                 cmp     edx, 44h ; 'D'
.text:00404EE9                 jz      loc_405000
.text:00404EEF
.text:00404EEF loc_404EEF:                             ; CODE XREF: sub_404A80+586↓j
.text:00404EEF                 movsx   ecx, al
.text:00404EF2                 xor     edi, edi
.text:00404EF4                 sub     ecx, 30h ; '0'
.text:00404EF7                 cmp     ecx, 9
.text:00404EFA                 mov     esi, ebx
.text:00404EFC                 ja      short loc_404F43
.text:00404EFE                 movzx   edx, byte ptr [ebx]
.text:00404F01                 jmp     short loc_404F10
.text:00404F01 ; ---------------------------------------------------------------------------
.text:00404F03                 align 10h
.text:00404F10
.text:00404F10 loc_404F10:                             ; CODE XREF: sub_404A80+481↑j
.text:00404F10                                         ; sub_404A80+4C1↓j
.text:00404F10                 movsx   eax, dl
.text:00404F13                 inc     esi
.text:00404F14                 lea     ecx, [eax-30h]
.text:00404F17                 mov     edx, ecx
.text:00404F19                 mov     eax, 0CCCCCCCDh
.text:00404F1E                 not     edx
.text:00404F20                 mul     edx
.text:00404F22                 shr     edx, 3
.text:00404F25                 cmp     edi, edx
.text:00404F27                 ja      loc_404E24
.text:00404F2D                 lea     edx, [edi+edi*4]
.text:00404F30                 lea     edi, [ecx+edx*2]
.text:00404F33                 movzx   ecx, byte ptr [esi]
.text:00404F36                 mov     dl, cl
.text:00404F38                 movsx   ecx, cl
.text:00404F3B                 sub     ecx, 30h ; '0'
.text:00404F3E                 cmp     ecx, 9
.text:00404F41                 jbe     short loc_404F10
.text:00404F43
.text:00404F43 loc_404F43:                             ; CODE XREF: sub_404A80+47C↑j
.text:00404F43                 mov     [esp+3Ch+var_14], esi
.text:00404F47                 cmp     esi, ebx
.text:00404F49                 mov     eax, esi
.text:00404F4B                 mov     [esp+3Ch+var_18], edi
.text:00404F4F                 jz      loc_404FEE
.text:00404F55                 mov     edx, [esp+3Ch+var_18]
.text:00404F59                 cmp     edx, 0Ch
.text:00404F5C                 ja      short loc_404F69
.text:00404F5E                 mov     esi, ds:dword_415180[edx*4]
.text:00404F65                 test    esi, esi
.text:00404F67                 jnz     short loc_404F75
.text:00404F69
.text:00404F69 loc_404F69:                             ; CODE XREF: sub_404A80+4DC↑j
.text:00404F69                 mov     [esp+3Ch+Buffer], offset aInvalidTypeStr_1 ; "invalid type string `%s';\nthis system "...
.text:00404F70                 jmp     loc_404BAE
.text:00404F75 ; ---------------------------------------------------------------------------
.text:00404F75
.text:00404F75 loc_404F75:                             ; CODE XREF: sub_404A80+4E7↑j
.text:00404F75                 mov     ebx, eax
.text:00404F77
.text:00404F77 loc_404F77:                             ; CODE XREF: sub_404A80+57B↓j
.text:00404F77                                         ; sub_404A80+59A↓j ...
.text:00404F77                 mov     esi, ds:dword_415180[edx*4]
.text:00404F7E                 cmp     esi, 7
.text:00404F81                 jz      short loc_404FDD
.text:00404F83                 cmp     esi, 7
.text:00404F86                 ja      short loc_404FC3
.text:00404F88                 cmp     esi, 6
.text:00404F8B                 jnz     def_404CAE      ; jumptable 00404CAE default case, case 0
.text:00404F91                 mov     ebp, offset loc_406BD0
.text:00404F96                 mov     edx, offset aDDe ; " %%%d.%de"
.text:00404F9B                 mov     eax, 6
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: sub_404A80+55B↓j
.text:00404FA0                                         ; sub_404A80+56C↓j
.text:00404FA0                 mov     dword ptr [esp+3Ch+var_30], eax
.text:00404FA4                 mov     ecx, [esp+3Ch+arg_C]
.text:00404FA8                 lea     edi, [eax+8]
.text:00404FAB                 mov     [esp+3Ch+var_34], edi
.text:00404FAF                 mov     [esp+3Ch+Format], edx ; Format
.text:00404FB3                 add     ecx, 0Ch
.text:00404FB6                 mov     [esp+3Ch+Buffer], ecx ; Buffer
.text:00404FB9                 call    sprintf
.text:00404FBE                 jmp     loc_404CF0
.text:00404FC3 ; ---------------------------------------------------------------------------
.text:00404FC3
.text:00404FC3 loc_404FC3:                             ; CODE XREF: sub_404A80+506↑j
.text:00404FC3                 cmp     esi, 8
.text:00404FC6                 jnz     def_404CAE      ; jumptable 00404CAE default case, case 0
.text:00404FCC                 mov     ebp, offset loc_406C50
.text:00404FD1                 mov     edx, offset aDDle ; " %%%d.%dLe"
.text:00404FD6                 mov     eax, 12h
.text:00404FDB                 jmp     short loc_404FA0
.text:00404FDD ; ---------------------------------------------------------------------------
.text:00404FDD
.text:00404FDD loc_404FDD:                             ; CODE XREF: sub_404A80+501↑j
.text:00404FDD                 mov     ebp, offset loc_406C10
.text:00404FE2                 mov     edx, offset aDDe ; " %%%d.%de"
.text:00404FE7                 mov     eax, 0Fh
.text:00404FEC                 jmp     short loc_404FA0
.text:00404FEE ; ---------------------------------------------------------------------------
.text:00404FEE
.text:00404FEE loc_404FEE:                             ; CODE XREF: sub_404A80+4CF↑j
.text:00404FEE                                         ; sub_404A80+581↓j
.text:00404FEE                 mov     [esp+3Ch+var_18], 8
.text:00404FF6                 mov     edx, 8
.text:00404FFB                 jmp     loc_404F77
.text:00405000 ; ---------------------------------------------------------------------------
.text:00405000
.text:00405000 loc_405000:                             ; CODE XREF: sub_404A80+469↑j
.text:00405000                 inc     ebx
.text:00405001                 jmp     short loc_404FEE
.text:00405003 ; ---------------------------------------------------------------------------
.text:00405003
.text:00405003 loc_405003:                             ; CODE XREF: sub_404A80+460↑j
.text:00405003                 cmp     edx, 4Ch ; 'L'
.text:00405006                 jnz     loc_404EEF
.text:0040500C                 mov     [esp+3Ch+var_18], 0Ch
.text:00405014                 inc     ebx
.text:00405015                 mov     edx, 0Ch
.text:0040501A                 jmp     loc_404F77
.text:0040501F ; ---------------------------------------------------------------------------
.text:0040501F
.text:0040501F loc_40501F:                             ; CODE XREF: sub_404A80+457↑j
.text:0040501F                 mov     [esp+3Ch+var_18], 4
.text:00405027                 inc     ebx
.text:00405028                 mov     edx, 4
.text:0040502D                 jmp     loc_404F77
.text:00405032 ; ---------------------------------------------------------------------------
.text:00405032
.text:00405032 def_404AAD:                             ; CODE XREF: sub_404A80+27↑j
.text:00405032                                         ; sub_404A80+2D↑j
.text:00405032                                         ; DATA XREF: ...
.text:00405032                 mov     [esp+3Ch+Buffer], offset aInvalidCharact_0 ; jumptable 00404AAD default case, cases 98,101,103-110,112-116,118,119
.text:00405039                 call    ds:libintl_gettext
.text:0040503F                 mov     [esp+3Ch+var_2C], ebp
.text:00405043                 movsx   ebp, byte ptr [ebx]
.text:00405046                 mov     dword ptr [esp+3Ch+var_30], ebp
.text:0040504A                 jmp     loc_404BC0
.text:0040504F ; ---------------------------------------------------------------------------
.text:0040504F
.text:0040504F loc_40504F:                             ; CODE XREF: sub_404A80+15↑j
.text:0040504F                 mov     [esp+3Ch+var_34], 27Dh
.text:00405057                 mov     [esp+3Ch+Format], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/od.c"
.text:0040505F                 mov     [esp+3Ch+Buffer], offset aTspecNull ; "tspec != NULL"
.text:00405066                 jmp     loc_404D6B
.text:00405066 sub_404A80      endp
.text:00405066
.text:00405066 ; ---------------------------------------------------------------------------
.text:0040506B ; const char aR[2]
.text:0040506B aR              db 'r',0                ; DATA XREF: sub_405070:loc_405150↓o
.text:0040506D ; const char aS_4[]
.text:0040506D aS_4            db '%s',0               ; DATA XREF: sub_405070+102↓o
.text:0040506D                                         ; sub_4051F0+1D2↓o ...
.text:00405070
.text:00405070 ; =============== S U B R O U T I N E =======================================
.text:00405070
.text:00405070
.text:00405070 sub_405070      proc near               ; CODE XREF: sub_4025D0:loc_403F53↑p
.text:00405070                                         ; sub_4051F0+16E↓p ...
.text:00405070
.text:00405070 FileHandle      = dword ptr -2Ch
.text:00405070 Mode            = dword ptr -28h
.text:00405070 var_24          = dword ptr -24h
.text:00405070 Size            = dword ptr -20h
.text:00405070
.text:00405070                 push    ebp
.text:00405071                 push    edi
.text:00405072                 push    esi
.text:00405073                 push    ebx
.text:00405074                 sub     esp, 1Ch
.text:00405077                 mov     bl, 1
.text:00405079                 lea     esi, [esi+0]
.text:00405080
.text:00405080 loc_405080:                             ; CODE XREF: sub_405070+6C↓j
.text:00405080                 mov     eax, ds:dword_415120
.text:00405085                 mov     ebp, [eax]
.text:00405087                 test    ebp, ebp
.text:00405089                 mov     ds:dword_415110, ebp
.text:0040508F                 jz      short loc_405101
.text:00405091                 cld
.text:00405092                 add     eax, 4
.text:00405095                 mov     edx, 2
.text:0040509A                 mov     ds:dword_415120, eax
.text:0040509F                 mov     edi, offset dword_401404
.text:004050A4                 mov     esi, ebp
.text:004050A6                 mov     ecx, edx
.text:004050A8                 repe cmpsb
.text:004050AA                 jnz     loc_405150
.text:004050B0                 mov     [esp+2Ch+FileHandle], offset aStandardInput ; "standard input"
.text:004050B7                 call    ds:libintl_gettext
.text:004050BD                 mov     ds:byte_415140, 1
.text:004050C4                 mov     edx, ds:_iob
.text:004050CA                 mov     ds:dword_415110, eax
.text:004050CF                 mov     ds:Stream, edx
.text:004050D5
.text:004050D5 loc_4050D5:                             ; CODE XREF: sub_405070+128↓j
.text:004050D5                 mov     eax, ds:Stream
.text:004050DA                 test    eax, eax
.text:004050DC                 jz      short loc_405080
.text:004050DE                 mov     esi, esi
.text:004050E0
.text:004050E0 loc_4050E0:                             ; CODE XREF: sub_405070+F7↓j
.text:004050E0                 cmp     ds:byte_415060, 0
.text:004050E7                 jnz     short loc_4050F2
.text:004050E9                 cmp     ds:byte_415010, 0
.text:004050F0                 jnz     short loc_405127
.text:004050F2
.text:004050F2 loc_4050F2:                             ; CODE XREF: sub_405070+77↑j
.text:004050F2                                         ; sub_405070+DC↓j
.text:004050F2                 mov     esi, [eax+10h]
.text:004050F5                 mov     [esp+2Ch+FileHandle], esi ; FileHandle
.text:004050F8                 call    _isatty
.text:004050FD                 test    eax, eax
.text:004050FF                 jz      short loc_40510C
.text:00405101
.text:00405101 loc_405101:                             ; CODE XREF: sub_405070+1F↑j
.text:00405101                                         ; sub_405070+B5↓j
.text:00405101                 add     esp, 1Ch
.text:00405104                 movzx   eax, bl
.text:00405107                 pop     ebx
.text:00405108                 pop     esi
.text:00405109                 pop     edi
.text:0040510A                 pop     ebp
.text:0040510B                 retn
.text:0040510C ; ---------------------------------------------------------------------------
.text:0040510C
.text:0040510C loc_40510C:                             ; CODE XREF: sub_405070+8F↑j
.text:0040510C                 mov     [esp+2Ch+Mode], 8000h ; Mode
.text:00405114                 mov     ebp, ds:Stream
.text:0040511A                 mov     edi, [ebp+10h]
.text:0040511D                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00405120                 call    _setmode
.text:00405125                 jmp     short loc_405101
.text:00405127 ; ---------------------------------------------------------------------------
.text:00405127
.text:00405127 loc_405127:                             ; CODE XREF: sub_405070+80↑j
.text:00405127                 mov     [esp+2Ch+Size], 0 ; Size
.text:0040512F                 mov     [esp+2Ch+var_24], 4 ; Mode
.text:00405137                 mov     [esp+2Ch+Mode], 0 ; Buffer
.text:0040513F                 mov     [esp+2Ch+FileHandle], eax ; Stream
.text:00405142                 call    setvbuf
.text:00405147                 mov     eax, ds:Stream
.text:0040514C                 jmp     short loc_4050F2
.text:0040514C ; ---------------------------------------------------------------------------
.text:0040514E                 align 10h
.text:00405150
.text:00405150 loc_405150:                             ; CODE XREF: sub_405070+3A↑j
.text:00405150                 mov     [esp+2Ch+Mode], offset aR ; "r"
.text:00405158                 mov     [esp+2Ch+FileHandle], ebp ; FileName
.text:0040515B                 call    fopen
.text:00405160                 mov     ds:Stream, eax
.text:00405165                 test    eax, eax
.text:00405167                 jnz     loc_4050E0
.text:0040516D                 call    _errno
.text:00405172                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:0040517A                 mov     ebx, ds:dword_415110
.text:00405180                 mov     [esp+2Ch+Size], ebx ; char
.text:00405184                 mov     ecx, [eax]
.text:00405186                 xor     ebx, ebx
.text:00405188                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:0040518F                 mov     [esp+2Ch+Mode], ecx ; ErrorMessage
.text:00405193                 call    sub_40ADC0
.text:00405198                 jmp     loc_4050D5
.text:00405198 sub_405070      endp
.text:00405198
.text:00405198 ; ---------------------------------------------------------------------------
.text:0040519D aWriteError     db 'write error',0      ; DATA XREF: sub_4051F0:loc_40538E↓o
.text:0040519D                                         ; sub_405980:loc_405C79↓o ...
.text:004051A9 aSReadError     db '%s: read error',0   ; DATA XREF: sub_4051F0:loc_4053F0↓o
.text:004051A9                                         ; sub_405980:loc_405CD2↓o ...
.text:004051B8                 align 10h
.text:004051C0 aCannotSkipPast db 'cannot skip past end of combined input',0
.text:004051C0                                         ; DATA XREF: sub_4051F0:loc_405467↓o
.text:004051E7                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0
.text:004051F0 sub_4051F0      proc near               ; CODE XREF: sub_4025D0+19B2↑p
.text:004051F0
.text:004051F0 Buffer          = dword ptr -2ACh
.text:004051F0 ElementSize     = dword ptr -2A8h
.text:004051F0 ElementCount    = dword ptr -2A4h
.text:004051F0 Stream          = dword ptr -2A0h
.text:004051F0 var_297         = byte ptr -297h
.text:004051F0 var_296         = byte ptr -296h
.text:004051F0 var_295         = byte ptr -295h
.text:004051F0 ErrorMessage    = dword ptr -294h
.text:004051F0 var_28D         = byte ptr -28Dh
.text:004051F0 var_28C         = byte ptr -28Ch
.text:004051F0 var_8C          = dword ptr -8Ch
.text:004051F0 var_5C          = dword ptr -5Ch
.text:004051F0 var_58          = dword ptr -58h
.text:004051F0 arg_0           = dword ptr  4
.text:004051F0 arg_4           = dword ptr  8
.text:004051F0
.text:004051F0                 push    ebp
.text:004051F1                 mov     eax, 1
.text:004051F6                 push    edi
.text:004051F7                 push    esi
.text:004051F8                 push    ebx
.text:004051F9                 sub     esp, 29Ch
.text:004051FF                 mov     esi, [esp+2ACh+arg_4]
.text:00405206                 mov     [esp+2ACh+var_28D], 1
.text:0040520B                 mov     ebx, [esp+2ACh+arg_0]
.text:00405212                 mov     [esp+2ACh+ErrorMessage], 0
.text:0040521A                 mov     ecx, esi
.text:0040521C                 or      ecx, ebx
.text:0040521E                 jz      loc_40545C
.text:00405224                 lea     esi, [esi+0]
.text:0040522A                 lea     edi, [edi+0]
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: sub_4051F0+199↓j
.text:00405230                 mov     edx, ds:Stream
.text:00405236                 test    edx, edx
.text:00405238                 jz      loc_405451
.text:0040523E                 lea     edi, [esp+2ACh+var_8C]
.text:00405245                 mov     [esp+2ACh+ElementSize], edi ; int
.text:00405249                 mov     ecx, [edx+10h]
.text:0040524C                 mov     [esp+2ACh+Buffer], ecx ; char *
.text:0040524F                 call    sub_40B060
.text:00405254                 test    eax, eax
.text:00405256                 jnz     loc_405504
.text:0040525C                 mov     edx, [esp+2ACh+var_8C]
.text:00405263                 and     edx, 0F000h
.text:00405269                 cmp     edx, 8000h
.text:0040526F                 jz      loc_4054B7
.text:00405275
.text:00405275 loc_405275:                             ; CODE XREF: sub_4051F0+2D7↓j
.text:00405275                 cmp     esi, 0
.text:00405278                 mov     edi, 200h
.text:0040527D                 jbe     loc_4054A9
.text:00405283
.text:00405283 loc_405283:                             ; CODE XREF: sub_4051F0+2BC↓j
.text:00405283                 lea     ebp, [esp+2ACh+var_28C]
.text:00405287                 mov     esi, esi
.text:00405289                 lea     edi, [edi+0]
.text:00405290
.text:00405290 loc_405290:                             ; CODE XREF: sub_4051F0+DD↓j
.text:00405290                                         ; sub_4051F0+E2↓j
.text:00405290                 xor     ecx, ecx
.text:00405292                 cmp     esi, ecx
.text:00405294                 ja      short loc_40529E
.text:00405296                 jb      short loc_40529C
.text:00405298                 cmp     ebx, edi
.text:0040529A                 jnb     short loc_40529E
.text:0040529C
.text:0040529C loc_40529C:                             ; CODE XREF: sub_4051F0+A6↑j
.text:0040529C                 mov     edi, ebx
.text:0040529E
.text:0040529E loc_40529E:                             ; CODE XREF: sub_4051F0+A4↑j
.text:0040529E                                         ; sub_4051F0+AA↑j
.text:0040529E                 mov     [esp+2ACh+ElementCount], edi ; ElementCount
.text:004052A2                 mov     edx, ds:Stream
.text:004052A8                 mov     [esp+2ACh+ElementSize], 1 ; ElementSize
.text:004052B0                 mov     [esp+2ACh+Buffer], ebp ; Buffer
.text:004052B3                 mov     [esp+2ACh+Stream], edx ; char
.text:004052B7                 call    fread
.text:004052BC                 xor     ecx, ecx
.text:004052BE                 sub     ebx, eax
.text:004052C0                 sbb     esi, ecx
.text:004052C2                 cmp     eax, edi
.text:004052C4                 jnz     loc_405490
.text:004052CA                 cmp     esi, 0
.text:004052CD                 ja      short loc_405290
.text:004052CF                 cmp     ebx, 0
.text:004052D2                 ja      short loc_405290
.text:004052D4                 lea     esi, [esi+0]
.text:004052DA                 lea     edi, [edi+0]
.text:004052E0
.text:004052E0 loc_4052E0:                             ; CODE XREF: sub_4051F0+2B4↓j
.text:004052E0                                         ; sub_4051F0+2C2↓j ...
.text:004052E0                 mov     ebp, esi
.text:004052E2                 or      ebp, ebx
.text:004052E4                 jz      loc_405451
.text:004052EA
.text:004052EA loc_4052EA:                             ; CODE XREF: sub_4051F0+342↓j
.text:004052EA                 mov     [esp+2ACh+var_295], 0
.text:004052EF                 mov     eax, ds:Stream
.text:004052F4                 mov     [esp+2ACh+var_296], 1
.text:004052F9                 test    eax, eax
.text:004052FB                 jz      loc_405446
.text:00405301                 test    byte ptr [eax+0Ch], 20h
.text:00405305                 jnz     loc_4053F0
.text:0040530B                 mov     edx, ds:_iob
.text:00405311                 cmp     eax, edx
.text:00405313                 jz      short loc_40532A
.text:00405315                 mov     [esp+2ACh+Buffer], eax ; Stream
.text:00405318                 call    fclose
.text:0040531D                 inc     eax
.text:0040531E                 jz      loc_4053BD
.text:00405324
.text:00405324 loc_405324:                             ; CODE XREF: sub_4051F0+1FB↓j
.text:00405324                 mov     edx, ds:_iob
.text:0040532A
.text:0040532A loc_40532A:                             ; CODE XREF: sub_4051F0+123↑j
.text:0040532A                                         ; sub_4051F0+251↓j
.text:0040532A                 xor     ecx, ecx
.text:0040532C                 mov     ds:Stream, ecx
.text:00405332
.text:00405332 loc_405332:                             ; CODE XREF: sub_4051F0+25C↓j
.text:00405332                 test    byte ptr [edx+2Ch], 20h
.text:00405336                 jnz     short loc_40538E
.text:00405338
.text:00405338 loc_405338:                             ; CODE XREF: sub_4051F0+1C8↓j
.text:00405338                 cmp     [esp+2ACh+var_296], 0
.text:0040533D                 jz      short loc_405350
.text:0040533F                 cmp     [esp+2ACh+var_28D], 0
.text:00405344                 jz      short loc_405350
.text:00405346                 mov     [esp+2ACh+var_295], 1
.text:0040534B                 nop
.text:0040534C                 lea     esi, [esi+0]
.text:00405350
.text:00405350 loc_405350:                             ; CODE XREF: sub_4051F0+14D↑j
.text:00405350                                         ; sub_4051F0+154↑j
.text:00405350                 movzx   edx, [esp+2ACh+var_295]
.text:00405355                 mov     [esp+2ACh+var_297], 0
.text:0040535A                 mov     [esp+2ACh+var_28D], dl
.text:0040535E                 call    sub_405070
.text:00405363                 test    al, al
.text:00405365                 jz      short loc_405380
.text:00405367                 cmp     [esp+2ACh+var_28D], 0
.text:0040536C                 jz      short loc_405380
.text:0040536E                 mov     [esp+2ACh+var_297], 1
.text:00405373                 lea     esi, [esi+0]
.text:00405379                 lea     edi, [edi+0]
.text:00405380
.text:00405380 loc_405380:                             ; CODE XREF: sub_4051F0+175↑j
.text:00405380                                         ; sub_4051F0+17C↑j
.text:00405380                 movzx   eax, [esp+2ACh+var_297]
.text:00405385                 mov     [esp+2ACh+var_28D], al
.text:00405389                 jmp     loc_405230
.text:0040538E ; ---------------------------------------------------------------------------
.text:0040538E
.text:0040538E loc_40538E:                             ; CODE XREF: sub_4051F0+146↑j
.text:0040538E                 mov     [esp+2ACh+Buffer], offset aWriteError ; "write error"
.text:00405395                 call    ds:libintl_gettext
.text:0040539B                 mov     [esp+2ACh+ElementSize], 0 ; ErrorMessage
.text:004053A3                 mov     [esp+2ACh+Buffer], 0 ; Code
.text:004053AA                 mov     [esp+2ACh+ElementCount], eax ; char *
.text:004053AE                 call    sub_40ADC0
.text:004053B3                 mov     [esp+2ACh+var_296], 0
.text:004053B8                 jmp     loc_405338
.text:004053BD ; ---------------------------------------------------------------------------
.text:004053BD
.text:004053BD loc_4053BD:                             ; CODE XREF: sub_4051F0+12E↑j
.text:004053BD                 call    _errno
.text:004053C2                 mov     [esp+2ACh+ElementCount], offset aS_4 ; "%s"
.text:004053CA                 mov     edi, ds:dword_415110
.text:004053D0                 mov     [esp+2ACh+Stream], edi ; char
.text:004053D4                 mov     edx, [eax]
.text:004053D6                 mov     [esp+2ACh+Buffer], 0 ; Code
.text:004053DD                 mov     [esp+2ACh+ElementSize], edx ; ErrorMessage
.text:004053E1                 call    sub_40ADC0
.text:004053E6                 mov     [esp+2ACh+var_296], 0
.text:004053EB                 jmp     loc_405324
.text:004053F0 ; ---------------------------------------------------------------------------
.text:004053F0
.text:004053F0 loc_4053F0:                             ; CODE XREF: sub_4051F0+115↑j
.text:004053F0                 mov     [esp+2ACh+Buffer], offset aSReadError ; "%s: read error"
.text:004053F7                 call    ds:libintl_gettext
.text:004053FD                 mov     [esp+2ACh+Buffer], 0 ; Code
.text:00405404                 mov     ebp, ds:dword_415110
.text:0040540A                 mov     [esp+2ACh+ElementCount], eax ; char *
.text:0040540E                 mov     eax, [esp+2ACh+ErrorMessage]
.text:00405412                 mov     [esp+2ACh+Stream], ebp ; char
.text:00405416                 mov     [esp+2ACh+ElementSize], eax ; ErrorMessage
.text:0040541A                 call    sub_40ADC0
.text:0040541F                 mov     eax, ds:Stream
.text:00405424                 mov     edx, ds:_iob
.text:0040542A                 cmp     eax, edx
.text:0040542C                 jz      short loc_40543C
.text:0040542E                 mov     [esp+2ACh+Buffer], eax ; Stream
.text:00405431                 call    fclose
.text:00405436                 mov     edx, ds:_iob
.text:0040543C
.text:0040543C loc_40543C:                             ; CODE XREF: sub_4051F0+23C↑j
.text:0040543C                 mov     [esp+2ACh+var_296], 0
.text:00405441                 jmp     loc_40532A
.text:00405446 ; ---------------------------------------------------------------------------
.text:00405446
.text:00405446 loc_405446:                             ; CODE XREF: sub_4051F0+10B↑j
.text:00405446                 mov     edx, ds:_iob
.text:0040544C                 jmp     loc_405332
.text:00405451 ; ---------------------------------------------------------------------------
.text:00405451
.text:00405451 loc_405451:                             ; CODE XREF: sub_4051F0+48↑j
.text:00405451                                         ; sub_4051F0+F4↑j
.text:00405451                 mov     ebp, esi
.text:00405453                 or      ebp, ebx
.text:00405455                 jnz     short loc_405467
.text:00405457
.text:00405457 loc_405457:                             ; CODE XREF: sub_4051F0+29C↓j
.text:00405457                 movzx   eax, [esp+2ACh+var_28D]
.text:0040545C
.text:0040545C loc_40545C:                             ; CODE XREF: sub_4051F0+2E↑j
.text:0040545C                 add     esp, 29Ch
.text:00405462                 pop     ebx
.text:00405463                 pop     esi
.text:00405464                 pop     edi
.text:00405465                 pop     ebp
.text:00405466                 retn
.text:00405467 ; ---------------------------------------------------------------------------
.text:00405467
.text:00405467 loc_405467:                             ; CODE XREF: sub_4051F0+265↑j
.text:00405467                 mov     [esp+2ACh+Buffer], offset aCannotSkipPast ; "cannot skip past end of combined input"
.text:0040546E                 call    ds:libintl_gettext
.text:00405474                 mov     [esp+2ACh+ElementSize], 0 ; ErrorMessage
.text:0040547C                 mov     [esp+2ACh+Buffer], 1 ; Code
.text:00405483                 mov     [esp+2ACh+ElementCount], eax ; char *
.text:00405487                 call    sub_40ADC0
.text:0040548C                 jmp     short loc_405457
.text:0040548C ; ---------------------------------------------------------------------------
.text:0040548E                 align 10h
.text:00405490
.text:00405490 loc_405490:                             ; CODE XREF: sub_4051F0+D4↑j
.text:00405490                                         ; sub_4051F0+312↓j
.text:00405490                 call    _errno
.text:00405495                 mov     [esp+2ACh+var_28D], 0
.text:0040549A                 mov     esi, [eax]
.text:0040549C                 mov     [esp+2ACh+ErrorMessage], esi
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: sub_4051F0+310↓j
.text:004054A0                 xor     ebx, ebx
.text:004054A2                 xor     esi, esi
.text:004054A4                 jmp     loc_4052E0
.text:004054A9 ; ---------------------------------------------------------------------------
.text:004054A9
.text:004054A9 loc_4054A9:                             ; CODE XREF: sub_4051F0+8D↑j
.text:004054A9                 cmp     ebx, 0
.text:004054AC                 ja      loc_405283
.text:004054B2                 jmp     loc_4052E0
.text:004054B7 ; ---------------------------------------------------------------------------
.text:004054B7
.text:004054B7 loc_4054B7:                             ; CODE XREF: sub_4051F0+7F↑j
.text:004054B7                 mov     edx, [esp+2ACh+var_58]
.text:004054BE                 mov     eax, [esp+2ACh+var_5C]
.text:004054C5                 test    edx, edx
.text:004054C7                 js      loc_405275
.text:004054CD                 cmp     edx, esi
.text:004054CF                 ja      short loc_4054E0
.text:004054D1                 jb      short loc_4054D7
.text:004054D3                 cmp     eax, ebx
.text:004054D5                 ja      short loc_4054E0
.text:004054D7
.text:004054D7 loc_4054D7:                             ; CODE XREF: sub_4051F0+2E1↑j
.text:004054D7                 sub     ebx, eax
.text:004054D9                 sbb     esi, edx
.text:004054DB                 jmp     loc_4052E0
.text:004054E0 ; ---------------------------------------------------------------------------
.text:004054E0
.text:004054E0 loc_4054E0:                             ; CODE XREF: sub_4051F0+2DF↑j
.text:004054E0                                         ; sub_4051F0+2E5↑j
.text:004054E0                 mov     [esp+2ACh+ElementSize], ebx ; int
.text:004054E4                 mov     ebx, ds:Stream
.text:004054EA                 mov     [esp+2ACh+Stream], 1 ; int
.text:004054F2                 mov     [esp+2ACh+ElementCount], esi ; int
.text:004054F6                 mov     [esp+2ACh+Buffer], ebx ; FILE *
.text:004054F9                 call    sub_40E3F0
.text:004054FE                 test    eax, eax
.text:00405500                 jz      short loc_4054A0
.text:00405502                 jmp     short loc_405490
.text:00405504 ; ---------------------------------------------------------------------------
.text:00405504
.text:00405504 loc_405504:                             ; CODE XREF: sub_4051F0+66↑j
.text:00405504                 call    _errno
.text:00405509                 mov     [esp+2ACh+ElementCount], offset aS_4 ; "%s"
.text:00405511                 mov     ecx, ds:dword_415110
.text:00405517                 mov     [esp+2ACh+Stream], ecx ; char
.text:0040551B                 mov     edi, [eax]
.text:0040551D                 mov     [esp+2ACh+Buffer], 0 ; Code
.text:00405524                 mov     [esp+2ACh+ElementSize], edi ; ErrorMessage
.text:00405528                 call    sub_40ADC0
.text:0040552D                 mov     [esp+2ACh+var_28D], 0
.text:00405532                 jmp     loc_4052EA
.text:00405532 sub_4051F0      endp
.text:00405532
.text:00405532 ; ---------------------------------------------------------------------------
.text:00405537                 align 10h
.text:00405540
.text:00405540 ; =============== S U B R O U T I N E =======================================
.text:00405540
.text:00405540
.text:00405540 nullsub_1       proc near               ; DATA XREF: sub_4025D0:loc_402C2C↑o
.text:00405540                                         ; sub_4025D0+187D↑o
.text:00405540                 retn
.text:00405540 nullsub_1       endp
.text:00405540
.text:00405540 ; ---------------------------------------------------------------------------
.text:00405541 byte_405541     db 30h                  ; DATA XREF: sub_405560+8C↓r
.text:00405541                                         ; sub_405650+10C↓r ...
.text:00405542 a123456789abcde db '123456789abcdef',0
.text:00405552                 align 10h
.text:00405560
.text:00405560 ; =============== S U B R O U T I N E =======================================
.text:00405560
.text:00405560
.text:00405560 sub_405560      proc near               ; DATA XREF: sub_4025D0+111↑o
.text:00405560                                         ; sub_4025D0:loc_402BBF↑o ...
.text:00405560
.text:00405560 Buffer          = dword ptr -4Ch
.text:00405560 Stream          = dword ptr -48h
.text:00405560 var_44          = dword ptr -44h
.text:00405560 var_40          = dword ptr -40h
.text:00405560 var_25          = byte ptr -25h
.text:00405560 var_24          = byte ptr -24h
.text:00405560 arg_0           = dword ptr  4
.text:00405560 arg_4           = dword ptr  8
.text:00405560 arg_8           = dword ptr  0Ch
.text:00405560
.text:00405560                 push    ebp
.text:00405561                 push    edi
.text:00405562                 push    esi
.text:00405563                 push    ebx
.text:00405564                 sub     esp, 3Ch
.text:00405567                 mov     edx, [esp+4Ch+arg_8]
.text:0040556B                 mov     [esp+4Ch+var_24], 0
.text:00405570                 mov     eax, ds:dword_415030
.text:00405575                 lea     edi, [esp+4Ch+var_25]
.text:00405579                 mov     ebp, edi
.text:0040557B                 mov     ebx, [esp+4Ch+arg_0]
.text:0040557F                 mov     esi, [esp+4Ch+arg_4]
.text:00405583                 mov     [esp+4Ch+var_25], dl
.text:00405587                 mov     edx, ds:dword_415040
.text:0040558D                 sub     ebp, edx
.text:0040558F                 cmp     eax, 0Ah
.text:00405592                 jz      short loc_405604
.text:00405594                 cmp     eax, 0Ah
.text:00405597                 jg      short loc_4055E1
.text:00405599                 cmp     eax, 8
.text:0040559C                 jz      short loc_4055C7
.text:0040559E                 mov     esi, esi
.text:004055A0
.text:004055A0 loc_4055A0:                             ; CODE XREF: sub_405560+48↓j
.text:004055A0                                         ; sub_405560+7F↓j ...
.text:004055A0                 cmp     ebp, edi
.text:004055A2                 jnb     short loc_4055AA
.text:004055A4                 dec     edi
.text:004055A5                 mov     byte ptr [edi], 30h ; '0'
.text:004055A8                 jmp     short loc_4055A0
.text:004055AA ; ---------------------------------------------------------------------------
.text:004055AA
.text:004055AA loc_4055AA:                             ; CODE XREF: sub_405560+42↑j
.text:004055AA                 mov     [esp+4Ch+Buffer], edi ; Buffer
.text:004055AD                 mov     ebx, ds:_iob
.text:004055B3                 add     ebx, 20h ; ' '
.text:004055B6                 mov     [esp+4Ch+Stream], ebx ; Stream
.text:004055BA                 call    fputs
.text:004055BF                 add     esp, 3Ch
.text:004055C2                 pop     ebx
.text:004055C3                 pop     esi
.text:004055C4                 pop     edi
.text:004055C5                 pop     ebp
.text:004055C6                 retn
.text:004055C7 ; ---------------------------------------------------------------------------
.text:004055C7
.text:004055C7 loc_4055C7:                             ; CODE XREF: sub_405560+3C↑j
.text:004055C7                                         ; sub_405560+7D↓j
.text:004055C7                 mov     dl, bl
.text:004055C9                 dec     edi
.text:004055CA                 and     dl, 7
.text:004055CD                 shrd    ebx, esi, 3
.text:004055D1                 add     dl, 30h ; '0'
.text:004055D4                 shr     esi, 3
.text:004055D7                 mov     [edi], dl
.text:004055D9                 mov     ecx, esi
.text:004055DB                 or      ecx, ebx
.text:004055DD                 jnz     short loc_4055C7
.text:004055DF                 jmp     short loc_4055A0
.text:004055E1 ; ---------------------------------------------------------------------------
.text:004055E1
.text:004055E1 loc_4055E1:                             ; CODE XREF: sub_405560+37↑j
.text:004055E1                 cmp     eax, 10h
.text:004055E4                 jnz     short loc_4055A0
.text:004055E6
.text:004055E6 loc_4055E6:                             ; CODE XREF: sub_405560+A0↓j
.text:004055E6                 mov     edx, ebx
.text:004055E8                 dec     edi
.text:004055E9                 and     edx, 0Fh
.text:004055EC                 movzx   ecx, ds:byte_405541[edx]
.text:004055F3                 shrd    ebx, esi, 4
.text:004055F7                 shr     esi, 4
.text:004055FA                 mov     edx, esi
.text:004055FC                 mov     [edi], cl
.text:004055FE                 or      edx, ebx
.text:00405600                 jnz     short loc_4055E6
.text:00405602                 jmp     short loc_4055A0
.text:00405604 ; ---------------------------------------------------------------------------
.text:00405604
.text:00405604 loc_405604:                             ; CODE XREF: sub_405560+32↑j
.text:00405604                                         ; sub_405560+E9↓j
.text:00405604                 mov     [esp+4Ch+Buffer], ebx
.text:00405607                 dec     edi
.text:00405608                 mov     [esp+4Ch+Stream], esi
.text:0040560C                 mov     [esp+4Ch+var_44], 0Ah
.text:00405614                 mov     [esp+4Ch+var_40], 0
.text:0040561C                 call    sub_412750
.text:00405621                 add     al, 30h ; '0'
.text:00405623                 mov     [edi], al
.text:00405625                 mov     [esp+4Ch+Buffer], ebx
.text:00405628                 mov     [esp+4Ch+Stream], esi
.text:0040562C                 mov     [esp+4Ch+var_44], 0Ah
.text:00405634                 mov     [esp+4Ch+var_40], 0
.text:0040563C                 call    sub_4128D0
.text:00405641                 mov     ecx, edx
.text:00405643                 mov     ebx, eax
.text:00405645                 or      ecx, eax
.text:00405647                 mov     esi, edx
.text:00405649                 jnz     short loc_405604
.text:0040564B                 jmp     loc_4055A0
.text:0040564B sub_405560      endp
.text:0040564B
.text:00405650
.text:00405650 ; =============== S U B R O U T I N E =======================================
.text:00405650
.text:00405650
.text:00405650 sub_405650      proc near               ; CODE XREF: sub_4057E0+AB↓p
.text:00405650                                         ; DATA XREF: sub_4025D0+1BE5↑o
.text:00405650
.text:00405650 Buffer          = dword ptr -5Ch
.text:00405650 Stream          = dword ptr -58h
.text:00405650 var_54          = dword ptr -54h
.text:00405650 var_50          = dword ptr -50h
.text:00405650 var_3D          = byte ptr -3Dh
.text:00405650 var_25          = byte ptr -25h
.text:00405650 var_24          = byte ptr -24h
.text:00405650 arg_0           = dword ptr  4
.text:00405650 arg_4           = dword ptr  8
.text:00405650 arg_8           = byte ptr  0Ch
.text:00405650
.text:00405650                 push    ebp
.text:00405651                 push    edi
.text:00405652                 push    esi
.text:00405653                 push    ebx
.text:00405654                 sub     esp, 4Ch
.text:00405657                 mov     edx, ds:_iob
.text:0040565D                 movzx   ecx, [esp+5Ch+arg_8]
.text:00405662                 mov     ebx, [esp+5Ch+arg_0]
.text:00405666                 mov     esi, [esp+5Ch+arg_4]
.text:0040566A                 mov     [esp+5Ch+var_3D], cl
.text:0040566E                 mov     ecx, [edx+24h]
.text:00405671                 dec     ecx
.text:00405672                 mov     [edx+24h], ecx
.text:00405675                 test    ecx, ecx
.text:00405677                 js      loc_4057C1
.text:0040567D                 mov     edi, ds:_iob
.text:00405683                 mov     eax, [edi+20h]
.text:00405686                 mov     byte ptr [eax], 28h ; '('
.text:00405689                 inc     dword ptr [edi+20h]
.text:0040568C
.text:0040568C loc_40568C:                             ; CODE XREF: sub_405650+18A↓j
.text:0040568C                 mov     [esp+5Ch+var_24], 0
.text:00405691                 mov     edx, ds:dword_415040
.text:00405697                 lea     edi, [esp+5Ch+var_25]
.text:0040569B                 mov     [esp+5Ch+var_25], 29h ; ')'
.text:004056A0                 mov     eax, ds:dword_415030
.text:004056A5                 mov     ebp, edi
.text:004056A7                 sub     ebp, edx
.text:004056A9                 cmp     eax, 0Ah
.text:004056AC                 jz      loc_405777
.text:004056B2                 cmp     eax, 0Ah
.text:004056B5                 jg      loc_40574D
.text:004056BB                 cmp     eax, 8
.text:004056BE                 jz      short loc_405730
.text:004056C0
.text:004056C0 loc_4056C0:                             ; CODE XREF: sub_405650+78↓j
.text:004056C0                                         ; sub_405650+F8↓j ...
.text:004056C0                 cmp     ebp, edi
.text:004056C2                 jnb     short loc_4056CA
.text:004056C4                 dec     edi
.text:004056C5                 mov     byte ptr [edi], 30h ; '0'
.text:004056C8                 jmp     short loc_4056C0
.text:004056CA ; ---------------------------------------------------------------------------
.text:004056CA
.text:004056CA loc_4056CA:                             ; CODE XREF: sub_405650+72↑j
.text:004056CA                 mov     [esp+5Ch+Buffer], edi ; Buffer
.text:004056CD                 mov     ebx, ds:_iob
.text:004056D3                 add     ebx, 20h ; ' '
.text:004056D6                 mov     [esp+5Ch+Stream], ebx ; Stream
.text:004056DA                 call    fputs
.text:004056DF                 cmp     [esp+5Ch+var_3D], 0
.text:004056E4                 jz      short loc_40570A
.text:004056E6                 mov     edi, ds:_iob
.text:004056EC                 mov     esi, [edi+24h]
.text:004056EF                 dec     esi
.text:004056F0                 mov     [edi+24h], esi
.text:004056F3                 test    esi, esi
.text:004056F5                 js      short loc_405712
.text:004056F7                 movzx   edx, [esp+5Ch+var_3D]
.text:004056FC                 mov     ebp, ds:_iob
.text:00405702                 mov     eax, [ebp+20h]
.text:00405705                 mov     [eax], dl
.text:00405707                 inc     dword ptr [ebp+20h]
.text:0040570A
.text:0040570A loc_40570A:                             ; CODE XREF: sub_405650+94↑j
.text:0040570A                                         ; sub_405650+DC↓j
.text:0040570A                 add     esp, 4Ch
.text:0040570D                 pop     ebx
.text:0040570E                 pop     esi
.text:0040570F                 pop     edi
.text:00405710                 pop     ebp
.text:00405711                 retn
.text:00405712 ; ---------------------------------------------------------------------------
.text:00405712
.text:00405712 loc_405712:                             ; CODE XREF: sub_405650+A5↑j
.text:00405712                 movsx   ecx, [esp+5Ch+var_3D]
.text:00405717                 mov     ebx, ds:_iob
.text:0040571D                 add     ebx, 20h ; ' '
.text:00405720                 mov     [esp+5Ch+Stream], ebx ; File
.text:00405724                 mov     [esp+5Ch+Buffer], ecx ; Ch
.text:00405727                 call    _flsbuf
.text:0040572C                 jmp     short loc_40570A
.text:0040572C ; ---------------------------------------------------------------------------
.text:0040572E                 align 10h
.text:00405730
.text:00405730 loc_405730:                             ; CODE XREF: sub_405650+6E↑j
.text:00405730                                         ; sub_405650+F6↓j
.text:00405730                 mov     cl, bl
.text:00405732                 dec     edi
.text:00405733                 and     cl, 7
.text:00405736                 shrd    ebx, esi, 3
.text:0040573A                 add     cl, 30h ; '0'
.text:0040573D                 shr     esi, 3
.text:00405740                 mov     [edi], cl
.text:00405742                 mov     eax, esi
.text:00405744                 or      eax, ebx
.text:00405746                 jnz     short loc_405730
.text:00405748                 jmp     loc_4056C0
.text:0040574D ; ---------------------------------------------------------------------------
.text:0040574D
.text:0040574D loc_40574D:                             ; CODE XREF: sub_405650+65↑j
.text:0040574D                 cmp     eax, 10h
.text:00405750                 jnz     loc_4056C0
.text:00405756
.text:00405756 loc_405756:                             ; CODE XREF: sub_405650+120↓j
.text:00405756                 mov     edx, ebx
.text:00405758                 dec     edi
.text:00405759                 and     edx, 0Fh
.text:0040575C                 movzx   ecx, ds:byte_405541[edx]
.text:00405763                 shrd    ebx, esi, 4
.text:00405767                 shr     esi, 4
.text:0040576A                 mov     eax, esi
.text:0040576C                 mov     [edi], cl
.text:0040576E                 or      eax, ebx
.text:00405770                 jnz     short loc_405756
.text:00405772                 jmp     loc_4056C0
.text:00405777 ; ---------------------------------------------------------------------------
.text:00405777
.text:00405777 loc_405777:                             ; CODE XREF: sub_405650+5C↑j
.text:00405777                                         ; sub_405650+16A↓j
.text:00405777                 mov     [esp+5Ch+Buffer], ebx
.text:0040577A                 dec     edi
.text:0040577B                 mov     [esp+5Ch+Stream], esi
.text:0040577F                 mov     [esp+5Ch+var_54], 0Ah
.text:00405787                 mov     [esp+5Ch+var_50], 0
.text:0040578F                 call    sub_412750
.text:00405794                 add     al, 30h ; '0'
.text:00405796                 mov     [edi], al
.text:00405798                 mov     [esp+5Ch+Buffer], ebx
.text:0040579B                 mov     [esp+5Ch+Stream], esi
.text:0040579F                 mov     [esp+5Ch+var_54], 0Ah
.text:004057A7                 mov     [esp+5Ch+var_50], 0
.text:004057AF                 call    sub_4128D0
.text:004057B4                 mov     ebx, eax
.text:004057B6                 mov     esi, edx
.text:004057B8                 or      edx, ebx
.text:004057BA                 jnz     short loc_405777
.text:004057BC                 jmp     loc_4056C0
.text:004057C1 ; ---------------------------------------------------------------------------
.text:004057C1
.text:004057C1 loc_4057C1:                             ; CODE XREF: sub_405650+27↑j
.text:004057C1                 mov     [esp+5Ch+Buffer], 28h ; '(' ; Ch
.text:004057C8                 mov     ebp, ds:_iob
.text:004057CE                 add     ebp, 20h ; ' '
.text:004057D1                 mov     [esp+5Ch+Stream], ebp ; File
.text:004057D5                 call    _flsbuf
.text:004057DA                 jmp     loc_40568C
.text:004057DA sub_405650      endp
.text:004057DA
.text:004057DA ; ---------------------------------------------------------------------------
.text:004057DF                 align 10h
.text:004057E0
.text:004057E0 ; =============== S U B R O U T I N E =======================================
.text:004057E0
.text:004057E0
.text:004057E0 sub_4057E0      proc near               ; DATA XREF: sub_4025D0+188D↑o
.text:004057E0
.text:004057E0 Buffer          = dword ptr -5Ch
.text:004057E0 Stream          = dword ptr -58h
.text:004057E0 var_54          = dword ptr -54h
.text:004057E0 var_50          = dword ptr -50h
.text:004057E0 var_45          = byte ptr -45h
.text:004057E0 var_44          = dword ptr -44h
.text:004057E0 var_40          = dword ptr -40h
.text:004057E0 var_25          = byte ptr -25h
.text:004057E0 var_24          = byte ptr -24h
.text:004057E0 arg_0           = dword ptr  4
.text:004057E0 arg_4           = dword ptr  8
.text:004057E0 arg_8           = byte ptr  0Ch
.text:004057E0
.text:004057E0                 push    ebp
.text:004057E1                 push    edi
.text:004057E2                 push    esi
.text:004057E3                 push    ebx
.text:004057E4                 sub     esp, 4Ch
.text:004057E7                 mov     edx, [esp+5Ch+arg_0]
.text:004057EB                 movzx   eax, [esp+5Ch+arg_8]
.text:004057F0                 lea     edi, [esp+5Ch+var_25]
.text:004057F4                 mov     [esp+5Ch+var_24], 0
.text:004057F9                 mov     ecx, [esp+5Ch+arg_4]
.text:004057FD                 mov     ebp, edi
.text:004057FF                 mov     [esp+5Ch+var_44], edx
.text:00405803                 mov     edx, ds:dword_415040
.text:00405809                 mov     [esp+5Ch+var_25], 20h ; ' '
.text:0040580E                 mov     ebx, [esp+5Ch+var_44]
.text:00405812                 mov     [esp+5Ch+var_45], al
.text:00405816                 mov     eax, ds:dword_415030
.text:0040581B                 sub     ebp, edx
.text:0040581D                 mov     [esp+5Ch+var_40], ecx
.text:00405821                 mov     esi, [esp+5Ch+var_40]
.text:00405825                 cmp     eax, 0Ah
.text:00405828                 jz      loc_4058D8
.text:0040582E                 cmp     eax, 0Ah
.text:00405831                 jg      loc_4058B2
.text:00405837                 cmp     eax, 8
.text:0040583A                 jz      short loc_405898
.text:0040583C                 lea     esi, [esi+0]
.text:00405840
.text:00405840 loc_405840:                             ; CODE XREF: sub_4057E0+68↓j
.text:00405840                                         ; sub_4057E0+D0↓j ...
.text:00405840                 cmp     ebp, edi
.text:00405842                 jnb     short loc_40584A
.text:00405844                 dec     edi
.text:00405845                 mov     byte ptr [edi], 30h ; '0'
.text:00405848                 jmp     short loc_405840
.text:0040584A ; ---------------------------------------------------------------------------
.text:0040584A
.text:0040584A loc_40584A:                             ; CODE XREF: sub_4057E0+62↑j
.text:0040584A                 mov     [esp+5Ch+Buffer], edi ; Buffer
.text:0040584D                 mov     ecx, ds:_iob
.text:00405853                 add     ecx, 20h ; ' '
.text:00405856                 mov     [esp+5Ch+Stream], ecx ; Stream
.text:0040585A                 call    fputs
.text:0040585F                 movsx   edx, [esp+5Ch+var_45]
.text:00405864                 mov     ebp, ds:dword_415090
.text:0040586A                 mov     edi, ds:dword_415094
.text:00405870                 add     [esp+5Ch+var_44], ebp
.text:00405874                 mov     [esp+5Ch+var_54], edx
.text:00405878                 mov     esi, [esp+5Ch+var_44]
.text:0040587C                 adc     [esp+5Ch+var_40], edi
.text:00405880                 mov     [esp+5Ch+Buffer], esi
.text:00405883                 mov     ebx, [esp+5Ch+var_40]
.text:00405887                 mov     [esp+5Ch+Stream], ebx
.text:0040588B                 call    sub_405650
.text:00405890                 add     esp, 4Ch
.text:00405893                 pop     ebx
.text:00405894                 pop     esi
.text:00405895                 pop     edi
.text:00405896                 pop     ebp
.text:00405897                 retn
.text:00405898 ; ---------------------------------------------------------------------------
.text:00405898
.text:00405898 loc_405898:                             ; CODE XREF: sub_4057E0+5A↑j
.text:00405898                                         ; sub_4057E0+CE↓j
.text:00405898                 mov     dl, bl
.text:0040589A                 dec     edi
.text:0040589B                 and     dl, 7
.text:0040589E                 shrd    ebx, esi, 3
.text:004058A2                 add     dl, 30h ; '0'
.text:004058A5                 shr     esi, 3
.text:004058A8                 mov     [edi], dl
.text:004058AA                 mov     ecx, esi
.text:004058AC                 or      ecx, ebx
.text:004058AE                 jnz     short loc_405898
.text:004058B0                 jmp     short loc_405840
.text:004058B2 ; ---------------------------------------------------------------------------
.text:004058B2
.text:004058B2 loc_4058B2:                             ; CODE XREF: sub_4057E0+51↑j
.text:004058B2                 cmp     eax, 10h
.text:004058B5                 jnz     short loc_405840
.text:004058B7
.text:004058B7 loc_4058B7:                             ; CODE XREF: sub_4057E0+F1↓j
.text:004058B7                 mov     ecx, ebx
.text:004058B9                 dec     edi
.text:004058BA                 and     ecx, 0Fh
.text:004058BD                 movzx   edx, ds:byte_405541[ecx]
.text:004058C4                 shrd    ebx, esi, 4
.text:004058C8                 shr     esi, 4
.text:004058CB                 mov     ecx, esi
.text:004058CD                 mov     [edi], dl
.text:004058CF                 or      ecx, ebx
.text:004058D1                 jnz     short loc_4058B7
.text:004058D3                 jmp     loc_405840
.text:004058D8 ; ---------------------------------------------------------------------------
.text:004058D8
.text:004058D8 loc_4058D8:                             ; CODE XREF: sub_4057E0+48↑j
.text:004058D8                                         ; sub_4057E0+13D↓j
.text:004058D8                 mov     [esp+5Ch+Buffer], ebx
.text:004058DB                 dec     edi
.text:004058DC                 mov     [esp+5Ch+Stream], esi
.text:004058E0                 mov     [esp+5Ch+var_54], 0Ah
.text:004058E8                 mov     [esp+5Ch+var_50], 0
.text:004058F0                 call    sub_412750
.text:004058F5                 add     al, 30h ; '0'
.text:004058F7                 mov     [edi], al
.text:004058F9                 mov     [esp+5Ch+Buffer], ebx
.text:004058FC                 mov     [esp+5Ch+Stream], esi
.text:00405900                 mov     [esp+5Ch+var_54], 0Ah
.text:00405908                 mov     [esp+5Ch+var_50], 0
.text:00405910                 call    sub_4128D0
.text:00405915                 mov     ebx, eax
.text:00405917                 mov     esi, edx
.text:00405919                 mov     eax, edx
.text:0040591B                 or      eax, ebx
.text:0040591D                 jnz     short loc_4058D8
.text:0040591F                 jmp     loc_405840
.text:0040591F sub_4057E0      endp
.text:0040591F
.text:0040591F ; ---------------------------------------------------------------------------
.text:00405924                 align 20h
.text:00405940 aNBytesReadByte db 'n_bytes_read == bytes_per_block',0
.text:00405940                                         ; DATA XREF: sub_405980+158↓o
.text:00405960 a0NNBytesPerBlo db '0 < n && n <= bytes_per_block',0
.text:00405960                                         ; DATA XREF: sub_405980+559↓o
.text:0040597E                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980
.text:00405980 sub_405980      proc near               ; CODE XREF: sub_4025D0:loc_404110↑p
.text:00405980
.text:00405980 Stream          = dword ptr -6Ch
.text:00405980 Val             = dword ptr -68h
.text:00405980 Size            = dword ptr -64h
.text:00405980 var_60          = dword ptr -60h
.text:00405980 var_5C          = dword ptr -5Ch
.text:00405980 var_50          = dword ptr -50h
.text:00405980 var_4C          = dword ptr -4Ch
.text:00405980 var_45          = byte ptr -45h
.text:00405980 var_44          = dword ptr -44h
.text:00405980 var_3E          = byte ptr -3Eh
.text:00405980 var_3D          = byte ptr -3Dh
.text:00405980 var_3C          = dword ptr -3Ch
.text:00405980 var_37          = byte ptr -37h
.text:00405980 var_36          = byte ptr -36h
.text:00405980 var_35          = byte ptr -35h
.text:00405980 var_34          = dword ptr -34h
.text:00405980 var_2F          = byte ptr -2Fh
.text:00405980 var_2E          = byte ptr -2Eh
.text:00405980 var_2D          = byte ptr -2Dh
.text:00405980 var_2C          = dword ptr -2Ch
.text:00405980 var_28          = dword ptr -28h
.text:00405980 var_20          = dword ptr -20h
.text:00405980 Block           = dword ptr -1Ch
.text:00405980 var_18          = dword ptr -18h
.text:00405980
.text:00405980                 push    ebp
.text:00405981                 push    edi
.text:00405982                 push    esi
.text:00405983                 push    ebx
.text:00405984                 sub     esp, 5Ch
.text:00405987                 mov     ecx, ds:dword_415100
.text:0040598D                 mov     [esp+6Ch+var_2D], 0
.text:00405992                 mov     [esp+6Ch+var_2E], 1
.text:00405997                 mov     [esp+6Ch+Val], ecx
.text:0040599B                 mov     [esp+6Ch+Stream], 2
.text:004059A2                 call    sub_4089A0
.text:004059A7                 mov     [esp+6Ch+Block], eax
.text:004059AB                 mov     edi, ds:dword_415100
.text:004059B1                 mov     edx, ds:dword_415000
.text:004059B7                 mov     ecx, ds:dword_415004
.text:004059BD                 add     eax, edi
.text:004059BF                 cmp     ds:byte_415010, 0
.text:004059C6                 mov     [esp+6Ch+var_18], eax
.text:004059CA                 mov     [esp+6Ch+var_2C], edx
.text:004059CE                 mov     [esp+6Ch+var_28], ecx
.text:004059D2                 jz      loc_405EF4
.text:004059D8
.text:004059D8 loc_4059D8:                             ; CODE XREF: sub_405980+143↓j
.text:004059D8                 mov     edx, ds:dword_4150C4
.text:004059DE                 mov     eax, ds:dword_4150C0
.text:004059E3                 cmp     [esp+6Ch+var_28], edx
.text:004059E7                 jb      short loc_4059F9
.text:004059E9                 ja      loc_405EE5
.text:004059EF                 cmp     [esp+6Ch+var_2C], eax
.text:004059F3                 jnb     loc_405EE5
.text:004059F9
.text:004059F9 loc_4059F9:                             ; CODE XREF: sub_405980+67↑j
.text:004059F9                 mov     ecx, eax
.text:004059FB                 mov     esi, edx
.text:004059FD                 mov     eax, ds:dword_415100
.text:00405A02                 sub     ecx, [esp+6Ch+var_2C]
.text:00405A06                 sbb     esi, [esp+6Ch+var_28]
.text:00405A0A                 xor     ebx, ebx
.text:00405A0C                 cmp     ebx, esi
.text:00405A0E                 jb      short loc_405A18
.text:00405A10                 ja      short loc_405A16
.text:00405A12                 cmp     eax, ecx
.text:00405A14                 jbe     short loc_405A18
.text:00405A16
.text:00405A16 loc_405A16:                             ; CODE XREF: sub_405980+90↑j
.text:00405A16                 mov     eax, ecx
.text:00405A18
.text:00405A18 loc_405A18:                             ; CODE XREF: sub_405980+8E↑j
.text:00405A18                                         ; sub_405980+94↑j
.text:00405A18                 movzx   edx, [esp+6Ch+var_2D]
.text:00405A1D                 test    eax, eax
.text:00405A1F                 mov     [esp+6Ch+var_2F], 0
.text:00405A24                 mov     ebp, eax
.text:00405A26                 mov     [esp+6Ch+var_35], 1
.text:00405A2B                 mov     edi, [esp+edx*4+6Ch+Block]
.text:00405A2F                 mov     [esp+6Ch+var_34], edi
.text:00405A33                 jz      loc_405EC9
.text:00405A39                 mov     edi, ds:dword_415100
.text:00405A3F                 cmp     eax, edi
.text:00405A41                 ja      loc_405EC9
.text:00405A47                 mov     [esp+6Ch+var_20], 0
.text:00405A4F                 test    eax, eax
.text:00405A51                 jnz     loc_405D30
.text:00405A57
.text:00405A57 loc_405A57:                             ; CODE XREF: sub_405980+544↓j
.text:00405A57                 cmp     [esp+6Ch+var_2E], 0
.text:00405A5C                 jz      short loc_405A63
.text:00405A5E                 mov     [esp+6Ch+var_2F], 1
.text:00405A63
.text:00405A63 loc_405A63:                             ; CODE XREF: sub_405980+DC↑j
.text:00405A63                                         ; sub_405980+53E↓j
.text:00405A63                 movzx   edx, [esp+6Ch+var_2F]
.text:00405A68                 mov     esi, [esp+6Ch+var_20]
.text:00405A6C                 cmp     esi, edi
.text:00405A6E                 mov     [esp+6Ch+var_2E], dl
.text:00405A72                 jb      short loc_405AE4
.text:00405A74                 cmp     esi, edi
.text:00405A76                 jnz     short loc_405AC8
.text:00405A78                 movzx   edi, [esp+6Ch+var_2D]
.text:00405A7D                 movzx   ebx, [esp+6Ch+var_2D]
.text:00405A82                 mov     ebp, [esp+edi*4+6Ch+Block]
.text:00405A86                 xor     bl, 1
.text:00405A89                 movzx   edx, bl
.text:00405A8C                 mov     edi, [esp+6Ch+var_28]
.text:00405A90                 mov     [esp+6Ch+var_5C], ebp
.text:00405A94                 mov     ecx, [esp+edx*4+6Ch+Block]
.text:00405A98                 xor     ebp, ebp
.text:00405A9A                 mov     [esp+6Ch+Size], esi
.text:00405A9E                 mov     esi, [esp+6Ch+var_2C]
.text:00405AA2                 mov     [esp+6Ch+var_60], ecx
.text:00405AA6                 mov     [esp+6Ch+Val], edi
.text:00405AAA                 mov     [esp+6Ch+Stream], esi
.text:00405AAD                 call    sub_406EA0
.text:00405AB2                 mov     ebx, [esp+6Ch+var_20]
.text:00405AB6                 add     [esp+6Ch+var_2C], ebx
.text:00405ABA                 adc     [esp+6Ch+var_28], ebp
.text:00405ABE                 xor     [esp+6Ch+var_2D], 1
.text:00405AC3                 jmp     loc_4059D8
.text:00405AC8 ; ---------------------------------------------------------------------------
.text:00405AC8
.text:00405AC8 loc_405AC8:                             ; CODE XREF: sub_405980+F6↑j
.text:00405AC8                 mov     [esp+6Ch+Size], 564h
.text:00405AD0
.text:00405AD0 loc_405AD0:                             ; CODE XREF: sub_405980+7BA↓j
.text:00405AD0                 mov     [esp+6Ch+Val], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/od.c"
.text:00405AD8                 mov     [esp+6Ch+Stream], offset aNBytesReadByte ; "n_bytes_read == bytes_per_block"
.text:00405ADF
.text:00405ADF loc_405ADF:                             ; CODE XREF: sub_405980+560↓j
.text:00405ADF                 call    _assert
.text:00405AE4 ; ---------------------------------------------------------------------------
.text:00405AE4
.text:00405AE4 loc_405AE4:                             ; CODE XREF: sub_405980+F2↑j
.text:00405AE4                                         ; sub_405980+56F↓j ...
.text:00405AE4                 test    esi, esi
.text:00405AE6                 jz      loc_405BC1
.text:00405AEC                 mov     [esp+6Ch+var_44], 0
.text:00405AF4                 mov     eax, ds:dword_4150E0
.text:00405AF9                 mov     ebp, 1
.text:00405AFE                 cmp     [esp+6Ch+var_44], eax
.text:00405B02                 mov     [esp+6Ch+var_4C], eax
.text:00405B06                 jnb     short loc_405B4E
.text:00405B08                 mov     edi, ds:dword_4150D0
.text:00405B0E                 add     edi, 4
.text:00405B11
.text:00405B11 loc_405B11:                             ; CODE XREF: sub_405980+1CC↓j
.text:00405B11                 mov     [esp+6Ch+var_50], ebp
.text:00405B15                 mov     edx, [edi]
.text:00405B17                 mov     ebx, ds:dword_4012E0[edx*4]
.text:00405B1E                 mov     ecx, ebx
.text:00405B20
.text:00405B20 loc_405B20:                             ; CODE XREF: sub_405980+1B0↓j
.text:00405B20                 mov     eax, [esp+6Ch+var_50]
.text:00405B24                 xor     edx, edx
.text:00405B26                 mov     [esp+6Ch+var_50], ecx
.text:00405B2A                 div     ecx
.text:00405B2C                 test    edx, edx
.text:00405B2E                 mov     ecx, edx
.text:00405B30                 jnz     short loc_405B20
.text:00405B32                 inc     [esp+6Ch+var_44]
.text:00405B36                 xor     edx, edx
.text:00405B38                 mov     eax, ebx
.text:00405B3A                 div     [esp+6Ch+var_50]
.text:00405B3E                 add     edi, 30h ; '0'
.text:00405B41                 mov     ecx, [esp+6Ch+var_4C]
.text:00405B45                 imul    ebp, eax
.text:00405B48                 cmp     [esp+6Ch+var_44], ecx
.text:00405B4C                 jb      short loc_405B11
.text:00405B4E
.text:00405B4E loc_405B4E:                             ; CODE XREF: sub_405980+186↑j
.text:00405B4E                 movzx   ebx, [esp+6Ch+var_2D]
.text:00405B53                 lea     eax, [ebp+esi-1]
.text:00405B57                 xor     edx, edx
.text:00405B59                 div     ebp
.text:00405B5B                 mov     edi, ebp
.text:00405B5D                 imul    edi, eax
.text:00405B60                 shl     ebx, 2
.text:00405B63                 mov     eax, [esp+ebx+6Ch+Block]
.text:00405B67                 mov     [esp+6Ch+Val], 0 ; Val
.text:00405B6F                 mov     ecx, edi
.text:00405B71                 sub     ecx, esi
.text:00405B73                 mov     [esp+6Ch+Size], ecx ; Size
.text:00405B77                 add     esi, eax
.text:00405B79                 mov     [esp+6Ch+Stream], esi ; void *
.text:00405B7C                 call    memset
.text:00405B81                 xor     [esp+6Ch+var_2D], 1
.text:00405B86                 mov     ebp, [esp+ebx+6Ch+Block]
.text:00405B8A                 mov     edx, [esp+6Ch+var_2C]
.text:00405B8E                 movzx   ebx, [esp+6Ch+var_2D]
.text:00405B93                 mov     [esp+6Ch+var_5C], ebp
.text:00405B97                 xor     ebp, ebp
.text:00405B99                 mov     ecx, [esp+ebx*4+6Ch+Block]
.text:00405B9D                 mov     [esp+6Ch+Size], edi
.text:00405BA1                 mov     edi, [esp+6Ch+var_28]
.text:00405BA5                 mov     [esp+6Ch+var_60], ecx ; char
.text:00405BA9                 mov     [esp+6Ch+Stream], edx
.text:00405BAC                 mov     [esp+6Ch+Val], edi
.text:00405BB0                 call    sub_406EA0
.text:00405BB5                 mov     esi, [esp+6Ch+var_20]
.text:00405BB9                 add     [esp+6Ch+var_2C], esi
.text:00405BBD                 adc     [esp+6Ch+var_28], ebp
.text:00405BC1
.text:00405BC1 loc_405BC1:                             ; CODE XREF: sub_405980+166↑j
.text:00405BC1                 mov     [esp+6Ch+Size], 0Ah
.text:00405BC9                 mov     edi, [esp+6Ch+var_2C]
.text:00405BCD                 mov     esi, [esp+6Ch+var_28]
.text:00405BD1                 mov     [esp+6Ch+Stream], edi
.text:00405BD4                 mov     [esp+6Ch+Val], esi
.text:00405BD8                 call    ds:dword_4150A0
.text:00405BDE                 cmp     ds:byte_415010, 0
.text:00405BE5                 jz      short loc_405C60
.text:00405BE7                 mov     ebx, ds:dword_4150C4
.text:00405BED                 mov     eax, ds:dword_4150C0
.text:00405BF2                 cmp     [esp+6Ch+var_28], ebx
.text:00405BF6                 jb      short loc_405C60
.text:00405BF8                 ja      short loc_405C00
.text:00405BFA                 cmp     [esp+6Ch+var_2C], eax
.text:00405BFE                 jb      short loc_405C60
.text:00405C00
.text:00405C00 loc_405C00:                             ; CODE XREF: sub_405980+278↑j
.text:00405C00                 mov     [esp+6Ch+var_45], 0
.text:00405C05                 mov     eax, ds:Stream
.text:00405C0A                 mov     bl, 1
.text:00405C0C                 test    eax, eax
.text:00405C0E                 jz      loc_405D25
.text:00405C14                 test    byte ptr [eax+0Ch], 20h
.text:00405C18                 jnz     loc_405CD2
.text:00405C1E                 mov     edx, ds:_iob
.text:00405C24                 cmp     eax, edx
.text:00405C26                 jz      short loc_405C39
.text:00405C28                 mov     [esp+6Ch+Stream], eax ; Stream
.text:00405C2B                 call    fclose
.text:00405C30                 inc     eax
.text:00405C31                 jz      short loc_405CA2
.text:00405C33
.text:00405C33 loc_405C33:                             ; CODE XREF: sub_405980+34D↓j
.text:00405C33                 mov     edx, ds:_iob
.text:00405C39
.text:00405C39 loc_405C39:                             ; CODE XREF: sub_405980+2A6↑j
.text:00405C39                                         ; sub_405980+3A0↓j
.text:00405C39                 xor     esi, esi
.text:00405C3B                 mov     ds:Stream, esi
.text:00405C41
.text:00405C41 loc_405C41:                             ; CODE XREF: sub_405980+3AB↓j
.text:00405C41                 test    byte ptr [edx+2Ch], 20h
.text:00405C45                 jnz     short loc_405C79
.text:00405C47
.text:00405C47 loc_405C47:                             ; CODE XREF: sub_405980+320↓j
.text:00405C47                 test    bl, bl
.text:00405C49                 jz      short loc_405C57
.text:00405C4B                 cmp     [esp+6Ch+var_2E], 0
.text:00405C50                 jz      short loc_405C57
.text:00405C52                 mov     [esp+6Ch+var_45], 1
.text:00405C57
.text:00405C57 loc_405C57:                             ; CODE XREF: sub_405980+2C9↑j
.text:00405C57                                         ; sub_405980+2D0↑j
.text:00405C57                 movzx   eax, [esp+6Ch+var_45]
.text:00405C5C                 mov     [esp+6Ch+var_2E], al
.text:00405C60
.text:00405C60 loc_405C60:                             ; CODE XREF: sub_405980+265↑j
.text:00405C60                                         ; sub_405980+276↑j ...
.text:00405C60                 mov     edi, [esp+6Ch+Block]
.text:00405C64                 mov     [esp+6Ch+Stream], edi ; Block
.text:00405C67                 call    free
.text:00405C6C                 movzx   eax, [esp+6Ch+var_2E]
.text:00405C71                 add     esp, 5Ch
.text:00405C74                 pop     ebx
.text:00405C75                 pop     esi
.text:00405C76                 pop     edi
.text:00405C77                 pop     ebp
.text:00405C78                 retn
.text:00405C79 ; ---------------------------------------------------------------------------
.text:00405C79
.text:00405C79 loc_405C79:                             ; CODE XREF: sub_405980+2C5↑j
.text:00405C79                 mov     [esp+6Ch+Stream], offset aWriteError ; "write error"
.text:00405C80                 xor     ebx, ebx
.text:00405C82                 call    ds:libintl_gettext
.text:00405C88                 mov     [esp+6Ch+Val], 0 ; ErrorMessage
.text:00405C90                 mov     [esp+6Ch+Stream], 0 ; Code
.text:00405C97                 mov     [esp+6Ch+Size], eax ; char *
.text:00405C9B                 call    sub_40ADC0
.text:00405CA0                 jmp     short loc_405C47
.text:00405CA2 ; ---------------------------------------------------------------------------
.text:00405CA2
.text:00405CA2 loc_405CA2:                             ; CODE XREF: sub_405980+2B1↑j
.text:00405CA2                 call    _errno
.text:00405CA7                 mov     [esp+6Ch+Size], offset aS_4 ; "%s"
.text:00405CAF                 mov     ecx, ds:dword_415110
.text:00405CB5                 xor     ebx, ebx
.text:00405CB7                 mov     [esp+6Ch+var_60], ecx ; char
.text:00405CBB                 mov     edx, [eax]
.text:00405CBD                 mov     [esp+6Ch+Stream], 0 ; Code
.text:00405CC4                 mov     [esp+6Ch+Val], edx ; ErrorMessage
.text:00405CC8                 call    sub_40ADC0
.text:00405CCD                 jmp     loc_405C33
.text:00405CD2 ; ---------------------------------------------------------------------------
.text:00405CD2
.text:00405CD2 loc_405CD2:                             ; CODE XREF: sub_405980+298↑j
.text:00405CD2                 mov     [esp+6Ch+Stream], offset aSReadError ; "%s: read error"
.text:00405CD9                 call    ds:libintl_gettext
.text:00405CDF                 mov     [esp+6Ch+Val], 0 ; ErrorMessage
.text:00405CE7                 mov     ebp, ds:dword_415110
.text:00405CED                 mov     [esp+6Ch+Stream], 0 ; Code
.text:00405CF4                 mov     [esp+6Ch+Size], eax ; char *
.text:00405CF8                 mov     [esp+6Ch+var_60], ebp ; char
.text:00405CFC                 call    sub_40ADC0
.text:00405D01                 mov     eax, ds:Stream
.text:00405D06                 mov     edx, ds:_iob
.text:00405D0C                 cmp     eax, edx
.text:00405D0E                 jz      short loc_405D1E
.text:00405D10                 mov     [esp+6Ch+Stream], eax ; Stream
.text:00405D13                 call    fclose
.text:00405D18                 mov     edx, ds:_iob
.text:00405D1E
.text:00405D1E loc_405D1E:                             ; CODE XREF: sub_405980+38E↑j
.text:00405D1E                 xor     ebx, ebx
.text:00405D20                 jmp     loc_405C39
.text:00405D25 ; ---------------------------------------------------------------------------
.text:00405D25
.text:00405D25 loc_405D25:                             ; CODE XREF: sub_405980+28E↑j
.text:00405D25                 mov     edx, ds:_iob
.text:00405D2B                 jmp     loc_405C41
.text:00405D30 ; ---------------------------------------------------------------------------
.text:00405D30
.text:00405D30 loc_405D30:                             ; CODE XREF: sub_405980+D1↑j
.text:00405D30                                         ; sub_405980+474↓j
.text:00405D30                 mov     edx, ds:Stream
.text:00405D36                 test    edx, edx
.text:00405D38                 jz      loc_405EB3
.text:00405D3E                 mov     [esp+6Ch+var_60], edx ; char
.text:00405D42                 mov     ecx, [esp+6Ch+var_20]
.text:00405D46                 mov     esi, ebp
.text:00405D48                 mov     [esp+6Ch+Val], 1 ; ElementSize
.text:00405D50                 mov     eax, [esp+6Ch+var_34]
.text:00405D54                 sub     esi, ecx
.text:00405D56                 mov     [esp+6Ch+Size], esi ; ElementCount
.text:00405D5A                 add     ecx, eax
.text:00405D5C                 mov     [esp+6Ch+Stream], ecx ; Buffer
.text:00405D5F                 call    fread
.text:00405D64                 add     [esp+6Ch+var_20], eax
.text:00405D68                 cmp     eax, esi
.text:00405D6A                 jz      loc_405EB3
.text:00405D70                 mov     [esp+6Ch+var_36], 0
.text:00405D75                 mov     bl, 1
.text:00405D77                 call    _errno
.text:00405D7C                 mov     esi, [eax]
.text:00405D7E                 mov     eax, ds:Stream
.text:00405D83                 test    eax, eax
.text:00405D85                 jz      loc_405EA8
.text:00405D8B                 test    byte ptr [eax+0Ch], 20h
.text:00405D8F                 jnz     loc_405E59
.text:00405D95                 mov     edx, ds:_iob
.text:00405D9B                 cmp     eax, edx
.text:00405D9D                 jz      short loc_405DB0
.text:00405D9F                 mov     [esp+6Ch+Stream], eax ; Stream
.text:00405DA2                 call    fclose
.text:00405DA7                 inc     eax
.text:00405DA8                 jz      short loc_405E29
.text:00405DAA
.text:00405DAA loc_405DAA:                             ; CODE XREF: sub_405980+4D4↓j
.text:00405DAA                 mov     edx, ds:_iob
.text:00405DB0
.text:00405DB0 loc_405DB0:                             ; CODE XREF: sub_405980+41D↑j
.text:00405DB0                                         ; sub_405980+523↓j
.text:00405DB0                 xor     ecx, ecx
.text:00405DB2                 mov     ds:Stream, ecx
.text:00405DB8
.text:00405DB8 loc_405DB8:                             ; CODE XREF: sub_405980+52E↓j
.text:00405DB8                 test    byte ptr [edx+2Ch], 20h
.text:00405DBC                 jnz     short loc_405E00
.text:00405DBE
.text:00405DBE loc_405DBE:                             ; CODE XREF: sub_405980+4A7↓j
.text:00405DBE                 test    bl, bl
.text:00405DC0                 jz      short loc_405DD0
.text:00405DC2                 cmp     [esp+6Ch+var_35], 0
.text:00405DC7                 jz      short loc_405DD0
.text:00405DC9                 mov     [esp+6Ch+var_36], 1
.text:00405DCE                 mov     esi, esi
.text:00405DD0
.text:00405DD0 loc_405DD0:                             ; CODE XREF: sub_405980+440↑j
.text:00405DD0                                         ; sub_405980+447↑j
.text:00405DD0                 movzx   eax, [esp+6Ch+var_36]
.text:00405DD5                 xor     ebx, ebx
.text:00405DD7                 mov     [esp+6Ch+var_35], al
.text:00405DDB                 call    sub_405070
.text:00405DE0                 test    al, al
.text:00405DE2                 jz      short loc_405DF0
.text:00405DE4                 cmp     [esp+6Ch+var_35], 0
.text:00405DE9                 jz      short loc_405DF0
.text:00405DEB                 mov     bl, 1
.text:00405DED                 lea     esi, [esi+0]
.text:00405DF0
.text:00405DF0 loc_405DF0:                             ; CODE XREF: sub_405980+462↑j
.text:00405DF0                                         ; sub_405980+469↑j
.text:00405DF0                 mov     [esp+6Ch+var_35], bl
.text:00405DF4                 jmp     loc_405D30
.text:00405DF4 ; ---------------------------------------------------------------------------
.text:00405DF9                 align 10h
.text:00405E00
.text:00405E00 loc_405E00:                             ; CODE XREF: sub_405980+43C↑j
.text:00405E00                 mov     [esp+6Ch+Stream], offset aWriteError ; "write error"
.text:00405E07                 xor     ebx, ebx
.text:00405E09                 call    ds:libintl_gettext
.text:00405E0F                 mov     [esp+6Ch+Val], 0 ; ErrorMessage
.text:00405E17                 mov     [esp+6Ch+Stream], 0 ; Code
.text:00405E1E                 mov     [esp+6Ch+Size], eax ; char *
.text:00405E22                 call    sub_40ADC0
.text:00405E27                 jmp     short loc_405DBE
.text:00405E29 ; ---------------------------------------------------------------------------
.text:00405E29
.text:00405E29 loc_405E29:                             ; CODE XREF: sub_405980+428↑j
.text:00405E29                 call    _errno
.text:00405E2E                 mov     [esp+6Ch+Size], offset aS_4 ; "%s"
.text:00405E36                 mov     esi, ds:dword_415110
.text:00405E3C                 xor     ebx, ebx
.text:00405E3E                 mov     [esp+6Ch+var_60], esi ; char
.text:00405E42                 mov     edi, [eax]
.text:00405E44                 mov     [esp+6Ch+Stream], 0 ; Code
.text:00405E4B                 mov     [esp+6Ch+Val], edi ; ErrorMessage
.text:00405E4F                 call    sub_40ADC0
.text:00405E54                 jmp     loc_405DAA
.text:00405E59 ; ---------------------------------------------------------------------------
.text:00405E59
.text:00405E59 loc_405E59:                             ; CODE XREF: sub_405980+40F↑j
.text:00405E59                 mov     [esp+6Ch+Stream], offset aSReadError ; "%s: read error"
.text:00405E60                 call    ds:libintl_gettext
.text:00405E66                 mov     [esp+6Ch+Val], esi ; ErrorMessage
.text:00405E6A                 mov     ebx, ds:dword_415110
.text:00405E70                 mov     [esp+6Ch+Stream], 0 ; Code
.text:00405E77                 mov     [esp+6Ch+Size], eax ; char *
.text:00405E7B                 mov     [esp+6Ch+var_60], ebx ; char
.text:00405E7F                 call    sub_40ADC0
.text:00405E84                 mov     eax, ds:Stream
.text:00405E89                 mov     edx, ds:_iob
.text:00405E8F                 cmp     eax, edx
.text:00405E91                 jz      short loc_405EA1
.text:00405E93                 mov     [esp+6Ch+Stream], eax ; Stream
.text:00405E96                 call    fclose
.text:00405E9B                 mov     edx, ds:_iob
.text:00405EA1
.text:00405EA1 loc_405EA1:                             ; CODE XREF: sub_405980+511↑j
.text:00405EA1                 xor     ebx, ebx
.text:00405EA3                 jmp     loc_405DB0
.text:00405EA8 ; ---------------------------------------------------------------------------
.text:00405EA8
.text:00405EA8 loc_405EA8:                             ; CODE XREF: sub_405980+405↑j
.text:00405EA8                 mov     edx, ds:_iob
.text:00405EAE                 jmp     loc_405DB8
.text:00405EB3 ; ---------------------------------------------------------------------------
.text:00405EB3
.text:00405EB3 loc_405EB3:                             ; CODE XREF: sub_405980+3B8↑j
.text:00405EB3                                         ; sub_405980+3EA↑j
.text:00405EB3                 cmp     [esp+6Ch+var_35], 0
.text:00405EB8                 mov     edi, ds:dword_415100
.text:00405EBE                 jz      loc_405A63
.text:00405EC4                 jmp     loc_405A57
.text:00405EC9 ; ---------------------------------------------------------------------------
.text:00405EC9
.text:00405EC9 loc_405EC9:                             ; CODE XREF: sub_405980+B3↑j
.text:00405EC9                                         ; sub_405980+C1↑j ...
.text:00405EC9                 mov     [esp+6Ch+Size], 4F2h
.text:00405ED1                 mov     [esp+6Ch+Val], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/od.c"
.text:00405ED9                 mov     [esp+6Ch+Stream], offset a0NNBytesPerBlo ; "0 < n && n <= bytes_per_block"
.text:00405EE0                 jmp     loc_405ADF
.text:00405EE5 ; ---------------------------------------------------------------------------
.text:00405EE5
.text:00405EE5 loc_405EE5:                             ; CODE XREF: sub_405980+69↑j
.text:00405EE5                                         ; sub_405980+73↑j
.text:00405EE5                 mov     [esp+6Ch+var_20], 0
.text:00405EED                 xor     esi, esi
.text:00405EEF                 jmp     loc_405AE4
.text:00405EF4 ; ---------------------------------------------------------------------------
.text:00405EF4
.text:00405EF4 loc_405EF4:                             ; CODE XREF: sub_405980+52↑j
.text:00405EF4                 lea     ebp, [esp+6Ch+var_20]
.text:00405EF8
.text:00405EF8 loc_405EF8:                             ; CODE XREF: sub_405980+7AD↓j
.text:00405EF8                 movzx   ecx, [esp+6Ch+var_2D]
.text:00405EFD                 test    edi, edi
.text:00405EFF                 mov     [esp+6Ch+var_37], 0
.text:00405F04                 mov     [esp+6Ch+var_3D], 1
.text:00405F09                 mov     esi, [esp+ecx*4+6Ch+Block]
.text:00405F0D                 mov     [esp+6Ch+var_3C], esi
.text:00405F11                 jz      short loc_405EC9
.text:00405F13                 mov     [esp+6Ch+var_20], 0
.text:00405F1B                 nop
.text:00405F1C                 lea     esi, [esi+0]
.text:00405F20
.text:00405F20 loc_405F20:                             ; CODE XREF: sub_405980+664↓j
.text:00405F20                 mov     edx, ds:Stream
.text:00405F26                 test    edx, edx
.text:00405F28                 jz      loc_4060AB
.text:00405F2E                 mov     ecx, [ebp+0]
.text:00405F31                 mov     ebx, edi
.text:00405F33                 mov     [esp+6Ch+Val], 1 ; ElementSize
.text:00405F3B                 mov     eax, [esp+6Ch+var_3C]
.text:00405F3F                 mov     [esp+6Ch+var_60], edx ; char
.text:00405F43                 sub     ebx, ecx
.text:00405F45                 add     ecx, eax
.text:00405F47                 mov     [esp+6Ch+Size], ebx ; ElementCount
.text:00405F4B                 mov     [esp+6Ch+Stream], ecx ; Buffer
.text:00405F4E                 call    fread
.text:00405F53                 add     [ebp+0], eax
.text:00405F56                 cmp     eax, ebx
.text:00405F58                 jz      loc_4060AB
.text:00405F5E                 mov     [esp+6Ch+var_3E], 0
.text:00405F63                 mov     bl, 1
.text:00405F65                 call    _errno
.text:00405F6A                 mov     esi, [eax]
.text:00405F6C                 mov     eax, ds:Stream
.text:00405F71                 test    eax, eax
.text:00405F73                 jz      loc_4060A0
.text:00405F79                 test    byte ptr [eax+0Ch], 20h
.text:00405F7D                 jnz     loc_406050
.text:00405F83                 mov     edx, ds:_iob
.text:00405F89                 cmp     eax, edx
.text:00405F8B                 jz      short loc_405FA2
.text:00405F8D                 mov     [esp+6Ch+Stream], eax ; Stream
.text:00405F90                 call    fclose
.text:00405F95                 inc     eax
.text:00405F96                 jz      loc_406019
.text:00405F9C
.text:00405F9C loc_405F9C:                             ; CODE XREF: sub_405980+6C4↓j
.text:00405F9C                 mov     edx, ds:_iob
.text:00405FA2
.text:00405FA2 loc_405FA2:                             ; CODE XREF: sub_405980+60B↑j
.text:00405FA2                                         ; sub_405980+71A↓j
.text:00405FA2                 xor     eax, eax
.text:00405FA4                 mov     ds:Stream, eax
.text:00405FA9
.text:00405FA9 loc_405FA9:                             ; CODE XREF: sub_405980+726↓j
.text:00405FA9                 test    byte ptr [edx+2Ch], 20h
.text:00405FAD                 jnz     short loc_405FF0
.text:00405FAF
.text:00405FAF loc_405FAF:                             ; CODE XREF: sub_405980+697↓j
.text:00405FAF                 test    bl, bl
.text:00405FB1                 jz      short loc_405FC0
.text:00405FB3                 cmp     [esp+6Ch+var_3D], 0
.text:00405FB8                 jz      short loc_405FC0
.text:00405FBA                 mov     [esp+6Ch+var_3E], 1
.text:00405FBF                 nop
.text:00405FC0
.text:00405FC0 loc_405FC0:                             ; CODE XREF: sub_405980+631↑j
.text:00405FC0                                         ; sub_405980+638↑j
.text:00405FC0                 movzx   ecx, [esp+6Ch+var_3E]
.text:00405FC5                 xor     ebx, ebx
.text:00405FC7                 mov     [esp+6Ch+var_3D], cl
.text:00405FCB                 call    sub_405070
.text:00405FD0                 test    al, al
.text:00405FD2                 jz      short loc_405FE0
.text:00405FD4                 cmp     [esp+6Ch+var_3D], 0
.text:00405FD9                 jz      short loc_405FE0
.text:00405FDB                 mov     bl, 1
.text:00405FDD                 lea     esi, [esi+0]
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: sub_405980+652↑j
.text:00405FE0                                         ; sub_405980+659↑j
.text:00405FE0                 mov     [esp+6Ch+var_3D], bl
.text:00405FE4                 jmp     loc_405F20
.text:00405FE4 ; ---------------------------------------------------------------------------
.text:00405FE9                 align 10h
.text:00405FF0
.text:00405FF0 loc_405FF0:                             ; CODE XREF: sub_405980+62D↑j
.text:00405FF0                 mov     [esp+6Ch+Stream], offset aWriteError ; "write error"
.text:00405FF7                 xor     ebx, ebx
.text:00405FF9                 call    ds:libintl_gettext
.text:00405FFF                 mov     [esp+6Ch+Val], 0 ; ErrorMessage
.text:00406007                 mov     [esp+6Ch+Stream], 0 ; Code
.text:0040600E                 mov     [esp+6Ch+Size], eax ; char *
.text:00406012                 call    sub_40ADC0
.text:00406017                 jmp     short loc_405FAF
.text:00406019 ; ---------------------------------------------------------------------------
.text:00406019
.text:00406019 loc_406019:                             ; CODE XREF: sub_405980+616↑j
.text:00406019                 call    _errno
.text:0040601E                 mov     [esp+6Ch+Size], offset aS_4 ; "%s"
.text:00406026                 mov     esi, ds:dword_415110
.text:0040602C                 xor     ebx, ebx
.text:0040602E                 mov     [esp+6Ch+var_60], esi ; char
.text:00406032                 mov     edx, [eax]
.text:00406034                 mov     [esp+6Ch+Stream], 0 ; Code
.text:0040603B                 mov     [esp+6Ch+Val], edx ; ErrorMessage
.text:0040603F                 call    sub_40ADC0
.text:00406044                 jmp     loc_405F9C
.text:00406044 ; ---------------------------------------------------------------------------
.text:00406049                 align 10h
.text:00406050
.text:00406050 loc_406050:                             ; CODE XREF: sub_405980+5FD↑j
.text:00406050                 mov     [esp+6Ch+Stream], offset aSReadError ; "%s: read error"
.text:00406057                 call    ds:libintl_gettext
.text:0040605D                 mov     [esp+6Ch+Val], esi ; ErrorMessage
.text:00406061                 mov     ebx, ds:dword_415110
.text:00406067                 mov     [esp+6Ch+Stream], 0 ; Code
.text:0040606E                 mov     [esp+6Ch+Size], eax ; char *
.text:00406072                 mov     [esp+6Ch+var_60], ebx ; char
.text:00406076                 call    sub_40ADC0
.text:0040607B                 mov     eax, ds:Stream
.text:00406080                 mov     edx, ds:_iob
.text:00406086                 cmp     eax, edx
.text:00406088                 jz      short loc_406098
.text:0040608A                 mov     [esp+6Ch+Stream], eax ; Stream
.text:0040608D                 call    fclose
.text:00406092                 mov     edx, ds:_iob
.text:00406098
.text:00406098 loc_406098:                             ; CODE XREF: sub_405980+708↑j
.text:00406098                 xor     ebx, ebx
.text:0040609A                 jmp     loc_405FA2
.text:0040609A ; ---------------------------------------------------------------------------
.text:0040609F                 align 10h
.text:004060A0
.text:004060A0 loc_4060A0:                             ; CODE XREF: sub_405980+5F3↑j
.text:004060A0                 mov     edx, ds:_iob
.text:004060A6                 jmp     loc_405FA9
.text:004060AB ; ---------------------------------------------------------------------------
.text:004060AB
.text:004060AB loc_4060AB:                             ; CODE XREF: sub_405980+5A8↑j
.text:004060AB                                         ; sub_405980+5D8↑j
.text:004060AB                 cmp     [esp+6Ch+var_3D], 0
.text:004060B0                 jz      short loc_4060BE
.text:004060B2                 cmp     [esp+6Ch+var_2E], 0
.text:004060B7                 jz      short loc_4060BE
.text:004060B9                 mov     [esp+6Ch+var_37], 1
.text:004060BE
.text:004060BE loc_4060BE:                             ; CODE XREF: sub_405980+730↑j
.text:004060BE                                         ; sub_405980+737↑j
.text:004060BE                 movzx   ebx, [esp+6Ch+var_37]
.text:004060C3                 mov     esi, [esp+6Ch+var_20]
.text:004060C7                 mov     eax, ds:dword_415100
.text:004060CC                 mov     [esp+6Ch+var_2E], bl
.text:004060D0                 cmp     esi, eax
.text:004060D2                 jb      loc_405AE4
.text:004060D8                 cmp     esi, eax
.text:004060DA                 jnz     short loc_406132
.text:004060DC                 movzx   ebx, [esp+6Ch+var_2D]
.text:004060E1                 movzx   edx, [esp+6Ch+var_2D]
.text:004060E6                 mov     ecx, [esp+ebx*4+6Ch+Block]
.text:004060EA                 xor     dl, 1
.text:004060ED                 movzx   edi, dl
.text:004060F0                 mov     [esp+6Ch+var_5C], ecx
.text:004060F4                 mov     ebx, [esp+edi*4+6Ch+Block]
.text:004060F8                 xor     edi, edi
.text:004060FA                 mov     [esp+6Ch+Size], esi
.text:004060FE                 mov     ecx, [esp+6Ch+var_2C]
.text:00406102                 mov     esi, [esp+6Ch+var_28]
.text:00406106                 mov     [esp+6Ch+var_60], ebx
.text:0040610A                 mov     [esp+6Ch+Stream], ecx
.text:0040610D                 mov     [esp+6Ch+Val], esi
.text:00406111                 call    sub_406EA0
.text:00406116                 mov     edx, [esp+6Ch+var_20]
.text:0040611A                 add     [esp+6Ch+var_2C], edx
.text:0040611E                 adc     [esp+6Ch+var_28], edi
.text:00406122                 mov     edi, ds:dword_415100
.text:00406128                 xor     [esp+6Ch+var_2D], 1
.text:0040612D                 jmp     loc_405EF8
.text:00406132 ; ---------------------------------------------------------------------------
.text:00406132
.text:00406132 loc_406132:                             ; CODE XREF: sub_405980+75A↑j
.text:00406132                 mov     [esp+6Ch+Size], 572h
.text:0040613A                 jmp     loc_405AD0
.text:0040613A sub_405980      endp
.text:0040613A
.text:0040613A ; ---------------------------------------------------------------------------
.text:0040613F byte_40613F     db 5Ch                  ; DATA XREF: sub_406160+2CA↓o
.text:00406140                 db 61h, 0
.text:00406142 word_406142     dw 625Ch                ; DATA XREF: sub_406160+34E↓o
.text:00406144                 db 0
.text:00406145 byte_406145     db 5Ch, 74h, 0          ; DATA XREF: sub_406160+377↓o
.text:00406148 byte_406148     db 5Ch, 6Eh, 0          ; DATA XREF: sub_406160+396↓o
.text:0040614B ; ---------------------------------------------------------------------------
.text:0040614B
.text:0040614B loc_40614B:                             ; DATA XREF: sub_406160+3BF↓o
.text:0040614B                 pop     esp
.text:0040614C                 jbe     short $+2
.text:0040614E
.text:0040614E loc_40614E:                             ; CODE XREF: .text:0040614C↑j
.text:0040614E                                         ; DATA XREF: sub_406160+3E8↓o
.text:0040614E                 pop     esp
.text:0040614F                 db      66h             ; DATA XREF: sub_406160+407↓o
.text:0040614F                 add     [edx+esi*2+0], bl
.text:00406154                 lea     esi, [esi+0]
.text:0040615A                 lea     edi, [edi+0]
.text:00406160
.text:00406160 ; =============== S U B R O U T I N E =======================================
.text:00406160
.text:00406160
.text:00406160 sub_406160      proc near               ; CODE XREF: sub_4025D0+1AD4↑p
.text:00406160
.text:00406160 C               = dword ptr -3Ch
.text:00406160 Type            = dword ptr -38h
.text:00406160 ElementCount    = dword ptr -34h
.text:00406160 Stream          = dword ptr -30h
.text:00406160 var_2B          = byte ptr -2Bh
.text:00406160 var_2A          = byte ptr -2Ah
.text:00406160 var_29          = byte ptr -29h
.text:00406160 var_28          = byte ptr -28h
.text:00406160 var_27          = byte ptr -27h
.text:00406160 var_26          = byte ptr -26h
.text:00406160 var_25          = byte ptr -25h
.text:00406160 var_24          = dword ptr -24h
.text:00406160 var_1D          = byte ptr -1Dh
.text:00406160 Block           = dword ptr -1Ch
.text:00406160 var_18          = dword ptr -18h
.text:00406160 var_14          = dword ptr -14h
.text:00406160
.text:00406160                 push    ebp
.text:00406161                 push    edi
.text:00406162                 push    esi
.text:00406163                 push    ebx
.text:00406164                 sub     esp, 2Ch
.text:00406167                 mov     eax, ds:dword_415050
.text:0040616C                 cmp     eax, 64h ; 'd'
.text:0040616F                 jnb     short loc_406176
.text:00406171                 mov     eax, 64h ; 'd'
.text:00406176
.text:00406176 loc_406176:                             ; CODE XREF: sub_406160+F↑j
.text:00406176                 mov     [esp+3Ch+var_18], eax
.text:0040617A                 mov     [esp+3Ch+C], eax ; size_t
.text:0040617D                 call    sub_4089E0
.text:00406182                 mov     [esp+3Ch+Block], eax
.text:00406186                 mov     edi, ds:dword_415000
.text:0040618C                 mov     ebp, ds:dword_415004
.text:00406192                 mov     [esp+3Ch+var_1D], 1
.text:00406197
.text:00406197 loc_406197:                             ; CODE XREF: sub_406160+11C↓j
.text:00406197                                         ; sub_406160+1FC↓j ...
.text:00406197                 movzx   eax, ds:byte_415010
.text:0040619E                 test    al, al
.text:004061A0                 jz      short loc_4061DE
.text:004061A2                 mov     ecx, ds:dword_4150C4
.text:004061A8                 xor     esi, esi
.text:004061AA                 mov     ebx, ds:dword_415050
.text:004061B0                 mov     edx, ds:dword_4150C0
.text:004061B6                 cmp     ecx, esi
.text:004061B8                 jb      loc_4068EB
.text:004061BE                 ja      short loc_4061C8
.text:004061C0                 cmp     edx, ebx
.text:004061C2                 jb      loc_4068EB
.text:004061C8
.text:004061C8 loc_4061C8:                             ; CODE XREF: sub_406160+5E↑j
.text:004061C8                 sub     edx, ebx
.text:004061CA                 sbb     ecx, esi
.text:004061CC                 cmp     ecx, ebp
.text:004061CE                 jb      loc_4068EB
.text:004061D4                 ja      short loc_4061DE
.text:004061D6                 cmp     edx, edi
.text:004061D8                 jbe     loc_4068EB
.text:004061DE
.text:004061DE loc_4061DE:                             ; CODE XREF: sub_406160+40↑j
.text:004061DE                                         ; sub_406160+74↑j
.text:004061DE                 mov     [esp+3Ch+var_24], 0
.text:004061E6                 xor     ecx, ecx
.text:004061E8                 cmp     ecx, ds:dword_415050
.text:004061EE                 jnb     loc_4062B7
.text:004061F4                 lea     esi, [esi+0]
.text:004061FA                 lea     edi, [edi+0]
.text:00406200
.text:00406200 loc_406200:                             ; CODE XREF: sub_406160+13D↓j
.text:00406200                 mov     [esp+3Ch+var_25], 0
.text:00406205                 mov     eax, ds:Stream
.text:0040620A                 mov     [esp+3Ch+var_26], 1
.text:0040620F                 mov     [esp+3Ch+var_14], 0FFFFFFFFh
.text:00406217                 test    eax, eax
.text:00406219                 jnz     loc_406782
.text:0040621F
.text:0040621F loc_40621F:                             ; CODE XREF: sub_406160+62F↓j
.text:0040621F                                         ; sub_406160+6D1↓j
.text:0040621F                 cmp     [esp+3Ch+var_26], 0
.text:00406224                 jz      short loc_406240
.text:00406226                 cmp     [esp+3Ch+var_1D], 0
.text:0040622B                 jz      short loc_406240
.text:0040622D                 mov     [esp+3Ch+var_25], 1
.text:00406232                 lea     esi, [esi+0]
.text:00406239                 lea     edi, [edi+0]
.text:00406240
.text:00406240 loc_406240:                             ; CODE XREF: sub_406160+C4↑j
.text:00406240                                         ; sub_406160+CB↑j
.text:00406240                 movzx   ecx, [esp+3Ch+var_25]
.text:00406245                 add     edi, 1
.text:00406248                 mov     edx, [esp+3Ch+var_14]
.text:0040624C                 adc     ebp, 0
.text:0040624F                 test    edx, edx
.text:00406251                 mov     [esp+3Ch+var_1D], cl
.text:00406255                 js      loc_406776
.text:0040625B                 mov     ebx, ds:__mb_cur_max
.text:00406261                 cmp     dword ptr [ebx], 1
.text:00406264                 jz      loc_406760
.text:0040626A                 mov     [esp+3Ch+Type], 157h ; Type
.text:00406272                 mov     [esp+3Ch+C], edx ; C
.text:00406275                 call    _isctype
.text:0040627A
.text:0040627A loc_40627A:                             ; CODE XREF: sub_406160+611↓j
.text:0040627A                 test    eax, eax
.text:0040627C                 jz      loc_406197
.text:00406282                 movzx   edx, byte ptr [esp+3Ch+var_14]
.text:00406287                 mov     ebx, [esp+3Ch+var_24]
.text:0040628B                 mov     esi, [esp+3Ch+Block]
.text:0040628F                 mov     [ebx+esi], dl
.text:00406292                 inc     ebx
.text:00406293                 cmp     ebx, ds:dword_415050
.text:00406299                 mov     [esp+3Ch+var_24], ebx
.text:0040629D                 jb      loc_406200
.text:004062A3                 lea     esi, [esi+0]
.text:004062A9                 lea     edi, [edi+0]
.text:004062B0
.text:004062B0 loc_4062B0:                             ; CODE XREF: sub_406160+217↓j
.text:004062B0                 movzx   eax, ds:byte_415010
.text:004062B7
.text:004062B7 loc_4062B7:                             ; CODE XREF: sub_406160+8E↑j
.text:004062B7                 test    al, al
.text:004062B9                 jz      short loc_4062E0
.text:004062BB                 mov     ecx, ds:dword_4150C4
.text:004062C1                 mov     eax, ds:dword_4150C0
.text:004062C6                 cmp     ebp, ecx
.text:004062C8                 jb      short loc_4062E0
.text:004062CA                 ja      loc_406393
.text:004062D0                 cmp     edi, eax
.text:004062D2                 jnb     loc_406393
.text:004062D8                 nop
.text:004062D9                 lea     esi, [esi+0]
.text:004062E0
.text:004062E0 loc_4062E0:                             ; CODE XREF: sub_406160+159↑j
.text:004062E0                                         ; sub_406160+168↑j
.text:004062E0                 mov     eax, [esp+3Ch+var_24]
.text:004062E4                 cmp     eax, [esp+3Ch+var_18]
.text:004062E8                 jz      loc_40673B
.text:004062EE
.text:004062EE loc_4062EE:                             ; CODE XREF: sub_406160+5FB↓j
.text:004062EE                 mov     [esp+3Ch+var_28], 0
.text:004062F3                 mov     eax, ds:Stream
.text:004062F8                 mov     [esp+3Ch+var_29], 1
.text:004062FD                 mov     [esp+3Ch+var_14], 0FFFFFFFFh
.text:00406305                 test    eax, eax
.text:00406307                 jnz     loc_4065D0
.text:0040630D
.text:0040630D loc_40630D:                             ; CODE XREF: sub_406160+47D↓j
.text:0040630D                                         ; sub_406160+521↓j
.text:0040630D                 cmp     [esp+3Ch+var_29], 0
.text:00406312                 jz      short loc_406320
.text:00406314                 cmp     [esp+3Ch+var_1D], 0
.text:00406319                 jz      short loc_406320
.text:0040631B                 mov     [esp+3Ch+var_28], 1
.text:00406320
.text:00406320 loc_406320:                             ; CODE XREF: sub_406160+1B2↑j
.text:00406320                                         ; sub_406160+1B9↑j
.text:00406320                 movzx   edx, [esp+3Ch+var_28]
.text:00406325                 add     edi, 1
.text:00406328                 adc     ebp, 0
.text:0040632B                 mov     [esp+3Ch+var_1D], dl
.text:0040632F                 mov     edx, [esp+3Ch+var_14]
.text:00406333                 test    edx, edx
.text:00406335                 js      loc_4065B6
.text:0040633B                 test    edx, edx
.text:0040633D                 jz      short loc_406393
.text:0040633F                 mov     esi, ds:__mb_cur_max
.text:00406345                 cmp     dword ptr [esi], 1
.text:00406348                 jz      short loc_406380
.text:0040634A                 mov     [esp+3Ch+Type], 157h ; Type
.text:00406352                 mov     [esp+3Ch+C], edx ; C
.text:00406355                 call    _isctype
.text:0040635A
.text:0040635A loc_40635A:                             ; CODE XREF: sub_406160+231↓j
.text:0040635A                 test    eax, eax
.text:0040635C                 jz      loc_406197
.text:00406362                 movzx   ebx, byte ptr [esp+3Ch+var_14]
.text:00406367                 mov     esi, [esp+3Ch+var_24]
.text:0040636B                 mov     edx, [esp+3Ch+Block]
.text:0040636F                 mov     [esi+edx], bl
.text:00406372                 inc     esi
.text:00406373                 mov     [esp+3Ch+var_24], esi
.text:00406377                 jmp     loc_4062B0
.text:00406377 ; ---------------------------------------------------------------------------
.text:0040637C                 align 10h
.text:00406380
.text:00406380 loc_406380:                             ; CODE XREF: sub_406160+1E8↑j
.text:00406380                 mov     ecx, ds:_pctype
.text:00406386                 mov     ebx, [ecx]
.text:00406388                 movzx   eax, word ptr [ebx+edx*2]
.text:0040638C                 and     eax, 157h
.text:00406391                 jmp     short loc_40635A
.text:00406393 ; ---------------------------------------------------------------------------
.text:00406393
.text:00406393 loc_406393:                             ; CODE XREF: sub_406160+16A↑j
.text:00406393                                         ; sub_406160+172↑j ...
.text:00406393                 mov     eax, [esp+3Ch+var_24]
.text:00406397                 mov     ebx, edi
.text:00406399                 xor     ecx, ecx
.text:0040639B                 mov     esi, [esp+3Ch+Block]
.text:0040639F                 sub     ebx, eax
.text:004063A1                 mov     edx, ebx
.text:004063A3                 mov     byte ptr [eax+esi], 0
.text:004063A7                 mov     esi, ebp
.text:004063A9                 sbb     esi, ecx
.text:004063AB                 mov     ecx, esi
.text:004063AD                 add     edx, 0FFFFFFFFh
.text:004063B0                 adc     ecx, 0FFFFFFFFh
.text:004063B3                 mov     [esp+3Ch+ElementCount], 20h ; ' '
.text:004063BB                 mov     [esp+3Ch+C], edx
.text:004063BE                 mov     [esp+3Ch+Type], ecx
.text:004063C2                 call    ds:dword_4150A0
.text:004063C8                 mov     [esp+3Ch+var_24], 0
.text:004063D0                 mov     eax, [esp+3Ch+Block]
.text:004063D4                 movsx   esi, byte ptr [eax]
.text:004063D7                 test    esi, esi
.text:004063D9                 mov     [esp+3Ch+var_14], esi
.text:004063DD                 jz      short loc_406455
.text:004063DF
.text:004063DF loc_4063DF:                             ; CODE XREF: sub_406160+2F3↓j
.text:004063DF                 mov     ecx, [esp+3Ch+var_14]
.text:004063E3                 lea     eax, [ecx-7]    ; switch 7 cases
.text:004063E6                 cmp     eax, 6
.text:004063E9                 ja      def_4063EF      ; jumptable 004063EF default case
.text:004063EF                 jmp     ds:jpt_4063EF[eax*4] ; switch jump
.text:004063EF ; ---------------------------------------------------------------------------
.text:004063F6                 align 4
.text:004063F8 jpt_4063EF      dd offset loc_406414    ; DATA XREF: sub_406160+28F↑r
.text:004063F8                 dd offset loc_406498    ; jump table for switch statement
.text:004063F8                 dd offset loc_4064C1
.text:004063F8                 dd offset loc_4064E0
.text:004063F8                 dd offset loc_406509
.text:004063F8                 dd offset loc_406532
.text:004063F8                 dd offset loc_406551
.text:00406414 ; ---------------------------------------------------------------------------
.text:00406414
.text:00406414 loc_406414:                             ; CODE XREF: sub_406160+28F↑j
.text:00406414                                         ; DATA XREF: sub_406160:jpt_4063EF↑o
.text:00406414                 mov     [esp+3Ch+ElementCount], 2 ; jumptable 004063EF case 7
.text:0040641C                 mov     ebx, ds:_iob
.text:00406422                 mov     [esp+3Ch+Type], 1 ; ElementSize
.text:0040642A                 mov     [esp+3Ch+C], offset byte_40613F ; Buffer
.text:00406431
.text:00406431 loc_406431:                             ; CODE XREF: sub_406160+40E↓j
.text:00406431                 add     ebx, 20h ; ' '
.text:00406434                 mov     [esp+3Ch+Stream], ebx ; Stream
.text:00406438
.text:00406438 loc_406438:                             ; CODE XREF: sub_406160+35C↓j
.text:00406438                                         ; sub_406160+3A4↓j ...
.text:00406438                 call    fwrite
.text:0040643D
.text:0040643D loc_40643D:                             ; CODE XREF: sub_406160+437↓j
.text:0040643D                                         ; sub_406160+451↓j
.text:0040643D                 inc     [esp+3Ch+var_24]
.text:00406441                 mov     eax, [esp+3Ch+Block]
.text:00406445                 mov     esi, [esp+3Ch+var_24]
.text:00406449                 movsx   ebx, byte ptr [esi+eax]
.text:0040644D                 test    ebx, ebx
.text:0040644F                 mov     [esp+3Ch+var_14], ebx
.text:00406453                 jnz     short loc_4063DF
.text:00406455
.text:00406455 loc_406455:                             ; CODE XREF: sub_406160+27D↑j
.text:00406455                 mov     edx, ds:_iob
.text:0040645B                 mov     ecx, [edx+24h]
.text:0040645E                 dec     ecx
.text:0040645F                 mov     [edx+24h], ecx
.text:00406462                 test    ecx, ecx
.text:00406464                 js      short loc_40647A
.text:00406466                 mov     ebx, ds:_iob
.text:0040646C                 mov     esi, [ebx+20h]
.text:0040646F                 mov     byte ptr [esi], 0Ah
.text:00406472                 inc     dword ptr [ebx+20h]
.text:00406475                 jmp     loc_406197
.text:0040647A ; ---------------------------------------------------------------------------
.text:0040647A
.text:0040647A loc_40647A:                             ; CODE XREF: sub_406160+304↑j
.text:0040647A                 mov     [esp+3Ch+C], 0Ah ; Ch
.text:00406481                 mov     ecx, ds:_iob
.text:00406487                 add     ecx, 20h ; ' '
.text:0040648A                 mov     [esp+3Ch+Type], ecx ; File
.text:0040648E                 call    _flsbuf
.text:00406493                 jmp     loc_406197
.text:00406498 ; ---------------------------------------------------------------------------
.text:00406498
.text:00406498 loc_406498:                             ; CODE XREF: sub_406160+28F↑j
.text:00406498                                         ; DATA XREF: sub_406160:jpt_4063EF↑o
.text:00406498                 mov     [esp+3Ch+ElementCount], 2 ; jumptable 004063EF case 8
.text:004064A0                 mov     ecx, ds:_iob
.text:004064A6                 mov     [esp+3Ch+Type], 1
.text:004064AE                 mov     [esp+3Ch+C], offset word_406142
.text:004064B5
.text:004064B5 loc_4064B5:                             ; CODE XREF: sub_406160+37E↓j
.text:004064B5                 add     ecx, 20h ; ' '
.text:004064B8                 mov     [esp+3Ch+Stream], ecx
.text:004064BC                 jmp     loc_406438
.text:004064C1 ; ---------------------------------------------------------------------------
.text:004064C1
.text:004064C1 loc_4064C1:                             ; CODE XREF: sub_406160+28F↑j
.text:004064C1                                         ; DATA XREF: sub_406160:jpt_4063EF↑o
.text:004064C1                 mov     [esp+3Ch+ElementCount], 2 ; jumptable 004063EF case 9
.text:004064C9                 mov     ecx, ds:_iob
.text:004064CF                 mov     [esp+3Ch+Type], 1
.text:004064D7                 mov     [esp+3Ch+C], offset byte_406145
.text:004064DE                 jmp     short loc_4064B5
.text:004064E0 ; ---------------------------------------------------------------------------
.text:004064E0
.text:004064E0 loc_4064E0:                             ; CODE XREF: sub_406160+28F↑j
.text:004064E0                                         ; DATA XREF: sub_406160:jpt_4063EF↑o
.text:004064E0                 mov     [esp+3Ch+ElementCount], 2 ; jumptable 004063EF case 10
.text:004064E8                 mov     esi, ds:_iob
.text:004064EE                 mov     [esp+3Ch+Type], 1
.text:004064F6                 mov     [esp+3Ch+C], offset byte_406148
.text:004064FD                 add     esi, 20h ; ' '
.text:00406500                 mov     [esp+3Ch+Stream], esi
.text:00406504                 jmp     loc_406438
.text:00406509 ; ---------------------------------------------------------------------------
.text:00406509
.text:00406509 loc_406509:                             ; CODE XREF: sub_406160+28F↑j
.text:00406509                                         ; DATA XREF: sub_406160:jpt_4063EF↑o
.text:00406509                 mov     [esp+3Ch+ElementCount], 2 ; jumptable 004063EF case 11
.text:00406511                 mov     edx, ds:_iob
.text:00406517                 mov     [esp+3Ch+Type], 1
.text:0040651F                 mov     [esp+3Ch+C], offset loc_40614B
.text:00406526
.text:00406526 loc_406526:                             ; CODE XREF: sub_406160+3EF↓j
.text:00406526                 add     edx, 20h ; ' '
.text:00406529                 mov     [esp+3Ch+Stream], edx
.text:0040652D                 jmp     loc_406438
.text:00406532 ; ---------------------------------------------------------------------------
.text:00406532
.text:00406532 loc_406532:                             ; CODE XREF: sub_406160+28F↑j
.text:00406532                                         ; DATA XREF: sub_406160:jpt_4063EF↑o
.text:00406532                 mov     [esp+3Ch+ElementCount], 2 ; jumptable 004063EF case 12
.text:0040653A                 mov     edx, ds:_iob
.text:00406540                 mov     [esp+3Ch+Type], 1
.text:00406548                 mov     [esp+3Ch+C], offset loc_40614E
.text:0040654F                 jmp     short loc_406526
.text:00406551 ; ---------------------------------------------------------------------------
.text:00406551
.text:00406551 loc_406551:                             ; CODE XREF: sub_406160+28F↑j
.text:00406551                                         ; DATA XREF: sub_406160:jpt_4063EF↑o
.text:00406551                 mov     [esp+3Ch+ElementCount], 2 ; jumptable 004063EF case 13
.text:00406559                 mov     ebx, ds:_iob
.text:0040655F                 mov     [esp+3Ch+Type], 1
.text:00406567                 mov     [esp+3Ch+C], (offset loc_40614F+2)
.text:0040656E                 jmp     loc_406431
.text:00406573 ; ---------------------------------------------------------------------------
.text:00406573
.text:00406573 def_4063EF:                             ; CODE XREF: sub_406160+289↑j
.text:00406573                 mov     ebx, ds:_iob    ; jumptable 004063EF default case
.text:00406579                 mov     esi, [ebx+24h]
.text:0040657C                 dec     esi
.text:0040657D                 mov     [ebx+24h], esi
.text:00406580                 test    esi, esi
.text:00406582                 js      short loc_40659C
.text:00406584                 movzx   ecx, byte ptr [esp+3Ch+var_14]
.text:00406589                 mov     esi, ds:_iob
.text:0040658F                 mov     eax, [esi+20h]
.text:00406592                 mov     [eax], cl
.text:00406594                 inc     dword ptr [esi+20h]
.text:00406597                 jmp     loc_40643D
.text:0040659C ; ---------------------------------------------------------------------------
.text:0040659C
.text:0040659C loc_40659C:                             ; CODE XREF: sub_406160+422↑j
.text:0040659C                 mov     [esp+3Ch+C], ecx ; Ch
.text:0040659F                 mov     edx, ds:_iob
.text:004065A5                 add     edx, 20h ; ' '
.text:004065A8                 mov     [esp+3Ch+Type], edx ; File
.text:004065AC                 call    _flsbuf
.text:004065B1                 jmp     loc_40643D
.text:004065B6 ; ---------------------------------------------------------------------------
.text:004065B6
.text:004065B6 loc_4065B6:                             ; CODE XREF: sub_406160+1D5↑j
.text:004065B6                 mov     ecx, [esp+3Ch+Block]
.text:004065BA                 mov     [esp+3Ch+C], ecx ; Block
.text:004065BD
.text:004065BD loc_4065BD:                             ; CODE XREF: sub_406160+61D↓j
.text:004065BD                 call    free
.text:004065C2                 movzx   eax, [esp+3Ch+var_1D]
.text:004065C7
.text:004065C7 loc_4065C7:                             ; CODE XREF: sub_406160+7F2↓j
.text:004065C7                 add     esp, 2Ch
.text:004065CA                 pop     ebx
.text:004065CB                 pop     esi
.text:004065CC                 pop     edi
.text:004065CD                 pop     ebp
.text:004065CE                 retn
.text:004065CE ; ---------------------------------------------------------------------------
.text:004065CF                 align 10h
.text:004065D0
.text:004065D0 loc_4065D0:                             ; CODE XREF: sub_406160+1A7↑j
.text:004065D0                                         ; sub_406160+51B↓j
.text:004065D0                 mov     [esp+3Ch+C], eax ; Stream
.text:004065D3                 call    fgetc
.text:004065D8                 mov     [esp+3Ch+var_14], eax
.text:004065DC                 inc     eax
.text:004065DD                 jnz     loc_40630D
.text:004065E3                 mov     [esp+3Ch+var_2A], 0
.text:004065E8                 mov     bl, 1
.text:004065EA                 call    _errno
.text:004065EF                 mov     esi, [eax]
.text:004065F1                 mov     eax, ds:Stream
.text:004065F6                 test    eax, eax
.text:004065F8                 jz      loc_406730
.text:004065FE                 test    byte ptr [eax+0Ch], 20h
.text:00406602                 jnz     loc_4066E0
.text:00406608                 mov     edx, ds:_iob
.text:0040660E                 cmp     eax, edx
.text:00406610                 jz      short loc_406627
.text:00406612                 mov     [esp+3Ch+C], eax ; Stream
.text:00406615                 call    fclose
.text:0040661A                 inc     eax
.text:0040661B                 jz      loc_4066AF
.text:00406621
.text:00406621 loc_406621:                             ; CODE XREF: sub_406160+57A↓j
.text:00406621                 mov     edx, ds:_iob
.text:00406627
.text:00406627 loc_406627:                             ; CODE XREF: sub_406160+4B0↑j
.text:00406627                                         ; sub_406160+5CA↓j
.text:00406627                 xor     eax, eax
.text:00406629                 mov     ds:Stream, eax
.text:0040662E
.text:0040662E loc_40662E:                             ; CODE XREF: sub_406160+5D6↓j
.text:0040662E                 test    byte ptr [edx+2Ch], 20h
.text:00406632                 jnz     short loc_406686
.text:00406634
.text:00406634 loc_406634:                             ; CODE XREF: sub_406160+54D↓j
.text:00406634                 test    bl, bl
.text:00406636                 jz      short loc_406650
.text:00406638                 cmp     [esp+3Ch+var_29], 0
.text:0040663D                 jz      short loc_406650
.text:0040663F                 mov     [esp+3Ch+var_2A], 1
.text:00406644                 lea     esi, [esi+0]
.text:0040664A                 lea     edi, [edi+0]
.text:00406650
.text:00406650 loc_406650:                             ; CODE XREF: sub_406160+4D6↑j
.text:00406650                                         ; sub_406160+4DD↑j
.text:00406650                 movzx   ecx, [esp+3Ch+var_2A]
.text:00406655                 xor     ebx, ebx
.text:00406657                 mov     [esp+3Ch+var_29], cl
.text:0040665B                 call    sub_405070
.text:00406660                 test    al, al
.text:00406662                 jz      short loc_406670
.text:00406664                 cmp     [esp+3Ch+var_29], 0
.text:00406669                 jz      short loc_406670
.text:0040666B                 mov     bl, 1
.text:0040666D                 lea     esi, [esi+0]
.text:00406670
.text:00406670 loc_406670:                             ; CODE XREF: sub_406160+502↑j
.text:00406670                                         ; sub_406160+509↑j
.text:00406670                 mov     [esp+3Ch+var_29], bl
.text:00406674                 mov     eax, ds:Stream
.text:00406679                 test    eax, eax
.text:0040667B                 jnz     loc_4065D0
.text:00406681                 jmp     loc_40630D
.text:00406686 ; ---------------------------------------------------------------------------
.text:00406686
.text:00406686 loc_406686:                             ; CODE XREF: sub_406160+4D2↑j
.text:00406686                 mov     [esp+3Ch+C], offset aWriteError ; "write error"
.text:0040668D                 xor     ebx, ebx
.text:0040668F                 call    ds:libintl_gettext
.text:00406695                 mov     [esp+3Ch+Type], 0 ; ErrorMessage
.text:0040669D                 mov     [esp+3Ch+C], 0  ; Code
.text:004066A4                 mov     [esp+3Ch+ElementCount], eax ; char *
.text:004066A8                 call    sub_40ADC0
.text:004066AD                 jmp     short loc_406634
.text:004066AF ; ---------------------------------------------------------------------------
.text:004066AF
.text:004066AF loc_4066AF:                             ; CODE XREF: sub_406160+4BB↑j
.text:004066AF                 call    _errno
.text:004066B4                 mov     [esp+3Ch+ElementCount], offset aS_4 ; "%s"
.text:004066BC                 mov     ebx, ds:dword_415110
.text:004066C2                 mov     [esp+3Ch+Stream], ebx ; char
.text:004066C6                 mov     esi, [eax]
.text:004066C8                 xor     ebx, ebx
.text:004066CA                 mov     [esp+3Ch+C], 0  ; Code
.text:004066D1                 mov     [esp+3Ch+Type], esi ; ErrorMessage
.text:004066D5                 call    sub_40ADC0
.text:004066DA                 jmp     loc_406621
.text:004066DA ; ---------------------------------------------------------------------------
.text:004066DF                 align 10h
.text:004066E0
.text:004066E0 loc_4066E0:                             ; CODE XREF: sub_406160+4A2↑j
.text:004066E0                 mov     [esp+3Ch+C], offset aSReadError ; "%s: read error"
.text:004066E7                 call    ds:libintl_gettext
.text:004066ED                 mov     [esp+3Ch+Type], esi ; ErrorMessage
.text:004066F1                 mov     ecx, ds:dword_415110
.text:004066F7                 mov     [esp+3Ch+C], 0  ; Code
.text:004066FE                 mov     [esp+3Ch+ElementCount], eax ; char *
.text:00406702                 mov     [esp+3Ch+Stream], ecx ; char
.text:00406706                 call    sub_40ADC0
.text:0040670B                 mov     eax, ds:Stream
.text:00406710                 mov     edx, ds:_iob
.text:00406716                 cmp     eax, edx
.text:00406718                 jz      short loc_406728
.text:0040671A                 mov     [esp+3Ch+C], eax ; Stream
.text:0040671D                 call    fclose
.text:00406722                 mov     edx, ds:_iob
.text:00406728
.text:00406728 loc_406728:                             ; CODE XREF: sub_406160+5B8↑j
.text:00406728                 xor     ebx, ebx
.text:0040672A                 jmp     loc_406627
.text:0040672A ; ---------------------------------------------------------------------------
.text:0040672F                 align 10h
.text:00406730
.text:00406730 loc_406730:                             ; CODE XREF: sub_406160+498↑j
.text:00406730                 mov     edx, ds:_iob
.text:00406736                 jmp     loc_40662E
.text:0040673B ; ---------------------------------------------------------------------------
.text:0040673B
.text:0040673B loc_40673B:                             ; CODE XREF: sub_406160+188↑j
.text:0040673B                 mov     [esp+3Ch+ElementCount], 1 ; int
.text:00406743                 mov     ecx, [esp+3Ch+Block]
.text:00406747                 lea     ebx, [esp+3Ch+var_18]
.text:0040674B                 mov     [esp+3Ch+Type], ebx ; int
.text:0040674F                 mov     [esp+3Ch+C], ecx ; void *
.text:00406752                 call    sub_408AA0
.text:00406757                 mov     [esp+3Ch+Block], eax
.text:0040675B                 jmp     loc_4062EE
.text:00406760 ; ---------------------------------------------------------------------------
.text:00406760
.text:00406760 loc_406760:                             ; CODE XREF: sub_406160+104↑j
.text:00406760                 mov     ecx, ds:_pctype
.text:00406766                 mov     esi, [ecx]
.text:00406768                 movzx   eax, word ptr [esi+edx*2]
.text:0040676C                 and     eax, 157h
.text:00406771                 jmp     loc_40627A
.text:00406776 ; ---------------------------------------------------------------------------
.text:00406776
.text:00406776 loc_406776:                             ; CODE XREF: sub_406160+F5↑j
.text:00406776                 mov     esi, [esp+3Ch+Block]
.text:0040677A                 mov     [esp+3Ch+C], esi
.text:0040677D                 jmp     loc_4065BD
.text:00406782 ; ---------------------------------------------------------------------------
.text:00406782
.text:00406782 loc_406782:                             ; CODE XREF: sub_406160+B9↑j
.text:00406782                                         ; sub_406160+6CB↓j
.text:00406782                 mov     [esp+3Ch+C], eax ; Stream
.text:00406785                 call    fgetc
.text:0040678A                 mov     [esp+3Ch+var_14], eax
.text:0040678E                 inc     eax
.text:0040678F                 jnz     loc_40621F
.text:00406795                 mov     [esp+3Ch+var_27], 0
.text:0040679A                 mov     bl, 1
.text:0040679C                 call    _errno
.text:004067A1                 mov     esi, [eax]
.text:004067A3                 mov     eax, ds:Stream
.text:004067A8                 test    eax, eax
.text:004067AA                 jz      loc_4068E0
.text:004067B0                 test    byte ptr [eax+0Ch], 20h
.text:004067B4                 jnz     loc_40688F
.text:004067BA                 mov     edx, ds:_iob
.text:004067C0                 cmp     eax, edx
.text:004067C2                 jz      short loc_4067D9
.text:004067C4                 mov     [esp+3Ch+C], eax ; Stream
.text:004067C7                 call    fclose
.text:004067CC                 inc     eax
.text:004067CD                 jz      loc_40685F
.text:004067D3
.text:004067D3 loc_4067D3:                             ; CODE XREF: sub_406160+72A↓j
.text:004067D3                 mov     edx, ds:_iob
.text:004067D9
.text:004067D9 loc_4067D9:                             ; CODE XREF: sub_406160+662↑j
.text:004067D9                                         ; sub_406160+779↓j
.text:004067D9                 xor     esi, esi
.text:004067DB                 mov     ds:Stream, esi
.text:004067E1
.text:004067E1 loc_4067E1:                             ; CODE XREF: sub_406160+786↓j
.text:004067E1                 test    byte ptr [edx+2Ch], 20h
.text:004067E5                 jnz     short loc_406836
.text:004067E7
.text:004067E7 loc_4067E7:                             ; CODE XREF: sub_406160+6FD↓j
.text:004067E7                 test    bl, bl
.text:004067E9                 jz      short loc_406800
.text:004067EB                 cmp     [esp+3Ch+var_26], 0
.text:004067F0                 jz      short loc_406800
.text:004067F2                 mov     [esp+3Ch+var_27], 1
.text:004067F7                 mov     esi, esi
.text:004067F9                 lea     edi, [edi+0]
.text:00406800
.text:00406800 loc_406800:                             ; CODE XREF: sub_406160+689↑j
.text:00406800                                         ; sub_406160+690↑j
.text:00406800                 movzx   eax, [esp+3Ch+var_27]
.text:00406805                 xor     ebx, ebx
.text:00406807                 mov     [esp+3Ch+var_26], al
.text:0040680B                 call    sub_405070
.text:00406810                 test    al, al
.text:00406812                 jz      short loc_406820
.text:00406814                 cmp     [esp+3Ch+var_26], 0
.text:00406819                 jz      short loc_406820
.text:0040681B                 mov     bl, 1
.text:0040681D                 lea     esi, [esi+0]
.text:00406820
.text:00406820 loc_406820:                             ; CODE XREF: sub_406160+6B2↑j
.text:00406820                                         ; sub_406160+6B9↑j
.text:00406820                 mov     [esp+3Ch+var_26], bl
.text:00406824                 mov     eax, ds:Stream
.text:00406829                 test    eax, eax
.text:0040682B                 jnz     loc_406782
.text:00406831                 jmp     loc_40621F
.text:00406836 ; ---------------------------------------------------------------------------
.text:00406836
.text:00406836 loc_406836:                             ; CODE XREF: sub_406160+685↑j
.text:00406836                 mov     [esp+3Ch+C], offset aWriteError ; "write error"
.text:0040683D                 xor     ebx, ebx
.text:0040683F                 call    ds:libintl_gettext
.text:00406845                 mov     [esp+3Ch+Type], 0 ; ErrorMessage
.text:0040684D                 mov     [esp+3Ch+C], 0  ; Code
.text:00406854                 mov     [esp+3Ch+ElementCount], eax ; char *
.text:00406858                 call    sub_40ADC0
.text:0040685D                 jmp     short loc_4067E7
.text:0040685F ; ---------------------------------------------------------------------------
.text:0040685F
.text:0040685F loc_40685F:                             ; CODE XREF: sub_406160+66D↑j
.text:0040685F                 call    _errno
.text:00406864                 mov     [esp+3Ch+ElementCount], offset aS_4 ; "%s"
.text:0040686C                 mov     ebx, ds:dword_415110
.text:00406872                 mov     [esp+3Ch+Stream], ebx ; char
.text:00406876                 mov     edx, [eax]
.text:00406878                 xor     ebx, ebx
.text:0040687A                 mov     [esp+3Ch+C], 0  ; Code
.text:00406881                 mov     [esp+3Ch+Type], edx ; ErrorMessage
.text:00406885                 call    sub_40ADC0
.text:0040688A                 jmp     loc_4067D3
.text:0040688F ; ---------------------------------------------------------------------------
.text:0040688F
.text:0040688F loc_40688F:                             ; CODE XREF: sub_406160+654↑j
.text:0040688F                 mov     [esp+3Ch+C], offset aSReadError ; "%s: read error"
.text:00406896                 call    ds:libintl_gettext
.text:0040689C                 mov     [esp+3Ch+Type], esi ; ErrorMessage
.text:004068A0                 mov     ecx, ds:dword_415110
.text:004068A6                 mov     [esp+3Ch+C], 0  ; Code
.text:004068AD                 mov     [esp+3Ch+ElementCount], eax ; char *
.text:004068B1                 mov     [esp+3Ch+Stream], ecx ; char
.text:004068B5                 call    sub_40ADC0
.text:004068BA                 mov     eax, ds:Stream
.text:004068BF                 mov     edx, ds:_iob
.text:004068C5                 cmp     eax, edx
.text:004068C7                 jz      short loc_4068D7
.text:004068C9                 mov     [esp+3Ch+C], eax ; Stream
.text:004068CC                 call    fclose
.text:004068D1                 mov     edx, ds:_iob
.text:004068D7
.text:004068D7 loc_4068D7:                             ; CODE XREF: sub_406160+767↑j
.text:004068D7                 xor     ebx, ebx
.text:004068D9                 jmp     loc_4067D9
.text:004068D9 ; ---------------------------------------------------------------------------
.text:004068DE                 align 10h
.text:004068E0
.text:004068E0 loc_4068E0:                             ; CODE XREF: sub_406160+64A↑j
.text:004068E0                 mov     edx, ds:_iob
.text:004068E6                 jmp     loc_4067E1
.text:004068EB ; ---------------------------------------------------------------------------
.text:004068EB
.text:004068EB loc_4068EB:                             ; CODE XREF: sub_406160+58↑j
.text:004068EB                                         ; sub_406160+62↑j ...
.text:004068EB                 mov     edi, [esp+3Ch+Block]
.text:004068EF                 mov     bl, 1
.text:004068F1                 mov     [esp+3Ch+C], edi ; Block
.text:004068F4                 call    free
.text:004068F9                 mov     [esp+3Ch+var_2B], 0
.text:004068FE                 mov     eax, ds:Stream
.text:00406903                 test    eax, eax
.text:00406905                 jz      loc_406A03
.text:0040690B                 test    byte ptr [eax+0Ch], 20h
.text:0040690F                 jnz     loc_4069B0
.text:00406915                 mov     edx, ds:_iob
.text:0040691B                 cmp     eax, edx
.text:0040691D                 jz      short loc_406930
.text:0040691F                 mov     [esp+3Ch+C], eax ; Stream
.text:00406922                 call    fclose
.text:00406927                 inc     eax
.text:00406928                 jz      short loc_406980
.text:0040692A
.text:0040692A loc_40692A:                             ; CODE XREF: sub_406160+84B↓j
.text:0040692A                 mov     edx, ds:_iob
.text:00406930
.text:00406930 loc_406930:                             ; CODE XREF: sub_406160+7BD↑j
.text:00406930                                         ; sub_406160+89E↓j
.text:00406930                 xor     eax, eax
.text:00406932                 mov     ds:Stream, eax
.text:00406937
.text:00406937 loc_406937:                             ; CODE XREF: sub_406160+8A9↓j
.text:00406937                 test    byte ptr [edx+2Ch], 20h
.text:0040693B                 jnz     short loc_406957
.text:0040693D
.text:0040693D loc_40693D:                             ; CODE XREF: sub_406160+81E↓j
.text:0040693D                 test    bl, bl
.text:0040693F                 jz      short loc_40694D
.text:00406941                 cmp     [esp+3Ch+var_1D], 0
.text:00406946                 jz      short loc_40694D
.text:00406948                 mov     [esp+3Ch+var_2B], 1
.text:0040694D
.text:0040694D loc_40694D:                             ; CODE XREF: sub_406160+7DF↑j
.text:0040694D                                         ; sub_406160+7E6↑j
.text:0040694D                 movzx   eax, [esp+3Ch+var_2B]
.text:00406952                 jmp     loc_4065C7
.text:00406957 ; ---------------------------------------------------------------------------
.text:00406957
.text:00406957 loc_406957:                             ; CODE XREF: sub_406160+7DB↑j
.text:00406957                 mov     [esp+3Ch+C], offset aWriteError ; "write error"
.text:0040695E                 xor     ebx, ebx
.text:00406960                 call    ds:libintl_gettext
.text:00406966                 mov     [esp+3Ch+Type], 0 ; ErrorMessage
.text:0040696E                 mov     [esp+3Ch+C], 0  ; Code
.text:00406975                 mov     [esp+3Ch+ElementCount], eax ; char *
.text:00406979                 call    sub_40ADC0
.text:0040697E                 jmp     short loc_40693D
.text:00406980 ; ---------------------------------------------------------------------------
.text:00406980
.text:00406980 loc_406980:                             ; CODE XREF: sub_406160+7C8↑j
.text:00406980                 call    _errno
.text:00406985                 mov     [esp+3Ch+ElementCount], offset aS_4 ; "%s"
.text:0040698D                 mov     ebx, ds:dword_415110
.text:00406993                 mov     [esp+3Ch+Stream], ebx ; char
.text:00406997                 mov     edx, [eax]
.text:00406999                 xor     ebx, ebx
.text:0040699B                 mov     [esp+3Ch+C], 0  ; Code
.text:004069A2                 mov     [esp+3Ch+Type], edx ; ErrorMessage
.text:004069A6                 call    sub_40ADC0
.text:004069AB                 jmp     loc_40692A
.text:004069B0 ; ---------------------------------------------------------------------------
.text:004069B0
.text:004069B0 loc_4069B0:                             ; CODE XREF: sub_406160+7AF↑j
.text:004069B0                 mov     [esp+3Ch+C], offset aSReadError ; "%s: read error"
.text:004069B7                 call    ds:libintl_gettext
.text:004069BD                 mov     [esp+3Ch+Type], 0 ; ErrorMessage
.text:004069C5                 mov     ebp, ds:dword_415110
.text:004069CB                 mov     [esp+3Ch+C], 0  ; Code
.text:004069D2                 mov     [esp+3Ch+ElementCount], eax ; char *
.text:004069D6                 mov     [esp+3Ch+Stream], ebp ; char
.text:004069DA                 call    sub_40ADC0
.text:004069DF                 mov     eax, ds:Stream
.text:004069E4                 mov     edx, ds:_iob
.text:004069EA                 cmp     eax, edx
.text:004069EC                 jz      short loc_4069FC
.text:004069EE                 mov     [esp+3Ch+C], eax ; Stream
.text:004069F1                 call    fclose
.text:004069F6                 mov     edx, ds:_iob
.text:004069FC
.text:004069FC loc_4069FC:                             ; CODE XREF: sub_406160+88C↑j
.text:004069FC                 xor     ebx, ebx
.text:004069FE                 jmp     loc_406930
.text:00406A03 ; ---------------------------------------------------------------------------
.text:00406A03
.text:00406A03 loc_406A03:                             ; CODE XREF: sub_406160+7A5↑j
.text:00406A03                 mov     edx, ds:_iob
.text:00406A09                 jmp     loc_406937
.text:00406A09 sub_406160      endp
.text:00406A09
.text:00406A09 ; ---------------------------------------------------------------------------
.text:00406A0E                 align 10h
.text:00406A10
.text:00406A10 loc_406A10:                             ; DATA XREF: sub_404A80+254↑o
.text:00406A10                 push    edi
.text:00406A11                 push    esi
.text:00406A12                 push    ebx
.text:00406A13                 sub     esp, 10h
.text:00406A16                 mov     ebx, [esp+20h]
.text:00406A1A                 mov     edi, [esp+28h]
.text:00406A1E                 mov     esi, [esp+24h]
.text:00406A22                 test    ebx, ebx
.text:00406A24                 jnz     short loc_406A30
.text:00406A26
.text:00406A26 loc_406A26:                             ; CODE XREF: .text:00406A43↓j
.text:00406A26                 add     esp, 10h
.text:00406A29                 pop     ebx
.text:00406A2A                 pop     esi
.text:00406A2B                 pop     edi
.text:00406A2C                 retn
.text:00406A2C ; ---------------------------------------------------------------------------
.text:00406A2D                 align 10h
.text:00406A30
.text:00406A30 loc_406A30:                             ; CODE XREF: .text:00406A24↑j
.text:00406A30                                         ; .text:00406A41↓j
.text:00406A30                 movsx   edx, byte ptr [esi]
.text:00406A33                 inc     esi
.text:00406A34                 mov     [esp], edi
.text:00406A37                 mov     [esp+4], edx
.text:00406A3B                 call    printf
.text:00406A40                 dec     ebx
.text:00406A41                 jnz     short loc_406A30
.text:00406A43                 jmp     short loc_406A26
.text:00406A43 ; ---------------------------------------------------------------------------
.text:00406A45                 align 10h
.text:00406A50
.text:00406A50 loc_406A50:                             ; DATA XREF: sub_404A80+25D↑o
.text:00406A50                 push    edi
.text:00406A51                 push    esi
.text:00406A52                 push    ebx
.text:00406A53                 sub     esp, 10h
.text:00406A56                 mov     ebx, [esp+20h]
.text:00406A5A                 mov     edi, [esp+28h]
.text:00406A5E                 mov     esi, [esp+24h]
.text:00406A62                 test    ebx, ebx
.text:00406A64                 jnz     short loc_406A70
.text:00406A66
.text:00406A66 loc_406A66:                             ; CODE XREF: .text:00406A83↓j
.text:00406A66                 add     esp, 10h
.text:00406A69                 pop     ebx
.text:00406A6A                 pop     esi
.text:00406A6B                 pop     edi
.text:00406A6C                 retn
.text:00406A6C ; ---------------------------------------------------------------------------
.text:00406A6D                 align 10h
.text:00406A70
.text:00406A70 loc_406A70:                             ; CODE XREF: .text:00406A64↑j
.text:00406A70                                         ; .text:00406A81↓j
.text:00406A70                 movzx   edx, byte ptr [esi]
.text:00406A73                 inc     esi
.text:00406A74                 mov     [esp], edi
.text:00406A77                 mov     [esp+4], edx
.text:00406A7B                 call    printf
.text:00406A80                 dec     ebx
.text:00406A81                 jnz     short loc_406A70
.text:00406A83                 jmp     short loc_406A66
.text:00406A83 ; ---------------------------------------------------------------------------
.text:00406A85                 align 10h
.text:00406A90
.text:00406A90 loc_406A90:                             ; DATA XREF: sub_404A80+2AF↑o
.text:00406A90                 push    edi
.text:00406A91                 push    esi
.text:00406A92                 push    ebx
.text:00406A93                 sub     esp, 10h
.text:00406A96                 mov     edx, [esp+20h]
.text:00406A9A                 mov     edi, [esp+28h]
.text:00406A9E                 mov     esi, [esp+24h]
.text:00406AA2                 mov     ebx, edx
.text:00406AA4                 shr     ebx, 1
.text:00406AA6                 jnz     short loc_406AB0
.text:00406AA8
.text:00406AA8 loc_406AA8:                             ; CODE XREF: .text:00406AC5↓j
.text:00406AA8                 add     esp, 10h
.text:00406AAB                 pop     ebx
.text:00406AAC                 pop     esi
.text:00406AAD                 pop     edi
.text:00406AAE                 retn
.text:00406AAE ; ---------------------------------------------------------------------------
.text:00406AAF                 align 10h
.text:00406AB0
.text:00406AB0 loc_406AB0:                             ; CODE XREF: .text:00406AA6↑j
.text:00406AB0                                         ; .text:00406AC3↓j
.text:00406AB0                 movsx   edx, word ptr [esi]
.text:00406AB3                 add     esi, 2
.text:00406AB6                 mov     [esp], edi
.text:00406AB9                 mov     [esp+4], edx
.text:00406ABD                 call    printf
.text:00406AC2                 dec     ebx
.text:00406AC3                 jnz     short loc_406AB0
.text:00406AC5                 jmp     short loc_406AA8
.text:00406AC5 ; ---------------------------------------------------------------------------
.text:00406AC7                 align 10h
.text:00406AD0
.text:00406AD0 loc_406AD0:                             ; DATA XREF: sub_404A80+2B8↑o
.text:00406AD0                 push    edi
.text:00406AD1                 push    esi
.text:00406AD2                 push    ebx
.text:00406AD3                 sub     esp, 10h
.text:00406AD6                 mov     edx, [esp+20h]
.text:00406ADA                 mov     edi, [esp+28h]
.text:00406ADE                 mov     esi, [esp+24h]
.text:00406AE2                 mov     ebx, edx
.text:00406AE4                 shr     ebx, 1
.text:00406AE6                 jnz     short loc_406AF0
.text:00406AE8
.text:00406AE8 loc_406AE8:                             ; CODE XREF: .text:00406B05↓j
.text:00406AE8                 add     esp, 10h
.text:00406AEB                 pop     ebx
.text:00406AEC                 pop     esi
.text:00406AED                 pop     edi
.text:00406AEE                 retn
.text:00406AEE ; ---------------------------------------------------------------------------
.text:00406AEF                 align 10h
.text:00406AF0
.text:00406AF0 loc_406AF0:                             ; CODE XREF: .text:00406AE6↑j
.text:00406AF0                                         ; .text:00406B03↓j
.text:00406AF0                 movzx   edx, word ptr [esi]
.text:00406AF3                 add     esi, 2
.text:00406AF6                 mov     [esp], edi
.text:00406AF9                 mov     [esp+4], edx
.text:00406AFD                 call    printf
.text:00406B02                 dec     ebx
.text:00406B03                 jnz     short loc_406AF0
.text:00406B05                 jmp     short loc_406AE8
.text:00406B05 ; ---------------------------------------------------------------------------
.text:00406B07                 align 10h
.text:00406B10
.text:00406B10 loc_406B10:                             ; DATA XREF: sub_404A80:loc_404D3F↑o
.text:00406B10                 push    edi
.text:00406B11                 push    esi
.text:00406B12                 push    ebx
.text:00406B13                 sub     esp, 10h
.text:00406B16                 mov     edx, [esp+20h]
.text:00406B1A                 mov     edi, [esp+28h]
.text:00406B1E                 mov     esi, [esp+24h]
.text:00406B22                 mov     ebx, edx
.text:00406B24                 shr     ebx, 2
.text:00406B27                 jnz     short loc_406B30
.text:00406B29
.text:00406B29 loc_406B29:                             ; CODE XREF: .text:00406B44↓j
.text:00406B29                 add     esp, 10h
.text:00406B2C                 pop     ebx
.text:00406B2D                 pop     esi
.text:00406B2E                 pop     edi
.text:00406B2F                 retn
.text:00406B30 ; ---------------------------------------------------------------------------
.text:00406B30
.text:00406B30 loc_406B30:                             ; CODE XREF: .text:00406B27↑j
.text:00406B30                                         ; .text:00406B42↓j
.text:00406B30                 mov     edx, [esi]
.text:00406B32                 add     esi, 4
.text:00406B35                 mov     [esp], edi
.text:00406B38                 mov     [esp+4], edx
.text:00406B3C                 call    printf
.text:00406B41                 dec     ebx
.text:00406B42                 jnz     short loc_406B30
.text:00406B44                 jmp     short loc_406B29
.text:00406B44 ; ---------------------------------------------------------------------------
.text:00406B46                 align 10h
.text:00406B50
.text:00406B50 loc_406B50:                             ; DATA XREF: sub_404A80:loc_404D46↑o
.text:00406B50                 push    edi
.text:00406B51                 push    esi
.text:00406B52                 push    ebx
.text:00406B53                 sub     esp, 10h
.text:00406B56                 mov     edx, [esp+20h]
.text:00406B5A                 mov     edi, [esp+28h]
.text:00406B5E                 mov     esi, [esp+24h]
.text:00406B62                 mov     ebx, edx
.text:00406B64                 shr     ebx, 2
.text:00406B67                 jnz     short loc_406B70
.text:00406B69
.text:00406B69 loc_406B69:                             ; CODE XREF: .text:00406B84↓j
.text:00406B69                 add     esp, 10h
.text:00406B6C                 pop     ebx
.text:00406B6D                 pop     esi
.text:00406B6E                 pop     edi
.text:00406B6F                 retn
.text:00406B70 ; ---------------------------------------------------------------------------
.text:00406B70
.text:00406B70 loc_406B70:                             ; CODE XREF: .text:00406B67↑j
.text:00406B70                                         ; .text:00406B82↓j
.text:00406B70                 mov     edx, [esi]
.text:00406B72                 add     esi, 4
.text:00406B75                 mov     [esp], edi
.text:00406B78                 mov     [esp+4], edx
.text:00406B7C                 call    printf
.text:00406B81                 dec     ebx
.text:00406B82                 jnz     short loc_406B70
.text:00406B84                 jmp     short loc_406B69
.text:00406B84 ; ---------------------------------------------------------------------------
.text:00406B86                 align 10h
.text:00406B90
.text:00406B90 loc_406B90:                             ; DATA XREF: sub_404A80:loc_404D4D↑o
.text:00406B90                 push    edi
.text:00406B91                 push    esi
.text:00406B92                 push    ebx
.text:00406B93                 sub     esp, 10h
.text:00406B96                 mov     edx, [esp+20h]
.text:00406B9A                 mov     edi, [esp+28h]
.text:00406B9E                 mov     esi, [esp+24h]
.text:00406BA2                 mov     ebx, edx
.text:00406BA4                 shr     ebx, 3
.text:00406BA7                 jnz     short loc_406BB0
.text:00406BA9
.text:00406BA9 loc_406BA9:                             ; CODE XREF: .text:00406BCB↓j
.text:00406BA9                 add     esp, 10h
.text:00406BAC                 pop     ebx
.text:00406BAD                 pop     esi
.text:00406BAE                 pop     edi
.text:00406BAF                 retn
.text:00406BB0 ; ---------------------------------------------------------------------------
.text:00406BB0
.text:00406BB0 loc_406BB0:                             ; CODE XREF: .text:00406BA7↑j
.text:00406BB0                                         ; .text:00406BC9↓j
.text:00406BB0                 mov     edx, [esi]
.text:00406BB2                 mov     ecx, [esi+4]
.text:00406BB5                 add     esi, 8
.text:00406BB8                 mov     [esp+4], edx
.text:00406BBC                 mov     [esp+8], ecx
.text:00406BC0                 mov     [esp], edi
.text:00406BC3                 call    printf
.text:00406BC8                 dec     ebx
.text:00406BC9                 jnz     short loc_406BB0
.text:00406BCB                 jmp     short loc_406BA9
.text:00406BCB ; ---------------------------------------------------------------------------
.text:00406BCD                 align 10h
.text:00406BD0
.text:00406BD0 loc_406BD0:                             ; DATA XREF: sub_404A80+511↑o
.text:00406BD0                 push    edi
.text:00406BD1                 push    esi
.text:00406BD2                 push    ebx
.text:00406BD3                 sub     esp, 10h
.text:00406BD6                 mov     edx, [esp+20h]
.text:00406BDA                 mov     edi, [esp+28h]
.text:00406BDE                 mov     esi, [esp+24h]
.text:00406BE2                 mov     ebx, edx
.text:00406BE4                 shr     ebx, 2
.text:00406BE7                 jnz     short loc_406BF0
.text:00406BE9
.text:00406BE9 loc_406BE9:                             ; CODE XREF: .text:00406C04↓j
.text:00406BE9                 add     esp, 10h
.text:00406BEC                 pop     ebx
.text:00406BED                 pop     esi
.text:00406BEE                 pop     edi
.text:00406BEF                 retn
.text:00406BF0 ; ---------------------------------------------------------------------------
.text:00406BF0
.text:00406BF0 loc_406BF0:                             ; CODE XREF: .text:00406BE7↑j
.text:00406BF0                                         ; .text:00406C02↓j
.text:00406BF0                 fld     dword ptr [esi]
.text:00406BF2                 add     esi, 4
.text:00406BF5                 mov     [esp], edi
.text:00406BF8                 fstp    qword ptr [esp+4]
.text:00406BFC                 call    printf
.text:00406C01                 dec     ebx
.text:00406C02                 jnz     short loc_406BF0
.text:00406C04                 jmp     short loc_406BE9
.text:00406C04 ; ---------------------------------------------------------------------------
.text:00406C06                 align 10h
.text:00406C10
.text:00406C10 loc_406C10:                             ; DATA XREF: sub_404A80:loc_404FDD↑o
.text:00406C10                 push    edi
.text:00406C11                 push    esi
.text:00406C12                 push    ebx
.text:00406C13                 sub     esp, 10h
.text:00406C16                 mov     edx, [esp+20h]
.text:00406C1A                 mov     edi, [esp+28h]
.text:00406C1E                 mov     esi, [esp+24h]
.text:00406C22                 mov     ebx, edx
.text:00406C24                 shr     ebx, 3
.text:00406C27                 jnz     short loc_406C30
.text:00406C29
.text:00406C29 loc_406C29:                             ; CODE XREF: .text:00406C44↓j
.text:00406C29                 add     esp, 10h
.text:00406C2C                 pop     ebx
.text:00406C2D                 pop     esi
.text:00406C2E                 pop     edi
.text:00406C2F                 retn
.text:00406C30 ; ---------------------------------------------------------------------------
.text:00406C30
.text:00406C30 loc_406C30:                             ; CODE XREF: .text:00406C27↑j
.text:00406C30                                         ; .text:00406C42↓j
.text:00406C30                 fld     qword ptr [esi]
.text:00406C32                 add     esi, 8
.text:00406C35                 mov     [esp], edi
.text:00406C38                 fstp    qword ptr [esp+4]
.text:00406C3C                 call    printf
.text:00406C41                 dec     ebx
.text:00406C42                 jnz     short loc_406C30
.text:00406C44                 jmp     short loc_406C29
.text:00406C44 ; ---------------------------------------------------------------------------
.text:00406C46                 align 10h
.text:00406C50
.text:00406C50 loc_406C50:                             ; DATA XREF: sub_404A80+54C↑o
.text:00406C50                 push    edi
.text:00406C51                 mov     eax, 0AAAAAAABh
.text:00406C56                 push    esi
.text:00406C57                 push    ebx
.text:00406C58                 sub     esp, 10h
.text:00406C5B                 mov     edi, [esp+28h]
.text:00406C5F                 mul     dword ptr [esp+20h]
.text:00406C63                 mov     esi, [esp+24h]
.text:00406C67                 mov     ebx, edx
.text:00406C69                 shr     ebx, 3
.text:00406C6C                 jnz     short loc_406C75
.text:00406C6E
.text:00406C6E loc_406C6E:                             ; CODE XREF: .text:00406C97↓j
.text:00406C6E                 add     esp, 10h
.text:00406C71                 pop     ebx
.text:00406C72                 pop     esi
.text:00406C73                 pop     edi
.text:00406C74                 retn
.text:00406C75 ; ---------------------------------------------------------------------------
.text:00406C75
.text:00406C75 loc_406C75:                             ; CODE XREF: .text:00406C6C↑j
.text:00406C75                                         ; .text:00406C95↓j
.text:00406C75                 mov     eax, [esi]
.text:00406C77                 mov     edx, [esi+4]
.text:00406C7A                 mov     ecx, [esi+8]
.text:00406C7D                 mov     [esp+4], eax
.text:00406C81                 add     esi, 0Ch
.text:00406C84                 mov     [esp+8], edx
.text:00406C88                 mov     [esp+0Ch], ecx
.text:00406C8C                 mov     [esp], edi
.text:00406C8F                 call    printf
.text:00406C94                 dec     ebx
.text:00406C95                 jnz     short loc_406C75
.text:00406C97                 jmp     short loc_406C6E
.text:00406C97 ; ---------------------------------------------------------------------------
.text:00406C99 byte_406C99     db 64h, 65h, 6Ch        ; DATA XREF: .text:00406CD3↓o
.text:00406C9C                 dd 33252000h, 20200073h, 89006325h, 27BC8DF6h, 0
.text:00406CB0 ; ---------------------------------------------------------------------------
.text:00406CB0
.text:00406CB0 loc_406CB0:                             ; DATA XREF: sub_404A80+41E↑o
.text:00406CB0                 push    edi
.text:00406CB1                 push    esi
.text:00406CB2                 push    ebx
.text:00406CB3                 sub     esp, 20h
.text:00406CB6                 mov     ebx, [esp+30h]
.text:00406CBA                 mov     esi, [esp+34h]
.text:00406CBE                 test    ebx, ebx
.text:00406CC0                 jz      short loc_406D00
.text:00406CC2                 lea     edi, [esp+10h]
.text:00406CC6                 lea     esi, [esi+0]
.text:00406CC9                 lea     edi, [edi+0]
.text:00406CD0
.text:00406CD0 loc_406CD0:                             ; CODE XREF: .text:00406CFE↓j
.text:00406CD0                 movzx   eax, byte ptr [esi]
.text:00406CD3                 mov     edx, offset byte_406C99
.text:00406CD8                 inc     esi
.text:00406CD9                 and     eax, 7Fh
.text:00406CDC                 cmp     eax, 7Fh
.text:00406CDF                 jz      short loc_406CED
.text:00406CE1                 cmp     eax, 20h ; ' '
.text:00406CE4                 jg      short loc_406D07
.text:00406CE6                 mov     edx, ds:off_401380[eax*4]
.text:00406CED
.text:00406CED loc_406CED:                             ; CODE XREF: .text:00406CDF↑j
.text:00406CED                                         ; .text:00406D1D↓j
.text:00406CED                 mov     [esp+4], edx
.text:00406CF1                 mov     dword ptr [esp], 406C9Dh
.text:00406CF8                 call    printf
.text:00406CFD                 dec     ebx
.text:00406CFE                 jnz     short loc_406CD0
.text:00406D00
.text:00406D00 loc_406D00:                             ; CODE XREF: .text:00406CC0↑j
.text:00406D00                 add     esp, 20h
.text:00406D03                 pop     ebx
.text:00406D04                 pop     esi
.text:00406D05                 pop     edi
.text:00406D06                 retn
.text:00406D07 ; ---------------------------------------------------------------------------
.text:00406D07
.text:00406D07 loc_406D07:                             ; CODE XREF: .text:00406CE4↑j
.text:00406D07                 mov     [esp+8], eax
.text:00406D0B                 mov     dword ptr [esp+4], 406CA2h
.text:00406D13                 mov     [esp], edi
.text:00406D16                 call    sprintf
.text:00406D1B                 mov     edx, edi
.text:00406D1D                 jmp     short loc_406CED
.text:00406D1F ; ---------------------------------------------------------------------------
.text:00406D1F
.text:00406D1F loc_406D1F:                             ; DATA XREF: .text:loc_406DBC↓o
.text:00406D1F                 and     [eax+esi+0], bl
.text:00406D23
.text:00406D23 loc_406D23:                             ; DATA XREF: .text:00406E17↓o
.text:00406D23                 and     eax, 6F3330h
.text:00406D28
.text:00406D28 loc_406D28:                             ; DATA XREF: .text:loc_406E49↓o
.text:00406D28                 and     [ecx+0], bl
.text:00406D2C
.text:00406D2C loc_406D2C:                             ; DATA XREF: .text:loc_406E50↓o
.text:00406D2C                 and     [edx+0], bl
.text:00406D30
.text:00406D30 loc_406D30:                             ; DATA XREF: .text:loc_406E5A↓o
.text:00406D30                 and     [esp+esi*2+0], bl
.text:00406D34
.text:00406D34 loc_406D34:                             ; DATA XREF: .text:loc_406E64↓o
.text:00406D34                 and     [esi+ebp*2+0], bl
.text:00406D38
.text:00406D38 loc_406D38:                             ; DATA XREF: .text:loc_406E6E↓o
.text:00406D38                 and     [esi+esi*2+0], bl
.text:00406D3C
.text:00406D3C loc_406D3C:                             ; DATA XREF: .text:loc_406E78↓o
.text:00406D3C                 and     [esi+0], bl
.text:00406D40
.text:00406D40 loc_406D40:                             ; DATA XREF: .text:loc_406E82↓o
.text:00406D40                 and     [edx+esi*2+0], bl
.text:00406D44                 lea     esi, [esi+0]
.text:00406D4A                 lea     edi, [edi+0]
.text:00406D50
.text:00406D50 loc_406D50:                             ; DATA XREF: sub_404A80+43E↑o
.text:00406D50                 push    edi
.text:00406D51                 push    esi
.text:00406D52                 push    ebx
.text:00406D53                 sub     esp, 20h
.text:00406D56                 mov     esi, [esp+30h]
.text:00406D5A                 mov     edi, [esp+34h]
.text:00406D5E                 test    esi, esi
.text:00406D60                 jz      loc_406DE3
.text:00406D66                 lea     esi, [esi+0]
.text:00406D69                 lea     edi, [edi+0]
.text:00406D70
.text:00406D70 loc_406D70:                             ; CODE XREF: .text:00406DE1↓j
.text:00406D70                 movzx   ebx, byte ptr [edi]
.text:00406D73                 inc     edi
.text:00406D74                 movzx   eax, bl
.text:00406D77                 cmp     eax, 0Dh        ; switch 14 cases
.text:00406D7A                 ja      short def_406D7C ; jumptable 00406D7C default case, cases 1-6
.text:00406D7C                 jmp     ds:jpt_406D7C[eax*4] ; switch jump
.text:00406D7C ; ---------------------------------------------------------------------------
.text:00406D83                 align 4
.text:00406D84 jpt_406D7C      dd offset loc_406DBC    ; DATA XREF: .text:00406D7C↑r
.text:00406D84                 dd offset def_406D7C    ; jump table for switch statement
.text:00406D84                 dd offset def_406D7C
.text:00406D84                 dd offset def_406D7C
.text:00406D84                 dd offset def_406D7C
.text:00406D84                 dd offset def_406D7C
.text:00406D84                 dd offset def_406D7C
.text:00406D84                 dd offset loc_406E49
.text:00406D84                 dd offset loc_406E50
.text:00406D84                 dd offset loc_406E5A
.text:00406D84                 dd offset loc_406E64
.text:00406D84                 dd offset loc_406E6E
.text:00406D84                 dd offset loc_406E78
.text:00406D84                 dd offset loc_406E82
.text:00406DBC ; ---------------------------------------------------------------------------
.text:00406DBC
.text:00406DBC loc_406DBC:                             ; CODE XREF: .text:00406D7C↑j
.text:00406DBC                                         ; DATA XREF: .text:jpt_406D7C↑o
.text:00406DBC                 mov     eax, offset loc_406D1F ; jumptable 00406D7C case 0
.text:00406DC1                 jmp     short loc_406DD0
.text:00406DC1 ; ---------------------------------------------------------------------------
.text:00406DC3                 align 10h
.text:00406DD0
.text:00406DD0 loc_406DD0:                             ; CODE XREF: .text:00406DC1↑j
.text:00406DD0                                         ; .text:00406E35↓j ...
.text:00406DD0                 mov     [esp+4], eax
.text:00406DD4                 mov     dword ptr [esp], 406C9Dh
.text:00406DDB                 call    printf
.text:00406DE0                 dec     esi
.text:00406DE1                 jnz     short loc_406D70
.text:00406DE3
.text:00406DE3 loc_406DE3:                             ; CODE XREF: .text:00406D60↑j
.text:00406DE3                 add     esp, 20h
.text:00406DE6                 pop     ebx
.text:00406DE7                 pop     esi
.text:00406DE8                 pop     edi
.text:00406DE9                 retn
.text:00406DE9 ; ---------------------------------------------------------------------------
.text:00406DEA                 align 10h
.text:00406DF0
.text:00406DF0 def_406D7C:                             ; CODE XREF: .text:00406D7A↑j
.text:00406DF0                                         ; .text:00406D7C↑j
.text:00406DF0                                         ; DATA XREF: ...
.text:00406DF0                 mov     ecx, ds:__mb_cur_max ; jumptable 00406D7C default case, cases 1-6
.text:00406DF6                 movzx   edx, bl
.text:00406DF9                 cmp     dword ptr [ecx], 1
.text:00406DFC                 jz      short loc_406E37
.text:00406DFE                 mov     dword ptr [esp+4], 157h
.text:00406E06                 mov     [esp], edx
.text:00406E09                 call    _isctype
.text:00406E0E
.text:00406E0E loc_406E0E:                             ; CODE XREF: .text:00406E47↓j
.text:00406E0E                 test    eax, eax
.text:00406E10                 mov     edx, 406CA2h
.text:00406E15                 jnz     short loc_406E1C
.text:00406E17                 mov     edx, offset loc_406D23
.text:00406E1C
.text:00406E1C loc_406E1C:                             ; CODE XREF: .text:00406E15↑j
.text:00406E1C                 mov     [esp+4], edx
.text:00406E20                 movzx   ecx, bl
.text:00406E23                 lea     ebx, [esp+10h]
.text:00406E27                 mov     [esp+8], ecx
.text:00406E2B                 mov     [esp], ebx
.text:00406E2E                 call    sprintf
.text:00406E33                 mov     eax, ebx
.text:00406E35                 jmp     short loc_406DD0
.text:00406E37 ; ---------------------------------------------------------------------------
.text:00406E37
.text:00406E37 loc_406E37:                             ; CODE XREF: .text:00406DFC↑j
.text:00406E37                 mov     eax, ds:_pctype
.text:00406E3C                 mov     ecx, [eax]
.text:00406E3E                 movzx   eax, word ptr [ecx+edx*2]
.text:00406E42                 and     eax, 157h
.text:00406E47                 jmp     short loc_406E0E
.text:00406E49 ; ---------------------------------------------------------------------------
.text:00406E49
.text:00406E49 loc_406E49:                             ; CODE XREF: .text:00406D7C↑j
.text:00406E49                                         ; DATA XREF: .text:jpt_406D7C↑o
.text:00406E49                 mov     eax, offset loc_406D28 ; jumptable 00406D7C case 7
.text:00406E4E                 jmp     short loc_406DD0
.text:00406E50 ; ---------------------------------------------------------------------------
.text:00406E50
.text:00406E50 loc_406E50:                             ; CODE XREF: .text:00406D7C↑j
.text:00406E50                                         ; DATA XREF: .text:jpt_406D7C↑o
.text:00406E50                 mov     eax, offset loc_406D2C ; jumptable 00406D7C case 8
.text:00406E55                 jmp     loc_406DD0
.text:00406E5A ; ---------------------------------------------------------------------------
.text:00406E5A
.text:00406E5A loc_406E5A:                             ; CODE XREF: .text:00406D7C↑j
.text:00406E5A                                         ; DATA XREF: .text:jpt_406D7C↑o
.text:00406E5A                 mov     eax, offset loc_406D30 ; jumptable 00406D7C case 9
.text:00406E5F                 jmp     loc_406DD0
.text:00406E64 ; ---------------------------------------------------------------------------
.text:00406E64
.text:00406E64 loc_406E64:                             ; CODE XREF: .text:00406D7C↑j
.text:00406E64                                         ; DATA XREF: .text:jpt_406D7C↑o
.text:00406E64                 mov     eax, offset loc_406D34 ; jumptable 00406D7C case 10
.text:00406E69                 jmp     loc_406DD0
.text:00406E6E ; ---------------------------------------------------------------------------
.text:00406E6E
.text:00406E6E loc_406E6E:                             ; CODE XREF: .text:00406D7C↑j
.text:00406E6E                                         ; DATA XREF: .text:jpt_406D7C↑o
.text:00406E6E                 mov     eax, offset loc_406D38 ; jumptable 00406D7C case 11
.text:00406E73                 jmp     loc_406DD0
.text:00406E78 ; ---------------------------------------------------------------------------
.text:00406E78
.text:00406E78 loc_406E78:                             ; CODE XREF: .text:00406D7C↑j
.text:00406E78                                         ; DATA XREF: .text:jpt_406D7C↑o
.text:00406E78                 mov     eax, offset loc_406D3C ; jumptable 00406D7C case 12
.text:00406E7D                 jmp     loc_406DD0
.text:00406E82 ; ---------------------------------------------------------------------------
.text:00406E82
.text:00406E82 loc_406E82:                             ; CODE XREF: .text:00406D7C↑j
.text:00406E82                                         ; DATA XREF: .text:jpt_406D7C↑o
.text:00406E82                 mov     eax, offset loc_406D40 ; jumptable 00406D7C case 13
.text:00406E87                 jmp     loc_406DD0
.text:00406E87 ; ---------------------------------------------------------------------------
.text:00406E8C ; const char aS_3[4]
.text:00406E8C aS_3            db '%*s',0              ; DATA XREF: sub_406EA0+13D↓o
.text:00406E8C                                         ; sub_406EA0+263↓o
.text:00406E90 asc_406E90      db '  >',0              ; DATA XREF: sub_406EA0+171↓o
.text:00406E94 ; const char Buffer[2]
.text:00406E94 Buffer          db '*',0                ; DATA XREF: sub_406EA0+296↓o
.text:00406E96                 align 10h
.text:00406EA0
.text:00406EA0 ; =============== S U B R O U T I N E =======================================
.text:00406EA0
.text:00406EA0
.text:00406EA0 sub_406EA0      proc near               ; CODE XREF: sub_405980+12D↑p
.text:00406EA0                                         ; sub_405980+230↑p ...
.text:00406EA0
.text:00406EA0 Format          = dword ptr -3Ch
.text:00406EA0 File            = dword ptr -38h
.text:00406EA0 ElementCount    = dword ptr -34h
.text:00406EA0 Stream          = dword ptr -30h
.text:00406EA0 var_20          = dword ptr -20h
.text:00406EA0 var_1C          = dword ptr -1Ch
.text:00406EA0 var_18          = dword ptr -18h
.text:00406EA0 arg_0           = dword ptr  4
.text:00406EA0 arg_4           = dword ptr  8
.text:00406EA0 arg_8           = dword ptr  0Ch
.text:00406EA0 arg_C           = dword ptr  10h
.text:00406EA0 arg_10          = dword ptr  14h
.text:00406EA0
.text:00406EA0                 push    ebp
.text:00406EA1                 push    edi
.text:00406EA2                 push    esi
.text:00406EA3                 push    ebx
.text:00406EA4                 sub     esp, 2Ch
.text:00406EA7                 mov     edx, [esp+3Ch+arg_0]
.text:00406EAB                 cmp     byte_414010, 0
.text:00406EB2                 mov     ecx, [esp+3Ch+arg_4]
.text:00406EB6                 mov     esi, [esp+3Ch+arg_C]
.text:00406EBA                 mov     [esp+3Ch+var_1C], edx
.text:00406EBE                 mov     [esp+3Ch+var_18], ecx
.text:00406EC2                 jz      short loc_406EDD
.text:00406EC4                 cmp     byte_414011, 0
.text:00406ECB                 jnz     short loc_406EDD
.text:00406ECD                 mov     edx, [esp+3Ch+arg_8]
.text:00406ED1                 cmp     edx, ds:dword_415100
.text:00406ED7                 jz      loc_407118
.text:00406EDD
.text:00406EDD loc_406EDD:                             ; CODE XREF: sub_406EA0+22↑j
.text:00406EDD                                         ; sub_406EA0+2B↑j ...
.text:00406EDD                 mov     ds:byte_415020, 0
.text:00406EE4                 xor     ecx, ecx
.text:00406EE6                 cmp     ecx, ds:dword_4150E0
.text:00406EEC                 mov     [esp+3Ch+var_20], 0
.text:00406EF4                 jnb     loc_406F8E
.text:00406EFA                 xor     ebp, ebp
.text:00406EFC                 lea     esi, [esi+0]
.text:00406F00
.text:00406F00 loc_406F00:                             ; CODE XREF: sub_406EA0+E8↓j
.text:00406F00                 mov     eax, [esp+3Ch+var_20]
.text:00406F04                 test    eax, eax
.text:00406F06                 jnz     loc_4070F5
.text:00406F0C                 mov     [esp+3Ch+ElementCount], 0
.text:00406F14                 mov     esi, [esp+3Ch+var_1C]
.text:00406F18                 mov     ebx, [esp+3Ch+var_18]
.text:00406F1C                 mov     [esp+3Ch+Format], esi
.text:00406F1F                 mov     [esp+3Ch+File], ebx
.text:00406F23                 call    ds:dword_4150A0
.text:00406F29
.text:00406F29 loc_406F29:                             ; CODE XREF: sub_406EA0+273↓j
.text:00406F29                 mov     ecx, ds:dword_4150D0
.text:00406F2F                 mov     ebx, [esp+3Ch+arg_10]
.text:00406F33                 mov     edx, [esp+3Ch+arg_8]
.text:00406F37                 lea     esi, [ebp+ecx+0Ch]
.text:00406F3B                 mov     [esp+3Ch+ElementCount], esi
.text:00406F3F                 mov     [esp+3Ch+File], ebx
.text:00406F43                 mov     [esp+3Ch+Format], edx
.text:00406F46                 call    dword ptr [ecx+ebp+8]
.text:00406F4A                 mov     ecx, ds:dword_4150D0
.text:00406F50                 cmp     byte ptr [ecx+ebp+28h], 0
.text:00406F55                 jnz     short loc_406FB8
.text:00406F57
.text:00406F57 loc_406F57:                             ; CODE XREF: sub_406EA0+200↓j
.text:00406F57                                         ; sub_406EA0+21E↓j
.text:00406F57                 mov     edi, ds:_iob
.text:00406F5D                 mov     ebx, [edi+24h]
.text:00406F60                 dec     ebx
.text:00406F61                 mov     [edi+24h], ebx
.text:00406F64                 test    ebx, ebx
.text:00406F66                 js      short loc_406F9D
.text:00406F68                 mov     esi, ds:_iob
.text:00406F6E                 mov     ecx, [esi+20h]
.text:00406F71                 mov     byte ptr [ecx], 0Ah
.text:00406F74                 inc     dword ptr [esi+20h]
.text:00406F77
.text:00406F77 loc_406F77:                             ; CODE XREF: sub_406EA0+116↓j
.text:00406F77                 inc     [esp+3Ch+var_20]
.text:00406F7B                 add     ebp, 30h ; '0'
.text:00406F7E                 mov     ebx, [esp+3Ch+var_20]
.text:00406F82                 cmp     ebx, ds:dword_4150E0
.text:00406F88                 jb      loc_406F00
.text:00406F8E
.text:00406F8E loc_406F8E:                             ; CODE XREF: sub_406EA0+54↑j
.text:00406F8E                                         ; sub_406EA0+290↓j ...
.text:00406F8E                 mov     byte_414011, 0
.text:00406F95                 add     esp, 2Ch
.text:00406F98                 pop     ebx
.text:00406F99                 pop     esi
.text:00406F9A                 pop     edi
.text:00406F9B                 pop     ebp
.text:00406F9C                 retn
.text:00406F9D ; ---------------------------------------------------------------------------
.text:00406F9D
.text:00406F9D loc_406F9D:                             ; CODE XREF: sub_406EA0+C6↑j
.text:00406F9D                 mov     [esp+3Ch+Format], 0Ah ; Ch
.text:00406FA4                 mov     edx, ds:_iob
.text:00406FAA                 add     edx, 20h ; ' '
.text:00406FAD                 mov     [esp+3Ch+File], edx ; File
.text:00406FB1                 call    _flsbuf
.text:00406FB6                 jmp     short loc_406F77
.text:00406FB8 ; ---------------------------------------------------------------------------
.text:00406FB8
.text:00406FB8 loc_406FB8:                             ; CODE XREF: sub_406EA0+B5↑j
.text:00406FB8                 mov     eax, ds:dword_415100
.text:00406FBD                 xor     edx, edx
.text:00406FBF                 mov     ebx, [esp+3Ch+arg_8]
.text:00406FC3                 mov     esi, [ecx+ebp+4]
.text:00406FC7                 mov     edi, [ecx+ebp+2Ch]
.text:00406FCB                 sub     eax, ebx
.text:00406FCD                 div     ds:dword_4012E0[esi*4]
.text:00406FD4                 inc     edi
.text:00406FD5                 mov     [esp+3Ch+ElementCount], offset Locale
.text:00406FDD                 mov     [esp+3Ch+Format], offset aS_3 ; "%*s"
.text:00406FE4                 imul    eax, edi
.text:00406FE7                 mov     [esp+3Ch+File], eax
.text:00406FEB                 call    printf
.text:00406FF0                 mov     [esp+3Ch+ElementCount], 3 ; ElementCount
.text:00406FF8                 mov     ecx, ds:_iob
.text:00406FFE                 mov     edi, [esp+3Ch+arg_10]
.text:00407002                 mov     [esp+3Ch+File], 1 ; ElementSize
.text:0040700A                 add     ecx, 20h ; ' '
.text:0040700D                 mov     [esp+3Ch+Stream], ecx ; Stream
.text:00407011                 mov     [esp+3Ch+Format], offset asc_406E90 ; Buffer
.text:00407018                 call    fwrite
.text:0040701D                 mov     esi, [esp+3Ch+arg_8]
.text:00407021                 test    esi, esi
.text:00407023                 jz      short loc_407080
.text:00407025                 lea     esi, [esi+0]
.text:00407029                 lea     edi, [edi+0]
.text:00407030
.text:00407030 loc_407030:                             ; CODE XREF: sub_406EA0+1DE↓j
.text:00407030                 movzx   ebx, byte ptr [edi]
.text:00407033                 inc     edi
.text:00407034                 mov     ecx, ds:__mb_cur_max
.text:0040703A                 cmp     dword ptr [ecx], 1
.text:0040703D                 movzx   edx, bl
.text:00407040                 jz      loc_4070E0
.text:00407046                 mov     [esp+3Ch+File], 157h ; Type
.text:0040704E                 mov     [esp+3Ch+Format], edx ; C
.text:00407051                 call    _isctype
.text:00407056
.text:00407056 loc_407056:                             ; CODE XREF: sub_406EA0+250↓j
.text:00407056                 test    eax, eax
.text:00407058                 mov     cl, bl
.text:0040705A                 jnz     short loc_40705E
.text:0040705C                 mov     cl, 2Eh ; '.'
.text:0040705E
.text:0040705E loc_40705E:                             ; CODE XREF: sub_406EA0+1BA↑j
.text:0040705E                 mov     edx, ds:_iob
.text:00407064                 mov     ebx, [edx+24h]
.text:00407067                 dec     ebx
.text:00407068                 mov     [edx+24h], ebx
.text:0040706B                 test    ebx, ebx
.text:0040706D                 js      short loc_4070C3
.text:0040706F                 mov     ebx, ds:_iob
.text:00407075                 mov     eax, [ebx+20h]
.text:00407078                 mov     [eax], cl
.text:0040707A                 inc     dword ptr [ebx+20h]
.text:0040707D
.text:0040707D loc_40707D:                             ; CODE XREF: sub_406EA0+23B↓j
.text:0040707D                 dec     esi
.text:0040707E                 jnz     short loc_407030
.text:00407080
.text:00407080 loc_407080:                             ; CODE XREF: sub_406EA0+183↑j
.text:00407080                 mov     esi, ds:_iob
.text:00407086                 mov     edi, [esi+24h]
.text:00407089                 dec     edi
.text:0040708A                 mov     [esi+24h], edi
.text:0040708D                 test    edi, edi
.text:0040708F                 js      short loc_4070A5
.text:00407091                 mov     ecx, ds:_iob
.text:00407097                 mov     eax, [ecx+20h]
.text:0040709A                 mov     byte ptr [eax], 3Ch ; '<'
.text:0040709D                 inc     dword ptr [ecx+20h]
.text:004070A0                 jmp     loc_406F57
.text:004070A5 ; ---------------------------------------------------------------------------
.text:004070A5
.text:004070A5 loc_4070A5:                             ; CODE XREF: sub_406EA0+1EF↑j
.text:004070A5                 mov     [esp+3Ch+Format], 3Ch ; '<' ; Ch
.text:004070AC                 mov     edx, ds:_iob
.text:004070B2                 add     edx, 20h ; ' '
.text:004070B5                 mov     [esp+3Ch+File], edx ; File
.text:004070B9                 call    _flsbuf
.text:004070BE                 jmp     loc_406F57
.text:004070C3 ; ---------------------------------------------------------------------------
.text:004070C3
.text:004070C3 loc_4070C3:                             ; CODE XREF: sub_406EA0+1CD↑j
.text:004070C3                 mov     ebx, ds:_iob
.text:004070C9                 movzx   edx, cl
.text:004070CC                 mov     [esp+3Ch+Format], edx ; Ch
.text:004070CF                 add     ebx, 20h ; ' '
.text:004070D2                 mov     [esp+3Ch+File], ebx ; File
.text:004070D6                 call    _flsbuf
.text:004070DB                 jmp     short loc_40707D
.text:004070DB ; ---------------------------------------------------------------------------
.text:004070DD                 align 10h
.text:004070E0
.text:004070E0 loc_4070E0:                             ; CODE XREF: sub_406EA0+1A0↑j
.text:004070E0                 mov     eax, ds:_pctype
.text:004070E5                 mov     ecx, [eax]
.text:004070E7                 movzx   eax, word ptr [ecx+edx*2]
.text:004070EB                 and     eax, 157h
.text:004070F0                 jmp     loc_407056
.text:004070F5 ; ---------------------------------------------------------------------------
.text:004070F5
.text:004070F5 loc_4070F5:                             ; CODE XREF: sub_406EA0+66↑j
.text:004070F5                 mov     [esp+3Ch+ElementCount], offset Locale
.text:004070FD                 mov     edi, ds:dword_415040
.text:00407103                 mov     [esp+3Ch+Format], offset aS_3 ; "%*s"
.text:0040710A                 mov     [esp+3Ch+File], edi
.text:0040710E                 call    printf
.text:00407113                 jmp     loc_406F29
.text:00407118 ; ---------------------------------------------------------------------------
.text:00407118
.text:00407118 loc_407118:                             ; CODE XREF: sub_406EA0+37↑j
.text:00407118                 cld
.text:00407119                 mov     edi, [esp+3Ch+arg_10]
.text:0040711D                 mov     ecx, edx
.text:0040711F                 cmp     edx, edx
.text:00407121                 repe cmpsb
.text:00407123                 jnz     loc_406EDD
.text:00407129                 cmp     ds:byte_415020, 0
.text:00407130                 jnz     loc_406F8E
.text:00407136                 mov     [esp+3Ch+Format], offset Buffer ; "*"
.text:0040713D                 call    puts
.text:00407142                 mov     ds:byte_415020, 1
.text:00407149                 jmp     loc_406F8E
.text:00407149 sub_406EA0      endp
.text:00407149
.text:00407149 ; ---------------------------------------------------------------------------
.text:0040714E                 align 20h
.text:00407160 dword_407160    dd 90002D2Dh, 7 dup(90909090h)
.text:00407160                                         ; DATA XREF: sub_4073B0+E4↓o
.text:00407180 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00407180                                         ; DATA XREF: sub_4073B0+2FC↓o
.text:004071AD                 align 20h
.text:004071C0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004071C0                                         ; DATA XREF: sub_4073B0:loc_407712↓o
.text:004071ED                 align 20h
.text:00407200 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00407200                                         ; DATA XREF: sub_4073B0:loc_4077B0↓o
.text:00407200                                         ; sub_4073B0:loc_407B77↓o
.text:00407226                 align 20h
.text:00407240 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00407240                                         ; DATA XREF: sub_4073B0+48E↓o
.text:00407260 dword_407260    dd 90909000h, 7 dup(90909090h)
.text:00407260                                         ; DATA XREF: sub_4073B0:loc_407881↓o
.text:00407280 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00407280                                         ; DATA XREF: sub_4073B0:loc_40789A↓o
.text:004072A0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004072A0                                         ; DATA XREF: sub_4073B0:loc_40797F↓o
.text:004072A0                                         ; sub_4073B0:loc_407CAC↓o
.text:004072C7                 align 20h
.text:004072E0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004072E0                                         ; DATA XREF: sub_4073B0:loc_407AF3↓o
.text:0040730E                 align 20h
.text:00407320 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00407320                                         ; DATA XREF: sub_4073B0:loc_407BDF↓o
.text:00407341 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00407341                                         ; DATA XREF: sub_4073B0+93F↓o
.text:0040735B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040735B                                         ; DATA XREF: sub_4073B0:loc_407D27↓o
.text:00407375 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00407375                                         ; DATA XREF: sub_4073B0:loc_407D4E↓o
.text:00407393 ; const char VarName[]
.text:00407393 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4073B0:loc_407F00↓o
.text:004073A3                 align 10h
.text:004073B0
.text:004073B0 ; =============== S U B R O U T I N E =======================================
.text:004073B0
.text:004073B0
.text:004073B0 ; int __cdecl sub_4073B0(int, int, char *Str, int, int, int, int, int)
.text:004073B0 sub_4073B0      proc near               ; CODE XREF: sub_407F40+5A↓p
.text:004073B0                                         ; .text:0040802A↓p ...
.text:004073B0
.text:004073B0 Str1            = dword ptr -5Ch
.text:004073B0 Str2            = dword ptr -58h
.text:004073B0 MaxCount        = dword ptr -54h
.text:004073B0 var_50          = dword ptr -50h
.text:004073B0 var_4C          = dword ptr -4Ch
.text:004073B0 var_3C          = dword ptr -3Ch
.text:004073B0 var_38          = dword ptr -38h
.text:004073B0 var_34          = dword ptr -34h
.text:004073B0 var_30          = dword ptr -30h
.text:004073B0 var_2C          = dword ptr -2Ch
.text:004073B0 var_28          = dword ptr -28h
.text:004073B0 var_24          = dword ptr -24h
.text:004073B0 var_20          = dword ptr -20h
.text:004073B0 var_1C          = dword ptr -1Ch
.text:004073B0 var_18          = dword ptr -18h
.text:004073B0 var_14          = dword ptr -14h
.text:004073B0 arg_0           = dword ptr  4
.text:004073B0 arg_4           = dword ptr  8
.text:004073B0 Str             = dword ptr  0Ch
.text:004073B0 arg_C           = dword ptr  10h
.text:004073B0 arg_10          = dword ptr  14h
.text:004073B0 arg_14          = dword ptr  18h
.text:004073B0 arg_18          = dword ptr  1Ch
.text:004073B0 arg_1C          = dword ptr  20h
.text:004073B0
.text:004073B0                 push    ebp
.text:004073B1                 mov     eax, 0FFFFFFFFh
.text:004073B6                 push    edi
.text:004073B7                 push    esi
.text:004073B8                 push    ebx
.text:004073B9                 sub     esp, 4Ch
.text:004073BC                 mov     esi, [esp+5Ch+Str]
.text:004073C0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004073C4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004073C7                 mov     ebx, [ebp+4]
.text:004073CA                 setz    dl
.text:004073CD                 movzx   ecx, dl
.text:004073D0                 dec     ecx
.text:004073D1                 and     ecx, ebx
.text:004073D3                 mov     [esp+5Ch+var_14], ecx
.text:004073D7                 mov     ecx, [esp+5Ch+arg_0]
.text:004073DB                 test    ecx, ecx
.text:004073DD                 jle     loc_407507
.text:004073E3                 mov     dword ptr [ebp+0Ch], 0
.text:004073EA                 mov     ebx, [ebp+0]
.text:004073ED                 test    ebx, ebx
.text:004073EF                 jz      loc_407F20
.text:004073F5                 mov     edi, [ebp+10h]
.text:004073F8                 test    edi, edi
.text:004073FA                 jnz     short loc_407453
.text:004073FC                 lea     esi, [esi+0]
.text:00407400
.text:00407400 loc_407400:                             ; CODE XREF: sub_4073B0+B7C↓j
.text:00407400                 mov     [ebp+24h], ebx
.text:00407403                 mov     esi, [esp+5Ch+Str]
.text:00407407                 mov     [ebp+20h], ebx
.text:0040740A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040740E                 xor     ebx, ebx
.text:00407410                 mov     dword ptr [ebp+14h], 0
.text:00407417                 test    ecx, ecx
.text:00407419                 jz      loc_407F00
.text:0040741F
.text:0040741F loc_40741F:                             ; CODE XREF: sub_4073B0+B64↓j
.text:0040741F                 mov     ebx, 1
.text:00407424
.text:00407424 loc_407424:                             ; CODE XREF: sub_4073B0+B5E↓j
.text:00407424                 mov     [ebp+1Ch], ebx
.text:00407427                 mov     ecx, [esp+5Ch+Str]
.text:0040742B                 movzx   eax, byte ptr [ecx]
.text:0040742E                 cmp     al, 2Dh ; '-'
.text:00407430                 jz      loc_407EF0
.text:00407436                 cmp     al, 2Bh ; '+'
.text:00407438                 jz      loc_407ED9
.text:0040743E                 xor     edx, edx
.text:00407440                 test    ebx, ebx
.text:00407442                 setz    dl
.text:00407445                 mov     [ebp+18h], edx
.text:00407448
.text:00407448 loc_407448:                             ; CODE XREF: sub_4073B0+B35↓j
.text:00407448                 mov     [esp+5Ch+Str], esi
.text:0040744C                 mov     dword ptr [ebp+10h], 1
.text:00407453
.text:00407453 loc_407453:                             ; CODE XREF: sub_4073B0+4A↑j
.text:00407453                 mov     eax, [ebp+14h]
.text:00407456                 test    eax, eax
.text:00407458                 jz      short loc_407463
.text:0040745A                 cmp     byte ptr [eax], 0
.text:0040745D                 jnz     loc_407540
.text:00407463
.text:00407463 loc_407463:                             ; CODE XREF: sub_4073B0+A8↑j
.text:00407463                 mov     ebx, [ebp+0]
.text:00407466                 cmp     [ebp+24h], ebx
.text:00407469                 jle     short loc_40746E
.text:0040746B                 mov     [ebp+24h], ebx
.text:0040746E
.text:0040746E loc_40746E:                             ; CODE XREF: sub_4073B0+B9↑j
.text:0040746E                 cmp     [ebp+20h], ebx
.text:00407471                 jle     short loc_407476
.text:00407473                 mov     [ebp+20h], ebx
.text:00407476
.text:00407476 loc_407476:                             ; CODE XREF: sub_4073B0+C1↑j
.text:00407476                 cmp     dword ptr [ebp+18h], 1
.text:0040747A                 jz      loc_407E50
.text:00407480
.text:00407480 loc_407480:                             ; CODE XREF: sub_4073B0+B13↓j
.text:00407480                 cmp     ebx, [esp+5Ch+arg_0]
.text:00407484                 jz      loc_407E34
.text:0040748A                 cld
.text:0040748B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040748F                 mov     edx, 3
.text:00407494                 mov     edi, offset dword_407160
.text:00407499                 mov     esi, [ecx+ebx*4]
.text:0040749C                 mov     ecx, edx
.text:0040749E                 repe cmpsb
.text:004074A0                 jnz     short loc_4074DC
.text:004074A2                 mov     edx, [ebp+24h]
.text:004074A5                 lea     eax, [ebx+1]
.text:004074A8                 cmp     [ebp+20h], edx
.text:004074AB                 mov     [ebp+0], eax
.text:004074AE                 jz      loc_407E48
.text:004074B4                 cmp     edx, eax
.text:004074B6                 jz      short loc_4074D0
.text:004074B8                 mov     [esp+5Ch+Str2], ebp
.text:004074BC                 mov     ebx, [esp+5Ch+arg_4]
.text:004074C0                 mov     [esp+5Ch+Str1], ebx
.text:004074C3                 call    sub_408060
.text:004074C8                 nop
.text:004074C9                 lea     esi, [esi+0]
.text:004074D0
.text:004074D0 loc_4074D0:                             ; CODE XREF: sub_4073B0+106↑j
.text:004074D0                                         ; sub_4073B0+A9B↓j
.text:004074D0                 mov     eax, [esp+5Ch+arg_0]
.text:004074D4                 mov     ebx, eax
.text:004074D6                 mov     [ebp+24h], eax
.text:004074D9                 mov     [ebp+0], eax
.text:004074DC
.text:004074DC loc_4074DC:                             ; CODE XREF: sub_4073B0+F0↑j
.text:004074DC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004074E0                 jz      loc_407E34
.text:004074E6                 mov     esi, [esp+5Ch+arg_4]
.text:004074EA                 mov     eax, [esi+ebx*4]
.text:004074ED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004074F0                 jz      short loc_407517
.text:004074F2
.text:004074F2 loc_4074F2:                             ; CODE XREF: sub_4073B0+16D↓j
.text:004074F2                 mov     edx, [ebp+18h]
.text:004074F5                 test    edx, edx
.text:004074F7                 jz      short loc_407510
.text:004074F9                 mov     [ebp+0Ch], eax
.text:004074FC                 lea     edi, [ebx+1]
.text:004074FF                 mov     eax, 1
.text:00407504                 mov     [ebp+0], edi
.text:00407507
.text:00407507 loc_407507:                             ; CODE XREF: sub_4073B0+2D↑j
.text:00407507                                         ; sub_4073B0+165↓j ...
.text:00407507                 add     esp, 4Ch
.text:0040750A                 pop     ebx
.text:0040750B                 pop     esi
.text:0040750C                 pop     edi
.text:0040750D                 pop     ebp
.text:0040750E                 retn
.text:0040750E ; ---------------------------------------------------------------------------
.text:0040750F                 align 10h
.text:00407510
.text:00407510 loc_407510:                             ; CODE XREF: sub_4073B0+147↑j
.text:00407510                                         ; sub_4073B0+A8A↓j ...
.text:00407510                 mov     eax, 0FFFFFFFFh
.text:00407515                 jmp     short loc_407507
.text:00407517 ; ---------------------------------------------------------------------------
.text:00407517
.text:00407517 loc_407517:                             ; CODE XREF: sub_4073B0+140↑j
.text:00407517                 movzx   edx, byte ptr [eax+1]
.text:0040751B                 test    dl, dl
.text:0040751D                 jz      short loc_4074F2
.text:0040751F                 mov     ebx, [esp+5Ch+arg_C]
.text:00407523                 xor     ecx, ecx
.text:00407525                 test    ebx, ebx
.text:00407527                 jz      short loc_407532
.text:00407529                 cmp     dl, 2Dh ; '-'
.text:0040752C                 jz      loc_407E2A
.text:00407532
.text:00407532 loc_407532:                             ; CODE XREF: sub_4073B0+177↑j
.text:00407532                                         ; sub_4073B0+A7F↓j
.text:00407532                 lea     esi, [ecx+eax+1]
.text:00407536                 mov     [ebp+14h], esi
.text:00407539                 lea     esi, [esi+0]
.text:00407540
.text:00407540 loc_407540:                             ; CODE XREF: sub_4073B0+AD↑j
.text:00407540                 mov     ecx, [esp+5Ch+arg_C]
.text:00407544                 test    ecx, ecx
.text:00407546                 jz      loc_4078D0
.text:0040754C                 mov     edx, [ebp+0]
.text:0040754F                 mov     edi, [esp+5Ch+arg_4]
.text:00407553                 mov     eax, [edi+edx*4]
.text:00407556                 movzx   edx, byte ptr [eax+1]
.text:0040755A                 cmp     dl, 2Dh ; '-'
.text:0040755D                 jz      short loc_407575
.text:0040755F                 mov     ebx, [esp+5Ch+arg_14]
.text:00407563                 test    ebx, ebx
.text:00407565                 jz      loc_4078D0
.text:0040756B                 cmp     byte ptr [eax+2], 0
.text:0040756F                 jz      loc_407E0A
.text:00407575
.text:00407575 loc_407575:                             ; CODE XREF: sub_4073B0+1AD↑j
.text:00407575                                         ; sub_4073B0+A75↓j
.text:00407575                 mov     [esp+5Ch+var_18], 0
.text:0040757D                 mov     ecx, [ebp+14h]
.text:00407580                 mov     [esp+5Ch+var_1C], 0
.text:00407588                 mov     [esp+5Ch+var_20], 0
.text:00407590                 mov     edi, ecx
.text:00407592                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040759A                 movzx   eax, byte ptr [ecx]
.text:0040759D                 test    al, al
.text:0040759F                 jz      short loc_4075BC
.text:004075A1                 cmp     al, 3Dh ; '='
.text:004075A3                 jz      short loc_4075BC
.text:004075A5                 lea     esi, [esi+0]
.text:004075A9                 lea     edi, [edi+0]
.text:004075B0
.text:004075B0 loc_4075B0:                             ; CODE XREF: sub_4073B0+20A↓j
.text:004075B0                 inc     edi
.text:004075B1                 movzx   eax, byte ptr [edi]
.text:004075B4                 test    al, al
.text:004075B6                 jz      short loc_4075BC
.text:004075B8                 cmp     al, 3Dh ; '='
.text:004075BA                 jnz     short loc_4075B0
.text:004075BC
.text:004075BC loc_4075BC:                             ; CODE XREF: sub_4073B0+1EF↑j
.text:004075BC                                         ; sub_4073B0+1F3↑j ...
.text:004075BC                 mov     [esp+5Ch+var_28], 0
.text:004075C4                 mov     esi, [esp+5Ch+arg_C]
.text:004075C8                 mov     ebx, [esi]
.text:004075CA                 test    ebx, ebx
.text:004075CC                 mov     edx, ebx
.text:004075CE                 jz      loc_4077F0
.text:004075D4                 lea     esi, [esi+0]
.text:004075DA                 lea     edi, [edi+0]
.text:004075E0
.text:004075E0 loc_4075E0:                             ; CODE XREF: sub_4073B0+25E↓j
.text:004075E0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004075E4                 mov     ebx, edi
.text:004075E6                 sub     ebx, ecx
.text:004075E8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004075EC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004075EF                 call    strncmp
.text:004075F4                 test    eax, eax
.text:004075F6                 jz      loc_407D86
.text:004075FC
.text:004075FC loc_4075FC:                             ; CODE XREF: sub_4073B0+A0F↓j
.text:004075FC                                         ; sub_4073B0+A24↓j ...
.text:004075FC                 inc     [esp+5Ch+var_28]
.text:00407600                 add     esi, 10h
.text:00407603                 mov     ecx, [esi]
.text:00407605                 test    ecx, ecx
.text:00407607                 mov     edx, ecx
.text:00407609                 jz      short loc_407610
.text:0040760B                 mov     ecx, [ebp+14h]
.text:0040760E                 jmp     short loc_4075E0
.text:00407610 ; ---------------------------------------------------------------------------
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: sub_4073B0+259↑j
.text:00407610                                         ; sub_4073B0+A55↓j
.text:00407610                 mov     esi, [esp+5Ch+var_20]
.text:00407614                 test    esi, esi
.text:00407616                 jz      short loc_407624
.text:00407618                 mov     edx, [esp+5Ch+var_1C]
.text:0040761C                 test    edx, edx
.text:0040761E                 jz      loc_407D30
.text:00407624
.text:00407624 loc_407624:                             ; CODE XREF: sub_4073B0+266↑j
.text:00407624                 mov     eax, [esp+5Ch+var_18]
.text:00407628                 test    eax, eax
.text:0040762A                 jz      loc_4077F0
.text:00407630                 mov     ecx, [ebp+0]
.text:00407633                 lea     eax, [ecx+1]
.text:00407636                 mov     [ebp+0], eax
.text:00407639                 cmp     byte ptr [edi], 0
.text:0040763C                 jz      loc_407750
.text:00407642                 mov     ecx, [esp+5Ch+var_18]
.text:00407646                 mov     esi, [ecx+4]
.text:00407649                 test    esi, esi
.text:0040764B                 jz      short loc_407696
.text:0040764D                 lea     ebx, [edi+1]
.text:00407650                 mov     [ebp+0Ch], ebx
.text:00407653
.text:00407653 loc_407653:                             ; CODE XREF: sub_4073B0+3A8↓j
.text:00407653                                         ; sub_4073B0+3C4↓j
.text:00407653                 mov     ebx, [ebp+14h]
.text:00407656                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00407659                 call    strlen
.text:0040765E                 add     [ebp+14h], eax
.text:00407661                 mov     esi, [esp+5Ch+arg_10]
.text:00407665                 test    esi, esi
.text:00407667                 jz      short loc_407673
.text:00407669                 mov     ebp, [esp+5Ch+var_24]
.text:0040766D                 mov     ecx, [esp+5Ch+arg_10]
.text:00407671                 mov     [ecx], ebp
.text:00407673
.text:00407673 loc_407673:                             ; CODE XREF: sub_4073B0+2B7↑j
.text:00407673                 mov     eax, [esp+5Ch+var_18]
.text:00407677                 mov     ecx, [eax+8]
.text:0040767A                 test    ecx, ecx
.text:0040767C                 jnz     short loc_40768A
.text:0040767E                 mov     ecx, [esp+5Ch+var_18]
.text:00407682
.text:00407682 loc_407682:                             ; CODE XREF: sub_4073B0+723↓j
.text:00407682                 mov     eax, [ecx+0Ch]
.text:00407685                 jmp     loc_407507
.text:0040768A ; ---------------------------------------------------------------------------
.text:0040768A
.text:0040768A loc_40768A:                             ; CODE XREF: sub_4073B0+2CC↑j
.text:0040768A                                         ; sub_4073B0+719↓j
.text:0040768A                 mov     esi, [eax+0Ch]
.text:0040768D                 xor     eax, eax
.text:0040768F                 mov     [ecx], esi
.text:00407691                 jmp     loc_407507
.text:00407696 ; ---------------------------------------------------------------------------
.text:00407696
.text:00407696 loc_407696:                             ; CODE XREF: sub_4073B0+29B↑j
.text:00407696                 mov     edi, [esp+5Ch+var_14]
.text:0040769A                 test    edi, edi
.text:0040769C                 jz      short loc_4076F0
.text:0040769E                 mov     esi, [esp+5Ch+arg_4]
.text:004076A2                 mov     edx, [esi+eax*4-4]
.text:004076A6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004076AA                 jz      short loc_407712
.text:004076AC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004076B3                 call    ds:libintl_gettext
.text:004076B9                 mov     edx, [esp+5Ch+var_18]
.text:004076BD                 mov     edi, [edx]
.text:004076BF                 mov     [esp+5Ch+var_4C], edi
.text:004076C3                 mov     ebx, [ebp+0]
.text:004076C6                 mov     edi, [esp+5Ch+arg_4]
.text:004076CA                 mov     ecx, [edi+ebx*4-4]
.text:004076CE                 movsx   esi, byte ptr [ecx]
.text:004076D1                 mov     ecx, ds:_iob
.text:004076D7                 add     ecx, 40h ; '@'
.text:004076DA                 mov     [esp+5Ch+var_50], esi
.text:004076DE                 mov     ebx, [edi]
.text:004076E0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004076E4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004076E7                 mov     [esp+5Ch+MaxCount], ebx
.text:004076EB                 call    fprintf
.text:004076F0
.text:004076F0 loc_4076F0:                             ; CODE XREF: sub_4073B0+2EC↑j
.text:004076F0                                         ; sub_4073B0+398↓j
.text:004076F0                 mov     ecx, [ebp+14h]
.text:004076F3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004076F6                 call    strlen
.text:004076FB                 add     [ebp+14h], eax
.text:004076FE                 mov     eax, [esp+5Ch+var_18]
.text:00407702                 mov     esi, [eax+0Ch]
.text:00407705                 mov     [ebp+8], esi
.text:00407708
.text:00407708 loc_407708:                             ; CODE XREF: sub_4073B0+4E5↓j
.text:00407708                                         ; sub_4073B0+73E↓j ...
.text:00407708                 mov     eax, 3Fh ; '?'
.text:0040770D                 jmp     loc_407507
.text:00407712 ; ---------------------------------------------------------------------------
.text:00407712
.text:00407712 loc_407712:                             ; CODE XREF: sub_4073B0+2FA↑j
.text:00407712                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00407719                 call    ds:libintl_gettext
.text:0040771F                 mov     edx, [esp+5Ch+var_18]
.text:00407723                 mov     edi, [esp+5Ch+arg_4]
.text:00407727                 mov     ecx, ds:_iob
.text:0040772D                 mov     esi, [edx]
.text:0040772F                 add     ecx, 40h ; '@'
.text:00407732                 mov     [esp+5Ch+var_50], esi
.text:00407736                 mov     ebx, [edi]
.text:00407738                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040773C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040773F                 mov     [esp+5Ch+MaxCount], ebx
.text:00407743                 call    fprintf
.text:00407748                 jmp     short loc_4076F0
.text:00407748 ; ---------------------------------------------------------------------------
.text:0040774A                 align 10h
.text:00407750
.text:00407750 loc_407750:                             ; CODE XREF: sub_4073B0+28C↑j
.text:00407750                 mov     ebx, [esp+5Ch+var_18]
.text:00407754                 cmp     dword ptr [ebx+4], 1
.text:00407758                 jnz     loc_407653
.text:0040775E                 cmp     eax, [esp+5Ch+arg_0]
.text:00407762                 jge     short loc_407779
.text:00407764                 mov     ebx, [esp+5Ch+arg_4]
.text:00407768                 lea     edi, [ecx+2]
.text:0040776B                 mov     [ebp+0], edi
.text:0040776E                 mov     esi, [ebx+eax*4]
.text:00407771                 mov     [ebp+0Ch], esi
.text:00407774                 jmp     loc_407653
.text:00407779 ; ---------------------------------------------------------------------------
.text:00407779
.text:00407779 loc_407779:                             ; CODE XREF: sub_4073B0+3B2↑j
.text:00407779                 mov     edx, [esp+5Ch+var_14]
.text:0040777D                 test    edx, edx
.text:0040777F                 jnz     short loc_4077B0
.text:00407781
.text:00407781 loc_407781:                             ; CODE XREF: sub_4073B0+437↓j
.text:00407781                 mov     edx, [ebp+14h]
.text:00407784                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407787                 call    strlen
.text:0040778C                 add     [ebp+14h], eax
.text:0040778F                 mov     eax, [esp+5Ch+var_18]
.text:00407793                 mov     edi, [eax+0Ch]
.text:00407796                 mov     [ebp+8], edi
.text:00407799
.text:00407799 loc_407799:                             ; CODE XREF: sub_4073B0+7C2↓j
.text:00407799                 mov     ebp, [esp+5Ch+Str]
.text:0040779D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004077A1                 setnz   bl
.text:004077A4                 movzx   esi, bl
.text:004077A7                 lea     eax, [esi+esi*4+3Ah]
.text:004077AB                 jmp     loc_407507
.text:004077B0 ; ---------------------------------------------------------------------------
.text:004077B0
.text:004077B0 loc_4077B0:                             ; CODE XREF: sub_4073B0+3CF↑j
.text:004077B0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004077B7                 call    ds:libintl_gettext
.text:004077BD                 mov     ecx, [ebp+0]
.text:004077C0                 mov     esi, [esp+5Ch+arg_4]
.text:004077C4                 mov     ebx, [esi+ecx*4-4]
.text:004077C8                 mov     ecx, ds:_iob
.text:004077CE                 mov     [esp+5Ch+var_50], ebx
.text:004077D2                 mov     edi, [esi]
.text:004077D4                 add     ecx, 40h ; '@'
.text:004077D7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004077DB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004077DE                 mov     [esp+5Ch+MaxCount], edi
.text:004077E2                 call    fprintf
.text:004077E7                 jmp     short loc_407781
.text:004077E7 ; ---------------------------------------------------------------------------
.text:004077E9                 align 10h
.text:004077F0
.text:004077F0 loc_4077F0:                             ; CODE XREF: sub_4073B0+21E↑j
.text:004077F0                                         ; sub_4073B0+27A↑j
.text:004077F0                 mov     eax, [esp+5Ch+arg_14]
.text:004077F4                 test    eax, eax
.text:004077F6                 jz      short loc_407826
.text:004077F8                 mov     ebx, [ebp+0]
.text:004077FB                 mov     esi, [esp+5Ch+arg_4]
.text:004077FF                 mov     edi, [esi+ebx*4]
.text:00407802                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00407806                 jz      short loc_407829
.text:00407808                 mov     ecx, [ebp+14h]
.text:0040780B                 mov     edx, [esp+5Ch+Str]
.text:0040780F                 movsx   ebx, byte ptr [ecx]
.text:00407812                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407815                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00407819                 call    strchr
.text:0040781E                 test    eax, eax
.text:00407820                 jnz     loc_4078D0
.text:00407826
.text:00407826 loc_407826:                             ; CODE XREF: sub_4073B0+446↑j
.text:00407826                 mov     ebx, [ebp+0]
.text:00407829
.text:00407829 loc_407829:                             ; CODE XREF: sub_4073B0+456↑j
.text:00407829                 mov     eax, [esp+5Ch+var_14]
.text:0040782D                 test    eax, eax
.text:0040782F                 jz      short loc_407881
.text:00407831                 mov     esi, [esp+5Ch+arg_4]
.text:00407835                 mov     edi, [esi+ebx*4]
.text:00407838                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040783C                 jz      short loc_40789A
.text:0040783E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00407845                 call    ds:libintl_gettext
.text:0040784B                 mov     edi, [ebp+14h]
.text:0040784E                 mov     [esp+5Ch+var_4C], edi
.text:00407852                 mov     ebx, [ebp+0]
.text:00407855                 mov     edi, [esp+5Ch+arg_4]
.text:00407859                 mov     esi, [edi+ebx*4]
.text:0040785C                 movsx   ecx, byte ptr [esi]
.text:0040785F                 mov     esi, ds:_iob
.text:00407865                 add     esi, 40h ; '@'
.text:00407868                 mov     [esp+5Ch+var_50], ecx
.text:0040786C                 mov     ebx, [edi]
.text:0040786E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407872                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00407875                 mov     [esp+5Ch+MaxCount], ebx
.text:00407879                 call    fprintf
.text:0040787E
.text:0040787E loc_40787E:                             ; CODE XREF: sub_4073B0+51D↓j
.text:0040787E                 mov     ebx, [ebp+0]
.text:00407881
.text:00407881 loc_407881:                             ; CODE XREF: sub_4073B0+47F↑j
.text:00407881                 mov     dword ptr [ebp+14h], offset dword_407260
.text:00407888                 lea     edx, [ebx+1]
.text:0040788B                 mov     [ebp+0], edx
.text:0040788E
.text:0040788E loc_40788E:                             ; CODE XREF: sub_4073B0+999↓j
.text:0040788E                 mov     dword ptr [ebp+8], 0
.text:00407895                 jmp     loc_407708
.text:0040789A ; ---------------------------------------------------------------------------
.text:0040789A
.text:0040789A loc_40789A:                             ; CODE XREF: sub_4073B0+48C↑j
.text:0040789A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004078A1                 call    ds:libintl_gettext
.text:004078A7                 mov     ecx, [ebp+14h]
.text:004078AA                 mov     edi, [esp+5Ch+arg_4]
.text:004078AE                 mov     edx, ds:_iob
.text:004078B4                 mov     [esp+5Ch+var_50], ecx
.text:004078B8                 mov     ebx, [edi]
.text:004078BA                 add     edx, 40h ; '@'
.text:004078BD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004078C1                 mov     [esp+5Ch+MaxCount], ebx
.text:004078C5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004078C8                 call    fprintf
.text:004078CD                 jmp     short loc_40787E
.text:004078CD ; ---------------------------------------------------------------------------
.text:004078CF                 align 10h
.text:004078D0
.text:004078D0 loc_4078D0:                             ; CODE XREF: sub_4073B0+196↑j
.text:004078D0                                         ; sub_4073B0+1B5↑j ...
.text:004078D0                 mov     esi, [ebp+14h]
.text:004078D3                 movzx   ebx, byte ptr [esi]
.text:004078D6                 inc     esi
.text:004078D7                 mov     [ebp+14h], esi
.text:004078DA                 mov     ecx, [esp+5Ch+Str]
.text:004078DE                 movsx   esi, bl
.text:004078E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004078E5                 mov     edi, esi
.text:004078E7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004078EA                 call    strchr
.text:004078EF                 mov     ecx, [ebp+14h]
.text:004078F2                 cmp     byte ptr [ecx], 0
.text:004078F5                 jnz     short loc_4078FA
.text:004078F7                 inc     dword ptr [ebp+0]
.text:004078FA
.text:004078FA loc_4078FA:                             ; CODE XREF: sub_4073B0+545↑j
.text:004078FA                 test    eax, eax
.text:004078FC                 jz      loc_407CE0
.text:00407902                 cmp     bl, 3Ah ; ':'
.text:00407905                 jz      loc_407CE0
.text:0040790B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040790E                 jz      loc_4079C6
.text:00407914                 movzx   edx, byte ptr [eax+1]
.text:00407918
.text:00407918 loc_407918:                             ; CODE XREF: sub_4073B0+61D↓j
.text:00407918                 cmp     dl, 3Ah ; ':'
.text:0040791B                 jz      short loc_407924
.text:0040791D
.text:0040791D loc_40791D:                             ; CODE XREF: sub_4073B0+590↓j
.text:0040791D                 mov     eax, esi
.text:0040791F                 jmp     loc_407507
.text:00407924 ; ---------------------------------------------------------------------------
.text:00407924
.text:00407924 loc_407924:                             ; CODE XREF: sub_4073B0+56B↑j
.text:00407924                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00407928                 jz      loc_4079B1
.text:0040792E                 cmp     byte ptr [ecx], 0
.text:00407931                 jz      short loc_407942
.text:00407933
.text:00407933 loc_407933:                             ; CODE XREF: sub_4073B0+604↓j
.text:00407933                 inc     dword ptr [ebp+0]
.text:00407936                 mov     [ebp+0Ch], ecx
.text:00407939
.text:00407939 loc_407939:                             ; CODE XREF: sub_4073B0+5AB↓j
.text:00407939                                         ; sub_4073B0+5C6↓j ...
.text:00407939                 mov     dword ptr [ebp+14h], 0
.text:00407940                 jmp     short loc_40791D
.text:00407942 ; ---------------------------------------------------------------------------
.text:00407942
.text:00407942 loc_407942:                             ; CODE XREF: sub_4073B0+581↑j
.text:00407942                 mov     ecx, [ebp+0]
.text:00407945                 cmp     ecx, [esp+5Ch+arg_0]
.text:00407949                 jz      short loc_40795D
.text:0040794B                 mov     eax, [esp+5Ch+arg_4]
.text:0040794F                 lea     edx, [ecx+1]
.text:00407952                 mov     [ebp+0], edx
.text:00407955                 mov     ebx, [eax+ecx*4]
.text:00407958                 mov     [ebp+0Ch], ebx
.text:0040795B                 jmp     short loc_407939
.text:0040795D ; ---------------------------------------------------------------------------
.text:0040795D
.text:0040795D loc_40795D:                             ; CODE XREF: sub_4073B0+599↑j
.text:0040795D                 mov     ecx, [esp+5Ch+var_14]
.text:00407961                 test    ecx, ecx
.text:00407963                 jnz     short loc_40797F
.text:00407965
.text:00407965 loc_407965:                             ; CODE XREF: sub_4073B0+5FF↓j
.text:00407965                 mov     [ebp+8], edi
.text:00407968                 mov     edi, [esp+5Ch+Str]
.text:0040796C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040796F                 jz      short loc_407978
.text:00407971                 mov     esi, 3Fh ; '?'
.text:00407976                 jmp     short loc_407939
.text:00407978 ; ---------------------------------------------------------------------------
.text:00407978
.text:00407978 loc_407978:                             ; CODE XREF: sub_4073B0+5BF↑j
.text:00407978                 mov     esi, 3Ah ; ':'
.text:0040797D                 jmp     short loc_407939
.text:0040797F ; ---------------------------------------------------------------------------
.text:0040797F
.text:0040797F loc_40797F:                             ; CODE XREF: sub_4073B0+5B3↑j
.text:0040797F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00407986                 call    ds:libintl_gettext
.text:0040798C                 mov     [esp+5Ch+var_50], edi
.text:00407990                 mov     ebx, [esp+5Ch+arg_4]
.text:00407994                 mov     edx, ds:_iob
.text:0040799A                 mov     esi, [ebx]
.text:0040799C                 add     edx, 40h ; '@'
.text:0040799F                 mov     [esp+5Ch+Str2], eax ; Format
.text:004079A3                 mov     [esp+5Ch+MaxCount], esi
.text:004079A7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004079AA                 call    fprintf
.text:004079AF                 jmp     short loc_407965
.text:004079B1 ; ---------------------------------------------------------------------------
.text:004079B1
.text:004079B1 loc_4079B1:                             ; CODE XREF: sub_4073B0+578↑j
.text:004079B1                 cmp     byte ptr [ecx], 0
.text:004079B4                 jnz     loc_407933
.text:004079BA                 mov     dword ptr [ebp+0Ch], 0
.text:004079C1                 jmp     loc_407939
.text:004079C6 ; ---------------------------------------------------------------------------
.text:004079C6
.text:004079C6 loc_4079C6:                             ; CODE XREF: sub_4073B0+55E↑j
.text:004079C6                 movzx   edx, byte ptr [eax+1]
.text:004079CA                 cmp     dl, 3Bh ; ';'
.text:004079CD                 jnz     loc_407918
.text:004079D3                 mov     [esp+5Ch+var_2C], 0
.text:004079DB                 mov     [esp+5Ch+var_30], 0
.text:004079E3                 mov     [esp+5Ch+var_34], 0
.text:004079EB                 mov     [esp+5Ch+var_38], 0
.text:004079F3                 cmp     byte ptr [ecx], 0
.text:004079F6                 jz      loc_407C6B
.text:004079FC                 inc     dword ptr [ebp+0]
.text:004079FF                 mov     [ebp+0Ch], ecx
.text:00407A02
.text:00407A02 loc_407A02:                             ; CODE XREF: sub_4073B0+8D4↓j
.text:00407A02                 mov     edi, [ebp+0Ch]
.text:00407A05                 mov     [ebp+14h], edi
.text:00407A08                 movzx   eax, byte ptr [edi]
.text:00407A0B                 test    al, al
.text:00407A0D                 jz      short loc_407A1F
.text:00407A0F                 cmp     al, 3Dh ; '='
.text:00407A11                 jz      short loc_407A1F
.text:00407A13
.text:00407A13 loc_407A13:                             ; CODE XREF: sub_4073B0+66D↓j
.text:00407A13                 inc     edi
.text:00407A14                 movzx   eax, byte ptr [edi]
.text:00407A17                 test    al, al
.text:00407A19                 jz      short loc_407A1F
.text:00407A1B                 cmp     al, 3Dh ; '='
.text:00407A1D                 jnz     short loc_407A13
.text:00407A1F
.text:00407A1F loc_407A1F:                             ; CODE XREF: sub_4073B0+65D↑j
.text:00407A1F                                         ; sub_4073B0+661↑j ...
.text:00407A1F                 mov     [esp+5Ch+var_3C], 0
.text:00407A27                 mov     esi, [esp+5Ch+arg_C]
.text:00407A2B                 mov     eax, [esi]
.text:00407A2D                 test    eax, eax
.text:00407A2F                 jz      loc_407BB0
.text:00407A35                 mov     ecx, eax
.text:00407A37
.text:00407A37 loc_407A37:                             ; CODE XREF: sub_4073B0+6B3↓j
.text:00407A37                 mov     ebx, [ebp+14h]
.text:00407A3A                 mov     eax, edi
.text:00407A3C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00407A3F                 sub     eax, ebx
.text:00407A41                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00407A45                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00407A49                 call    strncmp
.text:00407A4E                 test    eax, eax
.text:00407A50                 jz      loc_407C17
.text:00407A56
.text:00407A56 loc_407A56:                             ; CODE XREF: sub_4073B0+88C↓j
.text:00407A56                                         ; sub_4073B0+89D↓j
.text:00407A56                 inc     [esp+5Ch+var_3C]
.text:00407A5A                 add     esi, 10h
.text:00407A5D                 mov     edx, [esi]
.text:00407A5F                 test    edx, edx
.text:00407A61                 mov     ecx, edx
.text:00407A63                 jnz     short loc_407A37
.text:00407A65
.text:00407A65 loc_407A65:                             ; CODE XREF: sub_4073B0+8B6↓j
.text:00407A65                 mov     esi, [esp+5Ch+var_34]
.text:00407A69                 test    esi, esi
.text:00407A6B                 jz      short loc_407A79
.text:00407A6D                 mov     ebx, [esp+5Ch+var_30]
.text:00407A71                 test    ebx, ebx
.text:00407A73                 jz      loc_407BC1
.text:00407A79
.text:00407A79 loc_407A79:                             ; CODE XREF: sub_4073B0+6BB↑j
.text:00407A79                 mov     esi, [esp+5Ch+var_2C]
.text:00407A7D                 test    esi, esi
.text:00407A7F                 jz      loc_407BB0
.text:00407A85                 cmp     byte ptr [edi], 0
.text:00407A88                 jz      loc_407B30
.text:00407A8E                 mov     ecx, [esp+5Ch+var_2C]
.text:00407A92                 mov     ebx, [ecx+4]
.text:00407A95                 test    ebx, ebx
.text:00407A97                 jz      short loc_407AD8
.text:00407A99                 lea     edx, [edi+1]
.text:00407A9C                 mov     [ebp+0Ch], edx
.text:00407A9F
.text:00407A9F loc_407A9F:                             ; CODE XREF: sub_4073B0+788↓j
.text:00407A9F                                         ; sub_4073B0+7A7↓j
.text:00407A9F                 mov     edi, [ebp+14h]
.text:00407AA2                 mov     [esp+5Ch+Str1], edi ; Str
.text:00407AA5                 call    strlen
.text:00407AAA                 add     [ebp+14h], eax
.text:00407AAD                 mov     eax, [esp+5Ch+arg_10]
.text:00407AB1                 test    eax, eax
.text:00407AB3                 jz      short loc_407AC0
.text:00407AB5                 mov     edx, [esp+5Ch+var_38]
.text:00407AB9                 mov     ebp, [esp+5Ch+arg_10]
.text:00407ABD                 mov     [ebp+0], edx
.text:00407AC0
.text:00407AC0 loc_407AC0:                             ; CODE XREF: sub_4073B0+703↑j
.text:00407AC0                 mov     eax, [esp+5Ch+var_2C]
.text:00407AC4                 mov     ecx, [eax+8]
.text:00407AC7                 test    ecx, ecx
.text:00407AC9                 jnz     loc_40768A
.text:00407ACF                 mov     ecx, [esp+5Ch+var_2C]
.text:00407AD3                 jmp     loc_407682
.text:00407AD8 ; ---------------------------------------------------------------------------
.text:00407AD8
.text:00407AD8 loc_407AD8:                             ; CODE XREF: sub_4073B0+6E7↑j
.text:00407AD8                 mov     eax, [esp+5Ch+var_14]
.text:00407ADC                 test    eax, eax
.text:00407ADE                 jnz     short loc_407AF3
.text:00407AE0
.text:00407AE0 loc_407AE0:                             ; CODE XREF: sub_4073B0+779↓j
.text:00407AE0                 mov     ecx, [ebp+14h]
.text:00407AE3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00407AE6                 call    strlen
.text:00407AEB                 add     [ebp+14h], eax
.text:00407AEE                 jmp     loc_407708
.text:00407AF3 ; ---------------------------------------------------------------------------
.text:00407AF3
.text:00407AF3 loc_407AF3:                             ; CODE XREF: sub_4073B0+72E↑j
.text:00407AF3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00407AFA                 call    ds:libintl_gettext
.text:00407B00                 mov     edx, [esp+5Ch+var_2C]
.text:00407B04                 mov     ebx, [esp+5Ch+arg_4]
.text:00407B08                 mov     edi, [edx]
.text:00407B0A                 mov     [esp+5Ch+var_50], edi
.text:00407B0E                 mov     edi, ds:_iob
.text:00407B14                 mov     esi, [ebx]
.text:00407B16                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407B1A                 add     edi, 40h ; '@'
.text:00407B1D                 mov     [esp+5Ch+MaxCount], esi
.text:00407B21                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00407B24                 call    fprintf
.text:00407B29                 jmp     short loc_407AE0
.text:00407B29 ; ---------------------------------------------------------------------------
.text:00407B2B                 align 10h
.text:00407B30
.text:00407B30 loc_407B30:                             ; CODE XREF: sub_4073B0+6D8↑j
.text:00407B30                 mov     esi, [esp+5Ch+var_2C]
.text:00407B34                 cmp     dword ptr [esi+4], 1
.text:00407B38                 jnz     loc_407A9F
.text:00407B3E                 mov     ecx, [ebp+0]
.text:00407B41                 cmp     ecx, [esp+5Ch+arg_0]
.text:00407B45                 jge     short loc_407B5C
.text:00407B47                 mov     eax, [esp+5Ch+arg_4]
.text:00407B4B                 lea     ebx, [ecx+1]
.text:00407B4E                 mov     [ebp+0], ebx
.text:00407B51                 mov     edi, [eax+ecx*4]
.text:00407B54                 mov     [ebp+0Ch], edi
.text:00407B57                 jmp     loc_407A9F
.text:00407B5C ; ---------------------------------------------------------------------------
.text:00407B5C
.text:00407B5C loc_407B5C:                             ; CODE XREF: sub_4073B0+795↑j
.text:00407B5C                 mov     edx, [esp+5Ch+var_14]
.text:00407B60                 test    edx, edx
.text:00407B62                 jnz     short loc_407B77
.text:00407B64
.text:00407B64 loc_407B64:                             ; CODE XREF: sub_4073B0+7FE↓j
.text:00407B64                 mov     edx, [ebp+14h]
.text:00407B67                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407B6A                 call    strlen
.text:00407B6F                 add     [ebp+14h], eax
.text:00407B72                 jmp     loc_407799
.text:00407B77 ; ---------------------------------------------------------------------------
.text:00407B77
.text:00407B77 loc_407B77:                             ; CODE XREF: sub_4073B0+7B2↑j
.text:00407B77                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00407B7E                 call    ds:libintl_gettext
.text:00407B84                 mov     ecx, [ebp+0]
.text:00407B87                 mov     ebx, [esp+5Ch+arg_4]
.text:00407B8B                 mov     edi, [ebx+ecx*4-4]
.text:00407B8F                 mov     ecx, ds:_iob
.text:00407B95                 mov     [esp+5Ch+var_50], edi
.text:00407B99                 mov     esi, [ebx]
.text:00407B9B                 add     ecx, 40h ; '@'
.text:00407B9E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407BA2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00407BA5                 mov     [esp+5Ch+MaxCount], esi
.text:00407BA9                 call    fprintf
.text:00407BAE                 jmp     short loc_407B64
.text:00407BB0 ; ---------------------------------------------------------------------------
.text:00407BB0
.text:00407BB0 loc_407BB0:                             ; CODE XREF: sub_4073B0+67F↑j
.text:00407BB0                                         ; sub_4073B0+6CF↑j
.text:00407BB0                 mov     dword ptr [ebp+14h], 0
.text:00407BB7                 mov     eax, 57h ; 'W'
.text:00407BBC                 jmp     loc_407507
.text:00407BC1 ; ---------------------------------------------------------------------------
.text:00407BC1
.text:00407BC1 loc_407BC1:                             ; CODE XREF: sub_4073B0+6C3↑j
.text:00407BC1                 mov     edi, [esp+5Ch+var_14]
.text:00407BC5                 test    edi, edi
.text:00407BC7                 jnz     short loc_407BDF
.text:00407BC9
.text:00407BC9 loc_407BC9:                             ; CODE XREF: sub_4073B0+865↓j
.text:00407BC9                 mov     edx, [ebp+14h]
.text:00407BCC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407BCF                 call    strlen
.text:00407BD4                 add     [ebp+14h], eax
.text:00407BD7                 inc     dword ptr [ebp+0]
.text:00407BDA                 jmp     loc_407708
.text:00407BDF ; ---------------------------------------------------------------------------
.text:00407BDF
.text:00407BDF loc_407BDF:                             ; CODE XREF: sub_4073B0+817↑j
.text:00407BDF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00407BE6                 call    ds:libintl_gettext
.text:00407BEC                 mov     ecx, [ebp+0]
.text:00407BEF                 mov     ebx, [esp+5Ch+arg_4]
.text:00407BF3                 mov     edi, [ebx+ecx*4]
.text:00407BF6                 mov     ecx, ds:_iob
.text:00407BFC                 mov     [esp+5Ch+var_50], edi
.text:00407C00                 mov     esi, [ebx]
.text:00407C02                 add     ecx, 40h ; '@'
.text:00407C05                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407C09                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00407C0C                 mov     [esp+5Ch+MaxCount], esi
.text:00407C10                 call    fprintf
.text:00407C15                 jmp     short loc_407BC9
.text:00407C17 ; ---------------------------------------------------------------------------
.text:00407C17
.text:00407C17 loc_407C17:                             ; CODE XREF: sub_4073B0+6A0↑j
.text:00407C17                 mov     edx, [ebp+14h]
.text:00407C1A                 mov     ebx, edi
.text:00407C1C                 mov     ecx, [esi]
.text:00407C1E                 sub     ebx, edx
.text:00407C20                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00407C23                 call    strlen
.text:00407C28                 cmp     ebx, eax
.text:00407C2A                 jz      short loc_407C52
.text:00407C2C                 mov     ebx, [esp+5Ch+var_2C]
.text:00407C30                 test    ebx, ebx
.text:00407C32                 jz      short loc_407C41
.text:00407C34                 mov     [esp+5Ch+var_34], 1
.text:00407C3C                 jmp     loc_407A56
.text:00407C41 ; ---------------------------------------------------------------------------
.text:00407C41
.text:00407C41 loc_407C41:                             ; CODE XREF: sub_4073B0+882↑j
.text:00407C41                 mov     [esp+5Ch+var_2C], esi
.text:00407C45                 mov     ecx, [esp+5Ch+var_3C]
.text:00407C49                 mov     [esp+5Ch+var_38], ecx
.text:00407C4D                 jmp     loc_407A56
.text:00407C52 ; ---------------------------------------------------------------------------
.text:00407C52
.text:00407C52 loc_407C52:                             ; CODE XREF: sub_4073B0+87A↑j
.text:00407C52                 mov     [esp+5Ch+var_2C], esi
.text:00407C56                 mov     eax, [esp+5Ch+var_3C]
.text:00407C5A                 mov     [esp+5Ch+var_30], 1
.text:00407C62                 mov     [esp+5Ch+var_38], eax
.text:00407C66                 jmp     loc_407A65
.text:00407C6B ; ---------------------------------------------------------------------------
.text:00407C6B
.text:00407C6B loc_407C6B:                             ; CODE XREF: sub_4073B0+646↑j
.text:00407C6B                 mov     edx, [ebp+0]
.text:00407C6E                 cmp     edx, [esp+5Ch+arg_0]
.text:00407C72                 jz      short loc_407C89
.text:00407C74                 mov     ebx, [esp+5Ch+arg_4]
.text:00407C78                 lea     esi, [edx+1]
.text:00407C7B                 mov     [ebp+0], esi
.text:00407C7E                 mov     edi, [ebx+edx*4]
.text:00407C81                 mov     [ebp+0Ch], edi
.text:00407C84                 jmp     loc_407A02
.text:00407C89 ; ---------------------------------------------------------------------------
.text:00407C89
.text:00407C89 loc_407C89:                             ; CODE XREF: sub_4073B0+8C2↑j
.text:00407C89                 mov     edi, [esp+5Ch+var_14]
.text:00407C8D                 test    edi, edi
.text:00407C8F                 jnz     short loc_407CAC
.text:00407C91
.text:00407C91 loc_407C91:                             ; CODE XREF: sub_4073B0+92C↓j
.text:00407C91                 mov     [ebp+8], esi
.text:00407C94                 mov     ebp, [esp+5Ch+Str]
.text:00407C98                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00407C9C                 jz      short loc_407CA8
.text:00407C9E                 mov     bl, 3Fh ; '?'
.text:00407CA0
.text:00407CA0 loc_407CA0:                             ; CODE XREF: sub_4073B0+8FA↓j
.text:00407CA0                 movsx   eax, bl
.text:00407CA3                 jmp     loc_407507
.text:00407CA8 ; ---------------------------------------------------------------------------
.text:00407CA8
.text:00407CA8 loc_407CA8:                             ; CODE XREF: sub_4073B0+8EC↑j
.text:00407CA8                 mov     bl, 3Ah ; ':'
.text:00407CAA                 jmp     short loc_407CA0
.text:00407CAC ; ---------------------------------------------------------------------------
.text:00407CAC
.text:00407CAC loc_407CAC:                             ; CODE XREF: sub_4073B0+8DF↑j
.text:00407CAC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00407CB3                 call    ds:libintl_gettext
.text:00407CB9                 mov     [esp+5Ch+var_50], esi
.text:00407CBD                 mov     edx, [esp+5Ch+arg_4]
.text:00407CC1                 mov     ecx, ds:_iob
.text:00407CC7                 mov     ebx, [edx]
.text:00407CC9                 add     ecx, 40h ; '@'
.text:00407CCC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407CD0                 mov     [esp+5Ch+MaxCount], ebx
.text:00407CD4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00407CD7                 call    fprintf
.text:00407CDC                 jmp     short loc_407C91
.text:00407CDC ; ---------------------------------------------------------------------------
.text:00407CDE                 align 10h
.text:00407CE0
.text:00407CE0 loc_407CE0:                             ; CODE XREF: sub_4073B0+54C↑j
.text:00407CE0                                         ; sub_4073B0+555↑j
.text:00407CE0                 mov     eax, [esp+5Ch+var_14]
.text:00407CE4                 test    eax, eax
.text:00407CE6                 jz      short loc_407D1F
.text:00407CE8                 mov     ebx, [ebp+1Ch]
.text:00407CEB                 test    ebx, ebx
.text:00407CED                 jz      short loc_407D27
.text:00407CEF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00407CF6
.text:00407CF6 loc_407CF6:                             ; CODE XREF: sub_4073B0+97E↓j
.text:00407CF6                 call    ds:libintl_gettext
.text:00407CFC                 mov     [esp+5Ch+var_50], esi
.text:00407D00                 mov     ebx, [esp+5Ch+arg_4]
.text:00407D04                 mov     edx, ds:_iob
.text:00407D0A                 mov     esi, [ebx]
.text:00407D0C                 add     edx, 40h ; '@'
.text:00407D0F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407D13                 mov     [esp+5Ch+MaxCount], esi
.text:00407D17                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00407D1A                 call    fprintf
.text:00407D1F
.text:00407D1F loc_407D1F:                             ; CODE XREF: sub_4073B0+936↑j
.text:00407D1F                 mov     [ebp+8], edi
.text:00407D22                 jmp     loc_407708
.text:00407D27 ; ---------------------------------------------------------------------------
.text:00407D27
.text:00407D27 loc_407D27:                             ; CODE XREF: sub_4073B0+93D↑j
.text:00407D27                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00407D2E                 jmp     short loc_407CF6
.text:00407D30 ; ---------------------------------------------------------------------------
.text:00407D30
.text:00407D30 loc_407D30:                             ; CODE XREF: sub_4073B0+26E↑j
.text:00407D30                 mov     edi, [esp+5Ch+var_14]
.text:00407D34                 test    edi, edi
.text:00407D36                 jnz     short loc_407D4E
.text:00407D38
.text:00407D38 loc_407D38:                             ; CODE XREF: sub_4073B0+9D4↓j
.text:00407D38                 mov     edx, [ebp+14h]
.text:00407D3B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407D3E                 call    strlen
.text:00407D43                 add     [ebp+14h], eax
.text:00407D46                 inc     dword ptr [ebp+0]
.text:00407D49                 jmp     loc_40788E
.text:00407D4E ; ---------------------------------------------------------------------------
.text:00407D4E
.text:00407D4E loc_407D4E:                             ; CODE XREF: sub_4073B0+986↑j
.text:00407D4E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00407D55                 call    ds:libintl_gettext
.text:00407D5B                 mov     ebx, [ebp+0]
.text:00407D5E                 mov     edi, [esp+5Ch+arg_4]
.text:00407D62                 mov     ecx, [edi+ebx*4]
.text:00407D65                 mov     ebx, ds:_iob
.text:00407D6B                 mov     [esp+5Ch+var_50], ecx
.text:00407D6F                 mov     esi, [edi]
.text:00407D71                 add     ebx, 40h ; '@'
.text:00407D74                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407D78                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00407D7B                 mov     [esp+5Ch+MaxCount], esi
.text:00407D7F                 call    fprintf
.text:00407D84                 jmp     short loc_407D38
.text:00407D86 ; ---------------------------------------------------------------------------
.text:00407D86
.text:00407D86 loc_407D86:                             ; CODE XREF: sub_4073B0+246↑j
.text:00407D86                 mov     ecx, [ebp+14h]
.text:00407D89                 mov     ebx, edi
.text:00407D8B                 mov     edx, [esi]
.text:00407D8D                 sub     ebx, ecx
.text:00407D8F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407D92                 call    strlen
.text:00407D97                 cmp     ebx, eax
.text:00407D99                 jz      short loc_407DF1
.text:00407D9B                 mov     ebx, [esp+5Ch+var_18]
.text:00407D9F                 test    ebx, ebx
.text:00407DA1                 jz      short loc_407DE0
.text:00407DA3                 mov     edx, [esp+5Ch+arg_14]
.text:00407DA7                 test    edx, edx
.text:00407DA9                 jnz     short loc_407DB7
.text:00407DAB                 mov     ecx, [esp+5Ch+var_18]
.text:00407DAF                 mov     ebx, [esi+4]
.text:00407DB2                 cmp     [ecx+4], ebx
.text:00407DB5                 jz      short loc_407DC4
.text:00407DB7
.text:00407DB7 loc_407DB7:                             ; CODE XREF: sub_4073B0+9F9↑j
.text:00407DB7                                         ; sub_4073B0+A1A↓j ...
.text:00407DB7                 mov     [esp+5Ch+var_20], 1
.text:00407DBF                 jmp     loc_4075FC
.text:00407DC4 ; ---------------------------------------------------------------------------
.text:00407DC4
.text:00407DC4 loc_407DC4:                             ; CODE XREF: sub_4073B0+A05↑j
.text:00407DC4                 mov     edx, [esi+8]
.text:00407DC7                 cmp     [ecx+8], edx
.text:00407DCA                 jnz     short loc_407DB7
.text:00407DCC                 mov     ebx, [esi+0Ch]
.text:00407DCF                 cmp     [ecx+0Ch], ebx
.text:00407DD2                 jnz     short loc_407DB7
.text:00407DD4                 jmp     loc_4075FC
.text:00407DD4 ; ---------------------------------------------------------------------------
.text:00407DD9                 align 10h
.text:00407DE0
.text:00407DE0 loc_407DE0:                             ; CODE XREF: sub_4073B0+9F1↑j
.text:00407DE0                 mov     [esp+5Ch+var_18], esi
.text:00407DE4                 mov     eax, [esp+5Ch+var_28]
.text:00407DE8                 mov     [esp+5Ch+var_24], eax
.text:00407DEC                 jmp     loc_4075FC
.text:00407DF1 ; ---------------------------------------------------------------------------
.text:00407DF1
.text:00407DF1 loc_407DF1:                             ; CODE XREF: sub_4073B0+9E9↑j
.text:00407DF1                 mov     [esp+5Ch+var_18], esi
.text:00407DF5                 mov     ecx, [esp+5Ch+var_28]
.text:00407DF9                 mov     [esp+5Ch+var_1C], 1
.text:00407E01                 mov     [esp+5Ch+var_24], ecx
.text:00407E05                 jmp     loc_407610
.text:00407E0A ; ---------------------------------------------------------------------------
.text:00407E0A
.text:00407E0A loc_407E0A:                             ; CODE XREF: sub_4073B0+1BF↑j
.text:00407E0A                 mov     eax, [esp+5Ch+Str]
.text:00407E0E                 movsx   esi, dl
.text:00407E11                 mov     [esp+5Ch+Str2], esi ; Val
.text:00407E15                 mov     [esp+5Ch+Str1], eax ; Str
.text:00407E18                 call    strchr
.text:00407E1D                 test    eax, eax
.text:00407E1F                 jnz     loc_4078D0
.text:00407E25                 jmp     loc_407575
.text:00407E2A ; ---------------------------------------------------------------------------
.text:00407E2A
.text:00407E2A loc_407E2A:                             ; CODE XREF: sub_4073B0+17C↑j
.text:00407E2A                 mov     ecx, 1
.text:00407E2F                 jmp     loc_407532
.text:00407E34 ; ---------------------------------------------------------------------------
.text:00407E34
.text:00407E34 loc_407E34:                             ; CODE XREF: sub_4073B0+D4↑j
.text:00407E34                                         ; sub_4073B0+130↑j
.text:00407E34                 mov     eax, [ebp+20h]
.text:00407E37                 cmp     eax, [ebp+24h]
.text:00407E3A                 jz      loc_407510
.text:00407E40                 mov     [ebp+0], eax
.text:00407E43                 jmp     loc_407510
.text:00407E48 ; ---------------------------------------------------------------------------
.text:00407E48
.text:00407E48 loc_407E48:                             ; CODE XREF: sub_4073B0+FE↑j
.text:00407E48                 mov     [ebp+20h], eax
.text:00407E4B                 jmp     loc_4074D0
.text:00407E50 ; ---------------------------------------------------------------------------
.text:00407E50
.text:00407E50 loc_407E50:                             ; CODE XREF: sub_4073B0+CA↑j
.text:00407E50                 mov     edx, [ebp+20h]
.text:00407E53                 mov     eax, [ebp+24h]
.text:00407E56                 cmp     edx, eax
.text:00407E58                 jz      short loc_407ED0
.text:00407E5A                 cmp     eax, ebx
.text:00407E5C                 jz      short loc_407E71
.text:00407E5E                 mov     [esp+5Ch+Str2], ebp
.text:00407E62                 mov     ebx, [esp+5Ch+arg_4]
.text:00407E66                 mov     [esp+5Ch+Str1], ebx
.text:00407E69                 call    sub_408060
.text:00407E6E                 mov     ebx, [ebp+0]
.text:00407E71
.text:00407E71 loc_407E71:                             ; CODE XREF: sub_4073B0+AAC↑j
.text:00407E71                                         ; sub_4073B0+B22↓j ...
.text:00407E71                 cmp     ebx, [esp+5Ch+arg_0]
.text:00407E75                 jge     short loc_407EC0
.text:00407E77                 mov     esi, [esp+5Ch+arg_4]
.text:00407E7B                 mov     eax, [esi+ebx*4]
.text:00407E7E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00407E81                 jz      short loc_407EC8
.text:00407E83                 lea     esi, [esi+0]
.text:00407E89                 lea     edi, [edi+0]
.text:00407E90
.text:00407E90 loc_407E90:                             ; CODE XREF: sub_4073B0+AFC↓j
.text:00407E90                                         ; sub_4073B0+B1C↓j
.text:00407E90                 lea     eax, [ebx+1]
.text:00407E93                 mov     ebx, eax
.text:00407E95                 mov     [ebp+0], eax
.text:00407E98                 cmp     eax, [esp+5Ch+arg_0]
.text:00407E9C                 jge     short loc_407EC0
.text:00407E9E                 mov     edi, [esp+5Ch+arg_4]
.text:00407EA2                 mov     edx, [edi+eax*4]
.text:00407EA5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00407EA8                 jz      short loc_407EB0
.text:00407EAA
.text:00407EAA loc_407EAA:                             ; CODE XREF: sub_4073B0+B04↓j
.text:00407EAA                 mov     ebx, eax
.text:00407EAC                 jmp     short loc_407E90
.text:00407EAC ; ---------------------------------------------------------------------------
.text:00407EAE                 align 10h
.text:00407EB0
.text:00407EB0 loc_407EB0:                             ; CODE XREF: sub_4073B0+AF8↑j
.text:00407EB0                 cmp     byte ptr [edx+1], 0
.text:00407EB4                 jz      short loc_407EAA
.text:00407EB6                 lea     esi, [esi+0]
.text:00407EB9                 lea     edi, [edi+0]
.text:00407EC0
.text:00407EC0 loc_407EC0:                             ; CODE XREF: sub_4073B0+AC5↑j
.text:00407EC0                                         ; sub_4073B0+AEC↑j ...
.text:00407EC0                 mov     [ebp+24h], ebx
.text:00407EC3                 jmp     loc_407480
.text:00407EC8 ; ---------------------------------------------------------------------------
.text:00407EC8
.text:00407EC8 loc_407EC8:                             ; CODE XREF: sub_4073B0+AD1↑j
.text:00407EC8                 cmp     byte ptr [eax+1], 0
.text:00407ECC                 jz      short loc_407E90
.text:00407ECE                 jmp     short loc_407EC0
.text:00407ED0 ; ---------------------------------------------------------------------------
.text:00407ED0
.text:00407ED0 loc_407ED0:                             ; CODE XREF: sub_4073B0+AA8↑j
.text:00407ED0                 cmp     edx, ebx
.text:00407ED2                 jz      short loc_407E71
.text:00407ED4                 mov     [ebp+20h], ebx
.text:00407ED7                 jmp     short loc_407E71
.text:00407ED9 ; ---------------------------------------------------------------------------
.text:00407ED9
.text:00407ED9 loc_407ED9:                             ; CODE XREF: sub_4073B0+88↑j
.text:00407ED9                 mov     dword ptr [ebp+18h], 0
.text:00407EE0                 mov     esi, [esp+5Ch+Str]
.text:00407EE4
.text:00407EE4 loc_407EE4:                             ; CODE XREF: sub_4073B0+B49↓j
.text:00407EE4                 inc     esi
.text:00407EE5                 jmp     loc_407448
.text:00407EE5 ; ---------------------------------------------------------------------------
.text:00407EEA                 align 10h
.text:00407EF0
.text:00407EF0 loc_407EF0:                             ; CODE XREF: sub_4073B0+80↑j
.text:00407EF0                 mov     dword ptr [ebp+18h], 2
.text:00407EF7                 mov     esi, ecx
.text:00407EF9                 jmp     short loc_407EE4
.text:00407EF9 ; ---------------------------------------------------------------------------
.text:00407EFB                 align 10h
.text:00407F00
.text:00407F00 loc_407F00:                             ; CODE XREF: sub_4073B0+69↑j
.text:00407F00                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00407F07                 call    getenv
.text:00407F0C                 test    eax, eax
.text:00407F0E                 jz      loc_407424
.text:00407F14                 jmp     loc_40741F
.text:00407F14 ; ---------------------------------------------------------------------------
.text:00407F19                 align 10h
.text:00407F20
.text:00407F20 loc_407F20:                             ; CODE XREF: sub_4073B0+3F↑j
.text:00407F20                 mov     dword ptr [ebp+0], 1
.text:00407F27                 mov     ebx, 1
.text:00407F2C                 jmp     loc_407400
.text:00407F2C sub_4073B0      endp
.text:00407F2C
.text:00407F31 ; ---------------------------------------------------------------------------
.text:00407F31                 jmp     short sub_407F40
.text:00407F31 ; ---------------------------------------------------------------------------
.text:00407F33                 align 10h
.text:00407F40
.text:00407F40 ; =============== S U B R O U T I N E =======================================
.text:00407F40
.text:00407F40
.text:00407F40 ; int __cdecl sub_407F40(int, int, char *, int, int, int, int)
.text:00407F40 sub_407F40      proc near               ; CODE XREF: .text:00407F31↑j
.text:00407F40                                         ; sub_4086E0+3A↓p ...
.text:00407F40
.text:00407F40 var_2C          = dword ptr -2Ch
.text:00407F40 var_28          = dword ptr -28h
.text:00407F40 Str             = dword ptr -24h
.text:00407F40 var_20          = dword ptr -20h
.text:00407F40 var_1C          = dword ptr -1Ch
.text:00407F40 var_18          = dword ptr -18h
.text:00407F40 var_14          = dword ptr -14h
.text:00407F40 var_10          = dword ptr -10h
.text:00407F40 arg_0           = dword ptr  4
.text:00407F40 arg_4           = dword ptr  8
.text:00407F40 arg_8           = dword ptr  0Ch
.text:00407F40 arg_C           = dword ptr  10h
.text:00407F40 arg_10          = dword ptr  14h
.text:00407F40 arg_14          = dword ptr  18h
.text:00407F40 arg_18          = dword ptr  1Ch
.text:00407F40
.text:00407F40                 sub     esp, 2Ch
.text:00407F43                 mov     edx, dword_414020
.text:00407F49                 mov     [esp+2Ch+var_10], offset dword_4151C0 ; int
.text:00407F51                 mov     ecx, dword_414024
.text:00407F57                 mov     ds:dword_4151C0, edx
.text:00407F5D                 mov     edx, [esp+2Ch+arg_18]
.text:00407F61                 mov     ds:dword_4151C4, ecx
.text:00407F67                 mov     ecx, [esp+2Ch+arg_14]
.text:00407F6B                 mov     [esp+2Ch+var_14], edx ; int
.text:00407F6F                 mov     edx, [esp+2Ch+arg_10]
.text:00407F73                 mov     [esp+2Ch+var_18], ecx ; int
.text:00407F77                 mov     ecx, [esp+2Ch+arg_C]
.text:00407F7B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00407F7F                 mov     edx, [esp+2Ch+arg_8]
.text:00407F83                 mov     [esp+2Ch+var_20], ecx ; int
.text:00407F87                 mov     ecx, [esp+2Ch+arg_4]
.text:00407F8B                 mov     [esp+2Ch+Str], edx ; Str
.text:00407F8F                 mov     edx, [esp+2Ch+arg_0]
.text:00407F93                 mov     [esp+2Ch+var_28], ecx ; int
.text:00407F97                 mov     [esp+2Ch+var_2C], edx ; int
.text:00407F9A                 call    sub_4073B0
.text:00407F9F                 mov     ecx, ds:dword_4151C0
.text:00407FA5                 mov     dword_414020, ecx
.text:00407FAB                 mov     ecx, ds:dword_4151CC
.text:00407FB1                 mov     ds:dword_415690, ecx
.text:00407FB7                 mov     ecx, ds:dword_4151C8
.text:00407FBD                 mov     dword_414028, ecx
.text:00407FC3                 add     esp, 2Ch
.text:00407FC6                 retn
.text:00407FC6 sub_407F40      endp
.text:00407FC6
.text:00407FC6 ; ---------------------------------------------------------------------------
.text:00407FC7                 align 10h
.text:00407FD0                 sub     esp, 2Ch
.text:00407FD3                 mov     edx, dword_414020
.text:00407FD9                 mov     dword ptr [esp+1Ch], offset dword_4151C0
.text:00407FE1                 mov     ecx, dword_414024
.text:00407FE7                 mov     dword ptr [esp+18h], 1
.text:00407FEF                 mov     ds:dword_4151C0, edx
.text:00407FF5                 mov     edx, [esp+38h]
.text:00407FF9                 mov     ds:dword_4151C4, ecx
.text:00407FFF                 mov     ecx, [esp+34h]
.text:00408003                 mov     [esp+8], edx
.text:00408007                 mov     edx, [esp+30h]
.text:0040800B                 mov     [esp+4], ecx
.text:0040800F                 mov     dword ptr [esp+14h], 0
.text:00408017                 mov     dword ptr [esp+10h], 0
.text:0040801F                 mov     dword ptr [esp+0Ch], 0
.text:00408027                 mov     [esp], edx
.text:0040802A                 call    sub_4073B0
.text:0040802F                 mov     ecx, ds:dword_4151C0
.text:00408035                 mov     dword_414020, ecx
.text:0040803B                 mov     ecx, ds:dword_4151CC
.text:00408041                 mov     ds:dword_415690, ecx
.text:00408047                 mov     ecx, ds:dword_4151C8
.text:0040804D                 mov     dword_414028, ecx
.text:00408053                 add     esp, 2Ch
.text:00408056                 retn
.text:00408056 ; ---------------------------------------------------------------------------
.text:00408057                 align 10h
.text:00408060
.text:00408060 ; =============== S U B R O U T I N E =======================================
.text:00408060
.text:00408060
.text:00408060 sub_408060      proc near               ; CODE XREF: sub_4073B0+113↑p
.text:00408060                                         ; sub_4073B0+AB9↑p
.text:00408060
.text:00408060 var_2C          = dword ptr -2Ch
.text:00408060 var_28          = dword ptr -28h
.text:00408060 var_24          = dword ptr -24h
.text:00408060 var_20          = dword ptr -20h
.text:00408060 var_1C          = dword ptr -1Ch
.text:00408060 var_18          = dword ptr -18h
.text:00408060 var_14          = dword ptr -14h
.text:00408060 arg_0           = dword ptr  4
.text:00408060 arg_4           = dword ptr  8
.text:00408060
.text:00408060                 push    ebp
.text:00408061                 push    edi
.text:00408062                 push    esi
.text:00408063                 push    ebx
.text:00408064                 sub     esp, 1Ch
.text:00408067                 mov     ecx, [esp+2Ch+arg_4]
.text:0040806B                 mov     eax, [esp+2Ch+arg_4]
.text:0040806F                 mov     ebx, [esp+2Ch+arg_4]
.text:00408073                 mov     edx, [ecx+20h]
.text:00408076                 mov     edi, [esp+2Ch+arg_0]
.text:0040807A                 mov     ecx, [ebx]
.text:0040807C                 mov     [esp+2Ch+var_2C], edx
.text:0040807F                 mov     [esp+2Ch+var_14], edx
.text:00408083                 mov     edx, [eax+24h]
.text:00408086                 mov     [esp+2Ch+var_28], ecx
.text:0040808A                 mov     [esp+2Ch+var_1C], ecx
.text:0040808E                 cmp     ecx, edx
.text:00408090                 mov     [esp+2Ch+var_18], edx
.text:00408094                 jle     short loc_408110
.text:00408096                 mov     esi, [esp+2Ch+var_2C]
.text:00408099                 cmp     edx, esi
.text:0040809B                 jle     short loc_408110
.text:0040809D                 lea     esi, [esi+0]
.text:004080A0
.text:004080A0 loc_4080A0:                             ; CODE XREF: sub_408060+A1↓j
.text:004080A0                 mov     ebx, [esp+2Ch+var_1C]
.text:004080A4                 mov     edx, [esp+2Ch+var_18]
.text:004080A8                 mov     ebp, [esp+2Ch+var_18]
.text:004080AC                 mov     eax, [esp+2Ch+var_14]
.text:004080B0                 sub     ebx, edx
.text:004080B2                 mov     [esp+2Ch+var_20], ebx
.text:004080B6                 sub     ebp, eax
.text:004080B8                 cmp     ebx, ebp
.text:004080BA                 jle     short loc_408135
.text:004080BC                 xor     esi, esi
.text:004080BE                 cmp     esi, ebp
.text:004080C0                 jge     short loc_4080ED
.text:004080C2                 mov     ecx, [esp+2Ch+var_1C]
.text:004080C6                 sub     ecx, ebp
.text:004080C8                 mov     [esp+2Ch+var_24], ecx
.text:004080CC                 lea     esi, [esi+0]
.text:004080D0
.text:004080D0 loc_4080D0:                             ; CODE XREF: sub_408060+8B↓j
.text:004080D0                 mov     ecx, [esp+2Ch+var_14]
.text:004080D4                 mov     edx, [esp+2Ch+var_24]
.text:004080D8                 add     ecx, esi
.text:004080DA                 add     edx, esi
.text:004080DC                 mov     ebx, [edi+ecx*4]
.text:004080DF                 mov     eax, [edi+edx*4]
.text:004080E2                 inc     esi
.text:004080E3                 cmp     esi, ebp
.text:004080E5                 mov     [edi+ecx*4], eax
.text:004080E8                 mov     [edi+edx*4], ebx
.text:004080EB                 jl      short loc_4080D0
.text:004080ED
.text:004080ED loc_4080ED:                             ; CODE XREF: sub_408060+60↑j
.text:004080ED                 sub     [esp+2Ch+var_1C], ebp
.text:004080F1
.text:004080F1 loc_4080F1:                             ; CODE XREF: sub_408060+107↓j
.text:004080F1                 mov     eax, [esp+2Ch+var_18]
.text:004080F5                 cmp     [esp+2Ch+var_1C], eax
.text:004080F9                 jle     short loc_408110
.text:004080FB                 mov     ebp, [esp+2Ch+var_14]
.text:004080FF                 cmp     eax, ebp
.text:00408101                 jg      short loc_4080A0
.text:00408103                 lea     esi, [esi+0]
.text:00408109                 lea     edi, [edi+0]
.text:00408110
.text:00408110 loc_408110:                             ; CODE XREF: sub_408060+34↑j
.text:00408110                                         ; sub_408060+3B↑j ...
.text:00408110                 mov     esi, [esp+2Ch+var_28]
.text:00408114                 mov     ecx, [esp+2Ch+var_18]
.text:00408118                 mov     eax, [esp+2Ch+var_2C]
.text:0040811B                 mov     edi, [esp+2Ch+arg_4]
.text:0040811F                 mov     edx, [esp+2Ch+var_28]
.text:00408123                 sub     esi, ecx
.text:00408125                 add     esi, eax
.text:00408127                 mov     [edi+20h], esi
.text:0040812A                 mov     [edi+24h], edx
.text:0040812D                 add     esp, 1Ch
.text:00408130                 pop     ebx
.text:00408131                 pop     esi
.text:00408132                 pop     edi
.text:00408133                 pop     ebp
.text:00408134                 retn
.text:00408135 ; ---------------------------------------------------------------------------
.text:00408135
.text:00408135 loc_408135:                             ; CODE XREF: sub_408060+5A↑j
.text:00408135                 xor     esi, esi
.text:00408137                 cmp     esi, [esp+2Ch+var_20]
.text:0040813B                 jge     short loc_40815F
.text:0040813D                 lea     esi, [esi+0]
.text:00408140
.text:00408140 loc_408140:                             ; CODE XREF: sub_408060+FD↓j
.text:00408140                 mov     ebx, [esp+2Ch+var_14]
.text:00408144                 mov     ebp, [esp+2Ch+var_18]
.text:00408148                 add     ebx, esi
.text:0040814A                 add     ebp, esi
.text:0040814C                 mov     edx, [edi+ebx*4]
.text:0040814F                 inc     esi
.text:00408150                 cmp     esi, [esp+2Ch+var_20]
.text:00408154                 mov     ecx, [edi+ebp*4]
.text:00408157                 mov     [edi+ebx*4], ecx
.text:0040815A                 mov     [edi+ebp*4], edx
.text:0040815D                 jl      short loc_408140
.text:0040815F
.text:0040815F loc_40815F:                             ; CODE XREF: sub_408060+DB↑j
.text:0040815F                 mov     esi, [esp+2Ch+var_20]
.text:00408163                 add     [esp+2Ch+var_14], esi
.text:00408167                 jmp     short loc_4080F1
.text:00408167 sub_408060      endp
.text:00408167
.text:00408167 ; ---------------------------------------------------------------------------
.text:00408169                 align 20h
.text:00408180                 sub     esp, 0Ch
.text:00408183                 mov     edx, [esp+14h]
.text:00408187                 mov     dword ptr [esp+4], 5
.text:0040818F                 mov     [esp+8], edx
.text:00408193                 mov     edx, [esp+10h]
.text:00408197                 mov     [esp], edx
.text:0040819A                 call    sub_40A730
.text:0040819F                 add     esp, 0Ch
.text:004081A2                 retn
.text:004081A2 ; ---------------------------------------------------------------------------
.text:004081A3                 align 10h
.text:004081B0
.text:004081B0 ; =============== S U B R O U T I N E =======================================
.text:004081B0
.text:004081B0
.text:004081B0 ; int __cdecl sub_4081B0(char *)
.text:004081B0 sub_4081B0      proc near               ; CODE XREF: sub_4025D0+1C0D↑p
.text:004081B0
.text:004081B0 var_C           = dword ptr -0Ch
.text:004081B0 var_8           = dword ptr -8
.text:004081B0 var_4           = dword ptr -4
.text:004081B0 arg_0           = dword ptr  4
.text:004081B0
.text:004081B0                 sub     esp, 0Ch
.text:004081B3                 mov     edx, [esp+0Ch+arg_0]
.text:004081B7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004081BF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004081C6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004081CA                 call    sub_40A730
.text:004081CF                 add     esp, 0Ch
.text:004081D2                 retn
.text:004081D2 sub_4081B0      endp
.text:004081D2
.text:004081D2 ; ---------------------------------------------------------------------------
.text:004081D3                 align 10h
.text:004081E0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004081E0                                         ; DATA XREF: .data:off_414040↓o
.text:00408212 ; const char aSSS[]
.text:00408212 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4084D0+50↓o
.text:0040821E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040821E                                         ; DATA XREF: sub_4084D0:loc_408571↓o
.text:0040822E                 align 20h
.text:00408240 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00408240                                         ; DATA XREF: sub_4084D0+100↓o
.text:00408240                 db 'ere is NO',0Ah
.text:00408240                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00408240                 db 'R PURPOSE.',0Ah,0
.text:004082D8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004082D8                                         ; DATA XREF: sub_4084D0:loc_408611↓o
.text:004082EF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004082EF                                         ; DATA XREF: sub_4084D0:loc_40861D↓o
.text:0040830B                 align 20h
.text:00408320 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00408320                                         ; DATA XREF: sub_4084D0:loc_408629↓o
.text:00408320                 db 'and %s.',0Ah,0
.text:00408340 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00408340                                         ; DATA XREF: sub_4084D0:loc_408635↓o
.text:00408340                 db '%s, and %s.',0Ah,0
.text:00408364                 align 20h
.text:00408380 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00408380                                         ; DATA XREF: sub_4084D0:loc_408641↓o
.text:00408380                 db '%s, %s, and %s.',0Ah,0
.text:004083A8                 align 20h
.text:004083C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004083C0                                         ; DATA XREF: sub_4084D0:loc_40864D↓o
.text:004083C0                 db '%s, %s, %s, and %s.',0Ah,0
.text:004083EC                 align 20h
.text:00408400 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00408400                                         ; DATA XREF: sub_4084D0:loc_408659↓o
.text:00408400                 db '%s, %s, %s, %s,',0Ah
.text:00408400                 db 'and %s.',0Ah,0
.text:00408430                 align 20h
.text:00408440 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00408440                                         ; DATA XREF: sub_4084D0:loc_408665↓o
.text:00408440                 db '%s, %s, %s, %s,',0Ah
.text:00408440                 db '%s, and %s.',0Ah,0
.text:00408474                 align 10h
.text:00408480 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00408480                                         ; DATA XREF: sub_4084D0:def_40853D↓o
.text:00408480                 db '%s, %s, %s, %s,',0Ah
.text:00408480                 db '%s, %s, and others.',0Ah,0
.text:004084BC ; const char aSS[]
.text:004084BC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4084D0+1B5↓o
.text:004084C3                 align 10h
.text:004084D0
.text:004084D0 ; =============== S U B R O U T I N E =======================================
.text:004084D0
.text:004084D0
.text:004084D0 ; int __cdecl sub_4084D0(FILE *, FILE *, int, int, va_list)
.text:004084D0 sub_4084D0      proc near               ; CODE XREF: sub_4086A0+2A↓p
.text:004084D0
.text:004084D0 Stream          = dword ptr -2Ch
.text:004084D0 Format          = dword ptr -28h
.text:004084D0 ArgList         = dword ptr -24h
.text:004084D0 var_20          = dword ptr -20h
.text:004084D0 var_1C          = dword ptr -1Ch
.text:004084D0 var_14          = dword ptr -14h
.text:004084D0 arg_0           = dword ptr  4
.text:004084D0 arg_4           = dword ptr  8
.text:004084D0 arg_8           = dword ptr  0Ch
.text:004084D0 arg_C           = dword ptr  10h
.text:004084D0 arg_10          = dword ptr  14h
.text:004084D0
.text:004084D0                 push    ebp
.text:004084D1                 push    edi
.text:004084D2                 push    esi
.text:004084D3                 push    ebx
.text:004084D4                 sub     esp, 1Ch
.text:004084D7                 xor     ebx, ebx
.text:004084D9                 mov     edi, [esp+2Ch+arg_10]
.text:004084DD                 mov     edx, [esp+2Ch+arg_8]
.text:004084E1                 mov     esi, [esp+2Ch+arg_0]
.text:004084E5                 mov     eax, [edi]
.text:004084E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004084EB                 mov     [esp+2Ch+var_14], edx
.text:004084EF                 mov     ebp, [esp+2Ch+arg_C]
.text:004084F3                 lea     edx, [edi+4]
.text:004084F6                 test    eax, eax
.text:004084F8                 jz      short loc_40850C
.text:004084FA                 lea     esi, [esi+0]
.text:00408500
.text:00408500 loc_408500:                             ; CODE XREF: sub_4084D0+3A↓j
.text:00408500                 mov     eax, edx
.text:00408502                 inc     ebx
.text:00408503                 mov     eax, [eax]
.text:00408505                 add     edx, 4
.text:00408508                 test    eax, eax
.text:0040850A                 jnz     short loc_408500
.text:0040850C
.text:0040850C loc_40850C:                             ; CODE XREF: sub_4084D0+28↑j
.text:0040850C                 test    ecx, ecx
.text:0040850E                 jz      loc_40867D
.text:00408514                 mov     [esp+2Ch+var_1C], ebp
.text:00408518                 mov     edx, [esp+2Ch+var_14]
.text:0040851C                 mov     [esp+2Ch+ArgList], ecx
.text:00408520                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00408528                 mov     [esp+2Ch+var_20], edx
.text:0040852C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040852F                 call    fprintf
.text:00408534
.text:00408534 loc_408534:                             ; CODE XREF: sub_4084D0+1C9↓j
.text:00408534                 cmp     ebx, 9          ; switch 10 cases
.text:00408537                 ja      def_40853D      ; jumptable 0040853D default case
.text:0040853D                 jmp     ds:jpt_40853D[ebx*4] ; switch jump
.text:0040853D ; ---------------------------------------------------------------------------
.text:00408544 jpt_40853D      dd offset loc_40856C    ; DATA XREF: sub_4084D0+6D↑r
.text:00408544                 dd offset loc_408571    ; jump table for switch statement
.text:00408544                 dd offset loc_408611
.text:00408544                 dd offset loc_40861D
.text:00408544                 dd offset loc_408629
.text:00408544                 dd offset loc_408635
.text:00408544                 dd offset loc_408641
.text:00408544                 dd offset loc_40864D
.text:00408544                 dd offset loc_408659
.text:00408544                 dd offset loc_408665
.text:0040856C ; ---------------------------------------------------------------------------
.text:0040856C
.text:0040856C loc_40856C:                             ; CODE XREF: sub_4084D0+6D↑j
.text:0040856C                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:0040856C                 call    abort           ; jumptable 0040853D case 0
.text:00408571 ; ---------------------------------------------------------------------------
.text:00408571
.text:00408571 loc_408571:                             ; CODE XREF: sub_4084D0+6D↑j
.text:00408571                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:00408571                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040853D case 1
.text:00408578                 nop
.text:00408579                 lea     esi, [esi+0]
.text:00408580
.text:00408580 loc_408580:                             ; CODE XREF: sub_4084D0+148↓j
.text:00408580                                         ; sub_4084D0+154↓j ...
.text:00408580                 call    ds:libintl_gettext
.text:00408586                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040858A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040858D                 mov     [esp+2Ch+Format], eax ; Format
.text:00408591                 call    vfprintf
.text:00408596                 mov     ebx, [esi+4]
.text:00408599                 dec     ebx
.text:0040859A                 test    ebx, ebx
.text:0040859C                 mov     [esi+4], ebx
.text:0040859F                 js      short loc_4085FF
.text:004085A1                 mov     edi, [esi]
.text:004085A3                 mov     byte ptr [edi], 0Ah
.text:004085A6                 inc     dword ptr [esi]
.text:004085A8
.text:004085A8 loc_4085A8:                             ; CODE XREF: sub_4084D0+13F↓j
.text:004085A8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004085AC                 mov     edx, off_414040 ; "Copyright (C) 2005 Free Software Founda"...
.text:004085B2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004085B5                 call    fputs
.text:004085BA                 mov     ebp, [esi+4]
.text:004085BD                 dec     ebp
.text:004085BE                 test    ebp, ebp
.text:004085C0                 mov     [esi+4], ebp
.text:004085C3                 js      short loc_4085ED
.text:004085C5                 mov     ecx, [esi]
.text:004085C7                 mov     byte ptr [ecx], 0Ah
.text:004085CA                 inc     dword ptr [esi]
.text:004085CC
.text:004085CC loc_4085CC:                             ; CODE XREF: sub_4084D0+12D↓j
.text:004085CC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004085D0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004085D7                 call    ds:libintl_gettext
.text:004085DD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004085E1                 add     esp, 1Ch
.text:004085E4                 pop     ebx
.text:004085E5                 pop     esi
.text:004085E6                 pop     edi
.text:004085E7                 pop     ebp
.text:004085E8                 jmp     fputs
.text:004085ED ; ---------------------------------------------------------------------------
.text:004085ED
.text:004085ED loc_4085ED:                             ; CODE XREF: sub_4084D0+F3↑j
.text:004085ED                 mov     [esp+2Ch+Format], esi ; File
.text:004085F1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004085F8                 call    _flsbuf
.text:004085FD                 jmp     short loc_4085CC
.text:004085FF ; ---------------------------------------------------------------------------
.text:004085FF
.text:004085FF loc_4085FF:                             ; CODE XREF: sub_4084D0+CF↑j
.text:004085FF                 mov     [esp+2Ch+Format], esi ; File
.text:00408603                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040860A                 call    _flsbuf
.text:0040860F                 jmp     short loc_4085A8
.text:00408611 ; ---------------------------------------------------------------------------
.text:00408611
.text:00408611 loc_408611:                             ; CODE XREF: sub_4084D0+6D↑j
.text:00408611                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:00408611                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040853D case 2
.text:00408618                 jmp     loc_408580
.text:0040861D ; ---------------------------------------------------------------------------
.text:0040861D
.text:0040861D loc_40861D:                             ; CODE XREF: sub_4084D0+6D↑j
.text:0040861D                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:0040861D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040853D case 3
.text:00408624                 jmp     loc_408580
.text:00408629 ; ---------------------------------------------------------------------------
.text:00408629
.text:00408629 loc_408629:                             ; CODE XREF: sub_4084D0+6D↑j
.text:00408629                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:00408629                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040853D case 4
.text:00408630                 jmp     loc_408580
.text:00408635 ; ---------------------------------------------------------------------------
.text:00408635
.text:00408635 loc_408635:                             ; CODE XREF: sub_4084D0+6D↑j
.text:00408635                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:00408635                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040853D case 5
.text:0040863C                 jmp     loc_408580
.text:00408641 ; ---------------------------------------------------------------------------
.text:00408641
.text:00408641 loc_408641:                             ; CODE XREF: sub_4084D0+6D↑j
.text:00408641                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:00408641                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040853D case 6
.text:00408648                 jmp     loc_408580
.text:0040864D ; ---------------------------------------------------------------------------
.text:0040864D
.text:0040864D loc_40864D:                             ; CODE XREF: sub_4084D0+6D↑j
.text:0040864D                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:0040864D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040853D case 7
.text:00408654                 jmp     loc_408580
.text:00408659 ; ---------------------------------------------------------------------------
.text:00408659
.text:00408659 loc_408659:                             ; CODE XREF: sub_4084D0+6D↑j
.text:00408659                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:00408659                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040853D case 8
.text:00408660                 jmp     loc_408580
.text:00408665 ; ---------------------------------------------------------------------------
.text:00408665
.text:00408665 loc_408665:                             ; CODE XREF: sub_4084D0+6D↑j
.text:00408665                                         ; DATA XREF: sub_4084D0:jpt_40853D↑o
.text:00408665                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040853D case 9
.text:0040866C                 jmp     loc_408580
.text:00408671 ; ---------------------------------------------------------------------------
.text:00408671
.text:00408671 def_40853D:                             ; CODE XREF: sub_4084D0+67↑j
.text:00408671                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040853D default case
.text:00408678                 jmp     loc_408580
.text:0040867D ; ---------------------------------------------------------------------------
.text:0040867D
.text:0040867D loc_40867D:                             ; CODE XREF: sub_4084D0+3E↑j
.text:0040867D                 mov     [esp+2Ch+var_20], ebp
.text:00408681                 mov     ecx, [esp+2Ch+var_14]
.text:00408685                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040868D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408690                 mov     [esp+2Ch+ArgList], ecx
.text:00408694                 call    fprintf
.text:00408699                 jmp     loc_408534
.text:00408699 sub_4084D0      endp
.text:00408699
.text:00408699 ; ---------------------------------------------------------------------------
.text:0040869E                 align 10h
.text:004086A0
.text:004086A0 ; =============== S U B R O U T I N E =======================================
.text:004086A0
.text:004086A0
.text:004086A0 ; int __cdecl sub_4086A0(FILE *, FILE *, int, int, char)
.text:004086A0 sub_4086A0      proc near               ; CODE XREF: sub_4025D0+6A2↑p
.text:004086A0
.text:004086A0 var_1C          = dword ptr -1Ch
.text:004086A0 var_18          = dword ptr -18h
.text:004086A0 var_14          = dword ptr -14h
.text:004086A0 var_10          = dword ptr -10h
.text:004086A0 var_C           = dword ptr -0Ch
.text:004086A0 arg_0           = dword ptr  4
.text:004086A0 arg_4           = dword ptr  8
.text:004086A0 arg_8           = dword ptr  0Ch
.text:004086A0 arg_C           = dword ptr  10h
.text:004086A0 arg_10          = byte ptr  14h
.text:004086A0
.text:004086A0                 sub     esp, 1Ch
.text:004086A3                 mov     edx, [esp+1Ch+arg_C]
.text:004086A7                 lea     ecx, [esp+1Ch+arg_10]
.text:004086AB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004086AF                 mov     ecx, [esp+1Ch+arg_8]
.text:004086B3                 mov     [esp+1Ch+var_10], edx ; int
.text:004086B7                 mov     edx, [esp+1Ch+arg_4]
.text:004086BB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004086BF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004086C3                 mov     edx, [esp+1Ch+arg_0]
.text:004086C7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004086CA                 call    sub_4084D0
.text:004086CF                 add     esp, 1Ch
.text:004086D2                 retn
.text:004086D2 sub_4086A0      endp
.text:004086D2
.text:004086D2 ; ---------------------------------------------------------------------------
.text:004086D3                 align 10h
.text:004086E0
.text:004086E0 ; =============== S U B R O U T I N E =======================================
.text:004086E0
.text:004086E0
.text:004086E0 ; int __cdecl sub_4086E0(int, int, char *, int, int)
.text:004086E0 sub_4086E0      proc near               ; CODE XREF: sub_4025D0+161↑p
.text:004086E0
.text:004086E0 var_1C          = dword ptr -1Ch
.text:004086E0 var_18          = dword ptr -18h
.text:004086E0 var_14          = dword ptr -14h
.text:004086E0 var_10          = dword ptr -10h
.text:004086E0 var_C           = dword ptr -0Ch
.text:004086E0 var_8           = dword ptr -8
.text:004086E0 var_4           = dword ptr -4
.text:004086E0 arg_0           = dword ptr  4
.text:004086E0 arg_4           = dword ptr  8
.text:004086E0 arg_8           = dword ptr  0Ch
.text:004086E0 arg_C           = dword ptr  10h
.text:004086E0 arg_10          = dword ptr  14h
.text:004086E0
.text:004086E0                 sub     esp, 1Ch
.text:004086E3                 mov     edx, [esp+1Ch+arg_C]
.text:004086E7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004086EF                 mov     ecx, [esp+1Ch+arg_10]
.text:004086F3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004086FB                 mov     [esp+1Ch+var_10], edx ; int
.text:004086FF                 mov     edx, [esp+1Ch+arg_4]
.text:00408703                 mov     [esp+1Ch+var_C], ecx ; int
.text:00408707                 mov     ecx, [esp+1Ch+arg_8]
.text:0040870B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040870F                 mov     edx, [esp+1Ch+arg_0]
.text:00408713                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00408717                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040871A                 call    sub_407F40
.text:0040871F                 add     esp, 1Ch
.text:00408722                 retn
.text:00408722 sub_4086E0      endp
.text:00408722
.text:00408722 ; ---------------------------------------------------------------------------
.text:00408723                 align 10h
.text:00408730                 sub     esp, 2Ch
.text:00408733                 mov     edx, [esp+44h]
.text:00408737                 mov     dword ptr [esp+18h], 0
.text:0040873F                 mov     ecx, [esp+40h]
.text:00408743                 mov     dword ptr [esp+14h], 0
.text:0040874B                 mov     [esp+1Ch], edx
.text:0040874F                 mov     edx, [esp+3Ch]
.text:00408753                 mov     [esp+10h], ecx
.text:00408757                 mov     ecx, [esp+38h]
.text:0040875B                 mov     [esp+0Ch], edx
.text:0040875F                 mov     edx, [esp+34h]
.text:00408763                 mov     [esp+8], ecx
.text:00408767                 mov     [esp+4], edx
.text:0040876B                 mov     edx, [esp+30h]
.text:0040876F                 mov     [esp], edx
.text:00408772                 call    sub_4073B0
.text:00408777                 add     esp, 2Ch
.text:0040877A                 retn
.text:0040877A ; ---------------------------------------------------------------------------
.text:0040877B                 align 10h
.text:00408780                 sub     esp, 1Ch
.text:00408783                 mov     edx, [esp+2Ch]
.text:00408787                 mov     dword ptr [esp+18h], 0
.text:0040878F                 mov     ecx, [esp+30h]
.text:00408793                 mov     dword ptr [esp+14h], 1
.text:0040879B                 mov     [esp+0Ch], edx
.text:0040879F                 mov     edx, [esp+24h]
.text:004087A3                 mov     [esp+10h], ecx
.text:004087A7                 mov     ecx, [esp+28h]
.text:004087AB                 mov     [esp+4], edx
.text:004087AF                 mov     edx, [esp+20h]
.text:004087B3                 mov     [esp+8], ecx
.text:004087B7                 mov     [esp], edx
.text:004087BA                 call    sub_407F40
.text:004087BF                 add     esp, 1Ch
.text:004087C2                 retn
.text:004087C2 ; ---------------------------------------------------------------------------
.text:004087C3                 align 10h
.text:004087D0                 sub     esp, 2Ch
.text:004087D3                 mov     edx, [esp+44h]
.text:004087D7                 mov     dword ptr [esp+18h], 0
.text:004087DF                 mov     ecx, [esp+40h]
.text:004087E3                 mov     dword ptr [esp+14h], 1
.text:004087EB                 mov     [esp+1Ch], edx
.text:004087EF                 mov     edx, [esp+3Ch]
.text:004087F3                 mov     [esp+10h], ecx
.text:004087F7                 mov     ecx, [esp+38h]
.text:004087FB                 mov     [esp+0Ch], edx
.text:004087FF                 mov     edx, [esp+34h]
.text:00408803                 mov     [esp+8], ecx
.text:00408807                 mov     [esp+4], edx
.text:0040880B                 mov     edx, [esp+30h]
.text:0040880F                 mov     [esp], edx
.text:00408812                 call    sub_4073B0
.text:00408817                 add     esp, 2Ch
.text:0040881A                 retn
.text:0040881A ; ---------------------------------------------------------------------------
.text:0040881B                 align 10h
.text:00408820                 mov     edx, [esp+4]
.text:00408824                 mov     ds:dword_4151F0, edx
.text:0040882A                 retn
.text:0040882A ; ---------------------------------------------------------------------------
.text:0040882B aWriteError_0   db 'write error',0      ; DATA XREF: sub_408850:loc_408899↓o
.text:00408837 ; const char aSS_0[]
.text:00408837 aSS_0           db '%s: %s',0           ; DATA XREF: sub_408850+77↓o
.text:0040883E ; const char aS_2[]
.text:0040883E aS_2            db '%s',0               ; DATA XREF: sub_408850+A0↓o
.text:00408841 ; ---------------------------------------------------------------------------
.text:00408841                 jmp     short sub_408850
.text:00408841 ; ---------------------------------------------------------------------------
.text:00408843                 align 10h
.text:00408850
.text:00408850 ; =============== S U B R O U T I N E =======================================
.text:00408850
.text:00408850
.text:00408850 ; void __cdecl sub_408850()
.text:00408850 sub_408850      proc near               ; CODE XREF: .text:00408841↑j
.text:00408850                                         ; DATA XREF: sub_4025D0+82↑o
.text:00408850
.text:00408850 Stream          = dword ptr -2Ch
.text:00408850 ErrorMessage    = dword ptr -28h
.text:00408850 var_24          = dword ptr -24h
.text:00408850 var_20          = byte ptr -20h
.text:00408850 var_1C          = dword ptr -1Ch
.text:00408850 var_9           = byte ptr -9
.text:00408850
.text:00408850                 push    esi
.text:00408851                 push    ebx
.text:00408852                 sub     esp, 24h
.text:00408855                 mov     edx, ds:_iob
.text:0040885B                 mov     ecx, [edx+2Ch]
.text:0040885E                 lea     esi, [edx+20h]
.text:00408861                 shr     ecx, 5
.text:00408864                 mov     bl, cl
.text:00408866                 mov     ecx, [edx+20h]
.text:00408869                 and     bl, 1
.text:0040886C                 cmp     ecx, [esi+8]
.text:0040886F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408872                 setz    [esp+2Ch+var_9]
.text:00408877                 call    fclose
.text:0040887C                 test    eax, eax
.text:0040887E                 setnz   al
.text:00408881                 test    bl, bl
.text:00408883                 jnz     loc_408913
.text:00408889                 test    al, al
.text:0040888B                 jz      short loc_4088E0
.text:0040888D
.text:0040888D loc_40888D:                             ; CODE XREF: sub_408850+CD↓j
.text:0040888D                 call    _errno
.text:00408892                 mov     esi, [eax]
.text:00408894
.text:00408894 loc_408894:                             ; CODE XREF: sub_408850+C7↓j
.text:00408894                 cmp     esi, 9
.text:00408897                 jz      short loc_408906
.text:00408899
.text:00408899 loc_408899:                             ; CODE XREF: sub_408850+B8↓j
.text:00408899                                         ; sub_408850+C1↓j
.text:00408899                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:004088A0                 call    ds:libintl_gettext
.text:004088A6                 mov     ebx, eax
.text:004088A8                 mov     eax, ds:dword_4151F0
.text:004088AD                 test    eax, eax
.text:004088AF                 jz      short loc_4088E6
.text:004088B1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004088B4                 call    sub_40AAA0
.text:004088B9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004088BD                 mov     edx, Code
.text:004088C3                 mov     [esp+2Ch+var_1C], ebx
.text:004088C7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004088CF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004088D3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004088D6                 call    sub_40ADC0
.text:004088DB                 nop
.text:004088DC                 lea     esi, [esi+0]
.text:004088E0
.text:004088E0 loc_4088E0:                             ; CODE XREF: sub_408850+3B↑j
.text:004088E0                                         ; sub_408850+B4↓j ...
.text:004088E0                 add     esp, 24h
.text:004088E3                 pop     ebx
.text:004088E4                 pop     esi
.text:004088E5                 retn
.text:004088E6 ; ---------------------------------------------------------------------------
.text:004088E6
.text:004088E6 loc_4088E6:                             ; CODE XREF: sub_408850+5F↑j
.text:004088E6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004088EA                 mov     ebx, Code
.text:004088F0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:004088F8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004088FC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004088FF                 call    sub_40ADC0
.text:00408904                 jmp     short loc_4088E0
.text:00408906 ; ---------------------------------------------------------------------------
.text:00408906
.text:00408906 loc_408906:                             ; CODE XREF: sub_408850+47↑j
.text:00408906                 test    bl, bl
.text:00408908                 jnz     short loc_408899
.text:0040890A                 cmp     [esp+2Ch+var_9], 0
.text:0040890F                 jnz     short loc_4088E0
.text:00408911                 jmp     short loc_408899
.text:00408913 ; ---------------------------------------------------------------------------
.text:00408913
.text:00408913 loc_408913:                             ; CODE XREF: sub_408850+33↑j
.text:00408913                 xor     esi, esi
.text:00408915                 test    al, al
.text:00408917                 jz      loc_408894
.text:0040891D                 jmp     loc_40888D
.text:0040891D sub_408850      endp
.text:0040891D
.text:0040891D ; ---------------------------------------------------------------------------
.text:00408922                 align 10h
.text:00408930 ; const char aPosix2Version[]
.text:00408930 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_408940+C↓o
.text:00408940
.text:00408940 ; =============== S U B R O U T I N E =======================================
.text:00408940
.text:00408940
.text:00408940 sub_408940      proc near               ; CODE XREF: sub_4025D0+2A↑p
.text:00408940
.text:00408940 VarName         = dword ptr -1Ch
.text:00408940 EndPtr          = dword ptr -18h
.text:00408940 Radix           = dword ptr -14h
.text:00408940 var_8           = dword ptr -8
.text:00408940 var_4           = dword ptr -4
.text:00408940
.text:00408940                 sub     esp, 1Ch
.text:00408943                 mov     [esp+1Ch+var_4], ebx
.text:00408947                 mov     ebx, 30A29h
.text:0040894C                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:00408953                 call    getenv
.text:00408958                 test    eax, eax
.text:0040895A                 jz      short loc_408961
.text:0040895C                 cmp     byte ptr [eax], 0
.text:0040895F                 jnz     short loc_408970
.text:00408961
.text:00408961 loc_408961:                             ; CODE XREF: sub_408940+1A↑j
.text:00408961                                         ; sub_408940+4F↓j ...
.text:00408961                 mov     eax, ebx
.text:00408963                 mov     ebx, [esp+1Ch+var_4]
.text:00408967                 add     esp, 1Ch
.text:0040896A                 retn
.text:0040896A ; ---------------------------------------------------------------------------
.text:0040896B                 align 10h
.text:00408970
.text:00408970 loc_408970:                             ; CODE XREF: sub_408940+1F↑j
.text:00408970                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00408978                 lea     ecx, [esp+1Ch+var_8]
.text:0040897C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00408980                 mov     [esp+1Ch+VarName], eax ; String
.text:00408983                 call    strtol
.text:00408988                 mov     ecx, [esp+1Ch+var_8]
.text:0040898C                 cmp     byte ptr [ecx], 0
.text:0040898F                 jnz     short loc_408961
.text:00408991                 mov     ebx, eax
.text:00408993                 jmp     short loc_408961
.text:00408993 sub_408940      endp
.text:00408993
.text:00408993 ; ---------------------------------------------------------------------------
.text:00408995                 align 10h
.text:004089A0
.text:004089A0 ; =============== S U B R O U T I N E =======================================
.text:004089A0
.text:004089A0
.text:004089A0 sub_4089A0      proc near               ; CODE XREF: sub_405980+22↑p
.text:004089A0
.text:004089A0 Size            = dword ptr -0Ch
.text:004089A0 var_4           = dword ptr -4
.text:004089A0 arg_0           = dword ptr  4
.text:004089A0 arg_4           = dword ptr  8
.text:004089A0
.text:004089A0                 sub     esp, 0Ch
.text:004089A3                 xor     edx, edx
.text:004089A5                 mov     ecx, [esp+0Ch+arg_4]
.text:004089A9                 mov     [esp+0Ch+var_4], ebx
.text:004089AD                 mov     eax, 0FFFFFFFFh
.text:004089B2                 mov     ebx, [esp+0Ch+arg_0]
.text:004089B6                 div     ecx
.text:004089B8                 cmp     eax, ebx
.text:004089BA                 jb      short loc_4089D9
.text:004089BC                 mov     edx, ebx
.text:004089BE                 imul    edx, ecx
.text:004089C1                 mov     [esp+0Ch+Size], edx ; Size
.text:004089C4                 call    malloc
.text:004089C9                 test    eax, eax
.text:004089CB                 jz      short loc_4089D5
.text:004089CD
.text:004089CD loc_4089CD:                             ; CODE XREF: sub_4089A0+37↓j
.text:004089CD                 mov     ebx, [esp+0Ch+var_4]
.text:004089D1                 add     esp, 0Ch
.text:004089D4                 retn
.text:004089D5 ; ---------------------------------------------------------------------------
.text:004089D5
.text:004089D5 loc_4089D5:                             ; CODE XREF: sub_4089A0+2B↑j
.text:004089D5                 test    ebx, ebx
.text:004089D7                 jz      short loc_4089CD
.text:004089D9
.text:004089D9 loc_4089D9:                             ; CODE XREF: sub_4089A0+1A↑j
.text:004089D9                 call    sub_40AD30
.text:004089D9 sub_4089A0      endp
.text:004089D9
.text:004089D9 ; ---------------------------------------------------------------------------
.text:004089DE                 align 10h
.text:004089E0
.text:004089E0 ; =============== S U B R O U T I N E =======================================
.text:004089E0
.text:004089E0
.text:004089E0 ; int __cdecl sub_4089E0(size_t)
.text:004089E0 sub_4089E0      proc near               ; CODE XREF: sub_406160+1D↑p
.text:004089E0                                         ; .text:0040A479↓p ...
.text:004089E0
.text:004089E0 Size            = dword ptr -0Ch
.text:004089E0 var_4           = dword ptr -4
.text:004089E0 arg_0           = dword ptr  4
.text:004089E0
.text:004089E0                 sub     esp, 0Ch
.text:004089E3                 mov     [esp+0Ch+var_4], ebx
.text:004089E7                 mov     ebx, [esp+0Ch+arg_0]
.text:004089EB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004089EE                 call    malloc
.text:004089F3                 test    eax, eax
.text:004089F5                 jz      short loc_408A00
.text:004089F7
.text:004089F7 loc_4089F7:                             ; CODE XREF: sub_4089E0+22↓j
.text:004089F7                 mov     ebx, [esp+0Ch+var_4]
.text:004089FB                 add     esp, 0Ch
.text:004089FE                 retn
.text:004089FE ; ---------------------------------------------------------------------------
.text:004089FF                 align 10h
.text:00408A00
.text:00408A00 loc_408A00:                             ; CODE XREF: sub_4089E0+15↑j
.text:00408A00                 test    ebx, ebx
.text:00408A02                 jz      short loc_4089F7
.text:00408A04                 call    sub_40AD30
.text:00408A04 sub_4089E0      endp
.text:00408A04
.text:00408A04 ; ---------------------------------------------------------------------------
.text:00408A09                 align 10h
.text:00408A10                 sub     esp, 1Ch
.text:00408A13                 xor     edx, edx
.text:00408A15                 mov     eax, 0FFFFFFFFh
.text:00408A1A                 mov     [esp+14h], ebx
.text:00408A1E                 mov     ecx, [esp+20h]
.text:00408A22                 mov     ebx, [esp+28h]
.text:00408A26                 mov     [esp+18h], esi
.text:00408A2A                 mov     esi, [esp+24h]
.text:00408A2E                 div     ebx
.text:00408A30                 cmp     eax, esi
.text:00408A32                 jb      short loc_408A64
.text:00408A34                 mov     [esp], ecx
.text:00408A37                 mov     edx, esi
.text:00408A39                 imul    edx, ebx
.text:00408A3C                 mov     [esp+4], edx
.text:00408A40                 call    realloc
.text:00408A45                 test    eax, eax
.text:00408A47                 mov     ecx, eax
.text:00408A49                 jz      short loc_408A60
.text:00408A4B
.text:00408A4B loc_408A4B:                             ; CODE XREF: .text:00408A62↓j
.text:00408A4B                 mov     ebx, [esp+14h]
.text:00408A4F                 mov     eax, ecx
.text:00408A51                 mov     esi, [esp+18h]
.text:00408A55                 add     esp, 1Ch
.text:00408A58                 retn
.text:00408A58 ; ---------------------------------------------------------------------------
.text:00408A59                 align 10h
.text:00408A60
.text:00408A60 loc_408A60:                             ; CODE XREF: .text:00408A49↑j
.text:00408A60                 test    esi, esi
.text:00408A62                 jz      short loc_408A4B
.text:00408A64
.text:00408A64 loc_408A64:                             ; CODE XREF: .text:00408A32↑j
.text:00408A64                 call    sub_40AD30
.text:00408A64 ; ---------------------------------------------------------------------------
.text:00408A69                 align 10h
.text:00408A70
.text:00408A70 ; =============== S U B R O U T I N E =======================================
.text:00408A70
.text:00408A70
.text:00408A70 ; int __cdecl sub_408A70(void *, size_t)
.text:00408A70 sub_408A70      proc near               ; CODE XREF: sub_40AB40+5B↓p
.text:00408A70
.text:00408A70 Block           = dword ptr -0Ch
.text:00408A70 Size            = dword ptr -8
.text:00408A70 var_4           = dword ptr -4
.text:00408A70 arg_0           = dword ptr  4
.text:00408A70 arg_4           = dword ptr  8
.text:00408A70
.text:00408A70                 sub     esp, 0Ch
.text:00408A73                 mov     edx, [esp+0Ch+arg_0]
.text:00408A77                 mov     [esp+0Ch+var_4], ebx
.text:00408A7B                 mov     ebx, [esp+0Ch+arg_4]
.text:00408A7F                 mov     [esp+0Ch+Block], edx ; Block
.text:00408A82                 mov     [esp+0Ch+Size], ebx ; Size
.text:00408A86                 call    realloc
.text:00408A8B                 test    eax, eax
.text:00408A8D                 jz      short loc_408A97
.text:00408A8F
.text:00408A8F loc_408A8F:                             ; CODE XREF: sub_408A70+29↓j
.text:00408A8F                 mov     ebx, [esp+0Ch+var_4]
.text:00408A93                 add     esp, 0Ch
.text:00408A96                 retn
.text:00408A97 ; ---------------------------------------------------------------------------
.text:00408A97
.text:00408A97 loc_408A97:                             ; CODE XREF: sub_408A70+1D↑j
.text:00408A97                 test    ebx, ebx
.text:00408A99                 jz      short loc_408A8F
.text:00408A9B                 call    sub_40AD30
.text:00408A9B sub_408A70      endp
.text:00408A9B
.text:00408AA0
.text:00408AA0 ; =============== S U B R O U T I N E =======================================
.text:00408AA0
.text:00408AA0 ; Attributes: thunk
.text:00408AA0
.text:00408AA0 ; int __cdecl sub_408AA0(void *, int, int)
.text:00408AA0 sub_408AA0      proc near               ; CODE XREF: sub_4025D0+97D↑p
.text:00408AA0                                         ; sub_4025D0+B41↑p ...
.text:00408AA0                 jmp     sub_408BF0
.text:00408AA0 sub_408AA0      endp
.text:00408AA0
.text:00408AA0 ; ---------------------------------------------------------------------------
.text:00408AA5                 align 10h
.text:00408AB0                 sub     esp, 0Ch
.text:00408AB3                 mov     edx, [esp+14h]
.text:00408AB7                 mov     dword ptr [esp+8], 1
.text:00408ABF                 mov     [esp+4], edx
.text:00408AC3                 mov     edx, [esp+10h]
.text:00408AC7                 mov     [esp], edx
.text:00408ACA                 call    sub_408BF0
.text:00408ACF                 add     esp, 0Ch
.text:00408AD2                 retn
.text:00408AD2 ; ---------------------------------------------------------------------------
.text:00408AD3                 align 10h
.text:00408AE0                 sub     esp, 1Ch
.text:00408AE3                 mov     [esp+18h], ebx
.text:00408AE7                 mov     ebx, [esp+20h]
.text:00408AEB                 mov     [esp], ebx
.text:00408AEE                 call    malloc
.text:00408AF3                 test    eax, eax
.text:00408AF5                 jz      short loc_408B13
.text:00408AF7
.text:00408AF7 loc_408AF7:                             ; CODE XREF: .text:00408B15↓j
.text:00408AF7                 mov     [esp+8], ebx
.text:00408AFB                 mov     dword ptr [esp+4], 0
.text:00408B03                 mov     [esp], eax
.text:00408B06                 call    memset
.text:00408B0B                 mov     ebx, [esp+18h]
.text:00408B0F                 add     esp, 1Ch
.text:00408B12                 retn
.text:00408B13 ; ---------------------------------------------------------------------------
.text:00408B13
.text:00408B13 loc_408B13:                             ; CODE XREF: .text:00408AF5↑j
.text:00408B13                 test    ebx, ebx
.text:00408B15                 jz      short loc_408AF7
.text:00408B17                 call    sub_40AD30
.text:00408B17 ; ---------------------------------------------------------------------------
.text:00408B1C                 align 10h
.text:00408B20                 sub     esp, 0Ch
.text:00408B23                 xor     edx, edx
.text:00408B25                 mov     ecx, [esp+14h]
.text:00408B29                 mov     [esp+8], ebx
.text:00408B2D                 mov     eax, 0FFFFFFFFh
.text:00408B32                 mov     ebx, [esp+10h]
.text:00408B36                 div     ecx
.text:00408B38                 cmp     eax, ebx
.text:00408B3A                 jb      short loc_408B58
.text:00408B3C                 mov     [esp+4], ecx
.text:00408B40                 mov     [esp], ebx
.text:00408B43                 call    calloc
.text:00408B48                 test    eax, eax
.text:00408B4A                 jz      short loc_408B54
.text:00408B4C
.text:00408B4C loc_408B4C:                             ; CODE XREF: .text:00408B56↓j
.text:00408B4C                 mov     ebx, [esp+8]
.text:00408B50                 add     esp, 0Ch
.text:00408B53                 retn
.text:00408B54 ; ---------------------------------------------------------------------------
.text:00408B54
.text:00408B54 loc_408B54:                             ; CODE XREF: .text:00408B4A↑j
.text:00408B54                 test    ebx, ebx
.text:00408B56                 jz      short loc_408B4C
.text:00408B58
.text:00408B58 loc_408B58:                             ; CODE XREF: .text:00408B3A↑j
.text:00408B58                 call    sub_40AD30
.text:00408B58 ; ---------------------------------------------------------------------------
.text:00408B5D                 align 10h
.text:00408B60                 sub     esp, 1Ch
.text:00408B63                 mov     [esp+18h], ebx
.text:00408B67                 mov     ebx, [esp+24h]
.text:00408B6B                 mov     [esp], ebx
.text:00408B6E                 call    malloc
.text:00408B73                 test    eax, eax
.text:00408B75                 mov     edx, eax
.text:00408B77                 jz      short loc_408B95
.text:00408B79
.text:00408B79 loc_408B79:                             ; CODE XREF: .text:00408B97↓j
.text:00408B79                 mov     [esp+8], ebx
.text:00408B7D                 mov     ecx, [esp+20h]
.text:00408B81                 mov     [esp], edx
.text:00408B84                 mov     [esp+4], ecx
.text:00408B88                 call    memcpy
.text:00408B8D                 mov     ebx, [esp+18h]
.text:00408B91                 add     esp, 1Ch
.text:00408B94                 retn
.text:00408B95 ; ---------------------------------------------------------------------------
.text:00408B95
.text:00408B95 loc_408B95:                             ; CODE XREF: .text:00408B77↑j
.text:00408B95                 test    ebx, ebx
.text:00408B97                 jz      short loc_408B79
.text:00408B99                 call    sub_40AD30
.text:00408B99 ; ---------------------------------------------------------------------------
.text:00408B9E                 align 10h
.text:00408BA0                 sub     esp, 1Ch
.text:00408BA3                 mov     [esp+18h], esi
.text:00408BA7                 mov     esi, [esp+20h]
.text:00408BAB                 mov     [esp+14h], ebx
.text:00408BAF                 mov     [esp], esi
.text:00408BB2                 call    strlen
.text:00408BB7                 lea     ebx, [eax+1]
.text:00408BBA                 mov     [esp], ebx
.text:00408BBD                 call    malloc
.text:00408BC2                 test    eax, eax
.text:00408BC4                 jz      short loc_408BE2
.text:00408BC6
.text:00408BC6 loc_408BC6:                             ; CODE XREF: .text:00408BE4↓j
.text:00408BC6                 mov     [esp+8], ebx
.text:00408BCA                 mov     [esp+4], esi
.text:00408BCE                 mov     [esp], eax
.text:00408BD1                 call    memcpy
.text:00408BD6                 mov     ebx, [esp+14h]
.text:00408BDA                 mov     esi, [esp+18h]
.text:00408BDE                 add     esp, 1Ch
.text:00408BE1                 retn
.text:00408BE2 ; ---------------------------------------------------------------------------
.text:00408BE2
.text:00408BE2 loc_408BE2:                             ; CODE XREF: .text:00408BC4↑j
.text:00408BE2                 test    ebx, ebx
.text:00408BE4                 jz      short loc_408BC6
.text:00408BE6                 call    sub_40AD30
.text:00408BE6 ; ---------------------------------------------------------------------------
.text:00408BEB                 align 10h
.text:00408BF0
.text:00408BF0 ; =============== S U B R O U T I N E =======================================
.text:00408BF0
.text:00408BF0
.text:00408BF0 ; int __cdecl sub_408BF0(void *, int, int)
.text:00408BF0 sub_408BF0      proc near               ; CODE XREF: sub_408AA0↑j
.text:00408BF0                                         ; .text:00408ACA↑p
.text:00408BF0
.text:00408BF0 Block           = dword ptr -1Ch
.text:00408BF0 Size            = dword ptr -18h
.text:00408BF0 var_C           = dword ptr -0Ch
.text:00408BF0 var_8           = dword ptr -8
.text:00408BF0 var_4           = dword ptr -4
.text:00408BF0 arg_0           = dword ptr  4
.text:00408BF0 arg_4           = dword ptr  8
.text:00408BF0 arg_8           = dword ptr  0Ch
.text:00408BF0
.text:00408BF0                 sub     esp, 1Ch
.text:00408BF3                 mov     [esp+1Ch+var_8], esi
.text:00408BF7                 mov     esi, [esp+1Ch+arg_0]
.text:00408BFB                 mov     [esp+1Ch+var_4], edi
.text:00408BFF                 mov     edi, [esp+1Ch+arg_4]
.text:00408C03                 test    esi, esi
.text:00408C05                 mov     [esp+1Ch+var_C], ebx
.text:00408C09                 mov     ecx, [edi]
.text:00408C0B                 mov     ebx, [esp+1Ch+arg_8]
.text:00408C0F                 jz      short loc_408C50
.text:00408C11                 xor     edx, edx
.text:00408C13                 mov     eax, 7FFFFFFFh
.text:00408C18                 div     ebx
.text:00408C1A                 cmp     eax, ecx
.text:00408C1C                 jb      short loc_408C49
.text:00408C1E                 add     ecx, ecx
.text:00408C20
.text:00408C20 loc_408C20:                             ; CODE XREF: sub_408BF0+62↓j
.text:00408C20                                         ; sub_408BF0+71↓j ...
.text:00408C20                 mov     [edi], ecx
.text:00408C22                 imul    ebx, ecx
.text:00408C25                 mov     [esp+1Ch+Block], esi ; Block
.text:00408C28                 mov     [esp+1Ch+Size], ebx ; Size
.text:00408C2C                 call    realloc
.text:00408C31                 test    eax, eax
.text:00408C33                 jz      short loc_408C45
.text:00408C35
.text:00408C35 loc_408C35:                             ; CODE XREF: sub_408BF0+57↓j
.text:00408C35                 mov     ebx, [esp+1Ch+var_C]
.text:00408C39                 mov     esi, [esp+1Ch+var_8]
.text:00408C3D                 mov     edi, [esp+1Ch+var_4]
.text:00408C41                 add     esp, 1Ch
.text:00408C44                 retn
.text:00408C45 ; ---------------------------------------------------------------------------
.text:00408C45
.text:00408C45 loc_408C45:                             ; CODE XREF: sub_408BF0+43↑j
.text:00408C45                 test    ebx, ebx
.text:00408C47                 jz      short loc_408C35
.text:00408C49
.text:00408C49 loc_408C49:                             ; CODE XREF: sub_408BF0+2C↑j
.text:00408C49                 call    sub_40AD30
.text:00408C49 ; ---------------------------------------------------------------------------
.text:00408C4E                 align 10h
.text:00408C50
.text:00408C50 loc_408C50:                             ; CODE XREF: sub_408BF0+1F↑j
.text:00408C50                 test    ecx, ecx
.text:00408C52                 jnz     short loc_408C20
.text:00408C54                 xor     edx, edx
.text:00408C56                 mov     eax, 40h ; '@'
.text:00408C5B                 div     ebx
.text:00408C5D                 test    eax, eax
.text:00408C5F                 mov     ecx, eax
.text:00408C61                 jnz     short loc_408C20
.text:00408C63                 mov     ecx, 1
.text:00408C68                 jmp     short loc_408C20
.text:00408C68 sub_408BF0      endp
.text:00408C68
.text:00408C68 ; ---------------------------------------------------------------------------
.text:00408C6A                 align 10h
.text:00408C70 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00408C70                                         ; DATA XREF: sub_408CE0+C79↓o
.text:00408C98                 db 18h dup(90h)
.text:00408CB0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00408CB0                                         ; DATA XREF: sub_408CE0+C81↓o
.text:00408CD6                 align 10h
.text:00408CE0
.text:00408CE0 ; =============== S U B R O U T I N E =======================================
.text:00408CE0
.text:00408CE0
.text:00408CE0 ; int __cdecl sub_408CE0(int, int, int, int, char *Str)
.text:00408CE0 sub_408CE0      proc near               ; CODE XREF: sub_4025D0+9DE↑p
.text:00408CE0                                         ; sub_4025D0+B9B↑p ...
.text:00408CE0
.text:00408CE0 C               = dword ptr -13Ch
.text:00408CE0 Type            = dword ptr -138h
.text:00408CE0 Radix           = dword ptr -134h
.text:00408CE0 var_130         = dword ptr -130h
.text:00408CE0 var_124         = dword ptr -124h
.text:00408CE0 var_120         = dword ptr -120h
.text:00408CE0 var_11C         = dword ptr -11Ch
.text:00408CE0 var_118         = dword ptr -118h
.text:00408CE0 var_114         = dword ptr -114h
.text:00408CE0 var_110         = dword ptr -110h
.text:00408CE0 var_10C         = dword ptr -10Ch
.text:00408CE0 var_108         = dword ptr -108h
.text:00408CE0 var_104         = dword ptr -104h
.text:00408CE0 var_100         = dword ptr -100h
.text:00408CE0 var_F8          = dword ptr -0F8h
.text:00408CE0 var_F4          = dword ptr -0F4h
.text:00408CE0 var_F0          = dword ptr -0F0h
.text:00408CE0 var_EC          = dword ptr -0ECh
.text:00408CE0 var_E8          = dword ptr -0E8h
.text:00408CE0 var_E4          = dword ptr -0E4h
.text:00408CE0 var_E0          = dword ptr -0E0h
.text:00408CE0 var_D8          = dword ptr -0D8h
.text:00408CE0 var_D4          = dword ptr -0D4h
.text:00408CE0 var_D0          = dword ptr -0D0h
.text:00408CE0 var_CC          = dword ptr -0CCh
.text:00408CE0 var_C8          = dword ptr -0C8h
.text:00408CE0 var_C4          = dword ptr -0C4h
.text:00408CE0 var_C0          = dword ptr -0C0h
.text:00408CE0 var_B8          = dword ptr -0B8h
.text:00408CE0 var_B4          = dword ptr -0B4h
.text:00408CE0 var_B0          = dword ptr -0B0h
.text:00408CE0 var_AC          = dword ptr -0ACh
.text:00408CE0 var_A8          = dword ptr -0A8h
.text:00408CE0 var_A4          = dword ptr -0A4h
.text:00408CE0 var_A0          = dword ptr -0A0h
.text:00408CE0 var_98          = dword ptr -98h
.text:00408CE0 var_94          = dword ptr -94h
.text:00408CE0 var_90          = dword ptr -90h
.text:00408CE0 var_8C          = dword ptr -8Ch
.text:00408CE0 var_88          = dword ptr -88h
.text:00408CE0 var_84          = dword ptr -84h
.text:00408CE0 var_80          = dword ptr -80h
.text:00408CE0 var_78          = dword ptr -78h
.text:00408CE0 var_74          = dword ptr -74h
.text:00408CE0 var_70          = dword ptr -70h
.text:00408CE0 var_6C          = dword ptr -6Ch
.text:00408CE0 var_68          = dword ptr -68h
.text:00408CE0 var_64          = dword ptr -64h
.text:00408CE0 var_60          = dword ptr -60h
.text:00408CE0 var_5C          = dword ptr -5Ch
.text:00408CE0 var_58          = dword ptr -58h
.text:00408CE0 var_50          = dword ptr -50h
.text:00408CE0 var_4C          = dword ptr -4Ch
.text:00408CE0 var_48          = dword ptr -48h
.text:00408CE0 var_44          = dword ptr -44h
.text:00408CE0 var_40          = dword ptr -40h
.text:00408CE0 var_3C          = dword ptr -3Ch
.text:00408CE0 var_38          = dword ptr -38h
.text:00408CE0 var_34          = dword ptr -34h
.text:00408CE0 var_30          = dword ptr -30h
.text:00408CE0 var_29          = byte ptr -29h
.text:00408CE0 var_28          = dword ptr -28h
.text:00408CE0 var_24          = dword ptr -24h
.text:00408CE0 var_20          = dword ptr -20h
.text:00408CE0 var_18          = byte ptr -18h
.text:00408CE0 arg_0           = dword ptr  4
.text:00408CE0 arg_4           = dword ptr  8
.text:00408CE0 arg_8           = dword ptr  0Ch
.text:00408CE0 arg_C           = dword ptr  10h
.text:00408CE0 Str             = dword ptr  14h
.text:00408CE0
.text:00408CE0                 push    ebp
.text:00408CE1                 xor     eax, eax
.text:00408CE3                 push    edi
.text:00408CE4                 push    esi
.text:00408CE5                 push    ebx
.text:00408CE6                 sub     esp, 12Ch
.text:00408CEC                 mov     ebp, [esp+13Ch+arg_8]
.text:00408CF3                 mov     [esp+13Ch+var_28], eax
.text:00408CFA                 mov     esi, [esp+13Ch+arg_0]
.text:00408D01                 cmp     ebp, 24h ; '$'
.text:00408D04                 ja      loc_409951
.text:00408D0A                 mov     edi, [esp+13Ch+arg_4]
.text:00408D11                 test    edi, edi
.text:00408D13                 jz      loc_409945
.text:00408D19
.text:00408D19 loc_408D19:                             ; CODE XREF: sub_408CE0+C6C↓j
.text:00408D19                 movzx   edx, byte ptr [esi]
.text:00408D1C                 mov     ebx, esi
.text:00408D1E                 mov     [esp+13Ch+var_29], dl
.text:00408D25                 lea     esi, [esi+0]
.text:00408D29                 lea     edi, [edi+0]
.text:00408D30
.text:00408D30 loc_408D30:                             ; CODE XREF: sub_408CE0+86↓j
.text:00408D30                 movzx   edx, [esp+13Ch+var_29]
.text:00408D38                 mov     ecx, ds:__mb_cur_max
.text:00408D3E                 cmp     dword ptr [ecx], 1
.text:00408D41                 jz      loc_409932
.text:00408D47                 mov     [esp+13Ch+Type], 8 ; Type
.text:00408D4F                 mov     [esp+13Ch+C], edx ; C
.text:00408D52                 call    _isctype
.text:00408D57
.text:00408D57 loc_408D57:                             ; CODE XREF: sub_408CE0+C60↓j
.text:00408D57                 test    eax, eax
.text:00408D59                 jz      short loc_408D68
.text:00408D5B                 inc     ebx
.text:00408D5C                 movzx   eax, byte ptr [ebx]
.text:00408D5F                 mov     [esp+13Ch+var_29], al
.text:00408D66                 jmp     short loc_408D30
.text:00408D68 ; ---------------------------------------------------------------------------
.text:00408D68
.text:00408D68 loc_408D68:                             ; CODE XREF: sub_408CE0+79↑j
.text:00408D68                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00408D70                 mov     eax, 4
.text:00408D75                 jz      short loc_408DF2
.text:00408D77                 call    _errno
.text:00408D7C                 mov     dword ptr [eax], 0
.text:00408D82                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00408D86                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:00408D8A                 mov     [esp+13Ch+C], esi ; String
.text:00408D8D                 call    _strtoull
.text:00408D92                 mov     [esp+13Ch+var_24], eax
.text:00408D99                 mov     eax, [edi]
.text:00408D9B                 mov     [esp+13Ch+var_20], edx
.text:00408DA2                 cmp     eax, esi
.text:00408DA4                 jz      loc_4098EC
.text:00408DAA                 call    _errno
.text:00408DAF                 mov     ebx, [eax]
.text:00408DB1                 test    ebx, ebx
.text:00408DB3                 jnz     loc_4098C7
.text:00408DB9
.text:00408DB9 loc_408DB9:                             ; CODE XREF: sub_408CE0+BFD↓j
.text:00408DB9                                         ; sub_408CE0+C4D↓j
.text:00408DB9                 mov     ebp, [esp+13Ch+Str]
.text:00408DC0                 test    ebp, ebp
.text:00408DC2                 jz      loc_4098A8
.text:00408DC8                 mov     ebx, [edi]
.text:00408DCA                 movzx   eax, byte ptr [ebx]
.text:00408DCD                 test    al, al
.text:00408DCF                 jnz     short loc_408DFD
.text:00408DD1
.text:00408DD1 loc_408DD1:                             ; CODE XREF: sub_408CE0+312↓j
.text:00408DD1                                         ; sub_408CE0+320↓j
.text:00408DD1                 mov     edx, [esp+13Ch+var_24]
.text:00408DD8                 mov     edi, [esp+13Ch+var_20]
.text:00408DDF                 mov     ebx, [esp+13Ch+arg_C]
.text:00408DE6                 mov     [ebx], edx
.text:00408DE8                 mov     [ebx+4], edi
.text:00408DEB
.text:00408DEB loc_408DEB:                             ; CODE XREF: sub_408CE0+BE2↓j
.text:00408DEB                 mov     eax, [esp+13Ch+var_28]
.text:00408DF2
.text:00408DF2 loc_408DF2:                             ; CODE XREF: sub_408CE0+95↑j
.text:00408DF2                                         ; sub_408CE0+16C↓j ...
.text:00408DF2                 add     esp, 12Ch
.text:00408DF8                 pop     ebx
.text:00408DF9                 pop     esi
.text:00408DFA                 pop     edi
.text:00408DFB                 pop     ebp
.text:00408DFC                 retn
.text:00408DFD ; ---------------------------------------------------------------------------
.text:00408DFD
.text:00408DFD loc_408DFD:                             ; CODE XREF: sub_408CE0+EF↑j
.text:00408DFD                 mov     esi, [esp+13Ch+Str]
.text:00408E04                 mov     ecx, 1
.text:00408E09                 movsx   ebp, al
.text:00408E0C                 mov     [esp+13Ch+var_30], ecx
.text:00408E13                 mov     ebx, 400h
.text:00408E18                 mov     [esp+13Ch+Type], ebp ; Val
.text:00408E1C                 mov     [esp+13Ch+C], esi ; Str
.text:00408E1F                 call    strchr
.text:00408E24                 test    eax, eax
.text:00408E26                 jnz     short loc_408E4E
.text:00408E28
.text:00408E28 def_408E99:                             ; CODE XREF: sub_408CE0+1B7↓j
.text:00408E28                                         ; sub_408CE0+1B9↓j
.text:00408E28                                         ; DATA XREF: ...
.text:00408E28                 mov     eax, [esp+13Ch+var_28] ; jumptable 00408E99 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00408E2F                 mov     esi, [esp+13Ch+var_24]
.text:00408E36                 mov     ebp, [esp+13Ch+var_20]
.text:00408E3D                 mov     edi, [esp+13Ch+arg_C]
.text:00408E44                 or      eax, 2
.text:00408E47                 mov     [edi], esi
.text:00408E49                 mov     [edi+4], ebp
.text:00408E4C                 jmp     short loc_408DF2
.text:00408E4E ; ---------------------------------------------------------------------------
.text:00408E4E
.text:00408E4E loc_408E4E:                             ; CODE XREF: sub_408CE0+146↑j
.text:00408E4E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00408E56                 mov     edx, [esp+13Ch+Str]
.text:00408E5D                 mov     [esp+13Ch+C], edx ; Str
.text:00408E60                 call    strchr
.text:00408E65                 test    eax, eax
.text:00408E67                 jz      loc_4098A1
.text:00408E6D                 mov     edx, [edi]
.text:00408E6F                 movsx   eax, byte ptr [edx+1]
.text:00408E73                 cmp     eax, 44h ; 'D'
.text:00408E76                 jz      loc_409867
.text:00408E7C                 cmp     eax, 44h ; 'D'
.text:00408E7F                 jg      loc_40987D
.text:00408E85                 cmp     eax, 42h ; 'B'
.text:00408E88                 jz      loc_409867
.text:00408E8E
.text:00408E8E loc_408E8E:                             ; CODE XREF: sub_408CE0+B98↓j
.text:00408E8E                                         ; sub_408CE0+BA0↓j ...
.text:00408E8E                 movsx   eax, byte ptr [edx]
.text:00408E91                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00408E94                 cmp     eax, 35h
.text:00408E97                 ja      short def_408E99 ; jumptable 00408E99 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00408E99                 jmp     ds:jpt_408E99[eax*4] ; switch jump
.text:00408E99 ; ---------------------------------------------------------------------------
.text:00408EA0 jpt_408E99      dd offset loc_409024, offset def_408E99, offset def_408E99
.text:00408EA0                                         ; DATA XREF: sub_408CE0+1B9↑r
.text:00408EA0                 dd offset loc_40907E, offset def_408E99, offset loc_409447 ; jump table for switch statement
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset def_408E99
.text:00408EA0                 dd offset loc_409556, offset def_408E99, offset loc_40961F
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset loc_40918D
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset def_408E99
.text:00408EA0                 dd offset loc_40972E, offset def_408E99, offset def_408E99
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset loc_40929C
.text:00408EA0                 dd offset loc_40936E, offset def_408E99, offset def_408E99
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset def_408E99
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset loc_408F78
.text:00408EA0                 dd offset loc_409440, offset def_408E99, offset def_408E99
.text:00408EA0                 dd offset def_408E99, offset loc_409447, offset def_408E99
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset loc_409556
.text:00408EA0                 dd offset def_408E99, offset loc_40961F, offset def_408E99
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset def_408E99
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset loc_40972E
.text:00408EA0                 dd offset def_408E99, offset def_408E99, offset loc_409807
.text:00408F78 ; ---------------------------------------------------------------------------
.text:00408F78
.text:00408F78 loc_408F78:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:00408F78                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:00408F78                 mov     [esp+13Ch+Radix], 200h ; jumptable 00408E99 case 98
.text:00408F80                 lea     ebp, [esp+13Ch+var_24]
.text:00408F87                 mov     [esp+13Ch+var_130], 0
.text:00408F8F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408F96                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408F9E                 call    sub_4128D0
.text:00408FA3                 mov     esi, [esp+13Ch+var_20]
.text:00408FAA                 mov     ecx, [esp+13Ch+var_24]
.text:00408FB1                 cmp     edx, esi
.text:00408FB3                 ja      short loc_408FBB
.text:00408FB5                 jb      short loc_409005
.text:00408FB7                 cmp     eax, ecx
.text:00408FB9                 jb      short loc_409005
.text:00408FBB
.text:00408FBB loc_408FBB:                             ; CODE XREF: sub_408CE0+2D3↑j
.text:00408FBB                 mov     esi, [ebp+0]
.text:00408FBE                 mov     eax, 200h
.text:00408FC3                 mov     ebx, [ebp+4]
.text:00408FC6                 mul     esi
.text:00408FC8                 mov     ecx, ebx
.text:00408FCA                 shl     ecx, 9
.text:00408FCD
.text:00408FCD loc_408FCD:                             ; CODE XREF: sub_408CE0+399↓j
.text:00408FCD                 mov     esi, edx
.text:00408FCF                 lea     edx, [ecx+esi]
.text:00408FD2
.text:00408FD2 loc_408FD2:                             ; CODE XREF: sub_408CE0+B82↓j
.text:00408FD2                 mov     [ebp+0], eax
.text:00408FD5                 xor     eax, eax
.text:00408FD7                 mov     [ebp+4], edx
.text:00408FDA
.text:00408FDA loc_408FDA:                             ; CODE XREF: sub_408CE0+342↓j
.text:00408FDA                                         ; sub_408CE0+459↓j ...
.text:00408FDA                 mov     edx, [edi]
.text:00408FDC
.text:00408FDC loc_408FDC:                             ; CODE XREF: sub_408CE0+762↓j
.text:00408FDC                 or      [esp+13Ch+var_28], eax
.text:00408FE3                 mov     eax, [esp+13Ch+var_30]
.text:00408FEA                 lea     ecx, [eax+edx]
.text:00408FED                 mov     [edi], ecx
.text:00408FEF                 cmp     byte ptr [ecx], 0
.text:00408FF2                 jz      loc_408DD1
.text:00408FF8                 or      [esp+13Ch+var_28], 2
.text:00409000                 jmp     loc_408DD1
.text:00409005 ; ---------------------------------------------------------------------------
.text:00409005
.text:00409005 loc_409005:                             ; CODE XREF: sub_408CE0+2D5↑j
.text:00409005                                         ; sub_408CE0+2D9↑j ...
.text:00409005                 mov     edx, 0FFFFFFFFh
.text:0040900A                 mov     ebp, 0FFFFFFFFh
.text:0040900F                 mov     eax, 1
.text:00409014                 mov     [esp+13Ch+var_24], edx
.text:0040901B                 mov     [esp+13Ch+var_20], ebp
.text:00409022                 jmp     short loc_408FDA
.text:00409024 ; ---------------------------------------------------------------------------
.text:00409024
.text:00409024 loc_409024:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:00409024                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:00409024                 mov     [esp+13Ch+Radix], 400h ; jumptable 00408E99 case 66
.text:0040902C                 lea     ebp, [esp+13Ch+var_24]
.text:00409033                 mov     [esp+13Ch+var_130], 0
.text:0040903B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00409042                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040904A                 call    sub_4128D0
.text:0040904F                 mov     esi, [esp+13Ch+var_20]
.text:00409056                 mov     ecx, [esp+13Ch+var_24]
.text:0040905D                 cmp     edx, esi
.text:0040905F                 ja      short loc_409067
.text:00409061                 jb      short loc_409005
.text:00409063                 cmp     eax, ecx
.text:00409065                 jb      short loc_409005
.text:00409067
.text:00409067 loc_409067:                             ; CODE XREF: sub_408CE0+37F↑j
.text:00409067                 mov     esi, [ebp+0]
.text:0040906A                 mov     eax, 400h
.text:0040906F                 mov     ebx, [ebp+4]
.text:00409072                 mul     esi
.text:00409074                 mov     ecx, ebx
.text:00409076                 shl     ecx, 0Ah
.text:00409079                 jmp     loc_408FCD
.text:0040907E ; ---------------------------------------------------------------------------
.text:0040907E
.text:0040907E loc_40907E:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:0040907E                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:0040907E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00408E99 case 69
.text:00409085                 mov     ecx, ebx
.text:00409087                 xor     ebp, ebp
.text:00409089                 mov     [esp+13Ch+var_34], ebp
.text:00409090                 sar     ecx, 1Fh
.text:00409093                 mov     ebx, [esp+13Ch+var_3C]
.text:0040909A                 mov     [esp+13Ch+var_38], ecx
.text:004090A1                 lea     esi, [esp+13Ch+var_24]
.text:004090A8                 mov     ebp, 5
.text:004090AD                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004090B4                 mov     edx, [esp+13Ch+var_38]
.text:004090BB                 mov     [esp+13Ch+Radix], ebx
.text:004090BF                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004090C7                 mov     [esp+13Ch+var_130], edx
.text:004090CB                 call    sub_4128D0
.text:004090D0                 mov     [esp+13Ch+var_44], eax
.text:004090D7                 mov     [esp+13Ch+var_40], edx
.text:004090DE
.text:004090DE loc_4090DE:                             ; CODE XREF: sub_408CE0+450↓j
.text:004090DE                 mov     ebx, [esi+4]
.text:004090E1                 mov     eax, [esi]
.text:004090E3                 cmp     [esp+13Ch+var_40], ebx
.text:004090EA                 mov     [esp+13Ch+var_48], ebx
.text:004090F1                 mov     [esp+13Ch+var_4C], eax
.text:004090F8                 ja      short loc_40913E
.text:004090FA                 mov     ecx, [esp+13Ch+var_48]
.text:00409101                 cmp     [esp+13Ch+var_40], ecx
.text:00409108                 jb      short loc_409113
.text:0040910A                 cmp     [esp+13Ch+var_44], eax
.text:00409111                 jnb     short loc_40913E
.text:00409113
.text:00409113 loc_409113:                             ; CODE XREF: sub_408CE0+428↑j
.text:00409113                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00409119                 mov     eax, 1
.text:0040911E                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00409125
.text:00409125 loc_409125:                             ; CODE XREF: sub_408CE0+4AB↓j
.text:00409125                 or      [esp+13Ch+var_34], eax
.text:0040912C                 dec     ebp
.text:0040912D                 cmp     ebp, 0FFFFFFFFh
.text:00409130                 jnz     short loc_4090DE
.text:00409132                 mov     eax, [esp+13Ch+var_34]
.text:00409139                 jmp     loc_408FDA
.text:0040913E ; ---------------------------------------------------------------------------
.text:0040913E
.text:0040913E loc_40913E:                             ; CODE XREF: sub_408CE0+418↑j
.text:0040913E                                         ; sub_408CE0+431↑j
.text:0040913E                 mov     ecx, [esp+13Ch+var_38]
.text:00409145                 mov     eax, [esp+13Ch+var_4C]
.text:0040914C                 mov     ebx, [esp+13Ch+var_4C]
.text:00409153                 mul     [esp+13Ch+var_3C]
.text:0040915A                 imul    ebx, ecx
.text:0040915D                 mov     ecx, edx
.text:0040915F                 mov     [esp+13Ch+var_124], eax
.text:00409163                 add     ecx, ebx
.text:00409165                 mov     edx, [esp+13Ch+var_3C]
.text:0040916C                 mov     ebx, [esp+13Ch+var_48]
.text:00409173                 imul    edx, ebx
.text:00409176                 mov     ebx, [esp+13Ch+var_124]
.text:0040917A                 mov     [esi], ebx
.text:0040917C                 add     ecx, edx
.text:0040917E                 mov     [esp+13Ch+var_120], ecx
.text:00409182                 mov     eax, [esp+13Ch+var_120]
.text:00409186                 mov     [esi+4], eax
.text:00409189                 xor     eax, eax
.text:0040918B                 jmp     short loc_409125
.text:0040918D ; ---------------------------------------------------------------------------
.text:0040918D
.text:0040918D loc_40918D:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:0040918D                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:0040918D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00408E99 case 80
.text:00409194                 mov     eax, ebx
.text:00409196                 xor     ebp, ebp
.text:00409198                 mov     [esp+13Ch+var_98], ebp
.text:0040919F                 sar     eax, 1Fh
.text:004091A2                 mov     edx, [esp+13Ch+var_A4]
.text:004091A9                 mov     [esp+13Ch+var_A0], eax
.text:004091B0                 lea     esi, [esp+13Ch+var_24]
.text:004091B7                 mov     ebp, 4
.text:004091BC                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004091C3                 mov     ebx, [esp+13Ch+var_A0]
.text:004091CA                 mov     [esp+13Ch+Radix], edx
.text:004091CE                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004091D6                 mov     [esp+13Ch+var_130], ebx
.text:004091DA                 call    sub_4128D0
.text:004091DF                 mov     [esp+13Ch+var_AC], eax
.text:004091E6                 mov     [esp+13Ch+var_A8], edx
.text:004091ED
.text:004091ED loc_4091ED:                             ; CODE XREF: sub_408CE0+55F↓j
.text:004091ED                 mov     ebx, [esi+4]
.text:004091F0                 mov     edx, [esi]
.text:004091F2                 cmp     [esp+13Ch+var_A8], ebx
.text:004091F9                 mov     [esp+13Ch+var_B0], ebx
.text:00409200                 mov     [esp+13Ch+var_B4], edx
.text:00409207                 ja      short loc_40924D
.text:00409209                 mov     eax, [esp+13Ch+var_B0]
.text:00409210                 cmp     [esp+13Ch+var_A8], eax
.text:00409217                 jb      short loc_409222
.text:00409219                 cmp     [esp+13Ch+var_AC], edx
.text:00409220                 jnb     short loc_40924D
.text:00409222
.text:00409222 loc_409222:                             ; CODE XREF: sub_408CE0+537↑j
.text:00409222                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00409228                 mov     eax, 1
.text:0040922D                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00409234
.text:00409234 loc_409234:                             ; CODE XREF: sub_408CE0+5BA↓j
.text:00409234                 or      [esp+13Ch+var_98], eax
.text:0040923B                 dec     ebp
.text:0040923C                 cmp     ebp, 0FFFFFFFFh
.text:0040923F                 jnz     short loc_4091ED
.text:00409241                 mov     eax, [esp+13Ch+var_98]
.text:00409248                 jmp     loc_408FDA
.text:0040924D ; ---------------------------------------------------------------------------
.text:0040924D
.text:0040924D loc_40924D:                             ; CODE XREF: sub_408CE0+527↑j
.text:0040924D                                         ; sub_408CE0+540↑j
.text:0040924D                 mov     ecx, [esp+13Ch+var_A0]
.text:00409254                 mov     eax, [esp+13Ch+var_B4]
.text:0040925B                 mov     ebx, [esp+13Ch+var_B4]
.text:00409262                 mul     [esp+13Ch+var_A4]
.text:00409269                 imul    ebx, ecx
.text:0040926C                 mov     ecx, edx
.text:0040926E                 mov     [esp+13Ch+var_124], eax
.text:00409272                 add     ecx, ebx
.text:00409274                 mov     edx, [esp+13Ch+var_A4]
.text:0040927B                 mov     ebx, [esp+13Ch+var_B0]
.text:00409282                 xor     eax, eax
.text:00409284                 imul    edx, ebx
.text:00409287                 add     ecx, edx
.text:00409289                 mov     [esp+13Ch+var_120], ecx
.text:0040928D                 mov     ebx, [esp+13Ch+var_120]
.text:00409291                 mov     ecx, [esp+13Ch+var_124]
.text:00409295                 mov     [esi+4], ebx
.text:00409298                 mov     [esi], ecx
.text:0040929A                 jmp     short loc_409234
.text:0040929C ; ---------------------------------------------------------------------------
.text:0040929C
.text:0040929C loc_40929C:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:0040929C                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:0040929C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00408E99 case 89
.text:004092A0                 mov     eax, ebx
.text:004092A2                 lea     esi, [esp+13Ch+var_24]
.text:004092A9                 mov     [esp+13Ch+var_D8], 0
.text:004092B1                 sar     eax, 1Fh
.text:004092B4                 mov     edx, [esp+13Ch+var_E4]
.text:004092B8                 mov     [esp+13Ch+var_E0], eax
.text:004092BC                 mov     ebp, 7
.text:004092C1                 mov     ebx, [esp+13Ch+var_E0]
.text:004092C5                 mov     [esp+13Ch+Radix], edx
.text:004092C9                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004092D0                 mov     [esp+13Ch+var_130], ebx
.text:004092D4                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004092DC                 call    sub_4128D0
.text:004092E1                 mov     [esp+13Ch+var_EC], eax
.text:004092E5                 mov     [esp+13Ch+var_E8], edx
.text:004092E9
.text:004092E9 loc_4092E9:                             ; CODE XREF: sub_408CE0+646↓j
.text:004092E9                 mov     ebx, [esi+4]
.text:004092EC                 mov     edx, [esi]
.text:004092EE                 cmp     [esp+13Ch+var_E8], ebx
.text:004092F2                 mov     [esp+13Ch+var_F0], ebx
.text:004092F6                 mov     [esp+13Ch+var_F4], edx
.text:004092FA                 ja      short loc_409331
.text:004092FC                 mov     eax, [esp+13Ch+var_F0]
.text:00409300                 cmp     [esp+13Ch+var_E8], eax
.text:00409304                 jb      short loc_40930C
.text:00409306                 cmp     [esp+13Ch+var_EC], edx
.text:0040930A                 jnb     short loc_409331
.text:0040930C
.text:0040930C loc_40930C:                             ; CODE XREF: sub_408CE0+624↑j
.text:0040930C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00409312                 mov     eax, 1
.text:00409317                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040931E
.text:0040931E loc_40931E:                             ; CODE XREF: sub_408CE0+68C↓j
.text:0040931E                 or      [esp+13Ch+var_D8], eax
.text:00409322                 dec     ebp
.text:00409323                 cmp     ebp, 0FFFFFFFFh
.text:00409326                 jnz     short loc_4092E9
.text:00409328                 mov     eax, [esp+13Ch+var_D8]
.text:0040932C                 jmp     loc_408FDA
.text:00409331 ; ---------------------------------------------------------------------------
.text:00409331
.text:00409331 loc_409331:                             ; CODE XREF: sub_408CE0+61A↑j
.text:00409331                                         ; sub_408CE0+62A↑j
.text:00409331                 mov     ecx, [esp+13Ch+var_E0]
.text:00409335                 mov     eax, [esp+13Ch+var_F4]
.text:00409339                 mov     ebx, [esp+13Ch+var_F4]
.text:0040933D                 mul     [esp+13Ch+var_E4]
.text:00409341                 imul    ebx, ecx
.text:00409344                 mov     ecx, edx
.text:00409346                 mov     [esp+13Ch+var_124], eax
.text:0040934A                 add     ecx, ebx
.text:0040934C                 mov     edx, [esp+13Ch+var_E4]
.text:00409350                 mov     ebx, [esp+13Ch+var_F0]
.text:00409354                 xor     eax, eax
.text:00409356                 imul    edx, ebx
.text:00409359                 add     ecx, edx
.text:0040935B                 mov     [esp+13Ch+var_120], ecx
.text:0040935F                 mov     ebx, [esp+13Ch+var_120]
.text:00409363                 mov     ecx, [esp+13Ch+var_124]
.text:00409367                 mov     [esi+4], ebx
.text:0040936A                 mov     [esi], ecx
.text:0040936C                 jmp     short loc_40931E
.text:0040936E ; ---------------------------------------------------------------------------
.text:0040936E
.text:0040936E loc_40936E:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:0040936E                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:0040936E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00408E99 case 90
.text:00409372                 mov     eax, ebx
.text:00409374                 lea     esi, [esp+13Ch+var_24]
.text:0040937B                 mov     [esp+13Ch+var_F8], 0
.text:00409383                 sar     eax, 1Fh
.text:00409386                 mov     edx, [esp+13Ch+var_104]
.text:0040938A                 mov     [esp+13Ch+var_100], eax
.text:0040938E                 mov     ebp, 6
.text:00409393                 mov     ebx, [esp+13Ch+var_100]
.text:00409397                 mov     [esp+13Ch+Radix], edx
.text:0040939B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004093A2                 mov     [esp+13Ch+var_130], ebx
.text:004093A6                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004093AE                 call    sub_4128D0
.text:004093B3                 mov     [esp+13Ch+var_10C], eax
.text:004093B7                 mov     [esp+13Ch+var_108], edx
.text:004093BB
.text:004093BB loc_4093BB:                             ; CODE XREF: sub_408CE0+718↓j
.text:004093BB                 mov     ebx, [esi+4]
.text:004093BE                 mov     edx, [esi]
.text:004093C0                 cmp     [esp+13Ch+var_108], ebx
.text:004093C4                 mov     [esp+13Ch+var_110], ebx
.text:004093C8                 mov     [esp+13Ch+var_114], edx
.text:004093CC                 ja      short loc_409403
.text:004093CE                 mov     eax, [esp+13Ch+var_110]
.text:004093D2                 cmp     [esp+13Ch+var_108], eax
.text:004093D6                 jb      short loc_4093DE
.text:004093D8                 cmp     [esp+13Ch+var_10C], edx
.text:004093DC                 jnb     short loc_409403
.text:004093DE
.text:004093DE loc_4093DE:                             ; CODE XREF: sub_408CE0+6F6↑j
.text:004093DE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004093E4                 mov     eax, 1
.text:004093E9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004093F0
.text:004093F0 loc_4093F0:                             ; CODE XREF: sub_408CE0+75E↓j
.text:004093F0                 or      [esp+13Ch+var_F8], eax
.text:004093F4                 dec     ebp
.text:004093F5                 cmp     ebp, 0FFFFFFFFh
.text:004093F8                 jnz     short loc_4093BB
.text:004093FA                 mov     eax, [esp+13Ch+var_F8]
.text:004093FE                 jmp     loc_408FDA
.text:00409403 ; ---------------------------------------------------------------------------
.text:00409403
.text:00409403 loc_409403:                             ; CODE XREF: sub_408CE0+6EC↑j
.text:00409403                                         ; sub_408CE0+6FC↑j
.text:00409403                 mov     eax, [esp+13Ch+var_114]
.text:00409407                 mov     ebx, [esp+13Ch+var_100]
.text:0040940B                 mul     [esp+13Ch+var_104]
.text:0040940F                 mov     ecx, edx
.text:00409411                 mov     edx, [esp+13Ch+var_104]
.text:00409415                 mov     [esp+13Ch+var_124], eax
.text:00409419                 mov     eax, [esp+13Ch+var_114]
.text:0040941D                 imul    eax, ebx
.text:00409420                 mov     ebx, [esp+13Ch+var_110]
.text:00409424                 imul    edx, ebx
.text:00409427                 add     ecx, eax
.text:00409429                 xor     eax, eax
.text:0040942B                 add     ecx, edx
.text:0040942D                 mov     [esp+13Ch+var_120], ecx
.text:00409431                 mov     ebx, [esp+13Ch+var_120]
.text:00409435                 mov     ecx, [esp+13Ch+var_124]
.text:00409439                 mov     [esi+4], ebx
.text:0040943C                 mov     [esi], ecx
.text:0040943E                 jmp     short loc_4093F0
.text:00409440 ; ---------------------------------------------------------------------------
.text:00409440
.text:00409440 loc_409440:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:00409440                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:00409440                 xor     eax, eax        ; jumptable 00408E99 case 99
.text:00409442                 jmp     loc_408FDC
.text:00409447 ; ---------------------------------------------------------------------------
.text:00409447
.text:00409447 loc_409447:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:00409447                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:00409447                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00408E99 cases 71,103
.text:0040944E                 mov     eax, ebx
.text:00409450                 xor     ebp, ebp
.text:00409452                 mov     [esp+13Ch+var_50], ebp
.text:00409459                 sar     eax, 1Fh
.text:0040945C                 mov     edx, [esp+13Ch+var_5C]
.text:00409463                 mov     [esp+13Ch+var_58], eax
.text:0040946A                 lea     esi, [esp+13Ch+var_24]
.text:00409471                 mov     ebp, 2
.text:00409476                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040947D                 mov     ebx, [esp+13Ch+var_58]
.text:00409484                 mov     [esp+13Ch+Radix], edx
.text:00409488                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00409490                 mov     [esp+13Ch+var_130], ebx
.text:00409494                 call    sub_4128D0
.text:00409499                 mov     [esp+13Ch+var_64], eax
.text:004094A0                 mov     [esp+13Ch+var_60], edx
.text:004094A7
.text:004094A7 loc_4094A7:                             ; CODE XREF: sub_408CE0+819↓j
.text:004094A7                 mov     ebx, [esi+4]
.text:004094AA                 mov     edx, [esi]
.text:004094AC                 cmp     [esp+13Ch+var_60], ebx
.text:004094B3                 mov     [esp+13Ch+var_68], ebx
.text:004094BA                 mov     [esp+13Ch+var_6C], edx
.text:004094C1                 ja      short loc_409507
.text:004094C3                 mov     eax, [esp+13Ch+var_68]
.text:004094CA                 cmp     [esp+13Ch+var_60], eax
.text:004094D1                 jb      short loc_4094DC
.text:004094D3                 cmp     [esp+13Ch+var_64], edx
.text:004094DA                 jnb     short loc_409507
.text:004094DC
.text:004094DC loc_4094DC:                             ; CODE XREF: sub_408CE0+7F1↑j
.text:004094DC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004094E2                 mov     eax, 1
.text:004094E7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004094EE
.text:004094EE loc_4094EE:                             ; CODE XREF: sub_408CE0+874↓j
.text:004094EE                 or      [esp+13Ch+var_50], eax
.text:004094F5                 dec     ebp
.text:004094F6                 cmp     ebp, 0FFFFFFFFh
.text:004094F9                 jnz     short loc_4094A7
.text:004094FB                 mov     eax, [esp+13Ch+var_50]
.text:00409502                 jmp     loc_408FDA
.text:00409507 ; ---------------------------------------------------------------------------
.text:00409507
.text:00409507 loc_409507:                             ; CODE XREF: sub_408CE0+7E1↑j
.text:00409507                                         ; sub_408CE0+7FA↑j
.text:00409507                 mov     ecx, [esp+13Ch+var_58]
.text:0040950E                 mov     eax, [esp+13Ch+var_6C]
.text:00409515                 mov     ebx, [esp+13Ch+var_6C]
.text:0040951C                 mul     [esp+13Ch+var_5C]
.text:00409523                 imul    ebx, ecx
.text:00409526                 mov     ecx, edx
.text:00409528                 mov     [esp+13Ch+var_124], eax
.text:0040952C                 add     ecx, ebx
.text:0040952E                 mov     edx, [esp+13Ch+var_5C]
.text:00409535                 mov     ebx, [esp+13Ch+var_68]
.text:0040953C                 xor     eax, eax
.text:0040953E                 imul    edx, ebx
.text:00409541                 add     ecx, edx
.text:00409543                 mov     [esp+13Ch+var_120], ecx
.text:00409547                 mov     ebx, [esp+13Ch+var_120]
.text:0040954B                 mov     ecx, [esp+13Ch+var_124]
.text:0040954F                 mov     [esi+4], ebx
.text:00409552                 mov     [esi], ecx
.text:00409554                 jmp     short loc_4094EE
.text:00409556 ; ---------------------------------------------------------------------------
.text:00409556
.text:00409556 loc_409556:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:00409556                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:00409556                 mov     [esp+13Ch+var_74], ebx ; jumptable 00408E99 cases 75,107
.text:0040955D                 mov     eax, ebx
.text:0040955F                 lea     esi, [esp+13Ch+var_24]
.text:00409566                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040956D                 sar     eax, 1Fh
.text:00409570                 mov     edx, [esp+13Ch+var_74]
.text:00409577                 mov     [esp+13Ch+var_70], eax
.text:0040957E                 mov     ebx, [esp+13Ch+var_70]
.text:00409585                 mov     [esp+13Ch+Radix], edx
.text:00409589                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00409591                 mov     [esp+13Ch+var_130], ebx
.text:00409595                 call    sub_4128D0
.text:0040959A                 mov     ebp, [esp+13Ch+var_20]
.text:004095A1                 mov     ecx, [esp+13Ch+var_24]
.text:004095A8                 cmp     edx, ebp
.text:004095AA                 mov     [esp+13Ch+var_11C], ecx
.text:004095AE                 mov     [esp+13Ch+var_118], ebp
.text:004095B2                 ja      short loc_4095D9
.text:004095B4                 cmp     edx, [esp+13Ch+var_118]
.text:004095B8                 jb      short loc_4095BE
.text:004095BA                 cmp     eax, ecx
.text:004095BC                 jnb     short loc_4095D9
.text:004095BE
.text:004095BE loc_4095BE:                             ; CODE XREF: sub_408CE0+8D8↑j
.text:004095BE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004095C4                 mov     edx, 1
.text:004095C9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004095D0
.text:004095D0 loc_4095D0:                             ; CODE XREF: sub_408CE0+93D↓j
.text:004095D0                 xor     eax, eax
.text:004095D2                 or      eax, edx
.text:004095D4                 jmp     loc_408FDA
.text:004095D9 ; ---------------------------------------------------------------------------
.text:004095D9
.text:004095D9 loc_4095D9:                             ; CODE XREF: sub_408CE0+8D2↑j
.text:004095D9                                         ; sub_408CE0+8DC↑j
.text:004095D9                 mov     eax, [esp+13Ch+var_11C]
.text:004095DD                 mov     ebp, [esp+13Ch+var_11C]
.text:004095E1                 mov     ebx, [esp+13Ch+var_118]
.text:004095E5                 mul     [esp+13Ch+var_74]
.text:004095EC                 mov     [esp+13Ch+var_124], eax
.text:004095F0                 mov     eax, [esp+13Ch+var_70]
.text:004095F7                 mov     ecx, [esp+13Ch+var_124]
.text:004095FB                 imul    ebp, eax
.text:004095FE                 mov     eax, edx
.text:00409600                 xor     edx, edx
.text:00409602                 mov     [esi], ecx
.text:00409604                 add     eax, ebp
.text:00409606                 mov     ebp, [esp+13Ch+var_74]
.text:0040960D                 imul    ebp, ebx
.text:00409610                 add     eax, ebp
.text:00409612                 mov     [esp+13Ch+var_120], eax
.text:00409616                 mov     ebp, [esp+13Ch+var_120]
.text:0040961A                 mov     [esi+4], ebp
.text:0040961D                 jmp     short loc_4095D0
.text:0040961F ; ---------------------------------------------------------------------------
.text:0040961F
.text:0040961F loc_40961F:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:0040961F                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:0040961F                 mov     [esp+13Ch+var_84], ebx ; jumptable 00408E99 cases 77,109
.text:00409626                 mov     eax, ebx
.text:00409628                 xor     ebp, ebp
.text:0040962A                 mov     [esp+13Ch+var_78], ebp
.text:00409631                 sar     eax, 1Fh
.text:00409634                 mov     edx, [esp+13Ch+var_84]
.text:0040963B                 mov     [esp+13Ch+var_80], eax
.text:00409642                 lea     esi, [esp+13Ch+var_24]
.text:00409649                 mov     ebp, 1
.text:0040964E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00409655                 mov     ecx, [esp+13Ch+var_80]
.text:0040965C                 mov     [esp+13Ch+Radix], edx
.text:00409660                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00409668                 mov     [esp+13Ch+var_130], ecx
.text:0040966C                 call    sub_4128D0
.text:00409671                 mov     [esp+13Ch+var_8C], eax
.text:00409678                 mov     [esp+13Ch+var_88], edx
.text:0040967F
.text:0040967F loc_40967F:                             ; CODE XREF: sub_408CE0+9F1↓j
.text:0040967F                 mov     ebx, [esi+4]
.text:00409682                 mov     edx, [esi]
.text:00409684                 cmp     [esp+13Ch+var_88], ebx
.text:0040968B                 mov     [esp+13Ch+var_90], ebx
.text:00409692                 mov     [esp+13Ch+var_94], edx
.text:00409699                 ja      short loc_4096DF
.text:0040969B                 mov     eax, [esp+13Ch+var_90]
.text:004096A2                 cmp     [esp+13Ch+var_88], eax
.text:004096A9                 jb      short loc_4096B4
.text:004096AB                 cmp     [esp+13Ch+var_8C], edx
.text:004096B2                 jnb     short loc_4096DF
.text:004096B4
.text:004096B4 loc_4096B4:                             ; CODE XREF: sub_408CE0+9C9↑j
.text:004096B4                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004096BA                 mov     eax, 1
.text:004096BF                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004096C6
.text:004096C6 loc_4096C6:                             ; CODE XREF: sub_408CE0+A4C↓j
.text:004096C6                 or      [esp+13Ch+var_78], eax
.text:004096CD                 dec     ebp
.text:004096CE                 cmp     ebp, 0FFFFFFFFh
.text:004096D1                 jnz     short loc_40967F
.text:004096D3                 mov     eax, [esp+13Ch+var_78]
.text:004096DA                 jmp     loc_408FDA
.text:004096DF ; ---------------------------------------------------------------------------
.text:004096DF
.text:004096DF loc_4096DF:                             ; CODE XREF: sub_408CE0+9B9↑j
.text:004096DF                                         ; sub_408CE0+9D2↑j
.text:004096DF                 mov     ecx, [esp+13Ch+var_80]
.text:004096E6                 mov     eax, [esp+13Ch+var_94]
.text:004096ED                 mov     ebx, [esp+13Ch+var_94]
.text:004096F4                 mul     [esp+13Ch+var_84]
.text:004096FB                 imul    ebx, ecx
.text:004096FE                 mov     ecx, edx
.text:00409700                 mov     [esp+13Ch+var_124], eax
.text:00409704                 add     ecx, ebx
.text:00409706                 mov     edx, [esp+13Ch+var_84]
.text:0040970D                 mov     ebx, [esp+13Ch+var_90]
.text:00409714                 xor     eax, eax
.text:00409716                 imul    edx, ebx
.text:00409719                 add     ecx, edx
.text:0040971B                 mov     [esp+13Ch+var_120], ecx
.text:0040971F                 mov     ebx, [esp+13Ch+var_120]
.text:00409723                 mov     ecx, [esp+13Ch+var_124]
.text:00409727                 mov     [esi+4], ebx
.text:0040972A                 mov     [esi], ecx
.text:0040972C                 jmp     short loc_4096C6
.text:0040972E ; ---------------------------------------------------------------------------
.text:0040972E
.text:0040972E loc_40972E:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:0040972E                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:0040972E                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00408E99 cases 84,116
.text:00409732                 mov     eax, ebx
.text:00409734                 xor     ebp, ebp
.text:00409736                 mov     [esp+13Ch+var_B8], ebp
.text:0040973D                 sar     eax, 1Fh
.text:00409740                 mov     edx, [esp+13Ch+var_C4]
.text:00409744                 mov     [esp+13Ch+var_C0], eax
.text:00409748                 lea     esi, [esp+13Ch+var_24]
.text:0040974F                 mov     ebp, 3
.text:00409754                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040975B                 mov     ebx, [esp+13Ch+var_C0]
.text:0040975F                 mov     [esp+13Ch+Radix], edx
.text:00409763                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040976B                 mov     [esp+13Ch+var_130], ebx
.text:0040976F                 call    sub_4128D0
.text:00409774                 mov     [esp+13Ch+var_CC], eax
.text:00409778                 mov     [esp+13Ch+var_C8], edx
.text:0040977C
.text:0040977C loc_40977C:                             ; CODE XREF: sub_408CE0+ADC↓j
.text:0040977C                 mov     ebx, [esi+4]
.text:0040977F                 mov     edx, [esi]
.text:00409781                 cmp     [esp+13Ch+var_C8], ebx
.text:00409785                 mov     [esp+13Ch+var_D0], ebx
.text:00409789                 mov     [esp+13Ch+var_D4], edx
.text:0040978D                 ja      short loc_4097CA
.text:0040978F                 mov     eax, [esp+13Ch+var_D0]
.text:00409793                 cmp     [esp+13Ch+var_C8], eax
.text:00409797                 jb      short loc_40979F
.text:00409799                 cmp     [esp+13Ch+var_CC], edx
.text:0040979D                 jnb     short loc_4097CA
.text:0040979F
.text:0040979F loc_40979F:                             ; CODE XREF: sub_408CE0+AB7↑j
.text:0040979F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004097A5                 mov     eax, 1
.text:004097AA                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004097B1
.text:004097B1 loc_4097B1:                             ; CODE XREF: sub_408CE0+B25↓j
.text:004097B1                 or      [esp+13Ch+var_B8], eax
.text:004097B8                 dec     ebp
.text:004097B9                 cmp     ebp, 0FFFFFFFFh
.text:004097BC                 jnz     short loc_40977C
.text:004097BE                 mov     eax, [esp+13Ch+var_B8]
.text:004097C5                 jmp     loc_408FDA
.text:004097CA ; ---------------------------------------------------------------------------
.text:004097CA
.text:004097CA loc_4097CA:                             ; CODE XREF: sub_408CE0+AAD↑j
.text:004097CA                                         ; sub_408CE0+ABD↑j
.text:004097CA                 mov     ecx, [esp+13Ch+var_C0]
.text:004097CE                 mov     eax, [esp+13Ch+var_D4]
.text:004097D2                 mov     ebx, [esp+13Ch+var_D4]
.text:004097D6                 mul     [esp+13Ch+var_C4]
.text:004097DA                 imul    ebx, ecx
.text:004097DD                 mov     ecx, edx
.text:004097DF                 mov     [esp+13Ch+var_124], eax
.text:004097E3                 add     ecx, ebx
.text:004097E5                 mov     edx, [esp+13Ch+var_C4]
.text:004097E9                 mov     ebx, [esp+13Ch+var_D0]
.text:004097ED                 xor     eax, eax
.text:004097EF                 imul    edx, ebx
.text:004097F2                 add     ecx, edx
.text:004097F4                 mov     [esp+13Ch+var_120], ecx
.text:004097F8                 mov     ebx, [esp+13Ch+var_120]
.text:004097FC                 mov     ecx, [esp+13Ch+var_124]
.text:00409800                 mov     [esi+4], ebx
.text:00409803                 mov     [esi], ecx
.text:00409805                 jmp     short loc_4097B1
.text:00409807 ; ---------------------------------------------------------------------------
.text:00409807
.text:00409807 loc_409807:                             ; CODE XREF: sub_408CE0+1B9↑j
.text:00409807                                         ; DATA XREF: sub_408CE0:jpt_408E99↑o
.text:00409807                 mov     [esp+13Ch+Radix], 2 ; jumptable 00408E99 case 119
.text:0040980F                 lea     ebp, [esp+13Ch+var_24]
.text:00409816                 mov     [esp+13Ch+var_130], 0
.text:0040981E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00409825                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040982D                 call    sub_4128D0
.text:00409832                 mov     esi, [esp+13Ch+var_20]
.text:00409839                 mov     ecx, [esp+13Ch+var_24]
.text:00409840                 cmp     edx, esi
.text:00409842                 ja      short loc_409852
.text:00409844                 jb      loc_409005
.text:0040984A                 cmp     eax, ecx
.text:0040984C                 jb      loc_409005
.text:00409852
.text:00409852 loc_409852:                             ; CODE XREF: sub_408CE0+B62↑j
.text:00409852                 mov     esi, [ebp+0]
.text:00409855                 mov     eax, 2
.text:0040985A                 mov     ecx, [ebp+4]
.text:0040985D                 mul     esi
.text:0040985F                 lea     edx, [edx+ecx*2]
.text:00409862                 jmp     loc_408FD2
.text:00409867 ; ---------------------------------------------------------------------------
.text:00409867
.text:00409867 loc_409867:                             ; CODE XREF: sub_408CE0+196↑j
.text:00409867                                         ; sub_408CE0+1A8↑j
.text:00409867                 mov     esi, 2
.text:0040986C                 mov     ebx, 3E8h
.text:00409871                 mov     [esp+13Ch+var_30], esi
.text:00409878                 jmp     loc_408E8E
.text:0040987D ; ---------------------------------------------------------------------------
.text:0040987D
.text:0040987D loc_40987D:                             ; CODE XREF: sub_408CE0+19F↑j
.text:0040987D                 cmp     eax, 69h ; 'i'
.text:00409880                 jnz     loc_408E8E
.text:00409886                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040988A                 jnz     loc_408E8E
.text:00409890                 mov     eax, 3
.text:00409895                 mov     [esp+13Ch+var_30], eax
.text:0040989C                 jmp     loc_408E8E
.text:004098A1 ; ---------------------------------------------------------------------------
.text:004098A1
.text:004098A1 loc_4098A1:                             ; CODE XREF: sub_408CE0+187↑j
.text:004098A1                 mov     edx, [edi]
.text:004098A3                 jmp     loc_408E8E
.text:004098A8 ; ---------------------------------------------------------------------------
.text:004098A8
.text:004098A8 loc_4098A8:                             ; CODE XREF: sub_408CE0+E2↑j
.text:004098A8                 mov     edx, [esp+13Ch+var_24]
.text:004098AF                 mov     ecx, [esp+13Ch+var_20]
.text:004098B6                 mov     edi, [esp+13Ch+arg_C]
.text:004098BD                 mov     [edi], edx
.text:004098BF                 mov     [edi+4], ecx
.text:004098C2                 jmp     loc_408DEB
.text:004098C7 ; ---------------------------------------------------------------------------
.text:004098C7
.text:004098C7 loc_4098C7:                             ; CODE XREF: sub_408CE0+D3↑j
.text:004098C7                 call    _errno
.text:004098CC                 cmp     dword ptr [eax], 22h ; '"'
.text:004098CF                 jnz     short loc_4098E2
.text:004098D1                 mov     esi, 1
.text:004098D6                 mov     [esp+13Ch+var_28], esi
.text:004098DD                 jmp     loc_408DB9
.text:004098E2 ; ---------------------------------------------------------------------------
.text:004098E2
.text:004098E2 loc_4098E2:                             ; CODE XREF: sub_408CE0+BEF↑j
.text:004098E2                                         ; sub_408CE0+C15↓j ...
.text:004098E2                 mov     eax, 4
.text:004098E7                 jmp     loc_408DF2
.text:004098EC ; ---------------------------------------------------------------------------
.text:004098EC
.text:004098EC loc_4098EC:                             ; CODE XREF: sub_408CE0+C4↑j
.text:004098EC                 mov     ebx, [esp+13Ch+Str]
.text:004098F3                 test    ebx, ebx
.text:004098F5                 jz      short loc_4098E2
.text:004098F7                 movzx   eax, byte ptr [eax]
.text:004098FA                 test    al, al
.text:004098FC                 jz      short loc_4098E2
.text:004098FE                 mov     esi, [esp+13Ch+Str]
.text:00409905                 movsx   ebp, al
.text:00409908                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040990C                 mov     [esp+13Ch+C], esi ; Str
.text:0040990F                 call    strchr
.text:00409914                 test    eax, eax
.text:00409916                 jz      short loc_4098E2
.text:00409918                 mov     ecx, 1
.text:0040991D                 xor     edx, edx
.text:0040991F                 mov     [esp+13Ch+var_24], ecx
.text:00409926                 mov     [esp+13Ch+var_20], edx
.text:0040992D                 jmp     loc_408DB9
.text:00409932 ; ---------------------------------------------------------------------------
.text:00409932
.text:00409932 loc_409932:                             ; CODE XREF: sub_408CE0+61↑j
.text:00409932                 mov     eax, ds:_pctype
.text:00409937                 mov     ecx, [eax]
.text:00409939                 movzx   eax, word ptr [ecx+edx*2]
.text:0040993D                 and     eax, 8
.text:00409940                 jmp     loc_408D57
.text:00409945 ; ---------------------------------------------------------------------------
.text:00409945
.text:00409945 loc_409945:                             ; CODE XREF: sub_408CE0+33↑j
.text:00409945                 lea     edi, [esp+13Ch+var_18]
.text:0040994C                 jmp     loc_408D19
.text:00409951 ; ---------------------------------------------------------------------------
.text:00409951
.text:00409951 loc_409951:                             ; CODE XREF: sub_408CE0+24↑j
.text:00409951                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00409959                 mov     [esp+13Ch+Type], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00409961                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00409968                 call    _assert
.text:00409968 sub_408CE0      endp
.text:00409968
.text:00409968 ; ---------------------------------------------------------------------------
.text:0040996D                 align 10h
.text:00409970 aLiteral        db 'literal',0          ; DATA XREF: .text:004099B0↓o
.text:00409978 aShell          db 'shell',0            ; DATA XREF: .text:004099B4↓o
.text:0040997E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004099B8↓o
.text:0040998B aC_0            db 'c',0                ; DATA XREF: .text:004099BC↓o
.text:0040998D aEscape         db 'escape',0           ; DATA XREF: .text:004099C0↓o
.text:00409994 aLocale         db 'locale',0           ; DATA XREF: .text:004099C4↓o
.text:0040999B aClocale        db 'clocale',0          ; DATA XREF: .text:004099C8↓o
.text:004099A3                 align 10h
.text:004099B0                 dd offset aLiteral      ; "literal"
.text:004099B4                 dd offset aShell        ; "shell"
.text:004099B8                 dd offset aShellAlways  ; "shell-always"
.text:004099BC                 dd offset aC_0          ; "c"
.text:004099C0                 dd offset aEscape       ; "escape"
.text:004099C4                 dd offset aLocale       ; "locale"
.text:004099C8                 dd offset aClocale      ; "clocale"
.text:004099CC                 dd 2 dup(0)
.text:004099D4                 dd 1, 2, 3, 4, 5, 6
.text:004099EC asc_4099EC:                             ; DATA XREF: sub_409A00+7E↓o
.text:004099EC                                         ; sub_409A00+A39↓o ...
.text:004099EC                 text "UTF-16LE", '"',27h,'`'
.text:004099F2                 align 10h
.text:00409A00
.text:00409A00 ; =============== S U B R O U T I N E =======================================
.text:00409A00
.text:00409A00
.text:00409A00 ; int __cdecl sub_409A00(int, int, char *Str, int, int, int)
.text:00409A00 sub_409A00      proc near               ; CODE XREF: sub_409A00+43A↓p
.text:00409A00                                         ; .text:0040A5C3↓p ...
.text:00409A00
.text:00409A00 C               = dword ptr -4Ch
.text:00409A00 Type            = dword ptr -48h
.text:00409A00 SizeInBytes     = dword ptr -44h
.text:00409A00 State           = dword ptr -40h
.text:00409A00 var_3C          = dword ptr -3Ch
.text:00409A00 var_38          = dword ptr -38h
.text:00409A00 var_34          = dword ptr -34h
.text:00409A00 var_30          = dword ptr -30h
.text:00409A00 var_29          = byte ptr -29h
.text:00409A00 var_28          = dword ptr -28h
.text:00409A00 var_22          = byte ptr -22h
.text:00409A00 var_21          = byte ptr -21h
.text:00409A00 var_20          = dword ptr -20h
.text:00409A00 var_1C          = dword ptr -1Ch
.text:00409A00 var_18          = mbstate_t ptr -18h
.text:00409A00 arg_0           = dword ptr  4
.text:00409A00 arg_4           = dword ptr  8
.text:00409A00 Str             = dword ptr  0Ch
.text:00409A00 arg_C           = dword ptr  10h
.text:00409A00 arg_10          = dword ptr  14h
.text:00409A00 arg_14          = dword ptr  18h
.text:00409A00
.text:00409A00                 push    ebp
.text:00409A01                 push    edi
.text:00409A02                 push    esi
.text:00409A03                 push    ebx
.text:00409A04                 sub     esp, 3Ch
.text:00409A07                 mov     edx, ds:__mb_cur_max
.text:00409A0D                 mov     [esp+4Ch+var_34], 0
.text:00409A15                 mov     [esp+4Ch+var_1C], 0
.text:00409A1D                 cmp     dword ptr [edx], 1
.text:00409A20                 mov     [esp+4Ch+var_20], 0
.text:00409A28                 mov     [esp+4Ch+var_21], 0
.text:00409A2D                 setz    [esp+4Ch+var_22]
.text:00409A32                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00409A37                 ja      short def_409A3D ; jumptable 00409A3D default case, cases 0,1
.text:00409A39                 mov     edx, [esp+4Ch+arg_10]
.text:00409A3D                 jmp     ds:jpt_409A3D[edx*4] ; switch jump
.text:00409A3D ; ---------------------------------------------------------------------------
.text:00409A44 jpt_409A3D      dd offset def_409A3D    ; DATA XREF: sub_409A00+3D↑r
.text:00409A44                 dd offset def_409A3D    ; jump table for switch statement
.text:00409A44                 dd offset loc_40A385
.text:00409A44                 dd offset loc_409A60
.text:00409A44                 dd offset loc_40A3AB
.text:00409A44                 dd offset loc_40A3B5
.text:00409A44                 dd offset loc_40A3B5
.text:00409A60 ; ---------------------------------------------------------------------------
.text:00409A60
.text:00409A60 loc_409A60:                             ; CODE XREF: sub_409A00+3D↑j
.text:00409A60                                         ; DATA XREF: sub_409A00:jpt_409A3D↑o
.text:00409A60                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00409A3D case 3
.text:00409A64                 cmp     [esp+4Ch+var_34], eax
.text:00409A68                 jnb     short loc_409A71
.text:00409A6A                 mov     ebx, [esp+4Ch+arg_0]
.text:00409A6E                 mov     byte ptr [ebx], 22h ; '"'
.text:00409A71
.text:00409A71 loc_409A71:                             ; CODE XREF: sub_409A00+68↑j
.text:00409A71                 mov     [esp+4Ch+var_34], 1
.text:00409A79                 mov     [esp+4Ch+var_21], 1
.text:00409A7E                 mov     [esp+4Ch+var_1C], offset asc_4099EC ; "\"'`"
.text:00409A86
.text:00409A86 loc_409A86:                             ; CODE XREF: sub_409A00+9A6↓j
.text:00409A86                 mov     [esp+4Ch+var_20], 1
.text:00409A8E
.text:00409A8E def_409A3D:                             ; CODE XREF: sub_409A00+37↑j
.text:00409A8E                                         ; sub_409A00+3D↑j ...
.text:00409A8E                 xor     ebp, ebp        ; jumptable 00409A3D default case, cases 0,1
.text:00409A90
.text:00409A90 loc_409A90:                             ; CODE XREF: sub_409A00+3DB↓j
.text:00409A90                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00409A95                 jz      loc_40A377
.text:00409A9B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00409A9F
.text:00409A9F loc_409A9F:                             ; CODE XREF: sub_409A00+980↓j
.text:00409A9F                 jz      loc_40A30E
.text:00409AA5                 cmp     [esp+4Ch+var_21], 0
.text:00409AAA                 jz      short loc_409AF0
.text:00409AAC                 mov     esi, [esp+4Ch+var_20]
.text:00409AB0                 test    esi, esi
.text:00409AB2                 jz      short loc_409AF0
.text:00409AB4                 mov     ecx, [esp+4Ch+var_20]
.text:00409AB8                 lea     edi, [ecx+ebp]
.text:00409ABB                 cmp     edi, [esp+4Ch+arg_C]
.text:00409ABF                 ja      short loc_409AF0
.text:00409AC1                 cld
.text:00409AC2                 mov     ebx, [esp+4Ch+Str]
.text:00409AC6                 mov     edi, [esp+4Ch+var_1C]
.text:00409ACA                 add     ebx, ebp
.text:00409ACC                 mov     esi, ebx
.text:00409ACE                 cmp     ecx, ecx
.text:00409AD0                 repe cmpsb
.text:00409AD2                 jnz     short loc_409AF0
.text:00409AD4                 mov     edx, [esp+4Ch+arg_4]
.text:00409AD8                 cmp     [esp+4Ch+var_34], edx
.text:00409ADC                 jnb     short loc_409AEA
.text:00409ADE                 mov     ecx, [esp+4Ch+arg_0]
.text:00409AE2                 mov     eax, [esp+4Ch+var_34]
.text:00409AE6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00409AEA
.text:00409AEA loc_409AEA:                             ; CODE XREF: sub_409A00+DC↑j
.text:00409AEA                 inc     [esp+4Ch+var_34]
.text:00409AEE                 mov     esi, esi
.text:00409AF0
.text:00409AF0 loc_409AF0:                             ; CODE XREF: sub_409A00+AA↑j
.text:00409AF0                                         ; sub_409A00+B2↑j ...
.text:00409AF0                 mov     edi, [esp+4Ch+Str]
.text:00409AF4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00409AF9                 movzx   eax, bl
.text:00409AFC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00409AFF                 ja      def_409B05      ; jumptable 00409B05 default case, cases 1-6,14-31,64
.text:00409B05                 jmp     ds:jpt_409B05[eax*4] ; switch jump
.text:00409B05 ; ---------------------------------------------------------------------------
.text:00409B0C jpt_409B05      dd offset loc_409D08, offset def_409B05, offset def_409B05
.text:00409B0C                                         ; DATA XREF: sub_409A00+105↑r
.text:00409B0C                 dd offset def_409B05, offset def_409B05, offset def_409B05 ; jump table for switch statement
.text:00409B0C                 dd offset def_409B05, offset loc_409DE0, offset loc_409DFE
.text:00409B0C                 dd offset loc_409E02, offset loc_409E47, offset loc_409E4B
.text:00409B0C                 dd offset loc_409E4F, offset loc_409E53, offset def_409B05
.text:00409B0C                 dd offset def_409B05, offset def_409B05, offset def_409B05
.text:00409B0C                 dd offset def_409B05, offset def_409B05, offset def_409B05
.text:00409B0C                 dd offset def_409B05, offset def_409B05, offset def_409B05
.text:00409B0C                 dd offset def_409B05, offset def_409B05, offset def_409B05
.text:00409B0C                 dd offset def_409B05, offset def_409B05, offset def_409B05
.text:00409B0C                 dd offset def_409B05, offset def_409B05, offset loc_40A2D8
.text:00409B0C                 dd offset loc_40A2D8, offset loc_40A2D8, offset loc_40A2FA
.text:00409B0C                 dd offset loc_40A2D8, offset def_409F02, offset loc_40A2D8
.text:00409B0C                 dd offset loc_409E57, offset loc_40A2D8, offset loc_40A2D8
.text:00409B0C                 dd offset loc_40A2D8, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset loc_40A2D8
.text:00409B0C                 dd offset loc_40A2D8, offset loc_40A2D8, offset loc_40A2D8
.text:00409B0C                 dd offset loc_409EBC, offset def_409B05, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset loc_40A2D8, offset loc_40A2D1
.text:00409B0C                 dd offset def_409F02, offset loc_40A2D8, offset def_409F02
.text:00409B0C                 dd offset loc_40A2D8, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset def_409F02, offset def_409F02, offset def_409F02
.text:00409B0C                 dd offset loc_40A2E8, offset loc_40A2D8, offset loc_40A2E8
.text:00409B0C                 dd offset loc_40A2FA
.text:00409D08 ; ---------------------------------------------------------------------------
.text:00409D08
.text:00409D08 loc_409D08:                             ; CODE XREF: sub_409A00+105↑j
.text:00409D08                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409D08                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00409B05 case 0
.text:00409D0D                 lea     eax, [ebp+1]
.text:00409D10                 jz      loc_409DC0
.text:00409D16                 mov     esi, [esp+4Ch+arg_4]
.text:00409D1A                 cmp     [esp+4Ch+var_34], esi
.text:00409D1E                 jnb     short loc_409D2C
.text:00409D20                 mov     eax, [esp+4Ch+arg_0]
.text:00409D24                 mov     ebx, [esp+4Ch+var_34]
.text:00409D28                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00409D2C
.text:00409D2C loc_409D2C:                             ; CODE XREF: sub_409A00+31E↑j
.text:00409D2C                 inc     [esp+4Ch+var_34]
.text:00409D30                 mov     edx, [esp+4Ch+arg_4]
.text:00409D34                 cmp     [esp+4Ch+var_34], edx
.text:00409D38                 jnb     short loc_409D46
.text:00409D3A                 mov     edi, [esp+4Ch+arg_0]
.text:00409D3E                 mov     ecx, [esp+4Ch+var_34]
.text:00409D42                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00409D46
.text:00409D46 loc_409D46:                             ; CODE XREF: sub_409A00+338↑j
.text:00409D46                 inc     [esp+4Ch+var_34]
.text:00409D4A                 mov     esi, [esp+4Ch+arg_4]
.text:00409D4E                 cmp     [esp+4Ch+var_34], esi
.text:00409D52                 jnb     short loc_409D60
.text:00409D54                 mov     ebx, [esp+4Ch+arg_0]
.text:00409D58                 mov     eax, [esp+4Ch+var_34]
.text:00409D5C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00409D60
.text:00409D60 loc_409D60:                             ; CODE XREF: sub_409A00+352↑j
.text:00409D60                 inc     [esp+4Ch+var_34]
.text:00409D64                 mov     bl, 30h ; '0'
.text:00409D66                 lea     esi, [esi+0]
.text:00409D69                 lea     edi, [edi+0]
.text:00409D70
.text:00409D70 def_409F02:                             ; CODE XREF: sub_409A00+105↑j
.text:00409D70                                         ; sub_409A00+463↓j ...
.text:00409D70                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:00409D70                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:00409D75                 lea     eax, [ebp+1]
.text:00409D78                 jz      short loc_409DC0
.text:00409D7A                 mov     cl, bl
.text:00409D7C                 mov     edi, [esp+4Ch+arg_14]
.text:00409D80                 mov     esi, 1
.text:00409D85                 shr     cl, 5
.text:00409D88                 movzx   edx, cl
.text:00409D8B                 mov     ecx, ebx
.text:00409D8D                 and     ecx, 1Fh
.text:00409D90                 shl     esi, cl
.text:00409D92                 test    [edi+edx*4+4], esi
.text:00409D96                 jz      short loc_409DB2
.text:00409D98
.text:00409D98 loc_409D98:                             ; CODE XREF: sub_409A00+3FC↓j
.text:00409D98                 mov     edx, [esp+4Ch+arg_4]
.text:00409D9C                 cmp     [esp+4Ch+var_34], edx
.text:00409DA0                 jnb     short loc_409DAE
.text:00409DA2                 mov     edi, [esp+4Ch+arg_0]
.text:00409DA6                 mov     esi, [esp+4Ch+var_34]
.text:00409DAA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00409DAE
.text:00409DAE loc_409DAE:                             ; CODE XREF: sub_409A00+3A0↑j
.text:00409DAE                 inc     [esp+4Ch+var_34]
.text:00409DB2
.text:00409DB2 loc_409DB2:                             ; CODE XREF: sub_409A00+396↑j
.text:00409DB2                 lea     eax, [ebp+1]
.text:00409DB5                 lea     esi, [esi+0]
.text:00409DB9                 lea     edi, [edi+0]
.text:00409DC0
.text:00409DC0 loc_409DC0:                             ; CODE XREF: sub_409A00+310↑j
.text:00409DC0                                         ; sub_409A00+378↑j ...
.text:00409DC0                 mov     ebp, [esp+4Ch+arg_4]
.text:00409DC4                 cmp     [esp+4Ch+var_34], ebp
.text:00409DC8                 jnb     short loc_409DD5
.text:00409DCA                 mov     edx, [esp+4Ch+arg_0]
.text:00409DCE                 mov     ecx, [esp+4Ch+var_34]
.text:00409DD2                 mov     [ecx+edx], bl
.text:00409DD5
.text:00409DD5 loc_409DD5:                             ; CODE XREF: sub_409A00+3C8↑j
.text:00409DD5                 inc     [esp+4Ch+var_34]
.text:00409DD9                 mov     ebp, eax
.text:00409DDB                 jmp     loc_409A90
.text:00409DE0 ; ---------------------------------------------------------------------------
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: sub_409A00+105↑j
.text:00409DE0                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409DE0                 mov     dl, 61h ; 'a'   ; jumptable 00409B05 case 7
.text:00409DE2                 lea     esi, [esi+0]
.text:00409DE9                 lea     edi, [edi+0]
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: sub_409A00+400↓j
.text:00409DF0                                         ; sub_409A00+409↓j ...
.text:00409DF0                 cmp     [esp+4Ch+var_21], 0
.text:00409DF5                 lea     eax, [ebp+1]
.text:00409DF8                 jz      short loc_409DC0
.text:00409DFA                 mov     bl, dl
.text:00409DFC                 jmp     short loc_409D98
.text:00409DFE ; ---------------------------------------------------------------------------
.text:00409DFE
.text:00409DFE loc_409DFE:                             ; CODE XREF: sub_409A00+105↑j
.text:00409DFE                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409DFE                 mov     dl, 62h ; 'b'   ; jumptable 00409B05 case 8
.text:00409E00                 jmp     short loc_409DF0
.text:00409E02 ; ---------------------------------------------------------------------------
.text:00409E02
.text:00409E02 loc_409E02:                             ; CODE XREF: sub_409A00+105↑j
.text:00409E02                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409E02                 mov     dl, 74h ; 't'   ; jumptable 00409B05 case 9
.text:00409E04
.text:00409E04 loc_409E04:                             ; CODE XREF: sub_409A00+449↓j
.text:00409E04                                         ; sub_409A00+455↓j ...
.text:00409E04                 cmp     [esp+4Ch+arg_10], 1
.text:00409E09                 jnz     short loc_409DF0
.text:00409E0B
.text:00409E0B loc_409E0B:                             ; CODE XREF: sub_409A00+45C↓j
.text:00409E0B                                         ; sub_409A00+4C1↓j ...
.text:00409E0B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 0040A1D2 cases 91,92,94,96,124
.text:00409E13                 mov     eax, [esp+4Ch+arg_14]
.text:00409E17                 mov     edx, [esp+4Ch+arg_C]
.text:00409E1B                 mov     ecx, [esp+4Ch+Str]
.text:00409E1F                 mov     ebx, [esp+4Ch+arg_4]
.text:00409E23                 mov     [esp+4Ch+var_38], eax ; int
.text:00409E27                 mov     ebp, [esp+4Ch+arg_0]
.text:00409E2B                 mov     [esp+4Ch+State], edx ; int
.text:00409E2F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00409E33                 mov     [esp+4Ch+Type], ebx ; int
.text:00409E37                 mov     [esp+4Ch+C], ebp ; int
.text:00409E3A                 call    sub_409A00
.text:00409E3F
.text:00409E3F loc_409E3F:                             ; CODE XREF: sub_409A00+972↓j
.text:00409E3F                 add     esp, 3Ch
.text:00409E42                 pop     ebx
.text:00409E43                 pop     esi
.text:00409E44                 pop     edi
.text:00409E45                 pop     ebp
.text:00409E46                 retn
.text:00409E47 ; ---------------------------------------------------------------------------
.text:00409E47
.text:00409E47 loc_409E47:                             ; CODE XREF: sub_409A00+105↑j
.text:00409E47                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409E47                 mov     dl, 6Eh ; 'n'   ; jumptable 00409B05 case 10
.text:00409E49                 jmp     short loc_409E04
.text:00409E4B ; ---------------------------------------------------------------------------
.text:00409E4B
.text:00409E4B loc_409E4B:                             ; CODE XREF: sub_409A00+105↑j
.text:00409E4B                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409E4B                 mov     dl, 76h ; 'v'   ; jumptable 00409B05 case 11
.text:00409E4D                 jmp     short loc_409DF0
.text:00409E4F ; ---------------------------------------------------------------------------
.text:00409E4F
.text:00409E4F loc_409E4F:                             ; CODE XREF: sub_409A00+105↑j
.text:00409E4F                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409E4F                 mov     dl, 66h ; 'f'   ; jumptable 00409B05 case 12
.text:00409E51                 jmp     short loc_409DF0
.text:00409E53 ; ---------------------------------------------------------------------------
.text:00409E53
.text:00409E53 loc_409E53:                             ; CODE XREF: sub_409A00+105↑j
.text:00409E53                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409E53                 mov     dl, 72h ; 'r'   ; jumptable 00409B05 case 13
.text:00409E55                 jmp     short loc_409E04
.text:00409E57 ; ---------------------------------------------------------------------------
.text:00409E57
.text:00409E57 loc_409E57:                             ; CODE XREF: sub_409A00+105↑j
.text:00409E57                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409E57                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409B05 case 39
.text:00409E5C                 jz      short loc_409E0B ; jumptable 0040A1D2 cases 91,92,94,96,124
.text:00409E5E                 cmp     [esp+4Ch+arg_10], 2
.text:00409E63                 jnz     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:00409E63                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:00409E69                 mov     edx, [esp+4Ch+arg_4]
.text:00409E6D                 cmp     [esp+4Ch+var_34], edx
.text:00409E71                 jnb     short loc_409E7F
.text:00409E73                 mov     ecx, [esp+4Ch+arg_0]
.text:00409E77                 mov     edi, [esp+4Ch+var_34]
.text:00409E7B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00409E7F
.text:00409E7F loc_409E7F:                             ; CODE XREF: sub_409A00+471↑j
.text:00409E7F                 inc     [esp+4Ch+var_34]
.text:00409E83                 mov     eax, [esp+4Ch+arg_4]
.text:00409E87                 cmp     [esp+4Ch+var_34], eax
.text:00409E8B                 jnb     short loc_409E99
.text:00409E8D                 mov     esi, [esp+4Ch+arg_0]
.text:00409E91                 mov     edx, [esp+4Ch+var_34]
.text:00409E95                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00409E99
.text:00409E99 loc_409E99:                             ; CODE XREF: sub_409A00+48B↑j
.text:00409E99                 inc     [esp+4Ch+var_34]
.text:00409E9D                 mov     edi, [esp+4Ch+arg_4]
.text:00409EA1                 cmp     [esp+4Ch+var_34], edi
.text:00409EA5                 jnb     short loc_409EB3
.text:00409EA7                 mov     ecx, [esp+4Ch+arg_0]
.text:00409EAB                 mov     eax, [esp+4Ch+var_34]
.text:00409EAF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00409EB3
.text:00409EB3 loc_409EB3:                             ; CODE XREF: sub_409A00+4A5↑j
.text:00409EB3                                         ; sub_409A00+5C4↓j ...
.text:00409EB3                 inc     [esp+4Ch+var_34]
.text:00409EB7                 jmp     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:00409EB7                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:00409EBC ; ---------------------------------------------------------------------------
.text:00409EBC
.text:00409EBC loc_409EBC:                             ; CODE XREF: sub_409A00+105↑j
.text:00409EBC                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:00409EBC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409B05 case 63
.text:00409EC1                 jz      loc_409E0B      ; jumptable 0040A1D2 cases 91,92,94,96,124
.text:00409EC7                 cmp     [esp+4Ch+arg_10], 3
.text:00409ECC                 jnz     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:00409ECC                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:00409ED2                 lea     edx, [ebp+2]
.text:00409ED5                 cmp     edx, [esp+4Ch+arg_C]
.text:00409ED9                 jnb     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:00409ED9                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:00409EDF                 mov     esi, [esp+4Ch+Str]
.text:00409EE3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00409EE8                 jnz     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:00409EE8                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:00409EEE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00409EF3                 movsx   eax, cl
.text:00409EF6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00409EF9                 cmp     eax, 1Dh
.text:00409EFC                 ja      def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:00409EFC                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:00409F02                 jmp     ds:jpt_409F02[eax*4] ; switch jump
.text:00409F02 ; ---------------------------------------------------------------------------
.text:00409F09                 align 4
.text:00409F0C jpt_409F02      dd offset loc_409F84    ; DATA XREF: sub_409A00+502↑r
.text:00409F0C                 dd offset def_409F02    ; jump table for switch statement
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset loc_409F84
.text:00409F0C                 dd offset loc_409F84
.text:00409F0C                 dd offset loc_409F84
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset loc_409F84
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset loc_409F84
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset def_409F02
.text:00409F0C                 dd offset loc_409F84
.text:00409F0C                 dd offset loc_409F84
.text:00409F0C                 dd offset loc_409F84
.text:00409F84 ; ---------------------------------------------------------------------------
.text:00409F84
.text:00409F84 loc_409F84:                             ; CODE XREF: sub_409A00+502↑j
.text:00409F84                                         ; DATA XREF: sub_409A00:jpt_409F02↑o
.text:00409F84                 mov     ebp, edx        ; jumptable 00409F02 cases 33,39-41,45,47,60-62
.text:00409F86                 mov     bl, cl
.text:00409F88                 mov     edx, [esp+4Ch+arg_4]
.text:00409F8C                 cmp     [esp+4Ch+var_34], edx
.text:00409F90                 jnb     short loc_409F9E
.text:00409F92                 mov     ecx, [esp+4Ch+arg_0]
.text:00409F96                 mov     edi, [esp+4Ch+var_34]
.text:00409F9A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00409F9E
.text:00409F9E loc_409F9E:                             ; CODE XREF: sub_409A00+590↑j
.text:00409F9E                 inc     [esp+4Ch+var_34]
.text:00409FA2                 mov     eax, [esp+4Ch+arg_4]
.text:00409FA6                 cmp     [esp+4Ch+var_34], eax
.text:00409FAA                 jnb     short loc_409FB8
.text:00409FAC                 mov     edx, [esp+4Ch+arg_0]
.text:00409FB0                 mov     esi, [esp+4Ch+var_34]
.text:00409FB4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00409FB8
.text:00409FB8 loc_409FB8:                             ; CODE XREF: sub_409A00+5AA↑j
.text:00409FB8                 inc     [esp+4Ch+var_34]
.text:00409FBC                 mov     edi, [esp+4Ch+arg_4]
.text:00409FC0                 cmp     [esp+4Ch+var_34], edi
.text:00409FC4                 jnb     loc_409EB3
.text:00409FCA                 mov     eax, [esp+4Ch+arg_0]
.text:00409FCE                 mov     ecx, [esp+4Ch+var_34]
.text:00409FD2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00409FD6                 jmp     loc_409EB3
.text:00409FD6 ; ---------------------------------------------------------------------------
.text:00409FDB                 align 10h
.text:00409FE0
.text:00409FE0 def_409B05:                             ; CODE XREF: sub_409A00+FF↑j
.text:00409FE0                                         ; sub_409A00+105↑j
.text:00409FE0                                         ; DATA XREF: ...
.text:00409FE0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00409B05 default case, cases 1-6,14-31,64
.text:00409FE5                 jz      loc_40A110
.text:00409FEB                 mov     [esp+4Ch+var_28], 1
.text:00409FF3                 mov     esi, ds:__mb_cur_max
.text:00409FF9                 movzx   edx, bl
.text:00409FFC                 cmp     dword ptr [esi], 1
.text:00409FFF                 jz      loc_40A0F4
.text:0040A005                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040A00D                 mov     [esp+4Ch+C], edx ; C
.text:0040A010                 call    _isctype
.text:0040A015
.text:0040A015 loc_40A015:                             ; CODE XREF: sub_409A00+705↓j
.text:0040A015                 test    eax, eax
.text:0040A017                 setnz   [esp+4Ch+var_29]
.text:0040A01C
.text:0040A01C loc_40A01C:                             ; CODE XREF: sub_409A00+7A5↓j
.text:0040A01C                 cmp     [esp+4Ch+var_21], 0
.text:0040A021                 lea     eax, [ebp+1]
.text:0040A024                 jz      loc_409DC0
.text:0040A02A                 cmp     [esp+4Ch+var_29], 0
.text:0040A02F                 jnz     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:0040A02F                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:0040A035
.text:0040A035 loc_40A035:                             ; CODE XREF: sub_409A00+7AB↓j
.text:0040A035                 mov     eax, [esp+4Ch+var_28]
.text:0040A039                 lea     edx, [eax+ebp]
.text:0040A03C                 lea     esi, [esi+0]
.text:0040A040
.text:0040A040 loc_40A040:                             ; CODE XREF: sub_409A00+6EF↓j
.text:0040A040                 cmp     [esp+4Ch+var_21], 0
.text:0040A045                 jz      short loc_40A0C0
.text:0040A047                 cmp     [esp+4Ch+var_29], 0
.text:0040A04C                 jnz     short loc_40A0C0
.text:0040A04E                 mov     edi, [esp+4Ch+arg_4]
.text:0040A052                 cmp     [esp+4Ch+var_34], edi
.text:0040A056                 jnb     short loc_40A064
.text:0040A058                 mov     esi, [esp+4Ch+arg_0]
.text:0040A05C                 mov     eax, [esp+4Ch+var_34]
.text:0040A060                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:0040A064
.text:0040A064 loc_40A064:                             ; CODE XREF: sub_409A00+656↑j
.text:0040A064                 inc     [esp+4Ch+var_34]
.text:0040A068                 mov     ecx, [esp+4Ch+arg_4]
.text:0040A06C                 cmp     [esp+4Ch+var_34], ecx
.text:0040A070                 jnb     short loc_40A085
.text:0040A072                 mov     cl, bl
.text:0040A074                 mov     esi, [esp+4Ch+arg_0]
.text:0040A078                 mov     edi, [esp+4Ch+var_34]
.text:0040A07C                 shr     cl, 6
.text:0040A07F                 add     cl, 30h ; '0'
.text:0040A082                 mov     [edi+esi], cl
.text:0040A085
.text:0040A085 loc_40A085:                             ; CODE XREF: sub_409A00+670↑j
.text:0040A085                 inc     [esp+4Ch+var_34]
.text:0040A089                 mov     edi, [esp+4Ch+arg_4]
.text:0040A08D                 cmp     [esp+4Ch+var_34], edi
.text:0040A091                 jnb     short loc_40A0A9
.text:0040A093                 mov     cl, bl
.text:0040A095                 mov     esi, [esp+4Ch+arg_0]
.text:0040A099                 shr     cl, 3
.text:0040A09C                 mov     edi, [esp+4Ch+var_34]
.text:0040A0A0                 and     cl, 7
.text:0040A0A3                 add     cl, 30h ; '0'
.text:0040A0A6                 mov     [edi+esi], cl
.text:0040A0A9
.text:0040A0A9 loc_40A0A9:                             ; CODE XREF: sub_409A00+691↑j
.text:0040A0A9                 inc     [esp+4Ch+var_34]
.text:0040A0AD                 and     bl, 7
.text:0040A0B0                 add     bl, 30h ; '0'
.text:0040A0B3                 lea     esi, [esi+0]
.text:0040A0B9                 lea     edi, [edi+0]
.text:0040A0C0
.text:0040A0C0 loc_40A0C0:                             ; CODE XREF: sub_409A00+645↑j
.text:0040A0C0                                         ; sub_409A00+64C↑j
.text:0040A0C0                 lea     eax, [ebp+1]
.text:0040A0C3                 cmp     edx, eax
.text:0040A0C5                 jbe     loc_409DC0
.text:0040A0CB                 mov     ebp, [esp+4Ch+arg_4]
.text:0040A0CF                 cmp     [esp+4Ch+var_34], ebp
.text:0040A0D3                 jnb     short loc_40A0E0
.text:0040A0D5                 mov     ecx, [esp+4Ch+arg_0]
.text:0040A0D9                 mov     edi, [esp+4Ch+var_34]
.text:0040A0DD                 mov     [edi+ecx], bl
.text:0040A0E0
.text:0040A0E0 loc_40A0E0:                             ; CODE XREF: sub_409A00+6D3↑j
.text:0040A0E0                 inc     [esp+4Ch+var_34]
.text:0040A0E4                 mov     ebp, eax
.text:0040A0E6                 mov     eax, [esp+4Ch+Str]
.text:0040A0EA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040A0EF                 jmp     loc_40A040
.text:0040A0F4 ; ---------------------------------------------------------------------------
.text:0040A0F4
.text:0040A0F4 loc_40A0F4:                             ; CODE XREF: sub_409A00+5FF↑j
.text:0040A0F4                 mov     ecx, ds:_pctype
.text:0040A0FA                 mov     edi, [ecx]
.text:0040A0FC                 movzx   eax, word ptr [edi+edx*2]
.text:0040A100                 and     eax, 157h
.text:0040A105                 jmp     loc_40A015
.text:0040A105 ; ---------------------------------------------------------------------------
.text:0040A10A                 align 10h
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: sub_409A00+5E5↑j
.text:0040A110                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040A115                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040A11D                 mov     [esp+4Ch+var_28], 0
.text:0040A125                 mov     [esp+4Ch+var_29], 1
.text:0040A12A                 jz      loc_40A2BC
.text:0040A130
.text:0040A130 loc_40A130:                             ; CODE XREF: sub_409A00+8CC↓j
.text:0040A130                 mov     ecx, [esp+4Ch+arg_C]
.text:0040A134                 lea     edx, [esp+4Ch+var_18]
.text:0040A138                 mov     edi, [esp+4Ch+Str]
.text:0040A13C                 mov     [esp+4Ch+State], edx ; State
.text:0040A140                 lea     esi, [esp+4Ch+var_18._State]
.text:0040A144                 sub     ecx, ebp
.text:0040A146                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040A14A                 add     edi, ebp
.text:0040A14C                 mov     [esp+4Ch+var_30], edi
.text:0040A150                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:0040A154                 mov     [esp+4Ch+C], esi ; DstCh
.text:0040A157                 call    mbrtowc
.text:0040A15C                 test    eax, eax
.text:0040A15E                 mov     edi, eax
.text:0040A160                 jz      short loc_40A1A0
.text:0040A162                 cmp     eax, 0FFFFFFFFh
.text:0040A165                 jz      loc_40A2B2
.text:0040A16B                 cmp     eax, 0FFFFFFFEh
.text:0040A16E                 jz      loc_40A272
.text:0040A174                 cmp     [esp+4Ch+arg_10], 1
.text:0040A179                 jz      short loc_40A1B0
.text:0040A17B
.text:0040A17B loc_40A17B:                             ; CODE XREF: sub_409A00+7B9↓j
.text:0040A17B                                         ; sub_409A00+86D↓j
.text:0040A17B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:0040A180                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040A188                 mov     [esp+4Ch+C], ecx ; C
.text:0040A18B                 call    iswctype
.text:0040A190                 test    eax, eax
.text:0040A192                 jnz     short loc_40A199
.text:0040A194                 mov     [esp+4Ch+var_29], 0
.text:0040A199
.text:0040A199 loc_40A199:                             ; CODE XREF: sub_409A00+792↑j
.text:0040A199                 mov     [esp+4Ch+var_28], edi
.text:0040A19D                 lea     esi, [esi+0]
.text:0040A1A0
.text:0040A1A0 loc_40A1A0:                             ; CODE XREF: sub_409A00+760↑j
.text:0040A1A0                                         ; sub_409A00+87B↓j ...
.text:0040A1A0                 cmp     [esp+4Ch+var_28], 1
.text:0040A1A5                 jbe     loc_40A01C
.text:0040A1AB                 jmp     loc_40A035
.text:0040A1B0 ; ---------------------------------------------------------------------------
.text:0040A1B0
.text:0040A1B0 loc_40A1B0:                             ; CODE XREF: sub_409A00+779↑j
.text:0040A1B0                 cmp     [esp+4Ch+arg_10], eax
.text:0040A1B4                 mov     edx, 1
.text:0040A1B9                 jnb     short loc_40A17B
.text:0040A1BB
.text:0040A1BB loc_40A1BB:                             ; CODE XREF: sub_409A00+867↓j
.text:0040A1BB                 mov     ecx, [esp+4Ch+Str]
.text:0040A1BF                 lea     esi, [edx+ebp]
.text:0040A1C2                 movsx   eax, byte ptr [esi+ecx]
.text:0040A1C6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:0040A1C9                 cmp     eax, 21h
.text:0040A1CC                 ja      def_40A1D2      ; jumptable 0040A1D2 default case, cases 93,95,97-123
.text:0040A1D2                 jmp     ds:jpt_40A1D2[eax*4] ; switch jump
.text:0040A1D2 ; ---------------------------------------------------------------------------
.text:0040A1D9                 align 4
.text:0040A1DC jpt_40A1D2      dd offset loc_409E0B    ; DATA XREF: sub_409A00+7D2↑r
.text:0040A1DC                 dd offset loc_409E0B    ; jump table for switch statement
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset loc_409E0B
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset loc_409E0B
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset def_40A1D2
.text:0040A1DC                 dd offset loc_409E0B
.text:0040A264 ; ---------------------------------------------------------------------------
.text:0040A264
.text:0040A264 def_40A1D2:                             ; CODE XREF: sub_409A00+7CC↑j
.text:0040A264                                         ; sub_409A00+7D2↑j
.text:0040A264                                         ; DATA XREF: ...
.text:0040A264                 inc     edx             ; jumptable 0040A1D2 default case, cases 93,95,97-123
.text:0040A265                 cmp     edx, edi
.text:0040A267                 jb      loc_40A1BB
.text:0040A26D                 jmp     loc_40A17B
.text:0040A272 ; ---------------------------------------------------------------------------
.text:0040A272
.text:0040A272 loc_40A272:                             ; CODE XREF: sub_409A00+76E↑j
.text:0040A272                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040A276                 mov     [esp+4Ch+var_29], 0
.text:0040A27B                 jnb     loc_40A1A0
.text:0040A281                 mov     eax, [esp+4Ch+var_30]
.text:0040A285                 cmp     byte ptr [eax], 0
.text:0040A288                 jz      loc_40A1A0
.text:0040A28E
.text:0040A28E loc_40A28E:                             ; CODE XREF: sub_409A00+8AB↓j
.text:0040A28E                 inc     [esp+4Ch+var_28]
.text:0040A292                 mov     esi, [esp+4Ch+var_28]
.text:0040A296                 lea     eax, [esi+ebp]
.text:0040A299                 cmp     eax, [esp+4Ch+arg_C]
.text:0040A29D                 jnb     loc_40A1A0
.text:0040A2A3                 mov     edi, [esp+4Ch+Str]
.text:0040A2A7                 cmp     byte ptr [eax+edi], 0
.text:0040A2AB                 jnz     short loc_40A28E
.text:0040A2AD                 jmp     loc_40A1A0
.text:0040A2B2 ; ---------------------------------------------------------------------------
.text:0040A2B2
.text:0040A2B2 loc_40A2B2:                             ; CODE XREF: sub_409A00+765↑j
.text:0040A2B2                 mov     [esp+4Ch+var_29], 0
.text:0040A2B7                 jmp     loc_40A1A0
.text:0040A2BC ; ---------------------------------------------------------------------------
.text:0040A2BC
.text:0040A2BC loc_40A2BC:                             ; CODE XREF: sub_409A00+72A↑j
.text:0040A2BC                 mov     edx, [esp+4Ch+Str]
.text:0040A2C0                 mov     [esp+4Ch+C], edx ; Str
.text:0040A2C3                 call    strlen
.text:0040A2C8                 mov     [esp+4Ch+arg_C], eax
.text:0040A2CC                 jmp     loc_40A130
.text:0040A2D1 ; ---------------------------------------------------------------------------
.text:0040A2D1
.text:0040A2D1 loc_40A2D1:                             ; CODE XREF: sub_409A00+105↑j
.text:0040A2D1                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:0040A2D1                 mov     dl, bl          ; jumptable 00409B05 case 92
.text:0040A2D3                 jmp     loc_409E04
.text:0040A2D8 ; ---------------------------------------------------------------------------
.text:0040A2D8
.text:0040A2D8 loc_40A2D8:                             ; CODE XREF: sub_409A00+105↑j
.text:0040A2D8                                         ; sub_409A00+902↓j
.text:0040A2D8                                         ; DATA XREF: ...
.text:0040A2D8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409B05 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040A2DD                 jnz     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:0040A2DD                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:0040A2E3                 jmp     loc_409E0B      ; jumptable 0040A1D2 cases 91,92,94,96,124
.text:0040A2E8 ; ---------------------------------------------------------------------------
.text:0040A2E8
.text:0040A2E8 loc_40A2E8:                             ; CODE XREF: sub_409A00+105↑j
.text:0040A2E8                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:0040A2E8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00409B05 cases 123,125
.text:0040A2ED                 jz      short loc_40A304
.text:0040A2EF                 cmp     [esp+4Ch+arg_C], 1
.text:0040A2F4
.text:0040A2F4 loc_40A2F4:                             ; CODE XREF: sub_409A00+90C↓j
.text:0040A2F4                 jnz     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:0040A2F4                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:0040A2FA
.text:0040A2FA loc_40A2FA:                             ; CODE XREF: sub_409A00+105↑j
.text:0040A2FA                                         ; DATA XREF: sub_409A00:jpt_409B05↑o
.text:0040A2FA                 test    ebp, ebp        ; jumptable 00409B05 cases 35,126
.text:0040A2FC                 jnz     def_409F02      ; jumptable 00409B05 cases 37,43-58,65-90,93,95,97-122
.text:0040A2FC                                         ; jumptable 00409F02 default case, cases 34-38,42-44,46,48-59
.text:0040A302                 jmp     short loc_40A2D8 ; jumptable 00409B05 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040A304 ; ---------------------------------------------------------------------------
.text:0040A304
.text:0040A304 loc_40A304:                             ; CODE XREF: sub_409A00+8ED↑j
.text:0040A304                 mov     esi, [esp+4Ch+Str]
.text:0040A308                 cmp     byte ptr [esi+1], 0
.text:0040A30C                 jmp     short loc_40A2F4
.text:0040A30E ; ---------------------------------------------------------------------------
.text:0040A30E
.text:0040A30E loc_40A30E:                             ; CODE XREF: sub_409A00:loc_409A9F↑j
.text:0040A30E                 test    ebp, ebp
.text:0040A310                 jnz     short loc_40A31D
.text:0040A312                 cmp     [esp+4Ch+arg_10], 1
.text:0040A317                 jz      loc_409E0B      ; jumptable 0040A1D2 cases 91,92,94,96,124
.text:0040A31D
.text:0040A31D loc_40A31D:                             ; CODE XREF: sub_409A00+910↑j
.text:0040A31D                 mov     esi, [esp+4Ch+var_1C]
.text:0040A321                 test    esi, esi
.text:0040A323                 jz      short loc_40A358
.text:0040A325                 mov     edi, [esp+4Ch+var_1C]
.text:0040A329                 movzx   eax, byte ptr [edi]
.text:0040A32C                 test    al, al
.text:0040A32E                 jz      short loc_40A358
.text:0040A330
.text:0040A330 loc_40A330:                             ; CODE XREF: sub_409A00+956↓j
.text:0040A330                 mov     ebp, [esp+4Ch+arg_4]
.text:0040A334                 cmp     [esp+4Ch+var_34], ebp
.text:0040A338                 jnb     short loc_40A345
.text:0040A33A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040A33E                 mov     ebx, [esp+4Ch+var_34]
.text:0040A342                 mov     [ebx+ecx], al
.text:0040A345
.text:0040A345 loc_40A345:                             ; CODE XREF: sub_409A00+938↑j
.text:0040A345                 inc     [esp+4Ch+var_1C]
.text:0040A349                 inc     [esp+4Ch+var_34]
.text:0040A34D                 mov     edx, [esp+4Ch+var_1C]
.text:0040A351                 movzx   eax, byte ptr [edx]
.text:0040A354                 test    al, al
.text:0040A356                 jnz     short loc_40A330
.text:0040A358
.text:0040A358 loc_40A358:                             ; CODE XREF: sub_409A00+923↑j
.text:0040A358                                         ; sub_409A00+92E↑j
.text:0040A358                 mov     eax, [esp+4Ch+arg_4]
.text:0040A35C                 cmp     [esp+4Ch+var_34], eax
.text:0040A360                 jnb     short loc_40A36E
.text:0040A362                 mov     edi, [esp+4Ch+arg_0]
.text:0040A366                 mov     esi, [esp+4Ch+var_34]
.text:0040A36A                 mov     byte ptr [esi+edi], 0
.text:0040A36E
.text:0040A36E loc_40A36E:                             ; CODE XREF: sub_409A00+960↑j
.text:0040A36E                 mov     eax, [esp+4Ch+var_34]
.text:0040A372                 jmp     loc_409E3F
.text:0040A377 ; ---------------------------------------------------------------------------
.text:0040A377
.text:0040A377 loc_40A377:                             ; CODE XREF: sub_409A00+95↑j
.text:0040A377                 mov     ebx, [esp+4Ch+Str]
.text:0040A37B                 cmp     byte ptr [ebp+ebx+0], 0
.text:0040A380                 jmp     loc_409A9F
.text:0040A385 ; ---------------------------------------------------------------------------
.text:0040A385
.text:0040A385 loc_40A385:                             ; CODE XREF: sub_409A00+3D↑j
.text:0040A385                                         ; DATA XREF: sub_409A00:jpt_409A3D↑o
.text:0040A385                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00409A3D case 2
.text:0040A389                 cmp     [esp+4Ch+var_34], edx
.text:0040A38D                 jnb     short loc_40A396
.text:0040A38F                 mov     ecx, [esp+4Ch+arg_0]
.text:0040A393                 mov     byte ptr [ecx], 27h ; '''
.text:0040A396
.text:0040A396 loc_40A396:                             ; CODE XREF: sub_409A00+98D↑j
.text:0040A396                 mov     [esp+4Ch+var_34], 1
.text:0040A39E                 mov     [esp+4Ch+var_1C], 4099EEh
.text:0040A3A6                 jmp     loc_409A86
.text:0040A3AB ; ---------------------------------------------------------------------------
.text:0040A3AB
.text:0040A3AB loc_40A3AB:                             ; CODE XREF: sub_409A00+3D↑j
.text:0040A3AB                                         ; DATA XREF: sub_409A00:jpt_409A3D↑o
.text:0040A3AB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00409A3D case 4
.text:0040A3B0                 jmp     def_409A3D      ; jumptable 00409A3D default case, cases 0,1
.text:0040A3B5 ; ---------------------------------------------------------------------------
.text:0040A3B5
.text:0040A3B5 loc_40A3B5:                             ; CODE XREF: sub_409A00+3D↑j
.text:0040A3B5                                         ; DATA XREF: sub_409A00:jpt_409A3D↑o
.text:0040A3B5                 mov     [esp+4Ch+C], 4099F0h ; jumptable 00409A3D cases 5,6
.text:0040A3BC                 call    ds:libintl_gettext
.text:0040A3C2                 cmp     eax, 4099F0h
.text:0040A3C7                 mov     edi, eax
.text:0040A3C9                 jz      short loc_40A440
.text:0040A3CB
.text:0040A3CB loc_40A3CB:                             ; CODE XREF: sub_409A00+A45↓j
.text:0040A3CB                                         ; sub_409A00+A4C↓j
.text:0040A3CB                 mov     [esp+4Ch+C], 4099EEh
.text:0040A3D2                 call    ds:libintl_gettext
.text:0040A3D8                 cmp     eax, 4099EEh
.text:0040A3DD                 mov     edx, eax
.text:0040A3DF                 jz      short loc_40A432
.text:0040A3E1
.text:0040A3E1 loc_40A3E1:                             ; CODE XREF: sub_409A00+A37↓j
.text:0040A3E1                                         ; sub_409A00+A3E↓j
.text:0040A3E1                 mov     [esp+4Ch+var_1C], edi
.text:0040A3E5                 cmp     byte ptr [edi], 0
.text:0040A3E8                 jz      short loc_40A418
.text:0040A3EA
.text:0040A3EA loc_40A3EA:                             ; CODE XREF: sub_409A00+A16↓j
.text:0040A3EA                 mov     ecx, [esp+4Ch+arg_4]
.text:0040A3EE                 cmp     [esp+4Ch+var_34], ecx
.text:0040A3F2                 jnb     short loc_40A407
.text:0040A3F4                 mov     ebp, [esp+4Ch+var_1C]
.text:0040A3F8                 mov     edi, [esp+4Ch+arg_0]
.text:0040A3FC                 mov     esi, [esp+4Ch+var_34]
.text:0040A400                 movzx   ebx, byte ptr [ebp+0]
.text:0040A404                 mov     [esi+edi], bl
.text:0040A407
.text:0040A407 loc_40A407:                             ; CODE XREF: sub_409A00+9F2↑j
.text:0040A407                 inc     [esp+4Ch+var_1C]
.text:0040A40B                 inc     [esp+4Ch+var_34]
.text:0040A40F                 mov     eax, [esp+4Ch+var_1C]
.text:0040A413                 cmp     byte ptr [eax], 0
.text:0040A416                 jnz     short loc_40A3EA
.text:0040A418
.text:0040A418 loc_40A418:                             ; CODE XREF: sub_409A00+9E8↑j
.text:0040A418                 mov     [esp+4Ch+var_21], 1
.text:0040A41D                 mov     [esp+4Ch+var_1C], edx
.text:0040A421                 mov     [esp+4Ch+C], edx ; Str
.text:0040A424                 call    strlen
.text:0040A429                 mov     [esp+4Ch+var_20], eax
.text:0040A42D                 jmp     def_409A3D      ; jumptable 00409A3D default case, cases 0,1
.text:0040A432 ; ---------------------------------------------------------------------------
.text:0040A432
.text:0040A432 loc_40A432:                             ; CODE XREF: sub_409A00+9DF↑j
.text:0040A432                 cmp     [esp+4Ch+arg_10], 6
.text:0040A437                 jnz     short loc_40A3E1
.text:0040A439                 mov     edx, offset asc_4099EC ; "\"'`"
.text:0040A43E                 jmp     short loc_40A3E1
.text:0040A440 ; ---------------------------------------------------------------------------
.text:0040A440
.text:0040A440 loc_40A440:                             ; CODE XREF: sub_409A00+9C9↑j
.text:0040A440                 cmp     [esp+4Ch+arg_10], 6
.text:0040A445                 jnz     short loc_40A3CB
.text:0040A447                 mov     edi, offset asc_4099EC ; "\"'`"
.text:0040A44C                 jmp     loc_40A3CB
.text:0040A44C sub_409A00      endp
.text:0040A44C
.text:0040A451 ; ---------------------------------------------------------------------------
.text:0040A451                 jmp     short loc_40A460
.text:0040A451 ; ---------------------------------------------------------------------------
.text:0040A453                 align 10h
.text:0040A460
.text:0040A460 loc_40A460:                             ; CODE XREF: .text:0040A451↑j
.text:0040A460                 sub     esp, 0Ch
.text:0040A463                 mov     [esp+4], ebx
.text:0040A467                 mov     [esp+8], esi
.text:0040A46B                 call    _errno
.text:0040A470                 mov     esi, [eax]
.text:0040A472                 mov     dword ptr [esp], 24h ; '$'
.text:0040A479                 call    sub_4089E0
.text:0040A47E                 mov     edx, [esp+10h]
.text:0040A482                 mov     ebx, eax
.text:0040A484                 test    edx, edx
.text:0040A486                 jz      short loc_40A4D1
.text:0040A488
.text:0040A488 loc_40A488:                             ; CODE XREF: .text:0040A4D6↓j
.text:0040A488                 mov     ecx, [edx]
.text:0040A48A                 mov     [ebx], ecx
.text:0040A48C                 mov     ecx, [edx+4]
.text:0040A48F                 mov     [ebx+4], ecx
.text:0040A492                 mov     ecx, [edx+8]
.text:0040A495                 mov     [ebx+8], ecx
.text:0040A498                 mov     ecx, [edx+0Ch]
.text:0040A49B                 mov     [ebx+0Ch], ecx
.text:0040A49E                 mov     ecx, [edx+10h]
.text:0040A4A1                 mov     [ebx+10h], ecx
.text:0040A4A4                 mov     ecx, [edx+14h]
.text:0040A4A7                 mov     [ebx+14h], ecx
.text:0040A4AA                 mov     ecx, [edx+18h]
.text:0040A4AD                 mov     [ebx+18h], ecx
.text:0040A4B0                 mov     ecx, [edx+1Ch]
.text:0040A4B3                 mov     [ebx+1Ch], ecx
.text:0040A4B6                 mov     ecx, [edx+20h]
.text:0040A4B9                 mov     [ebx+20h], ecx
.text:0040A4BC                 call    _errno
.text:0040A4C1                 mov     [eax], esi
.text:0040A4C3                 mov     esi, [esp+8]
.text:0040A4C7                 mov     eax, ebx
.text:0040A4C9                 mov     ebx, [esp+4]
.text:0040A4CD                 add     esp, 0Ch
.text:0040A4D0                 retn
.text:0040A4D1 ; ---------------------------------------------------------------------------
.text:0040A4D1
.text:0040A4D1 loc_40A4D1:                             ; CODE XREF: .text:0040A486↑j
.text:0040A4D1                 mov     edx, offset dword_415300
.text:0040A4D6                 jmp     short loc_40A488
.text:0040A4D6 ; ---------------------------------------------------------------------------
.text:0040A4D8                 align 10h
.text:0040A4E0                 mov     eax, [esp+4]
.text:0040A4E4                 test    eax, eax
.text:0040A4E6                 jz      short loc_40A4F0
.text:0040A4E8
.text:0040A4E8 loc_40A4E8:                             ; CODE XREF: .text:0040A4F5↓j
.text:0040A4E8                 mov     eax, [eax]
.text:0040A4EA                 retn
.text:0040A4EA ; ---------------------------------------------------------------------------
.text:0040A4EB                 align 10h
.text:0040A4F0
.text:0040A4F0 loc_40A4F0:                             ; CODE XREF: .text:0040A4E6↑j
.text:0040A4F0                 mov     eax, offset dword_415300
.text:0040A4F5                 jmp     short loc_40A4E8
.text:0040A4F5 ; ---------------------------------------------------------------------------
.text:0040A4F7                 align 10h
.text:0040A500                 mov     edx, [esp+4]
.text:0040A504                 test    edx, edx
.text:0040A506                 jz      short loc_40A510
.text:0040A508
.text:0040A508 loc_40A508:                             ; CODE XREF: .text:0040A515↓j
.text:0040A508                 mov     ecx, [esp+8]
.text:0040A50C                 mov     [edx], ecx
.text:0040A50E                 retn
.text:0040A50E ; ---------------------------------------------------------------------------
.text:0040A50F                 align 10h
.text:0040A510
.text:0040A510 loc_40A510:                             ; CODE XREF: .text:0040A506↑j
.text:0040A510                 mov     edx, offset dword_415300
.text:0040A515                 jmp     short loc_40A508
.text:0040A515 ; ---------------------------------------------------------------------------
.text:0040A517                 align 10h
.text:0040A520                 sub     esp, 8
.text:0040A523                 mov     eax, [esp+0Ch]
.text:0040A527                 movzx   ecx, byte ptr [esp+10h]
.text:0040A52C                 mov     [esp], ebx
.text:0040A52F                 mov     ebx, [esp+14h]
.text:0040A533                 mov     [esp+4], esi
.text:0040A537                 mov     dl, cl
.text:0040A539                 shr     dl, 5
.text:0040A53C                 movzx   edx, dl
.text:0040A53F                 shl     edx, 2
.text:0040A542                 test    eax, eax
.text:0040A544                 lea     esi, [edx+eax+4]
.text:0040A548                 jz      short loc_40A570
.text:0040A54A
.text:0040A54A loc_40A54A:                             ; CODE XREF: .text:0040A576↓j
.text:0040A54A                 mov     edx, [esi]
.text:0040A54C                 and     ecx, 1Fh
.text:0040A54F                 and     ebx, 1
.text:0040A552                 mov     eax, edx
.text:0040A554                 shr     eax, cl
.text:0040A556                 and     eax, 1
.text:0040A559                 xor     ebx, eax
.text:0040A55B                 shl     ebx, cl
.text:0040A55D                 xor     edx, ebx
.text:0040A55F                 mov     [esi], edx
.text:0040A561                 mov     ebx, [esp]
.text:0040A564                 mov     esi, [esp+4]
.text:0040A568                 add     esp, 8
.text:0040A56B                 retn
.text:0040A56B ; ---------------------------------------------------------------------------
.text:0040A56C                 align 10h
.text:0040A570
.text:0040A570 loc_40A570:                             ; CODE XREF: .text:0040A548↑j
.text:0040A570                 lea     esi, dword_415304[edx]
.text:0040A576                 jmp     short loc_40A54A
.text:0040A576 ; ---------------------------------------------------------------------------
.text:0040A578                 align 10h
.text:0040A580                 sub     esp, 2Ch
.text:0040A583                 mov     [esp+24h], ebx
.text:0040A587                 mov     ebx, [esp+40h]
.text:0040A58B                 mov     [esp+28h], esi
.text:0040A58F                 test    ebx, ebx
.text:0040A591                 jz      short loc_40A5E0
.text:0040A593
.text:0040A593 loc_40A593:                             ; CODE XREF: .text:0040A5E5↓j
.text:0040A593                 call    _errno
.text:0040A598                 mov     esi, [eax]
.text:0040A59A                 mov     [esp+14h], ebx
.text:0040A59E                 mov     edx, [ebx]
.text:0040A5A0                 mov     ecx, [esp+38h]
.text:0040A5A4                 mov     ebx, [esp+3Ch]
.text:0040A5A8                 mov     [esp+10h], edx
.text:0040A5AC                 mov     edx, [esp+34h]
.text:0040A5B0                 mov     [esp+0Ch], ebx
.text:0040A5B4                 mov     [esp+8], ecx
.text:0040A5B8                 mov     [esp+4], edx
.text:0040A5BC                 mov     edx, [esp+30h]
.text:0040A5C0                 mov     [esp], edx
.text:0040A5C3                 call    sub_409A00
.text:0040A5C8                 mov     ebx, eax
.text:0040A5CA                 call    _errno
.text:0040A5CF                 mov     [eax], esi
.text:0040A5D1                 mov     esi, [esp+28h]
.text:0040A5D5                 mov     eax, ebx
.text:0040A5D7                 mov     ebx, [esp+24h]
.text:0040A5DB                 add     esp, 2Ch
.text:0040A5DE                 retn
.text:0040A5DE ; ---------------------------------------------------------------------------
.text:0040A5DF                 align 10h
.text:0040A5E0
.text:0040A5E0 loc_40A5E0:                             ; CODE XREF: .text:0040A591↑j
.text:0040A5E0                 mov     ebx, offset dword_415300
.text:0040A5E5                 jmp     short loc_40A593
.text:0040A5E5 ; ---------------------------------------------------------------------------
.text:0040A5E7                 align 10h
.text:0040A5F0                 push    ebp
.text:0040A5F1                 push    edi
.text:0040A5F2                 push    esi
.text:0040A5F3                 push    ebx
.text:0040A5F4                 sub     esp, 2Ch
.text:0040A5F7                 mov     ebp, [esp+48h]
.text:0040A5FB                 call    _errno
.text:0040A600                 mov     edx, [eax]
.text:0040A602                 test    ebp, ebp
.text:0040A604                 mov     ebx, ebp
.text:0040A606                 mov     [esp+28h], edx
.text:0040A60A                 jz      loc_40A6C0
.text:0040A610
.text:0040A610 loc_40A610:                             ; CODE XREF: .text:0040A6C5↓j
.text:0040A610                 call    _errno
.text:0040A615                 mov     edi, [eax]
.text:0040A617                 mov     esi, ebp
.text:0040A619                 mov     [esp+14h], ebx
.text:0040A61D                 mov     ecx, [ebx]
.text:0040A61F                 mov     dword ptr [esp], 0
.text:0040A626                 mov     edx, [esp+44h]
.text:0040A62A                 mov     dword ptr [esp+4], 0
.text:0040A632                 mov     eax, [esp+40h]
.text:0040A636                 mov     [esp+10h], ecx
.text:0040A63A                 mov     [esp+0Ch], edx
.text:0040A63E                 mov     [esp+8], eax
.text:0040A642                 call    sub_409A00
.text:0040A647                 mov     ebx, eax
.text:0040A649                 call    _errno
.text:0040A64E                 mov     [eax], edi
.text:0040A650                 lea     edi, [ebx+1]
.text:0040A653                 mov     [esp], edi
.text:0040A656                 call    sub_4089E0
.text:0040A65B                 mov     [esp+24h], eax
.text:0040A65F                 test    ebp, ebp
.text:0040A661                 jz      short loc_40A6B2
.text:0040A663
.text:0040A663 loc_40A663:                             ; CODE XREF: .text:0040A6B7↓j
.text:0040A663                 call    _errno
.text:0040A668                 mov     ebp, [eax]
.text:0040A66A                 mov     [esp+14h], esi
.text:0040A66E                 mov     ecx, [esi]
.text:0040A670                 mov     [esp+4], edi
.text:0040A674                 mov     edx, [esp+44h]
.text:0040A678                 mov     esi, [esp+24h]
.text:0040A67C                 mov     [esp+10h], ecx
.text:0040A680                 mov     eax, [esp+40h]
.text:0040A684                 mov     [esp+0Ch], edx
.text:0040A688                 mov     [esp], esi
.text:0040A68B                 mov     [esp+8], eax
.text:0040A68F                 call    sub_409A00
.text:0040A694                 call    _errno
.text:0040A699                 mov     [eax], ebp
.text:0040A69B                 call    _errno
.text:0040A6A0                 mov     ebx, [esp+28h]
.text:0040A6A4                 mov     [eax], ebx
.text:0040A6A6                 mov     eax, [esp+24h]
.text:0040A6AA                 add     esp, 2Ch
.text:0040A6AD                 pop     ebx
.text:0040A6AE                 pop     esi
.text:0040A6AF                 pop     edi
.text:0040A6B0                 pop     ebp
.text:0040A6B1                 retn
.text:0040A6B2 ; ---------------------------------------------------------------------------
.text:0040A6B2
.text:0040A6B2 loc_40A6B2:                             ; CODE XREF: .text:0040A661↑j
.text:0040A6B2                 mov     esi, offset dword_415300
.text:0040A6B7                 jmp     short loc_40A663
.text:0040A6B7 ; ---------------------------------------------------------------------------
.text:0040A6B9                 align 10h
.text:0040A6C0
.text:0040A6C0 loc_40A6C0:                             ; CODE XREF: .text:0040A60A↑j
.text:0040A6C0                 mov     ebx, offset dword_415300
.text:0040A6C5                 jmp     loc_40A610
.text:0040A6C5 ; ---------------------------------------------------------------------------
.text:0040A6CA                 align 10h
.text:0040A6D0                 sub     esp, 1Ch
.text:0040A6D3                 mov     edx, [esp+24h]
.text:0040A6D7                 mov     dword ptr [esp+0Ch], offset dword_415300
.text:0040A6DF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A6E7                 mov     [esp+4], edx
.text:0040A6EB                 mov     edx, [esp+20h]
.text:0040A6EF                 mov     [esp], edx
.text:0040A6F2                 call    sub_40AB40
.text:0040A6F7                 add     esp, 1Ch
.text:0040A6FA                 retn
.text:0040A6FA ; ---------------------------------------------------------------------------
.text:0040A6FB                 align 10h
.text:0040A700                 sub     esp, 1Ch
.text:0040A703                 mov     edx, [esp+20h]
.text:0040A707                 mov     dword ptr [esp+0Ch], offset dword_415300
.text:0040A70F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A717                 mov     [esp+4], edx
.text:0040A71B                 mov     dword ptr [esp], 0
.text:0040A722                 call    sub_40AB40
.text:0040A727                 add     esp, 1Ch
.text:0040A72A                 retn
.text:0040A72A ; ---------------------------------------------------------------------------
.text:0040A72B                 align 10h
.text:0040A730
.text:0040A730 ; =============== S U B R O U T I N E =======================================
.text:0040A730
.text:0040A730
.text:0040A730 ; int __cdecl sub_40A730(int, int, char *)
.text:0040A730 sub_40A730      proc near               ; CODE XREF: .text:0040819A↑p
.text:0040A730                                         ; sub_4081B0+1A↑p
.text:0040A730
.text:0040A730 var_BC          = dword ptr -0BCh
.text:0040A730 var_B8          = dword ptr -0B8h
.text:0040A730 var_B4          = dword ptr -0B4h
.text:0040A730 var_B0          = dword ptr -0B0h
.text:0040A730 var_AC          = dword ptr -0ACh
.text:0040A730 var_A8          = dword ptr -0A8h
.text:0040A730 var_A4          = dword ptr -0A4h
.text:0040A730 var_A0          = dword ptr -0A0h
.text:0040A730 var_9C          = dword ptr -9Ch
.text:0040A730 var_98          = dword ptr -98h
.text:0040A730 var_94          = dword ptr -94h
.text:0040A730 var_90          = dword ptr -90h
.text:0040A730 var_8C          = dword ptr -8Ch
.text:0040A730 var_7C          = dword ptr -7Ch
.text:0040A730 var_78          = dword ptr -78h
.text:0040A730 var_74          = dword ptr -74h
.text:0040A730 var_70          = dword ptr -70h
.text:0040A730 var_6C          = dword ptr -6Ch
.text:0040A730 var_68          = dword ptr -68h
.text:0040A730 var_64          = dword ptr -64h
.text:0040A730 var_60          = dword ptr -60h
.text:0040A730 var_5C          = dword ptr -5Ch
.text:0040A730 var_4C          = dword ptr -4Ch
.text:0040A730 var_48          = dword ptr -48h
.text:0040A730 var_44          = dword ptr -44h
.text:0040A730 var_40          = dword ptr -40h
.text:0040A730 var_3C          = dword ptr -3Ch
.text:0040A730 var_38          = dword ptr -38h
.text:0040A730 var_34          = dword ptr -34h
.text:0040A730 var_30          = dword ptr -30h
.text:0040A730 var_2C          = dword ptr -2Ch
.text:0040A730 arg_0           = dword ptr  4
.text:0040A730 arg_4           = dword ptr  8
.text:0040A730 arg_8           = dword ptr  0Ch
.text:0040A730
.text:0040A730                 push    ebp
.text:0040A731                 xor     eax, eax
.text:0040A733                 mov     ecx, 8
.text:0040A738                 push    edi
.text:0040A739                 push    esi
.text:0040A73A                 push    ebx
.text:0040A73B                 sub     esp, 0ACh
.text:0040A741                 mov     ebp, [esp+0BCh+arg_4]
.text:0040A748                 cld
.text:0040A749                 lea     edi, [esp+0BCh+var_A8]
.text:0040A74D                 mov     [esp+0BCh+var_AC], ebp
.text:0040A751                 rep stosd
.text:0040A753                 mov     eax, [esp+0BCh+var_8C]
.text:0040A757                 mov     edi, [esp+0BCh+var_AC]
.text:0040A75B                 mov     esi, [esp+0BCh+var_A8]
.text:0040A75F                 mov     [esp+0BCh+var_5C], eax
.text:0040A763                 mov     ebp, [esp+0BCh+var_A4]
.text:0040A767                 mov     eax, [esp+0BCh+var_AC]
.text:0040A76B                 mov     [esp+0BCh+var_7C], edi
.text:0040A76F                 mov     ecx, [esp+0BCh+var_94]
.text:0040A773                 mov     edi, [esp+0BCh+var_A0]
.text:0040A777                 mov     [esp+0BCh+var_78], esi
.text:0040A77B                 mov     edx, [esp+0BCh+var_90]
.text:0040A77F                 mov     esi, [esp+0BCh+var_9C]
.text:0040A783                 mov     [esp+0BCh+var_4C], eax
.text:0040A787                 mov     ebx, [esp+0BCh+var_98]
.text:0040A78B                 mov     eax, [esp+0BCh+var_A8]
.text:0040A78F                 mov     [esp+0BCh+var_74], ebp
.text:0040A793                 mov     [esp+0BCh+var_70], edi
.text:0040A797                 mov     [esp+0BCh+var_6C], esi
.text:0040A79B                 mov     [esp+0BCh+var_68], ebx
.text:0040A79F                 mov     [esp+0BCh+var_64], ecx
.text:0040A7A3                 mov     [esp+0BCh+var_60], edx
.text:0040A7A7                 mov     [esp+0BCh+var_48], eax
.text:0040A7AB                 mov     [esp+0BCh+var_44], ebp
.text:0040A7AF                 mov     [esp+0BCh+var_40], edi
.text:0040A7B3                 mov     [esp+0BCh+var_3C], esi
.text:0040A7BA                 mov     [esp+0BCh+var_38], ebx
.text:0040A7C1                 mov     ebx, [esp+0BCh+var_8C]
.text:0040A7C5                 mov     [esp+0BCh+var_30], edx
.text:0040A7CC                 mov     edx, [esp+0BCh+arg_8]
.text:0040A7D3                 mov     [esp+0BCh+var_34], ecx
.text:0040A7DA                 lea     ecx, [esp+0BCh+var_4C]
.text:0040A7DE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040A7E2                 mov     edx, [esp+0BCh+arg_0]
.text:0040A7E9                 mov     [esp+0BCh+var_2C], ebx
.text:0040A7F0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:0040A7F4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040A7FC                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040A7FF                 call    sub_40AB40
.text:0040A804                 add     esp, 0ACh
.text:0040A80A                 pop     ebx
.text:0040A80B                 pop     esi
.text:0040A80C                 pop     edi
.text:0040A80D                 pop     ebp
.text:0040A80E                 retn
.text:0040A80E sub_40A730      endp
.text:0040A80E
.text:0040A80E ; ---------------------------------------------------------------------------
.text:0040A80F                 align 10h
.text:0040A810                 push    ebp
.text:0040A811                 xor     eax, eax
.text:0040A813                 mov     ecx, 8
.text:0040A818                 push    edi
.text:0040A819                 push    esi
.text:0040A81A                 push    ebx
.text:0040A81B                 sub     esp, 0ACh
.text:0040A821                 mov     edx, [esp+0C4h]
.text:0040A828                 cld
.text:0040A829                 lea     edi, [esp+14h]
.text:0040A82D                 mov     [esp+10h], edx
.text:0040A831                 rep stosd
.text:0040A833                 mov     eax, [esp+30h]
.text:0040A837                 mov     ebp, [esp+10h]
.text:0040A83B                 mov     edi, [esp+14h]
.text:0040A83F                 mov     [esp+60h], eax
.text:0040A843                 mov     esi, [esp+20h]
.text:0040A847                 mov     eax, [esp+10h]
.text:0040A84B                 mov     [esp+40h], ebp
.text:0040A84F                 mov     ecx, [esp+28h]
.text:0040A853                 mov     ebp, [esp+18h]
.text:0040A857                 mov     [esp+44h], edi
.text:0040A85B                 mov     edx, [esp+2Ch]
.text:0040A85F                 mov     edi, [esp+1Ch]
.text:0040A863                 mov     [esp+70h], eax
.text:0040A867                 mov     ebx, [esp+24h]
.text:0040A86B                 mov     eax, [esp+14h]
.text:0040A86F                 mov     [esp+48h], ebp
.text:0040A873                 mov     [esp+4Ch], edi
.text:0040A877                 mov     [esp+50h], esi
.text:0040A87B                 mov     [esp+54h], ebx
.text:0040A87F                 mov     [esp+58h], ecx
.text:0040A883                 mov     [esp+5Ch], edx
.text:0040A887                 mov     [esp+74h], eax
.text:0040A88B                 mov     [esp+78h], ebp
.text:0040A88F                 mov     [esp+7Ch], edi
.text:0040A893                 mov     [esp+80h], esi
.text:0040A89A                 mov     [esp+84h], ebx
.text:0040A8A1                 mov     esi, [esp+30h]
.text:0040A8A5                 lea     ebx, [esp+70h]
.text:0040A8A9                 mov     [esp+8Ch], edx
.text:0040A8B0                 mov     edx, [esp+0C8h]
.text:0040A8B7                 mov     [esp+88h], ecx
.text:0040A8BE                 mov     ecx, [esp+0CCh]
.text:0040A8C5                 mov     [esp+4], edx
.text:0040A8C9                 mov     edx, [esp+0C0h]
.text:0040A8D0                 mov     [esp+90h], esi
.text:0040A8D7                 mov     [esp+0Ch], ebx
.text:0040A8DB                 mov     [esp+8], ecx
.text:0040A8DF                 mov     [esp], edx
.text:0040A8E2                 call    sub_40AB40
.text:0040A8E7                 add     esp, 0ACh
.text:0040A8ED                 pop     ebx
.text:0040A8EE                 pop     esi
.text:0040A8EF                 pop     edi
.text:0040A8F0                 pop     ebp
.text:0040A8F1                 retn
.text:0040A8F1 ; ---------------------------------------------------------------------------
.text:0040A8F2                 align 10h
.text:0040A900                 push    ebp
.text:0040A901                 xor     eax, eax
.text:0040A903                 mov     ecx, 8
.text:0040A908                 push    edi
.text:0040A909                 push    esi
.text:0040A90A                 push    ebx
.text:0040A90B                 sub     esp, 0ACh
.text:0040A911                 mov     edi, [esp+0C0h]
.text:0040A918                 cld
.text:0040A919                 mov     [esp+10h], edi
.text:0040A91D                 lea     edi, [esp+14h]
.text:0040A921                 rep stosd
.text:0040A923                 mov     eax, [esp+30h]
.text:0040A927                 mov     esi, [esp+10h]
.text:0040A92B                 mov     ebx, [esp+14h]
.text:0040A92F                 mov     [esp+60h], eax
.text:0040A933                 mov     ebp, [esp+18h]
.text:0040A937                 mov     eax, [esp+10h]
.text:0040A93B                 mov     [esp+40h], esi
.text:0040A93F                 mov     edi, [esp+1Ch]
.text:0040A943                 mov     esi, [esp+20h]
.text:0040A947                 mov     [esp+44h], ebx
.text:0040A94B                 mov     ecx, [esp+28h]
.text:0040A94F                 mov     edx, [esp+2Ch]
.text:0040A953                 mov     [esp+70h], eax
.text:0040A957                 mov     ebx, [esp+24h]
.text:0040A95B                 mov     eax, [esp+14h]
.text:0040A95F                 mov     [esp+48h], ebp
.text:0040A963                 mov     [esp+4Ch], edi
.text:0040A967                 mov     [esp+50h], esi
.text:0040A96B                 mov     [esp+54h], ebx
.text:0040A96F                 mov     [esp+58h], ecx
.text:0040A973                 mov     [esp+5Ch], edx
.text:0040A977                 mov     [esp+74h], eax
.text:0040A97B                 mov     [esp+78h], ebp
.text:0040A97F                 mov     [esp+7Ch], edi
.text:0040A983                 mov     [esp+80h], esi
.text:0040A98A                 mov     [esp+84h], ebx
.text:0040A991                 mov     [esp+8Ch], edx
.text:0040A998                 lea     edx, [esp+70h]
.text:0040A99C                 mov     [esp+88h], ecx
.text:0040A9A3                 mov     ecx, [esp+30h]
.text:0040A9A7                 mov     [esp+0Ch], edx
.text:0040A9AB                 mov     edx, [esp+0C4h]
.text:0040A9B2                 mov     [esp+90h], ecx
.text:0040A9B9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A9C1                 mov     [esp+4], edx
.text:0040A9C5                 mov     dword ptr [esp], 0
.text:0040A9CC                 call    sub_40AB40
.text:0040A9D1                 add     esp, 0ACh
.text:0040A9D7                 pop     ebx
.text:0040A9D8                 pop     esi
.text:0040A9D9                 pop     edi
.text:0040A9DA                 pop     ebp
.text:0040A9DB                 retn
.text:0040A9DB ; ---------------------------------------------------------------------------
.text:0040A9DC                 align 10h
.text:0040A9E0                 push    edi
.text:0040A9E1                 push    esi
.text:0040A9E2                 push    ebx
.text:0040A9E3                 sub     esp, 40h
.text:0040A9E6                 mov     edx, ds:dword_41530C
.text:0040A9EC                 mov     ebx, ds:dword_415300
.text:0040A9F2                 mov     esi, ds:dword_415308
.text:0040A9F8                 mov     edi, ds:dword_415304
.text:0040A9FE                 mov     [esp+1Ch], edx
.text:0040AA02                 mov     ecx, ds:dword_415310
.text:0040AA08                 mov     edx, ds:dword_415320
.text:0040AA0E                 mov     [esp+10h], ebx
.text:0040AA12                 mov     ebx, ds:dword_415314
.text:0040AA18                 mov     [esp+30h], edx
.text:0040AA1C                 movzx   edx, byte ptr [esp+54h]
.text:0040AA21                 mov     [esp+18h], esi
.text:0040AA25                 mov     esi, ds:dword_41531C
.text:0040AA2B                 mov     [esp+14h], edi
.text:0040AA2F                 mov     edi, ds:dword_415318
.text:0040AA35                 mov     [esp+20h], ecx
.text:0040AA39                 mov     cl, dl
.text:0040AA3B                 shr     cl, 5
.text:0040AA3E                 mov     [esp+24h], ebx
.text:0040AA42                 movzx   ebx, cl
.text:0040AA45                 mov     [esp+2Ch], esi
.text:0040AA49                 lea     esi, [esp+10h]
.text:0040AA4D                 mov     [esp+28h], edi
.text:0040AA51                 lea     edi, [esi+ebx*4]
.text:0040AA54                 mov     ebx, edx
.text:0040AA56                 mov     edx, [edi+4]
.text:0040AA59                 and     ebx, 1Fh
.text:0040AA5C                 mov     cl, bl
.text:0040AA5E                 mov     eax, edx
.text:0040AA60                 shr     eax, cl
.text:0040AA62                 and     eax, 1
.text:0040AA65                 xor     eax, 1
.text:0040AA68                 shl     eax, cl
.text:0040AA6A                 xor     edx, eax
.text:0040AA6C                 mov     [edi+4], edx
.text:0040AA6F                 mov     edx, [esp+50h]
.text:0040AA73                 mov     [esp+0Ch], esi
.text:0040AA77                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040AA7F                 mov     [esp+4], edx
.text:0040AA83                 mov     dword ptr [esp], 0
.text:0040AA8A                 call    sub_40AB40
.text:0040AA8F                 add     esp, 40h
.text:0040AA92                 pop     ebx
.text:0040AA93                 pop     esi
.text:0040AA94                 pop     edi
.text:0040AA95                 retn
.text:0040AA95 ; ---------------------------------------------------------------------------
.text:0040AA96                 align 10h
.text:0040AAA0
.text:0040AAA0 ; =============== S U B R O U T I N E =======================================
.text:0040AAA0
.text:0040AAA0
.text:0040AAA0 ; int __cdecl sub_40AAA0(char *)
.text:0040AAA0 sub_40AAA0      proc near               ; CODE XREF: sub_408850+64↑p
.text:0040AAA0
.text:0040AAA0 var_4C          = dword ptr -4Ch
.text:0040AAA0 var_48          = dword ptr -48h
.text:0040AAA0 var_44          = dword ptr -44h
.text:0040AAA0 var_40          = dword ptr -40h
.text:0040AAA0 var_3C          = dword ptr -3Ch
.text:0040AAA0 var_38          = dword ptr -38h
.text:0040AAA0 var_34          = dword ptr -34h
.text:0040AAA0 var_30          = dword ptr -30h
.text:0040AAA0 var_2C          = dword ptr -2Ch
.text:0040AAA0 var_28          = dword ptr -28h
.text:0040AAA0 var_24          = dword ptr -24h
.text:0040AAA0 var_20          = dword ptr -20h
.text:0040AAA0 var_1C          = dword ptr -1Ch
.text:0040AAA0 arg_0           = dword ptr  4
.text:0040AAA0
.text:0040AAA0                 sub     esp, 4Ch
.text:0040AAA3                 mov     ecx, ds:dword_415300
.text:0040AAA9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040AAB1                 mov     edx, ds:dword_415304
.text:0040AAB7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040AABE                 mov     [esp+4Ch+var_3C], ecx
.text:0040AAC2                 mov     ecx, ds:dword_41530C
.text:0040AAC8                 mov     [esp+4Ch+var_38], edx
.text:0040AACC                 mov     edx, ds:dword_415308
.text:0040AAD2                 mov     [esp+4Ch+var_30], ecx
.text:0040AAD6                 mov     ecx, ds:dword_415310
.text:0040AADC                 mov     eax, edx
.text:0040AADE                 shr     eax, 1Ah
.text:0040AAE1                 and     eax, 1
.text:0040AAE4                 xor     eax, 1
.text:0040AAE7                 mov     [esp+4Ch+var_2C], ecx
.text:0040AAEB                 shl     eax, 1Ah
.text:0040AAEE                 mov     ecx, ds:dword_415314
.text:0040AAF4                 xor     edx, eax
.text:0040AAF6                 mov     [esp+4Ch+var_34], edx
.text:0040AAFA                 mov     edx, [esp+4Ch+arg_0]
.text:0040AAFE                 mov     [esp+4Ch+var_28], ecx
.text:0040AB02                 mov     ecx, ds:dword_415318
.text:0040AB08                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040AB0C                 mov     [esp+4Ch+var_24], ecx
.text:0040AB10                 mov     ecx, ds:dword_41531C
.text:0040AB16                 mov     [esp+4Ch+var_20], ecx
.text:0040AB1A                 mov     ecx, ds:dword_415320
.text:0040AB20                 mov     [esp+4Ch+var_1C], ecx
.text:0040AB24                 lea     ecx, [esp+4Ch+var_3C]
.text:0040AB28                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040AB2C                 call    sub_40AB40
.text:0040AB31                 add     esp, 4Ch
.text:0040AB34                 retn
.text:0040AB34 sub_40AAA0      endp
.text:0040AB34
.text:0040AB34 ; ---------------------------------------------------------------------------
.text:0040AB35                 align 10h
.text:0040AB40
.text:0040AB40 ; =============== S U B R O U T I N E =======================================
.text:0040AB40
.text:0040AB40
.text:0040AB40 ; int __cdecl sub_40AB40(int, char *, int, int)
.text:0040AB40 sub_40AB40      proc near               ; CODE XREF: .text:0040A6F2↑p
.text:0040AB40                                         ; .text:0040A722↑p ...
.text:0040AB40
.text:0040AB40 Block           = dword ptr -2Ch
.text:0040AB40 var_28          = dword ptr -28h
.text:0040AB40 Str             = dword ptr -24h
.text:0040AB40 var_20          = dword ptr -20h
.text:0040AB40 var_1C          = dword ptr -1Ch
.text:0040AB40 var_18          = dword ptr -18h
.text:0040AB40 var_14          = dword ptr -14h
.text:0040AB40 arg_0           = dword ptr  4
.text:0040AB40 arg_4           = dword ptr  8
.text:0040AB40 arg_8           = dword ptr  0Ch
.text:0040AB40 arg_C           = dword ptr  10h
.text:0040AB40
.text:0040AB40                 push    ebp
.text:0040AB41                 push    edi
.text:0040AB42                 push    esi
.text:0040AB43                 push    ebx
.text:0040AB44                 sub     esp, 1Ch
.text:0040AB47                 call    _errno
.text:0040AB4C                 mov     edx, [eax]
.text:0040AB4E                 mov     eax, [esp+2Ch+arg_0]
.text:0040AB52                 mov     [esp+2Ch+var_14], edx
.text:0040AB56                 test    eax, eax
.text:0040AB58                 js      loc_40ACFA
.text:0040AB5E                 mov     eax, [esp+2Ch+arg_0]
.text:0040AB62                 cmp     dword_414050, eax
.text:0040AB68                 ja      short loc_40ABE0
.text:0040AB6A                 mov     esi, eax
.text:0040AB6C                 inc     esi
.text:0040AB6D                 cmp     esi, 1FFFFFFFh
.text:0040AB73                 ja      loc_40ACFF
.text:0040AB79                 mov     ebx, off_41405C
.text:0040AB7F                 cmp     ebx, offset dword_414054
.text:0040AB85                 jz      loc_40ACD1
.text:0040AB8B
.text:0040AB8B loc_40AB8B:                             ; CODE XREF: sub_40AB40+1B5↓j
.text:0040AB8B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040AB8E                 lea     ecx, ds:0[esi*8]
.text:0040AB95                 mov     ebp, esi
.text:0040AB97                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040AB9B                 call    sub_408A70
.text:0040ABA0                 mov     off_41405C, eax
.text:0040ABA5                 mov     ebx, dword_414050
.text:0040ABAB                 sub     ebp, ebx
.text:0040ABAD                 lea     edi, [eax+ebx*8]
.text:0040ABB0                 lea     eax, ds:0[ebp*8]
.text:0040ABB7                 cmp     eax, 7
.text:0040ABBA                 jbe     short loc_40ABD0
.text:0040ABBC                 test    edi, 4
.text:0040ABC2                 jz      short loc_40ABD0
.text:0040ABC4                 mov     dword ptr [edi], 0
.text:0040ABCA                 sub     eax, 4
.text:0040ABCD                 add     edi, 4
.text:0040ABD0
.text:0040ABD0 loc_40ABD0:                             ; CODE XREF: sub_40AB40+7A↑j
.text:0040ABD0                                         ; sub_40AB40+82↑j
.text:0040ABD0                 cld
.text:0040ABD1                 mov     ecx, eax
.text:0040ABD3                 shr     ecx, 2
.text:0040ABD6                 xor     eax, eax
.text:0040ABD8                 rep stosd
.text:0040ABDA                 mov     dword_414050, esi
.text:0040ABE0
.text:0040ABE0 loc_40ABE0:                             ; CODE XREF: sub_40AB40+28↑j
.text:0040ABE0                 mov     esi, off_41405C
.text:0040ABE6                 mov     eax, [esp+2Ch+arg_0]
.text:0040ABEA                 mov     ebp, [esi+eax*8]
.text:0040ABED                 mov     edi, [esi+eax*8+4]
.text:0040ABF1                 mov     esi, [esp+2Ch+arg_C]
.text:0040ABF5                 test    esi, esi
.text:0040ABF7                 jz      loc_40ACC7
.text:0040ABFD
.text:0040ABFD loc_40ABFD:                             ; CODE XREF: sub_40AB40+18C↓j
.text:0040ABFD                 call    _errno
.text:0040AC02                 mov     ebx, [eax]
.text:0040AC04                 mov     [esp+2Ch+var_18], esi ; int
.text:0040AC08                 mov     ecx, [esi]
.text:0040AC0A                 mov     [esp+2Ch+Block], edi ; int
.text:0040AC0D                 mov     edx, [esp+2Ch+arg_8]
.text:0040AC11                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040AC15                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040AC19                 mov     ecx, [esp+2Ch+arg_4]
.text:0040AC1D                 mov     [esp+2Ch+var_20], edx ; int
.text:0040AC21                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040AC25                 call    sub_409A00
.text:0040AC2A                 mov     esi, eax
.text:0040AC2C                 call    _errno
.text:0040AC31                 mov     [eax], ebx
.text:0040AC33                 cmp     ebp, esi
.text:0040AC35                 ja      short loc_40ACAB
.text:0040AC37                 lea     ebp, [esi+1]
.text:0040AC3A                 mov     ebx, off_41405C
.text:0040AC40                 cmp     edi, offset unk_415200
.text:0040AC46                 mov     esi, [esp+2Ch+arg_0]
.text:0040AC4A                 mov     [ebx+esi*8], ebp
.text:0040AC4D                 jz      short loc_40AC5D
.text:0040AC4F                 mov     [esp+2Ch+Block], edi ; Block
.text:0040AC52                 call    free
.text:0040AC57                 mov     ebx, off_41405C
.text:0040AC5D
.text:0040AC5D loc_40AC5D:                             ; CODE XREF: sub_40AB40+10D↑j
.text:0040AC5D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040AC60                 call    sub_4089E0
.text:0040AC65                 mov     esi, [esp+2Ch+arg_C]
.text:0040AC69                 mov     edi, eax
.text:0040AC6B                 mov     eax, [esp+2Ch+arg_0]
.text:0040AC6F                 test    esi, esi
.text:0040AC71                 mov     [ebx+eax*8+4], edi
.text:0040AC75                 jz      short loc_40ACC0
.text:0040AC77
.text:0040AC77 loc_40AC77:                             ; CODE XREF: sub_40AB40+185↓j
.text:0040AC77                 call    _errno
.text:0040AC7C                 mov     ebx, [eax]
.text:0040AC7E                 mov     [esp+2Ch+var_18], esi ; int
.text:0040AC82                 mov     ecx, [esi]
.text:0040AC84                 mov     [esp+2Ch+Block], edi ; int
.text:0040AC87                 mov     edx, [esp+2Ch+arg_8]
.text:0040AC8B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040AC8F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040AC93                 mov     ecx, [esp+2Ch+arg_4]
.text:0040AC97                 mov     [esp+2Ch+var_20], edx ; int
.text:0040AC9B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040AC9F                 call    sub_409A00
.text:0040ACA4                 call    _errno
.text:0040ACA9                 mov     [eax], ebx
.text:0040ACAB
.text:0040ACAB loc_40ACAB:                             ; CODE XREF: sub_40AB40+F5↑j
.text:0040ACAB                 call    _errno
.text:0040ACB0                 mov     ebp, [esp+2Ch+var_14]
.text:0040ACB4                 mov     [eax], ebp
.text:0040ACB6                 add     esp, 1Ch
.text:0040ACB9                 mov     eax, edi
.text:0040ACBB                 pop     ebx
.text:0040ACBC                 pop     esi
.text:0040ACBD                 pop     edi
.text:0040ACBE                 pop     ebp
.text:0040ACBF                 retn
.text:0040ACC0 ; ---------------------------------------------------------------------------
.text:0040ACC0
.text:0040ACC0 loc_40ACC0:                             ; CODE XREF: sub_40AB40+135↑j
.text:0040ACC0                 mov     esi, offset dword_415300
.text:0040ACC5                 jmp     short loc_40AC77
.text:0040ACC7 ; ---------------------------------------------------------------------------
.text:0040ACC7
.text:0040ACC7 loc_40ACC7:                             ; CODE XREF: sub_40AB40+B7↑j
.text:0040ACC7                 mov     esi, offset dword_415300
.text:0040ACCC                 jmp     loc_40ABFD
.text:0040ACD1 ; ---------------------------------------------------------------------------
.text:0040ACD1
.text:0040ACD1 loc_40ACD1:                             ; CODE XREF: sub_40AB40+45↑j
.text:0040ACD1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040ACD8                 call    sub_4089E0
.text:0040ACDD                 mov     off_41405C, eax
.text:0040ACE2                 mov     edi, dword_414054
.text:0040ACE8                 mov     ebx, eax
.text:0040ACEA                 mov     ecx, off_414058
.text:0040ACF0                 mov     [eax], edi
.text:0040ACF2                 mov     [eax+4], ecx
.text:0040ACF5                 jmp     loc_40AB8B
.text:0040ACFA ; ---------------------------------------------------------------------------
.text:0040ACFA
.text:0040ACFA loc_40ACFA:                             ; CODE XREF: sub_40AB40+18↑j
.text:0040ACFA                 call    abort
.text:0040ACFF ; ---------------------------------------------------------------------------
.text:0040ACFF
.text:0040ACFF loc_40ACFF:                             ; CODE XREF: sub_40AB40+33↑j
.text:0040ACFF                 call    sub_40AD30
.text:0040ACFF sub_40AB40      endp
.text:0040ACFF
.text:0040ACFF ; ---------------------------------------------------------------------------
.text:0040AD04                 align 10h
.text:0040AD10
.text:0040AD10 loc_40AD10:                             ; DATA XREF: sub_40AD30+3↓o
.text:0040AD10                 insd
.text:0040AD11                 db      65h
.text:0040AD11                 insd
.text:0040AD13                 outsd
.text:0040AD14                 jb      short loc_40AD8F
.text:0040AD16                 and     [ebp+78h], ah
.text:0040AD19                 push    74737561h
.text:0040AD1E
.text:0040AD1E loc_40AD1E:                             ; DATA XREF: sub_40AD30+10↓o
.text:0040AD1E                 db      65h
.text:0040AD1E                 add     fs:0B68D0073h, ah
.text:0040AD1E ; ---------------------------------------------------------------------------
.text:0040AD26                 dw 0
.text:0040AD28                 align 10h
.text:0040AD30
.text:0040AD30 ; =============== S U B R O U T I N E =======================================
.text:0040AD30
.text:0040AD30 ; Attributes: noreturn
.text:0040AD30
.text:0040AD30 sub_40AD30      proc near               ; CODE XREF: sub_4089A0:loc_4089D9↑p
.text:0040AD30                                         ; sub_4089E0+24↑p ...
.text:0040AD30
.text:0040AD30 Code            = dword ptr -1Ch
.text:0040AD30 ErrorMessage    = dword ptr -18h
.text:0040AD30 var_14          = dword ptr -14h
.text:0040AD30 var_10          = byte ptr -10h
.text:0040AD30
.text:0040AD30                 sub     esp, 1Ch
.text:0040AD33                 mov     [esp+1Ch+Code], offset loc_40AD10
.text:0040AD3A                 call    ds:libintl_gettext
.text:0040AD40                 mov     [esp+1Ch+var_14], (offset loc_40AD1E+3) ; char *
.text:0040AD48                 mov     edx, Code
.text:0040AD4E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040AD56                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040AD5A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040AD5D                 call    sub_40ADC0
.text:0040AD62                 call    abort
.text:0040AD62 sub_40AD30      endp
.text:0040AD62
.text:0040AD62 ; ---------------------------------------------------------------------------
.text:0040AD67                 align 10h
.text:0040AD70
.text:0040AD70 ; =============== S U B R O U T I N E =======================================
.text:0040AD70
.text:0040AD70 ; Attributes: thunk
.text:0040AD70
.text:0040AD70 libintl_bindtextdomain proc near
.text:0040AD70                 jmp     ds:__imp_libintl_bindtextdomain
.text:0040AD70 libintl_bindtextdomain endp
.text:0040AD70
.text:0040AD70 ; ---------------------------------------------------------------------------
.text:0040AD76                 align 10h
.text:0040AD80                 jmp     ds:libintl_textdomain
.text:0040AD80 ; ---------------------------------------------------------------------------
.text:0040AD86                 db 2 dup(90h)
.text:0040AD88                 dd 0
.text:0040AD8C                 db 3 dup(0)
.text:0040AD8F ; ---------------------------------------------------------------------------
.text:0040AD8F
.text:0040AD8F loc_40AD8F:                             ; CODE XREF: .text:0040AD14↑j
.text:0040AD8F                 add     bh, bh
.text:0040AD91                 and     eax, offset libintl_gettext
.text:0040AD96                 nop
.text:0040AD97                 nop
.text:0040AD97 ; ---------------------------------------------------------------------------
.text:0040AD98                 dd 2 dup(0)
.text:0040ADA0 ; const char aS_0[]
.text:0040ADA0 aS_0            db ': %s',0             ; DATA XREF: sub_40ADC0+B8↓o
.text:0040ADA0                                         ; sub_40AEC4+122↓o
.text:0040ADA5 aUnknownSystemE db 'Unknown system error',0
.text:0040ADA5                                         ; DATA XREF: sub_40ADC0:loc_40AE8D↓o
.text:0040ADA5                                         ; sub_40AEC4:loc_40AFFE↓o
.text:0040ADBA ; const char aS_1[]
.text:0040ADBA aS_1            db '%s: ',0             ; DATA XREF: sub_40ADC0:loc_40AE94↓o
.text:0040ADBF                 align 10h
.text:0040ADC0
.text:0040ADC0 ; =============== S U B R O U T I N E =======================================
.text:0040ADC0
.text:0040ADC0
.text:0040ADC0 ; int __cdecl sub_40ADC0(int Code, int ErrorMessage, char *, char)
.text:0040ADC0 sub_40ADC0      proc near               ; CODE XREF: sub_4025D0+5E5↑p
.text:0040ADC0                                         ; sub_4025D0+A30↑p ...
.text:0040ADC0
.text:0040ADC0 Stream          = dword ptr -1Ch
.text:0040ADC0 Format          = dword ptr -18h
.text:0040ADC0 ArgList         = dword ptr -14h
.text:0040ADC0 Code            = dword ptr  4
.text:0040ADC0 ErrorMessage    = dword ptr  8
.text:0040ADC0 arg_8           = dword ptr  0Ch
.text:0040ADC0 arg_C           = byte ptr  10h
.text:0040ADC0
.text:0040ADC0                 push    esi
.text:0040ADC1                 push    ebx
.text:0040ADC2                 sub     esp, 14h
.text:0040ADC5                 mov     edx, ds:_iob
.text:0040ADCB                 mov     esi, [esp+1Ch+Code]
.text:0040ADCF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040ADD3                 add     edx, 20h ; ' '
.text:0040ADD6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040ADD9                 call    fflush
.text:0040ADDE                 mov     eax, ds:dword_4156A0
.text:0040ADE3                 test    eax, eax
.text:0040ADE5                 jz      loc_40AE94
.text:0040ADEB                 call    eax ; dword_4156A0
.text:0040ADED
.text:0040ADED loc_40ADED:                             ; CODE XREF: sub_40ADC0+F7↓j
.text:0040ADED                 lea     edx, [esp+1Ch+arg_C]
.text:0040ADF1                 mov     ecx, [esp+1Ch+arg_8]
.text:0040ADF5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040ADF9                 mov     edx, ds:_iob
.text:0040ADFF                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040AE03                 add     edx, 40h ; '@'
.text:0040AE06                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AE09                 call    vfprintf
.text:0040AE0E                 inc     ds:dword_4156B0
.text:0040AE14                 test    ebx, ebx
.text:0040AE16                 jnz     short loc_40AE62
.text:0040AE18
.text:0040AE18 loc_40AE18:                             ; CODE XREF: sub_40ADC0+CB↓j
.text:0040AE18                 mov     edx, ds:_iob
.text:0040AE1E                 lea     ecx, [edx+40h]
.text:0040AE21                 mov     ebx, [ecx+4]
.text:0040AE24                 dec     ebx
.text:0040AE25                 test    ebx, ebx
.text:0040AE27                 mov     [ecx+4], ebx
.text:0040AE2A                 js      short loc_40AE50
.text:0040AE2C                 mov     ecx, [edx+40h]
.text:0040AE2F                 mov     byte ptr [ecx], 0Ah
.text:0040AE32                 inc     dword ptr [edx+40h]
.text:0040AE35
.text:0040AE35 loc_40AE35:                             ; CODE XREF: sub_40ADC0+A0↓j
.text:0040AE35                 mov     edx, ds:_iob
.text:0040AE3B                 add     edx, 40h ; '@'
.text:0040AE3E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AE41                 call    fflush
.text:0040AE46                 test    esi, esi
.text:0040AE48                 jnz     short loc_40AEBC
.text:0040AE4A                 add     esp, 14h
.text:0040AE4D                 pop     ebx
.text:0040AE4E                 pop     esi
.text:0040AE4F                 retn
.text:0040AE50 ; ---------------------------------------------------------------------------
.text:0040AE50
.text:0040AE50 loc_40AE50:                             ; CODE XREF: sub_40ADC0+6A↑j
.text:0040AE50                 mov     [esp+1Ch+Format], ecx ; File
.text:0040AE54                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040AE5B                 call    _flsbuf
.text:0040AE60                 jmp     short loc_40AE35
.text:0040AE62 ; ---------------------------------------------------------------------------
.text:0040AE62
.text:0040AE62 loc_40AE62:                             ; CODE XREF: sub_40ADC0+56↑j
.text:0040AE62                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040AE65                 call    strerror
.text:0040AE6A                 test    eax, eax
.text:0040AE6C                 jz      short loc_40AE8D
.text:0040AE6E
.text:0040AE6E loc_40AE6E:                             ; CODE XREF: sub_40ADC0+D2↓j
.text:0040AE6E                 mov     [esp+1Ch+ArgList], eax
.text:0040AE72                 mov     ebx, ds:_iob
.text:0040AE78                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:0040AE80                 add     ebx, 40h ; '@'
.text:0040AE83                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040AE86                 call    fprintf
.text:0040AE8B                 jmp     short loc_40AE18
.text:0040AE8D ; ---------------------------------------------------------------------------
.text:0040AE8D
.text:0040AE8D loc_40AE8D:                             ; CODE XREF: sub_40ADC0+AC↑j
.text:0040AE8D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040AE92                 jmp     short loc_40AE6E
.text:0040AE94 ; ---------------------------------------------------------------------------
.text:0040AE94
.text:0040AE94 loc_40AE94:                             ; CODE XREF: sub_40ADC0+25↑j
.text:0040AE94                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040AE9C                 mov     edx, ds:_iob
.text:0040AEA2                 mov     ecx, ds:dword_415670
.text:0040AEA8                 add     edx, 40h ; '@'
.text:0040AEAB                 mov     [esp+1Ch+ArgList], ecx
.text:0040AEAF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040AEB2                 call    fprintf
.text:0040AEB7                 jmp     loc_40ADED
.text:0040AEBC ; ---------------------------------------------------------------------------
.text:0040AEBC
.text:0040AEBC loc_40AEBC:                             ; CODE XREF: sub_40ADC0+88↑j
.text:0040AEBC                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040AEBF                 call    exit
.text:0040AEBF sub_40ADC0      endp
.text:0040AEBF
.text:0040AEC4
.text:0040AEC4 ; =============== S U B R O U T I N E =======================================
.text:0040AEC4
.text:0040AEC4
.text:0040AEC4 ; int __cdecl sub_40AEC4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040AEC4 sub_40AEC4      proc near               ; DATA XREF: sub_40AEC4+77↓o
.text:0040AEC4
.text:0040AEC4 Stream          = dword ptr -28h
.text:0040AEC4 Format          = dword ptr -24h
.text:0040AEC4 ArgList         = dword ptr -20h
.text:0040AEC4 var_1C          = dword ptr -1Ch
.text:0040AEC4 Code            = dword ptr  8
.text:0040AEC4 ErrorMessage    = dword ptr  0Ch
.text:0040AEC4 Str2            = dword ptr  10h
.text:0040AEC4 arg_10          = dword ptr  14h
.text:0040AEC4 arg_14          = dword ptr  18h
.text:0040AEC4 arg_18          = byte ptr  1Ch
.text:0040AEC4
.text:0040AEC4                 and     eax, 64253A73h
.text:0040AEC9                 cmp     ah, [eax]
.text:0040AECB
.text:0040AECB loc_40AECB:                             ; DATA XREF: sub_40AEC4:loc_40B005↓o
.text:0040AECB                 add     ds:55003A73h, ah
.text:0040AED1                 push    edi
.text:0040AED2                 push    esi
.text:0040AED3                 push    ebx
.text:0040AED4                 sub     esp, 1Ch
.text:0040AED7                 mov     edx, ds:dword_4156E0
.text:0040AEDD                 mov     ebp, [esp+28h+Code]
.text:0040AEE1                 mov     edi, [esp+28h+ErrorMessage]
.text:0040AEE5                 test    edx, edx
.text:0040AEE7                 mov     ebx, [esp+28h+Str2]
.text:0040AEEB                 mov     esi, [esp+28h+arg_10]
.text:0040AEEF                 jz      short loc_40AF09
.text:0040AEF1                 cmp     ds:dword_415340, esi
.text:0040AEF7                 jz      loc_40B030
.text:0040AEFD
.text:0040AEFD loc_40AEFD:                             ; CODE XREF: sub_40AEC4+18D↓j
.text:0040AEFD                 mov     ds:Str1, ebx
.text:0040AF03                 mov     ds:dword_415340, esi
.text:0040AF09
.text:0040AF09 loc_40AF09:                             ; CODE XREF: sub_40AEC4+2B↑j
.text:0040AF09                 mov     edx, ds:_iob
.text:0040AF0F                 add     edx, 20h ; ' '
.text:0040AF12                 mov     [esp+28h+Stream], edx ; Stream
.text:0040AF15                 call    fflush
.text:0040AF1A                 mov     eax, ds:dword_4156A0
.text:0040AF1F                 test    eax, eax
.text:0040AF21                 jz      loc_40B005
.text:0040AF27                 call    eax ; dword_4156A0
.text:0040AF29
.text:0040AF29 loc_40AF29:                             ; CODE XREF: sub_40AEC4+164↓j
.text:0040AF29                 test    ebx, ebx
.text:0040AF2B                 jz      short loc_40AF4E
.text:0040AF2D                 mov     [esp+28h+ArgList], ebx
.text:0040AF31                 mov     ebx, ds:_iob
.text:0040AF37                 mov     [esp+28h+var_1C], esi
.text:0040AF3B                 mov     [esp+28h+Format], offset sub_40AEC4 ; Format
.text:0040AF43                 add     ebx, 40h ; '@'
.text:0040AF46                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040AF49                 call    fprintf
.text:0040AF4E
.text:0040AF4E loc_40AF4E:                             ; CODE XREF: sub_40AEC4+67↑j
.text:0040AF4E                 mov     esi, ds:_iob
.text:0040AF54                 lea     edx, [esp+28h+arg_18]
.text:0040AF58                 mov     ecx, [esp+28h+arg_14]
.text:0040AF5C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040AF60                 add     esi, 40h ; '@'
.text:0040AF63                 mov     [esp+28h+Format], ecx ; Format
.text:0040AF67                 mov     [esp+28h+Stream], esi ; Stream
.text:0040AF6A                 call    vfprintf
.text:0040AF6F                 inc     ds:dword_4156B0
.text:0040AF75                 test    edi, edi
.text:0040AF77                 jnz     short loc_40AFD0
.text:0040AF79
.text:0040AF79 loc_40AF79:                             ; CODE XREF: sub_40AEC4+135↓j
.text:0040AF79                 mov     edx, ds:_iob
.text:0040AF7F                 lea     ecx, [edx+40h]
.text:0040AF82                 mov     ebx, [ecx+4]
.text:0040AF85                 dec     ebx
.text:0040AF86                 test    ebx, ebx
.text:0040AF88                 mov     [ecx+4], ebx
.text:0040AF8B                 js      short loc_40AFB7
.text:0040AF8D                 mov     esi, [edx+40h]
.text:0040AF90                 mov     byte ptr [esi], 0Ah
.text:0040AF93                 inc     dword ptr [edx+40h]
.text:0040AF96
.text:0040AF96 loc_40AF96:                             ; CODE XREF: sub_40AEC4+103↓j
.text:0040AF96                 mov     ecx, ds:_iob
.text:0040AF9C                 add     ecx, 40h ; '@'
.text:0040AF9F                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040AFA2                 call    fflush
.text:0040AFA7                 test    ebp, ebp
.text:0040AFA9                 jnz     loc_40B056
.text:0040AFAF
.text:0040AFAF loc_40AFAF:                             ; CODE XREF: sub_40AEC4+173↓j
.text:0040AFAF                                         ; sub_40AEC4+187↓j
.text:0040AFAF                 add     esp, 1Ch
.text:0040AFB2                 pop     ebx
.text:0040AFB3                 pop     esi
.text:0040AFB4                 pop     edi
.text:0040AFB5                 pop     ebp
.text:0040AFB6                 retn
.text:0040AFB7 ; ---------------------------------------------------------------------------
.text:0040AFB7
.text:0040AFB7 loc_40AFB7:                             ; CODE XREF: sub_40AEC4+C7↑j
.text:0040AFB7                 mov     [esp+28h+Format], ecx ; File
.text:0040AFBB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040AFC2                 call    _flsbuf
.text:0040AFC7                 jmp     short loc_40AF96
.text:0040AFC7 ; ---------------------------------------------------------------------------
.text:0040AFC9                 align 10h
.text:0040AFD0
.text:0040AFD0 loc_40AFD0:                             ; CODE XREF: sub_40AEC4+B3↑j
.text:0040AFD0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040AFD3                 call    strerror
.text:0040AFD8                 test    eax, eax
.text:0040AFDA                 jz      short loc_40AFFE
.text:0040AFDC
.text:0040AFDC loc_40AFDC:                             ; CODE XREF: sub_40AEC4+13F↓j
.text:0040AFDC                 mov     [esp+28h+ArgList], eax
.text:0040AFE0                 mov     edi, ds:_iob
.text:0040AFE6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040AFEE                 add     edi, 40h ; '@'
.text:0040AFF1                 mov     [esp+28h+Stream], edi ; Stream
.text:0040AFF4                 call    fprintf
.text:0040AFF9                 jmp     loc_40AF79
.text:0040AFFE ; ---------------------------------------------------------------------------
.text:0040AFFE
.text:0040AFFE loc_40AFFE:                             ; CODE XREF: sub_40AEC4+116↑j
.text:0040AFFE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040B003                 jmp     short loc_40AFDC
.text:0040B005 ; ---------------------------------------------------------------------------
.text:0040B005
.text:0040B005 loc_40B005:                             ; CODE XREF: sub_40AEC4+5D↑j
.text:0040B005                 mov     [esp+28h+Format], (offset loc_40AECB+1) ; Format
.text:0040B00D                 mov     ecx, ds:_iob
.text:0040B013                 mov     edx, ds:dword_415670
.text:0040B019                 add     ecx, 40h ; '@'
.text:0040B01C                 mov     [esp+28h+ArgList], edx
.text:0040B020                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040B023                 call    fprintf
.text:0040B028                 jmp     loc_40AF29
.text:0040B028 ; ---------------------------------------------------------------------------
.text:0040B02D                 align 10h
.text:0040B030
.text:0040B030 loc_40B030:                             ; CODE XREF: sub_40AEC4+33↑j
.text:0040B030                 mov     eax, ds:Str1
.text:0040B035                 cmp     ebx, eax
.text:0040B037                 jz      loc_40AFAF
.text:0040B03D                 mov     [esp+28h+Format], ebx ; Str2
.text:0040B041                 mov     [esp+28h+Stream], eax ; Str1
.text:0040B044                 call    strcmp
.text:0040B049                 test    eax, eax
.text:0040B04B                 jz      loc_40AFAF
.text:0040B051                 jmp     loc_40AEFD
.text:0040B056 ; ---------------------------------------------------------------------------
.text:0040B056
.text:0040B056 loc_40B056:                             ; CODE XREF: sub_40AEC4+E5↑j
.text:0040B056                 mov     [esp+28h+Stream], ebp ; Code
.text:0040B059                 call    exit
.text:0040B059 sub_40AEC4      endp ; sp-analysis failed
.text:0040B059
.text:0040B059 ; ---------------------------------------------------------------------------
.text:0040B05E                 align 10h
.text:0040B060
.text:0040B060 ; =============== S U B R O U T I N E =======================================
.text:0040B060
.text:0040B060
.text:0040B060 ; int __cdecl sub_40B060(char *, int)
.text:0040B060 sub_40B060      proc near               ; CODE XREF: sub_4051F0+5F↑p
.text:0040B060
.text:0040B060 hNamedPipe      = dword ptr -0Ch
.text:0040B060 Str             = dword ptr -8
.text:0040B060 var_4           = dword ptr -4
.text:0040B060 arg_0           = dword ptr  4
.text:0040B060 arg_4           = dword ptr  8
.text:0040B060
.text:0040B060                 sub     esp, 0Ch
.text:0040B063                 mov     edx, [esp+0Ch+arg_4]
.text:0040B067                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0040B06E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040B072                 mov     edx, [esp+0Ch+arg_0]
.text:0040B076                 mov     [esp+0Ch+Str], edx ; Str
.text:0040B07A                 call    sub_40B2D0
.text:0040B07F                 add     esp, 0Ch
.text:0040B082                 retn
.text:0040B082 sub_40B060      endp
.text:0040B082
.text:0040B082 ; ---------------------------------------------------------------------------
.text:0040B083 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:0040B083                                         ; DATA XREF: .text:0040B16E↓o
.text:0040B096 aModeO          db 'mode:      %#o',0Ah,0
.text:0040B096                                         ; DATA XREF: .text:0040B184↓o
.text:0040B0A6 aUidLd          db 'uid:       %ld',0Ah,0
.text:0040B0A6                                         ; DATA XREF: .text:0040B197↓o
.text:0040B0B6 aGidLd          db 'gid:       %ld',0Ah,0
.text:0040B0B6                                         ; DATA XREF: .text:0040B1AA↓o
.text:0040B0C6 aDevLu          db 'dev:       %lu',0Ah,0
.text:0040B0C6                                         ; DATA XREF: .text:0040B1BD↓o
.text:0040B0D6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:0040B0D6                                         ; DATA XREF: .text:0040B1D0↓o
.text:0040B0E6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:0040B0E6                                         ; DATA XREF: .text:0040B1E6↓o
.text:0040B0F8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:0040B0F8                                         ; DATA XREF: .text:0040B1FD↓o
.text:0040B107 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:0040B107                                         ; DATA XREF: .text:0040B213↓o
.text:0040B119 aAtimeLdS       db 'atime:     %ld: %s',0
.text:0040B119                                         ; DATA XREF: .text:0040B239↓o
.text:0040B12C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040B12C                                         ; DATA XREF: .text:0040B25B↓o
.text:0040B13F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040B13F                                         ; DATA XREF: .text:0040B27D↓o
.text:0040B153                 align 10h
.text:0040B160                 push    ebx
.text:0040B161                 sub     esp, 18h
.text:0040B164                 mov     ebx, [esp+20h]
.text:0040B168                 mov     edx, [ebx+8]
.text:0040B16B                 mov     ecx, [ebx+0Ch]
.text:0040B16E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:0040B175                 mov     [esp+4], edx
.text:0040B179                 mov     [esp+8], ecx
.text:0040B17D                 call    printf
.text:0040B182                 mov     ecx, [ebx]
.text:0040B184                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0040B18B                 mov     [esp+4], ecx
.text:0040B18F                 call    printf
.text:0040B194                 mov     edx, [ebx+1Ch]
.text:0040B197                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0040B19E                 mov     [esp+4], edx
.text:0040B1A2                 call    printf
.text:0040B1A7                 mov     ecx, [ebx+20h]
.text:0040B1AA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:0040B1B1                 mov     [esp+4], ecx
.text:0040B1B5                 call    printf
.text:0040B1BA                 mov     edx, [ebx+10h]
.text:0040B1BD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:0040B1C4                 mov     [esp+4], edx
.text:0040B1C8                 call    printf
.text:0040B1CD                 mov     ecx, [ebx+18h]
.text:0040B1D0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:0040B1D7                 mov     [esp+4], ecx
.text:0040B1DB                 call    printf
.text:0040B1E0                 mov     edx, [ebx+30h]
.text:0040B1E3                 mov     ecx, [ebx+34h]
.text:0040B1E6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0040B1ED                 mov     [esp+4], edx
.text:0040B1F1                 mov     [esp+8], ecx
.text:0040B1F5                 call    printf
.text:0040B1FA                 mov     ecx, [ebx+50h]
.text:0040B1FD                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:0040B204                 mov     [esp+4], ecx
.text:0040B208                 call    printf
.text:0040B20D                 mov     ecx, [ebx+5Ch]
.text:0040B210                 mov     edx, [ebx+58h]
.text:0040B213                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040B21A                 mov     [esp+8], ecx
.text:0040B21E                 mov     [esp+4], edx
.text:0040B222                 call    printf
.text:0040B227                 lea     edx, [ebx+38h]
.text:0040B22A                 mov     [esp], edx
.text:0040B22D                 call    ctime
.text:0040B232                 mov     [esp+8], eax
.text:0040B236                 mov     ecx, [ebx+38h]
.text:0040B239                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:0040B240                 mov     [esp+4], ecx
.text:0040B244                 call    printf
.text:0040B249                 lea     edx, [ebx+40h]
.text:0040B24C                 mov     [esp], edx
.text:0040B24F                 call    ctime
.text:0040B254                 mov     [esp+8], eax
.text:0040B258                 mov     ecx, [ebx+40h]
.text:0040B25B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:0040B262                 mov     [esp+4], ecx
.text:0040B266                 call    printf
.text:0040B26B                 lea     edx, [ebx+48h]
.text:0040B26E                 mov     [esp], edx
.text:0040B271                 call    ctime
.text:0040B276                 mov     [esp+8], eax
.text:0040B27A                 mov     edx, [ebx+48h]
.text:0040B27D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:0040B284                 mov     [esp+4], edx
.text:0040B288                 call    printf
.text:0040B28D                 add     esp, 18h
.text:0040B290                 xor     eax, eax
.text:0040B292                 pop     ebx
.text:0040B293                 retn
.text:0040B293 ; ---------------------------------------------------------------------------
.text:0040B294                 align 10h
.text:0040B2A0 ; const char aFxstat64BadFil[]
.text:0040B2A0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040B2A0                                         ; DATA XREF: sub_40B2D0+7B↓o
.text:0040B2C4                 align 10h
.text:0040B2D0
.text:0040B2D0 ; =============== S U B R O U T I N E =======================================
.text:0040B2D0
.text:0040B2D0
.text:0040B2D0 ; int __cdecl sub_40B2D0(HANDLE hNamedPipe, char *Str, int)
.text:0040B2D0 sub_40B2D0      proc near               ; CODE XREF: sub_40B060+1A↑p
.text:0040B2D0                                         ; .text:0040DA69↓p
.text:0040B2D0
.text:0040B2D0 hFindFile       = dword ptr -1A0h
.text:0040B2D0 var_19C         = dword ptr -19Ch
.text:0040B2D0 hLibModule      = dword ptr -198h
.text:0040B2D0 lpFindFileData  = dword ptr -194h
.text:0040B2D0 lpModuleName    = dword ptr -18Ch
.text:0040B2D0 lpProcName      = dword ptr -188h
.text:0040B2D0 var_184         = dword ptr -184h
.text:0040B2D0 var_180         = dword ptr -180h
.text:0040B2D0 var_17C         = dword ptr -17Ch
.text:0040B2D0 var_178         = dword ptr -178h
.text:0040B2D0 var_174         = dword ptr -174h
.text:0040B2D0 var_170         = dword ptr -170h
.text:0040B2D0 var_16C         = dword ptr -16Ch
.text:0040B2D0 var_168         = dword ptr -168h
.text:0040B2D0 var_164         = dword ptr -164h
.text:0040B2D0 hModule         = dword ptr -160h
.text:0040B2D0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040B2D0 FileHandle      = dword ptr -1Ch
.text:0040B2D0 var_18          = dword ptr -18h
.text:0040B2D0 var_10          = dword ptr -10h
.text:0040B2D0 var_C           = dword ptr -0Ch
.text:0040B2D0 lpFileName      = dword ptr -8
.text:0040B2D0 var_4           = dword ptr -4
.text:0040B2D0 hNamedPipe      = dword ptr  4
.text:0040B2D0 Str             = dword ptr  8
.text:0040B2D0 arg_8           = dword ptr  0Ch
.text:0040B2D0
.text:0040B2D0                 sub     esp, 1Ch
.text:0040B2D3                 mov     edx, [esp+1Ch+Str]
.text:0040B2D7                 mov     [esp+1Ch+var_C], ebx
.text:0040B2DB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040B2DF                 mov     [esp+1Ch+lpFileName], esi
.text:0040B2E3                 mov     esi, [esp+1Ch+arg_8]
.text:0040B2E7                 test    ebx, ebx
.text:0040B2E9                 mov     [esp+1Ch+var_4], edi
.text:0040B2ED                 jnz     short loc_40B327
.text:0040B2EF                 test    edx, edx
.text:0040B2F1                 js      short loc_40B347
.text:0040B2F3                 test    esi, esi
.text:0040B2F5                 jz      short loc_40B327
.text:0040B2F7                 cld
.text:0040B2F8                 mov     eax, ebx
.text:0040B2FA                 mov     edi, esi
.text:0040B2FC                 mov     ecx, 18h
.text:0040B301                 rep stosd
.text:0040B303                 mov     [esp+1Ch+Str], esi
.text:0040B307                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040B30A                 call    _get_osfhandle
.text:0040B30F                 mov     [esp+1Ch+hNamedPipe], eax
.text:0040B313                 mov     ebx, [esp+1Ch+var_C]
.text:0040B317                 mov     esi, [esp+1Ch+lpFileName]
.text:0040B31B                 mov     edi, [esp+1Ch+var_4]
.text:0040B31F                 add     esp, 1Ch
.text:0040B322                 jmp     loc_40B6B0
.text:0040B327 ; ---------------------------------------------------------------------------
.text:0040B327
.text:0040B327 loc_40B327:                             ; CODE XREF: sub_40B2D0+1D↑j
.text:0040B327                                         ; sub_40B2D0+25↑j
.text:0040B327                 call    _errno
.text:0040B32C                 mov     dword ptr [eax], 16h
.text:0040B332
.text:0040B332 loc_40B332:                             ; CODE XREF: sub_40B2D0+92↓j
.text:0040B332                 mov     ebx, [esp+1Ch+var_C]
.text:0040B336                 mov     eax, 0FFFFFFFFh
.text:0040B33B                 mov     esi, [esp+1Ch+lpFileName]
.text:0040B33F                 mov     edi, [esp+1Ch+var_4]
.text:0040B343                 add     esp, 1Ch
.text:0040B346                 retn
.text:0040B347 ; ---------------------------------------------------------------------------
.text:0040B347
.text:0040B347 loc_40B347:                             ; CODE XREF: sub_40B2D0+21↑j
.text:0040B347                 mov     [esp+1Ch+var_18], edx
.text:0040B34B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040B352                 call    printf
.text:0040B357                 call    _errno
.text:0040B35C                 mov     dword ptr [eax], 9
.text:0040B362                 jmp     short loc_40B332
.text:0040B362 ; ---------------------------------------------------------------------------
.text:0040B364                 align 20h
.text:0040B380 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040B380                                         ; DATA XREF: .data:off_414064↓o
.text:0040B394 ; const CHAR ModuleName[]
.text:0040B394 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_40B2D0+101↓o
.text:0040B394                                         ; sub_40B2D0+26C↓o ...
.text:0040B3A1 ; const CHAR ProcName[]
.text:0040B3A1 ProcName        db 'GetFileAttributesExA',0
.text:0040B3A1                                         ; DATA XREF: sub_40B2D0+118↓o
.text:0040B3B6                 align 10h
.text:0040B3C0
.text:0040B3C0 loc_40B3C0:                             ; CODE XREF: .text:0040C564↓p
.text:0040B3C0                                         ; sub_40C960+37↓p
.text:0040B3C0                 push    ebp
.text:0040B3C1                 push    edi
.text:0040B3C2                 push    esi
.text:0040B3C3                 push    ebx
.text:0040B3C4                 sub     esp, 17Ch
.text:0040B3CA                 mov     ebx, [esp+18Ch+Str]
.text:0040B3D1                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:0040B3D8                 call    GetModuleHandleA
.text:0040B3DD                 sub     esp, 4
.text:0040B3E0                 mov     [esp+18Ch+hModule], eax
.text:0040B3E4                 mov     edx, [esp+18Ch+hModule]
.text:0040B3E8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040B3F0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040B3F3                 call    GetProcAddress
.text:0040B3F8                 sub     esp, 8
.text:0040B3FB                 mov     ebp, eax
.text:0040B3FD                 mov     eax, [esp+18Ch+hNamedPipe]
.text:0040B404                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040B407                 call    GetFileAttributesA
.text:0040B40C                 sub     esp, 4
.text:0040B40F                 mov     [esp+18Ch+var_164], eax
.text:0040B413                 xor     eax, eax
.text:0040B415                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040B41A                 jz      short loc_40B471
.text:0040B41C                 cld
.text:0040B41D                 mov     ecx, 50h ; 'P'
.text:0040B422                 lea     esi, [esp+18Ch+FindFileData]
.text:0040B426                 mov     edi, esi
.text:0040B428                 test    ebp, ebp
.text:0040B42A                 rep stosd
.text:0040B42C                 mov     [esp+18Ch+var_170], 0
.text:0040B434                 jz      short loc_40B455
.text:0040B436                 mov     [esp+18Ch+var_184], ebx
.text:0040B43A                 mov     ecx, [esp+18Ch+hNamedPipe]
.text:0040B441                 mov     [esp+18Ch+lpProcName], 0
.text:0040B449                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040B44C                 call    ebp
.text:0040B44E                 sub     esp, 0Ch
.text:0040B451                 mov     [esp+198h+var_17C], eax
.text:0040B455
.text:0040B455 loc_40B455:                             ; CODE XREF: sub_40B2D0+164↑j
.text:0040B455                 mov     eax, [esp+198h+var_17C]
.text:0040B459                 test    eax, eax
.text:0040B45B                 jz      short loc_40B480
.text:0040B45D
.text:0040B45D loc_40B45D:                             ; CODE XREF: sub_40B2D0+221↓j
.text:0040B45D                                         ; sub_40B2D0+23B↓j
.text:0040B45D                 mov     ebx, [esp+198h+var_16C]
.text:0040B461                 mov     [esp+198h+hLibModule], ebx ; hLibModule
.text:0040B464                 call    FreeLibrary
.text:0040B469                 sub     esp, 4
.text:0040B46C                 mov     eax, 1
.text:0040B471
.text:0040B471 loc_40B471:                             ; CODE XREF: sub_40B2D0+14A↑j
.text:0040B471                 add     esp, 17Ch
.text:0040B477                 pop     ebx
.text:0040B478                 pop     esi
.text:0040B479                 pop     edi
.text:0040B47A                 pop     ebp
.text:0040B47B                 retn
.text:0040B47B ; ---------------------------------------------------------------------------
.text:0040B47C                 align 10h
.text:0040B480
.text:0040B480 loc_40B480:                             ; CODE XREF: sub_40B2D0+18B↑j
.text:0040B480                 mov     [esp+198h+lpFindFileData], esi ; lpFindFileData
.text:0040B484                 mov     edx, [esp+198h+lpFileName]
.text:0040B48B                 mov     [esp+198h+hLibModule], edx ; lpFileName
.text:0040B48E                 call    FindFirstFileA
.text:0040B493                 sub     esp, 8
.text:0040B496                 xor     ecx, ecx
.text:0040B498                 cmp     eax, 0FFFFFFFFh
.text:0040B49B                 setnz   cl
.text:0040B49E                 mov     edi, [esp+198h+var_168]
.text:0040B4A2                 mov     [ebx], edi
.text:0040B4A4                 mov     esi, [esp+198h+hModule]
.text:0040B4A8                 mov     [esp+198h+var_17C], ecx
.text:0040B4AC                 mov     ecx, [esp+198h+var_164]
.text:0040B4B0                 mov     [ebx+8], esi
.text:0040B4B3                 mov     [ebx+4], ecx
.text:0040B4B6                 mov     ebp, [esp+198h+FindFileData.dwFileAttributes]
.text:0040B4BA                 mov     edi, [esp+198h+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040B4BE                 mov     [ebx+0Ch], ebp
.text:0040B4C1                 mov     [ebx+10h], edi
.text:0040B4C4                 mov     esi, [esp+198h+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040B4C8                 mov     ecx, [esp+198h+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040B4CC                 mov     [ebx+18h], esi
.text:0040B4CF                 mov     [ebx+14h], ecx
.text:0040B4D2                 mov     ebp, [esp+198h+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040B4D6                 mov     [ebx+1Ch], ebp
.text:0040B4D9                 mov     edi, [esp+198h+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040B4DD                 mov     [ebx+20h], edi
.text:0040B4E0                 mov     [esp+198h+hLibModule], eax ; hFindFile
.text:0040B4E3                 call    FindClose
.text:0040B4E8                 sub     esp, 4
.text:0040B4EB                 mov     esi, [esp+198h+var_17C]
.text:0040B4EF                 test    esi, esi
.text:0040B4F1                 jnz     loc_40B45D
.text:0040B4F7                 cld
.text:0040B4F8                 mov     eax, [esp+198h+var_17C]
.text:0040B4FC                 mov     ecx, 9
.text:0040B501                 mov     edi, ebx
.text:0040B503                 rep stosd
.text:0040B505                 mov     ebp, [esp+198h+var_170]
.text:0040B509                 mov     [ebx], ebp
.text:0040B50B                 jmp     loc_40B45D
.text:0040B50B ; ---------------------------------------------------------------------------
.text:0040B510 ; const CHAR aFindfirstfilee[]
.text:0040B510 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40B2D0+283↓o
.text:0040B521 ; ---------------------------------------------------------------------------
.text:0040B521
.text:0040B521 loc_40B521:                             ; DATA XREF: sub_40B2D0:loc_40B5BD↓o
.text:0040B521                 pop     esp
.text:0040B522                 sub     al, [eax]
.text:0040B524                 lea     esi, [esi+0]
.text:0040B52A                 lea     edi, [edi+0]
.text:0040B530
.text:0040B530 loc_40B530:                             ; CODE XREF: .text:0040C663↓p
.text:0040B530                                         ; sub_40C960+3FA↓p ...
.text:0040B530                 push    ebp
.text:0040B531                 push    edi
.text:0040B532                 xor     edi, edi
.text:0040B534                 push    esi
.text:0040B535                 push    ebx
.text:0040B536                 sub     esp, 17Ch
.text:0040B53C                 mov     [esp+188h+lpProcName], offset ModuleName ; "KERNEL32.DLL"
.text:0040B543                 call    LoadLibraryA
.text:0040B548                 sub     esp, 4
.text:0040B54B                 mov     [esp+188h+FindFileData.dwFileAttributes], eax
.text:0040B54F                 mov     ecx, [esp+188h+FindFileData.dwFileAttributes]
.text:0040B553                 mov     [esp+188h+var_184], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040B55B                 mov     [esp+188h+lpProcName], ecx ; hModule
.text:0040B55E                 call    GetProcAddress
.text:0040B563                 sub     esp, 8
.text:0040B566                 mov     edx, [esp+188h+Str]
.text:0040B56D                 mov     [esp+188h+hModule], eax
.text:0040B571                 mov     [esp+188h+lpProcName], edx ; Str
.text:0040B574                 call    strlen
.text:0040B579                 lea     edx, [eax+5]
.text:0040B57C                 mov     ebx, eax
.text:0040B57E                 mov     [esp+188h+lpProcName], edx ; Size
.text:0040B581                 call    malloc
.text:0040B586                 mov     esi, eax
.text:0040B588                 test    esi, esi
.text:0040B58A                 mov     eax, 1
.text:0040B58F                 jz      loc_40B66D
.text:0040B595                 mov     [esp+188h+lpProcName], esi ; Destination
.text:0040B598                 mov     ebp, [esp+188h+Str]
.text:0040B59F                 mov     [esp+188h+var_184], ebp ; Source
.text:0040B5A3                 call    strcpy
.text:0040B5A8                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040B5AD                 cmp     al, 2Fh ; '/'
.text:0040B5AF                 jz      loc_40B69B
.text:0040B5B5                 cmp     al, 5Ch ; '\'
.text:0040B5B7                 jz      loc_40B69B
.text:0040B5BD
.text:0040B5BD loc_40B5BD:                             ; CODE XREF: sub_40B2D0+3D0↓j
.text:0040B5BD                 mov     [esp+188h+var_184], offset loc_40B521 ; Source
.text:0040B5C5                 mov     [esp+188h+lpProcName], esi ; Destination
.text:0040B5C8                 call    strcat
.text:0040B5CD                 mov     eax, [esp+188h+hModule]
.text:0040B5D1                 test    eax, eax
.text:0040B5D3                 jz      loc_40B695
.text:0040B5D9                 mov     [esp+188h+var_174], 0
.text:0040B5E1                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:0040B5E5                 mov     [esp+188h+var_178], 0
.text:0040B5ED                 mov     [esp+188h+var_17C], 1
.text:0040B5F5                 mov     [esp+188h+var_180], ebp
.text:0040B5F9                 mov     [esp+188h+var_184], 0
.text:0040B601                 mov     [esp+188h+lpProcName], esi
.text:0040B604                 call    [esp+188h+hModule]
.text:0040B608                 sub     esp, 18h
.text:0040B60B                 mov     ebx, eax
.text:0040B60D                 cmp     eax, 0FFFFFFFFh
.text:0040B610                 jz      short loc_40B678
.text:0040B612                 lea     esi, [esi+0]
.text:0040B619                 lea     edi, [edi+0]
.text:0040B620
.text:0040B620 loc_40B620:                             ; CODE XREF: sub_40B2D0+369↓j
.text:0040B620                                         ; sub_40B2D0+3C1↓j
.text:0040B620                 test    byte ptr [esp+1A0h+var_170], 10h
.text:0040B625                 jz      short loc_40B628
.text:0040B627                 inc     edi
.text:0040B628
.text:0040B628 loc_40B628:                             ; CODE XREF: sub_40B2D0+355↑j
.text:0040B628                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040B62C                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040B62F                 call    FindNextFileA
.text:0040B634                 sub     esp, 8
.text:0040B637                 test    eax, eax
.text:0040B639                 jnz     short loc_40B620
.text:0040B63B                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040B63E                 call    FindClose
.text:0040B643                 sub     esp, 4
.text:0040B646                 mov     esi, [esp+1A0h+var_174]
.text:0040B64A                 mov     [esp+1A0h+hFindFile], esi ; hLibModule
.text:0040B64D                 call    FreeLibrary
.text:0040B652                 sub     esp, 4
.text:0040B655                 mov     ebx, [esp+1A0h+var_10]
.text:0040B65C                 mov     [esp+1A0h+hFindFile], ebx ; LPCSTR
.text:0040B65F                 call    sub_40DB00
.text:0040B664                 test    eax, eax
.text:0040B666                 jz      short loc_40B66B
.text:0040B668                 add     edi, 2
.text:0040B66B
.text:0040B66B loc_40B66B:                             ; CODE XREF: sub_40B2D0+396↑j
.text:0040B66B                 mov     eax, edi
.text:0040B66D
.text:0040B66D loc_40B66D:                             ; CODE XREF: sub_40B2D0+2BF↑j
.text:0040B66D                                         ; sub_40B2D0+3C3↓j
.text:0040B66D                 add     esp, 17Ch
.text:0040B673                 pop     ebx
.text:0040B674                 pop     esi
.text:0040B675                 pop     edi
.text:0040B676                 pop     ebp
.text:0040B677                 retn
.text:0040B678 ; ---------------------------------------------------------------------------
.text:0040B678
.text:0040B678 loc_40B678:                             ; CODE XREF: sub_40B2D0+340↑j
.text:0040B678                                         ; sub_40B2D0+3C9↓j
.text:0040B678                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040B67C                 mov     [esp+1A0h+hFindFile], esi ; lpFileName
.text:0040B67F                 call    FindFirstFileA
.text:0040B684                 mov     ebx, eax
.text:0040B686                 sub     esp, 8
.text:0040B689                 cmp     ebx, 0FFFFFFFFh
.text:0040B68C                 mov     eax, 2
.text:0040B691                 jnz     short loc_40B620
.text:0040B693                 jmp     short loc_40B66D
.text:0040B695 ; ---------------------------------------------------------------------------
.text:0040B695
.text:0040B695 loc_40B695:                             ; CODE XREF: sub_40B2D0+303↑j
.text:0040B695                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:0040B699                 jmp     short loc_40B678
.text:0040B69B ; ---------------------------------------------------------------------------
.text:0040B69B
.text:0040B69B loc_40B69B:                             ; CODE XREF: sub_40B2D0+2DF↑j
.text:0040B69B                                         ; sub_40B2D0+2E7↑j
.text:0040B69B                 mov     byte ptr [ebx+esi-1], 0
.text:0040B6A0                 jmp     loc_40B5BD
.text:0040B6A0 ; ---------------------------------------------------------------------------
.text:0040B6A5                 align 10h
.text:0040B6B0
.text:0040B6B0 loc_40B6B0:                             ; CODE XREF: sub_40B2D0+52↑j
.text:0040B6B0                                         ; sub_410C40-3E19↓p
.text:0040B6B0                 push    ebp
.text:0040B6B1                 mov     eax, 0FFFFFFFFh
.text:0040B6B6                 push    edi
.text:0040B6B7                 push    esi
.text:0040B6B8                 push    ebx
.text:0040B6B9                 sub     esp, 0DCh
.text:0040B6BF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040B6C6                 mov     ebp, [esp+0ECh+Str]
.text:0040B6CD                 cmp     esi, 0FFFFFFFFh
.text:0040B6D0                 jz      loc_40BA51
.text:0040B6D6                 cld
.text:0040B6D7                 xor     eax, eax
.text:0040B6D9                 lea     ebx, [esp+0ECh+FindFileData.cFileName+0D4h]
.text:0040B6E0                 mov     ecx, 0Dh
.text:0040B6E5                 mov     edi, ebx
.text:0040B6E7                 rep stosd
.text:0040B6E9                 mov     dword ptr [ebp+18h], 1
.text:0040B6F0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B6F3                 call    GetFileType
.text:0040B6F8                 sub     esp, 4
.text:0040B6FB                 xor     edx, edx
.text:0040B6FD                 cmp     eax, 2
.text:0040B700                 jz      loc_40BB30
.text:0040B706                 cmp     eax, 3
.text:0040B709                 jz      loc_40BB20
.text:0040B70F
.text:0040B70F loc_40B70F:                             ; CODE XREF: sub_40B2D0+855↓j
.text:0040B70F                                         ; sub_40B2D0+865↓j
.text:0040B70F                 or      [ebp+0], edx
.text:0040B712                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx ; lpFileInformation
.text:0040B716                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B719                 call    GetFileInformationByHandle
.text:0040B71E                 sub     esp, 8
.text:0040B721                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:0040B728                 test    ecx, ecx
.text:0040B72A                 jnz     short loc_40B760
.text:0040B72C                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B733                 test    edx, edx
.text:0040B735                 jnz     short loc_40B760
.text:0040B737                 mov     edx, [ebp+0]
.text:0040B73A                 and     edx, 0F000h
.text:0040B740                 cmp     edx, 1000h
.text:0040B746                 jz      loc_40BAB6
.text:0040B74C
.text:0040B74C loc_40B74C:                             ; CODE XREF: sub_40B2D0+839↓j
.text:0040B74C                                         ; sub_40B2D0+845↓j
.text:0040B74C                 test    ecx, ecx
.text:0040B74E                 jnz     short loc_40B760
.text:0040B750                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B757                 test    edx, edx
.text:0040B759                 jz      loc_40BA94
.text:0040B75F                 nop
.text:0040B760
.text:0040B760 loc_40B760:                             ; CODE XREF: sub_40B2D0+45A↑j
.text:0040B760                                         ; sub_40B2D0+465↑j ...
.text:0040B760                 cld
.text:0040B761                 mov     esi, ebx
.text:0040B763                 mov     dword ptr [ebp+14h], 0
.text:0040B76A                 lea     edi, [esp+0ECh+FindFileData.cFileName+94h]
.text:0040B76E                 mov     ecx, 0Dh
.text:0040B773                 rep movsd
.text:0040B775                 xor     ebx, ebx
.text:0040B777                 xor     edi, edi
.text:0040B779                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0C4h]
.text:0040B780                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0C0h]
.text:0040B784                 or      edx, ebx
.text:0040B786                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+94h]
.text:0040B78A                 mov     [ebp+8], edx
.text:0040B78D                 or      edi, esi
.text:0040B78F                 xor     edx, edx
.text:0040B791                 mov     [ebp+0Ch], edi
.text:0040B794                 test    bl, 10h
.text:0040B797                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0B0h]
.text:0040B79B                 setz    dl
.text:0040B79E                 mov     [ebp+10h], esi
.text:0040B7A1                 dec     edx
.text:0040B7A2                 and     edx, 0FFFFC000h
.text:0040B7A8                 add     edx, 8000h
.text:0040B7AE                 or      edx, 124h
.text:0040B7B4                 test    bl, 1
.text:0040B7B7                 movzx   eax, dx
.text:0040B7BA                 jnz     short loc_40B7C1
.text:0040B7BC                 or      eax, 92h
.text:0040B7C1
.text:0040B7C1 loc_40B7C1:                             ; CODE XREF: sub_40B2D0+4EA↑j
.text:0040B7C1                 or      [ebp+0], eax
.text:0040B7C4                 xor     edx, edx
.text:0040B7C6                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+0B4h]
.text:0040B7CA                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0B8h]
.text:0040B7CE                 mov     eax, edx
.text:0040B7D0                 xor     esi, esi
.text:0040B7D2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0A4h]
.text:0040B7D6                 mov     edi, ebx
.text:0040B7D8                 or      eax, edi
.text:0040B7DA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+88h], eax
.text:0040B7DE                 mov     ebx, ecx
.text:0040B7E0                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+0BCh]
.text:0040B7E4                 or      ebx, esi
.text:0040B7E6                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B7EA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+84h], ebx
.text:0040B7EE                 xor     ebx, ebx
.text:0040B7F0                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B7F4                 mov     [ebp+34h], esi
.text:0040B7F7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A0h]
.text:0040B7FB                 mov     [ebp+18h], edi
.text:0040B7FE                 xor     edi, edi
.text:0040B800                 or      esi, ebx
.text:0040B802                 mov     [ebp+30h], ecx
.text:0040B805                 or      edi, edx
.text:0040B807                 mov     edx, esi
.text:0040B809                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B811                 sub     edx, 0D53E8000h
.text:0040B817                 mov     ebx, edi
.text:0040B819                 sbb     ebx, 19DB1DEh
.text:0040B81F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:0040B823                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B82B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B82E                 call    sub_4128D0
.text:0040B833                 mov     ecx, eax
.text:0040B835                 shr     eax, 1Fh
.text:0040B838                 dec     eax
.text:0040B839                 and     ecx, eax
.text:0040B83B                 mov     [ebp+38h], ecx
.text:0040B83E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B841                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B845                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B84D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B855                 call    sub_412750
.text:0040B85A                 lea     ebx, [eax+eax*4]
.text:0040B85D                 xor     ecx, ecx
.text:0040B85F                 lea     esi, [ebx+ebx*4]
.text:0040B862                 shl     esi, 2
.text:0040B865                 mov     edi, esi
.text:0040B867                 shr     edi, 1Fh
.text:0040B86A                 dec     edi
.text:0040B86B                 and     edi, esi
.text:0040B86D                 mov     [ebp+3Ch], edi
.text:0040B870                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+98h]
.text:0040B874                 xor     edi, edi
.text:0040B876                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B87E                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+9Ch]
.text:0040B882                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B88A                 or      esi, ecx
.text:0040B88C                 or      edi, edx
.text:0040B88E                 mov     edx, esi
.text:0040B890                 mov     ecx, edi
.text:0040B892                 sub     edx, 0D53E8000h
.text:0040B898                 sbb     ecx, 19DB1DEh
.text:0040B89E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:0040B8A2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B8A5                 call    sub_4128D0
.text:0040B8AA                 mov     ebx, eax
.text:0040B8AC                 shr     eax, 1Fh
.text:0040B8AF                 dec     eax
.text:0040B8B0                 and     ebx, eax
.text:0040B8B2                 mov     [ebp+48h], ebx
.text:0040B8B5                 xor     ebx, ebx
.text:0040B8B7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B8BA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B8BE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B8C6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B8CE                 call    sub_412750
.text:0040B8D3                 lea     ecx, [eax+eax*4]
.text:0040B8D6                 lea     esi, [ecx+ecx*4]
.text:0040B8D9                 shl     esi, 2
.text:0040B8DC                 mov     edi, esi
.text:0040B8DE                 shr     edi, 1Fh
.text:0040B8E1                 dec     edi
.text:0040B8E2                 and     edi, esi
.text:0040B8E4                 mov     [ebp+4Ch], edi
.text:0040B8E7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A8h]
.text:0040B8EB                 xor     edi, edi
.text:0040B8ED                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B8F5                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0ACh]
.text:0040B8F9                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B901                 or      esi, ebx
.text:0040B903                 or      edi, edx
.text:0040B905                 mov     edx, esi
.text:0040B907                 mov     ebx, edi
.text:0040B909                 sub     edx, 0D53E8000h
.text:0040B90F                 sbb     ebx, 19DB1DEh
.text:0040B915                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:0040B919                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B91C                 call    sub_4128D0
.text:0040B921                 mov     ecx, eax
.text:0040B923                 shr     eax, 1Fh
.text:0040B926                 dec     eax
.text:0040B927                 and     ecx, eax
.text:0040B929                 mov     [ebp+40h], ecx
.text:0040B92C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B930                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B938                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B940                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B943                 call    sub_412750
.text:0040B948                 mov     dword ptr [ebp+50h], 200h
.text:0040B94F                 lea     ebx, [eax+eax*4]
.text:0040B952                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B956                 lea     edx, [ebx+ebx*4]
.text:0040B959                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B95D                 shl     edx, 2
.text:0040B960                 mov     ecx, edx
.text:0040B962                 shr     ecx, 1Fh
.text:0040B965                 dec     ecx
.text:0040B966                 and     ecx, edx
.text:0040B968                 test    edi, edi
.text:0040B96A                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B96E                 mov     [ebp+44h], ecx
.text:0040B971                 js      loc_40BA87
.text:0040B977
.text:0040B977 loc_40B977:                             ; CODE XREF: sub_40B2D0+7BF↓j
.text:0040B977                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B97B                 xor     esi, esi
.text:0040B97D                 mov     ecx, eax
.text:0040B97F                 shrd    ecx, edx, 9
.text:0040B983                 mov     ebx, edx
.text:0040B985                 mov     eax, esi
.text:0040B987                 and     edi, 1FFh
.text:0040B98D                 sar     ebx, 9
.text:0040B990                 or      eax, edi
.text:0040B992                 jz      short loc_40B99A
.text:0040B994                 add     ecx, 1
.text:0040B997                 adc     ebx, 0
.text:0040B99A
.text:0040B99A loc_40B99A:                             ; CODE XREF: sub_40B2D0+6C2↑j
.text:0040B99A                 mov     [ebp+5Ch], ebx
.text:0040B99D                 mov     esi, dword_414060
.text:0040B9A3                 xor     edi, edi
.text:0040B9A5                 mov     [ebp+58h], ecx
.text:0040B9A8                 mov     ebx, dword_414060
.text:0040B9AE                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B9B2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B9B6                 mov     [ebp+50h], ebx
.text:0040B9B9                 shr     ebx, 9
.text:0040B9BC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:0040B9C0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:0040B9C4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:0040B9C8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B9CB                 call    sub_4128D0
.text:0040B9D0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:0040B9D4                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B9D8                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B9DC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+74h], ebx
.text:0040B9E0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+7Ch], eax
.text:0040B9E4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+80h], edx
.text:0040B9E8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+78h], 0
.text:0040B9F0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:0040B9F4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], ecx
.text:0040B9F7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B9FB                 call    sub_412750
.text:0040BA00                 mov     ebx, edx
.text:0040BA02                 or      ebx, eax
.text:0040BA04                 jz      short loc_40BA60
.text:0040BA06                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040BA0A                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040BA0E                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040BA12                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], edi
.text:0040BA16                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040BA1A                 add     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], 1
.text:0040BA1F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+70h], esi
.text:0040BA23                 adc     dword ptr [esp+0ECh+FindFileData.cFileName+70h], 0
.text:0040BA28                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040BA2C                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+70h]
.text:0040BA30                 mov     ebx, edx
.text:0040BA32                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040BA36                 mov     esi, eax
.text:0040BA38                 mov     eax, ebx
.text:0040BA3A                 imul    ecx, edx
.text:0040BA3D                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040BA41                 imul    edx, edi
.text:0040BA44                 add     eax, ecx
.text:0040BA46                 lea     edi, [edx+eax]
.text:0040BA49
.text:0040BA49 loc_40BA49:                             ; CODE XREF: sub_40B2D0+7B5↓j
.text:0040BA49                 mov     [ebp+58h], esi
.text:0040BA4C                 xor     eax, eax
.text:0040BA4E                 mov     [ebp+5Ch], edi
.text:0040BA51
.text:0040BA51 loc_40BA51:                             ; CODE XREF: sub_40B2D0+400↑j
.text:0040BA51                 add     esp, 0DCh
.text:0040BA57                 pop     ebx
.text:0040BA58                 pop     esi
.text:0040BA59                 pop     edi
.text:0040BA5A                 pop     ebp
.text:0040BA5B                 retn
.text:0040BA5B ; ---------------------------------------------------------------------------
.text:0040BA5C                 align 10h
.text:0040BA60
.text:0040BA60 loc_40BA60:                             ; CODE XREF: sub_40B2D0+734↑j
.text:0040BA60                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040BA64                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040BA68                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040BA6C                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040BA70                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040BA74                 imul    ebx, edi
.text:0040BA77                 mov     esi, eax
.text:0040BA79                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040BA7D                 add     edx, ebx
.text:0040BA7F                 imul    ecx, eax
.text:0040BA82                 lea     edi, [ecx+edx]
.text:0040BA85                 jmp     short loc_40BA49
.text:0040BA87 ; ---------------------------------------------------------------------------
.text:0040BA87
.text:0040BA87 loc_40BA87:                             ; CODE XREF: sub_40B2D0+6A1↑j
.text:0040BA87                 add     eax, 1FFh
.text:0040BA8C                 adc     edx, 0
.text:0040BA8F                 jmp     loc_40B977
.text:0040BA94 ; ---------------------------------------------------------------------------
.text:0040BA94
.text:0040BA94 loc_40BA94:                             ; CODE XREF: sub_40B2D0+489↑j
.text:0040BA94                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040BA97                 lea     ecx, [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040BA9E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx ; lpFileSizeHigh
.text:0040BAA2                 call    GetFileSize
.text:0040BAA7                 sub     esp, 8
.text:0040BAAA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], eax
.text:0040BAB1                 jmp     loc_40B760
.text:0040BAB6 ; ---------------------------------------------------------------------------
.text:0040BAB6
.text:0040BAB6 loc_40BAB6:                             ; CODE XREF: sub_40B2D0+476↑j
.text:0040BAB6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+90h], 0
.text:0040BABE                 lea     ecx, [esp+0ECh+FindFileData.cFileName+90h]
.text:0040BAC2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+58h], 0 ; lpBytesLeftThisMessage
.text:0040BACA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+54h], ecx ; lpTotalBytesAvail
.text:0040BACE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0 ; lpBytesRead
.text:0040BAD6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 0 ; nBufferSize
.text:0040BADE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], 0 ; lpBuffer
.text:0040BAE6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hNamedPipe
.text:0040BAE9                 call    PeekNamedPipe
.text:0040BAEE                 sub     esp, 18h
.text:0040BAF1                 test    eax, eax
.text:0040BAF3                 jz      short loc_40BB0E
.text:0040BAF5                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+90h]
.text:0040BAF9                 xor     eax, eax
.text:0040BAFB                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F4h], eax
.text:0040BB02                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], ecx
.text:0040BB09                 jmp     loc_40B74C
.text:0040BB0E ; ---------------------------------------------------------------------------
.text:0040BB0E
.text:0040BB0E loc_40BB0E:                             ; CODE XREF: sub_40B2D0+823↑j
.text:0040BB0E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:0040BB15                 jmp     loc_40B74C
.text:0040BB15 ; ---------------------------------------------------------------------------
.text:0040BB1A                 align 10h
.text:0040BB20
.text:0040BB20 loc_40BB20:                             ; CODE XREF: sub_40B2D0+439↑j
.text:0040BB20                 mov     edx, 1000h
.text:0040BB25                 jmp     loc_40B70F
.text:0040BB25 ; ---------------------------------------------------------------------------
.text:0040BB2A                 align 10h
.text:0040BB30
.text:0040BB30 loc_40BB30:                             ; CODE XREF: sub_40B2D0+430↑j
.text:0040BB30                 mov     edx, 2000h
.text:0040BB35                 jmp     loc_40B70F
.text:0040BB35 sub_40B2D0      endp ; sp-analysis failed
.text:0040BB35
.text:0040BB35 ; ---------------------------------------------------------------------------
.text:0040BB3A aLnk            db '.lnk',0             ; DATA XREF: sub_40BB80+E0↓o
.text:0040BB3A                                         ; .text:0040C22A↓o ...
.text:0040BB3F ; const CHAR aKernel32[]
.text:0040BB3F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40BB80+12D↓o
.text:0040BB3F                                         ; .text:0040C8DB↓o
.text:0040BB48 ; const CHAR aGetcompressedf[]
.text:0040BB48 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040BB48                                         ; DATA XREF: sub_40BB80+13E↓o
.text:0040BB48                                         ; .text:0040C8EC↓o
.text:0040BB5F ; const CHAR aGetbinarytypea[]
.text:0040BB5F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40BB80+333↓o
.text:0040BB5F                                         ; .text:0040C286↓o ...
.text:0040BB6E ; const char aPathext[]
.text:0040BB6E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40BB80:loc_40BF67↓o
.text:0040BB6E                                         ; .text:loc_40C330↓o ...
.text:0040BB76                 align 10h
.text:0040BB80
.text:0040BB80 ; =============== S U B R O U T I N E =======================================
.text:0040BB80
.text:0040BB80
.text:0040BB80 ; int __cdecl sub_40BB80(char *String1, int)
.text:0040BB80 sub_40BB80      proc near               ; CODE XREF: sub_40C960+3CD↓p
.text:0040BB80                                         ; sub_410C40-3DFB↓p
.text:0040BB80
.text:0040BB80 Str             = dword ptr -6Ch
.text:0040BB80 lpProcName      = dword ptr -68h
.text:0040BB80 var_64          = dword ptr -64h
.text:0040BB80 var_60          = dword ptr -60h
.text:0040BB80 var_5C          = dword ptr -5Ch
.text:0040BB80 var_4C          = dword ptr -4Ch
.text:0040BB80 var_48          = dword ptr -48h
.text:0040BB80 var_44          = dword ptr -44h
.text:0040BB80 var_40          = dword ptr -40h
.text:0040BB80 var_3C          = dword ptr -3Ch
.text:0040BB80 var_38          = dword ptr -38h
.text:0040BB80 lpRootPathName  = dword ptr -30h
.text:0040BB80 var_2C          = byte ptr -2Ch
.text:0040BB80 var_28          = dword ptr -28h
.text:0040BB80 var_24          = dword ptr -24h
.text:0040BB80 var_20          = dword ptr -20h
.text:0040BB80 var_1C          = dword ptr -1Ch
.text:0040BB80 var_18          = byte ptr -18h
.text:0040BB80 String1         = dword ptr  4
.text:0040BB80 arg_4           = dword ptr  8
.text:0040BB80
.text:0040BB80                 push    ebp
.text:0040BB81                 push    edi
.text:0040BB82                 push    esi
.text:0040BB83                 push    ebx
.text:0040BB84                 sub     esp, 5Ch
.text:0040BB87                 mov     edx, [esp+6Ch+String1]
.text:0040BB8B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040BB8E                 call    sub_40D730
.text:0040BB93                 mov     [esp+6Ch+Str], eax
.text:0040BB96                 call    sub_40D300
.text:0040BB9B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040BB9F                 test    eax, eax
.text:0040BBA1                 jz      loc_40BDD3
.text:0040BBA7                 mov     [esp+6Ch+Str], eax ; Str
.text:0040BBAA                 call    strlen
.text:0040BBAF                 mov     edx, [esp+6Ch+arg_4]
.text:0040BBB3                 mov     ebx, eax
.text:0040BBB5                 mov     esi, [edx+0Ch]
.text:0040BBB8                 mov     edi, [edx+8]
.text:0040BBBB                 mov     eax, esi
.text:0040BBBD                 or      eax, edi
.text:0040BBBF                 jz      loc_40BFE0
.text:0040BBC5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040BBC9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040BBCC                 call    GetDriveTypeA
.text:0040BBD1                 sub     esp, 4
.text:0040BBD4                 cmp     eax, 4
.text:0040BBD7                 jz      loc_40BFE0
.text:0040BBDD
.text:0040BBDD loc_40BBDD:                             ; CODE XREF: sub_40BB80+48A↓j
.text:0040BBDD                                         ; sub_40BB80+4B2↓j
.text:0040BBDD                 mov     edx, [esp+6Ch+arg_4]
.text:0040BBE1                 mov     esi, [edx+14h]
.text:0040BBE4                 mov     edi, [edx+10h]
.text:0040BBE7                 mov     ecx, esi
.text:0040BBE9                 or      ecx, edi
.text:0040BBEB                 jnz     short loc_40BC15
.text:0040BBED                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040BBF1                 xor     esi, esi
.text:0040BBF3                 xor     edi, edi
.text:0040BBF5                 test    ebp, ebp
.text:0040BBF7                 jz      short loc_40BC07
.text:0040BBF9                 movzx   ebx, byte ptr [ebp+0]
.text:0040BBFD                 test    bl, bl
.text:0040BBFF                 mov     cl, bl
.text:0040BC01                 jnz     loc_40BF91
.text:0040BC07
.text:0040BC07 loc_40BC07:                             ; CODE XREF: sub_40BB80+77↑j
.text:0040BC07                 xor     eax, eax
.text:0040BC09                 xor     edx, edx
.text:0040BC0B
.text:0040BC0B loc_40BC0B:                             ; CODE XREF: sub_40BB80+458↓j
.text:0040BC0B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040BC0F                 mov     [ebp+10h], eax
.text:0040BC12                 mov     [ebp+14h], edx
.text:0040BC15
.text:0040BC15 loc_40BC15:                             ; CODE XREF: sub_40BB80+6B↑j
.text:0040BC15                 mov     edi, [esp+6Ch+String1]
.text:0040BC19                 xor     ebx, ebx
.text:0040BC1B                 test    edi, edi
.text:0040BC1D                 jz      loc_40BE93
.text:0040BC23                 mov     esi, [esp+6Ch+String1]
.text:0040BC27                 cmp     byte ptr [esi], 0
.text:0040BC2A                 jnz     loc_40BEA0
.text:0040BC30
.text:0040BC30 loc_40BC30:                             ; CODE XREF: sub_40BB80+38C↓j
.text:0040BC30                                         ; sub_40BB80+397↓j
.text:0040BC30                 mov     ebp, [esp+6Ch+String1]
.text:0040BC34                 test    ebp, ebp
.text:0040BC36                 jz      loc_40BE93
.text:0040BC3C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040BC44                 mov     edi, [esp+6Ch+String1]
.text:0040BC48                 mov     [esp+6Ch+Str], edi ; Str
.text:0040BC4B                 call    strrchr
.text:0040BC50                 test    eax, eax
.text:0040BC52                 jz      loc_40BE93
.text:0040BC58                 cld
.text:0040BC59                 mov     ecx, 5
.text:0040BC5E                 mov     esi, eax
.text:0040BC60                 mov     edi, offset aLnk ; ".lnk"
.text:0040BC65                 repe cmpsb
.text:0040BC67                 setz    cl
.text:0040BC6A                 movzx   eax, cl
.text:0040BC6D                 lea     esi, [esi+0]
.text:0040BC70
.text:0040BC70 loc_40BC70:                             ; CODE XREF: sub_40BB80+315↓j
.text:0040BC70                 test    eax, eax
.text:0040BC72                 jz      short loc_40BC7A
.text:0040BC74                 or      ebx, 0A000h
.text:0040BC7A
.text:0040BC7A loc_40BC7A:                             ; CODE XREF: sub_40BB80+F2↑j
.text:0040BC7A                 mov     esi, [esp+6Ch+arg_4]
.text:0040BC7E                 xor     ecx, ecx
.text:0040BC80                 mov     edi, ds:dword_415350
.text:0040BC86                 or      [esi], ebx
.text:0040BC88                 mov     ebx, [esi+14h]
.text:0040BC8B                 mov     ebp, [esi+10h]
.text:0040BC8E                 mov     eax, ebx
.text:0040BC90                 xor     eax, ecx
.text:0040BC92                 xor     ebp, edi
.text:0040BC94                 or      eax, ebp
.text:0040BC96                 jnz     loc_40BE20
.text:0040BC9C
.text:0040BC9C loc_40BC9C:                             ; CODE XREF: sub_40BB80+30E↓j
.text:0040BC9C                 mov     ecx, dword_414060
.text:0040BCA2                 xor     esi, esi
.text:0040BCA4                 xor     edi, edi
.text:0040BCA6                 mov     edx, [esp+6Ch+arg_4]
.text:0040BCAA                 mov     [edx+50h], ecx
.text:0040BCAD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040BCB4                 call    LoadLibraryA
.text:0040BCB9                 sub     esp, 4
.text:0040BCBC                 mov     ebp, eax
.text:0040BCBE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040BCC6                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040BCC9                 call    GetProcAddress
.text:0040BCCE                 sub     esp, 8
.text:0040BCD1                 test    eax, eax
.text:0040BCD3                 jz      short loc_40BD08
.text:0040BCD5                 mov     ebx, [esp+6Ch+String1]
.text:0040BCD9                 lea     esi, [esp+6Ch+var_2C]
.text:0040BCDD                 mov     [esp+6Ch+lpProcName], esi
.text:0040BCE1                 mov     [esp+6Ch+Str], ebx
.text:0040BCE4                 call    eax
.text:0040BCE6                 sub     esp, 8
.text:0040BCE9                 mov     ebx, eax
.text:0040BCEB                 cmp     eax, 0FFFFFFFFh
.text:0040BCEE                 jz      loc_40BE09
.text:0040BCF4
.text:0040BCF4 loc_40BCF4:                             ; CODE XREF: sub_40BB80+29A↓j
.text:0040BCF4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040BCF8                 mov     ecx, ebx
.text:0040BCFA                 xor     edi, edi
.text:0040BCFC                 xor     ebx, ebx
.text:0040BCFE                 mov     edx, esi
.text:0040BD00                 mov     esi, ecx
.text:0040BD02                 or      esi, edi
.text:0040BD04                 mov     edi, ebx
.text:0040BD06                 or      edi, edx
.text:0040BD08
.text:0040BD08 loc_40BD08:                             ; CODE XREF: sub_40BB80+153↑j
.text:0040BD08                                         ; sub_40BB80+294↓j
.text:0040BD08                 test    ebp, ebp
.text:0040BD0A                 jz      short loc_40BD17
.text:0040BD0C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040BD0F                 call    FreeLibrary
.text:0040BD14                 sub     esp, 4
.text:0040BD17
.text:0040BD17 loc_40BD17:                             ; CODE XREF: sub_40BB80+18A↑j
.text:0040BD17                 mov     ebp, edi
.text:0040BD19                 mov     edx, ebp
.text:0040BD1B                 mov     edi, esi
.text:0040BD1D                 or      edx, esi
.text:0040BD1F                 jnz     short loc_40BD2B
.text:0040BD21                 mov     eax, [esp+6Ch+arg_4]
.text:0040BD25                 mov     edi, [eax+30h]
.text:0040BD28                 mov     ebp, [eax+34h]
.text:0040BD2B
.text:0040BD2B loc_40BD2B:                             ; CODE XREF: sub_40BB80+19F↑j
.text:0040BD2B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040BD2F                 mov     ebx, dword_414060
.text:0040BD35                 xor     esi, esi
.text:0040BD37                 mov     [esp+6Ch+var_60], esi
.text:0040BD3B                 mov     [esp+6Ch+Str], edi
.text:0040BD3E                 mov     [esp+6Ch+var_64], ebx
.text:0040BD42                 call    sub_4128D0
.text:0040BD47                 mov     [esp+6Ch+var_3C], eax
.text:0040BD4B                 mov     ecx, dword_414060
.text:0040BD51                 mov     [esp+6Ch+lpProcName], ebp
.text:0040BD55                 mov     [esp+6Ch+var_38], edx
.text:0040BD59                 shr     ecx, 9
.text:0040BD5C                 mov     [esp+6Ch+var_44], ecx
.text:0040BD60                 mov     [esp+6Ch+var_40], 0
.text:0040BD68                 mov     [esp+6Ch+var_64], ebx
.text:0040BD6C                 mov     [esp+6Ch+var_60], esi
.text:0040BD70                 mov     [esp+6Ch+Str], edi
.text:0040BD73                 call    sub_412750
.text:0040BD78                 mov     ebp, edx
.text:0040BD7A                 or      ebp, eax
.text:0040BD7C                 jz      short loc_40BDE0
.text:0040BD7E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040BD82                 mov     esi, [esp+6Ch+var_38]
.text:0040BD86                 mov     eax, [esp+6Ch+var_44]
.text:0040BD8A                 mov     [esp+6Ch+var_4C], ebp
.text:0040BD8E                 mov     ecx, [esp+6Ch+var_40]
.text:0040BD92                 mov     ebx, [esp+6Ch+var_44]
.text:0040BD96                 add     [esp+6Ch+var_4C], 1
.text:0040BD9B                 mov     [esp+6Ch+var_48], esi
.text:0040BD9F                 mov     edi, [esp+6Ch+var_4C]
.text:0040BDA3                 adc     [esp+6Ch+var_48], 0
.text:0040BDA8                 mul     [esp+6Ch+var_4C]
.text:0040BDAC                 imul    ecx, edi
.text:0040BDAF                 mov     esi, eax
.text:0040BDB1                 mov     eax, [esp+6Ch+var_48]
.text:0040BDB5                 add     edx, ecx
.text:0040BDB7                 imul    ebx, eax
.text:0040BDBA                 lea     edi, [ebx+edx]
.text:0040BDBD
.text:0040BDBD loc_40BDBD:                             ; CODE XREF: sub_40BB80+287↓j
.text:0040BDBD                 mov     ebx, [esp+6Ch+arg_4]
.text:0040BDC1                 mov     [ebx+58h], esi
.text:0040BDC4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040BDC8                 mov     [ebx+5Ch], edi
.text:0040BDCB                 mov     [esp+6Ch+Str], esi ; Block
.text:0040BDCE                 call    free
.text:0040BDD3
.text:0040BDD3 loc_40BDD3:                             ; CODE XREF: sub_40BB80+21↑j
.text:0040BDD3                 add     esp, 5Ch
.text:0040BDD6                 xor     eax, eax
.text:0040BDD8                 pop     ebx
.text:0040BDD9                 pop     esi
.text:0040BDDA                 pop     edi
.text:0040BDDB                 pop     ebp
.text:0040BDDC                 retn
.text:0040BDDC ; ---------------------------------------------------------------------------
.text:0040BDDD                 align 10h
.text:0040BDE0
.text:0040BDE0 loc_40BDE0:                             ; CODE XREF: sub_40BB80+1FC↑j
.text:0040BDE0                 mov     eax, [esp+6Ch+var_3C]
.text:0040BDE4                 mov     edi, [esp+6Ch+var_40]
.text:0040BDE8                 mov     ecx, [esp+6Ch+var_3C]
.text:0040BDEC                 mul     [esp+6Ch+var_44]
.text:0040BDF0                 mov     ebx, [esp+6Ch+var_44]
.text:0040BDF4                 imul    ecx, edi
.text:0040BDF7                 mov     ebp, edx
.text:0040BDF9                 mov     esi, eax
.text:0040BDFB                 mov     edx, [esp+6Ch+var_38]
.text:0040BDFF                 add     ebp, ecx
.text:0040BE01                 imul    ebx, edx
.text:0040BE04                 lea     edi, [ebx+ebp]
.text:0040BE07                 jmp     short loc_40BDBD
.text:0040BE09 ; ---------------------------------------------------------------------------
.text:0040BE09
.text:0040BE09 loc_40BE09:                             ; CODE XREF: sub_40BB80+16E↑j
.text:0040BE09                 call    GetLastError
.text:0040BE0E                 xor     esi, esi
.text:0040BE10                 xor     edi, edi
.text:0040BE12                 test    eax, eax
.text:0040BE14                 jnz     loc_40BD08
.text:0040BE1A                 jmp     loc_40BCF4
.text:0040BE1A ; ---------------------------------------------------------------------------
.text:0040BE1F                 align 10h
.text:0040BE20
.text:0040BE20 loc_40BE20:                             ; CODE XREF: sub_40BB80+116↑j
.text:0040BE20                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040BE24                 lea     ecx, [esp+6Ch+var_20]
.text:0040BE28                 lea     ebx, [esp+6Ch+var_1C]
.text:0040BE2C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040BE30                 lea     edi, [esp+6Ch+var_24]
.text:0040BE34                 lea     ebp, [esp+6Ch+var_28]
.text:0040BE38                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040BE3C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040BE40                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040BE44                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040BE47                 call    sub_40E150
.text:0040BE4C                 test    eax, eax
.text:0040BE4E                 jnz     short loc_40BE70
.text:0040BE50                 mov     [esp+6Ch+var_28], 1
.text:0040BE58                 mov     [esp+6Ch+var_24], 200h
.text:0040BE60                 mov     [esp+6Ch+var_20], 0
.text:0040BE68                 mov     [esp+6Ch+var_1C], 0
.text:0040BE70
.text:0040BE70 loc_40BE70:                             ; CODE XREF: sub_40BB80+2CE↑j
.text:0040BE70                 mov     ebp, [esp+6Ch+var_24]
.text:0040BE74                 mov     edi, [esp+6Ch+var_28]
.text:0040BE78                 mov     eax, [esp+6Ch+arg_4]
.text:0040BE7C                 imul    ebp, edi
.text:0040BE7F                 mov     esi, [eax+10h]
.text:0040BE82                 mov     dword_414060, ebp
.text:0040BE88                 mov     ds:dword_415350, esi
.text:0040BE8E                 jmp     loc_40BC9C
.text:0040BE93 ; ---------------------------------------------------------------------------
.text:0040BE93
.text:0040BE93 loc_40BE93:                             ; CODE XREF: sub_40BB80+9D↑j
.text:0040BE93                                         ; sub_40BB80+B6↑j ...
.text:0040BE93                 xor     eax, eax
.text:0040BE95                 jmp     loc_40BC70
.text:0040BE95 ; ---------------------------------------------------------------------------
.text:0040BE9A                 align 10h
.text:0040BEA0
.text:0040BEA0 loc_40BEA0:                             ; CODE XREF: sub_40BB80+AA↑j
.text:0040BEA0                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:0040BEA7                 xor     ebp, ebp
.text:0040BEA9                 call    GetModuleHandleA
.text:0040BEAE                 sub     esp, 4
.text:0040BEB1                 mov     edi, eax
.text:0040BEB3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040BEBB                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040BEBE                 call    GetProcAddress
.text:0040BEC3                 sub     esp, 8
.text:0040BEC6                 mov     edx, eax
.text:0040BEC8                 test    eax, eax
.text:0040BECA                 jz      short loc_40BEE4
.text:0040BECC                 mov     eax, [esp+6Ch+String1]
.text:0040BED0                 lea     ecx, [esp+6Ch+var_18]
.text:0040BED4                 mov     [esp+6Ch+lpProcName], ecx
.text:0040BED8                 mov     [esp+6Ch+Str], eax
.text:0040BEDB                 call    edx
.text:0040BEDD                 sub     esp, 8
.text:0040BEE0                 test    eax, eax
.text:0040BEE2                 jnz     short loc_40BF48
.text:0040BEE4
.text:0040BEE4 loc_40BEE4:                             ; CODE XREF: sub_40BB80+34A↑j
.text:0040BEE4                 mov     edx, ds:Str
.text:0040BEEA                 test    edx, edx
.text:0040BEEC                 jz      short loc_40BF67
.text:0040BEEE
.text:0040BEEE loc_40BEEE:                             ; CODE XREF: sub_40BB80+3FA↓j
.text:0040BEEE                                         ; sub_40BB80+40C↓j
.text:0040BEEE                 mov     eax, [esp+6Ch+String1]
.text:0040BEF2                 test    eax, eax
.text:0040BEF4                 jz      short loc_40BEFF
.text:0040BEF6                 mov     esi, [esp+6Ch+String1]
.text:0040BEFA                 cmp     byte ptr [esi], 0
.text:0040BEFD                 jnz     short loc_40BF1C
.text:0040BEFF
.text:0040BEFF loc_40BEFF:                             ; CODE XREF: sub_40BB80+374↑j
.text:0040BEFF                                         ; sub_40BB80+3B0↓j ...
.text:0040BEFF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040BF02                 call    FreeLibrary
.text:0040BF07                 sub     esp, 4
.text:0040BF0A                 test    ebp, ebp
.text:0040BF0C                 jz      loc_40BC30
.text:0040BF12                 mov     ebx, 49h ; 'I'
.text:0040BF17                 jmp     loc_40BC30
.text:0040BF1C ; ---------------------------------------------------------------------------
.text:0040BF1C
.text:0040BF1C loc_40BF1C:                             ; CODE XREF: sub_40BB80+37D↑j
.text:0040BF1C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040BF1F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040BF27                 call    strrchr
.text:0040BF2C                 test    eax, eax
.text:0040BF2E                 mov     esi, eax
.text:0040BF30                 jz      short loc_40BEFF
.text:0040BF32                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040BF36                 mov     ecx, ds:Str
.text:0040BF3C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040BF3F                 call    strstr
.text:0040BF44                 test    eax, eax
.text:0040BF46                 jz      short loc_40BF4F
.text:0040BF48
.text:0040BF48 loc_40BF48:                             ; CODE XREF: sub_40BB80+362↑j
.text:0040BF48                                         ; sub_40BB80+3E5↓j
.text:0040BF48                 mov     ebp, 1
.text:0040BF4D                 jmp     short loc_40BEFF
.text:0040BF4F ; ---------------------------------------------------------------------------
.text:0040BF4F
.text:0040BF4F loc_40BF4F:                             ; CODE XREF: sub_40BB80+3C6↑j
.text:0040BF4F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040BF53                 mov     edx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040BF59                 mov     [esp+6Ch+Str], edx ; Str
.text:0040BF5C                 call    strstr
.text:0040BF61                 test    eax, eax
.text:0040BF63                 jz      short loc_40BEFF
.text:0040BF65                 jmp     short loc_40BF48
.text:0040BF67 ; ---------------------------------------------------------------------------
.text:0040BF67
.text:0040BF67 loc_40BF67:                             ; CODE XREF: sub_40BB80+36C↑j
.text:0040BF67                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040BF6E                 call    getenv
.text:0040BF73                 mov     ds:Str, eax
.text:0040BF78                 test    eax, eax
.text:0040BF7A                 jnz     loc_40BEEE
.text:0040BF80                 mov     esi, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040BF86                 mov     ds:Str, esi
.text:0040BF8C                 jmp     loc_40BEEE
.text:0040BF91 ; ---------------------------------------------------------------------------
.text:0040BF91
.text:0040BF91 loc_40BF91:                             ; CODE XREF: sub_40BB80+81↑j
.text:0040BF91                                         ; sub_40BB80+452↓j
.text:0040BF91                 shld    edi, esi, 8
.text:0040BF95                 movsx   eax, cl
.text:0040BF98                 shl     esi, 8
.text:0040BF9B                 cdq
.text:0040BF9C                 add     esi, eax
.text:0040BF9E                 adc     edi, edx
.text:0040BFA0                 mov     edx, edi
.text:0040BFA2                 xor     ebx, ebx
.text:0040BFA4                 and     edx, 0FF000000h
.text:0040BFAA                 mov     eax, edx
.text:0040BFAC                 or      eax, ebx
.text:0040BFAE                 jz      short loc_40BFC9
.text:0040BFB0                 mov     ecx, edx
.text:0040BFB2                 xor     eax, eax
.text:0040BFB4                 shr     ecx, 10h
.text:0040BFB7                 mov     edx, esi
.text:0040BFB9                 xor     edx, ecx
.text:0040BFBB                 mov     ecx, edi
.text:0040BFBD                 xor     ecx, eax
.text:0040BFBF                 mov     esi, edx
.text:0040BFC1                 mov     edi, ecx
.text:0040BFC3                 and     edi, 0FFFFFFh
.text:0040BFC9
.text:0040BFC9 loc_40BFC9:                             ; CODE XREF: sub_40BB80+42E↑j
.text:0040BFC9                 inc     ebp
.text:0040BFCA                 movzx   ebx, byte ptr [ebp+0]
.text:0040BFCE                 test    bl, bl
.text:0040BFD0                 mov     cl, bl
.text:0040BFD2                 jnz     short loc_40BF91
.text:0040BFD4                 mov     eax, esi
.text:0040BFD6                 mov     edx, edi
.text:0040BFD8                 jmp     loc_40BC0B
.text:0040BFD8 ; ---------------------------------------------------------------------------
.text:0040BFDD                 align 10h
.text:0040BFE0
.text:0040BFE0 loc_40BFE0:                             ; CODE XREF: sub_40BB80+3F↑j
.text:0040BFE0                                         ; sub_40BB80+57↑j
.text:0040BFE0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040BFE4                 mov     ebp, [esp+6Ch+String1]
.text:0040BFE8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040BFEC                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040BFEF                 call    _stricmp
.text:0040BFF4                 test    eax, eax
.text:0040BFF6                 jnz     short loc_40C010
.text:0040BFF8                 mov     ebx, [esp+6Ch+arg_4]
.text:0040BFFC                 mov     dword ptr [ebx+8], 5
.text:0040C003                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040C00A                 jmp     loc_40BBDD
.text:0040C00A ; ---------------------------------------------------------------------------
.text:0040C00F                 align 10h
.text:0040C010
.text:0040C010 loc_40C010:                             ; CODE XREF: sub_40BB80+476↑j
.text:0040C010                 mov     ebp, [esp+6Ch+String1]
.text:0040C014                 xor     esi, esi
.text:0040C016                 xor     edi, edi
.text:0040C018                 add     ebp, ebx
.text:0040C01A                 jz      short loc_40C024
.text:0040C01C                 movzx   ecx, byte ptr [ebp+0]
.text:0040C020                 test    cl, cl
.text:0040C022                 jnz     short loc_40C037
.text:0040C024
.text:0040C024 loc_40C024:                             ; CODE XREF: sub_40BB80+49A↑j
.text:0040C024                 xor     eax, eax
.text:0040C026                 xor     edx, edx
.text:0040C028
.text:0040C028 loc_40C028:                             ; CODE XREF: sub_40BB80+4FE↓j
.text:0040C028                 mov     ebp, [esp+6Ch+arg_4]
.text:0040C02C                 mov     [ebp+8], eax
.text:0040C02F                 mov     [ebp+0Ch], edx
.text:0040C032                 jmp     loc_40BBDD
.text:0040C037 ; ---------------------------------------------------------------------------
.text:0040C037
.text:0040C037 loc_40C037:                             ; CODE XREF: sub_40BB80+4A2↑j
.text:0040C037                                         ; sub_40BB80+4F8↓j
.text:0040C037                 shld    edi, esi, 8
.text:0040C03B                 movsx   eax, cl
.text:0040C03E                 shl     esi, 8
.text:0040C041                 cdq
.text:0040C042                 add     esi, eax
.text:0040C044                 adc     edi, edx
.text:0040C046                 mov     edx, edi
.text:0040C048                 xor     ebx, ebx
.text:0040C04A                 and     edx, 0FF000000h
.text:0040C050                 mov     eax, edx
.text:0040C052                 or      eax, ebx
.text:0040C054                 jz      short loc_40C06F
.text:0040C056                 mov     ecx, edx
.text:0040C058                 xor     eax, eax
.text:0040C05A                 shr     ecx, 10h
.text:0040C05D                 mov     edx, esi
.text:0040C05F                 xor     edx, ecx
.text:0040C061                 mov     ecx, edi
.text:0040C063                 xor     ecx, eax
.text:0040C065                 mov     esi, edx
.text:0040C067                 mov     edi, ecx
.text:0040C069                 and     edi, 0FFFFFFh
.text:0040C06F
.text:0040C06F loc_40C06F:                             ; CODE XREF: sub_40BB80+4D4↑j
.text:0040C06F                 inc     ebp
.text:0040C070                 movzx   ebx, byte ptr [ebp+0]
.text:0040C074                 test    bl, bl
.text:0040C076                 mov     cl, bl
.text:0040C078                 jnz     short loc_40C037
.text:0040C07A                 mov     eax, esi
.text:0040C07C                 mov     edx, edi
.text:0040C07E                 jmp     short loc_40C028
.text:0040C07E sub_40BB80      endp
.text:0040C07E
.text:0040C080
.text:0040C080 ; =============== S U B R O U T I N E =======================================
.text:0040C080
.text:0040C080
.text:0040C080 ; int __cdecl sub_40C080(LPCSTR)
.text:0040C080 sub_40C080      proc near               ; CODE XREF: sub_40D850+CA↓p
.text:0040C080
.text:0040C080 lpRootPathName  = dword ptr -83Ch
.text:0040C080 lpVolumeNameBuffer= dword ptr -838h
.text:0040C080 nVolumeNameSize = dword ptr -834h
.text:0040C080 lpVolumeSerialNumber= dword ptr -830h
.text:0040C080 lpMaximumComponentLength= dword ptr -82Ch
.text:0040C080 lpFileSystemFlags= dword ptr -828h
.text:0040C080 lpFileSystemNameBuffer= dword ptr -824h
.text:0040C080 nFileSystemNameSize= dword ptr -820h
.text:0040C080 VolumeSerialNumber= dword ptr -818h
.text:0040C080 MaximumComponentLength= dword ptr -814h
.text:0040C080 FileSystemFlags = dword ptr -810h
.text:0040C080 FileSystemNameBuffer= byte ptr -80Ch
.text:0040C080 VolumeNameBuffer= byte ptr -40Ch
.text:0040C080 var_4           = dword ptr -4
.text:0040C080 arg_0           = dword ptr  4
.text:0040C080
.text:0040C080                 sub     esp, 83Ch
.text:0040C086                 mov     [esp+83Ch+var_4], ebx
.text:0040C08D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040C094                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040C097                 call    sub_40D730
.text:0040C09C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040C09F                 call    sub_40D300
.text:0040C0A4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040C0A7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040C0AB                 mov     ebx, eax
.text:0040C0AD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040C0B1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040C0B5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040C0B9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040C0BD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040C0C1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040C0C5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040C0CC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040C0D0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040C0D4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040C0DC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040C0E4                 call    GetVolumeInformationA
.text:0040C0E9                 sub     esp, 20h
.text:0040C0EC                 test    eax, eax
.text:0040C0EE                 setz    cl
.text:0040C0F1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040C0F4                 movzx   edx, cl
.text:0040C0F7                 dec     edx
.text:0040C0F8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040C0FC                 call    free
.text:0040C101                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040C105                 mov     ebx, [esp+83Ch+var_4]
.text:0040C10C                 add     esp, 83Ch
.text:0040C112                 retn
.text:0040C112 sub_40C080      endp
.text:0040C112
.text:0040C112 ; ---------------------------------------------------------------------------
.text:0040C113                 align 10h
.text:0040C120                 push    ebp
.text:0040C121                 push    edi
.text:0040C122                 xor     edi, edi
.text:0040C124                 push    esi
.text:0040C125                 xor     esi, esi
.text:0040C127                 push    ebx
.text:0040C128                 mov     ebp, [esp+14h]
.text:0040C12C                 test    ebp, ebp
.text:0040C12E                 jz      short loc_40C138
.text:0040C130                 movzx   ecx, byte ptr [ebp+0]
.text:0040C134                 test    cl, cl
.text:0040C136                 jnz     short loc_40C141
.text:0040C138
.text:0040C138 loc_40C138:                             ; CODE XREF: .text:0040C12E↑j
.text:0040C138                 xor     eax, eax
.text:0040C13A                 xor     edx, edx
.text:0040C13C
.text:0040C13C loc_40C13C:                             ; CODE XREF: .text:0040C188↓j
.text:0040C13C                 pop     ebx
.text:0040C13D                 pop     esi
.text:0040C13E                 pop     edi
.text:0040C13F                 pop     ebp
.text:0040C140                 retn
.text:0040C141 ; ---------------------------------------------------------------------------
.text:0040C141
.text:0040C141 loc_40C141:                             ; CODE XREF: .text:0040C136↑j
.text:0040C141                                         ; .text:0040C182↓j
.text:0040C141                 shld    edi, esi, 8
.text:0040C145                 movsx   eax, cl
.text:0040C148                 shl     esi, 8
.text:0040C14B                 cdq
.text:0040C14C                 add     esi, eax
.text:0040C14E                 adc     edi, edx
.text:0040C150                 mov     edx, edi
.text:0040C152                 xor     ebx, ebx
.text:0040C154                 and     edx, 0FF000000h
.text:0040C15A                 mov     eax, edx
.text:0040C15C                 or      eax, ebx
.text:0040C15E                 jz      short loc_40C179
.text:0040C160                 mov     ecx, edx
.text:0040C162                 xor     eax, eax
.text:0040C164                 shr     ecx, 10h
.text:0040C167                 mov     edx, esi
.text:0040C169                 xor     edx, ecx
.text:0040C16B                 mov     ecx, edi
.text:0040C16D                 xor     ecx, eax
.text:0040C16F                 mov     esi, edx
.text:0040C171                 mov     edi, ecx
.text:0040C173                 and     edi, 0FFFFFFh
.text:0040C179
.text:0040C179 loc_40C179:                             ; CODE XREF: .text:0040C15E↑j
.text:0040C179                 inc     ebp
.text:0040C17A                 movzx   ebx, byte ptr [ebp+0]
.text:0040C17E                 test    bl, bl
.text:0040C180                 mov     cl, bl
.text:0040C182                 jnz     short loc_40C141
.text:0040C184                 mov     eax, esi
.text:0040C186                 mov     edx, edi
.text:0040C188                 jmp     short loc_40C13C
.text:0040C188 ; ---------------------------------------------------------------------------
.text:0040C18A                 align 10h
.text:0040C190                 sub     esp, 2Ch
.text:0040C193                 lea     edx, [esp+24h]
.text:0040C197                 lea     ecx, [esp+28h]
.text:0040C19B                 mov     [esp+0Ch], edx
.text:0040C19F                 lea     edx, [esp+1Ch]
.text:0040C1A3                 mov     [esp+4], edx
.text:0040C1A7                 mov     edx, [esp+30h]
.text:0040C1AB                 mov     [esp+10h], ecx
.text:0040C1AF                 lea     ecx, [esp+20h]
.text:0040C1B3                 mov     [esp+8], ecx
.text:0040C1B7                 mov     [esp], edx
.text:0040C1BA                 call    sub_40E150
.text:0040C1BF                 test    eax, eax
.text:0040C1C1                 jnz     short loc_40C1E3
.text:0040C1C3                 mov     dword ptr [esp+1Ch], 1
.text:0040C1CB                 mov     dword ptr [esp+20h], 200h
.text:0040C1D3                 mov     dword ptr [esp+24h], 0
.text:0040C1DB                 mov     dword ptr [esp+28h], 0
.text:0040C1E3
.text:0040C1E3 loc_40C1E3:                             ; CODE XREF: .text:0040C1C1↑j
.text:0040C1E3                 mov     eax, [esp+20h]
.text:0040C1E7                 mov     ecx, [esp+1Ch]
.text:0040C1EB                 add     esp, 2Ch
.text:0040C1EE                 imul    eax, ecx
.text:0040C1F1                 retn
.text:0040C1F1 ; ---------------------------------------------------------------------------
.text:0040C1F2                 align 10h
.text:0040C200                 sub     esp, 1Ch
.text:0040C203                 mov     eax, [esp+20h]
.text:0040C207                 mov     [esp+14h], esi
.text:0040C20B                 mov     [esp+18h], edi
.text:0040C20F                 test    eax, eax
.text:0040C211                 jz      short loc_40C250
.text:0040C213                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C21B                 mov     [esp], eax
.text:0040C21E                 call    strrchr
.text:0040C223                 test    eax, eax
.text:0040C225                 jz      short loc_40C250
.text:0040C227                 cld
.text:0040C228                 mov     esi, eax
.text:0040C22A                 mov     edi, offset aLnk ; ".lnk"
.text:0040C22F                 mov     ecx, 5
.text:0040C234                 repe cmpsb
.text:0040C236                 setz    dl
.text:0040C239                 movzx   eax, dl
.text:0040C23C                 lea     esi, [esi+0]
.text:0040C240
.text:0040C240 loc_40C240:                             ; CODE XREF: .text:0040C252↓j
.text:0040C240                 mov     esi, [esp+14h]
.text:0040C244                 mov     edi, [esp+18h]
.text:0040C248                 add     esp, 1Ch
.text:0040C24B                 retn
.text:0040C24B ; ---------------------------------------------------------------------------
.text:0040C24C                 align 10h
.text:0040C250
.text:0040C250 loc_40C250:                             ; CODE XREF: .text:0040C211↑j
.text:0040C250                                         ; .text:0040C225↑j
.text:0040C250                 xor     eax, eax
.text:0040C252                 jmp     short loc_40C240
.text:0040C252 ; ---------------------------------------------------------------------------
.text:0040C254                 align 10h
.text:0040C260                 sub     esp, 1Ch
.text:0040C263                 mov     [esp+10h], ebx
.text:0040C267                 mov     ebx, [esp+20h]
.text:0040C26B                 mov     [esp+14h], esi
.text:0040C26F                 mov     [esp+18h], edi
.text:0040C273                 xor     edi, edi
.text:0040C275                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040C27C                 call    GetModuleHandleA
.text:0040C281                 sub     esp, 4
.text:0040C284                 mov     esi, eax
.text:0040C286                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040C28E                 mov     [esp], eax
.text:0040C291                 call    GetProcAddress
.text:0040C296                 sub     esp, 8
.text:0040C299                 test    eax, eax
.text:0040C29B                 jz      short loc_40C2B1
.text:0040C29D                 mov     [esp], ebx
.text:0040C2A0                 lea     ecx, [esp+0Ch]
.text:0040C2A4                 mov     [esp+4], ecx
.text:0040C2A8                 call    eax
.text:0040C2AA                 sub     esp, 8
.text:0040C2AD                 test    eax, eax
.text:0040C2AF                 jnz     short loc_40C310
.text:0040C2B1
.text:0040C2B1 loc_40C2B1:                             ; CODE XREF: .text:0040C29B↑j
.text:0040C2B1                 mov     eax, ds:Str
.text:0040C2B6                 test    eax, eax
.text:0040C2B8                 jz      short loc_40C330
.text:0040C2BA
.text:0040C2BA loc_40C2BA:                             ; CODE XREF: .text:0040C343↓j
.text:0040C2BA                                         ; .text:0040C355↓j
.text:0040C2BA                 test    ebx, ebx
.text:0040C2BC                 jz      short loc_40C2C3
.text:0040C2BE                 cmp     byte ptr [ebx], 0
.text:0040C2C1                 jnz     short loc_40C2E0
.text:0040C2C3
.text:0040C2C3 loc_40C2C3:                             ; CODE XREF: .text:0040C2BC↑j
.text:0040C2C3                                         ; .text:0040C2F4↓j ...
.text:0040C2C3                 mov     [esp], esi
.text:0040C2C6                 call    FreeLibrary
.text:0040C2CB                 sub     esp, 4
.text:0040C2CE                 mov     eax, edi
.text:0040C2D0                 mov     ebx, [esp+10h]
.text:0040C2D4                 mov     esi, [esp+14h]
.text:0040C2D8                 mov     edi, [esp+18h]
.text:0040C2DC                 add     esp, 1Ch
.text:0040C2DF                 retn
.text:0040C2E0 ; ---------------------------------------------------------------------------
.text:0040C2E0
.text:0040C2E0 loc_40C2E0:                             ; CODE XREF: .text:0040C2C1↑j
.text:0040C2E0                 mov     [esp], ebx
.text:0040C2E3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C2EB                 call    strrchr
.text:0040C2F0                 test    eax, eax
.text:0040C2F2                 mov     ebx, eax
.text:0040C2F4                 jz      short loc_40C2C3
.text:0040C2F6                 mov     [esp+4], eax
.text:0040C2FA                 mov     ecx, ds:Str
.text:0040C300                 mov     [esp], ecx
.text:0040C303                 call    strstr
.text:0040C308                 test    eax, eax
.text:0040C30A                 jz      short loc_40C317
.text:0040C30C                 lea     esi, [esi+0]
.text:0040C310
.text:0040C310 loc_40C310:                             ; CODE XREF: .text:0040C2AF↑j
.text:0040C310                                         ; .text:0040C32D↓j
.text:0040C310                 mov     edi, 1
.text:0040C315                 jmp     short loc_40C2C3
.text:0040C317 ; ---------------------------------------------------------------------------
.text:0040C317
.text:0040C317 loc_40C317:                             ; CODE XREF: .text:0040C30A↑j
.text:0040C317                 mov     [esp+4], ebx
.text:0040C31B                 mov     ebx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040C321                 mov     [esp], ebx
.text:0040C324                 call    strstr
.text:0040C329                 test    eax, eax
.text:0040C32B                 jz      short loc_40C2C3
.text:0040C32D                 jmp     short loc_40C310
.text:0040C32D ; ---------------------------------------------------------------------------
.text:0040C32F                 align 10h
.text:0040C330
.text:0040C330 loc_40C330:                             ; CODE XREF: .text:0040C2B8↑j
.text:0040C330                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040C337                 call    getenv
.text:0040C33C                 mov     ds:Str, eax
.text:0040C341                 test    eax, eax
.text:0040C343                 jnz     loc_40C2BA
.text:0040C349                 mov     edx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040C34F                 mov     ds:Str, edx
.text:0040C355                 jmp     loc_40C2BA
.text:0040C355 ; ---------------------------------------------------------------------------
.text:0040C35A                 align 10h
.text:0040C360                 sub     esp, 0Ch
.text:0040C363                 mov     edx, [esp+10h]
.text:0040C367                 mov     [esp], edx
.text:0040C36A                 call    GetFileType
.text:0040C36F                 sub     esp, 4
.text:0040C372                 xor     edx, edx
.text:0040C374                 cmp     eax, 2
.text:0040C377                 jz      short loc_40C390
.text:0040C379                 cmp     eax, 3
.text:0040C37C                 jz      short loc_40C384
.text:0040C37E
.text:0040C37E loc_40C37E:                             ; CODE XREF: .text:0040C389↓j
.text:0040C37E                                         ; .text:0040C395↓j
.text:0040C37E                 mov     eax, edx
.text:0040C380                 add     esp, 0Ch
.text:0040C383                 retn
.text:0040C384 ; ---------------------------------------------------------------------------
.text:0040C384
.text:0040C384 loc_40C384:                             ; CODE XREF: .text:0040C37C↑j
.text:0040C384                 mov     edx, 1000h
.text:0040C389                 jmp     short loc_40C37E
.text:0040C389 ; ---------------------------------------------------------------------------
.text:0040C38B                 align 10h
.text:0040C390
.text:0040C390 loc_40C390:                             ; CODE XREF: .text:0040C377↑j
.text:0040C390                 mov     edx, 2000h
.text:0040C395                 jmp     short loc_40C37E
.text:0040C395 ; ---------------------------------------------------------------------------
.text:0040C397                 align 10h
.text:0040C3A0                 mov     ecx, [esp+4]
.text:0040C3A4                 xor     edx, edx
.text:0040C3A6                 test    cl, 10h
.text:0040C3A9                 setz    dl
.text:0040C3AC                 dec     edx
.text:0040C3AD                 and     edx, 0FFFFC000h
.text:0040C3B3                 add     edx, 8000h
.text:0040C3B9                 or      edx, 124h
.text:0040C3BF                 test    cl, 1
.text:0040C3C2                 movzx   eax, dx
.text:0040C3C5                 jnz     short locret_40C3CC
.text:0040C3C7                 or      eax, 92h
.text:0040C3CC
.text:0040C3CC locret_40C3CC:                          ; CODE XREF: .text:0040C3C5↑j
.text:0040C3CC                 retn
.text:0040C3CC ; ---------------------------------------------------------------------------
.text:0040C3CD                 align 10h
.text:0040C3D0                 sub     esp, 2Ch
.text:0040C3D3                 mov     [esp+20h], esi
.text:0040C3D7                 mov     esi, [esp+30h]
.text:0040C3DB                 mov     [esp+1Ch], ebx
.text:0040C3DF                 xor     ebx, ebx
.text:0040C3E1                 test    esi, esi
.text:0040C3E3                 mov     [esp+24h], edi
.text:0040C3E7                 mov     [esp+28h], ebp
.text:0040C3EB                 jz      short loc_40C440
.text:0040C3ED                 cmp     byte ptr [esi], 0
.text:0040C3F0                 jnz     short loc_40C444
.text:0040C3F2
.text:0040C3F2 loc_40C3F2:                             ; CODE XREF: .text:0040C4AC↓j
.text:0040C3F2                                         ; .text:0040C4B7↓j
.text:0040C3F2                 test    esi, esi
.text:0040C3F4                 jz      short loc_40C440
.text:0040C3F6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C3FE                 mov     [esp], esi
.text:0040C401                 call    strrchr
.text:0040C406                 test    eax, eax
.text:0040C408                 jz      short loc_40C440
.text:0040C40A                 cld
.text:0040C40B                 mov     ecx, 5
.text:0040C410                 mov     esi, eax
.text:0040C412                 mov     edi, offset aLnk ; ".lnk"
.text:0040C417                 repe cmpsb
.text:0040C419                 setz    cl
.text:0040C41C                 movzx   eax, cl
.text:0040C41F                 nop
.text:0040C420
.text:0040C420 loc_40C420:                             ; CODE XREF: .text:0040C442↓j
.text:0040C420                 test    eax, eax
.text:0040C422                 jz      short loc_40C42A
.text:0040C424                 or      ebx, 0A000h
.text:0040C42A
.text:0040C42A loc_40C42A:                             ; CODE XREF: .text:0040C422↑j
.text:0040C42A                 mov     eax, ebx
.text:0040C42C                 mov     esi, [esp+20h]
.text:0040C430                 mov     ebx, [esp+1Ch]
.text:0040C434                 mov     edi, [esp+24h]
.text:0040C438                 mov     ebp, [esp+28h]
.text:0040C43C                 add     esp, 2Ch
.text:0040C43F                 retn
.text:0040C440 ; ---------------------------------------------------------------------------
.text:0040C440
.text:0040C440 loc_40C440:                             ; CODE XREF: .text:0040C3EB↑j
.text:0040C440                                         ; .text:0040C3F4↑j ...
.text:0040C440                 xor     eax, eax
.text:0040C442                 jmp     short loc_40C420
.text:0040C444 ; ---------------------------------------------------------------------------
.text:0040C444
.text:0040C444 loc_40C444:                             ; CODE XREF: .text:0040C3F0↑j
.text:0040C444                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040C44B                 call    GetModuleHandleA
.text:0040C450                 sub     esp, 4
.text:0040C453                 mov     ebp, eax
.text:0040C455                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040C45D                 mov     [esp], eax
.text:0040C460                 call    GetProcAddress
.text:0040C465                 sub     esp, 8
.text:0040C468                 test    eax, eax
.text:0040C46A                 mov     dword ptr [esp+14h], 0
.text:0040C472                 jz      short loc_40C488
.text:0040C474                 mov     [esp], esi
.text:0040C477                 lea     ecx, [esp+18h]
.text:0040C47B                 mov     [esp+4], ecx
.text:0040C47F                 call    eax
.text:0040C481                 sub     esp, 8
.text:0040C484                 test    eax, eax
.text:0040C486                 jnz     short loc_40C4E8
.text:0040C488
.text:0040C488 loc_40C488:                             ; CODE XREF: .text:0040C472↑j
.text:0040C488                 mov     edx, ds:Str
.text:0040C48E                 test    edx, edx
.text:0040C490                 jz      short loc_40C510
.text:0040C492
.text:0040C492 loc_40C492:                             ; CODE XREF: .text:0040C523↓j
.text:0040C492                                         ; .text:0040C535↓j
.text:0040C492                 test    esi, esi
.text:0040C494                 jz      short loc_40C49B
.text:0040C496                 cmp     byte ptr [esi], 0
.text:0040C499                 jnz     short loc_40C4BC
.text:0040C49B
.text:0040C49B loc_40C49B:                             ; CODE XREF: .text:0040C494↑j
.text:0040C49B                                         ; .text:0040C4D0↓j ...
.text:0040C49B                 mov     [esp], ebp
.text:0040C49E                 call    FreeLibrary
.text:0040C4A3                 sub     esp, 4
.text:0040C4A6                 mov     eax, [esp+14h]
.text:0040C4AA                 test    eax, eax
.text:0040C4AC                 jz      loc_40C3F2
.text:0040C4B2                 mov     ebx, 49h ; 'I'
.text:0040C4B7                 jmp     loc_40C3F2
.text:0040C4BC ; ---------------------------------------------------------------------------
.text:0040C4BC
.text:0040C4BC loc_40C4BC:                             ; CODE XREF: .text:0040C499↑j
.text:0040C4BC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C4C4                 mov     [esp], esi
.text:0040C4C7                 call    strrchr
.text:0040C4CC                 test    eax, eax
.text:0040C4CE                 mov     edi, eax
.text:0040C4D0                 jz      short loc_40C49B
.text:0040C4D2                 mov     [esp+4], eax
.text:0040C4D6                 mov     edx, ds:Str
.text:0040C4DC                 mov     [esp], edx
.text:0040C4DF                 call    strstr
.text:0040C4E4                 test    eax, eax
.text:0040C4E6                 jz      short loc_40C4F2
.text:0040C4E8
.text:0040C4E8 loc_40C4E8:                             ; CODE XREF: .text:0040C486↑j
.text:0040C4E8                                         ; .text:0040C508↓j
.text:0040C4E8                 mov     dword ptr [esp+14h], 1
.text:0040C4F0                 jmp     short loc_40C49B
.text:0040C4F2 ; ---------------------------------------------------------------------------
.text:0040C4F2
.text:0040C4F2 loc_40C4F2:                             ; CODE XREF: .text:0040C4E6↑j
.text:0040C4F2                 mov     [esp+4], edi
.text:0040C4F6                 mov     edi, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040C4FC                 mov     [esp], edi
.text:0040C4FF                 call    strstr
.text:0040C504                 test    eax, eax
.text:0040C506                 jz      short loc_40C49B
.text:0040C508                 jmp     short loc_40C4E8
.text:0040C508 ; ---------------------------------------------------------------------------
.text:0040C50A                 align 10h
.text:0040C510
.text:0040C510 loc_40C510:                             ; CODE XREF: .text:0040C490↑j
.text:0040C510                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040C517                 call    getenv
.text:0040C51C                 mov     ds:Str, eax
.text:0040C521                 test    eax, eax
.text:0040C523                 jnz     loc_40C492
.text:0040C529                 mov     ecx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040C52F                 mov     ds:Str, ecx
.text:0040C535                 jmp     loc_40C492
.text:0040C535 ; ---------------------------------------------------------------------------
.text:0040C53A                 align 10h
.text:0040C540                 push    esi
.text:0040C541                 push    ebx
.text:0040C542                 sub     esp, 864h
.text:0040C548                 mov     ebx, [esp+870h]
.text:0040C54F                 lea     edx, [esp+830h]
.text:0040C556                 mov     esi, [esp+874h]
.text:0040C55D                 mov     [esp+4], edx
.text:0040C561                 mov     [esp], ebx
.text:0040C564                 call    loc_40B3C0
.text:0040C569                 xor     edx, edx
.text:0040C56B                 test    eax, eax
.text:0040C56D                 jz      loc_40C655
.text:0040C573                 mov     ecx, [esp+830h]
.text:0040C57A                 test    cl, 10h
.text:0040C57D                 mov     [esi], ecx
.text:0040C57F                 mov     eax, [esp+834h]
.text:0040C586                 mov     edx, [esp+838h]
.text:0040C58D                 mov     [esi+4], eax
.text:0040C590                 mov     [esi+8], edx
.text:0040C593                 mov     eax, [esp+83Ch]
.text:0040C59A                 mov     edx, [esp+840h]
.text:0040C5A1                 mov     [esi+0Ch], eax
.text:0040C5A4                 mov     [esi+10h], edx
.text:0040C5A7                 mov     edx, [esp+848h]
.text:0040C5AE                 mov     eax, [esp+844h]
.text:0040C5B5                 mov     [esi+18h], edx
.text:0040C5B8                 mov     [esi+14h], eax
.text:0040C5BB                 mov     edx, [esp+84Ch]
.text:0040C5C2                 mov     [esi+20h], edx
.text:0040C5C5                 mov     edx, [esp+850h]
.text:0040C5CC                 mov     [esi+24h], edx
.text:0040C5CF                 jnz     loc_40C660
.text:0040C5D5                 mov     dword ptr [esi+28h], 1
.text:0040C5DC
.text:0040C5DC loc_40C5DC:                             ; CODE XREF: .text:0040C66B↓j
.text:0040C5DC                 mov     [esp], ebx
.text:0040C5DF                 call    sub_40D730
.text:0040C5E4                 mov     [esp], eax
.text:0040C5E7                 call    sub_40D300
.text:0040C5EC                 mov     [esp], eax
.text:0040C5EF                 lea     edx, [esp+30h]
.text:0040C5F3                 mov     ebx, eax
.text:0040C5F5                 mov     [esp+18h], edx
.text:0040C5F9                 lea     ecx, [esp+2Ch]
.text:0040C5FD                 lea     edx, [esp+28h]
.text:0040C601                 mov     [esp+14h], ecx
.text:0040C605                 lea     ecx, [esp+24h]
.text:0040C609                 mov     [esp+10h], edx
.text:0040C60D                 lea     edx, [esp+430h]
.text:0040C614                 mov     [esp+0Ch], ecx
.text:0040C618                 mov     [esp+4], edx
.text:0040C61C                 mov     dword ptr [esp+1Ch], 400h
.text:0040C624                 mov     dword ptr [esp+8], 400h
.text:0040C62C                 call    GetVolumeInformationA
.text:0040C631                 sub     esp, 20h
.text:0040C634                 test    eax, eax
.text:0040C636                 setz    cl
.text:0040C639                 mov     [esp], ebx
.text:0040C63C                 movzx   edx, cl
.text:0040C63F                 dec     edx
.text:0040C640                 and     [esp+24h], edx
.text:0040C644                 call    free
.text:0040C649                 mov     ecx, [esp+24h]
.text:0040C64D                 mov     edx, 1
.text:0040C652                 mov     [esi+1Ch], ecx
.text:0040C655
.text:0040C655 loc_40C655:                             ; CODE XREF: .text:0040C56D↑j
.text:0040C655                 add     esp, 864h
.text:0040C65B                 mov     eax, edx
.text:0040C65D                 pop     ebx
.text:0040C65E                 pop     esi
.text:0040C65F                 retn
.text:0040C660 ; ---------------------------------------------------------------------------
.text:0040C660
.text:0040C660 loc_40C660:                             ; CODE XREF: .text:0040C5CF↑j
.text:0040C660                 mov     [esp], ebx
.text:0040C663                 call    loc_40B530
.text:0040C668                 mov     [esi+28h], eax
.text:0040C66B                 jmp     loc_40C5DC
.text:0040C670 ; ---------------------------------------------------------------------------
.text:0040C670                 push    ebp
.text:0040C671                 xor     edx, edx
.text:0040C673                 push    edi
.text:0040C674                 push    esi
.text:0040C675                 xor     esi, esi
.text:0040C677                 push    ebx
.text:0040C678                 sub     esp, 1Ch
.text:0040C67B                 mov     ebx, [esp+5Ch]
.text:0040C67F                 mov     ecx, [esp+30h]
.text:0040C683                 mov     edi, [esp+60h]
.text:0040C687                 or      esi, ebx
.text:0040C689                 mov     eax, [esp+4Ch]
.text:0040C68D                 or      edi, edx
.text:0040C68F                 mov     ebx, [esp+64h]
.text:0040C693                 xor     edx, edx
.text:0040C695                 test    cl, 10h
.text:0040C698                 setz    dl
.text:0040C69B                 mov     [ebx+10h], eax
.text:0040C69E                 mov     [ebx+8], edi
.text:0040C6A1                 mov     [ebx+0Ch], esi
.text:0040C6A4                 dec     edx
.text:0040C6A5                 and     edx, 0FFFFC000h
.text:0040C6AB                 mov     dword ptr [ebx+14h], 0
.text:0040C6B2                 add     edx, 8000h
.text:0040C6B8                 or      edx, 124h
.text:0040C6BE                 test    cl, 1
.text:0040C6C1                 movzx   eax, dx
.text:0040C6C4                 jnz     short loc_40C6CB
.text:0040C6C6                 or      eax, 92h
.text:0040C6CB
.text:0040C6CB loc_40C6CB:                             ; CODE XREF: .text:0040C6C4↑j
.text:0040C6CB                 mov     ebx, [esp+54h]
.text:0040C6CF                 xor     edx, edx
.text:0040C6D1                 xor     ebp, ebp
.text:0040C6D3                 mov     edi, [esp+50h]
.text:0040C6D7                 mov     ecx, [esp+64h]
.text:0040C6DB                 mov     esi, edi
.text:0040C6DD                 or      [ecx], eax
.text:0040C6DF                 mov     edi, ebx
.text:0040C6E1                 or      edi, ebp
.text:0040C6E3                 mov     ebp, edx
.text:0040C6E5                 mov     ebx, [esp+64h]
.text:0040C6E9                 or      ebp, esi
.text:0040C6EB                 mov     esi, [esp+58h]
.text:0040C6EF                 mov     edx, [esp+40h]
.text:0040C6F3                 mov     [ebx+30h], edi
.text:0040C6F6                 mov     [ebx+18h], esi
.text:0040C6F9                 mov     ecx, edx
.text:0040C6FB                 xor     esi, esi
.text:0040C6FD                 mov     [ebx+34h], ebp
.text:0040C700                 xor     edx, edx
.text:0040C702                 or      esi, ecx
.text:0040C704                 mov     dword ptr [esp+8], 989680h
.text:0040C70C                 mov     ebx, [esp+3Ch]
.text:0040C710                 mov     ecx, esi
.text:0040C712                 mov     dword ptr [esp+0Ch], 0
.text:0040C71A                 or      ebx, edx
.text:0040C71C                 mov     edx, ebx
.text:0040C71E                 sub     edx, 0D53E8000h
.text:0040C724                 sbb     ecx, 19DB1DEh
.text:0040C72A                 mov     [esp+4], ecx
.text:0040C72E                 mov     [esp], edx
.text:0040C731                 call    sub_4128D0
.text:0040C736                 mov     edx, eax
.text:0040C738                 mov     ecx, [esp+64h]
.text:0040C73C                 shr     eax, 1Fh
.text:0040C73F                 dec     eax
.text:0040C740                 and     edx, eax
.text:0040C742                 mov     [ecx+38h], edx
.text:0040C745                 mov     [esp], ebx
.text:0040C748                 mov     [esp+4], esi
.text:0040C74C                 mov     dword ptr [esp+8], 989680h
.text:0040C754                 mov     dword ptr [esp+0Ch], 0
.text:0040C75C                 call    sub_412750
.text:0040C761                 lea     ecx, [eax+eax*4]
.text:0040C764                 lea     esi, [ecx+ecx*4]
.text:0040C767                 mov     eax, [esp+64h]
.text:0040C76B                 shl     esi, 2
.text:0040C76E                 mov     ebx, esi
.text:0040C770                 shr     ebx, 1Fh
.text:0040C773                 dec     ebx
.text:0040C774                 and     ebx, esi
.text:0040C776                 xor     esi, esi
.text:0040C778                 mov     [eax+3Ch], ebx
.text:0040C77B                 mov     edx, [esp+38h]
.text:0040C77F                 mov     dword ptr [esp+8], 989680h
.text:0040C787                 mov     ebx, [esp+34h]
.text:0040C78B                 mov     dword ptr [esp+0Ch], 0
.text:0040C793                 mov     ecx, edx
.text:0040C795                 xor     edx, edx
.text:0040C797                 or      ebx, edx
.text:0040C799                 or      esi, ecx
.text:0040C79B                 mov     edx, ebx
.text:0040C79D                 sub     edx, 0D53E8000h
.text:0040C7A3                 mov     ecx, esi
.text:0040C7A5                 sbb     ecx, 19DB1DEh
.text:0040C7AB                 mov     [esp+4], ecx
.text:0040C7AF                 mov     [esp], edx
.text:0040C7B2                 call    sub_4128D0
.text:0040C7B7                 mov     edx, eax
.text:0040C7B9                 mov     ecx, [esp+64h]
.text:0040C7BD                 shr     eax, 1Fh
.text:0040C7C0                 dec     eax
.text:0040C7C1                 and     edx, eax
.text:0040C7C3                 mov     [ecx+48h], edx
.text:0040C7C6                 mov     [esp], ebx
.text:0040C7C9                 mov     [esp+4], esi
.text:0040C7CD                 mov     dword ptr [esp+8], 989680h
.text:0040C7D5                 mov     dword ptr [esp+0Ch], 0
.text:0040C7DD                 call    sub_412750
.text:0040C7E2                 lea     edx, [eax+eax*4]
.text:0040C7E5                 mov     ebx, [esp+64h]
.text:0040C7E9                 lea     ecx, [edx+edx*4]
.text:0040C7EC                 shl     ecx, 2
.text:0040C7EF                 mov     esi, ecx
.text:0040C7F1                 shr     esi, 1Fh
.text:0040C7F4                 dec     esi
.text:0040C7F5                 and     esi, ecx
.text:0040C7F7                 mov     [ebx+4Ch], esi
.text:0040C7FA                 mov     edx, [esp+48h]
.text:0040C7FE                 xor     esi, esi
.text:0040C800                 mov     dword ptr [esp+8], 989680h
.text:0040C808                 mov     ebx, [esp+44h]
.text:0040C80C                 mov     dword ptr [esp+0Ch], 0
.text:0040C814                 mov     ecx, edx
.text:0040C816                 xor     edx, edx
.text:0040C818                 or      ebx, edx
.text:0040C81A                 or      esi, ecx
.text:0040C81C                 mov     edx, ebx
.text:0040C81E                 sub     edx, 0D53E8000h
.text:0040C824                 mov     ecx, esi
.text:0040C826                 sbb     ecx, 19DB1DEh
.text:0040C82C                 mov     [esp+4], ecx
.text:0040C830                 mov     [esp], edx
.text:0040C833                 call    sub_4128D0
.text:0040C838                 mov     edx, eax
.text:0040C83A                 mov     ecx, [esp+64h]
.text:0040C83E                 shr     eax, 1Fh
.text:0040C841                 dec     eax
.text:0040C842                 and     edx, eax
.text:0040C844                 mov     [ecx+40h], edx
.text:0040C847                 mov     [esp+4], esi
.text:0040C84B                 mov     dword ptr [esp+8], 989680h
.text:0040C853                 mov     dword ptr [esp+0Ch], 0
.text:0040C85B                 mov     [esp], ebx
.text:0040C85E                 call    sub_412750
.text:0040C863                 lea     edx, [eax+eax*4]
.text:0040C866                 lea     esi, [edx+edx*4]
.text:0040C869                 mov     eax, [esp+64h]
.text:0040C86D                 shl     esi, 2
.text:0040C870                 mov     edx, ebp
.text:0040C872                 mov     ecx, esi
.text:0040C874                 mov     dword ptr [eax+50h], 200h
.text:0040C87B                 shr     ecx, 1Fh
.text:0040C87E                 dec     ecx
.text:0040C87F                 and     ecx, esi
.text:0040C881                 test    ebp, ebp
.text:0040C883                 mov     [eax+44h], ecx
.text:0040C886                 mov     eax, edi
.text:0040C888                 js      short loc_40C8C2
.text:0040C88A
.text:0040C88A loc_40C88A:                             ; CODE XREF: .text:0040C8CA↓j
.text:0040C88A                 xor     esi, esi
.text:0040C88C                 mov     ebp, edi
.text:0040C88E                 mov     ecx, eax
.text:0040C890                 shrd    ecx, edx, 9
.text:0040C894                 mov     ebx, edx
.text:0040C896                 and     ebp, 1FFh
.text:0040C89C                 mov     eax, esi
.text:0040C89E                 sar     ebx, 9
.text:0040C8A1                 or      eax, ebp
.text:0040C8A3                 jz      short loc_40C8AB
.text:0040C8A5                 add     ecx, 1
.text:0040C8A8                 adc     ebx, 0
.text:0040C8AB
.text:0040C8AB loc_40C8AB:                             ; CODE XREF: .text:0040C8A3↑j
.text:0040C8AB                 mov     edx, [esp+64h]
.text:0040C8AF                 mov     eax, 1
.text:0040C8B4                 mov     [edx+58h], ecx
.text:0040C8B7                 mov     [edx+5Ch], ebx
.text:0040C8BA                 add     esp, 1Ch
.text:0040C8BD                 pop     ebx
.text:0040C8BE                 pop     esi
.text:0040C8BF                 pop     edi
.text:0040C8C0                 pop     ebp
.text:0040C8C1                 retn
.text:0040C8C2 ; ---------------------------------------------------------------------------
.text:0040C8C2
.text:0040C8C2 loc_40C8C2:                             ; CODE XREF: .text:0040C888↑j
.text:0040C8C2                 add     eax, 1FFh
.text:0040C8C7                 adc     edx, 0
.text:0040C8CA                 jmp     short loc_40C88A
.text:0040C8CA ; ---------------------------------------------------------------------------
.text:0040C8CC                 align 10h
.text:0040C8D0                 push    ebp
.text:0040C8D1                 push    edi
.text:0040C8D2                 xor     edi, edi
.text:0040C8D4                 push    esi
.text:0040C8D5                 xor     esi, esi
.text:0040C8D7                 push    ebx
.text:0040C8D8                 sub     esp, 0Ch
.text:0040C8DB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040C8E2                 call    LoadLibraryA
.text:0040C8E7                 sub     esp, 4
.text:0040C8EA                 mov     ebp, eax
.text:0040C8EC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040C8F4                 mov     [esp], eax
.text:0040C8F7                 call    GetProcAddress
.text:0040C8FC                 sub     esp, 8
.text:0040C8FF                 test    eax, eax
.text:0040C901                 jz      short loc_40C932
.text:0040C903                 lea     ecx, [esp+8]
.text:0040C907                 mov     [esp+4], ecx
.text:0040C90B                 mov     ecx, [esp+20h]
.text:0040C90F                 mov     [esp], ecx
.text:0040C912                 call    eax
.text:0040C914                 sub     esp, 8
.text:0040C917                 mov     ebx, eax
.text:0040C919                 cmp     eax, 0FFFFFFFFh
.text:0040C91C                 jz      short loc_40C94D
.text:0040C91E
.text:0040C91E loc_40C91E:                             ; CODE XREF: .text:0040C956↓j
.text:0040C91E                 mov     esi, [esp+8]
.text:0040C922                 mov     ecx, ebx
.text:0040C924                 xor     edi, edi
.text:0040C926                 xor     ebx, ebx
.text:0040C928                 mov     edx, esi
.text:0040C92A                 mov     esi, ecx
.text:0040C92C                 or      esi, edi
.text:0040C92E                 mov     edi, ebx
.text:0040C930                 or      edi, edx
.text:0040C932
.text:0040C932 loc_40C932:                             ; CODE XREF: .text:0040C901↑j
.text:0040C932                                         ; .text:0040C954↓j
.text:0040C932                 test    ebp, ebp
.text:0040C934                 jz      short loc_40C941
.text:0040C936                 mov     [esp], ebp
.text:0040C939                 call    FreeLibrary
.text:0040C93E                 sub     esp, 4
.text:0040C941
.text:0040C941 loc_40C941:                             ; CODE XREF: .text:0040C934↑j
.text:0040C941                 add     esp, 0Ch
.text:0040C944                 mov     eax, esi
.text:0040C946                 mov     edx, edi
.text:0040C948                 pop     ebx
.text:0040C949                 pop     esi
.text:0040C94A                 pop     edi
.text:0040C94B                 pop     ebp
.text:0040C94C                 retn
.text:0040C94D ; ---------------------------------------------------------------------------
.text:0040C94D
.text:0040C94D loc_40C94D:                             ; CODE XREF: .text:0040C91C↑j
.text:0040C94D                 call    GetLastError
.text:0040C952                 test    eax, eax
.text:0040C954                 jnz     short loc_40C932
.text:0040C956                 jmp     short loc_40C91E
.text:0040C956 ; ---------------------------------------------------------------------------
.text:0040C958                 align 10h
.text:0040C960
.text:0040C960 ; =============== S U B R O U T I N E =======================================
.text:0040C960
.text:0040C960
.text:0040C960 ; int __cdecl sub_40C960(LPCSTR, int)
.text:0040C960 sub_40C960      proc near               ; CODE XREF: sub_410C40-3D9F↓p
.text:0040C960
.text:0040C960 lpRootPathName  = dword ptr -8FCh
.text:0040C960 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040C960 nVolumeNameSize = dword ptr -8F4h
.text:0040C960 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040C960 lpMaximumComponentLength= dword ptr -8ECh
.text:0040C960 lpFileSystemFlags= dword ptr -8E8h
.text:0040C960 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040C960 nFileSystemNameSize= dword ptr -8E0h
.text:0040C960 VolumeSerialNumber= dword ptr -8D8h
.text:0040C960 MaximumComponentLength= dword ptr -8D4h
.text:0040C960 FileSystemFlags = dword ptr -8D0h
.text:0040C960 var_8CC         = dword ptr -8CCh
.text:0040C960 var_8C8         = dword ptr -8C8h
.text:0040C960 var_8C4         = dword ptr -8C4h
.text:0040C960 var_8C0         = dword ptr -8C0h
.text:0040C960 var_8BC         = dword ptr -8BCh
.text:0040C960 var_8B8         = dword ptr -8B8h
.text:0040C960 var_8B4         = dword ptr -8B4h
.text:0040C960 var_8B0         = dword ptr -8B0h
.text:0040C960 var_8AC         = dword ptr -8ACh
.text:0040C960 var_8A8         = dword ptr -8A8h
.text:0040C960 var_8A4         = dword ptr -8A4h
.text:0040C960 var_8A0         = dword ptr -8A0h
.text:0040C960 var_89C         = dword ptr -89Ch
.text:0040C960 FileSystemNameBuffer= byte ptr -88Ch
.text:0040C960 VolumeNameBuffer= byte ptr -48Ch
.text:0040C960 var_8C          = dword ptr -8Ch
.text:0040C960 var_88          = dword ptr -88h
.text:0040C960 var_84          = dword ptr -84h
.text:0040C960 var_80          = dword ptr -80h
.text:0040C960 var_7C          = dword ptr -7Ch
.text:0040C960 var_78          = dword ptr -78h
.text:0040C960 var_74          = dword ptr -74h
.text:0040C960 var_70          = dword ptr -70h
.text:0040C960 var_6C          = dword ptr -6Ch
.text:0040C960 var_5C          = dword ptr -5Ch
.text:0040C960 var_58          = dword ptr -58h
.text:0040C960 var_54          = dword ptr -54h
.text:0040C960 var_50          = dword ptr -50h
.text:0040C960 var_4C          = dword ptr -4Ch
.text:0040C960 var_48          = dword ptr -48h
.text:0040C960 var_44          = dword ptr -44h
.text:0040C960 var_3C          = dword ptr -3Ch
.text:0040C960 var_38          = dword ptr -38h
.text:0040C960 var_34          = dword ptr -34h
.text:0040C960 arg_0           = dword ptr  4
.text:0040C960 arg_4           = dword ptr  8
.text:0040C960
.text:0040C960                 push    ebp
.text:0040C961                 xor     eax, eax
.text:0040C963                 mov     ecx, 0Dh
.text:0040C968                 push    edi
.text:0040C969                 push    esi
.text:0040C96A                 push    ebx
.text:0040C96B                 sub     esp, 8ECh
.text:0040C971                 lea     edi, [esp+8FCh+var_5C]
.text:0040C978                 cld
.text:0040C979                 lea     edx, [esp+8FCh+var_8C]
.text:0040C980                 rep stosd
.text:0040C982                 mov     [esp+8FCh+lpVolumeNameBuffer], edx
.text:0040C986                 lea     esi, [esp+8FCh+var_5C]
.text:0040C98D                 mov     edx, [esp+8FCh+arg_0]
.text:0040C994                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C997                 call    loc_40B3C0
.text:0040C99C                 test    eax, eax
.text:0040C99E                 mov     edx, 0FFFFFFFFh
.text:0040C9A3                 jz      loc_40CD34
.text:0040C9A9                 mov     edx, [esp+8FCh+var_88]
.text:0040C9B0                 mov     ebp, [esp+8FCh+var_84]
.text:0040C9B7                 mov     edi, [esp+8FCh+var_80]
.text:0040C9BE                 mov     [esp+8FCh+var_58], edx
.text:0040C9C5                 mov     ecx, [esp+8FCh+var_7C]
.text:0040C9CC                 mov     ebx, [esp+8FCh+var_8C]
.text:0040C9D3                 mov     [esp+8FCh+var_54], ebp
.text:0040C9DA                 mov     edx, [esp+8FCh+var_78]
.text:0040C9E1                 mov     ebp, [esp+8FCh+var_74]
.text:0040C9E8                 mov     [esp+8FCh+var_50], edi
.text:0040C9EF                 test    bl, 10h
.text:0040C9F2                 mov     edi, [esp+8FCh+var_70]
.text:0040C9F9                 mov     [esp+8FCh+var_4C], ecx
.text:0040CA00                 mov     ecx, [esp+8FCh+var_6C]
.text:0040CA07                 mov     [esp+8FCh+var_5C], ebx
.text:0040CA0E                 mov     [esp+8FCh+var_48], edx
.text:0040CA15                 mov     [esp+8FCh+var_44], ebp
.text:0040CA1C                 mov     [esp+8FCh+var_3C], edi
.text:0040CA23                 mov     [esp+8FCh+var_38], ecx
.text:0040CA2A                 jnz     loc_40CD50
.text:0040CA30                 mov     ebx, 1
.text:0040CA35                 mov     [esp+8FCh+var_34], ebx
.text:0040CA3C
.text:0040CA3C loc_40CA3C:                             ; CODE XREF: sub_40C960+406↓j
.text:0040CA3C                 mov     eax, [esp+8FCh+arg_0]
.text:0040CA43                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040CA47                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040CA4B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040CA4E                 call    sub_40D730
.text:0040CA53                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040CA56                 call    sub_40D300
.text:0040CA5B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040CA5F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040CA63                 mov     ebp, eax
.text:0040CA65                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040CA69                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040CA6D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040CA74                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040CA78                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040CA7C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040CA80                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040CA88                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040CA90                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040CA93                 call    GetVolumeInformationA
.text:0040CA98                 sub     esp, 20h
.text:0040CA9B                 test    eax, eax
.text:0040CA9D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040CAA1                 setz    bl
.text:0040CAA4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040CAA7                 xor     ebp, ebp
.text:0040CAA9                 movzx   edx, bl
.text:0040CAAC                 dec     edx
.text:0040CAAD                 xor     ebx, ebx
.text:0040CAAF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040CAB3                 call    free
.text:0040CAB8                 cld
.text:0040CAB9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040CABD                 mov     [esi+1Ch], ecx
.text:0040CAC0                 mov     ecx, 0Dh
.text:0040CAC5                 rep movsd
.text:0040CAC7                 mov     edi, [esp+8FCh+var_8A0]
.text:0040CACB                 mov     edx, [esp+8FCh+var_89C]
.text:0040CACF                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040CAD3                 or      ebp, edi
.text:0040CAD5                 mov     esi, [esp+8FCh+var_8B0]
.text:0040CAD9                 mov     edi, [esp+8FCh+arg_4]
.text:0040CAE0                 or      edx, ebx
.text:0040CAE2                 mov     [edi+8], edx
.text:0040CAE5                 xor     edx, edx
.text:0040CAE7                 test    cl, 10h
.text:0040CAEA                 setz    dl
.text:0040CAED                 mov     [edi+0Ch], ebp
.text:0040CAF0                 mov     [edi+10h], esi
.text:0040CAF3                 mov     dword ptr [edi+14h], 0
.text:0040CAFA                 dec     edx
.text:0040CAFB                 and     edx, 0FFFFC000h
.text:0040CB01                 add     edx, 8000h
.text:0040CB07                 or      edx, 124h
.text:0040CB0D                 test    cl, 1
.text:0040CB10                 movzx   eax, dx
.text:0040CB13                 jnz     short loc_40CB1A
.text:0040CB15                 or      eax, 92h
.text:0040CB1A
.text:0040CB1A loc_40CB1A:                             ; CODE XREF: sub_40C960+1B3↑j
.text:0040CB1A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040CB1E                 xor     edx, edx
.text:0040CB20                 xor     ebp, ebp
.text:0040CB22                 mov     edi, [esp+8FCh+var_8AC]
.text:0040CB26                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CB2D                 mov     esi, edi
.text:0040CB2F                 or      [ecx], eax
.text:0040CB31                 mov     edi, ebx
.text:0040CB33                 or      edi, ebp
.text:0040CB35                 mov     ebp, edx
.text:0040CB37                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040CB3B                 or      ebp, esi
.text:0040CB3D                 mov     esi, [esp+8FCh+arg_4]
.text:0040CB44                 mov     edx, [esp+8FCh+var_8BC]
.text:0040CB48                 mov     [esi+18h], ebx
.text:0040CB4B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040CB4F                 mov     ecx, edx
.text:0040CB51                 mov     [esi+30h], edi
.text:0040CB54                 xor     edx, edx
.text:0040CB56                 mov     [esi+34h], ebp
.text:0040CB59                 or      ebx, edx
.text:0040CB5B                 xor     esi, esi
.text:0040CB5D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CB65                 or      esi, ecx
.text:0040CB67                 mov     edx, ebx
.text:0040CB69                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CB71                 sub     edx, 0D53E8000h
.text:0040CB77                 mov     ecx, esi
.text:0040CB79                 sbb     ecx, 19DB1DEh
.text:0040CB7F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040CB83                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040CB86                 call    sub_4128D0
.text:0040CB8B                 mov     edx, eax
.text:0040CB8D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CB94                 shr     eax, 1Fh
.text:0040CB97                 dec     eax
.text:0040CB98                 and     edx, eax
.text:0040CB9A                 mov     [ecx+38h], edx
.text:0040CB9D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040CBA0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040CBA4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CBAC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CBB4                 call    sub_412750
.text:0040CBB9                 lea     ecx, [eax+eax*4]
.text:0040CBBC                 lea     ebx, [ecx+ecx*4]
.text:0040CBBF                 mov     eax, [esp+8FCh+arg_4]
.text:0040CBC6                 shl     ebx, 2
.text:0040CBC9                 mov     esi, ebx
.text:0040CBCB                 shr     esi, 1Fh
.text:0040CBCE                 dec     esi
.text:0040CBCF                 and     esi, ebx
.text:0040CBD1                 mov     [eax+3Ch], esi
.text:0040CBD4                 mov     edx, [esp+8FCh+var_8C4]
.text:0040CBD8                 xor     esi, esi
.text:0040CBDA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CBE2                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040CBE6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CBEE                 mov     ecx, edx
.text:0040CBF0                 xor     edx, edx
.text:0040CBF2                 or      ebx, edx
.text:0040CBF4                 or      esi, ecx
.text:0040CBF6                 mov     edx, ebx
.text:0040CBF8                 sub     edx, 0D53E8000h
.text:0040CBFE                 mov     ecx, esi
.text:0040CC00                 sbb     ecx, 19DB1DEh
.text:0040CC06                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040CC0A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040CC0D                 call    sub_4128D0
.text:0040CC12                 mov     edx, eax
.text:0040CC14                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CC1B                 shr     eax, 1Fh
.text:0040CC1E                 dec     eax
.text:0040CC1F                 and     edx, eax
.text:0040CC21                 mov     [ecx+48h], edx
.text:0040CC24                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040CC27                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040CC2B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CC33                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CC3B                 call    sub_412750
.text:0040CC40                 lea     ecx, [eax+eax*4]
.text:0040CC43                 lea     ebx, [ecx+ecx*4]
.text:0040CC46                 mov     eax, [esp+8FCh+arg_4]
.text:0040CC4D                 shl     ebx, 2
.text:0040CC50                 mov     esi, ebx
.text:0040CC52                 shr     esi, 1Fh
.text:0040CC55                 dec     esi
.text:0040CC56                 and     esi, ebx
.text:0040CC58                 mov     [eax+4Ch], esi
.text:0040CC5B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040CC5F                 xor     esi, esi
.text:0040CC61                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CC69                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040CC6D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CC75                 mov     ecx, edx
.text:0040CC77                 xor     edx, edx
.text:0040CC79                 or      ebx, edx
.text:0040CC7B                 or      esi, ecx
.text:0040CC7D                 mov     edx, ebx
.text:0040CC7F                 sub     edx, 0D53E8000h
.text:0040CC85                 mov     ecx, esi
.text:0040CC87                 sbb     ecx, 19DB1DEh
.text:0040CC8D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040CC91                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040CC94                 call    sub_4128D0
.text:0040CC99                 mov     edx, eax
.text:0040CC9B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CCA2                 shr     eax, 1Fh
.text:0040CCA5                 dec     eax
.text:0040CCA6                 and     edx, eax
.text:0040CCA8                 mov     [ecx+40h], edx
.text:0040CCAB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040CCAE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040CCB2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CCBA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CCC2                 call    sub_412750
.text:0040CCC7                 lea     ebx, [eax+eax*4]
.text:0040CCCA                 mov     esi, [esp+8FCh+arg_4]
.text:0040CCD1                 lea     edx, [ebx+ebx*4]
.text:0040CCD4                 shl     edx, 2
.text:0040CCD7                 mov     eax, edi
.text:0040CCD9                 mov     ecx, edx
.text:0040CCDB                 mov     dword ptr [esi+50h], 200h
.text:0040CCE2                 shr     ecx, 1Fh
.text:0040CCE5                 dec     ecx
.text:0040CCE6                 and     ecx, edx
.text:0040CCE8                 test    ebp, ebp
.text:0040CCEA                 mov     edx, ebp
.text:0040CCEC                 mov     [esi+44h], ecx
.text:0040CCEF                 js      short loc_40CD41
.text:0040CCF1
.text:0040CCF1 loc_40CCF1:                             ; CODE XREF: sub_40C960+3E9↓j
.text:0040CCF1                 xor     esi, esi
.text:0040CCF3                 mov     ebp, edi
.text:0040CCF5                 mov     ecx, eax
.text:0040CCF7                 shrd    ecx, edx, 9
.text:0040CCFB                 mov     ebx, edx
.text:0040CCFD                 and     ebp, 1FFh
.text:0040CD03                 mov     eax, esi
.text:0040CD05                 sar     ebx, 9
.text:0040CD08                 or      eax, ebp
.text:0040CD0A                 jz      short loc_40CD12
.text:0040CD0C                 add     ecx, 1
.text:0040CD0F                 adc     ebx, 0
.text:0040CD12
.text:0040CD12 loc_40CD12:                             ; CODE XREF: sub_40C960+3AA↑j
.text:0040CD12                 mov     edx, [esp+8FCh+arg_4]
.text:0040CD19                 mov     [edx+5Ch], ebx
.text:0040CD1C                 mov     ebx, [esp+8FCh+arg_0]
.text:0040CD23                 mov     [edx+58h], ecx
.text:0040CD26                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040CD2A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040CD2D                 call    sub_40BB80
.text:0040CD32                 xor     edx, edx
.text:0040CD34
.text:0040CD34 loc_40CD34:                             ; CODE XREF: sub_40C960+43↑j
.text:0040CD34                 add     esp, 8ECh
.text:0040CD3A                 mov     eax, edx
.text:0040CD3C                 pop     ebx
.text:0040CD3D                 pop     esi
.text:0040CD3E                 pop     edi
.text:0040CD3F                 pop     ebp
.text:0040CD40                 retn
.text:0040CD41 ; ---------------------------------------------------------------------------
.text:0040CD41
.text:0040CD41 loc_40CD41:                             ; CODE XREF: sub_40C960+38F↑j
.text:0040CD41                 add     eax, 1FFh
.text:0040CD46                 adc     edx, 0
.text:0040CD49                 jmp     short loc_40CCF1
.text:0040CD49 ; ---------------------------------------------------------------------------
.text:0040CD4B                 align 10h
.text:0040CD50
.text:0040CD50 loc_40CD50:                             ; CODE XREF: sub_40C960+CA↑j
.text:0040CD50                 mov     eax, [esp+8FCh+arg_0]
.text:0040CD57                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040CD5A                 call    loc_40B530
.text:0040CD5F                 mov     [esp+8FCh+var_34], eax
.text:0040CD66                 jmp     loc_40CA3C
.text:0040CD66 sub_40C960      endp
.text:0040CD66
.text:0040CD66 ; ---------------------------------------------------------------------------
.text:0040CD6B                 align 10h
.text:0040CD70 ; START OF FUNCTION CHUNK FOR sub_410C40
.text:0040CD70
.text:0040CD70 loc_40CD70:                             ; CODE XREF: sub_410C40+26↓j
.text:0040CD70                 cld
.text:0040CD71                 sub     esp, 2Ch
.text:0040CD74                 xor     eax, eax
.text:0040CD76                 mov     [esp+2Ch+var_10], ebx
.text:0040CD7A                 mov     ecx, 18h
.text:0040CD7F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040CD83                 mov     [esp+2Ch+var_C], esi
.text:0040CD87                 mov     esi, [esp+2Ch+arg_4]
.text:0040CD8B                 test    ebx, ebx
.text:0040CD8D                 mov     [esp+2Ch+var_8], edi
.text:0040CD91                 mov     edi, esi
.text:0040CD93                 mov     [esp+2Ch+var_4], ebp
.text:0040CD97                 rep stosd
.text:0040CD99                 jz      short loc_40CDA0
.text:0040CD9B                 cmp     byte ptr [ebx], 0
.text:0040CD9E                 jnz     short loc_40CDB8
.text:0040CDA0
.text:0040CDA0 loc_40CDA0:                             ; CODE XREF: sub_410C40-3EA7↑j
.text:0040CDA0                 xor     edx, edx
.text:0040CDA2
.text:0040CDA2 loc_40CDA2:                             ; CODE XREF: sub_410C40-3E71↓j
.text:0040CDA2                                         ; sub_410C40-3DC8↓j
.text:0040CDA2                 mov     ebx, [esp+2Ch+var_10]
.text:0040CDA6                 mov     eax, edx
.text:0040CDA8                 mov     esi, [esp+2Ch+var_C]
.text:0040CDAC                 mov     edi, [esp+2Ch+var_8]
.text:0040CDB0                 mov     ebp, [esp+2Ch+var_4]
.text:0040CDB4                 add     esp, 2Ch
.text:0040CDB7                 retn
.text:0040CDB8 ; ---------------------------------------------------------------------------
.text:0040CDB8
.text:0040CDB8 loc_40CDB8:                             ; CODE XREF: sub_410C40-3EA2↑j
.text:0040CDB8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040CDC0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040CDC3                 call    sub_40E8B0
.text:0040CDC8                 test    eax, eax
.text:0040CDCA                 mov     edx, 0FFFFFFFFh
.text:0040CDCF                 jnz     short loc_40CDA2
.text:0040CDD1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040CDD4                 call    sub_40E760
.text:0040CDD9                 mov     [esp+2Ch+lpFileName], eax
.text:0040CDDC                 call    sub_40D300
.text:0040CDE1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040CDE4                 mov     ebp, eax
.text:0040CDE6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040CDEE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040CDF6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040CDFE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040CE06                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040CE0E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040CE16                 call    CreateFileA
.text:0040CE1B                 sub     esp, 1Ch
.text:0040CE1E                 mov     ebx, eax
.text:0040CE20                 mov     [esp+2Ch+dwDesiredAccess], esi
.text:0040CE24                 mov     [esp+2Ch+lpFileName], eax
.text:0040CE27                 call    loc_40B6B0
.text:0040CE2C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040CE2F                 mov     edi, eax
.text:0040CE31                 call    CloseHandle
.text:0040CE36                 sub     esp, 4
.text:0040CE39                 cmp     edi, 0FFFFFFFFh
.text:0040CE3C                 jz      short loc_40CE9A
.text:0040CE3E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CE42                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040CE45                 call    sub_40BB80
.text:0040CE4A
.text:0040CE4A loc_40CE4A:                             ; CODE XREF: sub_410C40-3D98↓j
.text:0040CE4A                 mov     edx, [esi]
.text:0040CE4C                 and     edx, 0F000h
.text:0040CE52                 cmp     edx, 4000h
.text:0040CE58                 jz      short loc_40CE8D
.text:0040CE5A
.text:0040CE5A loc_40CE5A:                             ; CODE XREF: sub_410C40-3DA8↓j
.text:0040CE5A                 cmp     edi, 0FFFFFFFFh
.text:0040CE5D                 jz      short loc_40CE7D
.text:0040CE5F
.text:0040CE5F loc_40CE5F:                             ; CODE XREF: sub_410C40-3DB5↓j
.text:0040CE5F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040CE66                 call    SetErrorMode
.text:0040CE6B                 sub     esp, 4
.text:0040CE6E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040CE71                 call    free
.text:0040CE76                 mov     edx, edi
.text:0040CE78                 jmp     loc_40CDA2
.text:0040CE7D ; ---------------------------------------------------------------------------
.text:0040CE7D
.text:0040CE7D loc_40CE7D:                             ; CODE XREF: sub_410C40-3DE3↑j
.text:0040CE7D                 call    sub_40E710
.text:0040CE82                 mov     esi, eax
.text:0040CE84                 call    _errno
.text:0040CE89                 mov     [eax], esi
.text:0040CE8B                 jmp     short loc_40CE5F
.text:0040CE8D ; ---------------------------------------------------------------------------
.text:0040CE8D
.text:0040CE8D loc_40CE8D:                             ; CODE XREF: sub_410C40-3DE8↑j
.text:0040CE8D                 mov     [esp+2Ch+lpFileName], ebp
.text:0040CE90                 call    loc_40B530
.text:0040CE95                 mov     [esi+18h], eax
.text:0040CE98                 jmp     short loc_40CE5A
.text:0040CE9A ; ---------------------------------------------------------------------------
.text:0040CE9A
.text:0040CE9A loc_40CE9A:                             ; CODE XREF: sub_410C40-3E04↑j
.text:0040CE9A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CE9E                 mov     [esp+2Ch+lpFileName], ebp ; LPCSTR
.text:0040CEA1                 call    sub_40C960
.text:0040CEA6                 mov     edi, eax
.text:0040CEA8                 jmp     short loc_40CE4A
.text:0040CEA8 ; END OF FUNCTION CHUNK FOR sub_410C40
.text:0040CEA8 ; ---------------------------------------------------------------------------
.text:0040CEAA                 align 10h
.text:0040CEB0
.text:0040CEB0 ; =============== S U B R O U T I N E =======================================
.text:0040CEB0
.text:0040CEB0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040CEB0
.text:0040CEB0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040CEB0 _win32_longpath proc near               ; CODE XREF: .text:0040D674↓p
.text:0040CEB0
.text:0040CEB0 C               = dword ptr -278h
.text:0040CEB0 lpFindFileData  = dword ptr -274h
.text:0040CEB0 Destination     = byte ptr -268h
.text:0040CEB0 var_267         = byte ptr -267h
.text:0040CEB0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040CEB0 lpFileName      = dword ptr  8
.text:0040CEB0
.text:0040CEB0                 push    ebp
.text:0040CEB1                 xor     eax, eax
.text:0040CEB3                 push    edi
.text:0040CEB4                 push    esi
.text:0040CEB5                 push    ebx
.text:0040CEB6                 sub     esp, 26Ch
.text:0040CEBC                 mov     esi, [esp+278h+lpFileName]
.text:0040CEC3                 lea     ebp, [esp+278h+Destination]
.text:0040CEC7                 test    esi, esi
.text:0040CEC9                 jz      loc_40D027
.text:0040CECF                 movsx   edx, byte ptr [esi]
.text:0040CED2                 mov     [esp+278h+C], edx ; C
.text:0040CED5                 call    isalpha
.text:0040CEDA                 test    eax, eax
.text:0040CEDC                 jz      short loc_40CEEF
.text:0040CEDE                 mov     eax, [esp+278h+lpFileName]
.text:0040CEE5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040CEE9                 jz      loc_40D22B
.text:0040CEEF
.text:0040CEEF loc_40CEEF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040CEEF                 mov     edx, [esp+278h+lpFileName]
.text:0040CEF6                 movzx   eax, byte ptr [edx]
.text:0040CEF9                 cmp     al, 2Fh ; '/'
.text:0040CEFB                 jz      loc_40D10B
.text:0040CF01                 cmp     al, 5Ch ; '\'
.text:0040CF03                 jz      loc_40D10B
.text:0040CF09
.text:0040CF09 loc_40CF09:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040CF09                                         ; _win32_longpath+2B1↓j ...
.text:0040CF09                 mov     [ebp+268h+Destination], 0
.text:0040CF0D                 movzx   ebx, byte ptr [esi]
.text:0040CF10                 test    bl, bl
.text:0040CF12                 jz      loc_40D009
.text:0040CF18                 nop
.text:0040CF19                 lea     esi, [esi+0]
.text:0040CF20
.text:0040CF20 loc_40CF20:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040CF20                 cmp     bl, 2Fh ; '/'
.text:0040CF23                 jz      loc_40D0C0
.text:0040CF29                 cmp     bl, 5Ch ; '\'
.text:0040CF2C                 jz      loc_40D0C0
.text:0040CF32
.text:0040CF32 loc_40CF32:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040CF32                                         ; _win32_longpath+22C↓j ...
.text:0040CF32                 cmp     bl, 2Eh ; '.'
.text:0040CF35                 jz      loc_40D060
.text:0040CF3B
.text:0040CF3B loc_40CF3B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040CF3B                                         ; _win32_longpath+203↓j
.text:0040CF3B                 test    bl, bl
.text:0040CF3D                 jz      loc_40D009
.text:0040CF43                 cmp     bl, 2Fh ; '/'
.text:0040CF46                 jz      short loc_40CF62
.text:0040CF48                 cmp     bl, 5Ch ; '\'
.text:0040CF4B                 jz      short loc_40CF62
.text:0040CF4D                 lea     esi, [esi+0]
.text:0040CF50
.text:0040CF50 loc_40CF50:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040CF50                 inc     esi
.text:0040CF51                 movzx   ebx, byte ptr [esi]
.text:0040CF54                 test    bl, bl
.text:0040CF56                 jz      short loc_40CF62
.text:0040CF58                 cmp     bl, 2Fh ; '/'
.text:0040CF5B                 jz      short loc_40CF62
.text:0040CF5D                 cmp     bl, 5Ch ; '\'
.text:0040CF60                 jnz     short loc_40CF50
.text:0040CF62
.text:0040CF62 loc_40CF62:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040CF62                                         ; _win32_longpath+9B↑j ...
.text:0040CF62                 mov     byte ptr [esi], 0
.text:0040CF65                 lea     edx, [esp+278h+FindFileData]
.text:0040CF6C                 mov     eax, [esp+278h+lpFileName]
.text:0040CF73                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040CF77                 mov     [esp+278h+C], eax ; lpFileName
.text:0040CF7A                 call    FindFirstFileA
.text:0040CF7F                 mov     [esi], bl
.text:0040CF81                 sub     esp, 8
.text:0040CF84                 mov     edi, eax
.text:0040CF86                 cmp     eax, 0FFFFFFFFh
.text:0040CF89                 jz      loc_40D04C
.text:0040CF8F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040CF96                 mov     ecx, ebx
.text:0040CF98                 nop
.text:0040CF99                 lea     esi, [esi+0]
.text:0040CFA0
.text:0040CFA0 loc_40CFA0:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040CFA0                 mov     eax, [ebx]
.text:0040CFA2                 add     ebx, 4
.text:0040CFA5                 lea     edx, [eax-1010101h]
.text:0040CFAB                 not     eax
.text:0040CFAD                 and     edx, eax
.text:0040CFAF                 and     edx, 80808080h
.text:0040CFB5                 jz      short loc_40CFA0
.text:0040CFB7                 test    edx, 8080h
.text:0040CFBD                 jnz     short loc_40CFC5
.text:0040CFBF                 shr     edx, 10h
.text:0040CFC2                 add     ebx, 2
.text:0040CFC5
.text:0040CFC5 loc_40CFC5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040CFC5                 add     dl, dl
.text:0040CFC7                 sbb     ebx, 3
.text:0040CFCA                 sub     ebx, ecx
.text:0040CFCC                 lea     ecx, [esp+278h+Destination]
.text:0040CFD0                 sub     ecx, ebp
.text:0040CFD2                 add     ecx, 105h
.text:0040CFD8                 cmp     ecx, ebx
.text:0040CFDA                 jle     short loc_40D032
.text:0040CFDC                 mov     [esp+278h+C], ebp ; Destination
.text:0040CFDF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040CFE6                 add     ebp, ebx
.text:0040CFE8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040CFEC                 call    strcpy
.text:0040CFF1                 mov     [esp+278h+C], edi ; hFindFile
.text:0040CFF4                 call    FindClose
.text:0040CFF9                 sub     esp, 4
.text:0040CFFC
.text:0040CFFC loc_40CFFC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040CFFC                 movzx   ecx, byte ptr [esi]
.text:0040CFFF                 test    cl, cl
.text:0040D001                 mov     bl, cl
.text:0040D003                 jnz     loc_40CF20
.text:0040D009
.text:0040D009 loc_40D009:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040D009                                         ; _win32_longpath+8D↑j
.text:0040D009                 mov     esi, [esp+278h+lpFileName]
.text:0040D010                 lea     ebp, [esp+278h+Destination]
.text:0040D014                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040D018                 mov     [esp+278h+C], esi ; Destination
.text:0040D01B                 call    strcpy
.text:0040D020                 mov     eax, [esp+278h+lpFileName]
.text:0040D027
.text:0040D027 loc_40D027:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040D027                                         ; _win32_longpath+19A↓j
.text:0040D027                 add     esp, 26Ch
.text:0040D02D                 pop     ebx
.text:0040D02E                 pop     esi
.text:0040D02F                 pop     edi
.text:0040D030                 pop     ebp
.text:0040D031                 retn
.text:0040D032 ; ---------------------------------------------------------------------------
.text:0040D032
.text:0040D032 loc_40D032:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040D032                 mov     [esp+278h+C], edi ; hFindFile
.text:0040D035                 call    FindClose
.text:0040D03A                 sub     esp, 4
.text:0040D03D                 call    _errno
.text:0040D042                 mov     dword ptr [eax], 22h ; '"'
.text:0040D048
.text:0040D048 loc_40D048:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040D048                 xor     eax, eax
.text:0040D04A                 jmp     short loc_40D027
.text:0040D04C ; ---------------------------------------------------------------------------
.text:0040D04C
.text:0040D04C loc_40D04C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040D04C                 call    _errno
.text:0040D051                 mov     dword ptr [eax], 16h
.text:0040D057                 jmp     short loc_40D048
.text:0040D057 ; ---------------------------------------------------------------------------
.text:0040D059                 align 10h
.text:0040D060
.text:0040D060 loc_40D060:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040D060                 movzx   eax, byte ptr [esi+1]
.text:0040D064                 test    al, al
.text:0040D066                 jnz     short loc_40D095
.text:0040D068
.text:0040D068 loc_40D068:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040D068                                         ; _win32_longpath+1EB↓j ...
.text:0040D068                 test    bl, bl
.text:0040D06A                 jz      short loc_40D08C
.text:0040D06C                 cmp     bl, 2Fh ; '/'
.text:0040D06F                 jz      short loc_40D08C
.text:0040D071                 cmp     bl, 5Ch ; '\'
.text:0040D074                 jz      short loc_40D08C
.text:0040D076
.text:0040D076 loc_40D076:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040D076                 mov     [ebp+268h+Destination], bl
.text:0040D079                 inc     esi
.text:0040D07A                 inc     ebp
.text:0040D07B                 movzx   ebx, byte ptr [esi]
.text:0040D07E                 test    bl, bl
.text:0040D080                 jz      short loc_40D08C
.text:0040D082                 cmp     bl, 2Fh ; '/'
.text:0040D085                 jz      short loc_40D08C
.text:0040D087                 cmp     bl, 5Ch ; '\'
.text:0040D08A                 jnz     short loc_40D076
.text:0040D08C
.text:0040D08C loc_40D08C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040D08C                                         ; _win32_longpath+1BF↑j ...
.text:0040D08C                 mov     [ebp+268h+Destination], 0
.text:0040D090                 jmp     loc_40CFFC
.text:0040D095 ; ---------------------------------------------------------------------------
.text:0040D095
.text:0040D095 loc_40D095:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040D095                 cmp     al, 2Fh ; '/'
.text:0040D097                 jz      short loc_40D068
.text:0040D099                 cmp     al, 5Ch ; '\'
.text:0040D09B                 jz      short loc_40D068
.text:0040D09D                 cmp     al, 2Eh ; '.'
.text:0040D09F                 jnz     loc_40CF3B
.text:0040D0A5                 movzx   eax, byte ptr [esi+2]
.text:0040D0A9                 test    al, al
.text:0040D0AB                 jz      short loc_40D068
.text:0040D0AD                 cmp     al, 2Fh ; '/'
.text:0040D0AF                 jz      short loc_40D068
.text:0040D0B1                 cmp     al, 5Ch ; '\'
.text:0040D0B3                 jnz     loc_40CF3B
.text:0040D0B9                 jmp     short loc_40D068
.text:0040D0B9 ; ---------------------------------------------------------------------------
.text:0040D0BB                 align 10h
.text:0040D0C0
.text:0040D0C0 loc_40D0C0:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040D0C0                                         ; _win32_longpath+7C↑j
.text:0040D0C0                 mov     [ebp+268h+Destination], bl
.text:0040D0C3                 inc     esi
.text:0040D0C4                 inc     ebp
.text:0040D0C5                 mov     [ebp+268h+Destination], 0
.text:0040D0C9                 movzx   ebx, byte ptr [esi]
.text:0040D0CC                 test    bl, bl
.text:0040D0CE                 jz      loc_40CF32
.text:0040D0D4                 cmp     bl, 2Fh ; '/'
.text:0040D0D7                 jz      short loc_40D0F0
.text:0040D0D9                 cmp     bl, 5Ch ; '\'
.text:0040D0DC                 jnz     loc_40CF32
.text:0040D0E2                 lea     esi, [esi+0]
.text:0040D0E9                 lea     edi, [edi+0]
.text:0040D0F0
.text:0040D0F0 loc_40D0F0:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040D0F0                                         ; _win32_longpath+24F↓j ...
.text:0040D0F0                 inc     esi
.text:0040D0F1                 movzx   ebx, byte ptr [esi]
.text:0040D0F4                 test    bl, bl
.text:0040D0F6                 jz      loc_40CF32
.text:0040D0FC                 cmp     bl, 2Fh ; '/'
.text:0040D0FF                 jz      short loc_40D0F0
.text:0040D101                 cmp     bl, 5Ch ; '\'
.text:0040D104                 jz      short loc_40D0F0
.text:0040D106                 jmp     loc_40CF32
.text:0040D10B ; ---------------------------------------------------------------------------
.text:0040D10B
.text:0040D10B loc_40D10B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040D10B                                         ; _win32_longpath+53↑j
.text:0040D10B                 mov     edi, [esp+278h+lpFileName]
.text:0040D112                 movzx   edx, byte ptr [edi+1]
.text:0040D116                 cmp     dl, 2Fh ; '/'
.text:0040D119                 jz      short loc_40D124
.text:0040D11B                 cmp     dl, 5Ch ; '\'
.text:0040D11E                 jnz     loc_40CF09
.text:0040D124
.text:0040D124 loc_40D124:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040D124                 mov     esi, [esp+278h+lpFileName]
.text:0040D12B                 mov     [ebp+268h+Destination], al
.text:0040D12E                 mov     ecx, [esp+278h+lpFileName]
.text:0040D135                 inc     ebp
.text:0040D136                 add     esi, 2
.text:0040D139                 movzx   ebx, byte ptr [ecx+1]
.text:0040D13D                 mov     [ebp+268h+Destination], bl
.text:0040D140                 inc     ebp
.text:0040D141                 movzx   eax, byte ptr [ecx+2]
.text:0040D145                 test    al, al
.text:0040D147                 jz      loc_40D223
.text:0040D14D                 cmp     al, 2Fh ; '/'
.text:0040D14F                 jz      loc_40D208
.text:0040D155                 cmp     al, 5Ch ; '\'
.text:0040D157                 mov     bl, al
.text:0040D159                 jz      loc_40D208
.text:0040D15F
.text:0040D15F loc_40D15F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040D15F                                         ; _win32_longpath+376↓j
.text:0040D15F                 test    bl, bl
.text:0040D161                 jz      loc_40CF09
.text:0040D167                 cmp     bl, 2Fh ; '/'
.text:0040D16A                 jz      short loc_40D18B
.text:0040D16C                 cmp     bl, 5Ch ; '\'
.text:0040D16F                 jz      short loc_40D18B
.text:0040D171
.text:0040D171 loc_40D171:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040D171                 mov     [ebp+268h+Destination], bl
.text:0040D174                 inc     esi
.text:0040D175                 inc     ebp
.text:0040D176                 movzx   ebx, byte ptr [esi]
.text:0040D179                 test    bl, bl
.text:0040D17B                 jz      loc_40CF09
.text:0040D181                 cmp     bl, 2Fh ; '/'
.text:0040D184                 jz      short loc_40D18B
.text:0040D186                 cmp     bl, 5Ch ; '\'
.text:0040D189                 jnz     short loc_40D171
.text:0040D18B
.text:0040D18B loc_40D18B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040D18B                                         ; _win32_longpath+2BF↑j ...
.text:0040D18B                 test    bl, bl
.text:0040D18D                 jz      loc_40CF09
.text:0040D193                 mov     [ebp+268h+Destination], bl
.text:0040D196                 inc     esi
.text:0040D197                 inc     ebp
.text:0040D198                 movzx   ebx, byte ptr [esi]
.text:0040D19B                 test    bl, bl
.text:0040D19D                 jz      loc_40CF09
.text:0040D1A3                 cmp     bl, 2Fh ; '/'
.text:0040D1A6                 jz      short loc_40D1F0
.text:0040D1A8                 cmp     bl, 5Ch ; '\'
.text:0040D1AB                 jz      short loc_40D1F0
.text:0040D1AD
.text:0040D1AD loc_40D1AD:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040D1AD                 test    bl, bl
.text:0040D1AF                 jz      loc_40CF09
.text:0040D1B5                 cmp     bl, 2Fh ; '/'
.text:0040D1B8                 jz      loc_40CF09
.text:0040D1BE                 cmp     bl, 5Ch ; '\'
.text:0040D1C1                 jz      loc_40CF09
.text:0040D1C7
.text:0040D1C7 loc_40D1C7:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040D1C7                 mov     [ebp+268h+Destination], bl
.text:0040D1CA                 inc     esi
.text:0040D1CB                 inc     ebp
.text:0040D1CC                 movzx   ebx, byte ptr [esi]
.text:0040D1CF                 test    bl, bl
.text:0040D1D1                 jz      loc_40CF09
.text:0040D1D7                 cmp     bl, 2Fh ; '/'
.text:0040D1DA                 jz      loc_40CF09
.text:0040D1E0                 cmp     bl, 5Ch ; '\'
.text:0040D1E3                 jnz     short loc_40D1C7
.text:0040D1E5                 jmp     loc_40CF09
.text:0040D1E5 ; ---------------------------------------------------------------------------
.text:0040D1EA                 align 10h
.text:0040D1F0
.text:0040D1F0 loc_40D1F0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040D1F0                                         ; _win32_longpath+2FB↑j ...
.text:0040D1F0                 inc     esi
.text:0040D1F1                 movzx   ebx, byte ptr [esi]
.text:0040D1F4                 test    bl, bl
.text:0040D1F6                 jz      loc_40CF09
.text:0040D1FC                 cmp     bl, 2Fh ; '/'
.text:0040D1FF                 jz      short loc_40D1F0
.text:0040D201                 cmp     bl, 5Ch ; '\'
.text:0040D204                 jz      short loc_40D1F0
.text:0040D206                 jmp     short loc_40D1AD
.text:0040D208 ; ---------------------------------------------------------------------------
.text:0040D208
.text:0040D208 loc_40D208:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040D208                                         ; _win32_longpath+2A9↑j ...
.text:0040D208                 inc     esi
.text:0040D209                 movzx   ebx, byte ptr [esi]
.text:0040D20C                 test    bl, bl
.text:0040D20E                 jz      loc_40CF09
.text:0040D214                 cmp     bl, 2Fh ; '/'
.text:0040D217                 jz      short loc_40D208
.text:0040D219                 cmp     bl, 5Ch ; '\'
.text:0040D21C                 jz      short loc_40D208
.text:0040D21E                 jmp     loc_40D15F
.text:0040D223 ; ---------------------------------------------------------------------------
.text:0040D223
.text:0040D223 loc_40D223:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040D223                 movzx   ebx, byte ptr [esi]
.text:0040D226                 jmp     loc_40D15F
.text:0040D22B ; ---------------------------------------------------------------------------
.text:0040D22B
.text:0040D22B loc_40D22B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040D22B                 movzx   ecx, byte ptr [eax]
.text:0040D22E                 mov     esi, eax
.text:0040D230                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040D235                 add     esi, 2
.text:0040D238                 lea     ebp, [esp+12h]
.text:0040D23C                 mov     [esp+278h+Destination], cl
.text:0040D240                 jmp     loc_40CF09
.text:0040D240 _win32_longpath endp
.text:0040D240
.text:0040D240 ; ---------------------------------------------------------------------------
.text:0040D245                 align 10h
.text:0040D250                 sub     esp, 0Ch
.text:0040D253                 mov     edx, [esp+10h]
.text:0040D257                 mov     dword ptr [esp+4], 0
.text:0040D25F                 mov     [esp], edx
.text:0040D262                 call    sub_40E8B0
.text:0040D267                 inc     eax
.text:0040D268                 setnz   dl
.text:0040D26B                 add     esp, 0Ch
.text:0040D26E                 movzx   eax, dl
.text:0040D271                 retn
.text:0040D271 ; ---------------------------------------------------------------------------
.text:0040D272                 align 10h
.text:0040D280
.text:0040D280 ; =============== S U B R O U T I N E =======================================
.text:0040D280
.text:0040D280
.text:0040D280 sub_40D280      proc near               ; CODE XREF: sub_40E780+AA↓p
.text:0040D280                                         ; sub_411010+B4↓p
.text:0040D280
.text:0040D280 arg_0           = dword ptr  4
.text:0040D280
.text:0040D280                 mov     ecx, [esp+arg_0]
.text:0040D284                 mov     edx, ecx
.text:0040D286                 movzx   eax, byte ptr [ecx]
.text:0040D289                 test    al, al
.text:0040D28B                 jz      short loc_40D29C
.text:0040D28D                 lea     esi, [esi+0]
.text:0040D290
.text:0040D290 loc_40D290:                             ; CODE XREF: sub_40D280+1A↓j
.text:0040D290                 cmp     al, 5Ch ; '\'
.text:0040D292                 jz      short loc_40D2A0
.text:0040D294
.text:0040D294 loc_40D294:                             ; CODE XREF: sub_40D280+23↓j
.text:0040D294                 inc     edx
.text:0040D295                 movzx   eax, byte ptr [edx]
.text:0040D298                 test    al, al
.text:0040D29A                 jnz     short loc_40D290
.text:0040D29C
.text:0040D29C loc_40D29C:                             ; CODE XREF: sub_40D280+B↑j
.text:0040D29C                 mov     eax, ecx
.text:0040D29E                 retn
.text:0040D29E ; ---------------------------------------------------------------------------
.text:0040D29F                 align 10h
.text:0040D2A0
.text:0040D2A0 loc_40D2A0:                             ; CODE XREF: sub_40D280+12↑j
.text:0040D2A0                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D2A3                 jmp     short loc_40D294
.text:0040D2A3 sub_40D280      endp
.text:0040D2A3
.text:0040D2A3 ; ---------------------------------------------------------------------------
.text:0040D2A5                 align 10h
.text:0040D2B0                 push    ebx
.text:0040D2B1                 sub     esp, 8
.text:0040D2B4                 mov     ebx, [esp+14h]
.text:0040D2B8                 mov     edx, [esp+10h]
.text:0040D2BC                 mov     [esp], ebx
.text:0040D2BF                 mov     [esp+4], edx
.text:0040D2C3                 call    strcpy
.text:0040D2C8                 movzx   eax, byte ptr [ebx]
.text:0040D2CB                 mov     edx, ebx
.text:0040D2CD                 test    al, al
.text:0040D2CF                 jz      short loc_40D2EC
.text:0040D2D1                 jmp     short loc_40D2E0
.text:0040D2D1 ; ---------------------------------------------------------------------------
.text:0040D2D3                 align 10h
.text:0040D2E0
.text:0040D2E0 loc_40D2E0:                             ; CODE XREF: .text:0040D2D1↑j
.text:0040D2E0                                         ; .text:0040D2EA↓j
.text:0040D2E0                 cmp     al, 5Ch ; '\'
.text:0040D2E2                 jz      short loc_40D2F3
.text:0040D2E4
.text:0040D2E4 loc_40D2E4:                             ; CODE XREF: .text:0040D2F6↓j
.text:0040D2E4                 inc     edx
.text:0040D2E5                 movzx   eax, byte ptr [edx]
.text:0040D2E8                 test    al, al
.text:0040D2EA                 jnz     short loc_40D2E0
.text:0040D2EC
.text:0040D2EC loc_40D2EC:                             ; CODE XREF: .text:0040D2CF↑j
.text:0040D2EC                 add     esp, 8
.text:0040D2EF                 xor     eax, eax
.text:0040D2F1                 pop     ebx
.text:0040D2F2                 retn
.text:0040D2F3 ; ---------------------------------------------------------------------------
.text:0040D2F3
.text:0040D2F3 loc_40D2F3:                             ; CODE XREF: .text:0040D2E2↑j
.text:0040D2F3                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D2F6                 jmp     short loc_40D2E4
.text:0040D2F6 ; ---------------------------------------------------------------------------
.text:0040D2F8                 align 10h
.text:0040D300
.text:0040D300 ; =============== S U B R O U T I N E =======================================
.text:0040D300
.text:0040D300
.text:0040D300 sub_40D300      proc near               ; CODE XREF: sub_40BB80+16↑p
.text:0040D300                                         ; sub_40C080+1F↑p ...
.text:0040D300
.text:0040D300 arg_0           = dword ptr  4
.text:0040D300
.text:0040D300                 mov     ecx, [esp+arg_0]
.text:0040D304                 mov     edx, ecx
.text:0040D306                 movzx   eax, byte ptr [ecx]
.text:0040D309                 test    al, al
.text:0040D30B                 jz      short loc_40D31C
.text:0040D30D                 lea     esi, [esi+0]
.text:0040D310
.text:0040D310 loc_40D310:                             ; CODE XREF: sub_40D300+1A↓j
.text:0040D310                 cmp     al, 2Fh ; '/'
.text:0040D312                 jz      short loc_40D320
.text:0040D314
.text:0040D314 loc_40D314:                             ; CODE XREF: sub_40D300+23↓j
.text:0040D314                 inc     edx
.text:0040D315                 movzx   eax, byte ptr [edx]
.text:0040D318                 test    al, al
.text:0040D31A                 jnz     short loc_40D310
.text:0040D31C
.text:0040D31C loc_40D31C:                             ; CODE XREF: sub_40D300+B↑j
.text:0040D31C                 mov     eax, ecx
.text:0040D31E                 retn
.text:0040D31E ; ---------------------------------------------------------------------------
.text:0040D31F                 align 10h
.text:0040D320
.text:0040D320 loc_40D320:                             ; CODE XREF: sub_40D300+12↑j
.text:0040D320                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D323                 jmp     short loc_40D314
.text:0040D323 sub_40D300      endp
.text:0040D323
.text:0040D323 ; ---------------------------------------------------------------------------
.text:0040D325                 align 10h
.text:0040D330                 push    ebx
.text:0040D331                 sub     esp, 8
.text:0040D334                 mov     ebx, [esp+14h]
.text:0040D338                 mov     edx, [esp+10h]
.text:0040D33C                 mov     [esp], ebx
.text:0040D33F                 mov     [esp+4], edx
.text:0040D343                 call    strcpy
.text:0040D348                 movzx   eax, byte ptr [ebx]
.text:0040D34B                 mov     edx, ebx
.text:0040D34D                 test    al, al
.text:0040D34F                 jz      short loc_40D36C
.text:0040D351                 jmp     short loc_40D360
.text:0040D351 ; ---------------------------------------------------------------------------
.text:0040D353                 align 10h
.text:0040D360
.text:0040D360 loc_40D360:                             ; CODE XREF: .text:0040D351↑j
.text:0040D360                                         ; .text:0040D36A↓j
.text:0040D360                 cmp     al, 2Fh ; '/'
.text:0040D362                 jz      short loc_40D373
.text:0040D364
.text:0040D364 loc_40D364:                             ; CODE XREF: .text:0040D376↓j
.text:0040D364                 inc     edx
.text:0040D365                 movzx   eax, byte ptr [edx]
.text:0040D368                 test    al, al
.text:0040D36A                 jnz     short loc_40D360
.text:0040D36C
.text:0040D36C loc_40D36C:                             ; CODE XREF: .text:0040D34F↑j
.text:0040D36C                 add     esp, 8
.text:0040D36F                 xor     eax, eax
.text:0040D371                 pop     ebx
.text:0040D372                 retn
.text:0040D373 ; ---------------------------------------------------------------------------
.text:0040D373
.text:0040D373 loc_40D373:                             ; CODE XREF: .text:0040D362↑j
.text:0040D373                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D376                 jmp     short loc_40D364
.text:0040D376 ; ---------------------------------------------------------------------------
.text:0040D378                 align 10h
.text:0040D380                 push    ebx
.text:0040D381                 sub     esp, 8
.text:0040D384                 mov     ebx, [esp+14h]
.text:0040D388                 mov     edx, [esp+10h]
.text:0040D38C                 mov     [esp+4], ebx
.text:0040D390                 mov     [esp], edx
.text:0040D393                 call    sub_40E730
.text:0040D398                 movzx   eax, byte ptr [ebx]
.text:0040D39B                 mov     edx, ebx
.text:0040D39D                 test    al, al
.text:0040D39F                 jz      short loc_40D3BC
.text:0040D3A1                 jmp     short loc_40D3B0
.text:0040D3A1 ; ---------------------------------------------------------------------------
.text:0040D3A3                 align 10h
.text:0040D3B0
.text:0040D3B0 loc_40D3B0:                             ; CODE XREF: .text:0040D3A1↑j
.text:0040D3B0                                         ; .text:0040D3BA↓j
.text:0040D3B0                 cmp     al, 2Fh ; '/'
.text:0040D3B2                 jz      short loc_40D3C3
.text:0040D3B4
.text:0040D3B4 loc_40D3B4:                             ; CODE XREF: .text:0040D3C6↓j
.text:0040D3B4                 inc     edx
.text:0040D3B5                 movzx   eax, byte ptr [edx]
.text:0040D3B8                 test    al, al
.text:0040D3BA                 jnz     short loc_40D3B0
.text:0040D3BC
.text:0040D3BC loc_40D3BC:                             ; CODE XREF: .text:0040D39F↑j
.text:0040D3BC                 add     esp, 8
.text:0040D3BF                 xor     eax, eax
.text:0040D3C1                 pop     ebx
.text:0040D3C2                 retn
.text:0040D3C3 ; ---------------------------------------------------------------------------
.text:0040D3C3
.text:0040D3C3 loc_40D3C3:                             ; CODE XREF: .text:0040D3B2↑j
.text:0040D3C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D3C6                 jmp     short loc_40D3B4
.text:0040D3C6 ; ---------------------------------------------------------------------------
.text:0040D3C8                 align 10h
.text:0040D3D0                 push    ebx
.text:0040D3D1                 sub     esp, 8
.text:0040D3D4                 mov     ebx, [esp+14h]
.text:0040D3D8                 mov     edx, [esp+10h]
.text:0040D3DC                 mov     [esp], ebx
.text:0040D3DF                 mov     [esp+4], edx
.text:0040D3E3                 call    sub_40E730
.text:0040D3E8                 movzx   eax, byte ptr [ebx]
.text:0040D3EB                 mov     edx, ebx
.text:0040D3ED                 test    al, al
.text:0040D3EF                 jz      short loc_40D40C
.text:0040D3F1                 jmp     short loc_40D400
.text:0040D3F1 ; ---------------------------------------------------------------------------
.text:0040D3F3                 align 10h
.text:0040D400
.text:0040D400 loc_40D400:                             ; CODE XREF: .text:0040D3F1↑j
.text:0040D400                                         ; .text:0040D40A↓j
.text:0040D400                 cmp     al, 5Ch ; '\'
.text:0040D402                 jz      short loc_40D411
.text:0040D404
.text:0040D404 loc_40D404:                             ; CODE XREF: .text:0040D414↓j
.text:0040D404                 inc     edx
.text:0040D405                 movzx   eax, byte ptr [edx]
.text:0040D408                 test    al, al
.text:0040D40A                 jnz     short loc_40D400
.text:0040D40C
.text:0040D40C loc_40D40C:                             ; CODE XREF: .text:0040D3EF↑j
.text:0040D40C                 add     esp, 8
.text:0040D40F                 pop     ebx
.text:0040D410                 retn
.text:0040D411 ; ---------------------------------------------------------------------------
.text:0040D411
.text:0040D411 loc_40D411:                             ; CODE XREF: .text:0040D402↑j
.text:0040D411                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D414                 jmp     short loc_40D404
.text:0040D414 ; ---------------------------------------------------------------------------
.text:0040D416                 align 10h
.text:0040D420
.text:0040D420 ; =============== S U B R O U T I N E =======================================
.text:0040D420
.text:0040D420
.text:0040D420 ; int __cdecl sub_40D420(LPSTR)
.text:0040D420 sub_40D420      proc near               ; CODE XREF: .text:0040D4AE↓p
.text:0040D420                                         ; .text:0040D4EE↓p ...
.text:0040D420
.text:0040D420 hModule         = dword ptr -1Ch
.text:0040D420 lpFilename      = dword ptr -18h
.text:0040D420 nSize           = dword ptr -14h
.text:0040D420 arg_0           = dword ptr  4
.text:0040D420
.text:0040D420                 push    esi
.text:0040D421                 push    ebx
.text:0040D422                 sub     esp, 14h
.text:0040D425                 mov     esi, [esp+1Ch+arg_0]
.text:0040D429                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040D431                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040D438                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040D43C                 call    GetModuleFileNameA
.text:0040D441                 sub     esp, 0Ch
.text:0040D444                 test    eax, eax
.text:0040D446                 jz      short loc_40D488
.text:0040D448                 cmp     eax, 104h
.text:0040D44D                 jg      short loc_40D479
.text:0040D44F
.text:0040D44F loc_40D44F:                             ; CODE XREF: sub_40D420+66↓j
.text:0040D44F                                         ; sub_40D420+78↓j
.text:0040D44F                 movzx   eax, byte ptr [esi]
.text:0040D452                 mov     edx, esi
.text:0040D454                 test    al, al
.text:0040D456                 jz      short loc_40D46C
.text:0040D458                 nop
.text:0040D459                 lea     esi, [esi+0]
.text:0040D460
.text:0040D460 loc_40D460:                             ; CODE XREF: sub_40D420+4A↓j
.text:0040D460                 cmp     al, 5Ch ; '\'
.text:0040D462                 jz      short loc_40D474
.text:0040D464
.text:0040D464 loc_40D464:                             ; CODE XREF: sub_40D420+57↓j
.text:0040D464                 inc     edx
.text:0040D465                 movzx   eax, byte ptr [edx]
.text:0040D468                 test    al, al
.text:0040D46A                 jnz     short loc_40D460
.text:0040D46C
.text:0040D46C loc_40D46C:                             ; CODE XREF: sub_40D420+36↑j
.text:0040D46C                 add     esp, 14h
.text:0040D46F                 mov     eax, esi
.text:0040D471                 pop     ebx
.text:0040D472                 pop     esi
.text:0040D473                 retn
.text:0040D474 ; ---------------------------------------------------------------------------
.text:0040D474
.text:0040D474 loc_40D474:                             ; CODE XREF: sub_40D420+42↑j
.text:0040D474                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D477                 jmp     short loc_40D464
.text:0040D479 ; ---------------------------------------------------------------------------
.text:0040D479
.text:0040D479 loc_40D479:                             ; CODE XREF: sub_40D420+2D↑j
.text:0040D479                 call    _errno
.text:0040D47E                 mov     dword ptr [eax], 26h ; '&'
.text:0040D484                 xor     esi, esi
.text:0040D486                 jmp     short loc_40D44F
.text:0040D488 ; ---------------------------------------------------------------------------
.text:0040D488
.text:0040D488 loc_40D488:                             ; CODE XREF: sub_40D420+26↑j
.text:0040D488                 call    sub_40E710
.text:0040D48D                 mov     ebx, eax
.text:0040D48F                 xor     esi, esi
.text:0040D491                 call    _errno
.text:0040D496                 mov     [eax], ebx
.text:0040D498                 jmp     short loc_40D44F
.text:0040D498 sub_40D420      endp
.text:0040D498
.text:0040D498 ; ---------------------------------------------------------------------------
.text:0040D49A                 align 10h
.text:0040D4A0                 sub     esp, 0Ch
.text:0040D4A3                 mov     [esp+8], ebx
.text:0040D4A7                 mov     ebx, [esp+10h]
.text:0040D4AB                 mov     [esp], ebx
.text:0040D4AE                 call    sub_40D420
.text:0040D4B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D4BB                 mov     [esp], ebx
.text:0040D4BE                 call    strrchr
.text:0040D4C3                 test    eax, eax
.text:0040D4C5                 jz      short loc_40D4CA
.text:0040D4C7                 lea     ebx, [eax+1]
.text:0040D4CA
.text:0040D4CA loc_40D4CA:                             ; CODE XREF: .text:0040D4C5↑j
.text:0040D4CA                 mov     eax, ebx
.text:0040D4CC                 mov     ebx, [esp+8]
.text:0040D4D0                 add     esp, 0Ch
.text:0040D4D3                 retn
.text:0040D4D3 ; ---------------------------------------------------------------------------
.text:0040D4D4                 align 10h
.text:0040D4E0                 sub     esp, 0Ch
.text:0040D4E3                 mov     [esp+8], ebx
.text:0040D4E7                 mov     ebx, [esp+10h]
.text:0040D4EB                 mov     [esp], ebx
.text:0040D4EE                 call    sub_40D420
.text:0040D4F3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D4FB                 mov     [esp], ebx
.text:0040D4FE                 call    strrchr
.text:0040D503                 test    eax, eax
.text:0040D505                 jz      short loc_40D50A
.text:0040D507                 mov     byte ptr [eax], 0
.text:0040D50A
.text:0040D50A loc_40D50A:                             ; CODE XREF: .text:0040D505↑j
.text:0040D50A                 mov     eax, ebx
.text:0040D50C                 mov     ebx, [esp+8]
.text:0040D510                 add     esp, 0Ch
.text:0040D513                 retn
.text:0040D513 ; ---------------------------------------------------------------------------
.text:0040D514                 align 10h
.text:0040D520                 sub     esp, 0Ch
.text:0040D523                 mov     [esp+8], ebx
.text:0040D527                 mov     ebx, [esp+10h]
.text:0040D52B                 mov     [esp], ebx
.text:0040D52E                 call    sub_40D420
.text:0040D533                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D53B                 mov     [esp], ebx
.text:0040D53E                 call    strrchr
.text:0040D543                 test    eax, eax
.text:0040D545                 jz      short loc_40D54A
.text:0040D547                 mov     byte ptr [eax], 0
.text:0040D54A
.text:0040D54A loc_40D54A:                             ; CODE XREF: .text:0040D545↑j
.text:0040D54A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D552                 mov     [esp], ebx
.text:0040D555                 call    strrchr
.text:0040D55A                 test    eax, eax
.text:0040D55C                 jz      short loc_40D561
.text:0040D55E                 mov     byte ptr [eax], 0
.text:0040D561
.text:0040D561 loc_40D561:                             ; CODE XREF: .text:0040D55C↑j
.text:0040D561                 mov     eax, ebx
.text:0040D563                 mov     ebx, [esp+8]
.text:0040D567                 add     esp, 0Ch
.text:0040D56A                 retn
.text:0040D56A ; ---------------------------------------------------------------------------
.text:0040D56B                 align 10h
.text:0040D570                 sub     esp, 1Ch
.text:0040D573                 mov     edx, [esp+20h]
.text:0040D577                 mov     [esp+10h], ebx
.text:0040D57B                 xor     ebx, ebx
.text:0040D57D                 mov     [esp+14h], esi
.text:0040D581                 mov     [esp+18h], edi
.text:0040D585                 mov     [esp], edx
.text:0040D588                 call    sub_40E760
.text:0040D58D                 mov     edx, [esp+24h]
.text:0040D591                 mov     edi, eax
.text:0040D593                 mov     [esp], edx
.text:0040D596                 call    sub_40E760
.text:0040D59B                 mov     [esp+4], eax
.text:0040D59F                 mov     esi, eax
.text:0040D5A1                 mov     [esp], edi
.text:0040D5A4                 call    _stricmp_0
.text:0040D5A9                 mov     [esp], edi
.text:0040D5AC                 test    eax, eax
.text:0040D5AE                 setz    bl
.text:0040D5B1                 call    free
.text:0040D5B6                 mov     [esp], esi
.text:0040D5B9                 call    free
.text:0040D5BE                 mov     eax, ebx
.text:0040D5C0                 mov     esi, [esp+14h]
.text:0040D5C4                 mov     ebx, [esp+10h]
.text:0040D5C8                 mov     edi, [esp+18h]
.text:0040D5CC                 add     esp, 1Ch
.text:0040D5CF                 retn
.text:0040D5D0 ; ---------------------------------------------------------------------------
.text:0040D5D0                 xor     eax, eax
.text:0040D5D2                 retn
.text:0040D5D2 ; ---------------------------------------------------------------------------
.text:0040D5D3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040D607↓o
.text:0040D5E0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040D616↓o
.text:0040D5F0 ; ---------------------------------------------------------------------------
.text:0040D5F0                 sub     esp, 1Ch
.text:0040D5F3                 mov     [esp+10h], ebx
.text:0040D5F7                 mov     ebx, [esp+20h]
.text:0040D5FB                 mov     [esp+18h], edi
.text:0040D5FF                 mov     edi, [esp+24h]
.text:0040D603                 mov     [esp+14h], esi
.text:0040D607                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040D60E                 call    GetModuleHandleA
.text:0040D613                 sub     esp, 4
.text:0040D616                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040D61E                 mov     [esp], eax
.text:0040D621                 call    GetProcAddress
.text:0040D626                 sub     esp, 8
.text:0040D629                 test    eax, eax
.text:0040D62B                 jz      short loc_40D643
.text:0040D62D                 mov     dword ptr [esp+8], 104h
.text:0040D635                 mov     [esp+4], ebx
.text:0040D639                 mov     [esp], edi
.text:0040D63C                 call    eax
.text:0040D63E                 sub     esp, 0Ch
.text:0040D641                 mov     esi, eax
.text:0040D643
.text:0040D643 loc_40D643:                             ; CODE XREF: .text:0040D62B↑j
.text:0040D643                 test    esi, esi
.text:0040D645                 jz      short loc_40D660
.text:0040D647
.text:0040D647 loc_40D647:                             ; CODE XREF: .text:0040D67B↓j
.text:0040D647                 mov     eax, ebx
.text:0040D649                 mov     esi, [esp+14h]
.text:0040D64D                 mov     ebx, [esp+10h]
.text:0040D651                 mov     edi, [esp+18h]
.text:0040D655                 add     esp, 1Ch
.text:0040D658                 retn
.text:0040D658 ; ---------------------------------------------------------------------------
.text:0040D659                 align 10h
.text:0040D660
.text:0040D660 loc_40D660:                             ; CODE XREF: .text:0040D645↑j
.text:0040D660                 call    sub_40F1F0
.text:0040D665                 mov     [esp], ebx
.text:0040D668                 mov     [esp+4], edi
.text:0040D66C                 call    strcpy
.text:0040D671                 mov     [esp], ebx
.text:0040D674                 call    _win32_longpath
.text:0040D679                 mov     ebx, eax
.text:0040D67B                 jmp     short loc_40D647
.text:0040D67B ; ---------------------------------------------------------------------------
.text:0040D67D                 align 10h
.text:0040D680                 sub     esp, 1Ch
.text:0040D683                 mov     [esp+18h], edi
.text:0040D687                 mov     edi, [esp+20h]
.text:0040D68B                 mov     [esp+10h], ebx
.text:0040D68F                 mov     [esp+14h], esi
.text:0040D693                 mov     dword ptr [esp+8], 0
.text:0040D69B                 mov     dword ptr [esp+4], 0
.text:0040D6A3                 mov     [esp], edi
.text:0040D6A6                 call    GetShortPathNameA
.text:0040D6AB                 sub     esp, 0Ch
.text:0040D6AE                 mov     ebx, eax
.text:0040D6B0                 test    eax, eax
.text:0040D6B2                 jz      short loc_40D700
.text:0040D6B4                 lea     edx, [eax+1]
.text:0040D6B7                 mov     [esp], edx
.text:0040D6BA                 call    malloc
.text:0040D6BF                 test    eax, eax
.text:0040D6C1                 mov     esi, eax
.text:0040D6C3                 jz      short loc_40D700
.text:0040D6C5                 mov     [esp+8], ebx
.text:0040D6C9                 mov     [esp+4], eax
.text:0040D6CD                 mov     [esp], edi
.text:0040D6D0                 call    GetShortPathNameA
.text:0040D6D5                 sub     esp, 0Ch
.text:0040D6D8                 mov     edx, esi
.text:0040D6DA                 test    eax, eax
.text:0040D6DC                 jz      short loc_40D6F2
.text:0040D6DE                 mov     esi, esi
.text:0040D6E0
.text:0040D6E0 loc_40D6E0:                             ; CODE XREF: .text:0040D710↓j
.text:0040D6E0                 mov     ebx, [esp+10h]
.text:0040D6E4                 mov     eax, edx
.text:0040D6E6                 mov     esi, [esp+14h]
.text:0040D6EA                 mov     edi, [esp+18h]
.text:0040D6EE                 add     esp, 1Ch
.text:0040D6F1                 retn
.text:0040D6F2 ; ---------------------------------------------------------------------------
.text:0040D6F2
.text:0040D6F2 loc_40D6F2:                             ; CODE XREF: .text:0040D6DC↑j
.text:0040D6F2                 mov     [esp], esi
.text:0040D6F5                 call    free
.text:0040D6FA                 lea     esi, [esi+0]
.text:0040D700
.text:0040D700 loc_40D700:                             ; CODE XREF: .text:0040D6B2↑j
.text:0040D700                                         ; .text:0040D6C3↑j
.text:0040D700                 call    sub_40E710
.text:0040D705                 mov     esi, eax
.text:0040D707                 call    _errno
.text:0040D70C                 mov     [eax], esi
.text:0040D70E                 mov     edx, edi
.text:0040D710                 jmp     short loc_40D6E0
.text:0040D710 ; ---------------------------------------------------------------------------
.text:0040D712                 align 10h
.text:0040D720 ; const char String[4]
.text:0040D720 String          db ' :/',0              ; DATA XREF: sub_40D730+FA↓o
.text:0040D724                 align 10h
.text:0040D730
.text:0040D730 ; =============== S U B R O U T I N E =======================================
.text:0040D730
.text:0040D730
.text:0040D730 ; int __cdecl sub_40D730(LPCSTR)
.text:0040D730 sub_40D730      proc near               ; CODE XREF: sub_40BB80+E↑p
.text:0040D730                                         ; sub_40C080+17↑p ...
.text:0040D730
.text:0040D730 Str             = dword ptr -1Ch
.text:0040D730 Val             = dword ptr -18h
.text:0040D730 Count           = dword ptr -14h
.text:0040D730 var_10          = dword ptr -10h
.text:0040D730 var_C           = dword ptr -0Ch
.text:0040D730 var_8           = dword ptr -8
.text:0040D730 var_4           = dword ptr -4
.text:0040D730 arg_0           = dword ptr  4
.text:0040D730
.text:0040D730                 sub     esp, 1Ch
.text:0040D733                 mov     edx, [esp+1Ch+arg_0]
.text:0040D737                 mov     [esp+1Ch+var_8], edi
.text:0040D73B                 mov     [esp+1Ch+var_10], ebx
.text:0040D73F                 mov     [esp+1Ch+var_C], esi
.text:0040D743                 mov     [esp+1Ch+var_4], ebp
.text:0040D747                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040D74A                 call    sub_40E760
.text:0040D74F                 test    eax, eax
.text:0040D751                 mov     edi, eax
.text:0040D753                 jz      short loc_40D790
.text:0040D755                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D758                 call    strlen
.text:0040D75D                 cmp     eax, 2
.text:0040D760                 jbe     short loc_40D76C
.text:0040D762                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040D766                 jz      loc_40D820
.text:0040D76C
.text:0040D76C loc_40D76C:                             ; CODE XREF: sub_40D730+30↑j
.text:0040D76C                                         ; sub_40D730+F4↓j
.text:0040D76C                 test    edi, edi
.text:0040D76E                 jz      short loc_40D790
.text:0040D770                 mov     [esp+1Ch+Str], edi ; Str
.text:0040D773                 call    strlen
.text:0040D778                 cmp     eax, 4
.text:0040D77B                 mov     ebp, eax
.text:0040D77D                 jle     short loc_40D790
.text:0040D77F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040D782                 jz      short loc_40D7B0
.text:0040D784                 lea     esi, [esi+0]
.text:0040D78A                 lea     edi, [edi+0]
.text:0040D790
.text:0040D790 loc_40D790:                             ; CODE XREF: sub_40D730+23↑j
.text:0040D790                                         ; sub_40D730+3E↑j ...
.text:0040D790                 xor     esi, esi
.text:0040D792
.text:0040D792 loc_40D792:                             ; CODE XREF: sub_40D730+CD↓j
.text:0040D792                                         ; sub_40D730+115↓j
.text:0040D792                 mov     [esp+1Ch+Str], edi ; Block
.text:0040D795                 call    free
.text:0040D79A                 mov     eax, esi
.text:0040D79C                 mov     ebx, [esp+1Ch+var_10]
.text:0040D7A0                 mov     esi, [esp+1Ch+var_C]
.text:0040D7A4                 mov     edi, [esp+1Ch+var_8]
.text:0040D7A8                 mov     ebp, [esp+1Ch+var_4]
.text:0040D7AC                 add     esp, 1Ch
.text:0040D7AF                 retn
.text:0040D7B0 ; ---------------------------------------------------------------------------
.text:0040D7B0
.text:0040D7B0 loc_40D7B0:                             ; CODE XREF: sub_40D730+52↑j
.text:0040D7B0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040D7B4                 jnz     short loc_40D790
.text:0040D7B6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D7BE                 lea     ecx, [edi+2]
.text:0040D7C1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040D7C4                 call    strchr
.text:0040D7C9                 test    eax, eax
.text:0040D7CB                 jnz     short loc_40D7FF
.text:0040D7CD
.text:0040D7CD loc_40D7CD:                             ; CODE XREF: sub_40D730+E2↓j
.text:0040D7CD                 inc     ebp
.text:0040D7CE
.text:0040D7CE loc_40D7CE:                             ; CODE XREF: sub_40D730+E9↓j
.text:0040D7CE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040D7D6                 lea     ebx, [ebp+1]
.text:0040D7D9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040D7DC                 call    calloc
.text:0040D7E1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D7E4                 mov     esi, eax
.text:0040D7E6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040D7EA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040D7EE                 call    strncpy
.text:0040D7F3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040D7F8                 mov     byte ptr [ebp+esi+0], 0
.text:0040D7FD                 jmp     short loc_40D792
.text:0040D7FF ; ---------------------------------------------------------------------------
.text:0040D7FF
.text:0040D7FF loc_40D7FF:                             ; CODE XREF: sub_40D730+9B↑j
.text:0040D7FF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D807                 inc     eax
.text:0040D808                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D80B                 call    strchr
.text:0040D810                 test    eax, eax
.text:0040D812                 jz      short loc_40D7CD
.text:0040D814                 sub     eax, edi
.text:0040D816                 lea     ebp, [eax+1]
.text:0040D819                 jmp     short loc_40D7CE
.text:0040D819 ; ---------------------------------------------------------------------------
.text:0040D81B                 align 10h
.text:0040D820
.text:0040D820 loc_40D820:                             ; CODE XREF: sub_40D730+36↑j
.text:0040D820                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040D824                 jnz     loc_40D76C
.text:0040D82A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040D831                 call    _strdup
.text:0040D836                 movsx   edx, byte ptr [edi]
.text:0040D839                 mov     esi, eax
.text:0040D83B                 mov     [esp+1Ch+Str], edx ; C
.text:0040D83E                 call    toupper
.text:0040D843                 mov     [esi], al
.text:0040D845                 jmp     loc_40D792
.text:0040D845 sub_40D730      endp
.text:0040D845
.text:0040D845 ; ---------------------------------------------------------------------------
.text:0040D84A                 align 10h
.text:0040D850
.text:0040D850 ; =============== S U B R O U T I N E =======================================
.text:0040D850
.text:0040D850
.text:0040D850 sub_40D850      proc near               ; CODE XREF: .text:0040D9A4↓p
.text:0040D850                                         ; .text:0040DA88↓p
.text:0040D850
.text:0040D850 Str             = dword ptr -2Ch
.text:0040D850 Val             = dword ptr -28h
.text:0040D850 var_18          = dword ptr -18h
.text:0040D850 var_11          = byte ptr -11h
.text:0040D850 arg_0           = dword ptr  4
.text:0040D850
.text:0040D850                 push    ebp
.text:0040D851                 push    edi
.text:0040D852                 push    esi
.text:0040D853                 push    ebx
.text:0040D854                 sub     esp, 1Ch
.text:0040D857                 mov     edx, [esp+2Ch+arg_0]
.text:0040D85B                 cmp     edx, ds:dword_415380
.text:0040D861                 mov     [esp+2Ch+var_11], 0
.text:0040D866                 jz      loc_40D964
.text:0040D86C                 mov     ebx, ds:dword_415370
.text:0040D872                 test    ebx, ebx
.text:0040D874                 jz      short loc_40D8E2
.text:0040D876
.text:0040D876 loc_40D876:                             ; CODE XREF: sub_40D850+10F↓j
.text:0040D876                 mov     ebx, [esp+2Ch+arg_0]
.text:0040D87A                 xor     edi, edi
.text:0040D87C                 xor     esi, esi
.text:0040D87E                 mov     ebp, offset dword_415398
.text:0040D883                 lea     esi, [esi+0]
.text:0040D889                 lea     edi, [edi+0]
.text:0040D890
.text:0040D890 loc_40D890:                             ; CODE XREF: sub_40D850+60↓j
.text:0040D890                 mov     edx, [ebp+4]
.text:0040D893                 mov     ecx, edi
.text:0040D895                 mov     eax, [ebp+0]
.text:0040D898                 shl     ecx, 4
.text:0040D89B                 mov     [esp+2Ch+var_18], ecx
.text:0040D89F                 mov     ecx, edx
.text:0040D8A1                 xor     eax, ebx
.text:0040D8A3                 xor     ecx, esi
.text:0040D8A5                 or      ecx, eax
.text:0040D8A7                 jz      short loc_40D8D1
.text:0040D8A9                 inc     edi
.text:0040D8AA                 add     ebp, 10h
.text:0040D8AD                 cmp     edi, 20h ; ' '
.text:0040D8B0                 jle     short loc_40D890
.text:0040D8B2
.text:0040D8B2 loc_40D8B2:                             ; CODE XREF: sub_40D850+90↓j
.text:0040D8B2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040D8B7                 mov     eax, [esp+2Ch+arg_0]
.text:0040D8BB                 mov     byte_414070, bl
.text:0040D8C1                 mov     ds:dword_415380, eax
.text:0040D8C6                 movsx   eax, bl
.text:0040D8C9
.text:0040D8C9 loc_40D8C9:                             ; CODE XREF: sub_40D850+11B↓j
.text:0040D8C9                 add     esp, 1Ch
.text:0040D8CC                 pop     ebx
.text:0040D8CD                 pop     esi
.text:0040D8CE                 pop     edi
.text:0040D8CF                 pop     ebp
.text:0040D8D0                 retn
.text:0040D8D1 ; ---------------------------------------------------------------------------
.text:0040D8D1
.text:0040D8D1 loc_40D8D1:                             ; CODE XREF: sub_40D850+57↑j
.text:0040D8D1                 mov     edx, [esp+2Ch+var_18]
.text:0040D8D5                 movzx   eax, byte ptr ds:dword_415390[edx]
.text:0040D8DC                 mov     [esp+2Ch+var_11], al
.text:0040D8E0                 jmp     short loc_40D8B2
.text:0040D8E2 ; ---------------------------------------------------------------------------
.text:0040D8E2
.text:0040D8E2 loc_40D8E2:                             ; CODE XREF: sub_40D850+24↑j
.text:0040D8E2                 mov     [esp+2Ch+Str], 0
.text:0040D8E9                 call    sub_40FFD0
.text:0040D8EE                 test    eax, eax
.text:0040D8F0                 mov     ebx, eax
.text:0040D8F2                 jz      short loc_40D94C
.text:0040D8F4                 movzx   ecx, byte ptr [eax]
.text:0040D8F7                 mov     esi, 0FFFFFFF0h
.text:0040D8FC                 test    cl, cl
.text:0040D8FE                 jz      short loc_40D94C
.text:0040D900
.text:0040D900 loc_40D900:                             ; CODE XREF: sub_40D850+FA↓j
.text:0040D900                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040D903                 movsx   ebp, cl
.text:0040D906                 add     esi, 10h
.text:0040D909                 mov     ds:dword_415390[esi], ebp
.text:0040D90F                 mov     edi, ebp
.text:0040D911                 sar     edi, 1Fh
.text:0040D914                 mov     ds:dword_415394[esi], edi
.text:0040D91A                 call    sub_40C080
.text:0040D91F                 mov     ds:dword_415398[esi], eax
.text:0040D925                 xor     ecx, ecx
.text:0040D927                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040D92A                 mov     ds:dword_41539C[esi], ecx
.text:0040D930                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040D938                 call    strchr
.text:0040D93D                 mov     ebx, eax
.text:0040D93F                 inc     ebx
.text:0040D940                 jz      short loc_40D94C
.text:0040D942                 movzx   edx, byte ptr [eax+1]
.text:0040D946                 test    dl, dl
.text:0040D948                 mov     cl, dl
.text:0040D94A                 jnz     short loc_40D900
.text:0040D94C
.text:0040D94C loc_40D94C:                             ; CODE XREF: sub_40D850+A2↑j
.text:0040D94C                                         ; sub_40D850+AE↑j ...
.text:0040D94C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040D94F                 mov     esi, 1
.text:0040D954                 mov     ds:dword_415370, esi
.text:0040D95A                 call    free
.text:0040D95F                 jmp     loc_40D876
.text:0040D964 ; ---------------------------------------------------------------------------
.text:0040D964
.text:0040D964 loc_40D964:                             ; CODE XREF: sub_40D850+16↑j
.text:0040D964                 movsx   eax, byte_414070
.text:0040D96B                 jmp     loc_40D8C9
.text:0040D96B sub_40D850      endp
.text:0040D96B
.text:0040D96B ; ---------------------------------------------------------------------------
.text:0040D970 dword_40D970    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040D970                                         ; DATA XREF: .text:0040D993↓o
.text:0040D970                                         ; .text:0040DA73↓o
.text:0040D980 ; ---------------------------------------------------------------------------
.text:0040D980                 sub     esp, 1Ch
.text:0040D983                 mov     [esp+14h], esi
.text:0040D987                 mov     esi, [esp+20h]
.text:0040D98B                 mov     [esp+18h], edi
.text:0040D98F                 mov     [esp+10h], ebx
.text:0040D993                 mov     dword ptr [esp], offset dword_40D970
.text:0040D99A                 call    _strdup
.text:0040D99F                 mov     [esp], esi
.text:0040D9A2                 mov     edi, eax
.text:0040D9A4                 call    sub_40D850
.text:0040D9A9                 mov     [edi], al
.text:0040D9AB                 test    al, al
.text:0040D9AD                 jz      short loc_40D9C1
.text:0040D9AF                 mov     eax, edi
.text:0040D9B1                 mov     ebx, [esp+10h]
.text:0040D9B5                 mov     esi, [esp+14h]
.text:0040D9B9                 mov     edi, [esp+18h]
.text:0040D9BD                 add     esp, 1Ch
.text:0040D9C0                 retn
.text:0040D9C1 ; ---------------------------------------------------------------------------
.text:0040D9C1
.text:0040D9C1 loc_40D9C1:                             ; CODE XREF: .text:0040D9AD↑j
.text:0040D9C1                 mov     [esp], edi
.text:0040D9C4                 call    free
.text:0040D9C9                 mov     dword ptr [esp+4], 0
.text:0040D9D1                 mov     dword ptr [esp], 0
.text:0040D9D8                 call    GetCurrentDirectoryA
.text:0040D9DD                 sub     esp, 8
.text:0040D9E0                 lea     esi, [eax+1]
.text:0040D9E3                 mov     [esp], esi
.text:0040D9E6                 call    malloc
.text:0040D9EB                 mov     [esp+4], eax
.text:0040D9EF                 mov     edi, eax
.text:0040D9F1                 mov     [esp], esi
.text:0040D9F4                 call    GetCurrentDirectoryA
.text:0040D9F9                 sub     esp, 8
.text:0040D9FC                 test    eax, eax
.text:0040D9FE                 jnz     short loc_40DA20
.text:0040DA00                 mov     dword ptr [esp+20h], 40D974h
.text:0040DA08                 mov     ebx, [esp+10h]
.text:0040DA0C                 mov     esi, [esp+14h]
.text:0040DA10                 mov     edi, [esp+18h]
.text:0040DA14                 add     esp, 1Ch
.text:0040DA17                 jmp     _strdup
.text:0040DA17 ; ---------------------------------------------------------------------------
.text:0040DA1C                 align 10h
.text:0040DA20
.text:0040DA20 loc_40DA20:                             ; CODE XREF: .text:0040D9FE↑j
.text:0040DA20                 mov     [esp+20h], edi
.text:0040DA24                 mov     ebx, [esp+10h]
.text:0040DA28                 mov     esi, [esp+14h]
.text:0040DA2C                 mov     edi, [esp+18h]
.text:0040DA30                 add     esp, 1Ch
.text:0040DA33                 jmp     sub_40D730
.text:0040DA33 ; ---------------------------------------------------------------------------
.text:0040DA38                 align 10h
.text:0040DA40                 sub     esp, 7Ch
.text:0040DA43                 lea     edx, [esp+10h]
.text:0040DA47                 mov     [esp+8], edx
.text:0040DA4B                 mov     edx, [esp+80h]
.text:0040DA52                 mov     [esp+70h], ebx
.text:0040DA56                 mov     [esp+74h], esi
.text:0040DA5A                 mov     [esp+4], edx
.text:0040DA5E                 mov     [esp+78h], edi
.text:0040DA62                 mov     dword ptr [esp], 0
.text:0040DA69                 call    sub_40B2D0
.text:0040DA6E                 xor     edx, edx
.text:0040DA70                 inc     eax
.text:0040DA71                 jz      short loc_40DA95
.text:0040DA73                 mov     dword ptr [esp], offset dword_40D970
.text:0040DA7A                 mov     esi, [esp+20h]
.text:0040DA7E                 call    _strdup
.text:0040DA83                 mov     edi, eax
.text:0040DA85                 mov     [esp], esi
.text:0040DA88                 call    sub_40D850
.text:0040DA8D                 mov     [edi], al
.text:0040DA8F                 test    al, al
.text:0040DA91                 mov     edx, edi
.text:0040DA93                 jz      short loc_40DAA7
.text:0040DA95
.text:0040DA95 loc_40DA95:                             ; CODE XREF: .text:0040DA71↑j
.text:0040DA95                                         ; .text:0040DAF4↓j
.text:0040DA95                 mov     ebx, [esp+70h]
.text:0040DA99                 mov     eax, edx
.text:0040DA9B                 mov     esi, [esp+74h]
.text:0040DA9F                 mov     edi, [esp+78h]
.text:0040DAA3                 add     esp, 7Ch
.text:0040DAA6                 retn
.text:0040DAA7 ; ---------------------------------------------------------------------------
.text:0040DAA7
.text:0040DAA7 loc_40DAA7:                             ; CODE XREF: .text:0040DA93↑j
.text:0040DAA7                 mov     [esp], edi
.text:0040DAAA                 call    free
.text:0040DAAF                 mov     dword ptr [esp+4], 0
.text:0040DAB7                 mov     dword ptr [esp], 0
.text:0040DABE                 call    GetCurrentDirectoryA
.text:0040DAC3                 sub     esp, 8
.text:0040DAC6                 lea     esi, [eax+1]
.text:0040DAC9                 mov     [esp], esi
.text:0040DACC                 call    malloc
.text:0040DAD1                 mov     [esp+4], eax
.text:0040DAD5                 mov     edi, eax
.text:0040DAD7                 mov     [esp], esi
.text:0040DADA                 call    GetCurrentDirectoryA
.text:0040DADF                 sub     esp, 8
.text:0040DAE2                 test    eax, eax
.text:0040DAE4                 jnz     short loc_40DAF6
.text:0040DAE6                 mov     dword ptr [esp], 40D974h
.text:0040DAED                 call    _strdup
.text:0040DAF2
.text:0040DAF2 loc_40DAF2:                             ; CODE XREF: .text:0040DAFE↓j
.text:0040DAF2                 mov     edx, eax
.text:0040DAF4                 jmp     short loc_40DA95
.text:0040DAF6 ; ---------------------------------------------------------------------------
.text:0040DAF6
.text:0040DAF6 loc_40DAF6:                             ; CODE XREF: .text:0040DAE4↑j
.text:0040DAF6                 mov     [esp], edi
.text:0040DAF9                 call    sub_40D730
.text:0040DAFE                 jmp     short loc_40DAF2
.text:0040DB00
.text:0040DB00 ; =============== S U B R O U T I N E =======================================
.text:0040DB00
.text:0040DB00
.text:0040DB00 ; int __cdecl sub_40DB00(LPCSTR)
.text:0040DB00 sub_40DB00      proc near               ; CODE XREF: sub_40B2D0+38F↑p
.text:0040DB00
.text:0040DB00 String1         = dword ptr -1Ch
.text:0040DB00 String2         = dword ptr -18h
.text:0040DB00 var_C           = dword ptr -0Ch
.text:0040DB00 var_8           = dword ptr -8
.text:0040DB00 var_4           = dword ptr -4
.text:0040DB00 arg_0           = dword ptr  4
.text:0040DB00
.text:0040DB00                 sub     esp, 1Ch
.text:0040DB03                 mov     [esp+1Ch+var_4], edi
.text:0040DB07                 mov     edi, [esp+1Ch+arg_0]
.text:0040DB0B                 mov     [esp+1Ch+var_C], ebx
.text:0040DB0F                 mov     [esp+1Ch+var_8], esi
.text:0040DB13                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040DB16                 call    sub_40E760
.text:0040DB1B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040DB1E                 mov     esi, eax
.text:0040DB20                 call    sub_40D730
.text:0040DB25                 mov     [esp+1Ch+String2], eax ; String2
.text:0040DB29                 mov     ebx, eax
.text:0040DB2B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040DB2E                 call    _stricmp
.text:0040DB33                 test    eax, eax
.text:0040DB35                 setz    dl
.text:0040DB38                 test    esi, esi
.text:0040DB3A                 movzx   edi, dl
.text:0040DB3D                 jz      short loc_40DB47
.text:0040DB3F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040DB42                 call    free
.text:0040DB47
.text:0040DB47 loc_40DB47:                             ; CODE XREF: sub_40DB00+3D↑j
.text:0040DB47                 test    ebx, ebx
.text:0040DB49                 jz      short loc_40DB53
.text:0040DB4B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040DB4E                 call    free
.text:0040DB53
.text:0040DB53 loc_40DB53:                             ; CODE XREF: sub_40DB00+49↑j
.text:0040DB53                 mov     eax, edi
.text:0040DB55                 mov     ebx, [esp+1Ch+var_C]
.text:0040DB59                 mov     esi, [esp+1Ch+var_8]
.text:0040DB5D                 mov     edi, [esp+1Ch+var_4]
.text:0040DB61                 add     esp, 1Ch
.text:0040DB64                 retn
.text:0040DB64 sub_40DB00      endp
.text:0040DB64
.text:0040DB64 ; ---------------------------------------------------------------------------
.text:0040DB65                 align 10h
.text:0040DB70 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040DBC1↓o
.text:0040DB79 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040DB79                                         ; DATA XREF: .text:0040DBD2↓o
.text:0040DB8D ; const CHAR FileName[]
.text:0040DB8D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040DD1C↓o
.text:0040DB8D                                         ; sub_40E150+17C↓o
.text:0040DB98 ; ---------------------------------------------------------------------------
.text:0040DB98
.text:0040DB98 loc_40DB98:                             ; DATA XREF: .text:0040DE32↓o
.text:0040DB98                 dec     esi
.text:0040DB99                 push    esp
.text:0040DB9A                 inc     esi
.text:0040DB9B                 push    ebx
.text:0040DB9C                 add     [esi+41h], al
.text:0040DB9F                 push    esp
.text:0040DBA0                 xor     esi, [edx]
.text:0040DBA2                 add     [esi+41h], al
.text:0040DBA5                 push    esp
.text:0040DBA6                 add     [ebx+44h], al
.text:0040DBA9                 inc     esi
.text:0040DBAA                 push    ebx
.text:0040DBAB
.text:0040DBAB loc_40DBAB:                             ; CODE XREF: sub_40E150+101↓p
.text:0040DBAB                 add     [ebp+55002674h], cl
.text:0040DBB1                 push    edi
.text:0040DBB2                 push    esi
.text:0040DBB3                 push    ebx
.text:0040DBB4                 sub     esp, 8BCh
.text:0040DBBA                 mov     ebp, [esp+8D0h]
.text:0040DBC1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040DBC8                 call    LoadLibraryA
.text:0040DBCD                 sub     esp, 4
.text:0040DBD0                 mov     edi, eax
.text:0040DBD2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040DBDA                 mov     [esp], eax
.text:0040DBDD                 call    GetProcAddress
.text:0040DBE2                 sub     esp, 8
.text:0040DBE5                 mov     esi, eax
.text:0040DBE7                 test    ebp, ebp
.text:0040DBE9                 mov     dword ptr [esp+20h], 0
.text:0040DBF1                 jz      loc_40E131
.text:0040DBF7                 mov     [esp], ebp
.text:0040DBFA                 call    sub_40D300
.text:0040DBFF                 mov     [esp], eax
.text:0040DC02                 mov     ebp, eax
.text:0040DC04                 call    strlen
.text:0040DC09                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040DC0E                 mov     ebx, eax
.text:0040DC10                 jz      short loc_40DC2C
.text:0040DC12                 mov     [esp], ebp
.text:0040DC15                 lea     edx, [eax+1]
.text:0040DC18                 mov     [esp+4], edx
.text:0040DC1C                 call    realloc
.text:0040DC21                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040DC25                 mov     ebp, eax
.text:0040DC27                 mov     byte ptr [ebx+eax+1], 0
.text:0040DC2C
.text:0040DC2C loc_40DC2C:                             ; CODE XREF: .text:0040DC10↑j
.text:0040DC2C                 mov     dword ptr [esp+1Ch], 400h
.text:0040DC34                 lea     edx, [esp+0B0h]
.text:0040DC3B                 lea     ebx, [esp+5Ch]
.text:0040DC3F                 mov     [esp+18h], edx
.text:0040DC43                 lea     ecx, [esp+58h]
.text:0040DC47                 lea     edx, [esp+54h]
.text:0040DC4B                 mov     [esp+14h], ebx
.text:0040DC4F                 lea     eax, [esp+4B0h]
.text:0040DC56                 mov     [esp+10h], ecx
.text:0040DC5A                 mov     [esp+0Ch], edx
.text:0040DC5E                 mov     dword ptr [esp+8], 400h
.text:0040DC66                 mov     [esp+4], eax
.text:0040DC6A                 mov     [esp], ebp
.text:0040DC6D                 call    GetVolumeInformationA
.text:0040DC72                 sub     esp, 20h
.text:0040DC75                 test    eax, eax
.text:0040DC77                 jz      loc_40E10E
.text:0040DC7D                 test    esi, esi
.text:0040DC7F                 jz      short loc_40DCA5
.text:0040DC81                 mov     [esp], ebp
.text:0040DC84                 lea     edx, [esp+48h]
.text:0040DC88                 lea     ebx, [esp+40h]
.text:0040DC8C                 mov     [esp+0Ch], edx
.text:0040DC90                 lea     ecx, [esp+38h]
.text:0040DC94                 mov     [esp+8], ebx
.text:0040DC98                 mov     [esp+4], ecx
.text:0040DC9C                 call    esi
.text:0040DC9E                 sub     esp, 10h
.text:0040DCA1                 mov     [esp+20h], eax
.text:0040DCA5
.text:0040DCA5 loc_40DCA5:                             ; CODE XREF: .text:0040DC7F↑j
.text:0040DCA5                 test    edi, edi
.text:0040DCA7                 jz      short loc_40DCB4
.text:0040DCA9                 mov     [esp], edi
.text:0040DCAC                 call    FreeLibrary
.text:0040DCB1                 sub     esp, 4
.text:0040DCB4
.text:0040DCB4 loc_40DCB4:                             ; CODE XREF: .text:0040DCA7↑j
.text:0040DCB4                 call    sub_40F1F0
.text:0040DCB9                 test    eax, eax
.text:0040DCBB                 lea     esi, [esp+28h]
.text:0040DCBF                 jz      loc_40E0F0
.text:0040DCC5                 call    sub_40F1F0
.text:0040DCCA                 test    eax, eax
.text:0040DCCC                 jz      short loc_40DCDC
.text:0040DCCE                 call    sub_40F140
.text:0040DCD3                 cmp     eax, 0Bh
.text:0040DCD6                 jle     loc_40E0C4
.text:0040DCDC
.text:0040DCDC loc_40DCDC:                             ; CODE XREF: .text:0040DCCC↑j
.text:0040DCDC                 cld
.text:0040DCDD                 xor     eax, eax
.text:0040DCDF                 lea     ebx, [esp+60h]
.text:0040DCE3                 mov     ecx, 7
.text:0040DCE8                 mov     edi, ebx
.text:0040DCEA                 rep stosd
.text:0040DCEC                 mov     dword ptr [esp+18h], 0
.text:0040DCF4                 mov     dword ptr [esp+14h], 4000000h
.text:0040DCFC                 mov     dword ptr [esp+10h], 0
.text:0040DD04                 mov     dword ptr [esp+0Ch], 0
.text:0040DD0C                 mov     dword ptr [esp+8], 0
.text:0040DD14                 mov     dword ptr [esp+4], 0
.text:0040DD1C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040DD23                 call    CreateFileA
.text:0040DD28                 sub     esp, 1Ch
.text:0040DD2B                 mov     edi, eax
.text:0040DD2D                 cmp     eax, 0FFFFFFFFh
.text:0040DD30                 jz      short loc_40DDB0
.text:0040DD32                 mov     [esp+10h], ebx
.text:0040DD36                 lea     edx, [esp+80h]
.text:0040DD3D                 lea     ecx, [esp+24h]
.text:0040DD41                 mov     [esp+70h], edx
.text:0040DD45                 mov     [esp+18h], ecx
.text:0040DD49                 mov     [esp+8], ebx
.text:0040DD4D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040DD55                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040DD5D                 mov     [esp+64h], ebp
.text:0040DD61                 mov     dword ptr [esp+78h], 1
.text:0040DD69                 mov     dword ptr [esp+1Ch], 0
.text:0040DD71                 mov     dword ptr [esp+14h], 1Ch
.text:0040DD79                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040DD81                 mov     dword ptr [esp+4], 6
.text:0040DD89                 mov     [esp], eax
.text:0040DD8C                 call    DeviceIoControl
.text:0040DD91                 sub     esp, 20h
.text:0040DD94                 mov     ebx, eax
.text:0040DD96                 mov     [esp], edi
.text:0040DD99                 call    CloseHandle
.text:0040DD9E                 sub     esp, 4
.text:0040DDA1                 test    ebx, ebx
.text:0040DDA3                 jz      short loc_40DDB0
.text:0040DDA5                 test    byte ptr [esp+78h], 1
.text:0040DDAA                 jz      loc_40E090
.text:0040DDB0
.text:0040DDB0 loc_40DDB0:                             ; CODE XREF: .text:0040DD30↑j
.text:0040DDB0                                         ; .text:0040DDA3↑j
.text:0040DDB0                 call    sub_40E710
.text:0040DDB5                 mov     edi, eax
.text:0040DDB7                 call    _errno
.text:0040DDBC                 mov     [eax], edi
.text:0040DDBE                 xor     eax, eax
.text:0040DDC0
.text:0040DDC0 loc_40DDC0:                             ; CODE XREF: .text:0040E0BF↓j
.text:0040DDC0                                         ; .text:0040E0EB↓j
.text:0040DDC0                 test    eax, eax
.text:0040DDC2                 jnz     short loc_40DDE4
.text:0040DDC4                 mov     dword ptr [esp+34h], 1
.text:0040DDCC                 mov     dword ptr [esp+30h], 200h
.text:0040DDD4                 mov     dword ptr [esp+2Ch], 0
.text:0040DDDC                 mov     dword ptr [esp+28h], 0
.text:0040DDE4
.text:0040DDE4 loc_40DDE4:                             ; CODE XREF: .text:0040DDC2↑j
.text:0040DDE4                 mov     edx, [esp+30h]
.text:0040DDE8                 mov     edi, [esp+34h]
.text:0040DDEC                 mov     ecx, [esp+20h]
.text:0040DDF0                 imul    edi, edx
.text:0040DDF3                 test    ecx, ecx
.text:0040DDF5                 jnz     short loc_40DE1D
.text:0040DDF7                 mov     eax, [esp+28h]
.text:0040DDFB                 mul     edi
.text:0040DDFD                 mov     esi, eax
.text:0040DDFF                 mov     eax, [esp+2Ch]
.text:0040DE03                 mov     [esp+44h], edx
.text:0040DE07                 mov     [esp+40h], esi
.text:0040DE0B                 mul     edi
.text:0040DE0D                 mov     [esp+48h], eax
.text:0040DE11                 mov     [esp+4Ch], edx
.text:0040DE15                 mov     [esp+38h], eax
.text:0040DE19                 mov     [esp+3Ch], edx
.text:0040DE1D
.text:0040DE1D loc_40DE1D:                             ; CODE XREF: .text:0040DDF5↑j
.text:0040DE1D                 mov     ebx, [esp+5Ch]
.text:0040DE21                 lea     edx, [esp+0B0h]
.text:0040DE28                 mov     ecx, [esp+8D4h]
.text:0040DE2F                 mov     [ecx+48h], ebx
.text:0040DE32                 mov     dword ptr [esp+4], offset loc_40DB98
.text:0040DE3A                 mov     [esp], edx
.text:0040DE3D                 call    _stricmp
.text:0040DE42                 test    eax, eax
.text:0040DE44                 jnz     loc_40E000
.text:0040DE4A                 mov     esi, [esp+8D4h]
.text:0040DE51                 mov     dword ptr [esi], 5346544Eh
.text:0040DE57
.text:0040DE57 loc_40DE57:                             ; CODE XREF: .text:0040E028↓j
.text:0040DE57                                         ; .text:0040E055↓j ...
.text:0040DE57                 mov     ebx, [esp+30h]
.text:0040DE5B                 mov     esi, [esp+8D4h]
.text:0040DE62                 mov     [esi+4], ebx
.text:0040DE65                 mov     [esi+8], ebx
.text:0040DE68                 mov     ebx, [esi+8]
.text:0040DE6B                 mov     [esi+0Ch], edi
.text:0040DE6E                 mov     ecx, [esp+44h]
.text:0040DE72                 xor     esi, esi
.text:0040DE74                 mov     [esp+8], ebx
.text:0040DE78                 mov     edx, [esp+40h]
.text:0040DE7C                 mov     [esp+0Ch], esi
.text:0040DE80                 mov     [esp+4], ecx
.text:0040DE84                 mov     [esp], edx
.text:0040DE87                 call    sub_4128D0
.text:0040DE8C                 mov     ecx, [esp+8D4h]
.text:0040DE93                 mov     [ecx+10h], eax
.text:0040DE96                 mov     [ecx+14h], edx
.text:0040DE99                 mov     ecx, [esp+4Ch]
.text:0040DE9D                 mov     [esp+8], ebx
.text:0040DEA1                 mov     edx, [esp+48h]
.text:0040DEA5                 mov     [esp+0Ch], esi
.text:0040DEA9                 mov     [esp+4], ecx
.text:0040DEAD                 mov     [esp], edx
.text:0040DEB0                 call    sub_4128D0
.text:0040DEB5                 mov     ecx, [esp+8D4h]
.text:0040DEBC                 mov     [ecx+18h], eax
.text:0040DEBF                 mov     [ecx+1Ch], edx
.text:0040DEC2                 mov     ecx, [esp+38h]
.text:0040DEC6                 mov     [esp+8], ebx
.text:0040DECA                 mov     ebx, [esp+3Ch]
.text:0040DECE                 mov     [esp+0Ch], esi
.text:0040DED2                 mov     [esp], ecx
.text:0040DED5                 mov     [esp+4], ebx
.text:0040DED9                 call    sub_4128D0
.text:0040DEDE                 mov     esi, [esp+8D4h]
.text:0040DEE5                 mov     [esi+20h], eax
.text:0040DEE8                 mov     [esi+24h], edx
.text:0040DEEB                 mov     ecx, [esp+44h]
.text:0040DEEF                 mov     esi, edi
.text:0040DEF1                 mov     [esp+8], esi
.text:0040DEF5                 mov     edx, [esp+40h]
.text:0040DEF9                 xor     edi, edi
.text:0040DEFB                 mov     [esp+0Ch], edi
.text:0040DEFF                 mov     [esp+4], ecx
.text:0040DF03                 mov     [esp], edx
.text:0040DF06                 call    sub_4128D0
.text:0040DF0B                 mov     ebx, [esp+8D4h]
.text:0040DF12                 mov     [ebx+28h], eax
.text:0040DF15                 mov     [ebx+2Ch], edx
.text:0040DF18                 mov     ecx, [esp+4Ch]
.text:0040DF1C                 mov     [esp+8], esi
.text:0040DF20                 mov     edx, [esp+48h]
.text:0040DF24                 mov     [esp+0Ch], edi
.text:0040DF28                 mov     [esp+4], ecx
.text:0040DF2C                 mov     [esp], edx
.text:0040DF2F                 call    sub_4128D0
.text:0040DF34                 mov     ebx, [esp+8D4h]
.text:0040DF3B                 mov     [ebx+30h], eax
.text:0040DF3E                 mov     [ebx+34h], edx
.text:0040DF41                 mov     ecx, [esp+3Ch]
.text:0040DF45                 mov     [esp+8], esi
.text:0040DF49                 mov     edx, [esp+38h]
.text:0040DF4D                 mov     [esp+0Ch], edi
.text:0040DF51                 mov     [esp+4], ecx
.text:0040DF55                 mov     [esp], edx
.text:0040DF58                 call    sub_4128D0
.text:0040DF5D                 mov     edx, [esp+8D4h]
.text:0040DF64                 lea     ecx, [esp+0B0h]
.text:0040DF6B                 mov     [edx+38h], eax
.text:0040DF6E                 mov     esi, [esp+58h]
.text:0040DF72                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040DF79                 mov     [edx+110h], esi
.text:0040DF7F                 mov     esi, edx
.text:0040DF81                 add     esi, 4Ch ; 'L'
.text:0040DF84                 movzx   ebx, word ptr [esp+56h]
.text:0040DF89                 movzx   edi, word ptr [esp+54h]
.text:0040DF8E                 mov     [edx+3Ch], ebx
.text:0040DF91                 lea     ebx, [esp+4B0h]
.text:0040DF98                 mov     [edx+40h], edi
.text:0040DF9B                 mov     [esp+4], ecx
.text:0040DF9F                 mov     dword ptr [esp+8], 10h
.text:0040DFA7                 mov     [esp], esi
.text:0040DFAA                 call    strncpy
.text:0040DFAF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040DFB7                 mov     edi, [esp+8D4h]
.text:0040DFBE                 mov     [esp+4], ebx
.text:0040DFC2                 add     edi, 5Ch ; '\'
.text:0040DFC5                 mov     [esp], edi
.text:0040DFC8                 call    strncpy
.text:0040DFCD                 mov     [esp+4], ebp
.text:0040DFD1                 mov     ebp, [esp+8D4h]
.text:0040DFD8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040DFE0                 add     ebp, 0B6h ; '¶'
.text:0040DFE6                 mov     [esp], ebp
.text:0040DFE9                 call    strncpy
.text:0040DFEE                 xor     eax, eax
.text:0040DFF0
.text:0040DFF0 loc_40DFF0:                             ; CODE XREF: .text:0040E12C↓j
.text:0040DFF0                 add     esp, 8BCh
.text:0040DFF6                 pop     ebx
.text:0040DFF7                 pop     esi
.text:0040DFF8                 pop     edi
.text:0040DFF9                 pop     ebp
.text:0040DFFA                 retn
.text:0040DFFA ; ---------------------------------------------------------------------------
.text:0040DFFB                 align 10h
.text:0040E000
.text:0040E000 loc_40E000:                             ; CODE XREF: .text:0040DE44↑j
.text:0040E000                 mov     dword ptr [esp+4], 40DB9Dh
.text:0040E008                 lea     eax, [esp+0B0h]
.text:0040E00F                 mov     [esp], eax
.text:0040E012                 call    _stricmp
.text:0040E017                 test    eax, eax
.text:0040E019                 jnz     short loc_40E02D
.text:0040E01B                 mov     edx, [esp+8D4h]
.text:0040E022                 mov     dword ptr [edx], 4008h
.text:0040E028                 jmp     loc_40DE57
.text:0040E02D ; ---------------------------------------------------------------------------
.text:0040E02D
.text:0040E02D loc_40E02D:                             ; CODE XREF: .text:0040E019↑j
.text:0040E02D                 mov     dword ptr [esp+4], 40DBA3h
.text:0040E035                 lea     ecx, [esp+0B0h]
.text:0040E03C                 mov     [esp], ecx
.text:0040E03F                 call    _stricmp
.text:0040E044                 test    eax, eax
.text:0040E046                 jnz     short loc_40E05A
.text:0040E048                 mov     ebx, [esp+8D4h]
.text:0040E04F                 mov     dword ptr [ebx], 4006h
.text:0040E055                 jmp     loc_40DE57
.text:0040E05A ; ---------------------------------------------------------------------------
.text:0040E05A
.text:0040E05A loc_40E05A:                             ; CODE XREF: .text:0040E046↑j
.text:0040E05A                 mov     dword ptr [esp+4], 40DBA7h
.text:0040E062                 lea     eax, [esp+0B0h]
.text:0040E069                 mov     [esp], eax
.text:0040E06C                 call    _stricmp
.text:0040E071                 test    eax, eax
.text:0040E073                 mov     esi, [esp+8D4h]
.text:0040E07A                 setnz   cl
.text:0040E07D                 movzx   edx, cl
.text:0040E080                 dec     edx
.text:0040E081                 and     edx, 4000h
.text:0040E087                 mov     [esi], edx
.text:0040E089                 jmp     loc_40DE57
.text:0040E089 ; ---------------------------------------------------------------------------
.text:0040E08E                 align 10h
.text:0040E090
.text:0040E090 loc_40E090:                             ; CODE XREF: .text:0040DDAA↑j
.text:0040E090                 mov     edi, [esp+84h]
.text:0040E097                 mov     eax, 1
.text:0040E09C                 mov     edx, [esp+88h]
.text:0040E0A3                 mov     ecx, [esp+8Ch]
.text:0040E0AA                 mov     ebx, [esp+90h]
.text:0040E0B1                 mov     [esp+34h], edi
.text:0040E0B5                 mov     [esp+30h], edx
.text:0040E0B9                 mov     [esp+2Ch], ecx
.text:0040E0BD                 mov     [esi], ebx
.text:0040E0BF                 jmp     loc_40DDC0
.text:0040E0C4 ; ---------------------------------------------------------------------------
.text:0040E0C4
.text:0040E0C4 loc_40E0C4:                             ; CODE XREF: .text:0040DCD6↑j
.text:0040E0C4                 mov     [esp+10h], esi
.text:0040E0C8                 lea     eax, [esp+2Ch]
.text:0040E0CC                 lea     esi, [esp+30h]
.text:0040E0D0                 mov     [esp+0Ch], eax
.text:0040E0D4                 lea     edi, [esp+34h]
.text:0040E0D8                 mov     [esp+8], esi
.text:0040E0DC                 mov     [esp+4], edi
.text:0040E0E0
.text:0040E0E0 loc_40E0E0:                             ; CODE XREF: .text:0040E10C↓j
.text:0040E0E0                 mov     [esp], ebp
.text:0040E0E3                 call    GetDiskFreeSpaceA
.text:0040E0E8                 sub     esp, 14h
.text:0040E0EB                 jmp     loc_40DDC0
.text:0040E0F0 ; ---------------------------------------------------------------------------
.text:0040E0F0
.text:0040E0F0 loc_40E0F0:                             ; CODE XREF: .text:0040DCBF↑j
.text:0040E0F0                 mov     [esp+10h], esi
.text:0040E0F4                 lea     ebx, [esp+2Ch]
.text:0040E0F8                 lea     eax, [esp+30h]
.text:0040E0FC                 mov     [esp+0Ch], ebx
.text:0040E100                 lea     esi, [esp+34h]
.text:0040E104                 mov     [esp+8], eax
.text:0040E108                 mov     [esp+4], esi
.text:0040E10C                 jmp     short loc_40E0E0
.text:0040E10E ; ---------------------------------------------------------------------------
.text:0040E10E
.text:0040E10E loc_40E10E:                             ; CODE XREF: .text:0040DC77↑j
.text:0040E10E                 mov     [esp], edi
.text:0040E111                 call    FreeLibrary
.text:0040E116                 sub     esp, 4
.text:0040E119                 call    sub_40E710
.text:0040E11E                 mov     esi, eax
.text:0040E120                 call    _errno
.text:0040E125                 mov     [eax], esi
.text:0040E127
.text:0040E127 loc_40E127:                             ; CODE XREF: .text:0040E147↓j
.text:0040E127                 mov     eax, 0FFFFFFFFh
.text:0040E12C                 jmp     loc_40DFF0
.text:0040E131 ; ---------------------------------------------------------------------------
.text:0040E131
.text:0040E131 loc_40E131:                             ; CODE XREF: .text:0040DBF1↑j
.text:0040E131                 mov     [esp], edi
.text:0040E134                 call    FreeLibrary
.text:0040E139                 sub     esp, 4
.text:0040E13C                 call    _errno
.text:0040E141                 mov     dword ptr [eax], 2
.text:0040E147                 jmp     short loc_40E127
.text:0040E147 ; ---------------------------------------------------------------------------
.text:0040E149                 align 10h
.text:0040E150
.text:0040E150 ; =============== S U B R O U T I N E =======================================
.text:0040E150
.text:0040E150
.text:0040E150 ; int __cdecl sub_40E150(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040E150 sub_40E150      proc near               ; CODE XREF: sub_40BB80+2C7↑p
.text:0040E150                                         ; .text:0040C1BA↑p
.text:0040E150
.text:0040E150 lpFileName      = dword ptr -9Ch
.text:0040E150 dwDesiredAccess = dword ptr -98h
.text:0040E150 dwShareMode     = dword ptr -94h
.text:0040E150 lpSecurityAttributes= dword ptr -90h
.text:0040E150 dwCreationDisposition= dword ptr -8Ch
.text:0040E150 dwFlagsAndAttributes= dword ptr -88h
.text:0040E150 hTemplateFile   = dword ptr -84h
.text:0040E150 lpOverlapped    = dword ptr -80h
.text:0040E150 BytesReturned   = dword ptr -70h
.text:0040E150 InBuffer        = byte ptr -6Ch
.text:0040E150 var_68          = dword ptr -68h
.text:0040E150 var_64          = dword ptr -64h
.text:0040E150 var_60          = dword ptr -60h
.text:0040E150 var_5C          = dword ptr -5Ch
.text:0040E150 var_54          = dword ptr -54h
.text:0040E150 var_4C          = byte ptr -4Ch
.text:0040E150 var_48          = dword ptr -48h
.text:0040E150 var_44          = dword ptr -44h
.text:0040E150 var_40          = dword ptr -40h
.text:0040E150 var_3C          = dword ptr -3Ch
.text:0040E150 lpRootPathName  = dword ptr -2Ch
.text:0040E150 lpSectorsPerCluster= dword ptr -28h
.text:0040E150 lpBytesPerSector= dword ptr -24h
.text:0040E150 lpNumberOfFreeClusters= dword ptr -20h
.text:0040E150 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040E150 var_18          = dword ptr -18h
.text:0040E150 var_14          = dword ptr -14h
.text:0040E150 var_10          = dword ptr -10h
.text:0040E150 var_C           = dword ptr -0Ch
.text:0040E150 var_8           = dword ptr -8
.text:0040E150 var_4           = dword ptr -4
.text:0040E150 arg_0           = dword ptr  4
.text:0040E150 arg_4           = dword ptr  8
.text:0040E150 arg_8           = dword ptr  0Ch
.text:0040E150 arg_C           = dword ptr  10h
.text:0040E150 arg_10          = dword ptr  14h
.text:0040E150
.text:0040E150                 sub     esp, 2Ch
.text:0040E153                 mov     edx, [esp+2Ch+arg_0]
.text:0040E157                 mov     [esp+2Ch+var_10], ebx
.text:0040E15B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040E15F                 mov     [esp+2Ch+var_C], esi
.text:0040E163                 mov     esi, [esp+2Ch+arg_C]
.text:0040E167                 mov     [esp+2Ch+var_8], edi
.text:0040E16B                 mov     edi, [esp+2Ch+arg_8]
.text:0040E16F                 mov     [esp+2Ch+var_4], ebp
.text:0040E173                 mov     ebp, [esp+2Ch+arg_4]
.text:0040E177                 mov     [esp+2Ch+var_14], edx
.text:0040E17B                 call    sub_40F1F0
.text:0040E180                 test    eax, eax
.text:0040E182                 jz      short loc_40E1B4
.text:0040E184                 mov     [esp+2Ch+arg_10], ebx
.text:0040E188                 mov     edx, [esp+2Ch+var_14]
.text:0040E18C                 mov     ebx, [esp+2Ch+var_10]
.text:0040E190                 mov     [esp+2Ch+arg_C], esi
.text:0040E194                 mov     esi, [esp+2Ch+var_C]
.text:0040E198                 mov     [esp+2Ch+arg_8], edi
.text:0040E19C                 mov     edi, [esp+2Ch+var_8]
.text:0040E1A0                 mov     [esp+2Ch+arg_4], ebp
.text:0040E1A4                 mov     ebp, [esp+2Ch+var_4]
.text:0040E1A8                 mov     [esp+2Ch+arg_0], edx
.text:0040E1AC                 add     esp, 2Ch
.text:0040E1AF                 jmp     loc_40E260
.text:0040E1B4 ; ---------------------------------------------------------------------------
.text:0040E1B4
.text:0040E1B4 loc_40E1B4:                             ; CODE XREF: sub_40E150+32↑j
.text:0040E1B4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040E1B8                 mov     ecx, [esp+2Ch+var_14]
.text:0040E1BC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040E1C0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040E1C4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040E1C8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040E1CB                 call    GetDiskFreeSpaceA
.text:0040E1D0                 sub     esp, 14h
.text:0040E1D3                 mov     ebx, [esp+2Ch+var_10]
.text:0040E1D7                 mov     esi, [esp+2Ch+var_C]
.text:0040E1DB                 mov     edi, [esp+2Ch+var_8]
.text:0040E1DF                 mov     ebp, [esp+2Ch+var_4]
.text:0040E1E3                 add     esp, 2Ch
.text:0040E1E6                 retn
.text:0040E1E6 ; ---------------------------------------------------------------------------
.text:0040E1E7                 align 10h
.text:0040E1F0
.text:0040E1F0 loc_40E1F0:                             ; CODE XREF: .text:0040F50D↓p
.text:0040E1F0                 sub     esp, 1Ch
.text:0040E1F3                 mov     [esp+1Ch+var_4], esi
.text:0040E1F7                 mov     esi, [esp+1Ch+arg_0]
.text:0040E1FB                 mov     [esp+1Ch+var_8], ebx
.text:0040E1FF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040E202                 call    sub_40D730
.text:0040E207                 test    eax, eax
.text:0040E209                 mov     ebx, eax
.text:0040E20B                 jz      short loc_40E220
.text:0040E20D                 cmp     byte ptr [eax], 0
.text:0040E210                 jz      short loc_40E220
.text:0040E212                 test    esi, esi
.text:0040E214                 jz      short loc_40E220
.text:0040E216                 cmp     byte ptr [esi], 0
.text:0040E219                 jnz     short loc_40E246
.text:0040E21B                 nop
.text:0040E21C                 lea     esi, [esi+0]
.text:0040E220
.text:0040E220 loc_40E220:                             ; CODE XREF: sub_40E150+BB↑j
.text:0040E220                                         ; sub_40E150+C0↑j ...
.text:0040E220                 call    _errno
.text:0040E225                 mov     dword ptr [eax], 2
.text:0040E22B                 mov     esi, 0FFFFFFFFh
.text:0040E230
.text:0040E230 loc_40E230:                             ; CODE XREF: sub_40E150+108↓j
.text:0040E230                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040E233                 call    free
.text:0040E238                 mov     eax, esi
.text:0040E23A                 mov     ebx, [esp+1Ch+var_8]
.text:0040E23E                 mov     esi, [esp+1Ch+var_4]
.text:0040E242                 add     esp, 1Ch
.text:0040E245                 retn
.text:0040E246 ; ---------------------------------------------------------------------------
.text:0040E246
.text:0040E246 loc_40E246:                             ; CODE XREF: sub_40E150+C9↑j
.text:0040E246                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040E249                 mov     edx, [esp+1Ch+arg_4]
.text:0040E24D                 mov     [esp+1Ch+var_18], edx
.text:0040E251                 call    near ptr loc_40DBAB+5
.text:0040E256                 mov     esi, eax
.text:0040E258                 jmp     short loc_40E230
.text:0040E258 ; ---------------------------------------------------------------------------
.text:0040E25A                 align 10h
.text:0040E260
.text:0040E260 loc_40E260:                             ; CODE XREF: sub_40E150+5F↑j
.text:0040E260                 push    ebp
.text:0040E261                 push    edi
.text:0040E262                 push    esi
.text:0040E263                 push    ebx
.text:0040E264                 sub     esp, 8Ch
.text:0040E26A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040E271                 call    sub_40F1F0
.text:0040E276                 test    eax, eax
.text:0040E278                 jz      short loc_40E288
.text:0040E27A                 call    sub_40F140
.text:0040E27F                 cmp     eax, 0Bh
.text:0040E282                 jle     loc_40E3B0
.text:0040E288
.text:0040E288 loc_40E288:                             ; CODE XREF: sub_40E150+128↑j
.text:0040E288                 cld
.text:0040E289                 xor     eax, eax
.text:0040E28B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040E28F                 mov     ecx, 7
.text:0040E294                 mov     edi, ebx
.text:0040E296                 lea     esi, [esp+9Ch+var_4C]
.text:0040E29A                 rep stosd
.text:0040E29C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040E2A4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040E2AC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040E2B4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040E2BC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040E2C4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040E2CC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040E2D3                 call    CreateFileA
.text:0040E2D8                 sub     esp, 1Ch
.text:0040E2DB                 mov     edi, eax
.text:0040E2DD                 cmp     eax, 0FFFFFFFFh
.text:0040E2E0                 jz      short loc_40E355
.text:0040E2E2                 mov     [esp+9Ch+var_68], ebp
.text:0040E2E6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040E2EA                 mov     [esp+9Ch+var_5C], esi
.text:0040E2EE                 mov     [esp+9Ch+var_60], 7303h
.text:0040E2F6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040E2FE                 mov     [esp+9Ch+var_54], 1
.text:0040E306                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040E30E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040E312                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040E31A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040E31E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040E326                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040E32A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040E332                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040E335                 call    DeviceIoControl
.text:0040E33A                 sub     esp, 20h
.text:0040E33D                 mov     esi, eax
.text:0040E33F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040E342                 call    CloseHandle
.text:0040E347                 sub     esp, 4
.text:0040E34A                 test    esi, esi
.text:0040E34C                 jz      short loc_40E355
.text:0040E34E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040E353                 jz      short loc_40E370
.text:0040E355
.text:0040E355 loc_40E355:                             ; CODE XREF: sub_40E150+190↑j
.text:0040E355                                         ; sub_40E150+1FC↑j
.text:0040E355                 call    sub_40E710
.text:0040E35A                 mov     edi, eax
.text:0040E35C                 call    _errno
.text:0040E361                 mov     [eax], edi
.text:0040E363                 xor     eax, eax
.text:0040E365
.text:0040E365 loc_40E365:                             ; CODE XREF: sub_40E150+25A↓j
.text:0040E365                                         ; sub_40E150+297↓j
.text:0040E365                 add     esp, 8Ch
.text:0040E36B                 pop     ebx
.text:0040E36C                 pop     esi
.text:0040E36D                 pop     edi
.text:0040E36E                 pop     ebp
.text:0040E36F                 retn
.text:0040E370 ; ---------------------------------------------------------------------------
.text:0040E370
.text:0040E370 loc_40E370:                             ; CODE XREF: sub_40E150+203↑j
.text:0040E370                 mov     edx, [esp+9Ch+var_48]
.text:0040E374                 mov     eax, 1
.text:0040E379                 mov     ebx, [esp+9Ch+arg_4]
.text:0040E380                 mov     ebp, [esp+9Ch+arg_8]
.text:0040E387                 mov     ecx, [esp+9Ch+arg_C]
.text:0040E38E                 mov     [ebx], edx
.text:0040E390                 mov     edi, [esp+9Ch+var_44]
.text:0040E394                 mov     ebx, [esp+9Ch+arg_10]
.text:0040E39B                 mov     [ebp+0], edi
.text:0040E39E                 mov     esi, [esp+9Ch+var_40]
.text:0040E3A2                 mov     [ecx], esi
.text:0040E3A4                 mov     edx, [esp+9Ch+var_3C]
.text:0040E3A8                 mov     [ebx], edx
.text:0040E3AA                 jmp     short loc_40E365
.text:0040E3AA ; ---------------------------------------------------------------------------
.text:0040E3AC                 align 10h
.text:0040E3B0
.text:0040E3B0 loc_40E3B0:                             ; CODE XREF: sub_40E150+132↑j
.text:0040E3B0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040E3B3                 mov     eax, [esp+9Ch+arg_C]
.text:0040E3BA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040E3C1                 mov     edx, [esp+9Ch+arg_8]
.text:0040E3C8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040E3CC                 mov     eax, [esp+9Ch+arg_4]
.text:0040E3D3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040E3D7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040E3DB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040E3DF                 call    GetDiskFreeSpaceA
.text:0040E3E4                 sub     esp, 14h
.text:0040E3E7                 jmp     loc_40E365
.text:0040E3E7 sub_40E150      endp ; sp-analysis failed
.text:0040E3E7
.text:0040E3E7 ; ---------------------------------------------------------------------------
.text:0040E3EC                 align 10h
.text:0040E3F0
.text:0040E3F0 ; =============== S U B R O U T I N E =======================================
.text:0040E3F0
.text:0040E3F0
.text:0040E3F0 ; int __cdecl sub_40E3F0(FILE *, int, int, int)
.text:0040E3F0 sub_40E3F0      proc near               ; CODE XREF: sub_4051F0+309↑p
.text:0040E3F0
.text:0040E3F0 Stream          = dword ptr -2Ch
.text:0040E3F0 Position        = dword ptr -28h
.text:0040E3F0 var_1C          = qword ptr -1Ch
.text:0040E3F0 var_10          = dword ptr -10h
.text:0040E3F0 var_C           = dword ptr -0Ch
.text:0040E3F0 var_8           = dword ptr -8
.text:0040E3F0 var_4           = dword ptr -4
.text:0040E3F0 arg_0           = dword ptr  4
.text:0040E3F0 arg_4           = dword ptr  8
.text:0040E3F0 arg_8           = dword ptr  0Ch
.text:0040E3F0 arg_C           = dword ptr  10h
.text:0040E3F0
.text:0040E3F0                 sub     esp, 2Ch
.text:0040E3F3                 mov     eax, [esp+2Ch+arg_C]
.text:0040E3F7                 mov     [esp+2Ch+var_10], ebx
.text:0040E3FB                 mov     ebx, [esp+2Ch+arg_4]
.text:0040E3FF                 cmp     eax, 1
.text:0040E402                 mov     [esp+2Ch+var_C], esi
.text:0040E406                 mov     esi, [esp+2Ch+arg_8]
.text:0040E40A                 mov     [esp+2Ch+var_8], edi
.text:0040E40E                 mov     edi, [esp+2Ch+arg_0]
.text:0040E412                 mov     [esp+2Ch+var_4], ebp
.text:0040E416                 jz      short loc_40E465
.text:0040E418                 cmp     eax, 2
.text:0040E41B                 jz      short loc_40E450
.text:0040E41D                 test    eax, eax
.text:0040E41F                 lea     ebp, [esp+2Ch+var_1C]
.text:0040E423                 jnz     short loc_40E42D
.text:0040E425
.text:0040E425 loc_40E425:                             ; CODE XREF: sub_40E3F0+73↓j
.text:0040E425                 mov     dword ptr [esp+2Ch+var_1C], ebx
.text:0040E429                 mov     dword ptr [esp+2Ch+var_1C+4], esi
.text:0040E42D
.text:0040E42D loc_40E42D:                             ; CODE XREF: sub_40E3F0+33↑j
.text:0040E42D                                         ; sub_40E3F0+8D↓j
.text:0040E42D                 mov     [esp+2Ch+Position], ebp ; Position
.text:0040E431                 mov     [esp+2Ch+Stream], edi ; Stream
.text:0040E434                 call    fsetpos
.text:0040E439                 mov     ebx, [esp+2Ch+var_10]
.text:0040E43D                 mov     esi, [esp+2Ch+var_C]
.text:0040E441                 mov     edi, [esp+2Ch+var_8]
.text:0040E445                 mov     ebp, [esp+2Ch+var_4]
.text:0040E449                 add     esp, 2Ch
.text:0040E44C                 retn
.text:0040E44C ; ---------------------------------------------------------------------------
.text:0040E44D                 align 10h
.text:0040E450
.text:0040E450 loc_40E450:                             ; CODE XREF: sub_40E3F0+2B↑j
.text:0040E450                 mov     edx, [edi+10h]
.text:0040E453                 lea     ebp, [esp+2Ch+var_1C]
.text:0040E457                 mov     [esp+2Ch+Stream], edx ; FileHandle
.text:0040E45A                 call    _filelengthi64
.text:0040E45F                 add     ebx, eax
.text:0040E461                 adc     esi, edx
.text:0040E463                 jmp     short loc_40E425
.text:0040E465 ; ---------------------------------------------------------------------------
.text:0040E465
.text:0040E465 loc_40E465:                             ; CODE XREF: sub_40E3F0+26↑j
.text:0040E465                 mov     [esp+2Ch+Stream], edi ; Stream
.text:0040E468                 lea     ebp, [esp+2Ch+var_1C]
.text:0040E46C                 mov     [esp+2Ch+Position], ebp ; Position
.text:0040E470                 call    fgetpos
.text:0040E475                 add     dword ptr [esp+2Ch+var_1C], ebx
.text:0040E479                 adc     dword ptr [esp+2Ch+var_1C+4], esi
.text:0040E47D                 jmp     short loc_40E42D
.text:0040E47D sub_40E3F0      endp
.text:0040E47D
.text:0040E47D ; ---------------------------------------------------------------------------
.text:0040E47F                 align 10h
.text:0040E480
.text:0040E480 ; =============== S U B R O U T I N E =======================================
.text:0040E480
.text:0040E480 ; Attributes: info_from_lumina
.text:0040E480
.text:0040E480 ___get_errno    proc near               ; CODE XREF: sub_40E710+B↓p
.text:0040E480
.text:0040E480 arg_0           = dword ptr  4
.text:0040E480
.text:0040E480                 mov     eax, [esp+arg_0]
.text:0040E484                 cmp     eax, 53h ; 'S'
.text:0040E487                 jg      loc_40E580
.text:0040E48D                 cmp     eax, 52h ; 'R'
.text:0040E490                 jge     short loc_40E4E2
.text:0040E492                 cmp     eax, 0Fh
.text:0040E495                 jz      short loc_40E4B0
.text:0040E497                 cmp     eax, 0Fh
.text:0040E49A                 jg      short loc_40E510
.text:0040E49C                 cmp     eax, 9
.text:0040E49F                 jg      short loc_40E4F0
.text:0040E4A1                 cmp     eax, 7
.text:0040E4A4                 jge     short loc_40E4E9
.text:0040E4A6                 cmp     eax, 3
.text:0040E4A9                 jg      short loc_40E4CA
.text:0040E4AB                 cmp     eax, 2
.text:0040E4AE                 jl      short loc_40E4C3
.text:0040E4B0
.text:0040E4B0 loc_40E4B0:                             ; CODE XREF: ___get_errno+15↑j
.text:0040E4B0                                         ; ___get_errno+9D↓j ...
.text:0040E4B0                 mov     edx, 2
.text:0040E4B5                 lea     esi, [esi+0]
.text:0040E4B9                 lea     edi, [edi+0]
.text:0040E4C0
.text:0040E4C0 loc_40E4C0:                             ; CODE XREF: ___get_errno+48↓j
.text:0040E4C0                                         ; ___get_errno+59↓j ...
.text:0040E4C0                 mov     eax, edx
.text:0040E4C2                 retn
.text:0040E4C3 ; ---------------------------------------------------------------------------
.text:0040E4C3
.text:0040E4C3 loc_40E4C3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040E4C3                                         ; ___get_errno+78↓j ...
.text:0040E4C3                 mov     edx, 16h
.text:0040E4C8                 jmp     short loc_40E4C0
.text:0040E4CA ; ---------------------------------------------------------------------------
.text:0040E4CA
.text:0040E4CA loc_40E4CA:                             ; CODE XREF: ___get_errno+29↑j
.text:0040E4CA                 cmp     eax, 5
.text:0040E4CD                 jz      short loc_40E4E2
.text:0040E4CF                 cmp     eax, 5
.text:0040E4D2                 jg      short loc_40E4DB
.text:0040E4D4                 mov     edx, 18h
.text:0040E4D9                 jmp     short loc_40E4C0
.text:0040E4DB ; ---------------------------------------------------------------------------
.text:0040E4DB
.text:0040E4DB loc_40E4DB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040E4DB                                         ; ___get_errno+180↓j
.text:0040E4DB                 mov     edx, 9
.text:0040E4E0                 jmp     short loc_40E4C0
.text:0040E4E2 ; ---------------------------------------------------------------------------
.text:0040E4E2
.text:0040E4E2 loc_40E4E2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040E4E2                                         ; ___get_errno+4D↑j ...
.text:0040E4E2                 mov     edx, 0Dh
.text:0040E4E7                 jmp     short loc_40E4C0
.text:0040E4E9 ; ---------------------------------------------------------------------------
.text:0040E4E9
.text:0040E4E9 loc_40E4E9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040E4E9                                         ; ___get_errno+73↓j ...
.text:0040E4E9                 mov     edx, 0Ch
.text:0040E4EE                 jmp     short loc_40E4C0
.text:0040E4F0 ; ---------------------------------------------------------------------------
.text:0040E4F0
.text:0040E4F0 loc_40E4F0:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040E4F0                 cmp     eax, 0Dh
.text:0040E4F3                 jg      short loc_40E4E9
.text:0040E4F5                 cmp     eax, 0Ch
.text:0040E4F8                 jge     short loc_40E4C3
.text:0040E4FA                 cmp     eax, 0Ah
.text:0040E4FD                 mov     edx, 7
.text:0040E502                 jz      short loc_40E4C0
.text:0040E504                 cmp     eax, 0Bh
.text:0040E507                 jnz     short loc_40E4C3
.text:0040E509
.text:0040E509 loc_40E509:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040E509                 mov     edx, 8
.text:0040E50E                 jmp     short loc_40E4C0
.text:0040E510 ; ---------------------------------------------------------------------------
.text:0040E510
.text:0040E510 loc_40E510:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040E510                 cmp     eax, 22h ; '"'
.text:0040E513                 jg      short loc_40E544
.text:0040E515                 cmp     eax, 16h
.text:0040E518                 jge     short loc_40E4E2
.text:0040E51A                 cmp     eax, 12h
.text:0040E51D                 jz      short loc_40E4B0
.text:0040E51F                 cmp     eax, 12h
.text:0040E522                 jg      short loc_40E535
.text:0040E524                 cmp     eax, 10h
.text:0040E527                 jz      short loc_40E4E2
.text:0040E529                 mov     edx, 12h
.text:0040E52E                 cmp     eax, 11h
.text:0040E531
.text:0040E531 loc_40E531:                             ; CODE XREF: ___get_errno+172↓j
.text:0040E531                                         ; ___get_errno+24C↓j ...
.text:0040E531                 jnz     short loc_40E4C3
.text:0040E533                 jmp     short loc_40E4C0
.text:0040E535 ; ---------------------------------------------------------------------------
.text:0040E535
.text:0040E535 loc_40E535:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040E535                 cmp     eax, 14h
.text:0040E538                 jle     short loc_40E4E2
.text:0040E53A
.text:0040E53A loc_40E53A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040E53A                 mov     edx, 10h
.text:0040E53F                 jmp     loc_40E4C0
.text:0040E544 ; ---------------------------------------------------------------------------
.text:0040E544
.text:0040E544 loc_40E544:                             ; CODE XREF: ___get_errno+93↑j
.text:0040E544                 cmp     eax, 41h ; 'A'
.text:0040E547                 jz      short loc_40E4E2
.text:0040E549                 cmp     eax, 41h ; 'A'
.text:0040E54C                 jg      short loc_40E561
.text:0040E54E                 cmp     eax, 24h ; '$'
.text:0040E551                 jz      short loc_40E4E2
.text:0040E553                 cmp     eax, 35h ; '5'
.text:0040E556                 jnz     loc_40E4C3
.text:0040E55C                 jmp     loc_40E4B0
.text:0040E561 ; ---------------------------------------------------------------------------
.text:0040E561
.text:0040E561 loc_40E561:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040E561                 cmp     eax, 43h ; 'C'
.text:0040E564                 jz      loc_40E4B0
.text:0040E56A                 cmp     eax, 50h ; 'P'
.text:0040E56D                 jnz     loc_40E4C3
.text:0040E573
.text:0040E573 loc_40E573:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040E573                 mov     edx, 11h
.text:0040E578                 jmp     loc_40E4C0
.text:0040E578 ; ---------------------------------------------------------------------------
.text:0040E57D                 align 10h
.text:0040E580
.text:0040E580 loc_40E580:                             ; CODE XREF: ___get_errno+7↑j
.text:0040E580                 cmp     eax, 0A1h ; '¡'
.text:0040E585                 jz      loc_40E4B0
.text:0040E58B                 cmp     eax, 0A1h ; '¡'
.text:0040E590                 jg      loc_40E640
.text:0040E596                 cmp     eax, 81h
.text:0040E59B                 jg      short loc_40E605
.text:0040E59D                 cmp     eax, 80h ; '€'
.text:0040E5A2                 mov     edx, 0Ah
.text:0040E5A7                 jge     loc_40E4C0
.text:0040E5AD                 cmp     eax, 6Ch ; 'l'
.text:0040E5B0                 jz      loc_40E4E2
.text:0040E5B6                 cmp     eax, 6Ch ; 'l'
.text:0040E5B9                 jg      short loc_40E5D7
.text:0040E5BB                 cmp     eax, 57h ; 'W'
.text:0040E5BE                 jz      loc_40E4C3
.text:0040E5C4                 cmp     eax, 59h ; 'Y'
.text:0040E5C7                 jnz     loc_40E4C3
.text:0040E5CD
.text:0040E5CD loc_40E5CD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040E5CD                                         ; ___get_errno+23C↓j
.text:0040E5CD                 mov     edx, 0Bh
.text:0040E5D2                 jmp     loc_40E4C0
.text:0040E5D7 ; ---------------------------------------------------------------------------
.text:0040E5D7
.text:0040E5D7 loc_40E5D7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040E5D7                 cmp     eax, 70h ; 'p'
.text:0040E5DA                 mov     edx, 1Ch
.text:0040E5DF                 jz      loc_40E4C0
.text:0040E5E5                 cmp     eax, 70h ; 'p'
.text:0040E5E8                 jg      short loc_40E5F7
.text:0040E5EA                 mov     edx, 20h ; ' '
.text:0040E5EF                 cmp     eax, 6Dh ; 'm'
.text:0040E5F2                 jmp     loc_40E531
.text:0040E5F7 ; ---------------------------------------------------------------------------
.text:0040E5F7
.text:0040E5F7 loc_40E5F7:                             ; CODE XREF: ___get_errno+168↑j
.text:0040E5F7                 cmp     eax, 72h ; 'r'
.text:0040E5FA
.text:0040E5FA loc_40E5FA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040E5FA                 jnz     loc_40E4C3
.text:0040E600                 jmp     loc_40E4DB
.text:0040E605 ; ---------------------------------------------------------------------------
.text:0040E605
.text:0040E605 loc_40E605:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040E605                 cmp     eax, 84h ; '„'
.text:0040E60A                 jz      loc_40E4E2
.text:0040E610                 cmp     eax, 84h ; '„'
.text:0040E615                 jg      short loc_40E61E
.text:0040E617                 cmp     eax, 82h ; '‚'
.text:0040E61C                 jmp     short loc_40E5FA
.text:0040E61E ; ---------------------------------------------------------------------------
.text:0040E61E
.text:0040E61E loc_40E61E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040E61E                 cmp     eax, 91h ; '‘'
.text:0040E623                 mov     edx, 29h ; ')'
.text:0040E628                 jz      loc_40E4C0
.text:0040E62E                 cmp     eax, 9Eh ; 'ž'
.text:0040E633
.text:0040E633 loc_40E633:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040E633                 jnz     loc_40E4C3
.text:0040E639                 jmp     loc_40E4E2
.text:0040E639 ; ---------------------------------------------------------------------------
.text:0040E63E                 align 10h
.text:0040E640
.text:0040E640 loc_40E640:                             ; CODE XREF: ___get_errno+110↑j
.text:0040E640                 cmp     eax, 0CEh ; 'Î'
.text:0040E645                 jz      loc_40E4B0
.text:0040E64B                 cmp     eax, 0CEh ; 'Î'
.text:0040E650                 jg      short loc_40E6A0
.text:0040E652                 cmp     eax, 0AAh ; 'ª'
.text:0040E657                 jz      loc_40E53A
.text:0040E65D                 cmp     eax, 0AAh ; 'ª'
.text:0040E662                 jg      short loc_40E676
.text:0040E664                 cmp     eax, 0A4h ; '¤'
.text:0040E669                 jz      loc_40E5CD
.text:0040E66F                 cmp     eax, 0A7h ; '§'
.text:0040E674                 jmp     short loc_40E633
.text:0040E676 ; ---------------------------------------------------------------------------
.text:0040E676
.text:0040E676 loc_40E676:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040E676                 cmp     eax, 0B7h ; '·'
.text:0040E67B                 jz      loc_40E573
.text:0040E681                 cmp     eax, 0B7h ; '·'
.text:0040E686                 jl      loc_40E4C3
.text:0040E68C                 sub     eax, 0BCh ; '¼'
.text:0040E691                 cmp     eax, 0Eh
.text:0040E694                 ja      loc_40E4C3
.text:0040E69A                 jmp     loc_40E509
.text:0040E69A ; ---------------------------------------------------------------------------
.text:0040E69F                 align 10h
.text:0040E6A0
.text:0040E6A0 loc_40E6A0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040E6A0                 cmp     eax, 46Bh
.text:0040E6A5                 mov     edx, 24h ; '$'
.text:0040E6AA                 jz      loc_40E4C0
.text:0040E6B0                 cmp     eax, 46Bh
.text:0040E6B5                 jg      short loc_40E6D1
.text:0040E6B7                 cmp     eax, 0D7h ; '×'
.text:0040E6BC                 jz      loc_40E5CD
.text:0040E6C2                 mov     edx, 5
.text:0040E6C7                 cmp     eax, 45Dh
.text:0040E6CC                 jmp     loc_40E531
.text:0040E6D1 ; ---------------------------------------------------------------------------
.text:0040E6D1
.text:0040E6D1 loc_40E6D1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040E6D1                 cmp     eax, 4D5h
.text:0040E6D6                 mov     edx, 4
.text:0040E6DB                 jz      loc_40E4C0
.text:0040E6E1                 cmp     eax, 4D5h
.text:0040E6E6                 jg      short loc_40E6F7
.text:0040E6E8                 mov     edx, 13h
.text:0040E6ED                 cmp     eax, 4B0h
.text:0040E6F2                 jmp     loc_40E531
.text:0040E6F7 ; ---------------------------------------------------------------------------
.text:0040E6F7
.text:0040E6F7 loc_40E6F7:                             ; CODE XREF: ___get_errno+266↑j
.text:0040E6F7                 cmp     eax, 718h
.text:0040E6FC                 jnz     loc_40E4C3
.text:0040E702                 jmp     loc_40E4E9
.text:0040E702 ___get_errno    endp
.text:0040E702
.text:0040E702 ; ---------------------------------------------------------------------------
.text:0040E707                 align 10h
.text:0040E710
.text:0040E710 ; =============== S U B R O U T I N E =======================================
.text:0040E710
.text:0040E710
.text:0040E710 sub_40E710      proc near               ; CODE XREF: sub_410C40:loc_40CE7D↑p
.text:0040E710                                         ; sub_40D420:loc_40D488↑p ...
.text:0040E710
.text:0040E710 var_C           = dword ptr -0Ch
.text:0040E710
.text:0040E710                 sub     esp, 0Ch
.text:0040E713                 call    GetLastError
.text:0040E718                 mov     [esp+0Ch+var_C], eax
.text:0040E71B                 call    ___get_errno
.text:0040E720                 add     esp, 0Ch
.text:0040E723                 retn
.text:0040E723 sub_40E710      endp
.text:0040E723
.text:0040E723 ; ---------------------------------------------------------------------------
.text:0040E724                 align 10h
.text:0040E730
.text:0040E730 ; =============== S U B R O U T I N E =======================================
.text:0040E730
.text:0040E730
.text:0040E730 sub_40E730      proc near               ; CODE XREF: .text:0040D393↑p
.text:0040E730                                         ; .text:0040D3E3↑p
.text:0040E730
.text:0040E730 arg_4           = dword ptr  8
.text:0040E730
.text:0040E730                 sub     esp, 0Ch
.text:0040E733                 mov     edx, [esp+0Ch+arg_4]
.text:0040E737                 test    edx, edx
.text:0040E739                 jz      short loc_40E740
.text:0040E73B                 add     esp, 0Ch
.text:0040E73E                 jmp     short sub_40E780
.text:0040E740 ; ---------------------------------------------------------------------------
.text:0040E740
.text:0040E740 loc_40E740:                             ; CODE XREF: sub_40E730+9↑j
.text:0040E740                 call    _errno
.text:0040E745                 mov     dword ptr [eax], 16h
.text:0040E74B                 xor     eax, eax
.text:0040E74D                 add     esp, 0Ch
.text:0040E750                 retn
.text:0040E750 sub_40E730      endp
.text:0040E750
.text:0040E751 ; ---------------------------------------------------------------------------
.text:0040E751                 jmp     short sub_40E760
.text:0040E751 ; ---------------------------------------------------------------------------
.text:0040E753                 align 10h
.text:0040E760
.text:0040E760 ; =============== S U B R O U T I N E =======================================
.text:0040E760
.text:0040E760
.text:0040E760 ; int __cdecl sub_40E760(LPCSTR)
.text:0040E760 sub_40E760      proc near               ; CODE XREF: sub_410C40-3E6C↑p
.text:0040E760                                         ; .text:0040D588↑p ...
.text:0040E760
.text:0040E760 lpFileName      = dword ptr -0Ch
.text:0040E760 Destination     = dword ptr -8
.text:0040E760 arg_0           = dword ptr  4
.text:0040E760
.text:0040E760                 sub     esp, 0Ch
.text:0040E763                 mov     edx, [esp+0Ch+arg_0]
.text:0040E767                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040E76F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040E772                 call    sub_40E780
.text:0040E777                 add     esp, 0Ch
.text:0040E77A                 retn
.text:0040E77A sub_40E760      endp
.text:0040E77A
.text:0040E77A ; ---------------------------------------------------------------------------
.text:0040E77B                 align 10h
.text:0040E780
.text:0040E780 ; =============== S U B R O U T I N E =======================================
.text:0040E780
.text:0040E780
.text:0040E780 ; int __cdecl sub_40E780(LPCSTR lpFileName, char *Destination)
.text:0040E780 sub_40E780      proc near               ; CODE XREF: sub_40E730+E↑j
.text:0040E780                                         ; sub_40E760+12↑p
.text:0040E780
.text:0040E780 Size            = dword ptr -2Ch
.text:0040E780 nBufferLength   = dword ptr -28h
.text:0040E780 lpBuffer        = dword ptr -24h
.text:0040E780 lpFilePart      = dword ptr -20h
.text:0040E780 FilePart        = dword ptr -14h
.text:0040E780 lpFileName      = dword ptr  4
.text:0040E780 Destination     = dword ptr  8
.text:0040E780
.text:0040E780                 push    ebp
.text:0040E781                 push    edi
.text:0040E782                 push    esi
.text:0040E783                 push    ebx
.text:0040E784                 sub     esp, 1Ch
.text:0040E787                 mov     edi, [esp+2Ch+lpFileName]
.text:0040E78B                 mov     ebp, [esp+2Ch+Destination]
.text:0040E78F                 test    edi, edi
.text:0040E791                 jz      loc_40E899
.text:0040E797                 cmp     byte ptr [edi], 0
.text:0040E79A                 jz      loc_40E88C
.text:0040E7A0                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040E7A7                 call    malloc
.text:0040E7AC                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040E7B0                 lea     edx, [esp+2Ch+FilePart]
.text:0040E7B4                 mov     ebx, eax
.text:0040E7B6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040E7BA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040E7C2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040E7C5                 call    GetFullPathNameA
.text:0040E7CA                 sub     esp, 10h
.text:0040E7CD                 mov     esi, eax
.text:0040E7CF                 test    eax, eax
.text:0040E7D1                 jz      loc_40E87A
.text:0040E7D7                 cmp     eax, 104h
.text:0040E7DC                 jle     short loc_40E7ED
.text:0040E7DE                 test    ebp, ebp
.text:0040E7E0                 jz      short loc_40E849
.text:0040E7E2                 call    _errno
.text:0040E7E7                 mov     dword ptr [eax], 26h ; '&'
.text:0040E7ED
.text:0040E7ED loc_40E7ED:                             ; CODE XREF: sub_40E780+5C↑j
.text:0040E7ED                                         ; sub_40E780+F5↓j
.text:0040E7ED                 call    _errno
.text:0040E7F2                 mov     edi, [eax]
.text:0040E7F4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040E7FC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040E7FF                 call    sub_40E8B0
.text:0040E804                 test    eax, eax
.text:0040E806                 jnz     short loc_40E820
.text:0040E808                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040E80D                 cmp     al, 2Fh ; '/'
.text:0040E80F                 jz      short loc_40E820
.text:0040E811                 cmp     al, 5Ch ; '\'
.text:0040E813                 jz      short loc_40E820
.text:0040E815                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040E819                 mov     byte ptr [esi+ebx+1], 0
.text:0040E81E                 mov     esi, esi
.text:0040E820
.text:0040E820 loc_40E820:                             ; CODE XREF: sub_40E780+86↑j
.text:0040E820                                         ; sub_40E780+8F↑j ...
.text:0040E820                 call    _errno
.text:0040E825                 mov     [eax], edi
.text:0040E827                 mov     [esp+2Ch+Size], ebx
.text:0040E82A                 call    sub_40D280
.text:0040E82F                 test    ebp, ebp
.text:0040E831                 mov     eax, ebx
.text:0040E833                 jz      short loc_40E841
.text:0040E835                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040E839                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040E83C                 call    strcpy
.text:0040E841
.text:0040E841 loc_40E841:                             ; CODE XREF: sub_40E780+B3↑j
.text:0040E841                                         ; sub_40E780+10A↓j
.text:0040E841                 add     esp, 1Ch
.text:0040E844                 pop     ebx
.text:0040E845                 pop     esi
.text:0040E846                 pop     edi
.text:0040E847                 pop     ebp
.text:0040E848                 retn
.text:0040E849 ; ---------------------------------------------------------------------------
.text:0040E849
.text:0040E849 loc_40E849:                             ; CODE XREF: sub_40E780+60↑j
.text:0040E849                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040E84C                 lea     ecx, [eax+2]
.text:0040E84F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040E853                 call    realloc
.text:0040E858                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040E85C                 lea     edx, [esp+2Ch+FilePart]
.text:0040E860                 mov     ebx, eax
.text:0040E862                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040E866                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040E86A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040E86D                 call    GetFullPathNameA
.text:0040E872                 sub     esp, 10h
.text:0040E875                 jmp     loc_40E7ED
.text:0040E87A ; ---------------------------------------------------------------------------
.text:0040E87A
.text:0040E87A loc_40E87A:                             ; CODE XREF: sub_40E780+51↑j
.text:0040E87A                 call    sub_40E710
.text:0040E87F                 mov     esi, eax
.text:0040E881                 call    _errno
.text:0040E886                 mov     [eax], esi
.text:0040E888
.text:0040E888 loc_40E888:                             ; CODE XREF: sub_40E780+117↓j
.text:0040E888                                         ; sub_40E780+124↓j
.text:0040E888                 xor     eax, eax
.text:0040E88A                 jmp     short loc_40E841
.text:0040E88C ; ---------------------------------------------------------------------------
.text:0040E88C
.text:0040E88C loc_40E88C:                             ; CODE XREF: sub_40E780+1A↑j
.text:0040E88C                 call    _errno
.text:0040E891                 mov     dword ptr [eax], 2
.text:0040E897                 jmp     short loc_40E888
.text:0040E899 ; ---------------------------------------------------------------------------
.text:0040E899
.text:0040E899 loc_40E899:                             ; CODE XREF: sub_40E780+11↑j
.text:0040E899                 call    _errno
.text:0040E89E                 mov     dword ptr [eax], 16h
.text:0040E8A4                 jmp     short loc_40E888
.text:0040E8A4 sub_40E780      endp
.text:0040E8A4
.text:0040E8A4 ; ---------------------------------------------------------------------------
.text:0040E8A6                 align 10h
.text:0040E8B0
.text:0040E8B0 ; =============== S U B R O U T I N E =======================================
.text:0040E8B0
.text:0040E8B0
.text:0040E8B0 ; int __cdecl sub_40E8B0(LPCSTR lpFileName, int)
.text:0040E8B0 sub_40E8B0      proc near               ; CODE XREF: sub_410C40-3E7D↑p
.text:0040E8B0                                         ; .text:0040D262↑p ...
.text:0040E8B0
.text:0040E8B0 uMode           = dword ptr -1Ch
.text:0040E8B0 var_10          = dword ptr -10h
.text:0040E8B0 var_C           = dword ptr -0Ch
.text:0040E8B0 var_8           = dword ptr -8
.text:0040E8B0 var_4           = dword ptr -4
.text:0040E8B0 lpFileName      = dword ptr  4
.text:0040E8B0 arg_4           = dword ptr  8
.text:0040E8B0
.text:0040E8B0                 sub     esp, 1Ch
.text:0040E8B3                 mov     [esp+1Ch+var_10], ebx
.text:0040E8B7                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040E8BB                 mov     [esp+1Ch+var_4], ebp
.text:0040E8BF                 xor     ebp, ebp
.text:0040E8C1                 test    ebx, ebx
.text:0040E8C3                 mov     [esp+1Ch+var_C], esi
.text:0040E8C7                 mov     esi, [esp+1Ch+arg_4]
.text:0040E8CB                 mov     [esp+1Ch+var_8], edi
.text:0040E8CF                 jz      short loc_40E8D9
.text:0040E8D1                 test    esi, 0FFFFFFE8h
.text:0040E8D7                 jz      short loc_40E900
.text:0040E8D9
.text:0040E8D9 loc_40E8D9:                             ; CODE XREF: sub_40E8B0+1F↑j
.text:0040E8D9                 call    _errno
.text:0040E8DE                 mov     dword ptr [eax], 16h
.text:0040E8E4
.text:0040E8E4 loc_40E8E4:                             ; CODE XREF: sub_40E8B0+B1↓j
.text:0040E8E4                 mov     eax, 0FFFFFFFFh
.text:0040E8E9
.text:0040E8E9 loc_40E8E9:                             ; CODE XREF: sub_40E8B0+86↓j
.text:0040E8E9                                         ; sub_40E8B0+A4↓j
.text:0040E8E9                 mov     ebx, [esp+1Ch+var_10]
.text:0040E8ED                 mov     esi, [esp+1Ch+var_C]
.text:0040E8F1                 mov     edi, [esp+1Ch+var_8]
.text:0040E8F5                 mov     ebp, [esp+1Ch+var_4]
.text:0040E8F9                 add     esp, 1Ch
.text:0040E8FC                 retn
.text:0040E8FC ; ---------------------------------------------------------------------------
.text:0040E8FD                 align 10h
.text:0040E900
.text:0040E900 loc_40E900:                             ; CODE XREF: sub_40E8B0+27↑j
.text:0040E900                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040E907                 call    SetErrorMode
.text:0040E90C                 sub     esp, 4
.text:0040E90F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040E912                 call    GetFileAttributesA
.text:0040E917                 sub     esp, 4
.text:0040E91A                 mov     edi, eax
.text:0040E91C                 cmp     eax, 0FFFFFFFFh
.text:0040E91F                 jz      short loc_40E963
.text:0040E921
.text:0040E921 loc_40E921:                             ; CODE XREF: sub_40E8B0+C6↓j
.text:0040E921                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040E928                 call    SetErrorMode
.text:0040E92D                 sub     esp, 4
.text:0040E930                 mov     eax, 0FFFFFFFFh
.text:0040E935                 inc     ebp
.text:0040E936                 jz      short loc_40E8E9
.text:0040E938                 test    esi, 10h
.text:0040E93E                 jz      short loc_40E948
.text:0040E940                 test    edi, 10h
.text:0040E946                 jz      short loc_40E956
.text:0040E948
.text:0040E948 loc_40E948:                             ; CODE XREF: sub_40E8B0+8E↑j
.text:0040E948                 and     esi, 2
.text:0040E94B                 jz      short loc_40E952
.text:0040E94D                 and     edi, 1
.text:0040E950                 jnz     short loc_40E956
.text:0040E952
.text:0040E952 loc_40E952:                             ; CODE XREF: sub_40E8B0+9B↑j
.text:0040E952                 xor     eax, eax
.text:0040E954                 jmp     short loc_40E8E9
.text:0040E956 ; ---------------------------------------------------------------------------
.text:0040E956
.text:0040E956 loc_40E956:                             ; CODE XREF: sub_40E8B0+96↑j
.text:0040E956                                         ; sub_40E8B0+A0↑j
.text:0040E956                 call    _errno
.text:0040E95B                 mov     dword ptr [eax], 0Dh
.text:0040E961                 jmp     short loc_40E8E4
.text:0040E963 ; ---------------------------------------------------------------------------
.text:0040E963
.text:0040E963 loc_40E963:                             ; CODE XREF: sub_40E8B0+6F↑j
.text:0040E963                 call    sub_40E710
.text:0040E968                 mov     ebp, eax
.text:0040E96A                 call    _errno
.text:0040E96F                 mov     [eax], ebp
.text:0040E971                 mov     ebp, 0FFFFFFFFh
.text:0040E976                 jmp     short loc_40E921
.text:0040E976 sub_40E8B0      endp
.text:0040E976
.text:0040E976 ; ---------------------------------------------------------------------------
.text:0040E978                 align 10h
.text:0040E980 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040EB9F↓o
.text:0040E98C aLu_0           db '%lu',0              ; DATA XREF: .text:0040EBAF↓o
.text:0040E990 asc_40E990      db ' ',0                ; DATA XREF: .text:loc_40EC98↓o
.text:0040E992                 align 10h
.text:0040E9A0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040E9A0                                         ; DATA XREF: .text:0040ECCF↓o
.text:0040E9C0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40ECDD↓o
.text:0040E9CC aServer         db ' Server',0          ; DATA XREF: .text:0040ED06↓o
.text:0040E9CC                                         ; .text:loc_40EE7E↓o
.text:0040E9D4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40ED18↓o
.text:0040E9E5 aDatacenterServ db ' Datacenter Server',0
.text:0040E9E5                                         ; DATA XREF: .text:loc_40ED22↓o
.text:0040E9F8 aStandardEditio db ' Standard Edition',0
.text:0040E9F8                                         ; DATA XREF: .text:0040ED4A↓o
.text:0040EA0A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40ED54↓o
.text:0040EA17 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040EA17                                         ; DATA XREF: .text:loc_40ED5E↓o
.text:0040EA2B aDatacenterEdit db ' Datacenter Edition',0
.text:0040EA2B                                         ; DATA XREF: .text:loc_40ED68↓o
.text:0040EA3F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040ED7B↓o
.text:0040EA4D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40ED85↓o
.text:0040EA4D                                         ; .text:loc_40EE90↓o
.text:0040EA5B                 align 10h
.text:0040EA60 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040EA60                                         ; DATA XREF: .text:0040EDB2↓o
.text:0040EA90 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040EDF9↓o
.text:0040EA9C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040EE34↓o
.text:0040EAA2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040EE4B↓o
.text:0040EAAB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040EE62↓o
.text:0040EAB4                 align 10h
.text:0040EAC0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040EAC0                                         ; DATA XREF: .text:0040EFD7↓o
.text:0040EAE3                 align 20h
.text:0040EB00 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040EB00                                         ; DATA XREF: .text:0040F036↓o
.text:0040EB26 ; ---------------------------------------------------------------------------
.text:0040EB26
.text:0040EB26 loc_40EB26:                             ; DATA XREF: .text:loc_40F0A1↓o
.text:0040EB26                 and     [ebx+45h], dl
.text:0040EB29                 add     [eax], ah
.text:0040EB2B                 push    ebx
.text:0040EB2C                 push    eax
.text:0040EB2D                 xor     [eax], eax
.text:0040EB2F
.text:0040EB2F loc_40EB2F:                             ; DATA XREF: .text:loc_40F11B↓o
.text:0040EB2F                 and     [edi+53h], cl
.text:0040EB32                 push    edx
.text:0040EB33                 xor     al, [eax]
.text:0040EB35                 lea     esi, [esi+0]
.text:0040EB39                 lea     edi, [edi+0]
.text:0040EB40                 push    edi
.text:0040EB41                 push    esi
.text:0040EB42                 push    ebx
.text:0040EB43                 sub     esp, 130h
.text:0040EB49                 mov     ebx, [esp+140h]
.text:0040EB50                 call    sub_40F250
.text:0040EB55                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040EB5A                 cmp     eax, 1
.text:0040EB5D                 jz      loc_40F000
.text:0040EB63                 cmp     eax, 1
.text:0040EB66                 jb      loc_40EFD6
.text:0040EB6C                 cmp     eax, 2
.text:0040EB6F                 jz      loc_40EC20
.text:0040EB75                 cmp     eax, 3
.text:0040EB78                 jz      short loc_40EBDF
.text:0040EB7A                 lea     esi, [esi+0]
.text:0040EB80
.text:0040EB80 loc_40EB80:                             ; CODE XREF: .text:0040EC15↓j
.text:0040EB80                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040EB86                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040EB8C
.text:0040EB8C loc_40EB8C:                             ; CODE XREF: .text:0040F01F↓j
.text:0040EB8C                 mov     [esp+10h], edx
.text:0040EB90                 mov     ebx, [esp+144h]
.text:0040EB97                 mov     [esp+0Ch], ecx
.text:0040EB9B                 mov     [esp+8], eax
.text:0040EB9F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040EBA7                 mov     [esp], ebx
.text:0040EBAA                 call    sprintf
.text:0040EBAF                 mov     dword ptr [esp+4], offset aLu_0 ; "%lu"
.text:0040EBB7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040EBBD                 mov     ecx, [esp+148h]
.text:0040EBC4                 mov     [esp+8], edi
.text:0040EBC8                 mov     [esp], ecx
.text:0040EBCB                 call    sprintf
.text:0040EBD0                 mov     eax, 1
.text:0040EBD5
.text:0040EBD5 loc_40EBD5:                             ; CODE XREF: .text:0040EDCF↓j
.text:0040EBD5                                         ; .text:0040EE1C↓j
.text:0040EBD5                 add     esp, 130h
.text:0040EBDB                 pop     ebx
.text:0040EBDC                 pop     esi
.text:0040EBDD                 pop     edi
.text:0040EBDE                 retn
.text:0040EBDF ; ---------------------------------------------------------------------------
.text:0040EBDF
.text:0040EBDF loc_40EBDF:                             ; CODE XREF: .text:0040EB78↑j
.text:0040EBDF                 mov     dword ptr [ebx], 7263694Dh
.text:0040EBE5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EBEC                 mov     dword ptr [ebx+8], 69572074h
.text:0040EBF3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EBFA                 mov     dword ptr [ebx+10h], 45432073h
.text:0040EC01                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040EC07                 mov     esi, esi
.text:0040EC09                 lea     edi, [edi+0]
.text:0040EC10
.text:0040EC10 loc_40EC10:                             ; CODE XREF: .text:0040ECB8↓j
.text:0040EC10                                         ; .text:0040EFF9↓j ...
.text:0040EC10                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040EC15                 jmp     loc_40EB80
.text:0040EC15 ; ---------------------------------------------------------------------------
.text:0040EC1A                 align 10h
.text:0040EC20
.text:0040EC20 loc_40EC20:                             ; CODE XREF: .text:0040EB6F↑j
.text:0040EC20                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040EC26                 cmp     edx, 3
.text:0040EC29                 mov     eax, edx
.text:0040EC2B                 jz      loc_40EF95
.text:0040EC31
.text:0040EC31 loc_40EC31:                             ; CODE XREF: .text:0040EF9C↓j
.text:0040EC31                 cmp     eax, 4
.text:0040EC34                 jz      loc_40EF55
.text:0040EC3A
.text:0040EC3A loc_40EC3A:                             ; CODE XREF: .text:0040EF5D↓j
.text:0040EC3A                 cmp     eax, 4
.text:0040EC3D                 ja      loc_40EEA2
.text:0040EC43                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040EC49                 test    ecx, ecx
.text:0040EC4B                 jnz     loc_40EEA2
.text:0040EC51                 mov     dword ptr [ebx], 7263694Dh
.text:0040EC57                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EC5E                 mov     dword ptr [ebx+8], 69572074h
.text:0040EC65                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EC6C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040EC73
.text:0040EC73 loc_40EC73:                             ; CODE XREF: .text:0040EF15↓j
.text:0040EC73                 mov     byte ptr [ebx+14h], 0
.text:0040EC77
.text:0040EC77 loc_40EC77:                             ; CODE XREF: .text:0040EEA5↓j
.text:0040EC77                                         ; .text:0040EEBC↓j ...
.text:0040EC77                 mov     esi, dword_414080
.text:0040EC7D                 test    esi, esi
.text:0040EC7F                 jz      loc_40ED92
.text:0040EC85                 movzx   eax, ds:byte_41563A
.text:0040EC8C                 cmp     al, 1
.text:0040EC8E                 jz      loc_40ED72
.text:0040EC94                 cmp     al, 3
.text:0040EC96                 jz      short loc_40ECBD
.text:0040EC98
.text:0040EC98 loc_40EC98:                             ; CODE XREF: .text:0040ECDB↓j
.text:0040EC98                                         ; .text:0040ED16↓j ...
.text:0040EC98                 mov     dword ptr [esp+4], offset asc_40E990 ; " "
.text:0040ECA0                 mov     [esp], ebx
.text:0040ECA3                 call    strcat
.text:0040ECA8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040ECB0                 mov     [esp], ebx
.text:0040ECB3                 call    strcat
.text:0040ECB8                 jmp     loc_40EC10
.text:0040ECBD ; ---------------------------------------------------------------------------
.text:0040ECBD
.text:0040ECBD loc_40ECBD:                             ; CODE XREF: .text:0040EC96↑j
.text:0040ECBD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040ECC4                 jz      short loc_40ECE6
.text:0040ECC6
.text:0040ECC6 loc_40ECC6:                             ; CODE XREF: .text:0040ECF2↓j
.text:0040ECC6                 test    byte ptr ds:word_415638, 2
.text:0040ECCD                 jz      short loc_40ECDD
.text:0040ECCF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040ECD6
.text:0040ECD6 loc_40ECD6:                             ; CODE XREF: .text:0040ECE4↓j
.text:0040ECD6                 call    printf
.text:0040ECDB                 jmp     short loc_40EC98
.text:0040ECDD ; ---------------------------------------------------------------------------
.text:0040ECDD
.text:0040ECDD loc_40ECDD:                             ; CODE XREF: .text:0040ECCD↑j
.text:0040ECDD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040ECE4                 jmp     short loc_40ECD6
.text:0040ECE6 ; ---------------------------------------------------------------------------
.text:0040ECE6
.text:0040ECE6 loc_40ECE6:                             ; CODE XREF: .text:0040ECC4↑j
.text:0040ECE6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040ECEB                 cmp     eax, 2
.text:0040ECEE                 jz      short loc_40ED30
.text:0040ECF0                 test    eax, eax
.text:0040ECF2                 jnz     short loc_40ECC6
.text:0040ECF4                 cmp     byte ptr ds:word_415638, 0
.text:0040ECFB                 js      short loc_40ED22
.text:0040ECFD                 test    byte ptr ds:word_415638, 2
.text:0040ED04                 jnz     short loc_40ED18
.text:0040ED06                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040ED0E
.text:0040ED0E loc_40ED0E:                             ; CODE XREF: .text:0040ED20↓j
.text:0040ED0E                                         ; .text:0040ED2A↓j ...
.text:0040ED0E                 mov     [esp], ebx
.text:0040ED11                 call    strcat
.text:0040ED16                 jmp     short loc_40EC98
.text:0040ED18 ; ---------------------------------------------------------------------------
.text:0040ED18
.text:0040ED18 loc_40ED18:                             ; CODE XREF: .text:0040ED04↑j
.text:0040ED18                                         ; .text:0040EE79↓j
.text:0040ED18                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040ED20                 jmp     short loc_40ED0E
.text:0040ED22 ; ---------------------------------------------------------------------------
.text:0040ED22
.text:0040ED22 loc_40ED22:                             ; CODE XREF: .text:0040ECFB↑j
.text:0040ED22                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040ED2A                 jmp     short loc_40ED0E
.text:0040ED2A ; ---------------------------------------------------------------------------
.text:0040ED2C                 align 10h
.text:0040ED30
.text:0040ED30 loc_40ED30:                             ; CODE XREF: .text:0040ECEE↑j
.text:0040ED30                 cmp     byte ptr ds:word_415638, 0
.text:0040ED37                 js      short loc_40ED68
.text:0040ED39                 movzx   eax, ds:word_415638
.text:0040ED40                 test    al, 2
.text:0040ED42                 jnz     short loc_40ED5E
.text:0040ED44                 cmp     ax, 400h
.text:0040ED48                 jz      short loc_40ED54
.text:0040ED4A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040ED52                 jmp     short loc_40ED0E
.text:0040ED54 ; ---------------------------------------------------------------------------
.text:0040ED54
.text:0040ED54 loc_40ED54:                             ; CODE XREF: .text:0040ED48↑j
.text:0040ED54                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040ED5C                 jmp     short loc_40ED0E
.text:0040ED5E ; ---------------------------------------------------------------------------
.text:0040ED5E
.text:0040ED5E loc_40ED5E:                             ; CODE XREF: .text:0040ED42↑j
.text:0040ED5E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040ED66                 jmp     short loc_40ED0E
.text:0040ED68 ; ---------------------------------------------------------------------------
.text:0040ED68
.text:0040ED68 loc_40ED68:                             ; CODE XREF: .text:0040ED37↑j
.text:0040ED68                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040ED70                 jmp     short loc_40ED0E
.text:0040ED72 ; ---------------------------------------------------------------------------
.text:0040ED72
.text:0040ED72 loc_40ED72:                             ; CODE XREF: .text:0040EC8E↑j
.text:0040ED72                 test    byte ptr ds:word_415638+1, 2
.text:0040ED79                 jz      short loc_40ED85
.text:0040ED7B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040ED83                 jmp     short loc_40ED0E
.text:0040ED85 ; ---------------------------------------------------------------------------
.text:0040ED85
.text:0040ED85 loc_40ED85:                             ; CODE XREF: .text:0040ED79↑j
.text:0040ED85                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040ED8D                 jmp     loc_40ED0E
.text:0040ED92 ; ---------------------------------------------------------------------------
.text:0040ED92
.text:0040ED92 loc_40ED92:                             ; CODE XREF: .text:0040EC7F↑j
.text:0040ED92                 mov     dword ptr [esp+28h], 0FFh
.text:0040ED9A                 lea     edx, [esp+2Ch]
.text:0040ED9E                 mov     [esp+10h], edx
.text:0040EDA2                 mov     dword ptr [esp+0Ch], 1
.text:0040EDAA                 mov     dword ptr [esp+8], 0
.text:0040EDB2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040EDBA                 mov     dword ptr [esp], 80000002h
.text:0040EDC1                 call    RegOpenKeyExA
.text:0040EDC6                 mov     edi, eax
.text:0040EDC8                 sub     esp, 14h
.text:0040EDCB                 xor     eax, eax
.text:0040EDCD                 test    edi, edi
.text:0040EDCF                 jnz     loc_40EBD5
.text:0040EDD5                 mov     dword ptr [esp+0Ch], 0
.text:0040EDDD                 mov     edi, [esp+2Ch]
.text:0040EDE1                 lea     esi, [esp+28h]
.text:0040EDE5                 mov     [esp+14h], esi
.text:0040EDE9                 lea     esi, [esp+30h]
.text:0040EDED                 mov     [esp+10h], esi
.text:0040EDF1                 mov     dword ptr [esp+8], 0
.text:0040EDF9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040EE01                 mov     [esp], edi
.text:0040EE04                 call    RegQueryValueExA
.text:0040EE09                 sub     esp, 18h
.text:0040EE0C                 test    eax, eax
.text:0040EE0E                 jnz     short loc_40EE1A
.text:0040EE10                 cmp     dword ptr [esp+28h], 0FFh
.text:0040EE18                 jbe     short loc_40EE21
.text:0040EE1A
.text:0040EE1A loc_40EE1A:                             ; CODE XREF: .text:0040EE0E↑j
.text:0040EE1A                 xor     eax, eax
.text:0040EE1C                 jmp     loc_40EBD5
.text:0040EE21 ; ---------------------------------------------------------------------------
.text:0040EE21
.text:0040EE21 loc_40EE21:                             ; CODE XREF: .text:0040EE18↑j
.text:0040EE21                 mov     edx, [esp+2Ch]
.text:0040EE25                 mov     [esp], edx
.text:0040EE28                 call    RegCloseKey
.text:0040EE2D                 sub     esp, 4
.text:0040EE30                 mov     [esp+4], esi
.text:0040EE34                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040EE3B                 call    lstrcmpiA
.text:0040EE40                 sub     esp, 8
.text:0040EE43                 test    eax, eax
.text:0040EE45                 jz      short loc_40EE90
.text:0040EE47
.text:0040EE47 loc_40EE47:                             ; CODE XREF: .text:0040EEA0↓j
.text:0040EE47                 mov     [esp+4], esi
.text:0040EE4B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040EE52                 call    lstrcmpiA
.text:0040EE57                 sub     esp, 8
.text:0040EE5A                 test    eax, eax
.text:0040EE5C                 jz      short loc_40EE7E
.text:0040EE5E
.text:0040EE5E loc_40EE5E:                             ; CODE XREF: .text:0040EE8E↓j
.text:0040EE5E                 mov     [esp+4], esi
.text:0040EE62                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040EE69                 call    lstrcmpiA
.text:0040EE6E                 sub     esp, 8
.text:0040EE71                 test    eax, eax
.text:0040EE73                 jnz     loc_40EC98
.text:0040EE79                 jmp     loc_40ED18
.text:0040EE7E ; ---------------------------------------------------------------------------
.text:0040EE7E
.text:0040EE7E loc_40EE7E:                             ; CODE XREF: .text:0040EE5C↑j
.text:0040EE7E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040EE86                 mov     [esp], ebx
.text:0040EE89                 call    strcat
.text:0040EE8E                 jmp     short loc_40EE5E
.text:0040EE90 ; ---------------------------------------------------------------------------
.text:0040EE90
.text:0040EE90 loc_40EE90:                             ; CODE XREF: .text:0040EE45↑j
.text:0040EE90                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040EE98                 mov     [esp], ebx
.text:0040EE9B                 call    strcat
.text:0040EEA0                 jmp     short loc_40EE47
.text:0040EEA2 ; ---------------------------------------------------------------------------
.text:0040EEA2
.text:0040EEA2 loc_40EEA2:                             ; CODE XREF: .text:0040EC3D↑j
.text:0040EEA2                                         ; .text:0040EC4B↑j
.text:0040EEA2                 cmp     eax, 5
.text:0040EEA5                 jnz     loc_40EC77
.text:0040EEAB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040EEB0                 cmp     eax, 2
.text:0040EEB3                 jz      short loc_40EF1A
.text:0040EEB5                 cmp     eax, 1
.text:0040EEB8                 jz      short loc_40EEF3
.text:0040EEBA                 test    eax, eax
.text:0040EEBC                 jnz     loc_40EC77
.text:0040EEC2                 mov     dword ptr [ebx], 7263694Dh
.text:0040EEC8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EECF                 mov     dword ptr [ebx+8], 69572074h
.text:0040EED6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EEDD                 mov     dword ptr [ebx+10h], 30322073h
.text:0040EEE4                 mov     word ptr [ebx+14h], 3030h
.text:0040EEEA                 mov     byte ptr [ebx+16h], 0
.text:0040EEEE                 jmp     loc_40EC77
.text:0040EEF3 ; ---------------------------------------------------------------------------
.text:0040EEF3
.text:0040EEF3 loc_40EEF3:                             ; CODE XREF: .text:0040EEB8↑j
.text:0040EEF3                 mov     dword ptr [ebx], 7263694Dh
.text:0040EEF9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EF00                 mov     dword ptr [ebx+8], 69572074h
.text:0040EF07                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EF0E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040EF15                 jmp     loc_40EC73
.text:0040EF1A ; ---------------------------------------------------------------------------
.text:0040EF1A
.text:0040EF1A loc_40EF1A:                             ; CODE XREF: .text:0040EEB3↑j
.text:0040EF1A                 mov     dword ptr [ebx], 7263694Dh
.text:0040EF20                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EF27                 mov     dword ptr [ebx+8], 69572074h
.text:0040EF2E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EF35                 mov     dword ptr [ebx+10h], 65532073h
.text:0040EF3C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040EF43                 mov     dword ptr [ebx+18h], 30303220h
.text:0040EF4A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040EF50                 jmp     loc_40EC77
.text:0040EF55 ; ---------------------------------------------------------------------------
.text:0040EF55
.text:0040EF55 loc_40EF55:                             ; CODE XREF: .text:0040EC34↑j
.text:0040EF55                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040EF5B                 test    edx, edx
.text:0040EF5D                 jnz     loc_40EC3A
.text:0040EF63                 mov     dword ptr [ebx], 7263694Dh
.text:0040EF69                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EF70                 mov     dword ptr [ebx+8], 69572074h
.text:0040EF77                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EF7E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040EF85                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040EF8C                 mov     byte ptr [ebx+18h], 0
.text:0040EF90                 jmp     loc_40EC77
.text:0040EF95 ; ---------------------------------------------------------------------------
.text:0040EF95
.text:0040EF95 loc_40EF95:                             ; CODE XREF: .text:0040EC2B↑j
.text:0040EF95                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040EF9C                 jnz     loc_40EC31
.text:0040EFA2                 mov     dword ptr [ebx], 7263694Dh
.text:0040EFA8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EFAF                 mov     dword ptr [ebx+8], 69572074h
.text:0040EFB6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EFBD                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040EFC4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040EFCB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040EFD1                 jmp     loc_40EC77
.text:0040EFD6 ; ---------------------------------------------------------------------------
.text:0040EFD6
.text:0040EFD6 loc_40EFD6:                             ; CODE XREF: .text:0040EB66↑j
.text:0040EFD6                 cld
.text:0040EFD7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040EFDC                 mov     ecx, 8
.text:0040EFE1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040EFE8                 mov     edi, ebx
.text:0040EFEA                 rep movsd
.text:0040EFEC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040EFF3                 mov     [edi+2], dl
.text:0040EFF6                 mov     [edi], si
.text:0040EFF9                 jmp     loc_40EC10
.text:0040EFF9 ; ---------------------------------------------------------------------------
.text:0040EFFE                 align 10h
.text:0040F000
.text:0040F000 loc_40F000:                             ; CODE XREF: .text:0040EB5D↑j
.text:0040F000                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F006                 cmp     ecx, 4
.text:0040F009                 jz      loc_40F0C0
.text:0040F00F
.text:0040F00F loc_40F00F:                             ; CODE XREF: .text:0040F116↓j
.text:0040F00F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F015
.text:0040F015 loc_40F015:                             ; CODE XREF: .text:0040F0C8↓j
.text:0040F015                 cmp     ecx, 4
.text:0040F018                 jz      short loc_40F024
.text:0040F01A
.text:0040F01A loc_40F01A:                             ; CODE XREF: .text:0040F02C↓j
.text:0040F01A                                         ; .text:0040F031↓j
.text:0040F01A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F01F                 jmp     loc_40EB8C
.text:0040F024 ; ---------------------------------------------------------------------------
.text:0040F024
.text:0040F024 loc_40F024:                             ; CODE XREF: .text:0040F018↑j
.text:0040F024                 cmp     edx, 0Ah
.text:0040F027                 jz      short loc_40F051
.text:0040F029
.text:0040F029 loc_40F029:                             ; CODE XREF: .text:0040F09F↓j
.text:0040F029                 cmp     ecx, 4
.text:0040F02C                 jnz     short loc_40F01A
.text:0040F02E                 cmp     edx, 5Ah ; 'Z'
.text:0040F031                 jnz     short loc_40F01A
.text:0040F033                 cld
.text:0040F034                 mov     edi, ebx
.text:0040F036                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040F03B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040F042                 mov     ecx, 9
.text:0040F047                 rep movsd
.text:0040F049                 mov     [edi], bx
.text:0040F04C                 jmp     loc_40EC10
.text:0040F051 ; ---------------------------------------------------------------------------
.text:0040F051
.text:0040F051 loc_40F051:                             ; CODE XREF: .text:0040F027↑j
.text:0040F051                 mov     dword ptr [ebx], 7263694Dh
.text:0040F057                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F05E                 mov     dword ptr [ebx+8], 69572074h
.text:0040F065                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F06C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040F073                 mov     byte ptr [ebx+14h], 0
.text:0040F077                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F07D                 lea     edi, [edx-7CFh]
.text:0040F083                 cmp     edi, 0B7h ; '·'
.text:0040F089                 jbe     short loc_40F0B3
.text:0040F08B                 cmp     edx, 886h
.text:0040F091                 ja      short loc_40F0A1
.text:0040F093
.text:0040F093 loc_40F093:                             ; CODE XREF: .text:0040F0B1↓j
.text:0040F093                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F099                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F09F                 jmp     short loc_40F029
.text:0040F0A1 ; ---------------------------------------------------------------------------
.text:0040F0A1
.text:0040F0A1 loc_40F0A1:                             ; CODE XREF: .text:0040F091↑j
.text:0040F0A1                 mov     dword ptr [esp+4], offset loc_40EB26
.text:0040F0A9
.text:0040F0A9 loc_40F0A9:                             ; CODE XREF: .text:0040F0BB↓j
.text:0040F0A9                 mov     [esp], ebx
.text:0040F0AC                 call    strcat
.text:0040F0B1                 jmp     short loc_40F093
.text:0040F0B3 ; ---------------------------------------------------------------------------
.text:0040F0B3
.text:0040F0B3 loc_40F0B3:                             ; CODE XREF: .text:0040F089↑j
.text:0040F0B3                 mov     dword ptr [esp+4], 40EB2Ah
.text:0040F0BB                 jmp     short loc_40F0A9
.text:0040F0BB ; ---------------------------------------------------------------------------
.text:0040F0BD                 align 10h
.text:0040F0C0
.text:0040F0C0 loc_40F0C0:                             ; CODE XREF: .text:0040F009↑j
.text:0040F0C0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040F0C6                 test    edx, edx
.text:0040F0C8                 jnz     loc_40F015
.text:0040F0CE                 mov     dword ptr [ebx], 7263694Dh
.text:0040F0D4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040F0DB                 mov     dword ptr [ebx+8], 69572074h
.text:0040F0E2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040F0E9                 mov     dword ptr [ebx+10h], 35392073h
.text:0040F0F0                 mov     byte ptr [ebx+14h], 0
.text:0040F0F4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F0FA                 lea     ecx, [edx-3B7h]
.text:0040F100                 cmp     ecx, 81h
.text:0040F106                 jbe     short loc_40F12D
.text:0040F108                 cmp     edx, 438h
.text:0040F10E                 ja      short loc_40F11B
.text:0040F110
.text:0040F110 loc_40F110:                             ; CODE XREF: .text:0040F12B↓j
.text:0040F110                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F116                 jmp     loc_40F00F
.text:0040F11B ; ---------------------------------------------------------------------------
.text:0040F11B
.text:0040F11B loc_40F11B:                             ; CODE XREF: .text:0040F10E↑j
.text:0040F11B                 mov     dword ptr [esp+4], offset loc_40EB2F
.text:0040F123
.text:0040F123 loc_40F123:                             ; CODE XREF: .text:0040F135↓j
.text:0040F123                 mov     [esp], ebx
.text:0040F126                 call    strcat
.text:0040F12B                 jmp     short loc_40F110
.text:0040F12D ; ---------------------------------------------------------------------------
.text:0040F12D
.text:0040F12D loc_40F12D:                             ; CODE XREF: .text:0040F106↑j
.text:0040F12D                 mov     dword ptr [esp+4], 40EB2Ah
.text:0040F135                 jmp     short loc_40F123
.text:0040F135 ; ---------------------------------------------------------------------------
.text:0040F137                 align 10h
.text:0040F140
.text:0040F140 ; =============== S U B R O U T I N E =======================================
.text:0040F140
.text:0040F140
.text:0040F140 sub_40F140      proc near               ; CODE XREF: .text:0040DCCE↑p
.text:0040F140                                         ; sub_40E150+12A↑p
.text:0040F140                 sub     esp, 0Ch
.text:0040F143                 call    sub_40F250
.text:0040F148                 mov     eax, ds:dword_415590
.text:0040F14D                 add     esp, 0Ch
.text:0040F150                 retn
.text:0040F150 sub_40F140      endp
.text:0040F150
.text:0040F151 ; ---------------------------------------------------------------------------
.text:0040F151                 jmp     short loc_40F160
.text:0040F151 ; ---------------------------------------------------------------------------
.text:0040F153                 align 10h
.text:0040F160
.text:0040F160 loc_40F160:                             ; CODE XREF: .text:0040F151↑j
.text:0040F160                 sub     esp, 0Ch
.text:0040F163                 call    sub_40F250
.text:0040F168                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F16D                 add     esp, 0Ch
.text:0040F170                 retn
.text:0040F171 ; ---------------------------------------------------------------------------
.text:0040F171                 jmp     short loc_40F180
.text:0040F171 ; ---------------------------------------------------------------------------
.text:0040F173                 align 10h
.text:0040F180
.text:0040F180 loc_40F180:                             ; CODE XREF: .text:0040F171↑j
.text:0040F180                 sub     esp, 0Ch
.text:0040F183                 call    sub_40F250
.text:0040F188                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040F18D                 add     esp, 0Ch
.text:0040F190                 retn
.text:0040F191 ; ---------------------------------------------------------------------------
.text:0040F191                 jmp     short loc_40F1A0
.text:0040F191 ; ---------------------------------------------------------------------------
.text:0040F193                 align 10h
.text:0040F1A0
.text:0040F1A0 loc_40F1A0:                             ; CODE XREF: .text:0040F191↑j
.text:0040F1A0                 sub     esp, 0Ch
.text:0040F1A3                 call    sub_40F250
.text:0040F1A8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F1AD                 add     esp, 0Ch
.text:0040F1B0                 retn
.text:0040F1B1 ; ---------------------------------------------------------------------------
.text:0040F1B1                 jmp     short loc_40F1C0
.text:0040F1B1 ; ---------------------------------------------------------------------------
.text:0040F1B3                 align 10h
.text:0040F1C0
.text:0040F1C0 loc_40F1C0:                             ; CODE XREF: .text:0040F1B1↑j
.text:0040F1C0                 sub     esp, 0Ch
.text:0040F1C3                 call    GetVersion
.text:0040F1C8                 shr     eax, 10h
.text:0040F1CB                 add     esp, 0Ch
.text:0040F1CE                 retn
.text:0040F1CE ; ---------------------------------------------------------------------------
.text:0040F1CF                 align 10h
.text:0040F1D0                 sub     esp, 0Ch
.text:0040F1D3                 call    sub_40F250
.text:0040F1D8                 xor     eax, eax
.text:0040F1DA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040F1E1                 setz    al
.text:0040F1E4                 add     esp, 0Ch
.text:0040F1E7                 retn
.text:0040F1E7 ; ---------------------------------------------------------------------------
.text:0040F1E8                 align 10h
.text:0040F1F0
.text:0040F1F0 ; =============== S U B R O U T I N E =======================================
.text:0040F1F0
.text:0040F1F0
.text:0040F1F0 sub_40F1F0      proc near               ; CODE XREF: .text:loc_40D660↑p
.text:0040F1F0                                         ; .text:loc_40DCB4↑p ...
.text:0040F1F0                 sub     esp, 0Ch
.text:0040F1F3                 call    sub_40F250
.text:0040F1F8                 xor     eax, eax
.text:0040F1FA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040F201                 setz    al
.text:0040F204                 add     esp, 0Ch
.text:0040F207                 retn
.text:0040F207 sub_40F1F0      endp
.text:0040F207
.text:0040F207 ; ---------------------------------------------------------------------------
.text:0040F208                 align 10h
.text:0040F210                 sub     esp, 0Ch
.text:0040F213                 call    sub_40F250
.text:0040F218                 xor     eax, eax
.text:0040F21A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040F221                 setz    al
.text:0040F224                 add     esp, 0Ch
.text:0040F227                 retn
.text:0040F227 ; ---------------------------------------------------------------------------
.text:0040F228                 align 10h
.text:0040F230                 sub     esp, 0Ch
.text:0040F233                 call    sub_40F250
.text:0040F238                 xor     eax, eax
.text:0040F23A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040F241                 setz    al
.text:0040F244                 add     esp, 0Ch
.text:0040F247                 retn
.text:0040F247 ; ---------------------------------------------------------------------------
.text:0040F248                 align 10h
.text:0040F250
.text:0040F250 ; =============== S U B R O U T I N E =======================================
.text:0040F250
.text:0040F250
.text:0040F250 sub_40F250      proc near               ; CODE XREF: .text:0040EB50↑p
.text:0040F250                                         ; sub_40F140+3↑p ...
.text:0040F250
.text:0040F250 lpVersionInformation= dword ptr -0BCh
.text:0040F250 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040F250
.text:0040F250                 sub     esp, 0BCh
.text:0040F256                 mov     edx, ds:dword_415640
.text:0040F25C                 test    edx, edx
.text:0040F25E                 jz      short loc_40F270
.text:0040F260
.text:0040F260 loc_40F260:                             ; CODE XREF: sub_40F250+7B↓j
.text:0040F260                 mov     edx, 1
.text:0040F265
.text:0040F265 loc_40F265:                             ; CODE XREF: sub_40F250+217↓j
.text:0040F265                 mov     eax, edx
.text:0040F267                 add     esp, 0BCh
.text:0040F26D                 retn
.text:0040F26D ; ---------------------------------------------------------------------------
.text:0040F26E                 align 10h
.text:0040F270
.text:0040F270 loc_40F270:                             ; CODE XREF: sub_40F250+E↑j
.text:0040F270                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040F277                 mov     edx, 9Ch ; 'œ'
.text:0040F27C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040F282                 call    GetVersionExA
.text:0040F287                 sub     esp, 4
.text:0040F28A                 test    eax, eax
.text:0040F28C                 jz      loc_40F444
.text:0040F292
.text:0040F292 loc_40F292:                             ; CODE XREF: sub_40F250+245↓j
.text:0040F292                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040F299                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040F29E                 cmp     eax, 1
.text:0040F2A1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040F2A7                 jz      loc_40F390
.text:0040F2AD                 cmp     eax, 1
.text:0040F2B0                 jb      loc_40F380
.text:0040F2B6                 cmp     eax, 2
.text:0040F2B9                 jz      short loc_40F2DA
.text:0040F2BB                 cmp     eax, 3
.text:0040F2BE                 jz      short loc_40F2CD
.text:0040F2C0
.text:0040F2C0 loc_40F2C0:                             ; CODE XREF: sub_40F250+88↓j
.text:0040F2C0                                         ; sub_40F250+C0↓j ...
.text:0040F2C0                 mov     edx, 1
.text:0040F2C5                 mov     ds:dword_415640, edx
.text:0040F2CB                 jmp     short loc_40F260
.text:0040F2CD ; ---------------------------------------------------------------------------
.text:0040F2CD
.text:0040F2CD loc_40F2CD:                             ; CODE XREF: sub_40F250+6E↑j
.text:0040F2CD                 mov     ecx, 17h
.text:0040F2D2
.text:0040F2D2 loc_40F2D2:                             ; CODE XREF: sub_40F250+1A7↓j
.text:0040F2D2                 mov     ds:dword_415590, ecx
.text:0040F2D8                 jmp     short loc_40F2C0
.text:0040F2DA ; ---------------------------------------------------------------------------
.text:0040F2DA
.text:0040F2DA loc_40F2DA:                             ; CODE XREF: sub_40F250+69↑j
.text:0040F2DA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040F2DF                 cmp     eax, 3
.text:0040F2E2                 jz      short loc_40F35B
.text:0040F2E4                 cmp     eax, 4
.text:0040F2E7                 jz      short loc_40F34A
.text:0040F2E9
.text:0040F2E9 loc_40F2E9:                             ; CODE XREF: sub_40F250+102↓j
.text:0040F2E9                 cmp     eax, 4
.text:0040F2EC                 ja      short loc_40F312
.text:0040F2EE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040F2F4                 test    ecx, ecx
.text:0040F2F6                 jnz     short loc_40F312
.text:0040F2F8                 mov     edx, 1Eh
.text:0040F2FD
.text:0040F2FD loc_40F2FD:                             ; CODE XREF: sub_40F250+DF↓j
.text:0040F2FD                 mov     ds:dword_415590, edx
.text:0040F303
.text:0040F303 loc_40F303:                             ; CODE XREF: sub_40F250+C5↓j
.text:0040F303                                         ; sub_40F250+D8↓j ...
.text:0040F303                 movzx   ecx, ds:word_415634
.text:0040F30A                 add     ds:dword_415590, ecx
.text:0040F310                 jmp     short loc_40F2C0
.text:0040F312 ; ---------------------------------------------------------------------------
.text:0040F312
.text:0040F312 loc_40F312:                             ; CODE XREF: sub_40F250+9C↑j
.text:0040F312                                         ; sub_40F250+A6↑j
.text:0040F312                 cmp     eax, 5
.text:0040F315                 jnz     short loc_40F303
.text:0040F317                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F31C                 cmp     eax, 2
.text:0040F31F                 jz      short loc_40F33E
.text:0040F321                 cmp     eax, 1
.text:0040F324                 jz      short loc_40F331
.text:0040F326                 test    eax, eax
.text:0040F328                 jnz     short loc_40F303
.text:0040F32A                 mov     edx, 32h ; '2'
.text:0040F32F                 jmp     short loc_40F2FD
.text:0040F331 ; ---------------------------------------------------------------------------
.text:0040F331
.text:0040F331 loc_40F331:                             ; CODE XREF: sub_40F250+D4↑j
.text:0040F331                 mov     ecx, 3Ch ; '<'
.text:0040F336
.text:0040F336 loc_40F336:                             ; CODE XREF: sub_40F250+122↓j
.text:0040F336                 mov     ds:dword_415590, ecx
.text:0040F33C                 jmp     short loc_40F303
.text:0040F33E ; ---------------------------------------------------------------------------
.text:0040F33E
.text:0040F33E loc_40F33E:                             ; CODE XREF: sub_40F250+CF↑j
.text:0040F33E                 mov     eax, 46h ; 'F'
.text:0040F343
.text:0040F343 loc_40F343:                             ; CODE XREF: sub_40F250+109↓j
.text:0040F343                                         ; sub_40F250+129↓j
.text:0040F343                 mov     ds:dword_415590, eax
.text:0040F348                 jmp     short loc_40F303
.text:0040F34A ; ---------------------------------------------------------------------------
.text:0040F34A
.text:0040F34A loc_40F34A:                             ; CODE XREF: sub_40F250+97↑j
.text:0040F34A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040F350                 test    ecx, ecx
.text:0040F352                 jnz     short loc_40F2E9
.text:0040F354                 mov     eax, 28h ; '('
.text:0040F359                 jmp     short loc_40F343
.text:0040F35B ; ---------------------------------------------------------------------------
.text:0040F35B
.text:0040F35B loc_40F35B:                             ; CODE XREF: sub_40F250+92↑j
.text:0040F35B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F360                 cmp     eax, 33h ; '3'
.text:0040F363                 jz      short loc_40F374
.text:0040F365                 cmp     eax, 5
.text:0040F368                 setz    cl
.text:0040F36B                 movzx   edx, cl
.text:0040F36E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040F372                 jmp     short loc_40F336
.text:0040F374 ; ---------------------------------------------------------------------------
.text:0040F374
.text:0040F374 loc_40F374:                             ; CODE XREF: sub_40F250+113↑j
.text:0040F374                 mov     eax, 24h ; '$'
.text:0040F379                 jmp     short loc_40F343
.text:0040F379 ; ---------------------------------------------------------------------------
.text:0040F37B                 align 10h
.text:0040F380
.text:0040F380 loc_40F380:                             ; CODE XREF: sub_40F250+60↑j
.text:0040F380                 mov     edx, 2
.text:0040F385                 mov     ds:dword_415590, edx
.text:0040F38B                 jmp     loc_40F2C0
.text:0040F390 ; ---------------------------------------------------------------------------
.text:0040F390
.text:0040F390 loc_40F390:                             ; CODE XREF: sub_40F250+57↑j
.text:0040F390                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040F396                 cmp     ecx, 4
.text:0040F399                 jnz     loc_40F2C0
.text:0040F39F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040F3A4                 test    eax, eax
.text:0040F3A6                 jnz     short loc_40F3CA
.text:0040F3A8                 mov     eax, 0Ah
.text:0040F3AD                 mov     ds:dword_415590, eax
.text:0040F3B2                 lea     eax, [edx-3B7h]
.text:0040F3B8                 cmp     eax, 81h
.text:0040F3BD                 ja      short loc_40F435
.text:0040F3BF                 mov     edx, 0Bh
.text:0040F3C4
.text:0040F3C4 loc_40F3C4:                             ; CODE XREF: sub_40F250+1F2↓j
.text:0040F3C4                 mov     ds:dword_415590, edx
.text:0040F3CA
.text:0040F3CA loc_40F3CA:                             ; CODE XREF: sub_40F250+156↑j
.text:0040F3CA                                         ; sub_40F250+1EB↓j
.text:0040F3CA                 cmp     ecx, 4
.text:0040F3CD                 jnz     loc_40F2C0
.text:0040F3D3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040F3DA                 jz      short loc_40F3FC
.text:0040F3DC
.text:0040F3DC loc_40F3DC:                             ; CODE XREF: sub_40F250+1D4↓j
.text:0040F3DC                                         ; sub_40F250+1DC↓j
.text:0040F3DC                 cmp     ecx, 4
.text:0040F3DF                 jnz     loc_40F2C0
.text:0040F3E5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040F3EC                 jnz     loc_40F2C0
.text:0040F3F2                 mov     ecx, 12h
.text:0040F3F7                 jmp     loc_40F2D2
.text:0040F3FC ; ---------------------------------------------------------------------------
.text:0040F3FC
.text:0040F3FC loc_40F3FC:                             ; CODE XREF: sub_40F250+18A↑j
.text:0040F3FC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040F402                 mov     eax, 0Eh
.text:0040F407                 mov     ds:dword_415590, eax
.text:0040F40C                 lea     eax, [edx-7CFh]
.text:0040F412                 cmp     eax, 0B7h ; '·'
.text:0040F417                 ja      short loc_40F426
.text:0040F419                 mov     edx, 0Fh
.text:0040F41E
.text:0040F41E loc_40F41E:                             ; CODE XREF: sub_40F250+1E3↓j
.text:0040F41E                 mov     ds:dword_415590, edx
.text:0040F424                 jmp     short loc_40F3DC
.text:0040F426 ; ---------------------------------------------------------------------------
.text:0040F426
.text:0040F426 loc_40F426:                             ; CODE XREF: sub_40F250+1C7↑j
.text:0040F426                 cmp     edx, 886h
.text:0040F42C                 jbe     short loc_40F3DC
.text:0040F42E                 mov     edx, 10h
.text:0040F433                 jmp     short loc_40F41E
.text:0040F435 ; ---------------------------------------------------------------------------
.text:0040F435
.text:0040F435 loc_40F435:                             ; CODE XREF: sub_40F250+16D↑j
.text:0040F435                 cmp     edx, 438h
.text:0040F43B                 jbe     short loc_40F3CA
.text:0040F43D                 mov     edx, 0Ch
.text:0040F442                 jmp     short loc_40F3C4
.text:0040F444 ; ---------------------------------------------------------------------------
.text:0040F444
.text:0040F444 loc_40F444:                             ; CODE XREF: sub_40F250+3C↑j
.text:0040F444                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040F44C                 xor     edx, edx
.text:0040F44E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040F452                 mov     dword_414080, edx
.text:0040F458                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040F45B                 call    GetVersionExA
.text:0040F460                 sub     esp, 4
.text:0040F463                 xor     edx, edx
.text:0040F465                 test    eax, eax
.text:0040F467                 jz      loc_40F265
.text:0040F46D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040F471                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040F475                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040F47B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040F47F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040F485                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040F489                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040F48F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040F495                 jmp     loc_40F292
.text:0040F495 sub_40F250      endp
.text:0040F495
.text:0040F495 ; ---------------------------------------------------------------------------
.text:0040F49A                 align 10h
.text:0040F4A0 aNotset         db 'notset',0           ; DATA XREF: .data:off_414090↓o
.text:0040F4A0                                         ; .data:off_414094↓o
.text:0040F4A7 ; ---------------------------------------------------------------------------
.text:0040F4A7
.text:0040F4A7 loc_40F4A7:                             ; DATA XREF: .text:loc_40F545↓o
.text:0040F4A7                 jb      short loc_40F520
.text:0040F4A9                 add     [eax], ah
.text:0040F4AB                 or      [eax], eax
.text:0040F4AD
.text:0040F4AD loc_40F4AD:                             ; DATA XREF: .text:0040F598↓o
.text:0040F4AD                                         ; .text:0040F5FE↓o ...
.text:0040F4AD                 add     [eax], ah
.text:0040F4AF                 and     eax, 64252064h
.text:0040F4B4                 and     [eax], al
.text:0040F4B6                 lea     esi, [esi+0]
.text:0040F4B9                 lea     edi, [edi+0]
.text:0040F4C0                 push    ebp
.text:0040F4C1                 push    edi
.text:0040F4C2                 push    esi
.text:0040F4C3                 push    ebx
.text:0040F4C4                 sub     esp, 14Ch
.text:0040F4CA                 mov     edx, off_414090 ; "notset"
.text:0040F4D0                 mov     edi, [esp+164h]
.text:0040F4D7                 mov     ebp, [esp+168h]
.text:0040F4DE                 mov     [esp+4], edx
.text:0040F4E2                 mov     edx, off_414094 ; "notset"
.text:0040F4E8                 mov     [esp], edx
.text:0040F4EB                 call    strcmp
.text:0040F4F0                 test    eax, eax
.text:0040F4F2                 jz      loc_40F8E0
.text:0040F4F8
.text:0040F4F8 loc_40F4F8:                             ; CODE XREF: .text:0040F92C↓j
.text:0040F4F8                 lea     ebx, [esp+20h]
.text:0040F4FC                 lea     esi, [esi+0]
.text:0040F500
.text:0040F500 loc_40F500:                             ; CODE XREF: .text:0040F536↓j
.text:0040F500                 mov     [esp+4], ebx
.text:0040F504                 mov     ecx, off_414094 ; "notset"
.text:0040F50A                 mov     [esp], ecx
.text:0040F50D                 call    loc_40E1F0
.text:0040F512                 test    eax, eax
.text:0040F514                 jns     short loc_40F545
.text:0040F516                 mov     eax, off_414094 ; "notset"
.text:0040F51B                 cmp     byte ptr [eax], 0
.text:0040F51E                 jz      short loc_40F538
.text:0040F520
.text:0040F520 loc_40F520:                             ; CODE XREF: .text:loc_40F4A7↑j
.text:0040F520                 mov     dword ptr [esp+4], 0
.text:0040F528                 mov     [esp], eax
.text:0040F52B                 call    strchr
.text:0040F530                 inc     eax
.text:0040F531                 mov     off_414094, eax ; "notset"
.text:0040F536                 jmp     short loc_40F500
.text:0040F538 ; ---------------------------------------------------------------------------
.text:0040F538
.text:0040F538 loc_40F538:                             ; CODE XREF: .text:0040F51E↑j
.text:0040F538                 xor     eax, eax
.text:0040F53A
.text:0040F53A loc_40F53A:                             ; CODE XREF: .text:0040F6FC↓j
.text:0040F53A                 add     esp, 14Ch
.text:0040F540                 pop     ebx
.text:0040F541                 pop     esi
.text:0040F542                 pop     edi
.text:0040F543                 pop     ebp
.text:0040F544                 retn
.text:0040F545 ; ---------------------------------------------------------------------------
.text:0040F545
.text:0040F545 loc_40F545:                             ; CODE XREF: .text:0040F514↑j
.text:0040F545                 mov     dword ptr [edi+0Ch], offset loc_40F4A7
.text:0040F54C                 lea     ecx, [esp+0D6h]
.text:0040F553                 lea     edx, [esp+6Ch]
.text:0040F557                 mov     [edi+4], ecx
.text:0040F55A                 lea     ebx, [esp+7Ch]
.text:0040F55E                 mov     [edi+8], edx
.text:0040F561                 mov     [edi], ebx
.text:0040F563                 mov     [esp], ebp
.text:0040F566                 mov     [esp+4], edi
.text:0040F56A                 call    ___addmntentstr
.text:0040F56F                 mov     [esp], ebp
.text:0040F572                 mov     dword ptr [esp+4], 40F4AAh
.text:0040F57A                 call    strspn
.text:0040F57F                 mov     dword ptr [esp+4], 0
.text:0040F587                 mov     ebx, off_414094 ; "notset"
.text:0040F58D                 lea     esi, [eax+ebp]
.text:0040F590                 mov     [esp+1Ch], esi
.text:0040F594                 lea     ebp, [esp+1Ch]
.text:0040F598                 mov     esi, offset loc_40F4AD
.text:0040F59D                 mov     [esp], ebx
.text:0040F5A0                 call    strchr
.text:0040F5A5                 mov     dword ptr [esp+4], 40F4AAh
.text:0040F5AD                 inc     eax
.text:0040F5AE                 mov     off_414094, eax ; "notset"
.text:0040F5B3                 mov     [esp], ebp
.text:0040F5B6                 call    sub_410220
.text:0040F5BB                 test    eax, eax
.text:0040F5BD                 mov     ebx, eax
.text:0040F5BF                 jz      short loc_40F5E8
.text:0040F5C1                 mov     edx, eax
.text:0040F5C3                 mov     ecx, eax
.text:0040F5C5                 lea     esi, [esi+0]
.text:0040F5C9                 lea     edi, [edi+0]
.text:0040F5D0
.text:0040F5D0 loc_40F5D0:                             ; CODE XREF: .text:0040F5E6↓j
.text:0040F5D0                 movzx   eax, byte ptr [edx]
.text:0040F5D3                 cmp     al, 5Ch ; '\'
.text:0040F5D5                 jz      loc_40F884
.text:0040F5DB
.text:0040F5DB loc_40F5DB:                             ; CODE XREF: .text:0040F88C↓j
.text:0040F5DB                                         ; .text:0040F89A↓j ...
.text:0040F5DB                 mov     [ecx], al
.text:0040F5DD
.text:0040F5DD loc_40F5DD:                             ; CODE XREF: .text:0040F8AE↓j
.text:0040F5DD                 inc     ecx
.text:0040F5DE
.text:0040F5DE loc_40F5DE:                             ; CODE XREF: .text:0040F8C6↓j
.text:0040F5DE                 movzx   eax, byte ptr [edx]
.text:0040F5E1                 mov     esi, ebx
.text:0040F5E3                 inc     edx
.text:0040F5E4                 test    al, al
.text:0040F5E6                 jnz     short loc_40F5D0
.text:0040F5E8
.text:0040F5E8 loc_40F5E8:                             ; CODE XREF: .text:0040F5BF↑j
.text:0040F5E8                 mov     [edi], esi
.text:0040F5EA                 mov     eax, [esp+1Ch]
.text:0040F5EE                 test    eax, eax
.text:0040F5F0                 jnz     loc_40F86B
.text:0040F5F6
.text:0040F5F6 loc_40F5F6:                             ; CODE XREF: .text:0040F87F↓j
.text:0040F5F6                 mov     dword ptr [esp+4], 40F4AAh
.text:0040F5FE                 mov     esi, offset loc_40F4AD
.text:0040F603                 mov     [esp], ebp
.text:0040F606                 call    sub_410220
.text:0040F60B                 test    eax, eax
.text:0040F60D                 mov     ebx, eax
.text:0040F60F                 jz      short loc_40F638
.text:0040F611                 mov     edx, eax
.text:0040F613                 mov     ecx, eax
.text:0040F615                 lea     esi, [esi+0]
.text:0040F619                 lea     edi, [edi+0]
.text:0040F620
.text:0040F620 loc_40F620:                             ; CODE XREF: .text:0040F636↓j
.text:0040F620                 movzx   eax, byte ptr [edx]
.text:0040F623                 cmp     al, 5Ch ; '\'
.text:0040F625                 jz      loc_40F813
.text:0040F62B
.text:0040F62B loc_40F62B:                             ; CODE XREF: .text:0040F81B↓j
.text:0040F62B                                         ; .text:0040F829↓j ...
.text:0040F62B                 mov     [ecx], al
.text:0040F62D
.text:0040F62D loc_40F62D:                             ; CODE XREF: .text:0040F83D↓j
.text:0040F62D                 inc     ecx
.text:0040F62E
.text:0040F62E loc_40F62E:                             ; CODE XREF: .text:0040F855↓j
.text:0040F62E                 movzx   eax, byte ptr [edx]
.text:0040F631                 mov     esi, ebx
.text:0040F633                 inc     edx
.text:0040F634                 test    al, al
.text:0040F636                 jnz     short loc_40F620
.text:0040F638
.text:0040F638 loc_40F638:                             ; CODE XREF: .text:0040F60F↑j
.text:0040F638                 mov     [edi+4], esi
.text:0040F63B                 mov     eax, [esp+1Ch]
.text:0040F63F                 test    eax, eax
.text:0040F641                 jnz     loc_40F7FA
.text:0040F647
.text:0040F647 loc_40F647:                             ; CODE XREF: .text:0040F80E↓j
.text:0040F647                 mov     dword ptr [esp+4], 40F4AAh
.text:0040F64F                 mov     esi, offset loc_40F4AD
.text:0040F654                 mov     [esp], ebp
.text:0040F657                 call    sub_410220
.text:0040F65C                 test    eax, eax
.text:0040F65E                 mov     ebx, eax
.text:0040F660                 jz      short loc_40F688
.text:0040F662                 mov     edx, eax
.text:0040F664                 mov     ecx, eax
.text:0040F666                 lea     esi, [esi+0]
.text:0040F669                 lea     edi, [edi+0]
.text:0040F670
.text:0040F670 loc_40F670:                             ; CODE XREF: .text:0040F686↓j
.text:0040F670                 movzx   eax, byte ptr [edx]
.text:0040F673                 cmp     al, 5Ch ; '\'
.text:0040F675                 jz      loc_40F7A2
.text:0040F67B
.text:0040F67B loc_40F67B:                             ; CODE XREF: .text:0040F7AA↓j
.text:0040F67B                                         ; .text:0040F7B8↓j ...
.text:0040F67B                 mov     [ecx], al
.text:0040F67D
.text:0040F67D loc_40F67D:                             ; CODE XREF: .text:0040F7CC↓j
.text:0040F67D                 inc     ecx
.text:0040F67E
.text:0040F67E loc_40F67E:                             ; CODE XREF: .text:0040F7E4↓j
.text:0040F67E                 movzx   eax, byte ptr [edx]
.text:0040F681                 mov     esi, ebx
.text:0040F683                 inc     edx
.text:0040F684                 test    al, al
.text:0040F686                 jnz     short loc_40F670
.text:0040F688
.text:0040F688 loc_40F688:                             ; CODE XREF: .text:0040F660↑j
.text:0040F688                 mov     [edi+8], esi
.text:0040F68B                 mov     eax, [esp+1Ch]
.text:0040F68F                 test    eax, eax
.text:0040F691                 jnz     loc_40F789
.text:0040F697
.text:0040F697 loc_40F697:                             ; CODE XREF: .text:0040F79D↓j
.text:0040F697                 mov     dword ptr [esp+4], 40F4AAh
.text:0040F69F                 mov     esi, offset loc_40F4AD
.text:0040F6A4                 mov     [esp], ebp
.text:0040F6A7                 call    sub_410220
.text:0040F6AC                 test    eax, eax
.text:0040F6AE                 mov     ebx, eax
.text:0040F6B0                 jz      short loc_40F6D4
.text:0040F6B2                 mov     edx, eax
.text:0040F6B4                 mov     ecx, eax
.text:0040F6B6                 lea     esi, [esi+0]
.text:0040F6B9                 lea     edi, [edi+0]
.text:0040F6C0
.text:0040F6C0 loc_40F6C0:                             ; CODE XREF: .text:0040F6D2↓j
.text:0040F6C0                 movzx   eax, byte ptr [edx]
.text:0040F6C3                 cmp     al, 5Ch ; '\'
.text:0040F6C5                 jz      short loc_40F735
.text:0040F6C7
.text:0040F6C7 loc_40F6C7:                             ; CODE XREF: .text:0040F73D↓j
.text:0040F6C7                                         ; .text:0040F747↓j ...
.text:0040F6C7                 mov     [ecx], al
.text:0040F6C9
.text:0040F6C9 loc_40F6C9:                             ; CODE XREF: .text:0040F75B↓j
.text:0040F6C9                 inc     ecx
.text:0040F6CA
.text:0040F6CA loc_40F6CA:                             ; CODE XREF: .text:0040F773↓j
.text:0040F6CA                 movzx   eax, byte ptr [edx]
.text:0040F6CD                 mov     esi, ebx
.text:0040F6CF                 inc     edx
.text:0040F6D0                 test    al, al
.text:0040F6D2                 jnz     short loc_40F6C0
.text:0040F6D4
.text:0040F6D4 loc_40F6D4:                             ; CODE XREF: .text:0040F6B0↑j
.text:0040F6D4                 mov     [edi+0Ch], esi
.text:0040F6D7                 xor     eax, eax
.text:0040F6D9                 mov     edx, [esp+1Ch]
.text:0040F6DD                 test    edx, edx
.text:0040F6DF                 jnz     short loc_40F715
.text:0040F6E1
.text:0040F6E1 loc_40F6E1:                             ; CODE XREF: .text:0040F733↓j
.text:0040F6E1                 cmp     eax, 1
.text:0040F6E4                 jz      short loc_40F70C
.text:0040F6E6                 cmp     eax, 1
.text:0040F6E9                 jle     short loc_40F701
.text:0040F6EB
.text:0040F6EB loc_40F6EB:                             ; CODE XREF: .text:0040F703↓j
.text:0040F6EB                                         ; .text:0040F713↓j
.text:0040F6EB                 mov     edx, [esp+160h]
.text:0040F6F2                 mov     [esp], edx
.text:0040F6F5                 call    sub_4101C0
.text:0040F6FA                 mov     eax, edi
.text:0040F6FC                 jmp     loc_40F53A
.text:0040F701 ; ---------------------------------------------------------------------------
.text:0040F701
.text:0040F701 loc_40F701:                             ; CODE XREF: .text:0040F6E9↑j
.text:0040F701                 test    eax, eax
.text:0040F703                 jnz     short loc_40F6EB
.text:0040F705                 mov     dword ptr [edi+10h], 0
.text:0040F70C
.text:0040F70C loc_40F70C:                             ; CODE XREF: .text:0040F6E4↑j
.text:0040F70C                 mov     dword ptr [edi+14h], 0
.text:0040F713                 jmp     short loc_40F6EB
.text:0040F715 ; ---------------------------------------------------------------------------
.text:0040F715
.text:0040F715 loc_40F715:                             ; CODE XREF: .text:0040F6DF↑j
.text:0040F715                 mov     dword ptr [esp+4], 40F4AEh
.text:0040F71D                 lea     esi, [edi+14h]
.text:0040F720                 lea     ebp, [edi+10h]
.text:0040F723                 mov     [esp+0Ch], esi
.text:0040F727                 mov     [esp+8], ebp
.text:0040F72B                 mov     [esp], edx
.text:0040F72E                 call    sscanf
.text:0040F733                 jmp     short loc_40F6E1
.text:0040F735 ; ---------------------------------------------------------------------------
.text:0040F735
.text:0040F735 loc_40F735:                             ; CODE XREF: .text:0040F6C5↑j
.text:0040F735                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F739                 jz      short loc_40F778
.text:0040F73B
.text:0040F73B loc_40F73B:                             ; CODE XREF: .text:0040F77C↓j
.text:0040F73B                                         ; .text:0040F782↓j
.text:0040F73B                 cmp     al, 5Ch ; '\'
.text:0040F73D                 jnz     short loc_40F6C7
.text:0040F73F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F743                 jz      short loc_40F760
.text:0040F745
.text:0040F745 loc_40F745:                             ; CODE XREF: .text:0040F764↓j
.text:0040F745                                         ; .text:0040F76A↓j
.text:0040F745                 cmp     al, 5Ch ; '\'
.text:0040F747                 jnz     loc_40F6C7
.text:0040F74D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F751                 jnz     loc_40F6C7
.text:0040F757                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F75A                 inc     edx
.text:0040F75B                 jmp     loc_40F6C9
.text:0040F760 ; ---------------------------------------------------------------------------
.text:0040F760
.text:0040F760 loc_40F760:                             ; CODE XREF: .text:0040F743↑j
.text:0040F760                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F764                 jnz     short loc_40F745
.text:0040F766                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F76A                 jnz     short loc_40F745
.text:0040F76C                 mov     byte ptr [ecx], 9
.text:0040F76F
.text:0040F76F loc_40F76F:                             ; CODE XREF: .text:0040F787↓j
.text:0040F76F                 inc     ecx
.text:0040F770                 add     edx, 3
.text:0040F773                 jmp     loc_40F6CA
.text:0040F778 ; ---------------------------------------------------------------------------
.text:0040F778
.text:0040F778 loc_40F778:                             ; CODE XREF: .text:0040F739↑j
.text:0040F778                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F77C                 jnz     short loc_40F73B
.text:0040F77E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F782                 jnz     short loc_40F73B
.text:0040F784                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F787                 jmp     short loc_40F76F
.text:0040F789 ; ---------------------------------------------------------------------------
.text:0040F789
.text:0040F789 loc_40F789:                             ; CODE XREF: .text:0040F691↑j
.text:0040F789                 mov     dword ptr [esp+4], 40F4AAh
.text:0040F791                 mov     [esp], eax
.text:0040F794                 call    strspn
.text:0040F799                 add     [esp+1Ch], eax
.text:0040F79D                 jmp     loc_40F697
.text:0040F7A2 ; ---------------------------------------------------------------------------
.text:0040F7A2
.text:0040F7A2 loc_40F7A2:                             ; CODE XREF: .text:0040F675↑j
.text:0040F7A2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F7A6                 jz      short loc_40F7E9
.text:0040F7A8
.text:0040F7A8 loc_40F7A8:                             ; CODE XREF: .text:0040F7ED↓j
.text:0040F7A8                                         ; .text:0040F7F3↓j
.text:0040F7A8                 cmp     al, 5Ch ; '\'
.text:0040F7AA                 jnz     loc_40F67B
.text:0040F7B0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F7B4                 jz      short loc_40F7D1
.text:0040F7B6
.text:0040F7B6 loc_40F7B6:                             ; CODE XREF: .text:0040F7D5↓j
.text:0040F7B6                                         ; .text:0040F7DB↓j
.text:0040F7B6                 cmp     al, 5Ch ; '\'
.text:0040F7B8                 jnz     loc_40F67B
.text:0040F7BE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F7C2                 jnz     loc_40F67B
.text:0040F7C8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F7CB                 inc     edx
.text:0040F7CC                 jmp     loc_40F67D
.text:0040F7D1 ; ---------------------------------------------------------------------------
.text:0040F7D1
.text:0040F7D1 loc_40F7D1:                             ; CODE XREF: .text:0040F7B4↑j
.text:0040F7D1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F7D5                 jnz     short loc_40F7B6
.text:0040F7D7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F7DB                 jnz     short loc_40F7B6
.text:0040F7DD                 mov     byte ptr [ecx], 9
.text:0040F7E0
.text:0040F7E0 loc_40F7E0:                             ; CODE XREF: .text:0040F7F8↓j
.text:0040F7E0                 inc     ecx
.text:0040F7E1                 add     edx, 3
.text:0040F7E4                 jmp     loc_40F67E
.text:0040F7E9 ; ---------------------------------------------------------------------------
.text:0040F7E9
.text:0040F7E9 loc_40F7E9:                             ; CODE XREF: .text:0040F7A6↑j
.text:0040F7E9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F7ED                 jnz     short loc_40F7A8
.text:0040F7EF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F7F3                 jnz     short loc_40F7A8
.text:0040F7F5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F7F8                 jmp     short loc_40F7E0
.text:0040F7FA ; ---------------------------------------------------------------------------
.text:0040F7FA
.text:0040F7FA loc_40F7FA:                             ; CODE XREF: .text:0040F641↑j
.text:0040F7FA                 mov     dword ptr [esp+4], 40F4AAh
.text:0040F802                 mov     [esp], eax
.text:0040F805                 call    strspn
.text:0040F80A                 add     [esp+1Ch], eax
.text:0040F80E                 jmp     loc_40F647
.text:0040F813 ; ---------------------------------------------------------------------------
.text:0040F813
.text:0040F813 loc_40F813:                             ; CODE XREF: .text:0040F625↑j
.text:0040F813                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F817                 jz      short loc_40F85A
.text:0040F819
.text:0040F819 loc_40F819:                             ; CODE XREF: .text:0040F85E↓j
.text:0040F819                                         ; .text:0040F864↓j
.text:0040F819                 cmp     al, 5Ch ; '\'
.text:0040F81B                 jnz     loc_40F62B
.text:0040F821                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F825                 jz      short loc_40F842
.text:0040F827
.text:0040F827 loc_40F827:                             ; CODE XREF: .text:0040F846↓j
.text:0040F827                                         ; .text:0040F84C↓j
.text:0040F827                 cmp     al, 5Ch ; '\'
.text:0040F829                 jnz     loc_40F62B
.text:0040F82F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F833                 jnz     loc_40F62B
.text:0040F839                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F83C                 inc     edx
.text:0040F83D                 jmp     loc_40F62D
.text:0040F842 ; ---------------------------------------------------------------------------
.text:0040F842
.text:0040F842 loc_40F842:                             ; CODE XREF: .text:0040F825↑j
.text:0040F842                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F846                 jnz     short loc_40F827
.text:0040F848                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F84C                 jnz     short loc_40F827
.text:0040F84E                 mov     byte ptr [ecx], 9
.text:0040F851
.text:0040F851 loc_40F851:                             ; CODE XREF: .text:0040F869↓j
.text:0040F851                 inc     ecx
.text:0040F852                 add     edx, 3
.text:0040F855                 jmp     loc_40F62E
.text:0040F85A ; ---------------------------------------------------------------------------
.text:0040F85A
.text:0040F85A loc_40F85A:                             ; CODE XREF: .text:0040F817↑j
.text:0040F85A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F85E                 jnz     short loc_40F819
.text:0040F860                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F864                 jnz     short loc_40F819
.text:0040F866                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F869                 jmp     short loc_40F851
.text:0040F86B ; ---------------------------------------------------------------------------
.text:0040F86B
.text:0040F86B loc_40F86B:                             ; CODE XREF: .text:0040F5F0↑j
.text:0040F86B                 mov     dword ptr [esp+4], 40F4AAh
.text:0040F873                 mov     [esp], eax
.text:0040F876                 call    strspn
.text:0040F87B                 add     [esp+1Ch], eax
.text:0040F87F                 jmp     loc_40F5F6
.text:0040F884 ; ---------------------------------------------------------------------------
.text:0040F884
.text:0040F884 loc_40F884:                             ; CODE XREF: .text:0040F5D5↑j
.text:0040F884                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F888                 jz      short loc_40F8CB
.text:0040F88A
.text:0040F88A loc_40F88A:                             ; CODE XREF: .text:0040F8CF↓j
.text:0040F88A                                         ; .text:0040F8D5↓j
.text:0040F88A                 cmp     al, 5Ch ; '\'
.text:0040F88C                 jnz     loc_40F5DB
.text:0040F892                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F896                 jz      short loc_40F8B3
.text:0040F898
.text:0040F898 loc_40F898:                             ; CODE XREF: .text:0040F8B7↓j
.text:0040F898                                         ; .text:0040F8BD↓j
.text:0040F898                 cmp     al, 5Ch ; '\'
.text:0040F89A                 jnz     loc_40F5DB
.text:0040F8A0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F8A4                 jnz     loc_40F5DB
.text:0040F8AA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F8AD                 inc     edx
.text:0040F8AE                 jmp     loc_40F5DD
.text:0040F8B3 ; ---------------------------------------------------------------------------
.text:0040F8B3
.text:0040F8B3 loc_40F8B3:                             ; CODE XREF: .text:0040F896↑j
.text:0040F8B3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F8B7                 jnz     short loc_40F898
.text:0040F8B9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F8BD                 jnz     short loc_40F898
.text:0040F8BF                 mov     byte ptr [ecx], 9
.text:0040F8C2
.text:0040F8C2 loc_40F8C2:                             ; CODE XREF: .text:0040F8DA↓j
.text:0040F8C2                 inc     ecx
.text:0040F8C3                 add     edx, 3
.text:0040F8C6                 jmp     loc_40F5DE
.text:0040F8CB ; ---------------------------------------------------------------------------
.text:0040F8CB
.text:0040F8CB loc_40F8CB:                             ; CODE XREF: .text:0040F888↑j
.text:0040F8CB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F8CF                 jnz     short loc_40F88A
.text:0040F8D1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F8D5                 jnz     short loc_40F88A
.text:0040F8D7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F8DA                 jmp     short loc_40F8C2
.text:0040F8DA ; ---------------------------------------------------------------------------
.text:0040F8DC                 align 10h
.text:0040F8E0
.text:0040F8E0 loc_40F8E0:                             ; CODE XREF: .text:0040F4F2↑j
.text:0040F8E0                 mov     dword ptr [esp+4], 0
.text:0040F8E8                 mov     dword ptr [esp], 0
.text:0040F8EF                 call    GetLogicalDriveStringsA
.text:0040F8F4                 sub     esp, 8
.text:0040F8F7                 mov     ebx, eax
.text:0040F8F9                 call    GetProcessHeap
.text:0040F8FE                 mov     [esp], eax
.text:0040F901                 mov     [esp+8], ebx
.text:0040F905                 mov     dword ptr [esp+4], 0
.text:0040F90D                 call    HeapAlloc
.text:0040F912                 sub     esp, 0Ch
.text:0040F915                 mov     esi, eax
.text:0040F917                 mov     [esp+4], eax
.text:0040F91B                 mov     [esp], ebx
.text:0040F91E                 call    GetLogicalDriveStringsA
.text:0040F923                 mov     off_414094, esi ; "notset"
.text:0040F929                 sub     esp, 8
.text:0040F92C                 jmp     loc_40F4F8
.text:0040F92C ; ---------------------------------------------------------------------------
.text:0040F931 ; const char aSSSSDD[]
.text:0040F931 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040F931                                         ; DATA XREF: .text:0040FA70↓o
.text:0040F931                                         ; ___addmntentstr+F0↓o
.text:0040F944                 align 10h
.text:0040F950                 push    esi
.text:0040F951                 push    ebx
.text:0040F952                 sub     esp, 44h
.text:0040F955                 mov     ebx, [esp+54h]
.text:0040F959                 mov     esi, [esp+50h]
.text:0040F95D                 mov     edx, [ebx]
.text:0040F95F                 mov     [esp+20h], edx
.text:0040F963                 mov     ecx, [ebx+4]
.text:0040F966                 mov     [esp+24h], ecx
.text:0040F96A                 mov     edx, [ebx+8]
.text:0040F96D                 mov     [esp+28h], edx
.text:0040F971                 mov     ecx, [ebx+0Ch]
.text:0040F974                 mov     [esp+2Ch], ecx
.text:0040F978                 mov     edx, [ebx+10h]
.text:0040F97B                 mov     [esp+30h], edx
.text:0040F97F                 mov     ecx, [ebx+14h]
.text:0040F982                 mov     dword ptr [esp+8], 2
.text:0040F98A                 mov     dword ptr [esp+4], 0
.text:0040F992                 mov     [esp+34h], ecx
.text:0040F996                 mov     [esp], esi
.text:0040F999                 call    sub_4101B0
.text:0040F99E ; ---------------------------------------------------------------------------
.text:0040F99E                 test    eax, eax
.text:0040F9A0                 mov     edx, 1
.text:0040F9A5                 jnz     loc_40FAA5
.text:0040F9AB                 mov     ebx, [esp+20h]
.text:0040F9AF                 mov     edx, ebx
.text:0040F9B1                 movzx   eax, byte ptr [ebx]
.text:0040F9B4                 test    al, al
.text:0040F9B6                 jz      short loc_40F9E0
.text:0040F9B8                 nop
.text:0040F9B9                 lea     esi, [esi+0]
.text:0040F9C0
.text:0040F9C0 loc_40F9C0:                             ; CODE XREF: .text:0040F9DE↓j
.text:0040F9C0                 cmp     al, 20h ; ' '
.text:0040F9C2                 jz      loc_40FC1A
.text:0040F9C8                 cmp     al, 9
.text:0040F9CA                 jz      loc_40FC1A
.text:0040F9D0                 cmp     al, 5Ch ; '\'
.text:0040F9D2                 jz      loc_40FC1A
.text:0040F9D8                 inc     ebx
.text:0040F9D9                 movzx   eax, byte ptr [ebx]
.text:0040F9DC                 test    al, al
.text:0040F9DE                 jnz     short loc_40F9C0
.text:0040F9E0
.text:0040F9E0 loc_40F9E0:                             ; CODE XREF: .text:0040F9B6↑j
.text:0040F9E0                                         ; .text:0040FC1C↓j ...
.text:0040F9E0                 mov     ebx, [esp+24h]
.text:0040F9E4                 mov     edx, ebx
.text:0040F9E6                 movzx   eax, byte ptr [ebx]
.text:0040F9E9                 test    al, al
.text:0040F9EB                 jz      short loc_40FA10
.text:0040F9ED                 lea     esi, [esi+0]
.text:0040F9F0
.text:0040F9F0 loc_40F9F0:                             ; CODE XREF: .text:0040FA0E↓j
.text:0040F9F0                 cmp     al, 20h ; ' '
.text:0040F9F2                 jz      loc_40FB9A
.text:0040F9F8                 cmp     al, 9
.text:0040F9FA                 jz      loc_40FB9A
.text:0040FA00                 cmp     al, 5Ch ; '\'
.text:0040FA02                 jz      loc_40FB9A
.text:0040FA08                 inc     ebx
.text:0040FA09                 movzx   eax, byte ptr [ebx]
.text:0040FA0C                 test    al, al
.text:0040FA0E                 jnz     short loc_40F9F0
.text:0040FA10
.text:0040FA10 loc_40FA10:                             ; CODE XREF: .text:0040F9EB↑j
.text:0040FA10                                         ; .text:0040FB9C↓j ...
.text:0040FA10                 mov     ebx, [esp+28h]
.text:0040FA14                 mov     edx, ebx
.text:0040FA16                 movzx   eax, byte ptr [ebx]
.text:0040FA19                 test    al, al
.text:0040FA1B                 jz      short loc_40FA40
.text:0040FA1D                 lea     esi, [esi+0]
.text:0040FA20
.text:0040FA20 loc_40FA20:                             ; CODE XREF: .text:0040FA3E↓j
.text:0040FA20                 cmp     al, 20h ; ' '
.text:0040FA22                 jz      loc_40FB1E
.text:0040FA28                 cmp     al, 9
.text:0040FA2A                 jz      loc_40FB1E
.text:0040FA30                 cmp     al, 5Ch ; '\'
.text:0040FA32                 jz      loc_40FB1E
.text:0040FA38                 inc     ebx
.text:0040FA39                 movzx   eax, byte ptr [ebx]
.text:0040FA3C                 test    al, al
.text:0040FA3E                 jnz     short loc_40FA20
.text:0040FA40
.text:0040FA40 loc_40FA40:                             ; CODE XREF: .text:0040FA1B↑j
.text:0040FA40                                         ; .text:0040FB20↓j ...
.text:0040FA40                 mov     edx, [esp+2Ch]
.text:0040FA44                 mov     ebx, edx
.text:0040FA46                 movzx   eax, byte ptr [edx]
.text:0040FA49                 test    al, al
.text:0040FA4B                 jz      short loc_40FA64
.text:0040FA4D                 lea     esi, [esi+0]
.text:0040FA50
.text:0040FA50 loc_40FA50:                             ; CODE XREF: .text:0040FA62↓j
.text:0040FA50                 cmp     al, 20h ; ' '
.text:0040FA52                 jz      short loc_40FAAD
.text:0040FA54                 cmp     al, 9
.text:0040FA56                 jz      short loc_40FAAD
.text:0040FA58                 cmp     al, 5Ch ; '\'
.text:0040FA5A                 jz      short loc_40FAAD
.text:0040FA5C                 inc     ebx
.text:0040FA5D                 movzx   eax, byte ptr [ebx]
.text:0040FA60                 test    al, al
.text:0040FA62                 jnz     short loc_40FA50
.text:0040FA64
.text:0040FA64 loc_40FA64:                             ; CODE XREF: .text:0040FA4B↑j
.text:0040FA64                                         ; .text:0040FAAF↓j ...
.text:0040FA64                 mov     [esp+14h], edx
.text:0040FA68                 mov     ecx, [esp+34h]
.text:0040FA6C                 mov     ebx, [esp+30h]
.text:0040FA70                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040FA78                 mov     edx, [esp+24h]
.text:0040FA7C                 mov     [esp+1Ch], ecx
.text:0040FA80                 mov     ecx, [esp+28h]
.text:0040FA84                 mov     [esp+18h], ebx
.text:0040FA88                 mov     ebx, [esp+20h]
.text:0040FA8C                 mov     [esp+0Ch], edx
.text:0040FA90                 mov     [esp+10h], ecx
.text:0040FA94                 mov     [esp+8], ebx
.text:0040FA98                 mov     [esp], esi
.text:0040FA9B                 call    fprintf
.text:0040FAA0                 mov     edx, eax
.text:0040FAA2                 shr     edx, 1Fh
.text:0040FAA5
.text:0040FAA5 loc_40FAA5:                             ; CODE XREF: .text:0040F9A5↑j
.text:0040FAA5                 add     esp, 44h
.text:0040FAA8                 mov     eax, edx
.text:0040FAAA                 pop     ebx
.text:0040FAAB                 pop     esi
.text:0040FAAC                 retn
.text:0040FAAD ; ---------------------------------------------------------------------------
.text:0040FAAD
.text:0040FAAD loc_40FAAD:                             ; CODE XREF: .text:0040FA52↑j
.text:0040FAAD                                         ; .text:0040FA56↑j ...
.text:0040FAAD                 test    al, al
.text:0040FAAF                 jz      short loc_40FA64
.text:0040FAB1                 mov     [esp], edx
.text:0040FAB4                 mov     ebx, edx
.text:0040FAB6                 call    strlen
.text:0040FABB                 lea     edx, ds:1[eax*4]
.text:0040FAC2                 mov     [esp], edx
.text:0040FAC5                 call    malloc
.text:0040FACA                 mov     [esp+2Ch], eax
.text:0040FACE                 mov     edx, eax
.text:0040FAD0
.text:0040FAD0 loc_40FAD0:                             ; CODE XREF: .text:0040FAE8↓j
.text:0040FAD0                 movzx   eax, byte ptr [ebx]
.text:0040FAD3                 cmp     al, 20h ; ' '
.text:0040FAD5                 jz      short loc_40FB0D
.text:0040FAD7                 cmp     al, 9
.text:0040FAD9                 jz      short loc_40FAFC
.text:0040FADB                 cmp     al, 5Ch ; '\'
.text:0040FADD                 jz      short loc_40FAF3
.text:0040FADF                 mov     [edx], al
.text:0040FAE1
.text:0040FAE1 loc_40FAE1:                             ; CODE XREF: .text:0040FAFA↓j
.text:0040FAE1                                         ; .text:0040FB0B↓j ...
.text:0040FAE1                 movzx   ecx, byte ptr [ebx]
.text:0040FAE4                 inc     edx
.text:0040FAE5                 inc     ebx
.text:0040FAE6                 test    cl, cl
.text:0040FAE8                 jnz     short loc_40FAD0
.text:0040FAEA                 mov     edx, [esp+2Ch]
.text:0040FAEE                 jmp     loc_40FA64
.text:0040FAF3 ; ---------------------------------------------------------------------------
.text:0040FAF3
.text:0040FAF3 loc_40FAF3:                             ; CODE XREF: .text:0040FADD↑j
.text:0040FAF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FAF6                 inc     edx
.text:0040FAF7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FAFA                 jmp     short loc_40FAE1
.text:0040FAFC ; ---------------------------------------------------------------------------
.text:0040FAFC
.text:0040FAFC loc_40FAFC:                             ; CODE XREF: .text:0040FAD9↑j
.text:0040FAFC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FAFF                 inc     edx
.text:0040FB00                 mov     byte ptr [edx], 30h ; '0'
.text:0040FB03                 inc     edx
.text:0040FB04                 mov     byte ptr [edx], 31h ; '1'
.text:0040FB07                 inc     edx
.text:0040FB08                 mov     byte ptr [edx], 32h ; '2'
.text:0040FB0B                 jmp     short loc_40FAE1
.text:0040FB0D ; ---------------------------------------------------------------------------
.text:0040FB0D
.text:0040FB0D loc_40FB0D:                             ; CODE XREF: .text:0040FAD5↑j
.text:0040FB0D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FB10                 inc     edx
.text:0040FB11                 mov     byte ptr [edx], 30h ; '0'
.text:0040FB14                 inc     edx
.text:0040FB15                 mov     byte ptr [edx], 34h ; '4'
.text:0040FB18                 inc     edx
.text:0040FB19                 mov     byte ptr [edx], 30h ; '0'
.text:0040FB1C                 jmp     short loc_40FAE1
.text:0040FB1E ; ---------------------------------------------------------------------------
.text:0040FB1E
.text:0040FB1E loc_40FB1E:                             ; CODE XREF: .text:0040FA22↑j
.text:0040FB1E                                         ; .text:0040FA2A↑j ...
.text:0040FB1E                 test    al, al
.text:0040FB20                 jz      loc_40FA40
.text:0040FB26                 mov     [esp], edx
.text:0040FB29                 mov     ebx, edx
.text:0040FB2B                 call    strlen
.text:0040FB30                 lea     edx, ds:1[eax*4]
.text:0040FB37                 mov     [esp], edx
.text:0040FB3A                 call    malloc
.text:0040FB3F                 mov     [esp+28h], eax
.text:0040FB43                 mov     edx, eax
.text:0040FB45                 lea     esi, [esi+0]
.text:0040FB49                 lea     edi, [edi+0]
.text:0040FB50
.text:0040FB50 loc_40FB50:                             ; CODE XREF: .text:0040FB68↓j
.text:0040FB50                 movzx   eax, byte ptr [ebx]
.text:0040FB53                 cmp     al, 20h ; ' '
.text:0040FB55                 jz      short loc_40FB89
.text:0040FB57                 cmp     al, 9
.text:0040FB59                 jz      short loc_40FB78
.text:0040FB5B                 cmp     al, 5Ch ; '\'
.text:0040FB5D                 jz      short loc_40FB6F
.text:0040FB5F                 mov     [edx], al
.text:0040FB61
.text:0040FB61 loc_40FB61:                             ; CODE XREF: .text:0040FB76↓j
.text:0040FB61                                         ; .text:0040FB87↓j ...
.text:0040FB61                 movzx   ecx, byte ptr [ebx]
.text:0040FB64                 inc     edx
.text:0040FB65                 inc     ebx
.text:0040FB66                 test    cl, cl
.text:0040FB68                 jnz     short loc_40FB50
.text:0040FB6A                 jmp     loc_40FA40
.text:0040FB6F ; ---------------------------------------------------------------------------
.text:0040FB6F
.text:0040FB6F loc_40FB6F:                             ; CODE XREF: .text:0040FB5D↑j
.text:0040FB6F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FB72                 inc     edx
.text:0040FB73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FB76                 jmp     short loc_40FB61
.text:0040FB78 ; ---------------------------------------------------------------------------
.text:0040FB78
.text:0040FB78 loc_40FB78:                             ; CODE XREF: .text:0040FB59↑j
.text:0040FB78                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FB7B                 inc     edx
.text:0040FB7C                 mov     byte ptr [edx], 30h ; '0'
.text:0040FB7F                 inc     edx
.text:0040FB80                 mov     byte ptr [edx], 31h ; '1'
.text:0040FB83                 inc     edx
.text:0040FB84                 mov     byte ptr [edx], 32h ; '2'
.text:0040FB87                 jmp     short loc_40FB61
.text:0040FB89 ; ---------------------------------------------------------------------------
.text:0040FB89
.text:0040FB89 loc_40FB89:                             ; CODE XREF: .text:0040FB55↑j
.text:0040FB89                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FB8C                 inc     edx
.text:0040FB8D                 mov     byte ptr [edx], 30h ; '0'
.text:0040FB90                 inc     edx
.text:0040FB91                 mov     byte ptr [edx], 34h ; '4'
.text:0040FB94                 inc     edx
.text:0040FB95                 mov     byte ptr [edx], 30h ; '0'
.text:0040FB98                 jmp     short loc_40FB61
.text:0040FB9A ; ---------------------------------------------------------------------------
.text:0040FB9A
.text:0040FB9A loc_40FB9A:                             ; CODE XREF: .text:0040F9F2↑j
.text:0040FB9A                                         ; .text:0040F9FA↑j ...
.text:0040FB9A                 test    al, al
.text:0040FB9C                 jz      loc_40FA10
.text:0040FBA2                 mov     [esp], edx
.text:0040FBA5                 mov     ebx, edx
.text:0040FBA7                 call    strlen
.text:0040FBAC                 lea     edx, ds:1[eax*4]
.text:0040FBB3                 mov     [esp], edx
.text:0040FBB6                 call    malloc
.text:0040FBBB                 mov     [esp+24h], eax
.text:0040FBBF                 mov     edx, eax
.text:0040FBC1                 jmp     short loc_40FBD0
.text:0040FBC1 ; ---------------------------------------------------------------------------
.text:0040FBC3                 align 10h
.text:0040FBD0
.text:0040FBD0 loc_40FBD0:                             ; CODE XREF: .text:0040FBC1↑j
.text:0040FBD0                                         ; .text:0040FBE8↓j
.text:0040FBD0                 movzx   eax, byte ptr [ebx]
.text:0040FBD3                 cmp     al, 20h ; ' '
.text:0040FBD5                 jz      short loc_40FC09
.text:0040FBD7                 cmp     al, 9
.text:0040FBD9                 jz      short loc_40FBF8
.text:0040FBDB                 cmp     al, 5Ch ; '\'
.text:0040FBDD                 jz      short loc_40FBEF
.text:0040FBDF                 mov     [edx], al
.text:0040FBE1
.text:0040FBE1 loc_40FBE1:                             ; CODE XREF: .text:0040FBF6↓j
.text:0040FBE1                                         ; .text:0040FC07↓j ...
.text:0040FBE1                 movzx   ecx, byte ptr [ebx]
.text:0040FBE4                 inc     edx
.text:0040FBE5                 inc     ebx
.text:0040FBE6                 test    cl, cl
.text:0040FBE8                 jnz     short loc_40FBD0
.text:0040FBEA                 jmp     loc_40FA10
.text:0040FBEF ; ---------------------------------------------------------------------------
.text:0040FBEF
.text:0040FBEF loc_40FBEF:                             ; CODE XREF: .text:0040FBDD↑j
.text:0040FBEF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FBF2                 inc     edx
.text:0040FBF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FBF6                 jmp     short loc_40FBE1
.text:0040FBF8 ; ---------------------------------------------------------------------------
.text:0040FBF8
.text:0040FBF8 loc_40FBF8:                             ; CODE XREF: .text:0040FBD9↑j
.text:0040FBF8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FBFB                 inc     edx
.text:0040FBFC                 mov     byte ptr [edx], 30h ; '0'
.text:0040FBFF                 inc     edx
.text:0040FC00                 mov     byte ptr [edx], 31h ; '1'
.text:0040FC03                 inc     edx
.text:0040FC04                 mov     byte ptr [edx], 32h ; '2'
.text:0040FC07                 jmp     short loc_40FBE1
.text:0040FC09 ; ---------------------------------------------------------------------------
.text:0040FC09
.text:0040FC09 loc_40FC09:                             ; CODE XREF: .text:0040FBD5↑j
.text:0040FC09                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FC0C                 inc     edx
.text:0040FC0D                 mov     byte ptr [edx], 30h ; '0'
.text:0040FC10                 inc     edx
.text:0040FC11                 mov     byte ptr [edx], 34h ; '4'
.text:0040FC14                 inc     edx
.text:0040FC15                 mov     byte ptr [edx], 30h ; '0'
.text:0040FC18                 jmp     short loc_40FBE1
.text:0040FC1A ; ---------------------------------------------------------------------------
.text:0040FC1A
.text:0040FC1A loc_40FC1A:                             ; CODE XREF: .text:0040F9C2↑j
.text:0040FC1A                                         ; .text:0040F9CA↑j ...
.text:0040FC1A                 test    al, al
.text:0040FC1C                 jz      loc_40F9E0
.text:0040FC22                 mov     [esp], edx
.text:0040FC25                 mov     ebx, edx
.text:0040FC27                 call    strlen
.text:0040FC2C                 lea     ecx, ds:1[eax*4]
.text:0040FC33                 mov     [esp], ecx
.text:0040FC36                 call    malloc
.text:0040FC3B                 mov     [esp+20h], eax
.text:0040FC3F                 mov     edx, eax
.text:0040FC41                 jmp     short loc_40FC50
.text:0040FC41 ; ---------------------------------------------------------------------------
.text:0040FC43                 align 10h
.text:0040FC50
.text:0040FC50 loc_40FC50:                             ; CODE XREF: .text:0040FC41↑j
.text:0040FC50                                         ; .text:0040FC68↓j
.text:0040FC50                 movzx   eax, byte ptr [ebx]
.text:0040FC53                 cmp     al, 20h ; ' '
.text:0040FC55                 jz      short loc_40FC89
.text:0040FC57                 cmp     al, 9
.text:0040FC59                 jz      short loc_40FC78
.text:0040FC5B                 cmp     al, 5Ch ; '\'
.text:0040FC5D                 jz      short loc_40FC6F
.text:0040FC5F                 mov     [edx], al
.text:0040FC61
.text:0040FC61 loc_40FC61:                             ; CODE XREF: .text:0040FC76↓j
.text:0040FC61                                         ; .text:0040FC87↓j ...
.text:0040FC61                 movzx   ecx, byte ptr [ebx]
.text:0040FC64                 inc     edx
.text:0040FC65                 inc     ebx
.text:0040FC66                 test    cl, cl
.text:0040FC68                 jnz     short loc_40FC50
.text:0040FC6A                 jmp     loc_40F9E0
.text:0040FC6F ; ---------------------------------------------------------------------------
.text:0040FC6F
.text:0040FC6F loc_40FC6F:                             ; CODE XREF: .text:0040FC5D↑j
.text:0040FC6F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FC72                 inc     edx
.text:0040FC73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FC76                 jmp     short loc_40FC61
.text:0040FC78 ; ---------------------------------------------------------------------------
.text:0040FC78
.text:0040FC78 loc_40FC78:                             ; CODE XREF: .text:0040FC59↑j
.text:0040FC78                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FC7B                 inc     edx
.text:0040FC7C                 mov     byte ptr [edx], 30h ; '0'
.text:0040FC7F                 inc     edx
.text:0040FC80                 mov     byte ptr [edx], 31h ; '1'
.text:0040FC83                 inc     edx
.text:0040FC84                 mov     byte ptr [edx], 32h ; '2'
.text:0040FC87                 jmp     short loc_40FC61
.text:0040FC89 ; ---------------------------------------------------------------------------
.text:0040FC89
.text:0040FC89 loc_40FC89:                             ; CODE XREF: .text:0040FC55↑j
.text:0040FC89                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FC8C                 inc     edx
.text:0040FC8D                 mov     byte ptr [edx], 30h ; '0'
.text:0040FC90                 inc     edx
.text:0040FC91                 mov     byte ptr [edx], 34h ; '4'
.text:0040FC94                 inc     edx
.text:0040FC95                 mov     byte ptr [edx], 30h ; '0'
.text:0040FC98                 jmp     short loc_40FC61
.text:0040FC98 ; ---------------------------------------------------------------------------
.text:0040FC9A                 align 10h
.text:0040FCA0
.text:0040FCA0 ; =============== S U B R O U T I N E =======================================
.text:0040FCA0
.text:0040FCA0 ; Attributes: info_from_lumina
.text:0040FCA0
.text:0040FCA0 ; int __cdecl __addmntentstr(char *, int)
.text:0040FCA0 ___addmntentstr proc near               ; CODE XREF: .text:0040F56A↑p
.text:0040FCA0
.text:0040FCA0 Buffer          = dword ptr -4Ch
.text:0040FCA0 Format          = dword ptr -48h
.text:0040FCA0 var_44          = dword ptr -44h
.text:0040FCA0 var_40          = dword ptr -40h
.text:0040FCA0 var_3C          = dword ptr -3Ch
.text:0040FCA0 var_38          = dword ptr -38h
.text:0040FCA0 var_34          = dword ptr -34h
.text:0040FCA0 var_30          = dword ptr -30h
.text:0040FCA0 var_2C          = dword ptr -2Ch
.text:0040FCA0 var_28          = dword ptr -28h
.text:0040FCA0 var_24          = dword ptr -24h
.text:0040FCA0 Str             = dword ptr -20h
.text:0040FCA0 var_1C          = dword ptr -1Ch
.text:0040FCA0 var_18          = dword ptr -18h
.text:0040FCA0 arg_0           = dword ptr  4
.text:0040FCA0 arg_4           = dword ptr  8
.text:0040FCA0
.text:0040FCA0                 push    ebx
.text:0040FCA1                 sub     esp, 48h
.text:0040FCA4                 mov     edx, [esp+4Ch+arg_4]
.text:0040FCA8                 mov     ecx, [edx]
.text:0040FCAA                 mov     [esp+4Ch+var_2C], ecx
.text:0040FCAE                 mov     ebx, [edx+4]
.text:0040FCB1                 mov     [esp+4Ch+var_28], ebx
.text:0040FCB5                 mov     ebx, [edx+8]
.text:0040FCB8                 mov     [esp+4Ch+var_24], ebx
.text:0040FCBC                 mov     ebx, [edx+0Ch]
.text:0040FCBF                 mov     [esp+4Ch+Str], ebx
.text:0040FCC3                 mov     ebx, [edx+10h]
.text:0040FCC6                 mov     [esp+4Ch+var_1C], ebx
.text:0040FCCA                 mov     ebx, [edx+14h]
.text:0040FCCD                 mov     [esp+4Ch+var_18], ebx
.text:0040FCD1                 mov     ebx, ecx
.text:0040FCD3                 movzx   eax, byte ptr [ecx]
.text:0040FCD6                 test    al, al
.text:0040FCD8                 jz      loc_40FFC1
.text:0040FCDE                 mov     esi, esi
.text:0040FCE0
.text:0040FCE0 loc_40FCE0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040FCE0                 cmp     al, 20h ; ' '
.text:0040FCE2                 jz      loc_40FF40
.text:0040FCE8                 cmp     al, 9
.text:0040FCEA                 jz      loc_40FF40
.text:0040FCF0                 cmp     al, 5Ch ; '\'
.text:0040FCF2                 jz      loc_40FF40
.text:0040FCF8                 inc     ebx
.text:0040FCF9                 movzx   eax, byte ptr [ebx]
.text:0040FCFC                 test    al, al
.text:0040FCFE                 jnz     short loc_40FCE0
.text:0040FD00
.text:0040FD00 loc_40FD00:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040FD00                                         ; ___addmntentstr+2EA↓j
.text:0040FD00                 mov     ebx, [esp+4Ch+var_28]
.text:0040FD04                 mov     edx, ebx
.text:0040FD06                 movzx   eax, byte ptr [ebx]
.text:0040FD09                 test    al, al
.text:0040FD0B                 jz      short loc_40FD30
.text:0040FD0D                 lea     esi, [esi+0]
.text:0040FD10
.text:0040FD10 loc_40FD10:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040FD10                 cmp     al, 20h ; ' '
.text:0040FD12                 jz      loc_40FEBA
.text:0040FD18                 cmp     al, 9
.text:0040FD1A                 jz      loc_40FEBA
.text:0040FD20                 cmp     al, 5Ch ; '\'
.text:0040FD22                 jz      loc_40FEBA
.text:0040FD28                 inc     ebx
.text:0040FD29                 movzx   eax, byte ptr [ebx]
.text:0040FD2C                 test    al, al
.text:0040FD2E                 jnz     short loc_40FD10
.text:0040FD30
.text:0040FD30 loc_40FD30:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040FD30                                         ; ___addmntentstr+21C↓j ...
.text:0040FD30                 mov     ebx, [esp+4Ch+var_24]
.text:0040FD34                 mov     edx, ebx
.text:0040FD36                 movzx   eax, byte ptr [ebx]
.text:0040FD39                 test    al, al
.text:0040FD3B                 jz      short loc_40FD60
.text:0040FD3D                 lea     esi, [esi+0]
.text:0040FD40
.text:0040FD40 loc_40FD40:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040FD40                 cmp     al, 20h ; ' '
.text:0040FD42                 jz      loc_40FE3E
.text:0040FD48                 cmp     al, 9
.text:0040FD4A                 jz      loc_40FE3E
.text:0040FD50                 cmp     al, 5Ch ; '\'
.text:0040FD52                 jz      loc_40FE3E
.text:0040FD58                 inc     ebx
.text:0040FD59                 movzx   eax, byte ptr [ebx]
.text:0040FD5C                 test    al, al
.text:0040FD5E                 jnz     short loc_40FD40
.text:0040FD60
.text:0040FD60 loc_40FD60:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040FD60                                         ; ___addmntentstr+1A0↓j ...
.text:0040FD60                 mov     edx, [esp+4Ch+Str]
.text:0040FD64                 mov     ebx, edx
.text:0040FD66                 movzx   eax, byte ptr [edx]
.text:0040FD69                 test    al, al
.text:0040FD6B                 jz      short loc_40FD84
.text:0040FD6D                 lea     esi, [esi+0]
.text:0040FD70
.text:0040FD70 loc_40FD70:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040FD70                 cmp     al, 20h ; ' '
.text:0040FD72                 jz      short loc_40FDCC
.text:0040FD74                 cmp     al, 9
.text:0040FD76                 jz      short loc_40FDCC
.text:0040FD78                 cmp     al, 5Ch ; '\'
.text:0040FD7A                 jz      short loc_40FDCC
.text:0040FD7C                 inc     ebx
.text:0040FD7D                 movzx   eax, byte ptr [ebx]
.text:0040FD80                 test    al, al
.text:0040FD82                 jnz     short loc_40FD70
.text:0040FD84
.text:0040FD84 loc_40FD84:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040FD84                                         ; ___addmntentstr+12E↓j ...
.text:0040FD84                 mov     [esp+4Ch+var_38], edx
.text:0040FD88                 mov     ebx, [esp+4Ch+var_18]
.text:0040FD8C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040FD90                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040FD98                 mov     edx, [esp+4Ch+var_2C]
.text:0040FD9C                 mov     [esp+4Ch+var_30], ebx
.text:0040FDA0                 mov     ebx, [esp+4Ch+var_24]
.text:0040FDA4                 mov     [esp+4Ch+var_34], ecx
.text:0040FDA8                 mov     ecx, [esp+4Ch+var_28]
.text:0040FDAC                 mov     [esp+4Ch+var_3C], ebx
.text:0040FDB0                 mov     ebx, [esp+4Ch+arg_0]
.text:0040FDB4                 mov     [esp+4Ch+var_40], ecx
.text:0040FDB8                 mov     [esp+4Ch+var_44], edx
.text:0040FDBC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040FDBF                 call    sprintf
.text:0040FDC4                 add     esp, 48h
.text:0040FDC7                 shr     eax, 1Fh
.text:0040FDCA                 pop     ebx
.text:0040FDCB                 retn
.text:0040FDCC ; ---------------------------------------------------------------------------
.text:0040FDCC
.text:0040FDCC loc_40FDCC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040FDCC                                         ; ___addmntentstr+D6↑j ...
.text:0040FDCC                 test    al, al
.text:0040FDCE                 jz      short loc_40FD84
.text:0040FDD0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040FDD3                 mov     ebx, edx
.text:0040FDD5                 call    strlen
.text:0040FDDA                 lea     edx, ds:1[eax*4]
.text:0040FDE1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040FDE4                 call    malloc
.text:0040FDE9                 mov     [esp+4Ch+Str], eax
.text:0040FDED                 mov     edx, eax
.text:0040FDEF                 nop
.text:0040FDF0
.text:0040FDF0 loc_40FDF0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040FDF0                 movzx   eax, byte ptr [ebx]
.text:0040FDF3                 cmp     al, 20h ; ' '
.text:0040FDF5                 jz      short loc_40FE2D
.text:0040FDF7                 cmp     al, 9
.text:0040FDF9                 jz      short loc_40FE1C
.text:0040FDFB                 cmp     al, 5Ch ; '\'
.text:0040FDFD                 jz      short loc_40FE13
.text:0040FDFF                 mov     [edx], al
.text:0040FE01
.text:0040FE01 loc_40FE01:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040FE01                                         ; ___addmntentstr+18B↓j ...
.text:0040FE01                 movzx   ecx, byte ptr [ebx]
.text:0040FE04                 inc     edx
.text:0040FE05                 inc     ebx
.text:0040FE06                 test    cl, cl
.text:0040FE08                 jnz     short loc_40FDF0
.text:0040FE0A                 mov     edx, [esp+4Ch+Str]
.text:0040FE0E                 jmp     loc_40FD84
.text:0040FE13 ; ---------------------------------------------------------------------------
.text:0040FE13
.text:0040FE13 loc_40FE13:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040FE13                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE16                 inc     edx
.text:0040FE17                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE1A                 jmp     short loc_40FE01
.text:0040FE1C ; ---------------------------------------------------------------------------
.text:0040FE1C
.text:0040FE1C loc_40FE1C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040FE1C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE1F                 inc     edx
.text:0040FE20                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE23                 inc     edx
.text:0040FE24                 mov     byte ptr [edx], 31h ; '1'
.text:0040FE27                 inc     edx
.text:0040FE28                 mov     byte ptr [edx], 32h ; '2'
.text:0040FE2B                 jmp     short loc_40FE01
.text:0040FE2D ; ---------------------------------------------------------------------------
.text:0040FE2D
.text:0040FE2D loc_40FE2D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040FE2D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE30                 inc     edx
.text:0040FE31                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE34                 inc     edx
.text:0040FE35                 mov     byte ptr [edx], 34h ; '4'
.text:0040FE38                 inc     edx
.text:0040FE39                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE3C                 jmp     short loc_40FE01
.text:0040FE3E ; ---------------------------------------------------------------------------
.text:0040FE3E
.text:0040FE3E loc_40FE3E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040FE3E                                         ; ___addmntentstr+AA↑j ...
.text:0040FE3E                 test    al, al
.text:0040FE40                 jz      loc_40FD60
.text:0040FE46                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040FE49                 mov     ebx, edx
.text:0040FE4B                 call    strlen
.text:0040FE50                 lea     edx, ds:1[eax*4]
.text:0040FE57                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040FE5A                 call    malloc
.text:0040FE5F                 mov     [esp+4Ch+var_24], eax
.text:0040FE63                 mov     edx, eax
.text:0040FE65                 lea     esi, [esi+0]
.text:0040FE69                 lea     edi, [edi+0]
.text:0040FE70
.text:0040FE70 loc_40FE70:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040FE70                 movzx   eax, byte ptr [ebx]
.text:0040FE73                 cmp     al, 20h ; ' '
.text:0040FE75                 jz      short loc_40FEA9
.text:0040FE77                 cmp     al, 9
.text:0040FE79                 jz      short loc_40FE98
.text:0040FE7B                 cmp     al, 5Ch ; '\'
.text:0040FE7D                 jz      short loc_40FE8F
.text:0040FE7F                 mov     [edx], al
.text:0040FE81
.text:0040FE81 loc_40FE81:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040FE81                                         ; ___addmntentstr+207↓j ...
.text:0040FE81                 movzx   ecx, byte ptr [ebx]
.text:0040FE84                 inc     edx
.text:0040FE85                 inc     ebx
.text:0040FE86                 test    cl, cl
.text:0040FE88                 jnz     short loc_40FE70
.text:0040FE8A                 jmp     loc_40FD60
.text:0040FE8F ; ---------------------------------------------------------------------------
.text:0040FE8F
.text:0040FE8F loc_40FE8F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040FE8F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE92                 inc     edx
.text:0040FE93                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE96                 jmp     short loc_40FE81
.text:0040FE98 ; ---------------------------------------------------------------------------
.text:0040FE98
.text:0040FE98 loc_40FE98:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040FE98                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FE9B                 inc     edx
.text:0040FE9C                 mov     byte ptr [edx], 30h ; '0'
.text:0040FE9F                 inc     edx
.text:0040FEA0                 mov     byte ptr [edx], 31h ; '1'
.text:0040FEA3                 inc     edx
.text:0040FEA4                 mov     byte ptr [edx], 32h ; '2'
.text:0040FEA7                 jmp     short loc_40FE81
.text:0040FEA9 ; ---------------------------------------------------------------------------
.text:0040FEA9
.text:0040FEA9 loc_40FEA9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040FEA9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FEAC                 inc     edx
.text:0040FEAD                 mov     byte ptr [edx], 30h ; '0'
.text:0040FEB0                 inc     edx
.text:0040FEB1                 mov     byte ptr [edx], 34h ; '4'
.text:0040FEB4                 inc     edx
.text:0040FEB5                 mov     byte ptr [edx], 30h ; '0'
.text:0040FEB8                 jmp     short loc_40FE81
.text:0040FEBA ; ---------------------------------------------------------------------------
.text:0040FEBA
.text:0040FEBA loc_40FEBA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040FEBA                                         ; ___addmntentstr+7A↑j ...
.text:0040FEBA                 test    al, al
.text:0040FEBC                 jz      loc_40FD30
.text:0040FEC2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040FEC5                 mov     ebx, edx
.text:0040FEC7                 call    strlen
.text:0040FECC                 lea     edx, ds:1[eax*4]
.text:0040FED3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040FED6                 call    malloc
.text:0040FEDB                 mov     [esp+4Ch+var_28], eax
.text:0040FEDF                 mov     edx, eax
.text:0040FEE1                 jmp     short loc_40FEF0
.text:0040FEE1 ; ---------------------------------------------------------------------------
.text:0040FEE3                 align 10h
.text:0040FEF0
.text:0040FEF0 loc_40FEF0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040FEF0                                         ; ___addmntentstr+268↓j
.text:0040FEF0                 movzx   eax, byte ptr [ebx]
.text:0040FEF3                 cmp     al, 20h ; ' '
.text:0040FEF5                 jz      short loc_40FF29
.text:0040FEF7                 cmp     al, 9
.text:0040FEF9                 jz      short loc_40FF18
.text:0040FEFB                 cmp     al, 5Ch ; '\'
.text:0040FEFD                 jz      short loc_40FF0F
.text:0040FEFF                 mov     [edx], al
.text:0040FF01
.text:0040FF01 loc_40FF01:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040FF01                                         ; ___addmntentstr+287↓j ...
.text:0040FF01                 movzx   ecx, byte ptr [ebx]
.text:0040FF04                 inc     edx
.text:0040FF05                 inc     ebx
.text:0040FF06                 test    cl, cl
.text:0040FF08                 jnz     short loc_40FEF0
.text:0040FF0A                 jmp     loc_40FD30
.text:0040FF0F ; ---------------------------------------------------------------------------
.text:0040FF0F
.text:0040FF0F loc_40FF0F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040FF0F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FF12                 inc     edx
.text:0040FF13                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FF16                 jmp     short loc_40FF01
.text:0040FF18 ; ---------------------------------------------------------------------------
.text:0040FF18
.text:0040FF18 loc_40FF18:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040FF18                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FF1B                 inc     edx
.text:0040FF1C                 mov     byte ptr [edx], 30h ; '0'
.text:0040FF1F                 inc     edx
.text:0040FF20                 mov     byte ptr [edx], 31h ; '1'
.text:0040FF23                 inc     edx
.text:0040FF24                 mov     byte ptr [edx], 32h ; '2'
.text:0040FF27                 jmp     short loc_40FF01
.text:0040FF29 ; ---------------------------------------------------------------------------
.text:0040FF29
.text:0040FF29 loc_40FF29:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040FF29                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FF2C                 inc     edx
.text:0040FF2D                 mov     byte ptr [edx], 30h ; '0'
.text:0040FF30                 inc     edx
.text:0040FF31                 mov     byte ptr [edx], 34h ; '4'
.text:0040FF34                 inc     edx
.text:0040FF35                 mov     byte ptr [edx], 30h ; '0'
.text:0040FF38                 jmp     short loc_40FF01
.text:0040FF38 ; ---------------------------------------------------------------------------
.text:0040FF3A                 align 10h
.text:0040FF40
.text:0040FF40 loc_40FF40:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040FF40                                         ; ___addmntentstr+4A↑j ...
.text:0040FF40                 test    al, al
.text:0040FF42                 jz      loc_40FD00
.text:0040FF48                 mov     ebx, [esp+4Ch+var_2C]
.text:0040FF4C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040FF4F                 call    strlen
.text:0040FF54                 lea     edx, ds:1[eax*4]
.text:0040FF5B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040FF5E                 call    malloc
.text:0040FF63                 mov     [esp+4Ch+var_2C], eax
.text:0040FF67                 mov     edx, eax
.text:0040FF69                 lea     esi, [esi+0]
.text:0040FF70
.text:0040FF70 loc_40FF70:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040FF70                 movzx   eax, byte ptr [ebx]
.text:0040FF73                 cmp     al, 20h ; ' '
.text:0040FF75                 jz      short loc_40FFB0
.text:0040FF77                 cmp     al, 9
.text:0040FF79                 jz      short loc_40FF98
.text:0040FF7B                 cmp     al, 5Ch ; '\'
.text:0040FF7D                 jz      short loc_40FF8F
.text:0040FF7F                 mov     [edx], al
.text:0040FF81
.text:0040FF81 loc_40FF81:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040FF81                                         ; ___addmntentstr+307↓j ...
.text:0040FF81                 movzx   ecx, byte ptr [ebx]
.text:0040FF84                 inc     edx
.text:0040FF85                 inc     ebx
.text:0040FF86                 test    cl, cl
.text:0040FF88                 jnz     short loc_40FF70
.text:0040FF8A                 jmp     loc_40FD00
.text:0040FF8F ; ---------------------------------------------------------------------------
.text:0040FF8F
.text:0040FF8F loc_40FF8F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040FF8F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FF92                 inc     edx
.text:0040FF93                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FF96                 jmp     short loc_40FF81
.text:0040FF98 ; ---------------------------------------------------------------------------
.text:0040FF98
.text:0040FF98 loc_40FF98:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040FF98                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FF9B                 inc     edx
.text:0040FF9C                 mov     byte ptr [edx], 30h ; '0'
.text:0040FF9F                 inc     edx
.text:0040FFA0                 mov     byte ptr [edx], 31h ; '1'
.text:0040FFA3                 inc     edx
.text:0040FFA4                 mov     byte ptr [edx], 32h ; '2'
.text:0040FFA7                 jmp     short loc_40FF81
.text:0040FFA7 ; ---------------------------------------------------------------------------
.text:0040FFA9                 align 10h
.text:0040FFB0
.text:0040FFB0 loc_40FFB0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040FFB0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040FFB3                 inc     edx
.text:0040FFB4                 mov     byte ptr [edx], 30h ; '0'
.text:0040FFB7                 inc     edx
.text:0040FFB8                 mov     byte ptr [edx], 34h ; '4'
.text:0040FFBB                 inc     edx
.text:0040FFBC                 mov     byte ptr [edx], 30h ; '0'
.text:0040FFBF                 jmp     short loc_40FF81
.text:0040FFC1 ; ---------------------------------------------------------------------------
.text:0040FFC1
.text:0040FFC1 loc_40FFC1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040FFC1                 movzx   eax, byte ptr [ecx]
.text:0040FFC4                 jmp     loc_40FF40
.text:0040FFC4 ___addmntentstr endp
.text:0040FFC4
.text:0040FFC4 ; ---------------------------------------------------------------------------
.text:0040FFC9                 align 10h
.text:0040FFD0
.text:0040FFD0 ; =============== S U B R O U T I N E =======================================
.text:0040FFD0
.text:0040FFD0
.text:0040FFD0 sub_40FFD0      proc near               ; CODE XREF: sub_40D850+99↑p
.text:0040FFD0
.text:0040FFD0 nBufferLength   = dword ptr -1Ch
.text:0040FFD0 lpBuffer        = dword ptr -18h
.text:0040FFD0 dwBytes         = dword ptr -14h
.text:0040FFD0 var_8           = dword ptr -8
.text:0040FFD0 var_4           = dword ptr -4
.text:0040FFD0
.text:0040FFD0                 sub     esp, 1Ch
.text:0040FFD3                 mov     [esp+1Ch+var_8], ebx
.text:0040FFD7                 mov     [esp+1Ch+var_4], esi
.text:0040FFDB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040FFE3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040FFEA                 call    GetLogicalDriveStringsA
.text:0040FFEF                 sub     esp, 8
.text:0040FFF2                 mov     ebx, eax
.text:0040FFF4                 call    GetProcessHeap
.text:0040FFF9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040FFFC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:00410000                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:00410008                 call    HeapAlloc
.text:0041000D                 sub     esp, 0Ch
.text:00410010                 mov     esi, eax
.text:00410012                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:00410015                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:00410019                 call    GetLogicalDriveStringsA
.text:0041001E                 sub     esp, 8
.text:00410021                 mov     eax, esi
.text:00410023                 mov     ebx, [esp+1Ch+var_8]
.text:00410027                 mov     esi, [esp+1Ch+var_4]
.text:0041002B                 add     esp, 1Ch
.text:0041002E                 retn
.text:0041002E sub_40FFD0      endp
.text:0041002E
.text:0041002F
.text:0041002F ; =============== S U B R O U T I N E =======================================
.text:0041002F
.text:0041002F
.text:0041002F ; int __cdecl sub_41002F(char *, char *)
.text:0041002F sub_41002F      proc near               ; DATA XREF: sub_41002F:loc_4100BD↓o
.text:0041002F
.text:0041002F FileName        = dword ptr -1Ch
.text:0041002F Mode            = dword ptr -18h
.text:0041002F dwBytes         = dword ptr -14h
.text:0041002F arg_0           = dword ptr  4
.text:0041002F arg_4           = dword ptr  8
.text:0041002F
.text:0041002F                 ja      short $+2
.text:00410031
.text:00410031 loc_410031:                             ; CODE XREF: sub_41002F↑j
.text:00410031                 jmp     short loc_410040
.text:00410031 ; ---------------------------------------------------------------------------
.text:00410033                 align 10h
.text:00410040
.text:00410040 loc_410040:                             ; CODE XREF: sub_41002F:loc_410031↑j
.text:00410040                 push    edi
.text:00410041                 push    esi
.text:00410042                 push    ebx
.text:00410043                 sub     esp, 10h
.text:00410046                 mov     ebx, [esp+1Ch+arg_0]
.text:0041004A                 mov     edx, [esp+1Ch+arg_4]
.text:0041004E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00410051                 mov     [esp+1Ch+Mode], edx ; Mode
.text:00410055                 call    fopen
.text:0041005A                 test    eax, eax
.text:0041005C                 mov     edi, eax
.text:0041005E                 jz      short loc_4100BD
.text:00410060
.text:00410060 loc_410060:                             ; CODE XREF: sub_41002F+A2↓j
.text:00410060                                         ; sub_41002F+AB↓j
.text:00410060                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:00410068                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0041006F                 call    GetLogicalDriveStringsA
.text:00410074                 sub     esp, 8
.text:00410077                 mov     esi, eax
.text:00410079                 call    GetProcessHeap
.text:0041007E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00410081                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00410085                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041008D                 call    HeapAlloc
.text:00410092                 sub     esp, 0Ch
.text:00410095                 mov     ebx, eax
.text:00410097                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041009A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041009E                 call    GetLogicalDriveStringsA
.text:004100A3                 mov     off_414094, ebx ; "notset"
.text:004100A9                 sub     esp, 8
.text:004100AC                 xor     eax, eax
.text:004100AE                 test    ebx, ebx
.text:004100B0                 setz    al
.text:004100B3                 add     esp, 10h
.text:004100B6                 pop     ebx
.text:004100B7                 dec     eax
.text:004100B8                 and     eax, edi
.text:004100BA                 pop     esi
.text:004100BB                 pop     edi
.text:004100BC                 retn
.text:004100BD ; ---------------------------------------------------------------------------
.text:004100BD
.text:004100BD loc_4100BD:                             ; CODE XREF: sub_41002F+2F↑j
.text:004100BD                 mov     [esp+1Ch+Mode], offset sub_41002F ; Mode
.text:004100C5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:004100C8                 call    fopen
.text:004100CD                 test    eax, eax
.text:004100CF                 mov     edi, eax
.text:004100D1                 jnz     short loc_410060
.text:004100D3                 call    sub_4102C0
.text:004100D8                 mov     edi, eax
.text:004100DA                 jmp     short loc_410060
.text:004100DA sub_41002F      endp
.text:004100DA
.text:004100DA ; ---------------------------------------------------------------------------
.text:004100DC                 align 10h
.text:004100E0                 sub     esp, 0Ch
.text:004100E3                 mov     eax, [esp+10h]
.text:004100E7                 test    eax, eax
.text:004100E9                 jz      short loc_4100F3
.text:004100EB                 mov     [esp], eax
.text:004100EE                 call    fclose
.text:004100F3
.text:004100F3 loc_4100F3:                             ; CODE XREF: .text:004100E9↑j
.text:004100F3                 call    GetProcessHeap
.text:004100F8                 mov     [esp], eax
.text:004100FB                 mov     ecx, off_414094 ; "notset"
.text:00410101                 mov     dword ptr [esp+4], 0
.text:00410109                 mov     [esp+8], ecx
.text:0041010D                 call    HeapFree
.text:00410112                 mov     edx, off_414090 ; "notset"
.text:00410118                 sub     esp, 0Ch
.text:0041011B                 mov     eax, 1
.text:00410120                 mov     off_414094, edx ; "notset"
.text:00410126                 add     esp, 0Ch
.text:00410129                 retn
.text:00410129 ; ---------------------------------------------------------------------------
.text:0041012A                 align 10h
.text:00410130                 push    edi
.text:00410131                 push    esi
.text:00410132                 push    ebx
.text:00410133                 sub     esp, 10h
.text:00410136                 mov     edi, [esp+24h]
.text:0041013A                 mov     [esp], edi
.text:0041013D                 call    strlen
.text:00410142                 mov     edx, [esp+20h]
.text:00410146                 mov     esi, eax
.text:00410148                 mov     ebx, [edx+0Ch]
.text:0041014B                 nop
.text:0041014C                 lea     esi, [esi+0]
.text:00410150
.text:00410150 loc_410150:                             ; CODE XREF: .text:00410181↓j
.text:00410150                 mov     [esp+4], edi
.text:00410154                 mov     [esp], ebx
.text:00410157                 call    strstr
.text:0041015C                 test    eax, eax
.text:0041015E                 jz      short loc_410183
.text:00410160                 cmp     eax, ebx
.text:00410162                 jz      short loc_410185
.text:00410164                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:00410168                 jz      short loc_410190
.text:0041016A
.text:0041016A loc_41016A:                             ; CODE XREF: .text:004101A0↓j
.text:0041016A                 mov     [esp], ebx
.text:0041016D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:00410175                 call    strchr
.text:0041017A                 test    eax, eax
.text:0041017C                 mov     ebx, eax
.text:0041017E                 jz      short loc_410183
.text:00410180                 inc     ebx
.text:00410181                 jmp     short loc_410150
.text:00410183 ; ---------------------------------------------------------------------------
.text:00410183
.text:00410183 loc_410183:                             ; CODE XREF: .text:0041015E↑j
.text:00410183                                         ; .text:0041017E↑j
.text:00410183                 xor     eax, eax
.text:00410185
.text:00410185 loc_410185:                             ; CODE XREF: .text:00410162↑j
.text:00410185                                         ; .text:00410196↓j ...
.text:00410185                 add     esp, 10h
.text:00410188                 pop     ebx
.text:00410189                 pop     esi
.text:0041018A                 pop     edi
.text:0041018B                 retn
.text:0041018B ; ---------------------------------------------------------------------------
.text:0041018C                 align 10h
.text:00410190
.text:00410190 loc_410190:                             ; CODE XREF: .text:00410168↑j
.text:00410190                 movzx   edx, byte ptr [esi+eax]
.text:00410194                 test    dl, dl
.text:00410196                 jz      short loc_410185
.text:00410198                 cmp     dl, 3Dh ; '='
.text:0041019B                 jz      short loc_410185
.text:0041019D                 cmp     dl, 2Ch ; ','
.text:004101A0                 jnz     short loc_41016A
.text:004101A2                 jmp     short loc_410185
.text:004101A2 ; ---------------------------------------------------------------------------
.text:004101A4                 align 10h
.text:004101B0
.text:004101B0 ; =============== S U B R O U T I N E =======================================
.text:004101B0
.text:004101B0 ; Attributes: noreturn
.text:004101B0
.text:004101B0 sub_4101B0      proc near               ; CODE XREF: .text:0040F999↑p
.text:004101B0                                         ; sub_4101B0↓j
.text:004101B0                 jmp     short sub_4101B0
.text:004101B0 sub_4101B0      endp
.text:004101B0
.text:004101B0 ; ---------------------------------------------------------------------------
.text:004101B2                 align 10h
.text:004101C0
.text:004101C0 ; =============== S U B R O U T I N E =======================================
.text:004101C0
.text:004101C0
.text:004101C0 sub_4101C0      proc near               ; CODE XREF: .text:0040F6F5↑p
.text:004101C0
.text:004101C0 FileHandle      = dword ptr -1Ch
.text:004101C0 dwFileOffsetLow = dword ptr -18h
.text:004101C0 dwFileOffsetHigh= dword ptr -14h
.text:004101C0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:004101C0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:004101C0 var_8           = dword ptr -8
.text:004101C0 var_4           = dword ptr -4
.text:004101C0 arg_0           = dword ptr  4
.text:004101C0
.text:004101C0                 sub     esp, 1Ch
.text:004101C3                 mov     edx, [esp+1Ch+arg_0]
.text:004101C7                 mov     [esp+1Ch+var_4], esi
.text:004101CB                 mov     [esp+1Ch+var_8], ebx
.text:004101CF                 mov     ebx, [edx+10h]
.text:004101D2                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:004101D5                 call    _get_osfhandle
.text:004101DA                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:004101DD                 mov     esi, eax
.text:004101DF                 call    _filelengthi64
.text:004101E4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:004101E8                 cdq
.text:004101E9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:004101EC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:004101F0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:004101F8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00410200                 call    UnlockFile
.text:00410205                 sub     esp, 14h
.text:00410208                 mov     ebx, [esp+1Ch+var_8]
.text:0041020C                 mov     esi, [esp+1Ch+var_4]
.text:00410210                 add     esp, 1Ch
.text:00410213                 retn
.text:00410213 sub_4101C0      endp
.text:00410213
.text:00410213 ; ---------------------------------------------------------------------------
.text:00410214                 align 10h
.text:00410220
.text:00410220 ; =============== S U B R O U T I N E =======================================
.text:00410220
.text:00410220
.text:00410220 ; int __cdecl sub_410220(int, char *Control)
.text:00410220 sub_410220      proc near               ; CODE XREF: .text:0040F5B6↑p
.text:00410220                                         ; .text:0040F606↑p ...
.text:00410220
.text:00410220 Str             = dword ptr -1Ch
.text:00410220 Val             = dword ptr -18h
.text:00410220 var_8           = dword ptr -8
.text:00410220 var_4           = dword ptr -4
.text:00410220 arg_0           = dword ptr  4
.text:00410220 Control         = dword ptr  8
.text:00410220
.text:00410220                 sub     esp, 1Ch
.text:00410223                 xor     eax, eax
.text:00410225                 mov     edx, [esp+1Ch+Control]
.text:00410229                 mov     [esp+1Ch+var_4], esi
.text:0041022D                 mov     esi, [esp+1Ch+arg_0]
.text:00410231                 mov     [esp+1Ch+var_8], ebx
.text:00410235                 mov     ebx, [esi]
.text:00410237                 test    ebx, ebx
.text:00410239                 jz      short loc_410268
.text:0041023B                 movzx   eax, byte ptr [edx]
.text:0041023E                 test    al, al
.text:00410240                 jz      short loc_410260
.text:00410242                 cmp     byte ptr [edx+1], 0
.text:00410246                 jnz     short loc_4102A0
.text:00410248                 movzx   ecx, byte ptr [ebx]
.text:0041024B                 mov     edx, ebx
.text:0041024D                 cmp     cl, al
.text:0041024F                 jz      short loc_410292
.text:00410251                 test    cl, cl
.text:00410253                 jnz     short loc_410274
.text:00410255                 lea     esi, [esi+0]
.text:00410259                 lea     edi, [edi+0]
.text:00410260
.text:00410260 loc_410260:                             ; CODE XREF: sub_410220+20↑j
.text:00410260                                         ; sub_410220+74↓j
.text:00410260                 mov     dword ptr [esi], 0
.text:00410266
.text:00410266 loc_410266:                             ; CODE XREF: sub_410220+7C↓j
.text:00410266                 mov     eax, ebx
.text:00410268
.text:00410268 loc_410268:                             ; CODE XREF: sub_410220+19↑j
.text:00410268                 mov     ebx, [esp+1Ch+var_8]
.text:0041026C                 mov     esi, [esp+1Ch+var_4]
.text:00410270                 add     esp, 1Ch
.text:00410273                 retn
.text:00410274 ; ---------------------------------------------------------------------------
.text:00410274
.text:00410274 loc_410274:                             ; CODE XREF: sub_410220+33↑j
.text:00410274                 movsx   edx, al
.text:00410277                 mov     [esp+1Ch+Val], edx ; Val
.text:0041027B                 lea     edx, [ebx+1]
.text:0041027E                 mov     [esp+1Ch+Str], edx ; Str
.text:00410281                 call    strchr
.text:00410286                 lea     esi, [esi+0]
.text:00410289                 lea     edi, [edi+0]
.text:00410290
.text:00410290 loc_410290:                             ; CODE XREF: sub_410220+8C↓j
.text:00410290                 mov     edx, eax
.text:00410292
.text:00410292 loc_410292:                             ; CODE XREF: sub_410220+2F↑j
.text:00410292                 test    edx, edx
.text:00410294                 jz      short loc_410260
.text:00410296                 mov     byte ptr [edx], 0
.text:00410299                 inc     edx
.text:0041029A                 mov     [esi], edx
.text:0041029C                 jmp     short loc_410266
.text:0041029C ; ---------------------------------------------------------------------------
.text:0041029E                 align 10h
.text:004102A0
.text:004102A0 loc_4102A0:                             ; CODE XREF: sub_410220+26↑j
.text:004102A0                 mov     [esp+1Ch+Val], edx ; Control
.text:004102A4                 mov     [esp+1Ch+Str], ebx ; Str
.text:004102A7                 call    strpbrk
.text:004102AC                 jmp     short loc_410290
.text:004102AC sub_410220      endp
.text:004102AC
.text:004102AC ; ---------------------------------------------------------------------------
.text:004102AE                 align 10h
.text:004102B0 ; const char aTmpf[]
.text:004102B0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_4102C0+20↓o
.text:004102B5 ; const char aWBd[]
.text:004102B5 aWBd            db 'w+bD',0             ; DATA XREF: sub_4102C0+5E↓o
.text:004102BA                 align 10h
.text:004102C0
.text:004102C0 ; =============== S U B R O U T I N E =======================================
.text:004102C0
.text:004102C0
.text:004102C0 sub_4102C0      proc near               ; CODE XREF: sub_41002F+A4↑p
.text:004102C0
.text:004102C0 FileHandle      = dword ptr -13Ch
.text:004102C0 Format          = dword ptr -138h
.text:004102C0 var_134         = dword ptr -134h
.text:004102C0 var_130         = dword ptr -130h
.text:004102C0 var_12C         = dword ptr -12Ch
.text:004102C0 Buffer          = byte ptr -11Ch
.text:004102C0 var_8           = dword ptr -8
.text:004102C0 var_4           = dword ptr -4
.text:004102C0
.text:004102C0                 sub     esp, 13Ch
.text:004102C6                 mov     [esp+13Ch+var_8], ebx
.text:004102CD                 lea     ebx, [esp+13Ch+Buffer]
.text:004102D1                 mov     [esp+13Ch+var_4], esi
.text:004102D8                 mov     [esp+13Ch+var_12C], 0 ; int
.text:004102E0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:004102E8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:004102F0                 mov     [esp+13Ch+Format], 104h ; int
.text:004102F8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:004102FB                 call    sub_410390
.text:00410300                 xor     edx, edx
.text:00410302                 test    eax, eax
.text:00410304                 jnz     short loc_410336
.text:00410306                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00410309                 mov     [esp+13Ch+Format], 0 ; int
.text:00410311                 call    sub_410710
.text:00410316                 xor     edx, edx
.text:00410318                 mov     ebx, eax
.text:0041031A                 test    eax, eax
.text:0041031C                 js      short loc_410336
.text:0041031E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:00410326                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:00410329                 call    _fdopen
.text:0041032E                 test    eax, eax
.text:00410330                 mov     esi, eax
.text:00410332                 jz      short loc_41034D
.text:00410334
.text:00410334 loc_410334:                             ; CODE XREF: sub_4102C0+95↓j
.text:00410334                 mov     edx, esi
.text:00410336
.text:00410336 loc_410336:                             ; CODE XREF: sub_4102C0+44↑j
.text:00410336                                         ; sub_4102C0+5C↑j
.text:00410336                 mov     ebx, [esp+13Ch+var_8]
.text:0041033D                 mov     eax, edx
.text:0041033F                 mov     esi, [esp+13Ch+var_4]
.text:00410346                 add     esp, 13Ch
.text:0041034C                 retn
.text:0041034D ; ---------------------------------------------------------------------------
.text:0041034D
.text:0041034D loc_41034D:                             ; CODE XREF: sub_4102C0+72↑j
.text:0041034D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:00410350                 call    _close
.text:00410355                 jmp     short loc_410334
.text:00410355 sub_4102C0      endp
.text:00410355
.text:00410355 ; ---------------------------------------------------------------------------
.text:00410357                 align 10h
.text:00410360 aFile           db 'file',0             ; DATA XREF: sub_410390:loc_4103BC↓o
.text:00410365 ; const char aSSxxxxxx[]
.text:00410365 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_410390+9B↓o
.text:00410375 ; const char aTemp[]
.text:00410375 aTemp           db 'TEMP',0             ; DATA XREF: sub_410390:loc_410472↓o
.text:00410375                                         ; sub_410390:loc_4104B2↓o ...
.text:0041037A ; const char aTmp[]
.text:0041037A aTmp            db '/tmp',0             ; DATA XREF: sub_410390+12F↓o
.text:0041037A                                         ; sub_410390+141↓o ...
.text:0041037F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_410390:loc_410530↓o
.text:00410386 aTmp_0          db 'TMP',0              ; DATA XREF: sub_410390:loc_4105C0↓o
.text:0041038A                 align 10h
.text:00410390
.text:00410390 ; =============== S U B R O U T I N E =======================================
.text:00410390
.text:00410390
.text:00410390 ; int __cdecl sub_410390(char *Buffer, int, char *, char *, int)
.text:00410390 sub_410390      proc near               ; CODE XREF: sub_4102C0+3B↑p
.text:00410390
.text:00410390 Str             = dword ptr -1BCh
.text:00410390 Format          = dword ptr -1B8h
.text:00410390 var_1B4         = dword ptr -1B4h
.text:00410390 var_1B0         = dword ptr -1B0h
.text:00410390 var_1AC         = dword ptr -1ACh
.text:00410390 var_1A8         = dword ptr -1A8h
.text:00410390 var_19C         = dword ptr -19Ch
.text:00410390 var_13C         = dword ptr -13Ch
.text:00410390 var_DC          = dword ptr -0DCh
.text:00410390 var_7C          = dword ptr -7Ch
.text:00410390 Buffer          = dword ptr  4
.text:00410390 arg_4           = dword ptr  8
.text:00410390 arg_8           = dword ptr  0Ch
.text:00410390 arg_C           = dword ptr  10h
.text:00410390 arg_10          = dword ptr  14h
.text:00410390
.text:00410390                 push    ebp
.text:00410391                 push    edi
.text:00410392                 push    esi
.text:00410393                 push    ebx
.text:00410394                 sub     esp, 1ACh
.text:0041039A                 mov     eax, [esp+1BCh+arg_C]
.text:004103A1                 mov     esi, [esp+1BCh+arg_8]
.text:004103A8                 test    eax, eax
.text:004103AA                 jz      short loc_4103BC
.text:004103AC                 mov     edx, [esp+1BCh+arg_C]
.text:004103B3                 cmp     byte ptr [edx], 0
.text:004103B6                 jnz     loc_4105F0
.text:004103BC
.text:004103BC loc_4103BC:                             ; CODE XREF: sub_410390+1A↑j
.text:004103BC                 mov     eax, offset aFile ; "file"
.text:004103C1                 mov     ebp, 4
.text:004103C6                 mov     [esp+1BCh+arg_C], eax
.text:004103CD
.text:004103CD loc_4103CD:                             ; CODE XREF: sub_410390+274↓j
.text:004103CD                                         ; sub_410390+27F↓j
.text:004103CD                 mov     ebx, [esp+1BCh+arg_10]
.text:004103D4                 test    ebx, ebx
.text:004103D6                 jnz     loc_410530
.text:004103DC
.text:004103DC loc_4103DC:                             ; CODE XREF: sub_410390+21C↓j
.text:004103DC                                         ; sub_410390+224↓j ...
.text:004103DC                 test    esi, esi
.text:004103DE                 jz      loc_410472
.text:004103E4
.text:004103E4 loc_4103E4:                             ; CODE XREF: sub_410390+176↓j
.text:004103E4                                         ; sub_410390+19A↓j
.text:004103E4                 mov     [esp+1BCh+Str], esi ; Str
.text:004103E7                 call    strlen
.text:004103EC                 test    eax, eax
.text:004103EE                 mov     edx, eax
.text:004103F0                 jz      short loc_410400
.text:004103F2                 movzx   eax, byte ptr [eax+esi-1]
.text:004103F7                 cmp     al, 2Fh ; '/'
.text:004103F9                 jz      short loc_410460
.text:004103FB                 cmp     al, 5Ch ; '\'
.text:004103FD                 jz      short loc_410460
.text:004103FF                 nop
.text:00410400
.text:00410400 loc_410400:                             ; CODE XREF: sub_410390+60↑j
.text:00410400                                         ; sub_410390+D1↓j ...
.text:00410400                 lea     edi, [ebp+edx+8]
.text:00410404                 cmp     [esp+1BCh+arg_4], edi
.text:0041040B                 jb      short loc_410448
.text:0041040D                 mov     [esp+1BCh+var_1AC], ebp
.text:00410411                 mov     ecx, [esp+1BCh+arg_C]
.text:00410418                 mov     ebp, [esp+1BCh+Buffer]
.text:0041041F                 mov     [esp+1BCh+var_1B0], esi
.text:00410423                 mov     [esp+1BCh+var_1A8], ecx
.text:00410427                 mov     [esp+1BCh+var_1B4], edx
.text:0041042B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00410433                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00410436                 call    sprintf
.text:0041043B                 xor     eax, eax
.text:0041043D
.text:0041043D loc_41043D:                             ; CODE XREF: sub_410390+C8↓j
.text:0041043D                 add     esp, 1ACh
.text:00410443                 pop     ebx
.text:00410444                 pop     esi
.text:00410445                 pop     edi
.text:00410446                 pop     ebp
.text:00410447                 retn
.text:00410448 ; ---------------------------------------------------------------------------
.text:00410448
.text:00410448 loc_410448:                             ; CODE XREF: sub_410390+7B↑j
.text:00410448                 call    _errno
.text:0041044D                 mov     dword ptr [eax], 16h
.text:00410453
.text:00410453 loc_410453:                             ; CODE XREF: sub_410390+187↓j
.text:00410453                 mov     eax, 0FFFFFFFFh
.text:00410458                 jmp     short loc_41043D
.text:00410458 ; ---------------------------------------------------------------------------
.text:0041045A                 align 10h
.text:00410460
.text:00410460 loc_410460:                             ; CODE XREF: sub_410390+69↑j
.text:00410460                                         ; sub_410390+6D↑j ...
.text:00410460                 dec     edx
.text:00410461                 jz      short loc_410400
.text:00410463                 movzx   eax, byte ptr [edx+esi-1]
.text:00410468                 cmp     al, 2Fh ; '/'
.text:0041046A                 jz      short loc_410460
.text:0041046C                 cmp     al, 5Ch ; '\'
.text:0041046E                 jz      short loc_410460
.text:00410470                 jmp     short loc_410400
.text:00410472 ; ---------------------------------------------------------------------------
.text:00410472
.text:00410472 loc_410472:                             ; CODE XREF: sub_410390+4E↑j
.text:00410472                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410479                 lea     esi, [esp+1BCh+var_13C]
.text:00410480                 call    getenv
.text:00410485                 mov     [esp+1BCh+Format], eax ; char *
.text:00410489                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041048D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410494                 call    sub_410C90
.text:00410499                 test    eax, eax
.text:0041049B                 jnz     short loc_4104B2
.text:0041049D                 mov     edi, [esp+1BCh+var_13C]
.text:004104A4                 and     edi, 0F000h
.text:004104AA                 cmp     edi, 4000h
.text:004104B0                 jz      short loc_41051C
.text:004104B2
.text:004104B2 loc_4104B2:                             ; CODE XREF: sub_410390+10B↑j
.text:004104B2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004104B9                 call    getenv
.text:004104BE                 cld
.text:004104BF                 mov     edx, offset aTmp ; "/tmp"
.text:004104C4                 mov     esi, eax
.text:004104C6                 mov     ecx, 5
.text:004104CB                 mov     edi, edx
.text:004104CD                 repe cmpsb
.text:004104CF                 jz      short loc_41050C
.text:004104D1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:004104D9                 lea     ecx, [esp+1BCh+var_19C]
.text:004104DD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:004104E1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004104E8                 call    sub_410C90
.text:004104ED                 test    eax, eax
.text:004104EF                 jnz     short loc_41050C
.text:004104F1                 mov     ebx, [esp+1BCh+var_19C]
.text:004104F5                 mov     esi, offset aTmp ; "/tmp"
.text:004104FA                 and     ebx, 0F000h
.text:00410500                 cmp     ebx, 4000h
.text:00410506                 jz      loc_4103E4
.text:0041050C
.text:0041050C loc_41050C:                             ; CODE XREF: sub_410390+13F↑j
.text:0041050C                                         ; sub_410390+15F↑j
.text:0041050C                 call    _errno
.text:00410511                 mov     dword ptr [eax], 2
.text:00410517                 jmp     loc_410453
.text:0041051C ; ---------------------------------------------------------------------------
.text:0041051C
.text:0041051C loc_41051C:                             ; CODE XREF: sub_410390+120↑j
.text:0041051C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410523                 call    getenv
.text:00410528                 mov     esi, eax
.text:0041052A                 jmp     loc_4103E4
.text:0041052A ; ---------------------------------------------------------------------------
.text:0041052F                 align 10h
.text:00410530
.text:00410530 loc_410530:                             ; CODE XREF: sub_410390+46↑j
.text:00410530                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00410537                 call    sub_410C20
.text:0041053C                 test    eax, eax
.text:0041053E                 mov     ebx, eax
.text:00410540                 jz      short loc_4105C0
.text:00410542
.text:00410542 loc_410542:                             ; CODE XREF: sub_410390+240↓j
.text:00410542                                         ; sub_410390+256↓j
.text:00410542                 mov     [esp+1BCh+Format], ebx ; char *
.text:00410546                 lea     edi, [esp+1BCh+var_7C]
.text:0041054D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00410551                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410558                 call    sub_410C90
.text:0041055D                 test    eax, eax
.text:0041055F                 jnz     short loc_410576
.text:00410561                 mov     edx, [esp+1BCh+var_7C]
.text:00410568                 and     edx, 0F000h
.text:0041056E                 cmp     edx, 4000h
.text:00410574                 jz      short loc_4105B9
.text:00410576
.text:00410576 loc_410576:                             ; CODE XREF: sub_410390+1CF↑j
.text:00410576                                         ; sub_410390+25C↓j
.text:00410576                 test    esi, esi
.text:00410578                 jz      short loc_4105B2
.text:0041057A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041057E                 lea     ecx, [esp+1BCh+var_DC]
.text:00410585                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00410589                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410590                 call    sub_410C90
.text:00410595                 test    eax, eax
.text:00410597                 jnz     short loc_4105B2
.text:00410599                 mov     ebx, [esp+1BCh+var_DC]
.text:004105A0                 and     ebx, 0F000h
.text:004105A6                 cmp     ebx, 4000h
.text:004105AC                 jz      loc_4103DC
.text:004105B2
.text:004105B2 loc_4105B2:                             ; CODE XREF: sub_410390+1E8↑j
.text:004105B2                                         ; sub_410390+207↑j
.text:004105B2                 xor     esi, esi
.text:004105B4                 jmp     loc_4103DC
.text:004105B9 ; ---------------------------------------------------------------------------
.text:004105B9
.text:004105B9 loc_4105B9:                             ; CODE XREF: sub_410390+1E4↑j
.text:004105B9                 mov     esi, ebx
.text:004105BB                 jmp     loc_4103DC
.text:004105C0 ; ---------------------------------------------------------------------------
.text:004105C0
.text:004105C0 loc_4105C0:                             ; CODE XREF: sub_410390+1B0↑j
.text:004105C0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:004105C7                 call    sub_410C20
.text:004105CC                 test    eax, eax
.text:004105CE                 mov     ebx, eax
.text:004105D0                 jnz     loc_410542
.text:004105D6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004105DD                 call    sub_410C20
.text:004105E2                 test    eax, eax
.text:004105E4                 mov     ebx, eax
.text:004105E6                 jnz     loc_410542
.text:004105EC                 jmp     short loc_410576
.text:004105EC ; ---------------------------------------------------------------------------
.text:004105EE                 align 10h
.text:004105F0
.text:004105F0 loc_4105F0:                             ; CODE XREF: sub_410390+26↑j
.text:004105F0                 mov     ecx, [esp+1BCh+arg_C]
.text:004105F7                 mov     [esp+1BCh+Str], ecx ; Str
.text:004105FA                 call    strlen
.text:004105FF                 cmp     eax, 5
.text:00410602                 mov     ebp, eax
.text:00410604                 jbe     loc_4103CD
.text:0041060A                 mov     ebp, 5
.text:0041060F                 jmp     loc_4103CD
.text:0041060F sub_410390      endp
.text:0041060F
.text:0041060F ; ---------------------------------------------------------------------------
.text:00410614                 align 10h
.text:00410620 byte_410620     db 61h                  ; DATA XREF: sub_410710+DC↓r
.text:00410620                                         ; sub_410710+122↓r ...
.text:00410621 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041065F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_410710+39↓o
.text:00410666                 align 20h
.text:00410680 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00410680                                         ; DATA XREF: sub_410710:loc_410988↓o
.text:0041069F                 align 10h
.text:004106A0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:004106A0                                         ; DATA XREF: sub_410710+405↓o
.text:004106CB                 align 20h
.text:004106E0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:004106E0                                         ; DATA XREF: sub_410710+40D↓o
.text:00410703                 align 10h
.text:00410710
.text:00410710 ; =============== S U B R O U T I N E =======================================
.text:00410710
.text:00410710
.text:00410710 ; int __cdecl sub_410710(char *FileName, int)
.text:00410710 sub_410710      proc near               ; CODE XREF: sub_4102C0+51↑p
.text:00410710
.text:00410710 Str             = dword ptr -9Ch
.text:00410710 OpenFlag        = dword ptr -98h
.text:00410710 var_94          = dword ptr -94h
.text:00410710 var_90          = dword ptr -90h
.text:00410710 var_8C          = dword ptr -8Ch
.text:00410710 var_88          = dword ptr -88h
.text:00410710 var_84          = dword ptr -84h
.text:00410710 var_80          = dword ptr -80h
.text:00410710 var_7C          = dword ptr -7Ch
.text:00410710 FileName        = dword ptr  4
.text:00410710 arg_4           = dword ptr  8
.text:00410710
.text:00410710                 push    ebp
.text:00410711                 push    edi
.text:00410712                 push    esi
.text:00410713                 push    ebx
.text:00410714                 sub     esp, 8Ch
.text:0041071A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00410722                 call    _errno
.text:00410727                 mov     edx, [eax]
.text:00410729                 mov     [esp+9Ch+var_8C], edx
.text:0041072D                 mov     edx, [esp+9Ch+FileName]
.text:00410734                 mov     [esp+9Ch+Str], edx ; Str
.text:00410737                 call    strlen
.text:0041073C                 cmp     eax, 5
.text:0041073F                 jle     short loc_41075D
.text:00410741                 cld
.text:00410742                 mov     ecx, [esp+9Ch+FileName]
.text:00410749                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041074E                 lea     esi, [eax+ecx-6]
.text:00410752                 mov     ecx, 7
.text:00410757                 mov     ebp, esi
.text:00410759                 repe cmpsb
.text:0041075B                 jz      short loc_410778
.text:0041075D
.text:0041075D loc_41075D:                             ; CODE XREF: sub_410710+2F↑j
.text:0041075D                 call    _errno
.text:00410762                 mov     dword ptr [eax], 16h
.text:00410768
.text:00410768 loc_410768:                             ; CODE XREF: sub_410710+295↓j
.text:00410768                                         ; sub_410710+2D8↓j ...
.text:00410768                 mov     eax, 0FFFFFFFFh
.text:0041076D
.text:0041076D loc_41076D:                             ; CODE XREF: sub_410710+2EF↓j
.text:0041076D                                         ; sub_410710+332↓j
.text:0041076D                 add     esp, 8Ch
.text:00410773                 pop     ebx
.text:00410774                 pop     esi
.text:00410775                 pop     edi
.text:00410776                 pop     ebp
.text:00410777                 retn
.text:00410778 ; ---------------------------------------------------------------------------
.text:00410778
.text:00410778 loc_410778:                             ; CODE XREF: sub_410710+4B↑j
.text:00410778                 mov     ecx, ds:dword_415654
.text:0041077E                 mov     edi, ds:dword_415650
.text:00410784                 mov     eax, ecx
.text:00410786                 or      eax, edi
.text:00410788                 jz      loc_410AC3
.text:0041078E
.text:0041078E loc_41078E:                             ; CODE XREF: sub_410710+3F8↓j
.text:0041078E                 rdtsc
.text:00410790                 mov     edi, edx
.text:00410792                 mov     esi, eax
.text:00410794                 call    _getpid
.text:00410799                 mov     ebx, eax
.text:0041079B                 mov     edx, esi
.text:0041079D                 sar     ebx, 1Fh
.text:004107A0                 xor     edx, eax
.text:004107A2                 mov     ecx, edi
.text:004107A4                 xor     ecx, ebx
.text:004107A6                 mov     ebx, edx
.text:004107A8                 mov     esi, ecx
.text:004107AA                 add     ebx, ds:dword_415650
.text:004107B0                 adc     esi, ds:dword_415654
.text:004107B6                 xor     edi, edi
.text:004107B8                 mov     ds:dword_415650, ebx
.text:004107BE                 mov     ds:dword_415654, esi
.text:004107C4                 lea     esi, [esi+0]
.text:004107CA                 lea     edi, [edi+0]
.text:004107D0
.text:004107D0 loc_4107D0:                             ; CODE XREF: sub_410710+2C7↓j
.text:004107D0                 mov     [esp+9Ch+Str], ebx
.text:004107D3                 mov     [esp+9Ch+OpenFlag], esi
.text:004107D7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004107DF                 mov     [esp+9Ch+var_90], 0
.text:004107E7                 call    sub_412750
.text:004107EC                 movzx   ecx, ds:byte_410620[eax]
.text:004107F3                 mov     [ebp+0], cl
.text:004107F6                 mov     [esp+9Ch+Str], ebx
.text:004107F9                 mov     [esp+9Ch+OpenFlag], esi
.text:004107FD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410805                 mov     [esp+9Ch+var_90], 0
.text:0041080D                 call    sub_4128D0
.text:00410812                 mov     [esp+9Ch+Str], eax
.text:00410815                 mov     ebx, eax
.text:00410817                 mov     esi, edx
.text:00410819                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410821                 mov     [esp+9Ch+var_90], 0
.text:00410829                 mov     [esp+9Ch+OpenFlag], edx
.text:0041082D                 call    sub_412750
.text:00410832                 movzx   edx, ds:byte_410620[eax]
.text:00410839                 mov     [ebp+1], dl
.text:0041083C                 mov     [esp+9Ch+Str], ebx
.text:0041083F                 mov     [esp+9Ch+OpenFlag], esi
.text:00410843                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041084B                 mov     [esp+9Ch+var_90], 0
.text:00410853                 call    sub_4128D0
.text:00410858                 mov     [esp+9Ch+Str], eax
.text:0041085B                 mov     ebx, eax
.text:0041085D                 mov     esi, edx
.text:0041085F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410867                 mov     [esp+9Ch+var_90], 0
.text:0041086F                 mov     [esp+9Ch+OpenFlag], edx
.text:00410873                 call    sub_412750
.text:00410878                 movzx   ecx, ds:byte_410620[eax]
.text:0041087F                 mov     [ebp+2], cl
.text:00410882                 mov     [esp+9Ch+Str], ebx
.text:00410885                 mov     [esp+9Ch+OpenFlag], esi
.text:00410889                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410891                 mov     [esp+9Ch+var_90], 0
.text:00410899                 call    sub_4128D0
.text:0041089E                 mov     [esp+9Ch+Str], eax
.text:004108A1                 mov     ebx, eax
.text:004108A3                 mov     esi, edx
.text:004108A5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004108AD                 mov     [esp+9Ch+var_90], 0
.text:004108B5                 mov     [esp+9Ch+OpenFlag], edx
.text:004108B9                 call    sub_412750
.text:004108BE                 movzx   edx, ds:byte_410620[eax]
.text:004108C5                 mov     [ebp+3], dl
.text:004108C8                 mov     [esp+9Ch+Str], ebx
.text:004108CB                 mov     [esp+9Ch+OpenFlag], esi
.text:004108CF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004108D7                 mov     [esp+9Ch+var_90], 0
.text:004108DF                 call    sub_4128D0
.text:004108E4                 mov     [esp+9Ch+Str], eax
.text:004108E7                 mov     ebx, eax
.text:004108E9                 mov     esi, edx
.text:004108EB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004108F3                 mov     [esp+9Ch+var_90], 0
.text:004108FB                 mov     [esp+9Ch+OpenFlag], edx
.text:004108FF                 call    sub_412750
.text:00410904                 movzx   ecx, ds:byte_410620[eax]
.text:0041090B                 mov     [ebp+4], cl
.text:0041090E                 mov     [esp+9Ch+Str], ebx
.text:00410911                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410919                 mov     [esp+9Ch+var_90], 0
.text:00410921                 mov     [esp+9Ch+OpenFlag], esi
.text:00410925                 call    sub_4128D0
.text:0041092A                 mov     [esp+9Ch+Str], eax
.text:0041092D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410935                 mov     [esp+9Ch+var_90], 0
.text:0041093D                 mov     [esp+9Ch+OpenFlag], edx
.text:00410941                 call    sub_412750
.text:00410946                 movzx   ebx, ds:byte_410620[eax]
.text:0041094D                 mov     [ebp+5], bl
.text:00410950                 cmp     [esp+9Ch+arg_4], 1
.text:00410958                 jz      loc_410AA7
.text:0041095E                 cmp     [esp+9Ch+arg_4], 1
.text:00410966                 jle     loc_410A70
.text:0041096C                 cmp     [esp+9Ch+arg_4], 2
.text:00410974                 jz      loc_410A47
.text:0041097A                 cmp     [esp+9Ch+arg_4], 3
.text:00410982                 jz      loc_410A04
.text:00410988
.text:00410988 loc_410988:                             ; CODE XREF: sub_410710+369↓j
.text:00410988                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041098D                 test    ebx, ebx
.text:0041098F                 jnz     loc_410B0D
.text:00410995
.text:00410995 loc_410995:                             ; CODE XREF: sub_410710+354↓j
.text:00410995                 mov     eax, [esp+9Ch+var_88]
.text:00410999                 test    eax, eax
.text:0041099B                 jns     short loc_4109F0
.text:0041099D                 call    _errno
.text:004109A2                 cmp     dword ptr [eax], 11h
.text:004109A5                 jnz     loc_410768
.text:004109AB
.text:004109AB loc_4109AB:                             ; CODE XREF: sub_410710+315↓j
.text:004109AB                 mov     edx, ds:dword_415650
.text:004109B1                 mov     ecx, ds:dword_415654
.text:004109B7                 add     edx, 1E61h
.text:004109BD                 adc     ecx, 0
.text:004109C0                 mov     ebx, edx
.text:004109C2                 inc     edi
.text:004109C3                 mov     ds:dword_415650, edx
.text:004109C9                 cmp     edi, 3A2F8h
.text:004109CF                 mov     esi, ecx
.text:004109D1                 mov     ds:dword_415654, ecx
.text:004109D7                 jb      loc_4107D0
.text:004109DD                 call    _errno
.text:004109E2                 mov     dword ptr [eax], 11h
.text:004109E8                 jmp     loc_410768
.text:004109E8 ; ---------------------------------------------------------------------------
.text:004109ED                 align 10h
.text:004109F0
.text:004109F0 loc_4109F0:                             ; CODE XREF: sub_410710+28B↑j
.text:004109F0                 call    _errno
.text:004109F5                 mov     esi, [esp+9Ch+var_8C]
.text:004109F9                 mov     [eax], esi
.text:004109FB                 mov     eax, [esp+9Ch+var_88]
.text:004109FF                 jmp     loc_41076D
.text:00410A04 ; ---------------------------------------------------------------------------
.text:00410A04
.text:00410A04 loc_410A04:                             ; CODE XREF: sub_410710+272↑j
.text:00410A04                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:00410A0B                 mov     ecx, [esp+9Ch+FileName]
.text:00410A12                 lea     esi, [esp+9Ch+var_7C]
.text:00410A16                 mov     [esp+9Ch+var_94], esi ; int
.text:00410A1A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:00410A1E                 call    sub_410C40
.text:00410A23                 test    eax, eax
.text:00410A25                 jns     short loc_4109AB
.text:00410A27                 call    _errno
.text:00410A2C                 cmp     dword ptr [eax], 2
.text:00410A2F                 jnz     loc_410768
.text:00410A35                 call    _errno
.text:00410A3A                 mov     ebx, [esp+9Ch+var_8C]
.text:00410A3E                 mov     [eax], ebx
.text:00410A40                 xor     eax, eax
.text:00410A42                 jmp     loc_41076D
.text:00410A47 ; ---------------------------------------------------------------------------
.text:00410A47
.text:00410A47 loc_410A47:                             ; CODE XREF: sub_410710+264↑j
.text:00410A47                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:00410A4F                 mov     edx, [esp+9Ch+FileName]
.text:00410A56                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00410A59                 call    sub_410B40
.text:00410A5E                 mov     esi, esi
.text:00410A60
.text:00410A60 loc_410A60:                             ; CODE XREF: sub_410710+395↓j
.text:00410A60                 mov     [esp+9Ch+var_88], eax
.text:00410A64                 jmp     loc_410995
.text:00410A64 ; ---------------------------------------------------------------------------
.text:00410A69                 align 10h
.text:00410A70
.text:00410A70 loc_410A70:                             ; CODE XREF: sub_410710+256↑j
.text:00410A70                 mov     eax, [esp+9Ch+arg_4]
.text:00410A77                 test    eax, eax
.text:00410A79                 jnz     loc_410988
.text:00410A7F                 mov     [esp+9Ch+var_94], 180h
.text:00410A87                 mov     esi, [esp+9Ch+FileName]
.text:00410A8E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00410A96                 mov     [esp+9Ch+Str], esi ; FileName
.text:00410A99                 lea     esi, [esi+0]
.text:00410AA0
.text:00410AA0 loc_410AA0:                             ; CODE XREF: sub_410710+3B1↓j
.text:00410AA0                 call    _open
.text:00410AA5                 jmp     short loc_410A60
.text:00410AA7 ; ---------------------------------------------------------------------------
.text:00410AA7
.text:00410AA7 loc_410AA7:                             ; CODE XREF: sub_410710+248↑j
.text:00410AA7                 mov     [esp+9Ch+var_94], 180h
.text:00410AAF                 mov     ebx, [esp+9Ch+FileName]
.text:00410AB6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:00410ABE                 mov     [esp+9Ch+Str], ebx
.text:00410AC1                 jmp     short loc_410AA0
.text:00410AC3 ; ---------------------------------------------------------------------------
.text:00410AC3
.text:00410AC3 loc_410AC3:                             ; CODE XREF: sub_410710+78↑j
.text:00410AC3                 mov     [esp+9Ch+OpenFlag], 0
.text:00410ACB                 lea     ebx, [esp+9Ch+var_84]
.text:00410ACF                 mov     [esp+9Ch+Str], ebx
.text:00410AD2                 call    sub_410BC0
.text:00410AD7                 mov     edi, [esp+9Ch+var_80]
.text:00410ADB                 mov     edx, [esp+9Ch+var_84]
.text:00410ADF                 mov     ecx, edi
.text:00410AE1                 mov     ebx, edi
.text:00410AE3                 shl     ecx, 10h
.text:00410AE6                 sar     ebx, 1Fh
.text:00410AE9                 shld    ebx, edi, 10h
.text:00410AED                 mov     esi, edx
.text:00410AEF                 mov     edi, edx
.text:00410AF1                 mov     edx, ecx
.text:00410AF3                 sar     edi, 1Fh
.text:00410AF6                 xor     edx, esi
.text:00410AF8                 mov     ds:dword_415650, edx
.text:00410AFE                 mov     esi, ebx
.text:00410B00                 xor     esi, edi
.text:00410B02                 mov     ds:dword_415654, esi
.text:00410B08                 jmp     loc_41078E
.text:00410B0D ; ---------------------------------------------------------------------------
.text:00410B0D
.text:00410B0D loc_410B0D:                             ; CODE XREF: sub_410710+27F↑j
.text:00410B0D                 mov     [esp+9Ch+var_94], 151h
.text:00410B15                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:00410B1D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00410B24                 call    _assert
.text:00410B24 sub_410710      endp
.text:00410B24
.text:00410B24 ; ---------------------------------------------------------------------------
.text:00410B29                 align 20h
.text:00410B40
.text:00410B40 ; =============== S U B R O U T I N E =======================================
.text:00410B40
.text:00410B40
.text:00410B40 ; int __cdecl sub_410B40(LPCSTR, int AccessMode)
.text:00410B40 sub_410B40      proc near               ; CODE XREF: sub_410710+349↑p
.text:00410B40
.text:00410B40 lpPathName      = dword ptr -1Ch
.text:00410B40 lpSecurityAttributes= dword ptr -18h
.text:00410B40 var_8           = dword ptr -8
.text:00410B40 var_4           = dword ptr -4
.text:00410B40 arg_0           = dword ptr  4
.text:00410B40 AccessMode      = dword ptr  8
.text:00410B40
.text:00410B40                 sub     esp, 1Ch
.text:00410B43                 mov     [esp+1Ch+var_8], ebx
.text:00410B47                 mov     ebx, [esp+1Ch+arg_0]
.text:00410B4B                 mov     [esp+1Ch+var_4], esi
.text:00410B4F                 mov     esi, [esp+1Ch+AccessMode]
.text:00410B53                 test    ebx, ebx
.text:00410B55                 jz      short loc_410BA5
.text:00410B57                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00410B5F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00410B62                 call    CreateDirectoryA
.text:00410B67                 sub     esp, 8
.text:00410B6A                 test    eax, eax
.text:00410B6C                 jz      short loc_410B86
.text:00410B6E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00410B72                 mov     esi, [esp+1Ch+var_4]
.text:00410B76                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:00410B7A                 mov     ebx, [esp+1Ch+var_8]
.text:00410B7E                 add     esp, 1Ch
.text:00410B81                 jmp     _chmod
.text:00410B86 ; ---------------------------------------------------------------------------
.text:00410B86
.text:00410B86 loc_410B86:                             ; CODE XREF: sub_410B40+2C↑j
.text:00410B86                 call    sub_40E710
.text:00410B8B                 mov     esi, eax
.text:00410B8D                 call    _errno
.text:00410B92                 mov     [eax], esi
.text:00410B94
.text:00410B94 loc_410B94:                             ; CODE XREF: sub_410B40+70↓j
.text:00410B94                 mov     ebx, [esp+1Ch+var_8]
.text:00410B98                 mov     eax, 0FFFFFFFFh
.text:00410B9D                 mov     esi, [esp+1Ch+var_4]
.text:00410BA1                 add     esp, 1Ch
.text:00410BA4                 retn
.text:00410BA5 ; ---------------------------------------------------------------------------
.text:00410BA5
.text:00410BA5 loc_410BA5:                             ; CODE XREF: sub_410B40+15↑j
.text:00410BA5                 call    _errno
.text:00410BAA                 mov     dword ptr [eax], 16h
.text:00410BB0                 jmp     short loc_410B94
.text:00410BB0 sub_410B40      endp
.text:00410BB0
.text:00410BB0 ; ---------------------------------------------------------------------------
.text:00410BB2                 align 10h
.text:00410BC0
.text:00410BC0 ; =============== S U B R O U T I N E =======================================
.text:00410BC0
.text:00410BC0
.text:00410BC0 sub_410BC0      proc near               ; CODE XREF: sub_410710+3C2↑p
.text:00410BC0
.text:00410BC0 var_1C          = dword ptr -1Ch
.text:00410BC0 var_18          = dword ptr -18h
.text:00410BC0 var_C           = dword ptr -0Ch
.text:00410BC0 var_8           = dword ptr -8
.text:00410BC0 var_4           = dword ptr -4
.text:00410BC0 arg_0           = dword ptr  4
.text:00410BC0 arg_4           = dword ptr  8
.text:00410BC0
.text:00410BC0                 sub     esp, 1Ch
.text:00410BC3                 mov     edx, [esp+1Ch+arg_4]
.text:00410BC7                 mov     [esp+1Ch+var_4], ebx
.text:00410BCB                 mov     ebx, [esp+1Ch+arg_0]
.text:00410BCF                 mov     [esp+1Ch+var_18], edx
.text:00410BD3                 lea     edx, [esp+1Ch+var_C]
.text:00410BD7                 mov     [esp+1Ch+var_1C], edx
.text:00410BDA                 call    sub_410D50
.text:00410BDF                 test    eax, eax
.text:00410BE1                 mov     edx, 0FFFFFFFFh
.text:00410BE6                 jnz     short loc_410C0A
.text:00410BE8                 mov     ecx, [esp+1Ch+var_C]
.text:00410BEC                 mov     edx, 10624DD3h
.text:00410BF1                 mov     [ebx], ecx
.text:00410BF3                 mov     ecx, [esp+1Ch+var_8]
.text:00410BF7                 mov     eax, ecx
.text:00410BF9                 imul    edx
.text:00410BFB                 mov     eax, ecx
.text:00410BFD                 sar     eax, 1Fh
.text:00410C00                 sar     edx, 6
.text:00410C03                 sub     edx, eax
.text:00410C05                 mov     [ebx+4], edx
.text:00410C08                 xor     edx, edx
.text:00410C0A
.text:00410C0A loc_410C0A:                             ; CODE XREF: sub_410BC0+26↑j
.text:00410C0A                 mov     ebx, [esp+1Ch+var_4]
.text:00410C0E                 mov     eax, edx
.text:00410C10                 add     esp, 1Ch
.text:00410C13                 retn
.text:00410C13 sub_410BC0      endp
.text:00410C13
.text:00410C13 ; ---------------------------------------------------------------------------
.text:00410C14                 align 10h
.text:00410C20
.text:00410C20 ; =============== S U B R O U T I N E =======================================
.text:00410C20
.text:00410C20
.text:00410C20 sub_410C20      proc near               ; CODE XREF: sub_410390+1A7↑p
.text:00410C20                                         ; sub_410390+237↑p ...
.text:00410C20                 mov     edx, ds:dword_415660
.text:00410C26                 test    edx, edx
.text:00410C28                 jnz     short loc_410C30
.text:00410C2A                 jmp     getenv
.text:00410C2A ; ---------------------------------------------------------------------------
.text:00410C2F                 align 10h
.text:00410C30
.text:00410C30 loc_410C30:                             ; CODE XREF: sub_410C20+8↑j
.text:00410C30                 xor     eax, eax
.text:00410C32                 retn
.text:00410C32 sub_410C20      endp
.text:00410C32
.text:00410C32 ; ---------------------------------------------------------------------------
.text:00410C33                 align 10h
.text:00410C40
.text:00410C40 ; =============== S U B R O U T I N E =======================================
.text:00410C40
.text:00410C40
.text:00410C40 ; int __cdecl sub_410C40(LPCSTR, int, int)
.text:00410C40 sub_410C40      proc near               ; CODE XREF: sub_410710+30E↑p
.text:00410C40                                         ; sub_410C90+42↓p ...
.text:00410C40
.text:00410C40 lpFileName      = dword ptr -2Ch
.text:00410C40 dwDesiredAccess = dword ptr -28h
.text:00410C40 dwShareMode     = dword ptr -24h
.text:00410C40 lpSecurityAttributes= dword ptr -20h
.text:00410C40 dwCreationDisposition= dword ptr -1Ch
.text:00410C40 dwFlagsAndAttributes= dword ptr -18h
.text:00410C40 hTemplateFile   = dword ptr -14h
.text:00410C40 var_10          = dword ptr -10h
.text:00410C40 var_C           = dword ptr -0Ch
.text:00410C40 var_8           = dword ptr -8
.text:00410C40 var_4           = dword ptr -4
.text:00410C40 arg_0           = dword ptr  4
.text:00410C40 arg_4           = dword ptr  8
.text:00410C40 arg_8           = dword ptr  0Ch
.text:00410C40
.text:00410C40 ; FUNCTION CHUNK AT .text:0040CD70 SIZE 0000013A BYTES
.text:00410C40
.text:00410C40                 sub     esp, 0Ch
.text:00410C43                 mov     ecx, [esp+0Ch+arg_0]
.text:00410C47                 mov     edx, [esp+0Ch+arg_4]
.text:00410C4B                 mov     eax, [esp+0Ch+arg_8]
.text:00410C4F                 test    ecx, ecx
.text:00410C51                 jnz     short loc_410C70
.text:00410C53                 test    edx, edx
.text:00410C55                 jz      short loc_410C70
.text:00410C57                 test    eax, eax
.text:00410C59                 jz      short loc_410C70
.text:00410C5B                 mov     [esp+0Ch+arg_4], eax
.text:00410C5F                 mov     [esp+0Ch+arg_0], edx
.text:00410C63                 add     esp, 0Ch
.text:00410C66                 jmp     loc_40CD70
.text:00410C66 ; ---------------------------------------------------------------------------
.text:00410C6B                 align 10h
.text:00410C70
.text:00410C70 loc_410C70:                             ; CODE XREF: sub_410C40+11↑j
.text:00410C70                                         ; sub_410C40+15↑j ...
.text:00410C70                 call    _errno
.text:00410C75                 mov     dword ptr [eax], 16h
.text:00410C7B                 mov     eax, 0FFFFFFFFh
.text:00410C80                 add     esp, 0Ch
.text:00410C83                 retn
.text:00410C83 sub_410C40      endp
.text:00410C83
.text:00410C83 ; ---------------------------------------------------------------------------
.text:00410C84                 align 10h
.text:00410C90
.text:00410C90 ; =============== S U B R O U T I N E =======================================
.text:00410C90
.text:00410C90
.text:00410C90 ; int __cdecl sub_410C90(LPCSTR, char *, int)
.text:00410C90 sub_410C90      proc near               ; CODE XREF: sub_410390+104↑p
.text:00410C90                                         ; sub_410390+158↑p ...
.text:00410C90
.text:00410C90 var_13C         = dword ptr -13Ch
.text:00410C90 lpString1       = dword ptr -138h
.text:00410C90 var_134         = dword ptr -134h
.text:00410C90 String1         = byte ptr -12Ch
.text:00410C90 var_10          = dword ptr -10h
.text:00410C90 var_C           = dword ptr -0Ch
.text:00410C90 var_8           = dword ptr -8
.text:00410C90 var_4           = dword ptr -4
.text:00410C90 arg_0           = dword ptr  4
.text:00410C90 arg_4           = dword ptr  8
.text:00410C90 arg_8           = dword ptr  0Ch
.text:00410C90
.text:00410C90                 sub     esp, 13Ch
.text:00410C96                 mov     [esp+13Ch+var_10], ebx
.text:00410C9D                 mov     ebx, [esp+13Ch+arg_8]
.text:00410CA4                 mov     [esp+13Ch+var_C], esi
.text:00410CAB                 mov     esi, [esp+13Ch+arg_4]
.text:00410CB2                 mov     [esp+13Ch+var_8], edi
.text:00410CB9                 mov     edi, [esp+13Ch+arg_0]
.text:00410CC0                 mov     [esp+13Ch+var_4], ebp
.text:00410CC7                 mov     [esp+13Ch+var_134], ebx ; int
.text:00410CCB                 mov     [esp+13Ch+lpString1], esi ; int
.text:00410CCF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00410CD2                 call    sub_410C40
.text:00410CD7                 cmp     eax, 0FFFFFFFFh
.text:00410CDA                 mov     edx, eax
.text:00410CDC                 jz      short loc_410CEE
.text:00410CDE                 mov     ecx, [ebx]
.text:00410CE0                 and     ecx, 0F000h
.text:00410CE6                 cmp     ecx, 0A000h
.text:00410CEC                 jz      short loc_410D13
.text:00410CEE
.text:00410CEE loc_410CEE:                             ; CODE XREF: sub_410C90+4C↑j
.text:00410CEE                                         ; sub_410C90+A1↓j ...
.text:00410CEE                 mov     ebx, [esp+13Ch+var_10]
.text:00410CF5                 mov     eax, edx
.text:00410CF7                 mov     esi, [esp+13Ch+var_C]
.text:00410CFE                 mov     edi, [esp+13Ch+var_8]
.text:00410D05                 mov     ebp, [esp+13Ch+var_4]
.text:00410D0C                 add     esp, 13Ch
.text:00410D12                 retn
.text:00410D13 ; ---------------------------------------------------------------------------
.text:00410D13
.text:00410D13 loc_410D13:                             ; CODE XREF: sub_410C90+5C↑j
.text:00410D13                 mov     [esp+13Ch+var_134], 104h
.text:00410D1B                 lea     ebp, [esp+13Ch+String1]
.text:00410D1F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00410D23                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00410D26                 call    sub_411010
.text:00410D2B                 inc     eax
.text:00410D2C                 mov     edx, 0FFFFFFFFh
.text:00410D31                 jz      short loc_410CEE
.text:00410D33                 mov     [esp+13Ch+var_134], ebx ; int
.text:00410D37                 mov     [esp+13Ch+lpString1], ebp ; int
.text:00410D3B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00410D3E                 call    sub_410C40
.text:00410D43                 mov     edx, eax
.text:00410D45                 jmp     short loc_410CEE
.text:00410D45 sub_410C90      endp
.text:00410D45
.text:00410D45 ; ---------------------------------------------------------------------------
.text:00410D47                 align 10h
.text:00410D50
.text:00410D50 ; =============== S U B R O U T I N E =======================================
.text:00410D50
.text:00410D50
.text:00410D50 sub_410D50      proc near               ; CODE XREF: sub_410BC0+1A↑p
.text:00410D50
.text:00410D50 lpTimeZoneInformation= dword ptr -0DCh
.text:00410D50 var_D8          = dword ptr -0D8h
.text:00410D50 var_D4          = dword ptr -0D4h
.text:00410D50 var_D0          = dword ptr -0D0h
.text:00410D50 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00410D50 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00410D50 arg_0           = dword ptr  4
.text:00410D50 arg_4           = dword ptr  8
.text:00410D50
.text:00410D50                 push    edi
.text:00410D51                 push    esi
.text:00410D52                 push    ebx
.text:00410D53                 sub     esp, 0D0h
.text:00410D59                 mov     ebx, [esp+0DCh+arg_4]
.text:00410D60                 mov     edi, [esp+0DCh+arg_0]
.text:00410D67                 test    ebx, ebx
.text:00410D69                 jz      short loc_410D94
.text:00410D6B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:00410D6F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00410D72                 call    GetTimeZoneInformation
.text:00410D77                 sub     esp, 4
.text:00410D7A                 cmp     eax, 0FFFFFFFFh
.text:00410D7D                 jz      loc_410E15
.text:00410D83                 xor     ecx, ecx
.text:00410D85                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00410D89                 cmp     eax, 2
.text:00410D8C                 setz    cl
.text:00410D8F                 mov     [ebx], esi
.text:00410D91                 mov     [ebx+4], ecx
.text:00410D94
.text:00410D94 loc_410D94:                             ; CODE XREF: sub_410D50+19↑j
.text:00410D94                                         ; sub_410D50+E0↓j
.text:00410D94                 test    edi, edi
.text:00410D96                 jz      short loc_410E09
.text:00410D98                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:00410D9C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:00410D9F                 call    GetSystemTimeAsFileTime
.text:00410DA4                 sub     esp, 4
.text:00410DA7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:00410DAB                 mov     [esp+0DCh+var_D4], 989680h
.text:00410DB3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00410DB7                 mov     [esp+0DCh+var_D0], 0
.text:00410DBF                 add     ebx, 2AC18000h
.text:00410DC5                 adc     esi, 0FE624E21h
.text:00410DCB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:00410DCF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410DD2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00410DD6                 mov     [esp+0DCh+var_D8], esi
.text:00410DDA                 call    sub_4128D0
.text:00410DDF                 mov     [edi], eax
.text:00410DE1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410DE4                 mov     [esp+0DCh+var_D4], 989680h
.text:00410DEC                 mov     [esp+0DCh+var_D0], 0
.text:00410DF4                 mov     [esp+0DCh+var_D8], esi
.text:00410DF8                 call    sub_412750
.text:00410DFD                 lea     ebx, [eax+eax*4]
.text:00410E00                 lea     edx, [ebx+ebx*4]
.text:00410E03                 shl     edx, 2
.text:00410E06                 mov     [edi+4], edx
.text:00410E09
.text:00410E09 loc_410E09:                             ; CODE XREF: sub_410D50+46↑j
.text:00410E09                 add     esp, 0D0h
.text:00410E0F                 xor     eax, eax
.text:00410E11                 pop     ebx
.text:00410E12                 pop     esi
.text:00410E13                 pop     edi
.text:00410E14                 retn
.text:00410E15 ; ---------------------------------------------------------------------------
.text:00410E15
.text:00410E15 loc_410E15:                             ; CODE XREF: sub_410D50+2D↑j
.text:00410E15                 mov     dword ptr [ebx], 0
.text:00410E1B                 mov     dword ptr [ebx+4], 0
.text:00410E22                 call    sub_40E710
.text:00410E27                 mov     esi, eax
.text:00410E29                 call    _errno
.text:00410E2E                 mov     [eax], esi
.text:00410E30                 jmp     loc_410D94
.text:00410E30 sub_410D50      endp
.text:00410E30
.text:00410E30 ; ---------------------------------------------------------------------------
.text:00410E35                 align 10h
.text:00410E40                 sub     esp, 0Ch
.text:00410E43                 mov     [esp+4], ebx
.text:00410E47                 mov     [esp+8], esi
.text:00410E4B                 xor     esi, esi
.text:00410E4D                 call    sub_411120
.text:00410E52                 mov     ebx, eax
.text:00410E54                 call    sub_411110
.text:00410E59                 cmp     ebx, eax
.text:00410E5B                 jz      short loc_410E74
.text:00410E5D
.text:00410E5D loc_410E5D:                             ; CODE XREF: .text:00410E82↓j
.text:00410E5D                 mov     esi, 1
.text:00410E62
.text:00410E62 loc_410E62:                             ; CODE XREF: .text:00410E84↓j
.text:00410E62                 mov     ds:dword_415660, esi
.text:00410E68                 mov     ebx, [esp+4]
.text:00410E6C                 mov     esi, [esp+8]
.text:00410E70                 add     esp, 0Ch
.text:00410E73                 retn
.text:00410E74 ; ---------------------------------------------------------------------------
.text:00410E74
.text:00410E74 loc_410E74:                             ; CODE XREF: .text:00410E5B↑j
.text:00410E74                 call    sub_411100
.text:00410E79                 mov     ebx, eax
.text:00410E7B                 call    sub_4110F0
.text:00410E80                 cmp     ebx, eax
.text:00410E82                 jnz     short loc_410E5D
.text:00410E84                 jmp     short loc_410E62
.text:00410E84 ; ---------------------------------------------------------------------------
.text:00410E86                 align 10h
.text:00410E90
.text:00410E90 ; =============== S U B R O U T I N E =======================================
.text:00410E90
.text:00410E90
.text:00410E90 ; int __cdecl sub_410E90(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00410E90 sub_410E90      proc near               ; CODE XREF: sub_411010+93↓p
.text:00410E90
.text:00410E90 pvReserved      = dword ptr -35Ch
.text:00410E90 pUnkOuter       = dword ptr -358h
.text:00410E90 dwClsContext    = dword ptr -354h
.text:00410E90 riid            = dword ptr -350h
.text:00410E90 ppv             = dword ptr -34Ch
.text:00410E90 cchWideChar     = dword ptr -348h
.text:00410E90 var_334         = byte ptr -334h
.text:00410E90 var_330         = dword ptr -330h
.text:00410E90 String2         = byte ptr -32Ch
.text:00410E90 WideCharStr     = word ptr -21Ch
.text:00410E90 lpMultiByteStr  = dword ptr  4
.text:00410E90 lpString1       = dword ptr  8
.text:00410E90
.text:00410E90                 push    edi
.text:00410E91                 push    esi
.text:00410E92                 push    ebx
.text:00410E93                 sub     esp, 350h
.text:00410E99                 mov     edi, [esp+35Ch+lpString1]
.text:00410EA0                 mov     byte ptr [edi], 0
.text:00410EA3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00410EAA                 call    OleInitialize
.text:00410EAF                 sub     esp, 4
.text:00410EB2                 cmp     eax, 1
.text:00410EB5                 ja      loc_410FEF
.text:00410EBB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00410EC3                 lea     ecx, [esp+35Ch+var_330]
.text:00410EC7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00410ECB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00410ED3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00410EDB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00410EE2                 call    CoCreateInstance
.text:00410EE7                 sub     esp, 14h
.text:00410EEA                 test    eax, eax
.text:00410EEC                 js      loc_410FEF
.text:00410EF2                 mov     ebx, [esp+35Ch+var_330]
.text:00410EF6                 lea     edx, [esp+35Ch+var_334]
.text:00410EFA                 mov     esi, [ebx]
.text:00410EFC                 mov     [esp+35Ch+dwClsContext], edx
.text:00410F00                 mov     [esp+35Ch+pvReserved], ebx
.text:00410F03                 xor     ebx, ebx
.text:00410F05                 mov     [esp+35Ch+pUnkOuter], offset dword_411F00
.text:00410F0D                 call    dword ptr [esi]
.text:00410F0F                 sub     esp, 0Ch
.text:00410F12                 lea     esi, [esp+35Ch+WideCharStr]
.text:00410F19                 call    AreFileApisANSI
.text:00410F1E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00410F26                 test    eax, eax
.text:00410F28                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00410F2F                 setz    bl
.text:00410F32                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00410F36                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00410F3E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00410F42                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00410F4A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00410F4D                 call    MultiByteToWideChar
.text:00410F52                 sub     esp, 18h
.text:00410F55                 test    eax, eax
.text:00410F57                 js      loc_410FEF
.text:00410F5D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00410F61                 mov     ebx, [edx]
.text:00410F63                 mov     [esp+35Ch+dwClsContext], 0
.text:00410F6B                 mov     [esp+35Ch+pUnkOuter], esi
.text:00410F6F                 mov     [esp+35Ch+pvReserved], edx
.text:00410F72                 call    dword ptr [ebx+14h]
.text:00410F75                 sub     esp, 0Ch
.text:00410F78                 test    eax, eax
.text:00410F7A                 js      short loc_410FEF
.text:00410F7C                 mov     ebx, [esp+35Ch+var_330]
.text:00410F80                 lea     esi, [esp+35Ch+String2]
.text:00410F84                 mov     ecx, [ebx]
.text:00410F86                 mov     [esp+35Ch+pvReserved], ebx
.text:00410F89                 mov     [esp+35Ch+ppv], 0
.text:00410F91                 mov     [esp+35Ch+riid], 0
.text:00410F99                 mov     [esp+35Ch+dwClsContext], 104h
.text:00410FA1                 mov     [esp+35Ch+pUnkOuter], esi
.text:00410FA5                 call    dword ptr [ecx+0Ch]
.text:00410FA8                 sub     esp, 14h
.text:00410FAB                 mov     ebx, eax
.text:00410FAD                 test    eax, eax
.text:00410FAF                 js      short loc_410FEF
.text:00410FB1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00410FB5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00410FB8                 call    lstrcpyA
.text:00410FBD                 sub     esp, 8
.text:00410FC0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00410FC4                 mov     ecx, [edi]
.text:00410FC6                 mov     [esp+35Ch+pvReserved], edi
.text:00410FC9                 call    dword ptr [ecx+8]
.text:00410FCC                 sub     esp, 4
.text:00410FCF                 mov     edx, [esp+35Ch+var_330]
.text:00410FD3                 mov     esi, [edx]
.text:00410FD5                 mov     [esp+35Ch+pvReserved], edx
.text:00410FD8                 call    dword ptr [esi+8]
.text:00410FDB                 sub     esp, 4
.text:00410FDE                 call    CoUninitialize
.text:00410FE3                 mov     eax, ebx
.text:00410FE5
.text:00410FE5 loc_410FE5:                             ; CODE XREF: sub_410E90+177↓j
.text:00410FE5                 add     esp, 350h
.text:00410FEB                 pop     ebx
.text:00410FEC                 pop     esi
.text:00410FED                 pop     edi
.text:00410FEE                 retn
.text:00410FEF ; ---------------------------------------------------------------------------
.text:00410FEF
.text:00410FEF loc_410FEF:                             ; CODE XREF: sub_410E90+25↑j
.text:00410FEF                                         ; sub_410E90+5C↑j ...
.text:00410FEF                 call    sub_40E710
.text:00410FF4                 mov     edi, eax
.text:00410FF6                 call    _errno
.text:00410FFB                 mov     [eax], edi
.text:00410FFD                 call    CoUninitialize
.text:00411002                 mov     eax, 0FFFFFFFFh
.text:00411007                 jmp     short loc_410FE5
.text:00411007 sub_410E90      endp
.text:00411007
.text:00411007 ; ---------------------------------------------------------------------------
.text:00411009 ; const char Source[]
.text:00411009 Source          db '.lnk',0             ; DATA XREF: sub_411010+53↓o
.text:00411009                                         ; sub_411010:loc_411075↓o
.text:0041100E                 align 10h
.text:00411010
.text:00411010 ; =============== S U B R O U T I N E =======================================
.text:00411010
.text:00411010
.text:00411010 ; int __cdecl sub_411010(char *, LPSTR lpString1)
.text:00411010 sub_411010      proc near               ; CODE XREF: sub_410C90+96↑p
.text:00411010
.text:00411010 Str             = dword ptr -1Ch
.text:00411010 Source          = dword ptr -18h
.text:00411010 Destination     = dword ptr -14h
.text:00411010 arg_0           = dword ptr  4
.text:00411010 lpString1       = dword ptr  8
.text:00411010
.text:00411010                 push    ebp
.text:00411011                 push    edi
.text:00411012                 push    esi
.text:00411013                 push    ebx
.text:00411014                 sub     esp, 0Ch
.text:00411017                 mov     ebx, [esp+1Ch+arg_0]
.text:0041101B                 mov     ebp, [esp+1Ch+lpString1]
.text:0041101F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00411022                 call    strlen
.text:00411027                 add     eax, 5
.text:0041102A                 mov     [esp+1Ch+Str], eax ; Size
.text:0041102D                 call    malloc
.text:00411032                 mov     [esp+1Ch+Destination], eax
.text:00411036                 test    eax, eax
.text:00411038                 jz      loc_4110E0
.text:0041103E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00411042                 mov     [esp+1Ch+Str], eax ; Destination
.text:00411045                 call    strcpy
.text:0041104A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00411052                 mov     eax, [esp+1Ch+Destination]
.text:00411056                 mov     [esp+1Ch+Str], eax ; Str
.text:00411059                 call    strrchr
.text:0041105E                 test    eax, eax
.text:00411060                 jz      short loc_411075
.text:00411062                 cld
.text:00411063                 mov     ebx, offset Source ; ".lnk"
.text:00411068                 mov     ecx, 5
.text:0041106D                 mov     esi, eax
.text:0041106F                 mov     edi, ebx
.text:00411071                 repe cmpsb
.text:00411073                 jz      short loc_411089
.text:00411075
.text:00411075 loc_411075:                             ; CODE XREF: sub_411010+50↑j
.text:00411075                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:0041107D                 mov     edx, [esp+1Ch+Destination]
.text:00411081                 mov     [esp+1Ch+Str], edx ; Destination
.text:00411084                 call    strcat
.text:00411089
.text:00411089 loc_411089:                             ; CODE XREF: sub_411010+63↑j
.text:00411089                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00411090                 call    SetErrorMode
.text:00411095                 sub     esp, 4
.text:00411098                 mov     ebx, [esp+1Ch+Destination]
.text:0041109C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:004110A0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:004110A3                 call    sub_410E90
.text:004110A8                 mov     [esp+1Ch+Str], ebx ; Block
.text:004110AB                 mov     esi, eax
.text:004110AD                 call    free
.text:004110B2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:004110B9                 call    SetErrorMode
.text:004110BE                 sub     esp, 4
.text:004110C1                 mov     [esp+1Ch+Str], ebp
.text:004110C4                 call    sub_40D280
.text:004110C9                 inc     esi
.text:004110CA                 jz      short loc_4110E0
.text:004110CC                 mov     [esp+1Ch+arg_0], ebp
.text:004110D0                 add     esp, 0Ch
.text:004110D3                 pop     ebx
.text:004110D4                 pop     esi
.text:004110D5                 pop     edi
.text:004110D6                 pop     ebp
.text:004110D7                 jmp     strlen
.text:004110D7 ; ---------------------------------------------------------------------------
.text:004110DC                 align 10h
.text:004110E0
.text:004110E0 loc_4110E0:                             ; CODE XREF: sub_411010+28↑j
.text:004110E0                                         ; sub_411010+BA↑j
.text:004110E0                 add     esp, 0Ch
.text:004110E3                 mov     eax, 0FFFFFFFFh
.text:004110E8                 pop     ebx
.text:004110E9                 pop     esi
.text:004110EA                 pop     edi
.text:004110EB                 pop     ebp
.text:004110EC                 retn
.text:004110EC sub_411010      endp
.text:004110EC
.text:004110EC ; ---------------------------------------------------------------------------
.text:004110ED                 align 10h
.text:004110F0
.text:004110F0 ; =============== S U B R O U T I N E =======================================
.text:004110F0
.text:004110F0
.text:004110F0 sub_4110F0      proc near               ; CODE XREF: .text:00410E7B↑p
.text:004110F0                 xor     eax, eax
.text:004110F2                 retn
.text:004110F2 sub_4110F0      endp
.text:004110F2
.text:004110F2 ; ---------------------------------------------------------------------------
.text:004110F3                 align 10h
.text:00411100
.text:00411100 ; =============== S U B R O U T I N E =======================================
.text:00411100
.text:00411100
.text:00411100 sub_411100      proc near               ; CODE XREF: .text:loc_410E74↑p
.text:00411100                 xor     eax, eax
.text:00411102                 retn
.text:00411102 sub_411100      endp
.text:00411102
.text:00411102 ; ---------------------------------------------------------------------------
.text:00411103                 align 10h
.text:00411110
.text:00411110 ; =============== S U B R O U T I N E =======================================
.text:00411110
.text:00411110
.text:00411110 sub_411110      proc near               ; CODE XREF: .text:00410E54↑p
.text:00411110                 xor     eax, eax
.text:00411112                 retn
.text:00411112 sub_411110      endp
.text:00411112
.text:00411112 ; ---------------------------------------------------------------------------
.text:00411113                 align 10h
.text:00411120
.text:00411120 ; =============== S U B R O U T I N E =======================================
.text:00411120
.text:00411120
.text:00411120 sub_411120      proc near               ; CODE XREF: .text:00410E4D↑p
.text:00411120                 xor     eax, eax
.text:00411122                 retn
.text:00411122 sub_411120      endp
.text:00411122
.text:00411122 ; ---------------------------------------------------------------------------
.text:00411123                 align 10h
.text:00411130
.text:00411130 ; =============== S U B R O U T I N E =======================================
.text:00411130
.text:00411130 ; Attributes: thunk
.text:00411130
.text:00411130 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00411130 OleInitialize   proc near               ; CODE XREF: sub_410E90+1A↑p
.text:00411130
.text:00411130 pvReserved      = dword ptr  4
.text:00411130
.text:00411130                 jmp     ds:__imp_OleInitialize
.text:00411130 OleInitialize   endp
.text:00411130
.text:00411130 ; ---------------------------------------------------------------------------
.text:00411136                 align 10h
.text:00411140
.text:00411140 ; =============== S U B R O U T I N E =======================================
.text:00411140
.text:00411140 ; Attributes: thunk
.text:00411140
.text:00411140 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00411140 CoCreateInstance proc near              ; CODE XREF: sub_410E90+52↑p
.text:00411140
.text:00411140 rclsid          = dword ptr  4
.text:00411140 pUnkOuter       = dword ptr  8
.text:00411140 dwClsContext    = dword ptr  0Ch
.text:00411140 riid            = dword ptr  10h
.text:00411140 ppv             = dword ptr  14h
.text:00411140
.text:00411140                 jmp     ds:__imp_CoCreateInstance
.text:00411140 CoCreateInstance endp
.text:00411140
.text:00411140 ; ---------------------------------------------------------------------------
.text:00411146                 align 10h
.text:00411150
.text:00411150 ; =============== S U B R O U T I N E =======================================
.text:00411150
.text:00411150 ; Attributes: thunk
.text:00411150
.text:00411150 ; void __stdcall CoUninitialize()
.text:00411150 CoUninitialize  proc near               ; CODE XREF: sub_410E90+14E↑p
.text:00411150                                         ; sub_410E90+16D↑p
.text:00411150                 jmp     ds:__imp_CoUninitialize
.text:00411150 CoUninitialize  endp
.text:00411150
.text:00411150 ; ---------------------------------------------------------------------------
.text:00411156                 align 10h
.text:00411160                 add     al, 0BAh ; 'º'
.text:00411162                 retf
.text:00411162 ; ---------------------------------------------------------------------------
.text:00411163                 db 7Eh
.text:00411164                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00411164                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00411164                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00411164                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00411164                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00411164                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00411164                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00411164                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00411164                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00411164                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00411164                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00411164                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00411164                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00411164                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00411164                 dd 0C4426C00h, 330h, 0
.text:00411298                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411298                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00411298                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00411298                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:004112E8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004112E8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:004112E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:004112E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:004112E8                 dd 0BA94B00h, 1Bh, 0
.text:00411348                 dd 0C0h, 46000000h, 1Ch, 0
.text:00411358                 dd 0C0h, 46000000h, 331h, 0
.text:00411368                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411368                 dd 312h, 0
.text:00411388                 dd 0C0h, 46000000h, 30Eh, 0
.text:00411398                 dd 0C0h, 46000000h, 30Dh, 0
.text:004113A8                 dd 0C0h, 46000000h, 311h, 0
.text:004113B8                 dd 0C0h, 46000000h, 313h, 0
.text:004113C8                 dd 0C0h, 46000000h, 30Ch, 0
.text:004113D8                 dd 0C0h, 46000000h, 30Fh, 0
.text:004113E8                 dd 0C0h, 46000000h, 310h, 0
.text:004113F8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004113F8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00411428                 dd 0C0h, 46000000h, 319h, 0
.text:00411438                 dd 0C0h, 46000000h, 315h, 0
.text:00411448                 dd 0C0h, 46000000h, 316h, 0
.text:00411458                 dd 0C0h, 46000000h, 315h, 0
.text:00411468                 dd 0C0h, 46000000h, 2E005h, 0
.text:00411478                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411478                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00411478                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:004114B8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004114B8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:004114B8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:004114B8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:004114B8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:004114B8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:004114B8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:004114B8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:004114B8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:004114B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:004114B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:004114B8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004114B8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:004114B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:004114B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:004114B8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004114B8                 dd 2DE81h, 0
.text:00411608                 dd 0C0h, 46000000h, 4 dup(0)
.text:00411620                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00411620                 dd 0
.text:00411638                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411638                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00411638                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00411638                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00411638                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411638                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00411638                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00411638                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00411638                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00411638                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00411638                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00411638                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00411638                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00411638                 dd 10Fh, 0
.text:00411748                 dd 0C0h, 46000000h, 125h, 0
.text:00411758                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00411758                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00411758                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00411798                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00411798                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411798                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00411798                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00411798                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:004117F8                 dd 0C0h, 46000000h, 2E012h, 0
.text:00411808                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00411808                 dd 140h, 0
.text:00411828                 dd 0C0h, 46000000h, 1, 0
.text:00411838                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00411838                 dd 71D3400h, 13Dh, 0
.text:00411858                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411858                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00411858                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00411858                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:004118A8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:004118A8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004118A8                 dd 20405h, 0
.text:004118D8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:004118E8                 dd 0C0h, 46000000h, 20406h, 0
.text:004118F8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00411908                 dd 0C0h, 46000000h, 110h, 0
.text:00411918                 dd 0C0h, 46000000h, 10Eh, 0
.text:00411928                 dd 0C0h, 46000000h, 123h, 0
.text:00411938                 dd 0C0h, 46000000h, 124h, 0
.text:00411948                 dd 0C0h, 46000000h, 13h, 0
.text:00411958                 dd 0C0h, 46000000h, 14h, 0
.text:00411968                 dd 0C0h, 46000000h, 15h, 0
.text:00411978                 dd 0C0h, 46000000h, 20400h, 0
.text:00411988                 dd 0C0h, 46000000h, 121h, 0
.text:00411998                 dd 0C0h, 46000000h, 122h, 0
.text:004119A8                 dd 0C0h, 46000000h, 2E011h, 0
.text:004119B8                 dd 0C0h, 46000000h, 108h, 0
.text:004119C8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:004119C8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004119C8                 dd 103h, 0
.text:004119F8                 dd 0C0h, 46000000h, 2E000h, 0
.text:00411A08                 dd 0C0h, 46000000h, 106h, 0
.text:00411A18                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411A18                 dd 107h, 0
.text:00411A38                 dd 0C0h, 46000000h, 102h, 0
.text:00411A48                 dd 0C0h, 46000000h, 104h, 0
.text:00411A58                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00411A58                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00411A58                 dd 105h, 0
.text:00411A88                 dd 0C0h, 46000000h, 13Bh, 0
.text:00411A98                 dd 0C0h, 46000000h, 139h, 0
.text:00411AA8                 dd 0C0h, 46000000h, 0Dh, 0
.text:00411AB8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00411AB8                 dd 101h, 0
.text:00411AD8                 dd 0C0h, 46000000h, 100h, 0
.text:00411AE8                 dd 0C0h, 46000000h, 20404h, 0
.text:00411AF8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411AF8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00411B28                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00411B28                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00411B28                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00411B28                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00411B78                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411B78                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00411B78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00411B78                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00411B78                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411B78                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00411BF8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00411BF8                 dd 0Ah, 0
.text:00411C18                 dd 0C0h, 46000000h, 2, 0
.text:00411C28                 dd 0C0h, 46000000h, 1Dh, 0
.text:00411C38                 dd 0C0h, 46000000h, 3, 0
.text:00411C48                 dd 0C0h, 46000000h, 16h, 0
.text:00411C58                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00411C58                 dd 1608D74Fh, 0Fh, 0
.text:00411C78                 dd 0C0h, 46000000h, 20h, 0
.text:00411C88                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00411C88                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00411C88                 dd 0
.text:00411CB8                 dd 0C0h, 46000000h, 11Eh, 0
.text:00411CC8                 dd 0C0h, 46000000h, 128h, 0
.text:00411CD8                 dd 0C0h, 46000000h, 129h, 0
.text:00411CE8                 dd 0C0h, 46000000h, 118h, 0
.text:00411CF8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00411CF8                 dd 70474000h, 11Bh, 0
.text:00411D18                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00411D18                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411D18                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00411D18                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00411D18                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00411D78                 dd 0C0h, 46000000h, 116h, 0
.text:00411D88                 dd 0C0h, 46000000h, 113h, 0
.text:00411D98                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00411D98                 dd 119h, 0
.text:00411DB8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00411DB8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00411DB8                 dd 0
.text:00411DE8                 dd 0C0h, 46000000h, 11Ch, 0
.text:00411DF8                 dd 0C0h, 46000000h, 11Dh, 0
.text:00411E08                 dd 0C0h, 46000000h, 11Fh, 0
.text:00411E18                 dd 0C0h, 46000000h, 112h, 0
.text:00411E28                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00411E28                 dd 18E6000h, 120h, 0
.text:00411E48                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00411E48                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00411E48                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00411E88                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00411E88                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00411EB8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411EB8                 dd 11Ah, 0
.text:00411ED8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00411ED8                 dd 10Ch, 0
.text:00411EF8                 dd 0C0h, 46000000h
.text:00411F00 dword_411F00    dd 10Bh, 0              ; DATA XREF: sub_410E90+75↑o
.text:00411F08                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00411F08                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00411F08                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00411F08                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00411F58                 dd 0C0h, 46000000h, 109h, 0
.text:00411F68                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00411F68                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00411F68                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00411F68                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00411F68                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00411F68                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00411F68                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00411F68                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00411F68                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411F68                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00411F68                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00412048                 dd 0C0h, 46000000h, 138h, 0
.text:00412058                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00412058                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00412058                 dd 27h, 0
.text:00412088                 dd 0C0h, 46000000h, 8, 0
.text:00412098                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00412098                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00412098                 dd 20D00h, 0
.text:004120C8                 dd 0C0h, 46000000h, 20D03h, 0
.text:004120D8                 dd 0C0h, 46000000h, 12h, 0
.text:004120E8                 dd 0C0h, 46000000h, 4, 0
.text:004120F8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004120F8                 dd 7, 0
.text:00412118                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412118                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00412148                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412148                 dd 126h, 0
.text:00412168                 dd 0C0h, 46000000h, 10h, 0
.text:00412178                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00412178                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:004121A8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:004121A8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:004121A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:004121E8                 dd 0C0h, 46000000h, 0Bh, 0
.text:004121F8                 dd 0C0h, 46000000h, 0Ch, 0
.text:00412208                 dd 0C0h, 46000000h, 26h, 0
.text:00412218                 dd 0C0h, 46000000h, 6, 0
.text:00412228                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00412228                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00412228                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00412268                 dd 0C0h, 46000000h, 20403h, 0
.text:00412278                 dd 0C0h, 46000000h, 20401h, 0
.text:00412288                 dd 0C0h, 46000000h, 20412h, 0
.text:00412298                 dd 0C0h, 46000000h, 20402h, 0
.text:004122A8                 dd 0C0h, 46000000h, 20411h, 0
.text:004122B8                 dd 0C0h, 46000000h, 2 dup(0)
.text:004122C8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004122C8                 dd 10Dh, 0
.text:004122E8                 dd 0C0h, 46000000h, 127h, 0
.text:004122F8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:004122F8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:004122F8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00412338                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00412338                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00412338                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00412378                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00412388                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00412398                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:004123A8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:004123B8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:004123C8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:004123D8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:004123E8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:004123F8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00412408                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00412418                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00412428                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00412438                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00412448                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00412458                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00412468                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00412478                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00412488                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00412498                 dd 0C0h, 46000000h, 2DE10h, 0
.text:004124A8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:004124B8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:004124C8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:004124D8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:004124E8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:004124F8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00412508                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00412518                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00412528                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00412538                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00412548                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00412558                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00412568                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00412578                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00412588                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00412598                 dd 0C0h, 46000000h, 2DE08h, 0
.text:004125A8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:004125A8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:004125D0
.text:004125D0 ; =============== S U B R O U T I N E =======================================
.text:004125D0
.text:004125D0 ; Attributes: thunk
.text:004125D0
.text:004125D0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004125D0 mbrtowc         proc near               ; CODE XREF: sub_409A00+757↑p
.text:004125D0
.text:004125D0 DstCh           = dword ptr  4
.text:004125D0 SrcCh           = dword ptr  8
.text:004125D0 SizeInBytes     = dword ptr  0Ch
.text:004125D0 State           = dword ptr  10h
.text:004125D0
.text:004125D0                 jmp     ds:__imp_mbrtowc
.text:004125D0 mbrtowc         endp
.text:004125D0
.text:004125D0 ; ---------------------------------------------------------------------------
.text:004125D6                 align 10h
.text:004125E0
.text:004125E0 ; =============== S U B R O U T I N E =======================================
.text:004125E0
.text:004125E0 ; Attributes: bp-based frame
.text:004125E0
.text:004125E0 sub_4125E0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004125E0                 push    ebp
.text:004125E1                 mov     ecx, offset dword_415000
.text:004125E6                 cmp     ecx, offset dword_415000
.text:004125EC                 mov     ebp, esp
.text:004125EE                 jnb     short loc_412606
.text:004125F0
.text:004125F0 loc_4125F0:                             ; CODE XREF: sub_4125E0+24↓j
.text:004125F0                 mov     edx, [ecx+4]
.text:004125F3                 mov     eax, [ecx]
.text:004125F5                 add     ecx, 8
.text:004125F8                 add     [edx+400000h], eax
.text:004125FE                 cmp     ecx, offset dword_415000
.text:00412604                 jb      short loc_4125F0
.text:00412606
.text:00412606 loc_412606:                             ; CODE XREF: sub_4125E0+E↑j
.text:00412606                 pop     ebp
.text:00412607                 retn
.text:00412607 sub_4125E0      endp
.text:00412607
.text:00412607 ; ---------------------------------------------------------------------------
.text:00412608                 align 10h
.text:00412610
.text:00412610 ; =============== S U B R O U T I N E =======================================
.text:00412610
.text:00412610 ; Attributes: bp-based frame
.text:00412610
.text:00412610 sub_412610      proc near               ; CODE XREF: sub_401080+16↑p
.text:00412610                                         ; TopLevelExceptionFilter+D7↑p
.text:00412610                 push    ebp
.text:00412611                 mov     ebp, esp
.text:00412613                 fninit
.text:00412615                 pop     ebp
.text:00412616                 retn
.text:00412616 sub_412610      endp
.text:00412616
.text:00412616 ; ---------------------------------------------------------------------------
.text:00412617                 align 10h
.text:00412620
.text:00412620 ; =============== S U B R O U T I N E =======================================
.text:00412620
.text:00412620 ; Attributes: bp-based frame
.text:00412620
.text:00412620 ; void __cdecl sub_412620()
.text:00412620 sub_412620      proc near               ; DATA XREF: .text:loc_412669↓o
.text:00412620                                         ; sub_4126B0:loc_4126DE↓o
.text:00412620                 push    ebp
.text:00412621                 mov     ebp, esp
.text:00412623                 sub     esp, 8
.text:00412626                 mov     eax, off_4140D4
.text:0041262B                 mov     edx, [eax]
.text:0041262D                 test    edx, edx
.text:0041262F                 jnz     short loc_412635
.text:00412631
.text:00412631 loc_412631:                             ; CODE XREF: sub_412620+2C↓j
.text:00412631                 mov     esp, ebp
.text:00412633                 pop     ebp
.text:00412634                 retn
.text:00412635 ; ---------------------------------------------------------------------------
.text:00412635
.text:00412635 loc_412635:                             ; CODE XREF: sub_412620+F↑j
.text:00412635                                         ; sub_412620+2A↓j
.text:00412635                 call    dword ptr [eax]
.text:00412637                 mov     edx, off_4140D4
.text:0041263D                 mov     ecx, [edx+4]
.text:00412640                 lea     eax, [edx+4]
.text:00412643                 mov     off_4140D4, eax
.text:00412648                 test    ecx, ecx
.text:0041264A                 jnz     short loc_412635
.text:0041264C                 jmp     short loc_412631
.text:0041264C sub_412620      endp
.text:0041264C
.text:0041264C ; ---------------------------------------------------------------------------
.text:0041264E                 align 10h
.text:00412650                 push    ebp
.text:00412651                 mov     ebp, esp
.text:00412653                 sub     esp, 8
.text:00412656                 mov     [ebp-4], ebx
.text:00412659                 mov     eax, ds:dword_4138A0
.text:0041265E                 cmp     eax, 0FFFFFFFFh
.text:00412661                 jz      short loc_41268C
.text:00412663
.text:00412663 loc_412663:                             ; CODE XREF: .text:00412696↓j
.text:00412663                                         ; .text:004126A9↓j
.text:00412663                 test    eax, eax
.text:00412665                 mov     ebx, eax
.text:00412667                 jnz     short loc_412680
.text:00412669
.text:00412669 loc_412669:                             ; CODE XREF: .text:0041268A↓j
.text:00412669                 mov     dword ptr [esp], offset sub_412620
.text:00412670                 call    sub_401040
.text:00412675                 mov     ebx, [ebp-4]
.text:00412678                 mov     esp, ebp
.text:0041267A                 pop     ebp
.text:0041267B                 retn
.text:0041267B ; ---------------------------------------------------------------------------
.text:0041267C                 align 10h
.text:00412680
.text:00412680 loc_412680:                             ; CODE XREF: .text:00412667↑j
.text:00412680                                         ; .text:00412688↓j
.text:00412680                 call    ds:dword_4138A0[ebx*4]
.text:00412687                 dec     ebx
.text:00412688                 jnz     short loc_412680
.text:0041268A                 jmp     short loc_412669
.text:0041268C ; ---------------------------------------------------------------------------
.text:0041268C
.text:0041268C loc_41268C:                             ; CODE XREF: .text:00412661↑j
.text:0041268C                 mov     ecx, ds:dword_4138A4
.text:00412692                 xor     eax, eax
.text:00412694                 test    ecx, ecx
.text:00412696                 jz      short loc_412663
.text:00412698                 mov     edx, offset dword_4138A0
.text:0041269D                 lea     esi, [esi+0]
.text:004126A0
.text:004126A0 loc_4126A0:                             ; CODE XREF: .text:004126A7↓j
.text:004126A0                 inc     eax
.text:004126A1                 mov     ecx, [edx+eax*4+4]
.text:004126A5                 test    ecx, ecx
.text:004126A7                 jnz     short loc_4126A0
.text:004126A9                 jmp     short loc_412663
.text:004126A9 ; ---------------------------------------------------------------------------
.text:004126AB                 align 10h
.text:004126B0
.text:004126B0 ; =============== S U B R O U T I N E =======================================
.text:004126B0
.text:004126B0 ; Attributes: bp-based frame
.text:004126B0
.text:004126B0 sub_4126B0      proc near               ; CODE XREF: sub_4025D0+19↑p
.text:004126B0
.text:004126B0 var_8           = dword ptr -8
.text:004126B0 var_4           = dword ptr -4
.text:004126B0
.text:004126B0                 push    ebp
.text:004126B1                 mov     ebp, esp
.text:004126B3                 sub     esp, 8
.text:004126B6                 mov     [ebp+var_4], ebx
.text:004126B9                 mov     edx, dword_4140D0
.text:004126BF                 test    edx, edx
.text:004126C1                 jnz     short loc_4126EA
.text:004126C3                 mov     eax, ds:dword_4138A0
.text:004126C8                 mov     edx, 1
.text:004126CD                 mov     dword_4140D0, edx
.text:004126D3                 cmp     eax, 0FFFFFFFFh
.text:004126D6                 jz      short loc_4126FD
.text:004126D8
.text:004126D8 loc_4126D8:                             ; CODE XREF: sub_4126B0+57↓j
.text:004126D8                                         ; sub_4126B0+69↓j
.text:004126D8                 test    eax, eax
.text:004126DA                 mov     ebx, eax
.text:004126DC                 jnz     short loc_4126F1
.text:004126DE
.text:004126DE loc_4126DE:                             ; CODE XREF: sub_4126B0+4B↓j
.text:004126DE                 mov     [esp+8+var_8], offset sub_412620 ; void (__cdecl *)()
.text:004126E5                 call    sub_401040
.text:004126EA
.text:004126EA loc_4126EA:                             ; CODE XREF: sub_4126B0+11↑j
.text:004126EA                 mov     ebx, [ebp+var_4]
.text:004126ED                 mov     esp, ebp
.text:004126EF                 pop     ebp
.text:004126F0                 retn
.text:004126F1 ; ---------------------------------------------------------------------------
.text:004126F1
.text:004126F1 loc_4126F1:                             ; CODE XREF: sub_4126B0+2C↑j
.text:004126F1                                         ; sub_4126B0+49↓j
.text:004126F1                 call    ds:dword_4138A0[ebx*4]
.text:004126F8                 dec     ebx
.text:004126F9                 jnz     short loc_4126F1
.text:004126FB                 jmp     short loc_4126DE
.text:004126FD ; ---------------------------------------------------------------------------
.text:004126FD
.text:004126FD loc_4126FD:                             ; CODE XREF: sub_4126B0+26↑j
.text:004126FD                 mov     ecx, ds:dword_4138A4
.text:00412703                 xor     eax, eax
.text:00412705                 test    ecx, ecx
.text:00412707                 jz      short loc_4126D8
.text:00412709                 mov     edx, offset dword_4138A0
.text:0041270E                 mov     esi, esi
.text:00412710
.text:00412710 loc_412710:                             ; CODE XREF: sub_4126B0+67↓j
.text:00412710                 inc     eax
.text:00412711                 mov     ebx, [edx+eax*4+4]
.text:00412715                 test    ebx, ebx
.text:00412717                 jnz     short loc_412710
.text:00412719                 jmp     short loc_4126D8
.text:00412719 sub_4126B0      endp
.text:00412719
.text:00412719 ; ---------------------------------------------------------------------------
.text:0041271B                 align 10h
.text:00412720
.text:00412720 ; =============== S U B R O U T I N E =======================================
.text:00412720
.text:00412720 ; Attributes: info_from_lumina
.text:00412720
.text:00412720 ; void *__cdecl _alloca(size_t Size)
.text:00412720 __alloca        proc near               ; CODE XREF: sub_4025D0+11↑p
.text:00412720                 push    ecx
.text:00412721                 mov     ecx, esp
.text:00412723                 add     ecx, 8
.text:00412726
.text:00412726 loc_412726:                             ; CODE XREF: __alloca+1B↓j
.text:00412726                 cmp     eax, 1000h
.text:0041272B                 jb      short loc_41273D
.text:0041272D                 sub     ecx, 1000h
.text:00412733                 or      dword ptr [ecx], 0
.text:00412736                 sub     eax, 1000h
.text:0041273B                 jmp     short loc_412726
.text:0041273D ; ---------------------------------------------------------------------------
.text:0041273D
.text:0041273D loc_41273D:                             ; CODE XREF: __alloca+B↑j
.text:0041273D                 sub     ecx, eax
.text:0041273F                 or      dword ptr [ecx], 0
.text:00412742                 mov     eax, esp
.text:00412744                 mov     esp, ecx
.text:00412746                 mov     ecx, [eax]
.text:00412748                 mov     eax, [eax+4]
.text:0041274B                 jmp     eax
.text:0041274B __alloca        endp
.text:0041274B
.text:0041274B ; ---------------------------------------------------------------------------
.text:0041274D                 align 10h
.text:00412750
.text:00412750 ; =============== S U B R O U T I N E =======================================
.text:00412750
.text:00412750 ; Attributes: bp-based frame
.text:00412750
.text:00412750 sub_412750      proc near               ; CODE XREF: sub_405560+BC↑p
.text:00412750                                         ; sub_405650+13F↑p ...
.text:00412750
.text:00412750 var_34          = dword ptr -34h
.text:00412750 var_2C          = dword ptr -2Ch
.text:00412750 var_28          = dword ptr -28h
.text:00412750 var_24          = dword ptr -24h
.text:00412750 var_20          = dword ptr -20h
.text:00412750 var_1C          = dword ptr -1Ch
.text:00412750 var_18          = dword ptr -18h
.text:00412750 var_14          = dword ptr -14h
.text:00412750 arg_0           = dword ptr  8
.text:00412750 arg_4           = dword ptr  0Ch
.text:00412750 arg_8           = dword ptr  10h
.text:00412750 arg_C           = dword ptr  14h
.text:00412750
.text:00412750                 push    ebp
.text:00412751                 mov     ebp, esp
.text:00412753                 push    edi
.text:00412754                 push    esi
.text:00412755                 push    ebx
.text:00412756                 sub     esp, 2Ch
.text:00412759                 mov     edx, [ebp+arg_C]
.text:0041275C                 mov     [ebp+var_20], 0
.text:00412763                 mov     ecx, [ebp+arg_0]
.text:00412766                 mov     ebx, [ebp+arg_4]
.text:00412769                 mov     [ebp+var_1C], 0
.text:00412770                 mov     eax, [ebp+arg_8]
.text:00412773                 test    edx, edx
.text:00412775                 mov     [ebp+var_24], edx
.text:00412778                 mov     edi, ebx
.text:0041277A                 mov     esi, eax
.text:0041277C                 mov     [ebp+var_28], ecx
.text:0041277F                 jnz     short loc_4127E0
.text:00412781                 cmp     eax, ebx
.text:00412783                 jbe     short loc_4127C0
.text:00412785                 mov     eax, ecx
.text:00412787                 mov     edx, ebx
.text:00412789                 div     esi
.text:0041278B
.text:0041278B loc_41278B:                             ; CODE XREF: sub_412750+8B↓j
.text:0041278B                 mov     [ebp+var_28], edx
.text:0041278E                 lea     ecx, [ebp+var_18]
.text:00412791                 test    ecx, ecx
.text:00412793                 jz      short loc_4127AE
.text:00412795                 mov     [ebp+var_1C], 0
.text:0041279C
.text:0041279C loc_41279C:                             ; CODE XREF: sub_412750+DA↓j
.text:0041279C                 mov     eax, [ebp+var_28]
.text:0041279F                 mov     [ebp+var_20], eax
.text:004127A2                 mov     edx, [ebp+var_20]
.text:004127A5                 mov     ecx, [ebp+var_1C]
.text:004127A8                 mov     [ebp+var_18], edx
.text:004127AB                 mov     [ebp+var_14], ecx
.text:004127AE
.text:004127AE loc_4127AE:                             ; CODE XREF: sub_412750+43↑j
.text:004127AE                                         ; sub_412750+A7↓j ...
.text:004127AE                 mov     eax, [ebp+var_18]
.text:004127B1                 mov     edx, [ebp+var_14]
.text:004127B4                 add     esp, 2Ch
.text:004127B7                 pop     ebx
.text:004127B8                 pop     esi
.text:004127B9                 pop     edi
.text:004127BA                 pop     ebp
.text:004127BB                 retn
.text:004127BB ; ---------------------------------------------------------------------------
.text:004127BC                 align 10h
.text:004127C0
.text:004127C0 loc_4127C0:                             ; CODE XREF: sub_412750+33↑j
.text:004127C0                 test    eax, eax
.text:004127C2                 jnz     short loc_4127CF
.text:004127C4                 mov     eax, 1
.text:004127C9                 xor     edx, edx
.text:004127CB                 div     esi
.text:004127CD                 mov     esi, eax
.text:004127CF
.text:004127CF loc_4127CF:                             ; CODE XREF: sub_412750+72↑j
.text:004127CF                 mov     eax, edi
.text:004127D1                 mov     edx, [ebp+var_24]
.text:004127D4                 div     esi
.text:004127D6                 mov     eax, [ebp+var_28]
.text:004127D9                 div     esi
.text:004127DB                 jmp     short loc_41278B
.text:004127DB ; ---------------------------------------------------------------------------
.text:004127DD                 align 10h
.text:004127E0
.text:004127E0 loc_4127E0:                             ; CODE XREF: sub_412750+2F↑j
.text:004127E0                 cmp     [ebp+var_24], ebx
.text:004127E3                 jbe     short loc_412800
.text:004127E5                 mov     [ebp+var_20], ecx
.text:004127E8
.text:004127E8 loc_4127E8:                             ; CODE XREF: sub_412750+15B↓j
.text:004127E8                 mov     [ebp+var_1C], edi
.text:004127EB                 mov     eax, [ebp+var_20]
.text:004127EE                 mov     edx, [ebp+var_1C]
.text:004127F1                 mov     [ebp+var_18], eax
.text:004127F4                 mov     [ebp+var_14], edx
.text:004127F7                 jmp     short loc_4127AE
.text:004127F7 ; ---------------------------------------------------------------------------
.text:004127F9                 align 10h
.text:00412800
.text:00412800 loc_412800:                             ; CODE XREF: sub_412750+93↑j
.text:00412800                 bsr     eax, [ebp+var_24]
.text:00412804                 mov     ebx, eax
.text:00412806                 xor     ebx, 1Fh
.text:00412809                 jnz     short loc_412830
.text:0041280B                 cmp     edi, [ebp+var_24]
.text:0041280E                 ja      short loc_412815
.text:00412810                 cmp     [ebp+var_28], esi
.text:00412813                 jb      short loc_412820
.text:00412815
.text:00412815 loc_412815:                             ; CODE XREF: sub_412750+BE↑j
.text:00412815                 mov     edx, [ebp+var_28]
.text:00412818                 sub     edx, esi
.text:0041281A                 sbb     edi, [ebp+var_24]
.text:0041281D                 mov     [ebp+var_28], edx
.text:00412820
.text:00412820 loc_412820:                             ; CODE XREF: sub_412750+C3↑j
.text:00412820                 lea     ecx, [ebp+var_18]
.text:00412823                 test    ecx, ecx
.text:00412825                 jz      short loc_4127AE
.text:00412827                 mov     [ebp+var_1C], edi
.text:0041282A                 jmp     loc_41279C
.text:0041282A ; ---------------------------------------------------------------------------
.text:0041282F                 align 10h
.text:00412830
.text:00412830 loc_412830:                             ; CODE XREF: sub_412750+B9↑j
.text:00412830                 mov     edx, [ebp+var_24]
.text:00412833                 mov     eax, 20h ; ' '
.text:00412838                 mov     cl, bl
.text:0041283A                 sub     eax, ebx
.text:0041283C                 mov     [ebp+var_2C], eax
.text:0041283F                 shl     edx, cl
.text:00412841                 mov     eax, esi
.text:00412843                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412847                 shr     eax, cl
.text:00412849                 mov     cl, bl
.text:0041284B                 shl     esi, cl
.text:0041284D                 or      edx, eax
.text:0041284F                 mov     eax, [ebp+var_28]
.text:00412852                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412856                 mov     [ebp+var_24], edx
.text:00412859                 mov     edx, edi
.text:0041285B                 shr     edx, cl
.text:0041285D                 mov     cl, bl
.text:0041285F                 shl     edi, cl
.text:00412861                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412865                 shr     eax, cl
.text:00412867                 or      edi, eax
.text:00412869                 mov     eax, edi
.text:0041286B                 mov     cl, bl
.text:0041286D                 div     [ebp+var_24]
.text:00412870                 shl     [ebp+var_28], cl
.text:00412873                 mov     edi, edx
.text:00412875                 mul     esi
.text:00412877                 mov     [ebp+var_34], eax
.text:0041287A                 cmp     edx, edi
.text:0041287C                 ja      short loc_4128B8
.text:0041287E                 cmp     edx, edi
.text:00412880                 jz      short loc_4128B0
.text:00412882
.text:00412882 loc_412882:                             ; CODE XREF: sub_412750+166↓j
.text:00412882                                         ; sub_412750+173↓j
.text:00412882                 lea     eax, [ebp+var_18]
.text:00412885                 test    eax, eax
.text:00412887                 jz      loc_4127AE
.text:0041288D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412891                 mov     eax, [ebp+var_28]
.text:00412894                 sub     eax, [ebp+var_34]
.text:00412897                 sbb     edi, edx
.text:00412899                 mov     [ebp+var_28], eax
.text:0041289C                 mov     edx, edi
.text:0041289E                 shl     edx, cl
.text:004128A0                 mov     cl, bl
.text:004128A2                 shr     eax, cl
.text:004128A4                 or      edx, eax
.text:004128A6                 mov     [ebp+var_20], edx
.text:004128A9                 shr     edi, cl
.text:004128AB                 jmp     loc_4127E8
.text:004128B0 ; ---------------------------------------------------------------------------
.text:004128B0
.text:004128B0 loc_4128B0:                             ; CODE XREF: sub_412750+130↑j
.text:004128B0                 mov     eax, [ebp+var_28]
.text:004128B3                 cmp     [ebp+var_34], eax
.text:004128B6                 jbe     short loc_412882
.text:004128B8
.text:004128B8 loc_4128B8:                             ; CODE XREF: sub_412750+12C↑j
.text:004128B8                 mov     ecx, [ebp+var_34]
.text:004128BB                 sub     ecx, esi
.text:004128BD                 sbb     edx, [ebp+var_24]
.text:004128C0                 mov     [ebp+var_34], ecx
.text:004128C3                 jmp     short loc_412882
.text:004128C3 sub_412750      endp
.text:004128C3
.text:004128C3 ; ---------------------------------------------------------------------------
.text:004128C5                 align 10h
.text:004128D0
.text:004128D0 ; =============== S U B R O U T I N E =======================================
.text:004128D0
.text:004128D0 ; Attributes: bp-based frame
.text:004128D0
.text:004128D0 sub_4128D0      proc near               ; CODE XREF: sub_405560+DC↑p
.text:004128D0                                         ; sub_405650+15F↑p ...
.text:004128D0
.text:004128D0 var_24          = dword ptr -24h
.text:004128D0 var_20          = dword ptr -20h
.text:004128D0 var_1C          = dword ptr -1Ch
.text:004128D0 var_18          = dword ptr -18h
.text:004128D0 var_14          = dword ptr -14h
.text:004128D0 var_C           = dword ptr -0Ch
.text:004128D0 var_8           = dword ptr -8
.text:004128D0 var_4           = dword ptr -4
.text:004128D0 arg_0           = dword ptr  8
.text:004128D0 arg_4           = dword ptr  0Ch
.text:004128D0 arg_8           = dword ptr  10h
.text:004128D0 arg_C           = dword ptr  14h
.text:004128D0
.text:004128D0                 push    ebp
.text:004128D1                 mov     ebp, esp
.text:004128D3                 sub     esp, 28h
.text:004128D6                 mov     [ebp+var_C], ebx
.text:004128D9                 mov     edx, [ebp+arg_C]
.text:004128DC                 mov     ecx, [ebp+arg_0]
.text:004128DF                 mov     [ebp+var_8], esi
.text:004128E2                 mov     eax, [ebp+arg_8]
.text:004128E5                 test    edx, edx
.text:004128E7                 mov     [ebp+var_4], edi
.text:004128EA                 mov     ebx, [ebp+arg_4]
.text:004128ED                 mov     esi, eax
.text:004128EF                 mov     [ebp+var_18], 0
.text:004128F6                 mov     [ebp+var_14], 0
.text:004128FD                 mov     [ebp+var_1C], ecx
.text:00412900                 jnz     short loc_412952
.text:00412902                 cmp     eax, ebx
.text:00412904                 jbe     short loc_412930
.text:00412906                 mov     eax, ecx
.text:00412908                 mov     edx, ebx
.text:0041290A                 div     esi
.text:0041290C                 mov     edi, eax
.text:0041290E                 mov     esi, esi
.text:00412910
.text:00412910 loc_412910:                             ; CODE XREF: sub_4128D0+88↓j
.text:00412910                                         ; sub_4128D0+A4↓j ...
.text:00412910                 xor     ecx, ecx
.text:00412912
.text:00412912 loc_412912:                             ; CODE XREF: sub_4128D0+80↓j
.text:00412912                 mov     [ebp+var_18], edi
.text:00412915                 mov     ebx, [ebp+var_C]
.text:00412918                 mov     eax, [ebp+var_18]
.text:0041291B                 mov     [ebp+var_14], ecx
.text:0041291E                 mov     esi, [ebp+var_8]
.text:00412921                 mov     edx, [ebp+var_14]
.text:00412924                 mov     edi, [ebp+var_4]
.text:00412927                 mov     esp, ebp
.text:00412929                 pop     ebp
.text:0041292A                 retn
.text:0041292A ; ---------------------------------------------------------------------------
.text:0041292B                 align 10h
.text:00412930
.text:00412930 loc_412930:                             ; CODE XREF: sub_4128D0+34↑j
.text:00412930                 test    eax, eax
.text:00412932                 jnz     short loc_412941
.text:00412934                 mov     eax, 1
.text:00412939                 xor     ecx, ecx
.text:0041293B                 xor     edx, edx
.text:0041293D                 div     ecx
.text:0041293F                 mov     esi, eax
.text:00412941
.text:00412941 loc_412941:                             ; CODE XREF: sub_4128D0+62↑j
.text:00412941                 mov     eax, ebx
.text:00412943                 xor     edx, edx
.text:00412945                 div     esi
.text:00412947                 mov     ecx, eax
.text:00412949                 mov     eax, [ebp+var_1C]
.text:0041294C                 div     esi
.text:0041294E                 mov     edi, eax
.text:00412950                 jmp     short loc_412912
.text:00412952 ; ---------------------------------------------------------------------------
.text:00412952
.text:00412952 loc_412952:                             ; CODE XREF: sub_4128D0+30↑j
.text:00412952                 cmp     edx, ebx
.text:00412954                 jbe     short loc_412960
.text:00412956                 xor     edi, edi
.text:00412958                 jmp     short loc_412910
.text:00412958 ; ---------------------------------------------------------------------------
.text:0041295A                 align 10h
.text:00412960
.text:00412960 loc_412960:                             ; CODE XREF: sub_4128D0+84↑j
.text:00412960                 bsr     eax, edx
.text:00412963                 xor     eax, 1Fh
.text:00412966                 mov     [ebp+var_20], eax
.text:00412969                 jnz     short loc_412980
.text:0041296B                 cmp     ebx, edx
.text:0041296D                 ja      short loc_412976
.text:0041296F                 xor     edi, edi
.text:00412971                 cmp     [ebp+var_1C], esi
.text:00412974                 jb      short loc_412910
.text:00412976
.text:00412976 loc_412976:                             ; CODE XREF: sub_4128D0+9D↑j
.text:00412976                 mov     edi, 1
.text:0041297B                 jmp     short loc_412910
.text:0041297B ; ---------------------------------------------------------------------------
.text:0041297D                 align 10h
.text:00412980
.text:00412980 loc_412980:                             ; CODE XREF: sub_4128D0+99↑j
.text:00412980                 mov     eax, [ebp+var_20]
.text:00412983                 mov     ecx, 20h ; ' '
.text:00412988                 sub     ecx, eax
.text:0041298A                 mov     [ebp+var_24], ecx
.text:0041298D                 mov     eax, esi
.text:0041298F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412993                 shl     edx, cl
.text:00412995                 mov     edi, edx
.text:00412997                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041299B                 mov     edx, ebx
.text:0041299D                 shr     eax, cl
.text:0041299F                 movzx   ecx, byte ptr [ebp+var_20]
.text:004129A3                 or      edi, eax
.text:004129A5                 mov     eax, [ebp+var_1C]
.text:004129A8                 shl     esi, cl
.text:004129AA                 movzx   ecx, byte ptr [ebp+var_24]
.text:004129AE                 shr     edx, cl
.text:004129B0                 movzx   ecx, byte ptr [ebp+var_20]
.text:004129B4                 shl     ebx, cl
.text:004129B6                 movzx   ecx, byte ptr [ebp+var_24]
.text:004129BA                 shr     eax, cl
.text:004129BC                 or      ebx, eax
.text:004129BE                 movzx   ecx, byte ptr [ebp+var_20]
.text:004129C2                 mov     eax, ebx
.text:004129C4                 div     edi
.text:004129C6                 mov     ebx, edx
.text:004129C8                 mov     edi, eax
.text:004129CA                 shl     [ebp+var_1C], cl
.text:004129CD                 mul     esi
.text:004129CF                 cmp     edx, ebx
.text:004129D1                 ja      short loc_4129E4
.text:004129D3                 cmp     edx, ebx
.text:004129D5                 jnz     loc_412910
.text:004129DB                 cmp     eax, [ebp+var_1C]
.text:004129DE                 jbe     loc_412910
.text:004129E4
.text:004129E4 loc_4129E4:                             ; CODE XREF: sub_4128D0+101↑j
.text:004129E4                 dec     edi
.text:004129E5                 jmp     loc_412910
.text:004129E5 sub_4128D0      endp
.text:004129E5
.text:004129E5 ; ---------------------------------------------------------------------------
.text:004129EA                 align 10h
.text:004129F0
.text:004129F0 ; =============== S U B R O U T I N E =======================================
.text:004129F0
.text:004129F0 ; Attributes: thunk
.text:004129F0
.text:004129F0 ; int __cdecl isatty(int FileHandle)
.text:004129F0 _isatty         proc near               ; CODE XREF: sub_405070+88↑p
.text:004129F0
.text:004129F0 FileHandle      = dword ptr  4
.text:004129F0
.text:004129F0                 jmp     ds:__imp__isatty
.text:004129F0 _isatty         endp
.text:004129F0
.text:004129F0 ; ---------------------------------------------------------------------------
.text:004129F6                 align 10h
.text:00412A00
.text:00412A00 ; =============== S U B R O U T I N E =======================================
.text:00412A00
.text:00412A00 ; Attributes: thunk
.text:00412A00
.text:00412A00 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00412A00 _stricmp        proc near               ; CODE XREF: sub_40BB80+46F↑p
.text:00412A00                                         ; sub_40DB00+2E↑p ...
.text:00412A00
.text:00412A00 String1         = dword ptr  4
.text:00412A00 String2         = dword ptr  8
.text:00412A00
.text:00412A00                 jmp     ds:__imp__stricmp
.text:00412A00 _stricmp        endp
.text:00412A00
.text:00412A00 ; ---------------------------------------------------------------------------
.text:00412A06                 align 10h
.text:00412A10
.text:00412A10 ; =============== S U B R O U T I N E =======================================
.text:00412A10
.text:00412A10 ; Attributes: thunk
.text:00412A10
.text:00412A10 ; char *__cdecl strdup(const char *String)
.text:00412A10 _strdup         proc near               ; CODE XREF: sub_40D730+101↑p
.text:00412A10                                         ; .text:0040D99A↑p ...
.text:00412A10
.text:00412A10 String          = dword ptr  4
.text:00412A10
.text:00412A10                 jmp     ds:__imp__strdup
.text:00412A10 _strdup         endp
.text:00412A10
.text:00412A10 ; ---------------------------------------------------------------------------
.text:00412A16                 align 10h
.text:00412A20
.text:00412A20 ; =============== S U B R O U T I N E =======================================
.text:00412A20
.text:00412A20 ; Attributes: thunk
.text:00412A20
.text:00412A20 ; int __cdecl getpid()
.text:00412A20 _getpid         proc near               ; CODE XREF: sub_410710+84↑p
.text:00412A20                 jmp     ds:__imp__getpid
.text:00412A20 _getpid         endp
.text:00412A20
.text:00412A20 ; ---------------------------------------------------------------------------
.text:00412A26                 align 10h
.text:00412A30
.text:00412A30 ; =============== S U B R O U T I N E =======================================
.text:00412A30
.text:00412A30 ; Attributes: thunk
.text:00412A30
.text:00412A30 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00412A30 _chmod          proc near               ; CODE XREF: sub_410B40+41↑j
.text:00412A30
.text:00412A30 FileName        = dword ptr  4
.text:00412A30 AccessMode      = dword ptr  8
.text:00412A30
.text:00412A30                 jmp     ds:__imp__chmod
.text:00412A30 _chmod          endp
.text:00412A30
.text:00412A30 ; ---------------------------------------------------------------------------
.text:00412A36                 align 10h
.text:00412A40
.text:00412A40 ; =============== S U B R O U T I N E =======================================
.text:00412A40
.text:00412A40 ; Attributes: info_from_lumina
.text:00412A40
.text:00412A40 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00412A40 _strtoull       proc near               ; CODE XREF: sub_408CE0+AD↑p
.text:00412A40
.text:00412A40 C               = dword ptr -3Ch
.text:00412A40 Type            = dword ptr -38h
.text:00412A40 var_34          = dword ptr -34h
.text:00412A40 var_30          = dword ptr -30h
.text:00412A40 var_2C          = dword ptr -2Ch
.text:00412A40 var_28          = dword ptr -28h
.text:00412A40 var_24          = dword ptr -24h
.text:00412A40 var_20          = dword ptr -20h
.text:00412A40 var_1C          = dword ptr -1Ch
.text:00412A40 var_18          = dword ptr -18h
.text:00412A40 String          = dword ptr  4
.text:00412A40 EndPtr          = dword ptr  8
.text:00412A40 Radix           = dword ptr  0Ch
.text:00412A40
.text:00412A40                 push    ebp
.text:00412A41                 push    edi
.text:00412A42                 push    esi
.text:00412A43                 push    ebx
.text:00412A44                 sub     esp, 2Ch
.text:00412A47                 mov     edx, [esp+3Ch+EndPtr]
.text:00412A4B                 test    edx, edx
.text:00412A4D                 jz      short loc_412A59
.text:00412A4F                 mov     eax, [esp+3Ch+String]
.text:00412A53                 mov     ecx, [esp+3Ch+EndPtr]
.text:00412A57                 mov     [ecx], eax
.text:00412A59
.text:00412A59 loc_412A59:                             ; CODE XREF: _strtoull+D↑j
.text:00412A59                 mov     edx, [esp+3Ch+Radix]
.text:00412A5D                 test    edx, edx
.text:00412A5F                 js      short loc_412A6F
.text:00412A61                 cmp     [esp+3Ch+Radix], 1
.text:00412A66                 jz      short loc_412A6F
.text:00412A68                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:00412A6D                 jle     short loc_412A86
.text:00412A6F
.text:00412A6F loc_412A6F:                             ; CODE XREF: _strtoull+1F↑j
.text:00412A6F                                         ; _strtoull+26↑j
.text:00412A6F                 call    _errno
.text:00412A74                 mov     dword ptr [eax], 21h ; '!'
.text:00412A7A
.text:00412A7A loc_412A7A:                             ; CODE XREF: _strtoull+FF↓j
.text:00412A7A                                         ; _strtoull+109↓j
.text:00412A7A                 xor     eax, eax
.text:00412A7C                 xor     edx, edx
.text:00412A7E
.text:00412A7E loc_412A7E:                             ; CODE XREF: _strtoull+244↓j
.text:00412A7E                                         ; _strtoull+251↓j ...
.text:00412A7E                 add     esp, 2Ch
.text:00412A81                 pop     ebx
.text:00412A82                 pop     esi
.text:00412A83                 pop     edi
.text:00412A84                 pop     ebp
.text:00412A85                 retn
.text:00412A86 ; ---------------------------------------------------------------------------
.text:00412A86
.text:00412A86 loc_412A86:                             ; CODE XREF: _strtoull+2D↑j
.text:00412A86                 mov     ecx, ds:__mb_cur_max
.text:00412A8C                 lea     esi, [esi+0]
.text:00412A90
.text:00412A90 loc_412A90:                             ; CODE XREF: _strtoull+7E↓j
.text:00412A90                 cmp     dword ptr [ecx], 1
.text:00412A93                 mov     esi, [esp+3Ch+String]
.text:00412A97                 movsx   edx, byte ptr [esi]
.text:00412A9A                 jz      loc_412E72
.text:00412AA0                 mov     [esp+3Ch+Type], 8 ; Type
.text:00412AA8                 mov     [esp+3Ch+C], edx ; C
.text:00412AAB                 call    _isctype
.text:00412AB0                 mov     ecx, ds:__mb_cur_max
.text:00412AB6
.text:00412AB6 loc_412AB6:                             ; CODE XREF: _strtoull+445↓j
.text:00412AB6                 test    eax, eax
.text:00412AB8                 jz      short loc_412AC0
.text:00412ABA                 inc     [esp+3Ch+String]
.text:00412ABE                 jmp     short loc_412A90
.text:00412AC0 ; ---------------------------------------------------------------------------
.text:00412AC0
.text:00412AC0 loc_412AC0:                             ; CODE XREF: _strtoull+78↑j
.text:00412AC0                 mov     esi, [esp+3Ch+String]
.text:00412AC4                 xor     ebx, ebx
.text:00412AC6                 movzx   edx, byte ptr [esi]
.text:00412AC9                 cmp     dl, 2Dh ; '-'
.text:00412ACC                 setz    bl
.text:00412ACF                 test    ebx, ebx
.text:00412AD1                 mov     [esp+3Ch+var_20], ebx
.text:00412AD5                 jnz     loc_412E62
.text:00412ADB                 cmp     dl, 2Bh ; '+'
.text:00412ADE                 jz      loc_412E62
.text:00412AE4
.text:00412AE4 loc_412AE4:                             ; CODE XREF: _strtoull+42D↓j
.text:00412AE4                 mov     ebp, [esp+3Ch+Radix]
.text:00412AE8                 test    ebp, ebp
.text:00412AEA                 jnz     short loc_412AFD
.text:00412AEC                 cmp     dl, 30h ; '0'
.text:00412AEF                 jz      loc_412E39
.text:00412AF5                 mov     [esp+3Ch+Radix], 0Ah
.text:00412AFD
.text:00412AFD loc_412AFD:                             ; CODE XREF: _strtoull+AA↑j
.text:00412AFD                                         ; _strtoull+40F↓j ...
.text:00412AFD                 cmp     [esp+3Ch+Radix], 10h
.text:00412B02                 jz      loc_412E0B
.text:00412B08
.text:00412B08 loc_412B08:                             ; CODE XREF: _strtoull+3CE↓j
.text:00412B08                                         ; _strtoull+3E2↓j ...
.text:00412B08                 cmp     dword ptr [ecx], 1
.text:00412B0B                 movsx   ebx, dl
.text:00412B0E                 jz      loc_412DF3
.text:00412B14                 mov     [esp+3Ch+Type], 4 ; Type
.text:00412B1C                 mov     [esp+3Ch+C], ebx ; C
.text:00412B1F                 call    _isctype
.text:00412B24                 mov     esi, [esp+3Ch+String]
.text:00412B28                 movzx   edx, byte ptr [esi]
.text:00412B2B
.text:00412B2B loc_412B2B:                             ; CODE XREF: _strtoull+3C6↓j
.text:00412B2B                 test    eax, eax
.text:00412B2D                 jz      loc_412D5C
.text:00412B33                 movsx   eax, dl
.text:00412B36                 sub     eax, 30h ; '0'
.text:00412B39
.text:00412B39 loc_412B39:                             ; CODE XREF: _strtoull+34B↓j
.text:00412B39                                         ; _strtoull+37C↓j ...
.text:00412B39                 inc     [esp+3Ch+String]
.text:00412B3D                 test    eax, eax
.text:00412B3F                 js      loc_412A7A
.text:00412B45                 cmp     eax, [esp+3Ch+Radix]
.text:00412B49                 jge     loc_412A7A
.text:00412B4F                 mov     [esp+3Ch+var_1C], eax
.text:00412B53                 mov     edx, eax
.text:00412B55                 sar     edx, 1Fh
.text:00412B58                 mov     [esp+3Ch+var_18], edx
.text:00412B5C                 mov     [esp+3Ch+var_24], 0
.text:00412B64                 lea     esi, [esi+0]
.text:00412B6A                 lea     edi, [edi+0]
.text:00412B70
.text:00412B70 loc_412B70:                             ; CODE XREF: _strtoull+20C↓j
.text:00412B70                 mov     ebp, [esp+3Ch+String]
.text:00412B74                 mov     ebx, ds:__mb_cur_max
.text:00412B7A                 movzx   edx, byte ptr [ebp+0]
.text:00412B7E                 cmp     dword ptr [ebx], 1
.text:00412B81                 movsx   ecx, dl
.text:00412B84                 jz      loc_412D45
.text:00412B8A                 mov     [esp+3Ch+C], ecx ; C
.text:00412B8D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00412B95                 call    _isctype
.text:00412B9A                 mov     ecx, [esp+3Ch+String]
.text:00412B9E                 movzx   edx, byte ptr [ecx]
.text:00412BA1
.text:00412BA1 loc_412BA1:                             ; CODE XREF: _strtoull+317↓j
.text:00412BA1                 test    eax, eax
.text:00412BA3                 jz      loc_412CB0
.text:00412BA9                 movsx   edi, dl
.text:00412BAC                 lea     ebp, [edi-30h]
.text:00412BAF
.text:00412BAF loc_412BAF:                             ; CODE XREF: _strtoull+2A3↓j
.text:00412BAF                 test    ebp, ebp
.text:00412BB1                 js      loc_412C5B
.text:00412BB7                 cmp     ebp, [esp+3Ch+Radix]
.text:00412BBB                 jge     loc_412C5B
.text:00412BC1                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00412BC8                 mov     eax, [esp+3Ch+Radix]
.text:00412BCC                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00412BD4                 cdq
.text:00412BD5                 mov     esi, eax
.text:00412BD7                 mov     [esp+3Ch+var_34], eax
.text:00412BDB                 mov     edi, edx
.text:00412BDD                 mov     [esp+3Ch+var_30], edx
.text:00412BE1                 call    sub_4128D0
.text:00412BE6                 add     eax, 1
.text:00412BE9                 adc     edx, 0
.text:00412BEC                 cmp     [esp+3Ch+var_18], edx
.text:00412BF0                 ja      short loc_412C40
.text:00412BF2                 jb      short loc_412BFA
.text:00412BF4                 cmp     [esp+3Ch+var_1C], eax
.text:00412BF8                 ja      short loc_412C40
.text:00412BFA
.text:00412BFA loc_412BFA:                             ; CODE XREF: _strtoull+1B2↑j
.text:00412BFA                 mov     eax, [esp+3Ch+var_1C]
.text:00412BFE                 mov     ebx, ebp
.text:00412C00                 mul     esi
.text:00412C02                 mov     ecx, edx
.text:00412C04                 mov     [esp+3Ch+var_2C], eax
.text:00412C08                 mov     eax, [esp+3Ch+var_18]
.text:00412C0C                 mov     [esp+3Ch+var_28], edx
.text:00412C10                 imul    eax, esi
.text:00412C13                 mov     esi, [esp+3Ch+var_1C]
.text:00412C17                 imul    esi, edi
.text:00412C1A                 add     ecx, eax
.text:00412C1C                 lea     edi, [esi+ecx]
.text:00412C1F                 mov     esi, ebp
.text:00412C21                 sar     esi, 1Fh
.text:00412C24                 add     ebx, [esp+3Ch+var_2C]
.text:00412C28                 mov     [esp+3Ch+var_28], edi
.text:00412C2C                 adc     esi, [esp+3Ch+var_28]
.text:00412C30                 cmp     esi, [esp+3Ch+var_18]
.text:00412C34                 jb      short loc_412C40
.text:00412C36                 ja      short loc_412C51
.text:00412C38                 cmp     ebx, [esp+3Ch+var_1C]
.text:00412C3C                 jnb     short loc_412C51
.text:00412C3E                 mov     esi, esi
.text:00412C40
.text:00412C40 loc_412C40:                             ; CODE XREF: _strtoull+1B0↑j
.text:00412C40                                         ; _strtoull+1B8↑j ...
.text:00412C40                 mov     [esp+3Ch+var_24], 1
.text:00412C48
.text:00412C48 loc_412C48:                             ; CODE XREF: _strtoull+219↓j
.text:00412C48                 inc     [esp+3Ch+String]
.text:00412C4C                 jmp     loc_412B70
.text:00412C51 ; ---------------------------------------------------------------------------
.text:00412C51
.text:00412C51 loc_412C51:                             ; CODE XREF: _strtoull+1F6↑j
.text:00412C51                                         ; _strtoull+1FC↑j
.text:00412C51                 mov     [esp+3Ch+var_1C], ebx
.text:00412C55                 mov     [esp+3Ch+var_18], esi
.text:00412C59                 jmp     short loc_412C48
.text:00412C5B ; ---------------------------------------------------------------------------
.text:00412C5B
.text:00412C5B loc_412C5B:                             ; CODE XREF: _strtoull+171↑j
.text:00412C5B                                         ; _strtoull+17B↑j
.text:00412C5B                 mov     eax, [esp+3Ch+EndPtr]
.text:00412C5F                 test    eax, eax
.text:00412C61                 jz      short loc_412C6E
.text:00412C63                 mov     ecx, [esp+3Ch+String]
.text:00412C67                 mov     ebp, [esp+3Ch+EndPtr]
.text:00412C6B                 mov     [ebp+0], ecx
.text:00412C6E
.text:00412C6E loc_412C6E:                             ; CODE XREF: _strtoull+221↑j
.text:00412C6E                 mov     esi, [esp+3Ch+var_24]
.text:00412C72                 test    esi, esi
.text:00412C74                 jnz     short loc_412C96
.text:00412C76                 mov     ebx, [esp+3Ch+var_20]
.text:00412C7A                 mov     eax, [esp+3Ch+var_1C]
.text:00412C7E                 mov     edx, [esp+3Ch+var_18]
.text:00412C82                 test    ebx, ebx
.text:00412C84                 jz      loc_412A7E
.text:00412C8A                 neg     eax
.text:00412C8C                 adc     edx, 0
.text:00412C8F                 neg     edx
.text:00412C91                 jmp     loc_412A7E
.text:00412C96 ; ---------------------------------------------------------------------------
.text:00412C96
.text:00412C96 loc_412C96:                             ; CODE XREF: _strtoull+234↑j
.text:00412C96                 call    _errno
.text:00412C9B                 mov     edx, 0FFFFFFFFh
.text:00412CA0                 mov     dword ptr [eax], 22h ; '"'
.text:00412CA6                 mov     eax, 0FFFFFFFFh
.text:00412CAB                 jmp     loc_412A7E
.text:00412CB0 ; ---------------------------------------------------------------------------
.text:00412CB0
.text:00412CB0 loc_412CB0:                             ; CODE XREF: _strtoull+163↑j
.text:00412CB0                 mov     ebp, ds:__mb_cur_max
.text:00412CB6                 movsx   ecx, dl
.text:00412CB9                 cmp     dword ptr [ebp+0], 1
.text:00412CBD                 jz      short loc_412D31
.text:00412CBF                 mov     [esp+3Ch+Type], 1 ; Type
.text:00412CC7                 mov     [esp+3Ch+C], ecx ; C
.text:00412CCA                 call    _isctype
.text:00412CCF                 mov     ebp, [esp+3Ch+String]
.text:00412CD3                 movzx   edx, byte ptr [ebp+0]
.text:00412CD7
.text:00412CD7 loc_412CD7:                             ; CODE XREF: _strtoull+303↓j
.text:00412CD7                 test    eax, eax
.text:00412CD9                 jz      short loc_412CE8
.text:00412CDB                 movsx   eax, dl
.text:00412CDE                 sub     eax, 37h ; '7'
.text:00412CE1
.text:00412CE1 loc_412CE1:                             ; CODE XREF: _strtoull+2D4↓j
.text:00412CE1                                         ; _strtoull+2DB↓j
.text:00412CE1                 mov     ebp, eax
.text:00412CE3                 jmp     loc_412BAF
.text:00412CE8 ; ---------------------------------------------------------------------------
.text:00412CE8
.text:00412CE8 loc_412CE8:                             ; CODE XREF: _strtoull+299↑j
.text:00412CE8                 mov     ecx, ds:__mb_cur_max
.text:00412CEE                 movsx   edx, dl
.text:00412CF1                 cmp     dword ptr [ecx], 1
.text:00412CF4                 jz      short loc_412D1D
.text:00412CF6                 mov     [esp+3Ch+Type], 2 ; Type
.text:00412CFE                 mov     [esp+3Ch+C], edx ; C
.text:00412D01                 call    _isctype
.text:00412D06
.text:00412D06 loc_412D06:                             ; CODE XREF: _strtoull+2EF↓j
.text:00412D06                 test    eax, eax
.text:00412D08                 jz      short loc_412D16
.text:00412D0A                 mov     edx, [esp+3Ch+String]
.text:00412D0E                 movsx   eax, byte ptr [edx]
.text:00412D11                 sub     eax, 57h ; 'W'
.text:00412D14                 jmp     short loc_412CE1
.text:00412D16 ; ---------------------------------------------------------------------------
.text:00412D16
.text:00412D16 loc_412D16:                             ; CODE XREF: _strtoull+2C8↑j
.text:00412D16                 mov     eax, 0FFFFFFFFh
.text:00412D1B                 jmp     short loc_412CE1
.text:00412D1D ; ---------------------------------------------------------------------------
.text:00412D1D
.text:00412D1D loc_412D1D:                             ; CODE XREF: _strtoull+2B4↑j
.text:00412D1D                 mov     edi, ds:_pctype
.text:00412D23                 mov     ebx, [edi]
.text:00412D25                 movzx   esi, word ptr [ebx+edx*2]
.text:00412D29                 and     esi, 2
.text:00412D2C                 movzx   eax, si
.text:00412D2F                 jmp     short loc_412D06
.text:00412D31 ; ---------------------------------------------------------------------------
.text:00412D31
.text:00412D31 loc_412D31:                             ; CODE XREF: _strtoull+27D↑j
.text:00412D31                 mov     edi, ds:_pctype
.text:00412D37                 mov     ebx, [edi]
.text:00412D39                 movzx   esi, word ptr [ebx+ecx*2]
.text:00412D3D                 and     esi, 1
.text:00412D40                 movzx   eax, si
.text:00412D43                 jmp     short loc_412CD7
.text:00412D45 ; ---------------------------------------------------------------------------
.text:00412D45
.text:00412D45 loc_412D45:                             ; CODE XREF: _strtoull+144↑j
.text:00412D45                 mov     ebx, ds:_pctype
.text:00412D4B                 mov     esi, [ebx]
.text:00412D4D                 movzx   edi, word ptr [esi+ecx*2]
.text:00412D51                 and     edi, 4
.text:00412D54                 movzx   eax, di
.text:00412D57                 jmp     loc_412BA1
.text:00412D5C ; ---------------------------------------------------------------------------
.text:00412D5C
.text:00412D5C loc_412D5C:                             ; CODE XREF: _strtoull+ED↑j
.text:00412D5C                 mov     ebx, ds:__mb_cur_max
.text:00412D62                 movsx   ecx, dl
.text:00412D65                 cmp     dword ptr [ebx], 1
.text:00412D68                 jz      short loc_412DDF
.text:00412D6A                 mov     [esp+3Ch+C], ecx ; C
.text:00412D6D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00412D75                 call    _isctype
.text:00412D7A                 mov     ecx, [esp+3Ch+String]
.text:00412D7E                 movzx   edx, byte ptr [ecx]
.text:00412D81
.text:00412D81 loc_412D81:                             ; CODE XREF: _strtoull+3B1↓j
.text:00412D81                 test    eax, eax
.text:00412D83                 jz      short loc_412D90
.text:00412D85                 movsx   eax, dl
.text:00412D88                 sub     eax, 37h ; '7'
.text:00412D8B                 jmp     loc_412B39
.text:00412D90 ; ---------------------------------------------------------------------------
.text:00412D90
.text:00412D90 loc_412D90:                             ; CODE XREF: _strtoull+343↑j
.text:00412D90                 mov     ebx, ds:__mb_cur_max
.text:00412D96                 movsx   edx, dl
.text:00412D99                 cmp     dword ptr [ebx], 1
.text:00412D9C                 jz      short loc_412DCB
.text:00412D9E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00412DA6                 mov     [esp+3Ch+C], edx ; C
.text:00412DA9                 call    _isctype
.text:00412DAE
.text:00412DAE loc_412DAE:                             ; CODE XREF: _strtoull+39D↓j
.text:00412DAE                 test    eax, eax
.text:00412DB0                 jz      short loc_412DC1
.text:00412DB2                 mov     ecx, [esp+3Ch+String]
.text:00412DB6                 movsx   eax, byte ptr [ecx]
.text:00412DB9                 sub     eax, 57h ; 'W'
.text:00412DBC                 jmp     loc_412B39
.text:00412DC1 ; ---------------------------------------------------------------------------
.text:00412DC1
.text:00412DC1 loc_412DC1:                             ; CODE XREF: _strtoull+370↑j
.text:00412DC1                 mov     eax, 0FFFFFFFFh
.text:00412DC6                 jmp     loc_412B39
.text:00412DCB ; ---------------------------------------------------------------------------
.text:00412DCB
.text:00412DCB loc_412DCB:                             ; CODE XREF: _strtoull+35C↑j
.text:00412DCB                 mov     esi, ds:_pctype
.text:00412DD1                 mov     edi, [esi]
.text:00412DD3                 movzx   ebp, word ptr [edi+edx*2]
.text:00412DD7                 and     ebp, 2
.text:00412DDA                 movzx   eax, bp
.text:00412DDD                 jmp     short loc_412DAE
.text:00412DDF ; ---------------------------------------------------------------------------
.text:00412DDF
.text:00412DDF loc_412DDF:                             ; CODE XREF: _strtoull+328↑j
.text:00412DDF                 mov     esi, ds:_pctype
.text:00412DE5                 mov     edi, [esi]
.text:00412DE7                 movzx   ebp, word ptr [edi+ecx*2]
.text:00412DEB                 and     ebp, 1
.text:00412DEE                 movzx   eax, bp
.text:00412DF1                 jmp     short loc_412D81
.text:00412DF3 ; ---------------------------------------------------------------------------
.text:00412DF3
.text:00412DF3 loc_412DF3:                             ; CODE XREF: _strtoull+CE↑j
.text:00412DF3                 mov     edi, ds:_pctype
.text:00412DF9                 mov     ebp, [edi]
.text:00412DFB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00412E00                 and     ecx, 4
.text:00412E03                 movzx   eax, cx
.text:00412E06                 jmp     loc_412B2B
.text:00412E0B ; ---------------------------------------------------------------------------
.text:00412E0B
.text:00412E0B loc_412E0B:                             ; CODE XREF: _strtoull+C2↑j
.text:00412E0B                 cmp     dl, 30h ; '0'
.text:00412E0E                 jnz     loc_412B08
.text:00412E14                 mov     esi, [esp+3Ch+String]
.text:00412E18                 movzx   eax, byte ptr [esi+1]
.text:00412E1C                 cmp     al, 58h ; 'X'
.text:00412E1E                 jz      short loc_412E28
.text:00412E20                 cmp     al, 78h ; 'x'
.text:00412E22                 jnz     loc_412B08
.text:00412E28
.text:00412E28 loc_412E28:                             ; CODE XREF: _strtoull+3DE↑j
.text:00412E28                 add     [esp+3Ch+String], 2
.text:00412E2D                 mov     ebx, [esp+3Ch+String]
.text:00412E31                 movzx   edx, byte ptr [ebx]
.text:00412E34                 jmp     loc_412B08
.text:00412E39 ; ---------------------------------------------------------------------------
.text:00412E39
.text:00412E39 loc_412E39:                             ; CODE XREF: _strtoull+AF↑j
.text:00412E39                 mov     edi, [esp+3Ch+String]
.text:00412E3D                 movzx   eax, byte ptr [edi+1]
.text:00412E41                 cmp     al, 58h ; 'X'
.text:00412E43                 jz      short loc_412E55
.text:00412E45                 mov     [esp+3Ch+Radix], 8
.text:00412E4D                 cmp     al, 78h ; 'x'
.text:00412E4F                 jnz     loc_412AFD
.text:00412E55
.text:00412E55 loc_412E55:                             ; CODE XREF: _strtoull+403↑j
.text:00412E55                 mov     [esp+3Ch+Radix], 10h
.text:00412E5D                 jmp     loc_412AFD
.text:00412E62 ; ---------------------------------------------------------------------------
.text:00412E62
.text:00412E62 loc_412E62:                             ; CODE XREF: _strtoull+95↑j
.text:00412E62                                         ; _strtoull+9E↑j
.text:00412E62                 inc     [esp+3Ch+String]
.text:00412E66                 mov     eax, [esp+3Ch+String]
.text:00412E6A                 movzx   edx, byte ptr [eax]
.text:00412E6D                 jmp     loc_412AE4
.text:00412E72 ; ---------------------------------------------------------------------------
.text:00412E72
.text:00412E72 loc_412E72:                             ; CODE XREF: _strtoull+5A↑j
.text:00412E72                 mov     ebp, ds:_pctype
.text:00412E78                 mov     edi, [ebp+0]
.text:00412E7B                 movzx   ebx, word ptr [edi+edx*2]
.text:00412E7F                 and     ebx, 8
.text:00412E82                 movzx   eax, bx
.text:00412E85                 jmp     loc_412AB6
.text:00412E85 _strtoull       endp
.text:00412E85
.text:00412E85 ; ---------------------------------------------------------------------------
.text:00412E8A                 align 10h
.text:00412E90                 jmp     ds:__set_app_type
.text:00412E90 ; ---------------------------------------------------------------------------
.text:00412E96                 align 10h
.text:00412EA0
.text:00412EA0 ; =============== S U B R O U T I N E =======================================
.text:00412EA0
.text:00412EA0 ; Attributes: thunk
.text:00412EA0
.text:00412EA0 ; void __cdecl cexit()
.text:00412EA0 _cexit          proc near               ; CODE XREF: sub_401080+EC↑p
.text:00412EA0                 jmp     ds:__imp__cexit
.text:00412EA0 _cexit          endp
.text:00412EA0
.text:00412EA0 ; ---------------------------------------------------------------------------
.text:00412EA6                 align 10h
.text:00412EB0
.text:00412EB0 ; =============== S U B R O U T I N E =======================================
.text:00412EB0
.text:00412EB0 ; Attributes: thunk
.text:00412EB0
.text:00412EB0 ; char ***__cdecl _p__environ()
.text:00412EB0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00412EB0                 jmp     ds:__imp___p__environ
.text:00412EB0 __p__environ    endp
.text:00412EB0
.text:00412EB0 ; ---------------------------------------------------------------------------
.text:00412EB6                 align 10h
.text:00412EC0
.text:00412EC0 ; =============== S U B R O U T I N E =======================================
.text:00412EC0
.text:00412EC0 ; Attributes: thunk
.text:00412EC0
.text:00412EC0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00412EC0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00412EC0                                         ; TopLevelExceptionFilter+88↑p ...
.text:00412EC0
.text:00412EC0 Signal          = dword ptr  4
.text:00412EC0 Function        = dword ptr  8
.text:00412EC0
.text:00412EC0                 jmp     ds:__imp_signal
.text:00412EC0 signal          endp
.text:00412EC0
.text:00412EC0 ; ---------------------------------------------------------------------------
.text:00412EC6                 align 10h
.text:00412ED0
.text:00412ED0 ; =============== S U B R O U T I N E =======================================
.text:00412ED0
.text:00412ED0 ; Attributes: thunk
.text:00412ED0
.text:00412ED0 ; int *__cdecl _p__fmode()
.text:00412ED0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00412ED0                 jmp     ds:__imp___p__fmode
.text:00412ED0 __p__fmode      endp
.text:00412ED0
.text:00412ED0 ; ---------------------------------------------------------------------------
.text:00412ED6                 align 10h
.text:00412EE0
.text:00412EE0 ; =============== S U B R O U T I N E =======================================
.text:00412EE0
.text:00412EE0 ; Attributes: thunk
.text:00412EE0
.text:00412EE0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00412EE0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00412EE0                                         ; sub_401080+90↑p ...
.text:00412EE0
.text:00412EE0 FileHandle      = dword ptr  4
.text:00412EE0 Mode            = dword ptr  8
.text:00412EE0
.text:00412EE0                 jmp     ds:__imp__setmode
.text:00412EE0 _setmode        endp
.text:00412EE0
.text:00412EE0 ; ---------------------------------------------------------------------------
.text:00412EE6                 align 10h
.text:00412EF0
.text:00412EF0 ; =============== S U B R O U T I N E =======================================
.text:00412EF0
.text:00412EF0 ; Attributes: thunk
.text:00412EF0
.text:00412EF0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00412EF0                 jmp     ds:__imp___getmainargs
.text:00412EF0 __getmainargs   endp
.text:00412EF0
.text:00412EF0 ; ---------------------------------------------------------------------------
.text:00412EF6                 align 10h
.text:00412F00
.text:00412F00 ; =============== S U B R O U T I N E =======================================
.text:00412F00
.text:00412F00 ; Attributes: thunk
.text:00412F00
.text:00412F00 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00412F00 setlocale       proc near               ; CODE XREF: sub_4025D0+5B↑p
.text:00412F00
.text:00412F00 Category        = dword ptr  4
.text:00412F00 Locale          = dword ptr  8
.text:00412F00
.text:00412F00                 jmp     ds:__imp_setlocale
.text:00412F00 setlocale       endp
.text:00412F00
.text:00412F00 ; ---------------------------------------------------------------------------
.text:00412F06                 align 10h
.text:00412F10
.text:00412F10 ; =============== S U B R O U T I N E =======================================
.text:00412F10
.text:00412F10 ; Attributes: thunk
.text:00412F10
.text:00412F10 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00412F10 memset          proc near               ; CODE XREF: sub_405980+1FC↑p
.text:00412F10                                         ; .text:00408B06↑p
.text:00412F10
.text:00412F10 Val             = dword ptr  8
.text:00412F10 Size            = dword ptr  0Ch
.text:00412F10
.text:00412F10                 jmp     ds:__imp_memset
.text:00412F10 memset          endp
.text:00412F10
.text:00412F10 ; ---------------------------------------------------------------------------
.text:00412F16                 align 10h
.text:00412F20
.text:00412F20 ; =============== S U B R O U T I N E =======================================
.text:00412F20
.text:00412F20 ; Attributes: thunk
.text:00412F20
.text:00412F20 ; void __cdecl free(void *Block)
.text:00412F20 free            proc near               ; CODE XREF: sub_405980+2E7↑p
.text:00412F20                                         ; sub_406160:loc_4065BD↑p ...
.text:00412F20
.text:00412F20 Block           = dword ptr  4
.text:00412F20
.text:00412F20                 jmp     ds:__imp_free
.text:00412F20 free            endp
.text:00412F20
.text:00412F20 ; ---------------------------------------------------------------------------
.text:00412F26                 align 10h
.text:00412F30
.text:00412F30 ; =============== S U B R O U T I N E =======================================
.text:00412F30
.text:00412F30 ; Attributes: thunk
.text:00412F30
.text:00412F30 ; int __cdecl fgetc(FILE *Stream)
.text:00412F30 fgetc           proc near               ; CODE XREF: sub_406160+473↑p
.text:00412F30                                         ; sub_406160+625↑p
.text:00412F30
.text:00412F30 Stream          = dword ptr  4
.text:00412F30
.text:00412F30                 jmp     ds:__imp_fgetc
.text:00412F30 fgetc           endp
.text:00412F30
.text:00412F30 ; ---------------------------------------------------------------------------
.text:00412F36                 align 10h
.text:00412F40
.text:00412F40 ; =============== S U B R O U T I N E =======================================
.text:00412F40
.text:00412F40 ; Attributes: thunk
.text:00412F40
.text:00412F40 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00412F40 fwrite          proc near               ; CODE XREF: sub_406160:loc_406438↑p
.text:00412F40                                         ; sub_406EA0+178↑p
.text:00412F40
.text:00412F40 Buffer          = dword ptr  4
.text:00412F40 ElementSize     = dword ptr  8
.text:00412F40 ElementCount    = dword ptr  0Ch
.text:00412F40 Stream          = dword ptr  10h
.text:00412F40
.text:00412F40                 jmp     ds:__imp_fwrite
.text:00412F40 fwrite          endp
.text:00412F40
.text:00412F40 ; ---------------------------------------------------------------------------
.text:00412F46                 align 10h
.text:00412F50
.text:00412F50 ; =============== S U B R O U T I N E =======================================
.text:00412F50
.text:00412F50 ; Attributes: thunk
.text:00412F50
.text:00412F50 ; int __cdecl puts(const char *Buffer)
.text:00412F50 puts            proc near               ; CODE XREF: sub_406EA0+29D↑p
.text:00412F50
.text:00412F50 Buffer          = dword ptr  4
.text:00412F50
.text:00412F50                 jmp     ds:__imp_puts
.text:00412F50 puts            endp
.text:00412F50
.text:00412F50 ; ---------------------------------------------------------------------------
.text:00412F56                 align 10h
.text:00412F60
.text:00412F60 ; =============== S U B R O U T I N E =======================================
.text:00412F60
.text:00412F60 ; Attributes: thunk
.text:00412F60
.text:00412F60 ; size_t __cdecl fread(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00412F60 fread           proc near               ; CODE XREF: sub_4051F0+C7↑p
.text:00412F60                                         ; sub_405980+3DF↑p ...
.text:00412F60
.text:00412F60 Buffer          = dword ptr  4
.text:00412F60 ElementSize     = dword ptr  8
.text:00412F60 ElementCount    = dword ptr  0Ch
.text:00412F60 Stream          = dword ptr  10h
.text:00412F60
.text:00412F60                 jmp     ds:__imp_fread
.text:00412F60 fread           endp
.text:00412F60
.text:00412F60 ; ---------------------------------------------------------------------------
.text:00412F66                 align 10h
.text:00412F70
.text:00412F70 ; =============== S U B R O U T I N E =======================================
.text:00412F70
.text:00412F70 ; Attributes: thunk
.text:00412F70
.text:00412F70 ; int __cdecl fclose(FILE *Stream)
.text:00412F70 fclose          proc near               ; CODE XREF: sub_4025D0+1B05↑p
.text:00412F70                                         ; sub_4051F0+128↑p ...
.text:00412F70
.text:00412F70 Stream          = dword ptr  4
.text:00412F70
.text:00412F70                 jmp     ds:__imp_fclose
.text:00412F70 fclose          endp
.text:00412F70
.text:00412F70 ; ---------------------------------------------------------------------------
.text:00412F76                 align 10h
.text:00412F80
.text:00412F80 ; =============== S U B R O U T I N E =======================================
.text:00412F80
.text:00412F80 ; Attributes: thunk
.text:00412F80
.text:00412F80 ; int *__cdecl errno()
.text:00412F80 _errno          proc near               ; CODE XREF: sub_4025D0+1B1C↑p
.text:00412F80                                         ; sub_405070+FD↑p ...
.text:00412F80                 jmp     ds:__imp__errno
.text:00412F80 _errno          endp
.text:00412F80
.text:00412F80 ; ---------------------------------------------------------------------------
.text:00412F86                 align 10h
.text:00412F90
.text:00412F90 ; =============== S U B R O U T I N E =======================================
.text:00412F90
.text:00412F90 ; Attributes: noreturn thunk
.text:00412F90
.text:00412F90 ; void __cdecl __noreturn abort()
.text:00412F90 abort           proc near               ; CODE XREF: sub_4025D0:loc_404662↑p
.text:00412F90                                         ; sub_404A80:def_404CAE↑p ...
.text:00412F90                 jmp     ds:__imp_abort
.text:00412F90 abort           endp
.text:00412F90
.text:00412F90 ; ---------------------------------------------------------------------------
.text:00412F96                 align 10h
.text:00412FA0
.text:00412FA0 ; =============== S U B R O U T I N E =======================================
.text:00412FA0
.text:00412FA0 ; Attributes: noreturn thunk
.text:00412FA0
.text:00412FA0 _assert         proc near               ; CODE XREF: sub_4025D0:loc_402F2F↑p
.text:00412FA0                                         ; sub_404A80:loc_404D6B↑p ...
.text:00412FA0                 jmp     ds:__imp__assert
.text:00412FA0 _assert         endp
.text:00412FA0
.text:00412FA0 ; ---------------------------------------------------------------------------
.text:00412FA6                 align 10h
.text:00412FB0
.text:00412FB0 ; =============== S U B R O U T I N E =======================================
.text:00412FB0
.text:00412FB0 ; Attributes: thunk
.text:00412FB0
.text:00412FB0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00412FB0 sprintf         proc near               ; CODE XREF: sub_404A80+1E7↑p
.text:00412FB0                                         ; sub_404A80+539↑p ...
.text:00412FB0
.text:00412FB0 Buffer          = dword ptr  4
.text:00412FB0 Format          = dword ptr  8
.text:00412FB0
.text:00412FB0                 jmp     ds:__imp_sprintf
.text:00412FB0 sprintf         endp
.text:00412FB0
.text:00412FB0 ; ---------------------------------------------------------------------------
.text:00412FB6                 align 10h
.text:00412FC0
.text:00412FC0 ; =============== S U B R O U T I N E =======================================
.text:00412FC0
.text:00412FC0 ; Attributes: noreturn thunk
.text:00412FC0
.text:00412FC0 ; void __cdecl __noreturn exit(int Code)
.text:00412FC0 exit            proc near               ; CODE XREF: sub_4025D0:loc_402C7E↑p
.text:00412FC0                                         ; .text:004046AB↑p ...
.text:00412FC0
.text:00412FC0 Code            = dword ptr  4
.text:00412FC0
.text:00412FC0                 jmp     ds:__imp_exit
.text:00412FC0 exit            endp
.text:00412FC0
.text:00412FC0 ; ---------------------------------------------------------------------------
.text:00412FC6                 align 10h
.text:00412FD0
.text:00412FD0 ; =============== S U B R O U T I N E =======================================
.text:00412FD0
.text:00412FD0 ; Attributes: thunk
.text:00412FD0
.text:00412FD0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00412FD0 fputs           proc near               ; CODE XREF: sub_4025D0+6F7↑p
.text:00412FD0                                         ; sub_4025D0+719↑p ...
.text:00412FD0
.text:00412FD0 Buffer          = dword ptr  4
.text:00412FD0 Stream          = dword ptr  8
.text:00412FD0
.text:00412FD0                 jmp     ds:__imp_fputs
.text:00412FD0 fputs           endp
.text:00412FD0
.text:00412FD0 ; ---------------------------------------------------------------------------
.text:00412FD6                 align 10h
.text:00412FE0
.text:00412FE0 ; =============== S U B R O U T I N E =======================================
.text:00412FE0
.text:00412FE0 ; Attributes: thunk
.text:00412FE0
.text:00412FE0 ; int printf(const char *const Format, ...)
.text:00412FE0 printf          proc near               ; CODE XREF: sub_4025D0+6D5↑p
.text:00412FE0                                         ; sub_4025D0+8AC↑p ...
.text:00412FE0
.text:00412FE0 Format          = dword ptr  4
.text:00412FE0
.text:00412FE0                 jmp     ds:__imp_printf
.text:00412FE0 printf          endp
.text:00412FE0
.text:00412FE0 ; ---------------------------------------------------------------------------
.text:00412FE6                 align 10h
.text:00412FF0
.text:00412FF0 ; =============== S U B R O U T I N E =======================================
.text:00412FF0
.text:00412FF0 ; Attributes: thunk
.text:00412FF0
.text:00412FF0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00412FF0 fprintf         proc near               ; CODE XREF: sub_4025D0+17E8↑p
.text:00412FF0                                         ; .text:004046A3↑p ...
.text:00412FF0
.text:00412FF0 Stream          = dword ptr  4
.text:00412FF0 Format          = dword ptr  8
.text:00412FF0
.text:00412FF0                 jmp     ds:__imp_fprintf
.text:00412FF0 fprintf         endp
.text:00412FF0
.text:00412FF0 ; ---------------------------------------------------------------------------
.text:00412FF6                 align 10h
.text:00413000
.text:00413000 ; =============== S U B R O U T I N E =======================================
.text:00413000
.text:00413000 ; Attributes: thunk
.text:00413000
.text:00413000 ; int __cdecl isctype(int C, int Type)
.text:00413000 _isctype        proc near               ; CODE XREF: sub_406160+115↑p
.text:00413000                                         ; sub_406160+1F5↑p ...
.text:00413000
.text:00413000 C               = dword ptr  4
.text:00413000 Type            = dword ptr  8
.text:00413000
.text:00413000                 jmp     ds:__imp__isctype
.text:00413000 _isctype        endp
.text:00413000
.text:00413000 ; ---------------------------------------------------------------------------
.text:00413006                 align 10h
.text:00413010
.text:00413010 ; =============== S U B R O U T I N E =======================================
.text:00413010
.text:00413010 ; Attributes: thunk
.text:00413010
.text:00413010 ; char *__cdecl strchr(const char *Str, int Val)
.text:00413010 strchr          proc near               ; CODE XREF: sub_4025D0+1CA1↑p
.text:00413010                                         ; sub_4025D0+1D63↑p ...
.text:00413010
.text:00413010 Str             = dword ptr  4
.text:00413010 Val             = dword ptr  8
.text:00413010
.text:00413010                 jmp     ds:__imp_strchr
.text:00413010 strchr          endp
.text:00413010
.text:00413010 ; ---------------------------------------------------------------------------
.text:00413016                 align 10h
.text:00413020
.text:00413020 ; =============== S U B R O U T I N E =======================================
.text:00413020
.text:00413020 ; Attributes: thunk
.text:00413020
.text:00413020 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00413020 fopen           proc near               ; CODE XREF: sub_405070+EB↑p
.text:00413020                                         ; sub_41002F+26↑p ...
.text:00413020
.text:00413020 FileName        = dword ptr  4
.text:00413020 Mode            = dword ptr  8
.text:00413020
.text:00413020                 jmp     ds:__imp_fopen
.text:00413020 fopen           endp
.text:00413020
.text:00413020 ; ---------------------------------------------------------------------------
.text:00413026                 align 10h
.text:00413030
.text:00413030 ; =============== S U B R O U T I N E =======================================
.text:00413030
.text:00413030 ; Attributes: thunk
.text:00413030
.text:00413030 ; int __cdecl setvbuf(FILE *Stream, char *Buffer, int Mode, size_t Size)
.text:00413030 setvbuf         proc near               ; CODE XREF: sub_405070+D2↑p
.text:00413030
.text:00413030 Stream          = dword ptr  4
.text:00413030 Buffer          = dword ptr  8
.text:00413030 Mode            = dword ptr  0Ch
.text:00413030 Size            = dword ptr  10h
.text:00413030
.text:00413030                 jmp     ds:__imp_setvbuf
.text:00413030 setvbuf         endp
.text:00413030
.text:00413030 ; ---------------------------------------------------------------------------
.text:00413036                 align 10h
.text:00413040
.text:00413040 ; =============== S U B R O U T I N E =======================================
.text:00413040
.text:00413040 ; Attributes: thunk
.text:00413040
.text:00413040 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00413040 _flsbuf         proc near               ; CODE XREF: sub_405650+D7↑p
.text:00413040                                         ; sub_405650+185↑p ...
.text:00413040
.text:00413040 File            = dword ptr  8
.text:00413040
.text:00413040                 jmp     ds:__imp__flsbuf
.text:00413040 _flsbuf         endp
.text:00413040
.text:00413040 ; ---------------------------------------------------------------------------
.text:00413046                 align 10h
.text:00413050
.text:00413050 ; =============== S U B R O U T I N E =======================================
.text:00413050
.text:00413050 ; Attributes: thunk
.text:00413050
.text:00413050 ; size_t __cdecl strlen(const char *Str)
.text:00413050 strlen          proc near               ; CODE XREF: sub_4073B0+2A9↑p
.text:00413050                                         ; sub_4073B0+346↑p ...
.text:00413050
.text:00413050 Str             = dword ptr  4
.text:00413050
.text:00413050                 jmp     ds:__imp_strlen
.text:00413050 strlen          endp
.text:00413050
.text:00413050 ; ---------------------------------------------------------------------------
.text:00413056                 align 10h
.text:00413060
.text:00413060 ; =============== S U B R O U T I N E =======================================
.text:00413060
.text:00413060 ; Attributes: thunk
.text:00413060
.text:00413060 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00413060 strncmp         proc near               ; CODE XREF: sub_4073B0+23F↑p
.text:00413060                                         ; sub_4073B0+699↑p
.text:00413060
.text:00413060 Str1            = dword ptr  4
.text:00413060 Str2            = dword ptr  8
.text:00413060 MaxCount        = dword ptr  0Ch
.text:00413060
.text:00413060                 jmp     ds:__imp_strncmp
.text:00413060 strncmp         endp
.text:00413060
.text:00413060 ; ---------------------------------------------------------------------------
.text:00413066                 align 10h
.text:00413070
.text:00413070 ; =============== S U B R O U T I N E =======================================
.text:00413070
.text:00413070 ; Attributes: thunk
.text:00413070
.text:00413070 ; char *__cdecl getenv(const char *VarName)
.text:00413070 getenv          proc near               ; CODE XREF: sub_4073B0+B57↑p
.text:00413070                                         ; sub_408940+13↑p ...
.text:00413070
.text:00413070 VarName         = dword ptr  4
.text:00413070
.text:00413070                 jmp     ds:__imp_getenv
.text:00413070 getenv          endp
.text:00413070
.text:00413070 ; ---------------------------------------------------------------------------
.text:00413076                 align 10h
.text:00413080
.text:00413080 ; =============== S U B R O U T I N E =======================================
.text:00413080
.text:00413080 ; Attributes: thunk
.text:00413080
.text:00413080 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00413080 vfprintf        proc near               ; CODE XREF: sub_4084D0+C1↑p
.text:00413080                                         ; sub_40ADC0+49↑p ...
.text:00413080
.text:00413080 Stream          = dword ptr  4
.text:00413080 Format          = dword ptr  8
.text:00413080 ArgList         = dword ptr  0Ch
.text:00413080
.text:00413080                 jmp     ds:__imp_vfprintf
.text:00413080 vfprintf        endp
.text:00413080
.text:00413080 ; ---------------------------------------------------------------------------
.text:00413086                 align 10h
.text:00413090
.text:00413090 ; =============== S U B R O U T I N E =======================================
.text:00413090
.text:00413090 ; Attributes: thunk
.text:00413090
.text:00413090 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00413090 strtol          proc near               ; CODE XREF: sub_408940+43↑p
.text:00413090
.text:00413090 String          = dword ptr  4
.text:00413090 EndPtr          = dword ptr  8
.text:00413090 Radix           = dword ptr  0Ch
.text:00413090
.text:00413090                 jmp     ds:__imp_strtol
.text:00413090 strtol          endp
.text:00413090
.text:00413090 ; ---------------------------------------------------------------------------
.text:00413096                 align 10h
.text:004130A0
.text:004130A0 ; =============== S U B R O U T I N E =======================================
.text:004130A0
.text:004130A0 ; Attributes: thunk
.text:004130A0
.text:004130A0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004130A0 memcpy          proc near               ; CODE XREF: .text:00408B88↑p
.text:004130A0                                         ; .text:00408BD1↑p
.text:004130A0
.text:004130A0 Src             = dword ptr  8
.text:004130A0 Size            = dword ptr  0Ch
.text:004130A0
.text:004130A0                 jmp     ds:__imp_memcpy
.text:004130A0 memcpy          endp
.text:004130A0
.text:004130A0 ; ---------------------------------------------------------------------------
.text:004130A6                 align 10h
.text:004130B0
.text:004130B0 ; =============== S U B R O U T I N E =======================================
.text:004130B0
.text:004130B0 ; Attributes: thunk
.text:004130B0
.text:004130B0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004130B0 calloc          proc near               ; CODE XREF: .text:00408B43↑p
.text:004130B0                                         ; sub_40D730+AC↑p
.text:004130B0
.text:004130B0 Count           = dword ptr  4
.text:004130B0 Size            = dword ptr  8
.text:004130B0
.text:004130B0                 jmp     ds:__imp_calloc
.text:004130B0 calloc          endp
.text:004130B0
.text:004130B0 ; ---------------------------------------------------------------------------
.text:004130B6                 align 10h
.text:004130C0
.text:004130C0 ; =============== S U B R O U T I N E =======================================
.text:004130C0
.text:004130C0 ; Attributes: thunk
.text:004130C0
.text:004130C0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004130C0 realloc         proc near               ; CODE XREF: .text:00408A40↑p
.text:004130C0                                         ; sub_408A70+16↑p ...
.text:004130C0
.text:004130C0 Block           = dword ptr  4
.text:004130C0 Size            = dword ptr  8
.text:004130C0
.text:004130C0                 jmp     ds:__imp_realloc
.text:004130C0 realloc         endp
.text:004130C0
.text:004130C0 ; ---------------------------------------------------------------------------
.text:004130C6                 align 10h
.text:004130D0
.text:004130D0 ; =============== S U B R O U T I N E =======================================
.text:004130D0
.text:004130D0 ; Attributes: thunk
.text:004130D0
.text:004130D0 ; void *__cdecl malloc(size_t Size)
.text:004130D0 malloc          proc near               ; CODE XREF: sub_4089A0+24↑p
.text:004130D0                                         ; sub_4089E0+E↑p ...
.text:004130D0
.text:004130D0 Size            = dword ptr  4
.text:004130D0
.text:004130D0                 jmp     ds:__imp_malloc
.text:004130D0 malloc          endp
.text:004130D0
.text:004130D0 ; ---------------------------------------------------------------------------
.text:004130D6                 align 10h
.text:004130E0
.text:004130E0 ; =============== S U B R O U T I N E =======================================
.text:004130E0
.text:004130E0 ; Attributes: thunk
.text:004130E0
.text:004130E0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004130E0 iswctype        proc near               ; CODE XREF: sub_409A00+78B↑p
.text:004130E0
.text:004130E0 C               = word ptr  4
.text:004130E0 Type            = word ptr  8
.text:004130E0
.text:004130E0                 jmp     ds:__imp_iswctype
.text:004130E0 iswctype        endp
.text:004130E0
.text:004130E0 ; ---------------------------------------------------------------------------
.text:004130E6                 align 10h
.text:004130F0
.text:004130F0 ; =============== S U B R O U T I N E =======================================
.text:004130F0
.text:004130F0 ; Attributes: thunk
.text:004130F0
.text:004130F0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004130F0 strcmp          proc near               ; CODE XREF: sub_40AEC4+180↑p
.text:004130F0                                         ; .text:0040F4EB↑p
.text:004130F0
.text:004130F0 Str1            = dword ptr  4
.text:004130F0 Str2            = dword ptr  8
.text:004130F0
.text:004130F0                 jmp     ds:__imp_strcmp
.text:004130F0 strcmp          endp
.text:004130F0
.text:004130F0 ; ---------------------------------------------------------------------------
.text:004130F6                 align 10h
.text:00413100
.text:00413100 ; =============== S U B R O U T I N E =======================================
.text:00413100
.text:00413100 ; Attributes: thunk
.text:00413100
.text:00413100 ; int __cdecl fflush(FILE *Stream)
.text:00413100 fflush          proc near               ; CODE XREF: sub_40ADC0+19↑p
.text:00413100                                         ; sub_40ADC0+81↑p ...
.text:00413100
.text:00413100 Stream          = dword ptr  4
.text:00413100
.text:00413100                 jmp     ds:__imp_fflush
.text:00413100 fflush          endp
.text:00413100
.text:00413100 ; ---------------------------------------------------------------------------
.text:00413106                 align 10h
.text:00413110
.text:00413110 ; =============== S U B R O U T I N E =======================================
.text:00413110
.text:00413110 ; Attributes: thunk
.text:00413110
.text:00413110 ; char *__cdecl strerror(int ErrorMessage)
.text:00413110 strerror        proc near               ; CODE XREF: sub_40ADC0+A5↑p
.text:00413110                                         ; sub_40AEC4+10F↑p
.text:00413110
.text:00413110 ErrorMessage    = dword ptr  4
.text:00413110
.text:00413110                 jmp     ds:__imp_strerror
.text:00413110 strerror        endp
.text:00413110
.text:00413110 ; ---------------------------------------------------------------------------
.text:00413116                 align 10h
.text:00413120
.text:00413120 ; =============== S U B R O U T I N E =======================================
.text:00413120
.text:00413120 ; Attributes: thunk
.text:00413120
.text:00413120 ; char *__cdecl ctime(const __time32_t *const Time)
.text:00413120 ctime           proc near               ; CODE XREF: .text:0040B22D↑p
.text:00413120                                         ; .text:0040B24F↑p ...
.text:00413120
.text:00413120 Time            = dword ptr  4
.text:00413120
.text:00413120                 jmp     ds:__imp_ctime
.text:00413120 ctime           endp
.text:00413120
.text:00413120 ; ---------------------------------------------------------------------------
.text:00413126                 align 10h
.text:00413130
.text:00413130 ; =============== S U B R O U T I N E =======================================
.text:00413130
.text:00413130 ; Attributes: thunk
.text:00413130
.text:00413130 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00413130 _get_osfhandle  proc near               ; CODE XREF: sub_40B2D0+3A↑p
.text:00413130                                         ; sub_4101C0+15↑p
.text:00413130
.text:00413130 FileHandle      = dword ptr  4
.text:00413130
.text:00413130                 jmp     ds:__imp__get_osfhandle
.text:00413130 _get_osfhandle  endp
.text:00413130
.text:00413130 ; ---------------------------------------------------------------------------
.text:00413136                 align 10h
.text:00413140
.text:00413140 ; =============== S U B R O U T I N E =======================================
.text:00413140
.text:00413140 ; Attributes: thunk
.text:00413140
.text:00413140 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00413140 strcat          proc near               ; CODE XREF: sub_40B2D0+2F8↑p
.text:00413140                                         ; .text:0040ECA3↑p ...
.text:00413140
.text:00413140 Destination     = dword ptr  4
.text:00413140 Source          = dword ptr  8
.text:00413140
.text:00413140                 jmp     ds:__imp_strcat
.text:00413140 strcat          endp
.text:00413140
.text:00413140 ; ---------------------------------------------------------------------------
.text:00413146                 align 10h
.text:00413150
.text:00413150 ; =============== S U B R O U T I N E =======================================
.text:00413150
.text:00413150 ; Attributes: thunk
.text:00413150
.text:00413150 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00413150 strcpy          proc near               ; CODE XREF: sub_40B2D0+2D3↑p
.text:00413150                                         ; _win32_longpath+13C↑p ...
.text:00413150
.text:00413150 Destination     = dword ptr  4
.text:00413150 Source          = dword ptr  8
.text:00413150
.text:00413150                 jmp     ds:__imp_strcpy
.text:00413150 strcpy          endp
.text:00413150
.text:00413150 ; ---------------------------------------------------------------------------
.text:00413156                 align 10h
.text:00413160
.text:00413160 ; =============== S U B R O U T I N E =======================================
.text:00413160
.text:00413160 ; Attributes: thunk
.text:00413160
.text:00413160 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00413160 strstr          proc near               ; CODE XREF: sub_40BB80+3BF↑p
.text:00413160                                         ; sub_40BB80+3DC↑p ...
.text:00413160
.text:00413160 Str             = dword ptr  4
.text:00413160 SubStr          = dword ptr  8
.text:00413160
.text:00413160                 jmp     ds:__imp_strstr
.text:00413160 strstr          endp
.text:00413160
.text:00413160 ; ---------------------------------------------------------------------------
.text:00413166                 align 10h
.text:00413170
.text:00413170 ; =============== S U B R O U T I N E =======================================
.text:00413170
.text:00413170 ; Attributes: thunk
.text:00413170
.text:00413170 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00413170 strrchr         proc near               ; CODE XREF: sub_40BB80+CB↑p
.text:00413170                                         ; sub_40BB80+3A7↑p ...
.text:00413170
.text:00413170 Str             = dword ptr  4
.text:00413170
.text:00413170                 jmp     ds:__imp_strrchr
.text:00413170 strrchr         endp
.text:00413170
.text:00413170 ; ---------------------------------------------------------------------------
.text:00413176                 align 10h
.text:00413180
.text:00413180 ; =============== S U B R O U T I N E =======================================
.text:00413180
.text:00413180 ; Attributes: thunk
.text:00413180
.text:00413180 ; int __cdecl isalpha(int C)
.text:00413180 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00413180
.text:00413180 C               = dword ptr  4
.text:00413180
.text:00413180                 jmp     ds:__imp_isalpha
.text:00413180 isalpha         endp
.text:00413180
.text:00413180 ; ---------------------------------------------------------------------------
.text:00413186                 align 10h
.text:00413190
.text:00413190 ; =============== S U B R O U T I N E =======================================
.text:00413190
.text:00413190 ; Attributes: thunk
.text:00413190
.text:00413190 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00413190 _stricmp_0      proc near               ; CODE XREF: .text:0040D5A4↑p
.text:00413190
.text:00413190 String1         = dword ptr  4
.text:00413190 String2         = dword ptr  8
.text:00413190
.text:00413190                 jmp     ds:__imp__stricmp_0
.text:00413190 _stricmp_0      endp
.text:00413190
.text:00413190 ; ---------------------------------------------------------------------------
.text:00413196                 align 10h
.text:004131A0
.text:004131A0 ; =============== S U B R O U T I N E =======================================
.text:004131A0
.text:004131A0 ; Attributes: thunk
.text:004131A0
.text:004131A0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:004131A0 strncpy         proc near               ; CODE XREF: sub_40D730+BE↑p
.text:004131A0                                         ; .text:0040DFAA↑p ...
.text:004131A0
.text:004131A0 Destination     = dword ptr  4
.text:004131A0 Source          = dword ptr  8
.text:004131A0 Count           = dword ptr  0Ch
.text:004131A0
.text:004131A0                 jmp     ds:__imp_strncpy
.text:004131A0 strncpy         endp
.text:004131A0
.text:004131A0 ; ---------------------------------------------------------------------------
.text:004131A6                 align 10h
.text:004131B0
.text:004131B0 ; =============== S U B R O U T I N E =======================================
.text:004131B0
.text:004131B0 ; Attributes: thunk
.text:004131B0
.text:004131B0 ; int __cdecl toupper(int C)
.text:004131B0 toupper         proc near               ; CODE XREF: sub_40D730+10E↑p
.text:004131B0
.text:004131B0 C               = dword ptr  4
.text:004131B0
.text:004131B0                 jmp     ds:__imp_toupper
.text:004131B0 toupper         endp
.text:004131B0
.text:004131B0 ; ---------------------------------------------------------------------------
.text:004131B6                 align 10h
.text:004131C0
.text:004131C0 ; =============== S U B R O U T I N E =======================================
.text:004131C0
.text:004131C0 ; Attributes: thunk
.text:004131C0
.text:004131C0 ; int __cdecl fsetpos(FILE *Stream, const fpos_t *Position)
.text:004131C0 fsetpos         proc near               ; CODE XREF: sub_40E3F0+44↑p
.text:004131C0
.text:004131C0 Stream          = dword ptr  4
.text:004131C0 Position        = dword ptr  8
.text:004131C0
.text:004131C0                 jmp     ds:__imp_fsetpos
.text:004131C0 fsetpos         endp
.text:004131C0
.text:004131C0 ; ---------------------------------------------------------------------------
.text:004131C6                 align 10h
.text:004131D0
.text:004131D0 ; =============== S U B R O U T I N E =======================================
.text:004131D0
.text:004131D0 ; Attributes: thunk
.text:004131D0
.text:004131D0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:004131D0 _filelengthi64  proc near               ; CODE XREF: sub_40E3F0+6A↑p
.text:004131D0                                         ; sub_4101C0+1F↑p
.text:004131D0
.text:004131D0 FileHandle      = dword ptr  4
.text:004131D0
.text:004131D0                 jmp     ds:__imp__filelengthi64
.text:004131D0 _filelengthi64  endp
.text:004131D0
.text:004131D0 ; ---------------------------------------------------------------------------
.text:004131D6                 align 10h
.text:004131E0
.text:004131E0 ; =============== S U B R O U T I N E =======================================
.text:004131E0
.text:004131E0 ; Attributes: thunk
.text:004131E0
.text:004131E0 ; int __cdecl fgetpos(FILE *Stream, fpos_t *Position)
.text:004131E0 fgetpos         proc near               ; CODE XREF: sub_40E3F0+80↑p
.text:004131E0
.text:004131E0 Stream          = dword ptr  4
.text:004131E0 Position        = dword ptr  8
.text:004131E0
.text:004131E0                 jmp     ds:__imp_fgetpos
.text:004131E0 fgetpos         endp
.text:004131E0
.text:004131E0 ; ---------------------------------------------------------------------------
.text:004131E6                 align 10h
.text:004131F0
.text:004131F0 ; =============== S U B R O U T I N E =======================================
.text:004131F0
.text:004131F0 ; Attributes: thunk
.text:004131F0
.text:004131F0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:004131F0 sscanf          proc near               ; CODE XREF: .text:0040F72E↑p
.text:004131F0
.text:004131F0 Buffer          = dword ptr  4
.text:004131F0 Format          = dword ptr  8
.text:004131F0
.text:004131F0                 jmp     ds:__imp_sscanf
.text:004131F0 sscanf          endp
.text:004131F0
.text:004131F0 ; ---------------------------------------------------------------------------
.text:004131F6                 align 10h
.text:00413200
.text:00413200 ; =============== S U B R O U T I N E =======================================
.text:00413200
.text:00413200 ; Attributes: thunk
.text:00413200
.text:00413200 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00413200 strspn          proc near               ; CODE XREF: .text:0040F57A↑p
.text:00413200                                         ; .text:0040F794↑p ...
.text:00413200
.text:00413200 Str             = dword ptr  4
.text:00413200 Control         = dword ptr  8
.text:00413200
.text:00413200                 jmp     ds:__imp_strspn
.text:00413200 strspn          endp
.text:00413200
.text:00413200 ; ---------------------------------------------------------------------------
.text:00413206                 align 10h
.text:00413210
.text:00413210 ; =============== S U B R O U T I N E =======================================
.text:00413210
.text:00413210 ; Attributes: thunk
.text:00413210
.text:00413210 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00413210 strpbrk         proc near               ; CODE XREF: sub_410220+87↑p
.text:00413210
.text:00413210 Str             = dword ptr  4
.text:00413210 Control         = dword ptr  8
.text:00413210
.text:00413210                 jmp     ds:__imp_strpbrk
.text:00413210 strpbrk         endp
.text:00413210
.text:00413210 ; ---------------------------------------------------------------------------
.text:00413216                 align 10h
.text:00413220
.text:00413220 ; =============== S U B R O U T I N E =======================================
.text:00413220
.text:00413220 ; Attributes: thunk
.text:00413220
.text:00413220 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00413220 _fdopen         proc near               ; CODE XREF: sub_4102C0+69↑p
.text:00413220
.text:00413220 FileHandle      = dword ptr  4
.text:00413220 Format          = dword ptr  8
.text:00413220
.text:00413220                 jmp     ds:__imp__fdopen
.text:00413220 _fdopen         endp
.text:00413220
.text:00413220 ; ---------------------------------------------------------------------------
.text:00413226                 align 10h
.text:00413230
.text:00413230 ; =============== S U B R O U T I N E =======================================
.text:00413230
.text:00413230 ; Attributes: thunk
.text:00413230
.text:00413230 ; int __cdecl close(int FileHandle)
.text:00413230 _close          proc near               ; CODE XREF: sub_4102C0+90↑p
.text:00413230
.text:00413230 FileHandle      = dword ptr  4
.text:00413230
.text:00413230                 jmp     ds:__imp__close
.text:00413230 _close          endp
.text:00413230
.text:00413230 ; ---------------------------------------------------------------------------
.text:00413236                 align 10h
.text:00413240
.text:00413240 ; =============== S U B R O U T I N E =======================================
.text:00413240
.text:00413240 ; Attributes: thunk
.text:00413240
.text:00413240 ; int open(const char *FileName, int OpenFlag, ...)
.text:00413240 _open           proc near               ; CODE XREF: sub_410710:loc_410AA0↑p
.text:00413240
.text:00413240 FileName        = dword ptr  4
.text:00413240 OpenFlag        = dword ptr  8
.text:00413240
.text:00413240                 jmp     ds:__imp__open
.text:00413240 _open           endp
.text:00413240
.text:00413240 ; ---------------------------------------------------------------------------
.text:00413246                 align 10h
.text:00413250
.text:00413250 ; =============== S U B R O U T I N E =======================================
.text:00413250
.text:00413250 ; Attributes: thunk
.text:00413250
.text:00413250 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00413250 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00413250
.text:00413250 lpTopLevelExceptionFilter= dword ptr  4
.text:00413250
.text:00413250                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00413250 SetUnhandledExceptionFilter endp
.text:00413250
.text:00413250 ; ---------------------------------------------------------------------------
.text:00413256                 align 10h
.text:00413260
.text:00413260 ; =============== S U B R O U T I N E =======================================
.text:00413260
.text:00413260 ; Attributes: noreturn thunk
.text:00413260
.text:00413260 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00413260 ExitProcess     proc near               ; CODE XREF: sub_401080+F4↑p
.text:00413260
.text:00413260 uExitCode       = dword ptr  4
.text:00413260
.text:00413260                 jmp     ds:__imp_ExitProcess
.text:00413260 ExitProcess     endp
.text:00413260
.text:00413260 ; ---------------------------------------------------------------------------
.text:00413266                 align 10h
.text:00413270
.text:00413270 ; =============== S U B R O U T I N E =======================================
.text:00413270
.text:00413270 ; Attributes: thunk
.text:00413270
.text:00413270 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00413270 GetModuleHandleA proc near              ; CODE XREF: sub_40B2D0+108↑p
.text:00413270                                         ; sub_40BB80+329↑p ...
.text:00413270
.text:00413270 lpModuleName    = dword ptr  4
.text:00413270
.text:00413270                 jmp     ds:__imp_GetModuleHandleA
.text:00413270 GetModuleHandleA endp
.text:00413270
.text:00413270 ; ---------------------------------------------------------------------------
.text:00413276                 align 10h
.text:00413280
.text:00413280 ; =============== S U B R O U T I N E =======================================
.text:00413280
.text:00413280 ; Attributes: thunk
.text:00413280
.text:00413280 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00413280 GetProcAddress  proc near               ; CODE XREF: sub_40B2D0+123↑p
.text:00413280                                         ; sub_40B2D0+28E↑p ...
.text:00413280
.text:00413280 hModule         = dword ptr  4
.text:00413280 lpProcName      = dword ptr  8
.text:00413280
.text:00413280                 jmp     ds:__imp_GetProcAddress
.text:00413280 GetProcAddress  endp
.text:00413280
.text:00413280 ; ---------------------------------------------------------------------------
.text:00413286                 align 10h
.text:00413290
.text:00413290 ; =============== S U B R O U T I N E =======================================
.text:00413290
.text:00413290 ; Attributes: thunk
.text:00413290
.text:00413290 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00413290 GetFileAttributesA proc near            ; CODE XREF: sub_40B2D0+137↑p
.text:00413290                                         ; sub_40E8B0+62↑p
.text:00413290
.text:00413290 lpFileName      = dword ptr  4
.text:00413290
.text:00413290                 jmp     ds:__imp_GetFileAttributesA
.text:00413290 GetFileAttributesA endp
.text:00413290
.text:00413290 ; ---------------------------------------------------------------------------
.text:00413296                 align 10h
.text:004132A0
.text:004132A0 ; =============== S U B R O U T I N E =======================================
.text:004132A0
.text:004132A0 ; Attributes: thunk
.text:004132A0
.text:004132A0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:004132A0 FreeLibrary     proc near               ; CODE XREF: sub_40B2D0+194↑p
.text:004132A0                                         ; sub_40B2D0+37D↑p ...
.text:004132A0
.text:004132A0 hLibModule      = dword ptr  4
.text:004132A0
.text:004132A0                 jmp     ds:__imp_FreeLibrary
.text:004132A0 FreeLibrary     endp
.text:004132A0
.text:004132A0 ; ---------------------------------------------------------------------------
.text:004132A6                 align 10h
.text:004132B0
.text:004132B0 ; =============== S U B R O U T I N E =======================================
.text:004132B0
.text:004132B0 ; Attributes: thunk
.text:004132B0
.text:004132B0 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:004132B0 FindFirstFileA  proc near               ; CODE XREF: sub_40B2D0+1BE↑p
.text:004132B0                                         ; sub_40B2D0+3AF↑p ...
.text:004132B0
.text:004132B0 lpFileName      = dword ptr  4
.text:004132B0 lpFindFileData  = dword ptr  8
.text:004132B0
.text:004132B0                 jmp     ds:__imp_FindFirstFileA
.text:004132B0 FindFirstFileA  endp
.text:004132B0
.text:004132B0 ; ---------------------------------------------------------------------------
.text:004132B6                 align 10h
.text:004132C0
.text:004132C0 ; =============== S U B R O U T I N E =======================================
.text:004132C0
.text:004132C0 ; Attributes: thunk
.text:004132C0
.text:004132C0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:004132C0 FindClose       proc near               ; CODE XREF: sub_40B2D0+213↑p
.text:004132C0                                         ; sub_40B2D0+36E↑p ...
.text:004132C0
.text:004132C0 hFindFile       = dword ptr  4
.text:004132C0
.text:004132C0                 jmp     ds:__imp_FindClose
.text:004132C0 FindClose       endp
.text:004132C0
.text:004132C0 ; ---------------------------------------------------------------------------
.text:004132C6                 align 10h
.text:004132D0
.text:004132D0 ; =============== S U B R O U T I N E =======================================
.text:004132D0
.text:004132D0 ; Attributes: thunk
.text:004132D0
.text:004132D0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:004132D0 LoadLibraryA    proc near               ; CODE XREF: sub_40B2D0+273↑p
.text:004132D0                                         ; sub_40BB80+134↑p ...
.text:004132D0
.text:004132D0 lpLibFileName   = dword ptr  4
.text:004132D0
.text:004132D0                 jmp     ds:__imp_LoadLibraryA
.text:004132D0 LoadLibraryA    endp
.text:004132D0
.text:004132D0 ; ---------------------------------------------------------------------------
.text:004132D6                 align 10h
.text:004132E0
.text:004132E0 ; =============== S U B R O U T I N E =======================================
.text:004132E0
.text:004132E0 ; Attributes: thunk
.text:004132E0
.text:004132E0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:004132E0 FindNextFileA   proc near               ; CODE XREF: sub_40B2D0+35F↑p
.text:004132E0
.text:004132E0 hFindFile       = dword ptr  4
.text:004132E0 lpFindFileData  = dword ptr  8
.text:004132E0
.text:004132E0                 jmp     ds:__imp_FindNextFileA
.text:004132E0 FindNextFileA   endp
.text:004132E0
.text:004132E0 ; ---------------------------------------------------------------------------
.text:004132E6                 align 10h
.text:004132F0
.text:004132F0 ; =============== S U B R O U T I N E =======================================
.text:004132F0
.text:004132F0 ; Attributes: thunk
.text:004132F0
.text:004132F0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:004132F0 GetFileType     proc near               ; CODE XREF: sub_40B2D0+423↑p
.text:004132F0                                         ; .text:0040C36A↑p
.text:004132F0
.text:004132F0 hFile           = dword ptr  4
.text:004132F0
.text:004132F0                 jmp     ds:__imp_GetFileType
.text:004132F0 GetFileType     endp
.text:004132F0
.text:004132F0 ; ---------------------------------------------------------------------------
.text:004132F6                 align 10h
.text:00413300
.text:00413300 ; =============== S U B R O U T I N E =======================================
.text:00413300
.text:00413300 ; Attributes: thunk
.text:00413300
.text:00413300 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00413300 GetFileInformationByHandle proc near    ; CODE XREF: sub_40B2D0+449↑p
.text:00413300
.text:00413300 hFile           = dword ptr  4
.text:00413300 lpFileInformation= dword ptr  8
.text:00413300
.text:00413300                 jmp     ds:__imp_GetFileInformationByHandle
.text:00413300 GetFileInformationByHandle endp
.text:00413300
.text:00413300 ; ---------------------------------------------------------------------------
.text:00413306                 align 10h
.text:00413310
.text:00413310 ; =============== S U B R O U T I N E =======================================
.text:00413310
.text:00413310 ; Attributes: thunk
.text:00413310
.text:00413310 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00413310 GetFileSize     proc near               ; CODE XREF: sub_40B2D0+7D2↑p
.text:00413310
.text:00413310 hFile           = dword ptr  4
.text:00413310 lpFileSizeHigh  = dword ptr  8
.text:00413310
.text:00413310                 jmp     ds:__imp_GetFileSize
.text:00413310 GetFileSize     endp
.text:00413310
.text:00413310 ; ---------------------------------------------------------------------------
.text:00413316                 align 10h
.text:00413320
.text:00413320 ; =============== S U B R O U T I N E =======================================
.text:00413320
.text:00413320 ; Attributes: thunk
.text:00413320
.text:00413320 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00413320 PeekNamedPipe   proc near               ; CODE XREF: sub_40B2D0+819↑p
.text:00413320
.text:00413320 hNamedPipe      = dword ptr  4
.text:00413320 lpBuffer        = dword ptr  8
.text:00413320 nBufferSize     = dword ptr  0Ch
.text:00413320 lpBytesRead     = dword ptr  10h
.text:00413320 lpTotalBytesAvail= dword ptr  14h
.text:00413320 lpBytesLeftThisMessage= dword ptr  18h
.text:00413320
.text:00413320                 jmp     ds:__imp_PeekNamedPipe
.text:00413320 PeekNamedPipe   endp
.text:00413320
.text:00413320 ; ---------------------------------------------------------------------------
.text:00413326                 align 10h
.text:00413330
.text:00413330 ; =============== S U B R O U T I N E =======================================
.text:00413330
.text:00413330 ; Attributes: thunk
.text:00413330
.text:00413330 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00413330 GetDriveTypeA   proc near               ; CODE XREF: sub_40BB80+4C↑p
.text:00413330
.text:00413330 lpRootPathName  = dword ptr  4
.text:00413330
.text:00413330                 jmp     ds:__imp_GetDriveTypeA
.text:00413330 GetDriveTypeA   endp
.text:00413330
.text:00413330 ; ---------------------------------------------------------------------------
.text:00413336                 align 10h
.text:00413340
.text:00413340 ; =============== S U B R O U T I N E =======================================
.text:00413340
.text:00413340 ; Attributes: thunk
.text:00413340
.text:00413340 ; DWORD __stdcall GetLastError()
.text:00413340 GetLastError    proc near               ; CODE XREF: sub_40BB80:loc_40BE09↑p
.text:00413340                                         ; .text:loc_40C94D↑p ...
.text:00413340                 jmp     ds:__imp_GetLastError
.text:00413340 GetLastError    endp
.text:00413340
.text:00413340 ; ---------------------------------------------------------------------------
.text:00413346                 align 10h
.text:00413350
.text:00413350 ; =============== S U B R O U T I N E =======================================
.text:00413350
.text:00413350 ; Attributes: thunk
.text:00413350
.text:00413350 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00413350 GetVolumeInformationA proc near         ; CODE XREF: sub_40C080+64↑p
.text:00413350                                         ; .text:0040C62C↑p ...
.text:00413350
.text:00413350 lpRootPathName  = dword ptr  4
.text:00413350 lpVolumeNameBuffer= dword ptr  8
.text:00413350 nVolumeNameSize = dword ptr  0Ch
.text:00413350 lpVolumeSerialNumber= dword ptr  10h
.text:00413350 lpMaximumComponentLength= dword ptr  14h
.text:00413350 lpFileSystemFlags= dword ptr  18h
.text:00413350 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00413350 nFileSystemNameSize= dword ptr  20h
.text:00413350
.text:00413350                 jmp     ds:__imp_GetVolumeInformationA
.text:00413350 GetVolumeInformationA endp
.text:00413350
.text:00413350 ; ---------------------------------------------------------------------------
.text:00413356                 align 10h
.text:00413360
.text:00413360 ; =============== S U B R O U T I N E =======================================
.text:00413360
.text:00413360 ; Attributes: thunk
.text:00413360
.text:00413360 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00413360 CreateFileA     proc near               ; CODE XREF: sub_410C40-3E2A↑p
.text:00413360                                         ; .text:0040DD23↑p ...
.text:00413360
.text:00413360 lpFileName      = dword ptr  4
.text:00413360 dwDesiredAccess = dword ptr  8
.text:00413360 dwShareMode     = dword ptr  0Ch
.text:00413360 lpSecurityAttributes= dword ptr  10h
.text:00413360 dwCreationDisposition= dword ptr  14h
.text:00413360 dwFlagsAndAttributes= dword ptr  18h
.text:00413360 hTemplateFile   = dword ptr  1Ch
.text:00413360
.text:00413360                 jmp     ds:__imp_CreateFileA
.text:00413360 CreateFileA     endp
.text:00413360
.text:00413360 ; ---------------------------------------------------------------------------
.text:00413366                 align 10h
.text:00413370
.text:00413370 ; =============== S U B R O U T I N E =======================================
.text:00413370
.text:00413370 ; Attributes: thunk
.text:00413370
.text:00413370 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00413370 CloseHandle     proc near               ; CODE XREF: sub_410C40-3E0F↑p
.text:00413370                                         ; .text:0040DD99↑p ...
.text:00413370
.text:00413370 hObject         = dword ptr  4
.text:00413370
.text:00413370                 jmp     ds:__imp_CloseHandle
.text:00413370 CloseHandle     endp
.text:00413370
.text:00413370 ; ---------------------------------------------------------------------------
.text:00413376                 align 10h
.text:00413380
.text:00413380 ; =============== S U B R O U T I N E =======================================
.text:00413380
.text:00413380 ; Attributes: thunk
.text:00413380
.text:00413380 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00413380 SetErrorMode    proc near               ; CODE XREF: sub_410C40-3DDA↑p
.text:00413380                                         ; sub_40E8B0+57↑p ...
.text:00413380
.text:00413380 uMode           = dword ptr  4
.text:00413380
.text:00413380                 jmp     ds:__imp_SetErrorMode
.text:00413380 SetErrorMode    endp
.text:00413380
.text:00413380 ; ---------------------------------------------------------------------------
.text:00413386                 align 10h
.text:00413390
.text:00413390 ; =============== S U B R O U T I N E =======================================
.text:00413390
.text:00413390 ; Attributes: thunk
.text:00413390
.text:00413390 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00413390 GetModuleFileNameA proc near            ; CODE XREF: sub_40D420+1C↑p
.text:00413390
.text:00413390 hModule         = dword ptr  4
.text:00413390 lpFilename      = dword ptr  8
.text:00413390 nSize           = dword ptr  0Ch
.text:00413390
.text:00413390                 jmp     ds:__imp_GetModuleFileNameA
.text:00413390 GetModuleFileNameA endp
.text:00413390
.text:00413390 ; ---------------------------------------------------------------------------
.text:00413396                 align 10h
.text:004133A0
.text:004133A0 ; =============== S U B R O U T I N E =======================================
.text:004133A0
.text:004133A0 ; Attributes: thunk
.text:004133A0
.text:004133A0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:004133A0 GetShortPathNameA proc near             ; CODE XREF: .text:0040D6A6↑p
.text:004133A0                                         ; .text:0040D6D0↑p
.text:004133A0
.text:004133A0 lpszLongPath    = dword ptr  4
.text:004133A0 lpszShortPath   = dword ptr  8
.text:004133A0 cchBuffer       = dword ptr  0Ch
.text:004133A0
.text:004133A0                 jmp     ds:__imp_GetShortPathNameA
.text:004133A0 GetShortPathNameA endp
.text:004133A0
.text:004133A0 ; ---------------------------------------------------------------------------
.text:004133A6                 align 10h
.text:004133B0
.text:004133B0 ; =============== S U B R O U T I N E =======================================
.text:004133B0
.text:004133B0 ; Attributes: thunk
.text:004133B0
.text:004133B0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:004133B0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040D9D8↑p
.text:004133B0                                         ; .text:0040D9F4↑p ...
.text:004133B0
.text:004133B0 nBufferLength   = dword ptr  4
.text:004133B0 lpBuffer        = dword ptr  8
.text:004133B0
.text:004133B0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:004133B0 GetCurrentDirectoryA endp
.text:004133B0
.text:004133B0 ; ---------------------------------------------------------------------------
.text:004133B6                 align 10h
.text:004133C0
.text:004133C0 ; =============== S U B R O U T I N E =======================================
.text:004133C0
.text:004133C0 ; Attributes: thunk
.text:004133C0
.text:004133C0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:004133C0 DeviceIoControl proc near               ; CODE XREF: .text:0040DD8C↑p
.text:004133C0                                         ; sub_40E150+1E5↑p
.text:004133C0
.text:004133C0 hDevice         = dword ptr  4
.text:004133C0 dwIoControlCode = dword ptr  8
.text:004133C0 lpInBuffer      = dword ptr  0Ch
.text:004133C0 nInBufferSize   = dword ptr  10h
.text:004133C0 lpOutBuffer     = dword ptr  14h
.text:004133C0 nOutBufferSize  = dword ptr  18h
.text:004133C0 lpBytesReturned = dword ptr  1Ch
.text:004133C0 lpOverlapped    = dword ptr  20h
.text:004133C0
.text:004133C0                 jmp     ds:__imp_DeviceIoControl
.text:004133C0 DeviceIoControl endp
.text:004133C0
.text:004133C0 ; ---------------------------------------------------------------------------
.text:004133C6                 align 10h
.text:004133D0
.text:004133D0 ; =============== S U B R O U T I N E =======================================
.text:004133D0
.text:004133D0 ; Attributes: thunk
.text:004133D0
.text:004133D0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:004133D0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040E0E3↑p
.text:004133D0                                         ; sub_40E150+7B↑p ...
.text:004133D0
.text:004133D0 lpRootPathName  = dword ptr  4
.text:004133D0 lpSectorsPerCluster= dword ptr  8
.text:004133D0 lpBytesPerSector= dword ptr  0Ch
.text:004133D0 lpNumberOfFreeClusters= dword ptr  10h
.text:004133D0 lpTotalNumberOfClusters= dword ptr  14h
.text:004133D0
.text:004133D0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:004133D0 GetDiskFreeSpaceA endp
.text:004133D0
.text:004133D0 ; ---------------------------------------------------------------------------
.text:004133D6                 align 10h
.text:004133E0
.text:004133E0 ; =============== S U B R O U T I N E =======================================
.text:004133E0
.text:004133E0 ; Attributes: thunk
.text:004133E0
.text:004133E0 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:004133E0 GetFullPathNameA proc near              ; CODE XREF: sub_40E780+45↑p
.text:004133E0                                         ; sub_40E780+ED↑p
.text:004133E0
.text:004133E0 lpFileName      = dword ptr  4
.text:004133E0 nBufferLength   = dword ptr  8
.text:004133E0 lpBuffer        = dword ptr  0Ch
.text:004133E0 lpFilePart      = dword ptr  10h
.text:004133E0
.text:004133E0                 jmp     ds:__imp_GetFullPathNameA
.text:004133E0 GetFullPathNameA endp
.text:004133E0
.text:004133E0 ; ---------------------------------------------------------------------------
.text:004133E6                 align 10h
.text:004133F0
.text:004133F0 ; =============== S U B R O U T I N E =======================================
.text:004133F0
.text:004133F0 ; Attributes: thunk
.text:004133F0
.text:004133F0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:004133F0 lstrcmpiA       proc near               ; CODE XREF: .text:0040EE3B↑p
.text:004133F0                                         ; .text:0040EE52↑p ...
.text:004133F0
.text:004133F0 lpString1       = dword ptr  4
.text:004133F0 lpString2       = dword ptr  8
.text:004133F0
.text:004133F0                 jmp     ds:__imp_lstrcmpiA
.text:004133F0 lstrcmpiA       endp
.text:004133F0
.text:004133F0 ; ---------------------------------------------------------------------------
.text:004133F6                 align 10h
.text:00413400
.text:00413400 ; =============== S U B R O U T I N E =======================================
.text:00413400
.text:00413400 ; Attributes: thunk
.text:00413400
.text:00413400 ; DWORD __stdcall GetVersion()
.text:00413400 GetVersion      proc near               ; CODE XREF: .text:0040F1C3↑p
.text:00413400                 jmp     ds:__imp_GetVersion
.text:00413400 GetVersion      endp
.text:00413400
.text:00413400 ; ---------------------------------------------------------------------------
.text:00413406                 align 10h
.text:00413410
.text:00413410 ; =============== S U B R O U T I N E =======================================
.text:00413410
.text:00413410 ; Attributes: thunk
.text:00413410
.text:00413410 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00413410 GetVersionExA   proc near               ; CODE XREF: sub_40F250+32↑p
.text:00413410                                         ; sub_40F250+20B↑p
.text:00413410
.text:00413410 lpVersionInformation= dword ptr  4
.text:00413410
.text:00413410                 jmp     ds:__imp_GetVersionExA
.text:00413410 GetVersionExA   endp
.text:00413410
.text:00413410 ; ---------------------------------------------------------------------------
.text:00413416                 align 10h
.text:00413420
.text:00413420 ; =============== S U B R O U T I N E =======================================
.text:00413420
.text:00413420 ; Attributes: thunk
.text:00413420
.text:00413420 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00413420 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040F8EF↑p
.text:00413420                                         ; .text:0040F91E↑p ...
.text:00413420
.text:00413420 nBufferLength   = dword ptr  4
.text:00413420 lpBuffer        = dword ptr  8
.text:00413420
.text:00413420                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00413420 GetLogicalDriveStringsA endp
.text:00413420
.text:00413420 ; ---------------------------------------------------------------------------
.text:00413426                 align 10h
.text:00413430
.text:00413430 ; =============== S U B R O U T I N E =======================================
.text:00413430
.text:00413430 ; Attributes: thunk
.text:00413430
.text:00413430 ; HANDLE __stdcall GetProcessHeap()
.text:00413430 GetProcessHeap  proc near               ; CODE XREF: .text:0040F8F9↑p
.text:00413430                                         ; sub_40FFD0+24↑p ...
.text:00413430                 jmp     ds:__imp_GetProcessHeap
.text:00413430 GetProcessHeap  endp
.text:00413430
.text:00413430 ; ---------------------------------------------------------------------------
.text:00413436                 align 10h
.text:00413440
.text:00413440 ; =============== S U B R O U T I N E =======================================
.text:00413440
.text:00413440 ; Attributes: thunk
.text:00413440
.text:00413440 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00413440 HeapAlloc       proc near               ; CODE XREF: .text:0040F90D↑p
.text:00413440                                         ; sub_40FFD0+38↑p ...
.text:00413440
.text:00413440 hHeap           = dword ptr  4
.text:00413440 dwFlags         = dword ptr  8
.text:00413440 dwBytes         = dword ptr  0Ch
.text:00413440
.text:00413440                 jmp     ds:__imp_HeapAlloc
.text:00413440 HeapAlloc       endp
.text:00413440
.text:00413440 ; ---------------------------------------------------------------------------
.text:00413446                 align 10h
.text:00413450
.text:00413450 ; =============== S U B R O U T I N E =======================================
.text:00413450
.text:00413450 ; Attributes: thunk
.text:00413450
.text:00413450 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00413450 HeapFree        proc near               ; CODE XREF: .text:0041010D↑p
.text:00413450
.text:00413450 hHeap           = dword ptr  4
.text:00413450 dwFlags         = dword ptr  8
.text:00413450 lpMem           = dword ptr  0Ch
.text:00413450
.text:00413450                 jmp     ds:__imp_HeapFree
.text:00413450 HeapFree        endp
.text:00413450
.text:00413450 ; ---------------------------------------------------------------------------
.text:00413456                 align 10h
.text:00413460
.text:00413460 ; =============== S U B R O U T I N E =======================================
.text:00413460
.text:00413460 ; Attributes: thunk
.text:00413460
.text:00413460 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00413460 UnlockFile      proc near               ; CODE XREF: sub_4101C0+40↑p
.text:00413460
.text:00413460 hFile           = dword ptr  4
.text:00413460 dwFileOffsetLow = dword ptr  8
.text:00413460 dwFileOffsetHigh= dword ptr  0Ch
.text:00413460 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00413460 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00413460
.text:00413460                 jmp     ds:__imp_UnlockFile
.text:00413460 UnlockFile      endp
.text:00413460
.text:00413460 ; ---------------------------------------------------------------------------
.text:00413466                 align 10h
.text:00413470
.text:00413470 ; =============== S U B R O U T I N E =======================================
.text:00413470
.text:00413470 ; Attributes: thunk
.text:00413470
.text:00413470 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00413470 CreateDirectoryA proc near              ; CODE XREF: sub_410B40+22↑p
.text:00413470
.text:00413470 lpPathName      = dword ptr  4
.text:00413470 lpSecurityAttributes= dword ptr  8
.text:00413470
.text:00413470                 jmp     ds:__imp_CreateDirectoryA
.text:00413470 CreateDirectoryA endp
.text:00413470
.text:00413470 ; ---------------------------------------------------------------------------
.text:00413476                 align 10h
.text:00413480
.text:00413480 ; =============== S U B R O U T I N E =======================================
.text:00413480
.text:00413480 ; Attributes: thunk
.text:00413480
.text:00413480 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00413480 GetTimeZoneInformation proc near        ; CODE XREF: sub_410D50+22↑p
.text:00413480
.text:00413480 lpTimeZoneInformation= dword ptr  4
.text:00413480
.text:00413480                 jmp     ds:__imp_GetTimeZoneInformation
.text:00413480 GetTimeZoneInformation endp
.text:00413480
.text:00413480 ; ---------------------------------------------------------------------------
.text:00413486                 align 10h
.text:00413490
.text:00413490 ; =============== S U B R O U T I N E =======================================
.text:00413490
.text:00413490 ; Attributes: thunk
.text:00413490
.text:00413490 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00413490 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_410D50+4F↑p
.text:00413490
.text:00413490 lpSystemTimeAsFileTime= dword ptr  4
.text:00413490
.text:00413490                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00413490 GetSystemTimeAsFileTime endp
.text:00413490
.text:00413490 ; ---------------------------------------------------------------------------
.text:00413496                 align 10h
.text:004134A0
.text:004134A0 ; =============== S U B R O U T I N E =======================================
.text:004134A0
.text:004134A0 ; Attributes: thunk
.text:004134A0
.text:004134A0 ; BOOL __stdcall AreFileApisANSI()
.text:004134A0 AreFileApisANSI proc near               ; CODE XREF: sub_410E90+89↑p
.text:004134A0                 jmp     ds:__imp_AreFileApisANSI
.text:004134A0 AreFileApisANSI endp
.text:004134A0
.text:004134A0 ; ---------------------------------------------------------------------------
.text:004134A6                 align 10h
.text:004134B0
.text:004134B0 ; =============== S U B R O U T I N E =======================================
.text:004134B0
.text:004134B0 ; Attributes: thunk
.text:004134B0
.text:004134B0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:004134B0 MultiByteToWideChar proc near           ; CODE XREF: sub_410E90+BD↑p
.text:004134B0
.text:004134B0 CodePage        = dword ptr  4
.text:004134B0 dwFlags         = dword ptr  8
.text:004134B0 lpMultiByteStr  = dword ptr  0Ch
.text:004134B0 cbMultiByte     = dword ptr  10h
.text:004134B0 lpWideCharStr   = dword ptr  14h
.text:004134B0 cchWideChar     = dword ptr  18h
.text:004134B0
.text:004134B0                 jmp     ds:__imp_MultiByteToWideChar
.text:004134B0 MultiByteToWideChar endp
.text:004134B0
.text:004134B0 ; ---------------------------------------------------------------------------
.text:004134B6                 align 10h
.text:004134C0
.text:004134C0 ; =============== S U B R O U T I N E =======================================
.text:004134C0
.text:004134C0 ; Attributes: thunk
.text:004134C0
.text:004134C0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:004134C0 lstrcpyA        proc near               ; CODE XREF: sub_410E90+128↑p
.text:004134C0
.text:004134C0 lpString1       = dword ptr  4
.text:004134C0 lpString2       = dword ptr  8
.text:004134C0
.text:004134C0                 jmp     ds:__imp_lstrcpyA
.text:004134C0 lstrcpyA        endp
.text:004134C0
.text:004134C0 ; ---------------------------------------------------------------------------
.text:004134C6                 align 10h
.text:004134D0
.text:004134D0 ; =============== S U B R O U T I N E =======================================
.text:004134D0
.text:004134D0 ; Attributes: thunk
.text:004134D0
.text:004134D0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:004134D0 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040EDC1↑p
.text:004134D0
.text:004134D0 hKey            = dword ptr  4
.text:004134D0 lpSubKey        = dword ptr  8
.text:004134D0 ulOptions       = dword ptr  0Ch
.text:004134D0 samDesired      = dword ptr  10h
.text:004134D0 phkResult       = dword ptr  14h
.text:004134D0
.text:004134D0                 jmp     ds:__imp_RegOpenKeyExA
.text:004134D0 RegOpenKeyExA   endp
.text:004134D0
.text:004134D0 ; ---------------------------------------------------------------------------
.text:004134D6                 align 10h
.text:004134E0
.text:004134E0 ; =============== S U B R O U T I N E =======================================
.text:004134E0
.text:004134E0 ; Attributes: thunk
.text:004134E0
.text:004134E0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:004134E0 RegQueryValueExA proc near              ; CODE XREF: .text:0040EE04↑p
.text:004134E0
.text:004134E0 hKey            = dword ptr  4
.text:004134E0 lpValueName     = dword ptr  8
.text:004134E0 lpReserved      = dword ptr  0Ch
.text:004134E0 lpType          = dword ptr  10h
.text:004134E0 lpData          = dword ptr  14h
.text:004134E0 lpcbData        = dword ptr  18h
.text:004134E0
.text:004134E0                 jmp     ds:__imp_RegQueryValueExA
.text:004134E0 RegQueryValueExA endp
.text:004134E0
.text:004134E0 ; ---------------------------------------------------------------------------
.text:004134E6                 align 10h
.text:004134F0
.text:004134F0 ; =============== S U B R O U T I N E =======================================
.text:004134F0
.text:004134F0 ; Attributes: thunk
.text:004134F0
.text:004134F0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:004134F0 RegCloseKey     proc near               ; CODE XREF: .text:0040EE28↑p
.text:004134F0
.text:004134F0 hKey            = dword ptr  4
.text:004134F0
.text:004134F0                 jmp     ds:__imp_RegCloseKey
.text:004134F0 RegCloseKey     endp
.text:004134F0
.text:004134F0 ; ---------------------------------------------------------------------------
.text:004134F6                 db 2 dup(90h)
.text:004134F8                 dd 2 dup(0)
.text:00413500                 dd 21400h, 0
.text:00413508                 dd 0C0h, 46000000h
.text:00413510 ; const IID rclsid
.text:00413510 rclsid          dd 21401h               ; Data1
.text:00413510                                         ; DATA XREF: sub_410E90+4B↑o
.text:00413510                 dw 0                    ; Data2
.text:00413510                 dw 0                    ; Data3
.text:00413510                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413520                 dd 214A0h, 0
.text:00413528                 dd 0C0h, 46000000h, 214A1h, 0
.text:00413538                 dd 0C0h, 46000000h, 214D0h, 0
.text:00413548                 dd 0C0h, 46000000h, 214D1h, 0
.text:00413558                 dd 0C0h, 46000000h, 214D2h, 0
.text:00413568                 dd 0C0h, 46000000h, 214E1h, 0
.text:00413578                 dd 0C0h, 46000000h, 214E2h, 0
.text:00413588                 dd 0C0h, 46000000h, 214E3h, 0
.text:00413598                 dd 0C0h, 46000000h, 214E4h, 0
.text:004135A8                 dd 0C0h, 46000000h, 21500h, 0
.text:004135B8                 dd 0C0h, 46000000h, 214E5h, 0
.text:004135C8                 dd 0C0h, 46000000h, 214E6h, 0
.text:004135D8                 dd 0C0h, 46000000h, 214E8h, 0
.text:004135E8                 dd 0C0h, 46000000h, 214E9h, 0
.text:004135F8                 dd 0C0h, 46000000h, 214EAh, 0
.text:00413608                 dd 0C0h, 46000000h, 214EBh, 0
.text:00413618                 dd 0C0h, 46000000h
.text:00413620 ; const IID riid
.text:00413620 riid            dd 214EEh               ; Data1
.text:00413620                                         ; DATA XREF: sub_410E90+2B↑o
.text:00413620                 dw 0                    ; Data2
.text:00413620                 dw 0                    ; Data3
.text:00413620                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413630                 dd 214EFh, 0
.text:00413638                 dd 0C0h, 46000000h, 214F0h, 0
.text:00413648                 dd 0C0h, 46000000h, 214F1h, 0
.text:00413658                 dd 0C0h, 46000000h, 214F2h, 0
.text:00413668                 dd 0C0h, 46000000h, 214F3h, 0
.text:00413678                 dd 0C0h, 46000000h, 214F4h, 0
.text:00413688                 dd 0C0h, 46000000h, 214F5h, 0
.text:00413698                 dd 0C0h, 46000000h, 214F6h, 0
.text:004136A8                 dd 0C0h, 46000000h, 214F7h, 0
.text:004136B8                 dd 0C0h, 46000000h, 214F8h, 0
.text:004136C8                 dd 0C0h, 46000000h, 214F9h, 0
.text:004136D8                 dd 0C0h, 46000000h, 214FAh, 0
.text:004136E8                 dd 0C0h, 46000000h, 214FBh, 0
.text:004136F8                 dd 0C0h, 46000000h, 214FCh, 0
.text:00413708                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00413708                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00413708                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00413708                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00413708                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413708                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00413708                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00413708                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413708                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00413708                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:004137D8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:004137E8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:004137F8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00413808                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00413818                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00413818                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00413818                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00413818                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00413818                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00413818                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00413818                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:004138A0 dword_4138A0    dd 0FFFFFFFFh           ; DATA XREF: .text:00412659↑r
.text:004138A0                                         ; .text:loc_412680↑r ...
.text:004138A4 dword_4138A4    dd 0                    ; DATA XREF: .text:loc_41268C↑r
.text:004138A4                                         ; sub_4126B0:loc_4126FD↑r
.text:004138A8                 dd 0FFFFFFFFh
.text:004138AC dword_4138AC    dd 55h dup(0)           ; DATA XREF: .data:off_4140D4↓o
.text:00413A00                 dd 180h dup(?)
.text:00413A00 _text           ends
.text:00413A00
.data:00414000 ; Section 2. (virtual address 00014000)
.data:00414000 ; Virtual size                  : 000000F0 (    240.)
.data:00414000 ; Section size in file          : 00000200 (    512.)
.data:00414000 ; Offset to raw data for section: 00012E00
.data:00414000 ; Flags C0000040: Data Readable Writable
.data:00414000 ; Alignment     : default
.data:00414000 ; ===========================================================================
.data:00414000
.data:00414000 ; Segment type: Pure data
.data:00414000 ; Segment permissions: Read/Write
.data:00414000 _data           segment para public 'DATA' use32
.data:00414000                 assume cs:_data
.data:00414000                 ;org 414000h
.data:00414000 dword_414000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00414000                                         ; sub_401080+CC↑r
.data:00414004 dword_414004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00414004                                         ; sub_401080+D4↑r
.data:00414008                 align 10h
.data:00414010 byte_414010     db 1                    ; DATA XREF: sub_4025D0+15C8↑w
.data:00414010                                         ; sub_406EA0+B↑r
.data:00414011 byte_414011     db 1                    ; DATA XREF: sub_406EA0+24↑r
.data:00414011                                         ; sub_406EA0:loc_406F8E↑w
.data:00414012                 align 10h
.data:00414020 dword_414020    dd 1                    ; DATA XREF: sub_4025D0+1829↑r
.data:00414020                                         ; sub_4025D0+1974↑r ...
.data:00414024 dword_414024    dd 1                    ; DATA XREF: sub_407F40+11↑r
.data:00414024                                         ; .text:00407FE1↑r
.data:00414028 dword_414028    dd 3Fh                  ; DATA XREF: sub_407F40+7D↑w
.data:00414028                                         ; .text:0040804D↑w
.data:0041402C                 align 10h
.data:00414030 ; int Code
.data:00414030 Code            dd 1                    ; DATA XREF: sub_4025D0+A27↑r
.data:00414030                                         ; sub_4025D0+BE8↑r ...
.data:00414034                 align 10h
.data:00414040 ; char *off_414040
.data:00414040 off_414040      dd offset aCopyrightC2005
.data:00414040                                         ; DATA XREF: sub_4084D0+DC↑r
.data:00414040                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00414044                 align 10h
.data:00414050 dword_414050    dd 1                    ; DATA XREF: sub_40AB40+22↑r
.data:00414050                                         ; sub_40AB40+65↑r ...
.data:00414054 dword_414054    dd 100h                 ; DATA XREF: sub_40AB40+3F↑o
.data:00414054                                         ; sub_40AB40+1A2↑r ...
.data:00414058 off_414058      dd offset unk_415200    ; DATA XREF: sub_40AB40+1AA↑r
.data:0041405C ; void *off_41405C
.data:0041405C off_41405C      dd offset dword_414054  ; DATA XREF: sub_40AB40+39↑r
.data:0041405C                                         ; sub_40AB40+60↑w ...
.data:00414060 dword_414060    dd 200h                 ; DATA XREF: sub_40B2D0+6CD↑r
.data:00414060                                         ; sub_40B2D0+6D8↑r ...
.data:00414064 ; char *off_414064
.data:00414064 off_414064      dd offset aComExeBatCmd ; DATA XREF: sub_40BB80+3D3↑r
.data:00414064                                         ; sub_40BB80+400↑r ...
.data:00414064                                         ; ".com;.exe;.bat;.cmd"
.data:00414068                 align 10h
.data:00414070 byte_414070     db 41h                  ; DATA XREF: sub_40D850+6B↑w
.data:00414070                                         ; sub_40D850:loc_40D964↑r
.data:00414071                 align 10h
.data:00414080 dword_414080    dd 1                    ; DATA XREF: .text:loc_40EC77↑r
.data:00414080                                         ; sub_40F250+202↑w
.data:00414084                 align 10h
.data:00414090 off_414090      dd offset aNotset       ; DATA XREF: .text:0040F4CA↑r
.data:00414090                                         ; .text:00410112↑r
.data:00414090                                         ; "notset"
.data:00414094 off_414094      dd offset aNotset       ; DATA XREF: .text:0040F4E2↑r
.data:00414094                                         ; .text:0040F504↑r ...
.data:00414094                                         ; "notset"
.data:00414098                 align 10h
.data:004140A0 dword_4140A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004140A4                 align 10h
.data:004140B0 ; int Mode
.data:004140B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004140B0                                         ; sub_401080+80↑r ...
.data:004140B4                 align 10h
.data:004140C0 dword_4140C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004140C0                                         ; sub_401080+BA↑r
.data:004140C4                 align 10h
.data:004140D0 dword_4140D0    dd 0                    ; DATA XREF: sub_4126B0+9↑r
.data:004140D0                                         ; sub_4126B0+1D↑w
.data:004140D4 off_4140D4      dd offset dword_4138AC  ; DATA XREF: sub_412620+6↑r
.data:004140D4                                         ; sub_412620+17↑r ...
.data:004140D8                 align 1000h
.data:004140D8 _data           ends
.data:004140D8
.bss:00415000 ; Section 3. (virtual address 00015000)
.bss:00415000 ; Virtual size                  : 00000710 (   1808.)
.bss:00415000 ; Section size in file          : 00000000 (      0.)
.bss:00415000 ; Offset to raw data for section: 00000000
.bss:00415000 ; Flags C0000080: Bss Readable Writable
.bss:00415000 ; Alignment     : default
.bss:00415000 ; ===========================================================================
.bss:00415000
.bss:00415000 ; Segment type: Uninitialized
.bss:00415000 ; Segment permissions: Read/Write
.bss:00415000 _bss            segment para public 'BSS' use32
.bss:00415000                 assume cs:_bss
.bss:00415000                 ;org 415000h
.bss:00415000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00415000 dword_415000    dd ?                    ; DATA XREF: sub_4025D0+1277↑o
.bss:00415000                                         ; sub_4025D0+18A1↑r ...
.bss:00415004 dword_415004    dd ?                    ; DATA XREF: sub_4025D0+18A7↑r
.bss:00415004                                         ; sub_4025D0+19A5↑r ...
.bss:00415008                 align 10h
.bss:00415010 byte_415010     db ?                    ; DATA XREF: sub_4025D0+9B4↑w
.bss:00415010                                         ; sub_4025D0:loc_403E68↑r ...
.bss:00415011                 align 10h
.bss:00415020 byte_415020     db ?                    ; DATA XREF: sub_406EA0:loc_406EDD↑w
.bss:00415020                                         ; sub_406EA0+289↑r ...
.bss:00415021                 align 10h
.bss:00415030 dword_415030    dd ?                    ; DATA XREF: sub_4025D0+133↑w
.bss:00415030                                         ; sub_4025D0+5FE↑w ...
.bss:00415034                 align 10h
.bss:00415040 dword_415040    dd ?                    ; DATA XREF: sub_4025D0:loc_402709↑w
.bss:00415040                                         ; sub_4025D0+609↑w ...
.bss:00415044                 align 10h
.bss:00415050 ; size_t dword_415050
.bss:00415050 dword_415050    dd ?                    ; DATA XREF: sub_4025D0+B68↑w
.bss:00415050                                         ; sub_4025D0+C00↑w ...
.bss:00415054                 align 10h
.bss:00415060 byte_415060     db ?                    ; DATA XREF: sub_4025D0+DF↑w
.bss:00415060                                         ; sub_4025D0:loc_40313D↑w ...
.bss:00415061                 align 10h
.bss:00415070 byte_415070     db ?                    ; DATA XREF: sub_4025D0:loc_403DC9↑w
.bss:00415070                                         ; sub_4025D0:loc_403DF2↑r ...
.bss:00415071                 align 10h
.bss:00415080 byte_415080     db ?                    ; DATA XREF: sub_4025D0:loc_403E44↑r
.bss:00415080                                         ; sub_4025D0+19E0↑r ...
.bss:00415081                 align 10h
.bss:00415090 dword_415090    dd ?                    ; DATA XREF: sub_4025D0:loc_403FD5↑w
.bss:00415090                                         ; sub_4057E0+84↑r
.bss:00415094 dword_415094    dd ?                    ; DATA XREF: sub_4025D0+1A11↑w
.bss:00415094                                         ; sub_4057E0+8A↑r
.bss:00415098                 align 10h
.bss:004150A0 dword_4150A0    dd ?                    ; DATA XREF: sub_4025D0+12D↑w
.bss:004150A0                                         ; sub_4025D0+5F9↑w ...
.bss:004150A4                 align 10h
.bss:004150B0 dword_4150B0    dd ?                    ; DATA XREF: sub_4025D0+9C3↑o
.bss:004150B0                                         ; sub_4025D0+18AF↑r
.bss:004150B4 dword_4150B4    dd ?                    ; DATA XREF: sub_4025D0+18B7↑r
.bss:004150B8                 align 10h
.bss:004150C0 dword_4150C0    dd ?                    ; DATA XREF: sub_4025D0+18BD↑w
.bss:004150C0                                         ; sub_405980+5E↑r ...
.bss:004150C4 dword_4150C4    dd ?                    ; DATA XREF: sub_4025D0+18C4↑w
.bss:004150C4                                         ; sub_405980:loc_4059D8↑r ...
.bss:004150C8                 align 10h
.bss:004150D0 ; void *dword_4150D0
.bss:004150D0 dword_4150D0    dd ?                    ; DATA XREF: sub_4025D0+127↑w
.bss:004150D0                                         ; sub_4025D0+8EB↑r ...
.bss:004150D4                 align 10h
.bss:004150E0 dword_4150E0    dd ?                    ; DATA XREF: sub_4025D0+116↑w
.bss:004150E0                                         ; sub_4025D0+8D3↑r ...
.bss:004150E4                 align 10h
.bss:004150F0 dword_4150F0    dd ?                    ; DATA XREF: sub_4025D0+121↑w
.bss:004150F0                                         ; sub_4025D0:loc_402EAB↑r ...
.bss:004150F4                 align 10h
.bss:00415100 dword_415100    dd ?                    ; DATA XREF: sub_4025D0:loc_40408E↑w
.bss:00415100                                         ; sub_405980+7↑r ...
.bss:00415104                 align 10h
.bss:00415110 ; char dword_415110[]
.bss:00415110 dword_415110    dd ?                    ; DATA XREF: sub_405070+19↑w
.bss:00415110                                         ; sub_405070+5A↑w ...
.bss:00415114                 align 10h
.bss:00415120 dword_415120    dd ?                    ; DATA XREF: sub_4025D0+197D↑w
.bss:00415120                                         ; sub_4025D0+1BA3↑w ...
.bss:00415124                 align 10h
.bss:00415130 ; FILE *Stream
.bss:00415130 Stream          dd ?                    ; DATA XREF: sub_4025D0+198B↑r
.bss:00415130                                         ; sub_4025D0+19CF↑r ...
.bss:00415134                 align 10h
.bss:00415140 byte_415140     db ?                    ; DATA XREF: sub_4025D0:loc_4040B2↑r
.bss:00415140                                         ; sub_405070+4D↑w
.bss:00415141                 align 10h
.bss:00415150 dword_415150    dd ?                    ; DATA XREF: sub_4025D0+92↑w
.bss:00415150                                         ; sub_404A80+11C↑r ...
.bss:00415154 dword_415154    dd ?                    ; DATA XREF: sub_4025D0+BA↑w
.bss:00415158 dword_415158    dd ?                    ; DATA XREF: sub_4025D0+C0↑w
.bss:0041515C                 align 10h
.bss:00415160 dword_415160    dd ?                    ; DATA XREF: sub_4025D0+C6↑w
.bss:00415164                 align 10h
.bss:00415170 dword_415170    dd ?                    ; DATA XREF: sub_4025D0+AE↑w
.bss:00415174                 align 10h
.bss:00415180 dword_415180    dd ?                    ; DATA XREF: sub_4025D0+D2↑w
.bss:00415180                                         ; sub_404A80+4DE↑r ...
.bss:00415184                 align 10h
.bss:00415190 dword_415190    dd ?                    ; DATA XREF: sub_4025D0+F0↑w
.bss:00415194                 align 10h
.bss:004151A0 dword_4151A0    dd ?                    ; DATA XREF: sub_4025D0+106↑w
.bss:004151A4                 align 10h
.bss:004151B0 dword_4151B0    dd ?                    ; DATA XREF: sub_4025D0+FD↑w
.bss:004151B4                 align 10h
.bss:004151C0 dword_4151C0    dd ?                    ; DATA XREF: sub_407F40+9↑o
.bss:004151C0                                         ; sub_407F40+17↑w ...
.bss:004151C4 dword_4151C4    dd ?                    ; DATA XREF: sub_407F40+21↑w
.bss:004151C4                                         ; .text:00407FF9↑w
.bss:004151C8 dword_4151C8    dd ?                    ; DATA XREF: sub_407F40+77↑r
.bss:004151C8                                         ; .text:00408047↑r
.bss:004151CC dword_4151CC    dd ?                    ; DATA XREF: sub_407F40+6B↑r
.bss:004151CC                                         ; .text:0040803B↑r
.bss:004151D0                 db    ? ;
.bss:004151D1                 db    ? ;
.bss:004151D2                 db    ? ;
.bss:004151D3                 db    ? ;
.bss:004151D4                 db    ? ;
.bss:004151D5                 db    ? ;
.bss:004151D6                 db    ? ;
.bss:004151D7                 db    ? ;
.bss:004151D8                 db    ? ;
.bss:004151D9                 db    ? ;
.bss:004151DA                 db    ? ;
.bss:004151DB                 db    ? ;
.bss:004151DC                 db    ? ;
.bss:004151DD                 db    ? ;
.bss:004151DE                 db    ? ;
.bss:004151DF                 db    ? ;
.bss:004151E0                 db    ? ;
.bss:004151E1                 db    ? ;
.bss:004151E2                 db    ? ;
.bss:004151E3                 db    ? ;
.bss:004151E4                 db    ? ;
.bss:004151E5                 db    ? ;
.bss:004151E6                 db    ? ;
.bss:004151E7                 db    ? ;
.bss:004151E8                 db    ? ;
.bss:004151E9                 db    ? ;
.bss:004151EA                 db    ? ;
.bss:004151EB                 db    ? ;
.bss:004151EC                 db    ? ;
.bss:004151ED                 db    ? ;
.bss:004151EE                 db    ? ;
.bss:004151EF                 db    ? ;
.bss:004151F0 ; char *dword_4151F0
.bss:004151F0 dword_4151F0    dd ?                    ; DATA XREF: .text:00408824↑w
.bss:004151F0                                         ; sub_408850+58↑r
.bss:004151F4                 align 10h
.bss:00415200 unk_415200      db    ? ;               ; DATA XREF: sub_40AB40+100↑o
.bss:00415200                                         ; .data:off_414058↑o
.bss:00415201                 db    ? ;
.bss:00415202                 db    ? ;
.bss:00415203                 db    ? ;
.bss:00415204                 db    ? ;
.bss:00415205                 db    ? ;
.bss:00415206                 db    ? ;
.bss:00415207                 db    ? ;
.bss:00415208                 db    ? ;
.bss:00415209                 db    ? ;
.bss:0041520A                 db    ? ;
.bss:0041520B                 db    ? ;
.bss:0041520C                 db    ? ;
.bss:0041520D                 db    ? ;
.bss:0041520E                 db    ? ;
.bss:0041520F                 db    ? ;
.bss:00415210                 db    ? ;
.bss:00415211                 db    ? ;
.bss:00415212                 db    ? ;
.bss:00415213                 db    ? ;
.bss:00415214                 db    ? ;
.bss:00415215                 db    ? ;
.bss:00415216                 db    ? ;
.bss:00415217                 db    ? ;
.bss:00415218                 db    ? ;
.bss:00415219                 db    ? ;
.bss:0041521A                 db    ? ;
.bss:0041521B                 db    ? ;
.bss:0041521C                 db    ? ;
.bss:0041521D                 db    ? ;
.bss:0041521E                 db    ? ;
.bss:0041521F                 db    ? ;
.bss:00415220                 db    ? ;
.bss:00415221                 db    ? ;
.bss:00415222                 db    ? ;
.bss:00415223                 db    ? ;
.bss:00415224                 db    ? ;
.bss:00415225                 db    ? ;
.bss:00415226                 db    ? ;
.bss:00415227                 db    ? ;
.bss:00415228                 db    ? ;
.bss:00415229                 db    ? ;
.bss:0041522A                 db    ? ;
.bss:0041522B                 db    ? ;
.bss:0041522C                 db    ? ;
.bss:0041522D                 db    ? ;
.bss:0041522E                 db    ? ;
.bss:0041522F                 db    ? ;
.bss:00415230                 db    ? ;
.bss:00415231                 db    ? ;
.bss:00415232                 db    ? ;
.bss:00415233                 db    ? ;
.bss:00415234                 db    ? ;
.bss:00415235                 db    ? ;
.bss:00415236                 db    ? ;
.bss:00415237                 db    ? ;
.bss:00415238                 db    ? ;
.bss:00415239                 db    ? ;
.bss:0041523A                 db    ? ;
.bss:0041523B                 db    ? ;
.bss:0041523C                 db    ? ;
.bss:0041523D                 db    ? ;
.bss:0041523E                 db    ? ;
.bss:0041523F                 db    ? ;
.bss:00415240                 db    ? ;
.bss:00415241                 db    ? ;
.bss:00415242                 db    ? ;
.bss:00415243                 db    ? ;
.bss:00415244                 db    ? ;
.bss:00415245                 db    ? ;
.bss:00415246                 db    ? ;
.bss:00415247                 db    ? ;
.bss:00415248                 db    ? ;
.bss:00415249                 db    ? ;
.bss:0041524A                 db    ? ;
.bss:0041524B                 db    ? ;
.bss:0041524C                 db    ? ;
.bss:0041524D                 db    ? ;
.bss:0041524E                 db    ? ;
.bss:0041524F                 db    ? ;
.bss:00415250                 db    ? ;
.bss:00415251                 db    ? ;
.bss:00415252                 db    ? ;
.bss:00415253                 db    ? ;
.bss:00415254                 db    ? ;
.bss:00415255                 db    ? ;
.bss:00415256                 db    ? ;
.bss:00415257                 db    ? ;
.bss:00415258                 db    ? ;
.bss:00415259                 db    ? ;
.bss:0041525A                 db    ? ;
.bss:0041525B                 db    ? ;
.bss:0041525C                 db    ? ;
.bss:0041525D                 db    ? ;
.bss:0041525E                 db    ? ;
.bss:0041525F                 db    ? ;
.bss:00415260                 db    ? ;
.bss:00415261                 db    ? ;
.bss:00415262                 db    ? ;
.bss:00415263                 db    ? ;
.bss:00415264                 db    ? ;
.bss:00415265                 db    ? ;
.bss:00415266                 db    ? ;
.bss:00415267                 db    ? ;
.bss:00415268                 db    ? ;
.bss:00415269                 db    ? ;
.bss:0041526A                 db    ? ;
.bss:0041526B                 db    ? ;
.bss:0041526C                 db    ? ;
.bss:0041526D                 db    ? ;
.bss:0041526E                 db    ? ;
.bss:0041526F                 db    ? ;
.bss:00415270                 db    ? ;
.bss:00415271                 db    ? ;
.bss:00415272                 db    ? ;
.bss:00415273                 db    ? ;
.bss:00415274                 db    ? ;
.bss:00415275                 db    ? ;
.bss:00415276                 db    ? ;
.bss:00415277                 db    ? ;
.bss:00415278                 db    ? ;
.bss:00415279                 db    ? ;
.bss:0041527A                 db    ? ;
.bss:0041527B                 db    ? ;
.bss:0041527C                 db    ? ;
.bss:0041527D                 db    ? ;
.bss:0041527E                 db    ? ;
.bss:0041527F                 db    ? ;
.bss:00415280                 db    ? ;
.bss:00415281                 db    ? ;
.bss:00415282                 db    ? ;
.bss:00415283                 db    ? ;
.bss:00415284                 db    ? ;
.bss:00415285                 db    ? ;
.bss:00415286                 db    ? ;
.bss:00415287                 db    ? ;
.bss:00415288                 db    ? ;
.bss:00415289                 db    ? ;
.bss:0041528A                 db    ? ;
.bss:0041528B                 db    ? ;
.bss:0041528C                 db    ? ;
.bss:0041528D                 db    ? ;
.bss:0041528E                 db    ? ;
.bss:0041528F                 db    ? ;
.bss:00415290                 db    ? ;
.bss:00415291                 db    ? ;
.bss:00415292                 db    ? ;
.bss:00415293                 db    ? ;
.bss:00415294                 db    ? ;
.bss:00415295                 db    ? ;
.bss:00415296                 db    ? ;
.bss:00415297                 db    ? ;
.bss:00415298                 db    ? ;
.bss:00415299                 db    ? ;
.bss:0041529A                 db    ? ;
.bss:0041529B                 db    ? ;
.bss:0041529C                 db    ? ;
.bss:0041529D                 db    ? ;
.bss:0041529E                 db    ? ;
.bss:0041529F                 db    ? ;
.bss:004152A0                 db    ? ;
.bss:004152A1                 db    ? ;
.bss:004152A2                 db    ? ;
.bss:004152A3                 db    ? ;
.bss:004152A4                 db    ? ;
.bss:004152A5                 db    ? ;
.bss:004152A6                 db    ? ;
.bss:004152A7                 db    ? ;
.bss:004152A8                 db    ? ;
.bss:004152A9                 db    ? ;
.bss:004152AA                 db    ? ;
.bss:004152AB                 db    ? ;
.bss:004152AC                 db    ? ;
.bss:004152AD                 db    ? ;
.bss:004152AE                 db    ? ;
.bss:004152AF                 db    ? ;
.bss:004152B0                 db    ? ;
.bss:004152B1                 db    ? ;
.bss:004152B2                 db    ? ;
.bss:004152B3                 db    ? ;
.bss:004152B4                 db    ? ;
.bss:004152B5                 db    ? ;
.bss:004152B6                 db    ? ;
.bss:004152B7                 db    ? ;
.bss:004152B8                 db    ? ;
.bss:004152B9                 db    ? ;
.bss:004152BA                 db    ? ;
.bss:004152BB                 db    ? ;
.bss:004152BC                 db    ? ;
.bss:004152BD                 db    ? ;
.bss:004152BE                 db    ? ;
.bss:004152BF                 db    ? ;
.bss:004152C0                 db    ? ;
.bss:004152C1                 db    ? ;
.bss:004152C2                 db    ? ;
.bss:004152C3                 db    ? ;
.bss:004152C4                 db    ? ;
.bss:004152C5                 db    ? ;
.bss:004152C6                 db    ? ;
.bss:004152C7                 db    ? ;
.bss:004152C8                 db    ? ;
.bss:004152C9                 db    ? ;
.bss:004152CA                 db    ? ;
.bss:004152CB                 db    ? ;
.bss:004152CC                 db    ? ;
.bss:004152CD                 db    ? ;
.bss:004152CE                 db    ? ;
.bss:004152CF                 db    ? ;
.bss:004152D0                 db    ? ;
.bss:004152D1                 db    ? ;
.bss:004152D2                 db    ? ;
.bss:004152D3                 db    ? ;
.bss:004152D4                 db    ? ;
.bss:004152D5                 db    ? ;
.bss:004152D6                 db    ? ;
.bss:004152D7                 db    ? ;
.bss:004152D8                 db    ? ;
.bss:004152D9                 db    ? ;
.bss:004152DA                 db    ? ;
.bss:004152DB                 db    ? ;
.bss:004152DC                 db    ? ;
.bss:004152DD                 db    ? ;
.bss:004152DE                 db    ? ;
.bss:004152DF                 db    ? ;
.bss:004152E0                 db    ? ;
.bss:004152E1                 db    ? ;
.bss:004152E2                 db    ? ;
.bss:004152E3                 db    ? ;
.bss:004152E4                 db    ? ;
.bss:004152E5                 db    ? ;
.bss:004152E6                 db    ? ;
.bss:004152E7                 db    ? ;
.bss:004152E8                 db    ? ;
.bss:004152E9                 db    ? ;
.bss:004152EA                 db    ? ;
.bss:004152EB                 db    ? ;
.bss:004152EC                 db    ? ;
.bss:004152ED                 db    ? ;
.bss:004152EE                 db    ? ;
.bss:004152EF                 db    ? ;
.bss:004152F0                 db    ? ;
.bss:004152F1                 db    ? ;
.bss:004152F2                 db    ? ;
.bss:004152F3                 db    ? ;
.bss:004152F4                 db    ? ;
.bss:004152F5                 db    ? ;
.bss:004152F6                 db    ? ;
.bss:004152F7                 db    ? ;
.bss:004152F8                 db    ? ;
.bss:004152F9                 db    ? ;
.bss:004152FA                 db    ? ;
.bss:004152FB                 db    ? ;
.bss:004152FC                 db    ? ;
.bss:004152FD                 db    ? ;
.bss:004152FE                 db    ? ;
.bss:004152FF                 db    ? ;
.bss:00415300 dword_415300    dd ?                    ; DATA XREF: .text:loc_40A4D1↑o
.bss:00415300                                         ; .text:loc_40A4F0↑o ...
.bss:00415304 dword_415304    dd ?                    ; DATA XREF: .text:loc_40A570↑o
.bss:00415304                                         ; .text:0040A9F8↑r ...
.bss:00415308 dword_415308    dd ?                    ; DATA XREF: .text:0040A9F2↑r
.bss:00415308                                         ; sub_40AAA0+2C↑r
.bss:0041530C dword_41530C    dd ?                    ; DATA XREF: .text:0040A9E6↑r
.bss:0041530C                                         ; sub_40AAA0+22↑r
.bss:00415310 dword_415310    dd ?                    ; DATA XREF: .text:0040AA02↑r
.bss:00415310                                         ; sub_40AAA0+36↑r
.bss:00415314 dword_415314    dd ?                    ; DATA XREF: .text:0040AA12↑r
.bss:00415314                                         ; sub_40AAA0+4E↑r
.bss:00415318 dword_415318    dd ?                    ; DATA XREF: .text:0040AA2F↑r
.bss:00415318                                         ; sub_40AAA0+62↑r
.bss:0041531C dword_41531C    dd ?                    ; DATA XREF: .text:0040AA25↑r
.bss:0041531C                                         ; sub_40AAA0+70↑r
.bss:00415320 dword_415320    dd ?                    ; DATA XREF: .text:0040AA08↑r
.bss:00415320                                         ; sub_40AAA0+7A↑r
.bss:00415324                 align 10h
.bss:00415330 ; char *Str1
.bss:00415330 Str1            dd ?                    ; DATA XREF: sub_40AEC4:loc_40AEFD↑w
.bss:00415330                                         ; sub_40AEC4:loc_40B030↑r
.bss:00415334                 align 10h
.bss:00415340 dword_415340    dd ?                    ; DATA XREF: sub_40AEC4+2D↑r
.bss:00415340                                         ; sub_40AEC4+3F↑w
.bss:00415344                 align 10h
.bss:00415350 dword_415350    dd ?                    ; DATA XREF: sub_40BB80+100↑r
.bss:00415350                                         ; sub_40BB80+308↑w
.bss:00415354                 align 10h
.bss:00415360 ; char *Str
.bss:00415360 Str             dd ?                    ; DATA XREF: sub_40BB80:loc_40BEE4↑r
.bss:00415360                                         ; sub_40BB80+3B6↑r ...
.bss:00415364                 align 10h
.bss:00415370 dword_415370    dd ?                    ; DATA XREF: sub_40D850+1C↑r
.bss:00415370                                         ; sub_40D850+104↑w
.bss:00415374                 align 10h
.bss:00415380 dword_415380    dd ?                    ; DATA XREF: sub_40D850+B↑r
.bss:00415380                                         ; sub_40D850+71↑w
.bss:00415384                 align 10h
.bss:00415390 dword_415390    dd ?                    ; DATA XREF: sub_40D850+85↑r
.bss:00415390                                         ; sub_40D850+B9↑w
.bss:00415394 dword_415394    dd ?                    ; DATA XREF: sub_40D850+C4↑w
.bss:00415398 dword_415398    dd ?                    ; DATA XREF: sub_40D850+2E↑o
.bss:00415398                                         ; sub_40D850+CF↑w
.bss:0041539C dword_41539C    dd ?                    ; DATA XREF: sub_40D850+DA↑w
.bss:004153A0                 db    ? ;
.bss:004153A1                 db    ? ;
.bss:004153A2                 db    ? ;
.bss:004153A3                 db    ? ;
.bss:004153A4                 db    ? ;
.bss:004153A5                 db    ? ;
.bss:004153A6                 db    ? ;
.bss:004153A7                 db    ? ;
.bss:004153A8                 db    ? ;
.bss:004153A9                 db    ? ;
.bss:004153AA                 db    ? ;
.bss:004153AB                 db    ? ;
.bss:004153AC                 db    ? ;
.bss:004153AD                 db    ? ;
.bss:004153AE                 db    ? ;
.bss:004153AF                 db    ? ;
.bss:004153B0                 db    ? ;
.bss:004153B1                 db    ? ;
.bss:004153B2                 db    ? ;
.bss:004153B3                 db    ? ;
.bss:004153B4                 db    ? ;
.bss:004153B5                 db    ? ;
.bss:004153B6                 db    ? ;
.bss:004153B7                 db    ? ;
.bss:004153B8                 db    ? ;
.bss:004153B9                 db    ? ;
.bss:004153BA                 db    ? ;
.bss:004153BB                 db    ? ;
.bss:004153BC                 db    ? ;
.bss:004153BD                 db    ? ;
.bss:004153BE                 db    ? ;
.bss:004153BF                 db    ? ;
.bss:004153C0                 db    ? ;
.bss:004153C1                 db    ? ;
.bss:004153C2                 db    ? ;
.bss:004153C3                 db    ? ;
.bss:004153C4                 db    ? ;
.bss:004153C5                 db    ? ;
.bss:004153C6                 db    ? ;
.bss:004153C7                 db    ? ;
.bss:004153C8                 db    ? ;
.bss:004153C9                 db    ? ;
.bss:004153CA                 db    ? ;
.bss:004153CB                 db    ? ;
.bss:004153CC                 db    ? ;
.bss:004153CD                 db    ? ;
.bss:004153CE                 db    ? ;
.bss:004153CF                 db    ? ;
.bss:004153D0                 db    ? ;
.bss:004153D1                 db    ? ;
.bss:004153D2                 db    ? ;
.bss:004153D3                 db    ? ;
.bss:004153D4                 db    ? ;
.bss:004153D5                 db    ? ;
.bss:004153D6                 db    ? ;
.bss:004153D7                 db    ? ;
.bss:004153D8                 db    ? ;
.bss:004153D9                 db    ? ;
.bss:004153DA                 db    ? ;
.bss:004153DB                 db    ? ;
.bss:004153DC                 db    ? ;
.bss:004153DD                 db    ? ;
.bss:004153DE                 db    ? ;
.bss:004153DF                 db    ? ;
.bss:004153E0                 db    ? ;
.bss:004153E1                 db    ? ;
.bss:004153E2                 db    ? ;
.bss:004153E3                 db    ? ;
.bss:004153E4                 db    ? ;
.bss:004153E5                 db    ? ;
.bss:004153E6                 db    ? ;
.bss:004153E7                 db    ? ;
.bss:004153E8                 db    ? ;
.bss:004153E9                 db    ? ;
.bss:004153EA                 db    ? ;
.bss:004153EB                 db    ? ;
.bss:004153EC                 db    ? ;
.bss:004153ED                 db    ? ;
.bss:004153EE                 db    ? ;
.bss:004153EF                 db    ? ;
.bss:004153F0                 db    ? ;
.bss:004153F1                 db    ? ;
.bss:004153F2                 db    ? ;
.bss:004153F3                 db    ? ;
.bss:004153F4                 db    ? ;
.bss:004153F5                 db    ? ;
.bss:004153F6                 db    ? ;
.bss:004153F7                 db    ? ;
.bss:004153F8                 db    ? ;
.bss:004153F9                 db    ? ;
.bss:004153FA                 db    ? ;
.bss:004153FB                 db    ? ;
.bss:004153FC                 db    ? ;
.bss:004153FD                 db    ? ;
.bss:004153FE                 db    ? ;
.bss:004153FF                 db    ? ;
.bss:00415400                 db    ? ;
.bss:00415401                 db    ? ;
.bss:00415402                 db    ? ;
.bss:00415403                 db    ? ;
.bss:00415404                 db    ? ;
.bss:00415405                 db    ? ;
.bss:00415406                 db    ? ;
.bss:00415407                 db    ? ;
.bss:00415408                 db    ? ;
.bss:00415409                 db    ? ;
.bss:0041540A                 db    ? ;
.bss:0041540B                 db    ? ;
.bss:0041540C                 db    ? ;
.bss:0041540D                 db    ? ;
.bss:0041540E                 db    ? ;
.bss:0041540F                 db    ? ;
.bss:00415410                 db    ? ;
.bss:00415411                 db    ? ;
.bss:00415412                 db    ? ;
.bss:00415413                 db    ? ;
.bss:00415414                 db    ? ;
.bss:00415415                 db    ? ;
.bss:00415416                 db    ? ;
.bss:00415417                 db    ? ;
.bss:00415418                 db    ? ;
.bss:00415419                 db    ? ;
.bss:0041541A                 db    ? ;
.bss:0041541B                 db    ? ;
.bss:0041541C                 db    ? ;
.bss:0041541D                 db    ? ;
.bss:0041541E                 db    ? ;
.bss:0041541F                 db    ? ;
.bss:00415420                 db    ? ;
.bss:00415421                 db    ? ;
.bss:00415422                 db    ? ;
.bss:00415423                 db    ? ;
.bss:00415424                 db    ? ;
.bss:00415425                 db    ? ;
.bss:00415426                 db    ? ;
.bss:00415427                 db    ? ;
.bss:00415428                 db    ? ;
.bss:00415429                 db    ? ;
.bss:0041542A                 db    ? ;
.bss:0041542B                 db    ? ;
.bss:0041542C                 db    ? ;
.bss:0041542D                 db    ? ;
.bss:0041542E                 db    ? ;
.bss:0041542F                 db    ? ;
.bss:00415430                 db    ? ;
.bss:00415431                 db    ? ;
.bss:00415432                 db    ? ;
.bss:00415433                 db    ? ;
.bss:00415434                 db    ? ;
.bss:00415435                 db    ? ;
.bss:00415436                 db    ? ;
.bss:00415437                 db    ? ;
.bss:00415438                 db    ? ;
.bss:00415439                 db    ? ;
.bss:0041543A                 db    ? ;
.bss:0041543B                 db    ? ;
.bss:0041543C                 db    ? ;
.bss:0041543D                 db    ? ;
.bss:0041543E                 db    ? ;
.bss:0041543F                 db    ? ;
.bss:00415440                 db    ? ;
.bss:00415441                 db    ? ;
.bss:00415442                 db    ? ;
.bss:00415443                 db    ? ;
.bss:00415444                 db    ? ;
.bss:00415445                 db    ? ;
.bss:00415446                 db    ? ;
.bss:00415447                 db    ? ;
.bss:00415448                 db    ? ;
.bss:00415449                 db    ? ;
.bss:0041544A                 db    ? ;
.bss:0041544B                 db    ? ;
.bss:0041544C                 db    ? ;
.bss:0041544D                 db    ? ;
.bss:0041544E                 db    ? ;
.bss:0041544F                 db    ? ;
.bss:00415450                 db    ? ;
.bss:00415451                 db    ? ;
.bss:00415452                 db    ? ;
.bss:00415453                 db    ? ;
.bss:00415454                 db    ? ;
.bss:00415455                 db    ? ;
.bss:00415456                 db    ? ;
.bss:00415457                 db    ? ;
.bss:00415458                 db    ? ;
.bss:00415459                 db    ? ;
.bss:0041545A                 db    ? ;
.bss:0041545B                 db    ? ;
.bss:0041545C                 db    ? ;
.bss:0041545D                 db    ? ;
.bss:0041545E                 db    ? ;
.bss:0041545F                 db    ? ;
.bss:00415460                 db    ? ;
.bss:00415461                 db    ? ;
.bss:00415462                 db    ? ;
.bss:00415463                 db    ? ;
.bss:00415464                 db    ? ;
.bss:00415465                 db    ? ;
.bss:00415466                 db    ? ;
.bss:00415467                 db    ? ;
.bss:00415468                 db    ? ;
.bss:00415469                 db    ? ;
.bss:0041546A                 db    ? ;
.bss:0041546B                 db    ? ;
.bss:0041546C                 db    ? ;
.bss:0041546D                 db    ? ;
.bss:0041546E                 db    ? ;
.bss:0041546F                 db    ? ;
.bss:00415470                 db    ? ;
.bss:00415471                 db    ? ;
.bss:00415472                 db    ? ;
.bss:00415473                 db    ? ;
.bss:00415474                 db    ? ;
.bss:00415475                 db    ? ;
.bss:00415476                 db    ? ;
.bss:00415477                 db    ? ;
.bss:00415478                 db    ? ;
.bss:00415479                 db    ? ;
.bss:0041547A                 db    ? ;
.bss:0041547B                 db    ? ;
.bss:0041547C                 db    ? ;
.bss:0041547D                 db    ? ;
.bss:0041547E                 db    ? ;
.bss:0041547F                 db    ? ;
.bss:00415480                 db    ? ;
.bss:00415481                 db    ? ;
.bss:00415482                 db    ? ;
.bss:00415483                 db    ? ;
.bss:00415484                 db    ? ;
.bss:00415485                 db    ? ;
.bss:00415486                 db    ? ;
.bss:00415487                 db    ? ;
.bss:00415488                 db    ? ;
.bss:00415489                 db    ? ;
.bss:0041548A                 db    ? ;
.bss:0041548B                 db    ? ;
.bss:0041548C                 db    ? ;
.bss:0041548D                 db    ? ;
.bss:0041548E                 db    ? ;
.bss:0041548F                 db    ? ;
.bss:00415490                 db    ? ;
.bss:00415491                 db    ? ;
.bss:00415492                 db    ? ;
.bss:00415493                 db    ? ;
.bss:00415494                 db    ? ;
.bss:00415495                 db    ? ;
.bss:00415496                 db    ? ;
.bss:00415497                 db    ? ;
.bss:00415498                 db    ? ;
.bss:00415499                 db    ? ;
.bss:0041549A                 db    ? ;
.bss:0041549B                 db    ? ;
.bss:0041549C                 db    ? ;
.bss:0041549D                 db    ? ;
.bss:0041549E                 db    ? ;
.bss:0041549F                 db    ? ;
.bss:004154A0                 db    ? ;
.bss:004154A1                 db    ? ;
.bss:004154A2                 db    ? ;
.bss:004154A3                 db    ? ;
.bss:004154A4                 db    ? ;
.bss:004154A5                 db    ? ;
.bss:004154A6                 db    ? ;
.bss:004154A7                 db    ? ;
.bss:004154A8                 db    ? ;
.bss:004154A9                 db    ? ;
.bss:004154AA                 db    ? ;
.bss:004154AB                 db    ? ;
.bss:004154AC                 db    ? ;
.bss:004154AD                 db    ? ;
.bss:004154AE                 db    ? ;
.bss:004154AF                 db    ? ;
.bss:004154B0                 db    ? ;
.bss:004154B1                 db    ? ;
.bss:004154B2                 db    ? ;
.bss:004154B3                 db    ? ;
.bss:004154B4                 db    ? ;
.bss:004154B5                 db    ? ;
.bss:004154B6                 db    ? ;
.bss:004154B7                 db    ? ;
.bss:004154B8                 db    ? ;
.bss:004154B9                 db    ? ;
.bss:004154BA                 db    ? ;
.bss:004154BB                 db    ? ;
.bss:004154BC                 db    ? ;
.bss:004154BD                 db    ? ;
.bss:004154BE                 db    ? ;
.bss:004154BF                 db    ? ;
.bss:004154C0                 db    ? ;
.bss:004154C1                 db    ? ;
.bss:004154C2                 db    ? ;
.bss:004154C3                 db    ? ;
.bss:004154C4                 db    ? ;
.bss:004154C5                 db    ? ;
.bss:004154C6                 db    ? ;
.bss:004154C7                 db    ? ;
.bss:004154C8                 db    ? ;
.bss:004154C9                 db    ? ;
.bss:004154CA                 db    ? ;
.bss:004154CB                 db    ? ;
.bss:004154CC                 db    ? ;
.bss:004154CD                 db    ? ;
.bss:004154CE                 db    ? ;
.bss:004154CF                 db    ? ;
.bss:004154D0                 db    ? ;
.bss:004154D1                 db    ? ;
.bss:004154D2                 db    ? ;
.bss:004154D3                 db    ? ;
.bss:004154D4                 db    ? ;
.bss:004154D5                 db    ? ;
.bss:004154D6                 db    ? ;
.bss:004154D7                 db    ? ;
.bss:004154D8                 db    ? ;
.bss:004154D9                 db    ? ;
.bss:004154DA                 db    ? ;
.bss:004154DB                 db    ? ;
.bss:004154DC                 db    ? ;
.bss:004154DD                 db    ? ;
.bss:004154DE                 db    ? ;
.bss:004154DF                 db    ? ;
.bss:004154E0                 db    ? ;
.bss:004154E1                 db    ? ;
.bss:004154E2                 db    ? ;
.bss:004154E3                 db    ? ;
.bss:004154E4                 db    ? ;
.bss:004154E5                 db    ? ;
.bss:004154E6                 db    ? ;
.bss:004154E7                 db    ? ;
.bss:004154E8                 db    ? ;
.bss:004154E9                 db    ? ;
.bss:004154EA                 db    ? ;
.bss:004154EB                 db    ? ;
.bss:004154EC                 db    ? ;
.bss:004154ED                 db    ? ;
.bss:004154EE                 db    ? ;
.bss:004154EF                 db    ? ;
.bss:004154F0                 db    ? ;
.bss:004154F1                 db    ? ;
.bss:004154F2                 db    ? ;
.bss:004154F3                 db    ? ;
.bss:004154F4                 db    ? ;
.bss:004154F5                 db    ? ;
.bss:004154F6                 db    ? ;
.bss:004154F7                 db    ? ;
.bss:004154F8                 db    ? ;
.bss:004154F9                 db    ? ;
.bss:004154FA                 db    ? ;
.bss:004154FB                 db    ? ;
.bss:004154FC                 db    ? ;
.bss:004154FD                 db    ? ;
.bss:004154FE                 db    ? ;
.bss:004154FF                 db    ? ;
.bss:00415500                 db    ? ;
.bss:00415501                 db    ? ;
.bss:00415502                 db    ? ;
.bss:00415503                 db    ? ;
.bss:00415504                 db    ? ;
.bss:00415505                 db    ? ;
.bss:00415506                 db    ? ;
.bss:00415507                 db    ? ;
.bss:00415508                 db    ? ;
.bss:00415509                 db    ? ;
.bss:0041550A                 db    ? ;
.bss:0041550B                 db    ? ;
.bss:0041550C                 db    ? ;
.bss:0041550D                 db    ? ;
.bss:0041550E                 db    ? ;
.bss:0041550F                 db    ? ;
.bss:00415510                 db    ? ;
.bss:00415511                 db    ? ;
.bss:00415512                 db    ? ;
.bss:00415513                 db    ? ;
.bss:00415514                 db    ? ;
.bss:00415515                 db    ? ;
.bss:00415516                 db    ? ;
.bss:00415517                 db    ? ;
.bss:00415518                 db    ? ;
.bss:00415519                 db    ? ;
.bss:0041551A                 db    ? ;
.bss:0041551B                 db    ? ;
.bss:0041551C                 db    ? ;
.bss:0041551D                 db    ? ;
.bss:0041551E                 db    ? ;
.bss:0041551F                 db    ? ;
.bss:00415520                 db    ? ;
.bss:00415521                 db    ? ;
.bss:00415522                 db    ? ;
.bss:00415523                 db    ? ;
.bss:00415524                 db    ? ;
.bss:00415525                 db    ? ;
.bss:00415526                 db    ? ;
.bss:00415527                 db    ? ;
.bss:00415528                 db    ? ;
.bss:00415529                 db    ? ;
.bss:0041552A                 db    ? ;
.bss:0041552B                 db    ? ;
.bss:0041552C                 db    ? ;
.bss:0041552D                 db    ? ;
.bss:0041552E                 db    ? ;
.bss:0041552F                 db    ? ;
.bss:00415530                 db    ? ;
.bss:00415531                 db    ? ;
.bss:00415532                 db    ? ;
.bss:00415533                 db    ? ;
.bss:00415534                 db    ? ;
.bss:00415535                 db    ? ;
.bss:00415536                 db    ? ;
.bss:00415537                 db    ? ;
.bss:00415538                 db    ? ;
.bss:00415539                 db    ? ;
.bss:0041553A                 db    ? ;
.bss:0041553B                 db    ? ;
.bss:0041553C                 db    ? ;
.bss:0041553D                 db    ? ;
.bss:0041553E                 db    ? ;
.bss:0041553F                 db    ? ;
.bss:00415540                 db    ? ;
.bss:00415541                 db    ? ;
.bss:00415542                 db    ? ;
.bss:00415543                 db    ? ;
.bss:00415544                 db    ? ;
.bss:00415545                 db    ? ;
.bss:00415546                 db    ? ;
.bss:00415547                 db    ? ;
.bss:00415548                 db    ? ;
.bss:00415549                 db    ? ;
.bss:0041554A                 db    ? ;
.bss:0041554B                 db    ? ;
.bss:0041554C                 db    ? ;
.bss:0041554D                 db    ? ;
.bss:0041554E                 db    ? ;
.bss:0041554F                 db    ? ;
.bss:00415550                 db    ? ;
.bss:00415551                 db    ? ;
.bss:00415552                 db    ? ;
.bss:00415553                 db    ? ;
.bss:00415554                 db    ? ;
.bss:00415555                 db    ? ;
.bss:00415556                 db    ? ;
.bss:00415557                 db    ? ;
.bss:00415558                 db    ? ;
.bss:00415559                 db    ? ;
.bss:0041555A                 db    ? ;
.bss:0041555B                 db    ? ;
.bss:0041555C                 db    ? ;
.bss:0041555D                 db    ? ;
.bss:0041555E                 db    ? ;
.bss:0041555F                 db    ? ;
.bss:00415560                 db    ? ;
.bss:00415561                 db    ? ;
.bss:00415562                 db    ? ;
.bss:00415563                 db    ? ;
.bss:00415564                 db    ? ;
.bss:00415565                 db    ? ;
.bss:00415566                 db    ? ;
.bss:00415567                 db    ? ;
.bss:00415568                 db    ? ;
.bss:00415569                 db    ? ;
.bss:0041556A                 db    ? ;
.bss:0041556B                 db    ? ;
.bss:0041556C                 db    ? ;
.bss:0041556D                 db    ? ;
.bss:0041556E                 db    ? ;
.bss:0041556F                 db    ? ;
.bss:00415570                 db    ? ;
.bss:00415571                 db    ? ;
.bss:00415572                 db    ? ;
.bss:00415573                 db    ? ;
.bss:00415574                 db    ? ;
.bss:00415575                 db    ? ;
.bss:00415576                 db    ? ;
.bss:00415577                 db    ? ;
.bss:00415578                 db    ? ;
.bss:00415579                 db    ? ;
.bss:0041557A                 db    ? ;
.bss:0041557B                 db    ? ;
.bss:0041557C                 db    ? ;
.bss:0041557D                 db    ? ;
.bss:0041557E                 db    ? ;
.bss:0041557F                 db    ? ;
.bss:00415580                 db    ? ;
.bss:00415581                 db    ? ;
.bss:00415582                 db    ? ;
.bss:00415583                 db    ? ;
.bss:00415584                 db    ? ;
.bss:00415585                 db    ? ;
.bss:00415586                 db    ? ;
.bss:00415587                 db    ? ;
.bss:00415588                 db    ? ;
.bss:00415589                 db    ? ;
.bss:0041558A                 db    ? ;
.bss:0041558B                 db    ? ;
.bss:0041558C                 db    ? ;
.bss:0041558D                 db    ? ;
.bss:0041558E                 db    ? ;
.bss:0041558F                 db    ? ;
.bss:00415590 dword_415590    dd ?                    ; DATA XREF: sub_40F140+8↑r
.bss:00415590                                         ; sub_40F250:loc_40F2D2↑w ...
.bss:00415594                 align 10h
.bss:004155A0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004155A0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40F250:loc_40F270↑o
.bss:004155A0                                         ; sub_40F250+2C↑w ...
.bss:00415634 word_415634     dw ?                    ; DATA XREF: sub_40F250:loc_40F303↑r
.bss:00415636                 align 4
.bss:00415638 word_415638     dw ?                    ; DATA XREF: .text:loc_40ECC6↑r
.bss:00415638                                         ; .text:0040ECF4↑r ...
.bss:0041563A byte_41563A     db ?                    ; DATA XREF: .text:0040EC85↑r
.bss:0041563B                 align 10h
.bss:00415640 dword_415640    dd ?                    ; DATA XREF: sub_40F250+6↑r
.bss:00415640                                         ; sub_40F250+75↑w
.bss:00415644                 align 10h
.bss:00415650 dword_415650    dd ?                    ; DATA XREF: sub_410710+6E↑r
.bss:00415650                                         ; sub_410710+9A↑r ...
.bss:00415654 dword_415654    dd ?                    ; DATA XREF: sub_410710:loc_410778↑r
.bss:00415654                                         ; sub_410710+A0↑r ...
.bss:00415658                 align 10h
.bss:00415660 dword_415660    dd ?                    ; DATA XREF: sub_410C20↑r
.bss:00415660                                         ; .text:loc_410E62↑w
.bss:00415664                 align 10h
.bss:00415670 dword_415670    dd ?                    ; DATA XREF: sub_4025D0+55↑w
.bss:00415670                                         ; sub_4025D0+6C0↑r ...
.bss:00415674                 db    ? ;
.bss:00415675                 db    ? ;
.bss:00415676                 db    ? ;
.bss:00415677                 db    ? ;
.bss:00415678                 db    ? ;
.bss:00415679                 db    ? ;
.bss:0041567A                 db    ? ;
.bss:0041567B                 db    ? ;
.bss:0041567C                 db    ? ;
.bss:0041567D                 db    ? ;
.bss:0041567E                 db    ? ;
.bss:0041567F                 db    ? ;
.bss:00415680                 db    ? ;
.bss:00415681                 db    ? ;
.bss:00415682                 db    ? ;
.bss:00415683                 db    ? ;
.bss:00415684                 db    ? ;
.bss:00415685                 db    ? ;
.bss:00415686                 db    ? ;
.bss:00415687                 db    ? ;
.bss:00415688                 db    ? ;
.bss:00415689                 db    ? ;
.bss:0041568A                 db    ? ;
.bss:0041568B                 db    ? ;
.bss:0041568C                 db    ? ;
.bss:0041568D                 db    ? ;
.bss:0041568E                 db    ? ;
.bss:0041568F                 db    ? ;
.bss:00415690 ; char dword_415690[]
.bss:00415690 dword_415690    dd ?                    ; DATA XREF: sub_4025D0+59C↑r
.bss:00415690                                         ; sub_4025D0+5C5↑r ...
.bss:00415694                 align 10h
.bss:004156A0 dword_4156A0    dd ?                    ; CODE XREF: sub_40AEC4+63↑p
.bss:004156A0                                         ; DATA XREF: sub_40ADC0+1E↑r ...
.bss:004156A4                 align 10h
.bss:004156B0 dword_4156B0    dd ?                    ; DATA XREF: sub_40ADC0+4E↑w
.bss:004156B0                                         ; sub_40AEC4+AB↑w
.bss:004156B4                 db    ? ;
.bss:004156B5                 db    ? ;
.bss:004156B6                 db    ? ;
.bss:004156B7                 db    ? ;
.bss:004156B8                 db    ? ;
.bss:004156B9                 db    ? ;
.bss:004156BA                 db    ? ;
.bss:004156BB                 db    ? ;
.bss:004156BC                 db    ? ;
.bss:004156BD                 db    ? ;
.bss:004156BE                 db    ? ;
.bss:004156BF                 db    ? ;
.bss:004156C0                 db    ? ;
.bss:004156C1                 db    ? ;
.bss:004156C2                 db    ? ;
.bss:004156C3                 db    ? ;
.bss:004156C4                 db    ? ;
.bss:004156C5                 db    ? ;
.bss:004156C6                 db    ? ;
.bss:004156C7                 db    ? ;
.bss:004156C8                 db    ? ;
.bss:004156C9                 db    ? ;
.bss:004156CA                 db    ? ;
.bss:004156CB                 db    ? ;
.bss:004156CC                 db    ? ;
.bss:004156CD                 db    ? ;
.bss:004156CE                 db    ? ;
.bss:004156CF                 db    ? ;
.bss:004156D0                 db    ? ;
.bss:004156D1                 db    ? ;
.bss:004156D2                 db    ? ;
.bss:004156D3                 db    ? ;
.bss:004156D4                 db    ? ;
.bss:004156D5                 db    ? ;
.bss:004156D6                 db    ? ;
.bss:004156D7                 db    ? ;
.bss:004156D8                 db    ? ;
.bss:004156D9                 db    ? ;
.bss:004156DA                 db    ? ;
.bss:004156DB                 db    ? ;
.bss:004156DC                 db    ? ;
.bss:004156DD                 db    ? ;
.bss:004156DE                 db    ? ;
.bss:004156DF                 db    ? ;
.bss:004156E0 dword_4156E0    dd ?                    ; DATA XREF: sub_40AEC4+13↑r
.bss:004156E4                 align 1000h
.bss:004156E4 _bss            ends
.bss:004156E4
.idata:00416000 ; Section 4. (virtual address 00016000)
.idata:00416000 ; Virtual size                  : 00000E14 (   3604.)
.idata:00416000 ; Section size in file          : 00001000 (   4096.)
.idata:00416000 ; Offset to raw data for section: 00013000
.idata:00416000 ; Flags C0000040: Data Readable Writable
.idata:00416000 ; Alignment     : default
.idata:00416000 ; ===========================================================================
.idata:00416000
.idata:00416000 ; Segment type: Externs
.idata:00416000 ; _idata
.idata:00416000
.idata:00416001
.idata:004162BC ;
.idata:004162BC ; Imports from libintl3.dll
.idata:004162BC ;
.idata:004162BC                 extrn __imp_libintl_bindtextdomain:dword
.idata:004162BC                                         ; CODE XREF: sub_4025D0+6F↑p
.idata:004162BC                                         ; DATA XREF: sub_4025D0+6F↑r ...
.idata:004162C0                 extrn libintl_gettext:dword
.idata:004162C0                                         ; CODE XREF: sub_4025D0+5BF↑p
.idata:004162C0                                         ; sub_4025D0+6BA↑p ...
.idata:004162C4                 extrn libintl_textdomain:dword
.idata:004162C4                                         ; CODE XREF: sub_4025D0+7C↑p
.idata:004162C4                                         ; DATA XREF: sub_4025D0+7C↑r ...
.idata:004162C8
.idata:004162D0 ;
.idata:004162D0 ; Imports from ADVAPI32.DLL
.idata:004162D0 ;
.idata:004162D0 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004162D0                 extrn __imp_RegCloseKey:dword
.idata:004162D0                                         ; DATA XREF: RegCloseKey↑r
.idata:004162D4 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004162D4                 extrn __imp_RegOpenKeyExA:dword
.idata:004162D4                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004162D8 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004162D8                 extrn __imp_RegQueryValueExA:dword
.idata:004162D8                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004162DC
.idata:004162E4 ;
.idata:004162E4 ; Imports from KERNEL32.dll
.idata:004162E4 ;
.idata:004162E4 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004162E4                 extrn __imp_AreFileApisANSI:dword
.idata:004162E4                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004162E8 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004162E8                 extrn __imp_CloseHandle:dword
.idata:004162E8                                         ; DATA XREF: CloseHandle↑r
.idata:004162EC ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004162EC                 extrn __imp_CreateDirectoryA:dword
.idata:004162EC                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004162F0 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004162F0                 extrn __imp_CreateFileA:dword
.idata:004162F0                                         ; DATA XREF: CreateFileA↑r
.idata:004162F4 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004162F4                 extrn __imp_DeviceIoControl:dword
.idata:004162F4                                         ; DATA XREF: DeviceIoControl↑r
.idata:004162F8 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004162F8                 extrn __imp_ExitProcess:dword
.idata:004162F8                                         ; DATA XREF: ExitProcess↑r
.idata:004162FC ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004162FC                 extrn __imp_FindClose:dword
.idata:004162FC                                         ; DATA XREF: FindClose↑r
.idata:00416300 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00416300                 extrn __imp_FindFirstFileA:dword
.idata:00416300                                         ; DATA XREF: FindFirstFileA↑r
.idata:00416304 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00416304                 extrn __imp_FindNextFileA:dword
.idata:00416304                                         ; DATA XREF: FindNextFileA↑r
.idata:00416308 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00416308                 extrn __imp_FreeLibrary:dword
.idata:00416308                                         ; DATA XREF: FreeLibrary↑r
.idata:0041630C ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041630C                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041630C                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00416310 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00416310                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00416310                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00416314 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00416314                 extrn __imp_GetDriveTypeA:dword
.idata:00416314                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00416318 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00416318                 extrn __imp_GetFileAttributesA:dword
.idata:00416318                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041631C ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041631C                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041631C                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00416320 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00416320                 extrn __imp_GetFileSize:dword
.idata:00416320                                         ; DATA XREF: GetFileSize↑r
.idata:00416324 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00416324                 extrn __imp_GetFileType:dword
.idata:00416324                                         ; DATA XREF: GetFileType↑r
.idata:00416328 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00416328                 extrn __imp_GetFullPathNameA:dword
.idata:00416328                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041632C ; DWORD (__stdcall *GetLastError)()
.idata:0041632C                 extrn __imp_GetLastError:dword
.idata:0041632C                                         ; DATA XREF: GetLastError↑r
.idata:00416330 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00416330                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00416330                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00416334 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00416334                 extrn __imp_GetModuleFileNameA:dword
.idata:00416334                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00416338 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00416338                 extrn __imp_GetModuleHandleA:dword
.idata:00416338                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041633C ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041633C                 extrn __imp_GetProcAddress:dword
.idata:0041633C                                         ; DATA XREF: GetProcAddress↑r
.idata:00416340 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00416340                 extrn __imp_GetProcessHeap:dword
.idata:00416340                                         ; DATA XREF: GetProcessHeap↑r
.idata:00416344 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00416344                 extrn __imp_GetShortPathNameA:dword
.idata:00416344                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00416348 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00416348                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00416348                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041634C ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041634C                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041634C                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00416350 ; DWORD (__stdcall *GetVersion)()
.idata:00416350                 extrn __imp_GetVersion:dword
.idata:00416350                                         ; DATA XREF: GetVersion↑r
.idata:00416354 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00416354                 extrn __imp_GetVersionExA:dword
.idata:00416354                                         ; DATA XREF: GetVersionExA↑r
.idata:00416358 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00416358                 extrn __imp_GetVolumeInformationA:dword
.idata:00416358                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041635C ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041635C                 extrn __imp_HeapAlloc:dword
.idata:0041635C                                         ; DATA XREF: HeapAlloc↑r
.idata:00416360 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00416360                 extrn __imp_HeapFree:dword
.idata:00416360                                         ; DATA XREF: HeapFree↑r
.idata:00416364 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00416364                 extrn __imp_LoadLibraryA:dword
.idata:00416364                                         ; DATA XREF: LoadLibraryA↑r
.idata:00416368 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00416368                 extrn __imp_MultiByteToWideChar:dword
.idata:00416368                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041636C ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041636C                 extrn __imp_PeekNamedPipe:dword
.idata:0041636C                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00416370 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00416370                 extrn __imp_SetErrorMode:dword
.idata:00416370                                         ; DATA XREF: SetErrorMode↑r
.idata:00416374 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00416374                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00416374                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00416378 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00416378                 extrn __imp_UnlockFile:dword
.idata:00416378                                         ; DATA XREF: UnlockFile↑r
.idata:0041637C ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041637C                 extrn __imp_lstrcmpiA:dword
.idata:0041637C                                         ; DATA XREF: lstrcmpiA↑r
.idata:00416380 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00416380                 extrn __imp_lstrcpyA:dword
.idata:00416380                                         ; DATA XREF: lstrcpyA↑r
.idata:00416384
.idata:0041638C ;
.idata:0041638C ; Imports from msvcrt.dll
.idata:0041638C ;
.idata:0041638C ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041638C                 extrn __imp__chmod:dword
.idata:0041638C                                         ; DATA XREF: _chmod↑r
.idata:00416390 ; int (__cdecl *_getpid)()
.idata:00416390                 extrn __imp__getpid:dword
.idata:00416390                                         ; DATA XREF: _getpid↑r
.idata:00416394 ; int (__cdecl *_isatty)(int FileHandle)
.idata:00416394                 extrn __imp__isatty:dword
.idata:00416394                                         ; DATA XREF: _isatty↑r
.idata:00416398 ; char *(__cdecl *_strdup)(const char *String)
.idata:00416398                 extrn __imp__strdup:dword
.idata:00416398                                         ; DATA XREF: _strdup↑r
.idata:0041639C ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041639C                 extrn __imp__stricmp:dword
.idata:0041639C                                         ; DATA XREF: _stricmp↑r
.idata:004163A0
.idata:004163A8 ;
.idata:004163A8 ; Imports from MSVCP60.DLL
.idata:004163A8 ;
.idata:004163A8 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004163A8                 extrn __imp_mbrtowc:dword
.idata:004163A8                                         ; DATA XREF: mbrtowc↑r
.idata:004163AC
.idata:004163B4 ;
.idata:004163B4 ; Imports from msvcrt.dll
.idata:004163B4 ;
.idata:004163B4                 extrn __imp___getmainargs:dword
.idata:004163B4                                         ; DATA XREF: __getmainargs↑r
.idata:004163B8 ; int _mb_cur_max
.idata:004163B8                 extrn __mb_cur_max:dword
.idata:004163B8                                         ; DATA XREF: sub_406160+FB↑r
.idata:004163B8                                         ; sub_406160+1DF↑r ...
.idata:004163BC ; char ***(__cdecl *__p__environ)()
.idata:004163BC                 extrn __imp___p__environ:dword
.idata:004163BC                                         ; DATA XREF: __p__environ↑r
.idata:004163C0 ; int *(__cdecl *__p__fmode)()
.idata:004163C0                 extrn __imp___p__fmode:dword
.idata:004163C0                                         ; DATA XREF: __p__fmode↑r
.idata:004163C4 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004163C4                 extrn __set_app_type:dword
.idata:004163C4                                         ; CODE XREF: start+D↑p
.idata:004163C4                                         ; .text:0040102D↑p
.idata:004163C4                                         ; DATA XREF: ...
.idata:004163C8                 extrn __imp__assert:dword
.idata:004163C8                                         ; DATA XREF: _assert↑r
.idata:004163CC ; void (__cdecl *_cexit)()
.idata:004163CC                 extrn __imp__cexit:dword
.idata:004163CC                                         ; DATA XREF: _cexit↑r
.idata:004163D0 ; int (__cdecl *_close)(int FileHandle)
.idata:004163D0                 extrn __imp__close:dword
.idata:004163D0                                         ; DATA XREF: _close↑r
.idata:004163D4 ; int *(__cdecl *_errno)()
.idata:004163D4                 extrn __imp__errno:dword
.idata:004163D4                                         ; DATA XREF: _errno↑r
.idata:004163D8 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004163D8                 extrn __imp__fdopen:dword
.idata:004163D8                                         ; DATA XREF: _fdopen↑r
.idata:004163DC ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004163DC                 extrn __imp__filelengthi64:dword
.idata:004163DC                                         ; DATA XREF: _filelengthi64↑r
.idata:004163E0 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004163E0                 extrn __imp__flsbuf:dword
.idata:004163E0                                         ; DATA XREF: _flsbuf↑r
.idata:004163E4 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004163E4                 extrn __imp__get_osfhandle:dword
.idata:004163E4                                         ; DATA XREF: _get_osfhandle↑r
.idata:004163E8 ; FILE iob[]
.idata:004163E8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004163E8                                         ; sub_401080+75↑r ...
.idata:004163EC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004163EC                 extrn __imp__isctype:dword
.idata:004163EC                                         ; DATA XREF: _isctype↑r
.idata:004163F0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004163F0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004163F0                                         ; DATA XREF: .text:0040106C↑r
.idata:004163F4 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004163F4                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004163F8 ; const unsigned __int16 *pctype
.idata:004163F8                 extrn _pctype:dword     ; DATA XREF: sub_406160:loc_406380↑r
.idata:004163F8                                         ; sub_406160:loc_406760↑r ...
.idata:004163FC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004163FC                 extrn __imp__setmode:dword
.idata:004163FC                                         ; DATA XREF: _setmode↑r
.idata:00416400 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00416400                 extrn __imp__stricmp_0:dword
.idata:00416400                                         ; DATA XREF: _stricmp_0↑r
.idata:00416404 ; void (__cdecl __noreturn *abort)()
.idata:00416404                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00416408 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00416408                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00416408                                         ; DATA XREF: sub_401040+C↑r
.idata:0041640C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041640C                 extrn __imp_calloc:dword
.idata:0041640C                                         ; DATA XREF: calloc↑r
.idata:00416410 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00416410                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00416414 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00416414                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00416418 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00416418                 extrn __imp_fclose:dword
.idata:00416418                                         ; DATA XREF: fclose↑r
.idata:0041641C ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041641C                 extrn __imp_fflush:dword
.idata:0041641C                                         ; DATA XREF: fflush↑r
.idata:00416420 ; int (__cdecl *fgetc)(FILE *Stream)
.idata:00416420                 extrn __imp_fgetc:dword ; DATA XREF: fgetc↑r
.idata:00416424 ; int (__cdecl *fgetpos)(FILE *Stream, fpos_t *Position)
.idata:00416424                 extrn __imp_fgetpos:dword
.idata:00416424                                         ; DATA XREF: fgetpos↑r
.idata:00416428 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00416428                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041642C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041642C                 extrn __imp_fprintf:dword
.idata:0041642C                                         ; DATA XREF: fprintf↑r
.idata:00416430 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00416430                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00416434 ; size_t (__cdecl *fread)(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00416434                 extrn __imp_fread:dword ; DATA XREF: fread↑r
.idata:00416438 ; void (__cdecl *free)(void *Block)
.idata:00416438                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041643C ; int (__cdecl *fsetpos)(FILE *Stream, const fpos_t *Position)
.idata:0041643C                 extrn __imp_fsetpos:dword
.idata:0041643C                                         ; DATA XREF: fsetpos↑r
.idata:00416440 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00416440                 extrn __imp_fwrite:dword
.idata:00416440                                         ; DATA XREF: fwrite↑r
.idata:00416444 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00416444                 extrn __imp_getenv:dword
.idata:00416444                                         ; DATA XREF: getenv↑r
.idata:00416448 ; int (__cdecl *isalpha)(int C)
.idata:00416448                 extrn __imp_isalpha:dword
.idata:00416448                                         ; DATA XREF: isalpha↑r
.idata:0041644C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041644C                 extrn __imp_iswctype:dword
.idata:0041644C                                         ; DATA XREF: iswctype↑r
.idata:00416450 ; void *(__cdecl *malloc)(size_t Size)
.idata:00416450                 extrn __imp_malloc:dword
.idata:00416450                                         ; DATA XREF: malloc↑r
.idata:00416454 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00416454                 extrn __imp_memcpy:dword
.idata:00416454                                         ; DATA XREF: memcpy↑r
.idata:00416458 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00416458                 extrn __imp_memset:dword
.idata:00416458                                         ; DATA XREF: memset↑r
.idata:0041645C ; int (*printf)(const char *const Format, ...)
.idata:0041645C                 extrn __imp_printf:dword
.idata:0041645C                                         ; DATA XREF: printf↑r
.idata:00416460 ; int (__cdecl *puts)(const char *Buffer)
.idata:00416460                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:00416464 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00416464                 extrn __imp_realloc:dword
.idata:00416464                                         ; DATA XREF: realloc↑r
.idata:00416468 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00416468                 extrn __imp_setlocale:dword
.idata:00416468                                         ; DATA XREF: setlocale↑r
.idata:0041646C ; int (__cdecl *setvbuf)(FILE *Stream, char *Buffer, int Mode, size_t Size)
.idata:0041646C                 extrn __imp_setvbuf:dword
.idata:0041646C                                         ; DATA XREF: setvbuf↑r
.idata:00416470 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00416470                 extrn __imp_signal:dword
.idata:00416470                                         ; DATA XREF: signal↑r
.idata:00416474 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00416474                 extrn __imp_sprintf:dword
.idata:00416474                                         ; DATA XREF: sprintf↑r
.idata:00416478 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00416478                 extrn __imp_sscanf:dword
.idata:00416478                                         ; DATA XREF: sscanf↑r
.idata:0041647C ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041647C                 extrn __imp_strcat:dword
.idata:0041647C                                         ; DATA XREF: strcat↑r
.idata:00416480 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00416480                 extrn __imp_strchr:dword
.idata:00416480                                         ; DATA XREF: strchr↑r
.idata:00416484 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00416484                 extrn __imp_strcmp:dword
.idata:00416484                                         ; DATA XREF: strcmp↑r
.idata:00416488 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00416488                 extrn __imp_strcpy:dword
.idata:00416488                                         ; DATA XREF: strcpy↑r
.idata:0041648C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041648C                 extrn __imp_strerror:dword
.idata:0041648C                                         ; DATA XREF: strerror↑r
.idata:00416490 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00416490                 extrn __imp_strlen:dword
.idata:00416490                                         ; DATA XREF: strlen↑r
.idata:00416494 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00416494                 extrn __imp_strncmp:dword
.idata:00416494                                         ; DATA XREF: strncmp↑r
.idata:00416498 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00416498                 extrn __imp_strncpy:dword
.idata:00416498                                         ; DATA XREF: strncpy↑r
.idata:0041649C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041649C                 extrn __imp_strpbrk:dword
.idata:0041649C                                         ; DATA XREF: strpbrk↑r
.idata:004164A0 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004164A0                 extrn __imp_strrchr:dword
.idata:004164A0                                         ; DATA XREF: strrchr↑r
.idata:004164A4 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004164A4                 extrn __imp_strspn:dword
.idata:004164A4                                         ; DATA XREF: strspn↑r
.idata:004164A8 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004164A8                 extrn __imp_strstr:dword
.idata:004164A8                                         ; DATA XREF: strstr↑r
.idata:004164AC ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:004164AC                 extrn __imp_strtol:dword
.idata:004164AC                                         ; DATA XREF: strtol↑r
.idata:004164B0 ; int (__cdecl *toupper)(int C)
.idata:004164B0                 extrn __imp_toupper:dword
.idata:004164B0                                         ; DATA XREF: toupper↑r
.idata:004164B4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004164B4                 extrn __imp_vfprintf:dword
.idata:004164B4                                         ; DATA XREF: vfprintf↑r
.idata:004164B8
.idata:004164C0 ;
.idata:004164C0 ; Imports from OLE32.dll
.idata:004164C0 ;
.idata:004164C0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004164C0                 extrn __imp_CoCreateInstance:dword
.idata:004164C0                                         ; DATA XREF: CoCreateInstance↑r
.idata:004164C4 ; void (__stdcall *CoUninitialize)()
.idata:004164C4                 extrn __imp_CoUninitialize:dword
.idata:004164C4                                         ; DATA XREF: CoUninitialize↑r
.idata:004164C8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004164C8                 extrn __imp_OleInitialize:dword
.idata:004164C8                                         ; DATA XREF: OleInitialize↑r
.idata:004164CC
.idata:004164CC
.idata:004164CC
.idata:004164CC                 end start
