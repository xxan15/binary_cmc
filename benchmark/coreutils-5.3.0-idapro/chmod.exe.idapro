.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 731994C5E100B748C65AC2CFC6FA01DF432FBAA00B13ECAC57E9F0AD896D887D
.text:00401000 ; Input MD5    : 5F5D0C8AC1FBAC317FAAD2F2A6DB5916
.text:00401000 ; Input CRC32  : C97DFD72
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/chmod.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A240 (Wed Apr 20 18:41:04 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00011B60 (  72544.)
.text:00401000 ; Section size in file          : 00011C00 (  72704.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401920+79↓p
.text:00401040                                         ; .text:00411D90↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_411D30
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_413000
.text:004010A2                 mov     edx, dword_4130A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_413004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4130C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4130C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_411D00
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_413000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_413004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401920
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_411D30
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aChanges        db 'changes',0          ; DATA XREF: .text:off_4012E0↓o
.text:00401288 aRecursive      db 'recursive',0        ; DATA XREF: .text:004012F0↓o
.text:00401292 aNoPreserveRoot_0 db 'no-preserve-root',0
.text:00401292                                         ; DATA XREF: .text:00401300↓o
.text:004012A3 aPreserveRoot   db 'preserve-root',0    ; DATA XREF: .text:00401310↓o
.text:004012B1 aQuiet          db 'quiet',0            ; DATA XREF: .text:00401320↓o
.text:004012B7 aReference      db 'reference',0        ; DATA XREF: .text:00401330↓o
.text:004012C1 aSilent         db 'silent',0           ; DATA XREF: .text:00401340↓o
.text:004012C8 aVerbose        db 'verbose',0          ; DATA XREF: .text:00401350↓o
.text:004012D0 aHelp           db 'help',0             ; DATA XREF: .text:00401360↓o
.text:004012D5 aVersion        db 'version',0          ; DATA XREF: .text:00401370↓o
.text:004012DD                 align 10h
.text:004012E0 off_4012E0      dd offset aChanges      ; DATA XREF: sub_401920+9E↓o
.text:004012E0                                         ; "changes"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 63h
.text:004012F0                 dd offset aRecursive    ; "recursive"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 52h
.text:00401300                 dd offset aNoPreserveRoot_0 ; "no-preserve-root"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 80h
.text:00401310                 dd offset aPreserveRoot ; "preserve-root"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 81h
.text:00401320                 dd offset aQuiet        ; "quiet"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 66h
.text:00401330                 dd offset aReference    ; "reference"
.text:00401334                 dd 1, 0
.text:0040133C                 dd 82h
.text:00401340                 dd offset aSilent       ; "silent"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 66h
.text:00401350                 dd offset aVerbose      ; "verbose"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 76h
.text:00401360                 dd offset aHelp         ; "help"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 0FFFFFF7Eh
.text:00401370                 dd offset aVersion      ; "version"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401390 ; const char Locale
.text:00401390 Locale          db 0                    ; DATA XREF: sub_401920+36↓o
.text:00401391                 db 0EBh, 0Dh, 90h
.text:00401394                 align 10h
.text:004013A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013A0                                         ; DATA XREF: sub_401920+50↓o
.text:004013C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401920+58↓o
.text:004013C3                                         ; sub_401920+65↓o
.text:004013CD                 align 20h
.text:004013E0 aRcfvrWXXSTUGOA db 'Rcfvr::w::x::X::s::t::u::g::o::a::,::+::-::=::',0
.text:004013E0                                         ; DATA XREF: sub_401920+A6↓o
.text:0040140F                 align 20h
.text:00401420 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401420                                         ; DATA XREF: sub_401920:loc_401A94↓o
.text:00401420                                         ; .text:00401FFC↓o
.text:00401447 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401920+1C1↓o
.text:00401454 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401920+1C9↓o
.text:00401464 a530            db '5.3.0',0            ; DATA XREF: sub_401920+1D4↓o
.text:0040146A aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401920+1DC↓o
.text:00401478 ; const FILE stru_401478
.text:00401478 stru_401478     FILE <6F6D6863h, 0F6890064h, 67617355h, 25203A65h, 4F5B2073h, \
.text:00401478                                         ; DATA XREF: sub_401920+1E4↓o
.text:00401478                                         ; sub_401920:loc_401B1D↓o ...
.text:00401478                       4F495450h, 2E2E5D4Eh, 4F4D202Eh>
.text:00401498                 db  44h ; D
.text:00401499                 db  45h ; E
.text:0040149A                 db  5Bh ; [
.text:0040149B                 db  2Ch ; ,
.text:0040149C                 db  4Dh ; M
.text:0040149D                 db  4Fh ; O
.text:0040149E                 db  44h ; D
.text:0040149F                 db  45h ; E
.text:004014A0                 db  5Dh ; ]
.text:004014A1                 db  2Eh ; .
.text:004014A2                 db  2Eh ; .
.text:004014A3                 db  2Eh ; .
.text:004014A4                 db  20h
.text:004014A5                 db  46h ; F
.text:004014A6                 db  49h ; I
.text:004014A7                 db  4Ch ; L
.text:004014A8                 db  45h ; E
.text:004014A9                 db  2Eh ; .
.text:004014AA                 db  2Eh ; .
.text:004014AB                 db  2Eh ; .
.text:004014AC                 db  0Ah
.text:004014AD                 db  20h
.text:004014AE                 db  20h
.text:004014AF                 db  6Fh ; o
.text:004014B0                 db  72h ; r
.text:004014B1                 db  3Ah ; :
.text:004014B2                 db  20h
.text:004014B3                 db  20h
.text:004014B4                 db  25h ; %
.text:004014B5                 db  73h ; s
.text:004014B6                 db  20h
.text:004014B7                 db  5Bh ; [
.text:004014B8                 db  4Fh ; O
.text:004014B9                 db  50h ; P
.text:004014BA                 db  54h ; T
.text:004014BB                 db  49h ; I
.text:004014BC                 db  4Fh ; O
.text:004014BD                 db  4Eh ; N
.text:004014BE                 db  5Dh ; ]
.text:004014BF                 db  2Eh ; .
.text:004014C0                 db  2Eh ; .
.text:004014C1                 db  2Eh ; .
.text:004014C2                 db  20h
.text:004014C3                 db  4Fh ; O
.text:004014C4                 db  43h ; C
.text:004014C5                 db  54h ; T
.text:004014C6                 db  41h ; A
.text:004014C7                 db  4Ch ; L
.text:004014C8                 db  2Dh ; -
.text:004014C9                 db  4Dh ; M
.text:004014CA                 db  4Fh ; O
.text:004014CB                 db  44h ; D
.text:004014CC                 db  45h ; E
.text:004014CD                 db  20h
.text:004014CE                 db  46h ; F
.text:004014CF                 db  49h ; I
.text:004014D0                 db  4Ch ; L
.text:004014D1                 db  45h ; E
.text:004014D2                 db  2Eh ; .
.text:004014D3                 db  2Eh ; .
.text:004014D4                 db  2Eh ; .
.text:004014D5                 db  0Ah
.text:004014D6                 db  20h
.text:004014D7                 db  20h
.text:004014D8                 db  6Fh ; o
.text:004014D9                 db  72h ; r
.text:004014DA                 db  3Ah ; :
.text:004014DB                 db  20h
.text:004014DC                 db  20h
.text:004014DD                 db  25h ; %
.text:004014DE                 db  73h ; s
.text:004014DF                 db  20h
.text:004014E0                 db  5Bh ; [
.text:004014E1                 db  4Fh ; O
.text:004014E2                 db  50h ; P
.text:004014E3                 db  54h ; T
.text:004014E4                 db  49h ; I
.text:004014E5                 db  4Fh ; O
.text:004014E6                 db  4Eh ; N
.text:004014E7                 db  5Dh ; ]
.text:004014E8                 db  2Eh ; .
.text:004014E9                 db  2Eh ; .
.text:004014EA                 db  2Eh ; .
.text:004014EB                 db  20h
.text:004014EC                 db  2Dh ; -
.text:004014ED                 db  2Dh ; -
.text:004014EE                 db  72h ; r
.text:004014EF                 db  65h ; e
.text:004014F0                 db  66h ; f
.text:004014F1                 db  65h ; e
.text:004014F2                 db  72h ; r
.text:004014F3                 db  65h ; e
.text:004014F4                 db  6Eh ; n
.text:004014F5                 db  63h ; c
.text:004014F6                 db  65h ; e
.text:004014F7                 db  3Dh ; =
.text:004014F8                 db  52h ; R
.text:004014F9                 db  46h ; F
.text:004014FA                 db  49h ; I
.text:004014FB                 db  4Ch ; L
.text:004014FC                 db  45h ; E
.text:004014FD                 db  20h
.text:004014FE                 db  46h ; F
.text:004014FF                 db  49h ; I
.text:00401500                 db  4Ch ; L
.text:00401501                 db  45h ; E
.text:00401502                 db  2Eh ; .
.text:00401503                 db  2Eh ; .
.text:00401504                 db  2Eh ; .
.text:00401505                 db  0Ah
.text:00401506                 db    0
.text:00401507                 align 20h
.text:00401520 aChangeTheModeO db 'Change the mode of each FILE to MODE.',0Ah
.text:00401520                                         ; DATA XREF: sub_401920+224↓o
.text:00401520                                         ; .text:00402057↓o
.text:00401520                 db 0Ah
.text:00401520                 db '  -c, --changes           like verbose but report only when a cha'
.text:00401520                 db 'nge is made',0Ah,0
.text:00401595                 align 10h
.text:004015A0 aNoPreserveRoot db '      --no-preserve-root  do not treat `/',27h,' specially (the d'
.text:004015A0                                         ; DATA XREF: sub_401920+246↓o
.text:004015A0                                         ; .text:00402079↓o
.text:004015A0                 db 'efault)',0Ah
.text:004015A0                 db '      --preserve-root     fail to operate recursively on `/',27h,0Ah
.text:004015A0                 db 0
.text:00401621                 align 20h
.text:00401640 aFSilentQuietSu db '  -f, --silent, --quiet   suppress most error messages',0Ah
.text:00401640                                         ; DATA XREF: sub_401920+268↓o
.text:00401640                                         ; .text:0040209B↓o
.text:00401640                 db '  -v, --verbose           output a diagnostic for every file proc'
.text:00401640                 db 'essed',0Ah
.text:00401640                 db '      --reference=RFILE   use RFILE',27h,'s mode instead of MODE '
.text:00401640                 db 'values',0Ah
.text:00401640                 db '  -R, --recursive         change files and directories recursivel'
.text:00401640                 db 'y',0Ah,0
.text:00401744                 align 20h
.text:00401760 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401760                                         ; DATA XREF: sub_401920+28A↓o
.text:00401760                                         ; .text:004020BD↓o
.text:0040178D                 align 20h
.text:004017A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004017A0                                         ; DATA XREF: sub_401920+2AC↓o
.text:004017A0                                         ; .text:004020DF↓o
.text:004017D6                 align 10h
.text:004017E0 aEachModeIsOneO db 0Ah                  ; DATA XREF: sub_401920+2CE↓o
.text:004017E0                                         ; .text:00402101↓o
.text:004017E0                 db 'Each MODE is one or more of the letters ugoa, one of the symbols '
.text:004017E0                 db '+-= and',0Ah
.text:004017E0                 db 'one or more of the letters rwxXstugo.',0Ah,0
.text:00401851 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401920+2F0↓o
.text:00401851                                         ; .text:00402123↓o
.text:00401851                 db 'Report bugs to <%s>.',0Ah,0
.text:00401868 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401868                                         ; DATA XREF: sub_401920+2FD↓o
.text:00401868                                         ; .text:00402130↓o
.text:0040187E                 align 10h
.text:00401880 aCannotCombineM db 'cannot combine mode and --reference options',0
.text:00401880                                         ; DATA XREF: sub_401920+413↓o
.text:004018AC aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: sub_401920:loc_401E2E↓o
.text:004018BC ; const char asc_4018BC[]
.text:004018BC asc_4018BC      db '/',0                ; DATA XREF: sub_401920+557↓o
.text:004018BC                                         ; sub_402390+C7↓o ...
.text:004018BE                 align 10h
.text:004018C0 aFailedToGetAtt db 'failed to get attributes of %s',0
.text:004018C0                                         ; DATA XREF: sub_401920+563↓o
.text:004018C0                                         ; sub_401920+5A6↓o
.text:004018DF aInvalidModeS   db 'invalid mode: %s',0 ; DATA XREF: sub_401920+5E6↓o
.text:004018F0 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401920:loc_401F52↓o
.text:00401900 aMissingOperand_0 db 'missing operand after %s',0
.text:00401900                                         ; DATA XREF: sub_401920+66E↓o
.text:00401919                 align 10h
.text:00401920
.text:00401920 ; =============== S U B R O U T I N E =======================================
.text:00401920
.text:00401920 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401920
.text:00401920 sub_401920      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401920
.text:00401920 Category        = dword ptr -38h
.text:00401920 Locale          = dword ptr -34h
.text:00401920 var_30          = dword ptr -30h
.text:00401920 var_2C          = byte ptr -2Ch
.text:00401920 var_28          = byte ptr -28h
.text:00401920 var_24          = dword ptr -24h
.text:00401920 var_20          = dword ptr -20h
.text:00401920 var_1A          = byte ptr -1Ah
.text:00401920 var_19          = byte ptr -19h
.text:00401920 var_18          = dword ptr -18h
.text:00401920 var_14          = dword ptr -14h
.text:00401920 var_10          = dword ptr -10h
.text:00401920 arg_0           = dword ptr  8
.text:00401920 arg_4           = dword ptr  0Ch
.text:00401920
.text:00401920                 push    ebp
.text:00401921                 xor     eax, eax
.text:00401923                 mov     ebp, esp
.text:00401925                 push    edi
.text:00401926                 push    esi
.text:00401927                 push    ebx
.text:00401928                 sub     esp, 2Ch
.text:0040192B                 and     esp, 0FFFFFFF0h
.text:0040192E                 call    __alloca
.text:00401933                 call    sub_411DD0
.text:00401938                 mov     [ebp+var_14], 0
.text:0040193F                 mov     eax, [ebp+arg_4]
.text:00401942                 mov     [ebp+var_18], 0
.text:00401949                 mov     [ebp+var_10], 0
.text:00401950                 mov     ecx, [eax]
.text:00401952                 mov     [ebp+var_19], 0
.text:00401956                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:0040195E                 mov     ds:dword_414560, ecx
.text:00401964                 mov     [esp+38h+Category], 0 ; Category
.text:0040196B                 call    setlocale
.text:00401970                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401978                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040197F                 call    ds:__imp_libintl_bindtextdomain
.text:00401985                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040198C                 call    ds:libintl_textdomain
.text:00401992                 mov     [esp+38h+Category], offset sub_406410 ; void (__cdecl *)()
.text:00401999                 call    sub_401040
.text:0040199E                 mov     ds:byte_414020, 0
.text:004019A5                 mov     ds:byte_414010, 0
.text:004019AC                 lea     esi, [esi+0]
.text:004019B0
.text:004019B0 loc_4019B0:                             ; CODE XREF: sub_401920+152↓j
.text:004019B0                                         ; sub_401920+330↓j ...
.text:004019B0                 mov     dword ptr [esp+38h+var_28], 0
.text:004019B8                 mov     ecx, [ebp+arg_4]
.text:004019BB                 mov     eax, [ebp+arg_0]
.text:004019BE                 mov     dword ptr [esp+38h+var_2C], offset off_4012E0 ; char
.text:004019C6                 mov     [esp+38h+var_30], offset aRcfvrWXXSTUGOA ; "Rcfvr::w::x::X::s::t::u::g::o::a::,::+:"...
.text:004019CE                 mov     [esp+38h+Locale], ecx
.text:004019D2                 mov     [esp+38h+Category], eax
.text:004019D5                 call    sub_4062A0
.text:004019DA                 cmp     eax, 0FFFFFFFFh
.text:004019DD                 jz      loc_401D1E
.text:004019E3                 cmp     eax, 66h ; 'f'
.text:004019E6                 jz      loc_401D12
.text:004019EC                 cmp     eax, 66h ; 'f'
.text:004019EF                 jg      loc_401C77
.text:004019F5                 cmp     eax, 3Dh ; '='
.text:004019F8                 jz      short loc_401A30
.text:004019FA                 cmp     eax, 3Dh ; '='
.text:004019FD                 jg      loc_401C32
.text:00401A03                 cmp     eax, 0FFFFFF7Eh
.text:00401A08                 jz      loc_401B1D
.text:00401A0E                 cmp     eax, 0FFFFFF7Eh
.text:00401A13                 jle     loc_401ACC
.text:00401A19                 sub     eax, 2Bh ; '+'
.text:00401A1C                 cmp     eax, 2
.text:00401A1F                 ja      short loc_401A94
.text:00401A21                 jmp     short loc_401A30
.text:00401A21 ; ---------------------------------------------------------------------------
.text:00401A23                 align 10h
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: sub_401920+D8↑j
.text:00401A30                                         ; sub_401920+101↑j ...
.text:00401A30                 mov     ecx, dword_413020
.text:00401A36                 mov     edx, [ebp+arg_4]
.text:00401A39                 mov     edi, [edx+ecx*4-4]
.text:00401A3D                 mov     [esp+38h+Category], edi ; Str
.text:00401A40                 call    strlen
.text:00401A45                 mov     esi, [ebp+var_18]
.text:00401A48                 test    esi, esi
.text:00401A4A                 jz      short loc_401A4D
.text:00401A4C                 inc     esi
.text:00401A4D
.text:00401A4D loc_401A4D:                             ; CODE XREF: sub_401920+12A↑j
.text:00401A4D                 lea     ebx, [eax+esi]
.text:00401A50                 cmp     [ebp+var_10], ebx
.text:00401A53                 jbe     short loc_401A77
.text:00401A55
.text:00401A55 loc_401A55:                             ; CODE XREF: sub_401920+172↓j
.text:00401A55                 mov     eax, [ebp+var_14]
.text:00401A58                 mov     edx, [ebp+var_18]
.text:00401A5B                 mov     byte ptr [edx+eax], 2Ch ; ','
.text:00401A5F                 mov     [esp+38h+Locale], edi ; Source
.text:00401A63                 mov     edi, eax
.text:00401A65                 add     edi, esi
.text:00401A67                 mov     [esp+38h+Category], edi ; Destination
.text:00401A6A                 call    strcpy
.text:00401A6F                 mov     [ebp+var_18], ebx
.text:00401A72                 jmp     loc_4019B0
.text:00401A77 ; ---------------------------------------------------------------------------
.text:00401A77
.text:00401A77 loc_401A77:                             ; CODE XREF: sub_401920+133↑j
.text:00401A77                 lea     edx, [ebx+1]
.text:00401A7A                 lea     ecx, [ebp+var_10]
.text:00401A7D                 mov     [ebp+var_10], edx
.text:00401A80                 mov     edx, [ebp+var_14]
.text:00401A83                 mov     [esp+38h+Locale], ecx ; int
.text:00401A87                 mov     [esp+38h+Category], edx ; void *
.text:00401A8A                 call    sub_4060E0
.text:00401A8F                 mov     [ebp+var_14], eax
.text:00401A92                 jmp     short loc_401A55
.text:00401A94 ; ---------------------------------------------------------------------------
.text:00401A94
.text:00401A94 loc_401A94:                             ; CODE XREF: sub_401920+FF↑j
.text:00401A94                                         ; sub_401920+1B1↓j ...
.text:00401A94                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401A9B                 call    ds:libintl_gettext
.text:00401AA1                 mov     esi, ds:_iob
.text:00401AA7                 mov     edi, ds:dword_414560
.text:00401AAD                 add     esi, 40h ; '@'
.text:00401AB0                 mov     [esp+38h+var_30], edi
.text:00401AB4                 mov     [esp+38h+Locale], eax ; Format
.text:00401AB8                 mov     [esp+38h+Category], esi ; Stream
.text:00401ABB                 call    fprintf
.text:00401AC0                 mov     [esp+38h+Category], 1 ; Code
.text:00401AC7
.text:00401AC7 loc_401AC7:                             ; CODE XREF: sub_401920+1FB↓j
.text:00401AC7                                         ; sub_401920+509↓j
.text:00401AC7                 call    exit
.text:00401ACC ; ---------------------------------------------------------------------------
.text:00401ACC
.text:00401ACC loc_401ACC:                             ; CODE XREF: sub_401920+F3↑j
.text:00401ACC                 cmp     eax, 0FFFFFF7Dh
.text:00401AD1                 jnz     short loc_401A94
.text:00401AD3                 mov     [esp+38h+var_20], 0
.text:00401ADB                 mov     edx, ds:_iob
.text:00401AE1                 mov     [esp+38h+var_24], offset aJimMeyering ; "Jim Meyering"
.text:00401AE9                 mov     dword ptr [esp+38h+var_28], offset aDavidMackenzie ; "David MacKenzie"
.text:00401AF1                 add     edx, 20h ; ' '
.text:00401AF4                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:00401AFC                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:00401B04                 mov     [esp+38h+Locale], offset stru_401478 ; FILE *
.text:00401B0C                 mov     [esp+38h+Category], edx ; FILE *
.text:00401B0F                 call    sub_405F90
.text:00401B14
.text:00401B14 loc_401B14:                             ; CODE XREF: sub_401920+30D↓j
.text:00401B14                 mov     [esp+38h+Category], 0
.text:00401B1B                 jmp     short loc_401AC7
.text:00401B1D ; ---------------------------------------------------------------------------
.text:00401B1D
.text:00401B1D loc_401B1D:                             ; CODE XREF: sub_401920+E8↑j
.text:00401B1D                 mov     [esp+38h+Category], offset stru_401478._base
.text:00401B24                 call    ds:libintl_gettext
.text:00401B2A                 mov     esi, ds:dword_414560
.text:00401B30                 mov     [esp+38h+Category], eax ; Format
.text:00401B33                 mov     dword ptr [esp+38h+var_2C], esi
.text:00401B37                 mov     [esp+38h+var_30], esi
.text:00401B3B                 mov     [esp+38h+Locale], esi
.text:00401B3F                 call    printf
.text:00401B44                 mov     [esp+38h+Category], offset aChangeTheModeO ; "Change the mode of each FILE to MODE.\n"...
.text:00401B4B                 call    ds:libintl_gettext
.text:00401B51                 mov     ebx, ds:_iob
.text:00401B57                 add     ebx, 20h ; ' '
.text:00401B5A                 mov     [esp+38h+Locale], ebx ; Stream
.text:00401B5E                 mov     [esp+38h+Category], eax ; Buffer
.text:00401B61                 call    fputs
.text:00401B66                 mov     [esp+38h+Category], offset aNoPreserveRoot ; "      --no-preserve-root  do not treat "...
.text:00401B6D                 call    ds:libintl_gettext
.text:00401B73                 mov     edi, ds:_iob
.text:00401B79                 add     edi, 20h ; ' '
.text:00401B7C                 mov     [esp+38h+Locale], edi ; Stream
.text:00401B80                 mov     [esp+38h+Category], eax ; Buffer
.text:00401B83                 call    fputs
.text:00401B88                 mov     [esp+38h+Category], offset aFSilentQuietSu ; "  -f, --silent, --quiet   suppress most"...
.text:00401B8F                 call    ds:libintl_gettext
.text:00401B95                 mov     ecx, ds:_iob
.text:00401B9B                 add     ecx, 20h ; ' '
.text:00401B9E                 mov     [esp+38h+Locale], ecx ; Stream
.text:00401BA2                 mov     [esp+38h+Category], eax ; Buffer
.text:00401BA5                 call    fputs
.text:00401BAA                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401BB1                 call    ds:libintl_gettext
.text:00401BB7                 mov     esi, ds:_iob
.text:00401BBD                 add     esi, 20h ; ' '
.text:00401BC0                 mov     [esp+38h+Locale], esi ; Stream
.text:00401BC4                 mov     [esp+38h+Category], eax ; Buffer
.text:00401BC7                 call    fputs
.text:00401BCC                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401BD3                 call    ds:libintl_gettext
.text:00401BD9                 mov     ebx, ds:_iob
.text:00401BDF                 add     ebx, 20h ; ' '
.text:00401BE2                 mov     [esp+38h+Locale], ebx ; Stream
.text:00401BE6                 mov     [esp+38h+Category], eax ; Buffer
.text:00401BE9                 call    fputs
.text:00401BEE                 mov     [esp+38h+Category], offset aEachModeIsOneO ; "\nEach MODE is one or more of the lette"...
.text:00401BF5                 call    ds:libintl_gettext
.text:00401BFB                 mov     edi, ds:_iob
.text:00401C01                 add     edi, 20h ; ' '
.text:00401C04                 mov     [esp+38h+Locale], edi ; Stream
.text:00401C08                 mov     [esp+38h+Category], eax ; Buffer
.text:00401C0B                 call    fputs
.text:00401C10                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401C17                 call    ds:libintl_gettext
.text:00401C1D                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401C25                 mov     [esp+38h+Category], eax ; Format
.text:00401C28                 call    printf
.text:00401C2D                 jmp     loc_401B14
.text:00401C32 ; ---------------------------------------------------------------------------
.text:00401C32
.text:00401C32 loc_401C32:                             ; CODE XREF: sub_401920+DD↑j
.text:00401C32                 cmp     eax, 58h ; 'X'
.text:00401C35                 jz      loc_401A30
.text:00401C3B                 cmp     eax, 58h ; 'X'
.text:00401C3E                 jg      short loc_401C55
.text:00401C40                 cmp     eax, 52h ; 'R'
.text:00401C43                 jnz     loc_401A94
.text:00401C49                 mov     ds:byte_414010, 1
.text:00401C50                 jmp     loc_4019B0
.text:00401C55 ; ---------------------------------------------------------------------------
.text:00401C55
.text:00401C55 loc_401C55:                             ; CODE XREF: sub_401920+31E↑j
.text:00401C55                 cmp     eax, 61h ; 'a'
.text:00401C58                 jz      loc_401A30
.text:00401C5E                 cmp     eax, 63h ; 'c'
.text:00401C61                 jnz     loc_401A94
.text:00401C67                 mov     esi, 1
.text:00401C6C                 mov     dword_413010, esi
.text:00401C72                 jmp     loc_4019B0
.text:00401C77 ; ---------------------------------------------------------------------------
.text:00401C77
.text:00401C77 loc_401C77:                             ; CODE XREF: sub_401920+CF↑j
.text:00401C77                 cmp     eax, 76h ; 'v'
.text:00401C7A                 jz      loc_401D05
.text:00401C80                 cmp     eax, 76h ; 'v'
.text:00401C83                 jg      short loc_401CB0
.text:00401C85                 cmp     eax, 6Fh ; 'o'
.text:00401C88                 jz      loc_401A30
.text:00401C8E                 cmp     eax, 6Fh ; 'o'
.text:00401C91                 jg      short loc_401CA1
.text:00401C93                 cmp     eax, 67h ; 'g'
.text:00401C96                 jz      loc_401A30
.text:00401C9C                 jmp     loc_401A94
.text:00401CA1 ; ---------------------------------------------------------------------------
.text:00401CA1
.text:00401CA1 loc_401CA1:                             ; CODE XREF: sub_401920+371↑j
.text:00401CA1                 cmp     eax, 72h ; 'r'
.text:00401CA4                 jge     loc_401A30
.text:00401CAA                 jmp     loc_401A94
.text:00401CAA ; ---------------------------------------------------------------------------
.text:00401CAF                 align 10h
.text:00401CB0
.text:00401CB0 loc_401CB0:                             ; CODE XREF: sub_401920+363↑j
.text:00401CB0                 cmp     eax, 80h ; '€'
.text:00401CB5                 jz      short loc_401CFC
.text:00401CB7                 cmp     eax, 80h ; '€'
.text:00401CBC                 jg      short loc_401CD0
.text:00401CBE                 cmp     eax, 78h ; 'x'
.text:00401CC1                 jle     loc_401A30
.text:00401CC7                 jmp     loc_401A94
.text:00401CC7 ; ---------------------------------------------------------------------------
.text:00401CCC                 align 10h
.text:00401CD0
.text:00401CD0 loc_401CD0:                             ; CODE XREF: sub_401920+39C↑j
.text:00401CD0                 cmp     eax, 81h
.text:00401CD5                 jz      short loc_401CF3
.text:00401CD7                 cmp     eax, 82h ; '‚'
.text:00401CDC                 jnz     loc_401A94
.text:00401CE2                 mov     ebx, ds:dword_414580
.text:00401CE8                 mov     ds:dword_414030, ebx
.text:00401CEE                 jmp     loc_4019B0
.text:00401CF3 ; ---------------------------------------------------------------------------
.text:00401CF3
.text:00401CF3 loc_401CF3:                             ; CODE XREF: sub_401920+3B5↑j
.text:00401CF3                 mov     [ebp+var_19], 1
.text:00401CF7                 jmp     loc_4019B0
.text:00401CFC ; ---------------------------------------------------------------------------
.text:00401CFC
.text:00401CFC loc_401CFC:                             ; CODE XREF: sub_401920+395↑j
.text:00401CFC                 mov     [ebp+var_19], 0
.text:00401D00                 jmp     loc_4019B0
.text:00401D05 ; ---------------------------------------------------------------------------
.text:00401D05
.text:00401D05 loc_401D05:                             ; CODE XREF: sub_401920+35A↑j
.text:00401D05                 xor     ecx, ecx
.text:00401D07                 mov     dword_413010, ecx
.text:00401D0D                 jmp     loc_4019B0
.text:00401D12 ; ---------------------------------------------------------------------------
.text:00401D12
.text:00401D12 loc_401D12:                             ; CODE XREF: sub_401920+C6↑j
.text:00401D12                 mov     ds:byte_414020, 1
.text:00401D19                 jmp     loc_4019B0
.text:00401D1E ; ---------------------------------------------------------------------------
.text:00401D1E
.text:00401D1E loc_401D1E:                             ; CODE XREF: sub_401920+BD↑j
.text:00401D1E                 mov     ebx, ds:dword_414030
.text:00401D24                 test    ebx, ebx
.text:00401D26                 jz      loc_401FC0
.text:00401D2C                 mov     edi, [ebp+var_14]
.text:00401D2F                 test    edi, edi
.text:00401D31                 jz      short loc_401D58
.text:00401D33                 mov     [esp+38h+Category], offset aCannotCombineM ; "cannot combine mode and --reference opt"...
.text:00401D3A                 call    ds:libintl_gettext
.text:00401D40                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401D48                 mov     [esp+38h+Category], 1 ; Code
.text:00401D4F                 mov     [esp+38h+var_30], eax ; char *
.text:00401D53                 call    sub_408F80
.text:00401D58
.text:00401D58 loc_401D58:                             ; CODE XREF: sub_401920+411↑j
.text:00401D58                                         ; sub_401920+6A5↓j
.text:00401D58                 mov     eax, dword_413020
.text:00401D5D
.text:00401D5D loc_401D5D:                             ; CODE XREF: sub_401920+6BF↓j
.text:00401D5D                 cmp     eax, [ebp+arg_0]
.text:00401D60                 jge     loc_401F3F
.text:00401D66                 mov     eax, ds:dword_414030
.text:00401D6B                 test    eax, eax
.text:00401D6D                 jz      loc_401F27
.text:00401D73                 mov     [esp+38h+Category], eax ; char *
.text:00401D76                 call    sub_4048A0
.text:00401D7B
.text:00401D7B loc_401D7B:                             ; CODE XREF: sub_401920+61A↓j
.text:00401D7B                 test    eax, eax
.text:00401D7D                 mov     edi, eax
.text:00401D7F                 jz      loc_401EFB
.text:00401D85                 cmp     eax, 1
.text:00401D88                 jz      loc_401FE4
.text:00401D8E                 cmp     eax, 2
.text:00401D91                 jz      loc_401EB8
.text:00401D97
.text:00401D97 loc_401D97:                             ; CODE XREF: sub_401920+5D6↓j
.text:00401D97                 cmp     [ebp+var_19], 0
.text:00401D9B                 jz      short loc_401DAA
.text:00401D9D                 cmp     ds:byte_414010, 0
.text:00401DA4                 jnz     loc_401E5E
.text:00401DAA
.text:00401DAA loc_401DAA:                             ; CODE XREF: sub_401920+47B↑j
.text:00401DAA                 xor     eax, eax
.text:00401DAC                 mov     ds:dword_414040, eax
.text:00401DB1
.text:00401DB1 loc_401DB1:                             ; CODE XREF: sub_401920+551↓j
.text:00401DB1                                         ; sub_401920+593↓j
.text:00401DB1                 mov     [ebp+var_1A], 1
.text:00401DB5                 mov     esi, [ebp+arg_4]
.text:00401DB8                 mov     edx, dword_413020
.text:00401DBE                 mov     [esp+38h+var_30], 0
.text:00401DC6                 mov     [esp+38h+Locale], 1
.text:00401DCE                 lea     ebx, [esi+edx*4]
.text:00401DD1                 mov     [esp+38h+Category], ebx
.text:00401DD4                 call    sub_4049A0
.text:00401DD9                 mov     esi, eax
.text:00401DDB
.text:00401DDB loc_401DDB:                             ; CODE XREF: sub_401920+4E8↓j
.text:00401DDB                 mov     [esp+38h+Category], esi ; void *
.text:00401DDE                 call    sub_402DD0
.text:00401DE3                 test    eax, eax
.text:00401DE5                 jz      short loc_401E0A
.text:00401DE7                 mov     [esp+38h+var_30], edi
.text:00401DEB                 xor     ebx, ebx
.text:00401DED                 mov     [esp+38h+Locale], eax
.text:00401DF1                 mov     [esp+38h+Category], esi
.text:00401DF4                 call    sub_402390
.text:00401DF9                 test    al, al
.text:00401DFB                 jz      short loc_401E05
.text:00401DFD                 cmp     [ebp+var_1A], 0
.text:00401E01                 jz      short loc_401E05
.text:00401E03                 mov     bl, 1
.text:00401E05
.text:00401E05 loc_401E05:                             ; CODE XREF: sub_401920+4DB↑j
.text:00401E05                                         ; sub_401920+4E1↑j
.text:00401E05                 mov     [ebp+var_1A], bl
.text:00401E08                 jmp     short loc_401DDB
.text:00401E0A ; ---------------------------------------------------------------------------
.text:00401E0A
.text:00401E0A loc_401E0A:                             ; CODE XREF: sub_401920+4C5↑j
.text:00401E0A                 call    _errno
.text:00401E0F                 mov     edi, [eax]
.text:00401E11                 test    edi, edi
.text:00401E13                 jnz     short loc_401E2E
.text:00401E15
.text:00401E15 loc_401E15:                             ; CODE XREF: sub_401920+53C↓j
.text:00401E15                 mov     [esp+38h+Category], esi ; void *
.text:00401E18                 xor     ebx, ebx
.text:00401E1A                 call    sub_402CD0
.text:00401E1F                 cmp     [ebp+var_1A], 0
.text:00401E23                 setz    bl
.text:00401E26                 mov     [esp+38h+Category], ebx
.text:00401E29                 jmp     loc_401AC7
.text:00401E2E ; ---------------------------------------------------------------------------
.text:00401E2E
.text:00401E2E loc_401E2E:                             ; CODE XREF: sub_401920+4F3↑j
.text:00401E2E                 mov     [esp+38h+Category], offset aFtsReadFailed ; "fts_read failed"
.text:00401E35                 call    ds:libintl_gettext
.text:00401E3B                 mov     edi, eax
.text:00401E3D                 call    _errno
.text:00401E42                 mov     [esp+38h+var_30], edi ; char *
.text:00401E46                 mov     ecx, [eax]
.text:00401E48                 mov     [esp+38h+Category], 0 ; Code
.text:00401E4F                 mov     [esp+38h+Locale], ecx ; ErrorMessage
.text:00401E53                 call    sub_408F80
.text:00401E58                 mov     [ebp+var_1A], 0
.text:00401E5C                 jmp     short loc_401E15
.text:00401E5E ; ---------------------------------------------------------------------------
.text:00401E5E
.text:00401E5E loc_401E5E:                             ; CODE XREF: sub_401920+484↑j
.text:00401E5E                 mov     [esp+38h+Category], offset unk_414000
.text:00401E65                 call    sub_404920
.text:00401E6A                 mov     ds:dword_414040, eax
.text:00401E6F                 test    eax, eax
.text:00401E71                 jnz     loc_401DB1
.text:00401E77                 mov     [esp+38h+Category], offset asc_4018BC ; "/"
.text:00401E7E                 call    sub_406520
.text:00401E83                 mov     [esp+38h+Category], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:00401E8A                 mov     esi, eax
.text:00401E8C                 call    ds:libintl_gettext
.text:00401E92                 mov     ebx, eax
.text:00401E94                 call    _errno
.text:00401E99                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:00401E9D                 mov     [esp+38h+var_30], ebx ; char *
.text:00401EA1                 mov     esi, [eax]
.text:00401EA3                 mov     [esp+38h+Category], 1 ; Code
.text:00401EAA                 mov     [esp+38h+Locale], esi ; ErrorMessage
.text:00401EAE                 call    sub_408F80
.text:00401EB3                 jmp     loc_401DB1
.text:00401EB8 ; ---------------------------------------------------------------------------
.text:00401EB8
.text:00401EB8 loc_401EB8:                             ; CODE XREF: sub_401920+471↑j
.text:00401EB8                 mov     edx, ds:dword_414030
.text:00401EBE                 mov     [esp+38h+Category], edx ; char *
.text:00401EC1                 call    sub_406520
.text:00401EC6                 mov     [esp+38h+Category], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:00401ECD                 mov     esi, eax
.text:00401ECF                 call    ds:libintl_gettext
.text:00401ED5                 mov     ebx, eax
.text:00401ED7                 call    _errno
.text:00401EDC                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:00401EE0                 mov     [esp+38h+var_30], ebx ; char *
.text:00401EE4                 mov     ecx, [eax]
.text:00401EE6                 mov     [esp+38h+Locale], ecx ; ErrorMessage
.text:00401EEA
.text:00401EEA loc_401EEA:                             ; CODE XREF: sub_401920+605↓j
.text:00401EEA                 mov     [esp+38h+Category], 1 ; Code
.text:00401EF1                 call    sub_408F80
.text:00401EF6                 jmp     loc_401D97
.text:00401EFB ; ---------------------------------------------------------------------------
.text:00401EFB
.text:00401EFB loc_401EFB:                             ; CODE XREF: sub_401920+45F↑j
.text:00401EFB                 mov     ebx, [ebp+var_14]
.text:00401EFE                 mov     [esp+38h+Category], ebx ; char *
.text:00401F01                 call    sub_406520
.text:00401F06                 mov     [esp+38h+Category], offset aInvalidModeS ; "invalid mode: %s"
.text:00401F0D                 mov     esi, eax
.text:00401F0F                 call    ds:libintl_gettext
.text:00401F15                 mov     dword ptr [esp+38h+var_2C], esi
.text:00401F19                 mov     [esp+38h+Locale], 0
.text:00401F21                 mov     [esp+38h+var_30], eax
.text:00401F25                 jmp     short loc_401EEA
.text:00401F27 ; ---------------------------------------------------------------------------
.text:00401F27
.text:00401F27 loc_401F27:                             ; CODE XREF: sub_401920+44D↑j
.text:00401F27                 mov     [esp+38h+Locale], 7
.text:00401F2F                 mov     edx, [ebp+var_14]
.text:00401F32                 mov     [esp+38h+Category], edx
.text:00401F35                 call    sub_404360
.text:00401F3A                 jmp     loc_401D7B
.text:00401F3F ; ---------------------------------------------------------------------------
.text:00401F3F
.text:00401F3F loc_401F3F:                             ; CODE XREF: sub_401920+440↑j
.text:00401F3F                 mov     edi, [ebp+var_14]
.text:00401F42                 test    edi, edi
.text:00401F44                 jz      short loc_401F52
.text:00401F46                 mov     esi, [ebp+arg_4]
.text:00401F49                 mov     edx, [ebp+var_14]
.text:00401F4C                 cmp     edx, [esi+eax*4-4]
.text:00401F50                 jz      short loc_401F7C
.text:00401F52
.text:00401F52 loc_401F52:                             ; CODE XREF: sub_401920+624↑j
.text:00401F52                 mov     [esp+38h+Category], offset aMissingOperand ; "missing operand"
.text:00401F59                 call    ds:libintl_gettext
.text:00401F5F                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401F67                 mov     [esp+38h+Category], 0 ; Code
.text:00401F6E                 mov     [esp+38h+var_30], eax ; char *
.text:00401F72                 call    sub_408F80
.text:00401F77                 jmp     loc_401A94
.text:00401F7C ; ---------------------------------------------------------------------------
.text:00401F7C
.text:00401F7C loc_401F7C:                             ; CODE XREF: sub_401920+630↑j
.text:00401F7C                 mov     ecx, [ebp+arg_0]
.text:00401F7F                 mov     eax, [ebp+arg_4]
.text:00401F82                 mov     ebx, [eax+ecx*4-4]
.text:00401F86                 mov     [esp+38h+Category], ebx ; char *
.text:00401F89                 call    sub_406520
.text:00401F8E                 mov     [esp+38h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:00401F95                 mov     edi, eax
.text:00401F97                 call    ds:libintl_gettext
.text:00401F9D                 mov     dword ptr [esp+38h+var_2C], edi ; char
.text:00401FA1                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401FA9                 mov     [esp+38h+Category], 0 ; Code
.text:00401FB0                 mov     [esp+38h+var_30], eax ; char *
.text:00401FB4                 call    sub_408F80
.text:00401FB9                 jmp     loc_401A94
.text:00401FB9 ; ---------------------------------------------------------------------------
.text:00401FBE                 align 10h
.text:00401FC0
.text:00401FC0 loc_401FC0:                             ; CODE XREF: sub_401920+406↑j
.text:00401FC0                 mov     esi, [ebp+var_14]
.text:00401FC3                 test    esi, esi
.text:00401FC5                 jnz     loc_401D58
.text:00401FCB                 mov     eax, dword_413020
.text:00401FD0                 mov     ebx, [ebp+arg_4]
.text:00401FD3                 mov     edx, [ebx+eax*4]
.text:00401FD6                 inc     eax
.text:00401FD7                 mov     dword_413020, eax
.text:00401FDC                 mov     [ebp+var_14], edx
.text:00401FDF                 jmp     loc_401D5D
.text:00401FE4 ; ---------------------------------------------------------------------------
.text:00401FE4
.text:00401FE4 loc_401FE4:                             ; CODE XREF: sub_401920+468↑j
.text:00401FE4                 call    sub_405A90
.text:00401FE4 sub_401920      endp
.text:00401FE4
.text:00401FE4 ; ---------------------------------------------------------------------------
.text:00401FE9                 align 10h
.text:00401FF0                 push    ebx
.text:00401FF1                 sub     esp, 18h
.text:00401FF4                 mov     ebx, [esp+20h]
.text:00401FF8                 test    ebx, ebx
.text:00401FFA                 jz      short loc_402030
.text:00401FFC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402003                 call    ds:libintl_gettext
.text:00402009                 mov     edx, ds:_iob
.text:0040200F                 mov     ecx, ds:dword_414560
.text:00402015                 add     edx, 40h ; '@'
.text:00402018                 mov     [esp+8], ecx
.text:0040201C                 mov     [esp+4], eax
.text:00402020                 mov     [esp], edx
.text:00402023                 call    fprintf
.text:00402028
.text:00402028 loc_402028:                             ; CODE XREF: .text:00402140↓j
.text:00402028                 mov     [esp], ebx
.text:0040202B                 call    exit
.text:00402030 ; ---------------------------------------------------------------------------
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: .text:00401FFA↑j
.text:00402030                 mov     dword ptr [esp], offset stru_401478._base
.text:00402037                 call    ds:libintl_gettext
.text:0040203D                 mov     ecx, ds:dword_414560
.text:00402043                 mov     [esp], eax
.text:00402046                 mov     [esp+0Ch], ecx
.text:0040204A                 mov     [esp+8], ecx
.text:0040204E                 mov     [esp+4], ecx
.text:00402052                 call    printf
.text:00402057                 mov     dword ptr [esp], offset aChangeTheModeO ; "Change the mode of each FILE to MODE.\n"...
.text:0040205E                 call    ds:libintl_gettext
.text:00402064                 mov     ecx, ds:_iob
.text:0040206A                 add     ecx, 20h ; ' '
.text:0040206D                 mov     [esp+4], ecx
.text:00402071                 mov     [esp], eax
.text:00402074                 call    fputs
.text:00402079                 mov     dword ptr [esp], offset aNoPreserveRoot ; "      --no-preserve-root  do not treat "...
.text:00402080                 call    ds:libintl_gettext
.text:00402086                 mov     ecx, ds:_iob
.text:0040208C                 add     ecx, 20h ; ' '
.text:0040208F                 mov     [esp+4], ecx
.text:00402093                 mov     [esp], eax
.text:00402096                 call    fputs
.text:0040209B                 mov     dword ptr [esp], offset aFSilentQuietSu ; "  -f, --silent, --quiet   suppress most"...
.text:004020A2                 call    ds:libintl_gettext
.text:004020A8                 mov     ecx, ds:_iob
.text:004020AE                 add     ecx, 20h ; ' '
.text:004020B1                 mov     [esp+4], ecx
.text:004020B5                 mov     [esp], eax
.text:004020B8                 call    fputs
.text:004020BD                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004020C4                 call    ds:libintl_gettext
.text:004020CA                 mov     ecx, ds:_iob
.text:004020D0                 add     ecx, 20h ; ' '
.text:004020D3                 mov     [esp+4], ecx
.text:004020D7                 mov     [esp], eax
.text:004020DA                 call    fputs
.text:004020DF                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:004020E6                 call    ds:libintl_gettext
.text:004020EC                 mov     ecx, ds:_iob
.text:004020F2                 add     ecx, 20h ; ' '
.text:004020F5                 mov     [esp+4], ecx
.text:004020F9                 mov     [esp], eax
.text:004020FC                 call    fputs
.text:00402101                 mov     dword ptr [esp], offset aEachModeIsOneO ; "\nEach MODE is one or more of the lette"...
.text:00402108                 call    ds:libintl_gettext
.text:0040210E                 mov     ecx, ds:_iob
.text:00402114                 add     ecx, 20h ; ' '
.text:00402117                 mov     [esp+4], ecx
.text:0040211B                 mov     [esp], eax
.text:0040211E                 call    fputs
.text:00402123                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040212A                 call    ds:libintl_gettext
.text:00402130                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402138                 mov     [esp], eax
.text:0040213B                 call    printf
.text:00402140                 jmp     loc_402028
.text:00402140 ; ---------------------------------------------------------------------------
.text:00402145                 align 20h
.text:00402160 aItIsDangerousT db 'it is dangerous to operate recursively on %s',0
.text:00402160                                         ; DATA XREF: sub_402390+E5↓o
.text:0040218D                 align 20h
.text:004021A0 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.text:004021A0                                         ; DATA XREF: sub_402390:loc_4024A0↓o
.text:004021D1                 db 0EBh, 0Dh, 90h
.text:004021D4                 align 10h
.text:004021E0 aNeitherSymboli db 'neither symbolic link %s nor referent has been changed',0Ah,0
.text:004021E0                                         ; DATA XREF: sub_402390+1F0↓o
.text:00402218                 align 10h
.text:00402220 aModeOfSChanged db 'mode of %s changed to %04lo (%s)',0Ah,0
.text:00402220                                         ; DATA XREF: sub_402390:loc_40260B↓o
.text:00402242                 align 20h
.text:00402260 aModeOfSRetaine db 'mode of %s retained as %04lo (%s)',0Ah,0
.text:00402260                                         ; DATA XREF: sub_402390+2C4↓o
.text:00402283                 align 20h
.text:004022A0 aFailedToChange db 'failed to change mode of %s to %04lo (%s)',0Ah,0
.text:004022A0                                         ; DATA XREF: sub_402390:loc_40265D↓o
.text:004022CB aGettingNewAttr db 'getting new attributes of %s',0
.text:004022CB                                         ; DATA XREF: sub_402390+307↓o
.text:004022E8 aChangingPermis db 'changing permissions of %s',0
.text:004022E8                                         ; DATA XREF: sub_402390+3BA↓o
.text:00402303                 align 20h
.text:00402320 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s (same as %s)',0
.text:00402320                                         ; DATA XREF: sub_402390+423↓o
.text:0040235A aCannotReadDire db 'cannot read directory %s',0
.text:0040235A                                         ; DATA XREF: sub_402390+463↓o
.text:00402373 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: sub_402390+4B1↓o
.text:00402384 aS              db '%s',0               ; DATA XREF: sub_402390+4C6↓o
.text:00402387                 align 10h
.text:00402390
.text:00402390 ; =============== S U B R O U T I N E =======================================
.text:00402390
.text:00402390
.text:00402390 sub_402390      proc near               ; CODE XREF: sub_401920+4D4↑p
.text:00402390
.text:00402390 Format          = dword ptr -0ECh
.text:00402390 AccessMode      = dword ptr -0E8h
.text:00402390 var_E4          = dword ptr -0E4h
.text:00402390 var_E0          = byte ptr -0E0h
.text:00402390 var_DC          = dword ptr -0DCh
.text:00402390 var_CC          = dword ptr -0CCh
.text:00402390 var_C8          = dword ptr -0C8h
.text:00402390 var_C4          = dword ptr -0C4h
.text:00402390 var_C0          = dword ptr -0C0h
.text:00402390 var_AF          = byte ptr -0AFh
.text:00402390 var_AE          = byte ptr -0AEh
.text:00402390 var_AD          = byte ptr -0ADh
.text:00402390 var_AC          = dword ptr -0ACh
.text:00402390 var_A8          = dword ptr -0A8h
.text:00402390 FileName        = dword ptr -0A4h
.text:00402390 var_A0          = dword ptr -0A0h
.text:00402390 var_9C          = byte ptr -9Ch
.text:00402390 var_9B          = byte ptr -9Bh
.text:00402390 var_92          = byte ptr -92h
.text:00402390 var_8C          = dword ptr -8Ch
.text:00402390 arg_0           = dword ptr  4
.text:00402390 arg_4           = dword ptr  8
.text:00402390 arg_8           = dword ptr  0Ch
.text:00402390
.text:00402390                 push    ebp
.text:00402391                 push    edi
.text:00402392                 push    esi
.text:00402393                 push    ebx
.text:00402394                 sub     esp, 0DCh
.text:0040239A                 mov     ebp, [esp+0ECh+arg_4]
.text:004023A1                 mov     [esp+0ECh+var_AD], 1
.text:004023A6                 mov     [esp+0ECh+var_AE], 1
.text:004023AB                 mov     edx, [ebp+18h]
.text:004023AE                 mov     eax, [ebp+14h]
.text:004023B1                 mov     [esp+0ECh+var_A0], edx
.text:004023B5                 lea     edx, [ebp+50h]
.text:004023B8                 mov     [esp+0ECh+var_A8], edx
.text:004023BC                 movzx   edx, word ptr [ebp+44h]
.text:004023C0                 mov     [esp+0ECh+FileName], eax
.text:004023C4                 mov     eax, 1
.text:004023C9                 cmp     edx, 6
.text:004023CC                 jz      loc_4025AE
.text:004023D2                 cmp     edx, 6
.text:004023D5                 jg      loc_402827
.text:004023DB                 cmp     edx, 4
.text:004023DE                 jz      loc_4027E7
.text:004023E4
.text:004023E4 loc_4023E4:                             ; CODE XREF: sub_402390+492↓j
.text:004023E4                                         ; sub_402390+49F↓j
.text:004023E4                 movzx   ecx, [esp+0ECh+var_AD]
.text:004023E9                 test    cl, cl
.text:004023EB                 jz      loc_4024D8
.text:004023F1                 mov     edi, ds:dword_414040
.text:004023F7                 test    edi, edi
.text:004023F9                 jz      loc_4024D0
.text:004023FF                 mov     eax, [esp+0ECh+var_A8]
.text:00402403                 mov     ebx, [eax+8]
.text:00402406                 mov     esi, [eax+0Ch]
.text:00402409                 mov     eax, [edi]
.text:0040240B                 mov     [esp+0ECh+var_C4], ebx
.text:0040240F                 mov     edx, [esp+0ECh+var_C4]
.text:00402413                 mov     [esp+0ECh+var_C0], esi
.text:00402417                 mov     ebx, [edi+4]
.text:0040241A                 mov     esi, [esp+0ECh+var_C0]
.text:0040241E                 xor     eax, edx
.text:00402420                 xor     esi, ebx
.text:00402422                 or      esi, eax
.text:00402424                 jnz     loc_4024D0
.text:0040242A                 mov     eax, [esp+0ECh+var_A8]
.text:0040242E                 mov     esi, [eax+10h]
.text:00402431                 mov     ebx, [eax+14h]
.text:00402434                 mov     eax, [edi+0Ch]
.text:00402437                 mov     [esp+0ECh+var_CC], esi
.text:0040243B                 mov     esi, [esp+0ECh+var_CC]
.text:0040243F                 mov     [esp+0ECh+var_C8], ebx
.text:00402443                 mov     ebx, [edi+8]
.text:00402446                 mov     edi, [esp+0ECh+var_C8]
.text:0040244A                 xor     ebx, esi
.text:0040244C                 xor     edi, eax
.text:0040244E                 or      edi, ebx
.text:00402450                 jnz     short loc_4024D0
.text:00402452                 cld
.text:00402453                 mov     esi, [esp+0ECh+var_A0]
.text:00402457                 mov     edi, offset asc_4018BC ; "/"
.text:0040245C                 mov     ecx, 2
.text:00402461                 repe cmpsb
.text:00402463                 jnz     loc_402789
.text:00402469                 mov     ecx, [esp+0ECh+var_A0]
.text:0040246D                 mov     [esp+0ECh+Format], ecx ; char *
.text:00402470                 call    sub_406520
.text:00402475                 mov     [esp+0ECh+Format], offset aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:0040247C                 mov     edi, eax
.text:0040247E                 call    ds:libintl_gettext
.text:00402484                 mov     dword ptr [esp+0ECh+var_E0], edi ; char
.text:00402488                 mov     [esp+0ECh+AccessMode], 0 ; ErrorMessage
.text:00402490                 mov     [esp+0ECh+Format], 0 ; Code
.text:00402497                 mov     [esp+0ECh+var_E4], eax ; char *
.text:0040249B                 call    sub_408F80
.text:004024A0
.text:004024A0 loc_4024A0:                             ; CODE XREF: sub_402390+452↓j
.text:004024A0                 mov     [esp+0ECh+Format], offset aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:004024A7                 call    ds:libintl_gettext
.text:004024AD                 mov     [esp+0ECh+AccessMode], 0 ; ErrorMessage
.text:004024B5                 mov     [esp+0ECh+Format], 0 ; Code
.text:004024BC                 mov     [esp+0ECh+var_E4], eax ; char *
.text:004024C0                 call    sub_408F80
.text:004024C5                 mov     [esp+0ECh+var_AD], 0
.text:004024CA                 xor     ecx, ecx
.text:004024CC                 lea     esi, [esi+0]
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_402390+69↑j
.text:004024D0                                         ; sub_402390+94↑j ...
.text:004024D0                 test    cl, cl
.text:004024D2                 jnz     loc_4026D6
.text:004024D8
.text:004024D8 loc_4024D8:                             ; CODE XREF: sub_402390+5B↑j
.text:004024D8                                         ; sub_402390+39D↓j ...
.text:004024D8                 cmp     dword_413010, 2
.text:004024DF                 jz      loc_4025A0
.text:004024E5                 cmp     [esp+0ECh+var_AD], 0
.text:004024EA                 mov     [esp+0ECh+var_AF], 0
.text:004024EF                 jz      short loc_402520
.text:004024F1                 cmp     [esp+0ECh+var_AE], 0
.text:004024F6                 jz      short loc_402520
.text:004024F8                 mov     eax, [esp+0ECh+var_A8]
.text:004024FC                 movzx   ebx, word ptr [eax]
.text:004024FF                 mov     eax, [esp+0ECh+var_AC]
.text:00402503                 test    ah, 0Eh
.text:00402506                 jnz     loc_402666
.text:0040250C
.text:0040250C loc_40250C:                             ; CODE XREF: sub_402390+341↓j
.text:0040250C                 xor     ebx, eax
.text:0040250E                 and     ebx, 0FFFh
.text:00402514                 jz      short loc_402520
.text:00402516                 mov     [esp+0ECh+var_AF], 1
.text:0040251B                 nop
.text:0040251C                 lea     esi, [esi+0]
.text:00402520
.text:00402520 loc_402520:                             ; CODE XREF: sub_402390+15F↑j
.text:00402520                                         ; sub_402390+166↑j ...
.text:00402520                 cmp     [esp+0ECh+var_AF], 0
.text:00402525                 jnz     short loc_402540
.text:00402527                 mov     ecx, dword_413010
.text:0040252D                 test    ecx, ecx
.text:0040252F                 jnz     short loc_4025A0
.text:00402531                 jmp     short loc_402540
.text:00402531 ; ---------------------------------------------------------------------------
.text:00402533                 align 10h
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_402390+195↑j
.text:00402540                                         ; sub_402390+1A1↑j
.text:00402540                 cmp     [esp+0ECh+var_AD], 0
.text:00402545                 mov     ebx, 2
.text:0040254A                 jz      short loc_402570
.text:0040254C                 xor     ebx, ebx
.text:0040254E                 cmp     [esp+0ECh+var_AE], 0
.text:00402553                 jz      short loc_402570
.text:00402555                 xor     [esp+0ECh+var_AF], 1
.text:0040255A                 movzx   eax, [esp+0ECh+var_AF]
.text:0040255F                 lea     ebx, [eax+eax+1]
.text:00402563                 lea     esi, [esi+0]
.text:00402569                 lea     edi, [edi+0]
.text:00402570
.text:00402570 loc_402570:                             ; CODE XREF: sub_402390+1BA↑j
.text:00402570                                         ; sub_402390+1C3↑j
.text:00402570                 test    ebx, ebx
.text:00402572                 jnz     short loc_4025E0
.text:00402574                 mov     edx, [esp+0ECh+var_A0]
.text:00402578                 mov     [esp+0ECh+Format], edx ; char *
.text:0040257B                 call    sub_406520
.text:00402580                 mov     [esp+0ECh+Format], offset aNeitherSymboli ; "neither symbolic link %s nor referent h"...
.text:00402587                 mov     edi, eax
.text:00402589                 call    ds:libintl_gettext
.text:0040258F                 mov     [esp+0ECh+AccessMode], edi
.text:00402593                 mov     [esp+0ECh+Format], eax ; Format
.text:00402596                 call    printf
.text:0040259B                 nop
.text:0040259C                 lea     esi, [esi+0]
.text:004025A0
.text:004025A0 loc_4025A0:                             ; CODE XREF: sub_402390+14F↑j
.text:004025A0                                         ; sub_402390+19F↑j ...
.text:004025A0                 cmp     ds:byte_414010, 0
.text:004025A7                 jz      short loc_4025C0
.text:004025A9
.text:004025A9 loc_4025A9:                             ; CODE XREF: sub_402390+24B↓j
.text:004025A9                 movzx   eax, [esp+0ECh+var_AD]
.text:004025AE
.text:004025AE loc_4025AE:                             ; CODE XREF: sub_402390+3C↑j
.text:004025AE                 add     esp, 0DCh
.text:004025B4                 pop     ebx
.text:004025B5                 pop     esi
.text:004025B6                 pop     edi
.text:004025B7                 pop     ebp
.text:004025B8                 retn
.text:004025B8 ; ---------------------------------------------------------------------------
.text:004025B9                 align 10h
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_402390+217↑j
.text:004025C0                 mov     [esp+0ECh+AccessMode], ebp
.text:004025C4                 mov     ebp, [esp+0ECh+arg_0]
.text:004025CB                 mov     [esp+0ECh+var_E4], 4
.text:004025D3                 mov     [esp+0ECh+Format], ebp
.text:004025D6                 call    sub_404180
.text:004025DB                 jmp     short loc_4025A9
.text:004025DB ; ---------------------------------------------------------------------------
.text:004025DD                 align 10h
.text:004025E0
.text:004025E0 loc_4025E0:                             ; CODE XREF: sub_402390+1E2↑j
.text:004025E0                 mov     esi, [esp+0ECh+var_AC]
.text:004025E4                 lea     ecx, [esp+0ECh+var_9C]
.text:004025E8                 mov     [esp+0ECh+AccessMode], ecx
.text:004025EC                 mov     [esp+0ECh+Format], esi
.text:004025EF                 call    sub_402860
.text:004025F4                 mov     [esp+0ECh+var_92], 0
.text:004025F9                 cmp     ebx, 2
.text:004025FC                 jz      short loc_40265D
.text:004025FE                 cmp     ebx, 2
.text:00402601                 ja      short loc_40264F
.text:00402603                 dec     ebx
.text:00402604                 jz      short loc_40260B
.text:00402606
.text:00402606 loc_402606:                             ; CODE XREF: sub_402390+2C2↓j
.text:00402606                 call    abort
.text:0040260B ; ---------------------------------------------------------------------------
.text:0040260B
.text:0040260B loc_40260B:                             ; CODE XREF: sub_402390+274↑j
.text:0040260B                 mov     [esp+0ECh+Format], offset aModeOfSChanged ; "mode of %s changed to %04lo (%s)\n"
.text:00402612
.text:00402612 loc_402612:                             ; CODE XREF: sub_402390+2CB↓j
.text:00402612                                         ; sub_402390+2D4↓j
.text:00402612                 call    ds:libintl_gettext
.text:00402618                 mov     edx, [esp+0ECh+var_A0]
.text:0040261C                 lea     esi, [esp+0ECh+var_9B]
.text:00402620                 mov     edi, eax
.text:00402622                 mov     [esp+0ECh+Format], edx ; char *
.text:00402625                 call    sub_406520
.text:0040262A                 and     [esp+0ECh+var_AC], 0FFFh
.text:00402632                 mov     dword ptr [esp+0ECh+var_E0], esi
.text:00402636                 mov     [esp+0ECh+AccessMode], eax
.text:0040263A                 mov     ebx, [esp+0ECh+var_AC]
.text:0040263E                 mov     [esp+0ECh+Format], edi ; Format
.text:00402641                 mov     [esp+0ECh+var_E4], ebx
.text:00402645                 call    printf
.text:0040264A                 jmp     loc_4025A0
.text:0040264F ; ---------------------------------------------------------------------------
.text:0040264F
.text:0040264F loc_40264F:                             ; CODE XREF: sub_402390+271↑j
.text:0040264F                 cmp     ebx, 3
.text:00402652                 jnz     short loc_402606
.text:00402654                 mov     [esp+0ECh+Format], offset aModeOfSRetaine ; "mode of %s retained as %04lo (%s)\n"
.text:0040265B                 jmp     short loc_402612
.text:0040265D ; ---------------------------------------------------------------------------
.text:0040265D
.text:0040265D loc_40265D:                             ; CODE XREF: sub_402390+26C↑j
.text:0040265D                 mov     [esp+0ECh+Format], offset aFailedToChange ; "failed to change mode of %s to %04lo (%"...
.text:00402664                 jmp     short loc_402612
.text:00402666 ; ---------------------------------------------------------------------------
.text:00402666
.text:00402666 loc_402666:                             ; CODE XREF: sub_402390+176↑j
.text:00402666                 mov     ecx, [esp+0ECh+FileName]
.text:0040266A                 lea     edx, [esp+0ECh+var_8C]
.text:0040266E                 mov     [esp+0ECh+AccessMode], edx ; int
.text:00402672                 mov     [esp+0ECh+Format], ecx ; char *
.text:00402675                 call    sub_40BFA0
.text:0040267A                 test    eax, eax
.text:0040267C                 jz      short loc_4026CC
.text:0040267E                 cmp     ds:byte_414020, 0
.text:00402685                 jnz     loc_402520
.text:0040268B                 mov     esi, [esp+0ECh+FileName]
.text:0040268F                 mov     [esp+0ECh+Format], esi ; char *
.text:00402692                 call    sub_406520
.text:00402697                 mov     [esp+0ECh+Format], offset aGettingNewAttr ; "getting new attributes of %s"
.text:0040269E                 mov     ebx, eax
.text:004026A0                 call    ds:libintl_gettext
.text:004026A6                 mov     edi, eax
.text:004026A8                 call    _errno
.text:004026AD                 mov     dword ptr [esp+0ECh+var_E0], ebx ; char
.text:004026B1                 mov     [esp+0ECh+var_E4], edi ; char *
.text:004026B5                 mov     edi, [eax]
.text:004026B7                 mov     [esp+0ECh+Format], 0 ; Code
.text:004026BE                 mov     [esp+0ECh+AccessMode], edi ; ErrorMessage
.text:004026C2                 call    sub_408F80
.text:004026C7                 jmp     loc_402520
.text:004026CC ; ---------------------------------------------------------------------------
.text:004026CC
.text:004026CC loc_4026CC:                             ; CODE XREF: sub_402390+2EC↑j
.text:004026CC                 movzx   eax, word ptr [esp+0ECh+var_8C]
.text:004026D1                 jmp     loc_40250C
.text:004026D6 ; ---------------------------------------------------------------------------
.text:004026D6
.text:004026D6 loc_4026D6:                             ; CODE XREF: sub_402390+142↑j
.text:004026D6                 mov     esi, [esp+0ECh+arg_8]
.text:004026DD                 mov     ebx, [esp+0ECh+var_A8]
.text:004026E1                 mov     [esp+0ECh+AccessMode], esi
.text:004026E5                 movzx   edi, word ptr [ebx]
.text:004026E8                 mov     [esp+0ECh+Format], edi
.text:004026EB                 call    sub_404730
.text:004026F0                 movzx   edx, ax
.text:004026F3                 mov     eax, [esp+0ECh+var_A8]
.text:004026F7                 mov     [esp+0ECh+var_AC], edx
.text:004026FB                 mov     ecx, [eax]
.text:004026FD                 and     ecx, 0F000h
.text:00402703                 cmp     ecx, 0A000h
.text:00402709                 jz      short loc_40277F
.text:0040270B                 mov     edx, [esp+0ECh+var_AC]
.text:0040270F                 mov     ecx, [esp+0ECh+FileName]
.text:00402713                 mov     [esp+0ECh+AccessMode], edx ; AccessMode
.text:00402717                 mov     [esp+0ECh+Format], ecx ; FileName
.text:0040271A                 call    _chmod
.text:0040271F                 test    eax, eax
.text:00402721                 setz    [esp+0ECh+var_AD]
.text:00402726                 cmp     ds:byte_414020, 0
.text:0040272D                 jnz     loc_4024D8
.text:00402733                 cmp     [esp+0ECh+var_AD], 0
.text:00402738                 jnz     loc_4024D8
.text:0040273E                 mov     esi, [esp+0ECh+var_A0]
.text:00402742                 mov     [esp+0ECh+Format], esi ; char *
.text:00402745                 call    sub_406520
.text:0040274A                 mov     [esp+0ECh+Format], offset aChangingPermis ; "changing permissions of %s"
.text:00402751                 mov     ebx, eax
.text:00402753                 call    ds:libintl_gettext
.text:00402759                 mov     edi, eax
.text:0040275B                 call    _errno
.text:00402760                 mov     dword ptr [esp+0ECh+var_E0], ebx ; char
.text:00402764                 mov     [esp+0ECh+var_E4], edi ; char *
.text:00402768                 mov     edi, [eax]
.text:0040276A                 mov     [esp+0ECh+Format], 0 ; Code
.text:00402771                 mov     [esp+0ECh+AccessMode], edi ; ErrorMessage
.text:00402775                 call    sub_408F80
.text:0040277A                 jmp     loc_4024D8
.text:0040277F ; ---------------------------------------------------------------------------
.text:0040277F
.text:0040277F loc_40277F:                             ; CODE XREF: sub_402390+379↑j
.text:0040277F                 mov     [esp+0ECh+var_AE], 0
.text:00402784                 jmp     loc_4024D8
.text:00402789 ; ---------------------------------------------------------------------------
.text:00402789
.text:00402789 loc_402789:                             ; CODE XREF: sub_402390+D3↑j
.text:00402789                 mov     [esp+0ECh+AccessMode], offset asc_4018BC ; "/"
.text:00402791                 mov     [esp+0ECh+Format], 1 ; int
.text:00402798                 call    sub_4064F0
.text:0040279D                 mov     [esp+0ECh+Format], 0 ; int
.text:004027A4                 mov     esi, [esp+0ECh+var_A0]
.text:004027A8                 mov     ebx, eax
.text:004027AA                 mov     [esp+0ECh+AccessMode], esi ; char *
.text:004027AE                 call    sub_4064F0
.text:004027B3                 mov     [esp+0ECh+Format], offset aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:004027BA                 mov     edi, eax
.text:004027BC                 call    ds:libintl_gettext
.text:004027C2                 mov     [esp+0ECh+var_DC], ebx
.text:004027C6                 mov     dword ptr [esp+0ECh+var_E0], edi ; char
.text:004027CA                 mov     [esp+0ECh+AccessMode], 0 ; ErrorMessage
.text:004027D2                 mov     [esp+0ECh+var_E4], eax ; char *
.text:004027D6                 mov     [esp+0ECh+Format], 0 ; Code
.text:004027DD                 call    sub_408F80
.text:004027E2                 jmp     loc_4024A0
.text:004027E7 ; ---------------------------------------------------------------------------
.text:004027E7
.text:004027E7 loc_4027E7:                             ; CODE XREF: sub_402390+4E↑j
.text:004027E7                 mov     esi, [esp+0ECh+var_A0]
.text:004027EB                 mov     [esp+0ECh+Format], esi ; char *
.text:004027EE                 call    sub_406520
.text:004027F3                 mov     [esp+0ECh+Format], offset aCannotReadDire ; "cannot read directory %s"
.text:004027FA
.text:004027FA loc_4027FA:                             ; CODE XREF: sub_402390+4B8↓j
.text:004027FA                                         ; sub_402390+4CD↓j
.text:004027FA                 mov     ebx, eax
.text:004027FC                 call    ds:libintl_gettext
.text:00402802                 mov     dword ptr [esp+0ECh+var_E0], ebx ; char
.text:00402806                 mov     [esp+0ECh+var_E4], eax ; char *
.text:0040280A                 mov     edi, [ebp+1Ch]
.text:0040280D                 mov     [esp+0ECh+Format], 0 ; Code
.text:00402814                 mov     [esp+0ECh+AccessMode], edi ; ErrorMessage
.text:00402818                 call    sub_408F80
.text:0040281D                 mov     [esp+0ECh+var_AD], 0
.text:00402822                 jmp     loc_4023E4
.text:00402827 ; ---------------------------------------------------------------------------
.text:00402827
.text:00402827 loc_402827:                             ; CODE XREF: sub_402390+45↑j
.text:00402827                 cmp     edx, 7
.text:0040282A                 jz      short loc_40284A
.text:0040282C                 cmp     edx, 0Ah
.text:0040282F                 jnz     loc_4023E4
.text:00402835                 mov     ecx, [esp+0ECh+var_A0]
.text:00402839                 mov     [esp+0ECh+Format], ecx ; char *
.text:0040283C                 call    sub_406520
.text:00402841                 mov     [esp+0ECh+Format], offset aCannotAccessS ; "cannot access %s"
.text:00402848                 jmp     short loc_4027FA
.text:0040284A ; ---------------------------------------------------------------------------
.text:0040284A
.text:0040284A loc_40284A:                             ; CODE XREF: sub_402390+49A↑j
.text:0040284A                 mov     ebx, [esp+0ECh+var_A0]
.text:0040284E                 mov     [esp+0ECh+Format], ebx ; char *
.text:00402851                 call    sub_406520
.text:00402856                 mov     [esp+0ECh+Format], offset aS ; "%s"
.text:0040285D                 jmp     short loc_4027FA
.text:0040285D sub_402390      endp
.text:0040285D
.text:0040285D ; ---------------------------------------------------------------------------
.text:0040285F                 align 10h
.text:00402860
.text:00402860 ; =============== S U B R O U T I N E =======================================
.text:00402860
.text:00402860
.text:00402860 sub_402860      proc near               ; CODE XREF: sub_402390+25F↑p
.text:00402860                                         ; .text:004029AB↓j
.text:00402860
.text:00402860 arg_0           = word ptr  4
.text:00402860 arg_4           = dword ptr  8
.text:00402860
.text:00402860                 push    ebx
.text:00402861                 mov     eax, 62h ; 'b'
.text:00402866                 mov     ebx, [esp+4+arg_4]
.text:0040286A                 movzx   edx, [esp+4+arg_0]
.text:0040286F                 mov     ecx, edx
.text:00402871                 and     ecx, 0F000h
.text:00402877                 cmp     ecx, 6000h
.text:0040287D                 jz      short loc_4028E0
.text:0040287F                 cmp     ecx, 2000h
.text:00402885                 mov     eax, 63h ; 'c'
.text:0040288A                 jz      short loc_4028E0
.text:0040288C                 cmp     ecx, 4000h
.text:00402892                 mov     eax, 64h ; 'd'
.text:00402897                 jz      short loc_4028E0
.text:00402899                 cmp     ecx, 8000h
.text:0040289F                 mov     eax, 2Dh ; '-'
.text:004028A4                 jz      short loc_4028E0
.text:004028A6                 cmp     ecx, 1000h
.text:004028AC                 mov     eax, 70h ; 'p'
.text:004028B1                 jz      short loc_4028E0
.text:004028B3                 cmp     ecx, 0A000h
.text:004028B9                 mov     eax, 6Ch ; 'l'
.text:004028BE                 jz      short loc_4028E0
.text:004028C0                 xor     eax, eax
.text:004028C2                 cmp     ecx, 0C000h
.text:004028C8                 setz    al
.text:004028CB                 dec     eax
.text:004028CC                 and     eax, 0FFFFFFCCh
.text:004028CF                 add     eax, 73h ; 's'
.text:004028D2                 lea     esi, [esi+0]
.text:004028D9                 lea     edi, [edi+0]
.text:004028E0
.text:004028E0 loc_4028E0:                             ; CODE XREF: sub_402860+1D↑j
.text:004028E0                                         ; sub_402860+2A↑j ...
.text:004028E0                 mov     [ebx], al
.text:004028E2                 test    dh, 1
.text:004028E5                 mov     al, 72h ; 'r'
.text:004028E7                 jnz     short loc_4028EB
.text:004028E9                 mov     al, 2Dh ; '-'
.text:004028EB
.text:004028EB loc_4028EB:                             ; CODE XREF: sub_402860+87↑j
.text:004028EB                 mov     [ebx+1], al
.text:004028EE                 test    dl, dl
.text:004028F0                 mov     al, 77h ; 'w'
.text:004028F2                 js      short loc_4028F6
.text:004028F4                 mov     al, 2Dh ; '-'
.text:004028F6
.text:004028F6 loc_4028F6:                             ; CODE XREF: sub_402860+92↑j
.text:004028F6                 mov     [ebx+2], al
.text:004028F9                 test    dl, 40h
.text:004028FC                 mov     al, 78h ; 'x'
.text:004028FE                 jnz     short loc_402902
.text:00402900                 mov     al, 2Dh ; '-'
.text:00402902
.text:00402902 loc_402902:                             ; CODE XREF: sub_402860+9E↑j
.text:00402902                 mov     [ebx+3], al
.text:00402905                 test    dl, 20h
.text:00402908                 mov     al, 72h ; 'r'
.text:0040290A                 jnz     short loc_40290E
.text:0040290C                 mov     al, 2Dh ; '-'
.text:0040290E
.text:0040290E loc_40290E:                             ; CODE XREF: sub_402860+AA↑j
.text:0040290E                 mov     [ebx+4], al
.text:00402911                 test    dl, 10h
.text:00402914                 mov     al, 77h ; 'w'
.text:00402916                 jnz     short loc_40291A
.text:00402918                 mov     al, 2Dh ; '-'
.text:0040291A
.text:0040291A loc_40291A:                             ; CODE XREF: sub_402860+B6↑j
.text:0040291A                 mov     [ebx+5], al
.text:0040291D                 test    dl, 8
.text:00402920                 mov     al, 78h ; 'x'
.text:00402922                 jnz     short loc_402926
.text:00402924                 mov     al, 2Dh ; '-'
.text:00402926
.text:00402926 loc_402926:                             ; CODE XREF: sub_402860+C2↑j
.text:00402926                 mov     [ebx+6], al
.text:00402929                 test    dl, 4
.text:0040292C                 mov     al, 72h ; 'r'
.text:0040292E                 jnz     short loc_402932
.text:00402930                 mov     al, 2Dh ; '-'
.text:00402932
.text:00402932 loc_402932:                             ; CODE XREF: sub_402860+CE↑j
.text:00402932                 mov     [ebx+7], al
.text:00402935                 test    dl, 2
.text:00402938                 mov     al, 77h ; 'w'
.text:0040293A                 jnz     short loc_40293E
.text:0040293C                 mov     al, 2Dh ; '-'
.text:0040293E
.text:0040293E loc_40293E:                             ; CODE XREF: sub_402860+DA↑j
.text:0040293E                 mov     [ebx+8], al
.text:00402941                 test    dl, 1
.text:00402944                 mov     al, 78h ; 'x'
.text:00402946                 jnz     short loc_40294A
.text:00402948                 mov     al, 2Dh ; '-'
.text:0040294A
.text:0040294A loc_40294A:                             ; CODE XREF: sub_402860+E6↑j
.text:0040294A                 mov     [ebx+9], al
.text:0040294D                 test    dh, 8
.text:00402950                 jz      short loc_40295C
.text:00402952                 cmp     byte ptr [ebx+3], 78h ; 'x'
.text:00402956                 jz      short loc_402990
.text:00402958                 mov     byte ptr [ebx+3], 53h ; 'S'
.text:0040295C
.text:0040295C loc_40295C:                             ; CODE XREF: sub_402860+F0↑j
.text:0040295C                                         ; sub_402860+134↓j
.text:0040295C                 test    dh, 4
.text:0040295F                 jz      short loc_40296B
.text:00402961                 cmp     byte ptr [ebx+6], 78h ; 'x'
.text:00402965                 jz      short loc_402986
.text:00402967                 mov     byte ptr [ebx+6], 53h ; 'S'
.text:0040296B
.text:0040296B loc_40296B:                             ; CODE XREF: sub_402860+FF↑j
.text:0040296B                                         ; sub_402860+12A↓j
.text:0040296B                 test    dh, 2
.text:0040296E                 jz      short loc_40297A
.text:00402970                 cmp     byte ptr [ebx+9], 78h ; 'x'
.text:00402974                 jz      short loc_402980
.text:00402976                 mov     byte ptr [ebx+9], 54h ; 'T'
.text:0040297A
.text:0040297A loc_40297A:                             ; CODE XREF: sub_402860+10E↑j
.text:0040297A                                         ; sub_402860+124↓j
.text:0040297A                 pop     ebx
.text:0040297B                 retn
.text:0040297B ; ---------------------------------------------------------------------------
.text:0040297C                 align 10h
.text:00402980
.text:00402980 loc_402980:                             ; CODE XREF: sub_402860+114↑j
.text:00402980                 mov     byte ptr [ebx+9], 74h ; 't'
.text:00402984                 jmp     short loc_40297A
.text:00402986 ; ---------------------------------------------------------------------------
.text:00402986
.text:00402986 loc_402986:                             ; CODE XREF: sub_402860+105↑j
.text:00402986                 mov     byte ptr [ebx+6], 73h ; 's'
.text:0040298A                 jmp     short loc_40296B
.text:0040298A ; ---------------------------------------------------------------------------
.text:0040298C                 align 10h
.text:00402990
.text:00402990 loc_402990:                             ; CODE XREF: sub_402860+F6↑j
.text:00402990                 mov     byte ptr [ebx+3], 73h ; 's'
.text:00402994                 jmp     short loc_40295C
.text:00402994 sub_402860      endp
.text:00402994
.text:00402994 ; ---------------------------------------------------------------------------
.text:00402996                 align 10h
.text:004029A0                 mov     ecx, [esp+4]
.text:004029A4                 movzx   edx, word ptr [ecx]
.text:004029A7                 mov     [esp+4], edx
.text:004029AB                 jmp     sub_402860
.text:004029AB ; ---------------------------------------------------------------------------
.text:004029B0 byte_4029B0     db 0                    ; DATA XREF: sub_4029C0+92↓o
.text:004029B0                                         ; sub_4029C0+E9↓o
.text:004029B1 ; const char FileName[2]
.text:004029B1 FileName        db '.',0                ; DATA XREF: sub_4029C0+180↓o
.text:004029B1                                         ; sub_4029C0+1A5↓o ...
.text:004029B3                 align 10h
.text:004029C0
.text:004029C0 ; =============== S U B R O U T I N E =======================================
.text:004029C0
.text:004029C0
.text:004029C0 sub_4029C0      proc near               ; CODE XREF: sub_4049A0+22↓p
.text:004029C0
.text:004029C0 Size            = dword ptr -3Ch
.text:004029C0 OpenFlag        = dword ptr -38h
.text:004029C0 var_34          = dword ptr -34h
.text:004029C0 var_30          = dword ptr -30h
.text:004029C0 var_2C          = dword ptr -2Ch
.text:004029C0 var_1C          = dword ptr -1Ch
.text:004029C0 var_18          = dword ptr -18h
.text:004029C0 var_14          = dword ptr -14h
.text:004029C0 arg_0           = dword ptr  4
.text:004029C0 arg_4           = dword ptr  8
.text:004029C0 arg_8           = dword ptr  0Ch
.text:004029C0
.text:004029C0                 push    ebp
.text:004029C1                 push    edi
.text:004029C2                 push    esi
.text:004029C3                 push    ebx
.text:004029C4                 sub     esp, 2Ch
.text:004029C7                 mov     ebx, [esp+3Ch+arg_4]
.text:004029CB                 mov     [esp+3Ch+var_1C], 0
.text:004029D3                 mov     ebp, [esp+3Ch+arg_0]
.text:004029D7                 test    ebx, 0FFFFFE00h
.text:004029DD                 jnz     loc_402CBF
.text:004029E3                 mov     [esp+3Ch+Size], 38h ; '8' ; Size
.text:004029EA                 call    malloc
.text:004029EF                 mov     esi, eax
.text:004029F1                 xor     eax, eax
.text:004029F3                 test    esi, esi
.text:004029F5                 jz      loc_402B30
.text:004029FB                 cld
.text:004029FC                 mov     eax, [esp+3Ch+var_1C]
.text:00402A00                 mov     ecx, 0Eh
.text:00402A05                 mov     edi, esi
.text:00402A07                 test    bl, 2
.text:00402A0A                 rep stosd
.text:00402A0C                 mov     [esi+2Ch], ebx
.text:00402A0F                 mov     eax, [esp+3Ch+arg_8]
.text:00402A13                 mov     [esi+28h], eax
.text:00402A16                 jz      short loc_402A1E
.text:00402A18                 or      ebx, 4
.text:00402A1B                 mov     [esi+2Ch], ebx
.text:00402A1E
.text:00402A1E loc_402A1E:                             ; CODE XREF: sub_4029C0+56↑j
.text:00402A1E                 mov     [esp+3Ch+Size], ebp
.text:00402A21                 call    sub_404000
.text:00402A26                 cmp     eax, 400h
.text:00402A2B                 mov     edx, 400h
.text:00402A30                 ja      loc_402CB0
.text:00402A36
.text:00402A36 loc_402A36:                             ; CODE XREF: sub_4029C0+2FA↓j
.text:00402A36                 mov     [esp+3Ch+OpenFlag], edx
.text:00402A3A                 mov     [esp+3Ch+Size], esi
.text:00402A3D                 call    sub_403F00
.text:00402A42                 test    al, al
.text:00402A44                 jz      loc_402B92
.text:00402A4A                 mov     [esp+3Ch+var_34], 0 ; size_t
.text:00402A52                 mov     [esp+3Ch+OpenFlag], offset byte_4029B0 ; void *
.text:00402A5A                 mov     [esp+3Ch+Size], esi ; int
.text:00402A5D                 call    sub_403E40
.text:00402A62                 test    eax, eax
.text:00402A64                 mov     ebx, eax
.text:00402A66                 jz      loc_402B87
.text:00402A6C                 mov     dword ptr [eax+3Ch], 0FFFFFFFFh
.text:00402A73                 mov     eax, [ebp+0]
.text:00402A76                 mov     [esp+3Ch+var_14], 0
.text:00402A7E                 mov     [esp+3Ch+var_18], 0
.text:00402A86                 test    eax, eax
.text:00402A88                 jnz     loc_402BE8
.text:00402A8E
.text:00402A8E loc_402A8E:                             ; CODE XREF: sub_4029C0+2B0↓j
.text:00402A8E                 mov     edi, [esp+3Ch+arg_8]
.text:00402A92                 test    edi, edi
.text:00402A94                 jz      short loc_402AA1
.text:00402A96                 cmp     [esp+3Ch+var_18], 1
.text:00402A9B                 ja      loc_402BC7
.text:00402AA1
.text:00402AA1 loc_402AA1:                             ; CODE XREF: sub_4029C0+D4↑j
.text:00402AA1                                         ; sub_4029C0+223↓j
.text:00402AA1                 mov     [esp+3Ch+var_34], 0 ; size_t
.text:00402AA9                 mov     [esp+3Ch+OpenFlag], offset byte_4029B0 ; void *
.text:00402AB1                 mov     [esp+3Ch+Size], esi ; int
.text:00402AB4                 call    sub_403E40
.text:00402AB9                 mov     [esi], eax
.text:00402ABB                 test    eax, eax
.text:00402ABD                 jz      loc_402B73
.text:00402AC3                 test    byte ptr [esi+2Dh], 1
.text:00402AC7                 mov     edi, [esp+3Ch+var_14]
.text:00402ACB                 mov     [eax+8], edi
.text:00402ACE                 mov     ecx, [esi]
.text:00402AD0                 mov     word ptr [ecx+44h], 9
.text:00402AD6                 jz      loc_402BA0
.text:00402ADC                 mov     [esp+3Ch+var_2C], offset free
.text:00402AE4                 mov     [esp+3Ch+var_30], offset sub_4041C0
.text:00402AEC                 mov     [esp+3Ch+var_34], offset sub_404230
.text:00402AF4                 mov     [esp+3Ch+OpenFlag], 0
.text:00402AFC                 mov     [esp+3Ch+Size], 1Fh
.text:00402B03                 call    sub_406700
.text:00402B08                 mov     [esi+30h], eax
.text:00402B0B                 test    eax, eax
.text:00402B0D                 jz      short loc_402B73
.text:00402B0F                 mov     [esp+3Ch+Size], 20h ; ' ' ; Size
.text:00402B16                 call    malloc
.text:00402B1B                 mov     [esi+34h], eax
.text:00402B1E
.text:00402B1E loc_402B1E:                             ; CODE XREF: sub_4029C0+202↓j
.text:00402B1E                 test    byte ptr [esi+2Ch], 4
.text:00402B22                 jz      short loc_402B38
.text:00402B24
.text:00402B24 loc_402B24:                             ; CODE XREF: sub_4029C0+195↓j
.text:00402B24                                         ; sub_4029C0+19B↓j
.text:00402B24                 mov     eax, esi
.text:00402B26                 lea     esi, [esi+0]
.text:00402B29                 lea     edi, [edi+0]
.text:00402B30
.text:00402B30 loc_402B30:                             ; CODE XREF: sub_4029C0+35↑j
.text:00402B30                                         ; sub_4029C0+1DC↓j
.text:00402B30                 add     esp, 2Ch
.text:00402B33                 pop     ebx
.text:00402B34                 pop     esi
.text:00402B35                 pop     edi
.text:00402B36                 pop     ebp
.text:00402B37                 retn
.text:00402B38 ; ---------------------------------------------------------------------------
.text:00402B38
.text:00402B38 loc_402B38:                             ; CODE XREF: sub_4029C0+162↑j
.text:00402B38                 mov     [esp+3Ch+OpenFlag], 0 ; OpenFlag
.text:00402B40                 mov     [esp+3Ch+Size], offset FileName ; "."
.text:00402B47                 call    _open
.text:00402B4C                 test    eax, eax
.text:00402B4E                 js      short loc_402B5D
.text:00402B50
.text:00402B50 loc_402B50:                             ; CODE XREF: sub_4029C0+1B1↓j
.text:00402B50                 mov     [esi+1Ch], eax
.text:00402B53                 test    eax, eax
.text:00402B55                 jns     short loc_402B24
.text:00402B57                 or      dword ptr [esi+2Ch], 4
.text:00402B5B                 jmp     short loc_402B24
.text:00402B5D ; ---------------------------------------------------------------------------
.text:00402B5D
.text:00402B5D loc_402B5D:                             ; CODE XREF: sub_4029C0+18E↑j
.text:00402B5D                 mov     [esp+3Ch+OpenFlag], 1 ; OpenFlag
.text:00402B65                 mov     [esp+3Ch+Size], offset FileName ; "."
.text:00402B6C                 call    _open
.text:00402B71                 jmp     short loc_402B50
.text:00402B73 ; ---------------------------------------------------------------------------
.text:00402B73
.text:00402B73 loc_402B73:                             ; CODE XREF: sub_4029C0+FD↑j
.text:00402B73                                         ; sub_4029C0+14D↑j ...
.text:00402B73                 mov     ebp, [esp+3Ch+var_14]
.text:00402B77                 mov     [esp+3Ch+Size], ebp ; void *
.text:00402B7A                 call    sub_403ED0
.text:00402B7F                 mov     [esp+3Ch+Size], ebx ; Block
.text:00402B82                 call    free
.text:00402B87
.text:00402B87 loc_402B87:                             ; CODE XREF: sub_4029C0+A6↑j
.text:00402B87                 mov     ebx, [esi+18h]
.text:00402B8A                 mov     [esp+3Ch+Size], ebx ; Block
.text:00402B8D                 call    free
.text:00402B92
.text:00402B92 loc_402B92:                             ; CODE XREF: sub_4029C0+84↑j
.text:00402B92                 mov     [esp+3Ch+Size], esi ; Block
.text:00402B95                 call    free
.text:00402B9A
.text:00402B9A loc_402B9A:                             ; CODE XREF: sub_4029C0+30A↓j
.text:00402B9A                 xor     eax, eax
.text:00402B9C                 jmp     short loc_402B30
.text:00402B9C ; ---------------------------------------------------------------------------
.text:00402B9E                 align 10h
.text:00402BA0
.text:00402BA0 loc_402BA0:                             ; CODE XREF: sub_4029C0+116↑j
.text:00402BA0                 mov     [esp+3Ch+Size], 20h ; ' ' ; Size
.text:00402BA7                 call    malloc
.text:00402BAC                 mov     [esi+34h], eax
.text:00402BAF                 test    eax, eax
.text:00402BB1                 jz      short loc_402B73
.text:00402BB3                 mov     [esp+3Ch+Size], eax
.text:00402BB6                 call    sub_406570
.text:00402BBB                 mov     dword ptr [esi+30h], 0
.text:00402BC2                 jmp     loc_402B1E
.text:00402BC7 ; ---------------------------------------------------------------------------
.text:00402BC7
.text:00402BC7 loc_402BC7:                             ; CODE XREF: sub_4029C0+DB↑j
.text:00402BC7                 mov     [esp+3Ch+Size], esi ; int
.text:00402BCA                 mov     edx, [esp+3Ch+var_18]
.text:00402BCE                 mov     ebp, [esp+3Ch+var_14]
.text:00402BD2                 mov     [esp+3Ch+var_34], edx ; void *
.text:00402BD6                 mov     [esp+3Ch+OpenFlag], ebp ; int
.text:00402BDA                 call    sub_403D60
.text:00402BDF                 mov     [esp+3Ch+var_14], eax
.text:00402BE3                 jmp     loc_402AA1
.text:00402BE8 ; ---------------------------------------------------------------------------
.text:00402BE8
.text:00402BE8 loc_402BE8:                             ; CODE XREF: sub_4029C0+C8↑j
.text:00402BE8                                         ; sub_4029C0+2AA↓j
.text:00402BE8                 mov     [esp+3Ch+Size], eax ; Str
.text:00402BEB                 call    strlen
.text:00402BF0                 test    eax, eax
.text:00402BF2                 jz      loc_402C9F
.text:00402BF8                 mov     [esp+3Ch+var_34], eax ; size_t
.text:00402BFC                 mov     edx, [ebp+0]
.text:00402BFF                 mov     [esp+3Ch+Size], esi ; int
.text:00402C02                 mov     [esp+3Ch+OpenFlag], edx ; void *
.text:00402C06                 call    sub_403E40
.text:00402C0B                 test    eax, eax
.text:00402C0D                 mov     edi, eax
.text:00402C0F                 jz      loc_402B73
.text:00402C15                 mov     dword ptr [eax+3Ch], 0
.text:00402C1C                 lea     ecx, [eax+0B8h]
.text:00402C22                 mov     edx, [esi+2Ch]
.text:00402C25                 mov     [eax+14h], ecx
.text:00402C28                 mov     [eax+4], ebx
.text:00402C2B                 and     edx, 1
.text:00402C2E                 movzx   ecx, dl
.text:00402C31                 mov     [esp+3Ch+var_34], ecx
.text:00402C35                 mov     [esp+3Ch+OpenFlag], eax
.text:00402C39                 mov     [esp+3Ch+Size], esi
.text:00402C3C                 call    sub_403C10
.text:00402C41                 mov     [edi+44h], ax
.text:00402C45                 cmp     ax, 5
.text:00402C49                 jz      short loc_402C97
.text:00402C4B
.text:00402C4B loc_402C4B:                             ; CODE XREF: sub_4029C0+2DD↓j
.text:00402C4B                 mov     eax, [esp+3Ch+arg_8]
.text:00402C4F                 test    eax, eax
.text:00402C51                 jz      short loc_402C75
.text:00402C53                 mov     edx, [esp+3Ch+var_14]
.text:00402C57                 mov     [esp+3Ch+var_14], edi
.text:00402C5B                 mov     [edi+8], edx
.text:00402C5E
.text:00402C5E loc_402C5E:                             ; CODE XREF: sub_4029C0+2CF↓j
.text:00402C5E                 inc     [esp+3Ch+var_18]
.text:00402C62                 add     ebp, 4
.text:00402C65                 mov     eax, [ebp+0]
.text:00402C68                 test    eax, eax
.text:00402C6A                 jnz     loc_402BE8
.text:00402C70                 jmp     loc_402A8E
.text:00402C75 ; ---------------------------------------------------------------------------
.text:00402C75
.text:00402C75 loc_402C75:                             ; CODE XREF: sub_4029C0+291↑j
.text:00402C75                 mov     dword ptr [edi+8], 0
.text:00402C7C                 mov     ecx, [esp+3Ch+var_14]
.text:00402C80                 test    ecx, ecx
.text:00402C82                 jz      short loc_402C91
.text:00402C84                 mov     eax, [esp+3Ch+var_1C]
.text:00402C88                 mov     [eax+8], edi
.text:00402C8B
.text:00402C8B loc_402C8B:                             ; CODE XREF: sub_4029C0+2D5↓j
.text:00402C8B                 mov     [esp+3Ch+var_1C], edi
.text:00402C8F                 jmp     short loc_402C5E
.text:00402C91 ; ---------------------------------------------------------------------------
.text:00402C91
.text:00402C91 loc_402C91:                             ; CODE XREF: sub_4029C0+2C2↑j
.text:00402C91                 mov     [esp+3Ch+var_14], edi
.text:00402C95                 jmp     short loc_402C8B
.text:00402C97 ; ---------------------------------------------------------------------------
.text:00402C97
.text:00402C97 loc_402C97:                             ; CODE XREF: sub_4029C0+289↑j
.text:00402C97                 mov     word ptr [edi+44h], 1
.text:00402C9D                 jmp     short loc_402C4B
.text:00402C9F ; ---------------------------------------------------------------------------
.text:00402C9F
.text:00402C9F loc_402C9F:                             ; CODE XREF: sub_4029C0+232↑j
.text:00402C9F                 call    _errno
.text:00402CA4                 mov     dword ptr [eax], 2
.text:00402CAA                 jmp     loc_402B73
.text:00402CAA ; ---------------------------------------------------------------------------
.text:00402CAF                 align 10h
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_4029C0+70↑j
.text:00402CB0                 mov     [esp+3Ch+Size], ebp
.text:00402CB3                 call    sub_404000
.text:00402CB8                 mov     edx, eax
.text:00402CBA                 jmp     loc_402A36
.text:00402CBF ; ---------------------------------------------------------------------------
.text:00402CBF
.text:00402CBF loc_402CBF:                             ; CODE XREF: sub_4029C0+1D↑j
.text:00402CBF                 call    _errno
.text:00402CC4                 mov     dword ptr [eax], 16h
.text:00402CCA                 jmp     loc_402B9A
.text:00402CCA sub_4029C0      endp
.text:00402CCA
.text:00402CCA ; ---------------------------------------------------------------------------
.text:00402CCF                 align 10h
.text:00402CD0
.text:00402CD0 ; =============== S U B R O U T I N E =======================================
.text:00402CD0
.text:00402CD0
.text:00402CD0 ; int __cdecl sub_402CD0(void *)
.text:00402CD0 sub_402CD0      proc near               ; CODE XREF: sub_401920+4FA↑p
.text:00402CD0
.text:00402CD0 Block           = dword ptr -1Ch
.text:00402CD0 arg_0           = dword ptr  4
.text:00402CD0
.text:00402CD0                 push    edi
.text:00402CD1                 xor     edi, edi
.text:00402CD3                 push    esi
.text:00402CD4                 push    ebx
.text:00402CD5                 sub     esp, 10h
.text:00402CD8                 mov     esi, [esp+1Ch+arg_0]
.text:00402CDC                 mov     eax, [esi]
.text:00402CDE                 test    eax, eax
.text:00402CE0                 jz      short loc_402D15
.text:00402CE2                 mov     edx, [eax+3Ch]
.text:00402CE5                 mov     ebx, eax
.text:00402CE7                 test    edx, edx
.text:00402CE9                 js      short loc_402D0D
.text:00402CEB                 nop
.text:00402CEC                 lea     esi, [esi+0]
.text:00402CF0
.text:00402CF0 loc_402CF0:                             ; CODE XREF: sub_402CD0+3B↓j
.text:00402CF0                 mov     eax, [ebx+8]
.text:00402CF3                 mov     edx, ebx
.text:00402CF5                 test    eax, eax
.text:00402CF7                 jnz     short loc_402CFC
.text:00402CF9                 mov     eax, [ebx+4]
.text:00402CFC
.text:00402CFC loc_402CFC:                             ; CODE XREF: sub_402CD0+27↑j
.text:00402CFC                 mov     [esp+1Ch+Block], edx ; Block
.text:00402CFF                 mov     ebx, eax
.text:00402D01                 call    free
.text:00402D06                 mov     edx, [ebx+3Ch]
.text:00402D09                 test    edx, edx
.text:00402D0B                 jns     short loc_402CF0
.text:00402D0D
.text:00402D0D loc_402D0D:                             ; CODE XREF: sub_402CD0+19↑j
.text:00402D0D                 mov     [esp+1Ch+Block], ebx ; Block
.text:00402D10                 call    free
.text:00402D15
.text:00402D15 loc_402D15:                             ; CODE XREF: sub_402CD0+10↑j
.text:00402D15                 mov     eax, [esi+4]
.text:00402D18                 test    eax, eax
.text:00402D1A                 jnz     loc_402DB6
.text:00402D20
.text:00402D20 loc_402D20:                             ; CODE XREF: sub_402CD0+EE↓j
.text:00402D20                 mov     eax, [esi+8]
.text:00402D23                 test    eax, eax
.text:00402D25                 jnz     loc_402DA9
.text:00402D2B
.text:00402D2B loc_402D2B:                             ; CODE XREF: sub_402CD0+E1↓j
.text:00402D2B                 mov     ecx, [esi+18h]
.text:00402D2E                 mov     [esp+1Ch+Block], ecx ; Block
.text:00402D31                 call    free
.text:00402D36                 test    byte ptr [esi+2Ch], 4
.text:00402D3A                 jz      short loc_402D84
.text:00402D3C
.text:00402D3C loc_402D3C:                             ; CODE XREF: sub_402CD0+CE↓j
.text:00402D3C                 mov     eax, [esi+30h]
.text:00402D3F                 test    eax, eax
.text:00402D41                 jnz     short loc_402D7A
.text:00402D43
.text:00402D43 loc_402D43:                             ; CODE XREF: sub_402CD0+B2↓j
.text:00402D43                 mov     eax, [esi+34h]
.text:00402D46                 test    eax, eax
.text:00402D48                 jnz     short loc_402D70
.text:00402D4A
.text:00402D4A loc_402D4A:                             ; CODE XREF: sub_402CD0+A8↓j
.text:00402D4A                 mov     [esp+1Ch+Block], esi ; Block
.text:00402D4D                 call    free
.text:00402D52                 xor     eax, eax
.text:00402D54                 test    edi, edi
.text:00402D56                 jnz     short loc_402D5F
.text:00402D58
.text:00402D58 loc_402D58:                             ; CODE XREF: sub_402CD0+9B↓j
.text:00402D58                 add     esp, 10h
.text:00402D5B                 pop     ebx
.text:00402D5C                 pop     esi
.text:00402D5D                 pop     edi
.text:00402D5E                 retn
.text:00402D5F ; ---------------------------------------------------------------------------
.text:00402D5F
.text:00402D5F loc_402D5F:                             ; CODE XREF: sub_402CD0+86↑j
.text:00402D5F                 call    _errno
.text:00402D64                 mov     [eax], edi
.text:00402D66                 mov     eax, 0FFFFFFFFh
.text:00402D6B                 jmp     short loc_402D58
.text:00402D6B ; ---------------------------------------------------------------------------
.text:00402D6D                 align 10h
.text:00402D70
.text:00402D70 loc_402D70:                             ; CODE XREF: sub_402CD0+78↑j
.text:00402D70                 mov     [esp+1Ch+Block], eax ; Block
.text:00402D73                 call    free
.text:00402D78                 jmp     short loc_402D4A
.text:00402D7A ; ---------------------------------------------------------------------------
.text:00402D7A
.text:00402D7A loc_402D7A:                             ; CODE XREF: sub_402CD0+71↑j
.text:00402D7A                 mov     [esp+1Ch+Block], eax ; void *
.text:00402D7D                 call    sub_4069E0
.text:00402D82                 jmp     short loc_402D43
.text:00402D84 ; ---------------------------------------------------------------------------
.text:00402D84
.text:00402D84 loc_402D84:                             ; CODE XREF: sub_402CD0+6A↑j
.text:00402D84                 mov     ebx, [esi+1Ch]
.text:00402D87                 mov     [esp+1Ch+Block], ebx
.text:00402D8A                 call    sub_406550
.text:00402D8F                 test    eax, eax
.text:00402D91                 jnz     short loc_402DA0
.text:00402D93
.text:00402D93 loc_402D93:                             ; CODE XREF: sub_402CD0+D7↓j
.text:00402D93                 mov     edx, [esi+1Ch]
.text:00402D96                 mov     [esp+1Ch+Block], edx ; FileHandle
.text:00402D99                 call    _close
.text:00402D9E                 jmp     short loc_402D3C
.text:00402DA0 ; ---------------------------------------------------------------------------
.text:00402DA0
.text:00402DA0 loc_402DA0:                             ; CODE XREF: sub_402CD0+C1↑j
.text:00402DA0                 call    _errno
.text:00402DA5                 mov     edi, [eax]
.text:00402DA7                 jmp     short loc_402D93
.text:00402DA9 ; ---------------------------------------------------------------------------
.text:00402DA9
.text:00402DA9 loc_402DA9:                             ; CODE XREF: sub_402CD0+55↑j
.text:00402DA9                 mov     [esp+1Ch+Block], eax ; Block
.text:00402DAC                 call    free
.text:00402DB1                 jmp     loc_402D2B
.text:00402DB6 ; ---------------------------------------------------------------------------
.text:00402DB6
.text:00402DB6 loc_402DB6:                             ; CODE XREF: sub_402CD0+4A↑j
.text:00402DB6                 mov     [esp+1Ch+Block], eax ; void *
.text:00402DB9                 call    sub_403ED0
.text:00402DBE                 jmp     loc_402D20
.text:00402DBE sub_402CD0      endp
.text:00402DBE
.text:00402DBE ; ---------------------------------------------------------------------------
.text:00402DC3 ; const char byte_402DC3
.text:00402DC3 byte_402DC3     db 2Eh                  ; DATA XREF: sub_402DD0+399↓o
.text:00402DC3                                         ; sub_4035B0:loc_403AE0↓o
.text:00402DC4                 dd 768D002Eh, 27BC8D00h, 0
.text:00402DD0
.text:00402DD0 ; =============== S U B R O U T I N E =======================================
.text:00402DD0
.text:00402DD0
.text:00402DD0 ; int __cdecl sub_402DD0(void *)
.text:00402DD0 sub_402DD0      proc near               ; CODE XREF: sub_401920+4BE↑p
.text:00402DD0
.text:00402DD0 Block           = dword ptr -4Ch
.text:00402DD0 Src             = dword ptr -48h
.text:00402DD0 Size            = dword ptr -44h
.text:00402DD0 FileName        = dword ptr -40h
.text:00402DD0 var_3C          = dword ptr -3Ch
.text:00402DD0 var_38          = dword ptr -38h
.text:00402DD0 var_34          = dword ptr -34h
.text:00402DD0 var_30          = dword ptr -30h
.text:00402DD0 arg_0           = dword ptr  4
.text:00402DD0
.text:00402DD0                 push    ebp
.text:00402DD1                 push    edi
.text:00402DD2                 push    esi
.text:00402DD3                 push    ebx
.text:00402DD4                 sub     esp, 3Ch
.text:00402DD7                 mov     eax, [esp+4Ch+arg_0]
.text:00402DDB                 mov     ebp, [eax]
.text:00402DDD                 test    ebp, ebp
.text:00402DDF                 jz      loc_403020
.text:00402DE5                 mov     edi, [eax+2Ch]
.text:00402DE8                 test    edi, 2000h
.text:00402DEE                 jnz     loc_403020
.text:00402DF4                 movzx   ecx, word ptr [ebp+48h]
.text:00402DF8                 mov     esi, ebp
.text:00402DFA                 mov     word ptr [ebp+48h], 3
.text:00402E00                 cmp     cx, 1
.text:00402E04                 jz      loc_403430
.text:00402E0A                 cmp     cx, 2
.text:00402E0E                 jz      loc_40337F
.text:00402E14                 mov     edx, [ebp+44h]
.text:00402E17
.text:00402E17 loc_402E17:                             ; CODE XREF: sub_402DD0+5B9↓j
.text:00402E17                 dec     dx
.text:00402E19                 jz      loc_4031D0
.text:00402E1F                 nop
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402DD0+78↓j
.text:00402E20                 mov     eax, esi
.text:00402E22                 mov     esi, [esi+8]
.text:00402E25                 test    esi, esi
.text:00402E27                 jz      loc_403027
.text:00402E2D                 mov     [esp+4Ch+Block], eax ; Block
.text:00402E30                 call    free
.text:00402E35                 mov     ebx, [esi+3Ch]
.text:00402E38                 test    ebx, ebx
.text:00402E3A                 jz      loc_402F46
.text:00402E40                 movzx   eax, word ptr [esi+48h]
.text:00402E44                 cmp     ax, 4
.text:00402E48                 jz      short loc_402E20
.text:00402E4A                 cmp     ax, 2
.text:00402E4E                 jz      short loc_402EBD
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402DD0+113↓j
.text:00402E50                                         ; sub_402DD0+527↓j
.text:00402E50                 mov     ebp, [esi+4]
.text:00402E53                 mov     eax, [esp+4Ch+arg_0]
.text:00402E57                 mov     edi, [ebp+24h]
.text:00402E5A                 mov     ecx, [eax+18h]
.text:00402E5D                 mov     edx, [ebp+18h]
.text:00402E60                 add     ecx, edi
.text:00402E62                 cmp     byte ptr [edi+edx-1], 2Fh ; '/'
.text:00402E67                 jz      short loc_402EBA
.text:00402E69
.text:00402E69 loc_402E69:                             ; CODE XREF: sub_402DD0+EB↓j
.text:00402E69                 mov     byte ptr [ecx], 2Fh ; '/'
.text:00402E6C                 lea     ebx, [esi+0B8h]
.text:00402E72                 mov     edi, [esi+40h]
.text:00402E75                 mov     [esp+4Ch+Src], ebx ; Src
.text:00402E79                 inc     ecx
.text:00402E7A                 mov     [esp+4Ch+Block], ecx ; void *
.text:00402E7D                 inc     edi
.text:00402E7E                 mov     [esp+4Ch+Size], edi ; Size
.text:00402E82                 call    memmove
.text:00402E87                 cmp     word ptr [esi+44h], 1
.text:00402E8C                 jz      short loc_402EA8
.text:00402E8E
.text:00402E8E loc_402E8E:                             ; CODE XREF: sub_402DD0+E8↓j
.text:00402E8E                 mov     ebp, [esp+4Ch+arg_0]
.text:00402E92                 mov     [ebp+0], esi
.text:00402E95
.text:00402E95 loc_402E95:                             ; CODE XREF: sub_402DD0+21C↓j
.text:00402E95                                         ; sub_402DD0+67C↓j
.text:00402E95                 mov     eax, esi
.text:00402E97                 mov     esi, esi
.text:00402E99                 lea     edi, [edi+0]
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: sub_402DD0+252↓j
.text:00402EA0                                         ; sub_402DD0+2C1↓j ...
.text:00402EA0                 add     esp, 3Ch
.text:00402EA3                 pop     ebx
.text:00402EA4                 pop     esi
.text:00402EA5                 pop     edi
.text:00402EA6                 pop     ebp
.text:00402EA7                 retn
.text:00402EA8 ; ---------------------------------------------------------------------------
.text:00402EA8
.text:00402EA8 loc_402EA8:                             ; CODE XREF: sub_402DD0+BC↑j
.text:00402EA8                 mov     [esp+4Ch+Src], esi ; int
.text:00402EAC                 mov     ecx, [esp+4Ch+arg_0]
.text:00402EB0                 mov     [esp+4Ch+Block], ecx ; Block
.text:00402EB3                 call    sub_404260
.text:00402EB8                 jmp     short loc_402E8E
.text:00402EBA ; ---------------------------------------------------------------------------
.text:00402EBA
.text:00402EBA loc_402EBA:                             ; CODE XREF: sub_402DD0+97↑j
.text:00402EBA                 dec     ecx
.text:00402EBB                 jmp     short loc_402E69
.text:00402EBD ; ---------------------------------------------------------------------------
.text:00402EBD
.text:00402EBD loc_402EBD:                             ; CODE XREF: sub_402DD0+7E↑j
.text:00402EBD                 mov     [esp+4Ch+Size], 1
.text:00402EC5                 mov     ecx, [esp+4Ch+arg_0]
.text:00402EC9                 mov     [esp+4Ch+Src], esi
.text:00402ECD                 mov     [esp+4Ch+Block], ecx
.text:00402ED0                 call    sub_403C10
.text:00402ED5                 mov     [esi+44h], ax
.text:00402ED9                 dec     ax
.text:00402EDB                 jz      short loc_402EE8
.text:00402EDD
.text:00402EDD loc_402EDD:                             ; CODE XREF: sub_402DD0+120↓j
.text:00402EDD                                         ; sub_402DD0+14C↓j ...
.text:00402EDD                 mov     word ptr [esi+48h], 3
.text:00402EE3                 jmp     loc_402E50
.text:00402EE8 ; ---------------------------------------------------------------------------
.text:00402EE8
.text:00402EE8 loc_402EE8:                             ; CODE XREF: sub_402DD0+10B↑j
.text:00402EE8                 mov     ebx, [esp+4Ch+arg_0]
.text:00402EEC                 test    byte ptr [ebx+2Ch], 4
.text:00402EF0                 jnz     short loc_402EDD
.text:00402EF2                 mov     [esp+4Ch+Src], 0 ; OpenFlag
.text:00402EFA                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00402F01                 call    _open
.text:00402F06                 test    eax, eax
.text:00402F08                 js      short loc_402F30
.text:00402F0A
.text:00402F0A loc_402F0A:                             ; CODE XREF: sub_402DD0+174↓j
.text:00402F0A                 mov     [esi+20h], eax
.text:00402F0D                 test    eax, eax
.text:00402F0F                 js      short loc_402F1E
.text:00402F11                 movzx   ebp, word ptr [esi+46h]
.text:00402F15                 or      ebp, 2
.text:00402F18                 mov     [esi+46h], bp
.text:00402F1C                 jmp     short loc_402EDD
.text:00402F1E ; ---------------------------------------------------------------------------
.text:00402F1E
.text:00402F1E loc_402F1E:                             ; CODE XREF: sub_402DD0+13F↑j
.text:00402F1E                 call    _errno
.text:00402F23                 mov     word ptr [esi+44h], 7
.text:00402F29                 mov     edi, [eax]
.text:00402F2B                 mov     [esi+1Ch], edi
.text:00402F2E                 jmp     short loc_402EDD
.text:00402F30 ; ---------------------------------------------------------------------------
.text:00402F30
.text:00402F30 loc_402F30:                             ; CODE XREF: sub_402DD0+138↑j
.text:00402F30                 mov     [esp+4Ch+Src], 1 ; OpenFlag
.text:00402F38                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00402F3F                 call    _open
.text:00402F44                 jmp     short loc_402F0A
.text:00402F46 ; ---------------------------------------------------------------------------
.text:00402F46
.text:00402F46 loc_402F46:                             ; CODE XREF: sub_402DD0+6A↑j
.text:00402F46                 mov     eax, [esp+4Ch+arg_0]
.text:00402F4A                 test    byte ptr [eax+2Ch], 4
.text:00402F4E                 jnz     short loc_402F63
.text:00402F50                 mov     ecx, [eax+1Ch]
.text:00402F53                 mov     [esp+4Ch+Block], ecx
.text:00402F56                 call    sub_406550
.text:00402F5B                 test    eax, eax
.text:00402F5D                 jnz     loc_403007
.text:00402F63
.text:00402F63 loc_402F63:                             ; CODE XREF: sub_402DD0+17E↑j
.text:00402F63                 mov     ebp, [esi+40h]
.text:00402F66                 mov     eax, [esp+4Ch+arg_0]
.text:00402F6A                 mov     [esi+24h], ebp
.text:00402F6D                 inc     ebp
.text:00402F6E                 mov     [esp+4Ch+Size], ebp ; Size
.text:00402F72                 lea     ebp, [esi+0B8h]
.text:00402F78                 mov     [esp+4Ch+Src], ebp ; Src
.text:00402F7C                 mov     edx, [eax+18h]
.text:00402F7F                 mov     [esp+4Ch+Block], edx ; void *
.text:00402F82                 call    memmove
.text:00402F87                 mov     [esp+4Ch+Src], 2Fh ; '/' ; Ch
.text:00402F8F                 mov     [esp+4Ch+Block], ebp ; Str
.text:00402F92                 call    strrchr
.text:00402F97                 test    eax, eax
.text:00402F99                 mov     edi, eax
.text:00402F9B                 jz      short loc_402FC2
.text:00402F9D                 cmp     eax, ebp
.text:00402F9F                 jz      short loc_402FFF
.text:00402FA1
.text:00402FA1 loc_402FA1:                             ; CODE XREF: sub_402DD0+235↓j
.text:00402FA1                 inc     edi
.text:00402FA2                 mov     [esp+4Ch+Block], edi ; Str
.text:00402FA5                 call    strlen
.text:00402FAA                 mov     [esp+4Ch+Src], edi ; Src
.text:00402FAE                 mov     ebx, eax
.text:00402FB0                 lea     ecx, [eax+1]
.text:00402FB3                 mov     [esp+4Ch+Size], ecx ; Size
.text:00402FB7                 mov     [esp+4Ch+Block], ebp ; void *
.text:00402FBA                 call    memmove
.text:00402FBF                 mov     [esi+40h], ebx
.text:00402FC2
.text:00402FC2 loc_402FC2:                             ; CODE XREF: sub_402DD0+1CB↑j
.text:00402FC2                                         ; sub_402DD0+233↓j
.text:00402FC2                 cmp     word ptr [esi+44h], 1
.text:00402FC7                 mov     eax, [esp+4Ch+arg_0]
.text:00402FCB                 mov     edi, [esi+30h]
.text:00402FCE                 mov     ebx, [esi+34h]
.text:00402FD1                 mov     ebp, [eax+18h]
.text:00402FD4                 mov     ecx, [esp+4Ch+arg_0]
.text:00402FD8                 mov     [esi+18h], ebp
.text:00402FDB                 mov     [esi+14h], ebp
.text:00402FDE                 mov     [ecx+10h], edi
.text:00402FE1                 mov     [ecx+14h], ebx
.text:00402FE4                 jz      short loc_402FF1
.text:00402FE6
.text:00402FE6 loc_402FE6:                             ; CODE XREF: sub_402DD0+22D↓j
.text:00402FE6                 mov     edx, [esp+4Ch+arg_0]
.text:00402FEA                 mov     [edx], esi
.text:00402FEC                 jmp     loc_402E95
.text:00402FF1 ; ---------------------------------------------------------------------------
.text:00402FF1
.text:00402FF1 loc_402FF1:                             ; CODE XREF: sub_402DD0+214↑j
.text:00402FF1                 mov     [esp+4Ch+Src], esi ; int
.text:00402FF5                 mov     [esp+4Ch+Block], ecx ; Block
.text:00402FF8                 call    sub_404260
.text:00402FFD                 jmp     short loc_402FE6
.text:00402FFF ; ---------------------------------------------------------------------------
.text:00402FFF
.text:00402FFF loc_402FFF:                             ; CODE XREF: sub_402DD0+1CF↑j
.text:00402FFF                 cmp     byte ptr [ebp+1], 0
.text:00403003                 jz      short loc_402FC2
.text:00403005                 jmp     short loc_402FA1
.text:00403007 ; ---------------------------------------------------------------------------
.text:00403007
.text:00403007 loc_403007:                             ; CODE XREF: sub_402DD0+18D↑j
.text:00403007                 mov     esi, [esp+4Ch+arg_0]
.text:0040300B                 or      dword ptr [esi+2Ch], 2000h
.text:00403012                 lea     esi, [esi+0]
.text:00403019                 lea     edi, [edi+0]
.text:00403020
.text:00403020 loc_403020:                             ; CODE XREF: sub_402DD0+F↑j
.text:00403020                                         ; sub_402DD0+1E↑j ...
.text:00403020                 xor     eax, eax
.text:00403022                 jmp     loc_402EA0
.text:00403027 ; ---------------------------------------------------------------------------
.text:00403027
.text:00403027 loc_403027:                             ; CODE XREF: sub_402DD0+57↑j
.text:00403027                 mov     esi, [eax+4]
.text:0040302A                 mov     [esp+4Ch+Block], eax ; Block
.text:0040302D                 call    free
.text:00403032                 cmp     dword ptr [esi+3Ch], 0FFFFFFFFh
.text:00403036                 jz      loc_4031A7
.text:0040303C                 mov     ebx, [esp+4Ch+arg_0]
.text:00403040                 mov     edi, [esi+24h]
.text:00403043                 mov     eax, [ebx+18h]
.text:00403046                 mov     byte ptr [edi+eax], 0
.text:0040304A                 mov     edx, [esi+3Ch]
.text:0040304D                 test    edx, edx
.text:0040304F                 jnz     loc_403100
.text:00403055                 test    byte ptr [ebx+2Ch], 4
.text:00403059                 jz      short loc_4030D7
.text:0040305B
.text:0040305B loc_40305B:                             ; CODE XREF: sub_402DD0+314↓j
.text:0040305B                                         ; sub_402DD0+32B↓j ...
.text:0040305B                 mov     ebp, [esi+1Ch]
.text:0040305E                 xor     eax, eax
.text:00403060                 mov     ebx, 7
.text:00403065                 test    ebp, ebp
.text:00403067                 setz    al
.text:0040306A                 sub     ebx, eax
.text:0040306C                 test    ebp, ebp
.text:0040306E                 mov     [esi+44h], bx
.text:00403072                 jnz     short loc_40307F
.text:00403074                 mov     edx, [esp+4Ch+arg_0]
.text:00403078                 mov     ebx, [edx+30h]
.text:0040307B                 test    ebx, ebx
.text:0040307D                 jnz     short loc_403096
.text:0040307F
.text:0040307F loc_40307F:                             ; CODE XREF: sub_402DD0+2A2↑j
.text:0040307F                                         ; sub_402DD0+305↓j
.text:0040307F                 mov     ebx, [esp+4Ch+arg_0]
.text:00403083                 xor     eax, eax
.text:00403085                 test    byte ptr [ebx+2Dh], 20h
.text:00403089                 mov     [ebx], esi
.text:0040308B                 setnz   al
.text:0040308E                 dec     eax
.text:0040308F                 and     eax, esi
.text:00403091                 jmp     loc_402EA0
.text:00403096 ; ---------------------------------------------------------------------------
.text:00403096
.text:00403096 loc_403096:                             ; CODE XREF: sub_402DD0+2AD↑j
.text:00403096                 lea     edi, [esi+50h]
.text:00403099                 mov     ebp, [edi+10h]
.text:0040309C                 mov     ecx, [edi+14h]
.text:0040309F                 mov     [esp+4Ch+var_3C], ebp
.text:004030A3                 mov     [esp+4Ch+var_38], ecx
.text:004030A7                 mov     edx, [edi+8]
.text:004030AA                 mov     ebp, [edi+0Ch]
.text:004030AD                 mov     [esp+4Ch+Block], ebx
.text:004030B0                 lea     edi, [esp+4Ch+var_3C]
.text:004030B4                 mov     [esp+4Ch+var_34], edx
.text:004030B8                 mov     [esp+4Ch+var_30], ebp
.text:004030BC                 mov     [esp+4Ch+Src], edi
.text:004030C0                 call    sub_407320
.text:004030C5                 test    eax, eax
.text:004030C7                 jz      loc_403451
.text:004030CD                 mov     [esp+4Ch+Block], eax ; Block
.text:004030D0                 call    free
.text:004030D5                 jmp     short loc_40307F
.text:004030D7 ; ---------------------------------------------------------------------------
.text:004030D7
.text:004030D7 loc_4030D7:                             ; CODE XREF: sub_402DD0+289↑j
.text:004030D7                 mov     ecx, [ebx+1Ch]
.text:004030DA                 mov     [esp+4Ch+Block], ecx
.text:004030DD                 call    sub_406550
.text:004030E2                 test    eax, eax
.text:004030E4                 jz      loc_40305B
.text:004030EA                 call    _errno
.text:004030EF                 mov     ebp, [eax]
.text:004030F1                 mov     [esi+1Ch], ebp
.text:004030F4
.text:004030F4 loc_4030F4:                             ; CODE XREF: sub_402DD0+3D2↓j
.text:004030F4                 or      dword ptr [ebx+2Ch], 2000h
.text:004030FB                 jmp     loc_40305B
.text:00403100 ; ---------------------------------------------------------------------------
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_402DD0+27F↑j
.text:00403100                 movzx   eax, word ptr [esi+46h]
.text:00403104                 test    al, 2
.text:00403106                 jz      short loc_403161
.text:00403108                 mov     ebx, [esp+4Ch+arg_0]
.text:0040310C                 test    byte ptr [ebx+2Ch], 4
.text:00403110                 jz      short loc_403122
.text:00403112
.text:00403112 loc_403112:                             ; CODE XREF: sub_402DD0+35F↓j
.text:00403112                                         ; sub_402DD0+38F↓j
.text:00403112                 mov     edx, [esi+20h]
.text:00403115                 mov     [esp+4Ch+Block], edx ; FileHandle
.text:00403118                 call    _close
.text:0040311D                 jmp     loc_40305B
.text:00403122 ; ---------------------------------------------------------------------------
.text:00403122
.text:00403122 loc_403122:                             ; CODE XREF: sub_402DD0+340↑j
.text:00403122                 mov     edx, [esi+20h]
.text:00403125                 mov     [esp+4Ch+Block], edx
.text:00403128                 call    sub_406550
.text:0040312D                 test    eax, eax
.text:0040312F                 jz      short loc_403112
.text:00403131                 call    _errno
.text:00403136                 mov     ebx, [esi+20h]
.text:00403139                 mov     ebp, [eax]
.text:0040313B                 mov     [esp+4Ch+Block], ebx ; FileHandle
.text:0040313E                 call    _close
.text:00403143                 call    _errno
.text:00403148                 mov     [eax], ebp
.text:0040314A                 call    _errno
.text:0040314F                 mov     ecx, [eax]
.text:00403151                 mov     edi, [esp+4Ch+arg_0]
.text:00403155                 mov     [esi+1Ch], ecx
.text:00403158                 or      dword ptr [edi+2Ch], 2000h
.text:0040315F                 jmp     short loc_403112
.text:00403161 ; ---------------------------------------------------------------------------
.text:00403161
.text:00403161 loc_403161:                             ; CODE XREF: sub_402DD0+336↑j
.text:00403161                 test    al, 1
.text:00403163                 jnz     loc_40305B
.text:00403169                 mov     [esp+4Ch+FileName], offset byte_402DC3 ; FileName
.text:00403171                 mov     eax, [esp+4Ch+arg_0]
.text:00403175                 mov     [esp+4Ch+Size], 0FFFFFFFFh ; int
.text:0040317D                 mov     edi, [esi+4]
.text:00403180                 mov     [esp+4Ch+Block], eax ; int
.text:00403183                 mov     [esp+4Ch+Src], edi ; int
.text:00403187                 call    sub_404040
.text:0040318C                 test    eax, eax
.text:0040318E                 jz      loc_40305B
.text:00403194                 call    _errno
.text:00403199                 mov     ecx, [eax]
.text:0040319B                 mov     ebx, [esp+4Ch+arg_0]
.text:0040319F                 mov     [esi+1Ch], ecx
.text:004031A2                 jmp     loc_4030F4
.text:004031A7 ; ---------------------------------------------------------------------------
.text:004031A7
.text:004031A7 loc_4031A7:                             ; CODE XREF: sub_402DD0+266↑j
.text:004031A7                 mov     [esp+4Ch+Block], esi ; Block
.text:004031AA                 call    free
.text:004031AF                 call    _errno
.text:004031B4                 mov     dword ptr [eax], 0
.text:004031BA                 mov     esi, [esp+4Ch+arg_0]
.text:004031BE                 mov     dword ptr [esi], 0
.text:004031C4                 jmp     loc_403020
.text:004031C4 ; ---------------------------------------------------------------------------
.text:004031C9                 align 10h
.text:004031D0
.text:004031D0 loc_4031D0:                             ; CODE XREF: sub_402DD0+49↑j
.text:004031D0                 cmp     cx, 4
.text:004031D4                 jz      short loc_403200
.text:004031D6                 test    edi, 40h
.text:004031DC                 jz      loc_40328F
.text:004031E2                 mov     esi, [esp+4Ch+arg_0]
.text:004031E6                 mov     ebx, [ebp+34h]
.text:004031E9                 mov     ecx, [ebp+30h]
.text:004031EC                 mov     eax, [esi+10h]
.text:004031EF                 mov     edx, [esi+14h]
.text:004031F2                 mov     esi, ebx
.text:004031F4                 xor     eax, ecx
.text:004031F6                 xor     esi, edx
.text:004031F8                 or      esi, eax
.text:004031FA                 jz      loc_40328F
.text:00403200
.text:00403200 loc_403200:                             ; CODE XREF: sub_402DD0+404↑j
.text:00403200                 test    byte ptr [ebp+46h], 2
.text:00403204                 jnz     short loc_40327F
.text:00403206
.text:00403206 loc_403206:                             ; CODE XREF: sub_402DD0+4BA↓j
.text:00403206                 mov     ecx, [esp+4Ch+arg_0]
.text:0040320A                 mov     eax, [ecx+4]
.text:0040320D                 test    eax, eax
.text:0040320F                 jnz     short loc_40326A
.text:00403211
.text:00403211 loc_403211:                             ; CODE XREF: sub_402DD0+4AD↓j
.text:00403211                 mov     word ptr [ebp+44h], 6
.text:00403217                 mov     edx, [esp+4Ch+arg_0]
.text:0040321B                 mov     ebx, [edx+30h]
.text:0040321E
.text:0040321E loc_40321E:                             ; CODE XREF: sub_402DD0+515↓j
.text:0040321E                 test    ebx, ebx
.text:00403220                 jnz     short loc_403229
.text:00403222
.text:00403222 loc_403222:                             ; CODE XREF: sub_402DD0+498↓j
.text:00403222                                         ; sub_402DD0+5E4↓j ...
.text:00403222                 mov     eax, ebp
.text:00403224                 jmp     loc_402EA0
.text:00403229 ; ---------------------------------------------------------------------------
.text:00403229
.text:00403229 loc_403229:                             ; CODE XREF: sub_402DD0+450↑j
.text:00403229                 lea     ecx, [ebp+50h]
.text:0040322C                 mov     edx, [ecx+10h]
.text:0040322F                 mov     edi, [ecx+14h]
.text:00403232                 mov     [esp+4Ch+var_3C], edx
.text:00403236                 lea     edx, [esp+4Ch+var_3C]
.text:0040323A                 mov     [esp+4Ch+var_38], edi
.text:0040323E                 mov     esi, [ecx+8]
.text:00403241                 mov     edi, [ecx+0Ch]
.text:00403244                 mov     [esp+4Ch+Src], edx
.text:00403248                 mov     [esp+4Ch+var_34], esi
.text:0040324C                 mov     [esp+4Ch+var_30], edi
.text:00403250                 mov     [esp+4Ch+Block], ebx
.text:00403253                 call    sub_407320
.text:00403258                 test    eax, eax
.text:0040325A                 jz      loc_403451
.text:00403260                 mov     [esp+4Ch+Block], eax ; Block
.text:00403263                 call    free
.text:00403268                 jmp     short loc_403222
.text:0040326A ; ---------------------------------------------------------------------------
.text:0040326A
.text:0040326A loc_40326A:                             ; CODE XREF: sub_402DD0+43F↑j
.text:0040326A                 mov     [esp+4Ch+Block], eax ; void *
.text:0040326D                 call    sub_403ED0
.text:00403272                 mov     eax, [esp+4Ch+arg_0]
.text:00403276                 mov     dword ptr [eax+4], 0
.text:0040327D                 jmp     short loc_403211
.text:0040327F ; ---------------------------------------------------------------------------
.text:0040327F
.text:0040327F loc_40327F:                             ; CODE XREF: sub_402DD0+434↑j
.text:0040327F                 mov     esi, [ebp+20h]
.text:00403282                 mov     [esp+4Ch+Block], esi ; FileHandle
.text:00403285                 call    _close
.text:0040328A                 jmp     loc_403206
.text:0040328F ; ---------------------------------------------------------------------------
.text:0040328F
.text:0040328F loc_40328F:                             ; CODE XREF: sub_402DD0+40C↑j
.text:0040328F                                         ; sub_402DD0+42A↑j
.text:0040328F                 mov     eax, [esp+4Ch+arg_0]
.text:00403293                 mov     edx, [eax+4]
.text:00403296                 test    edx, edx
.text:00403298                 jz      short loc_4032AA
.text:0040329A                 test    edi, 1000h
.text:004032A0                 jnz     loc_40335C
.text:004032A6
.text:004032A6 loc_4032A6:                             ; CODE XREF: sub_402DD0+5AA↓j
.text:004032A6                 test    edx, edx
.text:004032A8                 jnz     short loc_4032FC
.text:004032AA
.text:004032AA loc_4032AA:                             ; CODE XREF: sub_402DD0+4C8↑j
.text:004032AA                 mov     [esp+4Ch+Src], 3
.text:004032B2                 mov     esi, [esp+4Ch+arg_0]
.text:004032B6                 mov     [esp+4Ch+Block], esi
.text:004032B9                 call    sub_4035B0
.text:004032BE                 mov     [esi+4], eax
.text:004032C1                 test    eax, eax
.text:004032C3                 mov     edx, eax
.text:004032C5                 jnz     short loc_4032EA
.text:004032C7                 test    byte ptr [esi+2Dh], 20h
.text:004032CB                 jnz     loc_403020
.text:004032D1                 mov     esi, [ebp+1Ch]
.text:004032D4                 test    esi, esi
.text:004032D6                 jz      short loc_4032DE
.text:004032D8                 mov     word ptr [ebp+44h], 7
.text:004032DE
.text:004032DE loc_4032DE:                             ; CODE XREF: sub_402DD0+506↑j
.text:004032DE                 mov     ecx, [esp+4Ch+arg_0]
.text:004032E2                 mov     ebx, [ecx+30h]
.text:004032E5                 jmp     loc_40321E
.text:004032EA ; ---------------------------------------------------------------------------
.text:004032EA
.text:004032EA loc_4032EA:                             ; CODE XREF: sub_402DD0+4F5↑j
.text:004032EA                                         ; sub_402DD0+556↓j ...
.text:004032EA                 mov     ebp, [esp+4Ch+arg_0]
.text:004032EE                 mov     esi, edx
.text:004032F0                 mov     dword ptr [ebp+4], 0
.text:004032F7                 jmp     loc_402E50
.text:004032FC ; ---------------------------------------------------------------------------
.text:004032FC
.text:004032FC loc_4032FC:                             ; CODE XREF: sub_402DD0+4D8↑j
.text:004032FC                 mov     esi, [ebp+14h]
.text:004032FF                 mov     [esp+4Ch+Src], ebp ; int
.text:00403303                 mov     ebx, [esp+4Ch+arg_0]
.text:00403307                 mov     [esp+4Ch+Size], 0FFFFFFFFh ; int
.text:0040330F                 mov     [esp+4Ch+FileName], esi ; FileName
.text:00403313                 mov     [esp+4Ch+Block], ebx ; int
.text:00403316                 call    sub_404040
.text:0040331B                 test    eax, eax
.text:0040331D                 jnz     short loc_403328
.text:0040331F                 mov     eax, [esp+4Ch+arg_0]
.text:00403323                 mov     edx, [eax+4]
.text:00403326                 jmp     short loc_4032EA
.text:00403328 ; ---------------------------------------------------------------------------
.text:00403328
.text:00403328 loc_403328:                             ; CODE XREF: sub_402DD0+54D↑j
.text:00403328                 call    _errno
.text:0040332D                 movzx   ecx, word ptr [ebp+46h]
.text:00403331                 mov     edx, [eax]
.text:00403333                 or      ecx, 1
.text:00403336                 mov     [ebp+1Ch], edx
.text:00403339                 mov     [ebp+46h], cx
.text:0040333D                 mov     ebp, [esp+4Ch+arg_0]
.text:00403341                 mov     esi, [ebp+4]
.text:00403344                 test    esi, esi
.text:00403346                 mov     edx, esi
.text:00403348                 jz      short loc_4032EA
.text:0040334A
.text:0040334A loc_40334A:                             ; CODE XREF: sub_402DD0+588↓j
.text:0040334A                 mov     ebx, [esi+4]
.text:0040334D                 mov     edi, [ebx+14h]
.text:00403350                 mov     [esi+14h], edi
.text:00403353                 mov     esi, [esi+8]
.text:00403356                 test    esi, esi
.text:00403358                 jnz     short loc_40334A
.text:0040335A                 jmp     short loc_4032EA
.text:0040335C ; ---------------------------------------------------------------------------
.text:0040335C
.text:0040335C loc_40335C:                             ; CODE XREF: sub_402DD0+4D0↑j
.text:0040335C                 and     edi, 0FFFFEFFFh
.text:00403362                 mov     [eax+2Ch], edi
.text:00403365                 mov     [esp+4Ch+Block], edx ; void *
.text:00403368                 call    sub_403ED0
.text:0040336D                 mov     edi, [esp+4Ch+arg_0]
.text:00403371                 xor     edx, edx
.text:00403373                 mov     dword ptr [edi+4], 0
.text:0040337A                 jmp     loc_4032A6
.text:0040337F ; ---------------------------------------------------------------------------
.text:0040337F
.text:0040337F loc_40337F:                             ; CODE XREF: sub_402DD0+3E↑j
.text:0040337F                 mov     edx, [ebp+44h]
.text:00403382                 lea     ebx, [edx-0Ch]
.text:00403385                 cmp     bx, 1
.text:00403389                 ja      loc_402E17
.text:0040338F                 mov     [esp+4Ch+Size], 1
.text:00403397                 mov     eax, [esp+4Ch+arg_0]
.text:0040339B                 mov     [esp+4Ch+Src], ebp
.text:0040339F                 mov     [esp+4Ch+Block], eax
.text:004033A2                 call    sub_403C10
.text:004033A7                 mov     [ebp+44h], ax
.text:004033AB                 dec     ax
.text:004033AD                 jz      short loc_4033CF
.text:004033AF
.text:004033AF loc_4033AF:                             ; CODE XREF: sub_402DD0+607↓j
.text:004033AF                                         ; sub_402DD0+633↓j ...
.text:004033AF                 cmp     word ptr [ebp+44h], 1
.text:004033B4                 jnz     loc_403222
.text:004033BA                 mov     [esp+4Ch+Src], ebp ; int
.text:004033BE                 mov     ebx, [esp+4Ch+arg_0]
.text:004033C2                 mov     [esp+4Ch+Block], ebx ; Block
.text:004033C5                 call    sub_404260
.text:004033CA                 jmp     loc_403222
.text:004033CF ; ---------------------------------------------------------------------------
.text:004033CF
.text:004033CF loc_4033CF:                             ; CODE XREF: sub_402DD0+5DD↑j
.text:004033CF                 mov     edx, [esp+4Ch+arg_0]
.text:004033D3                 test    byte ptr [edx+2Ch], 4
.text:004033D7                 jnz     short loc_4033AF
.text:004033D9                 mov     [esp+4Ch+Src], 0 ; OpenFlag
.text:004033E1                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:004033E8                 call    _open
.text:004033ED                 test    eax, eax
.text:004033EF                 js      short loc_403417
.text:004033F1
.text:004033F1 loc_4033F1:                             ; CODE XREF: sub_402DD0+65B↓j
.text:004033F1                 mov     [esi+20h], eax
.text:004033F4                 test    eax, eax
.text:004033F6                 js      short loc_403405
.text:004033F8                 movzx   edi, word ptr [esi+46h]
.text:004033FC                 or      edi, 2
.text:004033FF                 mov     [esi+46h], di
.text:00403403                 jmp     short loc_4033AF
.text:00403405 ; ---------------------------------------------------------------------------
.text:00403405
.text:00403405 loc_403405:                             ; CODE XREF: sub_402DD0+626↑j
.text:00403405                 call    _errno
.text:0040340A                 mov     word ptr [esi+44h], 7
.text:00403410                 mov     ecx, [eax]
.text:00403412                 mov     [esi+1Ch], ecx
.text:00403415                 jmp     short loc_4033AF
.text:00403417 ; ---------------------------------------------------------------------------
.text:00403417
.text:00403417 loc_403417:                             ; CODE XREF: sub_402DD0+61F↑j
.text:00403417                 mov     [esp+4Ch+Src], 1 ; OpenFlag
.text:0040341F                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00403426                 call    _open
.text:0040342B                 jmp     short loc_4033F1
.text:0040342B ; ---------------------------------------------------------------------------
.text:0040342D                 align 10h
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_402DD0+34↑j
.text:00403430                 mov     [esp+4Ch+Size], 0
.text:00403438                 mov     eax, [esp+4Ch+arg_0]
.text:0040343C                 mov     [esp+4Ch+Src], ebp
.text:00403440                 mov     [esp+4Ch+Block], eax
.text:00403443                 call    sub_403C10
.text:00403448                 mov     [ebp+44h], ax
.text:0040344C                 jmp     loc_402E95
.text:00403451 ; ---------------------------------------------------------------------------
.text:00403451
.text:00403451 loc_403451:                             ; CODE XREF: sub_402DD0+2F7↑j
.text:00403451                                         ; sub_402DD0+48A↑j
.text:00403451                 call    abort
.text:00403451 sub_402DD0      endp
.text:00403451
.text:00403451 ; ---------------------------------------------------------------------------
.text:00403456                 align 10h
.text:00403460                 sub     esp, 1Ch
.text:00403463                 mov     [esp+10h], ebx
.text:00403467                 mov     ebx, [esp+24h]
.text:0040346B                 mov     [esp+18h], edi
.text:0040346F                 mov     edi, [esp+20h]
.text:00403473                 test    ebx, ebx
.text:00403475                 mov     [esp+14h], esi
.text:00403479                 jz      short loc_403487
.text:0040347B                 cmp     ebx, 1000h
.text:00403481                 jnz     loc_40359D
.text:00403487
.text:00403487 loc_403487:                             ; CODE XREF: .text:00403479↑j
.text:00403487                 mov     esi, [edi]
.text:00403489                 call    _errno
.text:0040348E                 mov     dword ptr [eax], 0
.text:00403494                 test    byte ptr [edi+2Dh], 20h
.text:00403498                 jnz     loc_403550
.text:0040349E                 movzx   edx, word ptr [esi+44h]
.text:004034A2                 cmp     dx, 9
.text:004034A6                 jz      loc_403595
.text:004034AC                 xor     eax, eax
.text:004034AE                 dec     dx
.text:004034B0                 jnz     short loc_4034F2
.text:004034B2                 mov     eax, [edi+4]
.text:004034B5                 test    eax, eax
.text:004034B7                 jnz     loc_403588
.text:004034BD
.text:004034BD loc_4034BD:                             ; CODE XREF: .text:00403590↓j
.text:004034BD                 cmp     ebx, 1000h
.text:004034C3                 jz      loc_403577
.text:004034C9                 mov     ebx, 1
.text:004034CE
.text:004034CE loc_4034CE:                             ; CODE XREF: .text:00403583↓j
.text:004034CE                 mov     edx, [esi+3Ch]
.text:004034D1                 test    edx, edx
.text:004034D3                 jnz     short loc_4034E3
.text:004034D5                 mov     edx, [esi+14h]
.text:004034D8                 cmp     byte ptr [edx], 2Fh ; '/'
.text:004034DB                 jz      short loc_4034E3
.text:004034DD                 test    byte ptr [edi+2Ch], 4
.text:004034E1                 jz      short loc_403502
.text:004034E3
.text:004034E3 loc_4034E3:                             ; CODE XREF: .text:004034D3↑j
.text:004034E3                                         ; .text:004034DB↑j
.text:004034E3                 mov     [esp+4], ebx
.text:004034E7                 mov     [esp], edi
.text:004034EA                 call    sub_4035B0
.text:004034EF                 mov     [edi+4], eax
.text:004034F2
.text:004034F2 loc_4034F2:                             ; CODE XREF: .text:004034B0↑j
.text:004034F2                                         ; .text:00403542↓j ...
.text:004034F2                 mov     ebx, [esp+10h]
.text:004034F6                 mov     esi, [esp+14h]
.text:004034FA                 mov     edi, [esp+18h]
.text:004034FE                 add     esp, 1Ch
.text:00403501                 retn
.text:00403502 ; ---------------------------------------------------------------------------
.text:00403502
.text:00403502 loc_403502:                             ; CODE XREF: .text:004034E1↑j
.text:00403502                 mov     dword ptr [esp+4], 0
.text:0040350A                 mov     dword ptr [esp], offset FileName ; "."
.text:00403511                 call    _open
.text:00403516                 test    eax, eax
.text:00403518                 mov     esi, eax
.text:0040351A                 js      short loc_403554
.text:0040351C
.text:0040351C loc_40351C:                             ; CODE XREF: .text:0040356C↓j
.text:0040351C                 mov     [esp+4], ebx
.text:00403520                 mov     [esp], edi
.text:00403523                 call    sub_4035B0
.text:00403528                 mov     [edi+4], eax
.text:0040352B                 mov     [esp], esi
.text:0040352E                 call    sub_406550
.text:00403533                 test    eax, eax
.text:00403535                 jnz     short loc_403544
.text:00403537                 mov     [esp], esi
.text:0040353A                 call    _close
.text:0040353F                 mov     eax, [edi+4]
.text:00403542                 jmp     short loc_4034F2
.text:00403544 ; ---------------------------------------------------------------------------
.text:00403544
.text:00403544 loc_403544:                             ; CODE XREF: .text:00403535↑j
.text:00403544                 mov     [esp], esi
.text:00403547                 call    _close
.text:0040354C                 lea     esi, [esi+0]
.text:00403550
.text:00403550 loc_403550:                             ; CODE XREF: .text:00403498↑j
.text:00403550                                         ; .text:00403575↓j ...
.text:00403550                 xor     eax, eax
.text:00403552                 jmp     short loc_4034F2
.text:00403554 ; ---------------------------------------------------------------------------
.text:00403554
.text:00403554 loc_403554:                             ; CODE XREF: .text:0040351A↑j
.text:00403554                 mov     dword ptr [esp+4], 1
.text:0040355C                 mov     dword ptr [esp], offset FileName ; "."
.text:00403563                 call    _open
.text:00403568                 test    eax, eax
.text:0040356A                 mov     esi, eax
.text:0040356C                 jns     short loc_40351C
.text:0040356E                 mov     dword ptr [edi+4], 0
.text:00403575                 jmp     short loc_403550
.text:00403577 ; ---------------------------------------------------------------------------
.text:00403577
.text:00403577 loc_403577:                             ; CODE XREF: .text:004034C3↑j
.text:00403577                 or      dword ptr [edi+2Ch], 1000h
.text:0040357E                 mov     ebx, 2
.text:00403583                 jmp     loc_4034CE
.text:00403588 ; ---------------------------------------------------------------------------
.text:00403588
.text:00403588 loc_403588:                             ; CODE XREF: .text:004034B7↑j
.text:00403588                 mov     [esp], eax
.text:0040358B                 call    sub_403ED0
.text:00403590                 jmp     loc_4034BD
.text:00403595 ; ---------------------------------------------------------------------------
.text:00403595
.text:00403595 loc_403595:                             ; CODE XREF: .text:004034A6↑j
.text:00403595                 mov     eax, [esi+8]
.text:00403598                 jmp     loc_4034F2
.text:0040359D ; ---------------------------------------------------------------------------
.text:0040359D
.text:0040359D loc_40359D:                             ; CODE XREF: .text:00403481↑j
.text:0040359D                 call    _errno
.text:004035A2                 mov     dword ptr [eax], 16h
.text:004035A8                 jmp     short loc_403550
.text:004035A8 ; ---------------------------------------------------------------------------
.text:004035AA                 align 10h
.text:004035B0
.text:004035B0 ; =============== S U B R O U T I N E =======================================
.text:004035B0
.text:004035B0
.text:004035B0 sub_4035B0      proc near               ; CODE XREF: sub_402DD0+4E9↑p
.text:004035B0                                         ; .text:004034EA↑p ...
.text:004035B0
.text:004035B0 Block           = dword ptr -5Ch
.text:004035B0 Src             = dword ptr -58h
.text:004035B0 Size            = dword ptr -54h
.text:004035B0 FileName        = dword ptr -50h
.text:004035B0 var_48          = dword ptr -48h
.text:004035B0 var_44          = dword ptr -44h
.text:004035B0 var_40          = dword ptr -40h
.text:004035B0 var_39          = byte ptr -39h
.text:004035B0 var_38          = dword ptr -38h
.text:004035B0 var_34          = dword ptr -34h
.text:004035B0 var_2E          = byte ptr -2Eh
.text:004035B0 var_2D          = byte ptr -2Dh
.text:004035B0 var_2C          = dword ptr -2Ch
.text:004035B0 var_28          = dword ptr -28h
.text:004035B0 var_24          = dword ptr -24h
.text:004035B0 var_20          = dword ptr -20h
.text:004035B0 var_1C          = dword ptr -1Ch
.text:004035B0 var_18          = dword ptr -18h
.text:004035B0 var_14          = dword ptr -14h
.text:004035B0 arg_0           = dword ptr  4
.text:004035B0 arg_4           = dword ptr  8
.text:004035B0
.text:004035B0                 push    ebp
.text:004035B1                 push    edi
.text:004035B2                 push    esi
.text:004035B3                 push    ebx
.text:004035B4                 sub     esp, 4Ch
.text:004035B7                 mov     ebp, [esp+5Ch+arg_0]
.text:004035BB                 mov     edx, [ebp+0]
.text:004035BE                 mov     ecx, [edx+14h]
.text:004035C1                 mov     [esp+5Ch+var_1C], edx
.text:004035C5                 mov     [esp+5Ch+Block], ecx ; LPCSTR
.text:004035C8                 call    sub_40CCF0
.text:004035CD                 mov     [esp+5Ch+var_24], eax
.text:004035D1                 test    eax, eax
.text:004035D3                 jz      loc_403BE5
.text:004035D9                 cmp     [esp+5Ch+arg_4], 2
.text:004035DE                 jz      loc_403BD8
.text:004035E4                 mov     edx, [ebp+2Ch]
.text:004035E7                 mov     ebx, edx
.text:004035E9                 and     ebx, 18h
.text:004035EC                 cmp     ebx, 18h
.text:004035EF                 jz      loc_403BB7
.text:004035F5                 mov     [esp+5Ch+var_38], 0FFFFFFFFh
.text:004035FD
.text:004035FD loc_4035FD:                             ; CODE XREF: sub_4035B0+630↓j
.text:004035FD                 mov     [esp+5Ch+var_39], 0
.text:00403602
.text:00403602 loc_403602:                             ; CODE XREF: sub_4035B0+623↓j
.text:00403602                 mov     [esp+5Ch+var_2C], 0
.text:0040360A                 mov     eax, [esp+5Ch+var_38]
.text:0040360E                 test    eax, eax
.text:00403610                 jnz     loc_403B31
.text:00403616                 cmp     [esp+5Ch+arg_4], 3
.text:0040361B                 mov     [esp+5Ch+var_2D], 0
.text:00403620                 jz      loc_403B31
.text:00403626
.text:00403626 loc_403626:                             ; CODE XREF: sub_4035B0+5AA↓j
.text:00403626                                         ; sub_4035B0+5F2↓j
.text:00403626                 mov     ecx, [esp+5Ch+var_1C]
.text:0040362A                 mov     eax, [esp+5Ch+var_1C]
.text:0040362E                 mov     edi, [ecx+24h]
.text:00403631                 mov     esi, [eax+18h]
.text:00403634                 mov     [esp+5Ch+var_40], edi
.text:00403638                 mov     edx, [esp+5Ch+var_40]
.text:0040363C                 cmp     byte ptr [edx+esi-1], 2Fh ; '/'
.text:00403641                 jz      loc_403B27
.text:00403647
.text:00403647 loc_403647:                             ; CODE XREF: sub_4035B0+57C↓j
.text:00403647                 test    byte ptr [ebp+2Ch], 4
.text:0040364B                 jz      loc_403B1A
.text:00403651                 mov     edx, [esp+5Ch+var_40]
.text:00403655                 mov     ebx, [ebp+18h]
.text:00403658                 add     edx, ebx
.text:0040365A                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040365D                 inc     edx
.text:0040365E                 mov     [esp+5Ch+var_48], edx
.text:00403662
.text:00403662 loc_403662:                             ; CODE XREF: sub_4035B0+572↓j
.text:00403662                 inc     [esp+5Ch+var_40]
.text:00403666                 mov     eax, [esp+5Ch+var_1C]
.text:0040366A                 mov     [esp+5Ch+var_2E], 0
.text:0040366F                 mov     edi, [ebp+20h]
.text:00403672                 mov     ecx, [esp+5Ch+var_40]
.text:00403676                 mov     [esp+5Ch+var_20], 0
.text:0040367E                 mov     esi, [eax+3Ch]
.text:00403681                 mov     [esp+5Ch+var_14], 0
.text:00403689                 sub     edi, ecx
.text:0040368B                 inc     esi
.text:0040368C                 mov     [esp+5Ch+var_44], edi
.text:00403690                 mov     [esp+5Ch+var_34], esi
.text:00403694                 mov     [esp+5Ch+var_18], 0
.text:0040369C                 lea     esi, [esi+0]
.text:004036A0
.text:004036A0 loc_4036A0:                             ; CODE XREF: sub_4035B0+2D1↓j
.text:004036A0                                         ; sub_4035B0+430↓j ...
.text:004036A0                 mov     esi, [esp+5Ch+var_24]
.text:004036A4                 test    esi, esi
.text:004036A6                 jz      loc_403A0C
.text:004036AC                 mov     edi, [esp+5Ch+var_24]
.text:004036B0                 mov     [esp+5Ch+Block], edi
.text:004036B3                 call    sub_40B970
.text:004036B8                 test    eax, eax
.text:004036BA                 mov     edi, eax
.text:004036BC                 jz      loc_403A00
.text:004036C2                 test    byte ptr [ebp+2Ch], 20h
.text:004036C6                 jnz     short loc_4036D2
.text:004036C8                 cmp     byte ptr [edi+0Ch], 2Eh ; '.'
.text:004036CC                 jz      loc_4039DC
.text:004036D2
.text:004036D2 loc_4036D2:                             ; CODE XREF: sub_4035B0+116↑j
.text:004036D2                                         ; sub_4035B0+445↓j
.text:004036D2                 lea     ebx, [edi+0Ch]
.text:004036D5                 mov     ecx, ebx
.text:004036D7                 mov     esi, ebx
.text:004036D9                 lea     esi, [esi+0]
.text:004036E0
.text:004036E0 loc_4036E0:                             ; CODE XREF: sub_4035B0+145↓j
.text:004036E0                 mov     eax, [ecx]
.text:004036E2                 add     ecx, 4
.text:004036E5                 lea     edx, [eax-1010101h]
.text:004036EB                 not     eax
.text:004036ED                 and     edx, eax
.text:004036EF                 and     edx, 80808080h
.text:004036F5                 jz      short loc_4036E0
.text:004036F7                 test    edx, 8080h
.text:004036FD                 jnz     short loc_403705
.text:004036FF                 shr     edx, 10h
.text:00403702                 add     ecx, 2
.text:00403705
.text:00403705 loc_403705:                             ; CODE XREF: sub_4035B0+14D↑j
.text:00403705                 mov     [esp+5Ch+Src], ebx ; void *
.text:00403709                 add     dl, dl
.text:0040370B                 sbb     ecx, 3
.text:0040370E                 sub     ecx, esi
.text:00403710                 mov     [esp+5Ch+Size], ecx ; size_t
.text:00403714                 mov     [esp+5Ch+Block], ebp ; int
.text:00403717                 call    sub_403E40
.text:0040371C                 test    eax, eax
.text:0040371E                 mov     esi, eax
.text:00403720                 jz      loc_403997
.text:00403726                 mov     ecx, ebx
.text:00403728                 nop
.text:00403729                 lea     esi, [esi+0]
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: sub_4035B0+195↓j
.text:00403730                 mov     eax, [ecx]
.text:00403732                 add     ecx, 4
.text:00403735                 lea     edx, [eax-1010101h]
.text:0040373B                 not     eax
.text:0040373D                 and     edx, eax
.text:0040373F                 and     edx, 80808080h
.text:00403745                 jz      short loc_403730
.text:00403747                 test    edx, 8080h
.text:0040374D                 jnz     short loc_403755
.text:0040374F                 shr     edx, 10h
.text:00403752                 add     ecx, 2
.text:00403755
.text:00403755 loc_403755:                             ; CODE XREF: sub_4035B0+19D↑j
.text:00403755                 add     dl, dl
.text:00403757                 sbb     ecx, 3
.text:0040375A                 sub     ecx, ebx
.text:0040375C                 cmp     ecx, [esp+5Ch+var_44]
.text:00403760                 jb      loc_4037E3
.text:00403766                 mov     eax, [ebp+18h]
.text:00403769                 mov     ecx, ebx
.text:0040376B                 mov     [esp+5Ch+var_28], eax
.text:0040376F                 nop
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_4035B0+1D5↓j
.text:00403770                 mov     eax, [ecx]
.text:00403772                 add     ecx, 4
.text:00403775                 lea     edx, [eax-1010101h]
.text:0040377B                 not     eax
.text:0040377D                 and     edx, eax
.text:0040377F                 and     edx, 80808080h
.text:00403785                 jz      short loc_403770
.text:00403787                 test    edx, 8080h
.text:0040378D                 jnz     short loc_403795
.text:0040378F                 shr     edx, 10h
.text:00403792                 add     ecx, 2
.text:00403795
.text:00403795 loc_403795:                             ; CODE XREF: sub_4035B0+1DD↑j
.text:00403795                 mov     [esp+5Ch+Block], ebp
.text:00403798                 add     dl, dl
.text:0040379A                 mov     edx, [esp+5Ch+var_40]
.text:0040379E                 sbb     ecx, 3
.text:004037A1                 sub     ecx, ebx
.text:004037A3                 lea     eax, [edx+ecx+1]
.text:004037A7                 mov     [esp+5Ch+Src], eax
.text:004037AB                 call    sub_403F00
.text:004037B0                 test    al, al
.text:004037B2                 jz      loc_403997
.text:004037B8                 mov     eax, [ebp+18h]
.text:004037BB                 cmp     [esp+5Ch+var_28], eax
.text:004037BF                 jz      short loc_4037D6
.text:004037C1                 test    byte ptr [ebp+2Ch], 4
.text:004037C5                 mov     [esp+5Ch+var_2E], 1
.text:004037CA                 jz      short loc_4037D6
.text:004037CC                 mov     ecx, [esp+5Ch+var_40]
.text:004037D0                 add     eax, ecx
.text:004037D2                 mov     [esp+5Ch+var_48], eax
.text:004037D6
.text:004037D6 loc_4037D6:                             ; CODE XREF: sub_4035B0+20F↑j
.text:004037D6                                         ; sub_4035B0+21A↑j
.text:004037D6                 mov     ecx, [ebp+20h]
.text:004037D9                 mov     edx, [esp+5Ch+var_40]
.text:004037DD                 sub     ecx, edx
.text:004037DF                 mov     [esp+5Ch+var_44], ecx
.text:004037E3
.text:004037E3 loc_4037E3:                             ; CODE XREF: sub_4035B0+1B0↑j
.text:004037E3                 mov     ecx, ebx
.text:004037E5                 lea     esi, [esi+0]
.text:004037E9                 lea     edi, [edi+0]
.text:004037F0
.text:004037F0 loc_4037F0:                             ; CODE XREF: sub_4035B0+255↓j
.text:004037F0                 mov     eax, [ecx]
.text:004037F2                 add     ecx, 4
.text:004037F5                 lea     edx, [eax-1010101h]
.text:004037FB                 not     eax
.text:004037FD                 and     edx, eax
.text:004037FF                 and     edx, 80808080h
.text:00403805                 jz      short loc_4037F0
.text:00403807                 test    edx, 8080h
.text:0040380D                 jnz     short loc_403815
.text:0040380F                 shr     edx, 10h
.text:00403812                 add     ecx, 2
.text:00403815
.text:00403815 loc_403815:                             ; CODE XREF: sub_4035B0+25D↑j
.text:00403815                 add     dl, dl
.text:00403817                 mov     edx, [esp+5Ch+var_40]
.text:0040381B                 sbb     ecx, 3
.text:0040381E                 sub     ecx, ebx
.text:00403820                 add     edx, ecx
.text:00403822                 cmp     edx, [esp+5Ch+var_40]
.text:00403826                 jb      loc_403951
.text:0040382C                 mov     [esi+24h], edx
.text:0040382F                 mov     ebx, [esp+5Ch+var_34]
.text:00403833                 mov     ecx, [ebp+0]
.text:00403836                 mov     [esi+3Ch], ebx
.text:00403839                 mov     ebx, [esp+5Ch+var_2C]
.text:0040383D                 mov     [esi+4], ecx
.text:00403840                 test    ebx, ebx
.text:00403842                 jz      short loc_403898
.text:00403844                 mov     edi, [esp+5Ch+var_38]
.text:00403848                 test    edi, edi
.text:0040384A                 jz      short loc_403890
.text:0040384C                 mov     word ptr [esi+44h], 0Ah
.text:00403852                 mov     eax, [esp+5Ch+var_2C]
.text:00403856                 mov     [esi+1Ch], eax
.text:00403859
.text:00403859 loc_403859:                             ; CODE XREF: sub_4035B0+2E6↓j
.text:00403859                 mov     ebx, [esp+5Ch+var_1C]
.text:0040385D                 mov     ecx, [ebx+14h]
.text:00403860                 mov     [esi+14h], ecx
.text:00403863
.text:00403863 loc_403863:                             ; CODE XREF: sub_4035B0+315↓j
.text:00403863                                         ; sub_4035B0+34E↓j ...
.text:00403863                 mov     dword ptr [esi+8], 0
.text:0040386A                 mov     edx, [esp+5Ch+var_14]
.text:0040386E                 test    edx, edx
.text:00403870                 jz      short loc_403886
.text:00403872                 mov     eax, [esp+5Ch+var_20]
.text:00403876                 mov     [esp+5Ch+var_20], esi
.text:0040387A                 mov     [eax+8], esi
.text:0040387D
.text:0040387D loc_40387D:                             ; CODE XREF: sub_4035B0+2DE↓j
.text:0040387D                 inc     [esp+5Ch+var_18]
.text:00403881                 jmp     loc_4036A0
.text:00403886 ; ---------------------------------------------------------------------------
.text:00403886
.text:00403886 loc_403886:                             ; CODE XREF: sub_4035B0+2C0↑j
.text:00403886                 mov     [esp+5Ch+var_20], esi
.text:0040388A                 mov     [esp+5Ch+var_14], esi
.text:0040388E                 jmp     short loc_40387D
.text:00403890 ; ---------------------------------------------------------------------------
.text:00403890
.text:00403890 loc_403890:                             ; CODE XREF: sub_4035B0+29A↑j
.text:00403890                 mov     word ptr [esi+44h], 0Bh
.text:00403896                 jmp     short loc_403859
.text:00403898 ; ---------------------------------------------------------------------------
.text:00403898
.text:00403898 loc_403898:                             ; CODE XREF: sub_4035B0+292↑j
.text:00403898                 mov     edx, [esp+5Ch+var_38]
.text:0040389C                 test    edx, edx
.text:0040389E                 jz      short loc_4038B3
.text:004038A0                 cmp     [esp+5Ch+var_39], 0
.text:004038A5                 jz      short loc_4038CF
.text:004038A7                 movzx   eax, byte ptr [edi+0Ah]
.text:004038AB                 cmp     al, 4
.text:004038AD                 jz      short loc_4038CF
.text:004038AF                 test    al, al
.text:004038B1                 jz      short loc_4038CF
.text:004038B3
.text:004038B3 loc_4038B3:                             ; CODE XREF: sub_4035B0+2EE↑j
.text:004038B3                 test    byte ptr [ebp+2Ch], 4
.text:004038B7                 jz      short loc_4038C7
.text:004038B9                 mov     eax, [esi+18h]
.text:004038BC
.text:004038BC loc_4038BC:                             ; CODE XREF: sub_4035B0+31D↓j
.text:004038BC                 mov     [esi+14h], eax
.text:004038BF                 mov     word ptr [esi+44h], 0Bh
.text:004038C5                 jmp     short loc_403863
.text:004038C7 ; ---------------------------------------------------------------------------
.text:004038C7
.text:004038C7 loc_4038C7:                             ; CODE XREF: sub_4035B0+307↑j
.text:004038C7                 lea     eax, [esi+0B8h]
.text:004038CD                 jmp     short loc_4038BC
.text:004038CF ; ---------------------------------------------------------------------------
.text:004038CF
.text:004038CF loc_4038CF:                             ; CODE XREF: sub_4035B0+2F5↑j
.text:004038CF                                         ; sub_4035B0+2FD↑j ...
.text:004038CF                 test    byte ptr [ebp+2Ch], 4
.text:004038D3                 jnz     short loc_40392B
.text:004038D5                 lea     edi, [esi+0B8h]
.text:004038DB                 mov     [esi+14h], edi
.text:004038DE
.text:004038DE loc_4038DE:                             ; CODE XREF: sub_4035B0+39F↓j
.text:004038DE                 mov     [esp+5Ch+Size], 0
.text:004038E6                 mov     [esp+5Ch+Src], esi
.text:004038EA                 mov     [esp+5Ch+Block], ebp
.text:004038ED                 call    sub_403C10
.text:004038F2                 mov     [esi+44h], ax
.text:004038F6                 mov     ecx, [esp+5Ch+var_38]
.text:004038FA                 mov     edx, eax
.text:004038FC                 test    ecx, ecx
.text:004038FE                 jz      loc_403863
.text:00403904                 cmp     [esp+5Ch+var_39], 0
.text:00403909                 jz      loc_403863
.text:0040390F                 lea     ebx, [edx-1]
.text:00403912                 cmp     bx, 1
.text:00403916                 jbe     short loc_403922
.text:00403918                 cmp     ax, 5
.text:0040391C                 jnz     loc_403863
.text:00403922
.text:00403922 loc_403922:                             ; CODE XREF: sub_4035B0+366↑j
.text:00403922                 dec     [esp+5Ch+var_38]
.text:00403926                 jmp     loc_403863
.text:0040392B ; ---------------------------------------------------------------------------
.text:0040392B
.text:0040392B loc_40392B:                             ; CODE XREF: sub_4035B0+323↑j
.text:0040392B                 mov     edx, [esi+18h]
.text:0040392E                 lea     ecx, [esi+0B8h]
.text:00403934                 mov     ebx, [esi+40h]
.text:00403937                 mov     edi, [esp+5Ch+var_48]
.text:0040393B                 mov     [esi+14h], edx
.text:0040393E                 inc     ebx
.text:0040393F                 mov     [esp+5Ch+Size], ebx ; Size
.text:00403943                 mov     [esp+5Ch+Src], ecx ; Src
.text:00403947                 mov     [esp+5Ch+Block], edi ; void *
.text:0040394A                 call    memmove
.text:0040394F                 jmp     short loc_4038DE
.text:00403951 ; ---------------------------------------------------------------------------
.text:00403951
.text:00403951 loc_403951:                             ; CODE XREF: sub_4035B0+276↑j
.text:00403951                 mov     [esp+5Ch+Block], esi ; Block
.text:00403954                 call    free
.text:00403959                 mov     edx, [esp+5Ch+var_14]
.text:0040395D                 mov     [esp+5Ch+Block], edx ; void *
.text:00403960                 call    sub_403ED0
.text:00403965                 mov     esi, [esp+5Ch+var_24]
.text:00403969                 mov     [esp+5Ch+Block], esi ; void *
.text:0040396C                 call    sub_40CC80
.text:00403971                 or      dword ptr [ebp+2Ch], 2000h
.text:00403978                 mov     ecx, [esp+5Ch+var_1C]
.text:0040397C                 mov     word ptr [ecx+44h], 7
.text:00403982                 call    _errno
.text:00403987                 mov     dword ptr [eax], 26h ; '&'
.text:0040398D
.text:0040398D loc_40398D:                             ; CODE XREF: sub_4035B0+42A↓j
.text:0040398D                                         ; sub_4035B0+4F6↓j ...
.text:0040398D                 xor     eax, eax
.text:0040398F
.text:0040398F loc_40398F:                             ; CODE XREF: sub_4035B0+4CE↓j
.text:0040398F                 add     esp, 4Ch
.text:00403992                 pop     ebx
.text:00403993                 pop     esi
.text:00403994                 pop     edi
.text:00403995                 pop     ebp
.text:00403996                 retn
.text:00403997 ; ---------------------------------------------------------------------------
.text:00403997
.text:00403997 loc_403997:                             ; CODE XREF: sub_4035B0+170↑j
.text:00403997                                         ; sub_4035B0+202↑j
.text:00403997                 call    _errno
.text:0040399C                 test    esi, esi
.text:0040399E                 mov     ebx, [eax]
.text:004039A0                 jz      short loc_4039AA
.text:004039A2                 mov     [esp+5Ch+Block], esi ; Block
.text:004039A5                 call    free
.text:004039AA
.text:004039AA loc_4039AA:                             ; CODE XREF: sub_4035B0+3F0↑j
.text:004039AA                 mov     ecx, [esp+5Ch+var_14]
.text:004039AE                 mov     [esp+5Ch+Block], ecx ; void *
.text:004039B1                 call    sub_403ED0
.text:004039B6                 mov     edi, [esp+5Ch+var_24]
.text:004039BA                 mov     [esp+5Ch+Block], edi ; void *
.text:004039BD                 call    sub_40CC80
.text:004039C2                 or      dword ptr [ebp+2Ch], 2000h
.text:004039C9                 mov     esi, [esp+5Ch+var_1C]
.text:004039CD                 mov     word ptr [esi+44h], 7
.text:004039D3                 call    _errno
.text:004039D8                 mov     [eax], ebx
.text:004039DA                 jmp     short loc_40398D
.text:004039DC ; ---------------------------------------------------------------------------
.text:004039DC
.text:004039DC loc_4039DC:                             ; CODE XREF: sub_4035B0+11C↑j
.text:004039DC                 cmp     byte ptr [edi+0Dh], 0
.text:004039E0                 jz      loc_4036A0
.text:004039E6                 mov     edx, [edi+0Ch]
.text:004039E9                 and     edx, 0FFFF00h
.text:004039EF                 cmp     edx, 2E00h
.text:004039F5                 jnz     loc_4036D2
.text:004039FB                 jmp     loc_4036A0
.text:00403A00 ; ---------------------------------------------------------------------------
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_4035B0+10C↑j
.text:00403A00                 mov     ecx, [esp+5Ch+var_24]
.text:00403A04                 mov     [esp+5Ch+Block], ecx ; void *
.text:00403A07                 call    sub_40CC80
.text:00403A0C
.text:00403A0C loc_403A0C:                             ; CODE XREF: sub_4035B0+F6↑j
.text:00403A0C                 cmp     [esp+5Ch+var_2E], 0
.text:00403A11                 jnz     loc_403B05
.text:00403A17
.text:00403A17 loc_403A17:                             ; CODE XREF: sub_4035B0+565↓j
.text:00403A17                 test    byte ptr [ebp+2Ch], 4
.text:00403A1B                 jz      short loc_403A39
.text:00403A1D                 mov     eax, [esp+5Ch+var_40]
.text:00403A21                 cmp     eax, [ebp+20h]
.text:00403A24                 jz      short loc_403A2E
.text:00403A26                 mov     edx, [esp+5Ch+var_18]
.text:00403A2A                 test    edx, edx
.text:00403A2C                 jnz     short loc_403A32
.text:00403A2E
.text:00403A2E loc_403A2E:                             ; CODE XREF: sub_4035B0+474↑j
.text:00403A2E                 dec     [esp+5Ch+var_48]
.text:00403A32
.text:00403A32 loc_403A32:                             ; CODE XREF: sub_4035B0+47C↑j
.text:00403A32                 mov     esi, [esp+5Ch+var_48]
.text:00403A36                 mov     byte ptr [esi], 0
.text:00403A39
.text:00403A39 loc_403A39:                             ; CODE XREF: sub_4035B0+46B↑j
.text:00403A39                 cmp     [esp+5Ch+var_2D], 0
.text:00403A3E                 jz      short loc_403A64
.text:00403A40                 cmp     [esp+5Ch+arg_4], 1
.text:00403A45                 jz      short loc_403A4F
.text:00403A47                 mov     edi, [esp+5Ch+var_18]
.text:00403A4B                 test    edi, edi
.text:00403A4D                 jnz     short loc_403A6C
.text:00403A4F
.text:00403A4F loc_403A4F:                             ; CODE XREF: sub_4035B0+495↑j
.text:00403A4F                 mov     ebx, [esp+5Ch+var_1C]
.text:00403A53                 mov     ecx, [ebx+3Ch]
.text:00403A56                 test    ecx, ecx
.text:00403A58                 jnz     loc_403AE0
.text:00403A5E                 test    byte ptr [ebp+2Ch], 4
.text:00403A62                 jz      short loc_403ABB
.text:00403A64
.text:00403A64 loc_403A64:                             ; CODE XREF: sub_4035B0+48E↑j
.text:00403A64                                         ; sub_4035B0+518↓j
.text:00403A64                 mov     ebx, [esp+5Ch+var_18]
.text:00403A68                 test    ebx, ebx
.text:00403A6A                 jz      short loc_403AA1
.text:00403A6C
.text:00403A6C loc_403A6C:                             ; CODE XREF: sub_4035B0+49D↑j
.text:00403A6C                 mov     eax, [ebp+28h]
.text:00403A6F                 test    eax, eax
.text:00403A71                 jz      short loc_403A7A
.text:00403A73                 cmp     [esp+5Ch+var_18], 1
.text:00403A78                 ja      short loc_403A83
.text:00403A7A
.text:00403A7A loc_403A7A:                             ; CODE XREF: sub_4035B0+4C1↑j
.text:00403A7A                                         ; sub_4035B0+4EF↓j
.text:00403A7A                 mov     eax, [esp+5Ch+var_14]
.text:00403A7E                 jmp     loc_40398F
.text:00403A83 ; ---------------------------------------------------------------------------
.text:00403A83
.text:00403A83 loc_403A83:                             ; CODE XREF: sub_4035B0+4C8↑j
.text:00403A83                 mov     [esp+5Ch+Block], ebp ; int
.text:00403A86                 mov     ebx, [esp+5Ch+var_18]
.text:00403A8A                 mov     edi, [esp+5Ch+var_14]
.text:00403A8E                 mov     [esp+5Ch+Size], ebx ; void *
.text:00403A92                 mov     [esp+5Ch+Src], edi ; int
.text:00403A96                 call    sub_403D60
.text:00403A9B                 mov     [esp+5Ch+var_14], eax
.text:00403A9F                 jmp     short loc_403A7A
.text:00403AA1 ; ---------------------------------------------------------------------------
.text:00403AA1
.text:00403AA1 loc_403AA1:                             ; CODE XREF: sub_4035B0+4BA↑j
.text:00403AA1                 cmp     [esp+5Ch+arg_4], 3
.text:00403AA6                 jnz     loc_40398D
.text:00403AAC                 mov     ebp, [esp+5Ch+var_1C]
.text:00403AB0                 mov     word ptr [ebp+44h], 6
.text:00403AB6                 jmp     loc_40398D
.text:00403ABB ; ---------------------------------------------------------------------------
.text:00403ABB
.text:00403ABB loc_403ABB:                             ; CODE XREF: sub_4035B0+4B2↑j
.text:00403ABB                 mov     edx, [ebp+1Ch]
.text:00403ABE                 mov     [esp+5Ch+Block], edx
.text:00403AC1                 call    sub_406550
.text:00403AC6
.text:00403AC6 loc_403AC6:                             ; CODE XREF: sub_4035B0+553↓j
.text:00403AC6                 test    eax, eax
.text:00403AC8                 jz      short loc_403A64
.text:00403ACA                 or      dword ptr [ebp+2Ch], 2000h
.text:00403AD1                 mov     edi, [esp+5Ch+var_1C]
.text:00403AD5                 mov     word ptr [edi+44h], 7
.text:00403ADB                 jmp     loc_40398D
.text:00403AE0 ; ---------------------------------------------------------------------------
.text:00403AE0
.text:00403AE0 loc_403AE0:                             ; CODE XREF: sub_4035B0+4A8↑j
.text:00403AE0                 mov     [esp+5Ch+FileName], offset byte_402DC3 ; FileName
.text:00403AE8                 mov     eax, [esp+5Ch+var_1C]
.text:00403AEC                 mov     [esp+5Ch+Size], 0FFFFFFFFh ; int
.text:00403AF4                 mov     esi, [eax+4]
.text:00403AF7                 mov     [esp+5Ch+Block], ebp ; int
.text:00403AFA                 mov     [esp+5Ch+Src], esi ; int
.text:00403AFE                 call    sub_404040
.text:00403B03                 jmp     short loc_403AC6
.text:00403B05 ; ---------------------------------------------------------------------------
.text:00403B05
.text:00403B05 loc_403B05:                             ; CODE XREF: sub_4035B0+461↑j
.text:00403B05                 mov     [esp+5Ch+Block], ebp
.text:00403B08                 mov     ebx, [esp+5Ch+var_14]
.text:00403B0C                 mov     [esp+5Ch+Src], ebx
.text:00403B10                 call    sub_403F90
.text:00403B15                 jmp     loc_403A17
.text:00403B1A ; ---------------------------------------------------------------------------
.text:00403B1A
.text:00403B1A loc_403B1A:                             ; CODE XREF: sub_4035B0+9B↑j
.text:00403B1A                 mov     [esp+5Ch+var_48], 0
.text:00403B22                 jmp     loc_403662
.text:00403B27 ; ---------------------------------------------------------------------------
.text:00403B27
.text:00403B27 loc_403B27:                             ; CODE XREF: sub_4035B0+91↑j
.text:00403B27                 dec     edx
.text:00403B28                 mov     [esp+5Ch+var_40], edx
.text:00403B2C                 jmp     loc_403647
.text:00403B31 ; ---------------------------------------------------------------------------
.text:00403B31
.text:00403B31 loc_403B31:                             ; CODE XREF: sub_4035B0+60↑j
.text:00403B31                                         ; sub_4035B0+70↑j
.text:00403B31                 mov     [esp+5Ch+FileName], 0 ; FileName
.text:00403B39                 mov     edi, [esp+5Ch+var_24]
.text:00403B3D                 mov     edx, [esp+5Ch+var_1C]
.text:00403B41                 mov     esi, [edi]
.text:00403B43                 mov     [esp+5Ch+Src], edx ; int
.text:00403B47                 mov     [esp+5Ch+Block], ebp ; int
.text:00403B4A                 mov     [esp+5Ch+Size], esi ; int
.text:00403B4E                 call    sub_404040
.text:00403B53                 mov     [esp+5Ch+var_2D], 1
.text:00403B58                 test    eax, eax
.text:00403B5A                 jz      loc_403626
.text:00403B60                 mov     ecx, [esp+5Ch+var_38]
.text:00403B64                 test    ecx, ecx
.text:00403B66                 jz      short loc_403B6F
.text:00403B68                 cmp     [esp+5Ch+arg_4], 3
.text:00403B6D                 jz      short loc_403BA7
.text:00403B6F
.text:00403B6F loc_403B6F:                             ; CODE XREF: sub_4035B0+5B6↑j
.text:00403B6F                                         ; sub_4035B0+605↓j
.text:00403B6F                 mov     [esp+5Ch+var_2D], 0
.text:00403B74                 mov     ecx, [esp+5Ch+var_1C]
.text:00403B78                 movzx   ebx, word ptr [ecx+46h]
.text:00403B7C                 or      ebx, 1
.text:00403B7F                 mov     [ecx+46h], bx
.text:00403B83                 call    _errno
.text:00403B88                 mov     edi, [eax]
.text:00403B8A                 mov     esi, [esp+5Ch+var_24]
.text:00403B8E                 mov     [esp+5Ch+var_2C], edi
.text:00403B92                 mov     [esp+5Ch+Block], esi ; void *
.text:00403B95                 call    sub_40CC80
.text:00403B9A                 mov     [esp+5Ch+var_24], 0
.text:00403BA2                 jmp     loc_403626
.text:00403BA7 ; ---------------------------------------------------------------------------
.text:00403BA7
.text:00403BA7 loc_403BA7:                             ; CODE XREF: sub_4035B0+5BD↑j
.text:00403BA7                 call    _errno
.text:00403BAC                 mov     edx, [eax]
.text:00403BAE                 mov     ebx, [esp+5Ch+var_1C]
.text:00403BB2                 mov     [ebx+1Ch], edx
.text:00403BB5                 jmp     short loc_403B6F
.text:00403BB7 ; ---------------------------------------------------------------------------
.text:00403BB7
.text:00403BB7 loc_403BB7:                             ; CODE XREF: sub_4035B0+3F↑j
.text:00403BB7                 mov     ecx, [esp+5Ch+var_1C]
.text:00403BBB                 test    dl, 20h
.text:00403BBE                 mov     eax, [ecx+38h]
.text:00403BC1                 mov     [esp+5Ch+var_38], eax
.text:00403BC5                 jnz     short loc_403BCE
.text:00403BC7                 sub     eax, 2
.text:00403BCA                 mov     [esp+5Ch+var_38], eax
.text:00403BCE
.text:00403BCE loc_403BCE:                             ; CODE XREF: sub_4035B0+615↑j
.text:00403BCE                 mov     [esp+5Ch+var_39], 1
.text:00403BD3                 jmp     loc_403602
.text:00403BD8 ; ---------------------------------------------------------------------------
.text:00403BD8
.text:00403BD8 loc_403BD8:                             ; CODE XREF: sub_4035B0+2E↑j
.text:00403BD8                 mov     [esp+5Ch+var_38], 0
.text:00403BE0                 jmp     loc_4035FD
.text:00403BE5 ; ---------------------------------------------------------------------------
.text:00403BE5
.text:00403BE5 loc_403BE5:                             ; CODE XREF: sub_4035B0+23↑j
.text:00403BE5                 cmp     [esp+5Ch+arg_4], 3
.text:00403BEA                 jnz     loc_40398D
.text:00403BF0                 mov     edi, [esp+5Ch+var_1C]
.text:00403BF4                 mov     word ptr [edi+44h], 4
.text:00403BFA                 call    _errno
.text:00403BFF                 mov     esi, [eax]
.text:00403C01                 mov     ecx, [esp+5Ch+var_1C]
.text:00403C05                 mov     [ecx+1Ch], esi
.text:00403C08                 jmp     loc_40398D
.text:00403C08 sub_4035B0      endp
.text:00403C08
.text:00403C08 ; ---------------------------------------------------------------------------
.text:00403C0D                 align 10h
.text:00403C10
.text:00403C10 ; =============== S U B R O U T I N E =======================================
.text:00403C10
.text:00403C10
.text:00403C10 sub_403C10      proc near               ; CODE XREF: sub_4029C0+27C↑p
.text:00403C10                                         ; sub_402DD0+100↑p ...
.text:00403C10
.text:00403C10 var_1C          = dword ptr -1Ch
.text:00403C10 var_18          = dword ptr -18h
.text:00403C10 var_C           = dword ptr -0Ch
.text:00403C10 var_8           = dword ptr -8
.text:00403C10 var_4           = dword ptr -4
.text:00403C10 arg_0           = dword ptr  4
.text:00403C10 arg_4           = dword ptr  8
.text:00403C10 arg_8           = byte ptr  0Ch
.text:00403C10
.text:00403C10                 sub     esp, 1Ch
.text:00403C13                 mov     ecx, [esp+1Ch+arg_0]
.text:00403C17                 mov     [esp+1Ch+var_C], ebx
.text:00403C1B                 mov     [esp+1Ch+var_4], edi
.text:00403C1F                 mov     edi, [esp+1Ch+arg_4]
.text:00403C23                 mov     [esp+1Ch+var_8], esi
.text:00403C27                 test    byte ptr [ecx+2Ch], 2
.text:00403C2B                 lea     ebx, [edi+50h]
.text:00403C2E                 movzx   edx, [esp+1Ch+arg_8]
.text:00403C33                 jnz     short loc_403C3D
.text:00403C35                 test    dl, dl
.text:00403C37                 jz      loc_403D30
.text:00403C3D
.text:00403C3D loc_403C3D:                             ; CODE XREF: sub_403C10+23↑j
.text:00403C3D                 mov     [esp+1Ch+var_18], ebx ; int
.text:00403C41                 mov     edx, [edi+14h]
.text:00403C44                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00403C47                 call    sub_40BFA0
.text:00403C4C                 test    eax, eax
.text:00403C4E                 jnz     loc_403CE2
.text:00403C54
.text:00403C54 loc_403C54:                             ; CODE XREF: sub_403C10+131↓j
.text:00403C54                 mov     edx, [ebx]
.text:00403C56                 and     edx, 0F000h
.text:00403C5C                 cmp     edx, 4000h
.text:00403C62                 jz      short loc_403C90
.text:00403C64                 cmp     edx, 0A000h
.text:00403C6A                 mov     eax, 0Ch
.text:00403C6F                 jz      short loc_403C80
.text:00403C71                 xor     ecx, ecx
.text:00403C73                 cmp     edx, 8000h
.text:00403C79                 setz    cl
.text:00403C7C                 lea     eax, [ecx+ecx*4+3]
.text:00403C80
.text:00403C80 loc_403C80:                             ; CODE XREF: sub_403C10+5F↑j
.text:00403C80                                         ; sub_403C10+AC↓j ...
.text:00403C80                 mov     ebx, [esp+1Ch+var_C]
.text:00403C84                 mov     esi, [esp+1Ch+var_8]
.text:00403C88                 mov     edi, [esp+1Ch+var_4]
.text:00403C8C                 add     esp, 1Ch
.text:00403C8F                 retn
.text:00403C90 ; ---------------------------------------------------------------------------
.text:00403C90
.text:00403C90 loc_403C90:                             ; CODE XREF: sub_403C10+52↑j
.text:00403C90                 cmp     byte ptr [edi+0B8h], 2Eh ; '.'
.text:00403C97                 mov     esi, [ebx+10h]
.text:00403C9A                 mov     ecx, [ebx+14h]
.text:00403C9D                 mov     [edi+30h], esi
.text:00403CA0                 mov     [edi+34h], ecx
.text:00403CA3                 mov     edx, [ebx+8]
.text:00403CA6                 mov     esi, [ebx+0Ch]
.text:00403CA9                 mov     ecx, [ebx+18h]
.text:00403CAC                 mov     [edi+28h], edx
.text:00403CAF                 mov     [edi+2Ch], esi
.text:00403CB2                 mov     [edi+38h], ecx
.text:00403CB5                 jz      short loc_403CBE
.text:00403CB7
.text:00403CB7 loc_403CB7:                             ; CODE XREF: sub_403C10+C9↓j
.text:00403CB7                 mov     eax, 1
.text:00403CBC                 jmp     short loc_403C80
.text:00403CBE ; ---------------------------------------------------------------------------
.text:00403CBE
.text:00403CBE loc_403CBE:                             ; CODE XREF: sub_403C10+A5↑j
.text:00403CBE                 cmp     byte ptr [edi+0B9h], 0
.text:00403CC5                 jz      short loc_403CDB
.text:00403CC7                 mov     ebx, [edi+0B8h]
.text:00403CCD                 and     ebx, 0FFFF00h
.text:00403CD3                 cmp     ebx, 2E00h
.text:00403CD9                 jnz     short loc_403CB7
.text:00403CDB
.text:00403CDB loc_403CDB:                             ; CODE XREF: sub_403C10+B5↑j
.text:00403CDB                 mov     eax, 5
.text:00403CE0                 jmp     short loc_403C80
.text:00403CE2 ; ---------------------------------------------------------------------------
.text:00403CE2
.text:00403CE2 loc_403CE2:                             ; CODE XREF: sub_403C10+3E↑j
.text:00403CE2                 call    _errno
.text:00403CE7                 mov     esi, [eax]
.text:00403CE9                 mov     [esp+1Ch+var_18], ebx
.text:00403CED                 mov     ecx, [edi+14h]
.text:00403CF0                 mov     [esp+1Ch+var_1C], ecx
.text:00403CF3                 call    sub_40B070
.text:00403CF8                 test    eax, eax
.text:00403CFA                 jz      short loc_403D15
.text:00403CFC                 mov     [edi+1Ch], esi
.text:00403CFF
.text:00403CFF loc_403CFF:                             ; CODE XREF: sub_403C10+141↓j
.text:00403CFF                 cld
.text:00403D00                 xor     eax, eax
.text:00403D02                 mov     ecx, 1Ah
.text:00403D07                 mov     edi, ebx
.text:00403D09                 rep stosd
.text:00403D0B                 mov     eax, 0Ah
.text:00403D10                 jmp     loc_403C80
.text:00403D15 ; ---------------------------------------------------------------------------
.text:00403D15
.text:00403D15 loc_403D15:                             ; CODE XREF: sub_403C10+EA↑j
.text:00403D15                 call    _errno
.text:00403D1A                 mov     dword ptr [eax], 0
.text:00403D20                 mov     eax, 0Dh
.text:00403D25                 jmp     loc_403C80
.text:00403D25 ; ---------------------------------------------------------------------------
.text:00403D2A                 align 10h
.text:00403D30
.text:00403D30 loc_403D30:                             ; CODE XREF: sub_403C10+27↑j
.text:00403D30                 mov     [esp+1Ch+var_18], ebx
.text:00403D34                 mov     esi, [edi+14h]
.text:00403D37                 mov     [esp+1Ch+var_1C], esi
.text:00403D3A                 call    sub_40B070
.text:00403D3F                 test    eax, eax
.text:00403D41                 jz      loc_403C54
.text:00403D47                 call    _errno
.text:00403D4C                 mov     edx, [eax]
.text:00403D4E                 mov     [edi+1Ch], edx
.text:00403D51                 jmp     short loc_403CFF
.text:00403D51 sub_403C10      endp
.text:00403D51
.text:00403D51 ; ---------------------------------------------------------------------------
.text:00403D53                 align 10h
.text:00403D60
.text:00403D60 ; =============== S U B R O U T I N E =======================================
.text:00403D60
.text:00403D60
.text:00403D60 ; int __cdecl sub_403D60(int, int, void *)
.text:00403D60 sub_403D60      proc near               ; CODE XREF: sub_4029C0+21A↑p
.text:00403D60                                         ; sub_4035B0+4E6↑p
.text:00403D60
.text:00403D60 Block           = dword ptr -1Ch
.text:00403D60 Size            = dword ptr -18h
.text:00403D60 var_14          = dword ptr -14h
.text:00403D60 var_10          = dword ptr -10h
.text:00403D60 arg_0           = dword ptr  4
.text:00403D60 arg_4           = dword ptr  8
.text:00403D60 arg_8           = dword ptr  0Ch
.text:00403D60
.text:00403D60                 push    edi
.text:00403D61                 push    esi
.text:00403D62                 push    ebx
.text:00403D63                 sub     esp, 10h
.text:00403D66                 mov     edi, [esp+1Ch+arg_0]
.text:00403D6A                 mov     ebx, [esp+1Ch+arg_8]
.text:00403D6E                 mov     esi, [esp+1Ch+arg_4]
.text:00403D72                 cmp     ebx, [edi+24h]
.text:00403D75                 jbe     short loc_403DB0
.text:00403D77                 lea     eax, [ebx+28h]
.text:00403D7A                 cmp     eax, 3FFFFFFFh
.text:00403D7F                 mov     [edi+24h], eax
.text:00403D82                 ja      loc_403E22
.text:00403D88                 shl     eax, 2
.text:00403D8B                 mov     [esp+1Ch+Size], eax ; Size
.text:00403D8F                 mov     edx, [edi+8]
.text:00403D92                 mov     [esp+1Ch+Block], edx ; Block
.text:00403D95                 call    realloc
.text:00403D9A                 test    eax, eax
.text:00403D9C                 jz      loc_403E22
.text:00403DA2                 mov     [edi+8], eax
.text:00403DA5                 lea     esi, [esi+0]
.text:00403DA9                 lea     edi, [edi+0]
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403D60+15↑j
.text:00403DB0                 mov     edx, [edi+8]
.text:00403DB3                 test    esi, esi
.text:00403DB5                 mov     eax, esi
.text:00403DB7                 mov     ecx, edx
.text:00403DB9                 jz      short loc_403DCC
.text:00403DBB                 nop
.text:00403DBC                 lea     esi, [esi+0]
.text:00403DC0
.text:00403DC0 loc_403DC0:                             ; CODE XREF: sub_403D60+6A↓j
.text:00403DC0                 mov     [edx], eax
.text:00403DC2                 mov     eax, [eax+8]
.text:00403DC5                 add     edx, 4
.text:00403DC8                 test    eax, eax
.text:00403DCA                 jnz     short loc_403DC0
.text:00403DCC
.text:00403DCC loc_403DCC:                             ; CODE XREF: sub_403D60+59↑j
.text:00403DCC                 mov     esi, [edi+28h]
.text:00403DCF                 mov     [esp+1Ch+Size], ebx ; void *
.text:00403DD3                 mov     [esp+1Ch+Block], ecx ; Block
.text:00403DD6                 mov     [esp+1Ch+var_10], esi ; int
.text:00403DDA                 mov     [esp+1Ch+var_14], 4 ; size_t
.text:00403DE2                 call    sub_40CB00
.text:00403DE7                 mov     edx, [edi+8]
.text:00403DEA                 dec     ebx
.text:00403DEB                 mov     esi, [edx]
.text:00403DED                 mov     ecx, esi
.text:00403DEF                 jz      short loc_403E12
.text:00403DF1                 jmp     short loc_403E00
.text:00403DF1 ; ---------------------------------------------------------------------------
.text:00403DF3                 align 10h
.text:00403E00
.text:00403E00 loc_403E00:                             ; CODE XREF: sub_403D60+91↑j
.text:00403E00                                         ; sub_403D60+AE↓j
.text:00403E00                 mov     edi, [edx+4]
.text:00403E03                 add     edx, 4
.text:00403E06                 dec     ebx
.text:00403E07                 mov     [ecx+8], edi
.text:00403E0A                 jz      short loc_403E10
.text:00403E0C                 mov     ecx, [edx]
.text:00403E0E                 jmp     short loc_403E00
.text:00403E10 ; ---------------------------------------------------------------------------
.text:00403E10
.text:00403E10 loc_403E10:                             ; CODE XREF: sub_403D60+AA↑j
.text:00403E10                 mov     ecx, [edx]
.text:00403E12
.text:00403E12 loc_403E12:                             ; CODE XREF: sub_403D60+8F↑j
.text:00403E12                 mov     dword ptr [ecx+8], 0
.text:00403E19
.text:00403E19 loc_403E19:                             ; CODE XREF: sub_403D60+DB↓j
.text:00403E19                 add     esp, 10h
.text:00403E1C                 mov     eax, esi
.text:00403E1E                 pop     ebx
.text:00403E1F                 pop     esi
.text:00403E20                 pop     edi
.text:00403E21                 retn
.text:00403E22 ; ---------------------------------------------------------------------------
.text:00403E22
.text:00403E22 loc_403E22:                             ; CODE XREF: sub_403D60+22↑j
.text:00403E22                                         ; sub_403D60+3C↑j
.text:00403E22                 mov     edx, [edi+8]
.text:00403E25                 mov     [esp+1Ch+Block], edx ; Block
.text:00403E28                 call    free
.text:00403E2D                 mov     dword ptr [edi+8], 0
.text:00403E34                 mov     dword ptr [edi+24h], 0
.text:00403E3B                 jmp     short loc_403E19
.text:00403E3B sub_403D60      endp
.text:00403E3B
.text:00403E3B ; ---------------------------------------------------------------------------
.text:00403E3D                 align 10h
.text:00403E40
.text:00403E40 ; =============== S U B R O U T I N E =======================================
.text:00403E40
.text:00403E40
.text:00403E40 ; int __cdecl sub_403E40(int, void *, size_t)
.text:00403E40 sub_403E40      proc near               ; CODE XREF: sub_4029C0+9D↑p
.text:00403E40                                         ; sub_4029C0+F4↑p ...
.text:00403E40
.text:00403E40 Size            = dword ptr -1Ch
.text:00403E40 Src             = dword ptr -18h
.text:00403E40 var_14          = dword ptr -14h
.text:00403E40 var_8           = dword ptr -8
.text:00403E40 var_4           = dword ptr -4
.text:00403E40 arg_0           = dword ptr  4
.text:00403E40 arg_4           = dword ptr  8
.text:00403E40 arg_8           = dword ptr  0Ch
.text:00403E40
.text:00403E40                 sub     esp, 1Ch
.text:00403E43                 mov     [esp+1Ch+var_4], esi
.text:00403E47                 mov     esi, [esp+1Ch+arg_8]
.text:00403E4B                 mov     [esp+1Ch+var_8], ebx
.text:00403E4F                 lea     edx, [esi+0C0h]
.text:00403E55                 mov     [esp+1Ch+Size], edx ; Size
.text:00403E58                 call    malloc
.text:00403E5D                 mov     ebx, eax
.text:00403E5F                 xor     eax, eax
.text:00403E61                 test    ebx, ebx
.text:00403E63                 jz      short loc_403EB8
.text:00403E65                 mov     [esp+1Ch+var_14], esi ; Size
.text:00403E69                 mov     edx, [esp+1Ch+arg_4]
.text:00403E6D                 lea     ecx, [ebx+0B8h]
.text:00403E73                 mov     [esp+1Ch+Size], ecx ; void *
.text:00403E76                 mov     [esp+1Ch+Src], edx ; Src
.text:00403E7A                 call    memmove
.text:00403E7F                 mov     [ebx+40h], esi
.text:00403E82                 mov     ecx, [esp+1Ch+arg_0]
.text:00403E86                 xor     edx, edx
.text:00403E88                 mov     [esi+ebx+0B8h], dl
.text:00403E8F                 mov     eax, ebx
.text:00403E91                 mov     dword ptr [ebx+1Ch], 0
.text:00403E98                 mov     edx, [ecx+18h]
.text:00403E9B                 mov     word ptr [ebx+46h], 0
.text:00403EA1                 mov     word ptr [ebx+48h], 3
.text:00403EA7                 mov     [ebx+18h], edx
.text:00403EAA                 mov     dword ptr [ebx+0Ch], 0
.text:00403EB1                 mov     dword ptr [ebx+10h], 0
.text:00403EB8
.text:00403EB8 loc_403EB8:                             ; CODE XREF: sub_403E40+23↑j
.text:00403EB8                 mov     ebx, [esp+1Ch+var_8]
.text:00403EBC                 mov     esi, [esp+1Ch+var_4]
.text:00403EC0                 add     esp, 1Ch
.text:00403EC3                 retn
.text:00403EC3 sub_403E40      endp
.text:00403EC3
.text:00403EC3 ; ---------------------------------------------------------------------------
.text:00403EC4                 align 10h
.text:00403ED0
.text:00403ED0 ; =============== S U B R O U T I N E =======================================
.text:00403ED0
.text:00403ED0
.text:00403ED0 ; int __cdecl sub_403ED0(void *)
.text:00403ED0 sub_403ED0      proc near               ; CODE XREF: sub_4029C0+1BA↑p
.text:00403ED0                                         ; sub_402CD0+E9↑p ...
.text:00403ED0
.text:00403ED0 Block           = dword ptr -0Ch
.text:00403ED0 arg_0           = dword ptr  4
.text:00403ED0
.text:00403ED0                 push    ebx
.text:00403ED1                 sub     esp, 8
.text:00403ED4                 mov     ebx, [esp+0Ch+arg_0]
.text:00403ED8                 test    ebx, ebx
.text:00403EDA                 mov     eax, ebx
.text:00403EDC                 jz      short loc_403EF1
.text:00403EDE                 mov     esi, esi
.text:00403EE0
.text:00403EE0 loc_403EE0:                             ; CODE XREF: sub_403ED0+1F↓j
.text:00403EE0                 mov     ebx, [ebx+8]
.text:00403EE3                 mov     [esp+0Ch+Block], eax ; Block
.text:00403EE6                 call    free
.text:00403EEB                 test    ebx, ebx
.text:00403EED                 mov     eax, ebx
.text:00403EEF                 jnz     short loc_403EE0
.text:00403EF1
.text:00403EF1 loc_403EF1:                             ; CODE XREF: sub_403ED0+C↑j
.text:00403EF1                 add     esp, 8
.text:00403EF4                 pop     ebx
.text:00403EF5                 retn
.text:00403EF5 sub_403ED0      endp
.text:00403EF5
.text:00403EF5 ; ---------------------------------------------------------------------------
.text:00403EF6                 align 10h
.text:00403F00
.text:00403F00 ; =============== S U B R O U T I N E =======================================
.text:00403F00
.text:00403F00
.text:00403F00 sub_403F00      proc near               ; CODE XREF: sub_4029C0+7D↑p
.text:00403F00                                         ; sub_4035B0+1FB↑p
.text:00403F00
.text:00403F00 Block           = dword ptr -0Ch
.text:00403F00 Size            = dword ptr -8
.text:00403F00 var_4           = dword ptr -4
.text:00403F00 arg_0           = dword ptr  4
.text:00403F00 arg_4           = dword ptr  8
.text:00403F00
.text:00403F00                 sub     esp, 0Ch
.text:00403F03                 mov     ecx, [esp+0Ch+arg_4]
.text:00403F07                 mov     [esp+0Ch+var_4], ebx
.text:00403F0B                 mov     ebx, [esp+0Ch+arg_0]
.text:00403F0F                 mov     edx, [ebx+20h]
.text:00403F12                 mov     eax, edx
.text:00403F14                 add     eax, ecx
.text:00403F16                 add     eax, 100h
.text:00403F1B                 cmp     eax, edx
.text:00403F1D                 jnb     short loc_403F53
.text:00403F1F                 mov     eax, [ebx+18h]
.text:00403F22                 test    eax, eax
.text:00403F24                 jnz     short loc_403F42
.text:00403F26
.text:00403F26 loc_403F26:                             ; CODE XREF: sub_403F00+51↓j
.text:00403F26                 mov     dword ptr [ebx+18h], 0
.text:00403F2D                 call    _errno
.text:00403F32                 mov     dword ptr [eax], 26h ; '&'
.text:00403F38
.text:00403F38 loc_403F38:                             ; CODE XREF: sub_403F00+85↓j
.text:00403F38                 xor     eax, eax
.text:00403F3A
.text:00403F3A loc_403F3A:                             ; CODE XREF: sub_403F00+71↓j
.text:00403F3A                 mov     ebx, [esp+0Ch+var_4]
.text:00403F3E                 add     esp, 0Ch
.text:00403F41                 retn
.text:00403F42 ; ---------------------------------------------------------------------------
.text:00403F42
.text:00403F42 loc_403F42:                             ; CODE XREF: sub_403F00+24↑j
.text:00403F42                 mov     [esp+0Ch+Block], eax ; Block
.text:00403F45                 call    free
.text:00403F4A                 mov     dword ptr [ebx+18h], 0
.text:00403F51                 jmp     short loc_403F26
.text:00403F53 ; ---------------------------------------------------------------------------
.text:00403F53
.text:00403F53 loc_403F53:                             ; CODE XREF: sub_403F00+1D↑j
.text:00403F53                 mov     [ebx+20h], eax
.text:00403F56                 mov     [esp+0Ch+Size], eax ; Size
.text:00403F5A                 mov     edx, [ebx+18h]
.text:00403F5D                 mov     [esp+0Ch+Block], edx ; Block
.text:00403F60                 call    realloc
.text:00403F65                 test    eax, eax
.text:00403F67                 jz      short loc_403F73
.text:00403F69                 mov     [ebx+18h], eax
.text:00403F6C                 mov     eax, 1
.text:00403F71                 jmp     short loc_403F3A
.text:00403F73 ; ---------------------------------------------------------------------------
.text:00403F73
.text:00403F73 loc_403F73:                             ; CODE XREF: sub_403F00+67↑j
.text:00403F73                 mov     edx, [ebx+18h]
.text:00403F76                 mov     [esp+0Ch+Block], edx ; Block
.text:00403F79                 call    free
.text:00403F7E                 mov     dword ptr [ebx+18h], 0
.text:00403F85                 jmp     short loc_403F38
.text:00403F85 sub_403F00      endp
.text:00403F85
.text:00403F85 ; ---------------------------------------------------------------------------
.text:00403F87                 align 10h
.text:00403F90
.text:00403F90 ; =============== S U B R O U T I N E =======================================
.text:00403F90
.text:00403F90
.text:00403F90 sub_403F90      proc near               ; CODE XREF: sub_4035B0+560↑p
.text:00403F90
.text:00403F90 arg_0           = dword ptr  4
.text:00403F90 arg_4           = dword ptr  8
.text:00403F90
.text:00403F90                 push    ebx
.text:00403F91                 mov     ecx, [esp+4+arg_0]
.text:00403F95                 mov     edx, [ecx+4]
.text:00403F98                 mov     ebx, [ecx+18h]
.text:00403F9B                 test    edx, edx
.text:00403F9D                 jz      short loc_403FC2
.text:00403F9F                 nop
.text:00403FA0
.text:00403FA0 loc_403FA0:                             ; CODE XREF: sub_403F90+30↓j
.text:00403FA0                 mov     ecx, [edx+14h]
.text:00403FA3                 lea     eax, [edx+0B8h]
.text:00403FA9                 cmp     ecx, eax
.text:00403FAB                 jz      short loc_403FB8
.text:00403FAD                 mov     eax, [edx+18h]
.text:00403FB0                 sub     ecx, eax
.text:00403FB2                 lea     eax, [ecx+ebx]
.text:00403FB5                 mov     [edx+14h], eax
.text:00403FB8
.text:00403FB8 loc_403FB8:                             ; CODE XREF: sub_403F90+1B↑j
.text:00403FB8                 mov     [edx+18h], ebx
.text:00403FBB                 mov     edx, [edx+8]
.text:00403FBE                 test    edx, edx
.text:00403FC0                 jnz     short loc_403FA0
.text:00403FC2
.text:00403FC2 loc_403FC2:                             ; CODE XREF: sub_403F90+D↑j
.text:00403FC2                 mov     edx, [esp+4+arg_4]
.text:00403FC6                 mov     ecx, [edx+3Ch]
.text:00403FC9                 test    ecx, ecx
.text:00403FCB                 js      short loc_403FFE
.text:00403FCD                 lea     esi, [esi+0]
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; CODE XREF: sub_403F90+6C↓j
.text:00403FD0                 mov     ecx, [edx+14h]
.text:00403FD3                 lea     eax, [edx+0B8h]
.text:00403FD9                 cmp     ecx, eax
.text:00403FDB                 jz      short loc_403FE8
.text:00403FDD                 mov     eax, [edx+18h]
.text:00403FE0                 sub     ecx, eax
.text:00403FE2                 lea     eax, [ecx+ebx]
.text:00403FE5                 mov     [edx+14h], eax
.text:00403FE8
.text:00403FE8 loc_403FE8:                             ; CODE XREF: sub_403F90+4B↑j
.text:00403FE8                 mov     [edx+18h], ebx
.text:00403FEB                 mov     eax, [edx+8]
.text:00403FEE                 test    eax, eax
.text:00403FF0                 jnz     short loc_403FF5
.text:00403FF2                 mov     eax, [edx+4]
.text:00403FF5
.text:00403FF5 loc_403FF5:                             ; CODE XREF: sub_403F90+60↑j
.text:00403FF5                 mov     ecx, [eax+3Ch]
.text:00403FF8                 mov     edx, eax
.text:00403FFA                 test    ecx, ecx
.text:00403FFC                 jns     short loc_403FD0
.text:00403FFE
.text:00403FFE loc_403FFE:                             ; CODE XREF: sub_403F90+3B↑j
.text:00403FFE                 pop     ebx
.text:00403FFF                 retn
.text:00403FFF sub_403F90      endp
.text:00403FFF
.text:00404000
.text:00404000 ; =============== S U B R O U T I N E =======================================
.text:00404000
.text:00404000
.text:00404000 sub_404000      proc near               ; CODE XREF: sub_4029C0+61↑p
.text:00404000                                         ; sub_4029C0+2F3↑p
.text:00404000
.text:00404000 Str             = dword ptr -0Ch
.text:00404000 arg_0           = dword ptr  4
.text:00404000
.text:00404000                 push    esi
.text:00404001                 xor     esi, esi
.text:00404003                 push    ebx
.text:00404004                 sub     esp, 4
.text:00404007                 mov     ebx, [esp+0Ch+arg_0]
.text:0040400B                 mov     eax, [ebx]
.text:0040400D                 test    eax, eax
.text:0040400F                 jnz     short loc_404018
.text:00404011
.text:00404011 loc_404011:                             ; CODE XREF: sub_404000+2F↓j
.text:00404011                 pop     edx
.text:00404012                 lea     eax, [esi+1]
.text:00404015                 pop     ebx
.text:00404016                 pop     esi
.text:00404017                 retn
.text:00404018 ; ---------------------------------------------------------------------------
.text:00404018
.text:00404018 loc_404018:                             ; CODE XREF: sub_404000+F↑j
.text:00404018                                         ; sub_404000+2D↓j
.text:00404018                 mov     [esp+0Ch+Str], eax ; Str
.text:0040401B                 call    strlen
.text:00404020                 cmp     eax, esi
.text:00404022                 jbe     short loc_404026
.text:00404024                 mov     esi, eax
.text:00404026
.text:00404026 loc_404026:                             ; CODE XREF: sub_404000+22↑j
.text:00404026                 add     ebx, 4
.text:00404029                 mov     eax, [ebx]
.text:0040402B                 test    eax, eax
.text:0040402D                 jnz     short loc_404018
.text:0040402F                 jmp     short loc_404011
.text:0040402F sub_404000      endp
.text:0040402F
.text:00404031 ; ---------------------------------------------------------------------------
.text:00404031                 jmp     short sub_404040
.text:00404031 ; ---------------------------------------------------------------------------
.text:00404033                 align 10h
.text:00404040
.text:00404040 ; =============== S U B R O U T I N E =======================================
.text:00404040
.text:00404040
.text:00404040 ; int __cdecl sub_404040(int, int, int, char *FileName)
.text:00404040 sub_404040      proc near               ; CODE XREF: sub_402DD0+3B7↑p
.text:00404040                                         ; sub_402DD0+546↑p ...
.text:00404040
.text:00404040 FileHandle      = dword ptr -9Ch
.text:00404040 OpenFlag        = dword ptr -98h
.text:00404040 var_8C          = byte ptr -8Ch
.text:00404040 var_84          = dword ptr -84h
.text:00404040 var_80          = dword ptr -80h
.text:00404040 var_7C          = dword ptr -7Ch
.text:00404040 var_78          = dword ptr -78h
.text:00404040 var_10          = dword ptr -10h
.text:00404040 var_C           = dword ptr -0Ch
.text:00404040 var_8           = dword ptr -8
.text:00404040 var_4           = dword ptr -4
.text:00404040 arg_0           = dword ptr  4
.text:00404040 arg_4           = dword ptr  8
.text:00404040 arg_8           = dword ptr  0Ch
.text:00404040 FileName        = dword ptr  10h
.text:00404040
.text:00404040                 sub     esp, 9Ch
.text:00404046                 mov     edx, [esp+9Ch+arg_0]
.text:0040404D                 mov     [esp+9Ch+var_C], esi
.text:00404054                 mov     esi, [esp+9Ch+FileName]
.text:0040405B                 mov     [esp+9Ch+var_8], edi
.text:00404062                 mov     [esp+9Ch+var_4], ebp
.text:00404069                 mov     ebp, [esp+9Ch+arg_8]
.text:00404070                 mov     [esp+9Ch+var_10], ebx
.text:00404077                 test    byte ptr [edx+2Ch], 4
.text:0040407B                 mov     edi, ebp
.text:0040407D                 jz      short loc_4040A4
.text:0040407F                 xor     eax, eax
.text:00404081
.text:00404081 loc_404081:                             ; CODE XREF: sub_404040+E7↓j
.text:00404081                                         ; sub_404040+125↓j
.text:00404081                 mov     ebx, [esp+9Ch+var_10]
.text:00404088                 mov     esi, [esp+9Ch+var_C]
.text:0040408F                 mov     edi, [esp+9Ch+var_8]
.text:00404096                 mov     ebp, [esp+9Ch+var_4]
.text:0040409D                 add     esp, 9Ch
.text:004040A3                 retn
.text:004040A4 ; ---------------------------------------------------------------------------
.text:004040A4
.text:004040A4 loc_4040A4:                             ; CODE XREF: sub_404040+3D↑j
.text:004040A4                 test    ebp, ebp
.text:004040A6                 js      loc_404142
.text:004040AC
.text:004040AC loc_4040AC:                             ; CODE XREF: sub_404040+11F↓j
.text:004040AC                 mov     [esp+9Ch+FileHandle], edi
.text:004040AF                 lea     edx, [esp+9Ch+var_8C]
.text:004040B3                 mov     ebx, 0FFFFFFFFh
.text:004040B8                 mov     [esp+9Ch+OpenFlag], edx
.text:004040BC                 call    sub_409220
.text:004040C1                 test    eax, eax
.text:004040C3                 jnz     short loc_404113
.text:004040C5                 mov     esi, [esp+9Ch+arg_4]
.text:004040CC                 mov     eax, [esp+9Ch+var_7C]
.text:004040D0                 mov     edx, [esp+9Ch+var_78]
.text:004040D4                 mov     ebx, [esi+34h]
.text:004040D7                 mov     ecx, [esi+30h]
.text:004040DA                 mov     esi, ebx
.text:004040DC                 xor     esi, edx
.text:004040DE                 xor     eax, ecx
.text:004040E0                 or      esi, eax
.text:004040E2                 jnz     short loc_404103
.text:004040E4                 mov     edx, [esp+9Ch+arg_4]
.text:004040EB                 mov     eax, [esp+9Ch+var_84]
.text:004040EF                 mov     ebx, [edx+2Ch]
.text:004040F2                 mov     ecx, [edx+28h]
.text:004040F5                 mov     edx, [esp+9Ch+var_80]
.text:004040F9                 mov     esi, ebx
.text:004040FB                 xor     eax, ecx
.text:004040FD                 xor     esi, edx
.text:004040FF                 or      esi, eax
.text:00404101                 jz      short loc_404136
.text:00404103
.text:00404103 loc_404103:                             ; CODE XREF: sub_404040+A2↑j
.text:00404103                 call    _errno
.text:00404108                 mov     dword ptr [eax], 2
.text:0040410E                 mov     ebx, 0FFFFFFFFh
.text:00404113
.text:00404113 loc_404113:                             ; CODE XREF: sub_404040+83↑j
.text:00404113                                         ; sub_404040+100↓j
.text:00404113                 call    _errno
.text:00404118                 test    ebp, ebp
.text:0040411A                 mov     esi, [eax]
.text:0040411C                 js      short loc_40412C
.text:0040411E
.text:0040411E loc_40411E:                             ; CODE XREF: sub_404040+F4↓j
.text:0040411E                 call    _errno
.text:00404123                 mov     [eax], esi
.text:00404125                 mov     eax, ebx
.text:00404127                 jmp     loc_404081
.text:0040412C ; ---------------------------------------------------------------------------
.text:0040412C
.text:0040412C loc_40412C:                             ; CODE XREF: sub_404040+DC↑j
.text:0040412C                 mov     [esp+9Ch+FileHandle], edi ; FileHandle
.text:0040412F                 call    _close
.text:00404134                 jmp     short loc_40411E
.text:00404136 ; ---------------------------------------------------------------------------
.text:00404136
.text:00404136 loc_404136:                             ; CODE XREF: sub_404040+C1↑j
.text:00404136                 mov     [esp+9Ch+FileHandle], edi
.text:00404139                 call    sub_406550
.text:0040413E                 mov     ebx, eax
.text:00404140                 jmp     short loc_404113
.text:00404142 ; ---------------------------------------------------------------------------
.text:00404142
.text:00404142 loc_404142:                             ; CODE XREF: sub_404040+66↑j
.text:00404142                 mov     [esp+9Ch+OpenFlag], 0 ; OpenFlag
.text:0040414A                 mov     [esp+9Ch+FileHandle], esi ; FileName
.text:0040414D                 call    _open
.text:00404152                 test    eax, eax
.text:00404154                 js      short loc_40416A
.text:00404156
.text:00404156 loc_404156:                             ; CODE XREF: sub_404040+13A↓j
.text:00404156                 mov     edi, eax
.text:00404158                 test    edi, edi
.text:0040415A                 mov     eax, 0FFFFFFFFh
.text:0040415F                 jns     loc_4040AC
.text:00404165                 jmp     loc_404081
.text:0040416A ; ---------------------------------------------------------------------------
.text:0040416A
.text:0040416A loc_40416A:                             ; CODE XREF: sub_404040+114↑j
.text:0040416A                 mov     [esp+9Ch+OpenFlag], 1 ; OpenFlag
.text:00404172                 mov     [esp+9Ch+FileHandle], esi ; FileName
.text:00404175                 call    _open
.text:0040417A                 jmp     short loc_404156
.text:0040417A sub_404040      endp
.text:0040417A
.text:0040417A ; ---------------------------------------------------------------------------
.text:0040417C                 align 10h
.text:00404180
.text:00404180 ; =============== S U B R O U T I N E =======================================
.text:00404180
.text:00404180
.text:00404180 sub_404180      proc near               ; CODE XREF: sub_402390+246↑p
.text:00404180
.text:00404180 arg_4           = dword ptr  8
.text:00404180 arg_8           = dword ptr  0Ch
.text:00404180
.text:00404180                 sub     esp, 0Ch
.text:00404183                 mov     edx, [esp+0Ch+arg_8]
.text:00404187                 cmp     edx, 4
.text:0040418A                 ja      short loc_4041A0
.text:0040418C                 mov     ecx, [esp+0Ch+arg_4]
.text:00404190                 xor     eax, eax
.text:00404192                 mov     [ecx+48h], dx
.text:00404196
.text:00404196 loc_404196:                             ; CODE XREF: sub_404180+30↓j
.text:00404196                 add     esp, 0Ch
.text:00404199                 retn
.text:00404199 ; ---------------------------------------------------------------------------
.text:0040419A                 align 10h
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: sub_404180+A↑j
.text:004041A0                 call    _errno
.text:004041A5                 mov     dword ptr [eax], 16h
.text:004041AB                 mov     eax, 1
.text:004041B0                 jmp     short loc_404196
.text:004041B0 sub_404180      endp
.text:004041B0
.text:004041B0 ; ---------------------------------------------------------------------------
.text:004041B2                 align 10h
.text:004041C0
.text:004041C0 ; =============== S U B R O U T I N E =======================================
.text:004041C0
.text:004041C0
.text:004041C0 sub_4041C0      proc near               ; DATA XREF: sub_4029C0+124↑o
.text:004041C0
.text:004041C0 var_11          = byte ptr -11h
.text:004041C0 var_10          = dword ptr -10h
.text:004041C0 var_C           = dword ptr -0Ch
.text:004041C0 var_8           = dword ptr -8
.text:004041C0 var_4           = dword ptr -4
.text:004041C0 arg_0           = dword ptr  4
.text:004041C0 arg_4           = dword ptr  8
.text:004041C0
.text:004041C0                 sub     esp, 14h
.text:004041C3                 mov     [esp+14h+var_8], edi
.text:004041C7                 mov     edi, [esp+14h+arg_0]
.text:004041CB                 mov     [esp+14h+var_4], ebp
.text:004041CF                 mov     ebp, [esp+14h+arg_4]
.text:004041D3                 mov     [esp+14h+var_C], esi
.text:004041D7                 mov     [esp+14h+var_10], ebx
.text:004041DB                 mov     ebx, [edi+0Ch]
.text:004041DE                 mov     [esp+14h+var_11], 0
.text:004041E3                 mov     ecx, [edi+8]
.text:004041E6                 mov     eax, [ebp+8]
.text:004041E9                 mov     edx, [ebp+0Ch]
.text:004041EC                 mov     esi, ebx
.text:004041EE                 xor     eax, ecx
.text:004041F0                 xor     esi, edx
.text:004041F2                 or      esi, eax
.text:004041F4                 jnz     short loc_404210
.text:004041F6                 mov     edx, [edi+4]
.text:004041F9                 mov     esi, [edi]
.text:004041FB                 mov     ecx, [ebp+4]
.text:004041FE                 mov     edi, [ebp+0]
.text:00404201                 mov     eax, edx
.text:00404203                 xor     eax, ecx
.text:00404205                 xor     edi, esi
.text:00404207                 or      eax, edi
.text:00404209                 jnz     short loc_404210
.text:0040420B                 mov     [esp+14h+var_11], 1
.text:00404210
.text:00404210 loc_404210:                             ; CODE XREF: sub_4041C0+34↑j
.text:00404210                                         ; sub_4041C0+49↑j
.text:00404210                 movzx   eax, [esp+14h+var_11]
.text:00404215                 mov     ebx, [esp+14h+var_10]
.text:00404219                 mov     esi, [esp+14h+var_C]
.text:0040421D                 mov     edi, [esp+14h+var_8]
.text:00404221                 mov     ebp, [esp+14h+var_4]
.text:00404225                 add     esp, 14h
.text:00404228                 retn
.text:00404228 sub_4041C0      endp
.text:00404228
.text:00404228 ; ---------------------------------------------------------------------------
.text:00404229                 align 10h
.text:00404230
.text:00404230 ; =============== S U B R O U T I N E =======================================
.text:00404230
.text:00404230
.text:00404230 sub_404230      proc near               ; DATA XREF: sub_4029C0+12C↑o
.text:00404230
.text:00404230 var_1C          = dword ptr -1Ch
.text:00404230 var_18          = dword ptr -18h
.text:00404230 var_14          = dword ptr -14h
.text:00404230 var_10          = dword ptr -10h
.text:00404230 arg_0           = dword ptr  4
.text:00404230 arg_4           = dword ptr  8
.text:00404230
.text:00404230                 sub     esp, 1Ch
.text:00404233                 mov     ecx, [esp+1Ch+arg_0]
.text:00404237                 mov     edx, [ecx+0Ch]
.text:0040423A                 mov     eax, [ecx+8]
.text:0040423D                 mov     ecx, [esp+1Ch+arg_4]
.text:00404241                 mov     [esp+1Ch+var_10], 0
.text:00404249                 mov     [esp+1Ch+var_1C], eax
.text:0040424C                 mov     [esp+1Ch+var_14], ecx
.text:00404250                 mov     [esp+1Ch+var_18], edx
.text:00404254                 call    sub_411E70
.text:00404259                 add     esp, 1Ch
.text:0040425C                 retn
.text:0040425C sub_404230      endp
.text:0040425C
.text:0040425C ; ---------------------------------------------------------------------------
.text:0040425D                 align 10h
.text:00404260
.text:00404260 ; =============== S U B R O U T I N E =======================================
.text:00404260
.text:00404260
.text:00404260 ; int __cdecl sub_404260(void *Block, int)
.text:00404260 sub_404260      proc near               ; CODE XREF: sub_402DD0+E3↑p
.text:00404260                                         ; sub_402DD0+228↑p ...
.text:00404260
.text:00404260 Size            = dword ptr -1Ch
.text:00404260 var_18          = dword ptr -18h
.text:00404260 var_10          = dword ptr -10h
.text:00404260 var_C           = dword ptr -0Ch
.text:00404260 var_8           = dword ptr -8
.text:00404260 var_4           = dword ptr -4
.text:00404260 Block           = dword ptr  4
.text:00404260 arg_4           = dword ptr  8
.text:00404260
.text:00404260                 sub     esp, 1Ch
.text:00404263                 mov     [esp+1Ch+var_C], esi
.text:00404267                 mov     esi, [esp+1Ch+Block]
.text:0040426B                 mov     [esp+1Ch+var_8], edi
.text:0040426F                 mov     edi, [esp+1Ch+arg_4]
.text:00404273                 mov     [esp+1Ch+var_10], ebx
.text:00404277                 mov     [esp+1Ch+var_4], ebp
.text:0040427B                 mov     eax, [esi+30h]
.text:0040427E                 test    eax, eax
.text:00404280                 jnz     short loc_4042C0
.text:00404282                 mov     edx, [esi+34h]
.text:00404285                 test    edx, edx
.text:00404287                 jnz     short loc_4042A0
.text:00404289
.text:00404289 loc_404289:                             ; CODE XREF: sub_404260+51↓j
.text:00404289                                         ; sub_404260+5B↓j ...
.text:00404289                 mov     ebx, [esp+1Ch+var_10]
.text:0040428D                 mov     esi, [esp+1Ch+var_C]
.text:00404291                 mov     edi, [esp+1Ch+var_8]
.text:00404295                 mov     ebp, [esp+1Ch+var_4]
.text:00404299                 add     esp, 1Ch
.text:0040429C                 retn
.text:0040429C ; ---------------------------------------------------------------------------
.text:0040429D                 align 10h
.text:004042A0
.text:004042A0 loc_4042A0:                             ; CODE XREF: sub_404260+27↑j
.text:004042A0                 mov     [esp+1Ch+Size], edx
.text:004042A3                 lea     ebp, [edi+50h]
.text:004042A6                 mov     [esp+1Ch+var_18], ebp
.text:004042AA                 call    sub_4065E0
.text:004042AF                 test    al, al
.text:004042B1                 jz      short loc_404289
.text:004042B3                 mov     [edi], edi
.text:004042B5                 mov     word ptr [edi+44h], 2
.text:004042BB                 jmp     short loc_404289
.text:004042BB ; ---------------------------------------------------------------------------
.text:004042BD                 align 10h
.text:004042C0
.text:004042C0 loc_4042C0:                             ; CODE XREF: sub_404260+20↑j
.text:004042C0                 mov     [esp+1Ch+Size], 18h ; Size
.text:004042C7                 lea     ebp, [edi+50h]
.text:004042CA                 call    malloc
.text:004042CF                 test    eax, eax
.text:004042D1                 mov     ebx, eax
.text:004042D3                 jz      short loc_40432D
.text:004042D5                 mov     [eax+10h], edi
.text:004042D8                 mov     edx, [ebp+10h]
.text:004042DB                 mov     ecx, [ebp+14h]
.text:004042DE                 mov     [eax], edx
.text:004042E0                 mov     [eax+4], ecx
.text:004042E3                 mov     edx, [ebp+8]
.text:004042E6                 mov     ecx, [ebp+0Ch]
.text:004042E9                 mov     [eax+8], edx
.text:004042EC                 mov     [eax+0Ch], ecx
.text:004042EF                 mov     [esp+1Ch+var_18], eax
.text:004042F3                 mov     edx, [esi+30h]
.text:004042F6                 mov     [esp+1Ch+Size], edx
.text:004042F9                 call    sub_406C50
.text:004042FE                 test    eax, eax
.text:00404300                 jz      short loc_40432D
.text:00404302                 cmp     eax, ebx
.text:00404304                 jz      short loc_404289
.text:00404306                 mov     word ptr [edi+44h], 2
.text:0040430C                 mov     esi, [eax+10h]
.text:0040430F                 mov     [edi], esi
.text:00404311                 mov     esi, [esp+1Ch+var_C]
.text:00404315                 mov     [esp+1Ch+Block], ebx ; Block
.text:00404319                 mov     edi, [esp+1Ch+var_8]
.text:0040431D                 mov     ebx, [esp+1Ch+var_10]
.text:00404321                 mov     ebp, [esp+1Ch+var_4]
.text:00404325                 add     esp, 1Ch
.text:00404328                 jmp     free
.text:0040432D ; ---------------------------------------------------------------------------
.text:0040432D
.text:0040432D loc_40432D:                             ; CODE XREF: sub_404260+73↑j
.text:0040432D                                         ; sub_404260+A0↑j
.text:0040432D                 mov     ebx, [esi+30h]
.text:00404330                 mov     [esp+1Ch+Size], ebx ; void *
.text:00404333                 call    sub_4069E0
.text:00404338                 mov     dword ptr [esi+30h], 0
.text:0040433F                 jmp     loc_404289
.text:0040433F sub_404260      endp
.text:0040433F
.text:0040433F ; ---------------------------------------------------------------------------
.text:00404344                 align 10h
.text:00404350 ; const char dword_404350[]
.text:00404350 dword_404350    dd 900DEB00h, 3 dup(90909090h)
.text:00404350                                         ; DATA XREF: sub_404360+17↓o
.text:00404360
.text:00404360 ; =============== S U B R O U T I N E =======================================
.text:00404360
.text:00404360
.text:00404360 sub_404360      proc near               ; CODE XREF: sub_401920+615↑p
.text:00404360
.text:00404360 Size            = dword ptr -3Ch
.text:00404360 var_38          = dword ptr -38h
.text:00404360 var_34          = dword ptr -34h
.text:00404360 var_30          = dword ptr -30h
.text:00404360 Str             = dword ptr -2Ch
.text:00404360 var_25          = byte ptr -25h
.text:00404360 var_24          = dword ptr -24h
.text:00404360 var_20          = dword ptr -20h
.text:00404360 var_1C          = dword ptr -1Ch
.text:00404360 var_18          = dword ptr -18h
.text:00404360 var_14          = dword ptr -14h
.text:00404360 arg_0           = dword ptr  4
.text:00404360 arg_4           = dword ptr  8
.text:00404360
.text:00404360                 push    ebp
.text:00404361                 push    edi
.text:00404362                 push    esi
.text:00404363                 push    ebx
.text:00404364                 sub     esp, 2Ch
.text:00404367                 mov     esi, [esp+3Ch+arg_0]
.text:0040436B                 mov     [esp+3Ch+var_18], 0
.text:00404373                 lea     edx, [esp+3Ch+var_14]
.text:00404377                 mov     [esp+3Ch+Str], offset dword_404350 ; Str
.text:0040437F                 mov     [esp+3Ch+var_30], edx ; int
.text:00404383                 mov     [esp+3Ch+var_34], 8 ; int
.text:0040438B                 mov     [esp+3Ch+var_38], 0 ; int
.text:00404393                 mov     [esp+3Ch+Size], esi ; int
.text:00404396                 call    sub_407620
.text:0040439B                 test    eax, eax
.text:0040439D                 jnz     short loc_4043F7
.text:0040439F                 mov     edx, [esp+3Ch+var_14]
.text:004043A3                 and     edx, 0FFFh
.text:004043A9                 cmp     edx, [esp+3Ch+var_14]
.text:004043AD                 jnz     short loc_4043F3
.text:004043AF                 movzx   ebx, word ptr [esp+3Ch+var_14]
.text:004043B4                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:004043BB                 call    malloc
.text:004043C0                 xor     edx, edx
.text:004043C2                 test    eax, eax
.text:004043C4                 jz      short loc_4043E0
.text:004043C6                 mov     dword ptr [eax+8], 0
.text:004043CD                 mov     edx, eax
.text:004043CF                 mov     byte ptr [eax], 3Dh ; '='
.text:004043D2                 mov     byte ptr [eax+1], 0
.text:004043D6                 mov     [eax+4], bx
.text:004043DA                 mov     word ptr [eax+2], 0FFFh
.text:004043E0
.text:004043E0 loc_4043E0:                             ; CODE XREF: sub_404360+64↑j
.text:004043E0                 test    edx, edx
.text:004043E2                 mov     eax, 1
.text:004043E7                 jz      short loc_4043EB
.text:004043E9                 mov     eax, edx
.text:004043EB
.text:004043EB loc_4043EB:                             ; CODE XREF: sub_404360+87↑j
.text:004043EB                                         ; sub_404360+95↓j ...
.text:004043EB                 add     esp, 2Ch
.text:004043EE                 pop     ebx
.text:004043EF                 pop     esi
.text:004043F0                 pop     edi
.text:004043F1                 pop     ebp
.text:004043F2                 retn
.text:004043F3 ; ---------------------------------------------------------------------------
.text:004043F3
.text:004043F3 loc_4043F3:                             ; CODE XREF: sub_404360+4D↑j
.text:004043F3                                         ; sub_404360+133↓j
.text:004043F3                 xor     eax, eax
.text:004043F5                 jmp     short loc_4043EB
.text:004043F7 ; ---------------------------------------------------------------------------
.text:004043F7
.text:004043F7 loc_4043F7:                             ; CODE XREF: sub_404360+3D↑j
.text:004043F7                 mov     [esp+3Ch+Size], 0 ; Mode
.text:004043FE                 call    _umask
.text:00404403                 movzx   ecx, ax
.text:00404406                 mov     [esp+3Ch+var_20], ecx
.text:0040440A                 mov     [esp+3Ch+Size], ecx ; Mode
.text:0040440D                 call    _umask
.text:00404412
.text:00404412 loc_404412:                             ; CODE XREF: sub_404360+119↓j
.text:00404412                 mov     [esp+3Ch+var_24], 0
.text:0040441A                 xor     ebp, ebp
.text:0040441C                 lea     esi, [esi+0]
.text:00404420
.text:00404420 loc_404420:                             ; CODE XREF: sub_404360+E6↓j
.text:00404420                 movzx   edx, byte ptr [esi]
.text:00404423                 movsx   eax, dl
.text:00404426                 mov     cl, dl
.text:00404428                 cmp     eax, 67h ; 'g'
.text:0040442B                 jz      loc_404724
.text:00404431                 cmp     eax, 67h ; 'g'
.text:00404434                 jg      loc_404700
.text:0040443A                 cmp     eax, 61h ; 'a'
.text:0040443D                 jnz     short loc_404448
.text:0040443F                 or      ebp, 0FFFh
.text:00404445
.text:00404445 loc_404445:                             ; CODE XREF: sub_404360+3B4↓j
.text:00404445                                         ; sub_404360+3BF↓j ...
.text:00404445                 inc     esi
.text:00404446                 jmp     short loc_404420
.text:00404448 ; ---------------------------------------------------------------------------
.text:00404448
.text:00404448 loc_404448:                             ; CODE XREF: sub_404360+DD↑j
.text:00404448                                         ; sub_404360+3A8↓j
.text:00404448                 mov     [esp+3Ch+var_25], 1
.text:0040444D                 test    bp, bp
.text:00404450                 jnz     short loc_404464
.text:00404452                 mov     [esp+3Ch+var_25], 0
.text:00404457                 mov     ebx, [esp+3Ch+arg_4]
.text:0040445B                 mov     ebp, 0FFFh
.text:00404460                 mov     [esp+3Ch+var_24], ebx
.text:00404464
.text:00404464 loc_404464:                             ; CODE XREF: sub_404360+F0↑j
.text:00404464                 cmp     cl, 3Dh ; '='
.text:00404467                 jz      short loc_404498
.text:00404469                 cmp     cl, 2Bh ; '+'
.text:0040446C                 jz      short loc_404498
.text:0040446E                 cmp     cl, 2Dh ; '-'
.text:00404471                 jz      short loc_404498
.text:00404473
.text:00404473 loc_404473:                             ; CODE XREF: sub_404360+2EB↓j
.text:00404473                 cmp     dl, 2Ch ; ','
.text:00404476                 jnz     short loc_40447B
.text:00404478                 inc     esi
.text:00404479                 jmp     short loc_404412
.text:0040447B ; ---------------------------------------------------------------------------
.text:0040447B
.text:0040447B loc_40447B:                             ; CODE XREF: sub_404360+116↑j
.text:0040447B                 test    dl, dl
.text:0040447D                 mov     eax, [esp+3Ch+var_18]
.text:00404481                 jz      loc_4043EB
.text:00404487
.text:00404487 loc_404487:                             ; CODE XREF: sub_404360+27F↓j
.text:00404487                                         ; sub_404360+299↓j ...
.text:00404487                 mov     edi, [esp+3Ch+var_18]
.text:0040448B                 mov     [esp+3Ch+Size], edi ; void *
.text:0040448E                 call    sub_404870
.text:00404493                 jmp     loc_4043F3
.text:00404498 ; ---------------------------------------------------------------------------
.text:00404498
.text:00404498 loc_404498:                             ; CODE XREF: sub_404360+107↑j
.text:00404498                                         ; sub_404360+10C↑j ...
.text:00404498                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:0040449F                 call    malloc
.text:004044A4                 test    eax, eax
.text:004044A6                 mov     ebx, eax
.text:004044A8                 jz      loc_4046E9
.text:004044AE                 mov     dword ptr [eax+8], 0
.text:004044B5                 mov     edi, ebp
.text:004044B7                 movzx   edx, byte ptr [esi]
.text:004044BA                 mov     [eax], dl
.text:004044BC                 cmp     [esp+3Ch+var_25], 0
.text:004044C1                 jnz     loc_40467D
.text:004044C7                 cmp     dl, 3Dh ; '='
.text:004044CA                 jz      loc_404676
.text:004044D0
.text:004044D0 loc_4044D0:                             ; CODE XREF: sub_404360+320↓j
.text:004044D0                 cmp     dl, 2Bh ; '+'
.text:004044D3                 jz      loc_40466C
.text:004044D9                 test    byte ptr [esp+3Ch+var_24], 4
.text:004044DE
.text:004044DE loc_4044DE:                             ; CODE XREF: sub_404360+311↓j
.text:004044DE                                         ; sub_404360+32B↓j
.text:004044DE                 jz      short loc_4044E8
.text:004044E0                 mov     edi, [esp+3Ch+var_20]
.text:004044E4                 not     edi
.text:004044E6                 and     edi, ebp
.text:004044E8
.text:004044E8 loc_4044E8:                             ; CODE XREF: sub_404360:loc_4044DE↑j
.text:004044E8                 mov     byte ptr [ebx+1], 0
.text:004044EC                 mov     edx, [esp+3Ch+var_18]
.text:004044F0                 mov     [ebx+2], di
.text:004044F4                 mov     word ptr [ebx+4], 0
.text:004044FA                 test    edx, edx
.text:004044FC                 jnz     loc_40465C
.text:00404502                 mov     [esp+3Ch+var_1C], ebx
.text:00404506                 mov     [esp+3Ch+var_18], ebx
.text:0040450A                 lea     esi, [esi+0]
.text:00404510
.text:00404510 loc_404510:                             ; CODE XREF: sub_404360+26A↓j
.text:00404510                                         ; sub_404360+28F↓j ...
.text:00404510                 inc     esi
.text:00404511                 movzx   edx, byte ptr [esi]
.text:00404514                 movsx   eax, dl
.text:00404517                 mov     cl, dl
.text:00404519                 sub     eax, 58h ; 'X'  ; switch 33 cases
.text:0040451C                 cmp     eax, 20h
.text:0040451F                 ja      def_404525      ; jumptable 00404525 default case, cases 89-102,104-110,112,113,118
.text:00404525                 jmp     ds:jpt_404525[eax*4] ; switch jump
.text:00404525 ; ---------------------------------------------------------------------------
.text:0040452C jpt_404525      dd offset loc_4045CF    ; DATA XREF: sub_404360+1C5↑r
.text:0040452C                 dd offset def_404525    ; jump table for switch statement
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset loc_4045DA
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset loc_4045F4
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset loc_4045B0
.text:0040452C                 dd offset loc_404607
.text:0040452C                 dd offset loc_404610
.text:0040452C                 dd offset loc_404619
.text:0040452C                 dd offset def_404525
.text:0040452C                 dd offset loc_404650
.text:0040452C                 dd offset loc_4045D3
.text:004045B0 ; ---------------------------------------------------------------------------
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_404360+1C5↑j
.text:004045B0                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:004045B0                 mov     eax, edi        ; jumptable 00404525 case 114
.text:004045B2                 and     eax, 124h
.text:004045B7                 mov     esi, esi
.text:004045B9                 lea     edi, [edi+0]
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: sub_404360+278↓j
.text:004045C0                                         ; sub_404360+2AE↓j ...
.text:004045C0                 movzx   ecx, word ptr [ebx+4]
.text:004045C4                 or      eax, ecx
.text:004045C6                 mov     [ebx+4], ax
.text:004045CA                 jmp     loc_404510
.text:004045CF ; ---------------------------------------------------------------------------
.text:004045CF
.text:004045CF loc_4045CF:                             ; CODE XREF: sub_404360+1C5↑j
.text:004045CF                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:004045CF                 or      byte ptr [ebx+1], 1 ; jumptable 00404525 case 88
.text:004045D3
.text:004045D3 loc_4045D3:                             ; CODE XREF: sub_404360+1C5↑j
.text:004045D3                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:004045D3                 mov     eax, edi        ; jumptable 00404525 case 120
.text:004045D5                 and     eax, 49h
.text:004045D8                 jmp     short loc_4045C0
.text:004045DA ; ---------------------------------------------------------------------------
.text:004045DA
.text:004045DA loc_4045DA:                             ; CODE XREF: sub_404360+1C5↑j
.text:004045DA                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:004045DA                 cmp     word ptr [ebx+4], 0 ; jumptable 00404525 case 103
.text:004045DF                 jnz     loc_404487
.text:004045E5                 mov     word ptr [ebx+4], 38h ; '8'
.text:004045EB
.text:004045EB loc_4045EB:                             ; CODE XREF: sub_404360+2A5↓j
.text:004045EB                                         ; sub_404360+2CA↓j
.text:004045EB                 or      byte ptr [ebx+1], 2
.text:004045EF                 jmp     loc_404510
.text:004045F4 ; ---------------------------------------------------------------------------
.text:004045F4
.text:004045F4 loc_4045F4:                             ; CODE XREF: sub_404360+1C5↑j
.text:004045F4                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:004045F4                 cmp     word ptr [ebx+4], 0 ; jumptable 00404525 case 111
.text:004045F9                 jnz     loc_404487
.text:004045FF                 mov     word ptr [ebx+4], 7
.text:00404605                 jmp     short loc_4045EB
.text:00404607 ; ---------------------------------------------------------------------------
.text:00404607
.text:00404607 loc_404607:                             ; CODE XREF: sub_404360+1C5↑j
.text:00404607                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:00404607                 mov     eax, edi        ; jumptable 00404525 case 115
.text:00404609                 and     eax, 0C00h
.text:0040460E                 jmp     short loc_4045C0
.text:00404610 ; ---------------------------------------------------------------------------
.text:00404610
.text:00404610 loc_404610:                             ; CODE XREF: sub_404360+1C5↑j
.text:00404610                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:00404610                 mov     eax, edi        ; jumptable 00404525 case 116
.text:00404612                 and     eax, 200h
.text:00404617                 jmp     short loc_4045C0
.text:00404619 ; ---------------------------------------------------------------------------
.text:00404619
.text:00404619 loc_404619:                             ; CODE XREF: sub_404360+1C5↑j
.text:00404619                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:00404619                 cmp     word ptr [ebx+4], 0 ; jumptable 00404525 case 117
.text:0040461E                 jnz     loc_404487
.text:00404624                 mov     word ptr [ebx+4], 1C0h
.text:0040462A                 jmp     short loc_4045EB
.text:0040462A ; ---------------------------------------------------------------------------
.text:0040462C                 align 10h
.text:00404630
.text:00404630 def_404525:                             ; CODE XREF: sub_404360+1BF↑j
.text:00404630                                         ; sub_404360+1C5↑j
.text:00404630                                         ; DATA XREF: ...
.text:00404630                 cmp     cl, 3Dh ; '='   ; jumptable 00404525 default case, cases 89-102,104-110,112,113,118
.text:00404633                 jz      loc_404498
.text:00404639                 cmp     cl, 2Bh ; '+'
.text:0040463C                 jz      loc_404498
.text:00404642                 cmp     cl, 2Dh ; '-'
.text:00404645                 jz      loc_404498
.text:0040464B                 jmp     loc_404473
.text:00404650 ; ---------------------------------------------------------------------------
.text:00404650
.text:00404650 loc_404650:                             ; CODE XREF: sub_404360+1C5↑j
.text:00404650                                         ; DATA XREF: sub_404360:jpt_404525↑o
.text:00404650                 mov     eax, edi        ; jumptable 00404525 case 119
.text:00404652                 and     eax, 92h
.text:00404657                 jmp     loc_4045C0
.text:0040465C ; ---------------------------------------------------------------------------
.text:0040465C
.text:0040465C loc_40465C:                             ; CODE XREF: sub_404360+19C↑j
.text:0040465C                 mov     ecx, [esp+3Ch+var_1C]
.text:00404660                 mov     [esp+3Ch+var_1C], ebx
.text:00404664                 mov     [ecx+8], ebx
.text:00404667                 jmp     loc_404510
.text:0040466C ; ---------------------------------------------------------------------------
.text:0040466C
.text:0040466C loc_40466C:                             ; CODE XREF: sub_404360+173↑j
.text:0040466C                 test    byte ptr [esp+3Ch+var_24], 2
.text:00404671                 jmp     loc_4044DE
.text:00404676 ; ---------------------------------------------------------------------------
.text:00404676
.text:00404676 loc_404676:                             ; CODE XREF: sub_404360+16A↑j
.text:00404676                 test    byte ptr [esp+3Ch+var_24], 1
.text:0040467B                 jnz     short loc_404690
.text:0040467D
.text:0040467D loc_40467D:                             ; CODE XREF: sub_404360+161↑j
.text:0040467D                                         ; sub_404360+37E↓j
.text:0040467D                 cmp     dl, 3Dh ; '='
.text:00404680                 jnz     loc_4044D0
.text:00404686                 test    byte ptr [esp+3Ch+var_24], 1
.text:0040468B                 jmp     loc_4044DE
.text:00404690 ; ---------------------------------------------------------------------------
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_404360+31B↑j
.text:00404690                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:00404697                 call    malloc
.text:0040469C                 xor     edx, edx
.text:0040469E                 test    eax, eax
.text:004046A0                 jz      short loc_4046BE
.text:004046A2                 mov     dword ptr [eax+8], 0
.text:004046A9                 mov     edx, eax
.text:004046AB                 mov     byte ptr [eax], 3Dh ; '='
.text:004046AE                 mov     byte ptr [eax+1], 0
.text:004046B2                 mov     word ptr [eax+4], 0
.text:004046B8                 mov     word ptr [eax+2], 0FFFh
.text:004046BE
.text:004046BE loc_4046BE:                             ; CODE XREF: sub_404360+340↑j
.text:004046BE                 test    edx, edx
.text:004046C0                 mov     eax, 1
.text:004046C5                 jz      loc_4043EB
.text:004046CB                 mov     eax, [esp+3Ch+var_18]
.text:004046CF                 test    eax, eax
.text:004046D1                 jnz     short loc_4046E0
.text:004046D3                 mov     [esp+3Ch+var_18], edx
.text:004046D7
.text:004046D7 loc_4046D7:                             ; CODE XREF: sub_404360+387↓j
.text:004046D7                 mov     [esp+3Ch+var_1C], edx
.text:004046DB                 movzx   edx, byte ptr [esi]
.text:004046DE                 jmp     short loc_40467D
.text:004046E0 ; ---------------------------------------------------------------------------
.text:004046E0
.text:004046E0 loc_4046E0:                             ; CODE XREF: sub_404360+371↑j
.text:004046E0                 mov     ecx, [esp+3Ch+var_1C]
.text:004046E4                 mov     [ecx+8], edx
.text:004046E7                 jmp     short loc_4046D7
.text:004046E9 ; ---------------------------------------------------------------------------
.text:004046E9
.text:004046E9 loc_4046E9:                             ; CODE XREF: sub_404360+148↑j
.text:004046E9                 mov     esi, [esp+3Ch+var_18]
.text:004046ED                 mov     [esp+3Ch+Size], esi ; void *
.text:004046F0                 call    sub_404870
.text:004046F5                 mov     eax, 1
.text:004046FA                 jmp     loc_4043EB
.text:004046FA ; ---------------------------------------------------------------------------
.text:004046FF                 align 10h
.text:00404700
.text:00404700 loc_404700:                             ; CODE XREF: sub_404360+D4↑j
.text:00404700                 cmp     eax, 6Fh ; 'o'
.text:00404703                 jz      short loc_404719
.text:00404705                 cmp     eax, 75h ; 'u'
.text:00404708                 jnz     loc_404448
.text:0040470E                 or      ebp, 9C0h
.text:00404714                 jmp     loc_404445
.text:00404719 ; ---------------------------------------------------------------------------
.text:00404719
.text:00404719 loc_404719:                             ; CODE XREF: sub_404360+3A3↑j
.text:00404719                 or      ebp, 207h
.text:0040471F                 jmp     loc_404445
.text:00404724 ; ---------------------------------------------------------------------------
.text:00404724
.text:00404724 loc_404724:                             ; CODE XREF: sub_404360+CB↑j
.text:00404724                 or      ebp, 438h
.text:0040472A                 jmp     loc_404445
.text:0040472A sub_404360      endp
.text:0040472A
.text:0040472A ; ---------------------------------------------------------------------------
.text:0040472F                 align 10h
.text:00404730
.text:00404730 ; =============== S U B R O U T I N E =======================================
.text:00404730
.text:00404730
.text:00404730 sub_404730      proc near               ; CODE XREF: sub_402390+35B↑p
.text:00404730
.text:00404730 arg_0           = word ptr  4
.text:00404730 arg_4           = dword ptr  8
.text:00404730
.text:00404730                 push    esi
.text:00404731                 push    ebx
.text:00404732                 mov     ecx, [esp+8+arg_4]
.text:00404736                 movzx   esi, [esp+8+arg_0]
.text:0040473B                 mov     ebx, esi
.text:0040473D                 and     ebx, 0FFFh
.text:00404743                 test    ecx, ecx
.text:00404745                 jz      short loc_4047B7
.text:00404747                 mov     esi, esi
.text:00404749                 lea     edi, [edi+0]
.text:00404750
.text:00404750 loc_404750:                             ; CODE XREF: sub_404730+85↓j
.text:00404750                 movsx   eax, byte ptr [ecx+1]
.text:00404754                 test    al, 2
.text:00404756                 jz      loc_404830
.text:0040475C                 movzx   eax, word ptr [ecx+4]
.text:00404760                 mov     edx, ebx
.text:00404762                 and     edx, eax
.text:00404764                 test    eax, 1C0h
.text:00404769                 jz      short loc_4047E0
.text:0040476B                 xor     eax, eax
.text:0040476D                 test    dh, 1
.text:00404770                 setz    al
.text:00404773                 dec     eax
.text:00404774                 and     eax, 24h
.text:00404777                 test    dl, dl
.text:00404779                 jns     short loc_40477E
.text:0040477B                 or      eax, 12h
.text:0040477E
.text:0040477E loc_40477E:                             ; CODE XREF: sub_404730+49↑j
.text:0040477E                 test    dl, 40h
.text:00404781                 jz      short loc_404790
.text:00404783                 or      eax, 9
.text:00404786                 lea     esi, [esi+0]
.text:00404789                 lea     edi, [edi+0]
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: sub_404730+51↑j
.text:00404790                                         ; sub_404730+CF↓j ...
.text:00404790                 or      eax, edx
.text:00404792                 movzx   edx, ax
.text:00404795                 movzx   eax, word ptr [ecx+2]
.text:00404799                 and     edx, eax
.text:0040479B
.text:0040479B loc_40479B:                             ; CODE XREF: sub_404730+106↓j
.text:0040479B                                         ; sub_404730+118↓j ...
.text:0040479B                 movsx   eax, byte ptr [ecx]
.text:0040479E                 cmp     eax, 2Dh ; '-'
.text:004047A1                 jz      short loc_4047D3
.text:004047A3                 cmp     eax, 2Dh ; '-'
.text:004047A6                 jg      short loc_4047C4
.text:004047A8                 cmp     eax, 2Bh ; '+'
.text:004047AB                 jz      short loc_4047C0
.text:004047AD                 lea     esi, [esi+0]
.text:004047B0
.text:004047B0 loc_4047B0:                             ; CODE XREF: sub_404730+92↓j
.text:004047B0                                         ; sub_404730+97↓j ...
.text:004047B0                 mov     ecx, [ecx+8]
.text:004047B3                 test    ecx, ecx
.text:004047B5                 jnz     short loc_404750
.text:004047B7
.text:004047B7 loc_4047B7:                             ; CODE XREF: sub_404730+15↑j
.text:004047B7                 mov     eax, ebx
.text:004047B9                 pop     ebx
.text:004047BA                 pop     esi
.text:004047BB                 retn
.text:004047BB ; ---------------------------------------------------------------------------
.text:004047BC                 align 10h
.text:004047C0
.text:004047C0 loc_4047C0:                             ; CODE XREF: sub_404730+7B↑j
.text:004047C0                                         ; sub_404730+A1↓j
.text:004047C0                 or      ebx, edx
.text:004047C2                 jmp     short loc_4047B0
.text:004047C4 ; ---------------------------------------------------------------------------
.text:004047C4
.text:004047C4 loc_4047C4:                             ; CODE XREF: sub_404730+76↑j
.text:004047C4                 cmp     eax, 3Dh ; '='
.text:004047C7                 jnz     short loc_4047B0
.text:004047C9                 movzx   eax, word ptr [ecx+2]
.text:004047CD                 not     eax
.text:004047CF                 and     ebx, eax
.text:004047D1                 jmp     short loc_4047C0
.text:004047D3 ; ---------------------------------------------------------------------------
.text:004047D3
.text:004047D3 loc_4047D3:                             ; CODE XREF: sub_404730+71↑j
.text:004047D3                 not     edx
.text:004047D5                 and     ebx, edx
.text:004047D7                 jmp     short loc_4047B0
.text:004047D7 ; ---------------------------------------------------------------------------
.text:004047D9                 align 10h
.text:004047E0
.text:004047E0 loc_4047E0:                             ; CODE XREF: sub_404730+39↑j
.text:004047E0                 test    al, 38h
.text:004047E2                 jz      short loc_404806
.text:004047E4                 xor     eax, eax
.text:004047E6                 test    dl, 20h
.text:004047E9                 setz    al
.text:004047EC                 dec     eax
.text:004047ED                 and     eax, 104h
.text:004047F2                 test    dl, 10h
.text:004047F5                 jz      short loc_4047FC
.text:004047F7                 or      eax, 82h
.text:004047FC
.text:004047FC loc_4047FC:                             ; CODE XREF: sub_404730+C5↑j
.text:004047FC                 test    dl, 8
.text:004047FF                 jz      short loc_404790
.text:00404801                 or      eax, 41h
.text:00404804                 jmp     short loc_404790
.text:00404806 ; ---------------------------------------------------------------------------
.text:00404806
.text:00404806 loc_404806:                             ; CODE XREF: sub_404730+B2↑j
.text:00404806                 xor     eax, eax
.text:00404808                 test    dl, 4
.text:0040480B                 setz    al
.text:0040480E                 dec     eax
.text:0040480F                 and     eax, 120h
.text:00404814                 test    dl, 2
.text:00404817                 jz      short loc_40481E
.text:00404819                 or      eax, 90h
.text:0040481E
.text:0040481E loc_40481E:                             ; CODE XREF: sub_404730+E7↑j
.text:0040481E                 test    dl, 1
.text:00404821                 jz      loc_404790
.text:00404827                 or      eax, 48h
.text:0040482A                 jmp     loc_404790
.text:0040482A ; ---------------------------------------------------------------------------
.text:0040482F                 align 10h
.text:00404830
.text:00404830 loc_404830:                             ; CODE XREF: sub_404730+26↑j
.text:00404830                 movzx   edx, word ptr [ecx+4]
.text:00404834                 test    al, 1
.text:00404836                 jz      loc_40479B
.text:0040483C                 mov     eax, esi
.text:0040483E                 and     eax, 0F000h
.text:00404843                 cmp     eax, 4000h
.text:00404848                 jz      loc_40479B
.text:0040484E                 test    bl, 49h
.text:00404851                 jnz     loc_40479B
.text:00404857                 and     edx, 0FFB6h
.text:0040485D                 jmp     loc_40479B
.text:0040485D sub_404730      endp
.text:0040485D
.text:0040485D ; ---------------------------------------------------------------------------
.text:00404862                 align 10h
.text:00404870
.text:00404870 ; =============== S U B R O U T I N E =======================================
.text:00404870
.text:00404870
.text:00404870 ; int __cdecl sub_404870(void *)
.text:00404870 sub_404870      proc near               ; CODE XREF: sub_404360+12E↑p
.text:00404870                                         ; sub_404360+390↑p
.text:00404870
.text:00404870 Block           = dword ptr -0Ch
.text:00404870 arg_0           = dword ptr  4
.text:00404870
.text:00404870                 push    ebx
.text:00404871                 sub     esp, 8
.text:00404874                 mov     eax, [esp+0Ch+arg_0]
.text:00404878                 test    eax, eax
.text:0040487A                 jz      short loc_404891
.text:0040487C                 lea     esi, [esi+0]
.text:00404880
.text:00404880 loc_404880:                             ; CODE XREF: sub_404870+1F↓j
.text:00404880                 mov     ebx, [eax+8]
.text:00404883                 mov     [esp+0Ch+Block], eax ; Block
.text:00404886                 call    free
.text:0040488B                 test    ebx, ebx
.text:0040488D                 mov     eax, ebx
.text:0040488F                 jnz     short loc_404880
.text:00404891
.text:00404891 loc_404891:                             ; CODE XREF: sub_404870+A↑j
.text:00404891                 add     esp, 8
.text:00404894                 pop     ebx
.text:00404895                 retn
.text:00404895 sub_404870      endp
.text:00404895
.text:00404895 ; ---------------------------------------------------------------------------
.text:00404896                 align 10h
.text:004048A0
.text:004048A0 ; =============== S U B R O U T I N E =======================================
.text:004048A0
.text:004048A0
.text:004048A0 ; int __cdecl sub_4048A0(char *)
.text:004048A0 sub_4048A0      proc near               ; CODE XREF: sub_401920+456↑p
.text:004048A0
.text:004048A0 Size            = dword ptr -8Ch
.text:004048A0 var_88          = dword ptr -88h
.text:004048A0 var_7C          = dword ptr -7Ch
.text:004048A0 arg_0           = dword ptr  4
.text:004048A0
.text:004048A0                 sub     esp, 8Ch
.text:004048A6                 lea     edx, [esp+8Ch+var_7C]
.text:004048AA                 mov     [esp+8Ch+var_88], edx ; int
.text:004048AE                 mov     edx, [esp+8Ch+arg_0]
.text:004048B5                 mov     [esp+8Ch+Size], edx ; char *
.text:004048B8                 call    sub_40BFA0
.text:004048BD                 test    eax, eax
.text:004048BF                 mov     ecx, 2
.text:004048C4                 jz      short loc_4048D0
.text:004048C6
.text:004048C6 loc_4048C6:                             ; CODE XREF: sub_4048A0+43↓j
.text:004048C6                                         ; sub_4048A0+63↓j
.text:004048C6                 mov     eax, ecx
.text:004048C8                 add     esp, 8Ch
.text:004048CE                 retn
.text:004048CE ; ---------------------------------------------------------------------------
.text:004048CF                 align 10h
.text:004048D0
.text:004048D0 loc_4048D0:                             ; CODE XREF: sub_4048A0+24↑j
.text:004048D0                 mov     [esp+8Ch+Size], 0Ch ; Size
.text:004048D7                 call    malloc
.text:004048DC                 test    eax, eax
.text:004048DE                 mov     ecx, 1
.text:004048E3                 jz      short loc_4048C6
.text:004048E5                 mov     byte ptr [eax], 3Dh ; '='
.text:004048E8                 mov     byte ptr [eax+1], 0
.text:004048EC                 mov     ecx, [esp+8Ch+var_7C]
.text:004048F0                 mov     word ptr [eax+2], 0FFFh
.text:004048F6                 mov     dword ptr [eax+8], 0
.text:004048FD                 mov     [eax+4], cx
.text:00404901                 mov     ecx, eax
.text:00404903                 jmp     short loc_4048C6
.text:00404903 sub_4048A0      endp
.text:00404903
.text:00404903 ; ---------------------------------------------------------------------------
.text:00404905                 align 10h
.text:00404910 dword_404910    dd 0B48D002Fh, 26h, 27BC8D00h, 0
.text:00404910                                         ; DATA XREF: sub_404920+1C↓o
.text:00404920
.text:00404920 ; =============== S U B R O U T I N E =======================================
.text:00404920
.text:00404920
.text:00404920 sub_404920      proc near               ; CODE XREF: sub_401920+545↑p
.text:00404920
.text:00404920 var_8C          = dword ptr -8Ch
.text:00404920 var_88          = dword ptr -88h
.text:00404920 var_7C          = byte ptr -7Ch
.text:00404920 var_74          = dword ptr -74h
.text:00404920 var_70          = dword ptr -70h
.text:00404920 var_6C          = dword ptr -6Ch
.text:00404920 var_68          = dword ptr -68h
.text:00404920 var_4           = dword ptr -4
.text:00404920 arg_0           = dword ptr  4
.text:00404920
.text:00404920                 sub     esp, 8Ch
.text:00404926                 lea     edx, [esp+8Ch+var_7C]
.text:0040492A                 mov     [esp+8Ch+var_4], ebx
.text:00404931                 mov     ebx, [esp+8Ch+arg_0]
.text:00404938                 mov     [esp+8Ch+var_88], edx
.text:0040493C                 mov     [esp+8Ch+var_8C], offset dword_404910
.text:00404943                 call    sub_40B070
.text:00404948                 xor     edx, edx
.text:0040494A                 test    eax, eax
.text:0040494C                 jnz     short loc_40496B
.text:0040494E                 mov     edx, [esp+8Ch+var_74]
.text:00404952                 mov     ecx, [esp+8Ch+var_70]
.text:00404956                 mov     [ebx], edx
.text:00404958                 mov     [ebx+4], ecx
.text:0040495B                 mov     edx, [esp+8Ch+var_6C]
.text:0040495F                 mov     ecx, [esp+8Ch+var_68]
.text:00404963                 mov     [ebx+8], edx
.text:00404966                 mov     edx, ebx
.text:00404968                 mov     [ebx+0Ch], ecx
.text:0040496B
.text:0040496B loc_40496B:                             ; CODE XREF: sub_404920+2C↑j
.text:0040496B                 mov     ebx, [esp+8Ch+var_4]
.text:00404972                 mov     eax, edx
.text:00404974                 add     esp, 8Ch
.text:0040497A                 retn
.text:0040497A sub_404920      endp
.text:0040497A
.text:0040497A ; ---------------------------------------------------------------------------
.text:0040497B                 align 10h
.text:00404980 ; const char byte_404980
.text:00404980 byte_404980     db 0                    ; DATA XREF: sub_4049A0+64↓o
.text:00404981 aInvalidArgumen db 'invalid argument: %s',0
.text:00404981                                         ; DATA XREF: sub_4049A0+70↓o
.text:00404996                 align 10h
.text:004049A0
.text:004049A0 ; =============== S U B R O U T I N E =======================================
.text:004049A0
.text:004049A0
.text:004049A0 sub_4049A0      proc near               ; CODE XREF: sub_401920+4B4↑p
.text:004049A0
.text:004049A0 Code            = dword ptr -1Ch
.text:004049A0 ErrorMessage    = dword ptr -18h
.text:004049A0 var_14          = dword ptr -14h
.text:004049A0 var_10          = byte ptr -10h
.text:004049A0 var_8           = dword ptr -8
.text:004049A0 var_4           = dword ptr -4
.text:004049A0 arg_0           = dword ptr  4
.text:004049A0 arg_4           = dword ptr  8
.text:004049A0 arg_8           = dword ptr  0Ch
.text:004049A0
.text:004049A0                 sub     esp, 1Ch
.text:004049A3                 mov     edx, [esp+1Ch+arg_8]
.text:004049A7                 mov     [esp+1Ch+var_8], ebx
.text:004049AB                 mov     ebx, [esp+1Ch+arg_0]
.text:004049AF                 mov     [esp+1Ch+var_14], edx
.text:004049B3                 mov     edx, [esp+1Ch+arg_4]
.text:004049B7                 mov     [esp+1Ch+var_4], esi
.text:004049BB                 mov     [esp+1Ch+Code], ebx
.text:004049BE                 mov     [esp+1Ch+ErrorMessage], edx
.text:004049C2                 call    sub_4029C0
.text:004049C7                 test    eax, eax
.text:004049C9                 mov     esi, eax
.text:004049CB                 jz      short loc_4049E0
.text:004049CD
.text:004049CD loc_4049CD:                             ; CODE XREF: sub_4049A0+9B↓j
.text:004049CD                 mov     eax, esi
.text:004049CF                 mov     ebx, [esp+1Ch+var_8]
.text:004049D3                 mov     esi, [esp+1Ch+var_4]
.text:004049D7                 add     esp, 1Ch
.text:004049DA                 retn
.text:004049DA ; ---------------------------------------------------------------------------
.text:004049DB                 align 10h
.text:004049E0
.text:004049E0 loc_4049E0:                             ; CODE XREF: sub_4049A0+2B↑j
.text:004049E0                 mov     eax, [ebx]
.text:004049E2                 xor     edx, edx
.text:004049E4                 test    eax, eax
.text:004049E6                 jz      short loc_404A3D
.text:004049E8                 nop
.text:004049E9                 lea     esi, [esi+0]
.text:004049F0
.text:004049F0 loc_4049F0:                             ; CODE XREF: sub_4049A0+5E↓j
.text:004049F0                 cmp     byte ptr [eax], 0
.text:004049F3                 jnz     short loc_4049F7
.text:004049F5                 mov     dl, 1
.text:004049F7
.text:004049F7 loc_4049F7:                             ; CODE XREF: sub_4049A0+53↑j
.text:004049F7                 add     ebx, 4
.text:004049FA                 mov     eax, [ebx]
.text:004049FC                 test    eax, eax
.text:004049FE                 jnz     short loc_4049F0
.text:00404A00                 test    dl, dl
.text:00404A02                 jz      short loc_404A3D
.text:00404A04                 mov     [esp+1Ch+Code], offset byte_404980 ; char *
.text:00404A0B                 call    sub_406520
.text:00404A10                 mov     [esp+1Ch+Code], offset aInvalidArgumen ; "invalid argument: %s"
.text:00404A17                 mov     ebx, eax
.text:00404A19                 call    ds:libintl_gettext
.text:00404A1F                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:00404A23                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404A2B                 mov     [esp+1Ch+Code], 1 ; Code
.text:00404A32                 mov     [esp+1Ch+var_14], eax ; char *
.text:00404A36                 call    sub_408F80
.text:00404A3B                 jmp     short loc_4049CD
.text:00404A3D ; ---------------------------------------------------------------------------
.text:00404A3D
.text:00404A3D loc_404A3D:                             ; CODE XREF: sub_4049A0+46↑j
.text:00404A3D                                         ; sub_4049A0+62↑j
.text:00404A3D                 call    sub_405A90
.text:00404A3D sub_4049A0      endp
.text:00404A3D
.text:00404A3D ; ---------------------------------------------------------------------------
.text:00404A42                 align 10h
.text:00404A50
.text:00404A50 ; =============== S U B R O U T I N E =======================================
.text:00404A50
.text:00404A50
.text:00404A50 sub_404A50      proc near               ; DATA XREF: sub_404BD0+1B4↓o
.text:00404A50                 sub     eax, 9090002Dh
.text:00404A55                 nop
.text:00404A56                 nop
.text:00404A57                 nop
.text:00404A58                 nop
.text:00404A59                 nop
.text:00404A5A                 nop
.text:00404A5B                 nop
.text:00404A5C                 nop
.text:00404A5D                 nop
.text:00404A5E                 nop
.text:00404A5F                 nop
.text:00404A60                 nop
.text:00404A61                 nop
.text:00404A62                 nop
.text:00404A63                 nop
.text:00404A64                 nop
.text:00404A65                 nop
.text:00404A66                 nop
.text:00404A67                 nop
.text:00404A68                 nop
.text:00404A69                 nop
.text:00404A6A                 nop
.text:00404A6B                 nop
.text:00404A6C                 nop
.text:00404A6D                 nop
.text:00404A6E                 nop
.text:00404A6F                 nop
.text:00404A6F sub_404A50      endp
.text:00404A6F
.text:00404A70
.text:00404A70 ; =============== S U B R O U T I N E =======================================
.text:00404A70
.text:00404A70
.text:00404A70 sub_404A70      proc near               ; DATA XREF: sub_404BD0+3CC↓o
.text:00404A70                 and     eax, 6F203A73h
.text:00404A75                 jo      short loc_404AEB
.text:00404A77                 imul    ebp, [edi+6Eh], 63256020h
.text:00404A7E                 and     eax, 64202773h
.text:00404A83                 outsd
.text:00404A84                 db      65h
.text:00404A84                 jnb     short loc_404AF5
.text:00404A87                 daa
.text:00404A88                 jz      short loc_404AAA
.text:00404A8A                 popa
.text:00404A8B                 insb
.text:00404A8C                 insb
.text:00404A8D                 outsd
.text:00404A8E                 ja      short sub_404AB0
.text:00404A90                 popa
.text:00404A91                 outsb
.text:00404A92                 and     [ecx+72h], ah
.text:00404A95                 db      67h
.text:00404A95                 jnz     near ptr loc_404B04+1
.text:00404A98                 outs    dx, byte ptr gs:[esi]
.text:00404A9A                 jz      short loc_404AA6
.text:00404A9C                 add     [eax-6F6F6F70h], dl
.text:00404AA2                 nop
.text:00404AA3                 nop
.text:00404AA4                 nop
.text:00404AA5                 nop
.text:00404AA6
.text:00404AA6 loc_404AA6:                             ; CODE XREF: sub_404A70+2A↑j
.text:00404AA6                 nop
.text:00404AA7                 nop
.text:00404AA8                 nop
.text:00404AA9                 nop
.text:00404AAA
.text:00404AAA loc_404AAA:                             ; CODE XREF: sub_404A70+18↑j
.text:00404AAA                 nop
.text:00404AAB                 nop
.text:00404AAC                 nop
.text:00404AAD                 nop
.text:00404AAE                 nop
.text:00404AAF                 nop
.text:00404AAF sub_404A70      endp ; sp-analysis failed
.text:00404AAF
.text:00404AB0
.text:00404AB0 ; =============== S U B R O U T I N E =======================================
.text:00404AB0
.text:00404AB0
.text:00404AB0 sub_404AB0      proc near               ; CODE XREF: sub_404A70+1E↑j
.text:00404AB0                                         ; DATA XREF: sub_404BD0:loc_405002↓o
.text:00404AB0                 and     eax, 6F203A73h
.text:00404AB5                 jo      short loc_404B2B
.text:00404AB7                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:00404ABE                 and     eax, 64202773h
.text:00404AC3                 outsd
.text:00404AC4                 db      65h
.text:00404AC4                 jnb     short loc_404B35
.text:00404AC7                 daa
.text:00404AC8                 jz      short loc_404AEA
.text:00404ACA                 popa
.text:00404ACB                 insb
.text:00404ACC                 insb
.text:00404ACD                 outsd
.text:00404ACE                 ja      short sub_404AF0
.text:00404AD0                 popa
.text:00404AD1                 outsb
.text:00404AD2                 and     [ecx+72h], ah
.text:00404AD5                 db      67h
.text:00404AD5                 jnz     loc_404B45
.text:00404AD8                 outs    dx, byte ptr gs:[esi]
.text:00404ADA                 jz      short loc_404AE6
.text:00404ADC                 add     [eax-6F6F6F70h], dl
.text:00404AE2                 nop
.text:00404AE3                 nop
.text:00404AE4                 nop
.text:00404AE5                 nop
.text:00404AE6
.text:00404AE6 loc_404AE6:                             ; CODE XREF: sub_404AB0+2A↑j
.text:00404AE6                 nop
.text:00404AE7                 nop
.text:00404AE8                 nop
.text:00404AE9                 nop
.text:00404AEA
.text:00404AEA loc_404AEA:                             ; CODE XREF: sub_404AB0+18↑j
.text:00404AEA                 nop
.text:00404AEB
.text:00404AEB loc_404AEB:                             ; CODE XREF: sub_404A70+5↑j
.text:00404AEB                 nop
.text:00404AEC                 nop
.text:00404AED                 nop
.text:00404AEE                 nop
.text:00404AEF                 nop
.text:00404AEF sub_404AB0      endp ; sp-analysis failed
.text:00404AEF
.text:00404AF0
.text:00404AF0 ; =============== S U B R O U T I N E =======================================
.text:00404AF0
.text:00404AF0
.text:00404AF0 sub_404AF0      proc near               ; CODE XREF: sub_404AB0+1E↑j
.text:00404AF0                                         ; DATA XREF: sub_404BD0:loc_4050A0↓o ...
.text:00404AF0                 and     eax, 6F203A73h
.text:00404AF5
.text:00404AF5 loc_404AF5:                             ; CODE XREF: sub_404A70+14↑j
.text:00404AF5                 jo      short loc_404B6B
.text:00404AF7                 imul    ebp, [edi+6Eh], 73256020h
.text:00404AFE                 daa
.text:00404AFF                 and     [edx+65h], dh
.text:00404B02                 jno     short near ptr loc_404B78+1
.text:00404B04
.text:00404B04 loc_404B04:                             ; CODE XREF: sub_404A70+25↑j
.text:00404B04                 imul    esi, [edx+65h], 6E612073h
.text:00404B0B                 and     [ecx+72h], ah
.text:00404B0E                 db      67h
.text:00404B0E                 jnz     near ptr loc_404B7C+2
.text:00404B11                 outs    dx, byte ptr gs:[esi]
.text:00404B13                 jz      short loc_404B1F
.text:00404B15                 add     [eax-6F6F6F70h], dl
.text:00404B1B                 nop
.text:00404B1C                 nop
.text:00404B1D                 nop
.text:00404B1E                 nop
.text:00404B1F
.text:00404B1F loc_404B1F:                             ; CODE XREF: sub_404AF0+23↑j
.text:00404B1F                 nop
.text:00404B20                 nop
.text:00404B21                 nop
.text:00404B22                 nop
.text:00404B23                 nop
.text:00404B24                 nop
.text:00404B25                 nop
.text:00404B26                 nop
.text:00404B27                 nop
.text:00404B28                 nop
.text:00404B29                 nop
.text:00404B2A                 nop
.text:00404B2B
.text:00404B2B loc_404B2B:                             ; CODE XREF: sub_404AB0+5↑j
.text:00404B2B                 nop
.text:00404B2C                 nop
.text:00404B2D                 nop
.text:00404B2E                 nop
.text:00404B2F                 nop
.text:00404B2F sub_404AF0      endp
.text:00404B2F
.text:00404B30
.text:00404B30 ; =============== S U B R O U T I N E =======================================
.text:00404B30
.text:00404B30
.text:00404B30 sub_404B30      proc near               ; DATA XREF: sub_404BD0+55E↓o
.text:00404B30                 and     eax, 75203A73h
.text:00404B35
.text:00404B35 loc_404B35:                             ; CODE XREF: sub_404AB0+14↑j
.text:00404B35                 outsb
.text:00404B36                 jb      short near ptr loc_404B97+6
.text:00404B38                 arpl    [edi+67h], bp
.text:00404B3B                 outsb
.text:00404B3C                 imul    edi, [edx+65h], 706F2064h
.text:00404B43                 jz      short loc_404BAE
.text:00404B45
.text:00404B45 loc_404B45:                             ; CODE XREF: sub_404AB0+25↑j
.text:00404B45                 outsd
.text:00404B46                 outsb
.text:00404B47                 and     [eax+25h], ah
.text:00404B4A                 arpl    ds:0A2773h, sp
.text:00404B50
.text:00404B50 loc_404B50:                             ; DATA XREF: sub_404BD0:loc_405171↓o
.text:00404B50                 add     [eax-6F6F6F70h], dl
.text:00404B56                 nop
.text:00404B57                 nop
.text:00404B58                 nop
.text:00404B59                 nop
.text:00404B5A                 nop
.text:00404B5B                 nop
.text:00404B5C                 nop
.text:00404B5D                 nop
.text:00404B5E                 nop
.text:00404B5F                 nop
.text:00404B60                 nop
.text:00404B61                 nop
.text:00404B62                 nop
.text:00404B63                 nop
.text:00404B64                 nop
.text:00404B65                 nop
.text:00404B66                 nop
.text:00404B67                 nop
.text:00404B68                 nop
.text:00404B69                 nop
.text:00404B6A                 nop
.text:00404B6B
.text:00404B6B loc_404B6B:                             ; CODE XREF: sub_404AF0:loc_404AF5↑j
.text:00404B6B                 nop
.text:00404B6C                 nop
.text:00404B6D                 nop
.text:00404B6E                 nop
.text:00404B6F                 nop
.text:00404B6F sub_404B30      endp
.text:00404B6F
.text:00404B70
.text:00404B70 ; =============== S U B R O U T I N E =======================================
.text:00404B70
.text:00404B70
.text:00404B70 sub_404B70      proc near               ; DATA XREF: sub_404BD0:loc_40518A↓o
.text:00404B70                 and     eax, 75203A73h
.text:00404B75                 outsb
.text:00404B76                 jb      short near ptr loc_404BD7+6
.text:00404B78
.text:00404B78 loc_404B78:                             ; CODE XREF: sub_404AF0+12↑j
.text:00404B78                 arpl    [edi+67h], bp
.text:00404B7B                 outsb
.text:00404B7C
.text:00404B7C loc_404B7C:                             ; CODE XREF: sub_404AF0+1E↑j
.text:00404B7C                 imul    edi, [edx+65h], 706F2064h
.text:00404B83                 jz      short loc_404BEE
.text:00404B85                 outsd
.text:00404B86                 outsb
.text:00404B87                 and     [eax+2Dh], ah
.text:00404B8A                 sub     eax, 0A277325h
.text:00404B8F                 add     ds:6F203A73h, ah
.text:00404B95                 jo      short loc_404C0B
.text:00404B97
.text:00404B97 loc_404B97:                             ; CODE XREF: sub_404B30+6↑j
.text:00404B97                 imul    ebp, [edi+6Eh], 71657220h
.text:00404B9E                 jnz     short loc_404C09
.text:00404BA0                 jb      short loc_404C07
.text:00404BA2                 jnb     short loc_404BC4
.text:00404BA4                 popa
.text:00404BA5                 outsb
.text:00404BA6                 and     [ecx+72h], ah
.text:00404BA9                 db      67h
.text:00404BA9                 jnz     near ptr loc_404C17+2
.text:00404BAC                 outs    dx, byte ptr gs:[esi]
.text:00404BAE
.text:00404BAE loc_404BAE:                             ; CODE XREF: sub_404B30+13↑j
.text:00404BAE                 jz      short sub_404BD0
.text:00404BB0                 sub     eax, 6325202Dh
.text:00404BB5                 or      al, [eax]
.text:00404BB7                 nop
.text:00404BB8                 nop
.text:00404BB9                 nop
.text:00404BBA                 nop
.text:00404BBB                 nop
.text:00404BBC                 nop
.text:00404BBD                 nop
.text:00404BBE                 nop
.text:00404BBF                 nop
.text:00404BC0                 nop
.text:00404BC1                 nop
.text:00404BC2                 nop
.text:00404BC3                 nop
.text:00404BC4
.text:00404BC4 loc_404BC4:                             ; CODE XREF: sub_404B70+32↑j
.text:00404BC4                 nop
.text:00404BC5                 nop
.text:00404BC6                 nop
.text:00404BC7                 nop
.text:00404BC8                 nop
.text:00404BC9                 nop
.text:00404BCA                 nop
.text:00404BCB                 nop
.text:00404BCC                 nop
.text:00404BCD                 nop
.text:00404BCE                 nop
.text:00404BCF                 nop
.text:00404BCF sub_404B70      endp ; sp-analysis failed
.text:00404BCF
.text:00404BD0
.text:00404BD0 ; =============== S U B R O U T I N E =======================================
.text:00404BD0
.text:00404BD0
.text:00404BD0 ; int __cdecl sub_404BD0(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00404BD0 sub_404BD0      proc near               ; CODE XREF: sub_404B70:loc_404BAE↑j
.text:00404BD0                                         ; DATA XREF: sub_404BD0:loc_4053E3↓o
.text:00404BD0
.text:00404BD0 Str2            = dword ptr  4
.text:00404BD0 MaxCount        = dword ptr  8
.text:00404BD0 arg_8           = dword ptr  0Ch
.text:00404BD0 arg_C           = dword ptr  10h
.text:00404BD0 arg_1C          = dword ptr  20h
.text:00404BD0 arg_20          = dword ptr  24h
.text:00404BD0 arg_24          = dword ptr  28h
.text:00404BD0 arg_28          = dword ptr  2Ch
.text:00404BD0 arg_2C          = dword ptr  30h
.text:00404BD0 arg_30          = dword ptr  34h
.text:00404BD0 arg_34          = dword ptr  38h
.text:00404BD0 arg_38          = dword ptr  3Ch
.text:00404BD0 arg_3C          = dword ptr  40h
.text:00404BD0 arg_40          = dword ptr  44h
.text:00404BD0 arg_44          = dword ptr  48h
.text:00404BD0 arg_5C          = dword ptr  60h
.text:00404BD0 arg_60          = dword ptr  64h
.text:00404BD0 Str             = dword ptr  68h
.text:00404BD0 arg_68          = dword ptr  6Ch
.text:00404BD0 arg_6C          = dword ptr  70h
.text:00404BD0 arg_70          = dword ptr  74h
.text:00404BD0 arg_74          = dword ptr  78h
.text:00404BD0
.text:00404BD0 ; FUNCTION CHUNK AT .text:00404C4B SIZE 00000053 BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:00404CB4 SIZE 0000014B BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:00404E00 SIZE 0000023A BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:00405040 SIZE 00000099 BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:004050E0 SIZE 000000DF BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:004051C0 SIZE 0000025B BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:00405420 SIZE 000001AE BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:004055D0 SIZE 000000F9 BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:004056D0 SIZE 000000CE BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:004057A0 SIZE 0000003A BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:004057E0 SIZE 0000000B BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:004057F0 SIZE 00000019 BYTES
.text:00404BD0 ; FUNCTION CHUNK AT .text:00405810 SIZE 00000011 BYTES
.text:00404BD0
.text:00404BD0                 and     eax, 6F203A73h
.text:00404BD5                 jo      short loc_404C4B
.text:00404BD7
.text:00404BD7 loc_404BD7:                             ; CODE XREF: sub_404B70+6↑j
.text:00404BD7                 imul    ebp, [edi+6Eh], 572D6020h
.text:00404BDE                 and     ds:64202773h, ah
.text:00404BE4                 outsd
.text:00404BE5                 db      65h
.text:00404BE5                 jnb     short near ptr loc_404C54+2
.text:00404BE8                 daa
.text:00404BE9                 jz      short loc_404C0B
.text:00404BEB                 popa
.text:00404BEC                 insb
.text:00404BED                 insb
.text:00404BEE
.text:00404BEE loc_404BEE:                             ; CODE XREF: sub_404B70+13↑j
.text:00404BEE                 outsd
.text:00404BEF                 ja      short near ptr sub_404C10+1
.text:00404BF1                 popa
.text:00404BF2                 outsb
.text:00404BF3                 and     [ecx+72h], ah
.text:00404BF6                 db      67h
.text:00404BF6                 jnz     near ptr loc_404C65+1
.text:00404BF9                 outs    dx, byte ptr gs:[esi]
.text:00404BFB                 jz      short loc_404C07
.text:00404BFD                 add     [eax-6F6F6F70h], dl
.text:00404C03                 nop
.text:00404C04                 nop
.text:00404C05                 nop
.text:00404C06                 nop
.text:00404C07
.text:00404C07 loc_404C07:                             ; CODE XREF: sub_404B70+30↑j
.text:00404C07                                         ; sub_404BD0+2B↑j
.text:00404C07                 nop
.text:00404C08                 nop
.text:00404C09
.text:00404C09 loc_404C09:                             ; CODE XREF: sub_404B70+2E↑j
.text:00404C09                 nop
.text:00404C0A                 nop
.text:00404C0B
.text:00404C0B loc_404C0B:                             ; CODE XREF: sub_404B70+25↑j
.text:00404C0B                                         ; sub_404BD0+19↑j
.text:00404C0B                 nop
.text:00404C0C                 nop
.text:00404C0D                 nop
.text:00404C0E                 nop
.text:00404C0F                 nop
.text:00404C0F sub_404BD0      endp ; sp-analysis failed
.text:00404C0F
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10
.text:00404C10 sub_404C10      proc near               ; CODE XREF: sub_404BD0+1F↑j
.text:00404C10                                         ; DATA XREF: sub_404BD0:loc_4054CF↓o
.text:00404C10
.text:00404C10 arg_A4          = dword ptr  0A8h
.text:00404C10 arg_B8          = dword ptr  0BCh
.text:00404C10
.text:00404C10 ; FUNCTION CHUNK AT .text:00404CAA SIZE 0000000A BYTES
.text:00404C10
.text:00404C10                 and     eax, 6F203A73h
.text:00404C15                 jo      short loc_404C8B
.text:00404C17
.text:00404C17 loc_404C17:                             ; CODE XREF: sub_404B70+39↑j
.text:00404C17                 imul    ebp, [edi+6Eh], 572D6020h
.text:00404C1E                 and     ds:69202773h, ah
.text:00404C24                 jnb     short near ptr loc_404C43+3
.text:00404C26                 popa
.text:00404C27                 insd
.text:00404C28                 bound   ebp, [ecx+67h]
.text:00404C2B                 jnz     short near ptr loc_404C98+4
.text:00404C2D                 jnz     short near ptr loc_404CA1+1
.text:00404C2F                 or      al, [eax]
.text:00404C31
.text:00404C31 loc_404C31:                             ; DATA XREF: sub_404BD0+A0F↓o
.text:00404C31                 and     eax, 69203A73h
.text:00404C36                 insb
.text:00404C37                 insb
.text:00404C38                 db      65h, 67h
.text:00404C38                 popa
.text:00404C3B                 insb
.text:00404C3C                 and     [edi+70h], ch
.text:00404C3F                 jz      short loc_404CAA
.text:00404C41                 outsd
.text:00404C42                 outsb
.text:00404C43
.text:00404C43 loc_404C43:                             ; CODE XREF: sub_404C10+14↑j
.text:00404C43                 and     ds:6325202Dh, ch
.text:00404C49                 or      al, [eax]
.text:00404C49 sub_404C10      endp ; sp-analysis failed
.text:00404C49
.text:00404C4B ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:00404C4B
.text:00404C4B loc_404C4B:                             ; CODE XREF: sub_404BD0+5↑j
.text:00404C4B                                         ; DATA XREF: sub_404BD0:loc_405617↓o
.text:00404C4B                 and     eax, 69203A73h
.text:00404C50                 outsb
.text:00404C51                 jbe     short loc_404CB4
.text:00404C53                 insb
.text:00404C54
.text:00404C54 loc_404C54:                             ; CODE XREF: sub_404BD0+15↑j
.text:00404C54                 imul    esp, [eax+6Fh], 6F697470h
.text:00404C5C                 outsb
.text:00404C5D                 and     ds:6325202Dh, ch
.text:00404C63                 or      al, [eax]
.text:00404C65
.text:00404C65 loc_404C65:                             ; CODE XREF: sub_404BD0+26↑j
.text:00404C65                                         ; DATA XREF: sub_404BD0:loc_40563E↓o
.text:00404C65                 and     eax, 6F203A73h
.text:00404C6A                 jo      short near ptr loc_404CDF+1
.text:00404C6C                 imul    ebp, [edi+6Eh], 73256020h
.text:00404C73                 daa
.text:00404C74                 and     [ecx+73h], ch
.text:00404C77                 and     [ecx+6Dh], ah
.text:00404C7A                 bound   ebp, [ecx+67h]
.text:00404C7D                 jnz     short near ptr loc_404CEC+2
.text:00404C7F                 jnz     short near ptr loc_404CF3+1
.text:00404C81                 or      al, [eax]
.text:00404C83
.text:00404C83 loc_404C83:                             ; DATA XREF: sub_404BD0:loc_4057F0↓o
.text:00404C83                 push    eax
.text:00404C84                 dec     edi
.text:00404C85                 push    ebx
.text:00404C86                 dec     ecx
.text:00404C87                 pop     eax
.text:00404C88                 dec     esp
.text:00404C89                 pop     ecx
.text:00404C8A                 pop     edi
.text:00404C8B
.text:00404C8B loc_404C8B:                             ; CODE XREF: sub_404C10+5↑j
.text:00404C8B                 inc     ebx
.text:00404C8C                 dec     edi
.text:00404C8D                 push    edx
.text:00404C8E                 push    edx
.text:00404C8F                 inc     ebp
.text:00404C90                 inc     ebx
.text:00404C91                 push    esp
.text:00404C92                 add     [ebp+0B6h], cl
.text:00404C98
.text:00404C98 loc_404C98:                             ; CODE XREF: sub_404C10+1B↑j
.text:00404C98                 add     [ebp+27BCh], cl
.text:00404C98 ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:00404C98 ; ---------------------------------------------------------------------------
.text:00404C9E                 dw 0
.text:00404CA0 ; ---------------------------------------------------------------------------
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: sub_405830+5A↓p
.text:00404CA0                                         ; .text:0040591A↓p ...
.text:00404CA0                 push    ebp
.text:00404CA1
.text:00404CA1 loc_404CA1:                             ; CODE XREF: sub_404C10+1D↑j
.text:00404CA1                 mov     eax, 0FFFFFFFFh
.text:00404CA6                 push    edi
.text:00404CA7                 push    esi
.text:00404CA8                 push    ebx
.text:00404CA8 ; ---------------------------------------------------------------------------
.text:00404CA9                 db 83h
.text:00404CAA ; ---------------------------------------------------------------------------
.text:00404CAA ; START OF FUNCTION CHUNK FOR sub_404C10
.text:00404CAA
.text:00404CAA loc_404CAA:                             ; CODE XREF: sub_404C10+2F↑j
.text:00404CAA                 in      al, dx
.text:00404CAB                 dec     esp
.text:00404CAC                 mov     esi, [esp-40h+arg_A4]
.text:00404CB0                 mov     ebp, [esp-40h+arg_B8]
.text:00404CB0 ; END OF FUNCTION CHUNK FOR sub_404C10
.text:00404CB4 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:00404CB4
.text:00404CB4 loc_404CB4:                             ; CODE XREF: sub_404BD0+81↑j
.text:00404CB4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00404CB7                 mov     ebx, [ebp+4]
.text:00404CBA                 setz    dl
.text:00404CBD                 movzx   ecx, dl
.text:00404CC0                 dec     ecx
.text:00404CC1                 and     ecx, ebx
.text:00404CC3                 mov     [esp+arg_44], ecx
.text:00404CC7                 mov     ecx, [esp+arg_5C]
.text:00404CCB                 test    ecx, ecx
.text:00404CCD                 jle     loc_404DF7
.text:00404CD3                 mov     dword ptr [ebp+0Ch], 0
.text:00404CDA                 mov     ebx, [ebp+0]
.text:00404CDD                 test    ebx, ebx
.text:00404CDF
.text:00404CDF loc_404CDF:                             ; CODE XREF: sub_404BD0+9A↑j
.text:00404CDF                 jz      loc_405810
.text:00404CE5                 mov     edi, [ebp+10h]
.text:00404CE8                 test    edi, edi
.text:00404CEA                 jnz     short loc_404D43
.text:00404CEC
.text:00404CEC loc_404CEC:                             ; CODE XREF: sub_404BD0+AD↑j
.text:00404CEC                 lea     esi, [esi+0]
.text:00404CF0
.text:00404CF0 loc_404CF0:                             ; CODE XREF: sub_404BD0+C4C↓j
.text:00404CF0                 mov     [ebp+24h], ebx
.text:00404CF3
.text:00404CF3 loc_404CF3:                             ; CODE XREF: sub_404BD0+AF↑j
.text:00404CF3                 mov     esi, [esp+Str]
.text:00404CF7                 mov     [ebp+20h], ebx
.text:00404CFA                 mov     ecx, [esp+arg_74]
.text:00404CFE                 xor     ebx, ebx
.text:00404D00                 mov     dword ptr [ebp+14h], 0
.text:00404D07                 test    ecx, ecx
.text:00404D09                 jz      loc_4057F0
.text:00404D0F
.text:00404D0F loc_404D0F:                             ; CODE XREF: sub_404BD0+C34↓j
.text:00404D0F                 mov     ebx, 1
.text:00404D14
.text:00404D14 loc_404D14:                             ; CODE XREF: sub_404BD0+C2E↓j
.text:00404D14                 mov     [ebp+1Ch], ebx
.text:00404D17                 mov     ecx, [esp+Str]
.text:00404D1B                 movzx   eax, byte ptr [ecx]
.text:00404D1E                 cmp     al, 2Dh ; '-'
.text:00404D20                 jz      loc_4057E0
.text:00404D26                 cmp     al, 2Bh ; '+'
.text:00404D28                 jz      loc_4057C9
.text:00404D2E                 xor     edx, edx
.text:00404D30                 test    ebx, ebx
.text:00404D32                 setz    dl
.text:00404D35                 mov     [ebp+18h], edx
.text:00404D38
.text:00404D38 loc_404D38:                             ; CODE XREF: sub_404BD0+C05↓j
.text:00404D38                 mov     [esp+Str], esi
.text:00404D3C                 mov     dword ptr [ebp+10h], 1
.text:00404D43
.text:00404D43 loc_404D43:                             ; CODE XREF: sub_404BD0+11A↑j
.text:00404D43                 mov     eax, [ebp+14h]
.text:00404D46                 test    eax, eax
.text:00404D48                 jz      short loc_404D53
.text:00404D4A                 cmp     byte ptr [eax], 0
.text:00404D4D                 jnz     loc_404E30
.text:00404D53
.text:00404D53 loc_404D53:                             ; CODE XREF: sub_404BD0+178↑j
.text:00404D53                 mov     ebx, [ebp+0]
.text:00404D56                 cmp     [ebp+24h], ebx
.text:00404D59                 jle     short loc_404D5E
.text:00404D5B                 mov     [ebp+24h], ebx
.text:00404D5E
.text:00404D5E loc_404D5E:                             ; CODE XREF: sub_404BD0+189↑j
.text:00404D5E                 cmp     [ebp+20h], ebx
.text:00404D61                 jle     short loc_404D66
.text:00404D63                 mov     [ebp+20h], ebx
.text:00404D66
.text:00404D66 loc_404D66:                             ; CODE XREF: sub_404BD0+191↑j
.text:00404D66                 cmp     dword ptr [ebp+18h], 1
.text:00404D6A                 jz      loc_405740
.text:00404D70
.text:00404D70 loc_404D70:                             ; CODE XREF: sub_404BD0+BE3↓j
.text:00404D70                 cmp     ebx, [esp+arg_5C]
.text:00404D74                 jz      loc_405724
.text:00404D7A                 cld
.text:00404D7B                 mov     ecx, [esp+arg_60]
.text:00404D7F                 mov     edx, 3
.text:00404D84                 mov     edi, offset sub_404A50
.text:00404D89                 mov     esi, [ecx+ebx*4]
.text:00404D8C                 mov     ecx, edx
.text:00404D8E                 repe cmpsb
.text:00404D90                 jnz     short loc_404DCC
.text:00404D92                 mov     edx, [ebp+24h]
.text:00404D95                 lea     eax, [ebx+1]
.text:00404D98                 cmp     [ebp+20h], edx
.text:00404D9B                 mov     [ebp+0], eax
.text:00404D9E                 jz      loc_405738
.text:00404DA4                 cmp     edx, eax
.text:00404DA6                 jz      short loc_404DC0
.text:00404DA8                 mov     [esp+Str2], ebp
.text:00404DAC                 mov     ebx, [esp+arg_60]
.text:00404DB0                 mov     [esp+0], ebx
.text:00404DB3                 call    sub_405950
.text:00404DB8                 nop
.text:00404DB9                 lea     esi, [esi+0]
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404BD0+1D6↑j
.text:00404DC0                                         ; sub_404BD0+B6B↓j
.text:00404DC0                 mov     eax, [esp+arg_5C]
.text:00404DC4                 mov     ebx, eax
.text:00404DC6                 mov     [ebp+24h], eax
.text:00404DC9                 mov     [ebp+0], eax
.text:00404DCC
.text:00404DCC loc_404DCC:                             ; CODE XREF: sub_404BD0+1C0↑j
.text:00404DCC                 cmp     ebx, [esp+arg_5C]
.text:00404DD0                 jz      loc_405724
.text:00404DD6                 mov     esi, [esp+arg_60]
.text:00404DDA                 mov     eax, [esi+ebx*4]
.text:00404DDD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404DE0                 jz      short loc_404E07
.text:00404DE2
.text:00404DE2 loc_404DE2:                             ; CODE XREF: sub_404BD0+23D↓j
.text:00404DE2                 mov     edx, [ebp+18h]
.text:00404DE5                 test    edx, edx
.text:00404DE7                 jz      short loc_404E00
.text:00404DE9                 mov     [ebp+0Ch], eax
.text:00404DEC                 lea     edi, [ebx+1]
.text:00404DEF                 mov     eax, 1
.text:00404DF4                 mov     [ebp+0], edi
.text:00404DF7
.text:00404DF7 loc_404DF7:                             ; CODE XREF: sub_404BD0+FD↑j
.text:00404DF7                                         ; sub_404BD0+235↓j ...
.text:00404DF7                 add     esp, 4Ch
.text:00404DFA                 pop     ebx
.text:00404DFB                 pop     esi
.text:00404DFC                 pop     edi
.text:00404DFD                 pop     ebp
.text:00404DFE                 retn
.text:00404DFE ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:00404DFE ; ---------------------------------------------------------------------------
.text:00404DFF                 align 10h
.text:00404E00 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_404BD0+217↑j
.text:00404E00                                         ; sub_404BD0+B5A↓j ...
.text:00404E00                 mov     eax, 0FFFFFFFFh
.text:00404E05                 jmp     short loc_404DF7
.text:00404E07 ; ---------------------------------------------------------------------------
.text:00404E07
.text:00404E07 loc_404E07:                             ; CODE XREF: sub_404BD0+210↑j
.text:00404E07                 movzx   edx, byte ptr [eax+1]
.text:00404E0B                 test    dl, dl
.text:00404E0D                 jz      short loc_404DE2
.text:00404E0F                 mov     ebx, [esp+arg_68]
.text:00404E13                 xor     ecx, ecx
.text:00404E15                 test    ebx, ebx
.text:00404E17                 jz      short loc_404E22
.text:00404E19                 cmp     dl, 2Dh ; '-'
.text:00404E1C                 jz      loc_40571A
.text:00404E22
.text:00404E22 loc_404E22:                             ; CODE XREF: sub_404BD0+247↑j
.text:00404E22                                         ; sub_404BD0+B4F↓j
.text:00404E22                 lea     esi, [ecx+eax+1]
.text:00404E26                 mov     [ebp+14h], esi
.text:00404E29                 lea     esi, [esi+0]
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404BD0+17D↑j
.text:00404E30                 mov     ecx, [esp+arg_68]
.text:00404E34                 test    ecx, ecx
.text:00404E36                 jz      loc_4051C0
.text:00404E3C                 mov     edx, [ebp+0]
.text:00404E3F                 mov     edi, [esp+arg_60]
.text:00404E43                 mov     eax, [edi+edx*4]
.text:00404E46                 movzx   edx, byte ptr [eax+1]
.text:00404E4A                 cmp     dl, 2Dh ; '-'
.text:00404E4D                 jz      short loc_404E65
.text:00404E4F                 mov     ebx, [esp+arg_70]
.text:00404E53                 test    ebx, ebx
.text:00404E55                 jz      loc_4051C0
.text:00404E5B                 cmp     byte ptr [eax+2], 0
.text:00404E5F                 jz      loc_4056FA
.text:00404E65
.text:00404E65 loc_404E65:                             ; CODE XREF: sub_404BD0+27D↑j
.text:00404E65                                         ; sub_404BD0+B45↓j
.text:00404E65                 mov     [esp+arg_40], 0
.text:00404E6D                 mov     ecx, [ebp+14h]
.text:00404E70                 mov     [esp+arg_3C], 0
.text:00404E78                 mov     [esp+arg_38], 0
.text:00404E80                 mov     edi, ecx
.text:00404E82                 mov     [esp+arg_34], 0FFFFFFFFh
.text:00404E8A                 movzx   eax, byte ptr [ecx]
.text:00404E8D                 test    al, al
.text:00404E8F                 jz      short loc_404EAC
.text:00404E91                 cmp     al, 3Dh ; '='
.text:00404E93                 jz      short loc_404EAC
.text:00404E95                 lea     esi, [esi+0]
.text:00404E99                 lea     edi, [edi+0]
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: sub_404BD0+2DA↓j
.text:00404EA0                 inc     edi
.text:00404EA1                 movzx   eax, byte ptr [edi]
.text:00404EA4                 test    al, al
.text:00404EA6                 jz      short loc_404EAC
.text:00404EA8                 cmp     al, 3Dh ; '='
.text:00404EAA                 jnz     short loc_404EA0
.text:00404EAC
.text:00404EAC loc_404EAC:                             ; CODE XREF: sub_404BD0+2BF↑j
.text:00404EAC                                         ; sub_404BD0+2C3↑j ...
.text:00404EAC                 mov     [esp+arg_30], 0
.text:00404EB4                 mov     esi, [esp+arg_68]
.text:00404EB8                 mov     ebx, [esi]
.text:00404EBA                 test    ebx, ebx
.text:00404EBC                 mov     edx, ebx
.text:00404EBE                 jz      loc_4050E0
.text:00404EC4                 lea     esi, [esi+0]
.text:00404ECA                 lea     edi, [edi+0]
.text:00404ED0
.text:00404ED0 loc_404ED0:                             ; CODE XREF: sub_404BD0+32E↓j
.text:00404ED0                 mov     [esp+Str2], ecx ; Str2
.text:00404ED4                 mov     ebx, edi
.text:00404ED6                 sub     ebx, ecx
.text:00404ED8                 mov     [esp+MaxCount], ebx ; MaxCount
.text:00404EDC                 mov     [esp+0], edx    ; Str1
.text:00404EDF                 call    strncmp
.text:00404EE4                 test    eax, eax
.text:00404EE6                 jz      loc_405676
.text:00404EEC
.text:00404EEC loc_404EEC:                             ; CODE XREF: sub_404BD0+ADF↓j
.text:00404EEC                                         ; sub_404BD0+AF4↓j ...
.text:00404EEC                 inc     [esp+arg_30]
.text:00404EF0                 add     esi, 10h
.text:00404EF3                 mov     ecx, [esi]
.text:00404EF5                 test    ecx, ecx
.text:00404EF7                 mov     edx, ecx
.text:00404EF9                 jz      short loc_404F00
.text:00404EFB                 mov     ecx, [ebp+14h]
.text:00404EFE                 jmp     short loc_404ED0
.text:00404F00 ; ---------------------------------------------------------------------------
.text:00404F00
.text:00404F00 loc_404F00:                             ; CODE XREF: sub_404BD0+329↑j
.text:00404F00                                         ; sub_404BD0+B25↓j
.text:00404F00                 mov     esi, [esp+arg_38]
.text:00404F04                 test    esi, esi
.text:00404F06                 jz      short loc_404F14
.text:00404F08                 mov     edx, [esp+arg_3C]
.text:00404F0C                 test    edx, edx
.text:00404F0E                 jz      loc_405620
.text:00404F14
.text:00404F14 loc_404F14:                             ; CODE XREF: sub_404BD0+336↑j
.text:00404F14                 mov     eax, [esp+arg_40]
.text:00404F18                 test    eax, eax
.text:00404F1A                 jz      loc_4050E0
.text:00404F20                 mov     ecx, [ebp+0]
.text:00404F23                 lea     eax, [ecx+1]
.text:00404F26                 mov     [ebp+0], eax
.text:00404F29                 cmp     byte ptr [edi], 0
.text:00404F2C                 jz      loc_405040
.text:00404F32                 mov     ecx, [esp+arg_40]
.text:00404F36                 mov     esi, [ecx+4]
.text:00404F39                 test    esi, esi
.text:00404F3B                 jz      short loc_404F86
.text:00404F3D                 lea     ebx, [edi+1]
.text:00404F40                 mov     [ebp+0Ch], ebx
.text:00404F43
.text:00404F43 loc_404F43:                             ; CODE XREF: sub_404BD0+478↓j
.text:00404F43                                         ; sub_404BD0+494↓j
.text:00404F43                 mov     ebx, [ebp+14h]
.text:00404F46                 mov     [esp+0], ebx    ; Str
.text:00404F49                 call    strlen
.text:00404F4E                 add     [ebp+14h], eax
.text:00404F51                 mov     esi, [esp+arg_6C]
.text:00404F55                 test    esi, esi
.text:00404F57                 jz      short loc_404F63
.text:00404F59                 mov     ebp, [esp+arg_34]
.text:00404F5D                 mov     ecx, [esp+arg_6C]
.text:00404F61                 mov     [ecx], ebp
.text:00404F63
.text:00404F63 loc_404F63:                             ; CODE XREF: sub_404BD0+387↑j
.text:00404F63                 mov     eax, [esp+arg_40]
.text:00404F67                 mov     ecx, [eax+8]
.text:00404F6A                 test    ecx, ecx
.text:00404F6C                 jnz     short loc_404F7A
.text:00404F6E                 mov     ecx, [esp+arg_40]
.text:00404F72
.text:00404F72 loc_404F72:                             ; CODE XREF: sub_404BD0+7F3↓j
.text:00404F72                 mov     eax, [ecx+0Ch]
.text:00404F75                 jmp     loc_404DF7
.text:00404F7A ; ---------------------------------------------------------------------------
.text:00404F7A
.text:00404F7A loc_404F7A:                             ; CODE XREF: sub_404BD0+39C↑j
.text:00404F7A                                         ; sub_404BD0+7E9↓j
.text:00404F7A                 mov     esi, [eax+0Ch]
.text:00404F7D                 xor     eax, eax
.text:00404F7F                 mov     [ecx], esi
.text:00404F81                 jmp     loc_404DF7
.text:00404F86 ; ---------------------------------------------------------------------------
.text:00404F86
.text:00404F86 loc_404F86:                             ; CODE XREF: sub_404BD0+36B↑j
.text:00404F86                 mov     edi, [esp+arg_44]
.text:00404F8A                 test    edi, edi
.text:00404F8C                 jz      short loc_404FE0
.text:00404F8E                 mov     esi, [esp+arg_60]
.text:00404F92                 mov     edx, [esi+eax*4-4]
.text:00404F96                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00404F9A                 jz      short loc_405002
.text:00404F9C                 mov     dword ptr [esp+0], offset sub_404A70
.text:00404FA3                 call    ds:libintl_gettext
.text:00404FA9                 mov     edx, [esp+arg_40]
.text:00404FAD                 mov     edi, [edx]
.text:00404FAF                 mov     [esp+arg_C], edi
.text:00404FB3                 mov     ebx, [ebp+0]
.text:00404FB6                 mov     edi, [esp+arg_60]
.text:00404FBA                 mov     ecx, [edi+ebx*4-4]
.text:00404FBE                 movsx   esi, byte ptr [ecx]
.text:00404FC1                 mov     ecx, ds:_iob
.text:00404FC7                 add     ecx, 40h ; '@'
.text:00404FCA                 mov     [esp+arg_8], esi
.text:00404FCE                 mov     ebx, [edi]
.text:00404FD0                 mov     [esp+Str2], eax ; Format
.text:00404FD4                 mov     [esp+0], ecx    ; Stream
.text:00404FD7                 mov     [esp+MaxCount], ebx
.text:00404FDB                 call    fprintf
.text:00404FE0
.text:00404FE0 loc_404FE0:                             ; CODE XREF: sub_404BD0+3BC↑j
.text:00404FE0                                         ; sub_404BD0+468↓j
.text:00404FE0                 mov     ecx, [ebp+14h]
.text:00404FE3                 mov     [esp+0], ecx    ; Str
.text:00404FE6                 call    strlen
.text:00404FEB                 add     [ebp+14h], eax
.text:00404FEE                 mov     eax, [esp+arg_40]
.text:00404FF2                 mov     esi, [eax+0Ch]
.text:00404FF5                 mov     [ebp+8], esi
.text:00404FF8
.text:00404FF8 loc_404FF8:                             ; CODE XREF: sub_404BD0+5B5↓j
.text:00404FF8                                         ; sub_404BD0+80E↓j ...
.text:00404FF8                 mov     eax, 3Fh ; '?'
.text:00404FFD                 jmp     loc_404DF7
.text:00405002 ; ---------------------------------------------------------------------------
.text:00405002
.text:00405002 loc_405002:                             ; CODE XREF: sub_404BD0+3CA↑j
.text:00405002                 mov     dword ptr [esp+0], offset sub_404AB0
.text:00405009                 call    ds:libintl_gettext
.text:0040500F                 mov     edx, [esp+arg_40]
.text:00405013                 mov     edi, [esp+arg_60]
.text:00405017                 mov     ecx, ds:_iob
.text:0040501D                 mov     esi, [edx]
.text:0040501F                 add     ecx, 40h ; '@'
.text:00405022                 mov     [esp+arg_8], esi
.text:00405026                 mov     ebx, [edi]
.text:00405028                 mov     [esp+Str2], eax ; Format
.text:0040502C                 mov     [esp+0], ecx    ; Stream
.text:0040502F                 mov     [esp+MaxCount], ebx
.text:00405033                 call    fprintf
.text:00405038                 jmp     short loc_404FE0
.text:00405038 ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:00405038 ; ---------------------------------------------------------------------------
.text:0040503A                 align 10h
.text:00405040 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:00405040
.text:00405040 loc_405040:                             ; CODE XREF: sub_404BD0+35C↑j
.text:00405040                 mov     ebx, [esp+arg_40]
.text:00405044                 cmp     dword ptr [ebx+4], 1
.text:00405048                 jnz     loc_404F43
.text:0040504E                 cmp     eax, [esp+arg_5C]
.text:00405052                 jge     short loc_405069
.text:00405054                 mov     ebx, [esp+arg_60]
.text:00405058                 lea     edi, [ecx+2]
.text:0040505B                 mov     [ebp+0], edi
.text:0040505E                 mov     esi, [ebx+eax*4]
.text:00405061                 mov     [ebp+0Ch], esi
.text:00405064                 jmp     loc_404F43
.text:00405069 ; ---------------------------------------------------------------------------
.text:00405069
.text:00405069 loc_405069:                             ; CODE XREF: sub_404BD0+482↑j
.text:00405069                 mov     edx, [esp+arg_44]
.text:0040506D                 test    edx, edx
.text:0040506F                 jnz     short loc_4050A0
.text:00405071
.text:00405071 loc_405071:                             ; CODE XREF: sub_404BD0+507↓j
.text:00405071                 mov     edx, [ebp+14h]
.text:00405074                 mov     [esp+0], edx    ; Str
.text:00405077                 call    strlen
.text:0040507C                 add     [ebp+14h], eax
.text:0040507F                 mov     eax, [esp+arg_40]
.text:00405083                 mov     edi, [eax+0Ch]
.text:00405086                 mov     [ebp+8], edi
.text:00405089
.text:00405089 loc_405089:                             ; CODE XREF: sub_404BD0+892↓j
.text:00405089                 mov     ebp, [esp+Str]
.text:0040508D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00405091                 setnz   bl
.text:00405094                 movzx   esi, bl
.text:00405097                 lea     eax, [esi+esi*4+3Ah]
.text:0040509B                 jmp     loc_404DF7
.text:004050A0 ; ---------------------------------------------------------------------------
.text:004050A0
.text:004050A0 loc_4050A0:                             ; CODE XREF: sub_404BD0+49F↑j
.text:004050A0                 mov     dword ptr [esp+0], offset sub_404AF0
.text:004050A7                 call    ds:libintl_gettext
.text:004050AD                 mov     ecx, [ebp+0]
.text:004050B0                 mov     esi, [esp+arg_60]
.text:004050B4                 mov     ebx, [esi+ecx*4-4]
.text:004050B8                 mov     ecx, ds:_iob
.text:004050BE                 mov     [esp+arg_8], ebx
.text:004050C2                 mov     edi, [esi]
.text:004050C4                 add     ecx, 40h ; '@'
.text:004050C7                 mov     [esp+Str2], eax ; Format
.text:004050CB                 mov     [esp+0], ecx    ; Stream
.text:004050CE                 mov     [esp+MaxCount], edi
.text:004050D2                 call    fprintf
.text:004050D7                 jmp     short loc_405071
.text:004050D7 ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:004050D7 ; ---------------------------------------------------------------------------
.text:004050D9                 align 10h
.text:004050E0 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:004050E0
.text:004050E0 loc_4050E0:                             ; CODE XREF: sub_404BD0+2EE↑j
.text:004050E0                                         ; sub_404BD0+34A↑j
.text:004050E0                 mov     eax, [esp+arg_70]
.text:004050E4                 test    eax, eax
.text:004050E6                 jz      short loc_405116
.text:004050E8                 mov     ebx, [ebp+0]
.text:004050EB                 mov     esi, [esp+arg_60]
.text:004050EF                 mov     edi, [esi+ebx*4]
.text:004050F2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004050F6                 jz      short loc_405119
.text:004050F8                 mov     ecx, [ebp+14h]
.text:004050FB                 mov     edx, [esp+Str]
.text:004050FF                 movsx   ebx, byte ptr [ecx]
.text:00405102                 mov     [esp+0], edx    ; Str
.text:00405105                 mov     [esp+Str2], ebx ; Val
.text:00405109                 call    strchr
.text:0040510E                 test    eax, eax
.text:00405110                 jnz     loc_4051C0
.text:00405116
.text:00405116 loc_405116:                             ; CODE XREF: sub_404BD0+516↑j
.text:00405116                 mov     ebx, [ebp+0]
.text:00405119
.text:00405119 loc_405119:                             ; CODE XREF: sub_404BD0+526↑j
.text:00405119                 mov     eax, [esp+arg_44]
.text:0040511D                 test    eax, eax
.text:0040511F                 jz      short loc_405171
.text:00405121                 mov     esi, [esp+arg_60]
.text:00405125                 mov     edi, [esi+ebx*4]
.text:00405128                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040512C                 jz      short loc_40518A
.text:0040512E                 mov     dword ptr [esp+0], offset sub_404B30
.text:00405135                 call    ds:libintl_gettext
.text:0040513B                 mov     edi, [ebp+14h]
.text:0040513E                 mov     [esp+arg_C], edi
.text:00405142                 mov     ebx, [ebp+0]
.text:00405145                 mov     edi, [esp+arg_60]
.text:00405149                 mov     esi, [edi+ebx*4]
.text:0040514C                 movsx   ecx, byte ptr [esi]
.text:0040514F                 mov     esi, ds:_iob
.text:00405155                 add     esi, 40h ; '@'
.text:00405158                 mov     [esp+arg_8], ecx
.text:0040515C                 mov     ebx, [edi]
.text:0040515E                 mov     [esp+Str2], eax ; Format
.text:00405162                 mov     [esp+0], esi    ; Stream
.text:00405165                 mov     [esp+MaxCount], ebx
.text:00405169                 call    fprintf
.text:0040516E
.text:0040516E loc_40516E:                             ; CODE XREF: sub_404BD0+5ED↓j
.text:0040516E                 mov     ebx, [ebp+0]
.text:00405171
.text:00405171 loc_405171:                             ; CODE XREF: sub_404BD0+54F↑j
.text:00405171                 mov     dword ptr [ebp+14h], offset loc_404B50
.text:00405178                 lea     edx, [ebx+1]
.text:0040517B                 mov     [ebp+0], edx
.text:0040517E
.text:0040517E loc_40517E:                             ; CODE XREF: sub_404BD0+A69↓j
.text:0040517E                 mov     dword ptr [ebp+8], 0
.text:00405185                 jmp     loc_404FF8
.text:0040518A ; ---------------------------------------------------------------------------
.text:0040518A
.text:0040518A loc_40518A:                             ; CODE XREF: sub_404BD0+55C↑j
.text:0040518A                 mov     dword ptr [esp+0], offset sub_404B70
.text:00405191                 call    ds:libintl_gettext
.text:00405197                 mov     ecx, [ebp+14h]
.text:0040519A                 mov     edi, [esp+arg_60]
.text:0040519E                 mov     edx, ds:_iob
.text:004051A4                 mov     [esp+arg_8], ecx
.text:004051A8                 mov     ebx, [edi]
.text:004051AA                 add     edx, 40h ; '@'
.text:004051AD                 mov     [esp+Str2], eax ; Format
.text:004051B1                 mov     [esp+MaxCount], ebx
.text:004051B5                 mov     [esp+0], edx    ; Stream
.text:004051B8                 call    fprintf
.text:004051BD                 jmp     short loc_40516E
.text:004051BD ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:004051BD ; ---------------------------------------------------------------------------
.text:004051BF                 align 10h
.text:004051C0 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_404BD0+266↑j
.text:004051C0                                         ; sub_404BD0+285↑j ...
.text:004051C0                 mov     esi, [ebp+14h]
.text:004051C3                 movzx   ebx, byte ptr [esi]
.text:004051C6                 inc     esi
.text:004051C7                 mov     [ebp+14h], esi
.text:004051CA                 mov     ecx, [esp+Str]
.text:004051CE                 movsx   esi, bl
.text:004051D1                 mov     [esp+Str2], esi ; Val
.text:004051D5                 mov     edi, esi
.text:004051D7                 mov     [esp+0], ecx    ; Str
.text:004051DA                 call    strchr
.text:004051DF                 mov     ecx, [ebp+14h]
.text:004051E2                 cmp     byte ptr [ecx], 0
.text:004051E5                 jnz     short loc_4051EA
.text:004051E7                 inc     dword ptr [ebp+0]
.text:004051EA
.text:004051EA loc_4051EA:                             ; CODE XREF: sub_404BD0+615↑j
.text:004051EA                 test    eax, eax
.text:004051EC                 jz      loc_4055D0
.text:004051F2                 cmp     bl, 3Ah ; ':'
.text:004051F5                 jz      loc_4055D0
.text:004051FB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004051FE                 jz      loc_4052B6
.text:00405204                 movzx   edx, byte ptr [eax+1]
.text:00405208
.text:00405208 loc_405208:                             ; CODE XREF: sub_404BD0+6ED↓j
.text:00405208                 cmp     dl, 3Ah ; ':'
.text:0040520B                 jz      short loc_405214
.text:0040520D
.text:0040520D loc_40520D:                             ; CODE XREF: sub_404BD0+660↓j
.text:0040520D                 mov     eax, esi
.text:0040520F                 jmp     loc_404DF7
.text:00405214 ; ---------------------------------------------------------------------------
.text:00405214
.text:00405214 loc_405214:                             ; CODE XREF: sub_404BD0+63B↑j
.text:00405214                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00405218                 jz      loc_4052A1
.text:0040521E                 cmp     byte ptr [ecx], 0
.text:00405221                 jz      short loc_405232
.text:00405223
.text:00405223 loc_405223:                             ; CODE XREF: sub_404BD0+6D4↓j
.text:00405223                 inc     dword ptr [ebp+0]
.text:00405226                 mov     [ebp+0Ch], ecx
.text:00405229
.text:00405229 loc_405229:                             ; CODE XREF: sub_404BD0+67B↓j
.text:00405229                                         ; sub_404BD0+696↓j ...
.text:00405229                 mov     dword ptr [ebp+14h], 0
.text:00405230                 jmp     short loc_40520D
.text:00405232 ; ---------------------------------------------------------------------------
.text:00405232
.text:00405232 loc_405232:                             ; CODE XREF: sub_404BD0+651↑j
.text:00405232                 mov     ecx, [ebp+0]
.text:00405235                 cmp     ecx, [esp+arg_5C]
.text:00405239                 jz      short loc_40524D
.text:0040523B                 mov     eax, [esp+arg_60]
.text:0040523F                 lea     edx, [ecx+1]
.text:00405242                 mov     [ebp+0], edx
.text:00405245                 mov     ebx, [eax+ecx*4]
.text:00405248                 mov     [ebp+0Ch], ebx
.text:0040524B                 jmp     short loc_405229
.text:0040524D ; ---------------------------------------------------------------------------
.text:0040524D
.text:0040524D loc_40524D:                             ; CODE XREF: sub_404BD0+669↑j
.text:0040524D                 mov     ecx, [esp+arg_44]
.text:00405251                 test    ecx, ecx
.text:00405253                 jnz     short loc_40526F
.text:00405255
.text:00405255 loc_405255:                             ; CODE XREF: sub_404BD0+6CF↓j
.text:00405255                 mov     [ebp+8], edi
.text:00405258                 mov     edi, [esp+Str]
.text:0040525C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040525F                 jz      short loc_405268
.text:00405261                 mov     esi, 3Fh ; '?'
.text:00405266                 jmp     short loc_405229
.text:00405268 ; ---------------------------------------------------------------------------
.text:00405268
.text:00405268 loc_405268:                             ; CODE XREF: sub_404BD0+68F↑j
.text:00405268                 mov     esi, 3Ah ; ':'
.text:0040526D                 jmp     short loc_405229
.text:0040526F ; ---------------------------------------------------------------------------
.text:0040526F
.text:0040526F loc_40526F:                             ; CODE XREF: sub_404BD0+683↑j
.text:0040526F                 mov     dword ptr [esp+0], 404B90h
.text:00405276                 call    ds:libintl_gettext
.text:0040527C                 mov     [esp+arg_8], edi
.text:00405280                 mov     ebx, [esp+arg_60]
.text:00405284                 mov     edx, ds:_iob
.text:0040528A                 mov     esi, [ebx]
.text:0040528C                 add     edx, 40h ; '@'
.text:0040528F                 mov     [esp+Str2], eax ; Format
.text:00405293                 mov     [esp+MaxCount], esi
.text:00405297                 mov     [esp+0], edx    ; Stream
.text:0040529A                 call    fprintf
.text:0040529F                 jmp     short loc_405255
.text:004052A1 ; ---------------------------------------------------------------------------
.text:004052A1
.text:004052A1 loc_4052A1:                             ; CODE XREF: sub_404BD0+648↑j
.text:004052A1                 cmp     byte ptr [ecx], 0
.text:004052A4                 jnz     loc_405223
.text:004052AA                 mov     dword ptr [ebp+0Ch], 0
.text:004052B1                 jmp     loc_405229
.text:004052B6 ; ---------------------------------------------------------------------------
.text:004052B6
.text:004052B6 loc_4052B6:                             ; CODE XREF: sub_404BD0+62E↑j
.text:004052B6                 movzx   edx, byte ptr [eax+1]
.text:004052BA                 cmp     dl, 3Bh ; ';'
.text:004052BD                 jnz     loc_405208
.text:004052C3                 mov     [esp+arg_2C], 0
.text:004052CB                 mov     [esp+arg_28], 0
.text:004052D3                 mov     [esp+arg_24], 0
.text:004052DB                 mov     [esp+arg_20], 0
.text:004052E3                 cmp     byte ptr [ecx], 0
.text:004052E6                 jz      loc_40555B
.text:004052EC                 inc     dword ptr [ebp+0]
.text:004052EF                 mov     [ebp+0Ch], ecx
.text:004052F2
.text:004052F2 loc_4052F2:                             ; CODE XREF: sub_404BD0+9A4↓j
.text:004052F2                 mov     edi, [ebp+0Ch]
.text:004052F5                 mov     [ebp+14h], edi
.text:004052F8                 movzx   eax, byte ptr [edi]
.text:004052FB                 test    al, al
.text:004052FD                 jz      short loc_40530F
.text:004052FF                 cmp     al, 3Dh ; '='
.text:00405301                 jz      short loc_40530F
.text:00405303
.text:00405303 loc_405303:                             ; CODE XREF: sub_404BD0+73D↓j
.text:00405303                 inc     edi
.text:00405304                 movzx   eax, byte ptr [edi]
.text:00405307                 test    al, al
.text:00405309                 jz      short loc_40530F
.text:0040530B                 cmp     al, 3Dh ; '='
.text:0040530D                 jnz     short loc_405303
.text:0040530F
.text:0040530F loc_40530F:                             ; CODE XREF: sub_404BD0+72D↑j
.text:0040530F                                         ; sub_404BD0+731↑j ...
.text:0040530F                 mov     [esp+arg_1C], 0
.text:00405317                 mov     esi, [esp+arg_68]
.text:0040531B                 mov     eax, [esi]
.text:0040531D                 test    eax, eax
.text:0040531F                 jz      loc_4054A0
.text:00405325                 mov     ecx, eax
.text:00405327
.text:00405327 loc_405327:                             ; CODE XREF: sub_404BD0+783↓j
.text:00405327                 mov     ebx, [ebp+14h]
.text:0040532A                 mov     eax, edi
.text:0040532C                 mov     [esp+0], ecx    ; Str1
.text:0040532F                 sub     eax, ebx
.text:00405331                 mov     [esp+MaxCount], eax ; MaxCount
.text:00405335                 mov     [esp+Str2], ebx ; Str2
.text:00405339                 call    strncmp
.text:0040533E                 test    eax, eax
.text:00405340                 jz      loc_405507
.text:00405346
.text:00405346 loc_405346:                             ; CODE XREF: sub_404BD0+95C↓j
.text:00405346                                         ; sub_404BD0+96D↓j
.text:00405346                 inc     [esp+arg_1C]
.text:0040534A                 add     esi, 10h
.text:0040534D                 mov     edx, [esi]
.text:0040534F                 test    edx, edx
.text:00405351                 mov     ecx, edx
.text:00405353                 jnz     short loc_405327
.text:00405355
.text:00405355 loc_405355:                             ; CODE XREF: sub_404BD0+986↓j
.text:00405355                 mov     esi, [esp+arg_24]
.text:00405359                 test    esi, esi
.text:0040535B                 jz      short loc_405369
.text:0040535D                 mov     ebx, [esp+arg_28]
.text:00405361                 test    ebx, ebx
.text:00405363                 jz      loc_4054B1
.text:00405369
.text:00405369 loc_405369:                             ; CODE XREF: sub_404BD0+78B↑j
.text:00405369                 mov     esi, [esp+arg_2C]
.text:0040536D                 test    esi, esi
.text:0040536F                 jz      loc_4054A0
.text:00405375                 cmp     byte ptr [edi], 0
.text:00405378                 jz      loc_405420
.text:0040537E                 mov     ecx, [esp+arg_2C]
.text:00405382                 mov     ebx, [ecx+4]
.text:00405385                 test    ebx, ebx
.text:00405387                 jz      short loc_4053C8
.text:00405389                 lea     edx, [edi+1]
.text:0040538C                 mov     [ebp+0Ch], edx
.text:0040538F
.text:0040538F loc_40538F:                             ; CODE XREF: sub_404BD0+858↓j
.text:0040538F                                         ; sub_404BD0+877↓j
.text:0040538F                 mov     edi, [ebp+14h]
.text:00405392                 mov     [esp+0], edi    ; Str
.text:00405395                 call    strlen
.text:0040539A                 add     [ebp+14h], eax
.text:0040539D                 mov     eax, [esp+arg_6C]
.text:004053A1                 test    eax, eax
.text:004053A3                 jz      short loc_4053B0
.text:004053A5                 mov     edx, [esp+arg_20]
.text:004053A9                 mov     ebp, [esp+arg_6C]
.text:004053AD                 mov     [ebp+0], edx
.text:004053B0
.text:004053B0 loc_4053B0:                             ; CODE XREF: sub_404BD0+7D3↑j
.text:004053B0                 mov     eax, [esp+arg_2C]
.text:004053B4                 mov     ecx, [eax+8]
.text:004053B7                 test    ecx, ecx
.text:004053B9                 jnz     loc_404F7A
.text:004053BF                 mov     ecx, [esp+arg_2C]
.text:004053C3                 jmp     loc_404F72
.text:004053C8 ; ---------------------------------------------------------------------------
.text:004053C8
.text:004053C8 loc_4053C8:                             ; CODE XREF: sub_404BD0+7B7↑j
.text:004053C8                 mov     eax, [esp+arg_44]
.text:004053CC                 test    eax, eax
.text:004053CE                 jnz     short loc_4053E3
.text:004053D0
.text:004053D0 loc_4053D0:                             ; CODE XREF: sub_404BD0+849↓j
.text:004053D0                 mov     ecx, [ebp+14h]
.text:004053D3                 mov     [esp+0], ecx    ; Str
.text:004053D6                 call    strlen
.text:004053DB                 add     [ebp+14h], eax
.text:004053DE                 jmp     loc_404FF8
.text:004053E3 ; ---------------------------------------------------------------------------
.text:004053E3
.text:004053E3 loc_4053E3:                             ; CODE XREF: sub_404BD0+7FE↑j
.text:004053E3                 mov     dword ptr [esp+0], offset sub_404BD0
.text:004053EA                 call    ds:libintl_gettext
.text:004053F0                 mov     edx, [esp+arg_2C]
.text:004053F4                 mov     ebx, [esp+arg_60]
.text:004053F8                 mov     edi, [edx]
.text:004053FA                 mov     [esp+arg_8], edi
.text:004053FE                 mov     edi, ds:_iob
.text:00405404                 mov     esi, [ebx]
.text:00405406                 mov     [esp+Str2], eax ; Format
.text:0040540A                 add     edi, 40h ; '@'
.text:0040540D                 mov     [esp+MaxCount], esi
.text:00405411                 mov     [esp+0], edi    ; Stream
.text:00405414                 call    fprintf
.text:00405419                 jmp     short loc_4053D0
.text:00405419 ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:00405419 ; ---------------------------------------------------------------------------
.text:0040541B                 align 10h
.text:00405420 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:00405420
.text:00405420 loc_405420:                             ; CODE XREF: sub_404BD0+7A8↑j
.text:00405420                 mov     esi, [esp+arg_2C]
.text:00405424                 cmp     dword ptr [esi+4], 1
.text:00405428                 jnz     loc_40538F
.text:0040542E                 mov     ecx, [ebp+0]
.text:00405431                 cmp     ecx, [esp+arg_5C]
.text:00405435                 jge     short loc_40544C
.text:00405437                 mov     eax, [esp+arg_60]
.text:0040543B                 lea     ebx, [ecx+1]
.text:0040543E                 mov     [ebp+0], ebx
.text:00405441                 mov     edi, [eax+ecx*4]
.text:00405444                 mov     [ebp+0Ch], edi
.text:00405447                 jmp     loc_40538F
.text:0040544C ; ---------------------------------------------------------------------------
.text:0040544C
.text:0040544C loc_40544C:                             ; CODE XREF: sub_404BD0+865↑j
.text:0040544C                 mov     edx, [esp+arg_44]
.text:00405450                 test    edx, edx
.text:00405452                 jnz     short loc_405467
.text:00405454
.text:00405454 loc_405454:                             ; CODE XREF: sub_404BD0+8CE↓j
.text:00405454                 mov     edx, [ebp+14h]
.text:00405457                 mov     [esp+0], edx    ; Str
.text:0040545A                 call    strlen
.text:0040545F                 add     [ebp+14h], eax
.text:00405462                 jmp     loc_405089
.text:00405467 ; ---------------------------------------------------------------------------
.text:00405467
.text:00405467 loc_405467:                             ; CODE XREF: sub_404BD0+882↑j
.text:00405467                 mov     dword ptr [esp+0], offset sub_404AF0
.text:0040546E                 call    ds:libintl_gettext
.text:00405474                 mov     ecx, [ebp+0]
.text:00405477                 mov     ebx, [esp+arg_60]
.text:0040547B                 mov     edi, [ebx+ecx*4-4]
.text:0040547F                 mov     ecx, ds:_iob
.text:00405485                 mov     [esp+arg_8], edi
.text:00405489                 mov     esi, [ebx]
.text:0040548B                 add     ecx, 40h ; '@'
.text:0040548E                 mov     [esp+Str2], eax ; Format
.text:00405492                 mov     [esp+0], ecx    ; Stream
.text:00405495                 mov     [esp+MaxCount], esi
.text:00405499                 call    fprintf
.text:0040549E                 jmp     short loc_405454
.text:004054A0 ; ---------------------------------------------------------------------------
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: sub_404BD0+74F↑j
.text:004054A0                                         ; sub_404BD0+79F↑j
.text:004054A0                 mov     dword ptr [ebp+14h], 0
.text:004054A7                 mov     eax, 57h ; 'W'
.text:004054AC                 jmp     loc_404DF7
.text:004054B1 ; ---------------------------------------------------------------------------
.text:004054B1
.text:004054B1 loc_4054B1:                             ; CODE XREF: sub_404BD0+793↑j
.text:004054B1                 mov     edi, [esp+arg_44]
.text:004054B5                 test    edi, edi
.text:004054B7                 jnz     short loc_4054CF
.text:004054B9
.text:004054B9 loc_4054B9:                             ; CODE XREF: sub_404BD0+935↓j
.text:004054B9                 mov     edx, [ebp+14h]
.text:004054BC                 mov     [esp+0], edx    ; Str
.text:004054BF                 call    strlen
.text:004054C4                 add     [ebp+14h], eax
.text:004054C7                 inc     dword ptr [ebp+0]
.text:004054CA                 jmp     loc_404FF8
.text:004054CF ; ---------------------------------------------------------------------------
.text:004054CF
.text:004054CF loc_4054CF:                             ; CODE XREF: sub_404BD0+8E7↑j
.text:004054CF                 mov     dword ptr [esp+0], offset sub_404C10
.text:004054D6                 call    ds:libintl_gettext
.text:004054DC                 mov     ecx, [ebp+0]
.text:004054DF                 mov     ebx, [esp+arg_60]
.text:004054E3                 mov     edi, [ebx+ecx*4]
.text:004054E6                 mov     ecx, ds:_iob
.text:004054EC                 mov     [esp+arg_8], edi
.text:004054F0                 mov     esi, [ebx]
.text:004054F2                 add     ecx, 40h ; '@'
.text:004054F5                 mov     [esp+Str2], eax ; Format
.text:004054F9                 mov     [esp+0], ecx    ; Stream
.text:004054FC                 mov     [esp+MaxCount], esi
.text:00405500                 call    fprintf
.text:00405505                 jmp     short loc_4054B9
.text:00405507 ; ---------------------------------------------------------------------------
.text:00405507
.text:00405507 loc_405507:                             ; CODE XREF: sub_404BD0+770↑j
.text:00405507                 mov     edx, [ebp+14h]
.text:0040550A                 mov     ebx, edi
.text:0040550C                 mov     ecx, [esi]
.text:0040550E                 sub     ebx, edx
.text:00405510                 mov     [esp+0], ecx    ; Str
.text:00405513                 call    strlen
.text:00405518                 cmp     ebx, eax
.text:0040551A                 jz      short loc_405542
.text:0040551C                 mov     ebx, [esp+arg_2C]
.text:00405520                 test    ebx, ebx
.text:00405522                 jz      short loc_405531
.text:00405524                 mov     [esp+arg_24], 1
.text:0040552C                 jmp     loc_405346
.text:00405531 ; ---------------------------------------------------------------------------
.text:00405531
.text:00405531 loc_405531:                             ; CODE XREF: sub_404BD0+952↑j
.text:00405531                 mov     [esp+arg_2C], esi
.text:00405535                 mov     ecx, [esp+arg_1C]
.text:00405539                 mov     [esp+arg_20], ecx
.text:0040553D                 jmp     loc_405346
.text:00405542 ; ---------------------------------------------------------------------------
.text:00405542
.text:00405542 loc_405542:                             ; CODE XREF: sub_404BD0+94A↑j
.text:00405542                 mov     [esp+arg_2C], esi
.text:00405546                 mov     eax, [esp+arg_1C]
.text:0040554A                 mov     [esp+arg_28], 1
.text:00405552                 mov     [esp+arg_20], eax
.text:00405556                 jmp     loc_405355
.text:0040555B ; ---------------------------------------------------------------------------
.text:0040555B
.text:0040555B loc_40555B:                             ; CODE XREF: sub_404BD0+716↑j
.text:0040555B                 mov     edx, [ebp+0]
.text:0040555E                 cmp     edx, [esp+arg_5C]
.text:00405562                 jz      short loc_405579
.text:00405564                 mov     ebx, [esp+arg_60]
.text:00405568                 lea     esi, [edx+1]
.text:0040556B                 mov     [ebp+0], esi
.text:0040556E                 mov     edi, [ebx+edx*4]
.text:00405571                 mov     [ebp+0Ch], edi
.text:00405574                 jmp     loc_4052F2
.text:00405579 ; ---------------------------------------------------------------------------
.text:00405579
.text:00405579 loc_405579:                             ; CODE XREF: sub_404BD0+992↑j
.text:00405579                 mov     edi, [esp+arg_44]
.text:0040557D                 test    edi, edi
.text:0040557F                 jnz     short loc_40559C
.text:00405581
.text:00405581 loc_405581:                             ; CODE XREF: sub_404BD0+9FC↓j
.text:00405581                 mov     [ebp+8], esi
.text:00405584                 mov     ebp, [esp+Str]
.text:00405588                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040558C                 jz      short loc_405598
.text:0040558E                 mov     bl, 3Fh ; '?'
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: sub_404BD0+9CA↓j
.text:00405590                 movsx   eax, bl
.text:00405593                 jmp     loc_404DF7
.text:00405598 ; ---------------------------------------------------------------------------
.text:00405598
.text:00405598 loc_405598:                             ; CODE XREF: sub_404BD0+9BC↑j
.text:00405598                 mov     bl, 3Ah ; ':'
.text:0040559A                 jmp     short loc_405590
.text:0040559C ; ---------------------------------------------------------------------------
.text:0040559C
.text:0040559C loc_40559C:                             ; CODE XREF: sub_404BD0+9AF↑j
.text:0040559C                 mov     dword ptr [esp+0], 404B90h
.text:004055A3                 call    ds:libintl_gettext
.text:004055A9                 mov     [esp+arg_8], esi
.text:004055AD                 mov     edx, [esp+arg_60]
.text:004055B1                 mov     ecx, ds:_iob
.text:004055B7                 mov     ebx, [edx]
.text:004055B9                 add     ecx, 40h ; '@'
.text:004055BC                 mov     [esp+Str2], eax ; Format
.text:004055C0                 mov     [esp+MaxCount], ebx
.text:004055C4                 mov     [esp+0], ecx    ; Stream
.text:004055C7                 call    fprintf
.text:004055CC                 jmp     short loc_405581
.text:004055CC ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:004055CC ; ---------------------------------------------------------------------------
.text:004055CE                 align 10h
.text:004055D0 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:004055D0
.text:004055D0 loc_4055D0:                             ; CODE XREF: sub_404BD0+61C↑j
.text:004055D0                                         ; sub_404BD0+625↑j
.text:004055D0                 mov     eax, [esp+arg_44]
.text:004055D4                 test    eax, eax
.text:004055D6                 jz      short loc_40560F
.text:004055D8                 mov     ebx, [ebp+1Ch]
.text:004055DB                 test    ebx, ebx
.text:004055DD                 jz      short loc_405617
.text:004055DF                 mov     dword ptr [esp+0], offset loc_404C31
.text:004055E6
.text:004055E6 loc_4055E6:                             ; CODE XREF: sub_404BD0+A4E↓j
.text:004055E6                 call    ds:libintl_gettext
.text:004055EC                 mov     [esp+arg_8], esi
.text:004055F0                 mov     ebx, [esp+arg_60]
.text:004055F4                 mov     edx, ds:_iob
.text:004055FA                 mov     esi, [ebx]
.text:004055FC                 add     edx, 40h ; '@'
.text:004055FF                 mov     [esp+Str2], eax ; Format
.text:00405603                 mov     [esp+MaxCount], esi
.text:00405607                 mov     [esp+0], edx    ; Stream
.text:0040560A                 call    fprintf
.text:0040560F
.text:0040560F loc_40560F:                             ; CODE XREF: sub_404BD0+A06↑j
.text:0040560F                 mov     [ebp+8], edi
.text:00405612                 jmp     loc_404FF8
.text:00405617 ; ---------------------------------------------------------------------------
.text:00405617
.text:00405617 loc_405617:                             ; CODE XREF: sub_404BD0+A0D↑j
.text:00405617                 mov     dword ptr [esp+0], offset loc_404C4B
.text:0040561E                 jmp     short loc_4055E6
.text:00405620 ; ---------------------------------------------------------------------------
.text:00405620
.text:00405620 loc_405620:                             ; CODE XREF: sub_404BD0+33E↑j
.text:00405620                 mov     edi, [esp+arg_44]
.text:00405624                 test    edi, edi
.text:00405626                 jnz     short loc_40563E
.text:00405628
.text:00405628 loc_405628:                             ; CODE XREF: sub_404BD0+AA4↓j
.text:00405628                 mov     edx, [ebp+14h]
.text:0040562B                 mov     [esp+0], edx    ; Str
.text:0040562E                 call    strlen
.text:00405633                 add     [ebp+14h], eax
.text:00405636                 inc     dword ptr [ebp+0]
.text:00405639                 jmp     loc_40517E
.text:0040563E ; ---------------------------------------------------------------------------
.text:0040563E
.text:0040563E loc_40563E:                             ; CODE XREF: sub_404BD0+A56↑j
.text:0040563E                 mov     dword ptr [esp+0], offset loc_404C65
.text:00405645                 call    ds:libintl_gettext
.text:0040564B                 mov     ebx, [ebp+0]
.text:0040564E                 mov     edi, [esp+arg_60]
.text:00405652                 mov     ecx, [edi+ebx*4]
.text:00405655                 mov     ebx, ds:_iob
.text:0040565B                 mov     [esp+arg_8], ecx
.text:0040565F                 mov     esi, [edi]
.text:00405661                 add     ebx, 40h ; '@'
.text:00405664                 mov     [esp+Str2], eax ; Format
.text:00405668                 mov     [esp+0], ebx    ; Stream
.text:0040566B                 mov     [esp+MaxCount], esi
.text:0040566F                 call    fprintf
.text:00405674                 jmp     short loc_405628
.text:00405676 ; ---------------------------------------------------------------------------
.text:00405676
.text:00405676 loc_405676:                             ; CODE XREF: sub_404BD0+316↑j
.text:00405676                 mov     ecx, [ebp+14h]
.text:00405679                 mov     ebx, edi
.text:0040567B                 mov     edx, [esi]
.text:0040567D                 sub     ebx, ecx
.text:0040567F                 mov     [esp+0], edx    ; Str
.text:00405682                 call    strlen
.text:00405687                 cmp     ebx, eax
.text:00405689                 jz      short loc_4056E1
.text:0040568B                 mov     ebx, [esp+arg_40]
.text:0040568F                 test    ebx, ebx
.text:00405691                 jz      short loc_4056D0
.text:00405693                 mov     edx, [esp+arg_70]
.text:00405697                 test    edx, edx
.text:00405699                 jnz     short loc_4056A7
.text:0040569B                 mov     ecx, [esp+arg_40]
.text:0040569F                 mov     ebx, [esi+4]
.text:004056A2                 cmp     [ecx+4], ebx
.text:004056A5                 jz      short loc_4056B4
.text:004056A7
.text:004056A7 loc_4056A7:                             ; CODE XREF: sub_404BD0+AC9↑j
.text:004056A7                                         ; sub_404BD0+AEA↓j ...
.text:004056A7                 mov     [esp+arg_38], 1
.text:004056AF                 jmp     loc_404EEC
.text:004056B4 ; ---------------------------------------------------------------------------
.text:004056B4
.text:004056B4 loc_4056B4:                             ; CODE XREF: sub_404BD0+AD5↑j
.text:004056B4                 mov     edx, [esi+8]
.text:004056B7                 cmp     [ecx+8], edx
.text:004056BA                 jnz     short loc_4056A7
.text:004056BC                 mov     ebx, [esi+0Ch]
.text:004056BF                 cmp     [ecx+0Ch], ebx
.text:004056C2                 jnz     short loc_4056A7
.text:004056C4                 jmp     loc_404EEC
.text:004056C4 ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:004056C4 ; ---------------------------------------------------------------------------
.text:004056C9                 align 10h
.text:004056D0 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:004056D0
.text:004056D0 loc_4056D0:                             ; CODE XREF: sub_404BD0+AC1↑j
.text:004056D0                 mov     [esp+arg_40], esi
.text:004056D4                 mov     eax, [esp+arg_30]
.text:004056D8                 mov     [esp+arg_34], eax
.text:004056DC                 jmp     loc_404EEC
.text:004056E1 ; ---------------------------------------------------------------------------
.text:004056E1
.text:004056E1 loc_4056E1:                             ; CODE XREF: sub_404BD0+AB9↑j
.text:004056E1                 mov     [esp+arg_40], esi
.text:004056E5                 mov     ecx, [esp+arg_30]
.text:004056E9                 mov     [esp+arg_3C], 1
.text:004056F1                 mov     [esp+arg_34], ecx
.text:004056F5                 jmp     loc_404F00
.text:004056FA ; ---------------------------------------------------------------------------
.text:004056FA
.text:004056FA loc_4056FA:                             ; CODE XREF: sub_404BD0+28F↑j
.text:004056FA                 mov     eax, [esp+Str]
.text:004056FE                 movsx   esi, dl
.text:00405701                 mov     [esp+Str2], esi ; Val
.text:00405705                 mov     [esp+0], eax    ; Str
.text:00405708                 call    strchr
.text:0040570D                 test    eax, eax
.text:0040570F                 jnz     loc_4051C0
.text:00405715                 jmp     loc_404E65
.text:0040571A ; ---------------------------------------------------------------------------
.text:0040571A
.text:0040571A loc_40571A:                             ; CODE XREF: sub_404BD0+24C↑j
.text:0040571A                 mov     ecx, 1
.text:0040571F                 jmp     loc_404E22
.text:00405724 ; ---------------------------------------------------------------------------
.text:00405724
.text:00405724 loc_405724:                             ; CODE XREF: sub_404BD0+1A4↑j
.text:00405724                                         ; sub_404BD0+200↑j
.text:00405724                 mov     eax, [ebp+20h]
.text:00405727                 cmp     eax, [ebp+24h]
.text:0040572A                 jz      loc_404E00
.text:00405730                 mov     [ebp+0], eax
.text:00405733                 jmp     loc_404E00
.text:00405738 ; ---------------------------------------------------------------------------
.text:00405738
.text:00405738 loc_405738:                             ; CODE XREF: sub_404BD0+1CE↑j
.text:00405738                 mov     [ebp+20h], eax
.text:0040573B                 jmp     loc_404DC0
.text:00405740 ; ---------------------------------------------------------------------------
.text:00405740
.text:00405740 loc_405740:                             ; CODE XREF: sub_404BD0+19A↑j
.text:00405740                 mov     edx, [ebp+20h]
.text:00405743                 mov     eax, [ebp+24h]
.text:00405746                 cmp     edx, eax
.text:00405748                 jz      short loc_4057C0
.text:0040574A                 cmp     eax, ebx
.text:0040574C                 jz      short loc_405761
.text:0040574E                 mov     [esp+Str2], ebp
.text:00405752                 mov     ebx, [esp+arg_60]
.text:00405756                 mov     [esp+0], ebx
.text:00405759                 call    sub_405950
.text:0040575E                 mov     ebx, [ebp+0]
.text:00405761
.text:00405761 loc_405761:                             ; CODE XREF: sub_404BD0+B7C↑j
.text:00405761                                         ; sub_404BD0+BF2↓j ...
.text:00405761                 cmp     ebx, [esp+arg_5C]
.text:00405765                 jge     short loc_4057B0
.text:00405767                 mov     esi, [esp+arg_60]
.text:0040576B                 mov     eax, [esi+ebx*4]
.text:0040576E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405771                 jz      short loc_4057B8
.text:00405773                 lea     esi, [esi+0]
.text:00405779                 lea     edi, [edi+0]
.text:00405780
.text:00405780 loc_405780:                             ; CODE XREF: sub_404BD0+BCC↓j
.text:00405780                                         ; sub_404BD0+BEC↓j
.text:00405780                 lea     eax, [ebx+1]
.text:00405783                 mov     ebx, eax
.text:00405785                 mov     [ebp+0], eax
.text:00405788                 cmp     eax, [esp+arg_5C]
.text:0040578C                 jge     short loc_4057B0
.text:0040578E                 mov     edi, [esp+arg_60]
.text:00405792                 mov     edx, [edi+eax*4]
.text:00405795                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00405798                 jz      short loc_4057A0
.text:0040579A
.text:0040579A loc_40579A:                             ; CODE XREF: sub_404BD0+BD4↓j
.text:0040579A                 mov     ebx, eax
.text:0040579C                 jmp     short loc_405780
.text:0040579C ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:0040579C ; ---------------------------------------------------------------------------
.text:0040579E                 align 10h
.text:004057A0 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:004057A0
.text:004057A0 loc_4057A0:                             ; CODE XREF: sub_404BD0+BC8↑j
.text:004057A0                 cmp     byte ptr [edx+1], 0
.text:004057A4                 jz      short loc_40579A
.text:004057A6                 lea     esi, [esi+0]
.text:004057A9                 lea     edi, [edi+0]
.text:004057B0
.text:004057B0 loc_4057B0:                             ; CODE XREF: sub_404BD0+B95↑j
.text:004057B0                                         ; sub_404BD0+BBC↑j ...
.text:004057B0                 mov     [ebp+24h], ebx
.text:004057B3                 jmp     loc_404D70
.text:004057B8 ; ---------------------------------------------------------------------------
.text:004057B8
.text:004057B8 loc_4057B8:                             ; CODE XREF: sub_404BD0+BA1↑j
.text:004057B8                 cmp     byte ptr [eax+1], 0
.text:004057BC                 jz      short loc_405780
.text:004057BE                 jmp     short loc_4057B0
.text:004057C0 ; ---------------------------------------------------------------------------
.text:004057C0
.text:004057C0 loc_4057C0:                             ; CODE XREF: sub_404BD0+B78↑j
.text:004057C0                 cmp     edx, ebx
.text:004057C2                 jz      short loc_405761
.text:004057C4                 mov     [ebp+20h], ebx
.text:004057C7                 jmp     short loc_405761
.text:004057C9 ; ---------------------------------------------------------------------------
.text:004057C9
.text:004057C9 loc_4057C9:                             ; CODE XREF: sub_404BD0+158↑j
.text:004057C9                 mov     dword ptr [ebp+18h], 0
.text:004057D0                 mov     esi, [esp+Str]
.text:004057D4
.text:004057D4 loc_4057D4:                             ; CODE XREF: sub_404BD0+C19↓j
.text:004057D4                 inc     esi
.text:004057D5                 jmp     loc_404D38
.text:004057D5 ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:004057D5 ; ---------------------------------------------------------------------------
.text:004057DA                 align 10h
.text:004057E0 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:004057E0
.text:004057E0 loc_4057E0:                             ; CODE XREF: sub_404BD0+150↑j
.text:004057E0                 mov     dword ptr [ebp+18h], 2
.text:004057E7                 mov     esi, ecx
.text:004057E9                 jmp     short loc_4057D4
.text:004057E9 ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:004057E9 ; ---------------------------------------------------------------------------
.text:004057EB                 align 10h
.text:004057F0 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:004057F0
.text:004057F0 loc_4057F0:                             ; CODE XREF: sub_404BD0+139↑j
.text:004057F0                 mov     dword ptr [esp+0], offset loc_404C83 ; VarName
.text:004057F7                 call    getenv
.text:004057FC                 test    eax, eax
.text:004057FE                 jz      loc_404D14
.text:00405804                 jmp     loc_404D0F
.text:00405804 ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:00405804 ; ---------------------------------------------------------------------------
.text:00405809                 align 10h
.text:00405810 ; START OF FUNCTION CHUNK FOR sub_404BD0
.text:00405810
.text:00405810 loc_405810:                             ; CODE XREF: sub_404BD0:loc_404CDF↑j
.text:00405810                 mov     dword ptr [ebp+0], 1
.text:00405817                 mov     ebx, 1
.text:0040581C                 jmp     loc_404CF0
.text:0040581C ; END OF FUNCTION CHUNK FOR sub_404BD0
.text:00405821 ; ---------------------------------------------------------------------------
.text:00405821                 jmp     short sub_405830
.text:00405821 ; ---------------------------------------------------------------------------
.text:00405823                 align 10h
.text:00405830
.text:00405830 ; =============== S U B R O U T I N E =======================================
.text:00405830
.text:00405830
.text:00405830 sub_405830      proc near               ; CODE XREF: .text:00405821↑j
.text:00405830                                         ; sub_4062A0+3A↓p ...
.text:00405830
.text:00405830 var_2C          = dword ptr -2Ch
.text:00405830 var_28          = dword ptr -28h
.text:00405830 var_24          = dword ptr -24h
.text:00405830 var_20          = dword ptr -20h
.text:00405830 var_1C          = dword ptr -1Ch
.text:00405830 var_18          = dword ptr -18h
.text:00405830 var_14          = dword ptr -14h
.text:00405830 var_10          = dword ptr -10h
.text:00405830 arg_0           = dword ptr  4
.text:00405830 arg_4           = dword ptr  8
.text:00405830 arg_8           = dword ptr  0Ch
.text:00405830 arg_C           = dword ptr  10h
.text:00405830 arg_10          = dword ptr  14h
.text:00405830 arg_14          = dword ptr  18h
.text:00405830 arg_18          = dword ptr  1Ch
.text:00405830
.text:00405830                 sub     esp, 2Ch
.text:00405833                 mov     edx, dword_413020
.text:00405839                 mov     [esp+2Ch+var_10], offset dword_414050
.text:00405841                 mov     ecx, dword_413024
.text:00405847                 mov     ds:dword_414050, edx
.text:0040584D                 mov     edx, [esp+2Ch+arg_18]
.text:00405851                 mov     ds:dword_414054, ecx
.text:00405857                 mov     ecx, [esp+2Ch+arg_14]
.text:0040585B                 mov     [esp+2Ch+var_14], edx
.text:0040585F                 mov     edx, [esp+2Ch+arg_10]
.text:00405863                 mov     [esp+2Ch+var_18], ecx
.text:00405867                 mov     ecx, [esp+2Ch+arg_C]
.text:0040586B                 mov     [esp+2Ch+var_1C], edx
.text:0040586F                 mov     edx, [esp+2Ch+arg_8]
.text:00405873                 mov     [esp+2Ch+var_20], ecx
.text:00405877                 mov     ecx, [esp+2Ch+arg_4]
.text:0040587B                 mov     [esp+2Ch+var_24], edx
.text:0040587F                 mov     edx, [esp+2Ch+arg_0]
.text:00405883                 mov     [esp+2Ch+var_28], ecx
.text:00405887                 mov     [esp+2Ch+var_2C], edx
.text:0040588A                 call    loc_404CA0
.text:0040588F                 mov     ecx, ds:dword_414050
.text:00405895                 mov     dword_413020, ecx
.text:0040589B                 mov     ecx, ds:dword_41405C
.text:004058A1                 mov     ds:dword_414580, ecx
.text:004058A7                 mov     ecx, ds:dword_414058
.text:004058AD                 mov     dword_413028, ecx
.text:004058B3                 add     esp, 2Ch
.text:004058B6                 retn
.text:004058B6 sub_405830      endp
.text:004058B6
.text:004058B6 ; ---------------------------------------------------------------------------
.text:004058B7                 align 10h
.text:004058C0                 sub     esp, 2Ch
.text:004058C3                 mov     edx, dword_413020
.text:004058C9                 mov     dword ptr [esp+1Ch], offset dword_414050
.text:004058D1                 mov     ecx, dword_413024
.text:004058D7                 mov     dword ptr [esp+18h], 1
.text:004058DF                 mov     ds:dword_414050, edx
.text:004058E5                 mov     edx, [esp+38h]
.text:004058E9                 mov     ds:dword_414054, ecx
.text:004058EF                 mov     ecx, [esp+34h]
.text:004058F3                 mov     [esp+8], edx
.text:004058F7                 mov     edx, [esp+30h]
.text:004058FB                 mov     [esp+4], ecx
.text:004058FF                 mov     dword ptr [esp+14h], 0
.text:00405907                 mov     dword ptr [esp+10h], 0
.text:0040590F                 mov     dword ptr [esp+0Ch], 0
.text:00405917                 mov     [esp], edx
.text:0040591A                 call    loc_404CA0
.text:0040591F                 mov     ecx, ds:dword_414050
.text:00405925                 mov     dword_413020, ecx
.text:0040592B                 mov     ecx, ds:dword_41405C
.text:00405931                 mov     ds:dword_414580, ecx
.text:00405937                 mov     ecx, ds:dword_414058
.text:0040593D                 mov     dword_413028, ecx
.text:00405943                 add     esp, 2Ch
.text:00405946                 retn
.text:00405946 ; ---------------------------------------------------------------------------
.text:00405947                 align 10h
.text:00405950
.text:00405950 ; =============== S U B R O U T I N E =======================================
.text:00405950
.text:00405950
.text:00405950 sub_405950      proc near               ; CODE XREF: sub_404BD0+1E3↑p
.text:00405950                                         ; sub_404BD0+B89↑p
.text:00405950
.text:00405950 var_2C          = dword ptr -2Ch
.text:00405950 var_28          = dword ptr -28h
.text:00405950 var_24          = dword ptr -24h
.text:00405950 var_20          = dword ptr -20h
.text:00405950 var_1C          = dword ptr -1Ch
.text:00405950 var_18          = dword ptr -18h
.text:00405950 var_14          = dword ptr -14h
.text:00405950 arg_0           = dword ptr  4
.text:00405950 arg_4           = dword ptr  8
.text:00405950
.text:00405950                 push    ebp
.text:00405951                 push    edi
.text:00405952                 push    esi
.text:00405953                 push    ebx
.text:00405954                 sub     esp, 1Ch
.text:00405957                 mov     ecx, [esp+2Ch+arg_4]
.text:0040595B                 mov     eax, [esp+2Ch+arg_4]
.text:0040595F                 mov     ebx, [esp+2Ch+arg_4]
.text:00405963                 mov     edx, [ecx+20h]
.text:00405966                 mov     edi, [esp+2Ch+arg_0]
.text:0040596A                 mov     ecx, [ebx]
.text:0040596C                 mov     [esp+2Ch+var_2C], edx
.text:0040596F                 mov     [esp+2Ch+var_14], edx
.text:00405973                 mov     edx, [eax+24h]
.text:00405976                 mov     [esp+2Ch+var_28], ecx
.text:0040597A                 mov     [esp+2Ch+var_1C], ecx
.text:0040597E                 cmp     ecx, edx
.text:00405980                 mov     [esp+2Ch+var_18], edx
.text:00405984                 jle     short loc_405A00
.text:00405986                 mov     esi, [esp+2Ch+var_2C]
.text:00405989                 cmp     edx, esi
.text:0040598B                 jle     short loc_405A00
.text:0040598D                 lea     esi, [esi+0]
.text:00405990
.text:00405990 loc_405990:                             ; CODE XREF: sub_405950+A1↓j
.text:00405990                 mov     ebx, [esp+2Ch+var_1C]
.text:00405994                 mov     edx, [esp+2Ch+var_18]
.text:00405998                 mov     ebp, [esp+2Ch+var_18]
.text:0040599C                 mov     eax, [esp+2Ch+var_14]
.text:004059A0                 sub     ebx, edx
.text:004059A2                 mov     [esp+2Ch+var_20], ebx
.text:004059A6                 sub     ebp, eax
.text:004059A8                 cmp     ebx, ebp
.text:004059AA                 jle     short loc_405A25
.text:004059AC                 xor     esi, esi
.text:004059AE                 cmp     esi, ebp
.text:004059B0                 jge     short loc_4059DD
.text:004059B2                 mov     ecx, [esp+2Ch+var_1C]
.text:004059B6                 sub     ecx, ebp
.text:004059B8                 mov     [esp+2Ch+var_24], ecx
.text:004059BC                 lea     esi, [esi+0]
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: sub_405950+8B↓j
.text:004059C0                 mov     ecx, [esp+2Ch+var_14]
.text:004059C4                 mov     edx, [esp+2Ch+var_24]
.text:004059C8                 add     ecx, esi
.text:004059CA                 add     edx, esi
.text:004059CC                 mov     ebx, [edi+ecx*4]
.text:004059CF                 mov     eax, [edi+edx*4]
.text:004059D2                 inc     esi
.text:004059D3                 cmp     esi, ebp
.text:004059D5                 mov     [edi+ecx*4], eax
.text:004059D8                 mov     [edi+edx*4], ebx
.text:004059DB                 jl      short loc_4059C0
.text:004059DD
.text:004059DD loc_4059DD:                             ; CODE XREF: sub_405950+60↑j
.text:004059DD                 sub     [esp+2Ch+var_1C], ebp
.text:004059E1
.text:004059E1 loc_4059E1:                             ; CODE XREF: sub_405950+107↓j
.text:004059E1                 mov     eax, [esp+2Ch+var_18]
.text:004059E5                 cmp     [esp+2Ch+var_1C], eax
.text:004059E9                 jle     short loc_405A00
.text:004059EB                 mov     ebp, [esp+2Ch+var_14]
.text:004059EF                 cmp     eax, ebp
.text:004059F1                 jg      short loc_405990
.text:004059F3                 lea     esi, [esi+0]
.text:004059F9                 lea     edi, [edi+0]
.text:00405A00
.text:00405A00 loc_405A00:                             ; CODE XREF: sub_405950+34↑j
.text:00405A00                                         ; sub_405950+3B↑j ...
.text:00405A00                 mov     esi, [esp+2Ch+var_28]
.text:00405A04                 mov     ecx, [esp+2Ch+var_18]
.text:00405A08                 mov     eax, [esp+2Ch+var_2C]
.text:00405A0B                 mov     edi, [esp+2Ch+arg_4]
.text:00405A0F                 mov     edx, [esp+2Ch+var_28]
.text:00405A13                 sub     esi, ecx
.text:00405A15                 add     esi, eax
.text:00405A17                 mov     [edi+20h], esi
.text:00405A1A                 mov     [edi+24h], edx
.text:00405A1D                 add     esp, 1Ch
.text:00405A20                 pop     ebx
.text:00405A21                 pop     esi
.text:00405A22                 pop     edi
.text:00405A23                 pop     ebp
.text:00405A24                 retn
.text:00405A25 ; ---------------------------------------------------------------------------
.text:00405A25
.text:00405A25 loc_405A25:                             ; CODE XREF: sub_405950+5A↑j
.text:00405A25                 xor     esi, esi
.text:00405A27                 cmp     esi, [esp+2Ch+var_20]
.text:00405A2B                 jge     short loc_405A4F
.text:00405A2D                 lea     esi, [esi+0]
.text:00405A30
.text:00405A30 loc_405A30:                             ; CODE XREF: sub_405950+FD↓j
.text:00405A30                 mov     ebx, [esp+2Ch+var_14]
.text:00405A34                 mov     ebp, [esp+2Ch+var_18]
.text:00405A38                 add     ebx, esi
.text:00405A3A                 add     ebp, esi
.text:00405A3C                 mov     edx, [edi+ebx*4]
.text:00405A3F                 inc     esi
.text:00405A40                 cmp     esi, [esp+2Ch+var_20]
.text:00405A44                 mov     ecx, [edi+ebp*4]
.text:00405A47                 mov     [edi+ebx*4], ecx
.text:00405A4A                 mov     [edi+ebp*4], edx
.text:00405A4D                 jl      short loc_405A30
.text:00405A4F
.text:00405A4F loc_405A4F:                             ; CODE XREF: sub_405950+DB↑j
.text:00405A4F                 mov     esi, [esp+2Ch+var_20]
.text:00405A53                 add     [esp+2Ch+var_14], esi
.text:00405A57                 jmp     short loc_4059E1
.text:00405A57 sub_405950      endp
.text:00405A57
.text:00405A57 ; ---------------------------------------------------------------------------
.text:00405A59                 db 17h dup(90h)
.text:00405A70 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405A90+3↓o
.text:00405A81 ; const char aS_0[]
.text:00405A81 aS_0            db '%s',0               ; DATA XREF: sub_405A90+10↓o
.text:00405A84                 align 10h
.text:00405A90
.text:00405A90 ; =============== S U B R O U T I N E =======================================
.text:00405A90
.text:00405A90 ; Attributes: noreturn
.text:00405A90
.text:00405A90 sub_405A90      proc near               ; CODE XREF: sub_401920:loc_401FE4↑p
.text:00405A90                                         ; sub_4049A0:loc_404A3D↑p ...
.text:00405A90
.text:00405A90 Code            = dword ptr -1Ch
.text:00405A90 ErrorMessage    = dword ptr -18h
.text:00405A90 var_14          = dword ptr -14h
.text:00405A90 var_10          = byte ptr -10h
.text:00405A90
.text:00405A90                 sub     esp, 1Ch
.text:00405A93                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00405A9A                 call    ds:libintl_gettext
.text:00405AA0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00405AA8                 mov     edx, Code
.text:00405AAE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405AB6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00405ABA                 mov     [esp+1Ch+Code], edx ; Code
.text:00405ABD                 call    sub_408F80
.text:00405AC2                 call    abort
.text:00405AC2 sub_405A90      endp
.text:00405AC2
.text:00405AC2 ; ---------------------------------------------------------------------------
.text:00405AC7                 align 10h
.text:00405AD0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00405AD0                                         ; DATA XREF: .data:Buffer↓o
.text:00405B02 ; const char Format[12]
.text:00405B02 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_405DC0+50↓o
.text:00405B0E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00405B1E                 db 12h dup(90h)
.text:00405B30
.text:00405B30 ; =============== S U B R O U T I N E =======================================
.text:00405B30
.text:00405B30
.text:00405B30 sub_405B30      proc near               ; DATA XREF: sub_405DC0+100↓o
.text:00405B30                 push    esp
.text:00405B31                 push    69207369h
.text:00405B36                 jnb     short loc_405B58
.text:00405B38                 db      66h
.text:00405B38                 jb      short near ptr 5BA0h
.text:00405B3B                 and     gs:[ebx+6Fh], dh
.text:00405B3F                 db      66h
.text:00405B3F                 jz      short near ptr 5BB9h
.text:00405B42                 popa
.text:00405B43                 jb      short loc_405BAA
.text:00405B45                 cmp     esp, [eax]
.text:00405B47                 jnb     short near ptr loc_405BAC+2
.text:00405B49                 and     gs:[eax+ebp*2+65h], dh
.text:00405B4E                 and     [ebx+6Fh], dh
.text:00405B51                 jnz     short loc_405BC5
.text:00405B53                 arpl    [ebp+20h], sp
.text:00405B56                 outsw
.text:00405B58
.text:00405B58 loc_405B58:                             ; CODE XREF: sub_405B30+6↑j
.text:00405B58                 jb      short loc_405B7A
.text:00405B5A                 arpl    [edi+70h], bp
.text:00405B5D                 jns     short loc_405BC8
.text:00405B5F                 outsb
.text:00405B60                 and     [bp+di+6Fh], ah
.text:00405B64                 outsb
.text:00405B65                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:00405B6E                 and     [eax+ebp*2+65h], dl
.text:00405B72                 jb      short near ptr loc_405BD8+1
.text:00405B74                 and     [ecx+73h], ch
.text:00405B77                 and     [esi+4Fh], cl
.text:00405B7A
.text:00405B7A loc_405B7A:                             ; CODE XREF: sub_405B30:loc_405B58↑j
.text:00405B7A                 or      dh, [edi+61h]
.text:00405B7D                 jb      short loc_405BF1
.text:00405B7F                 popa
.text:00405B80                 outsb
.text:00405B81                 jz      short loc_405BFC
.text:00405B83                 cmp     esp, [eax]
.text:00405B85                 outsb
.text:00405B86                 outsd
.text:00405B87                 jz      short loc_405BA9
.text:00405B89                 db      65h
.text:00405B89                 jbe     short loc_405BF1
.text:00405B8C                 outsb
.text:00405B8D                 and     [esi+6Fh], ah
.text:00405B90                 jb      short near ptr loc_405BB0+2
.text:00405B92                 dec     ebp
.text:00405B93                 inc     ebp
.text:00405B94                 push    edx
.text:00405B95                 inc     ebx
.text:00405B96                 dec     eax
.text:00405B97                 inc     ecx
.text:00405B98                 dec     esi
.text:00405B99                 push    esp
.text:00405B9A                 inc     ecx
.text:00405B9B                 inc     edx
.text:00405B9C                 dec     ecx
.text:00405B9D                 dec     esp
.text:00405B9E                 dec     ecx
.text:00405B9F                 push    esp
.text:00405BA0                 pop     ecx
.text:00405BA1                 and     [edi+72h], ch
.text:00405BA4                 and     [esi+49h], al
.text:00405BA7                 push    esp
.text:00405BA8                 dec     esi
.text:00405BA9
.text:00405BA9 loc_405BA9:                             ; CODE XREF: sub_405B30+57↑j
.text:00405BA9                 inc     ebp
.text:00405BAA
.text:00405BAA loc_405BAA:                             ; CODE XREF: sub_405B30+13↑j
.text:00405BAA                 push    ebx
.text:00405BAB                 push    ebx
.text:00405BAC
.text:00405BAC loc_405BAC:                             ; CODE XREF: sub_405B30+17↑j
.text:00405BAC                 and     [esi+4Fh], al
.text:00405BAF                 push    edx
.text:00405BB0
.text:00405BB0 loc_405BB0:                             ; CODE XREF: sub_405B30+60↑j
.text:00405BB0                 and     [ecx+20h], al
.text:00405BB3                 push    eax
.text:00405BB4                 inc     ecx
.text:00405BB5                 push    edx
.text:00405BB6                 push    esp
.text:00405BB7                 dec     ecx
.text:00405BB8                 inc     ebx
.text:00405BB9                 push    ebp
.text:00405BBA                 dec     esp
.text:00405BBB                 inc     ecx
.text:00405BBC                 push    edx
.text:00405BBD                 and     [eax+55h], dl
.text:00405BC0                 push    edx
.text:00405BC1                 push    eax
.text:00405BC2                 dec     edi
.text:00405BC3                 push    ebx
.text:00405BC4                 inc     ebp
.text:00405BC5
.text:00405BC5 loc_405BC5:                             ; CODE XREF: sub_405B30+21↑j
.text:00405BC5                 or      al, cs:[eax]
.text:00405BC8
.text:00405BC8 loc_405BC8:                             ; CODE XREF: sub_405B30+2D↑j
.text:00405BC8                                         ; DATA XREF: sub_405DC0:loc_405F01↓o
.text:00405BC8                 push    edi
.text:00405BC9                 jb      short near ptr loc_405C33+1
.text:00405BCB                 jz      short near ptr loc_405C40+1
.text:00405BCD                 outs    dx, byte ptr gs:[esi]
.text:00405BCF                 and     [edx+79h], ah
.text:00405BD2                 and     ds:6E612073h, ah
.text:00405BD8
.text:00405BD8 loc_405BD8:                             ; CODE XREF: sub_405B30+42↑j
.text:00405BD8                 and     fs:0A2E73h, ah
.text:00405BDF
.text:00405BDF loc_405BDF:                             ; DATA XREF: sub_405DC0:loc_405F0D↓o
.text:00405BDF                 push    edi
.text:00405BE0                 jb      short near ptr loc_405C4A+1
.text:00405BE2                 jz      short loc_405C58
.text:00405BE4                 outs    dx, byte ptr gs:[esi]
.text:00405BE6                 and     [edx+79h], ah
.text:00405BE9                 and     ds:25202C73h, ah
.text:00405BEF                 jnb     short near ptr loc_405C1A+3
.text:00405BF1
.text:00405BF1 loc_405BF1:                             ; CODE XREF: sub_405B30+4D↑j
.text:00405BF1                                         ; sub_405B30+59↑j
.text:00405BF1                 and     [ecx+6Eh], ah
.text:00405BF4                 and     fs:0A2E73h, ah
.text:00405BFB                 nop
.text:00405BFC
.text:00405BFC loc_405BFC:                             ; CODE XREF: sub_405B30+51↑j
.text:00405BFC                 nop
.text:00405BFD                 nop
.text:00405BFE                 nop
.text:00405BFF                 nop
.text:00405C00                 nop
.text:00405C01                 nop
.text:00405C02                 nop
.text:00405C03                 nop
.text:00405C04                 nop
.text:00405C05                 nop
.text:00405C06                 nop
.text:00405C07                 nop
.text:00405C08                 nop
.text:00405C09                 nop
.text:00405C0A                 nop
.text:00405C0B                 nop
.text:00405C0C                 nop
.text:00405C0D                 nop
.text:00405C0E                 nop
.text:00405C0F                 nop
.text:00405C0F sub_405B30      endp ; sp-analysis failed
.text:00405C0F
.text:00405C10
.text:00405C10 ; =============== S U B R O U T I N E =======================================
.text:00405C10
.text:00405C10
.text:00405C10 sub_405C10      proc near               ; DATA XREF: sub_405DC0:loc_405F19↓o
.text:00405C10                 push    edi
.text:00405C11                 jb      short near ptr loc_405C7A+2
.text:00405C13                 jz      short near ptr loc_405C88+1
.text:00405C15                 outs    dx, byte ptr gs:[esi]
.text:00405C17                 and     [edx+79h], ah
.text:00405C1A
.text:00405C1A loc_405C1A:                             ; CODE XREF: sub_405B30+BF↑j
.text:00405C1A                 and     ds:25202C73h, ah
.text:00405C20                 jnb     short near ptr loc_405C4D+1
.text:00405C22                 and     ds:610A2C73h, ah
.text:00405C28                 outsb
.text:00405C29                 and     fs:0A2E73h, ah
.text:00405C30
.text:00405C30 loc_405C30:                             ; DATA XREF: sub_405DC0:loc_405F25↓o
.text:00405C30                 push    edi
.text:00405C31                 jb      short loc_405C9C
.text:00405C33
.text:00405C33 loc_405C33:                             ; CODE XREF: sub_405B30+99↑j
.text:00405C33                 jz      short loc_405CA9
.text:00405C35                 outs    dx, byte ptr gs:[esi]
.text:00405C37                 and     [edx+79h], ah
.text:00405C3A                 and     ds:25202C73h, ah
.text:00405C40
.text:00405C40 loc_405C40:                             ; CODE XREF: sub_405B30+9B↑j
.text:00405C40                 jnb     short loc_405C6E
.text:00405C42                 and     ds:250A2C73h, ah
.text:00405C48                 jnb     short near ptr loc_405C75+1
.text:00405C4A
.text:00405C4A loc_405C4A:                             ; CODE XREF: sub_405B30+B0↑j
.text:00405C4A                 and     [ecx+6Eh], ah
.text:00405C4D
.text:00405C4D loc_405C4D:                             ; CODE XREF: sub_405C10+10↑j
.text:00405C4D                 and     fs:0A2E73h, ah
.text:00405C54                 nop
.text:00405C55                 nop
.text:00405C56                 nop
.text:00405C57                 nop
.text:00405C58
.text:00405C58 loc_405C58:                             ; CODE XREF: sub_405B30+B2↑j
.text:00405C58                 nop
.text:00405C59                 nop
.text:00405C5A                 nop
.text:00405C5B                 nop
.text:00405C5C                 nop
.text:00405C5D                 nop
.text:00405C5E                 nop
.text:00405C5F                 nop
.text:00405C60                 nop
.text:00405C61                 nop
.text:00405C62                 nop
.text:00405C63                 nop
.text:00405C64                 nop
.text:00405C65                 nop
.text:00405C66                 nop
.text:00405C67                 nop
.text:00405C68                 nop
.text:00405C69                 nop
.text:00405C6A                 nop
.text:00405C6B                 nop
.text:00405C6C                 nop
.text:00405C6D                 nop
.text:00405C6E
.text:00405C6E loc_405C6E:                             ; CODE XREF: sub_405C10:loc_405C40↑j
.text:00405C6E                 nop
.text:00405C6F                 nop
.text:00405C6F sub_405C10      endp ; sp-analysis failed
.text:00405C6F
.text:00405C70
.text:00405C70 ; =============== S U B R O U T I N E =======================================
.text:00405C70
.text:00405C70
.text:00405C70 sub_405C70      proc near               ; DATA XREF: sub_405DC0:loc_405F31↓o
.text:00405C70                 push    edi
.text:00405C71                 jb      short loc_405CDC
.text:00405C73                 jz      short loc_405CE9
.text:00405C75
.text:00405C75 loc_405C75:                             ; CODE XREF: sub_405C10+38↑j
.text:00405C75                 outs    dx, byte ptr gs:[esi]
.text:00405C77                 and     [edx+79h], ah
.text:00405C7A
.text:00405C7A loc_405C7A:                             ; CODE XREF: sub_405C10+1↑j
.text:00405C7A                 and     ds:25202C73h, ah
.text:00405C80                 jnb     short loc_405CAE
.text:00405C82                 and     ds:250A2C73h, ah
.text:00405C88
.text:00405C88 loc_405C88:                             ; CODE XREF: sub_405C10+3↑j
.text:00405C88                 jnb     short near ptr loc_405CB5+1
.text:00405C8A                 and     ds:61202C73h, ah
.text:00405C90                 outsb
.text:00405C91                 and     fs:0A2E73h, ah
.text:00405C98                 nop
.text:00405C99                 nop
.text:00405C9A                 nop
.text:00405C9B                 nop
.text:00405C9C
.text:00405C9C loc_405C9C:                             ; CODE XREF: sub_405C10+21↑j
.text:00405C9C                 nop
.text:00405C9D                 nop
.text:00405C9E                 nop
.text:00405C9F                 nop
.text:00405CA0                 nop
.text:00405CA1                 nop
.text:00405CA2                 nop
.text:00405CA3                 nop
.text:00405CA4                 nop
.text:00405CA5                 nop
.text:00405CA6                 nop
.text:00405CA7                 nop
.text:00405CA8                 nop
.text:00405CA9
.text:00405CA9 loc_405CA9:                             ; CODE XREF: sub_405C10:loc_405C33↑j
.text:00405CA9                 nop
.text:00405CAA                 nop
.text:00405CAB                 nop
.text:00405CAC                 nop
.text:00405CAD                 nop
.text:00405CAE
.text:00405CAE loc_405CAE:                             ; CODE XREF: sub_405C70+10↑j
.text:00405CAE                 nop
.text:00405CAF                 nop
.text:00405CAF sub_405C70      endp ; sp-analysis failed
.text:00405CAF
.text:00405CB0
.text:00405CB0 ; =============== S U B R O U T I N E =======================================
.text:00405CB0
.text:00405CB0
.text:00405CB0 sub_405CB0      proc near               ; DATA XREF: sub_405DC0:loc_405F3D↓o
.text:00405CB0                 push    edi
.text:00405CB1                 jb      short near ptr loc_405D19+3
.text:00405CB3                 jz      short loc_405D29
.text:00405CB5
.text:00405CB5 loc_405CB5:                             ; CODE XREF: sub_405C70:loc_405C88↑j
.text:00405CB5                 outs    dx, byte ptr gs:[esi]
.text:00405CB7                 and     [edx+79h], ah
.text:00405CBA                 and     ds:25202C73h, ah
.text:00405CC0                 jnb     short loc_405CEE
.text:00405CC2                 and     ds:250A2C73h, ah
.text:00405CC8                 jnb     short near ptr loc_405CF5+1
.text:00405CCA                 and     ds:25202C73h, ah
.text:00405CD0                 jnb     short near ptr loc_405CFA+4
.text:00405CD2                 and     [ecx+6Eh], ah
.text:00405CD5                 and     fs:0A2E73h, ah
.text:00405CDC
.text:00405CDC loc_405CDC:                             ; CODE XREF: sub_405C70+1↑j
.text:00405CDC                 nop
.text:00405CDD                 nop
.text:00405CDE                 nop
.text:00405CDF                 nop
.text:00405CE0                 nop
.text:00405CE1                 nop
.text:00405CE2                 nop
.text:00405CE3                 nop
.text:00405CE4                 nop
.text:00405CE5                 nop
.text:00405CE6                 nop
.text:00405CE7                 nop
.text:00405CE8                 nop
.text:00405CE9
.text:00405CE9 loc_405CE9:                             ; CODE XREF: sub_405C70+3↑j
.text:00405CE9                 nop
.text:00405CEA                 nop
.text:00405CEB                 nop
.text:00405CEC                 nop
.text:00405CED                 nop
.text:00405CEE
.text:00405CEE loc_405CEE:                             ; CODE XREF: sub_405CB0+10↑j
.text:00405CEE                 nop
.text:00405CEF                 nop
.text:00405CEF sub_405CB0      endp ; sp-analysis failed
.text:00405CEF
.text:00405CF0
.text:00405CF0 ; =============== S U B R O U T I N E =======================================
.text:00405CF0
.text:00405CF0
.text:00405CF0 sub_405CF0      proc near               ; DATA XREF: sub_405DC0:loc_405F49↓o
.text:00405CF0                 push    edi
.text:00405CF1                 jb      short near ptr loc_405D5A+2
.text:00405CF3                 jz      short near ptr loc_405D64+5
.text:00405CF5
.text:00405CF5 loc_405CF5:                             ; CODE XREF: sub_405CB0+18↑j
.text:00405CF5                 outs    dx, byte ptr gs:[esi]
.text:00405CF7                 and     [edx+79h], ah
.text:00405CFA
.text:00405CFA loc_405CFA:                             ; CODE XREF: sub_405CB0+20↑j
.text:00405CFA                 and     ds:25202C73h, ah
.text:00405D00                 jnb     short loc_405D2E
.text:00405D02                 and     ds:250A2C73h, ah
.text:00405D08                 jnb     short near ptr loc_405D35+1
.text:00405D0A                 and     ds:25202C73h, ah
.text:00405D10                 jnb     short near ptr loc_405D3A+4
.text:00405D12                 and     ds:610A2C73h, ah
.text:00405D18                 outsb
.text:00405D19
.text:00405D19 loc_405D19:                             ; CODE XREF: sub_405CB0+1↑j
.text:00405D19                 and     fs:0A2E73h, ah
.text:00405D20                 nop
.text:00405D21                 nop
.text:00405D22                 nop
.text:00405D23                 nop
.text:00405D24                 nop
.text:00405D25                 nop
.text:00405D26                 nop
.text:00405D27                 nop
.text:00405D28                 nop
.text:00405D29
.text:00405D29 loc_405D29:                             ; CODE XREF: sub_405CB0+3↑j
.text:00405D29                 nop
.text:00405D2A                 nop
.text:00405D2B                 nop
.text:00405D2C                 nop
.text:00405D2D                 nop
.text:00405D2E
.text:00405D2E loc_405D2E:                             ; CODE XREF: sub_405CF0+10↑j
.text:00405D2E                 nop
.text:00405D2F                 nop
.text:00405D2F sub_405CF0      endp ; sp-analysis failed
.text:00405D2F
.text:00405D30
.text:00405D30 ; =============== S U B R O U T I N E =======================================
.text:00405D30
.text:00405D30
.text:00405D30 sub_405D30      proc near               ; DATA XREF: sub_405DC0:loc_405F55↓o
.text:00405D30                 push    edi
.text:00405D31                 jb      short near ptr loc_405D9A+2
.text:00405D33                 jz      short near ptr loc_405DA5+4
.text:00405D35
.text:00405D35 loc_405D35:                             ; CODE XREF: sub_405CF0+18↑j
.text:00405D35                 outs    dx, byte ptr gs:[esi]
.text:00405D37                 and     [edx+79h], ah
.text:00405D3A
.text:00405D3A loc_405D3A:                             ; CODE XREF: sub_405CF0+20↑j
.text:00405D3A                 and     ds:25202C73h, ah
.text:00405D40                 jnb     short near ptr loc_405D6A+4
.text:00405D42                 and     ds:250A2C73h, ah
.text:00405D48                 jnb     short near ptr loc_405D75+1
.text:00405D4A                 and     ds:25202C73h, ah
.text:00405D50                 jnb     short near ptr loc_405D7A+4
.text:00405D52                 and     ds:250A2C73h, ah
.text:00405D58                 jnb     short near ptr loc_405D82+4
.text:00405D5A
.text:00405D5A loc_405D5A:                             ; CODE XREF: sub_405CF0+1↑j
.text:00405D5A                 and     [ecx+6Eh], ah
.text:00405D5D                 and     fs:0A2E73h, ah
.text:00405D64
.text:00405D64 loc_405D64:                             ; CODE XREF: sub_405CF0+3↑j
.text:00405D64                 lea     esi, [esi+0]
.text:00405D6A
.text:00405D6A loc_405D6A:                             ; CODE XREF: sub_405D30+10↑j
.text:00405D6A                 lea     edi, [edi+0]
.text:00405D70
.text:00405D70 loc_405D70:                             ; DATA XREF: sub_405DC0:def_405E2D↓o
.text:00405D70                 push    edi
.text:00405D71                 jb      short near ptr loc_405DDB+1
.text:00405D73                 jz      short near ptr loc_405DE8+1
.text:00405D75
.text:00405D75 loc_405D75:                             ; CODE XREF: sub_405D30+18↑j
.text:00405D75                 outs    dx, byte ptr gs:[esi]
.text:00405D77                 and     [edx+79h], ah
.text:00405D7A
.text:00405D7A loc_405D7A:                             ; CODE XREF: sub_405D30+20↑j
.text:00405D7A                 and     ds:25202C73h, ah
.text:00405D80                 jnb     short near ptr loc_405DAC+2
.text:00405D82
.text:00405D82 loc_405D82:                             ; CODE XREF: sub_405D30+28↑j
.text:00405D82                 and     ds:250A2C73h, ah
.text:00405D88                 jnb     short near ptr loc_405DB3+3
.text:00405D8A                 and     ds:25202C73h, ah
.text:00405D90                 jnb     short near ptr loc_405DB9+5
.text:00405D92                 and     ds:250A2C73h, ah
.text:00405D98                 jnb     short near ptr loc_405DC4+2
.text:00405D9A
.text:00405D9A loc_405D9A:                             ; CODE XREF: sub_405D30+1↑j
.text:00405D9A                 and     ds:61202C73h, ah
.text:00405DA0                 outsb
.text:00405DA1                 and     fs:[edi+74h], ch
.text:00405DA5
.text:00405DA5 loc_405DA5:                             ; CODE XREF: sub_405D30+3↑j
.text:00405DA5                 push    2E737265h
.text:00405DAA                 or      al, [eax]
.text:00405DAC
.text:00405DAC loc_405DAC:                             ; CODE XREF: sub_405D30+50↑j
.text:00405DAC                                         ; DATA XREF: sub_405DC0+1B5↓o
.text:00405DAC                 and     eax, 73252073h
.text:00405DB1                 or      al, [eax]
.text:00405DB3
.text:00405DB3 loc_405DB3:                             ; CODE XREF: sub_405D30+58↑j
.text:00405DB3                 lea     esi, [esi+0]
.text:00405DB9
.text:00405DB9 loc_405DB9:                             ; CODE XREF: sub_405D30+60↑j
.text:00405DB9                 lea     edi, [edi+0]
.text:00405DB9 sub_405D30      endp ; sp-analysis failed
.text:00405DB9
.text:00405DC0
.text:00405DC0 ; =============== S U B R O U T I N E =======================================
.text:00405DC0
.text:00405DC0
.text:00405DC0 ; int __cdecl sub_405DC0(FILE *, FILE *, int, int, va_list)
.text:00405DC0 sub_405DC0      proc near               ; CODE XREF: sub_405F90+2A↓p
.text:00405DC0
.text:00405DC0 Stream          = dword ptr -2Ch
.text:00405DC0 Format          = dword ptr -28h
.text:00405DC0 ArgList         = dword ptr -24h
.text:00405DC0 var_20          = dword ptr -20h
.text:00405DC0 var_1C          = dword ptr -1Ch
.text:00405DC0 var_14          = dword ptr -14h
.text:00405DC0 arg_0           = dword ptr  4
.text:00405DC0 arg_4           = dword ptr  8
.text:00405DC0 arg_8           = dword ptr  0Ch
.text:00405DC0 arg_C           = dword ptr  10h
.text:00405DC0 arg_10          = dword ptr  14h
.text:00405DC0
.text:00405DC0                 push    ebp
.text:00405DC1                 push    edi
.text:00405DC2                 push    esi
.text:00405DC3                 push    ebx
.text:00405DC4
.text:00405DC4 loc_405DC4:                             ; CODE XREF: sub_405D30+68↑j
.text:00405DC4                 sub     esp, 1Ch
.text:00405DC7                 xor     ebx, ebx
.text:00405DC9                 mov     edi, [esp+2Ch+arg_10]
.text:00405DCD                 mov     edx, [esp+2Ch+arg_8]
.text:00405DD1                 mov     esi, [esp+2Ch+arg_0]
.text:00405DD5                 mov     eax, [edi]
.text:00405DD7                 mov     ecx, [esp+2Ch+arg_4]
.text:00405DDB
.text:00405DDB loc_405DDB:                             ; CODE XREF: sub_405D30+41↑j
.text:00405DDB                 mov     [esp+2Ch+var_14], edx
.text:00405DDF                 mov     ebp, [esp+2Ch+arg_C]
.text:00405DE3                 lea     edx, [edi+4]
.text:00405DE6                 test    eax, eax
.text:00405DE8
.text:00405DE8 loc_405DE8:                             ; CODE XREF: sub_405D30+43↑j
.text:00405DE8                 jz      short loc_405DFC
.text:00405DEA                 lea     esi, [esi+0]
.text:00405DF0
.text:00405DF0 loc_405DF0:                             ; CODE XREF: sub_405DC0+3A↓j
.text:00405DF0                 mov     eax, edx
.text:00405DF2                 inc     ebx
.text:00405DF3                 mov     eax, [eax]
.text:00405DF5                 add     edx, 4
.text:00405DF8                 test    eax, eax
.text:00405DFA                 jnz     short loc_405DF0
.text:00405DFC
.text:00405DFC loc_405DFC:                             ; CODE XREF: sub_405DC0:loc_405DE8↑j
.text:00405DFC                 test    ecx, ecx
.text:00405DFE                 jz      loc_405F6D
.text:00405E04                 mov     [esp+2Ch+var_1C], ebp
.text:00405E08                 mov     edx, [esp+2Ch+var_14]
.text:00405E0C                 mov     [esp+2Ch+ArgList], ecx
.text:00405E10                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00405E18                 mov     [esp+2Ch+var_20], edx
.text:00405E1C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405E1F                 call    fprintf
.text:00405E24
.text:00405E24 loc_405E24:                             ; CODE XREF: sub_405DC0+1C9↓j
.text:00405E24                 cmp     ebx, 9          ; switch 10 cases
.text:00405E27                 ja      def_405E2D      ; jumptable 00405E2D default case
.text:00405E2D                 jmp     ds:jpt_405E2D[ebx*4] ; switch jump
.text:00405E2D ; ---------------------------------------------------------------------------
.text:00405E34 jpt_405E2D      dd offset loc_405E5C    ; DATA XREF: sub_405DC0+6D↑r
.text:00405E34                 dd offset loc_405E61    ; jump table for switch statement
.text:00405E34                 dd offset loc_405F01
.text:00405E34                 dd offset loc_405F0D
.text:00405E34                 dd offset loc_405F19
.text:00405E34                 dd offset loc_405F25
.text:00405E34                 dd offset loc_405F31
.text:00405E34                 dd offset loc_405F3D
.text:00405E34                 dd offset loc_405F49
.text:00405E34                 dd offset loc_405F55
.text:00405E5C ; ---------------------------------------------------------------------------
.text:00405E5C
.text:00405E5C loc_405E5C:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405E5C                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405E5C                 call    abort           ; jumptable 00405E2D case 0
.text:00405E61 ; ---------------------------------------------------------------------------
.text:00405E61
.text:00405E61 loc_405E61:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405E61                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405E61                 mov     [esp+2Ch+Stream], 405B0Eh ; jumptable 00405E2D case 1
.text:00405E68                 nop
.text:00405E69                 lea     esi, [esi+0]
.text:00405E70
.text:00405E70 loc_405E70:                             ; CODE XREF: sub_405DC0+148↓j
.text:00405E70                                         ; sub_405DC0+154↓j ...
.text:00405E70                 call    ds:libintl_gettext
.text:00405E76                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00405E7A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405E7D                 mov     [esp+2Ch+Format], eax ; Format
.text:00405E81                 call    vfprintf
.text:00405E86                 mov     ebx, [esi+4]
.text:00405E89                 dec     ebx
.text:00405E8A                 test    ebx, ebx
.text:00405E8C                 mov     [esi+4], ebx
.text:00405E8F                 js      short loc_405EEF
.text:00405E91                 mov     edi, [esi]
.text:00405E93                 mov     byte ptr [edi], 0Ah
.text:00405E96                 inc     dword ptr [esi]
.text:00405E98
.text:00405E98 loc_405E98:                             ; CODE XREF: sub_405DC0+13F↓j
.text:00405E98                 mov     [esp+2Ch+Format], esi ; Stream
.text:00405E9C                 mov     edx, Buffer
.text:00405EA2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00405EA5                 call    fputs
.text:00405EAA                 mov     ebp, [esi+4]
.text:00405EAD                 dec     ebp
.text:00405EAE                 test    ebp, ebp
.text:00405EB0                 mov     [esi+4], ebp
.text:00405EB3                 js      short loc_405EDD
.text:00405EB5                 mov     ecx, [esi]
.text:00405EB7                 mov     byte ptr [ecx], 0Ah
.text:00405EBA                 inc     dword ptr [esi]
.text:00405EBC
.text:00405EBC loc_405EBC:                             ; CODE XREF: sub_405DC0+12D↓j
.text:00405EBC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00405EC0                 mov     [esp+2Ch+Stream], offset sub_405B30
.text:00405EC7                 call    ds:libintl_gettext
.text:00405ECD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00405ED1                 add     esp, 1Ch
.text:00405ED4                 pop     ebx
.text:00405ED5                 pop     esi
.text:00405ED6                 pop     edi
.text:00405ED7                 pop     ebp
.text:00405ED8                 jmp     fputs
.text:00405EDD ; ---------------------------------------------------------------------------
.text:00405EDD
.text:00405EDD loc_405EDD:                             ; CODE XREF: sub_405DC0+F3↑j
.text:00405EDD                 mov     [esp+2Ch+Format], esi ; File
.text:00405EE1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405EE8                 call    _flsbuf
.text:00405EED                 jmp     short loc_405EBC
.text:00405EEF ; ---------------------------------------------------------------------------
.text:00405EEF
.text:00405EEF loc_405EEF:                             ; CODE XREF: sub_405DC0+CF↑j
.text:00405EEF                 mov     [esp+2Ch+Format], esi ; File
.text:00405EF3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405EFA                 call    _flsbuf
.text:00405EFF                 jmp     short loc_405E98
.text:00405F01 ; ---------------------------------------------------------------------------
.text:00405F01
.text:00405F01 loc_405F01:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405F01                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405F01                 mov     [esp+2Ch+Stream], offset loc_405BC8 ; jumptable 00405E2D case 2
.text:00405F08                 jmp     loc_405E70
.text:00405F0D ; ---------------------------------------------------------------------------
.text:00405F0D
.text:00405F0D loc_405F0D:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405F0D                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405F0D                 mov     [esp+2Ch+Stream], offset loc_405BDF ; jumptable 00405E2D case 3
.text:00405F14                 jmp     loc_405E70
.text:00405F19 ; ---------------------------------------------------------------------------
.text:00405F19
.text:00405F19 loc_405F19:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405F19                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405F19                 mov     [esp+2Ch+Stream], offset sub_405C10 ; jumptable 00405E2D case 4
.text:00405F20                 jmp     loc_405E70
.text:00405F25 ; ---------------------------------------------------------------------------
.text:00405F25
.text:00405F25 loc_405F25:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405F25                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405F25                 mov     [esp+2Ch+Stream], offset loc_405C30 ; jumptable 00405E2D case 5
.text:00405F2C                 jmp     loc_405E70
.text:00405F31 ; ---------------------------------------------------------------------------
.text:00405F31
.text:00405F31 loc_405F31:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405F31                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405F31                 mov     [esp+2Ch+Stream], offset sub_405C70 ; jumptable 00405E2D case 6
.text:00405F38                 jmp     loc_405E70
.text:00405F3D ; ---------------------------------------------------------------------------
.text:00405F3D
.text:00405F3D loc_405F3D:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405F3D                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405F3D                 mov     [esp+2Ch+Stream], offset sub_405CB0 ; jumptable 00405E2D case 7
.text:00405F44                 jmp     loc_405E70
.text:00405F49 ; ---------------------------------------------------------------------------
.text:00405F49
.text:00405F49 loc_405F49:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405F49                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405F49                 mov     [esp+2Ch+Stream], offset sub_405CF0 ; jumptable 00405E2D case 8
.text:00405F50                 jmp     loc_405E70
.text:00405F55 ; ---------------------------------------------------------------------------
.text:00405F55
.text:00405F55 loc_405F55:                             ; CODE XREF: sub_405DC0+6D↑j
.text:00405F55                                         ; DATA XREF: sub_405DC0:jpt_405E2D↑o
.text:00405F55                 mov     [esp+2Ch+Stream], offset sub_405D30 ; jumptable 00405E2D case 9
.text:00405F5C                 jmp     loc_405E70
.text:00405F61 ; ---------------------------------------------------------------------------
.text:00405F61
.text:00405F61 def_405E2D:                             ; CODE XREF: sub_405DC0+67↑j
.text:00405F61                 mov     [esp+2Ch+Stream], offset loc_405D70 ; jumptable 00405E2D default case
.text:00405F68                 jmp     loc_405E70
.text:00405F6D ; ---------------------------------------------------------------------------
.text:00405F6D
.text:00405F6D loc_405F6D:                             ; CODE XREF: sub_405DC0+3E↑j
.text:00405F6D                 mov     [esp+2Ch+var_20], ebp
.text:00405F71                 mov     ecx, [esp+2Ch+var_14]
.text:00405F75                 mov     [esp+2Ch+Format], offset loc_405DAC ; Format
.text:00405F7D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405F80                 mov     [esp+2Ch+ArgList], ecx
.text:00405F84                 call    fprintf
.text:00405F89                 jmp     loc_405E24
.text:00405F89 sub_405DC0      endp
.text:00405F89
.text:00405F89 ; ---------------------------------------------------------------------------
.text:00405F8E                 align 10h
.text:00405F90
.text:00405F90 ; =============== S U B R O U T I N E =======================================
.text:00405F90
.text:00405F90
.text:00405F90 ; int __cdecl sub_405F90(FILE *, FILE *, int, int, char)
.text:00405F90 sub_405F90      proc near               ; CODE XREF: sub_401920+1EF↑p
.text:00405F90
.text:00405F90 var_1C          = dword ptr -1Ch
.text:00405F90 var_18          = dword ptr -18h
.text:00405F90 var_14          = dword ptr -14h
.text:00405F90 var_10          = dword ptr -10h
.text:00405F90 var_C           = dword ptr -0Ch
.text:00405F90 arg_0           = dword ptr  4
.text:00405F90 arg_4           = dword ptr  8
.text:00405F90 arg_8           = dword ptr  0Ch
.text:00405F90 arg_C           = dword ptr  10h
.text:00405F90 arg_10          = byte ptr  14h
.text:00405F90
.text:00405F90                 sub     esp, 1Ch
.text:00405F93                 mov     edx, [esp+1Ch+arg_C]
.text:00405F97                 lea     ecx, [esp+1Ch+arg_10]
.text:00405F9B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00405F9F                 mov     ecx, [esp+1Ch+arg_8]
.text:00405FA3                 mov     [esp+1Ch+var_10], edx ; int
.text:00405FA7                 mov     edx, [esp+1Ch+arg_4]
.text:00405FAB                 mov     [esp+1Ch+var_14], ecx ; int
.text:00405FAF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00405FB3                 mov     edx, [esp+1Ch+arg_0]
.text:00405FB7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00405FBA                 call    sub_405DC0
.text:00405FBF                 add     esp, 1Ch
.text:00405FC2                 retn
.text:00405FC2 sub_405F90      endp
.text:00405FC2
.text:00405FC2 ; ---------------------------------------------------------------------------
.text:00405FC3                 align 10h
.text:00405FD0                 sub     esp, 0Ch
.text:00405FD3                 xor     edx, edx
.text:00405FD5                 mov     ecx, [esp+14h]
.text:00405FD9                 mov     [esp+8], ebx
.text:00405FDD                 mov     eax, 0FFFFFFFFh
.text:00405FE2                 mov     ebx, [esp+10h]
.text:00405FE6                 div     ecx
.text:00405FE8                 cmp     eax, ebx
.text:00405FEA                 jb      short loc_406009
.text:00405FEC                 mov     edx, ebx
.text:00405FEE                 imul    edx, ecx
.text:00405FF1                 mov     [esp], edx
.text:00405FF4                 call    malloc
.text:00405FF9                 test    eax, eax
.text:00405FFB                 jz      short loc_406005
.text:00405FFD
.text:00405FFD loc_405FFD:                             ; CODE XREF: .text:00406007↓j
.text:00405FFD                 mov     ebx, [esp+8]
.text:00406001                 add     esp, 0Ch
.text:00406004                 retn
.text:00406005 ; ---------------------------------------------------------------------------
.text:00406005
.text:00406005 loc_406005:                             ; CODE XREF: .text:00405FFB↑j
.text:00406005                 test    ebx, ebx
.text:00406007                 jz      short loc_405FFD
.text:00406009
.text:00406009 loc_406009:                             ; CODE XREF: .text:00405FEA↑j
.text:00406009                 call    sub_405A90
.text:00406009 ; ---------------------------------------------------------------------------
.text:0040600E                 align 10h
.text:00406010
.text:00406010 ; =============== S U B R O U T I N E =======================================
.text:00406010
.text:00406010
.text:00406010 ; int __cdecl sub_406010(size_t)
.text:00406010 sub_406010      proc near               ; CODE XREF: .text:00408699↓p
.text:00406010                                         ; .text:00408876↓p ...
.text:00406010
.text:00406010 Size            = dword ptr -0Ch
.text:00406010 var_4           = dword ptr -4
.text:00406010 arg_0           = dword ptr  4
.text:00406010
.text:00406010                 sub     esp, 0Ch
.text:00406013                 mov     [esp+0Ch+var_4], ebx
.text:00406017                 mov     ebx, [esp+0Ch+arg_0]
.text:0040601B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040601E                 call    malloc
.text:00406023                 test    eax, eax
.text:00406025                 jz      short loc_406030
.text:00406027
.text:00406027 loc_406027:                             ; CODE XREF: sub_406010+22↓j
.text:00406027                 mov     ebx, [esp+0Ch+var_4]
.text:0040602B                 add     esp, 0Ch
.text:0040602E                 retn
.text:0040602E ; ---------------------------------------------------------------------------
.text:0040602F                 align 10h
.text:00406030
.text:00406030 loc_406030:                             ; CODE XREF: sub_406010+15↑j
.text:00406030                 test    ebx, ebx
.text:00406032                 jz      short loc_406027
.text:00406034                 call    sub_405A90
.text:00406034 sub_406010      endp
.text:00406034
.text:00406034 ; ---------------------------------------------------------------------------
.text:00406039                 align 10h
.text:00406040                 sub     esp, 1Ch
.text:00406043                 xor     edx, edx
.text:00406045                 mov     eax, 0FFFFFFFFh
.text:0040604A                 mov     [esp+14h], ebx
.text:0040604E                 mov     ecx, [esp+20h]
.text:00406052                 mov     ebx, [esp+28h]
.text:00406056                 mov     [esp+18h], esi
.text:0040605A                 mov     esi, [esp+24h]
.text:0040605E                 div     ebx
.text:00406060                 cmp     eax, esi
.text:00406062                 jb      short loc_406094
.text:00406064                 mov     [esp], ecx
.text:00406067                 mov     edx, esi
.text:00406069                 imul    edx, ebx
.text:0040606C                 mov     [esp+4], edx
.text:00406070                 call    realloc
.text:00406075                 test    eax, eax
.text:00406077                 mov     ecx, eax
.text:00406079                 jz      short loc_406090
.text:0040607B
.text:0040607B loc_40607B:                             ; CODE XREF: .text:00406092↓j
.text:0040607B                 mov     ebx, [esp+14h]
.text:0040607F                 mov     eax, ecx
.text:00406081                 mov     esi, [esp+18h]
.text:00406085                 add     esp, 1Ch
.text:00406088                 retn
.text:00406088 ; ---------------------------------------------------------------------------
.text:00406089                 align 10h
.text:00406090
.text:00406090 loc_406090:                             ; CODE XREF: .text:00406079↑j
.text:00406090                 test    esi, esi
.text:00406092                 jz      short loc_40607B
.text:00406094
.text:00406094 loc_406094:                             ; CODE XREF: .text:00406062↑j
.text:00406094                 call    sub_405A90
.text:00406094 ; ---------------------------------------------------------------------------
.text:00406099                 align 10h
.text:004060A0
.text:004060A0 ; =============== S U B R O U T I N E =======================================
.text:004060A0
.text:004060A0
.text:004060A0 ; int __cdecl sub_4060A0(void *, size_t)
.text:004060A0 sub_4060A0      proc near               ; CODE XREF: sub_408D60+5B↓p
.text:004060A0
.text:004060A0 Block           = dword ptr -0Ch
.text:004060A0 Size            = dword ptr -8
.text:004060A0 var_4           = dword ptr -4
.text:004060A0 arg_0           = dword ptr  4
.text:004060A0 arg_4           = dword ptr  8
.text:004060A0
.text:004060A0                 sub     esp, 0Ch
.text:004060A3                 mov     edx, [esp+0Ch+arg_0]
.text:004060A7                 mov     [esp+0Ch+var_4], ebx
.text:004060AB                 mov     ebx, [esp+0Ch+arg_4]
.text:004060AF                 mov     [esp+0Ch+Block], edx ; Block
.text:004060B2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004060B6                 call    realloc
.text:004060BB                 test    eax, eax
.text:004060BD                 jz      short loc_4060C7
.text:004060BF
.text:004060BF loc_4060BF:                             ; CODE XREF: sub_4060A0+29↓j
.text:004060BF                 mov     ebx, [esp+0Ch+var_4]
.text:004060C3                 add     esp, 0Ch
.text:004060C6                 retn
.text:004060C7 ; ---------------------------------------------------------------------------
.text:004060C7
.text:004060C7 loc_4060C7:                             ; CODE XREF: sub_4060A0+1D↑j
.text:004060C7                 test    ebx, ebx
.text:004060C9                 jz      short loc_4060BF
.text:004060CB                 call    sub_405A90
.text:004060CB sub_4060A0      endp
.text:004060CB
.text:004060D0 ; ---------------------------------------------------------------------------
.text:004060D0                 jmp     sub_406220
.text:004060D0 ; ---------------------------------------------------------------------------
.text:004060D5                 align 10h
.text:004060E0
.text:004060E0 ; =============== S U B R O U T I N E =======================================
.text:004060E0
.text:004060E0
.text:004060E0 ; int __cdecl sub_4060E0(void *, int)
.text:004060E0 sub_4060E0      proc near               ; CODE XREF: sub_401920+16A↑p
.text:004060E0
.text:004060E0 var_C           = dword ptr -0Ch
.text:004060E0 var_8           = dword ptr -8
.text:004060E0 var_4           = dword ptr -4
.text:004060E0 arg_0           = dword ptr  4
.text:004060E0 arg_4           = dword ptr  8
.text:004060E0
.text:004060E0                 sub     esp, 0Ch
.text:004060E3                 mov     edx, [esp+0Ch+arg_4]
.text:004060E7                 mov     [esp+0Ch+var_4], 1 ; int
.text:004060EF                 mov     [esp+0Ch+var_8], edx ; int
.text:004060F3                 mov     edx, [esp+0Ch+arg_0]
.text:004060F7                 mov     [esp+0Ch+var_C], edx ; void *
.text:004060FA                 call    sub_406220
.text:004060FF                 add     esp, 0Ch
.text:00406102                 retn
.text:00406102 sub_4060E0      endp
.text:00406102
.text:00406102 ; ---------------------------------------------------------------------------
.text:00406103                 align 10h
.text:00406110                 sub     esp, 1Ch
.text:00406113                 mov     [esp+18h], ebx
.text:00406117                 mov     ebx, [esp+20h]
.text:0040611B                 mov     [esp], ebx
.text:0040611E                 call    malloc
.text:00406123                 test    eax, eax
.text:00406125                 jz      short loc_406143
.text:00406127
.text:00406127 loc_406127:                             ; CODE XREF: .text:00406145↓j
.text:00406127                 mov     [esp+8], ebx
.text:0040612B                 mov     dword ptr [esp+4], 0
.text:00406133                 mov     [esp], eax
.text:00406136                 call    memset
.text:0040613B                 mov     ebx, [esp+18h]
.text:0040613F                 add     esp, 1Ch
.text:00406142                 retn
.text:00406143 ; ---------------------------------------------------------------------------
.text:00406143
.text:00406143 loc_406143:                             ; CODE XREF: .text:00406125↑j
.text:00406143                 test    ebx, ebx
.text:00406145                 jz      short loc_406127
.text:00406147                 call    sub_405A90
.text:00406147 ; ---------------------------------------------------------------------------
.text:0040614C                 align 10h
.text:00406150                 sub     esp, 0Ch
.text:00406153                 xor     edx, edx
.text:00406155                 mov     ecx, [esp+14h]
.text:00406159                 mov     [esp+8], ebx
.text:0040615D                 mov     eax, 0FFFFFFFFh
.text:00406162                 mov     ebx, [esp+10h]
.text:00406166                 div     ecx
.text:00406168                 cmp     eax, ebx
.text:0040616A                 jb      short loc_406188
.text:0040616C                 mov     [esp+4], ecx
.text:00406170                 mov     [esp], ebx
.text:00406173                 call    calloc
.text:00406178                 test    eax, eax
.text:0040617A                 jz      short loc_406184
.text:0040617C
.text:0040617C loc_40617C:                             ; CODE XREF: .text:00406186↓j
.text:0040617C                 mov     ebx, [esp+8]
.text:00406180                 add     esp, 0Ch
.text:00406183                 retn
.text:00406184 ; ---------------------------------------------------------------------------
.text:00406184
.text:00406184 loc_406184:                             ; CODE XREF: .text:0040617A↑j
.text:00406184                 test    ebx, ebx
.text:00406186                 jz      short loc_40617C
.text:00406188
.text:00406188 loc_406188:                             ; CODE XREF: .text:0040616A↑j
.text:00406188                 call    sub_405A90
.text:00406188 ; ---------------------------------------------------------------------------
.text:0040618D                 align 10h
.text:00406190                 sub     esp, 1Ch
.text:00406193                 mov     [esp+18h], ebx
.text:00406197                 mov     ebx, [esp+24h]
.text:0040619B                 mov     [esp], ebx
.text:0040619E                 call    malloc
.text:004061A3                 test    eax, eax
.text:004061A5                 mov     edx, eax
.text:004061A7                 jz      short loc_4061C5
.text:004061A9
.text:004061A9 loc_4061A9:                             ; CODE XREF: .text:004061C7↓j
.text:004061A9                 mov     [esp+8], ebx
.text:004061AD                 mov     ecx, [esp+20h]
.text:004061B1                 mov     [esp], edx
.text:004061B4                 mov     [esp+4], ecx
.text:004061B8                 call    memcpy
.text:004061BD                 mov     ebx, [esp+18h]
.text:004061C1                 add     esp, 1Ch
.text:004061C4                 retn
.text:004061C5 ; ---------------------------------------------------------------------------
.text:004061C5
.text:004061C5 loc_4061C5:                             ; CODE XREF: .text:004061A7↑j
.text:004061C5                 test    ebx, ebx
.text:004061C7                 jz      short loc_4061A9
.text:004061C9                 call    sub_405A90
.text:004061C9 ; ---------------------------------------------------------------------------
.text:004061CE                 align 10h
.text:004061D0                 sub     esp, 1Ch
.text:004061D3                 mov     [esp+18h], esi
.text:004061D7                 mov     esi, [esp+20h]
.text:004061DB                 mov     [esp+14h], ebx
.text:004061DF                 mov     [esp], esi
.text:004061E2                 call    strlen
.text:004061E7                 lea     ebx, [eax+1]
.text:004061EA                 mov     [esp], ebx
.text:004061ED                 call    malloc
.text:004061F2                 test    eax, eax
.text:004061F4                 jz      short loc_406212
.text:004061F6
.text:004061F6 loc_4061F6:                             ; CODE XREF: .text:00406214↓j
.text:004061F6                 mov     [esp+8], ebx
.text:004061FA                 mov     [esp+4], esi
.text:004061FE                 mov     [esp], eax
.text:00406201                 call    memcpy
.text:00406206                 mov     ebx, [esp+14h]
.text:0040620A                 mov     esi, [esp+18h]
.text:0040620E                 add     esp, 1Ch
.text:00406211                 retn
.text:00406212 ; ---------------------------------------------------------------------------
.text:00406212
.text:00406212 loc_406212:                             ; CODE XREF: .text:004061F4↑j
.text:00406212                 test    ebx, ebx
.text:00406214                 jz      short loc_4061F6
.text:00406216                 call    sub_405A90
.text:00406216 ; ---------------------------------------------------------------------------
.text:0040621B                 align 10h
.text:00406220
.text:00406220 ; =============== S U B R O U T I N E =======================================
.text:00406220
.text:00406220
.text:00406220 ; int __cdecl sub_406220(void *, int, int)
.text:00406220 sub_406220      proc near               ; CODE XREF: .text:004060D0↑j
.text:00406220                                         ; sub_4060E0+1A↑p
.text:00406220
.text:00406220 Block           = dword ptr -1Ch
.text:00406220 Size            = dword ptr -18h
.text:00406220 var_C           = dword ptr -0Ch
.text:00406220 var_8           = dword ptr -8
.text:00406220 var_4           = dword ptr -4
.text:00406220 arg_0           = dword ptr  4
.text:00406220 arg_4           = dword ptr  8
.text:00406220 arg_8           = dword ptr  0Ch
.text:00406220
.text:00406220                 sub     esp, 1Ch
.text:00406223                 mov     [esp+1Ch+var_8], esi
.text:00406227                 mov     esi, [esp+1Ch+arg_0]
.text:0040622B                 mov     [esp+1Ch+var_4], edi
.text:0040622F                 mov     edi, [esp+1Ch+arg_4]
.text:00406233                 test    esi, esi
.text:00406235                 mov     [esp+1Ch+var_C], ebx
.text:00406239                 mov     ecx, [edi]
.text:0040623B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040623F                 jz      short loc_406280
.text:00406241                 xor     edx, edx
.text:00406243                 mov     eax, 7FFFFFFFh
.text:00406248                 div     ebx
.text:0040624A                 cmp     eax, ecx
.text:0040624C                 jb      short loc_406279
.text:0040624E                 add     ecx, ecx
.text:00406250
.text:00406250 loc_406250:                             ; CODE XREF: sub_406220+62↓j
.text:00406250                                         ; sub_406220+71↓j ...
.text:00406250                 mov     [edi], ecx
.text:00406252                 imul    ebx, ecx
.text:00406255                 mov     [esp+1Ch+Block], esi ; Block
.text:00406258                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040625C                 call    realloc
.text:00406261                 test    eax, eax
.text:00406263                 jz      short loc_406275
.text:00406265
.text:00406265 loc_406265:                             ; CODE XREF: sub_406220+57↓j
.text:00406265                 mov     ebx, [esp+1Ch+var_C]
.text:00406269                 mov     esi, [esp+1Ch+var_8]
.text:0040626D                 mov     edi, [esp+1Ch+var_4]
.text:00406271                 add     esp, 1Ch
.text:00406274                 retn
.text:00406275 ; ---------------------------------------------------------------------------
.text:00406275
.text:00406275 loc_406275:                             ; CODE XREF: sub_406220+43↑j
.text:00406275                 test    ebx, ebx
.text:00406277                 jz      short loc_406265
.text:00406279
.text:00406279 loc_406279:                             ; CODE XREF: sub_406220+2C↑j
.text:00406279                 call    sub_405A90
.text:00406279 ; ---------------------------------------------------------------------------
.text:0040627E                 align 10h
.text:00406280
.text:00406280 loc_406280:                             ; CODE XREF: sub_406220+1F↑j
.text:00406280                 test    ecx, ecx
.text:00406282                 jnz     short loc_406250
.text:00406284                 xor     edx, edx
.text:00406286                 mov     eax, 40h ; '@'
.text:0040628B                 div     ebx
.text:0040628D                 test    eax, eax
.text:0040628F                 mov     ecx, eax
.text:00406291                 jnz     short loc_406250
.text:00406293                 mov     ecx, 1
.text:00406298                 jmp     short loc_406250
.text:00406298 sub_406220      endp
.text:00406298
.text:00406298 ; ---------------------------------------------------------------------------
.text:0040629A                 align 10h
.text:004062A0
.text:004062A0 ; =============== S U B R O U T I N E =======================================
.text:004062A0
.text:004062A0
.text:004062A0 sub_4062A0      proc near               ; CODE XREF: sub_401920+B5↑p
.text:004062A0
.text:004062A0 var_1C          = dword ptr -1Ch
.text:004062A0 var_18          = dword ptr -18h
.text:004062A0 var_14          = dword ptr -14h
.text:004062A0 var_10          = dword ptr -10h
.text:004062A0 var_C           = dword ptr -0Ch
.text:004062A0 var_8           = dword ptr -8
.text:004062A0 var_4           = dword ptr -4
.text:004062A0 arg_0           = dword ptr  4
.text:004062A0 arg_4           = dword ptr  8
.text:004062A0 arg_8           = dword ptr  0Ch
.text:004062A0 arg_C           = dword ptr  10h
.text:004062A0 arg_10          = dword ptr  14h
.text:004062A0
.text:004062A0                 sub     esp, 1Ch
.text:004062A3                 mov     edx, [esp+1Ch+arg_C]
.text:004062A7                 mov     [esp+1Ch+var_4], 0
.text:004062AF                 mov     ecx, [esp+1Ch+arg_10]
.text:004062B3                 mov     [esp+1Ch+var_8], 0
.text:004062BB                 mov     [esp+1Ch+var_10], edx
.text:004062BF                 mov     edx, [esp+1Ch+arg_4]
.text:004062C3                 mov     [esp+1Ch+var_C], ecx
.text:004062C7                 mov     ecx, [esp+1Ch+arg_8]
.text:004062CB                 mov     [esp+1Ch+var_18], edx
.text:004062CF                 mov     edx, [esp+1Ch+arg_0]
.text:004062D3                 mov     [esp+1Ch+var_14], ecx
.text:004062D7                 mov     [esp+1Ch+var_1C], edx
.text:004062DA                 call    sub_405830
.text:004062DF                 add     esp, 1Ch
.text:004062E2                 retn
.text:004062E2 sub_4062A0      endp
.text:004062E2
.text:004062E2 ; ---------------------------------------------------------------------------
.text:004062E3                 align 10h
.text:004062F0                 sub     esp, 2Ch
.text:004062F3                 mov     edx, [esp+44h]
.text:004062F7                 mov     dword ptr [esp+18h], 0
.text:004062FF                 mov     ecx, [esp+40h]
.text:00406303                 mov     dword ptr [esp+14h], 0
.text:0040630B                 mov     [esp+1Ch], edx
.text:0040630F                 mov     edx, [esp+3Ch]
.text:00406313                 mov     [esp+10h], ecx
.text:00406317                 mov     ecx, [esp+38h]
.text:0040631B                 mov     [esp+0Ch], edx
.text:0040631F                 mov     edx, [esp+34h]
.text:00406323                 mov     [esp+8], ecx
.text:00406327                 mov     [esp+4], edx
.text:0040632B                 mov     edx, [esp+30h]
.text:0040632F                 mov     [esp], edx
.text:00406332                 call    loc_404CA0
.text:00406337                 add     esp, 2Ch
.text:0040633A                 retn
.text:0040633A ; ---------------------------------------------------------------------------
.text:0040633B                 align 10h
.text:00406340                 sub     esp, 1Ch
.text:00406343                 mov     edx, [esp+2Ch]
.text:00406347                 mov     dword ptr [esp+18h], 0
.text:0040634F                 mov     ecx, [esp+30h]
.text:00406353                 mov     dword ptr [esp+14h], 1
.text:0040635B                 mov     [esp+0Ch], edx
.text:0040635F                 mov     edx, [esp+24h]
.text:00406363                 mov     [esp+10h], ecx
.text:00406367                 mov     ecx, [esp+28h]
.text:0040636B                 mov     [esp+4], edx
.text:0040636F                 mov     edx, [esp+20h]
.text:00406373                 mov     [esp+8], ecx
.text:00406377                 mov     [esp], edx
.text:0040637A                 call    sub_405830
.text:0040637F                 add     esp, 1Ch
.text:00406382                 retn
.text:00406382 ; ---------------------------------------------------------------------------
.text:00406383                 align 10h
.text:00406390                 sub     esp, 2Ch
.text:00406393                 mov     edx, [esp+44h]
.text:00406397                 mov     dword ptr [esp+18h], 0
.text:0040639F                 mov     ecx, [esp+40h]
.text:004063A3                 mov     dword ptr [esp+14h], 1
.text:004063AB                 mov     [esp+1Ch], edx
.text:004063AF                 mov     edx, [esp+3Ch]
.text:004063B3                 mov     [esp+10h], ecx
.text:004063B7                 mov     ecx, [esp+38h]
.text:004063BB                 mov     [esp+0Ch], edx
.text:004063BF                 mov     edx, [esp+34h]
.text:004063C3                 mov     [esp+8], ecx
.text:004063C7                 mov     [esp+4], edx
.text:004063CB                 mov     edx, [esp+30h]
.text:004063CF                 mov     [esp], edx
.text:004063D2                 call    loc_404CA0
.text:004063D7                 add     esp, 2Ch
.text:004063DA                 retn
.text:004063DA ; ---------------------------------------------------------------------------
.text:004063DB                 align 10h
.text:004063E0                 mov     edx, [esp+4]
.text:004063E4                 mov     ds:dword_414080, edx
.text:004063EA                 retn
.text:004063EA ; ---------------------------------------------------------------------------
.text:004063EB aWriteError     db 'write error',0      ; DATA XREF: sub_406410:loc_406459↓o
.text:004063F7 ; const char aSS[]
.text:004063F7 aSS             db '%s: %s',0           ; DATA XREF: sub_406410+77↓o
.text:004063FE ; const char aS_3[]
.text:004063FE aS_3            db '%s',0               ; DATA XREF: sub_406410+A0↓o
.text:00406401 ; ---------------------------------------------------------------------------
.text:00406401                 jmp     short sub_406410
.text:00406401 ; ---------------------------------------------------------------------------
.text:00406403                 align 10h
.text:00406410
.text:00406410 ; =============== S U B R O U T I N E =======================================
.text:00406410
.text:00406410
.text:00406410 ; void __cdecl sub_406410()
.text:00406410 sub_406410      proc near               ; CODE XREF: .text:00406401↑j
.text:00406410                                         ; DATA XREF: sub_401920+72↑o
.text:00406410
.text:00406410 Stream          = dword ptr -2Ch
.text:00406410 ErrorMessage    = dword ptr -28h
.text:00406410 var_24          = dword ptr -24h
.text:00406410 var_20          = byte ptr -20h
.text:00406410 var_1C          = dword ptr -1Ch
.text:00406410 var_9           = byte ptr -9
.text:00406410
.text:00406410                 push    esi
.text:00406411                 push    ebx
.text:00406412                 sub     esp, 24h
.text:00406415                 mov     edx, ds:_iob
.text:0040641B                 mov     ecx, [edx+2Ch]
.text:0040641E                 lea     esi, [edx+20h]
.text:00406421                 shr     ecx, 5
.text:00406424                 mov     bl, cl
.text:00406426                 mov     ecx, [edx+20h]
.text:00406429                 and     bl, 1
.text:0040642C                 cmp     ecx, [esi+8]
.text:0040642F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406432                 setz    [esp+2Ch+var_9]
.text:00406437                 call    fclose
.text:0040643C                 test    eax, eax
.text:0040643E                 setnz   al
.text:00406441                 test    bl, bl
.text:00406443                 jnz     loc_4064D3
.text:00406449                 test    al, al
.text:0040644B                 jz      short loc_4064A0
.text:0040644D
.text:0040644D loc_40644D:                             ; CODE XREF: sub_406410+CD↓j
.text:0040644D                 call    _errno
.text:00406452                 mov     esi, [eax]
.text:00406454
.text:00406454 loc_406454:                             ; CODE XREF: sub_406410+C7↓j
.text:00406454                 cmp     esi, 9
.text:00406457                 jz      short loc_4064C6
.text:00406459
.text:00406459 loc_406459:                             ; CODE XREF: sub_406410+B8↓j
.text:00406459                                         ; sub_406410+C1↓j
.text:00406459                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00406460                 call    ds:libintl_gettext
.text:00406466                 mov     ebx, eax
.text:00406468                 mov     eax, ds:dword_414080
.text:0040646D                 test    eax, eax
.text:0040646F                 jz      short loc_4064A6
.text:00406471                 mov     [esp+2Ch+Stream], eax ; char *
.text:00406474                 call    sub_408CC0
.text:00406479                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040647D                 mov     edx, Code
.text:00406483                 mov     [esp+2Ch+var_1C], ebx
.text:00406487                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:0040648F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00406493                 mov     [esp+2Ch+Stream], edx ; Code
.text:00406496                 call    sub_408F80
.text:0040649B                 nop
.text:0040649C                 lea     esi, [esi+0]
.text:004064A0
.text:004064A0 loc_4064A0:                             ; CODE XREF: sub_406410+3B↑j
.text:004064A0                                         ; sub_406410+B4↓j ...
.text:004064A0                 add     esp, 24h
.text:004064A3                 pop     ebx
.text:004064A4                 pop     esi
.text:004064A5                 retn
.text:004064A6 ; ---------------------------------------------------------------------------
.text:004064A6
.text:004064A6 loc_4064A6:                             ; CODE XREF: sub_406410+5F↑j
.text:004064A6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004064AA                 mov     ebx, Code
.text:004064B0                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:004064B8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004064BC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004064BF                 call    sub_408F80
.text:004064C4                 jmp     short loc_4064A0
.text:004064C6 ; ---------------------------------------------------------------------------
.text:004064C6
.text:004064C6 loc_4064C6:                             ; CODE XREF: sub_406410+47↑j
.text:004064C6                 test    bl, bl
.text:004064C8                 jnz     short loc_406459
.text:004064CA                 cmp     [esp+2Ch+var_9], 0
.text:004064CF                 jnz     short loc_4064A0
.text:004064D1                 jmp     short loc_406459
.text:004064D3 ; ---------------------------------------------------------------------------
.text:004064D3
.text:004064D3 loc_4064D3:                             ; CODE XREF: sub_406410+33↑j
.text:004064D3                 xor     esi, esi
.text:004064D5                 test    al, al
.text:004064D7                 jz      loc_406454
.text:004064DD                 jmp     loc_40644D
.text:004064DD sub_406410      endp
.text:004064DD
.text:004064DD ; ---------------------------------------------------------------------------
.text:004064E2                 align 10h
.text:004064F0
.text:004064F0 ; =============== S U B R O U T I N E =======================================
.text:004064F0
.text:004064F0
.text:004064F0 ; int __cdecl sub_4064F0(int, char *)
.text:004064F0 sub_4064F0      proc near               ; CODE XREF: sub_402390+408↑p
.text:004064F0                                         ; sub_402390+41E↑p
.text:004064F0
.text:004064F0 var_C           = dword ptr -0Ch
.text:004064F0 var_8           = dword ptr -8
.text:004064F0 var_4           = dword ptr -4
.text:004064F0 arg_0           = dword ptr  4
.text:004064F0 arg_4           = dword ptr  8
.text:004064F0
.text:004064F0                 sub     esp, 0Ch
.text:004064F3                 mov     edx, [esp+0Ch+arg_4]
.text:004064F7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004064FF                 mov     [esp+0Ch+var_4], edx ; char *
.text:00406503                 mov     edx, [esp+0Ch+arg_0]
.text:00406507                 mov     [esp+0Ch+var_C], edx ; int
.text:0040650A                 call    sub_408950
.text:0040650F                 add     esp, 0Ch
.text:00406512                 retn
.text:00406512 sub_4064F0      endp
.text:00406512
.text:00406512 ; ---------------------------------------------------------------------------
.text:00406513                 align 10h
.text:00406520
.text:00406520 ; =============== S U B R O U T I N E =======================================
.text:00406520
.text:00406520
.text:00406520 ; int __cdecl sub_406520(char *)
.text:00406520 sub_406520      proc near               ; CODE XREF: sub_401920+55E↑p
.text:00406520                                         ; sub_401920+5A1↑p ...
.text:00406520
.text:00406520 var_C           = dword ptr -0Ch
.text:00406520 var_8           = dword ptr -8
.text:00406520 var_4           = dword ptr -4
.text:00406520 arg_0           = dword ptr  4
.text:00406520
.text:00406520                 sub     esp, 0Ch
.text:00406523                 mov     edx, [esp+0Ch+arg_0]
.text:00406527                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040652F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00406536                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040653A                 call    sub_408950
.text:0040653F                 add     esp, 0Ch
.text:00406542                 retn
.text:00406542 sub_406520      endp
.text:00406542
.text:00406542 ; ---------------------------------------------------------------------------
.text:00406543                 align 10h
.text:00406550
.text:00406550 ; =============== S U B R O U T I N E =======================================
.text:00406550
.text:00406550
.text:00406550 sub_406550      proc near               ; CODE XREF: sub_402CD0+BA↑p
.text:00406550                                         ; sub_402DD0+186↑p ...
.text:00406550                 sub     esp, 0Ch
.text:00406553                 call    _errno
.text:00406558                 mov     dword ptr [eax], 28h ; '('
.text:0040655E                 mov     eax, 0FFFFFFFFh
.text:00406563                 add     esp, 0Ch
.text:00406566                 retn
.text:00406566 sub_406550      endp
.text:00406566
.text:00406566 ; ---------------------------------------------------------------------------
.text:00406567                 align 10h
.text:00406570
.text:00406570 ; =============== S U B R O U T I N E =======================================
.text:00406570
.text:00406570
.text:00406570 sub_406570      proc near               ; CODE XREF: sub_4029C0+1F6↑p
.text:00406570
.text:00406570 arg_0           = dword ptr  4
.text:00406570
.text:00406570                 mov     edx, [esp+arg_0]
.text:00406574                 mov     dword ptr [edx+10h], 0
.text:0040657B                 mov     dword ptr [edx+14h], 0
.text:00406582                 mov     dword ptr [edx+18h], 95F616h
.text:00406589                 retn
.text:00406589 sub_406570      endp
.text:00406589
.text:00406589 ; ---------------------------------------------------------------------------
.text:0040658A                 align 10h
.text:00406590 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/cycle-check.c',0
.text:00406590                                         ; DATA XREF: sub_4065E0+CE↓o
.text:004065BC aStateMagicCcMa db 'state->magic == CC_MAGIC',0
.text:004065BC                                         ; DATA XREF: sub_4065E0+D6↓o
.text:004065D5                 align 10h
.text:004065E0
.text:004065E0 ; =============== S U B R O U T I N E =======================================
.text:004065E0
.text:004065E0
.text:004065E0 sub_4065E0      proc near               ; CODE XREF: sub_404260+4A↑p
.text:004065E0
.text:004065E0 var_1C          = dword ptr -1Ch
.text:004065E0 var_18          = dword ptr -18h
.text:004065E0 var_14          = dword ptr -14h
.text:004065E0 arg_0           = dword ptr  4
.text:004065E0 arg_4           = dword ptr  8
.text:004065E0
.text:004065E0                 push    ebp
.text:004065E1                 push    edi
.text:004065E2                 push    esi
.text:004065E3                 push    ebx
.text:004065E4                 sub     esp, 0Ch
.text:004065E7                 mov     edx, [esp+1Ch+arg_0]
.text:004065EB                 cmp     dword ptr [edx+18h], 95F616h
.text:004065F2                 jnz     loc_4066A6
.text:004065F8                 mov     edx, [esp+1Ch+arg_0]
.text:004065FC                 mov     ebp, [edx+14h]
.text:004065FF                 mov     edi, [edx+10h]
.text:00406602                 mov     eax, ebp
.text:00406604                 or      eax, edi
.text:00406606                 jz      short loc_406650
.text:00406608                 mov     esi, [esp+1Ch+arg_4]
.text:0040660C                 mov     ecx, [esi+8]
.text:0040660F                 mov     ebx, [esi+0Ch]
.text:00406612                 mov     esi, [esp+1Ch+arg_0]
.text:00406616                 mov     eax, [esi]
.text:00406618                 mov     edx, [esi+4]
.text:0040661B                 mov     esi, ebx
.text:0040661D                 xor     eax, ecx
.text:0040661F                 xor     esi, edx
.text:00406621                 or      esi, eax
.text:00406623                 jnz     short loc_406650
.text:00406625                 mov     edx, [esp+1Ch+arg_4]
.text:00406629                 mov     esi, [esp+1Ch+arg_0]
.text:0040662D                 mov     ebx, [edx+14h]
.text:00406630                 mov     ecx, [edx+10h]
.text:00406633                 mov     eax, [esi+8]
.text:00406636                 mov     edx, [esi+0Ch]
.text:00406639                 mov     esi, ebx
.text:0040663B                 xor     eax, ecx
.text:0040663D                 xor     esi, edx
.text:0040663F                 or      esi, eax
.text:00406641                 mov     edx, 1
.text:00406646                 jz      short loc_40669C
.text:00406648                 nop
.text:00406649                 lea     esi, [esi+0]
.text:00406650
.text:00406650 loc_406650:                             ; CODE XREF: sub_4065E0+26↑j
.text:00406650                                         ; sub_4065E0+43↑j
.text:00406650                 mov     ecx, edi
.text:00406652                 mov     ebx, ebp
.text:00406654                 mov     edx, [esp+1Ch+arg_0]
.text:00406658                 add     ecx, 1
.text:0040665B                 mov     esi, ecx
.text:0040665D                 adc     ebx, 0
.text:00406660                 and     esi, edi
.text:00406662                 mov     edi, ebx
.text:00406664                 mov     [edx+10h], ecx
.text:00406667                 and     edi, ebp
.text:00406669                 or      esi, edi
.text:0040666B                 mov     [edx+14h], ebx
.text:0040666E                 jnz     short loc_40669A
.text:00406670                 mov     ebp, ebx
.text:00406672                 mov     edx, 1
.text:00406677                 or      ebp, ecx
.text:00406679                 jz      short loc_40669C
.text:0040667B                 mov     ebp, [esp+1Ch+arg_4]
.text:0040667F                 mov     ebx, [esp+1Ch+arg_0]
.text:00406683                 mov     edx, [ebp+10h]
.text:00406686                 mov     ecx, [ebp+14h]
.text:00406689                 mov     [ebx+8], edx
.text:0040668C                 mov     [ebx+0Ch], ecx
.text:0040668F                 mov     esi, [ebp+8]
.text:00406692                 mov     edi, [ebp+0Ch]
.text:00406695                 mov     [ebx], esi
.text:00406697                 mov     [ebx+4], edi
.text:0040669A
.text:0040669A loc_40669A:                             ; CODE XREF: sub_4065E0+8E↑j
.text:0040669A                 xor     edx, edx
.text:0040669C
.text:0040669C loc_40669C:                             ; CODE XREF: sub_4065E0+66↑j
.text:0040669C                                         ; sub_4065E0+99↑j
.text:0040669C                 add     esp, 0Ch
.text:0040669F                 mov     eax, edx
.text:004066A1                 pop     ebx
.text:004066A2                 pop     esi
.text:004066A3                 pop     edi
.text:004066A4                 pop     ebp
.text:004066A5                 retn
.text:004066A6 ; ---------------------------------------------------------------------------
.text:004066A6
.text:004066A6 loc_4066A6:                             ; CODE XREF: sub_4065E0+12↑j
.text:004066A6                 mov     [esp+1Ch+var_14], 45h ; 'E'
.text:004066AE                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/cycle-che"...
.text:004066B6                 mov     [esp+1Ch+var_1C], offset aStateMagicCcMa ; "state->magic == CC_MAGIC"
.text:004066BD                 call    _assert
.text:004066BD sub_4065E0      endp
.text:004066BD
.text:004066BD ; ---------------------------------------------------------------------------
.text:004066C2                 align 10h
.text:004066D0 dword_4066D0    dd 0                    ; DATA XREF: sub_406700+D2↓o
.text:004066D0                                         ; sub_406700:loc_406930↓o ...
.text:004066D4 dword_4066D4    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:004066D4                                         ; DATA XREF: .text:004072EC↓r
.text:004066D4                                         ; .text:004072F5↓r ...
.text:004066E4 flt_4066E4      dd 0.1                  ; DATA XREF: sub_406700:loc_40674F↓r
.text:004066E8 flt_4066E8      dd 4.2949673e9          ; DATA XREF: sub_406700+101↓r
.text:004066EC flt_4066EC      dd 0.89999998           ; DATA XREF: sub_406700+66↓r
.text:004066F0 flt_4066F0      dd 1.1                  ; DATA XREF: sub_406700+7A↓r
.text:004066F4                 align 10h
.text:00406700
.text:00406700 ; =============== S U B R O U T I N E =======================================
.text:00406700
.text:00406700
.text:00406700 sub_406700      proc near               ; CODE XREF: sub_4029C0+143↑p
.text:00406700                                         ; sub_406AD0+2E↓p
.text:00406700
.text:00406700 var_44          = qword ptr -44h
.text:00406700 Size            = dword ptr -3Ch
.text:00406700 var_38          = dword ptr -38h
.text:00406700 var_28          = dword ptr -28h
.text:00406700 var_24          = qword ptr -24h
.text:00406700 var_18          = word ptr -18h
.text:00406700 var_16          = word ptr -16h
.text:00406700 var_10          = dword ptr -10h
.text:00406700 var_C           = dword ptr -0Ch
.text:00406700 var_8           = dword ptr -8
.text:00406700 var_4           = dword ptr -4
.text:00406700 arg_0           = dword ptr  4
.text:00406700 arg_4           = dword ptr  8
.text:00406700 arg_8           = dword ptr  0Ch
.text:00406700 arg_C           = dword ptr  10h
.text:00406700 arg_10          = dword ptr  14h
.text:00406700
.text:00406700                 sub     esp, 3Ch
.text:00406703                 mov     [esp+3Ch+var_4], ebp
.text:00406707                 mov     ebp, [esp+3Ch+arg_8]
.text:0040670B                 mov     [esp+3Ch+var_10], ebx
.text:0040670F                 mov     ebx, [esp+3Ch+arg_4]
.text:00406713                 test    ebp, ebp
.text:00406715                 mov     [esp+3Ch+var_C], esi
.text:00406719                 mov     [esp+3Ch+var_8], edi
.text:0040671D                 jz      loc_4067E1
.text:00406723                 mov     edx, [esp+3Ch+arg_C]
.text:00406727                 test    edx, edx
.text:00406729                 jz      loc_4067E1
.text:0040672F                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:00406736                 call    malloc
.text:0040673B                 mov     esi, eax
.text:0040673D                 xor     eax, eax
.text:0040673F                 test    esi, esi
.text:00406741                 jz      loc_4067E3
.text:00406747                 test    ebx, ebx
.text:00406749                 jz      loc_406930
.text:0040674F
.text:0040674F loc_40674F:                             ; CODE XREF: sub_406700+235↓j
.text:0040674F                 fld     ds:flt_4066E4
.text:00406755                 fld     dword ptr [ebx+8]
.text:00406758                 mov     [esi+14h], ebx
.text:0040675B                 fucom   st(1)
.text:0040675D                 fnstsw  ax
.text:0040675F                 sahf
.text:00406760                 jbe     loc_406920
.text:00406766                 fld     ds:flt_4066EC
.text:0040676C                 fucomp  st(1)
.text:0040676E                 fnstsw  ax
.text:00406770                 sahf
.text:00406771                 jbe     loc_406920
.text:00406777                 fld     dword ptr [ebx+0Ch]
.text:0040677A                 fld     ds:flt_4066F0
.text:00406780                 fxch    st(1)
.text:00406782                 fucompp
.text:00406784                 fnstsw  ax
.text:00406786                 sahf
.text:00406787                 jbe     loc_406920
.text:0040678D                 fld     dword ptr [ebx]
.text:0040678F                 fldz
.text:00406791                 fxch    st(1)
.text:00406793                 fucom   st(1)
.text:00406795                 fnstsw  ax
.text:00406797                 fstp    st(1)
.text:00406799                 sahf
.text:0040679A                 jb      loc_406927
.text:004067A0                 faddp   st(2), st
.text:004067A2                 fld     dword ptr [ebx+4]
.text:004067A5                 fucom   st(2)
.text:004067A7                 fnstsw  ax
.text:004067A9                 sahf
.text:004067AA                 jbe     loc_406927
.text:004067B0                 fld1
.text:004067B2                 fucompp
.text:004067B4                 fnstsw  ax
.text:004067B6                 sahf
.text:004067B7                 jb      loc_406920
.text:004067BD                 fucom   st(1)
.text:004067BF                 fnstsw  ax
.text:004067C1                 fstp    st(1)
.text:004067C3                 sahf
.text:004067C4                 ja      short loc_4067F7
.text:004067C6                 lea     esi, [esi+0]
.text:004067C9                 lea     edi, [edi+0]
.text:004067D0
.text:004067D0 loc_4067D0:                             ; CODE XREF: sub_406700+222↓j
.text:004067D0                 fstp    st
.text:004067D2                 mov     dword ptr [esi+14h], offset dword_4066D0
.text:004067D9
.text:004067D9 loc_4067D9:                             ; CODE XREF: sub_406700+155↓j
.text:004067D9                                         ; sub_406700+1BF↓j ...
.text:004067D9                 mov     [esp+3Ch+Size], esi ; Block
.text:004067DC                 call    free
.text:004067E1
.text:004067E1 loc_4067E1:                             ; CODE XREF: sub_406700+1D↑j
.text:004067E1                                         ; sub_406700+29↑j
.text:004067E1                 xor     eax, eax
.text:004067E3
.text:004067E3 loc_4067E3:                             ; CODE XREF: sub_406700+41↑j
.text:004067E3                                         ; sub_406700+208↓j
.text:004067E3                 mov     ebx, [esp+3Ch+var_10]
.text:004067E7                 mov     esi, [esp+3Ch+var_C]
.text:004067EB                 mov     edi, [esp+3Ch+var_8]
.text:004067EF                 mov     ebp, [esp+3Ch+var_4]
.text:004067F3                 add     esp, 3Ch
.text:004067F6                 retn
.text:004067F7 ; ---------------------------------------------------------------------------
.text:004067F7
.text:004067F7 loc_4067F7:                             ; CODE XREF: sub_406700+C4↑j
.text:004067F7                 cmp     byte ptr [ebx+10h], 0
.text:004067FB                 jnz     loc_406914
.text:00406801                 fld     ds:flt_4066E8
.text:00406807                 xor     eax, eax
.text:00406809                 mov     ecx, [esp+3Ch+arg_0]
.text:0040680D                 push    eax
.text:0040680E                 push    ecx
.text:0040680F                 fild    [esp+44h+var_44]
.text:00406812                 add     esp, 8
.text:00406815                 fdivrp  st(2), st
.text:00406817                 fxch    st(1)
.text:00406819                 fucom   st(1)
.text:0040681B                 fnstsw  ax
.text:0040681D                 fstp    st(1)
.text:0040681F                 sahf
.text:00406820                 jnb     loc_40690D
.text:00406826                 fnstcw  [esp+3Ch+var_16]
.text:0040682A                 movzx   ebx, [esp+3Ch+var_16]
.text:0040682F                 or      bx, 0C00h
.text:00406834                 mov     [esp+3Ch+var_18], bx
.text:00406839                 fldcw   [esp+3Ch+var_18]
.text:0040683D                 fistp   [esp+3Ch+var_24]
.text:00406841                 fldcw   [esp+3Ch+var_16]
.text:00406845                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:00406849                 mov     [esp+3Ch+arg_0], edx
.text:0040684D
.text:0040684D loc_40684D:                             ; CODE XREF: sub_406700+216↓j
.text:0040684D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:00406855                 ja      short loc_4067D9
.text:00406857                 mov     ecx, [esp+3Ch+arg_0]
.text:0040685B                 cmp     ecx, 9
.text:0040685E                 ja      short loc_406865
.text:00406860                 mov     ecx, 0Ah
.text:00406865
.text:00406865 loc_406865:                             ; CODE XREF: sub_406700+15E↑j
.text:00406865                 or      ecx, 1
.text:00406868
.text:00406868 loc_406868:                             ; CODE XREF: sub_406700+1B4↓j
.text:00406868                 mov     [esp+3Ch+var_28], 3
.text:00406870                 mov     edi, 9
.text:00406875                 cmp     edi, ecx
.text:00406877                 jnb     short loc_4068A5
.text:00406879                 xor     edx, edx
.text:0040687B                 mov     eax, ecx
.text:0040687D                 div     [esp+3Ch+var_28]
.text:00406881                 test    edx, edx
.text:00406883                 jz      short loc_4068A5
.text:00406885
.text:00406885 loc_406885:                             ; CODE XREF: sub_406700+1A3↓j
.text:00406885                 inc     [esp+3Ch+var_28]
.text:00406889                 mov     edx, [esp+3Ch+var_28]
.text:0040688D                 lea     edi, [edi+edx*4]
.text:00406890                 inc     edx
.text:00406891                 cmp     edi, ecx
.text:00406893                 mov     [esp+3Ch+var_28], edx
.text:00406897                 jnb     short loc_4068A5
.text:00406899                 xor     edx, edx
.text:0040689B                 mov     eax, ecx
.text:0040689D                 div     [esp+3Ch+var_28]
.text:004068A1                 test    edx, edx
.text:004068A3                 jnz     short loc_406885
.text:004068A5
.text:004068A5 loc_4068A5:                             ; CODE XREF: sub_406700+177↑j
.text:004068A5                                         ; sub_406700+183↑j ...
.text:004068A5                 xor     edx, edx
.text:004068A7                 mov     eax, ecx
.text:004068A9                 div     [esp+3Ch+var_28]
.text:004068AD                 test    edx, edx
.text:004068AF                 jnz     short loc_4068B6
.text:004068B1                 add     ecx, 2
.text:004068B4                 jmp     short loc_406868
.text:004068B6 ; ---------------------------------------------------------------------------
.text:004068B6
.text:004068B6 loc_4068B6:                             ; CODE XREF: sub_406700+1AF↑j
.text:004068B6                 mov     [esi+8], ecx
.text:004068B9                 cmp     ecx, 1FFFFFFFh
.text:004068BF                 ja      loc_4067D9
.text:004068C5                 mov     [esp+3Ch+Size], ecx ; Count
.text:004068C8                 mov     [esp+3Ch+var_38], 8 ; Size
.text:004068D0                 call    calloc
.text:004068D5                 mov     [esi+18h], ebp
.text:004068D8                 mov     ebx, [esi+8]
.text:004068DB                 mov     ebp, [esp+3Ch+arg_C]
.text:004068DF                 mov     [esi], eax
.text:004068E1                 mov     edi, [esp+3Ch+arg_10]
.text:004068E5                 lea     ecx, [eax+ebx*8]
.text:004068E8                 mov     [esi+4], ecx
.text:004068EB                 mov     eax, esi
.text:004068ED                 mov     dword ptr [esi+0Ch], 0
.text:004068F4                 mov     dword ptr [esi+10h], 0
.text:004068FB                 mov     [esi+1Ch], ebp
.text:004068FE                 mov     [esi+20h], edi
.text:00406901                 mov     dword ptr [esi+24h], 0
.text:00406908                 jmp     loc_4067E3
.text:0040690D ; ---------------------------------------------------------------------------
.text:0040690D
.text:0040690D loc_40690D:                             ; CODE XREF: sub_406700+120↑j
.text:0040690D                 fstp    st
.text:0040690F                 jmp     loc_4067D9
.text:00406914 ; ---------------------------------------------------------------------------
.text:00406914
.text:00406914 loc_406914:                             ; CODE XREF: sub_406700+FB↑j
.text:00406914                 fstp    st
.text:00406916                 jmp     loc_40684D
.text:00406916 ; ---------------------------------------------------------------------------
.text:0040691B                 align 10h
.text:00406920
.text:00406920 loc_406920:                             ; CODE XREF: sub_406700+60↑j
.text:00406920                                         ; sub_406700+71↑j ...
.text:00406920                 fstp    st
.text:00406922                 jmp     loc_4067D0
.text:00406927 ; ---------------------------------------------------------------------------
.text:00406927
.text:00406927 loc_406927:                             ; CODE XREF: sub_406700+9A↑j
.text:00406927                                         ; sub_406700+AA↑j
.text:00406927                 fstp    st
.text:00406929                 jmp     short loc_406920
.text:00406929 ; ---------------------------------------------------------------------------
.text:0040692B                 align 10h
.text:00406930
.text:00406930 loc_406930:                             ; CODE XREF: sub_406700+49↑j
.text:00406930                 mov     ebx, offset dword_4066D0
.text:00406935                 jmp     loc_40674F
.text:00406935 sub_406700      endp
.text:00406935
.text:00406935 ; ---------------------------------------------------------------------------
.text:0040693A                 align 10h
.text:00406940                 push    edi
.text:00406941                 push    esi
.text:00406942                 push    ebx
.text:00406943                 sub     esp, 10h
.text:00406946                 mov     edi, [esp+20h]
.text:0040694A                 mov     esi, [edi]
.text:0040694C                 mov     eax, [edi+4]
.text:0040694F                 cmp     esi, eax
.text:00406951                 jnb     short loc_4069A7
.text:00406953                 lea     esi, [esi+0]
.text:00406959                 lea     edi, [edi+0]
.text:00406960
.text:00406960 loc_406960:                             ; CODE XREF: .text:004069A5↓j
.text:00406960                 mov     ecx, [esi]
.text:00406962                 test    ecx, ecx
.text:00406964                 jz      short loc_4069A0
.text:00406966                 mov     ebx, [esi+4]
.text:00406969                 test    ebx, ebx
.text:0040696B                 jz      short loc_4069D1
.text:0040696D                 mov     ecx, [edi+20h]
.text:00406970
.text:00406970 loc_406970:                             ; CODE XREF: .text:0040698A↓j
.text:00406970                 test    ecx, ecx
.text:00406972                 jnz     short loc_4069C5
.text:00406974
.text:00406974 loc_406974:                             ; CODE XREF: .text:004069CF↓j
.text:00406974                 mov     dword ptr [ebx], 0
.text:0040697A                 mov     edx, [ebx+4]
.text:0040697D                 mov     eax, [edi+24h]
.text:00406980                 test    edx, edx
.text:00406982                 mov     [ebx+4], eax
.text:00406985                 mov     [edi+24h], ebx
.text:00406988                 mov     ebx, edx
.text:0040698A                 jnz     short loc_406970
.text:0040698C
.text:0040698C loc_40698C:                             ; CODE XREF: .text:004069D4↓j
.text:0040698C                 test    ecx, ecx
.text:0040698E                 jnz     short loc_4069BC
.text:00406990
.text:00406990 loc_406990:                             ; CODE XREF: .text:004069C3↓j
.text:00406990                 mov     dword ptr [esi+4], 0
.text:00406997                 mov     eax, [edi+4]
.text:0040699A                 mov     dword ptr [esi], 0
.text:004069A0
.text:004069A0 loc_4069A0:                             ; CODE XREF: .text:00406964↑j
.text:004069A0                 add     esi, 8
.text:004069A3                 cmp     esi, eax
.text:004069A5                 jb      short loc_406960
.text:004069A7
.text:004069A7 loc_4069A7:                             ; CODE XREF: .text:00406951↑j
.text:004069A7                 mov     dword ptr [edi+0Ch], 0
.text:004069AE                 mov     dword ptr [edi+10h], 0
.text:004069B5                 add     esp, 10h
.text:004069B8                 pop     ebx
.text:004069B9                 pop     esi
.text:004069BA                 pop     edi
.text:004069BB                 retn
.text:004069BC ; ---------------------------------------------------------------------------
.text:004069BC
.text:004069BC loc_4069BC:                             ; CODE XREF: .text:0040698E↑j
.text:004069BC                 mov     ebx, [esi]
.text:004069BE                 mov     [esp], ebx
.text:004069C1                 call    ecx
.text:004069C3                 jmp     short loc_406990
.text:004069C5 ; ---------------------------------------------------------------------------
.text:004069C5
.text:004069C5 loc_4069C5:                             ; CODE XREF: .text:00406972↑j
.text:004069C5                 mov     edx, [ebx]
.text:004069C7                 mov     [esp], edx
.text:004069CA                 call    ecx
.text:004069CC                 mov     ecx, [edi+20h]
.text:004069CF                 jmp     short loc_406974
.text:004069D1 ; ---------------------------------------------------------------------------
.text:004069D1
.text:004069D1 loc_4069D1:                             ; CODE XREF: .text:0040696B↑j
.text:004069D1                 mov     ecx, [edi+20h]
.text:004069D4                 jmp     short loc_40698C
.text:004069D4 ; ---------------------------------------------------------------------------
.text:004069D6                 align 10h
.text:004069E0
.text:004069E0 ; =============== S U B R O U T I N E =======================================
.text:004069E0
.text:004069E0
.text:004069E0 ; int __cdecl sub_4069E0(void *)
.text:004069E0 sub_4069E0      proc near               ; CODE XREF: sub_402CD0+AD↑p
.text:004069E0                                         ; sub_404260+D3↑p
.text:004069E0
.text:004069E0 Block           = dword ptr -1Ch
.text:004069E0 arg_0           = dword ptr  4
.text:004069E0
.text:004069E0                 push    ebp
.text:004069E1                 push    edi
.text:004069E2                 push    esi
.text:004069E3                 push    ebx
.text:004069E4                 sub     esp, 0Ch
.text:004069E7                 mov     ebp, [esp+1Ch+arg_0]
.text:004069EB                 mov     eax, [ebp+20h]
.text:004069EE                 test    eax, eax
.text:004069F0                 jz      loc_406ABC
.text:004069F6                 mov     eax, [ebp+10h]
.text:004069F9                 test    eax, eax
.text:004069FB                 jz      loc_406ABC
.text:00406A01                 mov     edi, [ebp+0]
.text:00406A04                 mov     eax, [ebp+4]
.text:00406A07                 cmp     edi, eax
.text:00406A09                 jnb     short loc_406A7B
.text:00406A0B
.text:00406A0B loc_406A0B:                             ; CODE XREF: sub_4069E0+57↓j
.text:00406A0B                 mov     edx, [edi]
.text:00406A0D                 test    edx, edx
.text:00406A0F                 jz      short loc_406A32
.text:00406A11                 test    edi, edi
.text:00406A13                 mov     ebx, edi
.text:00406A15                 jz      short loc_406A32
.text:00406A17                 mov     esi, esi
.text:00406A19                 lea     edi, [edi+0]
.text:00406A20
.text:00406A20 loc_406A20:                             ; CODE XREF: sub_4069E0+4D↓j
.text:00406A20                 mov     ecx, [ebx]
.text:00406A22                 mov     [esp+1Ch+Block], ecx
.text:00406A25                 call    dword ptr [ebp+20h]
.text:00406A28                 mov     ebx, [ebx+4]
.text:00406A2B                 test    ebx, ebx
.text:00406A2D                 jnz     short loc_406A20
.text:00406A2F                 mov     eax, [ebp+4]
.text:00406A32
.text:00406A32 loc_406A32:                             ; CODE XREF: sub_4069E0+2F↑j
.text:00406A32                                         ; sub_4069E0+35↑j
.text:00406A32                 add     edi, 8
.text:00406A35                 cmp     edi, eax
.text:00406A37                 jb      short loc_406A0B
.text:00406A39                 mov     edx, [ebp+0]
.text:00406A3C
.text:00406A3C loc_406A3C:                             ; CODE XREF: sub_4069E0+E2↓j
.text:00406A3C                 cmp     edx, eax
.text:00406A3E                 mov     edi, edx
.text:00406A40                 jnb     short loc_406A7B
.text:00406A42                 lea     esi, [esi+0]
.text:00406A49                 lea     edi, [edi+0]
.text:00406A50
.text:00406A50 loc_406A50:                             ; CODE XREF: sub_4069E0+99↓j
.text:00406A50                 mov     ebx, [edi+4]
.text:00406A53                 test    ebx, ebx
.text:00406A55                 jz      short loc_406A74
.text:00406A57                 mov     esi, esi
.text:00406A59                 lea     edi, [edi+0]
.text:00406A60
.text:00406A60 loc_406A60:                             ; CODE XREF: sub_4069E0+8F↓j
.text:00406A60                 mov     esi, [ebx+4]
.text:00406A63                 mov     [esp+1Ch+Block], ebx ; Block
.text:00406A66                 call    free
.text:00406A6B                 test    esi, esi
.text:00406A6D                 mov     ebx, esi
.text:00406A6F                 jnz     short loc_406A60
.text:00406A71                 mov     eax, [ebp+4]
.text:00406A74
.text:00406A74 loc_406A74:                             ; CODE XREF: sub_4069E0+75↑j
.text:00406A74                 add     edi, 8
.text:00406A77                 cmp     edi, eax
.text:00406A79                 jb      short loc_406A50
.text:00406A7B
.text:00406A7B loc_406A7B:                             ; CODE XREF: sub_4069E0+29↑j
.text:00406A7B                                         ; sub_4069E0+60↑j
.text:00406A7B                 mov     ebx, [ebp+24h]
.text:00406A7E                 test    ebx, ebx
.text:00406A80                 jz      short loc_406AA1
.text:00406A82                 lea     esi, [esi+0]
.text:00406A89                 lea     edi, [edi+0]
.text:00406A90
.text:00406A90 loc_406A90:                             ; CODE XREF: sub_4069E0+BF↓j
.text:00406A90                 mov     edi, [ebx+4]
.text:00406A93                 mov     [esp+1Ch+Block], ebx ; Block
.text:00406A96                 call    free
.text:00406A9B                 test    edi, edi
.text:00406A9D                 mov     ebx, edi
.text:00406A9F                 jnz     short loc_406A90
.text:00406AA1
.text:00406AA1 loc_406AA1:                             ; CODE XREF: sub_4069E0+A0↑j
.text:00406AA1                 mov     ebx, [ebp+0]
.text:00406AA4                 mov     [esp+1Ch+Block], ebx ; Block
.text:00406AA7                 call    free
.text:00406AAC                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:00406AB0                 add     esp, 0Ch
.text:00406AB3                 pop     ebx
.text:00406AB4                 pop     esi
.text:00406AB5                 pop     edi
.text:00406AB6                 pop     ebp
.text:00406AB7                 jmp     free
.text:00406ABC ; ---------------------------------------------------------------------------
.text:00406ABC
.text:00406ABC loc_406ABC:                             ; CODE XREF: sub_4069E0+10↑j
.text:00406ABC                                         ; sub_4069E0+1B↑j
.text:00406ABC                 mov     edx, [ebp+0]
.text:00406ABF                 mov     eax, [ebp+4]
.text:00406AC2                 jmp     loc_406A3C
.text:00406AC2 sub_4069E0      endp
.text:00406AC2
.text:00406AC2 ; ---------------------------------------------------------------------------
.text:00406AC7                 align 10h
.text:00406AD0
.text:00406AD0 ; =============== S U B R O U T I N E =======================================
.text:00406AD0
.text:00406AD0
.text:00406AD0 sub_406AD0      proc near               ; CODE XREF: sub_406C50+1B2↓p
.text:00406AD0                                         ; sub_407320+156↓p
.text:00406AD0
.text:00406AD0 Block           = dword ptr -2Ch
.text:00406AD0 var_28          = dword ptr -28h
.text:00406AD0 var_24          = dword ptr -24h
.text:00406AD0 var_20          = dword ptr -20h
.text:00406AD0 var_1C          = dword ptr -1Ch
.text:00406AD0 var_18          = dword ptr -18h
.text:00406AD0 var_14          = dword ptr -14h
.text:00406AD0 arg_0           = dword ptr  4
.text:00406AD0 arg_4           = dword ptr  8
.text:00406AD0
.text:00406AD0                 push    ebp
.text:00406AD1                 push    edi
.text:00406AD2                 push    esi
.text:00406AD3                 push    ebx
.text:00406AD4                 sub     esp, 1Ch
.text:00406AD7                 mov     ebx, [esp+2Ch+arg_0]
.text:00406ADB                 mov     edi, [ebx+20h]
.text:00406ADE                 mov     [esp+2Ch+var_1C], edi
.text:00406AE2                 mov     esi, [ebx+1Ch]
.text:00406AE5                 mov     [esp+2Ch+var_20], esi
.text:00406AE9                 mov     edx, [ebx+18h]
.text:00406AEC                 mov     [esp+2Ch+var_24], edx
.text:00406AF0                 mov     ecx, [ebx+14h]
.text:00406AF3                 mov     edx, [esp+2Ch+arg_4]
.text:00406AF7                 mov     [esp+2Ch+var_28], ecx
.text:00406AFB                 mov     [esp+2Ch+Block], edx
.text:00406AFE                 call    sub_406700
.text:00406B03                 mov     edi, eax
.text:00406B05                 xor     eax, eax
.text:00406B07                 test    edi, edi
.text:00406B09                 jz      loc_406BD2
.text:00406B0F                 mov     ebp, [esp+2Ch+arg_0]
.text:00406B13                 mov     edx, [ebp+0]
.text:00406B16                 mov     eax, [ebp+4]
.text:00406B19                 mov     ecx, [ebp+24h]
.text:00406B1C                 mov     [esp+2Ch+var_14], edx
.text:00406B20                 cmp     edx, eax
.text:00406B22                 mov     [edi+24h], ecx
.text:00406B25                 jnb     short loc_406B9D
.text:00406B27                 mov     esi, esi
.text:00406B29                 lea     edi, [edi+0]
.text:00406B30
.text:00406B30 loc_406B30:                             ; CODE XREF: sub_406AD0+C5↓j
.text:00406B30                 mov     edx, [esp+2Ch+var_14]
.text:00406B34                 mov     ebx, [edx]
.text:00406B36                 test    ebx, ebx
.text:00406B38                 jz      short loc_406B8C
.text:00406B3A                 mov     ebx, edx
.text:00406B3C                 lea     esi, [esi+0]
.text:00406B40
.text:00406B40 loc_406B40:                             ; CODE XREF: sub_406AD0+B3↓j
.text:00406B40                 mov     ebp, [ebx]
.text:00406B42                 mov     edx, [edi+8]
.text:00406B45                 mov     [esp+2Ch+Block], ebp
.text:00406B48                 mov     [esp+2Ch+var_28], edx
.text:00406B4C                 call    dword ptr [edi+18h]
.text:00406B4F                 mov     ecx, [edi]
.text:00406B51                 lea     esi, [ecx+eax*8]
.text:00406B54                 cmp     esi, [edi+4]
.text:00406B57                 jnb     loc_406C33
.text:00406B5D                 mov     ecx, [esi]
.text:00406B5F                 mov     eax, [ebx+4]
.text:00406B62                 test    ecx, ecx
.text:00406B64                 mov     [esp+2Ch+var_18], eax
.text:00406B68                 jz      loc_406C10
.text:00406B6E                 cmp     ebx, [esp+2Ch+var_14]
.text:00406B72                 jz      short loc_406BDA
.text:00406B74                 mov     edx, [esi+4]
.text:00406B77                 mov     [ebx+4], edx
.text:00406B7A                 mov     [esi+4], ebx
.text:00406B7D
.text:00406B7D loc_406B7D:                             ; CODE XREF: sub_406AD0+12A↓j
.text:00406B7D                                         ; sub_406AD0+149↓j ...
.text:00406B7D                 mov     ebx, [esp+2Ch+var_18]
.text:00406B81                 test    ebx, ebx
.text:00406B83                 jnz     short loc_406B40
.text:00406B85                 mov     ecx, [esp+2Ch+arg_0]
.text:00406B89                 mov     eax, [ecx+4]
.text:00406B8C
.text:00406B8C loc_406B8C:                             ; CODE XREF: sub_406AD0+68↑j
.text:00406B8C                 add     [esp+2Ch+var_14], 8
.text:00406B91                 cmp     [esp+2Ch+var_14], eax
.text:00406B95                 jb      short loc_406B30
.text:00406B97                 mov     eax, [esp+2Ch+arg_0]
.text:00406B9B                 mov     edx, [eax]
.text:00406B9D
.text:00406B9D loc_406B9D:                             ; CODE XREF: sub_406AD0+55↑j
.text:00406B9D                 mov     [esp+2Ch+Block], edx ; Block
.text:00406BA0                 call    free
.text:00406BA5                 mov     ebx, [esp+2Ch+arg_0]
.text:00406BA9                 mov     ebp, [edi]
.text:00406BAB                 mov     ecx, [edi+4]
.text:00406BAE                 mov     esi, [edi+8]
.text:00406BB1                 mov     edx, [edi+0Ch]
.text:00406BB4                 mov     [ebx], ebp
.text:00406BB6                 mov     ebp, [edi+24h]
.text:00406BB9                 mov     [ebx+4], ecx
.text:00406BBC                 mov     [ebx+8], esi
.text:00406BBF                 mov     [ebx+0Ch], edx
.text:00406BC2                 mov     [ebx+24h], ebp
.text:00406BC5                 mov     [esp+2Ch+Block], edi ; Block
.text:00406BC8                 call    free
.text:00406BCD                 mov     eax, 1
.text:00406BD2
.text:00406BD2 loc_406BD2:                             ; CODE XREF: sub_406AD0+39↑j
.text:00406BD2                                         ; sub_406AD0+11D↓j
.text:00406BD2                 add     esp, 1Ch
.text:00406BD5                 pop     ebx
.text:00406BD6                 pop     esi
.text:00406BD7                 pop     edi
.text:00406BD8                 pop     ebp
.text:00406BD9                 retn
.text:00406BDA ; ---------------------------------------------------------------------------
.text:00406BDA
.text:00406BDA loc_406BDA:                             ; CODE XREF: sub_406AD0+A2↑j
.text:00406BDA                 mov     eax, [edi+24h]
.text:00406BDD                 test    eax, eax
.text:00406BDF                 jz      short loc_406BFC
.text:00406BE1                 mov     ebx, [eax+4]
.text:00406BE4                 mov     edx, eax
.text:00406BE6                 mov     [edi+24h], ebx
.text:00406BE9
.text:00406BE9 loc_406BE9:                             ; CODE XREF: sub_406AD0+13A↓j
.text:00406BE9                 xor     eax, eax
.text:00406BEB                 test    edx, edx
.text:00406BED                 jz      short loc_406BD2
.text:00406BEF                 mov     [edx], ebp
.text:00406BF1                 mov     ebp, [esi+4]
.text:00406BF4                 mov     [edx+4], ebp
.text:00406BF7                 mov     [esi+4], edx
.text:00406BFA                 jmp     short loc_406B7D
.text:00406BFC ; ---------------------------------------------------------------------------
.text:00406BFC
.text:00406BFC loc_406BFC:                             ; CODE XREF: sub_406AD0+10F↑j
.text:00406BFC                 mov     [esp+2Ch+Block], 8 ; Size
.text:00406C03                 call    malloc
.text:00406C08                 mov     edx, eax
.text:00406C0A                 jmp     short loc_406BE9
.text:00406C0A ; ---------------------------------------------------------------------------
.text:00406C0C                 align 10h
.text:00406C10
.text:00406C10 loc_406C10:                             ; CODE XREF: sub_406AD0+98↑j
.text:00406C10                 inc     dword ptr [edi+0Ch]
.text:00406C13                 cmp     ebx, [esp+2Ch+var_14]
.text:00406C17                 mov     [esi], ebp
.text:00406C19                 jz      loc_406B7D
.text:00406C1F                 mov     dword ptr [ebx], 0
.text:00406C25                 mov     esi, [edi+24h]
.text:00406C28                 mov     [ebx+4], esi
.text:00406C2B                 mov     [edi+24h], ebx
.text:00406C2E                 jmp     loc_406B7D
.text:00406C33 ; ---------------------------------------------------------------------------
.text:00406C33
.text:00406C33 loc_406C33:                             ; CODE XREF: sub_406AD0+87↑j
.text:00406C33                 call    abort
.text:00406C33 sub_406AD0      endp
.text:00406C33
.text:00406C33 ; ---------------------------------------------------------------------------
.text:00406C38 flt_406C38      dd 0.1                  ; DATA XREF: sub_406C50+C3↓r
.text:00406C3C flt_406C3C      dd 4.2949673e9          ; DATA XREF: sub_406C50:loc_406DC7↓r
.text:00406C40 flt_406C40      dd 0.89999998           ; DATA XREF: sub_406C50+D6↓r
.text:00406C44 flt_406C44      dd 1.1                  ; DATA XREF: sub_406C50+EA↓r
.text:00406C48                 align 10h
.text:00406C50
.text:00406C50 ; =============== S U B R O U T I N E =======================================
.text:00406C50
.text:00406C50
.text:00406C50 sub_406C50      proc near               ; CODE XREF: sub_404260+99↑p
.text:00406C50
.text:00406C50 var_34          = qword ptr -34h
.text:00406C50 Size            = dword ptr -2Ch
.text:00406C50 var_28          = dword ptr -28h
.text:00406C50 var_24          = dword ptr -24h
.text:00406C50 var_20          = dword ptr -20h
.text:00406C50 var_1C          = qword ptr -1Ch
.text:00406C50 var_14          = word ptr -14h
.text:00406C50 var_12          = word ptr -12h
.text:00406C50 var_10          = dword ptr -10h
.text:00406C50 var_8           = dword ptr -8
.text:00406C50 var_4           = dword ptr -4
.text:00406C50 arg_0           = dword ptr  4
.text:00406C50 arg_4           = dword ptr  8
.text:00406C50
.text:00406C50                 sub     esp, 2Ch
.text:00406C53                 mov     [esp+2Ch+var_8], ebx
.text:00406C57                 mov     ebx, [esp+2Ch+arg_4]
.text:00406C5B                 mov     [esp+2Ch+var_4], esi
.text:00406C5F                 mov     esi, [esp+2Ch+arg_0]
.text:00406C63                 test    ebx, ebx
.text:00406C65                 jz      loc_406E3A
.text:00406C6B                 mov     [esp+2Ch+var_20], 0
.text:00406C73                 lea     edx, [esp+2Ch+var_10]
.text:00406C77                 mov     [esp+2Ch+var_24], edx
.text:00406C7B                 mov     [esp+2Ch+var_28], ebx
.text:00406C7F                 mov     [esp+2Ch+Size], esi
.text:00406C82                 call    sub_4074B0
.text:00406C87                 test    eax, eax
.text:00406C89                 jz      short loc_406C97
.text:00406C8B
.text:00406C8B loc_406C8B:                             ; CODE XREF: sub_406C50+64↓j
.text:00406C8B                                         ; sub_406C50+7A↓j ...
.text:00406C8B                 mov     ebx, [esp+2Ch+var_8]
.text:00406C8F                 mov     esi, [esp+2Ch+var_4]
.text:00406C93                 add     esp, 2Ch
.text:00406C96                 retn
.text:00406C97 ; ---------------------------------------------------------------------------
.text:00406C97
.text:00406C97 loc_406C97:                             ; CODE XREF: sub_406C50+39↑j
.text:00406C97                 mov     eax, [esp+2Ch+var_10]
.text:00406C9B                 mov     ecx, [eax]
.text:00406C9D                 test    ecx, ecx
.text:00406C9F                 jz      short loc_406CDC
.text:00406CA1                 mov     eax, [esi+24h]
.text:00406CA4                 test    eax, eax
.text:00406CA6                 jz      short loc_406CCC
.text:00406CA8                 mov     edx, [eax+4]
.text:00406CAB                 mov     ecx, eax
.text:00406CAD                 mov     [esi+24h], edx
.text:00406CB0
.text:00406CB0 loc_406CB0:                             ; CODE XREF: sub_406C50+8A↓j
.text:00406CB0                 xor     eax, eax
.text:00406CB2                 test    ecx, ecx
.text:00406CB4                 jz      short loc_406C8B
.text:00406CB6                 inc     dword ptr [esi+10h]
.text:00406CB9                 mov     edx, [esp+2Ch+var_10]
.text:00406CBD                 mov     [ecx], ebx
.text:00406CBF                 mov     eax, [edx+4]
.text:00406CC2                 mov     [ecx+4], eax
.text:00406CC5                 mov     [edx+4], ecx
.text:00406CC8
.text:00406CC8 loc_406CC8:                             ; CODE XREF: sub_406C50+1C2↓j
.text:00406CC8                                         ; sub_406C50+1D8↓j
.text:00406CC8                 mov     eax, ebx
.text:00406CCA                 jmp     short loc_406C8B
.text:00406CCC ; ---------------------------------------------------------------------------
.text:00406CCC
.text:00406CCC loc_406CCC:                             ; CODE XREF: sub_406C50+56↑j
.text:00406CCC                 mov     [esp+2Ch+Size], 8 ; Size
.text:00406CD3                 call    malloc
.text:00406CD8                 mov     ecx, eax
.text:00406CDA                 jmp     short loc_406CB0
.text:00406CDC ; ---------------------------------------------------------------------------
.text:00406CDC
.text:00406CDC loc_406CDC:                             ; CODE XREF: sub_406C50+4F↑j
.text:00406CDC                 inc     dword ptr [esi+0Ch]
.text:00406CDF                 xor     edx, edx
.text:00406CE1                 mov     [eax], ebx
.text:00406CE3                 xor     eax, eax
.text:00406CE5                 mov     ecx, [esi+0Ch]
.text:00406CE8                 inc     dword ptr [esi+10h]
.text:00406CEB                 push    eax
.text:00406CEC                 push    ecx
.text:00406CED                 mov     eax, [esi+8]
.text:00406CF0                 mov     ecx, [esi+14h]
.text:00406CF3                 fild    [esp+34h+var_34]
.text:00406CF6                 add     esp, 8
.text:00406CF9                 push    edx
.text:00406CFA                 push    eax
.text:00406CFB                 fild    [esp+34h+var_34]
.text:00406CFE                 add     esp, 8
.text:00406D01                 fld     dword ptr [ecx+8]
.text:00406D04                 fmul    st(1), st
.text:00406D06                 fxch    st(2)
.text:00406D08                 fucompp
.text:00406D0A                 fnstsw  ax
.text:00406D0C                 sahf
.text:00406D0D                 jbe     loc_406E26
.text:00406D13                 fld     ds:flt_406C38
.text:00406D19                 fxch    st(1)
.text:00406D1B                 fucom   st(1)
.text:00406D1D                 fnstsw  ax
.text:00406D1F                 sahf
.text:00406D20                 jbe     loc_406E2D
.text:00406D26                 fld     ds:flt_406C40
.text:00406D2C                 fucomp  st(1)
.text:00406D2E                 fnstsw  ax
.text:00406D30                 sahf
.text:00406D31                 jbe     loc_406E2D
.text:00406D37                 fld     dword ptr [ecx+0Ch]
.text:00406D3A                 fld     ds:flt_406C44
.text:00406D40                 fxch    st(1)
.text:00406D42                 fucompp
.text:00406D44                 fnstsw  ax
.text:00406D46                 sahf
.text:00406D47                 jbe     loc_406E2D
.text:00406D4D                 fld     dword ptr [ecx]
.text:00406D4F                 fldz
.text:00406D51                 fxch    st(1)
.text:00406D53                 fucom   st(1)
.text:00406D55                 fnstsw  ax
.text:00406D57                 fstp    st(1)
.text:00406D59                 sahf
.text:00406D5A                 jb      loc_406E36
.text:00406D60                 faddp   st(2), st
.text:00406D62                 fld     dword ptr [ecx+4]
.text:00406D65                 fucom   st(2)
.text:00406D67                 fnstsw  ax
.text:00406D69                 sahf
.text:00406D6A                 jbe     loc_406E36
.text:00406D70                 fld1
.text:00406D72                 fucompp
.text:00406D74                 fnstsw  ax
.text:00406D76                 sahf
.text:00406D77                 jb      loc_406E2D
.text:00406D7D                 fucompp
.text:00406D7F                 fnstsw  ax
.text:00406D81                 sahf
.text:00406D82                 ja      short loc_406D90
.text:00406D84
.text:00406D84 loc_406D84:                             ; CODE XREF: sub_406C50+1E1↓j
.text:00406D84                 mov     dword ptr [esi+14h], offset dword_4066D0
.text:00406D8B                 mov     ecx, offset dword_4066D0
.text:00406D90
.text:00406D90 loc_406D90:                             ; CODE XREF: sub_406C50+132↑j
.text:00406D90                 mov     eax, [esi+0Ch]
.text:00406D93                 xor     edx, edx
.text:00406D95                 push    edx
.text:00406D96                 xor     edx, edx
.text:00406D98                 push    eax
.text:00406D99                 mov     eax, [esi+8]
.text:00406D9C                 fild    [esp+34h+var_34]
.text:00406D9F                 add     esp, 8
.text:00406DA2                 push    edx
.text:00406DA3                 push    eax
.text:00406DA4                 fild    [esp+34h+var_34]
.text:00406DA7                 add     esp, 8
.text:00406DAA                 fld     dword ptr [ecx+8]
.text:00406DAD                 fld     st
.text:00406DAF                 fmul    st, st(2)
.text:00406DB1                 fxch    st(3)
.text:00406DB3                 fucomp  st(3)
.text:00406DB5                 fnstsw  ax
.text:00406DB7                 fstp    st(2)
.text:00406DB9                 sahf
.text:00406DBA                 jbe     short loc_406E24
.text:00406DBC                 cmp     byte ptr [ecx+10h], 0
.text:00406DC0                 fmul    dword ptr [ecx+0Ch]
.text:00406DC3                 jnz     short loc_406E20
.text:00406DC5                 fmulp   st(1), st
.text:00406DC7
.text:00406DC7 loc_406DC7:                             ; CODE XREF: sub_406C50+1D2↓j
.text:00406DC7                 fld     ds:flt_406C3C
.text:00406DCD                 fxch    st(1)
.text:00406DCF                 fucom   st(1)
.text:00406DD1                 fnstsw  ax
.text:00406DD3                 fstp    st(1)
.text:00406DD5                 sahf
.text:00406DD6                 jnb     short loc_406E17
.text:00406DD8                 fnstcw  [esp+2Ch+var_12]
.text:00406DDC                 movzx   edx, [esp+2Ch+var_12]
.text:00406DE1                 mov     [esp+2Ch+Size], esi
.text:00406DE4                 or      dx, 0C00h
.text:00406DE9                 mov     [esp+2Ch+var_14], dx
.text:00406DEE                 fldcw   [esp+2Ch+var_14]
.text:00406DF2                 fistp   [esp+2Ch+var_1C]
.text:00406DF6                 fldcw   [esp+2Ch+var_12]
.text:00406DFA                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:00406DFE                 mov     [esp+2Ch+var_28], ecx
.text:00406E02                 call    sub_406AD0
.text:00406E07                 test    al, al
.text:00406E09                 setz    dl
.text:00406E0C                 movzx   esi, dl
.text:00406E0F                 dec     esi
.text:00406E10                 and     ebx, esi
.text:00406E12                 jmp     loc_406CC8
.text:00406E17 ; ---------------------------------------------------------------------------
.text:00406E17
.text:00406E17 loc_406E17:                             ; CODE XREF: sub_406C50+186↑j
.text:00406E17                 fstp    st
.text:00406E19                 xor     eax, eax
.text:00406E1B                 jmp     loc_406C8B
.text:00406E20 ; ---------------------------------------------------------------------------
.text:00406E20
.text:00406E20 loc_406E20:                             ; CODE XREF: sub_406C50+173↑j
.text:00406E20                 fstp    st(1)
.text:00406E22                 jmp     short loc_406DC7
.text:00406E24 ; ---------------------------------------------------------------------------
.text:00406E24
.text:00406E24 loc_406E24:                             ; CODE XREF: sub_406C50+16A↑j
.text:00406E24                 fstp    st
.text:00406E26
.text:00406E26 loc_406E26:                             ; CODE XREF: sub_406C50+BD↑j
.text:00406E26                 fstp    st
.text:00406E28                 jmp     loc_406CC8
.text:00406E2D ; ---------------------------------------------------------------------------
.text:00406E2D
.text:00406E2D loc_406E2D:                             ; CODE XREF: sub_406C50+D0↑j
.text:00406E2D                                         ; sub_406C50+E1↑j ...
.text:00406E2D                 fstp    st
.text:00406E2F                 fstp    st
.text:00406E31                 jmp     loc_406D84
.text:00406E36 ; ---------------------------------------------------------------------------
.text:00406E36
.text:00406E36 loc_406E36:                             ; CODE XREF: sub_406C50+10A↑j
.text:00406E36                                         ; sub_406C50+11A↑j
.text:00406E36                 fstp    st
.text:00406E38                 jmp     short loc_406E2D
.text:00406E3A ; ---------------------------------------------------------------------------
.text:00406E3A
.text:00406E3A loc_406E3A:                             ; CODE XREF: sub_406C50+15↑j
.text:00406E3A                 call    abort
.text:00406E3A sub_406C50      endp
.text:00406E3A
.text:00406E3A ; ---------------------------------------------------------------------------
.text:00406E3F                 align 10h
.text:00406E40                 mov     edx, [esp+4]
.text:00406E44                 mov     eax, [edx+8]
.text:00406E47                 retn
.text:00406E47 ; ---------------------------------------------------------------------------
.text:00406E48                 align 10h
.text:00406E50                 mov     edx, [esp+4]
.text:00406E54                 mov     eax, [edx+0Ch]
.text:00406E57                 retn
.text:00406E57 ; ---------------------------------------------------------------------------
.text:00406E58                 align 10h
.text:00406E60                 mov     edx, [esp+4]
.text:00406E64                 mov     eax, [edx+10h]
.text:00406E67                 retn
.text:00406E67 ; ---------------------------------------------------------------------------
.text:00406E68                 align 10h
.text:00406E70                 push    esi
.text:00406E71                 xor     esi, esi
.text:00406E73                 push    ebx
.text:00406E74                 mov     edx, [esp+0Ch]
.text:00406E78                 mov     ecx, [edx]
.text:00406E7A                 mov     ebx, [edx+4]
.text:00406E7D                 cmp     ecx, ebx
.text:00406E7F                 jnb     short loc_406EC7
.text:00406E81                 jmp     short loc_406E90
.text:00406E81 ; ---------------------------------------------------------------------------
.text:00406E83                 align 10h
.text:00406E90
.text:00406E90 loc_406E90:                             ; CODE XREF: .text:00406E81↑j
.text:00406E90                                         ; .text:00406EC5↓j
.text:00406E90                 mov     edx, [ecx]
.text:00406E92                 test    edx, edx
.text:00406E94                 jz      short loc_406EC0
.text:00406E96                 mov     eax, [ecx+4]
.text:00406E99                 mov     edx, 1
.text:00406E9E                 test    eax, eax
.text:00406EA0                 jz      short loc_406EB8
.text:00406EA2                 lea     esi, [esi+0]
.text:00406EA9                 lea     edi, [edi+0]
.text:00406EB0
.text:00406EB0 loc_406EB0:                             ; CODE XREF: .text:00406EB6↓j
.text:00406EB0                 mov     eax, [eax+4]
.text:00406EB3                 inc     edx
.text:00406EB4                 test    eax, eax
.text:00406EB6                 jnz     short loc_406EB0
.text:00406EB8
.text:00406EB8 loc_406EB8:                             ; CODE XREF: .text:00406EA0↑j
.text:00406EB8                 cmp     edx, esi
.text:00406EBA                 jbe     short loc_406EC0
.text:00406EBC                 mov     esi, edx
.text:00406EBE                 mov     esi, esi
.text:00406EC0
.text:00406EC0 loc_406EC0:                             ; CODE XREF: .text:00406E94↑j
.text:00406EC0                                         ; .text:00406EBA↑j
.text:00406EC0                 add     ecx, 8
.text:00406EC3                 cmp     ecx, ebx
.text:00406EC5                 jb      short loc_406E90
.text:00406EC7
.text:00406EC7 loc_406EC7:                             ; CODE XREF: .text:00406E7F↑j
.text:00406EC7                 pop     ebx
.text:00406EC8                 mov     eax, esi
.text:00406ECA                 pop     esi
.text:00406ECB                 retn
.text:00406ECB ; ---------------------------------------------------------------------------
.text:00406ECC                 align 10h
.text:00406ED0                 push    edi
.text:00406ED1                 xor     ecx, ecx
.text:00406ED3                 push    esi
.text:00406ED4                 xor     esi, esi
.text:00406ED6                 push    ebx
.text:00406ED7                 mov     edi, [esp+10h]
.text:00406EDB                 mov     edx, [edi]
.text:00406EDD                 mov     ebx, [edi+4]
.text:00406EE0                 cmp     edx, ebx
.text:00406EE2                 jnb     short loc_406F0F
.text:00406EE4                 lea     esi, [esi+0]
.text:00406EEA                 lea     edi, [edi+0]
.text:00406EF0
.text:00406EF0 loc_406EF0:                             ; CODE XREF: .text:00406F0D↓j
.text:00406EF0                 mov     eax, [edx]
.text:00406EF2                 test    eax, eax
.text:00406EF4                 jz      short loc_406F08
.text:00406EF6                 mov     eax, [edx+4]
.text:00406EF9                 inc     esi
.text:00406EFA                 inc     ecx
.text:00406EFB                 test    eax, eax
.text:00406EFD                 jz      short loc_406F08
.text:00406EFF                 nop
.text:00406F00
.text:00406F00 loc_406F00:                             ; CODE XREF: .text:00406F06↓j
.text:00406F00                 mov     eax, [eax+4]
.text:00406F03                 inc     ecx
.text:00406F04                 test    eax, eax
.text:00406F06                 jnz     short loc_406F00
.text:00406F08
.text:00406F08 loc_406F08:                             ; CODE XREF: .text:00406EF4↑j
.text:00406F08                                         ; .text:00406EFD↑j
.text:00406F08                 add     edx, 8
.text:00406F0B                 cmp     edx, ebx
.text:00406F0D                 jb      short loc_406EF0
.text:00406F0F
.text:00406F0F loc_406F0F:                             ; CODE XREF: .text:00406EE2↑j
.text:00406F0F                 cmp     esi, [edi+0Ch]
.text:00406F12                 jz      short loc_406F1A
.text:00406F14
.text:00406F14 loc_406F14:                             ; CODE XREF: .text:00406F1D↓j
.text:00406F14                 xor     eax, eax
.text:00406F16
.text:00406F16 loc_406F16:                             ; CODE XREF: .text:00406F24↓j
.text:00406F16                 pop     ebx
.text:00406F17                 pop     esi
.text:00406F18                 pop     edi
.text:00406F19                 retn
.text:00406F1A ; ---------------------------------------------------------------------------
.text:00406F1A
.text:00406F1A loc_406F1A:                             ; CODE XREF: .text:00406F12↑j
.text:00406F1A                 cmp     ecx, [edi+10h]
.text:00406F1D                 jnz     short loc_406F14
.text:00406F1F                 mov     eax, 1
.text:00406F24                 jmp     short loc_406F16
.text:00406F24 ; ---------------------------------------------------------------------------
.text:00406F26 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:00406F26                                         ; DATA XREF: .text:0040701E↓o
.text:00406F3E aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:00406F3E                                         ; DATA XREF: .text:00407036↓o
.text:00406F56                 db 1Ah dup(90h)
.text:00406F70 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:00406F70                                         ; DATA XREF: .text:00407070↓o
.text:00406F91 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:00406F91                                         ; DATA XREF: .text:0040708A↓o
.text:00406FA9                 db 8Dh, 76h, 0
.text:00406FAC flt_406FAC      dd 100.0                ; DATA XREF: .text:00407063↓r
.text:00406FB0 ; ---------------------------------------------------------------------------
.text:00406FB0                 push    ebp
.text:00406FB1                 push    edi
.text:00406FB2                 push    esi
.text:00406FB3                 xor     esi, esi
.text:00406FB5                 push    ebx
.text:00406FB6                 sub     esp, 1Ch
.text:00406FB9                 mov     ebx, [esp+30h]
.text:00406FBD                 mov     edi, [esp+34h]
.text:00406FC1                 mov     ecx, [ebx+10h]
.text:00406FC4                 mov     eax, [ebx+0Ch]
.text:00406FC7                 mov     ebp, [ebx+8]
.text:00406FCA                 mov     [esp+18h], ecx
.text:00406FCE                 mov     ecx, [ebx]
.text:00406FD0                 mov     [esp+14h], eax
.text:00406FD4                 mov     eax, [ebx+4]
.text:00406FD7                 cmp     ecx, eax
.text:00406FD9                 jnb     short loc_407017
.text:00406FDB                 mov     ebx, eax
.text:00406FDD                 lea     esi, [esi+0]
.text:00406FE0
.text:00406FE0 loc_406FE0:                             ; CODE XREF: .text:00407015↓j
.text:00406FE0                 mov     edx, [ecx]
.text:00406FE2                 test    edx, edx
.text:00406FE4                 jz      short loc_407010
.text:00406FE6                 mov     eax, [ecx+4]
.text:00406FE9                 mov     edx, 1
.text:00406FEE                 test    eax, eax
.text:00406FF0                 jz      short loc_407008
.text:00406FF2                 lea     esi, [esi+0]
.text:00406FF9                 lea     edi, [edi+0]
.text:00407000
.text:00407000 loc_407000:                             ; CODE XREF: .text:00407006↓j
.text:00407000                 mov     eax, [eax+4]
.text:00407003                 inc     edx
.text:00407004                 test    eax, eax
.text:00407006                 jnz     short loc_407000
.text:00407008
.text:00407008 loc_407008:                             ; CODE XREF: .text:00406FF0↑j
.text:00407008                 cmp     edx, esi
.text:0040700A                 jbe     short loc_407010
.text:0040700C                 mov     esi, edx
.text:0040700E                 mov     esi, esi
.text:00407010
.text:00407010 loc_407010:                             ; CODE XREF: .text:00406FE4↑j
.text:00407010                                         ; .text:0040700A↑j
.text:00407010                 add     ecx, 8
.text:00407013                 cmp     ecx, ebx
.text:00407015                 jb      short loc_406FE0
.text:00407017
.text:00407017 loc_407017:                             ; CODE XREF: .text:00406FD9↑j
.text:00407017                 mov     [esp], edi
.text:0040701A                 mov     edx, [esp+18h]
.text:0040701E                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:00407026                 mov     [esp+8], edx
.text:0040702A                 call    fprintf
.text:0040702F                 mov     [esp+8], ebp
.text:00407033                 mov     [esp], edi
.text:00407036                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:0040703E                 call    fprintf
.text:00407043                 mov     ebx, [esp+14h]
.text:00407047                 xor     eax, eax
.text:00407049                 mov     ecx, ebp
.text:0040704B                 push    eax
.text:0040704C                 xor     ebp, ebp
.text:0040704E                 push    ebx
.text:0040704F                 fild    qword ptr [esp]
.text:00407052                 add     esp, 8
.text:00407055                 push    ebp
.text:00407056                 push    ecx
.text:00407057                 fild    qword ptr [esp]
.text:0040705A                 fxch    st(1)
.text:0040705C                 add     esp, 8
.text:0040705F                 mov     ebx, [esp+14h]
.text:00407063                 fmul    ds:flt_406FAC
.text:00407069                 mov     [esp], edi
.text:0040706C                 mov     [esp+8], ebx
.text:00407070                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00407078                 fdivrp  st(1), st
.text:0040707A                 fstp    qword ptr [esp+0Ch]
.text:0040707E                 call    fprintf
.text:00407083                 mov     [esp+8], esi
.text:00407087                 mov     [esp], edi
.text:0040708A                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:00407092                 call    fprintf
.text:00407097                 add     esp, 1Ch
.text:0040709A                 pop     ebx
.text:0040709B                 pop     esi
.text:0040709C                 pop     edi
.text:0040709D                 pop     ebp
.text:0040709E                 retn
.text:0040709E ; ---------------------------------------------------------------------------
.text:0040709F                 align 10h
.text:004070A0                 push    edi
.text:004070A1                 push    esi
.text:004070A2                 push    ebx
.text:004070A3                 sub     esp, 10h
.text:004070A6                 mov     esi, [esp+20h]
.text:004070AA                 mov     edi, [esp+24h]
.text:004070AE                 mov     edx, [esi+8]
.text:004070B1                 mov     [esp], edi
.text:004070B4                 mov     [esp+4], edx
.text:004070B8                 call    dword ptr [esi+18h]
.text:004070BB                 mov     ecx, [esi]
.text:004070BD                 lea     eax, [ecx+eax*8]
.text:004070C0                 cmp     eax, [esi+4]
.text:004070C3                 jnb     short loc_407104
.text:004070C5                 mov     ecx, [eax]
.text:004070C7                 test    ecx, ecx
.text:004070C9                 jz      short loc_4070F7
.text:004070CB                 test    eax, eax
.text:004070CD                 mov     ebx, eax
.text:004070CF                 jz      short loc_4070F7
.text:004070D1                 jmp     short loc_4070E0
.text:004070D1 ; ---------------------------------------------------------------------------
.text:004070D3                 align 10h
.text:004070E0
.text:004070E0 loc_4070E0:                             ; CODE XREF: .text:004070D1↑j
.text:004070E0                                         ; .text:004070F5↓j
.text:004070E0                 mov     edx, [ebx]
.text:004070E2                 mov     [esp], edi
.text:004070E5                 mov     [esp+4], edx
.text:004070E9                 call    dword ptr [esi+1Ch]
.text:004070EC                 test    al, al
.text:004070EE                 jnz     short loc_407100
.text:004070F0                 mov     ebx, [ebx+4]
.text:004070F3                 test    ebx, ebx
.text:004070F5                 jnz     short loc_4070E0
.text:004070F7
.text:004070F7 loc_4070F7:                             ; CODE XREF: .text:004070C9↑j
.text:004070F7                                         ; .text:004070CF↑j
.text:004070F7                 xor     eax, eax
.text:004070F9
.text:004070F9 loc_4070F9:                             ; CODE XREF: .text:00407102↓j
.text:004070F9                 add     esp, 10h
.text:004070FC                 pop     ebx
.text:004070FD                 pop     esi
.text:004070FE                 pop     edi
.text:004070FF                 retn
.text:00407100 ; ---------------------------------------------------------------------------
.text:00407100
.text:00407100 loc_407100:                             ; CODE XREF: .text:004070EE↑j
.text:00407100                 mov     eax, [ebx]
.text:00407102                 jmp     short loc_4070F9
.text:00407104 ; ---------------------------------------------------------------------------
.text:00407104
.text:00407104 loc_407104:                             ; CODE XREF: .text:004070C3↑j
.text:00407104                 call    abort
.text:00407104 ; ---------------------------------------------------------------------------
.text:00407109                 align 10h
.text:00407110                 sub     esp, 0Ch
.text:00407113                 mov     eax, [esp+10h]
.text:00407117                 mov     edx, [eax+10h]
.text:0040711A                 test    edx, edx
.text:0040711C                 jz      short loc_407143
.text:0040711E                 mov     edx, [eax]
.text:00407120                 mov     ecx, [eax+4]
.text:00407123                 lea     esi, [esi+0]
.text:00407129                 lea     edi, [edi+0]
.text:00407130
.text:00407130 loc_407130:                             ; CODE XREF: .text:0040713D↓j
.text:00407130                 cmp     edx, ecx
.text:00407132                 jnb     short loc_407147
.text:00407134                 mov     eax, [edx]
.text:00407136                 test    eax, eax
.text:00407138                 jnz     short loc_40713F
.text:0040713A                 add     edx, 8
.text:0040713D                 jmp     short loc_407130
.text:0040713F ; ---------------------------------------------------------------------------
.text:0040713F
.text:0040713F loc_40713F:                             ; CODE XREF: .text:00407138↑j
.text:0040713F                                         ; .text:00407145↓j
.text:0040713F                 add     esp, 0Ch
.text:00407142                 retn
.text:00407143 ; ---------------------------------------------------------------------------
.text:00407143
.text:00407143 loc_407143:                             ; CODE XREF: .text:0040711C↑j
.text:00407143                 xor     eax, eax
.text:00407145                 jmp     short loc_40713F
.text:00407147 ; ---------------------------------------------------------------------------
.text:00407147
.text:00407147 loc_407147:                             ; CODE XREF: .text:00407132↑j
.text:00407147                 call    abort
.text:00407147 ; ---------------------------------------------------------------------------
.text:0040714C                 align 10h
.text:00407150                 push    esi
.text:00407151                 push    ebx
.text:00407152                 sub     esp, 14h
.text:00407155                 mov     ebx, [esp+20h]
.text:00407159                 mov     esi, [esp+24h]
.text:0040715D                 mov     edx, [ebx+8]
.text:00407160                 mov     [esp], esi
.text:00407163                 mov     [esp+4], edx
.text:00407167                 call    dword ptr [ebx+18h]
.text:0040716A                 mov     ecx, [ebx]
.text:0040716C                 lea     edx, [ecx+eax*8]
.text:0040716F                 mov     ecx, [ebx+4]
.text:00407172                 cmp     edx, ecx
.text:00407174                 jnb     short loc_4071C0
.text:00407176                 test    edx, edx
.text:00407178                 mov     eax, edx
.text:0040717A                 jz      short loc_40718B
.text:0040717C                 lea     esi, [esi+0]
.text:00407180
.text:00407180 loc_407180:                             ; CODE XREF: .text:00407189↓j
.text:00407180                 cmp     [eax], esi
.text:00407182                 jz      short loc_4071B5
.text:00407184                 mov     eax, [eax+4]
.text:00407187
.text:00407187 loc_407187:                             ; CODE XREF: .text:004071BA↓j
.text:00407187                 test    eax, eax
.text:00407189                 jnz     short loc_407180
.text:0040718B
.text:0040718B loc_40718B:                             ; CODE XREF: .text:0040717A↑j
.text:0040718B                 add     edx, 8
.text:0040718E                 cmp     edx, ecx
.text:00407190                 jnb     short loc_4071AD
.text:00407192                 lea     esi, [esi+0]
.text:00407199                 lea     edi, [edi+0]
.text:004071A0
.text:004071A0 loc_4071A0:                             ; CODE XREF: .text:004071AB↓j
.text:004071A0                 mov     eax, [edx]
.text:004071A2                 test    eax, eax
.text:004071A4                 jnz     short loc_4071AF
.text:004071A6                 add     edx, 8
.text:004071A9                 cmp     edx, ecx
.text:004071AB                 jb      short loc_4071A0
.text:004071AD
.text:004071AD loc_4071AD:                             ; CODE XREF: .text:00407190↑j
.text:004071AD                 xor     eax, eax
.text:004071AF
.text:004071AF loc_4071AF:                             ; CODE XREF: .text:004071A4↑j
.text:004071AF                                         ; .text:004071BE↓j
.text:004071AF                 add     esp, 14h
.text:004071B2                 pop     ebx
.text:004071B3                 pop     esi
.text:004071B4                 retn
.text:004071B5 ; ---------------------------------------------------------------------------
.text:004071B5
.text:004071B5 loc_4071B5:                             ; CODE XREF: .text:00407182↑j
.text:004071B5                 mov     eax, [eax+4]
.text:004071B8                 test    eax, eax
.text:004071BA                 jz      short loc_407187
.text:004071BC                 mov     eax, [eax]
.text:004071BE                 jmp     short loc_4071AF
.text:004071C0 ; ---------------------------------------------------------------------------
.text:004071C0
.text:004071C0 loc_4071C0:                             ; CODE XREF: .text:00407174↑j
.text:004071C0                 call    abort
.text:004071C0 ; ---------------------------------------------------------------------------
.text:004071C5                 align 10h
.text:004071D0                 push    ebp
.text:004071D1                 xor     ecx, ecx
.text:004071D3                 push    edi
.text:004071D4                 push    esi
.text:004071D5                 push    ebx
.text:004071D6                 mov     edx, [esp+14h]
.text:004071DA                 mov     ebp, [esp+18h]
.text:004071DE                 mov     edi, [esp+1Ch]
.text:004071E2                 mov     ebx, [edx]
.text:004071E4                 mov     esi, [edx+4]
.text:004071E7                 cmp     ebx, esi
.text:004071E9                 jnb     short loc_407220
.text:004071EB                 nop
.text:004071EC                 lea     esi, [esi+0]
.text:004071F0
.text:004071F0 loc_4071F0:                             ; CODE XREF: .text:00407217↓j
.text:004071F0                 mov     edx, [ebx]
.text:004071F2                 test    edx, edx
.text:004071F4                 jz      short loc_407212
.text:004071F6                 mov     edx, ebx
.text:004071F8                 nop
.text:004071F9                 lea     esi, [esi+0]
.text:00407200
.text:00407200 loc_407200:                             ; CODE XREF: .text:00407210↓j
.text:00407200                 cmp     ecx, edi
.text:00407202                 jnb     short loc_407220
.text:00407204                 mov     eax, [edx]
.text:00407206                 mov     edx, [edx+4]
.text:00407209                 mov     [ebp+ecx*4+0], eax
.text:0040720D                 inc     ecx
.text:0040720E                 test    edx, edx
.text:00407210                 jnz     short loc_407200
.text:00407212
.text:00407212 loc_407212:                             ; CODE XREF: .text:004071F4↑j
.text:00407212                 add     ebx, 8
.text:00407215                 cmp     ebx, esi
.text:00407217                 jb      short loc_4071F0
.text:00407219                 lea     esi, [esi+0]
.text:00407220
.text:00407220 loc_407220:                             ; CODE XREF: .text:004071E9↑j
.text:00407220                                         ; .text:00407202↑j
.text:00407220                 pop     ebx
.text:00407221                 mov     eax, ecx
.text:00407223                 pop     esi
.text:00407224                 pop     edi
.text:00407225                 pop     ebp
.text:00407226                 retn
.text:00407226 ; ---------------------------------------------------------------------------
.text:00407227                 align 10h
.text:00407230                 push    ebp
.text:00407231                 push    edi
.text:00407232                 xor     edi, edi
.text:00407234                 push    esi
.text:00407235                 push    ebx
.text:00407236                 sub     esp, 0Ch
.text:00407239                 mov     edx, [esp+20h]
.text:0040723D                 mov     ebp, [esp+28h]
.text:00407241                 mov     esi, [edx]
.text:00407243                 mov     eax, [edx+4]
.text:00407246                 cmp     esi, eax
.text:00407248                 jnb     short loc_407290
.text:0040724A                 lea     esi, [esi+0]
.text:00407250
.text:00407250 loc_407250:                             ; CODE XREF: .text:00407285↓j
.text:00407250                 mov     ecx, [esi]
.text:00407252                 test    ecx, ecx
.text:00407254                 jz      short loc_407280
.text:00407256                 mov     ebx, esi
.text:00407258                 nop
.text:00407259                 lea     esi, [esi+0]
.text:00407260
.text:00407260 loc_407260:                             ; CODE XREF: .text:00407277↓j
.text:00407260                 mov     [esp+4], ebp
.text:00407264                 mov     edx, [ebx]
.text:00407266                 mov     [esp], edx
.text:00407269                 call    dword ptr [esp+24h]
.text:0040726D                 test    al, al
.text:0040726F                 jz      short loc_407290
.text:00407271                 mov     ebx, [ebx+4]
.text:00407274                 inc     edi
.text:00407275                 test    ebx, ebx
.text:00407277                 jnz     short loc_407260
.text:00407279                 mov     ebx, [esp+20h]
.text:0040727D                 mov     eax, [ebx+4]
.text:00407280
.text:00407280 loc_407280:                             ; CODE XREF: .text:00407254↑j
.text:00407280                 add     esi, 8
.text:00407283                 cmp     esi, eax
.text:00407285                 jb      short loc_407250
.text:00407287                 mov     esi, esi
.text:00407289                 lea     edi, [edi+0]
.text:00407290
.text:00407290 loc_407290:                             ; CODE XREF: .text:00407248↑j
.text:00407290                                         ; .text:0040726F↑j
.text:00407290                 add     esp, 0Ch
.text:00407293                 mov     eax, edi
.text:00407295                 pop     ebx
.text:00407296                 pop     esi
.text:00407297                 pop     edi
.text:00407298                 pop     ebp
.text:00407299                 retn
.text:00407299 ; ---------------------------------------------------------------------------
.text:0040729A                 align 10h
.text:004072A0                 push    esi
.text:004072A1                 push    ebx
.text:004072A2                 mov     ecx, [esp+0Ch]
.text:004072A6                 xor     ebx, ebx
.text:004072A8                 mov     esi, [esp+10h]
.text:004072AC                 movzx   edx, byte ptr [ecx]
.text:004072AF                 test    dl, dl
.text:004072B1                 jz      short loc_4072DA
.text:004072B3                 lea     esi, [esi+0]
.text:004072B9                 lea     edi, [edi+0]
.text:004072C0
.text:004072C0 loc_4072C0:                             ; CODE XREF: .text:004072D8↓j
.text:004072C0                 mov     eax, ebx
.text:004072C2                 inc     ecx
.text:004072C3                 shl     eax, 5
.text:004072C6                 sub     eax, ebx
.text:004072C8                 movzx   ebx, dl
.text:004072CB                 add     eax, ebx
.text:004072CD                 xor     edx, edx
.text:004072CF                 div     esi
.text:004072D1                 mov     ebx, edx
.text:004072D3                 movzx   edx, byte ptr [ecx]
.text:004072D6                 test    dl, dl
.text:004072D8                 jnz     short loc_4072C0
.text:004072DA
.text:004072DA loc_4072DA:                             ; CODE XREF: .text:004072B1↑j
.text:004072DA                 mov     eax, ebx
.text:004072DC                 pop     ebx
.text:004072DD                 pop     esi
.text:004072DE                 retn
.text:004072DE ; ---------------------------------------------------------------------------
.text:004072DF                 align 10h
.text:004072E0                 mov     ecx, [esp+4]
.text:004072E4                 mov     edx, ds:dword_4066D0
.text:004072EA                 mov     [ecx], edx
.text:004072EC                 mov     edx, ds:dword_4066D4
.text:004072F2                 mov     [ecx+4], edx
.text:004072F5                 mov     edx, ds:dword_4066D4+4
.text:004072FB                 mov     [ecx+8], edx
.text:004072FE                 mov     edx, ds:dword_4066D4+8
.text:00407304                 mov     [ecx+0Ch], edx
.text:00407307                 mov     edx, ds:dword_4066D4+0Ch
.text:0040730D                 mov     [ecx+10h], edx
.text:00407310                 retn
.text:00407310 ; ---------------------------------------------------------------------------
.text:00407311                 align 4
.text:00407314 flt_407314      dd 0.1                  ; DATA XREF: sub_407320+79↓r
.text:00407318 flt_407318      dd 0.89999998           ; DATA XREF: sub_407320+8D↓r
.text:0040731C flt_40731C      dd 1.1                  ; DATA XREF: sub_407320+A1↓r
.text:00407320
.text:00407320 ; =============== S U B R O U T I N E =======================================
.text:00407320
.text:00407320
.text:00407320 sub_407320      proc near               ; CODE XREF: sub_402DD0+2F0↑p
.text:00407320                                         ; sub_402DD0+483↑p
.text:00407320
.text:00407320 var_34          = qword ptr -34h
.text:00407320 var_2C          = dword ptr -2Ch
.text:00407320 var_28          = dword ptr -28h
.text:00407320 var_24          = dword ptr -24h
.text:00407320 var_20          = dword ptr -20h
.text:00407320 var_1C          = qword ptr -1Ch
.text:00407320 var_14          = word ptr -14h
.text:00407320 var_12          = word ptr -12h
.text:00407320 var_10          = dword ptr -10h
.text:00407320 arg_0           = dword ptr  4
.text:00407320 arg_4           = dword ptr  8
.text:00407320
.text:00407320                 push    esi
.text:00407321                 push    ebx
.text:00407322                 sub     esp, 24h
.text:00407325                 lea     edx, [esp+2Ch+var_10]
.text:00407329                 mov     [esp+2Ch+var_24], edx
.text:0040732D                 mov     ebx, [esp+2Ch+arg_0]
.text:00407331                 mov     edx, [esp+2Ch+arg_4]
.text:00407335                 mov     [esp+2Ch+var_20], 1
.text:0040733D                 mov     [esp+2Ch+var_2C], ebx
.text:00407340                 mov     [esp+2Ch+var_28], edx
.text:00407344                 call    sub_4074B0
.text:00407349                 mov     esi, eax
.text:0040734B                 xor     eax, eax
.text:0040734D                 test    esi, esi
.text:0040734F                 jz      loc_407482
.text:00407355                 dec     dword ptr [ebx+10h]
.text:00407358                 mov     ecx, [esp+2Ch+var_10]
.text:0040735C                 mov     edx, [ecx]
.text:0040735E                 test    edx, edx
.text:00407360                 jnz     loc_407480
.text:00407366                 dec     dword ptr [ebx+0Ch]
.text:00407369                 xor     eax, eax
.text:0040736B                 xor     edx, edx
.text:0040736D                 mov     ecx, [ebx+0Ch]
.text:00407370                 push    eax
.text:00407371                 push    ecx
.text:00407372                 mov     eax, [ebx+8]
.text:00407375                 mov     ecx, [ebx+14h]
.text:00407378                 fild    [esp+34h+var_34]
.text:0040737B                 add     esp, 8
.text:0040737E                 push    edx
.text:0040737F                 push    eax
.text:00407380                 fild    [esp+34h+var_34]
.text:00407383                 add     esp, 8
.text:00407386                 fld     dword ptr [ecx]
.text:00407388                 fmul    st(1), st
.text:0040738A                 fxch    st(1)
.text:0040738C                 fucomp  st(2)
.text:0040738E                 fnstsw  ax
.text:00407390                 fstp    st(1)
.text:00407392                 sahf
.text:00407393                 jbe     loc_407490
.text:00407399                 fld     ds:flt_407314
.text:0040739F                 fld     dword ptr [ecx+8]
.text:004073A2                 fucom   st(1)
.text:004073A4                 fnstsw  ax
.text:004073A6                 sahf
.text:004073A7                 jbe     loc_4074A0
.text:004073AD                 fld     ds:flt_407318
.text:004073B3                 fucomp  st(1)
.text:004073B5                 fnstsw  ax
.text:004073B7                 sahf
.text:004073B8                 jbe     loc_4074A0
.text:004073BE                 fld     dword ptr [ecx+0Ch]
.text:004073C1                 fld     ds:flt_40731C
.text:004073C7                 fxch    st(1)
.text:004073C9                 fucompp
.text:004073CB                 fnstsw  ax
.text:004073CD                 sahf
.text:004073CE                 jbe     loc_4074A0
.text:004073D4                 fldz
.text:004073D6                 fxch    st(3)
.text:004073D8                 fucom   st(3)
.text:004073DA                 fnstsw  ax
.text:004073DC                 fstp    st(3)
.text:004073DE                 sahf
.text:004073DF                 jb      loc_4074A0
.text:004073E5                 fxch    st(1)
.text:004073E7                 faddp   st(2), st
.text:004073E9                 fld     dword ptr [ecx+4]
.text:004073EC                 fucom   st(2)
.text:004073EE                 fnstsw  ax
.text:004073F0                 sahf
.text:004073F1                 jbe     loc_4074A0
.text:004073F7                 fld1
.text:004073F9                 fucompp
.text:004073FB                 fnstsw  ax
.text:004073FD                 sahf
.text:004073FE                 jb      loc_407494
.text:00407404                 fucompp
.text:00407406                 fnstsw  ax
.text:00407408                 sahf
.text:00407409                 ja      short loc_40741C
.text:0040740B                 nop
.text:0040740C                 lea     esi, [esi+0]
.text:00407410
.text:00407410 loc_407410:                             ; CODE XREF: sub_407320+178↓j
.text:00407410                 mov     dword ptr [ebx+14h], offset dword_4066D0
.text:00407417                 mov     ecx, offset dword_4066D0
.text:0040741C
.text:0040741C loc_40741C:                             ; CODE XREF: sub_407320+E9↑j
.text:0040741C                 mov     eax, [ebx+0Ch]
.text:0040741F                 xor     edx, edx
.text:00407421                 push    edx
.text:00407422                 xor     edx, edx
.text:00407424                 push    eax
.text:00407425                 mov     eax, [ebx+8]
.text:00407428                 fild    [esp+34h+var_34]
.text:0040742B                 add     esp, 8
.text:0040742E                 push    edx
.text:0040742F                 push    eax
.text:00407430                 fild    [esp+34h+var_34]
.text:00407433                 add     esp, 8
.text:00407436                 fld     dword ptr [ecx]
.text:00407438                 fmul    st, st(1)
.text:0040743A                 fucomp  st(2)
.text:0040743C                 fnstsw  ax
.text:0040743E                 fstp    st(1)
.text:00407440                 sahf
.text:00407441                 jbe     short loc_407490
.text:00407443                 cmp     byte ptr [ecx+10h], 0
.text:00407447                 jz      short loc_407488
.text:00407449                 fmul    dword ptr [ecx+4]
.text:0040744C
.text:0040744C loc_40744C:                             ; CODE XREF: sub_407320+16E↓j
.text:0040744C                 fnstcw  [esp+2Ch+var_12]
.text:00407450                 movzx   ecx, [esp+2Ch+var_12]
.text:00407455                 mov     [esp+2Ch+var_2C], ebx
.text:00407458                 or      cx, 0C00h
.text:0040745D                 mov     [esp+2Ch+var_14], cx
.text:00407462                 fldcw   [esp+2Ch+var_14]
.text:00407466                 fistp   [esp+2Ch+var_1C]
.text:0040746A                 fldcw   [esp+2Ch+var_12]
.text:0040746E                 mov     edx, dword ptr [esp+2Ch+var_1C]
.text:00407472                 mov     [esp+2Ch+var_28], edx
.text:00407476                 call    sub_406AD0
.text:0040747B                 nop
.text:0040747C                 lea     esi, [esi+0]
.text:00407480
.text:00407480 loc_407480:                             ; CODE XREF: sub_407320+40↑j
.text:00407480                                         ; sub_407320+172↓j
.text:00407480                 mov     eax, esi
.text:00407482
.text:00407482 loc_407482:                             ; CODE XREF: sub_407320+2F↑j
.text:00407482                 add     esp, 24h
.text:00407485                 pop     ebx
.text:00407486                 pop     esi
.text:00407487                 retn
.text:00407488 ; ---------------------------------------------------------------------------
.text:00407488
.text:00407488 loc_407488:                             ; CODE XREF: sub_407320+127↑j
.text:00407488                 fmul    dword ptr [ecx+4]
.text:0040748B                 fmul    dword ptr [ecx+8]
.text:0040748E                 jmp     short loc_40744C
.text:00407490 ; ---------------------------------------------------------------------------
.text:00407490
.text:00407490 loc_407490:                             ; CODE XREF: sub_407320+73↑j
.text:00407490                                         ; sub_407320+121↑j
.text:00407490                 fstp    st
.text:00407492                 jmp     short loc_407480
.text:00407494 ; ---------------------------------------------------------------------------
.text:00407494
.text:00407494 loc_407494:                             ; CODE XREF: sub_407320+DE↑j
.text:00407494                                         ; sub_407320+182↓j
.text:00407494                 fstp    st
.text:00407496                 fstp    st
.text:00407498                 jmp     loc_407410
.text:00407498 ; ---------------------------------------------------------------------------
.text:0040749D                 align 10h
.text:004074A0
.text:004074A0 loc_4074A0:                             ; CODE XREF: sub_407320+87↑j
.text:004074A0                                         ; sub_407320+98↑j ...
.text:004074A0                 fstp    st
.text:004074A2                 jmp     short loc_407494
.text:004074A2 sub_407320      endp
.text:004074A2
.text:004074A2 ; ---------------------------------------------------------------------------
.text:004074A4                 align 10h
.text:004074B0
.text:004074B0 ; =============== S U B R O U T I N E =======================================
.text:004074B0
.text:004074B0
.text:004074B0 sub_4074B0      proc near               ; CODE XREF: sub_406C50+32↑p
.text:004074B0                                         ; sub_407320+24↑p
.text:004074B0
.text:004074B0 var_1C          = dword ptr -1Ch
.text:004074B0 var_18          = dword ptr -18h
.text:004074B0 var_D           = byte ptr -0Dh
.text:004074B0 arg_0           = dword ptr  4
.text:004074B0 arg_4           = dword ptr  8
.text:004074B0 arg_8           = dword ptr  0Ch
.text:004074B0 arg_C           = byte ptr  10h
.text:004074B0
.text:004074B0                 push    edi
.text:004074B1                 push    esi
.text:004074B2                 push    ebx
.text:004074B3                 sub     esp, 10h
.text:004074B6                 mov     esi, [esp+1Ch+arg_0]
.text:004074BA                 movzx   ecx, [esp+1Ch+arg_C]
.text:004074BF                 mov     edi, [esp+1Ch+arg_4]
.text:004074C3                 mov     edx, [esi+8]
.text:004074C6                 mov     [esp+1Ch+var_D], cl
.text:004074CA                 mov     [esp+1Ch+var_18], edx
.text:004074CE                 mov     [esp+1Ch+var_1C], edi
.text:004074D1                 call    dword ptr [esi+18h]
.text:004074D4                 mov     ecx, [esi]
.text:004074D6                 lea     ebx, [ecx+eax*8]
.text:004074D9                 cmp     ebx, [esi+4]
.text:004074DC                 jnb     loc_407593
.text:004074E2                 mov     edx, [esp+1Ch+arg_8]
.text:004074E6                 xor     eax, eax
.text:004074E8                 mov     [edx], ebx
.text:004074EA                 mov     edx, [ebx]
.text:004074EC                 test    edx, edx
.text:004074EE                 jz      short loc_407532
.text:004074F0                 mov     [esp+1Ch+var_18], edx
.text:004074F4                 mov     [esp+1Ch+var_1C], edi
.text:004074F7                 call    dword ptr [esi+1Ch]
.text:004074FA                 test    al, al
.text:004074FC                 jz      short loc_407541
.text:004074FE                 cmp     [esp+1Ch+var_D], 0
.text:00407503                 mov     edi, [ebx]
.text:00407505                 jz      short loc_407530
.text:00407507                 mov     ecx, [ebx+4]
.text:0040750A                 test    ecx, ecx
.text:0040750C                 jz      short loc_407539
.text:0040750E                 mov     eax, [ecx]
.text:00407510                 mov     edx, [ecx+4]
.text:00407513                 mov     [ebx], eax
.text:00407515                 mov     [ebx+4], edx
.text:00407518                 mov     ebx, [esi+24h]
.text:0040751B                 mov     dword ptr [ecx], 0
.text:00407521                 mov     [ecx+4], ebx
.text:00407524                 mov     [esi+24h], ecx
.text:00407527                 mov     esi, esi
.text:00407529                 lea     edi, [edi+0]
.text:00407530
.text:00407530 loc_407530:                             ; CODE XREF: sub_4074B0+55↑j
.text:00407530                                         ; sub_4074B0+8F↓j
.text:00407530                 mov     eax, edi
.text:00407532
.text:00407532 loc_407532:                             ; CODE XREF: sub_4074B0+3E↑j
.text:00407532                                         ; sub_4074B0+BC↓j ...
.text:00407532                 add     esp, 10h
.text:00407535                 pop     ebx
.text:00407536                 pop     esi
.text:00407537                 pop     edi
.text:00407538                 retn
.text:00407539 ; ---------------------------------------------------------------------------
.text:00407539
.text:00407539 loc_407539:                             ; CODE XREF: sub_4074B0+5C↑j
.text:00407539                 mov     dword ptr [ebx], 0
.text:0040753F                 jmp     short loc_407530
.text:00407541 ; ---------------------------------------------------------------------------
.text:00407541
.text:00407541 loc_407541:                             ; CODE XREF: sub_4074B0+4C↑j
.text:00407541                 mov     eax, [ebx+4]
.text:00407544                 test    eax, eax
.text:00407546                 jz      short loc_40756A
.text:00407548                 nop
.text:00407549                 lea     esi, [esi+0]
.text:00407550
.text:00407550 loc_407550:                             ; CODE XREF: sub_4074B0+B8↓j
.text:00407550                 mov     ecx, [eax]
.text:00407552                 mov     [esp+1Ch+var_1C], edi
.text:00407555                 mov     [esp+1Ch+var_18], ecx
.text:00407559                 call    dword ptr [esi+1Ch]
.text:0040755C                 test    al, al
.text:0040755E                 jnz     short loc_40756E
.text:00407560                 mov     ebx, [ebx+4]
.text:00407563                 mov     eax, [ebx+4]
.text:00407566                 test    eax, eax
.text:00407568                 jnz     short loc_407550
.text:0040756A
.text:0040756A loc_40756A:                             ; CODE XREF: sub_4074B0+96↑j
.text:0040756A                 xor     eax, eax
.text:0040756C                 jmp     short loc_407532
.text:0040756E ; ---------------------------------------------------------------------------
.text:0040756E
.text:0040756E loc_40756E:                             ; CODE XREF: sub_4074B0+AE↑j
.text:0040756E                 cmp     [esp+1Ch+var_D], 0
.text:00407573                 mov     edx, [ebx+4]
.text:00407576                 mov     ecx, [edx]
.text:00407578                 jz      short loc_40758F
.text:0040757A                 mov     dword ptr [edx], 0
.text:00407580                 mov     edi, [edx+4]
.text:00407583                 mov     [ebx+4], edi
.text:00407586                 mov     edi, [esi+24h]
.text:00407589                 mov     [edx+4], edi
.text:0040758C                 mov     [esi+24h], edx
.text:0040758F
.text:0040758F loc_40758F:                             ; CODE XREF: sub_4074B0+C8↑j
.text:0040758F                 mov     eax, ecx
.text:00407591                 jmp     short loc_407532
.text:00407593 ; ---------------------------------------------------------------------------
.text:00407593
.text:00407593 loc_407593:                             ; CODE XREF: sub_4074B0+2C↑j
.text:00407593                 call    abort
.text:00407593 sub_4074B0      endp
.text:00407593
.text:00407593 ; ---------------------------------------------------------------------------
.text:00407598                 db 18h dup(90h)
.text:004075B0 ; ---------------------------------------------------------------------------
.text:004075B0
.text:004075B0 loc_4075B0:                             ; DATA XREF: sub_407620+544↓o
.text:004075B0                 db      2Eh, 2Eh
.text:004075B0                 das
.text:004075B3                 db      2Eh, 2Eh
.text:004075B3                 das
.text:004075B6                 arpl    [edi+72h], bp
.text:004075B9                 db      65h
.text:004075B9                 jnz     short near ptr loc_40762B+5
.text:004075BC                 imul    ebp, [ebx+esi*2+2Dh], 2E332E35h
.text:004075C4                 xor     ds:2F637273h, ch
.text:004075CA                 insb
.text:004075CB                 imul    esp, [edx+2Fh], 72747378h
.text:004075D2                 jz      short near ptr loc_407640+3
.text:004075D4                 insb
.text:004075D5                 arpl    cs:[eax], ax
.text:004075D8                 nop
.text:004075D9                 nop
.text:004075DA                 nop
.text:004075DB                 nop
.text:004075DC                 nop
.text:004075DD                 nop
.text:004075DE                 nop
.text:004075DF                 nop
.text:004075E0                 nop
.text:004075E1                 nop
.text:004075E2                 nop
.text:004075E3                 nop
.text:004075E4                 nop
.text:004075E5                 nop
.text:004075E6                 nop
.text:004075E7                 nop
.text:004075E8                 nop
.text:004075E9                 nop
.text:004075EA                 nop
.text:004075EB                 nop
.text:004075EC                 nop
.text:004075ED                 nop
.text:004075EE                 nop
.text:004075EF                 nop
.text:004075F0
.text:004075F0 loc_4075F0:                             ; DATA XREF: sub_407620+54C↓o
.text:004075F0                 xor     [eax], ah
.text:004075F2                 cmp     al, 3Dh ; '='
.text:004075F4                 and     [ebx+74h], dh
.text:004075F7                 jb      short near ptr loc_40766B+2
.text:004075F9                 outsd
.text:004075FA                 insb
.text:004075FB                 pop     edi
.text:004075FC                 bound   esp, [ecx+73h]
.text:004075FF                 and     gs:[esi], ah
.text:00407602                 and     es:[ebx+74h], dh
.text:00407606                 jb      short loc_40767C
.text:00407608                 outsd
.text:00407609                 insb
.text:0040760A                 pop     edi
.text:0040760B                 bound   esp, [ecx+73h]
.text:0040760E                 and     gs:363320h[edi], bh
.text:00407616                 lea     esi, [esi+0]
.text:00407619                 lea     edi, [edi+0]
.text:00407620
.text:00407620 ; =============== S U B R O U T I N E =======================================
.text:00407620
.text:00407620
.text:00407620 ; int __cdecl sub_407620(int, int, int, int, char *Str)
.text:00407620 sub_407620      proc near               ; CODE XREF: sub_404360+36↑p
.text:00407620
.text:00407620 C               = dword ptr -3Ch
.text:00407620 Type            = dword ptr -38h
.text:00407620 Radix           = dword ptr -34h
.text:00407620 var_28          = dword ptr -28h
.text:00407620 var_24          = dword ptr -24h
.text:00407620 var_1D          = byte ptr -1Dh
.text:00407620 var_1C          = dword ptr -1Ch
.text:00407620 var_18          = dword ptr -18h
.text:00407620 var_14          = byte ptr -14h
.text:00407620 arg_0           = dword ptr  4
.text:00407620 arg_4           = dword ptr  8
.text:00407620 arg_8           = dword ptr  0Ch
.text:00407620 arg_C           = dword ptr  10h
.text:00407620 Str             = dword ptr  14h
.text:00407620
.text:00407620                 push    ebp
.text:00407621                 push    edi
.text:00407622                 push    esi
.text:00407623                 push    ebx
.text:00407624                 sub     esp, 2Ch
.text:00407627                 mov     ebp, [esp+3Ch+arg_8]
.text:0040762B
.text:0040762B loc_40762B:                             ; CODE XREF: .text:004075B9↑j
.text:0040762B                 mov     [esp+3Ch+var_1C], 0
.text:00407633                 mov     esi, [esp+3Ch+arg_0]
.text:00407637                 cmp     ebp, 24h ; '$'
.text:0040763A                 ja      loc_407B5C
.text:00407640
.text:00407640 loc_407640:                             ; CODE XREF: .text:004075D2↑j
.text:00407640                 mov     edi, [esp+3Ch+arg_4]
.text:00407644                 test    edi, edi
.text:00407646                 jz      loc_407B53
.text:0040764C
.text:0040764C loc_40764C:                             ; CODE XREF: sub_407620+537↓j
.text:0040764C                 movzx   edx, byte ptr [esi]
.text:0040764F                 mov     ebx, esi
.text:00407651                 mov     [esp+3Ch+var_1D], dl
.text:00407655                 lea     esi, [esi+0]
.text:00407659                 lea     edi, [edi+0]
.text:00407660
.text:00407660 loc_407660:                             ; CODE XREF: sub_407620+70↓j
.text:00407660                 movzx   edx, [esp+3Ch+var_1D]
.text:00407665                 mov     ecx, ds:__mb_cur_max
.text:0040766B
.text:0040766B loc_40766B:                             ; CODE XREF: .text:004075F7↑j
.text:0040766B                 cmp     dword ptr [ecx], 1
.text:0040766E                 jz      loc_407B40
.text:00407674                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040767C
.text:0040767C loc_40767C:                             ; CODE XREF: .text:00407606↑j
.text:0040767C                 mov     [esp+3Ch+C], edx ; C
.text:0040767F                 call    _isctype
.text:00407684
.text:00407684 loc_407684:                             ; CODE XREF: sub_407620+52E↓j
.text:00407684                 test    eax, eax
.text:00407686                 jz      short loc_407692
.text:00407688                 inc     ebx
.text:00407689                 movzx   eax, byte ptr [ebx]
.text:0040768C                 mov     [esp+3Ch+var_1D], al
.text:00407690                 jmp     short loc_407660
.text:00407692 ; ---------------------------------------------------------------------------
.text:00407692
.text:00407692 loc_407692:                             ; CODE XREF: sub_407620+66↑j
.text:00407692                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00407697                 mov     eax, 4
.text:0040769C                 jz      short loc_4076F5
.text:0040769E                 call    _errno
.text:004076A3                 mov     dword ptr [eax], 0
.text:004076A9                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:004076AD                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:004076B1                 mov     [esp+3Ch+C], esi ; String
.text:004076B4                 call    strtoul
.text:004076B9                 mov     [esp+3Ch+var_18], eax
.text:004076BD                 mov     eax, [edi]
.text:004076BF                 cmp     eax, esi
.text:004076C1                 jz      loc_407B0C
.text:004076C7                 call    _errno
.text:004076CC                 mov     ebp, [eax]
.text:004076CE                 test    ebp, ebp
.text:004076D0                 jnz     loc_407AEB
.text:004076D6
.text:004076D6 loc_4076D6:                             ; CODE XREF: sub_407620+4DD↓j
.text:004076D6                                         ; sub_407620+51A↓j
.text:004076D6                 mov     eax, [esp+3Ch+Str]
.text:004076DA                 test    eax, eax
.text:004076DC                 jz      short loc_4076E7
.text:004076DE                 mov     ecx, [edi]
.text:004076E0                 movzx   eax, byte ptr [ecx]
.text:004076E3                 test    al, al
.text:004076E5                 jnz     short loc_4076FD
.text:004076E7
.text:004076E7 loc_4076E7:                             ; CODE XREF: sub_407620+BC↑j
.text:004076E7                                         ; sub_407620+26C↓j ...
.text:004076E7                 mov     edx, [esp+3Ch+var_18]
.text:004076EB                 mov     esi, [esp+3Ch+arg_C]
.text:004076EF                 mov     eax, [esp+3Ch+var_1C]
.text:004076F3                 mov     [esi], edx
.text:004076F5
.text:004076F5 loc_4076F5:                             ; CODE XREF: sub_407620+7C↑j
.text:004076F5                                         ; sub_407620+112↓j ...
.text:004076F5                 add     esp, 2Ch
.text:004076F8                 pop     ebx
.text:004076F9                 pop     esi
.text:004076FA                 pop     edi
.text:004076FB                 pop     ebp
.text:004076FC                 retn
.text:004076FD ; ---------------------------------------------------------------------------
.text:004076FD
.text:004076FD loc_4076FD:                             ; CODE XREF: sub_407620+C5↑j
.text:004076FD                 mov     [esp+3Ch+var_24], 1
.text:00407705                 mov     edx, [esp+3Ch+Str]
.text:00407709                 movsx   esi, al
.text:0040770C                 mov     [esp+3Ch+Type], esi ; Val
.text:00407710                 mov     ebx, 400h
.text:00407715                 mov     [esp+3Ch+C], edx ; Str
.text:00407718                 call    strchr
.text:0040771D                 test    eax, eax
.text:0040771F                 jnz     short loc_407734
.text:00407721
.text:00407721 def_407784:                             ; CODE XREF: sub_407620+162↓j
.text:00407721                                         ; sub_407620+164↓j
.text:00407721                                         ; DATA XREF: ...
.text:00407721                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00407784 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00407725                 mov     ebx, [esp+3Ch+var_18]
.text:00407729                 mov     edi, [esp+3Ch+arg_C]
.text:0040772D                 or      eax, 2
.text:00407730                 mov     [edi], ebx
.text:00407732                 jmp     short loc_4076F5
.text:00407734 ; ---------------------------------------------------------------------------
.text:00407734
.text:00407734 loc_407734:                             ; CODE XREF: sub_407620+FF↑j
.text:00407734                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:0040773C                 mov     ebp, [esp+3Ch+Str]
.text:00407740                 mov     [esp+3Ch+C], ebp ; Str
.text:00407743                 call    strchr
.text:00407748                 test    eax, eax
.text:0040774A                 jz      loc_407AE0
.text:00407750                 mov     ecx, [edi]
.text:00407752                 mov     [esp+3Ch+var_28], ecx
.text:00407756                 movsx   eax, byte ptr [ecx+1]
.text:0040775A                 cmp     eax, 44h ; 'D'
.text:0040775D                 jz      loc_407AA9
.text:00407763                 cmp     eax, 44h ; 'D'
.text:00407766                 jg      loc_407ABB
.text:0040776C                 cmp     eax, 42h ; 'B'
.text:0040776F                 jz      loc_407AA9
.text:00407775
.text:00407775 loc_407775:                             ; CODE XREF: sub_407620+496↓j
.text:00407775                                         ; sub_407620+49E↓j ...
.text:00407775                 mov     esi, [esp+3Ch+var_28]
.text:00407779                 movsx   eax, byte ptr [esi]
.text:0040777C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040777F                 cmp     eax, 35h
.text:00407782                 ja      short def_407784 ; jumptable 00407784 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00407784                 jmp     ds:jpt_407784[eax*4] ; switch jump
.text:00407784 ; ---------------------------------------------------------------------------
.text:0040778B                 align 4
.text:0040778C jpt_407784      dd offset loc_4078AB, offset def_407784, offset def_407784
.text:0040778C                                         ; DATA XREF: sub_407620+164↑r
.text:0040778C                 dd offset loc_4078BB, offset def_407784, offset loc_4079AC ; jump table for switch statement
.text:0040778C                 dd offset def_407784, offset def_407784, offset def_407784
.text:0040778C                 dd offset loc_4079E9, offset def_407784, offset loc_407A1B
.text:0040778C                 dd offset def_407784, offset def_407784, offset loc_4078F5
.text:0040778C                 dd offset def_407784, offset def_407784, offset def_407784
.text:0040778C                 dd offset loc_407A59, offset def_407784, offset def_407784
.text:0040778C                 dd offset def_407784, offset def_407784, offset loc_407932
.text:0040778C                 dd offset loc_40796F, offset def_407784, offset def_407784
.text:0040778C                 dd offset def_407784, offset def_407784, offset def_407784
.text:0040778C                 dd offset def_407784, offset def_407784, offset loc_407864
.text:0040778C                 dd offset loc_407876, offset def_407784, offset def_407784
.text:0040778C                 dd offset def_407784, offset loc_4079AC, offset def_407784
.text:0040778C                 dd offset def_407784, offset def_407784, offset loc_4079E9
.text:0040778C                 dd offset def_407784, offset loc_407A1B, offset def_407784
.text:0040778C                 dd offset def_407784, offset def_407784, offset def_407784
.text:0040778C                 dd offset def_407784, offset def_407784, offset loc_407A59
.text:0040778C                 dd offset def_407784, offset def_407784, offset loc_407A96
.text:00407864 ; ---------------------------------------------------------------------------
.text:00407864
.text:00407864 loc_407864:                             ; CODE XREF: sub_407620+164↑j
.text:00407864                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:00407864                 mov     eax, [esp+3Ch+var_18] ; jumptable 00407784 case 98
.text:00407868                 cmp     eax, 7FFFFFh
.text:0040786D                 ja      short loc_40789C
.text:0040786F                 shl     eax, 9
.text:00407872
.text:00407872 loc_407872:                             ; CODE XREF: sub_407620+299↓j
.text:00407872                                         ; sub_407620+484↓j
.text:00407872                 mov     [esp+3Ch+var_18], eax
.text:00407876
.text:00407876 loc_407876:                             ; CODE XREF: sub_407620+164↑j
.text:00407876                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:00407876                 xor     eax, eax        ; jumptable 00407784 case 99
.text:00407878
.text:00407878 loc_407878:                             ; CODE XREF: sub_407620+289↓j
.text:00407878                                         ; sub_407620+2CA↓j ...
.text:00407878                 or      [esp+3Ch+var_1C], eax
.text:0040787C                 mov     ebp, [esp+3Ch+var_28]
.text:00407880                 mov     ecx, [esp+3Ch+var_24]
.text:00407884                 add     ebp, ecx
.text:00407886                 mov     [edi], ebp
.text:00407888                 cmp     byte ptr [ebp+0], 0
.text:0040788C                 jz      loc_4076E7
.text:00407892                 or      [esp+3Ch+var_1C], 2
.text:00407897                 jmp     loc_4076E7
.text:0040789C ; ---------------------------------------------------------------------------
.text:0040789C
.text:0040789C loc_40789C:                             ; CODE XREF: sub_407620+24D↑j
.text:0040789C                                         ; sub_407620+294↓j ...
.text:0040789C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:004078A4                 mov     eax, 1
.text:004078A9                 jmp     short loc_407878
.text:004078AB ; ---------------------------------------------------------------------------
.text:004078AB
.text:004078AB loc_4078AB:                             ; CODE XREF: sub_407620+164↑j
.text:004078AB                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:004078AB                 mov     eax, [esp+3Ch+var_18] ; jumptable 00407784 case 66
.text:004078AF                 cmp     eax, 3FFFFFh
.text:004078B4                 ja      short loc_40789C
.text:004078B6                 shl     eax, 0Ah
.text:004078B9                 jmp     short loc_407872
.text:004078BB ; ---------------------------------------------------------------------------
.text:004078BB
.text:004078BB loc_4078BB:                             ; CODE XREF: sub_407620+164↑j
.text:004078BB                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:004078BB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407784 case 69
.text:004078BF                 xor     ebp, ebp
.text:004078C1                 mov     esi, 5
.text:004078C6
.text:004078C6 loc_4078C6:                             ; CODE XREF: sub_407620+2C8↓j
.text:004078C6                 xor     edx, edx
.text:004078C8                 mov     eax, 0FFFFFFFFh
.text:004078CD                 div     ebx
.text:004078CF                 mov     edx, [ecx]
.text:004078D1                 cmp     eax, edx
.text:004078D3                 jnb     short loc_4078EC
.text:004078D5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004078DB                 mov     eax, 1
.text:004078E0
.text:004078E0 loc_4078E0:                             ; CODE XREF: sub_407620+2D3↓j
.text:004078E0                 dec     esi
.text:004078E1                 or      ebp, eax
.text:004078E3                 cmp     esi, 0FFFFFFFFh
.text:004078E6                 mov     eax, ebp
.text:004078E8                 jnz     short loc_4078C6
.text:004078EA                 jmp     short loc_407878
.text:004078EC ; ---------------------------------------------------------------------------
.text:004078EC
.text:004078EC loc_4078EC:                             ; CODE XREF: sub_407620+2B3↑j
.text:004078EC                 imul    edx, ebx
.text:004078EF                 xor     eax, eax
.text:004078F1                 mov     [ecx], edx
.text:004078F3                 jmp     short loc_4078E0
.text:004078F5 ; ---------------------------------------------------------------------------
.text:004078F5
.text:004078F5 loc_4078F5:                             ; CODE XREF: sub_407620+164↑j
.text:004078F5                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:004078F5                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407784 case 80
.text:004078F9                 xor     ebp, ebp
.text:004078FB                 mov     esi, 4
.text:00407900
.text:00407900 loc_407900:                             ; CODE XREF: sub_407620+302↓j
.text:00407900                 xor     edx, edx
.text:00407902                 mov     eax, 0FFFFFFFFh
.text:00407907                 div     ebx
.text:00407909                 mov     edx, [ecx]
.text:0040790B                 cmp     eax, edx
.text:0040790D                 jnb     short loc_407929
.text:0040790F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00407915                 mov     eax, 1
.text:0040791A
.text:0040791A loc_40791A:                             ; CODE XREF: sub_407620+310↓j
.text:0040791A                 dec     esi
.text:0040791B                 or      ebp, eax
.text:0040791D                 cmp     esi, 0FFFFFFFFh
.text:00407920                 mov     eax, ebp
.text:00407922                 jnz     short loc_407900
.text:00407924                 jmp     loc_407878
.text:00407929 ; ---------------------------------------------------------------------------
.text:00407929
.text:00407929 loc_407929:                             ; CODE XREF: sub_407620+2ED↑j
.text:00407929                 imul    edx, ebx
.text:0040792C                 xor     eax, eax
.text:0040792E                 mov     [ecx], edx
.text:00407930                 jmp     short loc_40791A
.text:00407932 ; ---------------------------------------------------------------------------
.text:00407932
.text:00407932 loc_407932:                             ; CODE XREF: sub_407620+164↑j
.text:00407932                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:00407932                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407784 case 89
.text:00407936                 xor     ebp, ebp
.text:00407938                 mov     esi, 7
.text:0040793D
.text:0040793D loc_40793D:                             ; CODE XREF: sub_407620+33F↓j
.text:0040793D                 xor     edx, edx
.text:0040793F                 mov     eax, 0FFFFFFFFh
.text:00407944                 div     ebx
.text:00407946                 mov     edx, [ecx]
.text:00407948                 cmp     eax, edx
.text:0040794A                 jnb     short loc_407966
.text:0040794C                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00407952                 mov     eax, 1
.text:00407957
.text:00407957 loc_407957:                             ; CODE XREF: sub_407620+34D↓j
.text:00407957                 dec     esi
.text:00407958                 or      ebp, eax
.text:0040795A                 cmp     esi, 0FFFFFFFFh
.text:0040795D                 mov     eax, ebp
.text:0040795F                 jnz     short loc_40793D
.text:00407961                 jmp     loc_407878
.text:00407966 ; ---------------------------------------------------------------------------
.text:00407966
.text:00407966 loc_407966:                             ; CODE XREF: sub_407620+32A↑j
.text:00407966                 imul    edx, ebx
.text:00407969                 xor     eax, eax
.text:0040796B                 mov     [ecx], edx
.text:0040796D                 jmp     short loc_407957
.text:0040796F ; ---------------------------------------------------------------------------
.text:0040796F
.text:0040796F loc_40796F:                             ; CODE XREF: sub_407620+164↑j
.text:0040796F                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:0040796F                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407784 case 90
.text:00407973                 xor     ebp, ebp
.text:00407975                 mov     esi, 6
.text:0040797A
.text:0040797A loc_40797A:                             ; CODE XREF: sub_407620+37C↓j
.text:0040797A                 xor     edx, edx
.text:0040797C                 mov     eax, 0FFFFFFFFh
.text:00407981                 div     ebx
.text:00407983                 mov     edx, [ecx]
.text:00407985                 cmp     eax, edx
.text:00407987                 jnb     short loc_4079A3
.text:00407989                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040798F                 mov     eax, 1
.text:00407994
.text:00407994 loc_407994:                             ; CODE XREF: sub_407620+38A↓j
.text:00407994                 dec     esi
.text:00407995                 or      ebp, eax
.text:00407997                 cmp     esi, 0FFFFFFFFh
.text:0040799A                 mov     eax, ebp
.text:0040799C                 jnz     short loc_40797A
.text:0040799E                 jmp     loc_407878
.text:004079A3 ; ---------------------------------------------------------------------------
.text:004079A3
.text:004079A3 loc_4079A3:                             ; CODE XREF: sub_407620+367↑j
.text:004079A3                 imul    edx, ebx
.text:004079A6                 xor     eax, eax
.text:004079A8                 mov     [ecx], edx
.text:004079AA                 jmp     short loc_407994
.text:004079AC ; ---------------------------------------------------------------------------
.text:004079AC
.text:004079AC loc_4079AC:                             ; CODE XREF: sub_407620+164↑j
.text:004079AC                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:004079AC                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407784 cases 71,103
.text:004079B0                 xor     ebp, ebp
.text:004079B2                 mov     esi, 2
.text:004079B7
.text:004079B7 loc_4079B7:                             ; CODE XREF: sub_407620+3B9↓j
.text:004079B7                 xor     edx, edx
.text:004079B9                 mov     eax, 0FFFFFFFFh
.text:004079BE                 div     ebx
.text:004079C0                 mov     edx, [ecx]
.text:004079C2                 cmp     eax, edx
.text:004079C4                 jnb     short loc_4079E0
.text:004079C6                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004079CC                 mov     eax, 1
.text:004079D1
.text:004079D1 loc_4079D1:                             ; CODE XREF: sub_407620+3C7↓j
.text:004079D1                 dec     esi
.text:004079D2                 or      ebp, eax
.text:004079D4                 cmp     esi, 0FFFFFFFFh
.text:004079D7                 mov     eax, ebp
.text:004079D9                 jnz     short loc_4079B7
.text:004079DB                 jmp     loc_407878
.text:004079E0 ; ---------------------------------------------------------------------------
.text:004079E0
.text:004079E0 loc_4079E0:                             ; CODE XREF: sub_407620+3A4↑j
.text:004079E0                 imul    edx, ebx
.text:004079E3                 xor     eax, eax
.text:004079E5                 mov     [ecx], edx
.text:004079E7                 jmp     short loc_4079D1
.text:004079E9 ; ---------------------------------------------------------------------------
.text:004079E9
.text:004079E9 loc_4079E9:                             ; CODE XREF: sub_407620+164↑j
.text:004079E9                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:004079E9                 xor     edx, edx        ; jumptable 00407784 cases 75,107
.text:004079EB                 mov     eax, 0FFFFFFFFh
.text:004079F0                 div     ebx
.text:004079F2                 mov     edx, [esp+3Ch+var_18]
.text:004079F6                 cmp     eax, edx
.text:004079F8                 jnb     short loc_407A10
.text:004079FA                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00407A02                 mov     edx, 1
.text:00407A07
.text:00407A07 loc_407A07:                             ; CODE XREF: sub_407620+3F9↓j
.text:00407A07                 xor     eax, eax
.text:00407A09                 or      eax, edx
.text:00407A0B                 jmp     loc_407878
.text:00407A10 ; ---------------------------------------------------------------------------
.text:00407A10
.text:00407A10 loc_407A10:                             ; CODE XREF: sub_407620+3D8↑j
.text:00407A10                 imul    edx, ebx
.text:00407A13                 mov     [esp+3Ch+var_18], edx
.text:00407A17                 xor     edx, edx
.text:00407A19                 jmp     short loc_407A07
.text:00407A1B ; ---------------------------------------------------------------------------
.text:00407A1B
.text:00407A1B loc_407A1B:                             ; CODE XREF: sub_407620+164↑j
.text:00407A1B                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:00407A1B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407784 cases 77,109
.text:00407A1F                 xor     ebp, ebp
.text:00407A21                 mov     esi, 1
.text:00407A26
.text:00407A26 loc_407A26:                             ; CODE XREF: sub_407620+42E↓j
.text:00407A26                 xor     edx, edx
.text:00407A28                 mov     eax, 0FFFFFFFFh
.text:00407A2D                 div     ebx
.text:00407A2F                 mov     edx, [ecx]
.text:00407A31                 cmp     eax, edx
.text:00407A33                 jnb     short loc_407A50
.text:00407A35                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00407A3B                 mov     eax, 1
.text:00407A40
.text:00407A40 loc_407A40:                             ; CODE XREF: sub_407620+437↓j
.text:00407A40                 dec     esi
.text:00407A41                 or      ebp, eax
.text:00407A43                 cmp     esi, 0FFFFFFFFh
.text:00407A46                 mov     eax, ebp
.text:00407A48                 jz      loc_407878
.text:00407A4E                 jmp     short loc_407A26
.text:00407A50 ; ---------------------------------------------------------------------------
.text:00407A50
.text:00407A50 loc_407A50:                             ; CODE XREF: sub_407620+413↑j
.text:00407A50                 imul    edx, ebx
.text:00407A53                 xor     eax, eax
.text:00407A55                 mov     [ecx], edx
.text:00407A57                 jmp     short loc_407A40
.text:00407A59 ; ---------------------------------------------------------------------------
.text:00407A59
.text:00407A59 loc_407A59:                             ; CODE XREF: sub_407620+164↑j
.text:00407A59                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:00407A59                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00407784 cases 84,116
.text:00407A5D                 xor     ebp, ebp
.text:00407A5F                 mov     esi, 3
.text:00407A64
.text:00407A64 loc_407A64:                             ; CODE XREF: sub_407620+466↓j
.text:00407A64                 xor     edx, edx
.text:00407A66                 mov     eax, 0FFFFFFFFh
.text:00407A6B                 div     ebx
.text:00407A6D                 mov     edx, [ecx]
.text:00407A6F                 cmp     eax, edx
.text:00407A71                 jnb     short loc_407A8D
.text:00407A73                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00407A79                 mov     eax, 1
.text:00407A7E
.text:00407A7E loc_407A7E:                             ; CODE XREF: sub_407620+474↓j
.text:00407A7E                 dec     esi
.text:00407A7F                 or      ebp, eax
.text:00407A81                 cmp     esi, 0FFFFFFFFh
.text:00407A84                 mov     eax, ebp
.text:00407A86                 jnz     short loc_407A64
.text:00407A88                 jmp     loc_407878
.text:00407A8D ; ---------------------------------------------------------------------------
.text:00407A8D
.text:00407A8D loc_407A8D:                             ; CODE XREF: sub_407620+451↑j
.text:00407A8D                 imul    edx, ebx
.text:00407A90                 xor     eax, eax
.text:00407A92                 mov     [ecx], edx
.text:00407A94                 jmp     short loc_407A7E
.text:00407A96 ; ---------------------------------------------------------------------------
.text:00407A96
.text:00407A96 loc_407A96:                             ; CODE XREF: sub_407620+164↑j
.text:00407A96                                         ; DATA XREF: sub_407620:jpt_407784↑o
.text:00407A96                 mov     eax, [esp+3Ch+var_18] ; jumptable 00407784 case 119
.text:00407A9A                 test    eax, eax
.text:00407A9C                 js      loc_40789C
.text:00407AA2                 add     eax, eax
.text:00407AA4                 jmp     loc_407872
.text:00407AA9 ; ---------------------------------------------------------------------------
.text:00407AA9
.text:00407AA9 loc_407AA9:                             ; CODE XREF: sub_407620+13D↑j
.text:00407AA9                                         ; sub_407620+14F↑j
.text:00407AA9                 mov     [esp+3Ch+var_24], 2
.text:00407AB1                 mov     ebx, 3E8h
.text:00407AB6                 jmp     loc_407775
.text:00407ABB ; ---------------------------------------------------------------------------
.text:00407ABB
.text:00407ABB loc_407ABB:                             ; CODE XREF: sub_407620+146↑j
.text:00407ABB                 cmp     eax, 69h ; 'i'
.text:00407ABE                 jnz     loc_407775
.text:00407AC4                 mov     edx, [esp+3Ch+var_28]
.text:00407AC8                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:00407ACC                 jnz     loc_407775
.text:00407AD2                 mov     [esp+3Ch+var_24], 3
.text:00407ADA                 jmp     loc_407775
.text:00407ADA ; ---------------------------------------------------------------------------
.text:00407ADF                 align 10h
.text:00407AE0
.text:00407AE0 loc_407AE0:                             ; CODE XREF: sub_407620+12A↑j
.text:00407AE0                 mov     eax, [edi]
.text:00407AE2                 mov     [esp+3Ch+var_28], eax
.text:00407AE6                 jmp     loc_407775
.text:00407AEB ; ---------------------------------------------------------------------------
.text:00407AEB
.text:00407AEB loc_407AEB:                             ; CODE XREF: sub_407620+B0↑j
.text:00407AEB                 call    _errno
.text:00407AF0                 cmp     dword ptr [eax], 22h ; '"'
.text:00407AF3                 jnz     short loc_407B02
.text:00407AF5                 mov     [esp+3Ch+var_1C], 1
.text:00407AFD                 jmp     loc_4076D6
.text:00407B02 ; ---------------------------------------------------------------------------
.text:00407B02
.text:00407B02 loc_407B02:                             ; CODE XREF: sub_407620+4D3↑j
.text:00407B02                                         ; sub_407620+4F2↓j ...
.text:00407B02                 mov     eax, 4
.text:00407B07                 jmp     loc_4076F5
.text:00407B0C ; ---------------------------------------------------------------------------
.text:00407B0C
.text:00407B0C loc_407B0C:                             ; CODE XREF: sub_407620+A1↑j
.text:00407B0C                 mov     edx, [esp+3Ch+Str]
.text:00407B10                 test    edx, edx
.text:00407B12                 jz      short loc_407B02
.text:00407B14                 movzx   eax, byte ptr [eax]
.text:00407B17                 test    al, al
.text:00407B19                 jz      short loc_407B02
.text:00407B1B                 mov     ebx, [esp+3Ch+Str]
.text:00407B1F                 movsx   esi, al
.text:00407B22                 mov     [esp+3Ch+Type], esi ; Val
.text:00407B26                 mov     [esp+3Ch+C], ebx ; Str
.text:00407B29                 call    strchr
.text:00407B2E                 test    eax, eax
.text:00407B30                 jz      short loc_407B02
.text:00407B32                 mov     [esp+3Ch+var_18], 1
.text:00407B3A                 jmp     loc_4076D6
.text:00407B3A ; ---------------------------------------------------------------------------
.text:00407B3F                 align 10h
.text:00407B40
.text:00407B40 loc_407B40:                             ; CODE XREF: sub_407620+4E↑j
.text:00407B40                 mov     eax, ds:_pctype
.text:00407B45                 mov     ecx, [eax]
.text:00407B47                 movzx   eax, word ptr [ecx+edx*2]
.text:00407B4B                 and     eax, 8
.text:00407B4E                 jmp     loc_407684
.text:00407B53 ; ---------------------------------------------------------------------------
.text:00407B53
.text:00407B53 loc_407B53:                             ; CODE XREF: sub_407620+26↑j
.text:00407B53                 lea     edi, [esp+3Ch+var_14]
.text:00407B57                 jmp     loc_40764C
.text:00407B5C ; ---------------------------------------------------------------------------
.text:00407B5C
.text:00407B5C loc_407B5C:                             ; CODE XREF: sub_407620+1A↑j
.text:00407B5C                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00407B64                 mov     [esp+3Ch+Type], offset loc_4075B0
.text:00407B6C                 mov     [esp+3Ch+C], offset loc_4075F0
.text:00407B73                 call    _assert
.text:00407B73 sub_407620      endp
.text:00407B73
.text:00407B73 ; ---------------------------------------------------------------------------
.text:00407B78                 db 18h dup(90h)
.text:00407B90 aLiteral        db 'literal',0          ; DATA XREF: .text:00407BD0↓o
.text:00407B98 aShell          db 'shell',0            ; DATA XREF: .text:00407BD4↓o
.text:00407B9E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00407BD8↓o
.text:00407BAB aC              db 'c',0                ; DATA XREF: .text:00407BDC↓o
.text:00407BAD aEscape         db 'escape',0           ; DATA XREF: .text:00407BE0↓o
.text:00407BB4 aLocale         db 'locale',0           ; DATA XREF: .text:00407BE4↓o
.text:00407BBB aClocale        db 'clocale',0          ; DATA XREF: .text:00407BE8↓o
.text:00407BC3                 db 8Dh, 0B6h, 4 dup(0)
.text:00407BC9                 db 8Dh, 0BCh, 27h, 4 dup(0)
.text:00407BD0                 dd offset aLiteral      ; "literal"
.text:00407BD4                 dd offset aShell        ; "shell"
.text:00407BD8                 dd offset aShellAlways  ; "shell-always"
.text:00407BDC                 dd offset aC            ; "c"
.text:00407BE0                 dd offset aEscape       ; "escape"
.text:00407BE4                 dd offset aLocale       ; "locale"
.text:00407BE8                 dd offset aClocale      ; "clocale"
.text:00407BEC                 dd 2 dup(0)
.text:00407BF4                 dd 1, 2, 3, 4, 5, 6
.text:00407C0C asc_407C0C:                             ; DATA XREF: sub_407C20+7E↓o
.text:00407C0C                                         ; sub_407C20+A39↓o ...
.text:00407C0C                 text "UTF-16LE", '"',27h,'`'
.text:00407C12                 align 10h
.text:00407C20
.text:00407C20 ; =============== S U B R O U T I N E =======================================
.text:00407C20
.text:00407C20
.text:00407C20 ; int __cdecl sub_407C20(int, int, char *Str, int, int, int)
.text:00407C20 sub_407C20      proc near               ; CODE XREF: sub_407C20+43A↓p
.text:00407C20                                         ; .text:004087E3↓p ...
.text:00407C20
.text:00407C20 C               = dword ptr -4Ch
.text:00407C20 Type            = dword ptr -48h
.text:00407C20 SizeInBytes     = dword ptr -44h
.text:00407C20 State           = dword ptr -40h
.text:00407C20 var_3C          = dword ptr -3Ch
.text:00407C20 var_38          = dword ptr -38h
.text:00407C20 var_34          = dword ptr -34h
.text:00407C20 var_30          = dword ptr -30h
.text:00407C20 var_29          = byte ptr -29h
.text:00407C20 var_28          = dword ptr -28h
.text:00407C20 var_22          = byte ptr -22h
.text:00407C20 var_21          = byte ptr -21h
.text:00407C20 var_20          = dword ptr -20h
.text:00407C20 var_1C          = dword ptr -1Ch
.text:00407C20 var_18          = mbstate_t ptr -18h
.text:00407C20 arg_0           = dword ptr  4
.text:00407C20 arg_4           = dword ptr  8
.text:00407C20 Str             = dword ptr  0Ch
.text:00407C20 arg_C           = dword ptr  10h
.text:00407C20 arg_10          = dword ptr  14h
.text:00407C20 arg_14          = dword ptr  18h
.text:00407C20
.text:00407C20                 push    ebp
.text:00407C21                 push    edi
.text:00407C22                 push    esi
.text:00407C23                 push    ebx
.text:00407C24                 sub     esp, 3Ch
.text:00407C27                 mov     edx, ds:__mb_cur_max
.text:00407C2D                 mov     [esp+4Ch+var_34], 0
.text:00407C35                 mov     [esp+4Ch+var_1C], 0
.text:00407C3D                 cmp     dword ptr [edx], 1
.text:00407C40                 mov     [esp+4Ch+var_20], 0
.text:00407C48                 mov     [esp+4Ch+var_21], 0
.text:00407C4D                 setz    [esp+4Ch+var_22]
.text:00407C52                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00407C57                 ja      short def_407C5D ; jumptable 00407C5D default case, cases 0,1
.text:00407C59                 mov     edx, [esp+4Ch+arg_10]
.text:00407C5D                 jmp     ds:jpt_407C5D[edx*4] ; switch jump
.text:00407C5D ; ---------------------------------------------------------------------------
.text:00407C64 jpt_407C5D      dd offset def_407C5D    ; DATA XREF: sub_407C20+3D↑r
.text:00407C64                 dd offset def_407C5D    ; jump table for switch statement
.text:00407C64                 dd offset loc_4085A5
.text:00407C64                 dd offset loc_407C80
.text:00407C64                 dd offset loc_4085CB
.text:00407C64                 dd offset loc_4085D5
.text:00407C64                 dd offset loc_4085D5
.text:00407C80 ; ---------------------------------------------------------------------------
.text:00407C80
.text:00407C80 loc_407C80:                             ; CODE XREF: sub_407C20+3D↑j
.text:00407C80                                         ; DATA XREF: sub_407C20:jpt_407C5D↑o
.text:00407C80                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00407C5D case 3
.text:00407C84                 cmp     [esp+4Ch+var_34], eax
.text:00407C88                 jnb     short loc_407C91
.text:00407C8A                 mov     ebx, [esp+4Ch+arg_0]
.text:00407C8E                 mov     byte ptr [ebx], 22h ; '"'
.text:00407C91
.text:00407C91 loc_407C91:                             ; CODE XREF: sub_407C20+68↑j
.text:00407C91                 mov     [esp+4Ch+var_34], 1
.text:00407C99                 mov     [esp+4Ch+var_21], 1
.text:00407C9E                 mov     [esp+4Ch+var_1C], offset asc_407C0C ; "\"'`"
.text:00407CA6
.text:00407CA6 loc_407CA6:                             ; CODE XREF: sub_407C20+9A6↓j
.text:00407CA6                 mov     [esp+4Ch+var_20], 1
.text:00407CAE
.text:00407CAE def_407C5D:                             ; CODE XREF: sub_407C20+37↑j
.text:00407CAE                                         ; sub_407C20+3D↑j ...
.text:00407CAE                 xor     ebp, ebp        ; jumptable 00407C5D default case, cases 0,1
.text:00407CB0
.text:00407CB0 loc_407CB0:                             ; CODE XREF: sub_407C20+3DB↓j
.text:00407CB0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407CB5                 jz      loc_408597
.text:00407CBB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00407CBF
.text:00407CBF loc_407CBF:                             ; CODE XREF: sub_407C20+980↓j
.text:00407CBF                 jz      loc_40852E
.text:00407CC5                 cmp     [esp+4Ch+var_21], 0
.text:00407CCA                 jz      short loc_407D10
.text:00407CCC                 mov     esi, [esp+4Ch+var_20]
.text:00407CD0                 test    esi, esi
.text:00407CD2                 jz      short loc_407D10
.text:00407CD4                 mov     ecx, [esp+4Ch+var_20]
.text:00407CD8                 lea     edi, [ecx+ebp]
.text:00407CDB                 cmp     edi, [esp+4Ch+arg_C]
.text:00407CDF                 ja      short loc_407D10
.text:00407CE1                 cld
.text:00407CE2                 mov     ebx, [esp+4Ch+Str]
.text:00407CE6                 mov     edi, [esp+4Ch+var_1C]
.text:00407CEA                 add     ebx, ebp
.text:00407CEC                 mov     esi, ebx
.text:00407CEE                 cmp     ecx, ecx
.text:00407CF0                 repe cmpsb
.text:00407CF2                 jnz     short loc_407D10
.text:00407CF4                 mov     edx, [esp+4Ch+arg_4]
.text:00407CF8                 cmp     [esp+4Ch+var_34], edx
.text:00407CFC                 jnb     short loc_407D0A
.text:00407CFE                 mov     ecx, [esp+4Ch+arg_0]
.text:00407D02                 mov     eax, [esp+4Ch+var_34]
.text:00407D06                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00407D0A
.text:00407D0A loc_407D0A:                             ; CODE XREF: sub_407C20+DC↑j
.text:00407D0A                 inc     [esp+4Ch+var_34]
.text:00407D0E                 mov     esi, esi
.text:00407D10
.text:00407D10 loc_407D10:                             ; CODE XREF: sub_407C20+AA↑j
.text:00407D10                                         ; sub_407C20+B2↑j ...
.text:00407D10                 mov     edi, [esp+4Ch+Str]
.text:00407D14                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00407D19                 movzx   eax, bl
.text:00407D1C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00407D1F                 ja      def_407D25      ; jumptable 00407D25 default case, cases 1-6,14-31,64
.text:00407D25                 jmp     ds:jpt_407D25[eax*4] ; switch jump
.text:00407D25 ; ---------------------------------------------------------------------------
.text:00407D2C jpt_407D25      dd offset loc_407F28, offset def_407D25, offset def_407D25
.text:00407D2C                                         ; DATA XREF: sub_407C20+105↑r
.text:00407D2C                 dd offset def_407D25, offset def_407D25, offset def_407D25 ; jump table for switch statement
.text:00407D2C                 dd offset def_407D25, offset loc_408000, offset loc_40801E
.text:00407D2C                 dd offset loc_408022, offset loc_408067, offset loc_40806B
.text:00407D2C                 dd offset loc_40806F, offset loc_408073, offset def_407D25
.text:00407D2C                 dd offset def_407D25, offset def_407D25, offset def_407D25
.text:00407D2C                 dd offset def_407D25, offset def_407D25, offset def_407D25
.text:00407D2C                 dd offset def_407D25, offset def_407D25, offset def_407D25
.text:00407D2C                 dd offset def_407D25, offset def_407D25, offset def_407D25
.text:00407D2C                 dd offset def_407D25, offset def_407D25, offset def_407D25
.text:00407D2C                 dd offset def_407D25, offset def_407D25, offset loc_4084F8
.text:00407D2C                 dd offset loc_4084F8, offset loc_4084F8, offset loc_40851A
.text:00407D2C                 dd offset loc_4084F8, offset def_408122, offset loc_4084F8
.text:00407D2C                 dd offset loc_408077, offset loc_4084F8, offset loc_4084F8
.text:00407D2C                 dd offset loc_4084F8, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset loc_4084F8
.text:00407D2C                 dd offset loc_4084F8, offset loc_4084F8, offset loc_4084F8
.text:00407D2C                 dd offset loc_4080DC, offset def_407D25, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset loc_4084F8, offset loc_4084F1
.text:00407D2C                 dd offset def_408122, offset loc_4084F8, offset def_408122
.text:00407D2C                 dd offset loc_4084F8, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset def_408122, offset def_408122, offset def_408122
.text:00407D2C                 dd offset loc_408508, offset loc_4084F8, offset loc_408508
.text:00407D2C                 dd offset loc_40851A
.text:00407F28 ; ---------------------------------------------------------------------------
.text:00407F28
.text:00407F28 loc_407F28:                             ; CODE XREF: sub_407C20+105↑j
.text:00407F28                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:00407F28                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407D25 case 0
.text:00407F2D                 lea     eax, [ebp+1]
.text:00407F30                 jz      loc_407FE0
.text:00407F36                 mov     esi, [esp+4Ch+arg_4]
.text:00407F3A                 cmp     [esp+4Ch+var_34], esi
.text:00407F3E                 jnb     short loc_407F4C
.text:00407F40                 mov     eax, [esp+4Ch+arg_0]
.text:00407F44                 mov     ebx, [esp+4Ch+var_34]
.text:00407F48                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00407F4C
.text:00407F4C loc_407F4C:                             ; CODE XREF: sub_407C20+31E↑j
.text:00407F4C                 inc     [esp+4Ch+var_34]
.text:00407F50                 mov     edx, [esp+4Ch+arg_4]
.text:00407F54                 cmp     [esp+4Ch+var_34], edx
.text:00407F58                 jnb     short loc_407F66
.text:00407F5A                 mov     edi, [esp+4Ch+arg_0]
.text:00407F5E                 mov     ecx, [esp+4Ch+var_34]
.text:00407F62                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00407F66
.text:00407F66 loc_407F66:                             ; CODE XREF: sub_407C20+338↑j
.text:00407F66                 inc     [esp+4Ch+var_34]
.text:00407F6A                 mov     esi, [esp+4Ch+arg_4]
.text:00407F6E                 cmp     [esp+4Ch+var_34], esi
.text:00407F72                 jnb     short loc_407F80
.text:00407F74                 mov     ebx, [esp+4Ch+arg_0]
.text:00407F78                 mov     eax, [esp+4Ch+var_34]
.text:00407F7C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00407F80
.text:00407F80 loc_407F80:                             ; CODE XREF: sub_407C20+352↑j
.text:00407F80                 inc     [esp+4Ch+var_34]
.text:00407F84                 mov     bl, 30h ; '0'
.text:00407F86                 lea     esi, [esi+0]
.text:00407F89                 lea     edi, [edi+0]
.text:00407F90
.text:00407F90 def_408122:                             ; CODE XREF: sub_407C20+105↑j
.text:00407F90                                         ; sub_407C20+463↓j ...
.text:00407F90                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:00407F90                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:00407F95                 lea     eax, [ebp+1]
.text:00407F98                 jz      short loc_407FE0
.text:00407F9A                 mov     cl, bl
.text:00407F9C                 mov     edi, [esp+4Ch+arg_14]
.text:00407FA0                 mov     esi, 1
.text:00407FA5                 shr     cl, 5
.text:00407FA8                 movzx   edx, cl
.text:00407FAB                 mov     ecx, ebx
.text:00407FAD                 and     ecx, 1Fh
.text:00407FB0                 shl     esi, cl
.text:00407FB2                 test    [edi+edx*4+4], esi
.text:00407FB6                 jz      short loc_407FD2
.text:00407FB8
.text:00407FB8 loc_407FB8:                             ; CODE XREF: sub_407C20+3FC↓j
.text:00407FB8                 mov     edx, [esp+4Ch+arg_4]
.text:00407FBC                 cmp     [esp+4Ch+var_34], edx
.text:00407FC0                 jnb     short loc_407FCE
.text:00407FC2                 mov     edi, [esp+4Ch+arg_0]
.text:00407FC6                 mov     esi, [esp+4Ch+var_34]
.text:00407FCA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00407FCE
.text:00407FCE loc_407FCE:                             ; CODE XREF: sub_407C20+3A0↑j
.text:00407FCE                 inc     [esp+4Ch+var_34]
.text:00407FD2
.text:00407FD2 loc_407FD2:                             ; CODE XREF: sub_407C20+396↑j
.text:00407FD2                 lea     eax, [ebp+1]
.text:00407FD5                 lea     esi, [esi+0]
.text:00407FD9                 lea     edi, [edi+0]
.text:00407FE0
.text:00407FE0 loc_407FE0:                             ; CODE XREF: sub_407C20+310↑j
.text:00407FE0                                         ; sub_407C20+378↑j ...
.text:00407FE0                 mov     ebp, [esp+4Ch+arg_4]
.text:00407FE4                 cmp     [esp+4Ch+var_34], ebp
.text:00407FE8                 jnb     short loc_407FF5
.text:00407FEA                 mov     edx, [esp+4Ch+arg_0]
.text:00407FEE                 mov     ecx, [esp+4Ch+var_34]
.text:00407FF2                 mov     [ecx+edx], bl
.text:00407FF5
.text:00407FF5 loc_407FF5:                             ; CODE XREF: sub_407C20+3C8↑j
.text:00407FF5                 inc     [esp+4Ch+var_34]
.text:00407FF9                 mov     ebp, eax
.text:00407FFB                 jmp     loc_407CB0
.text:00408000 ; ---------------------------------------------------------------------------
.text:00408000
.text:00408000 loc_408000:                             ; CODE XREF: sub_407C20+105↑j
.text:00408000                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:00408000                 mov     dl, 61h ; 'a'   ; jumptable 00407D25 case 7
.text:00408002                 lea     esi, [esi+0]
.text:00408009                 lea     edi, [edi+0]
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_407C20+400↓j
.text:00408010                                         ; sub_407C20+409↓j ...
.text:00408010                 cmp     [esp+4Ch+var_21], 0
.text:00408015                 lea     eax, [ebp+1]
.text:00408018                 jz      short loc_407FE0
.text:0040801A                 mov     bl, dl
.text:0040801C                 jmp     short loc_407FB8
.text:0040801E ; ---------------------------------------------------------------------------
.text:0040801E
.text:0040801E loc_40801E:                             ; CODE XREF: sub_407C20+105↑j
.text:0040801E                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:0040801E                 mov     dl, 62h ; 'b'   ; jumptable 00407D25 case 8
.text:00408020                 jmp     short loc_408010
.text:00408022 ; ---------------------------------------------------------------------------
.text:00408022
.text:00408022 loc_408022:                             ; CODE XREF: sub_407C20+105↑j
.text:00408022                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:00408022                 mov     dl, 74h ; 't'   ; jumptable 00407D25 case 9
.text:00408024
.text:00408024 loc_408024:                             ; CODE XREF: sub_407C20+449↓j
.text:00408024                                         ; sub_407C20+455↓j ...
.text:00408024                 cmp     [esp+4Ch+arg_10], 1
.text:00408029                 jnz     short loc_408010
.text:0040802B
.text:0040802B loc_40802B:                             ; CODE XREF: sub_407C20+45C↓j
.text:0040802B                                         ; sub_407C20+4C1↓j ...
.text:0040802B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004083F2 cases 91,92,94,96,124
.text:00408033                 mov     eax, [esp+4Ch+arg_14]
.text:00408037                 mov     edx, [esp+4Ch+arg_C]
.text:0040803B                 mov     ecx, [esp+4Ch+Str]
.text:0040803F                 mov     ebx, [esp+4Ch+arg_4]
.text:00408043                 mov     [esp+4Ch+var_38], eax ; int
.text:00408047                 mov     ebp, [esp+4Ch+arg_0]
.text:0040804B                 mov     [esp+4Ch+State], edx ; int
.text:0040804F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00408053                 mov     [esp+4Ch+Type], ebx ; int
.text:00408057                 mov     [esp+4Ch+C], ebp ; int
.text:0040805A                 call    sub_407C20
.text:0040805F
.text:0040805F loc_40805F:                             ; CODE XREF: sub_407C20+972↓j
.text:0040805F                 add     esp, 3Ch
.text:00408062                 pop     ebx
.text:00408063                 pop     esi
.text:00408064                 pop     edi
.text:00408065                 pop     ebp
.text:00408066                 retn
.text:00408067 ; ---------------------------------------------------------------------------
.text:00408067
.text:00408067 loc_408067:                             ; CODE XREF: sub_407C20+105↑j
.text:00408067                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:00408067                 mov     dl, 6Eh ; 'n'   ; jumptable 00407D25 case 10
.text:00408069                 jmp     short loc_408024
.text:0040806B ; ---------------------------------------------------------------------------
.text:0040806B
.text:0040806B loc_40806B:                             ; CODE XREF: sub_407C20+105↑j
.text:0040806B                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:0040806B                 mov     dl, 76h ; 'v'   ; jumptable 00407D25 case 11
.text:0040806D                 jmp     short loc_408010
.text:0040806F ; ---------------------------------------------------------------------------
.text:0040806F
.text:0040806F loc_40806F:                             ; CODE XREF: sub_407C20+105↑j
.text:0040806F                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:0040806F                 mov     dl, 66h ; 'f'   ; jumptable 00407D25 case 12
.text:00408071                 jmp     short loc_408010
.text:00408073 ; ---------------------------------------------------------------------------
.text:00408073
.text:00408073 loc_408073:                             ; CODE XREF: sub_407C20+105↑j
.text:00408073                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:00408073                 mov     dl, 72h ; 'r'   ; jumptable 00407D25 case 13
.text:00408075                 jmp     short loc_408024
.text:00408077 ; ---------------------------------------------------------------------------
.text:00408077
.text:00408077 loc_408077:                             ; CODE XREF: sub_407C20+105↑j
.text:00408077                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:00408077                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407D25 case 39
.text:0040807C                 jz      short loc_40802B ; jumptable 004083F2 cases 91,92,94,96,124
.text:0040807E                 cmp     [esp+4Ch+arg_10], 2
.text:00408083                 jnz     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:00408083                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:00408089                 mov     edx, [esp+4Ch+arg_4]
.text:0040808D                 cmp     [esp+4Ch+var_34], edx
.text:00408091                 jnb     short loc_40809F
.text:00408093                 mov     ecx, [esp+4Ch+arg_0]
.text:00408097                 mov     edi, [esp+4Ch+var_34]
.text:0040809B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040809F
.text:0040809F loc_40809F:                             ; CODE XREF: sub_407C20+471↑j
.text:0040809F                 inc     [esp+4Ch+var_34]
.text:004080A3                 mov     eax, [esp+4Ch+arg_4]
.text:004080A7                 cmp     [esp+4Ch+var_34], eax
.text:004080AB                 jnb     short loc_4080B9
.text:004080AD                 mov     esi, [esp+4Ch+arg_0]
.text:004080B1                 mov     edx, [esp+4Ch+var_34]
.text:004080B5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004080B9
.text:004080B9 loc_4080B9:                             ; CODE XREF: sub_407C20+48B↑j
.text:004080B9                 inc     [esp+4Ch+var_34]
.text:004080BD                 mov     edi, [esp+4Ch+arg_4]
.text:004080C1                 cmp     [esp+4Ch+var_34], edi
.text:004080C5                 jnb     short loc_4080D3
.text:004080C7                 mov     ecx, [esp+4Ch+arg_0]
.text:004080CB                 mov     eax, [esp+4Ch+var_34]
.text:004080CF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004080D3
.text:004080D3 loc_4080D3:                             ; CODE XREF: sub_407C20+4A5↑j
.text:004080D3                                         ; sub_407C20+5C4↓j ...
.text:004080D3                 inc     [esp+4Ch+var_34]
.text:004080D7                 jmp     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:004080D7                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:004080DC ; ---------------------------------------------------------------------------
.text:004080DC
.text:004080DC loc_4080DC:                             ; CODE XREF: sub_407C20+105↑j
.text:004080DC                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:004080DC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407D25 case 63
.text:004080E1                 jz      loc_40802B      ; jumptable 004083F2 cases 91,92,94,96,124
.text:004080E7                 cmp     [esp+4Ch+arg_10], 3
.text:004080EC                 jnz     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:004080EC                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:004080F2                 lea     edx, [ebp+2]
.text:004080F5                 cmp     edx, [esp+4Ch+arg_C]
.text:004080F9                 jnb     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:004080F9                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:004080FF                 mov     esi, [esp+4Ch+Str]
.text:00408103                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00408108                 jnz     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:00408108                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:0040810E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00408113                 movsx   eax, cl
.text:00408116                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00408119                 cmp     eax, 1Dh
.text:0040811C                 ja      def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:0040811C                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:00408122                 jmp     ds:jpt_408122[eax*4] ; switch jump
.text:00408122 ; ---------------------------------------------------------------------------
.text:00408129                 align 4
.text:0040812C jpt_408122      dd offset loc_4081A4    ; DATA XREF: sub_407C20+502↑r
.text:0040812C                 dd offset def_408122    ; jump table for switch statement
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset loc_4081A4
.text:0040812C                 dd offset loc_4081A4
.text:0040812C                 dd offset loc_4081A4
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset loc_4081A4
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset loc_4081A4
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset def_408122
.text:0040812C                 dd offset loc_4081A4
.text:0040812C                 dd offset loc_4081A4
.text:0040812C                 dd offset loc_4081A4
.text:004081A4 ; ---------------------------------------------------------------------------
.text:004081A4
.text:004081A4 loc_4081A4:                             ; CODE XREF: sub_407C20+502↑j
.text:004081A4                                         ; DATA XREF: sub_407C20:jpt_408122↑o
.text:004081A4                 mov     ebp, edx        ; jumptable 00408122 cases 33,39-41,45,47,60-62
.text:004081A6                 mov     bl, cl
.text:004081A8                 mov     edx, [esp+4Ch+arg_4]
.text:004081AC                 cmp     [esp+4Ch+var_34], edx
.text:004081B0                 jnb     short loc_4081BE
.text:004081B2                 mov     ecx, [esp+4Ch+arg_0]
.text:004081B6                 mov     edi, [esp+4Ch+var_34]
.text:004081BA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004081BE
.text:004081BE loc_4081BE:                             ; CODE XREF: sub_407C20+590↑j
.text:004081BE                 inc     [esp+4Ch+var_34]
.text:004081C2                 mov     eax, [esp+4Ch+arg_4]
.text:004081C6                 cmp     [esp+4Ch+var_34], eax
.text:004081CA                 jnb     short loc_4081D8
.text:004081CC                 mov     edx, [esp+4Ch+arg_0]
.text:004081D0                 mov     esi, [esp+4Ch+var_34]
.text:004081D4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004081D8
.text:004081D8 loc_4081D8:                             ; CODE XREF: sub_407C20+5AA↑j
.text:004081D8                 inc     [esp+4Ch+var_34]
.text:004081DC                 mov     edi, [esp+4Ch+arg_4]
.text:004081E0                 cmp     [esp+4Ch+var_34], edi
.text:004081E4                 jnb     loc_4080D3
.text:004081EA                 mov     eax, [esp+4Ch+arg_0]
.text:004081EE                 mov     ecx, [esp+4Ch+var_34]
.text:004081F2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004081F6                 jmp     loc_4080D3
.text:004081F6 ; ---------------------------------------------------------------------------
.text:004081FB                 align 10h
.text:00408200
.text:00408200 def_407D25:                             ; CODE XREF: sub_407C20+FF↑j
.text:00408200                                         ; sub_407C20+105↑j
.text:00408200                                         ; DATA XREF: ...
.text:00408200                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00407D25 default case, cases 1-6,14-31,64
.text:00408205                 jz      loc_408330
.text:0040820B                 mov     [esp+4Ch+var_28], 1
.text:00408213                 mov     esi, ds:__mb_cur_max
.text:00408219                 movzx   edx, bl
.text:0040821C                 cmp     dword ptr [esi], 1
.text:0040821F                 jz      loc_408314
.text:00408225                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040822D                 mov     [esp+4Ch+C], edx ; C
.text:00408230                 call    _isctype
.text:00408235
.text:00408235 loc_408235:                             ; CODE XREF: sub_407C20+705↓j
.text:00408235                 test    eax, eax
.text:00408237                 setnz   [esp+4Ch+var_29]
.text:0040823C
.text:0040823C loc_40823C:                             ; CODE XREF: sub_407C20+7A5↓j
.text:0040823C                 cmp     [esp+4Ch+var_21], 0
.text:00408241                 lea     eax, [ebp+1]
.text:00408244                 jz      loc_407FE0
.text:0040824A                 cmp     [esp+4Ch+var_29], 0
.text:0040824F                 jnz     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:0040824F                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:00408255
.text:00408255 loc_408255:                             ; CODE XREF: sub_407C20+7AB↓j
.text:00408255                 mov     eax, [esp+4Ch+var_28]
.text:00408259                 lea     edx, [eax+ebp]
.text:0040825C                 lea     esi, [esi+0]
.text:00408260
.text:00408260 loc_408260:                             ; CODE XREF: sub_407C20+6EF↓j
.text:00408260                 cmp     [esp+4Ch+var_21], 0
.text:00408265                 jz      short loc_4082E0
.text:00408267                 cmp     [esp+4Ch+var_29], 0
.text:0040826C                 jnz     short loc_4082E0
.text:0040826E                 mov     edi, [esp+4Ch+arg_4]
.text:00408272                 cmp     [esp+4Ch+var_34], edi
.text:00408276                 jnb     short loc_408284
.text:00408278                 mov     esi, [esp+4Ch+arg_0]
.text:0040827C                 mov     eax, [esp+4Ch+var_34]
.text:00408280                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00408284
.text:00408284 loc_408284:                             ; CODE XREF: sub_407C20+656↑j
.text:00408284                 inc     [esp+4Ch+var_34]
.text:00408288                 mov     ecx, [esp+4Ch+arg_4]
.text:0040828C                 cmp     [esp+4Ch+var_34], ecx
.text:00408290                 jnb     short loc_4082A5
.text:00408292                 mov     cl, bl
.text:00408294                 mov     esi, [esp+4Ch+arg_0]
.text:00408298                 mov     edi, [esp+4Ch+var_34]
.text:0040829C                 shr     cl, 6
.text:0040829F                 add     cl, 30h ; '0'
.text:004082A2                 mov     [edi+esi], cl
.text:004082A5
.text:004082A5 loc_4082A5:                             ; CODE XREF: sub_407C20+670↑j
.text:004082A5                 inc     [esp+4Ch+var_34]
.text:004082A9                 mov     edi, [esp+4Ch+arg_4]
.text:004082AD                 cmp     [esp+4Ch+var_34], edi
.text:004082B1                 jnb     short loc_4082C9
.text:004082B3                 mov     cl, bl
.text:004082B5                 mov     esi, [esp+4Ch+arg_0]
.text:004082B9                 shr     cl, 3
.text:004082BC                 mov     edi, [esp+4Ch+var_34]
.text:004082C0                 and     cl, 7
.text:004082C3                 add     cl, 30h ; '0'
.text:004082C6                 mov     [edi+esi], cl
.text:004082C9
.text:004082C9 loc_4082C9:                             ; CODE XREF: sub_407C20+691↑j
.text:004082C9                 inc     [esp+4Ch+var_34]
.text:004082CD                 and     bl, 7
.text:004082D0                 add     bl, 30h ; '0'
.text:004082D3                 lea     esi, [esi+0]
.text:004082D9                 lea     edi, [edi+0]
.text:004082E0
.text:004082E0 loc_4082E0:                             ; CODE XREF: sub_407C20+645↑j
.text:004082E0                                         ; sub_407C20+64C↑j
.text:004082E0                 lea     eax, [ebp+1]
.text:004082E3                 cmp     edx, eax
.text:004082E5                 jbe     loc_407FE0
.text:004082EB                 mov     ebp, [esp+4Ch+arg_4]
.text:004082EF                 cmp     [esp+4Ch+var_34], ebp
.text:004082F3                 jnb     short loc_408300
.text:004082F5                 mov     ecx, [esp+4Ch+arg_0]
.text:004082F9                 mov     edi, [esp+4Ch+var_34]
.text:004082FD                 mov     [edi+ecx], bl
.text:00408300
.text:00408300 loc_408300:                             ; CODE XREF: sub_407C20+6D3↑j
.text:00408300                 inc     [esp+4Ch+var_34]
.text:00408304                 mov     ebp, eax
.text:00408306                 mov     eax, [esp+4Ch+Str]
.text:0040830A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040830F                 jmp     loc_408260
.text:00408314 ; ---------------------------------------------------------------------------
.text:00408314
.text:00408314 loc_408314:                             ; CODE XREF: sub_407C20+5FF↑j
.text:00408314                 mov     ecx, ds:_pctype
.text:0040831A                 mov     edi, [ecx]
.text:0040831C                 movzx   eax, word ptr [edi+edx*2]
.text:00408320                 and     eax, 157h
.text:00408325                 jmp     loc_408235
.text:00408325 ; ---------------------------------------------------------------------------
.text:0040832A                 align 10h
.text:00408330
.text:00408330 loc_408330:                             ; CODE XREF: sub_407C20+5E5↑j
.text:00408330                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00408335                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040833D                 mov     [esp+4Ch+var_28], 0
.text:00408345                 mov     [esp+4Ch+var_29], 1
.text:0040834A                 jz      loc_4084DC
.text:00408350
.text:00408350 loc_408350:                             ; CODE XREF: sub_407C20+8CC↓j
.text:00408350                 mov     ecx, [esp+4Ch+arg_C]
.text:00408354                 lea     edx, [esp+4Ch+var_18]
.text:00408358                 mov     edi, [esp+4Ch+Str]
.text:0040835C                 mov     [esp+4Ch+State], edx ; State
.text:00408360                 lea     esi, [esp+4Ch+var_18._State]
.text:00408364                 sub     ecx, ebp
.text:00408366                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040836A                 add     edi, ebp
.text:0040836C                 mov     [esp+4Ch+var_30], edi
.text:00408370                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00408374                 mov     [esp+4Ch+C], esi ; DstCh
.text:00408377                 call    mbrtowc
.text:0040837C                 test    eax, eax
.text:0040837E                 mov     edi, eax
.text:00408380                 jz      short loc_4083C0
.text:00408382                 cmp     eax, 0FFFFFFFFh
.text:00408385                 jz      loc_4084D2
.text:0040838B                 cmp     eax, 0FFFFFFFEh
.text:0040838E                 jz      loc_408492
.text:00408394                 cmp     [esp+4Ch+arg_10], 1
.text:00408399                 jz      short loc_4083D0
.text:0040839B
.text:0040839B loc_40839B:                             ; CODE XREF: sub_407C20+7B9↓j
.text:0040839B                                         ; sub_407C20+86D↓j
.text:0040839B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004083A0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004083A8                 mov     [esp+4Ch+C], ecx ; C
.text:004083AB                 call    iswctype
.text:004083B0                 test    eax, eax
.text:004083B2                 jnz     short loc_4083B9
.text:004083B4                 mov     [esp+4Ch+var_29], 0
.text:004083B9
.text:004083B9 loc_4083B9:                             ; CODE XREF: sub_407C20+792↑j
.text:004083B9                 mov     [esp+4Ch+var_28], edi
.text:004083BD                 lea     esi, [esi+0]
.text:004083C0
.text:004083C0 loc_4083C0:                             ; CODE XREF: sub_407C20+760↑j
.text:004083C0                                         ; sub_407C20+87B↓j ...
.text:004083C0                 cmp     [esp+4Ch+var_28], 1
.text:004083C5                 jbe     loc_40823C
.text:004083CB                 jmp     loc_408255
.text:004083D0 ; ---------------------------------------------------------------------------
.text:004083D0
.text:004083D0 loc_4083D0:                             ; CODE XREF: sub_407C20+779↑j
.text:004083D0                 cmp     [esp+4Ch+arg_10], eax
.text:004083D4                 mov     edx, 1
.text:004083D9                 jnb     short loc_40839B
.text:004083DB
.text:004083DB loc_4083DB:                             ; CODE XREF: sub_407C20+867↓j
.text:004083DB                 mov     ecx, [esp+4Ch+Str]
.text:004083DF                 lea     esi, [edx+ebp]
.text:004083E2                 movsx   eax, byte ptr [esi+ecx]
.text:004083E6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004083E9                 cmp     eax, 21h
.text:004083EC                 ja      def_4083F2      ; jumptable 004083F2 default case, cases 93,95,97-123
.text:004083F2                 jmp     ds:jpt_4083F2[eax*4] ; switch jump
.text:004083F2 ; ---------------------------------------------------------------------------
.text:004083F9                 align 4
.text:004083FC jpt_4083F2      dd offset loc_40802B    ; DATA XREF: sub_407C20+7D2↑r
.text:004083FC                 dd offset loc_40802B    ; jump table for switch statement
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset loc_40802B
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset loc_40802B
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset def_4083F2
.text:004083FC                 dd offset loc_40802B
.text:00408484 ; ---------------------------------------------------------------------------
.text:00408484
.text:00408484 def_4083F2:                             ; CODE XREF: sub_407C20+7CC↑j
.text:00408484                                         ; sub_407C20+7D2↑j
.text:00408484                                         ; DATA XREF: ...
.text:00408484                 inc     edx             ; jumptable 004083F2 default case, cases 93,95,97-123
.text:00408485                 cmp     edx, edi
.text:00408487                 jb      loc_4083DB
.text:0040848D                 jmp     loc_40839B
.text:00408492 ; ---------------------------------------------------------------------------
.text:00408492
.text:00408492 loc_408492:                             ; CODE XREF: sub_407C20+76E↑j
.text:00408492                 cmp     ebp, [esp+4Ch+arg_C]
.text:00408496                 mov     [esp+4Ch+var_29], 0
.text:0040849B                 jnb     loc_4083C0
.text:004084A1                 mov     eax, [esp+4Ch+var_30]
.text:004084A5                 cmp     byte ptr [eax], 0
.text:004084A8                 jz      loc_4083C0
.text:004084AE
.text:004084AE loc_4084AE:                             ; CODE XREF: sub_407C20+8AB↓j
.text:004084AE                 inc     [esp+4Ch+var_28]
.text:004084B2                 mov     esi, [esp+4Ch+var_28]
.text:004084B6                 lea     eax, [esi+ebp]
.text:004084B9                 cmp     eax, [esp+4Ch+arg_C]
.text:004084BD                 jnb     loc_4083C0
.text:004084C3                 mov     edi, [esp+4Ch+Str]
.text:004084C7                 cmp     byte ptr [eax+edi], 0
.text:004084CB                 jnz     short loc_4084AE
.text:004084CD                 jmp     loc_4083C0
.text:004084D2 ; ---------------------------------------------------------------------------
.text:004084D2
.text:004084D2 loc_4084D2:                             ; CODE XREF: sub_407C20+765↑j
.text:004084D2                 mov     [esp+4Ch+var_29], 0
.text:004084D7                 jmp     loc_4083C0
.text:004084DC ; ---------------------------------------------------------------------------
.text:004084DC
.text:004084DC loc_4084DC:                             ; CODE XREF: sub_407C20+72A↑j
.text:004084DC                 mov     edx, [esp+4Ch+Str]
.text:004084E0                 mov     [esp+4Ch+C], edx ; Str
.text:004084E3                 call    strlen
.text:004084E8                 mov     [esp+4Ch+arg_C], eax
.text:004084EC                 jmp     loc_408350
.text:004084F1 ; ---------------------------------------------------------------------------
.text:004084F1
.text:004084F1 loc_4084F1:                             ; CODE XREF: sub_407C20+105↑j
.text:004084F1                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:004084F1                 mov     dl, bl          ; jumptable 00407D25 case 92
.text:004084F3                 jmp     loc_408024
.text:004084F8 ; ---------------------------------------------------------------------------
.text:004084F8
.text:004084F8 loc_4084F8:                             ; CODE XREF: sub_407C20+105↑j
.text:004084F8                                         ; sub_407C20+902↓j
.text:004084F8                                         ; DATA XREF: ...
.text:004084F8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407D25 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004084FD                 jnz     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:004084FD                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:00408503                 jmp     loc_40802B      ; jumptable 004083F2 cases 91,92,94,96,124
.text:00408508 ; ---------------------------------------------------------------------------
.text:00408508
.text:00408508 loc_408508:                             ; CODE XREF: sub_407C20+105↑j
.text:00408508                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:00408508                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00407D25 cases 123,125
.text:0040850D                 jz      short loc_408524
.text:0040850F                 cmp     [esp+4Ch+arg_C], 1
.text:00408514
.text:00408514 loc_408514:                             ; CODE XREF: sub_407C20+90C↓j
.text:00408514                 jnz     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:00408514                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:0040851A
.text:0040851A loc_40851A:                             ; CODE XREF: sub_407C20+105↑j
.text:0040851A                                         ; DATA XREF: sub_407C20:jpt_407D25↑o
.text:0040851A                 test    ebp, ebp        ; jumptable 00407D25 cases 35,126
.text:0040851C                 jnz     def_408122      ; jumptable 00407D25 cases 37,43-58,65-90,93,95,97-122
.text:0040851C                                         ; jumptable 00408122 default case, cases 34-38,42-44,46,48-59
.text:00408522                 jmp     short loc_4084F8 ; jumptable 00407D25 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00408524 ; ---------------------------------------------------------------------------
.text:00408524
.text:00408524 loc_408524:                             ; CODE XREF: sub_407C20+8ED↑j
.text:00408524                 mov     esi, [esp+4Ch+Str]
.text:00408528                 cmp     byte ptr [esi+1], 0
.text:0040852C                 jmp     short loc_408514
.text:0040852E ; ---------------------------------------------------------------------------
.text:0040852E
.text:0040852E loc_40852E:                             ; CODE XREF: sub_407C20:loc_407CBF↑j
.text:0040852E                 test    ebp, ebp
.text:00408530                 jnz     short loc_40853D
.text:00408532                 cmp     [esp+4Ch+arg_10], 1
.text:00408537                 jz      loc_40802B      ; jumptable 004083F2 cases 91,92,94,96,124
.text:0040853D
.text:0040853D loc_40853D:                             ; CODE XREF: sub_407C20+910↑j
.text:0040853D                 mov     esi, [esp+4Ch+var_1C]
.text:00408541                 test    esi, esi
.text:00408543                 jz      short loc_408578
.text:00408545                 mov     edi, [esp+4Ch+var_1C]
.text:00408549                 movzx   eax, byte ptr [edi]
.text:0040854C                 test    al, al
.text:0040854E                 jz      short loc_408578
.text:00408550
.text:00408550 loc_408550:                             ; CODE XREF: sub_407C20+956↓j
.text:00408550                 mov     ebp, [esp+4Ch+arg_4]
.text:00408554                 cmp     [esp+4Ch+var_34], ebp
.text:00408558                 jnb     short loc_408565
.text:0040855A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040855E                 mov     ebx, [esp+4Ch+var_34]
.text:00408562                 mov     [ebx+ecx], al
.text:00408565
.text:00408565 loc_408565:                             ; CODE XREF: sub_407C20+938↑j
.text:00408565                 inc     [esp+4Ch+var_1C]
.text:00408569                 inc     [esp+4Ch+var_34]
.text:0040856D                 mov     edx, [esp+4Ch+var_1C]
.text:00408571                 movzx   eax, byte ptr [edx]
.text:00408574                 test    al, al
.text:00408576                 jnz     short loc_408550
.text:00408578
.text:00408578 loc_408578:                             ; CODE XREF: sub_407C20+923↑j
.text:00408578                                         ; sub_407C20+92E↑j
.text:00408578                 mov     eax, [esp+4Ch+arg_4]
.text:0040857C                 cmp     [esp+4Ch+var_34], eax
.text:00408580                 jnb     short loc_40858E
.text:00408582                 mov     edi, [esp+4Ch+arg_0]
.text:00408586                 mov     esi, [esp+4Ch+var_34]
.text:0040858A                 mov     byte ptr [esi+edi], 0
.text:0040858E
.text:0040858E loc_40858E:                             ; CODE XREF: sub_407C20+960↑j
.text:0040858E                 mov     eax, [esp+4Ch+var_34]
.text:00408592                 jmp     loc_40805F
.text:00408597 ; ---------------------------------------------------------------------------
.text:00408597
.text:00408597 loc_408597:                             ; CODE XREF: sub_407C20+95↑j
.text:00408597                 mov     ebx, [esp+4Ch+Str]
.text:0040859B                 cmp     byte ptr [ebp+ebx+0], 0
.text:004085A0                 jmp     loc_407CBF
.text:004085A5 ; ---------------------------------------------------------------------------
.text:004085A5
.text:004085A5 loc_4085A5:                             ; CODE XREF: sub_407C20+3D↑j
.text:004085A5                                         ; DATA XREF: sub_407C20:jpt_407C5D↑o
.text:004085A5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00407C5D case 2
.text:004085A9                 cmp     [esp+4Ch+var_34], edx
.text:004085AD                 jnb     short loc_4085B6
.text:004085AF                 mov     ecx, [esp+4Ch+arg_0]
.text:004085B3                 mov     byte ptr [ecx], 27h ; '''
.text:004085B6
.text:004085B6 loc_4085B6:                             ; CODE XREF: sub_407C20+98D↑j
.text:004085B6                 mov     [esp+4Ch+var_34], 1
.text:004085BE                 mov     [esp+4Ch+var_1C], 407C0Eh
.text:004085C6                 jmp     loc_407CA6
.text:004085CB ; ---------------------------------------------------------------------------
.text:004085CB
.text:004085CB loc_4085CB:                             ; CODE XREF: sub_407C20+3D↑j
.text:004085CB                                         ; DATA XREF: sub_407C20:jpt_407C5D↑o
.text:004085CB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00407C5D case 4
.text:004085D0                 jmp     def_407C5D      ; jumptable 00407C5D default case, cases 0,1
.text:004085D5 ; ---------------------------------------------------------------------------
.text:004085D5
.text:004085D5 loc_4085D5:                             ; CODE XREF: sub_407C20+3D↑j
.text:004085D5                                         ; DATA XREF: sub_407C20:jpt_407C5D↑o
.text:004085D5                 mov     [esp+4Ch+C], 407C10h ; jumptable 00407C5D cases 5,6
.text:004085DC                 call    ds:libintl_gettext
.text:004085E2                 cmp     eax, 407C10h
.text:004085E7                 mov     edi, eax
.text:004085E9                 jz      short loc_408660
.text:004085EB
.text:004085EB loc_4085EB:                             ; CODE XREF: sub_407C20+A45↓j
.text:004085EB                                         ; sub_407C20+A4C↓j
.text:004085EB                 mov     [esp+4Ch+C], 407C0Eh
.text:004085F2                 call    ds:libintl_gettext
.text:004085F8                 cmp     eax, 407C0Eh
.text:004085FD                 mov     edx, eax
.text:004085FF                 jz      short loc_408652
.text:00408601
.text:00408601 loc_408601:                             ; CODE XREF: sub_407C20+A37↓j
.text:00408601                                         ; sub_407C20+A3E↓j
.text:00408601                 mov     [esp+4Ch+var_1C], edi
.text:00408605                 cmp     byte ptr [edi], 0
.text:00408608                 jz      short loc_408638
.text:0040860A
.text:0040860A loc_40860A:                             ; CODE XREF: sub_407C20+A16↓j
.text:0040860A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040860E                 cmp     [esp+4Ch+var_34], ecx
.text:00408612                 jnb     short loc_408627
.text:00408614                 mov     ebp, [esp+4Ch+var_1C]
.text:00408618                 mov     edi, [esp+4Ch+arg_0]
.text:0040861C                 mov     esi, [esp+4Ch+var_34]
.text:00408620                 movzx   ebx, byte ptr [ebp+0]
.text:00408624                 mov     [esi+edi], bl
.text:00408627
.text:00408627 loc_408627:                             ; CODE XREF: sub_407C20+9F2↑j
.text:00408627                 inc     [esp+4Ch+var_1C]
.text:0040862B                 inc     [esp+4Ch+var_34]
.text:0040862F                 mov     eax, [esp+4Ch+var_1C]
.text:00408633                 cmp     byte ptr [eax], 0
.text:00408636                 jnz     short loc_40860A
.text:00408638
.text:00408638 loc_408638:                             ; CODE XREF: sub_407C20+9E8↑j
.text:00408638                 mov     [esp+4Ch+var_21], 1
.text:0040863D                 mov     [esp+4Ch+var_1C], edx
.text:00408641                 mov     [esp+4Ch+C], edx ; Str
.text:00408644                 call    strlen
.text:00408649                 mov     [esp+4Ch+var_20], eax
.text:0040864D                 jmp     def_407C5D      ; jumptable 00407C5D default case, cases 0,1
.text:00408652 ; ---------------------------------------------------------------------------
.text:00408652
.text:00408652 loc_408652:                             ; CODE XREF: sub_407C20+9DF↑j
.text:00408652                 cmp     [esp+4Ch+arg_10], 6
.text:00408657                 jnz     short loc_408601
.text:00408659                 mov     edx, offset asc_407C0C ; "\"'`"
.text:0040865E                 jmp     short loc_408601
.text:00408660 ; ---------------------------------------------------------------------------
.text:00408660
.text:00408660 loc_408660:                             ; CODE XREF: sub_407C20+9C9↑j
.text:00408660                 cmp     [esp+4Ch+arg_10], 6
.text:00408665                 jnz     short loc_4085EB
.text:00408667                 mov     edi, offset asc_407C0C ; "\"'`"
.text:0040866C                 jmp     loc_4085EB
.text:0040866C sub_407C20      endp
.text:0040866C
.text:00408671 ; ---------------------------------------------------------------------------
.text:00408671                 jmp     short loc_408680
.text:00408671 ; ---------------------------------------------------------------------------
.text:00408673                 align 10h
.text:00408680
.text:00408680 loc_408680:                             ; CODE XREF: .text:00408671↑j
.text:00408680                 sub     esp, 0Ch
.text:00408683                 mov     [esp+4], ebx
.text:00408687                 mov     [esp+8], esi
.text:0040868B                 call    _errno
.text:00408690                 mov     esi, [eax]
.text:00408692                 mov     dword ptr [esp], 24h ; '$'
.text:00408699                 call    sub_406010
.text:0040869E                 mov     edx, [esp+10h]
.text:004086A2                 mov     ebx, eax
.text:004086A4                 test    edx, edx
.text:004086A6                 jz      short loc_4086F1
.text:004086A8
.text:004086A8 loc_4086A8:                             ; CODE XREF: .text:004086F6↓j
.text:004086A8                 mov     ecx, [edx]
.text:004086AA                 mov     [ebx], ecx
.text:004086AC                 mov     ecx, [edx+4]
.text:004086AF                 mov     [ebx+4], ecx
.text:004086B2                 mov     ecx, [edx+8]
.text:004086B5                 mov     [ebx+8], ecx
.text:004086B8                 mov     ecx, [edx+0Ch]
.text:004086BB                 mov     [ebx+0Ch], ecx
.text:004086BE                 mov     ecx, [edx+10h]
.text:004086C1                 mov     [ebx+10h], ecx
.text:004086C4                 mov     ecx, [edx+14h]
.text:004086C7                 mov     [ebx+14h], ecx
.text:004086CA                 mov     ecx, [edx+18h]
.text:004086CD                 mov     [ebx+18h], ecx
.text:004086D0                 mov     ecx, [edx+1Ch]
.text:004086D3                 mov     [ebx+1Ch], ecx
.text:004086D6                 mov     ecx, [edx+20h]
.text:004086D9                 mov     [ebx+20h], ecx
.text:004086DC                 call    _errno
.text:004086E1                 mov     [eax], esi
.text:004086E3                 mov     esi, [esp+8]
.text:004086E7                 mov     eax, ebx
.text:004086E9                 mov     ebx, [esp+4]
.text:004086ED                 add     esp, 0Ch
.text:004086F0                 retn
.text:004086F1 ; ---------------------------------------------------------------------------
.text:004086F1
.text:004086F1 loc_4086F1:                             ; CODE XREF: .text:004086A6↑j
.text:004086F1                 mov     edx, offset dword_414190
.text:004086F6                 jmp     short loc_4086A8
.text:004086F6 ; ---------------------------------------------------------------------------
.text:004086F8                 align 10h
.text:00408700                 mov     eax, [esp+4]
.text:00408704                 test    eax, eax
.text:00408706                 jz      short loc_408710
.text:00408708
.text:00408708 loc_408708:                             ; CODE XREF: .text:00408715↓j
.text:00408708                 mov     eax, [eax]
.text:0040870A                 retn
.text:0040870A ; ---------------------------------------------------------------------------
.text:0040870B                 align 10h
.text:00408710
.text:00408710 loc_408710:                             ; CODE XREF: .text:00408706↑j
.text:00408710                 mov     eax, offset dword_414190
.text:00408715                 jmp     short loc_408708
.text:00408715 ; ---------------------------------------------------------------------------
.text:00408717                 align 10h
.text:00408720                 mov     edx, [esp+4]
.text:00408724                 test    edx, edx
.text:00408726                 jz      short loc_408730
.text:00408728
.text:00408728 loc_408728:                             ; CODE XREF: .text:00408735↓j
.text:00408728                 mov     ecx, [esp+8]
.text:0040872C                 mov     [edx], ecx
.text:0040872E                 retn
.text:0040872E ; ---------------------------------------------------------------------------
.text:0040872F                 align 10h
.text:00408730
.text:00408730 loc_408730:                             ; CODE XREF: .text:00408726↑j
.text:00408730                 mov     edx, offset dword_414190
.text:00408735                 jmp     short loc_408728
.text:00408735 ; ---------------------------------------------------------------------------
.text:00408737                 align 10h
.text:00408740                 sub     esp, 8
.text:00408743                 mov     eax, [esp+0Ch]
.text:00408747                 movzx   ecx, byte ptr [esp+10h]
.text:0040874C                 mov     [esp], ebx
.text:0040874F                 mov     ebx, [esp+14h]
.text:00408753                 mov     [esp+4], esi
.text:00408757                 mov     dl, cl
.text:00408759                 shr     dl, 5
.text:0040875C                 movzx   edx, dl
.text:0040875F                 shl     edx, 2
.text:00408762                 test    eax, eax
.text:00408764                 lea     esi, [edx+eax+4]
.text:00408768                 jz      short loc_408790
.text:0040876A
.text:0040876A loc_40876A:                             ; CODE XREF: .text:00408796↓j
.text:0040876A                 mov     edx, [esi]
.text:0040876C                 and     ecx, 1Fh
.text:0040876F                 and     ebx, 1
.text:00408772                 mov     eax, edx
.text:00408774                 shr     eax, cl
.text:00408776                 and     eax, 1
.text:00408779                 xor     ebx, eax
.text:0040877B                 shl     ebx, cl
.text:0040877D                 xor     edx, ebx
.text:0040877F                 mov     [esi], edx
.text:00408781                 mov     ebx, [esp]
.text:00408784                 mov     esi, [esp+4]
.text:00408788                 add     esp, 8
.text:0040878B                 retn
.text:0040878B ; ---------------------------------------------------------------------------
.text:0040878C                 align 10h
.text:00408790
.text:00408790 loc_408790:                             ; CODE XREF: .text:00408768↑j
.text:00408790                 lea     esi, dword_414194[edx]
.text:00408796                 jmp     short loc_40876A
.text:00408796 ; ---------------------------------------------------------------------------
.text:00408798                 align 10h
.text:004087A0                 sub     esp, 2Ch
.text:004087A3                 mov     [esp+24h], ebx
.text:004087A7                 mov     ebx, [esp+40h]
.text:004087AB                 mov     [esp+28h], esi
.text:004087AF                 test    ebx, ebx
.text:004087B1                 jz      short loc_408800
.text:004087B3
.text:004087B3 loc_4087B3:                             ; CODE XREF: .text:00408805↓j
.text:004087B3                 call    _errno
.text:004087B8                 mov     esi, [eax]
.text:004087BA                 mov     [esp+14h], ebx
.text:004087BE                 mov     edx, [ebx]
.text:004087C0                 mov     ecx, [esp+38h]
.text:004087C4                 mov     ebx, [esp+3Ch]
.text:004087C8                 mov     [esp+10h], edx
.text:004087CC                 mov     edx, [esp+34h]
.text:004087D0                 mov     [esp+0Ch], ebx
.text:004087D4                 mov     [esp+8], ecx
.text:004087D8                 mov     [esp+4], edx
.text:004087DC                 mov     edx, [esp+30h]
.text:004087E0                 mov     [esp], edx
.text:004087E3                 call    sub_407C20
.text:004087E8                 mov     ebx, eax
.text:004087EA                 call    _errno
.text:004087EF                 mov     [eax], esi
.text:004087F1                 mov     esi, [esp+28h]
.text:004087F5                 mov     eax, ebx
.text:004087F7                 mov     ebx, [esp+24h]
.text:004087FB                 add     esp, 2Ch
.text:004087FE                 retn
.text:004087FE ; ---------------------------------------------------------------------------
.text:004087FF                 align 10h
.text:00408800
.text:00408800 loc_408800:                             ; CODE XREF: .text:004087B1↑j
.text:00408800                 mov     ebx, offset dword_414190
.text:00408805                 jmp     short loc_4087B3
.text:00408805 ; ---------------------------------------------------------------------------
.text:00408807                 align 10h
.text:00408810                 push    ebp
.text:00408811                 push    edi
.text:00408812                 push    esi
.text:00408813                 push    ebx
.text:00408814                 sub     esp, 2Ch
.text:00408817                 mov     ebp, [esp+48h]
.text:0040881B                 call    _errno
.text:00408820                 mov     edx, [eax]
.text:00408822                 test    ebp, ebp
.text:00408824                 mov     ebx, ebp
.text:00408826                 mov     [esp+28h], edx
.text:0040882A                 jz      loc_4088E0
.text:00408830
.text:00408830 loc_408830:                             ; CODE XREF: .text:004088E5↓j
.text:00408830                 call    _errno
.text:00408835                 mov     edi, [eax]
.text:00408837                 mov     esi, ebp
.text:00408839                 mov     [esp+14h], ebx
.text:0040883D                 mov     ecx, [ebx]
.text:0040883F                 mov     dword ptr [esp], 0
.text:00408846                 mov     edx, [esp+44h]
.text:0040884A                 mov     dword ptr [esp+4], 0
.text:00408852                 mov     eax, [esp+40h]
.text:00408856                 mov     [esp+10h], ecx
.text:0040885A                 mov     [esp+0Ch], edx
.text:0040885E                 mov     [esp+8], eax
.text:00408862                 call    sub_407C20
.text:00408867                 mov     ebx, eax
.text:00408869                 call    _errno
.text:0040886E                 mov     [eax], edi
.text:00408870                 lea     edi, [ebx+1]
.text:00408873                 mov     [esp], edi
.text:00408876                 call    sub_406010
.text:0040887B                 mov     [esp+24h], eax
.text:0040887F                 test    ebp, ebp
.text:00408881                 jz      short loc_4088D2
.text:00408883
.text:00408883 loc_408883:                             ; CODE XREF: .text:004088D7↓j
.text:00408883                 call    _errno
.text:00408888                 mov     ebp, [eax]
.text:0040888A                 mov     [esp+14h], esi
.text:0040888E                 mov     ecx, [esi]
.text:00408890                 mov     [esp+4], edi
.text:00408894                 mov     edx, [esp+44h]
.text:00408898                 mov     esi, [esp+24h]
.text:0040889C                 mov     [esp+10h], ecx
.text:004088A0                 mov     eax, [esp+40h]
.text:004088A4                 mov     [esp+0Ch], edx
.text:004088A8                 mov     [esp], esi
.text:004088AB                 mov     [esp+8], eax
.text:004088AF                 call    sub_407C20
.text:004088B4                 call    _errno
.text:004088B9                 mov     [eax], ebp
.text:004088BB                 call    _errno
.text:004088C0                 mov     ebx, [esp+28h]
.text:004088C4                 mov     [eax], ebx
.text:004088C6                 mov     eax, [esp+24h]
.text:004088CA                 add     esp, 2Ch
.text:004088CD                 pop     ebx
.text:004088CE                 pop     esi
.text:004088CF                 pop     edi
.text:004088D0                 pop     ebp
.text:004088D1                 retn
.text:004088D2 ; ---------------------------------------------------------------------------
.text:004088D2
.text:004088D2 loc_4088D2:                             ; CODE XREF: .text:00408881↑j
.text:004088D2                 mov     esi, offset dword_414190
.text:004088D7                 jmp     short loc_408883
.text:004088D7 ; ---------------------------------------------------------------------------
.text:004088D9                 align 10h
.text:004088E0
.text:004088E0 loc_4088E0:                             ; CODE XREF: .text:0040882A↑j
.text:004088E0                 mov     ebx, offset dword_414190
.text:004088E5                 jmp     loc_408830
.text:004088E5 ; ---------------------------------------------------------------------------
.text:004088EA                 align 10h
.text:004088F0                 sub     esp, 1Ch
.text:004088F3                 mov     edx, [esp+24h]
.text:004088F7                 mov     dword ptr [esp+0Ch], offset dword_414190
.text:004088FF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408907                 mov     [esp+4], edx
.text:0040890B                 mov     edx, [esp+20h]
.text:0040890F                 mov     [esp], edx
.text:00408912                 call    sub_408D60
.text:00408917                 add     esp, 1Ch
.text:0040891A                 retn
.text:0040891A ; ---------------------------------------------------------------------------
.text:0040891B                 align 10h
.text:00408920                 sub     esp, 1Ch
.text:00408923                 mov     edx, [esp+20h]
.text:00408927                 mov     dword ptr [esp+0Ch], offset dword_414190
.text:0040892F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408937                 mov     [esp+4], edx
.text:0040893B                 mov     dword ptr [esp], 0
.text:00408942                 call    sub_408D60
.text:00408947                 add     esp, 1Ch
.text:0040894A                 retn
.text:0040894A ; ---------------------------------------------------------------------------
.text:0040894B                 align 10h
.text:00408950
.text:00408950 ; =============== S U B R O U T I N E =======================================
.text:00408950
.text:00408950
.text:00408950 ; int __cdecl sub_408950(int, int, char *)
.text:00408950 sub_408950      proc near               ; CODE XREF: sub_4064F0+1A↑p
.text:00408950                                         ; sub_406520+1A↑p
.text:00408950
.text:00408950 var_BC          = dword ptr -0BCh
.text:00408950 var_B8          = dword ptr -0B8h
.text:00408950 var_B4          = dword ptr -0B4h
.text:00408950 var_B0          = dword ptr -0B0h
.text:00408950 var_AC          = dword ptr -0ACh
.text:00408950 var_A8          = dword ptr -0A8h
.text:00408950 var_A4          = dword ptr -0A4h
.text:00408950 var_A0          = dword ptr -0A0h
.text:00408950 var_9C          = dword ptr -9Ch
.text:00408950 var_98          = dword ptr -98h
.text:00408950 var_94          = dword ptr -94h
.text:00408950 var_90          = dword ptr -90h
.text:00408950 var_8C          = dword ptr -8Ch
.text:00408950 var_7C          = dword ptr -7Ch
.text:00408950 var_78          = dword ptr -78h
.text:00408950 var_74          = dword ptr -74h
.text:00408950 var_70          = dword ptr -70h
.text:00408950 var_6C          = dword ptr -6Ch
.text:00408950 var_68          = dword ptr -68h
.text:00408950 var_64          = dword ptr -64h
.text:00408950 var_60          = dword ptr -60h
.text:00408950 var_5C          = dword ptr -5Ch
.text:00408950 var_4C          = dword ptr -4Ch
.text:00408950 var_48          = dword ptr -48h
.text:00408950 var_44          = dword ptr -44h
.text:00408950 var_40          = dword ptr -40h
.text:00408950 var_3C          = dword ptr -3Ch
.text:00408950 var_38          = dword ptr -38h
.text:00408950 var_34          = dword ptr -34h
.text:00408950 var_30          = dword ptr -30h
.text:00408950 var_2C          = dword ptr -2Ch
.text:00408950 arg_0           = dword ptr  4
.text:00408950 arg_4           = dword ptr  8
.text:00408950 arg_8           = dword ptr  0Ch
.text:00408950
.text:00408950                 push    ebp
.text:00408951                 xor     eax, eax
.text:00408953                 mov     ecx, 8
.text:00408958                 push    edi
.text:00408959                 push    esi
.text:0040895A                 push    ebx
.text:0040895B                 sub     esp, 0ACh
.text:00408961                 mov     ebp, [esp+0BCh+arg_4]
.text:00408968                 cld
.text:00408969                 lea     edi, [esp+0BCh+var_A8]
.text:0040896D                 mov     [esp+0BCh+var_AC], ebp
.text:00408971                 rep stosd
.text:00408973                 mov     eax, [esp+0BCh+var_8C]
.text:00408977                 mov     edi, [esp+0BCh+var_AC]
.text:0040897B                 mov     esi, [esp+0BCh+var_A8]
.text:0040897F                 mov     [esp+0BCh+var_5C], eax
.text:00408983                 mov     ebp, [esp+0BCh+var_A4]
.text:00408987                 mov     eax, [esp+0BCh+var_AC]
.text:0040898B                 mov     [esp+0BCh+var_7C], edi
.text:0040898F                 mov     ecx, [esp+0BCh+var_94]
.text:00408993                 mov     edi, [esp+0BCh+var_A0]
.text:00408997                 mov     [esp+0BCh+var_78], esi
.text:0040899B                 mov     edx, [esp+0BCh+var_90]
.text:0040899F                 mov     esi, [esp+0BCh+var_9C]
.text:004089A3                 mov     [esp+0BCh+var_4C], eax
.text:004089A7                 mov     ebx, [esp+0BCh+var_98]
.text:004089AB                 mov     eax, [esp+0BCh+var_A8]
.text:004089AF                 mov     [esp+0BCh+var_74], ebp
.text:004089B3                 mov     [esp+0BCh+var_70], edi
.text:004089B7                 mov     [esp+0BCh+var_6C], esi
.text:004089BB                 mov     [esp+0BCh+var_68], ebx
.text:004089BF                 mov     [esp+0BCh+var_64], ecx
.text:004089C3                 mov     [esp+0BCh+var_60], edx
.text:004089C7                 mov     [esp+0BCh+var_48], eax
.text:004089CB                 mov     [esp+0BCh+var_44], ebp
.text:004089CF                 mov     [esp+0BCh+var_40], edi
.text:004089D3                 mov     [esp+0BCh+var_3C], esi
.text:004089DA                 mov     [esp+0BCh+var_38], ebx
.text:004089E1                 mov     ebx, [esp+0BCh+var_8C]
.text:004089E5                 mov     [esp+0BCh+var_30], edx
.text:004089EC                 mov     edx, [esp+0BCh+arg_8]
.text:004089F3                 mov     [esp+0BCh+var_34], ecx
.text:004089FA                 lea     ecx, [esp+0BCh+var_4C]
.text:004089FE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00408A02                 mov     edx, [esp+0BCh+arg_0]
.text:00408A09                 mov     [esp+0BCh+var_2C], ebx
.text:00408A10                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00408A14                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00408A1C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00408A1F                 call    sub_408D60
.text:00408A24                 add     esp, 0ACh
.text:00408A2A                 pop     ebx
.text:00408A2B                 pop     esi
.text:00408A2C                 pop     edi
.text:00408A2D                 pop     ebp
.text:00408A2E                 retn
.text:00408A2E sub_408950      endp
.text:00408A2E
.text:00408A2E ; ---------------------------------------------------------------------------
.text:00408A2F                 align 10h
.text:00408A30                 push    ebp
.text:00408A31                 xor     eax, eax
.text:00408A33                 mov     ecx, 8
.text:00408A38                 push    edi
.text:00408A39                 push    esi
.text:00408A3A                 push    ebx
.text:00408A3B                 sub     esp, 0ACh
.text:00408A41                 mov     edx, [esp+0C4h]
.text:00408A48                 cld
.text:00408A49                 lea     edi, [esp+14h]
.text:00408A4D                 mov     [esp+10h], edx
.text:00408A51                 rep stosd
.text:00408A53                 mov     eax, [esp+30h]
.text:00408A57                 mov     ebp, [esp+10h]
.text:00408A5B                 mov     edi, [esp+14h]
.text:00408A5F                 mov     [esp+60h], eax
.text:00408A63                 mov     esi, [esp+20h]
.text:00408A67                 mov     eax, [esp+10h]
.text:00408A6B                 mov     [esp+40h], ebp
.text:00408A6F                 mov     ecx, [esp+28h]
.text:00408A73                 mov     ebp, [esp+18h]
.text:00408A77                 mov     [esp+44h], edi
.text:00408A7B                 mov     edx, [esp+2Ch]
.text:00408A7F                 mov     edi, [esp+1Ch]
.text:00408A83                 mov     [esp+70h], eax
.text:00408A87                 mov     ebx, [esp+24h]
.text:00408A8B                 mov     eax, [esp+14h]
.text:00408A8F                 mov     [esp+48h], ebp
.text:00408A93                 mov     [esp+4Ch], edi
.text:00408A97                 mov     [esp+50h], esi
.text:00408A9B                 mov     [esp+54h], ebx
.text:00408A9F                 mov     [esp+58h], ecx
.text:00408AA3                 mov     [esp+5Ch], edx
.text:00408AA7                 mov     [esp+74h], eax
.text:00408AAB                 mov     [esp+78h], ebp
.text:00408AAF                 mov     [esp+7Ch], edi
.text:00408AB3                 mov     [esp+80h], esi
.text:00408ABA                 mov     [esp+84h], ebx
.text:00408AC1                 mov     esi, [esp+30h]
.text:00408AC5                 lea     ebx, [esp+70h]
.text:00408AC9                 mov     [esp+8Ch], edx
.text:00408AD0                 mov     edx, [esp+0C8h]
.text:00408AD7                 mov     [esp+88h], ecx
.text:00408ADE                 mov     ecx, [esp+0CCh]
.text:00408AE5                 mov     [esp+4], edx
.text:00408AE9                 mov     edx, [esp+0C0h]
.text:00408AF0                 mov     [esp+90h], esi
.text:00408AF7                 mov     [esp+0Ch], ebx
.text:00408AFB                 mov     [esp+8], ecx
.text:00408AFF                 mov     [esp], edx
.text:00408B02                 call    sub_408D60
.text:00408B07                 add     esp, 0ACh
.text:00408B0D                 pop     ebx
.text:00408B0E                 pop     esi
.text:00408B0F                 pop     edi
.text:00408B10                 pop     ebp
.text:00408B11                 retn
.text:00408B11 ; ---------------------------------------------------------------------------
.text:00408B12                 align 10h
.text:00408B20                 push    ebp
.text:00408B21                 xor     eax, eax
.text:00408B23                 mov     ecx, 8
.text:00408B28                 push    edi
.text:00408B29                 push    esi
.text:00408B2A                 push    ebx
.text:00408B2B                 sub     esp, 0ACh
.text:00408B31                 mov     edi, [esp+0C0h]
.text:00408B38                 cld
.text:00408B39                 mov     [esp+10h], edi
.text:00408B3D                 lea     edi, [esp+14h]
.text:00408B41                 rep stosd
.text:00408B43                 mov     eax, [esp+30h]
.text:00408B47                 mov     esi, [esp+10h]
.text:00408B4B                 mov     ebx, [esp+14h]
.text:00408B4F                 mov     [esp+60h], eax
.text:00408B53                 mov     ebp, [esp+18h]
.text:00408B57                 mov     eax, [esp+10h]
.text:00408B5B                 mov     [esp+40h], esi
.text:00408B5F                 mov     edi, [esp+1Ch]
.text:00408B63                 mov     esi, [esp+20h]
.text:00408B67                 mov     [esp+44h], ebx
.text:00408B6B                 mov     ecx, [esp+28h]
.text:00408B6F                 mov     edx, [esp+2Ch]
.text:00408B73                 mov     [esp+70h], eax
.text:00408B77                 mov     ebx, [esp+24h]
.text:00408B7B                 mov     eax, [esp+14h]
.text:00408B7F                 mov     [esp+48h], ebp
.text:00408B83                 mov     [esp+4Ch], edi
.text:00408B87                 mov     [esp+50h], esi
.text:00408B8B                 mov     [esp+54h], ebx
.text:00408B8F                 mov     [esp+58h], ecx
.text:00408B93                 mov     [esp+5Ch], edx
.text:00408B97                 mov     [esp+74h], eax
.text:00408B9B                 mov     [esp+78h], ebp
.text:00408B9F                 mov     [esp+7Ch], edi
.text:00408BA3                 mov     [esp+80h], esi
.text:00408BAA                 mov     [esp+84h], ebx
.text:00408BB1                 mov     [esp+8Ch], edx
.text:00408BB8                 lea     edx, [esp+70h]
.text:00408BBC                 mov     [esp+88h], ecx
.text:00408BC3                 mov     ecx, [esp+30h]
.text:00408BC7                 mov     [esp+0Ch], edx
.text:00408BCB                 mov     edx, [esp+0C4h]
.text:00408BD2                 mov     [esp+90h], ecx
.text:00408BD9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408BE1                 mov     [esp+4], edx
.text:00408BE5                 mov     dword ptr [esp], 0
.text:00408BEC                 call    sub_408D60
.text:00408BF1                 add     esp, 0ACh
.text:00408BF7                 pop     ebx
.text:00408BF8                 pop     esi
.text:00408BF9                 pop     edi
.text:00408BFA                 pop     ebp
.text:00408BFB                 retn
.text:00408BFB ; ---------------------------------------------------------------------------
.text:00408BFC                 align 10h
.text:00408C00                 push    edi
.text:00408C01                 push    esi
.text:00408C02                 push    ebx
.text:00408C03                 sub     esp, 40h
.text:00408C06                 mov     edx, ds:dword_41419C
.text:00408C0C                 mov     ebx, ds:dword_414190
.text:00408C12                 mov     esi, ds:dword_414198
.text:00408C18                 mov     edi, ds:dword_414194
.text:00408C1E                 mov     [esp+1Ch], edx
.text:00408C22                 mov     ecx, ds:dword_4141A0
.text:00408C28                 mov     edx, ds:dword_4141B0
.text:00408C2E                 mov     [esp+10h], ebx
.text:00408C32                 mov     ebx, ds:dword_4141A4
.text:00408C38                 mov     [esp+30h], edx
.text:00408C3C                 movzx   edx, byte ptr [esp+54h]
.text:00408C41                 mov     [esp+18h], esi
.text:00408C45                 mov     esi, ds:dword_4141AC
.text:00408C4B                 mov     [esp+14h], edi
.text:00408C4F                 mov     edi, ds:dword_4141A8
.text:00408C55                 mov     [esp+20h], ecx
.text:00408C59                 mov     cl, dl
.text:00408C5B                 shr     cl, 5
.text:00408C5E                 mov     [esp+24h], ebx
.text:00408C62                 movzx   ebx, cl
.text:00408C65                 mov     [esp+2Ch], esi
.text:00408C69                 lea     esi, [esp+10h]
.text:00408C6D                 mov     [esp+28h], edi
.text:00408C71                 lea     edi, [esi+ebx*4]
.text:00408C74                 mov     ebx, edx
.text:00408C76                 mov     edx, [edi+4]
.text:00408C79                 and     ebx, 1Fh
.text:00408C7C                 mov     cl, bl
.text:00408C7E                 mov     eax, edx
.text:00408C80                 shr     eax, cl
.text:00408C82                 and     eax, 1
.text:00408C85                 xor     eax, 1
.text:00408C88                 shl     eax, cl
.text:00408C8A                 xor     edx, eax
.text:00408C8C                 mov     [edi+4], edx
.text:00408C8F                 mov     edx, [esp+50h]
.text:00408C93                 mov     [esp+0Ch], esi
.text:00408C97                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408C9F                 mov     [esp+4], edx
.text:00408CA3                 mov     dword ptr [esp], 0
.text:00408CAA                 call    sub_408D60
.text:00408CAF                 add     esp, 40h
.text:00408CB2                 pop     ebx
.text:00408CB3                 pop     esi
.text:00408CB4                 pop     edi
.text:00408CB5                 retn
.text:00408CB5 ; ---------------------------------------------------------------------------
.text:00408CB6                 align 10h
.text:00408CC0
.text:00408CC0 ; =============== S U B R O U T I N E =======================================
.text:00408CC0
.text:00408CC0
.text:00408CC0 ; int __cdecl sub_408CC0(char *)
.text:00408CC0 sub_408CC0      proc near               ; CODE XREF: sub_406410+64↑p
.text:00408CC0
.text:00408CC0 var_4C          = dword ptr -4Ch
.text:00408CC0 var_48          = dword ptr -48h
.text:00408CC0 var_44          = dword ptr -44h
.text:00408CC0 var_40          = dword ptr -40h
.text:00408CC0 var_3C          = dword ptr -3Ch
.text:00408CC0 var_38          = dword ptr -38h
.text:00408CC0 var_34          = dword ptr -34h
.text:00408CC0 var_30          = dword ptr -30h
.text:00408CC0 var_2C          = dword ptr -2Ch
.text:00408CC0 var_28          = dword ptr -28h
.text:00408CC0 var_24          = dword ptr -24h
.text:00408CC0 var_20          = dword ptr -20h
.text:00408CC0 var_1C          = dword ptr -1Ch
.text:00408CC0 arg_0           = dword ptr  4
.text:00408CC0
.text:00408CC0                 sub     esp, 4Ch
.text:00408CC3                 mov     ecx, ds:dword_414190
.text:00408CC9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00408CD1                 mov     edx, ds:dword_414194
.text:00408CD7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00408CDE                 mov     [esp+4Ch+var_3C], ecx
.text:00408CE2                 mov     ecx, ds:dword_41419C
.text:00408CE8                 mov     [esp+4Ch+var_38], edx
.text:00408CEC                 mov     edx, ds:dword_414198
.text:00408CF2                 mov     [esp+4Ch+var_30], ecx
.text:00408CF6                 mov     ecx, ds:dword_4141A0
.text:00408CFC                 mov     eax, edx
.text:00408CFE                 shr     eax, 1Ah
.text:00408D01                 and     eax, 1
.text:00408D04                 xor     eax, 1
.text:00408D07                 mov     [esp+4Ch+var_2C], ecx
.text:00408D0B                 shl     eax, 1Ah
.text:00408D0E                 mov     ecx, ds:dword_4141A4
.text:00408D14                 xor     edx, eax
.text:00408D16                 mov     [esp+4Ch+var_34], edx
.text:00408D1A                 mov     edx, [esp+4Ch+arg_0]
.text:00408D1E                 mov     [esp+4Ch+var_28], ecx
.text:00408D22                 mov     ecx, ds:dword_4141A8
.text:00408D28                 mov     [esp+4Ch+var_48], edx ; char *
.text:00408D2C                 mov     [esp+4Ch+var_24], ecx
.text:00408D30                 mov     ecx, ds:dword_4141AC
.text:00408D36                 mov     [esp+4Ch+var_20], ecx
.text:00408D3A                 mov     ecx, ds:dword_4141B0
.text:00408D40                 mov     [esp+4Ch+var_1C], ecx
.text:00408D44                 lea     ecx, [esp+4Ch+var_3C]
.text:00408D48                 mov     [esp+4Ch+var_40], ecx ; int
.text:00408D4C                 call    sub_408D60
.text:00408D51                 add     esp, 4Ch
.text:00408D54                 retn
.text:00408D54 sub_408CC0      endp
.text:00408D54
.text:00408D54 ; ---------------------------------------------------------------------------
.text:00408D55                 align 10h
.text:00408D60
.text:00408D60 ; =============== S U B R O U T I N E =======================================
.text:00408D60
.text:00408D60
.text:00408D60 ; int __cdecl sub_408D60(int, char *, int, int)
.text:00408D60 sub_408D60      proc near               ; CODE XREF: .text:00408912↑p
.text:00408D60                                         ; .text:00408942↑p ...
.text:00408D60
.text:00408D60 Block           = dword ptr -2Ch
.text:00408D60 var_28          = dword ptr -28h
.text:00408D60 Str             = dword ptr -24h
.text:00408D60 var_20          = dword ptr -20h
.text:00408D60 var_1C          = dword ptr -1Ch
.text:00408D60 var_18          = dword ptr -18h
.text:00408D60 var_14          = dword ptr -14h
.text:00408D60 arg_0           = dword ptr  4
.text:00408D60 arg_4           = dword ptr  8
.text:00408D60 arg_8           = dword ptr  0Ch
.text:00408D60 arg_C           = dword ptr  10h
.text:00408D60
.text:00408D60                 push    ebp
.text:00408D61                 push    edi
.text:00408D62                 push    esi
.text:00408D63                 push    ebx
.text:00408D64                 sub     esp, 1Ch
.text:00408D67                 call    _errno
.text:00408D6C                 mov     edx, [eax]
.text:00408D6E                 mov     eax, [esp+2Ch+arg_0]
.text:00408D72                 mov     [esp+2Ch+var_14], edx
.text:00408D76                 test    eax, eax
.text:00408D78                 js      loc_408F1A
.text:00408D7E                 mov     eax, [esp+2Ch+arg_0]
.text:00408D82                 cmp     dword_413050, eax
.text:00408D88                 ja      short loc_408E00
.text:00408D8A                 mov     esi, eax
.text:00408D8C                 inc     esi
.text:00408D8D                 cmp     esi, 1FFFFFFFh
.text:00408D93                 ja      loc_408F1F
.text:00408D99                 mov     ebx, off_41305C
.text:00408D9F                 cmp     ebx, offset dword_413054
.text:00408DA5                 jz      loc_408EF1
.text:00408DAB
.text:00408DAB loc_408DAB:                             ; CODE XREF: sub_408D60+1B5↓j
.text:00408DAB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00408DAE                 lea     ecx, ds:0[esi*8]
.text:00408DB5                 mov     ebp, esi
.text:00408DB7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00408DBB                 call    sub_4060A0
.text:00408DC0                 mov     off_41305C, eax
.text:00408DC5                 mov     ebx, dword_413050
.text:00408DCB                 sub     ebp, ebx
.text:00408DCD                 lea     edi, [eax+ebx*8]
.text:00408DD0                 lea     eax, ds:0[ebp*8]
.text:00408DD7                 cmp     eax, 7
.text:00408DDA                 jbe     short loc_408DF0
.text:00408DDC                 test    edi, 4
.text:00408DE2                 jz      short loc_408DF0
.text:00408DE4                 mov     dword ptr [edi], 0
.text:00408DEA                 sub     eax, 4
.text:00408DED                 add     edi, 4
.text:00408DF0
.text:00408DF0 loc_408DF0:                             ; CODE XREF: sub_408D60+7A↑j
.text:00408DF0                                         ; sub_408D60+82↑j
.text:00408DF0                 cld
.text:00408DF1                 mov     ecx, eax
.text:00408DF3                 shr     ecx, 2
.text:00408DF6                 xor     eax, eax
.text:00408DF8                 rep stosd
.text:00408DFA                 mov     dword_413050, esi
.text:00408E00
.text:00408E00 loc_408E00:                             ; CODE XREF: sub_408D60+28↑j
.text:00408E00                 mov     esi, off_41305C
.text:00408E06                 mov     eax, [esp+2Ch+arg_0]
.text:00408E0A                 mov     ebp, [esi+eax*8]
.text:00408E0D                 mov     edi, [esi+eax*8+4]
.text:00408E11                 mov     esi, [esp+2Ch+arg_C]
.text:00408E15                 test    esi, esi
.text:00408E17                 jz      loc_408EE7
.text:00408E1D
.text:00408E1D loc_408E1D:                             ; CODE XREF: sub_408D60+18C↓j
.text:00408E1D                 call    _errno
.text:00408E22                 mov     ebx, [eax]
.text:00408E24                 mov     [esp+2Ch+var_18], esi ; int
.text:00408E28                 mov     ecx, [esi]
.text:00408E2A                 mov     [esp+2Ch+Block], edi ; int
.text:00408E2D                 mov     edx, [esp+2Ch+arg_8]
.text:00408E31                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408E35                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408E39                 mov     ecx, [esp+2Ch+arg_4]
.text:00408E3D                 mov     [esp+2Ch+var_20], edx ; int
.text:00408E41                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408E45                 call    sub_407C20
.text:00408E4A                 mov     esi, eax
.text:00408E4C                 call    _errno
.text:00408E51                 mov     [eax], ebx
.text:00408E53                 cmp     ebp, esi
.text:00408E55                 ja      short loc_408ECB
.text:00408E57                 lea     ebp, [esi+1]
.text:00408E5A                 mov     ebx, off_41305C
.text:00408E60                 cmp     edi, offset unk_414090
.text:00408E66                 mov     esi, [esp+2Ch+arg_0]
.text:00408E6A                 mov     [ebx+esi*8], ebp
.text:00408E6D                 jz      short loc_408E7D
.text:00408E6F                 mov     [esp+2Ch+Block], edi ; Block
.text:00408E72                 call    free
.text:00408E77                 mov     ebx, off_41305C
.text:00408E7D
.text:00408E7D loc_408E7D:                             ; CODE XREF: sub_408D60+10D↑j
.text:00408E7D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00408E80                 call    sub_406010
.text:00408E85                 mov     esi, [esp+2Ch+arg_C]
.text:00408E89                 mov     edi, eax
.text:00408E8B                 mov     eax, [esp+2Ch+arg_0]
.text:00408E8F                 test    esi, esi
.text:00408E91                 mov     [ebx+eax*8+4], edi
.text:00408E95                 jz      short loc_408EE0
.text:00408E97
.text:00408E97 loc_408E97:                             ; CODE XREF: sub_408D60+185↓j
.text:00408E97                 call    _errno
.text:00408E9C                 mov     ebx, [eax]
.text:00408E9E                 mov     [esp+2Ch+var_18], esi ; int
.text:00408EA2                 mov     ecx, [esi]
.text:00408EA4                 mov     [esp+2Ch+Block], edi ; int
.text:00408EA7                 mov     edx, [esp+2Ch+arg_8]
.text:00408EAB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408EAF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408EB3                 mov     ecx, [esp+2Ch+arg_4]
.text:00408EB7                 mov     [esp+2Ch+var_20], edx ; int
.text:00408EBB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408EBF                 call    sub_407C20
.text:00408EC4                 call    _errno
.text:00408EC9                 mov     [eax], ebx
.text:00408ECB
.text:00408ECB loc_408ECB:                             ; CODE XREF: sub_408D60+F5↑j
.text:00408ECB                 call    _errno
.text:00408ED0                 mov     ebp, [esp+2Ch+var_14]
.text:00408ED4                 mov     [eax], ebp
.text:00408ED6                 add     esp, 1Ch
.text:00408ED9                 mov     eax, edi
.text:00408EDB                 pop     ebx
.text:00408EDC                 pop     esi
.text:00408EDD                 pop     edi
.text:00408EDE                 pop     ebp
.text:00408EDF                 retn
.text:00408EE0 ; ---------------------------------------------------------------------------
.text:00408EE0
.text:00408EE0 loc_408EE0:                             ; CODE XREF: sub_408D60+135↑j
.text:00408EE0                 mov     esi, offset dword_414190
.text:00408EE5                 jmp     short loc_408E97
.text:00408EE7 ; ---------------------------------------------------------------------------
.text:00408EE7
.text:00408EE7 loc_408EE7:                             ; CODE XREF: sub_408D60+B7↑j
.text:00408EE7                 mov     esi, offset dword_414190
.text:00408EEC                 jmp     loc_408E1D
.text:00408EF1 ; ---------------------------------------------------------------------------
.text:00408EF1
.text:00408EF1 loc_408EF1:                             ; CODE XREF: sub_408D60+45↑j
.text:00408EF1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00408EF8                 call    sub_406010
.text:00408EFD                 mov     off_41305C, eax
.text:00408F02                 mov     edi, dword_413054
.text:00408F08                 mov     ebx, eax
.text:00408F0A                 mov     ecx, off_413058
.text:00408F10                 mov     [eax], edi
.text:00408F12                 mov     [eax+4], ecx
.text:00408F15                 jmp     loc_408DAB
.text:00408F1A ; ---------------------------------------------------------------------------
.text:00408F1A
.text:00408F1A loc_408F1A:                             ; CODE XREF: sub_408D60+18↑j
.text:00408F1A                 call    abort
.text:00408F1F ; ---------------------------------------------------------------------------
.text:00408F1F
.text:00408F1F loc_408F1F:                             ; CODE XREF: sub_408D60+33↑j
.text:00408F1F                 call    sub_405A90
.text:00408F1F sub_408D60      endp
.text:00408F1F
.text:00408F1F ; ---------------------------------------------------------------------------
.text:00408F24                 align 10h
.text:00408F30
.text:00408F30 ; =============== S U B R O U T I N E =======================================
.text:00408F30
.text:00408F30 ; Attributes: thunk
.text:00408F30
.text:00408F30 libintl_bindtextdomain proc near
.text:00408F30                 jmp     ds:__imp_libintl_bindtextdomain
.text:00408F30 libintl_bindtextdomain endp
.text:00408F30
.text:00408F30 ; ---------------------------------------------------------------------------
.text:00408F36                 align 10h
.text:00408F40                 jmp     ds:libintl_textdomain
.text:00408F40 ; ---------------------------------------------------------------------------
.text:00408F46                 align 10h
.text:00408F50                 jmp     ds:libintl_gettext
.text:00408F50 ; ---------------------------------------------------------------------------
.text:00408F56                 align 10h
.text:00408F60 ; const char aS_1[]
.text:00408F60 aS_1            db ': %s',0             ; DATA XREF: sub_408F80+B8↓o
.text:00408F60                                         ; sub_409084+122↓o
.text:00408F65 aUnknownSystemE db 'Unknown system error',0
.text:00408F65                                         ; DATA XREF: sub_408F80:loc_40904D↓o
.text:00408F65                                         ; sub_409084:loc_4091BE↓o
.text:00408F7A ; const char aS_2[]
.text:00408F7A aS_2            db '%s: ',0             ; DATA XREF: sub_408F80:loc_409054↓o
.text:00408F7F                 align 10h
.text:00408F80
.text:00408F80 ; =============== S U B R O U T I N E =======================================
.text:00408F80
.text:00408F80
.text:00408F80 ; int __cdecl sub_408F80(int Code, int ErrorMessage, char *, char)
.text:00408F80 sub_408F80      proc near               ; CODE XREF: sub_401920+433↑p
.text:00408F80                                         ; sub_401920+533↑p ...
.text:00408F80
.text:00408F80 Stream          = dword ptr -1Ch
.text:00408F80 Format          = dword ptr -18h
.text:00408F80 ArgList         = dword ptr -14h
.text:00408F80 Code            = dword ptr  4
.text:00408F80 ErrorMessage    = dword ptr  8
.text:00408F80 arg_8           = dword ptr  0Ch
.text:00408F80 arg_C           = byte ptr  10h
.text:00408F80
.text:00408F80                 push    esi
.text:00408F81                 push    ebx
.text:00408F82                 sub     esp, 14h
.text:00408F85                 mov     edx, ds:_iob
.text:00408F8B                 mov     esi, [esp+1Ch+Code]
.text:00408F8F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00408F93                 add     edx, 20h ; ' '
.text:00408F96                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408F99                 call    fflush
.text:00408F9E                 mov     eax, ds:dword_414590
.text:00408FA3                 test    eax, eax
.text:00408FA5                 jz      loc_409054
.text:00408FAB                 call    eax ; dword_414590
.text:00408FAD
.text:00408FAD loc_408FAD:                             ; CODE XREF: sub_408F80+F7↓j
.text:00408FAD                 lea     edx, [esp+1Ch+arg_C]
.text:00408FB1                 mov     ecx, [esp+1Ch+arg_8]
.text:00408FB5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00408FB9                 mov     edx, ds:_iob
.text:00408FBF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00408FC3                 add     edx, 40h ; '@'
.text:00408FC6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408FC9                 call    vfprintf
.text:00408FCE                 inc     ds:dword_4145A0
.text:00408FD4                 test    ebx, ebx
.text:00408FD6                 jnz     short loc_409022
.text:00408FD8
.text:00408FD8 loc_408FD8:                             ; CODE XREF: sub_408F80+CB↓j
.text:00408FD8                 mov     edx, ds:_iob
.text:00408FDE                 lea     ecx, [edx+40h]
.text:00408FE1                 mov     ebx, [ecx+4]
.text:00408FE4                 dec     ebx
.text:00408FE5                 test    ebx, ebx
.text:00408FE7                 mov     [ecx+4], ebx
.text:00408FEA                 js      short loc_409010
.text:00408FEC                 mov     ecx, [edx+40h]
.text:00408FEF                 mov     byte ptr [ecx], 0Ah
.text:00408FF2                 inc     dword ptr [edx+40h]
.text:00408FF5
.text:00408FF5 loc_408FF5:                             ; CODE XREF: sub_408F80+A0↓j
.text:00408FF5                 mov     edx, ds:_iob
.text:00408FFB                 add     edx, 40h ; '@'
.text:00408FFE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409001                 call    fflush
.text:00409006                 test    esi, esi
.text:00409008                 jnz     short loc_40907C
.text:0040900A                 add     esp, 14h
.text:0040900D                 pop     ebx
.text:0040900E                 pop     esi
.text:0040900F                 retn
.text:00409010 ; ---------------------------------------------------------------------------
.text:00409010
.text:00409010 loc_409010:                             ; CODE XREF: sub_408F80+6A↑j
.text:00409010                 mov     [esp+1Ch+Format], ecx ; File
.text:00409014                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040901B                 call    _flsbuf
.text:00409020                 jmp     short loc_408FF5
.text:00409022 ; ---------------------------------------------------------------------------
.text:00409022
.text:00409022 loc_409022:                             ; CODE XREF: sub_408F80+56↑j
.text:00409022                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00409025                 call    strerror
.text:0040902A                 test    eax, eax
.text:0040902C                 jz      short loc_40904D
.text:0040902E
.text:0040902E loc_40902E:                             ; CODE XREF: sub_408F80+D2↓j
.text:0040902E                 mov     [esp+1Ch+ArgList], eax
.text:00409032                 mov     ebx, ds:_iob
.text:00409038                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00409040                 add     ebx, 40h ; '@'
.text:00409043                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00409046                 call    fprintf
.text:0040904B                 jmp     short loc_408FD8
.text:0040904D ; ---------------------------------------------------------------------------
.text:0040904D
.text:0040904D loc_40904D:                             ; CODE XREF: sub_408F80+AC↑j
.text:0040904D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409052                 jmp     short loc_40902E
.text:00409054 ; ---------------------------------------------------------------------------
.text:00409054
.text:00409054 loc_409054:                             ; CODE XREF: sub_408F80+25↑j
.text:00409054                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040905C                 mov     edx, ds:_iob
.text:00409062                 mov     ecx, ds:dword_414560
.text:00409068                 add     edx, 40h ; '@'
.text:0040906B                 mov     [esp+1Ch+ArgList], ecx
.text:0040906F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409072                 call    fprintf
.text:00409077                 jmp     loc_408FAD
.text:0040907C ; ---------------------------------------------------------------------------
.text:0040907C
.text:0040907C loc_40907C:                             ; CODE XREF: sub_408F80+88↑j
.text:0040907C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040907F                 call    exit
.text:0040907F sub_408F80      endp
.text:0040907F
.text:00409084
.text:00409084 ; =============== S U B R O U T I N E =======================================
.text:00409084
.text:00409084
.text:00409084 ; int __cdecl sub_409084(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00409084 sub_409084      proc near               ; DATA XREF: sub_409084+77↓o
.text:00409084
.text:00409084 Stream          = dword ptr -28h
.text:00409084 Format          = dword ptr -24h
.text:00409084 ArgList         = dword ptr -20h
.text:00409084 var_1C          = dword ptr -1Ch
.text:00409084 Code            = dword ptr  8
.text:00409084 ErrorMessage    = dword ptr  0Ch
.text:00409084 Str2            = dword ptr  10h
.text:00409084 arg_10          = dword ptr  14h
.text:00409084 arg_14          = dword ptr  18h
.text:00409084 arg_18          = byte ptr  1Ch
.text:00409084
.text:00409084                 and     eax, 64253A73h
.text:00409089                 cmp     ah, [eax]
.text:0040908B
.text:0040908B loc_40908B:                             ; DATA XREF: sub_409084:loc_4091C5↓o
.text:0040908B                 add     ds:55003A73h, ah
.text:00409091                 push    edi
.text:00409092                 push    esi
.text:00409093                 push    ebx
.text:00409094                 sub     esp, 1Ch
.text:00409097                 mov     edx, ds:dword_4145D0
.text:0040909D                 mov     ebp, [esp+28h+Code]
.text:004090A1                 mov     edi, [esp+28h+ErrorMessage]
.text:004090A5                 test    edx, edx
.text:004090A7                 mov     ebx, [esp+28h+Str2]
.text:004090AB                 mov     esi, [esp+28h+arg_10]
.text:004090AF                 jz      short loc_4090C9
.text:004090B1                 cmp     ds:dword_4141D0, esi
.text:004090B7                 jz      loc_4091F0
.text:004090BD
.text:004090BD loc_4090BD:                             ; CODE XREF: sub_409084+18D↓j
.text:004090BD                 mov     ds:Str1, ebx
.text:004090C3                 mov     ds:dword_4141D0, esi
.text:004090C9
.text:004090C9 loc_4090C9:                             ; CODE XREF: sub_409084+2B↑j
.text:004090C9                 mov     edx, ds:_iob
.text:004090CF                 add     edx, 20h ; ' '
.text:004090D2                 mov     [esp+28h+Stream], edx ; Stream
.text:004090D5                 call    fflush
.text:004090DA                 mov     eax, ds:dword_414590
.text:004090DF                 test    eax, eax
.text:004090E1                 jz      loc_4091C5
.text:004090E7                 call    eax ; dword_414590
.text:004090E9
.text:004090E9 loc_4090E9:                             ; CODE XREF: sub_409084+164↓j
.text:004090E9                 test    ebx, ebx
.text:004090EB                 jz      short loc_40910E
.text:004090ED                 mov     [esp+28h+ArgList], ebx
.text:004090F1                 mov     ebx, ds:_iob
.text:004090F7                 mov     [esp+28h+var_1C], esi
.text:004090FB                 mov     [esp+28h+Format], offset sub_409084 ; Format
.text:00409103                 add     ebx, 40h ; '@'
.text:00409106                 mov     [esp+28h+Stream], ebx ; Stream
.text:00409109                 call    fprintf
.text:0040910E
.text:0040910E loc_40910E:                             ; CODE XREF: sub_409084+67↑j
.text:0040910E                 mov     esi, ds:_iob
.text:00409114                 lea     edx, [esp+28h+arg_18]
.text:00409118                 mov     ecx, [esp+28h+arg_14]
.text:0040911C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00409120                 add     esi, 40h ; '@'
.text:00409123                 mov     [esp+28h+Format], ecx ; Format
.text:00409127                 mov     [esp+28h+Stream], esi ; Stream
.text:0040912A                 call    vfprintf
.text:0040912F                 inc     ds:dword_4145A0
.text:00409135                 test    edi, edi
.text:00409137                 jnz     short loc_409190
.text:00409139
.text:00409139 loc_409139:                             ; CODE XREF: sub_409084+135↓j
.text:00409139                 mov     edx, ds:_iob
.text:0040913F                 lea     ecx, [edx+40h]
.text:00409142                 mov     ebx, [ecx+4]
.text:00409145                 dec     ebx
.text:00409146                 test    ebx, ebx
.text:00409148                 mov     [ecx+4], ebx
.text:0040914B                 js      short loc_409177
.text:0040914D                 mov     esi, [edx+40h]
.text:00409150                 mov     byte ptr [esi], 0Ah
.text:00409153                 inc     dword ptr [edx+40h]
.text:00409156
.text:00409156 loc_409156:                             ; CODE XREF: sub_409084+103↓j
.text:00409156                 mov     ecx, ds:_iob
.text:0040915C                 add     ecx, 40h ; '@'
.text:0040915F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409162                 call    fflush
.text:00409167                 test    ebp, ebp
.text:00409169                 jnz     loc_409216
.text:0040916F
.text:0040916F loc_40916F:                             ; CODE XREF: sub_409084+173↓j
.text:0040916F                                         ; sub_409084+187↓j
.text:0040916F                 add     esp, 1Ch
.text:00409172                 pop     ebx
.text:00409173                 pop     esi
.text:00409174                 pop     edi
.text:00409175                 pop     ebp
.text:00409176                 retn
.text:00409177 ; ---------------------------------------------------------------------------
.text:00409177
.text:00409177 loc_409177:                             ; CODE XREF: sub_409084+C7↑j
.text:00409177                 mov     [esp+28h+Format], ecx ; File
.text:0040917B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00409182                 call    _flsbuf
.text:00409187                 jmp     short loc_409156
.text:00409187 ; ---------------------------------------------------------------------------
.text:00409189                 align 10h
.text:00409190
.text:00409190 loc_409190:                             ; CODE XREF: sub_409084+B3↑j
.text:00409190                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00409193                 call    strerror
.text:00409198                 test    eax, eax
.text:0040919A                 jz      short loc_4091BE
.text:0040919C
.text:0040919C loc_40919C:                             ; CODE XREF: sub_409084+13F↓j
.text:0040919C                 mov     [esp+28h+ArgList], eax
.text:004091A0                 mov     edi, ds:_iob
.text:004091A6                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:004091AE                 add     edi, 40h ; '@'
.text:004091B1                 mov     [esp+28h+Stream], edi ; Stream
.text:004091B4                 call    fprintf
.text:004091B9                 jmp     loc_409139
.text:004091BE ; ---------------------------------------------------------------------------
.text:004091BE
.text:004091BE loc_4091BE:                             ; CODE XREF: sub_409084+116↑j
.text:004091BE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004091C3                 jmp     short loc_40919C
.text:004091C5 ; ---------------------------------------------------------------------------
.text:004091C5
.text:004091C5 loc_4091C5:                             ; CODE XREF: sub_409084+5D↑j
.text:004091C5                 mov     [esp+28h+Format], (offset loc_40908B+1) ; Format
.text:004091CD                 mov     ecx, ds:_iob
.text:004091D3                 mov     edx, ds:dword_414560
.text:004091D9                 add     ecx, 40h ; '@'
.text:004091DC                 mov     [esp+28h+ArgList], edx
.text:004091E0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004091E3                 call    fprintf
.text:004091E8                 jmp     loc_4090E9
.text:004091E8 ; ---------------------------------------------------------------------------
.text:004091ED                 align 10h
.text:004091F0
.text:004091F0 loc_4091F0:                             ; CODE XREF: sub_409084+33↑j
.text:004091F0                 mov     eax, ds:Str1
.text:004091F5                 cmp     ebx, eax
.text:004091F7                 jz      loc_40916F
.text:004091FD                 mov     [esp+28h+Format], ebx ; Str2
.text:00409201                 mov     [esp+28h+Stream], eax ; Str1
.text:00409204                 call    strcmp
.text:00409209                 test    eax, eax
.text:0040920B                 jz      loc_40916F
.text:00409211                 jmp     loc_4090BD
.text:00409216 ; ---------------------------------------------------------------------------
.text:00409216
.text:00409216 loc_409216:                             ; CODE XREF: sub_409084+E5↑j
.text:00409216                 mov     [esp+28h+Stream], ebp ; Code
.text:00409219                 call    exit
.text:00409219 sub_409084      endp ; sp-analysis failed
.text:00409219
.text:00409219 ; ---------------------------------------------------------------------------
.text:0040921E                 align 10h
.text:00409220
.text:00409220 ; =============== S U B R O U T I N E =======================================
.text:00409220
.text:00409220
.text:00409220 sub_409220      proc near               ; CODE XREF: sub_404040+7C↑p
.text:00409220
.text:00409220 hNamedPipe      = dword ptr -0Ch
.text:00409220 var_8           = dword ptr -8
.text:00409220 var_4           = dword ptr -4
.text:00409220 arg_0           = dword ptr  4
.text:00409220 arg_4           = dword ptr  8
.text:00409220
.text:00409220                 sub     esp, 0Ch
.text:00409223                 mov     edx, [esp+0Ch+arg_4]
.text:00409227                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0040922E                 mov     [esp+0Ch+var_4], edx ; int
.text:00409232                 mov     edx, [esp+0Ch+arg_0]
.text:00409236                 mov     [esp+0Ch+var_8], edx ; int
.text:0040923A                 call    sub_409490
.text:0040923F                 add     esp, 0Ch
.text:00409242                 retn
.text:00409242 sub_409220      endp
.text:00409242
.text:00409242 ; ---------------------------------------------------------------------------
.text:00409243 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:00409243                                         ; DATA XREF: .text:0040932E↓o
.text:00409256 aModeO          db 'mode:      %#o',0Ah,0
.text:00409256                                         ; DATA XREF: .text:00409344↓o
.text:00409266 aUidLd          db 'uid:       %ld',0Ah,0
.text:00409266                                         ; DATA XREF: .text:00409357↓o
.text:00409276 aGidLd          db 'gid:       %ld',0Ah,0
.text:00409276                                         ; DATA XREF: .text:0040936A↓o
.text:00409286 aDevLu          db 'dev:       %lu',0Ah,0
.text:00409286                                         ; DATA XREF: .text:0040937D↓o
.text:00409296 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00409296                                         ; DATA XREF: .text:00409390↓o
.text:004092A6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:004092A6                                         ; DATA XREF: .text:004093A6↓o
.text:004092B8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:004092B8                                         ; DATA XREF: .text:004093BD↓o
.text:004092C7 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:004092C7                                         ; DATA XREF: .text:004093D3↓o
.text:004092D9 aAtimeLdS       db 'atime:     %ld: %s',0
.text:004092D9                                         ; DATA XREF: .text:004093F9↓o
.text:004092EC aMtimeLdS       db 'mtime:     %ld: %s',0
.text:004092EC                                         ; DATA XREF: .text:0040941B↓o
.text:004092FF aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:004092FF                                         ; DATA XREF: .text:0040943D↓o
.text:00409313                 align 10h
.text:00409320                 push    ebx
.text:00409321                 sub     esp, 18h
.text:00409324                 mov     ebx, [esp+20h]
.text:00409328                 mov     edx, [ebx+8]
.text:0040932B                 mov     ecx, [ebx+0Ch]
.text:0040932E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00409335                 mov     [esp+4], edx
.text:00409339                 mov     [esp+8], ecx
.text:0040933D                 call    printf
.text:00409342                 mov     ecx, [ebx]
.text:00409344                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0040934B                 mov     [esp+4], ecx
.text:0040934F                 call    printf
.text:00409354                 mov     edx, [ebx+1Ch]
.text:00409357                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0040935E                 mov     [esp+4], edx
.text:00409362                 call    printf
.text:00409367                 mov     ecx, [ebx+20h]
.text:0040936A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00409371                 mov     [esp+4], ecx
.text:00409375                 call    printf
.text:0040937A                 mov     edx, [ebx+10h]
.text:0040937D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00409384                 mov     [esp+4], edx
.text:00409388                 call    printf
.text:0040938D                 mov     ecx, [ebx+18h]
.text:00409390                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00409397                 mov     [esp+4], ecx
.text:0040939B                 call    printf
.text:004093A0                 mov     edx, [ebx+30h]
.text:004093A3                 mov     ecx, [ebx+34h]
.text:004093A6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:004093AD                 mov     [esp+4], edx
.text:004093B1                 mov     [esp+8], ecx
.text:004093B5                 call    printf
.text:004093BA                 mov     ecx, [ebx+50h]
.text:004093BD                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:004093C4                 mov     [esp+4], ecx
.text:004093C8                 call    printf
.text:004093CD                 mov     ecx, [ebx+5Ch]
.text:004093D0                 mov     edx, [ebx+58h]
.text:004093D3                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:004093DA                 mov     [esp+8], ecx
.text:004093DE                 mov     [esp+4], edx
.text:004093E2                 call    printf
.text:004093E7                 lea     edx, [ebx+38h]
.text:004093EA                 mov     [esp], edx
.text:004093ED                 call    ctime
.text:004093F2                 mov     [esp+8], eax
.text:004093F6                 mov     ecx, [ebx+38h]
.text:004093F9                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00409400                 mov     [esp+4], ecx
.text:00409404                 call    printf
.text:00409409                 lea     edx, [ebx+40h]
.text:0040940C                 mov     [esp], edx
.text:0040940F                 call    ctime
.text:00409414                 mov     [esp+8], eax
.text:00409418                 mov     ecx, [ebx+40h]
.text:0040941B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00409422                 mov     [esp+4], ecx
.text:00409426                 call    printf
.text:0040942B                 lea     edx, [ebx+48h]
.text:0040942E                 mov     [esp], edx
.text:00409431                 call    ctime
.text:00409436                 mov     [esp+8], eax
.text:0040943A                 mov     edx, [ebx+48h]
.text:0040943D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:00409444                 mov     [esp+4], edx
.text:00409448                 call    printf
.text:0040944D                 add     esp, 18h
.text:00409450                 xor     eax, eax
.text:00409452                 pop     ebx
.text:00409453                 retn
.text:00409453 ; ---------------------------------------------------------------------------
.text:00409454                 align 10h
.text:00409460 ; const char aFxstat64BadFil[]
.text:00409460 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00409460                                         ; DATA XREF: sub_409490+7B↓o
.text:00409484                 align 10h
.text:00409490
.text:00409490 ; =============== S U B R O U T I N E =======================================
.text:00409490
.text:00409490
.text:00409490 ; int __cdecl sub_409490(HANDLE hNamedPipe, int, int)
.text:00409490 sub_409490      proc near               ; CODE XREF: sub_409220+1A↑p
.text:00409490                                         ; .text:0040BE99↓p
.text:00409490
.text:00409490 FileHandle      = dword ptr -1Ch
.text:00409490 var_18          = dword ptr -18h
.text:00409490 var_C           = dword ptr -0Ch
.text:00409490 var_8           = dword ptr -8
.text:00409490 var_4           = dword ptr -4
.text:00409490 hNamedPipe      = dword ptr  4
.text:00409490 arg_4           = dword ptr  8
.text:00409490 arg_8           = dword ptr  0Ch
.text:00409490
.text:00409490                 sub     esp, 1Ch
.text:00409493                 mov     edx, [esp+1Ch+arg_4]
.text:00409497                 mov     [esp+1Ch+var_C], ebx
.text:0040949B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040949F                 mov     [esp+1Ch+var_8], esi
.text:004094A3                 mov     esi, [esp+1Ch+arg_8]
.text:004094A7                 test    ebx, ebx
.text:004094A9                 mov     [esp+1Ch+var_4], edi
.text:004094AD                 jnz     short loc_4094E7
.text:004094AF                 test    edx, edx
.text:004094B1                 js      short loc_409507
.text:004094B3                 test    esi, esi
.text:004094B5                 jz      short loc_4094E7
.text:004094B7                 cld
.text:004094B8                 mov     eax, ebx
.text:004094BA                 mov     edi, esi
.text:004094BC                 mov     ecx, 18h
.text:004094C1                 rep stosd
.text:004094C3                 mov     [esp+1Ch+arg_4], esi ; int
.text:004094C7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:004094CA                 call    _get_osfhandle
.text:004094CF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:004094D3                 mov     ebx, [esp+1Ch+var_C]
.text:004094D7                 mov     esi, [esp+1Ch+var_8]
.text:004094DB                 mov     edi, [esp+1Ch+var_4]
.text:004094DF                 add     esp, 1Ch
.text:004094E2                 jmp     sub_409870
.text:004094E7 ; ---------------------------------------------------------------------------
.text:004094E7
.text:004094E7 loc_4094E7:                             ; CODE XREF: sub_409490+1D↑j
.text:004094E7                                         ; sub_409490+25↑j
.text:004094E7                 call    _errno
.text:004094EC                 mov     dword ptr [eax], 16h
.text:004094F2
.text:004094F2 loc_4094F2:                             ; CODE XREF: sub_409490+92↓j
.text:004094F2                 mov     ebx, [esp+1Ch+var_C]
.text:004094F6                 mov     eax, 0FFFFFFFFh
.text:004094FB                 mov     esi, [esp+1Ch+var_8]
.text:004094FF                 mov     edi, [esp+1Ch+var_4]
.text:00409503                 add     esp, 1Ch
.text:00409506                 retn
.text:00409507 ; ---------------------------------------------------------------------------
.text:00409507
.text:00409507 loc_409507:                             ; CODE XREF: sub_409490+21↑j
.text:00409507                 mov     [esp+1Ch+var_18], edx
.text:0040950B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00409512                 call    printf
.text:00409517                 call    _errno
.text:0040951C                 mov     dword ptr [eax], 9
.text:00409522                 jmp     short loc_4094F2
.text:00409522 sub_409490      endp
.text:00409522
.text:00409522 ; ---------------------------------------------------------------------------
.text:00409524                 align 20h
.text:00409540 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00409540                                         ; DATA XREF: .data:off_413064↓o
.text:00409554 ; const CHAR LibFileName[]
.text:00409554 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_409580+11↓o
.text:00409554                                         ; sub_4096F0+C↓o ...
.text:00409561 ; const CHAR ProcName[]
.text:00409561 ProcName        db 'GetFileAttributesExA',0
.text:00409561                                         ; DATA XREF: sub_409580+28↓o
.text:00409576                 align 10h
.text:00409580
.text:00409580 ; =============== S U B R O U T I N E =======================================
.text:00409580
.text:00409580
.text:00409580 ; int __cdecl sub_409580(LPCSTR lpFileName, int)
.text:00409580 sub_409580      proc near               ; CODE XREF: .text:0040A724↓p
.text:00409580                                         ; sub_40AB20+37↓p
.text:00409580
.text:00409580 lpModuleName    = dword ptr -18Ch
.text:00409580 lpProcName      = dword ptr -188h
.text:00409580 var_184         = dword ptr -184h
.text:00409580 var_170         = dword ptr -170h
.text:00409580 var_164         = dword ptr -164h
.text:00409580 hModule         = dword ptr -160h
.text:00409580 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00409580 lpFileName      = dword ptr  4
.text:00409580 arg_4           = dword ptr  8
.text:00409580
.text:00409580                 push    ebp
.text:00409581                 push    edi
.text:00409582                 push    esi
.text:00409583                 push    ebx
.text:00409584                 sub     esp, 17Ch
.text:0040958A                 mov     ebx, [esp+18Ch+arg_4]
.text:00409591                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00409598                 call    GetModuleHandleA
.text:0040959D                 sub     esp, 4
.text:004095A0                 mov     [esp+18Ch+hModule], eax
.text:004095A4                 mov     edx, [esp+18Ch+hModule]
.text:004095A8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:004095B0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:004095B3                 call    GetProcAddress
.text:004095B8                 sub     esp, 8
.text:004095BB                 mov     ebp, eax
.text:004095BD                 mov     eax, [esp+18Ch+lpFileName]
.text:004095C4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:004095C7                 call    GetFileAttributesA
.text:004095CC                 sub     esp, 4
.text:004095CF                 mov     [esp+18Ch+var_164], eax
.text:004095D3                 xor     eax, eax
.text:004095D5                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:004095DA                 jz      short loc_409631
.text:004095DC                 cld
.text:004095DD                 mov     ecx, 50h ; 'P'
.text:004095E2                 lea     esi, [esp+18Ch+FindFileData]
.text:004095E6                 mov     edi, esi
.text:004095E8                 test    ebp, ebp
.text:004095EA                 rep stosd
.text:004095EC                 mov     [esp+18Ch+var_170], 0
.text:004095F4                 jz      short loc_409615
.text:004095F6                 mov     [esp+18Ch+var_184], ebx
.text:004095FA                 mov     ecx, [esp+18Ch+lpFileName]
.text:00409601                 mov     [esp+18Ch+lpProcName], 0
.text:00409609                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040960C                 call    ebp
.text:0040960E                 sub     esp, 0Ch
.text:00409611                 mov     [esp+18Ch+var_170], eax
.text:00409615
.text:00409615 loc_409615:                             ; CODE XREF: sub_409580+74↑j
.text:00409615                 mov     eax, [esp+18Ch+var_170]
.text:00409619                 test    eax, eax
.text:0040961B                 jz      short loc_409640
.text:0040961D
.text:0040961D loc_40961D:                             ; CODE XREF: sub_409580+131↓j
.text:0040961D                                         ; sub_409580+14B↓j
.text:0040961D                 mov     ebx, [esp+18Ch+hModule]
.text:00409621                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00409624                 call    FreeLibrary
.text:00409629                 sub     esp, 4
.text:0040962C                 mov     eax, 1
.text:00409631
.text:00409631 loc_409631:                             ; CODE XREF: sub_409580+5A↑j
.text:00409631                 add     esp, 17Ch
.text:00409637                 pop     ebx
.text:00409638                 pop     esi
.text:00409639                 pop     edi
.text:0040963A                 pop     ebp
.text:0040963B                 retn
.text:0040963B ; ---------------------------------------------------------------------------
.text:0040963C                 align 10h
.text:00409640
.text:00409640 loc_409640:                             ; CODE XREF: sub_409580+9B↑j
.text:00409640                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00409644                 mov     edx, [esp+18Ch+lpFileName]
.text:0040964B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040964E                 call    FindFirstFileA
.text:00409653                 sub     esp, 8
.text:00409656                 xor     ecx, ecx
.text:00409658                 cmp     eax, 0FFFFFFFFh
.text:0040965B                 setnz   cl
.text:0040965E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00409662                 mov     [ebx], edi
.text:00409664                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00409668                 mov     [esp+18Ch+var_170], ecx
.text:0040966C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00409670                 mov     [ebx+8], esi
.text:00409673                 mov     [ebx+4], ecx
.text:00409676                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040967A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040967E                 mov     [ebx+0Ch], ebp
.text:00409681                 mov     [ebx+10h], edi
.text:00409684                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00409688                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040968C                 mov     [ebx+18h], esi
.text:0040968F                 mov     [ebx+14h], ecx
.text:00409692                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00409696                 mov     [ebx+1Ch], ebp
.text:00409699                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040969D                 mov     [ebx+20h], edi
.text:004096A0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:004096A3                 call    FindClose
.text:004096A8                 sub     esp, 4
.text:004096AB                 mov     esi, [esp+18Ch+var_170]
.text:004096AF                 test    esi, esi
.text:004096B1                 jnz     loc_40961D
.text:004096B7                 cld
.text:004096B8                 mov     eax, [esp+18Ch+var_170]
.text:004096BC                 mov     ecx, 9
.text:004096C1                 mov     edi, ebx
.text:004096C3                 rep stosd
.text:004096C5                 mov     ebp, [esp+18Ch+var_164]
.text:004096C9                 mov     [ebx], ebp
.text:004096CB                 jmp     loc_40961D
.text:004096CB sub_409580      endp
.text:004096CB
.text:004096CB ; ---------------------------------------------------------------------------
.text:004096D0 ; const CHAR aFindfirstfilee[]
.text:004096D0 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_4096F0+23↓o
.text:004096E1 ; const char Source[]
.text:004096E1 Source          db '\*',0               ; DATA XREF: sub_4096F0:loc_40977D↓o
.text:004096E4                 align 10h
.text:004096F0
.text:004096F0 ; =============== S U B R O U T I N E =======================================
.text:004096F0
.text:004096F0
.text:004096F0 ; int __cdecl sub_4096F0(char *Str)
.text:004096F0 sub_4096F0      proc near               ; CODE XREF: .text:0040A823↓p
.text:004096F0                                         ; sub_40AB20+3FA↓p ...
.text:004096F0
.text:004096F0 lpLibFileName   = dword ptr -18Ch
.text:004096F0 lpProcName      = dword ptr -188h
.text:004096F0 var_184         = dword ptr -184h
.text:004096F0 var_180         = dword ptr -180h
.text:004096F0 var_17C         = dword ptr -17Ch
.text:004096F0 var_178         = dword ptr -178h
.text:004096F0 var_164         = dword ptr -164h
.text:004096F0 hModule         = dword ptr -160h
.text:004096F0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004096F0 Str             = dword ptr  4
.text:004096F0
.text:004096F0                 push    ebp
.text:004096F1                 push    edi
.text:004096F2                 xor     edi, edi
.text:004096F4                 push    esi
.text:004096F5                 push    ebx
.text:004096F6                 sub     esp, 17Ch
.text:004096FC                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00409703                 call    LoadLibraryA
.text:00409708                 sub     esp, 4
.text:0040970B                 mov     [esp+18Ch+hModule], eax
.text:0040970F                 mov     ecx, [esp+18Ch+hModule]
.text:00409713                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040971B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040971E                 call    GetProcAddress
.text:00409723                 sub     esp, 8
.text:00409726                 mov     edx, [esp+18Ch+Str]
.text:0040972D                 mov     [esp+18Ch+var_164], eax
.text:00409731                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00409734                 call    strlen
.text:00409739                 lea     edx, [eax+5]
.text:0040973C                 mov     ebx, eax
.text:0040973E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00409741                 call    malloc
.text:00409746                 mov     esi, eax
.text:00409748                 test    esi, esi
.text:0040974A                 mov     eax, 1
.text:0040974F                 jz      loc_40982D
.text:00409755                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00409758                 mov     ebp, [esp+18Ch+Str]
.text:0040975F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00409763                 call    strcpy
.text:00409768                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040976D                 cmp     al, 2Fh ; '/'
.text:0040976F                 jz      loc_40985B
.text:00409775                 cmp     al, 5Ch ; '\'
.text:00409777                 jz      loc_40985B
.text:0040977D
.text:0040977D loc_40977D:                             ; CODE XREF: sub_4096F0+170↓j
.text:0040977D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:00409785                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00409788                 call    strcat
.text:0040978D                 mov     eax, [esp+18Ch+var_164]
.text:00409791                 test    eax, eax
.text:00409793                 jz      loc_409855
.text:00409799                 mov     [esp+18Ch+var_178], 0
.text:004097A1                 lea     ebp, [esp+18Ch+FindFileData]
.text:004097A5                 mov     [esp+18Ch+var_17C], 0
.text:004097AD                 mov     [esp+18Ch+var_180], 1
.text:004097B5                 mov     [esp+18Ch+var_184], ebp
.text:004097B9                 mov     [esp+18Ch+lpProcName], 0
.text:004097C1                 mov     [esp+18Ch+lpLibFileName], esi
.text:004097C4                 call    [esp+18Ch+var_164]
.text:004097C8                 sub     esp, 18h
.text:004097CB                 mov     ebx, eax
.text:004097CD                 cmp     eax, 0FFFFFFFFh
.text:004097D0                 jz      short loc_409838
.text:004097D2                 lea     esi, [esi+0]
.text:004097D9                 lea     edi, [edi+0]
.text:004097E0
.text:004097E0 loc_4097E0:                             ; CODE XREF: sub_4096F0+109↓j
.text:004097E0                                         ; sub_4096F0+161↓j
.text:004097E0                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:004097E5                 jz      short loc_4097E8
.text:004097E7                 inc     edi
.text:004097E8
.text:004097E8 loc_4097E8:                             ; CODE XREF: sub_4096F0+F5↑j
.text:004097E8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:004097EC                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:004097EF                 call    FindNextFileA
.text:004097F4                 sub     esp, 8
.text:004097F7                 test    eax, eax
.text:004097F9                 jnz     short loc_4097E0
.text:004097FB                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:004097FE                 call    FindClose
.text:00409803                 sub     esp, 4
.text:00409806                 mov     esi, [esp+18Ch+hModule]
.text:0040980A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040980D                 call    FreeLibrary
.text:00409812                 sub     esp, 4
.text:00409815                 mov     ebx, [esp+18Ch+Str]
.text:0040981C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040981F                 call    sub_40BF30
.text:00409824                 test    eax, eax
.text:00409826                 jz      short loc_40982B
.text:00409828                 add     edi, 2
.text:0040982B
.text:0040982B loc_40982B:                             ; CODE XREF: sub_4096F0+136↑j
.text:0040982B                 mov     eax, edi
.text:0040982D
.text:0040982D loc_40982D:                             ; CODE XREF: sub_4096F0+5F↑j
.text:0040982D                                         ; sub_4096F0+163↓j
.text:0040982D                 add     esp, 17Ch
.text:00409833                 pop     ebx
.text:00409834                 pop     esi
.text:00409835                 pop     edi
.text:00409836                 pop     ebp
.text:00409837                 retn
.text:00409838 ; ---------------------------------------------------------------------------
.text:00409838
.text:00409838 loc_409838:                             ; CODE XREF: sub_4096F0+E0↑j
.text:00409838                                         ; sub_4096F0+169↓j
.text:00409838                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040983C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040983F                 call    FindFirstFileA
.text:00409844                 mov     ebx, eax
.text:00409846                 sub     esp, 8
.text:00409849                 cmp     ebx, 0FFFFFFFFh
.text:0040984C                 mov     eax, 2
.text:00409851                 jnz     short loc_4097E0
.text:00409853                 jmp     short loc_40982D
.text:00409855 ; ---------------------------------------------------------------------------
.text:00409855
.text:00409855 loc_409855:                             ; CODE XREF: sub_4096F0+A3↑j
.text:00409855                 lea     ebp, [esp+18Ch+FindFileData]
.text:00409859                 jmp     short loc_409838
.text:0040985B ; ---------------------------------------------------------------------------
.text:0040985B
.text:0040985B loc_40985B:                             ; CODE XREF: sub_4096F0+7F↑j
.text:0040985B                                         ; sub_4096F0+87↑j
.text:0040985B                 mov     byte ptr [ebx+esi-1], 0
.text:00409860                 jmp     loc_40977D
.text:00409860 sub_4096F0      endp
.text:00409860
.text:00409860 ; ---------------------------------------------------------------------------
.text:00409865                 align 10h
.text:00409870
.text:00409870 ; =============== S U B R O U T I N E =======================================
.text:00409870
.text:00409870
.text:00409870 ; int __cdecl sub_409870(HANDLE hNamedPipe, int)
.text:00409870 sub_409870      proc near               ; CODE XREF: sub_409490+52↑j
.text:00409870                                         ; sub_40B0A0-B9↓p
.text:00409870
.text:00409870 hFile           = dword ptr -0ECh
.text:00409870 lpFileInformation= dword ptr -0E8h
.text:00409870 nBufferSize     = dword ptr -0E4h
.text:00409870 lpBytesRead     = dword ptr -0E0h
.text:00409870 lpTotalBytesAvail= dword ptr -0DCh
.text:00409870 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00409870 var_C4          = dword ptr -0C4h
.text:00409870 var_C0          = dword ptr -0C0h
.text:00409870 var_BC          = dword ptr -0BCh
.text:00409870 var_B8          = dword ptr -0B8h
.text:00409870 var_B4          = dword ptr -0B4h
.text:00409870 var_B0          = dword ptr -0B0h
.text:00409870 var_AC          = dword ptr -0ACh
.text:00409870 var_A8          = dword ptr -0A8h
.text:00409870 TotalBytesAvail = dword ptr -0A0h
.text:00409870 var_9C          = dword ptr -9Ch
.text:00409870 var_98          = dword ptr -98h
.text:00409870 var_94          = dword ptr -94h
.text:00409870 var_90          = dword ptr -90h
.text:00409870 var_8C          = dword ptr -8Ch
.text:00409870 var_88          = dword ptr -88h
.text:00409870 var_84          = dword ptr -84h
.text:00409870 var_80          = dword ptr -80h
.text:00409870 var_7C          = dword ptr -7Ch
.text:00409870 var_78          = dword ptr -78h
.text:00409870 var_74          = dword ptr -74h
.text:00409870 var_70          = dword ptr -70h
.text:00409870 var_6C          = dword ptr -6Ch
.text:00409870 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00409870 hNamedPipe      = dword ptr  4
.text:00409870 arg_4           = dword ptr  8
.text:00409870
.text:00409870                 push    ebp
.text:00409871                 mov     eax, 0FFFFFFFFh
.text:00409876                 push    edi
.text:00409877                 push    esi
.text:00409878                 push    ebx
.text:00409879                 sub     esp, 0DCh
.text:0040987F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00409886                 mov     ebp, [esp+0ECh+arg_4]
.text:0040988D                 cmp     esi, 0FFFFFFFFh
.text:00409890                 jz      loc_409C11
.text:00409896                 cld
.text:00409897                 xor     eax, eax
.text:00409899                 lea     ebx, [esp+0ECh+FileInformation]
.text:004098A0                 mov     ecx, 0Dh
.text:004098A5                 mov     edi, ebx
.text:004098A7                 rep stosd
.text:004098A9                 mov     dword ptr [ebp+18h], 1
.text:004098B0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004098B3                 call    GetFileType
.text:004098B8                 sub     esp, 4
.text:004098BB                 xor     edx, edx
.text:004098BD                 cmp     eax, 2
.text:004098C0                 jz      loc_409CF0
.text:004098C6                 cmp     eax, 3
.text:004098C9                 jz      loc_409CE0
.text:004098CF
.text:004098CF loc_4098CF:                             ; CODE XREF: sub_409870+475↓j
.text:004098CF                                         ; sub_409870+485↓j
.text:004098CF                 or      [ebp+0], edx
.text:004098D2                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:004098D6                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004098D9                 call    GetFileInformationByHandle
.text:004098DE                 sub     esp, 8
.text:004098E1                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:004098E8                 test    ecx, ecx
.text:004098EA                 jnz     short loc_409920
.text:004098EC                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004098F3                 test    edx, edx
.text:004098F5                 jnz     short loc_409920
.text:004098F7                 mov     edx, [ebp+0]
.text:004098FA                 and     edx, 0F000h
.text:00409900                 cmp     edx, 1000h
.text:00409906                 jz      loc_409C76
.text:0040990C
.text:0040990C loc_40990C:                             ; CODE XREF: sub_409870+459↓j
.text:0040990C                                         ; sub_409870+465↓j
.text:0040990C                 test    ecx, ecx
.text:0040990E                 jnz     short loc_409920
.text:00409910                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409917                 test    edx, edx
.text:00409919                 jz      loc_409C54
.text:0040991F                 nop
.text:00409920
.text:00409920 loc_409920:                             ; CODE XREF: sub_409870+7A↑j
.text:00409920                                         ; sub_409870+85↑j ...
.text:00409920                 cld
.text:00409921                 mov     esi, ebx
.text:00409923                 mov     dword ptr [ebp+14h], 0
.text:0040992A                 lea     edi, [esp+0ECh+var_9C]
.text:0040992E                 mov     ecx, 0Dh
.text:00409933                 rep movsd
.text:00409935                 xor     ebx, ebx
.text:00409937                 xor     edi, edi
.text:00409939                 mov     edx, [esp+0ECh+var_6C]
.text:00409940                 mov     esi, [esp+0ECh+var_70]
.text:00409944                 or      edx, ebx
.text:00409946                 mov     ebx, [esp+0ECh+var_9C]
.text:0040994A                 mov     [ebp+8], edx
.text:0040994D                 or      edi, esi
.text:0040994F                 xor     edx, edx
.text:00409951                 mov     [ebp+0Ch], edi
.text:00409954                 test    bl, 10h
.text:00409957                 mov     esi, [esp+0ECh+var_80]
.text:0040995B                 setz    dl
.text:0040995E                 mov     [ebp+10h], esi
.text:00409961                 dec     edx
.text:00409962                 and     edx, 0FFFFC000h
.text:00409968                 add     edx, 8000h
.text:0040996E                 or      edx, 124h
.text:00409974                 test    bl, 1
.text:00409977                 movzx   eax, dx
.text:0040997A                 jnz     short loc_409981
.text:0040997C                 or      eax, 92h
.text:00409981
.text:00409981 loc_409981:                             ; CODE XREF: sub_409870+10A↑j
.text:00409981                 or      [ebp+0], eax
.text:00409984                 xor     edx, edx
.text:00409986                 mov     ebx, [esp+0ECh+var_7C]
.text:0040998A                 mov     ecx, [esp+0ECh+var_78]
.text:0040998E                 mov     eax, edx
.text:00409990                 xor     esi, esi
.text:00409992                 mov     edx, [esp+0ECh+var_8C]
.text:00409996                 mov     edi, ebx
.text:00409998                 or      eax, edi
.text:0040999A                 mov     [esp+0ECh+var_A8], eax
.text:0040999E                 mov     ebx, ecx
.text:004099A0                 mov     edi, [esp+0ECh+var_74]
.text:004099A4                 or      ebx, esi
.text:004099A6                 mov     esi, [esp+0ECh+var_A8]
.text:004099AA                 mov     [esp+0ECh+var_AC], ebx
.text:004099AE                 xor     ebx, ebx
.text:004099B0                 mov     ecx, [esp+0ECh+var_AC]
.text:004099B4                 mov     [ebp+34h], esi
.text:004099B7                 mov     esi, [esp+0ECh+var_90]
.text:004099BB                 mov     [ebp+18h], edi
.text:004099BE                 xor     edi, edi
.text:004099C0                 or      esi, ebx
.text:004099C2                 mov     [ebp+30h], ecx
.text:004099C5                 or      edi, edx
.text:004099C7                 mov     edx, esi
.text:004099C9                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004099D1                 sub     edx, 0D53E8000h
.text:004099D7                 mov     ebx, edi
.text:004099D9                 sbb     ebx, 19DB1DEh
.text:004099DF                 mov     [esp+0ECh+lpFileInformation], ebx
.text:004099E3                 mov     [esp+0ECh+lpBytesRead], 0
.text:004099EB                 mov     [esp+0ECh+hFile], edx
.text:004099EE                 call    sub_411FF0
.text:004099F3                 mov     ecx, eax
.text:004099F5                 shr     eax, 1Fh
.text:004099F8                 dec     eax
.text:004099F9                 and     ecx, eax
.text:004099FB                 mov     [ebp+38h], ecx
.text:004099FE                 mov     [esp+0ECh+hFile], esi
.text:00409A01                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409A05                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409A0D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409A15                 call    sub_411E70
.text:00409A1A                 lea     ebx, [eax+eax*4]
.text:00409A1D                 xor     ecx, ecx
.text:00409A1F                 lea     esi, [ebx+ebx*4]
.text:00409A22                 shl     esi, 2
.text:00409A25                 mov     edi, esi
.text:00409A27                 shr     edi, 1Fh
.text:00409A2A                 dec     edi
.text:00409A2B                 and     edi, esi
.text:00409A2D                 mov     [ebp+3Ch], edi
.text:00409A30                 mov     esi, [esp+0ECh+var_98]
.text:00409A34                 xor     edi, edi
.text:00409A36                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409A3E                 mov     edx, [esp+0ECh+var_94]
.text:00409A42                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409A4A                 or      esi, ecx
.text:00409A4C                 or      edi, edx
.text:00409A4E                 mov     edx, esi
.text:00409A50                 mov     ecx, edi
.text:00409A52                 sub     edx, 0D53E8000h
.text:00409A58                 sbb     ecx, 19DB1DEh
.text:00409A5E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00409A62                 mov     [esp+0ECh+hFile], edx
.text:00409A65                 call    sub_411FF0
.text:00409A6A                 mov     ebx, eax
.text:00409A6C                 shr     eax, 1Fh
.text:00409A6F                 dec     eax
.text:00409A70                 and     ebx, eax
.text:00409A72                 mov     [ebp+48h], ebx
.text:00409A75                 xor     ebx, ebx
.text:00409A77                 mov     [esp+0ECh+hFile], esi
.text:00409A7A                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409A7E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409A86                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409A8E                 call    sub_411E70
.text:00409A93                 lea     ecx, [eax+eax*4]
.text:00409A96                 lea     esi, [ecx+ecx*4]
.text:00409A99                 shl     esi, 2
.text:00409A9C                 mov     edi, esi
.text:00409A9E                 shr     edi, 1Fh
.text:00409AA1                 dec     edi
.text:00409AA2                 and     edi, esi
.text:00409AA4                 mov     [ebp+4Ch], edi
.text:00409AA7                 mov     esi, [esp+0ECh+var_88]
.text:00409AAB                 xor     edi, edi
.text:00409AAD                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409AB5                 mov     edx, [esp+0ECh+var_84]
.text:00409AB9                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409AC1                 or      esi, ebx
.text:00409AC3                 or      edi, edx
.text:00409AC5                 mov     edx, esi
.text:00409AC7                 mov     ebx, edi
.text:00409AC9                 sub     edx, 0D53E8000h
.text:00409ACF                 sbb     ebx, 19DB1DEh
.text:00409AD5                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00409AD9                 mov     [esp+0ECh+hFile], edx
.text:00409ADC                 call    sub_411FF0
.text:00409AE1                 mov     ecx, eax
.text:00409AE3                 shr     eax, 1Fh
.text:00409AE6                 dec     eax
.text:00409AE7                 and     ecx, eax
.text:00409AE9                 mov     [ebp+40h], ecx
.text:00409AEC                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409AF0                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409AF8                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409B00                 mov     [esp+0ECh+hFile], esi
.text:00409B03                 call    sub_411E70
.text:00409B08                 mov     dword ptr [ebp+50h], 200h
.text:00409B0F                 lea     ebx, [eax+eax*4]
.text:00409B12                 mov     edi, [esp+0ECh+var_A8]
.text:00409B16                 lea     edx, [ebx+ebx*4]
.text:00409B19                 mov     eax, [esp+0ECh+var_AC]
.text:00409B1D                 shl     edx, 2
.text:00409B20                 mov     ecx, edx
.text:00409B22                 shr     ecx, 1Fh
.text:00409B25                 dec     ecx
.text:00409B26                 and     ecx, edx
.text:00409B28                 test    edi, edi
.text:00409B2A                 mov     edx, [esp+0ECh+var_A8]
.text:00409B2E                 mov     [ebp+44h], ecx
.text:00409B31                 js      loc_409C47
.text:00409B37
.text:00409B37 loc_409B37:                             ; CODE XREF: sub_409870+3DF↓j
.text:00409B37                 mov     edi, [esp+0ECh+var_AC]
.text:00409B3B                 xor     esi, esi
.text:00409B3D                 mov     ecx, eax
.text:00409B3F                 shrd    ecx, edx, 9
.text:00409B43                 mov     ebx, edx
.text:00409B45                 mov     eax, esi
.text:00409B47                 and     edi, 1FFh
.text:00409B4D                 sar     ebx, 9
.text:00409B50                 or      eax, edi
.text:00409B52                 jz      short loc_409B5A
.text:00409B54                 add     ecx, 1
.text:00409B57                 adc     ebx, 0
.text:00409B5A
.text:00409B5A loc_409B5A:                             ; CODE XREF: sub_409870+2E2↑j
.text:00409B5A                 mov     [ebp+5Ch], ebx
.text:00409B5D                 mov     esi, dword_413060
.text:00409B63                 xor     edi, edi
.text:00409B65                 mov     [ebp+58h], ecx
.text:00409B68                 mov     ebx, dword_413060
.text:00409B6E                 mov     ecx, [esp+0ECh+var_A8]
.text:00409B72                 mov     edx, [esp+0ECh+var_AC]
.text:00409B76                 mov     [ebp+50h], ebx
.text:00409B79                 shr     ebx, 9
.text:00409B7C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00409B80                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00409B84                 mov     [esp+0ECh+nBufferSize], esi
.text:00409B88                 mov     [esp+0ECh+hFile], edx
.text:00409B8B                 call    sub_411FF0
.text:00409B90                 mov     [esp+0ECh+lpBytesRead], edi
.text:00409B94                 mov     ecx, [esp+0ECh+var_AC]
.text:00409B98                 mov     edi, [esp+0ECh+var_A8]
.text:00409B9C                 mov     [esp+0ECh+var_BC], ebx
.text:00409BA0                 mov     [esp+0ECh+var_B4], eax
.text:00409BA4                 mov     [esp+0ECh+var_B0], edx
.text:00409BA8                 mov     [esp+0ECh+var_B8], 0
.text:00409BB0                 mov     [esp+0ECh+nBufferSize], esi
.text:00409BB4                 mov     [esp+0ECh+hFile], ecx
.text:00409BB7                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409BBB                 call    sub_411E70
.text:00409BC0                 mov     ebx, edx
.text:00409BC2                 or      ebx, eax
.text:00409BC4                 jz      short loc_409C20
.text:00409BC6                 mov     edi, [esp+0ECh+var_B4]
.text:00409BCA                 mov     esi, [esp+0ECh+var_B0]
.text:00409BCE                 mov     eax, [esp+0ECh+var_BC]
.text:00409BD2                 mov     [esp+0ECh+var_C4], edi
.text:00409BD6                 mov     ecx, [esp+0ECh+var_B8]
.text:00409BDA                 add     [esp+0ECh+var_C4], 1
.text:00409BDF                 mov     [esp+0ECh+var_C0], esi
.text:00409BE3                 adc     [esp+0ECh+var_C0], 0
.text:00409BE8                 mul     [esp+0ECh+var_C4]
.text:00409BEC                 mov     edi, [esp+0ECh+var_C0]
.text:00409BF0                 mov     ebx, edx
.text:00409BF2                 mov     edx, [esp+0ECh+var_C4]
.text:00409BF6                 mov     esi, eax
.text:00409BF8                 mov     eax, ebx
.text:00409BFA                 imul    ecx, edx
.text:00409BFD                 mov     edx, [esp+0ECh+var_BC]
.text:00409C01                 imul    edx, edi
.text:00409C04                 add     eax, ecx
.text:00409C06                 lea     edi, [edx+eax]
.text:00409C09
.text:00409C09 loc_409C09:                             ; CODE XREF: sub_409870+3D5↓j
.text:00409C09                 mov     [ebp+58h], esi
.text:00409C0C                 xor     eax, eax
.text:00409C0E                 mov     [ebp+5Ch], edi
.text:00409C11
.text:00409C11 loc_409C11:                             ; CODE XREF: sub_409870+20↑j
.text:00409C11                 add     esp, 0DCh
.text:00409C17                 pop     ebx
.text:00409C18                 pop     esi
.text:00409C19                 pop     edi
.text:00409C1A                 pop     ebp
.text:00409C1B                 retn
.text:00409C1B ; ---------------------------------------------------------------------------
.text:00409C1C                 align 10h
.text:00409C20
.text:00409C20 loc_409C20:                             ; CODE XREF: sub_409870+354↑j
.text:00409C20                 mov     eax, [esp+0ECh+var_B4]
.text:00409C24                 mov     edi, [esp+0ECh+var_B8]
.text:00409C28                 mov     ebx, [esp+0ECh+var_B4]
.text:00409C2C                 mul     [esp+0ECh+var_BC]
.text:00409C30                 mov     ecx, [esp+0ECh+var_BC]
.text:00409C34                 imul    ebx, edi
.text:00409C37                 mov     esi, eax
.text:00409C39                 mov     eax, [esp+0ECh+var_B0]
.text:00409C3D                 add     edx, ebx
.text:00409C3F                 imul    ecx, eax
.text:00409C42                 lea     edi, [ecx+edx]
.text:00409C45                 jmp     short loc_409C09
.text:00409C47 ; ---------------------------------------------------------------------------
.text:00409C47
.text:00409C47 loc_409C47:                             ; CODE XREF: sub_409870+2C1↑j
.text:00409C47                 add     eax, 1FFh
.text:00409C4C                 adc     edx, 0
.text:00409C4F                 jmp     loc_409B37
.text:00409C54 ; ---------------------------------------------------------------------------
.text:00409C54
.text:00409C54 loc_409C54:                             ; CODE XREF: sub_409870+A9↑j
.text:00409C54                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409C57                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409C5E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00409C62                 call    GetFileSize
.text:00409C67                 sub     esp, 8
.text:00409C6A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00409C71                 jmp     loc_409920
.text:00409C76 ; ---------------------------------------------------------------------------
.text:00409C76
.text:00409C76 loc_409C76:                             ; CODE XREF: sub_409870+96↑j
.text:00409C76                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:00409C7E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00409C82                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:00409C8A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:00409C8E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00409C96                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:00409C9E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00409CA6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00409CA9                 call    PeekNamedPipe
.text:00409CAE                 sub     esp, 18h
.text:00409CB1                 test    eax, eax
.text:00409CB3                 jz      short loc_409CCE
.text:00409CB5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00409CB9                 xor     eax, eax
.text:00409CBB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00409CC2                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00409CC9                 jmp     loc_40990C
.text:00409CCE ; ---------------------------------------------------------------------------
.text:00409CCE
.text:00409CCE loc_409CCE:                             ; CODE XREF: sub_409870+443↑j
.text:00409CCE                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00409CD5                 jmp     loc_40990C
.text:00409CD5 ; ---------------------------------------------------------------------------
.text:00409CDA                 align 10h
.text:00409CE0
.text:00409CE0 loc_409CE0:                             ; CODE XREF: sub_409870+59↑j
.text:00409CE0                 mov     edx, 1000h
.text:00409CE5                 jmp     loc_4098CF
.text:00409CE5 ; ---------------------------------------------------------------------------
.text:00409CEA                 align 10h
.text:00409CF0
.text:00409CF0 loc_409CF0:                             ; CODE XREF: sub_409870+50↑j
.text:00409CF0                 mov     edx, 2000h
.text:00409CF5                 jmp     loc_4098CF
.text:00409CF5 sub_409870      endp
.text:00409CF5
.text:00409CF5 ; ---------------------------------------------------------------------------
.text:00409CFA aLnk            db '.lnk',0             ; DATA XREF: sub_409D40+E0↓o
.text:00409CFA                                         ; .text:0040A3EA↓o ...
.text:00409CFF ; const CHAR aKernel32[]
.text:00409CFF aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_409D40+12D↓o
.text:00409CFF                                         ; .text:0040AA9B↓o
.text:00409D08 ; const CHAR aGetcompressedf[]
.text:00409D08 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00409D08                                         ; DATA XREF: sub_409D40+13E↓o
.text:00409D08                                         ; .text:0040AAAC↓o
.text:00409D1F ; const CHAR aGetbinarytypea[]
.text:00409D1F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_409D40+333↓o
.text:00409D1F                                         ; .text:0040A446↓o ...
.text:00409D2E ; const char VarName[]
.text:00409D2E VarName         db 'PATHEXT',0          ; DATA XREF: sub_409D40:loc_40A127↓o
.text:00409D2E                                         ; .text:loc_40A4F0↓o ...
.text:00409D36                 align 10h
.text:00409D40
.text:00409D40 ; =============== S U B R O U T I N E =======================================
.text:00409D40
.text:00409D40
.text:00409D40 ; int __cdecl sub_409D40(char *String1, int)
.text:00409D40 sub_409D40      proc near               ; CODE XREF: sub_40AB20+3CD↓p
.text:00409D40                                         ; sub_40B0A0-9B↓p
.text:00409D40
.text:00409D40 Str             = dword ptr -6Ch
.text:00409D40 lpProcName      = dword ptr -68h
.text:00409D40 var_64          = dword ptr -64h
.text:00409D40 var_60          = dword ptr -60h
.text:00409D40 var_5C          = dword ptr -5Ch
.text:00409D40 var_4C          = dword ptr -4Ch
.text:00409D40 var_48          = dword ptr -48h
.text:00409D40 var_44          = dword ptr -44h
.text:00409D40 var_40          = dword ptr -40h
.text:00409D40 var_3C          = dword ptr -3Ch
.text:00409D40 var_38          = dword ptr -38h
.text:00409D40 lpRootPathName  = dword ptr -30h
.text:00409D40 var_2C          = byte ptr -2Ch
.text:00409D40 var_28          = dword ptr -28h
.text:00409D40 var_24          = dword ptr -24h
.text:00409D40 var_20          = dword ptr -20h
.text:00409D40 var_1C          = dword ptr -1Ch
.text:00409D40 var_18          = byte ptr -18h
.text:00409D40 String1         = dword ptr  4
.text:00409D40 arg_4           = dword ptr  8
.text:00409D40
.text:00409D40                 push    ebp
.text:00409D41                 push    edi
.text:00409D42                 push    esi
.text:00409D43                 push    ebx
.text:00409D44                 sub     esp, 5Ch
.text:00409D47                 mov     edx, [esp+6Ch+String1]
.text:00409D4B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00409D4E                 call    sub_40BB60
.text:00409D53                 mov     [esp+6Ch+Str], eax
.text:00409D56                 call    sub_40B540
.text:00409D5B                 mov     [esp+6Ch+lpRootPathName], eax
.text:00409D5F                 test    eax, eax
.text:00409D61                 jz      loc_409F93
.text:00409D67                 mov     [esp+6Ch+Str], eax ; Str
.text:00409D6A                 call    strlen
.text:00409D6F                 mov     edx, [esp+6Ch+arg_4]
.text:00409D73                 mov     ebx, eax
.text:00409D75                 mov     esi, [edx+0Ch]
.text:00409D78                 mov     edi, [edx+8]
.text:00409D7B                 mov     eax, esi
.text:00409D7D                 or      eax, edi
.text:00409D7F                 jz      loc_40A1A0
.text:00409D85                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00409D89                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:00409D8C                 call    GetDriveTypeA
.text:00409D91                 sub     esp, 4
.text:00409D94                 cmp     eax, 4
.text:00409D97                 jz      loc_40A1A0
.text:00409D9D
.text:00409D9D loc_409D9D:                             ; CODE XREF: sub_409D40+48A↓j
.text:00409D9D                                         ; sub_409D40+4B2↓j
.text:00409D9D                 mov     edx, [esp+6Ch+arg_4]
.text:00409DA1                 mov     esi, [edx+14h]
.text:00409DA4                 mov     edi, [edx+10h]
.text:00409DA7                 mov     ecx, esi
.text:00409DA9                 or      ecx, edi
.text:00409DAB                 jnz     short loc_409DD5
.text:00409DAD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00409DB1                 xor     esi, esi
.text:00409DB3                 xor     edi, edi
.text:00409DB5                 test    ebp, ebp
.text:00409DB7                 jz      short loc_409DC7
.text:00409DB9                 movzx   ebx, byte ptr [ebp+0]
.text:00409DBD                 test    bl, bl
.text:00409DBF                 mov     cl, bl
.text:00409DC1                 jnz     loc_40A151
.text:00409DC7
.text:00409DC7 loc_409DC7:                             ; CODE XREF: sub_409D40+77↑j
.text:00409DC7                 xor     eax, eax
.text:00409DC9                 xor     edx, edx
.text:00409DCB
.text:00409DCB loc_409DCB:                             ; CODE XREF: sub_409D40+458↓j
.text:00409DCB                 mov     ebp, [esp+6Ch+arg_4]
.text:00409DCF                 mov     [ebp+10h], eax
.text:00409DD2                 mov     [ebp+14h], edx
.text:00409DD5
.text:00409DD5 loc_409DD5:                             ; CODE XREF: sub_409D40+6B↑j
.text:00409DD5                 mov     edi, [esp+6Ch+String1]
.text:00409DD9                 xor     ebx, ebx
.text:00409DDB                 test    edi, edi
.text:00409DDD                 jz      loc_40A053
.text:00409DE3                 mov     esi, [esp+6Ch+String1]
.text:00409DE7                 cmp     byte ptr [esi], 0
.text:00409DEA                 jnz     loc_40A060
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: sub_409D40+38C↓j
.text:00409DF0                                         ; sub_409D40+397↓j
.text:00409DF0                 mov     ebp, [esp+6Ch+String1]
.text:00409DF4                 test    ebp, ebp
.text:00409DF6                 jz      loc_40A053
.text:00409DFC                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00409E04                 mov     edi, [esp+6Ch+String1]
.text:00409E08                 mov     [esp+6Ch+Str], edi ; Str
.text:00409E0B                 call    strrchr
.text:00409E10                 test    eax, eax
.text:00409E12                 jz      loc_40A053
.text:00409E18                 cld
.text:00409E19                 mov     ecx, 5
.text:00409E1E                 mov     esi, eax
.text:00409E20                 mov     edi, offset aLnk ; ".lnk"
.text:00409E25                 repe cmpsb
.text:00409E27                 setz    cl
.text:00409E2A                 movzx   eax, cl
.text:00409E2D                 lea     esi, [esi+0]
.text:00409E30
.text:00409E30 loc_409E30:                             ; CODE XREF: sub_409D40+315↓j
.text:00409E30                 test    eax, eax
.text:00409E32                 jz      short loc_409E3A
.text:00409E34                 or      ebx, 0A000h
.text:00409E3A
.text:00409E3A loc_409E3A:                             ; CODE XREF: sub_409D40+F2↑j
.text:00409E3A                 mov     esi, [esp+6Ch+arg_4]
.text:00409E3E                 xor     ecx, ecx
.text:00409E40                 mov     edi, ds:dword_4141E0
.text:00409E46                 or      [esi], ebx
.text:00409E48                 mov     ebx, [esi+14h]
.text:00409E4B                 mov     ebp, [esi+10h]
.text:00409E4E                 mov     eax, ebx
.text:00409E50                 xor     eax, ecx
.text:00409E52                 xor     ebp, edi
.text:00409E54                 or      eax, ebp
.text:00409E56                 jnz     loc_409FE0
.text:00409E5C
.text:00409E5C loc_409E5C:                             ; CODE XREF: sub_409D40+30E↓j
.text:00409E5C                 mov     ecx, dword_413060
.text:00409E62                 xor     esi, esi
.text:00409E64                 xor     edi, edi
.text:00409E66                 mov     edx, [esp+6Ch+arg_4]
.text:00409E6A                 mov     [edx+50h], ecx
.text:00409E6D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00409E74                 call    LoadLibraryA
.text:00409E79                 sub     esp, 4
.text:00409E7C                 mov     ebp, eax
.text:00409E7E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00409E86                 mov     [esp+6Ch+Str], eax ; hModule
.text:00409E89                 call    GetProcAddress
.text:00409E8E                 sub     esp, 8
.text:00409E91                 test    eax, eax
.text:00409E93                 jz      short loc_409EC8
.text:00409E95                 mov     ebx, [esp+6Ch+String1]
.text:00409E99                 lea     esi, [esp+6Ch+var_2C]
.text:00409E9D                 mov     [esp+6Ch+lpProcName], esi
.text:00409EA1                 mov     [esp+6Ch+Str], ebx
.text:00409EA4                 call    eax
.text:00409EA6                 sub     esp, 8
.text:00409EA9                 mov     ebx, eax
.text:00409EAB                 cmp     eax, 0FFFFFFFFh
.text:00409EAE                 jz      loc_409FC9
.text:00409EB4
.text:00409EB4 loc_409EB4:                             ; CODE XREF: sub_409D40+29A↓j
.text:00409EB4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00409EB8                 mov     ecx, ebx
.text:00409EBA                 xor     edi, edi
.text:00409EBC                 xor     ebx, ebx
.text:00409EBE                 mov     edx, esi
.text:00409EC0                 mov     esi, ecx
.text:00409EC2                 or      esi, edi
.text:00409EC4                 mov     edi, ebx
.text:00409EC6                 or      edi, edx
.text:00409EC8
.text:00409EC8 loc_409EC8:                             ; CODE XREF: sub_409D40+153↑j
.text:00409EC8                                         ; sub_409D40+294↓j
.text:00409EC8                 test    ebp, ebp
.text:00409ECA                 jz      short loc_409ED7
.text:00409ECC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:00409ECF                 call    FreeLibrary
.text:00409ED4                 sub     esp, 4
.text:00409ED7
.text:00409ED7 loc_409ED7:                             ; CODE XREF: sub_409D40+18A↑j
.text:00409ED7                 mov     ebp, edi
.text:00409ED9                 mov     edx, ebp
.text:00409EDB                 mov     edi, esi
.text:00409EDD                 or      edx, esi
.text:00409EDF                 jnz     short loc_409EEB
.text:00409EE1                 mov     eax, [esp+6Ch+arg_4]
.text:00409EE5                 mov     edi, [eax+30h]
.text:00409EE8                 mov     ebp, [eax+34h]
.text:00409EEB
.text:00409EEB loc_409EEB:                             ; CODE XREF: sub_409D40+19F↑j
.text:00409EEB                 mov     [esp+6Ch+lpProcName], ebp
.text:00409EEF                 mov     ebx, dword_413060
.text:00409EF5                 xor     esi, esi
.text:00409EF7                 mov     [esp+6Ch+var_60], esi
.text:00409EFB                 mov     [esp+6Ch+Str], edi
.text:00409EFE                 mov     [esp+6Ch+var_64], ebx
.text:00409F02                 call    sub_411FF0
.text:00409F07                 mov     [esp+6Ch+var_3C], eax
.text:00409F0B                 mov     ecx, dword_413060
.text:00409F11                 mov     [esp+6Ch+lpProcName], ebp
.text:00409F15                 mov     [esp+6Ch+var_38], edx
.text:00409F19                 shr     ecx, 9
.text:00409F1C                 mov     [esp+6Ch+var_44], ecx
.text:00409F20                 mov     [esp+6Ch+var_40], 0
.text:00409F28                 mov     [esp+6Ch+var_64], ebx
.text:00409F2C                 mov     [esp+6Ch+var_60], esi
.text:00409F30                 mov     [esp+6Ch+Str], edi
.text:00409F33                 call    sub_411E70
.text:00409F38                 mov     ebp, edx
.text:00409F3A                 or      ebp, eax
.text:00409F3C                 jz      short loc_409FA0
.text:00409F3E                 mov     ebp, [esp+6Ch+var_3C]
.text:00409F42                 mov     esi, [esp+6Ch+var_38]
.text:00409F46                 mov     eax, [esp+6Ch+var_44]
.text:00409F4A                 mov     [esp+6Ch+var_4C], ebp
.text:00409F4E                 mov     ecx, [esp+6Ch+var_40]
.text:00409F52                 mov     ebx, [esp+6Ch+var_44]
.text:00409F56                 add     [esp+6Ch+var_4C], 1
.text:00409F5B                 mov     [esp+6Ch+var_48], esi
.text:00409F5F                 mov     edi, [esp+6Ch+var_4C]
.text:00409F63                 adc     [esp+6Ch+var_48], 0
.text:00409F68                 mul     [esp+6Ch+var_4C]
.text:00409F6C                 imul    ecx, edi
.text:00409F6F                 mov     esi, eax
.text:00409F71                 mov     eax, [esp+6Ch+var_48]
.text:00409F75                 add     edx, ecx
.text:00409F77                 imul    ebx, eax
.text:00409F7A                 lea     edi, [ebx+edx]
.text:00409F7D
.text:00409F7D loc_409F7D:                             ; CODE XREF: sub_409D40+287↓j
.text:00409F7D                 mov     ebx, [esp+6Ch+arg_4]
.text:00409F81                 mov     [ebx+58h], esi
.text:00409F84                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00409F88                 mov     [ebx+5Ch], edi
.text:00409F8B                 mov     [esp+6Ch+Str], esi ; Block
.text:00409F8E                 call    free
.text:00409F93
.text:00409F93 loc_409F93:                             ; CODE XREF: sub_409D40+21↑j
.text:00409F93                 add     esp, 5Ch
.text:00409F96                 xor     eax, eax
.text:00409F98                 pop     ebx
.text:00409F99                 pop     esi
.text:00409F9A                 pop     edi
.text:00409F9B                 pop     ebp
.text:00409F9C                 retn
.text:00409F9C ; ---------------------------------------------------------------------------
.text:00409F9D                 align 10h
.text:00409FA0
.text:00409FA0 loc_409FA0:                             ; CODE XREF: sub_409D40+1FC↑j
.text:00409FA0                 mov     eax, [esp+6Ch+var_3C]
.text:00409FA4                 mov     edi, [esp+6Ch+var_40]
.text:00409FA8                 mov     ecx, [esp+6Ch+var_3C]
.text:00409FAC                 mul     [esp+6Ch+var_44]
.text:00409FB0                 mov     ebx, [esp+6Ch+var_44]
.text:00409FB4                 imul    ecx, edi
.text:00409FB7                 mov     ebp, edx
.text:00409FB9                 mov     esi, eax
.text:00409FBB                 mov     edx, [esp+6Ch+var_38]
.text:00409FBF                 add     ebp, ecx
.text:00409FC1                 imul    ebx, edx
.text:00409FC4                 lea     edi, [ebx+ebp]
.text:00409FC7                 jmp     short loc_409F7D
.text:00409FC9 ; ---------------------------------------------------------------------------
.text:00409FC9
.text:00409FC9 loc_409FC9:                             ; CODE XREF: sub_409D40+16E↑j
.text:00409FC9                 call    GetLastError
.text:00409FCE                 xor     esi, esi
.text:00409FD0                 xor     edi, edi
.text:00409FD2                 test    eax, eax
.text:00409FD4                 jnz     loc_409EC8
.text:00409FDA                 jmp     loc_409EB4
.text:00409FDA ; ---------------------------------------------------------------------------
.text:00409FDF                 align 10h
.text:00409FE0
.text:00409FE0 loc_409FE0:                             ; CODE XREF: sub_409D40+116↑j
.text:00409FE0                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00409FE4                 lea     ecx, [esp+6Ch+var_20]
.text:00409FE8                 lea     ebx, [esp+6Ch+var_1C]
.text:00409FEC                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00409FF0                 lea     edi, [esp+6Ch+var_24]
.text:00409FF4                 lea     ebp, [esp+6Ch+var_28]
.text:00409FF8                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:00409FFC                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040A000                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040A004                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040A007                 call    sub_40C5B0
.text:0040A00C                 test    eax, eax
.text:0040A00E                 jnz     short loc_40A030
.text:0040A010                 mov     [esp+6Ch+var_28], 1
.text:0040A018                 mov     [esp+6Ch+var_24], 200h
.text:0040A020                 mov     [esp+6Ch+var_20], 0
.text:0040A028                 mov     [esp+6Ch+var_1C], 0
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: sub_409D40+2CE↑j
.text:0040A030                 mov     ebp, [esp+6Ch+var_24]
.text:0040A034                 mov     edi, [esp+6Ch+var_28]
.text:0040A038                 mov     eax, [esp+6Ch+arg_4]
.text:0040A03C                 imul    ebp, edi
.text:0040A03F                 mov     esi, [eax+10h]
.text:0040A042                 mov     dword_413060, ebp
.text:0040A048                 mov     ds:dword_4141E0, esi
.text:0040A04E                 jmp     loc_409E5C
.text:0040A053 ; ---------------------------------------------------------------------------
.text:0040A053
.text:0040A053 loc_40A053:                             ; CODE XREF: sub_409D40+9D↑j
.text:0040A053                                         ; sub_409D40+B6↑j ...
.text:0040A053                 xor     eax, eax
.text:0040A055                 jmp     loc_409E30
.text:0040A055 ; ---------------------------------------------------------------------------
.text:0040A05A                 align 10h
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: sub_409D40+AA↑j
.text:0040A060                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040A067                 xor     ebp, ebp
.text:0040A069                 call    GetModuleHandleA
.text:0040A06E                 sub     esp, 4
.text:0040A071                 mov     edi, eax
.text:0040A073                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A07B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040A07E                 call    GetProcAddress
.text:0040A083                 sub     esp, 8
.text:0040A086                 mov     edx, eax
.text:0040A088                 test    eax, eax
.text:0040A08A                 jz      short loc_40A0A4
.text:0040A08C                 mov     eax, [esp+6Ch+String1]
.text:0040A090                 lea     ecx, [esp+6Ch+var_18]
.text:0040A094                 mov     [esp+6Ch+lpProcName], ecx
.text:0040A098                 mov     [esp+6Ch+Str], eax
.text:0040A09B                 call    edx
.text:0040A09D                 sub     esp, 8
.text:0040A0A0                 test    eax, eax
.text:0040A0A2                 jnz     short loc_40A108
.text:0040A0A4
.text:0040A0A4 loc_40A0A4:                             ; CODE XREF: sub_409D40+34A↑j
.text:0040A0A4                 mov     edx, ds:Str
.text:0040A0AA                 test    edx, edx
.text:0040A0AC                 jz      short loc_40A127
.text:0040A0AE
.text:0040A0AE loc_40A0AE:                             ; CODE XREF: sub_409D40+3FA↓j
.text:0040A0AE                                         ; sub_409D40+40C↓j
.text:0040A0AE                 mov     eax, [esp+6Ch+String1]
.text:0040A0B2                 test    eax, eax
.text:0040A0B4                 jz      short loc_40A0BF
.text:0040A0B6                 mov     esi, [esp+6Ch+String1]
.text:0040A0BA                 cmp     byte ptr [esi], 0
.text:0040A0BD                 jnz     short loc_40A0DC
.text:0040A0BF
.text:0040A0BF loc_40A0BF:                             ; CODE XREF: sub_409D40+374↑j
.text:0040A0BF                                         ; sub_409D40+3B0↓j ...
.text:0040A0BF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040A0C2                 call    FreeLibrary
.text:0040A0C7                 sub     esp, 4
.text:0040A0CA                 test    ebp, ebp
.text:0040A0CC                 jz      loc_409DF0
.text:0040A0D2                 mov     ebx, 49h ; 'I'
.text:0040A0D7                 jmp     loc_409DF0
.text:0040A0DC ; ---------------------------------------------------------------------------
.text:0040A0DC
.text:0040A0DC loc_40A0DC:                             ; CODE XREF: sub_409D40+37D↑j
.text:0040A0DC                 mov     [esp+6Ch+Str], esi ; Str
.text:0040A0DF                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040A0E7                 call    strrchr
.text:0040A0EC                 test    eax, eax
.text:0040A0EE                 mov     esi, eax
.text:0040A0F0                 jz      short loc_40A0BF
.text:0040A0F2                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040A0F6                 mov     ecx, ds:Str
.text:0040A0FC                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040A0FF                 call    strstr
.text:0040A104                 test    eax, eax
.text:0040A106                 jz      short loc_40A10F
.text:0040A108
.text:0040A108 loc_40A108:                             ; CODE XREF: sub_409D40+362↑j
.text:0040A108                                         ; sub_409D40+3E5↓j
.text:0040A108                 mov     ebp, 1
.text:0040A10D                 jmp     short loc_40A0BF
.text:0040A10F ; ---------------------------------------------------------------------------
.text:0040A10F
.text:0040A10F loc_40A10F:                             ; CODE XREF: sub_409D40+3C6↑j
.text:0040A10F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040A113                 mov     edx, off_413064 ; ".com;.exe;.bat;.cmd"
.text:0040A119                 mov     [esp+6Ch+Str], edx ; Str
.text:0040A11C                 call    strstr
.text:0040A121                 test    eax, eax
.text:0040A123                 jz      short loc_40A0BF
.text:0040A125                 jmp     short loc_40A108
.text:0040A127 ; ---------------------------------------------------------------------------
.text:0040A127
.text:0040A127 loc_40A127:                             ; CODE XREF: sub_409D40+36C↑j
.text:0040A127                 mov     [esp+6Ch+Str], offset VarName ; "PATHEXT"
.text:0040A12E                 call    getenv
.text:0040A133                 mov     ds:Str, eax
.text:0040A138                 test    eax, eax
.text:0040A13A                 jnz     loc_40A0AE
.text:0040A140                 mov     esi, off_413064 ; ".com;.exe;.bat;.cmd"
.text:0040A146                 mov     ds:Str, esi
.text:0040A14C                 jmp     loc_40A0AE
.text:0040A151 ; ---------------------------------------------------------------------------
.text:0040A151
.text:0040A151 loc_40A151:                             ; CODE XREF: sub_409D40+81↑j
.text:0040A151                                         ; sub_409D40+452↓j
.text:0040A151                 shld    edi, esi, 8
.text:0040A155                 movsx   eax, cl
.text:0040A158                 shl     esi, 8
.text:0040A15B                 cdq
.text:0040A15C                 add     esi, eax
.text:0040A15E                 adc     edi, edx
.text:0040A160                 mov     edx, edi
.text:0040A162                 xor     ebx, ebx
.text:0040A164                 and     edx, 0FF000000h
.text:0040A16A                 mov     eax, edx
.text:0040A16C                 or      eax, ebx
.text:0040A16E                 jz      short loc_40A189
.text:0040A170                 mov     ecx, edx
.text:0040A172                 xor     eax, eax
.text:0040A174                 shr     ecx, 10h
.text:0040A177                 mov     edx, esi
.text:0040A179                 xor     edx, ecx
.text:0040A17B                 mov     ecx, edi
.text:0040A17D                 xor     ecx, eax
.text:0040A17F                 mov     esi, edx
.text:0040A181                 mov     edi, ecx
.text:0040A183                 and     edi, 0FFFFFFh
.text:0040A189
.text:0040A189 loc_40A189:                             ; CODE XREF: sub_409D40+42E↑j
.text:0040A189                 inc     ebp
.text:0040A18A                 movzx   ebx, byte ptr [ebp+0]
.text:0040A18E                 test    bl, bl
.text:0040A190                 mov     cl, bl
.text:0040A192                 jnz     short loc_40A151
.text:0040A194                 mov     eax, esi
.text:0040A196                 mov     edx, edi
.text:0040A198                 jmp     loc_409DCB
.text:0040A198 ; ---------------------------------------------------------------------------
.text:0040A19D                 align 10h
.text:0040A1A0
.text:0040A1A0 loc_40A1A0:                             ; CODE XREF: sub_409D40+3F↑j
.text:0040A1A0                                         ; sub_409D40+57↑j
.text:0040A1A0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040A1A4                 mov     ebp, [esp+6Ch+String1]
.text:0040A1A8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040A1AC                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040A1AF                 call    _stricmp
.text:0040A1B4                 test    eax, eax
.text:0040A1B6                 jnz     short loc_40A1D0
.text:0040A1B8                 mov     ebx, [esp+6Ch+arg_4]
.text:0040A1BC                 mov     dword ptr [ebx+8], 5
.text:0040A1C3                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040A1CA                 jmp     loc_409D9D
.text:0040A1CA ; ---------------------------------------------------------------------------
.text:0040A1CF                 align 10h
.text:0040A1D0
.text:0040A1D0 loc_40A1D0:                             ; CODE XREF: sub_409D40+476↑j
.text:0040A1D0                 mov     ebp, [esp+6Ch+String1]
.text:0040A1D4                 xor     esi, esi
.text:0040A1D6                 xor     edi, edi
.text:0040A1D8                 add     ebp, ebx
.text:0040A1DA                 jz      short loc_40A1E4
.text:0040A1DC                 movzx   ecx, byte ptr [ebp+0]
.text:0040A1E0                 test    cl, cl
.text:0040A1E2                 jnz     short loc_40A1F7
.text:0040A1E4
.text:0040A1E4 loc_40A1E4:                             ; CODE XREF: sub_409D40+49A↑j
.text:0040A1E4                 xor     eax, eax
.text:0040A1E6                 xor     edx, edx
.text:0040A1E8
.text:0040A1E8 loc_40A1E8:                             ; CODE XREF: sub_409D40+4FE↓j
.text:0040A1E8                 mov     ebp, [esp+6Ch+arg_4]
.text:0040A1EC                 mov     [ebp+8], eax
.text:0040A1EF                 mov     [ebp+0Ch], edx
.text:0040A1F2                 jmp     loc_409D9D
.text:0040A1F7 ; ---------------------------------------------------------------------------
.text:0040A1F7
.text:0040A1F7 loc_40A1F7:                             ; CODE XREF: sub_409D40+4A2↑j
.text:0040A1F7                                         ; sub_409D40+4F8↓j
.text:0040A1F7                 shld    edi, esi, 8
.text:0040A1FB                 movsx   eax, cl
.text:0040A1FE                 shl     esi, 8
.text:0040A201                 cdq
.text:0040A202                 add     esi, eax
.text:0040A204                 adc     edi, edx
.text:0040A206                 mov     edx, edi
.text:0040A208                 xor     ebx, ebx
.text:0040A20A                 and     edx, 0FF000000h
.text:0040A210                 mov     eax, edx
.text:0040A212                 or      eax, ebx
.text:0040A214                 jz      short loc_40A22F
.text:0040A216                 mov     ecx, edx
.text:0040A218                 xor     eax, eax
.text:0040A21A                 shr     ecx, 10h
.text:0040A21D                 mov     edx, esi
.text:0040A21F                 xor     edx, ecx
.text:0040A221                 mov     ecx, edi
.text:0040A223                 xor     ecx, eax
.text:0040A225                 mov     esi, edx
.text:0040A227                 mov     edi, ecx
.text:0040A229                 and     edi, 0FFFFFFh
.text:0040A22F
.text:0040A22F loc_40A22F:                             ; CODE XREF: sub_409D40+4D4↑j
.text:0040A22F                 inc     ebp
.text:0040A230                 movzx   ebx, byte ptr [ebp+0]
.text:0040A234                 test    bl, bl
.text:0040A236                 mov     cl, bl
.text:0040A238                 jnz     short loc_40A1F7
.text:0040A23A                 mov     eax, esi
.text:0040A23C                 mov     edx, edi
.text:0040A23E                 jmp     short loc_40A1E8
.text:0040A23E sub_409D40      endp
.text:0040A23E
.text:0040A240
.text:0040A240 ; =============== S U B R O U T I N E =======================================
.text:0040A240
.text:0040A240
.text:0040A240 ; int __cdecl sub_40A240(LPCSTR)
.text:0040A240 sub_40A240      proc near               ; CODE XREF: sub_40BC80+CA↓p
.text:0040A240
.text:0040A240 lpRootPathName  = dword ptr -83Ch
.text:0040A240 lpVolumeNameBuffer= dword ptr -838h
.text:0040A240 nVolumeNameSize = dword ptr -834h
.text:0040A240 lpVolumeSerialNumber= dword ptr -830h
.text:0040A240 lpMaximumComponentLength= dword ptr -82Ch
.text:0040A240 lpFileSystemFlags= dword ptr -828h
.text:0040A240 lpFileSystemNameBuffer= dword ptr -824h
.text:0040A240 nFileSystemNameSize= dword ptr -820h
.text:0040A240 VolumeSerialNumber= dword ptr -818h
.text:0040A240 MaximumComponentLength= dword ptr -814h
.text:0040A240 FileSystemFlags = dword ptr -810h
.text:0040A240 FileSystemNameBuffer= byte ptr -80Ch
.text:0040A240 VolumeNameBuffer= byte ptr -40Ch
.text:0040A240 var_4           = dword ptr -4
.text:0040A240 arg_0           = dword ptr  4
.text:0040A240
.text:0040A240                 sub     esp, 83Ch
.text:0040A246                 mov     [esp+83Ch+var_4], ebx
.text:0040A24D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040A254                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040A257                 call    sub_40BB60
.text:0040A25C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040A25F                 call    sub_40B540
.text:0040A264                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040A267                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040A26B                 mov     ebx, eax
.text:0040A26D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040A271                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040A275                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040A279                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040A27D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040A281                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040A285                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040A28C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040A290                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040A294                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040A29C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040A2A4                 call    GetVolumeInformationA
.text:0040A2A9                 sub     esp, 20h
.text:0040A2AC                 test    eax, eax
.text:0040A2AE                 setz    cl
.text:0040A2B1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040A2B4                 movzx   edx, cl
.text:0040A2B7                 dec     edx
.text:0040A2B8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040A2BC                 call    free
.text:0040A2C1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040A2C5                 mov     ebx, [esp+83Ch+var_4]
.text:0040A2CC                 add     esp, 83Ch
.text:0040A2D2                 retn
.text:0040A2D2 sub_40A240      endp
.text:0040A2D2
.text:0040A2D2 ; ---------------------------------------------------------------------------
.text:0040A2D3                 align 10h
.text:0040A2E0                 push    ebp
.text:0040A2E1                 push    edi
.text:0040A2E2                 xor     edi, edi
.text:0040A2E4                 push    esi
.text:0040A2E5                 xor     esi, esi
.text:0040A2E7                 push    ebx
.text:0040A2E8                 mov     ebp, [esp+14h]
.text:0040A2EC                 test    ebp, ebp
.text:0040A2EE                 jz      short loc_40A2F8
.text:0040A2F0                 movzx   ecx, byte ptr [ebp+0]
.text:0040A2F4                 test    cl, cl
.text:0040A2F6                 jnz     short loc_40A301
.text:0040A2F8
.text:0040A2F8 loc_40A2F8:                             ; CODE XREF: .text:0040A2EE↑j
.text:0040A2F8                 xor     eax, eax
.text:0040A2FA                 xor     edx, edx
.text:0040A2FC
.text:0040A2FC loc_40A2FC:                             ; CODE XREF: .text:0040A348↓j
.text:0040A2FC                 pop     ebx
.text:0040A2FD                 pop     esi
.text:0040A2FE                 pop     edi
.text:0040A2FF                 pop     ebp
.text:0040A300                 retn
.text:0040A301 ; ---------------------------------------------------------------------------
.text:0040A301
.text:0040A301 loc_40A301:                             ; CODE XREF: .text:0040A2F6↑j
.text:0040A301                                         ; .text:0040A342↓j
.text:0040A301                 shld    edi, esi, 8
.text:0040A305                 movsx   eax, cl
.text:0040A308                 shl     esi, 8
.text:0040A30B                 cdq
.text:0040A30C                 add     esi, eax
.text:0040A30E                 adc     edi, edx
.text:0040A310                 mov     edx, edi
.text:0040A312                 xor     ebx, ebx
.text:0040A314                 and     edx, 0FF000000h
.text:0040A31A                 mov     eax, edx
.text:0040A31C                 or      eax, ebx
.text:0040A31E                 jz      short loc_40A339
.text:0040A320                 mov     ecx, edx
.text:0040A322                 xor     eax, eax
.text:0040A324                 shr     ecx, 10h
.text:0040A327                 mov     edx, esi
.text:0040A329                 xor     edx, ecx
.text:0040A32B                 mov     ecx, edi
.text:0040A32D                 xor     ecx, eax
.text:0040A32F                 mov     esi, edx
.text:0040A331                 mov     edi, ecx
.text:0040A333                 and     edi, 0FFFFFFh
.text:0040A339
.text:0040A339 loc_40A339:                             ; CODE XREF: .text:0040A31E↑j
.text:0040A339                 inc     ebp
.text:0040A33A                 movzx   ebx, byte ptr [ebp+0]
.text:0040A33E                 test    bl, bl
.text:0040A340                 mov     cl, bl
.text:0040A342                 jnz     short loc_40A301
.text:0040A344                 mov     eax, esi
.text:0040A346                 mov     edx, edi
.text:0040A348                 jmp     short loc_40A2FC
.text:0040A348 ; ---------------------------------------------------------------------------
.text:0040A34A                 align 10h
.text:0040A350                 sub     esp, 2Ch
.text:0040A353                 lea     edx, [esp+24h]
.text:0040A357                 lea     ecx, [esp+28h]
.text:0040A35B                 mov     [esp+0Ch], edx
.text:0040A35F                 lea     edx, [esp+1Ch]
.text:0040A363                 mov     [esp+4], edx
.text:0040A367                 mov     edx, [esp+30h]
.text:0040A36B                 mov     [esp+10h], ecx
.text:0040A36F                 lea     ecx, [esp+20h]
.text:0040A373                 mov     [esp+8], ecx
.text:0040A377                 mov     [esp], edx
.text:0040A37A                 call    sub_40C5B0
.text:0040A37F                 test    eax, eax
.text:0040A381                 jnz     short loc_40A3A3
.text:0040A383                 mov     dword ptr [esp+1Ch], 1
.text:0040A38B                 mov     dword ptr [esp+20h], 200h
.text:0040A393                 mov     dword ptr [esp+24h], 0
.text:0040A39B                 mov     dword ptr [esp+28h], 0
.text:0040A3A3
.text:0040A3A3 loc_40A3A3:                             ; CODE XREF: .text:0040A381↑j
.text:0040A3A3                 mov     eax, [esp+20h]
.text:0040A3A7                 mov     ecx, [esp+1Ch]
.text:0040A3AB                 add     esp, 2Ch
.text:0040A3AE                 imul    eax, ecx
.text:0040A3B1                 retn
.text:0040A3B1 ; ---------------------------------------------------------------------------
.text:0040A3B2                 align 10h
.text:0040A3C0                 sub     esp, 1Ch
.text:0040A3C3                 mov     eax, [esp+20h]
.text:0040A3C7                 mov     [esp+14h], esi
.text:0040A3CB                 mov     [esp+18h], edi
.text:0040A3CF                 test    eax, eax
.text:0040A3D1                 jz      short loc_40A410
.text:0040A3D3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A3DB                 mov     [esp], eax
.text:0040A3DE                 call    strrchr
.text:0040A3E3                 test    eax, eax
.text:0040A3E5                 jz      short loc_40A410
.text:0040A3E7                 cld
.text:0040A3E8                 mov     esi, eax
.text:0040A3EA                 mov     edi, offset aLnk ; ".lnk"
.text:0040A3EF                 mov     ecx, 5
.text:0040A3F4                 repe cmpsb
.text:0040A3F6                 setz    dl
.text:0040A3F9                 movzx   eax, dl
.text:0040A3FC                 lea     esi, [esi+0]
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: .text:0040A412↓j
.text:0040A400                 mov     esi, [esp+14h]
.text:0040A404                 mov     edi, [esp+18h]
.text:0040A408                 add     esp, 1Ch
.text:0040A40B                 retn
.text:0040A40B ; ---------------------------------------------------------------------------
.text:0040A40C                 align 10h
.text:0040A410
.text:0040A410 loc_40A410:                             ; CODE XREF: .text:0040A3D1↑j
.text:0040A410                                         ; .text:0040A3E5↑j
.text:0040A410                 xor     eax, eax
.text:0040A412                 jmp     short loc_40A400
.text:0040A412 ; ---------------------------------------------------------------------------
.text:0040A414                 align 10h
.text:0040A420                 sub     esp, 1Ch
.text:0040A423                 mov     [esp+10h], ebx
.text:0040A427                 mov     ebx, [esp+20h]
.text:0040A42B                 mov     [esp+14h], esi
.text:0040A42F                 mov     [esp+18h], edi
.text:0040A433                 xor     edi, edi
.text:0040A435                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040A43C                 call    GetModuleHandleA
.text:0040A441                 sub     esp, 4
.text:0040A444                 mov     esi, eax
.text:0040A446                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A44E                 mov     [esp], eax
.text:0040A451                 call    GetProcAddress
.text:0040A456                 sub     esp, 8
.text:0040A459                 test    eax, eax
.text:0040A45B                 jz      short loc_40A471
.text:0040A45D                 mov     [esp], ebx
.text:0040A460                 lea     ecx, [esp+0Ch]
.text:0040A464                 mov     [esp+4], ecx
.text:0040A468                 call    eax
.text:0040A46A                 sub     esp, 8
.text:0040A46D                 test    eax, eax
.text:0040A46F                 jnz     short loc_40A4D0
.text:0040A471
.text:0040A471 loc_40A471:                             ; CODE XREF: .text:0040A45B↑j
.text:0040A471                 mov     eax, ds:Str
.text:0040A476                 test    eax, eax
.text:0040A478                 jz      short loc_40A4F0
.text:0040A47A
.text:0040A47A loc_40A47A:                             ; CODE XREF: .text:0040A503↓j
.text:0040A47A                                         ; .text:0040A515↓j
.text:0040A47A                 test    ebx, ebx
.text:0040A47C                 jz      short loc_40A483
.text:0040A47E                 cmp     byte ptr [ebx], 0
.text:0040A481                 jnz     short loc_40A4A0
.text:0040A483
.text:0040A483 loc_40A483:                             ; CODE XREF: .text:0040A47C↑j
.text:0040A483                                         ; .text:0040A4B4↓j ...
.text:0040A483                 mov     [esp], esi
.text:0040A486                 call    FreeLibrary
.text:0040A48B                 sub     esp, 4
.text:0040A48E                 mov     eax, edi
.text:0040A490                 mov     ebx, [esp+10h]
.text:0040A494                 mov     esi, [esp+14h]
.text:0040A498                 mov     edi, [esp+18h]
.text:0040A49C                 add     esp, 1Ch
.text:0040A49F                 retn
.text:0040A4A0 ; ---------------------------------------------------------------------------
.text:0040A4A0
.text:0040A4A0 loc_40A4A0:                             ; CODE XREF: .text:0040A481↑j
.text:0040A4A0                 mov     [esp], ebx
.text:0040A4A3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A4AB                 call    strrchr
.text:0040A4B0                 test    eax, eax
.text:0040A4B2                 mov     ebx, eax
.text:0040A4B4                 jz      short loc_40A483
.text:0040A4B6                 mov     [esp+4], eax
.text:0040A4BA                 mov     ecx, ds:Str
.text:0040A4C0                 mov     [esp], ecx
.text:0040A4C3                 call    strstr
.text:0040A4C8                 test    eax, eax
.text:0040A4CA                 jz      short loc_40A4D7
.text:0040A4CC                 lea     esi, [esi+0]
.text:0040A4D0
.text:0040A4D0 loc_40A4D0:                             ; CODE XREF: .text:0040A46F↑j
.text:0040A4D0                                         ; .text:0040A4ED↓j
.text:0040A4D0                 mov     edi, 1
.text:0040A4D5                 jmp     short loc_40A483
.text:0040A4D7 ; ---------------------------------------------------------------------------
.text:0040A4D7
.text:0040A4D7 loc_40A4D7:                             ; CODE XREF: .text:0040A4CA↑j
.text:0040A4D7                 mov     [esp+4], ebx
.text:0040A4DB                 mov     ebx, off_413064 ; ".com;.exe;.bat;.cmd"
.text:0040A4E1                 mov     [esp], ebx
.text:0040A4E4                 call    strstr
.text:0040A4E9                 test    eax, eax
.text:0040A4EB                 jz      short loc_40A483
.text:0040A4ED                 jmp     short loc_40A4D0
.text:0040A4ED ; ---------------------------------------------------------------------------
.text:0040A4EF                 align 10h
.text:0040A4F0
.text:0040A4F0 loc_40A4F0:                             ; CODE XREF: .text:0040A478↑j
.text:0040A4F0                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:0040A4F7                 call    getenv
.text:0040A4FC                 mov     ds:Str, eax
.text:0040A501                 test    eax, eax
.text:0040A503                 jnz     loc_40A47A
.text:0040A509                 mov     edx, off_413064 ; ".com;.exe;.bat;.cmd"
.text:0040A50F                 mov     ds:Str, edx
.text:0040A515                 jmp     loc_40A47A
.text:0040A515 ; ---------------------------------------------------------------------------
.text:0040A51A                 align 10h
.text:0040A520                 sub     esp, 0Ch
.text:0040A523                 mov     edx, [esp+10h]
.text:0040A527                 mov     [esp], edx
.text:0040A52A                 call    GetFileType
.text:0040A52F                 sub     esp, 4
.text:0040A532                 xor     edx, edx
.text:0040A534                 cmp     eax, 2
.text:0040A537                 jz      short loc_40A550
.text:0040A539                 cmp     eax, 3
.text:0040A53C                 jz      short loc_40A544
.text:0040A53E
.text:0040A53E loc_40A53E:                             ; CODE XREF: .text:0040A549↓j
.text:0040A53E                                         ; .text:0040A555↓j
.text:0040A53E                 mov     eax, edx
.text:0040A540                 add     esp, 0Ch
.text:0040A543                 retn
.text:0040A544 ; ---------------------------------------------------------------------------
.text:0040A544
.text:0040A544 loc_40A544:                             ; CODE XREF: .text:0040A53C↑j
.text:0040A544                 mov     edx, 1000h
.text:0040A549                 jmp     short loc_40A53E
.text:0040A549 ; ---------------------------------------------------------------------------
.text:0040A54B                 align 10h
.text:0040A550
.text:0040A550 loc_40A550:                             ; CODE XREF: .text:0040A537↑j
.text:0040A550                 mov     edx, 2000h
.text:0040A555                 jmp     short loc_40A53E
.text:0040A555 ; ---------------------------------------------------------------------------
.text:0040A557                 align 10h
.text:0040A560                 mov     ecx, [esp+4]
.text:0040A564                 xor     edx, edx
.text:0040A566                 test    cl, 10h
.text:0040A569                 setz    dl
.text:0040A56C                 dec     edx
.text:0040A56D                 and     edx, 0FFFFC000h
.text:0040A573                 add     edx, 8000h
.text:0040A579                 or      edx, 124h
.text:0040A57F                 test    cl, 1
.text:0040A582                 movzx   eax, dx
.text:0040A585                 jnz     short locret_40A58C
.text:0040A587                 or      eax, 92h
.text:0040A58C
.text:0040A58C locret_40A58C:                          ; CODE XREF: .text:0040A585↑j
.text:0040A58C                 retn
.text:0040A58C ; ---------------------------------------------------------------------------
.text:0040A58D                 align 10h
.text:0040A590                 sub     esp, 2Ch
.text:0040A593                 mov     [esp+20h], esi
.text:0040A597                 mov     esi, [esp+30h]
.text:0040A59B                 mov     [esp+1Ch], ebx
.text:0040A59F                 xor     ebx, ebx
.text:0040A5A1                 test    esi, esi
.text:0040A5A3                 mov     [esp+24h], edi
.text:0040A5A7                 mov     [esp+28h], ebp
.text:0040A5AB                 jz      short loc_40A600
.text:0040A5AD                 cmp     byte ptr [esi], 0
.text:0040A5B0                 jnz     short loc_40A604
.text:0040A5B2
.text:0040A5B2 loc_40A5B2:                             ; CODE XREF: .text:0040A66C↓j
.text:0040A5B2                                         ; .text:0040A677↓j
.text:0040A5B2                 test    esi, esi
.text:0040A5B4                 jz      short loc_40A600
.text:0040A5B6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A5BE                 mov     [esp], esi
.text:0040A5C1                 call    strrchr
.text:0040A5C6                 test    eax, eax
.text:0040A5C8                 jz      short loc_40A600
.text:0040A5CA                 cld
.text:0040A5CB                 mov     ecx, 5
.text:0040A5D0                 mov     esi, eax
.text:0040A5D2                 mov     edi, offset aLnk ; ".lnk"
.text:0040A5D7                 repe cmpsb
.text:0040A5D9                 setz    cl
.text:0040A5DC                 movzx   eax, cl
.text:0040A5DF                 nop
.text:0040A5E0
.text:0040A5E0 loc_40A5E0:                             ; CODE XREF: .text:0040A602↓j
.text:0040A5E0                 test    eax, eax
.text:0040A5E2                 jz      short loc_40A5EA
.text:0040A5E4                 or      ebx, 0A000h
.text:0040A5EA
.text:0040A5EA loc_40A5EA:                             ; CODE XREF: .text:0040A5E2↑j
.text:0040A5EA                 mov     eax, ebx
.text:0040A5EC                 mov     esi, [esp+20h]
.text:0040A5F0                 mov     ebx, [esp+1Ch]
.text:0040A5F4                 mov     edi, [esp+24h]
.text:0040A5F8                 mov     ebp, [esp+28h]
.text:0040A5FC                 add     esp, 2Ch
.text:0040A5FF                 retn
.text:0040A600 ; ---------------------------------------------------------------------------
.text:0040A600
.text:0040A600 loc_40A600:                             ; CODE XREF: .text:0040A5AB↑j
.text:0040A600                                         ; .text:0040A5B4↑j ...
.text:0040A600                 xor     eax, eax
.text:0040A602                 jmp     short loc_40A5E0
.text:0040A604 ; ---------------------------------------------------------------------------
.text:0040A604
.text:0040A604 loc_40A604:                             ; CODE XREF: .text:0040A5B0↑j
.text:0040A604                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040A60B                 call    GetModuleHandleA
.text:0040A610                 sub     esp, 4
.text:0040A613                 mov     ebp, eax
.text:0040A615                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A61D                 mov     [esp], eax
.text:0040A620                 call    GetProcAddress
.text:0040A625                 sub     esp, 8
.text:0040A628                 test    eax, eax
.text:0040A62A                 mov     dword ptr [esp+14h], 0
.text:0040A632                 jz      short loc_40A648
.text:0040A634                 mov     [esp], esi
.text:0040A637                 lea     ecx, [esp+18h]
.text:0040A63B                 mov     [esp+4], ecx
.text:0040A63F                 call    eax
.text:0040A641                 sub     esp, 8
.text:0040A644                 test    eax, eax
.text:0040A646                 jnz     short loc_40A6A8
.text:0040A648
.text:0040A648 loc_40A648:                             ; CODE XREF: .text:0040A632↑j
.text:0040A648                 mov     edx, ds:Str
.text:0040A64E                 test    edx, edx
.text:0040A650                 jz      short loc_40A6D0
.text:0040A652
.text:0040A652 loc_40A652:                             ; CODE XREF: .text:0040A6E3↓j
.text:0040A652                                         ; .text:0040A6F5↓j
.text:0040A652                 test    esi, esi
.text:0040A654                 jz      short loc_40A65B
.text:0040A656                 cmp     byte ptr [esi], 0
.text:0040A659                 jnz     short loc_40A67C
.text:0040A65B
.text:0040A65B loc_40A65B:                             ; CODE XREF: .text:0040A654↑j
.text:0040A65B                                         ; .text:0040A690↓j ...
.text:0040A65B                 mov     [esp], ebp
.text:0040A65E                 call    FreeLibrary
.text:0040A663                 sub     esp, 4
.text:0040A666                 mov     eax, [esp+14h]
.text:0040A66A                 test    eax, eax
.text:0040A66C                 jz      loc_40A5B2
.text:0040A672                 mov     ebx, 49h ; 'I'
.text:0040A677                 jmp     loc_40A5B2
.text:0040A67C ; ---------------------------------------------------------------------------
.text:0040A67C
.text:0040A67C loc_40A67C:                             ; CODE XREF: .text:0040A659↑j
.text:0040A67C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A684                 mov     [esp], esi
.text:0040A687                 call    strrchr
.text:0040A68C                 test    eax, eax
.text:0040A68E                 mov     edi, eax
.text:0040A690                 jz      short loc_40A65B
.text:0040A692                 mov     [esp+4], eax
.text:0040A696                 mov     edx, ds:Str
.text:0040A69C                 mov     [esp], edx
.text:0040A69F                 call    strstr
.text:0040A6A4                 test    eax, eax
.text:0040A6A6                 jz      short loc_40A6B2
.text:0040A6A8
.text:0040A6A8 loc_40A6A8:                             ; CODE XREF: .text:0040A646↑j
.text:0040A6A8                                         ; .text:0040A6C8↓j
.text:0040A6A8                 mov     dword ptr [esp+14h], 1
.text:0040A6B0                 jmp     short loc_40A65B
.text:0040A6B2 ; ---------------------------------------------------------------------------
.text:0040A6B2
.text:0040A6B2 loc_40A6B2:                             ; CODE XREF: .text:0040A6A6↑j
.text:0040A6B2                 mov     [esp+4], edi
.text:0040A6B6                 mov     edi, off_413064 ; ".com;.exe;.bat;.cmd"
.text:0040A6BC                 mov     [esp], edi
.text:0040A6BF                 call    strstr
.text:0040A6C4                 test    eax, eax
.text:0040A6C6                 jz      short loc_40A65B
.text:0040A6C8                 jmp     short loc_40A6A8
.text:0040A6C8 ; ---------------------------------------------------------------------------
.text:0040A6CA                 align 10h
.text:0040A6D0
.text:0040A6D0 loc_40A6D0:                             ; CODE XREF: .text:0040A650↑j
.text:0040A6D0                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:0040A6D7                 call    getenv
.text:0040A6DC                 mov     ds:Str, eax
.text:0040A6E1                 test    eax, eax
.text:0040A6E3                 jnz     loc_40A652
.text:0040A6E9                 mov     ecx, off_413064 ; ".com;.exe;.bat;.cmd"
.text:0040A6EF                 mov     ds:Str, ecx
.text:0040A6F5                 jmp     loc_40A652
.text:0040A6F5 ; ---------------------------------------------------------------------------
.text:0040A6FA                 align 10h
.text:0040A700                 push    esi
.text:0040A701                 push    ebx
.text:0040A702                 sub     esp, 864h
.text:0040A708                 mov     ebx, [esp+870h]
.text:0040A70F                 lea     edx, [esp+830h]
.text:0040A716                 mov     esi, [esp+874h]
.text:0040A71D                 mov     [esp+4], edx
.text:0040A721                 mov     [esp], ebx
.text:0040A724                 call    sub_409580
.text:0040A729                 xor     edx, edx
.text:0040A72B                 test    eax, eax
.text:0040A72D                 jz      loc_40A815
.text:0040A733                 mov     ecx, [esp+830h]
.text:0040A73A                 test    cl, 10h
.text:0040A73D                 mov     [esi], ecx
.text:0040A73F                 mov     eax, [esp+834h]
.text:0040A746                 mov     edx, [esp+838h]
.text:0040A74D                 mov     [esi+4], eax
.text:0040A750                 mov     [esi+8], edx
.text:0040A753                 mov     eax, [esp+83Ch]
.text:0040A75A                 mov     edx, [esp+840h]
.text:0040A761                 mov     [esi+0Ch], eax
.text:0040A764                 mov     [esi+10h], edx
.text:0040A767                 mov     edx, [esp+848h]
.text:0040A76E                 mov     eax, [esp+844h]
.text:0040A775                 mov     [esi+18h], edx
.text:0040A778                 mov     [esi+14h], eax
.text:0040A77B                 mov     edx, [esp+84Ch]
.text:0040A782                 mov     [esi+20h], edx
.text:0040A785                 mov     edx, [esp+850h]
.text:0040A78C                 mov     [esi+24h], edx
.text:0040A78F                 jnz     loc_40A820
.text:0040A795                 mov     dword ptr [esi+28h], 1
.text:0040A79C
.text:0040A79C loc_40A79C:                             ; CODE XREF: .text:0040A82B↓j
.text:0040A79C                 mov     [esp], ebx
.text:0040A79F                 call    sub_40BB60
.text:0040A7A4                 mov     [esp], eax
.text:0040A7A7                 call    sub_40B540
.text:0040A7AC                 mov     [esp], eax
.text:0040A7AF                 lea     edx, [esp+30h]
.text:0040A7B3                 mov     ebx, eax
.text:0040A7B5                 mov     [esp+18h], edx
.text:0040A7B9                 lea     ecx, [esp+2Ch]
.text:0040A7BD                 lea     edx, [esp+28h]
.text:0040A7C1                 mov     [esp+14h], ecx
.text:0040A7C5                 lea     ecx, [esp+24h]
.text:0040A7C9                 mov     [esp+10h], edx
.text:0040A7CD                 lea     edx, [esp+430h]
.text:0040A7D4                 mov     [esp+0Ch], ecx
.text:0040A7D8                 mov     [esp+4], edx
.text:0040A7DC                 mov     dword ptr [esp+1Ch], 400h
.text:0040A7E4                 mov     dword ptr [esp+8], 400h
.text:0040A7EC                 call    GetVolumeInformationA
.text:0040A7F1                 sub     esp, 20h
.text:0040A7F4                 test    eax, eax
.text:0040A7F6                 setz    cl
.text:0040A7F9                 mov     [esp], ebx
.text:0040A7FC                 movzx   edx, cl
.text:0040A7FF                 dec     edx
.text:0040A800                 and     [esp+24h], edx
.text:0040A804                 call    free
.text:0040A809                 mov     ecx, [esp+24h]
.text:0040A80D                 mov     edx, 1
.text:0040A812                 mov     [esi+1Ch], ecx
.text:0040A815
.text:0040A815 loc_40A815:                             ; CODE XREF: .text:0040A72D↑j
.text:0040A815                 add     esp, 864h
.text:0040A81B                 mov     eax, edx
.text:0040A81D                 pop     ebx
.text:0040A81E                 pop     esi
.text:0040A81F                 retn
.text:0040A820 ; ---------------------------------------------------------------------------
.text:0040A820
.text:0040A820 loc_40A820:                             ; CODE XREF: .text:0040A78F↑j
.text:0040A820                 mov     [esp], ebx
.text:0040A823                 call    sub_4096F0
.text:0040A828                 mov     [esi+28h], eax
.text:0040A82B                 jmp     loc_40A79C
.text:0040A830 ; ---------------------------------------------------------------------------
.text:0040A830                 push    ebp
.text:0040A831                 xor     edx, edx
.text:0040A833                 push    edi
.text:0040A834                 push    esi
.text:0040A835                 xor     esi, esi
.text:0040A837                 push    ebx
.text:0040A838                 sub     esp, 1Ch
.text:0040A83B                 mov     ebx, [esp+5Ch]
.text:0040A83F                 mov     ecx, [esp+30h]
.text:0040A843                 mov     edi, [esp+60h]
.text:0040A847                 or      esi, ebx
.text:0040A849                 mov     eax, [esp+4Ch]
.text:0040A84D                 or      edi, edx
.text:0040A84F                 mov     ebx, [esp+64h]
.text:0040A853                 xor     edx, edx
.text:0040A855                 test    cl, 10h
.text:0040A858                 setz    dl
.text:0040A85B                 mov     [ebx+10h], eax
.text:0040A85E                 mov     [ebx+8], edi
.text:0040A861                 mov     [ebx+0Ch], esi
.text:0040A864                 dec     edx
.text:0040A865                 and     edx, 0FFFFC000h
.text:0040A86B                 mov     dword ptr [ebx+14h], 0
.text:0040A872                 add     edx, 8000h
.text:0040A878                 or      edx, 124h
.text:0040A87E                 test    cl, 1
.text:0040A881                 movzx   eax, dx
.text:0040A884                 jnz     short loc_40A88B
.text:0040A886                 or      eax, 92h
.text:0040A88B
.text:0040A88B loc_40A88B:                             ; CODE XREF: .text:0040A884↑j
.text:0040A88B                 mov     ebx, [esp+54h]
.text:0040A88F                 xor     edx, edx
.text:0040A891                 xor     ebp, ebp
.text:0040A893                 mov     edi, [esp+50h]
.text:0040A897                 mov     ecx, [esp+64h]
.text:0040A89B                 mov     esi, edi
.text:0040A89D                 or      [ecx], eax
.text:0040A89F                 mov     edi, ebx
.text:0040A8A1                 or      edi, ebp
.text:0040A8A3                 mov     ebp, edx
.text:0040A8A5                 mov     ebx, [esp+64h]
.text:0040A8A9                 or      ebp, esi
.text:0040A8AB                 mov     esi, [esp+58h]
.text:0040A8AF                 mov     edx, [esp+40h]
.text:0040A8B3                 mov     [ebx+30h], edi
.text:0040A8B6                 mov     [ebx+18h], esi
.text:0040A8B9                 mov     ecx, edx
.text:0040A8BB                 xor     esi, esi
.text:0040A8BD                 mov     [ebx+34h], ebp
.text:0040A8C0                 xor     edx, edx
.text:0040A8C2                 or      esi, ecx
.text:0040A8C4                 mov     dword ptr [esp+8], 989680h
.text:0040A8CC                 mov     ebx, [esp+3Ch]
.text:0040A8D0                 mov     ecx, esi
.text:0040A8D2                 mov     dword ptr [esp+0Ch], 0
.text:0040A8DA                 or      ebx, edx
.text:0040A8DC                 mov     edx, ebx
.text:0040A8DE                 sub     edx, 0D53E8000h
.text:0040A8E4                 sbb     ecx, 19DB1DEh
.text:0040A8EA                 mov     [esp+4], ecx
.text:0040A8EE                 mov     [esp], edx
.text:0040A8F1                 call    sub_411FF0
.text:0040A8F6                 mov     edx, eax
.text:0040A8F8                 mov     ecx, [esp+64h]
.text:0040A8FC                 shr     eax, 1Fh
.text:0040A8FF                 dec     eax
.text:0040A900                 and     edx, eax
.text:0040A902                 mov     [ecx+38h], edx
.text:0040A905                 mov     [esp], ebx
.text:0040A908                 mov     [esp+4], esi
.text:0040A90C                 mov     dword ptr [esp+8], 989680h
.text:0040A914                 mov     dword ptr [esp+0Ch], 0
.text:0040A91C                 call    sub_411E70
.text:0040A921                 lea     ecx, [eax+eax*4]
.text:0040A924                 lea     esi, [ecx+ecx*4]
.text:0040A927                 mov     eax, [esp+64h]
.text:0040A92B                 shl     esi, 2
.text:0040A92E                 mov     ebx, esi
.text:0040A930                 shr     ebx, 1Fh
.text:0040A933                 dec     ebx
.text:0040A934                 and     ebx, esi
.text:0040A936                 xor     esi, esi
.text:0040A938                 mov     [eax+3Ch], ebx
.text:0040A93B                 mov     edx, [esp+38h]
.text:0040A93F                 mov     dword ptr [esp+8], 989680h
.text:0040A947                 mov     ebx, [esp+34h]
.text:0040A94B                 mov     dword ptr [esp+0Ch], 0
.text:0040A953                 mov     ecx, edx
.text:0040A955                 xor     edx, edx
.text:0040A957                 or      ebx, edx
.text:0040A959                 or      esi, ecx
.text:0040A95B                 mov     edx, ebx
.text:0040A95D                 sub     edx, 0D53E8000h
.text:0040A963                 mov     ecx, esi
.text:0040A965                 sbb     ecx, 19DB1DEh
.text:0040A96B                 mov     [esp+4], ecx
.text:0040A96F                 mov     [esp], edx
.text:0040A972                 call    sub_411FF0
.text:0040A977                 mov     edx, eax
.text:0040A979                 mov     ecx, [esp+64h]
.text:0040A97D                 shr     eax, 1Fh
.text:0040A980                 dec     eax
.text:0040A981                 and     edx, eax
.text:0040A983                 mov     [ecx+48h], edx
.text:0040A986                 mov     [esp], ebx
.text:0040A989                 mov     [esp+4], esi
.text:0040A98D                 mov     dword ptr [esp+8], 989680h
.text:0040A995                 mov     dword ptr [esp+0Ch], 0
.text:0040A99D                 call    sub_411E70
.text:0040A9A2                 lea     edx, [eax+eax*4]
.text:0040A9A5                 mov     ebx, [esp+64h]
.text:0040A9A9                 lea     ecx, [edx+edx*4]
.text:0040A9AC                 shl     ecx, 2
.text:0040A9AF                 mov     esi, ecx
.text:0040A9B1                 shr     esi, 1Fh
.text:0040A9B4                 dec     esi
.text:0040A9B5                 and     esi, ecx
.text:0040A9B7                 mov     [ebx+4Ch], esi
.text:0040A9BA                 mov     edx, [esp+48h]
.text:0040A9BE                 xor     esi, esi
.text:0040A9C0                 mov     dword ptr [esp+8], 989680h
.text:0040A9C8                 mov     ebx, [esp+44h]
.text:0040A9CC                 mov     dword ptr [esp+0Ch], 0
.text:0040A9D4                 mov     ecx, edx
.text:0040A9D6                 xor     edx, edx
.text:0040A9D8                 or      ebx, edx
.text:0040A9DA                 or      esi, ecx
.text:0040A9DC                 mov     edx, ebx
.text:0040A9DE                 sub     edx, 0D53E8000h
.text:0040A9E4                 mov     ecx, esi
.text:0040A9E6                 sbb     ecx, 19DB1DEh
.text:0040A9EC                 mov     [esp+4], ecx
.text:0040A9F0                 mov     [esp], edx
.text:0040A9F3                 call    sub_411FF0
.text:0040A9F8                 mov     edx, eax
.text:0040A9FA                 mov     ecx, [esp+64h]
.text:0040A9FE                 shr     eax, 1Fh
.text:0040AA01                 dec     eax
.text:0040AA02                 and     edx, eax
.text:0040AA04                 mov     [ecx+40h], edx
.text:0040AA07                 mov     [esp+4], esi
.text:0040AA0B                 mov     dword ptr [esp+8], 989680h
.text:0040AA13                 mov     dword ptr [esp+0Ch], 0
.text:0040AA1B                 mov     [esp], ebx
.text:0040AA1E                 call    sub_411E70
.text:0040AA23                 lea     edx, [eax+eax*4]
.text:0040AA26                 lea     esi, [edx+edx*4]
.text:0040AA29                 mov     eax, [esp+64h]
.text:0040AA2D                 shl     esi, 2
.text:0040AA30                 mov     edx, ebp
.text:0040AA32                 mov     ecx, esi
.text:0040AA34                 mov     dword ptr [eax+50h], 200h
.text:0040AA3B                 shr     ecx, 1Fh
.text:0040AA3E                 dec     ecx
.text:0040AA3F                 and     ecx, esi
.text:0040AA41                 test    ebp, ebp
.text:0040AA43                 mov     [eax+44h], ecx
.text:0040AA46                 mov     eax, edi
.text:0040AA48                 js      short loc_40AA82
.text:0040AA4A
.text:0040AA4A loc_40AA4A:                             ; CODE XREF: .text:0040AA8A↓j
.text:0040AA4A                 xor     esi, esi
.text:0040AA4C                 mov     ebp, edi
.text:0040AA4E                 mov     ecx, eax
.text:0040AA50                 shrd    ecx, edx, 9
.text:0040AA54                 mov     ebx, edx
.text:0040AA56                 and     ebp, 1FFh
.text:0040AA5C                 mov     eax, esi
.text:0040AA5E                 sar     ebx, 9
.text:0040AA61                 or      eax, ebp
.text:0040AA63                 jz      short loc_40AA6B
.text:0040AA65                 add     ecx, 1
.text:0040AA68                 adc     ebx, 0
.text:0040AA6B
.text:0040AA6B loc_40AA6B:                             ; CODE XREF: .text:0040AA63↑j
.text:0040AA6B                 mov     edx, [esp+64h]
.text:0040AA6F                 mov     eax, 1
.text:0040AA74                 mov     [edx+58h], ecx
.text:0040AA77                 mov     [edx+5Ch], ebx
.text:0040AA7A                 add     esp, 1Ch
.text:0040AA7D                 pop     ebx
.text:0040AA7E                 pop     esi
.text:0040AA7F                 pop     edi
.text:0040AA80                 pop     ebp
.text:0040AA81                 retn
.text:0040AA82 ; ---------------------------------------------------------------------------
.text:0040AA82
.text:0040AA82 loc_40AA82:                             ; CODE XREF: .text:0040AA48↑j
.text:0040AA82                 add     eax, 1FFh
.text:0040AA87                 adc     edx, 0
.text:0040AA8A                 jmp     short loc_40AA4A
.text:0040AA8A ; ---------------------------------------------------------------------------
.text:0040AA8C                 align 10h
.text:0040AA90                 push    ebp
.text:0040AA91                 push    edi
.text:0040AA92                 xor     edi, edi
.text:0040AA94                 push    esi
.text:0040AA95                 xor     esi, esi
.text:0040AA97                 push    ebx
.text:0040AA98                 sub     esp, 0Ch
.text:0040AA9B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040AAA2                 call    LoadLibraryA
.text:0040AAA7                 sub     esp, 4
.text:0040AAAA                 mov     ebp, eax
.text:0040AAAC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040AAB4                 mov     [esp], eax
.text:0040AAB7                 call    GetProcAddress
.text:0040AABC                 sub     esp, 8
.text:0040AABF                 test    eax, eax
.text:0040AAC1                 jz      short loc_40AAF2
.text:0040AAC3                 lea     ecx, [esp+8]
.text:0040AAC7                 mov     [esp+4], ecx
.text:0040AACB                 mov     ecx, [esp+20h]
.text:0040AACF                 mov     [esp], ecx
.text:0040AAD2                 call    eax
.text:0040AAD4                 sub     esp, 8
.text:0040AAD7                 mov     ebx, eax
.text:0040AAD9                 cmp     eax, 0FFFFFFFFh
.text:0040AADC                 jz      short loc_40AB0D
.text:0040AADE
.text:0040AADE loc_40AADE:                             ; CODE XREF: .text:0040AB16↓j
.text:0040AADE                 mov     esi, [esp+8]
.text:0040AAE2                 mov     ecx, ebx
.text:0040AAE4                 xor     edi, edi
.text:0040AAE6                 xor     ebx, ebx
.text:0040AAE8                 mov     edx, esi
.text:0040AAEA                 mov     esi, ecx
.text:0040AAEC                 or      esi, edi
.text:0040AAEE                 mov     edi, ebx
.text:0040AAF0                 or      edi, edx
.text:0040AAF2
.text:0040AAF2 loc_40AAF2:                             ; CODE XREF: .text:0040AAC1↑j
.text:0040AAF2                                         ; .text:0040AB14↓j
.text:0040AAF2                 test    ebp, ebp
.text:0040AAF4                 jz      short loc_40AB01
.text:0040AAF6                 mov     [esp], ebp
.text:0040AAF9                 call    FreeLibrary
.text:0040AAFE                 sub     esp, 4
.text:0040AB01
.text:0040AB01 loc_40AB01:                             ; CODE XREF: .text:0040AAF4↑j
.text:0040AB01                 add     esp, 0Ch
.text:0040AB04                 mov     eax, esi
.text:0040AB06                 mov     edx, edi
.text:0040AB08                 pop     ebx
.text:0040AB09                 pop     esi
.text:0040AB0A                 pop     edi
.text:0040AB0B                 pop     ebp
.text:0040AB0C                 retn
.text:0040AB0D ; ---------------------------------------------------------------------------
.text:0040AB0D
.text:0040AB0D loc_40AB0D:                             ; CODE XREF: .text:0040AADC↑j
.text:0040AB0D                 call    GetLastError
.text:0040AB12                 test    eax, eax
.text:0040AB14                 jnz     short loc_40AAF2
.text:0040AB16                 jmp     short loc_40AADE
.text:0040AB16 ; ---------------------------------------------------------------------------
.text:0040AB18                 align 10h
.text:0040AB20
.text:0040AB20 ; =============== S U B R O U T I N E =======================================
.text:0040AB20
.text:0040AB20
.text:0040AB20 ; int __cdecl sub_40AB20(LPCSTR lpFileName, int)
.text:0040AB20 sub_40AB20      proc near               ; CODE XREF: sub_40B0A0-3F↓p
.text:0040AB20
.text:0040AB20 lpRootPathName  = dword ptr -8FCh
.text:0040AB20 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040AB20 nVolumeNameSize = dword ptr -8F4h
.text:0040AB20 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040AB20 lpMaximumComponentLength= dword ptr -8ECh
.text:0040AB20 lpFileSystemFlags= dword ptr -8E8h
.text:0040AB20 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040AB20 nFileSystemNameSize= dword ptr -8E0h
.text:0040AB20 VolumeSerialNumber= dword ptr -8D8h
.text:0040AB20 MaximumComponentLength= dword ptr -8D4h
.text:0040AB20 FileSystemFlags = dword ptr -8D0h
.text:0040AB20 var_8CC         = dword ptr -8CCh
.text:0040AB20 var_8C8         = dword ptr -8C8h
.text:0040AB20 var_8C4         = dword ptr -8C4h
.text:0040AB20 var_8C0         = dword ptr -8C0h
.text:0040AB20 var_8BC         = dword ptr -8BCh
.text:0040AB20 var_8B8         = dword ptr -8B8h
.text:0040AB20 var_8B4         = dword ptr -8B4h
.text:0040AB20 var_8B0         = dword ptr -8B0h
.text:0040AB20 var_8AC         = dword ptr -8ACh
.text:0040AB20 var_8A8         = dword ptr -8A8h
.text:0040AB20 var_8A4         = dword ptr -8A4h
.text:0040AB20 var_8A0         = dword ptr -8A0h
.text:0040AB20 var_89C         = dword ptr -89Ch
.text:0040AB20 FileSystemNameBuffer= byte ptr -88Ch
.text:0040AB20 VolumeNameBuffer= byte ptr -48Ch
.text:0040AB20 var_8C          = dword ptr -8Ch
.text:0040AB20 var_88          = dword ptr -88h
.text:0040AB20 var_84          = dword ptr -84h
.text:0040AB20 var_80          = dword ptr -80h
.text:0040AB20 var_7C          = dword ptr -7Ch
.text:0040AB20 var_78          = dword ptr -78h
.text:0040AB20 var_74          = dword ptr -74h
.text:0040AB20 var_70          = dword ptr -70h
.text:0040AB20 var_6C          = dword ptr -6Ch
.text:0040AB20 var_5C          = dword ptr -5Ch
.text:0040AB20 var_58          = dword ptr -58h
.text:0040AB20 var_54          = dword ptr -54h
.text:0040AB20 var_50          = dword ptr -50h
.text:0040AB20 var_4C          = dword ptr -4Ch
.text:0040AB20 var_48          = dword ptr -48h
.text:0040AB20 var_44          = dword ptr -44h
.text:0040AB20 var_3C          = dword ptr -3Ch
.text:0040AB20 var_38          = dword ptr -38h
.text:0040AB20 var_34          = dword ptr -34h
.text:0040AB20 lpFileName      = dword ptr  4
.text:0040AB20 arg_4           = dword ptr  8
.text:0040AB20
.text:0040AB20                 push    ebp
.text:0040AB21                 xor     eax, eax
.text:0040AB23                 mov     ecx, 0Dh
.text:0040AB28                 push    edi
.text:0040AB29                 push    esi
.text:0040AB2A                 push    ebx
.text:0040AB2B                 sub     esp, 8ECh
.text:0040AB31                 lea     edi, [esp+8FCh+var_5C]
.text:0040AB38                 cld
.text:0040AB39                 lea     edx, [esp+8FCh+var_8C]
.text:0040AB40                 rep stosd
.text:0040AB42                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040AB46                 lea     esi, [esp+8FCh+var_5C]
.text:0040AB4D                 mov     edx, [esp+8FCh+lpFileName]
.text:0040AB54                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040AB57                 call    sub_409580
.text:0040AB5C                 test    eax, eax
.text:0040AB5E                 mov     edx, 0FFFFFFFFh
.text:0040AB63                 jz      loc_40AEF4
.text:0040AB69                 mov     edx, [esp+8FCh+var_88]
.text:0040AB70                 mov     ebp, [esp+8FCh+var_84]
.text:0040AB77                 mov     edi, [esp+8FCh+var_80]
.text:0040AB7E                 mov     [esp+8FCh+var_58], edx
.text:0040AB85                 mov     ecx, [esp+8FCh+var_7C]
.text:0040AB8C                 mov     ebx, [esp+8FCh+var_8C]
.text:0040AB93                 mov     [esp+8FCh+var_54], ebp
.text:0040AB9A                 mov     edx, [esp+8FCh+var_78]
.text:0040ABA1                 mov     ebp, [esp+8FCh+var_74]
.text:0040ABA8                 mov     [esp+8FCh+var_50], edi
.text:0040ABAF                 test    bl, 10h
.text:0040ABB2                 mov     edi, [esp+8FCh+var_70]
.text:0040ABB9                 mov     [esp+8FCh+var_4C], ecx
.text:0040ABC0                 mov     ecx, [esp+8FCh+var_6C]
.text:0040ABC7                 mov     [esp+8FCh+var_5C], ebx
.text:0040ABCE                 mov     [esp+8FCh+var_48], edx
.text:0040ABD5                 mov     [esp+8FCh+var_44], ebp
.text:0040ABDC                 mov     [esp+8FCh+var_3C], edi
.text:0040ABE3                 mov     [esp+8FCh+var_38], ecx
.text:0040ABEA                 jnz     loc_40AF10
.text:0040ABF0                 mov     ebx, 1
.text:0040ABF5                 mov     [esp+8FCh+var_34], ebx
.text:0040ABFC
.text:0040ABFC loc_40ABFC:                             ; CODE XREF: sub_40AB20+406↓j
.text:0040ABFC                 mov     eax, [esp+8FCh+lpFileName]
.text:0040AC03                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040AC07                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040AC0B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040AC0E                 call    sub_40BB60
.text:0040AC13                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040AC16                 call    sub_40B540
.text:0040AC1B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040AC1F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040AC23                 mov     ebp, eax
.text:0040AC25                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040AC29                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040AC2D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040AC34                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040AC38                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040AC3C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040AC40                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040AC48                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040AC50                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040AC53                 call    GetVolumeInformationA
.text:0040AC58                 sub     esp, 20h
.text:0040AC5B                 test    eax, eax
.text:0040AC5D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040AC61                 setz    bl
.text:0040AC64                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040AC67                 xor     ebp, ebp
.text:0040AC69                 movzx   edx, bl
.text:0040AC6C                 dec     edx
.text:0040AC6D                 xor     ebx, ebx
.text:0040AC6F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040AC73                 call    free
.text:0040AC78                 cld
.text:0040AC79                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040AC7D                 mov     [esi+1Ch], ecx
.text:0040AC80                 mov     ecx, 0Dh
.text:0040AC85                 rep movsd
.text:0040AC87                 mov     edi, [esp+8FCh+var_8A0]
.text:0040AC8B                 mov     edx, [esp+8FCh+var_89C]
.text:0040AC8F                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040AC93                 or      ebp, edi
.text:0040AC95                 mov     esi, [esp+8FCh+var_8B0]
.text:0040AC99                 mov     edi, [esp+8FCh+arg_4]
.text:0040ACA0                 or      edx, ebx
.text:0040ACA2                 mov     [edi+8], edx
.text:0040ACA5                 xor     edx, edx
.text:0040ACA7                 test    cl, 10h
.text:0040ACAA                 setz    dl
.text:0040ACAD                 mov     [edi+0Ch], ebp
.text:0040ACB0                 mov     [edi+10h], esi
.text:0040ACB3                 mov     dword ptr [edi+14h], 0
.text:0040ACBA                 dec     edx
.text:0040ACBB                 and     edx, 0FFFFC000h
.text:0040ACC1                 add     edx, 8000h
.text:0040ACC7                 or      edx, 124h
.text:0040ACCD                 test    cl, 1
.text:0040ACD0                 movzx   eax, dx
.text:0040ACD3                 jnz     short loc_40ACDA
.text:0040ACD5                 or      eax, 92h
.text:0040ACDA
.text:0040ACDA loc_40ACDA:                             ; CODE XREF: sub_40AB20+1B3↑j
.text:0040ACDA                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040ACDE                 xor     edx, edx
.text:0040ACE0                 xor     ebp, ebp
.text:0040ACE2                 mov     edi, [esp+8FCh+var_8AC]
.text:0040ACE6                 mov     ecx, [esp+8FCh+arg_4]
.text:0040ACED                 mov     esi, edi
.text:0040ACEF                 or      [ecx], eax
.text:0040ACF1                 mov     edi, ebx
.text:0040ACF3                 or      edi, ebp
.text:0040ACF5                 mov     ebp, edx
.text:0040ACF7                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040ACFB                 or      ebp, esi
.text:0040ACFD                 mov     esi, [esp+8FCh+arg_4]
.text:0040AD04                 mov     edx, [esp+8FCh+var_8BC]
.text:0040AD08                 mov     [esi+18h], ebx
.text:0040AD0B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040AD0F                 mov     ecx, edx
.text:0040AD11                 mov     [esi+30h], edi
.text:0040AD14                 xor     edx, edx
.text:0040AD16                 mov     [esi+34h], ebp
.text:0040AD19                 or      ebx, edx
.text:0040AD1B                 xor     esi, esi
.text:0040AD1D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040AD25                 or      esi, ecx
.text:0040AD27                 mov     edx, ebx
.text:0040AD29                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AD31                 sub     edx, 0D53E8000h
.text:0040AD37                 mov     ecx, esi
.text:0040AD39                 sbb     ecx, 19DB1DEh
.text:0040AD3F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040AD43                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040AD46                 call    sub_411FF0
.text:0040AD4B                 mov     edx, eax
.text:0040AD4D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040AD54                 shr     eax, 1Fh
.text:0040AD57                 dec     eax
.text:0040AD58                 and     edx, eax
.text:0040AD5A                 mov     [ecx+38h], edx
.text:0040AD5D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040AD60                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040AD64                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040AD6C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AD74                 call    sub_411E70
.text:0040AD79                 lea     ecx, [eax+eax*4]
.text:0040AD7C                 lea     ebx, [ecx+ecx*4]
.text:0040AD7F                 mov     eax, [esp+8FCh+arg_4]
.text:0040AD86                 shl     ebx, 2
.text:0040AD89                 mov     esi, ebx
.text:0040AD8B                 shr     esi, 1Fh
.text:0040AD8E                 dec     esi
.text:0040AD8F                 and     esi, ebx
.text:0040AD91                 mov     [eax+3Ch], esi
.text:0040AD94                 mov     edx, [esp+8FCh+var_8C4]
.text:0040AD98                 xor     esi, esi
.text:0040AD9A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040ADA2                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040ADA6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040ADAE                 mov     ecx, edx
.text:0040ADB0                 xor     edx, edx
.text:0040ADB2                 or      ebx, edx
.text:0040ADB4                 or      esi, ecx
.text:0040ADB6                 mov     edx, ebx
.text:0040ADB8                 sub     edx, 0D53E8000h
.text:0040ADBE                 mov     ecx, esi
.text:0040ADC0                 sbb     ecx, 19DB1DEh
.text:0040ADC6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040ADCA                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040ADCD                 call    sub_411FF0
.text:0040ADD2                 mov     edx, eax
.text:0040ADD4                 mov     ecx, [esp+8FCh+arg_4]
.text:0040ADDB                 shr     eax, 1Fh
.text:0040ADDE                 dec     eax
.text:0040ADDF                 and     edx, eax
.text:0040ADE1                 mov     [ecx+48h], edx
.text:0040ADE4                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040ADE7                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040ADEB                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040ADF3                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040ADFB                 call    sub_411E70
.text:0040AE00                 lea     ecx, [eax+eax*4]
.text:0040AE03                 lea     ebx, [ecx+ecx*4]
.text:0040AE06                 mov     eax, [esp+8FCh+arg_4]
.text:0040AE0D                 shl     ebx, 2
.text:0040AE10                 mov     esi, ebx
.text:0040AE12                 shr     esi, 1Fh
.text:0040AE15                 dec     esi
.text:0040AE16                 and     esi, ebx
.text:0040AE18                 mov     [eax+4Ch], esi
.text:0040AE1B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040AE1F                 xor     esi, esi
.text:0040AE21                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040AE29                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040AE2D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AE35                 mov     ecx, edx
.text:0040AE37                 xor     edx, edx
.text:0040AE39                 or      ebx, edx
.text:0040AE3B                 or      esi, ecx
.text:0040AE3D                 mov     edx, ebx
.text:0040AE3F                 sub     edx, 0D53E8000h
.text:0040AE45                 mov     ecx, esi
.text:0040AE47                 sbb     ecx, 19DB1DEh
.text:0040AE4D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040AE51                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040AE54                 call    sub_411FF0
.text:0040AE59                 mov     edx, eax
.text:0040AE5B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040AE62                 shr     eax, 1Fh
.text:0040AE65                 dec     eax
.text:0040AE66                 and     edx, eax
.text:0040AE68                 mov     [ecx+40h], edx
.text:0040AE6B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040AE6E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040AE72                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040AE7A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AE82                 call    sub_411E70
.text:0040AE87                 lea     ebx, [eax+eax*4]
.text:0040AE8A                 mov     esi, [esp+8FCh+arg_4]
.text:0040AE91                 lea     edx, [ebx+ebx*4]
.text:0040AE94                 shl     edx, 2
.text:0040AE97                 mov     eax, edi
.text:0040AE99                 mov     ecx, edx
.text:0040AE9B                 mov     dword ptr [esi+50h], 200h
.text:0040AEA2                 shr     ecx, 1Fh
.text:0040AEA5                 dec     ecx
.text:0040AEA6                 and     ecx, edx
.text:0040AEA8                 test    ebp, ebp
.text:0040AEAA                 mov     edx, ebp
.text:0040AEAC                 mov     [esi+44h], ecx
.text:0040AEAF                 js      short loc_40AF01
.text:0040AEB1
.text:0040AEB1 loc_40AEB1:                             ; CODE XREF: sub_40AB20+3E9↓j
.text:0040AEB1                 xor     esi, esi
.text:0040AEB3                 mov     ebp, edi
.text:0040AEB5                 mov     ecx, eax
.text:0040AEB7                 shrd    ecx, edx, 9
.text:0040AEBB                 mov     ebx, edx
.text:0040AEBD                 and     ebp, 1FFh
.text:0040AEC3                 mov     eax, esi
.text:0040AEC5                 sar     ebx, 9
.text:0040AEC8                 or      eax, ebp
.text:0040AECA                 jz      short loc_40AED2
.text:0040AECC                 add     ecx, 1
.text:0040AECF                 adc     ebx, 0
.text:0040AED2
.text:0040AED2 loc_40AED2:                             ; CODE XREF: sub_40AB20+3AA↑j
.text:0040AED2                 mov     edx, [esp+8FCh+arg_4]
.text:0040AED9                 mov     [edx+5Ch], ebx
.text:0040AEDC                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040AEE3                 mov     [edx+58h], ecx
.text:0040AEE6                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040AEEA                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040AEED                 call    sub_409D40
.text:0040AEF2                 xor     edx, edx
.text:0040AEF4
.text:0040AEF4 loc_40AEF4:                             ; CODE XREF: sub_40AB20+43↑j
.text:0040AEF4                 add     esp, 8ECh
.text:0040AEFA                 mov     eax, edx
.text:0040AEFC                 pop     ebx
.text:0040AEFD                 pop     esi
.text:0040AEFE                 pop     edi
.text:0040AEFF                 pop     ebp
.text:0040AF00                 retn
.text:0040AF01 ; ---------------------------------------------------------------------------
.text:0040AF01
.text:0040AF01 loc_40AF01:                             ; CODE XREF: sub_40AB20+38F↑j
.text:0040AF01                 add     eax, 1FFh
.text:0040AF06                 adc     edx, 0
.text:0040AF09                 jmp     short loc_40AEB1
.text:0040AF09 ; ---------------------------------------------------------------------------
.text:0040AF0B                 align 10h
.text:0040AF10
.text:0040AF10 loc_40AF10:                             ; CODE XREF: sub_40AB20+CA↑j
.text:0040AF10                 mov     eax, [esp+8FCh+lpFileName]
.text:0040AF17                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040AF1A                 call    sub_4096F0
.text:0040AF1F                 mov     [esp+8FCh+var_34], eax
.text:0040AF26                 jmp     loc_40ABFC
.text:0040AF26 sub_40AB20      endp
.text:0040AF26
.text:0040AF26 ; ---------------------------------------------------------------------------
.text:0040AF2B                 align 10h
.text:0040AF30 ; START OF FUNCTION CHUNK FOR sub_40B0A0
.text:0040AF30
.text:0040AF30 loc_40AF30:                             ; CODE XREF: sub_40B0A0+26↓j
.text:0040AF30                 cld
.text:0040AF31                 sub     esp, 2Ch
.text:0040AF34                 xor     eax, eax
.text:0040AF36                 mov     [esp+2Ch+var_10], ebx
.text:0040AF3A                 mov     ecx, 18h
.text:0040AF3F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040AF43                 mov     [esp+2Ch+var_C], esi
.text:0040AF47                 mov     esi, [esp+2Ch+arg_4]
.text:0040AF4B                 test    ebx, ebx
.text:0040AF4D                 mov     [esp+2Ch+var_8], edi
.text:0040AF51                 mov     edi, esi
.text:0040AF53                 mov     [esp+2Ch+var_4], ebp
.text:0040AF57                 rep stosd
.text:0040AF59                 jz      short loc_40AF60
.text:0040AF5B                 cmp     byte ptr [ebx], 0
.text:0040AF5E                 jnz     short loc_40AF78
.text:0040AF60
.text:0040AF60 loc_40AF60:                             ; CODE XREF: sub_40B0A0-147↑j
.text:0040AF60                 xor     edx, edx
.text:0040AF62
.text:0040AF62 loc_40AF62:                             ; CODE XREF: sub_40B0A0-111↓j
.text:0040AF62                                         ; sub_40B0A0-68↓j
.text:0040AF62                 mov     ebx, [esp+2Ch+var_10]
.text:0040AF66                 mov     eax, edx
.text:0040AF68                 mov     esi, [esp+2Ch+var_C]
.text:0040AF6C                 mov     edi, [esp+2Ch+var_8]
.text:0040AF70                 mov     ebp, [esp+2Ch+var_4]
.text:0040AF74                 add     esp, 2Ch
.text:0040AF77                 retn
.text:0040AF78 ; ---------------------------------------------------------------------------
.text:0040AF78
.text:0040AF78 loc_40AF78:                             ; CODE XREF: sub_40B0A0-142↑j
.text:0040AF78                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040AF80                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040AF83                 call    sub_40D280
.text:0040AF88                 test    eax, eax
.text:0040AF8A                 mov     edx, 0FFFFFFFFh
.text:0040AF8F                 jnz     short loc_40AF62
.text:0040AF91                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040AF94                 call    sub_40D130
.text:0040AF99                 mov     [esp+2Ch+lpFileName], eax
.text:0040AF9C                 call    sub_40B540
.text:0040AFA1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040AFA4                 mov     ebp, eax
.text:0040AFA6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040AFAE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040AFB6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040AFBE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040AFC6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040AFCE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040AFD6                 call    CreateFileA
.text:0040AFDB                 sub     esp, 1Ch
.text:0040AFDE                 mov     ebx, eax
.text:0040AFE0                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040AFE4                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040AFE7                 call    sub_409870
.text:0040AFEC                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040AFEF                 mov     edi, eax
.text:0040AFF1                 call    CloseHandle
.text:0040AFF6                 sub     esp, 4
.text:0040AFF9                 cmp     edi, 0FFFFFFFFh
.text:0040AFFC                 jz      short loc_40B05A
.text:0040AFFE                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040B002                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040B005                 call    sub_409D40
.text:0040B00A
.text:0040B00A loc_40B00A:                             ; CODE XREF: sub_40B0A0-38↓j
.text:0040B00A                 mov     edx, [esi]
.text:0040B00C                 and     edx, 0F000h
.text:0040B012                 cmp     edx, 4000h
.text:0040B018                 jz      short loc_40B04D
.text:0040B01A
.text:0040B01A loc_40B01A:                             ; CODE XREF: sub_40B0A0-48↓j
.text:0040B01A                 cmp     edi, 0FFFFFFFFh
.text:0040B01D                 jz      short loc_40B03D
.text:0040B01F
.text:0040B01F loc_40B01F:                             ; CODE XREF: sub_40B0A0-55↓j
.text:0040B01F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040B026                 call    SetErrorMode
.text:0040B02B                 sub     esp, 4
.text:0040B02E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040B031                 call    free
.text:0040B036                 mov     edx, edi
.text:0040B038                 jmp     loc_40AF62
.text:0040B03D ; ---------------------------------------------------------------------------
.text:0040B03D
.text:0040B03D loc_40B03D:                             ; CODE XREF: sub_40B0A0-83↑j
.text:0040B03D                 call    sub_40D0E0
.text:0040B042                 mov     esi, eax
.text:0040B044                 call    _errno
.text:0040B049                 mov     [eax], esi
.text:0040B04B                 jmp     short loc_40B01F
.text:0040B04D ; ---------------------------------------------------------------------------
.text:0040B04D
.text:0040B04D loc_40B04D:                             ; CODE XREF: sub_40B0A0-88↑j
.text:0040B04D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040B050                 call    sub_4096F0
.text:0040B055                 mov     [esi+18h], eax
.text:0040B058                 jmp     short loc_40B01A
.text:0040B05A ; ---------------------------------------------------------------------------
.text:0040B05A
.text:0040B05A loc_40B05A:                             ; CODE XREF: sub_40B0A0-A4↑j
.text:0040B05A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040B05E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040B061                 call    sub_40AB20
.text:0040B066                 mov     edi, eax
.text:0040B068                 jmp     short loc_40B00A
.text:0040B068 ; END OF FUNCTION CHUNK FOR sub_40B0A0
.text:0040B068 ; ---------------------------------------------------------------------------
.text:0040B06A                 align 10h
.text:0040B070
.text:0040B070 ; =============== S U B R O U T I N E =======================================
.text:0040B070
.text:0040B070
.text:0040B070 sub_40B070      proc near               ; CODE XREF: sub_403C10+E3↑p
.text:0040B070                                         ; sub_403C10+12A↑p ...
.text:0040B070
.text:0040B070 var_C           = dword ptr -0Ch
.text:0040B070 var_8           = dword ptr -8
.text:0040B070 var_4           = dword ptr -4
.text:0040B070 arg_0           = dword ptr  4
.text:0040B070 arg_4           = dword ptr  8
.text:0040B070
.text:0040B070                 sub     esp, 0Ch
.text:0040B073                 mov     edx, [esp+0Ch+arg_4]
.text:0040B077                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040B07E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040B082                 mov     edx, [esp+0Ch+arg_0]
.text:0040B086                 mov     [esp+0Ch+var_8], edx ; int
.text:0040B08A                 call    sub_40B0A0
.text:0040B08F                 add     esp, 0Ch
.text:0040B092                 retn
.text:0040B092 sub_40B070      endp
.text:0040B092
.text:0040B092 ; ---------------------------------------------------------------------------
.text:0040B093                 align 10h
.text:0040B0A0
.text:0040B0A0 ; =============== S U B R O U T I N E =======================================
.text:0040B0A0
.text:0040B0A0
.text:0040B0A0 ; int __cdecl sub_40B0A0(LPCSTR, int, int)
.text:0040B0A0 sub_40B0A0      proc near               ; CODE XREF: sub_40B070+1A↑p
.text:0040B0A0                                         ; sub_40B970+90↓p ...
.text:0040B0A0
.text:0040B0A0 lpFileName      = dword ptr -2Ch
.text:0040B0A0 dwDesiredAccess = dword ptr -28h
.text:0040B0A0 dwShareMode     = dword ptr -24h
.text:0040B0A0 lpSecurityAttributes= dword ptr -20h
.text:0040B0A0 dwCreationDisposition= dword ptr -1Ch
.text:0040B0A0 dwFlagsAndAttributes= dword ptr -18h
.text:0040B0A0 hTemplateFile   = dword ptr -14h
.text:0040B0A0 var_10          = dword ptr -10h
.text:0040B0A0 var_C           = dword ptr -0Ch
.text:0040B0A0 var_8           = dword ptr -8
.text:0040B0A0 var_4           = dword ptr -4
.text:0040B0A0 arg_0           = dword ptr  4
.text:0040B0A0 arg_4           = dword ptr  8
.text:0040B0A0 arg_8           = dword ptr  0Ch
.text:0040B0A0
.text:0040B0A0 ; FUNCTION CHUNK AT .text:0040AF30 SIZE 0000013A BYTES
.text:0040B0A0
.text:0040B0A0                 sub     esp, 0Ch
.text:0040B0A3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040B0A7                 mov     edx, [esp+0Ch+arg_4]
.text:0040B0AB                 mov     eax, [esp+0Ch+arg_8]
.text:0040B0AF                 test    ecx, ecx
.text:0040B0B1                 jnz     short loc_40B0D0
.text:0040B0B3                 test    edx, edx
.text:0040B0B5                 jz      short loc_40B0D0
.text:0040B0B7                 test    eax, eax
.text:0040B0B9                 jz      short loc_40B0D0
.text:0040B0BB                 mov     [esp+0Ch+arg_4], eax
.text:0040B0BF                 mov     [esp+0Ch+arg_0], edx
.text:0040B0C3                 add     esp, 0Ch
.text:0040B0C6                 jmp     loc_40AF30
.text:0040B0C6 ; ---------------------------------------------------------------------------
.text:0040B0CB                 align 10h
.text:0040B0D0
.text:0040B0D0 loc_40B0D0:                             ; CODE XREF: sub_40B0A0+11↑j
.text:0040B0D0                                         ; sub_40B0A0+15↑j ...
.text:0040B0D0                 call    _errno
.text:0040B0D5                 mov     dword ptr [eax], 16h
.text:0040B0DB                 mov     eax, 0FFFFFFFFh
.text:0040B0E0                 add     esp, 0Ch
.text:0040B0E3                 retn
.text:0040B0E3 sub_40B0A0      endp
.text:0040B0E3
.text:0040B0E3 ; ---------------------------------------------------------------------------
.text:0040B0E4                 align 10h
.text:0040B0F0
.text:0040B0F0 ; =============== S U B R O U T I N E =======================================
.text:0040B0F0
.text:0040B0F0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040B0F0
.text:0040B0F0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040B0F0 _win32_longpath proc near               ; CODE XREF: .text:0040B8B4↓p
.text:0040B0F0
.text:0040B0F0 C               = dword ptr -278h
.text:0040B0F0 lpFindFileData  = dword ptr -274h
.text:0040B0F0 Destination     = byte ptr -268h
.text:0040B0F0 var_267         = byte ptr -267h
.text:0040B0F0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040B0F0 lpFileName      = dword ptr  8
.text:0040B0F0
.text:0040B0F0                 push    ebp
.text:0040B0F1                 xor     eax, eax
.text:0040B0F3                 push    edi
.text:0040B0F4                 push    esi
.text:0040B0F5                 push    ebx
.text:0040B0F6                 sub     esp, 26Ch
.text:0040B0FC                 mov     esi, [esp+278h+lpFileName]
.text:0040B103                 lea     ebp, [esp+278h+Destination]
.text:0040B107                 test    esi, esi
.text:0040B109                 jz      loc_40B267
.text:0040B10F                 movsx   edx, byte ptr [esi]
.text:0040B112                 mov     [esp+278h+C], edx ; C
.text:0040B115                 call    isalpha
.text:0040B11A                 test    eax, eax
.text:0040B11C                 jz      short loc_40B12F
.text:0040B11E                 mov     eax, [esp+278h+lpFileName]
.text:0040B125                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040B129                 jz      loc_40B46B
.text:0040B12F
.text:0040B12F loc_40B12F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040B12F                 mov     edx, [esp+278h+lpFileName]
.text:0040B136                 movzx   eax, byte ptr [edx]
.text:0040B139                 cmp     al, 2Fh ; '/'
.text:0040B13B                 jz      loc_40B34B
.text:0040B141                 cmp     al, 5Ch ; '\'
.text:0040B143                 jz      loc_40B34B
.text:0040B149
.text:0040B149 loc_40B149:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040B149                                         ; _win32_longpath+2B1↓j ...
.text:0040B149                 mov     [ebp+268h+Destination], 0
.text:0040B14D                 movzx   ebx, byte ptr [esi]
.text:0040B150                 test    bl, bl
.text:0040B152                 jz      loc_40B249
.text:0040B158                 nop
.text:0040B159                 lea     esi, [esi+0]
.text:0040B160
.text:0040B160 loc_40B160:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040B160                 cmp     bl, 2Fh ; '/'
.text:0040B163                 jz      loc_40B300
.text:0040B169                 cmp     bl, 5Ch ; '\'
.text:0040B16C                 jz      loc_40B300
.text:0040B172
.text:0040B172 loc_40B172:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040B172                                         ; _win32_longpath+22C↓j ...
.text:0040B172                 cmp     bl, 2Eh ; '.'
.text:0040B175                 jz      loc_40B2A0
.text:0040B17B
.text:0040B17B loc_40B17B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040B17B                                         ; _win32_longpath+203↓j
.text:0040B17B                 test    bl, bl
.text:0040B17D                 jz      loc_40B249
.text:0040B183                 cmp     bl, 2Fh ; '/'
.text:0040B186                 jz      short loc_40B1A2
.text:0040B188                 cmp     bl, 5Ch ; '\'
.text:0040B18B                 jz      short loc_40B1A2
.text:0040B18D                 lea     esi, [esi+0]
.text:0040B190
.text:0040B190 loc_40B190:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040B190                 inc     esi
.text:0040B191                 movzx   ebx, byte ptr [esi]
.text:0040B194                 test    bl, bl
.text:0040B196                 jz      short loc_40B1A2
.text:0040B198                 cmp     bl, 2Fh ; '/'
.text:0040B19B                 jz      short loc_40B1A2
.text:0040B19D                 cmp     bl, 5Ch ; '\'
.text:0040B1A0                 jnz     short loc_40B190
.text:0040B1A2
.text:0040B1A2 loc_40B1A2:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040B1A2                                         ; _win32_longpath+9B↑j ...
.text:0040B1A2                 mov     byte ptr [esi], 0
.text:0040B1A5                 lea     edx, [esp+278h+FindFileData]
.text:0040B1AC                 mov     eax, [esp+278h+lpFileName]
.text:0040B1B3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040B1B7                 mov     [esp+278h+C], eax ; lpFileName
.text:0040B1BA                 call    FindFirstFileA
.text:0040B1BF                 mov     [esi], bl
.text:0040B1C1                 sub     esp, 8
.text:0040B1C4                 mov     edi, eax
.text:0040B1C6                 cmp     eax, 0FFFFFFFFh
.text:0040B1C9                 jz      loc_40B28C
.text:0040B1CF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040B1D6                 mov     ecx, ebx
.text:0040B1D8                 nop
.text:0040B1D9                 lea     esi, [esi+0]
.text:0040B1E0
.text:0040B1E0 loc_40B1E0:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040B1E0                 mov     eax, [ebx]
.text:0040B1E2                 add     ebx, 4
.text:0040B1E5                 lea     edx, [eax-1010101h]
.text:0040B1EB                 not     eax
.text:0040B1ED                 and     edx, eax
.text:0040B1EF                 and     edx, 80808080h
.text:0040B1F5                 jz      short loc_40B1E0
.text:0040B1F7                 test    edx, 8080h
.text:0040B1FD                 jnz     short loc_40B205
.text:0040B1FF                 shr     edx, 10h
.text:0040B202                 add     ebx, 2
.text:0040B205
.text:0040B205 loc_40B205:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040B205                 add     dl, dl
.text:0040B207                 sbb     ebx, 3
.text:0040B20A                 sub     ebx, ecx
.text:0040B20C                 lea     ecx, [esp+278h+Destination]
.text:0040B210                 sub     ecx, ebp
.text:0040B212                 add     ecx, 105h
.text:0040B218                 cmp     ecx, ebx
.text:0040B21A                 jle     short loc_40B272
.text:0040B21C                 mov     [esp+278h+C], ebp ; Destination
.text:0040B21F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040B226                 add     ebp, ebx
.text:0040B228                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040B22C                 call    strcpy
.text:0040B231                 mov     [esp+278h+C], edi ; hFindFile
.text:0040B234                 call    FindClose
.text:0040B239                 sub     esp, 4
.text:0040B23C
.text:0040B23C loc_40B23C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040B23C                 movzx   ecx, byte ptr [esi]
.text:0040B23F                 test    cl, cl
.text:0040B241                 mov     bl, cl
.text:0040B243                 jnz     loc_40B160
.text:0040B249
.text:0040B249 loc_40B249:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040B249                                         ; _win32_longpath+8D↑j
.text:0040B249                 mov     esi, [esp+278h+lpFileName]
.text:0040B250                 lea     ebp, [esp+278h+Destination]
.text:0040B254                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040B258                 mov     [esp+278h+C], esi ; Destination
.text:0040B25B                 call    strcpy
.text:0040B260                 mov     eax, [esp+278h+lpFileName]
.text:0040B267
.text:0040B267 loc_40B267:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040B267                                         ; _win32_longpath+19A↓j
.text:0040B267                 add     esp, 26Ch
.text:0040B26D                 pop     ebx
.text:0040B26E                 pop     esi
.text:0040B26F                 pop     edi
.text:0040B270                 pop     ebp
.text:0040B271                 retn
.text:0040B272 ; ---------------------------------------------------------------------------
.text:0040B272
.text:0040B272 loc_40B272:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040B272                 mov     [esp+278h+C], edi ; hFindFile
.text:0040B275                 call    FindClose
.text:0040B27A                 sub     esp, 4
.text:0040B27D                 call    _errno
.text:0040B282                 mov     dword ptr [eax], 22h ; '"'
.text:0040B288
.text:0040B288 loc_40B288:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040B288                 xor     eax, eax
.text:0040B28A                 jmp     short loc_40B267
.text:0040B28C ; ---------------------------------------------------------------------------
.text:0040B28C
.text:0040B28C loc_40B28C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040B28C                 call    _errno
.text:0040B291                 mov     dword ptr [eax], 16h
.text:0040B297                 jmp     short loc_40B288
.text:0040B297 ; ---------------------------------------------------------------------------
.text:0040B299                 align 10h
.text:0040B2A0
.text:0040B2A0 loc_40B2A0:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040B2A0                 movzx   eax, byte ptr [esi+1]
.text:0040B2A4                 test    al, al
.text:0040B2A6                 jnz     short loc_40B2D5
.text:0040B2A8
.text:0040B2A8 loc_40B2A8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040B2A8                                         ; _win32_longpath+1EB↓j ...
.text:0040B2A8                 test    bl, bl
.text:0040B2AA                 jz      short loc_40B2CC
.text:0040B2AC                 cmp     bl, 2Fh ; '/'
.text:0040B2AF                 jz      short loc_40B2CC
.text:0040B2B1                 cmp     bl, 5Ch ; '\'
.text:0040B2B4                 jz      short loc_40B2CC
.text:0040B2B6
.text:0040B2B6 loc_40B2B6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040B2B6                 mov     [ebp+268h+Destination], bl
.text:0040B2B9                 inc     esi
.text:0040B2BA                 inc     ebp
.text:0040B2BB                 movzx   ebx, byte ptr [esi]
.text:0040B2BE                 test    bl, bl
.text:0040B2C0                 jz      short loc_40B2CC
.text:0040B2C2                 cmp     bl, 2Fh ; '/'
.text:0040B2C5                 jz      short loc_40B2CC
.text:0040B2C7                 cmp     bl, 5Ch ; '\'
.text:0040B2CA                 jnz     short loc_40B2B6
.text:0040B2CC
.text:0040B2CC loc_40B2CC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040B2CC                                         ; _win32_longpath+1BF↑j ...
.text:0040B2CC                 mov     [ebp+268h+Destination], 0
.text:0040B2D0                 jmp     loc_40B23C
.text:0040B2D5 ; ---------------------------------------------------------------------------
.text:0040B2D5
.text:0040B2D5 loc_40B2D5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040B2D5                 cmp     al, 2Fh ; '/'
.text:0040B2D7                 jz      short loc_40B2A8
.text:0040B2D9                 cmp     al, 5Ch ; '\'
.text:0040B2DB                 jz      short loc_40B2A8
.text:0040B2DD                 cmp     al, 2Eh ; '.'
.text:0040B2DF                 jnz     loc_40B17B
.text:0040B2E5                 movzx   eax, byte ptr [esi+2]
.text:0040B2E9                 test    al, al
.text:0040B2EB                 jz      short loc_40B2A8
.text:0040B2ED                 cmp     al, 2Fh ; '/'
.text:0040B2EF                 jz      short loc_40B2A8
.text:0040B2F1                 cmp     al, 5Ch ; '\'
.text:0040B2F3                 jnz     loc_40B17B
.text:0040B2F9                 jmp     short loc_40B2A8
.text:0040B2F9 ; ---------------------------------------------------------------------------
.text:0040B2FB                 align 10h
.text:0040B300
.text:0040B300 loc_40B300:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040B300                                         ; _win32_longpath+7C↑j
.text:0040B300                 mov     [ebp+268h+Destination], bl
.text:0040B303                 inc     esi
.text:0040B304                 inc     ebp
.text:0040B305                 mov     [ebp+268h+Destination], 0
.text:0040B309                 movzx   ebx, byte ptr [esi]
.text:0040B30C                 test    bl, bl
.text:0040B30E                 jz      loc_40B172
.text:0040B314                 cmp     bl, 2Fh ; '/'
.text:0040B317                 jz      short loc_40B330
.text:0040B319                 cmp     bl, 5Ch ; '\'
.text:0040B31C                 jnz     loc_40B172
.text:0040B322                 lea     esi, [esi+0]
.text:0040B329                 lea     edi, [edi+0]
.text:0040B330
.text:0040B330 loc_40B330:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040B330                                         ; _win32_longpath+24F↓j ...
.text:0040B330                 inc     esi
.text:0040B331                 movzx   ebx, byte ptr [esi]
.text:0040B334                 test    bl, bl
.text:0040B336                 jz      loc_40B172
.text:0040B33C                 cmp     bl, 2Fh ; '/'
.text:0040B33F                 jz      short loc_40B330
.text:0040B341                 cmp     bl, 5Ch ; '\'
.text:0040B344                 jz      short loc_40B330
.text:0040B346                 jmp     loc_40B172
.text:0040B34B ; ---------------------------------------------------------------------------
.text:0040B34B
.text:0040B34B loc_40B34B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040B34B                                         ; _win32_longpath+53↑j
.text:0040B34B                 mov     edi, [esp+278h+lpFileName]
.text:0040B352                 movzx   edx, byte ptr [edi+1]
.text:0040B356                 cmp     dl, 2Fh ; '/'
.text:0040B359                 jz      short loc_40B364
.text:0040B35B                 cmp     dl, 5Ch ; '\'
.text:0040B35E                 jnz     loc_40B149
.text:0040B364
.text:0040B364 loc_40B364:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040B364                 mov     esi, [esp+278h+lpFileName]
.text:0040B36B                 mov     [ebp+268h+Destination], al
.text:0040B36E                 mov     ecx, [esp+278h+lpFileName]
.text:0040B375                 inc     ebp
.text:0040B376                 add     esi, 2
.text:0040B379                 movzx   ebx, byte ptr [ecx+1]
.text:0040B37D                 mov     [ebp+268h+Destination], bl
.text:0040B380                 inc     ebp
.text:0040B381                 movzx   eax, byte ptr [ecx+2]
.text:0040B385                 test    al, al
.text:0040B387                 jz      loc_40B463
.text:0040B38D                 cmp     al, 2Fh ; '/'
.text:0040B38F                 jz      loc_40B448
.text:0040B395                 cmp     al, 5Ch ; '\'
.text:0040B397                 mov     bl, al
.text:0040B399                 jz      loc_40B448
.text:0040B39F
.text:0040B39F loc_40B39F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040B39F                                         ; _win32_longpath+376↓j
.text:0040B39F                 test    bl, bl
.text:0040B3A1                 jz      loc_40B149
.text:0040B3A7                 cmp     bl, 2Fh ; '/'
.text:0040B3AA                 jz      short loc_40B3CB
.text:0040B3AC                 cmp     bl, 5Ch ; '\'
.text:0040B3AF                 jz      short loc_40B3CB
.text:0040B3B1
.text:0040B3B1 loc_40B3B1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040B3B1                 mov     [ebp+268h+Destination], bl
.text:0040B3B4                 inc     esi
.text:0040B3B5                 inc     ebp
.text:0040B3B6                 movzx   ebx, byte ptr [esi]
.text:0040B3B9                 test    bl, bl
.text:0040B3BB                 jz      loc_40B149
.text:0040B3C1                 cmp     bl, 2Fh ; '/'
.text:0040B3C4                 jz      short loc_40B3CB
.text:0040B3C6                 cmp     bl, 5Ch ; '\'
.text:0040B3C9                 jnz     short loc_40B3B1
.text:0040B3CB
.text:0040B3CB loc_40B3CB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040B3CB                                         ; _win32_longpath+2BF↑j ...
.text:0040B3CB                 test    bl, bl
.text:0040B3CD                 jz      loc_40B149
.text:0040B3D3                 mov     [ebp+268h+Destination], bl
.text:0040B3D6                 inc     esi
.text:0040B3D7                 inc     ebp
.text:0040B3D8                 movzx   ebx, byte ptr [esi]
.text:0040B3DB                 test    bl, bl
.text:0040B3DD                 jz      loc_40B149
.text:0040B3E3                 cmp     bl, 2Fh ; '/'
.text:0040B3E6                 jz      short loc_40B430
.text:0040B3E8                 cmp     bl, 5Ch ; '\'
.text:0040B3EB                 jz      short loc_40B430
.text:0040B3ED
.text:0040B3ED loc_40B3ED:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040B3ED                 test    bl, bl
.text:0040B3EF                 jz      loc_40B149
.text:0040B3F5                 cmp     bl, 2Fh ; '/'
.text:0040B3F8                 jz      loc_40B149
.text:0040B3FE                 cmp     bl, 5Ch ; '\'
.text:0040B401                 jz      loc_40B149
.text:0040B407
.text:0040B407 loc_40B407:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040B407                 mov     [ebp+268h+Destination], bl
.text:0040B40A                 inc     esi
.text:0040B40B                 inc     ebp
.text:0040B40C                 movzx   ebx, byte ptr [esi]
.text:0040B40F                 test    bl, bl
.text:0040B411                 jz      loc_40B149
.text:0040B417                 cmp     bl, 2Fh ; '/'
.text:0040B41A                 jz      loc_40B149
.text:0040B420                 cmp     bl, 5Ch ; '\'
.text:0040B423                 jnz     short loc_40B407
.text:0040B425                 jmp     loc_40B149
.text:0040B425 ; ---------------------------------------------------------------------------
.text:0040B42A                 align 10h
.text:0040B430
.text:0040B430 loc_40B430:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040B430                                         ; _win32_longpath+2FB↑j ...
.text:0040B430                 inc     esi
.text:0040B431                 movzx   ebx, byte ptr [esi]
.text:0040B434                 test    bl, bl
.text:0040B436                 jz      loc_40B149
.text:0040B43C                 cmp     bl, 2Fh ; '/'
.text:0040B43F                 jz      short loc_40B430
.text:0040B441                 cmp     bl, 5Ch ; '\'
.text:0040B444                 jz      short loc_40B430
.text:0040B446                 jmp     short loc_40B3ED
.text:0040B448 ; ---------------------------------------------------------------------------
.text:0040B448
.text:0040B448 loc_40B448:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040B448                                         ; _win32_longpath+2A9↑j ...
.text:0040B448                 inc     esi
.text:0040B449                 movzx   ebx, byte ptr [esi]
.text:0040B44C                 test    bl, bl
.text:0040B44E                 jz      loc_40B149
.text:0040B454                 cmp     bl, 2Fh ; '/'
.text:0040B457                 jz      short loc_40B448
.text:0040B459                 cmp     bl, 5Ch ; '\'
.text:0040B45C                 jz      short loc_40B448
.text:0040B45E                 jmp     loc_40B39F
.text:0040B463 ; ---------------------------------------------------------------------------
.text:0040B463
.text:0040B463 loc_40B463:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040B463                 movzx   ebx, byte ptr [esi]
.text:0040B466                 jmp     loc_40B39F
.text:0040B46B ; ---------------------------------------------------------------------------
.text:0040B46B
.text:0040B46B loc_40B46B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040B46B                 movzx   ecx, byte ptr [eax]
.text:0040B46E                 mov     esi, eax
.text:0040B470                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040B475                 add     esi, 2
.text:0040B478                 lea     ebp, [esp+12h]
.text:0040B47C                 mov     [esp+278h+Destination], cl
.text:0040B480                 jmp     loc_40B149
.text:0040B480 _win32_longpath endp
.text:0040B480
.text:0040B480 ; ---------------------------------------------------------------------------
.text:0040B485                 align 10h
.text:0040B490                 sub     esp, 0Ch
.text:0040B493                 mov     edx, [esp+10h]
.text:0040B497                 mov     dword ptr [esp+4], 0
.text:0040B49F                 mov     [esp], edx
.text:0040B4A2                 call    sub_40D280
.text:0040B4A7                 inc     eax
.text:0040B4A8                 setnz   dl
.text:0040B4AB                 add     esp, 0Ch
.text:0040B4AE                 movzx   eax, dl
.text:0040B4B1                 retn
.text:0040B4B1 ; ---------------------------------------------------------------------------
.text:0040B4B2                 align 10h
.text:0040B4C0
.text:0040B4C0 ; =============== S U B R O U T I N E =======================================
.text:0040B4C0
.text:0040B4C0
.text:0040B4C0 sub_40B4C0      proc near               ; CODE XREF: sub_40D150+AA↓p
.text:0040B4C0                                         ; sub_40ED00+B4↓p
.text:0040B4C0
.text:0040B4C0 arg_0           = dword ptr  4
.text:0040B4C0
.text:0040B4C0                 mov     ecx, [esp+arg_0]
.text:0040B4C4                 mov     edx, ecx
.text:0040B4C6                 movzx   eax, byte ptr [ecx]
.text:0040B4C9                 test    al, al
.text:0040B4CB                 jz      short loc_40B4DC
.text:0040B4CD                 lea     esi, [esi+0]
.text:0040B4D0
.text:0040B4D0 loc_40B4D0:                             ; CODE XREF: sub_40B4C0+1A↓j
.text:0040B4D0                 cmp     al, 5Ch ; '\'
.text:0040B4D2                 jz      short loc_40B4E0
.text:0040B4D4
.text:0040B4D4 loc_40B4D4:                             ; CODE XREF: sub_40B4C0+23↓j
.text:0040B4D4                 inc     edx
.text:0040B4D5                 movzx   eax, byte ptr [edx]
.text:0040B4D8                 test    al, al
.text:0040B4DA                 jnz     short loc_40B4D0
.text:0040B4DC
.text:0040B4DC loc_40B4DC:                             ; CODE XREF: sub_40B4C0+B↑j
.text:0040B4DC                 mov     eax, ecx
.text:0040B4DE                 retn
.text:0040B4DE ; ---------------------------------------------------------------------------
.text:0040B4DF                 align 10h
.text:0040B4E0
.text:0040B4E0 loc_40B4E0:                             ; CODE XREF: sub_40B4C0+12↑j
.text:0040B4E0                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B4E3                 jmp     short loc_40B4D4
.text:0040B4E3 sub_40B4C0      endp
.text:0040B4E3
.text:0040B4E3 ; ---------------------------------------------------------------------------
.text:0040B4E5                 align 10h
.text:0040B4F0                 push    ebx
.text:0040B4F1                 sub     esp, 8
.text:0040B4F4                 mov     ebx, [esp+14h]
.text:0040B4F8                 mov     edx, [esp+10h]
.text:0040B4FC                 mov     [esp], ebx
.text:0040B4FF                 mov     [esp+4], edx
.text:0040B503                 call    strcpy
.text:0040B508                 movzx   eax, byte ptr [ebx]
.text:0040B50B                 mov     edx, ebx
.text:0040B50D                 test    al, al
.text:0040B50F                 jz      short loc_40B52C
.text:0040B511                 jmp     short loc_40B520
.text:0040B511 ; ---------------------------------------------------------------------------
.text:0040B513                 align 10h
.text:0040B520
.text:0040B520 loc_40B520:                             ; CODE XREF: .text:0040B511↑j
.text:0040B520                                         ; .text:0040B52A↓j
.text:0040B520                 cmp     al, 5Ch ; '\'
.text:0040B522                 jz      short loc_40B533
.text:0040B524
.text:0040B524 loc_40B524:                             ; CODE XREF: .text:0040B536↓j
.text:0040B524                 inc     edx
.text:0040B525                 movzx   eax, byte ptr [edx]
.text:0040B528                 test    al, al
.text:0040B52A                 jnz     short loc_40B520
.text:0040B52C
.text:0040B52C loc_40B52C:                             ; CODE XREF: .text:0040B50F↑j
.text:0040B52C                 add     esp, 8
.text:0040B52F                 xor     eax, eax
.text:0040B531                 pop     ebx
.text:0040B532                 retn
.text:0040B533 ; ---------------------------------------------------------------------------
.text:0040B533
.text:0040B533 loc_40B533:                             ; CODE XREF: .text:0040B522↑j
.text:0040B533                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B536                 jmp     short loc_40B524
.text:0040B536 ; ---------------------------------------------------------------------------
.text:0040B538                 align 10h
.text:0040B540
.text:0040B540 ; =============== S U B R O U T I N E =======================================
.text:0040B540
.text:0040B540
.text:0040B540 sub_40B540      proc near               ; CODE XREF: sub_409D40+16↑p
.text:0040B540                                         ; sub_40A240+1F↑p ...
.text:0040B540
.text:0040B540 arg_0           = dword ptr  4
.text:0040B540
.text:0040B540                 mov     ecx, [esp+arg_0]
.text:0040B544                 mov     edx, ecx
.text:0040B546                 movzx   eax, byte ptr [ecx]
.text:0040B549                 test    al, al
.text:0040B54B                 jz      short loc_40B55C
.text:0040B54D                 lea     esi, [esi+0]
.text:0040B550
.text:0040B550 loc_40B550:                             ; CODE XREF: sub_40B540+1A↓j
.text:0040B550                 cmp     al, 2Fh ; '/'
.text:0040B552                 jz      short loc_40B560
.text:0040B554
.text:0040B554 loc_40B554:                             ; CODE XREF: sub_40B540+23↓j
.text:0040B554                 inc     edx
.text:0040B555                 movzx   eax, byte ptr [edx]
.text:0040B558                 test    al, al
.text:0040B55A                 jnz     short loc_40B550
.text:0040B55C
.text:0040B55C loc_40B55C:                             ; CODE XREF: sub_40B540+B↑j
.text:0040B55C                 mov     eax, ecx
.text:0040B55E                 retn
.text:0040B55E ; ---------------------------------------------------------------------------
.text:0040B55F                 align 10h
.text:0040B560
.text:0040B560 loc_40B560:                             ; CODE XREF: sub_40B540+12↑j
.text:0040B560                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B563                 jmp     short loc_40B554
.text:0040B563 sub_40B540      endp
.text:0040B563
.text:0040B563 ; ---------------------------------------------------------------------------
.text:0040B565                 align 10h
.text:0040B570                 push    ebx
.text:0040B571                 sub     esp, 8
.text:0040B574                 mov     ebx, [esp+14h]
.text:0040B578                 mov     edx, [esp+10h]
.text:0040B57C                 mov     [esp], ebx
.text:0040B57F                 mov     [esp+4], edx
.text:0040B583                 call    strcpy
.text:0040B588                 movzx   eax, byte ptr [ebx]
.text:0040B58B                 mov     edx, ebx
.text:0040B58D                 test    al, al
.text:0040B58F                 jz      short loc_40B5AC
.text:0040B591                 jmp     short loc_40B5A0
.text:0040B591 ; ---------------------------------------------------------------------------
.text:0040B593                 align 10h
.text:0040B5A0
.text:0040B5A0 loc_40B5A0:                             ; CODE XREF: .text:0040B591↑j
.text:0040B5A0                                         ; .text:0040B5AA↓j
.text:0040B5A0                 cmp     al, 2Fh ; '/'
.text:0040B5A2                 jz      short loc_40B5B3
.text:0040B5A4
.text:0040B5A4 loc_40B5A4:                             ; CODE XREF: .text:0040B5B6↓j
.text:0040B5A4                 inc     edx
.text:0040B5A5                 movzx   eax, byte ptr [edx]
.text:0040B5A8                 test    al, al
.text:0040B5AA                 jnz     short loc_40B5A0
.text:0040B5AC
.text:0040B5AC loc_40B5AC:                             ; CODE XREF: .text:0040B58F↑j
.text:0040B5AC                 add     esp, 8
.text:0040B5AF                 xor     eax, eax
.text:0040B5B1                 pop     ebx
.text:0040B5B2                 retn
.text:0040B5B3 ; ---------------------------------------------------------------------------
.text:0040B5B3
.text:0040B5B3 loc_40B5B3:                             ; CODE XREF: .text:0040B5A2↑j
.text:0040B5B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B5B6                 jmp     short loc_40B5A4
.text:0040B5B6 ; ---------------------------------------------------------------------------
.text:0040B5B8                 align 10h
.text:0040B5C0                 push    ebx
.text:0040B5C1                 sub     esp, 8
.text:0040B5C4                 mov     ebx, [esp+14h]
.text:0040B5C8                 mov     edx, [esp+10h]
.text:0040B5CC                 mov     [esp+4], ebx
.text:0040B5D0                 mov     [esp], edx
.text:0040B5D3                 call    sub_40D100
.text:0040B5D8                 movzx   eax, byte ptr [ebx]
.text:0040B5DB                 mov     edx, ebx
.text:0040B5DD                 test    al, al
.text:0040B5DF                 jz      short loc_40B5FC
.text:0040B5E1                 jmp     short loc_40B5F0
.text:0040B5E1 ; ---------------------------------------------------------------------------
.text:0040B5E3                 align 10h
.text:0040B5F0
.text:0040B5F0 loc_40B5F0:                             ; CODE XREF: .text:0040B5E1↑j
.text:0040B5F0                                         ; .text:0040B5FA↓j
.text:0040B5F0                 cmp     al, 2Fh ; '/'
.text:0040B5F2                 jz      short loc_40B603
.text:0040B5F4
.text:0040B5F4 loc_40B5F4:                             ; CODE XREF: .text:0040B606↓j
.text:0040B5F4                 inc     edx
.text:0040B5F5                 movzx   eax, byte ptr [edx]
.text:0040B5F8                 test    al, al
.text:0040B5FA                 jnz     short loc_40B5F0
.text:0040B5FC
.text:0040B5FC loc_40B5FC:                             ; CODE XREF: .text:0040B5DF↑j
.text:0040B5FC                 add     esp, 8
.text:0040B5FF                 xor     eax, eax
.text:0040B601                 pop     ebx
.text:0040B602                 retn
.text:0040B603 ; ---------------------------------------------------------------------------
.text:0040B603
.text:0040B603 loc_40B603:                             ; CODE XREF: .text:0040B5F2↑j
.text:0040B603                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B606                 jmp     short loc_40B5F4
.text:0040B606 ; ---------------------------------------------------------------------------
.text:0040B608                 align 10h
.text:0040B610                 push    ebx
.text:0040B611                 sub     esp, 8
.text:0040B614                 mov     ebx, [esp+14h]
.text:0040B618                 mov     edx, [esp+10h]
.text:0040B61C                 mov     [esp], ebx
.text:0040B61F                 mov     [esp+4], edx
.text:0040B623                 call    sub_40D100
.text:0040B628                 movzx   eax, byte ptr [ebx]
.text:0040B62B                 mov     edx, ebx
.text:0040B62D                 test    al, al
.text:0040B62F                 jz      short loc_40B64C
.text:0040B631                 jmp     short loc_40B640
.text:0040B631 ; ---------------------------------------------------------------------------
.text:0040B633                 align 10h
.text:0040B640
.text:0040B640 loc_40B640:                             ; CODE XREF: .text:0040B631↑j
.text:0040B640                                         ; .text:0040B64A↓j
.text:0040B640                 cmp     al, 5Ch ; '\'
.text:0040B642                 jz      short loc_40B651
.text:0040B644
.text:0040B644 loc_40B644:                             ; CODE XREF: .text:0040B654↓j
.text:0040B644                 inc     edx
.text:0040B645                 movzx   eax, byte ptr [edx]
.text:0040B648                 test    al, al
.text:0040B64A                 jnz     short loc_40B640
.text:0040B64C
.text:0040B64C loc_40B64C:                             ; CODE XREF: .text:0040B62F↑j
.text:0040B64C                 add     esp, 8
.text:0040B64F                 pop     ebx
.text:0040B650                 retn
.text:0040B651 ; ---------------------------------------------------------------------------
.text:0040B651
.text:0040B651 loc_40B651:                             ; CODE XREF: .text:0040B642↑j
.text:0040B651                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B654                 jmp     short loc_40B644
.text:0040B654 ; ---------------------------------------------------------------------------
.text:0040B656                 align 10h
.text:0040B660
.text:0040B660 ; =============== S U B R O U T I N E =======================================
.text:0040B660
.text:0040B660
.text:0040B660 ; int __cdecl sub_40B660(LPSTR)
.text:0040B660 sub_40B660      proc near               ; CODE XREF: .text:0040B6EE↓p
.text:0040B660                                         ; .text:0040B72E↓p ...
.text:0040B660
.text:0040B660 hModule         = dword ptr -1Ch
.text:0040B660 lpFilename      = dword ptr -18h
.text:0040B660 nSize           = dword ptr -14h
.text:0040B660 arg_0           = dword ptr  4
.text:0040B660
.text:0040B660                 push    esi
.text:0040B661                 push    ebx
.text:0040B662                 sub     esp, 14h
.text:0040B665                 mov     esi, [esp+1Ch+arg_0]
.text:0040B669                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040B671                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040B678                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040B67C                 call    GetModuleFileNameA
.text:0040B681                 sub     esp, 0Ch
.text:0040B684                 test    eax, eax
.text:0040B686                 jz      short loc_40B6C8
.text:0040B688                 cmp     eax, 104h
.text:0040B68D                 jg      short loc_40B6B9
.text:0040B68F
.text:0040B68F loc_40B68F:                             ; CODE XREF: sub_40B660+66↓j
.text:0040B68F                                         ; sub_40B660+78↓j
.text:0040B68F                 movzx   eax, byte ptr [esi]
.text:0040B692                 mov     edx, esi
.text:0040B694                 test    al, al
.text:0040B696                 jz      short loc_40B6AC
.text:0040B698                 nop
.text:0040B699                 lea     esi, [esi+0]
.text:0040B6A0
.text:0040B6A0 loc_40B6A0:                             ; CODE XREF: sub_40B660+4A↓j
.text:0040B6A0                 cmp     al, 5Ch ; '\'
.text:0040B6A2                 jz      short loc_40B6B4
.text:0040B6A4
.text:0040B6A4 loc_40B6A4:                             ; CODE XREF: sub_40B660+57↓j
.text:0040B6A4                 inc     edx
.text:0040B6A5                 movzx   eax, byte ptr [edx]
.text:0040B6A8                 test    al, al
.text:0040B6AA                 jnz     short loc_40B6A0
.text:0040B6AC
.text:0040B6AC loc_40B6AC:                             ; CODE XREF: sub_40B660+36↑j
.text:0040B6AC                 add     esp, 14h
.text:0040B6AF                 mov     eax, esi
.text:0040B6B1                 pop     ebx
.text:0040B6B2                 pop     esi
.text:0040B6B3                 retn
.text:0040B6B4 ; ---------------------------------------------------------------------------
.text:0040B6B4
.text:0040B6B4 loc_40B6B4:                             ; CODE XREF: sub_40B660+42↑j
.text:0040B6B4                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B6B7                 jmp     short loc_40B6A4
.text:0040B6B9 ; ---------------------------------------------------------------------------
.text:0040B6B9
.text:0040B6B9 loc_40B6B9:                             ; CODE XREF: sub_40B660+2D↑j
.text:0040B6B9                 call    _errno
.text:0040B6BE                 mov     dword ptr [eax], 26h ; '&'
.text:0040B6C4                 xor     esi, esi
.text:0040B6C6                 jmp     short loc_40B68F
.text:0040B6C8 ; ---------------------------------------------------------------------------
.text:0040B6C8
.text:0040B6C8 loc_40B6C8:                             ; CODE XREF: sub_40B660+26↑j
.text:0040B6C8                 call    sub_40D0E0
.text:0040B6CD                 mov     ebx, eax
.text:0040B6CF                 xor     esi, esi
.text:0040B6D1                 call    _errno
.text:0040B6D6                 mov     [eax], ebx
.text:0040B6D8                 jmp     short loc_40B68F
.text:0040B6D8 sub_40B660      endp
.text:0040B6D8
.text:0040B6D8 ; ---------------------------------------------------------------------------
.text:0040B6DA                 align 10h
.text:0040B6E0                 sub     esp, 0Ch
.text:0040B6E3                 mov     [esp+8], ebx
.text:0040B6E7                 mov     ebx, [esp+10h]
.text:0040B6EB                 mov     [esp], ebx
.text:0040B6EE                 call    sub_40B660
.text:0040B6F3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B6FB                 mov     [esp], ebx
.text:0040B6FE                 call    strrchr
.text:0040B703                 test    eax, eax
.text:0040B705                 jz      short loc_40B70A
.text:0040B707                 lea     ebx, [eax+1]
.text:0040B70A
.text:0040B70A loc_40B70A:                             ; CODE XREF: .text:0040B705↑j
.text:0040B70A                 mov     eax, ebx
.text:0040B70C                 mov     ebx, [esp+8]
.text:0040B710                 add     esp, 0Ch
.text:0040B713                 retn
.text:0040B713 ; ---------------------------------------------------------------------------
.text:0040B714                 align 10h
.text:0040B720                 sub     esp, 0Ch
.text:0040B723                 mov     [esp+8], ebx
.text:0040B727                 mov     ebx, [esp+10h]
.text:0040B72B                 mov     [esp], ebx
.text:0040B72E                 call    sub_40B660
.text:0040B733                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B73B                 mov     [esp], ebx
.text:0040B73E                 call    strrchr
.text:0040B743                 test    eax, eax
.text:0040B745                 jz      short loc_40B74A
.text:0040B747                 mov     byte ptr [eax], 0
.text:0040B74A
.text:0040B74A loc_40B74A:                             ; CODE XREF: .text:0040B745↑j
.text:0040B74A                 mov     eax, ebx
.text:0040B74C                 mov     ebx, [esp+8]
.text:0040B750                 add     esp, 0Ch
.text:0040B753                 retn
.text:0040B753 ; ---------------------------------------------------------------------------
.text:0040B754                 align 10h
.text:0040B760                 sub     esp, 0Ch
.text:0040B763                 mov     [esp+8], ebx
.text:0040B767                 mov     ebx, [esp+10h]
.text:0040B76B                 mov     [esp], ebx
.text:0040B76E                 call    sub_40B660
.text:0040B773                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B77B                 mov     [esp], ebx
.text:0040B77E                 call    strrchr
.text:0040B783                 test    eax, eax
.text:0040B785                 jz      short loc_40B78A
.text:0040B787                 mov     byte ptr [eax], 0
.text:0040B78A
.text:0040B78A loc_40B78A:                             ; CODE XREF: .text:0040B785↑j
.text:0040B78A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B792                 mov     [esp], ebx
.text:0040B795                 call    strrchr
.text:0040B79A                 test    eax, eax
.text:0040B79C                 jz      short loc_40B7A1
.text:0040B79E                 mov     byte ptr [eax], 0
.text:0040B7A1
.text:0040B7A1 loc_40B7A1:                             ; CODE XREF: .text:0040B79C↑j
.text:0040B7A1                 mov     eax, ebx
.text:0040B7A3                 mov     ebx, [esp+8]
.text:0040B7A7                 add     esp, 0Ch
.text:0040B7AA                 retn
.text:0040B7AA ; ---------------------------------------------------------------------------
.text:0040B7AB                 align 10h
.text:0040B7B0                 sub     esp, 1Ch
.text:0040B7B3                 mov     edx, [esp+20h]
.text:0040B7B7                 mov     [esp+10h], ebx
.text:0040B7BB                 xor     ebx, ebx
.text:0040B7BD                 mov     [esp+14h], esi
.text:0040B7C1                 mov     [esp+18h], edi
.text:0040B7C5                 mov     [esp], edx
.text:0040B7C8                 call    sub_40D130
.text:0040B7CD                 mov     edx, [esp+24h]
.text:0040B7D1                 mov     edi, eax
.text:0040B7D3                 mov     [esp], edx
.text:0040B7D6                 call    sub_40D130
.text:0040B7DB                 mov     [esp+4], eax
.text:0040B7DF                 mov     esi, eax
.text:0040B7E1                 mov     [esp], edi
.text:0040B7E4                 call    _stricmp_0
.text:0040B7E9                 mov     [esp], edi
.text:0040B7EC                 test    eax, eax
.text:0040B7EE                 setz    bl
.text:0040B7F1                 call    free
.text:0040B7F6                 mov     [esp], esi
.text:0040B7F9                 call    free
.text:0040B7FE                 mov     eax, ebx
.text:0040B800                 mov     esi, [esp+14h]
.text:0040B804                 mov     ebx, [esp+10h]
.text:0040B808                 mov     edi, [esp+18h]
.text:0040B80C                 add     esp, 1Ch
.text:0040B80F                 retn
.text:0040B810 ; ---------------------------------------------------------------------------
.text:0040B810                 xor     eax, eax
.text:0040B812                 retn
.text:0040B812 ; ---------------------------------------------------------------------------
.text:0040B813 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040B847↓o
.text:0040B820 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040B856↓o
.text:0040B830 ; ---------------------------------------------------------------------------
.text:0040B830                 sub     esp, 1Ch
.text:0040B833                 mov     [esp+10h], ebx
.text:0040B837                 mov     ebx, [esp+20h]
.text:0040B83B                 mov     [esp+18h], edi
.text:0040B83F                 mov     edi, [esp+24h]
.text:0040B843                 mov     [esp+14h], esi
.text:0040B847                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040B84E                 call    GetModuleHandleA
.text:0040B853                 sub     esp, 4
.text:0040B856                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040B85E                 mov     [esp], eax
.text:0040B861                 call    GetProcAddress
.text:0040B866                 sub     esp, 8
.text:0040B869                 test    eax, eax
.text:0040B86B                 jz      short loc_40B883
.text:0040B86D                 mov     dword ptr [esp+8], 104h
.text:0040B875                 mov     [esp+4], ebx
.text:0040B879                 mov     [esp], edi
.text:0040B87C                 call    eax
.text:0040B87E                 sub     esp, 0Ch
.text:0040B881                 mov     esi, eax
.text:0040B883
.text:0040B883 loc_40B883:                             ; CODE XREF: .text:0040B86B↑j
.text:0040B883                 test    esi, esi
.text:0040B885                 jz      short loc_40B8A0
.text:0040B887
.text:0040B887 loc_40B887:                             ; CODE XREF: .text:0040B8BB↓j
.text:0040B887                 mov     eax, ebx
.text:0040B889                 mov     esi, [esp+14h]
.text:0040B88D                 mov     ebx, [esp+10h]
.text:0040B891                 mov     edi, [esp+18h]
.text:0040B895                 add     esp, 1Ch
.text:0040B898                 retn
.text:0040B898 ; ---------------------------------------------------------------------------
.text:0040B899                 align 10h
.text:0040B8A0
.text:0040B8A0 loc_40B8A0:                             ; CODE XREF: .text:0040B885↑j
.text:0040B8A0                 call    sub_40DBC0
.text:0040B8A5                 mov     [esp], ebx
.text:0040B8A8                 mov     [esp+4], edi
.text:0040B8AC                 call    strcpy
.text:0040B8B1                 mov     [esp], ebx
.text:0040B8B4                 call    _win32_longpath
.text:0040B8B9                 mov     ebx, eax
.text:0040B8BB                 jmp     short loc_40B887
.text:0040B8BB ; ---------------------------------------------------------------------------
.text:0040B8BD                 align 10h
.text:0040B8C0                 sub     esp, 1Ch
.text:0040B8C3                 mov     [esp+18h], edi
.text:0040B8C7                 mov     edi, [esp+20h]
.text:0040B8CB                 mov     [esp+10h], ebx
.text:0040B8CF                 mov     [esp+14h], esi
.text:0040B8D3                 mov     dword ptr [esp+8], 0
.text:0040B8DB                 mov     dword ptr [esp+4], 0
.text:0040B8E3                 mov     [esp], edi
.text:0040B8E6                 call    GetShortPathNameA
.text:0040B8EB                 sub     esp, 0Ch
.text:0040B8EE                 mov     ebx, eax
.text:0040B8F0                 test    eax, eax
.text:0040B8F2                 jz      short loc_40B940
.text:0040B8F4                 lea     edx, [eax+1]
.text:0040B8F7                 mov     [esp], edx
.text:0040B8FA                 call    malloc
.text:0040B8FF                 test    eax, eax
.text:0040B901                 mov     esi, eax
.text:0040B903                 jz      short loc_40B940
.text:0040B905                 mov     [esp+8], ebx
.text:0040B909                 mov     [esp+4], eax
.text:0040B90D                 mov     [esp], edi
.text:0040B910                 call    GetShortPathNameA
.text:0040B915                 sub     esp, 0Ch
.text:0040B918                 mov     edx, esi
.text:0040B91A                 test    eax, eax
.text:0040B91C                 jz      short loc_40B932
.text:0040B91E                 mov     esi, esi
.text:0040B920
.text:0040B920 loc_40B920:                             ; CODE XREF: .text:0040B950↓j
.text:0040B920                 mov     ebx, [esp+10h]
.text:0040B924                 mov     eax, edx
.text:0040B926                 mov     esi, [esp+14h]
.text:0040B92A                 mov     edi, [esp+18h]
.text:0040B92E                 add     esp, 1Ch
.text:0040B931                 retn
.text:0040B932 ; ---------------------------------------------------------------------------
.text:0040B932
.text:0040B932 loc_40B932:                             ; CODE XREF: .text:0040B91C↑j
.text:0040B932                 mov     [esp], esi
.text:0040B935                 call    free
.text:0040B93A                 lea     esi, [esi+0]
.text:0040B940
.text:0040B940 loc_40B940:                             ; CODE XREF: .text:0040B8F2↑j
.text:0040B940                                         ; .text:0040B903↑j
.text:0040B940                 call    sub_40D0E0
.text:0040B945                 mov     esi, eax
.text:0040B947                 call    _errno
.text:0040B94C                 mov     [eax], esi
.text:0040B94E                 mov     edx, edi
.text:0040B950                 jmp     short loc_40B920
.text:0040B950 ; ---------------------------------------------------------------------------
.text:0040B952                 align 10h
.text:0040B960
.text:0040B960 ; =============== S U B R O U T I N E =======================================
.text:0040B960
.text:0040B960
.text:0040B960 sub_40B960      proc near               ; DATA XREF: sub_40B970+186↓o
.text:0040B960                 sub     al, [eax]
.text:0040B962                 lea     esi, [esi+0]
.text:0040B969                 lea     edi, [edi+0]
.text:0040B969 sub_40B960      endp
.text:0040B969
.text:0040B970
.text:0040B970 ; =============== S U B R O U T I N E =======================================
.text:0040B970
.text:0040B970
.text:0040B970 sub_40B970      proc near               ; CODE XREF: sub_4035B0+103↑p
.text:0040B970
.text:0040B970 hFindFile       = dword ptr -2DCh
.text:0040B970 lpFindFileData  = dword ptr -2D8h
.text:0040B970 Count           = dword ptr -2D4h
.text:0040B970 Destination     = byte ptr -2CCh
.text:0040B970 var_1BC         = dword ptr -1BCh
.text:0040B970 var_1B4         = dword ptr -1B4h
.text:0040B970 var_1B0         = dword ptr -1B0h
.text:0040B970 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040B970 arg_0           = dword ptr  4
.text:0040B970
.text:0040B970                 push    ebp
.text:0040B971                 push    edi
.text:0040B972                 push    esi
.text:0040B973                 push    ebx
.text:0040B974                 sub     esp, 2CCh
.text:0040B97A                 mov     ebp, [esp+2DCh+arg_0]
.text:0040B981                 test    ebp, ebp
.text:0040B983                 mov     ebx, [ebp+4]
.text:0040B986                 jz      loc_40BB3D
.text:0040B98C                 mov     edx, [ebp+0]
.text:0040B98F                 cmp     edx, 0FFFFFFFFh
.text:0040B992                 jz      loc_40BAC7
.text:0040B998                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:0040B99B                 lea     ecx, [esp+2DCh+FindFileData]
.text:0040B9A2                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:0040B9A6                 call    FindNextFileA
.text:0040B9AB                 sub     esp, 8
.text:0040B9AE                 test    eax, eax
.text:0040B9B0                 jz      loc_40BABB
.text:0040B9B6
.text:0040B9B6 loc_40B9B6:                             ; CODE XREF: sub_40B970+1BC↓j
.text:0040B9B6                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040B9BE                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:0040B9C5                 mov     esi, [ebx]
.text:0040B9C7                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:0040B9CB                 lea     esi, [ebx+14h]
.text:0040B9CE                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040B9D1                 call    strncpy
.text:0040B9D6                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040B9DE                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:0040B9E2                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040B9E5                 call    strncat
.text:0040B9EA                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:0040B9EE                 lea     edx, [esp+2DCh+var_1BC]
.text:0040B9F5                 mov     [esp+2DCh+Count], edx ; int
.text:0040B9F9                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:0040BA00                 call    sub_40B0A0
.text:0040BA05                 test    eax, eax
.text:0040BA07                 jnz     loc_40BAA9
.text:0040BA0D                 mov     ecx, [esp+2DCh+var_1BC]
.text:0040BA14                 and     ecx, 0F000h
.text:0040BA1A                 shr     ecx, 0Ch
.text:0040BA1D                 mov     [ebx+12h], cl
.text:0040BA20                 mov     ecx, edi
.text:0040BA22                 lea     esi, [esi+0]
.text:0040BA29                 lea     edi, [edi+0]
.text:0040BA30
.text:0040BA30 loc_40BA30:                             ; CODE XREF: sub_40B970+D5↓j
.text:0040BA30                 mov     eax, [ecx]
.text:0040BA32                 add     ecx, 4
.text:0040BA35                 lea     edx, [eax-1010101h]
.text:0040BA3B                 not     eax
.text:0040BA3D                 and     edx, eax
.text:0040BA3F                 and     edx, 80808080h
.text:0040BA45                 jz      short loc_40BA30
.text:0040BA47                 test    edx, 8080h
.text:0040BA4D                 jnz     short loc_40BA55
.text:0040BA4F                 shr     edx, 10h
.text:0040BA52                 add     ecx, 2
.text:0040BA55
.text:0040BA55 loc_40BA55:                             ; CODE XREF: sub_40B970+DD↑j
.text:0040BA55                 mov     word ptr [ebx+10h], 110h
.text:0040BA5B                 add     dl, dl
.text:0040BA5D                 sbb     ecx, 3
.text:0040BA60                 sub     ecx, edi
.text:0040BA62                 mov     [ebx+13h], cl
.text:0040BA65                 mov     edx, [esp+2DCh+var_1B4]
.text:0040BA6C                 mov     ecx, [esp+2DCh+var_1B0]
.text:0040BA73                 mov     [ebx+8], edx
.text:0040BA76                 mov     [ebx+0Ch], ecx
.text:0040BA79                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040BA81                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:0040BA85                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040BA88                 call    strncpy
.text:0040BA8D                 inc     dword ptr [ebp+14h]
.text:0040BA90                 call    _errno
.text:0040BA95                 mov     dword ptr [eax], 0
.text:0040BA9B                 lea     eax, [ebx+8]
.text:0040BA9E
.text:0040BA9E loc_40BA9E:                             ; CODE XREF: sub_40B970+149↓j
.text:0040BA9E                 add     esp, 2CCh
.text:0040BAA4                 pop     ebx
.text:0040BAA5                 pop     esi
.text:0040BAA6                 pop     edi
.text:0040BAA7                 pop     ebp
.text:0040BAA8                 retn
.text:0040BAA9 ; ---------------------------------------------------------------------------
.text:0040BAA9
.text:0040BAA9 loc_40BAA9:                             ; CODE XREF: sub_40B970+97↑j
.text:0040BAA9                                         ; sub_40B970+153↓j ...
.text:0040BAA9                 call    sub_40D0E0
.text:0040BAAE                 mov     ebp, eax
.text:0040BAB0                 call    _errno
.text:0040BAB5                 mov     [eax], ebp
.text:0040BAB7
.text:0040BAB7 loc_40BAB7:                             ; CODE XREF: sub_40B970+155↓j
.text:0040BAB7                                         ; sub_40B970+1D8↓j
.text:0040BAB7                 xor     eax, eax
.text:0040BAB9                 jmp     short loc_40BA9E
.text:0040BABB ; ---------------------------------------------------------------------------
.text:0040BABB
.text:0040BABB loc_40BABB:                             ; CODE XREF: sub_40B970+40↑j
.text:0040BABB                 call    GetLastError
.text:0040BAC0                 cmp     eax, 12h
.text:0040BAC3                 jnz     short loc_40BAA9
.text:0040BAC5                 jmp     short loc_40BAB7
.text:0040BAC7 ; ---------------------------------------------------------------------------
.text:0040BAC7
.text:0040BAC7 loc_40BAC7:                             ; CODE XREF: sub_40B970+22↑j
.text:0040BAC7                 mov     edx, [ebx]
.text:0040BAC9                 lea     esi, [esp+2DCh+Destination]
.text:0040BACD                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040BAD0                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:0040BAD4                 call    strcpy
.text:0040BAD9                 mov     ecx, esi
.text:0040BADB                 nop
.text:0040BADC                 lea     esi, [esi+0]
.text:0040BAE0
.text:0040BAE0 loc_40BAE0:                             ; CODE XREF: sub_40B970+184↓j
.text:0040BAE0                 mov     edi, [ecx]
.text:0040BAE2                 add     ecx, 4
.text:0040BAE5                 lea     eax, [edi-1010101h]
.text:0040BAEB                 not     edi
.text:0040BAED                 and     eax, edi
.text:0040BAEF                 test    eax, 80808080h
.text:0040BAF4                 jz      short loc_40BAE0
.text:0040BAF6                 mov     [esp+2DCh+lpFindFileData], offset sub_40B960 ; Source
.text:0040BAFE                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040BB01                 call    strcat
.text:0040BB06                 mov     [esp+2DCh+hFindFile], esi
.text:0040BB09                 call    sub_40B540
.text:0040BB0E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:0040BB11                 lea     edx, [esp+2DCh+FindFileData]
.text:0040BB18                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:0040BB1C                 call    FindFirstFileA
.text:0040BB21                 sub     esp, 8
.text:0040BB24                 cmp     eax, 0FFFFFFFFh
.text:0040BB27                 jz      short loc_40BB31
.text:0040BB29                 mov     [ebp+0], eax
.text:0040BB2C                 jmp     loc_40B9B6
.text:0040BB31 ; ---------------------------------------------------------------------------
.text:0040BB31
.text:0040BB31 loc_40BB31:                             ; CODE XREF: sub_40B970+1B7↑j
.text:0040BB31                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:0040BB38                 jmp     loc_40BAA9
.text:0040BB3D ; ---------------------------------------------------------------------------
.text:0040BB3D
.text:0040BB3D loc_40BB3D:                             ; CODE XREF: sub_40B970+16↑j
.text:0040BB3D                 call    _errno
.text:0040BB42                 mov     dword ptr [eax], 9
.text:0040BB48                 jmp     loc_40BAB7
.text:0040BB48 sub_40B970      endp
.text:0040BB48
.text:0040BB48 ; ---------------------------------------------------------------------------
.text:0040BB4D                 align 10h
.text:0040BB50 ; const char String[4]
.text:0040BB50 String          db ' :/',0              ; DATA XREF: sub_40BB60+FA↓o
.text:0040BB54                 align 10h
.text:0040BB60
.text:0040BB60 ; =============== S U B R O U T I N E =======================================
.text:0040BB60
.text:0040BB60
.text:0040BB60 ; int __cdecl sub_40BB60(LPCSTR)
.text:0040BB60 sub_40BB60      proc near               ; CODE XREF: sub_409D40+E↑p
.text:0040BB60                                         ; sub_40A240+17↑p ...
.text:0040BB60
.text:0040BB60 Str             = dword ptr -1Ch
.text:0040BB60 Val             = dword ptr -18h
.text:0040BB60 Count           = dword ptr -14h
.text:0040BB60 var_10          = dword ptr -10h
.text:0040BB60 var_C           = dword ptr -0Ch
.text:0040BB60 var_8           = dword ptr -8
.text:0040BB60 var_4           = dword ptr -4
.text:0040BB60 arg_0           = dword ptr  4
.text:0040BB60
.text:0040BB60                 sub     esp, 1Ch
.text:0040BB63                 mov     edx, [esp+1Ch+arg_0]
.text:0040BB67                 mov     [esp+1Ch+var_8], edi
.text:0040BB6B                 mov     [esp+1Ch+var_10], ebx
.text:0040BB6F                 mov     [esp+1Ch+var_C], esi
.text:0040BB73                 mov     [esp+1Ch+var_4], ebp
.text:0040BB77                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040BB7A                 call    sub_40D130
.text:0040BB7F                 test    eax, eax
.text:0040BB81                 mov     edi, eax
.text:0040BB83                 jz      short loc_40BBC0
.text:0040BB85                 mov     [esp+1Ch+Str], eax ; Str
.text:0040BB88                 call    strlen
.text:0040BB8D                 cmp     eax, 2
.text:0040BB90                 jbe     short loc_40BB9C
.text:0040BB92                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040BB96                 jz      loc_40BC50
.text:0040BB9C
.text:0040BB9C loc_40BB9C:                             ; CODE XREF: sub_40BB60+30↑j
.text:0040BB9C                                         ; sub_40BB60+F4↓j
.text:0040BB9C                 test    edi, edi
.text:0040BB9E                 jz      short loc_40BBC0
.text:0040BBA0                 mov     [esp+1Ch+Str], edi ; Str
.text:0040BBA3                 call    strlen
.text:0040BBA8                 cmp     eax, 4
.text:0040BBAB                 mov     ebp, eax
.text:0040BBAD                 jle     short loc_40BBC0
.text:0040BBAF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040BBB2                 jz      short loc_40BBE0
.text:0040BBB4                 lea     esi, [esi+0]
.text:0040BBBA                 lea     edi, [edi+0]
.text:0040BBC0
.text:0040BBC0 loc_40BBC0:                             ; CODE XREF: sub_40BB60+23↑j
.text:0040BBC0                                         ; sub_40BB60+3E↑j ...
.text:0040BBC0                 xor     esi, esi
.text:0040BBC2
.text:0040BBC2 loc_40BBC2:                             ; CODE XREF: sub_40BB60+CD↓j
.text:0040BBC2                                         ; sub_40BB60+115↓j
.text:0040BBC2                 mov     [esp+1Ch+Str], edi ; Block
.text:0040BBC5                 call    free
.text:0040BBCA                 mov     eax, esi
.text:0040BBCC                 mov     ebx, [esp+1Ch+var_10]
.text:0040BBD0                 mov     esi, [esp+1Ch+var_C]
.text:0040BBD4                 mov     edi, [esp+1Ch+var_8]
.text:0040BBD8                 mov     ebp, [esp+1Ch+var_4]
.text:0040BBDC                 add     esp, 1Ch
.text:0040BBDF                 retn
.text:0040BBE0 ; ---------------------------------------------------------------------------
.text:0040BBE0
.text:0040BBE0 loc_40BBE0:                             ; CODE XREF: sub_40BB60+52↑j
.text:0040BBE0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040BBE4                 jnz     short loc_40BBC0
.text:0040BBE6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040BBEE                 lea     ecx, [edi+2]
.text:0040BBF1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040BBF4                 call    strchr
.text:0040BBF9                 test    eax, eax
.text:0040BBFB                 jnz     short loc_40BC2F
.text:0040BBFD
.text:0040BBFD loc_40BBFD:                             ; CODE XREF: sub_40BB60+E2↓j
.text:0040BBFD                 inc     ebp
.text:0040BBFE
.text:0040BBFE loc_40BBFE:                             ; CODE XREF: sub_40BB60+E9↓j
.text:0040BBFE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040BC06                 lea     ebx, [ebp+1]
.text:0040BC09                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040BC0C                 call    calloc
.text:0040BC11                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040BC14                 mov     esi, eax
.text:0040BC16                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040BC1A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040BC1E                 call    strncpy
.text:0040BC23                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040BC28                 mov     byte ptr [ebp+esi+0], 0
.text:0040BC2D                 jmp     short loc_40BBC2
.text:0040BC2F ; ---------------------------------------------------------------------------
.text:0040BC2F
.text:0040BC2F loc_40BC2F:                             ; CODE XREF: sub_40BB60+9B↑j
.text:0040BC2F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040BC37                 inc     eax
.text:0040BC38                 mov     [esp+1Ch+Str], eax ; Str
.text:0040BC3B                 call    strchr
.text:0040BC40                 test    eax, eax
.text:0040BC42                 jz      short loc_40BBFD
.text:0040BC44                 sub     eax, edi
.text:0040BC46                 lea     ebp, [eax+1]
.text:0040BC49                 jmp     short loc_40BBFE
.text:0040BC49 ; ---------------------------------------------------------------------------
.text:0040BC4B                 align 10h
.text:0040BC50
.text:0040BC50 loc_40BC50:                             ; CODE XREF: sub_40BB60+36↑j
.text:0040BC50                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040BC54                 jnz     loc_40BB9C
.text:0040BC5A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040BC61                 call    _strdup
.text:0040BC66                 movsx   edx, byte ptr [edi]
.text:0040BC69                 mov     esi, eax
.text:0040BC6B                 mov     [esp+1Ch+Str], edx ; C
.text:0040BC6E                 call    toupper
.text:0040BC73                 mov     [esi], al
.text:0040BC75                 jmp     loc_40BBC2
.text:0040BC75 sub_40BB60      endp
.text:0040BC75
.text:0040BC75 ; ---------------------------------------------------------------------------
.text:0040BC7A                 align 10h
.text:0040BC80
.text:0040BC80 ; =============== S U B R O U T I N E =======================================
.text:0040BC80
.text:0040BC80
.text:0040BC80 sub_40BC80      proc near               ; CODE XREF: .text:0040BDD4↓p
.text:0040BC80                                         ; .text:0040BEB8↓p
.text:0040BC80
.text:0040BC80 Str             = dword ptr -2Ch
.text:0040BC80 Val             = dword ptr -28h
.text:0040BC80 var_18          = dword ptr -18h
.text:0040BC80 var_11          = byte ptr -11h
.text:0040BC80 arg_0           = dword ptr  4
.text:0040BC80
.text:0040BC80                 push    ebp
.text:0040BC81                 push    edi
.text:0040BC82                 push    esi
.text:0040BC83                 push    ebx
.text:0040BC84                 sub     esp, 1Ch
.text:0040BC87                 mov     edx, [esp+2Ch+arg_0]
.text:0040BC8B                 cmp     edx, ds:dword_414210
.text:0040BC91                 mov     [esp+2Ch+var_11], 0
.text:0040BC96                 jz      loc_40BD94
.text:0040BC9C                 mov     ebx, ds:dword_414200
.text:0040BCA2                 test    ebx, ebx
.text:0040BCA4                 jz      short loc_40BD12
.text:0040BCA6
.text:0040BCA6 loc_40BCA6:                             ; CODE XREF: sub_40BC80+10F↓j
.text:0040BCA6                 mov     ebx, [esp+2Ch+arg_0]
.text:0040BCAA                 xor     edi, edi
.text:0040BCAC                 xor     esi, esi
.text:0040BCAE                 mov     ebp, offset dword_414228
.text:0040BCB3                 lea     esi, [esi+0]
.text:0040BCB9                 lea     edi, [edi+0]
.text:0040BCC0
.text:0040BCC0 loc_40BCC0:                             ; CODE XREF: sub_40BC80+60↓j
.text:0040BCC0                 mov     edx, [ebp+4]
.text:0040BCC3                 mov     ecx, edi
.text:0040BCC5                 mov     eax, [ebp+0]
.text:0040BCC8                 shl     ecx, 4
.text:0040BCCB                 mov     [esp+2Ch+var_18], ecx
.text:0040BCCF                 mov     ecx, edx
.text:0040BCD1                 xor     eax, ebx
.text:0040BCD3                 xor     ecx, esi
.text:0040BCD5                 or      ecx, eax
.text:0040BCD7                 jz      short loc_40BD01
.text:0040BCD9                 inc     edi
.text:0040BCDA                 add     ebp, 10h
.text:0040BCDD                 cmp     edi, 20h ; ' '
.text:0040BCE0                 jle     short loc_40BCC0
.text:0040BCE2
.text:0040BCE2 loc_40BCE2:                             ; CODE XREF: sub_40BC80+90↓j
.text:0040BCE2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040BCE7                 mov     eax, [esp+2Ch+arg_0]
.text:0040BCEB                 mov     byte_413070, bl
.text:0040BCF1                 mov     ds:dword_414210, eax
.text:0040BCF6                 movsx   eax, bl
.text:0040BCF9
.text:0040BCF9 loc_40BCF9:                             ; CODE XREF: sub_40BC80+11B↓j
.text:0040BCF9                 add     esp, 1Ch
.text:0040BCFC                 pop     ebx
.text:0040BCFD                 pop     esi
.text:0040BCFE                 pop     edi
.text:0040BCFF                 pop     ebp
.text:0040BD00                 retn
.text:0040BD01 ; ---------------------------------------------------------------------------
.text:0040BD01
.text:0040BD01 loc_40BD01:                             ; CODE XREF: sub_40BC80+57↑j
.text:0040BD01                 mov     edx, [esp+2Ch+var_18]
.text:0040BD05                 movzx   eax, byte ptr ds:dword_414220[edx]
.text:0040BD0C                 mov     [esp+2Ch+var_11], al
.text:0040BD10                 jmp     short loc_40BCE2
.text:0040BD12 ; ---------------------------------------------------------------------------
.text:0040BD12
.text:0040BD12 loc_40BD12:                             ; CODE XREF: sub_40BC80+24↑j
.text:0040BD12                 mov     [esp+2Ch+Str], 0
.text:0040BD19                 call    sub_40E9A0
.text:0040BD1E                 test    eax, eax
.text:0040BD20                 mov     ebx, eax
.text:0040BD22                 jz      short loc_40BD7C
.text:0040BD24                 movzx   ecx, byte ptr [eax]
.text:0040BD27                 mov     esi, 0FFFFFFF0h
.text:0040BD2C                 test    cl, cl
.text:0040BD2E                 jz      short loc_40BD7C
.text:0040BD30
.text:0040BD30 loc_40BD30:                             ; CODE XREF: sub_40BC80+FA↓j
.text:0040BD30                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040BD33                 movsx   ebp, cl
.text:0040BD36                 add     esi, 10h
.text:0040BD39                 mov     ds:dword_414220[esi], ebp
.text:0040BD3F                 mov     edi, ebp
.text:0040BD41                 sar     edi, 1Fh
.text:0040BD44                 mov     ds:dword_414224[esi], edi
.text:0040BD4A                 call    sub_40A240
.text:0040BD4F                 mov     ds:dword_414228[esi], eax
.text:0040BD55                 xor     ecx, ecx
.text:0040BD57                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040BD5A                 mov     ds:dword_41422C[esi], ecx
.text:0040BD60                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040BD68                 call    strchr
.text:0040BD6D                 mov     ebx, eax
.text:0040BD6F                 inc     ebx
.text:0040BD70                 jz      short loc_40BD7C
.text:0040BD72                 movzx   edx, byte ptr [eax+1]
.text:0040BD76                 test    dl, dl
.text:0040BD78                 mov     cl, dl
.text:0040BD7A                 jnz     short loc_40BD30
.text:0040BD7C
.text:0040BD7C loc_40BD7C:                             ; CODE XREF: sub_40BC80+A2↑j
.text:0040BD7C                                         ; sub_40BC80+AE↑j ...
.text:0040BD7C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040BD7F                 mov     esi, 1
.text:0040BD84                 mov     ds:dword_414200, esi
.text:0040BD8A                 call    free
.text:0040BD8F                 jmp     loc_40BCA6
.text:0040BD94 ; ---------------------------------------------------------------------------
.text:0040BD94
.text:0040BD94 loc_40BD94:                             ; CODE XREF: sub_40BC80+16↑j
.text:0040BD94                 movsx   eax, byte_413070
.text:0040BD9B                 jmp     loc_40BCF9
.text:0040BD9B sub_40BC80      endp
.text:0040BD9B
.text:0040BD9B ; ---------------------------------------------------------------------------
.text:0040BDA0 dword_40BDA0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040BDA0                                         ; DATA XREF: .text:0040BDC3↓o
.text:0040BDA0                                         ; .text:0040BEA3↓o
.text:0040BDB0 ; ---------------------------------------------------------------------------
.text:0040BDB0                 sub     esp, 1Ch
.text:0040BDB3                 mov     [esp+14h], esi
.text:0040BDB7                 mov     esi, [esp+20h]
.text:0040BDBB                 mov     [esp+18h], edi
.text:0040BDBF                 mov     [esp+10h], ebx
.text:0040BDC3                 mov     dword ptr [esp], offset dword_40BDA0
.text:0040BDCA                 call    _strdup
.text:0040BDCF                 mov     [esp], esi
.text:0040BDD2                 mov     edi, eax
.text:0040BDD4                 call    sub_40BC80
.text:0040BDD9                 mov     [edi], al
.text:0040BDDB                 test    al, al
.text:0040BDDD                 jz      short loc_40BDF1
.text:0040BDDF                 mov     eax, edi
.text:0040BDE1                 mov     ebx, [esp+10h]
.text:0040BDE5                 mov     esi, [esp+14h]
.text:0040BDE9                 mov     edi, [esp+18h]
.text:0040BDED                 add     esp, 1Ch
.text:0040BDF0                 retn
.text:0040BDF1 ; ---------------------------------------------------------------------------
.text:0040BDF1
.text:0040BDF1 loc_40BDF1:                             ; CODE XREF: .text:0040BDDD↑j
.text:0040BDF1                 mov     [esp], edi
.text:0040BDF4                 call    free
.text:0040BDF9                 mov     dword ptr [esp+4], 0
.text:0040BE01                 mov     dword ptr [esp], 0
.text:0040BE08                 call    GetCurrentDirectoryA
.text:0040BE0D                 sub     esp, 8
.text:0040BE10                 lea     esi, [eax+1]
.text:0040BE13                 mov     [esp], esi
.text:0040BE16                 call    malloc
.text:0040BE1B                 mov     [esp+4], eax
.text:0040BE1F                 mov     edi, eax
.text:0040BE21                 mov     [esp], esi
.text:0040BE24                 call    GetCurrentDirectoryA
.text:0040BE29                 sub     esp, 8
.text:0040BE2C                 test    eax, eax
.text:0040BE2E                 jnz     short loc_40BE50
.text:0040BE30                 mov     dword ptr [esp+20h], 40BDA4h
.text:0040BE38                 mov     ebx, [esp+10h]
.text:0040BE3C                 mov     esi, [esp+14h]
.text:0040BE40                 mov     edi, [esp+18h]
.text:0040BE44                 add     esp, 1Ch
.text:0040BE47                 jmp     _strdup
.text:0040BE47 ; ---------------------------------------------------------------------------
.text:0040BE4C                 align 10h
.text:0040BE50
.text:0040BE50 loc_40BE50:                             ; CODE XREF: .text:0040BE2E↑j
.text:0040BE50                 mov     [esp+20h], edi
.text:0040BE54                 mov     ebx, [esp+10h]
.text:0040BE58                 mov     esi, [esp+14h]
.text:0040BE5C                 mov     edi, [esp+18h]
.text:0040BE60                 add     esp, 1Ch
.text:0040BE63                 jmp     sub_40BB60
.text:0040BE63 ; ---------------------------------------------------------------------------
.text:0040BE68                 align 10h
.text:0040BE70                 sub     esp, 7Ch
.text:0040BE73                 lea     edx, [esp+10h]
.text:0040BE77                 mov     [esp+8], edx
.text:0040BE7B                 mov     edx, [esp+80h]
.text:0040BE82                 mov     [esp+70h], ebx
.text:0040BE86                 mov     [esp+74h], esi
.text:0040BE8A                 mov     [esp+4], edx
.text:0040BE8E                 mov     [esp+78h], edi
.text:0040BE92                 mov     dword ptr [esp], 0
.text:0040BE99                 call    sub_409490
.text:0040BE9E                 xor     edx, edx
.text:0040BEA0                 inc     eax
.text:0040BEA1                 jz      short loc_40BEC5
.text:0040BEA3                 mov     dword ptr [esp], offset dword_40BDA0
.text:0040BEAA                 mov     esi, [esp+20h]
.text:0040BEAE                 call    _strdup
.text:0040BEB3                 mov     edi, eax
.text:0040BEB5                 mov     [esp], esi
.text:0040BEB8                 call    sub_40BC80
.text:0040BEBD                 mov     [edi], al
.text:0040BEBF                 test    al, al
.text:0040BEC1                 mov     edx, edi
.text:0040BEC3                 jz      short loc_40BED7
.text:0040BEC5
.text:0040BEC5 loc_40BEC5:                             ; CODE XREF: .text:0040BEA1↑j
.text:0040BEC5                                         ; .text:0040BF24↓j
.text:0040BEC5                 mov     ebx, [esp+70h]
.text:0040BEC9                 mov     eax, edx
.text:0040BECB                 mov     esi, [esp+74h]
.text:0040BECF                 mov     edi, [esp+78h]
.text:0040BED3                 add     esp, 7Ch
.text:0040BED6                 retn
.text:0040BED7 ; ---------------------------------------------------------------------------
.text:0040BED7
.text:0040BED7 loc_40BED7:                             ; CODE XREF: .text:0040BEC3↑j
.text:0040BED7                 mov     [esp], edi
.text:0040BEDA                 call    free
.text:0040BEDF                 mov     dword ptr [esp+4], 0
.text:0040BEE7                 mov     dword ptr [esp], 0
.text:0040BEEE                 call    GetCurrentDirectoryA
.text:0040BEF3                 sub     esp, 8
.text:0040BEF6                 lea     esi, [eax+1]
.text:0040BEF9                 mov     [esp], esi
.text:0040BEFC                 call    malloc
.text:0040BF01                 mov     [esp+4], eax
.text:0040BF05                 mov     edi, eax
.text:0040BF07                 mov     [esp], esi
.text:0040BF0A                 call    GetCurrentDirectoryA
.text:0040BF0F                 sub     esp, 8
.text:0040BF12                 test    eax, eax
.text:0040BF14                 jnz     short loc_40BF26
.text:0040BF16                 mov     dword ptr [esp], 40BDA4h
.text:0040BF1D                 call    _strdup
.text:0040BF22
.text:0040BF22 loc_40BF22:                             ; CODE XREF: .text:0040BF2E↓j
.text:0040BF22                 mov     edx, eax
.text:0040BF24                 jmp     short loc_40BEC5
.text:0040BF26 ; ---------------------------------------------------------------------------
.text:0040BF26
.text:0040BF26 loc_40BF26:                             ; CODE XREF: .text:0040BF14↑j
.text:0040BF26                 mov     [esp], edi
.text:0040BF29                 call    sub_40BB60
.text:0040BF2E                 jmp     short loc_40BF22
.text:0040BF30
.text:0040BF30 ; =============== S U B R O U T I N E =======================================
.text:0040BF30
.text:0040BF30
.text:0040BF30 ; int __cdecl sub_40BF30(LPCSTR)
.text:0040BF30 sub_40BF30      proc near               ; CODE XREF: sub_4096F0+12F↑p
.text:0040BF30
.text:0040BF30 String1         = dword ptr -1Ch
.text:0040BF30 String2         = dword ptr -18h
.text:0040BF30 var_C           = dword ptr -0Ch
.text:0040BF30 var_8           = dword ptr -8
.text:0040BF30 var_4           = dword ptr -4
.text:0040BF30 arg_0           = dword ptr  4
.text:0040BF30
.text:0040BF30                 sub     esp, 1Ch
.text:0040BF33                 mov     [esp+1Ch+var_4], edi
.text:0040BF37                 mov     edi, [esp+1Ch+arg_0]
.text:0040BF3B                 mov     [esp+1Ch+var_C], ebx
.text:0040BF3F                 mov     [esp+1Ch+var_8], esi
.text:0040BF43                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040BF46                 call    sub_40D130
.text:0040BF4B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040BF4E                 mov     esi, eax
.text:0040BF50                 call    sub_40BB60
.text:0040BF55                 mov     [esp+1Ch+String2], eax ; String2
.text:0040BF59                 mov     ebx, eax
.text:0040BF5B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040BF5E                 call    _stricmp
.text:0040BF63                 test    eax, eax
.text:0040BF65                 setz    dl
.text:0040BF68                 test    esi, esi
.text:0040BF6A                 movzx   edi, dl
.text:0040BF6D                 jz      short loc_40BF77
.text:0040BF6F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040BF72                 call    free
.text:0040BF77
.text:0040BF77 loc_40BF77:                             ; CODE XREF: sub_40BF30+3D↑j
.text:0040BF77                 test    ebx, ebx
.text:0040BF79                 jz      short loc_40BF83
.text:0040BF7B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040BF7E                 call    free
.text:0040BF83
.text:0040BF83 loc_40BF83:                             ; CODE XREF: sub_40BF30+49↑j
.text:0040BF83                 mov     eax, edi
.text:0040BF85                 mov     ebx, [esp+1Ch+var_C]
.text:0040BF89                 mov     esi, [esp+1Ch+var_8]
.text:0040BF8D                 mov     edi, [esp+1Ch+var_4]
.text:0040BF91                 add     esp, 1Ch
.text:0040BF94                 retn
.text:0040BF94 sub_40BF30      endp
.text:0040BF94
.text:0040BF94 ; ---------------------------------------------------------------------------
.text:0040BF95                 align 10h
.text:0040BFA0
.text:0040BFA0 ; =============== S U B R O U T I N E =======================================
.text:0040BFA0
.text:0040BFA0
.text:0040BFA0 ; int __cdecl sub_40BFA0(char *, int)
.text:0040BFA0 sub_40BFA0      proc near               ; CODE XREF: sub_402390+2E5↑p
.text:0040BFA0                                         ; sub_403C10+37↑p ...
.text:0040BFA0
.text:0040BFA0 var_C           = dword ptr -0Ch
.text:0040BFA0 var_8           = dword ptr -8
.text:0040BFA0 var_4           = dword ptr -4
.text:0040BFA0 arg_0           = dword ptr  4
.text:0040BFA0 arg_4           = dword ptr  8
.text:0040BFA0
.text:0040BFA0                 sub     esp, 0Ch
.text:0040BFA3                 mov     edx, [esp+0Ch+arg_4]
.text:0040BFA7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040BFAE                 mov     [esp+0Ch+var_4], edx ; int
.text:0040BFB2                 mov     edx, [esp+0Ch+arg_0]
.text:0040BFB6                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040BFBA                 call    sub_40C850
.text:0040BFBF                 add     esp, 0Ch
.text:0040BFC2                 retn
.text:0040BFC2 sub_40BFA0      endp
.text:0040BFC2
.text:0040BFC2 ; ---------------------------------------------------------------------------
.text:0040BFC3                 align 10h
.text:0040BFD0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040C021↓o
.text:0040BFD9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040BFD9                                         ; DATA XREF: .text:0040C032↓o
.text:0040BFED ; const CHAR aVwin32[]
.text:0040BFED aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040C17C↓o
.text:0040BFED                                         ; sub_40C5B0+17C↓o
.text:0040BFF8 ; ---------------------------------------------------------------------------
.text:0040BFF8
.text:0040BFF8 loc_40BFF8:                             ; DATA XREF: .text:0040C292↓o
.text:0040BFF8                 dec     esi
.text:0040BFF9                 push    esp
.text:0040BFFA                 inc     esi
.text:0040BFFB                 push    ebx
.text:0040BFFC                 add     [esi+41h], al
.text:0040BFFF                 push    esp
.text:0040C000                 xor     esi, [edx]
.text:0040C002                 add     [esi+41h], al
.text:0040C005                 push    esp
.text:0040C006                 add     [ebx+44h], al
.text:0040C009                 inc     esi
.text:0040C00A                 push    ebx
.text:0040C00B
.text:0040C00B loc_40C00B:                             ; CODE XREF: sub_40C5B0+101↓p
.text:0040C00B                 add     [ebp+55002674h], cl
.text:0040C011                 push    edi
.text:0040C012                 push    esi
.text:0040C013                 push    ebx
.text:0040C014                 sub     esp, 8BCh
.text:0040C01A                 mov     ebp, [esp+8D0h]
.text:0040C021                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040C028                 call    LoadLibraryA
.text:0040C02D                 sub     esp, 4
.text:0040C030                 mov     edi, eax
.text:0040C032                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040C03A                 mov     [esp], eax
.text:0040C03D                 call    GetProcAddress
.text:0040C042                 sub     esp, 8
.text:0040C045                 mov     esi, eax
.text:0040C047                 test    ebp, ebp
.text:0040C049                 mov     dword ptr [esp+20h], 0
.text:0040C051                 jz      loc_40C591
.text:0040C057                 mov     [esp], ebp
.text:0040C05A                 call    sub_40B540
.text:0040C05F                 mov     [esp], eax
.text:0040C062                 mov     ebp, eax
.text:0040C064                 call    strlen
.text:0040C069                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040C06E                 mov     ebx, eax
.text:0040C070                 jz      short loc_40C08C
.text:0040C072                 mov     [esp], ebp
.text:0040C075                 lea     edx, [eax+1]
.text:0040C078                 mov     [esp+4], edx
.text:0040C07C                 call    realloc
.text:0040C081                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040C085                 mov     ebp, eax
.text:0040C087                 mov     byte ptr [ebx+eax+1], 0
.text:0040C08C
.text:0040C08C loc_40C08C:                             ; CODE XREF: .text:0040C070↑j
.text:0040C08C                 mov     dword ptr [esp+1Ch], 400h
.text:0040C094                 lea     edx, [esp+0B0h]
.text:0040C09B                 lea     ebx, [esp+5Ch]
.text:0040C09F                 mov     [esp+18h], edx
.text:0040C0A3                 lea     ecx, [esp+58h]
.text:0040C0A7                 lea     edx, [esp+54h]
.text:0040C0AB                 mov     [esp+14h], ebx
.text:0040C0AF                 lea     eax, [esp+4B0h]
.text:0040C0B6                 mov     [esp+10h], ecx
.text:0040C0BA                 mov     [esp+0Ch], edx
.text:0040C0BE                 mov     dword ptr [esp+8], 400h
.text:0040C0C6                 mov     [esp+4], eax
.text:0040C0CA                 mov     [esp], ebp
.text:0040C0CD                 call    GetVolumeInformationA
.text:0040C0D2                 sub     esp, 20h
.text:0040C0D5                 test    eax, eax
.text:0040C0D7                 jz      loc_40C56E
.text:0040C0DD                 test    esi, esi
.text:0040C0DF                 jz      short loc_40C105
.text:0040C0E1                 mov     [esp], ebp
.text:0040C0E4                 lea     edx, [esp+48h]
.text:0040C0E8                 lea     ebx, [esp+40h]
.text:0040C0EC                 mov     [esp+0Ch], edx
.text:0040C0F0                 lea     ecx, [esp+38h]
.text:0040C0F4                 mov     [esp+8], ebx
.text:0040C0F8                 mov     [esp+4], ecx
.text:0040C0FC                 call    esi
.text:0040C0FE                 sub     esp, 10h
.text:0040C101                 mov     [esp+20h], eax
.text:0040C105
.text:0040C105 loc_40C105:                             ; CODE XREF: .text:0040C0DF↑j
.text:0040C105                 test    edi, edi
.text:0040C107                 jz      short loc_40C114
.text:0040C109                 mov     [esp], edi
.text:0040C10C                 call    FreeLibrary
.text:0040C111                 sub     esp, 4
.text:0040C114
.text:0040C114 loc_40C114:                             ; CODE XREF: .text:0040C107↑j
.text:0040C114                 call    sub_40DBC0
.text:0040C119                 test    eax, eax
.text:0040C11B                 lea     esi, [esp+28h]
.text:0040C11F                 jz      loc_40C550
.text:0040C125                 call    sub_40DBC0
.text:0040C12A                 test    eax, eax
.text:0040C12C                 jz      short loc_40C13C
.text:0040C12E                 call    sub_40DB10
.text:0040C133                 cmp     eax, 0Bh
.text:0040C136                 jle     loc_40C524
.text:0040C13C
.text:0040C13C loc_40C13C:                             ; CODE XREF: .text:0040C12C↑j
.text:0040C13C                 cld
.text:0040C13D                 xor     eax, eax
.text:0040C13F                 lea     ebx, [esp+60h]
.text:0040C143                 mov     ecx, 7
.text:0040C148                 mov     edi, ebx
.text:0040C14A                 rep stosd
.text:0040C14C                 mov     dword ptr [esp+18h], 0
.text:0040C154                 mov     dword ptr [esp+14h], 4000000h
.text:0040C15C                 mov     dword ptr [esp+10h], 0
.text:0040C164                 mov     dword ptr [esp+0Ch], 0
.text:0040C16C                 mov     dword ptr [esp+8], 0
.text:0040C174                 mov     dword ptr [esp+4], 0
.text:0040C17C                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040C183                 call    CreateFileA
.text:0040C188                 sub     esp, 1Ch
.text:0040C18B                 mov     edi, eax
.text:0040C18D                 cmp     eax, 0FFFFFFFFh
.text:0040C190                 jz      short loc_40C210
.text:0040C192                 mov     [esp+10h], ebx
.text:0040C196                 lea     edx, [esp+80h]
.text:0040C19D                 lea     ecx, [esp+24h]
.text:0040C1A1                 mov     [esp+70h], edx
.text:0040C1A5                 mov     [esp+18h], ecx
.text:0040C1A9                 mov     [esp+8], ebx
.text:0040C1AD                 mov     dword ptr [esp+6Ch], 7303h
.text:0040C1B5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040C1BD                 mov     [esp+64h], ebp
.text:0040C1C1                 mov     dword ptr [esp+78h], 1
.text:0040C1C9                 mov     dword ptr [esp+1Ch], 0
.text:0040C1D1                 mov     dword ptr [esp+14h], 1Ch
.text:0040C1D9                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040C1E1                 mov     dword ptr [esp+4], 6
.text:0040C1E9                 mov     [esp], eax
.text:0040C1EC                 call    DeviceIoControl
.text:0040C1F1                 sub     esp, 20h
.text:0040C1F4                 mov     ebx, eax
.text:0040C1F6                 mov     [esp], edi
.text:0040C1F9                 call    CloseHandle
.text:0040C1FE                 sub     esp, 4
.text:0040C201                 test    ebx, ebx
.text:0040C203                 jz      short loc_40C210
.text:0040C205                 test    byte ptr [esp+78h], 1
.text:0040C20A                 jz      loc_40C4F0
.text:0040C210
.text:0040C210 loc_40C210:                             ; CODE XREF: .text:0040C190↑j
.text:0040C210                                         ; .text:0040C203↑j
.text:0040C210                 call    sub_40D0E0
.text:0040C215                 mov     edi, eax
.text:0040C217                 call    _errno
.text:0040C21C                 mov     [eax], edi
.text:0040C21E                 xor     eax, eax
.text:0040C220
.text:0040C220 loc_40C220:                             ; CODE XREF: .text:0040C51F↓j
.text:0040C220                                         ; .text:0040C54B↓j
.text:0040C220                 test    eax, eax
.text:0040C222                 jnz     short loc_40C244
.text:0040C224                 mov     dword ptr [esp+34h], 1
.text:0040C22C                 mov     dword ptr [esp+30h], 200h
.text:0040C234                 mov     dword ptr [esp+2Ch], 0
.text:0040C23C                 mov     dword ptr [esp+28h], 0
.text:0040C244
.text:0040C244 loc_40C244:                             ; CODE XREF: .text:0040C222↑j
.text:0040C244                 mov     edx, [esp+30h]
.text:0040C248                 mov     edi, [esp+34h]
.text:0040C24C                 mov     ecx, [esp+20h]
.text:0040C250                 imul    edi, edx
.text:0040C253                 test    ecx, ecx
.text:0040C255                 jnz     short loc_40C27D
.text:0040C257                 mov     eax, [esp+28h]
.text:0040C25B                 mul     edi
.text:0040C25D                 mov     esi, eax
.text:0040C25F                 mov     eax, [esp+2Ch]
.text:0040C263                 mov     [esp+44h], edx
.text:0040C267                 mov     [esp+40h], esi
.text:0040C26B                 mul     edi
.text:0040C26D                 mov     [esp+48h], eax
.text:0040C271                 mov     [esp+4Ch], edx
.text:0040C275                 mov     [esp+38h], eax
.text:0040C279                 mov     [esp+3Ch], edx
.text:0040C27D
.text:0040C27D loc_40C27D:                             ; CODE XREF: .text:0040C255↑j
.text:0040C27D                 mov     ebx, [esp+5Ch]
.text:0040C281                 lea     edx, [esp+0B0h]
.text:0040C288                 mov     ecx, [esp+8D4h]
.text:0040C28F                 mov     [ecx+48h], ebx
.text:0040C292                 mov     dword ptr [esp+4], offset loc_40BFF8
.text:0040C29A                 mov     [esp], edx
.text:0040C29D                 call    _stricmp
.text:0040C2A2                 test    eax, eax
.text:0040C2A4                 jnz     loc_40C460
.text:0040C2AA                 mov     esi, [esp+8D4h]
.text:0040C2B1                 mov     dword ptr [esi], 5346544Eh
.text:0040C2B7
.text:0040C2B7 loc_40C2B7:                             ; CODE XREF: .text:0040C488↓j
.text:0040C2B7                                         ; .text:0040C4B5↓j ...
.text:0040C2B7                 mov     ebx, [esp+30h]
.text:0040C2BB                 mov     esi, [esp+8D4h]
.text:0040C2C2                 mov     [esi+4], ebx
.text:0040C2C5                 mov     [esi+8], ebx
.text:0040C2C8                 mov     ebx, [esi+8]
.text:0040C2CB                 mov     [esi+0Ch], edi
.text:0040C2CE                 mov     ecx, [esp+44h]
.text:0040C2D2                 xor     esi, esi
.text:0040C2D4                 mov     [esp+8], ebx
.text:0040C2D8                 mov     edx, [esp+40h]
.text:0040C2DC                 mov     [esp+0Ch], esi
.text:0040C2E0                 mov     [esp+4], ecx
.text:0040C2E4                 mov     [esp], edx
.text:0040C2E7                 call    sub_411FF0
.text:0040C2EC                 mov     ecx, [esp+8D4h]
.text:0040C2F3                 mov     [ecx+10h], eax
.text:0040C2F6                 mov     [ecx+14h], edx
.text:0040C2F9                 mov     ecx, [esp+4Ch]
.text:0040C2FD                 mov     [esp+8], ebx
.text:0040C301                 mov     edx, [esp+48h]
.text:0040C305                 mov     [esp+0Ch], esi
.text:0040C309                 mov     [esp+4], ecx
.text:0040C30D                 mov     [esp], edx
.text:0040C310                 call    sub_411FF0
.text:0040C315                 mov     ecx, [esp+8D4h]
.text:0040C31C                 mov     [ecx+18h], eax
.text:0040C31F                 mov     [ecx+1Ch], edx
.text:0040C322                 mov     ecx, [esp+38h]
.text:0040C326                 mov     [esp+8], ebx
.text:0040C32A                 mov     ebx, [esp+3Ch]
.text:0040C32E                 mov     [esp+0Ch], esi
.text:0040C332                 mov     [esp], ecx
.text:0040C335                 mov     [esp+4], ebx
.text:0040C339                 call    sub_411FF0
.text:0040C33E                 mov     esi, [esp+8D4h]
.text:0040C345                 mov     [esi+20h], eax
.text:0040C348                 mov     [esi+24h], edx
.text:0040C34B                 mov     ecx, [esp+44h]
.text:0040C34F                 mov     esi, edi
.text:0040C351                 mov     [esp+8], esi
.text:0040C355                 mov     edx, [esp+40h]
.text:0040C359                 xor     edi, edi
.text:0040C35B                 mov     [esp+0Ch], edi
.text:0040C35F                 mov     [esp+4], ecx
.text:0040C363                 mov     [esp], edx
.text:0040C366                 call    sub_411FF0
.text:0040C36B                 mov     ebx, [esp+8D4h]
.text:0040C372                 mov     [ebx+28h], eax
.text:0040C375                 mov     [ebx+2Ch], edx
.text:0040C378                 mov     ecx, [esp+4Ch]
.text:0040C37C                 mov     [esp+8], esi
.text:0040C380                 mov     edx, [esp+48h]
.text:0040C384                 mov     [esp+0Ch], edi
.text:0040C388                 mov     [esp+4], ecx
.text:0040C38C                 mov     [esp], edx
.text:0040C38F                 call    sub_411FF0
.text:0040C394                 mov     ebx, [esp+8D4h]
.text:0040C39B                 mov     [ebx+30h], eax
.text:0040C39E                 mov     [ebx+34h], edx
.text:0040C3A1                 mov     ecx, [esp+3Ch]
.text:0040C3A5                 mov     [esp+8], esi
.text:0040C3A9                 mov     edx, [esp+38h]
.text:0040C3AD                 mov     [esp+0Ch], edi
.text:0040C3B1                 mov     [esp+4], ecx
.text:0040C3B5                 mov     [esp], edx
.text:0040C3B8                 call    sub_411FF0
.text:0040C3BD                 mov     edx, [esp+8D4h]
.text:0040C3C4                 lea     ecx, [esp+0B0h]
.text:0040C3CB                 mov     [edx+38h], eax
.text:0040C3CE                 mov     esi, [esp+58h]
.text:0040C3D2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040C3D9                 mov     [edx+110h], esi
.text:0040C3DF                 mov     esi, edx
.text:0040C3E1                 add     esi, 4Ch ; 'L'
.text:0040C3E4                 movzx   ebx, word ptr [esp+56h]
.text:0040C3E9                 movzx   edi, word ptr [esp+54h]
.text:0040C3EE                 mov     [edx+3Ch], ebx
.text:0040C3F1                 lea     ebx, [esp+4B0h]
.text:0040C3F8                 mov     [edx+40h], edi
.text:0040C3FB                 mov     [esp+4], ecx
.text:0040C3FF                 mov     dword ptr [esp+8], 10h
.text:0040C407                 mov     [esp], esi
.text:0040C40A                 call    strncpy
.text:0040C40F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040C417                 mov     edi, [esp+8D4h]
.text:0040C41E                 mov     [esp+4], ebx
.text:0040C422                 add     edi, 5Ch ; '\'
.text:0040C425                 mov     [esp], edi
.text:0040C428                 call    strncpy
.text:0040C42D                 mov     [esp+4], ebp
.text:0040C431                 mov     ebp, [esp+8D4h]
.text:0040C438                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040C440                 add     ebp, 0B6h ; '¶'
.text:0040C446                 mov     [esp], ebp
.text:0040C449                 call    strncpy
.text:0040C44E                 xor     eax, eax
.text:0040C450
.text:0040C450 loc_40C450:                             ; CODE XREF: .text:0040C58C↓j
.text:0040C450                 add     esp, 8BCh
.text:0040C456                 pop     ebx
.text:0040C457                 pop     esi
.text:0040C458                 pop     edi
.text:0040C459                 pop     ebp
.text:0040C45A                 retn
.text:0040C45A ; ---------------------------------------------------------------------------
.text:0040C45B                 align 10h
.text:0040C460
.text:0040C460 loc_40C460:                             ; CODE XREF: .text:0040C2A4↑j
.text:0040C460                 mov     dword ptr [esp+4], 40BFFDh
.text:0040C468                 lea     eax, [esp+0B0h]
.text:0040C46F                 mov     [esp], eax
.text:0040C472                 call    _stricmp
.text:0040C477                 test    eax, eax
.text:0040C479                 jnz     short loc_40C48D
.text:0040C47B                 mov     edx, [esp+8D4h]
.text:0040C482                 mov     dword ptr [edx], 4008h
.text:0040C488                 jmp     loc_40C2B7
.text:0040C48D ; ---------------------------------------------------------------------------
.text:0040C48D
.text:0040C48D loc_40C48D:                             ; CODE XREF: .text:0040C479↑j
.text:0040C48D                 mov     dword ptr [esp+4], 40C003h
.text:0040C495                 lea     ecx, [esp+0B0h]
.text:0040C49C                 mov     [esp], ecx
.text:0040C49F                 call    _stricmp
.text:0040C4A4                 test    eax, eax
.text:0040C4A6                 jnz     short loc_40C4BA
.text:0040C4A8                 mov     ebx, [esp+8D4h]
.text:0040C4AF                 mov     dword ptr [ebx], 4006h
.text:0040C4B5                 jmp     loc_40C2B7
.text:0040C4BA ; ---------------------------------------------------------------------------
.text:0040C4BA
.text:0040C4BA loc_40C4BA:                             ; CODE XREF: .text:0040C4A6↑j
.text:0040C4BA                 mov     dword ptr [esp+4], 40C007h
.text:0040C4C2                 lea     eax, [esp+0B0h]
.text:0040C4C9                 mov     [esp], eax
.text:0040C4CC                 call    _stricmp
.text:0040C4D1                 test    eax, eax
.text:0040C4D3                 mov     esi, [esp+8D4h]
.text:0040C4DA                 setnz   cl
.text:0040C4DD                 movzx   edx, cl
.text:0040C4E0                 dec     edx
.text:0040C4E1                 and     edx, 4000h
.text:0040C4E7                 mov     [esi], edx
.text:0040C4E9                 jmp     loc_40C2B7
.text:0040C4E9 ; ---------------------------------------------------------------------------
.text:0040C4EE                 align 10h
.text:0040C4F0
.text:0040C4F0 loc_40C4F0:                             ; CODE XREF: .text:0040C20A↑j
.text:0040C4F0                 mov     edi, [esp+84h]
.text:0040C4F7                 mov     eax, 1
.text:0040C4FC                 mov     edx, [esp+88h]
.text:0040C503                 mov     ecx, [esp+8Ch]
.text:0040C50A                 mov     ebx, [esp+90h]
.text:0040C511                 mov     [esp+34h], edi
.text:0040C515                 mov     [esp+30h], edx
.text:0040C519                 mov     [esp+2Ch], ecx
.text:0040C51D                 mov     [esi], ebx
.text:0040C51F                 jmp     loc_40C220
.text:0040C524 ; ---------------------------------------------------------------------------
.text:0040C524
.text:0040C524 loc_40C524:                             ; CODE XREF: .text:0040C136↑j
.text:0040C524                 mov     [esp+10h], esi
.text:0040C528                 lea     eax, [esp+2Ch]
.text:0040C52C                 lea     esi, [esp+30h]
.text:0040C530                 mov     [esp+0Ch], eax
.text:0040C534                 lea     edi, [esp+34h]
.text:0040C538                 mov     [esp+8], esi
.text:0040C53C                 mov     [esp+4], edi
.text:0040C540
.text:0040C540 loc_40C540:                             ; CODE XREF: .text:0040C56C↓j
.text:0040C540                 mov     [esp], ebp
.text:0040C543                 call    GetDiskFreeSpaceA
.text:0040C548                 sub     esp, 14h
.text:0040C54B                 jmp     loc_40C220
.text:0040C550 ; ---------------------------------------------------------------------------
.text:0040C550
.text:0040C550 loc_40C550:                             ; CODE XREF: .text:0040C11F↑j
.text:0040C550                 mov     [esp+10h], esi
.text:0040C554                 lea     ebx, [esp+2Ch]
.text:0040C558                 lea     eax, [esp+30h]
.text:0040C55C                 mov     [esp+0Ch], ebx
.text:0040C560                 lea     esi, [esp+34h]
.text:0040C564                 mov     [esp+8], eax
.text:0040C568                 mov     [esp+4], esi
.text:0040C56C                 jmp     short loc_40C540
.text:0040C56E ; ---------------------------------------------------------------------------
.text:0040C56E
.text:0040C56E loc_40C56E:                             ; CODE XREF: .text:0040C0D7↑j
.text:0040C56E                 mov     [esp], edi
.text:0040C571                 call    FreeLibrary
.text:0040C576                 sub     esp, 4
.text:0040C579                 call    sub_40D0E0
.text:0040C57E                 mov     esi, eax
.text:0040C580                 call    _errno
.text:0040C585                 mov     [eax], esi
.text:0040C587
.text:0040C587 loc_40C587:                             ; CODE XREF: .text:0040C5A7↓j
.text:0040C587                 mov     eax, 0FFFFFFFFh
.text:0040C58C                 jmp     loc_40C450
.text:0040C591 ; ---------------------------------------------------------------------------
.text:0040C591
.text:0040C591 loc_40C591:                             ; CODE XREF: .text:0040C051↑j
.text:0040C591                 mov     [esp], edi
.text:0040C594                 call    FreeLibrary
.text:0040C599                 sub     esp, 4
.text:0040C59C                 call    _errno
.text:0040C5A1                 mov     dword ptr [eax], 2
.text:0040C5A7                 jmp     short loc_40C587
.text:0040C5A7 ; ---------------------------------------------------------------------------
.text:0040C5A9                 align 10h
.text:0040C5B0
.text:0040C5B0 ; =============== S U B R O U T I N E =======================================
.text:0040C5B0
.text:0040C5B0
.text:0040C5B0 ; int __cdecl sub_40C5B0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040C5B0 sub_40C5B0      proc near               ; CODE XREF: sub_409D40+2C7↑p
.text:0040C5B0                                         ; .text:0040A37A↑p
.text:0040C5B0
.text:0040C5B0 lpFileName      = dword ptr -9Ch
.text:0040C5B0 dwDesiredAccess = dword ptr -98h
.text:0040C5B0 dwShareMode     = dword ptr -94h
.text:0040C5B0 lpSecurityAttributes= dword ptr -90h
.text:0040C5B0 dwCreationDisposition= dword ptr -8Ch
.text:0040C5B0 dwFlagsAndAttributes= dword ptr -88h
.text:0040C5B0 hTemplateFile   = dword ptr -84h
.text:0040C5B0 lpOverlapped    = dword ptr -80h
.text:0040C5B0 BytesReturned   = dword ptr -70h
.text:0040C5B0 InBuffer        = byte ptr -6Ch
.text:0040C5B0 var_68          = dword ptr -68h
.text:0040C5B0 var_64          = dword ptr -64h
.text:0040C5B0 var_60          = dword ptr -60h
.text:0040C5B0 var_5C          = dword ptr -5Ch
.text:0040C5B0 var_54          = dword ptr -54h
.text:0040C5B0 var_4C          = byte ptr -4Ch
.text:0040C5B0 var_48          = dword ptr -48h
.text:0040C5B0 var_44          = dword ptr -44h
.text:0040C5B0 var_40          = dword ptr -40h
.text:0040C5B0 var_3C          = dword ptr -3Ch
.text:0040C5B0 lpRootPathName  = dword ptr -2Ch
.text:0040C5B0 lpSectorsPerCluster= dword ptr -28h
.text:0040C5B0 lpBytesPerSector= dword ptr -24h
.text:0040C5B0 lpNumberOfFreeClusters= dword ptr -20h
.text:0040C5B0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040C5B0 var_18          = dword ptr -18h
.text:0040C5B0 var_14          = dword ptr -14h
.text:0040C5B0 var_10          = dword ptr -10h
.text:0040C5B0 var_C           = dword ptr -0Ch
.text:0040C5B0 var_8           = dword ptr -8
.text:0040C5B0 var_4           = dword ptr -4
.text:0040C5B0 arg_0           = dword ptr  4
.text:0040C5B0 arg_4           = dword ptr  8
.text:0040C5B0 arg_8           = dword ptr  0Ch
.text:0040C5B0 arg_C           = dword ptr  10h
.text:0040C5B0 arg_10          = dword ptr  14h
.text:0040C5B0
.text:0040C5B0                 sub     esp, 2Ch
.text:0040C5B3                 mov     edx, [esp+2Ch+arg_0]
.text:0040C5B7                 mov     [esp+2Ch+var_10], ebx
.text:0040C5BB                 mov     ebx, [esp+2Ch+arg_10]
.text:0040C5BF                 mov     [esp+2Ch+var_C], esi
.text:0040C5C3                 mov     esi, [esp+2Ch+arg_C]
.text:0040C5C7                 mov     [esp+2Ch+var_8], edi
.text:0040C5CB                 mov     edi, [esp+2Ch+arg_8]
.text:0040C5CF                 mov     [esp+2Ch+var_4], ebp
.text:0040C5D3                 mov     ebp, [esp+2Ch+arg_4]
.text:0040C5D7                 mov     [esp+2Ch+var_14], edx
.text:0040C5DB                 call    sub_40DBC0
.text:0040C5E0                 test    eax, eax
.text:0040C5E2                 jz      short loc_40C614
.text:0040C5E4                 mov     [esp+2Ch+arg_10], ebx
.text:0040C5E8                 mov     edx, [esp+2Ch+var_14]
.text:0040C5EC                 mov     ebx, [esp+2Ch+var_10]
.text:0040C5F0                 mov     [esp+2Ch+arg_C], esi
.text:0040C5F4                 mov     esi, [esp+2Ch+var_C]
.text:0040C5F8                 mov     [esp+2Ch+arg_8], edi
.text:0040C5FC                 mov     edi, [esp+2Ch+var_8]
.text:0040C600                 mov     [esp+2Ch+arg_4], ebp
.text:0040C604                 mov     ebp, [esp+2Ch+var_4]
.text:0040C608                 mov     [esp+2Ch+arg_0], edx
.text:0040C60C                 add     esp, 2Ch
.text:0040C60F                 jmp     loc_40C6C0
.text:0040C614 ; ---------------------------------------------------------------------------
.text:0040C614
.text:0040C614 loc_40C614:                             ; CODE XREF: sub_40C5B0+32↑j
.text:0040C614                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040C618                 mov     ecx, [esp+2Ch+var_14]
.text:0040C61C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040C620                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040C624                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040C628                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040C62B                 call    GetDiskFreeSpaceA
.text:0040C630                 sub     esp, 14h
.text:0040C633                 mov     ebx, [esp+2Ch+var_10]
.text:0040C637                 mov     esi, [esp+2Ch+var_C]
.text:0040C63B                 mov     edi, [esp+2Ch+var_8]
.text:0040C63F                 mov     ebp, [esp+2Ch+var_4]
.text:0040C643                 add     esp, 2Ch
.text:0040C646                 retn
.text:0040C646 ; ---------------------------------------------------------------------------
.text:0040C647                 align 10h
.text:0040C650
.text:0040C650 loc_40C650:                             ; CODE XREF: .text:0040DEDD↓p
.text:0040C650                 sub     esp, 1Ch
.text:0040C653                 mov     [esp+1Ch+var_4], esi
.text:0040C657                 mov     esi, [esp+1Ch+arg_0]
.text:0040C65B                 mov     [esp+1Ch+var_8], ebx
.text:0040C65F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040C662                 call    sub_40BB60
.text:0040C667                 test    eax, eax
.text:0040C669                 mov     ebx, eax
.text:0040C66B                 jz      short loc_40C680
.text:0040C66D                 cmp     byte ptr [eax], 0
.text:0040C670                 jz      short loc_40C680
.text:0040C672                 test    esi, esi
.text:0040C674                 jz      short loc_40C680
.text:0040C676                 cmp     byte ptr [esi], 0
.text:0040C679                 jnz     short loc_40C6A6
.text:0040C67B                 nop
.text:0040C67C                 lea     esi, [esi+0]
.text:0040C680
.text:0040C680 loc_40C680:                             ; CODE XREF: sub_40C5B0+BB↑j
.text:0040C680                                         ; sub_40C5B0+C0↑j ...
.text:0040C680                 call    _errno
.text:0040C685                 mov     dword ptr [eax], 2
.text:0040C68B                 mov     esi, 0FFFFFFFFh
.text:0040C690
.text:0040C690 loc_40C690:                             ; CODE XREF: sub_40C5B0+108↓j
.text:0040C690                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040C693                 call    free
.text:0040C698                 mov     eax, esi
.text:0040C69A                 mov     ebx, [esp+1Ch+var_8]
.text:0040C69E                 mov     esi, [esp+1Ch+var_4]
.text:0040C6A2                 add     esp, 1Ch
.text:0040C6A5                 retn
.text:0040C6A6 ; ---------------------------------------------------------------------------
.text:0040C6A6
.text:0040C6A6 loc_40C6A6:                             ; CODE XREF: sub_40C5B0+C9↑j
.text:0040C6A6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040C6A9                 mov     edx, [esp+1Ch+arg_4]
.text:0040C6AD                 mov     [esp+1Ch+var_18], edx
.text:0040C6B1                 call    near ptr loc_40C00B+5
.text:0040C6B6                 mov     esi, eax
.text:0040C6B8                 jmp     short loc_40C690
.text:0040C6B8 ; ---------------------------------------------------------------------------
.text:0040C6BA                 align 10h
.text:0040C6C0
.text:0040C6C0 loc_40C6C0:                             ; CODE XREF: sub_40C5B0+5F↑j
.text:0040C6C0                 push    ebp
.text:0040C6C1                 push    edi
.text:0040C6C2                 push    esi
.text:0040C6C3                 push    ebx
.text:0040C6C4                 sub     esp, 8Ch
.text:0040C6CA                 mov     ebp, [esp+9Ch+arg_0]
.text:0040C6D1                 call    sub_40DBC0
.text:0040C6D6                 test    eax, eax
.text:0040C6D8                 jz      short loc_40C6E8
.text:0040C6DA                 call    sub_40DB10
.text:0040C6DF                 cmp     eax, 0Bh
.text:0040C6E2                 jle     loc_40C810
.text:0040C6E8
.text:0040C6E8 loc_40C6E8:                             ; CODE XREF: sub_40C5B0+128↑j
.text:0040C6E8                 cld
.text:0040C6E9                 xor     eax, eax
.text:0040C6EB                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040C6EF                 mov     ecx, 7
.text:0040C6F4                 mov     edi, ebx
.text:0040C6F6                 lea     esi, [esp+9Ch+var_4C]
.text:0040C6FA                 rep stosd
.text:0040C6FC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040C704                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040C70C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040C714                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040C71C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040C724                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040C72C                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040C733                 call    CreateFileA
.text:0040C738                 sub     esp, 1Ch
.text:0040C73B                 mov     edi, eax
.text:0040C73D                 cmp     eax, 0FFFFFFFFh
.text:0040C740                 jz      short loc_40C7B5
.text:0040C742                 mov     [esp+9Ch+var_68], ebp
.text:0040C746                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040C74A                 mov     [esp+9Ch+var_5C], esi
.text:0040C74E                 mov     [esp+9Ch+var_60], 7303h
.text:0040C756                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040C75E                 mov     [esp+9Ch+var_54], 1
.text:0040C766                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040C76E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040C772                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040C77A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040C77E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040C786                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040C78A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040C792                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040C795                 call    DeviceIoControl
.text:0040C79A                 sub     esp, 20h
.text:0040C79D                 mov     esi, eax
.text:0040C79F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040C7A2                 call    CloseHandle
.text:0040C7A7                 sub     esp, 4
.text:0040C7AA                 test    esi, esi
.text:0040C7AC                 jz      short loc_40C7B5
.text:0040C7AE                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040C7B3                 jz      short loc_40C7D0
.text:0040C7B5
.text:0040C7B5 loc_40C7B5:                             ; CODE XREF: sub_40C5B0+190↑j
.text:0040C7B5                                         ; sub_40C5B0+1FC↑j
.text:0040C7B5                 call    sub_40D0E0
.text:0040C7BA                 mov     edi, eax
.text:0040C7BC                 call    _errno
.text:0040C7C1                 mov     [eax], edi
.text:0040C7C3                 xor     eax, eax
.text:0040C7C5
.text:0040C7C5 loc_40C7C5:                             ; CODE XREF: sub_40C5B0+25A↓j
.text:0040C7C5                                         ; sub_40C5B0+297↓j
.text:0040C7C5                 add     esp, 8Ch
.text:0040C7CB                 pop     ebx
.text:0040C7CC                 pop     esi
.text:0040C7CD                 pop     edi
.text:0040C7CE                 pop     ebp
.text:0040C7CF                 retn
.text:0040C7D0 ; ---------------------------------------------------------------------------
.text:0040C7D0
.text:0040C7D0 loc_40C7D0:                             ; CODE XREF: sub_40C5B0+203↑j
.text:0040C7D0                 mov     edx, [esp+9Ch+var_48]
.text:0040C7D4                 mov     eax, 1
.text:0040C7D9                 mov     ebx, [esp+9Ch+arg_4]
.text:0040C7E0                 mov     ebp, [esp+9Ch+arg_8]
.text:0040C7E7                 mov     ecx, [esp+9Ch+arg_C]
.text:0040C7EE                 mov     [ebx], edx
.text:0040C7F0                 mov     edi, [esp+9Ch+var_44]
.text:0040C7F4                 mov     ebx, [esp+9Ch+arg_10]
.text:0040C7FB                 mov     [ebp+0], edi
.text:0040C7FE                 mov     esi, [esp+9Ch+var_40]
.text:0040C802                 mov     [ecx], esi
.text:0040C804                 mov     edx, [esp+9Ch+var_3C]
.text:0040C808                 mov     [ebx], edx
.text:0040C80A                 jmp     short loc_40C7C5
.text:0040C80A ; ---------------------------------------------------------------------------
.text:0040C80C                 align 10h
.text:0040C810
.text:0040C810 loc_40C810:                             ; CODE XREF: sub_40C5B0+132↑j
.text:0040C810                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040C813                 mov     eax, [esp+9Ch+arg_C]
.text:0040C81A                 mov     ecx, [esp+9Ch+arg_10]
.text:0040C821                 mov     edx, [esp+9Ch+arg_8]
.text:0040C828                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040C82C                 mov     eax, [esp+9Ch+arg_4]
.text:0040C833                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040C837                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040C83B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040C83F                 call    GetDiskFreeSpaceA
.text:0040C844                 sub     esp, 14h
.text:0040C847                 jmp     loc_40C7C5
.text:0040C847 sub_40C5B0      endp ; sp-analysis failed
.text:0040C847
.text:0040C847 ; ---------------------------------------------------------------------------
.text:0040C84C                 align 10h
.text:0040C850
.text:0040C850 ; =============== S U B R O U T I N E =======================================
.text:0040C850
.text:0040C850
.text:0040C850 ; int __cdecl sub_40C850(LPCSTR, char *, int)
.text:0040C850 sub_40C850      proc near               ; CODE XREF: sub_40BFA0+1A↑p
.text:0040C850                                         ; sub_40FE20+104↓p ...
.text:0040C850
.text:0040C850 var_13C         = dword ptr -13Ch
.text:0040C850 lpString1       = dword ptr -138h
.text:0040C850 var_134         = dword ptr -134h
.text:0040C850 String1         = byte ptr -12Ch
.text:0040C850 var_10          = dword ptr -10h
.text:0040C850 var_C           = dword ptr -0Ch
.text:0040C850 var_8           = dword ptr -8
.text:0040C850 var_4           = dword ptr -4
.text:0040C850 arg_0           = dword ptr  4
.text:0040C850 arg_4           = dword ptr  8
.text:0040C850 arg_8           = dword ptr  0Ch
.text:0040C850
.text:0040C850                 sub     esp, 13Ch
.text:0040C856                 mov     [esp+13Ch+var_10], ebx
.text:0040C85D                 mov     ebx, [esp+13Ch+arg_8]
.text:0040C864                 mov     [esp+13Ch+var_C], esi
.text:0040C86B                 mov     esi, [esp+13Ch+arg_4]
.text:0040C872                 mov     [esp+13Ch+var_8], edi
.text:0040C879                 mov     edi, [esp+13Ch+arg_0]
.text:0040C880                 mov     [esp+13Ch+var_4], ebp
.text:0040C887                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040C88B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040C88F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040C892                 call    sub_40B0A0
.text:0040C897                 cmp     eax, 0FFFFFFFFh
.text:0040C89A                 mov     edx, eax
.text:0040C89C                 jz      short loc_40C8AE
.text:0040C89E                 mov     ecx, [ebx]
.text:0040C8A0                 and     ecx, 0F000h
.text:0040C8A6                 cmp     ecx, 0A000h
.text:0040C8AC                 jz      short loc_40C8D3
.text:0040C8AE
.text:0040C8AE loc_40C8AE:                             ; CODE XREF: sub_40C850+4C↑j
.text:0040C8AE                                         ; sub_40C850+A1↓j ...
.text:0040C8AE                 mov     ebx, [esp+13Ch+var_10]
.text:0040C8B5                 mov     eax, edx
.text:0040C8B7                 mov     esi, [esp+13Ch+var_C]
.text:0040C8BE                 mov     edi, [esp+13Ch+var_8]
.text:0040C8C5                 mov     ebp, [esp+13Ch+var_4]
.text:0040C8CC                 add     esp, 13Ch
.text:0040C8D2                 retn
.text:0040C8D3 ; ---------------------------------------------------------------------------
.text:0040C8D3
.text:0040C8D3 loc_40C8D3:                             ; CODE XREF: sub_40C850+5C↑j
.text:0040C8D3                 mov     [esp+13Ch+var_134], 104h
.text:0040C8DB                 lea     ebp, [esp+13Ch+String1]
.text:0040C8DF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040C8E3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040C8E6                 call    sub_40ED00
.text:0040C8EB                 inc     eax
.text:0040C8EC                 mov     edx, 0FFFFFFFFh
.text:0040C8F1                 jz      short loc_40C8AE
.text:0040C8F3                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040C8F7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040C8FB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040C8FE                 call    sub_40B0A0
.text:0040C903                 mov     edx, eax
.text:0040C905                 jmp     short loc_40C8AE
.text:0040C905 sub_40C850      endp
.text:0040C905
.text:0040C905 ; ---------------------------------------------------------------------------
.text:0040C907                 align 10h
.text:0040C910
.text:0040C910 ; =============== S U B R O U T I N E =======================================
.text:0040C910
.text:0040C910
.text:0040C910 ; int __cdecl sub_40C910(void *, void *Src, size_t Size, int, int)
.text:0040C910 sub_40C910      proc near               ; CODE XREF: sub_40C910+72↓p
.text:0040C910                                         ; sub_40C910+96↓p ...
.text:0040C910
.text:0040C910 var_3C          = dword ptr -3Ch
.text:0040C910 var_38          = dword ptr -38h
.text:0040C910 var_34          = dword ptr -34h
.text:0040C910 var_30          = dword ptr -30h
.text:0040C910 var_2C          = dword ptr -2Ch
.text:0040C910 var_28          = dword ptr -28h
.text:0040C910 var_24          = dword ptr -24h
.text:0040C910 var_20          = dword ptr -20h
.text:0040C910 var_1C          = dword ptr -1Ch
.text:0040C910 var_18          = dword ptr -18h
.text:0040C910 var_14          = dword ptr -14h
.text:0040C910 arg_0           = dword ptr  4
.text:0040C910 Src             = dword ptr  8
.text:0040C910 Size            = dword ptr  0Ch
.text:0040C910 arg_C           = dword ptr  10h
.text:0040C910 arg_10          = dword ptr  14h
.text:0040C910
.text:0040C910                 push    ebp
.text:0040C911                 push    edi
.text:0040C912                 push    esi
.text:0040C913                 push    ebx
.text:0040C914                 sub     esp, 2Ch
.text:0040C917                 mov     edx, [esp+3Ch+arg_0]
.text:0040C91B                 mov     ebx, [esp+3Ch+Src]
.text:0040C91F                 mov     eax, [esp+3Ch+arg_C]
.text:0040C923                 mov     edi, [esp+3Ch+Size]
.text:0040C927                 mov     [esp+3Ch+var_14], edx
.text:0040C92B                 cmp     ebx, 1
.text:0040C92E                 mov     edx, [esp+3Ch+arg_10]
.text:0040C932                 mov     [esp+3Ch+var_18], eax
.text:0040C936                 mov     [esp+3Ch+var_1C], edx
.text:0040C93A                 ja      short loc_40C944
.text:0040C93C                 add     esp, 2Ch
.text:0040C93F                 pop     ebx
.text:0040C940                 pop     esi
.text:0040C941                 pop     edi
.text:0040C942                 pop     ebp
.text:0040C943                 retn
.text:0040C944 ; ---------------------------------------------------------------------------
.text:0040C944
.text:0040C944 loc_40C944:                             ; CODE XREF: sub_40C910+2A↑j
.text:0040C944                 mov     [esp+3Ch+var_34], edi ; Size
.text:0040C948                 mov     esi, ebx
.text:0040C94A                 mov     ebp, [esp+3Ch+var_14]
.text:0040C94E                 shr     esi, 1
.text:0040C950                 mov     eax, ebx
.text:0040C952                 mov     ecx, [esp+3Ch+var_1C]
.text:0040C956                 mov     [esp+3Ch+var_38], esi ; Src
.text:0040C95A                 mov     edx, esi
.text:0040C95C                 sub     eax, esi
.text:0040C95E                 mov     [esp+3Ch+var_24], ebp
.text:0040C962                 imul    edx, edi
.text:0040C965                 mov     ebp, [esp+3Ch+var_14]
.text:0040C969                 mov     [esp+3Ch+var_28], eax
.text:0040C96D                 mov     eax, [esp+3Ch+var_14]
.text:0040C971                 add     ebp, edx
.text:0040C973                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0040C977                 mov     edx, [esp+3Ch+var_18]
.text:0040C97B                 mov     [esp+3Ch+var_3C], eax ; void *
.text:0040C97E                 mov     [esp+3Ch+var_30], edx ; int
.text:0040C982                 call    sub_40C910
.text:0040C987                 mov     [esp+3Ch+var_34], edi ; Size
.text:0040C98B                 mov     ecx, [esp+3Ch+var_1C]
.text:0040C98F                 mov     eax, [esp+3Ch+var_18]
.text:0040C993                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:0040C996                 mov     edx, [esp+3Ch+var_28]
.text:0040C99A                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0040C99E                 mov     [esp+3Ch+var_30], eax ; int
.text:0040C9A2                 mov     [esp+3Ch+var_38], edx ; Src
.text:0040C9A6                 call    sub_40C910
.text:0040C9AB                 mov     ecx, [esp+3Ch+var_1C]
.text:0040C9AF                 cmp     edi, 4
.text:0040C9B2                 mov     [esp+3Ch+var_20], ecx
.text:0040C9B6                 jz      loc_40CA82
.text:0040C9BC
.text:0040C9BC loc_40C9BC:                             ; CODE XREF: sub_40C910+177↓j
.text:0040C9BC                 test    esi, esi
.text:0040C9BE                 jnz     short loc_40C9F0
.text:0040C9C0
.text:0040C9C0 loc_40C9C0:                             ; CODE XREF: sub_40C910+EA↓j
.text:0040C9C0                                         ; sub_40C910+107↓j ...
.text:0040C9C0                 mov     edx, [esp+3Ch+var_28]
.text:0040C9C4                 sub     ebx, edx
.text:0040C9C6                 imul    ebx, edi
.text:0040C9C9                 mov     edi, [esp+3Ch+var_1C]
.text:0040C9CD                 mov     [esp+3Ch+Size], ebx ; Size
.text:0040C9D1                 mov     ebx, [esp+3Ch+var_14]
.text:0040C9D5                 mov     [esp+3Ch+Src], edi ; Src
.text:0040C9D9                 mov     [esp+3Ch+arg_0], ebx ; void *
.text:0040C9DD                 add     esp, 2Ch
.text:0040C9E0                 pop     ebx
.text:0040C9E1                 pop     esi
.text:0040C9E2                 pop     edi
.text:0040C9E3                 pop     ebp
.text:0040C9E4                 jmp     memcpy
.text:0040C9E4 ; ---------------------------------------------------------------------------
.text:0040C9E9                 align 10h
.text:0040C9F0
.text:0040C9F0 loc_40C9F0:                             ; CODE XREF: sub_40C910+AE↑j
.text:0040C9F0                 mov     eax, [esp+3Ch+var_28]
.text:0040C9F4                 test    eax, eax
.text:0040C9F6                 jnz     short loc_40CA20
.text:0040C9F8
.text:0040C9F8 loc_40C9F8:                             ; CODE XREF: sub_40C910+151↓j
.text:0040C9F8                                         ; sub_40C910+18B↓j ...
.text:0040C9F8                 test    esi, esi
.text:0040C9FA                 jz      short loc_40C9C0
.text:0040C9FC                 imul    esi, edi
.text:0040C9FF                 mov     ebp, [esp+3Ch+var_24]
.text:0040CA03                 mov     [esp+3Ch+var_38], ebp ; Src
.text:0040CA07                 mov     [esp+3Ch+var_34], esi ; Size
.text:0040CA0B                 mov     esi, [esp+3Ch+var_20]
.text:0040CA0F                 mov     [esp+3Ch+var_3C], esi ; void *
.text:0040CA12                 call    memcpy
.text:0040CA17                 jmp     short loc_40C9C0
.text:0040CA17 ; ---------------------------------------------------------------------------
.text:0040CA19                 align 10h
.text:0040CA20
.text:0040CA20 loc_40CA20:                             ; CODE XREF: sub_40C910+E6↑j
.text:0040CA20                                         ; sub_40C910+14F↓j
.text:0040CA20                 mov     [esp+3Ch+var_38], ebp
.text:0040CA24                 mov     ecx, [esp+3Ch+var_24]
.text:0040CA28                 mov     [esp+3Ch+var_3C], ecx
.text:0040CA2B                 call    [esp+3Ch+var_18]
.text:0040CA2F                 test    eax, eax
.text:0040CA31                 jle     short loc_40CA63
.text:0040CA33                 mov     [esp+3Ch+var_38], ebp
.text:0040CA37                 mov     ecx, [esp+3Ch+var_20]
.text:0040CA3B                 add     ebp, edi
.text:0040CA3D                 mov     [esp+3Ch+var_34], edi
.text:0040CA41                 mov     [esp+3Ch+var_3C], ecx
.text:0040CA44                 call    sub_40F530
.text:0040CA49                 dec     [esp+3Ch+var_28]
.text:0040CA4D
.text:0040CA4D loc_40CA4D:                             ; CODE XREF: sub_40C910+170↓j
.text:0040CA4D                 mov     [esp+3Ch+var_20], eax
.text:0040CA51                 test    esi, esi
.text:0040CA53                 jz      loc_40C9C0
.text:0040CA59                 mov     eax, [esp+3Ch+var_28]
.text:0040CA5D                 test    eax, eax
.text:0040CA5F                 jnz     short loc_40CA20
.text:0040CA61                 jmp     short loc_40C9F8
.text:0040CA63 ; ---------------------------------------------------------------------------
.text:0040CA63
.text:0040CA63 loc_40CA63:                             ; CODE XREF: sub_40C910+121↑j
.text:0040CA63                 mov     [esp+3Ch+var_34], edi
.text:0040CA67                 mov     eax, [esp+3Ch+var_24]
.text:0040CA6B                 dec     esi
.text:0040CA6C                 mov     edx, [esp+3Ch+var_20]
.text:0040CA70                 mov     [esp+3Ch+var_38], eax
.text:0040CA74                 mov     [esp+3Ch+var_3C], edx
.text:0040CA77                 call    sub_40F530
.text:0040CA7C                 add     [esp+3Ch+var_24], edi
.text:0040CA80                 jmp     short loc_40CA4D
.text:0040CA82 ; ---------------------------------------------------------------------------
.text:0040CA82
.text:0040CA82 loc_40CA82:                             ; CODE XREF: sub_40C910+A6↑j
.text:0040CA82                 test    byte ptr [esp+3Ch+var_14], 3
.text:0040CA87                 jnz     loc_40C9BC
.text:0040CA8D                 test    esi, esi
.text:0040CA8F                 jz      loc_40C9C0
.text:0040CA95                 mov     ecx, [esp+3Ch+var_28]
.text:0040CA99                 test    ecx, ecx
.text:0040CA9B                 jz      loc_40C9F8
.text:0040CAA1
.text:0040CAA1 loc_40CAA1:                             ; CODE XREF: sub_40C910+1C9↓j
.text:0040CAA1                 mov     [esp+3Ch+var_38], ebp
.text:0040CAA5                 mov     edx, [esp+3Ch+var_24]
.text:0040CAA9                 mov     [esp+3Ch+var_3C], edx
.text:0040CAAC                 call    [esp+3Ch+var_18]
.text:0040CAB0                 test    eax, eax
.text:0040CAB2                 jle     short loc_40CAE0
.text:0040CAB4                 dec     [esp+3Ch+var_28]
.text:0040CAB8                 mov     ecx, [ebp+0]
.text:0040CABB                 add     ebp, 4
.text:0040CABE                 mov     edx, [esp+3Ch+var_20]
.text:0040CAC2
.text:0040CAC2 loc_40CAC2:                             ; CODE XREF: sub_40C910+1E0↓j
.text:0040CAC2                 mov     [edx], ecx
.text:0040CAC4                 add     edx, 4
.text:0040CAC7                 test    esi, esi
.text:0040CAC9                 mov     [esp+3Ch+var_20], edx
.text:0040CACD                 jz      loc_40C9C0
.text:0040CAD3                 mov     edx, [esp+3Ch+var_28]
.text:0040CAD7                 test    edx, edx
.text:0040CAD9                 jnz     short loc_40CAA1
.text:0040CADB                 jmp     loc_40C9F8
.text:0040CAE0 ; ---------------------------------------------------------------------------
.text:0040CAE0
.text:0040CAE0 loc_40CAE0:                             ; CODE XREF: sub_40C910+1A2↑j
.text:0040CAE0                 mov     eax, [esp+3Ch+var_24]
.text:0040CAE4                 dec     esi
.text:0040CAE5                 mov     edx, [esp+3Ch+var_20]
.text:0040CAE9                 add     [esp+3Ch+var_24], 4
.text:0040CAEE                 mov     ecx, [eax]
.text:0040CAF0                 jmp     short loc_40CAC2
.text:0040CAF0 sub_40C910      endp
.text:0040CAF0
.text:0040CAF0 ; ---------------------------------------------------------------------------
.text:0040CAF2                 align 10h
.text:0040CB00
.text:0040CB00 ; =============== S U B R O U T I N E =======================================
.text:0040CB00
.text:0040CB00
.text:0040CB00 ; int __cdecl sub_40CB00(void *Block, void *, size_t, int)
.text:0040CB00 sub_40CB00      proc near               ; CODE XREF: sub_403D60+82↑p
.text:0040CB00
.text:0040CB00 Size            = dword ptr -2Ch
.text:0040CB00 Src             = dword ptr -28h
.text:0040CB00 var_24          = dword ptr -24h
.text:0040CB00 var_20          = dword ptr -20h
.text:0040CB00 var_1C          = dword ptr -1Ch
.text:0040CB00 var_18          = dword ptr -18h
.text:0040CB00 var_14          = dword ptr -14h
.text:0040CB00 var_10          = dword ptr -10h
.text:0040CB00 var_C           = dword ptr -0Ch
.text:0040CB00 var_8           = dword ptr -8
.text:0040CB00 var_4           = dword ptr -4
.text:0040CB00 Block           = dword ptr  4
.text:0040CB00 arg_4           = dword ptr  8
.text:0040CB00 arg_8           = dword ptr  0Ch
.text:0040CB00 arg_C           = dword ptr  10h
.text:0040CB00
.text:0040CB00                 sub     esp, 2Ch
.text:0040CB03                 mov     edx, [esp+2Ch+Block]
.text:0040CB07                 mov     [esp+2Ch+var_8], edi
.text:0040CB0B                 mov     edi, [esp+2Ch+arg_4]
.text:0040CB0F                 mov     [esp+2Ch+var_C], esi
.text:0040CB13                 mov     esi, [esp+2Ch+arg_8]
.text:0040CB17                 mov     [esp+2Ch+var_10], ebx
.text:0040CB1B                 mov     ebx, edi
.text:0040CB1D                 imul    ebx, esi
.text:0040CB20                 mov     [esp+2Ch+var_4], ebp
.text:0040CB24                 mov     ebp, [esp+2Ch+arg_C]
.text:0040CB28                 mov     [esp+2Ch+var_14], edx
.text:0040CB2C                 cmp     ebx, 3FFh
.text:0040CB32                 jbe     loc_40CC45
.text:0040CB38                 mov     ecx, ds:dword_414420
.text:0040CB3E                 test    ecx, ecx
.text:0040CB40                 jz      loc_40CBF0
.text:0040CB46
.text:0040CB46 loc_40CB46:                             ; CODE XREF: sub_40CB00+12E↓j
.text:0040CB46                 xor     edx, edx
.text:0040CB48                 mov     eax, ebx
.text:0040CB4A                 div     ds:dword_414430
.text:0040CB50                 cmp     eax, ecx
.text:0040CB52                 jbe     short loc_40CB80
.text:0040CB54
.text:0040CB54 loc_40CB54:                             ; CODE XREF: sub_40CB00+E7↓j
.text:0040CB54                 mov     [esp+2Ch+arg_8], esi
.text:0040CB58                 mov     ebx, [esp+2Ch+var_10]
.text:0040CB5C                 mov     esi, [esp+2Ch+var_14]
.text:0040CB60                 mov     [esp+2Ch+arg_C], ebp
.text:0040CB64                 mov     ebp, [esp+2Ch+var_4]
.text:0040CB68                 mov     [esp+2Ch+arg_4], edi
.text:0040CB6C                 mov     edi, [esp+2Ch+var_8]
.text:0040CB70                 mov     [esp+2Ch+Block], esi
.text:0040CB74                 mov     esi, [esp+2Ch+var_C]
.text:0040CB78                 add     esp, 2Ch
.text:0040CB7B                 jmp     __quicksort
.text:0040CB80 ; ---------------------------------------------------------------------------
.text:0040CB80
.text:0040CB80 loc_40CB80:                             ; CODE XREF: sub_40CB00+52↑j
.text:0040CB80                 call    _errno
.text:0040CB85                 mov     edx, [eax]
.text:0040CB87                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040CB8A                 mov     [esp+2Ch+var_18], edx
.text:0040CB8E                 call    malloc
.text:0040CB93                 test    eax, eax
.text:0040CB95                 mov     ebx, eax
.text:0040CB97                 jz      short loc_40CBDC
.text:0040CB99                 call    _errno
.text:0040CB9E                 mov     ecx, [esp+2Ch+var_18]
.text:0040CBA2                 mov     [eax], ecx
.text:0040CBA4                 mov     [esp+2Ch+Src], edi ; Src
.text:0040CBA8                 mov     edi, [esp+2Ch+var_14]
.text:0040CBAC                 mov     [esp+2Ch+var_1C], ebx ; int
.text:0040CBB0                 mov     [esp+2Ch+var_20], ebp ; int
.text:0040CBB4                 mov     [esp+2Ch+var_24], esi ; Size
.text:0040CBB8                 mov     [esp+2Ch+Size], edi ; void *
.text:0040CBBB                 call    sub_40C910
.text:0040CBC0                 mov     [esp+2Ch+Block], ebx ; Block
.text:0040CBC4                 mov     esi, [esp+2Ch+var_C]
.text:0040CBC8                 mov     ebx, [esp+2Ch+var_10]
.text:0040CBCC                 mov     edi, [esp+2Ch+var_8]
.text:0040CBD0                 mov     ebp, [esp+2Ch+var_4]
.text:0040CBD4                 add     esp, 2Ch
.text:0040CBD7                 jmp     free
.text:0040CBDC ; ---------------------------------------------------------------------------
.text:0040CBDC
.text:0040CBDC loc_40CBDC:                             ; CODE XREF: sub_40CB00+97↑j
.text:0040CBDC                 call    _errno
.text:0040CBE1                 mov     ebx, [esp+2Ch+var_18]
.text:0040CBE5                 mov     [eax], ebx
.text:0040CBE7                 jmp     loc_40CB54
.text:0040CBE7 ; ---------------------------------------------------------------------------
.text:0040CBEC                 align 10h
.text:0040CBF0
.text:0040CBF0 loc_40CBF0:                             ; CODE XREF: sub_40CB00+40↑j
.text:0040CBF0                 mov     [esp+2Ch+Size], 55h ; 'U'
.text:0040CBF7                 call    _sysconf
.text:0040CBFC                 mov     ds:dword_414420, eax
.text:0040CC01                 mov     edx, eax
.text:0040CC03                 inc     edx
.text:0040CC04                 jz      short loc_40CC38
.text:0040CC06
.text:0040CC06 loc_40CC06:                             ; CODE XREF: sub_40CB00+143↓j
.text:0040CC06                 mov     eax, ds:dword_414420
.text:0040CC0B                 test    eax, eax
.text:0040CC0D                 js      short loc_40CC33
.text:0040CC0F
.text:0040CC0F loc_40CC0F:                             ; CODE XREF: sub_40CB00+136↓j
.text:0040CC0F                 mov     [esp+2Ch+Size], 1Eh
.text:0040CC16                 sar     eax, 2
.text:0040CC19                 mov     ds:dword_414420, eax
.text:0040CC1E                 call    _sysconf
.text:0040CC23                 mov     ds:dword_414430, eax
.text:0040CC28                 mov     ecx, ds:dword_414420
.text:0040CC2E                 jmp     loc_40CB46
.text:0040CC33 ; ---------------------------------------------------------------------------
.text:0040CC33
.text:0040CC33 loc_40CC33:                             ; CODE XREF: sub_40CB00+10D↑j
.text:0040CC33                 add     eax, 3
.text:0040CC36                 jmp     short loc_40CC0F
.text:0040CC38 ; ---------------------------------------------------------------------------
.text:0040CC38
.text:0040CC38 loc_40CC38:                             ; CODE XREF: sub_40CB00+104↑j
.text:0040CC38                 mov     ecx, 7FFFFFFFh
.text:0040CC3D                 mov     ds:dword_414420, ecx
.text:0040CC43                 jmp     short loc_40CC06
.text:0040CC45 ; ---------------------------------------------------------------------------
.text:0040CC45
.text:0040CC45 loc_40CC45:                             ; CODE XREF: sub_40CB00+32↑j
.text:0040CC45                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040CC48                 call    malloc
.text:0040CC4D                 mov     [esp+2Ch+var_1C], eax ; int
.text:0040CC51                 mov     eax, [esp+2Ch+var_14]
.text:0040CC55                 mov     [esp+2Ch+var_20], ebp ; int
.text:0040CC59                 mov     [esp+2Ch+var_24], esi ; Size
.text:0040CC5D                 mov     [esp+2Ch+Src], edi ; Src
.text:0040CC61                 mov     [esp+2Ch+Size], eax ; void *
.text:0040CC64                 call    sub_40C910
.text:0040CC69                 mov     ebx, [esp+2Ch+var_10]
.text:0040CC6D                 mov     esi, [esp+2Ch+var_C]
.text:0040CC71                 mov     edi, [esp+2Ch+var_8]
.text:0040CC75                 mov     ebp, [esp+2Ch+var_4]
.text:0040CC79                 add     esp, 2Ch
.text:0040CC7C                 retn
.text:0040CC7C sub_40CB00      endp
.text:0040CC7C
.text:0040CC7C ; ---------------------------------------------------------------------------
.text:0040CC7D                 align 10h
.text:0040CC80
.text:0040CC80 ; =============== S U B R O U T I N E =======================================
.text:0040CC80
.text:0040CC80
.text:0040CC80 ; int __cdecl sub_40CC80(void *)
.text:0040CC80 sub_40CC80      proc near               ; CODE XREF: sub_4035B0+3BC↑p
.text:0040CC80                                         ; sub_4035B0+40D↑p ...
.text:0040CC80
.text:0040CC80 Block           = dword ptr -0Ch
.text:0040CC80 var_4           = dword ptr -4
.text:0040CC80 arg_0           = dword ptr  4
.text:0040CC80
.text:0040CC80                 sub     esp, 0Ch
.text:0040CC83                 mov     [esp+0Ch+var_4], ebx
.text:0040CC87                 mov     ebx, [esp+0Ch+arg_0]
.text:0040CC8B                 test    ebx, ebx
.text:0040CC8D                 jz      short loc_40CCCB
.text:0040CC8F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:0040CC92                 jz      short loc_40CCB9
.text:0040CC94                 mov     [esp+0Ch+Block], ebx
.text:0040CC97                 call    sub_40F5D0
.text:0040CC9C                 mov     edx, [ebx+4]
.text:0040CC9F                 mov     [esp+0Ch+Block], edx ; Block
.text:0040CCA2                 call    free
.text:0040CCA7                 mov     [esp+0Ch+Block], ebx ; Block
.text:0040CCAA                 call    free
.text:0040CCAF                 xor     eax, eax
.text:0040CCB1
.text:0040CCB1 loc_40CCB1:                             ; CODE XREF: sub_40CC80+49↓j
.text:0040CCB1                 mov     ebx, [esp+0Ch+var_4]
.text:0040CCB5                 add     esp, 0Ch
.text:0040CCB8                 retn
.text:0040CCB9 ; ---------------------------------------------------------------------------
.text:0040CCB9
.text:0040CCB9 loc_40CCB9:                             ; CODE XREF: sub_40CC80+12↑j
.text:0040CCB9                 call    _errno
.text:0040CCBE                 mov     dword ptr [eax], 9
.text:0040CCC4
.text:0040CCC4 loc_40CCC4:                             ; CODE XREF: sub_40CC80+56↓j
.text:0040CCC4                 mov     eax, 0FFFFFFFFh
.text:0040CCC9                 jmp     short loc_40CCB1
.text:0040CCCB ; ---------------------------------------------------------------------------
.text:0040CCCB
.text:0040CCCB loc_40CCCB:                             ; CODE XREF: sub_40CC80+D↑j
.text:0040CCCB                 call    _errno
.text:0040CCD0                 mov     dword ptr [eax], 16h
.text:0040CCD6                 jmp     short loc_40CCC4
.text:0040CCD6 sub_40CC80      endp
.text:0040CCD6
.text:0040CCD6 ; ---------------------------------------------------------------------------
.text:0040CCD8                 align 10h
.text:0040CCE0 ; const char asc_40CCE0[2]
.text:0040CCE0 asc_40CCE0      db '\',0                ; DATA XREF: sub_40CCF0+D2↓o
.text:0040CCE2                 align 10h
.text:0040CCF0
.text:0040CCF0 ; =============== S U B R O U T I N E =======================================
.text:0040CCF0
.text:0040CCF0
.text:0040CCF0 ; int __cdecl sub_40CCF0(LPCSTR)
.text:0040CCF0 sub_40CCF0      proc near               ; CODE XREF: sub_4035B0+18↑p
.text:0040CCF0
.text:0040CCF0 lpFileName      = dword ptr -13Ch
.text:0040CCF0 Source          = dword ptr -138h
.text:0040CCF0 Destination     = byte ptr -12Ch
.text:0040CCF0 var_10          = dword ptr -10h
.text:0040CCF0 var_C           = dword ptr -0Ch
.text:0040CCF0 var_8           = dword ptr -8
.text:0040CCF0 var_4           = dword ptr -4
.text:0040CCF0 arg_0           = dword ptr  4
.text:0040CCF0
.text:0040CCF0                 sub     esp, 13Ch
.text:0040CCF6                 mov     [esp+13Ch+var_C], esi
.text:0040CCFD                 mov     esi, [esp+13Ch+arg_0]
.text:0040CD04                 mov     [esp+13Ch+var_10], ebx
.text:0040CD0B                 mov     [esp+13Ch+var_8], edi
.text:0040CD12                 test    esi, esi
.text:0040CD14                 mov     [esp+13Ch+var_4], ebp
.text:0040CD1B                 jz      short loc_40CD22
.text:0040CD1D                 cmp     byte ptr [esi], 0
.text:0040CD20                 jnz     short loc_40CD52
.text:0040CD22
.text:0040CD22 loc_40CD22:                             ; CODE XREF: sub_40CCF0+2B↑j
.text:0040CD22                 call    _errno
.text:0040CD27                 mov     dword ptr [eax], 2
.text:0040CD2D
.text:0040CD2D loc_40CD2D:                             ; CODE XREF: sub_40CCF0+139↓j
.text:0040CD2D                                         ; sub_40CCF0+14C↓j
.text:0040CD2D                 xor     eax, eax
.text:0040CD2F
.text:0040CD2F loc_40CD2F:                             ; CODE XREF: sub_40CCF0+90↓j
.text:0040CD2F                                         ; sub_40CCF0+A4↓j ...
.text:0040CD2F                 mov     ebx, [esp+13Ch+var_10]
.text:0040CD36                 mov     esi, [esp+13Ch+var_C]
.text:0040CD3D                 mov     edi, [esp+13Ch+var_8]
.text:0040CD44                 mov     ebp, [esp+13Ch+var_4]
.text:0040CD4B                 add     esp, 13Ch
.text:0040CD51                 retn
.text:0040CD52 ; ---------------------------------------------------------------------------
.text:0040CD52
.text:0040CD52 loc_40CD52:                             ; CODE XREF: sub_40CCF0+30↑j
.text:0040CD52                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:0040CD55                 call    GetFileAttributesA
.text:0040CD5A                 sub     esp, 4
.text:0040CD5D                 cmp     eax, 0FFFFFFFFh
.text:0040CD60                 jz      loc_40CE2E
.text:0040CD66                 test    al, 10h
.text:0040CD68                 jz      loc_40CE1E
.text:0040CD6E                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:0040CD75                 call    malloc
.text:0040CD7A                 mov     ebx, eax
.text:0040CD7C                 xor     eax, eax
.text:0040CD7E                 test    ebx, ebx
.text:0040CD80                 jz      short loc_40CD2F
.text:0040CD82                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:0040CD89                 call    malloc
.text:0040CD8E                 mov     edi, eax
.text:0040CD90                 xor     eax, eax
.text:0040CD92                 test    edi, edi
.text:0040CD94                 jz      short loc_40CD2F
.text:0040CD96                 mov     [esp+13Ch+Source], esi ; Source
.text:0040CD9A                 lea     ebp, [esp+13Ch+Destination]
.text:0040CD9E                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0040CDA1                 call    strcpy
.text:0040CDA6                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0040CDA9                 call    strlen
.text:0040CDAE                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:0040CDB2                 jz      short loc_40CDE0
.text:0040CDB4                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0040CDB7                 call    strlen
.text:0040CDBC                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:0040CDC0                 jz      short loc_40CDE0
.text:0040CDC2                 mov     [esp+13Ch+Source], offset asc_40CCE0 ; "\\"
.text:0040CDCA                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0040CDCD                 call    strcat
.text:0040CDD2                 lea     esi, [esi+0]
.text:0040CDD9                 lea     edi, [edi+0]
.text:0040CDE0
.text:0040CDE0 loc_40CDE0:                             ; CODE XREF: sub_40CCF0+C2↑j
.text:0040CDE0                                         ; sub_40CCF0+D0↑j
.text:0040CDE0                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:0040CDE3                 call    sub_40D130
.text:0040CDE8                 mov     [esp+13Ch+lpFileName], eax
.text:0040CDEB                 call    sub_40B540
.text:0040CDF0                 mov     [edi], eax
.text:0040CDF2                 mov     eax, ebx
.text:0040CDF4                 mov     [ebx+4], edi
.text:0040CDF7                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0040CDFD                 mov     dword ptr [ebx+8], 118h
.text:0040CE04                 mov     dword ptr [ebx+0Ch], 118h
.text:0040CE0B                 mov     dword ptr [ebx+10h], 8
.text:0040CE12                 mov     dword ptr [ebx+14h], 1
.text:0040CE19                 jmp     loc_40CD2F
.text:0040CE1E ; ---------------------------------------------------------------------------
.text:0040CE1E
.text:0040CE1E loc_40CE1E:                             ; CODE XREF: sub_40CCF0+78↑j
.text:0040CE1E                 call    _errno
.text:0040CE23                 mov     dword ptr [eax], 14h
.text:0040CE29                 jmp     loc_40CD2D
.text:0040CE2E ; ---------------------------------------------------------------------------
.text:0040CE2E
.text:0040CE2E loc_40CE2E:                             ; CODE XREF: sub_40CCF0+70↑j
.text:0040CE2E                 call    sub_40D0E0
.text:0040CE33                 mov     esi, eax
.text:0040CE35                 call    _errno
.text:0040CE3A                 mov     [eax], esi
.text:0040CE3C                 jmp     loc_40CD2D
.text:0040CE3C sub_40CCF0      endp
.text:0040CE3C
.text:0040CE3C ; ---------------------------------------------------------------------------
.text:0040CE41                 align 10h
.text:0040CE50
.text:0040CE50 ; =============== S U B R O U T I N E =======================================
.text:0040CE50
.text:0040CE50 ; Attributes: info_from_lumina
.text:0040CE50
.text:0040CE50 ___get_errno    proc near               ; CODE XREF: sub_40D0E0+B↓p
.text:0040CE50
.text:0040CE50 arg_0           = dword ptr  4
.text:0040CE50
.text:0040CE50                 mov     eax, [esp+arg_0]
.text:0040CE54                 cmp     eax, 53h ; 'S'
.text:0040CE57                 jg      loc_40CF50
.text:0040CE5D                 cmp     eax, 52h ; 'R'
.text:0040CE60                 jge     short loc_40CEB2
.text:0040CE62                 cmp     eax, 0Fh
.text:0040CE65                 jz      short loc_40CE80
.text:0040CE67                 cmp     eax, 0Fh
.text:0040CE6A                 jg      short loc_40CEE0
.text:0040CE6C                 cmp     eax, 9
.text:0040CE6F                 jg      short loc_40CEC0
.text:0040CE71                 cmp     eax, 7
.text:0040CE74                 jge     short loc_40CEB9
.text:0040CE76                 cmp     eax, 3
.text:0040CE79                 jg      short loc_40CE9A
.text:0040CE7B                 cmp     eax, 2
.text:0040CE7E                 jl      short loc_40CE93
.text:0040CE80
.text:0040CE80 loc_40CE80:                             ; CODE XREF: ___get_errno+15↑j
.text:0040CE80                                         ; ___get_errno+9D↓j ...
.text:0040CE80                 mov     edx, 2
.text:0040CE85                 lea     esi, [esi+0]
.text:0040CE89                 lea     edi, [edi+0]
.text:0040CE90
.text:0040CE90 loc_40CE90:                             ; CODE XREF: ___get_errno+48↓j
.text:0040CE90                                         ; ___get_errno+59↓j ...
.text:0040CE90                 mov     eax, edx
.text:0040CE92                 retn
.text:0040CE93 ; ---------------------------------------------------------------------------
.text:0040CE93
.text:0040CE93 loc_40CE93:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040CE93                                         ; ___get_errno+78↓j ...
.text:0040CE93                 mov     edx, 16h
.text:0040CE98                 jmp     short loc_40CE90
.text:0040CE9A ; ---------------------------------------------------------------------------
.text:0040CE9A
.text:0040CE9A loc_40CE9A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040CE9A                 cmp     eax, 5
.text:0040CE9D                 jz      short loc_40CEB2
.text:0040CE9F                 cmp     eax, 5
.text:0040CEA2                 jg      short loc_40CEAB
.text:0040CEA4                 mov     edx, 18h
.text:0040CEA9                 jmp     short loc_40CE90
.text:0040CEAB ; ---------------------------------------------------------------------------
.text:0040CEAB
.text:0040CEAB loc_40CEAB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040CEAB                                         ; ___get_errno+180↓j
.text:0040CEAB                 mov     edx, 9
.text:0040CEB0                 jmp     short loc_40CE90
.text:0040CEB2 ; ---------------------------------------------------------------------------
.text:0040CEB2
.text:0040CEB2 loc_40CEB2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040CEB2                                         ; ___get_errno+4D↑j ...
.text:0040CEB2                 mov     edx, 0Dh
.text:0040CEB7                 jmp     short loc_40CE90
.text:0040CEB9 ; ---------------------------------------------------------------------------
.text:0040CEB9
.text:0040CEB9 loc_40CEB9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040CEB9                                         ; ___get_errno+73↓j ...
.text:0040CEB9                 mov     edx, 0Ch
.text:0040CEBE                 jmp     short loc_40CE90
.text:0040CEC0 ; ---------------------------------------------------------------------------
.text:0040CEC0
.text:0040CEC0 loc_40CEC0:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040CEC0                 cmp     eax, 0Dh
.text:0040CEC3                 jg      short loc_40CEB9
.text:0040CEC5                 cmp     eax, 0Ch
.text:0040CEC8                 jge     short loc_40CE93
.text:0040CECA                 cmp     eax, 0Ah
.text:0040CECD                 mov     edx, 7
.text:0040CED2                 jz      short loc_40CE90
.text:0040CED4                 cmp     eax, 0Bh
.text:0040CED7                 jnz     short loc_40CE93
.text:0040CED9
.text:0040CED9 loc_40CED9:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040CED9                 mov     edx, 8
.text:0040CEDE                 jmp     short loc_40CE90
.text:0040CEE0 ; ---------------------------------------------------------------------------
.text:0040CEE0
.text:0040CEE0 loc_40CEE0:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040CEE0                 cmp     eax, 22h ; '"'
.text:0040CEE3                 jg      short loc_40CF14
.text:0040CEE5                 cmp     eax, 16h
.text:0040CEE8                 jge     short loc_40CEB2
.text:0040CEEA                 cmp     eax, 12h
.text:0040CEED                 jz      short loc_40CE80
.text:0040CEEF                 cmp     eax, 12h
.text:0040CEF2                 jg      short loc_40CF05
.text:0040CEF4                 cmp     eax, 10h
.text:0040CEF7                 jz      short loc_40CEB2
.text:0040CEF9                 mov     edx, 12h
.text:0040CEFE                 cmp     eax, 11h
.text:0040CF01
.text:0040CF01 loc_40CF01:                             ; CODE XREF: ___get_errno+172↓j
.text:0040CF01                                         ; ___get_errno+24C↓j ...
.text:0040CF01                 jnz     short loc_40CE93
.text:0040CF03                 jmp     short loc_40CE90
.text:0040CF05 ; ---------------------------------------------------------------------------
.text:0040CF05
.text:0040CF05 loc_40CF05:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040CF05                 cmp     eax, 14h
.text:0040CF08                 jle     short loc_40CEB2
.text:0040CF0A
.text:0040CF0A loc_40CF0A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040CF0A                 mov     edx, 10h
.text:0040CF0F                 jmp     loc_40CE90
.text:0040CF14 ; ---------------------------------------------------------------------------
.text:0040CF14
.text:0040CF14 loc_40CF14:                             ; CODE XREF: ___get_errno+93↑j
.text:0040CF14                 cmp     eax, 41h ; 'A'
.text:0040CF17                 jz      short loc_40CEB2
.text:0040CF19                 cmp     eax, 41h ; 'A'
.text:0040CF1C                 jg      short loc_40CF31
.text:0040CF1E                 cmp     eax, 24h ; '$'
.text:0040CF21                 jz      short loc_40CEB2
.text:0040CF23                 cmp     eax, 35h ; '5'
.text:0040CF26                 jnz     loc_40CE93
.text:0040CF2C                 jmp     loc_40CE80
.text:0040CF31 ; ---------------------------------------------------------------------------
.text:0040CF31
.text:0040CF31 loc_40CF31:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040CF31                 cmp     eax, 43h ; 'C'
.text:0040CF34                 jz      loc_40CE80
.text:0040CF3A                 cmp     eax, 50h ; 'P'
.text:0040CF3D                 jnz     loc_40CE93
.text:0040CF43
.text:0040CF43 loc_40CF43:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040CF43                 mov     edx, 11h
.text:0040CF48                 jmp     loc_40CE90
.text:0040CF48 ; ---------------------------------------------------------------------------
.text:0040CF4D                 align 10h
.text:0040CF50
.text:0040CF50 loc_40CF50:                             ; CODE XREF: ___get_errno+7↑j
.text:0040CF50                 cmp     eax, 0A1h ; '¡'
.text:0040CF55                 jz      loc_40CE80
.text:0040CF5B                 cmp     eax, 0A1h ; '¡'
.text:0040CF60                 jg      loc_40D010
.text:0040CF66                 cmp     eax, 81h
.text:0040CF6B                 jg      short loc_40CFD5
.text:0040CF6D                 cmp     eax, 80h ; '€'
.text:0040CF72                 mov     edx, 0Ah
.text:0040CF77                 jge     loc_40CE90
.text:0040CF7D                 cmp     eax, 6Ch ; 'l'
.text:0040CF80                 jz      loc_40CEB2
.text:0040CF86                 cmp     eax, 6Ch ; 'l'
.text:0040CF89                 jg      short loc_40CFA7
.text:0040CF8B                 cmp     eax, 57h ; 'W'
.text:0040CF8E                 jz      loc_40CE93
.text:0040CF94                 cmp     eax, 59h ; 'Y'
.text:0040CF97                 jnz     loc_40CE93
.text:0040CF9D
.text:0040CF9D loc_40CF9D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040CF9D                                         ; ___get_errno+23C↓j
.text:0040CF9D                 mov     edx, 0Bh
.text:0040CFA2                 jmp     loc_40CE90
.text:0040CFA7 ; ---------------------------------------------------------------------------
.text:0040CFA7
.text:0040CFA7 loc_40CFA7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040CFA7                 cmp     eax, 70h ; 'p'
.text:0040CFAA                 mov     edx, 1Ch
.text:0040CFAF                 jz      loc_40CE90
.text:0040CFB5                 cmp     eax, 70h ; 'p'
.text:0040CFB8                 jg      short loc_40CFC7
.text:0040CFBA                 mov     edx, 20h ; ' '
.text:0040CFBF                 cmp     eax, 6Dh ; 'm'
.text:0040CFC2                 jmp     loc_40CF01
.text:0040CFC7 ; ---------------------------------------------------------------------------
.text:0040CFC7
.text:0040CFC7 loc_40CFC7:                             ; CODE XREF: ___get_errno+168↑j
.text:0040CFC7                 cmp     eax, 72h ; 'r'
.text:0040CFCA
.text:0040CFCA loc_40CFCA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040CFCA                 jnz     loc_40CE93
.text:0040CFD0                 jmp     loc_40CEAB
.text:0040CFD5 ; ---------------------------------------------------------------------------
.text:0040CFD5
.text:0040CFD5 loc_40CFD5:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040CFD5                 cmp     eax, 84h ; '„'
.text:0040CFDA                 jz      loc_40CEB2
.text:0040CFE0                 cmp     eax, 84h ; '„'
.text:0040CFE5                 jg      short loc_40CFEE
.text:0040CFE7                 cmp     eax, 82h ; '‚'
.text:0040CFEC                 jmp     short loc_40CFCA
.text:0040CFEE ; ---------------------------------------------------------------------------
.text:0040CFEE
.text:0040CFEE loc_40CFEE:                             ; CODE XREF: ___get_errno+195↑j
.text:0040CFEE                 cmp     eax, 91h ; '‘'
.text:0040CFF3                 mov     edx, 29h ; ')'
.text:0040CFF8                 jz      loc_40CE90
.text:0040CFFE                 cmp     eax, 9Eh ; 'ž'
.text:0040D003
.text:0040D003 loc_40D003:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040D003                 jnz     loc_40CE93
.text:0040D009                 jmp     loc_40CEB2
.text:0040D009 ; ---------------------------------------------------------------------------
.text:0040D00E                 align 10h
.text:0040D010
.text:0040D010 loc_40D010:                             ; CODE XREF: ___get_errno+110↑j
.text:0040D010                 cmp     eax, 0CEh ; 'Î'
.text:0040D015                 jz      loc_40CE80
.text:0040D01B                 cmp     eax, 0CEh ; 'Î'
.text:0040D020                 jg      short loc_40D070
.text:0040D022                 cmp     eax, 0AAh ; 'ª'
.text:0040D027                 jz      loc_40CF0A
.text:0040D02D                 cmp     eax, 0AAh ; 'ª'
.text:0040D032                 jg      short loc_40D046
.text:0040D034                 cmp     eax, 0A4h ; '¤'
.text:0040D039                 jz      loc_40CF9D
.text:0040D03F                 cmp     eax, 0A7h ; '§'
.text:0040D044                 jmp     short loc_40D003
.text:0040D046 ; ---------------------------------------------------------------------------
.text:0040D046
.text:0040D046 loc_40D046:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040D046                 cmp     eax, 0B7h ; '·'
.text:0040D04B                 jz      loc_40CF43
.text:0040D051                 cmp     eax, 0B7h ; '·'
.text:0040D056                 jl      loc_40CE93
.text:0040D05C                 sub     eax, 0BCh ; '¼'
.text:0040D061                 cmp     eax, 0Eh
.text:0040D064                 ja      loc_40CE93
.text:0040D06A                 jmp     loc_40CED9
.text:0040D06A ; ---------------------------------------------------------------------------
.text:0040D06F                 align 10h
.text:0040D070
.text:0040D070 loc_40D070:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040D070                 cmp     eax, 46Bh
.text:0040D075                 mov     edx, 24h ; '$'
.text:0040D07A                 jz      loc_40CE90
.text:0040D080                 cmp     eax, 46Bh
.text:0040D085                 jg      short loc_40D0A1
.text:0040D087                 cmp     eax, 0D7h ; '×'
.text:0040D08C                 jz      loc_40CF9D
.text:0040D092                 mov     edx, 5
.text:0040D097                 cmp     eax, 45Dh
.text:0040D09C                 jmp     loc_40CF01
.text:0040D0A1 ; ---------------------------------------------------------------------------
.text:0040D0A1
.text:0040D0A1 loc_40D0A1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040D0A1                 cmp     eax, 4D5h
.text:0040D0A6                 mov     edx, 4
.text:0040D0AB                 jz      loc_40CE90
.text:0040D0B1                 cmp     eax, 4D5h
.text:0040D0B6                 jg      short loc_40D0C7
.text:0040D0B8                 mov     edx, 13h
.text:0040D0BD                 cmp     eax, 4B0h
.text:0040D0C2                 jmp     loc_40CF01
.text:0040D0C7 ; ---------------------------------------------------------------------------
.text:0040D0C7
.text:0040D0C7 loc_40D0C7:                             ; CODE XREF: ___get_errno+266↑j
.text:0040D0C7                 cmp     eax, 718h
.text:0040D0CC                 jnz     loc_40CE93
.text:0040D0D2                 jmp     loc_40CEB9
.text:0040D0D2 ___get_errno    endp
.text:0040D0D2
.text:0040D0D2 ; ---------------------------------------------------------------------------
.text:0040D0D7                 align 10h
.text:0040D0E0
.text:0040D0E0 ; =============== S U B R O U T I N E =======================================
.text:0040D0E0
.text:0040D0E0
.text:0040D0E0 sub_40D0E0      proc near               ; CODE XREF: sub_40B0A0:loc_40B03D↑p
.text:0040D0E0                                         ; sub_40B660:loc_40B6C8↑p ...
.text:0040D0E0
.text:0040D0E0 var_C           = dword ptr -0Ch
.text:0040D0E0
.text:0040D0E0                 sub     esp, 0Ch
.text:0040D0E3                 call    GetLastError
.text:0040D0E8                 mov     [esp+0Ch+var_C], eax
.text:0040D0EB                 call    ___get_errno
.text:0040D0F0                 add     esp, 0Ch
.text:0040D0F3                 retn
.text:0040D0F3 sub_40D0E0      endp
.text:0040D0F3
.text:0040D0F3 ; ---------------------------------------------------------------------------
.text:0040D0F4                 align 10h
.text:0040D100
.text:0040D100 ; =============== S U B R O U T I N E =======================================
.text:0040D100
.text:0040D100
.text:0040D100 sub_40D100      proc near               ; CODE XREF: .text:0040B5D3↑p
.text:0040D100                                         ; .text:0040B623↑p
.text:0040D100
.text:0040D100 arg_4           = dword ptr  8
.text:0040D100
.text:0040D100                 sub     esp, 0Ch
.text:0040D103                 mov     edx, [esp+0Ch+arg_4]
.text:0040D107                 test    edx, edx
.text:0040D109                 jz      short loc_40D110
.text:0040D10B                 add     esp, 0Ch
.text:0040D10E                 jmp     short sub_40D150
.text:0040D110 ; ---------------------------------------------------------------------------
.text:0040D110
.text:0040D110 loc_40D110:                             ; CODE XREF: sub_40D100+9↑j
.text:0040D110                 call    _errno
.text:0040D115                 mov     dword ptr [eax], 16h
.text:0040D11B                 xor     eax, eax
.text:0040D11D                 add     esp, 0Ch
.text:0040D120                 retn
.text:0040D120 sub_40D100      endp
.text:0040D120
.text:0040D121 ; ---------------------------------------------------------------------------
.text:0040D121                 jmp     short sub_40D130
.text:0040D121 ; ---------------------------------------------------------------------------
.text:0040D123                 align 10h
.text:0040D130
.text:0040D130 ; =============== S U B R O U T I N E =======================================
.text:0040D130
.text:0040D130
.text:0040D130 ; int __cdecl sub_40D130(LPCSTR)
.text:0040D130 sub_40D130      proc near               ; CODE XREF: sub_40B0A0-10C↑p
.text:0040D130                                         ; .text:0040B7C8↑p ...
.text:0040D130
.text:0040D130 lpFileName      = dword ptr -0Ch
.text:0040D130 Destination     = dword ptr -8
.text:0040D130 arg_0           = dword ptr  4
.text:0040D130
.text:0040D130                 sub     esp, 0Ch
.text:0040D133                 mov     edx, [esp+0Ch+arg_0]
.text:0040D137                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040D13F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040D142                 call    sub_40D150
.text:0040D147                 add     esp, 0Ch
.text:0040D14A                 retn
.text:0040D14A sub_40D130      endp
.text:0040D14A
.text:0040D14A ; ---------------------------------------------------------------------------
.text:0040D14B                 align 10h
.text:0040D150
.text:0040D150 ; =============== S U B R O U T I N E =======================================
.text:0040D150
.text:0040D150
.text:0040D150 ; int __cdecl sub_40D150(LPCSTR lpFileName, char *Destination)
.text:0040D150 sub_40D150      proc near               ; CODE XREF: sub_40D100+E↑j
.text:0040D150                                         ; sub_40D130+12↑p
.text:0040D150
.text:0040D150 Size            = dword ptr -2Ch
.text:0040D150 nBufferLength   = dword ptr -28h
.text:0040D150 lpBuffer        = dword ptr -24h
.text:0040D150 lpFilePart      = dword ptr -20h
.text:0040D150 FilePart        = dword ptr -14h
.text:0040D150 lpFileName      = dword ptr  4
.text:0040D150 Destination     = dword ptr  8
.text:0040D150
.text:0040D150                 push    ebp
.text:0040D151                 push    edi
.text:0040D152                 push    esi
.text:0040D153                 push    ebx
.text:0040D154                 sub     esp, 1Ch
.text:0040D157                 mov     edi, [esp+2Ch+lpFileName]
.text:0040D15B                 mov     ebp, [esp+2Ch+Destination]
.text:0040D15F                 test    edi, edi
.text:0040D161                 jz      loc_40D269
.text:0040D167                 cmp     byte ptr [edi], 0
.text:0040D16A                 jz      loc_40D25C
.text:0040D170                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040D177                 call    malloc
.text:0040D17C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040D180                 lea     edx, [esp+2Ch+FilePart]
.text:0040D184                 mov     ebx, eax
.text:0040D186                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040D18A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040D192                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040D195                 call    GetFullPathNameA
.text:0040D19A                 sub     esp, 10h
.text:0040D19D                 mov     esi, eax
.text:0040D19F                 test    eax, eax
.text:0040D1A1                 jz      loc_40D24A
.text:0040D1A7                 cmp     eax, 104h
.text:0040D1AC                 jle     short loc_40D1BD
.text:0040D1AE                 test    ebp, ebp
.text:0040D1B0                 jz      short loc_40D219
.text:0040D1B2                 call    _errno
.text:0040D1B7                 mov     dword ptr [eax], 26h ; '&'
.text:0040D1BD
.text:0040D1BD loc_40D1BD:                             ; CODE XREF: sub_40D150+5C↑j
.text:0040D1BD                                         ; sub_40D150+F5↓j
.text:0040D1BD                 call    _errno
.text:0040D1C2                 mov     edi, [eax]
.text:0040D1C4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040D1CC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040D1CF                 call    sub_40D280
.text:0040D1D4                 test    eax, eax
.text:0040D1D6                 jnz     short loc_40D1F0
.text:0040D1D8                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040D1DD                 cmp     al, 2Fh ; '/'
.text:0040D1DF                 jz      short loc_40D1F0
.text:0040D1E1                 cmp     al, 5Ch ; '\'
.text:0040D1E3                 jz      short loc_40D1F0
.text:0040D1E5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040D1E9                 mov     byte ptr [esi+ebx+1], 0
.text:0040D1EE                 mov     esi, esi
.text:0040D1F0
.text:0040D1F0 loc_40D1F0:                             ; CODE XREF: sub_40D150+86↑j
.text:0040D1F0                                         ; sub_40D150+8F↑j ...
.text:0040D1F0                 call    _errno
.text:0040D1F5                 mov     [eax], edi
.text:0040D1F7                 mov     [esp+2Ch+Size], ebx
.text:0040D1FA                 call    sub_40B4C0
.text:0040D1FF                 test    ebp, ebp
.text:0040D201                 mov     eax, ebx
.text:0040D203                 jz      short loc_40D211
.text:0040D205                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040D209                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040D20C                 call    strcpy
.text:0040D211
.text:0040D211 loc_40D211:                             ; CODE XREF: sub_40D150+B3↑j
.text:0040D211                                         ; sub_40D150+10A↓j
.text:0040D211                 add     esp, 1Ch
.text:0040D214                 pop     ebx
.text:0040D215                 pop     esi
.text:0040D216                 pop     edi
.text:0040D217                 pop     ebp
.text:0040D218                 retn
.text:0040D219 ; ---------------------------------------------------------------------------
.text:0040D219
.text:0040D219 loc_40D219:                             ; CODE XREF: sub_40D150+60↑j
.text:0040D219                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040D21C                 lea     ecx, [eax+2]
.text:0040D21F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040D223                 call    realloc
.text:0040D228                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040D22C                 lea     edx, [esp+2Ch+FilePart]
.text:0040D230                 mov     ebx, eax
.text:0040D232                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040D236                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040D23A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040D23D                 call    GetFullPathNameA
.text:0040D242                 sub     esp, 10h
.text:0040D245                 jmp     loc_40D1BD
.text:0040D24A ; ---------------------------------------------------------------------------
.text:0040D24A
.text:0040D24A loc_40D24A:                             ; CODE XREF: sub_40D150+51↑j
.text:0040D24A                 call    sub_40D0E0
.text:0040D24F                 mov     esi, eax
.text:0040D251                 call    _errno
.text:0040D256                 mov     [eax], esi
.text:0040D258
.text:0040D258 loc_40D258:                             ; CODE XREF: sub_40D150+117↓j
.text:0040D258                                         ; sub_40D150+124↓j
.text:0040D258                 xor     eax, eax
.text:0040D25A                 jmp     short loc_40D211
.text:0040D25C ; ---------------------------------------------------------------------------
.text:0040D25C
.text:0040D25C loc_40D25C:                             ; CODE XREF: sub_40D150+1A↑j
.text:0040D25C                 call    _errno
.text:0040D261                 mov     dword ptr [eax], 2
.text:0040D267                 jmp     short loc_40D258
.text:0040D269 ; ---------------------------------------------------------------------------
.text:0040D269
.text:0040D269 loc_40D269:                             ; CODE XREF: sub_40D150+11↑j
.text:0040D269                 call    _errno
.text:0040D26E                 mov     dword ptr [eax], 16h
.text:0040D274                 jmp     short loc_40D258
.text:0040D274 sub_40D150      endp
.text:0040D274
.text:0040D274 ; ---------------------------------------------------------------------------
.text:0040D276                 align 10h
.text:0040D280
.text:0040D280 ; =============== S U B R O U T I N E =======================================
.text:0040D280
.text:0040D280
.text:0040D280 ; int __cdecl sub_40D280(LPCSTR lpFileName, int)
.text:0040D280 sub_40D280      proc near               ; CODE XREF: sub_40B0A0-11D↑p
.text:0040D280                                         ; .text:0040B4A2↑p ...
.text:0040D280
.text:0040D280 uMode           = dword ptr -1Ch
.text:0040D280 var_10          = dword ptr -10h
.text:0040D280 var_C           = dword ptr -0Ch
.text:0040D280 var_8           = dword ptr -8
.text:0040D280 var_4           = dword ptr -4
.text:0040D280 lpFileName      = dword ptr  4
.text:0040D280 arg_4           = dword ptr  8
.text:0040D280
.text:0040D280                 sub     esp, 1Ch
.text:0040D283                 mov     [esp+1Ch+var_10], ebx
.text:0040D287                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040D28B                 mov     [esp+1Ch+var_4], ebp
.text:0040D28F                 xor     ebp, ebp
.text:0040D291                 test    ebx, ebx
.text:0040D293                 mov     [esp+1Ch+var_C], esi
.text:0040D297                 mov     esi, [esp+1Ch+arg_4]
.text:0040D29B                 mov     [esp+1Ch+var_8], edi
.text:0040D29F                 jz      short loc_40D2A9
.text:0040D2A1                 test    esi, 0FFFFFFE8h
.text:0040D2A7                 jz      short loc_40D2D0
.text:0040D2A9
.text:0040D2A9 loc_40D2A9:                             ; CODE XREF: sub_40D280+1F↑j
.text:0040D2A9                 call    _errno
.text:0040D2AE                 mov     dword ptr [eax], 16h
.text:0040D2B4
.text:0040D2B4 loc_40D2B4:                             ; CODE XREF: sub_40D280+B1↓j
.text:0040D2B4                 mov     eax, 0FFFFFFFFh
.text:0040D2B9
.text:0040D2B9 loc_40D2B9:                             ; CODE XREF: sub_40D280+86↓j
.text:0040D2B9                                         ; sub_40D280+A4↓j
.text:0040D2B9                 mov     ebx, [esp+1Ch+var_10]
.text:0040D2BD                 mov     esi, [esp+1Ch+var_C]
.text:0040D2C1                 mov     edi, [esp+1Ch+var_8]
.text:0040D2C5                 mov     ebp, [esp+1Ch+var_4]
.text:0040D2C9                 add     esp, 1Ch
.text:0040D2CC                 retn
.text:0040D2CC ; ---------------------------------------------------------------------------
.text:0040D2CD                 align 10h
.text:0040D2D0
.text:0040D2D0 loc_40D2D0:                             ; CODE XREF: sub_40D280+27↑j
.text:0040D2D0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040D2D7                 call    SetErrorMode
.text:0040D2DC                 sub     esp, 4
.text:0040D2DF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040D2E2                 call    GetFileAttributesA
.text:0040D2E7                 sub     esp, 4
.text:0040D2EA                 mov     edi, eax
.text:0040D2EC                 cmp     eax, 0FFFFFFFFh
.text:0040D2EF                 jz      short loc_40D333
.text:0040D2F1
.text:0040D2F1 loc_40D2F1:                             ; CODE XREF: sub_40D280+C6↓j
.text:0040D2F1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040D2F8                 call    SetErrorMode
.text:0040D2FD                 sub     esp, 4
.text:0040D300                 mov     eax, 0FFFFFFFFh
.text:0040D305                 inc     ebp
.text:0040D306                 jz      short loc_40D2B9
.text:0040D308                 test    esi, 10h
.text:0040D30E                 jz      short loc_40D318
.text:0040D310                 test    edi, 10h
.text:0040D316                 jz      short loc_40D326
.text:0040D318
.text:0040D318 loc_40D318:                             ; CODE XREF: sub_40D280+8E↑j
.text:0040D318                 and     esi, 2
.text:0040D31B                 jz      short loc_40D322
.text:0040D31D                 and     edi, 1
.text:0040D320                 jnz     short loc_40D326
.text:0040D322
.text:0040D322 loc_40D322:                             ; CODE XREF: sub_40D280+9B↑j
.text:0040D322                 xor     eax, eax
.text:0040D324                 jmp     short loc_40D2B9
.text:0040D326 ; ---------------------------------------------------------------------------
.text:0040D326
.text:0040D326 loc_40D326:                             ; CODE XREF: sub_40D280+96↑j
.text:0040D326                                         ; sub_40D280+A0↑j
.text:0040D326                 call    _errno
.text:0040D32B                 mov     dword ptr [eax], 0Dh
.text:0040D331                 jmp     short loc_40D2B4
.text:0040D333 ; ---------------------------------------------------------------------------
.text:0040D333
.text:0040D333 loc_40D333:                             ; CODE XREF: sub_40D280+6F↑j
.text:0040D333                 call    sub_40D0E0
.text:0040D338                 mov     ebp, eax
.text:0040D33A                 call    _errno
.text:0040D33F                 mov     [eax], ebp
.text:0040D341                 mov     ebp, 0FFFFFFFFh
.text:0040D346                 jmp     short loc_40D2F1
.text:0040D346 sub_40D280      endp
.text:0040D346
.text:0040D346 ; ---------------------------------------------------------------------------
.text:0040D348                 align 10h
.text:0040D350 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040D56F↓o
.text:0040D35C aLu             db '%lu',0              ; DATA XREF: .text:0040D57F↓o
.text:0040D360 asc_40D360      db ' ',0                ; DATA XREF: .text:loc_40D668↓o
.text:0040D362                 align 10h
.text:0040D370 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040D370                                         ; DATA XREF: .text:0040D69F↓o
.text:0040D390 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40D6AD↓o
.text:0040D39C aServer         db ' Server',0          ; DATA XREF: .text:0040D6D6↓o
.text:0040D39C                                         ; .text:loc_40D84E↓o
.text:0040D3A4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40D6E8↓o
.text:0040D3B5 aDatacenterServ db ' Datacenter Server',0
.text:0040D3B5                                         ; DATA XREF: .text:loc_40D6F2↓o
.text:0040D3C8 aStandardEditio db ' Standard Edition',0
.text:0040D3C8                                         ; DATA XREF: .text:0040D71A↓o
.text:0040D3DA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40D724↓o
.text:0040D3E7 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040D3E7                                         ; DATA XREF: .text:loc_40D72E↓o
.text:0040D3FB aDatacenterEdit db ' Datacenter Edition',0
.text:0040D3FB                                         ; DATA XREF: .text:loc_40D738↓o
.text:0040D40F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040D74B↓o
.text:0040D41D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40D755↓o
.text:0040D41D                                         ; .text:loc_40D860↓o
.text:0040D42B                 align 10h
.text:0040D430 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040D430                                         ; DATA XREF: .text:0040D782↓o
.text:0040D460 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040D7C9↓o
.text:0040D46C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040D804↓o
.text:0040D472 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040D81B↓o
.text:0040D47B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040D832↓o
.text:0040D484                 align 10h
.text:0040D490 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040D490                                         ; DATA XREF: .text:0040D9A7↓o
.text:0040D4B3                 db 1Dh dup(90h)
.text:0040D4D0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040D4D0                                         ; DATA XREF: .text:0040DA06↓o
.text:0040D4F6 ; ---------------------------------------------------------------------------
.text:0040D4F6
.text:0040D4F6 loc_40D4F6:                             ; DATA XREF: .text:loc_40DA71↓o
.text:0040D4F6                 and     [ebx+45h], dl
.text:0040D4F9                 add     [eax], ah
.text:0040D4FB                 push    ebx
.text:0040D4FC                 push    eax
.text:0040D4FD                 xor     [eax], eax
.text:0040D4FF
.text:0040D4FF loc_40D4FF:                             ; DATA XREF: .text:loc_40DAEB↓o
.text:0040D4FF                 and     [edi+53h], cl
.text:0040D502                 push    edx
.text:0040D503                 xor     al, [eax]
.text:0040D505                 lea     esi, [esi+0]
.text:0040D509                 lea     edi, [edi+0]
.text:0040D510                 push    edi
.text:0040D511                 push    esi
.text:0040D512                 push    ebx
.text:0040D513                 sub     esp, 130h
.text:0040D519                 mov     ebx, [esp+140h]
.text:0040D520                 call    sub_40DC20
.text:0040D525                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D52A                 cmp     eax, 1
.text:0040D52D                 jz      loc_40D9D0
.text:0040D533                 cmp     eax, 1
.text:0040D536                 jb      loc_40D9A6
.text:0040D53C                 cmp     eax, 2
.text:0040D53F                 jz      loc_40D5F0
.text:0040D545                 cmp     eax, 3
.text:0040D548                 jz      short loc_40D5AF
.text:0040D54A                 lea     esi, [esi+0]
.text:0040D550
.text:0040D550 loc_40D550:                             ; CODE XREF: .text:0040D5E5↓j
.text:0040D550                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040D556                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D55C
.text:0040D55C loc_40D55C:                             ; CODE XREF: .text:0040D9EF↓j
.text:0040D55C                 mov     [esp+10h], edx
.text:0040D560                 mov     ebx, [esp+144h]
.text:0040D567                 mov     [esp+0Ch], ecx
.text:0040D56B                 mov     [esp+8], eax
.text:0040D56F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040D577                 mov     [esp], ebx
.text:0040D57A                 call    sprintf
.text:0040D57F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040D587                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040D58D                 mov     ecx, [esp+148h]
.text:0040D594                 mov     [esp+8], edi
.text:0040D598                 mov     [esp], ecx
.text:0040D59B                 call    sprintf
.text:0040D5A0                 mov     eax, 1
.text:0040D5A5
.text:0040D5A5 loc_40D5A5:                             ; CODE XREF: .text:0040D79F↓j
.text:0040D5A5                                         ; .text:0040D7EC↓j
.text:0040D5A5                 add     esp, 130h
.text:0040D5AB                 pop     ebx
.text:0040D5AC                 pop     esi
.text:0040D5AD                 pop     edi
.text:0040D5AE                 retn
.text:0040D5AF ; ---------------------------------------------------------------------------
.text:0040D5AF
.text:0040D5AF loc_40D5AF:                             ; CODE XREF: .text:0040D548↑j
.text:0040D5AF                 mov     dword ptr [ebx], 7263694Dh
.text:0040D5B5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D5BC                 mov     dword ptr [ebx+8], 69572074h
.text:0040D5C3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D5CA                 mov     dword ptr [ebx+10h], 45432073h
.text:0040D5D1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040D5D7                 mov     esi, esi
.text:0040D5D9                 lea     edi, [edi+0]
.text:0040D5E0
.text:0040D5E0 loc_40D5E0:                             ; CODE XREF: .text:0040D688↓j
.text:0040D5E0                                         ; .text:0040D9C9↓j ...
.text:0040D5E0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D5E5                 jmp     loc_40D550
.text:0040D5E5 ; ---------------------------------------------------------------------------
.text:0040D5EA                 align 10h
.text:0040D5F0
.text:0040D5F0 loc_40D5F0:                             ; CODE XREF: .text:0040D53F↑j
.text:0040D5F0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040D5F6                 cmp     edx, 3
.text:0040D5F9                 mov     eax, edx
.text:0040D5FB                 jz      loc_40D965
.text:0040D601
.text:0040D601 loc_40D601:                             ; CODE XREF: .text:0040D96C↓j
.text:0040D601                 cmp     eax, 4
.text:0040D604                 jz      loc_40D925
.text:0040D60A
.text:0040D60A loc_40D60A:                             ; CODE XREF: .text:0040D92D↓j
.text:0040D60A                 cmp     eax, 4
.text:0040D60D                 ja      loc_40D872
.text:0040D613                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040D619                 test    ecx, ecx
.text:0040D61B                 jnz     loc_40D872
.text:0040D621                 mov     dword ptr [ebx], 7263694Dh
.text:0040D627                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D62E                 mov     dword ptr [ebx+8], 69572074h
.text:0040D635                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D63C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040D643
.text:0040D643 loc_40D643:                             ; CODE XREF: .text:0040D8E5↓j
.text:0040D643                 mov     byte ptr [ebx+14h], 0
.text:0040D647
.text:0040D647 loc_40D647:                             ; CODE XREF: .text:0040D875↓j
.text:0040D647                                         ; .text:0040D88C↓j ...
.text:0040D647                 mov     esi, dword_413080
.text:0040D64D                 test    esi, esi
.text:0040D64F                 jz      loc_40D762
.text:0040D655                 movzx   eax, ds:byte_4144EA
.text:0040D65C                 cmp     al, 1
.text:0040D65E                 jz      loc_40D742
.text:0040D664                 cmp     al, 3
.text:0040D666                 jz      short loc_40D68D
.text:0040D668
.text:0040D668 loc_40D668:                             ; CODE XREF: .text:0040D6AB↓j
.text:0040D668                                         ; .text:0040D6E6↓j ...
.text:0040D668                 mov     dword ptr [esp+4], offset asc_40D360 ; " "
.text:0040D670                 mov     [esp], ebx
.text:0040D673                 call    strcat
.text:0040D678                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040D680                 mov     [esp], ebx
.text:0040D683                 call    strcat
.text:0040D688                 jmp     loc_40D5E0
.text:0040D68D ; ---------------------------------------------------------------------------
.text:0040D68D
.text:0040D68D loc_40D68D:                             ; CODE XREF: .text:0040D666↑j
.text:0040D68D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040D694                 jz      short loc_40D6B6
.text:0040D696
.text:0040D696 loc_40D696:                             ; CODE XREF: .text:0040D6C2↓j
.text:0040D696                 test    byte ptr ds:word_4144E8, 2
.text:0040D69D                 jz      short loc_40D6AD
.text:0040D69F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040D6A6
.text:0040D6A6 loc_40D6A6:                             ; CODE XREF: .text:0040D6B4↓j
.text:0040D6A6                 call    printf
.text:0040D6AB                 jmp     short loc_40D668
.text:0040D6AD ; ---------------------------------------------------------------------------
.text:0040D6AD
.text:0040D6AD loc_40D6AD:                             ; CODE XREF: .text:0040D69D↑j
.text:0040D6AD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040D6B4                 jmp     short loc_40D6A6
.text:0040D6B6 ; ---------------------------------------------------------------------------
.text:0040D6B6
.text:0040D6B6 loc_40D6B6:                             ; CODE XREF: .text:0040D694↑j
.text:0040D6B6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040D6BB                 cmp     eax, 2
.text:0040D6BE                 jz      short loc_40D700
.text:0040D6C0                 test    eax, eax
.text:0040D6C2                 jnz     short loc_40D696
.text:0040D6C4                 cmp     byte ptr ds:word_4144E8, 0
.text:0040D6CB                 js      short loc_40D6F2
.text:0040D6CD                 test    byte ptr ds:word_4144E8, 2
.text:0040D6D4                 jnz     short loc_40D6E8
.text:0040D6D6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040D6DE
.text:0040D6DE loc_40D6DE:                             ; CODE XREF: .text:0040D6F0↓j
.text:0040D6DE                                         ; .text:0040D6FA↓j ...
.text:0040D6DE                 mov     [esp], ebx
.text:0040D6E1                 call    strcat
.text:0040D6E6                 jmp     short loc_40D668
.text:0040D6E8 ; ---------------------------------------------------------------------------
.text:0040D6E8
.text:0040D6E8 loc_40D6E8:                             ; CODE XREF: .text:0040D6D4↑j
.text:0040D6E8                                         ; .text:0040D849↓j
.text:0040D6E8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040D6F0                 jmp     short loc_40D6DE
.text:0040D6F2 ; ---------------------------------------------------------------------------
.text:0040D6F2
.text:0040D6F2 loc_40D6F2:                             ; CODE XREF: .text:0040D6CB↑j
.text:0040D6F2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040D6FA                 jmp     short loc_40D6DE
.text:0040D6FA ; ---------------------------------------------------------------------------
.text:0040D6FC                 align 10h
.text:0040D700
.text:0040D700 loc_40D700:                             ; CODE XREF: .text:0040D6BE↑j
.text:0040D700                 cmp     byte ptr ds:word_4144E8, 0
.text:0040D707                 js      short loc_40D738
.text:0040D709                 movzx   eax, ds:word_4144E8
.text:0040D710                 test    al, 2
.text:0040D712                 jnz     short loc_40D72E
.text:0040D714                 cmp     ax, 400h
.text:0040D718                 jz      short loc_40D724
.text:0040D71A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040D722                 jmp     short loc_40D6DE
.text:0040D724 ; ---------------------------------------------------------------------------
.text:0040D724
.text:0040D724 loc_40D724:                             ; CODE XREF: .text:0040D718↑j
.text:0040D724                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040D72C                 jmp     short loc_40D6DE
.text:0040D72E ; ---------------------------------------------------------------------------
.text:0040D72E
.text:0040D72E loc_40D72E:                             ; CODE XREF: .text:0040D712↑j
.text:0040D72E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040D736                 jmp     short loc_40D6DE
.text:0040D738 ; ---------------------------------------------------------------------------
.text:0040D738
.text:0040D738 loc_40D738:                             ; CODE XREF: .text:0040D707↑j
.text:0040D738                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040D740                 jmp     short loc_40D6DE
.text:0040D742 ; ---------------------------------------------------------------------------
.text:0040D742
.text:0040D742 loc_40D742:                             ; CODE XREF: .text:0040D65E↑j
.text:0040D742                 test    byte ptr ds:word_4144E8+1, 2
.text:0040D749                 jz      short loc_40D755
.text:0040D74B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040D753                 jmp     short loc_40D6DE
.text:0040D755 ; ---------------------------------------------------------------------------
.text:0040D755
.text:0040D755 loc_40D755:                             ; CODE XREF: .text:0040D749↑j
.text:0040D755                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040D75D                 jmp     loc_40D6DE
.text:0040D762 ; ---------------------------------------------------------------------------
.text:0040D762
.text:0040D762 loc_40D762:                             ; CODE XREF: .text:0040D64F↑j
.text:0040D762                 mov     dword ptr [esp+28h], 0FFh
.text:0040D76A                 lea     edx, [esp+2Ch]
.text:0040D76E                 mov     [esp+10h], edx
.text:0040D772                 mov     dword ptr [esp+0Ch], 1
.text:0040D77A                 mov     dword ptr [esp+8], 0
.text:0040D782                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040D78A                 mov     dword ptr [esp], 80000002h
.text:0040D791                 call    RegOpenKeyExA
.text:0040D796                 mov     edi, eax
.text:0040D798                 sub     esp, 14h
.text:0040D79B                 xor     eax, eax
.text:0040D79D                 test    edi, edi
.text:0040D79F                 jnz     loc_40D5A5
.text:0040D7A5                 mov     dword ptr [esp+0Ch], 0
.text:0040D7AD                 mov     edi, [esp+2Ch]
.text:0040D7B1                 lea     esi, [esp+28h]
.text:0040D7B5                 mov     [esp+14h], esi
.text:0040D7B9                 lea     esi, [esp+30h]
.text:0040D7BD                 mov     [esp+10h], esi
.text:0040D7C1                 mov     dword ptr [esp+8], 0
.text:0040D7C9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040D7D1                 mov     [esp], edi
.text:0040D7D4                 call    RegQueryValueExA
.text:0040D7D9                 sub     esp, 18h
.text:0040D7DC                 test    eax, eax
.text:0040D7DE                 jnz     short loc_40D7EA
.text:0040D7E0                 cmp     dword ptr [esp+28h], 0FFh
.text:0040D7E8                 jbe     short loc_40D7F1
.text:0040D7EA
.text:0040D7EA loc_40D7EA:                             ; CODE XREF: .text:0040D7DE↑j
.text:0040D7EA                 xor     eax, eax
.text:0040D7EC                 jmp     loc_40D5A5
.text:0040D7F1 ; ---------------------------------------------------------------------------
.text:0040D7F1
.text:0040D7F1 loc_40D7F1:                             ; CODE XREF: .text:0040D7E8↑j
.text:0040D7F1                 mov     edx, [esp+2Ch]
.text:0040D7F5                 mov     [esp], edx
.text:0040D7F8                 call    RegCloseKey
.text:0040D7FD                 sub     esp, 4
.text:0040D800                 mov     [esp+4], esi
.text:0040D804                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040D80B                 call    lstrcmpiA
.text:0040D810                 sub     esp, 8
.text:0040D813                 test    eax, eax
.text:0040D815                 jz      short loc_40D860
.text:0040D817
.text:0040D817 loc_40D817:                             ; CODE XREF: .text:0040D870↓j
.text:0040D817                 mov     [esp+4], esi
.text:0040D81B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040D822                 call    lstrcmpiA
.text:0040D827                 sub     esp, 8
.text:0040D82A                 test    eax, eax
.text:0040D82C                 jz      short loc_40D84E
.text:0040D82E
.text:0040D82E loc_40D82E:                             ; CODE XREF: .text:0040D85E↓j
.text:0040D82E                 mov     [esp+4], esi
.text:0040D832                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040D839                 call    lstrcmpiA
.text:0040D83E                 sub     esp, 8
.text:0040D841                 test    eax, eax
.text:0040D843                 jnz     loc_40D668
.text:0040D849                 jmp     loc_40D6E8
.text:0040D84E ; ---------------------------------------------------------------------------
.text:0040D84E
.text:0040D84E loc_40D84E:                             ; CODE XREF: .text:0040D82C↑j
.text:0040D84E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040D856                 mov     [esp], ebx
.text:0040D859                 call    strcat
.text:0040D85E                 jmp     short loc_40D82E
.text:0040D860 ; ---------------------------------------------------------------------------
.text:0040D860
.text:0040D860 loc_40D860:                             ; CODE XREF: .text:0040D815↑j
.text:0040D860                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040D868                 mov     [esp], ebx
.text:0040D86B                 call    strcat
.text:0040D870                 jmp     short loc_40D817
.text:0040D872 ; ---------------------------------------------------------------------------
.text:0040D872
.text:0040D872 loc_40D872:                             ; CODE XREF: .text:0040D60D↑j
.text:0040D872                                         ; .text:0040D61B↑j
.text:0040D872                 cmp     eax, 5
.text:0040D875                 jnz     loc_40D647
.text:0040D87B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040D880                 cmp     eax, 2
.text:0040D883                 jz      short loc_40D8EA
.text:0040D885                 cmp     eax, 1
.text:0040D888                 jz      short loc_40D8C3
.text:0040D88A                 test    eax, eax
.text:0040D88C                 jnz     loc_40D647
.text:0040D892                 mov     dword ptr [ebx], 7263694Dh
.text:0040D898                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D89F                 mov     dword ptr [ebx+8], 69572074h
.text:0040D8A6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D8AD                 mov     dword ptr [ebx+10h], 30322073h
.text:0040D8B4                 mov     word ptr [ebx+14h], 3030h
.text:0040D8BA                 mov     byte ptr [ebx+16h], 0
.text:0040D8BE                 jmp     loc_40D647
.text:0040D8C3 ; ---------------------------------------------------------------------------
.text:0040D8C3
.text:0040D8C3 loc_40D8C3:                             ; CODE XREF: .text:0040D888↑j
.text:0040D8C3                 mov     dword ptr [ebx], 7263694Dh
.text:0040D8C9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D8D0                 mov     dword ptr [ebx+8], 69572074h
.text:0040D8D7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D8DE                 mov     dword ptr [ebx+10h], 50582073h
.text:0040D8E5                 jmp     loc_40D643
.text:0040D8EA ; ---------------------------------------------------------------------------
.text:0040D8EA
.text:0040D8EA loc_40D8EA:                             ; CODE XREF: .text:0040D883↑j
.text:0040D8EA                 mov     dword ptr [ebx], 7263694Dh
.text:0040D8F0                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D8F7                 mov     dword ptr [ebx+8], 69572074h
.text:0040D8FE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D905                 mov     dword ptr [ebx+10h], 65532073h
.text:0040D90C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040D913                 mov     dword ptr [ebx+18h], 30303220h
.text:0040D91A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040D920                 jmp     loc_40D647
.text:0040D925 ; ---------------------------------------------------------------------------
.text:0040D925
.text:0040D925 loc_40D925:                             ; CODE XREF: .text:0040D604↑j
.text:0040D925                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D92B                 test    edx, edx
.text:0040D92D                 jnz     loc_40D60A
.text:0040D933                 mov     dword ptr [ebx], 7263694Dh
.text:0040D939                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D940                 mov     dword ptr [ebx+8], 69572074h
.text:0040D947                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D94E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040D955                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040D95C                 mov     byte ptr [ebx+18h], 0
.text:0040D960                 jmp     loc_40D647
.text:0040D965 ; ---------------------------------------------------------------------------
.text:0040D965
.text:0040D965 loc_40D965:                             ; CODE XREF: .text:0040D5FB↑j
.text:0040D965                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040D96C                 jnz     loc_40D601
.text:0040D972                 mov     dword ptr [ebx], 7263694Dh
.text:0040D978                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D97F                 mov     dword ptr [ebx+8], 69572074h
.text:0040D986                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D98D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040D994                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040D99B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040D9A1                 jmp     loc_40D647
.text:0040D9A6 ; ---------------------------------------------------------------------------
.text:0040D9A6
.text:0040D9A6 loc_40D9A6:                             ; CODE XREF: .text:0040D536↑j
.text:0040D9A6                 cld
.text:0040D9A7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040D9AC                 mov     ecx, 8
.text:0040D9B1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040D9B8                 mov     edi, ebx
.text:0040D9BA                 rep movsd
.text:0040D9BC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040D9C3                 mov     [edi+2], dl
.text:0040D9C6                 mov     [edi], si
.text:0040D9C9                 jmp     loc_40D5E0
.text:0040D9C9 ; ---------------------------------------------------------------------------
.text:0040D9CE                 align 10h
.text:0040D9D0
.text:0040D9D0 loc_40D9D0:                             ; CODE XREF: .text:0040D52D↑j
.text:0040D9D0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040D9D6                 cmp     ecx, 4
.text:0040D9D9                 jz      loc_40DA90
.text:0040D9DF
.text:0040D9DF loc_40D9DF:                             ; CODE XREF: .text:0040DAE6↓j
.text:0040D9DF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D9E5
.text:0040D9E5 loc_40D9E5:                             ; CODE XREF: .text:0040DA98↓j
.text:0040D9E5                 cmp     ecx, 4
.text:0040D9E8                 jz      short loc_40D9F4
.text:0040D9EA
.text:0040D9EA loc_40D9EA:                             ; CODE XREF: .text:0040D9FC↓j
.text:0040D9EA                                         ; .text:0040DA01↓j
.text:0040D9EA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D9EF                 jmp     loc_40D55C
.text:0040D9F4 ; ---------------------------------------------------------------------------
.text:0040D9F4
.text:0040D9F4 loc_40D9F4:                             ; CODE XREF: .text:0040D9E8↑j
.text:0040D9F4                 cmp     edx, 0Ah
.text:0040D9F7                 jz      short loc_40DA21
.text:0040D9F9
.text:0040D9F9 loc_40D9F9:                             ; CODE XREF: .text:0040DA6F↓j
.text:0040D9F9                 cmp     ecx, 4
.text:0040D9FC                 jnz     short loc_40D9EA
.text:0040D9FE                 cmp     edx, 5Ah ; 'Z'
.text:0040DA01                 jnz     short loc_40D9EA
.text:0040DA03                 cld
.text:0040DA04                 mov     edi, ebx
.text:0040DA06                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040DA0B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040DA12                 mov     ecx, 9
.text:0040DA17                 rep movsd
.text:0040DA19                 mov     [edi], bx
.text:0040DA1C                 jmp     loc_40D5E0
.text:0040DA21 ; ---------------------------------------------------------------------------
.text:0040DA21
.text:0040DA21 loc_40DA21:                             ; CODE XREF: .text:0040D9F7↑j
.text:0040DA21                 mov     dword ptr [ebx], 7263694Dh
.text:0040DA27                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DA2E                 mov     dword ptr [ebx+8], 69572074h
.text:0040DA35                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DA3C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040DA43                 mov     byte ptr [ebx+14h], 0
.text:0040DA47                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040DA4D                 lea     edi, [edx-7CFh]
.text:0040DA53                 cmp     edi, 0B7h ; '·'
.text:0040DA59                 jbe     short loc_40DA83
.text:0040DA5B                 cmp     edx, 886h
.text:0040DA61                 ja      short loc_40DA71
.text:0040DA63
.text:0040DA63 loc_40DA63:                             ; CODE XREF: .text:0040DA81↓j
.text:0040DA63                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040DA69                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040DA6F                 jmp     short loc_40D9F9
.text:0040DA71 ; ---------------------------------------------------------------------------
.text:0040DA71
.text:0040DA71 loc_40DA71:                             ; CODE XREF: .text:0040DA61↑j
.text:0040DA71                 mov     dword ptr [esp+4], offset loc_40D4F6
.text:0040DA79
.text:0040DA79 loc_40DA79:                             ; CODE XREF: .text:0040DA8B↓j
.text:0040DA79                 mov     [esp], ebx
.text:0040DA7C                 call    strcat
.text:0040DA81                 jmp     short loc_40DA63
.text:0040DA83 ; ---------------------------------------------------------------------------
.text:0040DA83
.text:0040DA83 loc_40DA83:                             ; CODE XREF: .text:0040DA59↑j
.text:0040DA83                 mov     dword ptr [esp+4], 40D4FAh
.text:0040DA8B                 jmp     short loc_40DA79
.text:0040DA8B ; ---------------------------------------------------------------------------
.text:0040DA8D                 align 10h
.text:0040DA90
.text:0040DA90 loc_40DA90:                             ; CODE XREF: .text:0040D9D9↑j
.text:0040DA90                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040DA96                 test    edx, edx
.text:0040DA98                 jnz     loc_40D9E5
.text:0040DA9E                 mov     dword ptr [ebx], 7263694Dh
.text:0040DAA4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DAAB                 mov     dword ptr [ebx+8], 69572074h
.text:0040DAB2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DAB9                 mov     dword ptr [ebx+10h], 35392073h
.text:0040DAC0                 mov     byte ptr [ebx+14h], 0
.text:0040DAC4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040DACA                 lea     ecx, [edx-3B7h]
.text:0040DAD0                 cmp     ecx, 81h
.text:0040DAD6                 jbe     short loc_40DAFD
.text:0040DAD8                 cmp     edx, 438h
.text:0040DADE                 ja      short loc_40DAEB
.text:0040DAE0
.text:0040DAE0 loc_40DAE0:                             ; CODE XREF: .text:0040DAFB↓j
.text:0040DAE0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040DAE6                 jmp     loc_40D9DF
.text:0040DAEB ; ---------------------------------------------------------------------------
.text:0040DAEB
.text:0040DAEB loc_40DAEB:                             ; CODE XREF: .text:0040DADE↑j
.text:0040DAEB                 mov     dword ptr [esp+4], offset loc_40D4FF
.text:0040DAF3
.text:0040DAF3 loc_40DAF3:                             ; CODE XREF: .text:0040DB05↓j
.text:0040DAF3                 mov     [esp], ebx
.text:0040DAF6                 call    strcat
.text:0040DAFB                 jmp     short loc_40DAE0
.text:0040DAFD ; ---------------------------------------------------------------------------
.text:0040DAFD
.text:0040DAFD loc_40DAFD:                             ; CODE XREF: .text:0040DAD6↑j
.text:0040DAFD                 mov     dword ptr [esp+4], 40D4FAh
.text:0040DB05                 jmp     short loc_40DAF3
.text:0040DB05 ; ---------------------------------------------------------------------------
.text:0040DB07                 align 10h
.text:0040DB10
.text:0040DB10 ; =============== S U B R O U T I N E =======================================
.text:0040DB10
.text:0040DB10
.text:0040DB10 sub_40DB10      proc near               ; CODE XREF: .text:0040C12E↑p
.text:0040DB10                                         ; sub_40C5B0+12A↑p
.text:0040DB10                 sub     esp, 0Ch
.text:0040DB13                 call    sub_40DC20
.text:0040DB18                 mov     eax, ds:dword_414440
.text:0040DB1D                 add     esp, 0Ch
.text:0040DB20                 retn
.text:0040DB20 sub_40DB10      endp
.text:0040DB20
.text:0040DB21 ; ---------------------------------------------------------------------------
.text:0040DB21                 jmp     short loc_40DB30
.text:0040DB21 ; ---------------------------------------------------------------------------
.text:0040DB23                 align 10h
.text:0040DB30
.text:0040DB30 loc_40DB30:                             ; CODE XREF: .text:0040DB21↑j
.text:0040DB30                 sub     esp, 0Ch
.text:0040DB33                 call    sub_40DC20
.text:0040DB38                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040DB3D                 add     esp, 0Ch
.text:0040DB40                 retn
.text:0040DB41 ; ---------------------------------------------------------------------------
.text:0040DB41                 jmp     short loc_40DB50
.text:0040DB41 ; ---------------------------------------------------------------------------
.text:0040DB43                 align 10h
.text:0040DB50
.text:0040DB50 loc_40DB50:                             ; CODE XREF: .text:0040DB41↑j
.text:0040DB50                 sub     esp, 0Ch
.text:0040DB53                 call    sub_40DC20
.text:0040DB58                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040DB5D                 add     esp, 0Ch
.text:0040DB60                 retn
.text:0040DB61 ; ---------------------------------------------------------------------------
.text:0040DB61                 jmp     short loc_40DB70
.text:0040DB61 ; ---------------------------------------------------------------------------
.text:0040DB63                 align 10h
.text:0040DB70
.text:0040DB70 loc_40DB70:                             ; CODE XREF: .text:0040DB61↑j
.text:0040DB70                 sub     esp, 0Ch
.text:0040DB73                 call    sub_40DC20
.text:0040DB78                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DB7D                 add     esp, 0Ch
.text:0040DB80                 retn
.text:0040DB81 ; ---------------------------------------------------------------------------
.text:0040DB81                 jmp     short loc_40DB90
.text:0040DB81 ; ---------------------------------------------------------------------------
.text:0040DB83                 align 10h
.text:0040DB90
.text:0040DB90 loc_40DB90:                             ; CODE XREF: .text:0040DB81↑j
.text:0040DB90                 sub     esp, 0Ch
.text:0040DB93                 call    GetVersion
.text:0040DB98                 shr     eax, 10h
.text:0040DB9B                 add     esp, 0Ch
.text:0040DB9E                 retn
.text:0040DB9E ; ---------------------------------------------------------------------------
.text:0040DB9F                 align 10h
.text:0040DBA0                 sub     esp, 0Ch
.text:0040DBA3                 call    sub_40DC20
.text:0040DBA8                 xor     eax, eax
.text:0040DBAA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040DBB1                 setz    al
.text:0040DBB4                 add     esp, 0Ch
.text:0040DBB7                 retn
.text:0040DBB7 ; ---------------------------------------------------------------------------
.text:0040DBB8                 align 10h
.text:0040DBC0
.text:0040DBC0 ; =============== S U B R O U T I N E =======================================
.text:0040DBC0
.text:0040DBC0
.text:0040DBC0 sub_40DBC0      proc near               ; CODE XREF: .text:loc_40B8A0↑p
.text:0040DBC0                                         ; .text:loc_40C114↑p ...
.text:0040DBC0                 sub     esp, 0Ch
.text:0040DBC3                 call    sub_40DC20
.text:0040DBC8                 xor     eax, eax
.text:0040DBCA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040DBD1                 setz    al
.text:0040DBD4                 add     esp, 0Ch
.text:0040DBD7                 retn
.text:0040DBD7 sub_40DBC0      endp
.text:0040DBD7
.text:0040DBD7 ; ---------------------------------------------------------------------------
.text:0040DBD8                 align 10h
.text:0040DBE0                 sub     esp, 0Ch
.text:0040DBE3                 call    sub_40DC20
.text:0040DBE8                 xor     eax, eax
.text:0040DBEA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040DBF1                 setz    al
.text:0040DBF4                 add     esp, 0Ch
.text:0040DBF7                 retn
.text:0040DBF7 ; ---------------------------------------------------------------------------
.text:0040DBF8                 align 10h
.text:0040DC00                 sub     esp, 0Ch
.text:0040DC03                 call    sub_40DC20
.text:0040DC08                 xor     eax, eax
.text:0040DC0A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040DC11                 setz    al
.text:0040DC14                 add     esp, 0Ch
.text:0040DC17                 retn
.text:0040DC17 ; ---------------------------------------------------------------------------
.text:0040DC18                 align 10h
.text:0040DC20
.text:0040DC20 ; =============== S U B R O U T I N E =======================================
.text:0040DC20
.text:0040DC20
.text:0040DC20 sub_40DC20      proc near               ; CODE XREF: .text:0040D520↑p
.text:0040DC20                                         ; sub_40DB10+3↑p ...
.text:0040DC20
.text:0040DC20 lpVersionInformation= dword ptr -0BCh
.text:0040DC20 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040DC20
.text:0040DC20                 sub     esp, 0BCh
.text:0040DC26                 mov     edx, ds:dword_4144F0
.text:0040DC2C                 test    edx, edx
.text:0040DC2E                 jz      short loc_40DC40
.text:0040DC30
.text:0040DC30 loc_40DC30:                             ; CODE XREF: sub_40DC20+7B↓j
.text:0040DC30                 mov     edx, 1
.text:0040DC35
.text:0040DC35 loc_40DC35:                             ; CODE XREF: sub_40DC20+217↓j
.text:0040DC35                 mov     eax, edx
.text:0040DC37                 add     esp, 0BCh
.text:0040DC3D                 retn
.text:0040DC3D ; ---------------------------------------------------------------------------
.text:0040DC3E                 align 10h
.text:0040DC40
.text:0040DC40 loc_40DC40:                             ; CODE XREF: sub_40DC20+E↑j
.text:0040DC40                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040DC47                 mov     edx, 9Ch ; 'œ'
.text:0040DC4C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040DC52                 call    GetVersionExA
.text:0040DC57                 sub     esp, 4
.text:0040DC5A                 test    eax, eax
.text:0040DC5C                 jz      loc_40DE14
.text:0040DC62
.text:0040DC62 loc_40DC62:                             ; CODE XREF: sub_40DC20+245↓j
.text:0040DC62                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040DC69                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040DC6E                 cmp     eax, 1
.text:0040DC71                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040DC77                 jz      loc_40DD60
.text:0040DC7D                 cmp     eax, 1
.text:0040DC80                 jb      loc_40DD50
.text:0040DC86                 cmp     eax, 2
.text:0040DC89                 jz      short loc_40DCAA
.text:0040DC8B                 cmp     eax, 3
.text:0040DC8E                 jz      short loc_40DC9D
.text:0040DC90
.text:0040DC90 loc_40DC90:                             ; CODE XREF: sub_40DC20+88↓j
.text:0040DC90                                         ; sub_40DC20+C0↓j ...
.text:0040DC90                 mov     edx, 1
.text:0040DC95                 mov     ds:dword_4144F0, edx
.text:0040DC9B                 jmp     short loc_40DC30
.text:0040DC9D ; ---------------------------------------------------------------------------
.text:0040DC9D
.text:0040DC9D loc_40DC9D:                             ; CODE XREF: sub_40DC20+6E↑j
.text:0040DC9D                 mov     ecx, 17h
.text:0040DCA2
.text:0040DCA2 loc_40DCA2:                             ; CODE XREF: sub_40DC20+1A7↓j
.text:0040DCA2                 mov     ds:dword_414440, ecx
.text:0040DCA8                 jmp     short loc_40DC90
.text:0040DCAA ; ---------------------------------------------------------------------------
.text:0040DCAA
.text:0040DCAA loc_40DCAA:                             ; CODE XREF: sub_40DC20+69↑j
.text:0040DCAA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040DCAF                 cmp     eax, 3
.text:0040DCB2                 jz      short loc_40DD2B
.text:0040DCB4                 cmp     eax, 4
.text:0040DCB7                 jz      short loc_40DD1A
.text:0040DCB9
.text:0040DCB9 loc_40DCB9:                             ; CODE XREF: sub_40DC20+102↓j
.text:0040DCB9                 cmp     eax, 4
.text:0040DCBC                 ja      short loc_40DCE2
.text:0040DCBE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040DCC4                 test    ecx, ecx
.text:0040DCC6                 jnz     short loc_40DCE2
.text:0040DCC8                 mov     edx, 1Eh
.text:0040DCCD
.text:0040DCCD loc_40DCCD:                             ; CODE XREF: sub_40DC20+DF↓j
.text:0040DCCD                 mov     ds:dword_414440, edx
.text:0040DCD3
.text:0040DCD3 loc_40DCD3:                             ; CODE XREF: sub_40DC20+C5↓j
.text:0040DCD3                                         ; sub_40DC20+D8↓j ...
.text:0040DCD3                 movzx   ecx, ds:word_4144E4
.text:0040DCDA                 add     ds:dword_414440, ecx
.text:0040DCE0                 jmp     short loc_40DC90
.text:0040DCE2 ; ---------------------------------------------------------------------------
.text:0040DCE2
.text:0040DCE2 loc_40DCE2:                             ; CODE XREF: sub_40DC20+9C↑j
.text:0040DCE2                                         ; sub_40DC20+A6↑j
.text:0040DCE2                 cmp     eax, 5
.text:0040DCE5                 jnz     short loc_40DCD3
.text:0040DCE7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DCEC                 cmp     eax, 2
.text:0040DCEF                 jz      short loc_40DD0E
.text:0040DCF1                 cmp     eax, 1
.text:0040DCF4                 jz      short loc_40DD01
.text:0040DCF6                 test    eax, eax
.text:0040DCF8                 jnz     short loc_40DCD3
.text:0040DCFA                 mov     edx, 32h ; '2'
.text:0040DCFF                 jmp     short loc_40DCCD
.text:0040DD01 ; ---------------------------------------------------------------------------
.text:0040DD01
.text:0040DD01 loc_40DD01:                             ; CODE XREF: sub_40DC20+D4↑j
.text:0040DD01                 mov     ecx, 3Ch ; '<'
.text:0040DD06
.text:0040DD06 loc_40DD06:                             ; CODE XREF: sub_40DC20+122↓j
.text:0040DD06                 mov     ds:dword_414440, ecx
.text:0040DD0C                 jmp     short loc_40DCD3
.text:0040DD0E ; ---------------------------------------------------------------------------
.text:0040DD0E
.text:0040DD0E loc_40DD0E:                             ; CODE XREF: sub_40DC20+CF↑j
.text:0040DD0E                 mov     eax, 46h ; 'F'
.text:0040DD13
.text:0040DD13 loc_40DD13:                             ; CODE XREF: sub_40DC20+109↓j
.text:0040DD13                                         ; sub_40DC20+129↓j
.text:0040DD13                 mov     ds:dword_414440, eax
.text:0040DD18                 jmp     short loc_40DCD3
.text:0040DD1A ; ---------------------------------------------------------------------------
.text:0040DD1A
.text:0040DD1A loc_40DD1A:                             ; CODE XREF: sub_40DC20+97↑j
.text:0040DD1A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040DD20                 test    ecx, ecx
.text:0040DD22                 jnz     short loc_40DCB9
.text:0040DD24                 mov     eax, 28h ; '('
.text:0040DD29                 jmp     short loc_40DD13
.text:0040DD2B ; ---------------------------------------------------------------------------
.text:0040DD2B
.text:0040DD2B loc_40DD2B:                             ; CODE XREF: sub_40DC20+92↑j
.text:0040DD2B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DD30                 cmp     eax, 33h ; '3'
.text:0040DD33                 jz      short loc_40DD44
.text:0040DD35                 cmp     eax, 5
.text:0040DD38                 setz    cl
.text:0040DD3B                 movzx   edx, cl
.text:0040DD3E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040DD42                 jmp     short loc_40DD06
.text:0040DD44 ; ---------------------------------------------------------------------------
.text:0040DD44
.text:0040DD44 loc_40DD44:                             ; CODE XREF: sub_40DC20+113↑j
.text:0040DD44                 mov     eax, 24h ; '$'
.text:0040DD49                 jmp     short loc_40DD13
.text:0040DD49 ; ---------------------------------------------------------------------------
.text:0040DD4B                 align 10h
.text:0040DD50
.text:0040DD50 loc_40DD50:                             ; CODE XREF: sub_40DC20+60↑j
.text:0040DD50                 mov     edx, 2
.text:0040DD55                 mov     ds:dword_414440, edx
.text:0040DD5B                 jmp     loc_40DC90
.text:0040DD60 ; ---------------------------------------------------------------------------
.text:0040DD60
.text:0040DD60 loc_40DD60:                             ; CODE XREF: sub_40DC20+57↑j
.text:0040DD60                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040DD66                 cmp     ecx, 4
.text:0040DD69                 jnz     loc_40DC90
.text:0040DD6F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DD74                 test    eax, eax
.text:0040DD76                 jnz     short loc_40DD9A
.text:0040DD78                 mov     eax, 0Ah
.text:0040DD7D                 mov     ds:dword_414440, eax
.text:0040DD82                 lea     eax, [edx-3B7h]
.text:0040DD88                 cmp     eax, 81h
.text:0040DD8D                 ja      short loc_40DE05
.text:0040DD8F                 mov     edx, 0Bh
.text:0040DD94
.text:0040DD94 loc_40DD94:                             ; CODE XREF: sub_40DC20+1F2↓j
.text:0040DD94                 mov     ds:dword_414440, edx
.text:0040DD9A
.text:0040DD9A loc_40DD9A:                             ; CODE XREF: sub_40DC20+156↑j
.text:0040DD9A                                         ; sub_40DC20+1EB↓j
.text:0040DD9A                 cmp     ecx, 4
.text:0040DD9D                 jnz     loc_40DC90
.text:0040DDA3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040DDAA                 jz      short loc_40DDCC
.text:0040DDAC
.text:0040DDAC loc_40DDAC:                             ; CODE XREF: sub_40DC20+1D4↓j
.text:0040DDAC                                         ; sub_40DC20+1DC↓j
.text:0040DDAC                 cmp     ecx, 4
.text:0040DDAF                 jnz     loc_40DC90
.text:0040DDB5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040DDBC                 jnz     loc_40DC90
.text:0040DDC2                 mov     ecx, 12h
.text:0040DDC7                 jmp     loc_40DCA2
.text:0040DDCC ; ---------------------------------------------------------------------------
.text:0040DDCC
.text:0040DDCC loc_40DDCC:                             ; CODE XREF: sub_40DC20+18A↑j
.text:0040DDCC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040DDD2                 mov     eax, 0Eh
.text:0040DDD7                 mov     ds:dword_414440, eax
.text:0040DDDC                 lea     eax, [edx-7CFh]
.text:0040DDE2                 cmp     eax, 0B7h ; '·'
.text:0040DDE7                 ja      short loc_40DDF6
.text:0040DDE9                 mov     edx, 0Fh
.text:0040DDEE
.text:0040DDEE loc_40DDEE:                             ; CODE XREF: sub_40DC20+1E3↓j
.text:0040DDEE                 mov     ds:dword_414440, edx
.text:0040DDF4                 jmp     short loc_40DDAC
.text:0040DDF6 ; ---------------------------------------------------------------------------
.text:0040DDF6
.text:0040DDF6 loc_40DDF6:                             ; CODE XREF: sub_40DC20+1C7↑j
.text:0040DDF6                 cmp     edx, 886h
.text:0040DDFC                 jbe     short loc_40DDAC
.text:0040DDFE                 mov     edx, 10h
.text:0040DE03                 jmp     short loc_40DDEE
.text:0040DE05 ; ---------------------------------------------------------------------------
.text:0040DE05
.text:0040DE05 loc_40DE05:                             ; CODE XREF: sub_40DC20+16D↑j
.text:0040DE05                 cmp     edx, 438h
.text:0040DE0B                 jbe     short loc_40DD9A
.text:0040DE0D                 mov     edx, 0Ch
.text:0040DE12                 jmp     short loc_40DD94
.text:0040DE14 ; ---------------------------------------------------------------------------
.text:0040DE14
.text:0040DE14 loc_40DE14:                             ; CODE XREF: sub_40DC20+3C↑j
.text:0040DE14                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040DE1C                 xor     edx, edx
.text:0040DE1E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040DE22                 mov     dword_413080, edx
.text:0040DE28                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040DE2B                 call    GetVersionExA
.text:0040DE30                 sub     esp, 4
.text:0040DE33                 xor     edx, edx
.text:0040DE35                 test    eax, eax
.text:0040DE37                 jz      loc_40DC35
.text:0040DE3D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040DE41                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040DE45                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040DE4B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040DE4F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040DE55                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040DE59                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040DE5F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040DE65                 jmp     loc_40DC62
.text:0040DE65 sub_40DC20      endp
.text:0040DE65
.text:0040DE65 ; ---------------------------------------------------------------------------
.text:0040DE6A                 align 10h
.text:0040DE70 aNotset         db 'notset',0           ; DATA XREF: .data:off_413090↓o
.text:0040DE70                                         ; .data:off_413094↓o
.text:0040DE77 ; ---------------------------------------------------------------------------
.text:0040DE77
.text:0040DE77 loc_40DE77:                             ; DATA XREF: .text:loc_40DF15↓o
.text:0040DE77                 jb      short loc_40DEF0
.text:0040DE79                 add     [eax], ah
.text:0040DE7B                 or      [eax], eax
.text:0040DE7D
.text:0040DE7D loc_40DE7D:                             ; DATA XREF: .text:0040DF68↓o
.text:0040DE7D                                         ; .text:0040DFCE↓o ...
.text:0040DE7D                 add     [eax], ah
.text:0040DE7F                 and     eax, 64252064h
.text:0040DE84                 and     [eax], al
.text:0040DE86                 lea     esi, [esi+0]
.text:0040DE89                 lea     edi, [edi+0]
.text:0040DE90                 push    ebp
.text:0040DE91                 push    edi
.text:0040DE92                 push    esi
.text:0040DE93                 push    ebx
.text:0040DE94                 sub     esp, 14Ch
.text:0040DE9A                 mov     edx, off_413090 ; "notset"
.text:0040DEA0                 mov     edi, [esp+164h]
.text:0040DEA7                 mov     ebp, [esp+168h]
.text:0040DEAE                 mov     [esp+4], edx
.text:0040DEB2                 mov     edx, off_413094 ; "notset"
.text:0040DEB8                 mov     [esp], edx
.text:0040DEBB                 call    strcmp
.text:0040DEC0                 test    eax, eax
.text:0040DEC2                 jz      loc_40E2B0
.text:0040DEC8
.text:0040DEC8 loc_40DEC8:                             ; CODE XREF: .text:0040E2FC↓j
.text:0040DEC8                 lea     ebx, [esp+20h]
.text:0040DECC                 lea     esi, [esi+0]
.text:0040DED0
.text:0040DED0 loc_40DED0:                             ; CODE XREF: .text:0040DF06↓j
.text:0040DED0                 mov     [esp+4], ebx
.text:0040DED4                 mov     ecx, off_413094 ; "notset"
.text:0040DEDA                 mov     [esp], ecx
.text:0040DEDD                 call    loc_40C650
.text:0040DEE2                 test    eax, eax
.text:0040DEE4                 jns     short loc_40DF15
.text:0040DEE6                 mov     eax, off_413094 ; "notset"
.text:0040DEEB                 cmp     byte ptr [eax], 0
.text:0040DEEE                 jz      short loc_40DF08
.text:0040DEF0
.text:0040DEF0 loc_40DEF0:                             ; CODE XREF: .text:loc_40DE77↑j
.text:0040DEF0                 mov     dword ptr [esp+4], 0
.text:0040DEF8                 mov     [esp], eax
.text:0040DEFB                 call    strchr
.text:0040DF00                 inc     eax
.text:0040DF01                 mov     off_413094, eax ; "notset"
.text:0040DF06                 jmp     short loc_40DED0
.text:0040DF08 ; ---------------------------------------------------------------------------
.text:0040DF08
.text:0040DF08 loc_40DF08:                             ; CODE XREF: .text:0040DEEE↑j
.text:0040DF08                 xor     eax, eax
.text:0040DF0A
.text:0040DF0A loc_40DF0A:                             ; CODE XREF: .text:0040E0CC↓j
.text:0040DF0A                 add     esp, 14Ch
.text:0040DF10                 pop     ebx
.text:0040DF11                 pop     esi
.text:0040DF12                 pop     edi
.text:0040DF13                 pop     ebp
.text:0040DF14                 retn
.text:0040DF15 ; ---------------------------------------------------------------------------
.text:0040DF15
.text:0040DF15 loc_40DF15:                             ; CODE XREF: .text:0040DEE4↑j
.text:0040DF15                 mov     dword ptr [edi+0Ch], offset loc_40DE77
.text:0040DF1C                 lea     ecx, [esp+0D6h]
.text:0040DF23                 lea     edx, [esp+6Ch]
.text:0040DF27                 mov     [edi+4], ecx
.text:0040DF2A                 lea     ebx, [esp+7Ch]
.text:0040DF2E                 mov     [edi+8], edx
.text:0040DF31                 mov     [edi], ebx
.text:0040DF33                 mov     [esp], ebp
.text:0040DF36                 mov     [esp+4], edi
.text:0040DF3A                 call    ___addmntentstr
.text:0040DF3F                 mov     [esp], ebp
.text:0040DF42                 mov     dword ptr [esp+4], 40DE7Ah
.text:0040DF4A                 call    strspn
.text:0040DF4F                 mov     dword ptr [esp+4], 0
.text:0040DF57                 mov     ebx, off_413094 ; "notset"
.text:0040DF5D                 lea     esi, [eax+ebp]
.text:0040DF60                 mov     [esp+1Ch], esi
.text:0040DF64                 lea     ebp, [esp+1Ch]
.text:0040DF68                 mov     esi, offset loc_40DE7D
.text:0040DF6D                 mov     [esp], ebx
.text:0040DF70                 call    strchr
.text:0040DF75                 mov     dword ptr [esp+4], 40DE7Ah
.text:0040DF7D                 inc     eax
.text:0040DF7E                 mov     off_413094, eax ; "notset"
.text:0040DF83                 mov     [esp], ebp
.text:0040DF86                 call    sub_40F6A0
.text:0040DF8B                 test    eax, eax
.text:0040DF8D                 mov     ebx, eax
.text:0040DF8F                 jz      short loc_40DFB8
.text:0040DF91                 mov     edx, eax
.text:0040DF93                 mov     ecx, eax
.text:0040DF95                 lea     esi, [esi+0]
.text:0040DF99                 lea     edi, [edi+0]
.text:0040DFA0
.text:0040DFA0 loc_40DFA0:                             ; CODE XREF: .text:0040DFB6↓j
.text:0040DFA0                 movzx   eax, byte ptr [edx]
.text:0040DFA3                 cmp     al, 5Ch ; '\'
.text:0040DFA5                 jz      loc_40E254
.text:0040DFAB
.text:0040DFAB loc_40DFAB:                             ; CODE XREF: .text:0040E25C↓j
.text:0040DFAB                                         ; .text:0040E26A↓j ...
.text:0040DFAB                 mov     [ecx], al
.text:0040DFAD
.text:0040DFAD loc_40DFAD:                             ; CODE XREF: .text:0040E27E↓j
.text:0040DFAD                 inc     ecx
.text:0040DFAE
.text:0040DFAE loc_40DFAE:                             ; CODE XREF: .text:0040E296↓j
.text:0040DFAE                 movzx   eax, byte ptr [edx]
.text:0040DFB1                 mov     esi, ebx
.text:0040DFB3                 inc     edx
.text:0040DFB4                 test    al, al
.text:0040DFB6                 jnz     short loc_40DFA0
.text:0040DFB8
.text:0040DFB8 loc_40DFB8:                             ; CODE XREF: .text:0040DF8F↑j
.text:0040DFB8                 mov     [edi], esi
.text:0040DFBA                 mov     eax, [esp+1Ch]
.text:0040DFBE                 test    eax, eax
.text:0040DFC0                 jnz     loc_40E23B
.text:0040DFC6
.text:0040DFC6 loc_40DFC6:                             ; CODE XREF: .text:0040E24F↓j
.text:0040DFC6                 mov     dword ptr [esp+4], 40DE7Ah
.text:0040DFCE                 mov     esi, offset loc_40DE7D
.text:0040DFD3                 mov     [esp], ebp
.text:0040DFD6                 call    sub_40F6A0
.text:0040DFDB                 test    eax, eax
.text:0040DFDD                 mov     ebx, eax
.text:0040DFDF                 jz      short loc_40E008
.text:0040DFE1                 mov     edx, eax
.text:0040DFE3                 mov     ecx, eax
.text:0040DFE5                 lea     esi, [esi+0]
.text:0040DFE9                 lea     edi, [edi+0]
.text:0040DFF0
.text:0040DFF0 loc_40DFF0:                             ; CODE XREF: .text:0040E006↓j
.text:0040DFF0                 movzx   eax, byte ptr [edx]
.text:0040DFF3                 cmp     al, 5Ch ; '\'
.text:0040DFF5                 jz      loc_40E1E3
.text:0040DFFB
.text:0040DFFB loc_40DFFB:                             ; CODE XREF: .text:0040E1EB↓j
.text:0040DFFB                                         ; .text:0040E1F9↓j ...
.text:0040DFFB                 mov     [ecx], al
.text:0040DFFD
.text:0040DFFD loc_40DFFD:                             ; CODE XREF: .text:0040E20D↓j
.text:0040DFFD                 inc     ecx
.text:0040DFFE
.text:0040DFFE loc_40DFFE:                             ; CODE XREF: .text:0040E225↓j
.text:0040DFFE                 movzx   eax, byte ptr [edx]
.text:0040E001                 mov     esi, ebx
.text:0040E003                 inc     edx
.text:0040E004                 test    al, al
.text:0040E006                 jnz     short loc_40DFF0
.text:0040E008
.text:0040E008 loc_40E008:                             ; CODE XREF: .text:0040DFDF↑j
.text:0040E008                 mov     [edi+4], esi
.text:0040E00B                 mov     eax, [esp+1Ch]
.text:0040E00F                 test    eax, eax
.text:0040E011                 jnz     loc_40E1CA
.text:0040E017
.text:0040E017 loc_40E017:                             ; CODE XREF: .text:0040E1DE↓j
.text:0040E017                 mov     dword ptr [esp+4], 40DE7Ah
.text:0040E01F                 mov     esi, offset loc_40DE7D
.text:0040E024                 mov     [esp], ebp
.text:0040E027                 call    sub_40F6A0
.text:0040E02C                 test    eax, eax
.text:0040E02E                 mov     ebx, eax
.text:0040E030                 jz      short loc_40E058
.text:0040E032                 mov     edx, eax
.text:0040E034                 mov     ecx, eax
.text:0040E036                 lea     esi, [esi+0]
.text:0040E039                 lea     edi, [edi+0]
.text:0040E040
.text:0040E040 loc_40E040:                             ; CODE XREF: .text:0040E056↓j
.text:0040E040                 movzx   eax, byte ptr [edx]
.text:0040E043                 cmp     al, 5Ch ; '\'
.text:0040E045                 jz      loc_40E172
.text:0040E04B
.text:0040E04B loc_40E04B:                             ; CODE XREF: .text:0040E17A↓j
.text:0040E04B                                         ; .text:0040E188↓j ...
.text:0040E04B                 mov     [ecx], al
.text:0040E04D
.text:0040E04D loc_40E04D:                             ; CODE XREF: .text:0040E19C↓j
.text:0040E04D                 inc     ecx
.text:0040E04E
.text:0040E04E loc_40E04E:                             ; CODE XREF: .text:0040E1B4↓j
.text:0040E04E                 movzx   eax, byte ptr [edx]
.text:0040E051                 mov     esi, ebx
.text:0040E053                 inc     edx
.text:0040E054                 test    al, al
.text:0040E056                 jnz     short loc_40E040
.text:0040E058
.text:0040E058 loc_40E058:                             ; CODE XREF: .text:0040E030↑j
.text:0040E058                 mov     [edi+8], esi
.text:0040E05B                 mov     eax, [esp+1Ch]
.text:0040E05F                 test    eax, eax
.text:0040E061                 jnz     loc_40E159
.text:0040E067
.text:0040E067 loc_40E067:                             ; CODE XREF: .text:0040E16D↓j
.text:0040E067                 mov     dword ptr [esp+4], 40DE7Ah
.text:0040E06F                 mov     esi, offset loc_40DE7D
.text:0040E074                 mov     [esp], ebp
.text:0040E077                 call    sub_40F6A0
.text:0040E07C                 test    eax, eax
.text:0040E07E                 mov     ebx, eax
.text:0040E080                 jz      short loc_40E0A4
.text:0040E082                 mov     edx, eax
.text:0040E084                 mov     ecx, eax
.text:0040E086                 lea     esi, [esi+0]
.text:0040E089                 lea     edi, [edi+0]
.text:0040E090
.text:0040E090 loc_40E090:                             ; CODE XREF: .text:0040E0A2↓j
.text:0040E090                 movzx   eax, byte ptr [edx]
.text:0040E093                 cmp     al, 5Ch ; '\'
.text:0040E095                 jz      short loc_40E105
.text:0040E097
.text:0040E097 loc_40E097:                             ; CODE XREF: .text:0040E10D↓j
.text:0040E097                                         ; .text:0040E117↓j ...
.text:0040E097                 mov     [ecx], al
.text:0040E099
.text:0040E099 loc_40E099:                             ; CODE XREF: .text:0040E12B↓j
.text:0040E099                 inc     ecx
.text:0040E09A
.text:0040E09A loc_40E09A:                             ; CODE XREF: .text:0040E143↓j
.text:0040E09A                 movzx   eax, byte ptr [edx]
.text:0040E09D                 mov     esi, ebx
.text:0040E09F                 inc     edx
.text:0040E0A0                 test    al, al
.text:0040E0A2                 jnz     short loc_40E090
.text:0040E0A4
.text:0040E0A4 loc_40E0A4:                             ; CODE XREF: .text:0040E080↑j
.text:0040E0A4                 mov     [edi+0Ch], esi
.text:0040E0A7                 xor     eax, eax
.text:0040E0A9                 mov     edx, [esp+1Ch]
.text:0040E0AD                 test    edx, edx
.text:0040E0AF                 jnz     short loc_40E0E5
.text:0040E0B1
.text:0040E0B1 loc_40E0B1:                             ; CODE XREF: .text:0040E103↓j
.text:0040E0B1                 cmp     eax, 1
.text:0040E0B4                 jz      short loc_40E0DC
.text:0040E0B6                 cmp     eax, 1
.text:0040E0B9                 jle     short loc_40E0D1
.text:0040E0BB
.text:0040E0BB loc_40E0BB:                             ; CODE XREF: .text:0040E0D3↓j
.text:0040E0BB                                         ; .text:0040E0E3↓j
.text:0040E0BB                 mov     edx, [esp+160h]
.text:0040E0C2                 mov     [esp], edx
.text:0040E0C5                 call    sub_40F640
.text:0040E0CA                 mov     eax, edi
.text:0040E0CC                 jmp     loc_40DF0A
.text:0040E0D1 ; ---------------------------------------------------------------------------
.text:0040E0D1
.text:0040E0D1 loc_40E0D1:                             ; CODE XREF: .text:0040E0B9↑j
.text:0040E0D1                 test    eax, eax
.text:0040E0D3                 jnz     short loc_40E0BB
.text:0040E0D5                 mov     dword ptr [edi+10h], 0
.text:0040E0DC
.text:0040E0DC loc_40E0DC:                             ; CODE XREF: .text:0040E0B4↑j
.text:0040E0DC                 mov     dword ptr [edi+14h], 0
.text:0040E0E3                 jmp     short loc_40E0BB
.text:0040E0E5 ; ---------------------------------------------------------------------------
.text:0040E0E5
.text:0040E0E5 loc_40E0E5:                             ; CODE XREF: .text:0040E0AF↑j
.text:0040E0E5                 mov     dword ptr [esp+4], 40DE7Eh
.text:0040E0ED                 lea     esi, [edi+14h]
.text:0040E0F0                 lea     ebp, [edi+10h]
.text:0040E0F3                 mov     [esp+0Ch], esi
.text:0040E0F7                 mov     [esp+8], ebp
.text:0040E0FB                 mov     [esp], edx
.text:0040E0FE                 call    sscanf
.text:0040E103                 jmp     short loc_40E0B1
.text:0040E105 ; ---------------------------------------------------------------------------
.text:0040E105
.text:0040E105 loc_40E105:                             ; CODE XREF: .text:0040E095↑j
.text:0040E105                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E109                 jz      short loc_40E148
.text:0040E10B
.text:0040E10B loc_40E10B:                             ; CODE XREF: .text:0040E14C↓j
.text:0040E10B                                         ; .text:0040E152↓j
.text:0040E10B                 cmp     al, 5Ch ; '\'
.text:0040E10D                 jnz     short loc_40E097
.text:0040E10F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E113                 jz      short loc_40E130
.text:0040E115
.text:0040E115 loc_40E115:                             ; CODE XREF: .text:0040E134↓j
.text:0040E115                                         ; .text:0040E13A↓j
.text:0040E115                 cmp     al, 5Ch ; '\'
.text:0040E117                 jnz     loc_40E097
.text:0040E11D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040E121                 jnz     loc_40E097
.text:0040E127                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040E12A                 inc     edx
.text:0040E12B                 jmp     loc_40E099
.text:0040E130 ; ---------------------------------------------------------------------------
.text:0040E130
.text:0040E130 loc_40E130:                             ; CODE XREF: .text:0040E113↑j
.text:0040E130                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040E134                 jnz     short loc_40E115
.text:0040E136                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040E13A                 jnz     short loc_40E115
.text:0040E13C                 mov     byte ptr [ecx], 9
.text:0040E13F
.text:0040E13F loc_40E13F:                             ; CODE XREF: .text:0040E157↓j
.text:0040E13F                 inc     ecx
.text:0040E140                 add     edx, 3
.text:0040E143                 jmp     loc_40E09A
.text:0040E148 ; ---------------------------------------------------------------------------
.text:0040E148
.text:0040E148 loc_40E148:                             ; CODE XREF: .text:0040E109↑j
.text:0040E148                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040E14C                 jnz     short loc_40E10B
.text:0040E14E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040E152                 jnz     short loc_40E10B
.text:0040E154                 mov     byte ptr [ecx], 20h ; ' '
.text:0040E157                 jmp     short loc_40E13F
.text:0040E159 ; ---------------------------------------------------------------------------
.text:0040E159
.text:0040E159 loc_40E159:                             ; CODE XREF: .text:0040E061↑j
.text:0040E159                 mov     dword ptr [esp+4], 40DE7Ah
.text:0040E161                 mov     [esp], eax
.text:0040E164                 call    strspn
.text:0040E169                 add     [esp+1Ch], eax
.text:0040E16D                 jmp     loc_40E067
.text:0040E172 ; ---------------------------------------------------------------------------
.text:0040E172
.text:0040E172 loc_40E172:                             ; CODE XREF: .text:0040E045↑j
.text:0040E172                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E176                 jz      short loc_40E1B9
.text:0040E178
.text:0040E178 loc_40E178:                             ; CODE XREF: .text:0040E1BD↓j
.text:0040E178                                         ; .text:0040E1C3↓j
.text:0040E178                 cmp     al, 5Ch ; '\'
.text:0040E17A                 jnz     loc_40E04B
.text:0040E180                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E184                 jz      short loc_40E1A1
.text:0040E186
.text:0040E186 loc_40E186:                             ; CODE XREF: .text:0040E1A5↓j
.text:0040E186                                         ; .text:0040E1AB↓j
.text:0040E186                 cmp     al, 5Ch ; '\'
.text:0040E188                 jnz     loc_40E04B
.text:0040E18E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040E192                 jnz     loc_40E04B
.text:0040E198                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040E19B                 inc     edx
.text:0040E19C                 jmp     loc_40E04D
.text:0040E1A1 ; ---------------------------------------------------------------------------
.text:0040E1A1
.text:0040E1A1 loc_40E1A1:                             ; CODE XREF: .text:0040E184↑j
.text:0040E1A1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040E1A5                 jnz     short loc_40E186
.text:0040E1A7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040E1AB                 jnz     short loc_40E186
.text:0040E1AD                 mov     byte ptr [ecx], 9
.text:0040E1B0
.text:0040E1B0 loc_40E1B0:                             ; CODE XREF: .text:0040E1C8↓j
.text:0040E1B0                 inc     ecx
.text:0040E1B1                 add     edx, 3
.text:0040E1B4                 jmp     loc_40E04E
.text:0040E1B9 ; ---------------------------------------------------------------------------
.text:0040E1B9
.text:0040E1B9 loc_40E1B9:                             ; CODE XREF: .text:0040E176↑j
.text:0040E1B9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040E1BD                 jnz     short loc_40E178
.text:0040E1BF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040E1C3                 jnz     short loc_40E178
.text:0040E1C5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040E1C8                 jmp     short loc_40E1B0
.text:0040E1CA ; ---------------------------------------------------------------------------
.text:0040E1CA
.text:0040E1CA loc_40E1CA:                             ; CODE XREF: .text:0040E011↑j
.text:0040E1CA                 mov     dword ptr [esp+4], 40DE7Ah
.text:0040E1D2                 mov     [esp], eax
.text:0040E1D5                 call    strspn
.text:0040E1DA                 add     [esp+1Ch], eax
.text:0040E1DE                 jmp     loc_40E017
.text:0040E1E3 ; ---------------------------------------------------------------------------
.text:0040E1E3
.text:0040E1E3 loc_40E1E3:                             ; CODE XREF: .text:0040DFF5↑j
.text:0040E1E3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E1E7                 jz      short loc_40E22A
.text:0040E1E9
.text:0040E1E9 loc_40E1E9:                             ; CODE XREF: .text:0040E22E↓j
.text:0040E1E9                                         ; .text:0040E234↓j
.text:0040E1E9                 cmp     al, 5Ch ; '\'
.text:0040E1EB                 jnz     loc_40DFFB
.text:0040E1F1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E1F5                 jz      short loc_40E212
.text:0040E1F7
.text:0040E1F7 loc_40E1F7:                             ; CODE XREF: .text:0040E216↓j
.text:0040E1F7                                         ; .text:0040E21C↓j
.text:0040E1F7                 cmp     al, 5Ch ; '\'
.text:0040E1F9                 jnz     loc_40DFFB
.text:0040E1FF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040E203                 jnz     loc_40DFFB
.text:0040E209                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040E20C                 inc     edx
.text:0040E20D                 jmp     loc_40DFFD
.text:0040E212 ; ---------------------------------------------------------------------------
.text:0040E212
.text:0040E212 loc_40E212:                             ; CODE XREF: .text:0040E1F5↑j
.text:0040E212                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040E216                 jnz     short loc_40E1F7
.text:0040E218                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040E21C                 jnz     short loc_40E1F7
.text:0040E21E                 mov     byte ptr [ecx], 9
.text:0040E221
.text:0040E221 loc_40E221:                             ; CODE XREF: .text:0040E239↓j
.text:0040E221                 inc     ecx
.text:0040E222                 add     edx, 3
.text:0040E225                 jmp     loc_40DFFE
.text:0040E22A ; ---------------------------------------------------------------------------
.text:0040E22A
.text:0040E22A loc_40E22A:                             ; CODE XREF: .text:0040E1E7↑j
.text:0040E22A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040E22E                 jnz     short loc_40E1E9
.text:0040E230                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040E234                 jnz     short loc_40E1E9
.text:0040E236                 mov     byte ptr [ecx], 20h ; ' '
.text:0040E239                 jmp     short loc_40E221
.text:0040E23B ; ---------------------------------------------------------------------------
.text:0040E23B
.text:0040E23B loc_40E23B:                             ; CODE XREF: .text:0040DFC0↑j
.text:0040E23B                 mov     dword ptr [esp+4], 40DE7Ah
.text:0040E243                 mov     [esp], eax
.text:0040E246                 call    strspn
.text:0040E24B                 add     [esp+1Ch], eax
.text:0040E24F                 jmp     loc_40DFC6
.text:0040E254 ; ---------------------------------------------------------------------------
.text:0040E254
.text:0040E254 loc_40E254:                             ; CODE XREF: .text:0040DFA5↑j
.text:0040E254                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E258                 jz      short loc_40E29B
.text:0040E25A
.text:0040E25A loc_40E25A:                             ; CODE XREF: .text:0040E29F↓j
.text:0040E25A                                         ; .text:0040E2A5↓j
.text:0040E25A                 cmp     al, 5Ch ; '\'
.text:0040E25C                 jnz     loc_40DFAB
.text:0040E262                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E266                 jz      short loc_40E283
.text:0040E268
.text:0040E268 loc_40E268:                             ; CODE XREF: .text:0040E287↓j
.text:0040E268                                         ; .text:0040E28D↓j
.text:0040E268                 cmp     al, 5Ch ; '\'
.text:0040E26A                 jnz     loc_40DFAB
.text:0040E270                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040E274                 jnz     loc_40DFAB
.text:0040E27A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040E27D                 inc     edx
.text:0040E27E                 jmp     loc_40DFAD
.text:0040E283 ; ---------------------------------------------------------------------------
.text:0040E283
.text:0040E283 loc_40E283:                             ; CODE XREF: .text:0040E266↑j
.text:0040E283                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040E287                 jnz     short loc_40E268
.text:0040E289                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040E28D                 jnz     short loc_40E268
.text:0040E28F                 mov     byte ptr [ecx], 9
.text:0040E292
.text:0040E292 loc_40E292:                             ; CODE XREF: .text:0040E2AA↓j
.text:0040E292                 inc     ecx
.text:0040E293                 add     edx, 3
.text:0040E296                 jmp     loc_40DFAE
.text:0040E29B ; ---------------------------------------------------------------------------
.text:0040E29B
.text:0040E29B loc_40E29B:                             ; CODE XREF: .text:0040E258↑j
.text:0040E29B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040E29F                 jnz     short loc_40E25A
.text:0040E2A1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040E2A5                 jnz     short loc_40E25A
.text:0040E2A7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040E2AA                 jmp     short loc_40E292
.text:0040E2AA ; ---------------------------------------------------------------------------
.text:0040E2AC                 align 10h
.text:0040E2B0
.text:0040E2B0 loc_40E2B0:                             ; CODE XREF: .text:0040DEC2↑j
.text:0040E2B0                 mov     dword ptr [esp+4], 0
.text:0040E2B8                 mov     dword ptr [esp], 0
.text:0040E2BF                 call    GetLogicalDriveStringsA
.text:0040E2C4                 sub     esp, 8
.text:0040E2C7                 mov     ebx, eax
.text:0040E2C9                 call    GetProcessHeap
.text:0040E2CE                 mov     [esp], eax
.text:0040E2D1                 mov     [esp+8], ebx
.text:0040E2D5                 mov     dword ptr [esp+4], 0
.text:0040E2DD                 call    HeapAlloc
.text:0040E2E2                 sub     esp, 0Ch
.text:0040E2E5                 mov     esi, eax
.text:0040E2E7                 mov     [esp+4], eax
.text:0040E2EB                 mov     [esp], ebx
.text:0040E2EE                 call    GetLogicalDriveStringsA
.text:0040E2F3                 mov     off_413094, esi ; "notset"
.text:0040E2F9                 sub     esp, 8
.text:0040E2FC                 jmp     loc_40DEC8
.text:0040E2FC ; ---------------------------------------------------------------------------
.text:0040E301 ; const char aSSSSDD[]
.text:0040E301 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040E301                                         ; DATA XREF: .text:0040E440↓o
.text:0040E301                                         ; ___addmntentstr+F0↓o
.text:0040E314                 align 10h
.text:0040E320                 push    esi
.text:0040E321                 push    ebx
.text:0040E322                 sub     esp, 44h
.text:0040E325                 mov     ebx, [esp+54h]
.text:0040E329                 mov     esi, [esp+50h]
.text:0040E32D                 mov     edx, [ebx]
.text:0040E32F                 mov     [esp+20h], edx
.text:0040E333                 mov     ecx, [ebx+4]
.text:0040E336                 mov     [esp+24h], ecx
.text:0040E33A                 mov     edx, [ebx+8]
.text:0040E33D                 mov     [esp+28h], edx
.text:0040E341                 mov     ecx, [ebx+0Ch]
.text:0040E344                 mov     [esp+2Ch], ecx
.text:0040E348                 mov     edx, [ebx+10h]
.text:0040E34B                 mov     [esp+30h], edx
.text:0040E34F                 mov     ecx, [ebx+14h]
.text:0040E352                 mov     dword ptr [esp+8], 2
.text:0040E35A                 mov     dword ptr [esp+4], 0
.text:0040E362                 mov     [esp+34h], ecx
.text:0040E366                 mov     [esp], esi
.text:0040E369                 call    sub_40F630
.text:0040E36E ; ---------------------------------------------------------------------------
.text:0040E36E                 test    eax, eax
.text:0040E370                 mov     edx, 1
.text:0040E375                 jnz     loc_40E475
.text:0040E37B                 mov     ebx, [esp+20h]
.text:0040E37F                 mov     edx, ebx
.text:0040E381                 movzx   eax, byte ptr [ebx]
.text:0040E384                 test    al, al
.text:0040E386                 jz      short loc_40E3B0
.text:0040E388                 nop
.text:0040E389                 lea     esi, [esi+0]
.text:0040E390
.text:0040E390 loc_40E390:                             ; CODE XREF: .text:0040E3AE↓j
.text:0040E390                 cmp     al, 20h ; ' '
.text:0040E392                 jz      loc_40E5EA
.text:0040E398                 cmp     al, 9
.text:0040E39A                 jz      loc_40E5EA
.text:0040E3A0                 cmp     al, 5Ch ; '\'
.text:0040E3A2                 jz      loc_40E5EA
.text:0040E3A8                 inc     ebx
.text:0040E3A9                 movzx   eax, byte ptr [ebx]
.text:0040E3AC                 test    al, al
.text:0040E3AE                 jnz     short loc_40E390
.text:0040E3B0
.text:0040E3B0 loc_40E3B0:                             ; CODE XREF: .text:0040E386↑j
.text:0040E3B0                                         ; .text:0040E5EC↓j ...
.text:0040E3B0                 mov     ebx, [esp+24h]
.text:0040E3B4                 mov     edx, ebx
.text:0040E3B6                 movzx   eax, byte ptr [ebx]
.text:0040E3B9                 test    al, al
.text:0040E3BB                 jz      short loc_40E3E0
.text:0040E3BD                 lea     esi, [esi+0]
.text:0040E3C0
.text:0040E3C0 loc_40E3C0:                             ; CODE XREF: .text:0040E3DE↓j
.text:0040E3C0                 cmp     al, 20h ; ' '
.text:0040E3C2                 jz      loc_40E56A
.text:0040E3C8                 cmp     al, 9
.text:0040E3CA                 jz      loc_40E56A
.text:0040E3D0                 cmp     al, 5Ch ; '\'
.text:0040E3D2                 jz      loc_40E56A
.text:0040E3D8                 inc     ebx
.text:0040E3D9                 movzx   eax, byte ptr [ebx]
.text:0040E3DC                 test    al, al
.text:0040E3DE                 jnz     short loc_40E3C0
.text:0040E3E0
.text:0040E3E0 loc_40E3E0:                             ; CODE XREF: .text:0040E3BB↑j
.text:0040E3E0                                         ; .text:0040E56C↓j ...
.text:0040E3E0                 mov     ebx, [esp+28h]
.text:0040E3E4                 mov     edx, ebx
.text:0040E3E6                 movzx   eax, byte ptr [ebx]
.text:0040E3E9                 test    al, al
.text:0040E3EB                 jz      short loc_40E410
.text:0040E3ED                 lea     esi, [esi+0]
.text:0040E3F0
.text:0040E3F0 loc_40E3F0:                             ; CODE XREF: .text:0040E40E↓j
.text:0040E3F0                 cmp     al, 20h ; ' '
.text:0040E3F2                 jz      loc_40E4EE
.text:0040E3F8                 cmp     al, 9
.text:0040E3FA                 jz      loc_40E4EE
.text:0040E400                 cmp     al, 5Ch ; '\'
.text:0040E402                 jz      loc_40E4EE
.text:0040E408                 inc     ebx
.text:0040E409                 movzx   eax, byte ptr [ebx]
.text:0040E40C                 test    al, al
.text:0040E40E                 jnz     short loc_40E3F0
.text:0040E410
.text:0040E410 loc_40E410:                             ; CODE XREF: .text:0040E3EB↑j
.text:0040E410                                         ; .text:0040E4F0↓j ...
.text:0040E410                 mov     edx, [esp+2Ch]
.text:0040E414                 mov     ebx, edx
.text:0040E416                 movzx   eax, byte ptr [edx]
.text:0040E419                 test    al, al
.text:0040E41B                 jz      short loc_40E434
.text:0040E41D                 lea     esi, [esi+0]
.text:0040E420
.text:0040E420 loc_40E420:                             ; CODE XREF: .text:0040E432↓j
.text:0040E420                 cmp     al, 20h ; ' '
.text:0040E422                 jz      short loc_40E47D
.text:0040E424                 cmp     al, 9
.text:0040E426                 jz      short loc_40E47D
.text:0040E428                 cmp     al, 5Ch ; '\'
.text:0040E42A                 jz      short loc_40E47D
.text:0040E42C                 inc     ebx
.text:0040E42D                 movzx   eax, byte ptr [ebx]
.text:0040E430                 test    al, al
.text:0040E432                 jnz     short loc_40E420
.text:0040E434
.text:0040E434 loc_40E434:                             ; CODE XREF: .text:0040E41B↑j
.text:0040E434                                         ; .text:0040E47F↓j ...
.text:0040E434                 mov     [esp+14h], edx
.text:0040E438                 mov     ecx, [esp+34h]
.text:0040E43C                 mov     ebx, [esp+30h]
.text:0040E440                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040E448                 mov     edx, [esp+24h]
.text:0040E44C                 mov     [esp+1Ch], ecx
.text:0040E450                 mov     ecx, [esp+28h]
.text:0040E454                 mov     [esp+18h], ebx
.text:0040E458                 mov     ebx, [esp+20h]
.text:0040E45C                 mov     [esp+0Ch], edx
.text:0040E460                 mov     [esp+10h], ecx
.text:0040E464                 mov     [esp+8], ebx
.text:0040E468                 mov     [esp], esi
.text:0040E46B                 call    fprintf
.text:0040E470                 mov     edx, eax
.text:0040E472                 shr     edx, 1Fh
.text:0040E475
.text:0040E475 loc_40E475:                             ; CODE XREF: .text:0040E375↑j
.text:0040E475                 add     esp, 44h
.text:0040E478                 mov     eax, edx
.text:0040E47A                 pop     ebx
.text:0040E47B                 pop     esi
.text:0040E47C                 retn
.text:0040E47D ; ---------------------------------------------------------------------------
.text:0040E47D
.text:0040E47D loc_40E47D:                             ; CODE XREF: .text:0040E422↑j
.text:0040E47D                                         ; .text:0040E426↑j ...
.text:0040E47D                 test    al, al
.text:0040E47F                 jz      short loc_40E434
.text:0040E481                 mov     [esp], edx
.text:0040E484                 mov     ebx, edx
.text:0040E486                 call    strlen
.text:0040E48B                 lea     edx, ds:1[eax*4]
.text:0040E492                 mov     [esp], edx
.text:0040E495                 call    malloc
.text:0040E49A                 mov     [esp+2Ch], eax
.text:0040E49E                 mov     edx, eax
.text:0040E4A0
.text:0040E4A0 loc_40E4A0:                             ; CODE XREF: .text:0040E4B8↓j
.text:0040E4A0                 movzx   eax, byte ptr [ebx]
.text:0040E4A3                 cmp     al, 20h ; ' '
.text:0040E4A5                 jz      short loc_40E4DD
.text:0040E4A7                 cmp     al, 9
.text:0040E4A9                 jz      short loc_40E4CC
.text:0040E4AB                 cmp     al, 5Ch ; '\'
.text:0040E4AD                 jz      short loc_40E4C3
.text:0040E4AF                 mov     [edx], al
.text:0040E4B1
.text:0040E4B1 loc_40E4B1:                             ; CODE XREF: .text:0040E4CA↓j
.text:0040E4B1                                         ; .text:0040E4DB↓j ...
.text:0040E4B1                 movzx   ecx, byte ptr [ebx]
.text:0040E4B4                 inc     edx
.text:0040E4B5                 inc     ebx
.text:0040E4B6                 test    cl, cl
.text:0040E4B8                 jnz     short loc_40E4A0
.text:0040E4BA                 mov     edx, [esp+2Ch]
.text:0040E4BE                 jmp     loc_40E434
.text:0040E4C3 ; ---------------------------------------------------------------------------
.text:0040E4C3
.text:0040E4C3 loc_40E4C3:                             ; CODE XREF: .text:0040E4AD↑j
.text:0040E4C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E4C6                 inc     edx
.text:0040E4C7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E4CA                 jmp     short loc_40E4B1
.text:0040E4CC ; ---------------------------------------------------------------------------
.text:0040E4CC
.text:0040E4CC loc_40E4CC:                             ; CODE XREF: .text:0040E4A9↑j
.text:0040E4CC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E4CF                 inc     edx
.text:0040E4D0                 mov     byte ptr [edx], 30h ; '0'
.text:0040E4D3                 inc     edx
.text:0040E4D4                 mov     byte ptr [edx], 31h ; '1'
.text:0040E4D7                 inc     edx
.text:0040E4D8                 mov     byte ptr [edx], 32h ; '2'
.text:0040E4DB                 jmp     short loc_40E4B1
.text:0040E4DD ; ---------------------------------------------------------------------------
.text:0040E4DD
.text:0040E4DD loc_40E4DD:                             ; CODE XREF: .text:0040E4A5↑j
.text:0040E4DD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E4E0                 inc     edx
.text:0040E4E1                 mov     byte ptr [edx], 30h ; '0'
.text:0040E4E4                 inc     edx
.text:0040E4E5                 mov     byte ptr [edx], 34h ; '4'
.text:0040E4E8                 inc     edx
.text:0040E4E9                 mov     byte ptr [edx], 30h ; '0'
.text:0040E4EC                 jmp     short loc_40E4B1
.text:0040E4EE ; ---------------------------------------------------------------------------
.text:0040E4EE
.text:0040E4EE loc_40E4EE:                             ; CODE XREF: .text:0040E3F2↑j
.text:0040E4EE                                         ; .text:0040E3FA↑j ...
.text:0040E4EE                 test    al, al
.text:0040E4F0                 jz      loc_40E410
.text:0040E4F6                 mov     [esp], edx
.text:0040E4F9                 mov     ebx, edx
.text:0040E4FB                 call    strlen
.text:0040E500                 lea     edx, ds:1[eax*4]
.text:0040E507                 mov     [esp], edx
.text:0040E50A                 call    malloc
.text:0040E50F                 mov     [esp+28h], eax
.text:0040E513                 mov     edx, eax
.text:0040E515                 lea     esi, [esi+0]
.text:0040E519                 lea     edi, [edi+0]
.text:0040E520
.text:0040E520 loc_40E520:                             ; CODE XREF: .text:0040E538↓j
.text:0040E520                 movzx   eax, byte ptr [ebx]
.text:0040E523                 cmp     al, 20h ; ' '
.text:0040E525                 jz      short loc_40E559
.text:0040E527                 cmp     al, 9
.text:0040E529                 jz      short loc_40E548
.text:0040E52B                 cmp     al, 5Ch ; '\'
.text:0040E52D                 jz      short loc_40E53F
.text:0040E52F                 mov     [edx], al
.text:0040E531
.text:0040E531 loc_40E531:                             ; CODE XREF: .text:0040E546↓j
.text:0040E531                                         ; .text:0040E557↓j ...
.text:0040E531                 movzx   ecx, byte ptr [ebx]
.text:0040E534                 inc     edx
.text:0040E535                 inc     ebx
.text:0040E536                 test    cl, cl
.text:0040E538                 jnz     short loc_40E520
.text:0040E53A                 jmp     loc_40E410
.text:0040E53F ; ---------------------------------------------------------------------------
.text:0040E53F
.text:0040E53F loc_40E53F:                             ; CODE XREF: .text:0040E52D↑j
.text:0040E53F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E542                 inc     edx
.text:0040E543                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E546                 jmp     short loc_40E531
.text:0040E548 ; ---------------------------------------------------------------------------
.text:0040E548
.text:0040E548 loc_40E548:                             ; CODE XREF: .text:0040E529↑j
.text:0040E548                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E54B                 inc     edx
.text:0040E54C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E54F                 inc     edx
.text:0040E550                 mov     byte ptr [edx], 31h ; '1'
.text:0040E553                 inc     edx
.text:0040E554                 mov     byte ptr [edx], 32h ; '2'
.text:0040E557                 jmp     short loc_40E531
.text:0040E559 ; ---------------------------------------------------------------------------
.text:0040E559
.text:0040E559 loc_40E559:                             ; CODE XREF: .text:0040E525↑j
.text:0040E559                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E55C                 inc     edx
.text:0040E55D                 mov     byte ptr [edx], 30h ; '0'
.text:0040E560                 inc     edx
.text:0040E561                 mov     byte ptr [edx], 34h ; '4'
.text:0040E564                 inc     edx
.text:0040E565                 mov     byte ptr [edx], 30h ; '0'
.text:0040E568                 jmp     short loc_40E531
.text:0040E56A ; ---------------------------------------------------------------------------
.text:0040E56A
.text:0040E56A loc_40E56A:                             ; CODE XREF: .text:0040E3C2↑j
.text:0040E56A                                         ; .text:0040E3CA↑j ...
.text:0040E56A                 test    al, al
.text:0040E56C                 jz      loc_40E3E0
.text:0040E572                 mov     [esp], edx
.text:0040E575                 mov     ebx, edx
.text:0040E577                 call    strlen
.text:0040E57C                 lea     edx, ds:1[eax*4]
.text:0040E583                 mov     [esp], edx
.text:0040E586                 call    malloc
.text:0040E58B                 mov     [esp+24h], eax
.text:0040E58F                 mov     edx, eax
.text:0040E591                 jmp     short loc_40E5A0
.text:0040E591 ; ---------------------------------------------------------------------------
.text:0040E593                 align 10h
.text:0040E5A0
.text:0040E5A0 loc_40E5A0:                             ; CODE XREF: .text:0040E591↑j
.text:0040E5A0                                         ; .text:0040E5B8↓j
.text:0040E5A0                 movzx   eax, byte ptr [ebx]
.text:0040E5A3                 cmp     al, 20h ; ' '
.text:0040E5A5                 jz      short loc_40E5D9
.text:0040E5A7                 cmp     al, 9
.text:0040E5A9                 jz      short loc_40E5C8
.text:0040E5AB                 cmp     al, 5Ch ; '\'
.text:0040E5AD                 jz      short loc_40E5BF
.text:0040E5AF                 mov     [edx], al
.text:0040E5B1
.text:0040E5B1 loc_40E5B1:                             ; CODE XREF: .text:0040E5C6↓j
.text:0040E5B1                                         ; .text:0040E5D7↓j ...
.text:0040E5B1                 movzx   ecx, byte ptr [ebx]
.text:0040E5B4                 inc     edx
.text:0040E5B5                 inc     ebx
.text:0040E5B6                 test    cl, cl
.text:0040E5B8                 jnz     short loc_40E5A0
.text:0040E5BA                 jmp     loc_40E3E0
.text:0040E5BF ; ---------------------------------------------------------------------------
.text:0040E5BF
.text:0040E5BF loc_40E5BF:                             ; CODE XREF: .text:0040E5AD↑j
.text:0040E5BF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E5C2                 inc     edx
.text:0040E5C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E5C6                 jmp     short loc_40E5B1
.text:0040E5C8 ; ---------------------------------------------------------------------------
.text:0040E5C8
.text:0040E5C8 loc_40E5C8:                             ; CODE XREF: .text:0040E5A9↑j
.text:0040E5C8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E5CB                 inc     edx
.text:0040E5CC                 mov     byte ptr [edx], 30h ; '0'
.text:0040E5CF                 inc     edx
.text:0040E5D0                 mov     byte ptr [edx], 31h ; '1'
.text:0040E5D3                 inc     edx
.text:0040E5D4                 mov     byte ptr [edx], 32h ; '2'
.text:0040E5D7                 jmp     short loc_40E5B1
.text:0040E5D9 ; ---------------------------------------------------------------------------
.text:0040E5D9
.text:0040E5D9 loc_40E5D9:                             ; CODE XREF: .text:0040E5A5↑j
.text:0040E5D9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E5DC                 inc     edx
.text:0040E5DD                 mov     byte ptr [edx], 30h ; '0'
.text:0040E5E0                 inc     edx
.text:0040E5E1                 mov     byte ptr [edx], 34h ; '4'
.text:0040E5E4                 inc     edx
.text:0040E5E5                 mov     byte ptr [edx], 30h ; '0'
.text:0040E5E8                 jmp     short loc_40E5B1
.text:0040E5EA ; ---------------------------------------------------------------------------
.text:0040E5EA
.text:0040E5EA loc_40E5EA:                             ; CODE XREF: .text:0040E392↑j
.text:0040E5EA                                         ; .text:0040E39A↑j ...
.text:0040E5EA                 test    al, al
.text:0040E5EC                 jz      loc_40E3B0
.text:0040E5F2                 mov     [esp], edx
.text:0040E5F5                 mov     ebx, edx
.text:0040E5F7                 call    strlen
.text:0040E5FC                 lea     ecx, ds:1[eax*4]
.text:0040E603                 mov     [esp], ecx
.text:0040E606                 call    malloc
.text:0040E60B                 mov     [esp+20h], eax
.text:0040E60F                 mov     edx, eax
.text:0040E611                 jmp     short loc_40E620
.text:0040E611 ; ---------------------------------------------------------------------------
.text:0040E613                 align 10h
.text:0040E620
.text:0040E620 loc_40E620:                             ; CODE XREF: .text:0040E611↑j
.text:0040E620                                         ; .text:0040E638↓j
.text:0040E620                 movzx   eax, byte ptr [ebx]
.text:0040E623                 cmp     al, 20h ; ' '
.text:0040E625                 jz      short loc_40E659
.text:0040E627                 cmp     al, 9
.text:0040E629                 jz      short loc_40E648
.text:0040E62B                 cmp     al, 5Ch ; '\'
.text:0040E62D                 jz      short loc_40E63F
.text:0040E62F                 mov     [edx], al
.text:0040E631
.text:0040E631 loc_40E631:                             ; CODE XREF: .text:0040E646↓j
.text:0040E631                                         ; .text:0040E657↓j ...
.text:0040E631                 movzx   ecx, byte ptr [ebx]
.text:0040E634                 inc     edx
.text:0040E635                 inc     ebx
.text:0040E636                 test    cl, cl
.text:0040E638                 jnz     short loc_40E620
.text:0040E63A                 jmp     loc_40E3B0
.text:0040E63F ; ---------------------------------------------------------------------------
.text:0040E63F
.text:0040E63F loc_40E63F:                             ; CODE XREF: .text:0040E62D↑j
.text:0040E63F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E642                 inc     edx
.text:0040E643                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E646                 jmp     short loc_40E631
.text:0040E648 ; ---------------------------------------------------------------------------
.text:0040E648
.text:0040E648 loc_40E648:                             ; CODE XREF: .text:0040E629↑j
.text:0040E648                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E64B                 inc     edx
.text:0040E64C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E64F                 inc     edx
.text:0040E650                 mov     byte ptr [edx], 31h ; '1'
.text:0040E653                 inc     edx
.text:0040E654                 mov     byte ptr [edx], 32h ; '2'
.text:0040E657                 jmp     short loc_40E631
.text:0040E659 ; ---------------------------------------------------------------------------
.text:0040E659
.text:0040E659 loc_40E659:                             ; CODE XREF: .text:0040E625↑j
.text:0040E659                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E65C                 inc     edx
.text:0040E65D                 mov     byte ptr [edx], 30h ; '0'
.text:0040E660                 inc     edx
.text:0040E661                 mov     byte ptr [edx], 34h ; '4'
.text:0040E664                 inc     edx
.text:0040E665                 mov     byte ptr [edx], 30h ; '0'
.text:0040E668                 jmp     short loc_40E631
.text:0040E668 ; ---------------------------------------------------------------------------
.text:0040E66A                 align 10h
.text:0040E670
.text:0040E670 ; =============== S U B R O U T I N E =======================================
.text:0040E670
.text:0040E670 ; Attributes: info_from_lumina
.text:0040E670
.text:0040E670 ; int __cdecl __addmntentstr(char *, int)
.text:0040E670 ___addmntentstr proc near               ; CODE XREF: .text:0040DF3A↑p
.text:0040E670
.text:0040E670 Buffer          = dword ptr -4Ch
.text:0040E670 Format          = dword ptr -48h
.text:0040E670 var_44          = dword ptr -44h
.text:0040E670 var_40          = dword ptr -40h
.text:0040E670 var_3C          = dword ptr -3Ch
.text:0040E670 var_38          = dword ptr -38h
.text:0040E670 var_34          = dword ptr -34h
.text:0040E670 var_30          = dword ptr -30h
.text:0040E670 var_2C          = dword ptr -2Ch
.text:0040E670 var_28          = dword ptr -28h
.text:0040E670 var_24          = dword ptr -24h
.text:0040E670 Str             = dword ptr -20h
.text:0040E670 var_1C          = dword ptr -1Ch
.text:0040E670 var_18          = dword ptr -18h
.text:0040E670 arg_0           = dword ptr  4
.text:0040E670 arg_4           = dword ptr  8
.text:0040E670
.text:0040E670                 push    ebx
.text:0040E671                 sub     esp, 48h
.text:0040E674                 mov     edx, [esp+4Ch+arg_4]
.text:0040E678                 mov     ecx, [edx]
.text:0040E67A                 mov     [esp+4Ch+var_2C], ecx
.text:0040E67E                 mov     ebx, [edx+4]
.text:0040E681                 mov     [esp+4Ch+var_28], ebx
.text:0040E685                 mov     ebx, [edx+8]
.text:0040E688                 mov     [esp+4Ch+var_24], ebx
.text:0040E68C                 mov     ebx, [edx+0Ch]
.text:0040E68F                 mov     [esp+4Ch+Str], ebx
.text:0040E693                 mov     ebx, [edx+10h]
.text:0040E696                 mov     [esp+4Ch+var_1C], ebx
.text:0040E69A                 mov     ebx, [edx+14h]
.text:0040E69D                 mov     [esp+4Ch+var_18], ebx
.text:0040E6A1                 mov     ebx, ecx
.text:0040E6A3                 movzx   eax, byte ptr [ecx]
.text:0040E6A6                 test    al, al
.text:0040E6A8                 jz      loc_40E991
.text:0040E6AE                 mov     esi, esi
.text:0040E6B0
.text:0040E6B0 loc_40E6B0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040E6B0                 cmp     al, 20h ; ' '
.text:0040E6B2                 jz      loc_40E910
.text:0040E6B8                 cmp     al, 9
.text:0040E6BA                 jz      loc_40E910
.text:0040E6C0                 cmp     al, 5Ch ; '\'
.text:0040E6C2                 jz      loc_40E910
.text:0040E6C8                 inc     ebx
.text:0040E6C9                 movzx   eax, byte ptr [ebx]
.text:0040E6CC                 test    al, al
.text:0040E6CE                 jnz     short loc_40E6B0
.text:0040E6D0
.text:0040E6D0 loc_40E6D0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040E6D0                                         ; ___addmntentstr+2EA↓j
.text:0040E6D0                 mov     ebx, [esp+4Ch+var_28]
.text:0040E6D4                 mov     edx, ebx
.text:0040E6D6                 movzx   eax, byte ptr [ebx]
.text:0040E6D9                 test    al, al
.text:0040E6DB                 jz      short loc_40E700
.text:0040E6DD                 lea     esi, [esi+0]
.text:0040E6E0
.text:0040E6E0 loc_40E6E0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040E6E0                 cmp     al, 20h ; ' '
.text:0040E6E2                 jz      loc_40E88A
.text:0040E6E8                 cmp     al, 9
.text:0040E6EA                 jz      loc_40E88A
.text:0040E6F0                 cmp     al, 5Ch ; '\'
.text:0040E6F2                 jz      loc_40E88A
.text:0040E6F8                 inc     ebx
.text:0040E6F9                 movzx   eax, byte ptr [ebx]
.text:0040E6FC                 test    al, al
.text:0040E6FE                 jnz     short loc_40E6E0
.text:0040E700
.text:0040E700 loc_40E700:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040E700                                         ; ___addmntentstr+21C↓j ...
.text:0040E700                 mov     ebx, [esp+4Ch+var_24]
.text:0040E704                 mov     edx, ebx
.text:0040E706                 movzx   eax, byte ptr [ebx]
.text:0040E709                 test    al, al
.text:0040E70B                 jz      short loc_40E730
.text:0040E70D                 lea     esi, [esi+0]
.text:0040E710
.text:0040E710 loc_40E710:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040E710                 cmp     al, 20h ; ' '
.text:0040E712                 jz      loc_40E80E
.text:0040E718                 cmp     al, 9
.text:0040E71A                 jz      loc_40E80E
.text:0040E720                 cmp     al, 5Ch ; '\'
.text:0040E722                 jz      loc_40E80E
.text:0040E728                 inc     ebx
.text:0040E729                 movzx   eax, byte ptr [ebx]
.text:0040E72C                 test    al, al
.text:0040E72E                 jnz     short loc_40E710
.text:0040E730
.text:0040E730 loc_40E730:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040E730                                         ; ___addmntentstr+1A0↓j ...
.text:0040E730                 mov     edx, [esp+4Ch+Str]
.text:0040E734                 mov     ebx, edx
.text:0040E736                 movzx   eax, byte ptr [edx]
.text:0040E739                 test    al, al
.text:0040E73B                 jz      short loc_40E754
.text:0040E73D                 lea     esi, [esi+0]
.text:0040E740
.text:0040E740 loc_40E740:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040E740                 cmp     al, 20h ; ' '
.text:0040E742                 jz      short loc_40E79C
.text:0040E744                 cmp     al, 9
.text:0040E746                 jz      short loc_40E79C
.text:0040E748                 cmp     al, 5Ch ; '\'
.text:0040E74A                 jz      short loc_40E79C
.text:0040E74C                 inc     ebx
.text:0040E74D                 movzx   eax, byte ptr [ebx]
.text:0040E750                 test    al, al
.text:0040E752                 jnz     short loc_40E740
.text:0040E754
.text:0040E754 loc_40E754:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040E754                                         ; ___addmntentstr+12E↓j ...
.text:0040E754                 mov     [esp+4Ch+var_38], edx
.text:0040E758                 mov     ebx, [esp+4Ch+var_18]
.text:0040E75C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040E760                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040E768                 mov     edx, [esp+4Ch+var_2C]
.text:0040E76C                 mov     [esp+4Ch+var_30], ebx
.text:0040E770                 mov     ebx, [esp+4Ch+var_24]
.text:0040E774                 mov     [esp+4Ch+var_34], ecx
.text:0040E778                 mov     ecx, [esp+4Ch+var_28]
.text:0040E77C                 mov     [esp+4Ch+var_3C], ebx
.text:0040E780                 mov     ebx, [esp+4Ch+arg_0]
.text:0040E784                 mov     [esp+4Ch+var_40], ecx
.text:0040E788                 mov     [esp+4Ch+var_44], edx
.text:0040E78C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040E78F                 call    sprintf
.text:0040E794                 add     esp, 48h
.text:0040E797                 shr     eax, 1Fh
.text:0040E79A                 pop     ebx
.text:0040E79B                 retn
.text:0040E79C ; ---------------------------------------------------------------------------
.text:0040E79C
.text:0040E79C loc_40E79C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040E79C                                         ; ___addmntentstr+D6↑j ...
.text:0040E79C                 test    al, al
.text:0040E79E                 jz      short loc_40E754
.text:0040E7A0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040E7A3                 mov     ebx, edx
.text:0040E7A5                 call    strlen
.text:0040E7AA                 lea     edx, ds:1[eax*4]
.text:0040E7B1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040E7B4                 call    malloc
.text:0040E7B9                 mov     [esp+4Ch+Str], eax
.text:0040E7BD                 mov     edx, eax
.text:0040E7BF                 nop
.text:0040E7C0
.text:0040E7C0 loc_40E7C0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040E7C0                 movzx   eax, byte ptr [ebx]
.text:0040E7C3                 cmp     al, 20h ; ' '
.text:0040E7C5                 jz      short loc_40E7FD
.text:0040E7C7                 cmp     al, 9
.text:0040E7C9                 jz      short loc_40E7EC
.text:0040E7CB                 cmp     al, 5Ch ; '\'
.text:0040E7CD                 jz      short loc_40E7E3
.text:0040E7CF                 mov     [edx], al
.text:0040E7D1
.text:0040E7D1 loc_40E7D1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040E7D1                                         ; ___addmntentstr+18B↓j ...
.text:0040E7D1                 movzx   ecx, byte ptr [ebx]
.text:0040E7D4                 inc     edx
.text:0040E7D5                 inc     ebx
.text:0040E7D6                 test    cl, cl
.text:0040E7D8                 jnz     short loc_40E7C0
.text:0040E7DA                 mov     edx, [esp+4Ch+Str]
.text:0040E7DE                 jmp     loc_40E754
.text:0040E7E3 ; ---------------------------------------------------------------------------
.text:0040E7E3
.text:0040E7E3 loc_40E7E3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040E7E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E7E6                 inc     edx
.text:0040E7E7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E7EA                 jmp     short loc_40E7D1
.text:0040E7EC ; ---------------------------------------------------------------------------
.text:0040E7EC
.text:0040E7EC loc_40E7EC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040E7EC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E7EF                 inc     edx
.text:0040E7F0                 mov     byte ptr [edx], 30h ; '0'
.text:0040E7F3                 inc     edx
.text:0040E7F4                 mov     byte ptr [edx], 31h ; '1'
.text:0040E7F7                 inc     edx
.text:0040E7F8                 mov     byte ptr [edx], 32h ; '2'
.text:0040E7FB                 jmp     short loc_40E7D1
.text:0040E7FD ; ---------------------------------------------------------------------------
.text:0040E7FD
.text:0040E7FD loc_40E7FD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040E7FD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E800                 inc     edx
.text:0040E801                 mov     byte ptr [edx], 30h ; '0'
.text:0040E804                 inc     edx
.text:0040E805                 mov     byte ptr [edx], 34h ; '4'
.text:0040E808                 inc     edx
.text:0040E809                 mov     byte ptr [edx], 30h ; '0'
.text:0040E80C                 jmp     short loc_40E7D1
.text:0040E80E ; ---------------------------------------------------------------------------
.text:0040E80E
.text:0040E80E loc_40E80E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040E80E                                         ; ___addmntentstr+AA↑j ...
.text:0040E80E                 test    al, al
.text:0040E810                 jz      loc_40E730
.text:0040E816                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040E819                 mov     ebx, edx
.text:0040E81B                 call    strlen
.text:0040E820                 lea     edx, ds:1[eax*4]
.text:0040E827                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040E82A                 call    malloc
.text:0040E82F                 mov     [esp+4Ch+var_24], eax
.text:0040E833                 mov     edx, eax
.text:0040E835                 lea     esi, [esi+0]
.text:0040E839                 lea     edi, [edi+0]
.text:0040E840
.text:0040E840 loc_40E840:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040E840                 movzx   eax, byte ptr [ebx]
.text:0040E843                 cmp     al, 20h ; ' '
.text:0040E845                 jz      short loc_40E879
.text:0040E847                 cmp     al, 9
.text:0040E849                 jz      short loc_40E868
.text:0040E84B                 cmp     al, 5Ch ; '\'
.text:0040E84D                 jz      short loc_40E85F
.text:0040E84F                 mov     [edx], al
.text:0040E851
.text:0040E851 loc_40E851:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040E851                                         ; ___addmntentstr+207↓j ...
.text:0040E851                 movzx   ecx, byte ptr [ebx]
.text:0040E854                 inc     edx
.text:0040E855                 inc     ebx
.text:0040E856                 test    cl, cl
.text:0040E858                 jnz     short loc_40E840
.text:0040E85A                 jmp     loc_40E730
.text:0040E85F ; ---------------------------------------------------------------------------
.text:0040E85F
.text:0040E85F loc_40E85F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040E85F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E862                 inc     edx
.text:0040E863                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E866                 jmp     short loc_40E851
.text:0040E868 ; ---------------------------------------------------------------------------
.text:0040E868
.text:0040E868 loc_40E868:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040E868                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E86B                 inc     edx
.text:0040E86C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E86F                 inc     edx
.text:0040E870                 mov     byte ptr [edx], 31h ; '1'
.text:0040E873                 inc     edx
.text:0040E874                 mov     byte ptr [edx], 32h ; '2'
.text:0040E877                 jmp     short loc_40E851
.text:0040E879 ; ---------------------------------------------------------------------------
.text:0040E879
.text:0040E879 loc_40E879:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040E879                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E87C                 inc     edx
.text:0040E87D                 mov     byte ptr [edx], 30h ; '0'
.text:0040E880                 inc     edx
.text:0040E881                 mov     byte ptr [edx], 34h ; '4'
.text:0040E884                 inc     edx
.text:0040E885                 mov     byte ptr [edx], 30h ; '0'
.text:0040E888                 jmp     short loc_40E851
.text:0040E88A ; ---------------------------------------------------------------------------
.text:0040E88A
.text:0040E88A loc_40E88A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040E88A                                         ; ___addmntentstr+7A↑j ...
.text:0040E88A                 test    al, al
.text:0040E88C                 jz      loc_40E700
.text:0040E892                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040E895                 mov     ebx, edx
.text:0040E897                 call    strlen
.text:0040E89C                 lea     edx, ds:1[eax*4]
.text:0040E8A3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040E8A6                 call    malloc
.text:0040E8AB                 mov     [esp+4Ch+var_28], eax
.text:0040E8AF                 mov     edx, eax
.text:0040E8B1                 jmp     short loc_40E8C0
.text:0040E8B1 ; ---------------------------------------------------------------------------
.text:0040E8B3                 align 10h
.text:0040E8C0
.text:0040E8C0 loc_40E8C0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040E8C0                                         ; ___addmntentstr+268↓j
.text:0040E8C0                 movzx   eax, byte ptr [ebx]
.text:0040E8C3                 cmp     al, 20h ; ' '
.text:0040E8C5                 jz      short loc_40E8F9
.text:0040E8C7                 cmp     al, 9
.text:0040E8C9                 jz      short loc_40E8E8
.text:0040E8CB                 cmp     al, 5Ch ; '\'
.text:0040E8CD                 jz      short loc_40E8DF
.text:0040E8CF                 mov     [edx], al
.text:0040E8D1
.text:0040E8D1 loc_40E8D1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040E8D1                                         ; ___addmntentstr+287↓j ...
.text:0040E8D1                 movzx   ecx, byte ptr [ebx]
.text:0040E8D4                 inc     edx
.text:0040E8D5                 inc     ebx
.text:0040E8D6                 test    cl, cl
.text:0040E8D8                 jnz     short loc_40E8C0
.text:0040E8DA                 jmp     loc_40E700
.text:0040E8DF ; ---------------------------------------------------------------------------
.text:0040E8DF
.text:0040E8DF loc_40E8DF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040E8DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E8E2                 inc     edx
.text:0040E8E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E8E6                 jmp     short loc_40E8D1
.text:0040E8E8 ; ---------------------------------------------------------------------------
.text:0040E8E8
.text:0040E8E8 loc_40E8E8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040E8E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E8EB                 inc     edx
.text:0040E8EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040E8EF                 inc     edx
.text:0040E8F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040E8F3                 inc     edx
.text:0040E8F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040E8F7                 jmp     short loc_40E8D1
.text:0040E8F9 ; ---------------------------------------------------------------------------
.text:0040E8F9
.text:0040E8F9 loc_40E8F9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040E8F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E8FC                 inc     edx
.text:0040E8FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040E900                 inc     edx
.text:0040E901                 mov     byte ptr [edx], 34h ; '4'
.text:0040E904                 inc     edx
.text:0040E905                 mov     byte ptr [edx], 30h ; '0'
.text:0040E908                 jmp     short loc_40E8D1
.text:0040E908 ; ---------------------------------------------------------------------------
.text:0040E90A                 align 10h
.text:0040E910
.text:0040E910 loc_40E910:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040E910                                         ; ___addmntentstr+4A↑j ...
.text:0040E910                 test    al, al
.text:0040E912                 jz      loc_40E6D0
.text:0040E918                 mov     ebx, [esp+4Ch+var_2C]
.text:0040E91C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040E91F                 call    strlen
.text:0040E924                 lea     edx, ds:1[eax*4]
.text:0040E92B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040E92E                 call    malloc
.text:0040E933                 mov     [esp+4Ch+var_2C], eax
.text:0040E937                 mov     edx, eax
.text:0040E939                 lea     esi, [esi+0]
.text:0040E940
.text:0040E940 loc_40E940:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040E940                 movzx   eax, byte ptr [ebx]
.text:0040E943                 cmp     al, 20h ; ' '
.text:0040E945                 jz      short loc_40E980
.text:0040E947                 cmp     al, 9
.text:0040E949                 jz      short loc_40E968
.text:0040E94B                 cmp     al, 5Ch ; '\'
.text:0040E94D                 jz      short loc_40E95F
.text:0040E94F                 mov     [edx], al
.text:0040E951
.text:0040E951 loc_40E951:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040E951                                         ; ___addmntentstr+307↓j ...
.text:0040E951                 movzx   ecx, byte ptr [ebx]
.text:0040E954                 inc     edx
.text:0040E955                 inc     ebx
.text:0040E956                 test    cl, cl
.text:0040E958                 jnz     short loc_40E940
.text:0040E95A                 jmp     loc_40E6D0
.text:0040E95F ; ---------------------------------------------------------------------------
.text:0040E95F
.text:0040E95F loc_40E95F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040E95F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E962                 inc     edx
.text:0040E963                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E966                 jmp     short loc_40E951
.text:0040E968 ; ---------------------------------------------------------------------------
.text:0040E968
.text:0040E968 loc_40E968:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040E968                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E96B                 inc     edx
.text:0040E96C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E96F                 inc     edx
.text:0040E970                 mov     byte ptr [edx], 31h ; '1'
.text:0040E973                 inc     edx
.text:0040E974                 mov     byte ptr [edx], 32h ; '2'
.text:0040E977                 jmp     short loc_40E951
.text:0040E977 ; ---------------------------------------------------------------------------
.text:0040E979                 align 10h
.text:0040E980
.text:0040E980 loc_40E980:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040E980                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E983                 inc     edx
.text:0040E984                 mov     byte ptr [edx], 30h ; '0'
.text:0040E987                 inc     edx
.text:0040E988                 mov     byte ptr [edx], 34h ; '4'
.text:0040E98B                 inc     edx
.text:0040E98C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E98F                 jmp     short loc_40E951
.text:0040E991 ; ---------------------------------------------------------------------------
.text:0040E991
.text:0040E991 loc_40E991:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040E991                 movzx   eax, byte ptr [ecx]
.text:0040E994                 jmp     loc_40E910
.text:0040E994 ___addmntentstr endp
.text:0040E994
.text:0040E994 ; ---------------------------------------------------------------------------
.text:0040E999                 align 10h
.text:0040E9A0
.text:0040E9A0 ; =============== S U B R O U T I N E =======================================
.text:0040E9A0
.text:0040E9A0
.text:0040E9A0 sub_40E9A0      proc near               ; CODE XREF: sub_40BC80+99↑p
.text:0040E9A0
.text:0040E9A0 nBufferLength   = dword ptr -1Ch
.text:0040E9A0 lpBuffer        = dword ptr -18h
.text:0040E9A0 dwBytes         = dword ptr -14h
.text:0040E9A0 var_8           = dword ptr -8
.text:0040E9A0 var_4           = dword ptr -4
.text:0040E9A0
.text:0040E9A0                 sub     esp, 1Ch
.text:0040E9A3                 mov     [esp+1Ch+var_8], ebx
.text:0040E9A7                 mov     [esp+1Ch+var_4], esi
.text:0040E9AB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040E9B3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040E9BA                 call    GetLogicalDriveStringsA
.text:0040E9BF                 sub     esp, 8
.text:0040E9C2                 mov     ebx, eax
.text:0040E9C4                 call    GetProcessHeap
.text:0040E9C9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040E9CC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040E9D0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040E9D8                 call    HeapAlloc
.text:0040E9DD                 sub     esp, 0Ch
.text:0040E9E0                 mov     esi, eax
.text:0040E9E2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040E9E5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040E9E9                 call    GetLogicalDriveStringsA
.text:0040E9EE                 sub     esp, 8
.text:0040E9F1                 mov     eax, esi
.text:0040E9F3                 mov     ebx, [esp+1Ch+var_8]
.text:0040E9F7                 mov     esi, [esp+1Ch+var_4]
.text:0040E9FB                 add     esp, 1Ch
.text:0040E9FE                 retn
.text:0040E9FE sub_40E9A0      endp
.text:0040E9FE
.text:0040E9FF
.text:0040E9FF ; =============== S U B R O U T I N E =======================================
.text:0040E9FF
.text:0040E9FF
.text:0040E9FF ; int __cdecl sub_40E9FF(char *, char *)
.text:0040E9FF sub_40E9FF      proc near               ; DATA XREF: sub_40E9FF:loc_40EA8D↓o
.text:0040E9FF
.text:0040E9FF FileName        = dword ptr -1Ch
.text:0040E9FF Mode            = dword ptr -18h
.text:0040E9FF dwBytes         = dword ptr -14h
.text:0040E9FF arg_0           = dword ptr  4
.text:0040E9FF arg_4           = dword ptr  8
.text:0040E9FF
.text:0040E9FF                 ja      short $+2
.text:0040EA01
.text:0040EA01 loc_40EA01:                             ; CODE XREF: sub_40E9FF↑j
.text:0040EA01                 jmp     short loc_40EA10
.text:0040EA01 ; ---------------------------------------------------------------------------
.text:0040EA03                 align 10h
.text:0040EA10
.text:0040EA10 loc_40EA10:                             ; CODE XREF: sub_40E9FF:loc_40EA01↑j
.text:0040EA10                 push    edi
.text:0040EA11                 push    esi
.text:0040EA12                 push    ebx
.text:0040EA13                 sub     esp, 10h
.text:0040EA16                 mov     ebx, [esp+1Ch+arg_0]
.text:0040EA1A                 mov     edx, [esp+1Ch+arg_4]
.text:0040EA1E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040EA21                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040EA25                 call    fopen
.text:0040EA2A                 test    eax, eax
.text:0040EA2C                 mov     edi, eax
.text:0040EA2E                 jz      short loc_40EA8D
.text:0040EA30
.text:0040EA30 loc_40EA30:                             ; CODE XREF: sub_40E9FF+A2↓j
.text:0040EA30                                         ; sub_40E9FF+AB↓j
.text:0040EA30                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040EA38                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040EA3F                 call    GetLogicalDriveStringsA
.text:0040EA44                 sub     esp, 8
.text:0040EA47                 mov     esi, eax
.text:0040EA49                 call    GetProcessHeap
.text:0040EA4E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040EA51                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040EA55                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040EA5D                 call    HeapAlloc
.text:0040EA62                 sub     esp, 0Ch
.text:0040EA65                 mov     ebx, eax
.text:0040EA67                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040EA6A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040EA6E                 call    GetLogicalDriveStringsA
.text:0040EA73                 mov     off_413094, ebx ; "notset"
.text:0040EA79                 sub     esp, 8
.text:0040EA7C                 xor     eax, eax
.text:0040EA7E                 test    ebx, ebx
.text:0040EA80                 setz    al
.text:0040EA83                 add     esp, 10h
.text:0040EA86                 pop     ebx
.text:0040EA87                 dec     eax
.text:0040EA88                 and     eax, edi
.text:0040EA8A                 pop     esi
.text:0040EA8B                 pop     edi
.text:0040EA8C                 retn
.text:0040EA8D ; ---------------------------------------------------------------------------
.text:0040EA8D
.text:0040EA8D loc_40EA8D:                             ; CODE XREF: sub_40E9FF+2F↑j
.text:0040EA8D                 mov     [esp+1Ch+Mode], offset sub_40E9FF ; Mode
.text:0040EA95                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040EA98                 call    fopen
.text:0040EA9D                 test    eax, eax
.text:0040EA9F                 mov     edi, eax
.text:0040EAA1                 jnz     short loc_40EA30
.text:0040EAA3                 call    sub_40F740
.text:0040EAA8                 mov     edi, eax
.text:0040EAAA                 jmp     short loc_40EA30
.text:0040EAAA sub_40E9FF      endp
.text:0040EAAA
.text:0040EAAA ; ---------------------------------------------------------------------------
.text:0040EAAC                 align 10h
.text:0040EAB0                 sub     esp, 0Ch
.text:0040EAB3                 mov     eax, [esp+10h]
.text:0040EAB7                 test    eax, eax
.text:0040EAB9                 jz      short loc_40EAC3
.text:0040EABB                 mov     [esp], eax
.text:0040EABE                 call    fclose
.text:0040EAC3
.text:0040EAC3 loc_40EAC3:                             ; CODE XREF: .text:0040EAB9↑j
.text:0040EAC3                 call    GetProcessHeap
.text:0040EAC8                 mov     [esp], eax
.text:0040EACB                 mov     ecx, off_413094 ; "notset"
.text:0040EAD1                 mov     dword ptr [esp+4], 0
.text:0040EAD9                 mov     [esp+8], ecx
.text:0040EADD                 call    HeapFree
.text:0040EAE2                 mov     edx, off_413090 ; "notset"
.text:0040EAE8                 sub     esp, 0Ch
.text:0040EAEB                 mov     eax, 1
.text:0040EAF0                 mov     off_413094, edx ; "notset"
.text:0040EAF6                 add     esp, 0Ch
.text:0040EAF9                 retn
.text:0040EAF9 ; ---------------------------------------------------------------------------
.text:0040EAFA                 align 10h
.text:0040EB00                 push    edi
.text:0040EB01                 push    esi
.text:0040EB02                 push    ebx
.text:0040EB03                 sub     esp, 10h
.text:0040EB06                 mov     edi, [esp+24h]
.text:0040EB0A                 mov     [esp], edi
.text:0040EB0D                 call    strlen
.text:0040EB12                 mov     edx, [esp+20h]
.text:0040EB16                 mov     esi, eax
.text:0040EB18                 mov     ebx, [edx+0Ch]
.text:0040EB1B                 nop
.text:0040EB1C                 lea     esi, [esi+0]
.text:0040EB20
.text:0040EB20 loc_40EB20:                             ; CODE XREF: .text:0040EB51↓j
.text:0040EB20                 mov     [esp+4], edi
.text:0040EB24                 mov     [esp], ebx
.text:0040EB27                 call    strstr
.text:0040EB2C                 test    eax, eax
.text:0040EB2E                 jz      short loc_40EB53
.text:0040EB30                 cmp     eax, ebx
.text:0040EB32                 jz      short loc_40EB55
.text:0040EB34                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040EB38                 jz      short loc_40EB60
.text:0040EB3A
.text:0040EB3A loc_40EB3A:                             ; CODE XREF: .text:0040EB70↓j
.text:0040EB3A                 mov     [esp], ebx
.text:0040EB3D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040EB45                 call    strchr
.text:0040EB4A                 test    eax, eax
.text:0040EB4C                 mov     ebx, eax
.text:0040EB4E                 jz      short loc_40EB53
.text:0040EB50                 inc     ebx
.text:0040EB51                 jmp     short loc_40EB20
.text:0040EB53 ; ---------------------------------------------------------------------------
.text:0040EB53
.text:0040EB53 loc_40EB53:                             ; CODE XREF: .text:0040EB2E↑j
.text:0040EB53                                         ; .text:0040EB4E↑j
.text:0040EB53                 xor     eax, eax
.text:0040EB55
.text:0040EB55 loc_40EB55:                             ; CODE XREF: .text:0040EB32↑j
.text:0040EB55                                         ; .text:0040EB66↓j ...
.text:0040EB55                 add     esp, 10h
.text:0040EB58                 pop     ebx
.text:0040EB59                 pop     esi
.text:0040EB5A                 pop     edi
.text:0040EB5B                 retn
.text:0040EB5B ; ---------------------------------------------------------------------------
.text:0040EB5C                 align 10h
.text:0040EB60
.text:0040EB60 loc_40EB60:                             ; CODE XREF: .text:0040EB38↑j
.text:0040EB60                 movzx   edx, byte ptr [esi+eax]
.text:0040EB64                 test    dl, dl
.text:0040EB66                 jz      short loc_40EB55
.text:0040EB68                 cmp     dl, 3Dh ; '='
.text:0040EB6B                 jz      short loc_40EB55
.text:0040EB6D                 cmp     dl, 2Ch ; ','
.text:0040EB70                 jnz     short loc_40EB3A
.text:0040EB72                 jmp     short loc_40EB55
.text:0040EB72 ; ---------------------------------------------------------------------------
.text:0040EB74                 align 10h
.text:0040EB80
.text:0040EB80 ; =============== S U B R O U T I N E =======================================
.text:0040EB80
.text:0040EB80
.text:0040EB80 ; int __cdecl sub_40EB80(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040EB80 sub_40EB80      proc near               ; CODE XREF: sub_40ED00+93↓p
.text:0040EB80
.text:0040EB80 pvReserved      = dword ptr -35Ch
.text:0040EB80 pUnkOuter       = dword ptr -358h
.text:0040EB80 dwClsContext    = dword ptr -354h
.text:0040EB80 riid            = dword ptr -350h
.text:0040EB80 ppv             = dword ptr -34Ch
.text:0040EB80 cchWideChar     = dword ptr -348h
.text:0040EB80 var_334         = byte ptr -334h
.text:0040EB80 var_330         = dword ptr -330h
.text:0040EB80 String2         = byte ptr -32Ch
.text:0040EB80 WideCharStr     = word ptr -21Ch
.text:0040EB80 lpMultiByteStr  = dword ptr  4
.text:0040EB80 lpString1       = dword ptr  8
.text:0040EB80
.text:0040EB80                 push    edi
.text:0040EB81                 push    esi
.text:0040EB82                 push    ebx
.text:0040EB83                 sub     esp, 350h
.text:0040EB89                 mov     edi, [esp+35Ch+lpString1]
.text:0040EB90                 mov     byte ptr [edi], 0
.text:0040EB93                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040EB9A                 call    OleInitialize
.text:0040EB9F                 sub     esp, 4
.text:0040EBA2                 cmp     eax, 1
.text:0040EBA5                 ja      loc_40ECDF
.text:0040EBAB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040EBB3                 lea     ecx, [esp+35Ch+var_330]
.text:0040EBB7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040EBBB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040EBC3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040EBCB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040EBD2                 call    CoCreateInstance
.text:0040EBD7                 sub     esp, 14h
.text:0040EBDA                 test    eax, eax
.text:0040EBDC                 js      loc_40ECDF
.text:0040EBE2                 mov     ebx, [esp+35Ch+var_330]
.text:0040EBE6                 lea     edx, [esp+35Ch+var_334]
.text:0040EBEA                 mov     esi, [ebx]
.text:0040EBEC                 mov     [esp+35Ch+dwClsContext], edx
.text:0040EBF0                 mov     [esp+35Ch+pvReserved], ebx
.text:0040EBF3                 xor     ebx, ebx
.text:0040EBF5                 mov     [esp+35Ch+pUnkOuter], offset dword_411620
.text:0040EBFD                 call    dword ptr [esi]
.text:0040EBFF                 sub     esp, 0Ch
.text:0040EC02                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040EC09                 call    AreFileApisANSI
.text:0040EC0E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040EC16                 test    eax, eax
.text:0040EC18                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040EC1F                 setz    bl
.text:0040EC22                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040EC26                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040EC2E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040EC32                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040EC3A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040EC3D                 call    MultiByteToWideChar
.text:0040EC42                 sub     esp, 18h
.text:0040EC45                 test    eax, eax
.text:0040EC47                 js      loc_40ECDF
.text:0040EC4D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040EC51                 mov     ebx, [edx]
.text:0040EC53                 mov     [esp+35Ch+dwClsContext], 0
.text:0040EC5B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040EC5F                 mov     [esp+35Ch+pvReserved], edx
.text:0040EC62                 call    dword ptr [ebx+14h]
.text:0040EC65                 sub     esp, 0Ch
.text:0040EC68                 test    eax, eax
.text:0040EC6A                 js      short loc_40ECDF
.text:0040EC6C                 mov     ebx, [esp+35Ch+var_330]
.text:0040EC70                 lea     esi, [esp+35Ch+String2]
.text:0040EC74                 mov     ecx, [ebx]
.text:0040EC76                 mov     [esp+35Ch+pvReserved], ebx
.text:0040EC79                 mov     [esp+35Ch+ppv], 0
.text:0040EC81                 mov     [esp+35Ch+riid], 0
.text:0040EC89                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040EC91                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040EC95                 call    dword ptr [ecx+0Ch]
.text:0040EC98                 sub     esp, 14h
.text:0040EC9B                 mov     ebx, eax
.text:0040EC9D                 test    eax, eax
.text:0040EC9F                 js      short loc_40ECDF
.text:0040ECA1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040ECA5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040ECA8                 call    lstrcpyA
.text:0040ECAD                 sub     esp, 8
.text:0040ECB0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040ECB4                 mov     ecx, [edi]
.text:0040ECB6                 mov     [esp+35Ch+pvReserved], edi
.text:0040ECB9                 call    dword ptr [ecx+8]
.text:0040ECBC                 sub     esp, 4
.text:0040ECBF                 mov     edx, [esp+35Ch+var_330]
.text:0040ECC3                 mov     esi, [edx]
.text:0040ECC5                 mov     [esp+35Ch+pvReserved], edx
.text:0040ECC8                 call    dword ptr [esi+8]
.text:0040ECCB                 sub     esp, 4
.text:0040ECCE                 call    CoUninitialize
.text:0040ECD3                 mov     eax, ebx
.text:0040ECD5
.text:0040ECD5 loc_40ECD5:                             ; CODE XREF: sub_40EB80+177↓j
.text:0040ECD5                 add     esp, 350h
.text:0040ECDB                 pop     ebx
.text:0040ECDC                 pop     esi
.text:0040ECDD                 pop     edi
.text:0040ECDE                 retn
.text:0040ECDF ; ---------------------------------------------------------------------------
.text:0040ECDF
.text:0040ECDF loc_40ECDF:                             ; CODE XREF: sub_40EB80+25↑j
.text:0040ECDF                                         ; sub_40EB80+5C↑j ...
.text:0040ECDF                 call    sub_40D0E0
.text:0040ECE4                 mov     edi, eax
.text:0040ECE6                 call    _errno
.text:0040ECEB                 mov     [eax], edi
.text:0040ECED                 call    CoUninitialize
.text:0040ECF2                 mov     eax, 0FFFFFFFFh
.text:0040ECF7                 jmp     short loc_40ECD5
.text:0040ECF7 sub_40EB80      endp
.text:0040ECF7
.text:0040ECF7 ; ---------------------------------------------------------------------------
.text:0040ECF9 ; const char aLnk_0[]
.text:0040ECF9 aLnk_0          db '.lnk',0             ; DATA XREF: sub_40ED00+53↓o
.text:0040ECF9                                         ; sub_40ED00:loc_40ED65↓o
.text:0040ECFE                 align 10h
.text:0040ED00
.text:0040ED00 ; =============== S U B R O U T I N E =======================================
.text:0040ED00
.text:0040ED00
.text:0040ED00 ; int __cdecl sub_40ED00(char *, LPSTR lpString1)
.text:0040ED00 sub_40ED00      proc near               ; CODE XREF: sub_40C850+96↑p
.text:0040ED00
.text:0040ED00 Str             = dword ptr -1Ch
.text:0040ED00 Source          = dword ptr -18h
.text:0040ED00 Destination     = dword ptr -14h
.text:0040ED00 arg_0           = dword ptr  4
.text:0040ED00 lpString1       = dword ptr  8
.text:0040ED00
.text:0040ED00                 push    ebp
.text:0040ED01                 push    edi
.text:0040ED02                 push    esi
.text:0040ED03                 push    ebx
.text:0040ED04                 sub     esp, 0Ch
.text:0040ED07                 mov     ebx, [esp+1Ch+arg_0]
.text:0040ED0B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040ED0F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040ED12                 call    strlen
.text:0040ED17                 add     eax, 5
.text:0040ED1A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040ED1D                 call    malloc
.text:0040ED22                 mov     [esp+1Ch+Destination], eax
.text:0040ED26                 test    eax, eax
.text:0040ED28                 jz      loc_40EDD0
.text:0040ED2E                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040ED32                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040ED35                 call    strcpy
.text:0040ED3A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040ED42                 mov     eax, [esp+1Ch+Destination]
.text:0040ED46                 mov     [esp+1Ch+Str], eax ; Str
.text:0040ED49                 call    strrchr
.text:0040ED4E                 test    eax, eax
.text:0040ED50                 jz      short loc_40ED65
.text:0040ED52                 cld
.text:0040ED53                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:0040ED58                 mov     ecx, 5
.text:0040ED5D                 mov     esi, eax
.text:0040ED5F                 mov     edi, ebx
.text:0040ED61                 repe cmpsb
.text:0040ED63                 jz      short loc_40ED79
.text:0040ED65
.text:0040ED65 loc_40ED65:                             ; CODE XREF: sub_40ED00+50↑j
.text:0040ED65                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040ED6D                 mov     edx, [esp+1Ch+Destination]
.text:0040ED71                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040ED74                 call    strcat
.text:0040ED79
.text:0040ED79 loc_40ED79:                             ; CODE XREF: sub_40ED00+63↑j
.text:0040ED79                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040ED80                 call    SetErrorMode
.text:0040ED85                 sub     esp, 4
.text:0040ED88                 mov     ebx, [esp+1Ch+Destination]
.text:0040ED8C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040ED90                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040ED93                 call    sub_40EB80
.text:0040ED98                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040ED9B                 mov     esi, eax
.text:0040ED9D                 call    free
.text:0040EDA2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040EDA9                 call    SetErrorMode
.text:0040EDAE                 sub     esp, 4
.text:0040EDB1                 mov     [esp+1Ch+Str], ebp
.text:0040EDB4                 call    sub_40B4C0
.text:0040EDB9                 inc     esi
.text:0040EDBA                 jz      short loc_40EDD0
.text:0040EDBC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040EDC0                 add     esp, 0Ch
.text:0040EDC3                 pop     ebx
.text:0040EDC4                 pop     esi
.text:0040EDC5                 pop     edi
.text:0040EDC6                 pop     ebp
.text:0040EDC7                 jmp     strlen
.text:0040EDC7 ; ---------------------------------------------------------------------------
.text:0040EDCC                 align 10h
.text:0040EDD0
.text:0040EDD0 loc_40EDD0:                             ; CODE XREF: sub_40ED00+28↑j
.text:0040EDD0                                         ; sub_40ED00+BA↑j
.text:0040EDD0                 add     esp, 0Ch
.text:0040EDD3                 mov     eax, 0FFFFFFFFh
.text:0040EDD8                 pop     ebx
.text:0040EDD9                 pop     esi
.text:0040EDDA                 pop     edi
.text:0040EDDB                 pop     ebp
.text:0040EDDC                 retn
.text:0040EDDC sub_40ED00      endp
.text:0040EDDC
.text:0040EDDC ; ---------------------------------------------------------------------------
.text:0040EDDD                 align 10h
.text:0040EDE0
.text:0040EDE0 ; =============== S U B R O U T I N E =======================================
.text:0040EDE0
.text:0040EDE0 ; Attributes: info_from_lumina
.text:0040EDE0
.text:0040EDE0 __quicksort     proc near               ; CODE XREF: sub_40CB00+7B↑j
.text:0040EDE0
.text:0040EDE0 var_14C         = dword ptr -14Ch
.text:0040EDE0 var_148         = dword ptr -148h
.text:0040EDE0 var_13C         = dword ptr -13Ch
.text:0040EDE0 var_135         = byte ptr -135h
.text:0040EDE0 var_134         = dword ptr -134h
.text:0040EDE0 var_130         = dword ptr -130h
.text:0040EDE0 var_12C         = dword ptr -12Ch
.text:0040EDE0 var_128         = dword ptr -128h
.text:0040EDE0 var_124         = dword ptr -124h
.text:0040EDE0 var_120         = dword ptr -120h
.text:0040EDE0 var_11C         = byte ptr -11Ch
.text:0040EDE0 var_114         = byte ptr -114h
.text:0040EDE0 arg_0           = dword ptr  4
.text:0040EDE0 arg_4           = dword ptr  8
.text:0040EDE0 arg_8           = dword ptr  0Ch
.text:0040EDE0 arg_C           = dword ptr  10h
.text:0040EDE0
.text:0040EDE0                 push    ebp
.text:0040EDE1                 push    edi
.text:0040EDE2                 push    esi
.text:0040EDE3                 push    ebx
.text:0040EDE4                 sub     esp, 13Ch
.text:0040EDEA                 mov     eax, [esp+14Ch+arg_4]
.text:0040EDF1                 mov     ecx, [esp+14Ch+arg_8]
.text:0040EDF8                 shl     ecx, 2
.text:0040EDFB                 test    eax, eax
.text:0040EDFD                 mov     [esp+14Ch+var_120], ecx
.text:0040EE01                 jz      loc_40EF5C
.text:0040EE07                 lea     ecx, [eax-1]
.text:0040EE0A                 cmp     eax, 4
.text:0040EE0D                 mov     [esp+14Ch+var_13C], ecx
.text:0040EE11                 jbe     short loc_40EE46
.text:0040EE13                 mov     edi, [esp+14Ch+arg_8]
.text:0040EE1A                 lea     ebx, [esp+14Ch+var_114]
.text:0040EE1E                 mov     edx, [esp+14Ch+var_13C]
.text:0040EE22                 mov     [esp+14Ch+var_12C], ebx
.text:0040EE26                 mov     ebp, [esp+14Ch+arg_0]
.text:0040EE2D                 lea     eax, [esp+14Ch+var_11C]
.text:0040EE31                 imul    edi, edx
.text:0040EE34                 mov     [esp+14Ch+var_124], ebp
.text:0040EE38                 add     edi, ebp
.text:0040EE3A                 cmp     eax, ebx
.text:0040EE3C                 mov     [esp+14Ch+var_128], edi
.text:0040EE40                 jb      loc_40EF8F
.text:0040EE46
.text:0040EE46 loc_40EE46:                             ; CODE XREF: __quicksort+31↑j
.text:0040EE46                                         ; __quicksort+313↓j
.text:0040EE46                 mov     ebx, [esp+14Ch+arg_8]
.text:0040EE4D                 mov     edx, [esp+14Ch+var_13C]
.text:0040EE51                 mov     ecx, [esp+14Ch+arg_0]
.text:0040EE58                 mov     esi, [esp+14Ch+arg_0]
.text:0040EE5F                 imul    ebx, edx
.text:0040EE62                 mov     edi, [esp+14Ch+var_120]
.text:0040EE66                 add     ebx, ecx
.text:0040EE68                 mov     [esp+14Ch+var_134], ebx
.text:0040EE6C                 lea     ebx, [edi+esi]
.text:0040EE6F                 cmp     ebx, [esp+14Ch+var_134]
.text:0040EE73                 jbe     short loc_40EE79
.text:0040EE75                 mov     ebx, [esp+14Ch+var_134]
.text:0040EE79
.text:0040EE79 loc_40EE79:                             ; CODE XREF: __quicksort+93↑j
.text:0040EE79                 mov     ebp, [esp+14Ch+arg_8]
.text:0040EE80                 lea     edi, [ebp+esi+0]
.text:0040EE84                 cmp     edi, ebx
.text:0040EE86                 mov     ebp, edi
.text:0040EE88                 jbe     loc_40EF67
.text:0040EE8E
.text:0040EE8E loc_40EE8E:                             ; CODE XREF: __quicksort+1A6↓j
.text:0040EE8E                 cmp     esi, [esp+14Ch+arg_0]
.text:0040EE95                 jz      short loc_40EEB6
.text:0040EE97                 mov     edi, [esp+14Ch+arg_8]
.text:0040EE9E                 mov     ebx, esi
.text:0040EEA0                 mov     ecx, [esp+14Ch+arg_0]
.text:0040EEA7
.text:0040EEA7 loc_40EEA7:                             ; CODE XREF: __quicksort+D4↓j
.text:0040EEA7                 movzx   edx, byte ptr [ebx]
.text:0040EEAA                 movzx   eax, byte ptr [ecx]
.text:0040EEAD                 mov     [ebx], al
.text:0040EEAF                 inc     ebx
.text:0040EEB0                 mov     [ecx], dl
.text:0040EEB2                 inc     ecx
.text:0040EEB3                 dec     edi
.text:0040EEB4                 jnz     short loc_40EEA7
.text:0040EEB6
.text:0040EEB6 loc_40EEB6:                             ; CODE XREF: __quicksort+B5↑j
.text:0040EEB6                 mov     esi, [esp+14Ch+arg_8]
.text:0040EEBD                 lea     edi, [esi+ebp]
.text:0040EEC0                 cmp     edi, [esp+14Ch+var_134]
.text:0040EEC4                 ja      loc_40EF5C
.text:0040EECA
.text:0040EECA loc_40EECA:                             ; CODE XREF: __quicksort+176↓j
.text:0040EECA                 mov     esi, edi
.text:0040EECC                 lea     esi, [esi+0]
.text:0040EED0
.text:0040EED0 loc_40EED0:                             ; CODE XREF: __quicksort+109↓j
.text:0040EED0                 mov     [esp+14Ch+var_14C], edi
.text:0040EED3                 mov     ebx, [esp+14Ch+arg_8]
.text:0040EEDA                 sub     esi, ebx
.text:0040EEDC                 mov     [esp+14Ch+var_148], esi
.text:0040EEE0                 call    [esp+14Ch+arg_C]
.text:0040EEE7                 test    eax, eax
.text:0040EEE9                 js      short loc_40EED0
.text:0040EEEB                 mov     edx, [esp+14Ch+arg_8]
.text:0040EEF2                 mov     eax, [esp+14Ch+arg_8]
.text:0040EEF9                 add     esi, edx
.text:0040EEFB                 cmp     esi, edi
.text:0040EEFD                 lea     ebp, [eax+edi]
.text:0040EF00                 jz      short loc_40EF50
.text:0040EF02                 lea     ebx, [ebp-1]
.text:0040EF05                 cmp     ebx, edi
.text:0040EF07                 jb      short loc_40EF50
.text:0040EF09                 lea     esi, [esi+0]
.text:0040EF10
.text:0040EF10 loc_40EF10:                             ; CODE XREF: __quicksort+16E↓j
.text:0040EF10                 movzx   ecx, byte ptr [ebx]
.text:0040EF13                 mov     edx, ebx
.text:0040EF15                 mov     eax, [esp+14Ch+arg_8]
.text:0040EF1C                 mov     [esp+14Ch+var_135], cl
.text:0040EF20                 sub     edx, eax
.text:0040EF22                 cmp     edx, esi
.text:0040EF24                 mov     ecx, ebx
.text:0040EF26                 jb      short loc_40EF44
.text:0040EF28                 nop
.text:0040EF29                 lea     esi, [esi+0]
.text:0040EF30
.text:0040EF30 loc_40EF30:                             ; CODE XREF: __quicksort+162↓j
.text:0040EF30                 movzx   eax, byte ptr [edx]
.text:0040EF33                 mov     [ecx], al
.text:0040EF35                 mov     eax, [esp+14Ch+arg_8]
.text:0040EF3C                 mov     ecx, edx
.text:0040EF3E                 sub     edx, eax
.text:0040EF40                 cmp     edx, esi
.text:0040EF42                 jnb     short loc_40EF30
.text:0040EF44
.text:0040EF44 loc_40EF44:                             ; CODE XREF: __quicksort+146↑j
.text:0040EF44                 movzx   eax, [esp+14Ch+var_135]
.text:0040EF49                 dec     ebx
.text:0040EF4A                 cmp     ebx, edi
.text:0040EF4C                 mov     [ecx], al
.text:0040EF4E                 jnb     short loc_40EF10
.text:0040EF50
.text:0040EF50 loc_40EF50:                             ; CODE XREF: __quicksort+120↑j
.text:0040EF50                                         ; __quicksort+127↑j
.text:0040EF50                 cmp     ebp, [esp+14Ch+var_134]
.text:0040EF54                 mov     edi, ebp
.text:0040EF56                 jbe     loc_40EECA
.text:0040EF5C
.text:0040EF5C loc_40EF5C:                             ; CODE XREF: __quicksort+21↑j
.text:0040EF5C                                         ; __quicksort+E4↑j
.text:0040EF5C                 add     esp, 13Ch
.text:0040EF62                 pop     ebx
.text:0040EF63                 pop     esi
.text:0040EF64                 pop     edi
.text:0040EF65                 pop     ebp
.text:0040EF66                 retn
.text:0040EF67 ; ---------------------------------------------------------------------------
.text:0040EF67
.text:0040EF67 loc_40EF67:                             ; CODE XREF: __quicksort+A8↑j
.text:0040EF67                                         ; __quicksort+1A4↓j
.text:0040EF67                 mov     [esp+14Ch+var_148], esi
.text:0040EF6B                 mov     [esp+14Ch+var_14C], edi
.text:0040EF6E                 call    [esp+14Ch+arg_C]
.text:0040EF75                 test    eax, eax
.text:0040EF77                 js      short loc_40EF8B
.text:0040EF79
.text:0040EF79 loc_40EF79:                             ; CODE XREF: __quicksort+1AD↓j
.text:0040EF79                 mov     ecx, [esp+14Ch+arg_8]
.text:0040EF80                 add     edi, ecx
.text:0040EF82                 cmp     edi, ebx
.text:0040EF84                 jbe     short loc_40EF67
.text:0040EF86                 jmp     loc_40EE8E
.text:0040EF8B ; ---------------------------------------------------------------------------
.text:0040EF8B
.text:0040EF8B loc_40EF8B:                             ; CODE XREF: __quicksort+197↑j
.text:0040EF8B                 mov     esi, edi
.text:0040EF8D                 jmp     short loc_40EF79
.text:0040EF8F ; ---------------------------------------------------------------------------
.text:0040EF8F
.text:0040EF8F loc_40EF8F:                             ; CODE XREF: __quicksort+60↑j
.text:0040EF8F                                         ; __quicksort+30D↓j
.text:0040EF8F                 mov     eax, [esp+14Ch+var_128]
.text:0040EF93                 xor     edx, edx
.text:0040EF95                 mov     ebp, [esp+14Ch+var_124]
.text:0040EF99                 mov     edi, [esp+14Ch+arg_8]
.text:0040EFA0                 mov     ebx, [esp+14Ch+var_124]
.text:0040EFA4                 sub     eax, ebp
.text:0040EFA6                 div     [esp+14Ch+arg_8]
.text:0040EFAD                 mov     ecx, [esp+14Ch+var_124]
.text:0040EFB1                 mov     [esp+14Ch+var_148], ecx
.text:0040EFB5                 shr     eax, 1
.text:0040EFB7                 imul    eax, edi
.text:0040EFBA                 add     eax, ebx
.text:0040EFBC                 mov     [esp+14Ch+var_130], eax
.text:0040EFC0                 mov     esi, [esp+14Ch+var_130]
.text:0040EFC4                 mov     [esp+14Ch+var_14C], esi
.text:0040EFC7                 call    [esp+14Ch+arg_C]
.text:0040EFCE                 test    eax, eax
.text:0040EFD0                 js      loc_40F1D4
.text:0040EFD6
.text:0040EFD6 loc_40EFD6:                             ; CODE XREF: __quicksort+412↓j
.text:0040EFD6                 mov     edx, [esp+14Ch+var_130]
.text:0040EFDA                 mov     eax, [esp+14Ch+var_128]
.text:0040EFDE                 mov     [esp+14Ch+var_148], edx
.text:0040EFE2                 mov     [esp+14Ch+var_14C], eax
.text:0040EFE5                 call    [esp+14Ch+arg_C]
.text:0040EFEC                 test    eax, eax
.text:0040EFEE                 js      loc_40F175
.text:0040EFF4
.text:0040EFF4 loc_40EFF4:                             ; CODE XREF: __quicksort+3CB↓j
.text:0040EFF4                                         ; __quicksort+3EF↓j
.text:0040EFF4                 mov     edi, [esp+14Ch+arg_8]
.text:0040EFFB                 mov     ebp, [esp+14Ch+var_124]
.text:0040EFFF                 mov     ebx, [esp+14Ch+arg_8]
.text:0040F006                 add     ebp, edi
.text:0040F008                 mov     edi, [esp+14Ch+var_128]
.text:0040F00C                 sub     edi, ebx
.text:0040F00E                 mov     esi, esi
.text:0040F010
.text:0040F010 loc_40F010:                             ; CODE XREF: __quicksort+2C7↓j
.text:0040F010                                         ; __quicksort+390↓j
.text:0040F010                 mov     [esp+14Ch+var_14C], ebp
.text:0040F013                 mov     esi, [esp+14Ch+var_130]
.text:0040F017                 mov     [esp+14Ch+var_148], esi
.text:0040F01B                 call    [esp+14Ch+arg_C]
.text:0040F022                 test    eax, eax
.text:0040F024                 js      loc_40F167
.text:0040F02A                 lea     esi, [esi+0]
.text:0040F030
.text:0040F030 loc_40F030:                             ; CODE XREF: __quicksort+26F↓j
.text:0040F030                 mov     [esp+14Ch+var_148], edi
.text:0040F034                 mov     eax, [esp+14Ch+var_130]
.text:0040F038                 mov     [esp+14Ch+var_14C], eax
.text:0040F03B                 call    [esp+14Ch+arg_C]
.text:0040F042                 test    eax, eax
.text:0040F044                 jns     short loc_40F051
.text:0040F046                 mov     ecx, [esp+14Ch+arg_8]
.text:0040F04D                 sub     edi, ecx
.text:0040F04F                 jmp     short loc_40F030
.text:0040F051 ; ---------------------------------------------------------------------------
.text:0040F051
.text:0040F051 loc_40F051:                             ; CODE XREF: __quicksort+264↑j
.text:0040F051                 cmp     ebp, edi
.text:0040F053                 jnb     loc_40F14E
.text:0040F059                 mov     esi, [esp+14Ch+arg_8]
.text:0040F060                 mov     ebx, ebp
.text:0040F062                 mov     ecx, edi
.text:0040F064                 lea     esi, [esi+0]
.text:0040F06A                 lea     edi, [edi+0]
.text:0040F070
.text:0040F070 loc_40F070:                             ; CODE XREF: __quicksort+29D↓j
.text:0040F070                 movzx   edx, byte ptr [ebx]
.text:0040F073                 movzx   eax, byte ptr [ecx]
.text:0040F076                 mov     [ebx], al
.text:0040F078                 inc     ebx
.text:0040F079                 mov     [ecx], dl
.text:0040F07B                 inc     ecx
.text:0040F07C                 dec     esi
.text:0040F07D                 jnz     short loc_40F070
.text:0040F07F                 cmp     [esp+14Ch+var_130], ebp
.text:0040F083                 jz      loc_40F145
.text:0040F089                 cmp     [esp+14Ch+var_130], edi
.text:0040F08D                 jz      loc_40F13C
.text:0040F093
.text:0040F093 loc_40F093:                             ; CODE XREF: __quicksort+360↓j
.text:0040F093                                         ; __quicksort+369↓j
.text:0040F093                 mov     edx, [esp+14Ch+arg_8]
.text:0040F09A                 mov     ebx, [esp+14Ch+arg_8]
.text:0040F0A1                 add     ebp, edx
.text:0040F0A3                 sub     edi, ebx
.text:0040F0A5
.text:0040F0A5 loc_40F0A5:                             ; CODE XREF: __quicksort+370↓j
.text:0040F0A5                 cmp     ebp, edi
.text:0040F0A7                 jbe     loc_40F010
.text:0040F0AD
.text:0040F0AD loc_40F0AD:                             ; CODE XREF: __quicksort+382↓j
.text:0040F0AD                 mov     esi, [esp+14Ch+var_124]
.text:0040F0B1                 mov     eax, edi
.text:0040F0B3                 sub     eax, esi
.text:0040F0B5                 cmp     eax, [esp+14Ch+var_120]
.text:0040F0B9                 ja      short loc_40F0F8
.text:0040F0BB                 mov     [esp+14Ch+var_124], ebp
.text:0040F0BF                 mov     edi, [esp+14Ch+var_128]
.text:0040F0C3                 sub     edi, ebp
.text:0040F0C5                 cmp     edi, [esp+14Ch+var_120]
.text:0040F0C9                 ja      short loc_40F0E5
.text:0040F0CB                 sub     [esp+14Ch+var_12C], 8
.text:0040F0D0                 mov     edx, [esp+14Ch+var_12C]
.text:0040F0D4                 mov     ecx, [esp+14Ch+var_12C]
.text:0040F0D8                 mov     ebx, [edx]
.text:0040F0DA                 mov     ebp, [ecx+4]
.text:0040F0DD                 mov     [esp+14Ch+var_124], ebx
.text:0040F0E1                 mov     [esp+14Ch+var_128], ebp
.text:0040F0E5
.text:0040F0E5 loc_40F0E5:                             ; CODE XREF: __quicksort+2E9↑j
.text:0040F0E5                                         ; __quicksort+340↓j ...
.text:0040F0E5                 lea     eax, [esp+14Ch+var_11C]
.text:0040F0E9                 cmp     eax, [esp+14Ch+var_12C]
.text:0040F0ED                 jb      loc_40EF8F
.text:0040F0F3                 jmp     loc_40EE46
.text:0040F0F8 ; ---------------------------------------------------------------------------
.text:0040F0F8
.text:0040F0F8 loc_40F0F8:                             ; CODE XREF: __quicksort+2D9↑j
.text:0040F0F8                 mov     edx, [esp+14Ch+var_128]
.text:0040F0FC                 sub     edx, ebp
.text:0040F0FE                 cmp     edx, [esp+14Ch+var_120]
.text:0040F102                 jbe     short loc_40F136
.text:0040F104                 cmp     eax, edx
.text:0040F106                 jle     short loc_40F122
.text:0040F108                 mov     ecx, [esp+14Ch+var_12C]
.text:0040F10C                 mov     ebx, [esp+14Ch+var_124]
.text:0040F110                 mov     [esp+14Ch+var_124], ebp
.text:0040F114                 mov     [ecx+4], edi
.text:0040F117                 mov     [ecx], ebx
.text:0040F119                 add     ecx, 8
.text:0040F11C                 mov     [esp+14Ch+var_12C], ecx
.text:0040F120                 jmp     short loc_40F0E5
.text:0040F122 ; ---------------------------------------------------------------------------
.text:0040F122
.text:0040F122 loc_40F122:                             ; CODE XREF: __quicksort+326↑j
.text:0040F122                 mov     esi, [esp+14Ch+var_12C]
.text:0040F126                 mov     [esi], ebp
.text:0040F128                 mov     ebp, [esp+14Ch+var_128]
.text:0040F12C                 mov     [esi+4], ebp
.text:0040F12F                 add     esi, 8
.text:0040F132                 mov     [esp+14Ch+var_12C], esi
.text:0040F136
.text:0040F136 loc_40F136:                             ; CODE XREF: __quicksort+322↑j
.text:0040F136                 mov     [esp+14Ch+var_128], edi
.text:0040F13A                 jmp     short loc_40F0E5
.text:0040F13C ; ---------------------------------------------------------------------------
.text:0040F13C
.text:0040F13C loc_40F13C:                             ; CODE XREF: __quicksort+2AD↑j
.text:0040F13C                 mov     [esp+14Ch+var_130], ebp
.text:0040F140                 jmp     loc_40F093
.text:0040F145 ; ---------------------------------------------------------------------------
.text:0040F145
.text:0040F145 loc_40F145:                             ; CODE XREF: __quicksort+2A3↑j
.text:0040F145                 mov     [esp+14Ch+var_130], edi
.text:0040F149                 jmp     loc_40F093
.text:0040F14E ; ---------------------------------------------------------------------------
.text:0040F14E
.text:0040F14E loc_40F14E:                             ; CODE XREF: __quicksort+273↑j
.text:0040F14E                 cmp     ebp, edi
.text:0040F150                 jnz     loc_40F0A5
.text:0040F156                 mov     esi, [esp+14Ch+arg_8]
.text:0040F15D                 lea     ebp, [esi+edi]
.text:0040F160                 sub     edi, esi
.text:0040F162                 jmp     loc_40F0AD
.text:0040F167 ; ---------------------------------------------------------------------------
.text:0040F167
.text:0040F167 loc_40F167:                             ; CODE XREF: __quicksort+244↑j
.text:0040F167                 mov     edx, [esp+14Ch+arg_8]
.text:0040F16E                 add     ebp, edx
.text:0040F170                 jmp     loc_40F010
.text:0040F175 ; ---------------------------------------------------------------------------
.text:0040F175
.text:0040F175 loc_40F175:                             ; CODE XREF: __quicksort+20E↑j
.text:0040F175                 mov     esi, [esp+14Ch+arg_8]
.text:0040F17C                 mov     ebx, [esp+14Ch+var_130]
.text:0040F180                 mov     ecx, [esp+14Ch+var_128]
.text:0040F184
.text:0040F184 loc_40F184:                             ; CODE XREF: __quicksort+3B1↓j
.text:0040F184                 movzx   edx, byte ptr [ebx]
.text:0040F187                 movzx   eax, byte ptr [ecx]
.text:0040F18A                 mov     [ebx], al
.text:0040F18C                 inc     ebx
.text:0040F18D                 mov     [ecx], dl
.text:0040F18F                 inc     ecx
.text:0040F190                 dec     esi
.text:0040F191                 jnz     short loc_40F184
.text:0040F193                 mov     ecx, [esp+14Ch+var_124]
.text:0040F197                 mov     esi, [esp+14Ch+var_130]
.text:0040F19B                 mov     [esp+14Ch+var_148], ecx
.text:0040F19F                 mov     [esp+14Ch+var_14C], esi
.text:0040F1A2                 call    [esp+14Ch+arg_C]
.text:0040F1A9                 test    eax, eax
.text:0040F1AB                 jns     loc_40EFF4
.text:0040F1B1                 mov     esi, [esp+14Ch+arg_8]
.text:0040F1B8                 mov     ebx, [esp+14Ch+var_130]
.text:0040F1BC                 mov     ecx, [esp+14Ch+var_124]
.text:0040F1C0
.text:0040F1C0 loc_40F1C0:                             ; CODE XREF: __quicksort+3ED↓j
.text:0040F1C0                 movzx   edx, byte ptr [ebx]
.text:0040F1C3                 movzx   eax, byte ptr [ecx]
.text:0040F1C6                 mov     [ebx], al
.text:0040F1C8                 inc     ebx
.text:0040F1C9                 mov     [ecx], dl
.text:0040F1CB                 inc     ecx
.text:0040F1CC                 dec     esi
.text:0040F1CD                 jnz     short loc_40F1C0
.text:0040F1CF                 jmp     loc_40EFF4
.text:0040F1D4 ; ---------------------------------------------------------------------------
.text:0040F1D4
.text:0040F1D4 loc_40F1D4:                             ; CODE XREF: __quicksort+1F0↑j
.text:0040F1D4                 mov     esi, [esp+14Ch+arg_8]
.text:0040F1DB                 mov     ebx, [esp+14Ch+var_130]
.text:0040F1DF                 mov     ecx, [esp+14Ch+var_124]
.text:0040F1E3
.text:0040F1E3 loc_40F1E3:                             ; CODE XREF: __quicksort+410↓j
.text:0040F1E3                 movzx   edx, byte ptr [ebx]
.text:0040F1E6                 movzx   eax, byte ptr [ecx]
.text:0040F1E9                 mov     [ebx], al
.text:0040F1EB                 inc     ebx
.text:0040F1EC                 mov     [ecx], dl
.text:0040F1EE                 inc     ecx
.text:0040F1EF                 dec     esi
.text:0040F1F0                 jnz     short loc_40F1E3
.text:0040F1F2                 jmp     loc_40EFD6
.text:0040F1F2 __quicksort     endp
.text:0040F1F2
.text:0040F1F2 ; ---------------------------------------------------------------------------
.text:0040F1F7                 align 10h
.text:0040F200
.text:0040F200 ; =============== S U B R O U T I N E =======================================
.text:0040F200
.text:0040F200 ; Attributes: info_from_lumina
.text:0040F200
.text:0040F200 _sysconf        proc near               ; CODE XREF: sub_40CB00+F7↑p
.text:0040F200                                         ; sub_40CB00+11E↑p
.text:0040F200
.text:0040F200 arg_0           = dword ptr  4
.text:0040F200
.text:0040F200                 sub     esp, 0Ch
.text:0040F203                 mov     eax, [esp+0Ch+arg_0]
.text:0040F207                 cmp     eax, 83h        ; switch 132 cases
.text:0040F20C                 ja      def_40F212      ; jumptable 67026652 default case, cases 50,56
.text:0040F20C                                         ; jumptable 0040F212 default case, cases 50,56
.text:0040F212                 jmp     ds:jpt_40F212[eax*4] ; switch jump
.text:0040F212 ; ---------------------------------------------------------------------------
.text:0040F219                 align 4
.text:0040F21C jpt_40F212      dd offset loc_40F454, offset loc_40F454, offset loc_40F454
.text:0040F21C                                         ; DATA XREF: _sysconf+12↑r
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C ; jump table for switch statement
.text:0040F21C                 dd offset loc_40F45B, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F508, offset loc_40F440
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F477, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset def_40F212
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F47E, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset def_40F212
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F485, offset loc_40F485, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F48C
.text:0040F21C                 dd offset loc_40F494, offset loc_40F49C, offset loc_40F4A4
.text:0040F21C                 dd offset loc_40F4BA, offset loc_40F4AC, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F4B3
.text:0040F21C                 dd offset loc_40F4E0, offset loc_40F4EA, offset loc_40F4BA
.text:0040F21C                 dd offset loc_40F4C1, offset loc_40F4C8, offset loc_40F4C8
.text:0040F21C                 dd offset loc_40F4CF, offset loc_40F4D9, offset loc_40F4F4
.text:0040F21C                 dd offset loc_40F4E0, offset loc_40F4EA, offset loc_40F4F4
.text:0040F21C                 dd offset loc_40F4FE, offset loc_40F508, offset loc_40F440
.text:0040F21C                 dd offset loc_40F440, offset loc_40F512, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F21C                 dd offset loc_40F51C, offset loc_40F51C, offset loc_40F51C
.text:0040F42C ; ---------------------------------------------------------------------------
.text:0040F42C
.text:0040F42C def_40F212:                             ; CODE XREF: _sysconf+C↑j
.text:0040F42C                                         ; _sysconf+12↑j
.text:0040F42C                                         ; DATA XREF: ...
.text:0040F42C                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:0040F42C                                         ; jumptable 0040F212 default case, cases 50,56
.text:0040F431                 mov     dword ptr [eax], 16h
.text:0040F437                 mov     esi, esi
.text:0040F439                 lea     edi, [edi+0]
.text:0040F440
.text:0040F440 loc_40F440:                             ; CODE XREF: _sysconf+12↑j
.text:0040F440                                         ; _sysconf+327↓j
.text:0040F440                                         ; DATA XREF: ...
.text:0040F440                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:0040F440                                         ; jumptable 0040F212 cases 41,116,117
.text:0040F445                 lea     esi, [esi+0]
.text:0040F449                 lea     edi, [edi+0]
.text:0040F450
.text:0040F450 loc_40F450:                             ; CODE XREF: _sysconf+259↓j
.text:0040F450                                         ; _sysconf+26C↓j ...
.text:0040F450                 add     esp, 0Ch
.text:0040F453                 retn
.text:0040F454 ; ---------------------------------------------------------------------------
.text:0040F454
.text:0040F454 loc_40F454:                             ; CODE XREF: _sysconf+12↑j
.text:0040F454                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F454                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:0040F454                                         ; jumptable 0040F212 cases 0-2
.text:0040F459                 jmp     short loc_40F450
.text:0040F45B ; ---------------------------------------------------------------------------
.text:0040F45B
.text:0040F45B loc_40F45B:                             ; CODE XREF: _sysconf+12↑j
.text:0040F45B                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F45B                 call    sub_40F940      ; jumptable 67026652 case 6
.text:0040F45B                                         ; jumptable 0040F212 case 6
.text:0040F460                 cmp     eax, 6
.text:0040F463                 mov     edx, 6
.text:0040F468                 jg      short loc_40F46E
.text:0040F46A
.text:0040F46A loc_40F46A:                             ; CODE XREF: _sysconf+275↓j
.text:0040F46A                 mov     eax, edx
.text:0040F46C                 jmp     short loc_40F450
.text:0040F46E ; ---------------------------------------------------------------------------
.text:0040F46E
.text:0040F46E loc_40F46E:                             ; CODE XREF: _sysconf+268↑j
.text:0040F46E                 call    sub_40F940
.text:0040F473                 mov     edx, eax
.text:0040F475                 jmp     short loc_40F46A
.text:0040F477 ; ---------------------------------------------------------------------------
.text:0040F477
.text:0040F477 loc_40F477:                             ; CODE XREF: _sysconf+12↑j
.text:0040F477                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F477                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:0040F477                                         ; jumptable 0040F212 case 45
.text:0040F47C                 jmp     short loc_40F450
.text:0040F47E ; ---------------------------------------------------------------------------
.text:0040F47E
.text:0040F47E loc_40F47E:                             ; CODE XREF: _sysconf+12↑j
.text:0040F47E                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F47E                 mov     eax, 1          ; jumptable 67026652 case 52
.text:0040F47E                                         ; jumptable 0040F212 case 52
.text:0040F483                 jmp     short loc_40F450
.text:0040F485 ; ---------------------------------------------------------------------------
.text:0040F485
.text:0040F485 loc_40F485:                             ; CODE XREF: _sysconf+12↑j
.text:0040F485                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F485                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:0040F485                                         ; jumptable 0040F212 cases 69,70
.text:0040F48A                 jmp     short loc_40F450
.text:0040F48C ; ---------------------------------------------------------------------------
.text:0040F48C
.text:0040F48C loc_40F48C:                             ; CODE XREF: _sysconf+12↑j
.text:0040F48C                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F48C                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:0040F48C                                         ; jumptable 0040F212 case 83
.text:0040F48F                 jmp     sub_40F830
.text:0040F494 ; ---------------------------------------------------------------------------
.text:0040F494
.text:0040F494 loc_40F494:                             ; CODE XREF: _sysconf+12↑j
.text:0040F494                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F494                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:0040F494                                         ; jumptable 0040F212 case 84
.text:0040F497                 jmp     sub_40F7E0
.text:0040F49C ; ---------------------------------------------------------------------------
.text:0040F49C
.text:0040F49C loc_40F49C:                             ; CODE XREF: _sysconf+12↑j
.text:0040F49C                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F49C                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:0040F49C                                         ; jumptable 0040F212 case 85
.text:0040F49F                 jmp     sub_40F880
.text:0040F4A4 ; ---------------------------------------------------------------------------
.text:0040F4A4
.text:0040F4A4 loc_40F4A4:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4A4                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4A4                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:0040F4A4                                         ; jumptable 0040F212 case 86
.text:0040F4A7                 jmp     sub_40F8E0
.text:0040F4AC ; ---------------------------------------------------------------------------
.text:0040F4AC
.text:0040F4AC loc_40F4AC:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4AC                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4AC                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:0040F4AC                                         ; jumptable 0040F212 case 88
.text:0040F4B1                 jmp     short loc_40F450
.text:0040F4B3 ; ---------------------------------------------------------------------------
.text:0040F4B3
.text:0040F4B3 loc_40F4B3:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4B3                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4B3                 mov     eax, 8          ; jumptable 67026652 case 101
.text:0040F4B3                                         ; jumptable 0040F212 case 101
.text:0040F4B8                 jmp     short loc_40F450
.text:0040F4BA ; ---------------------------------------------------------------------------
.text:0040F4BA
.text:0040F4BA loc_40F4BA:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4BA                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4BA                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:0040F4BA                                         ; jumptable 0040F212 cases 87,104
.text:0040F4BF                 jmp     short loc_40F450
.text:0040F4C1 ; ---------------------------------------------------------------------------
.text:0040F4C1
.text:0040F4C1 loc_40F4C1:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4C1                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4C1                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:0040F4C1                                         ; jumptable 0040F212 case 105
.text:0040F4C6                 jmp     short loc_40F450
.text:0040F4C8 ; ---------------------------------------------------------------------------
.text:0040F4C8
.text:0040F4C8 loc_40F4C8:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4C8                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4C8                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:0040F4C8                                         ; jumptable 0040F212 cases 106,107
.text:0040F4CD                 jmp     short loc_40F450
.text:0040F4CF ; ---------------------------------------------------------------------------
.text:0040F4CF
.text:0040F4CF loc_40F4CF:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4CF                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4CF                 mov     eax, 2          ; jumptable 67026652 case 108
.text:0040F4CF                                         ; jumptable 0040F212 case 108
.text:0040F4D4                 jmp     loc_40F450
.text:0040F4D9 ; ---------------------------------------------------------------------------
.text:0040F4D9
.text:0040F4D9 loc_40F4D9:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4D9                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4D9                 xor     eax, eax        ; jumptable 67026652 case 109
.text:0040F4D9                                         ; jumptable 0040F212 case 109
.text:0040F4DB                 jmp     loc_40F450
.text:0040F4E0 ; ---------------------------------------------------------------------------
.text:0040F4E0
.text:0040F4E0 loc_40F4E0:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4E0                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4E0                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:0040F4E0                                         ; jumptable 0040F212 cases 102,111
.text:0040F4E5                 jmp     loc_40F450
.text:0040F4EA ; ---------------------------------------------------------------------------
.text:0040F4EA
.text:0040F4EA loc_40F4EA:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4EA                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4EA                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:0040F4EA                                         ; jumptable 0040F212 cases 103,112
.text:0040F4EF                 jmp     loc_40F450
.text:0040F4F4 ; ---------------------------------------------------------------------------
.text:0040F4F4
.text:0040F4F4 loc_40F4F4:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4F4                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4F4                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:0040F4F4                                         ; jumptable 0040F212 cases 110,113
.text:0040F4F9                 jmp     loc_40F450
.text:0040F4FE ; ---------------------------------------------------------------------------
.text:0040F4FE
.text:0040F4FE loc_40F4FE:                             ; CODE XREF: _sysconf+12↑j
.text:0040F4FE                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F4FE                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:0040F4FE                                         ; jumptable 0040F212 case 114
.text:0040F503                 jmp     loc_40F450
.text:0040F508 ; ---------------------------------------------------------------------------
.text:0040F508
.text:0040F508 loc_40F508:                             ; CODE XREF: _sysconf+12↑j
.text:0040F508                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F508                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:0040F508                                         ; jumptable 0040F212 cases 40,115
.text:0040F50D                 jmp     loc_40F450
.text:0040F512 ; ---------------------------------------------------------------------------
.text:0040F512
.text:0040F512 loc_40F512:                             ; CODE XREF: _sysconf+12↑j
.text:0040F512                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F512                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:0040F512                                         ; jumptable 0040F212 case 118
.text:0040F517                 jmp     loc_40F450
.text:0040F51C ; ---------------------------------------------------------------------------
.text:0040F51C
.text:0040F51C loc_40F51C:                             ; CODE XREF: _sysconf+12↑j
.text:0040F51C                                         ; DATA XREF: _sysconf:jpt_40F212↑o
.text:0040F51C                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0040F51C                                         ; jumptable 0040F212 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0040F521                 mov     dword ptr [eax], 28h ; '('
.text:0040F527                 jmp     loc_40F440      ; jumptable 67026652 cases 41,116,117
.text:0040F527 _sysconf        endp                    ; jumptable 0040F212 cases 41,116,117
.text:0040F527
.text:0040F527 ; ---------------------------------------------------------------------------
.text:0040F52C                 align 10h
.text:0040F530
.text:0040F530 ; =============== S U B R O U T I N E =======================================
.text:0040F530
.text:0040F530
.text:0040F530 sub_40F530      proc near               ; CODE XREF: sub_40C910+134↑p
.text:0040F530                                         ; sub_40C910+167↑p
.text:0040F530
.text:0040F530 var_1C          = dword ptr -1Ch
.text:0040F530 var_18          = dword ptr -18h
.text:0040F530 var_14          = dword ptr -14h
.text:0040F530 arg_0           = dword ptr  4
.text:0040F530 arg_4           = dword ptr  8
.text:0040F530 arg_8           = dword ptr  0Ch
.text:0040F530
.text:0040F530                 push    edi
.text:0040F531                 push    esi
.text:0040F532                 push    ebx
.text:0040F533                 sub     esp, 10h
.text:0040F536                 mov     edi, [esp+1Ch+arg_8]
.text:0040F53A                 mov     esi, [esp+1Ch+arg_0]
.text:0040F53E                 mov     ebx, [esp+1Ch+arg_4]
.text:0040F542                 cmp     edi, 0Fh
.text:0040F545                 jbe     short loc_40F590
.text:0040F547                 mov     ecx, esi
.text:0040F549                 neg     ecx
.text:0040F54B                 and     ecx, 3
.text:0040F54E                 sub     edi, ecx
.text:0040F550                 mov     edx, ecx
.text:0040F552                 test    ecx, ecx
.text:0040F554                 jz      short loc_40F56A
.text:0040F556                 lea     esi, [esi+0]
.text:0040F559                 lea     edi, [edi+0]
.text:0040F560
.text:0040F560 loc_40F560:                             ; CODE XREF: sub_40F530+38↓j
.text:0040F560                 movzx   ecx, byte ptr [ebx]
.text:0040F563                 inc     ebx
.text:0040F564                 mov     [esi], cl
.text:0040F566                 inc     esi
.text:0040F567                 dec     edx
.text:0040F568                 jnz     short loc_40F560
.text:0040F56A
.text:0040F56A loc_40F56A:                             ; CODE XREF: sub_40F530+24↑j
.text:0040F56A                 test    bl, 3
.text:0040F56D                 jnz     short loc_40F5B3
.text:0040F56F                 mov     [esp+1Ch+var_18], ebx
.text:0040F573                 mov     edx, edi
.text:0040F575                 shr     edx, 2
.text:0040F578                 mov     [esp+1Ch+var_14], edx
.text:0040F57C                 mov     [esp+1Ch+var_1C], esi
.text:0040F57F                 call    sub_40F960
.text:0040F584
.text:0040F584 loc_40F584:                             ; CODE XREF: sub_40F530+98↓j
.text:0040F584                 mov     edx, edi
.text:0040F586                 and     edx, 0FFFFFFFCh
.text:0040F589                 and     edi, 3
.text:0040F58C                 add     ebx, edx
.text:0040F58E                 add     esi, edx
.text:0040F590
.text:0040F590 loc_40F590:                             ; CODE XREF: sub_40F530+15↑j
.text:0040F590                 test    edi, edi
.text:0040F592                 mov     edx, edi
.text:0040F594                 jz      short loc_40F5AA
.text:0040F596                 lea     esi, [esi+0]
.text:0040F599                 lea     edi, [edi+0]
.text:0040F5A0
.text:0040F5A0 loc_40F5A0:                             ; CODE XREF: sub_40F530+78↓j
.text:0040F5A0                 movzx   ecx, byte ptr [ebx]
.text:0040F5A3                 inc     ebx
.text:0040F5A4                 mov     [esi], cl
.text:0040F5A6                 inc     esi
.text:0040F5A7                 dec     edx
.text:0040F5A8                 jnz     short loc_40F5A0
.text:0040F5AA
.text:0040F5AA loc_40F5AA:                             ; CODE XREF: sub_40F530+64↑j
.text:0040F5AA                 add     esp, 10h
.text:0040F5AD                 mov     eax, esi
.text:0040F5AF                 pop     ebx
.text:0040F5B0                 pop     esi
.text:0040F5B1                 pop     edi
.text:0040F5B2                 retn
.text:0040F5B3 ; ---------------------------------------------------------------------------
.text:0040F5B3
.text:0040F5B3 loc_40F5B3:                             ; CODE XREF: sub_40F530+3D↑j
.text:0040F5B3                 mov     [esp+1Ch+var_18], ebx
.text:0040F5B7                 mov     ecx, edi
.text:0040F5B9                 shr     ecx, 2
.text:0040F5BC                 mov     [esp+1Ch+var_14], ecx
.text:0040F5C0                 mov     [esp+1Ch+var_1C], esi
.text:0040F5C3                 call    sub_40FA60
.text:0040F5C8                 jmp     short loc_40F584
.text:0040F5C8 sub_40F530      endp
.text:0040F5C8
.text:0040F5C8 ; ---------------------------------------------------------------------------
.text:0040F5CA                 align 10h
.text:0040F5D0
.text:0040F5D0 ; =============== S U B R O U T I N E =======================================
.text:0040F5D0
.text:0040F5D0
.text:0040F5D0 sub_40F5D0      proc near               ; CODE XREF: sub_40CC80+17↑p
.text:0040F5D0
.text:0040F5D0 hFindFile       = dword ptr -0Ch
.text:0040F5D0 var_8           = dword ptr -8
.text:0040F5D0 var_4           = dword ptr -4
.text:0040F5D0 arg_0           = dword ptr  4
.text:0040F5D0
.text:0040F5D0                 sub     esp, 0Ch
.text:0040F5D3                 mov     [esp+0Ch+var_4], esi
.text:0040F5D7                 mov     esi, [esp+0Ch+arg_0]
.text:0040F5DB                 mov     [esp+0Ch+var_8], ebx
.text:0040F5DF                 test    esi, esi
.text:0040F5E1                 jz      short loc_40F622
.text:0040F5E3                 mov     eax, [esi]
.text:0040F5E5                 cmp     eax, 0FFFFFFFFh
.text:0040F5E8                 jz      short loc_40F5FF
.text:0040F5EA                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0040F5ED                 call    FindClose
.text:0040F5F2                 sub     esp, 4
.text:0040F5F5                 test    eax, eax
.text:0040F5F7                 jz      short loc_40F612
.text:0040F5F9
.text:0040F5F9 loc_40F5F9:                             ; CODE XREF: sub_40F5D0+50↓j
.text:0040F5F9                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040F5FF
.text:0040F5FF loc_40F5FF:                             ; CODE XREF: sub_40F5D0+18↑j
.text:0040F5FF                 mov     dword ptr [esi+14h], 1
.text:0040F606
.text:0040F606 loc_40F606:                             ; CODE XREF: sub_40F5D0+5D↓j
.text:0040F606                 mov     ebx, [esp+0Ch+var_8]
.text:0040F60A                 mov     esi, [esp+0Ch+var_4]
.text:0040F60E                 add     esp, 0Ch
.text:0040F611                 retn
.text:0040F612 ; ---------------------------------------------------------------------------
.text:0040F612
.text:0040F612 loc_40F612:                             ; CODE XREF: sub_40F5D0+27↑j
.text:0040F612                 call    sub_40D0E0
.text:0040F617                 mov     ebx, eax
.text:0040F619                 call    _errno
.text:0040F61E                 mov     [eax], ebx
.text:0040F620                 jmp     short loc_40F5F9
.text:0040F622 ; ---------------------------------------------------------------------------
.text:0040F622
.text:0040F622 loc_40F622:                             ; CODE XREF: sub_40F5D0+11↑j
.text:0040F622                 call    _errno
.text:0040F627                 mov     dword ptr [eax], 16h
.text:0040F62D                 jmp     short loc_40F606
.text:0040F62D sub_40F5D0      endp
.text:0040F62D
.text:0040F62D ; ---------------------------------------------------------------------------
.text:0040F62F                 align 10h
.text:0040F630
.text:0040F630 ; =============== S U B R O U T I N E =======================================
.text:0040F630
.text:0040F630 ; Attributes: noreturn
.text:0040F630
.text:0040F630 sub_40F630      proc near               ; CODE XREF: .text:0040E369↑p
.text:0040F630                                         ; sub_40F630↓j
.text:0040F630                 jmp     short sub_40F630
.text:0040F630 sub_40F630      endp
.text:0040F630
.text:0040F630 ; ---------------------------------------------------------------------------
.text:0040F632                 align 10h
.text:0040F640
.text:0040F640 ; =============== S U B R O U T I N E =======================================
.text:0040F640
.text:0040F640
.text:0040F640 sub_40F640      proc near               ; CODE XREF: .text:0040E0C5↑p
.text:0040F640
.text:0040F640 FileHandle      = dword ptr -1Ch
.text:0040F640 dwFileOffsetLow = dword ptr -18h
.text:0040F640 dwFileOffsetHigh= dword ptr -14h
.text:0040F640 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040F640 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040F640 var_8           = dword ptr -8
.text:0040F640 var_4           = dword ptr -4
.text:0040F640 arg_0           = dword ptr  4
.text:0040F640
.text:0040F640                 sub     esp, 1Ch
.text:0040F643                 mov     edx, [esp+1Ch+arg_0]
.text:0040F647                 mov     [esp+1Ch+var_4], esi
.text:0040F64B                 mov     [esp+1Ch+var_8], ebx
.text:0040F64F                 mov     ebx, [edx+10h]
.text:0040F652                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040F655                 call    _get_osfhandle
.text:0040F65A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040F65D                 mov     esi, eax
.text:0040F65F                 call    _filelengthi64
.text:0040F664                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040F668                 cdq
.text:0040F669                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040F66C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040F670                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040F678                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040F680                 call    UnlockFile
.text:0040F685                 sub     esp, 14h
.text:0040F688                 mov     ebx, [esp+1Ch+var_8]
.text:0040F68C                 mov     esi, [esp+1Ch+var_4]
.text:0040F690                 add     esp, 1Ch
.text:0040F693                 retn
.text:0040F693 sub_40F640      endp
.text:0040F693
.text:0040F693 ; ---------------------------------------------------------------------------
.text:0040F694                 align 10h
.text:0040F6A0
.text:0040F6A0 ; =============== S U B R O U T I N E =======================================
.text:0040F6A0
.text:0040F6A0
.text:0040F6A0 ; int __cdecl sub_40F6A0(int, char *Control)
.text:0040F6A0 sub_40F6A0      proc near               ; CODE XREF: .text:0040DF86↑p
.text:0040F6A0                                         ; .text:0040DFD6↑p ...
.text:0040F6A0
.text:0040F6A0 Str             = dword ptr -1Ch
.text:0040F6A0 Val             = dword ptr -18h
.text:0040F6A0 var_8           = dword ptr -8
.text:0040F6A0 var_4           = dword ptr -4
.text:0040F6A0 arg_0           = dword ptr  4
.text:0040F6A0 Control         = dword ptr  8
.text:0040F6A0
.text:0040F6A0                 sub     esp, 1Ch
.text:0040F6A3                 xor     eax, eax
.text:0040F6A5                 mov     edx, [esp+1Ch+Control]
.text:0040F6A9                 mov     [esp+1Ch+var_4], esi
.text:0040F6AD                 mov     esi, [esp+1Ch+arg_0]
.text:0040F6B1                 mov     [esp+1Ch+var_8], ebx
.text:0040F6B5                 mov     ebx, [esi]
.text:0040F6B7                 test    ebx, ebx
.text:0040F6B9                 jz      short loc_40F6E8
.text:0040F6BB                 movzx   eax, byte ptr [edx]
.text:0040F6BE                 test    al, al
.text:0040F6C0                 jz      short loc_40F6E0
.text:0040F6C2                 cmp     byte ptr [edx+1], 0
.text:0040F6C6                 jnz     short loc_40F720
.text:0040F6C8                 movzx   ecx, byte ptr [ebx]
.text:0040F6CB                 mov     edx, ebx
.text:0040F6CD                 cmp     cl, al
.text:0040F6CF                 jz      short loc_40F712
.text:0040F6D1                 test    cl, cl
.text:0040F6D3                 jnz     short loc_40F6F4
.text:0040F6D5                 lea     esi, [esi+0]
.text:0040F6D9                 lea     edi, [edi+0]
.text:0040F6E0
.text:0040F6E0 loc_40F6E0:                             ; CODE XREF: sub_40F6A0+20↑j
.text:0040F6E0                                         ; sub_40F6A0+74↓j
.text:0040F6E0                 mov     dword ptr [esi], 0
.text:0040F6E6
.text:0040F6E6 loc_40F6E6:                             ; CODE XREF: sub_40F6A0+7C↓j
.text:0040F6E6                 mov     eax, ebx
.text:0040F6E8
.text:0040F6E8 loc_40F6E8:                             ; CODE XREF: sub_40F6A0+19↑j
.text:0040F6E8                 mov     ebx, [esp+1Ch+var_8]
.text:0040F6EC                 mov     esi, [esp+1Ch+var_4]
.text:0040F6F0                 add     esp, 1Ch
.text:0040F6F3                 retn
.text:0040F6F4 ; ---------------------------------------------------------------------------
.text:0040F6F4
.text:0040F6F4 loc_40F6F4:                             ; CODE XREF: sub_40F6A0+33↑j
.text:0040F6F4                 movsx   edx, al
.text:0040F6F7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040F6FB                 lea     edx, [ebx+1]
.text:0040F6FE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040F701                 call    strchr
.text:0040F706                 lea     esi, [esi+0]
.text:0040F709                 lea     edi, [edi+0]
.text:0040F710
.text:0040F710 loc_40F710:                             ; CODE XREF: sub_40F6A0+8C↓j
.text:0040F710                 mov     edx, eax
.text:0040F712
.text:0040F712 loc_40F712:                             ; CODE XREF: sub_40F6A0+2F↑j
.text:0040F712                 test    edx, edx
.text:0040F714                 jz      short loc_40F6E0
.text:0040F716                 mov     byte ptr [edx], 0
.text:0040F719                 inc     edx
.text:0040F71A                 mov     [esi], edx
.text:0040F71C                 jmp     short loc_40F6E6
.text:0040F71C ; ---------------------------------------------------------------------------
.text:0040F71E                 align 10h
.text:0040F720
.text:0040F720 loc_40F720:                             ; CODE XREF: sub_40F6A0+26↑j
.text:0040F720                 mov     [esp+1Ch+Val], edx ; Control
.text:0040F724                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040F727                 call    strpbrk
.text:0040F72C                 jmp     short loc_40F710
.text:0040F72C sub_40F6A0      endp
.text:0040F72C
.text:0040F72C ; ---------------------------------------------------------------------------
.text:0040F72E                 align 10h
.text:0040F730 ; const char aTmpf[]
.text:0040F730 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40F740+20↓o
.text:0040F735 ; const char aWBd[]
.text:0040F735 aWBd            db 'w+bD',0             ; DATA XREF: sub_40F740+5E↓o
.text:0040F73A                 align 10h
.text:0040F740
.text:0040F740 ; =============== S U B R O U T I N E =======================================
.text:0040F740
.text:0040F740
.text:0040F740 sub_40F740      proc near               ; CODE XREF: sub_40E9FF+A4↑p
.text:0040F740
.text:0040F740 FileHandle      = dword ptr -13Ch
.text:0040F740 Format          = dword ptr -138h
.text:0040F740 var_134         = dword ptr -134h
.text:0040F740 var_130         = dword ptr -130h
.text:0040F740 var_12C         = dword ptr -12Ch
.text:0040F740 Buffer          = byte ptr -11Ch
.text:0040F740 var_8           = dword ptr -8
.text:0040F740 var_4           = dword ptr -4
.text:0040F740
.text:0040F740                 sub     esp, 13Ch
.text:0040F746                 mov     [esp+13Ch+var_8], ebx
.text:0040F74D                 lea     ebx, [esp+13Ch+Buffer]
.text:0040F751                 mov     [esp+13Ch+var_4], esi
.text:0040F758                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040F760                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040F768                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040F770                 mov     [esp+13Ch+Format], 104h ; int
.text:0040F778                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040F77B                 call    sub_40FE20
.text:0040F780                 xor     edx, edx
.text:0040F782                 test    eax, eax
.text:0040F784                 jnz     short loc_40F7B6
.text:0040F786                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040F789                 mov     [esp+13Ch+Format], 0 ; int
.text:0040F791                 call    sub_4101A0
.text:0040F796                 xor     edx, edx
.text:0040F798                 mov     ebx, eax
.text:0040F79A                 test    eax, eax
.text:0040F79C                 js      short loc_40F7B6
.text:0040F79E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040F7A6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040F7A9                 call    _fdopen
.text:0040F7AE                 test    eax, eax
.text:0040F7B0                 mov     esi, eax
.text:0040F7B2                 jz      short loc_40F7CD
.text:0040F7B4
.text:0040F7B4 loc_40F7B4:                             ; CODE XREF: sub_40F740+95↓j
.text:0040F7B4                 mov     edx, esi
.text:0040F7B6
.text:0040F7B6 loc_40F7B6:                             ; CODE XREF: sub_40F740+44↑j
.text:0040F7B6                                         ; sub_40F740+5C↑j
.text:0040F7B6                 mov     ebx, [esp+13Ch+var_8]
.text:0040F7BD                 mov     eax, edx
.text:0040F7BF                 mov     esi, [esp+13Ch+var_4]
.text:0040F7C6                 add     esp, 13Ch
.text:0040F7CC                 retn
.text:0040F7CD ; ---------------------------------------------------------------------------
.text:0040F7CD
.text:0040F7CD loc_40F7CD:                             ; CODE XREF: sub_40F740+72↑j
.text:0040F7CD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040F7D0                 call    _close_0
.text:0040F7D5                 jmp     short loc_40F7B4
.text:0040F7D5 sub_40F740      endp
.text:0040F7D5
.text:0040F7D5 ; ---------------------------------------------------------------------------
.text:0040F7D7                 align 10h
.text:0040F7E0
.text:0040F7E0 ; =============== S U B R O U T I N E =======================================
.text:0040F7E0
.text:0040F7E0
.text:0040F7E0 sub_40F7E0      proc near               ; CODE XREF: _sysconf+297↑j
.text:0040F7E0
.text:0040F7E0 lpSystemInfo    = dword ptr -0Ch
.text:0040F7E0 var_4           = dword ptr -4
.text:0040F7E0
.text:0040F7E0                 sub     esp, 0Ch
.text:0040F7E3                 mov     [esp+0Ch+var_4], edi
.text:0040F7E7                 mov     edi, ds:dword_414500
.text:0040F7ED                 test    edi, edi
.text:0040F7EF                 mov     eax, edi
.text:0040F7F1                 jz      short loc_40F800
.text:0040F7F3
.text:0040F7F3 loc_40F7F3:                             ; CODE XREF: sub_40F7E0+48↓j
.text:0040F7F3                 mov     eax, [edi+14h]
.text:0040F7F6                 mov     edi, [esp+0Ch+var_4]
.text:0040F7FA                 add     esp, 0Ch
.text:0040F7FD                 retn
.text:0040F7FD ; ---------------------------------------------------------------------------
.text:0040F7FE                 align 10h
.text:0040F800
.text:0040F800 loc_40F800:                             ; CODE XREF: sub_40F7E0+11↑j
.text:0040F800                 cld
.text:0040F801                 mov     edi, offset SystemInfo
.text:0040F806                 mov     ecx, 9
.text:0040F80B                 mov     ds:dword_414500, edi
.text:0040F811                 rep stosd
.text:0040F813                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040F81A                 call    GetSystemInfo
.text:0040F81F                 mov     edi, ds:dword_414500
.text:0040F825                 sub     esp, 4
.text:0040F828                 jmp     short loc_40F7F3
.text:0040F828 sub_40F7E0      endp
.text:0040F828
.text:0040F828 ; ---------------------------------------------------------------------------
.text:0040F82A                 align 10h
.text:0040F830
.text:0040F830 ; =============== S U B R O U T I N E =======================================
.text:0040F830
.text:0040F830
.text:0040F830 sub_40F830      proc near               ; CODE XREF: _sysconf+28F↑j
.text:0040F830
.text:0040F830 lpSystemInfo    = dword ptr -0Ch
.text:0040F830 var_4           = dword ptr -4
.text:0040F830
.text:0040F830                 sub     esp, 0Ch
.text:0040F833                 mov     [esp+0Ch+var_4], edi
.text:0040F837                 mov     edi, ds:dword_414500
.text:0040F83D                 test    edi, edi
.text:0040F83F                 mov     eax, edi
.text:0040F841                 jz      short loc_40F850
.text:0040F843
.text:0040F843 loc_40F843:                             ; CODE XREF: sub_40F830+48↓j
.text:0040F843                 mov     eax, [edi+14h]
.text:0040F846                 mov     edi, [esp+0Ch+var_4]
.text:0040F84A                 add     esp, 0Ch
.text:0040F84D                 retn
.text:0040F84D ; ---------------------------------------------------------------------------
.text:0040F84E                 align 10h
.text:0040F850
.text:0040F850 loc_40F850:                             ; CODE XREF: sub_40F830+11↑j
.text:0040F850                 cld
.text:0040F851                 mov     edi, offset SystemInfo
.text:0040F856                 mov     ecx, 9
.text:0040F85B                 mov     ds:dword_414500, edi
.text:0040F861                 rep stosd
.text:0040F863                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040F86A                 call    GetSystemInfo
.text:0040F86F                 mov     edi, ds:dword_414500
.text:0040F875                 sub     esp, 4
.text:0040F878                 jmp     short loc_40F843
.text:0040F878 sub_40F830      endp
.text:0040F878
.text:0040F878 ; ---------------------------------------------------------------------------
.text:0040F87A                 align 10h
.text:0040F880
.text:0040F880 ; =============== S U B R O U T I N E =======================================
.text:0040F880
.text:0040F880
.text:0040F880 sub_40F880      proc near               ; CODE XREF: _sysconf+29F↑j
.text:0040F880
.text:0040F880 lpSystemInfo    = dword ptr -0Ch
.text:0040F880 var_4           = dword ptr -4
.text:0040F880
.text:0040F880                 sub     esp, 0Ch
.text:0040F883                 mov     [esp+0Ch+var_4], edi
.text:0040F887                 mov     edi, ds:dword_414500
.text:0040F88D                 test    edi, edi
.text:0040F88F                 mov     eax, edi
.text:0040F891                 jz      short loc_40F8A8
.text:0040F893
.text:0040F893 loc_40F893:                             ; CODE XREF: sub_40F880+50↓j
.text:0040F893                 mov     eax, [edi+0Ch]
.text:0040F896                 xor     edx, edx
.text:0040F898                 mov     ecx, [edi+8]
.text:0040F89B                 sub     eax, ecx
.text:0040F89D                 div     dword ptr [edi+4]
.text:0040F8A0                 mov     edi, [esp+0Ch+var_4]
.text:0040F8A4                 add     esp, 0Ch
.text:0040F8A7                 retn
.text:0040F8A8 ; ---------------------------------------------------------------------------
.text:0040F8A8
.text:0040F8A8 loc_40F8A8:                             ; CODE XREF: sub_40F880+11↑j
.text:0040F8A8                 cld
.text:0040F8A9                 mov     edi, offset SystemInfo
.text:0040F8AE                 mov     ecx, 9
.text:0040F8B3                 mov     ds:dword_414500, edi
.text:0040F8B9                 rep stosd
.text:0040F8BB                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040F8C2                 call    GetSystemInfo
.text:0040F8C7                 mov     edi, ds:dword_414500
.text:0040F8CD                 sub     esp, 4
.text:0040F8D0                 jmp     short loc_40F893
.text:0040F8D0 sub_40F880      endp
.text:0040F8D0
.text:0040F8D0 ; ---------------------------------------------------------------------------
.text:0040F8D2                 align 10h
.text:0040F8E0
.text:0040F8E0 ; =============== S U B R O U T I N E =======================================
.text:0040F8E0
.text:0040F8E0
.text:0040F8E0 sub_40F8E0      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:0040F8E0
.text:0040F8E0 lpSystemInfo    = dword ptr -0Ch
.text:0040F8E0 var_4           = dword ptr -4
.text:0040F8E0
.text:0040F8E0                 sub     esp, 0Ch
.text:0040F8E3                 mov     [esp+0Ch+var_4], edi
.text:0040F8E7                 mov     edi, ds:dword_414500
.text:0040F8ED                 test    edi, edi
.text:0040F8EF                 mov     eax, edi
.text:0040F8F1                 jz      short loc_40F908
.text:0040F8F3
.text:0040F8F3 loc_40F8F3:                             ; CODE XREF: sub_40F8E0+50↓j
.text:0040F8F3                 mov     edx, [edi+8]
.text:0040F8F6                 mov     eax, [edi+0Ch]
.text:0040F8F9                 sub     eax, edx
.text:0040F8FB                 xor     edx, edx
.text:0040F8FD                 div     dword ptr [edi+4]
.text:0040F900                 mov     edi, [esp+0Ch+var_4]
.text:0040F904                 add     esp, 0Ch
.text:0040F907                 retn
.text:0040F908 ; ---------------------------------------------------------------------------
.text:0040F908
.text:0040F908 loc_40F908:                             ; CODE XREF: sub_40F8E0+11↑j
.text:0040F908                 cld
.text:0040F909                 mov     edi, offset SystemInfo
.text:0040F90E                 mov     ecx, 9
.text:0040F913                 mov     ds:dword_414500, edi
.text:0040F919                 rep stosd
.text:0040F91B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040F922                 call    GetSystemInfo
.text:0040F927                 mov     edi, ds:dword_414500
.text:0040F92D                 sub     esp, 4
.text:0040F930                 jmp     short loc_40F8F3
.text:0040F930 sub_40F8E0      endp
.text:0040F930
.text:0040F930 ; ---------------------------------------------------------------------------
.text:0040F932                 align 10h
.text:0040F940
.text:0040F940 ; =============== S U B R O U T I N E =======================================
.text:0040F940
.text:0040F940
.text:0040F940 sub_40F940      proc near               ; CODE XREF: _sysconf:loc_40F45B↑p
.text:0040F940                                         ; _sysconf:loc_40F46E↑p
.text:0040F940                 mov     edx, 40h ; '@'
.text:0040F945                 mov     eax, 40h ; '@'
.text:0040F94A                 mov     ds:dword_4145E0, edx
.text:0040F950                 retn
.text:0040F950 sub_40F940      endp
.text:0040F950
.text:0040F950 ; ---------------------------------------------------------------------------
.text:0040F951                 align 10h
.text:0040F960
.text:0040F960 ; =============== S U B R O U T I N E =======================================
.text:0040F960
.text:0040F960
.text:0040F960 sub_40F960      proc near               ; CODE XREF: sub_40F530+4F↑p
.text:0040F960
.text:0040F960 var_8           = dword ptr -8
.text:0040F960 var_4           = dword ptr -4
.text:0040F960 arg_0           = dword ptr  4
.text:0040F960 arg_4           = dword ptr  8
.text:0040F960 arg_8           = dword ptr  0Ch
.text:0040F960
.text:0040F960                 sub     esp, 8
.text:0040F963                 mov     ecx, [esp+8+arg_0]
.text:0040F967                 mov     [esp+8+var_8], ebx
.text:0040F96A                 mov     ebx, [esp+8+arg_8]
.text:0040F96E                 mov     [esp+8+var_4], esi
.text:0040F972                 mov     edx, [esp+8+arg_4]
.text:0040F976                 mov     eax, ebx
.text:0040F978                 and     eax, 7
.text:0040F97B                 cmp     eax, 7          ; switch 8 cases
.text:0040F97E                 ja      short def_40F980 ; jumptable 0040F980 default case
.text:0040F980                 jmp     ds:jpt_40F980[eax*4] ; switch jump
.text:0040F980 ; ---------------------------------------------------------------------------
.text:0040F987                 align 4
.text:0040F988 jpt_40F980      dd offset loc_40FA0A    ; DATA XREF: sub_40F960+20↑r
.text:0040F988                 dd offset loc_40FA11    ; jump table for switch statement
.text:0040F988                 dd offset loc_40F9A8
.text:0040F988                 dd offset loc_40FA19
.text:0040F988                 dd offset loc_40FA26
.text:0040F988                 dd offset loc_40FA33
.text:0040F988                 dd offset loc_40FA40
.text:0040F988                 dd offset loc_40FA4D
.text:0040F9A8 ; ---------------------------------------------------------------------------
.text:0040F9A8
.text:0040F9A8 loc_40F9A8:                             ; CODE XREF: sub_40F960+20↑j
.text:0040F9A8                                         ; DATA XREF: sub_40F960:jpt_40F980↑o
.text:0040F9A8                 mov     eax, [edx]      ; jumptable 0040F980 case 2
.text:0040F9AA                 sub     ecx, 1Ch
.text:0040F9AD                 add     ebx, 6
.text:0040F9B0                 sub     edx, 18h
.text:0040F9B3                 lea     esi, [esi+0]
.text:0040F9B9                 lea     edi, [edi+0]
.text:0040F9C0
.text:0040F9C0 loc_40F9C0:                             ; CODE XREF: sub_40F960+A8↓j
.text:0040F9C0                 mov     esi, [edx+1Ch]
.text:0040F9C3                 add     edx, 20h ; ' '
.text:0040F9C6                 mov     [ecx+1Ch], eax
.text:0040F9C9                 add     ecx, 20h ; ' '
.text:0040F9CC                 sub     ebx, 8
.text:0040F9CF                 jnz     short def_40F980 ; jumptable 0040F980 default case
.text:0040F9D1                 mov     [ecx], esi
.text:0040F9D3                 mov     ebx, [esp+8+var_8]
.text:0040F9D6                 mov     esi, [esp+8+var_4]
.text:0040F9DA                 add     esp, 8
.text:0040F9DD                 retn
.text:0040F9DD ; ---------------------------------------------------------------------------
.text:0040F9DE                 align 10h
.text:0040F9E0
.text:0040F9E0 def_40F980:                             ; CODE XREF: sub_40F960+1E↑j
.text:0040F9E0                                         ; sub_40F960+6F↑j ...
.text:0040F9E0                 mov     eax, [edx]      ; jumptable 0040F980 default case
.text:0040F9E2                 mov     [ecx], esi
.text:0040F9E4
.text:0040F9E4 loc_40F9E4:                             ; CODE XREF: sub_40F960+AF↓j
.text:0040F9E4                 mov     esi, [edx+4]
.text:0040F9E7                 mov     [ecx+4], eax
.text:0040F9EA
.text:0040F9EA loc_40F9EA:                             ; CODE XREF: sub_40F960+F6↓j
.text:0040F9EA                 mov     eax, [edx+8]
.text:0040F9ED                 mov     [ecx+8], esi
.text:0040F9F0
.text:0040F9F0 loc_40F9F0:                             ; CODE XREF: sub_40F960+EB↓j
.text:0040F9F0                 mov     esi, [edx+0Ch]
.text:0040F9F3                 mov     [ecx+0Ch], eax
.text:0040F9F6
.text:0040F9F6 loc_40F9F6:                             ; CODE XREF: sub_40F960+DE↓j
.text:0040F9F6                 mov     eax, [edx+10h]
.text:0040F9F9                 mov     [ecx+10h], esi
.text:0040F9FC
.text:0040F9FC loc_40F9FC:                             ; CODE XREF: sub_40F960+D1↓j
.text:0040F9FC                 mov     esi, [edx+14h]
.text:0040F9FF                 mov     [ecx+14h], eax
.text:0040FA02
.text:0040FA02 loc_40FA02:                             ; CODE XREF: sub_40F960+C4↓j
.text:0040FA02                 mov     eax, [edx+18h]
.text:0040FA05                 mov     [ecx+18h], esi
.text:0040FA08                 jmp     short loc_40F9C0
.text:0040FA0A ; ---------------------------------------------------------------------------
.text:0040FA0A
.text:0040FA0A loc_40FA0A:                             ; CODE XREF: sub_40F960+20↑j
.text:0040FA0A                                         ; DATA XREF: sub_40F960:jpt_40F980↑o
.text:0040FA0A                 mov     eax, [edx]      ; jumptable 0040F980 case 0
.text:0040FA0C                 sub     ecx, 4
.text:0040FA0F                 jmp     short loc_40F9E4
.text:0040FA11 ; ---------------------------------------------------------------------------
.text:0040FA11
.text:0040FA11 loc_40FA11:                             ; CODE XREF: sub_40F960+20↑j
.text:0040FA11                                         ; DATA XREF: sub_40F960:jpt_40F980↑o
.text:0040FA11                 mov     esi, [edx]      ; jumptable 0040F980 case 1
.text:0040FA13                 dec     ebx
.text:0040FA14                 add     edx, 4
.text:0040FA17                 jmp     short def_40F980 ; jumptable 0040F980 default case
.text:0040FA19 ; ---------------------------------------------------------------------------
.text:0040FA19
.text:0040FA19 loc_40FA19:                             ; CODE XREF: sub_40F960+20↑j
.text:0040FA19                                         ; DATA XREF: sub_40F960:jpt_40F980↑o
.text:0040FA19                 mov     esi, [edx]      ; jumptable 0040F980 case 3
.text:0040FA1B                 sub     ecx, 18h
.text:0040FA1E                 add     ebx, 5
.text:0040FA21                 sub     edx, 14h
.text:0040FA24                 jmp     short loc_40FA02
.text:0040FA26 ; ---------------------------------------------------------------------------
.text:0040FA26
.text:0040FA26 loc_40FA26:                             ; CODE XREF: sub_40F960+20↑j
.text:0040FA26                                         ; DATA XREF: sub_40F960:jpt_40F980↑o
.text:0040FA26                 mov     eax, [edx]      ; jumptable 0040F980 case 4
.text:0040FA28                 sub     ecx, 14h
.text:0040FA2B                 add     ebx, 4
.text:0040FA2E                 sub     edx, 10h
.text:0040FA31                 jmp     short loc_40F9FC
.text:0040FA33 ; ---------------------------------------------------------------------------
.text:0040FA33
.text:0040FA33 loc_40FA33:                             ; CODE XREF: sub_40F960+20↑j
.text:0040FA33                                         ; DATA XREF: sub_40F960:jpt_40F980↑o
.text:0040FA33                 mov     esi, [edx]      ; jumptable 0040F980 case 5
.text:0040FA35                 sub     ecx, 10h
.text:0040FA38                 add     ebx, 3
.text:0040FA3B                 sub     edx, 0Ch
.text:0040FA3E                 jmp     short loc_40F9F6
.text:0040FA40 ; ---------------------------------------------------------------------------
.text:0040FA40
.text:0040FA40 loc_40FA40:                             ; CODE XREF: sub_40F960+20↑j
.text:0040FA40                                         ; DATA XREF: sub_40F960:jpt_40F980↑o
.text:0040FA40                 mov     eax, [edx]      ; jumptable 0040F980 case 6
.text:0040FA42                 sub     ecx, 0Ch
.text:0040FA45                 add     ebx, 2
.text:0040FA48                 sub     edx, 8
.text:0040FA4B                 jmp     short loc_40F9F0
.text:0040FA4D ; ---------------------------------------------------------------------------
.text:0040FA4D
.text:0040FA4D loc_40FA4D:                             ; CODE XREF: sub_40F960+20↑j
.text:0040FA4D                                         ; DATA XREF: sub_40F960:jpt_40F980↑o
.text:0040FA4D                 mov     esi, [edx]      ; jumptable 0040F980 case 7
.text:0040FA4F                 sub     ecx, 8
.text:0040FA52                 inc     ebx
.text:0040FA53                 sub     edx, 4
.text:0040FA56                 jmp     short loc_40F9EA
.text:0040FA56 sub_40F960      endp
.text:0040FA56
.text:0040FA56 ; ---------------------------------------------------------------------------
.text:0040FA58                 align 10h
.text:0040FA60
.text:0040FA60 ; =============== S U B R O U T I N E =======================================
.text:0040FA60
.text:0040FA60
.text:0040FA60 sub_40FA60      proc near               ; CODE XREF: sub_40F530+93↑p
.text:0040FA60
.text:0040FA60 var_1C          = dword ptr -1Ch
.text:0040FA60 var_18          = dword ptr -18h
.text:0040FA60 var_14          = dword ptr -14h
.text:0040FA60 arg_0           = dword ptr  4
.text:0040FA60 arg_4           = dword ptr  8
.text:0040FA60 arg_8           = dword ptr  0Ch
.text:0040FA60
.text:0040FA60                 push    ebp
.text:0040FA61                 push    edi
.text:0040FA62                 push    esi
.text:0040FA63                 push    ebx
.text:0040FA64                 sub     esp, 0Ch
.text:0040FA67                 mov     edx, [esp+1Ch+arg_4]
.text:0040FA6B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:0040FA73                 mov     eax, [esp+1Ch+arg_8]
.text:0040FA77                 mov     esi, [esp+1Ch+arg_0]
.text:0040FA7B                 mov     ecx, edx
.text:0040FA7D                 and     ecx, 3
.text:0040FA80                 and     eax, 3
.text:0040FA83                 shl     ecx, 3
.text:0040FA86                 and     edx, 0FFFFFFFCh
.text:0040FA89                 sub     [esp+1Ch+var_14], ecx
.text:0040FA8D                 cmp     eax, 1
.text:0040FA90                 mov     [esp+1Ch+var_18], ecx
.text:0040FA94                 jz      loc_40FB80
.text:0040FA9A                 cmp     eax, 1
.text:0040FA9D                 jb      loc_40FB70
.text:0040FAA3                 cmp     eax, 2
.text:0040FAA6                 jz      loc_40FB54
.text:0040FAAC                 cmp     eax, 3
.text:0040FAAF                 jz      loc_40FB43
.text:0040FAB5
.text:0040FAB5 loc_40FAB5:                             ; CODE XREF: sub_40FA60+C7↓j
.text:0040FAB5                                         ; sub_40FA60+12C↓j
.text:0040FAB5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040FABA                 mov     eax, edi
.text:0040FABC                 mov     ebx, [edx]
.text:0040FABE                 shr     ebp, cl
.text:0040FAC0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040FAC5                 shl     eax, cl
.text:0040FAC7                 or      ebp, eax
.text:0040FAC9                 mov     [esi], ebp
.text:0040FACB
.text:0040FACB loc_40FACB:                             ; CODE XREF: sub_40FA60+11B↓j
.text:0040FACB                 mov     ecx, [edx+4]
.text:0040FACE                 mov     ebp, ebx
.text:0040FAD0                 mov     [esp+1Ch+var_1C], ecx
.text:0040FAD3                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040FAD8                 shr     edi, cl
.text:0040FADA                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040FADF                 shl     ebp, cl
.text:0040FAE1                 or      edi, ebp
.text:0040FAE3                 mov     [esi+4], edi
.text:0040FAE6
.text:0040FAE6 loc_40FAE6:                             ; CODE XREF: sub_40FA60+F2↓j
.text:0040FAE6                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040FAEB                 mov     edi, [esp+1Ch+var_1C]
.text:0040FAEE                 mov     ebp, [edx+8]
.text:0040FAF1                 shr     ebx, cl
.text:0040FAF3                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040FAF8                 shl     edi, cl
.text:0040FAFA                 or      ebx, edi
.text:0040FAFC                 mov     [esi+8], ebx
.text:0040FAFF
.text:0040FAFF loc_40FAFF:                             ; CODE XREF: sub_40FA60+107↓j
.text:0040FAFF                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040FB04                 mov     ebx, ebp
.text:0040FB06                 mov     edi, [edx+0Ch]
.text:0040FB09                 add     edx, 10h
.text:0040FB0C                 shr     [esp+1Ch+var_1C], cl
.text:0040FB0F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040FB14                 shl     ebx, cl
.text:0040FB16                 or      [esp+1Ch+var_1C], ebx
.text:0040FB19                 mov     ebx, [esp+1Ch+var_1C]
.text:0040FB1C                 mov     [esi+0Ch], ebx
.text:0040FB1F                 add     esi, 10h
.text:0040FB22                 sub     [esp+1Ch+arg_8], 4
.text:0040FB27                 jnz     short loc_40FAB5
.text:0040FB29                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040FB2E                 shr     ebp, cl
.text:0040FB30                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040FB35                 shl     edi, cl
.text:0040FB37                 or      ebp, edi
.text:0040FB39                 mov     [esi], ebp
.text:0040FB3B                 add     esp, 0Ch
.text:0040FB3E                 pop     ebx
.text:0040FB3F                 pop     esi
.text:0040FB40                 pop     edi
.text:0040FB41                 pop     ebp
.text:0040FB42                 retn
.text:0040FB43 ; ---------------------------------------------------------------------------
.text:0040FB43
.text:0040FB43 loc_40FB43:                             ; CODE XREF: sub_40FA60+4F↑j
.text:0040FB43                 inc     [esp+1Ch+arg_8]
.text:0040FB47                 sub     esi, 8
.text:0040FB4A                 mov     eax, [edx+4]
.text:0040FB4D                 mov     ebx, [edx]
.text:0040FB4F                 mov     [esp+1Ch+var_1C], eax
.text:0040FB52                 jmp     short loc_40FAE6
.text:0040FB54 ; ---------------------------------------------------------------------------
.text:0040FB54
.text:0040FB54 loc_40FB54:                             ; CODE XREF: sub_40FA60+46↑j
.text:0040FB54                 add     [esp+1Ch+arg_8], 2
.text:0040FB59                 sub     esi, 0Ch
.text:0040FB5C                 mov     ecx, [edx]
.text:0040FB5E                 mov     ebp, [edx+4]
.text:0040FB61                 sub     edx, 4
.text:0040FB64                 mov     [esp+1Ch+var_1C], ecx
.text:0040FB67                 jmp     short loc_40FAFF
.text:0040FB67 ; ---------------------------------------------------------------------------
.text:0040FB69                 align 10h
.text:0040FB70
.text:0040FB70 loc_40FB70:                             ; CODE XREF: sub_40FA60+3D↑j
.text:0040FB70                 mov     edi, [edx]
.text:0040FB72                 sub     esi, 4
.text:0040FB75                 mov     ebx, [edx+4]
.text:0040FB78                 add     edx, 4
.text:0040FB7B                 jmp     loc_40FACB
.text:0040FB80 ; ---------------------------------------------------------------------------
.text:0040FB80
.text:0040FB80 loc_40FB80:                             ; CODE XREF: sub_40FA60+34↑j
.text:0040FB80                 dec     [esp+1Ch+arg_8]
.text:0040FB84                 mov     ebp, [edx]
.text:0040FB86                 mov     edi, [edx+4]
.text:0040FB89                 add     edx, 8
.text:0040FB8C                 jmp     loc_40FAB5
.text:0040FB8C sub_40FA60      endp
.text:0040FB8C
.text:0040FB91 ; ---------------------------------------------------------------------------
.text:0040FB91                 jmp     short loc_40FBA0
.text:0040FB91 ; ---------------------------------------------------------------------------
.text:0040FB93                 align 10h
.text:0040FBA0
.text:0040FBA0 loc_40FBA0:                             ; CODE XREF: .text:0040FB91↑j
.text:0040FBA0                 sub     esp, 8
.text:0040FBA3                 mov     ecx, [esp+0Ch]
.text:0040FBA7                 mov     [esp+4], esi
.text:0040FBAB                 mov     esi, [esp+14h]
.text:0040FBAF                 mov     [esp], ebx
.text:0040FBB2                 mov     edx, [esp+10h]
.text:0040FBB6                 mov     eax, esi
.text:0040FBB8                 and     eax, 7
.text:0040FBBB                 cmp     eax, 7          ; switch 8 cases
.text:0040FBBE                 ja      short def_40FBC0 ; jumptable 0040FBC0 default case
.text:0040FBC0                 jmp     ds:jpt_40FBC0[eax*4] ; switch jump
.text:0040FBC0 ; ---------------------------------------------------------------------------
.text:0040FBC7                 align 4
.text:0040FBC8 jpt_40FBC0      dd offset loc_40FC4C    ; DATA XREF: .text:0040FBC0↑r
.text:0040FBC8                 dd offset loc_40FC57    ; jump table for switch statement
.text:0040FBC8                 dd offset loc_40FBE8
.text:0040FBC8                 dd offset loc_40FC63
.text:0040FBC8                 dd offset loc_40FC71
.text:0040FBC8                 dd offset loc_40FC7F
.text:0040FBC8                 dd offset loc_40FC8D
.text:0040FBC8                 dd offset loc_40FC9B
.text:0040FBE8 ; ---------------------------------------------------------------------------
.text:0040FBE8
.text:0040FBE8 loc_40FBE8:                             ; CODE XREF: .text:0040FBC0↑j
.text:0040FBE8                                         ; DATA XREF: .text:jpt_40FBC0↑o
.text:0040FBE8                 sub     edx, 8          ; jumptable 0040FBC0 case 2
.text:0040FBEB                 sub     ecx, 4
.text:0040FBEE                 mov     eax, [edx+4]
.text:0040FBF1                 add     esi, 6
.text:0040FBF4                 lea     esi, [esi+0]
.text:0040FBFA                 lea     edi, [edi+0]
.text:0040FC00
.text:0040FC00 loc_40FC00:                             ; CODE XREF: .text:0040FC4A↓j
.text:0040FC00                 mov     ebx, [edx]
.text:0040FC02                 sub     edx, 20h ; ' '
.text:0040FC05                 mov     [ecx], eax
.text:0040FC07                 sub     ecx, 20h ; ' '
.text:0040FC0A                 sub     esi, 8
.text:0040FC0D                 jnz     short def_40FBC0 ; jumptable 0040FBC0 default case
.text:0040FC0F                 mov     [ecx+1Ch], ebx
.text:0040FC12                 mov     ebx, [esp]
.text:0040FC15                 mov     esi, [esp+4]
.text:0040FC19                 add     esp, 8
.text:0040FC1C                 retn
.text:0040FC1C ; ---------------------------------------------------------------------------
.text:0040FC1D                 align 10h
.text:0040FC20
.text:0040FC20 def_40FBC0:                             ; CODE XREF: .text:0040FBBE↑j
.text:0040FC20                                         ; .text:0040FC0D↑j ...
.text:0040FC20                 mov     eax, [edx+1Ch]  ; jumptable 0040FBC0 default case
.text:0040FC23                 mov     [ecx+1Ch], ebx
.text:0040FC26
.text:0040FC26 loc_40FC26:                             ; CODE XREF: .text:0040FC55↓j
.text:0040FC26                 mov     ebx, [edx+18h]
.text:0040FC29                 mov     [ecx+18h], eax
.text:0040FC2C
.text:0040FC2C loc_40FC2C:                             ; CODE XREF: .text:0040FCA5↓j
.text:0040FC2C                 mov     eax, [edx+14h]
.text:0040FC2F                 mov     [ecx+14h], ebx
.text:0040FC32
.text:0040FC32 loc_40FC32:                             ; CODE XREF: .text:0040FC99↓j
.text:0040FC32                 mov     ebx, [edx+10h]
.text:0040FC35                 mov     [ecx+10h], eax
.text:0040FC38
.text:0040FC38 loc_40FC38:                             ; CODE XREF: .text:0040FC8B↓j
.text:0040FC38                 mov     eax, [edx+0Ch]
.text:0040FC3B                 mov     [ecx+0Ch], ebx
.text:0040FC3E
.text:0040FC3E loc_40FC3E:                             ; CODE XREF: .text:0040FC7D↓j
.text:0040FC3E                 mov     ebx, [edx+8]
.text:0040FC41                 mov     [ecx+8], eax
.text:0040FC44
.text:0040FC44 loc_40FC44:                             ; CODE XREF: .text:0040FC6F↓j
.text:0040FC44                 mov     eax, [edx+4]
.text:0040FC47                 mov     [ecx+4], ebx
.text:0040FC4A                 jmp     short loc_40FC00
.text:0040FC4C ; ---------------------------------------------------------------------------
.text:0040FC4C
.text:0040FC4C loc_40FC4C:                             ; CODE XREF: .text:0040FBC0↑j
.text:0040FC4C                                         ; DATA XREF: .text:jpt_40FBC0↑o
.text:0040FC4C                 sub     edx, 20h ; ' '  ; jumptable 0040FBC0 case 0
.text:0040FC4F                 sub     ecx, 1Ch
.text:0040FC52                 mov     eax, [edx+1Ch]
.text:0040FC55                 jmp     short loc_40FC26
.text:0040FC57 ; ---------------------------------------------------------------------------
.text:0040FC57
.text:0040FC57 loc_40FC57:                             ; CODE XREF: .text:0040FBC0↑j
.text:0040FC57                                         ; DATA XREF: .text:jpt_40FBC0↑o
.text:0040FC57                 sub     edx, 24h ; '$'  ; jumptable 0040FBC0 case 1
.text:0040FC5A                 sub     ecx, 20h ; ' '
.text:0040FC5D                 mov     ebx, [edx+20h]
.text:0040FC60                 dec     esi
.text:0040FC61                 jmp     short def_40FBC0 ; jumptable 0040FBC0 default case
.text:0040FC63 ; ---------------------------------------------------------------------------
.text:0040FC63
.text:0040FC63 loc_40FC63:                             ; CODE XREF: .text:0040FBC0↑j
.text:0040FC63                                         ; DATA XREF: .text:jpt_40FBC0↑o
.text:0040FC63                 sub     edx, 0Ch        ; jumptable 0040FBC0 case 3
.text:0040FC66                 sub     ecx, 8
.text:0040FC69                 mov     ebx, [edx+8]
.text:0040FC6C                 add     esi, 5
.text:0040FC6F                 jmp     short loc_40FC44
.text:0040FC71 ; ---------------------------------------------------------------------------
.text:0040FC71
.text:0040FC71 loc_40FC71:                             ; CODE XREF: .text:0040FBC0↑j
.text:0040FC71                                         ; DATA XREF: .text:jpt_40FBC0↑o
.text:0040FC71                 sub     edx, 10h        ; jumptable 0040FBC0 case 4
.text:0040FC74                 sub     ecx, 0Ch
.text:0040FC77                 mov     eax, [edx+0Ch]
.text:0040FC7A                 add     esi, 4
.text:0040FC7D                 jmp     short loc_40FC3E
.text:0040FC7F ; ---------------------------------------------------------------------------
.text:0040FC7F
.text:0040FC7F loc_40FC7F:                             ; CODE XREF: .text:0040FBC0↑j
.text:0040FC7F                                         ; DATA XREF: .text:jpt_40FBC0↑o
.text:0040FC7F                 sub     edx, 14h        ; jumptable 0040FBC0 case 5
.text:0040FC82                 sub     ecx, 10h
.text:0040FC85                 mov     ebx, [edx+10h]
.text:0040FC88                 add     esi, 3
.text:0040FC8B                 jmp     short loc_40FC38
.text:0040FC8D ; ---------------------------------------------------------------------------
.text:0040FC8D
.text:0040FC8D loc_40FC8D:                             ; CODE XREF: .text:0040FBC0↑j
.text:0040FC8D                                         ; DATA XREF: .text:jpt_40FBC0↑o
.text:0040FC8D                 sub     edx, 18h        ; jumptable 0040FBC0 case 6
.text:0040FC90                 sub     ecx, 14h
.text:0040FC93                 mov     eax, [edx+14h]
.text:0040FC96                 add     esi, 2
.text:0040FC99                 jmp     short loc_40FC32
.text:0040FC9B ; ---------------------------------------------------------------------------
.text:0040FC9B
.text:0040FC9B loc_40FC9B:                             ; CODE XREF: .text:0040FBC0↑j
.text:0040FC9B                                         ; DATA XREF: .text:jpt_40FBC0↑o
.text:0040FC9B                 sub     edx, 1Ch        ; jumptable 0040FBC0 case 7
.text:0040FC9E                 sub     ecx, 18h
.text:0040FCA1                 mov     ebx, [edx+18h]
.text:0040FCA4                 inc     esi
.text:0040FCA5                 jmp     short loc_40FC2C
.text:0040FCA5 ; ---------------------------------------------------------------------------
.text:0040FCA7                 align 10h
.text:0040FCB0                 push    ebp
.text:0040FCB1                 push    edi
.text:0040FCB2                 push    esi
.text:0040FCB3                 push    ebx
.text:0040FCB4                 sub     esp, 8
.text:0040FCB7                 mov     edx, [esp+20h]
.text:0040FCBB                 mov     dword ptr [esp+4], 20h ; ' '
.text:0040FCC3                 mov     eax, [esp+24h]
.text:0040FCC7                 mov     ecx, edx
.text:0040FCC9                 and     ecx, 3
.text:0040FCCC                 and     eax, 3
.text:0040FCCF                 shl     ecx, 3
.text:0040FCD2                 sub     [esp+4], ecx
.text:0040FCD6                 and     edx, 0FFFFFFFCh
.text:0040FCD9                 add     edx, 4
.text:0040FCDC                 mov     [esp], ecx
.text:0040FCDF                 cmp     eax, 1
.text:0040FCE2                 jz      loc_40FDD8
.text:0040FCE8                 cmp     eax, 1
.text:0040FCEB                 jb      loc_40FDC5
.text:0040FCF1                 cmp     eax, 2
.text:0040FCF4                 jz      loc_40FDB0
.text:0040FCFA                 cmp     eax, 3
.text:0040FCFD                 jz      loc_40FD9C
.text:0040FD03
.text:0040FD03 loc_40FD03:                             ; CODE XREF: .text:0040FD7C↓j
.text:0040FD03                                         ; .text:0040FDEA↓j
.text:0040FD03                 movzx   ecx, byte ptr [esp]
.text:0040FD07                 mov     eax, edi
.text:0040FD09                 mov     ebx, [esp+1Ch]
.text:0040FD0D                 mov     esi, [edx+0Ch]
.text:0040FD10                 shr     eax, cl
.text:0040FD12                 movzx   ecx, byte ptr [esp+4]
.text:0040FD17                 shl     ebp, cl
.text:0040FD19                 or      eax, ebp
.text:0040FD1B                 mov     [ebx+0Ch], eax
.text:0040FD1E
.text:0040FD1E loc_40FD1E:                             ; CODE XREF: .text:0040FDD3↓j
.text:0040FD1E                 movzx   ecx, byte ptr [esp]
.text:0040FD22                 mov     ebp, esi
.text:0040FD24                 mov     ebx, [edx+8]
.text:0040FD27                 shr     ebp, cl
.text:0040FD29                 movzx   ecx, byte ptr [esp+4]
.text:0040FD2E                 shl     edi, cl
.text:0040FD30                 or      ebp, edi
.text:0040FD32                 mov     edi, [esp+1Ch]
.text:0040FD36                 mov     [edi+8], ebp
.text:0040FD39
.text:0040FD39 loc_40FD39:                             ; CODE XREF: .text:0040FDAE↓j
.text:0040FD39                 movzx   ecx, byte ptr [esp]
.text:0040FD3D                 mov     edi, ebx
.text:0040FD3F                 mov     ebp, [edx+4]
.text:0040FD42                 shr     edi, cl
.text:0040FD44                 movzx   ecx, byte ptr [esp+4]
.text:0040FD49                 shl     esi, cl
.text:0040FD4B                 or      edi, esi
.text:0040FD4D                 mov     esi, [esp+1Ch]
.text:0040FD51                 mov     [esi+4], edi
.text:0040FD54
.text:0040FD54 loc_40FD54:                             ; CODE XREF: .text:0040FDC3↓j
.text:0040FD54                 movzx   ecx, byte ptr [esp]
.text:0040FD58                 mov     esi, ebp
.text:0040FD5A                 mov     edi, [edx]
.text:0040FD5C                 sub     edx, 10h
.text:0040FD5F                 shr     esi, cl
.text:0040FD61                 movzx   ecx, byte ptr [esp+4]
.text:0040FD66                 shl     ebx, cl
.text:0040FD68                 or      esi, ebx
.text:0040FD6A                 mov     ebx, [esp+1Ch]
.text:0040FD6E                 mov     [ebx], esi
.text:0040FD70                 sub     ebx, 10h
.text:0040FD73                 sub     dword ptr [esp+24h], 4
.text:0040FD78                 mov     [esp+1Ch], ebx
.text:0040FD7C                 jnz     short loc_40FD03
.text:0040FD7E                 movzx   ecx, byte ptr [esp]
.text:0040FD82                 mov     edx, [esp+1Ch]
.text:0040FD86                 shr     edi, cl
.text:0040FD88                 movzx   ecx, byte ptr [esp+4]
.text:0040FD8D                 shl     ebp, cl
.text:0040FD8F                 or      edi, ebp
.text:0040FD91                 mov     [edx+0Ch], edi
.text:0040FD94                 add     esp, 8
.text:0040FD97                 pop     ebx
.text:0040FD98                 pop     esi
.text:0040FD99                 pop     edi
.text:0040FD9A                 pop     ebp
.text:0040FD9B                 retn
.text:0040FD9C ; ---------------------------------------------------------------------------
.text:0040FD9C
.text:0040FD9C loc_40FD9C:                             ; CODE XREF: .text:0040FCFD↑j
.text:0040FD9C                 sub     dword ptr [esp+1Ch], 8
.text:0040FDA1                 sub     edx, 10h
.text:0040FDA4                 inc     dword ptr [esp+24h]
.text:0040FDA8                 mov     esi, [edx+0Ch]
.text:0040FDAB                 mov     ebx, [edx+8]
.text:0040FDAE                 jmp     short loc_40FD39
.text:0040FDB0 ; ---------------------------------------------------------------------------
.text:0040FDB0
.text:0040FDB0 loc_40FDB0:                             ; CODE XREF: .text:0040FCF4↑j
.text:0040FDB0                 sub     dword ptr [esp+1Ch], 4
.text:0040FDB5                 sub     edx, 0Ch
.text:0040FDB8                 add     dword ptr [esp+24h], 2
.text:0040FDBD                 mov     ebx, [edx+8]
.text:0040FDC0                 mov     ebp, [edx+4]
.text:0040FDC3                 jmp     short loc_40FD54
.text:0040FDC5 ; ---------------------------------------------------------------------------
.text:0040FDC5
.text:0040FDC5 loc_40FDC5:                             ; CODE XREF: .text:0040FCEB↑j
.text:0040FDC5                 sub     dword ptr [esp+1Ch], 0Ch
.text:0040FDCA                 sub     edx, 14h
.text:0040FDCD                 mov     edi, [edx+10h]
.text:0040FDD0                 mov     esi, [edx+0Ch]
.text:0040FDD3                 jmp     loc_40FD1E
.text:0040FDD8 ; ---------------------------------------------------------------------------
.text:0040FDD8
.text:0040FDD8 loc_40FDD8:                             ; CODE XREF: .text:0040FCE2↑j
.text:0040FDD8                 sub     dword ptr [esp+1Ch], 10h
.text:0040FDDD                 sub     edx, 18h
.text:0040FDE0                 dec     dword ptr [esp+24h]
.text:0040FDE4                 mov     ebp, [edx+14h]
.text:0040FDE7                 mov     edi, [edx+10h]
.text:0040FDEA                 jmp     loc_40FD03
.text:0040FDEA ; ---------------------------------------------------------------------------
.text:0040FDEF                 align 10h
.text:0040FDF0 aFile           db 'file',0             ; DATA XREF: sub_40FE20:loc_40FE4C↓o
.text:0040FDF5 ; const char aSSxxxxxx[]
.text:0040FDF5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40FE20+9B↓o
.text:0040FE05 ; const char aTemp[]
.text:0040FE05 aTemp           db 'TEMP',0             ; DATA XREF: sub_40FE20:loc_40FF02↓o
.text:0040FE05                                         ; sub_40FE20:loc_40FF42↓o ...
.text:0040FE0A ; const char aTmp[]
.text:0040FE0A aTmp            db '/tmp',0             ; DATA XREF: sub_40FE20+12F↓o
.text:0040FE0A                                         ; sub_40FE20+141↓o ...
.text:0040FE0F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40FE20:loc_40FFC0↓o
.text:0040FE16 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40FE20:loc_410050↓o
.text:0040FE1A                 align 10h
.text:0040FE20
.text:0040FE20 ; =============== S U B R O U T I N E =======================================
.text:0040FE20
.text:0040FE20
.text:0040FE20 ; int __cdecl sub_40FE20(char *Buffer, int, char *, char *, int)
.text:0040FE20 sub_40FE20      proc near               ; CODE XREF: sub_40F740+3B↑p
.text:0040FE20
.text:0040FE20 Str             = dword ptr -1BCh
.text:0040FE20 Format          = dword ptr -1B8h
.text:0040FE20 var_1B4         = dword ptr -1B4h
.text:0040FE20 var_1B0         = dword ptr -1B0h
.text:0040FE20 var_1AC         = dword ptr -1ACh
.text:0040FE20 var_1A8         = dword ptr -1A8h
.text:0040FE20 var_19C         = dword ptr -19Ch
.text:0040FE20 var_13C         = dword ptr -13Ch
.text:0040FE20 var_DC          = dword ptr -0DCh
.text:0040FE20 var_7C          = dword ptr -7Ch
.text:0040FE20 Buffer          = dword ptr  4
.text:0040FE20 arg_4           = dword ptr  8
.text:0040FE20 arg_8           = dword ptr  0Ch
.text:0040FE20 arg_C           = dword ptr  10h
.text:0040FE20 arg_10          = dword ptr  14h
.text:0040FE20
.text:0040FE20                 push    ebp
.text:0040FE21                 push    edi
.text:0040FE22                 push    esi
.text:0040FE23                 push    ebx
.text:0040FE24                 sub     esp, 1ACh
.text:0040FE2A                 mov     eax, [esp+1BCh+arg_C]
.text:0040FE31                 mov     esi, [esp+1BCh+arg_8]
.text:0040FE38                 test    eax, eax
.text:0040FE3A                 jz      short loc_40FE4C
.text:0040FE3C                 mov     edx, [esp+1BCh+arg_C]
.text:0040FE43                 cmp     byte ptr [edx], 0
.text:0040FE46                 jnz     loc_410080
.text:0040FE4C
.text:0040FE4C loc_40FE4C:                             ; CODE XREF: sub_40FE20+1A↑j
.text:0040FE4C                 mov     eax, offset aFile ; "file"
.text:0040FE51                 mov     ebp, 4
.text:0040FE56                 mov     [esp+1BCh+arg_C], eax
.text:0040FE5D
.text:0040FE5D loc_40FE5D:                             ; CODE XREF: sub_40FE20+274↓j
.text:0040FE5D                                         ; sub_40FE20+27F↓j
.text:0040FE5D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040FE64                 test    ebx, ebx
.text:0040FE66                 jnz     loc_40FFC0
.text:0040FE6C
.text:0040FE6C loc_40FE6C:                             ; CODE XREF: sub_40FE20+21C↓j
.text:0040FE6C                                         ; sub_40FE20+224↓j ...
.text:0040FE6C                 test    esi, esi
.text:0040FE6E                 jz      loc_40FF02
.text:0040FE74
.text:0040FE74 loc_40FE74:                             ; CODE XREF: sub_40FE20+176↓j
.text:0040FE74                                         ; sub_40FE20+19A↓j
.text:0040FE74                 mov     [esp+1BCh+Str], esi ; Str
.text:0040FE77                 call    strlen
.text:0040FE7C                 test    eax, eax
.text:0040FE7E                 mov     edx, eax
.text:0040FE80                 jz      short loc_40FE90
.text:0040FE82                 movzx   eax, byte ptr [eax+esi-1]
.text:0040FE87                 cmp     al, 2Fh ; '/'
.text:0040FE89                 jz      short loc_40FEF0
.text:0040FE8B                 cmp     al, 5Ch ; '\'
.text:0040FE8D                 jz      short loc_40FEF0
.text:0040FE8F                 nop
.text:0040FE90
.text:0040FE90 loc_40FE90:                             ; CODE XREF: sub_40FE20+60↑j
.text:0040FE90                                         ; sub_40FE20+D1↓j ...
.text:0040FE90                 lea     edi, [ebp+edx+8]
.text:0040FE94                 cmp     [esp+1BCh+arg_4], edi
.text:0040FE9B                 jb      short loc_40FED8
.text:0040FE9D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040FEA1                 mov     ecx, [esp+1BCh+arg_C]
.text:0040FEA8                 mov     ebp, [esp+1BCh+Buffer]
.text:0040FEAF                 mov     [esp+1BCh+var_1B0], esi
.text:0040FEB3                 mov     [esp+1BCh+var_1A8], ecx
.text:0040FEB7                 mov     [esp+1BCh+var_1B4], edx
.text:0040FEBB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040FEC3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040FEC6                 call    sprintf
.text:0040FECB                 xor     eax, eax
.text:0040FECD
.text:0040FECD loc_40FECD:                             ; CODE XREF: sub_40FE20+C8↓j
.text:0040FECD                 add     esp, 1ACh
.text:0040FED3                 pop     ebx
.text:0040FED4                 pop     esi
.text:0040FED5                 pop     edi
.text:0040FED6                 pop     ebp
.text:0040FED7                 retn
.text:0040FED8 ; ---------------------------------------------------------------------------
.text:0040FED8
.text:0040FED8 loc_40FED8:                             ; CODE XREF: sub_40FE20+7B↑j
.text:0040FED8                 call    _errno
.text:0040FEDD                 mov     dword ptr [eax], 16h
.text:0040FEE3
.text:0040FEE3 loc_40FEE3:                             ; CODE XREF: sub_40FE20+187↓j
.text:0040FEE3                 mov     eax, 0FFFFFFFFh
.text:0040FEE8                 jmp     short loc_40FECD
.text:0040FEE8 ; ---------------------------------------------------------------------------
.text:0040FEEA                 align 10h
.text:0040FEF0
.text:0040FEF0 loc_40FEF0:                             ; CODE XREF: sub_40FE20+69↑j
.text:0040FEF0                                         ; sub_40FE20+6D↑j ...
.text:0040FEF0                 dec     edx
.text:0040FEF1                 jz      short loc_40FE90
.text:0040FEF3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040FEF8                 cmp     al, 2Fh ; '/'
.text:0040FEFA                 jz      short loc_40FEF0
.text:0040FEFC                 cmp     al, 5Ch ; '\'
.text:0040FEFE                 jz      short loc_40FEF0
.text:0040FF00                 jmp     short loc_40FE90
.text:0040FF02 ; ---------------------------------------------------------------------------
.text:0040FF02
.text:0040FF02 loc_40FF02:                             ; CODE XREF: sub_40FE20+4E↑j
.text:0040FF02                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040FF09                 lea     esi, [esp+1BCh+var_13C]
.text:0040FF10                 call    getenv
.text:0040FF15                 mov     [esp+1BCh+Format], eax ; char *
.text:0040FF19                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040FF1D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040FF24                 call    sub_40C850
.text:0040FF29                 test    eax, eax
.text:0040FF2B                 jnz     short loc_40FF42
.text:0040FF2D                 mov     edi, [esp+1BCh+var_13C]
.text:0040FF34                 and     edi, 0F000h
.text:0040FF3A                 cmp     edi, 4000h
.text:0040FF40                 jz      short loc_40FFAC
.text:0040FF42
.text:0040FF42 loc_40FF42:                             ; CODE XREF: sub_40FE20+10B↑j
.text:0040FF42                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040FF49                 call    getenv
.text:0040FF4E                 cld
.text:0040FF4F                 mov     edx, offset aTmp ; "/tmp"
.text:0040FF54                 mov     esi, eax
.text:0040FF56                 mov     ecx, 5
.text:0040FF5B                 mov     edi, edx
.text:0040FF5D                 repe cmpsb
.text:0040FF5F                 jz      short loc_40FF9C
.text:0040FF61                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040FF69                 lea     ecx, [esp+1BCh+var_19C]
.text:0040FF6D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040FF71                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040FF78                 call    sub_40C850
.text:0040FF7D                 test    eax, eax
.text:0040FF7F                 jnz     short loc_40FF9C
.text:0040FF81                 mov     ebx, [esp+1BCh+var_19C]
.text:0040FF85                 mov     esi, offset aTmp ; "/tmp"
.text:0040FF8A                 and     ebx, 0F000h
.text:0040FF90                 cmp     ebx, 4000h
.text:0040FF96                 jz      loc_40FE74
.text:0040FF9C
.text:0040FF9C loc_40FF9C:                             ; CODE XREF: sub_40FE20+13F↑j
.text:0040FF9C                                         ; sub_40FE20+15F↑j
.text:0040FF9C                 call    _errno
.text:0040FFA1                 mov     dword ptr [eax], 2
.text:0040FFA7                 jmp     loc_40FEE3
.text:0040FFAC ; ---------------------------------------------------------------------------
.text:0040FFAC
.text:0040FFAC loc_40FFAC:                             ; CODE XREF: sub_40FE20+120↑j
.text:0040FFAC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040FFB3                 call    getenv
.text:0040FFB8                 mov     esi, eax
.text:0040FFBA                 jmp     loc_40FE74
.text:0040FFBA ; ---------------------------------------------------------------------------
.text:0040FFBF                 align 10h
.text:0040FFC0
.text:0040FFC0 loc_40FFC0:                             ; CODE XREF: sub_40FE20+46↑j
.text:0040FFC0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040FFC7                 call    sub_4106B0
.text:0040FFCC                 test    eax, eax
.text:0040FFCE                 mov     ebx, eax
.text:0040FFD0                 jz      short loc_410050
.text:0040FFD2
.text:0040FFD2 loc_40FFD2:                             ; CODE XREF: sub_40FE20+240↓j
.text:0040FFD2                                         ; sub_40FE20+256↓j
.text:0040FFD2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040FFD6                 lea     edi, [esp+1BCh+var_7C]
.text:0040FFDD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040FFE1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040FFE8                 call    sub_40C850
.text:0040FFED                 test    eax, eax
.text:0040FFEF                 jnz     short loc_410006
.text:0040FFF1                 mov     edx, [esp+1BCh+var_7C]
.text:0040FFF8                 and     edx, 0F000h
.text:0040FFFE                 cmp     edx, 4000h
.text:00410004                 jz      short loc_410049
.text:00410006
.text:00410006 loc_410006:                             ; CODE XREF: sub_40FE20+1CF↑j
.text:00410006                                         ; sub_40FE20+25C↓j
.text:00410006                 test    esi, esi
.text:00410008                 jz      short loc_410042
.text:0041000A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041000E                 lea     ecx, [esp+1BCh+var_DC]
.text:00410015                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00410019                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410020                 call    sub_40C850
.text:00410025                 test    eax, eax
.text:00410027                 jnz     short loc_410042
.text:00410029                 mov     ebx, [esp+1BCh+var_DC]
.text:00410030                 and     ebx, 0F000h
.text:00410036                 cmp     ebx, 4000h
.text:0041003C                 jz      loc_40FE6C
.text:00410042
.text:00410042 loc_410042:                             ; CODE XREF: sub_40FE20+1E8↑j
.text:00410042                                         ; sub_40FE20+207↑j
.text:00410042                 xor     esi, esi
.text:00410044                 jmp     loc_40FE6C
.text:00410049 ; ---------------------------------------------------------------------------
.text:00410049
.text:00410049 loc_410049:                             ; CODE XREF: sub_40FE20+1E4↑j
.text:00410049                 mov     esi, ebx
.text:0041004B                 jmp     loc_40FE6C
.text:00410050 ; ---------------------------------------------------------------------------
.text:00410050
.text:00410050 loc_410050:                             ; CODE XREF: sub_40FE20+1B0↑j
.text:00410050                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00410057                 call    sub_4106B0
.text:0041005C                 test    eax, eax
.text:0041005E                 mov     ebx, eax
.text:00410060                 jnz     loc_40FFD2
.text:00410066                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041006D                 call    sub_4106B0
.text:00410072                 test    eax, eax
.text:00410074                 mov     ebx, eax
.text:00410076                 jnz     loc_40FFD2
.text:0041007C                 jmp     short loc_410006
.text:0041007C ; ---------------------------------------------------------------------------
.text:0041007E                 align 10h
.text:00410080
.text:00410080 loc_410080:                             ; CODE XREF: sub_40FE20+26↑j
.text:00410080                 mov     ecx, [esp+1BCh+arg_C]
.text:00410087                 mov     [esp+1BCh+Str], ecx ; Str
.text:0041008A                 call    strlen
.text:0041008F                 cmp     eax, 5
.text:00410092                 mov     ebp, eax
.text:00410094                 jbe     loc_40FE5D
.text:0041009A                 mov     ebp, 5
.text:0041009F                 jmp     loc_40FE5D
.text:0041009F sub_40FE20      endp
.text:0041009F
.text:0041009F ; ---------------------------------------------------------------------------
.text:004100A4                 align 10h
.text:004100B0 byte_4100B0     db 61h                  ; DATA XREF: sub_4101A0+DC↓r
.text:004100B0                                         ; sub_4101A0+122↓r ...
.text:004100B1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:004100EF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_4101A0+39↓o
.text:004100F6                 db 1Ah dup(90h)
.text:00410110 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00410110                                         ; DATA XREF: sub_4101A0:loc_410418↓o
.text:0041012F                 align 10h
.text:00410130 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00410130                                         ; DATA XREF: sub_4101A0+405↓o
.text:0041015B                 db 15h dup(90h)
.text:00410170 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00410170                                         ; DATA XREF: sub_4101A0+40D↓o
.text:00410193                 align 10h
.text:004101A0
.text:004101A0 ; =============== S U B R O U T I N E =======================================
.text:004101A0
.text:004101A0
.text:004101A0 ; int __cdecl sub_4101A0(char *FileName, int)
.text:004101A0 sub_4101A0      proc near               ; CODE XREF: sub_40F740+51↑p
.text:004101A0
.text:004101A0 Str             = dword ptr -9Ch
.text:004101A0 OpenFlag        = dword ptr -98h
.text:004101A0 var_94          = dword ptr -94h
.text:004101A0 var_90          = dword ptr -90h
.text:004101A0 var_8C          = dword ptr -8Ch
.text:004101A0 var_88          = dword ptr -88h
.text:004101A0 var_84          = dword ptr -84h
.text:004101A0 var_80          = dword ptr -80h
.text:004101A0 var_7C          = dword ptr -7Ch
.text:004101A0 FileName        = dword ptr  4
.text:004101A0 arg_4           = dword ptr  8
.text:004101A0
.text:004101A0                 push    ebp
.text:004101A1                 push    edi
.text:004101A2                 push    esi
.text:004101A3                 push    ebx
.text:004101A4                 sub     esp, 8Ch
.text:004101AA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:004101B2                 call    _errno
.text:004101B7                 mov     edx, [eax]
.text:004101B9                 mov     [esp+9Ch+var_8C], edx
.text:004101BD                 mov     edx, [esp+9Ch+FileName]
.text:004101C4                 mov     [esp+9Ch+Str], edx ; Str
.text:004101C7                 call    strlen
.text:004101CC                 cmp     eax, 5
.text:004101CF                 jle     short loc_4101ED
.text:004101D1                 cld
.text:004101D2                 mov     ecx, [esp+9Ch+FileName]
.text:004101D9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:004101DE                 lea     esi, [eax+ecx-6]
.text:004101E2                 mov     ecx, 7
.text:004101E7                 mov     ebp, esi
.text:004101E9                 repe cmpsb
.text:004101EB                 jz      short loc_410208
.text:004101ED
.text:004101ED loc_4101ED:                             ; CODE XREF: sub_4101A0+2F↑j
.text:004101ED                 call    _errno
.text:004101F2                 mov     dword ptr [eax], 16h
.text:004101F8
.text:004101F8 loc_4101F8:                             ; CODE XREF: sub_4101A0+295↓j
.text:004101F8                                         ; sub_4101A0+2D8↓j ...
.text:004101F8                 mov     eax, 0FFFFFFFFh
.text:004101FD
.text:004101FD loc_4101FD:                             ; CODE XREF: sub_4101A0+2EF↓j
.text:004101FD                                         ; sub_4101A0+332↓j
.text:004101FD                 add     esp, 8Ch
.text:00410203                 pop     ebx
.text:00410204                 pop     esi
.text:00410205                 pop     edi
.text:00410206                 pop     ebp
.text:00410207                 retn
.text:00410208 ; ---------------------------------------------------------------------------
.text:00410208
.text:00410208 loc_410208:                             ; CODE XREF: sub_4101A0+4B↑j
.text:00410208                 mov     ecx, ds:dword_414544
.text:0041020E                 mov     edi, ds:dword_414540
.text:00410214                 mov     eax, ecx
.text:00410216                 or      eax, edi
.text:00410218                 jz      loc_410553
.text:0041021E
.text:0041021E loc_41021E:                             ; CODE XREF: sub_4101A0+3F8↓j
.text:0041021E                 rdtsc
.text:00410220                 mov     edi, edx
.text:00410222                 mov     esi, eax
.text:00410224                 call    _getpid
.text:00410229                 mov     ebx, eax
.text:0041022B                 mov     edx, esi
.text:0041022D                 sar     ebx, 1Fh
.text:00410230                 xor     edx, eax
.text:00410232                 mov     ecx, edi
.text:00410234                 xor     ecx, ebx
.text:00410236                 mov     ebx, edx
.text:00410238                 mov     esi, ecx
.text:0041023A                 add     ebx, ds:dword_414540
.text:00410240                 adc     esi, ds:dword_414544
.text:00410246                 xor     edi, edi
.text:00410248                 mov     ds:dword_414540, ebx
.text:0041024E                 mov     ds:dword_414544, esi
.text:00410254                 lea     esi, [esi+0]
.text:0041025A                 lea     edi, [edi+0]
.text:00410260
.text:00410260 loc_410260:                             ; CODE XREF: sub_4101A0+2C7↓j
.text:00410260                 mov     [esp+9Ch+Str], ebx
.text:00410263                 mov     [esp+9Ch+OpenFlag], esi
.text:00410267                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041026F                 mov     [esp+9Ch+var_90], 0
.text:00410277                 call    sub_411E70
.text:0041027C                 movzx   ecx, ds:byte_4100B0[eax]
.text:00410283                 mov     [ebp+0], cl
.text:00410286                 mov     [esp+9Ch+Str], ebx
.text:00410289                 mov     [esp+9Ch+OpenFlag], esi
.text:0041028D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410295                 mov     [esp+9Ch+var_90], 0
.text:0041029D                 call    sub_411FF0
.text:004102A2                 mov     [esp+9Ch+Str], eax
.text:004102A5                 mov     ebx, eax
.text:004102A7                 mov     esi, edx
.text:004102A9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004102B1                 mov     [esp+9Ch+var_90], 0
.text:004102B9                 mov     [esp+9Ch+OpenFlag], edx
.text:004102BD                 call    sub_411E70
.text:004102C2                 movzx   edx, ds:byte_4100B0[eax]
.text:004102C9                 mov     [ebp+1], dl
.text:004102CC                 mov     [esp+9Ch+Str], ebx
.text:004102CF                 mov     [esp+9Ch+OpenFlag], esi
.text:004102D3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004102DB                 mov     [esp+9Ch+var_90], 0
.text:004102E3                 call    sub_411FF0
.text:004102E8                 mov     [esp+9Ch+Str], eax
.text:004102EB                 mov     ebx, eax
.text:004102ED                 mov     esi, edx
.text:004102EF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004102F7                 mov     [esp+9Ch+var_90], 0
.text:004102FF                 mov     [esp+9Ch+OpenFlag], edx
.text:00410303                 call    sub_411E70
.text:00410308                 movzx   ecx, ds:byte_4100B0[eax]
.text:0041030F                 mov     [ebp+2], cl
.text:00410312                 mov     [esp+9Ch+Str], ebx
.text:00410315                 mov     [esp+9Ch+OpenFlag], esi
.text:00410319                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410321                 mov     [esp+9Ch+var_90], 0
.text:00410329                 call    sub_411FF0
.text:0041032E                 mov     [esp+9Ch+Str], eax
.text:00410331                 mov     ebx, eax
.text:00410333                 mov     esi, edx
.text:00410335                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041033D                 mov     [esp+9Ch+var_90], 0
.text:00410345                 mov     [esp+9Ch+OpenFlag], edx
.text:00410349                 call    sub_411E70
.text:0041034E                 movzx   edx, ds:byte_4100B0[eax]
.text:00410355                 mov     [ebp+3], dl
.text:00410358                 mov     [esp+9Ch+Str], ebx
.text:0041035B                 mov     [esp+9Ch+OpenFlag], esi
.text:0041035F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410367                 mov     [esp+9Ch+var_90], 0
.text:0041036F                 call    sub_411FF0
.text:00410374                 mov     [esp+9Ch+Str], eax
.text:00410377                 mov     ebx, eax
.text:00410379                 mov     esi, edx
.text:0041037B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410383                 mov     [esp+9Ch+var_90], 0
.text:0041038B                 mov     [esp+9Ch+OpenFlag], edx
.text:0041038F                 call    sub_411E70
.text:00410394                 movzx   ecx, ds:byte_4100B0[eax]
.text:0041039B                 mov     [ebp+4], cl
.text:0041039E                 mov     [esp+9Ch+Str], ebx
.text:004103A1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004103A9                 mov     [esp+9Ch+var_90], 0
.text:004103B1                 mov     [esp+9Ch+OpenFlag], esi
.text:004103B5                 call    sub_411FF0
.text:004103BA                 mov     [esp+9Ch+Str], eax
.text:004103BD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004103C5                 mov     [esp+9Ch+var_90], 0
.text:004103CD                 mov     [esp+9Ch+OpenFlag], edx
.text:004103D1                 call    sub_411E70
.text:004103D6                 movzx   ebx, ds:byte_4100B0[eax]
.text:004103DD                 mov     [ebp+5], bl
.text:004103E0                 cmp     [esp+9Ch+arg_4], 1
.text:004103E8                 jz      loc_410537
.text:004103EE                 cmp     [esp+9Ch+arg_4], 1
.text:004103F6                 jle     loc_410500
.text:004103FC                 cmp     [esp+9Ch+arg_4], 2
.text:00410404                 jz      loc_4104D7
.text:0041040A                 cmp     [esp+9Ch+arg_4], 3
.text:00410412                 jz      loc_410494
.text:00410418
.text:00410418 loc_410418:                             ; CODE XREF: sub_4101A0+369↓j
.text:00410418                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041041D                 test    ebx, ebx
.text:0041041F                 jnz     loc_41059D
.text:00410425
.text:00410425 loc_410425:                             ; CODE XREF: sub_4101A0+354↓j
.text:00410425                 mov     eax, [esp+9Ch+var_88]
.text:00410429                 test    eax, eax
.text:0041042B                 jns     short loc_410480
.text:0041042D                 call    _errno
.text:00410432                 cmp     dword ptr [eax], 11h
.text:00410435                 jnz     loc_4101F8
.text:0041043B
.text:0041043B loc_41043B:                             ; CODE XREF: sub_4101A0+315↓j
.text:0041043B                 mov     edx, ds:dword_414540
.text:00410441                 mov     ecx, ds:dword_414544
.text:00410447                 add     edx, 1E61h
.text:0041044D                 adc     ecx, 0
.text:00410450                 mov     ebx, edx
.text:00410452                 inc     edi
.text:00410453                 mov     ds:dword_414540, edx
.text:00410459                 cmp     edi, 3A2F8h
.text:0041045F                 mov     esi, ecx
.text:00410461                 mov     ds:dword_414544, ecx
.text:00410467                 jb      loc_410260
.text:0041046D                 call    _errno
.text:00410472                 mov     dword ptr [eax], 11h
.text:00410478                 jmp     loc_4101F8
.text:00410478 ; ---------------------------------------------------------------------------
.text:0041047D                 align 10h
.text:00410480
.text:00410480 loc_410480:                             ; CODE XREF: sub_4101A0+28B↑j
.text:00410480                 call    _errno
.text:00410485                 mov     esi, [esp+9Ch+var_8C]
.text:00410489                 mov     [eax], esi
.text:0041048B                 mov     eax, [esp+9Ch+var_88]
.text:0041048F                 jmp     loc_4101FD
.text:00410494 ; ---------------------------------------------------------------------------
.text:00410494
.text:00410494 loc_410494:                             ; CODE XREF: sub_4101A0+272↑j
.text:00410494                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041049B                 mov     ecx, [esp+9Ch+FileName]
.text:004104A2                 lea     esi, [esp+9Ch+var_7C]
.text:004104A6                 mov     [esp+9Ch+var_94], esi ; int
.text:004104AA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:004104AE                 call    sub_40B0A0
.text:004104B3                 test    eax, eax
.text:004104B5                 jns     short loc_41043B
.text:004104B7                 call    _errno
.text:004104BC                 cmp     dword ptr [eax], 2
.text:004104BF                 jnz     loc_4101F8
.text:004104C5                 call    _errno
.text:004104CA                 mov     ebx, [esp+9Ch+var_8C]
.text:004104CE                 mov     [eax], ebx
.text:004104D0                 xor     eax, eax
.text:004104D2                 jmp     loc_4101FD
.text:004104D7 ; ---------------------------------------------------------------------------
.text:004104D7
.text:004104D7 loc_4104D7:                             ; CODE XREF: sub_4101A0+264↑j
.text:004104D7                 mov     [esp+9Ch+OpenFlag], 1C0h ; int
.text:004104DF                 mov     edx, [esp+9Ch+FileName]
.text:004104E6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:004104E9                 call    sub_4105D0
.text:004104EE                 mov     esi, esi
.text:004104F0
.text:004104F0 loc_4104F0:                             ; CODE XREF: sub_4101A0+395↓j
.text:004104F0                 mov     [esp+9Ch+var_88], eax
.text:004104F4                 jmp     loc_410425
.text:004104F4 ; ---------------------------------------------------------------------------
.text:004104F9                 align 10h
.text:00410500
.text:00410500 loc_410500:                             ; CODE XREF: sub_4101A0+256↑j
.text:00410500                 mov     eax, [esp+9Ch+arg_4]
.text:00410507                 test    eax, eax
.text:00410509                 jnz     loc_410418
.text:0041050F                 mov     [esp+9Ch+var_94], 180h
.text:00410517                 mov     esi, [esp+9Ch+FileName]
.text:0041051E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00410526                 mov     [esp+9Ch+Str], esi ; FileName
.text:00410529                 lea     esi, [esi+0]
.text:00410530
.text:00410530 loc_410530:                             ; CODE XREF: sub_4101A0+3B1↓j
.text:00410530                 call    _open_0
.text:00410535                 jmp     short loc_4104F0
.text:00410537 ; ---------------------------------------------------------------------------
.text:00410537
.text:00410537 loc_410537:                             ; CODE XREF: sub_4101A0+248↑j
.text:00410537                 mov     [esp+9Ch+var_94], 180h
.text:0041053F                 mov     ebx, [esp+9Ch+FileName]
.text:00410546                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0041054E                 mov     [esp+9Ch+Str], ebx
.text:00410551                 jmp     short loc_410530
.text:00410553 ; ---------------------------------------------------------------------------
.text:00410553
.text:00410553 loc_410553:                             ; CODE XREF: sub_4101A0+78↑j
.text:00410553                 mov     [esp+9Ch+OpenFlag], 0
.text:0041055B                 lea     ebx, [esp+9Ch+var_84]
.text:0041055F                 mov     [esp+9Ch+Str], ebx
.text:00410562                 call    sub_410650
.text:00410567                 mov     edi, [esp+9Ch+var_80]
.text:0041056B                 mov     edx, [esp+9Ch+var_84]
.text:0041056F                 mov     ecx, edi
.text:00410571                 mov     ebx, edi
.text:00410573                 shl     ecx, 10h
.text:00410576                 sar     ebx, 1Fh
.text:00410579                 shld    ebx, edi, 10h
.text:0041057D                 mov     esi, edx
.text:0041057F                 mov     edi, edx
.text:00410581                 mov     edx, ecx
.text:00410583                 sar     edi, 1Fh
.text:00410586                 xor     edx, esi
.text:00410588                 mov     ds:dword_414540, edx
.text:0041058E                 mov     esi, ebx
.text:00410590                 xor     esi, edi
.text:00410592                 mov     ds:dword_414544, esi
.text:00410598                 jmp     loc_41021E
.text:0041059D ; ---------------------------------------------------------------------------
.text:0041059D
.text:0041059D loc_41059D:                             ; CODE XREF: sub_4101A0+27F↑j
.text:0041059D                 mov     [esp+9Ch+var_94], 151h
.text:004105A5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:004105AD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:004105B4                 call    _assert
.text:004105B4 sub_4101A0      endp
.text:004105B4
.text:004105B4 ; ---------------------------------------------------------------------------
.text:004105B9                 db 17h dup(90h)
.text:004105D0
.text:004105D0 ; =============== S U B R O U T I N E =======================================
.text:004105D0
.text:004105D0
.text:004105D0 ; int __cdecl sub_4105D0(LPCSTR, int)
.text:004105D0 sub_4105D0      proc near               ; CODE XREF: sub_4101A0+349↑p
.text:004105D0
.text:004105D0 lpPathName      = dword ptr -1Ch
.text:004105D0 lpSecurityAttributes= dword ptr -18h
.text:004105D0 var_8           = dword ptr -8
.text:004105D0 var_4           = dword ptr -4
.text:004105D0 arg_0           = dword ptr  4
.text:004105D0 arg_4           = dword ptr  8
.text:004105D0
.text:004105D0                 sub     esp, 1Ch
.text:004105D3                 mov     [esp+1Ch+var_8], ebx
.text:004105D7                 mov     ebx, [esp+1Ch+arg_0]
.text:004105DB                 mov     [esp+1Ch+var_4], esi
.text:004105DF                 mov     esi, [esp+1Ch+arg_4]
.text:004105E3                 test    ebx, ebx
.text:004105E5                 jz      short loc_410635
.text:004105E7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004105EF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:004105F2                 call    CreateDirectoryA
.text:004105F7                 sub     esp, 8
.text:004105FA                 test    eax, eax
.text:004105FC                 jz      short loc_410616
.text:004105FE                 mov     [esp+1Ch+arg_4], esi
.text:00410602                 mov     esi, [esp+1Ch+var_4]
.text:00410606                 mov     [esp+1Ch+arg_0], ebx
.text:0041060A                 mov     ebx, [esp+1Ch+var_8]
.text:0041060E                 add     esp, 1Ch
.text:00410611                 jmp     _chmod
.text:00410616 ; ---------------------------------------------------------------------------
.text:00410616
.text:00410616 loc_410616:                             ; CODE XREF: sub_4105D0+2C↑j
.text:00410616                 call    sub_40D0E0
.text:0041061B                 mov     esi, eax
.text:0041061D                 call    _errno
.text:00410622                 mov     [eax], esi
.text:00410624
.text:00410624 loc_410624:                             ; CODE XREF: sub_4105D0+70↓j
.text:00410624                 mov     ebx, [esp+1Ch+var_8]
.text:00410628                 mov     eax, 0FFFFFFFFh
.text:0041062D                 mov     esi, [esp+1Ch+var_4]
.text:00410631                 add     esp, 1Ch
.text:00410634                 retn
.text:00410635 ; ---------------------------------------------------------------------------
.text:00410635
.text:00410635 loc_410635:                             ; CODE XREF: sub_4105D0+15↑j
.text:00410635                 call    _errno
.text:0041063A                 mov     dword ptr [eax], 16h
.text:00410640                 jmp     short loc_410624
.text:00410640 sub_4105D0      endp
.text:00410640
.text:00410640 ; ---------------------------------------------------------------------------
.text:00410642                 align 10h
.text:00410650
.text:00410650 ; =============== S U B R O U T I N E =======================================
.text:00410650
.text:00410650
.text:00410650 sub_410650      proc near               ; CODE XREF: sub_4101A0+3C2↑p
.text:00410650
.text:00410650 var_1C          = dword ptr -1Ch
.text:00410650 var_18          = dword ptr -18h
.text:00410650 var_C           = dword ptr -0Ch
.text:00410650 var_8           = dword ptr -8
.text:00410650 var_4           = dword ptr -4
.text:00410650 arg_0           = dword ptr  4
.text:00410650 arg_4           = dword ptr  8
.text:00410650
.text:00410650                 sub     esp, 1Ch
.text:00410653                 mov     edx, [esp+1Ch+arg_4]
.text:00410657                 mov     [esp+1Ch+var_4], ebx
.text:0041065B                 mov     ebx, [esp+1Ch+arg_0]
.text:0041065F                 mov     [esp+1Ch+var_18], edx
.text:00410663                 lea     edx, [esp+1Ch+var_C]
.text:00410667                 mov     [esp+1Ch+var_1C], edx
.text:0041066A                 call    sub_4106D0
.text:0041066F                 test    eax, eax
.text:00410671                 mov     edx, 0FFFFFFFFh
.text:00410676                 jnz     short loc_41069A
.text:00410678                 mov     ecx, [esp+1Ch+var_C]
.text:0041067C                 mov     edx, 10624DD3h
.text:00410681                 mov     [ebx], ecx
.text:00410683                 mov     ecx, [esp+1Ch+var_8]
.text:00410687                 mov     eax, ecx
.text:00410689                 imul    edx
.text:0041068B                 mov     eax, ecx
.text:0041068D                 sar     eax, 1Fh
.text:00410690                 sar     edx, 6
.text:00410693                 sub     edx, eax
.text:00410695                 mov     [ebx+4], edx
.text:00410698                 xor     edx, edx
.text:0041069A
.text:0041069A loc_41069A:                             ; CODE XREF: sub_410650+26↑j
.text:0041069A                 mov     ebx, [esp+1Ch+var_4]
.text:0041069E                 mov     eax, edx
.text:004106A0                 add     esp, 1Ch
.text:004106A3                 retn
.text:004106A3 sub_410650      endp
.text:004106A3
.text:004106A3 ; ---------------------------------------------------------------------------
.text:004106A4                 align 10h
.text:004106B0
.text:004106B0 ; =============== S U B R O U T I N E =======================================
.text:004106B0
.text:004106B0
.text:004106B0 sub_4106B0      proc near               ; CODE XREF: sub_40FE20+1A7↑p
.text:004106B0                                         ; sub_40FE20+237↑p ...
.text:004106B0                 mov     edx, ds:dword_414550
.text:004106B6                 test    edx, edx
.text:004106B8                 jnz     short loc_4106C0
.text:004106BA                 jmp     getenv
.text:004106BA ; ---------------------------------------------------------------------------
.text:004106BF                 align 10h
.text:004106C0
.text:004106C0 loc_4106C0:                             ; CODE XREF: sub_4106B0+8↑j
.text:004106C0                 xor     eax, eax
.text:004106C2                 retn
.text:004106C2 sub_4106B0      endp
.text:004106C2
.text:004106C2 ; ---------------------------------------------------------------------------
.text:004106C3                 align 10h
.text:004106D0
.text:004106D0 ; =============== S U B R O U T I N E =======================================
.text:004106D0
.text:004106D0
.text:004106D0 sub_4106D0      proc near               ; CODE XREF: sub_410650+1A↑p
.text:004106D0
.text:004106D0 lpTimeZoneInformation= dword ptr -0DCh
.text:004106D0 var_D8          = dword ptr -0D8h
.text:004106D0 var_D4          = dword ptr -0D4h
.text:004106D0 var_D0          = dword ptr -0D0h
.text:004106D0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:004106D0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:004106D0 arg_0           = dword ptr  4
.text:004106D0 arg_4           = dword ptr  8
.text:004106D0
.text:004106D0                 push    edi
.text:004106D1                 push    esi
.text:004106D2                 push    ebx
.text:004106D3                 sub     esp, 0D0h
.text:004106D9                 mov     ebx, [esp+0DCh+arg_4]
.text:004106E0                 mov     edi, [esp+0DCh+arg_0]
.text:004106E7                 test    ebx, ebx
.text:004106E9                 jz      short loc_410714
.text:004106EB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:004106EF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:004106F2                 call    GetTimeZoneInformation
.text:004106F7                 sub     esp, 4
.text:004106FA                 cmp     eax, 0FFFFFFFFh
.text:004106FD                 jz      loc_410795
.text:00410703                 xor     ecx, ecx
.text:00410705                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00410709                 cmp     eax, 2
.text:0041070C                 setz    cl
.text:0041070F                 mov     [ebx], esi
.text:00410711                 mov     [ebx+4], ecx
.text:00410714
.text:00410714 loc_410714:                             ; CODE XREF: sub_4106D0+19↑j
.text:00410714                                         ; sub_4106D0+E0↓j
.text:00410714                 test    edi, edi
.text:00410716                 jz      short loc_410789
.text:00410718                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041071C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041071F                 call    GetSystemTimeAsFileTime
.text:00410724                 sub     esp, 4
.text:00410727                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041072B                 mov     [esp+0DCh+var_D4], 989680h
.text:00410733                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00410737                 mov     [esp+0DCh+var_D0], 0
.text:0041073F                 add     ebx, 2AC18000h
.text:00410745                 adc     esi, 0FE624E21h
.text:0041074B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041074F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410752                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00410756                 mov     [esp+0DCh+var_D8], esi
.text:0041075A                 call    sub_411FF0
.text:0041075F                 mov     [edi], eax
.text:00410761                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410764                 mov     [esp+0DCh+var_D4], 989680h
.text:0041076C                 mov     [esp+0DCh+var_D0], 0
.text:00410774                 mov     [esp+0DCh+var_D8], esi
.text:00410778                 call    sub_411E70
.text:0041077D                 lea     ebx, [eax+eax*4]
.text:00410780                 lea     edx, [ebx+ebx*4]
.text:00410783                 shl     edx, 2
.text:00410786                 mov     [edi+4], edx
.text:00410789
.text:00410789 loc_410789:                             ; CODE XREF: sub_4106D0+46↑j
.text:00410789                 add     esp, 0D0h
.text:0041078F                 xor     eax, eax
.text:00410791                 pop     ebx
.text:00410792                 pop     esi
.text:00410793                 pop     edi
.text:00410794                 retn
.text:00410795 ; ---------------------------------------------------------------------------
.text:00410795
.text:00410795 loc_410795:                             ; CODE XREF: sub_4106D0+2D↑j
.text:00410795                 mov     dword ptr [ebx], 0
.text:0041079B                 mov     dword ptr [ebx+4], 0
.text:004107A2                 call    sub_40D0E0
.text:004107A7                 mov     esi, eax
.text:004107A9                 call    _errno
.text:004107AE                 mov     [eax], esi
.text:004107B0                 jmp     loc_410714
.text:004107B0 sub_4106D0      endp
.text:004107B0
.text:004107B0 ; ---------------------------------------------------------------------------
.text:004107B5                 align 10h
.text:004107C0                 sub     esp, 0Ch
.text:004107C3                 mov     [esp+4], ebx
.text:004107C7                 mov     [esp+8], esi
.text:004107CB                 xor     esi, esi
.text:004107CD                 call    sub_410840
.text:004107D2                 mov     ebx, eax
.text:004107D4                 call    sub_410830
.text:004107D9                 cmp     ebx, eax
.text:004107DB                 jz      short loc_4107F4
.text:004107DD
.text:004107DD loc_4107DD:                             ; CODE XREF: .text:00410802↓j
.text:004107DD                 mov     esi, 1
.text:004107E2
.text:004107E2 loc_4107E2:                             ; CODE XREF: .text:00410804↓j
.text:004107E2                 mov     ds:dword_414550, esi
.text:004107E8                 mov     ebx, [esp+4]
.text:004107EC                 mov     esi, [esp+8]
.text:004107F0                 add     esp, 0Ch
.text:004107F3                 retn
.text:004107F4 ; ---------------------------------------------------------------------------
.text:004107F4
.text:004107F4 loc_4107F4:                             ; CODE XREF: .text:004107DB↑j
.text:004107F4                 call    sub_410820
.text:004107F9                 mov     ebx, eax
.text:004107FB                 call    sub_410810
.text:00410800                 cmp     ebx, eax
.text:00410802                 jnz     short loc_4107DD
.text:00410804                 jmp     short loc_4107E2
.text:00410804 ; ---------------------------------------------------------------------------
.text:00410806                 align 10h
.text:00410810
.text:00410810 ; =============== S U B R O U T I N E =======================================
.text:00410810
.text:00410810
.text:00410810 sub_410810      proc near               ; CODE XREF: .text:004107FB↑p
.text:00410810                 xor     eax, eax
.text:00410812                 retn
.text:00410812 sub_410810      endp
.text:00410812
.text:00410812 ; ---------------------------------------------------------------------------
.text:00410813                 align 10h
.text:00410820
.text:00410820 ; =============== S U B R O U T I N E =======================================
.text:00410820
.text:00410820
.text:00410820 sub_410820      proc near               ; CODE XREF: .text:loc_4107F4↑p
.text:00410820                 xor     eax, eax
.text:00410822                 retn
.text:00410822 sub_410820      endp
.text:00410822
.text:00410822 ; ---------------------------------------------------------------------------
.text:00410823                 align 10h
.text:00410830
.text:00410830 ; =============== S U B R O U T I N E =======================================
.text:00410830
.text:00410830
.text:00410830 sub_410830      proc near               ; CODE XREF: .text:004107D4↑p
.text:00410830                 xor     eax, eax
.text:00410832                 retn
.text:00410832 sub_410830      endp
.text:00410832
.text:00410832 ; ---------------------------------------------------------------------------
.text:00410833                 align 10h
.text:00410840
.text:00410840 ; =============== S U B R O U T I N E =======================================
.text:00410840
.text:00410840
.text:00410840 sub_410840      proc near               ; CODE XREF: .text:004107CD↑p
.text:00410840                 xor     eax, eax
.text:00410842                 retn
.text:00410842 sub_410840      endp
.text:00410842
.text:00410842 ; ---------------------------------------------------------------------------
.text:00410843                 align 10h
.text:00410850
.text:00410850 ; =============== S U B R O U T I N E =======================================
.text:00410850
.text:00410850 ; Attributes: thunk
.text:00410850
.text:00410850 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00410850 OleInitialize   proc near               ; CODE XREF: sub_40EB80+1A↑p
.text:00410850
.text:00410850 pvReserved      = dword ptr  4
.text:00410850
.text:00410850                 jmp     ds:__imp_OleInitialize
.text:00410850 OleInitialize   endp
.text:00410850
.text:00410850 ; ---------------------------------------------------------------------------
.text:00410856                 align 10h
.text:00410860
.text:00410860 ; =============== S U B R O U T I N E =======================================
.text:00410860
.text:00410860 ; Attributes: thunk
.text:00410860
.text:00410860 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00410860 CoCreateInstance proc near              ; CODE XREF: sub_40EB80+52↑p
.text:00410860
.text:00410860 rclsid          = dword ptr  4
.text:00410860 pUnkOuter       = dword ptr  8
.text:00410860 dwClsContext    = dword ptr  0Ch
.text:00410860 riid            = dword ptr  10h
.text:00410860 ppv             = dword ptr  14h
.text:00410860
.text:00410860                 jmp     ds:__imp_CoCreateInstance
.text:00410860 CoCreateInstance endp
.text:00410860
.text:00410860 ; ---------------------------------------------------------------------------
.text:00410866                 align 10h
.text:00410870
.text:00410870 ; =============== S U B R O U T I N E =======================================
.text:00410870
.text:00410870 ; Attributes: thunk
.text:00410870
.text:00410870 ; void __stdcall CoUninitialize()
.text:00410870 CoUninitialize  proc near               ; CODE XREF: sub_40EB80+14E↑p
.text:00410870                                         ; sub_40EB80+16D↑p
.text:00410870                 jmp     ds:__imp_CoUninitialize
.text:00410870 CoUninitialize  endp
.text:00410870
.text:00410870 ; ---------------------------------------------------------------------------
.text:00410876                 align 10h
.text:00410880                 add     al, 0BAh ; 'º'
.text:00410882                 retf
.text:00410882 ; ---------------------------------------------------------------------------
.text:00410883                 db 7Eh
.text:00410884                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00410884                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00410884                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00410884                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00410884                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00410884                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00410884                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00410884                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00410884                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00410884                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00410884                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00410884                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00410884                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00410884                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00410884                 dd 0C4426C00h, 330h, 0
.text:004109B8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004109B8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:004109B8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:004109B8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00410A08                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410A08                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00410A08                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00410A08                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00410A08                 dd 0BA94B00h, 1Bh, 0
.text:00410A68                 dd 0C0h, 46000000h, 1Ch, 0
.text:00410A78                 dd 0C0h, 46000000h, 331h, 0
.text:00410A88                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410A88                 dd 312h, 0
.text:00410AA8                 dd 0C0h, 46000000h, 30Eh, 0
.text:00410AB8                 dd 0C0h, 46000000h, 30Dh, 0
.text:00410AC8                 dd 0C0h, 46000000h, 311h, 0
.text:00410AD8                 dd 0C0h, 46000000h, 313h, 0
.text:00410AE8                 dd 0C0h, 46000000h, 30Ch, 0
.text:00410AF8                 dd 0C0h, 46000000h, 30Fh, 0
.text:00410B08                 dd 0C0h, 46000000h, 310h, 0
.text:00410B18                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410B18                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00410B48                 dd 0C0h, 46000000h, 319h, 0
.text:00410B58                 dd 0C0h, 46000000h, 315h, 0
.text:00410B68                 dd 0C0h, 46000000h, 316h, 0
.text:00410B78                 dd 0C0h, 46000000h, 315h, 0
.text:00410B88                 dd 0C0h, 46000000h, 2E005h, 0
.text:00410B98                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00410B98                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00410B98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00410BD8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00410BD8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00410BD8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00410BD8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00410BD8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00410BD8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00410BD8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00410BD8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00410BD8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00410BD8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00410BD8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00410BD8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00410BD8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00410BD8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00410BD8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00410BD8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00410BD8                 dd 2DE81h, 0
.text:00410D28                 dd 0C0h, 46000000h, 4 dup(0)
.text:00410D40                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00410D40                 dd 0
.text:00410D58                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00410D58                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00410D58                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00410D58                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00410D58                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00410D58                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00410D58                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00410D58                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00410D58                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00410D58                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00410D58                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00410D58                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00410D58                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00410D58                 dd 10Fh, 0
.text:00410E68                 dd 0C0h, 46000000h, 125h, 0
.text:00410E78                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00410E78                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00410E78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00410EB8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00410EB8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410EB8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00410EB8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00410EB8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00410F18                 dd 0C0h, 46000000h, 2E012h, 0
.text:00410F28                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00410F28                 dd 140h, 0
.text:00410F48                 dd 0C0h, 46000000h, 1, 0
.text:00410F58                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00410F58                 dd 71D3400h, 13Dh, 0
.text:00410F78                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00410F78                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00410F78                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00410F78                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00410FC8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00410FC8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00410FC8                 dd 20405h, 0
.text:00410FF8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00411008                 dd 0C0h, 46000000h, 20406h, 0
.text:00411018                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00411028                 dd 0C0h, 46000000h, 110h, 0
.text:00411038                 dd 0C0h, 46000000h, 10Eh, 0
.text:00411048                 dd 0C0h, 46000000h, 123h, 0
.text:00411058                 dd 0C0h, 46000000h, 124h, 0
.text:00411068                 dd 0C0h, 46000000h, 13h, 0
.text:00411078                 dd 0C0h, 46000000h, 14h, 0
.text:00411088                 dd 0C0h, 46000000h, 15h, 0
.text:00411098                 dd 0C0h, 46000000h, 20400h, 0
.text:004110A8                 dd 0C0h, 46000000h, 121h, 0
.text:004110B8                 dd 0C0h, 46000000h, 122h, 0
.text:004110C8                 dd 0C0h, 46000000h, 2E011h, 0
.text:004110D8                 dd 0C0h, 46000000h, 108h, 0
.text:004110E8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:004110E8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004110E8                 dd 103h, 0
.text:00411118                 dd 0C0h, 46000000h, 2E000h, 0
.text:00411128                 dd 0C0h, 46000000h, 106h, 0
.text:00411138                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411138                 dd 107h, 0
.text:00411158                 dd 0C0h, 46000000h, 102h, 0
.text:00411168                 dd 0C0h, 46000000h, 104h, 0
.text:00411178                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00411178                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00411178                 dd 105h, 0
.text:004111A8                 dd 0C0h, 46000000h, 13Bh, 0
.text:004111B8                 dd 0C0h, 46000000h, 139h, 0
.text:004111C8                 dd 0C0h, 46000000h, 0Dh, 0
.text:004111D8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004111D8                 dd 101h, 0
.text:004111F8                 dd 0C0h, 46000000h, 100h, 0
.text:00411208                 dd 0C0h, 46000000h, 20404h, 0
.text:00411218                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411218                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00411248                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00411248                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00411248                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00411248                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00411298                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411298                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00411298                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00411298                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00411298                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411298                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00411318                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00411318                 dd 0Ah, 0
.text:00411338                 dd 0C0h, 46000000h, 2, 0
.text:00411348                 dd 0C0h, 46000000h, 1Dh, 0
.text:00411358                 dd 0C0h, 46000000h, 3, 0
.text:00411368                 dd 0C0h, 46000000h, 16h, 0
.text:00411378                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00411378                 dd 1608D74Fh, 0Fh, 0
.text:00411398                 dd 0C0h, 46000000h, 20h, 0
.text:004113A8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:004113A8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:004113A8                 dd 0
.text:004113D8                 dd 0C0h, 46000000h, 11Eh, 0
.text:004113E8                 dd 0C0h, 46000000h, 128h, 0
.text:004113F8                 dd 0C0h, 46000000h, 129h, 0
.text:00411408                 dd 0C0h, 46000000h, 118h, 0
.text:00411418                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00411418                 dd 70474000h, 11Bh, 0
.text:00411438                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00411438                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411438                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00411438                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00411438                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00411498                 dd 0C0h, 46000000h, 116h, 0
.text:004114A8                 dd 0C0h, 46000000h, 113h, 0
.text:004114B8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:004114B8                 dd 119h, 0
.text:004114D8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:004114D8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:004114D8                 dd 0
.text:00411508                 dd 0C0h, 46000000h, 11Ch, 0
.text:00411518                 dd 0C0h, 46000000h, 11Dh, 0
.text:00411528                 dd 0C0h, 46000000h, 11Fh, 0
.text:00411538                 dd 0C0h, 46000000h, 112h, 0
.text:00411548                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00411548                 dd 18E6000h, 120h, 0
.text:00411568                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00411568                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00411568                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:004115A8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:004115A8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:004115D8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004115D8                 dd 11Ah, 0
.text:004115F8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:004115F8                 dd 10Ch, 0
.text:00411618                 dd 0C0h, 46000000h
.text:00411620 dword_411620    dd 10Bh, 0              ; DATA XREF: sub_40EB80+75↑o
.text:00411628                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00411628                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00411628                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00411628                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00411678                 dd 0C0h, 46000000h, 109h, 0
.text:00411688                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00411688                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00411688                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00411688                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00411688                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00411688                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00411688                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00411688                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00411688                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411688                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00411688                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00411768                 dd 0C0h, 46000000h, 138h, 0
.text:00411778                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00411778                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00411778                 dd 27h, 0
.text:004117A8                 dd 0C0h, 46000000h, 8, 0
.text:004117B8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:004117B8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:004117B8                 dd 20D00h, 0
.text:004117E8                 dd 0C0h, 46000000h, 20D03h, 0
.text:004117F8                 dd 0C0h, 46000000h, 12h, 0
.text:00411808                 dd 0C0h, 46000000h, 4, 0
.text:00411818                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411818                 dd 7, 0
.text:00411838                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411838                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00411868                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411868                 dd 126h, 0
.text:00411888                 dd 0C0h, 46000000h, 10h, 0
.text:00411898                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00411898                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:004118C8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:004118C8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:004118C8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00411908                 dd 0C0h, 46000000h, 0Bh, 0
.text:00411918                 dd 0C0h, 46000000h, 0Ch, 0
.text:00411928                 dd 0C0h, 46000000h, 26h, 0
.text:00411938                 dd 0C0h, 46000000h, 6, 0
.text:00411948                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00411948                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00411948                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00411988                 dd 0C0h, 46000000h, 20403h, 0
.text:00411998                 dd 0C0h, 46000000h, 20401h, 0
.text:004119A8                 dd 0C0h, 46000000h, 20412h, 0
.text:004119B8                 dd 0C0h, 46000000h, 20402h, 0
.text:004119C8                 dd 0C0h, 46000000h, 20411h, 0
.text:004119D8                 dd 0C0h, 46000000h, 2 dup(0)
.text:004119E8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004119E8                 dd 10Dh, 0
.text:00411A08                 dd 0C0h, 46000000h, 127h, 0
.text:00411A18                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00411A18                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00411A18                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00411A58                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00411A58                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00411A58                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00411A98                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00411AA8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00411AB8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00411AC8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00411AD8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00411AE8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00411AF8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00411B08                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00411B18                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00411B28                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00411B38                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00411B48                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00411B58                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00411B68                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00411B78                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00411B88                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00411B98                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00411BA8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00411BB8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00411BC8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00411BD8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00411BE8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00411BF8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00411C08                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00411C18                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00411C28                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00411C38                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00411C48                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00411C58                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00411C68                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00411C78                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00411C88                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00411C98                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00411CA8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00411CB8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00411CC8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00411CC8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00411CF0
.text:00411CF0 ; =============== S U B R O U T I N E =======================================
.text:00411CF0
.text:00411CF0 ; Attributes: thunk
.text:00411CF0
.text:00411CF0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00411CF0 mbrtowc         proc near               ; CODE XREF: sub_407C20+757↑p
.text:00411CF0
.text:00411CF0 DstCh           = dword ptr  4
.text:00411CF0 SrcCh           = dword ptr  8
.text:00411CF0 SizeInBytes     = dword ptr  0Ch
.text:00411CF0 State           = dword ptr  10h
.text:00411CF0
.text:00411CF0                 jmp     ds:__imp_mbrtowc
.text:00411CF0 mbrtowc         endp
.text:00411CF0
.text:00411CF0 ; ---------------------------------------------------------------------------
.text:00411CF6                 align 10h
.text:00411D00
.text:00411D00 ; =============== S U B R O U T I N E =======================================
.text:00411D00
.text:00411D00 ; Attributes: bp-based frame
.text:00411D00
.text:00411D00 sub_411D00      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00411D00                 push    ebp
.text:00411D01                 mov     ecx, offset unk_414000
.text:00411D06                 cmp     ecx, offset unk_414000
.text:00411D0C                 mov     ebp, esp
.text:00411D0E                 jnb     short loc_411D26
.text:00411D10
.text:00411D10 loc_411D10:                             ; CODE XREF: sub_411D00+24↓j
.text:00411D10                 mov     edx, [ecx+4]
.text:00411D13                 mov     eax, [ecx]
.text:00411D15                 add     ecx, 8
.text:00411D18                 add     [edx+400000h], eax
.text:00411D1E                 cmp     ecx, offset unk_414000
.text:00411D24                 jb      short loc_411D10
.text:00411D26
.text:00411D26 loc_411D26:                             ; CODE XREF: sub_411D00+E↑j
.text:00411D26                 pop     ebp
.text:00411D27                 retn
.text:00411D27 sub_411D00      endp
.text:00411D27
.text:00411D27 ; ---------------------------------------------------------------------------
.text:00411D28                 align 10h
.text:00411D30
.text:00411D30 ; =============== S U B R O U T I N E =======================================
.text:00411D30
.text:00411D30 ; Attributes: bp-based frame
.text:00411D30
.text:00411D30 sub_411D30      proc near               ; CODE XREF: sub_401080+16↑p
.text:00411D30                                         ; TopLevelExceptionFilter+D7↑p
.text:00411D30                 push    ebp
.text:00411D31                 mov     ebp, esp
.text:00411D33                 fninit
.text:00411D35                 pop     ebp
.text:00411D36                 retn
.text:00411D36 sub_411D30      endp
.text:00411D36
.text:00411D36 ; ---------------------------------------------------------------------------
.text:00411D37                 align 10h
.text:00411D40
.text:00411D40 ; =============== S U B R O U T I N E =======================================
.text:00411D40
.text:00411D40 ; Attributes: bp-based frame
.text:00411D40
.text:00411D40 ; void __cdecl sub_411D40()
.text:00411D40 sub_411D40      proc near               ; DATA XREF: .text:loc_411D89↓o
.text:00411D40                                         ; sub_411DD0:loc_411DFE↓o
.text:00411D40                 push    ebp
.text:00411D41                 mov     ebp, esp
.text:00411D43                 sub     esp, 8
.text:00411D46                 mov     eax, off_4130D4
.text:00411D4B                 mov     edx, [eax]
.text:00411D4D                 test    edx, edx
.text:00411D4F                 jnz     short loc_411D55
.text:00411D51
.text:00411D51 loc_411D51:                             ; CODE XREF: sub_411D40+2C↓j
.text:00411D51                 mov     esp, ebp
.text:00411D53                 pop     ebp
.text:00411D54                 retn
.text:00411D55 ; ---------------------------------------------------------------------------
.text:00411D55
.text:00411D55 loc_411D55:                             ; CODE XREF: sub_411D40+F↑j
.text:00411D55                                         ; sub_411D40+2A↓j
.text:00411D55                 call    dword ptr [eax]
.text:00411D57                 mov     edx, off_4130D4
.text:00411D5D                 mov     ecx, [edx+4]
.text:00411D60                 lea     eax, [edx+4]
.text:00411D63                 mov     off_4130D4, eax
.text:00411D68                 test    ecx, ecx
.text:00411D6A                 jnz     short loc_411D55
.text:00411D6C                 jmp     short loc_411D51
.text:00411D6C sub_411D40      endp
.text:00411D6C
.text:00411D6C ; ---------------------------------------------------------------------------
.text:00411D6E                 align 10h
.text:00411D70                 push    ebp
.text:00411D71                 mov     ebp, esp
.text:00411D73                 sub     esp, 8
.text:00411D76                 mov     [ebp-4], ebx
.text:00411D79                 mov     eax, ds:dword_412B50
.text:00411D7E                 cmp     eax, 0FFFFFFFFh
.text:00411D81                 jz      short loc_411DAC
.text:00411D83
.text:00411D83 loc_411D83:                             ; CODE XREF: .text:00411DB6↓j
.text:00411D83                                         ; .text:00411DC9↓j
.text:00411D83                 test    eax, eax
.text:00411D85                 mov     ebx, eax
.text:00411D87                 jnz     short loc_411DA0
.text:00411D89
.text:00411D89 loc_411D89:                             ; CODE XREF: .text:00411DAA↓j
.text:00411D89                 mov     dword ptr [esp], offset sub_411D40
.text:00411D90                 call    sub_401040
.text:00411D95                 mov     ebx, [ebp-4]
.text:00411D98                 mov     esp, ebp
.text:00411D9A                 pop     ebp
.text:00411D9B                 retn
.text:00411D9B ; ---------------------------------------------------------------------------
.text:00411D9C                 align 10h
.text:00411DA0
.text:00411DA0 loc_411DA0:                             ; CODE XREF: .text:00411D87↑j
.text:00411DA0                                         ; .text:00411DA8↓j
.text:00411DA0                 call    ds:dword_412B50[ebx*4]
.text:00411DA7                 dec     ebx
.text:00411DA8                 jnz     short loc_411DA0
.text:00411DAA                 jmp     short loc_411D89
.text:00411DAC ; ---------------------------------------------------------------------------
.text:00411DAC
.text:00411DAC loc_411DAC:                             ; CODE XREF: .text:00411D81↑j
.text:00411DAC                 mov     ecx, ds:dword_412B54
.text:00411DB2                 xor     eax, eax
.text:00411DB4                 test    ecx, ecx
.text:00411DB6                 jz      short loc_411D83
.text:00411DB8                 mov     edx, offset dword_412B50
.text:00411DBD                 lea     esi, [esi+0]
.text:00411DC0
.text:00411DC0 loc_411DC0:                             ; CODE XREF: .text:00411DC7↓j
.text:00411DC0                 inc     eax
.text:00411DC1                 mov     ecx, [edx+eax*4+4]
.text:00411DC5                 test    ecx, ecx
.text:00411DC7                 jnz     short loc_411DC0
.text:00411DC9                 jmp     short loc_411D83
.text:00411DC9 ; ---------------------------------------------------------------------------
.text:00411DCB                 align 10h
.text:00411DD0
.text:00411DD0 ; =============== S U B R O U T I N E =======================================
.text:00411DD0
.text:00411DD0 ; Attributes: bp-based frame
.text:00411DD0
.text:00411DD0 sub_411DD0      proc near               ; CODE XREF: sub_401920+13↑p
.text:00411DD0
.text:00411DD0 var_8           = dword ptr -8
.text:00411DD0 var_4           = dword ptr -4
.text:00411DD0
.text:00411DD0                 push    ebp
.text:00411DD1                 mov     ebp, esp
.text:00411DD3                 sub     esp, 8
.text:00411DD6                 mov     [ebp+var_4], ebx
.text:00411DD9                 mov     edx, dword_4130D0
.text:00411DDF                 test    edx, edx
.text:00411DE1                 jnz     short loc_411E0A
.text:00411DE3                 mov     eax, ds:dword_412B50
.text:00411DE8                 mov     edx, 1
.text:00411DED                 mov     dword_4130D0, edx
.text:00411DF3                 cmp     eax, 0FFFFFFFFh
.text:00411DF6                 jz      short loc_411E1D
.text:00411DF8
.text:00411DF8 loc_411DF8:                             ; CODE XREF: sub_411DD0+57↓j
.text:00411DF8                                         ; sub_411DD0+69↓j
.text:00411DF8                 test    eax, eax
.text:00411DFA                 mov     ebx, eax
.text:00411DFC                 jnz     short loc_411E11
.text:00411DFE
.text:00411DFE loc_411DFE:                             ; CODE XREF: sub_411DD0+4B↓j
.text:00411DFE                 mov     [esp+8+var_8], offset sub_411D40 ; void (__cdecl *)()
.text:00411E05                 call    sub_401040
.text:00411E0A
.text:00411E0A loc_411E0A:                             ; CODE XREF: sub_411DD0+11↑j
.text:00411E0A                 mov     ebx, [ebp+var_4]
.text:00411E0D                 mov     esp, ebp
.text:00411E0F                 pop     ebp
.text:00411E10                 retn
.text:00411E11 ; ---------------------------------------------------------------------------
.text:00411E11
.text:00411E11 loc_411E11:                             ; CODE XREF: sub_411DD0+2C↑j
.text:00411E11                                         ; sub_411DD0+49↓j
.text:00411E11                 call    ds:dword_412B50[ebx*4]
.text:00411E18                 dec     ebx
.text:00411E19                 jnz     short loc_411E11
.text:00411E1B                 jmp     short loc_411DFE
.text:00411E1D ; ---------------------------------------------------------------------------
.text:00411E1D
.text:00411E1D loc_411E1D:                             ; CODE XREF: sub_411DD0+26↑j
.text:00411E1D                 mov     ecx, ds:dword_412B54
.text:00411E23                 xor     eax, eax
.text:00411E25                 test    ecx, ecx
.text:00411E27                 jz      short loc_411DF8
.text:00411E29                 mov     edx, offset dword_412B50
.text:00411E2E                 mov     esi, esi
.text:00411E30
.text:00411E30 loc_411E30:                             ; CODE XREF: sub_411DD0+67↓j
.text:00411E30                 inc     eax
.text:00411E31                 mov     ebx, [edx+eax*4+4]
.text:00411E35                 test    ebx, ebx
.text:00411E37                 jnz     short loc_411E30
.text:00411E39                 jmp     short loc_411DF8
.text:00411E39 sub_411DD0      endp
.text:00411E39
.text:00411E39 ; ---------------------------------------------------------------------------
.text:00411E3B                 align 10h
.text:00411E40
.text:00411E40 ; =============== S U B R O U T I N E =======================================
.text:00411E40
.text:00411E40 ; Attributes: info_from_lumina
.text:00411E40
.text:00411E40 ; void *__cdecl _alloca(size_t Size)
.text:00411E40 __alloca        proc near               ; CODE XREF: sub_401920+E↑p
.text:00411E40                 push    ecx
.text:00411E41                 mov     ecx, esp
.text:00411E43                 add     ecx, 8
.text:00411E46
.text:00411E46 loc_411E46:                             ; CODE XREF: __alloca+1B↓j
.text:00411E46                 cmp     eax, 1000h
.text:00411E4B                 jb      short loc_411E5D
.text:00411E4D                 sub     ecx, 1000h
.text:00411E53                 or      dword ptr [ecx], 0
.text:00411E56                 sub     eax, 1000h
.text:00411E5B                 jmp     short loc_411E46
.text:00411E5D ; ---------------------------------------------------------------------------
.text:00411E5D
.text:00411E5D loc_411E5D:                             ; CODE XREF: __alloca+B↑j
.text:00411E5D                 sub     ecx, eax
.text:00411E5F                 or      dword ptr [ecx], 0
.text:00411E62                 mov     eax, esp
.text:00411E64                 mov     esp, ecx
.text:00411E66                 mov     ecx, [eax]
.text:00411E68                 mov     eax, [eax+4]
.text:00411E6B                 jmp     eax
.text:00411E6B __alloca        endp
.text:00411E6B
.text:00411E6B ; ---------------------------------------------------------------------------
.text:00411E6D                 align 10h
.text:00411E70
.text:00411E70 ; =============== S U B R O U T I N E =======================================
.text:00411E70
.text:00411E70 ; Attributes: bp-based frame
.text:00411E70
.text:00411E70 sub_411E70      proc near               ; CODE XREF: sub_404230+24↑p
.text:00411E70                                         ; sub_409870+1A5↑p ...
.text:00411E70
.text:00411E70 var_34          = dword ptr -34h
.text:00411E70 var_2C          = dword ptr -2Ch
.text:00411E70 var_28          = dword ptr -28h
.text:00411E70 var_24          = dword ptr -24h
.text:00411E70 var_20          = dword ptr -20h
.text:00411E70 var_1C          = dword ptr -1Ch
.text:00411E70 var_18          = dword ptr -18h
.text:00411E70 var_14          = dword ptr -14h
.text:00411E70 arg_0           = dword ptr  8
.text:00411E70 arg_4           = dword ptr  0Ch
.text:00411E70 arg_8           = dword ptr  10h
.text:00411E70 arg_C           = dword ptr  14h
.text:00411E70
.text:00411E70                 push    ebp
.text:00411E71                 mov     ebp, esp
.text:00411E73                 push    edi
.text:00411E74                 push    esi
.text:00411E75                 push    ebx
.text:00411E76                 sub     esp, 2Ch
.text:00411E79                 mov     edx, [ebp+arg_C]
.text:00411E7C                 mov     [ebp+var_20], 0
.text:00411E83                 mov     ecx, [ebp+arg_0]
.text:00411E86                 mov     ebx, [ebp+arg_4]
.text:00411E89                 mov     [ebp+var_1C], 0
.text:00411E90                 mov     eax, [ebp+arg_8]
.text:00411E93                 test    edx, edx
.text:00411E95                 mov     [ebp+var_24], edx
.text:00411E98                 mov     edi, ebx
.text:00411E9A                 mov     esi, eax
.text:00411E9C                 mov     [ebp+var_28], ecx
.text:00411E9F                 jnz     short loc_411F00
.text:00411EA1                 cmp     eax, ebx
.text:00411EA3                 jbe     short loc_411EE0
.text:00411EA5                 mov     eax, ecx
.text:00411EA7                 mov     edx, ebx
.text:00411EA9                 div     esi
.text:00411EAB
.text:00411EAB loc_411EAB:                             ; CODE XREF: sub_411E70+8B↓j
.text:00411EAB                 mov     [ebp+var_28], edx
.text:00411EAE                 lea     ecx, [ebp+var_18]
.text:00411EB1                 test    ecx, ecx
.text:00411EB3                 jz      short loc_411ECE
.text:00411EB5                 mov     [ebp+var_1C], 0
.text:00411EBC
.text:00411EBC loc_411EBC:                             ; CODE XREF: sub_411E70+DA↓j
.text:00411EBC                 mov     eax, [ebp+var_28]
.text:00411EBF                 mov     [ebp+var_20], eax
.text:00411EC2                 mov     edx, [ebp+var_20]
.text:00411EC5                 mov     ecx, [ebp+var_1C]
.text:00411EC8                 mov     [ebp+var_18], edx
.text:00411ECB                 mov     [ebp+var_14], ecx
.text:00411ECE
.text:00411ECE loc_411ECE:                             ; CODE XREF: sub_411E70+43↑j
.text:00411ECE                                         ; sub_411E70+A7↓j ...
.text:00411ECE                 mov     eax, [ebp+var_18]
.text:00411ED1                 mov     edx, [ebp+var_14]
.text:00411ED4                 add     esp, 2Ch
.text:00411ED7                 pop     ebx
.text:00411ED8                 pop     esi
.text:00411ED9                 pop     edi
.text:00411EDA                 pop     ebp
.text:00411EDB                 retn
.text:00411EDB ; ---------------------------------------------------------------------------
.text:00411EDC                 align 10h
.text:00411EE0
.text:00411EE0 loc_411EE0:                             ; CODE XREF: sub_411E70+33↑j
.text:00411EE0                 test    eax, eax
.text:00411EE2                 jnz     short loc_411EEF
.text:00411EE4                 mov     eax, 1
.text:00411EE9                 xor     edx, edx
.text:00411EEB                 div     esi
.text:00411EED                 mov     esi, eax
.text:00411EEF
.text:00411EEF loc_411EEF:                             ; CODE XREF: sub_411E70+72↑j
.text:00411EEF                 mov     eax, edi
.text:00411EF1                 mov     edx, [ebp+var_24]
.text:00411EF4                 div     esi
.text:00411EF6                 mov     eax, [ebp+var_28]
.text:00411EF9                 div     esi
.text:00411EFB                 jmp     short loc_411EAB
.text:00411EFB ; ---------------------------------------------------------------------------
.text:00411EFD                 align 10h
.text:00411F00
.text:00411F00 loc_411F00:                             ; CODE XREF: sub_411E70+2F↑j
.text:00411F00                 cmp     [ebp+var_24], ebx
.text:00411F03                 jbe     short loc_411F20
.text:00411F05                 mov     [ebp+var_20], ecx
.text:00411F08
.text:00411F08 loc_411F08:                             ; CODE XREF: sub_411E70+15B↓j
.text:00411F08                 mov     [ebp+var_1C], edi
.text:00411F0B                 mov     eax, [ebp+var_20]
.text:00411F0E                 mov     edx, [ebp+var_1C]
.text:00411F11                 mov     [ebp+var_18], eax
.text:00411F14                 mov     [ebp+var_14], edx
.text:00411F17                 jmp     short loc_411ECE
.text:00411F17 ; ---------------------------------------------------------------------------
.text:00411F19                 align 10h
.text:00411F20
.text:00411F20 loc_411F20:                             ; CODE XREF: sub_411E70+93↑j
.text:00411F20                 bsr     eax, [ebp+var_24]
.text:00411F24                 mov     ebx, eax
.text:00411F26                 xor     ebx, 1Fh
.text:00411F29                 jnz     short loc_411F50
.text:00411F2B                 cmp     edi, [ebp+var_24]
.text:00411F2E                 ja      short loc_411F35
.text:00411F30                 cmp     [ebp+var_28], esi
.text:00411F33                 jb      short loc_411F40
.text:00411F35
.text:00411F35 loc_411F35:                             ; CODE XREF: sub_411E70+BE↑j
.text:00411F35                 mov     edx, [ebp+var_28]
.text:00411F38                 sub     edx, esi
.text:00411F3A                 sbb     edi, [ebp+var_24]
.text:00411F3D                 mov     [ebp+var_28], edx
.text:00411F40
.text:00411F40 loc_411F40:                             ; CODE XREF: sub_411E70+C3↑j
.text:00411F40                 lea     ecx, [ebp+var_18]
.text:00411F43                 test    ecx, ecx
.text:00411F45                 jz      short loc_411ECE
.text:00411F47                 mov     [ebp+var_1C], edi
.text:00411F4A                 jmp     loc_411EBC
.text:00411F4A ; ---------------------------------------------------------------------------
.text:00411F4F                 align 10h
.text:00411F50
.text:00411F50 loc_411F50:                             ; CODE XREF: sub_411E70+B9↑j
.text:00411F50                 mov     edx, [ebp+var_24]
.text:00411F53                 mov     eax, 20h ; ' '
.text:00411F58                 mov     cl, bl
.text:00411F5A                 sub     eax, ebx
.text:00411F5C                 mov     [ebp+var_2C], eax
.text:00411F5F                 shl     edx, cl
.text:00411F61                 mov     eax, esi
.text:00411F63                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411F67                 shr     eax, cl
.text:00411F69                 mov     cl, bl
.text:00411F6B                 shl     esi, cl
.text:00411F6D                 or      edx, eax
.text:00411F6F                 mov     eax, [ebp+var_28]
.text:00411F72                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411F76                 mov     [ebp+var_24], edx
.text:00411F79                 mov     edx, edi
.text:00411F7B                 shr     edx, cl
.text:00411F7D                 mov     cl, bl
.text:00411F7F                 shl     edi, cl
.text:00411F81                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411F85                 shr     eax, cl
.text:00411F87                 or      edi, eax
.text:00411F89                 mov     eax, edi
.text:00411F8B                 mov     cl, bl
.text:00411F8D                 div     [ebp+var_24]
.text:00411F90                 shl     [ebp+var_28], cl
.text:00411F93                 mov     edi, edx
.text:00411F95                 mul     esi
.text:00411F97                 mov     [ebp+var_34], eax
.text:00411F9A                 cmp     edx, edi
.text:00411F9C                 ja      short loc_411FD8
.text:00411F9E                 cmp     edx, edi
.text:00411FA0                 jz      short loc_411FD0
.text:00411FA2
.text:00411FA2 loc_411FA2:                             ; CODE XREF: sub_411E70+166↓j
.text:00411FA2                                         ; sub_411E70+173↓j
.text:00411FA2                 lea     eax, [ebp+var_18]
.text:00411FA5                 test    eax, eax
.text:00411FA7                 jz      loc_411ECE
.text:00411FAD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411FB1                 mov     eax, [ebp+var_28]
.text:00411FB4                 sub     eax, [ebp+var_34]
.text:00411FB7                 sbb     edi, edx
.text:00411FB9                 mov     [ebp+var_28], eax
.text:00411FBC                 mov     edx, edi
.text:00411FBE                 shl     edx, cl
.text:00411FC0                 mov     cl, bl
.text:00411FC2                 shr     eax, cl
.text:00411FC4                 or      edx, eax
.text:00411FC6                 mov     [ebp+var_20], edx
.text:00411FC9                 shr     edi, cl
.text:00411FCB                 jmp     loc_411F08
.text:00411FD0 ; ---------------------------------------------------------------------------
.text:00411FD0
.text:00411FD0 loc_411FD0:                             ; CODE XREF: sub_411E70+130↑j
.text:00411FD0                 mov     eax, [ebp+var_28]
.text:00411FD3                 cmp     [ebp+var_34], eax
.text:00411FD6                 jbe     short loc_411FA2
.text:00411FD8
.text:00411FD8 loc_411FD8:                             ; CODE XREF: sub_411E70+12C↑j
.text:00411FD8                 mov     ecx, [ebp+var_34]
.text:00411FDB                 sub     ecx, esi
.text:00411FDD                 sbb     edx, [ebp+var_24]
.text:00411FE0                 mov     [ebp+var_34], ecx
.text:00411FE3                 jmp     short loc_411FA2
.text:00411FE3 sub_411E70      endp
.text:00411FE3
.text:00411FE3 ; ---------------------------------------------------------------------------
.text:00411FE5                 align 10h
.text:00411FF0
.text:00411FF0 ; =============== S U B R O U T I N E =======================================
.text:00411FF0
.text:00411FF0 ; Attributes: bp-based frame
.text:00411FF0
.text:00411FF0 sub_411FF0      proc near               ; CODE XREF: sub_409870+17E↑p
.text:00411FF0                                         ; sub_409870+1F5↑p ...
.text:00411FF0
.text:00411FF0 var_24          = dword ptr -24h
.text:00411FF0 var_20          = dword ptr -20h
.text:00411FF0 var_1C          = dword ptr -1Ch
.text:00411FF0 var_18          = dword ptr -18h
.text:00411FF0 var_14          = dword ptr -14h
.text:00411FF0 var_C           = dword ptr -0Ch
.text:00411FF0 var_8           = dword ptr -8
.text:00411FF0 var_4           = dword ptr -4
.text:00411FF0 arg_0           = dword ptr  8
.text:00411FF0 arg_4           = dword ptr  0Ch
.text:00411FF0 arg_8           = dword ptr  10h
.text:00411FF0 arg_C           = dword ptr  14h
.text:00411FF0
.text:00411FF0                 push    ebp
.text:00411FF1                 mov     ebp, esp
.text:00411FF3                 sub     esp, 28h
.text:00411FF6                 mov     [ebp+var_C], ebx
.text:00411FF9                 mov     edx, [ebp+arg_C]
.text:00411FFC                 mov     ecx, [ebp+arg_0]
.text:00411FFF                 mov     [ebp+var_8], esi
.text:00412002                 mov     eax, [ebp+arg_8]
.text:00412005                 test    edx, edx
.text:00412007                 mov     [ebp+var_4], edi
.text:0041200A                 mov     ebx, [ebp+arg_4]
.text:0041200D                 mov     esi, eax
.text:0041200F                 mov     [ebp+var_18], 0
.text:00412016                 mov     [ebp+var_14], 0
.text:0041201D                 mov     [ebp+var_1C], ecx
.text:00412020                 jnz     short loc_412072
.text:00412022                 cmp     eax, ebx
.text:00412024                 jbe     short loc_412050
.text:00412026                 mov     eax, ecx
.text:00412028                 mov     edx, ebx
.text:0041202A                 div     esi
.text:0041202C                 mov     edi, eax
.text:0041202E                 mov     esi, esi
.text:00412030
.text:00412030 loc_412030:                             ; CODE XREF: sub_411FF0+88↓j
.text:00412030                                         ; sub_411FF0+A4↓j ...
.text:00412030                 xor     ecx, ecx
.text:00412032
.text:00412032 loc_412032:                             ; CODE XREF: sub_411FF0+80↓j
.text:00412032                 mov     [ebp+var_18], edi
.text:00412035                 mov     ebx, [ebp+var_C]
.text:00412038                 mov     eax, [ebp+var_18]
.text:0041203B                 mov     [ebp+var_14], ecx
.text:0041203E                 mov     esi, [ebp+var_8]
.text:00412041                 mov     edx, [ebp+var_14]
.text:00412044                 mov     edi, [ebp+var_4]
.text:00412047                 mov     esp, ebp
.text:00412049                 pop     ebp
.text:0041204A                 retn
.text:0041204A ; ---------------------------------------------------------------------------
.text:0041204B                 align 10h
.text:00412050
.text:00412050 loc_412050:                             ; CODE XREF: sub_411FF0+34↑j
.text:00412050                 test    eax, eax
.text:00412052                 jnz     short loc_412061
.text:00412054                 mov     eax, 1
.text:00412059                 xor     ecx, ecx
.text:0041205B                 xor     edx, edx
.text:0041205D                 div     ecx
.text:0041205F                 mov     esi, eax
.text:00412061
.text:00412061 loc_412061:                             ; CODE XREF: sub_411FF0+62↑j
.text:00412061                 mov     eax, ebx
.text:00412063                 xor     edx, edx
.text:00412065                 div     esi
.text:00412067                 mov     ecx, eax
.text:00412069                 mov     eax, [ebp+var_1C]
.text:0041206C                 div     esi
.text:0041206E                 mov     edi, eax
.text:00412070                 jmp     short loc_412032
.text:00412072 ; ---------------------------------------------------------------------------
.text:00412072
.text:00412072 loc_412072:                             ; CODE XREF: sub_411FF0+30↑j
.text:00412072                 cmp     edx, ebx
.text:00412074                 jbe     short loc_412080
.text:00412076                 xor     edi, edi
.text:00412078                 jmp     short loc_412030
.text:00412078 ; ---------------------------------------------------------------------------
.text:0041207A                 align 10h
.text:00412080
.text:00412080 loc_412080:                             ; CODE XREF: sub_411FF0+84↑j
.text:00412080                 bsr     eax, edx
.text:00412083                 xor     eax, 1Fh
.text:00412086                 mov     [ebp+var_20], eax
.text:00412089                 jnz     short loc_4120A0
.text:0041208B                 cmp     ebx, edx
.text:0041208D                 ja      short loc_412096
.text:0041208F                 xor     edi, edi
.text:00412091                 cmp     [ebp+var_1C], esi
.text:00412094                 jb      short loc_412030
.text:00412096
.text:00412096 loc_412096:                             ; CODE XREF: sub_411FF0+9D↑j
.text:00412096                 mov     edi, 1
.text:0041209B                 jmp     short loc_412030
.text:0041209B ; ---------------------------------------------------------------------------
.text:0041209D                 align 10h
.text:004120A0
.text:004120A0 loc_4120A0:                             ; CODE XREF: sub_411FF0+99↑j
.text:004120A0                 mov     eax, [ebp+var_20]
.text:004120A3                 mov     ecx, 20h ; ' '
.text:004120A8                 sub     ecx, eax
.text:004120AA                 mov     [ebp+var_24], ecx
.text:004120AD                 mov     eax, esi
.text:004120AF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004120B3                 shl     edx, cl
.text:004120B5                 mov     edi, edx
.text:004120B7                 movzx   ecx, byte ptr [ebp+var_24]
.text:004120BB                 mov     edx, ebx
.text:004120BD                 shr     eax, cl
.text:004120BF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004120C3                 or      edi, eax
.text:004120C5                 mov     eax, [ebp+var_1C]
.text:004120C8                 shl     esi, cl
.text:004120CA                 movzx   ecx, byte ptr [ebp+var_24]
.text:004120CE                 shr     edx, cl
.text:004120D0                 movzx   ecx, byte ptr [ebp+var_20]
.text:004120D4                 shl     ebx, cl
.text:004120D6                 movzx   ecx, byte ptr [ebp+var_24]
.text:004120DA                 shr     eax, cl
.text:004120DC                 or      ebx, eax
.text:004120DE                 movzx   ecx, byte ptr [ebp+var_20]
.text:004120E2                 mov     eax, ebx
.text:004120E4                 div     edi
.text:004120E6                 mov     ebx, edx
.text:004120E8                 mov     edi, eax
.text:004120EA                 shl     [ebp+var_1C], cl
.text:004120ED                 mul     esi
.text:004120EF                 cmp     edx, ebx
.text:004120F1                 ja      short loc_412104
.text:004120F3                 cmp     edx, ebx
.text:004120F5                 jnz     loc_412030
.text:004120FB                 cmp     eax, [ebp+var_1C]
.text:004120FE                 jbe     loc_412030
.text:00412104
.text:00412104 loc_412104:                             ; CODE XREF: sub_411FF0+101↑j
.text:00412104                 dec     edi
.text:00412105                 jmp     loc_412030
.text:00412105 sub_411FF0      endp
.text:00412105
.text:00412105 ; ---------------------------------------------------------------------------
.text:0041210A                 align 10h
.text:00412110
.text:00412110 ; =============== S U B R O U T I N E =======================================
.text:00412110
.text:00412110 ; Attributes: thunk
.text:00412110
.text:00412110 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00412110 _chmod          proc near               ; CODE XREF: sub_402390+38A↑p
.text:00412110                                         ; sub_4105D0+41↑j
.text:00412110
.text:00412110 FileName        = dword ptr  4
.text:00412110 AccessMode      = dword ptr  8
.text:00412110
.text:00412110                 jmp     ds:__imp__chmod
.text:00412110 _chmod          endp
.text:00412110
.text:00412110 ; ---------------------------------------------------------------------------
.text:00412116                 align 10h
.text:00412120
.text:00412120 ; =============== S U B R O U T I N E =======================================
.text:00412120
.text:00412120 ; Attributes: thunk
.text:00412120
.text:00412120 ; int __cdecl close(int FileHandle)
.text:00412120 _close          proc near               ; CODE XREF: sub_402CD0+C9↑p
.text:00412120                                         ; sub_402DD0+348↑p ...
.text:00412120
.text:00412120 FileHandle      = dword ptr  4
.text:00412120
.text:00412120                 jmp     ds:__imp__close
.text:00412120 _close          endp
.text:00412120
.text:00412120 ; ---------------------------------------------------------------------------
.text:00412126                 align 10h
.text:00412130
.text:00412130 ; =============== S U B R O U T I N E =======================================
.text:00412130
.text:00412130 ; Attributes: thunk
.text:00412130
.text:00412130 ; int open(const char *FileName, int OpenFlag, ...)
.text:00412130 _open           proc near               ; CODE XREF: sub_4029C0+187↑p
.text:00412130                                         ; sub_4029C0+1AC↑p ...
.text:00412130
.text:00412130 FileName        = dword ptr  4
.text:00412130 OpenFlag        = dword ptr  8
.text:00412130
.text:00412130                 jmp     ds:__imp__open
.text:00412130 _open           endp
.text:00412130
.text:00412130 ; ---------------------------------------------------------------------------
.text:00412136                 align 10h
.text:00412140
.text:00412140 ; =============== S U B R O U T I N E =======================================
.text:00412140
.text:00412140 ; Attributes: thunk
.text:00412140
.text:00412140 ; int __cdecl umask(int Mode)
.text:00412140 _umask          proc near               ; CODE XREF: sub_404360+9E↑p
.text:00412140                                         ; sub_404360+AD↑p
.text:00412140
.text:00412140 Mode            = dword ptr  4
.text:00412140
.text:00412140                 jmp     ds:__imp__umask
.text:00412140 _umask          endp
.text:00412140
.text:00412140 ; ---------------------------------------------------------------------------
.text:00412146                 align 10h
.text:00412150
.text:00412150 ; =============== S U B R O U T I N E =======================================
.text:00412150
.text:00412150 ; Attributes: thunk
.text:00412150
.text:00412150 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00412150 _stricmp        proc near               ; CODE XREF: sub_409D40+46F↑p
.text:00412150                                         ; sub_40BF30+2E↑p ...
.text:00412150
.text:00412150 String1         = dword ptr  4
.text:00412150 String2         = dword ptr  8
.text:00412150
.text:00412150                 jmp     ds:__imp__stricmp
.text:00412150 _stricmp        endp
.text:00412150
.text:00412150 ; ---------------------------------------------------------------------------
.text:00412156                 align 10h
.text:00412160
.text:00412160 ; =============== S U B R O U T I N E =======================================
.text:00412160
.text:00412160 ; Attributes: thunk
.text:00412160
.text:00412160 ; char *__cdecl strdup(const char *String)
.text:00412160 _strdup         proc near               ; CODE XREF: sub_40BB60+101↑p
.text:00412160                                         ; .text:0040BDCA↑p ...
.text:00412160
.text:00412160 String          = dword ptr  4
.text:00412160
.text:00412160                 jmp     ds:__imp__strdup
.text:00412160 _strdup         endp
.text:00412160
.text:00412160 ; ---------------------------------------------------------------------------
.text:00412166                 align 10h
.text:00412170
.text:00412170 ; =============== S U B R O U T I N E =======================================
.text:00412170
.text:00412170 ; Attributes: thunk
.text:00412170
.text:00412170 ; int __cdecl getpid()
.text:00412170 _getpid         proc near               ; CODE XREF: sub_4101A0+84↑p
.text:00412170                 jmp     ds:__imp__getpid
.text:00412170 _getpid         endp
.text:00412170
.text:00412170 ; ---------------------------------------------------------------------------
.text:00412176                 align 10h
.text:00412180                 jmp     ds:__set_app_type
.text:00412180 ; ---------------------------------------------------------------------------
.text:00412186                 align 10h
.text:00412190
.text:00412190 ; =============== S U B R O U T I N E =======================================
.text:00412190
.text:00412190 ; Attributes: thunk
.text:00412190
.text:00412190 ; void __cdecl cexit()
.text:00412190 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00412190                 jmp     ds:__imp__cexit
.text:00412190 _cexit          endp
.text:00412190
.text:00412190 ; ---------------------------------------------------------------------------
.text:00412196                 align 10h
.text:004121A0
.text:004121A0 ; =============== S U B R O U T I N E =======================================
.text:004121A0
.text:004121A0 ; Attributes: thunk
.text:004121A0
.text:004121A0 ; char ***__cdecl _p__environ()
.text:004121A0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004121A0                 jmp     ds:__imp___p__environ
.text:004121A0 __p__environ    endp
.text:004121A0
.text:004121A0 ; ---------------------------------------------------------------------------
.text:004121A6                 align 10h
.text:004121B0
.text:004121B0 ; =============== S U B R O U T I N E =======================================
.text:004121B0
.text:004121B0 ; Attributes: thunk
.text:004121B0
.text:004121B0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004121B0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004121B0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004121B0
.text:004121B0 Signal          = dword ptr  4
.text:004121B0 Function        = dword ptr  8
.text:004121B0
.text:004121B0                 jmp     ds:__imp_signal
.text:004121B0 signal          endp
.text:004121B0
.text:004121B0 ; ---------------------------------------------------------------------------
.text:004121B6                 align 10h
.text:004121C0
.text:004121C0 ; =============== S U B R O U T I N E =======================================
.text:004121C0
.text:004121C0 ; Attributes: thunk
.text:004121C0
.text:004121C0 ; int *__cdecl _p__fmode()
.text:004121C0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004121C0                 jmp     ds:__imp___p__fmode
.text:004121C0 __p__fmode      endp
.text:004121C0
.text:004121C0 ; ---------------------------------------------------------------------------
.text:004121C6                 align 10h
.text:004121D0
.text:004121D0 ; =============== S U B R O U T I N E =======================================
.text:004121D0
.text:004121D0 ; Attributes: thunk
.text:004121D0
.text:004121D0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004121D0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004121D0                                         ; sub_401080+90↑p ...
.text:004121D0
.text:004121D0 FileHandle      = dword ptr  4
.text:004121D0 Mode            = dword ptr  8
.text:004121D0
.text:004121D0                 jmp     ds:__imp__setmode
.text:004121D0 _setmode        endp
.text:004121D0
.text:004121D0 ; ---------------------------------------------------------------------------
.text:004121D6                 align 10h
.text:004121E0
.text:004121E0 ; =============== S U B R O U T I N E =======================================
.text:004121E0
.text:004121E0 ; Attributes: thunk
.text:004121E0
.text:004121E0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004121E0                 jmp     ds:__imp___getmainargs
.text:004121E0 __getmainargs   endp
.text:004121E0
.text:004121E0 ; ---------------------------------------------------------------------------
.text:004121E6                 align 10h
.text:004121F0
.text:004121F0 ; =============== S U B R O U T I N E =======================================
.text:004121F0
.text:004121F0 ; Attributes: thunk
.text:004121F0
.text:004121F0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004121F0 strcpy          proc near               ; CODE XREF: sub_401920+14A↑p
.text:004121F0                                         ; sub_4096F0+73↑p ...
.text:004121F0
.text:004121F0 Destination     = dword ptr  4
.text:004121F0 Source          = dword ptr  8
.text:004121F0
.text:004121F0                 jmp     ds:__imp_strcpy
.text:004121F0 strcpy          endp
.text:004121F0
.text:004121F0 ; ---------------------------------------------------------------------------
.text:004121F6                 align 10h
.text:00412200
.text:00412200 ; =============== S U B R O U T I N E =======================================
.text:00412200
.text:00412200 ; Attributes: thunk
.text:00412200
.text:00412200 ; size_t __cdecl strlen(const char *Str)
.text:00412200 strlen          proc near               ; CODE XREF: sub_401920+120↑p
.text:00412200                                         ; sub_4029C0+22B↑p ...
.text:00412200
.text:00412200 Str             = dword ptr  4
.text:00412200
.text:00412200                 jmp     ds:__imp_strlen
.text:00412200 strlen          endp
.text:00412200
.text:00412200 ; ---------------------------------------------------------------------------
.text:00412206                 align 10h
.text:00412210
.text:00412210 ; =============== S U B R O U T I N E =======================================
.text:00412210
.text:00412210 ; Attributes: thunk
.text:00412210
.text:00412210 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00412210 setlocale       proc near               ; CODE XREF: sub_401920+4B↑p
.text:00412210
.text:00412210 Category        = dword ptr  4
.text:00412210 Locale          = dword ptr  8
.text:00412210
.text:00412210                 jmp     ds:__imp_setlocale
.text:00412210 setlocale       endp
.text:00412210
.text:00412210 ; ---------------------------------------------------------------------------
.text:00412216                 align 10h
.text:00412220
.text:00412220 ; =============== S U B R O U T I N E =======================================
.text:00412220
.text:00412220 ; Attributes: noreturn thunk
.text:00412220
.text:00412220 ; void __cdecl __noreturn exit(int Code)
.text:00412220 exit            proc near               ; CODE XREF: sub_401920:loc_401AC7↑p
.text:00412220                                         ; .text:0040202B↑p ...
.text:00412220
.text:00412220 Code            = dword ptr  4
.text:00412220
.text:00412220                 jmp     ds:__imp_exit
.text:00412220 exit            endp
.text:00412220
.text:00412220 ; ---------------------------------------------------------------------------
.text:00412226                 align 10h
.text:00412230
.text:00412230 ; =============== S U B R O U T I N E =======================================
.text:00412230
.text:00412230 ; Attributes: thunk
.text:00412230
.text:00412230 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00412230 fputs           proc near               ; CODE XREF: sub_401920+241↑p
.text:00412230                                         ; sub_401920+263↑p ...
.text:00412230
.text:00412230 Buffer          = dword ptr  4
.text:00412230 Stream          = dword ptr  8
.text:00412230
.text:00412230                 jmp     ds:__imp_fputs
.text:00412230 fputs           endp
.text:00412230
.text:00412230 ; ---------------------------------------------------------------------------
.text:00412236                 align 10h
.text:00412240
.text:00412240 ; =============== S U B R O U T I N E =======================================
.text:00412240
.text:00412240 ; Attributes: thunk
.text:00412240
.text:00412240 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00412240 fprintf         proc near               ; CODE XREF: sub_401920+19B↑p
.text:00412240                                         ; .text:00402023↑p ...
.text:00412240
.text:00412240 Stream          = dword ptr  4
.text:00412240 Format          = dword ptr  8
.text:00412240
.text:00412240                 jmp     ds:__imp_fprintf
.text:00412240 fprintf         endp
.text:00412240
.text:00412240 ; ---------------------------------------------------------------------------
.text:00412246                 align 10h
.text:00412250
.text:00412250 ; =============== S U B R O U T I N E =======================================
.text:00412250
.text:00412250 ; Attributes: noreturn thunk
.text:00412250
.text:00412250 ; void __cdecl __noreturn abort()
.text:00412250 abort           proc near               ; CODE XREF: sub_402390:loc_402606↑p
.text:00412250                                         ; sub_402DD0:loc_403451↑p ...
.text:00412250                 jmp     ds:__imp_abort
.text:00412250 abort           endp
.text:00412250
.text:00412250 ; ---------------------------------------------------------------------------
.text:00412256                 align 10h
.text:00412260
.text:00412260 ; =============== S U B R O U T I N E =======================================
.text:00412260
.text:00412260 ; Attributes: thunk
.text:00412260
.text:00412260 ; int printf(const char *const Format, ...)
.text:00412260 printf          proc near               ; CODE XREF: sub_401920+21F↑p
.text:00412260                                         ; sub_401920+308↑p ...
.text:00412260
.text:00412260 Format          = dword ptr  4
.text:00412260
.text:00412260                 jmp     ds:__imp_printf
.text:00412260 printf          endp
.text:00412260
.text:00412260 ; ---------------------------------------------------------------------------
.text:00412266                 align 10h
.text:00412270
.text:00412270 ; =============== S U B R O U T I N E =======================================
.text:00412270
.text:00412270 ; Attributes: thunk
.text:00412270
.text:00412270 ; int *__cdecl errno()
.text:00412270 _errno          proc near               ; CODE XREF: sub_401920:loc_401E0A↑p
.text:00412270                                         ; sub_401920+51D↑p ...
.text:00412270                 jmp     ds:__imp__errno
.text:00412270 _errno          endp
.text:00412270
.text:00412270 ; ---------------------------------------------------------------------------
.text:00412276                 align 10h
.text:00412280
.text:00412280 ; =============== S U B R O U T I N E =======================================
.text:00412280
.text:00412280 ; Attributes: thunk
.text:00412280
.text:00412280 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00412280 realloc         proc near               ; CODE XREF: sub_403D60+35↑p
.text:00412280                                         ; sub_403F00+60↑p ...
.text:00412280
.text:00412280 Block           = dword ptr  4
.text:00412280 Size            = dword ptr  8
.text:00412280
.text:00412280                 jmp     ds:__imp_realloc
.text:00412280 realloc         endp
.text:00412280
.text:00412280 ; ---------------------------------------------------------------------------
.text:00412286                 align 10h
.text:00412290
.text:00412290 ; =============== S U B R O U T I N E =======================================
.text:00412290
.text:00412290 ; Attributes: thunk
.text:00412290
.text:00412290 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:00412290 memmove         proc near               ; CODE XREF: sub_402DD0+B2↑p
.text:00412290                                         ; sub_402DD0+1B2↑p ...
.text:00412290
.text:00412290 Src             = dword ptr  8
.text:00412290 Size            = dword ptr  0Ch
.text:00412290
.text:00412290                 jmp     ds:__imp_memmove
.text:00412290 memmove         endp
.text:00412290
.text:00412290 ; ---------------------------------------------------------------------------
.text:00412296                 align 10h
.text:004122A0
.text:004122A0 ; =============== S U B R O U T I N E =======================================
.text:004122A0
.text:004122A0 ; Attributes: thunk
.text:004122A0
.text:004122A0 ; void __cdecl free(void *Block)
.text:004122A0 free            proc near               ; CODE XREF: sub_4029C0+1C2↑p
.text:004122A0                                         ; sub_4029C0+1CD↑p ...
.text:004122A0
.text:004122A0 Block           = dword ptr  4
.text:004122A0
.text:004122A0                 jmp     ds:__imp_free
.text:004122A0 free            endp
.text:004122A0
.text:004122A0 ; ---------------------------------------------------------------------------
.text:004122A6                 align 10h
.text:004122B0
.text:004122B0 ; =============== S U B R O U T I N E =======================================
.text:004122B0
.text:004122B0 ; Attributes: thunk
.text:004122B0
.text:004122B0 ; void *__cdecl malloc(size_t Size)
.text:004122B0 malloc          proc near               ; CODE XREF: sub_4029C0+2A↑p
.text:004122B0                                         ; sub_4029C0+156↑p ...
.text:004122B0
.text:004122B0 Size            = dword ptr  4
.text:004122B0
.text:004122B0                 jmp     ds:__imp_malloc
.text:004122B0 malloc          endp
.text:004122B0
.text:004122B0 ; ---------------------------------------------------------------------------
.text:004122B6                 align 10h
.text:004122C0
.text:004122C0 ; =============== S U B R O U T I N E =======================================
.text:004122C0
.text:004122C0 ; Attributes: thunk
.text:004122C0
.text:004122C0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004122C0 strrchr         proc near               ; CODE XREF: sub_402DD0+1C2↑p
.text:004122C0                                         ; sub_409D40+CB↑p ...
.text:004122C0
.text:004122C0 Str             = dword ptr  4
.text:004122C0
.text:004122C0                 jmp     ds:__imp_strrchr
.text:004122C0 strrchr         endp
.text:004122C0
.text:004122C0 ; ---------------------------------------------------------------------------
.text:004122C6                 align 10h
.text:004122D0
.text:004122D0 ; =============== S U B R O U T I N E =======================================
.text:004122D0
.text:004122D0 ; Attributes: thunk
.text:004122D0
.text:004122D0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004122D0 strncmp         proc near               ; CODE XREF: sub_404BD0+30F↑p
.text:004122D0                                         ; sub_404BD0+769↑p
.text:004122D0
.text:004122D0 Str1            = dword ptr  4
.text:004122D0 Str2            = dword ptr  8
.text:004122D0 MaxCount        = dword ptr  0Ch
.text:004122D0
.text:004122D0                 jmp     ds:__imp_strncmp
.text:004122D0 strncmp         endp
.text:004122D0
.text:004122D0 ; ---------------------------------------------------------------------------
.text:004122D6                 align 10h
.text:004122E0
.text:004122E0 ; =============== S U B R O U T I N E =======================================
.text:004122E0
.text:004122E0 ; Attributes: thunk
.text:004122E0
.text:004122E0 ; char *__cdecl getenv(const char *VarName)
.text:004122E0 getenv          proc near               ; CODE XREF: sub_404BD0+C27↑p
.text:004122E0                                         ; sub_409D40+3EE↑p ...
.text:004122E0
.text:004122E0 VarName         = dword ptr  4
.text:004122E0
.text:004122E0                 jmp     ds:__imp_getenv
.text:004122E0 getenv          endp
.text:004122E0
.text:004122E0 ; ---------------------------------------------------------------------------
.text:004122E6                 align 10h
.text:004122F0
.text:004122F0 ; =============== S U B R O U T I N E =======================================
.text:004122F0
.text:004122F0 ; Attributes: thunk
.text:004122F0
.text:004122F0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004122F0 strchr          proc near               ; CODE XREF: sub_404BD0+539↑p
.text:004122F0                                         ; sub_404BD0+60A↑p ...
.text:004122F0
.text:004122F0 Str             = dword ptr  4
.text:004122F0 Val             = dword ptr  8
.text:004122F0
.text:004122F0                 jmp     ds:__imp_strchr
.text:004122F0 strchr          endp
.text:004122F0
.text:004122F0 ; ---------------------------------------------------------------------------
.text:004122F6                 align 10h
.text:00412300
.text:00412300 ; =============== S U B R O U T I N E =======================================
.text:00412300
.text:00412300 ; Attributes: thunk
.text:00412300
.text:00412300 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00412300 vfprintf        proc near               ; CODE XREF: sub_405DC0+C1↑p
.text:00412300                                         ; sub_408F80+49↑p ...
.text:00412300
.text:00412300 Stream          = dword ptr  4
.text:00412300 Format          = dword ptr  8
.text:00412300 ArgList         = dword ptr  0Ch
.text:00412300
.text:00412300                 jmp     ds:__imp_vfprintf
.text:00412300 vfprintf        endp
.text:00412300
.text:00412300 ; ---------------------------------------------------------------------------
.text:00412306                 align 10h
.text:00412310
.text:00412310 ; =============== S U B R O U T I N E =======================================
.text:00412310
.text:00412310 ; Attributes: thunk
.text:00412310
.text:00412310 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00412310 _flsbuf         proc near               ; CODE XREF: sub_405DC0+128↑p
.text:00412310                                         ; sub_405DC0+13A↑p ...
.text:00412310
.text:00412310 File            = dword ptr  8
.text:00412310
.text:00412310                 jmp     ds:__imp__flsbuf
.text:00412310 _flsbuf         endp
.text:00412310
.text:00412310 ; ---------------------------------------------------------------------------
.text:00412316                 align 10h
.text:00412320
.text:00412320 ; =============== S U B R O U T I N E =======================================
.text:00412320
.text:00412320 ; Attributes: thunk
.text:00412320
.text:00412320 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00412320 memcpy          proc near               ; CODE XREF: .text:004061B8↑p
.text:00412320                                         ; .text:00406201↑p ...
.text:00412320
.text:00412320 Src             = dword ptr  8
.text:00412320 Size            = dword ptr  0Ch
.text:00412320
.text:00412320                 jmp     ds:__imp_memcpy
.text:00412320 memcpy          endp
.text:00412320
.text:00412320 ; ---------------------------------------------------------------------------
.text:00412326                 align 10h
.text:00412330
.text:00412330 ; =============== S U B R O U T I N E =======================================
.text:00412330
.text:00412330 ; Attributes: thunk
.text:00412330
.text:00412330 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00412330 memset          proc near               ; CODE XREF: .text:00406136↑p
.text:00412330
.text:00412330 Val             = dword ptr  8
.text:00412330 Size            = dword ptr  0Ch
.text:00412330
.text:00412330                 jmp     ds:__imp_memset
.text:00412330 memset          endp
.text:00412330
.text:00412330 ; ---------------------------------------------------------------------------
.text:00412336                 align 10h
.text:00412340
.text:00412340 ; =============== S U B R O U T I N E =======================================
.text:00412340
.text:00412340 ; Attributes: thunk
.text:00412340
.text:00412340 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00412340 calloc          proc near               ; CODE XREF: .text:00406173↑p
.text:00412340                                         ; sub_406700+1D0↑p ...
.text:00412340
.text:00412340 Count           = dword ptr  4
.text:00412340 Size            = dword ptr  8
.text:00412340
.text:00412340                 jmp     ds:__imp_calloc
.text:00412340 calloc          endp
.text:00412340
.text:00412340 ; ---------------------------------------------------------------------------
.text:00412346                 align 10h
.text:00412350
.text:00412350 ; =============== S U B R O U T I N E =======================================
.text:00412350
.text:00412350 ; Attributes: thunk
.text:00412350
.text:00412350 ; int __cdecl fclose(FILE *Stream)
.text:00412350 fclose          proc near               ; CODE XREF: sub_406410+27↑p
.text:00412350                                         ; .text:0040EABE↑p
.text:00412350
.text:00412350 Stream          = dword ptr  4
.text:00412350
.text:00412350                 jmp     ds:__imp_fclose
.text:00412350 fclose          endp
.text:00412350
.text:00412350 ; ---------------------------------------------------------------------------
.text:00412356                 align 10h
.text:00412360
.text:00412360 ; =============== S U B R O U T I N E =======================================
.text:00412360
.text:00412360 ; Attributes: noreturn thunk
.text:00412360
.text:00412360 _assert         proc near               ; CODE XREF: sub_4065E0+DD↑p
.text:00412360                                         ; sub_407620+553↑p ...
.text:00412360                 jmp     ds:__imp__assert
.text:00412360 _assert         endp
.text:00412360
.text:00412360 ; ---------------------------------------------------------------------------
.text:00412366                 align 10h
.text:00412370
.text:00412370 ; =============== S U B R O U T I N E =======================================
.text:00412370
.text:00412370 ; Attributes: thunk
.text:00412370
.text:00412370 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:00412370 strtoul         proc near               ; CODE XREF: sub_407620+94↑p
.text:00412370
.text:00412370 String          = dword ptr  4
.text:00412370 EndPtr          = dword ptr  8
.text:00412370 Radix           = dword ptr  0Ch
.text:00412370
.text:00412370                 jmp     ds:__imp_strtoul
.text:00412370 strtoul         endp
.text:00412370
.text:00412370 ; ---------------------------------------------------------------------------
.text:00412376                 align 10h
.text:00412380
.text:00412380 ; =============== S U B R O U T I N E =======================================
.text:00412380
.text:00412380 ; Attributes: thunk
.text:00412380
.text:00412380 ; int __cdecl isctype(int C, int Type)
.text:00412380 _isctype        proc near               ; CODE XREF: sub_407620+5F↑p
.text:00412380                                         ; sub_407C20+610↑p
.text:00412380
.text:00412380 C               = dword ptr  4
.text:00412380 Type            = dword ptr  8
.text:00412380
.text:00412380                 jmp     ds:__imp__isctype
.text:00412380 _isctype        endp
.text:00412380
.text:00412380 ; ---------------------------------------------------------------------------
.text:00412386                 align 10h
.text:00412390
.text:00412390 ; =============== S U B R O U T I N E =======================================
.text:00412390
.text:00412390 ; Attributes: thunk
.text:00412390
.text:00412390 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00412390 iswctype        proc near               ; CODE XREF: sub_407C20+78B↑p
.text:00412390
.text:00412390 C               = word ptr  4
.text:00412390 Type            = word ptr  8
.text:00412390
.text:00412390                 jmp     ds:__imp_iswctype
.text:00412390 iswctype        endp
.text:00412390
.text:00412390 ; ---------------------------------------------------------------------------
.text:00412396                 align 10h
.text:004123A0
.text:004123A0 ; =============== S U B R O U T I N E =======================================
.text:004123A0
.text:004123A0 ; Attributes: thunk
.text:004123A0
.text:004123A0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004123A0 strcmp          proc near               ; CODE XREF: sub_409084+180↑p
.text:004123A0                                         ; .text:0040DEBB↑p
.text:004123A0
.text:004123A0 Str1            = dword ptr  4
.text:004123A0 Str2            = dword ptr  8
.text:004123A0
.text:004123A0                 jmp     ds:__imp_strcmp
.text:004123A0 strcmp          endp
.text:004123A0
.text:004123A0 ; ---------------------------------------------------------------------------
.text:004123A6                 align 10h
.text:004123B0
.text:004123B0 ; =============== S U B R O U T I N E =======================================
.text:004123B0
.text:004123B0 ; Attributes: thunk
.text:004123B0
.text:004123B0 ; int __cdecl fflush(FILE *Stream)
.text:004123B0 fflush          proc near               ; CODE XREF: sub_408F80+19↑p
.text:004123B0                                         ; sub_408F80+81↑p ...
.text:004123B0
.text:004123B0 Stream          = dword ptr  4
.text:004123B0
.text:004123B0                 jmp     ds:__imp_fflush
.text:004123B0 fflush          endp
.text:004123B0
.text:004123B0 ; ---------------------------------------------------------------------------
.text:004123B6                 align 10h
.text:004123C0
.text:004123C0 ; =============== S U B R O U T I N E =======================================
.text:004123C0
.text:004123C0 ; Attributes: thunk
.text:004123C0
.text:004123C0 ; char *__cdecl strerror(int ErrorMessage)
.text:004123C0 strerror        proc near               ; CODE XREF: sub_408F80+A5↑p
.text:004123C0                                         ; sub_409084+10F↑p
.text:004123C0
.text:004123C0 ErrorMessage    = dword ptr  4
.text:004123C0
.text:004123C0                 jmp     ds:__imp_strerror
.text:004123C0 strerror        endp
.text:004123C0
.text:004123C0 ; ---------------------------------------------------------------------------
.text:004123C6                 align 10h
.text:004123D0
.text:004123D0 ; =============== S U B R O U T I N E =======================================
.text:004123D0
.text:004123D0 ; Attributes: thunk
.text:004123D0
.text:004123D0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:004123D0 ctime           proc near               ; CODE XREF: .text:004093ED↑p
.text:004123D0                                         ; .text:0040940F↑p ...
.text:004123D0
.text:004123D0 Time            = dword ptr  4
.text:004123D0
.text:004123D0                 jmp     ds:__imp_ctime
.text:004123D0 ctime           endp
.text:004123D0
.text:004123D0 ; ---------------------------------------------------------------------------
.text:004123D6                 align 10h
.text:004123E0
.text:004123E0 ; =============== S U B R O U T I N E =======================================
.text:004123E0
.text:004123E0 ; Attributes: thunk
.text:004123E0
.text:004123E0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:004123E0 _get_osfhandle  proc near               ; CODE XREF: sub_409490+3A↑p
.text:004123E0                                         ; sub_40F640+15↑p
.text:004123E0
.text:004123E0 FileHandle      = dword ptr  4
.text:004123E0
.text:004123E0                 jmp     ds:__imp__get_osfhandle
.text:004123E0 _get_osfhandle  endp
.text:004123E0
.text:004123E0 ; ---------------------------------------------------------------------------
.text:004123E6                 align 10h
.text:004123F0
.text:004123F0 ; =============== S U B R O U T I N E =======================================
.text:004123F0
.text:004123F0 ; Attributes: thunk
.text:004123F0
.text:004123F0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004123F0 strcat          proc near               ; CODE XREF: sub_4096F0+98↑p
.text:004123F0                                         ; sub_40B970+191↑p ...
.text:004123F0
.text:004123F0 Destination     = dword ptr  4
.text:004123F0 Source          = dword ptr  8
.text:004123F0
.text:004123F0                 jmp     ds:__imp_strcat
.text:004123F0 strcat          endp
.text:004123F0
.text:004123F0 ; ---------------------------------------------------------------------------
.text:004123F6                 align 10h
.text:00412400
.text:00412400 ; =============== S U B R O U T I N E =======================================
.text:00412400
.text:00412400 ; Attributes: thunk
.text:00412400
.text:00412400 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00412400 strstr          proc near               ; CODE XREF: sub_409D40+3BF↑p
.text:00412400                                         ; sub_409D40+3DC↑p ...
.text:00412400
.text:00412400 Str             = dword ptr  4
.text:00412400 SubStr          = dword ptr  8
.text:00412400
.text:00412400                 jmp     ds:__imp_strstr
.text:00412400 strstr          endp
.text:00412400
.text:00412400 ; ---------------------------------------------------------------------------
.text:00412406                 align 10h
.text:00412410
.text:00412410 ; =============== S U B R O U T I N E =======================================
.text:00412410
.text:00412410 ; Attributes: thunk
.text:00412410
.text:00412410 ; int __cdecl isalpha(int C)
.text:00412410 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00412410
.text:00412410 C               = dword ptr  4
.text:00412410
.text:00412410                 jmp     ds:__imp_isalpha
.text:00412410 isalpha         endp
.text:00412410
.text:00412410 ; ---------------------------------------------------------------------------
.text:00412416                 align 10h
.text:00412420
.text:00412420 ; =============== S U B R O U T I N E =======================================
.text:00412420
.text:00412420 ; Attributes: thunk
.text:00412420
.text:00412420 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00412420 _stricmp_0      proc near               ; CODE XREF: .text:0040B7E4↑p
.text:00412420
.text:00412420 String1         = dword ptr  4
.text:00412420 String2         = dword ptr  8
.text:00412420
.text:00412420                 jmp     ds:__imp__stricmp_0
.text:00412420 _stricmp_0      endp
.text:00412420
.text:00412420 ; ---------------------------------------------------------------------------
.text:00412426                 align 10h
.text:00412430
.text:00412430 ; =============== S U B R O U T I N E =======================================
.text:00412430
.text:00412430 ; Attributes: thunk
.text:00412430
.text:00412430 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:00412430 strncat         proc near               ; CODE XREF: sub_40B970+75↑p
.text:00412430
.text:00412430 Destination     = dword ptr  4
.text:00412430 Source          = dword ptr  8
.text:00412430 Count           = dword ptr  0Ch
.text:00412430
.text:00412430                 jmp     ds:__imp_strncat
.text:00412430 strncat         endp
.text:00412430
.text:00412430 ; ---------------------------------------------------------------------------
.text:00412436                 align 10h
.text:00412440
.text:00412440 ; =============== S U B R O U T I N E =======================================
.text:00412440
.text:00412440 ; Attributes: thunk
.text:00412440
.text:00412440 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00412440 strncpy         proc near               ; CODE XREF: sub_40B970+61↑p
.text:00412440                                         ; sub_40B970+118↑p ...
.text:00412440
.text:00412440 Destination     = dword ptr  4
.text:00412440 Source          = dword ptr  8
.text:00412440 Count           = dword ptr  0Ch
.text:00412440
.text:00412440                 jmp     ds:__imp_strncpy
.text:00412440 strncpy         endp
.text:00412440
.text:00412440 ; ---------------------------------------------------------------------------
.text:00412446                 align 10h
.text:00412450
.text:00412450 ; =============== S U B R O U T I N E =======================================
.text:00412450
.text:00412450 ; Attributes: thunk
.text:00412450
.text:00412450 ; int __cdecl toupper(int C)
.text:00412450 toupper         proc near               ; CODE XREF: sub_40BB60+10E↑p
.text:00412450
.text:00412450 C               = dword ptr  4
.text:00412450
.text:00412450                 jmp     ds:__imp_toupper
.text:00412450 toupper         endp
.text:00412450
.text:00412450 ; ---------------------------------------------------------------------------
.text:00412456                 align 10h
.text:00412460
.text:00412460 ; =============== S U B R O U T I N E =======================================
.text:00412460
.text:00412460 ; Attributes: thunk
.text:00412460
.text:00412460 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00412460 sprintf         proc near               ; CODE XREF: .text:0040D57A↑p
.text:00412460                                         ; .text:0040D59B↑p ...
.text:00412460
.text:00412460 Buffer          = dword ptr  4
.text:00412460 Format          = dword ptr  8
.text:00412460
.text:00412460                 jmp     ds:__imp_sprintf
.text:00412460 sprintf         endp
.text:00412460
.text:00412460 ; ---------------------------------------------------------------------------
.text:00412466                 align 10h
.text:00412470
.text:00412470 ; =============== S U B R O U T I N E =======================================
.text:00412470
.text:00412470 ; Attributes: thunk
.text:00412470
.text:00412470 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00412470 sscanf          proc near               ; CODE XREF: .text:0040E0FE↑p
.text:00412470
.text:00412470 Buffer          = dword ptr  4
.text:00412470 Format          = dword ptr  8
.text:00412470
.text:00412470                 jmp     ds:__imp_sscanf
.text:00412470 sscanf          endp
.text:00412470
.text:00412470 ; ---------------------------------------------------------------------------
.text:00412476                 align 10h
.text:00412480
.text:00412480 ; =============== S U B R O U T I N E =======================================
.text:00412480
.text:00412480 ; Attributes: thunk
.text:00412480
.text:00412480 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00412480 strspn          proc near               ; CODE XREF: .text:0040DF4A↑p
.text:00412480                                         ; .text:0040E164↑p ...
.text:00412480
.text:00412480 Str             = dword ptr  4
.text:00412480 Control         = dword ptr  8
.text:00412480
.text:00412480                 jmp     ds:__imp_strspn
.text:00412480 strspn          endp
.text:00412480
.text:00412480 ; ---------------------------------------------------------------------------
.text:00412486                 align 10h
.text:00412490
.text:00412490 ; =============== S U B R O U T I N E =======================================
.text:00412490
.text:00412490 ; Attributes: thunk
.text:00412490
.text:00412490 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00412490 fopen           proc near               ; CODE XREF: sub_40E9FF+26↑p
.text:00412490                                         ; sub_40E9FF+99↑p
.text:00412490
.text:00412490 FileName        = dword ptr  4
.text:00412490 Mode            = dword ptr  8
.text:00412490
.text:00412490                 jmp     ds:__imp_fopen
.text:00412490 fopen           endp
.text:00412490
.text:00412490 ; ---------------------------------------------------------------------------
.text:00412496                 align 10h
.text:004124A0
.text:004124A0 ; =============== S U B R O U T I N E =======================================
.text:004124A0
.text:004124A0 ; Attributes: thunk
.text:004124A0
.text:004124A0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:004124A0 _filelengthi64  proc near               ; CODE XREF: sub_40F640+1F↑p
.text:004124A0
.text:004124A0 FileHandle      = dword ptr  4
.text:004124A0
.text:004124A0                 jmp     ds:__imp__filelengthi64
.text:004124A0 _filelengthi64  endp
.text:004124A0
.text:004124A0 ; ---------------------------------------------------------------------------
.text:004124A6                 align 10h
.text:004124B0
.text:004124B0 ; =============== S U B R O U T I N E =======================================
.text:004124B0
.text:004124B0 ; Attributes: thunk
.text:004124B0
.text:004124B0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:004124B0 strpbrk         proc near               ; CODE XREF: sub_40F6A0+87↑p
.text:004124B0
.text:004124B0 Str             = dword ptr  4
.text:004124B0 Control         = dword ptr  8
.text:004124B0
.text:004124B0                 jmp     ds:__imp_strpbrk
.text:004124B0 strpbrk         endp
.text:004124B0
.text:004124B0 ; ---------------------------------------------------------------------------
.text:004124B6                 align 10h
.text:004124C0
.text:004124C0 ; =============== S U B R O U T I N E =======================================
.text:004124C0
.text:004124C0 ; Attributes: thunk
.text:004124C0
.text:004124C0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004124C0 _fdopen         proc near               ; CODE XREF: sub_40F740+69↑p
.text:004124C0
.text:004124C0 FileHandle      = dword ptr  4
.text:004124C0 Format          = dword ptr  8
.text:004124C0
.text:004124C0                 jmp     ds:__imp__fdopen
.text:004124C0 _fdopen         endp
.text:004124C0
.text:004124C0 ; ---------------------------------------------------------------------------
.text:004124C6                 align 10h
.text:004124D0
.text:004124D0 ; =============== S U B R O U T I N E =======================================
.text:004124D0
.text:004124D0 ; Attributes: thunk
.text:004124D0
.text:004124D0 ; int __cdecl close_0(int FileHandle)
.text:004124D0 _close_0        proc near               ; CODE XREF: sub_40F740+90↑p
.text:004124D0
.text:004124D0 FileHandle      = dword ptr  4
.text:004124D0
.text:004124D0                 jmp     ds:__imp__close_0
.text:004124D0 _close_0        endp
.text:004124D0
.text:004124D0 ; ---------------------------------------------------------------------------
.text:004124D6                 align 10h
.text:004124E0
.text:004124E0 ; =============== S U B R O U T I N E =======================================
.text:004124E0
.text:004124E0 ; Attributes: thunk
.text:004124E0
.text:004124E0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:004124E0 _open_0         proc near               ; CODE XREF: sub_4101A0:loc_410530↑p
.text:004124E0
.text:004124E0 FileName        = dword ptr  4
.text:004124E0 OpenFlag        = dword ptr  8
.text:004124E0
.text:004124E0                 jmp     ds:__imp__open_0
.text:004124E0 _open_0         endp
.text:004124E0
.text:004124E0 ; ---------------------------------------------------------------------------
.text:004124E6                 align 10h
.text:004124F0
.text:004124F0 ; =============== S U B R O U T I N E =======================================
.text:004124F0
.text:004124F0 ; Attributes: thunk
.text:004124F0
.text:004124F0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004124F0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004124F0
.text:004124F0 lpTopLevelExceptionFilter= dword ptr  4
.text:004124F0
.text:004124F0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004124F0 SetUnhandledExceptionFilter endp
.text:004124F0
.text:004124F0 ; ---------------------------------------------------------------------------
.text:004124F6                 align 10h
.text:00412500
.text:00412500 ; =============== S U B R O U T I N E =======================================
.text:00412500
.text:00412500 ; Attributes: noreturn thunk
.text:00412500
.text:00412500 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00412500 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00412500
.text:00412500 uExitCode       = dword ptr  4
.text:00412500
.text:00412500                 jmp     ds:__imp_ExitProcess
.text:00412500 ExitProcess     endp
.text:00412500
.text:00412500 ; ---------------------------------------------------------------------------
.text:00412506                 align 10h
.text:00412510
.text:00412510 ; =============== S U B R O U T I N E =======================================
.text:00412510
.text:00412510 ; Attributes: thunk
.text:00412510
.text:00412510 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00412510 GetModuleHandleA proc near              ; CODE XREF: sub_409580+18↑p
.text:00412510                                         ; sub_409D40+329↑p ...
.text:00412510
.text:00412510 lpModuleName    = dword ptr  4
.text:00412510
.text:00412510                 jmp     ds:__imp_GetModuleHandleA
.text:00412510 GetModuleHandleA endp
.text:00412510
.text:00412510 ; ---------------------------------------------------------------------------
.text:00412516                 align 10h
.text:00412520
.text:00412520 ; =============== S U B R O U T I N E =======================================
.text:00412520
.text:00412520 ; Attributes: thunk
.text:00412520
.text:00412520 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00412520 GetProcAddress  proc near               ; CODE XREF: sub_409580+33↑p
.text:00412520                                         ; sub_4096F0+2E↑p ...
.text:00412520
.text:00412520 hModule         = dword ptr  4
.text:00412520 lpProcName      = dword ptr  8
.text:00412520
.text:00412520                 jmp     ds:__imp_GetProcAddress
.text:00412520 GetProcAddress  endp
.text:00412520
.text:00412520 ; ---------------------------------------------------------------------------
.text:00412526                 align 10h
.text:00412530
.text:00412530 ; =============== S U B R O U T I N E =======================================
.text:00412530
.text:00412530 ; Attributes: thunk
.text:00412530
.text:00412530 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00412530 GetFileAttributesA proc near            ; CODE XREF: sub_409580+47↑p
.text:00412530                                         ; sub_40CCF0+65↑p ...
.text:00412530
.text:00412530 lpFileName      = dword ptr  4
.text:00412530
.text:00412530                 jmp     ds:__imp_GetFileAttributesA
.text:00412530 GetFileAttributesA endp
.text:00412530
.text:00412530 ; ---------------------------------------------------------------------------
.text:00412536                 align 10h
.text:00412540
.text:00412540 ; =============== S U B R O U T I N E =======================================
.text:00412540
.text:00412540 ; Attributes: thunk
.text:00412540
.text:00412540 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00412540 FreeLibrary     proc near               ; CODE XREF: sub_409580+A4↑p
.text:00412540                                         ; sub_4096F0+11D↑p ...
.text:00412540
.text:00412540 hLibModule      = dword ptr  4
.text:00412540
.text:00412540                 jmp     ds:__imp_FreeLibrary
.text:00412540 FreeLibrary     endp
.text:00412540
.text:00412540 ; ---------------------------------------------------------------------------
.text:00412546                 align 10h
.text:00412550
.text:00412550 ; =============== S U B R O U T I N E =======================================
.text:00412550
.text:00412550 ; Attributes: thunk
.text:00412550
.text:00412550 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00412550 FindFirstFileA  proc near               ; CODE XREF: sub_409580+CE↑p
.text:00412550                                         ; sub_4096F0+14F↑p ...
.text:00412550
.text:00412550 lpFileName      = dword ptr  4
.text:00412550 lpFindFileData  = dword ptr  8
.text:00412550
.text:00412550                 jmp     ds:__imp_FindFirstFileA
.text:00412550 FindFirstFileA  endp
.text:00412550
.text:00412550 ; ---------------------------------------------------------------------------
.text:00412556                 align 10h
.text:00412560
.text:00412560 ; =============== S U B R O U T I N E =======================================
.text:00412560
.text:00412560 ; Attributes: thunk
.text:00412560
.text:00412560 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00412560 FindClose       proc near               ; CODE XREF: sub_409580+123↑p
.text:00412560                                         ; sub_4096F0+10E↑p ...
.text:00412560
.text:00412560 hFindFile       = dword ptr  4
.text:00412560
.text:00412560                 jmp     ds:__imp_FindClose
.text:00412560 FindClose       endp
.text:00412560
.text:00412560 ; ---------------------------------------------------------------------------
.text:00412566                 align 10h
.text:00412570
.text:00412570 ; =============== S U B R O U T I N E =======================================
.text:00412570
.text:00412570 ; Attributes: thunk
.text:00412570
.text:00412570 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00412570 LoadLibraryA    proc near               ; CODE XREF: sub_4096F0+13↑p
.text:00412570                                         ; sub_409D40+134↑p ...
.text:00412570
.text:00412570 lpLibFileName   = dword ptr  4
.text:00412570
.text:00412570                 jmp     ds:__imp_LoadLibraryA
.text:00412570 LoadLibraryA    endp
.text:00412570
.text:00412570 ; ---------------------------------------------------------------------------
.text:00412576                 align 10h
.text:00412580
.text:00412580 ; =============== S U B R O U T I N E =======================================
.text:00412580
.text:00412580 ; Attributes: thunk
.text:00412580
.text:00412580 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00412580 FindNextFileA   proc near               ; CODE XREF: sub_4096F0+FF↑p
.text:00412580                                         ; sub_40B970+36↑p
.text:00412580
.text:00412580 hFindFile       = dword ptr  4
.text:00412580 lpFindFileData  = dword ptr  8
.text:00412580
.text:00412580                 jmp     ds:__imp_FindNextFileA
.text:00412580 FindNextFileA   endp
.text:00412580
.text:00412580 ; ---------------------------------------------------------------------------
.text:00412586                 align 10h
.text:00412590
.text:00412590 ; =============== S U B R O U T I N E =======================================
.text:00412590
.text:00412590 ; Attributes: thunk
.text:00412590
.text:00412590 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00412590 GetFileType     proc near               ; CODE XREF: sub_409870+43↑p
.text:00412590                                         ; .text:0040A52A↑p
.text:00412590
.text:00412590 hFile           = dword ptr  4
.text:00412590
.text:00412590                 jmp     ds:__imp_GetFileType
.text:00412590 GetFileType     endp
.text:00412590
.text:00412590 ; ---------------------------------------------------------------------------
.text:00412596                 align 10h
.text:004125A0
.text:004125A0 ; =============== S U B R O U T I N E =======================================
.text:004125A0
.text:004125A0 ; Attributes: thunk
.text:004125A0
.text:004125A0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:004125A0 GetFileInformationByHandle proc near    ; CODE XREF: sub_409870+69↑p
.text:004125A0
.text:004125A0 hFile           = dword ptr  4
.text:004125A0 lpFileInformation= dword ptr  8
.text:004125A0
.text:004125A0                 jmp     ds:__imp_GetFileInformationByHandle
.text:004125A0 GetFileInformationByHandle endp
.text:004125A0
.text:004125A0 ; ---------------------------------------------------------------------------
.text:004125A6                 align 10h
.text:004125B0
.text:004125B0 ; =============== S U B R O U T I N E =======================================
.text:004125B0
.text:004125B0 ; Attributes: thunk
.text:004125B0
.text:004125B0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:004125B0 GetFileSize     proc near               ; CODE XREF: sub_409870+3F2↑p
.text:004125B0
.text:004125B0 hFile           = dword ptr  4
.text:004125B0 lpFileSizeHigh  = dword ptr  8
.text:004125B0
.text:004125B0                 jmp     ds:__imp_GetFileSize
.text:004125B0 GetFileSize     endp
.text:004125B0
.text:004125B0 ; ---------------------------------------------------------------------------
.text:004125B6                 align 10h
.text:004125C0
.text:004125C0 ; =============== S U B R O U T I N E =======================================
.text:004125C0
.text:004125C0 ; Attributes: thunk
.text:004125C0
.text:004125C0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:004125C0 PeekNamedPipe   proc near               ; CODE XREF: sub_409870+439↑p
.text:004125C0
.text:004125C0 hNamedPipe      = dword ptr  4
.text:004125C0 lpBuffer        = dword ptr  8
.text:004125C0 nBufferSize     = dword ptr  0Ch
.text:004125C0 lpBytesRead     = dword ptr  10h
.text:004125C0 lpTotalBytesAvail= dword ptr  14h
.text:004125C0 lpBytesLeftThisMessage= dword ptr  18h
.text:004125C0
.text:004125C0                 jmp     ds:__imp_PeekNamedPipe
.text:004125C0 PeekNamedPipe   endp
.text:004125C0
.text:004125C0 ; ---------------------------------------------------------------------------
.text:004125C6                 align 10h
.text:004125D0
.text:004125D0 ; =============== S U B R O U T I N E =======================================
.text:004125D0
.text:004125D0 ; Attributes: thunk
.text:004125D0
.text:004125D0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:004125D0 GetDriveTypeA   proc near               ; CODE XREF: sub_409D40+4C↑p
.text:004125D0
.text:004125D0 lpRootPathName  = dword ptr  4
.text:004125D0
.text:004125D0                 jmp     ds:__imp_GetDriveTypeA
.text:004125D0 GetDriveTypeA   endp
.text:004125D0
.text:004125D0 ; ---------------------------------------------------------------------------
.text:004125D6                 align 10h
.text:004125E0
.text:004125E0 ; =============== S U B R O U T I N E =======================================
.text:004125E0
.text:004125E0 ; Attributes: thunk
.text:004125E0
.text:004125E0 ; DWORD __stdcall GetLastError()
.text:004125E0 GetLastError    proc near               ; CODE XREF: sub_409D40:loc_409FC9↑p
.text:004125E0                                         ; .text:loc_40AB0D↑p ...
.text:004125E0                 jmp     ds:__imp_GetLastError
.text:004125E0 GetLastError    endp
.text:004125E0
.text:004125E0 ; ---------------------------------------------------------------------------
.text:004125E6                 align 10h
.text:004125F0
.text:004125F0 ; =============== S U B R O U T I N E =======================================
.text:004125F0
.text:004125F0 ; Attributes: thunk
.text:004125F0
.text:004125F0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:004125F0 GetVolumeInformationA proc near         ; CODE XREF: sub_40A240+64↑p
.text:004125F0                                         ; .text:0040A7EC↑p ...
.text:004125F0
.text:004125F0 lpRootPathName  = dword ptr  4
.text:004125F0 lpVolumeNameBuffer= dword ptr  8
.text:004125F0 nVolumeNameSize = dword ptr  0Ch
.text:004125F0 lpVolumeSerialNumber= dword ptr  10h
.text:004125F0 lpMaximumComponentLength= dword ptr  14h
.text:004125F0 lpFileSystemFlags= dword ptr  18h
.text:004125F0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:004125F0 nFileSystemNameSize= dword ptr  20h
.text:004125F0
.text:004125F0                 jmp     ds:__imp_GetVolumeInformationA
.text:004125F0 GetVolumeInformationA endp
.text:004125F0
.text:004125F0 ; ---------------------------------------------------------------------------
.text:004125F6                 align 10h
.text:00412600
.text:00412600 ; =============== S U B R O U T I N E =======================================
.text:00412600
.text:00412600 ; Attributes: thunk
.text:00412600
.text:00412600 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00412600 CreateFileA     proc near               ; CODE XREF: sub_40B0A0-CA↑p
.text:00412600                                         ; .text:0040C183↑p ...
.text:00412600
.text:00412600 lpFileName      = dword ptr  4
.text:00412600 dwDesiredAccess = dword ptr  8
.text:00412600 dwShareMode     = dword ptr  0Ch
.text:00412600 lpSecurityAttributes= dword ptr  10h
.text:00412600 dwCreationDisposition= dword ptr  14h
.text:00412600 dwFlagsAndAttributes= dword ptr  18h
.text:00412600 hTemplateFile   = dword ptr  1Ch
.text:00412600
.text:00412600                 jmp     ds:__imp_CreateFileA
.text:00412600 CreateFileA     endp
.text:00412600
.text:00412600 ; ---------------------------------------------------------------------------
.text:00412606                 align 10h
.text:00412610
.text:00412610 ; =============== S U B R O U T I N E =======================================
.text:00412610
.text:00412610 ; Attributes: thunk
.text:00412610
.text:00412610 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00412610 CloseHandle     proc near               ; CODE XREF: sub_40B0A0-AF↑p
.text:00412610                                         ; .text:0040C1F9↑p ...
.text:00412610
.text:00412610 hObject         = dword ptr  4
.text:00412610
.text:00412610                 jmp     ds:__imp_CloseHandle
.text:00412610 CloseHandle     endp
.text:00412610
.text:00412610 ; ---------------------------------------------------------------------------
.text:00412616                 align 10h
.text:00412620
.text:00412620 ; =============== S U B R O U T I N E =======================================
.text:00412620
.text:00412620 ; Attributes: thunk
.text:00412620
.text:00412620 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00412620 SetErrorMode    proc near               ; CODE XREF: sub_40B0A0-7A↑p
.text:00412620                                         ; sub_40D280+57↑p ...
.text:00412620
.text:00412620 uMode           = dword ptr  4
.text:00412620
.text:00412620                 jmp     ds:__imp_SetErrorMode
.text:00412620 SetErrorMode    endp
.text:00412620
.text:00412620 ; ---------------------------------------------------------------------------
.text:00412626                 align 10h
.text:00412630
.text:00412630 ; =============== S U B R O U T I N E =======================================
.text:00412630
.text:00412630 ; Attributes: thunk
.text:00412630
.text:00412630 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00412630 GetModuleFileNameA proc near            ; CODE XREF: sub_40B660+1C↑p
.text:00412630
.text:00412630 hModule         = dword ptr  4
.text:00412630 lpFilename      = dword ptr  8
.text:00412630 nSize           = dword ptr  0Ch
.text:00412630
.text:00412630                 jmp     ds:__imp_GetModuleFileNameA
.text:00412630 GetModuleFileNameA endp
.text:00412630
.text:00412630 ; ---------------------------------------------------------------------------
.text:00412636                 align 10h
.text:00412640
.text:00412640 ; =============== S U B R O U T I N E =======================================
.text:00412640
.text:00412640 ; Attributes: thunk
.text:00412640
.text:00412640 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00412640 GetShortPathNameA proc near             ; CODE XREF: .text:0040B8E6↑p
.text:00412640                                         ; .text:0040B910↑p
.text:00412640
.text:00412640 lpszLongPath    = dword ptr  4
.text:00412640 lpszShortPath   = dword ptr  8
.text:00412640 cchBuffer       = dword ptr  0Ch
.text:00412640
.text:00412640                 jmp     ds:__imp_GetShortPathNameA
.text:00412640 GetShortPathNameA endp
.text:00412640
.text:00412640 ; ---------------------------------------------------------------------------
.text:00412646                 align 10h
.text:00412650
.text:00412650 ; =============== S U B R O U T I N E =======================================
.text:00412650
.text:00412650 ; Attributes: thunk
.text:00412650
.text:00412650 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00412650 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040BE08↑p
.text:00412650                                         ; .text:0040BE24↑p ...
.text:00412650
.text:00412650 nBufferLength   = dword ptr  4
.text:00412650 lpBuffer        = dword ptr  8
.text:00412650
.text:00412650                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00412650 GetCurrentDirectoryA endp
.text:00412650
.text:00412650 ; ---------------------------------------------------------------------------
.text:00412656                 align 10h
.text:00412660
.text:00412660 ; =============== S U B R O U T I N E =======================================
.text:00412660
.text:00412660 ; Attributes: thunk
.text:00412660
.text:00412660 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00412660 DeviceIoControl proc near               ; CODE XREF: .text:0040C1EC↑p
.text:00412660                                         ; sub_40C5B0+1E5↑p
.text:00412660
.text:00412660 hDevice         = dword ptr  4
.text:00412660 dwIoControlCode = dword ptr  8
.text:00412660 lpInBuffer      = dword ptr  0Ch
.text:00412660 nInBufferSize   = dword ptr  10h
.text:00412660 lpOutBuffer     = dword ptr  14h
.text:00412660 nOutBufferSize  = dword ptr  18h
.text:00412660 lpBytesReturned = dword ptr  1Ch
.text:00412660 lpOverlapped    = dword ptr  20h
.text:00412660
.text:00412660                 jmp     ds:__imp_DeviceIoControl
.text:00412660 DeviceIoControl endp
.text:00412660
.text:00412660 ; ---------------------------------------------------------------------------
.text:00412666                 align 10h
.text:00412670
.text:00412670 ; =============== S U B R O U T I N E =======================================
.text:00412670
.text:00412670 ; Attributes: thunk
.text:00412670
.text:00412670 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00412670 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040C543↑p
.text:00412670                                         ; sub_40C5B0+7B↑p ...
.text:00412670
.text:00412670 lpRootPathName  = dword ptr  4
.text:00412670 lpSectorsPerCluster= dword ptr  8
.text:00412670 lpBytesPerSector= dword ptr  0Ch
.text:00412670 lpNumberOfFreeClusters= dword ptr  10h
.text:00412670 lpTotalNumberOfClusters= dword ptr  14h
.text:00412670
.text:00412670                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00412670 GetDiskFreeSpaceA endp
.text:00412670
.text:00412670 ; ---------------------------------------------------------------------------
.text:00412676                 align 10h
.text:00412680
.text:00412680 ; =============== S U B R O U T I N E =======================================
.text:00412680
.text:00412680 ; Attributes: thunk
.text:00412680
.text:00412680 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00412680 GetFullPathNameA proc near              ; CODE XREF: sub_40D150+45↑p
.text:00412680                                         ; sub_40D150+ED↑p
.text:00412680
.text:00412680 lpFileName      = dword ptr  4
.text:00412680 nBufferLength   = dword ptr  8
.text:00412680 lpBuffer        = dword ptr  0Ch
.text:00412680 lpFilePart      = dword ptr  10h
.text:00412680
.text:00412680                 jmp     ds:__imp_GetFullPathNameA
.text:00412680 GetFullPathNameA endp
.text:00412680
.text:00412680 ; ---------------------------------------------------------------------------
.text:00412686                 align 10h
.text:00412690
.text:00412690 ; =============== S U B R O U T I N E =======================================
.text:00412690
.text:00412690 ; Attributes: thunk
.text:00412690
.text:00412690 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00412690 lstrcmpiA       proc near               ; CODE XREF: .text:0040D80B↑p
.text:00412690                                         ; .text:0040D822↑p ...
.text:00412690
.text:00412690 lpString1       = dword ptr  4
.text:00412690 lpString2       = dword ptr  8
.text:00412690
.text:00412690                 jmp     ds:__imp_lstrcmpiA
.text:00412690 lstrcmpiA       endp
.text:00412690
.text:00412690 ; ---------------------------------------------------------------------------
.text:00412696                 align 10h
.text:004126A0
.text:004126A0 ; =============== S U B R O U T I N E =======================================
.text:004126A0
.text:004126A0 ; Attributes: thunk
.text:004126A0
.text:004126A0 ; DWORD __stdcall GetVersion()
.text:004126A0 GetVersion      proc near               ; CODE XREF: .text:0040DB93↑p
.text:004126A0                 jmp     ds:__imp_GetVersion
.text:004126A0 GetVersion      endp
.text:004126A0
.text:004126A0 ; ---------------------------------------------------------------------------
.text:004126A6                 align 10h
.text:004126B0
.text:004126B0 ; =============== S U B R O U T I N E =======================================
.text:004126B0
.text:004126B0 ; Attributes: thunk
.text:004126B0
.text:004126B0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:004126B0 GetVersionExA   proc near               ; CODE XREF: sub_40DC20+32↑p
.text:004126B0                                         ; sub_40DC20+20B↑p
.text:004126B0
.text:004126B0 lpVersionInformation= dword ptr  4
.text:004126B0
.text:004126B0                 jmp     ds:__imp_GetVersionExA
.text:004126B0 GetVersionExA   endp
.text:004126B0
.text:004126B0 ; ---------------------------------------------------------------------------
.text:004126B6                 align 10h
.text:004126C0
.text:004126C0 ; =============== S U B R O U T I N E =======================================
.text:004126C0
.text:004126C0 ; Attributes: thunk
.text:004126C0
.text:004126C0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:004126C0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040E2BF↑p
.text:004126C0                                         ; .text:0040E2EE↑p ...
.text:004126C0
.text:004126C0 nBufferLength   = dword ptr  4
.text:004126C0 lpBuffer        = dword ptr  8
.text:004126C0
.text:004126C0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:004126C0 GetLogicalDriveStringsA endp
.text:004126C0
.text:004126C0 ; ---------------------------------------------------------------------------
.text:004126C6                 align 10h
.text:004126D0
.text:004126D0 ; =============== S U B R O U T I N E =======================================
.text:004126D0
.text:004126D0 ; Attributes: thunk
.text:004126D0
.text:004126D0 ; HANDLE __stdcall GetProcessHeap()
.text:004126D0 GetProcessHeap  proc near               ; CODE XREF: .text:0040E2C9↑p
.text:004126D0                                         ; sub_40E9A0+24↑p ...
.text:004126D0                 jmp     ds:__imp_GetProcessHeap
.text:004126D0 GetProcessHeap  endp
.text:004126D0
.text:004126D0 ; ---------------------------------------------------------------------------
.text:004126D6                 align 10h
.text:004126E0
.text:004126E0 ; =============== S U B R O U T I N E =======================================
.text:004126E0
.text:004126E0 ; Attributes: thunk
.text:004126E0
.text:004126E0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:004126E0 HeapAlloc       proc near               ; CODE XREF: .text:0040E2DD↑p
.text:004126E0                                         ; sub_40E9A0+38↑p ...
.text:004126E0
.text:004126E0 hHeap           = dword ptr  4
.text:004126E0 dwFlags         = dword ptr  8
.text:004126E0 dwBytes         = dword ptr  0Ch
.text:004126E0
.text:004126E0                 jmp     ds:__imp_HeapAlloc
.text:004126E0 HeapAlloc       endp
.text:004126E0
.text:004126E0 ; ---------------------------------------------------------------------------
.text:004126E6                 align 10h
.text:004126F0
.text:004126F0 ; =============== S U B R O U T I N E =======================================
.text:004126F0
.text:004126F0 ; Attributes: thunk
.text:004126F0
.text:004126F0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:004126F0 HeapFree        proc near               ; CODE XREF: .text:0040EADD↑p
.text:004126F0
.text:004126F0 hHeap           = dword ptr  4
.text:004126F0 dwFlags         = dword ptr  8
.text:004126F0 lpMem           = dword ptr  0Ch
.text:004126F0
.text:004126F0                 jmp     ds:__imp_HeapFree
.text:004126F0 HeapFree        endp
.text:004126F0
.text:004126F0 ; ---------------------------------------------------------------------------
.text:004126F6                 align 10h
.text:00412700
.text:00412700 ; =============== S U B R O U T I N E =======================================
.text:00412700
.text:00412700 ; Attributes: thunk
.text:00412700
.text:00412700 ; BOOL __stdcall AreFileApisANSI()
.text:00412700 AreFileApisANSI proc near               ; CODE XREF: sub_40EB80+89↑p
.text:00412700                 jmp     ds:__imp_AreFileApisANSI
.text:00412700 AreFileApisANSI endp
.text:00412700
.text:00412700 ; ---------------------------------------------------------------------------
.text:00412706                 align 10h
.text:00412710
.text:00412710 ; =============== S U B R O U T I N E =======================================
.text:00412710
.text:00412710 ; Attributes: thunk
.text:00412710
.text:00412710 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00412710 MultiByteToWideChar proc near           ; CODE XREF: sub_40EB80+BD↑p
.text:00412710
.text:00412710 CodePage        = dword ptr  4
.text:00412710 dwFlags         = dword ptr  8
.text:00412710 lpMultiByteStr  = dword ptr  0Ch
.text:00412710 cbMultiByte     = dword ptr  10h
.text:00412710 lpWideCharStr   = dword ptr  14h
.text:00412710 cchWideChar     = dword ptr  18h
.text:00412710
.text:00412710                 jmp     ds:__imp_MultiByteToWideChar
.text:00412710 MultiByteToWideChar endp
.text:00412710
.text:00412710 ; ---------------------------------------------------------------------------
.text:00412716                 align 10h
.text:00412720
.text:00412720 ; =============== S U B R O U T I N E =======================================
.text:00412720
.text:00412720 ; Attributes: thunk
.text:00412720
.text:00412720 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00412720 lstrcpyA        proc near               ; CODE XREF: sub_40EB80+128↑p
.text:00412720
.text:00412720 lpString1       = dword ptr  4
.text:00412720 lpString2       = dword ptr  8
.text:00412720
.text:00412720                 jmp     ds:__imp_lstrcpyA
.text:00412720 lstrcpyA        endp
.text:00412720
.text:00412720 ; ---------------------------------------------------------------------------
.text:00412726                 align 10h
.text:00412730
.text:00412730 ; =============== S U B R O U T I N E =======================================
.text:00412730
.text:00412730 ; Attributes: thunk
.text:00412730
.text:00412730 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00412730 UnlockFile      proc near               ; CODE XREF: sub_40F640+40↑p
.text:00412730
.text:00412730 hFile           = dword ptr  4
.text:00412730 dwFileOffsetLow = dword ptr  8
.text:00412730 dwFileOffsetHigh= dword ptr  0Ch
.text:00412730 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00412730 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00412730
.text:00412730                 jmp     ds:__imp_UnlockFile
.text:00412730 UnlockFile      endp
.text:00412730
.text:00412730 ; ---------------------------------------------------------------------------
.text:00412736                 align 10h
.text:00412740
.text:00412740 ; =============== S U B R O U T I N E =======================================
.text:00412740
.text:00412740 ; Attributes: thunk
.text:00412740
.text:00412740 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00412740 GetSystemInfo   proc near               ; CODE XREF: sub_40F7E0+3A↑p
.text:00412740                                         ; sub_40F830+3A↑p ...
.text:00412740
.text:00412740 lpSystemInfo    = dword ptr  4
.text:00412740
.text:00412740                 jmp     ds:__imp_GetSystemInfo
.text:00412740 GetSystemInfo   endp
.text:00412740
.text:00412740 ; ---------------------------------------------------------------------------
.text:00412746                 align 10h
.text:00412750
.text:00412750 ; =============== S U B R O U T I N E =======================================
.text:00412750
.text:00412750 ; Attributes: thunk
.text:00412750
.text:00412750 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00412750 CreateDirectoryA proc near              ; CODE XREF: sub_4105D0+22↑p
.text:00412750
.text:00412750 lpPathName      = dword ptr  4
.text:00412750 lpSecurityAttributes= dword ptr  8
.text:00412750
.text:00412750                 jmp     ds:__imp_CreateDirectoryA
.text:00412750 CreateDirectoryA endp
.text:00412750
.text:00412750 ; ---------------------------------------------------------------------------
.text:00412756                 align 10h
.text:00412760
.text:00412760 ; =============== S U B R O U T I N E =======================================
.text:00412760
.text:00412760 ; Attributes: thunk
.text:00412760
.text:00412760 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00412760 GetTimeZoneInformation proc near        ; CODE XREF: sub_4106D0+22↑p
.text:00412760
.text:00412760 lpTimeZoneInformation= dword ptr  4
.text:00412760
.text:00412760                 jmp     ds:__imp_GetTimeZoneInformation
.text:00412760 GetTimeZoneInformation endp
.text:00412760
.text:00412760 ; ---------------------------------------------------------------------------
.text:00412766                 align 10h
.text:00412770
.text:00412770 ; =============== S U B R O U T I N E =======================================
.text:00412770
.text:00412770 ; Attributes: thunk
.text:00412770
.text:00412770 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00412770 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_4106D0+4F↑p
.text:00412770
.text:00412770 lpSystemTimeAsFileTime= dword ptr  4
.text:00412770
.text:00412770                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00412770 GetSystemTimeAsFileTime endp
.text:00412770
.text:00412770 ; ---------------------------------------------------------------------------
.text:00412776                 align 10h
.text:00412780
.text:00412780 ; =============== S U B R O U T I N E =======================================
.text:00412780
.text:00412780 ; Attributes: thunk
.text:00412780
.text:00412780 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00412780 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040D791↑p
.text:00412780
.text:00412780 hKey            = dword ptr  4
.text:00412780 lpSubKey        = dword ptr  8
.text:00412780 ulOptions       = dword ptr  0Ch
.text:00412780 samDesired      = dword ptr  10h
.text:00412780 phkResult       = dword ptr  14h
.text:00412780
.text:00412780                 jmp     ds:__imp_RegOpenKeyExA
.text:00412780 RegOpenKeyExA   endp
.text:00412780
.text:00412780 ; ---------------------------------------------------------------------------
.text:00412786                 align 10h
.text:00412790
.text:00412790 ; =============== S U B R O U T I N E =======================================
.text:00412790
.text:00412790 ; Attributes: thunk
.text:00412790
.text:00412790 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00412790 RegQueryValueExA proc near              ; CODE XREF: .text:0040D7D4↑p
.text:00412790
.text:00412790 hKey            = dword ptr  4
.text:00412790 lpValueName     = dword ptr  8
.text:00412790 lpReserved      = dword ptr  0Ch
.text:00412790 lpType          = dword ptr  10h
.text:00412790 lpData          = dword ptr  14h
.text:00412790 lpcbData        = dword ptr  18h
.text:00412790
.text:00412790                 jmp     ds:__imp_RegQueryValueExA
.text:00412790 RegQueryValueExA endp
.text:00412790
.text:00412790 ; ---------------------------------------------------------------------------
.text:00412796                 align 10h
.text:004127A0
.text:004127A0 ; =============== S U B R O U T I N E =======================================
.text:004127A0
.text:004127A0 ; Attributes: thunk
.text:004127A0
.text:004127A0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:004127A0 RegCloseKey     proc near               ; CODE XREF: .text:0040D7F8↑p
.text:004127A0
.text:004127A0 hKey            = dword ptr  4
.text:004127A0
.text:004127A0                 jmp     ds:__imp_RegCloseKey
.text:004127A0 RegCloseKey     endp
.text:004127A0
.text:004127A0 ; ---------------------------------------------------------------------------
.text:004127A6                 db 2 dup(90h)
.text:004127A8                 dd 2 dup(0)
.text:004127B0                 dd 21400h, 0
.text:004127B8                 dd 0C0h, 46000000h
.text:004127C0 ; const IID rclsid
.text:004127C0 rclsid          dd 21401h               ; Data1
.text:004127C0                                         ; DATA XREF: sub_40EB80+4B↑o
.text:004127C0                 dw 0                    ; Data2
.text:004127C0                 dw 0                    ; Data3
.text:004127C0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004127D0                 dd 214A0h, 0
.text:004127D8                 dd 0C0h, 46000000h, 214A1h, 0
.text:004127E8                 dd 0C0h, 46000000h, 214D0h, 0
.text:004127F8                 dd 0C0h, 46000000h, 214D1h, 0
.text:00412808                 dd 0C0h, 46000000h, 214D2h, 0
.text:00412818                 dd 0C0h, 46000000h, 214E1h, 0
.text:00412828                 dd 0C0h, 46000000h, 214E2h, 0
.text:00412838                 dd 0C0h, 46000000h, 214E3h, 0
.text:00412848                 dd 0C0h, 46000000h, 214E4h, 0
.text:00412858                 dd 0C0h, 46000000h, 21500h, 0
.text:00412868                 dd 0C0h, 46000000h, 214E5h, 0
.text:00412878                 dd 0C0h, 46000000h, 214E6h, 0
.text:00412888                 dd 0C0h, 46000000h, 214E8h, 0
.text:00412898                 dd 0C0h, 46000000h, 214E9h, 0
.text:004128A8                 dd 0C0h, 46000000h, 214EAh, 0
.text:004128B8                 dd 0C0h, 46000000h, 214EBh, 0
.text:004128C8                 dd 0C0h, 46000000h
.text:004128D0 ; const IID riid
.text:004128D0 riid            dd 214EEh               ; Data1
.text:004128D0                                         ; DATA XREF: sub_40EB80+2B↑o
.text:004128D0                 dw 0                    ; Data2
.text:004128D0                 dw 0                    ; Data3
.text:004128D0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004128E0                 dd 214EFh, 0
.text:004128E8                 dd 0C0h, 46000000h, 214F0h, 0
.text:004128F8                 dd 0C0h, 46000000h, 214F1h, 0
.text:00412908                 dd 0C0h, 46000000h, 214F2h, 0
.text:00412918                 dd 0C0h, 46000000h, 214F3h, 0
.text:00412928                 dd 0C0h, 46000000h, 214F4h, 0
.text:00412938                 dd 0C0h, 46000000h, 214F5h, 0
.text:00412948                 dd 0C0h, 46000000h, 214F6h, 0
.text:00412958                 dd 0C0h, 46000000h, 214F7h, 0
.text:00412968                 dd 0C0h, 46000000h, 214F8h, 0
.text:00412978                 dd 0C0h, 46000000h, 214F9h, 0
.text:00412988                 dd 0C0h, 46000000h, 214FAh, 0
.text:00412998                 dd 0C0h, 46000000h, 214FBh, 0
.text:004129A8                 dd 0C0h, 46000000h, 214FCh, 0
.text:004129B8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:004129B8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:004129B8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:004129B8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:004129B8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004129B8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:004129B8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:004129B8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004129B8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:004129B8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00412A88                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00412A98                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00412AA8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00412AB8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00412AC8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00412AC8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00412AC8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00412AC8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00412AC8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00412AC8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00412AC8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00412B50 dword_412B50    dd 0FFFFFFFFh           ; DATA XREF: .text:00411D79↑r
.text:00412B50                                         ; .text:loc_411DA0↑r ...
.text:00412B54 dword_412B54    dd 0                    ; DATA XREF: .text:loc_411DAC↑r
.text:00412B54                                         ; sub_411DD0:loc_411E1D↑r
.text:00412B58                 dd 0FFFFFFFFh
.text:00412B5C dword_412B5C    dd 29h dup(0)           ; DATA XREF: .data:off_4130D4↓o
.text:00412C00                 dd 100h dup(?)
.text:00412C00 _text           ends
.text:00412C00
.data:00413000 ; Section 2. (virtual address 00013000)
.data:00413000 ; Virtual size                  : 000000F0 (    240.)
.data:00413000 ; Section size in file          : 00000200 (    512.)
.data:00413000 ; Offset to raw data for section: 00012000
.data:00413000 ; Flags C0000040: Data Readable Writable
.data:00413000 ; Alignment     : default
.data:00413000 ; ===========================================================================
.data:00413000
.data:00413000 ; Segment type: Pure data
.data:00413000 ; Segment permissions: Read/Write
.data:00413000 _data           segment para public 'DATA' use32
.data:00413000                 assume cs:_data
.data:00413000                 ;org 413000h
.data:00413000 dword_413000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00413000                                         ; sub_401080+CC↑r
.data:00413004 dword_413004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00413004                                         ; sub_401080+D4↑r
.data:00413008                 align 10h
.data:00413010 dword_413010    dd 2                    ; DATA XREF: sub_401920+34C↑w
.data:00413010                                         ; sub_401920+3E7↑w ...
.data:00413014                 align 10h
.data:00413020 dword_413020    dd 1                    ; DATA XREF: sub_401920:loc_401A30↑r
.data:00413020                                         ; sub_401920:loc_401D58↑r ...
.data:00413024 dword_413024    dd 1                    ; DATA XREF: sub_405830+11↑r
.data:00413024                                         ; .text:004058D1↑r
.data:00413028 dword_413028    dd 3Fh                  ; DATA XREF: sub_405830+7D↑w
.data:00413028                                         ; .text:0040593D↑w
.data:0041302C                 align 10h
.data:00413030 ; char *Buffer
.data:00413030 Buffer          dd offset aCopyrightC2005
.data:00413030                                         ; DATA XREF: sub_405DC0+DC↑r
.data:00413030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00413034                 align 10h
.data:00413040 ; int Code
.data:00413040 Code            dd 1                    ; DATA XREF: sub_405A90+18↑r
.data:00413040                                         ; sub_406410+6D↑r ...
.data:00413044                 align 10h
.data:00413050 dword_413050    dd 1                    ; DATA XREF: sub_408D60+22↑r
.data:00413050                                         ; sub_408D60+65↑r ...
.data:00413054 dword_413054    dd 100h                 ; DATA XREF: sub_408D60+3F↑o
.data:00413054                                         ; sub_408D60+1A2↑r ...
.data:00413058 off_413058      dd offset unk_414090    ; DATA XREF: sub_408D60+1AA↑r
.data:0041305C ; void *off_41305C
.data:0041305C off_41305C      dd offset dword_413054  ; DATA XREF: sub_408D60+39↑r
.data:0041305C                                         ; sub_408D60+60↑w ...
.data:00413060 dword_413060    dd 200h                 ; DATA XREF: sub_409870+2ED↑r
.data:00413060                                         ; sub_409870+2F8↑r ...
.data:00413064 ; char *off_413064
.data:00413064 off_413064      dd offset aComExeBatCmd ; DATA XREF: sub_409D40+3D3↑r
.data:00413064                                         ; sub_409D40+400↑r ...
.data:00413064                                         ; ".com;.exe;.bat;.cmd"
.data:00413068                 align 10h
.data:00413070 byte_413070     db 41h                  ; DATA XREF: sub_40BC80+6B↑w
.data:00413070                                         ; sub_40BC80:loc_40BD94↑r
.data:00413071                 align 10h
.data:00413080 dword_413080    dd 1                    ; DATA XREF: .text:loc_40D647↑r
.data:00413080                                         ; sub_40DC20+202↑w
.data:00413084                 align 10h
.data:00413090 off_413090      dd offset aNotset       ; DATA XREF: .text:0040DE9A↑r
.data:00413090                                         ; .text:0040EAE2↑r
.data:00413090                                         ; "notset"
.data:00413094 off_413094      dd offset aNotset       ; DATA XREF: .text:0040DEB2↑r
.data:00413094                                         ; .text:0040DED4↑r ...
.data:00413094                                         ; "notset"
.data:00413098                 align 10h
.data:004130A0 dword_4130A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004130A4                 align 10h
.data:004130B0 ; int Mode
.data:004130B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004130B0                                         ; sub_401080+80↑r ...
.data:004130B4                 align 10h
.data:004130C0 dword_4130C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004130C0                                         ; sub_401080+BA↑r
.data:004130C4                 align 10h
.data:004130D0 dword_4130D0    dd 0                    ; DATA XREF: sub_411DD0+9↑r
.data:004130D0                                         ; sub_411DD0+1D↑w
.data:004130D4 off_4130D4      dd offset dword_412B5C  ; DATA XREF: sub_411D40+6↑r
.data:004130D4                                         ; sub_411D40+17↑r ...
.data:004130D8                 align 1000h
.data:004130D8 _data           ends
.data:004130D8
.bss:00414000 ; Section 3. (virtual address 00014000)
.bss:00414000 ; Virtual size                  : 00000610 (   1552.)
.bss:00414000 ; Section size in file          : 00000000 (      0.)
.bss:00414000 ; Offset to raw data for section: 00000000
.bss:00414000 ; Flags C0000080: Bss Readable Writable
.bss:00414000 ; Alignment     : default
.bss:00414000 ; ===========================================================================
.bss:00414000
.bss:00414000 ; Segment type: Uninitialized
.bss:00414000 ; Segment permissions: Read/Write
.bss:00414000 _bss            segment para public 'BSS' use32
.bss:00414000                 assume cs:_bss
.bss:00414000                 ;org 414000h
.bss:00414000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00414000 unk_414000      db    ? ;               ; DATA XREF: sub_401920:loc_401E5E↑o
.bss:00414000                                         ; sub_411D00+1↑o ...
.bss:00414001                 db    ? ;
.bss:00414002                 db    ? ;
.bss:00414003                 db    ? ;
.bss:00414004                 db    ? ;
.bss:00414005                 db    ? ;
.bss:00414006                 db    ? ;
.bss:00414007                 db    ? ;
.bss:00414008                 db    ? ;
.bss:00414009                 db    ? ;
.bss:0041400A                 db    ? ;
.bss:0041400B                 db    ? ;
.bss:0041400C                 db    ? ;
.bss:0041400D                 db    ? ;
.bss:0041400E                 db    ? ;
.bss:0041400F                 db    ? ;
.bss:00414010 byte_414010     db ?                    ; DATA XREF: sub_401920+85↑w
.bss:00414010                                         ; sub_401920+329↑w ...
.bss:00414011                 align 10h
.bss:00414020 byte_414020     db ?                    ; DATA XREF: sub_401920+7E↑w
.bss:00414020                                         ; sub_401920:loc_401D12↑w ...
.bss:00414021                 align 10h
.bss:00414030 ; char *dword_414030
.bss:00414030 dword_414030    dd ?                    ; DATA XREF: sub_401920+3C8↑w
.bss:00414030                                         ; sub_401920:loc_401D1E↑r ...
.bss:00414034                 align 10h
.bss:00414040 dword_414040    dd ?                    ; DATA XREF: sub_401920+48C↑w
.bss:00414040                                         ; sub_401920+54A↑w ...
.bss:00414044                 align 10h
.bss:00414050 dword_414050    dd ?                    ; DATA XREF: sub_405830+9↑o
.bss:00414050                                         ; sub_405830+17↑w ...
.bss:00414054 dword_414054    dd ?                    ; DATA XREF: sub_405830+21↑w
.bss:00414054                                         ; .text:004058E9↑w
.bss:00414058 dword_414058    dd ?                    ; DATA XREF: sub_405830+77↑r
.bss:00414058                                         ; .text:00405937↑r
.bss:0041405C dword_41405C    dd ?                    ; DATA XREF: sub_405830+6B↑r
.bss:0041405C                                         ; .text:0040592B↑r
.bss:00414060                 align 40h
.bss:00414080 ; char *dword_414080
.bss:00414080 dword_414080    dd ?                    ; DATA XREF: .text:004063E4↑w
.bss:00414080                                         ; sub_406410+58↑r
.bss:00414084                 align 10h
.bss:00414090 unk_414090      db    ? ;               ; DATA XREF: sub_408D60+100↑o
.bss:00414090                                         ; .data:off_413058↑o
.bss:00414091                 db    ? ;
.bss:00414092                 db    ? ;
.bss:00414093                 db    ? ;
.bss:00414094                 db    ? ;
.bss:00414095                 db    ? ;
.bss:00414096                 db    ? ;
.bss:00414097                 db    ? ;
.bss:00414098                 db    ? ;
.bss:00414099                 db    ? ;
.bss:0041409A                 db    ? ;
.bss:0041409B                 db    ? ;
.bss:0041409C                 db    ? ;
.bss:0041409D                 db    ? ;
.bss:0041409E                 db    ? ;
.bss:0041409F                 db    ? ;
.bss:004140A0                 db    ? ;
.bss:004140A1                 db    ? ;
.bss:004140A2                 db    ? ;
.bss:004140A3                 db    ? ;
.bss:004140A4                 db    ? ;
.bss:004140A5                 db    ? ;
.bss:004140A6                 db    ? ;
.bss:004140A7                 db    ? ;
.bss:004140A8                 db    ? ;
.bss:004140A9                 db    ? ;
.bss:004140AA                 db    ? ;
.bss:004140AB                 db    ? ;
.bss:004140AC                 db    ? ;
.bss:004140AD                 db    ? ;
.bss:004140AE                 db    ? ;
.bss:004140AF                 db    ? ;
.bss:004140B0                 db    ? ;
.bss:004140B1                 db    ? ;
.bss:004140B2                 db    ? ;
.bss:004140B3                 db    ? ;
.bss:004140B4                 db    ? ;
.bss:004140B5                 db    ? ;
.bss:004140B6                 db    ? ;
.bss:004140B7                 db    ? ;
.bss:004140B8                 db    ? ;
.bss:004140B9                 db    ? ;
.bss:004140BA                 db    ? ;
.bss:004140BB                 db    ? ;
.bss:004140BC                 db    ? ;
.bss:004140BD                 db    ? ;
.bss:004140BE                 db    ? ;
.bss:004140BF                 db    ? ;
.bss:004140C0                 db    ? ;
.bss:004140C1                 db    ? ;
.bss:004140C2                 db    ? ;
.bss:004140C3                 db    ? ;
.bss:004140C4                 db    ? ;
.bss:004140C5                 db    ? ;
.bss:004140C6                 db    ? ;
.bss:004140C7                 db    ? ;
.bss:004140C8                 db    ? ;
.bss:004140C9                 db    ? ;
.bss:004140CA                 db    ? ;
.bss:004140CB                 db    ? ;
.bss:004140CC                 db    ? ;
.bss:004140CD                 db    ? ;
.bss:004140CE                 db    ? ;
.bss:004140CF                 db    ? ;
.bss:004140D0                 db    ? ;
.bss:004140D1                 db    ? ;
.bss:004140D2                 db    ? ;
.bss:004140D3                 db    ? ;
.bss:004140D4                 db    ? ;
.bss:004140D5                 db    ? ;
.bss:004140D6                 db    ? ;
.bss:004140D7                 db    ? ;
.bss:004140D8                 db    ? ;
.bss:004140D9                 db    ? ;
.bss:004140DA                 db    ? ;
.bss:004140DB                 db    ? ;
.bss:004140DC                 db    ? ;
.bss:004140DD                 db    ? ;
.bss:004140DE                 db    ? ;
.bss:004140DF                 db    ? ;
.bss:004140E0                 db    ? ;
.bss:004140E1                 db    ? ;
.bss:004140E2                 db    ? ;
.bss:004140E3                 db    ? ;
.bss:004140E4                 db    ? ;
.bss:004140E5                 db    ? ;
.bss:004140E6                 db    ? ;
.bss:004140E7                 db    ? ;
.bss:004140E8                 db    ? ;
.bss:004140E9                 db    ? ;
.bss:004140EA                 db    ? ;
.bss:004140EB                 db    ? ;
.bss:004140EC                 db    ? ;
.bss:004140ED                 db    ? ;
.bss:004140EE                 db    ? ;
.bss:004140EF                 db    ? ;
.bss:004140F0                 db    ? ;
.bss:004140F1                 db    ? ;
.bss:004140F2                 db    ? ;
.bss:004140F3                 db    ? ;
.bss:004140F4                 db    ? ;
.bss:004140F5                 db    ? ;
.bss:004140F6                 db    ? ;
.bss:004140F7                 db    ? ;
.bss:004140F8                 db    ? ;
.bss:004140F9                 db    ? ;
.bss:004140FA                 db    ? ;
.bss:004140FB                 db    ? ;
.bss:004140FC                 db    ? ;
.bss:004140FD                 db    ? ;
.bss:004140FE                 db    ? ;
.bss:004140FF                 db    ? ;
.bss:00414100                 db    ? ;
.bss:00414101                 db    ? ;
.bss:00414102                 db    ? ;
.bss:00414103                 db    ? ;
.bss:00414104                 db    ? ;
.bss:00414105                 db    ? ;
.bss:00414106                 db    ? ;
.bss:00414107                 db    ? ;
.bss:00414108                 db    ? ;
.bss:00414109                 db    ? ;
.bss:0041410A                 db    ? ;
.bss:0041410B                 db    ? ;
.bss:0041410C                 db    ? ;
.bss:0041410D                 db    ? ;
.bss:0041410E                 db    ? ;
.bss:0041410F                 db    ? ;
.bss:00414110                 db    ? ;
.bss:00414111                 db    ? ;
.bss:00414112                 db    ? ;
.bss:00414113                 db    ? ;
.bss:00414114                 db    ? ;
.bss:00414115                 db    ? ;
.bss:00414116                 db    ? ;
.bss:00414117                 db    ? ;
.bss:00414118                 db    ? ;
.bss:00414119                 db    ? ;
.bss:0041411A                 db    ? ;
.bss:0041411B                 db    ? ;
.bss:0041411C                 db    ? ;
.bss:0041411D                 db    ? ;
.bss:0041411E                 db    ? ;
.bss:0041411F                 db    ? ;
.bss:00414120                 db    ? ;
.bss:00414121                 db    ? ;
.bss:00414122                 db    ? ;
.bss:00414123                 db    ? ;
.bss:00414124                 db    ? ;
.bss:00414125                 db    ? ;
.bss:00414126                 db    ? ;
.bss:00414127                 db    ? ;
.bss:00414128                 db    ? ;
.bss:00414129                 db    ? ;
.bss:0041412A                 db    ? ;
.bss:0041412B                 db    ? ;
.bss:0041412C                 db    ? ;
.bss:0041412D                 db    ? ;
.bss:0041412E                 db    ? ;
.bss:0041412F                 db    ? ;
.bss:00414130                 db    ? ;
.bss:00414131                 db    ? ;
.bss:00414132                 db    ? ;
.bss:00414133                 db    ? ;
.bss:00414134                 db    ? ;
.bss:00414135                 db    ? ;
.bss:00414136                 db    ? ;
.bss:00414137                 db    ? ;
.bss:00414138                 db    ? ;
.bss:00414139                 db    ? ;
.bss:0041413A                 db    ? ;
.bss:0041413B                 db    ? ;
.bss:0041413C                 db    ? ;
.bss:0041413D                 db    ? ;
.bss:0041413E                 db    ? ;
.bss:0041413F                 db    ? ;
.bss:00414140                 db    ? ;
.bss:00414141                 db    ? ;
.bss:00414142                 db    ? ;
.bss:00414143                 db    ? ;
.bss:00414144                 db    ? ;
.bss:00414145                 db    ? ;
.bss:00414146                 db    ? ;
.bss:00414147                 db    ? ;
.bss:00414148                 db    ? ;
.bss:00414149                 db    ? ;
.bss:0041414A                 db    ? ;
.bss:0041414B                 db    ? ;
.bss:0041414C                 db    ? ;
.bss:0041414D                 db    ? ;
.bss:0041414E                 db    ? ;
.bss:0041414F                 db    ? ;
.bss:00414150                 db    ? ;
.bss:00414151                 db    ? ;
.bss:00414152                 db    ? ;
.bss:00414153                 db    ? ;
.bss:00414154                 db    ? ;
.bss:00414155                 db    ? ;
.bss:00414156                 db    ? ;
.bss:00414157                 db    ? ;
.bss:00414158                 db    ? ;
.bss:00414159                 db    ? ;
.bss:0041415A                 db    ? ;
.bss:0041415B                 db    ? ;
.bss:0041415C                 db    ? ;
.bss:0041415D                 db    ? ;
.bss:0041415E                 db    ? ;
.bss:0041415F                 db    ? ;
.bss:00414160                 db    ? ;
.bss:00414161                 db    ? ;
.bss:00414162                 db    ? ;
.bss:00414163                 db    ? ;
.bss:00414164                 db    ? ;
.bss:00414165                 db    ? ;
.bss:00414166                 db    ? ;
.bss:00414167                 db    ? ;
.bss:00414168                 db    ? ;
.bss:00414169                 db    ? ;
.bss:0041416A                 db    ? ;
.bss:0041416B                 db    ? ;
.bss:0041416C                 db    ? ;
.bss:0041416D                 db    ? ;
.bss:0041416E                 db    ? ;
.bss:0041416F                 db    ? ;
.bss:00414170                 db    ? ;
.bss:00414171                 db    ? ;
.bss:00414172                 db    ? ;
.bss:00414173                 db    ? ;
.bss:00414174                 db    ? ;
.bss:00414175                 db    ? ;
.bss:00414176                 db    ? ;
.bss:00414177                 db    ? ;
.bss:00414178                 db    ? ;
.bss:00414179                 db    ? ;
.bss:0041417A                 db    ? ;
.bss:0041417B                 db    ? ;
.bss:0041417C                 db    ? ;
.bss:0041417D                 db    ? ;
.bss:0041417E                 db    ? ;
.bss:0041417F                 db    ? ;
.bss:00414180                 db    ? ;
.bss:00414181                 db    ? ;
.bss:00414182                 db    ? ;
.bss:00414183                 db    ? ;
.bss:00414184                 db    ? ;
.bss:00414185                 db    ? ;
.bss:00414186                 db    ? ;
.bss:00414187                 db    ? ;
.bss:00414188                 db    ? ;
.bss:00414189                 db    ? ;
.bss:0041418A                 db    ? ;
.bss:0041418B                 db    ? ;
.bss:0041418C                 db    ? ;
.bss:0041418D                 db    ? ;
.bss:0041418E                 db    ? ;
.bss:0041418F                 db    ? ;
.bss:00414190 dword_414190    dd ?                    ; DATA XREF: .text:loc_4086F1↑o
.bss:00414190                                         ; .text:loc_408710↑o ...
.bss:00414194 dword_414194    dd ?                    ; DATA XREF: .text:loc_408790↑o
.bss:00414194                                         ; .text:00408C18↑r ...
.bss:00414198 dword_414198    dd ?                    ; DATA XREF: .text:00408C12↑r
.bss:00414198                                         ; sub_408CC0+2C↑r
.bss:0041419C dword_41419C    dd ?                    ; DATA XREF: .text:00408C06↑r
.bss:0041419C                                         ; sub_408CC0+22↑r
.bss:004141A0 dword_4141A0    dd ?                    ; DATA XREF: .text:00408C22↑r
.bss:004141A0                                         ; sub_408CC0+36↑r
.bss:004141A4 dword_4141A4    dd ?                    ; DATA XREF: .text:00408C32↑r
.bss:004141A4                                         ; sub_408CC0+4E↑r
.bss:004141A8 dword_4141A8    dd ?                    ; DATA XREF: .text:00408C4F↑r
.bss:004141A8                                         ; sub_408CC0+62↑r
.bss:004141AC dword_4141AC    dd ?                    ; DATA XREF: .text:00408C45↑r
.bss:004141AC                                         ; sub_408CC0+70↑r
.bss:004141B0 dword_4141B0    dd ?                    ; DATA XREF: .text:00408C28↑r
.bss:004141B0                                         ; sub_408CC0+7A↑r
.bss:004141B4                 align 10h
.bss:004141C0 ; char *Str1
.bss:004141C0 Str1            dd ?                    ; DATA XREF: sub_409084:loc_4090BD↑w
.bss:004141C0                                         ; sub_409084:loc_4091F0↑r
.bss:004141C4                 align 10h
.bss:004141D0 dword_4141D0    dd ?                    ; DATA XREF: sub_409084+2D↑r
.bss:004141D0                                         ; sub_409084+3F↑w
.bss:004141D4                 align 10h
.bss:004141E0 dword_4141E0    dd ?                    ; DATA XREF: sub_409D40+100↑r
.bss:004141E0                                         ; sub_409D40+308↑w
.bss:004141E4                 align 10h
.bss:004141F0 ; char *Str
.bss:004141F0 Str             dd ?                    ; DATA XREF: sub_409D40:loc_40A0A4↑r
.bss:004141F0                                         ; sub_409D40+3B6↑r ...
.bss:004141F4                 align 10h
.bss:00414200 dword_414200    dd ?                    ; DATA XREF: sub_40BC80+1C↑r
.bss:00414200                                         ; sub_40BC80+104↑w
.bss:00414204                 align 10h
.bss:00414210 dword_414210    dd ?                    ; DATA XREF: sub_40BC80+B↑r
.bss:00414210                                         ; sub_40BC80+71↑w
.bss:00414214                 align 10h
.bss:00414220 dword_414220    dd ?                    ; DATA XREF: sub_40BC80+85↑r
.bss:00414220                                         ; sub_40BC80+B9↑w
.bss:00414224 dword_414224    dd ?                    ; DATA XREF: sub_40BC80+C4↑w
.bss:00414228 dword_414228    dd ?                    ; DATA XREF: sub_40BC80+2E↑o
.bss:00414228                                         ; sub_40BC80+CF↑w
.bss:0041422C dword_41422C    dd ?                    ; DATA XREF: sub_40BC80+DA↑w
.bss:00414230                 db    ? ;
.bss:00414231                 db    ? ;
.bss:00414232                 db    ? ;
.bss:00414233                 db    ? ;
.bss:00414234                 db    ? ;
.bss:00414235                 db    ? ;
.bss:00414236                 db    ? ;
.bss:00414237                 db    ? ;
.bss:00414238                 db    ? ;
.bss:00414239                 db    ? ;
.bss:0041423A                 db    ? ;
.bss:0041423B                 db    ? ;
.bss:0041423C                 db    ? ;
.bss:0041423D                 db    ? ;
.bss:0041423E                 db    ? ;
.bss:0041423F                 db    ? ;
.bss:00414240                 db    ? ;
.bss:00414241                 db    ? ;
.bss:00414242                 db    ? ;
.bss:00414243                 db    ? ;
.bss:00414244                 db    ? ;
.bss:00414245                 db    ? ;
.bss:00414246                 db    ? ;
.bss:00414247                 db    ? ;
.bss:00414248                 db    ? ;
.bss:00414249                 db    ? ;
.bss:0041424A                 db    ? ;
.bss:0041424B                 db    ? ;
.bss:0041424C                 db    ? ;
.bss:0041424D                 db    ? ;
.bss:0041424E                 db    ? ;
.bss:0041424F                 db    ? ;
.bss:00414250                 db    ? ;
.bss:00414251                 db    ? ;
.bss:00414252                 db    ? ;
.bss:00414253                 db    ? ;
.bss:00414254                 db    ? ;
.bss:00414255                 db    ? ;
.bss:00414256                 db    ? ;
.bss:00414257                 db    ? ;
.bss:00414258                 db    ? ;
.bss:00414259                 db    ? ;
.bss:0041425A                 db    ? ;
.bss:0041425B                 db    ? ;
.bss:0041425C                 db    ? ;
.bss:0041425D                 db    ? ;
.bss:0041425E                 db    ? ;
.bss:0041425F                 db    ? ;
.bss:00414260                 db    ? ;
.bss:00414261                 db    ? ;
.bss:00414262                 db    ? ;
.bss:00414263                 db    ? ;
.bss:00414264                 db    ? ;
.bss:00414265                 db    ? ;
.bss:00414266                 db    ? ;
.bss:00414267                 db    ? ;
.bss:00414268                 db    ? ;
.bss:00414269                 db    ? ;
.bss:0041426A                 db    ? ;
.bss:0041426B                 db    ? ;
.bss:0041426C                 db    ? ;
.bss:0041426D                 db    ? ;
.bss:0041426E                 db    ? ;
.bss:0041426F                 db    ? ;
.bss:00414270                 db    ? ;
.bss:00414271                 db    ? ;
.bss:00414272                 db    ? ;
.bss:00414273                 db    ? ;
.bss:00414274                 db    ? ;
.bss:00414275                 db    ? ;
.bss:00414276                 db    ? ;
.bss:00414277                 db    ? ;
.bss:00414278                 db    ? ;
.bss:00414279                 db    ? ;
.bss:0041427A                 db    ? ;
.bss:0041427B                 db    ? ;
.bss:0041427C                 db    ? ;
.bss:0041427D                 db    ? ;
.bss:0041427E                 db    ? ;
.bss:0041427F                 db    ? ;
.bss:00414280                 db    ? ;
.bss:00414281                 db    ? ;
.bss:00414282                 db    ? ;
.bss:00414283                 db    ? ;
.bss:00414284                 db    ? ;
.bss:00414285                 db    ? ;
.bss:00414286                 db    ? ;
.bss:00414287                 db    ? ;
.bss:00414288                 db    ? ;
.bss:00414289                 db    ? ;
.bss:0041428A                 db    ? ;
.bss:0041428B                 db    ? ;
.bss:0041428C                 db    ? ;
.bss:0041428D                 db    ? ;
.bss:0041428E                 db    ? ;
.bss:0041428F                 db    ? ;
.bss:00414290                 db    ? ;
.bss:00414291                 db    ? ;
.bss:00414292                 db    ? ;
.bss:00414293                 db    ? ;
.bss:00414294                 db    ? ;
.bss:00414295                 db    ? ;
.bss:00414296                 db    ? ;
.bss:00414297                 db    ? ;
.bss:00414298                 db    ? ;
.bss:00414299                 db    ? ;
.bss:0041429A                 db    ? ;
.bss:0041429B                 db    ? ;
.bss:0041429C                 db    ? ;
.bss:0041429D                 db    ? ;
.bss:0041429E                 db    ? ;
.bss:0041429F                 db    ? ;
.bss:004142A0                 db    ? ;
.bss:004142A1                 db    ? ;
.bss:004142A2                 db    ? ;
.bss:004142A3                 db    ? ;
.bss:004142A4                 db    ? ;
.bss:004142A5                 db    ? ;
.bss:004142A6                 db    ? ;
.bss:004142A7                 db    ? ;
.bss:004142A8                 db    ? ;
.bss:004142A9                 db    ? ;
.bss:004142AA                 db    ? ;
.bss:004142AB                 db    ? ;
.bss:004142AC                 db    ? ;
.bss:004142AD                 db    ? ;
.bss:004142AE                 db    ? ;
.bss:004142AF                 db    ? ;
.bss:004142B0                 db    ? ;
.bss:004142B1                 db    ? ;
.bss:004142B2                 db    ? ;
.bss:004142B3                 db    ? ;
.bss:004142B4                 db    ? ;
.bss:004142B5                 db    ? ;
.bss:004142B6                 db    ? ;
.bss:004142B7                 db    ? ;
.bss:004142B8                 db    ? ;
.bss:004142B9                 db    ? ;
.bss:004142BA                 db    ? ;
.bss:004142BB                 db    ? ;
.bss:004142BC                 db    ? ;
.bss:004142BD                 db    ? ;
.bss:004142BE                 db    ? ;
.bss:004142BF                 db    ? ;
.bss:004142C0                 db    ? ;
.bss:004142C1                 db    ? ;
.bss:004142C2                 db    ? ;
.bss:004142C3                 db    ? ;
.bss:004142C4                 db    ? ;
.bss:004142C5                 db    ? ;
.bss:004142C6                 db    ? ;
.bss:004142C7                 db    ? ;
.bss:004142C8                 db    ? ;
.bss:004142C9                 db    ? ;
.bss:004142CA                 db    ? ;
.bss:004142CB                 db    ? ;
.bss:004142CC                 db    ? ;
.bss:004142CD                 db    ? ;
.bss:004142CE                 db    ? ;
.bss:004142CF                 db    ? ;
.bss:004142D0                 db    ? ;
.bss:004142D1                 db    ? ;
.bss:004142D2                 db    ? ;
.bss:004142D3                 db    ? ;
.bss:004142D4                 db    ? ;
.bss:004142D5                 db    ? ;
.bss:004142D6                 db    ? ;
.bss:004142D7                 db    ? ;
.bss:004142D8                 db    ? ;
.bss:004142D9                 db    ? ;
.bss:004142DA                 db    ? ;
.bss:004142DB                 db    ? ;
.bss:004142DC                 db    ? ;
.bss:004142DD                 db    ? ;
.bss:004142DE                 db    ? ;
.bss:004142DF                 db    ? ;
.bss:004142E0                 db    ? ;
.bss:004142E1                 db    ? ;
.bss:004142E2                 db    ? ;
.bss:004142E3                 db    ? ;
.bss:004142E4                 db    ? ;
.bss:004142E5                 db    ? ;
.bss:004142E6                 db    ? ;
.bss:004142E7                 db    ? ;
.bss:004142E8                 db    ? ;
.bss:004142E9                 db    ? ;
.bss:004142EA                 db    ? ;
.bss:004142EB                 db    ? ;
.bss:004142EC                 db    ? ;
.bss:004142ED                 db    ? ;
.bss:004142EE                 db    ? ;
.bss:004142EF                 db    ? ;
.bss:004142F0                 db    ? ;
.bss:004142F1                 db    ? ;
.bss:004142F2                 db    ? ;
.bss:004142F3                 db    ? ;
.bss:004142F4                 db    ? ;
.bss:004142F5                 db    ? ;
.bss:004142F6                 db    ? ;
.bss:004142F7                 db    ? ;
.bss:004142F8                 db    ? ;
.bss:004142F9                 db    ? ;
.bss:004142FA                 db    ? ;
.bss:004142FB                 db    ? ;
.bss:004142FC                 db    ? ;
.bss:004142FD                 db    ? ;
.bss:004142FE                 db    ? ;
.bss:004142FF                 db    ? ;
.bss:00414300                 db    ? ;
.bss:00414301                 db    ? ;
.bss:00414302                 db    ? ;
.bss:00414303                 db    ? ;
.bss:00414304                 db    ? ;
.bss:00414305                 db    ? ;
.bss:00414306                 db    ? ;
.bss:00414307                 db    ? ;
.bss:00414308                 db    ? ;
.bss:00414309                 db    ? ;
.bss:0041430A                 db    ? ;
.bss:0041430B                 db    ? ;
.bss:0041430C                 db    ? ;
.bss:0041430D                 db    ? ;
.bss:0041430E                 db    ? ;
.bss:0041430F                 db    ? ;
.bss:00414310                 db    ? ;
.bss:00414311                 db    ? ;
.bss:00414312                 db    ? ;
.bss:00414313                 db    ? ;
.bss:00414314                 db    ? ;
.bss:00414315                 db    ? ;
.bss:00414316                 db    ? ;
.bss:00414317                 db    ? ;
.bss:00414318                 db    ? ;
.bss:00414319                 db    ? ;
.bss:0041431A                 db    ? ;
.bss:0041431B                 db    ? ;
.bss:0041431C                 db    ? ;
.bss:0041431D                 db    ? ;
.bss:0041431E                 db    ? ;
.bss:0041431F                 db    ? ;
.bss:00414320                 db    ? ;
.bss:00414321                 db    ? ;
.bss:00414322                 db    ? ;
.bss:00414323                 db    ? ;
.bss:00414324                 db    ? ;
.bss:00414325                 db    ? ;
.bss:00414326                 db    ? ;
.bss:00414327                 db    ? ;
.bss:00414328                 db    ? ;
.bss:00414329                 db    ? ;
.bss:0041432A                 db    ? ;
.bss:0041432B                 db    ? ;
.bss:0041432C                 db    ? ;
.bss:0041432D                 db    ? ;
.bss:0041432E                 db    ? ;
.bss:0041432F                 db    ? ;
.bss:00414330                 db    ? ;
.bss:00414331                 db    ? ;
.bss:00414332                 db    ? ;
.bss:00414333                 db    ? ;
.bss:00414334                 db    ? ;
.bss:00414335                 db    ? ;
.bss:00414336                 db    ? ;
.bss:00414337                 db    ? ;
.bss:00414338                 db    ? ;
.bss:00414339                 db    ? ;
.bss:0041433A                 db    ? ;
.bss:0041433B                 db    ? ;
.bss:0041433C                 db    ? ;
.bss:0041433D                 db    ? ;
.bss:0041433E                 db    ? ;
.bss:0041433F                 db    ? ;
.bss:00414340                 db    ? ;
.bss:00414341                 db    ? ;
.bss:00414342                 db    ? ;
.bss:00414343                 db    ? ;
.bss:00414344                 db    ? ;
.bss:00414345                 db    ? ;
.bss:00414346                 db    ? ;
.bss:00414347                 db    ? ;
.bss:00414348                 db    ? ;
.bss:00414349                 db    ? ;
.bss:0041434A                 db    ? ;
.bss:0041434B                 db    ? ;
.bss:0041434C                 db    ? ;
.bss:0041434D                 db    ? ;
.bss:0041434E                 db    ? ;
.bss:0041434F                 db    ? ;
.bss:00414350                 db    ? ;
.bss:00414351                 db    ? ;
.bss:00414352                 db    ? ;
.bss:00414353                 db    ? ;
.bss:00414354                 db    ? ;
.bss:00414355                 db    ? ;
.bss:00414356                 db    ? ;
.bss:00414357                 db    ? ;
.bss:00414358                 db    ? ;
.bss:00414359                 db    ? ;
.bss:0041435A                 db    ? ;
.bss:0041435B                 db    ? ;
.bss:0041435C                 db    ? ;
.bss:0041435D                 db    ? ;
.bss:0041435E                 db    ? ;
.bss:0041435F                 db    ? ;
.bss:00414360                 db    ? ;
.bss:00414361                 db    ? ;
.bss:00414362                 db    ? ;
.bss:00414363                 db    ? ;
.bss:00414364                 db    ? ;
.bss:00414365                 db    ? ;
.bss:00414366                 db    ? ;
.bss:00414367                 db    ? ;
.bss:00414368                 db    ? ;
.bss:00414369                 db    ? ;
.bss:0041436A                 db    ? ;
.bss:0041436B                 db    ? ;
.bss:0041436C                 db    ? ;
.bss:0041436D                 db    ? ;
.bss:0041436E                 db    ? ;
.bss:0041436F                 db    ? ;
.bss:00414370                 db    ? ;
.bss:00414371                 db    ? ;
.bss:00414372                 db    ? ;
.bss:00414373                 db    ? ;
.bss:00414374                 db    ? ;
.bss:00414375                 db    ? ;
.bss:00414376                 db    ? ;
.bss:00414377                 db    ? ;
.bss:00414378                 db    ? ;
.bss:00414379                 db    ? ;
.bss:0041437A                 db    ? ;
.bss:0041437B                 db    ? ;
.bss:0041437C                 db    ? ;
.bss:0041437D                 db    ? ;
.bss:0041437E                 db    ? ;
.bss:0041437F                 db    ? ;
.bss:00414380                 db    ? ;
.bss:00414381                 db    ? ;
.bss:00414382                 db    ? ;
.bss:00414383                 db    ? ;
.bss:00414384                 db    ? ;
.bss:00414385                 db    ? ;
.bss:00414386                 db    ? ;
.bss:00414387                 db    ? ;
.bss:00414388                 db    ? ;
.bss:00414389                 db    ? ;
.bss:0041438A                 db    ? ;
.bss:0041438B                 db    ? ;
.bss:0041438C                 db    ? ;
.bss:0041438D                 db    ? ;
.bss:0041438E                 db    ? ;
.bss:0041438F                 db    ? ;
.bss:00414390                 db    ? ;
.bss:00414391                 db    ? ;
.bss:00414392                 db    ? ;
.bss:00414393                 db    ? ;
.bss:00414394                 db    ? ;
.bss:00414395                 db    ? ;
.bss:00414396                 db    ? ;
.bss:00414397                 db    ? ;
.bss:00414398                 db    ? ;
.bss:00414399                 db    ? ;
.bss:0041439A                 db    ? ;
.bss:0041439B                 db    ? ;
.bss:0041439C                 db    ? ;
.bss:0041439D                 db    ? ;
.bss:0041439E                 db    ? ;
.bss:0041439F                 db    ? ;
.bss:004143A0                 db    ? ;
.bss:004143A1                 db    ? ;
.bss:004143A2                 db    ? ;
.bss:004143A3                 db    ? ;
.bss:004143A4                 db    ? ;
.bss:004143A5                 db    ? ;
.bss:004143A6                 db    ? ;
.bss:004143A7                 db    ? ;
.bss:004143A8                 db    ? ;
.bss:004143A9                 db    ? ;
.bss:004143AA                 db    ? ;
.bss:004143AB                 db    ? ;
.bss:004143AC                 db    ? ;
.bss:004143AD                 db    ? ;
.bss:004143AE                 db    ? ;
.bss:004143AF                 db    ? ;
.bss:004143B0                 db    ? ;
.bss:004143B1                 db    ? ;
.bss:004143B2                 db    ? ;
.bss:004143B3                 db    ? ;
.bss:004143B4                 db    ? ;
.bss:004143B5                 db    ? ;
.bss:004143B6                 db    ? ;
.bss:004143B7                 db    ? ;
.bss:004143B8                 db    ? ;
.bss:004143B9                 db    ? ;
.bss:004143BA                 db    ? ;
.bss:004143BB                 db    ? ;
.bss:004143BC                 db    ? ;
.bss:004143BD                 db    ? ;
.bss:004143BE                 db    ? ;
.bss:004143BF                 db    ? ;
.bss:004143C0                 db    ? ;
.bss:004143C1                 db    ? ;
.bss:004143C2                 db    ? ;
.bss:004143C3                 db    ? ;
.bss:004143C4                 db    ? ;
.bss:004143C5                 db    ? ;
.bss:004143C6                 db    ? ;
.bss:004143C7                 db    ? ;
.bss:004143C8                 db    ? ;
.bss:004143C9                 db    ? ;
.bss:004143CA                 db    ? ;
.bss:004143CB                 db    ? ;
.bss:004143CC                 db    ? ;
.bss:004143CD                 db    ? ;
.bss:004143CE                 db    ? ;
.bss:004143CF                 db    ? ;
.bss:004143D0                 db    ? ;
.bss:004143D1                 db    ? ;
.bss:004143D2                 db    ? ;
.bss:004143D3                 db    ? ;
.bss:004143D4                 db    ? ;
.bss:004143D5                 db    ? ;
.bss:004143D6                 db    ? ;
.bss:004143D7                 db    ? ;
.bss:004143D8                 db    ? ;
.bss:004143D9                 db    ? ;
.bss:004143DA                 db    ? ;
.bss:004143DB                 db    ? ;
.bss:004143DC                 db    ? ;
.bss:004143DD                 db    ? ;
.bss:004143DE                 db    ? ;
.bss:004143DF                 db    ? ;
.bss:004143E0                 db    ? ;
.bss:004143E1                 db    ? ;
.bss:004143E2                 db    ? ;
.bss:004143E3                 db    ? ;
.bss:004143E4                 db    ? ;
.bss:004143E5                 db    ? ;
.bss:004143E6                 db    ? ;
.bss:004143E7                 db    ? ;
.bss:004143E8                 db    ? ;
.bss:004143E9                 db    ? ;
.bss:004143EA                 db    ? ;
.bss:004143EB                 db    ? ;
.bss:004143EC                 db    ? ;
.bss:004143ED                 db    ? ;
.bss:004143EE                 db    ? ;
.bss:004143EF                 db    ? ;
.bss:004143F0                 db    ? ;
.bss:004143F1                 db    ? ;
.bss:004143F2                 db    ? ;
.bss:004143F3                 db    ? ;
.bss:004143F4                 db    ? ;
.bss:004143F5                 db    ? ;
.bss:004143F6                 db    ? ;
.bss:004143F7                 db    ? ;
.bss:004143F8                 db    ? ;
.bss:004143F9                 db    ? ;
.bss:004143FA                 db    ? ;
.bss:004143FB                 db    ? ;
.bss:004143FC                 db    ? ;
.bss:004143FD                 db    ? ;
.bss:004143FE                 db    ? ;
.bss:004143FF                 db    ? ;
.bss:00414400                 db    ? ;
.bss:00414401                 db    ? ;
.bss:00414402                 db    ? ;
.bss:00414403                 db    ? ;
.bss:00414404                 db    ? ;
.bss:00414405                 db    ? ;
.bss:00414406                 db    ? ;
.bss:00414407                 db    ? ;
.bss:00414408                 db    ? ;
.bss:00414409                 db    ? ;
.bss:0041440A                 db    ? ;
.bss:0041440B                 db    ? ;
.bss:0041440C                 db    ? ;
.bss:0041440D                 db    ? ;
.bss:0041440E                 db    ? ;
.bss:0041440F                 db    ? ;
.bss:00414410                 db    ? ;
.bss:00414411                 db    ? ;
.bss:00414412                 db    ? ;
.bss:00414413                 db    ? ;
.bss:00414414                 db    ? ;
.bss:00414415                 db    ? ;
.bss:00414416                 db    ? ;
.bss:00414417                 db    ? ;
.bss:00414418                 db    ? ;
.bss:00414419                 db    ? ;
.bss:0041441A                 db    ? ;
.bss:0041441B                 db    ? ;
.bss:0041441C                 db    ? ;
.bss:0041441D                 db    ? ;
.bss:0041441E                 db    ? ;
.bss:0041441F                 db    ? ;
.bss:00414420 dword_414420    dd ?                    ; DATA XREF: sub_40CB00+38↑r
.bss:00414420                                         ; sub_40CB00+FC↑w ...
.bss:00414424                 align 10h
.bss:00414430 dword_414430    dd ?                    ; DATA XREF: sub_40CB00+4A↑r
.bss:00414430                                         ; sub_40CB00+123↑w
.bss:00414434                 align 10h
.bss:00414440 dword_414440    dd ?                    ; DATA XREF: sub_40DB10+8↑r
.bss:00414440                                         ; sub_40DC20:loc_40DCA2↑w ...
.bss:00414444                 align 10h
.bss:00414450 ; struct _OSVERSIONINFOA VersionInformation
.bss:00414450 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40DC20:loc_40DC40↑o
.bss:00414450                                         ; sub_40DC20+2C↑w ...
.bss:004144E4 word_4144E4     dw ?                    ; DATA XREF: sub_40DC20:loc_40DCD3↑r
.bss:004144E6                 align 4
.bss:004144E8 word_4144E8     dw ?                    ; DATA XREF: .text:loc_40D696↑r
.bss:004144E8                                         ; .text:0040D6C4↑r ...
.bss:004144EA byte_4144EA     db ?                    ; DATA XREF: .text:0040D655↑r
.bss:004144EB                 align 10h
.bss:004144F0 dword_4144F0    dd ?                    ; DATA XREF: sub_40DC20+6↑r
.bss:004144F0                                         ; sub_40DC20+75↑w
.bss:004144F4                 align 10h
.bss:00414500 dword_414500    dd ?                    ; DATA XREF: sub_40F7E0+7↑r
.bss:00414500                                         ; sub_40F7E0+2B↑w ...
.bss:00414504                 align 10h
.bss:00414510 ; struct _SYSTEM_INFO SystemInfo
.bss:00414510 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_40F7E0+21↑o
.bss:00414510                                         ; sub_40F7E0+33↑o ...
.bss:00414534                 align 10h
.bss:00414540 dword_414540    dd ?                    ; DATA XREF: sub_4101A0+6E↑r
.bss:00414540                                         ; sub_4101A0+9A↑r ...
.bss:00414544 dword_414544    dd ?                    ; DATA XREF: sub_4101A0:loc_410208↑r
.bss:00414544                                         ; sub_4101A0+A0↑r ...
.bss:00414548                 align 10h
.bss:00414550 dword_414550    dd ?                    ; DATA XREF: sub_4106B0↑r
.bss:00414550                                         ; .text:loc_4107E2↑w
.bss:00414554                 align 10h
.bss:00414560 dword_414560    dd ?                    ; DATA XREF: sub_401920+3E↑w
.bss:00414560                                         ; sub_401920+187↑r ...
.bss:00414564                 align 20h
.bss:00414580 dword_414580    dd ?                    ; DATA XREF: sub_401920+3C2↑r
.bss:00414580                                         ; sub_405830+71↑w ...
.bss:00414584                 align 10h
.bss:00414590 dword_414590    dd ?                    ; CODE XREF: sub_409084+63↑p
.bss:00414590                                         ; DATA XREF: sub_408F80+1E↑r ...
.bss:00414594                 align 10h
.bss:004145A0 dword_4145A0    dd ?                    ; DATA XREF: sub_408F80+4E↑w
.bss:004145A0                                         ; sub_409084+AB↑w
.bss:004145A4                 db    ? ;
.bss:004145A5                 db    ? ;
.bss:004145A6                 db    ? ;
.bss:004145A7                 db    ? ;
.bss:004145A8                 db    ? ;
.bss:004145A9                 db    ? ;
.bss:004145AA                 db    ? ;
.bss:004145AB                 db    ? ;
.bss:004145AC                 db    ? ;
.bss:004145AD                 db    ? ;
.bss:004145AE                 db    ? ;
.bss:004145AF                 db    ? ;
.bss:004145B0                 db    ? ;
.bss:004145B1                 db    ? ;
.bss:004145B2                 db    ? ;
.bss:004145B3                 db    ? ;
.bss:004145B4                 db    ? ;
.bss:004145B5                 db    ? ;
.bss:004145B6                 db    ? ;
.bss:004145B7                 db    ? ;
.bss:004145B8                 db    ? ;
.bss:004145B9                 db    ? ;
.bss:004145BA                 db    ? ;
.bss:004145BB                 db    ? ;
.bss:004145BC                 db    ? ;
.bss:004145BD                 db    ? ;
.bss:004145BE                 db    ? ;
.bss:004145BF                 db    ? ;
.bss:004145C0                 db    ? ;
.bss:004145C1                 db    ? ;
.bss:004145C2                 db    ? ;
.bss:004145C3                 db    ? ;
.bss:004145C4                 db    ? ;
.bss:004145C5                 db    ? ;
.bss:004145C6                 db    ? ;
.bss:004145C7                 db    ? ;
.bss:004145C8                 db    ? ;
.bss:004145C9                 db    ? ;
.bss:004145CA                 db    ? ;
.bss:004145CB                 db    ? ;
.bss:004145CC                 db    ? ;
.bss:004145CD                 db    ? ;
.bss:004145CE                 db    ? ;
.bss:004145CF                 db    ? ;
.bss:004145D0 dword_4145D0    dd ?                    ; DATA XREF: sub_409084+13↑r
.bss:004145D4                 align 10h
.bss:004145E0 dword_4145E0    dd ?                    ; DATA XREF: sub_40F940+A↑w
.bss:004145E4                 align 1000h
.bss:004145E4 _bss            ends
.bss:004145E4
.idata:00415000 ; Section 4. (virtual address 00015000)
.idata:00415000 ; Virtual size                  : 00000DF0 (   3568.)
.idata:00415000 ; Section size in file          : 00000E00 (   3584.)
.idata:00415000 ; Offset to raw data for section: 00012200
.idata:00415000 ; Flags C0000040: Data Readable Writable
.idata:00415000 ; Alignment     : default
.idata:00415000 ; ===========================================================================
.idata:00415000
.idata:00415000 ; Segment type: Externs
.idata:00415000 ; _idata
.idata:00415000
.idata:00415001
.idata:004152B4 ;
.idata:004152B4 ; Imports from libintl3.dll
.idata:004152B4 ;
.idata:004152B4                 extrn __imp_libintl_bindtextdomain:dword
.idata:004152B4                                         ; CODE XREF: sub_401920+5F↑p
.idata:004152B4                                         ; DATA XREF: sub_401920+5F↑r ...
.idata:004152B8                 extrn libintl_gettext:dword
.idata:004152B8                                         ; CODE XREF: sub_401920+17B↑p
.idata:004152B8                                         ; sub_401920+204↑p ...
.idata:004152BC                 extrn libintl_textdomain:dword
.idata:004152BC                                         ; CODE XREF: sub_401920+6C↑p
.idata:004152BC                                         ; DATA XREF: sub_401920+6C↑r ...
.idata:004152C0
.idata:004152C8 ;
.idata:004152C8 ; Imports from ADVAPI32.DLL
.idata:004152C8 ;
.idata:004152C8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004152C8                 extrn __imp_RegCloseKey:dword
.idata:004152C8                                         ; DATA XREF: RegCloseKey↑r
.idata:004152CC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004152CC                 extrn __imp_RegOpenKeyExA:dword
.idata:004152CC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004152D0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004152D0                 extrn __imp_RegQueryValueExA:dword
.idata:004152D0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004152D4
.idata:004152DC ;
.idata:004152DC ; Imports from KERNEL32.dll
.idata:004152DC ;
.idata:004152DC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004152DC                 extrn __imp_AreFileApisANSI:dword
.idata:004152DC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004152E0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004152E0                 extrn __imp_CloseHandle:dword
.idata:004152E0                                         ; DATA XREF: CloseHandle↑r
.idata:004152E4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004152E4                 extrn __imp_CreateDirectoryA:dword
.idata:004152E4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004152E8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004152E8                 extrn __imp_CreateFileA:dword
.idata:004152E8                                         ; DATA XREF: CreateFileA↑r
.idata:004152EC ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004152EC                 extrn __imp_DeviceIoControl:dword
.idata:004152EC                                         ; DATA XREF: DeviceIoControl↑r
.idata:004152F0 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004152F0                 extrn __imp_ExitProcess:dword
.idata:004152F0                                         ; DATA XREF: ExitProcess↑r
.idata:004152F4 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004152F4                 extrn __imp_FindClose:dword
.idata:004152F4                                         ; DATA XREF: FindClose↑r
.idata:004152F8 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004152F8                 extrn __imp_FindFirstFileA:dword
.idata:004152F8                                         ; DATA XREF: FindFirstFileA↑r
.idata:004152FC ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004152FC                 extrn __imp_FindNextFileA:dword
.idata:004152FC                                         ; DATA XREF: FindNextFileA↑r
.idata:00415300 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00415300                 extrn __imp_FreeLibrary:dword
.idata:00415300                                         ; DATA XREF: FreeLibrary↑r
.idata:00415304 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00415304                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00415304                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00415308 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00415308                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00415308                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041530C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041530C                 extrn __imp_GetDriveTypeA:dword
.idata:0041530C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00415310 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00415310                 extrn __imp_GetFileAttributesA:dword
.idata:00415310                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00415314 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00415314                 extrn __imp_GetFileInformationByHandle:dword
.idata:00415314                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00415318 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00415318                 extrn __imp_GetFileSize:dword
.idata:00415318                                         ; DATA XREF: GetFileSize↑r
.idata:0041531C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041531C                 extrn __imp_GetFileType:dword
.idata:0041531C                                         ; DATA XREF: GetFileType↑r
.idata:00415320 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00415320                 extrn __imp_GetFullPathNameA:dword
.idata:00415320                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00415324 ; DWORD (__stdcall *GetLastError)()
.idata:00415324                 extrn __imp_GetLastError:dword
.idata:00415324                                         ; DATA XREF: GetLastError↑r
.idata:00415328 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00415328                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00415328                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041532C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041532C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041532C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00415330 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00415330                 extrn __imp_GetModuleHandleA:dword
.idata:00415330                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00415334 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00415334                 extrn __imp_GetProcAddress:dword
.idata:00415334                                         ; DATA XREF: GetProcAddress↑r
.idata:00415338 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00415338                 extrn __imp_GetProcessHeap:dword
.idata:00415338                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041533C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041533C                 extrn __imp_GetShortPathNameA:dword
.idata:0041533C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00415340 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:00415340                 extrn __imp_GetSystemInfo:dword
.idata:00415340                                         ; DATA XREF: GetSystemInfo↑r
.idata:00415344 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00415344                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00415344                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00415348 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00415348                 extrn __imp_GetTimeZoneInformation:dword
.idata:00415348                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041534C ; DWORD (__stdcall *GetVersion)()
.idata:0041534C                 extrn __imp_GetVersion:dword
.idata:0041534C                                         ; DATA XREF: GetVersion↑r
.idata:00415350 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00415350                 extrn __imp_GetVersionExA:dword
.idata:00415350                                         ; DATA XREF: GetVersionExA↑r
.idata:00415354 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00415354                 extrn __imp_GetVolumeInformationA:dword
.idata:00415354                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00415358 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00415358                 extrn __imp_HeapAlloc:dword
.idata:00415358                                         ; DATA XREF: HeapAlloc↑r
.idata:0041535C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041535C                 extrn __imp_HeapFree:dword
.idata:0041535C                                         ; DATA XREF: HeapFree↑r
.idata:00415360 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00415360                 extrn __imp_LoadLibraryA:dword
.idata:00415360                                         ; DATA XREF: LoadLibraryA↑r
.idata:00415364 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00415364                 extrn __imp_MultiByteToWideChar:dword
.idata:00415364                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00415368 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00415368                 extrn __imp_PeekNamedPipe:dword
.idata:00415368                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041536C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041536C                 extrn __imp_SetErrorMode:dword
.idata:0041536C                                         ; DATA XREF: SetErrorMode↑r
.idata:00415370 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00415370                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00415370                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00415374 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00415374                 extrn __imp_UnlockFile:dword
.idata:00415374                                         ; DATA XREF: UnlockFile↑r
.idata:00415378 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00415378                 extrn __imp_lstrcmpiA:dword
.idata:00415378                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041537C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041537C                 extrn __imp_lstrcpyA:dword
.idata:0041537C                                         ; DATA XREF: lstrcpyA↑r
.idata:00415380
.idata:00415388 ;
.idata:00415388 ; Imports from msvcrt.dll
.idata:00415388 ;
.idata:00415388 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00415388                 extrn __imp__chmod:dword
.idata:00415388                                         ; DATA XREF: _chmod↑r
.idata:0041538C ; int (__cdecl *_close)(int FileHandle)
.idata:0041538C                 extrn __imp__close:dword
.idata:0041538C                                         ; DATA XREF: _close↑r
.idata:00415390 ; int (__cdecl *_getpid)()
.idata:00415390                 extrn __imp__getpid:dword
.idata:00415390                                         ; DATA XREF: _getpid↑r
.idata:00415394 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00415394                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00415398 ; char *(__cdecl *_strdup)(const char *String)
.idata:00415398                 extrn __imp__strdup:dword
.idata:00415398                                         ; DATA XREF: _strdup↑r
.idata:0041539C ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041539C                 extrn __imp__stricmp:dword
.idata:0041539C                                         ; DATA XREF: _stricmp↑r
.idata:004153A0 ; int (__cdecl *_umask)(int Mode)
.idata:004153A0                 extrn __imp__umask:dword
.idata:004153A0                                         ; DATA XREF: _umask↑r
.idata:004153A4
.idata:004153AC ;
.idata:004153AC ; Imports from MSVCP60.DLL
.idata:004153AC ;
.idata:004153AC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004153AC                 extrn __imp_mbrtowc:dword
.idata:004153AC                                         ; DATA XREF: mbrtowc↑r
.idata:004153B0
.idata:004153B8 ;
.idata:004153B8 ; Imports from msvcrt.dll
.idata:004153B8 ;
.idata:004153B8                 extrn __imp___getmainargs:dword
.idata:004153B8                                         ; DATA XREF: __getmainargs↑r
.idata:004153BC ; int _mb_cur_max
.idata:004153BC                 extrn __mb_cur_max:dword
.idata:004153BC                                         ; DATA XREF: sub_407620+45↑r
.idata:004153BC                                         ; sub_407C20+7↑r ...
.idata:004153C0 ; char ***(__cdecl *__p__environ)()
.idata:004153C0                 extrn __imp___p__environ:dword
.idata:004153C0                                         ; DATA XREF: __p__environ↑r
.idata:004153C4 ; int *(__cdecl *__p__fmode)()
.idata:004153C4                 extrn __imp___p__fmode:dword
.idata:004153C4                                         ; DATA XREF: __p__fmode↑r
.idata:004153C8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004153C8                 extrn __set_app_type:dword
.idata:004153C8                                         ; CODE XREF: start+D↑p
.idata:004153C8                                         ; .text:0040102D↑p
.idata:004153C8                                         ; DATA XREF: ...
.idata:004153CC                 extrn __imp__assert:dword
.idata:004153CC                                         ; DATA XREF: _assert↑r
.idata:004153D0 ; void (__cdecl *_cexit)()
.idata:004153D0                 extrn __imp__cexit:dword
.idata:004153D0                                         ; DATA XREF: _cexit↑r
.idata:004153D4 ; int (__cdecl *_close_0)(int FileHandle)
.idata:004153D4                 extrn __imp__close_0:dword
.idata:004153D4                                         ; DATA XREF: _close_0↑r
.idata:004153D8 ; int *(__cdecl *_errno)()
.idata:004153D8                 extrn __imp__errno:dword
.idata:004153D8                                         ; DATA XREF: _errno↑r
.idata:004153DC ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004153DC                 extrn __imp__fdopen:dword
.idata:004153DC                                         ; DATA XREF: _fdopen↑r
.idata:004153E0 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004153E0                 extrn __imp__filelengthi64:dword
.idata:004153E0                                         ; DATA XREF: _filelengthi64↑r
.idata:004153E4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004153E4                 extrn __imp__flsbuf:dword
.idata:004153E4                                         ; DATA XREF: _flsbuf↑r
.idata:004153E8 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004153E8                 extrn __imp__get_osfhandle:dword
.idata:004153E8                                         ; DATA XREF: _get_osfhandle↑r
.idata:004153EC ; FILE iob[]
.idata:004153EC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004153EC                                         ; sub_401080+75↑r ...
.idata:004153F0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004153F0                 extrn __imp__isctype:dword
.idata:004153F0                                         ; DATA XREF: _isctype↑r
.idata:004153F4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004153F4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004153F4                                         ; DATA XREF: .text:0040106C↑r
.idata:004153F8 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:004153F8                 extrn __imp__open_0:dword
.idata:004153F8                                         ; DATA XREF: _open_0↑r
.idata:004153FC ; const unsigned __int16 *pctype
.idata:004153FC                 extrn _pctype:dword     ; DATA XREF: sub_407620:loc_407B40↑r
.idata:004153FC                                         ; sub_407C20:loc_408314↑r
.idata:00415400 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00415400                 extrn __imp__setmode:dword
.idata:00415400                                         ; DATA XREF: _setmode↑r
.idata:00415404 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00415404                 extrn __imp__stricmp_0:dword
.idata:00415404                                         ; DATA XREF: _stricmp_0↑r
.idata:00415408 ; void (__cdecl __noreturn *abort)()
.idata:00415408                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041540C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041540C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041540C                                         ; DATA XREF: sub_401040+C↑r
.idata:00415410 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00415410                 extrn __imp_calloc:dword
.idata:00415410                                         ; DATA XREF: calloc↑r
.idata:00415414 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00415414                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00415418 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00415418                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041541C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041541C                 extrn __imp_fclose:dword
.idata:0041541C                                         ; DATA XREF: fclose↑r
.idata:00415420 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00415420                 extrn __imp_fflush:dword
.idata:00415420                                         ; DATA XREF: fflush↑r
.idata:00415424 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00415424                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00415428 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00415428                 extrn __imp_fprintf:dword
.idata:00415428                                         ; DATA XREF: fprintf↑r
.idata:0041542C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041542C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00415430 ; void (__cdecl *free)(void *Block)
.idata:00415430                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00415434 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00415434                 extrn __imp_getenv:dword
.idata:00415434                                         ; DATA XREF: getenv↑r
.idata:00415438 ; int (__cdecl *isalpha)(int C)
.idata:00415438                 extrn __imp_isalpha:dword
.idata:00415438                                         ; DATA XREF: isalpha↑r
.idata:0041543C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041543C                 extrn __imp_iswctype:dword
.idata:0041543C                                         ; DATA XREF: iswctype↑r
.idata:00415440 ; void *(__cdecl *malloc)(size_t Size)
.idata:00415440                 extrn __imp_malloc:dword
.idata:00415440                                         ; DATA XREF: malloc↑r
.idata:00415444 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00415444                 extrn __imp_memcpy:dword
.idata:00415444                                         ; DATA XREF: memcpy↑r
.idata:00415448 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:00415448                 extrn __imp_memmove:dword
.idata:00415448                                         ; DATA XREF: memmove↑r
.idata:0041544C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041544C                 extrn __imp_memset:dword
.idata:0041544C                                         ; DATA XREF: memset↑r
.idata:00415450 ; int (*printf)(const char *const Format, ...)
.idata:00415450                 extrn __imp_printf:dword
.idata:00415450                                         ; DATA XREF: printf↑r
.idata:00415454 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00415454                 extrn __imp_realloc:dword
.idata:00415454                                         ; DATA XREF: realloc↑r
.idata:00415458 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00415458                 extrn __imp_setlocale:dword
.idata:00415458                                         ; DATA XREF: setlocale↑r
.idata:0041545C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041545C                 extrn __imp_signal:dword
.idata:0041545C                                         ; DATA XREF: signal↑r
.idata:00415460 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00415460                 extrn __imp_sprintf:dword
.idata:00415460                                         ; DATA XREF: sprintf↑r
.idata:00415464 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00415464                 extrn __imp_sscanf:dword
.idata:00415464                                         ; DATA XREF: sscanf↑r
.idata:00415468 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00415468                 extrn __imp_strcat:dword
.idata:00415468                                         ; DATA XREF: strcat↑r
.idata:0041546C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041546C                 extrn __imp_strchr:dword
.idata:0041546C                                         ; DATA XREF: strchr↑r
.idata:00415470 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00415470                 extrn __imp_strcmp:dword
.idata:00415470                                         ; DATA XREF: strcmp↑r
.idata:00415474 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00415474                 extrn __imp_strcpy:dword
.idata:00415474                                         ; DATA XREF: strcpy↑r
.idata:00415478 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00415478                 extrn __imp_strerror:dword
.idata:00415478                                         ; DATA XREF: strerror↑r
.idata:0041547C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041547C                 extrn __imp_strlen:dword
.idata:0041547C                                         ; DATA XREF: strlen↑r
.idata:00415480 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:00415480                 extrn __imp_strncat:dword
.idata:00415480                                         ; DATA XREF: strncat↑r
.idata:00415484 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00415484                 extrn __imp_strncmp:dword
.idata:00415484                                         ; DATA XREF: strncmp↑r
.idata:00415488 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00415488                 extrn __imp_strncpy:dword
.idata:00415488                                         ; DATA XREF: strncpy↑r
.idata:0041548C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041548C                 extrn __imp_strpbrk:dword
.idata:0041548C                                         ; DATA XREF: strpbrk↑r
.idata:00415490 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00415490                 extrn __imp_strrchr:dword
.idata:00415490                                         ; DATA XREF: strrchr↑r
.idata:00415494 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00415494                 extrn __imp_strspn:dword
.idata:00415494                                         ; DATA XREF: strspn↑r
.idata:00415498 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00415498                 extrn __imp_strstr:dword
.idata:00415498                                         ; DATA XREF: strstr↑r
.idata:0041549C ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0041549C                 extrn __imp_strtoul:dword
.idata:0041549C                                         ; DATA XREF: strtoul↑r
.idata:004154A0 ; int (__cdecl *toupper)(int C)
.idata:004154A0                 extrn __imp_toupper:dword
.idata:004154A0                                         ; DATA XREF: toupper↑r
.idata:004154A4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004154A4                 extrn __imp_vfprintf:dword
.idata:004154A4                                         ; DATA XREF: vfprintf↑r
.idata:004154A8
.idata:004154B0 ;
.idata:004154B0 ; Imports from OLE32.dll
.idata:004154B0 ;
.idata:004154B0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004154B0                 extrn __imp_CoCreateInstance:dword
.idata:004154B0                                         ; DATA XREF: CoCreateInstance↑r
.idata:004154B4 ; void (__stdcall *CoUninitialize)()
.idata:004154B4                 extrn __imp_CoUninitialize:dword
.idata:004154B4                                         ; DATA XREF: CoUninitialize↑r
.idata:004154B8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004154B8                 extrn __imp_OleInitialize:dword
.idata:004154B8                                         ; DATA XREF: OleInitialize↑r
.idata:004154BC
.idata:004154BC
.idata:004154BC
.idata:004154BC                 end start
